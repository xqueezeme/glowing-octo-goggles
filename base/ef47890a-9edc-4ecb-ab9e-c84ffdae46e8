{
    "title": "The Designer Pt. 02 Ch. 19",
    "pages": [
        "Author's Note\n\nThank you for continuing to read, vote and comment. The main story takes place in the Past and focuses on the effects of Kelly's powers, how powerful is her sexual aura? The Present storyline returns to the scene at their offices, and the effects Zac's awakening has on him while at school.\n\nI hope you enjoy this chapter.\n\n*****\n\nPast: Jeremiah\n\nI woke up with the light from the morning sunrise. Alyssa cuddled against my chest, her arm wraped over my side. I leaned and kissed the top of her head, then slipped off the edge of the pullout bed and into the aisle of the camper. I headed towards the bathroom, and looked at the back bedroom. Jenn was curled into Carmen's side, sleeping peacefully. Lexi rested her head on Kelly's breast also dead asleep. I tiptoed into the bathroom, and taking careful aim with my morning erection, voided my bladder with a steady stream.\n\nWhen I walked out, Alyssa was half sitting, looking back at me with sleepy eyes, \"Are you coming back to bed?\" she asked.\n\n\"I need to call and check in with my Uncle,\" I said, \"You can go back to sleep.\"\n\nShe waved and fell back on our pillow, exhausted. I quietly slipped on a pair of jean shorts and a tee-shirt. Climbing out of the RV without making a sound, I headed to the main lodge of the campground. I looked over at the swimming pool and saw several parts of swimsuits just lying on the ground. \n\nInside the lodge was a large common area with a few people milling about. The campground offered free coffee and donuts, so people would come in to get a donut, then chat in small groups. I continued past the common area, and down a hall to a bank of pay phones. I checked the time to be sure my uncle would be awake, and then I dialed collect. The operator came back on to relay was no answer on that line. I remembered it was Sunday, my uncle usually went to the early service at his church. Checking my watch, I figured I'd try again in few minutes.\n\nI stood up and walked to get a cup of coffee and a donut. While I was sipping the hot brew and selecting a donut, a couple and their two young children came into the building. The children made a bee-line to the donuts chattering happily. Their parents smiled at them, while they watched, holding hands. I plucked up a chocolate iced cake donut to make room for the kids and walked past their watchful parents.\n\n\"You were an animal last night,\" the husband whispered to his wife as I passed by.\n\n\"I couldn't help myself,\" she said blushing, \"I just needed you so bad, it must be this mountain air. You were fairly aggressive yourself mister, I thought you'd wake the kids with all your grunting.\"\n\nThey chuckled and then helped their children with their donuts and made them some hot chocolate. That was a curious conversation, paired with the strange poolside orgy, and our own succubus fueled sex party. I slowly wandered around the room, eavesdropping on the various cluster of people talking. I overheard more whispers of amorous adventures from the previous evening. None of the gossip sounded harmful, and I breathed a sigh of relief. Hopefully they'd just remember it as a wild night in the mountain air. I knew it had more to do with Kelly's power. I ran my fingers through my hair, and walked back to the phones. \n\n\"Yes, operator,\" Tommy's voice said, \"I'll accept the charges.\"\n\n\"Uncle Thomas?\" I asked, \"Can you hear me?\"\n\n\"Yes, Jeremiah,\" he said, \"How are things? Haven't heard from you since you left. Did you find Kelly's friend?\"\n\nI scratched my head, wondering how much I should report, \"Yes,\" I said simply, \"We found her and she is okay. I'll need to get her set up with some things, and move her back home.\"\n\nThere was a long pause, then Uncle Thomas said, \"Like the others?\"\n\n\"Yes,\" I said, not knowing what else to say.\n\n\"Jeremiah,\" he said, seriously, \"Should I expect any more?\"\n\nI chuckled, \"I hope not, I really wasn't expecting this. Alyssa and I are trying to figure out what happened, but it happened. We'll figure it out.\"\n\n\"You keep saying that,\" he replied, \"How's it working out for you?\"\n\nI was silent for a long moment as I thought about it, then answered, \"It's working fine, Uncle, honestly. Everything has gone better than I thought it would. Jenn, that's her name, was in a lot of trouble. We also helped a lot of people get free of the same organization my father was fighting against. We're making a difference.\"\n\nHe was quiet for a moment, then answered soberly, \"I understand, son. I just wanted to make sure you were okay. Things have gotten pretty wild in your life. I'm here for you, whatever happens. I made that promise to your mother, Jeremiah, I'm on your side.\"\n\nWe talked for a while, updating him on everything that had happened. I told him to expect a call from Betsy, regarding starting a Bed & Breakfast in Pinebluff. I also gave him the number I had for Rebekah, and asked him to open a line of communication. \n\n\"Anything she needs,\" I said, \"Within reason, I want to help her with. Betsy thinks the B&B can turn a profit quickly, if we can get it ready before ski season starts. The families there probably need additional help. Could you work with Rebekah, to see what help we can provide? Maybe make some jobs available to them to support the B&B. Betsy might have some ideas as well.\"\n\n\"Yes, okay, I understand,\" Thomas said, \"Sounds like you cleaned up a cesspool of corruption. Do you think your father's money is free to move around?\"\n\n\"Yes,\" I said, confidently, \"There shouldn't be anyone else watching those accounts. Consolidate what you can, you know better than me what needs to be done.\"\n\n\"Okay,\" he said, \"Anything else?\"\n\n\"Well, we were thinking of going to northern Idaho,\" I began, \"Do you remember the place we went when Mom was still alive? Was that your boat we used?\"\n\n\"Oh right, I think that was a client's boat,\" he said, \"When was that, six years ago? That was a fun time. Your mother really enjoyed that vacation. It was fun to watch you water ski.\"\n\n\"Yes, it was,\" I said, \"It was one of my favorite memories of my mother. How hard would it be to get a boat up there for a week or two? Or a cabin? We'd like to find a place that was away from any crowds and just relax together.\"\n\n\"Tell you what,\" Thomas said, \"Call me back after lunch, I'll make a few calls, and see if I can arrange something. Your Aunt Connie and I wanted to take a few days, would you mind if we flew into Spokane, and met all of you for a weekend?\"\n\n\"No,\" I said, \"That would be great. I'll call you back after we're back from shopping. Can you make the same arrangements for Jenn as you did for the others?\"\n\n\"You're still marrying Kelly, right?\" Thomas said with a laugh, then added, \"Yes, Jeremiah, I'll take care of it. If the weekend works out, you she can sign the papers then.\"\n\n\"Oh, that reminds me!\" I said, \"I would be honored if you would stand as my best man, Uncle.\"\n\n\"Jeremiah,\" Uncle Tomas said, his voice a lower and hushed tone, \"The honor would be mine. Of course I will.\"\n\n\"Okay! Great,\" I said, \"I need to get back to the girls, I'll call you this afternoon.\"\n\nI hung up and walked back to the camper. The campsite was coming to life, and a lot of the people milling about had tired, but happy smiles on their faces. I really needed to figure how powerful Kelly's power extended.\n\nPresent: Alyssa\n\nI had sensed something strange as soon as the husband, James, entered the room, his mind felt different than it had during our previous meetings. The wife, Jodi, had sensed it. I could tell she was on edge. She tried to stay with the program, but his aggression was off the charts. He didn't seem to be the same confident yet loving husband I had counseled.\n\nBy the time Kelly tried to push more of her power, I was ready to stop the interaction. When his eyes turned blood red and looked at us through the mirror, I knew something was wrong. I pushed a suggestion of sleep hard towards the man, harder than what was normally required. I didn't notice Kelly morph. I more felt her rage in response to the threat he posed. The wife was near panic, and I rushed into the room to comfort her once I knew the man was asleep.\n\nIt took Jeremiah a while to join me, carrying some ropes. Our link had dropped when he pulled the plate off the counter and pressed it against Kelly. Now he was back online, I pushed for answers. His emotions told me that Kelly had morphed. We'd seen it before, and it didn't surprise me with what happened. I tried to reach out to her, but Jeremiah reminded me she was holding the plate.\n\n\"Kelly come in here,\" I called audibly, \"I need you to get a robe for Jodi.\"\n\nJodi was clinging to me, \"What the hell was that?\" she asked, \"He's never sounded like that, He never treated me like that?\"\n\n\"We're going to find out,\" I assured her, \"Let's get a robe on you and let you relax in another room.\"\n\nJeremiah had bound James' hands behind his back, and was working on his ankles. James was still asleep, but it was for the best. If James were to wake up, Jeremiah would have a tough time handling the larger man physically. Additionally, given the signs of possession, it was better to have him restrained. \n\nKelly came in with a robe and, by the look on her face, was still shaken up. I took the robe and gave it to Jodi, who slipped it over her shoulders. Kelly was looking back and James lying prone on the floor.\n\n\"Sleeping,\" I said, \"Sit down and take a deep breath, Kel. I'll be right back.\"\n\nKelly nodded, clutching the plate in her hands. I was glad we had that old relic nearby. Was it just a coincidence that I'd asked for it this morning? I guided Jodi to one of the other rooms, and had her lay down. I called down to our receptionist to find someone to care for her.\n\n\"Lexi just came in,\" she said, \"I'll send her right up.\"\n\n\"Room B,\" I replied, \"and have her bring water and some food, this room isn't provisioned.\"\n\nI clicked off, and helped Jodi to lie down on the bed, \"Just relax, Jodi. You're safe here, I have our physical therapist on the way up, she will be here with you as long as you need.\"\n\nLexi appeared at the door and I filled her in with the details. Her eyes widened as I told her what happened, and she nodded and passed me carrying a plate of snacks and a bottled water.\n\n\"Okay, Aly,\" she said, \"I'll take care of Jodi.\"\n\nI went back to the room, and looked at Jeremiah. He'd propped James' sleeping body up against the bed. Kelly had retreated to the wall in front of the mirrored one-way glass. Her hands still clutching and turning the amulet.\n\n\"Give the plate to Jeremiah,\" I said, as I tried to think through a strategy.\n\nI knew, as much as one can, that James had been possessed. How and when were the questions. Was it just random, or had someone targeted us. We didn't go around flaunting our powers, but over the years we'd realized we weren't alone. \n\nThe United Priesthood had been a fairly small gathering of a few special halflings. A few generations back, they bonded together and came up with a story. They co-opted a small sect, and sold their powers as angelic. My research over the years had pretty much refuted almost all of the angelic line stories. The strange stone artifacts that limited our powers was the one thing I couldn't trace back. Everything now days liked to talk about mutants, but it was also clear that our abilities were passed genetically, nor through a mutation. So halfling was a better name for our abilities than mutant. I didn't want to be called a mutant. Half-angel was much sexier.\n\nI had followed other stories, and found there were small collections of similar powered people. The groups usually were spread out, and disorganized. I had found no overarching organization. James' behavior this morning reminded me of when I was reading Deborah's diaries, and we experimented with Kelly's power to paralyze. Both Kelly and Jeremiah had fallen under some kind of possession. I needed to find out what James had been in contact with. \n\nI expected the stones, whose origin I still hadn't traced, would help, The power of the stones to limit supernatural abilities and protect the bearer were still a mystery. They were useful as we struggled with our collective awakenings, and apparently their power still had an effect on Kelly, even though her brown stone was still at our house.\n\nJeremiah took the plate from Kelly, but held onto her hand. The flesh on flesh protection was probably a good idea. I looked at him, then pushed a suggestion to him to press the plate on James' cheek. I also pushed a call for James to wake up.\n\nThe moment the plate touched his flesh, I heard a sizzle. James eyes flew open, red irises looked around idly.\n\n\"Nooo,\" he said in a strange deep tone, \"Don't make me leave... Noooo.\"\n\nThe stones pulsed as James flesh turned an angry red. Then faded and his eyes took on his natural warm brown tone. He blinked and looked at the three of us, then down to the strange plate pressed to his face.\n\n\"What happened?\" James said.\n\nWith the stones fading to normal color, Jeremiah pulled the plate back, and handed it to Kelly.\n\n\"Tell us what you remember?\" Jeremiah asked.\n\n\"Why am I tied up,\" James said beginning to grow more and more alarmed, \"Where am I? Dr. Jackson, why are you here.\"\n\nHe wasn't aware he was at our offices. He was genuinely confused, and the confusion was growing into a panic. I pushed some soothing thoughts to him, and he slowed his struggling. He looked up at Jeremiah, and thought for a moment.\"\n\n\"Last thing I remember was putting the book I was reading down, before turning off the light last night.\" He said shaking his head.\n\n\"So you don't remember coming here this morning?\" Jeremiah asked.\n\n\"Where is here?\" James asked honestly, \"Am I at your office? I remember being nervous about coming this morning. Not worried, just anxious.\"\n\n\"What was the book you were reading?\" I asked, pushing to Jeremiah to untie him, the danger had passed.\n\n\"Some book I got at a used book store,\" he said, leaning forward to let Jeremiah untie his wrists, \"I don't even remember the title. It was a dark romance story with demons and spirits. I didn't really like the story, but I couldn't put it down. Once I read a few pages, I couldn't stop reading it. Really fucked up story.\"\n\n\"Okay,\" I said, \"I'm not sure what happened, I need to talk to your wife again. Do you mind waiting here with Jeremiah? Kelly why don't you come with me.\"\n\nKelly and I left, and I stayed in contact with Jeremiah via our mesh. I took the plate from her, and pushed it into my white lab coat pocket.\n\n\"I want you to be in our mesh,\" I said, and Kelly nodded. I welcomed her mind back and slipped quietly into the room with Jodi and Lexi.\n\n\"Jodi,\" I said sitting on the edge of the bed, \"Tell me about last night and this morning.\"\n\n\"What do you want to know?\" she asked.\n\n\"James was saying he was reading a book last night?\" I prompted.\n\n\"Oh that thing,\" she said, and sighed, \"I was pretty angry that he got caught up in a book, actually. I wanted to talk about what would go on this morning. I was excited about the opportunity to improve our intimacy. He couldn't care less, his nose in that stupid book.\"\n\n\"What about this morning?\" I asked.\n\n\"Well, I don't know how long he stayed up,\" she continued, \"I put on my blindfold and fell asleep around 11. When I woke up this morning, he was awake and staring at me. He was a bit more demanding, as I got ready. He told me how he wanted me to dress. Very direct and forceful. I figured he was just playing one of his silly role play games, and went along with it. Sometimes they can be pretty hot.\"\n\n\"Go on,\" I said, \"tell me how you felt about that.\"\n\n\"Well, I did what he asked me to do, wore what he wanted me to wear,\" she said, \"I was actually liking what he was choosing. I like to dress up sexy for him. But I was still miffed from the lack of communication. If he wanted to play a role, he should have told me what it was first. So it was a confusing morning. He didn't talk much on the way over. He was rude to your receptionist. Totally out of character.\"\n\nI nodded, James was a large man, and enjoyed some of the rougher aspects of coupling. However he was usually very polite and curious. Everything about this morning was off for his usual behavior. I needed to check out that book.\n\nPast: Jeremiah\n\nBy the time I reentered our camper the girls were all awake. Alyssa had pushed our bed back into a couch, and the tables were put up. Jenn was between Kelly and Lexi on the near side, I walked around and slid into the middle of the other table, next to Alyssa on the end. We made small talk for a few moments, until Carmen placed a plate of eggs, bacon and tortillas on each of the tables and slid next to me. \n\nEveryone dug in, silently. It seemed that everyone was hungry, and the large amount of food was soon gone. Then we looked at each other and smiled. \n\n\"I guess we were hungry?\" I said, with a chuckle.\n\n\"Papi, if we keep doing that, I'll need to double our food supply,\" Carmen said with a smile and a kiss to her cheek.\n\nI looked over at Kelly, and smiled, \"We need to talk about your powers,\" I said, \"From the conversations in the lodge, pretty much all the adults had a wonderful evening.\"\n\n\"What?\" she said, not understanding, and I felt Alyssa fill in the gaps, and then she blushed, \"Really? My power did that? I thought it was just with people I was connected to?\"\n\n\"We should probably experiment, carefully,\" Alyssa said, \"You need to know how your power works, and how you can control it. Jeremiah had to experiment once he gained his powers.Truthfully, I need to practice my powers too. It's just safer if we know how to use them..\"\n\n\"Maybe the mall will be a good place to experiment,\" Lexi said with a smile.\n\n\"That sounds almost dangerous,\" I said, ready to dismiss it immediately.\n\n\"Wait,\" Lexi said, looking at me determined, \"It has a large amount of random people. We have ways to control whether we are affected by the power, with Kelly's stone and the plate. You still have the plate Carmen?\"\n\nCarmen nodded, and got up opening up a drawer, and lifting up a tray of silverware, \"I grabbed it before the building caught on fire, I'd dropped it earlier. I kicked it as we ran out, but I put it in here for safekeeping.\"\n\nShe picked it up and we all felt her drop out of our mesh. She let go and rejoined our hive mind, and then looked back at us.\n\n\"It still works,\" she said.\n\n\"Look,\" Lexi continued, \"I know it's a risk, but how else can we test quickly. We can't spend all our vacation without helping Kelly learn about her powers. Also, why did she morph into a demon, can she control that?\"\n\n\"I agree with Lexi,\" Jenn said quietly.\n\n\"I'm a bit scared,\" Kelly said, \"Thinking about last night, it was like my power kept doubling. I couldn't control it, it just kept growing. I know Jeremiah was caught up in it. I don't ever want to think about what happened when I morphed.\"\n\nI nodded, remembering how out of control I'd felt last night, before Alyssa quenched Kelly's aura with the stone. I was also concerned about her morphing. I wasn't there when it happened, but Lexi's story about it was concerning. \n\n\"I think the number of people affected by your power allows you to draw more power yourself,\" I theorized, \"Once you realize how your power increases with more arousal, you might be able to control it better. I don't know what to do about the morphing either. Let's focus on your aura first.\"\n\nAlyssa was deep in thought, and I could feel her puzzle through things, she looked around and told us the plan in her mind.\n\n\"Okay, if Lexi, Jenn and Carmen hold onto the stone pendant,\" She started, \"they'll be unaffected by Kelly's power. They will be the safeties. We're not looking for the mall to erupt into a sex orgy, just observing arousal. Whichever of you has the stone will have to hold it against Kelly's bare skin if her power spirals too high.\"",
        "Carmen nodded, understanding, and Alyssa continued, \"Jeremiah and I will be uncovered, but he can adjust my self-control, and I can monitor him and help him with his control. You four will be in a center location, and Jeremiah and I will walk in opposite directions, scanning the minds and observing.\"\n\n\"Are you okay with that, Kelly?\" I asked, \"We won't do it unless you feel comfortable. There might be many more people at the mall than were around the pool last night.\"\n\nKelly nodded, and smiled, 'Yeah, I think I can do it. Now that I know it's not limited to just us, I better understand what happened last night. It felt like a series of waves, each getting bigger. I must have misinterpreted it as our own desire. Not the arousal of more people around us. It makes more sense to me, knowing that it affected other people.\"\n\nI understood what she meant. When I had awakened and used my powers for the first time, I had no idea how it worked, or what I had done. It took experiments with Alyssa to help me understand the capabilities of my powers.\n\nIt will be good practice for me too,\" Alyssa said, \"A mall will be a challenge, so much noise. I need to be able to filter things out, and that will give me a chance to practice that.\"\n\n\"And I need some new clothes,\" Jenn said with a laugh. \"Can we just go already?\"\n\nWe all laughed, the girls started cleaning the dishes, while I told them about my call to Uncle Thomas. They sounded excited about a lake vacation and the possibility of a boat. Jenn was actually happy not to go right back to Pullman. She slid next to me, and hugged me tight.\n\n\"The more I think about it,\" she said, \"The more I want to put that life behind me. I don't need anything there anymore. My clothes won't fit. I don't know what I want to study in school. Maybe it's possible to just not go back?\"\n\n\"We need to get you disenrolled,\" Alyssa said honestly, \"We need to let your landlord know you won't be coming back. We need to settle your back rent. We need to be adults about this, Jenn.\"\n\nShe nodded, resignedly \"You're right, Alyssa,\" then sighed, \"Sometimes adulting is hard. You're right though, I guess I'm caught up in how wonderful this new life feels. But we can wait to go back? Can't we?\"\n\nAlyssa smiled and leaned to kiss the top of Jenn's head, \"Yes, we can wait. I want to escape with all of our family for a bit too.\"\n\nI walked over to the lodge and talked to the manager. I told him we were going into town, but wanted to have a spot when we returned later. He assured me it shouldn't be a problem, the campground cleared out on Sunday nights. I asked if we could move to a more remote spot.\n\n\"Wouldn't you want to be near the pool?\" he asked, \"I can keep your current spot reserved.\"\n\n\"I'll let you know when we get back from the mall,\" I said, a good soak in the jacuzzi sounded good, but I wasn't sure if I wanted to risk another campground orgy.\n\nI got directions to the mall, and headed back to the camper. I strapped into the passenger seat, and Carmen drove us out of the campground and towards the mall.\n\nPresent: Zac\n\nMonday morning. Who ever invented Monday morning should be shot. My exhaustion might have been influenced by texting after midnight with Beth. We agreed no sleep overs, but sexting wasn't discussed. It wasn't the same as having her with me, but it was good enough. We shared some selfies via a secure app, and sent virtual kisses good night. Technology to the rescue!\n\nI showered and dressed, and as usual was running late as I went through the kitchen heading towards my car. Carmen stepped in front of me with an orange and a bagged lunch.\n\n\"You need to eat, Zac,\" she said, \"You'll need your strength.\" \n\nShe smiled and winked, and I blushed but hugged her and kissed Carmen on the cheek accepting her offerings.\n\n\"Thanks Carmen,\" I said, \"I'm a growing boy.\"\n\n\"Eye-yi-yi,\" she laughed, \"TMI, Zac! Get going, I'm sure Beth is waiting for you.\"\n\nI blushed, not intending the innuendo, which made her laugh harder. I walked out into the spring air, and got into my car and drove to school. Student parking was a mess, so I had a long hike, because I got there just before the bell. I walked swiftly, looking around for Beth.\n\nWe had different first periods, but I wanted to at least see Beth before class. Since I was running late, I didn't have time to stop by my locker. I knew Beth's was right beside mine, so I took a route that would bring me close. I smiled as I saw her looking over the tops of the other students heads at one of the junctions of the hall.\n\nShe smiled when she saw me, and moved towards me. I swerved past another girl and we hugged quickly. Her kiss felt special as she said hello.\n\n\"I'm late,\" I said, \"Some brazen hussy kept me up all night texting me naked pictures.\"\n\nShe giggled, and blushed, \"She should be punished,\" she blurted, and I raised an eyebrow.\n\n\"Really?\" I asked, not really having time for this, nor the tightening of my jeans as she leaned closer.\n\n\"Really,\" she whispered in my ear, \"she sounds like a bad girl.\"\n\nShe licked my earlobe, which didn't make the pants situation any better. Then she was rushing down the hall to make her class. I sprinted down to my class, which was a bit awkward with a semi-rigid erection. I burst into my classroom just before the bell. \n\n\"Safe,\" I said making a hand gesture.\n\n\"Take your seat, Mr. Jackson,\" Ms. Little said with a smirk. \n\nI looked at her, and nodded obediently. I made my way to my seat in the middle of the room. What Ms. Little was wearing didn't help the pants situation. Ms. Little was a younger teacher, only a few years out of college. She had bronze hair, not red like Lexi's but a lovely shade of reddish brown hair that complemented her fair complexion. While her name was Little, her bust was not, which made for frequent locker room jokes. She also wore a sleek pencil skirt that hugged her tight bottom, and accentuated her calves. \n\nI loved Beth, she was the only girl for me, but I am also an eighteen year old boy. I have my share of schoolboy fantasies, and Ms. Little featured prominently in many of them. Adjusting my crotch under my desk, I pulled out the American History book and opened it to the chapter we were studying. By the time I lifted my head back up, I noticed that Ms. Little was staring at me. \n\nThis was a bit different. I looked at her and smiled. She smiled, then blinked, as if caught in a daydream. She looked away, cleared her throat and started her lecture. I shook my head, and forgot about it as I focused on my studies. I noticed that quite a few of the other girls would turn around and look at me during the start of the lecture. Their eyes flicking away when I made eye contact. \n\nI thought, \"Tres weird,\" reminded that Lexi often used that phrase.\n\nThe class settled down as Ms. Little lectured, and my pants situation lessened. The room had seemed a bit warm at the beginning of class, now felt more cool. \"Must have been my sprint to the class,\" I reasoned, \"I did make quite the entrance.\"\n\nI answered a few questions, then felt my phone buzz in my trouser pocket. Looking around to find Ms. Little, I noticed she was on the opposite side of the class, back turned and writing on the board. Her ass caught my eye, as I slipped the phone out and checked the screen. A text image from Beth.\n\nBeth's first class was homeroom, she usually used the free time she had to catch up on homework. Today she used her free time to send me an upskirt shot of her panties. I blushed as I saw she was wearing my favorite color, blue. The pants situation worsened again, and the room's temperature began to rise. \n\nI clicked off the phone, and stuffed it back in my pocket, \"Focus,\" I said to myself,\n\n\"She has pretty panties,\" the girl behind me said, leaning to speak in my ear. Then her breath slowly washed over my flesh.\n\nI blushed and turned around. It was Shannon, one of the more popular girls in the school. Going out with the popular jocks, she usually didn't have two seconds to waste talking to me, let alone blow in my ear. \n\n\"Yeah,\" I said and blushed, \"Thanks.\"\n\n\"Beth's?\" she said with a raised brow.\n\nI nodded, a bit put back to know that Shannon had noticed who I hung out with. I didn't think I was on her radar.\n\n\"Pretty,\" she repeated, \"Mine are pink today, and lacy. She should find a nice lacy pair.\"\n\nI didn't quite know what to say to that confession. I shyly nodded, and turned back to the front of the class. Ms. Little was looking at me, with the same look she had when I came into class. I shifted in my seat, and my fingers straighten out my crotch. The thought of Shannon wearing pink panties, still flashing through my mind.\n\n\"See me after class, Mr. Jackson,\" Ms. Little said, \"and see if you can pay attention for the next 15 minutes.\"\n\n\"Yes, Ma'am,\" I said, her stern reprimand and the embarrassment made the trouser situation disappear.\n\nI heard Shannon chuckle, then lean and whisper to her friend, Brooke, who was sitting beside me. Her friend giggled. They remained quiet, then a slip of paper was tossed on my desk by Brooke. I gave her a cold look, I didn't need to get into any more trouble with Ms. Little.\n\nBrooke smirked at me. She had dark black hair, her pixie cut made her look like an evil elf. She hung out with Shannon's crowd. She knew she was hot, and didn't mind flaunting it. She just nodded at her folded note. I opened it slowly and read it.\n\n\"I'm not wearing any.\" she had written, adding a smiley face under the text.\n\nI did a double-take, and then blushed. She shifted her legs, moving one over the other. Her body twisted towards me. She was wearing a plaid skirt that exposed about a hand's breadth of thigh, at the limit of the school's dress code. She raised her eyebrow at me. \n\nI pulled out my pencil, and scribbled a reply, \"Bullshit. Prove it!\" and tossed it over to her desk.\n\nI stayed put in my desk, trying to find the place in the book. I looked up and watched Ms. Little draw on the board, and copied her list into my notes. Then I heard a pencil drop on the floor between me and Brooke.\n\n\"Shoot,\" said Brooke with a lilt in her voice, \"Dropped my pencil. Can you reach it Zac?\"\n\nThe desks we had were the kind with an arm on one side, that curved to have a small writing place. They were big enough for a book, or a notebook, not both. People were always knocking off pencils and other objects onto the floor. \n\nI slipped to a knee and grabbed the pencil, and turned to hand it to Brooke. She coughed slightly and her hand was on the edge of her desk, her finger pointing down. I followed and saw that she had spread her thighs apart and had scooted on the edge of her desk. He bare pussy was shaved and exposed. A glint of moisture on one of her protruding lips.\n\nI blinked and looked up at her, handing her back her pencil. \n\n\"Like what you see?\" she asked, with a lick of her lips.\n\nPants Situation: Critical!\n\nI felt the room glow and her pupils flared as she drew in a breath.\n\nThen I remembered what my mother said at breakfast Sunday morning. She had some power and she thought I might too. I might have the ability to cause arousal in others. I blinked and didn't know what to do, or say. I nodded and slipped back into my desk.\n\nBrooke let out a small moan and shifted in her seat. I tried to forget what I'd just seen. Did you know when you purposefully try to not think something, you end up thinking about it? Constantly. I closed my eyes, and tried to think of blackness. Didn't help, the blackness formed itself into the outline of Brooke Taylor's pussy lips. \n\nI felt Shannon's fingers slide along my spine, and then to my shoulder. She leaned closer and whispered, \"New cologne, Zac? You smell good.\"\n\n\"Ummm, no,\" I said, trying to think of anything but Shannon's pink panties.\n\nThe bell rang, and I breathed a sigh of relief. I thought of dry sand, ice, a deck of cards, pickles, flowers.. Dammit, those last two didn't help. I closed my eyes and waited until I heard their desks move signaling they were going to their next class. Then opened my eyes.\n\nMs. Little's little black dress was right in front of me, and I looked up my eyes tracing her lovely curves. I might have stayed a bit too long around her breast area, which didn't help. She crossed her arms over her breasts a bit too late, I'd seen that her nipples were hard. That made the pants situation go towards the red. I looked up in her eyes, a pale shade of blue, that made her look amazing with her dark auburn hair. \n\n\"I.. I'm sorry, Ms Little,\" I managed, \"I didn't mean to disrupt your class.\"\n\n\"I appreciate the apology, Zac\" she smiled, \"I know you know better. Shannon is a tease, you should ignore her.\"\n\nI nodded, now that it was just her and I, I felt like I had more control. I looked up at her, her smile was pleasant, but not inviting. \n\n\"The AP Exam is right around the corner,\" she said, \"You need to be paying attention to the lectures. I know the material is obscure, but reading before class helps. Did you read this weekend?\"\n\nI blushed, remembering what had happened this weekend, \"No, I had a pretty hectic weekend, actually. I'm sorry, I'll be more prepared tomorrow.\"\n\n\"Okay, Zac,\" she said, \"Be sure to ask me if you have any questions. You'd better head to your next class.\"\n\nShe was standing so close to my desk, that it was hard to stand up without brushing against her. She stood her ground, and I stood up, I was about six inches taller than her. I wanted to go out through the front of the class. She stood up and just lifted her head, her hands crossed over her chest, and inhaled.\n\n\"Did she just sniff me?\" I thought to myself and turned around, and headed out the back of the class. \n\nI headed towards my locker, and Beth was waiting for me. I wrapped her up in a hug and kissed her. She pressed her body against mine, and all I wanted to do was find the closest maintenance closet. I found some semblance of self-control, and pushed back from the kiss.\n\n\"Oh, Zac,\" she asked, \"You don't look well... you smell awesome though, new cologne?\"\n\n\"I think I need to see the nurse,\" I said, \"Or call my mom,\" I thought to myself. \n\n\"Okay,\" Beth smiled, \"Text me when you find out what's up. Did you want to go to lunch?\"\n\n\"Yeah,\" I said, \"I do, very much,\" I smiled, \"I'll text you between next class.\"\n\nI wondered if I could push a thought, like Alyssa could, to back off on the upskirt texts. Her eyes widened a bit, then looked at me with a regretful look.\n\n\"Sorry about that,... picture,\" she said, \"I was just thinking of you and this wonderful weekend.\"\n\n\"It's okay,\" I said, a bit surprised that it worked, \"I just don't think we should do that in school, we could catch hell.\"\n\n\"You're right,\" she smiled, \"I gotta run to class, good luck with the nurse.\"\n\nI headed towards the nurse's office, and hoped she didn't realize her double entendre.\n\nPast: Jeremiah\n\nThe mall was a huge set of buildings with department stores on four corners, ringed by large expansive parking lots. The mall traffic was light on Sunday morning, when we pulled in, probably most people were sleeping in, or at church. Carmen parked near the edge of the parking lot, sliding through two spaces. Even then the nose and the tail protruded slightly into the lanes between spots. \n\nThe girls had all dressed casually, Kelly and Jenn were wearing sundresses. Lexi had on hiking shorts and a tight tee-shirt. Carmen wore form fitting jeans and a white top. I chose shorts and a baseball t-shirt, while Alyssa was in her normal faded jeans, but a tight t-shirt instead of her normal oversized sweatshirt.\n\n\"You look good,\" I said to her, \"Feeling more confident in your body?\"\n\n\"I am,\" she said, \"I liked the attention I got from other campers when I left the pool in that scandalous bikini. Besides, your work should be displayed and appreciated.\"\n\nI chuckled, and looked at the five sexy women file out of the camper and walk towards the nearest department store. When we got inside, Kelly and Jenn peeled off to head towards the women's section, the high end department store was just what they needed. Alyssa reminded them to meet at the food court at noon. Carmen and Lexi headed towards the sporting goods store, and Alyssa and I held hands and walked along the upper deck of the mall.\n\n\"Which first?\" I asked, \"Electronics or books?\"\n\n\"Let's just walk around for a bit,\" Alyssa said, looking at me with mischief in her eyes.\n\nI thought I might be in for some trouble, but Alyssa just enjoyed having me to herself for awhile. We had been close friends for so long, the addition of more people into our daily lives had an interesting effect. We knew each other better than we knew any of the rest. In a way we'd become more casual in our interactions. Taking one another for granted. I enjoyed just walking with her, and people watching. The mall was quiet when we arrived, it seemed that we had the place to ourselves. As time passed the crowds slowly grew, as more and more people entered to shop. \n\nAlyssa finally dragged me into the bookstore, to get away from the stream of people in the corridors. She pulled me back towards the more quiet sections, then backed against the stack of books, pulling me closer. I kissed her softly, and she returned the kiss.\n\n\"I miss...\" she said blinking up at me, \"just us, sometimes.\"\n\nI nodded, \"Yeah, I know what you mean.\"\n\n\"Maybe at the lake we can find a day, just you and me?\" she asked with a hopeful look. \n\n\"I think I need that,\" I said, \"I need to be fair though, don't I?\"\n\nShe chuckled, \"Yeah, you probably do, and I love that you think that way. But Jeremiah,\" she said and paused, \"You can do anything you like, and we'd be happy with it. You hesitate to take such control of us, I know. That's why, sometimes, I want you all to myself. I'm horribly selfish.\"\n\nShe smiled and kissed me again, her hands lifting around my neck. We kissed and enjoyed being close. Neither of us wanted to push beyond making out, but my cock disagreed, thickening in my shorts.\n\n\"I love that I do that to you,\" Alyssa said groping me, then she disengaged, and started walking down the aisle. \n\nShe paused at the end, looking back towards the checkout counter, where customers were waiting in line. Other customers milled about the aisles of books. I followed behind, the empty section we were in allowed me to fondle her ass while I looked over her shoulder.\n\n\"Just look at the people,\" she said, the pointed \"Do you see that tiny asian girl?\" she asked.\n\n\"Oh, yeah,\" I said then suddenly my hand wasn't fondling her ass, but at her lower back. I looked down and the asian girl was looking up at me with a smile. I shook my head and smiled.\n\n\"You are being a bit reckless,\" I said.\n\n\"I know,\" she said in a totally different voice, her tiny hand lifting to fondle my suddenly firmer erection, \"Oh, I can tell you like the look?\"\n\nI looked around to make sure we were alone. The asian girl was probably 19 or 20, and was confident in her body, a tight tube top and a small mini skirt. My hand ran down under Alyssa's ass and lifted up the tiny mini-skirt. Her bare bottom was warm. She looked up at me and spread her firm brown thighs.\n\n\"Apparently, I dislike panties,\" she murmured as my finger traced bare pussy lips, and pushed forward to brush through a full bush of hair.\n\n\"Kinda sexy really,\" I said spreading her arousal as she softly moaned. \n\nShe pushed back my hand, then flipped back to Alyssa form, elbowing me in the gut playfully, \"You should watch your hands, mister!\"\n\nI lifted a damp fingertip to my lips, and tasted it. It didn't taste like Alyssa at all, a bit more exotic and a hint of perfume. I offered the other finger to Alyssa who eyed it then stuck out her tongue to lick it and then sucked on the tip.\n\n\"Interesting,\" she said, \"I didn't expect that. Tastes good, no?\"",
        "I nodded and looked back towards the front, the asian girl was walking out, her hips shifting as she walked in high heels. Even then she was barely over five feet, her skirt dancing dangerously above mid-thigh. Alyssa followed my eye, then scanned the faces of other people standing in line.\n\nSuddenly a taller woman was standing beside me. Older, maybe in her thirties, and a few inches taller than me. Her blouse was buttoned high, but her ample bust stretched the fabric to its max . Her blonde hair needed a root job, and her breath smelled of stale cigarettes. She looked down slightly at me. She had on a knee-length skirt, and chewed on a stick on mint gum trying to mask her last smoke. \n\n\"Trying too hard?\" I asked, this was clearly not my type.\n\n\"Just wanted to check something,\" she said and reached under her skirt, then her eyes widened, \"Totally not expected.\"\n\nI looked closer as Alyssa's hand was busy underneath, the older lady had a lot of makeup on, and then I saw she had an adam's apple. I took a step back, as she crouched a bit and then pulled her hand back out.\"\n\n\"Tucking is a bit uncomfortable,\" Alyssa said, then flashed back into herself.\n\n\"Yeah,\" I said, \"Um.. interesting.\" \n\n\"I think just a cross-dresser,\" she said, \"I got no homosexual vibe from his thoughts. But he was thrilled to be in the mall and undercover.\"\n\n\"Well that's a relief,\" I said, \"He did a good job, I had to look closely to tell.\"\n\nAlyssa smiled, and lifted on her toes to kiss me, \"Don't worry, your heterosexuality remains intact.\"\n\nShe turned back, and in an instant I was sharing an aisle with a trim african american, not dark black, but a nice dark brown. She was dressed semi-conservatively, but her ass was nice and round. Larger than Alyssa's thinner backside. She looked over her shoulder at me, her hair a mix of colors in small tight braids, then tied together into a thick ponytail. She pushed her bottom back into me and ground into my crotch.\n\n\"You like big butts, baby,\" she said, in a slightly southern accent, as she smiled at me over her shoulder.\n\n\"I cannot lie,\" I said and gripped her hips and pulled her back against me. \n\nI drew one of my hands up her abdomen to cup a large breast. She was, I think the word is, thick. Muscular, and firm, curves galore. She groaned as I gripped, and squeezed her breast, pinching at the nipple.\n\n\"Ohh, she likes this,\" she said, feeling the arousal it produced, \"Oooh, fuck.\"\n\nShe flashed back into Alyssa form and my arm was suddenly hanging in space. I blinked at her and then blushed.\n\n\"You liked that a bit too much,\" she smiled, \"I have to say, so did I. But we need to focus.\"\n\n\"Do you have to see them to morph?\" I asked curiously.\n\nShe thought for a moment, then looked up at me and flashed. I was suddenly looking at Rebekah, who smiled back at me. I examined her closely, I couldn't find a flaw.\n\n\"I guess I can do it from memory,\" Rebekah's voice said, \"But I can't just create something from my imagination.\"\n\n\"Oh,\" I asked, \"have you tried?\"\n\nAlyssa flashed and smiled up at me, \"Yes,\" she said, \"My attempt at being a mermaid in the pool totally didn't work at all.\"\n\n\"Well,\" I said, \"Keeping in mind that I love each and every one of you, just the way you are. You might want to remember the last one, and the little asian tart.\"\n\n\"Yes, Master,\" she laughed and took my hand walking back to the front.\n\n\"Um,\" I said, trying to walk naturally in overtight jeans, \"A little warning first,\"\n\n\"Serves you right,\" she chuckled, \"Pervert.\"\n\nI checked my watch, \"Better head to the food court,\" I said, \"The others should be there shortly. We should get a table near the center.\"\n\n\"Okay, Captain Obvious,\" she said as she directed me to the food court. \n\nShe waved at Carmen, who had already staked a claim to a six-topper table in the middle of the circular area. Alyssa looked back and me and shook her head.\n\n\"You do realize that you can listen to our mesh?\" she teased, \"Or was your brain lacking blood from feeling that girl's big butt?\"\n\nI laughed at myself, what she said was too true. Once again my lovers were a step ahead of me, and taking care of me all at the same time. I thought we should probably eat first, so we weren't hungry. As I was sitting at the table, Lexi came up and plopped a bucket of fried chicken and all the compliments in the middle of the table. I should have known they had everything planned.\n\nWe ate as we waited for Kelly and Jenn to join us.\n\nPresent: Kelly\n\nThe whole morning freaked me out. The feeling of morphing felt entirely natural, like it was a part of me. I never liked it when it happened, the rage felt dark and I'd ached with a hunger that was hard to explain. Thankfully, Jeremiah was alert and the plate of stone were near. I had morphed a few times over the years, and it always put me on edge. The stimulus was always something beyond explanation. Either a frantic manifestation of my powers in a time of stress, like when I killed Samuel, or in response to a something more ethereal, like when Jeremiah and I were possessed experimenting with Lexi. \n\nI had listened to the stories of both James and Jodi, and understood why Alyssa would be interested in the book. Through the years she seemed to fall back into trying to understand who we were. Today's experience would trigger another season of her trying to find an empirical reason for who we were. I had just accepted our powers as part of who we were, I didn't need to know why. \n\nSuddenly, I felt a thought, distant, unformed, somewhat in a panic. Zac? What could be wrong with him. I pushed a thought to Alyssa as I went to open the door to the control room. She nodded and pushed that she understood, she and Jeremiah would handle it from here. \n\nI picked up my cell phone, and the text of Zac froze my blood.\n\nZ: Mom - help... I need help.\n\nI frantically texted back:\n\nKel: What is it?\n\nI waited impatiently, while the text was sent, the status changing from, \"Delivered,\" to \"Read,\" to \"Z is typing\". What was he writing, a book? Did he fall in gym? Did he get attacked by something like I was? So many thoughts raced through my mind.\n\nZ: Your power, I can't turn it off. The girls in class and even a teacher seemed to be drawn to me. I don't want to cause a scene, and I don't want Beth to think I'm a pervert. I can't seem to shut it down. Even the nurse is looking at me weird.\n\nKel: I'll call the school, to get you excused, and go directly home. No stops along the way.\n\nI flipped to the dialer and hit the entry for the front desk. The secretary answered and I explained that Zac had come down with some symptoms, and I thought it best he come home from school. I heard her acknowledge that, and said she would sign him out when he got there. I hung up and flipped back to my messages. \n\nKel: Your clear, go home.\n\nZ: K Mom. Tks.\n\nI stood helpless for a moment, my thoughts swimming through the different scenarios. Jeremiah came back in from the room where James was now sitting on the bed, holding his head. Alyssa joined us from the other room, and I saw Lexi leading Jodi out the door. A few seconds later, Jodi appeared at the other room, and James stood and walked to her. She fell into his arms and he comforted her with a hug.\n\nI watched that all, very little of it registered in my consciousness. I was caught up in trying to figure out what to tell Zac. Jeremiah hugged me, and Alyssa leaned into my back. We stood like that for a while as our thoughts mingled, coming to a plan.\n\n\"Lexi and I will follow James and Jodi home,\" Alyssa said, \"I'll keep the plate with me, but only to ward of any spirits there. I'll find the book, and hopefully any others that might have been influencing James.\"\n\n\"I'll take you home,\" Jeremiah said, his hand at my back, \"We'll both talk with Zac. You have your stone at home, right?\"\n\n\"Yes,\" I said, \"I wore it for the party, I didn't want to get tired and lose focus. I think it's on my dresser.\"\n\nHe nodded and I followed him quietly, my mind still spinning in thoughts. Alyssa spoke to the receptionist and cancelled the rest of our appointments for the day. An inconvenience for our clients, but it couldn't be helped. \n\nOnce in the car, I tried to formulate how to talk to my son. What did I do to control my aura? I remember first feeling it bloom right after the first time I had sex with Jeremiah. When Lexi caught us in our dorm room. It was small, but in my state of amoral pleasure seeking, it just amplified everything. Then later with Jenn it got out of control, I felt unstable, and couldn't control it. How Carmen managed to resist was a mystery. She had incredible self-control when she needed it.\n\nOnce my mother revealed the stone, and it's power to keep me from projecting my aura, and being influenced by others, I could tell more clearly when I activated my power. Jeremiah had to adjust me a few times, so I could use my self-control better. Through some practice I was able to manage how it projected. But at first, it was a wild ever expanding sphere of sexual heat. \n\nI shook my head, imagining what might have happened if Zac hadn't realized what was going on and decided to go with what felt natural. He could have ruined his senior year, I was sure an in class orgy was a charge worthy of expulsion. He could have ruined the career of his teacher, seems the news was full of teachers both male and female having sex with students under their care. I was thankful that our son was able to understand, and then manage the effect.\n\nWe were pulling into the drive when I let my thoughts fix into the present. Jeremiah leaned over and took my hand, kissing my cheek. \n\n\"Everything will be okay,\" he said, \"you raised a good boy, he did the right thing asking for help.\"\n\nWe came through the front door, and Carmen was waiting for us, \"Zac's in his room,\" was all she said to me.\n\nThen she grabbed Jeremiah and kissed him deeply, \"When you're done, please come up,\" she whimpered.\n\nCarmen turned raced up the stairs towards our rooms, and I followed her. Jeremiah went through the kitchen towards Zac's room. I followed Carmen to her room, she looked back at me with wide eyes.\n\n\"I'm sorry, Kel,\" she said stripping her clothes off in her boudoir, \"I tried to hold it together, the others are ...\" she drifted off, lying on her back, one hand gripping her breast, and the other curving between her thighs. I wanted to kneel there, I could feel the pulsing aura of lust. I shook my head and pushed myself to my room. I scrambled through my door and knelt at my dressing table. My hand reaching under my skirt.\n\n\"Just a touch, to take the edge off,\" I thought to myself as my fingers made contact with my suddenly molten core,\" Oh fuck.. yess...\"\n\nI managed to blink, my free hand dancing on the desktop, searching... working over the surface.\n\nThen clarity.\n\nI blinked my eyes, and clutched the chain, Taking a deep breath I stood on shaking knees, and held onto the stone. My thoughts returned from the haze of lust that was washing through me, and I remembered what I needed to do. I hurried down the stairs, past the kitchen. I stepped over our maid, and Leah, who were entwined on the floor, their heads nestled between each others thighs, moaning and writhing.\n\n\"Holy fuck,\" I said, trying to keep my own wits.\n\nEven under the protection of the stone, my own libido was always a bit heated. Leah's breasts were a lovely shade of pink, her nipples firm as Maria's hips lifted and ground into Leah's face.\n\n\"Focus!\" I commanded myself, and worked past the couple and into the hallway. Jeremiah was looking past me, watching the pair behind me, halfheartedly knocking on the door, trying to get Zac to open up. his hand was stroking his cock through his trousers, and it's shape made my core drip. I rushed to him and pressed the necklace to his flesh. He blinked and then focused on me. I leaned up to kiss him, to take the edge off.\n\nIt helped, kind of, my mind was a mess of parental responsibility and deep lustful hunger. Thinking back to Carmen, and the pair in the kitchen. I was split in desire, but my motherly instinct won out. I needed to care for my son. Help him cool down, I clung to Jeremiah's hand and knocked on the door.\n\n\"Zac,\" I said firmly and confidently, \"Open up.\"\n\nI felt it more than heard it. He went over the top, and I felt the wave wash over me the stone protecting me and Jeremiah. The cries of passionate lust from the pair in the kitchen betrayed what had happened. I didn't feel embarrassed that my son had just had an orgasm. More a relief, it was easier on the other side of the peak.\n\nIn a moment his hand scraped against the door, then it opened. Jeremiah and I slipped in and closed it behind us. Zac retreated to his bed, holding a pillow over his crotch. Jeremiah and I approached him, parental concern on our faces. He shouldn't be ashamed, this was a natural part of him. He just needed to learn how to control it. I could tell his nerves were frayed. Jeremiah touched his shoulder and through him the stone's power pulsed in my hand.\n\n\"Oh, that's better,\" Zac whispered, the fevered lust evaporated, and I could hear breathless whispers from the direction of the kitchen.\n\n\"Zac,\" I said, with a voice full of concern, \"I know how hard it is to focus when your power is awakening.\"\n\nHe nodded, his eyes still unfocused, but clarity was returning.\n\nI put the stone in his hand, and he looked at it, feeling the cool pulse as it sucked in his power.\n\n\"This is a stone, it can counter our power,\" I said, \"I know it sounds hokey, but for now just wear it. We'll make it look better for you, maybe a bracelet. I used it when I was younger to help me keep from getting out of control.\"\n\nHe nodded, and smiled at me, then sagged. His whole body seemed to relax, \"I think I need to rest,\" He said and shifted to lie on his side.\n\nI pushed the pendant over his head, then pulled up the covers, tucking him in. \n\n\"We'll talk in a few hours,\" Jeremiah said, and I could feel his mind reach out to Zac's and adjust some minor things, helping his self-control, \"For now just rest, son.\"\n\nZac nodded, and his eyes closed, finally able to relax.\n\nJeremiah and I backed out of the room. I had to focus hard, as the latent lust from the pair in the kitchen was washing over me like a wave. I gritted my teeth, and Jeremiah guided me into the kitchen. He looked at me, then at the two on the floor, half-dressed and still glowing from their shared bliss. Without the stone, I was weaker, the lust in the room making my power pulse. It was like it had a mind of it's own. \n\n\"These two, and Carmen,\" I said, breathlessly, \"I think that's all.\"\n\nJeremiah bit his lip, I could feel his mind fight against the arousal he was feeling. Then, understanding I couldn't help myself, he nodded to the pair, \"Come with us.\"\n\nThey looked shocked. Then with a pulse of my power, and a tweak from Jeremiah, they rose up and followed us. We went upstairs and entered Carmen's room. She was in the throes of her own lust, even after Zac's power deflated. She looked up wildly as the four of us entered. Jeremiah closed the door. I pulled Leah close to me kissing her. Maria stepped towards Carmen, stepping out of her dress. Carmen welcomed her helper, guiding her head between Carmen's firm thighs.\n\n\"Just once,\" Jeremiah swore to himself as I let Leah undress me, and suckle at my breasts.\n\nI let my aura bloom, my need palpable as my fingers combed through our young caretaker's brown mane. Her lips felt wonderful on my erect nipples. I watched hungrily as Jeremiah locked the door, then stripped naked. His well muscled flesh rippling as he walked behind Leah. He pulled her dress the rest of the way off. She stepped out of the puddle of fabric, then groaned and his hands cupped her heavy breasts.\n\nCarmen was watching us, her fingers gripping behind the black hair of Maria who was fingering herself as she lapped at Carmen's flowing cunt. She grunted as she ground her mound into the maid's face. Her fingers pulling at a firm nipple.\n\nLeah groaned as she felt Jeremiah's firm erection press into her bottom. Her mouth opening to moan into the flesh of my breast. She reached around my hips and gripped my ass to support herself as she pressed her bottom towards Jeremiah. He lifted his eyes to me, and with a natural movement he raised his hip, and his cock slipped deep inside Leah. I felt her trip into an orgasm as her cunt was filled with his cock. I groaned and stepped back, falling into an overstuffed chair. \n\nLeah moved with me, as I lifted a knee over the arm of the chair. My hand combing and gripping a handful of her wild brown locks, and then shifting my ass to the edge as her mouth lowered into my leaking gash. Jeremiah was on his knees behind her and thrust back into her. Her head bucking back and staring at me as her mouth opened in a lustful moan.\n\nI gripped her head and pulled her back to my needful snatch. I watched as my husband stared at me while he fucked the nanny hard. Bending over her and clutching her pendulous breasts, cupping them and kneading them, pounding into her with repeated thrusts.\n\nLeah was tripping through repeated waves of orgasms. The taste of my pussy juice must have tasted like ambrosia, her nose filling with my pheromones and heating her flesh a dusky pink. Her moans and groans vibrating my tender lips as she came in crashing waves. Jeremiah felt her crest then crumbled to the ground, spent. \n\nJeremiah stood up, and looked over at Carmen eyes full of unabated lust. Carmen was watching him as Maria lapped between her thighs. Licking her lips as she eyed Jeremiah's rigid pulsing erection, she scrambled twisting from Maria's mouth. The slapped the maid's ass, and Maria looked at her shocked and hungered.\n\n\"Up on the bed, puta,\" Carmen commanded, \"My turn.\"\n\nMaria scrambled on to the bed, as Jeremiah stood behind Carmen. Carmen gripped Maria's ankles and pushed them back then sunk her mouth into our hispanic maid's dark rosy cunt, glistening with her pent up need. Carmen bent over at the waist, her ass rotating coaxing Jeremiah to come closer. He gripped her hips and with a single thrust impaled her on his rock hard shaft. He grunted as he felt her grind back into him. His hunger was palpable, and my fingers drove into my heated cunt as I watched him take Carmen.\n\nI slipped out of my chair, and stepped over Leah, walking around the end of the bed. I crawled up, and gripped Maria's hair, pulling her flat on her back. She looked back at me and licked her lips. Carmen lifted her head up feeling the bed move, and watched me as I straddled Maria's face. I lowered my overheated cunt onto the maid's hungry mouth and ground down. Jeremiah grunted as he watched my angelic face. My lustful grin turned him on and his hard thrusts pounded into Carmen's bottom, her body shifting closer as she lapped Maria's spasming cunt. \n\nI felt the tremors of their hard fucking transmitted through Maria's tongue and gripped my breasts, pulling at my stiff nipples. All other thoughts had fled as I let my power envelop us. Jeremiah gripped Carmen's ass and was hauling her back to meet his heavy thrusts.\n\nCarmen tossed her head, looking back him wildly, \"Fuck me, fuck your bitch, fucking make me cum, Master.. please!!\"\n\nHe redoubled his efforts and Carmen tripped off. Her mouth sucked hard on Maria's clit and the maid trembled and shook. Then it was just me and my husband. Still standing, Jeremiah practically vibrated with unspent lust. He climbed onto the bed, and gripped the back of my head. Carmen pulled Maria down, cuddling with her on the floor, and Jeremiah tossed me on my back.\n\nI thrilled at his control, how he needed me in the moment. The only creature on the planet that could sate his passion. His cock pulsed as it filled me. I wrapped my ankles around his back, locking him into my core. His body lifting and pounding, my body along for the ride. I met his thrusts and dropped back, hungry to be filled again. His mouth glued to mine as we breathed each other's air. Our bodies writhed, in a heated wave of lust and pleasure. Time had no meaning.",
        "Then we crested, our common lust and passion met and exploded. He stiffened arching into me, and my back curved, grinding my spasming cunt into his pulsing jetting phallus. He bred me, filling my womb, his body trapped in the clutches of my pulsing cock. I exploded, my flesh trembling, my arms and legs pulling him into me. He rested his head between my breasts, spent. \n\nWe lay like that for a timeless moment.\n\nThen a knock on the door, \"Wow, guys,\" said Alyssa, \"Lexi felt it in the driveway, it was a good thing we had the plate with us. Meet us in the kitchen when you're rested.\"\n\nPast: Jeremiah\n\nAfter we ate, we discussed the plan. Kelly looked a bit nervous, but Carmen, Jenn and Lexi assured her that they would be right there to shut her down if it got out of control. I reminded each of them they needed to be holding hands, Lexi would hold the stone.\n\nI stood up and looked around, the food court was about the size of a basketball court. It was circular, and then four halls from the sides of the mall extended towards the large department stores at the corners. It was around noon so the food court was filled with people, varying in age from young to old, couples and singles. Some parents were with children.\n\n\"What about the kids,\" I asked, \"That might be a problem.\"\n\n\"I'll monitor them closely,\" Alyssa said, \"First sign of influence, I'll signal Lexi.\"\n\nOur sign to Lexi was a raised fist. Lexi would watch Alyssa, and Carmen would watch me. Jenn would observe the people in the immediate vicinity and squeeze Lexi's hand if she thought it needed to be shut down. I spent a moment with each of the girls, adjusting their self-control, especially Alyssa as she would be uncovered by the stone. Alyssa fixed her mind on mine and coached me to muster as much control as I could.\n\nFinally I nodded, and stepped backwards, watching as Alyssa turned and walked opposite of me. Kelly looked at me and with a nod, her body shimmered. I could feel the wave pass through me, and it took my breath away. She was so beautiful, I needed to be nearer to her.\n\n\"FOCUS!\" Alyssa's mind sent.\n\nGritting my teeth, I turned away from Kelly and watched the people in the mall. Couples leaned into each other, wanting to feel more of their partners. Some of the women nearest to me opened their mouth with a soft moan of arousal. The single people looked around then focused on Kelly, who I knew was standing and glowing like an angel. I hurried down the aisle, as everyone in the near vicinity was captured by her initial bloom. \n\nNear entrances to the hallway, the effect was the same. One couple was leaned against the wall, the man kissing his girlfriend passionately, her leg lifting and wrapping around his thigh.\n\n\"Focus!\" Alyssa sent, a bit half heartedly.\n\nI turned around to sweep the room, and saw Alyssa was at the edge of the food court, her hand gripping a nearby chair. I could feel her mind scanning, but everything she was reading was overcome by feelings of lust and arousal. I blinked checking the inner circle of the food court, the children seemed to be unaffected, but their parents were kissing passionately.\n\nI looked at Jenn and she was watching the couples and I could tell her mind was becoming overcome by the scenes of passion that surrounded her. I looked at Carmen and she was also barely holding it together, even as she clung to Jenn's hand to keep from being under the direct influence of Kelly's aura.\n\nI turned and took a few more steps, into the hallway, looking through the glass doors into other shops lining the hall. The first shop had a cashier on the top of the counter, the man purchasing an item was kissing her as she spread her legs apart and drew him closer. \n\n\"Focus,\" Alyssa weakly sent, and I knew she didn't mean it.\n\nI lifted my fist into the air, and tried to focus my mind. My cock was becoming uncomfortably hard, and I fought the urge to turn and run towards the shimmering angel in the food court. I bit my lip, as the woman on the counter tossed her head, the man's face sucking on a bare breast. I shook my hand, wondering if Lexi had succumbed.\n\nThen blankness, and it felt like a vacuum as the lust was sucked back into the stone. The crowd fell limp, then blinked and shook their heads. I turned around and Kelly had slipped into her seat. Lexi was holding the stone to her shoulder. Her body was writhing, like trying to get away from the cold stone, but Lexi held firm, until Kelly quieted then slumped in her seat. \n\nI looked inside the store, the girl was blushing, buttoning her shirt, and the man had backed away apologeticc. She shook her head, trying to comfort him, not shame him. She had drawn him in, and her thoughts were a muddled mix of why she felt so aroused. The food court returned to normalcy, which was strange. No one really wanted to dwell on their uncontrollable feelings. \n\nThe couple that were making out against the building, were holding hands. They looked around, then hurriedly walked away towards the outside parking lots. Their minds showed their sparks of arousal had become palpable, and they decided to go home to their bed. There was no aftermath, or any people screaming. They all seemed to recover quickly. I walked back to the center, and met Alyssa when she returned.\n\n\"Okay,\" Alyssa said, \"I thought I could control it, I wanted to be stronger,\" \n\n\"Her power went beyond the food court,\" I said, \"I was only able to see into the first round of stores, but the effect was palpable there. How about on your side?\"\n\n\"I only made it to the edge of the food court,\" Alyssa said, \"The effect is null on anyone that is a child. Atter that it was all encompassing for anyone over 18, I didn't see anyone that could control themselves. The impulse to pair up, regardless of gender was universal.\"\n\nJenn was breathless, \"You didn't have to stand next to her,\" she panted, then looked at me heatedly, \"I'm in bad shape, Jeremiah...\"\n\n\"The stone didn't help?\" I asked.\n\n\"The stone did it's job,\" Carmen said, \"But being near everyone that was billowing out feelings of lust. It was like being on a dance floor. The excitement everyone was feeling was palpable, like the bass from a speaker at a rock concert. Without the stone, we'd never had lasted.\"\n\nI looked at Lexi, and she nodded, \"They're right, I was holding the stone, but it took Carmen to shout at me before I felt Jenn squeezing my hand. Sorry that I didn't stop it sooner.\"\n\n\"Looks like no one is under any ill effects. A bit horny, but not dangerously so,\" I stated.\n\n\"I need to go home,\" Kelly panted, and looked at me hungrily, \"I can't stay inside here, even holding the stone. The power amplified with each person, it was like a tidal wave, I couldn't control it. I felt wonderful and terrified. I tried to pull away from Lexi, I craved the feeling. Can we go to the camper? Please. I don't think I can control myself here much longer.\"\n\nOur shopping done, we took our bags and retreated to the camper. All of our libidos were on edge. We closed the camper doors and pulled the curtains. Kelly wore the stone, but we were at each other for a good thirty minutes. \n\nJenn was wild in need, and I took her first. Hard, over the back of the passenger seat, until she squirted onto my thighs. Then Lexi was on her knees licking me, sucking Jenn's juices off my cock. Carmen and Alyssa were melded together, while Kelly was shoving two fingers into her cunt watching them. Jenn slipped past me and dove between Kelly's legs filling her mouth with the nectar of the gods.\n\nI lifted Lexi up, and she wrapped her legs around my hips. She rotated her hips and I grabbed my cock and pushed it into her, she sank onto my shaft. I bent over and laid her on the sofa, her head against Kelly's side. I roared as I couldn't fill her tight cunt fast enough. She rotated and sucked on Kelly's nipple.\n\nI blasted into Lexi's cunt, then pulled out, looking around. Alyssa met my eye as Carmen fell away shaking in orgasm. She flashed, and I was facing the nubian beauty from the bookstore. She turned and shook her round full ass at me, and I strode behind her, and pulled her mane of braided hair. I slammed in deep, my cock already stiff, and rode her hard. The black flesh of her ass was like ebony, firm and supple. I pulled her cheeks apart and moaned at her dark almost black anus, her ebony cunt lips gripping my shaft as I fucked her harder and harder. \n\nAlyssa's moas were foreign, her voice that of the stacked and thick black woman. She coaxed me to fuck her harder, to take her. \n\n\"I need it,\" she cried looking back at me with her chocolate irises, \"Give me it, fill my cunt with your white seed.\"\n\nI grunted and shot jets of cum into her cunt, and then Alyssa panted as her black flesh shimmered, then returned to her normal form. I slumped forward into her, as she rolled into a ball. I curled my body around her, the room quieting into a soft mews of contentment. \n\nWe rested for another thirty minutes before dressing and returning to the RV campsite. We were exhausted as we drove back into the same parking spot as the night before. I felt sore and on edge. The girls looked ragged, and Kelly was looking more tired and hopeless than I'd ever seen her.\n\n\"We will get a handle on your power,\" Alyssa said, as she turned to Kelly and hugged her tight, \"We'll figure it out.\"\n\n*****\n\nAuthor's Note:\n\nEditing props go out to mgenette again, who corrals the run-ons and puts the kibosh on poor grammar. His help and encouragement have been invaluable. Any remaining errors are totally my fault.\n\nWill the family ever have a vacation? What was in the book? Can Zac master his powers? Keep your eye out for more chapters..\n\nI hope you enjoyed this chapter, thanks for reading, voting and commenting!"
    ],
    "authorname": "HankDolworth",
    "tags": [
        "succubus",
        "incubus",
        "ffffm",
        "supernatural",
        "shape shifting",
        "male dominance",
        "female submission",
        "demon possession",
        "mind control"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/the-designer-pt-02-ch-19"
}
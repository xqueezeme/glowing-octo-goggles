{
    "title": "She Dreams of Cum Ch. 02",
    "pages": [
        "Thanks for all the feedback! This is the conclusion to She Dreams of Cum Ch. 01. Please read that part first if you haven't!\n\n********************\n\nI woke up again still inside my dream. It felt like no time had passed, but things were different. Everything was dark, and I couldn't open my eyes when I tried to blink. They were stuck shut. I reached up and tried to feel them, but found that my face had been completely covered in a thickening layer of gooey cum. I had no idea how long I'd been laying there on the bed, but it must have been many hours, maybe days. The steady spray of cum shots had never stopped, and my face was covered with a thick mask of warm jizz. \n\nI also realized that I was only breathing through my nose because my mouth, again held open by the spreader, was completely overflowing with hot, gooey semen. It was so full that when I shifted my head down slightly I felt a wave of the sticky cream flood over my bottom lip and stream down my chin and neck.\n\nMy hands moved from my face, down my body, finding nothing but semen-soaked skin. I could feel that every inch of me was glazed with a layer of thick, gloppy cum. There was so much that my body felt weighed down by it. My tits were so covered with jizz that it felt like a layer of slippery mud as my fingers ran through it. \n\nI moved my hips slightly and felt a warm gush between my legs. The spreader was back inside me, and my pussy had been filled up again. Moving my hips had made the cum slosh out and stream down between my ass cheeks.\n\nI tried to feel around me to see if the girls were still next to me, and after a moment I felt something gently sliding across my eyelids. Soon I could tell it was a soft, warm tongue, lapping up the cum that was puddled there. Once they were clear I slowly cracked open my eyes and looked up. A mirror was over the bed and I could finally see myself. The sight alone almost made me cum. \n\nI couldn't believe it. My entire body had been covered with a blanket of cum. Every single inch of me was glazed with a thick layer of the white, creamy ejaculate. No spot had been missed. It looked and felt like my body had been drenched with Elmer's glue. My spread open mouth was just a white pool, framed by my soft, pink lips. It was completely full, with rivers of gooey, half dry semen pouring out in every direction down my cheeks and chin, like a paint can that had been carelessly overfilled. Some of the streams even stretched all the way down the side of my face, ending in my hair, which was swimming in a lake of white cream. All around my body men were furiously stroking their cocks and adding to the blanket of sticky jizz that held me in place, stuck to the bed.\n\nI stared up at the mirror, watching the huge load of cum sloshing in my mouth every time my head moved slightly. God... it looked so fucking hot! Like I was cradling a mouthful of thick, warm milk. I shuddered and felt my pussy twitch at the sight and taste. I felt like such a dirty slut looking at myself like that. I looked like the perfect little sperm-soaked cum dumpster, and I fucking loved it.\n\nI needed to cum, and I knew just what would get me off. I slid a dripping hand down to my sloppy pussy, sliding my fingers through the gooey mess that coated my mound until they found my clit. It was on fire, throbbing and begging to be touched. My fingers brushed across it, making my hips buck involuntarily and sending another flood of cum gushing out of my pussy. I started rubbing my clit in quick little circles, grinning as I tilted my head back and gurgled the mouthful of cum. The warm, creamy jizz bounced around and coated every inch of the inside of my mouth. It was nice and thick and gloppy, and it tasted fucking delicious. Cum bubbles piled out of my mouth and popped, sending little flecks of sperm raining down on my face. I could feel all the semen in my pussy splashing around and glazing the walls of my stretched out cunt every time my hips bucked. It made me so hot to feel so many eyes on me, watching me be such a nasty little cum-loving slut. I ran my slippery tongue over my teeth and the roof of my mouth, relishing the gooey sperm one last time before it disappeared. My pussy twitched and flooded with warm juices, knowing it was about to cum so hard...\n\nFinally, I swallowed. But the huge mouthful was way too much to get down in one gulp. Even after a big gush of cum disappeared, a pool of semen still filled the hollow of my cheeks and flowed across my tongue. It took 3 swallows to finally get all of the warm, gooey loads of sperm down. I moaned out, my pussy cumming as I watched and felt the mouthful of hot cum drain down my throat. I could feel the soft, creamy heat of the cum travel all the way down my throat and fill my stomach as warmth spread out across my body. Every fresh blast of cum that rained down on me felt like another injection of pure lust that shot to my cunt and extended my orgasm another small, precious moment. I wrapped my arms around myself and arched my back, clenching my eyes shut and squeezing my slippery, cum-covered tits until my body finally stopped vibrating with pleasure.\n\nIt felt like the orgasm went on forever. When I was able to open my eyes again I started looking around. Sara and Brooke were also covered in cum, but only because they couldn't get out of the way of the endless amount of guys jacking off and spraying me with bucket-loads of spunk. They were still trying to clean me, but they had lost the battle long ago. Much of the cum on my body was starting to dry and had gotten thick and sticky. I watched as Sara scraped off a layer of cum that covered my right tit. It came off in a thick, gooey piece, nearly three inches long. She started to eat it, biting off small pieces and letting it collect in her mouth without swallowing. As she did this, guys rushed to spray my bare nipple and tit with cum, as if it had to always be covered. When she'd finished eating the cum she leaned over and drooled the gooey, softened jizz into my mouth.\n\nEventually they just gave up trying to clean me. Brooke grabbed my hands and placed them at my sides. More time passed as my mouth was filled again and again with hot, creamy sperm, and soon I felt like I couldn't even move. I had been frozen in place by thousands and thousands of loads of sticky cum. After what seemed like an eternity, Sara removed the spreader that held my mouth open, and everyone disappeared.\n\nI was alone.\n\nI slowly sat up on my elbows, looking down at myself and absently licking the shiny glaze of cum off my lips. The entire front of my body was glazed like a donut. I could barely see my skin. A white lake of thick, sticky semen completely hid my bellybutton and flowed like a river down between my spread legs and over my gaping pussy. I looked down at my feet, wiggling my toes and seeing that even they were webbed together with cum. The sides of my body and legs were covered with streaks of partially-dried semen that had flowed off of me to puddle on the sheet around me.\n\nI lifted one arm up, watching it stick to the sperm-soaked sheets for a second. Ropes of sticky cum dangled from my arm like silly string. I held it over my mouth and slurped each one up, then dipped a finger into the pool in my bellybutton. The cum there had been collecting there for a while and had gotten nice and thick and gooey. I scooped up a finger full and brought it to my mouth, wrapping my lips around my finger and sucking it clean. Pretty soon I was lapping my whole arm clean of the salty wet streaks of goo that coated it. I bent and stretched, licking the big wet globs of semen clean from every part of my body my tongue could reach, and used my hands to scrape clean what it couldn't. I cupped the side of my hand against my stomach and dragged it up through my cleavage until my hand was full of the thick, creamy juices, then eagerly shoveled the handful of jizz into my mouth and swallowed it down. The long plastic tube was still next to me and I grabbed it, frantically shoving it into my pussy. I clamped my lips around the other end and sucked the jizz and pussy juices from my cunt. I was in a daze as I eagerly cleaned my body, almost mindlessly licking and sucking and scraping and swallowing until there was no more cum left to eat. \n\nFinally, my belly sloshing and full of gooey spunk, I headed to the bathroom. When I opened the door, both Brooke and Sara were waiting for me. They were naked, lounging in the big bathtub in the master bath of the house. But they weren't cleaning up. They were both laying back against one edge of the tub, arms stretched out to the side, looking at me with huge grins... and up to their tits in a warm, sticky cum bath. \n\nI felt my jaw drop. Thick, milky, delicious jizz filled the tub like water. My pussy creamed at the sight. My knees nearly buckled as I approached the edge of the tub. Brooke and Sara both rose up out of the bath like goddesses, streams of creamy cum flowing down every inch of their perfect bodies as they reached to help me in. They were both wearing the longest, thickest strap-on's I'd ever seen. They each took one hand and guided me down into the tub. I lifted one leg over the edge and slid it down into the warm, gooey cream. I could feel the silky sperm caressing my skin as I put my other leg in and sank down into the bathtub until only my upper body was above the surface. Brooke sat behind me and pulled me against her body as Sara grabbed a large metal pitcher and dipped it into the bath. Once it was full she held it above me and slowly poured a river of semen across my chest and shoulders. It looked like thick milk pouring out of a jug as it splashed wetly across my tits. I shuddered as Brooke rubbed the sticky fluid into my skin. What she missed rolled down my body like warm, sticky syrup. \n\nSara moved the pitcher up and I tilted my head back as she drenched my hair with cum. Brooke used her fingers to massage the warm, creamy jizz into my hair like shampoo. Sara poured until the pitcher was empty, drenching every single hair. Brooke washed my hair with the cum like I was at a salon, gently massaging it in with her slippery fingertips. Sara set the pitcher down laid next to me, sliding her hands all over my wet skin, making sure every inch shined with a layer of sperm. \n\nI felt like a goddess. I was the ultimate Cum Queen and Sara and Brooke were my perfect servants.\n\nWhen my hair was completely soaked I slid down in the tub until the milky waves of sperm were lapping at my chin. I paused for just a second, taking a deep breath, then closed my eyes and let my body slip the rest of the way in as the steamy cum bath engulfed me completely. It felt like an eternity as my hands roamed over my slick skin and I savored the delicious feeling of being completely submerged in semen. It felt thick and silky on my body. I could feel it penetrating every pore, my skin tingling as I imagined all the little sperm swimming against me. I massaged my tits, squeezing and pinching my slick nipples, and then brought my hands up. My fingertips slid across my face, caressing my lips and cheeks, feeling the soft, slippery wetness that coated them. Caressing them with the essence of countless numbers of orgasms.\n\nI moaned underneath the surface as I felt Brooke and Sara's bodies pressing against mine. They laid beside me and I felt their fingers find my pussy and ass. They started working the slippery digits in and out of my hot, slick holes. My body trembled as they added more fingers, stretching me open wider and wider and letting the sloppy openings fill up with warm cum. Their hands worked every sensitive part of me, driving me toward orgasm as I felt every inch of my flushed skin bathed with warm, sticky cum. When I felt the fingers in my pussy suddenly become a fist that forced its way deep inside me, I screamed, my muscles tightening up as I came. I opened my mouth and warm semen gushed inside, filling it instantly, and turning my scream into a wet, cummy gurgle. I swallowed over and over again as my body trembled and shook, guzzling down mouthfuls at a time and filling my stomach up with jizz as pussy juices gushed out around the fist buried in my cunt.\n\nWhen I finally came up for air Brooke pulled me onto her lap so I was straddling her strap-on. I felt the length of the long, thick cock resting between my thighs, pressing up against my pussy mound, and I grinded against it as Sara crawled between my legs. She rose up on her knees and I watched the streams of gooey cum cling to her curves and start to drip down her body. I knew they were about to give me a fucking I'd never forget. I put my hands on the edge of the tub behind me and pushed myself up until the tip of Brooke's strap-on was poking at my slippery asshole. I worked my hips in a circle for a second, teasing myself and letting the tip tickle against my little puckered hole, then thrust down onto it, impaling myself on her massive cock. Everything was so slick and lubed up with hot spunk that it slid inside me easily, even though it was by far the largest cock I'd ever had in my ass. I sighed in pleasure as I felt it's thick length stuff my butt completely.\n\nSara grabbed my thighs and spread my legs open as I balanced on Brooke's lap, my ass gripping the fat strap-on. She cupped her hands together and dipped them in the bath until she was holding a pool of white sperm. Then she brought them to her strap-on, wrapping her hands around it and twisting them up and down like she was wanking herself off, making sure it was completely soaked with jizz. Once it was dripping wet she grabbed my hips with one hand and guided the tip of the slippery strap-on toward my yawning pussy. She watched my face, smiling as she pushed the head past my pussy lips and then pulled it out again, teasing me. I started whimpering, needing to feel it inside me so bad. She finally gave in, pulling out once all the way, then thrusting forward and ramming the massive toy all the way into my cunt. I shuddered as her body slammed against me and both of my holes were stuffed full of the hard, slippery shafts. It felt so good to finally be penetrated after being teased for so long without feeling a cock inside my pussy. \n\nSara leaned forward and wrapped her arms around my back, her slick tits pressing against mine as she buried her hands in my hair and started to fuck me. Her lips pressed against my mouth and her soft tongue slipped inside to play with mine. All three of our gooey, cum-soaked bodies slid together like oil on glass as the girls fucked the fat cocks in and out of my creamy holes. It was the most delicious feeling in the world. Everything felt so warm and soft and slippery... like my whole body was wrapped up in a big, cum-soaked pussy. \n\nBrooke scooped handfuls of jizz from the bath and poured them over my mound, drenching it and the rubber cocks plowing in and out of me with fresh layers of cum, and keeping everything nice and sloppy. Wet slaps echoed through the bathroom as Sara's hips crashed into the sperm-soaked mess between my thighs, sticky strings of cum stretching between our hips every time she pulled back. \n\nI smiled inwardly as they ravished my body. This was my favorite feeling in the world. Both my holes stuffed full of rock hard cock and every inch of my skin soaked with warm, gooey cum. I sank my hands down into the bath and found Brooke's slippery thighs, grabbing on to them and using them for leverage as I bounced up and down on the rubber cocks. Strands of wet, cum-soaked hair stuck to my sweaty face and neck, my eyes clenched shut with pleasure, my mouth open, gasping every time the long, thick shafts plunged inside my tight body.\n\nWhen I was close to cumming, Sara scooped up a handful of cum and shoveled it into her mouth. She smiled at me and swished the heavy fluid around a few times, then leaned forward. I opened my mouth wide, moaning in anticipation of the creamy treat she was about to feed me. Her smile grew and she parted her lips, letting big load of hot, gooey jizz flow into my mouth. I felt my holes clench down on the slippery cocks as my mouth filled up with cum. Heat spread out from my spasming pussy across my flushed skin as the sweet, warm cum slid down my throat. I felt like such a perfect, nasty little cum slut, creaming on the cock in my pussy while Brooke fucked my ass and my stomach filled again with the warm, delicious cream I craved. The girls kept fucking me through my orgasm, thrusting deep inside me as I swallowed down Sara's gooey treat. \n\nWhen my orgasm finally passed I fell to the side, slipping out from between them. Both strap-ons slid out of my sloppy holes with a wet plop. I sat back against the edge of the tub and slid a hand between my legs to feel my tender pussy and ass. Both of my holes were stretched and gaping, letting the warm, silky cum in the tub flow through them. It was a nice, soothing feeling after having them so thoroughly well-fucked.\n\nI looked down at Brooke's lap, staring at the fat cock that had just been buried up my tightest hole. There were pearly drops of cum dripping down the length of it. She grinned as she saw me staring, and I couldn't resist leaning down and engulfing it with my mouth. I licked and sucked at it like it was my last meal, cleaning all of the slick, sweet juices off of it. There was so much cum in the tub that the bottom of the strap-on was submerged in a white pool between her legs. I closed my eyes and forced my head down, taking the whole length of the cock into my throat as my face sank into the warm pool of gooey sperm. I heard her giggle and felt her hand rest on the back of my head, pushing me down a little further. I held myself there until I needed to breathe and then finally pulled back, letting the cock slip out of my throat as the jizz poured off my face.\n\nI panted, wiping my eyes and catching my breath as the girls sat there looking at me, as if they were waiting for their next instruction. They were the perfect servants, and I knew they'd do whatever I told them to without any hesitation. They were there to serve me, and to fulfill my wants and needs. And right then, I needed to be used and abused. Somehow they knew exactly what I wanted as soon as I thought it.\n\nThey grinned and sprang into action, diving toward me and twisting my arms and legs around until I was kneeling in the tub. Brooke got behind me and slapped her heavy strap-on down between my round ass cheeks, fucking the slippery shaft slowly back and forth between them. Sara knelt in front of me, her own thick, glistening cock bobbing up and down in front of my face. She grabbed my chin and pried my mouth open with her fingertips, thrusting the cock in my mouth and straight down my throat. She put her hands on the back of my head and forced me down on it until my wet lips kissed against the base of the dildo. She held me there as I felt Brooke move her own cock down to my pussy and start to split my sticky labia with the fat head. It popped in and she pushed forward, burying it balls deep in my spasming cunt. Their strap-on's were so long and hard I felt like I could feel them touching inside as they spit-roasted me.\n\nSara started bucking her hips, fucking the plastic cock in and out of my throat without mercy, just the way I wanted her too. My eyes watered and my cheeks bulged as I felt the thick shaft stretch my throat. She scooped up handfuls of sticky cock cream and caressed my face, smearing the creamy textured ejaculate all over me and slapping my cheeks as I choked and gagged on her cock like a good little cum whore. She rubbed her long, slick fingers along my neck, feeling it bulge out as the rubber cock pushed further into my throat. I stuck my tongue out and lapped at the balls of the strap-on every time I could, cleaning off the gooey glaze of cum that coated them.\n\nThe girls fucked me back and forth, each pushing me onto the other's cock when they thrust forward. When I was about to pass out from lack of oxygen Sara ripped the plastic cock out of my throat with a quick jerk. I gasped for breath as Brooke slid her cock out of my pussy and pushed the fat mushroom head against my asshole. She shoved forward and I felt it pop inside, the thick length sliding into my bowels until the balls smashed against my pussy lips. She worked her hips in a big circle, using the hard shaft to stretch and pry my asshole open. She even slid a slippery finger in beside the dildo and ran it in a circle all around the shaft, tickling me as she opened the tight hole up even more.",
        "I was still catching my breath when Sara grabbed a fistful of my hair and jerked my head up. She smiled an evil little smile at me as she stared in my eyes. It felt like everything froze for a second, her eyes glinting as they studied my face. Then her look suddenly changed. I felt her grip on my hair tighten as she pulled my head back, and then roughly jerked it forward, plunging my face down into the sea of cum. \n\nMy world went white as the hot semen engulfed my senses, flowing into my mouth, nose and ears. I choked and sputtered under the surface as Brooke pounded my ass and Sara kept her hands on the back of my head, not letting me up for air. I felt her reach underneath me and clamp a cum-filled hand over my pussy, massaging the gooey juices into the slippery folds and pushing her 2 middle fingers inside me. She fucked her them in and out of my sperm-soaked cunt, slapping my clit with her palm as her fat rubber cock raped my ass, and I tried to keep from drowning on cum. \n\nFinally Sara yanked my head up and I gasped in mouthfuls of fresh air. I could feel the heavy coating of gooey cock cream on my face sliding off and plopping back into the tub. Sara giggled and played with the stringy strands of jizz that hung from my cheeks, nose and chin. She caught one with her finger and lifted it up, laying it back across my face and then wiping her finger across my lips. Just when I thought she was done playing she grabbed another handful of blonde hair and buried my face in the hot cum again, overwhelming me with another full mouthful of jizz. My pussy gushed as I felt the warm stickiness envelop my senses again. \n\nThey were treating me like the perfect little cum guzzling slut, and I was loving every minute of it.\n\nAfter a while Sara pulled my head up again to let me breathe. I looked up at her with a weak smile as I panted and the jizz streamed down my face and neck. I noticed her cheeks bulging a second before she grinned and spat a huge mouthful of warm, gooey cum on my face. I closed my eyes as it splattered against them and started slithering down my cheeks and nose. I felt her hand come up and cover my face, smearing the cum all around and massaging it into my skin. I felt like such a nasty little whore. It was so hot, I had no chance. I groaned out as I felt her warm, slick fingers slide over my face, dominating me as my holes clenched down on Brooke's fingers and cock. I screamed, arching my back and slamming my hips back into her over and over again as my pussy sprayed cum over her fingers, filling her palm with my steamy juices. She splashed the handful of girl cum over my back and raked her nails down the slick, sensitive skin, making me shudder as her hard strap-on ravaged my tender ass. \n\nWhen I stopped screaming Sara lifted my chin up gently with her fingers and leaned down until her lips were just inches from mine. Her tongue snaked out and started licking the dripping sperm off my face like a cat lapping up milk. Her soft, pink tongue slid across my lips and chin, up my cheeks, and along my nose, cleaning all of the sticky cream off. Once my face was clean she pressed her lips against mine and pushed all the cum she'd licked up into my mouth. I moaned, my body shaking and my ass quivering around Brooke's thrusting cock. It was like an endless flood of orgasms as the girls used my body in every way I'd ever dreamed. Sara cupped her hands together and shoveled handful after handful of warm, creamy jizz into my mouth as Brooke massaged my clit with her fingers and plowed my ass with the long, sleek strap-on. \n\nEvery inhibition was gone. I let each handful of hot, gooey cum bounce around in my mouth, grinning and gurgling the delicious cream happily as milky streams of thick semen poured out the sides of my mouth and down my neck and chest. I lost count of the number of times I came as I guzzled down all the gooey spunk they could feed my hungry mouth. My two gorgeous servants kept me completely glazed and filled with cum as they fucked me silly.\n\nWhen the three of us were finally too tired to continue the girls took turns making sure their sweet pussies were stuffed with cum, then straddled my face and let the sticky fluids drain into my mouth. When there wasn't enough left to fill them up I licked the bathtub clean, lapping up every drop of sweet, delicious cum my tongue could find. Somehow in my dream, my stomach never seemed to fill, and the appetite for more and more cum never seemed to wane.\n\nI woke up from the dream with my fingers buried in my sopping wet pussy. I quickly made myself cum before the vividness of the dream faded, and then collapsed against the pillows and sighed. I was overcome with feelings of happiness, sadness, and frustration. It was terrible to leave such a perfect place, but it was a dream I knew I'd never forget. I can only hope I'll find that place again, and maybe it wont be just a dream. \n\n*************************\n\nThanks for reading!\n\nThis story was based on a real dream I had, with a bunch of detail added. I hope you enjoyed! Feedback and comments are always appreciated! :)"
    ],
    "authorname": "k80s",
    "tags": [
        "cum eating",
        "cum fetish",
        "cum drinking",
        "bukkake",
        "gokkun",
        "cum bath",
        "cum",
        "nasty",
        "lesbian",
        "double penetration"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/she-dreams-of-cum-ch-02"
}
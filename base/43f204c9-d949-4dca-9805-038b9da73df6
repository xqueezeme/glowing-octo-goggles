{
    "title": "Shut Up And Drive! Ch. 04",
    "pages": [
        "Shut Up and Drive Ch 04\n\nBy Denham Forrest\n\nTWT\n\nStella at her Office\n\nWalter Peel had just returned to his chair after making himself his lunchtime coffee. Walter's job was a cross between doorman and receptionist. He would vet visitors and direct them to the floor the companies they wished to visit were on. His secondary -- and probably more important -- role was to watch over the vehicles in the car park via the monitors on his desk.\n\nIt was a movement on one of those monitors that caught Walter's eye. A black estate car was reversing into one of the reserved parking bays. What's more Walter instantly recognised that it wasn't the vehicle that had exclusive use of that particular parking bay.\n\nNo matter what else Walter was doing -- or whom he was speaking to -- the arrival of that particular vehicle in that parking bay would prompt Walter to pick up the phone on his desk and dial an internal number. He'd then shout the two words, \"She's here!\" into the mouthpiece at whoever answered the call, hang up and then rush over to be ready to open the door to allow Her Majesty to make her entrance.\n\nIt was a well-rehearsed routine designed to prevent Walter from receiving a public tongue-lashing from the dreaded Estelle Cooper.\n\nHowever, although Walter did pick up the handset that day, he did not dial. \"She\" had never reversed a car into that parking bay, or any other parking bay as far as Walter was aware. In fact, it wasn't unknown for her to dump her vehicle right outside the front door, and then send one of her minions down to park it after she'd reached her office.\n\nBesides, the vehicle was a medium priced run-of-the-mill family car (an older model at that), to Walter's eye. Her Majesty only ever travelled in top-of-the-range model vehicles, or black cabs.\n\nHowever, Walter did leap to his feet. If she was to arrive and find an alien vehicle parked in her private spot, Walter would be for the \"high jump\" and he knew it. So he also knew that he would have to go outside and see this miscreant off.\n\n----------TWT----------\n\n\"That's my parking bay there, Marie; would you mind reversing in to it, please?\" Stella asked.\n\n\"I'll do my best, Stell, but reversing isn't my forte,\" Marie replied.\n\n\"Mine neither, but if you drive in forwards the security man might recognise me on the camera. I'd like to keep my arrival in the office as a surprise. He telephones and warns them I'm... Estelle is on her way up.\"\n\nMarie smiled back at Stella. She was aware of her friend's rough plan for the rest of the day.\n\nAfter Marie had parked, the two women sat in the Passat and awaited Walter Peel's arrival at Marie's door before either made any attempt to exit the vehicle.\n\n\"I'm sorry, Miss, but you can't park here...\" Walter had just begun to say, when Stella's head appeared above the roof on the passenger side.\n\n\"Oh, I'm sorry, Mrs Cooper. I didn't realise that it was you in the passenger seat.\"\n\n\"You weren't supposed to see me, Walter; that's why we reversed in. Now you will please stay with us until we are inside the building. Today is one day I do not wish you to warn my employees that I've arrived.\"\n\nOnce inside the building, Stella asked Marie to stay with Walter to ensure that he did not use the telephone while she made her up to her offices. Then Walter and Marie watched Stella enter the lift, then the indicator as it ascended to the sixth floor.\n\n\"But her office is on the fifth,\" Walter exclaimed, without thinking.\n\n\"She'll walk down. I doubt that there's a bell that rings when the staircase door opens on the fifth. Stella really is hoping to catch them on the hop today!\" Marie grinned back at him.\n\nMeanwhile, five floors above, Stella was looking through the little window in the fire door, studying the reception area of her own offices.\n\nYoung Hazel, the pretty young gofer/girl Friday/receptionist, was sat behind her desk, while young Anthony was... Yeah well, it was obvious to Stella that Hazel had an admirer. Possibly a budding office romance, Stella suspected.\n\nIt struck Stella that very suddenly she was seeing romance everywhere she looked, and she wondered why she hadn't done so before. But then she had to admit that she herself had not been in-love the last time she'd visited the office.\n\nVery slowly and quietly Stella pushed the door open just enough to slip through the gap, then let the door close gently. She'd crept across the foyer and was stood not five feet from Hazel and Anthony when they finally became aware of her presence.\n\nBoth youngsters were totally shocked to find themselves unexpectedly confronted by the dragon herself. Like everybody else in the office they'd assumed that the advance warning system was infallible.\n\nHazel leapt to her feet, her mouth opening and closing, but not uttering a sound. Anthony tried to back away; he could think of no excuse to give Estelle for being out of the main office ten minutes after lunch hour was over, and just wished he was back sitting at his desk.\n\n\"Don't you dare move an inch, young man!\" Estelle's usual voice instructed, albeit rather more quietly than either Hazel or Anthony had expected. But they accepted that their saving grace was the fact Stella had no wish to advertise her presence in the main office, just yet.\n\nStella moved her attention to the young woman and, with a subtle wave of her finger, instructed Hazel to sit back down in her chair and remain silent. Then -- in the same commanding but unusually quiet tone -- she instructed Hazel to call the main entrance and ask Walter to send Marie up. The fact that Estelle added the word \"please\" confused Hazel.\n\nThen they all remained where they were, awaiting Marie's arrival.\n\nWhen Marie did arrived on the fifth floor, it was by the same surreptitious route that Stella had used herself.\n\nAs she exited the stairwell, Marie glanced through the glass wall into the main office. It was instantly apparent to her that nobody other than the two petrified looking youngsters Stella was standing guard over was yet aware of her presence in the building. It looked to Marie like most of the rest of the staff were milling around main office, chatting.\n\n\"Don't look so worried you two, things might not be as bad as they appear!\" Marie consoled Stella's two captives, with a smile. \"What now, Stell?\"\n\n\"You go first Marie, Tony and Hazel will walk together behind you. Then I will hide at the back, and with any luck none of them will spot me until it's too late. This should be a real hoot. Will you look at them all in there?\"\n\nStella did have the outline of the plan for the afternoon in her head; surprise had been a pivotal point in the exercise. Discovering Anthony sitting on Hazel's desk had been extremely fortuitous. Stella had wondered how she was going to get across the foyer and into the main the main office without being seen.\n\nOne or two of the office staff did notice Marie enter the room, but Angela and Tony's presence didn't lead to any of them reacting to her arrival. However when Estelle stepped out from behind the three newcomers, a wave of stunned silence seemed to sweep across the office. Only one telephone's persistent ring broke that silence.\n\nIt was probably the sudden silence that accentuated the sound of that telephone in the office manager's -- Sarah Parker's -- mind. Seated in Estelle's private domain, she'd been studying some paperwork.\n\nSarah looked up wondering why the telephone had not been answered, and saw her job evaporating before her eyes. Estelle was glowering at her from the far end of the office.\n\n\"You two remain here,\" Estelle, commanded Hazel and Anthony. Then she barked at everyone else in the office, \"All of you will remain exactly where you are, please. Come along, Marie, this way, please.\"\n\nThe fact that Estelle had used the 'please' word to her (mostly unrecognised) companion didn't surprise anyone. But the fact she'd terminated her command to them with the word, totally confused them. It was unknown for their Lord and Empress to use either 'please' or 'thank you' to any of her underlings.\n\nSarah having risen from Estelle's plush chair on first sight of the witch herself, began to inch her way toward her allotted side of the desk.\n\nOn entering the office, Estelle instructed Sarah return to seat she had been unofficially occupying, with her customary pointing finger and stern expression. In fact, Stella herself wondered where and when she'd learnt the art of controlling people with a wave of her finger.\n\nEstelle then seated herself on the secretary's chair and invited Marie to take the visitor chair. Then with a hostile expression on her face she stared into Sarah's eyes.\n\n\"This is just not good enough, Mrs Parker, why is everyone milling around out there?\"\n\n\"They've only just come back from lunch, Mrs Cooper. Thirty minutes isn't really long enough for them to get to the nearest food establishments and back again. I have ... requested in the past that we change to a one-hour lunch break,\" Was the only reply Sarah could come up with.\n\n\"Hmm.\" Stella replied at the same as she winked at Marie. \"Now if I recall correctly, the other day you mentioned the annual salary review, Mrs Parker. Have you got the file handy?\"\n\nSarah reached into Estelle's in-tray and, removing the top folder from it, placed the folder on the desk before her boss.\n\nStella didn't even open the folder, she picked up a pen and wrote 'Five percent across the board!' on the folder and then she signed the remark. Then she crossed out the signature and replaced it with words Stella Warender. But then, after smiling at Marie, she crossed that out and signed Stella Harper, adding nee Warender in brackets.\n\n\"From this day forth lunch breaks at this company are one hour long, Sarah and there will be no change to our start and finish times. Oh and you, my dear, should you want the position... Well that is your seat now from now on. You are not the officer manager anymore, you are the boss. That's of course providing you wish to accept the position. You do everything anyway. I just come in now and again to wind you up and make myself feel important. Oh we will have to renegotiate your salary of course, to reflect your newfound responsibility.\n\nSarah did not reply she just sat in the big chair with her mouth open, trying to understand what had come over her employer.\n\nEventually her eyes moved to Marie, an old (somewhat vague) acquaintance from their college days.\n\nMarie grinned back at Sarah and then said, \"Yeah, scary ain't it! But would you believe that Madam Fauntleroy has fallen in love with Teddy Harper?\"\n\nHaving attended the same college, Sarah Parker knew exactly who Ted Harper was. Sarah's eyes moved to the now beaming Stella who nodded.\n\n\"But your husband?\" Sarah almost mumbled.\n\n\"Not for much longer, Sarah. No one could really call that cheating weasel a husband anyway. He's gone, if only unofficially, and Ted Harper is my new life partner. Soon to be husband if I can hang on to the bugger. Although I must admit, that I'm quite concerned that everybody -- well every female at least -- seems to know him.\"\n\n\"We all lived in hope back at college, Estelle. But that man appeared to have tunnel vision or a very discerning nature; very few of the girls managed to catch his eye,\" Sarah replied.\n\n\"Yeah, his eyes were on Miss tight-arse.\" Marie offered but she enlarged no further.\n\nSarah glanced toward Stella and nodded in understanding.\n\n\"Right, girls, we can't keep that lot standing out there all day; I want to take them all over the Rose and Crown for a quick drink to celebrate my recent good fortune. I think Teddy would approve of that. And Sarah, please do not mention the salary increases or the extension of lunch breaks until I've left today. I'm sure some of them have their cars with them; we don't want anyone getting carried away, do we?\n\nOh, and my last action as de facto manager here. Are all the office chairs as uncomfortable as this ... bloody thing?\"\n\n\"All the employees' seats are the same, Estelle!\"\n\n\"Stella, Sarah! Well bugger the cost, upgrade the bloody things A.S.A.P. Now come-on, let's go scare the crap out of that lot? They're all looking terrified.\"\n\nAll three women were conscious of the murmuring that came to an abrupt halt as they exited the office.\n\n----------TWT----------\n\nLater, back at Ted's Studio\n\n\"How'd it go at the office?\" Ted asked as Stella arrived in the gallery.\n\n\"Well, it was fun. However I'm not too sure that all of my employees believe that it's true.\"\n\n\"What's true?\"\n\n\"That the old Estelle is no more.\"\n\n\"Christ, even I'm not convinced of that one, kiddo. They should learn to take what good fortune they can find.\"\n\n\"Well, I have given them all a raise, and I've extended their lunch time to an hour.\"\n\n\"Hey Stell, I think this newfound altruism might be going to your head. You don't have to buy friendship, just be... well, civilised with folks.\"\n\n\"I was not trying to buy their friendship, Ted. At least, I didn't think I was. But I have been one tight-fisted employer, you know, who was never satisfied no matter how hard they worked. I can see that was a mistake now. Hey, I've even arranged to upgrade all their work chairs, as well.\"\n\n\"That might be the definition of altruism, Stella.\"\n\n----------TWT----------\n\nThe Following Morning\n\nBy prearrangement, Marie had arrived at Stella's house after dropping her children at school. Stella had to go to the house to get changed and, while making the pair of them coffee, she was thinking it might be a good idea to move some of her clothes to Ted's Studio.\n\nMarie was carrying out a tour of inspection. Although she'd visited the house the previous day, Marie hadn't had the chance to get a good look around. It was as she was descending the stairs that she spied the large black limousine as it pulled to the curb outside property.\n\nThen she watched in fascination as Douglas -- following his usual dress routine -- formally marched around the monstrosity and up to the front door of the house.\n\nCuriosity had led Marie to open the door before Douglas had even rung the bell. He bowed his head courteously, and handed Marie Lady Toddhunter-Brown's visiting card, before saying, \"Her Lady Toddhunter-Brown wishes to know if Mrs Estelle Cooper is available to receive visitors. Her ladyship desires an audience with Mrs Cooper, most urgently.\"\n\nSomewhat taken aback -- Marie had recognised the vehicle and knew exactly who Lady Toddhunter-Brown was -- she retreated into the kitchen where Stella had been making them both coffee.\n\n\"Christ Stella, you'll never believe who's outside. Only that Toddhunter-Brown woman... and she wants to see you. Er, shall I tell her man to ask her to come in?\"\n\nStella wasn't exactly shocked to hear the Lady Toddhunter-Brown was paying her a call. As Estelle, she had trained herself never to appear surprised about anything. However, she was totally confused about why the woman would wish to call upon her. But whatever the reason for the visit, Stella knew she couldn't leave the woman waiting outside; neither could she decline to let her in. Her mother would have a heart attack had she done either.\n\n\"Yes, of course. Would you be kind enough to show her ladyship into the lounge for me please, Marie!\"\n\n\"What can she want?\" Marie asked.\n\nStella smiled, \"Buggered if I know, as Teddy would say.\"\n\n\"Christ, he has got to you hasn't he? Anyway, looks like our shopping expedition is going out the window,\" Marie replied, before scurrying off to complete her allotted task.\n\nStella quickly checked her makeup and ensured that not a hair was out of place. Then she waited until she heard Marie inviting her ladyship to make herself comfortable in the lounge before making her appearance.\n\n\"Good morning, your ladyship, it's so nice to see you again. May I introduce my close friend and confidant Marie Tatlar,\" Stella said, as she entered the room.\n\nHaving seated herself Lady Toddhunter-Brown stood to shake Stella's hand. Then taking Marie's hand said, \"I'm very pleased to meet you, young lady,\" before reseating herself in one of the lounge chairs.\n\n\"I'll make some tea, shall I?\" Marie ventured, Toddhunter-Brown's very presence overwhelming her somewhat.\n\n\"As I can sense that someone has just brewed coffee,\" Lady Toddhunter-Brown smiled back at her, \"that would suffice very nicely, thank you. Unless of course, Estelle or yourself would prefer tea.\"\n\nMarie didn't wait for Stella to say anything, and retreated to the kitchen post-haste.\n\n\"My, you've certainly grown into an attractive young woman, Estelle. It must be nearly twenty years since your mother last brought you to the Hall. You were such a scrawny little child. Quite a tomboy really. However it did come to my notice that... Well, you took after your mother as you grew older.\"\n\nStella was not annoyed at her ladyship's bluntness or any implied criticism. Lady Toddhunter-Brown was infamous for her outspokenness; no one could ever claim that they didn't know exactly where they stood with the woman.\n\n\"Yes, possibly in more ways than were good for me,\" Stella replied.\n\nNancy Toddhunter-Brown smiled, almost completely convinced that Ted had been correct, and Estelle could well have changed, for the better. But she still felt she needed to go through the motions.\n\n\"You know why I'm here of course, don't you, Estelle?\"\n\n\"No, I'm afraid I do not, milady.\"\n\n\"T E Harper, Estelle. He is a very good friend of mine and it's come to my notice that you and Ted appear to be keeping company of late.\"\n\n\"I've fallen in love with Ted, milady.\" Stella replied.\n\nLady Toddhunter-Brown frowned.\n\n\"Did you not fall in love with your husband at one time, Estelle?\"\n\n\"No milady, I did not. I had no idea what love was, let alone what it was all about. When I married Roger Cooper, I thought life was all about duty and position. I accepted his offer of marriage because I thought it was the right thing to do. I very soon discovered that it wasn't. I stayed married to the man because... Well I'm not exactly sure why I did stay with him really. Possibly because I thought that was the right thing to do, as well. I'd made my bed, so I'd have to learn to damn well lay in it. Unfortunately, Roger decided that he preferred to lay in someone else's bed.\"\n\n\"And now you've moved your affections to Ted.\"\n\n\"No, not exactly. I've given my heart to Teddy. I'm in love with Ted Harper, and I'm so happy that I really don't know how to express how happy I am.\"\n\n\"In three days?\"\n\n\"No, in less than a day. The first time I'd ever spoken to Ted properly was on Sunday morning. He was sitting beside my bed in the hospital when I woke up. I found him rude and arrogant, but completely charming at the same time. Less than two hours later I was besotted with the man. No one had ever spoken to me like that before and got away with it! Ted... well... oh damn, it took me just those two hours to fall head over heels in love with the man. I just hadn't understood what love is before.\n\n\"My only fear is that Ted will tire of me. I haven't been the nicest person in the past and at one time I was particularly curt with Teddy. All he wanted to do was paint my portrait and I... Well, I insulted him in front of all the other students at college.\"\n\n\"But Teddy did paint that portrait of you anyway, Estelle. He kept almost all of those paintings for himself. I'm here today because I wouldn't like to see the boy get hurt, emotionally. I've got a really soft spot for that young man myself. If I was thirty years younger you'd have a fight on your hands, young lady.\"\n\nThe two women were sat in silence, smiling at each other, when Marie returned to the room carrying the coffee tray.\n\n----------TWT----------\n\nLater that same day\n\n\"I had a visitor this morning!\" Stella informed Ted as she settled into the passenger seat of his car.",
        "Ted and Stella were going out for a meal, before they... Yeah well, that was the basic plan. They were both aware that Stella would be sleeping-over at Ted's studio again that night.\n\n\"Who was that? Not Roger I hope,\" Ted replied. \"You know if that bugger gives you any stick, Stella, all you gotta do is call.\"\n\n\"Christ no, Ted. I doubt Roger will ever come near the place again; he's probably terrified that he'd find you there. Actually you haven't even crossed the threshold yet. Is there something you don't like about my house?\"\n\n\"Only that it's technically some other mans home, Stella. Once your official separation comes through, I'll probably feel different. We will have to replace the bed though. Well the mattress at least. I wouldn't like to contemplate...\"\n\n\"Ted, Marie and I went out today. I've already ordered two replacement beds. One for our room and one for what was Roger's. I have no idea whom he might have ... screwed on it, when I wasn't around.\n\n\"Anyway, what I was trying to say was, before Marie and I went out shopping this morning, Nancy called in to see me.\"\n\n\"Toddhunter-Brown?\" Ted enquired.\n\n\"The very woman!\" Stella replied smiling.\n\n\"Bugger, what did she want?\" Ted asked, fearing he already knew.\n\nBut then it struck him that Stella had referred to Nancy, and not Lady Toddhunter-Brown as he would have expected.\n\n\"Nancy?\" He enquired.\n\n\"Oh yes, we're best buddies now. It would seem that Nancy has a soft spot for you, Teddy my boy. Quite the charmer on the quiet, aren't we?\"\n\n\"She's just a client, really, Stella. But for some reason she's decided that I need mothering.\"\n\n\"You happen to remind her of a certain stable boy, Ted, who worked for her family when she was a young woman. I do believe she was in love with the lad, but her family must have put an end to it. According to Nancy he went off to join the army. Then the silly sod got himself killed, in a training exercise or something. By the tone of her voice, I'd say Nancy was quite cut-up about it. Anyway that's why she's taken such a shine to you.\"\n\n\"She told you about it? But I didn't think you knew her personally.\"\n\n\"I do now that I'm about to be marry her number one boy. I've met her in the past of course, mother runs around after the woman like a demented kitten. Anyway we -- you and I -- have an open invitation to one of Nancy's dinner parties, along with my parents. We don't have to go if you don't wish to; Nancy said that dinner parties aren't really your thing. But she ... we believe it would go a long way to getting my mother off your back.\"\n\n\"Christ, I'm not sure what would be worse: having your mother on my back forever, or suffering through one of Nancy's formal shindigs.\"\n\n\"They aren't formal, they're supposed to be relaxed dinner parties, Ted.\"\n\n\"Stella nothing about the folks who attend one of Nancy's dinners is relaxed. A cocktail party maybe, I can sneak out or hide at one of them. But dinner? No chance!\"\n\n\"That's what Nancy said you'd say, but I promised her I'd give it a try.\"\n\n\"You two do seem to have hit it off together, she's allowing you to call her Nancy, as well?\"\n\n\"Better than Nancy, Ted. I got idea that once we're married, I get to call her Todsie.\" Stella burst into laughter at the thought. \"Mother will have kittens.\"\n\n\"That's unkind, Stella!\" Ted chided her.\n\n\"I know, but it's the irony of it, Ted. Estelle Cooper would never have been permitted to address Nancy by any other name than milady. Stella Harper will get to call her by her childhood nickname. I just think it's so funny. It makes a complete mockery of everything my mother ever taught me.\"\n\n\"Diplomacy prevents me from commenting, Stella.\"\n\n\"Ted, shall we skip the restaurant and pick-up a takeaway somewhere?\"\n\n\"How do you fancy, Strawberries and Cream for after, Stella?\"\n\n\"Now you're talking, Teddy!\"\n\nLife Goes On, for Ted and Stella\n\n----------TWT----------\n\nEpilogue\n\nTed and Stella did get married eventually. However they do not now live full time at either Ted's studio-cum-gallery nor Stella's house. Angela looks after the day-to-day running of Ted's Gallery, while her husband Gregory, provides security and maintains the grounds at both properties.\n\nOur lovers now mostly reside in a so-called Country Villa (in fact a large converted and very ancient farmhouse) nestled amongst the hills of Tuscany. There Ted spends at least some of his time painting, and the rest \"playing\" with the children and/or Stella!\n\nMarie and her children are frequent summer visitors, as are Stella's parents. Although Daphne Warender insists that outside of the property reminds her of a ruin, even with the modern extensions and swimming pool.\n\nWhether by accident or design -- no one has ever commented -- the Villa is located a mere stone's throw along the valley from the Toddhunter-Brown winter retreat.\n\nTermini\n\n----------TWT----------\n\nThis is the last I shall write about Ted and Stella. My original intention was to write a brief humorous yarn. Everything after the first chapter was written in response to reader requests. It could well be, that was a mistake.\n\nThe last two chapters of this yarn were not posted on this site originally because I have issues with how the site is run. Comments disappear and the number of votes on a story counted varies unjustifiably from my perspective.\n\nTWT"
    ],
    "authorname": "Denham_Forrest",
    "tags": [],
    "category": "Non-Erotic",
    "url": "https://www.literotica.com/s/shut-up-and-drive-ch-04"
}
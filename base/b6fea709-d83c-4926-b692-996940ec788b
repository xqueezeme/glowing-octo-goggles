{
    "title": "Savage af Ch. 02",
    "pages": [
        "Disclaimer: Like most lit stories this one would fit in multiple categories. This story has sexy tattooed girls, exhibitionism, threesomes (M/F/F), and lots of light bondage. If those aren't your thing, stop now and find another story. \n\n*****\n\n(Kiera)\n\nHoly fuck! What the hell just happened?\n\nI stood in my living room looking out the window thinking about everything. Julio had texted a friend to come get him and had left. Thankfully I didn't have to deal with him anymore.\n\nI thought that bringing Julio to dinner would get some payback. I'd texted Jace on Chance's phone and told him to come to dinner because I knew Chance would be out of town. They weren't that close and I figured even if they talked and discovered it, I'd say I wanted to have dinner with one of his friends and that it was going to be a surprise.\n\nIt had gone perfectly. Neither suspected and Jace showed up. Julio was one of my regulars where I danced. I'd given him a private lap dance to agree to help me. He'd gotten pretty handsy but it was a small price to pay to put Jace in his place. \n\nI was still furious from the week before. I believed his explanation but that didn't change a fucking thing. He still interfered in my life and fucked it all up. It didn't matter that wasn't his intent. Now I was totally screwed. I seethed whenever I thought about my situation. I still didn't know how I was going to leave Chance. Every time I thought about it, I got worked up.\n\nPlus, the fucking sex, he just took my ass and did what he wanted. Jesus fucking Christ I fucking hated him. \n\nStill, for some reason the sex wasn't getting me as mad as the rest. I knew it was the textbook definition of the word rape but I didn't think of it like that. And that pissed me off even more. Why couldn't I think of it as rape?\n\nOkay, yes, when he took his clothes off, I'd been impressed. I don't know how he hid that body in those clothes. I guess all I ever saw him in were sweats or work clothes. Damn though, he was cut, all lean muscle and smooth skin. He was good looking, not nearly as good looking as Chance but still cute, and he could definitely fuck better. I hated that my body really responded to him that day, and then to find he was my client from before. I had enjoyed those sessions and to discover it was him was a little disconcerting. He knew how to use his tongue and touch a woman in a way that sent shivers up her spine and make her beg for more. Just thoughts of that sent a flush through me.\n\nThe whole situation had me confused and furious. Why had he defended me? And holy shit, where had that come from? \n\nI'd been fascinated. I was an athlete and I loved watching sports. It didn't matter what, football, basketball, boxing. I loved watching athletes, I loved the way their bodies moved, I loved the strategy that formed in their minds and was expressed in their actions. You could see afterwards what the great ones had been thinking, they were always more steps ahead of the game than their opponent. Jace had moved that way, like a dancer, perfect, in balance, in control, and yet he was barbaric, primal. It had been beautiful and savage at the same time. His hands had been dangerous but his face had been calm, serene, devoid of any emotion. I could tell that every step of that fight had gone the way he planned, the way he wanted.\n\nI closed my eyes and shivered at the memory. I'd been unable to move, transfixed. Every detail of Jace was etched in my mind, his skin under the sunlight, soft and warm, with the muscles underneath strained and swelled like iron. Fight wasn't the right word to describe what had happened. I'd hung with macho guys my whole life, I'd seen fights. That was not a fight, it was a grade A ass-whupping. Julio had been too dumb to realize he was outclassed, I was not. \n\nMental note, that nerd is savage as fuck. I was breathing hard just thinking about it. Christ, my body was reacting just thinking about it. My nipples were hard and I shifted as a stirring arose inside me.\n\nAnd suddenly an epiphany hit me. I knew what to do.\n\nA half hour later I walked through the front of his tattoo shop. \n\nA small burner of incense at his station filled the air with a spicy orange scent. \n\nJace was sitting at his station sketching some numbers on a notepad in a bracket tree pattern. His hair was wet and he was in clean blue jeans and tight black t-shirt that said \"Come to the math side, we have Pi.\" I opened my mouth to speak but my breath caught in my throat, he had a look of intense concentration on his face and he looked absolutely gorgeous. His brown hair and clean-cut face were softened by those intelligent eyes. Now that I was paying attention, I noticed the hard muscle of his arms stretching the shirt.\n\nI swallowed and got myself under control.\n\n\"What's that?\" I squeaked. Christ, I sounded like Minnie Mouse, please don't notice that.\n\nHe looked up at me and paused for a second, then said, \"A phylogenetic tree showing sequence substitution pattern of each primate lineage. The numbers of non-synonymous and synonymous substitutions...\"\n\nI held up a hand stopping him, \"Sorry I asked.\"\n\nHe nodded and went back to sketching.\n\n\"You owe me.\"\n\nHe raised an eyebrow as he glanced back up at me.\n\nI narrowed my eyes, \"For services rendered,\" I said glancing at the chair he'd tied me to. He wasn't stupid, I knew he understood.\n\nHe set down his sketchbook, \"I assume you have a price in mind.\"\n\n\"Yeah, I want you to help me get my money back.\"\n\n\"Why?\"\n\n\"What do you mean why? I want my money.\"\n\n\"For what? What are you planning to do now?\"\n\nI swallowed, I was loathe to trust him, for all I knew he'd go tell Chance. Sill, my options were limited. Besides, I could always bluff him with going to the authorities. I know I never could, but maybe I could convince him I would if he talked to Chance. Taking a gamble, I told him. \n\n\"I'm leaving Chance, I can't stand it anymore. He cheats on me so much I'm surprised he even wants me. I'm tired of being an object in his life. I have nothing and nowhere to go. I need the money to escape.\"\n\nHe stared at me for minutes, I shifted around becoming uncomfortable under his gaze.\n\n\"Is that why you were doing what you were doing?\"\n\nI fought to control myself, I could feel tears forming but I refused to let him see me cry. I nodded.\n\n\"Talk to me,\" was all he said.\n\nI hesitated but my emotional barriers were shot. Without planning to I told him the whole story. Chance's endless cheating and how I was finished, the problems I faced. What I did to overcome them, how I ended up in a brothel, everything.\n\nAt the end he nodded once, \"Okay, what do you want me to do?\"\n\n\"Get my money back,\" I said.\n\n\"Yes, I got that part, how?\"\n\n\"I don't know, that's why I'm coming to you.\"\n\n\"That's your plan? To have me come up with a plan?\"\n\n\"You're literally the smartest person I know and one of the smartest people on the planet, are you telling me you can't figure out how to get my money?\"\n\nHe rolled his eyes, \"Don't try to play to my vanity.\n\nHe pointed to the tattoo chair, \"Have a seat.\"\n\nI eyed him warily.\n\nHe noticed my look and smiled, \"Don't worry, I'm not wearing a tie.\"\n\nI rolled my eyes but smiled, \"Very funny.\"\n\n\"So how did you lose the money? I get he found it but he can't just take it from you.\"\n\nI sorted, \"You don't know him very well, that's exactly what he did. Look, this is embarrassing to admit but Chance is kind of a domineering jerk. He controls most everything in our lives. He deposited the money in a separate savings account that I don't have access to.\"\n\n\"So he just does what he wants to you?\"\n\n\"I'm not proud of it, but yeah. That's why I want out. Do you know how many times I've caught him cheating on me? I don't even try anymore and I still find out about his affairs.\"\n\n\"I'm having a hard time wrapping my head around this. You are literally one of the most beautiful girls I've ever known so I don't understand his cheating. But I don't get you either. Why not just leave?\"\n\nI looked at him for a full minute, he was so cute and clueless. I couldn't decide if I hated him or loved him for his naivety right now.\n\n\"Do you not understand an abusive relationship?\"\n\nA transformation came over him, his face hardened and his body tensed. I shifted back, Jesus Christ, if I hadn't had seen it, I wouldn't have believed it. In that instant he looked dangerous, very dangerous. I licked my lips as he studied me intently.\n\n\"Abusive?\" he whispered.\n\nFor a split second I realized this might be a way to put Jace against Chance. I dismissed the thought immediately, something about Jace told me trying to use him would be a very bad idea.\n\nI held up a hand to stall him and clarified, \"Not physically.\"\n\nHe relaxed slightly, but I could see he was still on edge. \n\n\"You have no idea how hard this is for me right now,\" I said. \"It took me a long time to accept the fact that I was letting him use me.\"\n\nHe held up a hand, \"Look, you don't owe me an explanation.\"\n\n\"No, I want you to understand. It's hard to accept somebody you love abusing you. It took me a long time to realize I was less than nothing to him. I kept making excuses for him, 'he really loves me,' that type of crap. But it's all bull, I know I'm pretty, I know it's hard to understand. I wish I could explain it to myself because then I might not have been so stupid.\"\n\nHe nodded.\n\n\"I let it go on a lot longer than I should have. I kept telling myself he would change. I kept telling myself it was my fault, that maybe I wasn't doing something right. It took me a long time to understand it's not me.\"\n\nHe stared at me thoughtfully for a few seconds, \"You know, he once told me you were boring in bed.\"\n\nOutraged I stood up, \"Are you kidding me? That's bullshit! I'm a damn freak in bed. I'm willing to let him do just about whatever he wants. He just doesn't like to touch me anymore. He doesn't like blowjobs, he doesn't like to give oral.\"\n\nJace held up his hands to calm me down, \"I'm just repeating his words.\"\n\nI sat back down, \"I'm the ultimate girl. I'm up for just about anything, threesome, no problem. Cum in my mouth, sure. Spanking, love it. He's just a pathological womanizer. He wants me because it's a status thing, but he wants as many girls as he can possibly fuck too.\"\n\n\"That does fit his personality.\"\n\nI sighed, \"I'm just tired of his controlling me. He'll never let me go easily.\"\n\nHis phone rang, he picked it up.\n\n\"Hello... yes, just waiting for you...Oh, no problem... sure, next week is fine... same time... got it.\"\n\nI eyed him, \"Girlfriend?\"\n\nHe snorted, \"Not hardly. It was a client, he was supposed to get a touchup done in the next few minutes but had to cancel.\"\n\n\"Oh, cool.\"\n\n\"Anyways, back to the matter at hand, give me a minute will you.\" \n\nHe stood up and went to the back office, after a few minutes he returned with a small paper bag that he tossed in my lap.\n\n\"What's this?\"\n\nHe ignored me and took a seat so I opened he bag, inside were three stacks of bills wrapped in bands labeled $5,000. \n\nEyes wide I looked up at him.\n\n\"What's this?\"\n\nHe eyed me for a moment then said, \"For services rendered.\"\n\n\"I can't take this.\"\n\n\"Why not?\"\n\nI paused, \"It's... it's too much.\n\nI closed the bag and started to hand it back to him.\n\nHe held up a hand to stop me, \"Look, you came to me for help, right?\"\n\nI nodded.\n\n\"And I think we can both agree the other day my... passions got the better of me.\"\n\nI raised an eyebrow and crossed my arms, \"That's one way to put it,\" I said drily.\n\n\"So if you take that money, then I think we can agree that our account is settled.\"\n\nI eyed the bag, it would help me. I knew in my heart I didn't consider it rape, I couldn't explain it. If I thought too much about it, I might realize something I didn't want to consider. I needed to take the money. It's just that it felt like charity. \n\nI looked up at him about to refuse. His eyes froze me, I saw compassion, understanding, and a hint of something else.\n\nReaching out a hand he placed it on my knee, he must have sensed my thoughts because he said, \"Look, you've had to do some pretty crazy things lately.\"\n\nHe gestured to the money, \"This is not a big deal. I know you don't realize this, but I do some pretty heavy algorithm work for big time companies. My account has seven zeros before we get to the decimals. Think of this as a bribe for my... indiscretion the other night.\"\n\nAgain, I was shocked. I never knew he did so well. \n\nI didn't trust myself to speak so I nodded.\n\nWe stayed that way for a few minutes. I was very aware of the warmth of his hand on my bare leg.\n\nI looked up and smiled.\n\n\"What are you going to do now?\" he asked.\n\n\"I'm not sure. I need to go back home and get my clothes and stuff. I have the paperwork filled out for a divorce in my car.\"\n\n\"Can I give you some advice?\"\n\nI nodded.\n\n\"Fuck the clothes, fuck whatever else is there. Don't go back. If you do, you take the chance that things will go crazy. File the paperwork and after it's done get the police to escort you back to the house and get what you need.\"\n\n\"He'll have probably trashed everything by then.\"\n\n\"Probably,\" he agreed. \"But better that than this going sideways again. Clothes can be replaced, and what do you have there that you are so in love with?\" \n\nHe smiled sarcastically, \"Besides, I don't need you storming back here and a repeat of the other night.\"\n\nI snorted, then thought for a while, nothing I wanted came to mind. Sure, I had a few knick knacks I liked but Jace was right, they weren't worth the possibility that I'd run into Chance and something would go wrong. \n\n\"Then I guess I'll get a hotel and file the paperwork in the morning and head out of town.\"\n\n\"That seems rather abrupt but a good plan.\"\n\n\"I know, but I think you're right, the longer I stay the more possibility I have of everything going sideways.\"\n\nHe nodded. My mood started to change as the realization of what was happening set in. I was free. I was doing it. I was about to break away. \n\nI smiled, \"I feel good, I feel light. I want to celebrate.\"\n\n\"Dinner?\" he asked.\n\n\"No, I don't want dinner. I'm not hungry. I want a tattoo.\" I looked around, \"Do you have any other appointments?\"\n\n\"Nope.\"\n\n\"Want to give me a tattoo? I've always loved your work, it's so clean and you have great lines and this might be my last chance.\"\n\n\"Sure, I'll hook you up with a tattoo.\"\n\n\"No! No hookups, I want to pay.\"\n\n\"Uh...\"\n\n\"You've done enough. I agreed that this makes us even,\" I said gesturing to the bag. \"If I get a tattoo, I want to pay for it.\"\n\nHe gave me a quirky grin, \"You do know I charge $200 an hour?\"\n\nMy mouth dropped, \"Uhhh, no, no I didn't.\"\n\nHe nodded.\n\n\"Really?\"\n\nHe laughed, \"Yep, no offense but I'd hate for you to blow money that you might need soon. Consider it a gift.\"\n\nI was torn. I loved his work and now that I'd said it, I really wanted to get a piece done, but he was right. I needed the money and the piece I was thinking of would be at least five hours.\n\n\"Of course, we could always do a barter, let me tie you up naked again and I'll tattoo you for free,\" he joked.\n\nI thought about it a quick second, \"It's a deal.\"\n\nHe sobered up immediately, \"Wait, what?\"\n\n\"It's a deal. Let's do it. You get to tie me up and I get a tattoo.\"\n\n\"Seriously, that was a joke. I was teasing about the stuff the other night.\"\n\n\"I know but I like the idea. It's kind of sexy. You said it yourself, I had to do some crazy things to get here, I want to finish what I started the same way. It'll be kind of liberating.\"\n\nHe eyed me warily, \"Look, I know I suggested it, but it really was a joke. I mean, this makes me a little nervous because now I don't know if you're trying to set me up or what.\"\n\n\"Why would I do that?\"\n\n\"It just seems a little sudden,\" he said.\n\n\"I get that it seems that way to you, but to me this isn't sudden at all. I've emotionally distanced myself for a long time now.\"\n\n\"Yeah, to Chance. I'm talking about toward me. You were just ready to kill me this past week or more.\"\n\n\"True, but if we're being open here. I was a lot less bothered by the incident last week than I cared to admit at the time.\"\n\n\"Really?\"\n\nI rolled my eyes, \"Don't get a big head.\"\n\nContinuing, \"I did want to kill you,\" as I spoke, I held my fingers a half inch apart. \"But I will admit, the tiniest bit of me enjoyed what happened.\"\n\nHe raised an eyebrow, \"Oh really?\"\n\nWith a small laugh, I shook my head, \"Now you're going to be insufferable.\"\n\nTurning serious I locked eyes with him, \"Look, what you did was wrong, don't ever mistake that.\"\n\nHe turned his eyes down.\n\n\"But, I'm willing to look past it in this instance.\"\n\nHe looked back up at me, our eyes met for a moment, I gave a brief nod.\n\nTurning playful I said, \"If you really feel that you can't trust me you could always frisk me for hidden objects.\"\n\nWith a grin he said, \"Oh yeah, I'm not even sure what I'd be looking for.\"\n\nI smirked at him.\n\nWith mock seriousness he said, \"But I suppose I should check you.\"\n\nWe stood up at the same time. He moved forward as I brought my hands behind my head and thrust my chest out. \n\nLocking eyes, he reached over and slipped his hands under my shirt. Running his fingers around me he slipped under my bra and teased my nipples.\n\n\"Remind me again, why am I frisking you if you just agreed to be naked?\"\n\nWith a small shrug and a smile, I said, \"Who knows, who cares, best not to take chances.\"\n\nHe nodded agreement as he moved his hands from my top to inside my shorts as he felt around my ass. It was thrilling when he moved to the front, his fingers tracing my panties. Satisfied that I wasn't hiding anything he stepped back as I straightened herself.\n\n\"You really want to do this?\" he asked.\n\nI nodded.\n\nHe sighed as he considered my words then said, \"Let's start simple, what do you want?\"\n\n\"I was thinking a wolf on my upper thigh,\" I said outlining the space on the side of my ass.\n\nHe turned to a black laptop computer set up behind him and typed in a few words. Pictures sprang up of wolves. We looked at image after image until I found the one I wanted, the head was lowered in an attack stance and the lip was curled in a snarl.\n\n\"I want it to represent strength, breaking away, freedom,\" I said.\n\nHe took on a thoughtful look and nodded, \"Okay, I see where you're going with this.\n\n\"What about adding a dream catcher on the side or...\"\n\nWe spent the next hour talking about the image I wanted. He copied it to his computer and opened up a drawing program then made a few changes at my request. Finally, we both stepped back and looked at the finished product. It was perfect. It represented everything I was feeling and wanted to express. A fierce wolf breaking free and never submitting. My symbol for a new beginning. \n\n\"That is a badass tattoo for a badass bitch,\" he said eyes shining. \"That's going to take at least six hours.\"\n\n\"I assume I can take breaks,\" I laughed. \"I don't have to be tied up the whole time, do I?\"\n\nLaughing, \"No.\" \n\nThen he gave me a serious look, \"I'm not closing up my shop.\"\n\nI looked into his eyes while I thought about it, eventually I shrugged, \"Badass bitches don't care. Let em see.\"\n\nHe nodded his head in acknowledgement and walked to his closet coming back with a bunch of his ties.\n\nI let out a breath, I was wearing sneakers, denim shorts and a white tank top from earlier. I took them off and stood there in a matching black cotton sport bra and thong panty.\n\nJace moved to me, \"May I?\" he asked tilting his head toward my underwear.\n\nI nodded and he slipped his fingers under my bra and tugged it over my head. My nipples were already hard from excitement. I felt giddy.\n\nThen he dropped to a knee and pulled the waistband of my panties down and butterflies formed in my stomach. I stepped out of them putting a hand on his shoulder to steady myself. I became very conscious of the heat emanating from his body. His presence was intoxicating. ",
        "He had me sit, then he positioned the chair so that I could fully lie down. I brought my hands above my head and he wrapped them in the ties like last time. Now that I wasn't raging mad, I could appreciate the care and skill he put into tying me up. \n\nI flexed my wrists in the soft silk, like prior times there was absolutely no give. My hands were together above my head and I wasn't going anywhere without help. He moved to my feet and started to tie an ankle. For some reason I thought he'd keep my legs together this time but he didn't. It turned me on as he spread my legs and wrapped the tie around my ankle a few times before tying it to the outside part the chair. I watched his eyes as he worked, they kept roaming over my body and I could see the bulge in his jeans so I knew he was turned on. Before he could reach for it, I spread my other leg to the far side and smiled as he looked up at me. He looked away and focused on the small patch of trimmed pubic hair between my legs. \n\nI was getting turned on by everything as he finished tying me down. \n\nHe wadded up my panties and said, \"I wish I had the ballgag that I first had them use for you, but these will have to do.\"\n\n\"Not like you haven't done this before,\" I said with a grin. \n\nI opened my mouth as he pressed my panties between my lips and then used another tie to secure it. I knew from experience how effective this gag was, I could only moan and whimper. Intelligible noises were impossible. \n\nHe stepped back and looked at me. I loved the look in his eyes.\n\n\"Want to know a secret?\"\n\nI nodded.\n\nHe reached into a drawer and pulled out my panties from the week prior.\n\n\"I couldn't resist keeping them.\"\n\nA surge of adrenaline went through me and it was a good thing I was gagged or I might have told him to do whatever he wanted to me. \n\nInstead I winked and he smiled as he slipped the panties into his pocket and moved to my side. He traced the tattoo outline then held up a small mirror so I could see and confirmed it was in the right spot. I nodded then he pulled out a razor and cream to shave the area.\n\nHe paused halfway through and I watched as his eyes glazed and he seemed lost in thought. He focused back a few seconds later and he got a wicked grin. Something about it made me faintly nervous. My fears were confirmed when took some shaving cream and spread it over my sex. I squirmed making it difficult for him to touch me so he grabbed two more ties and before I knew it, he'd wrapped them around my thighs midway and tied me down making it hard to shift around.\n\nI whimpered and flexed trying to get him to look me in the eyes but it was hopeless. My fingers stretched in useless struggle as he lathered me up then proceed to shave my pussy bare.\n\nMy emotions were in havoc now. I was equally frustrated that he did what he wanted without asking me but I was thrilled that he did what he wanted without asking me. I'd gone bare before on special occasions but I'd never let a guy doing the shaving. This was such a buzz and a turn-on. He wiped me clean and stood up. He finally met my eyes and I gave him my best \"Really\" look. He broke into a wide smile and winked at me. \n\n\"Everything good?\" he asked.\n\nOh, you bastard.\n\nOne, I couldn't talk. Two, even if I could what use would it be to complain? It was already done. Three, I really want you to shove your face between my legs and make me see god you insufferable bastard.\n\nI flipped him off and he laughed.\n\nFinally, he got down to work. I spent the next few hours watching as the tattoo I wanted began to take shape. He stopped every hour or so to see if I needed anything. A drink of water or to go to the bathroom. Unexpectedly, I felt good, the position was very relaxing and I felt like I could go all night. \n\nAfter a few hours I heard voices and laughter. I looked at the door. I'd almost forgotten that he said he wouldn't close up shop. I figured he was doing it to scare and excite me and it worked. I felt a thrill at the beginning when I thought that somebody might come in but gradually the excitement faded. Now it sounded like a few people were about to walk in. I'd stripped over the last couple months but this was a whole different level of exhibition. Showing my tits and walking around in a thong in a darkened room was a lot different than being tied naked under a bright light with my legs spread. \n\nDing, ding.\n\nThe door opened and a man and a woman walked in. He was wearing a local University hoodie and she was dressed in jeans and a blouse.\n\n\"Holy shit,\" the man exclaimed when he saw me.\n\nBoth of them froze but Jace continued to work. A minute passed with the only sound the buzzing of the needle gun. It was fascinating to watch both of them. They each seemed equally entranced by me. The woman met my eyes and I could see her interest. She had blonde shoulder length hair, was slimmer than me but with a good body. Her tits looked smaller in the light blue blouse she wore but her legs were shapely and filled out her jeans.\n\nThe guy looked at me with straight lust. I don't think his mouth closed the entire time or his eyes ever stopped looking at my tits. He was cute in a frat boy sort of way, a little beefy with raggedy brown hair held in place by a backward ballcap.\n\nJace stopped and wiped my thigh with a towel.\n\nHe looked up at the newcomers.\n\n\"What do you think?\"\n\n\"Fucking awesome bro,\" the guy said.\n\nJace sighed. He looked at the girl, \"And you?\"\n\nShe looked at my half-finished tattoo for a minute, then at me, then she looked at Jace. \n\n\"I think they're both beautiful.\"\n\nJace gave a small nod of acceptance for his work.\n\n\"Now, what can I do for you?\" Jace asked.\n\n\"Bro, what is this?\" \n\nJace looked at the guy, studying him. He reached out his hand, \"And your name is?\"\n\nHe took his hand and shook it, \"Oh, I'm Steve, and this is my girl Tracie.\"\n\n\"I'm Jace and this beautiful model is Kiera. She's getting a tattoo.\"\n\nHe looked at Tracie and smiled, she rarely took her eyes off me. I locked her gaze and felt an excitement.\n\n\"So what...\" Steve started to ask.\n\nJace held up a hand, \"I assume you want to get a tattoo.\"\n\nSteve got the hint to move the conversation on and nodded.\n\n\"Yeah, I heard you were the best so I thought I'd come check you out.\"\n\n\"Cool, what were you thinking about?\"\n\n\"I don't know, do you have any books or anything?\"\n\nJace sighed again, \"Look friend, I'm not trying to be snobbish, but I am one of the best tattoo artists in the state. I charge more than anybody else because my work is better than everybody else's. One thing I don't do is standard book tattoos. I don't do Chinese characters or any other language. If you want something out of those cheesy tattoo books, or something that says \"Spirit of the Horse\" or whatever in another language because it's your soul animal, you should go down the street. Tell them I sent you, they'll give you a great deal. They get a lot of referral work from me.\"\n\n\"Damn bro, do you do anything?\"\n\n\"I do one of a kind pieces that will stand out to anybody that knows the difference between a good tattoo and crap. Look at my wall, look at the examples of work I've done.\"\n\nTracie looked around at the blown-up portraits that he had of his work. The walls were covered with them, I'd asked about that and he said it worked better that way than a photo book. She nodded but Steve shrugged his shoulders.\n\n\"And what's this?\" Steve asked again, pointing at me.\n\nJace shook his head and finally said, \"This is the sexy, hot as hell, girl discount. She's a friend of mine and wanted a tattoo. I don't make exceptions on price but we came to an agreement. As long as she lets me tie her up naked, she doesn't get charged.\"\n\nHe made a point of looking Steve up and down, \"Guys can't get the discount.\"\n\n\"Wait, she's not your girlfriend or anything?\"\n\n\"Nope, we've never gone out.\"\n\nTechnically true.\n\n\"And she agreed to this?\"\n\nJesus this guy was an idiot. \n\nJace ignored the question, \"If you want to make an appointment and talk about a piece let me know. I charge $200 per hour.\"\n\nAfter that, he ignored them and went back to work on me. A few minutes later they left. \n\nJace looked up as the bell rang on their exit. Looking at me he smiled and stroked one of my nipples.\n\n\"I love how excited you get when your seen.\"\n\nI squeaked a noise of protest into my gag and gave him my best dirty look.\n\nHe laughed and said, \"Oh please, look at you.\"\n\nHe caressed my pussy and felt the beginnings of my arousal. Then setting down the needle gun he cupped my tits and played with my nipples. It was useless to struggle and his touch felt really good. \n\n\"Admit it. You love it.\"\n\nIt's kind of hard to admit anything with a freaking gag in your mouth but I rolled my eyes and shook my head no as he continued to play with me. \n\nUnfortunately, it was hard to deny the reactions of my body as my excitement grew. I tried to stay still but the way he kept playing with my tits and then occasionally dropping a hand to rub my sex was turning me on. \n\nI couldn't help it when I started to squirm.\n\n\"Admit it,\" he said.\n\nI shook my head no.\n\nHe kept teasing me.\n\n\"Admit it.\"\n\nWith a growl of frustration, I glared at him and nodded yes. I gave a grunt of acknowledgement through my gag and he laughed.\n\n\"Don't worry, I won't tell anyone your secret,\" he said. \"God, you'd make a great Suicide Girl.\"\n\nA few more customers came in while he worked on me. They were shocked but quickly adjusted, Jace kept to the story of the hot girl discount and I enjoyed the looks the guys and a few girls gave me. He finished the piece around midnight. Before he let me go, he stood back and took multiple pictures of me with his camera. I kind of expected him to fuck me and at the start I wouldn't have minded but by the end we were both dead tired so I was happy he didn't try. He untied me and as I was getting dressed, he told me I could sleep at his house. \n\nAt this point I didn't see the harm so I followed him in my car. He was a perfect gentleman and led me to his spare bedroom and pointed out the bathroom and kitchen if I needed anything.\n\nI thanked him and shut the door and stripped naked before collapsing into his king size bed. I fell asleep the second my head hit the pillow. \n\nI woke up late the next the morning disoriented to where I was at. It took me a minute to remember everything and then I laid in bed processing it all. I pulled back the covers to see my new tattoo and noticed I'd bled a little through the bandages onto his sheets.\n\nYikes!\n\nI rummaged around the dresser in the guest room and found a plain black t-shirt. It looked like it barely came to mid-thigh but I took it in hand and stole across the hallway to the bathroom to clean up. While I washing, I felt a wet nudge on my calf and looked down to see a small black and white spotted pig.\n\n\"Jesus fucking Christ,\" I shrieked, jumping back. \n\nThe pig stared at me and moved forward. Getting over my shock I reached down and scratched its head and he nuzzled my hand. I spent a few minutes petting the pig before I resumed cleaning my tat. After I finished, I put on the shirt and walked out to the kitchen to find him up and cooking breakfast dressed in a pair of black sport briefs and a red sleeveless t-shirt.\n\nLooking up when I entered the room, \"You hungry?\" he asked. \n\n\"There's a pig in your house,\" I said.\n\nLaughing, \"That's Belle, she's my baby.\"\n\n\"Well Bella scared the crap out of me in the bathroom.\"\n\n\"Belle, not Bella. She's named after my favorite Disney princess.\"\n\n\"I've never seen a pet pig before.\"\n\n\"I get that a lot. Sometimes I take her to work at the tattoo studio with me.\"\n\nAs we spoke the pig walked into the room and looked up at me.\n\n\"Careful, she's a beggar. Now are you hungry?\"\n\nI nodded. \n\nHe was standing in front of the stove holding a copper pan in one hand and a metal spatula and making swirling motions with it. \n\n\"I hope you like black truffle omelet with robiola cheese and chives,\" he said as he slid on omelet off onto a plate. He grabbed some fixings and sprinkled seasonings over it before he handed it to me as I took a seat at a stool next to his kitchen counter.\n\n\"I don't know, I've never had an omelet like that.\"\n\nI eyed the food warily as he grabbed a bottle of orange juice from his refrigerator and poured a couple of glasses, setting one before me. \n\n\"Trust me,\" he said.\n\n\"Sure you don't want to go to the waffle house? My treat, eggs and bacon.\"\n\n\"We don't eat bacon in this house,\" he growled.\n\nI immediately realized my mistake, \"Sorry,\"\n\n\"And Waffle House is for peasants. Eat,\" he ordered.\n\nFeeling chagrined over the mistake I made disregarding his pet pig I grabbed a fork and took a bite, as I chewed he said, \"If you don't like it, I'll take you wherever you want.\"\n\nOh my god. This was fantastic. My face lit up and he smiled.\n\n\"Told you to trust me. Now isn't that better than Waffle House?\"\n\nI nodded enthusiastically. The food was incredible. I stuffed my face as he quickly made himself a plate and took a seat in the stool next to me. We ate in companionable silence until Belle nudged me making small grunting noises. I relented and cut a bite out and held it in my fingers for her. She gently took the treat with happy smacking noises. \n\n\"Told you she's a beggar. Now she'll never leave you alone.\"\n\nI shared more of my food with her and when we finished, he stacked the plates and glasses in the sink and looked at me. Then he took Belle and put her in the backyard.\n\n\"How's the tattoo?\"\n\n\"Fine, but I bled a little on your sheets,\" I said with a frown.\n\nHe shrugged, \"I figured it would happen, don't sweat it. Let's take a look.\"\n\nHe walked over and pulled me up from the seat while dropping to one knee and lifting my shirt to look. He raised an eyebrow when he noticed my lack of underwear but I didn't say anything so he stayed quiet and went back to looking at the tattoo. \n\n\"Make sure to wash it two or three times a day, use antibacterial soap.\"\n\nI nodded.\n\n\"Did you wash it this morning?\" he asked.\n\n\"No, I used a damp washcloth to clean it. I was going to wait until I showered.\"\n\nHe nodded and rose to his feet, \"Well, I'm about to shower if you want me to clean it for you.\"\n\nWe looked at each other and I nodded. He took my hand and led me to his master bathroom in his bedroom. I stayed still as he turned on the water and then lifted my shirt over my head. Not wanting to get my hair wet I pulled it up into a bun as he took his clothes off and we stepped into the shower together.\n\nHe was gentle as he took a bar of soap that smelled of fresh rain and lathered my body. I relaxed as he gently caressed my skin and washed me from head to toe. He started to lather his chest but I stopped him. I took the soap from him and returned the favor, washing his body squeaky clean. We'd stayed quiet the whole time and I loved the feel of simply touching him. He was much more muscular than I originally thought and the warmth of his body was making me tingle. I turned him to face the water as I did his back. After he was clean, I pressed into him while wrapping my arms around him and soaping up my hands. I dropped my fingers to his hardening shaft and felt his chest rumble in excitement.\n\nMy nipples hardened as they pressed into his back and I felt heat between my legs. I gently washed his cock as he came to full erection. Suddenly my own need won out and I put the soap in the wall tray and turned him to face me. I pulled his head down to kiss him as he pushed me to the shower wall. I reached down and guided him to my entrance as he cupped my ass and dropped his body to get a better angle. I lifted one leg to wrap around his waist as he shifted forward and entered his full length inside me. \n\nFor a moment we held perfectly still. \n\nThen I buried my face in his neck as he began to thrust into me. The patter of water coming out of the shower was the only sound as we held to each other under the warm water, each lost to our own need. I held tight as he pushed faster and faster. Not wanting to break the silence I bit down on his shoulder to stifle my whimpers. \n\nAfter the shower we spent the morning making love. We fell back asleep and I woke up snuggled to his chest with our legs entwined. I paused to look at him. His face was youthful and innocent as he slept. I would never admit it but he surprised me. I always took him to be socially awkward and a nerd but he showed significant insight. I assumed he was always supporting Chance in action or other ways yet by his actions he'd barely tolerated him. \n\nI felt the stirring of emotions but I quickly hardened my heart. \n\nI was leaving.\n\nEven though it was in part thanks to this man I didn't want to get caught up into something that would make it more difficult for both of us. There was no way I could stay in this city after proceeding with my divorce so no matter what I might be feeling I needed to put it in check. \n\nFully decided on my course I relaxed and put my head on his chest and listened to his heartbeat as I drifted off.\n\nWhen I woke up again, he was stroking my hair, lazily he asked me my plans.\n\n\"Same as we talked about. I'm heading straight from here to the courthouse to file the paperwork. After that I guess I need to leave town.\"\n\nHe nodded and seemed to be struggling with wanting to say something but kept quiet.\n\nI looked into his eyes and I knew he felt the beginnings of something too. In other circumstances who knows what might have happened.\n\n\"Will you keep in touch? You don't need to tell me where you're at but maybe text me,\" he said.\n\n\"I'd like that.\"\n\n\"And if you ever want any more tattoo work done, I'll always give you the sexy, hot, beautiful girl discount.\"\n\n\"Yeah, I have a feeling you're going to be giving that discount again soon,\" I said.\n\n\"Just tell me when.\"\n\n\"Not me, that girl that saw me. She's definitely interested.\"\n\n\"What?\" he asked. \"No way.\"\n\n\"I guarantee she's coming back,\" I said.\n\n\"I'll bet you she isn't,\" he said.\n\n\"I'll bet you dinner she is.\"\n\nHe paused then smiled, \"You'd have to come back to town.\"\n\nI looked him in the eyes, \"Would I have a place to stay?\"\n\n\"Always.\"\n\nWe stared at each other for a minute.\n\n\"Then it's a bet,\" he finally said. \"If she hasn't come back by the next time you're in town for divorce paperwork you owe me dinner. If she has, I owe you.\"\n\nI shook his hand, we held on to each other for a minute, I was loathe to separate. Still, I needed to start the paperwork and get out of town. Eventually we got dressed and separated. He gave me a kiss before I got in my car and drove away.\n\n*****\n\n(Jace)\n\nDing, ding.\n\nI looked up from my chair to see the blonde girl Tracie enter my shop. Interesting.\n\nToday she was wearing baggy sweats but her hair was done up nice and her makeup was perfect.\n\n\"Hello,\" I said.\n\n\"Hey,\" she said with a small wave.\n\n\"Can I help you?\"\n\n\"Uhhhh, yeah, I don't know if you remember me...\"\n\n\"I do.\"\n\n\"Oh, well, uh yeah, I want to get a tattoo.\"\n\n\"I assumed,\" I said with a warm smile.\n\nI wanted to put her at ease because she seemed very nervous. If Kiera hadn't told me I wouldn't have understood why but now I did.\n\nShe grinned, \"Duh, right?\"\n\nI laughed, \"What do you want?\"\n\nShe pointed to her hips, \"I want a lily on either side of my hip, right next the hip bone.\"\n\nI nodded, \"Have a seat.\"\n\nShe sat on my chair and leaned back. I arched an eyebrow as I reached for her sweats, she nodded consent and I tugged them down a few inches exposing the skin. We talked about placement and I pulled images on my computer until we found good images. I made a few tweaks and we discussed what colors she wanted. In the end we had it perfect.\n\n\"That'll take about hour and a half on each one, so three hours total, so $600,\" I said.",
        "I looked into her big brown eyes and she bit her lip and looked down, I knew she was wondering how to bring up the discount. Part of me wanted to tease her and make her ask but I decided to let her off easy.\n\n\"Or we can do the crazy, hot girl discount.\"\n\nHer eyes snapped up, \"Really?\"\n\n\"My friend said you'd be back.\"\n\nHer eyes downcast she replied, \"It...it looked fun.\"\n\n\"It wasn't supposed to be a real thing for everybody but I can make you the same offer if you're willing.\"\n\nLooking up into my eyes, \"Is there sex involved?\"\n\n\"It wasn't part of the deal but it did happen with my friend the next day,\" I said.\n\nShe nodded, \"I'm not sure about that part yet.\"\n\nYet? That made me wonder, so she'd thought about it and wasn't totally turned off the idea, hmmmmm.\n\n\"You need to understand, I'm not closing my shop so whoever comes in will see you. I will take pictures. I plan to post some of the better ones up one the wall to show my work. And Kiera wants to see you.\"\n\nShe smiled, \"I can live with that, just maybe not a perfect face shot, maybe a profile or angle so that they'd have to really look at my face to recognize me.\"\n\nThat seemed fair so I nodded. \n\n\"So what now?\" she asked.\n\n\"I guess you take off your clothes,\" I replied.\n\nShe let out a breath to gain courage and then stood up. Without preamble she lifted her top over her head exposing her tits. She had C cups with perfect pink nipples that were already hard. She swallowed then tugged her bottoms to her ankles and stepped out before taking off her sneakers. I noticed she wasn't wearing underwear.\n\n\"Can I leave my socks on? My feet get cold.\"\n\nI looked at her cute little pink socks and nodded. I went to my closet and pulled out my ties, I also turned up the heat to 75 degrees so Tracie wouldn't get too cold. When I came back, she'd relaxed in my chair.\n\nI partially reclined it then I methodically tied her up. I decided on a slightly different configuration that Kiera's. I started with her shoulders. Looping under her arm over her shoulder crossing her back, down the other shoulder and under arm and then behind the chair, pinning her chest down. Then I tied each wrist to the arm rests, looping them repeatedly. I spread her legs to either side and tied the ankles securely.\n\nI stepped back to admire her. She was fresh faced and beautiful, with slim legs and curvy hips. Her pussy was waxed bare and glistened a little, I smelled her musk and when I looked into her eyes knowingly, she blushed and turned her head away.\n\nI didn't say anything but took my last tie and gagged her. She was eager to accept it and whimpered as I got my tools ready. I watched as she tested each bond until she knew she was helpless. Her breathing quickened and her nipples got harder as she fidgeted helplessly. Before I started, I took a bunch of before pictures closeup and of her fully bound from multiple angles. Her eyes glinted with mischief as she wiggled and thrust out her chest.\n\nI worked on her for hours without complaint. Every time I looked up and asked if she wanted a break, she shook her head no. Like last time a few people came in. They were universally shocked and I gave them the standard explanation. Tracie seemed to enjoy the attention and the guys stared at her with undisguised lust. This time I was paying attention. One slim brown-haired college girl was openly gazing with admiration. I looked at Tracie and she noticed to because she tilted her head and winked. I knew she'd be back.\n\nAfter I finished, I took more pictures in the same manner then I took her gag out and rubbed some coconut oil into her skin.\n\n\"Shouldn't you rub that in everywhere?\"\n\nI looked at her.\n\nShe smiled, \"You know, you need to make sure my skin stays healthy, right?\"\n\nI nodded. I understood what she was asking but I wanted to tease her. I took a clean tie and used it to blindfold her. She let out a sigh as I proceeded to rub oil into her entire body. I cupped her tits making her moan as I massaged them.\n\nI used my hands to explore every inch of her and when I got to her pussy, she was soaking wet. She moaned as my finger traced between her lips. Standing up I moved the chair into a full lying down position then went and closed my shop. I made sure to make as much noise as possible so she understood what I was doing and could stop it if she wanted, I stood next to her and took off my clothes. \n\nUntying her I moved between her legs and pressed myself to her entrance waiting for her to object. Instead she lifted her head and kissed me. I kissed back as I entered her and she groaned. We came together and I took my time with her. She was panting and arching as I smoothly pushed back and forth. Soon she began to cry out and wrapped her legs around me while wrapping her arms around my neck. Her body convulsed and she bit my shoulder as her orgasm overtook her. \n\n*****\n\nMe: Looks like I owe you dinner.\n\nKiera: No way! I knew it.\n\nKiera: Did you sleep with her?\n\nMe: Yes.\n\nKiera: Damn, I want a piece of that.\n\nMe: Lol. I'll let her know if you want.\n\nKiera: Hell yes.\n\nKiera: Tell her I want a threesome when I come to town.\n\nMe: Seriously?\n\nKiera: Very.\n\nMe: Wow, Chance is an idiot.\n\nKiera: You have no idea. I'm a total freak and will do whatever for my man.\n\nWait, was I her man? I was developing more than a casual interest with Kiera. I understood why she'd been a bitch to me from the start and truthfully, I couldn't blame her. I thought she seemed a little taken with me but I figured that was emotions running high and stuff. I wasn't sure how to proceed. If I let myself develop feelings, was I going to get crushed later?\n\nI tested the waters.\n\nMe: I'll keep that in mind. So what would you do for me?\n\nKiera: I said I'm a total freak. What do you want?\n\nMe: You know I like bondage, but I also like exhibitionism.\n\nKiera: K.\n\nMe: Let me take you somewhere, zoo, park, mall, or public street. Wear a long coat, nothing underneath. Then at right moment, drop coat and let me take pictures.\n\nKiera: Sounds fun.\n\nMe: Really? You'd do that for me?\n\nKiera: What'd I just say?\n\nI wasn't sure if her words meant I was her man or if she was willing to have fun with me. I decided not to push the issue and see how it turned out. I know I tended to overthink things and girls have told me what a turnoff it is.\n\nWe stayed texting for weeks. She let me know where she was despite my protests that she didn't need to. My tattoo studio also developed something of a reputation. At least once a week I was giving a hot girl discount. My foot traffic was growing on those days and it wasn't uncommon for a dozen people an hour to stop by and see whoever was on display. \n\nI didn't have sex with any of the rest and I made sure Kiera knew it. I wasn't sure where we stood but I believed that no girl wants to date a guy fucking multiple other girls. She loved the hot girl discount stories and made me tell her about every one. She also had me send her all the pictures I took.\n\n*****\n\nKiera got to my house late in the afternoon. She pulled into my driveway and hopped out of her car. Smiling I moved toward her and gave her a kiss as we embraced. I tried to make it long and deep but she broke away really quick.\n\n\"No time for that babe, we're running late.\"\n\nGroaning I got into my truck as she ran to the passenger side.\n\nAs soon as I pulled out, she told me what restaurant to go to. Pappadeaux was one of my favorites. I tried to focus on driving but I kept looking over at Kiera, she was dressed in a bright yellow summer dress that barely came to mid-thigh with tan sandals. The dress used spaghetti straps leaving her shoulders mostly bare and an underwire support boosted her boobs to near overflowing. \n\nAfter she caught me looking for the tenth time or so, she asked me, \"Is there something I can help you with?\"\n\n\"Nope, nothing at all. Just happy to be with the most beautiful girl in the world.\"\n\nShe smiled and relaxed back in her seat. Shifting she brought a leg up sideways exposing most of her thigh. Casually she talked about how she was doing and her new place.\n\n\"You'll have to come visit,\" she said, her finger trailing her leg as her dress shifted even higher.\n\nI was having trouble focusing on the road, \"Just tell me when.\"\n\n\"We'll have to plan it,\" she said, her voice was throatier now, hoarse.\n\nI glanced at her face and our eyes caught, her chest was flushed. I tore myself away and looked back at the road. \n\nFighting to get myself under control we both stayed quiet. I glanced back at her leg, she'd shifted a little more and her hand rested on her thigh, I could just make out a small V of white panty. As I watched, she shifted her hand and I caught a better look at her white panties with little red hearts all over.\n\nI swallowed and looked back at the road. Shifting because my pants had become uncomfortable, I adjusted my growing cock and flicked my gaze back to her.\n\nOnce more she'd upped the stakes, this time she lost all pretense. She sat with her dress hiked to her hips with most of her underwear on display. I looked up into her eyes and found her staring at me with one eyebrow arched.\n\nI glanced at her hardened nipples pressing against the fabric of her dress. She was getting as turned on as I was. \n\nI looked back to the road.\n\n\"Take em off,\" I ordered.\n\n\"Not my job,\" she replied. \n\nI nodded, reaching over I grabbed a side and tugged them down. She tilted her opposite hip toward me and I pulled that side down. After that I was able to grab the middle and pull them down to her knees. She had to lift her legs but I took them to her ankles and all the way off and put them in my lap without running us off the road. I considered that a major accomplishment considering the circumstances. \n\nNot saying a thing, she reclined her seat and pulled her leg up then hiked her dress to her waist and lay back with her hands above her head. Now her pussy was utterly exposed to me. She never said a word but just closed her eyes as I traced her lips back and forth, stroking her smooth sex. \n\n\"Interesting panties,\" I said eyeing the bikini cut cotton underwear, \"Yes, Daddy\" was written on the back. \"Not your usual choice.\"\n\n\"Mmmmm, I couldn't decide, I was thinking about nothing, but this dress tends to flare up in the wind. I know you like a good show but I wanted to show more cute than slutty.\"\n\n\"For the record, I like both.\"\n\n\"Me too, depends on my mood. There'll be times I wear nothing and flash everybody, just felt girly today is all.\"\n\nAfter a few minutes we pulled into the parking lot of the restaurant and I parked in one of the few available spots in the middle of the lot. \n\nAs soon as I turned off the engine Kiera moved to my lap, straddling me.\n\n\"I want you,\" she breathed as she unbuckled my pants and pulled me free. She hiked up her dress and slid onto me as we did it in the parking lot. A few people passed by us and I heard snickers but we didn't care. Pressing her forehead to mine Kiera slowly rode me. \n\nA small tap on the window made us both look up. Tracie was standing next to my car with a giant smile. Not stopping Kiera pressed the automatic button rolling down the window. \n\nStill grinding against me, \"Just... just give me... minute,\" she panted. \"Come... sit in car... one more minute.\"\n\nAnother flick and the door locks audibly switched. Trace laughed as she walked around the car and slipped into the passenger seat.\n\n\"Mmmmm... one second,\" Kiera breathed.\n\n\"Take your time, I'm loving the show,\" Tracie said.\n\nA few more minutes passed as Kiera slowly rode me. Raising her hands above her head she pressed against the roof to push down against me forcing herself deeper on my dick. Tracie reached over and fondled a breast making Kiera gasp and start pumping faster. Caught up in her excitement we both reached our peak quickly. Faster and faster Kiera rode me and she closed her eyes as she let out a cry and I felt her clamp down on me making me orgasm right behind her. We both pushed against each other as I unleashed into her. My hands gripped her hips using all my strength to keep her down and impaled on my length. \n\nOpening her eyes, she looked at Tracie.\n\n\"You're next,\" she said.\n\n\"With him or you?\" she asked.\n\nShrugging, \"Both.\"\n\n\"Sounds fun, but let's eat first.\"\n\n\"Right, I'm starving,\" Kiera said. She pulled off me and opened the door, getting out she straightened herself as I fixed my clothes. \n\nI looked at Tracie as I buttoned my jeans, she winked as she watched me straighten up.\n\n\"Nice,\" she said.\n\nI smirked, \"Behave.\"\n\n\"As long as I get my turn later,\" she replied.\n\nWe got out and I locked the doors, Kiera went over and slipped her arm in Tracie's and they walked toward the restaurant. I followed behind them a small distance. \n\nKiera once looked over her shoulder and leaned in to Tracie while whispering. Both girls giggled and looked back at me. \n\nI eyed Tracie, she was wearing tight blue jeans that she filled out nicely with a cream-colored crossover blouse and black cowgirl boots. \n\nWe got inside and were escorted to our booth. I loved the ambiance. Candlelight bulbs gave the area a soft muted glow and white tablecloths with contrasting black cloth napkins decorated each table. After looking at the menu, we ordered our meals with some dinner drinks. I loved sex with girls that were buzzed, they tended to be wild, as long as you didn't let them get too drunk and pass out. \n\nA minute later the waiter brought me a double crown and coke and the girls peach martinis.\n\nAfter he left, Kiera took a sip of her cocktail and smiled at Tracie, \"So what's the plan tonight?\"\n\n\"You tell me,\" Tracie replied.\n\n\"Have you been with another woman?\"\n\nTracie shook her head no.\n\n\"Ever had a threesome?\n\nAgain, she shook her head.\n\n\"Anything in particular you'd like to try?\"\n\nTracie opened her mouth and paused, taking her mixed drink she took a swallow then looked at us.\n\n\"I'd... I'd like to experience a girl,\" she said hesitantly.\n\n\"Experience?\" Kiera asked.\n\n\"Like you know, have her go down on me.\"\n\nKiera eyed her and asked, \"Would you like me to go down on you?\" \n\nTracie lowered her eyes and shyly nodded yes.\n\n\"Would you like to return the favor?\" \n\nTracie blushed red and nodded again.\n\n\"Well, you know my man here is into the tying us down thing. You good with that?\"\n\n\"The tattoo was my first experience, but I liked it. I kind of wish he'd kept me tied when we messed around.\"\n\n\"Now you tell me that,\" I said.\n\nThe girls giggled.\n\n\"I guess that settles the agenda for tonight,\" Kiera said.\n\n\"You make it sound so sexy,\" I joked.\n\n\"I know, let's see if we can lighten the mood.\"\n\nShe took her wine glass and looked around, quickly she downed the whole glass and set it down. Then she ducked her head and slid off the seat and under the table. She'd sat on the inside of me and with my body, the tablecloth and the darkness I was sure she was concealed. Suddenly Tracie's eyes went wide.\n\n\"Oh my god.\"\n\n\"What?\" I asked.\n\n\"She just took my boots off,\" Tracie whispered.\n\nTracie took another sip.\n\n\"She just unzipped my pants. Oh my god, we are not doing this here,\" Tracie hissed.\n\n\"Apparently you are,\" I said. \"I do like the play-by-play, don't stop.\"\n\nHer nostrils flared and she glanced around, she shifted the tablecloth and scooted forward.\n\nHer eyes met mine and her mouth fluttered open and closed, \"She's unzipping my jeans, her fingers are tracing my panties.\"\n\nA small whimper escaped her lips, \"She's tugging the sides of my pants and pulling them down.\"\n\nTracie focused and shifted, then went back to a glazed look, \"She just pulled them below my ass... they're at me knees... ankles... Jesus Christ, I'm not wearing any pants now.\"\n\nI glanced around, nobody had noticed our exchange or if they did, they were pretending to ignore us. \n\nTracie's eyes went wide, \"She's grabbing my panties now!\"\n\nTracie whined and wiggled, \"God, we really can't do this here.\"\n\n\"Why not?\" I asked.\n\nBiting her lip, she looked at me, \"I get kind of loud when I get oral.\"\n\nI raised an eyebrow, she moved a hand to below the table, \"Uh uh, keep your hands above the table please.\"\n\nWith a frustrated glare she did as she was told, \"But I'm telling you,\" she whined.\n\n\"I suggest you keep as quiet as possible.\"\n\nContinuing her narration, \"I'm trying to keep my legs apart so she can't get my panties but she just wrapped her arms around my legs and locked them together.\"\n\n\"She has my panties over my hips, now they're below my ass.\" Gritting her teeth, she whispered, \"I'm clenching my legs, she's not getting them without a fight.\"\n\n\"OH FUCK,\" she yelped.\n\nLooking around we checked to see if anybody heard her outburst. A few people nearby looked in our direction for a quick second but a reassuring smile had them turn around and ignoring us in seconds.\n\n\"Little bitch,\" Tracie whispered. \"Slipped a finger inside me and startled me so much I spread my legs, she was able to get my panties off before I could stop her.\"\n\nA hand moved to my lap, I reached down and felt smooth fabric pressed into my hand. I pulled it back up and held a tiny black silk g-string panty.\n\nTracie gasped as I dangled them above the table. She started to reach for them when her body jerked and her eyes went wide again.\n\n\"God damn,\" she whispered, her hands gripping the table, \"Damn, damn, damn, she just spread my legs very wide and pulled my ass to the edge of the seat.\"\n\nNow she looked forward as if staring at a point in the distance.\n\nA low moan came out, she took deep breaths with little whimpers. At that moment our waiter came to check on us. I smiled and asked for another round of drinks. While we were talking Tracie gave a small whimper. \n\n\"Everything okay babe? You need anything else?\" I asked.\n\nShe bit her lip and glared at me while shaking her head.\n\n\"Thank you,\" I said to the waiter nodding him away.\n\nTracie groaned, \"You bastard,\" she hissed. \"Oh... oh.\"\n\nThe next few minutes Tracie stayed gripping the table with her faraway look. She alternated between biting her lip and small whimpers and moans. Her willpower seemed especially strained as our waiter brought fresh drinks and she closed her eyes and breathed heavily through her nose. As soon as he left, she let out a moan that had me looking around to see if she'd been heard.\n\nOne man paused as he watched us, a frown crossed his face followed by a smile. I watched his eyes flick to the empty place setting and the extra drink before a small smile crossed his lips and he went back to his own meal.\n\nI looked down, \"This needs to hurry before our meal starts,\" I said to the table. I felt a small tap on my knee in acknowledgement.\n\nTracie gasped and her body went tense. Wild eyed she tilted her head back. This time when she whined it was barely audible but it didn't stop, her body shook. Finally, she deflated and her head dropped. She looked up at me with a glazed expression. \n\nKiera subtly shifted and I tapped her to indicate the coast was clear. She slid back into her seat and straightened herself. When I looked around, I noticed the man from earlier looking toward us. His smile turned to a smirk and he tilted his head at me. I nodded back and he went back to his dinner. \n\nTracie roused herself and in perfect timing our waiter came out. He placed our dishes and checked if we needed anything then left.\n\n\"How am I supposed to get my pants back on?\" Tracie whispered.\n\nWhen we finally left the restaurant both girls were on either arm with their heads leaning on my shoulders. Tracie had managed to get dressed but I'd kept her underwear. The ride home was uneventful, both girls got in the back seat and were quietly making out and whispering the whole way home. \n\nOnce home, Kiera led Tracie to my room. They slowly undressed one another while I watched. As they stood naked Tracie wrapped her arms around Kiera and they kissed. Kiera put her hands on Tracie's ass and gripped hard, pressing them together as Tracie let out a slow growl into their kiss.",
        "Kiera's hands roamed up and down Tracie's body, cupping her breasts, lightly pinching her nipples, running her hands up and down Tracie's sides. When they finally broke the kiss, Kiera guided Tracie to the bed and placed her in the center, on her knees. \n\nTaking a position beside her, Kiera motioned me forward. I stood at the edge of the bed and Kiera pulled my shirt over my head as Tracie unbuttoned my pants. After Kiera tossed my shirt in the corner, she helped Tracie tug my pants down past my knees. Then they each grabbed a side of my black briefs and pulled them down.\n\nMy cock sprang free, thick and erect from the attention of both of these beautiful girls. They smiled at each other, then Kiera held the base of my shaft and they both started planting kisses along my length. \n\nIt was mesmerizing, watching both girls use their tongues to lick my dick. Kiera alternated between licking and kissing my shaft but Tracie just used her tongue to trace the length back and forth. Finally, Tracie took the head in her mouth and swirled her tongue around the tip. Teasingly, playfully, she circled the head of my cock as Kiera licked up and down. Tracie slowly pushed down on me as Kiera pulled back and watched me. When she finally had me all in her mouth, she pulled back then started to work me. Up and down she bobbed, sometimes languorously slow, sometimes in a burst of speed that stole my breath. Her eyes looked up now and again as I grunted and groaned. She pulled off with a smile and Kiera immediately replace her. \n\nThey took turns after that, every few minutes they would trade off. Each was perfect in her own way. Tracie was all energy, using her mouth to work my dick. Kiera was more sensual, she used her mouth, tongue and hands to tease, caress, and lick me. Her fingers circled my shaft and made twirling motions, she'd pull off and rub her cheeks and lips with my tip, licking the head.\n\nAfter a while, but still too soon for me, I felt myself build to climax. I grunted and let Tracie know I was about to cum. She pulled off and Kiera swooped in and took me in her mouth. She stayed sucking as I burst and sent my load down her throat. \n\nAfterward I finished taking off my clothes and lay down on the bed to recover while the girls moved to the side of me. \n\nThis time Tracie took control and pushed Kiera to her back and then spread her legs apart. Kiera raised an eyebrow and Tracie gave her a wicked grin. \n\n\"My turn,\" Tracie said.\n\nI rolled to Kiera's side and began to run my fingers around her body. Tracie leaned forward until her lips were just inches from her pussy. Tracie's small pink tongue darted out and tentatively she gave Kiera a small lick. Kiera closed her eyes and moaned encouragement. That was all Tracie needed. She stuck her tongue out and licked the lips of Kiera's pussy. Up and down she ran her tongue, just like she did on me. Using the same energy and enthusiasm. Kiera was loving it. She started moaning and biting her lip as she ran her hands next to mine up and down her sides, thighs, cupping her tits. Tracie must've hit the right spot because Kiera stiffened then grabbed the sheets and raised her head.\n\n\"Oh god, oh god,\" she cried.\n\nShe started to close her legs but I grabbed a knee and pinned it while Tracie used her hands to pin her other knee down. This sent Kiera over the edge and her cries became louder and she bucked her hips. I bent forward and kissed her and her tongue attacked mine, her moans while kissing me were exciting. Her body started moving more and more so I slipped a hand behind her neck and cupped her to me, refusing to break the kiss. She began to thrash and try to move her hips more and more but Tracie and I worked together to keep her pinned. Finally, she cried out, locked her arms around me then went stiff, small shudders racked through her and her moans slowly died.\n\nTracie and I leaned back while Kiera lay there, chest heaving, looking back and forth at us. I pinched a crinkled nipple and she slightly turned her head toward me.\n\n\"That was awesome,\" she panted.\n\nWe lay together slowly running our hands over each other's body. We'd all had an orgasm so now we took our time. Eventually they moved to either side of me. Tracie slid over me and straddled my legs. I ran my hands over her smooth skin. Caressing her tits, cupping them, using my thumbs to tease her light brown nipples. She closed her eyes and sighed then shifted closer to my lap. Kiera got to her knees and reached a hand into Tracie's hair and tugged it back. Tracie let out a small hiss as her hair was pulled and her head forcibly tilted to Kiera. Once their lips were almost touching Kiera's tongue darted out and touched Tracie's lips, moving over them. Tracie whimpered and Kiera covered her mouth with hers.\n\nI reached a hand over and felt Kiera's tits. Her nipples were still hard from excitement and I teasingly pinched one making her squeak into their kiss. Tracie shifted further forward until she was resting on my shaft. Kiera shifted and used her legs to straddle my head. Reaching down, Kiera shifted my dick and Tracie rose up, she held me in place as Tracie lowered herself onto my shaft. Taking a moment, she shifted and seated herself with my full length inside her. Kiera gently lowered herself until her pussy was just grazing my lips. I reached my hands around and cupped her tight ass. She flexed her muscles as my fingers grabbed her and held her tight. \n\nSlowly each of us began to move, I lifted my tongue and licked Kiera. Tracie used her knees to slowly raise and lower herself on me. Kiera shifted slightly back and forth so that my tongue could go up and down the full length of her slit. Gaining momentum, we each worked on each other. The girls never stopped kissing but soon I heard moans coming from both of them. I moved my hands back and forth, cupping Kiera's ass, then grabbing Tracie's butt and squeezing. I held tight and used all my strength to control each one's speed when I held them. Soon though, no amount of control was enough to hold either one back. I squeezed Tracie's ass and held her tight as he bounced up and down crying out as she kissed Kiera. Switching I gripped Kiera's ass to the same affect. She was rapidly moving back and forth and pressing her pussy into my face, forcing my tongue deeper inside her. Both girls broke and were crying out now. I could barely concentrate on my own satisfaction as each girl used me to pleasure herself. As one, they both screamed and convulsed. They both clamped down with their legs as tremors ran through their bodies from orgasm. I continued pumping and licking and soon both girls began to move. They were both spent but sensed I was on the edge so they each gave a burst and I smacked Kiera on the ass as hard as I could then grabbed Tracie as I let myself go. Tracie cried out as I came and grabbed Kiera's face with both hands and kissed her while I unleashed and Kiera moved off me.\n\nWhen we finished, we collapsed next to each other. Each girl went to one side of me and snuggled into my chest. \n\nThe rest of the weekend was spent enjoying each other every way possible. We took showers together, the girls made out, I tied them up and took pictures of them naked and running around my house with each other. \n\nI introduced Tracie to Belle and she fell in love. We watched movies and ordered in or cooked. We never left my house until Sunday evening. We all said our goodbyes but Kiera promised to be back in a few weeks to finish her court dates. \n\n*****\n\nI'd finished giving a gorgeous Asian girl a discounted tattoo when a couple walked in. \n\nSimonette was standing next to me nude with a pink ballgag in her mouth. I reached up to undo the straps and she admired her new cherry tree on her thigh. Since I'd started receiving multiple requests for my sexy, hot, crazy girl discount I'd invested in some better restraints. I had leather cuffs for ankles, wrists, and thighs, with red silk rope to secure them in different positions as the need arose. I'd even had cuffs made special order made that could pin the shoulders down to my chair. I also had a bright pink ballgag with leather straps that I cleaned each time and a black silk blindfold for special occasions. \n\n\"Damn, I guess it's true,\" the male said. \n\nI looked up at the couple. They both looked late twenties. He was white, medium height and build with blonde hair, she was as tall as him, curvy with red hair. Both were dressed in blue jeans and t-shirts. \n\nThey walked straight up to me and he reached out a hand. I shook it and finished slipping the gag out of Simonette's mouth. She reached up and kissed me on the cheek.\n\n\"Thank you,\" she whispered. \n\nWalking away she stopped to pick up her clothes before going to the bathroom to dress. We all watched her cute little ass as she closed the door.\n\nClearing my throat, \"So what can I do for you?\"\n\n\"I'm James, this is my girl Terri. We're looking to see about the sexy girl discount.\"\n\nI turned to Terri, \"What do you want done?\"\n\n\"Actually, I want an American flag on my upper arm,\" James said.\n\n\"Uhhh, sorry, I'm not really into that thing. I don't give guy discounts.\"\n\n\"But would you let me get the tattoo while she paid the price?\" he asked.\n\nI stopped and stared at him for a second speechless. At that moment Simonette walked out of the bathroom and came over.\n\n\"Doesn't that sound interesting,\" she said, with a smile she lifted her phone and typed a few buttons. My phone buzzed and I looked over at it. \n\nI could read the message from where I stood, \"Text me.\" was all it said. I looked at her and nodded as she walked away.\n\nI took a seat after she left, \"Let me get this straight, she pays the 'discount,' but you get the tattoo?\"\n\n\"It's my birthday present to him. It's kind of a twofer.\"\n\nI looked at James and he grinned with a shrug. I gathered he wanted to show off his girl a little. I wasn't going to judge, I was into the same thing myself, so I understood his desire.\n\n\"Just so you know I don't close shop. I take pictures for my wall. You can see by the angles that they are hard to recognize through a casual look but nothing is blanked out. Somebody might know you.\"\n\nThey both looked at the multiple images I'd had enlarged and made into posters. Each image clearly showed a naked, bound girl and all of her assets, everything was on display. After a minute they looked at each other and nodded. Then James looked at me. \n\n\"Let's do it,\" he said.\n\n\"Okay,\" I shrugged, I didn't have a legitimate reason not to. \n\nWe talked about the details and as usual I did some computer work and we finally agreed on the placement and image to tattoo.\n\nI set up my equipment and stopped. We both looked at Terri.\n\n\"Am I doing this, or are you?\" I said to James, gesturing to the restraints.\n\n\"You're the expert.\"\n\nI looked at Traci, \"You need to undress please.\"\n\nTerri nodded, then sat on the chair and took her black sandals off. Standing up she unbuttoned her jeans and pulled them to her ankles before kicking them off. Next, she pulled her top over her head and tossed it on the counter. She wasn't wearing a bra so the only thing left was the pink cotton boy short panties she wore. Without hesitation those came off and she sat back on the chair.\n\nI quickly tied her arms above her head and spread her feet to either side locking her in place. She was strangely quiet throughout the ordeal and I wondered if she was bothered. Then I looked down and saw her sex glistening. She was smooth waxed and it was obvious she was turned on. She had C cup tits with cute brown nipples that were stiff and her eyes practically begged for attention as she pushed her chest out. I slid the gag between her lips and she winked at me. As I let my arm drop, I brushed her nipple and she groaned.\n\n\"It is a gift for me, but don't let her kid you. She's been looking forward to this,\" James said.\n\nI took pictures like I always did and Terri got into it like all the other girls. Twisting her body to show off for the camera. This was a quick job, maybe three and a half hours. The whole time James and I talked and laughed and watched Terri. \n\nWhile talking James told me she was ticklish so I occasionally reached out a finger to run across her ribs or thighs. She always whined into the gag and squirmed but her eyes lit up. I even gave her nipples a light pinch once and she threw her head back and groaned making James laugh. He took out his own camera phone and took a couple of pictures of me with Terri, even having me cup her breast for one and kiss the tops of her boobs for another. \n\nWe took a break midway and James went to the bathroom.\n\n\"You okay,\" I asked Terri.\n\nShe nodded.\n\n\"You don't need anything?\"\n\nShe shook her head.\n\nJames came back out and we continued. \n\nTwenty minutes later.\n\nDing, ding.\n\nI looked over and saw Terri's eyes go wide. This was a common reaction from all my discount girls. I saw her steel herself and even shift to show off her body better.\n\nThey were all like clockwork, frightened and thrilled at the same time.\n\n\"Damn Terri, I didn't think you'd actually do it.\"\n\nHer head snapped over and she saw three men walking toward us, one held a twelve pack of Corona bottles. James laughed and high-fived everybody as they came next to us. \n\n\"Couldn't help but text the boys as I was in the bathroom,\" James said to Terri sheepishly.\n\nI watched Terri closely, her body flushed red from her cheeks to her tits but her nipples got even harder. I could tell she was embarrassed and thrilled at the same time. These were their friends and now they were seeing her in the most compromising situation imaginable. She glanced back and forth at the three men standing above her and I noticed the slight shift that pushed her chest out as well as the movement that spread her legs a little more.\n\nI chuckled inwardly and went back to work. I looked at James eyes and I had no doubt he was enjoying this as much as everybody else. \n\n\"Can we drink?\" one of the guys asked.\n\nI shrugged, \"As long as James here doesn't, but if you act stupid, I'll kick you out.\"\n\nThey nodded and grabbed some chairs, Terri whimpered and shook her head. I stopped and pulled her gag out.\n\n\"Can I have a drink too?\"\n\n\"Sure, but I'm not untying you.\"\n\n\"That's fine,\" she said.\n\nShe got one of the guys to hold a bottle to her lips and she downed the whole thing as they cheered her.\n\nThe last hour went by fast, I had a few people come in and watch. The guys made sure to step back each time so that she was seen in full by each person. She managed to drink two more beers they held to her lips.\n\nAs I was working the friend on either side of her started tracing their fingers across her body. She didn't say anything so I ignored it. Soon they were cupping her tits and teasing her nipples. I raised an eyebrow but James watched and Terri began to breathe hard and sigh as they played with her body. \n\nNobody got out of hand and they relaxed and joked as I worked. I didn't regag her but at the end James and all his friends posed for a selfie with her. I made sure her entire body was in the picture.\n\nAs I put away my gear one of them kissed her while she was still tied, he teased her nipples as she moaned into the kiss. After he let up, another one bent over and kissed her, she kissed back as his hand moved to her pussy and stroked her. When he broke, she looked at the last one. His kiss was the longest and he pinched her nipples lightly as she whimpered and squirmed. When she finally broke away, she was breathless as she looked at James.\n\n\"Remember that thing we talked about?\" he said.\n\nSwallowing, she looked around at each of his friends then nodded. Her eyes flicked toward me, James looked at me and smiled questioningly.\n\n\"My girl doesn't like me doing this without her,\" I said. Which wasn't quite a lie. I'd let Kiera know that I wasn't seeing anybody and she agreed to the same. She didn't mind the discount tattoos as long as I told her everything.\n\n\"I totally get it,\" he said.\n\nI untied her and Terri moved to me and gave me a quick kiss on the lips, \"You're a doll.\"\n\nA minute later they gathered her clothes and left, Terri was naked as the five of them walked to their cars. I'm sure they planned on having an \"interesting\" night.\n\nAfter I cleaned up and closed the shop, I called Kiera and told her everything.\n\n\"Oh my god, really? All four of them, and they wanted you too?\"\n\n\"Yep,\" I replied.\n\n\"That's so hot. And I'd love an Asian girl. Is she sexy?\"\n\n\"Check the pics I sent you.\"\n\nA few seconds went by, \"Oh my god, she's gorgeous. I want her.\"\n\nI laughed, \"Really?\"\n\n\"Yes. I also admit to being a little jealous of Terri.\"\n\n\"Really?\" I asked again. \n\n\"That girl is probably having the night of her life.\"\n\nI laughed.\n\n\"But I'm glad you aren't part of it,\" she said. \n\n\"You mean that?\" I asked.\n\n\"Yes,\" she whispered. \n\nWe stayed silent for a long time after that, listening to each other breathing. \n\n*****\n\nDing, ding.\n\nI looked up in excitement. Kiera was supposed to meet me at the shop today. She said she had something important to discuss. She smiled as she saw me and I stood up. Her hair was done in classy ringlets that fell free around her and she was wearing what looked like a white oversized cashmere sweater and fishnet stockings with black ankle boots. \n\nI moved to hug her and she wrapped her arms around my neck and kissed me. She tasted like cinnamon and I lost myself to her tongue and lips as she moaned into our kiss. I slid a hand up her thigh under her sweater and found only bare skin as I grabbed her ass. She kissed me for minutes and when she broke, she dropped a hand and grabbed my butt.\n\n\"Mine,\" she growled.\n\nI closed my shop and took her to dinner at a nearby seafood restaurant. We shared a bottle of wine and some shrimp alfredo pasta with freshly made bread. We caught up on each other's lives while we ate. Toward the end I asked her about the important news she'd wanted to talk about.\n\n\"I started a web page. Right now, it's an Instagram page, but I've made contact and sent some selfies and suicide girls wanted to post a couple of sets to their page.\"\n\n\"Really, that's the playboy for tattooed and alternate girls, right?\"\n\n\"Yeah, I've already got a lot of fans on my fitness page, twenty-five thousand so far. I get lots of requests for me to start an only fans page and I might but I want to get a few shoots done so I have something to post.\"\n\n\"Sounds cool, how am I involved?\"\n\n\"I want to do a photo shoot of me getting a tattoo naked.\"\n\nI nodded my head, \"That's hot. I get it. That would be a cool theme.\"\n\n\"Right! We could do it just like last time but not tied. Just regular, with me getting a tattoo completely naked.\"\n\n\"As a guy, I can tell you, that customers in the background would be hot.\"\n\n\"I think so too. That's just what I want.\"\n\n\"Let's do it. What do you want?\"\n\nHer eyes twinkled and she leaned closer, \"I was thinking a ballgag and a pair of handcuffs on my lower back.\"\n\nI eyed her, \"Really?\"\n\n\"It's kind of a thing for me now.\"\n\nI swallowed, \"You know if you keep this up, I'm going to...\" I paused. I took on a serious look as she watched me. This was stupid, she just got out of a bad marriage. Talking of love or anything like that was insane.\n\nShe reached out and grabbed my hand, \"Say it,\" she whispered.\n\nI looked into her eyes and swallowed, barely breathing I looked down, \"Fall in love.\"\n\nShe reached forward and grabbed my chin, tilting my head up she bent forward and kissed me softly on the lips.\n\nWhen we broke, she breathed into my ear, \"Good, I'd hate to be the only one.\"\n\nI took her back to my house and we spent the night making love. No bondage, no pictures, just the two of in tender passion. \n\nThe first time we undressed and she pushed me back onto the bed. She straddled my legs and we kissed passionately. She pushed back and shifted her body until she impaled herself on me. Then she slowly rode me while moving her hands up and down her body. It was the most sensuous thing I'd ever seen her do. ",
        "We came together multiple times before we both crashed from exhaustion. In the morning I woke her by spooning her from the side and gently caressing her body. Her moans turned to whimpers as I covered her lips with mine and put my hands between her legs. I kept my pressure slow and steady as she writhed in enjoyment. Soon she cried out as I brought her to climax while kissing her. \n\nThe next few weeks flew by. I gave her the tattoo she wanted and we took pictures like planned. By this time my shop had a reputation and she went viral on her web page that day gaining a few thousand followers. She posted some pictures with parts blocked out for Instagram but submitted the whole set to Suicide Girls. A week later she was notified that it was accepted and to create a link on her page to gain followers. She would be paid by the number of followers and downloads. \n\nOur relationship was growing. We texted every day and now one of us went to visit the other almost every weekend. One weekend we both got caught up with business and weren't supposed to see each other until Saturday. Friday, I decided to plan a surprise visit and finished my work early. I drove to her city and got a hotel that faced her apartments then texted her.\n\nMe: What you doing?\n\nKiera: Waiting to see you tomorrow.\n\nMe: Want to have some fun?\n\nKiera: Uh oh, I know you, fun is dangerous for me.\n\nMe: Lol, you know me too well.\n\nKiera: So what crazy idea do you have for me?\n\nMe: What you wearing?\n\nKiera: T-shirt and panties.\n\nMe: Describe please.\n\nKiera: My black tank top with the Wonder Woman logo and the sheer red lace g-string panty you bought me last time we went to the mall.\n\nOh damn, I loved that thing. It was sexy as hell and left very little to the imagination.\n\nMe: Are your curtains open?\n\nKiera: Lol, I knew it. You're going to show me off again. \n\nWe'd played a few other times besides the tattoo incidents. She knew I liked her to wear skirts or winter dresses and flash me when we were in public. Most of the time we'd gotten away with it. A quick flash when people were looking in the other direction or not paying attention. We'd been caught a few times and she'd always blushed red when they saw, but afterward she was always ready for sex and came quickly. I knew she got as much a thrill of showing off as I did having her do it. \n\nMe: Turn on your lights, I want your living room to be bright and open the curtains.\n\nI watched from the hotel room to see if she'd follow my orders. Her apartment faced my hotel with a freeway in between them. She was on the third floor and depending how close she was to her front window could be seen by cars or anybody in the hotel.\n\nI'd purchased a camera with a telephoto lens. When I looked through it, I was able to see her as if I stood in her room. I watched as she did what I told her and grabbed her phone. \n\nKiera: Done you pervert.\n\nMe: Lol. You love it.\n\nKiera: I do.\n\nMe: Now dance in front of the window.\n\nI wondered if she'd listen to me or just pretend. Looking through the lens I watched her come toward the window spend a few minutes putting on a little dance. I snapped a few pictures and checked my iPhone. I had a special video card that could download all the pictures wirelessly to my phone as I took them.\n\nShe moved back to her phone and took a few selfies then my phone buzzed.\n\nKiera: There, I just put on a show for the neighbors. \n\nAfter the text were a couple of the pics she just took.\n\nMe: Now take off your shirt and do it.\n\nKiera: God you're crazy. You do remember I'm next to a freeway, right? I could cause a wreck.\n\nMe: Lol. I'm sure you won't cause a wreck.\n\nShe took off her shirt and held up her phone for another selfie then walked to the window again. This time she put on a little bit of a tease as she grabbed her tits and turned around showing her thonged ass.\n\nI snapped more pictures and waited for her to finish.\n\nKiera: God this is making me horny. I can't wait to see you.\n\nMe: Oh yeah, how horny?\n\nKiera: I'm going to suck your dick like I'm trying to take your soul! \n\nKiera: That horny.\n\nMe: Dear freaking lord! Anything else I should know.\n\nKiera: I want a spanking!\n\nMe: No way.\n\nKiera: I'm not playing.\n\nMe: I believe you. \n\nMe: With my hand or something else?\n\nKiera: Hand, definitely your hand. I want to feel it as you smack my ass.\n\nMe: I can do that. How hard?\n\nKiera: Until my ass is red. Then fuck me doggy style.\n\nMe: Christ, now I'm horny as fuck.\n\nKiera: Lol.\n\nMe: Take off your panties and dance at the window.\n\nKiera: Lol. \n\nKiera: You're so bad.\n\nShe slipped off her underwear and walked to stand in front of the window. Gyrating her hips, she put on a show for anybody that might be watching. I snapped picture after picture as she showed off her body. When she turned to put her ass toward the window she reached back and smacked her butt a few times.\n\nMe: You are so hot.\n\nShe looked down at her phone.\n\nKiera: I wish you could see me.\n\nMe: Soon baby, soon.\n\nKiera: I want to make a video of me sucking your dick like a porn star.\n\nMe: I'll buy a tripod for the camera.\n\nKiera: Fuck that! Have one of your friends watch, he can hold the camera. \n\nMe: You'd do that?\n\nKiera: For you. Always and only for you.\n\nDamn, I was really falling for this girl. \n\nMe: You are the best thing that has ever happened to me.\n\nMe: Can't wait to see you.\n\nKiera: I know, I feel the same. God, I'm so horny. I'm going to use my vibrator. I'm going to sit in front of my window with my legs spread wide and use my vibrator and imagine it's you fucking me.\n\nMe: Now that will cause an accident.\n\nMe: Lol.\n\nKiera: I don't care.\n\nKiera: Call me, I want you to hear me moan and call out your name as I fuck myself.\n\nI dialed her number and she immediately answered. \n\n\"I want to fuck you so bad,\" she said.\n\n\"Me too.\"\n\n\"God, I'd do anything to fuck you right now.\"\n\n\"Anything?\" I asked.\n\n\"Anything,\" she said.\n\n\"Remember you said that,\" I said. \"Are you in front of the window?\"\n\n\"Just like you wanted.\"\n\n\"So start.\"\n\nShe put the phone down and I heard the faint buzz of her vibrator. I looked through my camera as she lay back on the couch spread her legs wide. She was close enough to the window that she would be able to be seen by most people if they were looking. I got hard as she moaned and I watched while she used the vibrator to pleasure herself.\n\nShe put the phone on her stomach so I could hear the vibrations and her cries.\n\n\"God baby, I want you inside me.\"\n\n\"Fuck me baby.\"\n\n\"My pussy is yours baby, all yours, do what you want with it.\"\n\nI was rock hard from the show she was putting on for me. She moved her toy up and down and slid it inside her as she panted and cried out. One hand came above her head and gripped the couch as she spread her legs wider. She stopped talking and just panted and moaned. \n\nIn no time she screamed, \"I'm going to cum.\"\n\nI kept taking pictures as I saw her toes curl and her head thrown back.\n\nI called out on the phone and she picked it up, \"I swear to god you're the sexiest woman I know.\"\n\n\"I miss you so much baby,\" she said.\n\nWhile I was talking, I tapped a few pictures and sent them to her. One had her facing the window in her panties. The second had her ass toward the window while she smacked her own butt. The third showed her on the couch legs spread with the vibrator.\n\nI waited in anticipation as she checked her phone and saw the pictures. Her eyes went wide and she looked out her window. I reached over and flicked my room light on and off a few times.\n\n\"Oh my fucking god, are you fucking kidding me?\" she cried out.\n\nLaughing I said, \"Nope, just waiting for you to get over here so I can fuck you.\"\n\n\"Oh you bastard,\" she said. \"You had me all worked up and you're here. \n\n\"Get your ass over here and fuck me,\" she said.\n\n\"Nope, you're going to come to me. I have the room for the weekend.\"\n\n\"Fine, give me five minutes to pack and I'll be right over.\"\n\n\"No again, come as you are, now!\" I ordered.\n\n\"What?\" she murmured.\n\n\"You heard me, no getting dressed. Get in your car and get over here. Go to the front desk and ask for my room. I'll call and tell them to expect you.\"\n\n\"I can't come like this.\"\n\n\"Why not?\" I asked.\n\n\"I'm fucking naked!\"\n\n\"Exactly. It's late at night, only the front desk guy will see you. At most one or two others.\"\n\n\"God, you're so bad.\"\n\n\"You just said you'd do anything to fuck me. This is my price.\" \n\n\"Fine,\" she growled.\n\nShe hung up and I watched as she went to her bedroom and came out wearing a pair of black heels. She grabbed her keys and peeked out her door, when she saw the coast was clear she ran to her car and got in. I called the front desk.\n\n\"Front desk,\" came the male voice.\n\n\"I have a guest coming over, could you direct her to my room?\"\n\n\"Certainly sir, what is your guest's name.\"\n\n\"You won't need her name, trust me, you'll know exactly who she is.\"\n\nA small pause and uncertainty entered his voice, \"Very well sir, I'll give her a key, room 417 correct?\"\n\n\"Yes please, and thank you.\"\n\nI watched her car make its way to the hotel parking lot. It was after 10 o'clock so I hoped there wouldn't be too many people in the lobby. I liked these games and an occasional getting caught was cool, but I didn't want her to walk through a crowded hotel either.\n\nA few minutes passed and the door to my room opened.\n\nKiera walked in stark naked and shaking her head, \"You are so fucking bad. I thought the front desk clerk was going to have a heart attack and while I was waiting for the elevator some college kid came in. Pretty sure he forgot where he was going because he hit the second-floor button as I was getting off.\"\n\nLaughing I moved to embrace her and we kissed. She tasted like strawberries and smelled like an incongruous mixture of night blooming flowers and musk.\n\n\"I love you,\" I whispered after we broke.\n\nShe looked at me in shock, then a grin broke across her face.\n\n\"Baby, talk like that is going to get you in trouble.\"\n\nShe pushed me back to the bed until I fell onto the mattress. Then she unbuttoned my pants and pulled them down, stepping back she took a small hair band on her wrist off and wrapped her hair in a ponytail. \n\nI swallowed as her eyes narrowed and she gave me a smirk, \"I told you I'm going to take your soul.\"\n\nShe dropped to her knees and without any preamble started deep throating me. The next twenty minutes was a battle as I alternated between gripping the sheets and her hair. We moved all over the bed as she used every trick in the book to get me off. I was sweating and grunting as she cupped my balls, licked and sucked my cock like it was her only job in the world. We wrestled as I pumped into her mouth and at the end, I came harder than I ever had before in my life. She sucked me as I unloaded into her.\n\n\"Jesus fucking Christ,\" I yelled as she wrapped her hands around me refusing to let go as I pumped my load past her lips. \n\nShe'd flipped so I could grab her ass and play with her pussy while she sucked me. As I lay there panting, she finally pulled off me and rolled back. Her legs were next to my head and we just looked at each other while I tried to recover.\n\n\"For the record, that kind of action will get a ring on your finger.\"\n\nOnce again, she grinned then winked, \"Promises, promises.\"\n\nShaking my head, I looked at her pussy so close to my face. She'd waxed smooth for me this week and the sight of her glistening sex was already getting me hard again.\n\nReaching out I grabbed a leg and pulled her to me.\n\nI looked into her eyes as I moved closer to her pussy, \"My turn.\"\n\nI am proud to say I returned the favor in kind. I wrestled with her all over the bed as I licked her pussy. She screamed, moaned, and cried out while I used my tongue on her, thrusting inside and licking her as her hips pumped against my face. Once I pinned her hands she thrashed and wrapped her legs around my head and refused to let go. I had to use all my strength to pin her to the bed as her orgasm hit and she cried out. It lasted more than a minute as her body shook and she bucked uncontrollably.\n\nWhen she finally recovered, \"It's so on.\"\n\nWe spent the night having raw, energetic, wild sex. \n\nAfter I recovered, I wrestled with her on the bed, she put up a struggle but I managed to pin her down with her hands behind her, ass up, and my legs trapping hers. I spanked her ass red as she growled and squirmed. Then took her doggy style while pulling her hair as she cussed at me in Spanish. The next session she rode me cowgirl while digging her nails into and biting my chest. \n\nBy the middle of the night I was covered in scratches and her ass was bright red. We lay panting, entwined in each and covered in sweat.\n\nWhen we woke up it was late morning. We cleaned up, then dropped back on the bed to decide our plans for the day.\n\n\"I want to see the pictures you took last night,\" she said.\n\n\"No problem, I figured you could use them for another set for your page.\"\n\n\"I'd like that,\" she said. \n\n\"Plus maybe we could add a few more.\"\n\n\"Oh yeah, what did you have in mind?\"\n\n\"Let's do some around the hotel,\" I said. \"People love public nudity.\"\n\nEyes bright she agreed, \"When?\"\n\n\"Now?\"\n\n\"Let me clean up really quick.\"\n\nShe borrowed my travel bag and brushed her hair and got ready.\n\nI dressed in jeans and t-shirt with a black leather coat. It wasn't cold enough for a coat but I wanted to have something to give Kiera just in case she needed to cover up. I eyed her naked form and watched her steel herself. I opened the door and we stepped into the hallway and went to the elevator, taking it down to the first floor before we walked to a pillar near the front dining room. She hid behind it and I took some photos with her facing me and the room in the background. A few tables had guests but they couldn't see her due to the pillar. She did some front and back shots when I heard the ding of the elevator and a guest stepped out.\n\nA young college kid stepped out and looked up at Kiera, \"Again?\"\n\nIt must've been the guy she rode the elevator with last night.\n\nShe laughed as he shook his head.\n\nI raised the camera and he jumped forward to get in the shot with her. He was smiling and his manner indicated a good humor about the whole scenario so I took a few shots of them together pointing out the people behind them. After that we snuck down the hallway to the indoor pool. \n\nOnce inside we took some more pics of her in and out of the water. After a minute the door opened and the college guy walked in.\n\n\"Thought I saw you guys go into here. Want a cool shot?\"\n\nWe each nodded.\n\n\"Most of the other patrons left except one younger couple. I told them there was a naked girl running around taking pictures and they laughed. When I asked, they said they wouldn't mind if she ate breakfast. If you hurry it would just be them and me.\"\n\nWe looked at each other and by unspoken consent got up to go. She grabbed a guest towel and dried off. I thought she might bring it as an emergency cover but when she finished drying, she dropped it in the nearby hamper. We walked back to the dining room and went to the complimentary bar. The couple that was there watched Kiera with grins as she smiled and waved. They nodded their heads and watched as she got a small plate of strawberries and an orange juice. She took a seat in the middle near them and college boy took one behind her. I stayed back and took multiple shots that showed the other people in the background as she ate breakfast naked. \n\nAfter breakfast we went drove around and I took her to a few fashionable boutiques in the area. It was still early and the stores hadn't opened yet so we were able to take pictures of her standing out on the street without too much trouble. The few times we got caught the people just smiled or laughed. A few even pulled out their phones to takes pictures of us. \n\nI finally drove her to a small upscale shop in the downtown area. I parked and we got out. A few people nearby noticed us but barely glanced in our direction. I walked to the front door and took out a key as Kiera followed. We stepped inside and she looked around.\n\n\"What's this?\" she asked.\n\nI swallowed and looked at her, \"Was thinking it might be my new studio.\"\n\nShe froze from wandering and looked back at me. Our eyes locked, I held my breath in anticipation. \n\n\"When would this happen?\" she asked nonchalantly.\n\n\"I was planning on doing it right after you finalize your court paperwork,\" I replied.\n\nShe nodded and circled me.\n\n\"Of course, I need to find a place to live. Know of any good apartments?\"\n\nShe looked at me from the corner of her eyes, \"I might know a good place,\" she said teasingly.\n\n\"Oh yeah?\"\n\n\"You'd have to put up with a roommate.\"\n\n\"Hmmm, any advice on that?\"\n\n\"Yeah, she likes to walk around naked. Plus, she's a little bit of a freak.\"\n\n\"Sound interesting.\"\n\n\"She doesn't like players or assholes though.\"\n\nI nodded, \"Me either.\"\n\nShe stopped and faced me, for long minutes neither of us said anything.\n\n\"Are you going to ask me to marry you or what?\"\n\nMy eyes went wide, I stuttered out a response, \"Uhmmm, uhhh, how did... I mean... I'm not sure.\"\n\nHer eyes twinkled, \"I saw the ring last week. Or do you have it for some other reason?\"\n\n\"Look, I didn't want to scare you. I mean you're not even finished with your divorce and we're still getting to know one another. Plus, I've never had any kind of long-term girlfriend before, so even though I bought the ring I was going to wait.\"\n\nShe eyed me for a while and I had just opened my mouth when she said, \"I don't understand it, but I feel more alive and love you more in such a short time than I ever did Chance. Do you love me?\"\n\nI swallowed, \"Yes,\" I nodded.\n\n\"I can't explain it, but I love you too.\"\n\nWe each digested those words.\n\n\"So ask me,\" she whispered. \n\n\"Will you marry me?\" I asked.\n\nEyes gleaming, she said, \"Yes, hell yes I'll marry you.\"\n\nWe moved together and wrapped our arms around each other. Bending down I kissed her as I pulled the ring out of my jacket pocket. \n\nI put the ring on her finger and she admired it.\n\nShe gave me a sideways glare, \"I love how you kept me naked as you ask me to marry you.\"\n\n\"I figured if you'd said no, I could kick you out and leave you on the street like that, then you'd have to agree to marry me before I let you back in,\" I joked.\n\nShe laughed, \"Hmmm, that sounds fun, maybe I should've said no.\"\n\n*****\n\nEpilogue: \n\n(Kiera)\n\n\"You're interested in the hot girl discount?\" I asked.\n\nThe cute blonde-haired girl with pigtails on the other side of the counter bit her lip and nodded at me. Jace was finishing a customer right now. \n\nI eyed her and came around the counter to stand in front of her.\n\n\"You nervous?\"\n\nShe nodded. \n\n\"It's easier if we go by stages.\"\n\nI reached over and tugged her shirt above her head then folded it and put it on the counter. Next, I unbuttoned her jeans and pulled them down. Dropping to a knee I took her sneakers off and finished taking her pants down. As I folded them, she blushed bright red to be standing in a matching blue and white lace thong and bra set with cute little white socks. Her name was Tiffany and she had large D tits with a fit body.\n\nJace finished the guy he was working on and I walked Tiffany towards them. The guy had a friend with him and all three watched Tiffany with a smile.\n\nShe ducked her head from embarrassment as I outlined the dolphin tattoo she wanted on her ankle. They chatted about placement and came to an agreement. Tiffany looked around at everyone and back at me. I wasn't asking them to leave, she had to get used to the idea if she really wanted to do this. We'd never had a back out and I'd been on display myself so I had no sympathy.",
        "Sheepishly she reached behind her and undid her bra then handed it to me. \n\nAs she paused before taking her panties off one of the guys asked jokingly, \"Need help?\"\n\nShe eyed him for a second then gave a quick nod. Surprise showed on his face but he quickly recovered and stepped forward pulling her panties down.\n\nI was impressed, she may be shy but she was having fun too.\n\nI helped her into the chair and Jace and I strapped her down.\n\n\"God, I can't believe I'm doing this,\" she whispered.\n\nI smiled and said, \"Trust me, I know just how you feel.\n\nWith those words I slipped the ballgag into her mouth and tightened the leather straps as she eyed me. I wasn't lying, I did feel for her but at the same time my ass had been in that chair naked so many times that if she couldn't handle the embarrassment, that was on her. \n\nHell, just the other week I'd been ballgagged and strapped down in a doggy style position as Jace gave me a new tattoo. I had a rose with a drop of blood dripping from a thorn on it, next to a pair of handcuffs and a ballgag, with the words, \"Submission is not Weakness\" underneath, I'd put it in the standard \"tramp stamp\" position. Halfway through my five-hour session a dozen guys had come in to watch their buddy get his first tattoo. My ass had been arched and my legs spread shoulder width, so that my pussy was on explicit display, of course they'd stayed for the entire time it took to finish. Talk about an embarrassing position. \n\nIf I could deal with it, so could she.\n\nAfter we finished, I stepped back and turned around. I caught both men staring at my g-stringed ass. I was a little proud of the fact that even with a hot naked girl right in front of them they chose to look at my ass. I gave it an extra wiggle as I walked away and out of the corner of my eye, I saw them watching.\n\nWe had a lot of guys come to get tattoos too. It was mostly his talent as an artist, but my uniform in the shop probably helped. I generally wore a corset and stockings or garters and either frilly panties or a thong. I basically dressed like a burlesque dancer. \n\nThe past year had been crazy. We got married the day of my divorce, literally walked out of one room and into another. There had been a little bit of drama at the courthouse. Chance had seen Jace out in the hallway. He'd gotten into his face and started talking down to Jace. Told him he was taking his seconds, that he could never get a girl on his own, all kinds of crap. Jace had ignored him and walked away, then Chance grabbed my arm and called me a whore, said he'd heard about my dancing. \n\nA small part of me wondered if the fight I'd seen before was a fluke. NOPE! I'm not proud of it, but I will admit a personal satisfaction when Jace decked Chance. It was practically a repeat of the fight in the past. Chance was bigger and tried to use that to his advantage, but his swings were wild and off-balance. Jace used his face like a pinata and put him down a lot quick. Police from around the building swarmed us and Chance started screaming he'd been attacked. They had been about to arrest Jace but a bunch of witnesses came forward and told the truth and then the cops were happy to arrest Chance.\n\nJace had straightened his tie and went to the bathroom to clean up. Afterward, we walked right into the next courtroom and got married. People thought we were crazy, but ten months later I was still in head over heels in love with him.\n\nNow I was his full-time assistant. I worked with and scheduled his work time for the software companies that contracted him. He still liked to teach and his reputation had made landing a professor job at a nearby university easy, he made them include me as his teaching assistant. I was hesitant at first, but they had a great medical and dental plan. I also ran the tattoo shop and scheduled all the regular sessions and hot girl discounts. \n\nStrangely, both artists in our other studio moved with us. They like working with Jace and his reputation kept growing. \n\nOur studio had one wall half covered by 24-inch prints of hot girl discount girls. We generally did one a week. We had to limit it to one tattoo per girl because a few were ready to be naked whenever Jace wanted it if he'd tattoo them. Sluts. Even though one had a really talented tongue and we texted her on occasion. I'd flirted with a couple of them and we'd had some fun threesomes but Jace never pushed or asked. To him I was enough. \n\nI still had a suicide girl account, and my Instagram was linked to my only fan page. Jace took pictures of me all the time that we posted. They had all gone viral. We even have a page for the studio that has attracted more than 100k followers. \n\nI sometimes added to my own collection of tattoos. I always got the hot girl discount. Jace refused to tattoo me any other way and I never even thought of going to somebody else. Even if I wasn't getting a tattoo, Friday nights he'd tie me down during studio hours. We'd even set up a spinning wheel for how I'd be tied and would let a customer spin it for me. Naked, panties, ass up, and customers choice. \n\nStrangely, Friday nights started to develop a lot of traffic and people scheduling appointments. \n\nGo figure.\n\n*****\n\nNote: Comments always appreciated. "
    ],
    "authorname": "storm_usmc",
    "tags": [
        "exhibitionist",
        "fight",
        "gagged",
        "genius",
        "paid",
        "sexy",
        "tattoo",
        "tied",
        "whore"
    ],
    "category": "Exhibitionist & Voyeur",
    "url": "https://www.literotica.com/s/savage-af-ch-02"
}
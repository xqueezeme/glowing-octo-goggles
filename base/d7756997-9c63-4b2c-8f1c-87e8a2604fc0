{
    "title": "Voyeur Ch. 08",
    "pages": [
        "Thanks for reading, voting and feedback. The last chapter's reception was amazing, thank you! It spurred me to complete a new instalment (I won't forget the other series). \n\nAnd to one reader, I will call you 'PW2017' -- I tried to reply your fabulous message twice, but the return address was invalid :(\n\n~I write for pleasure, I post for joy~\n\n*****\n\nThe rain was relentlessly heavy in the dead of night as Ray grit his teeth and continued to dig. A large flash-light was balanced by the pit's edge, casting a watery spatter of light across his work. Ray ignored that his hair irksomely adhered to his forehead; that rivulets of cool water poured down his temples and neck.\n\nBlinking wet from his vision, he continued to stab the heavy-duty spade into Earth. Buried in muddied soil beyond his ankles, Ray was saturated; his shoes and pants were ruined. But it didn't matter; his purpose was more important.\n\nFinally, Ray viciously hauled himself from the pit and tossed the spade aside. Still panting from the effort, with his hands on his hips he stared at the grave in which he might bury Rachel.\n\nFor five long minutes he stared at that dark lonesome space, unbothered by the chilling sheets of rain battering him.\n\n\"And now you know,\" he muttered, his words inaudible against the rain. Shaking his head, he bent to retrieve the spade, and began to refill the hole.\n\n*******\n\nRachel sighed awake, feeling exhausted but quite comfortable. It had taken over two hours to fall asleep after what happened the night before. When she eventually drifted off, she'd slept like the dead.\n\nIt took a few seconds to register what felt foreignly good. Glancing down, she was confronted by the sight of Ray's face buried between her legs.\n\nShe immediately knew his chin was covered in juices that also coated her inner thighs. He hummed against her pussy, rubbed her clit with his tongue, and his large arms curled around her legs to stop her retreating.\n\n\"Ray!\" Rachel hoarsely protested.\n\nFeeling like she was strapped into an obscene show-ride, she awkwardly pushed against the top of his head. Each swirl of his tongue created tingles of excitement across her pussy, and Rachel hardly noticed that Ray's hair was still damp from the rain.\n\n\"Yes?\" he cooed intimately against her skin.\n\nWhen he slowly backed off, Rachel was horrified by the hungry gleam in his eyes and the glistening sheen of wet shining across his strong jawline. Enjoying the look on her face, Ray's gleaming mouth widened to a sexy grin.\n\nRachel took a deep breath to berate him but was nimbly tossed onto her stomach before she could say a word.\n\n\"Oufff!\" she gasped, rapidly blinking as Ray hauled her hips high so she was propped on her knees, rudely presented to him.\n\n\"That's better,\" he said smugly.\n\n\"Ray!\" Rachel squealed. Her hands clenched fistfuls of sheets as she felt the imprint of his entire face against her pussy. \"D-Don't do that!\"\n\n\"Do what?\" came his muffled reply. His forearm pressed her lower back, forcing her to stay arched. His other arm looped around her thighs to keep her in position and support himself.\n\n\"You-You're...ohh!\" Rachel dizzily whimpered, feeling her clit start that sweet sting as Ray's tongue danced around it. Then his lips lightly fastened around her acing nub, and...\n\n\"Oh...oh, God!\" Rachel's eyes urgently flared as her pussy began to rhythmically throb like a powerful heartbeat against Ray's devouring mouth. Though mortified, she instinctively pushed back for more, certain Ray's nose was literally buried in her ass.\n\n\"MM!\" Ray loudly moaned, sending sharp post-orgasmic sparks across Rachel's lower body.\n\n\"Oh...Wait...\" With her face pressed to the mattress, Rachel breathlessly tried to escape the vulnerable position. \"L-Lemme go!\"\n\nRay flipped her onto her back and dropped down to peer between her thighs. Aghast, Rachel tried to push his face away but he merely grinned and moved closer.\n\n\"So pretty,\" Ray sighed. His fingers naughtily peeled her soft lips open. \"So deliciously soaked.\"\n\n\"Ray! I-\"\n\n\"Mm?\" Ray finally yielded to the pressure of her hands on his head and moved back. \"Best breakfast ever.\"\n\nLying indignantly rigid, Rachel's cheeks were beet-red as Ray kissed up her body.\n\n\"How did you sleep?\" he murmured as she impatiently turned her face away from his wet face.\n\n\"I...You didn't let me sleep!\" she complained, grumpily pushing against his incoming chest.\n\nWithout windows, the heat of the room was stifling. The additional warmth of their bare skin pressed together was too much.\n\n\"Of course, I did,\" he said evilly. \"After.\"\n\n\"W-Well...Oh!\" Rachel gasped, feeling Ray's condom-covered cock prod her pussy. \"What? Ray, what...? But...?\"\n\n\"Yeah,\" he breathed against her forehead. \"Been what way a while. I was just waiting for you to wake up.\"\n\n\"T-Thanks!\" Rachel muttered sarcastically, now gripping his biceps for support. Despite the rude awakening, she still felt half-asleep. It was almost as though he'd sexually ambushed her, if there was such a thing.\n\nRay chuckled, but it quickly died as ecstasy took over and his cock was slowly sheathed inside her.\n\nFeeling delirious, Rachel wondered if she'd gone mad as her hips slowly lifted to meet Ray's gradual thrust, until he was fully buried, his balls warmly resting against her. Wet and stimulated from her orgasm, she accepted his girth easier than the first time and hated how good it felt. The base of his shaft pressed tantalizingly against her tingling clit, and Ray kept his hips perfectly still.\n\nRachel squirmed to detach herself, but movement increased the stimulation. Ray supported himself on his forearms so he could see her face. \"Are you about to cum again?\"\n\nRachel sullenly shook her head, and Ray grinned.\n\n\"It'd be really hot if you let me get you there.\"\n\nRachel glanced up nervously and Ray's hand sneaked over her breast; his thumb circled a hardening nipple and he felt her heart race under his palm.\n\n\"Come on, Rachel. Please?\"\n\nRachel stared at him. Though her feelings on the matter were clear, she didn't dare voice them. With a big smile, Ray settled against her, his lips tickled her ear.\n\n\"You're so fucking tight, stretched around me. Don't you want my thick cock moving inside you? Pump that tasty little pussy? It'll feel fucking amazing, trust me,\" he whispered sexily, flexing his cock. Rachel's body unwillingly tremored in response and her grip on his arms tightened warningly.\n\n\"Talk to me, Rachel,\" Ray urged, lightly twitching his hips to rub the base of his shaft against her clit. \"You can do it.\"\n\nNot believing she was in such an obscene entanglement with a dangerous stranger, Rachel ducked and winced against his shoulder, hoping he'd just get it over with. But Ray didn't budge.\n\n\"God, this is good,\" Ray groaned, shifting restlessly but still deeply embedded inside her. \"I could stay like this for an hour.\"\n\nAn hour! \"C-Can you move a little?\" Rachel asked half-heartedly, quickly burying her face out of sight before he could make eye contact. Did she really just ask her kidnapper to fuck her?\n\nAgain, Ray shifted onto his forearms. \"Look at me, hon.\"\n\nRachel quietly squealed against his skin with embarrassment. But Ray waited patiently, feeling his cock practically marinating in her stretched wetness, until she peeked uneasily up at him.\n\n\"Just say -- 'Please let me cum, Ray.'\" Shuddering with anticipation, he watched Rachel's eyes fill with dismay.\n\n\"I...P-Please can I...can you...let me...finish,\" she lamely uttered.\n\n\"I'll settle,\" he relented with an arrogant half-smile. He was too impatient to fuck her.\n\nWith one hand still kneading a perfectly-curved breast, Ray's other reached down to hitch her leg around his hip. For a while his hand indulged in stroking the toned flesh of her thigh, imagining it encased in beige nylons. Then his hand moved lower, squeezed a tight buttock, and went further under.\n\n\"Oh!\" Rachel's eyes widened as his fingertips brushed her sensitive core spread around his girth.\n\n\"Ready?\" he panted. Then his fingers twirled intimately over her pussy, and he began to thrust in earnest.\n\n\"F-Fuck!\" Rachel gasped her surprise, arching as pleasure flowed up her body and culminated where Ray's cock thickly pumped into her. Despite the physical gratification, she wished she'd had the courage to stab him that first night in the kitchen. \"Fuck! Oh! Oh, fuck!\"\n\n\"Yeah,\" Ray grunted, relishing that Rachel's body seized up from pleasure he created. \"Fuck, yeah! Good girl!\"\n\nRachel cried out, tightening her leg around his hip to maximise contact with his teasing fingers while he thrust to the hilt and rocked her body to a second climax. Delicious heat flashed up her spine, flushed her cheeks, and even as she continued to move against Ray, reluctantly enjoying the smooth heat of his strong body sliding against her, her mind was scathing.\n\nHe may as well bury you in the forest. You can never face Ben, now.\n\nRachel bit back a sob as Ray forcefully drove forward.\n\n\"Oh, God!\" he groaned, his eyes tightly shut. \"Oh God! Rachel...Fuck!\" \n\nRachel gasped when Ray slammed his hips forward and held them there. As his cock stiffened and pulsed inside her, Rachel wondered if the experience was comparable to prostitution.\n\nDespite the physical enjoyment, she felt like an empty vessel being used for the selfish pleasure of a stranger. It was, after all, the entire purpose of her being there. But considering Ray's bed manner, she couldn't even have the satisfaction of calling him 'selfish'.\n\nPanting like he'd run a mile, Ray slowly relaxed. \"That's some serious chemistry,\" he said huskily. \"You're an addiction.\"\n\n\"I don't like this!\" Rachel whimpered, and burst into tears.\n\nExpecting a different reaction to such a compliment, Ray drew back with genuine confusion. \"What the...? Did I hurt you?\"\n\nStill sobbing, Rachel shook her head and covered her face with her hands.\n\n\"You didn't ask me to stop,\" Ray pointed out, gently withdrawing so he could remove the condom.\n\nWith great difficultly, Rachel managed to stop crying, but continued to pitiably sniff. Ray had heard plenty of loud tears through his career, but the sniffing got to him.\n\n\"Come on, Rachel,\" he said softly, and lightly pulled on her wrists.\n\n\"I want to be alone,\" she mumbled through her fingers, still snivelling.\n\nAn unpleasant feeling crawled up Ray's spine. Out of patience, he abruptly yanked Rachel's hands down and stared at her reddened face. Despite being windowless, the room was well-lit; brightened by the natural light flowing from the skylights above the staircase outside.\n\n\"I didn't force you to do anything,\" Ray said firmly. He tried to catch her attention, but her eyes were miserably downcast.\n\nRachel couldn't look at him, until Ray pinched her chin and made her.\n\n\"I didn't force you,\" he persisted, sounding weirdly defensive.\n\nBlinking at his severity, Rachel was astounded that Ray actually looked upset with her and appeared to be waiting for reassurance.\n\n\"No, o-of course not,\" she said tearfully. Yes, you did. You, manipulative bastard.\n\n\"You liked it, right?\" he prompted, releasing her chin and caressing her damp cheek. \"You came, didn't you?\"\n\nRay's words made her feel so much worse. Not trusting herself to speak without bawling, Rachel bitterly nodded. Scrutinising her, Ray's jaw clenched as the tears continued. Wearily dropping to the mattress by her side, he pulled her into his arms.\n\n\"I'm sorry. I didn't mean to overwhelm you,\" he murmured. He wasn't going to apologise for anything else, and he certainly wasn't conceding any possibility that what happened was wrong, or perhaps more importantly, that it shouldn't happen again.\n\nVery satisfied and slightly fatigued from the night's digging exercise, Ray was physically spent enough to indulge in another nap. Eventually Rachel gave up trying to squirrel out of his embrace and Ray felt the tension slowly leave her body. For a short while he listened to her breathing deepen until he was certain she'd fallen asleep.\n\nForty minutes later, Rachel woke to the pleasant feeling of warm skin against her cheek, and despondently remembered it wasn't Ben's chest. Feeling particularly irritable about it, she wriggled, pushed and squirmed to escape the muscled arms that were wrapped around her like an iron bar.\n\n\"Rachel?\" Ray smiled, enjoying her efforts. The way she struggled had more of an effect of rubbing against him. \"This is nice.\"\n\n\"I want to make breakfast,\" she huffed, abruptly falling back when he suddenly released her.\n\n\"Don't bother, hon,\" he chuckled, idly sitting up and ruffling his hair. \"I'll make something. You may not remember I'm the better cook.\"\n\nRachel took a shaky breath to calm the spike in her temper. There was a reason she haunted food courts at night and it wasn't just to spy on Ben. Ray couldn't know she was a shit cook, but coincidentally he was right, and it was infuriating. At least she could make her feelings clear on the sleeping situation.\n\n\"Ray, about last night...I mean...\"\n\n\"Do you want to go for a drive later?\" Ray sneakily interrupted, sensing a challenging topic on the horizon.\n\nHe didn't want to make things awkward by declining a demand to keep his distance, because there was no way in Hell he was being friend-zoned. Just remembering the recent sexual encounters made his cock stir back to life.\n\n\"Oh...I mean, yes,\" Rachel accepted, trying to wipe the shock from her face and not sound excessively enthusiastic. \"I'd love to.\"\n\nRay ruefully rubbed his chin, enjoying the lingering scent of her pussy. \"I was thinking I moved a bit fast, and we should probably get to know each other again.\"\n\n\"Right,\" Rachel said slowly, her enthusiasm quickly fading to suspicion.\n\nShe didn't want to know anything about the guy, except perhaps confirmation he wouldn't murder her. But if Ray was willing to foolishly take her on an excursion, she would be on best behaviour in the meantime. It would be unwise to jeopardize it all by sulking about petty things, like kidnapping and coerced sex. Though Rachel's blue-green eyes flashed resentfully, she managed a tremulous smile.\n\n\"A drive, where?\"\n\n\"We could pack a picnic and go to a nice part of the woods.\"\n\nRay saw the sudden alarm on her face but couldn't convey he had no intention of murdering her without spoiling their weird arrangement.\n\n\"You really scared me yesterday when you took that fall,\" he said truthfully. \"I won't let anything bad happen to you.\"\n\nYeah fucking right. Rachel uneasily pulled the blanket over her nakedness. \"Thanks, I appreciate that. Can I have a private moment?\"\n\n\"Sure. I'll make breakfast.\"\n\nUnembarrassed by his nudity, Ray left the bed and casually padded from the room. Rachel maintained her composure but quaked inside when she saw he was hard again.\n\n********\n\nThe morning wore on, and Ray continued to enjoy the masquerade whilst Rachel felt herself slowly going insane. The guy had no visible phone, no neighbours and two hands too many where her body was concerned.\n\nRay checked her head injury after breakfast. The cut healed nicely, and hardly bothered Rachel aside from slight tenderness. Until he insisted on inspecting it, she'd actually forgotten it was there.\n\n\"There.\" Ray lightly arranged her hair across the wound and cheekily pressed his lips to it. \"With a magic kiss, it will heal in no time.\" Watching her peaceful expression flicker, he almost burst out laughing. It was the most fun he'd had in years. Though not a romantic man, Ray hugely enjoyed the exaggerated role of Romeo purely because Rachel had no choice but to endure it, and she was clearly struggling.\n\nThe struggle was real; Rachel found herself calling on all kinds of spiritual aid to help her get through the pretence. The flair in which Ray engaged with her was very unsettling. It seemed he was always by her side, finding ways to inadvertently touch her.\n\nRay was conscious of the drastic change in himself. He was flirting for fun, not a calculated cause, and activities which seemed exceptionally mundane were now mildly thrilling. Or perhaps he was enjoying his lasting victory over her, topped off by the fact the entire situation was of Rachel's own creation. Though noticeably, her tolerance for the charade was thinning.\n\nAfter a hearty breakfast, Rachel went downstairs to shower and change, half-fearing Ray would insist on joining her. But thankfully, he didn't. Selecting a calf-length black dress with pretty buttons down the mid-section, Rachel pondered Ray's tastes and the fact he'd selected certain items over others.\n\nFollowing an encounter on the couch where Ray strongly reminded Rachel of Pep\u00e9 Le Pew, Ray finally accepted she couldn't be cajoled into another round of sex without bursting into tears, and announced they should get going. It had rained significantly the night before, but the sun had shone strong since morning and the surrounds were mostly dry. Ray expressed confidence that the ground would be perfect to sit upon by the time they reached their destination.\n\nRachel's heart leapt the moment she stepped through the front door to perceive the inviting trees beyond. Glancing at something on the patio, she looked closer and frowned at the muddied pile of Ray's soaked clothing.\n\n\"Hey, dawdler!\" Ray called.\n\nRachel turned to see him standing expectantly by the open passenger side of a very clean black Range Rover. In a light-blue jumper, beige pants and brown boots, Ray looked boyishly handsome. Too bad he was a raging lunatic.\n\n\"You didn't lock the front door,\" Rachel sniped, sounding more critical than she intended. Though she'd love for bandits to ransack Ray's abode, she resented the irony of being the carefully-watched prisoner of a man with lax home security.\n\n\"I remote-locked it,\" he said dismissively, closing the passenger door on her brooding expression.\n\nIt was about a half hour drive, and Rachel was surprised by the first part of it running parallel to a cliff that bordered an ocean. Not one car passed them the entire journey. When they arrived, Rachel tried not to seem ungracious, but she was extremely disappointed.\n\nThe place was serenely beautiful but seemed even more isolated than Ray's home, and she didn't think that was possible. But it clearly was, and Ray was already laying out a blanket.\n\nUnsure how much longer she could play along, Rachel robotically retrieved the basket from the back seat. Awkwardly laying out plates and cutlery, she wondered where the Range Rover key was, and how she might get her hands on it.\n\nRay simply pressed a button to start the engine, so he must be carrying it on his person. Rachel started when she heard the distinct whirr and click of a professional camera.\n\n\"Picture perfect,\" Ray grinned at her discomfort from behind the lens. \"Smile!\"\n\nRachel shook her head and ducked down, hiding her face as he continued to click away. \"Don't, Ray! I don't like photos!\"\n\n\"Alright,\" he said, peering into the little screen to browse his handiwork. \"That first one was cute.\"\n\nRachel glared angrily at the blanket and resumed arranging the picnic. She was increasingly frustrated with her Stepford Wife act and the fact she should be with Ben; not dallying with a domineering kidnapper who had randomly fallen in lust with her.\n\nRachel sat chastely with her legs together, but instead of sitting opposite, Ray flopped down on his side, eye-level with her breasts.\n\n\"Pickle me,\" he smiled, opening his mouth.\n\nRachel tried not to appear surly as she dutifully picked one out and let him eat it from her hand. As it disappeared into his mouth, she couldn't help remembering that she was now familiar with Ray's 'pickle'. Though his appendage was more like an overgrown cucumber.",
        "\"You should sit over there.\" She sombrely pointed opposite the black and white chequered blanket. \"You might choke at that angle.\" A girl can dream, anyway.\n\nRay swallowed what was left in his mouth and smacked his lips at her. \"I'm fine here.\"\n\nRachel sharply exhaled and got onto her knees. Ray's hand was suddenly on her wrist.\n\n\"Where are you going?\" he asked smoothly.\n\n\"To sit over there.\" So, you can't paw me. \n\nRay didn't answer, nor did he release her. When Rachel turned back, he cheekily popped a piece of cheese into her mouth.\n\n\"What's wrong?\" he smiled at her petulance and sat up to draw her into his lap. \"You love the feeding game.\"\n\nWriggling uncomfortably, Rachel irritably managed to gulp down the cheese. \"It doesn't sound like something I would like,\" she stiffly replied, feeling suffocated in his arms.\n\n\"It's one of our favourite pastimes,\" Ray merrily declared in one of his biggest whoppers yet. \"It became a thing after our trip to Paris.\"\n\nRay never cared to deliberately antagonise women, but the burning outrage in Rachel's gentle eyes was way too much fun. The upper hand she'd given him was a once-in-a-lifetime rarity. It was increasingly clear that her patience for the game was near exhausted, and it was only a matter of time before she more vigorously rejected him.\n\nRay wondered how long she would last and hoped to get at least three more sensual fucks out of her before she inevitably became difficult. But whatever ensued, Rachel had unwittingly come to know him intimately. Their liaison did not stem from violence or abuse. As much as she might despise how things developed, it was very promising for their future.\n\n\"If I can't remember, then it's like it never happened,\" Rachel tartly retorted, unable to resist a counter reply.\n\nStrangely, Rachel noticed a change in herself. The survival instinct had driven away much of her shyness. The overall seriousness of her circumstances helped her speak forwardly when she would normally stay bashfully silent. That, and Ray's enthusiasm for spurting romantic lies was seriously pissing her off.\n\n\"You're irresistible, when you pout,\" Ray murmured, kissing her neck.\n\n\"Ray, the picnic!\" she hissed, straining away from him.\n\n\"It can wait.\"\n\nRachel's eyes widened with alarm when she was shifted from Ray's lap and he positioned himself on top of her.\n\n\"Wait! I don't want to...\" she said shrilly, wriggling back as he leaned close. \"I mean, we shouldn't...\"\n\n\"Why not? We're very alone here.\" Ray grinned at her discomfort. She was so fucking cornered. \"What's the problem? You love doing it in the woods.\"\n\nThis time he went too far, and Rachel forgot herself and actually bared her teeth at him. In response, Ray threw back his head with a loud laugh. The callous edge of his mirth alerted Rachel and she froze.\n\nCarefully scrutinizing Ray's expression, Rachel noted the smug look on his face. A look that silently told her he knew. Then he voiced it.\n\n\"Ah, well. I guess the game is up, hon. All good things come to an end, don't they?\"\n\n\"H-How long have y-you...?\" she stuttered, shrinking back with a sick feeling in her stomach.\n\nRay smiled wickedly. \"You gave it away within hours.\"\n\n\"Within...! You took advantage of me!\"\n\n\"But I didn't force you, did I?\" he immediately countered. \"That's what you're really upset about. Be fair. You tried to dupe me, and it was an admirable effort, but you failed. Don't be a sore loser.\"\n\n\"I want to go home! I love someone else!\" Rachel cried.\n\n\"It's rude to talk about other guys in front of me.\" Ray raised a cocky eyebrow. \"Now, calm down. Seriously. Even if you refuse to admit it, this is working out.\"\n\nRachel had no reply. Ray was clearly a sociopath; he had no empathy or remorse for what he'd done. It seemed he arrogantly congratulated himself for getting his way without murdering her. All that should matter a lot more than it did -- but Rachel's mind was overtaken by a shattering humiliation.\n\nIt was fucking embarrassing. She was an absolute joke; copping Ray's stupid woo-tactics when he must have been silently cracking up at her expense. She'd spread her legs and gifted the guy two easy fucks, and he knew what he was doing the whole time. She tried to play him, and without batting an eye he turned her ploy to his advantage. Now, she knew his revolting charm was him toying with her for his own amusement. As she recalled the last 24 hours, Rachel was both mortified and incensed. She wanted to scream.\n\n\"I'm a leading kind of guy,\" Ray said confidently against her temple. \"And you're a shy submissive. Maybe it's why I'm so drawn to you? God knows. This will naturally work out. You just have to relax.\"\n\n\"I'm not a...a...that!\" Rachel hotly denied, still rattled by the exposure of her pretence.\n\nRay was wrong about her. Rachel liked following Ben's directives, because she wanted to be with him. She implicitly trusted him, and he understood her. Ray had no idea what he spoke of and failed to acknowledge the fact she had every reason to be afraid of him.\n\nNow she was defeated and humiliated with all hope of escape dashed to dust. And why the fuck had no one rescued her, yet? Was she really expected to outwit and overpower a mountain of a man, who was now looking insufferably pleased with himself?\n\n\"I hate you!\" she snarled.\n\n\"What?\" Ray said sharply. The sudden change in tone lashed Rachel's ears like a cold whip.\n\n\"N-Nothing,\" she hastily mumbled, thinking she may as well start drafting her 'Biggest Coward' award acceptance speech.\n\nRay leaned closer until their gazes locked. \"Don't ever use that word with me,\" he softly warned. \"I don't like it.\"\n\n\"Well, you got what you wanted. You can let me go,\" Rachel tried, flinching when a chuckle rippled through him. At least the murderous look was gone from his face.\n\n\"I haven't had enough.\"\n\n\"How long are you going to keep me?\" she asked anxiously.\n\n\"As long as I care to.\"\n\nThe answer was disturbingly noncommittal.\n\n\"And after? How do I get back?\" Rachel said in a small voice.\n\nThe answer left Ray before he really considered it. \"I'll be wherever you are.\"\n\n\"O-Oh. Like, the same city?\" Rachel whispered with pathetic hope.\n\n\"Same city, same house, same room, same bed...\"\n\n\"Ray!\"\n\n\"Why do you ask questions with answers you don't want to know? Do you prefer the alternative?\"\n\n\"Maybe.\"\n\nRay's eyes darkened forebodingly. \"Trust me, you'd change your mind.\"\n\n\"Please!\"\n\n\"Don't beg. It's boring.\"\n\n\"But I have a boyfriend! Can I at least-?\"\n\n\"No. You should be grateful I didn't kill him. Though he'll conveniently take the fall for this, so it works out nicely.\"\n\nRachel paled. \"The fall for what?\"\n\n\"Your disappearance, hon.\"\n\n\"You framed him!\"\n\nRay rolled his eyes. \"I let nature take its course. Be content he's alive.\"\n\n\"He can't be locked up because of me! Please, Ray, if you help him, I'll do anything you want!\"\n\n\"You would be amazed how people magically change their minds after making such promises,\" he dryly replied. \"Not that I'm ever interested. Maybe in this case I am, but I don't believe you.\"\n\n\"Ray, I'm serious,\" Rachel earnestly begged. \"If you let me go, I'll never tell anyone about you.\"\n\n\"Did you notice how your plea just changed from helping Ben, to releasing you?\"\n\n\"But Ray, if you'd just let me go... It's not too late-!\"\n\n\"And what if I want you back?\" he said lightly, shifting onto his forearms with a smile that would have been attractive if the conversation weren't so hideous.\n\nRachel looked appalled. \"What? W-Well...I...Well...I don't think-\"\n\n\"Would you agree to let me have my way with you, now and then?\" he teased.\n\nRachel knew by his tone that it was a pointless conversation but maintained her honesty in the hope he'd see reason. \"No, I wouldn't. Please Ray, let me go. I'll never tell anyone.\"\n\n\"You wouldn't open that sexy mouth to rat on me, so I don't show up one day?\"\n\nRachel gulped and shook her head. \"If you give me your word that you won't, I'll trust you. And I'll keep my promise never to tell.\"\n\nRay believed she was serious. But it didn't matter. \"That's a lovely offer Rachel, but there's a hitch.\"\n\nThe calm amusement on his face made Rachel want to cry. With a predatory look in his eyes, Ray gently kissed her cheek.\n\n\"I would definitely come after you,\" he murmured, and Rachel fearfully shivered beneath him. He sighed, feeling exceptionally amorous now they'd cleared the air and his intentions.\n\n\"No, no, no!\" Rachel moaned, as Ray pressed closer. \"Please! I don't want this!\"\n\n\"Sorry, Rachel. This was never about what you wanted.\"\n\nRay nibbled the flesh of her neck while Rachel lay like a dead person, and then his mouth moved lower. He unbuttoned the centre of her dress and kissed her cleavage, down her soft stomach until he reached the skirt section.\n\nGlancing up her body, Ray took a moment to appreciate the sight of Rachel on her back with her bra exposed, the heaving rise and fall of her breasts, and the end of her ponytail prettily splayed down one shoulder. The nervous bewilderment on her face created the perfect image of innocence begging to be fucked. Ray shifted onto his side to edge Rachel's skirt up her smooth thighs, like a kid unwrapping a long-awaited Christmas present.\n\nWhile Ray's large hand stroked up her inner thigh, Rachel turned her gaze to the sky, thinking of Ben. At first, she was miserable to be away from him. Then came the bittersweet fact that he'd eventually be forced to move on with his life. But she never considered the incriminating position that her disappearance might place him in; never thought Ben would rot in prison on her account. Now, it would make sense that no one is looking for her if the police presumed the search would start and end with Ben.\n\nIt was a lucky her skirt was out of the way, because it gave Rachel the freedom to twist and jerk her knee into Ray's temple in a surprise blow that knocked him back. He grimly sat up in time to see her disappear around the bend and into the trees.\n\n\"Have it your way,\" he winced, touching the throbbing ache on the side of his head. Taking his time, he reached into the base of the picnic bag and pulled out some black cable ties, a small pistol, and a gag. Pocketing the items, he stretched for a few seconds, then broke into a very fast sprint.\n\nHolding the skirt of her dress gathered around her waist, Rachel fled with quick determination. Though the area seemed deserted as the surrounds of Ray's house, she felt she had better chances of finding help or hiding. Over the blood pounding in her temples she heard boisterously raised voices quite a way to her left. She abruptly turned to follow the sounds.\n\n\"Oh, thank God!\" she gasped, staggering into a small clearing.\n\nCatching her breath, Rachel stared at three stunned campers sitting in makeshift chairs, each holding a beer. They looked to be in their late thirties to mid-forties, and rather shabbily dressed in faded sports tracksuits. Empty cans were scattered around a gutted fire.\n\n\"Please, call the police! You have to help me!\" Rachel begged, rushing forward.\n\n\"Are you lost?\" one lazily asked, placing his beer on the ground and rising to his feet.\n\n\"Yes! But there's -...Yeeooow!\"\n\nThe guy grabbed Rachel's ponytail and yanked her head back, admiring her features. \"You gotta be nuts to come out here. I like that.\"\n\n\"Wait, you don't understand!\" Rachel flinched at the sharp pain across her scalp.\n\nNo one had ever pulled her hair so viciously. The man reeked of cigarettes and alcohol, among other unsavoury things. Clearly the overnight rain hadn't changed much in the way of hygiene. All three campers looked like they could use a long shower.\n\n\"No, you don't understand.\" The man sorely tugged her hair for emphasis and the others laughed at her cry. A coarse hand moved forcefully across her bra, exposed by the unbuttoned front of her dress. Rachel squealed when the hand slipped under one of the cups to squeeze a tender breast.\n\nThe man spoke hoarsely, with a dark look on his face that came with sudden arousal. \"Shit, these are nice! We'll keep you busy, girl!\"\n\nOne wearing an ugly red hat smirked. \"She's undressed for us. The sweet lookers are always the best fucks.\"\n\nRachel groaned with more frustration than fear. Could things get any worse for her?\n\n\"Let her go.\"\n\nThey all turned to perceive Ray with a very menacing look on his face. The seated men exchanged a bemused glance, and the one holding Rachel sneered.\n\n\"You the boyfriend?\" he slurred, reluctantly withdrawing his hand from Rachel's chest but still gripping her hair. \"I'll trade six cold ones, for a night with your girl.\"\n\n\"How generous.\" Ray showed his teeth in a deadly smile, and his hazel eyes turned so cold Rachel felt she'd rather take her chances with three unwashed rapists than be alone with him.\n\nRay stepped forward and glanced around, noting the discarded beer cans. \"Not a hunting trip?\"\n\n\"Yeah, a cunt hunt,\" a seated man piped in, then laughed stupidly at his own joke.\n\n\"Let's fuck him up, then make him watch,\" red hat suggested.\n\n\"Three against one, and you idiots would still lose,\" Ray quietly snarled. \"But I don't have the time or inclination to fist-fight.\"\n\n\"Whoaah!\" The men immediately backed down when Ray levelled the pistol. Even in their intoxicated states, it was clear by Ray's cold confidence that he wasn't an amateur. Nor was he bluffing.\n\n\"Shit, we were just messing around!\" the leader exclaimed, quickly releasing Rachel and stepping away from her. \"Come on, put that thing down.\"\n\nRay ignored him and looked at Rachel. \"Are you hurt?\"\n\nTerrified, Rachel gaped at Ray. Then she gathered her skirt and tore into the forest.\n\n\"T-There she goes. You better chase her.\" The camper anxiously gestured after Rachel and nervously licked his lips when Ray didn't budge. \"Come on, man, I hardly touched her. Serious, we don't want trouble.\"\n\n\"Didn't seem that way. Sorry fellas.\"\n\nRachel abruptly pulled up when the first gunshot echoed through the woods, quickly followed by a second and third.\n\n\"Oh, my God!\" she sobbed into her palm.\n\nNow, Ray would come after her, and probably put a bullet in her, too. Going by the men's reaction to her sudden appearance, the area was generally deserted. They seemed confident of being able to abuse her without interruption.\n\nAs she tired of the pace, Rachel's sneakers sank into the damp ground with every step. Unhelpful thoughts raced through her mind. She wasn't prepared to die. She hadn't even bothered with a will. And if she was going to die, Ray should at least clear Ben's name, but of course he wouldn't.\n\nRachel ran, and ran. It was almost as if she wasn't breathing, or couldn't breathe, and yet she ploughed onwards on sheer desperation. Until Ray caught her.\n\nRay's running style was so rapid, his feet barely pressed the ground. Rachel didn't even hear him approach over her own cloddish escape, until his arm wrapped around her stomach and dragged her to the soil. Starkly conscious of what Ray had done and that she was probably next, Rachel stared up at him and screamed.\n\nRay had heard plenty of screams in his lifetime. This one was particularly high-pitched and actually gave him chills.\n\n\"Holy hell, Rachel! That was a good one!\" he observed, sounding impressed. \"My ears are ringing!\"\n\nThen he skilfully pinched her jaw open, pulled the gag from his pocket and stuffed it into her gasping mouth. Rachel retched, groaned and seized his wrists to stop him. But Ray was too strong, and her grip posed no obstruction to his task. Seemingly oblivious to her pulling on his wrists, Ray calmly fastened the buckle behind her head.\n\n\"You get some points for making a decent run for it in this dress,\" he remarked. Truthfully, he was astonished by her pace in reaching the campers. If he could trust her, she would make a worthy running companion.\n\nThen he briskly jerked his hands free, flipped Rachel over and pinned her wrists before she could think to fight. Ray moved back and after dodging a kick directed at his face, roughly forced Rachel's ankles together. When they were secured, Ray straddled her from behind, his hand curled across her forehead to lift her head, his mouth warmed her ear.\n\n\"I meant what I said. I'm not going to hurt you. But I feel like you need to be taught a lesson, because three kills on short notice is no easy task. You're going to watch this.\"\n\nHeaving with exhaustion and expecting to be violently raped, Rachel wept raggedly against the gag. But Ray merely rolled her over and stonily buttoned the front of her dress. It was only when she was hitched over his shoulder that she realised what he meant.\n\n\"Naurrrrggg! Arrrgggg!\" Rachel vehemently shook her head and struggled, but it was no use.\n\n\"Yep,\" Ray replied, steadily walking back toward the camp as though she weighed nothing. \"You're not getting out of this one.\"\n\nRachel vigorously squirmed and whined for him to change his mind, but she had no voice. If only he'd let her speak, she'd beg for forgiveness, and swear to never cross him again. Anything to avoid the sight of three murdered guys. She'd never seen a dead body, and worse, she knew the men were dead simply because she ran into them.\n\nRay marched, unmoved by her muffled pleading. He was angry; angry that Rachel needlessly involved others, and now a tiring job lay ahead of him. But it was so much worse than logistics. Much as he wanted to deny it, Ray couldn't ignore the feelings that surfaced when he saw the drunk idiot groping Rachel. When he saw the man's hand was under her bra, touching her breast, he thought his head might explode.\n\nDigging the grave only clarified he wouldn't kill her. But now Ray was alerted to the fact he was never going to hurt Rachel for the simple reason she was suddenly invaluable to him. It was a weakness he recognised as explicitly ruinous for a man with his occupation.\n\nAt immense personal risk he indulged a dangerous whim, and now the worst-case scenario was manifesting. Rachel certainly wasn't out of his system, and he was being slowly poisoned with feelings for her. And he'd known better from the beginning. He had no one to blame but himself.\n\nBut what started as a case of pure lust had unexpectedly alleviated the pretentiousness of his life. Rachel was his jazz. She even knew his real name, and Ray could relax and be his true self around her; he didn't have to pose as someone else. Nor did he have to finish her as a job or return her to a paying customer. Everything was on his terms.\n\nAnd her personality was perfect for him. Rachel had enough sense to be cooperative, without a level of belligerence that would pose a serious problem. The resulting experience was an unanticipated release for Ray, like breathing fresh air with mind-blowing sex on top of it. And now he'd tasted that overall feeling, he wasn't sure he could give it up.\n\nWhen they reached the quiet campsite, Ray lowered Rachel against the base of a tree and pinched her chin warningly. \"Don't let me catch you looking away.\"\n\nHe took two easy steps toward the campsite, then froze. \"Wow.\" Clearly astonished, he turned to face her. \"Talk about distracted. I almost started without gloves.\"\n\nA heavy silence fell between them. Not that Rachel could have said anything, but his expression made her nervous. Ray narrowed his eyes at her intently, as though comprehending she was the source of an underlying problem.\n\n\"I almost started without gloves,\" he repeated. Shaking his head as though to clear his mind, he waggled his finger at her. \"Wait here, hon.\"\n\nRay was back within ten minutes. The black gloves that extended to his elbows were a frightening contrast to his casual picnic clothes.",
        "Sniffling wretchedly, Rachel watched Ray meticulously clean his crime scene. It was grotesquely eerie to be in an area that was so recently lively, and now immersed in a deathly silence, with three lifeless bodies sprawled around a pile of damp ashes.\n\nIt took over an hour, and Ray overlooked nothing. Rachel winced when he picked some of her hairs from between the first man's fingers.\n\n\"Gotta hustle. Another hour and these guys will start stiffening. The weapon's not linkable to me.\" Ray glanced around. \"So, they got wasted, then argued. Here's the tricky part.\" Frowning, he began to gently manipulate the body of the man he'd shot last.\n\nAlmost blinded by tears, Rachel trembled with shock as Ray carefully positioned the third man in a way to imply suicide with minimal disruption of the blood trail. Finally, Ray managed to spoil traces of his and Rachel's footprints and stood tall, considering his handiwork.\n\n\"Public crime scenes lack privacy, but they're easy to contaminate. They'll know someone was here, but it won't matter. I'm counting on the weather and wildlife having a good go on these guys before they're found. Regardless, we're pretty clear. You know what they say -- never kill someone you know.\"\n\nRachel stiffened. 'We're pretty clear' -- was she an accessory?\n\nRay crouched in front of her, his eyes hard. \"What did you expect to find in these woods? Friendly hippies? I live around here for a reason.\"\n\nStill holding her terrified gaze, he sharply pointed behind him. \"I killed these men because of you. You're lucky they were assholes, because the outcome would have been the same if they were preachers. You need to understand that your behaviour can affect others, and it's never pretty. Do I have to carry you over for a better look?\"\n\nRachel moaned and quickly shook her head. Ray cupped her face, his thumb wiped tears from her cheek. \"Good. Let's go home.\"\n\nRachel gurgled and winced around the gag; her jaw ached painfully.\n\nRay sighed. \"Yeah, I know it hurts. But I can't have you scream like that again. Let this serve as another reminder that I won't hurt you, unless you force my hand.\"\n\nWith Rachel limply draped over his shoulder, Ray paused. \"For the record, I didn't bring the gun for you. I just like to be prepared for anything. I didn't think I'd need the gag either, but I'm sure glad I had it.\"\n\nThen he began the long walk back to their abandoned picnic.\n\nWith her head hanging toward the ground, tears continued to drip across Rachel's temples and into her hairline as she recognised the abrupt shift in her predicament.\n\nYou're really in the doghouse, now.\n\n*******\n\nBrian and Ben waited tensely in a brightly decorated lounge room at one of Marcus' unused properties. It was a neighbourless, out-of-the-way house with pretty views that Marcus thought would be perfect for weekend parties. He purchased it against Brian's advice for above market value and visited three times since the sale. Once to arrange a party that never eventuated, and twice to sulk about Rachel dumping him.\n\nAware of Ben's volatile temperament, Brian decided not to disclose the two key things he knew about Rachel's disappearance until his contact arrived; Marcus' involvement, and the identity of Rachel's suspected kidnapper.\n\nDressed like he was feeling, Ben wore black jeans, a black t-shirt, and a grim expression. The room was blasted with natural light that he might have enjoyed under different circumstances. Right now, the healthy brightness was blinding aggravation.\n\nTo Brian's annoyance, Ben couldn't sit still, and seemed to permanently rotate between shifting in his seat, drumming his fingers on the table, raking a hand through his hair or restlessly rubbing his lower jaw.\n\n\"Can you try to relax?\" Brian snapped. After sitting opposite Ben for half an hour, he was beginning to subconsciously mirror his movements. \"You're putting me on edge!\"\n\nBen angrily stood from the table and began to pace the room. \"You don't understand what I'm going through!\"\n\n\"I can imagine.\"\n\n\"Remind me again why we can't use the police?\"\n\n\"They have approval processes and ethical procedures they have to follow. My methods are more effective.\"\n\n\"But they can-\"\n\n\"Alright, fine!\" Brian barked. \"I don't want to be asked questions that I can't answer, nor do I want to lose access to my current resources! I would like to avoid scrutiny, and so would my contacts.\"\n\nBen pursed his lips and shook his head, remembering Brian's introduction on the drive over. \"I can't believe a man like you, protects that little rat.\"\n\n\"You're lucky the little rat has me to clean up his mess.\"\n\nBen cracked his neck. \"Maybe if you raised him better-\"\n\n\"You have no idea what it was like!\" Brian said fiercely. \"His parents were good people, but they knew nothing about raising a child.\"\n\n\"And you did?\"\n\n\"If they'd let me take a belt to the kid, things would be different. Trust me, I begged. When they died, it was too late. Marcus was too old to be taught better, and too young to be out of my hair.\"\n\nCuriosity about Marcus was a welcome distraction from the explosive turmoil churning through Ben's gut. \"You were still an influence.\"\n\n\"Have you seen 'The Exorcist'? Seriously, you have no fucking idea what it was like.\" Brian's fingertips dug into his temples as he remembered. \"Jesus Christ. Do you know what he used to do to me?\"\n\nStill pacing the room, Ben impatiently shrugged.\n\n\"When he was fourteen, I took him to my favourite restaurant. Whenever staff came near, he'd loudly ask why my cock is so small. I could never go back.\"\n\nBen would have cracked a smile, but it seemed he was incapable of smiling since Rachel disappeared.\n\n\"And this one time he didn't want to leave the beach after six hours.\" Brian's eyes burned indignantly. \"When I dragged him to the car, he started screaming that I wasn't his dad. I almost spent a night in jail. But then he was old enough to live alone.\"\n\nBrian's eyes fluttered closed with bliss. \"And the little bastard still wanted me under the same roof. Fuck that. Those first weeks I smiled so hard, people thought I'd had a stroke.\"\n\nBen wasn't listening anymore; he was thinking about Rachel again. He pulled up stride when a car drew up outside.\n\nBrian stood cautiously. \"He's here. Sit down and be still damnit!\"\n\nBen took a seat and tried to control his fidgeting as Brian shook hands with the new arrival.\n\nThe man was mocha-skinned, in his mid to late forties with a shaved head that balanced glinting black sunglasses. Age certainly had not wearied him; he was a big guy, wearing blue-black jeans and a dark grey t-shirt stretched tightly across his broad chest.\n\nBen recognised the man had muscle strength maintained from years of hard work that would rival much younger opponents.\n\n\"Ben, meet Ahmed.\"\n\nAhmed nodded, dropping a shoulder bag on the couch by the door with a faded grey denim jacket. \"You're the boyfriend?\"\n\n\"And you're going to get her back?\" Ben shot at him. Brian's eyes flared warningly.\n\nAhmed's teeth flashed white in a rare grin. \"The passion of young love.\"\n\n\"There's more I have to tell you, Ben,\" Brian hastily intervened. \"I wanted to wait until-\"\n\n\"What haven't you told me?\"\n\nAhmed handed Brian and file, then leaned against the wall.\n\nBrian sat down and rifled through the folder, laying out some stills taken from surveillance. \"Is this man familiar?\"\n\nBen's chair scraped the ground as he scooted for a closer look. \"I've never seen this guy in my life,\" he said blankly. \"Who is he?\"\n\n\"We think he took Rachel.\"\n\n\"What?\" Ben said incredulously. \"How do they know each other?\"\n\n\"They met at least once,\" Brian said evasively.\n\nBen dismissively shook his head. \"She wouldn't cheat on me.\"\n\nAhmed disdainfully raised his eyes to the ceiling.\n\n\"He stepped in when Marcus harassed her at a caf\u00e9,\" Brian reluctantly explained.\n\n\"What?\" Ben thundered, angered by the memory. \"The good Samaritan?\" His surprise quickly burned into fresh jealousy. \"Did something else happen?\"\n\n\"Not that we know of. But we do know he's a bit of a ghost, known as 'Ray', among other names.\" Brian hesitated.\n\n\"So, it's what I suspected. The guy is ex-military. But not the wholesome, regimented kind. More the government's blind-spot. He did well, then quit young. That happens when they're physically or mentally broken beyond repair, or decide to turn their skills to more lucrative purposes.\"\n\nBen frowned heavily. \"But why would he want Rachel? I didn't pin her as a flirt.\"\n\n\"Of course she's not a flirt!\" Brian snarled, offended on Rachel's behalf. \"Marcus enlisted him to spy on her. The rest, we don't know.\"\n\nBen stiffened in his seat. \"Wait a fucking minute! You said Marcus wanted to help! You never said he was the reason-!\"\n\n\"Marcus is an imbecile, and he's remorseful. It won't do Rachel any good to get worked up about it now, Ben.\"\n\nBen's lip curled and he gave Brian an accusatory look. \"Is this where you start making his excuses?!\"\n\n\"You have to understand the kind of girl he's been exposed to his whole life. Rachel's different. Why she ever gave him a chance, I'll never understand-\"\n\nAhmed coughed loudly, and Brian reverted to the topic at hand.\n\n\"Anyway, I've worked with these types before,\" he admitted. \"They can't be reasoned with. It's like they have an empathetic screw loose, but it works. They're good at what they do.\"\n\n\"How can you know Ray is the same?\"\n\nBrian shifted uncomfortably. \"Marcus' parents were stinking rich. I took care of everything for them, including threats. When you have that kind of money, there's always a threat. But the heat died down when Marcus was born. All the kid knows is that I pick up the pieces of whatever mess, but he doesn't know about those kinds of pieces, if you get me.\"\n\nHe bit his lip and grabbed a pen from the table to toy with. \"I could be wrong, but I'm not. This guy triggers memories, and I always listen to my gut.\"\n\n\"Why don't the police know about him?\"\n\nBrian looked exasperated. \"I already fucking told you, my methods aren't exactly law abiding. I have advantage. With my help they'd find her quickly, but that's not a good thing. And...\" Brian hesitated. \"I always had a soft spot for Rachel. If the worst comes to worst...Well, I have my own ideas of justice.\"\n\n\"No responsible copper will make you that offer,\" Ahmed wryly commented.\n\nBen's stomach dropped at the possibility Rachel could be dead. \"But it still doesn't add up. If he's such a professional-\"\n\n\"Marcus monumentally fucked up by sending him her way. My guess is Ray got fixated whilst watching her. It happens. The fact he openly intervened in her defence is a red flag. No one asked him to protect her.\"\n\n\"So, some ex-army, cold-blooded murderer took Rachel simply because...?\" Ben couldn't finish the sentence. Rachel had been gone long enough for a lot of things to be wrong, and he couldn't stand it.\n\n\"She's probably still alive,\" Brian offered, crossing his fingers under the table. \"For him to swerve so far off course, he won't want it to be fleeting...\"\n\n\"Oh, God.\" Ben's mind was on fire with anxiety.\n\nSome lethal nutcase had his sweet girl. Rachel wasn't a coiled snake; she wouldn't know how to fight back. She was a gentle prey animal that would cower in a corner and fearfully watch the predator close in. She was his baby rabbit.\n\nBefore he could stop himself, Ben choked as he pictured Rachel chained to some bed; cold, starving and bloodied. Screaming through her abuse for him to help her.\n\nBrian's heart sank as he watched Ben shake like a drug addict. There was a terrible look on his face; the look of a man about to crack.\n\n\"I'm not sitting here while some freak continues to do his worst!\" Ben screamed, standing so abruptly he almost tipped the table onto Brian. \"I'm not waiting anymore! We have to do something, now!\"\n\n\"Cool it!\" Brian snapped, quite frightened by Ben's rage.\n\nWhilst Marcus' temper was mere theatrics, Ben's wasn't. Brian wanted to avoid a confrontation between Ben and Ahmed at all costs. Ahmed wouldn't go easy.\n\n\"We need to approach this with a lot of fucking caution.\"\n\n\"But-\"\n\nAhmed pushed from the wall and joined the table. Directing a scorching gaze at Ben, he sharply tapped Ray's photo. \"He can't know we're onto him. He can't expect us, not even a minute before. If he does, he'll snap her neck and go on the run. If she's with him.\"\n\n\"Also, the police will be keeping tabs on you,\" Brian hurriedly added. \"So, we have to tread carefully. Understand?\"\n\nBen reluctantly sat down again; his hands tightly clenched until his nails broke the skin of his palms. \"After what we know, how can you expect me to-!\"\n\n\"We know he moved to protect her,\" Ahmed quietly reasoned in a consoling tone that surprised Brian. \"If she is as mild-tempered as Brian says, then she is highly likely to be alive. The man is not a blood-thirsty maniac. I've met with someone who once used his services. Ray is efficient, without brutality.\"\n\n\"Unless you pay extra,\" Brian said unhelpfully, in business mode.\n\nBen drew a shaky breath. \"You know where he is?\"\n\n\"Ahmed is confident, though he couldn't get too close. It's an isolated area about eight hours away. The perfect nest for a...bad guy,\" Brian lamely concluded, realising it would hardly help Ben's temperament to say 'killer'.\n\n\"We move in 24 hours,\" Ahmed said.\n\n\"That's too long!\" Ben snarled.\n\nAhmed raised two fingers. \"I need specialised equipment, and you have a police problem. Unless you want us to retrieve her without you, you'll stick to my plan.\"\n\nBen's shirt was sweat-soaked. \"This is a fucking nightmare! I can't-! We have to call-\"\n\nTiring of the police topic, Brian grimly interjected. \"If he so much as senses a collective threat, especially law enforcement, he will kill her. There's also the possibility that she's not being kept with him. If he's taken out prematurely, she could suffocate or starve to death somewhere. We need to handle this.\"\n\n\"Well, it's all solved then, isn't it?\" Ben half-shouted, his tone filled with sarcasm. \"We'll find out everything he knows and safely retrieve Rachel, without the man knowing he's being watched?\"\n\nBrian closed his eyes. \"Just listen to me. We have to send in a lone individual to preoccupy him.\"\n\n\"That'll be me.\" Finally, Ben felt they were getting somewhere.\n\nAfter scornfully eyeing Ben's imposing physique, Ahmed chuckled and leaned back in his chair.\n\nBrian shook his head. \"Absolutely not. We need to engage him without appearing a threat.\"\n\n\"I'll take my chances.\"\n\nBrian irritably waved off Ben's foolish bravado. \"You're too dangerous - he'll shoot you on sight. The threat must be minimal to rouse his curiosity instead of his lethal instincts. It has to be someone stupid enough to venture out alone and unarmed.\"\n\nBen snorted incredulously. \"No one's that stupid! He'd never buy it; I certainly wouldn't.\"\n\n\"It's our best shot at getting close.\"\n\nBen thumped his fist to the table. \"Come on! It's not a matter of just finding any dunce! Ray would have to personally believe this person is dumb enough to approach him solo!\"\n\n\"Yes, he'll have to believe it.\"\n\nBen shook his head, wondering if he sat across idiots. \"No one is that witless.\"\n\nBrian winced. \"I know somebody.\"\n\n\"Then do you mind telling me,\" Ben bit out, struggling to maintain his composure, \"who can convince Ray they are so irretrievably stupid?\"\n\n\"Marcus.\"\n\n****\n\nRachel cried the whole way back to the picnic. Alone across the car's backseat, she wailed hopelessly into the gag for almost an hour while Ray packed up their picnic and went back to check for oversights. By the time Ray returned, Rachel's jaw was agony. But the physical pain was nothing compared to the ache through her chest.\n\nBen had been left in a terrible position; she'd ruined his life. Her own life was also ruined with a murderous madman fawning over her. And then there were various images of dead men seared into her brain that she knew she could never forget.\n\nOn the drive home, Ray didn't speak to her. He was clearly preoccupied with his own disturbed thoughts. After Ray parked in the driveway, Rachel curled up with a groan when the back door briskly opened. Ray pulled her from the seat and lifted her over his shoulder.\n\nWithout a word he carried her into the house, through the lounge, kitchen and down the stairs. He lowered her onto the bed and stood looking down at her.\n\n\"I never thought it would come to this,\" Ray frowned, thinking about the spontaneous triple homicide. His eyes were on Rachel, but he seemed to stare through her.\n\nRachel moaned bitterly and Ray snapped out of his daze to quickly undo the buckle behind her head.\n\n\"Ahh,\" Rachel exclaimed with pained eyes, her mouth wide open even with the gag removed.\n\nRay knew it would take a while for the ache to subside. Begrudgingly, he sat beside her on the bed and draped an arm around her shoulders.\n\n\"I don't blame you for running,\" he muttered against the top of her head. \"I'm going to untie your hands and feet, now. But if you mess with me, the gag will go back in and I'll leave you that way for the night. Understand?\"\n\n\"Ah huh,\" Rachel winced with a sad nod, gingerly easing her jaw shut. Ray tilted her face up and placed a featherlight kiss to the corner of her mouth.\n\n\"I'm sorry. I'm going to make dinner, then we'll have a talk.\"\n\nRachel was very close to bursting into tears again. 'A talk' implied something sinister, and she had no idea what could possibly be up for discussion that wouldn't worsen her situation. Unless he was going to kill her.\n\nMiserably massaging her cheeks, Rachel wished she was more apt at pretending. One attempt at deception got her literally fucked. She wished she was more hardened and conniving, like Ben's one-night-stand, Monica.\n\nFeeling more disheartened than ever, Rachel reflected that a girl like Monica would have probably found a way to escape and return with ten police cars in the first 24 hours. But here she was, almost a week later, a blubbering mess, offering no fight because she was afraid to die. It was pathetic.\n\nRay pursed his lips and exhaled heavily through his nose as Rachel started bawling. It wasn't anything he hadn't seen before, but for some reason it bothered him. Why did he care?\n\n\"I'm guessing you'd prefer to eat down here?\" he asked quietly. Rachel wretchedly nodded.\n\n\"Alright,\" he said, and went back upstairs. Upon returning half an hour later, he grit his teeth at the sight of Rachel curled up on the bed with her face in her hands.\n\n\"Come on, Rachel,\" he warned. \"Enough moping. This could have been avoided.\" He placed the tray of hot food on the small side table, then left her.\n\nSoon after, Rachel resentfully acknowledged she was quite hungry, not to mention exhausted from a combination of physical and emotional distress. Ignoring the ache left by the gag, she devoured Ray's good cooking regardless of the day's traumatic events. But the knot in her stomach resurfaced with Ray's return.\n\nHe'd changed clothes, and now wore a tight aqua t-shirt and brown jeans. It was a bizarrely coloured outfit that somehow worked.\n\nRay dropped a garbage bag on the floor. \"I need you to put your clothes in here, shoes included.\" His eyes flickered to the bed, where Rachel had left a bunch of soil marks. \"I'll have to change the sheets, too.\"\n\n\"Fine,\" Rachel muttered. A long moment passed, and she looked up to see Ray motionlessly watching her. \"You're not leaving?\"\n\nRay shook his head. \"I have to make sure it all goes. I'm not missing anything.\"\n\nThe statement seemed to carry a double-meaning. After one last imploring look, which faded to wretched dismay, Rachel slowly stood from the bed. She cast a paranoid glance up at Ray, who unblinkingly stared her down.",
        "\"Rachel, I will strip you myself, if I have to.\"\n\nOpting not to seductively unbutton the dress, Rachel hurriedly tugged it over her head and shoved it into the bag. An angry blush filled her cheeks, now she was left in underwear and sneakers, like a porn star. She clumsily kicked off the shoes and dumped them with her socks into the bag, furious with herself for not taking the shoes off before the dress.\n\nStalling, she timidly peeked up at Ray, who had managed to move two steps closer without her noticing. Rachel tried a last pleading look that gave him an instant erection.\n\n\"Everything,\" Ray heard himself say, distinctly aware the new order had little to do with evidence disposal. His heartbeat relentlessly thudded through his chest; he felt the blood pounding in his head and through his lower body.\n\nRachel wrung her hands, but swiftly complied when Ray shifted as though he was coming for her. With her eyes on the ceiling she unclasped her bra, and Ray's attention immediately settled on her tempting, round breasts the second they bobbed into view.\n\nRachel quickly released her ponytail and stroked long hair down her chest to act as a shield from Ray's heated gaze. Then she took a deep breath and quickly tugged down her panties and stepped out of them.\n\n\"There!\" she breathed, awkwardly covering herself with her hands. Regaining her senses, she hurriedly reached for the blanket to cover herself, wishing she'd had it in her hand before she undressed. Ray made a strange sound, and Rachel looked up as he rushed her.\n\n\"R-Ray!\" Rachel squeaked with fright, falling back to the bed with Ray on top of her. He seized her hair.\n\n\"Kiss me,\" he hoarsely demanded, tightening his hold when she tried to turn her face away. Losing patience, he took the initiative and forced their lips together.\n\nStartled, Rachel yelped against his mouth and slapped at his shoulders. Ray's other hand slid between them to knead her breasts. He groaned against her lips and tried to get his tongue past her teeth. But Rachel's jaw was stubbornly clamped, so Ray's hand left her hair to press her cheeks.\n\n\"AHH!\" Rachel loudly complained; the area still tender from the ball-gag.\n\nRay kissed her properly, pressed his hips forward and rolled them against Rachel's naked body. Her struggling stoked his passion, and he began to rhythmically grind in motion with the movement of his lips against hers.\n\nIt's official. You're a pervert. \n\nBut the mental admission didn't come with any horror or disgust. It was merely acknowledgement he was taking that path. It didn't feel wrong. All he needed was for her to stay calm.\n\nBut Rachel found being completely naked beneath a large clothed man excruciatingly vulnerable. She was so exposed, and recognised he was being forceful in a very different way to their previous times. When Ray relaxed his hold on her jaw to undo the front of his pants, Rachel tore her face free of his kiss.\n\n\"Stop!\" she shouted, frantically thrashing under him.\n\nRay restrained her hands and forced her back to the bed. He lay against her, using his weight to hold her down, but something very hard jabbed Rachel's hip and she panicked. He was going to rape her.\n\n\"No! STOP!\" she screamed, twisting desperately. \"Let me go! Don't rape me! Don't hurt me! PLEASE!\"\n\n\"For fuck's sake, Rachel!\" Ray growled and was gone in a flash.\n\nRachel dared a look and found him towering over the bed, looking incensed.\n\n\"I know what I am, and I'm not that guy!\" he thundered, though the way she cowered from his temper only made him angrier. \"I'm not a fucking rapist, alright?\"\n\nWith the knuckles of one hand pressed to her mouth, Rachel nodded fearfully, thinking she'd lately cried enough to affect climate change.\n\nRay threw up his arms with exasperation. \"I've been honest from the beginning! I don't know what else to tell you! Why can't you just ease into it?\"\n\n\"E-Ease into what?\" Rachel faltered, dragging the blanket over her.\n\nRay's emotions were controlled for the most part, but now for the first time he almost reminded her of Ben. His cheeks were flushed with guilty excitement and his eyes burned with unspoken frustration.\n\nTaken aback, Ray raked a hand through his hair. It was a good question. What exactly did he mean? Did he want a captive girlfriend? Where was this going?\n\nWhilst there were mysteries he grappled to understand; his urges were pretty clear. He was so hot for her, but once again, her antics killed the intimacy like a fucking snowstorm swept by his groin.\n\n\"You know what I'm capable of,\" he muttered, hating the level he stooped to. \"I'd like you to be more aware of that fact.\" Just let me fuck you in peace, for Christ's sake. \n\n\"You're going to kill me, if I don't have sex with you?\" she sobbed, again burying her face in her hands.\n\n\"That's not what I said!\" Came his savage reply.\n\nRachel braced, but nothing happened. A few very tense seconds ticked by, then she heard Ray leave and lock her in.\n\n*****\n\nThe kitchen was cleaned and there were no distracting tasks left. Seething, Ray restlessly paced the kitchen feeling as though he'd had his first lover's tiff with Rachel.\n\nSure, he stalked and abducted her from the boyfriend's apartment. He understood she had subsequently seen things that no civilian girl should ever witness. But he'd let Ben live and practically bent over backwards not to frighten her. And now he was humiliatingly aware he'd just resorted to an empty threat to get sex from a woman.\n\n\"Fuck!\" he snapped.\n\nClenching his fists, he considered punching something. Instead, he dropped to the floor to do push-ups. The burn in his arms felt good, but he was still frustrated. Not keeping count, he blankly watched the floor's surface approach and depart with every sharp lift.\n\nRay was bizarrely upset about how things soured after such an epic beginning. Rachel was being so damn difficult. She couldn't even pretend to want him for her own good. Unless...\n\nRay remembered what he wanted to talk to her about, and immediately rolled onto his back to consider his approach.\n\nWhen he opened the steel door, he tried not to look exasperated when Rachel skittishly backed into the bed. Obviously to avoid prolonged time alone with him, she'd stripped the sheets and added them to the garbage bag.\n\nThough she'd showered and washed her face, Rachel's cheeks were perpetually ruddy with distress, and her eyes and lips were lightly swollen. Damp auburn hair was softly tousled around her face and she wore the cute teal pyjama set that caught Ray's eye when he took her clothes from Ben's bedroom. Ray felt bad that he didn't mind the sight; he'd fuck her then and there, if she'd let him.\n\n\"Come upstairs.\" He spoke gently, wanting to keep things calm between them. \"We need to talk.\" Then he turned and ascended the staircase, hoping he wouldn't have to carry her up there kicking and screaming.\n\nBreathing deeply, Rachel reached the loungeroom and hovered nervously by the brown couch Ray sat upon. He patted the space beside him. \"Come on, I won't bite. This is important.\"\n\nRachel drearily sank down next to him, trying not to lurch away when he shifted close.\n\n\"Are you ready?\" he asked, pointing a remote to the TV facing them. It was almost like they were a couple, curling up to watch trash shows on a Saturday night.\n\nWhen the remote clicked, Rachel lifted her eyes and her breath lodged in her throat. With perfect clarity, she saw herself having sex with Ray. Despite the dim setting, the night-camera captured a lot of detail.\n\nFor a full minute that felt like an hour, Rachel's eyes were soiled with various snippets of herself passionately thrusting on top of Ray, wantonly arching to the ceiling while he ate her out, her leg tightly curled around his waist while he fucked her. The way she tried to push his head from her crotch looked more like she eagerly pressed his face deeper. Various times she appeared to be kissing him back, or sensually enthusiastic at the very least. Each clip had a time and date stamp.\n\nRay turned it off, feeling he'd made his point. It was a new experience; sitting and watching homemade porn with a girl. He couldn't help being aroused by the visuals or the idea of fucking whilst watching it, but his expression was stern when he looked at Rachel. She was speechless, and he could tell she was sickened.\n\nCheckmate, Rachel.\n\n\"Y-You recorded me,\" she said numbly.\n\n\"I've always kept a camera in there.\"\n\n\"Why?\"\n\n\"People are dangerously cunning when they're left alone. It's saved my hide more than once.\"\n\nFeeling thoroughly violated, Rachel closed her eyes. \"This is the worst thing anyone has done to me.\"\n\n\"Don't be ridiculous!\" Ray snapped, feeling she was probably right. \"I didn't plan this, it just happened. But it also happens to work in my favour.\"\n\nPaler than the time she first fainted, Rachel stared at him for an explanation.\n\n\"I have more than an hour's worth of us convincingly fooling around. I won't ever release or share it. But if you run away, I'll drop it onto every porn site on the globe with your full name attached. I'll also keep it as insurance in case you ever try to turn me in. I also have the picnic photos. No jury will convict me if this comes to light.\"\n\nThere was another, unspoken benefit for Ray. He felt he'd finally found a way to convince Rachel he wasn't out to kill her. There was no need with that footage in his possession.\n\nHoping to turn the disastrous situation to her benefit, Rachel dully gestured to the black screen. \"Now you have this, you can let me go.\"\n\n\"No. It doesn't work that way.\"\n\n\"So, you're just blackmailing me.\"\n\n\"Yes.\"\n\nDistraught, Rachel looked away, not believing she had enough water in her body to shed more tears, but flow they did. \"You can't do this,\" she wept. \"I was pretending!\"\n\nRay angrily turned her to face him. \"It wasn't a lie,\" he said harshly. \"You liked it. You liked me. That's what you need to reconcile with. You enjoyed it once, you can enjoy it again.\"\n\nAgain? Rachel shook her head. Though a teeny tiny part of her was relieved not to hear audio, the situation was still awful. It wasn't just the sex stuff; every minute she thought she was alone, she had been under his surveillance. She never had privacy. It was a horrible feeling.\n\nRay leaned close, gently breathing the scent of her hair. \"If you lighten up a little, I'll consider helping Ben.\"\n\n\"L-Lighten up?\"\n\n\"You know exactly what I mean.\"\n\n\"What? You mean I have to...\" Rachel suddenly clapped a hand over her mouth.\n\nIt was a combination of being ripped from a happy world, her terror in the woods, the dead men, the fatigue, her worries about Ben, and now the blackmail video. Rachel was hungry before, and now she felt immediately sick. It was all too much.\n\nRay began to rub her back, but saw the urgency in her eyes and ran for a bucket. He made it just in time and held it steady as Rachel retched into it.\n\n\"Hold this.\" Balancing the black bucket on her lap, Ray went to get a hand towel.\n\nFull of anguish and self-pity, Rachel squeezed her eyes shut, though tears continued to streak from beneath her eyelids. It stung and she wondered if it was possible to go blind from crying.\n\n\"Are you finished?\" Ray spoke by her ear, and she weakly nodded and the bucket was removed, and he wiped her face. Half a minute later she was lifted from the couch.\n\nCurled against his wide chest and unwilling to open her eyes, a distressed moan escaped Rachel as the horrible visual of herself fucking Ray played over and over in her mind. She couldn't decide which part she hated most, but the one with her ass perched in the air for Ray to devour was a strong contender.\n\nLimp with shame and defeat, she let Ray tuck her into bed. Then another warm, wet handtowel passed over her forehead and face.\n\nNow encompassed in a comforting, cotton embrace, Rachel was mildly aware of Ray moving around before he slipped in beside her.\n\n\"There's water by the bed, and some fruit,\" he murmured against her shoulder. \"Rachel, please tell me if you need anything.\"\n\nAware he wouldn't give anything she truly wanted, Rachel sniffed and made a withering sound. Ray's earlier words floated through her exhausted mind.\n\n'I'll consider helping Ben.'\n\nRachel lightly shuddered at the undeniable fact she would do anything to help him. On this revolting thought, she quickly fell into a depressed sleep, unaware that she wasn't in her downstairs bed."
    ],
    "authorname": "Bellie444",
    "tags": [
        "captive",
        "dominant",
        "kidnapper",
        "noncon",
        "obsessed",
        "prisoner",
        "redhead",
        "shygirl",
        "trapped",
        "noncon"
    ],
    "category": "NonConsent/Reluctance",
    "url": "https://www.literotica.com/s/voyeur-ch-08"
}
{
    "title": "Breaking Clich\u00e9s Ch. 02",
    "pages": [
        "Edited by Dark Star. Thanks!\n\nNote: This story, like most the Breaking Clich\u00e9s stories, is slightly edgier than my other stories. If you absolutely need your erotic stories to be pure vanilla, then I recommend that you read some of my other stories.\n\n**************\n\nSince that fateful first day with Scarlett, where she rocked my body and my entire world as well as forcing me to acknowledge some of the darker aspects of my psyche, I've lived in a sort of trance. I'm fairly sure my students noticed a change in my behavior, or rather my attitude. Many times in class I had to snap out of some spontaneous reverie. Most of the times, the reveries looked exactly like what was happening right in front of my eyes. \n\nThis morning Scarlett had woken up before me as usual. I had been really surprised to learn that she was a morning person! After the first few nights we had spent together at her place, she dressed in silence, and in the dark, before going downstairs to the kitchen. Then one morning as she arose from bed, I'd asked her to open the blinds very slightly. I had still been groggy from sleep when I was nearly blinded by daylight. As I settled back comfortably on two pillows, looking at her naked body, Scarlett gave me a huge grin. \n\nBy now, this routine had become a morning ritual, and I began most days by admiring the almost unbelievable body of my girlfriend, who was about fifteen years my junior. Never, in my wildest dreams, had I imagined that I would end up with such a young and beautiful girl! Heck, she was exactly the same age as my students! She studied sociology while I taught philosophy, but she has been teasing me with the possibility of taking a philosophy class next semester. \"Wanna try and imagine what I would choose to wear to your classes, professor?\" she asked last week, grinning, and in that high pitched voice she uses when calling me professor. \n\nThis morning I drank in her beauty for two very precious minutes. Scarlett's body made me think about a highly controlled, but very powerful explosion of femininity and lust. She is rather slender overall, but everywhere it counts, her body looks like it is fighting to constrain some intense pressure. Small feet and delicate shins, her lower legs are lean, but her thighs are definitely well-rounded and smooth. Her hips flare noticeably and her ass looks like two bubbles of champagne. Yet she doesn't really have wide, womanly hips. All her femininity seems contained, on the verge of being unleashed. Her belly is soft and smooth, right on the demarcation between tight and round, and her waist is definitely small. Sometimes, when the light and angle are just right, Scarlett looks like she is wearing a corset even when completely nude. \n\nAbove her waist, on the other hand, is where the containment has failed. Her breasts are fully realized explosions of flesh. A glorious bloom of womanly perfection. I simply couldn't lie or dissemble about it; Scarlett's breasts were the first things I noticed when I saw her for the first time. They looked impossible or, at least, fake, but they weren't. Instead, they were magnificent mammaries of mammoth-sized mammalian flesh. When I told her that a few nights ago, she laughed so hard she collapsed on me. She had been riding my cock, sitting on my supine form. With my hands overflowing with her breasts, my eyes glued to her dancing nipples, the alliteration just popped into my mind and I blurted it out. \n\nThis morning, while watching those same gorgeous breasts dancing in front of my eyes, I still was having trouble believing that they existed! Large didn't even begin to do them justice. They violated every law of man,and nature. They were so exquisite and tempting that they should be declared morally wrong. Either that, or the entirety of men and lesbians should come together to enact a law forcing Scarlett to always walk around topless! \n\nAs she finished selecting her bra, she walked slowly toward me, making her breasts jiggle from side to side. I don't know how she did that while barely moving her shoulders. It was as if her breasts had a life and a mind of their own. I should talk about that possibility with my colleagues in artificial intelligence research: \"Hey guys! Do you think that breasts can be intelligent?\" I chuckled softly at the thought as Scarlett knelt over me, and brought one of her breasts within reach of my mouth. As I sucked her nipple into my mouth, my entire body polarized and arched toward her. Her sweet aroma, the softness of her skin against my face and her already hard nipple in my mouth... I was ready, completely and without reservation, to die right there with a big grin on my face, but I didn't, of course. However, as I raised my arms to grab her, I realized that she had placed her hands on either side of me, using the blanket to pin me against the bed. \"I have an early class today, love. I'll be back soon, and if you promise me you won't get up from that bed, I'll let you watch as I dress.\"\n\nThus, the tradition began. I saw her put on a set of Axami lingerie, a mix of black and white and pink that really, really worked for her. The bra had a snow white background over which a black floral designed was laced. There were a few pink accents and ribbons that popped up brightly over the black and white. Her panties were similarly styled, but there the lace wasn't sown in completely and so floated freely. It wasn't transparent at all, although it let you think that it was. When she attached the garters to her hose, the effect was amazing. \n\nBefore I could stare at her for hours, she had put on a skirt, a light shirt, and was gone, blowing me a kiss before disappearing down the stairs. A few minutes later, she was out the door, and I found myself all alone in the house she was renting. It was very small and very old, but it was also very cozy. Her bedroom took the entire second floor, trapped as it was between the sloping walls of the roof. Switching on the light, I looked at the wall of wardrobe in front of me. She had left the drapes, which she used in place of doors, fully open and I was stunned at the amount of clothes Scarlett had. In the first few weeks I spent with her, I had discovered her expansive collection of clothing and lingerie. From leather, to spandex and latex, all the way to cotton and wool, Scarlett had amassed a very impressive collection. Just about everything she owned was sexy, and a large part of it was outrageously sexy. \n\nIn the far corner, I could see the leather top she had worn at the auto show. Even with all the time I've spent with her since that day, I sometimes doubt that day had really happened. I had originally met Scarlett as one of the environmentalist hippies at a rally, where she had mocked me and my muscle car. She had gotten the better of me on that day, paralyzed as I had been by the sight of her magnificent breasts. Then, a few days later, we met again in my college's library, and this time I was ready for her easy arguments. When I realized that she was trying to seduce me in order to distract me, I kept going and decimated her arguments. After that, I invited her to the car show I was participating in and left. She actually came, dressed like a heavy metal fantasy, and that was the meeting that changed my life. \n\nToday, I got up from the bed naked and knelt in front of the many boxes of lingerie again. It felt strange rummaging through her most personal items, but I knew I was welcome to do it. In fact, I was more than welcome. One morning, out of the blue, Scarlett told me something that took me by surprise: \"John, from now on you get to decide what I wear.\" She had told me that standing at the foot of the bed, completely naked in the morning light. Of course I didn't do it everyday, but when I decided to, Scarlett was forced to wear what I wanted. \n\nThere were some exceptions of course, with her family and a few old friends, but otherwise I had free reign. Since then, it had been a thrill to ask her to dress very sexily on a few occasions when it made her feel a bit anxious.\n\nI took a deep breath inside one of my favorite bras, an Empreinte Irina Demi Bra in deep plum color. After savoring her scent, I looked at the tag, already knowing what I would find: 34F. That was just unbelievable. Licking my lips, I replaced the bra and put on a pair of jeans, with nothing underneath. Since hooking up with Scarlett I had begun to follow her trend of dressing as lightly as possible when we were alone together. It had been strange, but since she sometimes tried to wear less clothing than I did, it motivated me to dress very lightly indeed. \n\nWhen I walked down to the kitchen, I saw that she had left her panties on a chair, with a note on the table: \"I finally decided not to wear them. Think of me today! Scarlett. Xxx\" Below that teasing note she had added: \"P.S. Do you think I should tell my psycho-sociology professor that I'm not wearing anything under my skirt? Send me a text! :-) \" I laughed out loud, getting my phone from my pocket. A quick \"Yes\" later, I imagined my colleague, poor old Ferdinand, reacting to the sight of my girlfriend's pussy flashing from underneath her desk. \n\nAs I finished my breakfast, as I looked around Scarlett's house, I felt a remarkable amount of gratitude towards that girl. I didn't feel worthy of such a fantastic body, or of such a naughty and playful mind, but the most surprising part of it all was that my intuition about her had been right. After our first bout of incredibly intense sex inside and outside of my old Charger, I had a feeling that Scarlett was going to be more to me than just an amazing sex partner. Now I knew that I wanted more than just her body, I wanted her. I was falling in love with her more and more everyday, despite the fact that I used to believe that older men falling for younger women were nothing more than lechers. Oh, how little did I know!\n\nMy mind spent the entire day wandering through erotic images of Scarlett, either fantasized or remembered. I brought her panties with me, leaving them in my bag. The bag was with me during my class, and just knowing that they were there lightened my mood through the long and rather boring, but mandatory historical portion of the course. Such historical information was sometimes necessary, but seemed to me to detract from actual philosophical work. In any case, I lived through it, like I do every year, looking forward to an evening alone with Scarlett. \n\nDuring dinner she told me about her little experiment, as she called it, during her morning class with Ferdinand. Apparently the poor old fellow's face had turned quite red. Lucky for her she had controlled her laughter, but she could hear the students behind her talking. They hadn't seen her opening her legs too wide as she bent down to get something in her bag, but instead believed that Ferdinand had simply looked at her cleavage too long. In fact, he had been looking much lower than that. He had remained red faced and flustered for quite a while and spent the rest of the class pointedly not looking at her. Even when she asked a question, legs demurely crossed, he managed to answer without looking into her eyes, or anywhere else for that matter. \n\nAs I watched her laugh, I knew that she was enjoying herself a lot. One of the things that surprised me the most as I discovered more and more about Scarlett, was that the remarkable confidence she had about her body and her sexuality was relatively new to her. When I first met her, despite her youthfulness, she seemed like a woman in full control of her body, appearance and the effect it had on men. She was largely in control, but she hadn't been for long. She used to see her large breasts as the bane of her existence. That persisted until one of her boyfriends, quite a few years older than she and a true breast lover, had shown her just how much power she could wield over men. \n\nShe had dumped him a few months into their relationship, a little over a year ago now, but his presence in her life had changed everything. At first she considered her breasts as gifts boys and men had to work to deserve, giving her a lot of power. Soon though, Scarlett saw this game as quite childish. Since then, it was the interplay of power between lovers that drove and fascinated her. In the case of her psych-sociology professor, Ferdinand hadn't been up to the challenge. Then again, before meeting her, I would have said the same thing about me. The way she managed to get under my skin and force me to unleash desires that had been there all along, unbeknownst to me, was both exciting and puzzling. \n\n\"I have an idea!\" she said, bringing me back to the present. \"Why don't we go and see that new movie tonight?\" \n\n\"The one about the serial murderer?\" I asked, already fairly certain that she was taking about that one. \n\n\"Yep!\" she replied.\n\n\"Isn't that a horror movie?\" I asked.\n\n\"Yes. Is that a problem for you?\" she paused, seeing my hesitation. \"What? Are you saying you're afraid of horror movies? Isn't your impressive rational mind up to the task of protecting your from base, irrational fears?\" she asked, grinning at me. \n\nI grinned, not rising to the bait. \"Be that as it may, it's entirely possible that I don't like such movies, just like you don't like Jazz music. What's up with that anyway? Everybody loves classical Jazz!\" was my retort.\n\n\"Ha!\" she laughed, seeing right through my attempt at deflection. \"Oh my God! You're really afraid of horror movies!\" she said, incredulous that such a thing could be so.\n\nShe got up from the table and told me that there was a late showing at 9:30. We had plenty of time to get there. Scarlett then kissed me on the head and bounced up to her room to change, not even waiting for my answer. Still at the table, I grinned, shaking my head. Luckily for me, I wasn't all that afraid of horror movies, but I was also aware that my rational mind wasn't always up to the task of controlling my emotions. I sighed and groaned, knowing that it was going to be a rough night. \n\nLittle did I know just how rough it was going to be.\n\nAt the very least, I intended to maximize my own enjoyment tonight. Still at the table, I called to Scarlett: \"Do you think that you're allowed to dress yourself tonight?\" \n\nI smiled as I heard a quick, very light titter coming from her room. Then, after a brief pause, she replied: \"Of course not. I'm completely nude and waiting for you.\"\n\nI grinned, knowing that she wasn't completely nude, but I was now hearing her undressing quickly. I could have told her: \"Wait for me to choose what you'll wear!\", but I didn't. By asking her if she thought she was allowed to choose, I was bringing us both into this world of domination and submission she so loved. I was pretty sure she was grinning right now, undressing in her room. \n\nAs I climbed the stairs slowly, making sure each of my footsteps thumped loudly, I closed my eyes briefly, my mind savoring in advance, the sight I was going to discover. Standing at the top of the stairs, I turned and looked at Scarlett, who was now completely nude indeed. She was standing straight, her hands behind her back and her legs crossed, which emphasized the curves of her hips. \n\nHer breasts didn't need any emphasis, but I knew she was arching her upper body, pushing those massive mounds upwards and toward me. She had even placed herself so that the mirror on the wall would allow me to see her from the back as well.\n\nHer head was inclined slightly downward and to the side, affecting a subtle, but very submissive pose. Scarlett was anything but a submissive person in real life, but playing one in our sex life was one of her biggest turn-ons. \n\nI didn't say a word, just admired her beauty for a couple of minutes. This silence, relatively long as I stared at her shamelessly, would have made most women and all girls feel very nervous. Scarlett simply stood there, the intertwined flow of her curves all present for me to see. During those minutes, I vowed to bury my face between her ass cheeks as soon as I was able. The strangest part of it all was that I could have done it right then and there. I could have asked her to turn around and lay down on the bed, ass up. I very nearly did! Instead, I controlled my urge and turned toward her clothes. \n\nI selected a dress that was way too fancy for the movies, but I didn't care. The first time I had seen it on the clothes hanger a few weeks ago, I couldn't even figure out how it was supposed to be worn, but given that it was long and didn't contain all that much fabric, I chose it for tonight. It was bright red, cut very strangely, and I couldn't wait for Scarlett to put it on in front of me! After laying it on the bed, walking very close to Scarlett's magnificent naked body, I resisted temptation again and went back for lingerie. \n\nFirst, I selected an equally bright red bra from Aubade, called Belle en Cavalle. It took me a minute to figure out that this was a quarter cup bra, and that it wouldn't even cover her nipples. Was it decent? Not at all. Had she chosen to go see a horror movie? Yes. And had she given me permission to choose her clothing? Yeppirs. When I threw it on the bed, I heard Scarlett sigh as she saw it. It was probably a bra she wore exclusively for sex and foreplay, but that sigh couldn't go by unchallenged. \n\nI stood up slowly and walked right up to her. \"Is there a problem?\" I asked. She simply shook her head, keeping her eyes cast downward as we played our game. \"I certainly hope not! Are you afraid your nipples are going to poke through the dress?\" I asked. She nodded. \"Good! I plan on stimulating them all night long, and give all the other people at the cinema a sight to remember.\" I growled in a whisper into her ear.\n\nAs I turned back to the lingerie boxes, I grinned. I was beginning to like this domination and submission game. Standing up, I said that she would wear the panties she had left on the table this morning, which I had carried with me all day. Looking up, she grinned at the thought of her panties being with me today. A couple of minute later she was dressed, and the sight was breathtaking to behold.\n\nThe dress had only one shoulder, as the stretching material curved down and under her other arm. There was an open circle exposing her skin on her left side and waist, and the long dress had a single cut on her right side that went fairly high on her thigh. The dress flowed down very low, but the slit made it so that her leg tattoo was easily seen. The tattooed anklet and chain was rising up and around her calf and bloomed into an explosion of black roses on her thigh. The dress seemed to be made explicitly to display her tattoo. Up top, the bra happened to match the dress' color exceedingly well, as the reds fit and the visible bra strap added to the effect. \n\nScarlett whispered: \"Wow! That's a very nice combination.\"\n\n\"Of course! I chose it for you.\" I said, winking at her through the glass. \n\nShe grinned back and turned to kiss me on the lips. Looking at the mirror again, seeing the both of us, she said: \"I look like an escort!\"\n\n\"Yes, like a thousand dollar an hour escort!\" I said, laughing. \n\n\"Yes, and this escort has to take it all off now.\" She laughed when she saw my face. \"Oh, poor thing!,\" she said, teasing me. \"You think I don't want to wear it? Of course I do, but I really want to take a shower first. A long shower.\"\n\nWe went back downstairs and I grabbed my book while I was waiting for her. She really did take a long shower, and I had no idea why, but when she paraded naked in front of me before going back up to her room, I forgot to ask. Soon, she came back down dressed as she had been earlier, but with one addition. Above her tattoo, high on her thigh, she had wrapped a fine silver chain. It hugged her skin very snugly in a circle, but on the outside of her leg there was an additional chain that looped down. It was very delicate and extraordinarily sexy. ",
        "In the car, Scarlett asked me to go to a cinema outside of town because of the way she was dressed. \"I really like what you chose for me, but this is borderline slutty.\" she said. I laughed and agreed, always looking for a reason to take road trips, short or long. \n\nAs we got out of the cinema, hours later, I have to say that I acquitted myself decently enough during the movie. Of course, being able to slip my hand inside her dress and play with her pussy was a big help. As we walked out of the cinema and through the large hall, we could see most people turning their heads to look at Scarlett. Their gazes were locked onto her remarkable body and stunning dress, especially her nipples which seemed to be perpetually hard. We remained completely serious, as if nothing special was going on, until we broke out laughing when we finally got outside. \n\nI took a few deep breaths as we walked to the car to try and clear my head of some of the awful images we'd seen in the movie, but I certainly hadn't made a fool out of myself in there. In the end, Scarlett had been twice frustrated. Clearly she had been hoping to see me scared out of my wits, and the movie had turned out to be quite bad. \n\nSo as I unlocked the door of my 1968 Charger and opened it for her, I was quite happy. I also got a nice peak at Scarlett's panties as she sat down in the passenger's seat. \"Ahhh,\" I thought, grinning, \"Getting peaks of panties! Just another benefit of having an old car.\" Old and low muscle cars would do that for you, if you convinced beautiful girls with short or slit skirts to sit in them. I was smiling as I walked around the car, drumming my fingers on the fenders. Happy as a child with no worries, I sat down in my seat and looked at my gorgeous girlfriend, who had mischief in her eyes. \"I have an idea!\" she said. \"Wanna try to really face your fears?\"\n\n\"Oh no!\" I said, over-emphasizing the emotion. \"What crazy plan has your unique mind hatched now?\"\n\n\"There's a haunted house about half an hour from here! Wanna go there and really test your control over your fears?\"\n\n\"What? A haunted house? Come on Scarlett!\" I said, shaking my head. \n\n\"Well, you may be convinced that it's all fake, but I guarantee that you'll be afraid in there. Please?! I'll make it worth your while!\" she said, grinning and looking down at her lap. Pulling the dress to the left, she forced it open at the top of the slit. Then, when she opened her thighs I was expecting to see her panties again.\n\nHowever, as my eyes darted to look at her revealed treasures, I realized that Scarlett had somehow managed to remove her panties as I had walked around the car! Gone were her panties, and instead her white, completely shaven pussy showed against the background of the black seat and red dress even in the dim light inside the car. \n\nIn that moment, I knew we were going to that damned haunted house! I'd been wanting to fuck her all day long and we didn't manage to find enough time to do it. Faking reluctance, I said: \"That's not testing your fears, it's testing your credulity.\" I sighed dramatically and asked: \"Is it really that far from here? Why don't you open the dash compartment and give me the map.\"\n\nWhen she did, I threw the map on the backseat. It only took her a moment to understand why. With the little door opened, the light spilling from the glove compartment was shining directly between her legs. She laughed, keeping her legs open, and said: \"Naughty John! Just get us there safely, otherwise I'll close my legs tighter than a pair of vise grips!\" \n\nSo we drove to that supposedly haunted house in the middle of the night. I was ambivalent about the haunted house thing. My rational adult mind knew perfectly well that there wasn't such a thing as a haunted house, and that our fears were caused by our own imaginations. On the other hand, I was also fully aware that I had a very vivid imagination. Years of dungeons and dragons as well as my fair share of horror movies had honed my creative abilities when it came to horror to a remarkable degree. Yet on the other hand again, it looked like I needed this tonight. An hour-long road trip in the middle of the night with a panty less Scarlett in a quarter cup bra was something precious as well. \n\nThe summer night was beautiful, and while my Charger wasn't a convertible, it was extremely enjoyable. My hand spent long, delicious moments on her thigh and flirted with her pussy quite a few times. It was clear that Scarlett was really looking forward to this, as her smiles were bright, and her conversation flowing. At one point, deep in the middle of a very dark rural area, Scarlett asked me to slow down. A minute later she spotted the house, far from the road in the middle of a dark field. I felt my spirits sinking. The place looked really awful, right out of a horror movie. I stopped the car, took a deep breath and stepped out onto the damp field. \n\nScarlett was still in the car and I realized that she was removing her bra. When she got out of the car, all she had on were her shoes and her dress. As dark as it was I couldn't see much, but I was already feeling the first stirrings of desire. Soon we were walking towards the house in full darkness. Running to catch up with her, I asked: \"Are you sure about this?\"\n\n\"Of course I am! Now come on, I want to show you where they buried the dog.\" she replied.\n\n\"Of course.\" I responded, sighing. \n\nI couldn't see much, but I could hear the smile in her voice. Scarlett took my hand and pulled me with her. From up close, the house was even worse than I had thought. It was easily 150 years old, and in a sorry state of disrepair. A sliver of a moon and stars were all we had for light, but it was clear that it had been abandoned for a long time. Right in front of the porch, Scarlett stopped and began looking at the ground. \"Help me look for it!\" she asked. I soon found out that she was talking about the dog's tail. Apparently, the previous owners buried their dog in front of the door and left its tail sticking out of the ground. Why? To remind everybody that came to visit that the dog was dead, of course. Lovely. \n\nA few moments later we did find something that looked exactly like a dog's tail sticking out of the ground. \"See! I told you this place was really haunted!\" Scarlett said in an excited voice. I didn't even bother to reply to her obviously inconsistent conclusion, but when I looked up toward the partly opened door I had to admit, to myself at least, that I was feeling a bit nervous. I didn't want to go in. Trying my best to force rationality upon my emotions, I stepped forward in front of Scarlett and opened the door. \n\nThe creaking noise was classic, although I had to push so hard that I broke the door. Scarlett followed me closely, and I felt her hand on my back. As we stood there in silence, trying in vain to let our eyes adjust, I definitely felt a thrill and fear. \"We're in the kitchen, and if I remember correctly, the room where the woman died is right above us.\" Scarlett said. \"Apparently the neighbors found her because the odors attracted too many wild dogs.\" Looking up, I tried to decide if this was true or not, and if I wanted to stay here. I knew the fact that a person had died here a long time ago had no bearing on what could happen now. I knew that, for a fact. Yet my mind was already following impossible paths of ancient fears and superstitions. \n\nTaking a deep breath, I noticed a distinct smell of rotting meat. A dead bird, surely. What else could it be? Slowly, carefully, Scarlett moved deeper into the house and I had to follow. I could see her silhouette in front of me, sexy as Catwoman, but there was a war going on in my mind between lust and fear. I wanted to grab her and fuck her right here, and I also wanted to get the Hell out of this damned place. I couldn't do both.\n\nScarlett's sharp intake of breath startled me. \"Did you hear that?\" she asked. I hadn't heard anything, but I was now doing my best to focus my attention on any suspicious sound. Then we heard it again, a definite creak coming from upstairs. Scarlett whirled around and ran into me, hugging me tightly. I felt her hard nipples poking into my chest. Her own fear triggered mine, yet her warm, soft body in my arms was fighting against it. \n\nI had learned a long time ago that as soon as I was sexually aroused, my appetite would disappear. Looks like there was a similar fight going on right now inside me between lust and fear. Holding her tight against me with a hand on her back, I let my other hand slide all the way down to her ass and I cupped one of her cheeks very hard. It worked, and my fear receded, a bit. Soon, in the now perfect silence, Scarlett kissed my neck and released her hold on me. \"Come, let's go see what made that sound!\" she said, excitedly. She was clearly very agitated and it was obvious that fear was driving her to higher levels of excitation. Letting go of my hand, she walked away looking for the stairs. \n\nHer first step onto the staircase was silent, and so was her second. The third step was an entirely different matter, creaking loudly under her weight. \"Don't you think that that sounded exactly like the creak we heard earlier?\" she asked. I hadn't really thought too much about it, but now that she mentioned it.\n\n\"Er, not really,\" I said, unconvinced, as my mind raced with the possibility that someone was up there. \n\nWithout replying, Scarlett kept going up the very steep staircase. Looking upwards, all I could see was the curve of her hips inches from my face. After I stepped over the third stair, I said: \"Wait a second! I think I heard something!\" Scarlett paused, frozen like a deer in headlights. Very quickly I pushed her dress upwards to her waist and buried my face between her ass cheeks. As I kept pushing, Scarlett fell forward and ended up on all fours on the stairs. Her moan was the first sweet sound I'd heard all night, and as I devoured her pussy and teased her asshole, I felt her pushing back against my face. Discovering that she was already wet, I got another dose of arousal and I was now winning the war against fear!\n\nFor a few moments, Scarlett reached behind her and grabbed a fistful of my hair, pulling me more tightly against her ass. I tasted her pussy again and knew that she was not just a little wet. The warm wave of her girl cum hit my opened mouth and I drank all of it. Holding my face very deep in her cleft, I pushed in hard, driving my tongue as deep inside of her as I could. The feeling of her rounded buttocks against both of my cheeks was intoxicating. I still couldn't understand how her ass could be so round and soft, yet so firm at the same time. When I had to pull back to breathe, I darted my tongue upwards and flicked it against her rosebud. I was in heaven, not a care or a fear in the world, but breaking the near silence, Scarlett said: \"We'll have time for this later. Come up now!\", releasing my head and moving quickly up as I stood there a bit dazed by her sudden escape. \n\nWhen I joined her on the second floor, I knew my cock was pretty hard, but pretty soon fear made that erection go away. On our left was what looked like a child's bed, and a few old toys were scattered on the floor. Across the small room was a closed door, which should lead to the room where the woman had died. Scarlett looked at me and grabbed my hand, pulling me towards the door. My heart sped up and I knew I was in the first stages of my fight or flight response. Rationality at this point, dearly loved as it was, was useless. \n\nScarlett got to the door first and grabbed the handle, twisting it with a loud squeak. Pushing slowly, she peeked inside, then froze and moved back. \"It looks like there's a body on the bed!\" she whispered, clearly afraid. \n\nI felt a pulse of fear hitting my stomach, but then I felt my mind rebelling against that fear with a mighty push back of rationality. \"Oh come on now! There's no way a body would stay so long out here in this day and age!\" I reasoned with myself, but the movie we had seen was still fresh in my mind, and I knew that lust hadn't washed all of my fears away. Moving to the door I looked in, not pushing the door any further. Backlit by the light coming in through the window, the shape on the bed did look like a body, but I was sure that it was just a coincidence. \"However, that really did look like old dry hair.\"\n\nPulling back from the door, I looked at Scarlett. My night adjusted eyes allowed me to see that she still hadn't pushed her dress back down. Her creamy white thighs, smooth belly and white pussy were clearly visible. Looking up, I could see the lust burning in her eyes. I could see that she was excited, or rather agitated. She was very keyed-up, both from lust and from fear. In one quick move, I closed the short distance between us and grabbed the back of her neck to pull her head against mine for a kiss while I grabbed her pussy with my other hand. In response, she molded her body against mine, passion burning hot against my hand and mouth. I was ready to take her then and there, in that dingy room next to what could be a corpse. \n\nHowever, to my utter astonishment, Scarlett had other ideas. Without warning, she pushed me away and told me that she really wanted to see what was on the other side of the door. Managing to refrain from taking her by force, which she would have loved, I took a few deep breaths instead. I stood there, staring at her, and I could see that she was turned on even more by the ferocity that I was keeping in check. Eventually, I turned back toward the door. \n\nSeconds later, when I pushed the door fully open, I got the worst fright of my entire life. Not only was there a body on the bed, but it rose up! Its desiccated head and dirty white hair moving up and toward me! For a brief moment, I swore I could see the moonlight from the window shining through the ribs of the dead woman. I screamed aloud, \"Fuck!\" and stumbled backwards, a deep panic taking complete control of my mind and body. My next heartbeat was physically painful, as my body was driven into full overdrive mode. My fight or flight response was now going full tilt as well, both at the same time. I felt a surge of adrenaline, and I didn't know if it was to run faster, or to plunge in and fight the evil undead creature. Looking around for Scarlett, I was ready to throw her on my shoulder and get the Hell out of there. \n\nI found Scarlett next to the child's bed, naked and laughing like a hyena. \n\nI closed my eyes and my mind reeled. My body hurt with frustration and I screamed again, this time in anger, as my body still shook with fear. By the time I opened my eyes, Scarlett was on her knees in front of me, my entire limp cock inside of her mouth. I could even hear her chuckling as she tried to coax my limp cock back to life again. Turning around and looking inside the door, I could now clearly see the rope attached to the dummy, the rope which had pulled it upwards as I had opened the door. The face was nothing but a cheap mask with plastic hair. This was all a set-up, a place used to scare people who didn't know about it, and Scarlett had definitely known about it. \n\nOnce again, just like our first encounter, Scarlett had brought me to a state of total abnormality. Never in my life had I been so afraid, shocked and swiftly aroused at the same time. Later I would put all the pieces together: Scarlett loved rough sex, knew that it was not really my thing and she'd had to find a way to goad me into it. Just then, I didn't know or care about this. All I knew was that I had the sexiest and most gorgeous woman I had never known kneeling naked in front of me, my cock inside her mouth, and that soon it would be going down her throat. My blood was brimming over with adrenaline, and I knew that Scarlett was going to get her wish. \n\nI took her head with both hands and grabbed her hair very hard. She stopped laughing and I think I heard her take a deep breath. I didn't care. \"You fucking little bitch!\" I said in a deep, raspy voice. My cock was filling with blood faster than when I was thirteen years old. I pulled her toward me and felt my nearly hard cock hitting the back of her throat. Letting her pull back and suck my cock for a few moments, I grabbed her hair hard again when I knew I was fully hard. I then moved one of my hands from the back of her hair to her jaw, then to her chin. \n\nAfter forcing her mouth all the way open, I used my other hand to squeeze the fistful of hair very hard. I pushed my cock all the way back in, pushing past the back of her mouth and all the way into her throat. I stopped only when her nose was flattened against my belly. \n\nI don't know how long I kept her there, not moving. I was in a white haze of fear and pleasure, with my anger tracing bright red streaks through that haze. I felt virulent lust washing away my fear. When I felt her hand squeezing my thigh I pulled back, letting her breathe only once before pushing all the way back inside. Soon I was fucking her face and throat, using her like a sex toy. I told her so: \"Tonight you're my fuck toy... You're not my lover or my girlfriend... You're not the woman so generous with your nudity, and your sexuality. You're not the woman I love, nor the woman who touched me more deeply than all the other women I've known before. Tonight, you're my fuck toy.\" My words were both extremely vulgar and brutal, yet I had enough control over myself now that I knew she would also hear the rest of it. \n\nUsually Scarlett wasn't the type of woman to make a lot of gurgling noises when sucking or deepthroating, and that was quite alright with me. But now my intensity was pushing her skills to the limit and it felt and sounded like I was pushing her too far. Her mouth sounded like a wet pussy being forced open and penetrated, and a few times she even sounded like she was going to gag, but she didn't and took my intensity without broaching. \n\nSoon I felt her gag a few times, hearing the wet sounds of a woman's mouth and throat being abused. I had been intense when I first took her throat, with her lying on her back on the hood of my car, but this was something more. Anger and frustration were fueling my lust, and I was taking her as hard as I could. The feeling was tremendously intoxicating. I truly was fucking her face, using her throat as a pussy solely for my pleasure. For the first time in my life, the gagging and wet slurping saliva sounds were turning me on, a lot. \n\nMoving my hands around her head, I pulled them much closer to her face than the back of her head. My thumbs were in the recess between her eyes and nose, my palms were covering her cheeks and my fingers were grabbing on to her skull, hard. I kept on fucking her face, my mind reveling in the feelings and sounds of this, the most intense deepthroating experience of my life. \n\nWhen I finally stopped and pulled out, I nearly screamed, \"Oh, You're so going to get it this time! Damned bitch!\" Even in the dim light I could see the effect of my words on her face. The minx was excessively excited with a huge grin on her wet face. I was only beginning to discover this wilder side of her, and without even thinking about it, I knew I was going to give into it today. \n\nIn some of the sexual games we had played, we had chosen a safe word. When she had told me what word she had chosen, I had been surprised. The word was \"love\". Until tonight, she had never said it in that context. Never. I had a feeling that tonight, maybe... I so wanted to push her that far tonight. My feelings were so confused and intense that my entire body shook, and I wanted to ravage her body as I took my pleasure every which way I damned well pleased. \n\nI reached down, grabbing her roughly by the shoulder. Once she was standing up, she looked at me, still grinning, her eyes wide with lust. Looking at her nipples, attracted by reflected light, I saw that she had very small nipple rings. Despite her love for sexy things and domination, Scarlett didn't have a single piercing. The two fine and silvery rings around her nipples must then be squeezed there, which explained why her nipples had stayed hard all evening. ",
        "Shaking my head, I then twisted her around and grabbed one of her buttocks very hard. She cried out, half in genuine pain and half in surprise. Then I slipped my hand deeper between her cheeks and closed my hand over her pussy and anus, very hard. \n\nGrabbing her shoulder with my other hand again, I pushed her forward, forcing her to bend down in the process. She knelt on the little bed, and I stared at her a moment. She was magnificent, sexy as all get out, and I could see the fine chain on her thigh, gleaming despite the low light. Her long dark hair, free and wild after the rough oral, covered most of her back. The little bed she had knelt on was just underneath the missing window and I kept pushing her forward until she was very close to the window. The entire window had fallen down, so I wasn't afraid of any glass in the gaping hole. \n\nWith my hand still harshly punishing her pussy, my thumb firmly pressed knuckle deep inside of her ass, I pushed her down until she was on all fours, her ass sticking out like a prize. I knew she was expecting me to fuck her pussy roughly, probably as roughly as I'd never fuck her before. She was wrong. My cock was dripping with her saliva, and I spat a huge glob of mine right on her crack. \n\nWhen my thumb moved out of her anus only to push my saliva back inside it, Scarlett froze again, turning around and saying my name out loud \"John, please!\"\n\n\"Shut up.\" I said, letting the anger I still felt drive the words out.\n\nWe had had anal sex before this, many times actually, and Scarlett really liked it, but usually it was done a lot more gently, with more lube. Not tonight though. \n\n\"John, not so fast. Fuck my pussy first, you can't take me there so fast because\u2014\" I could hear the new kind of fear in her voice, but I interrupted her.\n\n\"For the last time, shut the fuck up.\" I said, grabbing her hair again and turning her face towards me. It had to be uncomfortable for her. Looking right into her eyes, I added, \"Just stop talking, you skank!\" I said. \"If you say another word, I'll remove all your spit from my cock, all that saliva I took from deep inside your throat, and then I'll rape your ass!\"\n\nHer eyes opened wide in fear, and she looked quite convincing. Yet I knew that all she had to say was \"love\" and it would all be over. She didn't say it. Instead she nodded and turned her head back as I released her. Despite my tone and harshness, I did remind her that my cock was really well lubricated. Deepthroating left my cock coated with a lot of saliva. I spat again, adding even more lubricant to my cock. I was not going to impale myself in a single thrust like I felt like doing, but I would try to gauge just how fast I could actually penetrate her. \n\nMy remaining fear vanished as soon as I touched her anus. It had been two weeks since the last time I indulged in that particular pleasure, and tonight, in this crazy abandoned house, I was going to enjoy it immensely. I pushed in hard, but stopped just as her sphincter locked itself behind the crown of my cock. \"Ow! Fuck you asshole! That hurt!\" Scarlett cried. \n\nFor a fraction of a second I hesitated, but dismissed the thought. Anger was still pushing me, and I had yet to hear the word \"love\". In the past, Scarlett had chided me for stopping some of our roleplaying sessions before she said to. Not tonight though. \"I told you to shut up, bitch! And in case it wasn't obvious to you, I'll be the one fucking your asshole!\" I growled at her. With that, I pushed several more inches of my rigid cock through her tight anus and into her rectum. My cock had a relatively big head, so I knew the worse was past for her. Still, I felt some resistance, and realized that Scarlett was squeezing her muscles! \n\nThrowing caution to the wind, I grabbed both her hips and pulled her toward me, impaling her asshole on my cock until my thighs were flat against her ass. \n\nThis time she tried to pull away and screamed in pain, very loudly. Yet all I could remember was the first scream I had heard from her, when she had made me believe that I was raping her at the car show. Oh the bitch! She wasn't done, and said, \"Misogynist jerk! Who do you think you are, abusing a perfect little innocent rose like me?\"\n\n\"What? Innocent rose?\" Still playing despite having my cock all the way inside her rectum! \"You have no idea what's coming, whore!\" I yelled back at her.\n\nAnd so I began fucking her ass with total abandon. I think I could count on one hand the number of times I fucked a pussy with such force. Doing the same thing to an anus was a dream come true. My eyes were now fully adjusted to the darkness and I could see her white skin against the black floor, the curve of her waist flaring into her hips and round buttocks, all shaking and quivering as I plowed right into them. I felt like a wild animal in heat, barely controlled by any sane thought. All I wanted to do was fuck her ass. \n\nOn most strokes, I felt my cock hitting the first bend of her colon, pushing deep into her flesh. Scarlett cried again, faking pain and begging me to stop: \"Stop John, that's just too much pain! Oooowww! Damn it! That hurts too much! You're too big! Ow! Ow! Ow! Ow! Please stop!\" I did no such thing. \n\nInstead, I said: \"This time I mean it. If you open your mouth again, I'm going to switch to that pretty pink pussy of yours!\" She stopped whining immediately. Scarlett knew that this one one of my fantasies, sometimes seen in porn movies, but never done. I was angry and wanted to ravage her, but I was not going to put her in that\u2014\n\n\"Fuck you!\" she swore. \n\nI paused, deep inside of her. I didn't understand why she would allow me to do this here and now. Once again I would learn later that she had even been ready for this. It would bug me to know I was that predictable with anal sex, but the memories would more than make up for it. \n\nRight now I felt a deep shock and part of me wanted to stop and savor the moment, the anticipation. However, the overwhelming force that had driven me since seeing the dummy rise up earlier still drove me. With one hand on her hip still, I grabbed my cock with the other and pulled out, only to drive back inside her pussy on the next stroke. All the way inside her dripping pussy. I felt an explosion inside me, as a long dreamed about fantasy was coming to life. I barely heard Scarlett's scream of revolt and disbelief. Looking down, even though I couldn't see as clearly as I'd like, I distinguished her gaping asshole right above the pussy I was now fucking. \n\nYet as delicious and sweet as that pussy was, I soon pulled out and guided my cock about an inch higher before slipping it right back all the way into her ass. It was forbidden, and dirty. It was bad for the woman if she hadn't prepared for it. \n\nFor me, it was utter delight. \n\nIt's strange how the unique and remarkable feelings of those penetrations faded away. I was deep inside her ass, deep inside her pussy, and both were amazing in their own way. Each woman is different, and most of the pussies and assholes I had experienced were very nice, and Scarlett was no exception. When you considered the fact that Scarlett considered sex as an art form that had to be explored, practiced and developed, her muscle control only added to the raw physical pleasure. \n\nRight now though all of her efforts were in vain. Nearly all of the pleasure I was feeling right now came from my mind. I was fucking a very nice ass and a delicious pussy, but it was the fact that I was alternating between them that was blowing my mind. I had seen it done in porn movies, and it had always fascinated me. Finally here I was, doing it. I even found a nice rhythm: going up, all the way in to the hilt in her ass, then back out and down, then pushing all the way inside of her pussy, then back out and up. All I wanted was more light!\n\nThen it hit me, I had my phone in my pocket! Was I really going to do that? Pull my phone out to light myself as I was alternating between a pussy and an asshole? Wasn't that too demeaning? Normally yes, but with a bitch like this. I grinned in the darkness, and released Scarlett's hip. \"Don't you dare move, or I'll do something even worse.\" I said in a low, threatening voice. \n\n\"What can be worse than this, you bastard! You turd of a man! Raping a poor defenseless woman and alternating between her anus and pussy?!\" she cried back. \n\n\"Do you really want to find out?\" I asked, slowly. \n\nShe did not reply. As I fucked her pussy for a while with an easy rhythm, I fished out my phone and turned it on. As soon as light hit her ass, I felt a new surge of pleasure. Pulling out to fuck her ass I switched after a single stroke, finding her pussy again. I was floored by the sight and sensations. \"Oh come on! How fucking low can you get?\" Scarlett cried, her head halfway out of the house, as she noticed the light. \"You're already raping me, taking my ass and soiling my pussy, are you going to film it as well?\"\n\nI laughed out loud, barely believing that she had said that. I knew why she had said it, she wanted me to film it, so I did. A few seconds later I said, \"I am now! I think I'm gonna record while I cum first in your ass, then on it, then push my cock all the way inside your pussy to release the rest of my load.\"\n\n\"Fuck you!\" was all she could come up with. \n\nIn a completely surreal state of mind, I was not only alternating between Scarlett's two holes, but I was also filming it. Fleeting images of watching it with her later only added to my pleasure. Because of this, I couldn't hold out for very long before I came. In fact, now that I could see her curves and the holes I was penetrating, I knew my body was racing towards an orgasm. \n\nTrying my best to keep the camera steady, I lost about all other control and just enjoyed Scarlett's body. My climax hit me like a Mack truck, a sudden surge of pleasure that exploded outwards from the tip of my cock. I did manage to cum in her ass first, and grinned as the second spurt landed on her left buttock. When I pushed my cock all the way inside her pussy and felt my balls contracting for the third spurt, my entire body shook violently. \n\nAt that point I dropped my phone and grabbed both of Scarlett's hips, fucking her hard. I could soon feel my cum overflowing from her pussy and drip on the bed. As I cried out and moaned with pleasure so intense it became painful, Scarlett pushed back to meet my thrusts and began laughing. I said, \"Damn, but I love you, my crazy little bitch!\"\n\n\"Wow John! That was amazing!\" was her simple reply as I kept fucking her.\n\nAs she laughed again, I pulled out and guided my cock into her ass once more. I then reached forward, grabbed both her breasts and pulled her up against me. \"Who said that it was over?\" I asked her.\n\nLaughing even harder, she said: \"Oh take me dear lover, I'm your sex toy tonight.\"\n\n\"You are indeed!\" I said, fucking her ass a few more times until it became too painful and I had to pull out. \n\nAt that point, all I wanted to do was to let myself crash and recuperate from the experience, but I couldn't do that here, in this damned dump. With our eyes now pretty much adapted to the dark, the weak light from my phone was more than enough to see the real condition of the house, which was dreadful. We both got up pretty quickly when we did see its condition, and it was clear that Scarlett felt very exposed wearing nothing but her shoes. Despite having taken her body as roughly as I had, I still stared at her as she began putting her dress back on. She was simply mesmerizingly beautiful. I stopped her from getting dressed and pulled the dress back off. \"You're remain naked until we get home, my favorite little love bitch.\" She grinned, of course.\n\nBefore getting the hell out of that house and back to the car, Scarlett wanted to reset the room and dummy carefully. I'm not sure I wanted to take part in the humiliation of another poor sap, but she insisted. In the car, after I placed one of the towels I used to clean the car on her seat, we sighed and relaxed a bit in the utter silence. Scarlett cleaned herself up with tissues as I watched. \n\nLater, on the way back home, she told me that coming here had been her plan all along. She had even cleaned herself up as much as possible during her long shower to let me realize my fantasy. As we crashed on our bed, before falling asleep from exhaustion, she said: \"Now you know what you must do to live that fantasy again.\"\n\n\"What? I must have the life scared out of me?\" I asked.\n\n\"No. You simply have to take me. Take me hard, even if I say no. Just take me.\"\n\nI sighed, then laughed, laughed hard until tears rolled down my face. After a long pause, I said: \"Crazy woman! Are you busy tomorrow morning?\"\n\nShe laughed with me until sleep took us both."
    ],
    "authorname": "MrIllusion",
    "tags": [
        "haunted",
        "house",
        "scarlett",
        "breasts",
        "large",
        "sexy",
        "teasing",
        "dodge",
        "charger",
        "deepthroat"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/breaking-cliches-02"
}
{
    "title": "Past, Present and Future Ch. 02",
    "pages": [
        "<center>A short tale of a new relationship, <br>a stand-alone story, but building on Chapter 1. <br> Have fun! \n\n+</center>\n\nThe path was easy, soft sand under my bare feet. The walk was relaxing, the countryside pretty and morning-fresh.\n\n\"You're sure we're alone?\" I asked. I was still nervous.\n\nHe squeezed my hand. \"It's Saturday morning. The crops aren't ready to harvest and the locals have no other reason to be here. Trust me, it's just us.\"\n\nI'd met Tony when we'd been put together as lab partners in university. While initially puzzled by his standoffishness, I'd been very impressed with him overall. In his mid-to-late 40s, with blond hair going white, he was really good-looking, fit and exceptionally well-dressed. He'd patiently helped a totally unscientific Stephanie with my homework and reports. To the extent I could trust anybody these days, I trusted Tony.\n\nBeside me on the path, he was dressed in sandals, a pair of L.L. Bean shorts and a deep tan. I was wearing that, minus the shorts and the sandals. \n\nI was however wearing the silver necklace he'd tried to give me. \n\nIt was more than I could or would accept as a gift. Hand-crafted, thumb-thick, intricate and weighty, it made me look more beautiful than I could have imagined. And it probably would have paid for my tuition next year, but a girl has to have some pride. This one, anyway. After some argument, he'd agreed to my wearing it whenever I came to visit.\n\nIn point of fact, that necklace was all I had worn since Tony had 'invited' me to spend the weekend. I phrase it that way as I'd annoyed Tony by trying a bit of juvenile feminine intrigue on him after class on Friday. Irritated by my school-girl conceit, he'd flatly rebuffed my suggestion that he might have the privilege of buying me a coffee at Starbucks. \n\nIt had been my game, my cards and, intrigued by him and trying just a bit too hard to coax him into inviting me out, it had been me who'd dealt the hand. He'd seen through it in an instant, called me on it without a blink.\n\n\"No, thank you, I don't want a coffee, Stephanie. And I don't think you do, either, not really.\" \n\n\"If you wish however,\" he had continued, his grey eyes locked on mine, \"we can do something less predictable, less adolescent. I'll wait in Starbucks while you go to the residence and pack a bag for the weekend. Actually, don't even bother doing that. Just fetch your flute and put whatever it is you think you simply cannot live without in your purse.\"\n\nIt was a small purse.\n\nShocked and humiliated by the brusque suggestion and its implications, mortified at having been so transparent, I was about to loose a blast of affronted feminine fury, but he cut me off, dropped a final bombshell, won by giving in completely to the terms of what I'd suggested originally. \n\n\"Of course, if it's really&hairsp; coffee that you want, Stephanie,\" he'd said, \"I'll buy you one and we can work on your lab report for an hour. Then I'll see you in class next week.\" \n\nHe stared at me, his eyebrows raised in challenge. Go do your homework before you and Barbie and Teddy have your tea party; there's a good girl.\n\nTwenty minutes later I was in his convertible, flying out old Highway 22 towards his farm west of the city. Arriving, he'd carried in my laptop and books, leaving me with the rest of my luggage, meaning my flute and my purse. Ten minutes later, scrupulously polite, without the slightest threat, without laying a finger on me, he'd shamed me into following through on my agreement. \n\n\"The deal, Stephanie,\" he calmly reminded me, \"is that you agreed to do whatever pleases me at the moment until such time as either you or I decide it's time for you to quit and go home. You came here knowing that, didn't you?\"\n\nYes, I had, but having it put that directly had been darned hard on my already-bruised ego. To add to my distress, he'd then shown me an empty closet and told me to join him after leaving my clothes there. With that, he'd turned and gone back to the kitchen to start making us dinner.\n\nIn the end, too stubborn to give up, too proud to escape into his offer of a taxi to take me home, I'd stripped, tidied myself up and then spent half an hour playing my flute for him while he cooked us a gourmet meal.\n\nHere's the thing. I'd been outraged by Tony's bluntness back on campus and humiliated by his quite open expectation from the very beginning that I would shed my duds on arrival. Once I was undressed however, what had really&hairsp; frosted me was his essentially paying no attention to my timid nudity until he'd finished cooking. How dare&hairsp; he ignore my sweet body now that it was so openly displayed?\n\nI was pretty sure he wasn't gay. Why would a gay man invite a long-legged knockout blonde to spend the weekend sans&hairsp; clothes? If he were gay, I could see him bringing an attractive guy to the farm, but this made no sense.\n\nHis glances had however become more and more frequent. His smile grew gentler. His eyes lingered on my breasts and sex. He'd got up and walked around me on my stool, his eyes taking in every detail. Throughout it, he hadn't laid a finger on me and that was outside my experience and expectations; it had me almost unnerved. \n\nIt was hours before he touched me and even then, it had been just gentle, friendly. By that time, each touch left me tingling.\n\nFinally, after doing the dishes together, we went outside to watch the sunset paint itself across acres and acres of farmland. Watching the colours unfold, entirely without guile or pretense, he'd done what my body had by that time been yearning for. His hand slipped between my thighs and gently, with exquisite, excruciating slowness, drove me up into the most incredible orgasm I'd ever had. He took time, built it layer upon layer, showed the most amazing patience and I darned near died when it hit me. \n\nThen he'd carried me in his arms into his bedroom and, finally taking off his own clothes, lifted me into second orgasm that nearly took the top of my head off. \n\n+\n\nI was awakened the next morning by somebody poking me lightly in my ribs. I rubbed the sleep out of my eyes and discovered Pi, the farm's feline owner. She was doing that cat treadmill thing, walking in place on top of somebody, preferably somebody trying to sleep.\n\nI acknowledged her right to my side of the bed and, leaving she and the still-sleeping Tony, went out into the kitchen. The sun was warm on the deck and I took a tea outside. It was warm enough that I wasn't tempted to reclaim my clothes. \n\nNo clothes was central to my being here and I was surprised to find myself becoming more comfortable with being on constant display for him. I was discovering that the open and candid admiration of my beauty by a handsome, well-spoken man was curiously pleasant, even for a modern lass like me.\n\nI closed my eyes, smiled happily. Today, I anticipated more of the same. \n\n\"Good morning,\" he said from behind me. I jumped a bit. The man moved like a cat; I hadn't heard him at all. He was wearing a pair of white cotton pants, a drawstring knotted at his waist. There was a soft but suggestive bulge.\n\nHey, after last night, I was entitled to notice.\n\n\"I hope you don't mind,\" I said, holding up a mug, \"but I made myself a tea.\"\n\n\"Not a coffee?\" he grinned.\n\n\"Not a chance,\" I confirmed. \"How did you sleep?\"\n\n\"Well, thank you. And you?\"\n\nMy reply was a bit muffled as he pulled me into his chest for a hug. I smiled to myself as his big hand slid down my back, hugged my bottom.\n\nTony was a teacher as well as a student.\n\n+\n\n\"It's a nice day,\" he said as we stacked the breakfast dishes. \"Would you like to go for a walk?\"\n\nI was getting used to being bare all the time, but the implications of a walk concerned me. \n\n\"What, like this?\" I asked. It was one thing to be nude inside or on the deck, miles from the nearest neighbour, but the thought of being out in public...\n\n\"You need a leash?\"\n\nNow, that shocked me. \"The hell, Tony?&hairsp; Are you serious? And don't you dare tell me I can call a cab and go home! A leash&hairsp;, Tony?\"\n\nTotally unflappable, he ignored my protests, shifted lanes, changed the topic.\n\n\"We'll be staying on the farm, Stephanie, mostly within trees. The crops aren't ready for harvest, it's not hunting season and the birders are going somewhere else of late. You needn't worry about anybody seeing you.\"\n\n\"Apparently, though, you think I might run off!\"\n\n\"Not really.\" He thought for a moment, smiled. \"Do you want&hairsp; a leash?\"\n\nI wasn't going anywhere near that. This time, it was me who dodged.\n\n\"What are the paths like? I only have the shoes I wore.\"\n\nHe thought for a second, trying to picture them. \"You should be ok. It's mainly sand, no rocky bits. I sometimes go barefoot myself.\"\n\nAnd that was that.\n\n+\n\nWe started out by crossing one field, through knee-high rows of bushy leaves. The morning sun was warm and I found it unusually pleasant on my bare skin. Once across the first field, we skirting another filled with next year's sweet tooth. Tony stopped, pointed to a path into a small wood.\n\n\"You're sure we're alone?\" I asked. I was still nervous.\n\nTony squeezed my hand. \"Trust me, it's just us.\"\n\nI took some comfort in that. Tony had pushed my comfort zone to a surprising degree, but he'd never misled me, never lied to me. Come to think of it, I'd found him so honest that I wasn't sure he could&hairsp; tell a lie. But a stark-naked stroll in broad daylight, well, yeah &mdash; it was another push at the envelope, a big one.\n\nI mused on our relationship as we walked. I'd agreed that I would do whatever pleased him at the moment - obey him, in other words. Just that much would be objectionable to so many of the self-cloistered, distrustful sisterhood back on campus. But the extent of Tony's 'control' had been very limited. Play the flute for him while he cooked; not much dominance there. He liked the way I looked, so no clothes. That one had of course been tougher initially, but I was finding that easier now, at times actually fun. And sex. Well, Tony was a maestro in bed... \n\nBeing nude for Tony's pleasure had been a learning experience, but while I'd been hotly embarrassed on occasion, not once had he ever humiliated me, done anything I resented or felt ashamed of, nothing I couldn't face myself in the mirror over. His was a strong, forceful male presence and I was finding my femininity strengthened and enhanced by that, my yin, if you will, drawing from and benefiting from his yang.\n\nIn more ways than one.\n\n\"After you,\" he said, pointing the way.\n\n\"Tony,\" I asked. \"You know where we're going. Shouldn't you lead?\"\n\nHe smiled. He'd started smiling more often today. He ran a gentle hand over my face. I liked how it felt, leaned into it. Having both boys and girls in the world is a really good idea.\n\n\"Shouldn't you lead?\" I repeated.\n\nHe grinned. \"If you go first, Stephanie, I'll get to watch your derri\u00e8re as you walk.\"\n\nI didn't think I still had a blush in me, but I reached down deep inside and found one lurking. A little one.\n\nWith that, I realized something else. Had it been a fellow-student, a classmate, a boy my own age saying something like that to me back in the city, I'd have nutted him right there, knee to groin, and called down a Twitter firestorm on his writhing form.\n\nHere, with Tony, half a mile from my clothing, it actually felt pretty good to hear him say it. I was enjoying his honest, frank appreciation when he looked at me. There was absolutely no pretence in the man. Girls have figures for a reason, I thought to myself; Tony loved looking at mine and that was just fine by me.\n\nNot worried now, I laughed with delight as his hands came around my waist, pulled me in for a hug.\n\n\"It is a very cute butt,\" he grinned. His hands moved down from my waist and came to rest on my bum. I leaned against him as his fingers slid over my cheeks, squeezed. I was surprised at the glow of contentment his hands - and his comments - had lit in me.\n\nI laughed again, squeezed him back, felt his chest hair on my nipples, sensed them harden just slightly.\n\n\"Is this pleasing you, Tony?\" I whispered. \"Is this what you want, right now?\"\n\nOne of his big hands lifted from my bum, slapped it affectionately. I laughed gently. \"I'll take that as a yes, shall I?\"\n\nHe released me, pointed again.\n\n\"Off we go,\" he said. \"Over to the left there.\"\n\nI led off. I put a little bit of extra hip-flip in my steps and could feel his eyes on me as I did so. I could sense the enjoyment I was providing him and it was all to the good.\n\nThe trail led through open woods, patches of wildflowers, across a small creek. It was very still, very pretty. Lambton County is quite flat, but we were heading up a slight rise. When we came to the top, there was a small but sunny open glade with ferns in the shadows around the edges. An opening on the far side of the clearing framed a checkerboard of distant farms, fields and woodlots. The songs of two small birds competed for my ears; iridescent dragonflies flitted about.\n\n\"This is wonderful,\" I said to Tony. \n\n\"This was my favourite place when I was a little boy. After my dad died, my mother used to come to visit with Uncle Leo every summer. I spent a lot of time running around these fields, just being a kid. \n\n\"Remember Superman?\" he grinned suddenly. I nodded and he pointed to the gap. Two wrist-thick, waist-high branches, almost parallel, almost level, grew across the opening.\n\n\"I used to pretend I was Superman,\" he said softly. \"I could lie across those branches, one under my chest, one under my hips, with my arms and legs out straight. The trees would sometimes sway in the breeze and it felt like I was flying, just like the Man of Steel.\"\n\nI could see the warm memory in his eyes.\n\n\"A happy place,\" I said softly. I put my hand on his chest.\n\n\"Oh, yeah. Good times. Little kids never worry about tomorrow; it's all right now.\"\n\n\"I wish I could have seen that,\" I said. \"You should try it now, see if you still fit.\"\n\nI don't think so,\" he said. \"I'm a little heavy for that now.\" He chuckled. \n\n\"What?\"\n\n\"I was just thinking that you might fit, Stephanie.\" He looked down at me. \"Did you ever dream of being Supergirl?\"\n\n\"Nope. I was Wonder Woman. I had 'Amazon princess' nighties, even. I used to get into arguments with my brothers over TV shows when Wonder Woman was on.\"\n\nHe chuckled again, scooped me up into his arms. He gave me a quick kiss, then laughed. \"Maybe we can change your mind, Stephanie.\"\n\nHe stepped to the two branches, laid me down across them carefully. They were smooth enough that I was actually fairly comfortable and there was enough of a sway to the trees that it did seem like I was flying, sort of. I looked down at the farms and fields off in the distance. Yeah, I could see the appeal. I stretched out my arms and legs, let the trees shift me up and down slightly. Stretch out and fly...\n\nTony had stepped back to watch me, his arms crossed and a satisfied smile on his face. I knew this was another gift, a shared happiness.\n\nI could feel his eyes run over my body and sensed his mood suddenly change. I looked back at him, saw the sudden hunger in his eyes. His shorts fell about his ankles and he kicked them off to one side. His cock was already hard, needing. Seeing it, I felt my breath catch, felt a happy churning in my loins.\n\nHe pulled my legs apart, stepped in between them. I felt his hands slide softly up my legs and felt my body respond, labia swelling, nipples hard now, heart starting to beat faster.\n\n\"Fly, Supergirl,\" he said, his voice husky. \"Fly around the world. Show me how you can fly.\"\n\nI wanted to hold him, wanted to take him in my arms, wiggle my tummy and boobs against him. I tried to slide off the branches, but his hands tightened, locking me in place. I felt my boobs move beneath me as a breeze moved the trees. His hands squeezed my thighs as he knelt behind me.\n\nThe weight came off my legs as he rested one on each shoulder. I hissed slightly as his whiskers brushed along the skin of my legs, wriggled on the branches as his lips found my sex.\n\n\"Tony!\" I gasped.\n\nHe pulled his head back. \"Hush, girl. I'm busy.\" He chuckled, licked me with the tip of his tongue. \"Enjoy the flight.\"\n\nHe leaned back in and buried his mouth on my pussy. I felt his tongue sweep up and down the length of my lips, felt my desire surge under the touch of a man, light-years ahead of the clumsy, fumbling boys I'd known. I was panting now, his tongue finding precisely the right spots to do exactly the right things to set me ablaze.\n\nAnd the darned thing was that I could do absolutely nothing but what Tony wanted. I couldn't get down, I couldn't reciprocate, I couldn't do anything except enjoy his attentions, bathe in the pleasure rippling and waving over me like the leaves in the fields below. The trees were swaying a bit harder now, the branches rising and falling more and more; his tongue darted into me, swirled, his lips sucked my clit into his mouth and I was indeed airborne now, setting the world alight with happiness and pleasure and... \n\nOne of his hands came off my leg, felt around under me, found a boob. He squeezed it, found my nipple, pinched gently and I came, soaring above a world far below me, glorious, spiraling, swirling, dizzy with the joy of it.\n\nTony's grip again shifted as he stood up. I felt his knuckles brush my thigh as his spongy cockhead aimed for, found my eager, wet opening. I sobbed aloud as he slid in, a second orgasm beginning. One of his hands seized me by the hip, the other reached up, coiled in my hair and pulled my head up. His cock, full and hard with his own need, began to drive into me, no gentleness now. The branches above us began to sway with the impact of his lean hips against my thighs. My boobs swung and bounced beneath me. \n\nI began to roar with each stroke, louder, deeper. I'm surprised my cries weren't heard by people in the distant farms.\n\nBack and forth, his cock slid against my walls, stretching me, filling me, pushing me higher, higher still, shooting up and up. My orgasm went on and on, endless and deep as the blue sky through the trees above me.\n\nTony stopped, went rigid; I could feel him pulsing within me. His body trembled. He released my hair; his body fell slowly across my bum and back as he gasped for breath, lost in his own pleasure.\n\nAnd still mine continued. Each sway of the branches shifted me over his still-rigid manhood, teased me, kept me aloft. It took a long time, ages, eons, until I felt Tony softening inside. He kissed my shoulder tenderly.\n\n\"How was the flight?\" he whispered.\n\n\"I don't think I'm going back to Themyscira,\" I whispered back. \n\nHe laughed, pulled back and helped me to my feet. I felt his arms pull me in for another gentle hug, felt the warmth of his body and his heart inside it.\n\n\"So, now you know my secret Happy Spot,\" he said.\n\nI squeezed his waist with all my might. My cheek on his solid shoulder felt exactly right, as did his hand slowly stroking my bare back and bum. Who would have thought?\n\n+\n\nWe took our time returning to the house; there was no hurry. He hadn't bothered to put his shorts back on, joining me in a nude stroll. I looked down at him as we walked, wondered what it must be like to have something always swinging like that. Then I noticed my boobs shift with each step and smiled.\n\nThe day was very warm by the time we got back. \n\n\"It's almost noon,\" he said, squeezing my hand. \"I'd like you to play for me while I make lunch, please.\"\n\nI nodded. \n\n\"May I have a moment for a quick dip in the pool?\" I asked. \"Just to cool off?\"\n\n\"Of course. Take off the necklace, though.\"",
        "The pool wasn't that big, but it had a diving board. It'd been a couple of years, but I felt confident.\n\nStart with a hurdle, three steps to the end, swinging arms into a lunge, arms up, feel the board rising, hands down to toes, lifting legs, toes pointed and...\n\nYes! A perfect forward dive pike, barely a splash. I felt like cheering as my head surfaced.\n\nTony was applauding in front of me, a big grin on his face. \n\n\"Outstanding!\" he shouted. \n\nHe pulled me in for a hug when I got out of the pool, kissed me and gave me a little nudge. \"Do it again, please.\"\n\nHe pulled up a chair, sat down to watch. \n\nI tried twice more. The second wasn't bad, but the third reminded me why the best divers are flat-chested. I don't think he noticed, but I did. All the same, I was happy. All those Saturday mornings hadn't been entirely wasted.\n\nTony was waiting by the side with a huge towel. He again hugged me, then, pulling away, wrapped me in it. The look in his eyes was electric.\n\n\"That was so beautiful\"\" he said excitedly, \"I can't remember when I've seen anything so elegant.\"\n\n\"It was just a simple dive, Tony.\" I tried to shake water out of one ear.\n\n\"I couldn't do that, not in a million years. Where did you learn?\"\n\nI looked at him, slightly surprised that he could be so happy over such a simple thing.\n\n\"Anybody can learn, Tony. It only takes like a bazillion practices. Mom started taking me when I was, um, eight? Every week for about five years. It's nice to see I remembered some of it.\"\n\nI stuck my head into the depths of the towel, rubbed hard. When I emerged, Tony's grey eyes were on mine.\n\n\"You can say that, Stephanie, but it was a treat for me, watching you.\" He thought for a moment. \"Why'd you stop going?\"\n\nI blushed a little. \"I grew boobs.\"\n\nHe ran his hands over them, squeezed tenderly. \"Very nice ones,\" he smiled.\n\n\"There are lots of big-chested girls who dive, Tony, but it's one more complication, one more thing you have to focus on, one more thing to compensate for. If you look at the higher levels of competition, there aren't many women with D-cups.\"\n\n\"Oh. Well, despite that,\" and he again caressed the girls, \"you're pretty good. You can do that anytime. I'll be happy to watch.\"\n\nHe kissed my forehead lightly. \"Meanwhile, how about you dry your hair and come play for me while I make lunch?\"\n\n\"Yes, boss.\"\n\nI started to wrap the towel around me like everybody does when they get out of a pool and then remembered. I hung it up, put Tony's necklace on again and followed him inside.\n\nAfter drying my hair, I took my place on the tall stool opposite the kitchen island where Tony was working. I could see it wouldn't take him long, so I started with the adagio from Beethoven's 4th. It's not very long, but it's quite pretty and I could see his smile grow. It got broader from time to time, when he looked up from his work and examined me.\n\nI felt tingly inside every time he did that. When he'd first put me on the stool in front of him, it had been embarrassing and confusing &mdash; embarrassing because I was sitting starkers in front of a fully-dressed older man and confusing because he'd paid more attention to making dinner than to me. \n\nI'd learned. I'd known I was cute before; now I knew the purpose behind that beauty, had accepted that being admired by somebody strong, somebody kind and polite, was a very good thing. Like I said, there's a reason girls are pretty. Why pretend otherwise?\n\nBottom line? It pleased Tony to look at me and I enjoyed pleasing him, enjoyed his pleasure. \n\n\"What was the first tune you learned on that?\" he asked.\n\nThat was simple. I lifted the flute to my lips and began Au clair de la lune.\n\nTony looked up, began whistling it. Not only does every kid with a recorder or flute start off with the same one, just about everybody knows it, too.\n\nHe smiled, picked up two plates. \"Thank you, Stephanie. Are you ready for a sandwich?\"\n\n+\n\nWe spent the afternoon studying. Tony helped me with our &mdash; my &mdash; lab report. His patience and focus always amazed me. He managed to ignore my boobs.\n\nMost of the time. From time to time, his hand would slide over my skin, lighting fuses. I took the opportunity to reply whenever he did and once giggled at the sight of him typing on his laptop with his wood protruding over his lap. \n\nLab reports being done, we both had other things to do. I had to practice on my flute and took it outside so as not to distract him.\n\nMy Composition prof had also set us an assignment, writing a short themed piece, but hadn't specified what theme; selecting one was apparently part of the process. Sitting in the gazebo, I was again struck by the gentle beauty of the farmland in front of me. \n\nI went inside, kissed the top of Tony's head and returned with a notebook. There are computer programs for composition, but I'm sort of old-fashioned and like a pencil. I'd transpose later.\n\nSilence. Tranquility. Plenty. Peace. How to put those into notes? I put down a few ideas, crossed them out, tried again. I got a couple of bars, a basis, something to build on. They sounded OK in my head. Leaving the sheets where I could see them, I softly tried the tune on my flute. There was something there, but not quite. I closed my eyes, adjusted, tried again. \n\nAnd again. I kept playing with it, expanded it some. It had promise, I thought. An hour passed. I made progress. \n\nThe doors opened behind me. Tony had put on some clothes, jeans and a linen shirt. He was always impeccable. \n\n\"Hi,\" he said,\n\n\"Hi, yourself. All done?\" \n\n\"Yes,\" he replied. \"What have you been working on? I keep hearing you play the same thing, or almost.\"\n\n\"A composition problem,\" I said. \"I'm trying to write it based on, I don't know, how pleasant all this is.\" I waved my hand at the countryside.\n\n\"Play it for me,\" he said. \"Please.\"\n\nIt didn't take me long. I lowered my flute, looked at him.\n\nHe smiled in pleasure. \"It's very nice,\" he said. \"Serene.\" \n\nHe sat down on a couch beside me. \"Are you finished? Or, at least, finished enough?\"\n\nI nodded. \"I think so. Probably time for a break.\"\n\n\"Stand up, will you, please?\"\n\nI complied.\n\n\"Turn around.\"\n\nI did.\n\n\"Keep going. Don't stop.\"\n\nI could see the pleasure in his eyes as they ran over me. Once or twice, his hand reached out, let fingertips trail over my moving skin, hips, thighs, waist, boobs. I tingled at his gentle touch.\n\nEventually he took me by the wrist, stopped my slow pirouette. \n\n\"Do you have any idea how beautiful you are?\" he said, almost reverently. \n\nI smiled. \"You're rather good-looking yourself, you know.\"\n\n\"Not like you. Tall and sleek and...\"\n\nI squealed as he pulled me into his lap. A month or three of kisses later, he broke, handed me my flute. \n\n\"Play for me, please.\"\n\n\"What would you like?\" I could see his eyes on my breasts.\n\n\"Anything. That new piece.\" He stroked my cheek, then, \"Turn around. Face away from me.\" \n\nI shifted, turned. His hands spread my legs to rest on his, then pulled me in, my back against his chest. I looked over my shoulder at him, a question on my face.\n\n\"Play for me, Stephanie. Play your new piece. Please.\"\n\nI lifted the instrument, began.\n\nI could see our reflection in a side window. Tony was looking off into the distance, a happy smile on his face. Hie eyes closed, his head moved with the music. It was clear he was enjoying himself. That was comforting; I hoped the prof would be as happy.\n\nI finished. His eyes opened. \"Again, please.\"\n\n\"It needs work.\"\n\n\"Please.\"\n\nI restarted. This time, Tony did more than listen. His hands lifted to my boobs; his thumbs almost keeping time time with the music. I found it difficult to stay on track. His long fingers on the girls were a serious distraction, squeezing, stroking, moulding my soft flesh. I kept faltering, missing. His teasing went nuclear when a gentle forefinger brushed my inner thigh, slid in further, found my pearl.\n\nI shuddered. The flute came away from my lips.\n\n\"Keep playing,\" he said.\n\n\"Jeez, Tony,\" I whimpered, \"give me a break.\"\n\n\"Our deal, Stephanie...\" he started.\n\n\"...is that I'll do whatever pleases you until you or I decide it's time for me to go home. I know that. But I can't concentrate when you...\"\n\nMy breath caught as his finger traced its way through my slippery sex. I looked over my shoulder at him.\n\nHis eyes were anything but hard now, but they were firm, insistent.\n\n\"Tony,\" I whispered.\n\n\"Play.\"\n\nI tried. I really did. But Tony was an absolute master at feeding my fire. Breath control is critical for a flute and mine was becoming about as uncontrolled as a residence dodgeball game.\n\nI moaned, softly.\n\n\"Hush,\" he whispered. \"Keep playing.\"\n\nMt rhythm became sloppy, ragged. Tony's fingers were becoming better coordinated than mine. They rubbed, pinched gently, stroked, pulled on my slippery labia, slid inside me to swirl over my G-spot. His other hand moved from boob to boob, fondling, teasing.\n\nI stopped playing; my head fell to my chest. I felt one of Tony's hands gently take the flute from me, lay it down safely beside us before returning to a nipple hard as cement.\n\nSomebody was shouting at us, words I couldn't understand, then Tony's finger pulled on my G-spot at the same time as his thumb pressed firmly on my clit and I knew who it was.\n\nThe orgasm seared through me, hot, penetrating. I stopped shouting, could only force out rough gasps broken by low moans, again and again, fading slowly.\n\nHis hand left my sex, hugged me against his hard body.\n\n\"Thank you,\" he said softly, petting my flank gently. Thank me? &hairsp; I was too tired to respond.\n\nIn a few minutes, I was able to move. I curled up in his lap, put my arm around his neck. \n\n\"That was amazing, Tony, but what can I do for you?\"\n\n\"You just did, Stephanie. Take some time for yourself now. Work on your tan. Read a book.\"\n\n\"Is that what would please you?\"\n\n\"Relax, Stephanie. We have all the time in the world.\"\n\nI took him at his word. There were some things I needed to read, notes to tidy up, a sun to relax under. Later in the afternoon, Tony came out to watch me diving again. I tried to teach him how. He was right. Not in a million years...\n\n\"It's a good thing you're a good cook,\" I said, kissing his cheek. \"You'd starve on the diving circuit.\"\n\n\"Don't I know it!\" he laughed. \"If you're done, I'm about to make dinner.\"\n\nHe watched, smiling, as I rinsed myself off under the outdoor shower, smiled more as I settled myself on the stool. \"Anything in particular you'd like?\" I asked.\n\n\"No, thank you. You choose.\"\n\nI thought, opened with Disney's 'Colours of the Wind', simple but pretty. He smiled, bent to the kitchen island.\n\n\"What are you making?\" I asked when I finished the piece.\n\n\"Chicken Cacciatori. Trite, but tasty.\" His head came up to examine me, lingered on my ankles and legs this time.\n\nHe seemed to be happy with Disney, so I started another, 'Can You Feel the Wind Tonight?' from Lion King. \n\n\"Oh,\" he added. \"Are you ok with anchovies?\"\n\nI kept playing, nodded.\n\nThe smell of the peppers and onions filled the kitchen. Tony came around from behind the island, put a glass of wine on a stool beside me. He stepped behind me, kissed one shoulder, then the other, returned to his cooking.\n\n+ \n\nThe chicken was, as always, superb.\n\nAs we were cleaning up afterwards, I asked him if he would teach me to cook.\n\n\"I don't get much chance, not the way you have this arranged,\" I said.\n\n\"You earn your keep, Stephanie.\" I smiled as he patted me on the bum. \"But, ok, I'll think on it.\" The pat turned into a fond caress. \n\nHe was good at that, too.\n\nHe poured us each another glass of wine and led us out onto the deck, a perfect place to view a country sunset. I went to sit down, but he took my hand.\n\n\"Indulge me,\" he said.\n\nInstead of holding a chair for me to sit on, he instead shifted a table to beside his chair, found a cushion and placed it on top.\n\n\"You want me to sit on that?\" I giggled.\n\n\"No,\" he replied, his voice soft but compelling. \"Bend over it.\"\n\n\"Tony!\" I had thought I was beyond blushing.\n\nHis hand rose, stroked my face. His eyes seemed to take over my world.\n\n\"Yes, Tony,\" I whispered. \n\nI bent forward, felt my boobs flatten under me, lifted myself on my elbows. He shifted his chair so that he was behind and to one side of me. I wiggled my behind at him.\n\n\"Like the view, Mr. diRossi?\"\n\nHis hand slid up my thigh, long fingers cupped one cheek.\n\n\"Very much,\" he said softly.\n\nHe took a sip of wine as his fingers flowed over my skin, gently stroking me, in no apparent hurry. His gaze wandered back and forth between the fields, the sun sinking on its course and my bottom, my exposed sex. I got the feeling he would reach out and caress the sun, too, if he had the chance.\n\n\"Such beauty,\" he said softly.\n\nI giggled. I knew he was being deliberately vague. The giggle turned to a happy gulp when a fingertip slipped gently along my ladybits.\n\n\"It is,\" he said, repeating the caress.\n\nThe sunset was beginning to come together. I was comfortable enough, could see well, but his slow, soft touches were... well, I won't call it distracting, but my attention was definitely divided.\n\nI moaned a little as he leaned forward, reached under me to caress my boobs, then resumed his gentle fondling of my bum and sex. I could feel my clit and lower lips swell. \n\n\"Nice sunset,\" he laughed, very softly.\n\nA finger began to circle my button and I gave a louder groan.\n\nIt was&hairsp; a nice sunset, too. The colours promised to be spectacular. I could see it, right in front of me. It was a question of focusing.\n\nI bit my lip as his fingers moved through wetness now, sliding my juice over my sex in a slow, deliberate fashion. \n\nAgain he slid his hands under me to tease my begging nipples. He patted my bottom gently, resumed his casual playing with my pussy. I felt a fire building inside me. \n\nTony got to his feet, stripped off his clothes. His cock was hard, erect; it twitched as I looked at him over my shoulder. He again moved to stand between my legs and I gasped as he found my entrance and slid smoothly into me with one long, gentle push.\n\nI waited for him to continue, but he just stood behind me, his hand running gently over my back and bum. I squeezed his length with my internal muscles and he laughed, gave me a gentle slap on one cheek. \n\n\"Down, girl.\"\n\nI waited, filled and happy. I was not in a position to do much anyway; any action was going to be from Tony.\n\nHe began to withdraw, slowly, very slowly. Just short of falling out, he paused before beginning to push back into me, again very slowly. All the while, his hands continued to pet me, stroke my skin, caress me. \n\n\"Tony?\" I whispered.\n\n\"How're you doing, Stephanie?\" he said, slowly pulling out.\n\n\"I want you,\" I moaned. I was enjoying this, but it was hardly what I'd been expecting.\n\n\"I know,\" he said, then slowly began to push forward. \"Enjoy the sunset, Stephanie.\" He continued his slow, gentle thrusts.\n\nThe colours were at their peak when it started. Gentle as a kitten, light as down, a mini-cum drifted through me. There was none of the thunderous, riotous orgasmic bliss Tony had given me before. This was almost weightless, barely there, pleasant, very pleasant &mdash; extremely pleasant &mdash; but anything but overwhelming.\n\nI smiled happily, waited for it to blossom further, but his slow stroke hadn't the horsepower and it gradually faded away, only to immediately restart, growing again, slowly, delicately. I again caught my breath, felt shivers run up and down my body, felt it subside, felt it restart.\n\nTwenty minutes later, the man was still moving in and out of me, maybe one stroke every five seconds. I was in the middle of a continuous, unending series of mini-cums, rising up on one as he pushed forward, only to slide back down as his cock eased out. I'd never experienced anything like it, a continual string of mini-orgasms rolling into and over one another, each one quiet, tender, but endless, almost continuous. \n\nHe leisurely withdrew, leisurely re-entered. Another mini-cum drifted through me.\n\nAnd another.\n\nAgain, another.\n\nAgain.\n\n+\n\nI slept late. Very late.\n\nI opened my eyes to see Tony staring at me from the other pillow. I had once thought his eyes stern, fearsome, but this morning there was gentleness, kindness and warmth in his gaze.\n\n\"Good morning,\" I whispered.\n\n\"Good morning to you, Stephanie.\" I felt his hand slide over my hip under the bedcovers. \"How are you doing?\"\n\nI couldn't help myself, yawned. \n\n\"I'm sorry,\" I said, yawning again.\n\nHe laughed, leaned in for a soft kiss.\n\n\"How long have you been awake?\" I asked.\n\n\"A while,\" he smiled. \"You are so pretty when you're sleeping.\"\n\n\"What time is it?\"\n\n\"About eleven, I think.\"\n\n\"Oh.\" I smiled, leaned forward, kissed him. \"You're so sweet, Tony. I can't remember the last time I've slept in this long.\"\n\nHis hand brushed my cheek and my heart jumped.\n\n+\n\nHis bathtub was huge, but his shower was no bigger than any other. It was still warm and sunny outside, despite black clouds on the far horizon, so Tony walked me to the poolside shower. I treasured the way his arm felt around my waist.\n\nThere's something deeply satisfying about washing your lover with your bare hands - and being washed by him in your turn. The shower turned into a soapy tickle game, then into slippery hugs and lingering kisses before he turned the water off and, towel around his waist, went in to make us a late breakfast.\n\n+\n\nIt started to drizzle soon after; it would in any case soon be time to take me back to the residence. I wondered what I would say to Marcy; she would no doubt be waiting for a debrief. \n\nTony was standing by the big west-facing windows, staring out at the fields. I could see he was thinking. Was he going to ask me to return? Maybe he'd had all that he'd wanted this weekend... \n\nI went up to him, put my arm around his waist. I could feel the wool of his trousers against my bare hip.\n\n\"Penny for your thoughts?\" I asked.\n\n\"Tuition is going up,\" he said, out of nowhere.\n\nI knew that. It had been hard to get that out of my mind lately.\n\nHe turned and looked at me, his face expressionless. \"Be honest, Stephanie, please. How are you doing? Financially, I mean.\"\n\nI was about to answer, hesitated, replied very softly, \"Why? Where is this going, Tony?\"\n\nIt was his turn to hesitate. \n\nUncertain as always, my heart sank a little. I couldn't stop myself. \"Has this just been a sugar-daddy trial run, Tony?\"\n\nHe sagged a little, was silent for a minute. Then I didn't have to see his smile, I could feel&hairsp; it.\n\n\"If it has been, Stephanie, how am I doing so far?\" He chuckled a little, paused. It was a lengthy pause, which was odd for him. Tony was almost always direct, to the point. This time, he was almost shy when he spoke.\n\n\"Hypothetically, Stephanie, just hypothetically, if I was to offer, oh, let's call it a 'personal bursary', how much would a young lady need to survive, with living in residence, with tuition and such? If, I mean, she didn't have to work?\"\n\nThere it was. The cards were on the table.\n\n\"Tony,\" I said, choosing my words as carefully as I could, \"what is it that you're expecting of me?\"\n\nHe smiled, brushed my cheek with his hand, kissed the top of my head. \n\n\"Only what's happened this weekend. Your presence here has been delightful, Stephanie, more so than I could ever have hoped or dreamed. You are young and fit and lovely &mdash; your being here is a joy just for that. Your smiles, your company, your charm have turned out to be a real bonus, something far greater than I'd expected.\"\n\nMy breath caught as his hand cupped my breast, his thumb sweeping gently over my nipple. I felt it harden, felt my desire come surging back, saw his awareness of it in his grey eyes.",
        "\"There have been additional bonuses, of course.\"\n\nHe smiled, squeezed softly. \"Very pleasant ones, too.\"\n\n\"You would be welcome here as often as you can make it, Stephanie. All I ask is that, when you come, you put your clothes away, wear your necklace and play your flute for me. Asides from that, we &mdash; you &mdash; can do whatever you want while you are here, but I get to watch you as you are.\"\n\n\"Whatever I want?\" I echoed.\n\nHis smile could be so sweet at times.\n\n\"Of course. What would you normally do on a weekend?\"\n\n\"Eat, sleep, study...\" I began. \"Go to the gym. Maybe go window-shopping. Go to a concert, sometimes.\"\n\n\"There's no gym here,\" he admitted, \"and shopping might be a problem. But you could certainly study here and I think the menu is pretty good.\"\n\nIt was. Tony was a superlative cook.\n\nHe paused, looked thoughtful. \"Would you be more likely to accept if I said you could sleep in the other room?\"\n\nThat floored me. Wasn't sex involved? Had I missed something?\n\n\"Seriously, Tony? Just be here? Just let you see me without clothes? Nothing else?\"\n\nHis hand stroked my hair. \"It'd be a good start,\" he said softly. He chuckled as his hand ran down my back, patted my bum fondly. \"I'd be disappointed, of course. I'd far rather have you in my arms, Stephanie, have you in my bed, but I want you here, one way or the other. Please?\"\n\nI looked up at him. His grey eyes could be cold and hard. Right now, they were soft, almost vulnerable. I had to work to keep him from seeing how appealing I found them, how close I was to accepting his offer without thinking.\n\n\"If&hairsp; I came here, Tony, I'd be in your bed. Sleeping solo is lonely. But &mdash; if&hairsp; I agreed &mdash; how often are you talking about?\"\n\n\"As often as you wish, Stephanie. Some of the time, all of the time. My hours are pretty regular. Text me to make sure I'm here.\"\n\n\"'All of the time.' Are you inviting me to move in with you, Tony?\"\n\nThere was a flicker of indecision on his face, then, \"I don't think either of us is ready for that,\" he said. \"Not yet. Wait &mdash; are you offering?\"\n\nI poked him in the ribs. \"If I ever am, Tony, I promise that I'll be clearer about it.\"\n\nHe smiled.\n\nMy mind was whirling. This was so not where I had thought we were headed when I'd suggested we go for a coffee.\n\n\"Tony,\" I said, \"you'd have to come and pick me up, take me back each time. I don't have a car.\"\n\n\"We'll figure it out. Do you have a driver's licence?\"\n\nI thought about that. \"Are you offering to buy me a car?\"\n\n\"Would you allow me to buy you a car?\" he countered, grinning.\n\nHe had me there. I'd put my foot down when he'd presented me with the necklace. I had flatly told him that it was too valuable, that I wasn't for sale.\n\n\"Stephanie,\" he said now, seeing my thoughts. \"I don't want to buy you. I would however like to help&hairsp; you, regardless of whether or not I have the very pleasant privilege of making love with you.\"\n\nThose tummy butterflies had returned. It was a sweet, generous offer from a man I found very attractive, one I realized would be very easy to fall in love with, but it made me look at myself in a whole different light. It had been easy to mock, easy to scorn other girls who'd said yes to similar offers. The shoe being on the other foot &mdash; mine &mdash; now, I was finding it much harder.\n\n\"I don't know, Tony, really.\" I tried my sweetest smile, put my hand on his arm. What to say?\n\n\"Thank you, Tony, thank you so much! This is really unexpected, really sudden. It's so generous of you, but I'm confused. I need to think, ok?\" I kissed him, put my head in his shoulder.\n\nHis hand rose over my skin, from my bum up to my waist, hugged me. It felt nice, very nice. \n\n\"You do that, Stephanie. No pressure.\"\n\nI looked out the windows, confused, upset at myself and my indecision. My mind was trying to break up a four-way bar brawl between dogmatic propriety, delighted hormones, idealistic self-image and stony pragmatism.\n\nI was certain of one thing. If I was to decide to say No, to turn down his offer, then I couldn't ever come here again. Right now, I wanted more memories of Tony's body against mine, quivering with his pleasure, the pleasure I had given him as his woman.\n\nA line came into my mind, Treasure every love, for each time might be your last.&hairsp; I couldn't remember who'd said that.\n\nThe drizzle outside had become solid driving rain. Had it been sunny, I would have asked him to go on another short walk, have found a place outside for some al fresco&hairsp; lovemaking. \n\nI gave him a strong hug. \"'Whatever I want,' you said?\"\n\nHe squeezed me back. \"More or less. You don't get to burn the house down.\"\n\n\"No.\"\n\n\"Or annoy Pi.\"\n\nI smiled. \"Of course not!\" The very idea!\n\n\"Those out of the way, what is it you would like, Stephanie?\"\n\n\"Well, to start, it's a nice afternoon for a fire. We haven't had a good fire yet, Tony. Would you light one, please? I think I need big flames and crackling embers right now.\"\n\nHe smiled, gave me a quick kiss. Typically, he'd already had the wood laid and a few minutes later, we were watching a good blaze. Tony was standing, watching it. I stepped to beside him, put my arm around him.\n\n\"That's nice,\" I said. \"Thank you.\"\n\n\"Was there something else?\" he asked.\n\n\"Yes. Yes, there is &mdash; are. Two things.\"\n\n\"That's a lot,\" he chuckled.\n\nI moved to between him and the fire. \"Kiss me, Tony. That's a little thing and it's everything.\"\n\nOne hand took me by the shoulder, pulled us together. His other wrapped around the back of my head, turned my face up to the lips coming down to them. His tongue swept lightly over my lips and I felt the old Tony magic begin inside me. \n\nI opened my lips, touched the tip of his tongue with the tip of mine, welcomed, danced. They parted, explored, touched further. I felt my nipples applauding, my legs trembling. My tummy felt a shifting under his trousers. His hand pulled our lips together more firmly. I ran my palms over the fabric of his shirt, felt lean muscles under it. I wondered if I actually had the strength in me to say No.\n\nIt was time.\n\nI pulled away, smiling. \"You give such good kisses, Tony. Thank you. I needed that.\"\n\nHe had a happy smile. Good.\n\n\"What's your next wish, Stephanie?\"\n\nI looked up at him, blue eyes on grey. \"Stand still.\"\n\nHis eyebrows went up as my hands reached for his top shirt button. I took my time with it, pretended it was a puzzle. I bit my lip as if having to concentrate. When it opened, I smiled as if in happy surprise.\n\nTony's eyes were watching me. His hands brushed down over my cheek. It wasn't sexual; I knew that and it made so much difference. Treasure every love...\n\nHis hand softly moved lower, over my shoulder, paused when his fingers felt my ribs, continued, coming to rest on my waist.\n\nI opened the second button with the same pantomime, then, a few seconds later, the third. I carried on until they were all undone.\n\nTony's grip on my waist was firm, his hands warm. There was pleasure on his face and I found that delightful.\n\nI slipped a hand inside his shirt, ran it over his chest and stomach, caught a strand of chest hair, stroked a flat male nipple. He took a deep breath.\n\nWith both hands, I felt for his belt, unfastened it. His hands slid a bit lower, his fingers sweeping an inch or so back and forth over my hip.\n\nI found his fly button and, without playing this time, unfastened it. \n\nI paused, looked up at him. \"How's the boy?\" I whispered.\n\nHe smiled. His smile came easier now. I liked that. It made me smile, too.\n\n\"Good,\" he whispered back.\n\nI pushed his shirt off his shoulders. It fell to the ground behind him. I laughed, leaned into his bare chest, clutched him to me. One of his hands came up, found my hair, pulled fingers through it. I leaned down, licked one of his nipples with the tip of my tongue, knelt in front of him as his fingers trailed through my hair.\n\nMy hand lifted the tab of his zipper and I carefully seized it between my teeth. Slowly, very slowly, I lowered my head. The fire behind me gave the occasional crack or pop, but it was quiet enough that I could hear individual zipper teeth as they parted, one from another. \n\nHis trousers started to fall before I reached the bottom; I let it go. Looking up, I saw a warm look in those grey eyes, a smile on his lips. Looking down, I was surprised but hardly upset to see that he'd gone commando, was himself bare now.\n\nHis manhood swayed in front of me, hard, expectant, thick with promise. Without moving my hands, I gave a slow lick under its length. It bounced lightly off my chin when it fell from my tongue.\n\nI looked down again, tapped one ankle. \"Up,' I said. He lifted one foot, then the other, allowing me to toss his trousers aside. \n\n\"This is my second wish, Tony.\"\n\nHis eyes answered. I didn't need more.\n\nI could feel the warmth of the fire on my back as I put my hands on his thighs, began to stroke his legs, soft fingers on hard muscle. His male scent filled my head and I could feel my body respond to it.\n\nI kept stroking his legs as I opened my lips and took the very tip between them. I looked up at him, smiling as best I could as I swirled my tongue around it. \n\nI took his shaft with one hand and, pumping soft skin over iron core, leaned back and smiled more broadly now. I hoped he could see my happiness, the delight that pleasing him like this gave me. His hand came down, stroked my head; his thumb brushed my ear. \n\nI had an idea, something I'd seen on a video at a Zoo party, back in residence, something I'd never tried with a boy, something I thought he might like.\n\nI rose higher on my knees. Taking the girls in my hands, I enfolded his manhood in them, rocked gently. We had no lube at hand and I didn't want to break the moment trying to find some, but I figured soft and gentle would still work. The light in Tony's eyes suggested I was right.\n\n\"How's that?\" I asked softly. The velvet skin of his hardness sliding between my boobs felt good &mdash; strange, but good. I don't think I could have got off from it, but it was enjoyable and the pleasure it gave Tony was clear.\n\nI looked down, giggled as his crown emerged from between my boobs, vanished again.\n\n\"Stephanie...\" he said gently. His hand swept over my head.\n\nI looked up at him, smiled again. \n\n\"Enjoying yourself, Tony?\"\n\nHe just grinned.\n\nMy eyes locked on his, I continued, smiling happily. I could sense his arousal, feel his abs tighten.\n\nI let go of my boobs, lowered my bum onto my heels, took his shaft in one hand and his sac in the other, lowered my mouth to his cock.\n\nNo mere nibbling this time; I went as far down as I could, pulled back a little when I felt him at the back of my throat. \n\nAnother skill still to learn?\n\nMaybe. \n\nIf...\n\nI began to bob up and down his length, my cheeks hollow with suction, my tongue licking and teasing inside. I heard a low moan from above me. My fingers rolled his tender balls, pulling them gently.\n\nI stopped suddenly, backed away, looked up with a smile. My hands continued to play. Tony's eyes had been closed; he opened them now.\n\n\"How's Tony?\" I grinned, pumping his wet length with my hand.\n\nHis smile was a pretty good answer.\n\n\"You are amazing, Stephanie.\" His eyes closed as I took him between my lips again, swirling my tongue around and around his swollen crown. \n\nHis hands closed on my head; he looked down, pushed a little forward with his hips. Sensing what he wanted, I put my hands behind my head, licked my lips and covered my teeth with them. I closed my lips around his shaft and tried to smile up at him as he began to slide his hardness in and out of my mouth. Once he hit the back of my throat and I coughed; he took shallower strokes thereafter.\n\nA minute or two later, I brought my hands back down, backed away.\n\n\"My turn, now,\" I said. It was, I thought, a time for memories. \n\nI sucked on his length as hard as I could, bobbed my head up and down his cock as quickly as possible. My hands outside teased and stroked his legs and sac. I could sense his body tensing up.\n\nHis hands closed on my head again, gently pushed away.\n\n\"Stephanie...\"\n\nI leaned back, smiled. \"Mine,\" I grinned, then leaned back in, resumed.\n\nA few seconds later, his body began to tremble. I took him deeper, to the back of my mouth, began to swallow as his release came. My hand around his length continued to pump, but slower.\n\nIt ended. Looking up at him, Tony seemed almost stunned. His eyes opened; he reached down, grasped me by my upper arms and pulled me to my feet. He bent to kiss me, but I pulled away.\n\n\"I need to brush my teeth.\"\n\nHe chuckled. \"I doubt it, Stephanie, but whatever you want.\" He kissed my cheek instead. \n\n\"Thank you,\" he said, pulling me into a hug. I could feel his wet manhood, still hard, on my tummy. It was a happy, peaceful moment and I didn't want it to end. We stood there for a long minute before I spoke.\n\n\"Now we need to go, Tony. I need to get back. Please.\"\n\nHe looked a little puzzled, as if expecting more, wanting to send me home smiling. Silly man; I already was.\n\n\"That was fun, Tony. I enjoyed it, truly. But dinner will be starting and I still have things to do for tomorrow.\"\n\nLong fingers swept over my skin, fondled my bum.\n\n\"Friday, then?\" he said gently. \"Please?\"\n\n\"Friday,\" I confirmed.\n\n\"And you'll think about...?\"\n\n\"I promise, Tony. I'll have a hard time thinking of anything else.\"\n\nI reached behind my neck, unfastened his necklace, handed it to him.\n\n\"Don't lose this,\" I said. \"I'll need it.\"\n\n<center>+</center>\n\n<center> Thanks for reading. If you enjoyed this tale, please remember to vote or comment.</center>\n\n<center>+ + + + +</center>\n\nFor those who have enjoyed Stephanie's tale thus far, a sample of Chapter 3: \n\nI'd shifted far enough that I wasn't sitting on my dress any more. Reaching down with crossed arms, I found its hem, leaned forward and pulled it over my head in one long motion. The expression on his face was priceless as he tried to watch both me and the road ahead. \n\nI lifted it up into the windstream with both hands. The thin fabric flapped and roared over us like a flag in a gale. I opened my hands with a loud &hairsp;Wheeee!&hairsp; and it was gone, leaving me dressed in Tony's silver and an excited smile. \n\nThis too is something every girl should try at least once. Trust me. "
    ],
    "authorname": "TarnishedPenny",
    "tags": [
        "cmnf",
        "sugar daddy",
        "nudity",
        "outdoor nudity"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/past-present-and-future-ch-02"
}
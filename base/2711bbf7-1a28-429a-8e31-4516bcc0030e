{
    "title": "Five Years and Four Days Ch. 03",
    "pages": [
        "Preface \n\nPart three of four. If you have come this far, here is your reward. Probably need to read parts one and two first to get the gist of all this. \n\nFIVE YEARS AND FOUR DAYS - DAY THREE \n\n- AFTERNOON -- \n\nALEX \n\nI spent the whole night half awake, not wanting to fall asleep and thereby lose the ability to replay Jess's literal drive-by again and again. I spent the whole day at work in a daze. I watched time inch towards the weekend, and happily spent most of it daydreaming about what might have happened had Jess stayed. \n\nI texted Clash and told her what happened. Annie screamed when I called to tell her the news. I was too shocked for any clarity of discourse about the turn of events, and my entire nervous system was on hyper-drive. \n\n\"Just make sure she knows what she's doing. She's still straight, Alex, it may end up totally freaking her out if she is doing this on a whim.\" \n\nI appreciated Annie's concern, but I really couldn't care less whether Jess was straight or gay at that point. \"Annie, if that client that you said you'd go home-wrecker for - came up and told you she wanted to kiss you a lot, you are not going to check to make sure she knows what she's doing.\" \n\n\"OK, true, but she's has her beautiful wife and beautiful kids and she would never leave them for me. Even though I know we can have wild and crazy sex all night long...\" Annie sighed dramatically. \n\n\"Geez, I'm sorry I brought it up. Anyway - message received, but Annie, I have got to see where this goes.\" \n\nAs 5 o'clock neared, I realised that I was not going to get out of work anytime soon. The team was trying to get something done for the client before the weekend; with Jess's kiss forefront in my mind, I finally managed to achieve levels of productivity previously thought impossible. \n\nBy the time I sprinted back to the hotel to change, it was just after half six. \n\nI called Jess. \n\n\"Hey - it's Alex. I'm jumping in a cab now.\" \n\n\"I'll be here,\" came her soft reply, \"see you soon.\" \n\nI didn't really know what to expect. Were we just going to pick up where we left off last night? Were we going to talk about it? \n\nJess opened the door as I walked up. I smiled awkwardly. \n\n\"Hi,\" I said, \"sorry I'm late.\" \n\n\"I'm glad you came. Come on in,\" Jess reached for my hand. \n\n\"Coffee or tea?\" She asked. \n\nI shook my head 'no,' all the while staring into her beautiful eyes. \n\n\"Me?\" She asked again, smiling. \n\nI laughed and nodded. \n\n\"So you were flirting with me yesterday,\" I grinned, \"I was so confused.\" \n\nJess wrapped her arms around me, \"I must be getting rusty, I thought I was being obvious.\" \n\nShe pulled me closer and I eagerly met her for a kiss. Her lips were perfect. She tasted wonderful. I gently placed my hands on her hips, feeling her warm skin through her shirt. \n\n\"Well, that was worth waiting for,\" she sighed. \n\nI could not believe Jess was holding me. \"I can definitely get used to this. You like me back!\" \n\n\"You are all I've been able to think about. I can't get enough of you.\" \n\n\"I feel like someone's going to wake me up any moment and I'm going to realise that this has all been a dream or something.\" I held her tighter. \n\n\"Well, I can tell you that it is definitely not a dream. You are here, with me, and I am kicking myself for not coming on to you sooner.\" \n\nI laughed, \"Honestly, I don't think I would have known how to respond - I am still a little in shock.\" \n\nJess touched her nose to mine, \"Now, please make up for lost time and kiss me like you did last night.\" \n\nI happily obliged. \n\n\"When did you become so sexy?\" Jess asked when we broke apart. \n\nMy heart swelled at her words. I tilted my head back and looked at her, \"Far from it. I'm just a big dork with a huge crush on you.\" \n\nJess shook her head, \"I've never met a dork who kisses like you. I wonder what else you do really well...\" \n\nI held her tighter as I felt myself starting to throb with need. At that exact moment, Jess pressed her hips against mine. It was electric. We both felt it. \n\n\"Jess, I'm not protesting, but where are we going with this?\" I nuzzled her neck, \"I mean, is this... are you sure about this?\" \n\nJESS \n\nI placed my hand on her chest, my other hand holding firmly to her belt, \"More sure than of anything else in my life...\" \n\nAlex smiled. \n\n\"I want this,\" I heard myself saying, \"I want you.\" \n\nAlex stared at me. I surprised myself by how forward I was being. Alex leaned in closer and looked steadily into my eyes, \"Are you sure? Because I'm jumping out of my skin I want you so much.\" \n\nI nodded wordlessly and tried to grab every part of her at once as I kissed her, those broad shoulders, her hips, her back. \n\nAlex's strong arms came around me, and I felt one hand on my back, and one on my hip. Before I knew it, she picked me up, turned us around, and pinned me to the wall, her thigh deftly inserted between my legs as she continued kissing me. Her hands found my stomach and slowly moved up over my shirt until they cupped my breasts and squeezed. \n\nI moaned as her tongue caressed my lips, and her thigh made an obvious and welcomed assault against my crotch. \n\nThere was something new and beautiful and sensual about being in Alex's arms. I always liked tall, strong lovers, but this was so different from everything that came before. Alex's hands were confident explorers, knowing just where to go to root out hidden pleasure spots. Her thumbs grazed over my nipples, and then swept under my breasts, sending jolts of arousal through my shirt and bra, to my skin. \n\n\"Oh my god, Alex, is this how you bed all your lovers?\" \n\nAlex grinned, \"I don't kiss and tell, Jess... So... here on the floor, or the bedroom?\" Her eyes danced as she asked. \n\nI pointed towards my bedroom, \"first door to the right.\" \n\nAlex continued kissing me as she carried me to the bedroom. She lowered us down onto the bed and knelt between my legs. She leaned down and kissed me again as her hands started to pull my shirt up over my arms. I sat up and threw the shirt off. Alex's lips and hand quickly found their way to my breasts, squeezing and teasing my nipples through my bra; her other hand reached behind me and in one movement, unclasped the bra. Her eyes never left my breasts as she removed it. \n\n\"That was a smooth move, Alex Mak,\" I gasped, looking up at her staring at me, which sent another shot of desire through my core. \n\n\"Wow. You are so beautiful,\" she said, her hands returning to my breasts, my nipples now fully erect and yearning for her touch. \n\nI reached for her shirt, fumbling to untuck it in a hurry. Alex pulled off her shirt and sports bra, and lowered herself down until the full length of her body was on top of mine. Her small breasts on mine, she leaned in to kiss me again. I had never felt as well-embraced as I did at that moment. Alex rained kisses up and down my upper body as her hands worked to rid me of my trousers and underwear. \n\nMy breathing was ragged at this point, my skin felt like it was on fire, and Alex's fingers and hands left a trail of scorched nerve endings in their wake. The cool air of the room hit me as I lifted my hips and Alex removed the rest of my clothing. Her kisses continued to blaze a path down my legs, to my inner thighs, where I felt the first gentle nip of her teeth. \n\nMy breathing was shallow as I writhed beneath her, yearning for her mouth to be everywhere, all at once. I shouted when I first felt her tongue on me, licking upwards. I opened my legs more, eager to give her access. When her tongue assertively circled my most sensitive spot, I dug my fingers into her hair, bucking against her face. \n\nAlex then proceeded to demonstrate a skill with her mouth that gave me pleasure I had previously never experienced. Her tongue roamed over every skin cell, sometimes as a firm point, sometimes a soft probe, flicking over folds, plunging into my depths, shifting from slow to fast and in between. \n\nJust when I thought I was about to explode with an orgasm so strong it would split me in two, Alex started thrusting into me with her fingers. Moving slowly and deeply, her hand moved with the strokes of her tongue. Her other hand reached up and masterfully caressed my breasts. \n\nShe had my body humming, tingling, pulsing in multiple places at the same time, and I didn't even know how I could possibly be feeling all of it, until I felt it colliding all at once - the epicentre of a massive orgasm detonating. I think I screamed as I came, my hips thrashing against her fingers; my core throbbed for her tongue and fireworks of stars flashed as I closed my eyes in ecstasy. \n\nI felt Alex shift up along the bed by my side as I came down off my climax, and sensed her trailing her wet fingers up the side of my body. It was several moments before I could open eyes, and when I did, I saw Alex lying on her side, her head propped up by an arm, looking at me. \n\n\"Oh holy hell, Alex, what did you do to me?\" I somehow managed to say, chest heaving, still trying to process how hard she had made me come. \n\n\"It's good you liked it,\" Alex smiled, \"Because I liked doing that to you a lot.\" \n\n\"To say 'I liked it' is gross understatement...\" \n\nI let my eyes roam all over her smooth sculpted torso and dragged my fingers along her shoulder blades and down across her small, firm breasts. I was happy to see her nipples stiffen under my touch. \n\n\"How long did it take for you to get your body to this state?\" I felt her breathing quicken as I ran my hand over her abs, my fingers stopping as I reached the waistband of her jeans. \n\n\"I don't know, it kind of just happened. Genetically lucky, I guess.\" Alex's eyes followed my hand's path as it wandered all over her body. \"I can't believe you are touching me like this.\" \n\nI traced my finger along her tattoo on her left arm. \"When did you get these?\" \n\n\"I got the one of my right shoulder blade first, junior year in college,\" Alex turned and showed me, \"then I added the two on my arms. It's kind of addictive.\" \n\n\"I think I am going to find you addictive,\" I said, \"Which is why this current situation is less than ideal... I'm completely naked and you still have your jeans on...\" I slid my fingers under her belt buckle and undid the belt as Alex rolled onto her back, watching me undress her. \n\nI quickly slid her jeans off, revealing a pair of men's black boxer briefs. It was the sexiest thing I had ever seen - sexy in that it was incredibly androgynous but so powerfully female, all at once. \n\nI slowly pulled down the briefs, hungry to see the rest of my new lover's body. Her mound had a small triangle of trim black hair, glistening with desire. I slid down the bed and took her in my mouth and heard Alex growl with pleasure. I felt like I was flying blind a little, conscious of my relative lack of experience, but Alex provided enough cues with her body that I was able to follow. I sucked and licked as she moaned for me, she tasted sweet and hot under my tongue. Alex made sexy little sounds as I inserted two fingers and started fucking her, feeling the hot warmth of her enveloping my fingers. \n\n\"Harder Jess, more...please...\" she muttered. \n\n\"Hang on sweetheart, one sec,\" I stopped briefly, and reached out to my bedside table and fumbled in the drawer for my toy. Alex's eyes widened in surprise when she saw what I got, but she smiled and said, \"Someone was prepared...\" \n\nI returned my mouth to her clit, and slowly inserted the cock. Alex groaned and started thrusting against it. I worked the cock in and out of her faster and faster, my arm on fire as I pushed it in as deep as I could again and again. A sheen of sweat glowed across Alex's lean musculature as she came, arching her back as waves of pleasure rocked through her body. Waves of pleasure that I was pulsing through her. It was thrilling. \n\nALEX \n\nThe woman of my dreams just took me on the ride of my life. I couldn't believe I got to kiss her, let alone do what we just did. \n\n\"For someone who's been with 'mostly men', you were pretty amazing,\" I said, \"You are amazing anyway... I can't believe we just did that.\" \n\n\"I'll take that as a compliment.\" Jess said, her hands caressing my breasts and stomach, \"I can't get enough of this body of yours, and this very, very, talented mouth.\" \n\nJess came in for another kiss. I held her tighter, pressing our bodies together. Her flesh felt like heaven. Her breasts were full, round and soft, with perfect pink nipples. Her taut stomach met mine perfectly, her long, lithe legs were wrapped around mine, and I could feel her wetness rubbing against my thigh. \n\n\"At some point, you'll have to enlighten me about your 'mostly men' comment, but first - where did you get that?\" I asked, \"It is the last thing I would have guessed you to have.\" \n\n\"Cathy and Julia! Who else! They gave two different ones to me, the other one with a harness, as a joke for my birthday last month,\" Jess laughed, \"methinks they will come in handy tonight...\" \n\nI raised my eyebrows, \"You are blowing my mind right now. Now, tell me about these other women in your \"mostly straight\" sexual adventures.\" \n\nJess blushed, \"Unfortunately not all that interesting. Let me put it this way: I've kissed more than one. None was earth shattering, none could really be categorized as a relationship.\" \n\n\"I'm very glad they didn't,\" I said, \"hey, where are you going?\" \n\nJess had rolled off me and started poking around under the bed, giving me a heart-stopping view of her behind. \n\n\"Here's the rest of the present from Cathy and Jules,\" she exclaimed, proffering a black canvas bag as she sat back on the bed, \"no dinner until we take this on a test drive.\" \n\nI took it from her and looked inside: some lube, a harness with another dildo attached, slightly larger than the one she used on me. \"You know this is weird, right?\" I asked, \"I've just taken a strap-on from my ex-teacher whom I've been fantasising about for years, and she got it from another ex-teacher whom I found out yesterday is gay.\" \n\nJess nodded, \"When you put it that way, yes... but no more weird than the fact that I've just found out my ex-student has become this studly woman who can basically drive me insane in bed. We are consenting adults now, Alex - the past is in the past?\" \n\n\"It's going to take me a little time to get my head around that. I still can't believe I'm lying in bed with you. Even in my wildest imaginings, I never let myself get to this point. I mean, I never thought I would ever get to do this...\" I cupped her breasts, \"or this...\" I kissed her neck, \"or this...\" I bit her ear lobe. \n\n\"Hm...\" Jess sighed, \"Feels like your head is wrapped around exactly the right kind of things...\" \n\nMy breath caught in my throat when Jess reclined and opened her legs invitingly. \n\n\"You see, you can't do that and not know that this is going to happen.\" I put on the harness and tightened the straps. \n\n\"Oh holy shit, if I had known that a woman with a strap-on would turn me on so much, I wouldn't have spent so much time chasing the alternative.\" Jess's eyes looked hungrily at me. \n\n\"You said 'holy shit',\" I chuckled, \"I've never heard you swear before.\" \n\nJess rolled her eyes at me. \"Get over here,\" she commanded, \"show me what you can do with that thing.\" \n\n\"Sorry. Sorry. I can be serious, I promise,\" I grinned. If this was what life was going to be like for the next 48 hours, I would die happy. \n\nJess grabbed my wrist and pulled me towards her, \"Alex Mak, stop stalling... and GET. OVER. HERE.\" \n\nShe didn't have to tell me again. I moved between her legs as she bit her lips in anticipation. I grabbed her hips and angled myself against her opening and pushed the tip in. Jess groaned. I withdrew and pushed in again, this time deeper. Jess groaned louder. I thrusted harder and faster as Jess shouted for me to keep going, her hands gripping the bedsheets. \n\nJESS \n\nIt felt so good. The bed started moving and creaking as she upped the tempo, and my body throbbed with every push, sending radiating currents of pleasure everywhere. \n\nI tried to open my mouth to say something, but I couldn't. I just knew that I didn't want her to stop. My mind went blank as Alex continued rhythmically pounding into me. She widened her kneeling stance at one point and drove into me with such depth that I reached the edge of yet another climax. \n\n\"Fuck me just like that, oh... oh... oh... don't stop... ungh... god, YES! YES! YES!\" I screamed as I came hard. Alex stroked in and out of me slowly as I reluctantly recovered from the peak of my orgasm. She stayed inside me as she reached down and pulled me up into a hug. I straddled her thighs feeling so full and so sated, the sounds of our breathing echoing off our embracing bodies. My breath caught as I moved slightly, as I felt the toy shift against my inside walls. \n\n\"Still not done? Intriguing...\" Alex held me close. \n\nI didn't know if I was quite ready for another round, but my quickly mounting desire for her indicated she was right. \n\n\"Flip onto your front,\" Alex said, lifting me slightly as she withdrew and positioned herself standing at the end of the bed, \"scoot down this way.\" \n\nI turned and offered up myself to her, quivering with expectation. I felt her hands on my hips, and waited only for a heartbeat before Alex came into me again, pushing all the way in, filling me up gloriously. \n\nI started thrusting myself backwards to meet her. It felt like hours as we moaned, screamed, and slammed into each other. Alex reached one hand towards my clit and rubbed it, sparking an avalanche of energy I didn't know I had left. Faster and harder we moved together, until we both came, collapsing onto each other; I held onto her as I gulped air down, half afraid she might disappear when I fully came back to my senses. \n\n\"Ok, ok,\" I whispered, \"I don't think I can ever move again.\" I felt Alex's arms pull me into her body, spooning me. One hand cupped a breast, and the other my sex. \"Too sensitive,\" I protested. \n\n\"Just laying my hand there, I promise,\" She said into my back, kissing my shoulders, her breath hot on my neck. \n\n\"Hm, nice,\" I whispered as we settled into our embrace. I heard Alex's breathing slowing down, and delighted in her strong arms around me. I looked at the clock and was surprised to see how much time had passed. \n\n\"I think it's too late to go to dinner,\" I said, shifting to turn and look at her. She smiled and shrugged, making her hands shift slightly. I gasped as my nerve-endings sprung to attention. Alex arched an eyebrow, \"Interesting,\" she said, moving one finger to delve deeper into me, \"I think I need to investigate...\" \n\nAlex maneuvered herself lower, kneeling between my legs. \"I was so excited to taste you before that I didn't have a proper look around,\" she said as her fingers gently pried my lips open. \"You are so incredibly sexy,\" her words sent a million tingles up my body. \n\nI started quivering as Alex slowly slid her body back further and lowered her lips towards my swollen opening. \"And you taste so good...\" The flat of her tongue was smooth and warm, pressing firmly against my flesh. \n\n\"Oh... oh... Oh!\" I heard myself shrieking. \n\n\"Hmmmmmm,\" Alex's lips and tongue moved ever so slowly on their journey. \n\n\"Oh FUCK!\" I yelled. \n\nI felt her fingers work their magic and before I could even process what was happening, my body was headed for yet another orgasm. \"Ah! Ah! Shit! Alex... don't stop,\" I pleaded. Her other hand found my breasts and expertly shifted between them. \n\nI wrapped my legs around her and tightened their grip as I came again, my entire being vibrated with pleasure. \n\n\"Ok. How did you do that?\" I moaned. Alex landed gentle kisses up and down my torso, stretching her body along mine, her eyes glinting with mischief. I slapped her in mock protest, \"That was a sneak attack. Unforgivable.\" ",
        "\"I couldn't help myself,\" Alex shrugged, the cocky grin returning, \"I won't do it again if you don't want me to...\" \n\n\"I said it was 'unforgivable,' not 'unrepeatable,'\" I was surprised I could still string a sentence together. \n\nAfter a while, Alex sat up. \n\n\"Hey - where are you going?\" \n\n\"The loo... and to take this thing off.\" \n\n\"No, no, don't.\" My entire body was tingling with need. I have never felt this much desire for someone before. \n\nAlex raised her eyebrows. \n\nI got up and straddled her thighs, the toy pressed up against my stomach. \n\nAlex shifted backwards and I raised myself onto my knees. As I lowered myself, Alex filled me up again. \n\n\"Oh, Alex. Oh god...\" I felt out of control, but gloriously sexy as I impaled myself on Alex's cock. \n\nI felt Alex's arms and back tense as she lifted me up and pushed me back down, finding yet another angle with which to fuck me. I placed my hands on her shoulders, my legs raising me up again and again, between swallowing her up with such force and speed that when my orgasm hit, I bit her shoulder as I screamed. \n\nALEX \n\nI never thought I'd manage to fuck someone from that position, but there I was, driving Jess onto that cock like there was no tomorrow. By this point, my brain had given up processing our activities and stalled at primal carnal desire. It wasn't a bad place to be. \n\nI felt her body tighten as she came, her face was buried in my neck, and her fingers dug into my shoulder blades with such intensity that they drove an avalanche of pleasure through my body. I just discovered my most favourite thing in the world: making Jess come hard. \n\nI flopped backwards onto bed, where I saw her eyes suddenly open wide with shock as I took off the harness. \n\n\"What? Are you ok?\" I asked. \n\n\"You're bleeding,\" she said, pointing at my shoulder. I glanced down and saw red dots of blood blossoming through my skin in the pattern of her teeth. \n\n\"You bit me? When did you bite me?\" I sat up as she grabbed some tissues and pressed down on the wound. \n\n\"Just now - I'm so sorry Alex - does it hurt?\" Jess kept applying pressure. \n\n\"It does now that I know it's there! That's going to be a really impressive-looking bruise in the morning,\" I teased, \"While you are playing nurse, can you check to see how much damage your fingers did to my shoulders?\" \n\nJess looked over my shoulder and then at me apologetically, \"you've got some major scratches back there, but no bleeding. I'm so sorry!\" \n\n\"Good thing you keep your nails relatively short,\" I winked, \"you are so sexy when you come, do you know that? Well worth the flesh wounds. I actually kind of like the fact that you've branded me with your teeth...\" \n\nJess lifted the tissues, \"I'll get something to tape that up.\" \n\nShe came back with some gauze and tape, and expertly covered up the bite. I leaned back and stretched out on the bed. She joined me, placing her head on my uninjured shoulder and inserted a leg between mine. \n\n\"I'm sorry I bit you.\" She said. \n\n\"I like being your patient,\" I said sleepily, \"You can do that any time you want.\" \n\nWe must have drifted off, and I eventually woke up to a darkened room and the sound of Jess getting dressed. \n\nShe noticed me stirring, \"It's after 10 - the pub across the street is still serving food. I'm famished - I'm going to go grab us a couple sandwiches.\" \n\nI frowned in protest as she leaned down to kiss me. \"You're leaving me for a couple of stale pub sandwiches?\" \n\n\"Your stomach will thank me later. Be back in a tick,\" Jess promised as pulled on her trousers. \n\nALEX \n\nI put on my t-shirt and boxer briefs once Jess left. I hung up my shirt in Jess's closet, and dug through my jeans for my phone. I scrolled through my emails. I felt like I needed to be doing something just so I could remind myself that I had not hallucinated the past couple of hours. Annie had texted, hankering for news. I shot back a reply saying I was at Jess's, and promised to give her the full story tomorrow. \n\nAnnie rang immediately, \"This is costing me my rent for next month so talk quickly.\" \n\nI laughed, \"We slept together.\" \n\n\"HOLY SHIT! WHAT? Was it good? Oh my god, is she there right now?\" \n\n\"No. She's out getting us some supper. It was pretty amazing.\" \n\n\"Wow. So what does this mean? I mean, obviously, it means something...\" \n\nI stretched out on the couch in the living room, still feeling like I was in a dream. \"I don't know, Annie. I think I just want to enjoy the next two days and see what happens.\" \n\nThere were hundreds of questions bouncing around in my head; reality can kick in later. \n\n\"Wow,\" said Annie again, \"I thought I was going to have to put you through some decontamination shower when you got home to keep you from moping around because Jess didn't feel the same way. This is a whole new ball game.\" \n\nI shook my head, \"I have zero idea what's going to happen. She could still call the whole thing off, you know, so I may yet want to crawl into a dark hole when I return.\" \n\n\"I'm speechless, honestly.\" \n\nI heard a key in the front door. \"Oh, Jess is back. I'll talk to you later.\" \n\n\"Okay, go have fun. I'm having dinner with Michelle and some other folks tonight. Can I tell them? They are going to DIE.\" \n\n\"Uh, maybe wait until after the weekend?\" \n\n\"Ok. I better go now. I can hear Verizon sucking the money from my bank account as we speak. Love you Al.\" \n\nJess smiled and straddled me on the couch. Who is it? She mouthed. \n\n\"Love you too, Annie.\" I hung up. \n\nJess ran her hands underneath my shirt and squeezed my breasts. I tried to act cool, but it felt like I had firecrackers going off under my skin. \n\n\"Hello,\" I said, smiling up at the beautiful woman staring back at me. \n\nJess leaned in, \"I suppose this means Annie knows what happened tonight?\" \n\nI nodded, \"She is the few people I told about how special you were to me. She is surprised, but very happy for us.\" \n\n\"I'm happy, too. Although, I am very disappointed that you put your clothes back on,\" Jess said as she kissed me. Her mouth felt like a revelation. I couldn't remember enjoying someone's lips more. \n\n\"It felt weird being alone and naked in your house!\" I protested. \"But, now that you're back, please kiss me some more.\" \n\n\"Fair enough,\" she replied and lowered her lips to mine once again. \n\nShe shifted off me, \"Come get your sandwich. Sorry it's not a proper supper, but these aren't bad.\" \n\nIn the five years where Jess swirled around in a secret compartment of my heart, I never ever thought I'd be sitting with her, having dinner after having blindingly good sex. I only dared imagine scenarios where she'd maybe finally notice my feelings for her and let me down easy. It was only in my dreams when my subconscious took over that I ever fully realised my desire for her. \n\nBut yet, there we were, sitting in her kitchen, finishing up our makeshift meal. Jess pulled me up by my shirt and led me back to the bedroom. I happily followed. She pushed me onto the bed and lay on top of me, stroking my hair. Her eyes were even more beautiful close up. I still couldn't believe that she was looking at me, touching me. \n\n\"Is this how sex was with all your past girlfriends?\" She asked. \n\n\"Are you jealous?\" \n\n\"No...well, maybe...\" Jess paused, \"Sex has never felt quite like this for me. I mean, it's always been good, but not like this... Guys tend to need breaks to, uh, you know, reset. But it's not just that. I'm just wondering if this is because it's you and me, or if it's how women have sex with each other - and I've just been missing out.\" \n\n\"Sex with women isn't always, well, this amazing. And, just for the record, I usually go on at least a couple of dates before jumping into bed with someone.\" \n\n\"So this thing tonight was unusual.\" Jess smiled. \n\n\"Highly unusual,\" I acknowledged, \"but not at all unwelcomed.\" \n\n\"It's unusual for me, too,\" Jess said, \"In all sorts of ways.\" \n\n\"You mean you don't lure ex-students to bed to bite them at every given opportunity?\" I teased. \n\n\"No. That would be a loud and resounding 'no.'\" \n\n\"I'm very happy to hear that,\" I loved the feel of her fingers in my hair. \"Are you ok with this? I mean, you just slept with a woman. It's going to raise some eyebrows.\" \n\nJess looked me square in the eyes, \"First, I don't give a toss about people who might have an issue. Never did, never will. Second, I don't think you know the effect you have had on me. No one has made me react this way. And no one has made me feel the way I do now. I don't know much, but I know enough to recognize that there's something between us. So yes. I'm ok with this. Truth be told, I've never thought of myself as completely straight. Others may have, given my dating history, but not me.\" \n\nThere is something between us. I was in heaven, or Christmas came early, or some genie granted my most fervent wish. I just stared at Jess and smiled, gobsmacked with happiness. \n\nHer hands found their way under my shirt again. \"It also helps that no one I've been with has a body like this, or has managed to bring me to multiple orgasms in one night...\" \n\n\"That feels so good,\" I growled softly, as her hands caressed my chest. \n\n\"Let me be clear, it's not just your body I like, but I'm assuming you won't take exception to reverting to our earlier state of undress?\" \n\nI shook my head from side to side as Jess's shirt and bra came off. I sat up and pulled off my t-shirt. Jess grabbed my boxer briefs and slid those off, along with her trousers. She returned to lying on top of me. \"This is so much better!\" She sighed. \n\n\"Hey, why did you leave the pool deck when I was doing the backstroke thing with the girls the other day?\" I asked. \n\n\"Ah - you had just got out of the pool and your suit was wet, and well, it was a little distracting, so I had to go cool off.\" Jess looked into my eyes. \n\nI blushed, \"Oh! I thought it was because you got bored or something.\" \n\nJess slid off my body so she could stroke my body from my throat straight down to my pubic bone, \"There is nothing boring about this.\" \n\nJESS \n\n\"You are pretty spectacular yourself,\" Alex said, as she reached a hand between my legs, my desire for her immediately evident. \n\n\"Bring yourself closer...\" she beckoned. \n\nI shuffled my way up until I was level with her mouth. Alex grabbed my hips and pulled me closer, her tongue immediately going to work. She plunged her tongue deep inside me, making me shudder with pleasure. I clung on to the headboard as Alex's mouth and fingers manipulated my nerve endings towards ecstasy. \n\n\"Ahhhhhhhhhh!\" I shouted as the orgasm slammed into me. I leaned down to for a kiss before collapsing beside her. \n\n\"That was... epic,\" Alex said. \"It took you, like, no time at all. Wow.\" \n\n\"That tongue of yours is dangerous, Alex, I swear to god.\" I kissed her deeply, tasting a little of myself as our tongues danced together. \"I think I need to return the favour somehow,\" I reached across the bed and grabbed the strap-on, and slid my legs through. \n\nShe reached her hands behind her head, watching me eagerly as I tightened the straps around my hips, and applied the lube. \n\n\"That is so fucking hot,\" Alex sat up, reaching for me. \n\n\"Hold on there,\" I pushed her back down. I straddled her stomach, feeling my arousal leave damp spots on her abs. Alex placed her hands on my waist, her thumbs slowly sweeping up and down my skin. \n\nI dragged my breasts up and down her chest, smiling as she closed her eyes and enjoyed the sensation of my nipples moving across her skin. \n\n\"I'm not really sure how to...\" I suddenly felt very shy, desperately wanting to please her. \n\nAlex smiled, \"You'll do just fine.\" \n\nI lifted myself over her. Alex helped guide me inside. I slowly lowered myself until I was fully in her. I exhaled as I settled in, and Alex nodded, her eyes hungrily watching me as I moved. Alex lifted her hips up to meet me on my way down, allowing me to push a little deeper into her each time. Our bodies met, again and again, until she came. \n\nFinally sated, we held each other close. I pulled up the covers and turned out the light. The clock showed that it was a little past one in the morning. Her hand roamed around my torso and swept up and down my leg. I rested a hand on her hip and buried my face in her neck. \n\n\"Never in a million years would I have guessed that I would be able fall asleep like this,\" Alex murmured. \n\n~ To be continued ~"
    ],
    "authorname": "careythomas",
    "tags": [
        "lesbian",
        "lesbian sex"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/five-years-and-four-days-ch-03"
}
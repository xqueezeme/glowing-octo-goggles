{
    "title": "The Succubus in the Summer House",
    "pages": [
        "It was a scorching late July day. Alex Wakefield had been planning on spending it at the beach ogling all the tourist chicks in their skimpy little bikinis. Maybe getting lucky in the evening. They were all dirty cows, especially when they were drunk.\n\nThen the call from Teddy Demme had come in.\n\n\"Something's come up, lads. I'm going to need you for the next twenty-four hours.\"\n\nLads was Alex Wakefield and Jimmy Garton. They'd been mates since school. Or rather, since they'd both been kicked out of school. Currently they rented a flat on Greene Street. It was a shithole, but it was only temporary. Alex and Jimmy were lads on the make, and that was down to knowing people like Teddy Demme.\n\nJimmy wasn't happy about the call.\n\n\"Aw fuck, I was supposed to be meeting Gemma this afternoon.\"\n\n\"You'll have to put it off,\" Alex said.\n\n\"She goes back home tomorrow.\"\n\n\"Tough.\"\n\n\"Two weeks I've been working on her. Two weeks I've been trying to get in her knickers.\"\n\nDidn't matter. If Teddy Demme put in a call, you dropped everything and did what you were told.\n\nJimmy was still grumbling about it while they waited for Teddy to come and pick them up.\n\n\"She would have put out for sure. That's two weeks down the shitter.\"\n\nAlex didn't really see the appeal. Gemma had a nice ass, but the rest was nothing to write home about. Nasty snobbish attitude as well, like most of the bitches that came over from the well-to-do suburbs. Thought they were better than everyone else.\n\nNot that those girls were that much better. They wouldn't be holidaying in Spackton-on-Sea if they were. Gemma's father was probably a small-town lawyer. Thought he was a big shit with his own law practise, while all the real big shots in the big city thought he was just as much a hick as his daughter thought Alex was.\n\nAlex didn't think Gemma would put out. She'd just turned eighteen and was one of those former 'good girls' relishing the effect her looks and body had on all the boys. It was all a game to her. She'd prick-tease Jimmy all evening, then make up some excuse right at the end.\n\nIt wouldn't work. Jimmy had a contingency plan for girls like Gemma, a little special something to slip in her drink. Alex knew his mate. Jimmy was gonna smash those doors in tonight one way or another.\n\nOr would have, if Teddy Demme hadn't put in the call.\n\nLucky for Little Miss Pricktease.\n\nProbably lucky for Jimmy as well.\n\nAlex kept telling him it was harder and harder to pull that shit nowadays with the feminazis running everything. Sooner or later he'd get caught, and then it'd be a lifetime of him getting his doors smashed in by big black cock in prison. Too much of a risk in Alex's eyes. If you were that desperate for minge there was always The Pink Orchid on Queen Street.\n\nAlex had visited on occasion, when watching all the dirty cows walk up and down the promenade in their itsy-bitsy bikinis had built up too much to be relieved by a furious early-evening wank.\n\nHe'd always hated himself afterwards.\n\nBut what could you do? He had big jug ears and his aunt said he had a face that looked like it had been whacked by a shovel. She wasn't wrong.\n\nThat wouldn't hold him back forever. Look at Teddy Demme. The bloke looked like the Thing and the Elephant Man had had a baby, and he probably had tons of minge throwing themselves at his feet. That was because he had power, and power was everything.\n\nWhich was why, when someone like Teddy Demme called, you fucking dropped everything. Because that was how you got to work up the ranks until, one day, you were the one making the phone calls.\n\nJimmy bitched, but he knew it too. Gemma was just another trampy tourist tart. Plenty more where she came from.\n\nTeddy showed up in a big Beemer at just after quarter past three.\n\n\"Get in the back, lads,\" he said.\n\nAlex opened the back door and he and Jimmy slid along the wide back seat. The interior of the Beemer smelt of leather polish and stale cigarettes. Teddy hadn't switched the aircon on, so it was almost unbearably stifling in the July heat.\n\nTeddy was a craggy presence behind the wheel. His hair was snowy-white and patchy. He was the oldest of old firm. He'd been doing this shit since before Alex had been a little sperm swimming in his daddy's testicles. Despite his advancing years he still had that aura of old-school hardness, the kind that said he was still capable of beating your ass with a knuckleduster if you even thought about giving him shit.\n\nUsually.\n\nHe seemed less composed today. Jittery even.\n\n\"What's the job, guv?\" Alex asked.\n\n\"We'll do whatever you need,\" Jimmy said. \"If you need someone whacked, just give us the shooters and... pow!\"\n\nJimmy made a gun with his hand and mimed shooting through the windscreen.\n\nTeddy's craggy face cracked in a scowl.\n\n\"There ain't gonna be any shooting,\" he said.\n\nAlex thought he heard him mutter \"wouldn't do any good anyway\" under his breath.\n\n\"I need you to babysit something for the next twenty-four hours. Nothing major. Should be a piece of cake. I'll tell you more when we get there.\"\n\nTeddy took them out along Aquamarine Parade, the main high street that ran parallel to the promenade. Given the day was a scorcher, the tourists were out in force, and being tourists, kept walking out into the street with no care for the traffic trying to get through. Teddy mostly kept ice-cool until a particularly stupid family stopped in the middle of the road to gawp at something out to sea. Teddy hammered on the horn. The father, a jerk in a tank top who was in no way as muscular as he believed himself to be, thought about starting something. Then he saw Teddy glowering at him from the driver's seat and thought better of it.\n\nSmarter than he looks, Alex thought.\n\nOnce they left the main promenade the roads were largely unimpeded and the Beemer was able to glide smoothly up the road to Windrush Heights. Windrush Heights was the posh part of Spackton-on-Sea. All the posh wankers lived there. Or rather, owned houses there. People didn't live in Windrush Heights. These were second homes for rich wankers to visit when they fancied a break from the city.\n\nWindrush Heights overlooked Spackton-on-Sea and the rest of the bay. Exactly how the posh wankers wanted it. Teddy drove the Beemer right up to the biggest and fanciest house of them all\u2014a two-storey villa situated on the highest point of the estate.\n\n\"Fuck me, it's the swankiest pile in wankerville,\" Jimmy said.\n\nAlex got out and shielded his eyes from the bright sunshine. Seagulls whirled overhead. It was a fancy house, and so white it hurt the eyes to look at in the sunlight. Just around the left side of the building Alex saw the edge of a swimming pool. To the right side of the house the road terminated at a cliff edge. A set of rock steps led down to the beach below. The beach was currently carpeted in semi-naked tourists.\n\nPrime spot for a party house, Alex thought.\n\n\"This is Mr Herbert's summer house,\" Teddy said. \"I trust you know who Mr Herbert is.\"\n\nAlex nodded.\n\nEveryone in the firm knew who Mr Herbert was. He was the firm. Mr Herbert was the guv'nor's guv'nor. He was to Teddy what Teddy was to Alex and Jimmy.\n\nThey were going to do a job for Mr Herbert. That was fucking big. And also fucking scary. If you fucked up a job for Mr Herbert, you didn't get sent on your way with a pink slip, you got a shiv in the kidneys down a dark alley.\n\n\"Good,\" Teddy said. \"Then you know what'll happen if you nick or break anything.\"\n\nHe walked up to the front door.\n\n\"Fuck, we're working for Mr Herbert,\" he whispered to Jimmy. \"You know what that means?\"\n\nJimmy was more interested in the house.\n\n\"Will you look at this gaff,\" he said. \"Imagine bringing a girl back to here. You'd shag her for sure.\"\n\nTeddy paused before opening the front door.\n\n\"I won't lie to you, lads. If you'd asked me yesterday to pick someone for this job, your names would have been a long way down the list. But yesterday is yesterday, and today I ain't got the manpower to be choosy.\"\n\nThat explained something Alex had been wondering about. He'd never seen Teddy Demme behind the wheel before. It was always someone else. Where was Big Bri? Was there something else going down?\n\n\"Understand perfectly, guv,\" Jimmy said.\n\n\"We'll step up,\" Alex said. \"You can rely on us.\"\n\n\"Good. Because this is Mr Herbert's house, and if you fuck up Mr Herbert's house, it's my ass as well as yours.\"\n\nHe opened the front door and Alex and Jimmy followed him inside. The curtains were still drawn and it took a short while for Alex's eyes to adjust to the gloom after the blinding sunshine outside. The downstairs area was spread out and luxurious. The empty bottles and full ashtrays spoke of a recent party. With the curtains drawn, the air felt stale and stifling in the afternoon heat. There was also a strange smell in the air\u2014a mix of perfume and something Alex couldn't quite put his finger on.\n\n\"Phew, smells like an orgy in here,\" Jimmy said.\n\nYeah, that was it, Alex thought. A sex smell. Jimmy would recognise it, of course. His friend was a pussy in some regards, but he was also a pussy magnet. He never seemed to have any problems getting the girls... even if some of them needed a few chemical inducements to go all the way.\n\n\"Voices down, lads,\" Teddy said.\n\nHe led them up the stairs and along a hallway to one of the guest bedrooms. He seemed cautious and on-edge the whole way, as if they were creeping up to perform a hit on someone. It was only when they reached the back bedroom that he seemed to relax.\n\n\"In here,\" he said.\n\nIt looked like a guest bedroom, but as with the rest of the house, the room was large and spacious. Alex didn't have much opportunity to check it out thoroughly. His attention was drawn to the bed. Or rather, who was on it.\n\nThere was a young woman on the bed. She was on her knees and trussed up like a Christmas turkey with her arms behind her back. And really tied up. Whoever had done it wasn't taking any chances. There were ropes all over her, some tight enough to dig into her exposed flesh, of which there was a lot as she was dressed in some kind of skimpy Halloween devil girl costume that was little more than leather straps and a red bikini. She had a red ball gag in her mouth. Her eyes were fearful as she glanced at the men entering the room.\n\nA kidnapping, was Alex's first thought. Teddy had nabbed a rich socialite or someone's stupid slut daughter, and needed Alex and Jimmy to watch over her. This was bigger than the low-level head-cracking and drug-dealing Alex and Jimmy were usually asked to do. Alex again wondered if there was something else going down, and that was the reason why Big Bri and the others weren't around.\n\nThe girl was pretty hot, Alex thought. Late teens or early twenties with flawless, sun-bronzed skin. The way she was all tied up was pretty kinky as well. Maybe that's how Teddy had got her. The rich girls were always the dirtiest sluts in Alex's experience. Thought she'd signed up for some kinky bondage games and bam!, time to put in a call to the bank of Mum and Dad.\n\nAlex reckoned that bank was loaded. The girl's red devil costume was way fancier than the usual trash you could get on Aquamarine Parade. She had fairly realistic looking horns, dainty little bat wings and a thick devil's tail. They looked good enough to be proper movie prosthetics.\n\nWait. Did that wing just twitch.\n\nJimmy noticed it too. \"Is that a costume?\" he asked.\n\n\"No,\" Teddy replied, flat and simple.\n\nAlex stopped ogling the girl on the bed and turned to Teddy with a face full of shock.\n\n\"Then she's...?\"\n\n\"...something you're better off not knowing about,\" Teddy finished for him. \"Trust me, lads. You don't want to go digging here. You'll only end up burying yourselves.\"\n\nNah, it had to be a wind-up, Alex thought, looking at the girl on the bed.\n\n\"Don't concern yourselves with who or what she is. I need you to make sure she stays here until...\"\n\nTeddy was interrupted by his phone going off in his pocket. He pulled it out and checked the screen.\n\n\"Hold on, lads. I have to take this.\"\n\nHe moved to the door.\n\n\"Do not touch or talk to it.\" He pointed to the girl on the bed before leaving the room to answer the call.\n\nAlex and Jimmy, being curious, moved to the door to surreptitiously eavesdrop. Teddy had moved off down the corridor, but not so far away they couldn't hear his side of the conversation.\n\n\"It's subdued, for now.\"\n\nA pause.\n\n\"No, it was not fucking easy. But it's done.\"\n\nA longer pause.\n\n\"Mr Herbert's idiot son-in-law. I reckon he summoned it to bring a little extra spice to the party.\"\n\nA craggy chuckle from Teddy.\n\n\"Yeah, they got a little more spice than they were expecting.\"\n\nAnother pause.\n\n\"Yeah, Mr Herbert has been informed. I don't think he liked the little shit all that much anyway.\"\n\nAnother craggy chuckle, but cut off as if the person on the other end wasn't in a joking mood.\n\n\"No, I don't know how he got hold of the book, or even knew about it. Must have grabbed it from Mr Herbert's library.\"\n\nA pause.\n\n\"Yeah, it's been retrieved. I'm on the way to return it.\"\n\nTeddy turned away and his voice became harder to discern. They missed most of what he said next.\n\n\"...got some people in the house.\"\n\nTeddy turned back and could be heard again.\n\n\"Yeah, they're reliable. You don't have anything to worry about.\"\n\nAlex and Jimmy turned to each other with broad smiles and gleaming eyes. Teddy Demme thought they were 'reliable'.\n\nTeddy ended the call and walked back to the door. Alex and Jimmy stopped staring through the crack in the doorway and jumped back to their original positions.\n\n\"Okay, lads,\" Teddy said. \"There's a specialist on the way over from Germany. He gets in to Gatwick at 9am tomorrow. I'll be collecting him from the airport and bringing him straight here. While I'm gone, I need you to babysit the house until I get back. Piece of cake, you're thinking, right. It will be, providing you follow the rules.\"\n\nTeddy got stern then, holding up his finger like a teacher. Except, unlike every teacher that had tried to bring discipline to Alex and Jimmy, they respected him enough to pay attention.\n\n\"You don't leave the house. You don't let anyone in the house other than me. And most importantly. Do not mess with the thing on the bed. Do not touch it. Do not talk to it. Make sure at least one of you is in this room, keeping an eye on it, at all times. And if one of you has to leave the room, make it quick. Don't leave your mate alone with her... it... for too long.\n\n\"There's beer and food in the fridge, enough to keep you going for the night. If you do what I say, you'll be alright. The hard part's been done. You just have to see it through 'til morning.\"\n\nTeddy left them a key and walked out of the house. They heard tyres crunch on gravel as the Beemer drove off. They were left alone in the room with the tied-up girl.\n\n\"This is kinda fucked up,\" Jimmy said, breaking the silence.\n\n\"Yeah,\" Alex said.\n\nThere was another pause while they stared at the girl on the bed.\n\n\"Who'd you reckon she is?\" Jimmy asked.\n\nAlex shrugged. \"No idea.\"\n\n\"Teddy was just yanking our chain with that not-a-costume thing, right?\" Jimmy said. \"I mean, it is a costume, right?\"\n\nThe wings and tail moved with the girl's breathing. They also moved, slightly, on their own.\n\n\"Yeah, gotta be just a costume,\" Alex said.\n\n\"Teddy trying to scare us so we don't mess with her,\" Jimmy said.\n\n\"Yeah,\" Alex said.\n\nShe was kinda hot, and\u2014tied up like she was\u2014completely helpless. That might be too tempting for men of low morality. Stupid men of low morality. Teddy would kick their ass to London and back if they interfered with her.\n\n\"Did Teddy seem kinda off to you?\" Alex asked. \"Like he was rattled or something.\"\n\n\"Something big must have gone down,\" Jimmy said. \"You ever seen Teddy drive before? Where's Big Bri? He wouldn't have called for us unless some major shit had hit the fan somewhere else.\"\n\n\"Best to do as Teddy said and don't go digging,\" Alex said.\n\n\"Yeah.\"\n\nThey pulled up a couple of chairs and sat with their backs to the wall. They watched the bound girl in silence. She didn't do much, on account of being all trussed up like a Christmas turkey. She glanced a couple of times in their direction with big wet eyes. She stopped doing that when she realized they were neither going to free her or assault her.\n\nThey sat and stared at the girl while the minutes ticked away. After about an hour of nothing, the strangeness started to wear off. There was no storm raging outside. Nobody had come to the house. The girl on the bed was... just a girl tied up on the bed. They were just carrying out a job for Teddy\u2014keeping an eye on a kidnapped woman. That in itself was unusual, but it was firm-job unusual rather than unusual unusual.\n\nJimmy in particular started to get antsy. He'd never been all that patient to begin with. He told Alex he needed to go to the bathroom, but Alex reckoned that was just an excuse to go and nose around the other rooms.\n\nThat suspicion was borne out as Jimmy returned after ten minutes with a an excited, \"Look what I found.\"\n\nThen, before Alex could react, bonked him on the head with a rubbery object.\n\nAlex snatched it from him and then recoiled in disgust when he realized he'd wrapped his hand around a giant rubber cock. Jimmy was doubled up with laughter.\n\n\"What the fuck?\" Alex said, looking down at the big pink dildo. It must be nearly a foot in length.\n\nJimmy picked it up and gave it a waggle. The swollen bellend bobbed back and forth.\n\n\"Found it in one of the bedrooms,\" he said with a broad grin. \"You wouldn't believe the other shit in there. Whoever was here was into some real pervy shit.\"\n\nWith the dildo still bobbing away in his hand, he looked over at the girl on the bed.\n\n\"Do you reckon they were planning to use it on her, or maybe have her use it on them?\"\n\nThe girl looked at the giant sex toy in Jimmy's hands and her eyes widened.\n\n\"Don't worry, love,\" Jimmy said. \"We ain't pervs.\"\n\n\"Makes you wonder what was going on last night,\" Alex said.\n\n\"Why don't I check it out?\" Jimmy said. \"Downstairs that is. We never got a good look when Teddy brought us in. Didn't he say there were some beers in the fridge? My throat is parched.\"\n\nAlex's throat was feeling a little dry as well. It was a hot day and the stifling atmosphere in the house was starting to get to him.\n\n\"Grab a couple for me,\" he said. \"But remember what Teddy said. Don't be too long.\"\n\nJimmy was gone for too long. Alex didn't notice at first. In truth, he was happy for Jimmy to be out of the room. That left Alex alone to look at the girl, and Alex was starting to like looking at the girl. The more he looked at her, the more he realized just how hot she was.\n\nAlex tended to bump into two types of girl.\n\nThe first were the trampy tourist sluts. They thought they were hot shit, but for the most part they were pretty ordinary on the eye. There was always something imperfect about their features\u2014a too-big nose, an extra roll of puppy fat around the waist, breasts a cup-size too small. They got attention from the sex-starved boys around them and thought that made them goddesses. As bitchy and irritating as it made them, they still had a bit of class about them, enough to just about make up for their imperfections and bad attitudes.\n\nThen you had the type of girl that worked in the sleazy strip clubs down Slagbury Road. Some of them had absolutely killer bodies, but were as dirty as fuck. So dirty you felt like you needed to take your eyeballs out and give them a good washing afterwards. Most of them were fucked up... on drugs, or a dumpster full of mental problems.\n\nThe girl on the bed seemed to be the best of both\u2014killer body, but still with a hint of class about her. It was also pretty kinky seeing her all tied up like that. Tied up and helpless. Alex could do anything he wanted with her, anything at all.",
        "Yeah, and then Teddy and a couple of goons would beat him so hard he'd be pissing blood for the rest of his life.\n\nIt was about then he realised Jimmy had been away for longer than he should. Alex gave him a ring to find out where he was.\n\n\"Oi, where are you?\"\n\n\"Fucking hell, you scared the shit out of me,\" Jimmy said. \"I'm on the way up.\"\n\n\"Where you been?\"\n\n\"Checking out downstairs. This house is swanky as fuck.\"\n\n\"Any sign of anyone?\"\n\n\"Nah... I think.\"\n\n\"Think?\"\n\n\"There's the garage. It's... I'll tell you when I get back.\"\n\nJimmy sounded weirdly spooked. Alex wondered what he'd seen.\n\n\"You find any beer?\"\n\n\"Yeah. The fridge is packed. The good stuff as well.\"\n\nJimmy returned with a handful of beer bottles, two for him and two for Alex. Alex guzzled the first one. He was thirstier than he thought. He wondered if it might have been better if Jimmy had grabbed a bottle of Coke instead. The beer looked the good stuff\u2014pricy Belgian beer. It also tasted like the sort of stuff that would give you a vicious hangover if you drank too much of it, too quickly on a hot day.\n\n\"It's proper gangsta downstairs,\" Jimmy said. \"Cash oozing from everything. If it didn't belong to Mr Herbert there'd be so much to jack.\"\n\nThey both knew that ripping off Mr Herbert was a spectacularly bad idea.\n\n\"It's fucking weird as well,\" Jimmy said. \"It's like they were in the middle of a wild party and then everyone fucked off.\"\n\n\"Maybe they just fucked off to the beach, or one of the clubs down Slagbury Road.\"\n\n\"Maybe... Or maybe they all went down to the garage and topped themselves in some crazy Satan ritual.\"\n\n\"What about the garage? You said you saw something in there.\"\n\n\"It's fucked up. Crazy stuff drawn on the ground and walls. Looked like something out of those shitty horror movies you like to watch. Might even be dead bodies in there.\"\n\n\"Might? You didn't check?\"\n\n\"Nah. Fuck that. I just glanced through the door. I ain't walking in on a pile of dead bodies and blood and brains all over the place. You know I ain't too good with blood.\"\n\nAlex knew about his friend's squeamishness. Jimmy was a real pussy in that regard. He didn't like watching horror movies or playing horror games.\n\n'Why you always got to be playing that morbid shit?' he'd say whenever Alex put a horror game on the Xbox.\n\nIn contrast, Alex loved that shit. So he was really curious to check out the garage.\n\n\"I'll check it out,\" he said. \"Where is it?\"\n\n\"Through the kitchen. There's a door in the side wall and some steps.\"\n\nAlex found he was strangely reluctant to leave the room and couldn't pin down why. For some strange reason he was reluctant to leave Jimmy alone with the girl.\n\nJealousy?\n\n\n\nNah, couldn't be. He'd never felt that before. Jimmy was a brazen motherfucker who'd try his luck with any bit of skirt. Alex was envious of that, but of him going for a girl Alex might like... Nah. The little sluts just weren't worth it. Bros before hos, always.\n\nSo it was weird to feel that little jealous pang as he left the bedroom. Must be the weirdness of the situation fucking with his head.\n\nHe walked downstairs. The house, as Jimmy had said, was really posh and blingy. It was also eerily deserted. Half-full bottles of beer and wine were scattered everywhere. As well as plates of half-eaten takeout. It looked like a snapshot of a party house after the revellers had all gone to bed. That in itself wasn't unusual. Most party houses looked like this, and then the people got up the next morning\u2014or afternoon, depending on how wild the party was\u2014and cleaned the place. Except it was now seven the next evening and the only people in the house were Alex, Jimmy, and the girl tied up on the bed.\n\nMaybe they'd all fucked off and left it for some other poor shit to clean up. Pretty ballsy to do to Mr Herbert's house.\n\nThe kitchen was the same\u2014empty bottles everywhere, open pizza boxes with congealed slices, an overflowing bin. Looked a right tip.\n\nAlex walked through into the garage and that's when things really got fucked up. Someone had painted what looked like a Satanic ritual circle on the floor. It was about ten feet in diameter and subdivided by the lines of a pentagram.\n\nWhoa, now this was something you didn't expect to see at your regular wild party.\n\n\n\nWeird letters and symbols had been written all around the circumference and within the pentagram. Black candles were positioned at each of the five points. They'd mostly melted down and the molten wax had solidified around the bases of silver candlesticks in strange, twisted shapes.\n\nYeah, this was... unusual, Alex thought. The partygoers must have been into some weird fucking shit. Alex could understand why Jimmy had come running back. Alex had watched a lot of horror films and played a lot of horror videogames. The Satanic stuff was pretty hokey nowadays. It had become cringe long before Alex had been born. Yet, that circle on the floor discomfited him in ways he couldn't quite explain. It radiated bad vibes. Alex's eyes began to water if he stared at it too long.\n\nJust what had they done?\n\n\n\nA4 printouts were scattered across the concrete floor of the garage. Alex crouched down to pick some of them up. They looked like scans of old books\u2014photocopies of archaic texts and old woodcut illustrations. Some of those woodcuts depicted semi-pornographic scenes. Alex was currently too weirded out to be turned on by them.\n\nWhat had happened in this house?\n\n\n\nHe found a smartphone lying on the floor. It was locked, but Alex pocketed it anyway. More out of habit than anything.\n\nHe walked back up to the kitchen and tried to make sense of what he'd seen. The people in the house\u2014who'd Teddy said it was, Mr Herbert's son-in-law?\u2014were into some seriously weird shit.\n\nHe thought about the girl upstairs. How did she fit in? Was she supposed to be the sacrifice? Were they that fucking crazy? Who was she? She couldn't be a common street hooker, or one of the strippers from Slagbury Road. Teddy wouldn't give a shit about them. She had to be someone important, or someone important's daughter. Maybe that was why Teddy was so antsy. Someone had royally fucked up and he was the one tasked with trying to smooth it all out before it escalated into a proper clusterfuck.\n\nWhatever. Alex and Jimmy were just common street punks. Teddy was right\u2014'Don't go digging.'\n\nAlex grabbed a couple of bottles from the fridge and walked back upstairs.\n\nHe reached the bedroom just in time to see Jimmy standing by the bed with his hand outstretched and about to touch the tied-up girl's exposed ass.\n\n\"What the fuck you doing?\"\n\nJimmy himself didn't seem to know what the fuck he was doing. He snatched his hand back, but rather than looking guilty, looked slightly befuddled. He blinked his eyes blearily as if he'd just woken up.\n\n\"Nothing,\" he mumbled, before returning back to their chairs.\n\nHe glanced suspiciously back to the girl on the bed.\n\n\"Did you see it?\" he asked as Alex handed him a bottle of beer.\n\n\"Yeah, looked like some freaky Satan worshipper shit,\" Alex said.\n\n\"This job is starting to do my 'ead in. Gemma texted while you were gone. She and her mates are going to the Sun & Starfish for drinks. I could be with them. Instead I'm here, in a house full of freaky shit.\"\n\n\"It'll be worth it,\" Alex said.\n\n\"Better be,\" Jimmy said. \"I was in there for sure, I know it.\"\n\nThey sat on the chairs and drank beers in silence.\n\nAlex remembered the phone. \"I found someone's phone,\" he said, fishing it out of his pocket.\n\n\"Giz,\" Jimmy said.\n\n\"It's locked,\" Alex said, passing it over.\n\n\"It's a Constellation 5G-7,\" Jimmy said. \"They're piss-easy to crack. Ali Patel showed me.\"\n\nJimmy unlocked it and the first image that came up was of a smug-looking man in his early twenties with bumfluff on his chin. He had his arm around a blonde girl who was pretty without being earth-shattering.\n\n\"Will you look at that bumfluff boy,\" Jimmy said. \"Know him?\"\n\n\"Nah.\"\n\nJimmy went through the recent message history. Bumfluff Boy seemed to be the party organiser. There were a lot of enthusiastic messages going out with meet-up times and promises of an awesome party. The people being messaged didn't seem to share the enthusiasm.\n\n'You said that last time and it ended up being a massive sausage-fest.'\n\n'This time is different. I've got something organised. Something real sexy.'\n\n'Hookers? They better be high-class.'\n\n'No. Better. You'll see.'\n\nIn another folder they found a series of pdfs. They looked like scans of ancient texts and woodcuts. Some of the woodcuts displayed pornographic acts of a wide and varied nature.\n\n\"Perv,\" Jimmy said.\n\nHe kept flicking through the files on the device.\n\n\"Hey. There's a video. Dated from last night.\"\n\nJimmy brought it up. It was blurry and the screen kept shaking as if the person filming was slightly inebriated. Alex recognized the garage. Bumfluff Boy was wearing black robes and standing at the edge of the circle. He was chanting some weird shit. He was the only one. Everyone else sounded bored, boozy and dismissive. They clearly had no faith in whatever weird shit Bumfluff Boy was doing.\n\nBumfluff Boy's chanting rose to a crescendo. He lifted his arms up in the air as his voice rose. The random chatter suddenly stopped and was replaced with whispers of awe. Bumfluff Boy stared at the centre of the circle with an even smugger grin on his face.\n\nThe weird thing was there was nothing there. The camera panned and showed... nothing. It was just a weird Satanic circle drawn on a concrete garage floor. And yet the crowd noises made it sound like Bumfluff Boy had managed to summon up Satan himself, even though there was nothing inside the circle at all.\n\n\"They must have been on the strong stuff,\" Jimmy said. \"I wonder if they left any lying around.\"\n\n\"Hold on. Let me try something,\" Alex said.\n\nHe took the phone off Jimmy, activated the camera mode and then looked through the screen at the tied-up girl on the bed.\n\nHe dropped the phone in shocked surprise. Jimmy tried to catch the phone as it fell, but ended up batting it into one of the chair legs hard enough to crack the screen.\n\n\"What did you see?\" Jimmy asked as he bent down to retrieve the phone.\n\n\"Nothing,\" Alex said.\n\nAnd that was the problem. He'd seen nothing. The girl on the bed wasn't there. On the screen that is. The bed was there, but there was no one on top of it, tied up or otherwise. It was like the girl had been erased, or had never been there in the first place.\n\nAnd yet, Alex was looking at her right now.\n\n\"Phone's fucked. These Constellation 5Gs are shit. They break if you as much as look at them funny. Ali reckons that's by design. They can sell more phones that way.\"\n\nAlex was still trying to process what he'd seen on the screen.\n\nShe wasn't there. Gone. Erased.\n\n\n\nHe must have imagined it. Or maybe it was one of those silly filters, only instead of adding cat ears and whiskers, it airbrushed people out.\n\nYeah, that had to be it. Because the girl was real and tied up on the bed. He was looking at her right now.\n\nHe had to stop letting the weird atmosphere in the house fuck with his head.\n\nAnother uneventful hour passed. It was dark outside. Jimmy got so bored he started playing with the giant dildo sex toy\u2014waggling it around and hitting things as if it was a novelty rubber mallet.\n\n\"This thing,\" he said, bonking the arm of the chair with the dildo. \"Makes you wonder what they got up to last night.\"\n\n\"The way I see it,\" Alex started. \"Mr Herbert's son-in-law is a complete degen perv. He throws a party for his perv mates. They do some crazy Satan ritual. They get so fucked up on pills they start hallucinating it works.\"\n\n\"Then what.\"\n\n\"I dunno. Maybe they all run down to the beach and throw themselves into the sea.\"\n\n\"How does she fit in with all this,\" Jimmy said, pointing to the girl on the bed.\n\n\"Maybe she's some drugged up prozzie Bumfluff Boy brought in to be his pretend sex demon. She saw something she shouldn't and now we're babysitting her until Teddy can find someone who can sort it out. Or maybe she's somebody important, and Teddy needs her to keep chill while he straightens this all out.\"\n\n\"Or... and I know this is going to sound fucked up... she is some kind of actual sex demon they summoned up from hell,\" Jimmy said.\n\nAlex laughed at that, albeit none too convincingly.\n\n\"Nah,\" he said. \"If she's an actual sex demon from hell, she wouldn't allow herself to get tied up like that. She'd fuck up everything and everyone. Rip their hearts out of their chests and the like. This place would be swimming in claret by now.\"\n\nThat made sense to Alex.\n\nTry not to think about what he'd seen on the phone screen.\n\n\n\nYeah, if she was demon, a real actual demon, she'd have broken free by now and torn their throats out.\n\nShe couldn't be a real actual demon. She was just a scared girl tied up on the bed.\n\nHad to be.\n\n\"Reckon Bumfluff Boy and his friends are coming back?\" Jimmy asked after another long period of silence.\n\n\"That might be why Teddy left us here, to keep them out,\" Alex said.\n\nThat led to another tense hour of them straining to hear every sound emanating from below\u2014every creak of a floorboard, every crunch of a footfall on gravel. Jimmy was getting antsy again, so it gave him an excuse to get up and do a tour of the lower rooms.\n\nAlex was okay with that. He was okay with being left alone in the room with the girl on the bed. It meant he had her all to himself. He let his gaze slide all over her exposed flesh. He wondered how long she'd been bound like that. It must be uncomfortable, being forced on your knees and tied up, the ropes cutting into your flesh, for hours and hours.\n\nShe probably deserved it. She looked a dirty slut.\n\nJimmy returning almost caused Alex to jump out of his skin. Staring at the lovely contours of the bound girl's body had caused him to lose all track of time. Unbeknownst to him, his hand had crept down to his crotch and was rubbing his cock through the fabric.\n\nHe hurriedly pulled it away the moment Jimmy returned to the room.\n\nJimmy hadn't found anything, but he had received another barrage of texts from Gemma.\n\n\"Just ignore her,\" Alex said.\n\n\"She's down at the beach. They've got a bonfire going.\"\n\nJimmy went to the window and looked outside.\n\n\"You can see it from here,\" he said.\n\nAlex knew his friend well enough to guess what was coming next.\n\n\"It's driving me crazy. She's down there, as ripe and juicy as you'd like, and we're stuck here doing this bullshit babysitting job on a girl that's not going anywhere.\"\n\nAlex said nothing.\n\n\"I know Teddy said we weren't to leave the house, but it won't take long, and I won't be that far away. And it's not like she\u2014\" he motioned to the tied-up girl on the bed \"\u2014is going anywhere anytime soon.\"\n\nThis would normally be the moment where Alex talked his friend out of it. He'd tell Jimmy how important this job was. He'd tell Jimmy that if they wanted to go places, to get out of shitholes like Greene Street, they had to show they were more than just common street punks. They had to prove they were reliable. They had to do exactly what Teddy said and not fuck it up. \n\nHe said nothing.\n\n\"She's not going anywhere,\" Jimmy said. \"It only needs one of us to keep an eye on her. You can do that. You don't mind? I'll make it up to you.\"\n\nHe smiled hopefully at Alex.\n\n\"It'll be fine. Go have fun,\" Alex said.\n\n\"You're a star,\" Jimmy said. \"Don't worry. I'll be back before Teddy. He won't even know I was gone.\"\n\n\"Give that posh bitch a good dicking,\" Alex said.\n\n\"Don't worry,\" Jimmy said. \"She's about to get the biggest dicking she's ever had.\"\n\nHe pumped his pelvis and they both laughed. Then Jimmy was gone.\n\nAlex was alone\u2014really alone\u2014with the tied-up girl on the bed. He waited until he heard Jimmy leave through the front door and then turned his attentions to the girl on the bed. The more he looked at her, the more he realised just how hot she was. Long silky reddish-brown hair. Lithe and toned body. Lovely smooth skin. Goddamn peach of an ass. Nice firm breasts. She reminded Alex of the better-looking girls on Slagbury Road, but with none of the craycray or depressed desperation. This, even despite her current undignified position. Although, truth be told, her current undignified position was pretty damn hot. Way too hot for smug little shits like Bumfluff Boy.\n\nAlex's hand strayed down to his crotch and started rubbing at his cock again through the fabric of his trousers. In truth, he'd let things build up. He'd been considering another visit to The Pink Orchid, especially if Jimmy did the usual and spent most of tomorrow going into too much detail about what he'd done to Gemma.\n\nAlex stood up and circled the bed. He regarded the tied-up girl like an art critic studying a sculpture.\n\n'Why pay for it at The Pink Orchid,' the little devil of his conscience whispered in his ear. 'You've got a hot girl right here right now. She's all tied up and helpless. Just climb on top and thrust away.'\n\nYeah, and Teddy would have him dropped off the end of Spackton Pier with fifty pounds of steel chain wrapped around his ankles. He didn't need an angel on his other shoulder to tell him that.\n\nFuck, he was feeling unbearably horny. His erection was rampant and felt painfully constricted in his pants.\n\nFuck it. He needed to take care of this, otherwise that little devil on his shoulder would eventually talk him into doing something stupid.\n\nAnd terminal.\n\nHe moved around behind the girl, where she couldn't see, and dropped his pants. His cock bobbed up. The head was florid and swollen. He wrapped a hand around the shaft and started to pump up and down.\n\nFuck it. The whole house already stank of sex. No one would notice if he jizzed on the floor.\n\nAnd he was going to jizz on the floor, because right in front of him and sticking up in the air was the finest peach of an ass he'd ever looked at.\n\nAlex jerked his hand back and forth. But not too quickly. He wanted to savour this one. Have a nice, slow, big fat wank to empty his balls.\n\nMaybe not completely empty. Jimmy was going to spend the whole of tomorrow bragging about what he'd done to Gemma, so Alex was definitely planning a trip to The Pink Orchid tomorrow evening. He'd need to save some juice for that.\n\nThe thought of banging one of The Pink Orchid's tarts aroused him further. He sped up.\n\nHe stared at the lovely peach of the girl's ass. Fuck, what he wouldn't give to just climb on top and plough her.\n\nAlex pumped his hand up and down.\n\nOh yeah, so good.\n\n\n\nThe girl's tail started moving. This wasn't a little twitch either. It rose up off the mattress like an awakened snake. The tip zeroed in on Alex's cock and seemed focused on it. It resembled the blind, scaleless head of a serpent or dragon.\n\nWhat the? Alex thought.\n\nHis hand kept pumping up and down his shaft. He was too into it to stop now.\n\nThe tip of the tail opened up to reveal a fleshy pink tunnel dripping with juices.\n\nAlex knew he should have been revolted, maybe even scared. Yet he was queerly fascinated by the fleshy orifice opened up in front of him. The wet interior started to dilate and throb with the same rhythm as his hand moving up and down his shaft. Ripples ran through the fleshy walls, drawing Alex in and making him wonder what it would feel like to stick his dick in there.\n\nHe took a step closer and took his hand off his cock.\n\nThe blind fleshy head of the tail bobbed forwards and smoothly sucked in his cock. Alex knew right away he'd made the right choice as the sensation was incredible. Warm wet flesh pressed all around his cock. It felt like a super juicy pussy. It felt better than a super juicy pussy. Ripples continued to flow along the inner walls. The flesh undulated and stroked up and down his cock. This felt way better than his hand. It also felt way better than any pussy he'd ever stuck his dick in.",
        "He took another step until his knees were resting against the mattress. The tail sucked his cock all the way in. Alex heard sloppy wet squelchy sounds as it sucked on him. The internal fleshy walls continued to ripple and undulate against his cock in a gentle stroking action.\n\nThis would be the point where Alex sped up and jerked himself to climax. The tail was far more skilled than that. It continued to suck on him with slow fleshy pulses, gradually ramping his arousal higher and higher.\n\nGetting impatient, Alex clamped his hands around the bulbous end of the tail. He wanted to hold it in place and thrust his hips against it until he came.\n\nThe warm flesh swelled beneath his hands. He heard liquid sloshing sounds, like water running down a pipe. The tail convulsed and spat warm fluids into the chamber containing Alex's cock.\n\nAlex's arms fell to his sides as if the power had been cut.\n\nWhoa.\n\n\n\nHe heard more wet squelchy sounds as the tail circulated the warm fluids around his cock. Back and forth. Up and down.\n\nWhat was going on in there? It felt wonderful.\n\n\n\nThe tail spat again and the end swelled further. It slowly pulsed and massaged the juices into Alex's cock. His member started to tingle. It felt like all the senses within it had expanded in relation to the rest of his body, so much so it felt like his cock had swelled to elephantine proportions. He stood there, his eyes half-closed in bliss, while the bulbous tip of the tail continued to pulse and squoosh warm fluids back and forth around his over-sensitised erection.\n\nUp and down. Up and down.\n\nSquoosh and squelch. Squoosh and squelch.\n\nSuck and stroke. Suck and stroke.\n\nIt was too much. Alex trembled with the frustrated urge to come. The tail was too good for that. Too skilled. It fluffed Alex up and held him there. It pulsed and stroked, all the while keeping him just below the threshold of climax.\n\n\"Do you want to come?\" the girl on the bed asked him.\n\nHe wasn't sure how she could speak. He thought she was gagged. Yet he could hear her voice, sweet yet seductively filthy, and there was no one else in the room. Strangely, it felt like her voice was coming from inside his skull rather than outside.\n\nAlex furiously nodded his head. His monstrously swollen cock felt like a cartoon bomb about to explode. He was desperate to come.\n\nHer tail wouldn't let him. It continued to take long slow slobbery sucks on his cock.\n\n\"I need you to do something for me first,\" the sweet voice said. \"These bonds are too tight. Kneeling like this has become so uncomfortable. Can you loosen them?\"\n\nShe lifted her bound hands away from the small of her back. It wasn't very far, the ropes around her were pretty tight.\n\nStill with the tail throbbing and sucking on his cock, Alex walked around the corner of the bed so he could get at her. He reached out to the girl on the bed and then paused.\n\nHe remembered Teddy's instructions. He'd get fucking killed for this.\n\nThe tail shuddered. Alex heard more liquid gushing sounds. The bulbous tip swelled up further as more warm fluids were poured into it. It pulsed slowly, letting the juices soak into Alex's cock. His eyelids fluttered. His cock throbbed. He thought he was going to come for sure, but there was something holding him back.\n\n\"Don't come,\" the sweet voice whispered in his ear. \"As good as my tail feels, it's just a fluffer. The real pleasure is in my vagina, but to experience it you must first free me.\"\n\nTeddy'll kill me if I do that, Alex thought.\n\nHer tail narrowed around his cock with a loud lewd squelch. Some of the warm fluids leaked out and dribbled through his pubic hair. The soft folds of flesh pressed around his member and pulled on him with a long rippling suck.\n\nOh yes, that'll do it, Alex thought, convinced this would take him over the edge.\n\nIt didn't. The fleshy chamber opened back up again and went back to stimulating him with slow, gentle pulses. Pleasant, but not enough to tip him over the edge.\n\nAlex wanted more than that. He needed more than that. He voiced his frustration with a strange whimpering sound.\n\n\"Free me and I'll let you come,\" the sweet voice whispered to him.\n\nThat was enough for Alex. Fuck Teddy Demme. He'd deal with the consequences later.\n\nHe reached over to the ropes. The first touch felt like touching an electric fence and he withdrew his hand in surprise. It hadn't felt like a rope, more like a line of spun ice. The knots looked far too complicated to untie, so he withdrew his switchblade from his pocket and started sawing through. Once he made it through the first strands the rope stopped feeling like ice and more like regular twine.\n\nCoaxed on by the gentle pulsations of her tail around his cock, he cut the ropes binding her legs and ankles, and then the ones around her arms and wrists. There was a paper tag with a strange symbol printed on it attached to the ropes binding her wrists. As Alex sawed through the rope, the paper tag fell away. The symbol flared once with unearthly light and then faded completely from the paper, leaving it blank.\n\nFreed, the girl started to rise up on her knees. She reached up behind her head and undid the ball gag. She fully extended her big black bat wings, stretched and let out a sigh of relief at no longer being cramped by her confinement.\n\nHer sigh had an almost orgasmic quality. At the same time her tail narrowed again, squeezing Alex's cock with a messy squelch. The ripples and throbs tugged on Alex's cock with greater urgency, like a heart undergoing exercise. Alex suddenly felt weak at the knees and stumbled against the bed, only just catching his balance.\n\nHe didn't come. Because the girl would not let him come.\n\n\"Ah, so good to stretch after being tied up for so long,\" the girl said.\n\nHer voice sounded the same\u2014sweet and musical, yet also filthily sexy\u2014except now Alex was hearing it coming from outside his skull rather than inside. It was also slightly discordant, as if the faint echo of metal scraping against metal had been merged into the mix.\n\nShe glanced over her shoulder at Alex. She was incredibly beautiful, but also unearthly, as if a beauty like that had no right to exist on this Earth. Her high cheekbones were a little too pointed, her lips a little too full. She fixed Alex with eyes that were black all the way through.\n\n\"You have my thanks,\" she said. \"And now you can claim your reward.\"\n\nHer tail released Alex's cock with a wet schlup. He was shocked by the size of his erection. His cock seemed to have grown a couple of inches. It was engorged, red and throbbing. Her tail had left it slathered in pink-tinged slime. Pre-cum oozed from the tip of his cock and drooled down the underside of his shaft.\n\n\"You can have my pussy.\"\n\nThe devil girl turned around and lay on her back on the mattress with her legs apart. Alex didn't know where to look. Laid out before him like this, her body was a veritable feast of sex. Her lovely round boobs were luscious and firm. Her bee-stung lips pouted sensually. She reached down between her legs and parted her labia to reveal the glistening tunnel of her sex. The reddish-pink interior walls dilated and contracted in a way that captured Alex's attention and sucked him in. She didn't even need her fingers. She removed her hand and her sex continued to gape invitingly of its own accord.\n\n\"Will you claim your reward?\" the woman asked.\n\nDamn right he was going to claim his reward. Jimmy could have posh little Miss Pricktease. Alex had something better.\n\nHis trousers and underpants were already puddled around his ankles. He stepped out of them and hurriedly tore off his top. Naked now, he dived onto the hot woman lying before him on the bed.\n\nHis over-engorged cock slid all the way inside her lusciously wet twat. It was like quenching hot steel. Alex pumped his hips against her to generate delicious friction. He didn't need to. Her tail had already primed him to explode. Two thrusts and he was erupting inside her. He pressed his hips down and moaned in pleasure as he was finally able to empty his balls in a great throbbing stream.\n\nFuck, that felt so good, Alex thought. He collapsed on top of her and relished the feel of her hot body beneath him.\n\nHis balls felt proper drained by that. He didn't think he'd need the services of The Pink Orchid tomorrow night, or for most of next month for that matter.\n\n\"That was fast,\" the girl beneath him said.\n\nAlex grunted a noncommittal apology.\n\n\"My tail was fluffing you for quite some time, so it was to be expected,\" the girl said. \"And my vagina does feel so much better than my tail. Time to show you.\"\n\nThe inside of her vagina swelled up around Alex's cock. The luscious walls expanded and pressed to form a very tight fit.\n\n\"Let's make it nice and snug,\" the girl said.\n\nThe inner membrane pressed all around Alex's cock. He'd just shot a load, a really big load, but his cock remained hard and eager.\n\n\"Mmm. Nice and tight,\" the girl said.\n\n\"Round two,\" Alex said.\n\nHe was definitely up for round two.\n\nHe tried to lift his hips and found he couldn't. Her pussy had swelled up and fit his cock so tightly it had generated a strong vacuum to hold him in place.\n\n\"You don't have to do anything,\" the girl said. \"My vagina is special. Just relax and let her squeeze your cum out.\"\n\nMuscular bands of peristalsis started to roll up and down Alex's shaft. His eyes flicked open wide in surprise at the sensation.\n\n\"Mmm, yes. I knew you'd like it.\"\n\nAlex did like it. He liked it a lot. The inner walls of her pussy pressed all around his swollen cock. Bands of muscular force rolled up and down his shaft. The head was squeezed by a soft, wet cushion of flesh. The girl held him in her arms and let her vagina work on him. If he hadn't come already, Alex would have come right away. As it was, he was able to hold out longer this time.\n\nNot too much longer. The delicious stroking sensation was just too much.\n\n\"Coming,\" he gasped.\n\nThe girl smiled beneath him. Her eyes twinkled mischievously. The rhythmic peristaltic tugs of her vagina slowed down and with it, Alex's desire to come.\n\nStuck to her, he trembled in impotent frustration while she let her pussy work him for another five minutes. Stroking. Squeezing. Jerking.\n\n\"Coming,\" Alex gasped as he felt the urge begin to peak again.\n\nIt was too much. His cock was throbbing. His balls were throbbing. He was coming for sure.\n\nThe girl beneath him had other ideas. With another teasing smile, she let her vagina slow right down again, leaving Alex flapping and gasping at the brink like a fish landed on a beach.\n\nThe devil woman controlled him totally with her pussy. Ruled him. She sped up the stroking motions when she needed to take him towards orgasm, and then slowed them right down before he could hit that climax. It was driving him crazy. His whole body was a mass of a jangling nerve impulses.\n\n\"Coming,\" he said for a third time. \"Please,\" he added.\n\nAgain, her delicious pussy stroked him right to the brink before leaving him short.\n\nThe devil woman stroked a hand through Alex's hair. Another down his back.\n\n\"I need a little something from you,\" the girl said. \"Nothing much, just a little bit of your vitality. I've been tied up all day with nothing to drink or eat. It's left me with barely any energy. I need to absorb some of yours. Only a little. You won't even notice. I'll suck it out with your orgasm.\"\n\n\"Yes yes yes,\" Alex said. He heard only 'orgasm' and right now that was the only thing he cared about.\n\nThe girl smiled. She put an arm around him and hugged him to her hot body. Her vagina continued to pump Alex's cock with luscious rippling throbs.\n\n\"Coming,\" Alex gasped.\n\nThis time it was the truth. This time the girl let her vagina pump him with stronger and faster strokes until Alex finally tipped over with a great gasp of relief.\n\nHer pressed his hips down against her and grunted in pleasure as he emptied a great load into her.\n\nAnd kept emptying.\n\nWhat she was doing down there felt so good. Pulsing, stroking, her vagina kept stimulating and prolonging Alex's orgasm. It felt like her pussy was milking him. It was like nothing he'd never experienced. And way longer than any ejaculation he'd ever experienced. He'd thought the first one had been epic, but this one was just massive, like she was squeezing all of the juice out of him as well as his balls.\n\nEven good things had to end eventually, and the great throbbing gushes finally subsided to little spurts.\n\n\"That was fucking awesome,\" Alex said, when the bliss has subsided enough to allow him to shape words.\n\n\"Your cum tastes delicious,\" the girl said.\n\nHer pussy swelled up even more around Alex's cock. His still-rampant erection was sucked even deeper inside her, deep enough to penetrate a soft, cushioned orifice at the end of her vagina.\n\nWhoa, was that her... he struggled to remember the right biological term... womb? He was really deep inside her.\n\nHe had the impression of some kind of flexible bag beyond the warm ring of flesh, then it expanded and Alex let out a surprised exclamation as another ejaculation was sucked out of him.\n\nThat's what it felt like\u2014sucked out. Like she'd attached an air hose to his balls and pumped it right out of him.\n\nAnd not just that. Alex felt a little odd inside, as if something else had been sucked out with it. He also felt a little weak, like after a heavy gym session.\n\nOr after giving a girl a good hard fucking.\n\nBut, as much as it felt like he'd given her a good hard fucking, it had been the other way around. He'd barely moved at all on top of her.\n\nStill felt fucking knackered though.\n\n\"That's me done,\" he said.\n\nHe tried to pull out and roll off. He couldn't. Her pussy had puffed up so much around him it had formed a tight seal.\n\n\"We don't need to finish so soon,\" the girl said.\n\nShe hooked her long legs over his hips, holding him in place.\n\n\"I'm sure you have more left in you.\"\n\nAs if to prove the point, a muscular peristaltic motion rolled through the vaginal walls pressed around Alex's shaft. That mystery organ\u2014Alex was beginning to suspect it wasn't a womb\u2014expanded again. Alex gasped and jerked uncontrollably as another ejaculation was sucked out of him.\n\nFuck, now he was really starting to feel it. And he hadn't done anything. He felt like he'd been jackhammering away on top of her solidly for the past half-hour. How could he feel so knackered just from lying on top of a hot girl while her pussy jerked him off?\n\n\"Mmm yes,\" the girl said. \"A big strong boy like you. I'm sure you have plenty.\"\n\nAnother flex. Another tug. Alex trembled uncontrollably on top as she sucked another load out of him.\n\n\"It feels better if you just let go and enjoy the pleasure,\" the girl said.\n\nThis time she at least gave Alex a few moments to catch his breath. Then she clasped her thighs tightly against him, that internal chamber swelled and another orgasm was sucked out of Alex.\n\nIt did feel good, Alex couldn't deny that. Each ejaculation came with a burst of pure orgasmic bliss. He wished it didn't leave him feeling so drained afterwards. He was really feeling it now. Like he'd pushed himself too hard at the gym. Or that time he'd had to sprint from Westcliff Park to Eastdowne Lane because that gang of twats from Birmingham was after him. His heart fluttered uncertainly in his chest. \n\n\"I don't feel so good,\" Alex muttered.\n\n\"Oh, I am sorry. I was tied up for so long. I might have taken a little too much. It's okay. I'll fill you right back up.\"\n\nShe placed hands on Alex's buttocks and parted his cheeks. He felt a fleshy something push between them. The blunt tip nosed up against his anus.\n\nAlex's befuddled mind was still trying to process what she meant by 'fill you right back up' when the tip of her tail smoothly slid into his ass.\n\nAlex's mouth fell open. He was surprised, of course. But also surprised at how pleasant it felt.\n\nDid that make him a fruit?\n\n\n\nHe didn't have too much time to ponder that one. The tail swelled in his ass, the tip opened up, and it exhaled warm gases into him. They swirled up through his body and enveloped his brain in a perfumed cloud. This time, when the girl's pussy drained his balls with another big suck, he felt only the bliss of a massive climax.\n\nIt was the same for the next suck, and the one after that. Alex was lost in a haze of bliss. Her pussy sucked out pieces of him and replaced them with puffs of airy pleasure. He floated up in perfumed clouds. He felt like a balloon. He deflated with each powerful suck of her sex, and then expanded back up again as her tail flooded him with sultry vapours.\n\nUnbeknownst to him, Alex was starting to resemble a balloon as well. His body was starting to lose its structure and firmness, and start to look like an extremely lifelike inflatable doll. The girl wrapped her arms and legs tightly around him. She unfurled great black batwings and folded them around him as well. Within her tight embrace he deflated and expanded as she sucked out the substance of him and replaced it with perfumed gas.\n\nThen, with a final orgasmic sigh, the devil girl sucked out the last of Alex. His skin collapsed in on itself and he deflated like a punctured balloon. The hollowed-out skin lay on top of the girl for a few moments before, with another ecstatic moan and powerful flex of her hips, that too was sucked up into her ravenous sex.\n\nThen, fully sated, she lay back on the bed and gave a contented sigh.\n\n* * * * *\n\n\"Oh. My. God. This is amazing.\"\n\nJimmy smiled to himself as he heard Gemma's reaction to Mr Herbert's summer house.\n\n\"This yours?\" Gemma asked in wonderment as Jimmy turned a key in the lock and opened the front door.\n\n\"Nah. Looking after it for friends,\" Jimmy said. \"I've got it for the night.\"\n\nGemma and her friend made excited cooing sounds as Jimmy led them into the house.\n\n\"Hey Alex,\" Jimmy called out as he put a hand on the light switch. \"It's me and Gemma. I brought her friend back with us as well.\"\n\nBoth girls giggled excitedly. Everyone was looking forward to a good night of partying.\n\nThe light came on and revealed a girl sitting casually on the sofa. It was the girl from upstairs, the one in the Halloween devil girl costume, Jimmy realised. She wasn't supposed to be there. She was supposed to be upstairs on the bed and tied up like a Christmas turkey. Where was Alex?\n\nThe girl smiled at them seductively. The effect was rather spoiled by her eyes. They were black all the way through and looked like pits into an endless abyss.\n\n\"Oh good,\" she said. \"I was just starting to feel hungry again.\"\n\n* * * * *\n\nThe bed was empty. Ted Demme knew it would be. He knew it before he'd even opened the front door. He knew it the whole drive here from Gatwick airport. He'd tried to tell himself otherwise\u2014had really hoped otherwise\u2014but he'd always known this would be the likely outcome after he'd closed the front door and left the lads alone with that thing. \n\n\"Seems they were not so reliable after all,\" the man next to him said with a strong German accent.\n\n\"I didn't have much choice. It was all I could get,\" Demme replied.\n\nThe German walked over to the window and looked down at the town of Spackton-on-Sea spread out beneath them like a seaside postcard. He cast his gaze over the crowded beach, the packed promenade, the pretty little white holiday homes, the less salubrious strips of Slagbury Road and Queen Street.\n\n\"You realise this makes our task much harder now,\" he said.\n\n\"I know,\" Demme replied.\n\nTHE END"
    ],
    "authorname": "manyeyedhydra",
    "tags": [
        "demon",
        "devil girl",
        "mobster",
        "occult",
        "succubus",
        "tailjob"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/the-succubus-in-the-summer-house"
}
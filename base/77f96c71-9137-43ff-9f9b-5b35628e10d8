{
    "title": "Two Hundred Dollars Ch. 27",
    "pages": [
        "Editor's note: this story contains scenes of lesbian female sexual content.\n\n*\n\n22 (or 18?) Dollars\n\nLaura looked at Kent nervously, her gaze flicking back to the white board. It still read twenty two dollars, as Kent had yet refused to count the four dollars worth of spankings they'd done in the Science Lounge.\n\n\"So I lied to you,\" Laura said, \"I'm sorry.\"\n\nShe turned her back on him, wiggling her butt, \"Can't you just spank the bad girl?\"\n\nLaura's got some serious pent-up arousal, Bailey noted. Plus all the excitement from almost getting caught. Kent is just barely restraining himself. I can see how he wants to give in and just spank her.\n\n\"I don't want you to lie to me again,\" Kent visibly checked himself, closing his eyes and bringing his breathing under control. \"Especially when it comes to consent. I really, really never want any confusion about that.\"\n\nLaura turned to face him again, a subdued frown on her face, \"So what do you want?\"\n\n\"Alright, alright,\" Kent forced a smile, \"You two do something a little special, and I'll count the spankings, as long as you promise not to lie about that again.\"\n\n\"Wait,\" Bailey piped up. \"The two of us? Laura's the one who lied!\"\n\n\"And you went along with her,\" Kent pointed out.\n\nLaura turned and stuck her tongue out at Bailey.\n\nI didn't think I'd get away with it anyway. But at least Kent lightened up a little.\n\n\"Ugh, fine,\" Bailey rolled her eyes. \"What if we don't want to do this special thing, whatever it is?\"\n\n\"Then I'll count your spankings today, I guess,\" Kent said. \"But the game's over and you can pay me back the rest of the debt in cash.\"\n\nOwch! Bailey thought. I don't want to even think about that option.\n\nFrom the look on her face, neither did Laura. They both turned to Kent, waiting. The remaining eighteen dollars suddenly felt like gold dust slipping through her fingers.\n\n\"So we don't get a choice?\" Bailey asked.\n\nKent thought about that for a heartbeat.\n\n\"You're right,\" he said. \"If you want to continue paying your debt with spankings, I'll give you two choices. That's only fair.\"\n\nKent scratched the back of his neck thoughtfully, looking up at the ceiling as he decided what offers to make them.\n\n\"Okay,\" he went on. \"Here are your two choices. If you want to keep this whole thing going, you can choose either of them, but you both have to choose the same one or it won't work.\"\n\nLaura jerked a small nod and Kent continued.\n\n\"Option One,\" he began.\n\n=============================\n\nLaura felt her body chill as Kent described their choices. She'd gone off balance the moment he'd called her a liar, and the bit about threatening her with expulsion from their game -- or just outright cancelling the rest of the game, leaving Bailey out in the cold, too -- had left her shaken, as if the snow blowing outside the window had blasted right into Kent's bedroom.\n\nNeither of the options sounded great but she also felt terrible for screwing up the whole arrangement Bailey had with Kent.\n\nThis is my fault, she realized, and Bailey has to pay the price with me.\n\nLaura turned to look at Bailey, found her friend's expression frozen.\n\n\"Which one?\" Bailey whispered, avoiding eye contact.\n\nOh, god, Bailey hates me. Look what I got her into.\n\n\"Kent,\" Laura spoke over her shoulder, \"Can Bai and I discuss this for a minute?\"\n\n\"Sure.\"\n\nLaura dragged Bailey down the hall to Bailey's room and looked her in the eye, \"Which one do you want to do?\"\n\n\"My butt's kinda sore,\" Bailey said, \"But the other thing...\"\n\n\"I know,\" Laura pouted. \"Bai, I'm really sorry for screwing this up for you. I didn't know Kent took this so seriously.\"\n\nBailey shook herself and her eyes suddenly softened and focused on Laura's.\n\n\"It'll be fine,\" Bailey soothed her, putting her hands on Laura's shoulders.\n\nRelief flooded through Laura and she hugged her friend briefly before separating to arms' length again. They would have to do something embarrassing, but at least Bailey didn't hate her. Their friendship hadn't suffered.\n\n\"Why couldn't he just spank us?\" Laura wished aloud.\n\n\"At least he's still being playful,\" Bailey pointed out. \"He's really not letting on how upset he is.\"\n\n\"So, which one? Option One or Two?\" Laura spoke the same names Kent has assigned to their choices.\n\n\"Which one do you think is easier?\" Bailey turned it back on Laura, notably rejecting out of hand the idea of the unspoken third option.\n\nLaura turned her eyes aside, wishing she could go back and do things right.\n\nWe'd have had to run to campus, but we could have done it, Laura frowned. But here we are, and Bailey's letting me decide.\n\n\"I think,\" Laura said with a deep inhalation, \"We should do both.\"\n\n\"Both!?\"\n\n\"Just to show him we get it, right?\"\n\n\"Really?\" Bailey dropped her hands from Laura's shoulders and fisted her hips. \"You really want us to... to...\"\n\nBailey stammered to a stop, staring at Laura with the same expression she'd had the day Kent had explained that she needed to go over Laura's lap.\n\n\"Okay,\" Laura rolled her eyes, \"Maybe do the second one, like, half-way. A quick little thing?\"\n\nBailey inhaled, looking at Laura, \"That's going to be weird. Like, forever, Laur. You're going to remember the weirdness. For. Ever.\"\n\nLaura shrugged, \"I kinda feel like we gotta push it, right?\"\n\nHer head jogging left to right, Bailey nodded and slipped off her shirt.\n\n\"What are you doing, Bai?\" Laura asked.\n\n\"Easier if the bras are off, right?\" Bailey explained. \"Faster, maybe?\"\n\n\"Okay,\" Laura replied doubtfully, and slipped out of her sweater.\n\n=============================\n\nThe threat to end the game had felt a little drastic when Kent had made it, but the discovery of their lie had taken him by surprise and he'd gone a little hard. He regretted his harshness only a little.\n\nI never imagined the two of them would do that, he shook his head, but at least they know I'm not screwing around about this.\n\nHe wondered idly which of the two options they would take. It had seemed more proper to give them a choice, rather than straight-up forcing something on them. Given more time, Kent knew he could have come up with five or ten options.\n\nI don't want this to seem too fun to them, though, he glared at nothing. I want to make sure these are embarrassing enough to keep this from happening again.\n\nAnother part of his brain, however, kept spawning other humiliations he could have offered them, things more clever and awkward. Kent wondered how far they would go to preserve the last eighteen dollars of their game.\n\nThe girls returned after only a minute of discussion and entered the room, still fully clothed, Laura locking the door behind her. They stood in front of his bed, facing him, Bailey on his left, Laura on his right.\n\n\"Well?\" Kent waved hand over their bodies, pointing mostly at their clothing.\n\nTheir next move would tell him which of the two options they had taken.\n\nThey've really got three ways to go, he realized. Remove their bottoms, remove their tops, or remove nothing and end the game.\n\nWhen Laura and Bailey started unbuttoning their pants, Kent nodded, accepting that they had chosen what he thought of as the easiest path forward. Bailey shed her blue panties next, and Laura dropped her black ones. He surveyed both girls and their neat little triangles of hair.\n\n\"It's not a big deal,\" Laura looked around nervously, \"He just saw all of me in the lounge.\"\n\n\"He did?\" Bailey asked, not moving.\n\n\"I did it on my back,\" Laura gulped, \"Legs up.\"\n\n\"It's true,\" Kent replied, staring directly at Laura's vulva, \"I could see way more of her that way than I can now.\"\n\n\"Hmph,\" Bailey replied. \"Well, how do you want us to do it?\"\n\nPart of Option One had included Kent getting to choose their poses, but he had a mind to enjoy their mutual embarrassment a moment longer.\n\n\"But you're so very pretty right now,\" Kent pointed out, waving his hand over their genitals. \"Side by side.\"\n\n\"You're not getting a picture,\" Bailey put her hands on her hips, but didn't move her feet because part of Option One meant standing here just like this until Kent felt that he'd made his point.\n\nKent laughed and pointed at the floor. \"Bai. On your hands and knees, right here. Facing me.\"\n\nBailey sighed and knelt down on the floor, then leaned forward to rest on her hands.\n\n\"Laura, beside her,\" Kent said, \"But facing the other way.\"\n\nLaura turned her back on Kent and likewise went down to the floor.\n\n\"Snuggle in nice and close now,\" he prodded, reaching over to put his hands on their waists to push them until they touched.\n\n\"Alright,\" he said, \"You know what to from here.\"\n\n\"I can go first,\" Laura said, getting partially upright to place her left hand on Bailey's back. \"I've done it before, at least.\"\n\n\"No,\" Bailey's shook her off firmly. \"We'll take turns, but I'll go first.\"\n\nLaura sheepishly went back down on her hands and knees.\n\n=============================\n\nYeah, Laur, I know we said you'd go first when we talked about this just now, but I've changed my mind.\n\nBailey looked down at her friend's cheeks, acknowledging Kent had outdone himself this time.\n\nWhen he had described Option One, he had refused to say what position they'd have to use for the spankings. He'd warned them ahead of time they'd have to spank each other with the same level of nakedness they'd reached in the Lounge, but added that he wanted to choose their poses after they had undressed. It made her nervous, to some degree, because they normally got all of the information before they concluded their negotiations.\n\nBut Bailey also remembered that she and Kent would negotiate 'inspections' without detailing her poses for that either. She'd shivered a little at the prospect and her brain had started conjuring images.\n\nIn her head, Bailey had envisioned all sorts of outrageous poses designed to make the two of them feel super awkward and embarrassed. The worst image that had sprung to her mind involved Laura, on her back, with her legs up in the air and spread really wide, waiting for Bailey's hand to strike her cheeks.\n\nBut this is something else, Kent.\n\nAnd then she'd felt Laura's hand on her back, felt her friend's right hand come to rest on her ass cheek. She'd changed her mind about the order at right that moment.\n\nKent always gropes me. I wouldn't imagine Laura would even touch my butt until we start, but I guess it's fine.\n\nBailey braced herself with her left hand on the small of Laura's back and put her right hand on her friend's left cheek.\n\n\"Ready?\" Bailey spoke through clenched teeth.\n\nYou got me into this, stupid girl.\n\n\"Uh-huh,\" Laura whispered back.\n\nShe spanked me once before, Bailey noted. That means this is probably easier for her than me.\n\nEven as she felt the awkwardness of her friend's flesh under her hand, Bailey also knew that the shortest path to her destination lay with the hardest strikes. Better to spank Laura too hard than too lightly and need to do repeats.\n\n\"Here goes,\" Bailey said.\n\nShe didn't know the first thing about spanking someone else. Her only experiences had come on the receiving end, but she did know how it looked when Kent spanked Laura, and she knew how it sounded. If nothing else, she could spank her friend's butt at least as loudly as Kent spanked the two of them.\n\nBailey took a deep breath and raised her hand over her friend's ass, then brought her palm down and delivering a satisfying loud crack to her left cheek.\n\n\"Ow!\" Laura complained.\n\n\"Good one,\" Kent breathed out the compliment as if she had forced it from his lungs.\n\n\"You got us into this,\" Bailey glanced over her shoulder and put her hands back down on the floor.\n\n\"One,\" Laura sounded a bit miffed, before she remembered what else to say, \"I'm very sorry for lying.\"\n\nWithout warning, Bailey suddenly felt the sharp sting of Laura's hand bouncing off her ass, and only after did her ears register the sound of slapping flesh.\n\nHooooo!\n\nBailey hadn't realized that Laura had held back the previous time she'd delivered spankings.\n\n\"Two,\" Bailey winced. \"We're sorry we lied.\"\n\nIs this what we're doing, you stupid girl? Fine.\n\nBailey rose up and spanked Laura again.\n\n\"Three,\" Laura spoke through gritted teeth as if the number constituted a warning. \"I'm sorry I lied.\"\n\nRetribution came through immediately, another sharp slap to the centre of Bailey's cheek.\n\nShe's not letting up, Bailey noted. I don't think Kent intended for this to be painful. He just wanted us to embarrass each other. Shows what he knows.\n\nIt left Bailey with a choice. She could either lighten up a little and hope Laura did the same, or keep hammering her friend. The stinging sensation in her cheek spoke in favour of revenge, but the Ethics curriculum suggested otherwise.\n\nIt's called 'tit for tat', Bailey recalled. Although 'cheek for cheek' would be a more appropriate name here. The principle is that, in a game where people have to trust each other in turns, the best strategy is to start out trusting the other person, then simply do whatever they do to you after that. Nice begets nice. Selfishness beget selfishness.\n\nBailey acknowledged that she had started out their alternating spankings by going too hard on Laura. That error in judgment made it her responsibility, in a way, to be the first to turn it back down.\n\nAt the moment, it's even, Bailey analyzed. We've both spanked each other twice, really hard.\n\n\"Four,\" Bailey remembered to count. \"I'm sorry I lied.\"\n\nHaving to speak those words, however, hardened her heart just enough, and she laid into Laura's cheek again.\n\n\"Five!\" Laura scolded. \"I'm even more sorry I lied.\"\n\nSix came back so hard that Bailey wondered if Laura's hand also stung.\n\n\"Six!\" Bailey winced. \"I'm sorry I lied.\"\n\nThis is the last one I get. Should I go a little easier? Naw.\n\nBailey let Laura have it, reddening the little circle of pink in the centre of her friend's ass cheek, then braced herself for the reply.\n\n\"Seven! I'm sorry I lied.\"\n\nThe last one came through hard and clear, echoing in the silence of the room.\n\n\"Haa!\" Bailey breathed out, closing her eyes as the sting dissipated into her flesh.\n\nTwo more deep breaths and she spoke again, \"Eight! We're very sorry we lied.\"\n\nLaura stood up, rubbing her cheek and glaring at Bailey, \"A lot more sorry than I expected to be.\"\n\nBailey stood and glared back at Laura, neither of them speaking, while Kent watched on, almost forgotten.\n\nI bet that was way more interesting than he intended.\n\n\"You had it coming,\" Bailey finally said.\n\nLaura burst out in giggles and doubled over laughing.\n\n\"Oh god,\" she managed to gasp through her laughter, \"we are just too much.\"\n\nBailey laughed too, and she felt Kent relaxing in his chair.\n\n\"Alright,\" Kent put in. \"Since-\"\n\n\"Wait,\" Bailey held up a hand in his direction.\n\n\"What?\"\n\nShe didn't answer, merely looked at Laura, waiting to see if she still wanted to go through with it. Laura stood up straight again, taking a deep breath to suppress her giggles, and nodded her assent.\n\nThis is going to be weird, Bailey realized as she moved forward. It's going to feel weird while we're doing it, and we will imprint the weirdness of it on our brains through eternity.\n\nLaura gulped and moved her hands to the hem of her sweater as Bailey gripped the bottom of her own shirt. She heard Kent inhale in surprise.\n\nWhy are we doing both? We don't need to. Except... except... It's that damned eighteen dollars. The debt remaining is so small, we're pushing all the kinky stuff as hard as we can because we know it's over soon.\n\nSimultaneously, they lifted their tops up. Bailey felt the cool air rush up over her stomach to her breasts, sensed her nipples hardening.\n\nOh, god, hers are stiff too. Here we go.\n\nClosing their eyes and turning their heads, they pushed their bodies together until their chests touched.\n\nOh, god. I can feel her boobs. They're soft and squishy, and they're spreading up against my ribs. We were only supposed to touch our nipples together, but we both closed our eyes.\n\nBailey opened one eye and looked down. Avoiding Laura's eyes, she leaned down a bit as Laura came up on her toes to bring their breasts to a level, perky nipple touching perky nipple.\n\nOkay, that's all we needed, Bailey thought, moving away.\n\n\"That was at least as weird as I thought it would feel,\" Bailey remarked, her lips moving around strangely, as if she'd tasted something bad on her tongue.\n\nCertain that she'd never erase the sensation of Laura's bare breasts pressed against hers, Bailey noted that Laura hadn't lowered her sweater yet.\n\nShe's really going through with it, Bailey gulped. At least we already agreed we aren't doing all of Option Two.\n\nLaura squeezed her eyes shut, waiting.\n\nGuess I'm going first.\n\nBailey leaned over and, quickly as she could, planted two quick kisses on Laura's nipples.\n\nWeird, weird, weird! Bailey tried to erase the feeling in her lips by rubbing them together as if she'd just applied a chap stick.\n\nWith relief, she stood up and held her own chest out, shutting her eyes as Laura had.\n\nPassive is easier, sometimes. I don't care. I don't care. I don't- Oh!\n\nThe two kisses came like electric shocks, unexpected in her state of blindness. Bailey had meant to just ignore the sensation, let it pass over her quickly. She hadn't expected it to jolt her so hard.\n\nShe dropped her shirt and opened her eyes, seeing Laura's face turn away from hers toward Kent.\n\nAm I as red-faced as she is? I must be. My face feels hot.\n\n\"No tongue?\" Kent asked, barely restraining his laughing glee.\n\n\"You got all of Option One,\" Bailey narrowed her eyes at him. \"Part of Two was a bonus, just so you'd know we meant it.\"\n\n\"Fair enough,\" he said.\n\nStanding up awkwardly, Kent moved to the white board, erased the \"$22\" and replaced it with \"$18\".\n\n\"Please, please,\" he said, earnestly turning to look back at them. \"Let's not lie to each other ever again? Not about this.\"\n\nThey nodded their agreement as they sat, side by side on the edge of Kent's bed, Laura keeping her back straight while Bailey leaned back on her arms.\n\n\"Okay,\" Laura breathed. \"I'm feeling really weird. And half naked. And kind of bad.\"\n\n\"And?\" Bailey asked.\n\n\"And you spank really hard!\" Laura accused.\n\n\"I owed you,\" Bailey smiled. \"And you got me back. Fair and square.\"\n\nLaura sat in silence for a moment, thighs pressed together so barely any of her pubic hair showed, a thoughtful look on her face.\n\n\"Kent?\" she asked.\n\n\"Uh-huh?\"\n\n\"When you said you could see me,\" she said, \"What did you mean?\"\n\n\"In the lounge?\" he asked.\n\n\"Yeah.\"\n\n\"Hm,\" Kent inhaled. \"You bent your knees, and curled your legs up really far, right? So I could see all your, um, hair, and your lips, um, how should I put this?\"",
        "\"What?\" Laura prodded.\n\n\"They opened a little,\" Kent explained.\n\n\"So you could see, like, inside?\"\n\n\"Just a bit,\" he confirmed.\n\nHe could see up between your cheeks, too, Bailey smirked. He's just too polite to say so.\n\nLaura's hands went into her lap, covering the visible bit of pubic hair her thighs hadn't obscured, and she whimpered a little squeak as her face reddened.\n\n\"If you're worried,\" Bailey poked Laura's nearest thigh, \"you could always put your panties back on.\"\n\n\"I don't see you spreading your legs,\" Laura taunted, ticking her chin at Bailey's crossed ankles.\n\nI know a dare when I see one, dear, Bailey thought.\n\n\"Hmph,\" Bailey sniffed the air theatrically and looked down at her legs. She still had her ankles crossed from before, a small gap between her thighs. Looking at Laura, then at Kent, she pulled her right leg up beside her, then her left, and sat cross legged on the bed, still leaning back on her arms.\n\nLeaning back like this, they can both see all of my lips and my hair.\n\n\"Well, then,\" Laura said, looking away nervously. \"I guess that's alright.\"\n\nA short pause ensued, pregnant as such a pause could get, before Laura pulled her legs up on the bed and sat cross-legged.\n\n\"Hmph,\" Laura grunted, then addressed Bailey. \"I don't want to end the day remembering your hand slapping my butt. And I'm already half naked.\"\n\nLaura's voice trailed off a bit at the end, and Bailey recognized it as a request for permission.\n\n\"Go ahead,\" Bailey's hand offered Laura a path to the white board.\n\n\"What about you?\" Laura sounded worried.\n\n\"I'll go after,\" Bailey assured her. \"My butt needs a break.\"\n\n\"How many, though?\"\n\nBailey winced, \"I can probably only do one more.\"\n\n\"Are you okay if I do two?\" Laura pleaded.\n\n\"Sure.\"\n\nDo all you want, as long as I get to see what you do first.\n\n\"You'll keep your clothes off?\" Laura gulped.\n\nCoward, Bailey laughed inwardly. What happens if I put my underwear back on?\n\n\"Sure, if it makes you feel better,\" she told her friend.\n\nLaura nodded her thanks and walked across the room, wiggling her ass a little more than necessary, to make two marks on the white board.\n\n\"What should we start counting at?\" Laura asked as she passed Kent again. \"Eighteen?\"\n\n\"Let's start at one,\" Kent instructed, his voice gone a little dark. \"Now that everything is straightened out.\"\n\n\"Okay,\" Laura replied. \"Here goes.\"\n\nLaura told me she wants to come, Bailey watched her friend turn her back on Kent, but she needs to pay her own price first. I told her exactly what she has to say. Let's see if she follows through.\n\n\"Kent?\"\n\n\"Yeah?\"\n\nLaura spread her legs more than the width of her shoulders and bent over the bed.\n\n\"Is it, y'know, like before?\" Laura's voice trembled as she spoke.\n\n\"I can see inside you a little, yes.\"\n\nA long, slow exhalation, edged with a juddering sigh, issued from Laura's throat.\n\nLaura turned to Bailey, who nodded, prodding her to say the right words.\n\n\"He's probably going to just go after that really red spot, isn't he?\" Laura put just the right amount of pathetic whimper into her voice.\n\nPerfect, girl, Bailey thought. You'll get exactly what you want.\n\n\"It's his money,\" Bailey snorted. \"He'll spank you wherever he wants.\"\n\nAs Laura turned her head away from both of them, Bailey looked at Kent and, just to make sure he got the message, silently jabbed a finger in the direction of Laura's left cheek.\n\nI feel like I had a part in this one, Bailey realized. Kent spanked her low on both sides, but the red spot I made is actually darker. So, yeah, I did spank her harder than Kent does.\n\n\"It does look really red right here,\" Kent noted, shooing Bailey out of the way so he could sit beside Laura and get a good angle on her left cheek.\n\n\"Yeah?\" Laura whispered.\n\nKent's fingernails drew slow circles around the centre of her left cheek, gently scratching at the reddened circle Bailey had started.\n\n\"And you have been a bad girl,\" Kent whispered back.\n\nDon't lay it on too thick, Kent, Bailey sent a mental warning.\n\nShe needn't have worried, however. Laura's mind had gone so far over the edge, nothing could turn her off. Only a pathetic whimper issued from her mouth.\n\nBailey, forced against the wall by Laura's upper body when Kent evicted her, reached out to stroke Laura's hair.\n\n\"Here it comes,\" she warned her friend.\n\nLaura inhaled and Bailey bit her lower lip to restrain herself from speaking any further. Kent's hand rose into the air and came cracking down on Laura's left cheek, dead centre where Bailey had already delivered four spankings. Laura mewed in heat.\n\n\"One,\" she moaned.\n\nBailey continued stroking Laura's soft, brown hair as the second strike shook her friend's flesh.\n\n\"Two.\"\n\nI think it's the undulation, Bailey watched closely as Kent delivered a third slap to the target, the way her flesh shakes and waves spread around.\n\n\"Three,\" Laura's voice grew almost indifferent.\n\nKent followed up almost instantly.\n\n\"Four,\" Laura said, her hips twitching with frustration.\n\nGentle circles, again, from Kent's hand. Annoyed moans came from Laura's mouth.\n\nSomething's wrong. Can Kent tell?\n\n\"Hey, Laur?\" Kent asked.\n\n\"Yes?\"\n\n\"Did Bailey spank harder than this?\"\n\nLaura stuttered through an inhalation, then let out a long slow moan that sounded like, \"Ye-e-e-es.\"\n\n\"Oh.\"\n\nWith Laura's head turned away from both of them, Bailey managed to share a glance with Kent. He looked like he wanted to ask her a question, but Bailey already knew the question -- and the answer. She nodded confidently at Kent, ticking her chin at her friend's ass.\n\nYes, of course you should spank her harder. Then she'll feel better about the orgasm she's about to have.\n\n\"I can't have that, can I?\" Kent asked. \"Bailey would be embarrassed.\"\n\nLaura's ass lifted higher in the air, the muscles tensing.\n\nShe must have just gone up on her tiptoes, Bailey calculated. Clear enough what she wants.\n\n\"No,\" Laura whispered. \"We can't.\"\n\nKent bit his lower lip, obviously tormented about finding the exact right amount of force to use.\n\nI don't envy you, here, Kent, Bailey looked on worriedly. She'd found herself in the exact same dilemma only minutes before and screwed it up badly.\n\nHis hand swept back, reversed and crashed down on Laura's cheek, eliciting a squeak from Laura.\n\nIs that how hard I went? Jesus Christ.\n\n\"Fi-ive.\"\n\n\"Was that hard enough?\" Kent prodded.\n\nLaura sniffed slowly.\n\nForcing her to answer is so mean, Kent. You brilliant bastard.\n\n\"Al-almost,\" Laura hissed out.\n\nBailey turned to Kent, a horrified look on her face as she mouthed the worth, \"Almost?\"\n\nKent gulped and nodded helplessly, then delivered another, even harder slap.\n\n\"Ah!\" Laura screeched, satisfaction and pain woven together into a single exhalation. \"Six.\"\n\n\"That better?\" Kent asked.\n\nLaura nodded, mumbling a confirmation into the bed sheets.\n\nI can't believe I spanked her that hard, Bailey stared in shock. I know what his spankings look and sound like and these ones were a lot harder than normal.\n\nKent followed up with the last two spankings, hammering that same redness on Laura's left cheek. Laura's head rose up, her mouth opening in a silent scream before she clamped her teeth shut and sucked air in through them.\n\n\"Seven, eight,\" she said. \"My god.\"\n\nShe stood up immediately and grabbed Kent by the collar of his shirt.\n\n\"Come on,\" Laura urged. \"Lie down.\"\n\nCompelled by her urgency, Kent soon lay on his back, Laura setting to work on his belt.\n\nShe's quick and nimble, suddenly, Bailey noted. And, wow, there go his pants.\n\nLaura put a leg over Kent and straddled him, the reddest part of her cheek high and well away from any possibility of rubbing irritation.\n\nThis would be harder if I'd done my spankings low and Kent had followed suit, Bailey thought, but I really couldn't spank her low in that position Kent made us use.\n\nNot wanting to look at Laura's ass so much, Bailey laid herself out sideways with the her head next to Kent's, propped up on her elbow and watched the shape of Kent's erection under his shorts as Laura ground herself on top of him.\n\n\"Yes, yes, yes,\" Laura squeaked.\n\nShe's really not into taking her time, Bailey smirked. She could afford to let her smile show, since her friends completely ignored her. Kent is closing his eyes to try to hold back his orgasm long enough for Laura to come, and Laura is closing her eyes because she's off in la-la land.\n\n\"Yes!\" Laura screeched out, shaking uncontrollably atop Kent.\n\nIncredibly fast, Bailey noted. Pent up sexual desire and a huge load of foreplay.\n\nThe muscles in Kent's neck strained ominously, his eyes widening as he held himself back. Laura fell forward onto him, then rolled off the side opposite Bailey into the embrace of Kent's left arm, her eyes open but not registering any awareness of her surroundings.\n\nWhen she looked lucid again, Bailey tilted her back and forth to get Laura's attention.\n\n\"Hm?\" Laura asked.\n\n\"You okay now?\" Bailey asked. \"Or you need more?\"\n\nLaura reached back to rub her left cheek. When she touched her flesh, her hand recoiled and she sucked air through her teeth.\n\n\"I'm good,\" Laura replied with complete assurance.\n\nShe's in a post-orgasmic glow, but Kent and I still have needs. Bailey looked over at Kent, what can I do that's a bit weird? Something to top Laura.\n\nBailey glanced over at the white board. It said eighteen dollars, but Laura had taken it down to sixteen. Precious few chances remained to make things as strange as she could.\n\n=============================\n\nTrapped awkwardly against the wall, Bailey had to straddle Kent to escape and walk over to the white board. Kent watched over Laura's head as she made a single mark.\n\n\"Sorry,\" she said, \"That's all my butt can take today.\"\n\n\"Your ass, your debt,\" Kent reminded her.\n\nHe gently nudged Laura, who got up and turned to sit on the edge of the bed, complacently waiting for Bailey to take her turn under his hand. Kent then got up and sat next to Laura, his erection throbbing awkwardly as he moved.\n\nLaura is completely spaced out, Kent observed of his friend's bleary eyes and relaxed shoulders. There's a certainly serenity in a post-orgasmic, sufficiently spanked Laura. No guilt, no tension, nothing.\n\n\"You mind helping a bit?\" Bailey asked Laura.\n\n\"What do you want me to do?\" Laura asked, her eyes narrowing with a touch of distrust. \"I'm not spanking you again.\"\n\n\"I do not want you to spank me,\" Bailey retorted, her emphasis clearly indicating 'ever again'.\n\n\"Then what?\" Laura perked, clearly game for something interesting.\n\n\"Just keep me from falling over,\" Bailey pulled Laura to her feet. \"Come on.\"\n\nA quizzical eyebrow raised, Laura stood and let Bailey move her halfway across the little room, \"What do I do, Bai?\"\n\n\"Watch,\" Bailey said, turning her back on Kent and facing Laura.\n\nLeaving her legs just a little more than shoulder width apart, she bent over at the waist until her fingertips touched the ground. Her t-shirt, without anything to hold it in place, slipped up her body to expose her breasts.\n\nKent laughed as Bailey stood back up in frustration.\n\n\"Why not just take it off, Bai?\" Laura admonished. \"He's already seen us rubbing-\"\n\n\"Don't remind me,\" Bailey said. \"Just hold my shirt while I bend over.\"\n\n\"Alright,\" Laura held her palms up defensively.\n\nBailey bent over again, showing Kent at least as much of her ass cheeks and spreading vulva as Laura had.\n\n\"Is it like what Laura did?\" Bailey asked.\n\n\"Very much.\"\n\n\"You can see me, too?\"\n\n\"I can see all of you,\" Kent confirmed, then exhaled a soft whistle. \"Oh yeah.\"\n\nMy cock can't take much more of this, he realized. One touch would set me off.\n\nLaura braced Bailey, both of her hands on her friend's back, holding her shirt in place.\n\n\"You can just drop the shirt,\" Laura pointed out once again. \"Then it's only three.\"\n\n\"I'm fine,\" Bailey repeated. \"Kent?\"\n\n\"Yeah?\"\n\nShe inhaled again.\n\n\"I spanked Laura really hard, I guess,\" Bailey explained.\n\n\"Yes, you did,\" Kent agreed.\n\n\"Totally,\" Laura added.\n\n\"You don't normally spank us that hard, though,\" Bailey said.\n\n\"Right.\"\n\n\"This time, though,\" she added, \"just to be fair, you should spank me the same way.\"\n\n\"As hard as you spanked Laura?\" Kent confirmed. \"As hard as I spanked Laura?\"\n\n\"Yes.\"\n\n\"Oka-ay,\" Kent added. \"Then here's my rule. After the first one, you say the number and then you tell me again you want it that hard. If you don't, I'm going back to normal.\"\n\n\"Is that really necessary?\" Bailey chided.\n\n\"Yes,\" Kent's voice went hard.\n\nBai, I am not going to hammer you that hard unless you mean it each time.\n\n=============================\n\nGoddammit, Bailey burned up. Here I am with my ass in the air and my... holes... in his face, and he's trying to make this more embarrassing?\n\nShe took a deep breath and let it out. Kent had a point, and given their recent issue with trust and honesty, he wanted to make sure she got only what she wanted.\n\nHe's giving me a way out. I don't want it, but I might need it. Fine.\n\n\"Okay,\" Bailey told him, feeling blood rushing to her head. \"Do it.\"\n\n\"Here it comes.\"\n\nIn her position, with every muscles stretched so far, Bailey had no way to tense up, relax or brace herself. She could only wait as Kent's hand sliced through the air and whacked against her left cheek.\n\nOh, fuck!\n\nIt hurt, but she had to give Kent credit, for he had struck her no harder than Laura had.\n\n\"Nine, you bastard!\" she cursed.\n\n\"And?\"\n\n\"Do it again,\" Bailey tried to hide behind a roll of her eyes, but it wouldn't work in this ridiculous pose.\n\nHere it comes.\n\nAnother of those nasty slaps collided with her left cheek.\n\n\"Ten,\" Bailey breathed. \"Spank me hard.\"\n\nHis hand cracked off her left cheek a third time, zeroing in on the burning spot Laura had made. She felt her body waver with the impact, but Laura caught her and held her in place.\n\n\"Eleven,\" she spat out. \"Fuck.\"\n\nKent waited.\n\n\"One last one,\" she said. \"Just that hard.\"\n\nThe last spanking stung and stung deep. After Laura braced her from falling, Bailey stood up and hugged her friend.\n\n\"I am so sorry I spanked you that hard,\" Bailey whispered. \"Oh. My. God.\"\n\nPanting, she finally spoke to the room at large, \"Twelve.\"\n\nShe turned on Kent, \"Can you make me come again? Like yesterday?\"\n\n\"The second time yesterday?\"\n\n\"Uh-huh.\"\n\nKent held out his hand and guided her to the bed, letting her find her seat very carefully.\n\n\"Tomorrow isn't a sitting down day,\" she realized out loud. \"Hoo.\"\n\nBailey laid on her back and moved away from the bed's edge to give Kent room on her right side. He sat with his hips level with hers so his right hand could easily rest over her pussy, his middle finger upon the cleavage of her lips. Bailey slid her own hand underneath his to prod her clitoris.\n\nI am soaked.\n\nShe wanted to grind her hips around, but her left cheek hurt so much, she didn't dare.\n\n\"Laur,\" she begged, nodding to the spot next to her head. \"Come here.\"\n\n\"Um?\" Laura sounded worried. \"As curious as I am...\"\n\n\"Just handle Kent for me,\" Bailey said.\n\n\"Oh, alright,\" Laura sounded relieved as she sat in front of Kent, knee to his knee, her thigh pressed against Bailey's right shoulder.\n\nBailey thought Laura might have smiled as she reached up inside the leg of Kent's shorts and took a hold of his erection.\n\n\"It's okay,\" Bailey stroked herself, \"pull it out. I wanna see it. Don't you?\"\n\nLaura whimpered, but undid the button on the fly of Kent's boxers so she could draw his penis out.\n\n\"That's it.\"\n\nThat beautiful beast, she thought, but said nothing out loud.\n\n\"Kent?\" Bailey asked.\n\n\"Uh-huh?\"\n\n\"Go in a little.\"\n\nHis middle finger slipped past her hand, delved between her dripping lips, and prodded at her entrance. Gingerly, she spread her legs and felt his fingertip slide up inside her, pushing outward at the tight ring of her muscles.\n\nJust need to relax a little, Bailey told herself. Just relax. I can do this.\n\nWhen her muscles gave a little space, she begged Kent, \"More.\"\n\nBailey closed her eyes, feeling his finger slide ever so slowly, curving its way into her body, intruding where nothing had intruded before.\n\n\"More,\" she moaned, pushing down on her clitoris. \"More.\"\n\nFlesh bumped against her vulva. Kent's weight shifted as he turned his wrist to push his finger farther inside.\n\n\"It's all the way, Bai.\"\n\nLaura must have looked over, because she gasped.\n\nIt wants more, Bailey felt her body whining. But that's his longest finger.\n\nIn that moment, when she pushed her clitoris down toward her vagina, she felt her own desperate sadness drive her forward. The bed started to shake, Laura jerking on Kent's erection with sudden fervour.\n\n\"Laur!\" Kent warned.\n\nBailey had gone over the edge by then, jabbing at her clitoris and feeling her orgasm seize her body, clenching Kent's finger inside her body, pulses flowing up and down her spine, making every skin cell on her body tingle.\n\nShe heard herself cry out and Kent, knowing he didn't need to hold on, let loose, too. She felt his semen spilling out onto her stomach. Laura squeaked again, probably surprised by whatever she saw.\n\nI'll look later, Bailey thought, but I bet it's everywhere. I just can't open my eyes right now.\n\nBailey let her orgasm pass, the last spasms dying away, and slowly reoriented her hips to let Kent know he needed to get his finger out.\n\n\"Slow-ly,\" she begged, and felt him easing out of her, curving his digit out of a vagina not completely willing to let him go.\n\nBailey sucked in air and looked down to survey her body.\n\nShould've taken off the goddamn t-shirt, she noted.\n\nKent had sprayed several streaks over her shirt and the part of her mid-riff that had gotten exposed during their efforts. Laura's bare thigh hosted a plethora of dots, drops and a streak of its own. Some semen pooled between her right arm and her friend's thigh.\n\n\"At least he missed your sweater,\" Bailey commented. \"And good job keeping it off his bed.\"\n\n\"Commitment,\" Laura gave a sharp nod. \"But it's going to leak between us if we don't do something.\"\n\n\"Here,\" Bailey started to remove her shirt, but Kent had already stood up to remove his shorts.\n\nOnce he'd wiped off the very end of his cock, he handed it to Laura so she could clean herself where she touched Bailey.\n\nGood god, Bailey thought. So much come.\n\nShe then discarded her shirt over her head and used it wipe up the streaks on her stomach.\n\n\"You can lend me a shirt, I guess,\" Bailey noted.\n\nKent stood, sweeping a shaking hand through his dark hair and went to the white board first, updating it to fifteen dollars.\n\nBailey gulped, seeing that. We could finish that in two more nights. Easily.\n\nHe fetched her a clean shirt next, exchanging it for her soiled tee, which he threw in with his dirty laundry.\n\n\"Thanks,\" Bailey said, donning the garment. \"You okay, Laur?\"",
        "It's important to check, Bailey knew, in case we did something that sets off her guilt complex.\n\n\"Yeah, fine,\" Laura said. \"It's just been quite a night, you know?\"\n\n\"I told you the boob stuff would stick with you.\"\n\nLaura nodded, \"Yeah, that too. I should get home, though.\"\n\n\"I should get into a shower,\" Bailey noted.\n\n \n"
    ],
    "authorname": "xtorch",
    "tags": [
        "debt",
        "ejaculation",
        "embarrassment",
        "honesty",
        "messy",
        "nipples",
        "orgasm",
        "spanking",
        "stripping",
        "lesbian"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/two-hundred-dollars-ch-27"
}
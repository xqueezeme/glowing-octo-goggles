{
    "title": "A Game of HORSE Pt. 04",
    "pages": [
        "This story contains italics.\n\nAll characters in this story are 18 or older.\n\nChapter 8: Katie's Gifts.\n\nBrady's parents were away for the weekend so when the school bell rang on Friday afternoon he rushed home to get out of his regular clothes and dress up. He was going to be Brandi for two solid days and couldn't wait to get started.\n\nKatie was waiting for him when he got home, sitting in her red Mini Cooper in the driveway. When she saw him she hopped out and walked him to the front door, carrying a metal case. \"Let's talk,\" she said excitedly. Brady was worried for a moment that she was going to end the experiment, but she seemed to be smiling and her positive vibe indicated this was going to be a good visit.\n\n\"It's been more than two weeks,\" she stated as she looked at her phone, scrolling and tapping. \"That's longer than I told you at the start and you haven't asked me to remove the device. I take it all is well?\"\n\n\"Ummm, yeah!\" Brady exclaimed, not exactly sure what Katie meant and feeling self-conscious about the things Brandi had done. Katie looked at him expectantly, urging him to explain.\n\n\"Well, yeah, I mean, it's been, um... fine. Actually, it's been great!\" he admitted. Katie nodded, letting Brady do the talking.\n\nBrady took a deep breath. \"It's been amazing, Katie. Completely amazing. I love being Brandi. I love all the stuff you gave me -- the outfits and wigs and all that. I mean, I had no idea...\"\n\n\"I know,\" Katie replied softly. \"Sit down. Let me fill you in.\"\n\nKatie explained that the prosthetic breasts weren't the only experimental device she was testing. \"Remember that pill I gave you?\"\n\n\"Uh-huh,\" Brady responded.\n\n\"That was actually a hormone-stimulation therapy that enhanced your psychokinetic response to having breasts.\"\n\n\"What?\"\n\n\"Just listen,\" she said, \"you see, when your body gets transformed in any way -- hitting puberty, losing a limb, major weight loss, getting a prosthesis -- your mind generally reacts in a positive or negative way and that usually leads to increasing or decreasing hormone production, among other things of course. So the point of the pill was to further stimulate your endocrine activity. Understand?\"\n\nBrady looked at her blankly.\n\n\"Here's what I mean -- when you got your boobs your mind was either going to respond negatively or positively, even if you weren't aware of it, right? If negative, your system would have reacted by increasing the output of testosterone to counteract the feminine stimulus. Kind of like an immune response, OK?\"\n\n\"OK,\" Brady answered, beginning to understand.\n\n\"But if your mind reacted positively to the breasts, then the metabolic stimuli would increase your estrogen levels and reduce the male hormones, you see? We call it psychophysiological feedback.\"\n\n\"Uh-huh.\"\n\n\"Usually the results are very slight but the pill was designed to multiply the effect, to make either more testosterone or more estrogen, depending on which way your mind responded. That way the results would be clearer and the next steps easier. Make sense?\"\n\nBrady nodded, trying to process all this information.\n\n\"We've been monitoring your anatomical and physiological status remotely in real time, through the prosthesis, and it turns out your testosterone levels are way down and estrogen is off the charts. It's clear you had an incredibly strong positive response to the breasts. That's why your voice is getting higher, your body hair isn't growing much, your waist is getting narrow and your hips and butt are flaring out. Even your Adam's apple is disappearing.\"\n\nBrady looked at her, confused.\n\n\"Didn't you notice?\" she asked. Brady hadn't noticed, because it happened gradually but now that Katie pointed it out he realized it was true. It was obvious. He was becoming much more feminine.\n\n\"I guess... well... yeah. Now that you mention it.\"\n\n\"Sweetheart,\" Katie said, \"you are as girly as they come, except for one thing.\"\n\n\"What---,\" Brady began but was shocked into silence as Katie reached down and grabbed his crotch, running her hand over it and giving it a squeeze.\n\n\"WHOA!\" he shouted.\n\n\"The only thing that doesn't make sense,\" Katie said, ignoring his response, \"is that your penis doesn't seem to have shrunk. That's what we'd expect with the hormonal changes.\"\n\n\"Actually,\" Katie elaborated, looking at her phone, \"according to our data you've grown by two centimeters. That's almost an inch! Feels thicker, too.\"\n\nBrady nodded thoughtfully. \"Yeah, I kind of thought...\"\n\n\"My field test just confirmed it. Your balls have grown too! Brandi has a respectable package down there now -- more than Brady ever did!\" she laughed.\n\nBrady scowled.\n\n\"I know it doesn't really match everything else going on,\" Katie offered, \"so if you want we can reverse the effects -- shrink it all down so you look ladylike in a bikini. What do you think?\"\n\n\"NO!\" Brady shouted. \"Let's just leave things those things the way they are, OK?\"\n\n\"Sure -- whatever you want.\"\n\n\"So, what's next?\"\n\nKatie opened the case. \"Version 2.0!\" she said proudly, displaying a new set of breasts.\n\nBrady's heart pounded when he saw them. They were similar to the first set but he could sense they were better. \"For me?\" he asked excitedly.\n\nKatie nodded. \"These are much more lifelike and custom designed for you. Like I said, we've been collecting data on every little detail of your body -- how you move, your temperature, skin tone and melanin levels, hydration, blood flow, nerve function, everything -- and accounted for that in the new design. We improved the materials, too, and the electrical system. These will absolutely feel like a real part of you.\n\n\"Do you want them?\" she asked. \"You can think about it if you're not sure yet --\"\n\n\"I want them!\" Brady blurted out. \"Can we do it now?\"\n\n* * * * *\n\nAn hour later Brady was walking Katie to her car, astonished by the lifelike feel of his new breasts. They were perfect, shapely and firm, standing straight out from his chest with upturned nipples, and slightly larger than the first pair, a full C cup now. They looked perfectly natural even when Katie made him test them out by doing braless yoga poses and jumping jacks. He couldn't believe how real they felt, how they moved, how they matched his skin perfectly and blended into his chest. They nipples actually acted as if they were alive, going from puffy and soft to stiff nubs when they were stimulated or got cold. They were even more sensitive than the last pair, which Katie tested by massaging them and sucking the nipples, sending waves of excitement through Brady's torso. Katie said they would even tan along with his natural skin.\n\nWhen they got to Katie's car Brady threw his arms around her in a big hug. \"Thank you,\" he gushed, pressing his chest into hers. \"Thank you so much for everything Katie.\"\n\n\"You're welcome,\" she replied, patting his back. She extracted herself from Brady's embrace and reached into the back seat for a large cardboard box. \"This is for you,\" she said, kissing him on the cheek and climbing into the driver's seat. \"I'll be in touch.\"\n\n* * * * *\n\nBrady's mind raced as he dragged the box inside and tore it open, finding it filled with racy outfits and accessories. There was a schoolgirl outfit with a plaid skirt and white socks; a stripper costume with a metallic blue microskirt -- basically just a tiny circle of fabric -- along with a tiny bikini top and ridiculously high heels. There was a cheerleader uniform and lots of other skirts and shorts and shoes and tops along with wigs, jewelry, lingerie and makeup.\n\nThere was also a pouch at the bottom of the box, and when Brady unzipped it he froze. It was filled with sex toys -- dildos, vibrators, oil and lube, along with other things he didn't even know the purpose of. He picked up each one and hefted it in his hand, gripping it, bending it, feeling its weight, pressing buttons to set them in motion.\n\nBrady was surprised. Even though he had become obsessed with crossdressing and sex since Katie started the experiment, he hadn't thought for a second about toys or using anything other than his hands and mouth. He shook his head and put the pouch back in the box, a little taken aback by whatever Katie was suggesting with these kinky tools.\n\nFocusing his attention back on the clothes, Brady decided to try on what looked like a saucy secretary outfit. It had a black pencil skirt, a white button-down shirt, matching black blazer and black pumps with a two-inch heel. It looked like something that might pass in a real office, just barely.\n\nFirst, though, he had to get ready. Brady took a bath, shaved, and put on a cute pink terrycloth robe. He pranced around his room, gathering the supplies to give himself a manicure, pasting tabs on his fingernails to make them long and painting fingers and toes in bright red polish. He loved doing his nails and was getting good at it.\n\nHe stepped into the black skirt and zipped it up. It came down a little above mid-thigh, definitely too short for any secretary trying to look professional, but that was certainly not his goal. Brady decided he was going to be a very naughty secretary, the kind that didn't wear panties or a bra at work. The kind that teased her boss and invited leering by all the men in the office.\n\nHe slipped into the white shirt, leaving the top three buttons undone. He put on the shoes and took a few steps around the room, looking at himself in the mirror. Everything fit perfectly, he noticed, grateful to Katie for her taste and attention to detail. She really did know him better than he knew himself.\n\nBrady was happy to see that when he leaned forward the skirt rose up and the shirt opened, giving a clear view of his braless breast and hard nipple poking against the white fabric.\n\nHe decided on a shoulder-length auburn wig, the red highlights going nicely with his manicure. He did his makeup, lightly powdering his face, dabbing color on his cheeks, painting his eyes, and coating his lips in a red gloss to bring it all together. \"Hello Brandi!\" he said in a sultry voice to his reflection in the mirror. \"We're going to have some fun this weekend!\"\n\nIn what was now becoming her style, Brandi slipped silver hoops in her ears, bracelets on her wrists and rings on her fingers. She decided to pretend she was a real secretary and went downstairs to her father's home office. She started up the computer and sat in the black leather swivel chair, pretending to work on a Word document, her red fingers tapping away at the keys.\n\nDrama class had given Brandi a creative imagination, and it excited her to be dressed as a sexy secretary, working for her make-believe boss while dressed in a skimpy outfit in an office full of horny men. It made her tingle. She could feel herself getting hard under her skirt.\n\n\"What's that, Sir?\" she asked, looking at the door. \"You need the contract files? They're right here on the desk.\" Brandi stood up and bent over the pile of folders, leaning over the desk to flip through them. She felt the air on the back of her thighs and the front of her shirt fall open, giving her boss a clear view of her tits and ass as he stood in the doorway. She pretended not to notice, of course.\n\n\"They're here somewhere, Sir,\" she said with exasperation. \"Please, just give me a minute.\" It gave Brandi the chills to imagine working in an office and exposing herself to her boss.\n\nBrandi visualized her boss waiting impatiently as she searched. In Brandi's mind he was a large, fit man in a tailored suit with a crisp white shirt and silk tie, clean-shaven and hair neatly trimmed. He was young, successful and demanding and she loved to dress provocatively for him, enjoying the glimpses he stole down her shirt. She knew he appreciated her revealing outfits, but at the same time he had high expectations and wouldn't tolerate poor performance. She desperately wanted to please him.\n\n\"Maybe it's over here,\" she offered hopefully, bending down to rummage through a box of documents on the floor. Instead of bending at the knee, though, as any modest secretary would, Brandi stood tall and bent at the waist, hiking her skirt up toward her pantiless ass. Brandi knew he could see almost everything, and she loved imagining that her boss was ogling her. Brandi's fantasy was making her tingle with excitement. She loved playing the role of submissive, slutty secretary and suddenly she had an idea of how to make this fantasy really hot.\n\n\"Wait!\" she said as she rose back up. \"I think it might be in the other room -- just give me a minute, Boss!\" She imagined brushing past him in the doorway as she slipped out into the hall, her nipples poking against his pinstripe suit as he turned sideways to let her pass.\n\n\"Darn! Not here either,\" she called as she grabbed the pouch from Katie's box. \"Let me check that first pile again, Boss,\" she apologized as she breezed back into the room, grazing against him again as he stood impatiently.\n\nShe set the pouch on the desk and bent over again, looking through the folders and displaying her ass. \"Oh, I'm so sorry, Boss!\" she whimpered, \"I just can seem to find it.\"\n\nShe looked over her shoulder at the imaginary man. \"Is there anything I can do to make it up to you?\" she asked, giving her ass a subtle sway. \"Anything?\"\n\nBrandi took the smallest vibrator from the pouch, a plastic bullet about the size of a pinky, and squirted some lube on it.\n\n\"Brandi!\" her imaginary boss bellowed. \"I'm very disappointed in you! We can't close the deal without that file!\"\n\nBrandi pushed the folders to the side of the desk and leaned forward on her elbows. She drew her skirt up to her waist, leaving her bare ass high in the air as she waved it in circles for the angry man. \"Please, Boss,\" she pleaded, \"I'm so sorry... I'll do anything to make it up to you, anything!\"\n\nBrandi thrust her chest against the wooden desk, imagining her boss pushing her shoulders down with one hand as he gripped her hip with the other.\n\n\"Is this how you plan to make it up to me?\" her boss demanded.\n\nBrandi took the oily bullet and ran it up and down her butt crack, imagining it was her boss's finger. \"Yes. Yes!\" she purred out loud. \"Anything!\"\n\nBrandi squirted more lube on the vibrator and held it directly against her rosebud. The feeling was electric and completely new. She had never experienced anything anal before and was amazed at how good it felt. She buzzed herself in circles for a few moments, then pointed the little missile directly against her slippery asshole and pushed, imagining her boss's hard cockhead pressing against her virgin opening. At first she couldn't get it in, but she lubed it up again and experimented with different angles until she finally succeeded in popping through her tight anal ring. It was whirring away inside her and felt oddly exciting, her whole body tingling with a mixture of pleasure and pain.\n\n\"Oh, yes Boss,\" she groaned, imagining him towering over her, pressing her torso down against the desk as he took her. She held just the tip inside her, getting used to it, letting the pleasure overcome the pain, then pushed further.\n\nShe gasped as the bullet penetrated her ass. Brandi imagined her boss behind her, holding her hips, the head of his hard cock lodged inside her. She shuddered. It hurt but she loved it. I want to get fucked! she thought.\n\nOnce she got comfortable she pulled it out then pushed in again, fucking herself with the little bullet. Oh, fuck! I love this! It didn't take long until she opened up and could easily pump the whole three inches in and out of her ass. She pictured her imaginary boss standing behind her, fucking her with his big, hard cock.\n\nBrandi loved the feeling of a vibrator in her ass, and the idea of getting fucked by a real cock excited her beyond belief. As much as she loved it, though, she realized that a real one was going to be much larger. She would have to prepare.\n\nBrandi reached into the pouch and wrapped her fingers around a realistic vibrator, about six inches of textured blue silicon with a pronounced head, veins on the shaft and two large balls at the base. It looked like a real cock, maybe a little bigger than Brady's but smaller than Peter's, and much smaller than Mr. Smith's.\n\nBrandi pulled the bullet from her rear and poured oil over the blue phallus. She switched it on and circled the buzzing head around her lubricated sphincter, then took a deep breath and pushed.\n\nOwwww! This was no bullet, she realized as she instinctively backed off. She smeared more oil around the head, lifted her knees up onto the desk and spread herself as wide as she could. She turned it off, hoping that would make it easier, and once again pushed. Brandi gasped as the fat blue head penetrated her. She could feel herself being stretched wide, painfully, but she took deep breaths and held it there, fighting to get used to it. After a minute or two the pain started to decrease, and just out of curiosity she pressed the button on the end, setting the thick shaft vibrating inside her.\n\nWhoa! Oh, my God! Pain started to give way to pleasure. Holy shit that feels incredible! Brandi pulled the fake penis out for more lube, the pushed it back inside. This time, it went in easier. Brandi paused with just the head inside her, then began the work of taking a whole, lifelike dildo into her virgin asshole.\n\nShe pushed in and held it, then pulled back and pushed more, slowly pumping it back and forth, pushing a little deeper on each stroke, struggling to relax, focusing on her breathing as it pressed further and further into her bowels until finally the big, blue silicon balls were resting against her own.\n\nBrandi panted for breath. She had a real, life-size dildo lodged in her ass. Oh, fuck! This is amazing! she thought as she pulled the entire length out then plunged it back in one smooth, slow stroke, then all the way back out and in again, fucking herself earnestly as she kneeled on the desk.\n\n\"Oh, yes! Fuck me, Boss! Fuck me with your big cock! Fuck your little office slut!\" she shouted out loud. Brandi was almost delirious now, fucking herself with the big vibrator, imagining her boss behind her, holding her hips, pounding his raging hardon into her tight asshole.\n\n\"Yeah, you little slut!\" he moaned in her mind, \"take my cock! Take my fucking cock in your slutty ass!\"\n\nBrandi was in a new world as she fucked herself, overcome with pleasure mixed with pain wrapped in the excitement of a new door opening into her sexual existence. She felt transformed all over again, as if an erotic spirit had taken over her body and mind.\n\n\"Fuck me! Fuck me!\" she cried out. Brandi's own hardon was pulsing now, and while she pumped the dildo into her behind she reached an oily hand down to stroke herself.\n\n\"Come for me!\" she shrieked, \"come in my ass! Fill me up, Boss! Come for me!\" Brandi saw stars as the semen shot from her cock. So vivid was her imagination that she actually felt her boss's hot sperm spurting deep inside her as the full length of the blue cock buzzed in her rectum.\n\nBrandi panted into the blotter as her orgasm subsided. She lay there for a while, basking in the glow of her first anal climax. She smiled happily, thinking of how amazing it was going to be to have a real cock pumping into her ass. Before she even got up off the desk she began to plan.\n\nChapter 9: Losing It\n\nBrandi's first thought was to invite Peter over immediately, but she knew he was out of town and would be home late. She realized, though, that was even better -- it gave her time to get ready.\n\nShe texted him. \"Come over for some fun tomorrow? Parents away,\" adding the purple devil. Peter responded instantly. \"Can't wait!!\"",
        "For the rest of the day, Brandi got ready to get fucked up the ass by Peter's sizeable cock. She rummaged through the pouch and took stock of her training materials. There were other dildos -- some larger, some smaller, some fatter, some thinner --an assortment of buttplugs and a variety of lube. Brandi tried them all, spending the entire day penetrating herself, getting used to the feeling of a thick shaft in her butt, stretching herself out. She popped in a buttplug and worked on her tan all afternoon, so she would look as sexy as possible tomorrow. Every so often she would come inside to try out a new dildo, fucking herself silly, spinning out new fantasies in her head, widening her ass to get ready for a real cock.\n\nBy the time she went to bed she easily slipped in the jumbo buttplug and slept with it there, imagining that it was Peter's thick, beautiful cock lodged inside her all night long.\n\n* * * * *\n\nBrandi woke up and showered, shaving any hint of fuzz from her body. She felt sexy as the water cascaded down her smooth, tanned skin and the new feminine curves she was developing from Katie's experiment, accentuated by the yoga and stretching exercises she was doing every day.\n\nPeter was coming in a few hours, giving her plenty of time. What to wear? She sorted through the outfits Katie had provided. Cheerleader? No, Brandi didn't like cheerleaders. Sure, they were cute, but she felt she was a better dancer than any of the girls on the cheer squad. Every year Brady had a role singing and dancing in the school musical, and even though he always played a male character his dance moves were far more polished than any cheerleader. Plus, the cheerleaders did all of that silly fist pumping and waving.\n\nNo. She definitely was not going to dress up as a cheerleader. Nurse? No, Brandi didn't like anything about hospitals. Definitely not a nurse costume. Stripper?\n\nHmmmmm. That might be interesting. Brady and Peter had always joked that they were going to arrange one another's bachelor parties one day, getting the hottest strippers to perform for them. For their 18<sup>th</sup> birthdays they went to the local strip club, but it actually turned out to be a disappointment because the real-life girls didn't live up to their fantasies and what they had seen online. Looking back on it now, Brandi realized that when Brady watched those dancers he was comparing himself to them, thinking about how he would dance if he was onstage, how he would tease the men in the audience.\n\nLater, when Brady was rehearsing for the final musical in his senior year, he studied dance videos on YouTube to practice his moves. He didn't watch Fred Astaire or Savion Glover. No, Brady always got his inspiration from female dancers, especially Christina Aguilera, and Demi Moore's dances in Striptease. Their moves were always in his mind when he performed, and he always got loads of compliments from the girls in the play.\n\nThe signs were always there for Brady, but he never seemed to see them until Katie made things clear.\n\nYes! Brandi decided. Peter will love me dressed as a stripper. She picked out the tiny blue metallic skirt with a matching top, along with a matching wrap for her waist and a loose fake-fur vest -- after all, you can't strip if you have nothing on, right? The outfit came with fishnet stockings, a matching choker, ruffled wrist cuffs, 4\" heels and a fine wig of jet-black hair. Brandi was thrilled at the idea of dressing up, dancing for Peter and seducing him.\n\nShe did her makeup and touched up her nails, put on the choker, cuffs and earrings, spritzed on perfume and left a note for Peter on the front door: come upstairs to my room, strip down to your boxers, sit on the chair and wait. XXOOXX. Brandi\n\nShe set up Bluetooth speakers in her room and went into the guest bedroom. Her heart was beating a mile a minute as she waited, practicing her routine. When she heard the front door open and footsteps on the stairs she waited a few more minutes, letting Peter wonder what was about to take place, then tapped her phone to start the music. She waited through the first song and then, as the second song started, she made her entrance.\n\n* * * * *\n\nBrandi was in an erotic trance, swaying her sexy body for Peter, looking deep into his eyes as she let the vest fall from her shoulders to reveal her little blue top.\n\nShe ran her painted fingernails from her smooth thighs up, caressing her hips and flat belly, toying with the straps of her bikini. Brandi spun slowly, shaking her ass, raising her arms in the air and bending down to display her shapely legs rising high on her heels. She turned to face him again, playing with the edge of the wrap around her waist, opening it slightly then closing it as she danced, pursing her red lips, looking at him with sultry eyes.\n\nFinally, Brandi undid the wrap, revealing the incredibly tiny skirt around her waist. She turned slowly, undulating with the music, moving her firm butt in slow, sensuous circles. She teased with the straps of her bikini, pulling them off her shoulders, swaying, shaking her head and tossing her hair, offering all her sexy charms to Peter who was watching raptly, his hardon straining against the silk of his boxers.\n\nWith her back to him, Brandi reached between her shoulder blades and undid the clasp of her top, letting the straps fall from her shoulders as the cups tumbled from her breasts. Brandi seemed supercharged now, undulating with an intense sexual energy, wearing nothing but a tiny skirt, fishnets, wrist cuffs, choker and 4\" heels. Peter marveled at her smooth back, perfectly tan, dark hair brushing her shoulders.\n\nBrandi turned slowly, letting the tension build before she revealed her topless front, her firm tits defying gravity, pointing straight out and waving with the beat as she rocked to and fro. Her nipples were hard, pointing straight at Peter who watched hungrily. When Brandi leaned forward to offer him a taste he sucked her right nipple into his mouth before she stepped back, playfully wagging a finger at him as if to say, \"not yet!\"\n\nBrandi danced erotically, her eyes boring into Peter, her hands roaming over body, cupping her breasts for him, squeezing them, dangling her pointy nipples in Peter's face, just out of reach, teasing. She dropped her eyes to his lap, thrilled to know she had caused the massive hardon straining in his boxers.\n\nShe swung her hips seductively and twirled so her back was to him, then leaned back into his lap, lightly grazing her tiny skirt over his big bulge. She placed her hands on his knees, leaning forward as she swirled her bottom in circles in time with the music, caressing his erection with her ass, only two thin layers of fabric separating their bodies.\n\nPeter reached up to play with her tits -- rubbing, squeezing, taking her nipples between his thumb and forefinger as she lap danced for him. Brandi was in an erotic cloud, feeling Peter's cock against her, his hands on her tits sending electric charges through her, the sensuous beat of the music.\n\nBrandi stood and turned to face him, dancing between his outstretched legs. She leaned her face into his, intending to tease him, but Peter pounced and instantly they were locked in a wet, passionate kiss. Brandi dropped down, sitting in his lap with her legs stretched around him as they made out, her full weight on his erection as their tongues intertwined and he massaged her breasts.\n\nBoth Brandi and Peter were supercharged with lust but somehow Brandi got hold of herself and backed away, panting. She wanted to stick to her plan. She placed her hands on his shoulders, urging him to relax.\n\n\"We have all day,\" she purred, swaying to the music. When Peter exhaled and seemed to settle down she trailed her painted fingers down his chest and over his rippled abs, letting them come to rest on the elastic waistband of his boxers. She gave him a devilish smile and leaned into his ear, whispering, \"time to take these off.\"\n\nPeter rose up slightly and Brandi slid the boxers down his legs and off, tossing them on the floor. God, I love that cock! She thought to herself as she danced for him. Brandi swayed and twirled, bent and arched, all the time running her hands over her almost nude body, presenting all of her delights to him.\n\nFacing away from him, Brandi peeled the skirt up until she was wearing it like a belt, exposing the smooth globes of her ass as she danced. Brandi ran her hands over her behind, emphasizing her smooth, tan curves. She looked back over her shoulder and could see Peter focused intently on her butt, making her shudder with pride. He wants it, she congratulated herself.\n\nPerched on her heels, Brandi sashayed over to the nightstand and picked up a bottle of massage oil Katie had provided and squirted it into her hand. She danced back over to Peter, pointing her naked ass at him again, and seductively smeared the oil over her tanned ass cheeks. Brandi kept dancing, using her sexiest moves, her oily hands gliding over her body, raising her arms, leaning far forward to put her shiny rump on display.\n\nPeter was almost delirious with excitement watching this sexy, oiled-up creature dance for him. Brandi could feel the room crackling with desire, and when she leaned back into Peter's lap to rub her slick cheeks against his naked erection they both nearly exploded with desire.\n\nBrandi painted slow, oily circles over Peter's cock with her butt, and just when it seemed they were going to boil over she went further, lowering herself down to lodge his cock firmly in the crack of her ass. She moved her hips forward and back, sliding his shaft through the slippery valley. Brandi looked over her shoulder at Peter, narrowing her eyes and licking her lips as she caressed his cock in the grip of her butt.\n\nKnowing that she had him almost frantic with need now, she rose up and moved to the bed, resting her hands on it, lifting her ass high off the floor, arching her back as she swayed enticingly.\n\nAs she hoped, Peter could contain himself no more. He jumped up, grabbed her by the waist and pushed her onto the bed. Brandi shuddered in anticipation as Peter forced her down into the sheets. Just as her imaginary boss had done, Peter pushed her shoulders down, pressing her chest into the bed and grabbed her hips, lifting her ass high in the air. Brandi felt her nipples pressing into the sheets as she turned her face to look up at him towering over her. Just like in her fantasy, she was in a position of complete submission, to be taken any way Peter wanted.\n\n\"Mmmmmm, yes!\" Brandi moaned, swaying her butt in suggestive circles. \"Yes!\"\n\nPeter's cock was hard as a rock and he wanted nothing more than to drive it deep into Brandi's bottom, but he wanted to make absolutely sure it was what she wanted.\n\n\"You want this?\" he demanded, stroking his oily shaft.\n\n\"Mmmm, yes!\" Brandi replied, rocking from side to side, encouraging him. \"Fuck yes!\"\n\nPeter grabbed the bottle and squirted oil over his hands and Brandi's behind. There was oil everywhere. He placed his thumb between her cheeks, rimming her. Brandi gasped.\n\n\"Tell me!\" he demanded. \"Tell me what you want.\"\n\n\"Mmmmm,\" Brandi purred, \"fuck me baby! Fuck my tight little ass! Take me!\"\n\nPeter was incredibly excited but also a little worried. He had done this only once before and it didn't go well, with lots of pain and discomfort on the part of his partner, so he was surprised when his thumb easily slid into Brandi's tight little hole. Brandi shook with excitement as she felt his fat digit penetrate her, moaning and smiling. \"Oh, yes, baby! Yes!\"\n\nPeter pressed his thumb as deep as it could go and swirled it around, amazed at how comfortably she took it. \"Oh, you little slut,\" he teased, \"you've been practicing, haven't you?\"\n\n\"Yes,\" Brandi giggled. \"I'm still a virgin but I've been bad, baby, so bad.\" Brandi looked up at him with love in her eyes. \"I wanted to be ready for you.\"\n\nPeter slathered even more oil over his throbbing cock. \"Yeah? Are you ready now, baby?\" he asked as he reamed her with his thumb, plunging it in and moving from side to side, opening her up as much as possible.\n\n\"Yes, Peter, yes! Fuck me! Fuck my ass! Take my virginity! Oh, God! I'm SO ready!\"\n\nPeter had been waiting for this moment for years. The idea of fucking his friend up the ass had always excited him but never did he imagine it would be like this, with Brandi dressed up and dancing for him, shaved smooth and perfumed, real tits sprouting from her chest, begging to be fucked.\n\nPeter spread Brandi's cheeks wide and drizzled the oil along her crack. He spread it all over as he placed the head of his cock against her puckered asshole.\n\n\"You want me to fuck your ass, baby?\" he teased as he rimmed her with the tip of his rod. \"You sure you want it?\"\n\n\"Please... yes!\" Brandi gasped, squirming. \"Just do it! Fuck me!\"\n\nPeter pushed forward. He had anticipated a major challenge but was amazed that he slipped inside her without any squealing or crying. Brandi was ready for this, there was no doubt.\n\n\"Ohhh, yes!\" Brandi groaned. She was in bliss. The preparation had paid off. There was no pain, only pleasure as Peter entered her. \"Fuck yes!\" she added, encouraging him to proceed.\n\nPeter pushed forward, pressing his hard, oily cock inside her incredibly tight ass. Brandi was groaning and purring, loving every inch of his cockmeat invading her. She reached back to spread herself even wider, encouraging Peter to shove his entire erection into her willing bottom.\n\n\"Ohhh, yes!\" she groaned again. \"Yes! Yes! Fuck my ass! Fuck my slutty ass with your hard cock!\"\n\nWhen Peter got half way in he pulled back, squirted more lube on, and pressed forward again, steadily penetrating his slutty friend's bottom until he was balls-deep, his long shaft completely buried inside her.\n\nAfter a moment to let Brandi get used to the feeling of a hard cock lodged in her ass, he grasped her hips and withdrew, then pressed forward again, pushing in all the way and then pulling back before plunging deep again, building into a steady rhythm, in and out, fucking Brandi with deep, slick strokes.\n\n\"Oh, fuck! Oh, Fuck! Oh, fuck fuck fuck fuck FUCK!\" Brandi wailed as Peter reamed her. He held her hips as he slammed into her, making her body shake, her tits bouncing into the sheets with each stroke of his cock, her head jarring up and down with the force of his pounding, electric sensations coursing powerfully through her. It was far better than she had imagined. Every nerve in her body was tingling. I'm a sexy girl and I'm getting fucked like crazy! She loved it.\n\nPeter was panting with pleasure as his pumped his lubed-up cock into Brandi's tight hole. Her face was pressed against the bed and turned to the side, giving him a clear view of her red, glossy lips slightly parted as she purred and moaned, gasping for breath, makeup and eye shadow, black hair in a wild tangle against the white sheets, eyes closed in pleasure. The situation was a wicked fantasy come true, and Brandi's incredibly sexy look plus the tight grip of her ass on his cock was pushing him to the edge.\n\n\"Ugh, I'm gonna... cum soon,\" he gasped.\n\nBrandi's lips turned into a smile, knowing Peter couldn't resist her feminine charms. \"Do it, baby!\" she urged. \"Cum in my ass! Fill me up! Cum in my slutty ass!\"\n\nBrandi looked up at Peter and saw the look of urgency in his face. Quickly she reached her oily hand down to stroke herself, wrapping her fingers around her hard cock but imagining she was rubbing her clit. She closed her eyes and stroked as Peter fucked her, picturing his cock pumping between the lips of her pussy as she rubbed her clit, their orgasms both approaching, the oil and motion and imagination sending them careening toward climax.\n\n\"Oh, yeah!\" Peter yelled as he erupted, shooting his cream into Brandi's quivering body.\n\n\"Oh, yes! YES!\" Brandi squeaked, marveling at the feeling Peter's cockhead pulsing inside her, the semen spurting into her bowels as her own orgasm peaked, sending a pearly geyser into her hand. They both held still, gasping for breath as cum erupted in pulse after pulse, shooting into Brandi at one end and erupting from her at the other.\n\nChapter 10: Extra Help\n\n\"On our way!\" Brandi's parents texted.\n\nShit, Brandi thought. It was Sunday night and she had no choice but to remove her makeup, put away the boxes from Katie and send Peter home. They had spent all weekend having wild sex. Brandi dressed up in different outfits with different wigs and sucked Peter off and took his big cock up her ass in almost every room of the house. They showered together, napped together, and covered each other's bodies in massage oil. They both came too many times to count. It was wonderful.\n\nUnfortunately, Peter had a busy schedule for the upcoming week, with basketball and college visits, and wouldn't be able to hook up with Brandi again until Saturday. After their wild weekend Brandi thought it might be good to take a break, so she decided to curtail her slutty behavior from the previous weeks and wait for him. Also, she figured she had Katie's toys to use, which would help her relieve her insatiable sexual appetite.\n\nMonday morning Brady woke up super horny, but he jerked off under the covers and decided he could make it through the day. Gary tried to take him to the Auditorium again in drama class, but fortunately Mrs. Perkins had other things planned. During Chemistry Brady was going crazy, fantasizing about Ernesto's thick rod and the giant slab of meat hidden under Mr. Smith's khaki pants. He was dying for cock, and dying to be Brandi. There was no way he was going to make it until Saturday, he admitted to himself.\n\n\"Remember everybody!\" Mr. Smith shouted just before the bell, as the students were packing up their books, \"the test on chemical bonding is on Wednesday! I'll be here for extra help in my office after school from 3 to 4 tomorrow!\" Everyone chuckled because they were all seniors and, with the school year almost over, no one cared how they did on the test. No one was going for extra help and they all knew it.\n\nBrady laughed along with his classmates, but privately he was thinking, I know someone who needs extra help...\n\n* * * * *\n\nBrady skipped classes Tuesday afternoon to transform into Brandi. As usual, he bathed and shaved, then rubbed his body with lotion to make his tan skin smooth and pretty. The schoolgirl outfit fit perfectly. The blue plaid skirt came to mid-thigh, high enough to show off Brandi's legs but low enough to hide the fact that there would be no panties with this outfit. The top was a tight white V-neck sweater that clearly displayed her braless tits and pointy nipples. She did her makeup, painted her nails, and chose a long blond wig that cascaded down past her shoulders.\n\nTo give a studious impression, and to avoid drawing too much attention in case anyone saw her, she wore a denim vest over her sweater and put her hair up in a bun. She also decided to wear diamond stud earrings instead of her usually gaudy hoops. A pair of glasses added the finishing touch.\n\nWhen she was done she looked in the mirror and was pleased. Outwardly she looked like a normal, pretty girl in the senior class, but underneath she was anything but.\n\n* * * * *\n\nThere were only a few cars in the parking lot when Brandi pulled in at 3:50pm. She found an open side door and made her way down to the science wing, her heels clicking in the vacant hallways.\n\nThe Chemistry office was empty except for the sound of typing coming from Mr. Smith's office. She knocked on his door.\n\n\"Hello?\" came a startled response.\n\n\"Ummmm... hi,\" Brandi answered in her high voice. \"Mr. Smith?\"\n\n\"Yes?\" he answered, wondering who could possibly asking for him.",
        "\"Ummm...,\" she mumbled again, trying to gather her confidence. \"I'm here for extra help.\"\n\nThe door opened, Mr. Smith standing startled in the doorway, looking down at Brandi. \"Extra help?\" he asked. No one ever came for extra help. He looked at the girl in front of him and noticed how attractive she was. She looked familiar but he couldn't make a connection.\n\n\"Who are you?\" he asked, confused. \"You're not in one of my classes... are you?\"\n\nBrandi smiled and batted her eyelashes at him. \"Period 4, Mr. Smith,\" she purred in a sexy voice. \"Don't you recognize me?\"\n\nHe looked at her again, confused, but she could see the wheels turning in his head.\n\n\"Brady?\" he asked, shocked. \"Is that you?\"\n\n\"No, Mr. Smith,\" she giggled. \"I'm Brandi.\"\n\n\"Brandi?\" he responded in wonder, looking up and down her alluring figure.\n\n\"Uh-huh,\" she said, biting her lip. She paused for a moment, letting Mr. Smith drink her in. She could tell he liked what he saw. For good measure she reached up and undid the bun on top of her head, letting her blonde hair cascade down over her shoulders. She swung her head from side to side, like in a commercial for hair conditioner, making Mr. Smith's heart skip a beat.\n\nHe stood there dumbfounded, his mouth open, staring at her. Brandi giggled again and stepped into his office. She grasped his arm and gently pulled him out of the doorway so she could close it behind them.\n\n\"Wow,\" Mr. Smith said, shaking his head.\n\n\"Brandi needs extra help, Mr. Smith,\" she stated as she clicked the lock.\n\n\"Brandi? Brady? Really? What are you doing?\"\n\n\"Not Brady,\" Brandi explained patiently. \"Brady's not here today, Mr. Smith. It's only Brandi here, OK?\"\n\nHe nodded as if he wanted to understand but couldn't quite wrap his head around it.\n\n\"Good,\" she replied, taking her glasses off and setting them down on the desk.\n\n\"Well, Mr. Smith,\" she said as she removed her vest and draped it over the back of a chair, revealing her perfectly shaped breasts tightly encased in the thin sweater. \"I could really use your help, sir.\"\n\nMr. Smith continued to nod, shocked by the appearance and attitude of the creature standing before him. In an instant she had transformed from an attractive student to a ravishing, sexy beauty. Her legs were long and smooth, her tits were perfect and her face and hair were gorgeous. She was a vision of schoolgirl sexuality. Mr. Smith was hyper-aware that they were alone in his office, after hours with the door locked, and was slightly worried that he was being set up for something, but it didn't matter. He didn't have the will to resist.\n\nBrandi sensed how out of sorts he was and decided she had to take charge, holding him by the arm and gently leading him to his desk chair, the same chair he sat in when Brady gave him an amazing blowjob last week.\n\n\"Just sit right here, Mr. Smith,\" Brandi directed as he stared. \"I think I know exactly how you can help me.\" Brandi dropped to her knees between his outstretched legs, running her hands along his thighs from his knees to his crotch.\n\nMr. Smith exhaled, resigning himself to the situation. Even if he was being set up, it seemed like it was going to be worth it. \"Oh, my God!\" he exclaimed as Brandi undid his belt and unsnapped his pants. \"So it's Brandi, is it?\" he asked raising his butt off the chair as she undid his zipper and slid his khakis down and off.\n\n\"Yes, Mr. Smith, and I really enjoy Chemistry class,\" she giggled as she tugged down his briefs, releasing his gigantic penis. Wow, she thought, it's even bigger than I remember.\n\nBrandi took his huge rod in her hands, amazed at its size even though he wasn't fully erect yet. She stroked it, watching as it expanded, getting longer and thicker with each beat of his heart. After a few strokes he was fully hard, pulsing in her grip. She looked at it in awe.\n\n\"Brady -- I mean Brandi,\" he stuttered, still shaking his head. \"You look fucking amazing!\"\n\nShe looked up at him and smiled. \"Thank you, Mr. Smith,\" she purred as she slipped her tongue out and circled the crown. \"I'm so glad you approve.\"\n\nBrandi reveled in Mr. Smith's enormous erection. She gave it long licks from bottom to top, then swirled her tongue over the smooth mushroom head. As her tongue danced over the tip she reached up to unbutton his white dress shirt, taking each button in her red, manicured fingers until she pulled his shirt open to reveal his muscled abdomen with light, curly chest hair. It was clear he worked out.\n\nBrandi spread her hands over his rippled chest as she kissed his cock all over, adoring its smooth, hard texture, inhaling its scent, feeling its heat, sensing the blood flowing through as it pulsed. Brandi loved everything about Mr. Smith's giant cock, and when she had it dripping with saliva she grasped the base, brought her lips to the tip, opened wide and sucked him into her eager mouth.\n\nIt was delicious. She loved the feel of his giant meat stretching her jaw. She loved the smooth skin sliding over her tongue. She bobbed her head on his rod, lost in the pleasure of sucking her teacher's giant erection.\n\n\"God damn, Brandi!\" Mr. Smith exclaimed, \"you can suck cock, girl!\"\n\nAs always, Brandi loved being called a girl. Mr. Smith's words, though, brought her out of her trance and she remembered the real reason she came. It wasn't just to suck his beautiful cock, although that would have been enough to satisfy her. No -- she didn't come just to blow him. She had another purpose in mind.\n\n\"Thank you, Mr. Smith,\" Brandi replied with an angelic smile, leaning back on her heels and stroking his massive tool with both hands. She leaned forward again to suck him into her mouth, and while she was bobbing her head she reached into the pocket of the vest, withdrawing a small tube of lube.\n\nBrandi flipped open the top and squirted a dollop into her hand, then rubbed her palms together getting them slick. She reached one hand under her skirt and lubed up her bottom, even snaking an oily finger in her rear to get herself nice and slippery.\n\nShe pulled off of her teacher's cock and gave him a wicked smile, fisting his rod in one oily hand as she lubed herself up with the other.\n\n\"I really appreciate the extra help, Mr. Smith,\" she cooed teasingly as they watched her glistening red fingernails slide up and down his monster cock. She giggled, \"do you think sucking your cock and jerking you off is going to help me on the test, Sir?\"\n\nMr. Smith shook his head in disbelief. \"I think you're going to ace the test,\" he croaked.\n\nBrandi smiled. \"Oooooh, I'm so glad to hear that, Mr. Smith,\" she teased, then leaned forward, wrapping her red glossy lips around the head of his shaft again. She pushed down, taking about half his length and then pulled up and off.\n\n\"Well, Mr. Smith,\" she said, rising up from the floor. \"Here's something else I need extra help with...\"\n\nBrandi stood up and straddled him, her plaid skirt spreading out over his lap. She squirted another glob of lube into her hand and grasped his rod, lubricating it from top to bottom. When she got him thoroughly oiled she placed one hand on his shoulder and with the other guided his fat, slippery erection into the crack of her ass. She then lowered herself down until she was sitting in his lap, his cock lodged firmly between her globes.\n\nOh, my God! Mr. Smith thought as he felt his student's oily ass cheeks gripping his cock. Brandi saw the surprise in his face and giggled. She was enjoying this immensely. Last time Mr. Smith was in total control, but this time Brandi was in charge. She swung her hips forward and back, sliding her crack over her teacher's oily rod, massaging his tool with her butt.\n\n\"Oooooh, Fuck!\" Mr. Smith exclaimed. \"God, damn Brandi! You are a fucking sexy thing!\"\n\nBrandi loved her teacher's excitement. Unable to wait any longer, Brandi rose up on her toes, lined the head of his pulsing missile against her tight, oily rosebud and lowered herself down. Brandi winced. It wasn't as easy as working Peter's cock into her ass, but not as bad as she thought.\n\nWhen Mr. Smith felt his rod jab against Brandi's back door he thought it was just an accident, a slip of the hip, but when he realized her true intention he was stunned. Is she really going to try this? Really?\n\nBrandi held still for a moment, closed her eyes and dropped down. There was resistance, but she wiggled and pressed a little harder until she felt a stinging pop as she opened up and the giant mushroom head penetrated her.\n\nHoly shit!! Mr. Smith thought, the tip of his cock in Brandi's vicelike, velvet grip. I can't fucking believe she's going to try to take me up the ass!\n\nWith the invasion underway, Brandi took a moment to breath and relax, trying to get used to be stretched wider than ever before.\n\nMr. Smith was panting with excitement. He had always wanted to fuck someone up the ass, anyone, but none of the many women or few men he had been with would even consider it once they saw the size of him. And there had been lots of them. When word got around about his size it seemed everyone wanted to try it out, at least once. He had fucked half the women in his college dorm and a dozen of the other teachers at school, along with a handful of horny men and women at his condo complex. They had fucked him and sucked him in every way possible, but none would ever try to take him up the ass. He had proposed it to some of his more adventurous partners, but most just laughed at the idea. Some even got angry.\n\nGiven that history, Mr. Smith was completely amazed that this young sexual novice was working his gigantic rod into her tight little asshole. Brandi groaned, leaning back with her eyes closed as she sloshed more lube onto his shaft and lowered down a little more, beginning the long, slippery journey of working her teacher's incredibly long, thick cock into her ass.\n\nShe lifted up and dropped down, a little lower each time, rising and falling, working more of his meat inside her with each stroke. When Brandi had about half his length lodged inside her she opened her eyes and looked into Mr. Smith's astonished face.\n\n\"Your... cock... is... so... fucking... big!\" she gasped.\n\nMr. Smith shook his head in wonder. \"You are amazing!\" he gushed.\n\nBrandi nodded appreciatively, struggling to relax.\n\n\"Are you OK? Does it hurt?\" he whispered, concerned.\n\nBrandi nodded. \"Uh-huh,\" she replied, \"but it's worth it.\"\n\nBrandi rose up again and went down further, pushing, gritting her teeth, panting and whimpering, straining to impale herself on the huge tool. Yes, it hurt, but she was determined to take it all. She realized she need something to take her mind off the pain.\n\n\"Play with my tits!\" she screeched.\n\n\"What?\" Mr. Smith replied in surprise.\n\n\"Play with my tits!\" Brandi repeated urgently. \"Play with my fucking tits!\"\n\nMr. Smith complied, pushing Brandi's sweater up to her shoulders and taking her firm, ripe melons into his hand. He couldn't figure out if they were real or not, but he quickly decided he didn't care. They were perfect -- shapely and soft, capped with puckered nipples that begged to be sucked.\n\n\"Harder!\" Brandi shrieked. \"Harder! Suck my tits!\"\n\nEager to comply, Mr. Smith leaned forward and sucked a nipple into his mouth as Brandi hollered and panted. He squeezed and groped and sucked her tits, alternating from left to right as Brandi moaned and gasped, working herself into a sexual frenzy.\n\nWith her attention distracted from the pain in her bottom, she rose and plunged again, short strokes up and down the thick cock in her ass, going deeper each time, holding Mr. Smith's head tight as he sucked on her breasts.\n\nBrandi was going wild now, rising and falling, sweating and grunting, cursing, pulling her teacher's hair with her painted fingers. Mr. Smith was equally aroused, sucking this crazed girl's luscious tits, listening to her wailing, his long cock almost completely enveloped in her tight rectum. It surpassed his wildest ass-fuck expectations.\n\nBrandi rose up one more time and dropped down, not stopping, descending completely until her bottom was pressed against his lap, her balls resting against his. He was in, all the way.\n\n\"Oh, my God!\" Brandi gasped.\n\n\"Fuck! I can't fucking believe it!\" Mr. Smith cried out.\n\nShe leaned forward and buried her head in his shoulder. They wrapped their arms around each other and held still, adjusting to their incredible coupling. Brandi breathed deeply, trying to gain her composure. Mr. Smith held perfectly still, afraid to injure her.\n\nAfter a minute Brandi leaned back and looked at him, glassy eyed, as if she was in a trance. \"You're... so... fucking... big!\" she panted, but as she spoke she lifted up, slowly, the long shaft slipping through the tight grip of her sphincter until just the tip was lodged inside her and then, with a deep breath, she slid back down in one smooth motion, completely burying his rod in her bowels.\n\n\"Oh, fuck!\" Mr. Smith howled.\n\nBrandi screamed. It hurt, but in some strange way it made her feel complete to take a huge cock up her ass. She loved it. She rose up and dropped down again, pistoning on her teacher's giant, well-lubricated boner, fucking him in his office at the end of the school day.\n\nAs Brandi bounced on Mr. Smith's cock her own erection was grinding up and down against his chiseled abs, which had also become covered in the oil in the frenzy of their joining. The office was filled with the erotic sounds of squishing and slapping of body parts, grunting and groaning, panting and moaning, set to the rhythmic squeaking of the swivel chair.\n\nThe incredibly tight grip of Brandi's ass on Mr. Smith's cock was sending him to the edge. Every time she rose up she paused for a moment, holding the head of his cock in her tight anal ring, as if she was edging him with her tight little anus.\n\n\"Oh, Fuck!\" he moaned. \"I'm gonna cum!\"\n\nBrandi felt his cock twitching and immediately began to pump faster and grind her cock into him harder, bringing them both to orgasm.\n\n\"Oh, Fuck!\" he moaned again, throwing his head back. \"Oh, fuck fuck FUCK!\"\n\nBrandi felt it deep in her bowels. The giant shaft was erupting, shooting spurt after spurt of warm cum inside her. She gave one last thrust against him, bringing herself to climax, shooting her spunk onto his chest and belly at the same time he emptied his balls into her ass. Finally, Brandi held still, feeling the last few spurts of semen shooting into her ass and out of her cock.\n\nBrandi slumped forward, resting against Mr. Smith, feeling him go soft inside her. When their breathing returned to normal she rose up, feeling his flaccid member slide out. She gave Mr. Smith a kiss on the cheek and grabbed her things.\n\n\"Thanks for the extra help,\" she giggled as she stepped out into the empty hallway."
    ],
    "authorname": "emelle78",
    "tags": [
        "crossdressing",
        "stripper",
        "anal sex",
        "crossdresser anal",
        "first time",
        "first time anal",
        "teacher"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/a-game-of-horse-pt-04"
}
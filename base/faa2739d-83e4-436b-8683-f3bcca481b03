{
    "title": "Brittany's Do-Over",
    "pages": [
        "Another little vignette from Seaborne High School... this isn't autobiographical, but it could be. Maybe. I'm entering it in Lit's Valentine's Day contest; make sure you read all the excellent entries and vote for your favorites.\n\n* * *\n\n\"So, you're looking great!\" She was, too; petite, fit, luminous, she looked exactly as she had in high school, sitting on the table in my classroom, swinging her dancer's legs. She smiled her gleaming smile.\n\n\"Thank you! You too!\"\n\n\"Aw,\" I replied, self-deprecating as always. \"Nah. I'm a slug this time of year.\"\n\nShe eyed me. \"No, you look fine.\" She was eating some of those cheese crackers shaped like fish, carefully, nibbling them.\n\nI glared at her. \"I'm eleven pounds overweight, Brittany,\" I told her severely. \"I don't like that.\"\n\nShe shrugged and went back to her fish. \"Well. Looks fine, anyway,\" she muttered under her breath, and that's the kind of interaction we always had. Friendly, open, easy, not a bit like the kinds of stilted and awkward conversations I sometimes had with other students. Oh, excuse me! Alumni. Brittany was well into college now, but she was one of those kids who still liked to come back to visit her favorite teachers. And it was painfully obvious I was her most favorite, but in fairness she was one of my favorite students, too.\n\nBut not like she became after Valentine's Day. Oh no, not at all.\n\n* * *\n\nI was always delighted to get a text from Brittany, though I didn't usually get them quite this late at night. Or, shit, this early in the morning: the text notification was waiting for me when I got up one dry day at the tired end of January, right after midterms. At work everything was new and hopeful, the poorer students revved up and focused on success during the new semester; that kind of determination lasted about two weeks, usually, sometimes three for the AP kids. I stumbled into the Lego minefield of my living room at five-thirty, chilled from my shower and still looking forward to coffee. Nobody else was up.\n\nNope. Motherfucker. One of the Legos got me after all.\n\nMy phone had two notifications, the first very short and the second long enough to require me to open up the app to read the whole thing. Both had Brittany's tiny picture next to them, the beautiful shot she'd sent me of the two of us from Prom, where she looked about thirty-two, her hand lying on my chest with what looked like casual possessiveness. I looked at the picture differently now, since New Year's, remembering her smell now, her lips, the supple little body hungrier in my arms than it had been during her many perfunctory hugs.\n\nI shook my head. It had just been a kiss, nothing more. And a ceremonial one, too, that first time: a nice, chaste New Year's kiss for luck between friends. Not the second, though. God, her lips, her passion...\n\nThe texts shimmered into life as I opened the downstairs blinds. The first had a winky-face emoji, along with the short question I'd seen before I'd opened up the phone. \"You up?\"\n\nNo, I thought in reply; she'd sent it at two in the morning. The next text needed two extra looks before I took it in. \"When has sex happened?\"\n\nThe fuck? She'd asked me weird, oddball questions before, always after that grave pause of hers, but huh? Was she drunk? I felt my eyes narrow involuntarily. I scrolled up; her last message had been an innocuous statement about a gig she'd had on the 12<sup>th</sup>, and then before that were the ominous New Years texts of ours, the emojis. The kissy ones. Nothing led up to this question.\n\nI frowned, then decided on something simple. \"Huh?\"\n\nAnd then I put the phone down and got ready to face my day. I can do that pretty easily; I didn't grow up with cell phones, so unlike my students I'm not obsessed with them. Besides, there were things I had to do: breakfast, then get Junie up, then Timmy, then their mother; that had grown more difficult over the years, my wife Steph napping more and more and sleeping later and later. Something to do with pregnancy and birth and, to be honest, laziness: her body needed an incredible amount of sleep.\n\nBut even as I puttered around, doing my well-rehearsed morning routine despite the Lego, I found that thoughts of Brittany kept sliding back in, like a kid peeking over a fence. There was no point, of course, in pretending she was just a normal alum, but then she hadn't ever been a normal student either: teachers who tell you that they view all their students exactly the same are lying to you. She'd been a grave but bright-eyed spark during sophomore Bio, then a smiling and eternally luminous junior in my forensics elective.\n\nBy the time she was a senior, Brittany had become the class vice-president, and with me as the class advisor and the class president being a shithead, we'd worked together closely. She was the kind of kid who spent her lunches and prep periods with me, conversing lightly about school and band and class events and life, her conversation far more mature than most. She had a way of pausing before she spoke, so that everything she said seemed... wise? Careful? Hard to say, but then Brittany was a hard girl to categorize.\n\nI called it the Brittany Pause, a vaguely intimidating look, always preceded by a small frown and followed by a profound question.\n\nIt had seemed natural, always, to treat her as an equal, to talk to her like I would a friend instead of a student. It had seemed natural to cuss in front of her, which I'd done one memorable day after a student council meeting, when I'd talked about how \"fucking stupid\" the class president was. She'd just smiled faintly, arched her fine brows over those massive grey eyes, and said nothing. And, eventually, it had seemed natural to exchange phone numbers, platonically, when she went away to college and kept checking in with me.\n\nOf course, her father was a colleague of mine, a history teacher. So she could have gotten my number anytime. But still. She wasn't the only former student who kept in touch with me, but she was the only one who had my number.\n\nShe was also beautiful, luminously and lustrously beautiful, lovely in that special ethereal way you see in Victorian art. She didn't seem to realize it, or if she did she gave the impression of not caring very much. But she had to know. In a school full of gorgeous women, teachers as well as students, she had something extra that set her apart. Long hair? Short hair? It didn't matter; she looked stunning either way. Glasses? No glasses? That didn't matter, either. There were days she dressed carefully, her fashion choices always tasteful and understated, but other days she showed up in an old sweatshirt and yoga pants: either way, it didn't matter.\n\nI do try hard not to look at my students in any kind of a romantic or even emotional way, but let's face it. An attractive woman is an attractive woman. And Brittany was among the most attractive women I'd ever met. She wasn't sexy, really; you didn't look at her and want to bend her over a desk. But you looked at her and wanted to walk around with her beside you, drawing jealous stares and admiring glances.\n\nBut as I dropped Junie off at second grade that January day and headed in to work, I really wasn't thinking much more about her early-morning text... until my phone warbled when I was halfway there.\n\nI waited until I was on a long, straight stretch of road, and then glanced down. Again, Brittany's smiling tiny face. I frowned while I dug through the pre-six-a.m. memories of what she'd texted, and then I snatched up my phone and thumbed it to life.\n\n\"Damn,\" she'd texted. \"I can't believe I texted you that.\" I smiled faintly. She'd put the apostrophe into can't. Brittany always used good syntax when she texted; this was unusual among her peers, many of whom had even started using textspeak in their school work lately. Just last week I'd graded a midterm with LOL in the middle of a paragraph on mitosis. The little dots on the smartphone screen told me she was typing more, so I set my phone down and watched the road for a change. Long, streaky lines of white reflectors zipped past as I crossed the marsh, and just as I neared the stoplight at the end of the causeway my phone vibrated again. I glanced over.\n\n\"Drive faster, Daddy,\" Junie advised from the backseat. Her school was just ahead, so I didn't pick up my phone until I was in that long, painful line of parental cars, inching forward to dump our children into their educational mill for another day. The phone screen glowed.\n\n\"I was out with someone last night, and needed some advice, but now it's all awkward.\" The next text materialized even as I watched. \"Forget I said anything.\"\n\nI paused. She'd be expecting a witty retort, like usual. \"You didn't,\" I replied. \"You typed it.\"\n\nThere were long minutes of silence after that, as I kicked my kid out of the car and at last aimed myself for Seaborne High School down the street. I was nearly there before my phone warbled again. \"LOL.\" She was being ironic, I knew. I waited for more as I pulled into my space. \"I'm telling you, it's awkward. I should have texted someone else.\"\n\nI parked and finally had both hands available. \"I'm the most awkward person I know,\" and I'm not, not really, but it's the kind of thing I say to my students. Even the graduated ones. \"Try me.\"\n\nShe didn't. Not then, anyway, and I wasn't surprised. Brittany is the sort of young lady that signs up for eight a.m. classes, and then actually goes to them. She was undoubtedly busy. I meandered through my morning lesson on blood spatter. The forensics elective has always been popular, especially since I'd decided none of the content really mattered very much. So I taught what I felt like teaching, or rather what I knew the kids felt like learning. It was funner than bio, honestly.\n\nHence, blood spatter.\n\nBrittany selected email for her next message; we'd communicated that way for months, lightly, before we'd given up and swapped numbers. It just seemed to make more sense. But when she had a lot to say, Brittany went ahead and resorted to email. The subject line, glimpsed as I headed for the lunchroom, gave me pause... HELP ME, OBI-WAN KERSHAW!\n\nShe knew I loved Star Wars.\n\nThe body of the email, which I took in leaning on the fridge in the faculty lounge, was shocking. Typically, it started abruptly and used impeccable punctuation.\n\n\"Speaking as a biology teacher, at what point has sex occurred? Recent experiences have confused me. Is it when the penis goes into the vagina just a little bit? When it goes in more than halfway? When it goes in all the way? When it stays in for a certain amount of time? When it ejaculates (I think that's the word)?\n\n\"Like I said, awkward. But you said to try you, so here.\"\n\nAnd, at the end, the obligatory, \"I'm asking for a friend.\"\n\nJesus. \"Recent experiences?\" Why was she asking me this? Didn't she have girlfriends she could discuss penile insertion with? I muttered a sighed \"Motherfucker,\" ignoring a sharp look from cranky old Mr Yamaguchi at the other end of the lounge, and wondered whether I should reply at once, or at all.\n\nPlainly she wasn't really asking for a friend. Obviously she'd texted last night, when she'd been \"out with someone,\" and had found herself with a cock wedged at least partway into her. And now she wanted to know whether she'd \"done it.\" Huh. A part of me was perplexed, but a larger part was already analyzing the question and realizing I didn't really know the answer. But the largest part of me was proud that she'd actually thought of me when she needed to ask.\n\nAnd a shadowy little secret part of me couldn't shake the image of her taking a dick.\n\nI let the phone screen go dark and walked slowly back down the halls to my classroom. I couldn't answer at once, clearly; I felt like I should wait a half an hour or so, then text back something jokey-but-serious, before actually replying for real. Meanwhile, I had some thinking to do. Because, from a biological standpoint, it was actually an interesting question... but plainly, no matter how she'd started off her email, she wasn't really asking me as a bio teacher.\n\nI was aware that some kids saw me as some kind of father figure, or more like an uncle. It had been a weird feeling at first, when I'd started teaching twenty years ago and students had begun to hang out in my room after school or during lunch with strange questions and concerns. Inevitably, most of those students were girls, the kind that had trouble fitting into Seaborne's usual cliques, which was of course why they were talking to a wisecracking, nonthreatening biology teacher.\n\nOccasionally, I heard scattered hints of deeper, less offbeat questions and worries, but I always stressed during my lesson on research ethics that teachers are obligated reporters, and that you should be careful what you say to them. But there was no denying I was seen as a safe person to ask about these kinds of questions.\n\nBut this? This was the daughter of a coworker, a girl who had to know she was one of my all-time favorites, a girl I'd actually exchanged phone numbers with. And what was she asking me about? I think she was asking about whether she'd lost her virginity.\n\nThis was a new one for me, so I plunged into my second period repeat of the blood-spatter lesson for the other forensics section and tried to forget the email. But alas, I couldn't, and the moment the bell rang I swept my phone out of my pocket. It had vibrated halfway through class, but of course I wasn't about to check it in front of the kids. And there was the thumbnail contact photo of Brittany Taylor's face.\n\n\"Did you get my email? Just checking.\"\n\nWell. So she'd been serious enough that she was dwelling on it. \"Asking for a friend,\" my ass. I guess, as I thought about it, that I could understand her urgency; as soon as I'd lost my virginity it had been pretty obvious, but I could imagine how I'd feel if it hadn't been. But she deserved a reply, and in my haste I grasped at the subject matter I'd been teaching all morning. \"I got it. I'm researching the answer. Was there any blood? Afterward?\"\n\nI sent it off quickly, before I could second-guess it or worry much about it. Her text reply came back quickly. \"Yes.\" A lengthier pause, then, \"According to my friend.\"\n\nSure. Right. Her friend. And I couldn't stop myself, with more than a hint of prurience, from asking some follow-ups, even as my next class was filing in for bio. \"Ejaculation?\"\n\nAgain, quick. \"No. That's why I'm asking; that would have been obvious. It was only like two inches in.\" Again, that damning pause. \"She says.\"\n\nDoes she indeed. I waited, quickly replied, \"More later. I have a class,\" and then with a slightly trembling hand I slipped the phone back into my pocket. I shivered, surprised at my own emotions; not excitement, really, nor anxiety. But it was weird and sudden and thrilling all at the same time, and I wasn't sure how to handle it.\n\nWe'd had moments like this before. I remembered the time she had planned out the Valentines' Dance Faire, impressing me with her efforts; even more impressive, in a different way, had been her demeanor as she and I stood off to the side during the event.\n\n\"Well,\" she'd murmured at my elbow, \"I'd say this is a smashing success.\"\n\nIndeed. I couldn't say much, though, for it was entirely her success, not mine. Brittany had marshaled all her friends, mostly band geeks and other assorted reprobates from the drama stage crew she worked with, to throw the whole thing together. The rest of the class officers, from the president on down, seemed perplexed by how nice everything looked, but like politicians everywhere they pretended they'd done everything themselves, and happily took all the credit.\n\nThe school's gym was now a fairyland of hearts, lace, and little baskets full of valentines' cards. The event, traditionally held by the junior class, was a combination fundraiser and dance, with parents strolling along at a silent auction while their offspring cavorted to the thumping beat of a hired DJ. Brittany had paid her friend Brad Slotnick to act as Cupid for the evening, and the poor young man had been far too smitten with her to say no. She had him waddling around with a toy bow and arrow made of foil-covered cardboard, with glittery wings pasted to his back, wearing nothing but a loincloth. He drew his share of appreciative whistles and catcalls, and in fairness he looked nice enough, all sinews and skinniness; he ran cross-country in the fall.\n\nI didn't ask what she'd offered him, but I suspected later.\n\nPeople looked happy, or at least interested; more important for my purposes, they were bidding at the silent auction. Classes spend four years fundraising to pay for graduation and offset the cost of the prom, and after all that gets paid out the advisor's stipend is authorized. Classes who sucked at fundraising produced advisors who worked gratis, and who never took on the job a second time.\n\nOut on the floor I saw arms and legs swinging around in that weird, arrhythmic movement that seems to pass for dancing now. The class was not dumb: they were not twerking, not yet. I pointed that out to Brittany as we stood off to the side and watched the fun. She responded with her rare, high-pitched laugh.\n\n\"They'll start the dirty stuff once the parents leave, Mr Kershaw,\" she assured me softly. She often spoke like that, with quiet and gentle certainty. It made her sound like an oracle. \"There'll be plenty of opportunity to step in and prevent undignified acts.\" She looked at me through her lashes, thoughtfully, and I smiled back.\n\n\"This class of yours...\" I let my voice trail off. We'd spent many lunches discussing the various tomfoolery her classmates got themselves up to. Her class was famous for getting caught drinking, then charming the cops into taking them home without arrest. The parents, predictably, did nothing.\n\nNaturally, nobody ever had those kinds of problems with Brittany Taylor.\n\n\"Most of them don't dance well,\" she observed critically. She'd spent her whole life taking dance lessons. I'd seen her at some kind of community event, a recital for the kids at the junior high. Like an orientation. She'd gotten up and, with the school's jazz band doing the honors, launched into a pasted-smile tap routine that she clacked through with her usual tedious excellence. She was good at everything except, apparently, math and AP English. And French. Brittany stood well down the class list despite her many talents. I'd looked left and right at all the teachers, and all of us but her dad were gaping. He was merely thinking of how much all the lessons had cost.\n\n\"Feel free,\" I blurted, jerking my head toward the dance floor. \"Show them how it's done.\" And then Brittany turned her frank grey eyes on me, unreadable as ever, and did her famous Brittany Pause before she answered me.\n\n\"Are you asking me to dance with you, Mr Kershaw?\"\n\nI'm not smooth. Like, not at all. In no way. I courted my Steph on a wing and a prayer. But I'm a teacher, which means I can sound smooth. \"You dance better than I do, Brittany,\" I rapped straight back. \"You'd need to lead me.\"\n\nShe smiled, little dimples in her little face, but she wasn't serious. So we'd stood together easily, calmly, scanning the success she'd made of the Junior Valentine's Dance Faire, and I'd sighed knowing my stipend was safe, a light at the end of the tunnel. \"Oh, I'd lead you,\" she'd replied with a quiet shrug, but then Ms Therrien's therapy dog had knocked over one of the silent-auction tables, and suddenly there were bigger fish for me to fry. We never did pick up the conversation.",
        "So this wasn't the first time Brittany and I had breached the sort of carefully staid barrier a lot of teachers put between themselves and their students, and vice-versa. But this was taking it to a whole new level.\n\nI don't think I taught very well that day.\n\n* * *\n\nI got Timmy to bed at 8:30, and at last I was able to settle on the couch and watch basketball. Steph was out late, having yet another interminable client meeting, and my phone had been rattling all evening on the side table while I amused the kids. I snatched it and woke it up.\n\n\"Are you done researching?\"\n\nA smiley emoji floated at the end of the sentence, but she'd sent about three question marks after that, spaced maybe ten minutes apart. I stared blankly at the phone, and scrolled back up a bit to remind myself what she was talking about. Ah, yes. I'd lied and told her I was researching virginity. I rolled my eyes at the stupidity of a line like that, especially when I was sure she hadn't believed it. She'd assumed I was ducking her question, which was pretty fair on her part. Since I was.\n\nI sat down, kicked up my feet, and thought about how to go with this. It was obvious that the responsible move was to not engage in a sex-based conversation with a former student less than half my age while my wife was away; put that way, the whole thing seemed really disgusting. But it didn't feel that way at all. This was a young lady of gravitas and thoughtfulness, and I'd gotten to know her so well over the years...\n\nSo, of course, I texted back. \"Yup. Does your friend feel like she had sex?\"\n\nA pause, the Brittany Pause, and then an unexpected hedge. \"Maybe. Hard to tell. I feel like something happened, but I'm not sure how to define it.\" Another wait, my phone jiggling in my hand with the sound muted. \"I mean, she.\"\n\nI smiled tightly; I'm not sure why. I subsided into technicalities. \"Penetration is sex, but there's an emotional side too. If she doesn't feel like it?\" I slapped a \"shrug\" emoji onto the end of it and let my decision go swooping off into the world, flying toward her phone far away at college. And then I set my phone on my thigh and watched vacantly as the basketball game went on, because if anything else happened now, it needed to be about her.\n\n<br >This was wild. And, as expected, there was a long wait for her response; a woman as deliberate as Brittany would be typing, backspacing, reconsidering, proofing, and finally deciding; her reply came back after nearly six minutes. \"She feels like she's still a virgin, but she knows she isn't.\"\n\nInteresting. I made myself wait, even though the reply was obvious. I was still tapping it into the smartphone's blank face as she sent a follow-up that made my mouth fall open. \"She thinks she liked it a little, is the thing.\"\n\nI backspaced frantically; I'd been about to tell her there was nothing to worry about, that these kinds of conflicted feelings were natural. Instead, I slapped out something more appropriate. \"Well, she's supposed to like sex. Most people like it a lot.\"\n\nThis time, her response was swift. \"See, she thinks she wants to try again. She didn't really know the guy.\"\n\nShe'd be expecting something light now. A fast reply from her, verbally or on the phone, usually meant she was comfortable with how things were going. \"At least she knows two inches of him now.\"\n\nA dry response from her, a very ironic \"LOL.\" She was always being cynical when she used abbreviations. I waited for more, and wasn't disappointed. \"She wants me to point out that she was being careful. I guess her mom made her go on birth control. She had weird periods.\"\n\nI sighed. Years ago she'd asked me, as her bio teacher, a number of questions about menstruation, and it hadn't been hard to guess she was trying to figure herself out. I'd given vague answers then based not on my biology degree, but on living with my wife. I shook my head, as I often did when I was talking to her, and I imagined she was sitting across from me eating her bagged lunch in my classroom. \"Well, she sounds like a very sensible girl who's just exploring something new. Tell her these are normal questions, and that she should just do what she feels comfortable with.\"\n\n\"Thank you,\" she sent back immediately, and then it was time for a subject change in her usual abrupt manner. \"Are you chaperoning the Valentine's thing again?\"\n\nI smiled despite myself. \"Always.\" This was true; once you're a class advisor, there's a sense that you have to support other class' advisors. Class advisors are a small fraternity of suckers, but we're close. I waited a few more minutes to the blaring noise of the halftime dancers on the TV court, counting the minutes until my wife was due home, but when my phone no longer vibrated I shrugged and put it back on the little table.\n\nIt didn't vibrate again until much later, after I'd brushed my teeth and had my nightly dose of small talk with Steph, the mundane details of her life with insurance clients clashing softly against the totally unrelated concerns I had at school, neither of us paying much attention but still comfortable with the routine, the familiar hugs and the gentle kisses on the foreheads of half-awake kids. When we went to bed these days there was never even remotely any question of fucking, my needs in that area being taken care of with occasional porn. Hers seemed to have gone away as soon as she'd given birth the second time; she'd never had much of a sex drive to begin with.\n\nBut I was plugging my phone in when it jumped in my hand, Brittany's picture popping back up; I turned instinctively to make sure Steph wasn't watching, but she already had her contacts out. So I could have replaced myself with a fucking cardboard cutout at that point, and she wouldn't have noticed it clearly. Brittany was replying to my message of over an hour ago as if I'd just then typed it; ah, the wonders of modern communications. \"Maybe I'll see you there, then.\"\n\nWhere? I scrolled quickly up to remind myself what the hell she was talking about. \"The Valentine deal?\"\n\nSteph was burrowing into the sheets when the reply came. \"I'll be home for a family thing. I'll find time to visit you.\"\n\nI frowned a moment and wondered whether I should banter, and in the end I decided there was no harm. We often did that. \"I haven't seen you since New Year's. I've been in withdrawal.\" I'd already sent it before, horrified, I realized how easily she could see that as a flirt; my mind suddenly remembered just what had happened when she'd come to see me in the science office after New Year's, what we'd done...\n\nI was trying to decide whether it would be worse for her to reply or not when she solved the problem for me, by sending in a last text. \"Me too! Off to bed.\" And then, incredibly, a kiss emoji, the bright lipsticky one they'd added on the last software update.\n\nThe phone nearly jumped from my hand on its own; I had to stop this. Enough was enough. The thing stayed quiet the rest of the night, but I was flipping and flopping around in my sheets like I had a live wire attached to my spine.\n\nAnd at some point I dreamed, remembering. I don't usually have vivid dreams, but this one was a memory: me and her in the science office last month, her visiting just after New Year's, the innocent and ironic kiss merging into the other one, the one with tongues and moans and a hint, just a hint, of her hand descending toward my ass as we held each other. But, in the dream, there was no knock on the door as Ms Ferrick came in, no safe interruption before things went too far. Or at least, any further than they already had. No, in my dream, they went quite a bit farther than that second kiss, and when I woke up in the middle of the night I had to change my underwear.\n\n* * *\n\nI got one more text from her, at the end of the second week of February, asking whether I was still going to the Faire. I said yes, and asked her how college was going. \"Fine,\" she replied. \"It's snowing here.\"\n\nShe often mentioned snow; we didn't get any where we lived, and it was new to her. I laughed. \"You'll be okay,\" I sent back. \"Just avoid anything cold and wet.\"\n\nA pause, then her reply. \"I'm trying hard. My roommates and I are sitting around drinking Irish cream.\"\n\nI threw out the emoji with the shocked face. \"You're underage, Brittany.\"\n\nShe sent back a photo, a selfie of her cute face scrunched up under a ski cap, sticking a pink tongue out at me. A big plaid blanket was pulled up above her shoulders. \"This is college, Mr K. And so what? It's cream from Ireland. Who says it's alcohol?\"\n\nI let that one go; I was grading lab reports. But then the phone chirped again, and I glanced over. \"My roommates are laughing at me. They don't think I'm texting a teacher. You need to send a pic so that they can see you.\"\n\nFuck that. \"I'm working, Btittany.\"\n\nAnother pause, longer, and then she replied briefly. \"I'll have to do my best to describe you, then. Have fun.\"\n\n\"Whatever.\" But I did, after long thought, include an emoji. The kissy one. It was something she and I had been doing for awhile, after she'd done it once at the end of a message and claimed she and her friends always did it. For months we'd tacked it automatically onto our texts, but then it had taken on its more dangerous tone at New Year's. This time, it took a few extra moments before she sent one back.\n\nAnother Brittany Pause.\n\n* * *\n\nLucas Sanders was the current junior class advisor, and he was beside himself as this year's Valentine's Faire began. He's sort of a stresspot anyway, but it seemed to me that being put in charge of something like this was too much for him, and he didn't have a competent class officer like my Brittany to set everything up for him. He was consumed, as people began arriving, with a million little details the students should have been taking care of, but I was the first chaperone to arrive and he was relieved to see me. He drew his tall self up, ran a hand through his long hair, and smiled haggardly. \"Thanks for coming, Ken.\"\n\n\"No problem.\" I sauntered into the gym and scanned around, the early arrivals meeting my eye with varying levels of friendliness, curiosity, or flat-out indifference. There were parents to greet, alumni to hug, and fake compliments to hand out over the weird little art objects the locals had made for the silent auction: Seaborne is known for its kitschy seashell art, which sold briskly in the summertime, so there was a bunch of that. But why the Seaborne artisans would think fellow locals would bid high on something like that was beyond me.\n\nThe other chaperone was Shannon Boyle, who I didn't know well; she taught history, or economics or something. There were rumors about her, but then there are rumors about a lot of teachers. Most aren't true. But Boyle was certainly pretty, I'll admit. Super-fit, too, with a well-known obsession for crossfit or Spartan races or something similarly trendy. She ran the school's Fitness Club. She waved morosely at me from across the room, and the two of us settled into the usual chaperone posts near the corner exits. We'd both been advisors before; we knew the game.\n\nI was supposed to be watching the gaggle of dancing kids and serving as a human FAQ for the grown-ups, but I spent most of my time watching the entrance, where Brittany had told me she'd appear \"around seven.\" That meant, to her, at seven; she was always prompt.\n\nThen, finally, the hands of the clock moved, and my eyes went one more time to the door, and there she was at the ticket table.\n\nShe stood there in her frequent uniform, yoga pants and a shirt small enough to expose a rind of pale skin at her waist anytime she moved. The sleeves were short, the fabric thin, the neckline low; it was a pale grey that went with her eyes. Her bra straps were prominent underneath, dark and wine-red as they peeked out of her shirt at her left shoulder, though her sleek little body didn't really have much in the way of breasts; her outstanding feature, other than the huge and luminous eyes in the high-cheekboned face, were a pair of smoothly proportioned legs that started at her compactly swelling hips and tapered to a tiny pair of size five feet, enclosed this evening in sandals. The yoga pants were black and showed her shape as though they'd been painted on, which was the reason why girls wore yoga pants in the first place.\n\n<br >As always, I made sure I watched her eyes carefully as I approached. Every woman I see, very soon after I notice them, gets a careful full-body inspection; so, I assume, does every man seen by every woman. You can't escape evolution. Brittany was clever and attentive, though, and she was a former student and sort of a friend, so I didn't want her to see me examine her. Even though I often had, anytime I was sure she wasn't looking.\n\nIt made me feel just the slightest bit guilty. Dirty, even. But she was a lovely lady, and I just couldn't resist.\n\nNow she approached wordlessly, like always; a smile appeared on her thin little face and grew as she came, until by the time she reached me it was a broad grin. \"Hello!\" she sang, both our arms already opening, and then she gave her unusual hug, the one that involved full body contact. 99% of the world hugs from the waist up; Brittany Taylor was the other 1%, at least with me. I felt her sigh slightly as her supple body came under my hands, and she spoke into my chest. \"Nice to see you!\"\n\n\"Nice to be seen!\" She was a sweet armful, like always, but we were in public. I patted her back and then we both stepped back. \"You look great, as always.\"\n\n\"I try,\" she replied modestly. She had her glasses on tonight, and her thin ashy hair was in a high ponytail. She'd outlined her skinny lips in a dull, winy red like her bra, and she looked fresh as a daisy. \"Happy Valentine's Day,\" she went on.\n\n\"Back at you.\" I knew I was grinning too, the pair of us just really happy to see each other. It was nice. \"Did you get me a card?\"\n\n\"Better.\" A little purse swung from her wrist, and her face took on an absent expression as she burrowed within. She licked her lips unconsciously as her hand emerged with a tube of Rollos. \"Your favorite.\"\n\n\"You know me too well.\" I was not surprised; she usually brought me those. This time, though, she glanced around the gym until she saw a little paper heart taped to a table. She removed it carefully, stuck it on the Rollos, and held it out.\n\n\"Be mine, Mr Kershaw.\" The smile was softer now, warmer, and I rolled my eyes as I took it.\n\n\"Why not?\" I rapped back. \"You're the best choice here, for sure.\"\n\n\"Aww.\" She winked. \"The Booster Club is selling hot chocolate and stuff over in the corner. Can I buy you some coffee?\"\n\n\"No,\" I replied, starting for the Club's booth, \"but I can buy you some.\" She fell into step beside me.\n\n\"Tea, please,\" she said easily. \"Coffee gives me heartburn.\"\n\n\"Well, we can't have that, can we?\" I muttered at once, smiling down at her. \"You'd be useless with an upset stomach.\" Brittany had been sickly when she was a freshman, and she'd always blamed her stomach.\n\n\"Useless for what?\" She smiled her quick smile. \"Acid reflux wouldn't keep me from putting in a $24 bid for some fucking seashells.\"\n\nI laughed loudly, delighted, and she giggled in reply, and there we were like a couple of nice people saying nice things to each other, not a hint of deference in her or superiority in me; she never, ever acted as though she'd been my student. \"Not so loud, Brittany,\" I told her, complete with a wagging finger. \"You'll offend the vendors.\"\n\n\"Then I'd be an ovvender.\" Jesus.\n\n\"I've missed you,\" I blurted, and she rewarded me with another grin.\n\n\"Same. You don't really need to buy me tea, Mr Kershaw.\"\n\n\"What kind of guy lets a guest buy the drinks?\" I shook my head. \"You've moved away. You're visiting now, remember.\"\n\n\"I have.\" She shrugged. \"Only temporarily. I'm sure I'll come back here after I graduate.\"\n\n\"Your fans will be relieved to hear that,\" I smirked. \"Or, at least, this one.\"\n\n\"The only one who matters,\" she nodded, and she was flushing as she said it. \"I'll get us a table. Earl Grey, please.\"\n\n\"Sure thing.\" Why was I like this around her, I wondered. It was like I was her age, but that was because she acted like she was mine. Weird. I waited at the little mock bar they had set up, two smiling parents serving up paper cups. \"A coffee and an Earl Grey.\"\n\n\"No problem.\" The smaller mom was helping me, a pretty woman I'd never met. \"You're Ken Kershaw, right? The science teacher?\"\n\n\"Guilty as charged.\" I was rummaging through my wallet. \"I'm bad with names; have we met?\"\n\n\"No.\" She was preparing the drinks smoothly, without even looking. \"My son wants to take your forensics class next year. He's heard a lot about it.\"\n\n\"I'll try to disappoint him.\" We laughed, her a little uncertainly, and my coffee came gushing from the thermos. \"Thanks.\"\n\n\"Sure! The coffee came from Harborside Book and Tea, so you know it's good.\"\n\n\"I'll bet.\" She smiled, dimpling, as she took my money, and I was surprised when her eyes flickered up and down my body. I'd never noticed that kind of thing when I was younger; if I had, I was sure I'd have gotten laid more often. \"Thanks again.\"\n\n\"Happy Valentine's Day!\" She winked and then she was on to the next customer. For my part, I balanced everything and then headed into the seating area. Five little tables: Brittany was not difficult to find, and not just for me. As I crossed to her, I saw that she was talking to another alumna, Melissa Southern. They'd graduated together, and I thought Melissa had also been in the marching band with Brittany.\n\n\"Holy crap!\" Melissa broke into a wide smile when she saw me. She was a pretty girl, tall and curvy, already putting on the college weight that Brittany seemed to be avoiding. \"Mr Kershaw? Hi!\"\n\n\"Hi, Missy. Nice to see you,\" but she was looking back and forth between Brittany and I. She'd noticed the two cups. \"How are things going?\"\n\n\"Fine...\" she sang it out slowly, playfully. \"Brit, I didn't think you'd be here,\" she went on. Brittany disliked being called Brit. \"Did something special bring you back into town for Valentine's?\" She flickered a glance back toward me.\n\nBrittany smiled politely up. \"Family stuff. It's my little cousin's birthday, and I'm his godmother, so...\" I just stood there like an idiot, and once it grew too awkward I just pulled my chair out with my foot and sat down across from Brittany. Melissa just stood there, chewing gum.\n\nShe looked meaningfully from Brittany to me and back to Brittany. Her grin widened and became crafty. \"Well,\" she drawled softly, arching her back just a bit, \"I can see the two of you are catching up. Don't let me be the third wheel,\" she winked, patting Brittany on the shoulder as she swung away back into the silent-auction crowd. \"See you, Mr Kershaw.\"\n\n\"Bye, Missy,\" I called after her, frowning a little. Brittany was prodding at her tea with her spoon. \"What the fuck was that all about? She was acting like we were on a date here,\" I muttered, and then I felt my mouth drop as Brittany looked away. \"What?\"\n\nShe pouted for a moment, and then those big grey eyes swiveled back toward me like ships' guns, now a little mischievous. \"She's one of my contacts on Pixboox,\" she explained quietly. She set her spoon down with a little clink. \"I posted on there about our kiss.\"\n\n\"Wait.\" I gaped at her. The Faire around me seemed to mute suddenly, the air heavy. \"You posted on the Internet that we kissed?\"\n\nShe smirked, her eyelids innocently high. \"What? I didn't make a big thing of it. It was only a New Year's Eve kiss, Mr Kershaw,\" she pointed out. \"Nobody thought it was any big thing.\" She winked. \"A lot of my friends were jealous about it, though. But I told them you'd probably give them a kiss too, if they asked for it.\"",
        "\"Jesus fuck.\" My life flashed before my eyes, but not too dramatically. I was merely afraid of getting fired, or maybe divorced. \"I can't believe that.\"\n\n\"You can't?\" She arched a plucked eyebrow, still smiling. \"A lot of my friends think you're attractive, Mr Kershaw. I might as well be the one to tell you.\"\n\n\"No, dumbass. I meant I can't believe you posted it on the Internet!\" My coffee, forgotten, trembled as my knee twitched nervously under the table.\n\n\"Dumbass? Come on, Mr Kershaw.\" She shook her head, but she looked away again. She was trying to decide whether I was pissed or not; she was wondering whether she should have kept her mouth shut. When she looked back, at least there was a guilty look in those eyes. \"It was just a kiss on New Year's. People do that. It doesn't mean anything; it's a folk custom.\"\n\nI was staring hard at her; I could feel my face getting hotter. \"What about the second kiss?\"\n\nThis time, Brittany was starting to blush too. \"Well. Yes. I didn't post about the second one.\" We both went quiet for a moment, remembering, staring vacantly across the gym at where the parents were thinning out, the kids getting rowdier by the DJ. She glanced over as I kept my mouth shut. \"What? Come on, Mr Kershaw. You know me better than that.\"\n\n\"I thought I did.\" I reached for my coffee then, but I didn't really want it anymore. How many other kids knew? \"You kids get yourself in trouble posting shit on the Internet all the time. Don't drag me into it.\"\n\n\"Well.\" She shrugged. \"It's done, and trust me, it's no big deal. And my friends don't know about the second kiss. Nobody does.\" She gave me a sidelong glance. \"Do they?\"\n\n\"No,\" I replied firmly. \"And nobody needs to, either.\"\n\n<br >\"Right.\" She sighed and sipped at her tea. \"It's like we said at the time. We just got carried away.\"\n\n\"Sure.\" I frowned, and then the silence got awkward, and I just couldn't let it stretch. My stupid mouth just had to fill the gap in the conversation. \"It was a damn good kiss, though.\"\n\nShe didn't hesitate. \"Hell yes,\" she nodded fervently, and when she looked back at me she was smiling again. Such a nice, warm smile; I felt, sometimes, that I was the only one she did that for. And that's when my coffee started to taste better. I'm not sure why I went to the subject, but it was surely the elephant in the room. I looked carefully down at my shoes. \"So, is everything okay with your friend?\"\n\nShe stared across at me, her eyes very wide behind her glasses. \"What?\"\n\n\"Your friend.\" I was trying to sound nonchalant. \"The one you texted me about last month?\" She was shaking her head, clueless. \"The, uh, the one with the sex question?\"\n\nShe went instantly and obviously red. \"Oh!\" Her hand flew to her mouth. \"Oh. Sorry. Yeah. She... yeah. I'm sorry. I never should have asked you that. I feel like an idiot.\"\n\nI flapped my hand dismissively. \"Don't worry about it. To tell the truth, I was happy to help.\" I finally looked at her. \"Everything okay?\"\n\n\"Yeah, yeah.\" She was calming down slowly. \"Everything's fine. You were, like, super-helpful. Thank you.\"\n\n\"It was nothing.\" I'm not sure why I kept going. \"So, what did she decide? Was it sex?\" I was keeping my voice down, but there was a perverse thrill in discussing this here, in public. I leaned in. \"I have to know whether my research worked out.\"\n\nShe nodded and wiped at her lips with the little paper towel her tea had come with. \"Right, right. Well... she's still not sure, I think. I don't talk to her much about it anymore, really.\" She met my eyes again, bolder. \"She hasn't tried again, though, so it's still an open question.\"\n\nI felt my eyebrows rise. \"Why not? I mean, is she worried?\"\n\nBrittany shrugged, a quick twitch of her fine little collarbones through her low neckline. \"I wouldn't say that. I think she just got a little... I don't know, sketched out? Like, she didn't want her first time to be some random hookup.\" She arched an eyebrow. \"And then it was, and I think she kind of wants a do-over.\"\n\n\"Shit. Like a mulligan? Like in golf?\"\n\n\"Sure.\" Brittany was no kind of athlete, so she had no clue what a mulligan was, but I guess the context was clear enough. \"A second chance. Only, you don't really get to lose your virginity twice, do you?\"\n\nI looked down at my coffee. \"I guess not.\" I remembered mine, and clearly... to my wife. She hadn't been my wife yet, and I'd been old at 24. \"Does she... I suppose she feels pressure? Peer pressure? You know, to lose it?\"\n\nShe stared at me and shook her head slowly. \"God, Mr Kershaw, you're as bad as my father. You guys have no clue what it's like to be young these days.\" She chuckled. \"Peer pressure. Look, I went through most of my high school years trying to lose it. Everyone does. And then it doesn't happen and, well...\" She paused, rewinding her words and realizing what she'd said, and when she rebuilt her eye contact with me it was a slow, lidded rise of her eyes, now a little troubled. \"I mean, she went through those high school years.\"\n\nI smiled, gently I hoped. \"Your friend.\"\n\n\"Exactly.\" She knew I knew, though, so there it was. We both sipped at our drinks, and when she changed the subject, she didn't change it enough. \"So apparently, you've been worrying about New Year's?\" She asked it with fake carelessness. \"Was that a little weird?\"\n\n\"What, the kiss?\" She colored again.\n\n\"No...\" she said slowly, and then her eyes were straight on mine. \"The other kiss. You seemed scandalized when I told you about Missy.\"\n\nI shrugged. \"Like you said. Like we said, at the time. We got carried away.\"\n\n\"Right.\" The tea was just about done. I felt like I needed to say more.\n\n\"I shouldn't have done that with you, Brittany. It put you in an awkward position, and I'm sorry.\" But I fucking loved it, I didn't say.\n\nShe put the cup decisively back onto the table. \"It didn't feel awkward, though.\"\n\n\"It sure didn't,\" I nodded. It hadn't, either; it had felt totally natural. Like, disturbingly natural. \"It felt right.\" I said it so quietly I wondered whether she'd heard it, but I needn't have. She was listening closely.\n\n\"We shouldn't discuss this here,\" she said simply. She nodded sideways, to where Melissa Southern was watching from across the room as she pretended to help her mother sell seashell art. \"Will you get fired if you take a little break?\"\n\n\"You mean take off? Have a chat?\" I felt my heartbeat quicken, but I didn't want to misinterpret anything. \"I'd love to.\"\n\n\"Just not in the science office.\" She was staring straight at me now, very serious.\n\nI shrugged, feeling reckless. \"I don't know. I don't think anyone will bother us there.\"\n\n\"Someone did last time,\" she pointed out at once, and then she shuddered slightly; true. In the days since New Year's, I'd wondered many many times what might have happened in that cluttered little office if Connie Ferrick hadn't come barging in to use the copier.\n\n\"True. So maybe not there,\" I suggested tentatively. She was watching me now, hanging back, but her face showed growing eagerness. Or was I just imagining it? I cleared my throat and leaned back. The decision, whatever it meant, was made automatically. \"Well, hell. I'll just go to my classroom to fetch a few things, some grading I forgot.\" I raised both eyebrows. \"There's nothing going on down here.\"\n\n\"You know,\" she put in, her voice low and gravelly, \"I was thinking I'd take a little stroll around the halls, maybe visit my locker, check out my old classrooms through the doors.\" She smiled quickly. \"Nostalgia-type stuff.\"\n\n\"Good idea,\" I replied vaguely. \"You never know what you might find in your old classrooms.\"\n\nShe sat back and toyed with her teabag. \"Maybe I'll see you later, Mr Kershaw.\"\n\n\"Only if you're lucky.\" It was my stock response to almost everyone I knew, but in these circumstances it probably wasn't the wisest thing to say. Both of us smiled at the same time, hers a clever little smirk; mine felt normal, but it was hard to know how she took it. Whatever. I stood up and turned toward the trash can. \"Thanks for coming by to visit, Brittany.\" I said it in a normal tone of voice, but it didn't look like anyone was paying us the slightest attention. I shrugged self-consciously. \"It's always nice to see you.\"\n\n\"You too, Mr Kershaw!\" She sounded like her usual self, but I had to stop myself from glancing back several times as I made my way out of the gym, then up the stairs to where the bio labs were. Everything was dark, the custodians already done with this whole floor and now waiting around in their fart-stinking little office, impatient for the Faire to end so they could mop up and go home. I slipped my key into the lock and went into my room, feeling a little foolish, wondering what I was doing. And whether I should leave the door unlocked.\n\nEventually she found me by the fish tanks I kept in the corner behind my desk, all the tanks lit fluorescently during the night; other than that, instinct told me to leave off the classroom lights. Her face showed up first, peering furtively through the long window on the classroom door before she opened it and came flitting in like some spy-movie informant sliding through a gap in the Berlin Wall. The door closed behind her. \"Should I pull the shade?\" was the first thing she said, and I shrugged. I was in my chair with my feet on the desk, a position she often saw me in.\n\n\"Might as well,\" I allowed, trying for a dry voice, and then she was walking across the linoleum toward me, her sandals slapping dustily in the quiet room. \"So, how's that nostalgia-type stuff coming along?\"\n\nShe shrugged; even in the shadows of the fishtank light, I could see her teeth flash as she understood this wasn't going to be heavy. It was going to be just like almost every other interaction she and I had ever had: clever, respectful, easy. She had nearly reached me before she answered. \"Aw, you know.\" She hitched her narrow butt up onto the corner of my desk, as she had countless times during dozens of light lunch conversations. \"They say you can't really turn back time. It's different, being back here.\"\n\n\"Different seeing you here,\" I replied evenly. I often had a hard time remembering when different kids graduated; sometimes, the years all ran together. In Brittany's case, it sometimes seemed she'd never left. \"Nice, though.\"\n\n\"I always like visiting you.\" It was an admission made non-cheesy by her solemn delivery, and by her basic honesty. Still, she took a deep breath before she went on, her eyes narrowing strangely. \"Even if you spend a lot of the time looking at my legs.\"\n\n\"What?\" I opened my eyes wide. \"How dare you, Brittany? I've always been a perfect gentleman.\" Still, I smiled back at her; she had a point, after all, and those very legs were now dangling just a foot away from me, supple in her yoga pants. I did, though, give those legs a long glance, and let her see me do it. I whistled low, and she tried to keep from grinning. \"Can you blame me?\" I admitted at last.\n\nShe shrugged. \"I'm never sure how I look,\" she confessed. \"I mean, I never have problems getting dates, and guys spend plenty of time looking at me. But then, guys look at every girl.\"\n\n\"Right,\" I nodded emphatically.\n\n\"So, yeah. But I never mind when you look,\" she added solemnly. She was swinging them now, her heels bumping softly against the desk drawers. \"It's cold in here.\"\n\n\"It's after hours, after sundown, in February,\" I pointed out evenly. \"You need to lower your expectations, Brittany.\"\n\n\"I guess.\" Bump, bump, bump went her feet, and she was looking soberly down at me now. She looked even more luminous than usual in the bluish light from the aquarium. \"So,\" she said at last. \"Where were we? The kiss, right?\"\n\n\"The second kiss,\" I nodded. It would have been an exciting experience anyway, kissing a girl so fetching; the thrill had been magnified beyond all reason by the fact that she was a former student, that we were in the science office in the middle of the day, that the whole thing had been so spontaneous. \"The first one was good enough,\" I mused, \"but that second?\" I leaned back and laced my hands behind my head. \"I mean, what can we say?\"\n\n\"I know, right?\" Bump, bump, bump. She shrugged. \"Who'd have thought you'd be, you know, such a good kisser?\"\n\n\"You weren't bad, either,\" I observed, and then both of us were grinning openly. \"I always have liked you, Brittany.\"\n\n\"Same here,\" she replied at once. She laughed softly. \"I meant what I said, too. I think there were a lot of jealous alumni checking out my Pixboox account.\"\n\n\"Think so?\"\n\n\"Know so.\" She winked. \"I'd show you some of the comments, but I'm not sure I want you seeing them.\"\n\n\"No?\" Bump, bump, bump.\n\n\"No,\" she said firmly. \"It sounds kind of weird probably, but I don't like to think about other girls visiting you.\" The admission sounded like it had taken a lot of nerve to say, but I was nodding. So far, nothing she was saying was surprising me, and suddenly the near future, alone with her in a quiet, darkened room, loomed exciting and dangerous before us. I sighed.\n\n\"I'd rather have a visit from you than from any other former student,\" I told her quietly, and she could tell it was the truth. So she nodded too, just as I had a second ago, and suddenly both of us were wondering who'd make the next move. I cleared my throat. \"That was bad luck, Ms Ferrick busting in on us,\" I said, just barely getting the words out before my throat seized again. Bump, bump, bump. Her thigh was just inches away from my perched feet. She was leaning forward, slouching with her hands on the edge of the desk and her her shoulders up by her ears, still with that clever little hooded look to her eyes.\n\n\"If she hadn't...\" She left it unsaid, and of course both of us were visualizing... what? A torrid makeout session, frantic sex under the science office table, a wild affair that sizzled and bubbled until it burned out? Or just those two kisses, firm and confident, needy and yet possessive? There was no way to know, and that was the point.\n\nI thought long and hard before my next statement, but I think I'd already made up my mind about all this without really realizing it. I swallowed. \"Well,\" I sighed, forcing myself to sound casual, \"I doubt Ms Ferrick is even in the building right now.\"\n\nHer eyes lit up behind the glasses, and all at once a slow and somewhat devious smile grew beneath her sharp nose, the shadows making her look like a bird of prey as she perched there with her head low. All at once, as if paying attention to it for the first time, I felt my dick hardening down my leg. And this time, she was the one who needed to clear her throat. \"That's good,\" she managed, and then I took my feet off the desk and planted them on the floor, and she sighed as she slid down off the desk, stepped sideways, and stood over me. She was breathing hard, her firm little breasts quavering under the thin shirt. \"So, like, how do we do this? Do you remember what we were doing when she came in?\"\n\nI wondered how long I should wait before I reached out to touch her legs, so sleek in the shadows. \"We were kissing, Brittany.\"\n\nShe laughed again, but it was a far smokier laugh than she usually used. \"That's an understatement, Mr Kershaw.\" Her eyes were huge above me.\n\nI shrugged impatiently. \"We were really kissing, then.\"\n\nShe rolled her eyes. \"We were both standing up, for one thing.\" Her teeth glittered, the smile now playful, and everything felt easy again. Gamely, I shot to my feet. I was at least a head taller than she was, and just as I had been on New Year's, I was immediately aware of how easy it was to see down her shirt, the lacy dark red of her bra peeking out from the bottom of her cleavage. I took a breath.\n\n\"You had your hands on my back,\" I suggested, furrowing my brow in mock concentration. She put them there at once, and suddenly her whole body was right up against mine, and she was obviously aware of my hard-on. Shit. I should have planned this out better; I was way, way out of practice for this sort of thing. A sparkling smugness showed in her eyes and in the tightening of her smile, but then she tamed herself and resumed her air of offhand innocence. \"And I think I was, like hugging you about the same way.\"\n\n<br >\"No,\" she said flatly. \"Your left hand was on my hip.\"\n\n\"No way.\" I'd forgotten how much fun flirting could be, even with stakes as high as these. \"I'd never have been such a jerk.\"\n\n\"Who said you were being a jerk?\" she replied softly, arching her eyebrow, and I chuckled as my fingers found her hipbone, the forefinger settling on her warm skin between the shirt and the pants. \"Yeah.\" Her voice was suddenly very, very hoarse. \"Like that.\"\n\n\"Cool.\" We stood there clasped, for a moment, staring cheesily into each other's eyes, until I smiled again. \"Well, I think you were the one who kissed me.\"\n\n\"You sure?\" Her voice was a throaty murmur. \"I think I remember it differently. You were the one who made the move.\"\n\n\"I think you may be right,\" I admitted, my impatience at last getting the better of me, and then I had her lips quivering against mine, temptingly, her breath foul with anxiety, and I waited until she grew comfortable enough to join in.\n\nIt took her very little time. Like, none. She opened her mouth with cool confidence, the same way she had at New Year's at the start of that second kiss, the one that wasn't innocent at all, and not for the last time I wondered just how much experience this girl had.\n\nKissing her was intoxicating, addictive, and before long she had my lower lip trapped between her greedy teeth, and this time when her hand began its lazy descent along my Cuban shirt, over my belt, it didn't stop for the arrival of a colleague seeking a copier. I heard myself groan into her mouth when I felt her fingers resting right on my ass, and somehow that forefinger of mine was inside the waistband of her yoga pants, actually inside it, and we were clutching each other as though January and half of February had never happened.\n\n\"Mmm,\" she hummed happily as slowly, with gentle reluctance, we pulled apart. Her eyes devoured my face, and no doubt mine did hers. \"If Missy Southern could see me now, huh?\"\n\n\"No shit,\" I croaked. She was shaking, her face radiant, her chin gleaming with my spit. \"So, okay. Here we are. Ms Ferrick doesn't come in. Now what?\"\n\n\"Now what?\" She licked her lips, lizardlike, and squeezed experimentally at my ass. \"Now we keep going, right?\"\n\n\"I guess?\" Our smiles met then, and the flirting was over; my mouth opened wide, then hers opened wide, and then we were all over each other, tongues clashing and teeth dueling, our hands everywhere all of a sudden. At long last, with a feeling of satisfaction long delayed, I had Brittany Taylor's ass filling my palms, the yoga pants molding themselves against my fingers as if she wasn't even wearing them, and she squealed hotly into my mouth with her foot sliding up my leg like you see in 40s movies. When I looked down at her now she had her eyes closed tightly, her face ecstatic, and both of us were making those little grunting noises like you hear in high school backseats the world over.\n\nBut her foot kept climbing, her inner thigh hard against my hip, and I was losing my balance. I pulled her close and we hopped, still smearing our tongues slickly together, toward my waiting office chair, wedged blessedly against the aquarium where the casters hopefully wouldn't budge when we landed.\n\nAs, of course, we had to now; the momentum was unstoppable, and if I was worried about collapsing into an undignified heap on my classroom floor, Brittany was not. I tried to figure out a way to glance behind me for a safe landing, but that would have meant not kissing her, and I wasn't willing to do that. So, quickly, I put myself in God's hands, stuck out my ass, and aimed with the blind, lucky haste of a bad guy in an Arnold Schwarzenegger movie.",
        "Success!\n\nShe was surprised to find herself all at once sprawled across a seated man, but Brittany proved a capable and adaptable young lady. She moved her mouth to my neck, nibbling, licking, suckling, while she gathered her legs and wedged her knees onto the chair seat alongside my thighs, and then she was straddling me. Once she was sure we weren't going to go over onto the floor, at last, her lips left my skin with a glimmering twist of saliva and she was suddenly towering over me with a wicked smile on her lips.\n\n\"Did your legs get tired, Mr Kershaw?\"\n\nI smiled up at her, the whole chair wobbling, completely overtaxed. \"I think maybe I'm afraid this is all going too fast, Brittany,\" I said, and for an instant I could tell she thought I was serious. \"This chair is far too unstable for us to really do anything in it, and I just can't trust myself otherwise.\"\n\nShe rested her palms on my belly, burrowing comfortably underneath my shirt. Her fingers played with the hair she found there. \"Can't trust yourself. I like that.\" She arched her back, her two nipples painfully prominent through their prison of burgundy lace and thin grey cloth. \"But you're saying we can't 'really do anything?' What kind of anything are you afraid of?\" She moved, gently, down until her crotch made contact with my dick, now rigid beneath my jeans. She smiled grimly, her eyes wild as she felt it, and I shivered.\n\n\"I think you know quite well, Brittany.\" My hands were now full of the bare skin at the sides of her waist. I saw goosebumps on her chest.\n\n\"I think I do,\" she admitted quietly. She looked thoughtful. \"But I'm not sure I'm interested in avoiding it.\"\n\nI laughed harshly. Why pretend? She could feel my erection. \"Me neither, believe me. But here? Now?\"\n\nHer smile grew crafty again. \"Here. Now.\" And then she was leaning forward, the chair squeaking horribly, and a few seconds later there we were, gasping into each other's mouths again. The kisses were magical, perfect, her mouth smearing itself over mine as if it belonged there, and her hips began to move slowly back and forth, obeying the biological signals her brain was sending. Fuck, I could smell her, thick and hot and mysterious, and then I was moving my own hips and everything was flying out of control.\n\nSo I did something, in retrospect, that seems pretty fucking stupid to me. Stupid, but characteristic; I've always been afraid of getting into trouble, after all, and a glance at the door had worried me. So I stopped. I leaned far back in the chair and stopped. With my cock tenting my jeans, poking straight against her pussy through the yoga pants, I stopped. With her wild grey eyes rolling in her bright red face, I stopped. With the reek of her overheated vagina rising around me, drunken and wild, I stopped.\n\nShe was panting, her little breasts heaving under the thin shirt. She glared down at me in disbelief as I swallowed. \"Uh, Brittany,\" I started, choking, very conscious of her firm lithe hips beneath my palms, \"are you sure...\" I ran out of words, suddenly realizing this was stupid: I was older, and we both knew my dick was steel-hard. Did my misgivings matter at this point? \"Is this a good idea?\" I asked lamely, faltering.\n\nHer fingers tightened spasmodically on my ribcage. She gave a classic Brittany Pause, head tipped sideways, the red flush spreading far down her chest. She blinked. \"You want to,\" she pointed out. And then she waited, intense, and with my cockhead prodding into her she knew it was a fact.\n\nSo did I, of course. \"I do,\" I sighed. Another swallow. \"You too,\" and she nodded gravely.\n\n\"Then it's a good idea,\" she shrugged, speaking softly, with both our bodies vibrating like a pair of tuning forks, and that was that. \"Right?\"\n\nThe next kiss smoldered, far hotter than anything we'd done so far. Jesus. I was arching far up toward her, the chair tottering as I tried to get farther into her mouth; my hands were both fully inside her yoga pants, holding tightly to her underwear with my fingers finding the flesh of her bare ass. We both gasped with need.\n\nShe pulled back from that last soupy kiss, her sharp little clarinet-playing fingers prodding gently, lazily, along my waistline, hooking over my belt. She was smiling a most un-Brittany-like smile, a smile soft but with a touch of smug triumph and more than a hint of need. She looked down through her long lashes, me panting below, and then looked purposefully around the classroom.\n\nI took the hint once more.\n\n\"We should go somewhere else,\" I blurted, suddenly aware of how churlish it would be to expect a classy girl like Brittany to drop her yoga pants and let me take her over a school desk.\n\nShe toyed some more with my waist, her nails drifting through the hair there. She snapped those grey eyes open and nodded. \"We should,\" she replied quietly. Another pause. \"People will notice we're both gone. People like Melissa.\" She gazed down intently. \"People who aren't stupid.\"\n\nMy God, what a smart girl. Her luminous face showed neither doubt nor guilt nor certainty, just interest. She waited while my mind caught up with my hormones, her hips doing tiny rolling motions across my hard dick, smiling mysteriously. \"A problem,\" I managed, but my mind was losing the battle; the skin where her hips dived into the curves of her waist was smooth and hot under my hands.\n\nShe straightened. \"Can you text me when you're done chaperoning?\" she said at last. \"I want to do this right.\" She grinned, a flash of her little teeth. \"And so do you.\"\n\n\"Definitely.\" I was thinking wildly, uncharacteristically, desperately about whether I could possibly get my family out of the house tonight. How the fuck had this happened?\n\nBrittany drew a ragged breath as she gyrated one last time over my shaft. I knew she could feel it, and she certainly seemed to like it. One last finger-swipe across my belly just behind my belt buckle, so close to my dickhead, and then she slid down my legs. \"I know a place. Just text me, Mr Kershaw.\" She hesitated, looking once more into my eyes. \"If you're totally sure...\"\n\n\"Jesus.\" Was she serious? I flicked my eyes at the tent in my pants, emphasizing the obvious. \"You're smarter than that, Brittany.\"\n\nShe arched a crafty eyebrow, then reached down quite openly to adjust her panties through her yoga pants. It was such an unusually and unexpectedly lewd gesture that I gasped. \"Good. I am too. So, I'll get out of here and leave you to try to finish chaperoning, if you can possibly control yourself without me,\" she smirked. But she was blushing as she said it, still tentative with this kind of flirting, especially with me, and I could understand that. So was I. She dropped to the floor, straightening her clothes, running a hand through her hair, and I just sat there and panted like a guy at a strip club.\n\nBut I made myself smile, hoping it looked confident and sexy as I slumped there in my desk chair with my cock hard and my chin shining with her saliva, and I took a second to steady my voice before I spoke. \"I'll make sure I save you some, Brittany. Don't worry.\"\n\nThis time her smile was genuine, a fast wide grin of delight, and she just about skipped from the room. \"I'm not worried,\" she sang over her shoulder as her narrow little ass disappeared through the doorway, and I took the deepest breath I ever had as I let my head plummet back against the backrest.\n\nThis was trouble.\n\n* * *\n\nHow did I get through the last of the dance? No fucking clue. I spent the entire time on an endorphin high, obsessed with a past and a future that, with scary suddenness, involved getting nasty with my favorite former student.\n\nBut at length things quieted down, and Lucas told Shannon and I to make ourselves scarce. \"Thanks, guys,\" he said faintly, looking weary. The Faire had been its usual success even despite his class' incompetence, and if he wanted to give his hardworking chaperones some of the credit, who was I to argue? \"Couldn't have done it without you.\" Shannon looked inscrutably over at me, and I wondered whether she'd noticed I'd been gone for half an hour? Or whether I was grinning like a kid with his first BB gun when I came back?\n\n\"See you,\" I tossed over my shoulder, because I wasn't about to stay and interview her about it. The night was mild, typical for winter here, with a slight snap to the air that only would have been noticed by, say, petite young women in thin grey shirts. I scrambled into my Toyota and whipped my phone out while I was still in the parking lot. \"I'm done. Where am I going?\"\n\nIf I was expecting a Brittany Pause, I was disappointed for once; her response came back instantaneously, as though she'd had the phone right there in her hand. \"31555 Old Wheelhouse Rd,\" and I frowned. That was right on the shore, where rich people lived. It couldn't be the Taylors' house, not unless the wife was a lawyer or something. And I didn't think she was. Plus, I'd been to their house before, during a long-ago Christmas party; I thought they lived over near Russini Beach. But it wasn't like I was about to debate the point; without wasting time on a reply, I threw the car into gear and took off, my wheels chirping out of the parking lot.\n\nSomewhere deep, deep in my mind was the full, glaring awareness of how stupid all this was. I was an old married guy with two cute kids, shoveling it all away for what? A fling? And with a former student half my age, no less? What the fuck? I'd never done anything even remotely like this. Vaguely I wondered what I would tell my wife, how I'd lie about being late.\n\nI should call her. But, disgracefully, I had no wish to. The only reason I did was because I knew she'd call me first, and soon.\n\n\"Hi, honey.\" I hoped I was keeping my voice nice and light. \"The kids asleep?\"\n\n\"Junie yes, Timmy no. He's finishing his homework.\" She sounded sleepy; she was a napper. This was good for me. \"You on your way home?\"\n\n\"Well, since things are winding down there, I'm wondering if you'd mind me staying out awhile? Lucas wants to buy a bunch of us dinner.\" Perfect. Timmy would go down anytime now, and with the kids in bed I didn't even need to feel guilty about leaving Stephanie alone with them. No, I just needed to feel guilty about cheating on her with young Brittany.\n\nSo far, that wasn't even remotely bothering me. I was racing along the coast, three minutes from Old Wheelhouse, and my dick was already firming up. She yawned ito the phone. \"No, whatever. I'm probably going to crash as soon as Timmy does. Just be quiet when you get here.\"\n\n\"Yes ma'am,\" and in my mind the conversation was already over. Not the marriage; I still loved her, but it had been many years since I really wanted her. So, in a way, I guess it was over. \"Bye, sweetie.\"\n\n\"Love you,\" and then the phone clicked and I was turning right and the lights of the city were way behind me with the rest of my life.\n\n* * *\n\nThe house was large, brick, the kind of place that they built during the late 80s to fit some developer's idea of what Mount Vernon looks like. A broad lawn, a lot of steps, and low hedges of the sort you had to pay someone to come over and maintain: no, this was not the Taylor house. No way. Discreet lighting was sprinkled over the lawn, and it looked like people were home; I rechecked the address, thought about texting her for confirmation, and in the end decided there was no point.\n\nSo I parked a few houses away and walked as calmly as I could along the nicely-kept sidewalk, past a big mock-Tudor pile with lots of windows, ablaze with light. I laughed softly at myself for parking far away; in this neighborhood, my car would stand out wherever I'd parked it. I might as well have just stuck it in 31555's driveway and saved myself the walk.\n\nI was tingling as I bounded up the steps. I was exhilarated, excited, horny, all kinds of messed up. I was certain I shouldn't be there, and just as certain I had to be. After all, after what we'd done in my classroom, ducking out of another meeting with Brittany would have been silly, even if I wasn't a raging hormonal mass.\n\nThe whole neighborhood was quiet around me, like I was showing up for a minor dinner party; nothing around me seemed unusual or out of place. I glanced self-consciously around as I jabbed the doorbell, my mind scrambling, trying to figure out what I'd do on the very good chance I'd gotten the wrong address, that the bell would be answered by a suspicious homeowner just through with his dinner. The door was big, blandly grand in the way of a lot of doors on expensive newer homes, with beveled-glass sidelights. A few moments passed before I saw a small dark shape materializing behind the windows. It stopped, looking blurrily out, and I went light in my belly as I realized it was Brittany.\n\nShe had the door open the next moment.\n\n\"Ah! You showed up!\" She was all smiles, those high cheekbones of hers highlighting a broad grin. \"I was wondering whether you'd make it.\"\n\n\"Shit.\" It came out as a relieved sigh. \"You happy to see me?\"\n\n\"You know I am.\" She adopted a coy, mock-bashful pose, legs crossed, her hands folded. She tipped her head low and looked up at me. \"I'm very glad you're here.\"\n\n\"Then let me in.\" I was becoming very conscious of the street behind me, of passing traffic. She stepped aside, still grinning and now blushing furiously. \"Thanks.\" I kicked the door closed behind me and looked down at her. \"What?\"\n\n\"Well,\" she admitted, her eyes fluttering, \"it's just very exciting. I've never before had a man come over to see me like this.\"\n\n\"Like what?\" I was unzipping my jacket, scanning around for somewhere to put it, but we were in an entry that was at least two stories tall, with a skylight twinkling above. No closets anywhere. What was wrong with modern architects? There was noplace for guests to throw their things. She raised her head slowly and her grin became devious.\n\n\"Oh, I think we both know why you're here,\" she said quietly. Brittany's ponytail was gone, her fine hair splashing around her shoulders. She seemed a little skittish, her movements all losing their usual fluid calmness.\n\nI looked around at a nice, expensively furnished living room with massive soffits. \"Nice place,\" I ventured. \"Whose is it?\"\n\nShe paused, walking uncertainly into the kitchen, a hostess in someone else's home. \"It belongs to someone who isn't coming back here anytime soon,\" she said pointedly. \"They're away in Palm Springs, I think. I come by to water the lawn and make sure the cats don't die. It's another former student of yours. I'll tell you if you really want to know, but I don't want to get anyone in trouble.\"\n\n\"That's okay.\" Both of us were talking quietly, a little subdued. I couldn't speak for Brittany, but I was a little embarrassed by my earlier passion. Oh, and my dick was just about completely hard already, which made me feel awkward. She was still looking back at me, her eyes bright in the dim light.\n\n\"Um, can I get you a drink or something?\" She looked apologetically around. \"I'd rather not turn on too many lights; they're not supposed to be home.\"\n\n\"Sure,\" I said quickly, and then we stood there staring at each other because, I realized, she wasn't sure what I was saying sure to. \"Oh. Just some water, maybe? Or nothing, if you'd rather not mess up a glass.\"\n\n\"I'm capable of washing dishes,\" she replied primly, and then she had disappeared into the back of the house. \"Just take a seat,\" she called behind her, and I sat carefully on a big sofa that looked like it never got used; this was one of those rooms people kept around solely to look nice. I had little doubt mine was the first ass that had hit the cushions in weeks, months maybe. The upholstery was slippery, new-feeling. I heard muffled clinks and rattles from the kitchen, the schlup of a closing refrigerator door, and then her light little footsteps coming back in.\n\nBrittany appeared again, looming into the room with her hands full. \"Your water, sir,\" she murmured, and as she bent to set the glass on the suspiciously clean coffee table, her hair curtained across her face, lovely and a little mysterious in the dim light coming out of one hallway in the corner. \"Feel free to tip your waitress.\"\n\nThe joke was forced, and lame, but I appreciated the effort. \"I'm always a good tipper,\" I replied vaguely, and when she sat down her hip was plastered to mine. I smelled the rich floral scent of her shampoo, overlaid by something else. I nodded toward the glass in her hand. \"Is that wine?\"\n\n\"Of course.\" She took a sip, and her hand wasn't shaking. \"Chicks dig wine. Haven't you heard?\" She was close enough and petite enough that I could feel her body vibrate as she spoke. I looked at my water, standing on the table like the last kid picked for football.\n\n\"I thought we were being low-impact; that's why I went with water.\" She turned toward me, her forehead about two inches from my nose, and her voice was already starting to get a little hoarse as she spoke.\n\n\"I can share,\" she said quietly, \"if you want.\" She took another healthy sip, then held out the glass, the crescent of her lipstick faint on the rim. \"They've got other stuff too, beer and shit. But I'd rather not get back up,\" she finished, trailing off as though she'd only barely decided to say it at all. \"Go ahead and kill it.\"\n\nI took the wine silently and drained it. Judging from the surroundings, it was probably expensive, but if so it was wasted on me. My palate is so bad it can only barely distinguish between red and white. She watched intently as I drank it down. Her body was warm and close, and as I leaned up to put the empty glass down she was sweeping her hair behind her little ears; already she was getting ready to move in for a kiss, I realized belatedly, and I was hardly ready for her as she laid her hands on my shoulder and chest, falling into me as I leaned back into the uncomfortable couch, and before I even got all the way back she was already on me. When she spoke, her lips were moving against mine. \"I didn't like stopping last time, Mr Kershaw. Did you?\"\n\n\"Nope.\" I leaned in, and just like that, we were back at it.\n\nThis time, it wasn't going to stop. No way. We'd both known, in my classroom back at the school, exactly where this was going, and I think we'd both expected to get there then. The only reason we hadn't was because I was weirded out about doing it over a desk, and she was canny enough to realize it wasn't a good idea either.\n\nBut now?\n\nI was already deeply ready to fuck her, especially on a physical level: my dick was harder than it had been on my wedding night. I was getting there psychologically too, her kisses as firm and dreamlike as they'd been in my desk chair, and emotionally?\n\nWell, she got there first.\n\nI knew it when we came up for air, briefly, and I looked at the hunger in her grey eyes and felt her body hunching back and forth in my lap; she'd straddled me again at some point. She didn't say anything; she didn't need to. It was obvious from her wild eyes and the bright red flush on her face. She was ready. I didn't even think as I laid my hands on her hips, right where the yoga pants gave way to her soft ripe skin, and my fingertips burrowed up under her shirt. She responded just as quickly, even automatically, by crossing her arms across her little breasts and grabbing the hem of that short, loose shirt.\n\nIt was over her head, sailing through the air behind her, with a suddenness that left us both gasping, her topless body taut and lean and writhing right in front of my face. I stared as though I'd never see anything so sexy; I hadn't, not in many years. Steph had never been as petite as this, as lithe, the muscles of Brittany's abs prominent beside her little belly button, all firm pale skin spreading up along the ridges of her ribcage, to where it finally went into hiding behind that dark, purply-wine bra; experienced husband that I was, I recognized it as the bottom of the Secret Whispers line, the lace minimally prim along the edges. I'd done a hundred of those in the laundry over the years; I knew how they were made, and how to remove them.",
        "That model of bra wasn't meant to be seductive, but right then it was the sexiest piece of lingerie I'd ever seen.\n\nBrittany was not the sort of woman to preen, stretching high and modeling herself for me; that wasn't why she'd gotten her shirt off. It was merely in the way, so she'd removed it before stooping right back down, her hands on my face as she licked at my lips again. Her expression was serious, even grave, her eyes open and curious as she kissed me. When I sent my hands around her body this time I was overwhelmed by the feel of her naked back, the ridge of her spine, the warmth of her flesh, and I couldn't resist the temptation to tickle every goddamn inch. I let my fingers dance all around, up and over her sides, across the bra straps, and she loved it.\n\nI could tell from the way she writhed and sighed, even giggling at one point when my fingertips ran beside her breasts to flutter through her armpit. She drew back, her hips still rocking in little circles; for the first time in that room, I felt my dick poking at her again. \"That feels nice,\" she admitted, murmuring, her whole body swaying. She had her hands on my shoulders, running them beneath my collar, watching me admire her. \"A lot of this feels nice.\"\n\nI opened my mouth, only to find I couldn't speak. Literally. My throat was seizing like a choked engine, totally clogged with lust. She waited, moving snakelike in my lap with her thumbs gently stroking my neck. \"Amazing,\" I choked out. \"You look amazing, I mean.\"\n\nShe smiled her grave little smile. \"Thanks,\" she said simply, and then I noticed the goosebumps all over her reddened chest. She looked... I don't know, triumphant? Possessive? I leaned forward, she raised herself up, and suddenly her abs were pressing against my face like a warm wall, her hands stroking through my hair and down the back of my shirt, me planting aimless kisses all across her belly. I was suddenly very aware of a strong, sharp smell, something I hadn't smelled in years, the scent of a woman completely aroused, beyond ready to fuck.\n\n\"Mmm,\" she hummed happily when my hands plowed across the firm curves of her butt, and then she gasped as my fingers found her waistband. She clutched me tighter. I wasn't even thinking clearly as I dragged my hands down, pulling at the yoga pants and the underwear beneath, the skin of her hips exciting me as it appeared. \"Yes,\" she hissed, and then just like that her pants were at her knees, her smell was everywhere, and my kisses were getting lower and lower.\n\nShe squirmed when I felt her bush at my chin, and I looked up suddenly; she was gnawing on her lower lip, looking amused and anxious and a little confused, but mostly just horny. She was pulling outward at my shirt, trying to get it off, and I raised my arms as she finally fumbled the top button free. Brittany growled as she finally got the thing off, and suddenly I felt her damp tuft of pubic hair on my chest, high up near my neck. \"Goddamn, Brittany,\" I said, and my voice was strange to me: deeper, almost a croak.\n\nShe sounded tentative, like she couldn't trust that the right words would come out. \"What are we doing, Mr Kershaw?\" But she was rising, her thighs straining as I held them, driving herself higher on my body, and I was sinking into the couch cushions, my whole body slouching lower. I looked up one more time through the shallow valley between her breasts, seeing a flushed face now totally out of control, and then I shuddered with lust and lowered my chin.\n\nShe had her legs open as widely as her stretched yoga pants would allow, still moving sinuously, and all at once her pussy was on my face, hot and slick and vibrant. She'd trimmed herself into a short, sharply tapered triangle, the hair down here much darker than it was atop her head, and when I opened my mouth it was like licking a sponge.\n\nJesus, my brain reminded me, as awed as the rest of me. You're about to go down on Brittany Taylor! Her ass rippled in my hands as I stabbed my tongue blindly toward the hottest, smelliest part of her, and her long quivering exhale in response made her entire body shake. I didn't imagine she'd been eaten out all that often, though in fairness I was just as rusty, lapping frantically, her body humming against me like a tuning fork.\n\n\"Fuck!\" she bit out, and then I felt her drive hard against me as she gripped the back of the couch. She tasted harsh and tangy and sweaty all at the same time, and it took me several tries to burrow far enough down before I felt like I was doing any good, pushing my nose and tongue desperately forward wherever I found wetness. She was humping my face by that time, desperate gasps gusting from above, and all of a sudden we had one of those moments were everything finally clicked.\n\nIt helped that her bunched clothes were finally giving up, the elastic way overstressed and little match for her heaving thighs. She leaned back, arching, serving herself to me on a silver platter, and all at once my mouth was full of skin instead of hair, her hands were tightening on the back of my head, and we fell into synch as my bobbing head and her thrashing body figured out how to match rhythms.\n\nAnd then, for a few minutes, everything was incredible.\n\nIt was all biology now, whatever was left of my brain responding to her smells, her movement, the choked sounds coming from her throat, just as she was responding to mine. I knew nothing but her body, smothering me insistently, loving what I was doing to it and unwilling to back off until she was ready to. I was on fire, my own hips moving vaguely up and down, but I had no time for that now: everything was Brittany. She was the only thing in my world right then, and I was amazed that I was doing so well. Desperately I stiffened my sore tongue, then tipped it sharply upward to the top of her slit, jabbing my face forward, and that's when she started to freak out.\n\nFor the next few moments I was licking at a moving target, her hips jumping and shaking erratically in time with her hushed moans, but it couldn't last. She squealed finally, her sweaty body beginning to churn hard against my face, and with a sense of wonder I realized I was giving her an orgasm.\n\nI was very unprepared for this. Brittany tends to be a pragmatic person, keeping her emotions under control, playing her cards close to the vest. The woman who came against my tongue was none of those things. She thrashed powerfully, grunting with gasps that sounded almost painful in their intensity. Her entire body went tense, the muscles of her legs completely rigid next to me, a hand gripping painfully at my hair as I kept my tongue prodding, prodding, prodding against her clit.\n\n\"Oh my fucking God,\" she muttered, her abs pulsing in rhythm with her fast, hard breaths. She was coming slowly down from her high, her body relaxing, and my face came abruptly free as she slumped her nude ass back down onto my legs. I was panting as well, my head resting far back, gulping air. I hadn't realized I was so short of breath. The room reeked. \"Sorry about that,\" she said, a little uncertainly. \"I haven't really done that before.\"\n\n\"Could have fooled me.\" I realized, slowly, that my face wore a massive grin, and then we were laughing together as we got ourselves slowly under control. There was shyness there, maybe even a little embarrassment, but mostly there was just sheer breathless delight. \"You okay?\"\n\n\"Oh, I'm very okay.\" She seemed a little stunned by the intensity of what her body had just been through. \"That was... shit. Uh, thanks.\"\n\n\"Anytime,\" I replied automatically, but then she was looking at me a little bit strangely and I realized she hadn't put a lot of thought into this whole thing. Like, the aftermath. She was a girl who liked to plan, and now she had no clue what was coming next. \"I mean, you know. If you ever want to,\" I finished lamely.\n\nShe did another Brittany Pause, which had a much different effect with her sitting there bottomless, her hair all a mess, her bra askew. I saw one pink nipple trying to pop out. She nodded. \"I'll want to,\" she said quietly. We sat a moment more and breathed, until she glanced down at the tent in my pants. All of a sudden I was aware of pain, or at least discomfort, my hips shifting as much as they could. Brittany, of course, picked up on it. \"The couch is better than your office chair, at least,\" she giggled, \"but I think you're less comfortable than I am.\"\n\n\"I know,\" I grated. \"I might just need to, you know, adjust a little bit down there...\"\n\n\"More than a little.\" She unclenched her legs carefully, as if testing them to make sure they'd still work, and then slid off me to her feet. \"God, I fucking ruined these pants,\" she mused, looking down between her legs, and then she was shrugging as she eased her clothes down her legs. I watched her undress, my hand providing digging down my pants, and she had no self-consciousness at all as her arms wormed behind her, seeking the clasp on the back of her bra. \"Might need to buy new underwear, too.\"\n\n\"Sorry.\" I was already unzipping myself. Ah, sweet relief! Precum had flooded my boxers.\n\n\"Don't be.\" She stood naked with her natural calm grace, fully recovered now except for the red skin on her chest and a lingering dampness between her legs. I stared at her as I hitched my butt up to get my pants off, my mouth totally dry. \"I'm not.\" She saw me staring, and her flush deepened. \"What?\"\n\nI rolled my eyes as my pants flew off. \"Can you blame me? You're gorgeous.\"\n\n\"Not sure about that,\" she wheedled, but she was smiling impishly as I sat back, my cock massive between my legs. Her eyes widened. \"Well now. If my Pixboox contacts could see me now...\" She shook her head at my size. \"I should post a picture of your dick. Hell, if I'd have known you liked me that much, I might have kissed you sooner than New Year's.\"\n\nI nodded. \"See? Told you you started it.\" I'd never been so hard. I felt like a porn star. Brittany was trying not to stare. I decided honesty might be a good policy; she'd figure it out soon, anyway. \"Brittany, I'm not sure how long I'm going to last.\"\n\nHer eyes narrowed, a whimsical grin appearing on her face. \"We should go find a bed then, if we're going to.\" She licked her lips unconsciously. \"Quickly. That's the biggest one I've ever seen, by far.\"\n\n\"Ever?\" I frowned as I got to my feet, automatically cradling my shaft in my hand. It felt hot and tight. \"I thought you were still trying to figure out if you were a virgin.\"\n\nShe arched her eyebrow at me. \"I never said that was the first penis I'd seen, Mr Kershaw.\" She smiled a very, very feminine smile then as she turned to lead me toward a bedroom, her ass smooth and lovely before my eyes. Her body was perfect. \"Let's go.\"\n\nI followed gamely, my mouth dry. Her muscles rippled invitingly beneath smooth, firm skin. \"I just hope I won't be too much of a disappointment.\" She rolled her eyes at me over her shoulder.\n\n\"Please, Mr Kershaw. Were you not paying attention back there on the couch?\" She winked. \"If you did nothing else tonight but sit and watch an infomercial, it still wouldn't be a disappointment.\" She shivered. \"That's a lot to live up to; pressure's on me now.\"\n\n\"I'm sure you'll do fine.\" My cock was straining well above the vertical as she led me up some dim stairs to a dark door. \"Nobody ever uses this bedroom,\" she announced as she stepped in and flicked on a dim bedside lamp. I looked around at a back bedroom, all bland furnishings and floral prints. Big oak 1990s furniture dominated the place. \"This is where I've stayed when I've slept over here.\"\n\n\"Oh,\" I said, uncertain. I was about to make a massive mess somewhere, and I had no idea whose bed I was going to make it in. She stood a moment, looking around, then turned and sat on the bed, her legs pressed demurely together. We stared at each other for a second, and even though I couldn't think of anything to say, her eyes told me I didn't have to. She fixed her eyes on my cock and then reached her hand out, palm up in invitation. She looked a little bit nervous, but much more determined.\n\n\"It's going to be hard for me to disappoint you from across the room,\" she pointed out gently, and I laughed as I stepped up. My dick felt like it was reaching for her, getting longer and longer as it approached her trembling fingers, and then it was happening: Brittany Taylor was touching my penis.\n\nHer lips worked oddly, suppressing a smirk as she made contact. Her touch was feathery, almost light enough to make me doubt she was touching me at all, but of course I was so sensitive my dick jumped a full inch. She giggled. \"You're so hard,\" she murmured, shaking her head. She looked up, bolder now. \"You must really want me.\"\n\n\"You've got no idea,\" I replied at once, amazed my voice still functioned. She was stroking me so, so softly, almost reverentially, and I closed my eyes with a ragged sigh. It was the best feeling in the world, her little fingers dragging gently along my length, and I took one more step; I did not want to cum in her hand, not like this. I felt as though I could hold out as long as I needed to, if I could only get through the next few seconds...\n\n...except she was leaning forward, her eyes on mine, her mouth opening around my shiny purple cockhead, and I tipped my head back as I felt her breath on my pubic hair, running across my sensitive skin, and I swallowed hard to prevent myself from spraying my nut straight into her throat, then and there. I blinked rapidly, thinking about something, anything else. Brittany tasted me as if she was sampling some sort of expensive dessert: slowly, cautiously, savoring every inch, she locked her lips around my veiny length and, ever so gently, applied her tongue to the bottom.\n\n\"Fuck, Brittany,\" I blurted, and she was staring up at me, my dick disappearing between her lips, and she came away from me with a sudden popping smack of her lips.\n\n\"Go ahead, Mr Kershaw,\" she purred. \"We've got all the time we need. You'll just last longer later, right?\" She winked, her grey eyes shining in a red and vibrant face, and for the love of God it had been months since I'd had sex with Steph, and she was so gorgeous, and I realized I'd wanted her so damn long, and I trembled a few moments more before I just gave up.\n\nMy cock leapt in her hand.\n\nShe laughed happily, her mouth in a wide-open grin, as I splattered her from chin to nipples. \"Christ!\" she giggled, and then she was lolling her tongue out, spraying herself merrily across the face, me gasping and blubbering like a horse at the end of a race. I was horribly embarrassed. The orgasm was black-out powerful, feeling like it came out from my entire body; I was left tingling and shaky, and warm all over.\n\n\"Oh shit, Brittany,\" I huffed. \"That was just too much.\"\n\n<br >\"I know,\" she marveled. \"That was impressive!\" She was still touching it, not even pulling on me, just letting her fingers rest on my skin. She showed no concern at all that my cum was dripping down her face, splatting from her chin down onto her thigh. She licked absently at her glazed lips. \"I've never seen that much come out,\" she shook her head, and once more I fleetingly wondered just how experienced this girl was.\n\n\"Well.\" I drew a deep breath and stretched my arms high. \"I guess we've taken the edge off.\"\n\n\"I guess we have,\" she agreed. She let go of me slowly, licking at her fingers, the sight of this girl swallowing my semen unbelievable. She uncoiled from the bed and stood there pressed into me, my dick still half-hard and resting against her belly. \"You're, ahh... interested in doing more, I hope?\" She batted her eyelashes at me theatrically, the left one already crusty, and I burst out laughing.\n\n\"You kidding?\"\n\n\"I know.\" She gave a bright smile and then stepped sideways. \"I have to pee, Mr Kershaw. And I might have to wipe some of this off,\" she went on, mopping at her chest; she acted like it was totally natural for her to be standing there naked and covered in my cum. This girl was full of surprises. \"I'll be right back?\"\n\n\"Hell yeah,\" I agreed, and I swear I still wasn't quite going soft. I normally did, after I masturbated, but when that happened I never really had more to look forward to. Now, I had a naked ass retreating toward the bathroom, a beautiful horny girl who wanted me to fuck her, and though it wasn't the iron-hard statue it had been a few moments before, my dick still had a wary tightness to it. I sat there, looking vacantly down at it, unable to believe my luck. I flopped onto my back with my knees over the edge of the bed, listening to the sink in the nearby bathroom.\n\nThat's how she found me, with my slimy cock thick and red along my groin. Brittany had wiped herself off, but there was no way I could erase the image of this young lady dripping with my semen. I shuddered, and she stopped at my knees. \"What?\" She cocked her head. \"You cold or something?\"\n\n\"Just amazed,\" I admitted, and she smiled.\n\n\"No need to be amazed,\" she shrugged. \"I'm the one who feels like she's getting lucky.\" She climbed easily onto the bed, straddling me, nestling her butt comfortably onto my thighs. Her vagina gaped bright red about an inch from my balls. I felt my cock spasm. She looked gravely down at me, her eyes taking in every flabby inch, and when she spoke her voice had gone all throaty again. \"You're a really amazing man, Mr Kershaw. You always have been.\"\n\nI propped my head on my hands and, once more, found it hard to say anything. She gazed down at my dick, her head cocked cutely to one side, and sighed. Then she looked at my eyes. \"I guess you were pretty excited, huh.\"\n\nI pursed my lips. \"I wasn't the only one,\" I pointed out quietly, and Brittany rewarded me with another flush. Delicately, she reached down and trapped my head between her fingers, like an entomologist examining an interesting subspecies, and turned it to face her. I glanced at her quizzically.\n\n\"What?\" She raised her eyebrows. \"I've only seen, like, four of these. Yours is really nice.\" She regarded it a moment more, and then glanced up at me. \"Is it, uh, going to be able to get hard again?\"\n\nI shrugged, still swimming in the lassitude of my orgasm. \"If it can't get hard for you, Brittany, it never will.\" It was a lame sentiment, sure, but true. Besides, I was already feeling it twitch again. I was certain I'd get another erection, and soon. She still had her hand on it, squeezing gently. She seemed mildly obsessed. She looked up at me again, thoughtfully.\n\n\"Should I, like, suck it?\"\n\nI nearly firmed right back up in her hand. It had been years since I had a blowjob. \"Can't hurt,\" I allowed, forcing myself to sound casual.\n\nShe gave a slow, crafty smirk. \"I know. It was a rhetorical question, Mr Kershaw.\" She scooted back, and then dropped gracefully to the floor between my knees. I just watched, mesmerized; it was hard for me to see how anything could top any of this. I felt like I was storing memories; this almost seemed like a dream. She ran her hands up my thighs, feeling the muscles there. \"Ready?\"\n\n\"Sure.\" I still tried to sound nonchalant. \"Ever done this before?\"\n\nShe scowled. \"That's so rude!\" She leaned in, and once more I felt the magic of her breath wafting across my pubes. I swallowed. \"Twice,\" she confessed at last. \"That's not a lot, for a girl my age.\" She pushed my legs gently apart; she seemed fascinated by my balls. \"You've got some grey hair down here,\" she pointed out with a grin.\n\nIt was my turn to scowl. \"Now who's being rude? No, they say grey hair makes a man look distinguished. Dignified.\"\n\nShe arched an eyebrow, looking very adult. \"I'm looking at your scrotum, Mr Kershaw. It's not dignified, I'm sorry to say.\" She wasted no more time, though, lifting my shaft out of the way and taking a deep breath as she dived on in there, her mouth already wide when her head collided with my body. She slurped my sack into her mouth with, perhaps, an excess of enthusiasm, but the sheer wickedness of what was going on was already exciting enough. I groaned; looking down past my hairy chest, I saw nothing but ashy blonde hair, her hand still lifting my dick, and a pair of shoulders moving rhythmically as she nibbled on my testicles.",
        "Christ Jesus.\n\nI'd never had my balls suckled before, and Brittany proved to have a powerful mouth; I distinctly felt a twinge in my gut, way up high near my diaphragm, as with loud smacking noises she feasted. \"Wow,\" I sighed, looking up at the ceiling. She seemed to be having fun, because she stayed down there for some time; time enough, anyway, for me to feel the weird sensation of her saliva rolling slow and heavy into my buttcrack.\n\nShe spiced things up with occasional tongue action along the sides of my balls, heavy licks, the kind I'd never have expected from someone so reserved. But then, I'd already learned that Brittany Taylor was full of surprises today. She eventually rose up from between my legs like a landbound Aphrodite, her tongue broad and flat along the sides of my steadily growing shaft. \"Damn, Brittany.\"\n\nShe took a breather and straightened up, wiping her mouth on the back of her wrist, and then she just stared thoughtfully at me with her hand still tight around my cock. A very different kind of Brittany Pause. \"What?\" She opened her eyes wide, exaggerating that innocent look she always had, but I could tell she was pleased with my reaction. \"I thought you'd like that, Mr Kershaw.\"\n\n\"Oh, I like it,\" I nodded, but then she was lifting my dick back up to her mouth and devouring it, the whole hardening organ barely fitting into her warm, slick mouth, prodding at her throat. She gagged a little. \"My God,\" I moaned, my head flopping back, but by then the die was cast: I was hardening up rapidly, well past the point of no return, turned on by the feeling and the sight but also by the sounds, wicked and feral, of her lips smacking along my shaft. I felt the porn-star urge to grab the back of Brittany's head and shove her down, but I figured it would be too dramatic, too rude, and might make her vomit.\n\nSo I let her go at her own pace, gnawing and sucking, her tongue exploring every ridge and corner. And it worked; maybe I didn't get quite as iron-hard as I'd gotten from eating her out downstairs, but it took just a few minutes before I was hard enough to go again, my dick quivering and sensitive as she finished up, and when she finally sat back on her heels and sighed my penis shone like it had been lacquered. \"So, it worked,\" she observed, deadpan, and even I could tell she was all horned up again and ready to go.\n\n\"I'd say so,\" I stammered, unable to think of anything wiser, and she pursed her lips and rose with silent poise to her feet. And is there anything more breathtaking than the sight of a beautiful naked woman standing before an erect penis, getting ready to take it?\n\nInstinctively I scooted up onto the bed, centering myself on the wide mattress. She followed me fluidly, smoothly, as if she was following a script someone had already laid out for her. Neither of us was speaking at this point; we just breathed and stared, our eyes wide, and soon she was sitting once more on my thighs, her hands tight on my chest. It seemed totally natural to rest mine on her hips; I was becoming very familiar with that part of her, and she seemed to like it. Her flesh felt perfect in my palms.\n\nShe paused once more, biting her lower lip, and I felt like I should say something, to mark the occasion. This was important, after all: I was about to fuck a favorite ex-student who'd never really done this before. She rubbed lightly at my skin. \"Uh, so, are you still wondering whether you've had sex before?\" I asked with a catch in my voice.\n\nHer response was immediate. \"I have a feeling it's not going to matter in another few minutes.\"\n\n\"I think you're right.\" And then she was beaming down at me, and it felt real and special and amazing, and she was rising up to move her vagina above my pulsing cock. We both watched closely, though Brittany had to curl her body to do so; she wanted to see me split her. She seemed amazed, hovering, still holding my dick with that dainty, almost experimental tenderness between thumb and forefinger; we both held our breath as she wedged my slick cockhead into her weepy slit.\n\nThe sudden sensation of warmth would have taken my breath, if I'd still been breathing at that point. She moved me around within her opening, experimenting, easing herself further down the entire time; her mouth was wide and slack by the time she got the first inch in. Already her inner labia were stretching around my girth, and she flickered a glance at me with wide-eyed wonder.\n\n\"You okay?\" My voice was hushed and awed, like I was visiting a cathedral or something.\n\nShe nodded, her face bright red, and then began to sink deeper. She was almost halfway down, with her pussy feeling like a hot wet vise around my dick, before she regretfully pulled back up and rested. She made eye contact and swallowed, her throat dry. \"That's about as far as the other guy got in,\" she explained.\n\n\"Ah.\" I was stroking her thighs lightly, comfortably. \"So, like, this is nothing new so far,\" but I was smiling as I said it. She rolled her eyes.\n\n\"Right.\" Another swallow. \"Just another normal day, Mr Kershaw.\"\n\nI laughed dryly. \"Hardly.\" And then I waited, and I'm sure she saw the lust in my eyes as she shimmied herself slightly and then started sinking again, this time impatiently; she wanted me in her. She'd go down an inch or so, then bounce slightly, then a bit more, then more bouncing, with my fingers caressing her legs the entire time. It was the rawest, most powerful thing I'd ever seen, my dick disappearing into her tight little body, and I tried to remember every moment.\n\n\"Christ,\" she grunted at one point. \"This is hard work!\"\n\nI swallowed. \"I mean, some people get paid for it,\" I pointed out meekly. I felt a little guilty; I'm not small, and the last thing I wanted was to hurt her. She just smacked my chest and smirked.\n\n<br >\"That's a bad joke.\" She frowned and her eyes looked far away. \"It doesn't hurt, at least. It just feels really full.\"\n\n\"Well, I'd hope so,\" I murmured, and there she was with the root of my cock sticking out of her, and I don't know what came over me. I arched my body abruptly, driving upward, nearly bucking Brittany off, and she whooped as we fell back down onto the mattress with our pubes mingling at last.\n\n\"There we go,\" she gasped in satisfaction. She stared down at me, her expression a little mischievous. \"Thanks for the help there, at the end.\"\n\n\"Don't mention it.\" I knew I was grinning like a fool. \"Well, you're not a virgin anymore, Brittany.\"\n\n\"Hell no,\" she replied fervently, and already she was beginning to move, her hips swiveling in tiny circles, the muscles of her vagina pulsing tentatively. She was still looking down at her crotch. \"So, what, I just move around? Do I flop around like a porn star?\"\n\n\"You're in charge, Brittany.\" My neck was already getting sore; I lay back, my fingers curling around to her ass. \"You do what you want. There's no wrong way to fuck.\"\n\n\"I hope not,\" she muttered, and then she started playing. She started by hunching up and down, her eyes looking sideways, getting used to the feel of a penis inside her, and then she apparently decided she liked it as her eyes fluttered closed. \"Mmm,\" she moaned quietly, her hips swinging more broadly. We started to hear the snik-snik sound of our flesh colliding below. \"I could get used to this.\"\n\n\"Hell yes,\" I said fervently, and then her breasts were in my hands and she was coming in for a wet, searing kiss, her body moving faster and faster on top of mine. I'm sure she tasted like my sweaty ballsack; I couldn't have possibly cared less as I sucked at her lips and tongue. Everything was getting very sweaty, very fast; the room was stifling with the heavy scent of naked skin. Her dancer's body was wiry, all surging muscles and heat.\n\nBrittany had begun to move up and down now as well as back and forth, and she got the gist of it right away. She'd lift herself all the way up, my glimmering cock nearly fully exposed, and then she'd slam back down as I tried vaguely to match her flailing motions. The golf-clap noise of our bodies hitting each other was fast and hard, punctuated by the occasional grunt as the two of us grabbed any body part within reach. But it couldn't last forever; Brittany was in good shape, but she was certainly no athlete. She started getting tired after four or five minutes.\n\nI watched her for a few more moments, her face lost in concentration, and then I patted her hip. It took a few tries before she opened her eyes and realized I wanted to tell her something. I cleared my throat. \"Want to try it another way?\" I wheezed, my dick still rock-hard in her, and she nodded gratefully.\n\n\"I want to look at you, though,\" she admitted quietly. \"Like, I want to see your face.\" She was clambering off me, my penis emerging with a slap against my belly. She waited a bit uncertainly, watching for my reaction; she probably thought I'd want to do her from behind. I was touched.\n\n\"Lie down,\" I told her gently, and she flopped onto her back with a blushing sigh. Her entire body glistened with sweat, and she scooted herself up toward the pillows with a happy sigh.\n\n\"Um, Mr Kershaw?\" She looked to the side for a second. \"You remember how I told you my friend was on birth control, right?\"\n\nI hadn't, and it took a moment to dawn on me now. My eyes went wide. \"Oh. Yeah. Weird periods, you said?\"\n\n\"Weird,\" she replied, looking at me very meaningfully. \"Wicked weird.\"\n\nShe was telling me she was on the pill, of course, which was a very handy thing to know at that point. I blinked, she nodded, and then we both smiled crafty little smiles. She raised her arms then, her legs sprawled out across the comforter with her pussy all pink and swollen. \"I'm getting lonely,\" she fretted.\n\nWell. She'd certainly gotten the hang of this quickly. She lay there, a perky nymph, desirability oozing out of every pore, and I crawled toward her with my dick swinging hard beneath me. \"Can't have that, can we?\"\n\n\"Mm.\" I moved right in between her legs, which rose until her feet were behind my knees. My cock lay heavy across her pussy. \"I invited you over here so that I wouldn't have to feel lonely.\" She giggled as I raised my butt high, teasing her with the tip of my penis just inside her opening. \"That tickles.\" God, the heat coming out of her! She was humping upward unconsciously, her arms now twined like rope around my neck, her heavy-lidded eyes showing playful lust. \"Ah.\" She got me inside her a bit more fully. \"There it is.\"\n\n\"Not so lonely anymore?\" She lay beneath me tingling, every line and curve in perfect symmetry, and I felt myself drooling. All I'd need to do now was drop my hips, and I'd slide straight into her soupy vagina. She was still thrusting at me, teasing little rabbit-fucks, just keeping me hard. \"I'm glad I decided to come over.\"\n\n\"Me too.\" She grimaced, grey eyes wide, as I thrust right inside her, and then her breath caught. \"Wow. That feels amazing, Mr Kershaw.\"\n\n\"Jesus. You should feel it from my side.\" It felt like someone had sheathed my dick in plastic wrap and then forced it into a bowl of hot jello. We both grunted as I bottomed out, her legs drawing high along my sides. We had one of those moments, then, with our eyes staring right at each other, where we both just laughed for the sheer joy and delight of what was happening, and then I made my dick jump inside her and she giggled some more.\n\n\"So, is this what sex is?\" She was running her fingertips along my spine, lazily. \"Should we just lie here and discuss the weather or something?\" I winked, gathered myself, and and then I was pulling out slowly, watching big eyes go narrower and narrower, until they popped wide open again when I jammed back into her. \"Oof!\" she grunted. \"Yeah, that's not what that other guy felt like.\"\n\n\"I would hope not,\" I muttered. I liked thinking she'd never felt this with anyone else. I gave her three or four more thrusts, nice and smooth, hearing the liquid squelch of our bodies meeting. She closed her eyes and moaned, her feet kicking lightly at my thighs.\n\nWe fucked slowly, with none of the frantic haste I imagined she'd probably experience with guys her age. I wanted this to last. She felt great around my dick, yes, but apart from that I was enjoying the closeness, the intimacy I was getting with her. She took me easily now, her body molding itself around mine with a comfort I'd never experienced before, and within another minute or so we were in a steady rhythm that felt like it could last all night.\n\nI kissed her once, briefly, as her eyes fluttered open about halfway through, but for the most part I just spent my time nuzzling her neck, her breasts, the little nipples standing straight up in my mouth. Eventually her hands settled onto my ass, feeling my muscles move as we drove each other fast toward another orgasm. Her flesh was red and hot as we kept going, building the urgency, both of us responding to each other on the deepest level possible; I couldn't believe I was fucking her. I drove straight down, my dick skating across the top of her slit, and when she bit her lip I knew I'd better not change a damn thing.\n\nShe came differently than she had downstairs, with two gasping syllables of warm moist air into my ear, her body quaking slightly; her hands tensed briefly along my asscheeks, I heard her groan a hushed \"God, yes!\" and then she relaxed slowly, her body unclenching. I eased my motion instinctively, figuring she deserved to enjoy this without me bouncing her all over the mattress; hell, I was about to lose it too, and I wanted to remember every second. So I slowed down, fucking straight into her now instead of along her clit. I was blinking sweat out of my eyes.\n\nShe exhaled and laughed, syrupy and bell-like in my ear, and then she nuzzled around my face and gave me a hard, solid kiss. \"Mmm,\" she moaned happily, and when I pulled back I saw huge grey eyes crinkled at the corners, her grin massive beneath that sharp little nose. \"Okay. I think I like sex.\"\n\n\"Same,\" I panted, and holy shit I was about to blow. I clutched at her bony shoulders, needing leverage in my near future, and despite her inexperience Brittany seemed to know what that meant. She planted her feet on the mattress, sighed her way out of the last of her orgasm, and patted the side of my ass with a disturbingly possessive air.\n\n\"Okay,\" she said, laying her head deep into the pillows. \"I'm ready.\"\n\nI didn't reply; I was far too turned on to speak, and there was no need anyway. We both knew what was going to happen next, and I started right away. We panted like racehorses into each other's faces, the guest bed protesting as I picked up steam, but I was past thinking about this: I was a guy with a hard dick inside a willing female. My body knew what to do. Faster and faster I drove into her, relentlessly, Brittany with a grit-toothed look of determination on her face, and before long I could hear my own grunts, then groans, and eventually shouts, and then hers too as I shoved myself as far into her as I could go and unloaded, the semen ripping out of me, feeling like it came from every corner of my body.\n\nI'd never felt so triumphant. Not even when I'd lost my virginity, with Stephanie. Never. I shot into her in oozing, ropy waves, and she stroked my hair the entire time with a smirk under her tightly closed eyes.\n\n* * *\n\nWe lay there afterward, sticky and tired, both of us melting into the mattress. She had her naked limbs all tangled up in mine, and it was just then starting to occur to me that this all felt dangerously domestic. She had her head on my chest, stroking my pubes with delicate fingers.\n\n\"So, yeah,\" she began, making a clear effort to sound casual. \"You should go before I fall asleep on you.\"\n\n\"Oh. Yeah,\" I replied, reluctance and relief coming out of my mouth together. I gave her ass one more squeeze; for all I knew, it would be the last time. I'd never look at her texts the same way again, that was for damn sure. \"I think you're right.\"\n\n\"You should shower,\" she advised, still casual, almost distant. \"You stink like me.\"\n\n\"Right.\" I winced a tad as she unpeeled herself; our bodies were stuck together by any number of fluids, all of which seemed to be attached to something hairy. \"Ouch.\"\n\n\"You caused it,\" she pointed out. \"Half of it, anyway.\" She took a breath, and then propped herself on her elbow beside me. She looked gorgeous. \"So, yeah,\" she said again. She hesitated, a Brittany Pause, flicking her eyes across my nude body. \"I guess that's one Valentine's Day I'll remember for awhile.\"\n\n\"Hell yes.\" I debated whether I should say it, but why not? An affair was the last thing I needed in my life, least of all with a former student, but my God was she ever beautiful. \"Are, uh, you coming back home for Memorial Day?\"\n\nShe narrowed her eyes, trying furiously to look grown-up, still trying for that air of control. But she wasn't fast enough to hide her smile completely. It came peeking out at the edges of her mouth, and she looked casually away before she replied. \"What's wrong with St Patrick's Day?\"\n\nThis time, I smiled too.\n\n* * *\n\nThanks for reading. Again, read all the Valentine's Contest stories and vote for your faves."
    ],
    "authorname": "Voboy",
    "tags": [
        "teacher",
        "student",
        "alumni",
        "infidelity",
        "cheating",
        "younger woman",
        "first time",
        "seduction",
        "valentines day"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/brittanys-do-over"
}
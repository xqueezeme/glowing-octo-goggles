{
    "title": "Ashley's Revenge Ch. 12",
    "pages": [
        "\"It's my turn to have that big cock inside me now,\" Ashley purred as Lindsey lay on the bed trying to catch her breath.\n\n\"Give me a few minutes, my love,\" I smiled at Ashley. \"I'm going to grab a bottle of water; can I get either of you ladies anything?\"\n\n\"A water is good,\" Lindsey smiled.\n\n\"The same,\" Ashley said as she moved up to the head of the bed next to Lindsey. I looked at both of them for a moment and thanked my lucky stars that I not only got to cross the threesome off my bucket list but I got to do it with two amazingly sexy young ladies.\n\n\"You two are easy,\" I chuckled as I stood up and noticed that both girls were watching me and smiling as I grabbed my robe and put it on.\n\n\"That's kind of the pot calling the kettle black, don't you think?\" Ashley giggled as she stretched her long arms up over her head.\n\n\"Yeah, whatever,\" I grinned and headed out of the master bedroom and made my way down to the kitchen. I felt like a kid on Christmas morning with the best presents ever waiting for me upstairs in my big bed. Fucking Lindsey in front of Ashley was intense and by strictly following Ashley's rules I got to see how far I could push her. I felt a bit bad for the way I grabbed her and drained my cock in her hot young mouth so I figured I'd have to make it up to her in the next round.\n\nI grabbed the bottles of water from the fridge and headed back upstairs. I heard hushed tones coming from the bedroom but the minute I walked through the door with the waters both girls stopped talking and looked up at me.\n\n\"Am I interrupting something?\" I asked as I walked to the bed and handed Ashley her water before passing another to Lindsey.\n\n\"No, not at all,\" Ashley said.\n\n\"I'm going to freshen up,\" Lindsey grinned as she popped out of the bed in her sexy white babydoll and heels and bounced her way to the master bath, closing the door behind her.\n\n\"Did I do something wrong?\" Ashley asked as she opened her bottle of water and took a sip.\n\n\"What do you mean?\" I asked as I sat down on the bed next to her.\n\n\"That little stunt there at the end,\" Ashley glared.\n\n\"No, you didn't do anything wrong,\" I smiled. \"I'm sorry if you didn't like that.\"\n\n\"I just felt a little bit too much like a spectator as you were fucking her,\" Ashley sighed and sipped her water. \"She was supposed to be our toy and it was like the two of you got what you wanted and I just got the short end of the stick.\"\n\n\"I'm sorry,\" I said in a low voice. \"I'll make it up to you, I promise. I'm just a guy, you throw a new pretty girl in front of me to fuck and I'm going to be a bit distracted.\"\n\n\"Do you like fucking her more than you like fucking me?\" Ashley pouted.\n\n\"No, I don't. I got to cross the threesome off my list and if you want we can send Lindsey home right now.\"\n\n\"We don't have to do that,\" Ashley whispered.\n\n\"It's up to you,\" I said looking deep into Ashley's blue eyes. \"You're the one I love. Lindsey is our little toy for the night so why don't we show her that?\"\n\n\"How?\" she asked with a big grin.\n\n\"I'm sure we will think of something,\" I said as I saw the bathroom door open and Lindsey sauntered her way back into the room. The sexy lingerie fit her tall, slim body perfectly and her red hair truly stood out as it flowed down over the white lace.\n\n\"I'm surprised the two of you aren't fucking like rabbits yet,\" Lindsey grinned as she walked to the bed and pushed me to the middle with her on my left and Ashley on my right.\n\n\"I'm old, I have to pace myself,\" I smiled.\n\n\"I don't believe that for a minute,\" Lindsey giggled. \"We need to get you out of that robe.\"\n\n\"I agree,\" Ashley said as she reached for my robe and grabbed on to the belt to open it. Lindsey's hands joined her as they played a short game of tug-of-war with the belt before it was finally pulled open.\n\n\"Girls, I still need a minute to hydrate,\" I chuckled as my robe fell open and each of their hands immediately searched for my cock. \"I'm sure the two of you could find a way to occupy yourselves.\"\n\n\"You'd like that, wouldn't you?\" Lindsey giggled as she looked up at me then her eyes moved across my body to Ashley.\n\n\"I know I would,\" I smiled then downed about half the bottle of water.\n\n\"Well, since you're the one that got fucked already you little ginger slut I think you should come over here and eat my pussy,\" Ashley said brazenly.\n\n\"Oh really?\" Lindsey said with eyebrows raised as she stared intently at Ashley.\n\n\"Yes, really,\" Ashley glared back at her as Lindsey crawled over me and landed on top of Ashley's long slender frame.\n\n\"Don't you think you should at least say please?\" Lindsey moaned low as her face was just inches from Ashley's smiling face.\n\n\"Sure,\" Ashley giggled as she wrapped her arms around Lindsey and let her manicured fingernails trace their way up Lindsey's back before she grabbed a handful of Lindsey's long red hair and tugged it back hard. \"Please lick my pussy you dirty little slut,\" Ashley growled as she pushed Lindsey down into position between her legs.\n\nI looked over at Ashley and she winked at me and gave me a big smile. I guess she'd picked up a few tricks from me along the way. Ashley looked back down at Lindsey as she pushed her face down into her black lace covered crotch.\n\nLindsey's hand moved down Ashley's body and slid her panties to the side as she started kissing Ashley's pink pussy ever so softly. Ashley let out a soft moan as Lindsey's tongue darted out and made a few quick little circles around Ashley's clit.\n\nI finished my water bottle and tossed it onto the floor as my eyes were fixed on the two hot teenage girls who were going at it next to me on my bed. Both of Ashley's hands were intertwined with Lindsey's red hair and she was pulling her face down harder into her pussy.\n\n\"Tongue fuck me, you slut,\" Ashley moaned.\n\nLindsey responded by burying her face between Ashley's silky white thighs and she thrust her tongue deep inside of Ashley's sweet nectar. Lindsey's hands moved up the black lace lingerie and pulled it down to reveal Ashley's firm young tits. Lindsey's fingertips quickly found Ashley's hard nipples and squeezed them as she continued sliding her long tongue deep inside of Ashley's pussy.\n\nMy cock was rock hard at that point from watching Lindsey submit to Ashley and give her what she wanted. I pulled my robe off and tossed it to the corner. I leaned up on my side and enjoyed the view as Ashley moaned and groaned as Lindsey worked her pussy over good.\n\n\"Mind if I tag in?\" I asked. Ashley looked over at my raging cock and giggled as she pulled Lindsey up off of her by her long red hair. Lindsey's face was covered with Ashley's juices and she was gasping for breath.\n\n\"Mmm, you may,\" Ashley moaned with lust in her eyes as she pushed Lindsey off the bed. Lindsey tumbled to the floor and then kneeled at the side of the bed as I moved between Ashley's legs and slowly slid her panties off down her soft, smooth legs.\n\n\"Are you all warmed up now?\" I asked with a grin as Ashley nodded up at me as she bit down playfully on her supple lower lip.\n\n\"I am,\" she nodded as I slid her legs and heels up over my shoulders and positioned my throbbing cockhead at the entrance of her dripping wet pussy as Lindsey watched intently.\n\n\"How does she taste?\" I asked Lindsey with a grin as I reached out and grabbed a handful of her long red hair from behind her neck.\n\n\"Sweet,\" she stammered, \"Very sweet.\"\n\n\"Let her taste,\" I groaned as I pushed Lindsey down on to Ashley and they started to kiss as I slowly slid my raging hard cock deep inside Ashley's luscious dripping pussy. Ashley moaned as Lindsey's tongue slipped inside her mouth as my cock split her tight cunt in two with slow, deep strokes.\n\nI moved Ashley's slim body to the center of the bed as I fucked her, allowing Lindsey to once again join us on the big bed. I loved watching the two hot young lingerie clad girls making out as I pummeled Ashley's pussy with my hard, married cock. \n\nLindsey was kneeling to my left as her and Ashley continued to kiss and I looked down and saw that Lindsey's hot little pussy had already totally soaked her panties through. I reached over and slid them to the side and then slipped my ring finger and middle finger of my left hand deep inside of her ht pussy causing her to moan deeply into Ashley's mouth as they kissed.\n\nTo prove that I could just never have enough when it comes to hot sex I found myself wondering which of Ashley's other hot friends I could be finger fucking with my right hand to complete the perfect foursome. Since I had the redhead and the blonde I was thinking a brunette would do nicely. I can dream, right?\n\nLindsey was grinding her body back down onto my fingers, engulfing them inside her down to my wedding ring. My cock was rock hard as I continued to pummel Ashley's pussy with every deep stroke and I could feel both her and Lindsey's pussy getting ready to explode.\n\nAshley was moaning loudly as Lindsey moved down to her neck and was kissing and nibbling her way to Ashley's tits. I smiled when our eyes met and Ashley bit down harder on her soft lower lip as Lindsey slid Ashley's lingerie down and started sucking on her hard pink nipples.\n\nI took a deep breath and slid slowly out of Ashley's pussy causing her to pout as she looked up at me. I slid my fingers from Lindsey's dripping wet pussy causing her to groan but she kept on sucking on Ashley's firm young tits.\n\nI moved up the bed so I was across from Lindsey with Ashley lying there between us and I started to work on Ashley's left breast as Lindsey worked her right. Our lips and tongues devouring Ashley's mounds as I took Lindsey's hand and slid it down with mine between Ashley's legs.\n\nI guided the index finger from Lindsey's right hand inside of Ashley's steaming pussy causing Ashley to let out a long moan. I added the index finger of my left hand and Ashley groaned and then giggled with delight as Lindsey and I finger fucked her in unison as we kissed and nibbled on her perky breasts.\n\nAshley reached out and grabbed a handful of both Lindsey's and my hair and pushed us down into her body as we each took as much of one of her breasts as we could into our mouths as our tongues worked over her hard nipples.\n\nAshley's moans grew louder and louder and her breathing more labored as Lindsey and I sent her body into overload. Ashley's pussy was drenched and I could feel both my hand and Lindsey's hand were completely covered in her juices. Our index fingers slipping in and out faster and harder until Ashley let go and screamed as she pulled both of our hair hard. Her pussy exploded drenching our hands and the sheets beneath her body.\n\nI glanced up at Lindsey who had her eyes closed as she rolled her tongue slowly around Ashley's hard right nipple so I mirrored her on the left. We both teased Ashley by slowing our tongues and our fingers until Ashley had completely collapsed back onto the bed, releasing our hair as she gasped for breath.\n\n\"Fuck,\" Ashley moaned, \"That was wild.\"\n\n\"It was hot as hell,\" Lindsey grinned as she looked up at Ashley then over at me. We slid our fingers from Ashley's pussy and Lindsey grabbed my hand and licked both of our fingers clean.\n\n\"You're both amazing,\" I smiled as I looked into Ashley's eyes as they sparkled in her post orgasm glory.\n\n\"Has your wife ever done anything like this for you?\" Ashley asked with a knowing grin.\n\n\"You know she hasn't,\" I said as Lindsey released by hand and started slowly running her hand up and down Ashley's torso tracing the black lace.\n\n\"So why do you stay with her?\" Lindsey asked causing Ashley to nod.\n\n\"Yes, why do you stay with her when you can have me?\" she grinned.\n\n\"Especially if your wife is cheating on you, you deserve to be happy,\" Lindsey said.\n\n\"Aren't I cheating on her?\" I asked to neither one of the girls in particular.\n\n\"That doesn't count if you knew she was cheating on you first,\" Lindsey said.\n\n\"But, I didn't. I fucked Ashley before I knew she was. And really, I still don't know for sure that she is cheating,\" I countered.\n\n\"Look, people wind up with the wrong partners all the time,\" Ashley smiled. \"The point is if you know you're not with the right person you should make the change and be happy.\"\n\n\"If your wife is cheating on you, would you want to dump her and be with Ashley?\" Lindsey asked and I truly had to think for a moment and ask myself if my wife was cheating if there really was any reason why I shouldn't be with the hot, young schoolgirl who just invited her equally hot young friend to join us in bed.\n\n\"Yes, Ashley is amazing,\" I smiled.\n\n\"Well, there you go,\" Lindsey giggled and then leaned down and kissed Ashley hard on the lips. \"She is pretty damn amazing.\"\n\n\"So we can make your wife pay for what she's done to you?\" Ashley giggled and grinned.\n\n\"I guess if we can catch her in the act, but I still think we should wait to reveal our relationship until you get out of school,\" I said as Lindsey playfully nibbled on Ashley's right earlobe.\n\n\"What fun is that?\" Lindsey asked as she looked up at me.\n\n\"It's not about what's fun,\" I said.\n\n\"She's eighteen,\" Lindsey countered. \"You know all of your friends are going to be jealous as fuck that you get to tap this fine piece of ass.\"\n\n\"I have no doubt about that,\" I smiled. \n\n\"I want to make his wife watch us as we fuck,\" Ashley said with a wicked grin. \"I want to show her that she's been replaced and that her evil bitch ways won't be tolerated any longer.\"\n\n\"Sounds like fun to me,\" Lindsey giggled.\n\n\"You two are bad, remind me to never make either one of you mad,\" I said as I wondered just how Ashley would get back at me if I were to ever make her truly mad.\n\n\"So how do we catch her in the act?\" Lindsey asked.\n\n\"We kind of already have,\" Ashley said. \"We tracked her car to a no-tell motel in the middle of the day.\"\n\n\"Sounds like proof to me,\" Lindsey said as she snuggled up closer next to Ashley.\n\n\"It certainly doesn't look good for her, I'll admit to that,\" I said. \"But right now she's the last thing I want to think about when I have two sexy young girls in my bed for me to play with.\"\n\n\"Oh, so we're just toys?\" Lindsey said faking a stern look.\n\n\"Well, you are,\" Ashley giggled as she grabbed Lindsey and pulled her up by her long red hair and kissed her.\n\n\"True, you did invite this little slut here to be our toy,\" I growled as I reached out and pulled Lindsey's body over to me as Ashley continued to kiss her.\n\n\"Mmm, fuck,\" Lindsey groaned as she became the meat in Ashley's and my sandwich. My big hands wrapped around her waist as Ashley's arms wrapped around her neck and we each pulled her in our direction.\n\n\"She's mine,\" I moaned.\n\n\"She's mine,\" Ashley groaned as she pulled Lindsey closer and kissed her.\n\n\"I guess we'll just have to share her,\" I said as I grabbed each side of the white lace panties and ripped them right off of Lindsey's slim body. I guided my hard cock deep inside of her dripping wet pussy as my big hands slid up to her chest.\n\nI watched as Lindsey and Ashley made out in earnest, their tongues slipping in and out of each others' mouths as they kissed. I liberated Lindsey's firm young tits from the white lace and squeezed down firmly on her hard nipples causing her body to press back down even further onto my raging cock that was stretching her pussy with every thrust.\n\nAshley opened her eyes for a moment and saw me watching her. She let out a soft moan as she grabbed and then tugged Lindsey's hair back hard and went in for Lindsey's neck. My cock slowly pumped Lindsey's tight little pussy as my hands cupped and massaged her tits as Ashley nibbled her way slowly down Lindsey's neck.\n\nI moved my arms around Ashley and pulled her and Lindsey closer together and closer to me. My fingertips slid up Ashley's back and grabbed onto her long blonde hair and I tugged it back hard bringing her up off of Lindsey's neck so I could kiss her. Ashley slid her tongue into my mouth as I fucked Lindsey hard. Lindsey moaned and began kissing and nibbling on Ashley's neck.\n\nIt was the first time I'd ever kissed one girl while fucking another and I had to say it was pretty fucking hot. I've heard guys say they'd never want a threesome because it would just be awkward and clumsy and I guess that may be true for some guys. For me, I was finding the experience to be hot to a mind-blowing degree.\n\nAshley went back and forth kissing me and Lindsey and Lindsey and I moved down to Ashley's soft neck when the other had her sweet tongue. I could feel my balls welling up and I knew that I didn't want to break Ashley's golden rule that she get every drop of my cum so I did what any straight American male would do and tried to think about baseball. It worked for about a fraction of a second and then I slid out of Lindsey to try and regain my composure.\n\n\"More,\" Lindsey groaned as I pushed her down onto the bed and pulled Ashley's lingerie clad body to mine.\n\n\"Do you like our little toy?\" Ashley giggled as I leaned in and kissed her passionately.\n\n\"I do, but I'm so close,\" I groaned.\n\n\"Mmm, good boy, you remembered my rule,\" Ashley said as she stared into my eyes and then turned away from me and presented me with her perfect little ass as she hovered over Lindsey's body.\n\n\"Well, you reminded me enough,\" I smiled as I watched Ashley's tongue trace its way up Lindsey's sweaty chest until the two of them were once again making out like Charlie Sheen with a bed full of hookers. Ashley wiggled her ass and I didn't need any more motivation so I reached out and put my big hands firmly on her hips and I slid every inch of my meat into her velvety cunt from behind.\n\n\"Fuck me,\" Ashley moaned between her kisses with Lindsey and I thrust my cock deep inside of her with hard, penetrating strokes. Lindsey wrapped her long, skinny legs up around Ashley's back and I almost caught a white stiletto in the eye but the view was well worth it.\n\nI took my hands off of Ashley's hips and slid my left hand up her body until I had a handful of her now completely messed up blonde hair wrapped between my fingers. My right hand slid down Ashley's thigh until I found Lindsey's pussy which was literally steaming by that point. I slid my ring and middle finger deep inside of her as I pulled Ashley's hair back hard. My cock was on auto-pilot as it slammed Ashley's pussy harder and deeper as I tried my best to make that moment in time last as long as I could.\n\n\"Yes!\" Lindsey screamed as I finger fucked her tiny little pussy.\n\n\"Fuck me, baby!\" Ashley moaned as I pulled her long hair back harder and repeatedly pounded her amazing teen pussy with my hard, married cock.\n\nI knew I was close, I felt an absolute feeling of euphoria that I'd guess some people would call an out of body experience. At that moment I had never felt physically better as I penetrated the two sexy young high school girls at the same time. Both of their pussies were gushing and they coated my fingers and cock respectively with their sweet juices.\n\nI felt myself starting to cum so I worked my fingers inside of Lindsey as fast and deep as I could and I felt her pussy walls contract around my fingers as she let out a scream of passion. At the same moment I felt Ashley's tight pussy gripping down hard on my prick as she went into full orgasmic convulsions as I tugged her hair back hard whipping her head back so she was looking up at the ceiling.\n\nAs if I were watching the scene in slow motion I took a deep breath and let my cock explode, emptying ever last drop of cum that I had deep inside of Ashley's waiting pussy. She grinded her cute little ass back against my body and her pussy milked me for everything I had.\n\nI slowed my fingers down as Lindsey rode out her orgasm and I slipped them free at the same time I slid my semi-erect cock from Ashley's pussy causing the girls to collapse together on the bed.",
        "\"Now that was a job well done, if I say so myself,\" I chuckled as I reached for one of the girls bottles of water that was sitting on the nightstand and took a drink as the two teenage vixens laid next to each other and tried to catch their breath. \"Are you ready for another round?\" I asked.\n\n\"I think we need a breather now,\" Ashley smiled and Lindsey just nodded and grunted in agreement.\n\n\"Well then, I'll take a shower and make us some dinner,\" I grinned as I popped up from the bed. \"Sound good?\"\n\n\"Yes,\" both of the girls said in unison. \n\n\"Get your rest, we still have a long night ahead of us,\" I said as I picked up my robe and put it on.\n\n\"Are you sure you didn't pop a Viagra or something?\" Lindsey asked with a grin.\n\n\"Nope, this is all me. What kind of guy needs a little blue pill when he has such sexy young girls at his beck and call?\" I winked and then walked into the master bath to shower.\n\nWhen I was done showering, I came back into the master bedroom and found the two girls curled up together asleep on the bed. Their lingerie was now in a bit of a state of disrepair but they were still an amazing sight. I went down and threw together some shrimp and some pasta and I have to admit I did check on my fantasy baseball team to make sure that my lineups were set for the night. After a while I heard the shower running and not long after that the two girls appeared in the kitchen each wearing a short bathrobe.\n\n\"That smells great,\" Lindsey smiled.\n\n\"Yeah, he cooks too,\" Ashley giggled.\n\n\"Damn, I see why you think he's the perfect man,\" Lindsey smiled as she shot me a penetrating stare.\n\n\"I don't know if I'd say I was perfect,\" I said as I started plating the pasta as the girls sat at the table.\n\n\"Yeah, perfect is kind of pushing it,\" Ashley said with a grin. \"After all, he still has that fucking wife of his.\"\n\n\"Oh, we're going right back to that?\" I asked as I opened the bottle of wine I had waiting and poured us three glasses.\n\n\"I'm just saying, we'd have a lot more fun if she wasn't around,\" Ashley said as I handed her a glass.\n\n\"You think she'll still want me as much when my wife is gone?\" I asked as I handed Lindsey a glass.\n\n\"Nope,\" Lindsey answered straight faced and Ashley shot her a glaring look. \"I'm kidding, I'm kidding. Take the daggers back into your eyes sweetie. Mr. Jones, you are all she has talked about for years. I'd be crushing on some new boy at school and all she'd talk about was the hot guy next door that makes her melt.\"\n\n\"Good to know,\" I tried to contain my smile but I am sure that I didn't do a good job of it.\n\n\"Don't let it go to your head,\" Ashley smiled, \"Unless it's the little one.\"\n\n\"It's not so little,\" Lindsey giggled then took a sip of her wine.\n\n\"You two are a lot of fun,\" I said as I brought the food to the table and joined them. We ate our meals and drank a couple of bottles of wine then we wound up back upstairs in bed.\n\nAfter another marathon session, which included us drinking another couple bottles of wine, we all collapsed on the bed. I do remember feeling like a king as I drifted off to blissful sleep with Lindsey on my left and Ashley on my right.\n\nThe next thing I remember is that I awoke from what I thought was a very wet dream of a hot, young girl sucking my cock and I quickly realized that it wasn't a dream at all. I felt hot, wet lips gliding up and down my already rock hard cock and I let out a little moan.\n\n\"Ash, you naughty girl,\" I said still half-asleep and groggy from the wine when a finger moved up my body and landed on my lips.\n\n\"Shh,\" a voice from under the comforter whispered as I looked to my right and saw Ashley sleeping there beside me in the dim moonlight.\n\nI sobered up enough to know that is was the sexy redhead that was currently working her magic on my cock beneath the comforter. I thought to myself that I certainly did not make a mistake judging the blowjob contest earlier in the day as her technique was excellent.\n\n\"What are you doing?\" I whispered as Lindsey moved up my body and straddled me.\n\n\"What do you think?\" She whispered as she lowered her hot, wet pussy down ever so slowly on to my cock until I was buried as deep as I could be inside her.\n\n\"Fuck,\" I groaned.\n\n\"Exactly,\" Lindsey giggled quietly as she worked her tight teenage body up and down my cock in blissfully slow motions. I reached for her in the darkness and my hands found her hips as she continued to tease my cock with painfully slow strokes.\n\nMy body went into a state of hypersensitivity and not only could I feel Lindsey's tiny pussy as it slowly traveled up and down my rock hard raging cock but I could also feel Ashley's warm breath on my neck as she slept just inches away from us. Lindsey leaned in and kissed me soft and deep, her soft red hair fell down onto my skin and it was all I could do to not start thrusting and pounding myself deep inside of her hot little cunt.\n\n\"Do you like that, daddy?\" Lindsey whispered softly into my left ear before she nibbled down softly on it. The combination of her hot breath and her naughty little girl voice sent shockwaves through my system and I caught myself before letting out a deep moan.\n\n\"Yes,\" I whispered as quietly as I could as my fingertips dug into Lindsey's ass as she continued her snail's pace assault on my cock.\n\n\"Good, because I want your cum,\" Lindsey moaned quietly in my ear as I could feel her pussy contracting and releasing as she slid slowly up and down engulfing my throbbing cock then almost slipping off.\n\n\"But,\" I whispered then took a deep breath.\n\n\"But what, daddy?\" Lindsey giggled softly as she nibbled on my neck.\n\n\"Ashley's rule,\" I groaned as quietly as I could as Lindsey slid herself down hard completely taking my throbbing cock inside her.\n\n\"What about it?\" Lindsey grinned as she put her hands up on my shoulders and looked down at me. Her long red hair falling on both sides of my face making it seem like we were in our own little world at that point.\n\n\"She'll be pissed,\" I whispered as Lindsey's pussy gave my cock exactly what it wanted as she looked down into my eyes and smiled. She contracted and released her tight pussy muscles around my manhood and I knew that I wouldn't be able to hold out much longer.\n\n\"Only if she knows,\" Lindsey smiled as she contracted her pussy around me for what felt like a minute before she let it relax. \"Besides, I have a rule too,\" Lindsey grinned.\n\n\"What's that?\" I asked as Lindsey's hair tickled my skin as she watched me squirming beneath her.\n\n\"It's simple,\" Lindsey smiled as she gyrated her hips slowly and slid her tight, wet pussy up and down my hard cock. Our eyes locked on each other and she bit down on her lower lip as she rode me slowly, each little stroke bringing me closer and closer to exploding.\n\n\"What?\" I moaned low as I felt my balls welling up as Lindsey's sweet velvet pussy grinding down so slowly on my cock that I couldn't hold back anymore and exploded deep inside of her. I filled her tiny pussy up with more cum than I could believe as she kept up the slow, deep strokes until I felt her pussy contract harder than I'd ever felt it around my cock as she bit down on her lip harder and let out one soft little squealing noise.\n\n\"Ashley doesn't always get what she wants,\" Lindsey moaned quietly into my ear and then she kissed my lips as her pussy finally let go of its death grip around my cock. \"Sweet dreams, daddy,\" Lindsey giggled, kissed me one more time then slid her pussy up off me. She moved back next to me and snuggled up close right across from where Ashley was thankfully still asleep. Lindsey put her head on my shoulder and then drifted off to sleep."
    ],
    "authorname": "TallMarriedMan",
    "tags": [
        "ashley",
        "revenge",
        "blonde",
        "schoolgirl",
        "cheating",
        "redhead",
        "lingerie",
        "threesome",
        "lindsey",
        "married"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/ashleys-revenge-ch-12"
}
{
    "title": "Subway Girl Ch. 13",
    "pages": [
        "\"Texas Toast? Alicia, calm down, tell me what's going on.\"\n\nAlicia was explaining to me how she almost got kicked out of her recovery program that day. Apparently she refused to eat something called \"Texas Toast\" that I had never heard of, but she described it as frozen white bread dripping with saturated fat. It sounded like garlic bread to me, all buttery and tasty. She said she finally broke down and ate it, but cried and it was really hard for her and she almost walked out. I listened patiently thinking how I wished the hardest part of my day was eating garlic bread, but I didn't say that. Instead I surprised myself by saying I was proud of her for sticking it out. Texas Toast. Sheeze. I went up and down stairs hundreds of times carrying heavy loads in the heat and dealing with Joe, and Alicia had to eat \"Texas Toast.\" It was making me hungry just hearing about it.\n\nAlicia had started her outpatient program a week prior and on the first day I was waiting for her when she came off the subway. She was looking cute in her jeans and boots, but she also looked a little tired and stressed out. \"Wow,\" she said, hugging me. \"That was intense!\"\n\n\"Tell me what it was like?\" I probed.\n\n\"Well, first we had to eat breakfast together! Breakfast and lunch every day, Ray! And you have to eat whatever they serve unless you have some type of allergy that's already been documented in your file. Today wasn't so bad, but the girls told me it varies a lot. Once we ate, they immediately launched us into an activity, the idea being that we would be so busy doing something that we wouldn't obsess over what we just ate. Today they had us making these little gift baskets for people in a nursing facility. That part was kind of fun, actually. Then we had group therapy, then individual therapy, then lunch, then another activity --- journaling this time -- and then a guest speaker came. The afternoons are always different, with some type of education or a guest speaker each day. Basically they keep us busy all day long, shuffling around and...\" Alicia paused and took a breath, slowed down and met my eyes. \"It wasn't that bad, Ray. It really wasn't bad at all. I am going to do this. And I met a girl who is pretty cool. A few of them aren't, but this girl Melanie and I got to talking and... It was good.\" She gave me a tired smile and I kissed her cheek.\n\nDuring the walk home, Alicia told me she needed to talk to me about something and I got a little nervous. Something was bothering her enough that Margaret had instructed her to talk to me about it and she must have heard the trepidation in my voice because she said, \"It's nothing bad, I promise. I just told her I would talk to you about it.\" I was feeling kind of shell-shocked by all the stuff going on and was relieved I wasn't about to have another bomb dropped on me, but when I got to her apartment, Alicia looked nervous.\n\n\"Sit down,\" she said, gesturing to the couch. I took a deep breath bracing myself.\n\n\"Margaret says I am doing really well with my therapy, but I have this one really big fear and she wants me to talk to you about it.\"\n\nI kept quiet waiting for her to go on, but she hesitated. Finally, in a very small voice Alicia asked, \"Are you going to stop loving me if I get fat?\"\n\nI hadn't thought about the possibility of Alicia getting fat, so I thought about it before answering. I couldn't imagine not loving her, but I couldn't really picture her fat either. I tried picturing her as a round little butterball with a couple of chins and I started grinning. But then I knew the truth and I wanted to be honest. \"I am worried that if you got fat you would be miserable. Your personality would change. And I couldn't stop loving you, but if you couldn't walk around New York or go upstairs quickly, that would be tough.\"\n\n\"Not that fat, Ray! Oh my god, I could never get that fat and handicap myself. I meant what if I gained like... ten or fifteen pounds?\"\n\nI chuckled, \"Oh well, that is a relief. Honestly, Alicia, I thought you meant FAT!\"\n\n\"Well, that is fat!\"\n\n\"Ten or fifteen pounds?\" I switched over to my Sha-Nay-Nay voice, \"Girl, that would just make you even more scrumptious and dee-licious! I would eat you up, slap a little butter on those buns, and take a bite!\"\n\n\"I'm serious, Ray!\" Alicia pouted.\n\n\"Alicia, you can't be serious. Ten pounds? Fat? Come on.\" I was getting exasperated. Alicia didn't answer and I could see that she was serious. I realized I needed to educate her about something. \"Mind if I use your computer? I trust you have virus protection?\"\n\n\"Yeah, why?\"\n\n\"I'm about to show you what sexy looks like to a guy.\" Alicia went and changed clothes while I searched for what I wanted to show her. It took a few minutes because I was out of practice, but soon enough I was navigating around a porn site looking for what I wanted her to see, still photos of real women. \"There you go, what do you think of her?\"\n\n\"Chubby?\" Alicia asked.\n\n\"Nope, hot. What about this one.\"\n\n\"Boobs too small?\"\n\n\"Nope, hot. Natural hot. And this one?\"\n\n\"Oh, she is overweight for sure.\"\n\n\"Nope. She is hot for sure.\"\n\n\"Ray!\" she laughed, \"I'm starting to think you like them all!\"\n\n\"Well, I am assuming they all have spectacular personalities,\" I grinned. \"Now this one?\"\n\n\"Oh, she has a fantastic body, I'd love to look like her.\"\n\n\"Yeah... but she looks hard. Kind of like a dude. She might work out several hours a day, but if it was natural, it would be okay. Now this one?\"\n\n\"Oh Ray, you have to admit it: she's fat.\"\n\n\"She is HOT! Man, if Carlos saw this he would lick the computer screen.\"\n\n\"Seriously, Ray? Are you saying my butt could get that big and you would like it?\"\n\n\"Baby, I'd use if for a pillow every night.\"\n\nAlicia swatted me then said the next one looked good.\n\n\"She's too skinny. No hips. But her face is nice.\"\n\n\"You are a lot easier on the girls than other girls are.\"\n\n\"Exactly. Most guys are. You don't have to look like a Victoria's Secret model to be sexy, Alicia. Sexy comes in all shapes and sizes. You look amazing, but how you act has a lot to do with your sexiness. You are hot and beautiful and you have a lot of wiggle room before you could ever be considered even chubby.\"\n\n\"I am going to remind you of this conversation when you think my butt is big and don't want to have sex with me anymore!\"\n\n\"I dare you to grow that butt!\" I grinned at her, getting kind of turned on at the thought.\n\n\"Oh yeah, what would you do if I did?\"\n\n\"Bury my face in it.\"\n\n\"Ray!\" she squealed and swatted me again, then leaned in and kissed me, sweetly and slowly. \"Well, can you make do with an average-sized ass for now?\"\n\n\"Baby, there is nothing average about your ass,\" I said, and reached down to grab it and pull her on top of me. \"I am going to show you what I think of this ass,\" I whispered in her ear, slipping my hand down inside her yoga pants and squeezing both cheeks firmly. Alicia moaned in my ear and whispered, \"Ray, will you do what he is doing?\" I looked up at the computer screen and saw that I must have hit a button because there was a video of a couple going at it and the guy was eating the girl from behind.\n\n\"Whoa,\" I laughed, \"You are a naughty Dream Girl!\"\n\nBut of course I was more than willing to fulfill her wish -- which coincided with mine anyway -- which was to bury my face deep into her with her cute butt sticking up in the air. It proved to be a very good angle that we both appreciated. Then Alicia informed me that I could skip the condoms since her pills had finally kicked in. I had slid into her without a condom a few times in the past, but had never stayed there very long and this time the sensation was all-consuming, overpowering. The combination of the porn, the oral sex, making her cum on my face, even the talk about her butt got me all worked up. But the feeling of skin on skin had me moaning loudly. \"Fuck, you feel so good.\" I said, right before releasing deep inside her. I felt closer to her than ever and told her how much I love her and her body.\n\n*****\n\nA few days later I stopped by the flower shop and when Tray informed me that Alicia had just been there.\n\n\"Really?\" I didn't know what to think about that. \"To give back your writing?\"\n\n\"No, she already emailed me about my writing and I sent her the next chapter. She was just passing by and came in to say hello. I really like her, Ray, she's surprisingly cool.\"\n\n\"Yeah? What, you didn't think I would have a cool girlfriend?\"\n\nTracy laughed a little defensively, \"Oh no, I didn't mean that. I just think she looks really conservative, like a cheerleader almost, but then she says things that surprise me.\"\n\n\"Like?\"\n\n\"Wouldn't you like to know?\" Tracy smiled coyly, but then she went on. \"Well, like I said, she looks like bubbly sunshine, but once I started talking to her I realized she definitely has some edge to her. She made a few funny and insightful comments about my book. Oh, and she is crazy about you, but you must know that.\" Tracy laughed.\n\n\"Yeah,\" I laughed, reminded of the blessing that I don't blush. \"Pretty lucky for me.\"\n\n\"You are both lucky.\"\n\nI was feeling a little self-conscious and I was ready to change the subject. \"I brought your next chapter back and thought I would pick up some flowers for her while I am here.\"\n\n\"Oh yeah? Ready for red roses now?\" She teased me.\n\n\"Oh, we're way past that. I'm ready for the 'I'd-love-you-even-if-your-butt-gets-big color'.\"\n\n\"Oh my god,\" Tracy laughed. \"You are so funny. Hey, I know Alicia likes those hydrangeas over there.\"\n\n\"Really? Looks like something my Grandma would have in her yard. Pretty though.\"\n\n\"Yeah, they are really pretty. The colors within the flower are determined by the acid in the soil. You can put baking soda on the ground and they will turn into more of a pink.\"\n\n\"Whoa, that's cool. I like them blue like that.\"\n\n\"Well, so does Alicia,\" she confirmed as she walked over and started making up a bouquet. \"And these are on the house.\"\n\n\"What? Tracy, I don't want to do that,\" I said, reaching for my wallet.\n\n\"I want to, Ray. I don't really make money off of guys like you anyway,\" she laughed. \"Weddings are my bread and butter. Besides, you introduced me to two really cool people and I want to do something for you.\"\n\n\"Two? William?\" I asked.\n\n\"Yeah, he's been emailing me too,\" she smiled. We talked about her writing for a while and she said William had pretty much the same opinion as I did but just used different adjectives. I laughed at that. \"Maybe a double date is in our future?\" I asked.\n\nShe smiled and said she wasn't sure William was attracted to her. \"It might just be that he is interested in my writing. I'm not everyone's cup of tea, you know.\" She winked at me and gestured to her tattooed arm.\n\n\"Oh, you definitely have his number,\" I told her. As we said goodbye, I thought I'd better talk to William about not screwing around with my friend. I hated to think about Tracy just being his latest conquest.\n\n*****\n\nA few days later Alicia asked me to come to a group counseling session with her at her outpatient program. Margaret would facilitate, and all the women in her recovery group would be bringing a family member or support person, so of course I would go. Having never been to such a thing, I really did not know what to expect. There were about twenty people there, all sitting in a circle on metal folding chairs. Margaret had us all introduce ourselves and state our relationship with the patient. There were boyfriends, husbands, moms, friends, and even a sibling there to support the women Alicia met with every day.\n\nI recognized some of the women by name and remembered some of the things Alicia had told me about them, such as Melanie, who Alicia said was her favorite, someone she could hang out with. Then there was Sandra, who Alicia didn't think was ready to change. Ellen was one who always argued with Margaret, and Kim had serious anger issues. Sara was a bit older and one of the two married women. I noticed her husband, Doug, had body language of someone who is highly irritated. And then there was little Lily looking frail and scared.\n\nMargaret spoke to the group about how things might change once the women finished the program and what kind of support they would need. She asked the group what their concerns were about after-care and Melanie's mom went first and got pretty emotional about the lying that went on and not feeling like she could believe anything her daughter said.\n\nEllen's fianc\u00e9 spoke next and said he was concerned about ongoing health problems and Ellen's ability to be a healthy mother. He wanted a family and Ellen said she did too.\n\nLily's mom clasped her hand the whole time. She said a few words, but Lily just sat there and cowered. I felt really sorry for her. But not as sorry as I soon felt for Sara.\n\nDoug actually said that Sara better not get fat. I heard a collective intake of breath and the room got quiet as I watched Sara fidget in her seat. I was surprised Margaret didn't say anything, so I interjected, \"You mean really fat, right? Like obese, right?\"\n\nDoug looked at me and said to the group, \"She was thin when we got married. I want her to stay that way. What's wrong with that?\"\n\nI stared at him and then looked at Sara who was looking down and not meeting anyone's eyes. He started to go on and on about how she had gotten chunky in the past and he had put up with so much from her. Why couldn't she be like other women and just control herself without going off the deep end? He used the word \"fat\" again and I felt myself getting increasingly annoyed. Doug wasn't anything special; Sara was definitely the better looking partner in the pair, yet he was so arrogant about how at work events and such he needed Sara to present herself well and he uttered the word \"fat\" again. I noticed Sara cringe every time and I was getting really upset. I started thinking, to myself, \"Say fat one more time, asshole, and I am going to rip your head off,\" but he kept talking about what he expected from a wife and I glared at him, almost daring him to say fat once more so I could smash my fist into his face, but he didn't. Instead he babbled on about how yes of course he loved her, but he wasn't going to be phony and he didn't marry her expecting her to get fat and that is when rage got the better of me. The words came out of my mouth in a voice I did not recognize: \"Say fat one more time, mother-fucker, say fat once more.\"\n\nThe room was silent with everyone staring at us and he looked at me in shock that quickly turned to anger and he drew the word out very slowly, \"Fat.\"\n\nI jumped out of my chair and charged towards him as he sprung out of his chair too. I got the first swing in, and he tried to duck, but it connected with the side of his head and he lost his footing and fell back towards the chairs and knocked it over causing it to hit the ground with a loud clang. But he regained his footing quickly and came back at me swinging. I saw his fist coming and ducked to miss his right hook and instinctively sunk a swift jab to his gut. It felt like time was going in slow motion, although in actuality it happened extremely fast and I was just reacting, but before I could land another punch, someone was holding my arm. Damn, two good hits and someone already intervened when I had him just where I wanted him.\n\nI found out later there were a few guys holding me back and there was a lot of chaos, a cacophony of yelling and crying going on but to me it all seemed a blur. Guys were pulling me, and Margaret was yelling at them to get me outside, but I just looked for Alicia's face to make sure she was okay. Her eyes were big but she was grinning.\n\nThree guys pulled me outside and as soon as we got out the door, one of them went back inside while another said, \"Thank goodness someone had the balls to do that,\" and he shook my hand, which seemed really odd. I was wondering why he hadn't done anything himself if he thought it was such a noble thing to do.\n\nAlicia came running out the door and said, \"Oh my God, Ray! I have never seen that side of you!\" She was smiling, but then got a worried look on her face and said, \"We'd better go. That ass is talking about calling the cops and pressing charges!\"\n\n\"I'll stick up for you, man,\" the other guy said. \"The fact that he stood up could be interpreted as provoking you and you defending yourself. That's what I would say as a witness, self-defense.\" He turned to Alicia and said, \"He didn't get hurt too bad, did he?\"\n\n\"Well, no, he isn't even bleeding, but his ego is damaged, badly damaged.\"\n\nSo Alicia and I scurried through the crowd on the sidewalk and made it to the station just as a train pulled up. We were laughing about our \"getaway\", but really I wasn't worried about being apprehended by the police. I might be a little worried if the guy was seriously hurt, but he wasn't.\n\nWhen we got to Alicia's apartment, it took a while for my adrenaline to settle down, but after an hour I almost forgot about what happened except for the slight throbbing in my hand.\n\nThen Margaret called. After talking to Alicia, she asked to speak to me. She said she was able to calm Doug down so he didn't call the police or file charges. I said thanks and that I owed her one, to which she answered, \"Yes, you do, Ray. You owe me some therapy.\"\n\n\"What?\" I exclaimed, feeling tricked. \"I don't need therapy! That guy was a complete ass and I just did what everyone else was thinking.\"\n\n\"That may be true, Ray, but you pounced on him. I was watching you and while I think your anger was legitimate, it was a little out of skew for what was going on. I think you have some anger inside you that needs to be dealt with.\"\n\n\"What do you mean? I am a mellow guy-- just ask Alicia.\"\n\n\"Well, Ray, it couldn't hurt and it might help. Besides, you owe me. Three sessions is all I ask.\"\n\nAnd that is how I found myself in therapy, something I never would have planned. I came to learn that I had never properly grieved the loss of my mom, how I needed to forgive my dad, and how I had to find a way to express anger instead of keeping it inside and unloading with violence. Margaret had me take a look at some corny books about the stages of grief and one about loving someone who self-harms.\n\nMargaret asked for three sessions but I ended up going for five extra and it wasn't bad at all. I think some of the things I learned will help me with Alicia and even with my dad, so all in all I am glad for Doug and his big fat mouth.\n\n*****\n\nAlicia completed her outpatient program and started working full-time at her job. She found a good roommate situation with this guy named Victor. He seems pretty cool and very gay, but the best part was that he travels for work a lot so we will get the place to ourselves sometimes. Alicia really likes him and the apartment is stylish and clean. Apartments are so small in New York that it really helps if the roommate isn't into clutter or messy and Victor knows how to decorate.\n\nI helped her pack up her old place and move. As we were putting her stuff away in the kitchen, Alicia showed me the inside of his refrigerator. \"Look! I think Victor has man-o-rexia,\" she whispered. She vowed to be a healthy example to him as she proudly unpacked her oatmeal. \"Carbs are your friend, Victor. Make peace with carbs,\" she whispered, although he wasn't even home.\n\nWe started running together and it was really fun at first, but then she started getting obsessed and, honestly, a bit too skinny --although I never said anything about that. It was mostly how intense she was getting about mileage and improving her time and it started becoming a drag. Luckily Margaret convinced her she was slipping into very dangerous territory right before Alicia signed up for a marathon. Alicia actually agreed to back off.",
        "Alicia calls her parents every few days and works hard at mending that relationship. I am both relieved and surprised that they don't seem to hold any grudge against me. They even invited me to come to California for Christmas, so that is what we are planning to do. I'll get to meet Alicia's sisters and see where she grew up. Janice has called me a few times and tries to act like she is just being social, but then she always finds a way to ask, \"So, how Alicia is really doing?\" I can honestly answer that Alicia is doing really well.\n\nI didn't tell her mom that we had our first fight because her work had a party with a bunch of food and Alicia got really anxious about it, thinking everyone was watching what she was eating or not eating. I was stoked to be around all that delicious free food and told Alicia she was being self-absorbed and everyone else was just thinking about themselves. She got angry and so did I. Then I realized that she gets nervous around social events associated with food, and I had better cut her some slack. On the flipside, she said I get giddy around free food -- and I really can't deny that.\n\nThen Alicia got something in the mail from her school, asking if she was going to register for the next semester. It wouldn't be until after Christmas, but I still felt my heart get heavy. I knew I would have to support her decision whichever way it went, but I loved being able to spend time with her.\n\nI stayed quiet about it as I watched her mood get darker and darker. I know she talked to Margaret about the school situation, but I stayed out of it and waited to hear whatever choice she made. Then one night, while we were lying side-by-side in bed she turned to me and asked, \"Ray, will you still love me if I don't become a CPA?\"\n\n\"What?!\" I laughed, but she was looking at me all insecure and I could see she was actually serious. \"Alicia, I couldn't care less about that.\"\n\n\"But when you met me I was a go-getter. You won't be disappointed or think of me as a slacker?\"\n\nI paused rather than answer right away. This sounded ridiculous, but I could see that it was a really serious issue for her, so I took a deep breath before answering. \"I wasn't looking for a CPA. I wasn't looking for anything, really. But then you came along and changed my life. I didn't fall in love with you because you are ambitious. I fell in love with you because you are sweet and brave and shy and beautiful. I love how you are curious and enthusiastic about stuff, how you look things up. I like how you get so excited about New York, you're like a little kid, and your enthusiasm is contagious. I love how friendly and outgoing you are to everyone you meet. You make a really good impression on people; you are warm and they like you. Plus, you are really smart, and did I mention beautiful? And sexy as hell too. And I love you because you love me. At a low point in my life, you could still see that I was a good person, a worthy person, when I could no longer see it myself. I couldn't care less if you become a CPA. The main thing I want is for you to be happy and healthy, whatever that takes. I want you to be with me for life. For a long life. I'm completely in love with you.\"\n\nAlicia had a tear on her cheek, so I wiped it away, finally a happy tear I could kiss away. And kiss away I did.\n\nEpilogue:\n\nIt's almost summer here again in New York. The Klaer family is planning a big backpacking trip out in California and they want Alicia and me to come out and join them. Steve keeps asking Alicia about my experience with the great outdoors and specifically if I have ever slept outside. Alicia and I have laughed about that a lot. Yeah, I've slept outdoors in all kinds of weather. Sleeping in a tent with a sleeping bag sounds like five-star accommodations to me, so Alicia assured Steve I would be fine. I'm really looking forward to it, plus it will give me a chance to talk to Steve about something important. I have my mom's ring and I thought about asking Alicia to marry me in some beautiful setting like Yosemite. Or maybe on top of a mountain, or next to a stream or waterfall. Then I realized that I would rather wait until we get back and propose in Central Park. I want to ask Alicia to marry me in New York City. We are New Yorkers, after all, and this seems right. New York is our home. \n\nAfterword\n\nThis is a story about love and redemption. In the beginning, it seems that Ray is the one with the problems, but the reader learns that Alicia is the one in real trouble. Part way through this writing, I was blessed with the help of an amazing editor, \"Lovely Bob,\" who appreciated and understood what I was trying to convey. During our back-and-forth communications, he asked some background questions and, given the serious topic of the eating disorder bulimia nervosa, he felt it was worthwhile to share some of our conversation with the reader. Here is part of what we discussed behind the scenes:\n\nQ. Donna, are you yourself bulimic?\n\nA. No. I definitely have other issues and have been in recovery for a very long time, but I have always had a very healthy relationship with food.\n\nQ. Are you a therapist? Do you have advanced training in the treatment of eating disorders?\n\nA. No, not at all. After overcoming my own difficulties, I went to school to become a Health teacher. I wanted to teach teenagers about the dangers of drug and alcohol abuse, about eating disorders, sex education, including STDs - you know, all the interesting topics! But I fell in love with Biology during my schooling and became a Bio teacher instead.\n\nQ. What elements of these real-world experiences made their way into the story of Alicia and Ray?\n\nA. Tons. Too many to list. As far as Ray goes, I know what it is like to be down and out. I know what it is like to crawl out of a hole. And Alicia? Even though I have never had an eating disorder myself, I have been a mentor for several women who do. The scratched hands, the use of markers, the heart attack, the unrealistic body expectations, the over-exercising, even the puking in jars all came from real people in my life. And so did the outpatient program and the \"Texas Toast\" too.\n\nQ. In your opinion, what does it take to \"beat\" bulimia?\n\nA. Well, as we have discussed, I am no expert! I am a writer and this is a fictional story with a positive ending, but it easily could have gone the other way. I knew it could not be a girl-meets-boy-and-instantly-gets-better story. I believe what William said, \"You can't fix this, Ray,\" and what Steve Klaer said, \"Love doesn't fix this.\" But love helps! And the most important love when it comes to recovery from bulimia, is the love that comes from inside. When I started this story, I thought that Alicia would not recover and would break Ray's heart, but she proved to be more of a fighter than I had planned. I asked myself, \"What would it take for Alicia to recover?\" And what I came up with is the following things that I knew had to happen in the story:\n\n<ol> <li> A critical event. This is the proverbial wake-up call. In Alicia's case it was her heart attack. All by itself this event would most likely not be enough to cause a change. People endure horrible things and continue destructive behavior, but it did bring Alicia's trouble out into the open. \n\n</li>\n\n<li> A genuine, inner desire to change. Wanting to please your lover or your parents isn't enough. The desire must be grounded in a concern for your own welfare. A genuine love of self is paramount. \n\n</li>\n\n<li> Divine intervention. The feisty old lady Ray encountered in church (\"God sees everything, and I see plenty.\") is praying for Alicia (and for Ray, too). \n\n</li>\n\n<li> Professional help, both medical and psychological. Alicia has found a good therapist in Margaret, and an outpatient treatment program that works for her. \n\n</li>\n\n<li> Support. Steve and Janice Klaer are frustrated with Alicia but they still love her. Ray loves her and is committed to making a life with her. But they can't understand what suffering with bulimia means. The friends Alicia is making in Margaret's outpatient therapy group are her co-sufferers and are an important part of her recovery. \n\n</li>\n\n<li> Confronting and dealing with underlying issues. Alicia somehow got herself stuck with the attitude that she had to be perfect in order to earn love. Overcoming her perfectionism is part of her recovery from bulimia. \n\n</li>\n\n<li> Replacing unhealthy behaviors with new healthy habits. Alicia takes up running. Unfortunately, she starts getting obsessive about the new behavior, but that problem is dealt with in counseling. \n\n</li>\n\n<li> Acceptance of body issues. In this final chapter, Ray has tried to help Alicia recognize the beauty and sexual appeal of a variety of body shapes and sizes. \n\n</li>\n\n<li> The ability to laugh at oneself. Alicia admitting that she puked in jars and laughing about how gross it was is one example, but I think this is something she will grow into over time. Her most playful side has been demonstrated in her sexuality. And there's no denying: Alicia has a very healthy libido! \n\n</li> </ol>\n\nQ. Do you identify with Alicia?\n\nA. I actually identify much more with Ray than with Alicia.\n\nQ.: What do you admire most about Ray?\n\nA. Ray's experience at being nearly homeless matured him and he is very tolerant. I like how he evolved throughout the story. He went from being anti-social to being comfortable around a variety of people. A librarian, Alicia's parents, the therapist, soccer players, neighbors, and a homeless guy were among his friends. I appreciate that he was a reader and a learner, although not formally educated. He started out thinking he was invisible and not worthy of anybody's attention, but by the end of the story he had job skills, friends, and love. He even felt like he had something to give back. Ray climbed Maslow's pyramid. And he finally felt at home in the big city.\n\nRAY KELLY'S RECOMMENDED READING LIST\n\nExtremely Loud and Incredibly Close, by Jonathan Safran Foer\n\nLet the Great World Spin, by Colum McCann\n\nThe Amazing Adventures of Kavalier &amp; Clay, by Michael Chabon\n\nThe Catcher In the Rye, by JD Salinger\n\nThe Memory of Running, by Ron McLarty\n\nThe Buffalo Hunter, by Peter Straub\n\nThe Power of the Dog, by Thomas Savage "
    ],
    "authorname": "DonnaBeck",
    "tags": [
        "love story",
        "romantic sex",
        "romance",
        "young love",
        "manhattan",
        "heterosexual sex",
        "first love",
        "novel",
        "novella",
        "love"
    ],
    "category": "Romance",
    "url": "https://www.literotica.com/s/subway-girl-ch-13"
}
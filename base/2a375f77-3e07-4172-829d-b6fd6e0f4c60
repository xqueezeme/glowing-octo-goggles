{
    "title": "Amy Says Yes",
    "pages": [
        "This is an entry in the April Fools' Day contest, so expect a bit of goofiness. It's a hard story to categorize, having elements that might have put it in Group Sex, Erotic Couplings, or even Romance. It finally landed in Fetish because its heroine has certain, um, fixations - but it's mild as Fetish stories go. Length: about 14,600 words. Tags: Straight sex, Anal sex, Group sex, MMMF, MMMMF, Penis, Cum eating, College, Fraternities.\n\n1. The Amy Scale\n\nAmy Marsh knew very well that she was plain, and she had come to terms with that, more or less. Short and stumpy, she had untended eyebrows above dull gray eyes. Makeup might have helped her round puffy face, but she didn't bother. Her hair was an average brown, and she wore it in an easily maintained nerdy cut. She had big dark-framed glasses: she'd tried contacts a few years ago, but they'd been more trouble than they were worth, so she'd given them up. Her jeans and sweater were nondescript, as all her clothing was: when she'd go out shopping, meaning to buy something bold and different, she'd come back every time with the same jeans and earth tones. In the summer she wore sandals, in colder weather unfashionable running shoes (which should not be taken to imply that she ran).\n\nWhen Amy imagined a future for herself, it did not include love or indeed sex with an actual man. She knew very well that she didn't turn heads, and, not being abundantly endowed with that consolation prize for the unattractive known as \"personality,\" she was unlikely to draw the attention of a man acceptable to her. Back in high school she had occasionally attended dances, where she'd stood off to the side unnoticed, watching the popular kids have fun. Sick of being a wallflower, she'd given up dances, and with them, all thought of getting a boyfriend.\n\nThis is not to say that Amy didn't think about sex. She did, and frequently. She fantasized about the handsomest boys in school, about movie stars, about sports figures. She sought out pleasing pictures of scantily clad men to enrich her fantasies, and she looked at them and imagined what it would feel like to make love to them.\n\nAt college (where she was, on the last Friday in March, a junior), her parents had sprung for a single room, and in that private space she'd discovered porn. She occasionally worried that something must be wrong with her: she'd read somewhere that women weren't supposed to like porn. But she did, and that was that. She loved James Deen: it was so hot to imagine him roughing her up as she sucked his cock! She liked Rocco Siffredi's stuff from a decade ago - he'd been such a handsome pervert! She pictured him putting it to her, right there in the backside.\n\nHow would it feel to have a cock in her? She nervously, blushingly, ordered a dildo and a bottle of lubricant online and was relieved when they arrived, as promised, in plain packaging. She gave the dildo a workout, sucking it, fucking herself with it, and after three weeks of courage-building, putting it in her ass. Oh, it hurt back there; she had to give it five tries over three days, but when she finally got it in, the feeling was divine, and, fucking herself behind while rubbing herself in front, she masturbated to an orgasm like none she'd ever had.\n\nShe ordered more toys - butt plugs, vibrators, double dildos that could be inserted both fore and aft, Ben Wa balls. She started a journal of her adventures with them: \"Ben Wa and vibrator on clit, A081.\" \"Anal vibrator and deep finger-fuck, A063.\" \"Vibrator pussy and ass, AMAZING, A095.\" The numbers with A prefixed were the \"Amy Scale\" she had devised for rating orgasms, the first two digits indicating intensity on a scale of one to ten, and the third indicating type - 1 being clitoral, 2 vaginal, and 4 G-spot; she could indicate combinations unambiguously by ANDing these numbers. A biology major accustomed to keeping meticulous lab notes, she was raising masturbation to a science.\n\nEver since Amy had observed, to her dismay, the form her adult self was assuming, she had eschewed the serious use of mirrors. This is unfortunate, for had she studied her face with any care, she might have noticed that she had one feature which, if not spectacular, really was quite good: her lips, which were full, succulent, and sensuously curved. You'd have to look twice or even three times to notice them, set as they were in such an unprepossessing face: since no one spent any time studying Amy's face, they went unremarked.\n\nThis morning, however, someone did notice - a handsome, careless bon vivant whose name Amy herself has since forgotten - let us call him John. He was enrolled in the same section of Anthropology 202 as Amy. This morning, a Friday, he was bored and grouchy, and that for a couple of reasons. The first was that he hated Friday morning classes. Like a great many undergraduates, he believed fervently that the weekend proper began at five o'clock on Thursday afternoon. But he needed this class, which satisfied a college requirement in an undemanding way, and he'd put off registering till the Tuesday-Thursday section was filled - so he was stuck. The second reason was that, although he had joined one of those fraternities that were supposed to guarantee brothers an active and varied sex life, he hadn't seen any action in a good three weeks.\n\nAs the professor droned on about the gift-giving rituals of some savage group in New Guinea (or was it South America?) John scanned the room for pickup opportunities. Here was a smooth-faced blonde in a form-fitting sweater, and there a brunette with a cute upturned nose - but they were long shots. Besides, if he was to have any chance at all with girls like that, he'd have to work a lot harder than he was minded to do.\n\nHe'd just about exhausted all the possibilities and was starting to consider whether he could get away with checking out his Facebook page on his phone, when his eye, sweeping the room, paused briefly on Amy, industriously taking notes and seated halfway along a semicircle of seats, the endmost of which he occupied, so that he had an excellent view of her in quarter profile. With her limp hair, pasty face, frowsy clothing, and ugly glasses, she was ridiculously drab - completely out of the question.\n\nAnd then, just a split second before John's eye would have moved on, an event took place that would change Amy's life. At a moment of intense concentration, as she was trying to condense the professor's last three sentences into a form that she could write down before he proceeded to his next point, she bit her lower lip.\n\nJohn's eyes widened at the sight. In an instant, an image presented itself to his mind of his youthful member sliding between this drab girl's pretty lips, and, just like that, his boredom dissipated. He opened his notebook, turned towards the front of the classroom, and started to pay attention to the lecture.\n\nWhen the professor finally slapped his folder shut and started to pack up, John gathered his stuff and laid a course to intercept Amy on her way out of the room. He had pegged her as a Serious Student, and he had decided how to play her.\n\nHe managed to fall in beside her as if by chance, and as they were passing out of the classroom together, he said, \"That lecture like really blew me away. Who'd have thought gifts had to be like repaid? Excuse me for just like talking to you, but that gift theory stuff really turned me on.\"\n\nAccustomed to being invisible, Amy was startled at being noticed and spoken to, and it took her a couple of seconds to collect herself. But she managed to say, \"Yeah, it's fascinating.\"\n\nThat was all the response John needed, for he was blessed with an easygoing manner and an open face that gave the impression that he was totally present and couldn't imagine anything in the world he'd rather be doing than talking to the girl who was there with him at that moment.\n\nAnd so it took him no time at all to steer the conversation around to the question, \"I was just on my way to like Starbucks. I'd really like it if you'd like join me.\"\n\nAnd Amy, astounded to be asked by anyone to go anywhere at all, said, \"Sure.\"\n\nAt Starbucks, over lattes, John found it no trick at all to discover that he and Amy had astonishingly similar tastes in music, TV, and movies, and to work up to saying \"I've really enjoyed talking to you. Do you think you'd like to, you know, go to dinner tonight?\"\n\n\"Sure, yeah,\" said Amy, pleased but not quite as astounded as she'd been at being invited to Starbucks - for she hadn't, after all, spent the first twenty years of her life on Neptune.\n\nOver dinner they discussed gift theory, a subject John found congenial, because he was, in truth, a firm believer in the principle that gifts had to be repaid. Indeed, he fully intended to invoke that principle this very night, after he'd picked up the check.\n\nAmy was a quiet girl who found conversation difficult, but John was marvelously easy to talk to. Their conversation flowed effortlessly, and it continued to flow as they walked together after dinner. Without their having planned it at all, they found themselves standing together on the sidewalk in front of John's fraternity house, and he said, \"Look, Alpha Eta Pi isn't one of those, like, dangerous fraternities you read about. If you want to come in, I've got some wine, and we can talk.\"\n\nSmiling, for despite her lack of experience she was no fool, Amy said, \"Okay,\" and soon found herself alone with him in his room, sitting beside him on his bed and sipping some very nice white wine, the conversation drifting pleasantly in ever more personal directions, gaining intensity seemingly on its own, John leaning forward a bit more as they talked till his face was very close indeed to hers, and he said, with charming diffidence, \"Do you mind if I .&nbsp;.&nbsp;.\"\n\n\"Not at all,\" she said, and he kissed those pretty lips.\n\nThis was, believe it or not, Amy's first serious kiss - the first one that was more than a peck - and she liked it. She liked it a lot. This was a thing you couldn't do with a dildo: you had to have a live person with you. Judging from John's responses, she thought she might just have a talent for it too, and what with the sensory stimulation of his lips touching hers and his tongue in her mouth (not to mention hers in his) and the gratification of feeling that she was actually having an effect on him, she was getting very turned on.\n\nAnd so when his hand brushed a breast, she breathed \"Yes\" into his mouth, and he became bolder and was soon kneading her breasts through her blouse.\n\nAnd when he plucked at her buttons with nervous fingers, she whispered \"Oh, yes, please\" into his ear, and soon she was naked from the waist up, and he was nibbling her pink and perky nipples as she moaned with pleasure. And when, with a practiced motion, he unbuttoned the button of her jeans, she whined \"Yes,\" a long, drawn-out sigh of a syllable, and that emboldened him to put his hand into her pants and massage her pussy.\n\nAnd when his middle finger slipped over her clitoris and into her slit, she cried, \"Oh, fuck, yeah!\" and pushed down her own jeans to give him better access.\n\nHe spent so long finger-fucking her that she decided he wasn't going to go down on her the way she was sure James Deen would have done by now: she'd have to take matters into her own hands. She unfastened his belt and, getting to her knees by the side of his bed, wrenched down his pants and peeled off his underwear.\n\nHis cock, which had been uncomfortably confined in his pants for rather too long, sprang erect, and she said, \"Oh, yeah!\" at the sight of it. Not that it was such an impressive thing in itself - Shane Diesel and Rocco Siffredi had way better ones - but it was the first she'd ever seen in the flesh, and it was her toy tonight.\n\nShe closed her lips over the smooth pink head of it - incidentally making real for a dumbfounded and delighted John the vision he'd had earlier that day when he'd seen her bite her lip - and was transported. Oh, she had lovely dildos in various sizes and shapes, and she'd sucked them all; but none of them were flesh, none of them warm and covered with soft, smooth skin, none of them engorged with real blood pumped from a furiously beating heart, none of them leaking pre-cum from the tip. She savored the sensation of his skin slipping over the exquisitely sensitive surface of her lips - the head, the flared corona, the shaft. With her tongue she caressed the frenum (she had made an exacting study of the penis and could name all its parts) as the glans penetrated deeper into her.\n\n\"Fuck,\" exclaimed John, who was used to having to talk girls into giving him blowjobs. As his cock slid between her lips as slowly and smoothly as a hydraulic piston, he wondered how far in she would take it. He had no idea that, due to long and enthusiastic practice with Lexington-Steele-sized dildos, his cock, of which he thought so highly, posed no challenge at all to her. Thus he watched with growing astonishment as more and more of him disappeared into her, till finally her lips grazed his pubic hair and he started to slide out again.\n\nWhen the top of him reappeared, she said \"Yes\" to it with a hiss and began again. For a good ten minutes he watched as this dumpy nerd of a girl made love to his cock, massaging it with her lips on the upstroke and with her tonsils on the down. It was such a blowjob as he'd never dared to hope for, producing unbelievable sensations and raising his arousal to a pitch that he'd never experienced before. It all would have been perfect but for the nagging anxiety that this unappealing girl might prove difficult to get rid of once he was done with her.\n\nHe needn't have worried, for he was, at this moment, nothing to Amy but a cock. But what a cock he was - producing far better sensations, as he slipped in and out of her throat, than the dildos she'd become so fond of! Surely the feel of this lovely cock in her pussy would be just as good. Abruptly she stood, shoved him onto his back, climbed onto the bed, straddling him, and sat down on him, marveling at the ease with which he slid into her sodden vagina.\n\n\"Shit, yeah!\" she sighed as she settled onto him, amazed at how good a cock felt inside her. She rode him with a vigorous bouncing sliding motion, making sure her clitoris got lots of stimulation and paying little attention to the stupefied visage of the frat boy who was now pinned to the bed under her.\n\n\"Yeah! yeah! yeah!\" she cried as he looked up at her round face, somehow transfigured by her passion into a state approaching prettiness, at her round, bouncing breasts with their lovely erect nipples, at her rounded belly, wide hips, and bushy snatch, which was doing impossible things to his nervous system. He was just sensing the approach of his orgasm, the moment around which he'd organized his whole day, when she emitted an ear-piercing screech and for what seemed the better part of a minute humped him with a wild abandon that he'd never witnessed in any of the sorority girls he was so proud of having poked here in his dingy frat house room.\n\nIt was a bit annoying, frankly, her riotous orgasm. It threw him off his rhythm, and he wilted while it was going on. Reflecting with dismay that it really was far better when a girl pretended to come, he felt himself slip out of her.\n\nAmy climbed off him and assessed the situation. She was wet, but her experience of porn videos told her she wasn't nearly wet enough. She touched herself: nothing was leaking out of her. She examined John's cock: it wasn't as slimy as it ought to be. The boy hadn't come. Well, it was probably for the best, since she'd gotten carried away and fucked him without protection.\n\nStill, she was sorry for him - and wasn't there an opportunity here as well? \"Let's make you come,\" she said, bent over him, put his limp cock in her mouth, and got to work restoring his erection.\n\nThis task proved to be unexpectedly easy, for while John had serious problems with eating pussy himself (for reasons rooted more in ideology than in experience), he now discovered it to be a tremendous turn-on to see Amy's lips close around his empussied cock, which quickly regained its pleasing tumescence.\n\nAmy was well acquainted with the taste of her own pussy - that aspect of this experience was only mildly stimulating. What drove her wild right now was anticipating yet another of her porn video tropes - the mouthful of cum. What would it feel like when he erupted inside her? Would it be as slimy as it looked on her computer screen? What would it taste like? She hoped he'd come lots: she wanted a good sample of it.\n\nIf John had been able to read Amy's thoughts, he would have enjoyed this blowjob a lot more than he did. To come in a girl's mouth is the very apex of sexual ambition for a young man of his age and station, and no girl had ever let him do it. And, oh, he so badly wanted to! He watched in terrified anticipation, hoping against hope that she'd let him, but knowing in his heart of hearts that at the last moment this heavenly blowjob would morph into a mundane handjob.\n\nPlease, God, he thought: he couldn't look but had to look; he couldn't stop his pelvis thrusting, betraying the approach of the moment; any second now she'd pull away .&nbsp;.&nbsp;. oh fuck he was coming coming coming .&nbsp;.&nbsp;.\n\nAnd he watched in stunned disbelief as her lips remained sealed around his shaft, his sensations, his body's spasms, telling him that it was really happening, there inside her mouth, tantalizingly out of sight: he was spurting over her tongue, and she was letting it happen.\n\nHis cum was warm and gunky; she couldn't describe the taste in terms of any food she knew. Yes, a little salty, yes, a little fatty - and what else? It was an indefinable flavor she'd just have to classify as \"cum.\" And she liked it - no, she loved it - not for the taste, but for what it was doing to her pussy right now, blood again rushing in, arousal spiraling into the stratosphere.\n\nAmy let John's cock slip out of her mouth, looked into his watchful face, and swallowed. \"Yeah,\" she whispered, and proceeded to lick the residue of his semen off his cock.\n\nJohn was all but lost in ecstasy - and yet this was a dangerous moment, too, when she would try to stake a claim, extracting a promise that he'd call her, and he'd have to decide whether to let her down easy or just lie. Because this was not the kind of girl he'd be proud to take on as a girlfriend and show off to his fraternity brothers. She was obviously an incredible slut - that was the only way to explain the way she'd done all the things he most wanted a woman to do. You didn't make a girlfriend of even a good-looking slut, and this one was ugly.\n\nHe needn't have worried, because Amy was being battered by a storm surge of horniness for which she knew she would find no relief here: she was eager to get home to her toys and her journal. She was already planning a revision of the Amy Scale, because she'd just had an orgasm which exceeded the descriptive power of her current system. So when she'd gotten what she wanted from his cock, she stood, picked her clothes up off the grimy floor, and started to put them on, regarding him all the while with impassive gray eyes.\n\nTense and uncertain, John watched her dress. Why was she so silent? When would she put the question?\n\nShe never did. Instead, when she was dressed, she said, \"Thanks. Bye.\" And with that, she let herself out of his room and the Alpha Eta Pi fraternity house, and set out in the direction of her dormitory.\n\nJohn went downstairs to the kitchen, where he snagged a beer, and thence to the common room, where he found a lone brother lounging, the others being out, or in, on dates. \"Jesus, Mike,\" he said. \"I just fucked the ugliest girl at the university, and she was like this amazing slut.\"",
        "\"A cunt's a cunt, eh, Bro?\" grinned Mike. \"What did you say her name was?\"\n\n\"Amy, um, Martin. No - Amy Marsh.\"\n\n2. Coffee with Mike\n\nBack in her dorm room, Amy undressed, showered, put on a nighty, selected some toys from her top dresser drawer, and reviewed the night's events. Clearly the Amy Scale would have to be revised, since she'd already decided that her orgasm with what's-his-name, the frat boy, had rated twelve on her one-to-ten scale (\"Sex with jerk, cowgirl, A121\"). But how high should the scale go? Twenty? Fifty? She had no way of knowing how good an orgasm could get.\n\nNor was she sure she'd ever find out. She wasn't dumb enough to believe she'd just found a boyfriend. She recognized what she'd just experienced as a hookup, and that was fine with her: by the end of the evening she'd correctly sized up her date as shallow and dim, and she didn't want to see him again.\n\nShe did, however, want more nights like tonight. She lubricated a vibrating butt plug, lay on her back, inserted it, and turned it on. Applying an egg vibrator to her clitoris, she wondered how she could go about getting more sex.\n\nBy the time she'd brought herself off (\"Vibrators ass and clit, A061\"), she was no closer to an answer. She was, however, much calmer and more relaxed, and she went to bed and slept soundly.\n\nFortune was smiling on Amy, for, if what's-his-name had put her out of his mind, Mike, the brother he'd met in the common room, had not. Indeed, Mike had looked her up in the online campus directory, and at the precise moment that Amy's sphincter was delightfully contracting around the stem-end of her butt plug, her name and email were flashing onto his computer screen. By the time she'd had her orgasm, he had composed what he thought a very fine email to her:\n\n<blockquote>Hi Amy,<br/>My friend John told me your smart and fun, and if your really into him know problem but wondering if your free tomorrow (I mean Saterday) for coffee just ot, like check me out.<br>Mike</blockquote>\n\nAmy found this epistolary masterpiece in the morning, and with some effort succeeded in deciphering both its literal meaning and its deeper significance. She replied,\n\n<blockquote>Hi Mike,<br/>I'll be glad to meet you. Starbucks at three? I'll be carrying a copy of Molecular Biology of the Cell. It's bright pink.<br/>Amy</blockquote>\n\nAmy thought the pink textbook was a nice touch. She toasted and buttered a bagel and studied her Anthro while she ate. When she checked her email again, she found a note that read, \"Cool! See you then. Mike.\"\n\nAmy devoted an hour of her afternoon to thinking about the coming encounter, planning, and preparing.\n\nMike was not at all dismayed by the blinking, round, bespectacled face that peered up at him from a table over against a window at Starbucks, for when he'd said \"A cunt's a cunt\" the night before, he'd been voicing his own philosophy. He liked sex as well as the next brother, but he was lazier than most of them and unwilling to put in the effort that obtaining a high-status sorority girl required. Among the feminine graces, easiness rated much higher with him than beauty - and if John was to be believed, this girl was very easy indeed.\n\nAmy wasn't disappointed either, if only because the email he'd sent her had raised such modest expectations. Not that Mike was objectionable. He wasn't handsome by any means, but he was large and fit, and she thought his body would probably be fun to play with. However, she suspected that any time spent talking to him would be a trial.\n\nShe wasn't wrong in that. After he'd gotten his drink (Venti Caramel Macchiato), he said, \"So, you're like, into biology?\"\n\n\"I'm a biology major,\" she said.\n\n\"Cool,\" he said, and then \"Cool\" again. He strained for a moment to think of something else to say and finally came up with \"That's a pretty tough major, isn't it? Like not a lot of girls major in science, right?\"\n\n\"There are more than you'd think,\" she said, wondering what planet this idiot was from.\n\n\"That's cool,\" said Mike, and again he said, \"That's cool.\" He paused a long time, face blank, and finally blurted, \"I'm majoring in like business and I play Lacrosse.\"\n\n\"I'm sure both of those are very interesting,\" said Amy, wondering how much time had passed but feeling it would be rude to look too often at the clock on the wall.\n\n\"There's lots of math in biology, right?\" asked Mike.\n\n\"There is when you're in the B.S. track,\" she said.\n\n\"I'm studying like accounting right now,\" he said.\n\n\"Uh Huh,\" she said. She risked a glance at the clock: only five minutes had passed since he'd sat down. She'd go mad if she had to put up with much more of this.\n\n\"There's lots of math in accounting,\" he said.\n\n\"Look, Mike,\" said Amy. \"You're going to ask me to dinner, right?\"\n\n\"Yeah, I guess so,\" said Mike.\n\n\"And after that you're hoping I'll go to your room with you and have sex, because I had sex with .&nbsp;.&nbsp;. with .&nbsp;.&nbsp;.\"\n\n\"John,\" Mike prompted.\n\n\"Yeah,\" Amy said. \"Am I right?\"\n\n\"Right about what?\"\n\n\"That you'll want to have sex with me.\"\n\nMike wasn't used to this kind of talk, and his intuition, besides, was that in matters pertaining to sex, honesty wasn't usually the best policy. But he couldn't say he didn't want sex, because then .&nbsp;.&nbsp;. well, he wouldn't get any.\n\n\"Um, I guess,\" he said.\n\n\"Well, I can tell you right now that I'm going to say yes to all the questions you ask to get me up to your room.\"\n\n\"Um,\" said Mike.\n\n\"So why don't we, like, skip dinner and the questions and go to your room right now.\"\n\nMike stared at her, struggling to parse what she'd said, which, if he'd understood it right, was entirely outside his experience. \"So .&nbsp;.&nbsp;. you're saying .&nbsp;.&nbsp;.\"\n\n\"Let's go fuck, Mike,\" said Amy impatiently.\n\nMike gave himself a few seconds to ponder her words. Women were subtle and mysterious creatures, and it was always wise to be on one's guard when talking to them; and yet what she had said didn't seem all that mysterious. It sounded like maybe she was ready to have sex with him right now.\n\n\"Okay, sure,\" he said.\n\n\"Good,\" she said and stood up.\n\nIn his room at Alpha house, Mike stood awkwardly, not knowing quite what to do. It wasn't lack of experience that was giving him pause: he knew, at least in outline, the rituals one performed to cajole an ostensibly reluctant girl into bed. What he didn't know was what to do with a girl who needed no cajoling.\n\nInwardly, Amy breathed a sigh of exasperation. By this time, James Deen would have had her up against the wall with his fingers plunged deep in her pussy. It seemed she'd have to take matters into her own hands again. She advanced on him in a clumsy dance, and when she was almost close enough for her breasts to brush the cotton of his shirt, she reached up (it really was a reach, since he was very tall) and unbuttoned the top button of his shirt.\n\nThis strange girl's aggressiveness made Mike nervous: he was a traditionalist who valued the illusion that he was in control of his sexual encounters. But he couldn't deny the effect she had on him when, having pushed his shirt off his shoulders, she reached for his belt buckle and undid his pants, which fell down around his feet.\n\nThis was one of her favorite moments in a porn scene, when the woman dropped to her knees in front of a man, his cock making an enormous bulge in his underwear as Mike's was doing now. On her knees, Amy nuzzled that bulge, gave it a little bite through the white cotton, and was gratified by his \"Oh!\" of fear and pleasure.\n\n\"Yeah,\" she said to the bulge, hooked her fingers over the blue-striped elastic of his briefs, and pulled sharply down.\n\nHe was big, no question about it, and curved upwards like a scimitar. This one might be more of a challenge than what's-his-name had been, but she was sure she was equal to it. She took it in her two hands and pulled it down far enough that she could get the end in her mouth, and then she paused, stimulating the glans with her lips and tongue. A shiver ran through him and into her, through her lips and tongue, her nipples, her pussy. She took him deeper and deeper till she felt him press past her epiglottis into her pharynx. Oh my, was he big - he might snake right through her and tickle her clit from the inside!\n\nHis cock wasn't that long, of course, but if it had been she might well have been able to take it, so skilled was she. Like his fraternity brother of the night before, he'd had his share of blowjobs (if not quite as many as he bragged of), but he'd never seen a girl's nose smashed against his pubis before. He was so astonished he nearly lost control of himself and had to conjure up an image of his Aunt Phoebe's fat greasy face to keep himself from coming.\n\nMike knew he should give some consideration to how the action should proceed from here, but he was having more than the usual amount of difficulty forming coherent thoughts. This occasioned some anxiety, but he needn't have worried, for Amy had come with a program, which she was now determinedly carrying out.\n\nShe let him slide out of her mouth, reached for her purse, and took from it a small bottle of lubricant, which she drizzled onto his cock. He gasped as she jerked him off to spread it around and came close to coming without being touched at all when she stood up, dropped her pants, and said, looking straight at him, \"Put it in my ass.\"\n\nShe got down on the floor on her elbows and knees and waited for him to obey her command. But he'd never done this before. Oh, he'd once made the claim, after his date last October with Jennifer Watson, but that had been a slander - revenge because she hadn't even let him get to first base.\n\nJerking off to keep himself hard, Mike tried to muster the little knowledge he possessed on the subject of anal sex. Like the girl whose tight pink anus was now glaring at him impatiently, he'd watched lots of porn, but unlike her, he hadn't made a study of it. He had a sort of notion that it would be good to take it slow, but beyond that his mind was a blank.\n\nWell, all he could do was give it a try. Standing behind her, he bent his knees, took his cock in his hand, and presented the head of it at her tightly closed nether portal. He pressed himself lightly against it, but it didn't admit him. This was a different thing from a pussy; it had its own set of rules. He pressed a bit more, and it gave way a little but didn't open up. He pressed again, and she said \"Oh, yeah - harder.\"\n\nAmy guessed right away that this boy didn't know a thing about anal sex. She'd anticipated that and had done everything she could to make it easy for him, giving herself an enema, wearing a butt plug right up till it was time to go to the Starbucks, and bringing her own lubricant. Now she was giving him a chance to do the rest. She liked the feeling of his cock pressing against her anus, but she knew he wasn't in yet - could he do it? \"Fuck, yeah, harder,\" she said by way of encouragement, and he pushed harder - but not hard enough.\n\nHow much more could she do? She wiggled her ass and pushed against him, but he pulled back when she did. Fuck. He was losing his nerve. She stood up, gave him a disgusted look, put her hand on his chest, and shoved him. \"Lie down,\" she said.\n\nHe obeyed her, but his cock was wilting. How unreliable these boys' bodies were! She sat down astride his legs and sucked him till he was hard again; then she stood over his cock and slowly lowered herself onto it till it was pressing hard against her anus. She closed her eyes, put more weight on him, and finally felt herself dilating to admit him. There was that same flash of pain she'd learned to love using her bigger dildos, fading then and giving way to the pleasure of stretching muscles and the friction of skin against sensitive membranes .&nbsp;.&nbsp;.\n\n\"Yes!\" she cried in triumph, sat down hard on Mike's big cock, and rode it. Oh, this was everything she'd hoped and more: the stimulation of her sphincter, the pressure, the dazed look on Mike's stupid face - she reached between her legs and gave her clit a fierce rub as she bounced once extra hard and screamed \"Yah!\" in pain and pleasure. Then she rode again, fingers sunk deep in her pussy, palm rubbing her clit, faster and faster till she came with a screech even louder than the one that had so deafened what's-his-name the night before.\n\nBut Mike hardly noticed the noise. In a matter of minutes, he'd gone from fear to dazed disbelief to the realization that he'd never felt anything remotely like this tight asshole around his cock, and every time she lifted herself up, the sensation as her tight hole squeezed the head of him was .&nbsp;.&nbsp;. was .&nbsp;.&nbsp;. just incredible, and it was blazing through his whole body, and oh fuck he wanted to make it last longer but it was too intense, and he .&nbsp;.&nbsp;. just .&nbsp;.&nbsp;. had .&nbsp;.&nbsp;. to .&nbsp;.&nbsp;. come - which he did with a loud moan and racking spasms.\n\nAmy raised herself off him, paused, and inserted a finger in her ass - a trick she'd seen in porn movies to let the cum run out. She let it puddle on his belly, then stood, pulled on her panties, and picked up her jeans.\n\n\"Hey,\" said Mike, \"you're not like going already, are you? We're gonna .&nbsp;.&nbsp;.\"\n\n\"Stuff to do,\" said Amy, and sat on the bed to put on her shoes.\n\nMike watched her finish dressing with desolate eyes. She said nothing more, but left the room.\n\nOutside Mike's door, she checked her watch. Five-thirty. There was a bathroom across the hall: she went in, wiped her ass, peed, and washed up. She wondered what to do for dinner.\n\nTo leave the fraternity house she had to pass the wide door of the common room. As she was doing so, someone shouted, \"Hey, Amy!\" She looked: it was that guy she'd fucked the night before, standing in a tight group with Mike and some other guy.\n\n\"Hey, c'm'ere, Amy. Want you to meet somebody!\"\n\n3. Kegger\n\nAmy thought she had gotten pretty much everything what's-his-name and the other guy, Mike, had to offer her, and she wanted to go home and record her orgasm - but she decided there was no harm in pausing for a minute just to be polite.\n\nThe third guy was beefy and sandy-haired; he was clutching a plastic cup full of beer.\n\n\"This is Amy, my date last night,\" said what's-his-name. \"Amy, this is Will, our chapter president.\"\n\nWill grinned and said, \"I'm very glad to meet you, Amy. What a coincidence that you should be passing by at the precise moment my brothers here were extolling your excellent qualities!\"\n\nAmy said, \"Hi, Will.\"\n\nWill gestured towards a couple of kegs over against a wall. \"As you can see,\" he said, \"we're preparing to host one of those notorious fraternity parties your mother warned you against. We'd be totally honored if you'd join us.\"\n\n\"I don't think I'm allowed here,\" said Amy. \"I won't be twenty-one for another four days.\"\n\n\"Well,\" Will frowned, \"that does present a problem. There will be a guard checking IDs at the door, and close doesn't win a prize in the ID-checking game.\" He brightened suddenly and said, \"But you see, you're already inside, so no one will check your ID. All you have to do is stay.\"\n\nTrying to be firm, Amy said, \"I haven't had dinner yet. I've got to go home and eat.\"\n\nWill threw back his head and roared with laughter. \"Home and eat! That's very good!\" He leaned towards her and said, very seriously, \"Amy, on this night of nights, Alpha Eta Pi has cleaned out all the pizza establishments in town. Every available pizza is stacked up in our kitchen. Please allow the chapter to treat you to dinner. What do you favor? Pepperoni? Sausage? Vegetarian? We have it all.\"\n\nAmy was cornered - but how bad was that? Will was good looking, if a little heavy, and very friendly. Maybe the other partygoers would be just as nice.\n\n\"I guess .&nbsp;.&nbsp;. some veggie,\" she said.\n\nWill clapped his hands and shouted, \"Excellent! I shall personally escort you to our pizza hoard and serve you myself.\" He took her by the arm and piloted her towards the back of the house.\n\nOn the way he said, in a confidential tone, \"What do you think of the two brothers you've met so far, Amy?\"\n\n\"They're okay.\"\n\n\"Worthy men, both of them,\" Will exclaimed. \"And if you think they're 'okay,' I'm sure you'll be more than pleased when you meet the others; because Alpha\" (he paused to give the wall a proprietary slap) \"is an organization of men who appreciate true womanhood and know how to treat women appropriately.\"\n\n\"That's good to hear,\" said Amy.\n\nThey entered a large kitchen, where many pizza boxes were piled up. No one else was here. Will browsed the boxes as he might a shelf of library books, and finally selected one.\n\n\"Here we go, veggie,\" he said, took a plastic plate from a stack and served her a slice.\n\n\"Thanks,\" she said, and took a bite from the end.\n\nWill studied her as she ate, wondering if makeup or other stylistic interventions could rescue this appalling creature from her drabness. But her mouth was as pretty as John had claimed, and girls who took it up the ass and swallowed your cum were rare and precious. Yes, there was something about this girl .&nbsp;.&nbsp;.\n\n\"I just know you're going to be a hit tonight,\" said Will. \"I can tell you have a modest nature, but you are quite attractive. I'm really enjoying your company.\"\n\n\"Yes, Will,\" said Amy.\n\n\"What?\"\n\n\"Whatever you're leading up to, the answer is yes.\"\n\nWill stared as she chewed another mouthful, not quite believing he understood her right. But he finally decided her meaning had been plain enough, so when she swallowed, he took her plate from her, set it on the counter beside them, and reached for his zipper, saying, \"I do like a girl who says yes.\"\n\nAmy's heart sang. Here was a third cock in just twenty-four hours! She sank to her knees in front of Will and watched, fascinated, as he pulled himself out of his pants.\n\nThis was going to be a good one. Not only was he growing fast, but he was uncircumcised. How often she'd imagined herself pulling back Rocco Siffredi's foreskin, unwrapping him like a birthday present - and now she had one of her very own to play with!\n\nVery gently, because she didn't know how sensitive he'd be, she pulled back the foreskin. The glans underneath was moist, pink, and appetizing - she leaned forward and kissed it. It was warm and soft, and even a little kiss elicited a sigh from Will, who now placed a hand behind her head and urged her forward.\n\nShe was willing: she let him glide between her lips, savoring the flavor of him, the penis smell, the sensation on her lips, and his boldness as he pulled her harder and pushed forward at the same time, so all at once he was over her tongue and past her uvula.\n\nNow he took her head in both hands and thrust hard, battering the posterior wall of her oropharynx. She made an \"ack\" sound, gagging because after all a dildo doesn't seize your head and fuck your throat, so she wasn't exactly used to this; but it was great, the gagging, the danger of it, the way her mouth was suddenly full of thick saliva. She stuck her tongue out around him and drooled a gleaming strand onto the industrial tile of the kitchen floor.\n\n\"What the fuck,\" said an unfamiliar voice. She cast her eyes sideways and saw a boy she hadn't met, tall and black, staring with astonished eyes.\n\n\"Hey, George!\" said Will.\n\n\"That's one ugly bitch,\" said George, advancing towards them. \"She looks like a fucking groundhog.\"\n\n\"Yeah, but an unbelievable cocksucker,\" said Will.\n\nGeorge took another step, just enough to bring him within reach, and Amy caught him by the belt and hauled him closer. Taking the hint, he unzipped and pulled himself out, and she took him in her hand and jerked him off as Will, in a spasm of fraternal goodwill, gave one energetic thrust (\"Annghh,\" Amy gargled) and yielded his place.",
        "Amy turned towards George (or rather towards his cock) and admired him as she pumped. His shaft was dark chocolate, glans a rich plum, skin silky and unblemished: he grew rapidly in her hand, and while he was no Lexington Steele, he was satisfactory - long enough, and very thick. Mouth watering, she wrapped her free arm around one trousered thigh and pulled him to her.\n\n\"Yeah!\" she said enthusiastically a split second before the big purple glans plugged up the passage to her larynx, cutting off her speech. What a day of wonders this was! A mere twenty-four hours before, she had never sucked a cock, and now she'd had four! And while none of them was quite as good as the ones she'd seen in videos, she loved the variety: one average, one king-sized, one uncut, one black!\n\nGeorge now followed Will's lead, seizing Amy's head, fucking her vigorously and occasionally giving her a sharp pull. She spluttered and coughed, and the spot of drool on the floor between her legs grew into a puddle.\n\nAnother male voice called, \"Dude, where's the pizza? Whoa!\" Within seconds she was sucking a third cock - long and thin, with a purplish head - while Will and George stroked themselves, waiting for their turns to come around again. Soon Will had another turn, and George, and the new guy, who grabbed her ears and slammed into her throat with a sadistic chuckle, and it occurred to Amy that maybe the idea of the fraternity had more to recommend it than she'd guessed - it was so impressive the way they were sharing and sharing alike.\n\nAfter they'd each had four or five turns, Will pulled out of Amy's mouth and, with a firm hand on top of her head, aimed his cock at her nose and jerked off; whereupon the other two crowded in and did the same. Here was another of Amy's porn-driven fantasies about to come true: she was going to get her very first facial! She opened her mouth wide, porn-star style, and waited, hyperventilating, heart pounding.\n\nHer gazed shifted from cock to cock - it was so exciting, three of them pointing at her, little slits winking as the boys pumped themselves like shotguns. She resisted the urge to close her eyes, wanting to see when the cum jetted out of them. She steeled herself: she wouldn't flinch.\n\nThe last boy was the first to come, delivering eight or nine powerful and well-aimed spurts square on the nose - it splattered, and she felt the warm goo ooze down her cheeks. Next was Will, who rested the tip of his cock on her lower lip and filled her nearly to overflowing. She paused to swallow when he was done, because that's what her favorite pornstars did: she made a show of forcing it down. Was it her imagination, or was Will's cum sweeter than what's-his-name's had been the night before?\n\nFinally George seized a fistful of her hair, yanked her towards him, and let fly, aiming for her eyes: his cum splashed on her glasses and ran off onto her cheeks as the other two cheered, \"All right!\"\n\nWhen they were spent, Amy peered through messy lenses at the proprietors of the three cocks she'd just sucked.\n\n\"Amy, meet George,\" said Will, gesturing towards the black guy, and Amy smiled and said, \"Hi, George.\"\n\n\"And this is Theo,\" Will continued, indicating the other, who had a scruffy beard, a trilby hat, and a lopsided grin. He was holding in his hand a rapidly shrinking cock, from the end of which a milky drop hung precariously.\n\n\"Hi, Theo,\" said Amy, and licked the end of his cock. His whole body twitched, and he gasped, \"Fuck!\"\n\nStaring at Amy, Will said to his brothers, \"Despite what George said about Amy's looks, which has an element of truth in it, you have to admit she looks very fine drenched in cum.\"\n\nThe other two repeated \"Very fine\" after him.\n\nWill continued, handing her a towel, \"I was just telling her that the men of Alpha appreciate true womanhood - and I think we can all agree that Amy here is a true woman - the kind that understands a man's needs and knows exactly how to satisfy them!\"\n\n\"True, true,\" said George, and Theo said \"Damned straight.\"\n\nAmy was puzzled. She hadn't given a thought to the needs of these guys: she honestly didn't give a fuck about them. She opened her mouth to say so, but decided the whole thing was too complicated to explain - and anyway, she was likely to get more mileage out of simply saying \"Thank you,\" which she did.\n\n\"It sounds like the party's warming up!\" Will boomed as Amy toweled dry. \"Let's go check it out. Amy, I think you'll want a little something to wash down all that spunk, eh?\"\n\n\"I guess,\" she said. Will took her arm again, and the two of them led the others from the kitchen - Amy casting a longing backwards glance at her half-eaten slice of pizza.\n\nIt was still early for a fraternity party, but about twenty people had already gathered. \"Hey Hey!\" cried Will, \"there's Jackie, the house slut! Let me introduce you to her, Amy!\" He towed her towards a mousy, skinny brown-haired girl wearing a skimpy blue party dress with a zipper in front. She gave Amy a scared look.\n\n\"Babe!\" Will exclaimed, and clasped Jackie in a full-body hug, cupping a cheek of her narrow ass in his beefy hand. \"Amy,\" he continued, \"this is Jackie, our house slut. She's a senior, and kind of on call to fuck any of the brothers that can't find dates on any particular night. We're very proud of her: not many fraternities can boast so fine a slut. We're going to feel the loss keenly when she graduates - if you get my drift.\"\n\nAmy got his drift, but decided not to say anything but \"Hi, Jackie.\"\n\n\"Hi, Amy,\" said Jackie in a thin, squeaky voice that matched her look precisely.\n\n\"Jackie, why don't you help Amy get a beer and introduce her around a bit? I'll see you both real soon.\" He gave Jackie a quick peck on the cheek. He turned towards Amy as if to do the same for her, hesitated, and reached around her awkwardly to pat her on the back. Then he hurried away.\n\nAs Jackie led Amy towards the kegs, she said in a nearly inaudible voice, \"Don't let them make you their house slut, whatever you do.\"\n\n\"Why not?\" asked Amy.\n\n\"Come sit with me,\" Jackie whispered urgently, and steered Amy towards some plastic-covered seats by a wall.\n\nJackie started her story before they were even seated. \"I thought the brothers were like really cool when I first started going to their parties,\" Jackie sobbed, \"but they're really horrible. The first boy I met - he's graduated now - told me he loved me and was really sweet, or so I thought. But he broke up with me after just a month: he said any girl who let him do the things I let him do - like fucking my face and coming in my mouth - couldn't be trusted to be faithful.\n\n\"I was devastated, but another of the brothers comforted me and told me he loved me better than the first one, and I'd be his forever. I really wanted to keep him so I let him do all the things the first brother did and ass-fuck me too. When he broke up with me after just a couple of weeks, he had a third brother in the room with him who he said was really into me and didn't care that I was a skank, so it wasn't really a loss at all, you see. And that third one lasted just a week, and pretty soon they were like 'Go see Bob for a fuck,' or 'Jake needs a blowjob,' or 'Dave wants a rimjob,' passing me around and not even pretending to have a relationship with me .&nbsp;.&nbsp;.\"\n\nJackie broke down here and collapsed against Amy's shoulder. Amy patted her awkwardly until she was able to resume.\n\n\"And then they started to fuck me two at a time or make me have sex right here in the common room during parties. So I got this reputation that followed me like everywhere. I tried to quit the Greek scene and moved into a dorm, but even they knew about me there from all the talk about me on Yik Yak, so boys would like knock on my door at two in the morning wanting an ass-fuck. Since I couldn't escape it, I ended up coming back .&nbsp;.&nbsp;.\"\n\nJackie buried her face in her hands and sobbed, and when she'd recovered a little, she looked up at Amy with damp eyes and said, \"Oh, Amy, what'll I do?\"\n\nAmy thought about that for a minute. She liked the idea of having sex with lots of random men - she wanted the life of a porn star, not of a girlfriend - but becoming the property of a fraternity and being passed around like a toy sounded stupid. She didn't have an answer to Jackie's question, though.\n\n\"I don't know,\" she said.\n\nJackie looked at her as if she'd said something profoundly wise.\n\n\"C'mon, let's get a beer,\" she said.\n\n4. Jackiebang\n\nAmy didn't want a beer. It had occurred to her, as Will was coming in her mouth, that she should record penises and semen in her journal alongside orgasms, and her head was buzzing with ideas for classification schemes. Between that and the necessity of remembering the details of the five cocks she'd made use of and the two loads of cum she'd swallowed, she was determined to keep a clear head.\n\nSo she just carried around the beer Jackie gave her, occasionally taking the opportunity to pour a little of it out into empty cups she found on tables and shelves around the room.\n\nShe stuck close to Jackie. She could see why she made a good house slut: she was so meek, she just invited abuse. Amy wanted to shake her, or even hit her, but she didn't think that would change her way of thinking. Still, she liked Jackie, who was kind and possessed a wan prettiness that Amy found appealing. Practically every female porn star was bi, at least on camera: Amy wondered if she'd enjoy oral sex with her. She added it to her mental to-do list.\n\nNearby, a male voice shouted, \"Hey, Jackie! How 'bout a blowjob here?\"\n\n\"Oh, no!\" Jackie whimpered so quietly only Amy could hear.\n\nA skinny boy with a rat-like face emerged from the crowd, clutching his crotch. \"Man, it's been so long since I got any nooky, my balls are about to explode. You gotta help me out, babe.\"\n\n\"Sure, Danny,\" Jackie whined, and got to her knees in front of the boy as he pulled out his half-limp cock. Without preliminary kisses or licks, she took him in her hand, put him in her mouth, and sucked. A number of boys gathered in a circle to watch.\n\nJackie's technique was energetic but without feeling: it was obvious that her sole purpose was to get Danny off as quickly as possible. This subtlety, however, was lost on the laughing, cheering boys gathered in a tight circle around her. Here and there a girl clinging to her date's side called, \"Yeah, suck that cock, slut!\" or \"Swallow it, bitch!\" Amy wondered what her Anthro professor would think of the scene.\n\nThe only boy who didn't seem to be having fun was Mike, who stood back a little, watching but not smiling or cheering. What was the expression on his face? Distaste? Dismay?\n\nWill was standing a few feet away from Amy, and next to him was a blond boy who said, \"Man, it's gonna be hard times when Jackie graduates.\"\n\n\"Not as bad as you think, Winston,\" said Will. \"We've got our new slut lined up already. A few of us have given her a test drive, and she rocks.\" Will grabbed Amy's hand and hauled her to his side.\n\nWinston said, \"Dude! She looks just like a toad!\"\n\n\"She looks a lot better with her lips wrapped around your cock,\" said Will.\n\n\"Whatever you say, man,\" said Winston. \"I'm gonna get a piece of Jackie while the getting's good.\" He crowded in beside Danny, unzipped, and pulled himself out. Jackie let Danny slip from her mouth and, sighing tiredly, sucked Winston's cock.\n\nAmy watched, turned on even though Jackie wasn't having fun. In a low voice, Will said to someone on the other side of him, \"You coming to the big sendoff, man? Just fifty - totally worth it.\"\n\nAnother voice answered, \"The Jackiebang? Wouldn't miss it, dude. Does she know anything?\"\n\n\"Not a thing. It's gonna be a big surprise.\"\n\nSomebody put on \"Drunk in Love,\" and Amy couldn't hear any more, but just watched as Danny unzipped Jackie's dress, which fell open, revealing a slender, pretty body. He shoved her to the floor, tore off her panties, rolled on a condom, and thrust into her while Winston, on one knee by her head, pushed into her mouth.\n\nJackie had the wrong attitude, that was it. She was letting them use her. Amy wanted to be on the floor there fucking Danny and Winston - they'd be her toys, though, serving her needs. The action would be exactly the same, and everything would be different.\n\nWinston and Danny traded places, Danny squatting above Jackie's head and pressing his tense, tight balls into her mouth. Jackie raised her hands reflexively, as if to push him away, but let them fall again. She hardly reacted as Winston pressed into her, though Amy knew she'd be squirming and moaning in her place - especially when Danny turned around and drove deep into her throat, which bulged as he fucked her.\n\nA boy standing beside Amy shouted into her ear so he could be heard over the music: \"These Alphas know fuck-all about women.\"\n\nAmy looked: he was smooth and neatly groomed, with a charcoal suit and a pink tie. She liked the look of him. \"How so?\" she shouted back.\n\nThe music ended, and he said, hurriedly before another song could begin, \"They've got no respect for women: they just use them up. Now my fraternity has a completely different philosophy. The men of Sigma Upsilon Kappa treat the women who visit our house as human beings and honored guests.\"\n\n\"That sounds nice,\" said Amy.\n\n\"Take oral sex, for example,\" he said. \"My name's Roy, by the way.\"\n\n\"Hi, Roy. I'm Amy.\"\n\n\"I know - you're famous. Now they're fucking Jackie's face, but do they ever give her any head? I don't think so.\"\n\n\"And you do at Sigma?\"\n\n\"It's a requirement. We don't let in boys who objectify and degrade women. To prove they have the right attitude, they have to demonstrate that they can eat pussy. Rush is a great week for our house slut!\"\n\n\"I'll bet,\" said Amy.\n\n\"I'd love to show you some respect,\" said Roy.\n\n\"What girl doesn't like respect?\" said Amy, reaching for the button of her jeans.\n\nGiving her a wicked grin, Roy took her hand and pulled her over to a big leather chair in a corner. \"Sit there,\" he said.\n\nAmy pushed down her jeans and panties, sat, leaned back, and spread her legs. Someone put on \"Timber.\"\n\n\"A good song to go down by,\" said Roy, kneeling between Amy's legs. He gazed at her pussy, reached out, and petted her mound like a guinea pig.\n\n\"You ever think of shaving this?\" he asked.\n\n\"Every day,\" she said.\n\nHe leaned in and sniffed. \"Powerful bouquet,\" he said.\n\n\"I've been wet since like four.\"\n\n\"I see,\" he said, and gave her clitoris a soft lick.\n\nHere was another new experience to savor. The difference between Roy's tongue and her finger wasn't just that his tongue was wetter and softer (though those were nice things), but also that the tongue was his, not hers - she had to give up some control to him and trust him with her body's most sensitive spot. That was a turn-on, especially since she didn't know anything about this guy.\n\nHer pussy tasted good, and the skin of her fleshy thighs was smooth and white. He spread her labia with his fingers, revealing the inside of her, damp and luscious pink. He licked up and down her inner labia and up the middle of her to her clit, where he drew circles with the tip of his tongue and, when she sighed and wiggled, gave her a little suck.\n\nRoy liked eating pussy - he liked it a lot, knowing what it usually led to. His frat's unofficial slogan was \"The road to a blowjob runs through the cunt\": if you wanted a girl to service you, you had to give a little, and eating pussy was a small enough thing, even if it was kind of fishy. Roy was good at it. He ate Amy patiently, waiting for his turn.\n\nAmy had never been eaten before, and she was in no hurry, especially now that they were drawing a crowd and she was starting to get turned on being watched. She'd have to add exhibitionism to the other weirdnesses she'd been discovering over the last couple of days. There was what's-his-name from last night, staring at her pussy; there was George, discreetly touching himself through his pocket; there was Danny with a blonde in a red sequined dress clinging to his side. There was Mike, too, but Mike wasn't looking at Amy. She followed his gaze: it was Jackie he was staring at, now slumped in a plastic chair by the wall, ignored by the crowd.\n\nRob was getting impatient. When would she get the memo about reciprocating when a guy ate you? He'd step things up, try to make the message clearer. He put his hands under her thighs, hoisted her legs, and licked her ass.\n\nHe'd done this before, of course. It was part of the Sigma philosophy: if you rimmed a girl, that was like an exclamation point on your ministrations, a signal that your fuse was getting short and she'd better fucking get moving. But there was something different and exciting about this girl's ass. It was loose and damp; his tongue slipped into it. It had an odd flavor, too: not shit, just odd. It was disquieting, but there was nothing wrong with it: he decided she probably had low muscle tone and an eccentric body chemistry, maybe related to diet, and he drilled into her.\n\nAmy stared, liking the look of Rob's nose disappearing behind her mound and the feel of a tongue in her ass, which was still sensitive after the stretching Mike had given it. It was so warm, so wet, so intimate! Not only was it a turn-on, but her reputation as a slut seemed secure now that dozens of people were watching a boy lick her ass: she'd get a lot more sex out of this.\n\nRob was falling in love with Amy's asshole - the flavor, the way he could put his tongue inside, the way she was writhing, emitting little shrieks when he tongue-fucked her. She wasn't playing the sophisticate: she was a woman in the throes of passion. On an impulse, he reached around one chubby thigh, located her clit, and rubbed hard.\n\nAmy shrieked and bucked, mind and body zooming out of control - she couldn't slow things down, didn't want to, but let herself go and came with a scream that drowned out Rihanna's thumping dance tune. The crowd cheered, and someone shouted, \"Suck his cock, Amy!\"\n\nOkay, she was willing to suck his cock. She struggled to a sitting position, and he sat back with a dazed look. The end of his nose was wet. \"Stand up, baby,\" she said.\n\nHis cock was ridiculously hard: she had a job getting it out of his pants. But it was a good one, uncut and with olive skin, not thick but nice and long, with a bluish glans already peeking out. She slid the foreskin back; her mouth watered; she leaned forward and let him slide into her.\n\nOff to one side she heard Will say, \"What did I tell you? Incredible cocksucker.\" She imagined word spreading through all the fraternities and all the dorms, over GChat and on Facebook: Amy Marsh, incredible cocksucker. As she sucked, she rubbed her pussy with one hand and put the other on his ass, pulling her to him so everyone could see her deep throat him.\n\nRob pushed her down so her back was flat on the big chair, head propped against the back, ass hanging off. She lifted her legs, exposing her whole undercarriage to him so he could take his choice of holes and so everyone could see: she didn't care if they liked what they saw, as long as they looked at her.\n\nRob stopped and stared, trying to decide - then plunged into her pussy and fucked her so furiously her thighs, belly and tits jiggled.\n\n\"Yeah!\" she yelled, \"Fuck me!\" and the crowd echoed \"Fuck her! Fuck her!\" as \"Pull Up to the Bumper\" boomed from the speakers. When Grace Jones belted \"I've got lots of space for everyone,\" Rob yanked himself free, and his cum arced over her, splattering her belly, breasts, neck and glasses. The crowd cheered and applauded, but soon began to disperse as people spotted friends or noticed more interesting things going on in the room.\n\nAmy picked up her clothing and went off to find a bathroom. When she got back, Jackie was sitting against a wall looking desolate, invisible to the partygoers, who were talking, laughing, flirting, and backslapping.",
        "Amy set a course for Jackie, but Mike intercepted her. \"Um, Amy, do you think you'd want to .&nbsp;.&nbsp;.\"\n\n\"Later, Mike,\" she said. \"Come with me.\" She caught his hand and hauled him over to where Jackie was sitting.\n\n\"Do you know this guy?\" she demanded.\n\n\"Yeah. Hi, Mike.\" Jackie smiled at him shyly as he shifted from foot to foot.\n\n\"Hi, Jackie,\" said Mike, looking at his feet.\n\n\"Did you ever fuck him? Big cock, upturned?\"\n\n\"No, he never asked,\" said Jackie.\n\nMike shook his head.\n\n\"Tell us about the Jackiebang, Mike,\" said Amy.\n\nMike glanced left and right, as if looking for an escape route. \"She's not supposed to know,\" he said. \"It's a surprise.\"\n\n\"Not anymore,\" said Amy.\n\n\"It's like a combination going away party and April Fools' thing.\"\n\n\"And fundraiser.\"\n\n\"Well, yeah. We go through a lot of beer here. We gotta hold fundraisers now and then.\"\n\n\"You should raise your dues, then,\" said Amy. \"So you're luring Jackie here on some pretense .&nbsp;.&nbsp;.\"\n\n\"They told me they're having a dinner in my honor,\" Jackie whispered. \"On April first.\"\n\n\"And then you gangbang her.\"\n\n\"I should have guessed it,\" said Jackie, eyes filling with tears.\n\n\"Will said she'd love it,\" said Mike.\n\n\"Mike,\" said Amy with an exasperated sigh, \"she'd hate it. She doesn't want to be a slut, she's never wanted that. She wants to be a girlfriend.\"\n\n\"Really?\" said Mike, wide eyed.\n\n\"Yeah,\" breathed Jackie, gazing at him soulfully.\n\n\"Why don't you two go upstairs and get acquainted,\" said Amy. \"I'll stay here and entertain the troops. We'll talk more about this Jackiebang tomorrow.\"\n\n5. April Fools' Day\n\nNatty in a tuxedo, Will strutted to the front of the common room and addressed his assembled brothers and the guests of Alpha Eta Pi in his most sonorous voice and grandest manner.\n\n\"Welcome to the celebration of our beloved slut Jackie. Most of us have known her (in the various senses of that word) since she alighted on our doorstep as a mere freshman nearly four years ago. She dated a few of our brothers early on, but soon discovered that, for her, the more satisfying relationship was with the fraternity as a whole. Few indeed are the Alpha men for whom she has not, at some time or other, relieved the loneliness of a night when a girlfriend was out of town, soothed the pain when a sought-after date failed to materialize, or calmed the nerves before an exam or a big game.\n\n\"She is a shining exemplar of womanhood, selflessly giving of herself to satisfy the needs of the men she loves. Tonight, to show our appreciation and our love, we are going to give her what her heart most desires - the opportunity to achieve a deeper satisfaction by serving a much larger number of men.\n\n\"She knows nothing of this: her native modesty might have kept her away if she'd known what we were planning on her behalf. Indeed, that same modesty may prompt her to pretend to resist our desire to honor her in the way she'll appreciate most. But knowing her heart and mind as we do, we can proceed with our celebration in the confidence that what we do for her tonight will meet her needs much more than it does ours.\n\n\"She will come through that door at any moment, and I will prepare her for the celebration.\" He held up a pair of handcuffs and a whip, and the crowd applauded. \"All you need to do is follow my lead. Now let us wait respectfully for our guest of honor.\"\n\nWill stood by the door and surveyed the crowd. It was a satisfaction that so many had turned out: around fifty, if he guessed rightly, paying fifty a head. That would come to around twenty-five hundred dollars for the chapter - pure profit, since they were providing no food or drink, nothing but the slut, who was free. He considered passing the time by taking a head count, but what was the point? Mike, who was collecting the money at the door, would give him an exact accounting later.\n\nHe glanced at his watch. It was two minutes after eight. The fucking slut was always late. He probably should punish her for that, but what would be the point? Bitches like that were wired for getting decent grades, but not for learning the important lessons of life. The new slut, Amy, would be much more satisfactory, even if she was a dog - the way she always said yes promised great things. She'd probably be just as stupid as Jackie, but at least you wouldn't have to argue her into a butt-fuck.\n\nEight-fifteen. The guys were getting restless. \"Don't worry,\" Will announced. \"Jackie's sometimes late, but she's reliable. I personally guarantee she'll be here soon. In the meantime, we'll break out some beers from our ample stock.\" He nodded at Theo and George, who ran to the kitchen and returned a couple of minutes later pushing a cart laden with cases of Miller, which they distributed among the brothers and guests.\n\nEight twenty-five. Will went to the house office to call Jackie. There was no answer. He left an urgent message: \"Babe, get your ass over here.\"\n\nEight thirty-five. The guests were grumbling about rip-offs. Will sent Theo to find a number for Amy Marsh. It took him ten minutes to find it, but at least she answered her cell on the first ring.\n\n\"Babe!\" Will exclaimed in relief. \"Can you get over here ASAP? We totally need a slut, and we can't find Jackie.\"\n\n\"Sorry, Will, I've got a date.\"\n\n\"But you're the girl that always says yes!\"\n\n\"I already said yes to somebody else.\"\n\n\"Look, if you want to be the Alpha house slut .&nbsp;.&nbsp;.\"\n\n\"I don't.\"\n\nAmy ended the call with a sense of satisfaction. It was her twenty-first birthday: it was a pain, being an April Fools' baby, but this had been a good one. She had celebrated by going to a beauty salon, where she'd said, \"Do whatever you can.\" The stylist had swallowed hard and set to work, and Amy thought the result not half bad, really. Then she'd bought a tiny black fuck-me dress. She picked up her purse, made sure she had her driver's license and some other things, and headed for the door. Rob had invited her to a party at Sigma Upsilon Kappa, and she didn't want to be late.\n\nBack at Alpha house, Will said, \"Where's Mike?\"\n\n\"Dunno, dude,\" said George.\n\n\"Check his room. We're gonna have to refund these guys their money.\"\n\nBut Mike wasn't in his room, wasn't in the games room, wasn't anywhere. Neither was the gray steel cash box in which Mike had been keeping the day's receipts.\n\nNine o'clock. Will drooped back to the common room, followed by George and Theo. Some fifty horny and angry men turned to stare at him. He opened his mouth to speak, but what was there to say?\n\n\"Where's the slut, dude?\" asked a beefy guy, big as a fullback.\n\nWill took one step backwards towards the door.\n\n\"Where's our fuckin' money,\" said another even bigger jock.\n\nWill, George, and Theo turned in unison, like water ballerinas, and ran.\n\nAmy was puzzled that there was no one checking IDs at the door of Sigma house and no people coming and going. There didn't seem to be a party. Well, maybe it was a little one - either that or she'd gotten the date wrong and trekked all the way over to Fraternity Row for nothing. She tried the door, and finding it unlocked, let herself in.\n\nThe house was quiet. She passed a big empty living room, a dining room, and a kitchen before she heard indistinct male voices from somewhere farther along. She came to an intersection in the hallway and listened. The voices were coming from the right. She followed the sound to a closed door, which she put her ear to, but couldn't make out what they were saying. She opened the door and stepped inside.\n\nFour boys turned and gave her a stony look. Rob and three Alphas, Will, George and Theo, stood in a cluster near a big pool table, looking as if they'd been deep in conversation. She thought about running, but decided it would do no good.\n\n\"Where's Jackie?\" Will demanded. \"Where's Mike?\"\n\n\"Where's the party you invited me to?\" Amy asked Rob.\n\n\"Where's our fucking money?\" snarled Theo.\n\n\"So many questions,\" said Rob. \"Let's take 'em one at a time. Let's see. The party. That was gonna be an April Fools' Day joke. You would come here looking for a party, but instead you'd find me here by myself because my brothers were all out being silly here and there. You would comfort me in my loneliness.\"\n\n\"Kind of a lame joke,\" said Amy, \"but it would have been fun.\"\n\nRob continued, \"My plan got derailed when these Alphas came running in with a mob of like fifty pissed off guys on their tails, all with hard-ons. I helped calm things down, and when the four of us laid our heads together we figured out you'd be able to tell us what the fuck is going on.\"\n\n\"So tell me where our slut is,\" said Will, \"and Mike.\"\n\n\"They're your people. I hardly know them.\"\n\nGeorge said, \"Been chatting with my homies, hearing you've been seen around a lot with Mike and Jackie the last few days.\" He held his phone up as if it were evidence.\n\n\"We hung out a little. So what?\"\n\n\"Fuck this,\" said Theo. \"Let's just beat the shit out of her till she coughs up our money.\" He clenched his fists and did a totally convincing impression of a thug.\n\nAmy took a step backwards. \"You guys are nuts.\"\n\nGeorge grabbed her wrist and hauled her into the room. Theo made a run at the door, slammed it shut, and wheeled to face her. \"You think you were ugly before, wait till we're done with you.\"\n\nAmy looked at Rob. \"Are you going to let this happen in your frat house?\"\n\n\"Hey,\" Rob shrugged. \"The Alphas are a brother house, and the honor of the Greek system is at stake. Just give them their money, and nothing bad will happen.\"\n\n\"I don't have it.\"\n\nWill said, \"Punch her in the face, Theo, and see if that changes her mind.\"\n\nTheo grinned and raised a hand.\n\nTerrified, Amy blurted, \"I'll pay you back!\"\n\n\"Now we're getting somewhere,\" said Will.\n\nShe closed her eyes and took a deep breath. \"The money's gone, and I can't get it back for you, but I'll pay you in kind.\"\n\nWill gave her a suspicious look. \"What do you mean?\"\n\n\"Mike took fifty each from forty-eight guys,\" said Amy. \"Twenty-four hundred dollars. What do you think you'd have to pay for a four-on-one? I'm not talking about shares in a rape; I mean a real gangbang with a willing girl.\"\n\n\"A whore,\" said Rob.\n\n\"Yeah, if you want to put it that way. It'd cost you a lot more than fifty. Make it, let's see, six hundred a head. That sounds about right.\"\n\nRob stared. \"You're saying .&nbsp;.&nbsp;.\"\n\nHeart thumping, Amy said, \"I'll pay you in sex.\"\n\nThe boys watched glassy-eyed as Amy set down her purse, reached behind her, unhooked her dress, and wiggled out of it. Underneath she wore a black bra and panties, which she took off and dropped on the floor. If she was no beauty, she was plenty good enough: her hair was done in a cute bob, her pretty lips red, her face smooth and round, eyebrows sculptured, breasts swelling, pussy shaved. Everything about her screamed \"Fuck me!\"\n\nShe picked up her purse, went to the pool table, and shook its contents out onto the felt: half a dozen condoms, a little bottle of lubricant, a driver's license. She put the license back along with her glasses and set the purse on the floor.\n\n\"You know I'm a good fuck,\" she said. \"Anyway, my body is all I've got to give you, so you'll have to take it or leave it.\"\n\n\"It's a good offer, brothers,\" said Rob, staring at Amy's prominent nipples. \"She's right that the price is a lot fairer than what you were asking for Jackie.\"\n\n\"What do we do about paying back fifty bucks to all those guys?\" said Will.\n\n\"Not my problem,\" said Amy. \"Dig into your treasury. I'm sure you've got it. Or do what I'm doing and let them fuck you for it.\"\n\n\"Very funny,\" said Will.\n\nAmy scanned the boys quickly - their crotches, not their faces. Yes! Theo had a hard-on. Her heart was still pounding: her body wanted to make a dash for the door, but she willed herself to be calm. She closed the space between them, moving smoothly, a cat stalking a bird, and stroked his cock through his pants. He stood still, face expressionless.\n\n\"Here I am,\" she purred, reaching for his belt buckle, \"just a weak little girl shut up in a room with four big strong men, and I need a fuck so bad!\"\n\nIn another second Theo's pants were around his ankles and she was on her knees, sucking his cock.\n\nUnbuttoning his shirt, Rob said, \"I thought I'd have this bitch to myself tonight, but if I've got to share her, well, what the fuck.\" Naked, he pressed in beside Theo, and Amy turned to suck him, holding Theo in her hand to make sure he didn't get away.\n\nAmy's ploy seemed to be working, but she was still terrified. Sure, she had decided to be a slut and was happy with her decision, but her other exploits so far - even the three blowjobs in the Alpha kitchen - were a walk on the beach compared to what she was setting out to do now. She'd invited these four boys, three of them seriously pissed off, to gangbang her: what would they do? She'd watched gangbang videos and wondered how some of the girls got through the scene, the men were so rough.\n\nStill, Rob's cock was heavenly - its olive tone, the foreskin, the big glans, all the details she'd lovingly recorded in her journal. She remembered how good it felt in her pussy; sucking it was like greeting an old friend.\n\nAt the edge of her vision, Will and George were stripping: four votes for a gangbang, then, and none for a beating. Soon all four of them were crowded around and she was deep throating them one after the other as they pulled her to them by the hair and fondled her breasts and bottom. So far so good. No one was hitting her - not hard, anyway - and she'd done this before. Four cocks were thirty-three percent better than three!\n\nAmy was sucking Theo again when suddenly he pulled out of her, scooped her up with strong arms under her back and thighs, and carried her to the pool table, where he tossed her onto the felt. She landed on her back with a thump, heart still pounding, but with excitement now rather than fear as Theo leapt onto the table, got to his knees, hoisted her by the waist, and rammed into her.\n\nRob protested, \"Look out for the felt, man,\" but Will and George, ignoring him, climbed on and half-knelt on either side of Amy's head. She turned towards Will, who shoved between her lips and fucked her throat in a kind of frenzy.\n\nRob stared at the pretty creases in Amy's tummy; his gaze roved up past her fleshy, jiggling breasts, heaving with excitement, to her face, so sexy with Will and George pummeling her. She reminded him of that plump Italian porn star, Valentina something - so hot! Well, they'd have to replace the felt whether he joined in or not. With a sigh, he climbed onto the pool table, straddled Amy's head as Will and George backed up to give him room, and squatted, pushing his cock into her shapely mouth.\n\n\"Mmmff,\" said Amy as Rob's balls pillowed over her nose. She stared into his crack, at his hairy anus. Her stomach lurched and she turned her head, losing Rob for a moment; but she recovered quickly, spat out a mouthful of drool, and went back for more of him.\n\nAmy wasn't afraid anymore. She was still getting some of the buzz you get from fear, but it had morphed into arousal - not an impulse to flee, but a desperate need for more excitement, more intensity! So when Rob pulled out of her, she gasped, \"Somebody fuck my ass!\"\n\nGeorge shouted \"Me!\" and lay on his back, holding his thick erect cock. The others hauled Amy upright, and she stepped over him, facing his feet, and eased herself down on him, gasping with the momentary pain and then letting him stretch her slowly, slowly, till he was all the way in.\n\nShe rocked on George's cock to stimulate herself, let her legs fall wide open, and rubbed her clit. \"Oh, yeah!\" she sighed as Will's cock loomed on one side of her and Theo's on the other. She sucked them both.\n\nRob stared, mesmerized, at Amy's pussy. He loved a shaved mound, fat outer labia, inner lips hot pink and floppy: Amy's, now gaping at him hungrily, was the pussy of his dreams. For a moment he felt dizzy; he shook his head to clear it, hunkered down between her legs, and pushed into her.\n\nNothing was happening to Amy's body that hadn't happened already in the last few days, but now it was happening all at once. Her sensory input circuits were so overloaded she couldn't sort out the feelings, and it seemed, somehow, to be adding up to way more than four fucks as the boys crowded in, their hot and sweaty bodies suffocating her; they pawed her, pushed her, pulled her, spanked her breasts and bottom, called her bitch and cunt - so fucking exciting. For the better part of an hour they took turns in all her holes, till she was sore and dreamy with tiredness.\n\nShe didn't know how or when it happened, but somehow it seemed to her she was out of her body, a camera looking down on the action from a corner of the ceiling, seeing herself, plain little Amy, pudgy Amy, red and sweaty Amy, nipples puffed out, snatch dripping, every hole stuffed with these boys who, fucking her, believed they were controlling her and running this show.\n\nBut no, no, no! This was her movie, she was the star, and the boys were nothing more than extras, brought on to play her worshipers. All the women she'd seen in her favorite porn videos flashed through her mind. How many of them were great beauties? Not fucking many. It was the ability to create sexual excitement that made a porn star, not an actress's beauty, and she knew she could do that.\n\nShe gazed into the lens that was her own disembodied eye, and through it into the transported faces of thousands of men watching her fuck, wanking in their home offices while their wives, slaving in the kitchen, thought they were doing the taxes - and all at once the sensations went supernova inside her, way beyond anything she'd known with her dildos and vibrators, with what's-his-name in her pussy or Mike in her ass, and she reared back from the cock she'd been sucking and howled out her orgasm, coming and coming, who knows how long, till she was spent and numb and back in her perforated body again.\n\n\"Fuck,\" said Rob, whose cock she'd been sucking when her orgasm struck. Understanding that he'd witnessed a seismic event, he watched, struck dumb, cock pulsing in his hand.\n\nWill, who'd been fucking her pussy, stood up, grabbed her by the neck, and pulled her up to him.\n\n\"Yeah, give it to me!\" she shrilled, and he put the end of him into her mouth and jerked himself off, just a few rapid strokes before he filled her with his cum - it was thicker than last time, but still sweet. Below her, Theo pulled out of her ass, and his cum fountained up onto her belly and breasts while George gave her face a liberal coating of milky, runny spunk.\n\nFinally Rob woke from his trance. Overcome with lust, he jammed into her mouth and, holding her head in two hands, banged her savagely, balls slapping her chin. He stared down at her, taking in her open eyes, his shaft pistoning in her face as her lips and nose crashed into his belly over and over, the sensation of his cock in her narrow passage, impossibly deep, the loud fluid slopping inside her. Her beauty was inconceivable, unbearable: in a spasm of passion, he held her to him tightly, face smashed against him, and pumped his huge load into her, flooding her throat, her mouth and sinuses; it streamed from her nose.\n\nThey stood and watched as she spluttered and coughed and finally sneezed a glob of Rob's cum into the valley between her breasts. It ran over her stomach and onto her mound.\n\n\"God damn,\" said Rob reverently.\n\nMany miles away, Jackie and Mike cuddled together, blanket over the two of them, as the 787 leveled off at thirty-five thousand feet. Under the blanket, Mike toyed with Jackie's pussy through her tight yoga pants.",
        "\"When I get you to Fort Lauderdale, baby .&nbsp;.&nbsp;.\" he whispered, barely audible above the engines' hum.\n\n\"Ooh,\" Jackie squealed. Her voice was like a squeaky hinge, but to him it was celestial music.\n\n\"I'm totally gonna fuck you silly.\"\n\n\"I can't wait, sweetheart. And in the morning I'm gonna slather suntan lotion all over you .&nbsp;.&nbsp;.\"\n\nMike groaned \"Oh, baby.\" She was stroking his thigh, so close to his cock. It seemed too long till she'd be sucking it in their hotel room.\n\n\"And we'll hit the beach, and eat lots of seafood, and dance, and we'll fuck again .&nbsp;.&nbsp;.\"\n\n\"Oh, yeah,\" Mike sighed. Who gave a shit about a week of classes? This was the last semester of their senior year and no one expected them to do serious schoolwork. And how often does it happen that you find the love of your life and within a few days of that get twenty-four hundred dollars dropped in your lap with orders to spend it fast? God bless Amy: it had all been her plan.\n\nBack in her dorm room, lying on her tummy, the object of Mike's gratitude closed her journal (\"Apr. 1. Four frat boys, A197,\" with details of cocks and cum). She pulled her laptop to her and navigated to a site that recruited college girls for hardcore porn shoots. She found the contact page and started to fill in the form there: Name, Date of Birth, Recent Photo, Kinks .&nbsp;.&nbsp;.\n\nBehind, Rob's wet and worshipful tongue slid into her, a sweet lubricious counterpoint to the sensuous staccato of the keyboard. She wiggled her bottom and filled in another field. Oh, the world was full of wonders - so many beautiful bodies, so many cocks gushing so much cum - and Amy would try as many of them as she could."
    ],
    "authorname": "Serafina1210",
    "tags": [
        "straight sex",
        "anal sex",
        "group sex",
        "mmmf",
        "mmmmf",
        "penis",
        "cum eating",
        "college",
        "fraternities"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/amy-says-yes"
}
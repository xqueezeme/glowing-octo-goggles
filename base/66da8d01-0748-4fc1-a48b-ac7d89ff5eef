{
    "title": "The Player Witch Augment",
    "pages": [
        "Ross had to wait for the entire street to be empty before he dared enter the storefront he was stood near for a few minutes. He pretended to read the USA Today he'd found near a trash can until everyone's back was turned, and he jumped into the entrance of Mystical Solutions.\n\nAs generic a name as any, Ross has received one email too many talking about 'natural enlargement' and 'male enhancement with herbs.' He'd always theorized that if those products worked, they couldn't possibly be kept a secret. The government would probably subsidize it and hand it out with the daily paper like that injection in Equilibrium.\n\nThis email was just a little too specific. His spam filter caught it, but not before he saw his home city of Walla Walla listed in the subject line. This may have been unsolicited, but it was also local.\n\nInside the Mystical Solutions shop were shelves and shelves filled with potions, triangular bottles with corks in the necks, mirrors and polished shields, and jars of eyeballs and shrunken heads that were presumably fake, but who knows? There was a single desk behind which sat a woman of tanned skin and uncertain ethnicity. She wore a wrinkled purple dress, two streaks of yellow paint under her eyes, shells woven into braids in her hair, and her bare feet crossed on the desk. In her hands, rather than a wand... was a Playstation controller. The woman wove with every move of the controller, as if she could control it with the sway of her shoulders. Even that was beyond her magic power.\n\nShe cursed in some unknown tongue and slammed the controller to the desk. The controller snapped in two like a stale bread stick. Ross was already intimidated. He'd always wanted to meet a chick who played video games... but he knew he wouldn't know how to handle her.\n\nThe woman sneered at her television and the high score she'd missed, and then turned to Ross. Her expression softened at the sight of the customer. Apparently, she wasn't mad about him interrupting her. \"Welcome!\" She said, speaking with a vague accent. \"I am Katrina Turnenkov. I am a witch doctor. How can I heal you?\"\n\nRoss couldn't find his voice. Katrina stood and came around the table. Of all the qualities he expected to see from a witch doctor... beauty wasn't one of them. Maybe she was just in training. She couldn't be older than thirty, he thought. Maybe she was the assistant.\n\n\"Where did you hear about me? Or did you just walk in for the free air conditioning?\" Katrina inquired, stepping closer.\n\n\"I got an email.\" Ross said softly, tugging at the collar of his ironic T-shirt.\n\n\"Ohh, you got a small dick, eh?\" Katrina said in a half-shout that wasn't necessary. Ross was mortified, even though nobody else was in the shop.\n\n\"Maybe this was a mistake.\" Ross started to back away, towards the door.\n\n\"Hang on a second.\" She pointed her nail-polished finger at him, and then at the broken controller. With an incantation that sounded more like a sneeze rolled into a cough than any actual words, the controller jumped up into the air and assembled itself back into shape. To Ross, it looked like someone had reversed the video footage of her smashing it. On television, he would have sneered at such a cheesy effect. In real life, it was far more impressive.\n\n\"Where were we?\" Katrina scratched her tangled brown hair. Ross expected a bat to fly out of it without warning. \"Oh yes, your tiny dick.\"\n\n\"It's not tiny.\" He insisted.\n\n\"I'll be the judge of that.\" Katrina summoned a caliper from somewhere, perhaps another dimension, and dropped to her knees. \"I need to see the specimen.\"\n\nRoss unbuckled his belt and pulled his jeans and boxers down at the same time. He was hanging free... if you could call it hanging.\n\n\"Aw.\" Katrina said at the sight of it. Ross' cheeks went red. That was the reaction he dreaded the most. Not a woman laughing at it, but sympathy. Pity. A woman so shocked by it's smallness, she wouldn't laugh at it for fear of hurting his feelings. He'd rather be in the range where a woman could feel fine just laughing at it.\n\n\"What are we working with here?\" Katrina muttered as she lined the calipers up to Ross' penis. She measured from the base to the tip and came up with two and one-half inches.\n\n\"That's pretty tiny.\" She mocked, looking at the calipers up close. She summoned a jeweler's loupe from the dimension she obtained her comedy props, held it in her eye and inspected the unit closer.\n\n\"Well, I'm not hard yet.\" Ross protested, pulling up his pants a bit. Katrina turned in place and looked at him expectantly. Ross took hold of his unit and shook it a bit. There wasn't much material to shake, sadly.\n\nKatrina reached both arms up to the edge of her strapless dress and pulled it down, freeing the large, soft mounds of her breasts. Ross gasped, and he was on his way.\n\nTucking herself back into her dress, she brought the calipers back up to Ross' now erect penis. \"Four.\" She said shortly. \"I'm sure it makes a difference.\"\n\n\"I'm not a virgin.\" Ross insisted. \"I have actually given women orgasms before.\"\n\n\"With that, or your tongue? Because your tongue's bigger, and probably gets more use.\" She wrote something on a notebook on her desk. \"Grower, shower... neither of the above.\"\n\n\"Can you help me, or are you going to just mock me all day?\"\n\n\"I'm only open till five.\" Katrina said. \"I can help you, but first... I need a sample.\"\n\nKatrina pulled out the least mystical object in the room, outside of the Playstation: a clear glass petri dish. She set it on the desk and looked up at him.\n\nRoss took in a long breath, took hold of his wang with thumb and forefinger and started to tug it back and forth, pointing it at the petri dish.\n\n\"Wow, you're just going for it?\" Katrina leaned into her hand, elbow on the desk, watching him jerk off like a cat watching a screen-saver. \"No lube or lotion or nothing?\"\n\n\"Do you have any?\"\n\n\"I've got hand lotion, but you can't use hand lotion on dicks. It's against the law.\" She said, still watching with a combination of intensity and apathy.\n\nA little time passed in silence. Ross didn't feel like he was getting anywhere.\n\n\"Is it more insulting to say you're bad at this, or that you're really, really good at it?\" Katrina piped up.\n\n\"I don't normally do this without porn...\" Ross confessed.\n\n\"Oh, yeah... expert mode.\" Katrina remarked. \"Jeez, don't you have any imagination?\"\n\nRoss worked his erection silently, trying to ignore her judging eye. He'd occasionally glance back at Katrina, at the deep fissure of her cleavage, heaving with every disinterested sigh.\n\n\"Alright, enough. As you Americans say, let's get this show on the street.\" Katrina sat up and started belting out intense orgasmic moans with the surprising vocal power of an opera singer. The tiny shop filled with her forced ululations.\n\n\"Oh, Ross! You've ruined me for all other men!\" She cried, her voice as sincere and rapturously orgasmic as her face was tepid. \"Ohhh, Ross! Sex with any other man would be like dropping a jelly bean into a pint glass! Ooohhh! Big doesn't begin to describe you! We need to invent one of those stupid American combo words like 'ginormous!' Ohhh! I'm going to start calling you Tyrannosaurus Ross!\"\n\nThe moment she finished that sentence. Ross stuttered, lurched forward, leaned on a nearby shelf, and ejaculated into the petri dish. He made what Katrina considered to be an average sized sample, thankfully not getting any on her desk. Whatever the flaws of this little pistol of a penis... aim wasn't one of them.\n\nKatrina took the petri dish gingerly and set it aside. She withdrew a single tissue from a box hidden under her desk, folded it into quarters and gently rubbed it on the underside of Ross' withering erection, picking up a small string of come like an errant booger from a nostril. She folded it again and tossed it off, presumably into a trash can, perhaps into the mouth of a highly trained and undiscriminating monster.\n\n\"Alright. I know what we're going to do.\" Katrina turned around and pulled a cylindrical bottle off the shelf. She pulled the cork out with her teeth and spat it to the desk. The bottle contained a white powder that she poured into her left hand and applied vigorously to Ross' nethers.\n\n\"What is this?\"\n\n\"It's a secret magical ingredient called talc.\" She applied the powder to his bits and clapped it off her hands. She grabbed a different bottle, performing the same cork trick. This powder was red-orange, with a grain size closer to sand, with little crystals that caught the light like glitter. She poured a mound of it into her left hand.\n\nKatrina applied the powder to Ross' penis and testicles. It stuck to the skin vigorously like a wet dough or mud. She massaged the material into the skin. Ross felt his face redden as he grew aroused again. \"Don't worry about that.\" Katrina assured him. \"That's normal.\"\n\nThe door to the shop flew open, the bell ringing and the door slamming into the opposite wall. \"Katrina!\" Someone shouted.\n\n\"I'm with a client.\" Katrina said, evidently agitated. \"Come back next never.\"\n\n\"What's up with my cock?!\" Said the customer, a taller man in a suit with short hair slicked back with gel. It looked like he'd come from the office on his lunch break to take up this grievance. It was equally possible he walked off the set of an eighties financial thriller.\n\n\"What do you mean, Martin?\" Katrina said, never taking much attention away from her massage.\n\nThe man, evidently named Martin, stood next to Ross. He reached into his pants and pulled out his cock.\n\nSuddenly, Ross was feeling more confident he'd made the right choice after all. Martin's cock hung long like a store-bought roll of cookie dough, at least a foot long and balls like small avocados. If they put a picture of that in the email, he would have thought the photo had been manipulated.\n\n\"What? It's right there.\" Katrina pointed, disinterested. \"This wasn't exactly, how do you \n\nAmericans say, Where's Waldorf.\"\n\n\"It won't get hard!\" Martin shouted. \"I haven't been hard since I got it! What good is a dick that won't get hard?\"\n\n\"You men are so picky about your dicks...\" She groaned. \"If it doesn't work, it's on you, Martin. Go buy some blue pills.\"\n\n\"I'm 25! I'm not buying any boner pills!\"\n\n\"Then try butt-stuff. See if you get hard that way.\"\n\n\"I'm not doing that! I ain't gay!\" Martin was incensed that she wasn't paying attention. She reached over and pushed her shoulder to turn her head to him.\n\nThat did it. She took one hand off Ross' nads and pointed it, barking some incantation that send Martin flying out of the store and shutting the door behind him. Martin landed flat on his back in the street. A passerby helped him to his feet, and they both realized at the same time his dick was still hanging out of his pants.\n\nMartin scooped it back in his pants, apologizing to the woman before running off. The woman wasn't sure what she'd just seen, but she chased after him regardless.\n\n\"Can't please everyone.\" Katrina hugged, returning the focus to Ross' genitals. \"Well, he could surely please everyone... if he could get an erection.\"\n\n\"Is that going to happen to me?\" Ross asked.\n\n\"No, no, no.\" Katrina assured him with a gentle pat on the scrotum. \"Probably not. Anyway, we're at the important part. I'm going to pull on it. If it hurts, tell me right away. It shouldn't hurt at all. If it hurts, I haven't used enough of the orange stuff.\"\n\nRoss nodded. Katrina held the base of Ross' little member in the space between her thumb and forefinger, and the other hand just below the head. She pulled on it, gently but firmly, and it began to stretch. It lengthened with the same ease as pulling chewed gum or Silly Putty. Unlike those substances, it didn't seem to be getting thinner as she pulled it. It was really growing.\n\nShe kept pulling, stretching the penile tissue outward, until she released it to get a different grip. In that moment, his half-hard cock drooped down past his balls. Ross was shocked. His cock was actually hanging past his balls for the first time in his life.\n\n\"Do you have a specific length in mind?\" Katrina asked.\n\n\"No, I'll trust the artist to make it the way it should be.\" Ross answered.\n\nKatrina smiled. She'd never been called an 'artist' before without it following the word 'con.' She took some pre-moistened towels and cleaned the orange paste from Ross' genitals. She quickly wiped her hands with one of them.\n\n\"Where did you get this stuff?\" Ross asked, admiring his new cock. He was finally confident enough it to call it that.\n\n\"It's hard to find. Dangerous, too.\" Katrina opened her hand, which was also twice as large as it was before, a giant mitt with long, bony fingers. Ross gasped, but Katrina was unmoved. She found a tin of salve and rubbed it vigorously between her hands. The salve evaporated like hand sanitizer, leaving a distinct minty smell in the air. She compared her hands. They looked about the same size again.\n\n\"We're almost done, but there's one last step.\" Katrina leaned forward and held Ross' cock aloft. \"Trust me, this is necessary and unavoidable. There are other techniques, but this works the best. I wouldn't do it unless it was the best, OK?\"\n\nKatrina inhaled deep and planted her lips on the very tip of Ross' cock, blowing into the hole at the tip. His cock inflated considerably in girth, and his balls grew larger as well.\n\nShe released it, and to his relief, his cock didn't flutter around the room like a released balloon, making all sorts of undignified noises. It was still there. It even had the heft of flesh, rather than the floaty feather-like physics of a balloon. Ross would definitely be giving this place five stars on Yelp.\n\nKatrina surprised him by jumping up and kissing him on the lips. He immediately backed away. \"Ew, gross!\" He wiped his mouth on his sleeve.\n\n\"YOU think it's gross? It's your dick!\" Katrina sneered. \"Sheesh, can I get one grateful customer, please?\"\n\n\"No, I'm grateful. Definitely.\" Ross said. \"What's the final measurement?\"\n\nKatrina opened the calipers all the way, but they were not big enough. She retrieved a strip of measuring tape and made it official. The new Ross was thirteen inches long. She could say one foot, one inch, but 'thirteen' was her favorite number, naturally. It's girth was eight-and-a-quarter inches around, roughly the same circumference as a can of soda.\n\n\"I think this has turned out pretty well.\" Katrina said, proud of her handiwork. \"Don't touch it for a while, OK?\"\n\n\"Will my hand grow like yours if I did?\"\n\n\"No, but it needs time to set. Just don't mess with it for, like, an hour. Otherwise, it'll get air bubbles in it.\"\n\n\"Yes, ma'am.\" Ross finally elected to tuck his half-hard schlong back in. Finally, he had a use for his boxer leg other than putting his leg through it. He hung it to his left, as he was right-handed. He saw the petri dish of his jizz. \"What was the point of that, then? That didn't seem to come into play.\"\n\nKatrina just shrugged, taking the dish and stowing it away somewhere.\n\n\"What do I owe you?\" Ross asked.\n\n\"Don't worry about that yet.\" Katrina said. \"You make sure it meets your needs, and we'll work on a payment plan.\"\n\nRoss shrugged. \"OK. Thank you very much, Katrina.\"\n\n\"It is my life's work. Thank you for stopping by.\" She bowed her head gently. Ross left, walking with considerably greater confidence than he'd entered.\n\nKatrina sat back down and picked up her controller. She was about to start a new game when someone else burst through the front door. She snarled and dropped the controller again. Apparently, she wasn't getting any high scores today.\n\n\"What is it?!\" She shouted, standing. She stood face-to-face with a bearded man with a shaved head. It was Dave, another of her clients. \"Hey, Dave. Thanks for putting a hole in my wall. I really appreciate that.\" She barked at the hole, and it obediently stitched itself back together.\n\n\"I want the rest.\" Dave growled. \"I can't keep going on like this.\"\n\n\"You're the one who wanted to do this in installments, Dave.\" Katrina said. \"We are not, how do you Americans say it, changing the horse's diaper mid-stream?\"\n\n\"You think I can get laid like this?!\" He pulled out his junk, because why not? Everyone who comes in her shop today can just flash their junk at her without provocation, as if you could do this in any regular doctor's office. Dave's balls were mighty, like two oranges in a bag, but his penis was regular-sized. Compared to the balls, it looked like a worm crawled on a flesh-colored rock to die in the sunlight.\n\nKatrina was unfazed. \"You're the one who said, 'do the balls first, it'll look silly, a big cock with small balls.' Well, I did it the way you asked, and now I'm not doing the rest until you stump up the cash.\"\n\n\"You're going to fix this, or I'm going to knock your block off!\" Dave pointed his finger at her fiercely.\n\nKatrina's expression darkened, and perhaps the room did as well. Dave could swear he heard thunder somewhere in the distance. \"You dare threaten me?\" Katrina said, teeth clenched. Her fist started to glow white with unknown power. \"Maybe you should learn to live with no cock at all!\" She barked a long incantation and threw her arm towards Dave.\n\nHis reaction time faster than even he expected, Dave grabbed a shield from the wall and cowered behind it. The spell exited Katrina's hand, bounced off the polished surface of the shield and returned to the only valid target in the vicinity: Katrina herself.\n\nThe magical energy surged through her whole body, causing her to shudder for a moment. They both stood still for a second. Dave peeked out from under the shield. \"Did that spell bounce off this and hit you?\"\n\n\"It sure looks that way.\" Katrina answered tensely.\n\nThere was silence except for Katrina's grandfather clock, accented with fake bones and a few real ones, like the tibia tied to the pendulum.\n\n\"What happens to a woman who's hit with a 'take-away-the-cock-spell?' \" Dave asked.\n\nKatrina looked down. \"Evidently nothing.\"\n\nAnother silence. \"Can I go?\" Dave asked meekly.\n\n\"Come or go, I don't care. But I could literally turn you into a frog or a maple tree if I wanted to. Why don't you just pay me?!\"\n\n\"Alright, fine!\" Dave put his hand in his pocket and pulled out a wad of cash. \"There we go.\"\n\nKatrina counted it. Sixty bucks. \"Was that so hard?!\" Katrina bellowed. She barked a few incantations and pointed at his groin. His fly immediate broke open, ripping apart like a fat guy muscling into a medium-sized shirt. Katrina didn't let him inspect the merchandise before waving her hand and tossing him from the store. He would not get the hand-crafted beauty that she gave Ross; he wouldn't appreciate it anyway.\n\nKatrina walked up to the front door, turned around the sign that said, \"Back in 15 Minutes,\" locked the door and closed the shade. She entered the tiny space behind the storefront that she generously called 'the back room.' It had a full-length mirror for doing makeup and other such things, but she needed it for something else.\n\nKatrina pulled her dress over her head and threw it off. Now all she had on was her dainty pink panties, the only thing so self-consciously girly she ever wore. She couldn't help loving her tiny panties, but she might have to start wearing something else. Barely restrained within was a new addition to her body: a cock.\n\nTossing her panties off, she stood naked in front of the mirror. It was an average-sized cock, if the sad examples her clientele came were anything to go on. She hoisted the member up and felt between her legs. Her pussy was still there. That was a relief.\n\nStaring at her reflection, the cock started to rise by itself without her touching it. Katrina was a bit embarrassed to be aroused by her own reflection, but... she was beautiful, and she liked cocks so much, she spent most of her days making the biggest ones in the world.",
        "Katrina got her measuring tape. She was six inches long. In her experience, that was a perfectly acceptable length. But all the men who entered her shop didn't want just a few inches added. She'd make monsters out of anyone, if that's what made them happy. She was just helping the men catch up on the trend breast implants started.\n\nResisting the urge to stroke it, just to see how it works, she instead stood facing the mirror and pointed her finger towards the reflection of her new cock. She shouted the same spell she tried on Dave. It bounced off the mirror and back to her. Her body spasmed as the energy went through her body. She looked at the reflection, waiting for the cock to disappear.\n\nInstead, before her very eyes, it grew longer and thicker. She grunted in annoyance, getting the measuring tape out again. It was now ten inches. Not that it mattered. Well, size obviously matters, but whatever size it was, she could get rid of it... probably.\n\nThe shrinking salve! Of course! She applied latex gloves before continuing, in case she shrunk her hands to the point she couldn't hold stuff or cast spells effectively. She could wear gloves when applying the orange stretching powder, but... then she couldn't palpate so many big cocks with her bare hands. What fun would that be?\n\nShe took a generous handful of the shrinking salve in her gloved hands and applied it to the engorged region. The chill made her suck in air through her teeth. Her hand slid the cool slimy material to her cock, her mind wandering off as she rubbed it. She forgot what she was doing, most of the salve evaporating as it allegedly did it work. The cock didn't feel like it was getting smaller, but she felt herself coming closer to orgasm.\n\nHer hand got faster, her breath grew deeper, her breasts bounding with every stroke. Katrina closed her eyes and came, spraying her seed out onto the mirror. It was a better sample than Ross had provided, but that was when he was working with a handicap. She left many long streaks of come trickling goopily down the mirror.\n\nKatrina tried to clear her head. As far as orgasms go... that one was pretty good. And simple, too. No wonder guys are always playing with these things.\n\nThe glove on Katrina's right hand broke, having shrunk to the point that it couldn't stay on her hand anymore. She yelped, running to the sink and pulling the other glove off with some difficulty. She rinsed the remaining salve off her hands under hot water. She checked the size of her hands against two hand prints she'd traced onto the wall near the sink to make sure they were the right size. At some point, when in a festive mood, she'd added the necessary marks to turn the hand prints into the traditional turkey.\n\nKatrina grabbed a roll of paper towels and some glass cleaner and cleaned her mirror. If there was a magical way to keep a mirror clean, she didn't know it. As she'd clearly demonstrated, spells don't like to interact with mirrors. She crumpled the wad of paper towels in her fist, but over the ammonia, she could smell her own come, somehow a very enticing scent.\n\nShe threw the paper towel into the trash only a moment after sincerely thinking about eating it. She measured it again. Soft, it was now over eight inches, but even that gentle touch woke it up, so she also got the full erect measurement at the same time: twelve inches.\n\nKatrina growled. A spell that is supposed to remove a cock gave her one, and then made it bigger. Shrinking salve made it grow. What was this, Opposite Day?\n\nShe pulled out one of her spell books. She'd never had to look for a phallus shrinking spell before, but what strange situations appear in the world of magic. Katrina found one that didn't look too difficult, but it needed fresh toad powder. And she was fresh out.\n\nKatrina put on her long leather coat, foregoing the dress under it. She locked up and went out the back way to the local supermarket, where she tried to avoid the glances of others as she bought a live lobster from the seafood department. She paid for the lobster, but the cute cashier gave her a smile that made her heart pound and her cock stiffen within its leather containment.\n\nWhat was happening? Katrina was straight. She'd never even really experimented. She loved dicks too much. Never before had a woman stirred her interest, and here, a woman in a green apron giving her a customer-service-level smile caused her heart to flutter like she was some teenager. If all women have so much control over men with just a glance, no wonder she got so many requests to make humongous cocks.\n\nKatrina got back to her shop, fighting the urge to touch herself the whole way. She the lobster in a copper bowl. With a small incantation, she turned the lobster into a toad, and with another, a large pile of toad powder. This wouldn't be as good as the genuine article, but it was more effective than the time she tried to turn a squirrel into a toad. Maybe since the lobster was a creature of the water, it worked better. She wasn't sure.\n\nShe scooped the spoonful of toad powder into a tincture of other odious substances, turning it a dull green. She opened the top of the bottle and smelled it, and immediately wished she hadn't. She coughed, held her nose, and imbibed the contents of the small bottle, the way some people would hold their breath when taking cold medicine.\n\nKatrina retched and coughed, rinsing her mouth with some soda she had in the fridge. How could you give this to someone without them knowing immediately that they'd been poisoned, she wondered. What a lousy potion. When she stopped seeing stars, she looked at herself in the mirror... and the cock was still there. In fact, she was pretty sure it was even bigger. The measurement confirmed it: it was now fourteen inches erect.\n\nKatrina scoffed. Maybe you really need the real toad powder, but buying a toad from a pet shop was expensive these days. Maybe the hair from that virgin finally got laid, rendering it inert. Maybe she was further out of her depth than she cared to admit.\n\nShe opened another spell book, looking for a different shrinking spell. She found a promising candidate, an incantation she'd never seen before. She stood, her cock a much bigger target this time. She recited the spell, and a white bolt fired from her hand, off the mirror and right into her cock. She stood there, waiting for it to shrink.\n\nAnd it grew again.\n\nAnd Katrina screamed. She collapsed to her knees, covering her face with her hands, trying to control herself. Why was nothing working? She'd spent her professional life making men more confident by building them the cock equivalent of a Formula 1 racer, and the moment she got one of her own, her own confidence in her abilities was crumbling. She resisted the urge to give up, fighting back bitter, frustrated tears.\n\nWhen she removed her hands from her face, it was waiting for her, not far from her face. The tip of her huge erection. She sighed, still curious. She unfurled the tape and measured the new length. It came to seventeen inches long and almost a foot in circumference.\n\nIn her entire career of sculpting huge pussy-smashing cocks, she'd never dared to make one that was seventeen inches. What would be the point? It'd be like making a bicycle the size of a grain of rice, or a spoon the size of Greenland. What purpose could it serve? Despite the variation in 'optimal size,' this one had no chance ever going where it was meant to go.\n\nAlanis sung of having a thousand spoons and all she needed was a knife. Here, Katrina had the biggest cock in the world, and nobody she could ever possibly fuck with it.\n\nThen again... she thought to her special technique. The final kiss, the blowing that really adds the girth that the women apparently squeal over like a new coupon book or a new sword, or whatever it was modern women liked.\n\nWhat if... instead of a blow... she tried sucking?\n\nKatrina leaned her head forward and opened her mouth wide. The tip of her cock was bigger than a football. There would be no fellatio, as it was understood. She planted her lips around the hole, as she'd done so many times before... and she sucked.\n\nGently at first, she couldn't tell if this was having any effect on the size. It was affecting her in other ways. Her heart was thumping, her cock was throbbing, and she was wet. Her arms brought her tits around the huge extension of her anatomy, rubbing the mounds against the hot flesh tower she was bowing to. Her left hand released her left breast and played with her pussy, hoisting her coconut-sized balls out of the way.\n\nKatrina kept sucking on the very tip of her cock, forgetting the scientific reason for it. She kissed it and sucked it repeatedly, feeling energy inside her stronger than almost any magic. With her lips planted firmly against the tip, she extended her tongue and gently probed it inside the hole.\n\nAnd that's when she came. Her cock was so long now, there was a second-long pause between when Katirna experienced the orgasm and when she started to ejaculate, like the delay in the nervous reactions in the tails of sauropods.\n\nA torrent of come sprayed out of her cock like a broken fire hydrant. Katrina was a firm believer in the rule, \"Swallow it, because someone made it special for you.\" But today, she had to break her own rule. There was only struggling for breath against the river of sweet, semi-gelatinous ooze she'd created. Only about two minutes later, when her cock had finally emptied, did she slurp up what was in her mouth. What sorcery was this, she wondered. It was sweet like vanilla and hummed with magical energy. There must be acres of untapped potential spell-crafting and other magical potential lurking in those two balls.\n\nKatrina got to her feet, her cock still dribbling a bit, its soft hang past her knees. She wiped up with a paper towel and threw it into the bin. She then saw the unholy mess she'd made, gallons of come all over her carpet and shelves and everywhere else. \n\nKatrina sighed. With a gentle word of a long-dead language, the come vanished from the floor and left them clean. The mirror was resistant to her spells, but not this old carpet. It seemed such a waste to destroy this bounty of white magic she'd created, but she wagered there was more where this came from.\n\nShe put her dress on and got ready to reopen the shop. All her mini-skirts would have to go in the trash, as even this dress was barely long enough to cover her cock at full hang.\n\nWhen Katrina came to the door, she saw someone sitting on the steps. When the latch clicked as she unlocked it, the man jumped up. It was Ross again.\n\n\"What's up?\" Katrina asked.\n\n\"Hey. The sign said fifteen minutes, so I waited. But that was an hour ago.\"\n\n\"I'm sorry. I was doing paperwork.\" Katrina lied, unless that paper towel she used to wipe herself counted.\n\n\"It's OK. I got a small problem with the thing, if you can check it out.\" They entered the shop and Ross pulled out his unit again. It was the same size as it was when he entered the shop earlier that day. \"Was it just temporary?\"\n\n\"No, I don't think so.\" Katrina looked at it sideways. She put two fingers together, kissed them, and blew it at Ross. He held his breath as his cock rapidly grew hard, and returned to the thirteen-inch length it was after her treatment.\n\n\"I guess yours reverts to the original size when you're not aroused.\"\n\n\"Oh.\" Ross said shortly. \"Not sure I like that. Won't that cause some spikes in my testosterone level?\"\n\n\"Maybe. But really, when are you going to need it to be big and soft?\" Katrina asked. \"When you're standing at the urinal? I bet you already pee in the stalls.\"\n\nRoss blushed intensely. Even a world-class cock didn't change his shy, sensitive demeanor.\n\n\"I'm sorry.\" Katrina said. \"We can look into it, if it really bothers you, but... let's not mess with it before you get the chance to use it at least once.\" Ross barely got his stiff cock back in his pants, the bulge obviously running down the side of his pant leg like a train tunnel. \"Did you have any other problems?\"\n\n\"Well...\" Ross said, holding up something in his hands. \"I went home and got this.\" Katrina looked at it.\n\nIt was a Playstation controller.\n\n\"I didn't know if you wanted a second player.\" He said.\n\nKatrina smiled. \"Sure, Tyrannosaurus Ross. Let's play.\"\n\nThey plugged in his controller and booted up a fighting game. They played, roughly equally matched.\n\n\"You know what I learned recently?\" Katrina said as they fought. \"I have a spell where you can take someone's cock away, if they're being churlish. I've done that to men, but never permanently. It's just when they lose their manners. Well... apparently, if you cast it on a woman... they get a cock. And all the treatment to get rid of it only make it bigger. I've really no idea why that would happen.\"\n\nA small pause, where Ross accepted his defeat this round. \"I have an idea.\"\n\nKatrina was skeptical. \"Really? What do you know about magic?\"\n\n\"Nothing, but I know about video games.\" Ross said. \"You know how old arcade cabinets would have a high-score, but if you really destroyed the game, it would flip over to zero? Well, modern games will flip over to a negative number, because the score is held in data as a single point on a continuum between negative two billion something to positive two billion something. Once you go over the top, it overflows and the number becomes negative.\n\n\"If the cock-losing spell is phrased in the magical code as 'take a few inches off this dick,' and the subject of the spell had no dick to start with... what would it do? And if she already had one, somehow, and the spell said, 'take inches off this dick,' but the dick is already in 'negative numbers,' so to speak... then trying to shrink it would increase the negative number and make it longer. It's sort of like in RPGs, when you cast healing spells against undead creatures and it damages them. The spell is working how it should, but the target responds with the opposite effect that you'd expect.\"\n\nKatrina paused the game so Ross wouldn't take advantage of her shock. That sounded right. Maybe a growing potion or technique would work on her after all.\n\n\"That could be it.\" Katrina confessed. She unpaused the game and pulled off a huge combo before he was ready to block. \"So... what are we playing for?\"\n\n\"How about my bill?\" Ross offered.\n\nKatrina smiled. \"How about the loser gets to fuck the winner?\"\n\nRoss looked at her sideways. \"Sure!\" He agreed quickly, before she changed her mind.\n\nWith an agreement like that, Ross thought... how could he lose?"
    ],
    "authorname": "DTales",
    "tags": [
        "cock growth",
        "huge penis",
        "small penis humiliation",
        "exhibitionism",
        "masturbation",
        "witchcraft",
        "futa",
        "futanari",
        "autofellatio"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/the-player-witch-augment"
}
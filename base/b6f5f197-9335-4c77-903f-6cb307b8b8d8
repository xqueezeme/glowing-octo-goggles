{
    "title": "First Death Pt. 06",
    "pages": [
        "I was running on the treadmill upstairs when I heard Max's knock on the door. I was lost in my own thoughts, panting and sweaty when I was jarred back to reality\u2014it was dinner time. He gave me a funny look when I opened the door and handed me a duffel bag, \"Working out?\"\n\nI followed him as he strolled in nonchalantly, this time to the living room instead of the kitchen, \"Not much else to do,\" I admitted.\n\nHe dumped the chick onto the couch and I was finally able to get a good look at her\u2014she was beautiful; not the supernatural kind of beautiful that embodied every aspect of Lily, but the kind of beautiful that the airbrushed ads in magazines sell us. Under all of that caked on make-up, all of that hairspray and what I assumed was a paid-for nose, was most likely a plain and dull insecure twenty something that wanted to be a fictitious, computer altered version of a woman. Her heavily green shadowed eyes were closed; black fake lashes made her seem like a cartoon character that was squinting. She was dressed in a short plaid skirt and a white button up shirt, trying to play to every man's dark fantasies. The perfect pile of manufactured brown curls on her head were tied back with a red bow. I knew her kind--remembered them from high school--so desperate to grow up, so desperate to look like a desirable sex object. Well, she succeeded in her intent and caught the eye of an older man. Unfortunately for her, however, it wasn't sex he was after. \n\nI looked in the duffel bag and found new clothes for both Lily and I, as well as a bag that appeared to have been stolen directly from a hospital; he shrugged at me before walking off for his smoke. \n\nI wrapped her arm with the tourniquet before I assembled the needle, tube and bag. It took a while but when her vein finally popped out, I slid the needle through her skin. I held my breath, almost praying that I remembered how to do this correctly so that I didn't have to kill her; when the red liquid started to ooze into the tube, I untied her tourniquet and watched it flow into the bag with a sigh of relief. It took a few minutes to fill up but then I put pressure on her vein with a cotton ball and slid the needle out before slapping a band aid on.\n\nAs I twisted the needle off and threw it into the portable sharps container in the medical bag, my hands started to shake. I wasn't sure why, at first, until I realized that I had managed to spare this woman's life. It was adrenaline coursing through my veins\u2014it was my choice to either end her or let her live. I was playing god. To have that much power in my hands was almost frightening\u2014it gave me an insight into Lily's world. The people around her were alive, because she had allowed it.\n\nIt was a lot easier to pour the blood down her throat using the bag instead of a glass; I clipped a corner off and it slowly trickled down, not spilling a drop. When I put her back to bed, I decided to roll her to the other side, thinking that it would be good to move her throughout the day so that she wouldn't get stiff.\n\nMax was sitting on the couch when I made it back upstairs, \"I have to say, I didn't expect you to do that so well. You're full of surprises, Matthew.\"\n\nI sat down on a chair, starting to feel a little bit more at ease around him, \"Back when I first started college I volunteered at a clinic--it was just something to boost my resume for when I applied to grad school. There were a few hot nurses, though one in particular flirted with me relentlessly--she was a cougar but I wasn't going to turn her down. I was working the closing shift one night; it was slow, thankfully and there wasn't much to clean up after hours. I found her in the small lab, restocking supplies; that is when she asked me if I wanted to learn how to draw blood. I have to admit, it was a little bit of curiosity and a lot of male hormones--she was hot and I wanted a piece of ass. She showed me how to assemble the bag, how to tie her arm off, walked me through finding a vein and made me slide the needle into her arm; it was pretty weird to begin with, but the fact that she enjoyed it way too much took it to a whole other level. Watching her blood seep into that bag got her excited and as soon as it was full, she pulled the needle out of her arm and we had sex right there on the floor. Not exactly the most sterile practice but it was bizarrely satisfying, until I found out that she used the blood that I drew to make a love potion, which she dumped into my coffee, so...I quit.\"\n\n\"Huh,\" he said, \"well, good thing you did. She was probably a witch. Love potions are nasty things\u2014they never end up working quite right.\"\n\nNot the answer I was expecting, I shuddered. Changing the subject, \"How long is this going to take? For Lily to wake up?\"\n\nMax shrugged, \"Hard to say, really. I'll continue coming nightly for the rest of the week\u2014if she moves at all, or wakes up, or her color improves then we can cut it down to every other day. The last time that she was exposed to sun it took her about a month to heal, but she was unconscious for most of it.\"\n\n\"What happened?\"\n\n\"Her and Lucas. They never told me the details, but to my understanding she saved him from a horrific death. I know they still go after each other all the time, but deep down they share a bond. I've always gotten the feeling that if one of them goes, the other one will follow shortly after.\"\n\nHis words gave me a chill, \"How long have you known them?\"\n\n\"It's been several centuries now, I lost count but I was with them when they were still on the same side. I'd follow Lily any day but she has made it clear that she works alone so I stick with Lucas.\"\n\n\"Who changed you?\" I wondered.\n\n\"Ian was my benefactor.\"\n\nAt the mention of his name, I immediately grew tense.\n\n\"Nah,\" Max said, smirking at me when he noticed my worry, \"it's not like that. I hold no allegiance to that man\u2014he dug his own grave years ago.\" He got up, hefted the woman over his shoulder, his hands grasped the backs of her bare thighs, \"See you tomorrow Matthew.\"\n\n...\n\nThe week droned on as I fell into a new fucked up routine. I would wake up around lunch time, Jinx and I would eat. After a few hours I would hop on the treadmill in Evan's small gym and run until my lungs screamed, around which time Max would arrive with a new donor. I'd draw blood, feed Lily, chat with Max. As unnerving as it initially was, I discovered that I was no longer bothered by seeing red eyes and fangs; in fact, it seemed almost normal. Max would leave for the night and I would lift weights to pass the time, before taking a bath. With Lily. \n\nI had kept my distance from her at night but the lack of social interaction quickly started grating on me. It was wrong and very fucked up, but spending time with her naked body against mine put me at ease. It wasn't sexual\u2014well, I mean, aside from my dick being constantly hard\u2014I never violated her but simply holding her, feeling her skin touching mine was enough sate my desires.\n\nAfter dressing Lily and putting her to bed, I would spend time reading on the couch or watching TV. I knew what I was going to do\u2014it had already formulated in the back of my mind nights prior, I just tried to push aside the thought because honestly, it frightened me.\n\n\"If you can get a good look at it through the window, tonight it is the blood moon. It's a pretty spectacular thing to watch\u2014one of the few mysteries still left in this life,\" Max had a man thrown over his shoulder, walking towards the front door.\n\n\"Yeah I think I might take a look,\" I replied before bidding him goodnight. I locked the door and pressed my ear to it, waiting until I heard his car retreat down the drive and I knew he was gone.\n\nWatching the man's blood swirl in the kitchen sink and down the drain, I felt a pang of guilt at the waste of it.\n\n\"Meow,\" Jinx purred to me, rubbing against my leg. I don't know how, but I felt like he knew what I was up to.\n\nI turned off most of the lights, leaving only the dim lamp in the living room on before I carried Lily up the stairs and gently rested her on the couch. I flicked the TV on, muting the news, only half paying attention to the updates about the eclipse. When it started, I watched it from the window in the kitchen; the slow shadow of red creeping across the white surface of the orb hanging low in the sky. It truly was beautiful sight.\n\nI grabbed the tourniquet and tied it off on my arm, I pumped my hand into a fist over and over. When the vein popped up, I slid the needle into it. It hurt like a bitch and I thought I had fucked it up and missed the vein, until blood trickled, slowly at first before flowed into the bag. I untied the tourniquet.\n\nWatching the blood swishing in the bag reminded me of a few years ago; Teddy and his family came to visit me when I was on winter break. His girls were dying to see this new vampire movie, with some hot Brit hunk in it. Teddy had bought four tickets to take them, but it had gotten to the point where he just couldn't do it. He was never good with crowds, especially crowds full of screaming pre-pubescent teenage girls. Janie wasn't looking forward to doing it alone, so like the good uncle I was, I offered to take the girls so that they could have a night off to themselves. \n\nUp until a few weeks ago, it was one of the most awful nights of my life. I had to fight myself from turning around and taking them back to their hotel; the girls bubbled and gushed over the lead actor the whole way to the theatre. My oldest niece thought it would be cool to wear a bag of fake blood around her neck and a t-shirt that said 'Vampire Bait.' It was so, so wrong. The younger one said that I kind of looked like him, except that I wasn't as pale, I had glasses, and my hair wasn't as perfect. And that I was her uncle, so it was kind of gross. They tried to get me to wear matching t-shirts--I can't help but shudder at the thought still. In order to get them to simmer down, I had to agree to wear a pair of fake vampire teeth, like the ones from Halloween.\n\nThere was a long line of the fairer sex out front of the theatre--none of them had tickets. I guess each one of them was hoping they'd find a scalper or some mysterious, tall dark and handsome man would sweep them off of their Prada clad feet. I was amazed at the age range; there were some girls as young as nine I think and old women in their forties.\n\nWhen we were walking past them down the side walk, I remember spotting one really hot chick, close to my age, just so upset that she wouldn't be able to see the movie on opening night. I couldn't help it--it was too easy. I popped in the fake vampire teeth and flashed her a grin and two tickets, and said 'Would you care to accompany me this fine evening?' She was so excited, she almost fainted. My nieces thought it was hilarious--all three girls didn't shut up the whole time. The movie was as bad as I expected it to be and she made me wear the teeth when I fucked her later that night. I dated that girl for six weeks before she completely got on my nerves.\n\nI sat on the couch next to Lily, holding the warm bag of my own blood in my hands. It was a terrible idea. Eventually she would find out and probably kill me for it, but I knew that I needed to help her in whatever way I could. Though I wasn't quick enough or strong enough or brutal enough to fight by her side, this was within my capacity to give her. I knew she didn't want it\u2014and to me, that was justification enough to prove that she was worthy of it.\n\nI clipped the corner off of the bag before sliding my left arm behind her neck; tilting her shoulders forward, her head fell back and her mouth opened. I brought the bag up to her faded red lips and held my breath as I poured it down her throat. I'm not sure what I expected, but as she finished the last drop, nothing happened. I watched her for a few moments before I got up and went to the kitchen, tossing the bag in the trash.\n\nOn my way back, I heard a low, guttural growl from Jinx. It immediately sent a chill down my spine; I rounded the corner slowly, looking over the living room\u2014nothing had changed. My heart started to pound as I made my way over to the couch and sat down next to her. I barely started calming down, when her body twitched, scaring the ever living shit out of me. I jumped up in time to watch her muscles tense, her body lifting upwards by some unforeseen force, as if drawn by a string attached to her chest. With her arms hanging lifelessly at her side, her head back, she rose up with her spine almost impossibly arched, to her tip toes. She made a sound like she was choking. Then she fell back against the couch, still and quiet as if nothing had happened.\n\nMy breathing was ragged and adrenaline pulsed through my veins\u2014I was seconds from bolting out of the house as fast as I could. I didn't move\u2014I watched her for almost an hour\u2014nothing changed. The rest of my night was restless. Just like when I was a kid after watching a horror film, I couldn't stay in a room too long without getting nervous. I tried carrying a kitchen knife around with me but the fact that I wasn't good at chopping vegetables let alone killing didn't offer me much solace. Though she had terrified me, the only way I felt comfortable was with Lily, so I put her to bed. I stripped down to my briefs and crawled in beside her; I left the hall light on so that I could see her face. I stared her down, relieved when Jinx slinked into the room, made dough on the bed between us and fell asleep. I wasn't far behind.\n\nThe next day continued on schedule; after uneventfully feeding Lily, I was sitting on the couch next to a complete stranger, an Asian man, who was slumped over the arm, his eyes closed. Max sat on the chair, petting Jinx.\n\n\"How does reading blood memories work?\" I asked randomly.\n\nHe looked at me surprised, \"Where did you hear about that?\" His tone was almost defensive.\n\nIt occurred to me that Ian had only speculated about Lily's skills, which meant that she probably didn't freely share her resume, \"Uh, well...Lily. She read my blood back in the states.\"\n\nMax nodded slowly, looking me over, \"I'm surprised. She never out right told me she had the ability, but I knew Lucas did. Still though\u2014she tends to keep everything close to the vest.\"\n\n\"Yeah,\" I replied, recalling that she left out the details about Lucas being her twin brother, \"I figured that one out already.\"\n\nThere is a long pause before Max continued, \"I don't know exactly, neither of them would teach it to me. From my understanding, drinking someone's blood carries their most recent memories\u2014a sip might give a few days, a week's worth, while draining a person would provide their entire life. Though, I do know it is harder with humans; the human mind has a tendency to forget small details, skip over things that seem unimportant and in general lacks a keen focus\u2014everything gets jumbled. A vampire however, remembers every second in full, each seemingly unimportant bit. Draining a vampire passes all of this knowledge\u2014I've seen Lucas read blood memories before as he sucked an old vampire dry. It took a lot out of him, that depth of focus; he wasn't able to process everything as there was simply too much data, but that soul's existence was essentially transferred into Lucas' mind, where it was stored. After the fact, they are able to go back through the memories and search, review bits.\"\n\n\"So, they don't comprehend it all at once?\"\n\n\"Oh no, that would be impossible. With the hundreds, maybe even thousands that those two have drained, it is a wonder they aren't nutters. I imagine that now, unless it is important, they don't bother reading the blood; I'm sure the information still gets transferred, they just choose to ignore it.\"\n\nI nodded slowly, \"Will Lily have the blood memories from this week?\" When I saw the curiosity on his face, I quickly added, \"I'm not thrilled about her knowing how badly I fucked up while killing that man.\"\n\nMax immediately chuckled as he remembered the night, \"No, at least I'm pretty sure not. We don't ever shut off, Matthew\u2014none of us sleep, we don't get tired, we get hungry; but severe trauma knocks us out\u2014Lily is unconscious for the first time in a few hundred years. When she wakes, she the last thing she'll remember is whatever happened at Ian's. That aside, having the energy and focus enough to read blood memories, fleet, influence, hell even her strength will probably take her at least a month to get back. When she does finally start coming around, she will be more similar to a human\u2014well, aside from needing to drink blood and remain out of sunlight.\"\n\nI nodded, counting myself lucky that she wouldn't have my blood memories of the past week, \"Well, hopefully she wakes up soon.\"\n\nMax left shortly after our discussion; I made and ate dinner with Jinx before lifting weights, trying to keep my mind away from Lily though it always wandered back to her. I pushed myself harder, straining my muscles; the burn felt good. I glanced at myself in the mirror, pleased to discover that I was gaining some definition on my lanky frame\u2014if nothing else, at least I'd be in shape by the time this whole debacle was done.\n\nDown stairs, I ran the tub while lighting the candles. I had grown fond of their soft illumination, the way their uneven shadows flickered across the room. Checking the water, I let it fill up more before turning it off and stripping naked. My cock pulsed when I walked to Lily, knowing that I would slowly take her clothes off and soon feel her soft skin against mine.\n\nI had gotten better at undressing her though my muscles strained from my workout earlier when I lifted her to my chest. I stepped into the tub and eased down, resting her soft, ample ass in my crotch, my now aching cock pressed between her back and my stomach. I leaned back against the tub, her naked form against my chest, my arms wrapped almost protectively around her waist. I sat with her body on mine, the tension easing from my muscles, just content to be near her. I closed my eyes and nuzzled into her neck; she still smelled faintly of smoke, but I was pleased to note that the smell grew fainter each day. I lingered there, breathing her in. When I opened my eyes and glanced up, my muscles instantly tensed; her bright red orbs were staring back at me. She was awake.\n\nMy heart was pounding so hard I knew she felt it even if she couldn't hear it. My face grew hot as my stomach rolled\u2014this was bad. It never occurred to me that she would wake\u2014of all fucking moments--while we were in the tub together. This was bad. Very, very bad. I casually pulled my head away from hers, turning my gaze forward. She blinked slowly, watching my movements with her stoic expression. Though my chest heaved rapidly against her back, I reached out and grabbed the wash cloth and bar of soap, lathering them up. It was a nerve wracking experience, washing Lily while her piercing gaze tracked my every movement like a hawk, but I figured the best way to explain why we were in the tub naked was to do so by example.\n\nWashing her hair proved to be the worst part of it\u2014I slid out from under her until I straddled her hips, resting my ass on her thighs with my cock across her stomach. It was the only position I found that would allow me to keep her above the water line and my hands free at the same time. Her dark red gaze studied my face while my shaking hands massaged her scalp. I leaned back and flicked the lever for the drain, turning on the shower head to rinse her hair out while the water disappeared from the tub below. After shutting it off, I climbed out of the tub and hastily dried off before wringing out her wet hair with a towel. Grabbing a larger, softer one, I gathered her up into my arms and carried her to the bed.\n\nI gently laid her on top of the covers, avoiding eye contact as I patted her exposed flesh dry. I turned to leave, to get her night gown when I was stopped by her hand wrapped firmly around my wrist. I almost couldn't breathe when I looked down into her face, expecting her anger to flare up at me. Instead, she pulled my arm closer, forcing me to bend over her. Her other hand reached up for my throat and I almost jerked away\u2014but then, her soft fingers slid across my skin to the back of my neck and she pulled my face down to hers. Her chest was rising and falling as she unnecessarily drew in air; when she tipped her chin up, her lips pressing against mine, all of my fear, all of my doubts washed away. Her tongue darted into my mouth, her firm grip on my neck made her desires clear.",
        "I eased my naked body into the bed over her, my knees tucked up against the backs of her thighs, my hands supporting my weight on either side of her head. She whimpered into my mouth, laboriously spending her precious energy to press her hips upwards into mine. I shifted my weight to one hand, reaching down to my cock with the other. I pulled back just enough to look into her eyes, to confirm that she did want it; teasingly, I stroked the tip up and down the entrance of her waiting cunt, before I gingerly eased it in. Her gaze never wavered, a moan escaping her lips as I slowly pressed my dick into her, easing it out only to push a little more in. \n\nIt was different, this time. There was no frantic rush, no hurry to fuck before death; I took my time and I was gentle. My firm, slow thrusts in and out of her earned me mewls of praise. Her arms quivered and as her strength waned she was forced to release her hold on me, but I used that to my advantage and intertwined my fingers with hers, pinning her hands down to the bed. I could feel her cunt begin to tighten down over me, discovering that she enjoyed being gently dominated just as much as she did being fucked hard and fast. When I knew she was close, I tenderly kissed her lips before drawing back and exposing my neck to her, offering her my body, my blood, while in the back of my mind thankful that she wouldn't see my memories.\n\nShe used the last of her energy to tip her head up, her sharp fangs piercing my skin; I could feel her lips quivering as she drank my blood, the pain shot through me quickly but was soon overcome by the dark, rolling orgasm that her venom brought me. My body tensed and I pressed deep into her, my cum spurting forth as her cunt cinched down on my cock, while my body shuddered from the bliss of it. Her unsteady bite released, her head falling back onto the pillow as she struggled to keep her eyes open.\n\nI eased out of her, rolling to my back before I gathered her up in my arms and cradled her to my chest. She drifted from consciousness not long before I fell into a deep, sated sleep.\n\n...\n\n\"She woke up last night,\" I said to Max. He was watching me draw the blood of some older lady, her frail body barely looked like it could handle the loss but he had assured me she was well worth the effort it took to find a vein.\n\n\"Really?\" He was surprised, his eyes focused on the filling bag, \"You'd better make it two bags then. Did she say anything?\"\n\nThere was a frown on my face\u2014that was a lot of blood for anyone to loose, especially someone who barely weighed ninety pounds to begin with. I told myself she would be all right when I switched to an empty container, \"No.\" I doubted that moans counted.\n\n\"Hmm,\" he said, \"well, once she gets up the energy maybe she'll feel like talking. Put the second bag in the fridge\u2014while it isn't quite as fresh, it will be enough to tie her over. I'll start coming every other day. Just as well, I've had to hunt further than usual as the humans were getting suspicious.\"\n\nI had grown fond of our fucked up time together, despite being a vampire Max was a somewhat decent guy to be around, \"What happens now?\"\n\nHe shrugged, \"First she needs to get her strength back. It's hard to say with Lily, she's such a stubborn pain in the ass; maybe a month\u2014if we can keep her confined that long\u2014before she tries to go after Ian? She really should wait twice as long and have Lucas help her but, I mean, this is Lilith Cain we're talking about here.\"\n\nA month; I hoped last night would be an indicator of how our time would be spent. I felt a pang of guilt about it though\u2014we were, after all, in Evan's house and under his protection. And I was fucking his girl. I twisted the bag off, pressing a cotton ball to the old woman's arm before wrapping it up, \"Any word on Ian or Evan?\"\n\n\"No,\" Max shook his head before he got up out of the chair, \"I imagine Ian is trying to recruit some numbers. You're safe here\u2014this place is virtually impossible to locate. As for Evan, well, I don't know. He's a wolf though and a smart one at that\u2014he has survived worse. I'm sure he'll show up again.\"\n\nI saw Max out before tossing a bag of blood into the fridge and headed downstairs with the other.\n\nLily's eyes were closed; after I woke up I dressed her in a soft, sheer black nightgown. It clung to her perfect curves, alluding to the naked flesh beneath. I clipped the corner of the bag and gathered her up into my arms\u2014when she didn't wake, I poured the blood down her throat. About halfway through the bag her eyes flickered open and she turned her head away from me; I barely tilted up the bag in time, avoiding dumping it all over her face. She swallowed what was in her mouth, red eyes appraising me.\n\n\"You need to eat,\" I said, moving the bag back up to her lips. When she turned her head away again, I pressed her, \"You still have half of it left, don't let it go to waste.\"\n\nHer chest rose and fell as she breathed. She tried to speak, but didn't get any words out\u2014I saw anger in her face, her eyes flickering back at the bag. I knew she couldn't read the memories they brought forth, but I realized she was questioning my acquisition of it. I propped it up against my leg, wrapping my other arm around her, drawing her body close to mine as I shifted her to the other side when my arm began to burn under her weight. I brushed the hair from her face, staring into her eyes.\n\n\"Max has been bringing me people\u2014I draw their blood and they leave here alive. He assured me that he will erase their memories and put them back where he got them. No one is being killed.\" At least, not anymore. Her breathing slowed before it stopped all together but she kept watching me. I brought the bag back up to her lips and she opened her mouth without objection, allowing me to feed her the remnants of the blood. When she finished, I gingerly wiped a red smear from her lips. Her color was returning to normal, though she still looked a bit faded.\n\nI knew she needed to rest but apparently my cock didn't\u2014as it started to grow I carefully shifted her out of my lap and back down onto the bed before pulling the covers over her. Her eyes never left mine as they tracked my movements; I crouched down beside the bed, gazing at her. My hand immediately went to her cheek and I brushed my fingertips over her smooth skin, \"I am going to go upstairs for a while to eat some food and exercise a bit, but then I will be back down to take a bath. Do you want...\" Nervousness swelled in my stomach; I choked it down, forcing myself to ask, knowing I would have to live with her answer, \"Do you want to bathe with me again?\"\n\nHer red eyes traced my face. After a moment, she ever so slightly nodded her head. My heart leaped up in my throat and I forced myself to remain calm. Slowly, I leaned forward and closed the gap between us, my lips tentatively pressing against hers. She easily parted them with her tongue; she had the metallic taste of blood still in her mouth and as messed up as it was, I didn't care. I sucked on her tongue\u2014I wanted more. I didn't care about food, I didn't care about exercising I just wanted to strip naked and fuck her on the bed, the floor, the couch, any and everywhere I could. I eased back, struggling with restraint before I plastered a smile on my lips, \"Rest for now. I will be back later.\"\n\nI wondered if she could hear my heart racing as I rose or see my hands trembling when I pulled the door shut behind me. I fought the savage, primal urge to rush back and stick my cock into her as I forced myself up the stairs and to the kitchen. Jinx was rubbing against my legs by the time I finished cooking a steak; I cut up several small pieces for him, placing them on a small plate so he wouldn't try to eat off of mine. \n\nI lifted weights until I thought I would puke, until the trembling of my muscles barely let me put them away. For a long time I sat on the bench with my head in my hands, my desperation to be near her was so fierce it almost hurt. During my talks with Max, I had asked him many things about vampires and I was surprised when he openly answered them. Their venom was a work of art in itself\u2014I finally understood what Lily had meant when she said that Death had created an imbalanced predator. The original apostles, as Max referred to them as, were the predecessors to Lily and Lucas, the vampires they wiped out; the apostles were the ones who were charged with resurrecting Death's new vampires, with teaching them skills. Just being near them, smelling their scent was intoxicating\u2014they could influence humans to do almost anything with a simple breath. A venom laced bite could paralyze their prey, could amplify their sexual arousal, give them a climatic release within seconds, even erase their short term memory in the rare case they decided to leave the victim alive. Max admitted that even as a first gen, his venom had all of these capabilities, allowing him to easily capture human prey but it was only Lily and Lucas who could inflict this upon anything\u2014a wolf, another vampire, animals. As each successive generation thinned out the skill set, the common vampire's bite could only arouse a human and leave small gaps in their memories.\n\nI thought on it hard\u2014my urge, my need for Lily\u2014was it just her predatory skills? She had only influenced me once when I first met her; I shuddered at the feeling. I wanted her so badly, but all she did was make me sleep. Back in the woods before Lucas's house, she didn't need to force herself onto me; even last night, I fucked her willingly. I wanted her to bite me. My heart raced as I recall how it felt when her teeth pierced my skin. What was this\u2014addiction? Venom? Lust? No. I remembered how it hurt seeing her with Evan, how it felt like guts were ripped from my body; this was more than that. I was meant to be with her\u2014I\u2014I loved her. As that realization washed over me, I knew that I would do anything for her. It was irrational, it was insane and impossible but it didn't fucking matter, because my soul belonged to her.\n\nI shut out the lights and went down stairs. I lit the candles in the bathroom, running the tap to fill the tub. When I turned around to the doorway, her red eyes were glued onto me, watching me from her spot on the bed. I stood in the bathroom, facing her while I pulled my shirt over my head and watched her eyes wander over my slender frame. I leaned down, pushing my shorts and briefs off, kicking them to the side I stood naked before her, my cock pulsed when I saw her look at it. Slowly, I walked to her, sliding the blanket off of her, letting my large hands wander against her soft flesh as I stripped the night gown off of her. I pulled her close to my body, ignoring my screaming muscles before I took her back to the tub and sunk down into the warm water. I shut off the tap, resting back with Lily in my lap.\n\nMy arms constricted around her like a snake, one hand sliding up to tilt her head back into my shoulder, exposing her throat where I kissed and gently nibbled her skin; the other hand crept across her belly and down to her bald cunt, my fingers pressed firmly into her while my palm rubbed against her clit. Her breasts bobbed in the water as she panted, her hands feebly grasped at the sides of my thighs; she wanted more. The power struggle between us was exhilarating\u2014when she was a hundred percent, she could have killed me in seconds but now that she was injured and helpless, she was at my mercy. I never had wanted complete control over a woman\u2014I always wanted them to take charge and ride me from above but knowing that she was subjected to my whim, that she was unable to do anything unless I decided it amplified hidden, dark desires within me. I stretched my back, shifting my hips until I was able to free my cock out from between us; it stood at attention between her legs. Slipping my fingers out of her, I positioned the tip at her entrance and held it there.\n\n\"Do you want me?\" My voice was dark.\n\nShe closed her eyes and panted, waiting. When I didn't give her anything, they fluttered open and her head rolled to the side, her sharp gaze finding mine.\n\n\"Do you want me?\" I repeated. I needed her to say it; I needed her to submit to me. Ever so slightly, I pressed my cock into her and held it there.\n\nHer eyes narrowed at me, her lips parted; I could feel her breath on my face. I leaned into her, sucking her bottom lip into mine, biting down on it, \"Say it.\" She tried to kiss me but I pulled back; it took all I had to not thrust deep into her, to hold myself at bay. I smirked at the frustration on her lips.\n\nShe blinked slowly, breathing fast, her voice barely a whisper, \"I want you.\"\n\nHer words sent a shiver down my back; I eased my cock forward an inch before pulling it out. I let my hands wander to her breasts where I kneaded them, flicking her nipples, \"Beg me.\" I was pushing my luck--I knew it by the death glare in her eyes. I doubt she had ever been denied a thing in her life but now that she was weak, unable to use her abilities she had no control over me and perhaps that was why I was tormenting her, trying to convince myself that I was choosing this, that I had a say over my yearning to be with her despite knowing that I couldn't fight Fate. \n\nI held her vicious gaze, eliciting a moan from her when I teased her cunt again before denying it. I pinched her nipples hard, waiting for her to relent.\n\nShe whined with need, frustrated before she finally begged, \"Please?\" Her airy, sultry voice felt almost as good to my ears as her body did to my skin. I thrust all the way into her\u2014her back involuntarily arched, a loud moan escaped from her chest. My arms circled her torso and I held her tight to me, firmly pounding my hips against her ass. \n\nWater splashed up the sides of the tub and onto the floor but it didn't matter. She tried to squirm in my grasp, her lusty hunger needing more\u2014she wanted it harder, faster, she wanted my blood but I was in control and though I harshly thrust my cock inside of her, I didn't increase my pace. When she whimpered and clutched at my skin, I stopped and eased out of her.\n\nI sat her up and turned her body around, bending her knees until she was straddling me. There was no good way to go about it since she didn't have the strength to keep herself up right, so I grabbed her throat with one hand, holding her body perpendicular to mine. My free hand squeezed between us and grabbed my cock, rubbing it against her cunt until I found her opening and pushed into it. I felt her throat vibrate in a moan under my hand; I squeezed my fingers against it, my grip tight, the other grasped her hip to hold her still while I pounded upwards into her.\n\nI watched her breasts bounce with each thrust, her eyes piercing into mine. I felt her cunt start to clench hard against me\u2014so I stopped. Her glare alone would have been enough to kill me, but instead a grin grew on my face. I eased her body down against mine, my hand stroking her back teasingly. When I felt her teeth graze my neck, I roughly grabbed her hair and pulled her head away, \"No,\" I reprimanded her, \"not until you have my permission.\"\n\nThe shocked, depraved, dark glint in her eyes threatened to make me cum\u2014she wanted me so badly it was almost more than I could bear. A small, evil grin twitched on her lips. I sat up in the water, holding her tight before carefully slipping my feet out of the tub. I tossed a towel down onto the floor and laid her on her back, standing above her with my hands on my hips, lording my dominance. She watched me hungrily, her tongue darted out and traced her lips. I leaned down and much to her surprise, I rolled her onto her stomach. I straddled her thighs, pressing my body down against her back. I slid an arm under her side, between her breasts and wrapped my fingers around her throat before positioning my cock against her plush cheeks, pushing past them and into her wet cunt. I held her down tight, knowing that I wouldn't last long as I fucked her hard. I felt her body trembling beneath me. I struggled with restraint, dangerously close to the precipice of my orgasm; still holding her throat, I brought my other arm up and nestled her face into the crook of my elbow. My breathing was ragged and I panted into her ear, \"Bite me.\"\n\nI felt her luscious lips open up, her fangs scrape my skin before sinking down into the vein; my entire body tensed and twitched against her but I continued pounding my cock deep into her while I exploded and shattered with bliss. My mind swooned and my body was unsteady; I was barely able to roll off of her and to my feet yet somehow I managed to pick her up and stagger to the bed and under the covers. My arms constricted protectively around her and I buried my face into her hair while she drifted off. It didn't matter what she was before, it didn't matter what I was before\u2014from here on out, we belonged together. I was hers and now, she was mine.\n\n...\n\nMy schedule changed since she had awakened. I would rise, eat with Jinx and run. On days that Max came, I would draw blood and chat with him\u2014he was curious as to Lily's progress but I kept it to the facts, conveniently leaving out that I was fucking her daily (sometimes twice a day) and supplementing her feedings with my own blood. After she ate, I had dinner and lifted weights. Then, I would bathe with her. I kept her interest peaked; some nights I would fuck her hard and rough on the floor or bent over the tub, others I would make sweet, gentle love to her on the bed. As she grew stronger and was able to stay conscious longer, I carried her upstairs with me. I could tell that she enjoyed watching me run, though personally it was a bit nerve wracking having her eyes appraise my every movement and I almost biffed it twice on the treadmill. She still hadn't spoke much, or at all in fact\u2014the only time she said anything was when I made her beg for it.\n\nThat afternoon when I finally woke up, I found her watching me. She had a tell\u2014a wicked, depraved smirk on her lips. Each time I saw that, I knew what she wanted. So, before I could even eat a meal, I relented and gave it to her. It was hard and fast but that didn't lessen the enjoyment for either of us.\n\nJinx was impatiently meowing at me by the time I started making lunch, so I offered him a can of tuna to make amends. With working out daily and losing blood constantly, I was eating twice as much protein as usual. Max, despite not eating it himself, got me a hearty assortment of groceries every couple of days. After I ate, a quick check confirmed that I had worn Lily out earlier so I ran without an audience. It felt good to move around\u2014despite being a book worm, I had never spent this much time indoors in my life. After I moved to Cali, I was at the beach several times a week.\n\nI finished my run, my lungs burning as I gulped down water in the kitchen. My ears perked up when I thought I heard something\u2014glancing at the clock, I knew it was still a few hours before sunset and though Max was due to arrive tonight, it was too early. I crept through the house, leaning against the window sill to peer out upon the front yard without shifting the curtains. I was shocked to see Alpha John Maikoh and Thomas walking up the gravel drive, a few other men behind them. From the tree line I spotted a man\u2014I had never seen him before but after he stopped the two wolves, I figured him to be one of Evan's rogues. They exchanged a few words; it appeared that the rogue told them to leave. Then, I watched in horror as John drew a gun and shot the man in the head. His lifeless body fell back into the gravel. His men quickly gathered the corpse and carried it off into the woods.\n\nI panicked\u2014whatever they were here for could not end well. I ran into the living room, weighing my options; they were few and not great. I grabbed a shirt and threw it on, but after catching a glimpse of myself in the mirror I realized that I looked like a junkie\u2014my arms were covered in healing bite marks\u2014so I hastily pulled on a fleece to go with my sweatpants. I found Jinx asleep on the couch and grabbed him.",
        "\"When she wakes up tell her that Alpha John Maikoh and his men came here\u2014they killed one of Evan's wolves. If I am not here, then they have me.\"\n\n\"Meow,\" he replied in protest but I shoved him down the basement stairs and shut the thick, metal door before tapping the keypad, hearing the lock click into place. It was a risky move, because I knew my hand wouldn't open it; at the very least, Lily could let herself out at some point but I prayed she had the energy to drag herself up the stairs. When I saw Jinx's tiny black paw poke out from under the door, I kicked it back under with my foot, \"Quiet!\" I snipped at him.\n\nThere was banging on the door. I froze, wishing that my precautions were unwarranted.\n\n\"Open up Matthew,\" John's voice was muffled behind the door, \"we know you're in there.\"\n\nFuck. I crept to the door, carefully looking out the peep hole; it was only him and Thomas, the other men must have been hidden, \"Alpha John, what are you doing here?\"\n\n\"The Rogue sent us to come get you,\" he lied, \"we are here to keep you safe.\"\n\nMy heart raced, \"Where is he?\" I tried to sound casual, \"How come he didn't come get me himself?\"\n\n\"He's in the clinic on neighboring pack lands, he is still injured.\"\n\nI thought about not opening the door. I knew Evan's house was fortified, but even if it held them off until dusk, Max would end up walking into a trap. Then, I would truly be on my own. I glanced over to the basement door. I had to keep her safe. It didn't matter what these wolves wanted with me, as long as I protected her. I drew in a deep breath; my heart never slowed, but I knew I stank like sweat so I could probably play it off as exertion and not fear. I unlocked the door and opened it.\n\nJohn didn't wait for an invitation before he pushed past me and into the house. Thomas hesitated a moment before following.\n\n\"Are you alone?\" John asked.\n\nI motioned to the house, \"Yeah, it's pretty fucking boring, but I was told to stay here until Alpha Rogue came to get me so...\" I shrugged.\n\nJohn made a quick turn about the upper floor, finding it empty. Then, he spotted the metal door, \"Open this.\"\n\n\"I can't.\" When his glare snapped to me, I knew that he was looking for her. I casually sauntered over and slapped my hand to the panel\u2014it beeped in rejection, \"He forgot to program my hand in before he left, so who knows what's down there.\"\n\n\"Where is the vampire that was with you?\" He turned back to me, disapproval written on his face.\n\n\"No idea,\" I lied, \"apparently I'm not important enough to be included in on any plans.\"\n\nSizing me up, he walked to me, \"But important enough to protect.\" His eyes looked distant for a moment, as if he were caught up in a conversation in his head.\n\nTwo large men grabbed me from behind, \"What the fuck\u2014\" I barely shouted out before they started dragging me backwards. I managed to wrench one of my arms free and punch the other in the throat; when he was bent over, I sent a knee up to his face--blood rushed out immediately and onto the floor. The other one body slammed me to the ground, his large frame crushing me as he quickly latched shackles my hands behind my back. I growled at him \"Get off of me!\" \n\n\"Sorry kid,\" John said, though he clearly didn't mean it. \n\nI was drug outside and thrown into the back of a large panel van, before everyone else climbed in, \"What the fuck is going on?\" I demanded.\n\nJohn leaned down and smelled me, crinkling his nose at my scent, \"It is a shame, I really don't like having to kill humans. Makes for too many questions.\"\n\nThe van rocked as we pulled away from Evan's house; I was thankful, at least, that Lily was safe. For now. \"Where is the Alpha Rogue? I am under his protection\u2014you have no right to trespass on his land and take me!\"\n\nHe sat back and smirked at me, \"That filthy half breed has no right to claim the title of Alpha nor hold any land. He is one tough son of a bitch\u2014I'll give him that. We had a hell of a time finding his house and no matter how much we tortured him, he wouldn't give up the location. It wasn't until one of his useless strays surfaced that we were able to track them back.\" He laughed a little, \"He can hardly be called Alpha any more, now that his entire pack of mutts is dead.\"\n\nI glared at him, \"Why.\"\n\nJohn eyed me, contemplating if telling me would alter his plan or not; after a while, he decided that it didn't matter, I was as good as dead, \"Having a vampire live so close to pack lands is a fucking insult\u2014then, to have that bitch stroll right up to the gate with no fear in her eyes\u2014their breed is a stain on this world that I have dedicated my life to wipe out and I wouldn't have hesitated but she was smart enough to drag some worthless human with her. If I had only known better, I would have killed you both right then. \n\nWhen my men at the airport told me she left with you, then shortly after another vampire flew out as well to the same place\u2014I knew something was up. We arrived only a day later and have been hunting all of you down since. It was just a random bit of luck that Alpha Peter sent out an APB on the Rogue, saying that he was supposed to arrive with a human male in tow, but never showed. Didn't take long to connect the dots between him, you and the two vampires.\n\nThen that stupid half breed appeared on Peter's pack lands, half dead and shot up, looking for medical attention. I didn't have to try hard to convince Peter that not only was being a half breed punishable by death, but his very existence threatened our species\u2014he knowingly consorts with vampires, offers them assistance? Unheard of. But the icing on the cake was when we heard through the underground that there was a reward on your head\u2014that a vampire wanted you alive and unharmed. What better way to draw that piece of shit out then to use you as bait. With all that effort Lilith Cain spent keeping you away from them, it is logical that she will come for you too. It will be like shooting fish in a barrel.\"\n\nHis hate was so clear I could almost taste it. I bit my tongue to keep from laughing at him\u2014he was a fucking moron. I saw what these vampires were capable of\u2014if they couldn't even kill each other, the wolves didn't stand a chance, \"So let me guess, your dumb ass plans on turning me in for the reward, just to off whoever shows up?\"\n\nHe sneered at my comment, \"Off them, you and the half breed. The only thing that I haven't been able to figure out though, is why the fuck are you so important?\"\n\nI didn't answer him\u2014instead, I let a smirk grow on my lips while I stared him down. My silence and unwavering gaze made him uneasy. He sneered at me before glancing to one of his men; then, a hood was put over my head.\n\nThe ride might have taken a few hours; no one spoke, at least not out loud. I tried to keep track of the turns and bends in the road but I lost my focus and it was gone. I felt the van slow down before finally stopping, then I heard the doors pull open. Someone grabbed me by the arm and shoved me out\u2014there was gravel under my feet; it crunched as I was forced down a walk way and into a building. Halls twisted and turned, I seriously doubted I would be able to find my way back out.\n\nI heard a large door scrape open\u2014someone removed my hood. The room was concrete with horrible lighting; aside from the door, the only other thing in it was Evan. He was unconscious, slumped up against the wall, his hands behind his back. His face was bruised and there was blood on his clothes but he was still breathing. When someone shoved me forward, I whipped my head around and glared at him\u2014Thomas looked irritated but the hatred I saw in John's face was not mirrored in his.\n\nHe grabbed my arm and pushed me forward towards Evan. As we walked across the room, I felt him press something into my hand. He leaned forward and whispered into my ear before kicking the backs of my knees to send me crashing into the floor, \"Sixty seconds.\"\n\nI fell, twisting to land on my side with my back to the wall. He turned and left, shutting the door behind him. I glanced over my shoulder and into my hands to see what he had given me\u2014a key and an epipen.\n\nMy heart raced; I let the epipen slide from my grip so that I could work the key into my fingers. Frantically, I tried to find the keyhole in the left cuff. \"Evan,\" I whispered harshly, trying to wake him.\n\n0:55\n\nI managed to locate the hole\u2014then I dropped the key on the ground. \n\n0:50\n\nI rolled to my back, my hands frantically feeling the cold stone floor. \"Evan, wake up!\" He didn't stir. I found the key.\n\n0:37 \n\nI struggled to get it positioned right. My hands were shaking; I knew I was running out of time.\n\n0:25\n\nI twisted it hard and felt the lock give way, freeing my hands. I immediately grabbed the epipen but fumbled with the stupid safety cap. I got it off and slammed it down into Evan's leg.\n\n0:17\n\nI stuffed the pen behind him, quickly shoving him aside so I could get to his cuffs\u2014I pulled the key out of my own and unlocked his, letting them fall to the ground. He didn't stir.\n\n0:05\n\nI heard footsteps coming down the hallway. I tried to shake Evan, but there was no response; I pulled his massive frame up right and slumped into the wall with my hands behind me just as the door opened.\n\nI was breathing fast\u2014I knew they could hear it. John, Thomas and three other men that I didn't know walked in. From the way they flanked the room, I distinguished that two of the new men were guards; the third, a tall, thickly built man with a harsh nose and short cut dark hair, looked at me skeptically. From his commanding presence, the confidence in his stature I figured him to be Alpha Peter.\n\n\"Him?\" He said, turning to John, \"You have got to be kidding me. Why would anyone make such a fuss over\u2014him?\"\n\nWhen they were focused on each other, I glanced at Thomas. His stance was tense; his eyes flickered at me, then to Evan. I didn't know what his reasoning was but he seemed to be on my side\u2014still, unless Evan came to, it was the two of us against two Alphas and two guards. The odds were shit.\n\nI tried to stall for time, \"So you're the fucktard that thought it would be a great idea to betray the Alpha Rogue?\"\n\nHis appalled face turned back to me, \"Excuse me?\"\n\n\"Pretty sure I didn't stutter,\" I did my best to mimic a vampire's haughty, indignant affect, \"I mean, I know you're just a bunch of dogs but I honestly expected a better plan than this. Do you seriously think that any of you are going to walk out of here alive?\"\n\nI must have done a good job because I could see the two guards shift uneasily. John looked pissed, \"I've had enough of you.\" He pulled his gun from his shoulder holster and crossed the room to me.\n\nI wasn't sure if he was going to threaten me or shoot me but either way, I damn near pissed myself. From the corner of my eye, I saw Evan's chest start to rise and fall rapidly. I really hoped he would wake up in time. As soon as John got close enough, he raised his gun towards my head. I pulled back my leg and kicked him in the knee cap as hard as I could; he screamed out in pain, dropping the gun as he fell.\n\nI heard a shot ring out when Thomas killed the first guard before the second one came at him. I lunged forward, swinging wildly at John; I connected with his jaw but he was a tough old fucker and he dove at me. We struggled on the floor--he kept trying to reach his gun. I heard Evan before I saw him move\u2014it was a terrifying growl that came out of him, his eyes flashed open wildly before he sprang up and tackled Alpha Peter.\n\nJohn got a good punch into my side\u2014I felt a few ribs crack and cried out in pain but I kept fighting for my life. He grabbed the gun but I grabbed his wrist, trying to get it away from him. I heard Alpha Peter scream\u2014Evan slashed his chest open viciously, there was blood everywhere; Peter fell down to his knees.\n\nI heard a gunshot ring out; my entire body tensed\u2014I frantically looked around to see who got hit, until I felt the searing pain in my stomach and warmth on my skin. I breathed hard, looking down to see blood coming out of me. \n\nI fought against the shock, struggling to get the gun away from John but he shoved me off of him. He stood and raised the gun, pulling the trigger. I saw Evan's body tense and jerk backwards when the bullet hit him in the head. He fell to the ground. I pressed my hands to my stomach, trying hard to keep my blood from seeping out on the concrete floor. I could feel my existence fading, the precious fluid spilling out from my body.\n\nThomas still struggled with the guard but John didn't care\u2014there was hate in his eyes. He wanted me gone. He stood, favoring his damaged leg, once again raising the gun to my head. My eyes flickered over to Evan's lifeless body\u2014by far, the situation could not get any worse.\n\nA loud explosion rumbled in the distance; everything seemed muffled as the colors started to lose their brightness and fade. It was like everything was in slow motion; the door flew open and Max stepped into the room, a shot ringing out when he killed the guard. Then, Lily--her graceful, beautiful form stepped in and without hesitation she put a bullet into the back of John's head. I saw the agony on her face when she laid eyes on Evan; she crumpled to her knees before him, her hand reaching out to his face. She raised her gun and aimed at Thomas.\n\n\"Don't,\" I said. I tried to scream it, but it only came out as a harsh whisper before I started coughing up blood. Her head snapped over towards me, only then realizing that I was there as well. She crawled across the floor; her hands were shaking when she put them over mine, \"Thomas isn't with them,\" I managed to wheeze out.\n\nI heard beeping; Max looked down at his phone, \"Fuck, Lily we need to leave. Ian is almost here.\" He crossed the room while holstering his gun; he didn't hesitate when he picked me up, cradling my lanky frame awkwardly in his arms. I yelled out in pain.\n\nLily struggled to get up and follow Max out of the room; she glanced at Thomas, \"Leave now if you want to live.\" Her eyes fell on Evan\u2014she didn't want to leave him behind.\n\n\"Lily!\" Max screamed back at her when we were in the hallway. \n\nI struggled to keep my eyes open. I blinked, or so I thought. I was in the back of the SUV, I could feel the swaying of the movement when Max slid around a corner, the roar of the engine as he floored it, \"We need to get him to a hospital!\" He glanced at me\u2014from the look on his face I knew it was bad.\n\nI felt a cold hand on my forehead. I looked up to see Lily's blank face staring back down at me, that's when I realized I was in her lap. Her eyes flickered down to my stomach, \"He's not going to make it.\" Her voice was chillingly calm.\n\nI couldn't move my hands or feet; they stung with pins and needles. Darkness crept in on the edge of my vision and colors became even more muted. Everything grew muffled, like I was looking through a thick fog.\n\nHis voice was distant, shocked, \"What are you doing?\" Max glanced over his shoulder from the driver's seat, wide eyed.\n\nLily pulled her forearm away from her face, her blood, her existence seeping out from a ragged bite wound. Her lips were bright red; I could barely hear her voice, \"What I must.\" \n\nShe dropped her arm down to my mouth. I couldn't hear any more, I couldn't feel any more, I couldn't see any more. I vaguely tasted the warm, coppery tinge of thick syrup in my mouth before everything vanished.\n\nThat, was the first time I died."
    ],
    "authorname": "AfterDusk",
    "tags": [
        "vampire",
        "werewolf",
        "romance"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/first-death-pt-06"
}
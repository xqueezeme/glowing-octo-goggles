{
    "title": "A Blackmail Tale Ch. 09",
    "pages": [
        "============\n\nAbby takes the bull by the horns, and comes up with a method of paying back Alex, for her short bout of infidelity. Two-for-one, and a new girl is introduced into the mix. This chapter is pretty much just one big play session. Forgive me.\n\nThis series starts with A Bit of Blackmail, then A Bit More Blackmail, and A Blackmail Buddy. They are numbered after that. I suggest they be read in order.\n\n============\n\nChapter 09: A Debt Paid\n\nI got out of there in plenty of time, and headed directly to the gym. I had missed my morning workout, and although I'd had a bit of one already, it didn't really count.\n\nIt was after 7:00 when I finally got home. Most of my weekdays were pretty much the same. Get up early, hit the gym. Quick shower there, and if the day looked open enough, stop over at Krista's for at least a quick blow job, more if my morning was open. Then the pursuit of the mighty dollar prevailed, and I hit that hard, until around 4:00. Most people would think me pretty lucky. I could cover 95% percent of my work effort between 10:00 and 4:00, and still have lunch.\n\nAfter 4:00, I was basically on call for my customers and to deal with west coast business issues, until around 7:00. Two or three days a week, this would take up another couple of hours of my time. \n\nThe early evening, 5:00pm to 9:00pm, was family quality time. Doing some chores around the house, working with my daughter on her homework or piano practice. Maybe going outside and practicing volleyball. We tried to eat dinner together as a family, and three nights out of the week, we'd watch one or two TV shows together. \n\nAfter 9:00pm, I'd put my daughter to bed, and spend a couple of hours on my other job, making money on the internet, which in the last four years had gone from making a couple of hundred dollars a month, to almost matching my salary from my \"real job\". I would sneak in a few minutes throughout the day, checking site performance, comparing ad results, slowly optimizing sites that would generate cash as fully automated as possible. Once it was polished, I'd do it again. Complete sites only needed a few minutes review a week. I had over twenty of them by now, each the results of several months work. Two had been home runs, and generated more than the others combined. It was a numbers game.\n\nWe didn't need for Abby to work, but we were paying down all our bills and socking away the cash for a rainy day. If things kept up the way they were going, we'd be able to burn our mortgage in about six more months. We'd be totally debt free.\n\nIt worked out pretty well, but the biggest drawback was that there wasn't that much time for just Abby and me. We mostly lived for our daughter, and the rest of the time went our separate ways. During the day we had our different jobs. Then it was family time. After that I went to my office, trying to make a buck, while she watched TV and spent the next three or four hours on the phone with all of her friends.\n\nAfter 10 years together, it had gotten us in a bit of a rut, and was partially responsible for where I was today. Our sex life slowly ebbed away, until we were lucky to do it two to three times a month. It was always plain vanilla. But I still had this enormous sex drive, which I buried in fantasy.\n\nI didn't spend a lot of time on porn. I was familiar with addictions and didn't need one in my life. But I fantasized about the women around me all the time. There were pretty women everywhere, down at the elementary school, at the gym, at the office, at the grocery store, everywhere I looked.\n\nA few years back I returned from a 6 week assignment in China. Sitting in the airport, I looked around and said to myself, \"God, Americans are fat.\" In China, the fat person was rare, here it was the majority. On average, most of us just don't look that good, and are carrying 30 to 100 lbs of excess fat, or more. I had just lost almost 15 lbs in China from eating things I probably shouldn't have, and I swore I'd never put those pounds on again.\n\nIn the Dallas suburbs, however, I found an oasis of beauty and fitness. Not everyone, mind you, but a far greater percentage than most places. Well, excluding Phoenix, Vegas, San Diego, and maybe LA. Abby's friends bucked the trend even more. Of the dozen or so women she networked with on a daily level, all but three were really nice to look at. And her three closest friends, Krista, Donna, and Misty were all complete MILFs. They'd pop in and out frequently, and I'd just have to look, and revise my fantasies each night.\n\nSo as I was saying, it was after 7:00 pm when I got home, and was told to fend for myself for dinner if I wasn't going to call. It wasn't as bad as that, Abby had wrapped up my dinner and I reheated it, then sat down on the couch beside my daughter, and listened to her chat about her day.\n\nWe watched a show together, and I cleaned up in the kitchen. Abby was MIA. Probably in the back yard chatting on the phone, where she could have a little privacy from the ears of a ten year old, and the sound of her chattering, and the volume of the TV wouldn't be an issue.\n\nMost evenings she would milk a scotch and soda, or a tall glass of wine, while she got caught up on the latest. A couple of times a week, Courtney our neighbor immediately next door would hang out, usually when it was later - maybe after 9:00.\n\nI wandered out back to check on her, and found a gaggle of girls, giggling away. Abby was there, but she'd been joined by Misty, Krista, and Courtney. \n\n\"Now this looks like trouble,\" I announced with a grin. \"I don't think I want to know what this gang is up to.\"\n\n\"We're just waiting until the kids go to bed, so we can get naked in your hot tub again.\" Misty teased.\n\n\"Misty!\" Abby exclaimed. \"God, don't even joke about it. Do you have any idea how much trouble that caused?\"\n\nI started to blush, and looked over to Krista to see what was going on. She seemed to be getting bright red.\n\n\"After checking out y'alls goodies, I think I walked bow-legged for two weeks. Hell, probably longer.\" She laughed. \"Hey, what am I thinking. That sounds like a GREAT idea.\" \n\n\"Can I invite John over,\" Courtney laughed, \"he could REALLY use the inspiration.\"\n\n\"Ok, I'm leaving now,\" I told them, turning away, \"I don't think I want to hear anymore.\"\n\n\"Why don't you come back in an hour or so,\" Misty told me, \"and bring us another of those big bottles of wine you keep under the counter.\"\n\nShaking my head, I went back inside. I took my daughter upstairs and put her to bed, telling her she could read for twenty minutes, then it was lights out.\n\nI headed to my office, and worked on writing up all the details of the new plan I wanted to implement with Krista and Donna. It was more complicated than I thought, but I struggled with it for about an hour. I couldn't help thinking about what Misty had said, and wondered if it really was possible for lightning to strike twice.\n\nI headed downstairs, checking on the little one for a moment, and got one of the magnums of wine out, as well as a bottle opener. I didn't open it yet, since it would probably be wasted if I did.\n\nWalking to the back, I could see their heads sticking up out of the hot-tub. \"It's about fucking time,\" Misty told me, holding her glass up for a refill. The action brought her left tit right up to the waterline, setting off my fantasies immediately. It was clear she was at least topless. Looking at the stacks of clothing on the table, several topped with panties and bra, I suspected they were all 'au naturel'.\n\nCourtney was partially hiding behind Abby. \"I think that's close enough, Alex,\" she told me.\n\nKrista laughed, \"Oh he's been in here with us before, it's innocent enough, just a little eye-candy.\"\n\n\"Yeah, baby,\" Misty laughed, standing up in the hot-tub and shaking her upper body, \"Show us what you got, Alex.\"\n\n\"You are about to be cut off, wild thing,\" I warned her.\n\nShe sat down sulkily, \"Party-pooper.\"\n\n\"John would kill me if he knew we were skinny dipping. First for being naked here. Second, for letting Alex see me, and third, for him missing out on seeing all of you.\" Courtney lamented.\n\n\"Hell, he's been in bed for an hour. What he don't know won't hurt him. Besides, we'll never tell,\" Abby teased.\n\n\"Yeah, it's not like we're taking pictures, or anything,\" Krista added, with a wink to me.\n\n\"Stop just standing there, already, and fill our glasses, Alex. We're building up a thirst here.\" Misty reminded me.\n\nI opened the bottle and refilled all their glasses.\n\n\"Are you going to join us, dear?\" Abby asked me with a mischievous smile.\n\n\"I don't think Courtney is really ready for that,\" I told her.\n\n\"Court!\" Krista exclaimed, and Misty chimed in \"Come on Courtney.\"\n\n\"I guess if you guys don't mind...\" she said.\n\nWith her approval, I set the bottle of wine down beside the spa, and stripped down to my boxers, leaving them on momentarily for the sake of Courtney. I then got in the pool, and removed the wet boxers, tossing them to the side. \n\nI sat between the Misty and my wife. They asked me how the work was coming, and I told them a little about meeting a friend at the gym. I was halfway through my story, and was enjoying the feeling of my wife's hand on my cock, which was thoroughly hard. Then I felt Misty's hand on my other thigh, sliding up and cupping my balls, before grasping at my cock.\n\nAbby leaned across and whispered to her, \"Misty! Be good!\"\n\nI think that was the last straw for our neighbor. She blushed mightily, then finished her drink with a gulp. \"I think I better go, in case John wakes up.\" John wasn't likely to wake up. She was just beating a retreat. But I'll give her credit, she was willing to test the waters.\n\nI didn't have the grace to look away as she got out. I even turned to watch her as she walked to the table and dried off. She watched me watch her, and I expected her to object, but I think she was enjoying the attention. She was surrounded by naked beautiful women, but all my attention was on her. She wasn't shy now - she dried herself thoroughly as I watched, letting me see her naked body. She had a nice figure, a little pear-like with wider hips and a narrow torso. She had smallish breast, especially compared to the girls in the spa. She even turned to dry her hair and then pull on her panties, giving me a great view of her ass. I felt Misty scoot up behind me and look over my shoulder. The feeling of her hard nipples poking in my back made my cock ache. \n\n\"Pretty nice, you wondering what it would be like to tap that?\" Misty asked.\n\n\"Misty, behave,\" Krista warned her friend.\n\n\"What?\" she asked, but not before giving me a kiss on the neck and caressing my ass, with the hand hidden from everyone else's view.\n\nCourtney came back to us for a second before leaving. \"Stand up,\" she told me, \"fair's fair.\"\n\nI laughed, \"Turn your head girls, if you're easily offended.\" Then I did as she asked, and stood on the seating ledge, out of the water from my shins up. I was as hard as I get, my erection sticking up at a 45 degree angle. \n\n\"Damn. I see why she's bowlegged,\" Courtney said with a grin. Then she turned and left, \"Y'all are just a bit too wild for me,\" she told us.\n\n\"I doubt that,\" Abby told her. Then she directed her words to me, \"Get back in the water, show-off.\"\n\nI did, and she got quiet for a second. We all did. It was quiet outside, and remarkably peaceful. The backyard was very private, and we could hear when Courtney's garage door opened, then closed to let her in the back way. \n\nAbby seemed to have a plan. She got up, and took Misty by the hand. She stood her in front of me, just a little to one side, exposed from the waist up. Then she led Krista in front of me, also standing, to the other side. She slid behind them and urged them forward, so their legs were brushing against mine, and those delightful orbs I fantasized about where easily in reach.\n\n\"So what do you think?\" she asked me. \"Would this make us even?\"\n\n\"Even?\" I asked, dumbfounded. \n\n\"I owe you two. Misty has heard the story, or at least most of it. Krista of course knows it intimately. I know you want them, and have for a long time. Hell, you've been saying Krista's name in your sleep for a while. They're gorgeous. So I'm thinking we can play a little tonight, and then we'll work out a way for you to give each of them your full-attention for a while.\"\n\nMisty leaned in and put a knee next to me. Her legs straddled my left leg. She leaned forward so her breast was only an inch away from my face. \"Say yes, stupid.\"\n\nI looked at Krista and she smiled and took up a similar position. \"You heard the girl.\"\n\n\"Yes, stupid,\" I said with big shit-eating grin, and enjoyed the feeling of having my face buried in two different boobs. Misty was the quicker, so it was her nipple I was nibbling.\n\n\"Here's the rules,\" Abby said so we could all hear them, once the girls pulled away enough for me to breathe. I was enjoying holding both of my new toys' asses. \"Anything goes, as far as I'm concerned, as long as at least some part of your body is in the spa. The girls may have their own limits. Once we leave, it's over for now. What happens in the spa, stays in the spa. Promise?\" She asked.\n\nThe answering chorus affirmed that wildness was about to happen.\n\n\"Misty,\" Abby said, directing her attention to the undeniably wildest of this wild bunch, \"Krista and I are going to go over there, and give you fifteen minutes. You won't have privacy, but we won't interfere. The only rule is you can't make him come.\" Abby said, then she and Krista took their glasses and sat at the nearby table. They turned their chairs so they could have a clear view.\n\n\"I'm yours, Cowboy, what do you want to do?\" Misty asked me with a smile. \"I know you've already got this planned out in your mind. How many thousands of times have you fucked me already in your dreams?\"\n\n\"Too many to tell,\" I told her taking her in my arms and kissing her deeply. She settled into my lap and we made out like teenagers while I played with her tits and pussy, and she stroked my cock. She regaled me with fantasies of her own, and the ways her body could be put to use.\n\nTime was a wasting. \"Will you suck me?\" I asked her.\n\n\"Right to the root. I'll make your toes curl.\" She told me eagerly. She was good to her word. She had me sit on the edge of the hot-tub, legs splayed wide, and she went down on me like a pro. Someone had taught her tricks I had never even imagined. She could deep-throat me with ease, pressing her nose right against my pubes. After a couple of minutes of curling my toes, she pulled away. \"Adequate?\" she asked.\n\n\"Mind-blowing,\" I honestly told her.\n\n\"Good, but I don't want you to come, yet. What else can I do for you?\"\n\n\"Can I return the favor?\" I asked her.\n\n\"Alex, anything you want to do to me, that you're willing to do in front of those two, is alright by me. No opening off limits, no permission required,\" she said with a smile, taking a seat on the edge of the spa, and opening wide. Just before my mouth made contact we got a time check. \"Eight minutes left.\"\n\nI nuzzled her pretty little slice. She had a light bikini shave, with no hair below her clit hood. I opened her and licked her, tasting and teasing for just a couple of minutes. Then I pulled away.\n\n\"I'd love to do more, but I have to fuck you,\" I told her.\n\n\"How?\" she asked.\n\nI lifted her bodily, placed her on my cock. Her arms were around my neck and my arms were under her legs holding her weight up. Misty was the smallest of all the girls, only about 5' even and well under a hundred pounds. It was like tossing around a rag-doll. She always looked off balance, with such huge tits, on such a petite woman. It took a few seconds, but I finally found the hole and she settled down onto my shaft. Once I had her full, and I took her word at that, I settled into the water, holding her in my lap.\n\n\"It's gonna be hard to give me a thorough fucking like this,\" she teased, then kissed me deeply.\n\n\"I just wanted to be inside of you. I just wanted to feel what it was like.\" I told her.\n\n\"So do I pass your test?\" she asked, giving her crotch a good grind against mine. \"Wait! Before you answer.\" She lifted her breasts to my face, feeding me both her hard nipples. The breasts might be enhanced, but the sentiments behind them were genuine.\n\n\"Magna cum laude,\" I told her, lifting her up and down on my cock, just a bit. I was in heaven.\n\nShe leaned in and whispered, \"I've dreamed about this too. If you want, it doesn't have to be a one time thing.\"\n\nHer words were almost enough to have me come.\n\n\"Time!\" Abby announced, and a reluctant Misty left me, while an eager Krista approached the pool.\n\n\"That's a hard challenge to beat,\" she said, dropping her towel at the edge, climbing into my lap and kissing me. She leaned in close, whispering, \"They still think I don't do anything but straight sex. No sucking and definitely no ass play,\" she warned me.\n\nI spent several minutes enjoying her body, which even after the hardy use I had of it lately, turned me on immensely. Her natural tits still trumped Misty's artificial but larger fun bags. I spread out her towel, laid her down on the side of the spa, with just one foot and one hand still in the water. Then I explored every inch of her body. I feasted on her breasts, and between her legs, but made sure to spread my attention all over. Afterwards I laid down myself and asked her to do the same. She went through the motions, but when she neared my cock, stroking me for the fans, they urged her on. \"C'mon, Krista, lick it, it won't bite,\" Misty shouted. \"Just give him a taste,\" Abby encouraged, after \"shushing\" Misty. \n\nKrista let them talk her into it and finally gave me a couple of licks, then took me in her mouth. She made a big deal out of it, barely holding me there while she stroked me, but the others cheered her for the effort. They were being a little quieter now, not wanting to alert the neighbors to everything we were doing. I noticed there chairs which were originally about 10 feet away, had approached to about half that distance. They were getting quite a show.\n\nI stood with three minutes left, and laid her back down on the edge. I had her place one hand in the water, then I bent her legs back almost to her chest, and I entered her. My back was to Abby and Krista, and they must have had a pretty good view of me fucking their best friend. I kept one foot in the pool and awkwardly had my other foot beside her. I was able to go deep, and she moaned magnificently for the audience.\n\n\"Oh my God, he's so fucking big,\" she gasped. I turned and the other two girls were beside us. \n\n\"I didn't think you'd go quite this far, this fast,\" Abby confessed, looking a little nervous.\n\nI laughed, almost popping out of the pussy I was porking. \"You tell me I can have 15 minutes to do anything I want, short of coming, with two walking erotic fantasies, and you're surprised I'm screwing them? Do you want me to stop?\" I asked her, wondering if it had gone past her comfort level.\n\n\"Don't stop,\" Abby told me, \"Fuck the little tease until she comes.\" \n\nWith a knowing smile, I fucked away at her, using every inch of my long, fat cock to stretch her out, while Abby got a little revenge. She squeezed Krista's tits, pulling on her nipples, tugging away. \"Who's the slut now, Krista?\" she asked.\n\n\"I am, I'm his slut,\" she gasped while I fucked her with long hard strokes.\n\nThen Abby bent down and sucked on Krista's nipple. \"Ohhh,\" Krista moaned.\n\n\"Tell me your a slut for his big cock,\" Krista urged her, still teasing those big sensitive titties.\n\n\"I'm a slut for his cock, his big fat tasty cock,\" she moaned.\n\nKrista reached behind her and pushed me away, holding me just out of reach. She reached her hand around the head of my clock, squeezing it, stopping me from sliding back into our pretty little blonde friend. \"Beg for it, you dirty little slut. Beg me for my husband's thick cock. Beg me to let him fuck you,\" Krista growled.",
        "\"Oh, God, please Krista,\" she moaned in frustration.\n\n\"Say it or I'll let Misty have him,\" Krista warned.\n\n\"Please, please let him fuck me. Make him stick that hard dick way up inside me again, please, I'm begging.\" Krista begged her, convincingly.\n\nKrista seemed happy enough with that, and she slid her hand up my shaft, and pulled my cock back into Krista's eager slit. As soon as she let go, I was at it again, fucking her, slowly picking up the pace.\n\nMisty was behind me, \"I'm so jealous,\" she told me, \"that should be me.\" She was stroking my ass and rubbing my cock. \"Bend her legs forward some more and get more up on her,\" she told me, \"I'm going to diddle her ass.\"\n\nI did as she asked, and heard the immediate response, \"Noooo!\" she moaned. \"Misty!\"\n\n\"Just enjoy it, slut\" Misty teased. \n\nAll the attention put Krista over the top quickly. Not only was I fucking her hard, and Abby was nibbling her chest, but Misty was finger fucking her tight little butt. On top of that, both Abby and Misty were trying to wiggle their hands in and work over Krista's clit at the same time. \n\nShe came like fireworks, and I quickly pulled out. \"I have to stop or I'll cum,\" I explained, panting. \n\n\"Cum in the tart, your next one can be for Misty. You'll last longer on that one, anyway.\" Abby told me.\n\nMisty had wasted no time, and as soon as I had pulled out, she was sliding around me and had already laid claim to my suddenly exposed member with her infinitely talented mouth, keeping me right on that edge. It was with regret that I pushed her away and settled back into Krista. Not that I didn't want to fuck Krista, mind you, but the first time in anyone is kind of special, and I wanted to see Misty swallow my seed.\n\nNonetheless, I reentered my dear sex slave Krista, and fucked her to another series of climaxes, until Krista had to cover the girl's mouth with her hand, to stop her from screaming. \"Use your mouth,\" I told my wife, who looked at me in shock, then obediently did, kissing Krista deeply, as I came deep inside her. \n\nThe willingness that Misty and Abby showed, for playing with Krista's body was at least as exciting as the whole scene of having beautiful naked women available for me. I stood there in awe, my hips thrusting, squeezing out every bit of cum into the pretty, pliable Krista.\n\nWhen I left Krista gasping, trembling from her multiple orgasms, I looked to retreat to the spa for a second and get my breath. I slid into the water. breathing heavy. \"You're not done already, are you?\" Misty asked. \n\n\"No, just recovering a bit.\" I told her pulling her close and hugging her, tasting those huge distracting tits again. The truth was, I was feeling drained. It had been a very busy day. But I surely didn't want this wonderful opportunity to end yet.\n\n\"Oh, I think I can help with that.\" Then she was dragging me back to the side of the spa, and doing her best to swallow my cock, whole. Abby was soon helping her, and I got to watch my darling wife, and her sexy diminutive friend, deliver a memorable dual blow-job. \n\nKrista slowly recovered, and came to me. She kissed me deeply. \"God, I can't believe what we just did,\" she said. \"And you two are the worst! You just couldn't let things be,\" she grouched at her friends.\n\n\"You know you liked it,\" Misty teased, while letting Abby have sole control over my newly rising erection.\n\n\"At least I'm not the only slut for his cock,\" Krista teased back.\n\n\"Oh, I admit it.\" Misty answered, taking my cock in her hand and poising her mouth over it. \"I'd be a willing slave to such a,\" she swallowed me to the root and pulled off quickly, \"hard,\" she took me again, all the way, \"thick,\" and again, \"long\", again, \"juicy\" ... \"cock.\"\n\nKrista slipped into the spa, leaving Misty in the middle, and now I had three faces fighting over my pole. \n\n\"Next time he's fucking you, I'm going to find something big and long to stick up your butt,\" Krista threatened.\n\nMisty laughed. \"I guess we all know that wouldn't be Rich.\"\n\n\"Oh! You bitch!\" Krista snapped, and she reached out from behind Misty and grabbed both her tits, squeezing the nipples hard.\n\nMisty gasped, then blinked hard, \"God, Krista, you're getting me wet.\" Krista pulled her hands off almost in shock. Then Misty turned around to face her, took Krista's hand in her own, and placed them back on her tits. \"Squeeze them, slut,\" she told her best friend.\n\nKrista looked on her friend, and then squeezed. Misty moaned for her. Krista grabbed the hard little nubs between her fingers and pulled, hard, and Misty moaned louder. My cock was hard enough to drive nails when Krista leaned over, her mouth just beyond the nipple while her hand squeezed the whole breast. \"Beg me for it, slut,\" Krista told her, with no sound of humor in her voice.\n\n\"God, just do it Krista,\" Misty said. \n\n\"Beg me, you little cock slut, you dirty little whore\" Krista said, flicking her tongue out and connecting for just a second with the swelling nipple.\n\n\"Ahh, suck them,\" Misty groaned out and pulled Krista's face against her breast.\n\nKrista seemed to swallow half of Misty's huge tit, her mouth wide.\n\nIt looked so wild but I wanted to play. I convinced Krista to relinquish her hold for a moment, and then I stood Misty up on the seat ledge, her body completely exposed. I moved behind her, bent her over at the waist, and entered her again. Sinking myself to the root in her warmth, I looked her over from behind. Misty was cute as a button, but her butt was her weakest feature. She had almost no curves there, unlike the three other women I'd been plowing lately. She was so thin, and so small, that if not for the huge tits glued to her front, she'd have passed for a middle schooler, even though I knew she was somewhere in her early thirties. \n\nHolding her firmly by the waist, keeping my crotch pressed up into hers, I lowered us both back into the water, nuts deep in the little hellion. I leaned back while she faced away from me, my ass on the edge of the seat, my neck against the spa side. She settled in, with a nice wiggle.\n\nAbby and Krista let me work my machinations in peace. When I reached around Misty and pulled her back against me, squeezing those full mounds, and told them to make her come on my cock, they attacked the vixen with a vengeance. They worked over her breasts, far rougher than I would have been able to. They had their hands between her legs and I could feel them rubbing her and playing with her. Stray fingers squeezed past my cock into her tightly filled pussy. They took turns feeding their breasts to her, and then Abby stood over her, straddling her body, and lowered her twat to Misty's mouth, putting an end to the stream of moans and profanity that had been escaping her.\n\nIt was so far beyond anything I'd expected is was surreal. Krista was still being bad, I could feel her hands down where I was buried in the tiny Misty. She was wedging two fingers into Misty's already thoroughly filled pussy, her fingers rubbing against the head of my cock, inside of Misty. It was unbelievable.\n\nIt was a long time that Abby stood there, putting Misty's naughty mouth to good use. I watched Abby tremble, and then she stepped away, telling Krista, \"Your turn, come all over the little cock whore's face.\"\n\nKrista had left any role of inexperienced little church mouse far behind. She took Abby's place, and pulled Misty's face into her bare twat. \"Lick it, bitch,\" she groaned, and from all of three or four inches away, I watched the horny little Misty suckle at Krista's dripping pussy like a newborn baby eager for a meal.\n\nAbby's hands joined mine, teasing and toying with Misty's tits. She was much more active, and seemed to be able to elicit moans on demand from the target of our passion play.\n\nI don't know how many times Misty came on my cock, more than I would have thought possible. I whispered to her constantly, how good she felt, how she was built to take cock. How her mouth was a wonder for all the sexes. My hands never stopped touching her all over, playing with her, enjoying her. I wasn't able to get much leverage fucking her, so I just had to sit completely sheathed, while she worked her muscles on me, and I tried to do the same, flexing hard, forcing my cock to swell within her, working the PC muscle to get just a little more action in. Each of her orgasms worked a wonder of its own, the tightening, clenching of her tight twat around my rod, the spasming, not only felt incredible, but the knowledge of WHY it felt so good was just wonderful.\n\nWhen the girls finally left Misty alone, she was all but used up. She lay collapsed against me. I picked up her buoyant body, and slowly fucked myself with her. I'd lift her up, and then pull her down, hard, while thrusting upward. The water was making things a little difficult, but I was still enjoying it immensely. I desperately wanted to come in her, but it wasn't going to happen in that position. I finally stood her up, leaned her over the edge of the spa, hanging out over the pool, and entered her from behind again. Now I had a good position and leverage, and I was able to fuck her thoroughly, before finally reaching the release I'd looked for. \n\nThe ornery girls, Abby and Krista, were just sitting back in the spa, watching Misty get hers. I'm not sure why they enjoyed taunting Misty so much but they were absolutely merciless. When I finished with her, she just remained there, leaning over the edge, her swollen, cum-filled and much used pussy like a bulls-eye.\n\nAbby and Krista sat side by side, and I realized they had their hands in each others laps, just playing away. I had thought my wife was some kind of boring lover, and now I found she might be even more of a freak than me. \n\nAbby was against the wall, so I sat next to Krista, reaching out and playing with a breast just for fun.\n\n\"God, I wish I didn't have to go home,\" Krista bemoaned. \n\nMisty showed the first sign of life, \"Shit, no kidding,\" she sighed, slowly rolling over and stretching out on the side of the spa, arms and legs akimbo. \"I don't EVER remember feeling anything like that,\" she said. \"Man, I feel like a used up porn star. My jaws ache, my tongue is raw, and my pussy feels like I've had a baseball bat shoved up me for a few hours. My nipples are so sensitive I'm afraid to even put on a shirt.\"\n\nAbby got up and stood beside her. \"Listen Misty, I don't want you fucking him behind my back. We'll work out something for one of these days I'm off, and give him his second play date, like I said. But only when I say, Ok?\" She was gently caressing Misty's body, and her hand slowly traveled up and around her tit. By the end of her statement she had her fingers wrapped around a super-sensitized nipple, and she squeezed.\n\n\"Shit, oh shit,\" Misty gasped, her hands reaching up to her chest. \"I understand. Anyway, I'm thinking it might be more fun to play with him when you're there, then with just him alone.\" She gasped.\n\nAbby released the pressure, and then leaned over and kissed the poor abused nub. \"You bet your ass it will be.\"\n\n\"No warning for Krista?\" Misty asked, accusingly. \n\n\"I trust her to play by the rules,\" Abby said. \"She's not the cock-slut that you are.\"\n\n\"Yes, I am,\" Krista interrupted, annoyed. \"I can be just as big a cock-slut as her!\" \n\n\"Ok, ok,\" Abby acceded, holding her hands up. \"My best friends are all cock-sluts for my husbands meat.\"\n\n\"Not Donna,\" Misty teased, with a laugh.\n\n\"Like that would ever happen,\" Abby laughed, joined by Krista. \n\nI watched the girls get dressed slowly, and depart for home. I managed to get a nice kiss from each one as they slipped out the door. Poor, worn out Misty still managed to reach down and give my worn out cock a squeeze.\n\nI took my wife by the waist and lead her back into the house. \"That was quite a nice unexpected offer,\" I told her.\n\n\"Purely selfish.\" She told me.\n\n\"You got a thing for them?\" I asked, curious.\n\n\"No, you ninny! Let me ask you a question.\" \n\n\"Shoot.\"\n\n\"Do you know anybody who would let their husband fuck their best friends, especially friends that look like those two?\" She asked me, sitting down on the bed.\n\n\"Are you kidding? Of course not.\"\n\n\"Do you understand now, that there is nothing, sexually, I won't do for you? Tie me up. Fuck me hard. Fill every hole. Share me. Use me on demand. I can be your #1 cock slut, and the queen of your harem.\" She told me. Then she leaned over and took my cock in her mouth, sucking me for just a moment.\n\n\"I understand,\" I said, and I was starting to.\n\n\"I'm also the mother of your only child, who you are utterly devoted to.\" She added.\n\n\"Yes, you are.\" I said.\n\n\"Knowing all that, and knowing I can continue to bring those girls to your bed, and more if you tire of them, is there any chance at all you would ever leave me, even if I did do something stupid like I did the other night?\" Her hand was playing with me, slowly bringing me back to life, which I honestly didn't think was possible.\n\n\"Never,\" I told her.\n\n\"Exactly. You may own me now, but I own you.\" She gave me a push back into the bed. \"Now lay down, relax, and enjoy remembering in detail all the wild things you just were a part of, and I'll suck you to sleep, my stallion.\" And she slipped under the covers, and gave me the sweetest, easiest blow-job, just pure pleasure, without and pressure to complete the act. \n\n\"So are you now my cock-slut too?\" I asked her lazily.\n\nShe pulled away for a second. \"Silly boy, I've always been your cock-slut. I just don't think we ever let each other know it until recently.\"\n\nShe went back to sucking me to sleep. It was nice. I could get used to something like that.\n\n=======\n\nI hope you enjoyed that as much as I did. I know it's not likely, what with me having the lovely Misty, Krista and Abby helping at this end. Still, if you did enjoy it, please vote."
    ],
    "authorname": "Tx Tall Tales",
    "tags": [
        "blackmail",
        "hot tub",
        "spa",
        "threesome",
        "foursome",
        "skinny dipping"
    ],
    "category": "Loving Wives",
    "url": "https://www.literotica.com/s/a-blackmail-tale-ch-09"
}
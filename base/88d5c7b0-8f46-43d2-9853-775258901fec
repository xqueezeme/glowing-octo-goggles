{
    "title": "Yours Ch. 04",
    "pages": [
        "This is the fourth chapter in a series, and shouldn't be read alone. As always, all characters are over 18 and fictional.\n\nBefore finishing this, I noticed that Chapter 1 of this story has now reached more than 100 favourites. That kind of support, plus all the comments and emails continue to overwhelm me, not to mention motivate me to keep on writing.\n\nI'd like to sincerely thank everyone who added my story to your favourites list, and those who sent a message. All of your suggestions, compliments, and even criticisms really mean a lot to me, even if I can't respond to all of them. Thanks for being so patient.\n\nAnd thanks for reading.\n\n-BB\n\n*\n\nIt was always just the four of us for Christmas. For Thanksgiving we spent one day with as much family as we could cram into one room, but our parents always liked to spend this time with just us.\n\nChristmas day was the most fun it had been in years, mostly because Rose and I were on speaking terms again. We joked around like we did when we were kids, and I knew our parents could see the difference by the sly looks they kept giving each other.\n\nAfter we'd eaten the delicious turkey dinner that we'd all helped to make, as was the tradition, it was time to open presents.\n\n\"Wait here.\" said Rose to me as we moved into the living room, \"I got you something.\"\n\nAgain my parents exchanged knowing looks, and I rolled my eyes at them.\n\nShe came back holding a beautifully wrapped box with a bow on the top. It was small, big enough for maybe a book or something around that size. For a moment I was stunned at the effort she'd gone to, even though I already knew what was inside it.\n\nI lifted off the lid and saw her gift, nestled in the centre of a pile of different coloured strips of thin paper, along with a hand-written note,\n\n\"To Steven. With love, your big sister.\"\n\nI was a twenty dollar bill.\n\nI grinned, then immediately put on a look of shock. I picked up the money and held it in my hands, disbelievingly.\n\n\"Oh... wow.\" I said, looking up at her, \"This... I don't know what to say. Thank you... so much...\"\n\nShe grinned and took my hand. I squeezed it in return, as if we were feeling a moment of pure sibling connection.\n\n\"All I got you was a card.\" I said, sounding ashamed.\n\nI handed it to her, and saw her eyes light up.\n\nShe opened it and as she expected a twenty fell out onto her lap.\n\nShe read the card aloud,\n\n\"To Rose, the world's best little sister. Merry Christmas.\"\n\nShe leapt forward and threw her arms around me, kissing me on the cheek.\n\n\"Merry Christmas little brother.\" she said, pretending like she was about to cry.\n\nWe heard a sob, and turned to see Mom actually was about to cry.\n\nWe all laughed at her reaction, including Dad, but it was actually understandable. This method of gift giving was another old tradition of ours, just like each insisting we were the older twin.\n\nIt had started on our 11th birthday, when we'd decided not to buy something for each other but just to give each other twenty dollars and buy whatever we wanted. It didn't occur to us at the time how pointless a gesture it was, but we'd kept it up. The acting shocked and grateful just became part of the joke over the years.\n\nThe last two or maybe three years, however, we'd exchanged our 'gifts' in secret, almost. No cards, no notes, just the money left on a pillow, or handed directly to the other. It was really the last thing we'd had that had made us feel like we were even still related, a sad shadow of an old connection. Mom knew that all this emotion was an act, but seeing us play along with it meant that we were friends again, something that I'm sure our parents were overjoyed to see.\n\nMom waved away our laughter while trying not to break out in tears, and we got around to opening the rest of our presents. We had a large extended family, so we mostly got a lot of spending money from Aunts, Uncles, and cousins who had too many names on their mailing list to bother buying specific items for each individual. However this year, in amongst the cash and various gift vouchers, I opened a very expensive looking digital camera from an Aunt on my Dad's side.\n\nI spent a few minutes playing with it and looking at the instructions before setting it aside and moving on to the next present, as is a world-wide Christmas tradition for everyone with a big family, I'm sure.\n\nAfterwards my Mom took me aside.\n\n\"I know you don't really need a camera. I mean, there's probably one on your phone.\" said Mom, \"But try to use it a few times, maybe send her some pictures you've taken. Show her you appreciate it.\"\n\n\"I'll sure I'll find some use for it.\" I told her.\n\nI picked it up again.\n\n\"Well why don't you start right now?\" she asked, \"Alright everyone, over by the fireplace!\"\n\nShe tore Rose and Dad away from their discussion about soccer, a passion they shared. They were both clinging to a soccer themed calendar Dad had gotten from his brother and heatedly debating the details of the last seasons team structures.\n\nThe three of them lined up and I set the camera on a timer. I walked over and stood beside Mom, only for Rose to yank me over to her side, clinging on to my arm. When the flash went off my smile and look of surprise were completely genuine.\n\nAfter admiring my new camera's impressive definition, we all stretched out in front of the TV, Mom stoked the fire and Dad made us all hot chocolate and brought in a plate of mince pies.\n\nIt was the first time in a long while I'd felt like our family was whole again. I started to wonder why every Christmas hadn't been like this.\n\n\"Don't forget, we're having Jessica and her parents over for dinner tomorrow.\" my mom suddenly announced, \"So leave something for dessert.\"\n\nOh. Right.\n\nJessica.\n\n==\n\nWe were all dressed our best when Jessica and her parents, Alice and Bob, arrived. Jessica was wearing a lovely little blue dress that was long enough to be decent, but still showed off her legs wonderfully. Alice was wearing a similar shaped dress, but in a dark green. I haven't talked much about Alice before, but she was essentially an older, more mature version of Jessica. They had very similar faces, but her eyes were brown instead of Jessica's vivid green.\n\nAnd her tits were a lot smaller too, but that wasn't something I noticed until puberty.\n\nWe sat down and ate the re-heated remains of our Christmas dinner, like always. We always ended up cooking too much, and it was almost as good the second time as the first.\n\nThe parents always had wine while Rose, Jessica and I had some sort of fancy sparkling grape juice. It was delicious, although I often wished we'd be allowed to try wine again.\n\nThis year my wish was granted. Instead of breaking out the kid stuff, Mom went right on around the table, filling our glasses too. We toasted, and I sipped the first alcohol I'd had since I was 15.\n\nIt was delicious. My taste buds had remembered how to enjoy the flavour, and I smiled as I absorbed the deep and satisfying sensation. I glanced up to see everyone staring at my reaction, confused that I didn't grimace like the girls had. I smiled wider, remembering how similar their reactions were the first time we'd been allowed to taste it.\n\nI knew they'd been drinking alcohol since then, but when Rose and I had talked about it she seemed to be more concerned with slightly alcoholic fruit drinks, or occasionally spirits mixed with energy drinks than wine.\n\nI sipped my wine and enjoyed my meal, trying hard to avoid any lingering eye contact with Jessica. This was difficult, as she was wearing more make up than usual and looked, frankly, fucking incredible.\n\nAfter dinner we put out dessert, which was warm apple pie and ice cream.\n\nAfter this, we just sat and talked around the table. Honestly I wasn't paying much attention to the conversations around me. As usual I was lost in my thoughts, just nodding or smiling at the appropriate times. This worked to my disadvantage when Rose suddenly turned to me and said,\n\n\"Right Steven?\"\n\nI raised my eyebrows and cocked my head, making it obvious I hadn't been listening.\n\n\"McClaren's Tools is the best place to get power tools, right?\" she said.\n\n\"Yeah...\" I agreed, \"That's where I'd get it.\"\n\nNot that I knew what 'it' was.\n\n\"What about Fix-It's?\" Bob asked, referring to the big chain store nearby.\n\n\"Good for supplies, but not tools.\" I answered, \".They hardly ever do deals. They usually have the price even higher than normal because they haven't got much competition. I used to work there.\"\n\nI'd spent last summer working the cashier and moving stock around.\n\n\"I thought you worked at McClaren's.\" Rose said.\n\n\"Yeah, I worked there too.\" said, \"That's how I know old Mr. McClaren is related to one of his suppliers. It's name brand stuff, but he gets a good deal on them, and charges less because of it.\"\n\nThat had been the summer before. A much easier job working in the small, local shop, but also a lot more boring.\n\n\"Wow, you really know your stuff.\" Bob said approvingly.\n\n\"That's what I'm always telling you!\" Dad suddenly interjected. \"Both of my kids have got experience with work, and it'll serve them well in future!\"\n\n\"Oh, here we go...\" I said, while Rose rolled her eyes.\n\n\"You see,\" he began \"When Susan and I got out of college, we didn't know the first thing about looking after ourselves...\"\n\nRose suddenly stepped in, mimicking his voice,\n\n\"We didn't know how to clean, how to cook...\"\n\nI joined in for the last line,\n\n\"Couldn't even boil an egg!\" we said, laughing.\n\n\"Alright, alright.\" Mom said, \"We know you know this story, but it's important.\"\n\nWe had heard this a lot. As I've said before, our parents always taught us that being independent and competent was important. We did our own laundry, learned to cook meals for ourselves, and were encouraged to work through the summer. This story was told to us in some form or another every time we complained about having so much responsibility, so yeah... we'd heard it a lot.\n\n\"I've never heard this.\" Jessica suddenly said from across the table.\n\n\"Well, why don't you tell it to her then.\" said Dad, looking at Rose and I.\n\nI sighed.\n\n\"Basically, these two were both from fairly well-off families.\" I started, wanting to get this over with, \"They were coddled their whole lives, met in college and coasted through it. They graduated engaged, but had no idea how to get a job, look after a car, balance a check book...\"\n\n\"Even when they got married they didn't really know what they were doing.\" Rose stepped in, \"But when they decided to have us, they knew they had to get their shit together.\"\n\nShe gasped suddenly,\n\n\"I mean... get their act together.\" she corrected, although no one had chastised her for the slip.\n\n\"Anyway, long story short, we're paying for their mistakes.\" I finished.\n\n\"It's not like that...\" Dad said.\n\n\"We really had no idea what we were doing.\" said Mom, \"I mean, when we moved out here to have the kids, most of our stuff was still packed up from moving into our first apartment! We didn't want to rely on our parents, but we couldn't really look after ourselves either...\"\n\n\"We promised each other that our kids would never turn out that way.\" Dad said, \"That they would know everything they needed to know before moving out. We always told them, grades are important, but learning how to hold down a job is more important.\"\n\n\"Being independent is important.\" Mom agreed. \"For example, we gave them an allowance, but told them that if they wanted a car they'd have to earn the money themselves. They did, and now together they own that car. Despite how much money my Father makes, a car is more than I ever really owned at that age.\"\n\nThere was a pensive silence.\n\n\"So... how many jobs have you had?\" Jessica asked me, I think speaking directly to me for the first time that night.\n\n\"Um... like a dozen, maybe?\" I said, \"Three or four, part-time, every summer since I was about 15...\"\n\n\"Well, he overdoes it.\" said Rose, \"I usually have one or two every summer.\"\n\n\"Wow... I've never even had one job...\" she said, looking ashamed.\n\nThere was a slight, uncomfortable pause.\n\n\"Yeah, but, you're going to be Valedictorian, right?\" I asked. \"I mean, you probably already know what you're going to college for.\"\n\n\"Yeah...\" she said, \"I'm going to be a lawyer.\"\n\nI smiled. That suited her perfectly, I thought. Spending all day aggressively and intelligently arguing with people? That was her all over.\n\n\"Well, there you go.\" I said, \"That takes more work than whatever I'll probably end up doing. You can figure the other stuff out when you come to it.\"\n\n\"Exactly.\" Bob chimed in, \"Being independent is important, sure, but my little girl's going to the best school in the country to be a lawyer, isn't that right honey?\"\n\n\"Right.\" she smiled, although she was still looking at me.\n\nThe parents debated their various teaching styles for another ten minutes before the conversation moved on.\n\nHalf an hour later I excused myself to go to the bathroom down the hall. I didn't hear her following me, but Jessica slipped in behind me and closed the door.\n\n\"Can I help you?\" I asked, turning to her.\n\n\"You look really good.\" she said seductively.\n\nI was wearing a button-down shirt, black dress pants and black tie.\n\n\"Thanks.\" I mumbled shyly.\n\nI internally chastised myself, reminding myself who I was talking to.\n\n\"What do you want?\" I asked.\n\nShe simply smiled and dropped to her knees.\n\n\"Really?\" I asked condescendingly, \"You want to do this now?\"\n\nHer smiled faltered, but she nodded.\n\nI sighed and stepped towards her, lifting her chin with one finger.\n\n\"Your parents are two rooms away. So are mine. Not to mention my sister, your best friend.\" I said, \"And you want to suck my cock?\"\n\nShe smiled again.\n\n\"Yes please.\" she said.\n\nI shrugged nonchalantly and reached down to unbuckle my belt. She reached up and fished my cock out of my pants, gently squeezing it's flaccid length.\n\nI stood in silence as she went about getting me hard, a feat that took only seconds. In a few more seconds I was in her throat, enjoying the heat and pressure. She was moving slowly, thoroughly licking and pleasuring my cock each time it left her throat. It felt wonderful, but I felt pressed for time. We'd be noticed as missing eventually.\n\n\"I'm going to miss this big cock, Sir.\" she sighed, jerking my shaft with both hands.\n\n\"Hurry up.\" I grunted.\n\nI put my hand on her head to encourage her as she took me back into her mouth, but I was careful not to mess up her hair. She obeyed and increased her pace, slamming my erection into her clenching throat again and again. I sighed with pleasure. I wasn't going to get this again for two weeks, so I was determined to remember it.\n\nIt had only been a few minutes but I already wanted to finish, paranoid about being discovered.\n\n\"Going to have to make this a fast one, sweetheart.\" I said, holding her head in place.\n\nI began to thrust into her, fucking her face with long, fast strokes. I flexed my cock and allowed myself to orgasm. I came harder than I expected to, and let out a loud grunt of pleasure as I blew my load into her swallowing throat.\n\nI slid my shrinking cock out of her mouth and tucked it back into my pants. Looking down I saw that Jessica was looking up at me with a dazed smile on her face, her lipstick smudged.\n\n\"Stand up.\" I ordered quietly.\n\nShe was quick to obey. I reached under the hem of her dress and felt the crotch of her panties. She let out a sultry little whimper when I realised they were soaking wet. I impulsively grabbed the waist band and yanked it up, causing the material to grind against her sensitive lower lips.\n\nShe gasped with pleasure and grabbed my arm with both hands.\n\n\"Such a shame we can't do anything about this...\" I sighed.\n\n\"Two... two more weeks.\" she responded shakily.\n\nI smiled. She was really determined to keep to our agreement.\n\n\"Can you really wait two more weeks?\" I asked.\n\nShe nodded, biting her lip.\n\n\"You said I have to wait. I'll wait.\" she said.\n\nMy smiled grew wider.\n\n\"Such an obedient little slut.\" I said, releasing her panties.\n\nI grabbed her ass and pulled her into a kiss which she eagerly responded to, then I pulled away again after a few seconds. I loved leaving her frustrated. It gave me a small but pleasant rush of Dominance each time I saw the disappointment in her eyes. She knew that I was in control of her pleasure, and if it didn't come from me then it wouldn't come at all.\n\n\"Good girl.\" I said, pulling away.\n\nI was about to leave, but remembered I hadn't actually used the bathroom yet.\n\nI turned towards the toilet got my cock out again. I started to piss, then realised Jessica was still watching me. She seemed fascinated by my cock, I guess having never seen one urinate before. Despite how many times she'd seen me naked, this was somewhat embarrassing.\n\nI finished, shaking off the last few drops and tucking it back in.\n\n\"I didn't get you anything.\" she said suddenly.\n\nI turned towards her.\n\n\"What are you talking about?\" I asked.\n\n\"For Christmas.\" she clarified, \"I... I didn't get you something. I wanted to, but you said we have to keep it a secret, so I thought it would look weird. I mean, Rose knows that I don't usually get anyone except her and my parents presents, so she definitely would have been suspicious, and... I didn't really know what to get you either...\"\n\n\"I wasn't expecting anything.\" I said honestly, \"And I didn't get you anything.\"\n\nShe nodded, but still looked guilty. Jessica getting me a Christmas present? Despite everything, that still felt like such a weird concept, like a looking outside and seeing a green sky. Something that just didn't make sense.\n\n\"Go on.\" I said, sighing, \"We shouldn't leave together.\"\n\n\"Ok.\" she said quietly. \"But I need to go upstairs first. I have to... change my panties.\"\n\nI laughed at the way she said this, a strange mix of shame and pride.\n\n\"Go ahead.\" I said, turning to wash my hands. \"Fix your make-up, too.\"\n\nShe slid out of the room behind me.\n\nI washed her lipstick off my lips, and made sure I looked presentable before rejoining everyone.\n\nThe rest of the night was pretty uneventful, although every time I looked at Jessica I suddenly found it hard to stop picturing her soft, plump lips, and how they'd been wrapped around my cock just an hour or two earlier.\n\nRose went with Jessica and stayed at her place that night, as they were planning to leave from there to the airport the next day. I could tell by the way she looked at me that she wanted a more exciting goodbye, but with everyone around she couldn't do anything more than give me a chaste hug and a quick,\n\n\"Merry Christmas.\"\n\n==\n\nThe day after that, my parents were leaving too.\n\n\"We're heading out, Son.\" Dad called up to my room.\n\nI walked down to see them off.\n\n\"Have a good time.\" I said.\n\n\"You too.\" Dad smiled, \"And, uh... there's some beer in the fridge left over. Have at them.\" He said winking.\n\n\"Are you sure you're going to be Ok by yourself?\" my Mom asked at the door.\n\n\"Of course, why wouldn't I be?\" I said.\n\nShe didn't answer right away, but just looked concerned.\n\n\"You know you can have some friends over, if you want.\" she said, \"Or... you know... a girl.\"\n\nI smiled. So that was the problem. For the first time in years, Mom was worrying about my self-imposed isolation.\n\n\"Sure, I'll make sure to keep the place clean though.\" I said, brushing off her suggestion as if it were no big deal.\n\nShe smiled, then nodded.\n\n\"Have fun!\" she said, picking up her last bag and heading out the door.\n\nThat was definitely the plan.\n\n==\n\nThe first few days were as exciting at they normally were, but the novelty of being able to wander around in my underwear and eat leftover pizza for breakfast, and cereal for dinner wore off surprisingly quickly.",
        "Normally I was ecstatic to have the house to myself, but this time it didn't feel as special. There was something missing. Maybe it was just the fact that I no longer had to hide in my room when Jessica was around, meaning I was more used to spending free time down here.\n\nRather than being overjoyed that everyone else was gone, I found myself wondering what everyone was doing, and what kind of fun they were having. I just sulked about the house, my grey mood reflected by the clouds outside, not even bothering to snow deciding instead to drizzle continuously without any real energy.\n\nBy New Year's Eve, the feeling I normally enjoyed was completely gone, leaving only a strange sense of loneliness and melancholy. I counted down to midnight alone, feeling not a trace of the excitement I'd felt even the year before.\n\nThe next day, January 1st, I decided to stop feeling sorry for myself, and start enjoying my vacation.\n\nMy plan that night was to just get drunk. I was alone and now had access to alcohol, and I was aware that I'd never really been properly drunk before. So that evening I assembled my dad's generous offering on the kitchen table, turned on the TV, and started to drink. I sipped the first one, grimacing at the uniquely bitter taste, but trying hard to enjoy it.\n\nAfter half an hour I still wasn't finished that can, so I decided to start gulping it. Within 20 minutes I was half way through my third can. By the fourth, I found that I was starting to enjoy the flavour. It was deeper, richer taste than I first realised, and by the sixth can I was practically swirling it around in my mouth to absorb as much of it as possible. It tasted nothing like the wine, but it was the same process as I'd applied there, not trying to mask the taste or wish it was something else, but just experiencing it for what it was.\n\nIn the middle of a drink something on the TV made me laugh and I spat a mouthful all over myself. I didn't really mind, though. In fact, I laughed again.\n\nIt was at this point that I realised that the alcohol might be affecting me. Further evidence of this theory presented itself when I reached for another can, leaned too far, and somehow slid right off my chair. I didn't really mind this either. I spent the rest of the night down there watching TV, for some reason deciding to return to the same spot each time I got up for another beer or to go the bathroom.\n\nI discovered that I quite enjoyed being drunk. The buzzing sensation around my ears, the somehow pleasant dizziness, the quieting of my normally restless thoughts. Overall it was a pretty relaxing state to be in. I don't think it's surprising that I don't exactly remember how much I drank, or much else about the night.\n\nWhat I do know is that I woke up the next morning with a splitting headache, a fairly intense feeling of nausea, and a surprisingly clean house. The cans were cleaned away, as was the puddle of beer that I definitely remember spilling. I had a vague memory of thinking that cleaning up would be easier drunk than hung over, and I really appreciated my own foresight.\n\nI had, however, left the TV on and the front door unlocked.\n\nSo... I guess that one sort of balances itself out? Maybe not.\n\nThat was probably the most interesting night of my time alone, for more reasons than one.\n\nA few days later, I got a package delivered to the door in my name. I signed for it, having no idea what it was, and took it inside to open it.\n\nIt was a ball gag.\n\nA bright, red, rubber ball on a black leather strap with a stainless steel buckle to fasten it. It was about as clich\u00e9 and classic a ball gag as it was possible to have. I lifted it out of the box and just held it in my hands, staring at it for about five minutes straight.\n\nI was utterly confused.\n\nEventually, some dim ember of memory glowed in my mind and I recalled ordering it from a fetish website from my laptop after maybe my tenth beer of the night. I decided to investigate this further, but for some reason I'd decided to clear my internet history, so I had no idea if I'd ordered anything else. But after checking my bank account online I saw that I'd taken a noticeable chunk out of my savings.\n\nThe next day, I got another package.\n\nThe day after that I got two more.\n\nAt first I had to try to keep myself from panicking as the boxes kept coming, but I noticed that with each new item I got a little more excited. I recognised most of the items as soon as I saw them, but there a few things that I had absolutely no memory of even being interested in. I studied each one as it arrived, making sure I knew exactly what it was and how it was used. Not too difficult a task for the three bottles of lube, but quite a bit more of a challenge for the complicated metal contraption that had to be assembled by hand. I eventually discovered that it was a cheap collapsible spreader bar.\n\nI stashed each new item in an old suitcase in the bottom of my closet that I'd been meaning to throw out. As my collection grew, so did my gleeful anticipation. I was going to get to use these things, I thought. It's one thing watching a porn-star Dom using things like this on a beautiful young submissive, (you know, just for reference...) but it was quite a different experience actually holding them in my own two hands and imagining just how I would use them with Jessica.\n\nHow her teeth would look biting into the gag, or how her eyes would widen with fear the next time I had to punish her...\n\nI was starting to think of my drunken spending spree as a happy accident, rather than a stupid mistake.\n\nDespite all this, I was hoping against hope that each new delivery would be the last, as each day brought my time alone closer to it's finish.\n\nFinally, the day before my parents were due to return, the final box arrived. Unfortunately, they got back a day early, and before I woke up. When I got out of the shower a little before noon, I heard them moving around downstairs. I walked down into the living room to see an open, empty cardboard box.\n\n\"What do you need one of these for?\" I suddenly heard my dad ask from behind me.\n\nI jumped about a foot in the air and span to face him. The blood drained from my face before I even looked at what he was holding. He stretched it out between his fingers, displaying it to me.\n\nIt was a blindfold. More specifically, a sleeping mask. A soft black eye cover with a slightly lighter satin pattern across the front, with a thin, elastic strap.\n\nI let out a long sigh and forced a smile. Thank God it was something vaguely innocent.\n\n\"Jeez Dad, I didn't know you were back!\" I said, trying to explain away my shock.\n\n\"Yeah, the weather wasn't great so we grabbed an earlier flight.\" he said.\n\n\"Just at the end there, it was bad.\" Mom chimed in, entering from the hallway, \"Until a few days ago it was just gorgeous.\"\n\nLooking at them closer, I could see that Mom had a nice brown tone to her skin, whereas Dad was bright red.\n\n\"Yeah, it looks like you got some sun.\" I smiled, trying to hide my nervousness.\n\n\"Well, one of us got a little more than some sun.\" Dad joked, gesturing with his sunburned arms.\n\n\"So what's with this?\" Mom asked, taking the blindfold from Dad and spinning the thin, smooth strap in her fingers.\n\n\"Oh, I've been having some... uh, headaches.\" I lied quickly, \"Like, I get really sensitive to light. So I just bought that, uh, sleep mask. Thought it might help.\"\n\n\"That's not good.\" Dad said, sounding concerned, \"Sounds like a migraine.\"\n\n\"No, no, it's not that bad.\" I explained \"It's just... you know, every couple of weeks I just get this headache where the slightest bit of light makes it worse. Even the moonlight bothers me when my eyes are closed! I could probably just take some painkillers, but I thought this might be easier.\"\n\nMom let out a little 'Hm.', sounding satisfied with my story, and threw it to me.\n\n\"Well, don't ignore it if it gets any worse.\" she said.\n\nI nodded and tried to inconspicuously jam the thing in my pocket, knowing that this could have been a disaster if had been literally any other item that they'd found..\n\n\"You know, you shouldn't really be opening my mail.\" I said, trying to sound slightly offended. I still wasn't sure this was really the final package, and wanted to make sure they wouldn't do any more snooping.\n\n\"Sorry about that, didn't mean to.\" Dad said, \"Just signed for it before even checking the name. We assumed it was for one of us.\"\n\n\"We'll check next time.\" Mom agreed.\n\nWe talked for a little while, me getting some of the details of their trip, and they getting a heavily edited version of my time alone. Then I excused myself and ran up to my room.\n\nI closed the door, wishing it had a lock on it, and opened my closet. I pulled out my suitcase, which I'd been referring to in my head as my \"Bag of Tricks\" and looked at my new collection. I won't go into details just yet, but it was a selection of tools that any novice Dom would be lucky to own.\n\nLooking at the complete collection, I felt the same rush of excitement that had been building with each new delivery. Jessica was due back any day, and she'd have this waiting for her. Where would I even begin?\n\nI realised I was grinning wildly, my imagination frantic with the possibilities of what I could do to her. I calmed myself down, deciding to refine the solid plans I'd been creating for each and every item before even letting Jessica know they existed. So far with her I'd mostly been winging it, relying on half-plans and improvisation. But some of the things I'd acquired here... they were dangerous. I had to be absolutely sure of what I was doing.\n\nBefore I knew it, Rose was back home and blabbering on about all the stuff she'd done in Paris. I was glad she'd enjoyed herself, but I couldn't wait for the following Friday when I knew Jessica would be coming over. It had been just over two weeks since our dinner, and I was eager to reunite with her.\n\nTo either punish or reward her.\n\n==\n\nThere was a soft knock at the door.\n\nIt was always the same two taps with her. Like the start of a joke. I stood up and crossed the room to the door, reaching out to let my fingers rest on the handle.\n\nThen I hesitated.\n\nI felt nervous. I hadn't seen her for more than two weeks, even staying in my room all that evening to avoid her, knowing it would be more exciting for the first time I see her to be when she visited me.\n\nTwo weeks doesn't sound like a lot of time, but it felt like months. Taking a second to steady myself, I let out a quick breath and pulled the door open.\n\nI noticed her expression first, that look of complete shock at my answering the door. Wide, bright green eyes and soft, pouting lips.\n\nShe was wearing something new, something that I had to take a few seconds to fully absorb. It was just a simple, thin grey slip, completely see through, revealing plain black panties and a black bra.\n\nShe looked incredible.\n\nHer usual negligee was more complicated than this, with intricate designs woven into it, and it was beautiful, but this...this was wonderfully simple. Just a barely existent layer of transparent material that showed off her body perfectly, but somehow hid enough to be tantalising. It was almost elegant, in a way.\n\nMy eyes wandered down to her long legs to her feet, and of course her toenails were painted black to match. I let my eyes glide back up her gorgeous body, trying to memorise every detail I'd missed. I felt myself harden in my underwear as I met her eyes again. She seemed frozen by fear, not knowing how to react. Waiting for me to take control.\n\nI stepped towards her and slid my arm around her waist, pulling her close to me. She leaned in and our lips met in a ferocious kiss. I could feel my relief and enthusiasm echoed and returned by her. She wrapped her arms around my neck and moaned into my mouth as our tongues danced wildly.\n\nI suddenly pulled back from her. We couldn't do this in the hallway.\n\nI stood to the side and gestured for her to enter. She walked quickly past me, and I followed and closed the door. As I turned towards the room, she was suddenly there again, her face rapidly approaching mine. She kissed me hard and threw her body against me, slamming me against the door. I returned the kiss, and smiled at what I was about to do.\n\nI slid my hand slowly up into her soft hair, and tightened my grip. I yanked her head away from mine, making her squeal. I held her by her hair and stared into her eyes.\n\nIt was like I could see every thought running through her head, every emotion bubbling to the surface on that beautiful face I knew so well. The lust, the disappointment, the excitement, and as always, the fear. That hint of terror that kept her on her toes, that made everything that much more exciting for her.\n\n\"Is this new?\" I asked, keeping my voice calm and gentle.\n\nI gestured to her body, her new outfit. She tried to nod, almost forgetting that she was still in my grip.\n\n\"Yeah... my, my mom helped me pick it out.\" she said quietly.\n\nAs soon as she said it, she blushed and grimaced. I couldn't help but chuckle at her embarrassment.\n\n\"So I have your mommy to thank?\" I asked, not expecting an answer.\n\nI liked the image of her wandering around Paris, getting Alice to buy her sexy clothes so she could dress up for me. I wondered if Rose had been there for that, whether she suspected that her best friend was actually dressing like a slut for her own twin brother.\n\n\"Did you have fun in Paris?\" I asked casually.\n\n\"Yeah...\" she sighed, \"But I... I missed you.\"\n\nI pulled her by the hair, gently bringing her forehead to rest against mine. I noticed something interesting about how she moved. She didn't anticipate my actions and try to move with me, but neither did she resist. She just let herself be led, always being just slow enough that she was experiencing the full pain of my grip. Even when I was already hurting her she was submitting in her own small way.\n\n\"Have you been a good girl, sweetheart?\" I asked, staring into her eyes.\n\n\"Yes.\" she whispered quickly.\n\n\"You have?\" I asked, smirking at her.\n\n\"Yes...\" she repeated desperately.\n\n\"Yes... what?\" I asked.\n\nI was ready to lead her down the path of submission again, pushing and leading her at every point, like I usually had to. But not this time.\n\n\"Yes, I've been a good girl for you Sir.\" she said quickly, her desperation to be believed clear in her tone, \"I missed you so much. I've been a good little slut for you. I didn't touch my pussy no matter how much I wanted to.\"\n\nShe surprised me by talking like this. These were the kinds of things she usually didn't say until she'd already been thoroughly dominated.\n\n\"You can't lie to me.\" I said quietly.\n\n\"I wouldn't.\" she said, her voice firm, \"I'm not.\"\n\nI looked into her bright green eyes for another few seconds. Would I even know if she was lying to me?\n\n\"Strip.\" I said calmly, letting her go.\n\nShe took a step back and reached down to the hem of her barely solid dress. She slowly lifted it up, exposing her body to me while shaking her hips back and forth to some unheard beat. When it cleared her head, she tossed it carelessly on the floor.\n\nThen came her bra. She unhooked it and quickly brought her hands around to hold the cups against her chest. In a smooth, seemingly practised motion, she lifted her arms to drop the bra to the floor, but quickly pressed them back against her chest, not revealing herself. She was holding her boobs with both arms, denying me the view.\n\nI wasn't used to her teasing me like this, but I wasn't in any hurry to change things. As much as I wanted to see that beautiful chest in it's entirety, I was content to wait. And they looked pretty good being held like that. She shook her hips seductively, again back and forth with that easy rhythm. She took a step towards me, then crouched low and slid her panties off with one hand, keeping the other arm over her nipples.\n\nShe stood up, revealing her well trimmed triangle of pubic hair, then kicked her panties away, taking another step towards me. She was inches away from me, and she suddenly closed the distance. She let her arms drop right before she pressed her body against mine, her soft, heavy breasts pushing into my chest, and her arms crossing behind my back.\n\nI wished for a brief second that I wasn't still clothed so I could feel her skin against mine, but there was still something satisfying about making her expose herself to me without having to do the same.\n\n\"I missed you.\" she said, her lips only inches from mine.\n\n\"Be quiet.\" I said gently.\n\nI wanted silence right now. Just the sounds of our breathing, and the feeling of her warmth against me. A little bit of intimacy before things got... dark.\n\nShe smiled and leaned in for a kiss, but waited for me. I smiled. That was enough intimacy for now.\n\nGrabbing her ass hard with both hands, I lifted her off the ground and forced our lips together. I plunged my tongue into her mouth, kissing her hard and deep. She wrapped her legs around my waist tightly as I continued to drive my tongue against hers, not caring about being skilled or sensual, just violating her mouth with my tongue. She whimpered into me, and only then did I pull away. I slowly slid her downwards, and she dropped her legs just in time.\n\nShe was shaky on her feet, and looked dazed at the sudden ferocity of my kiss.\n\nI gently pushed her back a step, admiring her nude form. Her tits really were incredible, standing high and proud on her chest despite their size. My cock was rock hard. I wanted her so badly.\n\nWithout meaning to, I let out a low growl of desire in the back of my throat. She smiled at me, and I felt myself blush slightly.\n\n\"On the bed.\" I ordered.\n\nShe turned quickly and slid into my bed, under the blanket, before kicking it off and revealing herself again. I smiled, remembering how she'd done it before. I'd heard so much about women too afraid and insecure to have sex with the lights on, never mind above the covers. But Jessica would never pass up a chance to show off her body to me.\n\nEven now she posed, laid back on her arms and body positioned like a centrefold, long legs pointed out straight with one curled just a little bit. The look of lust and anticipation in her eyes, the absolute perfection of her large firm breasts and taught stomach... she looked like a goddess of desire, and she was waiting just for me.\n\nI shook my head of these pseudo-poetic notions and tried to find my centre. My cock was throbbing in my jeans but I knew I had to have complete control over myself. As much as I wanted to just jump on her and ravage her, I had to take things slowly. I had a plan for how things were going to go, and I had to follow that plan, just like always. This wasn't just sex, after all. It was Domination.\n\nI sat down on the bed beside her and reached down to the floor. Under my bed were two brown bags, one for a reward, and one for a punishment. My hand lingered on the punishment bag for a second. I was disappointed that I wouldn't get to explore my blossoming sadism tonight, but if she'd really earned this reward...\n\n\"You know, it's interesting that you bought that sexy outfit for me, because I bought something for you to wear too.\" I said, lifting out the reward bag.\n\nShe smiled eagerly but stayed silent, as she was told to.\n\n\"Well, a few things.\" I said, my voice light. \"The first is this.\"\n\nI pulled out a thick, black leather strap. It was much thicker, much more intimidating than the belt I'd used to punish her the last time we were together, and her eyes widened in shock and fear.\n\nI laughed at her terrified expression.\n\n\"No, sweetheart, no.\" I said, unrolling the strap in my hands, \"It's not for that.\"\n\nShe looked up at me, eyes wide and filled with vulnerability.",
        "I laughed again and shook my head at her, as if she was being silly.\n\n\"Come here, look.\" I said.\n\nI sat up and reached towards her. I took her by the hands and guided them up above her head. She looked back to see what I was doing as I slid her wrists through the metal bars of my headboard, in a place I had discovered was perfect for them. Close to the top in the centre, where a solid bar ran horizontally along, bisecting the vertical ones. Just at this spot it created a series of little squares, and it was through two of these that I slid Jessica's small, trembling hands.\n\n\"Keep your arms here.\" I told her.\n\nI grabbed the strap and slowly tightened it around her wrists, pulling it tight and fastening it. This was a bondage strap, and I'd actually bought several of these of various sizes and uses. They weren't exactly cheap, but even in my booze-addled state I'd apparently had the good sense to order a smaller set.\n\nI knew her wrists would be well secured here because I'd tested the spot myself. The strap had been difficult to operate with my teeth, but I hadn't been stupid enough to try to fasten it, which probably would have trapped me completely.\n\nI sat down beside her again, still smiling.\n\n\"Can you get out?\" I asked.\n\nShe shook her head, before realising she hadn't tried. She suddenly pulled hard, the strain clear on her face. Then she tried to shake herself free, causing her boobs to jiggle wildly, but she didn't get anywhere. The headboard didn't budge.\n\n\"Cheer up, sweetheart.\" I said, stroking her cheek. She looked so completely anxious, so unsure of what was going to happen next. \"This is your reward, remember?\"\n\nShe nodded silently, but her expression didn't change. Despite being tied up she looked comfortable. I'd gotten a few spare pillows from the guest bedroom, so she was quite well supported. But she looked so afraid.\n\nI liked that.\n\nI turned away and reached into the bag again.\n\n\"And this is another thing I bought you.\" I said.\n\nI pulled out the blindfold that had been discovered by my parents. It was obvious from the thickness of the material that she would be completely blind when I put in on her, which I did.\n\nI slid it slowly over her head, the strap giving just enough room to fit her, but was still quite tight. She didn't resist, but merely let out a soft, serene sigh when I pulled away.\n\nI quickly got off the bed, and stood to look at her.\n\nNaked, bound, and blind. Magnificent.\n\nI walked over to my desk, and watched her head follow my footsteps. I took my t-shirt off and threw it to the ground. There was a reason I'd been wearing jeans in bed. The sound of my zip being lowered cut through the silence. It was maybe a little much to plan even this, but she jerked her head towards the sound and let out a whimper of anticipation. It was worth it just for that.\n\nNow clad in just my boxer shorts, I turned, opened my desk drawer and pulled out my new camera. I told Mom I'd find a use for this.\n\nI stood in front of the bed and aimed my first shot. Her whole body, stretched out beautifully. I didn't know a lot about cameras, but I'd looked up enough online to be impressed with this one. It was incredibly high spec, closer to what a professional would use than a hobbyist. Must have cost a fortune, but that wasn't new for my extended family.\n\nReally the only problem with it had been the sound it made. The only sound effect saved on the camera's memory was an unsatisfying little click, just enough to show that the picture had been taken. Boring. It had a silent mode too, but where was the fun in that?\n\nI looked online and found a soundboard of sound effects. After much careful consideration, I'd downloaded and installed one that I can only describe as \"classic\". It sounded like a picture being taken, that obvious and familiar click and whir that could only mean one thing.\n\nSo when I took that first picture of Jessica, naked, blindfolded, and strapped to my bed... she was very aware of it.\n\nImmediately her head twisted to face the sound and her body tensed. I smiled, and looked at the picture I'd taken on the small screen. The quality was exceptional, I was able to zoom in on the screen an incredible amount and pick out all kinds of little details.\n\nI focused on her face this time, and clicked.\n\nAgain her body seemed to leap in response, but she still hadn't spoken. Her legs were pushed tightly together, and I could see her tug against her bindings, as if unsure of whether or not to cover herself.\n\nI rested on the bed and reached over to her, taking her knee and sliding my hand down her thigh. She shivered at my touch, and bit her lip.\n\n\"Open your legs.\" I ordered, my voice soft.\n\nShe did as I asked without hesitation and I got off the bed, again robbing her of the knowledge of my presence.\n\nI crouched down low and zoomed in. I tried to find an angle I liked, one that focused on her glistening pussy, but that still had her boobs and face in the shot.\n\nOnce I was satisfied, I clicked, and suddenly her legs snapped shut in fear, as if she could feel the gaze of the lens.\n\n\"What is it, sweetheart?\" I asked gently.\n\n\"Is... Is that a camera?\" she asked meekly, her voice wavering.\n\n\"Yeah.\" I said casually.\n\nShe let out a sudden shocked breath, and held her body tighter.\n\n\"Why... What.... Why do you have a camera?\" she asked, \"What are you doing?\"\n\n\"I'm taking pictures of you.\" I told her simply.\n\n\"Why!?\" she asked, her voice edged with genuine fear.\n\n\"I dunno...\" I said, again keeping my voice casual and uncaring, \"Maybe I'll use them to make a website. Jessica-the-slut.com, or something.\"\n\nI snapped another picture of her face. Even under the mask it was obvious that she was terrified.\n\n\"Sir!\" she gasped, trying to twist her body away from my gaze, curling up her legs in a fetal position.\n\nShe seemed on the edge of panic.\n\n\"You don't like that idea?\" I asked, \"All those people logging on and seeing you like this. Naked... tied up... blindfolded. Absolutely... dripping wet.\"\n\n\"No!\" she gasped, \"Please...Please...I...\"\n\nShe was too panicked to even form a full sentence.\n\nI laughed.\n\nI jumped heavily onto the bed and crawled over her body, straddling her stomach and allowing some of my weight to press down on her.\n\nI grabbed her jaw and pointed her face towards me.\n\n\"Smile, sweetheart.\" I said, the levity in my voice contrasting with my rough treatment of her.\n\nI snapped a picture of her confused and panicked expression.\n\n\"I said... smile.\" I ordered roughly, my voice suddenly as firm as my grip.\n\nShe waited a few seconds before forcing herself to smile. I got a shiver of satisfaction from tormenting her like this. Scaring her, holding her in my will. I grounded myself in the moment.\n\nI captured her terrified false smile, then let her go, saying,\n\n\"Good girl.\"\n\nI got off the bed and turned to face her. She looked like she was about to cry, and she was pulling tightly on her bindings in an effort to hide her body from me.\n\nI'm a sadist, I thought to myself. And it was her that helped me realise it. There was a part of me that wanted to keep going, to torture her, terrify her. To hurt her as badly as she did me for all those years.\n\nBut... she'd been good, and so she deserved a reward. I told myself that it was that simple, and fought my darker urges to sleep.\n\n\"Oh relax sweetheart, I'm just teasing you.\" I said, my voice light again, \"These pictures are just for me. I wanted to try out my new camera.\"\n\nShe didn't move, but seemed to relax almost imperceptibly. I meant this, I had no intention of sharing these with anyone, but I was fine with it if she didn't completely believe me just yet\n\n\"Here, look, I'll put it away.\" I said.\n\nI walked back to the desk and opened my drawer. For a second I considered lying to her and taking a few more silent pictures, but I shrugged and dropped it in, then closed the drawer with an exaggerated slam.\n\nI knelt down on the bed again and took her knees in my hands. I gently guided her off her side and on to her back, then opened her legs again. Her pussy was even wetter now, and it had made a visible mark on my sheets. Despite her protests, something about having her picture taken like this had turned her on. Was it possible that my submissive, masochistic, bondage-loving slut was a closet exhibitionist on top of everything else? I made a note to follow up on that theory as soon as possible.\n\nThe scent of her arousal was everywhere, and I felt myself become impossibly harder. The smell of her wet pussy was something I had come to associate with all the things I did to her, and so the scent itself now turned me on.\n\n\"What are you doing?\" she almost whispered.\n\nI'd been holding her legs open for a while, lost in my thoughts.\n\n\"I'm looking at your pussy, Jessica.\" I stated honestly.\n\nShe let out a breath of shock and I felt her try to close her legs. She wasn't used to revealing this part of herself to anyone, and even I hadn't paid too much attention in the past. It was embarrassing for her, but I knew that would only arouse her further. This was proven to be true when I held her legs in place against her efforts, and she let out a small whimper and bit down on her lower lip.\n\n\"You know, it's quite a pretty pussy.\" I said slowly, softly, \"Pink little lips... so cute... and so sensitive.\"\n\nShe gasped lightly, but didn't try to pull away.\n\n\"And wet too,\" I said, leaning in closer, \"So wet that you're staining my sheets. Such a slutty, drippy little pussy.\"\n\n\"Sir...\" she whimpered, trying to close her legs.\n\nI wrapped both my arms across her hips and brought my face an inch away from her, letting my breath tickle her sensitive lower lips.\n\n\"Ahhahh...\" she sighed, \"Sir... What... What are you...?\" she mumbled.\n\n\"And your clit sticks right out.\" I teased, \"Just sits right out, like it's begging to be played with.\"\n\nShe didn't reply, but her breath seemed unsteady and erratic. She was so sensitive, so ready.\n\n\"It's so cute.\" I said, as if to myself, \"It almost looks good enough to...\"\n\nI trailed off,and suddenly pressed my tongue to her wet lips, licking upwards towards her clit. Her body immediately jerked against me, but I held her hips in place with my arms.\n\nI finished my long lick, and took a second to consider my first taste of pussy. The flavour was interesting. Completely unique, and a little strange, but not actually unpleasant. Definitely something I could get used to.\n\n\"Sir what are you doing!?\" Jessica squeaked, finally seeming to get her breath back.\n\n\"I'm tasting your pussy, sweetheart.\" I said gently, kissing the inside of her thigh, \"This is your reward for being a good girl.\"\n\nI pressed the tip of my tongue to her outer lips and slowly circled around. She gasped dramatically, and pushed her hips against my arms. I'd read enough cunnilingus tips online to last a lifetime, so I was determined to be good at this. I had already started to get used to the taste of her, and I knew that I'd probably end up enjoying it, just like with the wine.\n\nI continued to explore the sensitive outer lips, feeling the texture against my tongue. Then I moved inwards, licking against the inside of her pussy, enjoying how it made her gasp. I kept using light, teasing licks on her lips, and every now and again sinking inside, looking for spots that were more sensitive than others, waiting for a bigger reaction. I'd found her G-spot like this with my fingers, and I'd find some sensitive areas with my tongue even if it took all night.\n\n\"I'm gonna cum!\" she suddenly screeched.\n\nWell that was fast.\n\nI pulled away from her.\n\n\"Already? I've barely started.\" I said, letting my genuine disappointment seep into my voice. \"I was looking forward to teasing you some more...\"\n\nShe shook her head frantically from side to side.\n\n\"I can't...\" she moaned, \"Soon... I'm so close...\"\n\nI quickly leaned in and licked her once more, a quick swipe from bottom to top. She yelped with pleasure and surprise.\n\n\"Ahhnnn...\" she moaned, thrusting her hips against my grip, \"So close... Oh fuck I'm so close!\"\n\nI felt myself pouting up at her. I'd been looking forward to a long, slow tease, but I could barely touch her without her going off. It looked like these few minutes were all the practice I was going to get tonight.\n\nI hated not being able to explore new interests.\n\nI sighed, and shrugged.\n\n\"Do you want to cum?\" I asked, licking and nibbling her thigh, \"Do you want to cum on my tongue?\"\n\n\"Please!\" she begged, \"Please! Ooh God, please!\"\n\nI'd never seen her this desperate, but I guess it made sense. Three weeks without contact, and then I lick her for the first time? It was really no surprise she was on edge. After all, the first time I'd left her this long without an orgasm, she'd cum just from me entering her, despite the pain of tearing her hymen. Or maybe... because of the pain of tearing her hymen. It was hard to tell with a masochist like Jessica.\n\nI pulled away from her completely, determined to make this last. I moved forward, leaning over her body and taking her jaw in my grip again. With my other hand I grabbed one of her soft, heavy tits, squeezing lightly and feeling her hard nipple push against my palm.\n\nI put my lips to her ear and spoke in a soft, gentle voice;\n\n\"Do you really want to cum? You can't wait any more?\"\n\nShe shook her head and let out a strained whine. I tightened my grip on her face for a few seconds before releasing her and moving my hand to her inner thigh. Immediately I felt her legs close together, accidentally denying me access in trying to further her own pleasure.\n\n\"Legs open!\" I said, my voice suddenly stern.\n\nShe let out a frustrated whine but obeyed, flinging her legs apart.\n\n\"Do you want to cum?\" I asked again, sliding my fingers down her thigh towards her dripping pussy. \"Do you want me to taste this pussy again?\"\n\n\"Please...Please...\" she whimpered.\n\n\"Please?\" I asked, \"Please... what?\"\n\nI let my fingertips glide across her pussy lips, and her whole body jerked forward, her wrists pulling hard against her restraints. She was trying so hard to hold herself back.\n\n\"Please lick my pussy!\" she gasped, \"Please make me cum!\"\n\nI smiled and grabbed her other heavy breast with my other hand. I squeezed them both hard and put my weight on her, pushing her body into the mattress. She moaned and gasped as I teased her nipples that pushed through my fingers.\n\n\"Please Sir...\" she moaned, her hips thrusting desperately beneath me, \"Please, please...\".\n\nI let out a short, dark laugh. She was so beautiful, so perfectly submissive.\n\nI kissed her hard, forcing my tongue between her lips where I met the usual resistance of her eager response. I broke the kiss and turned my attention to her neck. She moaned as I licked and kissed her, and let out a sharp gasp in my ear when I bit down gently.\n\nI pulled back and bent to kiss and nibble the taut flesh of her stomach. I moved slowly downwards, savouring the taste of her salty, glistening skin with my tongue. She didn't stop making little whimpers or gasps in response.\n\nI slid backwards off the bed, pushed my head between her legs and again pinned her hips down with my arms. I breathed heavily on her pussy and felt her jerk forcefully against my arms. It seemed like I was really going to have to hold her down.\n\n\"Sir...Sir, please...\" she whimpered.\n\n\"Hmm...you really are a needy little slut, aren't you Jessica?\" I asked.\n\n\"Yes Sir.\" she said without hesitation, \"I'm a needy slut, I'm your needy slut.\"\n\n\"You really need to cum, don't you.\" I said, kissing her thigh.\n\nShe let out a long, shuttering wail of desire and frustration.\n\n\"I need it, Sir...Your slut needs to cum...Please...\" she mewled.\n\nWithout any more teasing, or any warning, I pressed my tongue against her pussy lips. I started at the bottom and took one long, forceful lick upwards, stopping at the top to fully cover her clit. I felt my tongue twitch once against her flesh...\n\nAnd that was all it took.\n\nShe shouted out her long-awaited orgasm in a loud, strained voice, a wordless yell of pure pleasure. I started quickly licking against and around her clit, trying to prolong the sensations. Her hot, wet juices flooded my mouth, so much that I was practically swallowing her essence as it flowed from her.\n\nI redoubled my efforts, fighting hard to hold her down while licking even more forcefully. Her long legs had hooked around the back of my shoulders, and while her wild thrusting made it hard to continue, her legs had locked me to her.\n\nAfter a long several seconds, her body stopped thrusting against my arms, and she went limp.\n\n\"Oh my God...\" she moaned, \"Oh my God, Sir...Thank y-\"\n\nI cut her off by pushing my tongue against her clit. I wasn't finished yet. I circled the sensitive bud with the tip of my tongue before brushing across it in fast, light strokes. As embarrassing as it sounds, these were motions I'd been practising in the mirror, challenging myself to increase the speed and dexterity of my tongue.\n\nI started tracing shapes against the little nub of flesh, and I slid two fingers inside her, using my fingertips to seek out and stimulate her sensitive G-spot. A minute or two later she let out another wail of mindless bliss. My mouth was once again flooded with her taste, and her body began jerking and bucking as if wanting to detach my lips and tongue from her sensitive flesh. Her body was moving so forcefully that she almost made me bite my own tongue.\n\nI pushed back with my tongue, moving away from her clit and again exploring her luscious outer lips. The sound of her voice changed from movement to movement, growling and gasping as I explored her dripping slit. After awhile, her moans seemed to become more subdued, less frantic. When I noticed this I turned my attention back to her clit, licking hard and quick, and pumped my fingers in and out. It wasn't long before she was shaken by another powerful orgasm.\n\nI was actually enjoying the hell out of this. It was sticky and messy, but there was something undeniably sexual and intimate about pleasuring her like this. Each time she began to relax, I would move to her back to her pink pearl, which by now must have been singing with sensitivity. This went on for minutes, and soon I couldn't tell if she was having one ridiculously long orgasm, or if she was cumming over and over again, too fast and too many times to count. I didn't stop moving my tongue, on her clit or around her lips, and pushing it inside her occasionally to get a better taste of the fresh spurts of feminine juices that came with every new orgasm.\n\nEventually, my tongue was getting tired, and her voice was getting ragged.\n\nJust as I was about to try and slow things down, her voice suddenly stopped mid-cry. Her legs went slack around me, and her hips stopped their incessant bucking.\n\nI looked up at her. Her head was turned to the side, and seemed to hang slack.\n\n\"Jessica?\" I said, wiping my wet and sticky mouth.\n\nShe didn't respond. Her breathing was deep and loud, but she didn't move or reply.\n\n\"Jessica?\" I said again, and moved up the bed towards her.\n\nI lifted her shoulders and gently shook her, but her head just lolled limply. I lifted the blindfold off her eyes to see that they were closed. I pried one open with my fingers. Her pupil shrank in reaction to the light, but her eyes stayed still and unseeing.\n\nShe was unconscious.\n\nMy blood ran cold, and my breath caught in my throat.\n\n\"Oh fuck.\" I whispered.\n\nI began to panic.\n\nHad she hit her head on my metal headboard? Had I hurt her? But no, she was still surrounded by cushions, and I didn't see any blood. I shook my head, and pressed my hands hard against my face, feeling the fear threaten to overwhelm me.",
        "I leapt off the bed towards my desk and opened my laptop. The screen jumped to life as I slid my finger across the track pad, and I immediately began typing. I tried random keywords into the search bar, whatever came to mind, things like \"unconscious\", \"orgasm\", \"bondage\", and most embarrassingly, \"help\".\n\nI read and clicked frantically, my mind racing with ways I might have hurt her, and within two minutes I had begun to calm down.\n\nI took my head in my hands and sighed deeply. My heart was still pounding in my chest, although the panic was fading. I thought I'd really hurt her for a second there.\n\nOk, so here's what I learned about passing out during sex.\n\nFirst of all, it happens, and it's not necessarily dangerous.\n\nThe first useful thing I saw was a thread started by a woman who often blacked out at the point of orgasm, only for a few minutes each time, but she was worried it could be causing her damage. From there I followed a link posted about this kind of problem, and what causes it.\n\nA nice poetic description talked about how sometimes the pleasure was simply too overwhelming for the brain to handle, which causes it to temporarily shut down. A more realistic explanation was that during lengthy periods of intense exertion, the woman is unable to get a full breath. After a while the brain fears it's not getting the oxygen or blood it needs and takes over, forcing the body into \"sleep mode\" so it stops doing whatever stupid thing it's doing that's causing the problem.\n\nI liked the first description better; the thought of giving Jessica so much pleasure that she couldn't handle it, that it almost literally blew her mind, really appealed to my ego. But the overall point was that something like this wasn't dangerous. From this page, and a few other sources I looked up afterwards, it seemed that some women are prone to passing out during sex frequently, but for some it had only happened once or twice. If it happens every single time a woman gets breathless then it's a problem, but not if it's just occasionally, and during intense stimulation.\n\nAnd what had just happened to Jessica had been intense. I'd never even seen porn where a woman reacted like that, real or faked. I liked the idea of my oral abilities being almost dangerously good, but I knew that it was really about her. The fact that she was able to experience such intense pleasure with my amateurish attempts at stimulation was convincing me of something I'd been suspecting ever since I'd first seen her orgasm. I remembered the first time I'd made her cum, how overwhelming it had seemed for her.\n\nJessica, the uptight, almost virginal prude that I lured to my bedroom all those months ago was turning out to be something incredible, a sexual being with a seemingly endless untapped sexual energy.\n\nAnd she was all mine.\n\nI stood up and looked over at Jessica's unconscious form. She was still bound, and the blindfold had snapped back into place when I ran to the laptop.\n\nI sat down beside her on the bed and caressed her cheek.\n\nMy cock had turned limp the instant I'd realised she passed out, but the memories of the sounds she'd made caused me to stiffen slightly again. I'd still gotten to hear her pleasure, and feel it's effects through her body. Her hips pulsing against my arms, the almost anguished cries of pleasure, the taste of her that still lingered on my tongue.\n\nI tried to ignore these vivid images and just focus on her. I just had to wait until she woke up.\n\nAfter a few minutes that felt like days, Jessica let out a small moan and turned her head. She pulled lightly against her binding, and turned her head quickly the other way. As soon as she made a move, a wide smile had split my face.\n\nShe was Ok.\n\nBut she apparently didn't know that.\n\nShe started frantically shaking her head, probably trying to dislodge whatever was blinding her, and she kept pulling against the headboard that she was tied to. She started making sounds of distress and panic, and I had to stop myself from laughing.\n\nShe clearly didn't remember where she was.\n\n\"Jessica.\" I said, my voice sounding steady and firm.\n\nShe turned to face me.\n\n\"Steven?\" she asked, her body tensing.\n\nI laughed lightly.\n\n\"Almost.\" I said.\n\n\"Sir!\" she breathed with relief, her whole body relaxing. \"Sir...what happened?\"\n\n\"What do you remember?\" I asked.\n\n\"I...You tied me down.\" she said slowly, tugging against her bindings, \"And then... you took pictures of me, and I couldn't see...\"\n\n\"That's right.\" I said soothingly, caressing her cheek, \"What happened next?\"\n\nShe leaned into my hand and smiled. Just knowing I was here had put her completely at ease. It was startling how much she trusted me.\n\n\"You put the camera away... You... touched me...everywhere,\" she said softly, \"And then you... Oh God, you... licked my pussy.\"\n\n\"It was your reward.\" I said.\n\nShe didn't respond to this, but just let out a quick breath of surprise.\n\n\"And then you passed out for a few minutes.\" I said, \"It was too much for you, I guess.\"\n\n\"Oh wow.\"she said, \"That's...Wow...\"\n\nHer body was relaxed but she slowly pressed her thighs together and twisted her hips. It seemed blacking out hadn't killed her sex drive.\n\nI leaned over her and ran my fingers up into her hair. With my other hand I still held her cheek, and I whispered into her ear.\n\n\"Did you like that, sweetheart? Did you like it when I tasted your sweet little pussy?\"\n\nShe whimpered and I felt her shiver beneath me.\n\nI reached up and untied her arms. She let them fall slowly to her sides before gently rubbing her wrists.\n\nI slipped off her blindfold and stared into her eyes. She smiled widely at me, but didn't speak. I took her face in my hands and pulled her into a deep kiss. She responded slowly, her tongue making circles around mine.\n\nI thought she was being unusually calm, but when I tried to pull away she stepped things up. She pushed hard against me and continued the kiss, threading her fingers behind my head to keep me close. Instead of pissing me off, this made me smile.\n\nThere was something weirdly cute about her doing this. She'd done it before, and to me it seemed she was trying to get around one of my rules. She couldn't kiss me directly without permission, but once I'd kissed her she wouldn't let our lips part, being as aggressive as she liked without technically disobeying.\n\nI laughed gently into her mouth, even as the sensation of being so passionately kissed caused me to stiffen fully. I pushed against her shoulder to free myself from her grip, and smiled at her look of disappointment.\n\nShe quickly leapt forward and began kissing my face, quick pecks along my jaw line that ended at my mouth. She breathed against my lips, silently begging for another kiss.\n\n\"Take it easy,\" I said, pushing her back again, \"You just passed out a few minutes ago, slow it down.\"\n\n\"I'm fine.\" she said lightly, pulling herself towards me again, \"I'm perfect.\"\n\nShe went back to kissing my cheek and neck, with her hands pressed against my chest. I turned my head and kissed her deeply, then fell back on to the bed. She let her naked body fall against mine and eagerly returned my passion.\n\n\"You taste like me.\" she said pulling back, her eyes wide with excitement, \"That's so fucking hot.\"\n\nShe began frantically licking my lips and cheeks, cleaning her pussy juices from me. She had so much energy for someone that had just been unconscious.\n\n\"That's so hot!\" she repeated, \"I can believe you did that! It felt... Oh my God, Sir... I've never felt anything like it!\"\n\nShe tried to kiss me, but I tightened my grip in her hair and pulled her back.\n\nShe let out a grunt of pain, but then smiled. She closed her eyes and pulled hard against my grip, intensifying the harsh treatment of her scalp.\n\n\"I missed this.\" she said, \"I missed you.\"\n\nI released her and she pressed the side of her face against my chest, wrapping her arms around my body.\n\n\"I missed you so much.\"she said.\n\nI laughed gently and ran my fingers through her hair. For a time we just lay together, enjoying the shared warmth of our bodies. I kissed her head and sighed contentedly. We kissed again, and she ran her hand down my body, resting against my bulge. She looked at me with sudden anticipation in her eyes.\n\n\"Take it out.\" I ordered, and she eagerly obliged.\n\nShe yanked down the waistband of my underwear and squealed with delight as my erection bounced free. She took the shaft in her slender fingers, and looked up at me.\n\n\"Did you miss this cock?\" I asked.\n\nShe nodded, biting her lip and gripping my cock with both hands. All of her anxious energy from before was suddenly gone, and I could see the powerful lust in her eyes.\n\n\"I missed your cock, Sir.\" she said sensuously. \"I missed the taste of it... and the feeling of it inside me...\"\n\nShe moved her other leg over to straddle me, and languidly slid her body against mine. She stared into my eyes as her lips got closer to mine, before moving and missing my face completely. She put her mouth against my ear, nibbling my earlobe for a few seconds before speaking in a low, purring voice.\n\n\"Which of my holes would you like to use, Sir?\"\n\nMy breath caught in my throat, and I let out a small grunt of lust. I grabbed her ass hard and pulled her downwards, pressing her pussy against my erection and trapping it against my stomach.\n\n\"Well... this brings back memories.\" she smiled, looking down.\n\nShe suddenly ground her pussy hard against my cock from base to tip, then settled in the middle.\n\n\"Mmm... I did miss this cock.\" she giggled.\n\nShe started shifting her hips back and forth, gently humping my stiff shaft.\n\n\"I was just thinking about that night.\" I said thoughtfully, tightening my grip on her ass cheeks.\n\nShe giggled again, and then moaned as I sank my fingers into her soft, yet firm flesh.\n\n\"I was so terrified that night...\" she said, closing her eyes and thrusting harder.\n\n\"Terrified?\" I asked.\n\nShe caught my eye, and smiled.\n\n\"Of me?\" I asked.\n\n\"Yes of you.\" she said, laughing, \"Of you... Of this fucking monster between your legs... Of... Of...\"\n\nShe trailed off into a low moan and increased her speed again, her sensitive body already desperate for release. My cock was dripping with her juices, and her lower lips sliding against my skin was making a deliciously erotic sound.\n\n\"Slow down.\" I said. \"Tell me more.\"\n\nShe groaned with frustration, but slowed her pace.\n\n\"Sir...\" she whimpered.\n\n\"Tell me about it.\" I repeated, \"The night of your first orgasm. The night you first said you'd be my slut.\"\n\nMaybe this wasn't exactly the right moment for a conversation, but I was curious about how she felt about that night. Also I knew that slowing down would frustrate her more than it would me. Or at least, I could handle it better.\n\nShe suddenly fell forward, her eyes stopping inches from mine, her body pressed against me.\n\n\"I was so scared.\"she said softly, but quickly, \"I kept thinking how much it would hurt when you fucked me... I was so sure you were going to, and I didn't know if I'd be able to take it. And I kept making these...these slutty noises... I didn't know why... and you kept calling me a slut... and I just... I...\"\n\nShe trailed off again, her thrusting against my cock becoming frenzied. I grabbed her roughly by the hair, but that didn't stop her. She was lost in her world of pleasure, and I knew she was already on the brink of another orgasm.\n\nI slapped her face hard and pulled her head towards me.\n\n\"Slow down!\" I growled.\n\nShe gasped, but did as I asked. She stopped completely, in fact, and stared into my eyes.\n\n\"Talk.\" I said roughly, \"Finish your story.\"\n\n\"I...I didn't understand it.\" she panted quickly, \"I didn't know why I was letting it happen, why I was letting you talk to me like that...you of all people. Why my pussy was wetter than it had ever been, or why pleasure was coursing through my body like electricity, making me moan like a whore.\"\n\nShe took my face in her hands and began to thrust her hips again.\n\n\"And then you grabbed my nipples and it felt incredible, the pain shooting through me, mixing with the pleasure and igniting something inside me.\"\n\nI loved the imagery she was using, the passion with which she spoke. As if to recreate the moment, I grabbed her nipples again, pinching them hard.\n\nShe moaned erotically, closing her eyes tight. I twisted and toyed with her nipples until she met my eye again.\n\n\"And then you made me look at you.\" she almost whispered, \"Into your eyes... and you were just so... so much...\"\n\nShe bit down hard on her lip and let out a frustrated groan.\n\n\"Sir, I need to cum.\" she gasped, \"Please...\"\n\n\"Get up.\" I ordered.\n\n\"Please, please let me-\"\n\nI jerked her hair upwards and pushed up against her chin, forcing her off my cock. She raised one leg to support herself, while I held her in place by her hair. I reached down with my other hand and held my cock upright. She looked down and saw what I wanted, and lowered herself down while I kept us lined up.\n\nHer wet pussy lips met the head of my cock, and she suddenly dropped her hips, forcing half of my shaft into her hot, wet hole, but then she stopped. She looked stunned at the sensation of being so suddenly filled.\n\nI sat up and wrapped my arms around her, pushing down against her hips to make her further impale herself on my cock. She sank down slowly letting out a strained wail, her expression awash with shock and lust, and then she suddenly smashed her head against my shoulder.\n\nI felt the last of me enter her. I slipped my hand between us and pressed my thumb against her clit. She jerked forward and the already unbelievable pressure around my cock increased. She was on the very brink of another orgasm, I could tell just by the twitching of her pussy.\n\n\"Cum for me.\" I ordered softly, flicking my thumb against the sensitive nub.\n\nShe screamed into my skin as her pussy clenched hard around my shaft, and her slender body shook and quivered with pleasure. I felt her bite down hard on my shoulder, and I wrapped my arms around her and held her tight.\n\nShe gasped once, then let out a long, low moan as her pleasure faded.\n\n\"I like it when you cum.\" I said softly.\n\n\"Yeah?\" she asked somewhat shakily, smiling.\n\n\"Your slutty cunt clings so tightly to my cock, like it's trying to milk my sperm right out of it.\"\n\nShe bit her lip and I felt her pussy shiver around my girth. She liked it when I talked like that, it seemed, crude and blunt.\n\n\"Do it again.\" I ordered, letting go of her face. \"I want to feel you cum.\"\n\nShe smiled widely.\n\n\"Yes Sir!\" she said.\n\nShe looked down and started to hesitantly shift her hips back and forth, trying to create some friction. At first she didn't really get anywhere. Her gentle gyrations were barely causing any real pleasure, although it did feel nice.\n\n\"I, uh, don't really know what I'm doing here...\" she said nervously, not meeting my eye.\n\n\"Up and down.\" I said simply, \"Use your hips and your legs.\"\n\nShe slowly raised herself up an inch or two, then slammed back down.\n\n\"Fuck...\" she whispered.\n\nShe repeated the same action a few times, seeming to enjoy the sensation of being filled each time. It felt good, but still not perfect.\n\n\"Rhythm is important, sweetheart.\" I said, gripping her ass.\n\nI guided her up and down, only a few inches but with a regular pace. She picked it up quickly and moved faster, bobbing up and down on my thick cock.\n\n\"That's it...\" I said, sighing with pleasure.\n\nIt was not nice having to drive for once, so I closed my eyes and let the pleasure fill my mind. She was so incredibly tight and wet. I'd really missed 'using this hole', as she'd put it.\n\nShe started varying the depth every now and again, going for a few long strokes followed by a lot of short, quick ones. I smirked, realising she was showing me more about how she liked to be fucked.\n\nThere was some space between our bodies that suddenly closed, and I felt her boobs press against me.\n\n\"Fffuuuck...\" she moaned, moving faster and faster.\n\nShe was really feeling it. She humped my cock desperately, impaling herself over and over on my hard shaft.\n\n\"Do it.\" I sighed, reacting to her increasing speed. \"Cum for me.\"\n\nShe practically growled with pleasure and moved even faster. She was leaning heavily on my shoulders and I supported the weight of her body. After a few seconds of frantic activity she came hard, groaning and gasping as her pussy clenched around me. Her voice came in erratic bursts of passion through her heavy breaths. It really felt incredible, the strength with which her hot, wet channel gripped my shaft, shaking and pulsing around it.\n\nShe slowed down, basking in the pleasure, but I wasn't finished.\n\nI spanked her ass hard, causing her to yelp.\n\n\"Do it again.\" I ordered simply.\n\nShe smiled tiredly, and with a soft groan started to move again. Now she moved with long, slow strokes, almost lazily moving from base to tip and back. She pressed her forehead against mine and wrapped her arms tighter around me, her strained breath tickling my lips. I kissed her hard, biting down on her lower lip until I heard what was quickly becoming one of my favourite sounds; that beautiful whimper that indicated both pleasure and pain.\n\nShe stared into my eyes as she rode me, already with a steady and perfect rhythm, at times almost leaving my cock uncovered only to begin the descent just before the last half-inch popped out.\n\nShe was only riding me for a few minutes when she started making a low, humming moan that told me she was close. She was really a very vocal lover.\n\n\"Sir...\" she whimpered.\n\n\"That's it, sweetheart.\" I said, thinking she wanted permission, \"Cum on my cock.\"\n\n\"Hurt me.\" she said quietly.\n\n\"What was that?\" I asked.\n\n\"Pull my hair.\" she gasped, her hips shaking as she rode me with ever increasing vigour. \"Hurt me... please.\"\n\nI grinned and pulled her hair hard, yanking her to the side and twisting my fist. At the same time I delivered and powerful slap to her cheek, the loud snap filling the room.\n\nShe gasped, and a few seconds later she obeyed my command, moaning out another strong orgasm. This one lasted longer than the previous one, and the powerful convulsions around my cock were even stronger, causing me to moan with pleasure.\n\nShe slowed to a stop, and was panting heavily. She wasn't used to being on top and she was tiring quickly. But I still wasn't finished.\n\n\"Again.\" I said, spanking her ass and pulling her hair.\n\nShe groaned and gritted her teeth. She raised herself up just a few inches before slowly sliding back to the base\n\n\"I can't...\" she panted, clearly exhausted. \"My hips... I can't...\"\n\nI frowned at her. She was just sitting, impaled on my cock but refusing to move any more.\n\n\"Sweetheart, you're being very inconsiderate.\" I said, forcing my voice to be smooth, despite the potent mix of frustration and pleasure I was feeling. \"You've already had... God knows how many orgasms, whereas I've yet to cum even once.\"\n\nShe whimpered as I slid my hand around her throat and twisted her hair again.\n\n\"Make me cum.\" I ordered.\n\nShe nodded quickly, shutting her eyes tight, and struggled to lift her body again. She seemed to be in a considerable amount of discomfort, but I'd gone too long, too many days without cumming inside my slut to care.\n\nShe moved shakily at first, but soon increased the pace. She put her forehead against mine again, staring into my eyes, riding my cock with long, purposeful strokes.\n\n\"Are you gonna... cum for me?\" she gasped.\n\nI didn't answer her. I'd been actively holding my orgasm back since maybe her second one, but I loved seeing her like this. I was in no hurry.\n\n\"Please...\" she moaned, \"Please cum for me. Cum inside me, in... in my tight pussy.\"",
        "I smirked at her attempts at dirty talk, knowing that it embarrassed her even now.\n\n\"You want me to cum?\" I asked, \"You want me to fill up that slutty cunt with my sperm?\"\n\n\"Please!\" she moaned, her hips faltering in their now frantic pace.\n\nShe kissed me suddenly, and threw her arms around me. This surprised me, and the shock caused my tight control to slip for just a second. But that was all it took. My orgasm was suddenly upon me, and it was a big one.\n\nI practically roared into her mouth as the pleasure overwhelmed me, and she echoed both my voice and my pleasure as yet another orgasm assaulted her. I clung desperately to her as my cock fired spurt after spurt of my seed inside her. I'd so missed this, the intense sensation of cumming inside an orgasming pussy.\n\nWe came down from our individual highs together, breathing heavily in unison. We rested like this for a few seconds, my cock still hard inside her wet channel, and our arms holding each other tight. She sat up, lifting herself all the way off of my shaft, but then fell forward, having lost the strength in her legs and hips.\n\nI supported her trembling body until she lay down on my thighs, her legs off to the side. She buried her face into the crook my neck, kissing my skin.\n\nI pointed her face towards mine and kissed her, slow and deep. We pulled away from each other, and she smiled again. It was a difficult expression to interpret, a subtle mix of adoration and pain, a generous amount of embarrassment too.\n\n\"Are you Ok?\" I asked.\n\n\"I'm... yeah, I'm good.\" she said.\n\nI pulled her close to me and lay down.\n\n\"That was definitely worth waiting for.\" she sighed, relaxing against me, \"Although I probably won't be walking straight for a while.\"\n\nI ran my fingers into her hair, brushing it away from her face. I pushed my lips to hers again and we kissed softly. I thought she would want to relax after that, but I soon felt her slender fingers wrapping around my cock.\n\n\"Of course you're still hard.\" she sighed jokingly.\n\nShe ran her palm along my length.\n\n\"And we made such a mess.\" she said.\n\nWell that was true. My shaft was coated in a layer of her feminine juices, not to mention a lot of my own sperm.\n\n\"I think you should clean it up.\" I said.\n\n\"You know, I was just thinking that.\" she replied.\n\nShe lifted her body away from mine and shifted her face down to my cock. Her eyes stayed locked on to mine as she pressed her tongue to the base of my shaft and slowly licked upwards towards the head, just like I taught her. I let out a satisfied sigh, lay back and closed my eyes, letting her pleasure me however she wanted.\n\nShe was thorough as she cleaned my cock, rapidly replacing the layer of our juices with her saliva. She'd really missed this, it seemed. She practically attacked my cock with her tongue. I let myself growl with pleasure. I'd missed this too, the heat and energy of her oral attention.\n\nWhen she was satisfied she'd followed my command, she took the head of my cock into her mouth and back towards her throat. She teased me for a while, bringing the head towards the entrance to her throat without taking it deep, like I knew she could.\n\nAfter a few longs minutes filled with frantic licking, I realised what she was doing. I looked down at her to see her staring up at me. When our eyes met she closed hers and sucked in her cheeks, increasing the pressure around my dick, but still not taking it any deeper.\n\nShe was waiting for me to take control.\n\nI grabbed her hair and pulled her off of me. She sat back on her knees and waited silently. I got on to my knees in front of her and caressed the back of her head.\n\n\"You're doing well.\" I said, pushing her gently downward. She followed my guidance and lay down with her face in front of my cock.\n\n\"But, you know...\" I continued, \"I think if we really want clean this mess, we have to get a little deeper.\"\n\nI pressed my cock head to her lips and she opened her mouth to accept it.\n\n\"You don't mind if I use your throat, do you?\" I asked casually, forcing it deeper. She relaxed and I pushed harder, my cock slowly filling her until my balls were resting against her chin. She flexed her throat around my shaft, gagging slightly.\n\n\"Mmm... fuck. Such a tight little throat.\" I grunted.\n\nI pulled out half way out of her slick throat, and then thrust back in. I groaned out loud and started to thrust in and out with a steady rhythm. I honestly didn't know which I preferred, her pussy or her throat. Regular sex was incredible, and somehow getting better each time. But looking down at her wide, green eyes staring up at me, drool covering her lips and chin... this was fucking addictive.\n\nI grabbed her hair with one hand and reached down to lightly grip her throat with the other. With my hand I could actually feel my cock causing a bulge in her throat. She moaned with lust and shut her eyes tight.\n\n\"No, look at me.\" I ordered.\n\nShe obeyed, her eyes locking with mine again. She was tearing up at the discomfort. God, she was so gorgeous, so perfectly submissive.\n\n\"Look at me while I use your throat.\" I growled. \"I know you love this.\"\n\nShe moaned at my words, and I felt the vibrations along my cock. I pounded harder into her mouth, enjoying how her tongue would curl around the shaft and head every time I pulled out. I could feel my second orgasm approaching already, and I knew there was no reason to hold it back, nothing to wait for.\n\nBut still, I made myself slow down. I could control myself even now. I had to know that.\n\n\"Throat or tongue?\" I growled.\n\nI slid my cock out of her mouth and let it bounce into the air, flinging a line of her own spit across her face.\n\n\"You choose. Do you want me to cum in your throat, or do you want to taste it?\" I asked, stroking her face with my thick shaft, further covering her cheek with her saliva.\n\n\"My tongue!\" she moaned raggedly, \"I want to taste it!\"\n\nI laughed darkly, and forced my cock back into her mouth.\n\n\"Of course you do.\" I taunted, \"You love my cum, don't you?\"\n\nShe moaned as I resumed my frantic pace, driving myself back to the brink of orgasm in a few short minutes. As she requested, when it was time I pulled out until just my cock head was in her mouth, but then I got a better idea. I pulled out completely, with only the tip resting against her lips.\n\n\"Use your hands.\" I ordered.\n\nShe quickly shifted her weight off of her arms so that she could grasp my shaft. She jerked my cock as her tongue poked out and licked the sensitive tip, coaxing me towards ejaculation.\n\n\"Don't... swallow.\" I gasped, \"Hold it... in your mouth.\"\n\nShe nodded, wrapping her lips around the head, and I came hard. I stared down at her, the pleasure and feeling of Dominance driving every thought from my head. My second orgasm felt even bigger than the first one, long powerful spurts each accompanied by a wave of mind-numbing pleasure.\n\nMy withering cock slipped from between her lips, and I sighed with satisfaction. I thought I'd seen her swallow once or twice while I was cumming, but now she was looking up at me with her cheeks bulged out.\n\nI laughed. It was a big load, but not that big. Her puffed out cheeks were filled with mostly air.\n\n\"Open.\" I ordered.\n\nShe looked intensely embarrassed but obeyed, holding her mouth open to let me see all of my thick cum pooled on her tongue. There was more than I thought. I gripped her face, pushing in on her tight cheeks. I put my other finger in her mouth and pressed it against her tongue, sliding the sperm around on it.\n\n\"You like that, don't you.\" I stated, pinching her tongue with my thumb and finger. \"You like how it tastes.\"\n\nShe gave a quick, hesitant nod.\n\n\"What do you say when someone gives you something you like?\" I asked.\n\nShe closed her eyes tight, hesitating.\n\n\"Jessica.\" I said darkly, \"What do you say?\"\n\nShe made a barely audible murmur in the back of her throat.\n\n\"What was that?\" I asked.\n\nShe let out a defeated whimper, and tried to speak with her mouth open and with me still holding her tongue.\n\n\"Fank ooo.\" she said, her tongue twitching in my grip.\n\nI sighed as a rush of Dominant satisfaction passed through me.\n\nI smiled.\n\n\"You're welcome, slut.\" I said, removing my finger. \"Now swallow it.\"\n\nShe closed her mouth and swallowed my sperm with a loud gulp. She kept her eyes closed for a few seconds. I rested back on my feet, waiting for her to glare up at me with those big, green, vulnerable eyes. I was ready for her to \"come down\", to desperately cling to me after the intense high of humiliation and submission.\n\nBut that's not what happened.\n\nInstead, she opened her eyes, and smiled. She leaned forward and kissed my cock again, gently taking it in her hand.\n\n\"Can I have more?\" she asked, \"Can your slut please have more of your delicious cum, Sir?\"\n\nI stared into her wide eyes and my heart pounded in my chest. My tired, sensitive cock was trying to rise again. I didn't answer at first, but kept my expression neutral.\n\n\"Please Sir?\" she begged, \"Please can I suck your cock again?\"\n\nShe kissed the shaft again, and again. I'd expected this to be too much for her, but I was wrong. It looked like I'd be able to push her even farther than before.\n\n\"Go ahead.\" I sighed, as if this was an inconvenience to me.\n\nI slid my legs out from under me and lay down completely, my head resting on my arms. My urge to dominate had calmed somewhat, so I figured I could relax and enjoy this.\n\nShe gripped my cock with both hands and started to bring it back to life.\n\nHer attitude was different than the first time. She moved slowly, deliberately, letting her tongue explore and massage every inch of my flesh, licking and probing, occasionally taking my mostly limp shaft into her mouth for a few gentle sucks.\n\nIt was taking a while for me to get hard. After all, it was the third one that night. After maybe ten minutes I still wasn't completely erect. Then, she gripped my cock at the base and tapped it against her cheek. She let out an excited sigh and did it a few more times, bouncing my rubbery shaft off of her cheeks and lips.\n\nMy mind was filled with an image of brutally slapping her with my cock, using the weight and size of it to hurt her. Even at my size it wasn't like I'd really be able to hurt her with it, but just the idea of using the cock that she loved to punish her like that was enough to bring me back to full hardness. I'll have to try that some time, I thought.\n\nShe used her hands, lips, tongue, and cheeks to gently massage and caress my once again rock hard cock. At any one point there was at least two different sensations happening simultaneously, rubbing or licking or lightly twisting with her dexterous fingers. I let myself make whatever low growls or hums I wanted to, feeling no need to hide my pleasure. I felt myself reach a new level of relaxation, an almost sleep-like trance where all I could feel was the comfort of my body on the bed and the constant, yet wonderfully unhurried worship of my cock.\n\nI don't how long this went on before she finally took me into her throat, but it was a surprising change. The ceaseless variations of pleasurable touches was replaced with one intense surrounding pressure.\n\nShe was really getting incredible at this. The first time she sucked my cock she could barely fit a few inches in without gagging, and didn't have the first idea about what would feel good other than just touching it. She'd learned a lot, and seemed to be learning still. She slid me out of her throat and immediately began swirling her tongue around the head, while at the same time bobbing up and down maybe two or so inches each time.\n\nIt caused me to groan out loud, which she echoed as if feeling my pleasure with me. I'd never instructed her to do most of this, and I wondered where she'd learned it all. If I hadn't already ejaculated twice in the past hour, I'd likely have reached my peak long before now. She was so smooth in her motions, almost graceful as she took me out of her mouth, only for her hand to immediately grip tightly around the head and start jerking it. From one second to the next I was still receiving some sort of pleasure, and I loved her seamless transitions from motion to motion.\n\n\"I realised a few things while I was away.\" she quietly, speaking for the first time in what felt like hours.\n\n\"Oh?\" I said, trying to keep my voice from shaking.\n\n\"One thing... was that I've been neglecting these.\" she said, her hand lightly caressing my balls.\n\nI grunted with surprise and my body tensed up. She giggled and took my scrotum in her hand, squeezing ever-so-slightly, just enough to let me really feel the heat and softness of her skin.\n\n\"I mean, these have been so good to me.\" she continued, her voice low and erotic. \"Always so full of that delicious cum I love so much.\"\n\nShe began to flex her fingers, gently rotating my heavy orbs. Then, again in one seamless motion, she took her hand away only for it to be immediately replaced by her tongue. Her hand went to join her other one on my shaft, where she hadn't stopped slowly but firmly massaging me with a grip so strong it might have hurt a thinner cock, but felt incredible to me.\n\nShe licked all along the sensitive skin of my balls, and the completely new sensation was incredible. She slipped one heavy testicle into her mouth and sucked on it hard before releasing it with a loud pop, then started to circle the other other with her tongue.\n\nI couldn't help but look down at her. My cock was longer than her face, and it almost looked like she was clinging to the shaft for support while she explored my sack. She noticed me looking, and smiled shyly with her tongue still poking out. Blushing, she gave me a long, slow lick from base to tip, moving her hands down to cup my balls with one and grip the base tight with the other. She took the head into her mouth, and sucked hard.\n\nI lay back and let my mind wander. My third erection in a row, on the rare occasion I could get one, usually lasted longer than the other two combined. Of course, that was always when I was alone, and she was doing things I'd never be able to replicate by myself. As it was I knew that I'd be able to climax again in just a few minutes, but I didn't want to.\n\nI tensed my lower muscles and felt the need abate somewhat. This was something I'd always been able to do, and that I'd been practising even more since getting involved with Jessica. I couldn't hold off forever, like she'd proven earlier, but if she kept the same pace I'd definitely be able to last. And she didn't seem to be in any hurry.\n\nThe long minutes drifted into one another as she continued her beautifully slow worship, sucking, licking, taking me deep into her throat, and always massaging me a hundred different ways with her soft, slender fingers. I honestly don't know how long this went on for, only that it was probably the longest she'd ever pleasured me, with her mouth or her pussy.\n\nBut all things come to an end, and so eventually I had to allow myself release.\n\n\"Soon, sweetheart.\", was all I said, my voice sounding deep and incredibly relaxed.\n\nShe increased the pace only slightly, and kept the tip right against her tongue as her hands gripped harder. A minute or so later I let out a satisfied sigh, and allowed the wave of my pleasure to slowly crest over me. The head was still pressed against her tongue, which was an interesting sensation. I felt her roll her tongue around the tip after I'd finished, cleaning every drop before she swallowed.\n\n\"Good girl.\" I said lazily.\n\nThere's really nothing like a long, slow blow-job to just take every ounce of anxiety and stress out of your body.\n\n\"Thank you, Sir.\" she said, still holding my cock.\n\nI considered ordering her to lie down next to me so we could sleep, but she didn't seem to be in any hurry to join me. She kissed my cock a few times, almost tentatively, as if she wasn't sure she was allowed to keep going.\n\n\"Easy...\" I said softly, \"It's really sensitive right now.\"\n\n\"Should I stop?\" she asked.\n\nIt was very sensitive, but I didn't actually mind the contact.\n\n\"No.\" I said.\n\nI felt her lips bend into a smile against my cock, which made me smile too.\n\nShe held my soft, wet cock in her hand, just feeling it's weight. She pressed her lips to the base, where it met my scrotum, and kissed it before licking it firmly. I let out a sharp breath of pleasure. In response, she licked the area frantically then suddenly nibbled on it, causing me to jerk my hips forward in shock. She giggled and licked the sensitive spot again.\n\n\"I never get to see it when it's completely soft.\" she said thoughtfully, kissing along my shaft. \"Not for long, anyway. It's still so thick, and so heavy.\"\n\nShe took the shaft in both of her hands, one above the other, and bounced it up and down as if weighing it.\n\n\"How did you ever keep this a secret?\" she asked, gently massaging my well-used cock. \"I mean, don't guys talk about this stuff? There's usually all sorts of rumours floating around about who's big or small, but I've never even heard of anything as big as this.\"\n\n\"Separate stalls... in the locker room.\" I said with effort, trying to focus on the heat and softness of her fingers.\n\n\"Oh, that makes sense.\" she said, before enveloping the head in her lips again.\n\nI didn't know if she was even still trying to pleasure me any more, or whether she was just satisfying her obsession.\n\n\"I mean, I know I've only seen one other penis up close, but it was like...\" she gently cupped my balls with one hand and started to caress them. \"I don't know, like an infant version of yours. Like you and Mike are a different species or something.\" she said.\n\nI sighed, and then gasped when I felt my exhausted cock twitch.\n\n\"Oh my God!\" she said quickly, moving her other hand back to my shaft. \"Was that... are you...?\"\n\nShe sat back and looked down at my cock, then up at me.\n\n\"Four times?\" she asked, grinning, \"Are you going to get hard four times in a row? Is that even possible?\"\n\nShe loosened her grip on my shaft and began twisting her wrists, creating a light circular pressure with her fingers.\n\n\"Lissie was telling us all about this guy she was with a little while ago.\" she said, her voice soft, \"She was so impressed that he could get hard again right after cumming.\"\n\nShe suddenly took my mostly limp cock into her mouth, and into her throat. I couldn't tell if I'd be able to get it up again, and because of the sensitivity there was almost as much exhausted pain as there was pleasure at this point, but she seemed determined to coax me back to life.\n\n\"Two whole times!\", she exclaimed after my cock slid from her mouth, \"And everyone seemed so impressed! I had to stop myself from telling them I know a guy who doesn't even get soft after the first one!\"\n\nShe kept up her work, licking and sucking and stroking me, and I felt myself stiffen ever so slightly more.\n\nShe laughed lightly, eyes fixed on my cock.\n\n\"I thought it was so weird how you didn't go soft the first time you used my mouth, that first night.\" she said, \"Mike could never even dream of getting hard a second time. One time after a 30 second hand job, he spent two minutes jerking the little thing, trying to get it up again. I didn't really think anything of it at the time... but it was pretty pathetic now that I think about it. You know, in comparison.\"\n\nI felt my cock twitch again at her words, and she noticed.\n\n\"Oh?\" she said looking up at me, \"Did you like that? Did you...did you like hearing about how much of a man you are compared to Mike?\"\n\nShe kissed my cock head, and I felt myself stiffen further. She let out an excited yelp.\n\n\"Do you want me to tell you how small he is again, Sir?\" she said excitedly, as if she'd discovered some great secret. \"About how your limp cock is still twice the size of his hard one?\"",
        "There was something about being compared to him like this that turned me on. It was such an obvious and direct measurement of masculinity, of superiority. I was actually embarrassed at the intense effect it was having on me, and somehow I knew if she kept it up I'd be hard soon.\n\nAnd apparently so did she.\n\n\"You're so fucking huge, Sir, so much bigger and better than that pathetic little faggot.\" she said.\n\nShe was getting more and more excited too.\n\n\"Even these!\" she said, cupping my sack again, \"You could fit his whole sack into either one of your balls. Compared to you, it's like he's not even a man. He's like a little boy, with a sad little boy-dick.\"\n\nI grunted with lust as my well used cock filled once again with blood, and jutted out from my body straight and hard.\n\n\"Oh...fuck.\" I grunted.\n\nShe wrapped her both hands around my shaft and licked the remaining few inches that were uncovered, staring into my eyes.\n\nI'd never been able to get this hard so many times alone. Three had always been my limit, and even that was rare. My cock looked an angry shade of red, and the thick veins that kept it alive seemed to be even more prominent. I imagined I could almost see them visibly pumping with blood in time with my pounding heart.\n\nI was sore, and tired, but I was hard.\n\nIn an instant the wonderful tranquillity was gone, replaced with a surprising and powerful lust. My cock needed to be pleasured, right that second.\n\nI rose up to my knees and forced my cock into her mouth, barely pausing to thrust downwards against her tongue before carrying on into her waiting throat.\n\n\"Fuck.\" was all I could say as the pleasure filled my mind. It was so intense, I was so sensitive. But it wasn't enough.\n\nI started to fuck her throat fast and hard, harder than I ever had. She began to moan with lust, but I barely heard her. I just pumped my hard shaft into her over and over, losing myself in the mindless pursuit of my pleasure. I could feel her saliva coating my balls, and where I was holding her face I could feel more of her tears of discomfort.\n\nI closed my eyes and grimaced as I felt an unusual frustration. I grabbed her hair hard and began to really pound into her, grunting with exertion at every thrust. My balls were colliding with her chin so rapidly that it almost hurt, but it still wasn't enough.\n\nI needed her pussy.\n\nI quickly pulled out of her mouth, causing her to inhale too sharply and begin to cough. With the grip I still had on her hair, I dragged her forwards and pressed her face against the bed, maintaining my grip as I lined my cock up with her pussy, and plunged into her.\n\nShe felt so incredible, so perfectly tight. I began to fuck her as hard as I could from behind, needing the pleasure her body gave. She let out a cry of pleasure, or perhaps pain, but I ignored her. Nothing mattered in that moment except my own satisfaction. I leaned forward and raised myself up, using the weight of my body to slam my full length into her as speedily as I could.\n\n\"Sir!\" she suddenly, \"I'm...ahhhnnnn... I'm going to...!\"\n\nI cut her off by clamping my hand over her mouth. She was so loud.\n\n\"Cum if you want.\" I grunted.\n\nThose were all the words I could spare. It felt like my sanity was slipping away. I'd never needed pleasure like this before, never been so completely overwhelmed by my lust. I doubt a heart attack would have stopped me right then.\n\nJessica let out a frantic moan, and I could feel her orgasm through her convulsing pussy.\n\n\"Ung, that's good.\" I grunted, enjoying the increase in sensation.\n\nI smirked, realising that the uncaring act I'd played out earlier with her was now real; her pleasure only mattered to me because of the effect it had on my cock.\n\nI impulsively slapped her ass with my free hand, and it made her pussy twitch. I seized this opportunity for more pleasure and rained blows down against her ass, spanking her brutally hard over and over again, ignoring the pain in my hand. This caused another orgasm to build up inside her and quickly explode outwards, the extra pain making her pleasure so intense that I could actually feel her pussy juices squirting out against my legs.\n\nShe seemed to be having a lot more fun than I was.\n\n\"Fuck this.\" I grunted, sliding my cock from her shivering pussy.\n\nI threw her from her knees on to her side, then shoved her legs up against her chest, putting her in a fetal position and exposing her dripping slit. I thrust into her again, revelling in how tight the pressure of her body made her pussy feel. It was almost choking the blood off from the base of my cock.\n\nI fucked her like this for God knows how long, feeling like I was forcing my way into every single inch of her pussy over, and over, and over. Her orgasms continued, but I barely noticed any more. To me they were just momentary increases in pressure accompanied by frantic whimpers and moans against my palm. I was still holding her mouth, but the strength of my grip was now in my other hand, twisted in her hair.\n\nI gritted my teeth and let out a grunt of frustration. This was maddening. The pleasure was so incredibly intense, but it was never enough. No matter how hard I used her my orgasm was still just out of reach. I released her hair and pushed down on her hip, using my weight to try and make her pussy even tighter. I wasn't aware of any huge difference, but I kept it up.\n\nSuddenly I was aware of us both in a way I'd never felt before. It was like a complete clarity of thought. There was no doubt in my mind, no other thought in that second except for the absolute certainty that I owned her. Her body was simply mine, her tight, convulsing pussy was nothing more than a wet hole which only existed to pleasure me.\n\nIt was the absolute peak of Dominance, the total knowledge of how completely and entirely she belonged to me.\n\nAnd then I came.\n\nIt was like nothing I'd ever felt. The pleasure erupted forcefully, numbing my mind and stopping my breath. It burned through me like fire, leaving an aching glow in its wake. I continued to thrust long after my orgasm had started, and quite a while after I'd finished, by cock stubbornly refusing to surrender its life.\n\nAnd then, like flicking a switch, everything faded. I collapsed on top of her, utterly exhausted.\n\nI blinked a few times, laid out on her body, not entirely sure if I'd been conscious this whole time. I'd finally had my release, and it was like waking up from a trance. I slowly shifted back onto my knees and tried to get a grasp of my situation. The emotion had vanished as suddenly as it had come, leaving only cold, tired logic behind.\n\nI was panting, I realised. Almost hyperventilating, in fact. My whole torso was shaking with every breath. I hadn't been this physically exhausted since... I couldn't even remember. Vague images of a particularly brutal gym class as a kid sprang to mind, although the details evaded me. I ran my fingers through my hair, realising that I was sweating too. I was drenched with my own sweat and barely able to breath.\n\nIt goes without saying that my cock was engulfed in a constant, dull ache, and was hanging limp and utterly lifeless.\n\nI looked at Jessica. She was in a similar state to me, seeming completely exhausted, her hair a complete mess and her body covered in a light sheen of sweat.\n\n\"Jessica.\" I croaked.\n\nI cleared my throat and reached out to her.\n\n\"Jessica.\" I said, louder.\n\nI touched her shoulder and she turned towards me. She stared at me with glazed, unfocused eyes. I knew that look.\n\nI sank forwards, letting myself collapse beside her. She pressed her head against my chest and inhaled shakily through her mouth, not saying a word.\n\nShe was in a trance of her own. Using only my cock I'd made her submit to me, helped her find that state of mind that she craved, driving every worried thought and stress from her head and replacing it with pure physical sensation.\n\nFor a while we just lay there, breathing heavily and trying to recover. The air was thick with the smell of sex, and I found it oddly pleasing. The smell of her sweat, of her hair, of her womanhood. It reminded me of her in a very visceral way. I pressed my nose against her head and inhaled deeply. I wrapped my arms around her and pulled her tight against me, gently running my fingers into her hair.\n\nI felt myself drifting off when she suddenly let out a sob, and I realised she was coming down from her submissive high. She started to cry, and all I could think to do was hold her. I comforted her, after being the one to hurt her in the first place, the contrast of these actions still confusing me on some level.\n\n\"Good girl.\" I whispered, kissing her head.\n\nHer breathing slowly settled and I felt her relax completely against my body. I closed my eyes and just held her. Her breathing was laboured and she'd still sob occasionally, but I knew she'd be asleep soon. She always got tired after being dominated.\n\nUsing the last dregs of my conscious effort, I leaned over and set my alarm for one hour away, flicked off my lamp, and fell into a deep and restful sleep.\n\n==\n\nI blinked, and suddenly the harsh blare of my alarm was waking me an hour later.\n\nI quickly reached over Jessica to shut it off, realising we'd drifted apart in our sleep, and now she had her back to me.\n\nI lay back and closed my eyes, then forced myself to open them again, yawning loudly. My thoughts were slow and wandering, as if I was still dreaming. It was so tempting just to ignore everything and keep sleeping. I sighed and sat up, struggling back to full consciousness. Moving made me realise that my cock still had that strange, tired pain. I hoped I hadn't accidentally broken it, or something.\n\nJessica had woken up too, and had turned to face me.\n\n\"Hey.\" I said.\n\n\"Hey.\" she said quietly.\n\nShe was just watching me.\n\n\"Are you... alright?\" I asked, rubbing my eyes.\n\nShe nodded, but her expression was still serious. She had turned towards me, but seemed to shrink away.\n\n\"Come here.\" I said impulsively.\n\nI reached out to her shoulder and guided her into my arms. I'd forgotten for a second that I'd accidentally managed to Dominate her, losing control of myself in the process.\n\n\"Do you feel ok?\" I asked, as she let her body rest against mine. \"I was... pretty hard on you.\"\n\n\"Pretty hard on me.\" she echoed, smiling.\n\nWe both laughed quietly at her immature pun.\n\n\"I'm fine.\" she answered. \"I mean, I'm kind of thirsty... and my pussy feels like a train drove through it, but apart from that...\"\n\nI laughed again. Her smile faded into a look of awe.\n\n\"I've never seen you like that.\" she said quietly.\n\n\"I've never felt like that.\" I admitted. \"That...uh, that fourth one...\"\n\nI remembered the wild, animal ferocity I'd attacked her with, just pinning her and using her body to abate my lust, the mind-numbing level of Dominance I'd managed to reach.\n\n\"Jesus...\" I swore quietly, amazed at how intense it had felt.\n\n\"Yeah it was... pretty incredible...\" she sighed, a wistful smile on her face.\n\nI couldn't believe she was smiling. Thinking back, I realised how dangerous that had been. I'd covered her mouth and pinned her down. If she'd wanted to stop, she had no way of telling me. Would I even have noticed if she'd tried to struggle? I doubted it. I'd have to be more careful with that in future. I'd never expected to come close to losing myself, but now that I knew it was a possibility, I'd be ready for it.\n\nI had to be able to control myself at all times. Despite how my complicated feelings for Jessica, I would never do something to her against her will. Even the most brutal and violent of our sessions had come with her consent, and they always would. Except for that one time with the belt...\n\nI remembered the first time I truly lost control with her and sighed, feeling the shame wash over me. I really had to get my shit together, this wouldn't work otherwise. I couldn't help but think I'd gotten incredibly lucky. If she'd been anyone else, some other woman, she may have wanted to stop but been unable to. She might have ended up a victim.\n\nBut not Jessica. Lucky for the both of us.\n\n\"I'm sorry for crying.\" Jessica said, derailing my train of thought. \"It's stupid, it just feels kind of... overwhelming sometimes.\"\n\nJesus. I'm worried about almost raping her, and she's sorry that she cried about it?\n\n\"It's alright.\" I said lightly, stroking her hair.\n\nShe sighed with frustration.\n\n\"It's not alright, it's stupid.\" she said, \"I'm 18 years old and I can't even have sex without blubbering all over myself and... clinging to you like a child. It's pathetic and-\"\n\n\"Calm down.\" I interrupted sternly.\n\nMy sudden gravity startled her. She looked so vulnerable.\n\n\"Look, sex can be... emotional.\" I explained gently, \"Especially sex like that. Afterwards, it's understandable if you need to... release some of that emotion. And it's... ok.\"\n\nI wasn't explaining this very well.\n\n\"It's just... ok.\" I repeated, my voice more firm, \"Given everything I do to you, I don't mind cuddling with you afterwards. Just cry if you need to, in future. Don't worry about it.\"\n\n\"Thanks.\" she almost whispered.\n\nShe went quiet for a few seconds.\n\n\"I still can't believe you licked my pussy.\" she said, as if she'd just remembered it.\n\nI laughed gently. She rested her head against my chest and I started to stroke her hair again. I felt the pull of sleep sapping away my concentration.\n\n\"Hey... can we talk?\" she asked.\n\n\"About what?\" I sighed.\n\n\"A few things, actually.\" she said nervously, \"I thought about a lot of things while I was away... well, actually I thought about you a lot while I was away...and I sort of... realised a few things.\"\n\n\"Like that I might like to have my balls licked?\" I asked, remembering what she'd said before she tried it out.\n\nShe laughed lightly.\n\n\"Yeah, that was one of the things.\" she said, \"But there were a few things that I... I mean, it's kind of hard to... to verbalize... and I guess...\"\n\n\"Just talk.\" I said sternly. It was getting harder to resist sleep, and I didn't have a problem with listening to her, but I wouldn't sit and endure her dancing around it. \"Just say what you want to say.\"\n\n\"Ok... well, one thing I realised is that I really like calling you 'Sir'.\" she said, \"I know it's weird, but it just feels right, you know? Like, that's how I think of you now. When I'm thinking about you, it's like... 'I wonder what Sir's doing right now.' or, 'I wonder if Sir would like to see me in this dress.' It just feels right...\"\n\nI didn't respond to this, although it was good to hear.\n\n\"And I like how you smell.\" she said, kissing my chest lightly, \"You smell like... well, like sweat, but it reminds me of sex. You smell like fucking. Is that weird?\"\n\nThat made me smile, because I remembered that I'd been thinking much the same thing about her right before I fell asleep.\n\n\"S'not that weird.\" I said, stifling another yawn. \"What else?\"\n\nI was curious about a lot of this stuff, about how our relationship was affecting her. She seemed to mostly happy, but I couldn't really be sure. Not that her happiness had ever been my first priority.\n\n\"Uh, I think there was a few more things. Let me think.\" she said, her tone more serious.\n\nI gave her a second, trying not to fall asleep. I was so relaxed, so comfortable.\n\n\"I like it when you call me sweetheart.\" she said, tracing circles against my chest with her fingertip, \"I mean, I'm pretty sure you're being condescending most of the time, but I still like it.\"\n\nI just kept stroking her hair with a gentle rhythm. It was so hard to stay awake at this point, and her hair was so soft and warm. I wanted to just drift off again.\n\nBut there was something in her voice that I didn't like. This was going somewhere, I felt. One of her little revelations wasn't going to be something I'd want to hear. Or maybe something she didn't want to say.\n\nI didn't know where the knowledge came from, but I was suddenly sure of it. She was hiding something.\n\n\"What else?\" I said.\n\n\"Um...I like when you...when you pet my hair like this.\" she said nervously, \"But I also like it when you try to yank it out of my scalp, so...\"\n\nI stopped petting her. That sounded like something she'd just thought of on the spot. She was avoiding something, and I didn't like it.\n\n\"What else?\" I said, looking down at her.\n\nShe avoided my eye.\n\n\"Look, I gave you a hickey.\" she said, smiling.\n\nI looked down at my chest, near my collar bone, and found that she had.\n\n\"Oh yeah,\" I said, rubbing my finger along the mark, \"You bit me there when you came.\"\n\n\"Sorry.\" she said, but her wide grin made me doubt that she meant it.\n\nI smiled at her, and for a small moment everything was good.\n\nBut then her expression shifted, and she looked away again.\n\n\"What is it?\" I asked automatically, immediately uncertain if I even wanted to know.\n\n\"Nothing.\" she said, forcing a smile.\n\nI sighed. I didn't even know what I wanted any more. Did I want her to share herself with me, or just to shut up and deal with it on her own? I frowned, wishing yet again that we didn't have the history that we had, wishing that things were simpler.\n\nBut now that I'd seen that expression, I couldn't just ignore it.\n\n\"Was that a lie?\" I asked.\n\nShe looked shocked and opened her mouth to protest, but after a few seconds closed it and looked down sadly.\n\n\"Yeah.\" she said.\n\nShe rested her cheek against my chest, not looking at me. I gave her a few seconds of silence. We both knew that it was coming, whatever it was.\n\n\"Say it.\" I ordered eventually.\n\n\"Do you still hate me?\" she asked quickly.\n\nShe didn't sound angry when she asked this. She didn't sound accusing either, or offended.\n\nShe sounded tired.\n\nAnd I immediately knew the answer. Despite everything we'd been through in the past few months... despite everything... I still couldn't let go of all that had happened before. I found my mind wandering to a few key incidences, things I'd tried hard to forget.\n\nThings she'd done that had gone beyond mockery and taunting..\n\nAnd the one time even she knew that she'd crossed the line, when her senseless cruelty reached its peak.\n\nHow can you just let things like that go? Even if it meant losing what we had now, whatever that was, how could I just forget?\n\nSo, did I still hate her? Honestly?\n\n\"Yeah.\" I said.\n\nShe didn't react at first. I think she knew it was coming.\n\n\"Ok.\" she said in a small, broken voice. \"I can live with that, I think. I don't need you to care about me.\"\n\nI had no response to this. I wasn't expecting it.\n\n\"I always tell you that I love you... \" she said, \"And I only keep saying it because I keep finding new reasons for it to be true... but you've never said it back. It used to bother me, but when I was away I realised that I don't need you to say it back. I don't need you to love me. As long as I'm... as long as I'm yours.\"\n\nShe slid her arms down my sides and lifted herself up. She leaned closer to me, and lowered her voice even more.\n\n\"And I don't care what other girls you sleep with... or if you want to date Becky, or anyone else. I don't care if you want to get a real girlfriend and go on actual dates.\" she said, her voice getting heavy with emotion. \"Because you don't belong to me... I belong to you. And as long as that's still true, then everything else is just... inconsequential.\"\n\nShe bit her lip, then leaned forward to kiss me, but when she got close I gripped her jaw and held her in place.\n\n\"Do you really mean that?\" I asked.\n\nShe tried to nod, but couldn't move her head.",
        "\"Yes.\" she said. \"Yes Sir.\"\n\nI frowned. I didn't even know what to think about this. This should have made me happy, but it sounded like she was giving up. Giving up on the idea that I would ever make her my girlfriend, that I'd ever treat her as an equal. She was submitting to me once again, but it sounded like it was breaking her heart.\n\nShe pulled away, and lay down against me again.\n\n\"I know it's...ugh, it's pathetic, but it's how I feel.\" she said, equal parts sadness and self-loathing. \"This doesn't have to be anything more than... whatever it is. I don't blame you for feeling like that. We've never talked about it, but we both know I more than deserve it. I can't expect you to forgive me.\"\n\nThis should have been music to my ears, but I couldn't handle any more of this, of her shame and self-hatred. I had no power to change how I felt about her, but I still wanted to help. For some stupid, nonsensical reason, I didn't want the woman I hated to hate herself too.\n\n\"It's not pathetic.\" I said.\n\nShe laughed disdainfully.\n\n\"No, it kinda is. I'm just telling a guy that I don't care if he loves me or not, and that I just want to keep having sex with him.\" she said, as if explaining it to a child, \"I'm a slut.\"\n\nThe derision in her voice when she said the word \"slut\" surprised me.\n\n\"That's not real though. You only think that because of... you know, cultural stuff.\" I said.\n\n\"What?\" she asked.\n\nI frowned at my choice of words, and tried to martial my weary thoughts into something more coherent.\n\n\"Look... we live in a culture that tells women that love is the most important thing in the world. The idea is that men put up with romance in exchange for sex, and that women do the opposite.\" I said, \"You, as a woman, are taught that actually wanting sex is wrong, and shameful, yet it's perfectly fine for me to want it because I'm a man.\"\n\n\"Well, yeah.\" she said dismissively, \"That's the double standard.\"\n\nI sighed and sat up, trying to delay my need for sleep. She moved with me until she was sitting across my lap. I pulled the blanket around us and settled in.\n\n\"Exactly.\" I said, \"It's a double standard. The problem is that for some reason you still believe it.\"\n\nShe cocked her head at me, seeming genuinely curious.\n\n\"What do you mean?\"\n\n\"You don't have to let other people tell you what to feel.\" I said, \"If you recognise that the shame you're feeling is nothing more than the result of an illogical, bullshit rule, then you should be able to understand that the shame itself is illogical... and bullshit.\"\n\n\"It's not really that simple...\" she said, frowning.\n\n\"But it is.\" I said, \"We're all taught that what our society says is right or wrong is so God damned important, but the thing is that our society is almost always wrong about things like this.\"\n\n\"You're saying the basic morality of our society is just wrong?\" she challenged.\n\n\"When it comes to women and sex, yes.\" I said. \"Women used to be considered basically the property of their husbands. You couldn't even vote until like a hundred years ago for fuck's sake. Western culture doesn't know shit about what is or isn't good behaviour when it comes to women. It's all just patch-work bullshit made up of outdated moralities and sloppy adjustments to rapid cultural changes.\"\n\nI shook my head, realising I was getting off topic.\n\n\"The point is, when it comes to sex, you and I basically grew up in two completely different countries.\" I said, \"As a man, our culture taught me that sex is something I should look forward to, and have lots of when I'm an adult, whereas you where taught that it's something to be feared, something you have to avoid as much as you can or else be seen as a slut.\"\n\n\"But I am a slut.\" she said, angrily. \"I come over here whenever I can knowing that you're going to fuck me. I'm a horny, disgusting slut.\"\n\nHer words surprised me, and confused me. My views on sex, just like with most things I knew at that point, were based on what I'd read on the internet. The people I'd talked to, and the things I'd read there had really influenced my personal morality.\n\nTo me, the idea that sex between two consenting adults could be considered shameful in any way was as archaic as the idea that we should be waiting until marriage, or that a woman's place was at home with the kids while the man has to work. Just old, obviously outdated notions.\n\nI'd never felt a single trace of guilt towards my activities Jessica. I mean, guilt about whether or not I was dominating her properly, or hurting her too much, yes. Guilt about keeping it from my sister, yes. Guilt about having to ignore Jessica's love for me because I didn't feel the same way... yeah.\n\nBut never about the actual sex.\n\nJessica seemed to have guilt over even having sex at all, or enjoying it.\n\nIt suddenly dawned on me that Jessica and I had incredibly different views about what we were doing. She was so repressed when it came to sex. This is something I already knew in a sense, but for some reason I'd never considered exactly how it might affect her.\n\n\"What I'm trying to say is that when I call you a slut, I don't necessarily mean it in a bad way.\" I said. \"There's nothing wrong with liking sex. You don't have to be ashamed of it.\"\n\n\"I can't really help it.\" she said quietly.\n\n\"Well... try.\" I said uselessly. \"You don't have to let other people's labels matter to you. Sex isn't something to be ashamed of. \"\n\nThere was a thoughtful silence. I lay down again, carrying her with me. I found myself noticing how much I loved the feeling of her body against mine, her soft heat enveloping me.\n\n\"Culture...\" she said thoughtfully. \"I've never heard you talk like this before. About culture, and society. Are you interested in that kind of stuff?\"\n\n\"Uh, I was for a while.\" I said, closing my eyes, glad we'd moved away from the heavier topics. \"I used to read about it a lot.\"\n\n\"For school?\" she asked.\n\n\"Nah, I was just interested in it.\"\n\n\"Not any more?\" she asked.\n\n\"Well sometimes, but it's not what I've been reading recently.\"\n\n\"What have you been reading recently, then?\" she asked.\n\nI yawned loudly, and shifted to get more comfortable.\n\n\"Umm... well last night I was reading about Astrology.\" I said, \"And about how horoscopes and stuff like that are usually just vague general statements that most people can relate to.\"\n\n\"Really?\" she said.\n\n\"Yeah, they're called Barnum statements... like, people will read these sentences and claim that they're designed for them personally, when they're actually just generic descriptions of personality traits and vague events that everyone experiences to some extent. Called the Forer effect, I think.\"\n\nI yawned again.\n\n\"From there I clicked on a link about... Cold Reading, which is a technique fake psychics use to-\"\n\nI suddenly opened my eyes, realising I was just rambling about random crap I'd read online. I shook my head slightly, fighting off the fog of sleep.\n\n\"Why are we talking about this?\" I said, mostly to myself.\n\n\"That's really cool.\" she said, sounding excited, \"So you just read about all this different stuff?\"\n\n\"Um...pretty much.\" I answered.\n\n\"Cool.\" she said again, \"You know, you're smarter than I thought.\"\n\nThe was a slight pause as we both thought about her last comment.\n\nI suddenly felt her stiffen in fear, and she let out an odd squeak.\n\n\"I... I didn't mean-\" she started.\n\n\"Relax.\" I interrupted. \"I've known you long enough to know when you're being deliberately insulting.\"\n\n\"Sorry.\" she half whispered. \"I just meant... you're so quiet... it's good to hear you actually talking about something you're interested in.\"\n\n\"Hm.\", was all I responded with.\n\n\"Is that really how you think about things?\" she asked thoughtfully.\n\n\"Is what how I think about things?\" I asked.\n\n\"Like... like you don't care what anyone else thinks?\"\n\nDid I say that? I couldn't remember...\n\n\"Mostly.\" I answered, \"I just try to focus on what I think about myself, what I know about myself. I don't need validation from anyone else, you know? Or... that's the idea, at least.\"\n\n\"Hm.\" she responded. \"You're a lot smarter than I thought.\"\n\nShe said this with a such a thoughtful tone. For some reason I started to panic.\n\nWhat was I doing? Telling her about my interests, my opinions, my fucking feelings? Jessica was not my girlfriend. Why was she even still here?\n\nI was suddenly angry at myself for talking to her at all. I didn't have to share anything with her. She'd spent years hating me, who the fuck was she to suddenly start caring about me?\n\n\"Alright, it's time to go.\" I said.\n\n\"Right now?\" she asked.\n\n\"Right now.\" I said, forcing my voice to be cold and uncaring.\n\n\"Ok.\" she sighed, although there was humour in her voice.\n\nShe sat up and paused for a few seconds before she leaned in for a kiss. I gripped her face hard, stopping her. She smiled. Why was she smiling? I lead her closer to me, bringing her lips so close to mine. She kept her eyes open, and didn't try to lean in any further. She just waited.\n\nI thought about kissing her, her lips on mine, exploring each other's mouths in that intimate and pleasurable way.\n\n\"Go.\" I said, releasing her.\n\nShe smirked and leaned in to kiss me again, slowly, hesitantly.\n\nI allowed her lips to softly brush mine, and then I slapped her face. She squeaked with surprise and pain.\n\n\"You don't kiss me.\" I said. I'd thought this rule was clear already. \"If you want a kiss, you beg for it, understand?\"\n\n\"Yes Sir.\" she said quickly, holding her cheek.\n\nWhy the fuck was she still smiling?\n\n\"Will you please kiss me, Sir?\" she asked sweetly.\n\n\"No.\" I said sternly.\n\nShe nodded once, still with that stupid knowing smirk on her face, and then slid out my bed\n\nShe picked up her lingerie, and then paused. She turned with her mouth open, as if to say something. She seemed to reconsider, closing her mouth and shaking her head.\n\nAnd then reconsidered again.\n\n\"Thank you, Sir.\" she said.\n\n\"No problem.\" I said turning away from her, once again unsure about what exactly she was thanking me for.\n\n\"Goodnight.\" she sang happily.\n\nI didn't answer.\n\nI waited until the door was closed before I let out the breath I'd been holding.\n\nSomething about all this was making me uncomfortable. The way she smiled at me, like she could see something I couldn't. And why was I blushing?\n\n\"Wow, you're a lot smarter than I thought!\" I mocked aloud, mimicking her voice.\n\nI scoffed angrily. I pulled my blanket around my shoulders and tried to fall asleep, willing all that fatigue that I'd barely been holding back to sweep me away. My last thoughts were of the future. The toys I'd bought, and how exactly I would use them.\n\nMy fantasies drifted into my dreams, and my head was filled with nothing but Jessica, all her different faces, all the ways I knew her.\n\nJessica the Valedictorian, the future Law Student.\n\nJessica the Good Daughter.\n\nJessica the Best Friend.\n\nJessica the Bitch.\n\nJessica the Slut.\n\nMy Jessica.\n\nMine. "
    ],
    "authorname": "BackyardBottomslash",
    "tags": [
        "dominance",
        "submission",
        "bondage",
        "spanking",
        "big cock",
        "cunnilingus",
        "deep throat",
        "orgasm denial",
        "christmas",
        "new year"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/yours-ch-04"
}
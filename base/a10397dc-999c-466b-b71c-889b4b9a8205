{
    "title": "Ballerina",
    "pages": [
        "August of 2015\n\n\"Jake? Hi. Sorry to call you at work,\" she told him.\n\n\"Hold on. I can't hear you. Let me get away from the excavator. Gimme just a sec, okay?\" he hollered even though she could hear him just fine.\n\nHe walked about 50 feet away from the job site then tried again.\n\n\"Leanne? You still there?\"\n\n\"Yes. I'm still here,\" she said.\n\n\"What's going on? Is Becca okay?\"\n\n\"Yes. She's fine. She's right here,\" he heard her say.\n\nHe could tell something was wrong by the sound of her voice, but if it wasn't their daughter, he wasn't sure how it was any of his concern. They weren't married, never had been married, and never would be. For that matter, they weren't even in love. \n\nThey'd dated briefly and as luck would have it, Jake Wheeler found out the hard way what he'd heard many times about how rare it was for a condom to break. In his case, it only happened that one time, but as he soon learned, once was more than enough.\n\nThey called things off about a week after the 'big break' happened for other, unrelated reasons, but a month later, Jake also learned his one-time girlfriend was pregnant. Having been raised to take responsibility for his actions, it never once occurred to him to do anything but step up and be a father to his yet-unknown child, and he did that from day one. \n\nNeither he nor his ex-girlfriend, Leanne Harvey, had any interest in getting married for their baby's sake, but she knew Jake would be there for the daughter they would have some eight months later, so marriage had never even come up.\n\nOver the following months, they got along well and while they occasionally disagreed, they never fought. After Becca was born, child support checks arrived on time the 1st of each month, and Jake willingly helped out with anything else his daughter needed. \n\nAnd the truth was, he was happy to do it, because that tiny little girl had changed his world in the best possible way, and there wasn't anything he wouldn't do for her. He wasn't opposed to helping out her mother, but Leanne wasn't his responsibility, so if she was calling to ask him to...\n\n\"Jake? I...I have...I have cancer,\" Leanne told him without warning, causing Jake to hold the phone out and look at as though it was the source of the words he'd just heard spoken to him.\n\n\"What do you mean you have cancer?\" he asked.\n\nAt the time of that phone call, Jake had been 27 years old and Leanne was just 23. Old people got cancer. So did some little kids. But not someone her age.\n\n\"It's bad, too,\" she told him quietly.\n\nJake knew she was doing her best not to cry, and suddenly he was choked up to the point where he couldn't speak.\n\n\"Jake? Are you still there?\" he heard her ask.\n\nHe cleared his throat then said, \"I'll be right there, okay?\"\n\nWithout waiting for an answer, he hung up the phone then ran to the portable building on the job site where he knew he'd find his father, the owner of Wheeler Excavation, LLC, and told him he had an emergency.\n\nJake wasn't just Jeff Wheeler's son, he was the smartest, most-talented man in his employ; a man who could run any piece of equipment and perform any task from digging out a foundation to a well to anything that required moving large amounts of earth.\n\n\"Jesus! That's awful, Jake. Please let me know if I can help,\" his father told him as Jake flew back out the door and then to his truck.\n\nTwenty minutes later he was at Leanne's house, and when he saw her mom's car there, he realized this was serious.\n\n\"Hey,\" he said to both of them as he walked in without knocking as he always did.\n\n\"Hi, Jake,\" Leanne's mother, Violet Harvey, said as she hugged him. \"Thank you for coming home.\"\n\nIt wasn't his home, but he wasn't about to quibble as he looked at the mother of his child who was holding Becca in her lap.\n\n\"So...how bad is bad?\" he asked, not sure what else to say, as he sat down beside her.\n\nWhen Leanne's mother, one of the strongest women he'd ever met, started to cry, he knew it was really bad.\n\nJake Wheeler, whose given name was Jeffrey Mark Wheeler, Junior, had been a very good student in high school. He graduated with a 3.8 GPA and could have gone to nearly any college in the country. But like his father, he loved heavy equipment and had been working for his dad after school and on weekends since he turned 16. He didn't actually believe that sort of love was 'in his blood', but he knew that's the only thing he ever wanted to do.\n\nSo while he hadn't gone to college, Jake, a nickname given to him in junior high that had stuck, did a lot of reading on all kinds of topics to include science and medicine. But he'd never even heard the term 'Invasive Ductal Carcinoma' before. He had heard the term 'Metastatic Breast Cancer' and understood what metastasis meant, two terms Leanne quietly repeated to him in answer to his question.\n\nLeanne had Stage IV metastatic, invasive ductal carcinoma that had, as the name implied, moved into the milk ducts of her left breast and further spread, or metastasized, to her lungs and then her brain. \n\nLeanne's mother did her best to recount what the oncologist had just told them a few hours earlier after explaining why they hadn't said anything about this before. \n\n\"We...we just didn't want to worry you in case this turned out to be no big deal,\" her mom said. \"But...but this...\"\n\nWhen she couldn't go on, Jake knew she wanted to say, \"But this IS a big deal.\"\n\nHe soon learned just how big when Leanne asked him to hold their baby.\n\n\"I don't have much time left, Jake.\"\n\n\"How...how much time?\" he asked as he took her hand.\n\nShe shook her head then said, \"Six months at most and quite likely less. Regardless of how many months I have, I won't be well for some portion of it near the end.\"\n\nIt was beyond surreal to have gone from sitting in an excavator an hour ago prepping the ground for a house in a new development to sitting next to the woman who'd borne his child and learning there was very little chance she'd live until Christmas of that same year.\n\n\"What can I do?\" Jake asked as he fought back tears.\n\n\"Take care of our baby girl,\" Leanne said without any hint of tearing up. \"That's all I care about. And that's all that matters.\"\n\n\"You know I will,\" he told her. \"But there's gotta be something I can do.\"\n\nShe looked right at him and said, \"There really isn't anything anyone can do for me now. So I just need to know Becca will be with the one other person who loves her as much as I do.\"\n\nShe looked at her mother then said, \"Mom? You know what I meant, right?\"\n\n\"Of course, honey. And I know Jake loves my granddaughter as much as you or me, so you didn't hurt my feelings at all,\" her mom told her. \"Jake is a fine man and a loving father.\"\n\n\"Jake, listen. I don't know how long I'll be able to care for her, but for now, I'm fine,\" Leanne told her. \"But this kind of cancer is very aggressive and that's why it spread so fast before anyone noticed. I...I only found a lump two weeks ago, but it's already twice as big and...still growing. But that lump isn't what's...\"\n\nJake got that, too. It was the cancer cells that moved to her lungs and her brain that were the thing that was...killing her.\n\nLeanne asked for a moment alone with Jake, so Violet took Becca and went outside on the porch.\n\n\"I do have one request,\" Leanne told him once they were alone.\n\n\"Sure. Anything. Just name it.\"\n\n\"I need you to promise me you'll find someone to help you raise her.\"\n\nWhen he tried to respond, Leanne stopped him.\n\n\"No. Don't interrupt, okay?\" she said very calmly. \"My mom loves Becca, but she can't stay here indefinitely. Your mother is gone, and while I know you'll do a great job, our little girl needs a woman to love her and teach her and be a female role model for her. So...two things. I want you to find someone, but the second part of that is she has to love Becca as much...well, almost as much as I do. Will you promise me that?\"\n\nJake's head was swirling in confusion, and as smart as he was, he couldn't even think. He didn't want to agree to something he'd never do, but he felt like he had to say 'yes'.\n\n\"I can promise you I'd never, ever marry a woman who didn't love our daughter,\" he told her. \"That part's a given.\"\n\nShe kept her eyes locked on his and waited for the 'but'.\n\n\"It's just that, well, I...I can't promise you I'll get married at all let alone when.\"\n\n\"Jake? You're the kindest, sweetest...\"\n\nLeanne managed a smile then said, \"Most handsome guy I know. You have a fantastic job, and some day, whenever your dad gets tired of running it, you'll own the business. You're a total catch. I only wish I'd have been able to love you the way you deserved to be loved. But that's all water under the bridge now. I know it's not fair to pressure you, but what they say about a mother being willing to do anything to protect her child is true. And the last important thing I can do is convince her father to find a new mom for her like the woman I just described.\"\n\nWhen she reached over and put her hand on his, Jake caved.\n\n\"I promise,\" he told her, his voice quivering, still not sure he could. \n\nShe leaned over and kissed him on the cheek then said, \"And please shave more often. You look great with the three-day stubble thing, but you never know when you're going to meet her, and you look even more handsome when you're clean shaven.\"\n\nShe reached up and pulled the Seattle Mariner's ball cap off his head, exposing a head of thick, dark hair and said, \"And please, please don't wear a ball cap everywhere you go. It's not the 1990s anymore, okay?\"\n\nLeanne never gave advice. She let him live his life, and he did the same with her. So if these were her last wishes, something he still couldn't fully accept, they seemed like pretty reasonable requests.\n\n\"Okay. I'll break out the razor a little more often, and I'll save the hats for...ball games and barbecues.\"\n\n\"Thank you, Jake,\" Leanne said very sweetly. \"And would you please let my mom know she can come back in now?\"\n\nTo help ease the transition, the day after Thanksgiving Becca began staying with her father after dinner until he went to work the following morning. \n\nIt was on Thanksgiving Day, after having dinner together with both of their families, Leanne told him she didn't have the stamina to care for their daughter full-time, even with her mother's help. She saved what strength she had to spend time with Becca during the day and let her mom help out when she got too tired until Jake came to pick her up.\n\nThen, two weeks before Christmas, Leanne became so ill she was moved to a halfway house. But when, just two weeks later, and with just days left to live, her mom brought her back to her house the day before Christmas after Leanne told her she wanted to die at home. She was too ill to do anything, but she was somehow able to sit up and hold Becca and have a few pictures taken and a final video made with her mom, Jake, and his family there to share her last holiday on earth. \n\nLeanne fell into a coma three days later, and died on the 31st of December just before midnight. Jake was there along with Leanne's mother, each of them holding one of her hands. \n\nAfter the coroner arrived to take her daughter away, Violet told Jake she could stay there a little longer and was happy to babysit until she had go back home to Spokane. He, in turn, told her how grateful he was, knowing his younger sister would be happy to help out. But having a full-time job herself, Jake was going to have to find childcare in the very near future.\n\nBecca, of course, had recognized her mother and had been able to say 'momma' for quite some time, as well as many other words that were added to her vocabulary as she grew. But being just 18 months old when her mother passed away, she would have no real memories of the woman who'd given her life and who'd loved her so very much.\n\n******\n\nFebruary, 2019\n\n\"Jake? I know this is none of my business,\" his sister Kayla said when Jake came to pick his five-year old daughter up after work. Being a teacher at the same school were Becca attended Kindergarten, Kayla had been allowed to keep her niece with her class until the final bell before taking her home until her dad arrived. \n\n\"Uh-oh. It sounds like you're about to stop minding your own business,\" her brother said with a smile as he took Becca from her.\n\n\"Okay. Yes, that's true. I am about to get nosey. But...well, do you think you'll...ever get married?\"\n\nJake tried not to laugh when he replied before remembering the promise he'd made while Leanne was still relatively healthy. Kayla knew about it and had never once mentioned it in all the time since her brother had taken full-time responsibility for his daughter.\n\n\"Gosh, I don't even have time to date let alone have an actual relationship with anyone.\"\n\n\"I'm not bringing this up because of the promise, Jake. That was between you and Leanne. But you only just turned 30, and you're a very nice looking guy. So...I'm more than willing to keep Becca in the evenings, too. You know, so you could maybe have time to meet someone? Would that maybe help?\" Kayla told him.\n\n\"Gee, why do I feel like you're trying to get me married off?\" Jake replied with a smile.\n\n\"Well, you can't blame me for caring, can you?\" his sister replied with a kind of 'who me' look.\n\n\"I really do appreciate that, sis,\" he told her. \"I barely remember Mom, and you never even knew her, but it's not like Becca's...being deprived or anything.\"\n\nHe looked at his daughter then said,\"You're my little sister, and as strange as it sounds, you're also the closest thing I've ever had to a mom, and I love you dearly. But I'm so busy with work and raising little Beks here, I honestly don't know how I'd ever fit in any kind of...romance.\"\n\nKayla knew Jake had had more than his share of 'romantic encounters' before Leanne got pregnant, and she also knew he'd put his nose to the grindstone from the time he found out, making sure his daughter would be well-cared for. But there were other things she knew, as well. One of those was that her older brother was a very lonely young man. Another was that her niece needed the love of a mother. She got plenty from the rest of her family, but there was no substitute for having a woman there 24/7 who would care for Becca the way she and Jake tried to do.\n\n\"Besides,\" he told her. \"Who's gonna want to hang out with a 30-year dad with a five-year child?\"\n\nBefore Kayla could answer him, Jake said, \"But whoever that might be, she'd have to love the Bekster as much as we do, right?\"\n\n\"Okay. I know I shouldn't have butted in, but I felt like I had to say that. And you know I don't do that very often.\"\n\n\"No. No, you don't,\" Jake agreed. \"And because you're such a wonderful, caring person, I don't see any need to go looking for a wife.\"\n\n\"Well, I'll let it go then,\" Kayla said, knowing it wasn't her place to push too hard.\n\n\"Give Aunt Kayla a big kiss!\" she told Becca before handing her off to her father.\n\n\"Bye, Auntie Kayla!\" Becca told her after giving her a kiss goodbye.\n\nAs Jake got ready to leave, he turned around and said, \"I do worry about something, though.\"\n\n\"What's that?\" Violet asked with a smile.\n\n\"Well, the thing you said about having a woman around for Becca. I'm...I'm just a guy. And...I'm all guy. I'm not saying Becca can't be a...a heavy-equipment operator or...\"\n\nKayla winced and Jake laughed.\n\n\"See? That's what I'm talking about. I can't sing. I'm a lousy dancer. I can't draw. I don't know anything about arts & crafts or whatever it is that Leanne would would have taught Becca and had fun doing it. I mean, I'm happy to take her deer hunting or to a monster truck rally, but I worry about her not have something...\"\n\n\"Girly?\" Kayla suggested.\n\n\"In a word\u2014yes,\" Jake replied.\n\n\"Hmmm. Sounds like someone is making my point,\" his sister said, trying not to gloat.\n\n\"Yeah, yeah. Okay. You win,\" he told her with a smile as he held his hands up.\n\nHe reached down, took one of Becca's then said, \"You ready to go home, Punkin'?\"\n\n\"Uh-huh!\" she said happily as she nearly forced her very-tired father to skip out to the car with her.\n\n\"See!\" he called back to her aunt. \"This is what I'm talking about!\"\n\n\"I'll babysit anytime. Evenings, weekends, holidays!\" she yelled back as she waved goodbye. Her brother only shook his head as he put Becca in her carseat.\n\nA couple of weeks later, Jake's dad let him know he and the builder he'd partnered with on the development they were prepping was ready to show the model home that weekend.\n\n\"They finished it already?\" Jake asked, drawing a puzzled look from his father. \n\nHe drove by the model home site every day, but obviously he hadn't been paying much attention if they'd finished it right under nose, so to speak.\n\nHis dad laughed then said, \"Someone's preoccupied.\"\n\n\"Yeah, maybe so,\" his son agreed. \"Kayla's kind of been on me to find someone.\"\n\n\"Ah, okay,\" the elder Wheeler said before looking at his daughter, who also happened to be there for the announcement.\n\n\"Why are you looking at me?\" Kayla Wheeler asked. \"I haven't been on his case in...\"\n\n\"Days?\" Jake said before she could say 'months'.\n\n\"Okay, but it's been...weeks. Not days.\"\n\n\"Ha! If you mean 'week', singular. Maybe,\" her brother quipped.\n\n\"Anyway,\" their father interrupted, \"Mr. McKee would like us to be there for the open house on Sunday.\"\n\nJake shook his head in disgust then said, \"No. You gotta be kidding. I get one day a week off, and I gotta go stand around some new house with a bunch of snobs? And what about Becca?\"\n\n\"I wanna go!\" the little girl said, finally making her presence known, too.\n\n\"See there. Your daughter thinks it's a great idea.\"\n\nJake rolled his eyes and asked his sister if she'd watch her niece.\n\n\"Why don't you bring her along?\" his father suggested.\n\n\"Dad, are you serious?\"\n\n\"Yes. I'm very serious. She's a little doll, and potential buyers will love her.\"\n\n\"I'm not a doll, Pop-Pop. I'm a ballerina,\" Becca informed him.\n\n\"She's got a point, Dad. I mean, she won't take that costume off except to go to school.\"\n\n\"Then let her wear it. I think she's...\"\n\nJeff Wheeler leaned over, touched his nose to his granddaughter's, then said, \"Beautiful!\"\n\nBecca giggled then surprised everyone when she said, \"My mommy was bootiful, too.\"\n\nEveryone stopped laughing and talking before Becca answered their question.\n\n\"Nanna showed me pictures of my mommy during FacingTime, and she says we're like pea pods.\"\n\nJake looked at Becca then at his dad who was trying not to laugh.\n\n\"You mean 'peas in a pod', right, sweetie?\" her dad suggested.\n\n\"That's what I just said, Daddy. Pea pods.\"\n\n\"Oh, okay,\" her father said with two eyebrows raised high.\n\n\"It's from noon until about three or four,\" the family patriarch said, bringing his son back to the topic at hand. \"And you can probably duck out a little early.\"\n\n\"Okay, fine. As long as I don't have to wear a tie. Or a jacket,\" Jake said, relenting again.\n\n\"No suit. No tie. Just...no jeans, okay? And our little princess here can wear her ballerina costume.\"\n\nBecca clapped and said, \"Yay!\" having heard nothing but being allowed to wear her favorite new outfit since deciding she wanted to be a ballerina when she grew up. \n\nAccording to Kayla, Becca had seen some girls her age on TV dancing in a ballet class. She stood up and started trying to imitate their moves and told her aunt she wanted to be one. After checking with her father, Kayla made her a little pink tutu and bought her some white tights. Becca was happy to wear her white tennis shoes with them, and no else cared. So just like that, a ballerina was born. Kind of.\n\nKayla agreed to go with her father and brother for two reasons. The first was that she loved Becca as much as anyone else in the family, and number two, she was getting ready to finally move out and buy a place of her own. ",
        "At 26, living at home was a kind of 'new normal' for people her age, and no one thought anything about her staying at her father's home, even while attending college. Her dad loved having her around, and doing so had allowed her to save a fair amount of money. So with a little help from her dad plus what she'd already put away teaching school, Kayla would soon have enough for a downpayment on a modest, new home. \n\nShe couldn't afford one like the model they would be representing, but there were smaller units being built, and she already had her eye on one them.\n\nThe Wheelers had done all of the prep work on the model home, as well as every other house under construction in the development, while Jeff's business partner, Charlie McKee, owned the company that built the houses. The partnership had been good for both men, and as much as Jake hated these kinds of events, he understood how important they could be to future business, one his father routinely reminded his son would one day be his.\n\nSo as he, Kayla, and Becca piled out of his truck, he put on his best happy face and headed inside.\n\nA perky real estate agent met them just inside the door, offered them her business card, then asked if they had any questions before bending down and making a big fuss over the 'little princess'. \n\n\"I'm not a princess,\" Becca let her know immediately. \"I'm a ballerina!\"\n\nKayla rescued the woman from her own problem by letting her know she had a ton of questions. And that allowed Jake, who was holding Becca's hand, to go on a self-guided tour of the new house before it got busy.\n\nHe started in the kitchen and carefully looked at every detail as he, too, gave some thought to one day buying a house of his own. For now, living in his dad's spacious home was more than adequate. But as Becca got older, living there wouldn't do. And perhaps if he and his sister moved out, their father might even try and find someone to settle down with himself. \n\n\"Can I go look, Daddy?\" Becca asked, already bored with watching her father looking at corners and seams and door jambs.\n\n\"Yes, but do NOT go out of this house, okay?\"\n\n\"I won't!\" she promised as she zipped off toward the other end of the five-bedroom, 3-1/2 bath, 2,850 square foot home.\n\nBecca came running back by in less than a minute having already seen one end of the house in all the detail that mattered to her. Her dad barely noticed as she zoomed on by while he continued making his way around the kitchen looking under the sink at the plumbing then checking the faucet for leaks.\n\nJake lost track of time, and when it hit him that he hadn't seen his daughter since she went flying by, a feeling of panic welled up in him. He'd made his way to the first room on the end Becca had already seen, and when he realized he had no idea where she was, he quickly stepped into the hallway and started striding toward the other end. \n\nHe passed the kitchen then heard his daughter's voice and felt the tension drain as he zeroed in on her location.\n\n\"Oh, I see,\" another female voice said as he turned into the family room.\n\n\"Yes, so that's when I decided I want to be a ballerina,\" he heard Becca explaining.\n\nHe saw her a second later and smiled when the other female voice spoke again.\n\n\"Well, I think you're a very beautiful ballerina,\" the woman said as Jake walked up and stood next to his daughter.\n\nThe woman smiled at him, and as he smiled back, Becca grabbed his hand and said, \"Daddy. Her name is Morgan and she's a ballerina, too!\"\n\n\"Oh. I...see,\" he replied as he looked at the woman sitting a couple of feet in front of his daughter.\n\n\"Not hardly,\" the woman said with a polite laugh. \"At least...not for many years.\"\n\n\"She used to be a ballet dancer,\" Becca informed her father.\n\nThe woman stood up, smiled again, then said, \"I saw your daughter walking around and I told her I loved her costume, and we've been talking ever since.\"\n\n\"Sorry about that,\" Jake told her.\n\n\"No. Don't be. I loved every second of it. She's just so ...precious,\" the woman said with a laugh at his 'sorry' comment before introducing herself.\n\n\"My first name really is Morgan. And the last name is Anderson,\" she said, extending a hand.\n\n\"It's a pleasure meeting you. I'm Jake. Wheeler. And this is my daughter, Becca.\"\n\n\"Becca. What a pretty name,\" Morgan said to Becca with a smile.\n\nWhen she turned back toward Jake, he actually looked at her for the first time. He'd noticed her before, but, like the model home, he hadn't really seen her yet. When he did, it caught him off guard because she was as attractive as anyone he'd seen in many years.\n\nShe was maybe 5' 7\" tall and wearing what looked like three-inch black heels, a black skirt that fell to a couple of inches above her knee, and a long-sleeved, blue sweater that was ribbed and not too low cut. Her eyes matched the color of her top and it looked like she was a natural blonde as there were no hints of dark roots in her soft, shoulder-length hair that was smooth and nicely styled.\n\n\"So...are you a real estate agent?\" Jake finally asked, assuming that's why she looked so professionally dressed.\n\n\"No. I'm moving back to the area and looking for a place to live. I...I lost my husband almost four years ago, and our daughter, Anna, is out here going to college at the University of Washington. She absolutely loves the area, and after visiting last summer, I made the decision to sell our home in Spokane, and come back here.\"\n\n\"So you grew up around here?\" Jack asked, even though that's what she'd clearly implied, without mentioning his almost mother-in-law lived in the city Morgan was leaving.\n\n\"Yes. I was born and raised in Kent, and when I got married, my husband's business took us to the eastern side of the state, and that's where I've been ever since,\" Morgan replied with a very beautiful smile. \"How about you, Jake?\"\n\n\"Yes. Born and raised right here in...sunny-old Auburn, Washington,\" he told her, knowing she'd understand the humor.\n\n\"Sunny. Right. I have to say I've really missed the green. It's so beautiful here. I'm not wild about the rain, but you take the good with the bad, right?\" she said very cheerfully.\n\n\"That's definitely true,\" Jake replied as he tried not stare.\n\nMorgan had a body to match her face, and her face was incredibly attractive. She was clearly older than him, but he had no idea how much older. He had no intention of asking, but he was very curious because she somehow seemed much younger. He knew that didn't make any real sense, but it was the impression he came away with after their very brief chat.\n\n\"Well, we'll let you get back to seeing the house,\" Jake told her, giving her an out as to being able to get away.\n\n\"If you must,\" she said, the smile still there. \"I enjoyed meeting both of you, and I want to wish this pretty little ballerina all of the success in the world.\"\n\nMorgan bent down then said, \"And who knows? Maybe we'll see you on television one day dancing at the Bolshoi Theater.\"\n\n\"What's the Bull Showy Theater?\" Becca asked very innocently causing Morgan to have to cover her mouth as she laughed.\n\n\"It's in Russia, and Bolshoi means 'big' in Russian. It's one of the most famous ballet theaters in the world.\"\n\nBecca pulled on her dad's finger and asked, \"Can we go there?\"\n\nHe glanced at Morgan who was clearly taken with the little girl then said, \"No. Not right now, honey. But I'll tell you what. If you do become a ballerina, maybe you can go there someday and dance for all of the people.\"\n\n\"Will you come with me?\" she asked just as innocently.\n\n\"Um...da!\" he told her, using the only Russian word he knew which caused Morgan to laugh again.\n\n\"Duh? Why did you say 'duh'?\" Becca wanted to know.\n\nJake let out a long, slow breath, smiled at Morgan again, then said, \"Sorry, sweetie. Sometimes...daddies just...make mistakes.\"\n\n\"Oh. Okay!\" his daughter said before tugging at his finger again. \"Come on! I just saw PopPop!\"\n\n\"That would be my father,\" Jake said as Becca continued to pull.\n\n\"It was a pleasure meeting you, Jake,\" Morgan told him again.\n\n\"Same here,\" he replied as his daughter grabbed his wrist with both hands and pulled as hard as she could. \"Sorry. Duty calls!\"\n\nHe saw Morgan laughing politely as he was literally pulled away. As Becca ran toward her grandfather, he glanced back and when he did, Morgan smiled again. Jake couldn't remember the last time he'd let a beautiful woman befuddle him, but when he goofily waved to her he realized he'd just been completely knocked off kilter by one.\n\n\"So...who's the actress?\" he heard Kayla saying.\n\n\"What?\" \n\n\"The blonde. The younger version of Morgan Fairchild,\" his sister said as she looked at the other Morgan.\n\n\"That's too funny,\" Jake told her as he ventured another look. \"Her first name just happens to be Morgan. But I think she looks more like Kate Beckinsale with blonde hair.\"\n\n\"Hmmm. Yeah, I guess I can see that. But don't get any ideas, brother of mine. She's too old for you, and she's got a huge rock on her left hand.\"\n\nWithout making a big deal about it, Jake quietly said, \"Her husband passed away a several years ago.\"\n\n\"Oh, geez. Can you help me pull my foot out of my mouth?\" Kayla said, now feeling terrible.\n\n\"She said she grew up in Kent, moved to Spokane with her husband, and now her daughter, who goes to the U Dub, recently convinced her to move back here. So evidently, she's out looking to buy.\"\n\n\"Huh. Well, I guess an open house is a pretty good place to do that,\" his sister mused as they both looked Morgan's way again. She now had a man their father's age 'chatting her up', and Jake had a momentary pang of jealousy that completely surprised him. \n\n\"Get a grip, Wheeler,\" he told himself before telling his sister he wanted to finish his tour.\n\n\"Oh, sure. I'll keep an eye on the little princess. Oops. I hope she didn't hear that. I meant...ballerina,\" his sister whispered causing her brother to laugh.\n\nWhen he did, she told him, \"You need to smile more, dude. You're not half bad looking when you do.\"\n\n\"Wow. Try not to get carried away with the praise, okay?\" her brother kidded back.\n\n\"And...stay away from the 40-something women, would you?\" his sister said back.\n\n\"I'll try, but if I smile, and I attract a bunch of them, I'm blaming you,\" he told her very seriously.\n\n\"Yeah, right. Like you'd go out with anyone let alone a woman that old and...\"\n\nMorgan wrinkled her nose then begrudgingly said, \"That hot.\"\n\nJake was at the far other end of the house checking out the master bathroom in his normal level of detail when he heard someone say, \"I really like the higher-end finishes in this house.\"\n\nHe nearly hit his head on the shower door when he raised up, and when he saw who it was, Morgan was covering her mouth again as she tried not to laugh. Jake couldn't help but notice the beautiful French nails which matched the shiny lip gloss she was wearing when she raised her hand.\n\nThe perky real-estate agent was giving her the nickel tour, and she stood there quietly waiting for her potential future buyer to finish talking with the handsome younger man.\n\n\"I'm so sorry! I didn't mean to scare you. Are you okay?\"\n\n\"I managed not to damage the glass door,\" he told her as he remembered to smile.\n\n\"Oh, good. Yes, we can't have you going around destroying solid objects...with your head,\" she told him, her own smile killing him.\n\nHe rapped his head with his knuckles as he tapped on the glass door with his other hand. \n\n\"Like they say, knock on...glass.\"\n\nMorgan laughed again as she stepped inside a little further.\n\n\"Wow. There's room enough for two in there,\" she said drawing a 'what did you just say' look from Jake.\n\nBefore covering her mouth again. \"I...I didn't mean...\"\n\nNow Jake laughed and said, \"It's fine. I know what you meant. And yes, it's a really good-sized shower. I love the rain...\"\n\n\"Oh, so there you are!\" they both heard a loud, booming male voice say.\n\n\"Oh, God,\" Morgan said quietly before slipping her arm under Jake's, just as the real estate agent rolled her eyes and indicated she was leaving via a nod toward the door.\n\nJake nearly pulled away just as she pointed to the shower head and said rather loudly, \"Oh, look, honey! It's that rain shower head you like so much.\"\n\nJake didn't overreact as his brain tried to figure out what was going on. It only took a second, because he understood as soon as he looked over and saw the man who'd been talking to her earlier.\n\nWhen he turned his head back toward the shower, Morgan moved her mouth to his ear and said, \"Please play along so he'll leave me alone.\"\n\nJake looked back at the shower head and said, \"Right. Yeah, we've talked about getting one for quite awhile now, haven't we...sweetheart?\"\n\nHe felt Morgan squeeze his arm in thanks before she replied.\n\n\"Yes, we have, and they have these in both of the shower stalls. So what do you think?\" she asked as she gently pulled him toward the door so she could escape this man she obviously wasn't very fond of.\n\nWhen the were a few steps away, Morgan let go of his arm and said, \"Thank you!\"\n\n\"Wow. He must have made quite an impression on you,\" Jake said with a nervous laugh.\n\n\"What a...pig! He...he hit on me within 30 seconds. I kept trying to get away from him, but he wouldn't let me go. Thank goodness someone came by with food and distracted him,\" she told Jake quietly.\n\n\"In that case, it was my pleasure,\" he let her know, still remembering to smile. \"And if you ever need a fake boyfriend again, just let me know, okay?\"\n\nMorgan laughed happily and promised she would.\n\n\"Do you sell real estate, Jake?\" she asked before he could get away.\n\n\"Me? No. But I did excavate the area under the house for the foundation,\" he told her. \"I'm a heavy equipment operator. So if you ever need a hole dug...I'm your guy, too.\"\n\n\"Okay. Good to know,\" she told him, that perfect, white smile still there.\n\n\"My dad owns an excavation company, and we partnered with McKee Homes to build this development, but I can only take credit\u2014or the blame\u2014for the dirt. Or actually\u2014the hole left from removing the dirt. So...yeah,\" Jake said, knowing he wasn't doing so well in the conversation arena.\n\n\"I'm actually thinking very seriously about buying one of the homes in this development. I'm not sure I need quite this much space for just my daughter and myself, but this one is really nicely done.\"\n\n\"They have a pretty wide variety from around 1,750 square feet to just over 3,500, so you should be able to find something to fit your needs. And honestly? I've actually been thinking about buying one myself.\"\n\n\"Oh. Is there a...Mrs. Wheeler or just you and your little princess?\" she asked very politely.\n\n\"Oh, don't let her hear you call her that, okay? It's\u2014ballerina.\"\n\nMorgan winced as though she'd done something very wrong then whispered, \"Sorry. It'll never happen again. Ballerina it is.\"\n\n\"But no, there's no...Mrs. Wheeler,\" he said quietly and without a smile.\n\nHe saw the discomfort on Morgan's face thens said, \"Her mother and I aren't married.\"\n\n\"Oh, well, my husband and I lived together for a year or so before we got married,\" she offered.\n\n\"It's...it's not that,\" Jake said. \"We uh, we never did get married or even live together. Becca's mom passed away and I uh, I've been raising her by myself for the last 3 1/2 years or so.\"\n\n\"Oh, my. I should probably stop asking questions before I bury myself in the huge hole I've just dug. For myself.\"\n\nMorgan looked almost mortified, so Jake smiled and said, \"If you'd have called me, I'd have dug it for you. And...at a discount.\"\n\nVery relieved, she laughed and thanked him for bailing him out.\n\n\"My pleasure,\" Jake assured her.\n\nJust then, the same man came out of the bathroom and Morgan again put her arm through Jake's and laughed, as she said a little too loudly, \"The master bedroom is just as nice. I could see us having a lot of fun in there, too, honey!\"\n\nThe older, balding, heavyset man gave Jake a dirty look as he walked by without excusing himself as Jake said, \"Oh, there you go again. You and that...dirty mind of yours.\"\n\nThe man was far enough away that Morgan was able to laugh without drawing attention.\n\n\"Oh, my goodness! If only I were a few years younger!\" she said very playfully. \"Or maybe...many years younger.\"\n\nJake suddenly felt like he had to say something, and it came out before he had time to think it through.\n\n\"You're quite possibly the most attractive woman I've ever met, Morgan. I have no idea how old you are, but I don't really care. And well, I...I haven't asked anyone out in a long, long time, but I...I was wondering if you might like to, you know, um...\n\n\"Jake. Wait. Are you...are you asking me out?\" she said, her eyes filled with disbelief.\n\nHe saw the look then looked away for a second before saying, \"Well, I kind of was, but after that reaction, I think I'll see if I can find a rock to slither...\"\n\nShe reached out and touched his arm then smiled.\n\n\"I...I'm...flattered. I just wasn't sure you were being serious. You know, after our um, faux whatever that was we just did. Twice.\"\n\n\"I was. I was being very serious,\" he told her.\n\n\"My daughter is always nagging at me to start dating again and to be open to new possibilities. I've only dated a couple of times, but if you don't think the age difference is...too extreme...I...I think I'd like that.\"\n\n\"Really?\" he blurted out, again realizing his 'game' needed a lot of work.\n\n\"Yes. Really,\" Morgan replied. \"I don't know anyone here in Auburn, and the friends I had have either moved away or...\"\n\nShe wanted to say, \"Died,\" but left that alone.\n\n\"Well, in that case, could we maybe exchange phone numbers?\"\n\n\"Oh, yes. That might help, huh?\" she replied, that dazzlingly white smile there again. \n\nOnce they had each other's numbers, Jake agreed to call or text her and see if they could agree on what to do and when.\n\n\"Oh, I'm not hard to please, Jake. I'm up for almost anything, so you choose and I'll be glad to go with you. And if you want to bring the little prin\u2014ballerina\u2014along, that would be just fine by me.\"\n\n\"Okay. I'll definitely let you know,\" he told her.\n\n\"And I'll look forward to it,\" Morgan told him just as Becca came zooming in.\n\n\"Daddy? Where have you been?\" she asked as she latched on to his leg, relieved to have found her father.\n\n\"I was just talking with Morgan,\" he told her. \"Is that okay?\"\n\nShe looked up and the older, beautiful woman and nodded.\n\n\"Yes. It's okay, cuz she's very pretty.\"\n\n\"Ohh! Thank you, sweetheart!\" Morgan told her as she bent down again.\n\n\"My mommy was very bootiful. Just like me,\" the little girl informed her very matter of factly, causing Jake to shrug his shoulders meaning 'kids say the darnedest things'.\n\n\"Well, I'm sure she is, because you are such a pretty...ballerina,\" Morgan said, using the present tense where her late mother was concerned.\n\n\"Thank you!\" Becca said before tugging on her dad's finger again. \"Daddy. Come on. I have to show you something, okay?\"\n\nJake shrugged again and Morgan laughed as she said, \"Go ahead, Dad. Have fun!\"\n\n\"I will call you!\" he told her as Becca drug him off again.\n\n\"Bye!\" she called back as she looked around for 'Creepy Guy' before deciding whether or not to look at the rest of the model home.\n\nAs often happened, the thing Becca just had to show her dad was something only a five-year old could appreciate, so after dutifully saying, \"Oh, how nice,\" Jake walked up to Kayla and asked her if she wanted to leave.\n\n\"Yeah, but we kinda just got here,\" she replied.\n\n\"I got more than I ever dreamed of already, so if you're game...\"\n\nShe looked around for their dad, and seeing the coast was clear, she said, \"In that case, let's blow this popsicle stand!\"\n\n\"I want a popsicle!\" Becca said as her father picked her up and quickly walked outside.",
        "Her father went to answer her when he saw Morgan, who'd somehow slipped out behind them unnoticed, opening the door of her car. She heard Becca's comment about a popsicle and turned around and laughed.\n\n\"I left because Creepy Guy started heading my way again, and without my pretend boyfriend, I wasn't about to stay. But why are you leaving?\" she asked, that beautiful smile on her face.\n\n\"We're uh, bustin' out,\" Jake told her.\n\n\"Do you want a popsicle, too?\" Becca asked.\n\nMorgan gave her dad a funny look, and as he thought about explaining what that meant, he had another dose of courage rise up inside him, and without asking Kayla said, \"We were thinking about stopping by Dairy Queen for a...popsicle. Would you...maybe want to join us?\"\n\nKayla was smiling at Morgan as she whispered to her brother, \"What in the world are you doing?\"\n\n\"Come with us, Morgan!\" Becca said before Morgan could reply. \"You can have a yellow popsicle and I'll have red.\"\n\n\"I...I don't want to...\"\n\n\"You're not,\" Jake told her, no matter what else she was about to say. \"We'd love to have you join us. Right, Kayla?\"\n\n\"Oh. Yes. Of course we would!\" she said, still smiling as she gently elbowed her brother.\n\n\"My treat, of course,\" Jake added.\n\n\"If you're sure,\" Morgan said, the look on her face showing she felt like she was interrupting a family tradition or something.\n\n\"We're sure!\" Kayla said, barely able to wait to hear what this was all about.\n\n\"Okay. I guess I could follow you.\"\n\n\"All right. That sounds great!\" Jake told her. \"It's the one by Les Grove Park on South Auburn Way North.\"\n\nMorgan laughed then said, \"That's too funny. I have no idea who named the streets around here, but they're so confusing I'm just gonna have to learn my way around again.\"\n\nJake set Becca down, grabbed his phone, then sent Morgan a text. \n\n\"That's my number in case we get separated. Again.\"\n\nMorgan gave him another funny look causing Jake to laugh.\n\n\"You know, like when I wasn't there for you when your favorite guy came calling again.\"\n\n\"Oh! Duh!\" she said as she checked her phone. \"Okay. I'll try and stay behind you, but I can at least send out an SOS now if you lose me.\"\n\nKayla wasn't sure if she was enjoying watching her brother act all love struck or annoyed at him making a decision without asking her first. But this might just end up being fun, so she decided not to complain as Jake made an 'aw shucks' face while he promised her he wouldn't drive too fast.\n\nOnce they were in the car and back out on the road, Kayla said, \"Okay. Now talk.\"\n\n\"About?\" Jake said, causing his sister to make a snorting sound.\n\n\"About? Are you kidding me? What's up with...with the...date...thing. With the very hot, older woman? Were you not listening?\" she replied.\n\n\"Okay. First of all, it's not a date. Second, yes, I was listening. But she's here by herself and doesn't know anyone in town, and we haven't been to DQ for a long time. It just seemed like the polite thing to do.\"\n\n\"Oh, okay. For a minute there I thought my brother was losing his mind or something,\" Kayla said, the sarcasm dripping from her words.\n\nJake looked over at her then fessed up.\n\n\"I uh, I kind of...asked her out.\"\n\n\"Yeah. I was there, remember?\"\n\n\"No. Before. Inside the model home.\"\n\n\"Oh, my... Jake? Are you...crazy?\"\n\n\"Maybe, but...I kinda like her,\" her brother replied.\n\n\"Like her? You just met her! You don't even know her, for goodness sakes!\"\n\n\"That's why I asked her to join us,\" he told her, ignoring her strident tone of voice.\n\nHe looked back at Kayla who was staring at him and shaking her head.\n\n\"What? She's really nice,\" her brother told her.\n\n\"Just...wow,\" Kayla said, never taking her eyes off of her brother.\n\n\"I agree. She is pretty hot, huh?\" Jake replied, knowing the needling would send his sister into a tizzy.\n\nKayla shook her head and put her hands up in surrender mode.\n\n\"Okay. Fine. Go ahead and spend time with some...50-year old woman. It's your life!\"\n\nKayla was shaking her head in that 'oh, my god' kind of way, and this time, it didn't annoy Jake. He just laughed.\n\n\"I'd say she's about 40,\" he told her.\n\n\"Uh-huh. With a kid in college. Right,\" his sister said before adding, \"Genius.\"\n\nJake put his left turn signal then said, \"Okay. Aren't you the one who's always telling me I need to start seeing someone?\"\n\n\"No!\" she replied immediately. \"I am not 'always' telling you anything. I mentioned once a couple of weeks ago that you should maybe...\"\n\nKayla realized she was about to say, \"Start seeing someone,\" so she stopped talking and just glared at her brother, who, in turn, started laughing.\n\n\"Are you guys fighting?\" Becca asked.\n\nKayla spun her head around and said, \"No. Not at all, sweetie. Your daddy and I were just...having a discussion.\"\n\nJake looked in the mirror, smiled then told his daughter, \"That's right. Your Aunt Kayla was just reminding me what a genius I am.\"\n\nKayla balled up a fist then put it down before Becca noticed. She waited for Jake to look her way then mouthed the word, \"ASSHOLE!\" causing him to laugh even harder.\n\n\"Daddy? Are you happy?\" Becca asked when she heard him laugh a second time.\n\nHe was going to tell her 'yes' when he realized why she'd asked. While he was never mean or unfriendly, he rarely laughed anymore; something he used to do all the time.\n\n\"Yes. I guess maybe I am, honey,\" he told her.\n\nSatisfied, Becca went back to whatever she was doing or thinking.\n\nThe Dairy Queen was just up ahead on the right, so Jake put on his blinker again just as he noticed Morgan pulling in right behind them.\n\nAs he parked the car, he said to his sister, \"Would you get Becca for me, please?\"\n\nHe turned the engine off and flew out of the car before Kayla could say, \"Sure,\" or ask him why. But when she saw where he went, she knew why.\n\n\"Here. Let me get that for you,\" Jake said as he ran up to Morgan's side of her car.\n\n\"Oh. Um...thank you!\" she said as he opened it for her then stood back. \n\nAs she got up, her also offered her a hand and got another 'thank you' as she asked where his little ballerina was just as Kayla got Becca out of the car seat.\n\n\"Her uh, her aunt is getting her,\" Jake said as he closed the door for her.\n\nMorgan had no idea what Kayla was thinking, but as she walked up with Becca, she said, \"This is so nice to be with a family that enjoys spending time together.\"\n\nKayla smiled again just like she'd done before then said, \"Oh, I never get tired of spending time with my brother. I mean, how could I when he's a genius?\"\n\nThe look she gave Jake when Morgan turned to walk in was classic. Adding insult to injury, Becca let go of her aunt's hand and took Morgan's who was pleasantly surprised.\n\n\"You can sit with me!\" the little girl told her.\n\n\"I would like that very much!\" Morgan let her know with a bright, happy smile. \n\n\"Cuz my daddy and my Aunt Kayla like to spend time together,\" Becca said, repeating what she'd just heard.\n\n\"You're a very lucky young lady,\" Morgan told her as Jake reached around and opened the door as they got to the entrance.\n\nMorgan and Becca walked through, and Jake moved like he was going to close it on his sister when she elbowed him again.\n\n\"I will hurt you!\" she said quietly in the way only a sister could.\n\nJake laughed again then let her go through as Morgan picked Becca up so she could see the menu board.\n\n\"I don't think they serve popsicles, sweetheart. You might have to choose something else,\" she said to Becca as she looked at Jake for his approval.\n\n\"You can have anything you want today, honey,\" Jake told his baby girl.\n\nAs she was deciding, Jake asked Morgan what she'd like.\n\n\"I haven't had a soft ice cream cone in forever. Would that be okay?\"\n\n\"Of course. And I think I'll have the same only I might get mine dipped in chocolate.\"\n\n\"Chocolate! I want chocolate ows cream!\" Becca announced as Kayla snidely said to her brother, \"Don't worry about me. I'll be fine.\"\n\n\"I never worry about you,\" he said just as quietly and drew a third elbow jab. \n\nHe rubbed his side then said, \"Good thing I've got health insurance!\"\n\nJake ordered for everyone but Kayla but did hear her brother say, \"Put hers on my tab, too, please.\"\n\n\"Gee. Thanks!\" Kayla said, that faux smile glued to her face.\n\nMorgan was still unaware of the sibling banter and asked Becca if she wanted to get down.\n\n\"No. You can hold me,\" she informed the pretty woman who had her in her arms.\n\n\"Well that makes me very happy,\" Morgan let her know, that genuine smile still on her face. Lips Jake had noticed were soft and full and very...\n\n\"Soft ice cream cone,\" the girl behind the counter said as she handed Morgan's order to her.\n\nJake came to her rescue and grabbed it so she wouldn't have to let go of Becca then pulled his wallet out before his cone came across the counter and got out a twenty.\n\nHe handed it to the same girl when she gave him his order, and Kayla finally smiled a real smile then said, \"I'll grab Becca's. You go ahead and sit down.\"\n\nShe whispered, \"With your girlfriend.\"\n\nJake gave her a playful elbow then said, \"Thanks, sis.\"\n\n\"Oh, you're gonna owe me, but...you're welcome. And I'm keeping the change.\"\n\n\"Hey, you teach school. You'll need it,\" her brother said, smiling and pulling away before she could give him a fourth elbow.\n\nMorgan hadn't seen or heard any of it as she was busy getting a booster chair for Becca after being told, \"I don't need a highchair, cuz I'm big now.\"\n\nAs Jake walked up, Becca was seated, and Morgan was still smiling. \n\n\"I just love her!\" she said as Jake waited for her to sit down.\n\nShe smoothed her skirt, then slid in. Jake handed her her cone, and she grabbed a bunch of napkins for everyone. Kayla set Becca's cup of chocolate ice cream down, wrapped a napkin around her neck, then put a spoon in the cup and said, \"Be careful, sweetie.\"\n\n\"I will!\" Becca promised as she took a huge first bite, most of which fell on the napkin.\n\nMorgan hadn't taken her eyes off the pretty little ballerina and was having more fun watching her eat than she was with her own cone. When it finally dripped she realized she was the only one not eating. She wiped up the little drip, took a first lick then said, \"Oh, my. That is SO good!\"\n\n\"So you weren't kidding about being easy to please, were you?\" Jake said with a smile as he carefully took a second bite, knowing pieces of chocolate would fall off onto a napkin waiting below.\n\n\"No. Definitely not,\" she told him. \"I'm a meat and potatoes kind of girl.\"\n\n\"I'm guessing you don't actually eat meat or potatoes, though,\" Kayla said, the attitude completely gone. \"You look...really amazing.\"\n\n\"Oh, my gosh! Thank you, Kayla. And I have to say you're a very attractive young woman.\"\n\n\"I think I like her, too,\" Kayla said to her brother while smiling at Morgan.\n\n\"So...Jake said you grew up around here?\" Kayla asked to get the conversation started.\n\n\"I did. Just a few miles north in Kent.\"\n\n\"Sorry to hear that,\" Kayla told her, knowing Morgan would understand the Auburn-Kent Meridian rivalry.\n\n\"Oh, right. Yes, the Tigers vs the Royals. Go Royals!\" Morgan teased.\n\nKayla gave her a fake 'ugh' then asked how she liked being back home.\n\nFor the next half hour or so, the three of them got better acquainted as Becca occasionally chimed in with something that nearly always drew a quiet chuckle.\n\nAt some point, Kayla, who was doing most of the talking, asked about Morgan's late husband, making sure to let her know she understood it was none of her business.\n\n\"I don't mind at all. Gregg was the love of my life. We were married right out of college and had just over 21 wonderful years together.\"\n\n\"And you lost him...when?\" Kayla asked very delicately.\n\n\"Oh. It was on New Year's Day in 2016,\" she said, causing Kayla to look at Jake.\n\n\"Did I say something wrong?\" Morgan asked, the look on their faces telling her she had.\n\n\"No,\" Jake said.\n\nHe leaned over then quietly told her, \"Becca's mom passed away just minutes before midnight on December 31st, 2015.\"\n\nShe put a hand on Jake's forearm then said, \"I am so sorry, Jake.\"\n\n\"It's okay. It's just the coincidence of that happening. That's all.\"\n\n\"That is unbelievably coincidental,\" Morgan agreed, as she looked at Becca, knowing she was growing up without a mother. \"You've obviously done very well with her, Jake. She's such a sweetie pie.\"\n\nHe thanked then said, \"It's been hard sometimes, you know, but I wouldn't trade one second with my little prince...ballerina.\"\n\n\"Listen, I know this is none of my business, but I know someone who runs a ballet studio not too far from here. Or at least she used to. I drove by the old location yesterday, but it had already closed. I'm pretty sure it just moved, but I haven't had time yet to check. Have you thought about letting Becca take lessons?\"\n\nBecca, her face a mess of dark brown, was now happily coloring with the crayons provided by Dairy Queen, and had no idea what the adults were talking about.\n\n\"I know she'd love that, but I work...a lot, and Kayla teaches 2nd grade where Becca goes to Kindergarten. When Becca gets out of class, she just goes to Kayla's room until school's out. So I don't know how we'd ever fit that in.\"\n\n\"Maybe, at some point, you'd be willing to let me take her?\" Morgan offered, causing Kayla to shake her head slightly as in 'did I just hear you correctly?'.\n\n\"I actually danced a little more than I let on when Becca and I were talking, and if my friend still runs the studio, I think I might just start dancing again myself.\"\n\n\"Now I'm very interested,\" Jake said as he turned toward her. \"Just how much more is 'a little more'?\"\n\n\"I danced all the way through college,\" Morgan told him\u2014and Kayla\u2014was now very interested.\n\n\"May I ask why you quit?\" Kayla asked, trying not to be nosy.\n\n\"Well, when Greg and I got married, his family lived in Spokane, and they owned a business there. I was young and in love, and at the time, he, and later our daughter, Anna, were far more important to me than ballet. Besides, while I was a reasonably good dancer, I knew I wasn't ever going to be good enough to dance professionally, so...I gave it up. With no regrets.\"\n\n\"Wow. That's amazing,\" Kayla told her. \"I can totally see you as a ballerina.\"\n\n\"Ballet was the first love of my life. Had Gregg not some along and swept me off my feet...who knows?\"\n\nMorgan felt like she was doing too much talking and decided she was keeping them.\n\n\"I've truly enjoyed spending time with you,\" she said, \"but I'm sure you have a lot of things to do still, so if you don't mind, I'll go ahead and give you some time without me monopolizing the conversation.\"\n\nJake slid over but made it clear he didn't feel that way at all. \n\n\"No, this was really nice,\" he told her.\n\n\"Yes. I agree. I had a very nice time. And Kayla? It was such a pleasure meeting you.\"\n\nKayla smiled and told her she felt the same way. And it was then she realized it really had been a pleasure meeting Morgan.\n\nMorgan then bent down and told Becca she was leaving.\n\n\"Bye, Morgan!\" she said, barely looking up.\n\n\"Maybe I'll see you again sometime, okay?\"\n\n\"Do you like my picture?\" Becca asked without acknowledging what the pretty woman had just said.\n\n\"I do. It's very...red!\"\n\n\"Red is my favorite,\" Becca told her, the paper almost completely covered in red.\n\n\"Well, it's very pretty. Just like you.\"\n\nMorgan gave her a little kiss on the cheek, and when she did, Becca dropped her crayon and held out her little arms.\n\nMorgan looked at Jake who said, \"We really need to be going, too, so if you don't mind...\"\n\n\"Mind? Oh, my gosh! I can't think of anything I'd like more than to pick this sweet girl up again!\"\n\n\"Chocolate mess and all?\" Kayla said as Morgan grabbed her. \n\nKayla quickly cleaned her up the best she could with the napkins, but there was still a little left over chocolate on her face.\n\n\"Nonsense. She's...perfect!\" Morgan said as she gave Becca a hug. \"Chocolate is temporary, but hugs...are forever.\"\n\nMorgan asked Becca how she liked Kindergarten while she carried her outside as Jake and Kayla walked behind them.\n\n\"Okay. Maybe I was a tad bit...judgmental,\" Kayla whispered as they walked.\n\n\"She's pretty great, huh?\" Jake replied.\n\n\"Yeah. She's really nice.\"\n\nKayla offered to put Becca back in the carseat so Jake could walk Morgan back to her car.\n\n\"I hope this didn't count as our...\"\n\n\"Date?\" she asked with that gorgeous smile of hers.\n\n\"Okay. Date,\" Jake replied, unable to stop smiling.\n\n\"You know, when you first asked me, I told myself it would just be nice to have something to do, and maybe get to know someone a little better. But after spending some time with you, Becca, and Kayla, I found myself thinking I'd enjoy spending even more time with you.\"\n\n\"Yeah?\" Jake asked, unaware of the difference in their ages and levels of education. All he knew was he was deeply intrigued by this beautiful, older woman with the amazing smile. And body. And...everything else.\n\n\"Yes,\" she said happily. \"I mean, if you're not tired of spending time with me already.\"\n\n\"No. And...why would I be?\" he asked, getting more serious.\n\n\"Because I'm...well, because I have a 20-year old daughter while yours is...five?\" she said, asking more than saying.\n\n\"No. That's not a reason that would make me not want to spend time with you. So...got anything else?\" Jake said, trying not to smile\n\n\"Well, okay then. You can call or text me whenever you'd like,\" she let him know even as she wondered what in the world she was doing.\n\n\"I'd kind of like to text you a lot, so be careful saying that,\" Jake told her, halfway between joking and kidding.\n\n\"I'll leave that part up to you, Jake,\" she said very sweetly, as she realized why was doing this. Jake was not only extremely handsome, he was equally charming and had a little girl she already adored. He was too young to be anything serious, but he was a very nice guy, and right now, she really needed a friend.\n\nThere was an initial awkward moment of silence before Morgan said, \"And thank you so much for inviting me. I really did have a wonderful time.\"\n\n\"Me, too,\" he told her.\n\nThere was another longer, more awkward pause before Jake finally opened her door.\n\nMorgan thanked him, smoothed her skirt again before getting in, then said, \"Thanks again, Jake. For everything.\"\n\n\"It was my pleasure, and thank you, Morgan,\" he told her as he closed the door then waited until she drove off.\n\nKayla watched the whole thing, and when her brother got back to the truck she said, \"Someone's got it bad for a beautiful older woman.\"\n\n\"Huh?\" Jake replied, not having heard a word she said.\n\n\"Never mind,\" she told him, wondering if there was really any chance something might come of what would have to be called a May-December romance.\n\nAfter putting Becca to bed that evening, Jake asked his dad if he had time to talk.\n\n\"Gee, I don't know. I've got a hot date lined up\u2014like always\u2014so...\"\n\n\"Okay, okay,\" his son said. \"I just didn't want to assume.\"\n\n\"Sit down. Talk to me,\" his dad said.\n\n\"Well, speaking of hot dates,\" Jake began.\n\n\"Uh-huh.\"\n\n\"I kinda-sorta had one today.\"\n\n\"Hmmm. Would that have anything to do with an extremely attractive blonde woman I saw at the open house today?\"\n\n\"She's kinda hard to miss, isn't she?\" Jake said, agreeing with his father's assessment.\n\n\"You can say that again. She wasn't just beautiful. She had that classy, elegant-but-not-snobbish look, if that makes any sense.\"\n\n\"Oh, it makes a lot of sense. She's quiet, thoughtful, and very down to earth. So 'classy' is a perfect way to describe her.\"\n\n\"I'm still waiting for the big question. Or statement,\" the elder Wheeler said.\n\nJake explained how they all ended up at Dairy Queen, the fact that Morgan was a widow, and how Jake had agreed to call her to go out again.",
        "\"Is the fact that she's closer to my age than yours your concern?\"\n\n\"Without doing the math, and even that would be impossible since I don't know her age, the answer to your question is 'yes'.\"\n\n\"Do you want to have more children, Jake?\" his father asked point blank.\n\n\"What? No. Well, I'm not really sure. Why?\"\n\n\"Because if she's closer to 50 than 40, she won't be able to. In fact, even is she's, say...40...she may not want any more kids. But if that's not an issue, then all that matters is how you feel about each other. Beyond that, it's not my place to tell you how to live your life, son.\"\n\n\"I guess I was looking for some perspective more than advice.\"\n\n\"That I have plenty of,\" his dad told him.\n\n\"You were very young when your mother passed away. I've never gotten over her. I'm 57 years old, and there have been plenty of...opportunities over the years, but I've never stopped loving your mom. I know that's hard to understand. Hell, most people who lose a husband or wife hold out a couple of years. Some make it five. But who holds onto a memory for...life?\"\n\n\"I barely remember her,\" Jake said. \"And it's definitely not my place to tell you what to do.\"\n\n\"No it's not. But my point is, love has a mind of its own, Jake. You could meet some girl who's say...19...and fall in love with her. Things could last for life or maybe just a few months. The same is true with a woman Morgan's age. As far as the 'math' is concerned, you can add. So you don't need me to tell you how old she'll be when you turn 40 or 50. And only you can decide if that matters, and if so, how much.\"\n\n\"I know Becca needs a mom. Kayla's great, but she's her aunt. And since Leanne died, I haven't been on five dates total. But the funny thing is, I haven't really wanted to date anyone.\"\n\n\"But with Morgan it's different, huh?\" his father correctly observed.\n\n\"Yeah. It doesn't make any sense, but I...I really like her, Dad.\"\n\n\"Well, if she really likes you, I'd say you've just answered your own question.\"\n\nJake smiled then asked his dad how he got so much smarter than back when Jake was 14 or 15.\n\n\"It's funny how that works, isn't it? Right now, Becca thinks the sun rises and sets with you. But in ten more years, you'll be dumber than a post. And then, when she turns 20 or 25, you'll be almost as smart as you are now,\" his dad said with a laugh.\n\n\"I just can't do anything that would hurt Becca.\"\n\n\"No. No you can't. But you have to care of yourself, Jake. It may seem like Becca is your whole life, but I promise you she's not. She has to be the most important thing in it, but you only have one life yourself. Your mom and Leanne would have never guessed theirs would end so soon, but life has no guarantees. Well, with one exception.\"\n\n\"I thought it was two; death and taxes.\"\n\nHis dad laughed then said, \"With the way technology is going, the only certainty down the road might be taxes.\"\n\nJake laughed, too, then said, \"Thanks, Dad.\"\n\n\"I hope that helped. Sometimes all you need to do is say out loud what you're thinking to someone else.\"\n\n\"Yeah. And in this case, that would be true.\"\n\n\"So...what did you decide?\" his father asked.\n\n\"I'm gonna call her right now. Well, I'll be texting her, but same thing, right?\"\n\n\"For your generation, maybe. If that works for you, give 'er a go.\"\n\nJake got up then said, \"Dad? Are you really never going to try and find someone else?\"\n\n\"For now, I've got you, your sister, that little ballerina of yours, and the best job a man could have. So for me, the thought of sharing all my quirks and whatnot with some new woman, and having to put up with hers, just doesn't seem very appealing to me.\"\n\nJake thought about replying but couldn't think of anything to say other than, \"Maybe Morgan will come to her senses about dating some...kid...and this will be over before it starts.\"\n\n\"I don't know. I just read where Heidi Klum, who's 45, married some 'kid' who's 29.\"\n\n\"Wait. You read that kind of stuff?\" Jake said, nearly stunned.\n\n\"That's one of the things I don't want to have tell any woman, okay?\" his dad said with a laugh.\n\n\"Did you know Kate Beckinsale, who looks a lot like Morgan, by the way, is 'cavorting' with a 29-year old herself?\" Jake asked, thinking he'd just one-upped his father.\n\n\"I uh, I kinda knew that, too,\" his father replied, wincing as he did.\n\nJake laughed a hearty laugh, shook his head, then said, \"Your secret's safe with me, Dad.\"\n\n\"Goodnight, son. And best of luck.\"\n\n\"Thanks, Dad. And...I love you.\"\n\n\"Oh, geez. There you go ruinin' an otherwise really nice talk,\" his father snarled before winking at his son and saying, \"Back atcha, Junior.\"\n\nIt wasn't that his dad was incapable of saying those three words. It was more that he was a man's man whose father never said them, either. And Kayla had only heard them a handful of times, so it wasn't a big deal. But Jake made it a point to tell Becca he loved her every day, and were he ever to find someone else to love, he'd tell her every day, too.\n\nAs Jake sat there trying to think of where to take Morgan he realized he didn't even know what to say. It had been so long since he'd had anything close to a relationship with a girl\u2014or in this case\u2014a woman...that he had no real idea where to even begin.\n\nAll he could do was be honest and say what was in his heart. The rest would be up to her. So with that in mind, he sat down and starting texting.\n\n\"Hi, Morgan. I wanted to let you know what a great time I had with you today and thank you for joining us. I was sitting trying to think of how long it's been since I had such a nice time, and I'm drawing a blank. So thank you for that.\n\nAs to getting together again, I know you said you're easy to please, but I'd like to do something we both enjoy.\"\n\nHe thought for a moment, smiled then decided to say, \"I honestly think I'd enjoy anything you and I did together, but could you maybe let me know what interests you? I'd hate to take you skeet shooting only to find out you enjoy art galleries. Or that you are strongly opposed to guns of any kind.\"\n\nNow feeling like he was starting to run all over the map, Jake finished with, \"I guess I'm trying to say you really made an impression on me today, and if possible, I'd like to make one on you.\"\n\nHe reread it, didn't think he could improve on it without making it worse, and hit 'send'.\n\nMorgan was on the phone with her daughter when her phone let her know she'd received a text.\n\n\"Oh, speaking of Jake, guess who just texted me?\" she told Anna.\n\nHer daughter laughed and couldn't resist saying, \"Oh, gee. Could it be your BOY friend?\"\n\nMorgan laughed knowing it was all in good fun. Anna had been just as devastated when her father died as her mother was at the loss of her husband. She wasn't wealthy so there was no need to be concerned about some younger man worming his way into her life to take her money. Anna also knew what kind of experiences her mother had had dating men 'her own age'.\n\nAt 45, Morgan still looked beautiful. She had a body that matched her face, and her face was youthful looking. No, she didn't look 25 anymore, but virtually no one would guess her to be over 40 and many mistook her for a woman who was 35-ish. And it had happened enough that Anna knew it wasn't just people being polite. Her mom looked young, fit, and pretty, so to some degree, at least, she understood how she felt.\n\n\"I just look at most of the men who are single and 50-ish and find myself asking how this happened,\" her mom had tried explaining a few months earlier.\n\nShe obviously knew how it had 'happened'. People age with time. It was simple. What she really meant was, \"How could I not have noticed the dramatic changes over time?\"\n\nThe answer to that was she and her husband had grown older together, and because she'd never once looked at another man 'like that', it really caught her by surprise to learn that men who were 'her age', meaning from 45-50 or so, looked the way they looked. It was more an indictment on her than them, but she couldn't change how she felt. At least not yet, anyway.\n\nAnna remembered laughing when her mom apologized for feeling that way as though she should be different than other people and be able to control every thought she had and change those that caused her concern.\n\n\"Mom. I get it,\" Anna had said. \"You have to be at least moderately attracted to the other person. But that doesn't mean there aren't men out there your age you'll find attractive. You just have to keep looking.\"\n\nThe truth was, Morgan hadn't even been able to look for the first two years after losing her husband. She was 43 by the time she could look, and even then, her heart wasn't in it. It was really only the last 6-8 months that she'd started looking in earnest, and now she found herself wondering if being alone was really all that bad.\n\nAnd then she'd met Jake.\n\n\"So...what's in the text?\" Anna asked, as both of them thought about the things they'd shared about dating since her father passed away as they talked.\n\n\"Well, it's...very sweet,\" her mom answered. \"He almost seems a little nervous, but I think that may be due to his not having dated much since Becca was born.\"\n\n\"Speaking of sweet, she sounds adorable!\"\n\n\"Oh, my goodness. You have no idea. She is such a little doll!\"\n\nMorgan laughed then corrected herself.\n\n\"I meant to say 'ballerina'.\"\n\nShe'd told Anna about that, and her daughter had laughed.\n\n\"At that age, getting the term right is a really big deal, huh?\" she told her mom.\n\n\"I suppose so, but the funny thing is, it made me really think about maybe dancing again.\"\n\nThere was a fairly long pause before Anna said, \"Is that something you're seriously considering or are you just sort of thinking out loud?\"\n\n\"I'm not sure, honey. But I'm going to track down Connie Martin, and if she still has the studio, I'm definitely go to go talk to her and maybe explore the idea.\"\n\n\"Is the idea for you dance or to maybe teach?\"\n\n\"Oh, gosh. I couldn't possibly teach ballet. It's been so long, I'd have to be retaught myself. I'm sure it would come back pretty quickly, but I'd have to learn how to teach before I could risk trying it.\"\n\n\"Well, I think it's a wonderful idea, Mom. Just the exercise value alone would be fantastic, and it would be something for you to do, as well.\"\n\n\"I am going to have to find a job, you know. Even after selling the house in Spokane, it'll only buy a much smaller place anyway in King county. So while I won't have a mortgage, I will have to pay the bills.\"\n\n\"Now you're making me feel guilty for asking you to move out here,\" Anna replied.\n\n\"No. Not at all. I wanted to move back here. I've missed the green, and I really love the area. But the cost of living is so much higher than it is in eastern Washington. I wasn't complaining, I was just stating a fact.\"\n\n\"Well, I'm thrilled you're over here, and I can't wait until you find a place. Speaking of which...do you think you'll buy in the development you looked at today?\"\n\n\"I'm giving it some very serious thought. Staying in a furnished apartment is very expensive, and that's money I'll never get back. So while I don't want to rush a decision, I do need to find a place. I took some brochures today, and I could easily afford their smallest floor plan which is 1,550 square feet. I might even be able to handle one a little larger. But yes, so far that's my favorite place.\"\n\n\"Okay, so...let me ask you this. Are you going to see this Jake guy again?\" her daughter finally asked straight out.\n\n\"I think I am,\" Morgan told her. \"Why? Do you think I'm making a mistake or maybe lost my mind?\"\n\nAnna laughed then said, \"No. Neither one. You and Dad had a wonderful marriage, and that's something I want somewhere down the road. So as long as someone makes you happy, and assuming he's not a 'Dirty John', what else matters?\"\n\nThe TV series, Dirty John, was all the rage. It explored the life of a master manipulator named John Meehan who married a wealthy woman named Debra Newell in Southern California. Meehan wasn't just manipulative, he was evil. He was a drug addict, a pathological liar, psychologically abusive, and according to every definition of the word\u2014a true psychopath.\n\nMorgan laughed again then reminded her daughter she didn't have that kind of money.\n\n\"No, but that doesn't mean you couldn't get hurt,\" Anna told her very carefully.\n\n\"True, but that's the case no matter who I date. Or who you date, for that matter.\"\n\nAnna sighed then said, \"I know, I know. Reality sucks, huh? I mean, you learn all these fairytale things growing up then, one by one, you find out that's not how the real world works.\"\n\nHer mom smiled but didn't laugh as she replied.\n\n\"The good news is that you're learning hard truths the easy way. I pity those who have to find out how unfair life really is the hard way. Like Debra Newell.\"\n\n\"And on the pleasant note, I guess I'll let you go,\" Anna said, knowing her mom was, as usual, right about everything she said.\n\n\"I'll call you tomorrow then, okay?\"\n\n\"Sounds good, Mom. Love you!\"\n\n\"I love you, too, sweetie. Bye!\"\n\nAs she hung up with her daughter, Morgan's heart fluttered as she reread Jake's text, and the fact that did confused her as she'd already decided he was going to be a friend but not a boyfriend.\n\nBesides, she'd already decided to see him again, so it wasn't some strikingly new revelation. And now that Anna knew what she was doing and approved\u2014or at least didn't strongly disapprove\u2014she felt even more confidence in the decision she'd made. So why did this flutter thing happen? \n\nIn the end, Morgan decided it was nothing more than having an attractive man, age aside, interested in spending time with her. So whether they went out just one more time or maybe even a few times, she realized it wasn't a big deal the way it could be were he say...40 or so. \n\nShe thought about what to say then tapped out her reply.\n\n\"Hi, there! I'm so glad you texted me. I'm starting to like this new way of communicating!\" she began.\n\n\"As to what I enjoy, I would be equally happy shooting skeet or walking around an art gallery. I'm as okay with McDonalds as I am with a swanky restaurant. In fact, I tend to prefer the less expensive things, so I really will be happy almost anywhere you take me.\n\nPlease just let me know in advance so I don't wear a cocktail dress to the skeet range or camouflage pants to the art gallery. Beyond that\u2014you choose and I'll be happy to tag along!\"\n\nSatisfied with what she'd written, Morgan sent it and smiled again.\n\nA few minutes later, she got a reply which made her smile yet again as she read it. Actually, she smiled all the way through.\n\n\"I was sitting here trying to envision you in camouflage pants, and I just can't see it. Kayla said you were not only beautiful but classy, and I have to agree with her. So while you might surprise me, I'm not buying the camouflage thing just yet.\"\n\nThere were smiley faces then more text.\n\n\"I haven't been to the Seattle Science Center since I went on a field trip back in the 5th grade. I'm not sure Becca's old enough to appreciate it, but I know she'd love spending time anywhere with me, and the truth is, I'd enjoy spending time anywhere with\u2014you. So if that sounds okay, then my only full day off (normally, anyway) is Sunday. Will that work for you?\"\n\nMorgan was still smiling when she typed, \"Yes. That sounds positively lovely. And I promise I won't wear camouflage\u2014this time. And Jake? I wanted to tell you again I also had a really nice time today. Lastly, please tell Kayla 'thank you' for the compliment. I'm not sure I'm all that 'classy' (or beautiful), but it was very nice to hear.\"\n\nShe didn't set the phone down this time, and just seconds later, Jake's next reply came.\n\n\"I'll let her know, but I beg to differ. On both counts. I think those words are very fitting. Both of them. And you can wear anything you like as I have no doubt you'll look great in whatever it might be. I was thinking we could leave around 9:30 Sunday morning, get there a little after ten then look around until we get hungry enough to eat lunch. After that we can play it by ear. Sound good?\"\n\n\"Yes. That sounds...perfect,\" Morgan typed. \"Have a wonderful week, Jake!\"\n\n\"You, too...beautiful,\" he replied seconds later.\n\n\"I really do like this texting thing,\" she said out loud to herself once she read his final reply, unaware she hadn't stopped smiling.\n\nAs she got ready for bed that night, in spite of everything she'd told herself, Morgan couldn't help wondering what it would be like were she to really fall for someone as young as Jake Wheeler. She knew it wasn't something she needed to worry about, but it was still interesting to contemplate. Of course, her contemplations never took into account disagreements, gaps in Jake's experience base when it came to things she lived through before he was born, or anything else couple's deal with that aren't always fun. \n\nFor now, she was content to see where this might go, enjoy whatever time they had together, and since that included the sweet little ballerina, it seemed like a reasonably pleasant thing to contemplate.\n\nIt was Tuesday before Morgan was able to track down the new location of her friend's dance studio, and that was because the name, as well as the location, had changed. It was now on the opposite end of town, and the name was nothing like what it had been called before. Lastly, Connie Martin was now Connie Gilmore, but Morgan did find her, and the two of them agreed to meet for lunch that afternoon at one o'clock.\n\nThe two women hadn't seen one another in close to 15 years, and the last time had been during a trip back to the Seattle area when Morgan's father passed away.\n\nMorgan recognized her longtime friend immediately, and she wondered if Connie saw the same changes in her that she was seeing in her friend. Fifteen years ago the changes had seemed minimal, and maybe somehow, even better as they had matured into beautiful women by then. But now, Connie no longer looked young, and Morgan again felt guilty for even noticing such things.\n\n\"Morgan! Oh, my goodness! Look at you!\" Connie squealed as they embraced just outside the restaurant where they'd agreed to meet. \"You...you make me sick!\"\n\nAs they pulled away from one another, Connie looked at her again and said, \"That is just SO not fair!\"\n\n\"You look great yourself!\" Morgan said supportively. It wasn't exactly true, but Connie was still petite and quite likely still a very good dancer.\n\n\"The divorce took a heavy toll me,\" Connie said as they sat down. \"And having three kids will do that to you, too.\"\n\nMorgan was deeply saddened to learn her friend's former husband had had an affair. In fact, it was a series of affairs; the last one with a much-younger woman for whom he left his wife.\n\n\"But you're remarried now, so that's gotta be pretty great, right?\" Morgan said.\n\nConnie sighed then said, \"It's...okay.\"\n\nShe was no longer smiling, and that made Morgan stop smiling, too.\n\n\"Oh. I...I'm sorry,\" Morgan said, not knowing what else to say.\n\n\"No. Don't be sorry. I mean, when you get married again and you're over 40, you can't expect Prince Charming, right?\" Connie said as cheerfully as she could. \n\nAs they talked Morgan learned that her friend's second husband was someone with whom Connie felt comfortable. He was 49 years old, more than a few pounds overweight, his hair was thin, and worst of all, he wasn't what one would call 'attentive'.\n\nConnie didn't need to be fawned over. She'd just wanted someone she could share her life with. Initially, that's how things with her new beau had seemed. But not long after they married, he stopped showing much interest in the things that were important to her, and their...love life...had deteriorated into once or twice a month, and even then, it wasn't exactly fulfilling. It was more...obligatory or maybe just going through the motions.",
        "\"So while I'm not...unhappy,\" Connie said, summing up her new marriage, \"I'm not exactly thrilled. But then, I don't look like you, so please don't think you won't find someone truly amazing.\"\n\nBefore Morgan could reply, Connie leaned toward then said, \"Looking back, I wish I'd have had the confidence to date a younger man. I actually got asked out once by a very attractive guy who was maybe in his late 20's, but I couldn't take him seriously, you know? But now? Well, I guess I'll never know.\"\n\nShe looked right at Morgan then said, \"Just don't close yourself off to...new possibilities, okay?\"\n\n\"Oh. No. I...I'll definitely keep an open mind,\" Morgan told her as she wondered how in the world that subject came up at this exact time as she hadn't so much as mentioned Jake.\n\n\"So...is there anyone in your life?\" Connie asked as they ordered their food.\n\n\"Um...no. Not...not really,\" Morgan replied, being mostly honest as Jake wasn't exactly 'in her life'. \"I'm just recently back in the area, and you know, trying to get my bearings.\"\n\n\"Well, no hurries, sweetie. Take your time, and above all else, do not settle. Please, please promise me you won't do that.\"\n\n\"I...I promise,\" Morgan told her before the conversation shifted to ballet.\n\nMorgan now felt like mentioning Becca would be inappropriate and lead to her 'relationship' with Jake, so she just let Connie talk about classes, ages, and times.\n\n\"But honestly? I'm really thinking about selling the studio.\"\n\nThat comment surprised Morgan who asked her if business was down.\n\n\"No. It's great. It's...fantastic. I'm not into politics, so this isn't meant to endorse anyone or anything. But I can always tell when people feel good about spending money, and ballet is a luxury on which people are spending. Every class is maxed out, and I even increased my fees for the first time in five years, and no one complained. So, no, it isn't that. I'm just really tired, you know?\"\n\nNot sure what else to say, Morgan mentioned her own interest in dancing again, and before she could even finish explaining why, Connie insisted she stop by the studio and 'suit up'.\n\n\"This will be SO much fun!\" Connie said, nearly gushing with excitement.\n\n\"Well, okay. I don't know when I'll start working\u2014or buy a home\u2014but until I do, I have time, and the money to...\"\n\n\"Nonsense! You're not giving me a dime. No way. Uh-uh. It'll just be me and you flitting around in tutus again!\"\n\n\"Just like old times,\" Morgan said as they both laughed recalling their early years when ballet was everything to both of them.\n\n\"Hey, easy on the 'old' thing, okay?\" Connie warned with a smile\n\nMorgan laughed then nibbled at her lunch as they chatted about the past. An hour later, Morgan promised to stop by in a day or two and wished her dear friend all the best.\n\n\"You, too, hon. It was so good seeing you again!\"\n\nAfter carefully weighing the pros and cons of several plans all the rest of that day and the next, and then sharing them with Anna to get her input, Morgan decided to buy the smallest house in the new development. It made sense since it was just her and Anna, and this way she could afford some nicer finishes without having to borrow any money. \n\nShe'd have about $25,000 left over, and that would have to last her until the house was built and until she could find work. She had to agree with her longtime friend that the economy was doing well, as there were 'Help Wanted' signs everywhere she looked. The only issue would be finding a job she liked or at least didn't dread going to every day.\n\nAfter making her decision, she headed to the dance studio Thursday morning where Connie was in the middle of a class for girls ages 5-7. As Morgan stood there waiting for her friend to notice she'd arrived, she enjoyed watching the little girls work on their positions and other basics. In a brief moment, years of memories and happy times came flooding back to her as she recalled her own earliest lessons in a ballet studio.\n\n\"Morgan!\" Connie called out interrupting her trip down memory lane.\n\nMorgan waved back as her friend hurried over.\n\n\"Can you change and dance with us?\"\n\n\"What? Now?\" Morgan asked. \"Oh, wait. You're telling me this is the level I need to start out at, huh?\"\n\nConnie laughed then said, \"Not at all. But you do need to start somewhere. And I have everything you need in my office. Just go grab what you need in your size and come join us.\n\n\"Well, I guess that's the reason I came, so give me a couple of minutes, and I'll be right there!\"\n\nMorgan loved pulling on the white tights again, and she smiled when she saw herself in a tutu and ballet shoes for the first time in many, many years. She pulled her hair into a ponytail, which she'd put in a bun after this, and walked out onto the dance floor\u2014another longtime first.\n\n\"Girls? Let me have your attention!\" Connie called out after turning off the music.\n\nThe little girls walked over and made a semicircle around her as another adult walked up.\n\n\"Girls? This is one of my oldest...um...dearest friends, Ms. Anderson. Can you all say 'hello' and welcome her to our class?\"\n\nAll of the girls said, \"Hello, Ms. Anderson!\" in unison, causing Morgan to smile and thank them for the warm welcome.\n\n\"She was one of the best dancers I ever knew when we were much younger, and she's going to start dancing again, and we are the lucky group that gets to have her with us first!\" Connie explained.\n\n\"Okay. Everyone back on the rails! Chop, chop!\" she called out.\n\n\"You, too, Ms. Anderson!\" Connie told her friend.\n\n\"Be nice, okay?\" Morgan said, cringing slightly as she walked over to an empty spot and did what the other girls were doing.\n\n\"Okay! First position!\"\n\nHalf an hour later, Morgan realized how rusty she was. But she also realized her body still remembered most of what it had learned. The issues were involved grace and timing. But with time, she knew she could still dance. She'd never be the dancer she'd been when she was 15 or 20, but she couldn't wait to get back into a regular routine.\n\nWhen the class was over, Connie asked Morgan how she felt she did, and she modestly replied, \"Okay, I suppose, for having such a lengthy break.\"\n\n\"Well, you're welcome here at any time, and I absolutely will not take any money from you, okay? You come and go anytime you like, even if I'm not here. In fact, I'm going to give you the alarm code in case you ever want to come in at some crazy hour.\"\n\n\"Connie, are you sure? Because I'm not sure I want that kind of responsibility.\"\n\n\"Oh, okay. Sorry. I think I just got carried away with you being back in my life. That may have been a little much, but how about coming over for dinner one evening? And if you have a date, bring him, too.\"\n\nMorgan hadn't thought about Jake all that much since meeting her old friend for lunch, but she smiled when she thought about Sunday, something she still hadn't mentioned to Connie, but suddenly, doing so somehow just felt right.\n\n\"I kind of recently met someone. As in\u2014just met. So it's too early to ask him to join me, but he's a very nice guy. Anyway, he has a five-year old daughter who wears a ballerina costume every day.\"\n\n\"Bring her in here!\" Connie said. \"I'll find room for her, okay?\"\n\n\"I'll have to ask her father, but I'm sure she would be thrilled.\"\n\n\"And I want meet this man of yours,\" Connie said with a devious smile.\n\n\"Well, as I said, we only just met. I had lunch with him and his daughter, and we're going to the Science Center this Sunday. So bringing him is probably a little premature.\"\n\n\"Ah, okay. I understand,\" her friend said. \"I'm must extremely jealous\u2014no matter who he is.\"\n\nConnie smiled then asked, \"So...is he handsome?\"\n\nMorgan smiled back then said, \"Oh, he's very handsome.\"\n\n\"What does he do? Is he rich?\"\n\nMorgan gave her a little 'be serious' kind of look then said, \"He and his father own an excavation business, so he has a good job, but he's not rich.\"\n\n\"Sorry. I got a little carried away. But if you knew how mundane my life was you'd understand. But enough of that. I'm just so glad to know you're back here and dancing again!\"\n\n\"Me, too, Connie,\" Morgan told her sincerely before she went to change out of the tights and tutu. \n\nShe hadn't even come close to perspiring let alone breaking a sweat, so there was no need to shower again. The two women talked for a few more minutes before her next class showed up then hugged goodbye.\n\nAs Morgan left the studio, she realized she hadn't been this happy since her husband was alive. Between her decision on the house, her return to ballet, being near Anna and meeting Jake, life somehow seemed sweet again. Very sweet indeed.\n\nSunday morning, Morgan was trying to remember the last time she'd been nervous about anything as she woke up feeling both anxious and excited about spending her day with Jake and Becca. She was still slightly sore from her first practice in many years, but it was a good kind of sore, and the kind she knew would pass once she got back into the routine.\n\nShe wanted to wear something nice, but it was going to be a typical February day which meant a low of 35 and a forecast high of 46. She hated wearing another sweater, but it was just too cold for anything else. Besides, whatever she wore would likely be hidden under a heavy coat most of the time anyway, so she gave in and chose something practical.\n\nHer late husband had always liked seeing her in black because it was such a nice contrast with her light-blonde hair and blue eyes. She could also wear a pretty white blouse underneath it, and she had one that had a black tab where the collar met that would be perfect with the black sweater. A pair of dark-gray pants and warm, sensible shoes completed her look which really would be mostly hidden under a black coat. But 'such is life' she told herself.\n\nAt least her long, soft hair would be visible, and with some sheer foundation and a little mascara, Morgan was very satisfied with the way she looked and laughed when she found herself hoping Jake would like it, too. Even just thinking about doing something to please him made her laugh, but it was a pleasant, hopeful laugh that made her feel less apprehensive about what suddenly felt like a cavernous difference in their ages.\n\nThe nervousness waned until her doorbell rang at 9:32. When it did, Morgan's heart didn't race, but it definitely sped up. She went to the door, smoothed her hair, then opened it. When she saw Jake clean-shaven and nicely dressed, it beat a little faster. But seeing the little ballerina all bundled up made everything feel just right.\n\n\"Oh, my! You are so pretty!\" Morgan said to Becca as she let them in.\n\n\"Well, thank you,\" Jake said, as though she'd spoken to him while he tried not to laugh.\n\nMorgan laughed, too, as they tried to decide what to do once they were standing face to face. She was very relieved when Jake reached out to hug her, and she gladly embraced him.\n\nBefore she could tell him he look handsome rather than pretty, he told her she was.\n\n\"You look amazing. Again,\" he said after stepping back and quickly looking her up and down.\n\n\"Oh. Well, thank you. And you look quite handsome yourself.\"\n\n\"And you look bootiful, just like me!\" Becca told her.\n\nMorgan laughed then bent down and said, \"Ah! Thank you, sweetheart. And yes, you are very beautiful.\"\n\nThe sky was clear and cold as they drove north into Seattle, and everything had a kind of 'stark beauty' to it as they watched little curls of steam coming off of buildings here and there as the temperature gradually warmed a little bit.\n\nJake asked Morgan how her week had gone, and she felt extremely comfortable opening up to him and shared everything that had happened.\n\nBecca was awed by the ballet studio and asked if she could go before Morgan could finish explaining things to her father.\n\n\"I have to talk with your daddy first, sweetie.\"\n\n\"Daddy? Can I go? Please???\"\n\n\"Becca? Morgan and I have to talk first, okay?\" he reminded her.\n\n\"Okay. But then I can go, right?\"\n\nThe grownups laughed and her dad said, \"We'll see.\"\n\nJake let Morgan know how happy he was for as far as her choice of homes, and also about getting back together with her friend.\n\n\"It's been a really incredible week,\" she told him. She waited for him to look her way then smiled at him in a way that told him he was included in the incredible part.\n\n\"That goes for me, too,\" he told her with a smile. \"I've felt like maybe my luck is turning around since the open house.\"\n\nMorgan smiled again then heard herself say, \"Yes, me, too.\"\n\nJake noticed then decided to press his luck by extending his right hand as he glanced at her again. Morgan glanced back, smiled, then took it. Neither of them spoke for a minute or so, but each of them squeezed the other's hand back as they drove along.\n\n\"So is science an interest of yours?\" Morgan asked, mostly to break up the quiet.\n\n\"Yes. Actually it is. I love reading about things like black holes, quasars, the Higgs Boson, or seeing the photos of Ultima Thule.\"\n\n\"Ultima Higgs what?\" Morgan asked.\n\nJake neither laughed nor smiled. Those were arcane subjects, and unless one had an interest in them, the average person wouldn't be familiar with any of them other than having maybe heard of black holes.\n\n\"Oh. The New Horizons spacecraft that flew by Pluto was redirected to this small object in the Kuiper Belt called Ultima Thule and recently flew by it. The images were incredible and the fact that they used occultation at that distance was mind blowing!\"\n\n\"Um...no offense, but that didn't help,\" Morgan replied kind of sheepishly.\n\nJake explained it until she understood then tackled the Higgs Boson in very simple terms. When he finished, Morgan shrugged her shoulders again then apologized for asking.\n\nJake laughed then told her he only understood at the most basic levels.\n\n\"Then you're a level\u2014or two\u2014above me,\" Morgan let him know.\n\n\"You're not dating Stephen Hawking,\" he told her with a smile before quickly correcting himself. \"Sorry. I don't know why I said 'dating'.\"\n\n\"I wasn't offended,\" Morgan replied very sweetly as she squeezed his hand again.\n\n\"No?\" Jake said. \"Hmmm. I'm very happy to hear you say that.\"\n\nMorgan smiled then sat there staring at him while trying not to stare. Jake really was a very good looking guy, and for the first time since losing her husband she felt an old, familiar aching deep inside her; an ache that made no sense considering the age of the man causing it.\n\n\"It's just up ahead,\" Jake said as he exited the freeway, unaware of what his date had been thinking.\n\nMorgan was more than pleasantly surprised at how much she enjoyed the day. Every exhibit had been not only interesting but informative, and more often than not, some kind of incredible visual experience to boot. \n\n\"I liked the butterflies the best!\" Becca told them as they left the science center. They'd grabbed a pretzel for lunch, and now all of them were very hungry, so Jake promised dinner on the way home.\n\n\"How about you?\" Jake asked Morgan.\n\n\"I really liked the butterflies, too,\" she told him. She almost said 'holding hands with you' but decided against it. Instead, she posed the same question to Jake.\n\n\"Being here with you,\" he told her without a smile.\n\nHis words made her tummy flutter again, and she fessed up and told him what she'd almost said.\n\nHe reached over for her hand and Morgan happily let him have it. Unlike her husband's hands that were soft from working inside, Jake's were rough and calloused.\n\n\"Don't you operate heavy machinery?\" Morgan finally asked.\n\nJake had felt her checking out his callouses a few times and laughed.\n\n\"Yes, but there are many times I have to grab a shovel or a pick axe and get at something the old fashioned way. Over the years, this is the result,\" he said as he held up his other hand. \"It's not very sexy, but it's how I make my living.\"\n\nMorgan was thinking just the opposite; that Jake's masculinity was very sexy, and that extended to his rather rough hands. Again, she was surprised to hear herself say that out loud.\n\n\"I think your hands are...\"\n\nHe looked at her and she smiled. \"I think...you...are sexy.\"\n\n\"Yeah? Really?\" he replied.\n\n\"Yes. Really,\" she told him truthfully.\n\n\"That's how I've felt about you since I first saw you at the model home,\" he told her as he put his arm around her.\n\n\"I was just working up the nerve to say, you know...how young I'm not...and now I'm afraid to say it,\" she told him as they moved across the parking lot.\n\n\"It won't matter, whatever it is,\" Jake told her, again without a smile. \n\nShe smiled at him, but Jake saw it was a different kind of smile, and it told him this was an issue she was struggling with.\n\n\"I'm 30. In case you're wondering,\" he said, hoping that might somehow help.\n\n\"Oh,\" was all Morgan said in return as she thought about where she was and what she doing when she was 30. \"Preparing for Anna's 5th birthday,\" she told herself as Jake hit the button on his key fob to unlock the doors.\n\nThe overall tone of the day changed dramatically after that, and Jake was beginning to think Morgan would never see him the way he saw her. But the truth was, it was Morgan who was thinking Jake couldn't possibly really be interested in a woman her age. She'd had a pleasant day, and as much as she'd like to have more of them with him and his sweet daughter, she realized that once she 'let the cat out of the bag', he'd find a reason to be busy every day from then on.\n\nBecca fell asleep in the warm cab, and as Morgan looked at her, she quietly said, \"I'm 45, Jake.\"\n\nHe was deep in his own thoughts when she spoke, and it took him a second to 'come back to life'.\n\n\"You're the most beautiful 45-year old woman I've ever seen,\" he replied without thinking.\n\nMorgan saw his facial expression, and more importantly, his eyes when he spoke.\n\n\"Don't you want other children?\" she asked very quietly and tactfully.\n\n\"No. I really don't. Why? Do you?\" he asked, missing the obvious point.\n\n\"Me? Oh, heavens no!\" she replied immediately. \"No. Uh-uh.\"\n\n\"So we agree on that then, right?\" \n\nShe sat there just staring at him for a few seconds then said, \"Yes. Yes, we do.\"\n\nJake finally smiled then asked without any forewarning or explanation, \"Spender or saver?\"\n\n\"What?\" Morgan replied.\n\n\"Well, we agree on children, and that's one of the big five. Or...is it four?\"\n\n\"I uh, I'm lost. Again.\"\n\n\"You know. Children, money, religion. Those big-ticket items.\"\n\n\"Oh. Gee. Duh!\" she said once she understood.\n\n\"I'm not a big spender, and I don't think I'll ever earn enough to be a big saver, but I do like having something for the proverbial rainy day,\" she told him.\n\n\"I've been a saver for as long as I can remember. Except where the Ballerina is concerned.\"\n\nMorgan was much less concerned about age and asked Jake about religion.\n\n\"Not really. You?\"\n\n\"I was raised Methodist but haven't been in...well...30 years.\"\n\n\"Ah, okay. Since, well, since you...\"\n\nHe didn't need to say since he was born, and Morgan was relieved he didn't.\n\n\"Politics?\" he asked.\n\n\"Not really. I find most of them to be a bunch of wealthy hypocrites.\"\n\nJake chuckled then said, \"You sound like my father.\"\n\nHe paused then added, \"And me.\"\n\nThere was only one 'biggie' left, and neither of them wanted to ask. Sex was something neither of them had even thought about, at least not with regard to the other, and it seemed wholly inappropriate to bring it up.\n\nAnd yet Morgan brought it up.\n\n\"I'm...very...open...when it comes to the um, you know, the other big issue.\"\n\nJake raised his eyebrows very high and said, \"Oh, really?\"\n\nHe was clearly teasing, and yet Morgan felt a little defensive all of a sudden.\n\n\"Well, yes,\" she said, as she slowly pulled her hand away.",
        "Jake sensed the change then said, \"I didn't mean to trivialize what you said, Morgan. I think I just wasn't expecting you to, you know, bring that up.\"\n\n\"I don't think I planned to,\" she told him as she looked straight ahead, feeling a little embarrassed that she had.\n\n\"I...I haven't been with anyone since...\"\n\nMorgan looked at him and waited, knowing she was about to be very surprised.\n\n\"Since Becca's mother.\"\n\n\"Wait. You...you haven't...?\"\n\n\"No. No one.\"\n\n\"Jake. Are you serious?\"\n\n\"Yes. I've just buried myself in work and raising Becca,\" he told her. \"I had a...hook up...after Leanne and I called it off, but once I knew she was having my child, things like sex, and even dating, took a back seat to the really important stuff.\"\n\nStunned into silence, Morgan sat there and tried to imagine any man that attractive living a celibate life. Yes, she'd also been celibate since her husband's passing, but their situations seemed very different to her. And as she continued to look over at him, the compassion and respect she felt for him grew with each passing moment.\n\n\"It's been over three years for me,\" Morgan said quietly.\n\nJake glanced her way then held out his hand again. Morgan took it without hesitation, and after that, neither of them spoke until they had to decide where to go to eat.\n\nAs before, Morgan insisted he choose, and Jake knew just the place.\n\n\"Do you like Mexican?\" he asked.\n\n\"I like everything,\" she told him.\n\nJake pulled off the freeway at an Auburn exit then headed for one of his favorite restaurants, La Posada. Waking Becca up wasn't what the little girl wanted, but Morgan said she'd hold her.\n\nAs they walked inside, Becca had her tiny arms around Morgan's neck, and she couldn't remember the last time she'd felt so...whole.\n\nThe conversation during dinner was a lot less intense than it had been on the way back, and the food was delicious. But the thing Morgan found most interesting was when she realized she felt like...like this was her family. Anna, of course, would always be her family, but she couldn't shake the sense that being with Jake and Becca was were she belonged.\n\n\"You have something on your mind,\" Jake said as he watched Morgan's facial expression and the way she was looking at Becca.\n\nWhen she looked at Jake, she also realized she didn't feel 'out of place' being here with him, their age difference aside.\n\n\"I...I don't know, Jake. I was just sitting here thinking how...right...this feels,\" she said, hoping he wouldn't laugh.\n\nHe not only didn't laugh, he said, \"I couldn't agree more.\"\n\nMorgan's flutter turned into something much deeper, and she couldn't hold his stare for fear he'd know what she was thinking.\n\n\"The...the food here is really good,\" she said, changing the subject.\n\nJake didn't push the issue. He was aware that things had changed yet again, and that this time, the change was good. And possibly even...very good.\n\nMorgan invited them in when they got back to her apartment, and Jake accepted with the caveat that it only be for a few minutes.\n\n\"Of course. Becca has school tomorrow, huh?\"\n\n\"Um, no. Actually, she doesn't,\" Jake told her when he remembered it was President's Day.\n\n\"Yay! No school for me!\" Becca said as she climbed up on the couch and sat next to Morgan.\n\n\"Don't you like school?\" she asked very sweetly.\n\n\"Yes. I do. But I like to be at home with my daddy,\" she told her in a very matter of fact kind of way.\n\nMorgan ran her fingers through the little girl's hair and told her she was very lucky to have such a wonderful daddy.\n\n\"I wish I had a mommy,\" Becca said just as innocently. \n\n\"Honey, you have Aunt Kayla,\" her father reminded her.\n\n\"Yes. I know. But she can't go night-night with you.\"\n\nBecca's answer surprised both her father and Morgan. She was sitting between the two adults when she got up and said, \"Here. Sit next to Morgan, Daddy, okay?\"\n\n\"Oh. I don't know, honey,\" he said as he looked at Morgan who smiled at him.\n\n\"That would be fine with me,\" she told him.\n\n\"See! It's okay!\" Becca said as she grabbed his hand and pulled him toward the beautiful woman in the black sweater and white blouse.\n\n\"Okay,\" he said as he scooted over. \"Now what?\"\n\n\"Now, you put your arm around her,\" Becca said, pointing to Morgan's shoulders.\n\n\"Like this?\" he said, as Morgan cozied right up.\n\n\"Uh-huh. Just like that.\"\n\n\"Is that it?\" Jake asked.\n\nBecca started smiling and Morgan asked what was so funny.\n\n\"Well, now my daddy is 'posed to kiss you,\" the little girl said, embarrassed by her own words.\n\n\"Oh. I see,\" Morgan said as she turned toward her father.\n\n\"You're 'posed to kiss me,\" she informed him.\n\n\"I...I heard,\" he replied as their eyes met.\n\n\"So?\" she said quietly with a beautiful smile.\n\n\"I 'pose I should then, huh?\"\n\n\"Yes. Definitely,\" she replied as she forgot all about the little girl watching them as her father kissed her for the first time.\n\n\"Yay!!\" Becca said as she clapped, startling Morgan back to life.\n\n\"I think someone approves,\" Jake said.\n\n\"That makes two someones,\" she told him very sweetly.\n\n\"No, that makes...three,\" Jake said just as quietly before kissing her again.\n\nBecca giggled again, and this time her father pulled her up on his lap. She only stayed for a second or two before asking Morgan if she could sit on hers instead.\n\n\"Of course you can, honey!\" \n\nMorgan pulled her over and wrapped her arms tight around the Ballerina. Becca was all smiles as she turned her head around and said, \"I love you, Morgan.\"\n\nAlmost instantly, tears welled up in the older woman's eyes as she said \"Ohh! I love you, too, sweet girl!\"\n\n\"Do you love my daddy, too?\" she asked.\n\nMorgan kept smiling and answered as she looked at her father.\n\n\"I'm...getting there.\"\n\n\"Really?\" Jake asked, his heart now beating faster.\n\n\"Yes. Really,\" she told him as she leaned over to kiss him.\n\nBecca followed her lips all the way to her father's, and she never stopped smiling. Until her father told her they should probably be going.\n\nNo one wanted to leave, and Morgan asked Jake if he could maybe stay a little while longer\u2014since there was no school, of course.\n\nWhen Becca heard, \"Sure,\" she clapped for joy.\n\nBut watching grownups kiss wasn't very exciting, and Becca ended up in front of the TV set with the cartoon channel on for entertainment. \n\nIt was nearly ten o'clock when Jake realized how badly he'd lost track of time as they sat and talked and held hands and occasionally kissed.\n\n\"I wish you didn't have to leave,\" Morgan told him understandingly.\n\n\"You do?\" Jake asked, not sure he heard correctly.\n\n\"I know it's very soon to be saying this, but...\"\n\nMorgan looked away and stopped talking, so Jake gently brushed her hair back and said, \"Tell me.\"\n\n\"No. You'll think I'm...crazy. Or worse.\"\n\n\"Why would I think that?\"\n\n\"Because...well, who asks someone to...stay...when they barely know each other, and when...when his daughter is there with him, and...\"\n\n\"Morgan. Are you sure?\" Jake asked.\n\nShe finally found the courage to look at him then managed a weak smile.\n\n\"Jake. I haven't met anyone since my husband died who's even remotely interested me. And...well, I...I was thinking that if you wanted to, you know, end your um...dry spell...as badly as I do, then...\"\n\n\"I'll stay,\" he said very quietly. \"If you're sure.\"\n\n\"I'm positive,\" she told him as she pulled him to herself and kissed him more passionately than they had so far.\n\nBecca was sound asleep on the couch, and Jake realized that was the closest he'd ever come to feeling like a neglectful parent\u2014by letting his daughter fall asleep while watching cartoons.\n\n\"The sofa is also a bed,\" Morgan told him as he picked the sleeping ballerina up.\n\nShe grabbed some sheets and quickly made up the sofa bed, then laid a pillow down and a blanket on top of her then kissed her rosy cheek.\n\n\"She's...beautiful,\" Morgan said as she put her arm around Jake's waist.\n\n\"So are you,\" he told her as he turned to face her.\n\n\"Thank you. I have no idea why you think I am, but I love hearing you tell me you do,\" she replied very quietly.\n\n\"Are you kidding me? You're...freaking gorgeous!\" Jake told her causing her to have to stifle a laugh.\n\n\"Okay,\" she replied. \"I believe you. Or at least I believe that you believe that.\"\n\n\"Morgan?\" Jake said.\n\n\"Yes?\"\n\n\"Can you stop? Please.\"\n\nShe smiled happily then said she could.\n\n\"Come on. Let me show you to the bedroom,\" she then said as she took his hand and led him off to break two very long, sexless periods of time in their lives.\n\nAn hour later, Morgan lay there happy and satisfied and said, \"It really is like riding a bike, huh?\"\n\nJake rolled over, smiled at her, then said, \"Um...no. You're not quite like any bike I'm ever ridden.\"\n\n\"Oh! So you liked riding me?\" she teased.\n\n\"Yes. Very much,\" Jake said as he touched her pretty face. \"I like everything about you, Morgan.\"\n\n\"Everything?\" she asked hopefully, still concerned about being so much older.\n\n\"Oh, yeah. Every thing,\" he assured her as he straddled her again.\n\nHe was already hard again, and Morgan purred as she reached for him.\n\n\"I kind of like...every thing about you, too,\" she told him as she pulled him back inside her then moaned softly when he filled her.\n\nJake left around 4am and Morgan helped him get Becca up and into the truck. She had no idea she'd mostly spent the night, and her father had no intention of ever telling her she had.\n\n\"Jake? If you need me to watch Becca today, you can bring her back over when you go to work,\" Morgan told him. School was out, but work wasn't.\n\n\"No. I can't do that to you,\" he told her.\n\n\"To me?\" she asked as she shivered in the morning cold. \"Nothing would make me happier.\"\n\n\"Nothing?\" Jake teased as he held her to warm her up.\n\n\"Okay. Almost nothing,\" she admitted. \"And I could take her to ballet. If that's all right.\"\n\n\"You'd do that?\" he asked.\n\n\"Yes. I'd do that. I'd love to spend the day with her. Just text me what I need to know in case of an emergency.\"\n\n\"This can't be be happening,\" Jake said as he wrapped his arms around her.\n\n\"That's my line,\" Morgan told him. \n\n\"I can't believe how amazing you are,\" he told her.\n\n\"No, that would be you, but thank you for saying that.\"\n\nShe was freezing and very tired but still didn't want to let him go.\n\n\"Okay. I'll bring her back around 7:30. If that's okay.\"\n\nShe looked up at him, smiled, then said, \"Jake. In case you haven't figured it out, I kind of love that little girl.\"\n\n\"Well, in case you haven't figured it out, I'm kind of falling for you.\"\n\n\"Yeah. Same here,\" she told him sweetly before they kissed one last time.\n\nMorgan did take Becca to ballet that Monday. The little girl was so excited, she never stopped talking on the way there or back home. Wearing a real ballet tutu sent her over the excitement edge, and Morgan found herself smiling the entire day.\n\nWith her father's permission, she enrolled Becca in a beginner's class and took her again on Wednesday and then on Saturday, and three days a week from then on. As Becca learned the basics under Connie's tutelage, Morgan began learning short and then longer routines. \n\nShe also continued seeing Jake nearly every day after work, and spending all day with him from Saturday evening through late Sunday. \n\nWithin a month, she'd met Jeff Wheeler, who liked her as much as his son loved her, and it was around that same time that Jake first used the 'L' word; a word Morgan said back to him immediately and without hesitation.\n\nEven Kayla found herself unable not to love his brother's older girlfriend. \n\nAnna, who'd had some reservations, liked Jake from Day One, and she loved his little girl from the moment she laid eyes on the pretty little Ballerina.\n\nBecca's first recital was scheduled for the week after school let out in early June, and her entire family was there to watch, along with Anna and Morgan Anderson, who sat next to the younger man she so dearly loved.\n\nWhen the recital ended, and Becca curtseyed along with the other little girls in her class, the parents blew up the room with applause. Connie thanked them all for coming, then said she wanted to introduce someone very special to her.\n\nWhen Morgan's name was called, she gave her old friend a puzzled look then said to Jake, \"I have no idea what she's up to.\"\n\n\"Go on, honey. Take a bow,\" he told her as her nearly pushed her to go up front.\n\n\"Folks? This beautiful woman is one of my dearest and old...dearest friends.\"\n\nThere was some polite laughter before she continued.\n\n\"Several years ago, she lost her husband, and back in February, she moved back here to the area where she grew up from Spokane to be near her daughter, Anna, who's sitting here tonight with little Becca's family.\"\n\nConnie had introduced each of the girls before the recital and shared Becca's love of all things ballerina.\n\n\"Morgan was a very accomplished dancer in her day, and she's since returned to ballet and is making unbelievable progress. She's buying a home that's nearly complete in a local development, and as I understand it, she's even fallen in love.\"\n\nMorgan's eyes opened wide as her friend smiled at her.\n\n\"In fact, I believe her very handsome boyfriend is here with us tonight, so...Jack? Would you come up and join your beautiful girlfriend, please?\"\n\nMorgan's heart began beating out of her chest when Jake got up and moved toward her.\n\n\"I'll uh...I'll let Mr. Jake Wheeler, of Wheeler Excavation, take it from here.\"\n\nThe business plug got a chuckle, too, and no one moved, as most of the adults had a pretty good idea what was about to happen.\n\n\"Hi. Folks,\" Jake said rather nervously.\n\n\"Hi, Jake!\" most of the people replied.\n\n\"I'm uh, I'm not real good at public speaking, so I'll keep this short.\"\n\n\"Thank you!\" his dad hollered out drawing a laugh.\n\n\"I love you, too, Dad.\"\n\n\"Ah, geez. Stop with the sappy stuff already and get on with it!\"\n\nMore laughter followed before Jake continued.\n\n\"I've never been married or even in love before,\" he began. \"But that changed this last February when my father, the wiseacre over there, dragged me to an open house.\"\n\nHe turned toward Morgan and took her hands but kept speaking loudly enough to be heard.\n\n\"That's where I met the most amazing, beautiful, kind, caring, and wonderful woman I've ever known.\"\n\nMorgan's eyes were now filled with tears, and her hands were trembling when Jake let go of them.\n\n\"I fell in love with her, and now I can't imagine living a single day without her in my life. And I'm pleased to say Becca loves her just as much as I do.\"\n\nHe motioned to his little girl to come over and stand by him when he handed her a small, white box.\n\n\"You ready?\" he asked Becca.\n\n\"Uh-huh!\" she said, nodding her head up and down.\n\nJake got down on one knee as Becca opened the box.\n\nBut before he could formally propose, Becca blurted out, \"Now you're 'posed to marry my daddy!\"\n\nMorgan was crying openly, and nodding as she bent down and held then kissed the pretty little girl she loved like her own.\n\n\"Then tell him I accept!\" Morgan said through her tears.\n\n\"Morgan says she's axe ceps, Daddy,\" Becca told him causing everyone to laugh as they burst into applause again while Jake slid the large diamond ring onto her finger.\n\nHe stood up, picked up Becca, then the three of them hugged before Jake kissed his beautiful fianc\u00e9 for the first time.\n\n\"Speech!\" someone said to Morgan.\n\n\"No. No speeches. I'm speech...less!\"\n\nShe held up her left hand and said, \"This says it all. Well, this and these two people plus one more.\"\n\nMorgan called Anna up to join them and introduced her before Jake asked his father and sister to join them, too.\n\nSomeone started singing the old 70s song, \"We...are...fam..uh...lee! I got all my brothers and sisters with me!\" and the everyone who knew the lyrics sang along, too.\n\nA week later, Jake said he had something to run by his new fianc\u00e9.\n\n\"Shoot,\" she said as she sat there with Becca on her lap.\n\n\"How about we buy a bigger home?\"\n\n\"But mine is going to done in two days, and I have a contract.\"\n\n\"But I know the builder,\" Jake countered with a smile. \"Charlie says he'll let you off the hook if we buy a bigger unit. He keeps a thousand dollars and the house and can still sell it, while we get a bigger place.\"\n\nMorgan's eyes got glassy again as she realized just how much her handsome, younger fianc\u00e9 loved her.\n\n\"And...\" Jake continued. \"I spoke with Connie, and if you'd like, we can take over the business from her in another month or so.\"\n\n\"What? Are you...are you serious?\" she asked.\n\n\"Yes. One-hundred percent,\" Jake told her.\n\n\"I don't know what to say, sweetheart,\" was Morgan's reply.\n\n\"Then say 'yes'. To both.\"\n\nAs the first tear fell, she looked at Jake then said, \"How did I ever get so lucky to be this happy?\"\n\nJake laughed then said, \"Well. As I recall, this little Ballerina right here ran into the room where you were sitting and...\"\n\nMorgan laughed as she cried and said, \"Just kiss me, okay?\"\n\nBecca smiled as her mom-to-be kissed her daddy, and for the first time in years, the pretty little Ballerina had a mommy that loved as much as the mother who'd loved her so dearly and given her life."
    ],
    "authorname": "komrad1156",
    "tags": [
        "may-december romance",
        "older woman",
        "younger man",
        "romance",
        "romantic",
        "mature"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/ballerina-3"
}
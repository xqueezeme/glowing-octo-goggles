{
    "title": "Changing Rooms Ch. 02",
    "pages": [
        "Road accident survivor Carl \"Rusty\" Russell becomes gym buddies with the hottest thing at Unrivalled Fitness, the super-fit and friendly brunette Laurie Palmer; and a close friendship is established between them. \n\nAfter months of Laurie helping Carl to rebuild his strength, a moment of flirtation leads to more daring moves in the sauna. Kicked out of the women's changing rooms by three offended gym members, Laurie heads to the men's room and drags Carl into the shower stall. \n\nIt's time to be completely open with him and to let him in on her best kept secret. She is a trans woman, and she wants him!\n\n1\n\nShe could taste him. As he slid deep into her mouth in between her hollowing cheeks, knees trembling and toes curling, she could taste him from the tip of her tongue and towards the back of her throat and it ignited a deep primal lust.\n\nOnwards she went, bathing him evermore with hot slippery saliva, plunging her lips down over him, struggling to accommodate it all without gagging; and she wanted more than anything to bring him off, to have him explode in her mouth.\n\nLaurie tilted her head from side to side, corkscrewing expertly around his cock, and every now and then she would withdraw and stroke him up and down with the length of her tongue, and then hungrily suck at the raw-red tip, coaxing his balls in the palm of one hand while the other massaged the shaft, daring him, enticing him, wanting him to submit to her.\n\nCarl hissed, feeling his legs ready to give, but the longer she worked him over, the longer it seemed his hard cock was willing to go. He was all about going the distance after all, and now that they had found themselves together in this situation, he didn't want it to end. He wanted it to become something else entirely, in fact.\n\nDesperately he reached up with his hands and clamped onto both sides of the shower cubicle and thrust his pelvis forth, met with Laurie's horny approval. She grabbed hold of his hips and opened wide, and so aggressively her head went to bobbing down on him with a pressure as of yet unexpected.\n\n'Oh fuck, I want you,' he groaned through gritted teeth, that deep primal urge grew between them. Laurie withdrew once more, sucking hard and emitting a loud, wet pop, and began to masturbate him harder. She grinned lustfully up at him, unfazed by the hot shower spattering her face. \n\n'Yeah, you do?'\n\nHe confessed hopelessly; 'I have to... I have to have you!'\n\n'Come for me, then,' she urged. 'Show me what you've got.' Laurie spat what she had left onto his stiff fleshy pole, massaging the raw head slickly, causing him to moan and to tremble like an earthquake was suddenly tearing him up inside. Never in his life had such an experience proven so intense. \n\nHe wasn't even sure he would be able to handle her even if he gave herself to him; if he knew what he would do with her. Instinct told his body that he wanted to slide his tumescent monster into her sopping pink pussy, that he would slide so deep up against her cervix to mate with her, and that he would sow his seed and fertilise; consummate his love and make her his. Conflicting with this in his heart, the seven inch specimen between her legs clearly wanted to make him hers.\n\n'Close yet, Rusty?' she asked, ready to take him into her mouth one last time. \n\n'Very...'\n\nThen she giggled; 'I admire your staying power, but my jaw hurts.' That earned her a deep, rumbling grunt, right from the depths of his soul. He could only imagine what else would end up so sore if she was game to take things further. But alas...\n\n'Okay, OUT,' called a third voice.\n\n'Oh shit,' Carl grumbled, taking his hands off the cubicle walls.\n\n'I SAID OUT, COME ON,' the impatient female voice boomed. Next the shower curtain swung back, and Laurie remained on her haunches, rock hard, and with a hand wrapped around the girth of Carl's weighty tool. \n\nAgain, the desk clerk - refusing to move from where she squatted, Laurie eyed the girl and made sure she had the time to see EVERYTHING, every last thing that this randy picture had to offer. The blonde young thing blushed furiously, but with anger burning in her blue eyes. Though embarrassed, Carl was actually impressed that he managed to make things all the more awkward by staying rock hard, his full length on show from the side.\n\nBut it was Laurie who finally spoke after a long moment's silence. 'Girl,' she said, 'you picked a really awkward time to grow a pair of balls!'\n\n2\n\nLewd misconduct...\n\nIn a gym where the staff were fucking clients and staff alike at every opportunity it seemed strange that they would both be ejected from what Laurie now affectionately referred to as \"Unrivalled Shitness\" for something like lewd misconduct. It smelled to her like double fucking standards.\n\nCarl was left devastated when he went home that night, alone. Laurie had promised to keep in touch - they knew of another gym just two miles away and agreed already to register the next day - but he did not get his sweet release, and he was left reeling, both horny as hell and besotted with Laurie. \n\nThat night he didn't sleep. No matter how he tried to find his own release, fantasising about what happened and what he wanted to happen, it just did not come. He wanted to speak to her, to hear her voice and her feelings on what happened. He considered leaving a message, at least conveying his own, but hesitated.\n\nIf she was asleep he would wait and wait and wait and begin to dread letting his feelings be known. And what if he scared her off with his eagerness? Carl fell asleep gripping his phone in one hand, not wanting to miss a thing.\n\nHe awoke at 7am with bruised balls, feeling well and truly - dare it be said - manhandled. There waited a text message, from her:\n\n\"I hope we're still talking xx\"\n\n-Laurie P, 6:38am\n\nBarely slept, he leapt out of bed, spritely and soon wide awake, a smile hidden beneath the veneer of light stubble and visible grogginess.\n\n\"Me too\", he replied. \"I'm still trying to get my heart rate down xxx\"\n\n\"You mean I'll have to work you up all over again? Xxxx\"\n\n-Laurie P, 7:03am\n\nThe day after when he would return to his gym routine at the new place, he was afraid to get back on the bike. His nuts were still a little sore, just enough to make sitting on a bike seat a worrying affair, in case he slipped and banged something. Gradually he manned up and dealt with it the best he could, riding slow and steady.\n\n7pm came.\n\n'Would you believe I forgot my soap on a rope?' she whispered in his ear. Startled, Carl laughed aloud and almost fell off the bike when he turned to see her. Laurie stood there smiling, somewhat expectantly, and with a slight pout to her lips. He didn't know whether he should kiss her like he wanted to.\n\n'Hi,' he offered, glad to see her again. She wore a grey cotton hoodie, zipped right up to the neck, and the shortest tight shorts that left literally two inches of thigh to the imagination. Looking back, he had no idea how she packed away that secret of hers - extra tight underwear?\n\nLaurie eyed him silently a moment. She seemed just as happy to see Carl, which made him all the happier. 'Riding without me?' she asked, noting the beads of sweat collecting at his forehead.\n\n'Just warming up,' Carl teased. 'Ready to get hot and bothered?'\n\n'I've been looking forward to it,' Laurie hinted, pursing her lips to keep from grinning. With a tilt of the head, she invited him to come along.\n\nTwo hours later and they were all but ready to collapse. It wasn't over for Carl though. It wasn't ever over so long as Laurie took on the responsibility of making sure his legs got the workout they needed. His whole body strained under the weight of the leg curl machine, knees trembling madly as every solid muscle rippled and every surface vein surged thickly like steel cables.\n\nLaurie spotted him, supporting the bad leg every time he struggled against failure. But aside from the endorphins now surging through his blood, he was also anaesthetised by her beauty, and the glances they secretly shared - here in this new place where nobody knew them. It excited him, filled him with something like adrenaline. There was chemistry burning between them that fuelled their intimately close physical exertion, and made it about something else entirely. \n\n'Five more,' Laurie commanded. 'I know you can do it, come on!'\n\nCarl breathed deep and hard, ignored the blood rushing to his head, and gripped the seat tight; forcing his shaking legs into action once more. He got halfway there and was about to give in, until her hand reached down along his scarred shin, over the inside of his knee, and came to clutch the inside of his thigh, high up.\n\nCarl fixed his eyes on hers, his expression asking \"what are you doing?\"\n\n'We don't want your legs falling out from under you like they did in the shower the other night, do we?' she recalled with a mischievous wink. \n\nHaving stopped dead halfway, his knees locked, Carl chuckled dryly. 'Now that was a different kettle of fish...'\n\n'How so?' she asked.\n\n'Because you make me weak at the knees,' he replied.\n\n'So you should make sure I don't take advantage,' she teased, letting her hand slide further down his bare thigh. Her fingers inched into his shorts, earning her a short sharp gasp. With that, Carl boosted the dead weight of the machine to straighten his legs out, causing Laurie's hand to slip further up. Her fingers found only warm bare flesh.\n\n'Not that we should risk getting kicked out of another gym,' she added, biting her lips together before flicking her tongue over them. 'As fun as that was...'\n\n'I have a shower where nobody will interrupt us,' Carl wanted to say. Instead he just smiled intently, forcing out the final four curls.\n\n'Are you hungry?' he did ask as they walked towards the changing rooms. \n\n'Insatiable,' Laurie purred. Carl knew a few good places to eat. He'd been thinking about any one of them, and how he'd like to take Laurie out and call it a date. And so he did. He took her to an Indian fusion restaurant called The Spice Garden. \n\nThey got to know each other for the first time away from the gym environment, face to face, and with the heat of their recent encounter still simmering beneath the surface. After they ate and drank and talked a while, there was just one more thing he wanted to know.\n\n'How about that shower?'\n\n'Oh that's right,' Laurie tantalised, 'I owe you a climax...'\n\n3\n\nThe chemistry between them erupted once again beneath the steaming hot water of the shower head. Naked and wet again their hard bodies touched with an electrical tingle, as their embraced each other with eager hands, their lips meeting feverishly as they melted into each other and relaxed. It wasn't only Carl that had wanted this moment!\n\nTurning heads from side to side, tilting and twisting, the distant aftertaste of paprika, chilli and garlic just made the moment all the more delicious. Without disturbance, without the prospect of being caught - of being judged - they moaned and sighed into each other's willing mouths, tonguing each other seductively. \n\nThe night Carl had been faced with a trans woman, this beautiful randy creature with the horned beast between her legs, he had felt so overwhelmed with both trepidation and excitement. Now he was acclimatised in a manner of speaking. While they kissed and caressed each other beneath the shower, his hand naturally went to her hardening cock and wrapped around it with ease, and he began to pleasure her as simply as he would himself.\n\nShe gasped into his mouth, grinning. 'Naughty boy, I warned you. Didn't I?'\n\nAs his hand slowly slid back and forth along her seven inches, intimately feeling every contour and ridge, he looked deep into her eyes with a longing he hadn't experienced before. Uncertain of what could realistically happen between them, it didn't matter. Her mouth was parted now, eyes heavy-lidded and half-closed as the sweetest whimper dared escape. He kissed it from her lips.\n\n'Shall we towel off and go somewhere more comfortable?' she suggested.\n\n'But what's wrong with this?' Carl asked.\n\n'Nothing at all,' she whispered, grabbing his cock and pulling him as close as she could get him. When her lips were right at his ear, however, she said; 'But you should ideally be lying down for how shaken I'm going to leave you...'\n\nHis heart swelled. His abdomen knotted in anticipation. The longer they dwelled in each other's eyes, the more certain he became that he was going to fall for her.\n\n4\n\nThere was no end to the number of simple pleasures in Carl Russell's life, but one he had missed for many years was the smell of a woman's damp, freshly washed hair, and the after-shower warmth and softness of her skin against his.\n\nBeyond their first experience together in the changing room shower two nights ago, sharing his bed with Laurie like this had him reaching for the moon. Both of them were in fact, it seemed; evident of the swords that crossed as their limbs and lips intertwined.\n\nIn an almost feline way they made love to each other with their mouths, hands roaming acres of hot skin, and the defined curves that pulsed up from beneath, as if their very beings reacted to their touches.\n\nAt the fore of Laurie's mind she could hear herself asking proudly; \"So what do you think?\" speaking of his growing list of intimate experiences with a woman like her. She bit down on her own tongue when she could, and otherwise sucked and licked at his mouth like some kind of sex-starved animal.\n\nWhen Carl laid her down and invited himself to her ample bosom, she became paralysed with pleasure - slave to his lips, tongue, and teeth, as he licked, sucked and nibbled at each one, paying plenty of attention to her sensitive nipples.\n\nSoon her delighted gasps turned to sweet moans of wantonness. 'If this is your way of saying you want to come down my throat, the answer is \"gladly\",' she giggled, short of breath.\n\n'Not yet,' Carl whispered and with a grateful smile. Now halfway down her body, he embraced her at the waist, turned around and feasted his eyes on her proudly erect cock. It pulsed back and forth with strong youthful blood-flow, matching the booming rhythm of her heart. And in a way it was mesmerising. It called to him... \n\nTouch me...\n\nHe was about to reach four fingers into his mouth, to dip into the building saliva at his tongue. But why do that when he could surprise her in the best way? After all it seemed inevitable that it would come to this sooner or later.\n\nSlowly he edged down further, planting kisses at Laurie's hips and abdomen, making her flinch, and gently buck up against his lips. And then before she could say anything, his tongue was running down the underside of her pulsating length, he was taking her into his mouth, and upon bathing her with his thickening spit, he began to mould himself around her and to seduce her mutually as she had done him.\n\n'Oh god,' she whimpered, clutching the pillows tightly at each side of her head. Laurie's eyes bugged out, her pink little mouth open and quivering - 'Oh, Carl,' she swooned. \n\nHe closed his eyes and surrendered to the thing he had welcomed to invade the depths of his mouth, and found that he liked it. He more than just liked it. For her, he loved it. To feel her flesh expand with total arousal as a result of his teasing, he was a wanton slut for her.\n\nSlowly he began to find his way around her anatomy with his tongue, letting her slide deeper. 'Less teeth,' she whispered suddenly, freezing in place. He withdrew his mouth and started again, trying to remember how she was in the changing room shower, and every blowjob that had ever brought him similar pleasure. \n\n'Your mouth feels beautiful,' she encouraged. 'That rough tongue,' she hissed, as he ran it against the underside of her shiny, bulbous glans; making her shiver and tighten up like crazy. 'Lick from my balls to the tip and back again,' she directed shamelessly, and bellowed a delightedly ragged moan when he did as seductively as was possible for a first timer.\n\nWithout coming, Laurie was aroused as hell and intent on flipping it all around on her new lover. With a devilish grin she took his face in her hands and pulled him away, sitting up to invade his mouth with her tongue, and revelled in the taste of herself.\n\n'Lie back and I'll show you a few more things,' she promised, and was so good for her word. Fifteen minutes of passionate licking and kissing and sucking at his throbbing member once again led to a frenzied soaking and plunging he'd never imagined. It was the stuff heart attacks were made of.\n\nAgain they were at that threshold, just like the moment the curtain swung back and the gym's blonde little desk clerk stood there furious but ultimately as helpless as Carl. 'I want to swallow you,' Laurie growled. 'Come, baby, please,' she urged, sinking her mouth back down over him one last time. It was then that he fell in love with her.\n\nLetting loose a primal cry, Carl stiffened up from head to toe and his testicles drew up towards his straining member, buried in Laurie's mouth two inches from the hilt. 'Hmmmm,' she moaned around him and sucked hard, her tongue wrapped around his shaft, and he began to squirt his glorious load down into her throat. \n\n'Mmmhmmm,' she hummed urgently, over and over, taking every load down her throat until it was all gone. The world fell away. Carl was brought back to reality moments later with a breathy, salty, sticky kiss, opening his eyes to the incredible woman that now held him in her arms, against her breast.\n\n'You're incredible in every way,' he sighed hopelessly, wrapping his strong arms around her to pull her closer. His hand grabbed her delectable buttocks and gently groped away gratefully. She chuckled softly, kissing his smooth shaven cheek and nuzzled into him with a contented sigh.\n\n'We were incredible,' she corrected after a moment's silence to catch her breath. 'That was quite the build-up... not just then, or even the past two days...'\n\nRealisation struck Carl. Just when he thought he couldn't be happier...\n\n'Well you were incredible the day I first saw you. I've been working my arse off to be worthy of you ever since,' he admitted and laughed at himself.\n\n'Really,' Laurie tried to recall anything that would make sense of it all. In the end it didn't matter. 'Well you have been worth it,' she complimented, her fingers running playfully through his downy chest hair.\n\n'How about a cup of coffee and then...'\n\nCoffee sounded good to the woman lying in his arms. The \"And then...\" sounded promising too.\n\n'And then,' she coaxed.\n\n'And then something I think will make you feel really good...'\n\n'Hmmm...' Her eyebrows leapt up and down. She liked a little suspense. What she would have given to be working her pelvis deep between his thighs though. If only Carl could have been that lover. Maybe, given time, she imagined.\n\n'Just let me get the feeling back in my legs a moment,' Carl half-concluded, and they shared a moment of laughter together.\n\n5\n\nIf he was besotted with Laurie the past several months, there was no keeping from her now how he felt. There were a respectable number of women that had come and gone in his life but nothing out of the ordinary. \n\nThere was something just nice about standing naked around the kitchen after sex, having a coffee, sharing a cigarette. There was a comfort to that post-intimacy, of seeing a woman in that new light, nothing left to hide. And of course, the anticipation of a reunion in the bedroom once more made these situations all the more telling of a woman's personality.\n\nWith Laurie, the silence was golden, save for a little childish back and forth as they sized each other up after having given into each other's desires. It didn't seem strange in the slightest that Carl was standing around with a woman sporting a cock almost as big as his. She was a goddess. It was an honour and a pleasure to be in her casually naked company; one more veil of their existing friendship lifted to reveal that they were all the better for what had happened between them.",
        "'How long are you gonna keep that starry-eyed gaze up?' she asked with a dorky grin on her face. Even without the basic makeup she wore that Carl was so used to, he couldn't help but love every feature, every expression, every nuance about her. Even after she put that question across to him, he stared silently for a moment with a big dopey doe-eyed smile.\n\n'I still can't feel my legs,' was his reasoning.\n\n'Then imagine how you'd feel if I'd fucked you as well,' Laurie put across with a sly wink and a little pout.\n\n'Honestly, I'd actually thought about it the other night, after we got caught in the shower,' Carl confessed, retaining eye contact.\n\n'Oh you did,' she noted, watching his flaccid pecker twitch and rise a little. She pursed her lips hard, trying to keep a straight face. He was adorable.\n\n'I did. My mind was all over the place. But mostly in the gutter!' That earned him a genuine laugh.\n\n'And have you ever thought about it before?' she asked, now becoming more invested as she gauged his body's reaction to the subject.\n\n'Not really,' he admitted frankly. 'I've never even done anal sex with a woman so I've no idea what it feels like to the giver.'\n\n'The giver,' Laurie echoed, laughing at how it sounded from her own mouth. 'I refer to myself as a Top.'\n\n'A Top?'\n\n'Yup, this girl likes to be on top - in charge,' she explained with a hint of passionate longing. 'Actually I'm versatile, for the right guy...'\n\n'And what's your idea of the right guy?' Carl pursued, now semi-erect.\n\n'Someone who knows how to really make me feel like a woman,' Laurie sighed longingly. That had the desired effect. Even Carl, grinning from ear to ear, looked down on himself blushing at the appendage now divining once again in Laurie's direction. \n\nShe bit her lip. Carl's body language said it all. He wanted to be that man. What a way to show it!\n\n'And then the old switcheroo,' he joked to break the ice. Laurie bared her teeth in a shameless grin. \n\n'Yes indeed!'\n\n'What makes you want to be on top?' he investigated further, his hardened cock already beginning to ache. 'What does it do for you?'\n\n'Oh,' she purred, 'I suppose it's the same as a man having a woman submit to him, with his cock buried deep inside her. Only imagine that the roles are swapped and you're the one with the pussy, and my hard cock is making you feel all the things a woman feels in those moments...'\n\n'Fuck me,' Carl reacted, blinking.\n\n'Careful what you wish for,' Laurie cautioned. 'At the same time it's a woman seducing you, making promises of sweet love, then pinning your thighs back against the bed, fucking you all night, and making you call her name,' she went on, watching his mind tick over.\n\n'Can you see yourself doing that?' she asked.\n\n'Colour me intrigued,' he pondered. 'But I can't know what to really expect, can I, if I've never done... you know... or been...'\n\n'Taken,' she finished. His cock twitched again. \n\n'Yeah,' he affirmed with a nod.\n\nShe crossed the small distance of the studio apartment's galley kitchen, naked hips swaying - amongst other things - and with a knowing look in her eye. What she did know, he could only guess, made much easier as she hung her arms around his neck and seductively invited him into a tender kiss.\n\n'I like you, Carl,' she said, and opened her mouth to his when he reciprocated. 'And I'd like to show you.'\n\n6\n\nOnce more they were lost in each other's mouths, and gradually each other's bodies - the most natural next step when naked flesh reacted to naked flesh. She led him back to the bedroom with a hand around his hard cock, Carl following like a puppy on a leash. Once there she directed him to sit on the edge of the bed.\n\n'I don't suppose you have anything wet and slippery to hand,' she asked.\n\n'Bedside drawer,' he said, reaching for it. He had a bottle of the white stuff, silicone lubricant. 'Handy for all occasions,' he quipped.\n\n'I love this stuff,' she mused. 'Slippery and white like spunk, but lasts longer...'\n\nLaurie squirted some into the palm of her hand. 'Lie back.'\n\n'What are you going to do?' he asked, doing as told. He rested his feet on the edge instinctually, only imagining. \n\nLaurie winked, offered a naughty little pout. 'Nothing too soon, but I think you'll like it, if your current state is to be read correctly.'\n\nHe breathed deeply, trusting her word. Apprehension didn't strike, but lit a cold blue flame of uncertainty which he felt all the same. Coating her own hard cock with some of the lubricant, Laurie ever so slowly and gently slid her fingers over his puckering sphincter and began to tease him with her fingers, running little circles around it, stroking his now slippery hole with her very fingertips.\n\nAn involuntary laugh escaped his lips. 'Ticklish?' she asked. 'I like a sensitive boy pussy...'\n\n'Boy pussy,' Carl repeated, letting that sink in, enjoying the sensations she was causing him. 'Never heard that before.'\n\n'There's a lot to learn,' she agreed. 'You're... a little behind,' was the pun she was looking for. 'Carl...'\n\n'Yes Laurie...'\n\n'I really want to slide my girl cock up against your boy pussy right now,' Laurie purred seductively. 'I promise I won't put it in...'\n\n'I can't say no to you,' he gushed, looking up at her - all wild hair and intense hazel eyes.\n\n'Oh, really?' Intrigue once again. 'That could come in useful.' \n\nShe didn't rush. It was important to her that she didn't rush or force him into anything, whether he wanted it or just thought that he wanted it. Carl was under her spell, and she knew it. He was likely love-blind too, and didn't hide it as well as others in attendance.\n\nSlickly running her hand back and forth over the lubricated shaft of her stiffie, she eased back the foreskin and applied more of the white cream to the tip, moaning quietly at the pleasure she was bringing herself. All the while Carl watched her twisting facial expression with awe, even after she caught him and gazed back a moment.\n\n'Here it comes,' she whispered.\n\n'Okay,' he accepted and relaxed. What she did to him for the next ten minutes nearly drove him to insanity by eroticism. The swollen head of her penis touched down - bullseye - and deliberately right at the centre of this second sexual being within him that Laurie was tempting to awaken.\n\nShe teased him with a little push and then circled around, like she had with her fingers, letting him come to terms and accept the hot muscular appendage that so wanted to invade his body. Then she leaned in closer and ran the length of her shaft up between his anus and his balls, letting the head come to rest between the two swollen eggs, and then repeated the motion. Carl breathe deeper and emitted a long, contended sigh.\n\n'Oh you like that,' she noted happily. He nodded with a guilty smirk. 'And this?'\n\nShe returned the head of her cock to swirl around his slippery hole once again and then backed off to slap the two together. Carl flinched and began to laugh. Nodding he added, 'I like what I see too.'\n\nLaurie reached for the lube once more, took a load in her hand and liberally applied it to Carl's raging hardness, soothing him and momentarily cooling his jets, until he began to warm again in her hand. 'This is the good thing about this position,' she said. 'I can screw you and tug you off at the same time...'\n\n'Mmmhhh,' he responded approvingly. He wasn't even aware that the tip of her cock was halfway inside him at that moment. He was so focused on the sensations she brought him with her hand. \n\n'And I can do it fast, or I can do it slow and sensuous, if I wanted to make love to my man.'\n\n'And let's say I was your man,' he supposed. Laurie purred her approval upon considering the thought. 'Where else would you like me?'\n\n'Slide up the bed on your back and I'll show you,' she directed. Like a puma she wasted no time, pouncing onto the bed, on all fours, and swept him up with a strength and agility he didn't expect. \n\nThey were nose to nose, eye to eye. The weight of Laurie's erection pressed between his buttocks scared him but felt strangely all the more erotic as her thighs sought to force his apart. The only way was up and around her hips. At that his hands smoothed around her waist and came to rest at the curve of her backside.\n\n'Now that's more like it,' she approved, slowly pressing further into him. Carl gasped, feeling her coming too close to entering him, which he was not ready for. A smile broke on Laurie's lips. She knew it. She wasn't going to force what could come naturally. And speaking of which...\n\n'You could be a natural if you wanted to explore with me sometime,' she told him. 'We could be lying in this bed like this sometime in the near future,' she imagined, now bucking gently between his thighs, rubbing her tits up against him. 'I'd be gently fucking you just like this.'\n\n'Oh fuck me,' he breathed.\n\n'Trust me, I'd love to,' she breathed back, their noses touching, followed by their lips. Laurie was not done tormenting him yet. She pressed her lips fully to his and engaged him in a long, deep kiss, all the while simulating sexual intercourse with him. 'You feel so good underneath me. You'd feel so good around me...'\n\n'And inside you,' he summoned the courage to say, before she drove him over the edge. \n\nShe smiled at that. 'But you've never done that before...'\n\n'There's a lot I haven't done before the past two days,' he reminded her. They kissed and laughed into each other's mouths. And then he reminded her that there was something else he'd wanted to do.\n\nLaurie licked her lips. 'Did I mention that I really, really like you, Carl?' she asked.\n\n7\n\nHe had her up on her knees and now he was behind her, his hands exploring every inch of her body as his hard nipples grazed her back. Goosebumps coursed through Laurie's bare flesh as she felt his lips soon pucker up against her tight full buttocks, and from there he led a trail of kisses up her spine, his hands caressing her hips, her hard stomach, and then her pert breasts.\n\nShe breathed hard, an instant slave to the chills he left behind wherever his warm hands moved, and then a sweet sigh filled the air as his cock rested hard and throbbing at the cleft of her bottom while his lips nibbled at the soft flesh of her neck.\n\nCarl guided her face, his fingers resting at her chin, turning her lips to his to taste again. 'You seductive motherfucker,' she whispered hoarsely, and their tongues met and danced masterfully. 'What are you doing to me?'\n\nHis hand reached around the base of her rigid cock, stealing a gasp from between her teeth in that instant. Still slick with lubrication, he began to gently masturbate her back and forth, nuzzling into her neck, his free hand clutching at one breast.\n\nShe pressed backwards into him saddling his cock, feeling him brush up against her pink rosebud and then nudge softly at her bald testicles. It lit a fire inside, a raging warmth that radiated all through her abdomen and rose into her chest, where after many minutes she was consistently breathing deep and hard. \n\nHer cock expanded in his hand but she didn't blow. She would let him know when, he was sure. Laurie liked to announce every captivating detail, it seemed. Carl reached for the lube, just out of reach. Laughing they fell back into the pillows and now Laurie was on top of him, still pinned down in place by Carl's strong grasp.\n\n'Up,' he urged, and had her raise herself higher up his body, so that he could really invest his elbow strength into pleasuring her. Applying the lubrication, now she was thick and slippery slick in his grip. Corkscrewing and massaging her length in all thoroughness, he delighted in her gasps and moans as he edged her closer to climax.\n\n'I am going to fuck you one day,' she shivered and shook, bucking into his hand.\n\n'You are,' he replied, and she heard no question. 'Show me how,' he added, to her delight. His hand slid over the swollen, sensitive head of her cock, inviting her to use it. Before long she was sliding forth with long, smooth strokes, in between his thumb and forefinger and into the wet chasm the palm of his hand made.\n\n'I'm going to fuck you and I'm going to spunk gallons up inside you, up against your sweet spot - so much come you won't believe,' she gasped harshly, and she was coming right now, with her butt smacking back absurdly against his belly, his cock trapped between them and taking a battering. She wasn't the only one who could take no more of this sweet torture.\n\n'Show me how much come,' Carl demanded furiously. 'Show me now!'\n\nIn a shot, the woman wrapped up in his grip evaded him, flinging herself up onto her haunches and spinning around to straddle his hips. Her teeth clenched, the veins in her neck bulged all at once, her own hand now doing the last of the work.\n\n'Take it, baby,' she urged, and released a guttural moan, at the end of which she let forth a thick white stream of hot ropey jizz. The first lot shot Carl directly in the chin, and he laughed as he did not know what else to do. The second and third aimed higher and spattered his open mouth and chin. \n\nHe watched in awe, instinctively licking his salty lips clean, as Laurie lustfully released pulse after pulse of hot spunk over his belly and chest. Minutes passed. Minutes of uneasy breathing and unspoken thoughts passed. In that time they just gazed at each other in disbelief.\n\n'Speak to me,' she finally whispered.\n\n'Fuck me,' Carl replied, physically trembling beneath her.\n\nLaurie collapsed into him, their burning bodies sticky-slick with come, sweat and lubricant. The smell of their combined sexes was heavily intoxicating to Carl - her too. Her lips to his ear, she kissed it and breathed, 'what have I told you about tempting me?'\n\nHe turned to face her, eyes heavy and intense, despite the fatigue now winning out over him, and laid a smooch on her lips where she could taste herself. 'I mean it,' he said. 'God, I really want to have that with you!'\n\nTo be continued..."
    ],
    "authorname": "PanzerFeck",
    "tags": [
        "shemale",
        "shemale on male",
        "transgender",
        "transsexual",
        "cock sucking",
        "blowjob",
        "oral sex",
        "shower",
        "masturbation"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/changing-rooms-ch-02-2"
}
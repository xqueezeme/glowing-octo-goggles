{
    "title": "Sleeping with the Competition",
    "pages": [
        "This is my 2012 Summer Lovin' Story Contest entry. I hope you enjoy it, and don't forget to vote. Thanks for reading. \n\n* * * * * * * * * * * * * * * * \n\nIn the world of twenty-first century business competition, there are few things more important than knowing what your competitor is doing, or better yet, what your competitor is planning.\n\nMany big corporations spend huge sums of money stealing secret information from their competitors, but no one knows how much, because they never account for spying in their financial reports, do they? They fill thick portfolios with their competitors' pirated trade secrets, poached patent information, purloined e-mails, pilfered memos, and pinched personal information. Industrial espionage has become a fine art, with methods and agents as secretive as those used by the CIA. This story is but one example of how low companies will stoop to gather secret information from a competitor.\n\nThe names of individuals in this story have been changed to protect their identities.\n\n* * * * * * * * * * * * * * * * \n\nOn a hot Tuesday afternoon in June, Susan Bacardo, dressed in business attire, sat in the Houston, Texas, airport boarding area awaiting the call to board her flight to Chicago. She'd arrived at the airport early, because she wanted to get away from her stressful job and her sexually harassing boss. Besides, her laptop contained a PowerPoint presentation she wanted to review before delivering it the next morning at a three-day pharmaceutical conference. \n\nSusan's employer, Shtup Pharma, manufactured and marketed numerous prescription drugs. She was a project manager for Shtup, leading a team of researchers who were attempting to create a female Viagra drug. During their research, they had collected considerable detailed data relating to female sexual arousal and dysfunction caused by chemicals, drugs, and hormones. Along with their one modest success, they had encountered scores of failures in their search for an arousal drug. They'd hit so many dead ends that they became experts in female sexual unresponsiveness. The subject of Susan's presentation at the conference was, \"Chemicals, Drugs, and Hormones which Reduce the Female Sexual Response.\"\n\nWhile Susan was reviewing her slides, a tall handsome man in a suit approached the counter in the boarding area and spoke with the female agent. He identified himself as Brian Miller. He said he and Susan Bacardo worked at the same company and mentioned they were traveling together. Would the agent be so kind as to assign him a seat next to hers?\n\nTrying always to please the airline's customers, the agent checked the seating assignments. She reported there was an available seat, and assigned it to Brian.\n\nAt the same time, Susan happened to look up and noticed the man talking to the agent behind the counter. He seemed to be looking directly at her. He smiled at Susan, then turned and said something to the agent. The agent nodded her head toward Susan, then looked down and typed on her computer terminal. The man didn't look familiar to Susan, but since she traveled often, she met many people. Perhaps he was someone she'd met on a previous trip. Susan shrugged and went back to working on her laptop.\n\nWhat Susan didn't know was that she'd been targeted by her employer's primary competitor, Bugger Pharmaceutical Corporation, in the form of Brian Miller (the pseudonym he used for his spying task). The knowledge she carried in her head about the female Viagra project was worth a fortune to competitors who were also working on a similar drug. It was Brian's task to pick her brain and tap into that fortune. After all, the first company to market a female Viagra could reap millions, if not billions, of dollars in profits. \n\nWhen aircraft boarding was called, Susan stood in line behind a jam of other passengers who just couldn't wait to board the plane, even though everyone had an assigned seat. She never understood the herd mentality of passengers and passed it off as just being another quirk of human nature.\n\nAs she handed the agent her boarding pass, she passed the handsome man, also waiting to board, and he smiled at her again. Did she know him? While she and the other passengers shuffled down the stifling boarding ramp, Susan tried to remember if she had met him somewhere.\n\nBrian thought Susan was more attractive than the photo he carried in her dossier\u2014and a little taller than she'd been described. He knew a lot about Susan\u2014he'd studied her dossier for almost four weeks learning detailed information about her. He discovered she grew up in Milwaukee, Wisconsin, and had graduated from Northwestern University. He also read reports about her job description, her pay, information about her boss, her immediate chain of command, her marital status (she was single), and many more informational tidbits that had been gleaned by other undercover agents from Bugger.\n\nHe'd learned Susan's responsibilities included managing a project research team, the project budget, and the female Viagra schedule. Most of the information about Shtup's female Viagra project passed across her desk, so she was the most likely target at Shtup.\n\nWith him, Brian carried a list of Shtup managers and phone numbers; he probably knew more about Shtup than many who worked there. For this trip, he was going undercover, impersonating a Shtup employee.\n\nBrian was a biochemist who had worked on Bugger's female Viagra project for about three years, so his knowledge of the subject would be helpful in his spying mission. His research team had been unsuccessful, but another of Bugger's teams working on a cardiac medicine stumbled onto a female arousal drug by accident. At that point, Brian's value on the female Viagra project was reduced. \n\nWhen Tony Wilson, Brian's manager, obtained a sketchy report that Shtup had a breakthrough on their female Viagra project, and was ahead of Bugger's project, he decided to determine if it was true, and if so, to sidetrack it somehow.\n\nWhile Tony and Brian were meeting to discuss where Brian might be reassigned within the Bugger research organization, by coincidence, Tony discovered Brian had grown up in Evanston, Illinois, and graduated from Northwestern University. Through their spies, he also knew Susan Bacardo had also graduated from there. \n\nTony began hatching a plan. Brian was tall and handsome, he had worked on their female Viagra project, and he was familiar with the technology involved. Moreover, word had it, that he was smooth with women. Perhaps Brian and Susan had enough in common that Brian could exploit Susan's weaknesses.\n\nTony said, \"Brian, I have a 'special project' for you. If you're willing to carry it out, it might be worth a nice bonus, or even a promotion. It's going to be top secret, and only a handful of people will be in on it. Okay?\" \n\nAlthough it didn't take long for Brian to make a decision, he didn't realize what he was getting into. His main thought was about earning a healthy bonus.\n\nThe following day, Brian discovered the 'special project' Tony Wilson had given him was to gather as much information about Shtup's female Viagra project as possible, namely to target Susan Bacardo.\n\nA week or so into Brian's grooming, Tony gave him some counterfeit identification cards, and told him that one of Bugger's undercover agents had entered his name into Shtup's personnel records, and had even given him a social security number from a real Brian Miller, so that if anyone checked, they'd find he worked there. His status was listed as 'leave of absence' on Shtup's records, so he wouldn't show up on the records they normally reviewed.\n\nAt the end of Brian's four weeks of grooming, Tony handed him a fat envelope containing $2,500 in twenty and fifty dollar bills, and said, \"Cash can't be traced.\" Then he winked at Brian and said, \"Put the money to good use in Chicago.\"\n\nThe last thing Tony said to him before he left for Houston was, \"Gain her confidence and milk her for every bit of information you can. I don't care what you have to do, but don't come back without the information we want.\"\n\nSo that's how Brian Miller happened to be on the same plane, with an assigned seat next to Susan Bacardo, destined for Chicago.\n\nWhen Susan reached her window seat in business class, she sat down. She removed her uncomfortable mid-heeled black pumps, wiggled her toes, slipped her laptop under the seat, and looked out the window idly watching the men loading luggage in the cargo bay.\n\nShe felt the seat next to her jar slightly and turned to see the same handsome man who had smiled at her in the boarding area. He was now sitting next to her. He smiled at her yet again.\n\n\"Hello Susan. How are you?\"\n\n\"Do I know him?\" she wondered.\n\nSusan responded, \"I'm fine\u2014and you are?\"\n\n\"Brian Miller. I'm a biochemist from our Boston office,\" he lied. \"I had a meeting in Houston earlier today, and now I'm headed to the pharmaceutical conference.\"\n\n\"How do you know me?\"\n\n\"You're the project manager for the Feminoral project (Feminoral was Shtup's code name for their female Viagra drug), and I saw your photo in the company newsletter,\" he lied again.\n\n\"But my photo wasn't published in it for Feminoral. Since it's a confidential project, we don't discuss it much.\"\n\nOops! Brian's mind raced as he frantically tried thinking how to get out of his blunder. Within two minutes of meeting his target, he'd already made a major screw-up. \n\n\"Maybe you saw my photo when I was the project manager for our diabetic drug,\" Susan said.\n\n\"Uhh... Yeah, that must have been where I saw it.\"\n\nWhew, so close to being caught! Brian felt a wave of relief flow through him. \n\n\"Get yourself together, Brian,\" he thought to himself. Being a rookie industrial spy wasn't going to be easy.\n\nRecovering from his slip-up, he reached inside his suit jacket's breast pocket and handed his business card to her. It looked legitimate; printed on it was: Brian Miller, Biochemist. It had Shtup's logo and the correct office phone number on it. She happened to notice he wasn't wearing a wedding ring.\n\n\"I hope you don't mind me joining you, since we're both going to the same conference.\"\n\nShe knew a number of biochemists at Shtup, but didn't know Brian. Shtup was a large company and a lot of people worked there. Since he said he was from the Boston office, she let it go. \n\n\"Have you been with the company long?\"\n\n\"Just a little over a year,\" he replied.\n\nSusan had been extremely busy with the Feminoral project during the past year. A number of employees came and went. She figured Brian was probably one she hadn't met yet.\n\nWhen everyone had boarded and settled down, the stewardesses began their passenger briefing. Susan could almost lip sync their briefing, she'd heard it so often.\n\nAfter the plane took off, Susan was able to turn on her laptop and continued reviewing her slides.\n\n\"Do you have a lot of work to do?\" Brian asked.\n\n\"Some. I have to give a presentation at the conference tomorrow, and I want to make sure I have it down pat.\" Susan's pleasant, lilting female voice fell softly on his ear. \n\n\"I'm glad I don't have to give a presentation. How long have you worked in Houston?\" he asked. Brian didn't really need to ask Susan anything about her job. \n\n\"A little over six years.\" \n\nThe pilot came on the public address system, welcomed the passengers, and thanked them for flying his airline. \"It's going to be a little longer flight than we'd planned, because we have to go around a line of thunderstorms across Arkansas,\" he said.\n\nAfter the plane leveled off, a stewardess came by asked if they'd like a drink. Susan asked for a Coca-Cola and Brian ordered a beer. Their drinks came, and Susan consumed the entire can of Coke while she reviewed her slides. \n\nSusan had been so absorbed reviewing her slides that she hadn't noticed how full her bladder was until the Coke hit it. All of a sudden, she had to pee. Not wanting to wet herself, Susan stood up and hastily placed her laptop on her seat. She quickly excused herself and slipped past Brian, hurrying to use the lavatory. Brian waited until she was inside, then opened her laptop and inserted his thumb drive into it. He typed several commands on the keys and removed the thumb drive, placing Susan's laptop back in the same position where he found it.\n\n\"What an opportunity,\" Brian thought to himself. \"Easy as stealing candy from a baby.\" \n\nThe software he just installed on Susan's computer gave him the ability to control it when it was connected to the Internet.\n\nSusan returned from the lavatory, unaware of Brian's actions. Brian studied her coming down the aisle\u2014her blue eyes were far more expressive than her photograph showed, and her angelic smile caused a dimple to appear on her cheek. Her eyes caught his, and for an instant, there was some kind of magic male-female recognition which takes place between lovers. But he knew they weren't lovers\u2014he had to erase that notion from his mind.\n\n\"Excuse me,\" she asked, scooting past Brian's knees, slipping into her seat.\n\nBrian's nose caught the odor of Susan's perfume\u2014he hadn't noticed it before. She must have applied it while she was in the lavatory. It was a compelling, alluring scent\u2014whatever was in it attracted Brian to it like a male dog to a bitch in heat.\n\nAfter she settled in her seat, Brian decided to engage Susan in light conversation, getting to know her better. His boss's instructions to \"...gain her confidence and milk her for every bit of information you can,\" still echoed in his head.\n\n\"I'm looking forward to seeing Chicago again,\" he said.\n\n\"Do you get to Chicago often?\"\n\nHe shook his head, \"No, not as often as I'd like. I grew up just north of there.\"\n\n\"Really? How far north?\"\n\n\"I grew up in Evanston. Are you familiar with Chicago?\"\n\n\"That's interesting,\" she said. \"I graduated from Northwestern University.\"\n\nHe acted surprised. \"Wow, so did I. We could have been neighbors. My parents lived on Central Street, just off Sherman Avenue, not far from the university. My father was a professor there.\"\n\n\"It's a small world, isn't it?\n\n\"Yes, it sure is.\"\n\n\"What year did you graduate?\"\n\n\"2002.\"\n\nSusan decided he must be about 30 years old, since she graduated in 2004.\n\nThey continued chatting and sharing their experiences about living near Chicago. Both discovered their preferred baseball teams remained their childhood favorites: Milwaukee Brewers for Susan, Chicago Cubs for Brian.\n\nSusan was a charming conversationalist, and a witty woman, which didn't show up in the reports Brian had read about her. He kept thinking that gathering her secrets was just business, but she was so engaging, he felt bad about being assigned to spy on her.\n\nSusan was telling Brian about some of the escapades that had occurred in Kemper, her residence hall at Northwestern, when their plane began to descend. Time had passed quickly and Susan hadn't completed reviewing the conference presentation on her laptop. \n\nTheir plane landed, and before reaching the terminal, most passengers stood up, even though the pilot asked everyone to remain seated until the plane stopped. They deplaned with the crowd of other passengers and made their way to baggage claim. \n\n\"Are you staying at the Palmer House Hilton, too?\" he asked. Of course he knew where she was staying.\n\n\"Yes.\"\n\n\"I've reserved a rental car. I put it on the company credit card,\" he fibbed.\n\n\"How'd you get a company credit card?\" she asked. \"I've worked at Shtup for six years and I still haven't been able to get one.\"\n\nUh-oh. Brian had stepped on it again. His mind raced again\u2014what to tell Susan?\n\n\"I sweet-talked the girl in the travel section,\" he lied. \"She said if I had my manager's okay, she'd give it to me.\"\n\nSusan gave him an icy look and was about to ask how his manager was able to circumvent company rules when Brian quickly changed the subject. \n\n\"Oh, I see my suitcase on the baggage carousel,\" he remarked, leaving Susan's side to retrieve it.\n\nWhen Susan found her rolling suitcase, they followed the signs to the automated tram, which took them to the rental car lot. Their discussion about the company credit card had been forgotten. It was late afternoon when they left the O'Hare.\n\nDriving toward downtown, Brian said, \"I'm hungry for a deep-dish Chicago pizza, how about you?\"\n\n\"Uno's was always my favorite. I usually ordered pepperoni and sausage.\"\n\n\"That's interesting\u2014mine too.\" \n\nSusan's dossier didn't have any information about Susan's favorite pizza restaurant or her pizza choices. It surprised him that they shared similar pizza tastes. \"Want to join me for a pizza at Pizzeria Uno tonight?\"\n\n\"I'd love to, but I have to get back to the hotel early and go over my presentation for tomorrow.\"\n\n\"No problem. We'll be back there before nine\u2014guaranteed.\"\n\nAfter arriving at the hotel, they checked in. Susan's room was on the tenth floor and Brian's was on the twelfth. On the elevator to their rooms, they agreed to meet in the lobby at 6 PM after they'd freshened up.\n\nThey met in the lobby as planned. Susan had changed into a sleeveless summer blouse and a casual, fullish skirt that reached a couple inches above her knees and Brian was wearing jeans with a striped rugby shirt.\n\nBrian asked, \"Want to take the car, or are you up for walking?\"\n\n\"How far is it?\"\n\n\"I think about ten blocks.\"\n\nShe lifted her shoe from under her skirt, so Brian could see it, \"These are comfortable walking shoes, and after a pizza at Uno's, I'll need to walk off a lot of calories.\"\n\n\"Let's walk then.\"\n\nThey headed north on State Street walking toward the Chicago River. As they passed a large office building, a wind gust whipped around the corner, picking up the hem of Susan's skirt above her waist. Brian caught a brief glimpse of Susan's lacy pink bikini panties. \n\nEmbarrassed, she pushed her skirt down, and said, \"I forgot how strong the lake breeze can be.\"\n\n\"It is the Windy City, after all,\" Brian chuckled, as he watched Susan using both hands, trying to keep the wind from blowing her skirt up again.\n\nThey continued on, talking and enjoying each other's company. As they crossed the Chicago River, Brian pointed to several seagulls that were gently soaring on the lake breeze, not flapping a wing. \n\n\"It's amazing how they do that,\" he observed, and Susan agreed.\n\nFinally they reached Pizzeria Uno. For a Tuesday evening, it wasn't as full as it would have been on the weekend. The waitress quickly found them a small table and they ordered a sausage and pepperoni deep dish pizza and soft drinks. Over their drinks, they talked about the conference, while waiting for their pizza to arrive.\n\nBetween bites of pizza, their conversation wandered among a number of subjects\u2014sports, politics, weather, Chicago, or whatever else struck their minds. Brian wanted to first gain her confidence, so he followed her lead during their conversation. They both seemed to enjoy whatever they had been talking about. Susan finally looked at her watch and indicated she needed to return to the hotel. Brian paid for their meal and they headed back.\n\nThe summer sun was low on the horizon, nearly ready to set. A patch of puffy clouds hovered over the city, streaked with shades of pink, gold, and lavender. The last golden rays of the setting sun reflected off the glass at the tops of the tallest buildings\u2014the shorter ones, lost deep in the canyons of downtown, were now totally in shadow. It was the kind of scene they put on postcards.\n\nAs they sauntered along, Brian slipped his hand into Susan's, \"Nice to be downtown on a balmy summer evening.\"\n\nSusan responded, \"Beautiful, isn't it?\"\n\nHad this been a movie, orchestra music would have swelled with a romantic score, but this was the dog-eat-dog world of spying, where the winner gets all the marbles, and the loser\u2014well, loses. Brian played back the words of his boss, \"...don't come back without the information we want.\"",
        "Their stomachs full of pizza, they were no longer in a hurry. They strolled toward the hotel, stopping near the bridge over the Chicago River, where Susan threw some pieces of her pizza crust to the seagulls, that whirled, dived, and squawked among themselves, fighting for a tiny piece of crust. \n\nThey strolled on, reaching the hotel lobby at 8:45 PM. Brian said, \"I told you we'd be back by nine.\"\n\nOn the elevator, they decided to meet in the lobby at 8 AM the following morning and have breakfast in the hotel restaurant. Just before the elevator reached the tenth floor, Brian commented, \"I really enjoyed our evening.\"\n\nWith a sparkle in her eyes, Susan smiled up at him. As the door opened, she stood on her tiptoes, gave Brian a kiss on the cheek, then disappeared down the hall as the elevator doors closed.\n\nSurprised, Brian put his hand up to his cheek where Susan kissed him, and smiled. He hadn't expected to have had that kind of effect on her.\n\n* * * \n\nBrian and Susan met in the lobby on Wednesday morning, then headed to the hotel restaurant for breakfast. He opened the door for her and followed her through. When the waiter showed them to their table, Brian helped seat her at the table.\n\nBrian's manners weren't lost on Susan, who'd grown up in a world of sexual equality. It felt good to be treated as a lady.\n\nWhile looking over the menu, Brian asked, \"Nervous about your presentation today?\"\n\n\"No, not really. I've done similar presentations before.\"\n\n\"I didn't ask what it was about.\"\n\nSusan's face reddened, and she leaned forward across the table. In a low voice, barely above a whisper, so other diners wouldn't hear, she said, \"Chemicals, drugs, and hormones which reduce the female sexual response.\"\n\nBrian, seeing Susan blush, said, \"Oh, I didn't intend to embarrass you.\"\n\n\"It comes with the territory, I think. When you work on a female Viagra project, there are a lot embarrassing things.\"\n\n\"Do you mind if I attend your presentation?\"\n\nSusan was quiet for a few seconds, \"We're grownups. You can attend if you want.\"\n\nThey ordered their breakfasts and when they came, they began eating. A couple times Brian caught Susan staring at him with bedroom eyes. He wanted to tell her that he really enjoyed the kiss she'd given him the night before, but couldn't seem to work it into their conversation.\n\nAfter they finished, Brian asked the valet for the rental car. When it arrived, he opened the car door for her. Then they headed to the conference.\n\nOnce they were in the car, they could talk more freely. \"Brian, why are you attending the conference?\"\n\nBrian had his cover story all worked out. He claimed that he was trying to gather secret information about Bugger\u2014the same company he worked for. \"I've heard rumors that Bugger is ahead of us with their female Viagra drug,\" he lied again. \"I'm going to try to learn as much about their progress as I can. Anything we learn will give us a competitive advantage over those bastards.\"\n\nSusan nodded. \"I didn't think they were ahead of us.\"\n\n\"Well, that's why I'm here. I want to find out for sure.\"\n\nBrian had mentioned the names of several managers in Susan's chain of command, so she was lulled into a false sense of security.\n\n\"Let me know what you find out,\" Susan said. \"We've been working our tails off, and I think we're getting close.\"\n\n\"How close?\"\n\n\"Maybe six to nine months. I think we'll be done with Phase I testing by then.\"\n\nThat was an interesting tidbit that Brian had hoped to hear. Brian knew Bugger had already completed animal testing and Phase I human studies were already underway. From rumors, he understood Bugger's results were going well. In fact, Brian had heard women who'd tried Vaginitrol (Bugger's code name for their female Viagra drug) couldn't get enough of it, and he, being a research insider, had managed to get his hands on about a dozen Vaginitrol tablets.\n\nThey arrived at McCormick Place, the location of the conference. An hour before her presentation, Susan checked in with the conference coordinator. She confirmed the slides she'd sent ahead were already on the audio-visual system. She told the coordinator the same presentation was on her laptop, as a backup.\n\nAt 11 AM, Susan began her presentation. She noticed Brian was in the first row. The lecture hall was about three-quarters full, and there were about as many men as women in the audience.\n\nSusan introduced herself as a researcher for Shtup. She told the audience that she was providing the results of recent research that Shtup had done. She said there would be a question and answer period at the end of her presentation.\n\nFirst, Susan provided an overview of the categories of drugs which reduce the female sexual response. Her slide showed: anti-hypertensives, antidepressants, illicit and abused drugs, anticoagulants, anticancer drugs, some sedatives, neuroleptics, some birth control pills, and a number of hormones produced within the female body.\n\nThen she returned to each category and described specific drugs in that category and their effects on female sexual response. She pointed out how various chemicals affected the brain which depressed the female sexual desire. Susan described how nicotine and marijuana from smoking reduced the female sexual response, along with alcohol, cocaine, and many other illegal drugs. She then covered a number of prescription drugs and various hormones they'd tested at Shtup which reduced the female sexual response. \n\nAfter Susan finished her presentation, she fielded several questions during the question and answer session. The hour scheduled for her presentation came to an end and people attending the following presentation began drifting in, so Susan thanked everyone for attending and removed her laptop and a water bottle from the podium.\n\nBrian gave her a thumbs-up, \"Great job, Susan.\"\n\nShe wiped her brow, \"I'm glad that's over. I'm going to visit the Shtup exhibit. Want to come along?\"\n\n\"No, I really want to scout out Bugger. I want to see if I can get some inside information about their female Viagra project.\" \n\nThe real reason Brian didn't want to go with Susan was that he feared his true identity might be discovered by Shtups' employees.\n\n\"Okay then, would you like to meet on the main floor by the entrance at two?\"\n\n\"Sure, I'll meet you there.\"\n\nAround 2 PM, they met again. Brian and Susan wandered through some of the conference exhibits and exhibition booths, stopping here and there to chat with pharmaceutical vendors' representatives. It seemed to Brian that most of the booths were staffed by marketing representatives who were more than happy to hand them brochures and literature describing their products.\n\nSeveral times he and Susan were asked if they were doctors. Apparently the pharmaceutical vendors wanted to get doctors' names and addresses so they could market their new pharmaceutical products to them.\n\nAfter an hour, Brian asked Susan, \"Have you spent enough time at the conference for today?\"\n\n\"I think so. I've been on my feet nearly all day. I'd like to sit down for a little while.\"\n\n\"Tell you what, why don't we go back to the hotel?\"\n\n\"Suits me.\"\n\nHand in hand, they walked to the rental car. Brian opened the door for her again. He wanted to stroke her ego, so he said, \"I think your presentation was very good.\" \n\n\"Thank you. We've found so many things that reduce the female sexual response, it wasn't difficult to create a slide show\u2014the tough part has been finding chemicals that enhance it.\"\n\n\"Has your team investigated how to increase the dopamine levels?\"\n\n\"They've worked on that, and also looked at how to reduce prolactin.\"\n\nBetween them they discussed the merits of oxytosin, nitrous oxide, pituitary hormones, estrogen, testosterone, and other chemical compounds which affect the female sexual response. Brian was trying to identify any chemicals or hormones that might give a hint of what Susan's team might be working on.\n\nBrian and Susan continued their discussion until they reached the hotel. Brian handed the keys to the valet, and they entered the lobby. On the way to the elevator, Brian said, \"I have a surprise for you.\"\n\n\"You do? What is it?\"\n\n\"I can't tell you now, but meet me in the lobby at quarter-till-five. Oh, and wear your walking shoes. Then remembering how the wind gust had lifted her hem, he added, \"...but don't wear a full skirt.\" Brian checked his watch, \"It's three-thirty now, so you'll have over an hour to rest your feet before we meet again.\"\n\nThey rode the elevator to their respective floors. Susan went to her room, freshened up, and checked her e-mail. Brian went to his room and set his alarm clock for just short of an hour, plopped across his bed, and took a quick nap.\n\nAt 4:45 PM, Brian and Susan met again in the lobby. \"Can you tell me what the surprise is?\" she asked.\n\n\"I'll show you, but you'll have to come with me.\"\n\nAs they walked hand in hand, east toward Lake Michigan, Susan wondered what kind of surprise Brian had for her. After about ten minutes they came to a small sign that said, \"Chicago Segway Tours.\"\n\n\"Have you ever ridden a Segway?\" Brian asked.\n\nSusan shook her head, \"No.\"\n\n\"I booked a Segway tour for us this evening.\"\n\n\"I'm not sure I can ride one of those things.\"\n\n\"It's easy and they train you\u2014it only takes a few minutes.\"\n\nAfter Brian signed in and took care of the paperwork, Brian and Susan were given helmets and a description about how a Segway works. There were about ten people there. An employee gave them a Segway demonstration, and then they had a chance to try one on their own. \n\nIt didn't take Susan long to get the hang of the little, two-wheeled, electrically-powered, personal transporter. About 6 PM, they were escorted by their tour guide southward through Grant Park.\n\nSusan laughed, \"This is more fun than I expected,\" as she steered her Segway along the sidewalk with the other riders.\n\nThe tour guide stopped periodically and described what they were seeing on their tour. Of course Brian and Susan were familiar with downtown Chicago, but they'd never had an opportunity to see it in such an exciting way.\n\nThey passed a number of Chicago lake front landmarks like Buckingham Fountain and Adler Planetarium. From there, they looked back at the Chicago skyline, framed in billowy white clouds.\n\nSusan commented to Brian, \"It's beautiful\u2014I wish I'd brought a camera.\"\n\nA lady tourist overheard her and took a photo of Brian and Susan together, with Brian's arm around Susan, Susan looking lovingly into Brian's face, the Chicago skyline in the background. The lady obtained Susan's e-mail address and promised she'd e-mail the digital photo to Susan.\n\nThe group continued on their Segway tour, returning to their origination spot about sunset.\n\n\"Thank you for a great surprise,\" beamed Susan.\n\n\"That's not all,\" he said. \"Want to go to the House of Blues? They serve meals until 10 PM at the Back Porch Stage.\"\n\n\"I'd love it.\"\n\nAfter their Segway tour, they headed to the House of Blues and listened to live entertainment while they dined. They also discovered they had similar tastes in music.\n\nHe was melting her heart\u2014she'd known him little more than twenty-four hours, but Brian was her dream come true. She had always dreamed of being swept off her feet by a tall, handsome stranger. That's the way it always was in the romance novels she'd read as a teenager. Fairy tale romances had captured her imagination ever since she was a little girl. In her mind, they were made for each other.\n\nBrian was torn between spying on Susan and having a relationship with her. He wasn't as smitten with her, as she with him, but she promised to be an interesting companion\u2014perhaps a fling\u2014until the end of the conference. He still had a job to do.\n\nThey returned to the hotel around 10 PM. They'd been on their feet most of the day, and were both exhausted. \n\nOn the elevator, the enclosed space in the elevator contained the scent of Susan's perfume, and its aroma captivated him. As the elevator traveled upward, Brian grabbed her around the waist, pulled her to him, and gave her a passionate kiss on the lips. Taken by surprise, she wilted in his strong arms. They reached her floor and the elevator doors opened, so Brian let her go.\n\n\"Good night Susan\u2014and sleep well,\" were the last words she heard before the elevator doors closed.\n\nWhat a day! Susan walked on a cloud as she approached her room. She had never been around a man who was as romantic, as considerate, or as gentlemanly as Brian. \n\nBrian, on the other hand, on his way to his room, thought that a romantic kiss might help gain Susan's confidence. \"Do whatever it takes...,\" his boss had said.\n\n* * * \n\nThursday morning was a carbon copy of Wednesday\u2014they met and ate breakfast, then headed to the conference.\n\nBrian said he wanted to attend two conference sessions, and Susan said the same, so they agreed to meet at lunch and went their separate ways.\n\nBrian was sitting at the meeting place where he'd arranged to meet with Susan, when he decided he'd check his e-mail on his laptop. He had only one e-mail which he quickly answered. \n\nJust as he logged off his e-mail account, he felt a warm hand on his shoulder\u2014it was Susan standing behind him. Caught off-guard, he realized the background on his laptop had Bugger's logo prominently displayed in the upper right corner of the screen; Susan couldn't have missed it, could she? Before he had a chance to close the screen, Susan asked, \"Why do you have Bugger's logo on your laptop?\"\n\n\"Oh shit\u2014I've been caught red-handed,\" he thought to himself. His stomach tied itself in a knot. Brian's mind shifted into overdrive to come up with a plausible answer.\n\n\"Well...\" He tried collecting his thoughts\u2014grasping at straws, he said, \"Since I've been trying to spy on Bugger's employees by acting like one of them, they'd expect me to be using their apps, wouldn't they?\"\n\n\"I suppose so,\" agreed Susan.\n\nBrian wasn't sure his explanation was very convincing, but it was the best he could come up with on short notice. Yet another close call. He figured he'd been lucky too many times\u2014how many more fuckups before Susan figured him out?\n\nHe again quickly changed the subject and asked if Susan was interested in visiting any afternoon conference sessions. She wasn't, and after the latest scare, neither was he. \"How about we skip the afternoon sessions?\" he asked.\n\n\"Most of them looked boring. I don't think I'd miss any of them,\" Susan answered.\n\nBrian hoped she didn't notice the cold sweat on his brow, caused by his latest screw-up. Spying just wasn't a business he was comfortable with.\n\n\"Since we're taking the afternoon off, where would you like to go?\" asked Brian. \"There's the Magnificent Mile, Navy Pier, Millennium Park, the Art Institute, or the Shedd Aquarium. Which will it be?\"\n\nSusan thought about it for a little, then asked, \"What would you choose as your first choice?\"\n\nThe ball was back in his court. \"The Aquarium, I suppose.\"\n\n\"Good choice\u2014mine too.\"\n\n\"Okay, the Aquarium it is,\" said Brian.\n\nSo the couple spent the afternoon at the Shedd watching dolphins, narwhal whales, and just about every species of fish they could imagine. While they walked, Brian kept the conversation steered toward Shtup's business, hoping he'd be able to gain some useful information from Susan.\n\nWhile they were walking between exhibits, Susan commented, \"It sure has been nice to get away from the office stress and the conflicts for a few days.\"\n\n\"Oh... What kind of stress?\" asked Brian.\n\n\"Mainly the pressure to get Feminoral to market. Top management doesn't understand you can't rush research. We've been working sixty hour weeks for months, but they still don't think we've been working hard enough.\n\nThey gave us a generous budget for the project, but then, even though we had plenty of money available, they canceled or postponed the orders for equipment we needed. They said the reason we couldn't spend the money was so our quarterly income results would look good to the Wall Street analysts. How's that for dumb? While we're trying to make money for them, they're covering their asses with Wall Street.\"\n\n\"That doesn't make sense,\" Brian agreed. Now he was getting some useful information to take home from his trip.\n\nSusan continued, \"From the other end, there's all the petty bickering among my team members. You'd think I was a referee for some of their silly little battles. For grownups, they act like a bunch of second graders.\"\n\n\"Why don't you tell me how you really feel?\" Brian quipped.\n\n\"Well, then there's my boss. He's a perfect ass. I just can't stand his sexual harassment. I've given thought to just turning in my resignation and flipping burgers at a fast food restaurant.\"\n\nThey arrived at the next exhibit and marveled at the numbers and colors of the fish on display. Their conversation headed off in a new direction.\n\n\"What's your favorite Chicago restaurant?\" Brian asked.\n\n\"Oh, I don't know\u2014there are so many to choose from. If you narrow it down to a few, like Italian, Mexican, seafood, steak, and so on, maybe I could pick one out of that bunch.\"\n\n\"Okay, how about seafood?\"\n\n\"You'll probably think this is funny, but I always liked Bob Chinn's Crab House,\" Susan said.\n\n\"Really?\" Brian asked, surprised.\n\n\"There are probably better seafood restaurants in the Chicago area, but when I went to Northwestern, I didn't have a lot of money. My girl friends and I liked to go there because the food was good, and not overly expensive. Besides, where can you go for ambiance like that, with inverted peach baskets as shades on the light fixtures?\"\n\n\"You won't believe this, but Bob Chinn's was one of my favorite seafood restaurants growing up. How about we go there this evening for dinner?\" Brian asked.\n\n\"Oh, I'm sorry, but I can't. I already have plans to meet my college roommate, Jennifer, for a 'girls night out' at seven this evening.\"\n\nThey spent another hour or so at the aquarium until they both decided they must have walked three or four miles that day. Brian suggested they return to the hotel.\n\nAfter they arrived at the hotel, Susan freshened up and was checking the e-mail on her laptop at 6:30 PM in her hotel room when she heard the muffled ring tone of her cell phone. The phone rang four times before she was able to retrieve it from her purse. \n\nWhen she checked the incoming call on her phone, she saw it was Jennifer. \"Hi Jen.\"\n\n\"Sue, I know I'm early, but we'll be able to spend more time together. I'm double parked down here in front of your hotel. Can you come down now?\"\n\n\"Sure... Sure, I'll be right down.\"\n\nSusan stood up from her desk and dropped her cell phone into her purse. In her haste to meet Jennifer downstairs, she stubbed her toe on the corner of the desk when she turned around. \n\n\"Damn.\" It didn't hurt her, but it distracted her. She closed her laptop, slipped on her shoes, grabbed her purse, and headed downstairs.\n\nUnfortunately for Susan, she hadn't logged off, or disconnected the Ethernet cable from her laptop. It was still connected to the Internet.\n\nTwo floors above Susan's room, Brian decided to get something to eat for dinner. He really wasn't hungry, but he knew if he didn't eat something, he'd wake up ravenous in the middle of the night. There was a fast food restaurant not far away, so he headed there.\n\nWhile sauntering to the restaurant, he thought about the past two days\u2014he hadn't gathered as much information from Susan about her company as he'd planned. \n\n\"Maybe tomorrow,\" he thought. \"I really want to go home with a stash of stolen information.\"\n\nHe arrived at the restaurant and ordered a Number 1 meal. It didn't matter what he ordered\u2014to him, they were all about the same, and his mind was elsewhere.\n\nBrian picked at his food, eating slowly. He may as well have been chewing on bits of cardboard, because his attention wasn't on his meal\u2014it drifted to Susan. He'd dated a number of women, but there was something special about her. He wished her personality had been less captivating, because it would then have been easier to complete his job.",
        "He daydreamed about her bubbly laugh, her easy smile, the dimple on her cheek, her sparkling blue eyes, her tender touch, the scent of her perfume, and her soft kiss...\n\n\"Pull yourself together,\" he thought, finishing his meal.\n\nHe wandered aimlessly back toward the hotel with his eyes on the pavement and his hands stuffed in his pockets. The two previous evenings were so much more entertaining when he was with Susan. Now he felt like a lost soul among millions in the big city. He kicked an empty soft drink can, which someone had discarded on the sidewalk, watching it roll and tumble off the curb.\n\nAwhile later, back in his hotel room, with nothing to do besides watching some mindless cable TV programs, Brian decided to check his e-mail. After reading and answering his e-mail, he thought he'd check if Susan's computer was on-line.\n\nThere it was! The information on her computer was now his. Brian scrutinized the folders on Susan's laptop, searching for information about Feminoral. He found a project plan, a number of weekly status reports to management, a document showing the testing schedule, and some preliminary reports on the effects of Feminoral. He'd scored, and he'd scored big. His boss would be happy to see all that information.\n\nThen he decided to read Susan's e-mail. With some password cracking software, he was quickly able to extract Susan's e-mail password.\n\nWhen Brian scanned through her e-mails, he found a treasure trove of information he'd be able to take back to his manager.\n\nNear the bottom of the e-mail list, he saw an e-mail from Susan to Jennifer, and Jennifer's response. He opened it and was surprised at what it said:\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nFrom: \"Susan B\" To: \"Jenny M\" Sent: Thursday, June 24, 2010 7:29 AM Subject: I've found him!\n\nJen,\n\nRemember when I told you about my dream man when we were in college? You won't believe this, but I met the most wonderful guy on the plane to Chicago on Tuesday. He's a real gentleman\u2014plus, he's a hunk\u2014the answer to my dreams. He works at the same company as me.\n\nWe went to Uno's for dinner Tuesday night and he held my hand on the way back to the hotel. Last night he took me on a Segway tour of Chicago and then we went to the House of Blues. We have so much in common. He kissed me\u2014I think I'm in love!!!\n\nWish me luck! See you this evening at seven.\n\nSue\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nRe: I've found him! Sent By: \"Jenny M\" On: Jun 06/24/10 9:33 AM \n\nTo: \"Susan B\" Reply to: \"Jenny M\" \n\nCongratulations! I knew you'd find 'him' eventually. You'll have to tell me all the juicy details when we get together this evening.\n\nLove, Jen\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nBrian leaned back in his chair, then re-read the e-mails again. He fought back the thought that he was the \"Big Bad Wolf\" and that Susan was \"Little Red Riding Hood.\" She seemed so innocent and naive.\n\nHe went to bed with a nagging thought. He'd fallen for Susan, too. But they really didn't work for the same company. What if she found out he worked for a competitor? He really didn't want to think about it.\n\nMeanwhile Susan and Jennifer went out on the town Thursday evening. When they'd attended Northwestern, they enjoyed bar hopping on Rush and Clark Streets. Jennifer suggested they relive old times when Susan came to Chicago. \n\nSusan and Jennifer visited several bars on Thursday evening and had a meal, but somehow it wasn't the same as they remembered it. They'd matured\u2014the dating scene was different now. They decided to leave the bars; the leering men made them feel like they were prime steaks in a butcher's display case.\n\nJennifer invited Susan to her downtown apartment. When they arrived, Jennifer opened a bottle of wine. After Jennifer had poured them both a glass of wine and they'd settled on the sofa, Jennifer said, \"Tell me all about 'him'\u2014and don't leave anything out.\"\n\n\"His name is Brian. He's about six feet tall\u2014light brown hair\u2014blue eyes\u2014and handsome\u2014I think he looks like he could be David Beckham's brother. Did I tell you that in my e-mail?\"\n\n\"No, I didn't see that,\" Jennifer said. \"You just met him on the plane on Tuesday?\"\n\n\"Yes, isn't it amazing? It's just like a fairy tale. My prince charming arrived and swept me off my feet,\" swooned Susan.\n\nBefore Jennifer could say anything, Susan breathlessly rattled on, \"He's a real gentleman\u2014he treats me like a princess. Oh, and he's a biochemist for Shtup, but he works in our Boston office. What's amazing is that we both have so many things in common. We like the same kind of food, the same kinds of music, literature... It's almost like we were made for each other. His kisses buckle my knees.\"\n\n\"All you've done is kissed?\" Jennifer asked.\n\n\"So far.\" \n\n\"Are you sure he isn't gay?\"\n\n\"Jennifer! I'm sure he isn't gay.\"\n\nSusan was caught off guard by Jennifer's question. She rolled a quick mental video of Brian since she'd met him, and couldn't recall anything indicating Brian was gay.\n\nJennifer responded, \"I'm not saying gay is bad. I was just wondering.\"\n\n\"Well, it is, if I expect a long-term relationship. I've always hoped to find a man who knocks my socks off. Girl to girl, I almost had an orgasm when he kissed me last night\u2014just like in a romance novel.\"\n\n\"Yeah, I remember you had a whole collection of those on your bookshelf at college. Maybe he will knock your panties off, too,\" Jennifer jested.\n\nSusan smiled\u2014Jennifer's comment sent an image into Susan's head\u2014the mental picture of Brian removing her panties sent a pleasant tingle between her legs. Susan wondered if Jennifer was joking with her. \n\n\"Would you like a refill on your wine?\" Jennifer asked.\n\n\"Sure, this is great wine. Make sure I don't drink too much, okay?\"\n\nJennifer refilled their wine glasses, then said, \"By the way, tell me about your job. Last I heard, you were doing great.\"\n\nSusan began her story, \"After I graduated from Northwestern I received several good job offers. Since mom is diabetic, I picked Shtup\u2014they were working on a diabetic drug, and I felt a calling. After about a year I became a team leader, and everything was going great.\n\n\"When my project manager left the firm, they asked if I'd replace him. It was a great promotion, and I loved my job. Unfortunately, after another year passed, they discovered the diabetes drug had too many side effects, so they canceled the project. Most of the people on our project were shifted to others.\n\n\"I suppose they liked the way I managed the diabetes drug project, because the next thing I knew, I was assigned as project manager for their female Viagra project.\"\n\n\"That's interesting,\" piped up Jennifer. \"Does it work?\"\n\n\"Not as well as we'd like. I'll fill you in a minute... I wasn't excited about the project\u2014after all, it's rather embarrassing telling people what I'm working on. Anyway, the first day I met my new boss, I knew I wouldn't like him. He's about 45 years old\u2014short, bald, and obese\u2014he reminds me of a fat Danny DeVito.\n\n\"He's always making lewd comments or telling dirty stories involving female genitals, then claims we shouldn't be embarrassed, because we work with female Viagra, after all.\n\n\"The code name for our female Viagra drug is Feminoral. He tells all the women that 'Femin' stands for 'feminine' and the 'oral' indicates it can produce a female orgasm with just the touch of a male tongue. I just can't stand his filthy mouth.\"\n\nJennifer shook her head in dismay, \"Oh my, I can understand how you'd be upset.\"\n\nSusan continued, \"When our female Viagra drug was about ready for Phase I testing\u2014that's when we tested it on about twenty volunteers\u2014he gave a sample of our drug to all the women on my team, a survey form, and a Hitachi Magic Wand vibrator. He wanted them to masturbate using the Magic Wand both with and without our drug. Then he wanted them to describe their orgasms\u2014you know, to see how much better it was with the drug. What's even worse is that he offered to video some of the women using the Magic Wand for what he called 'research.'\n\n\"Now, I'm not a prude or anything, and I've jilled now and then, but I'll be damned if I'm going to give him all the details or let him video me just to satisfy his prurient interests.\"\n\n\"How awful,\" interjected Jennifer.\n\nSusan picked up where she left off, \"I did give the drug a try, but it didn't do much for me. I'd say that maybe it was thirty percent better. Most of the other members of my team said about the same thing.\n\n\"Then there's the pressure to get the drug to market. Everyone from the CEO on down has been on our back. Every time I turn around, they want another status report or an update on how much better the latest version is.\n\n\"I'm almost at the point where I'm ready to quit. I don't have to put up with that crap.\"\n\nSusan had tears in her eyes. She hadn't intended to spill her guts to Jennifer. This was their first get together since they graduated, and she wanted it to be a happy reunion.\n\nJennifer put her arm around Susan's shoulder and comforted her, \"There, there... I'm sorry to hear that Sue.\"\n\nAfter she'd settled down, Susan asked how Jen liked her job as a cellist with the Chicago Symphony Orchestra. Jen responded that she enjoyed it, liked having a downtown apartment, but still hadn't found a man that she considered a 'keeper.'\n\n\"Speaking of 'keepers',\" Jennifer said. \"You know our biological clocks are ticking. We probably have only six or eight years\u2014ten at most. I've doubled down looking for a man.\"\n\nSusan responded, \"If Brian doesn't turn out to be my 'man,' I'm considering marrying anything with a penis\u2014with the exception of my boss, that is.\"\n\nThey both laughed uneasily at Susan's lame joke and refilled their wine glasses.\n\nFinally, when eleven o'clock arrived, Susan asked if Jennifer could take her back to the Palmer House, \"I have to meet Brian at eight in the morning, and I want to look my best.\"\n\n\"Please keep me informed how your love life is going,\" Jennifer said. \"And when you come back to Chicago, let me know, and we can get together again.\"\n\nThey hugged each other and shed a few tears, then Jennifer drove Susan back to her hotel.\n\n* * * \n\nBrian and Susan had fallen into a routine\u2014they met at every day at 8 AM and had breakfast in the hotel restaurant, then headed for the pharmaceutical conference.\n\nOn the way to the conference Brian commented, \"Last night on the news I saw there's a Cubs-Brewers game at Wrigley field tomorrow afternoon.\n\n\"Oh darn! I've been a Brewers fan since I was ten. I'd really like to go, but I've already checked out of the hotel.\"\n\n\"Really... Why?\"\n\n\"Because my flight leaves for Houston at 5 PM.\"\n\n\"Why are you in such a hurry to get home?\"\n\n\"I have a lot of work to do, and I've been here since Tuesday evening, so I'm going to have to do a lot of catching up.\"\n\n\"You told me the yesterday you've been under a lot of stress. Why go back home and be under even more stress? Why not live in the moment?\"\n\n\"But I have no place to stay... Wait, maybe I could stay with Jennifer.\"\n\n\"I have two double beds in my room. You're welcome to sleep in the second one.\"\n\n\"I'm not sure, Brian. I don't go around sharing hotel rooms with strange men.\"\n\n\"Do you think I'm strange?\"\n\nShe laughed, \"That's not what I meant. I don't share hotel rooms with... You know what I mean.\"\n\n\"If you reschedule your flight to Sunday afternoon, we can go to Bob Chinn's tonight and see the Cubs-Brewers game tomorrow. Then tomorrow evening we can dine at Lawry's Prime Rib, and you can fly home on Sunday. How's that for a package deal?\"\n\nSusan thought about Brian's offer for about a minute. Brian saw her furrow her brows, considering the alternatives.\n\n\"And what do you get out of this?\"\n\n\"I get to be with a very pretty and charming girl for a few extra hours.\"\n\n\"I suppose I could delay going back to Houston until tomorrow evening.\"\n\n\"Well, I'm leaving for Boston at 3 PM on Sunday. I can drop you off at the airport then.\"\n\nSusan thought to herself, \"He's shown me a wonderful time and he's been a perfect gentleman. I really would like to spend more time with him.\"\n\n\"Okay\u2014you're very convincing.\" So Susan changed her flight departure to Houston at 3 PM on Sunday.\n\nBrian and Susan attended a couple of conference sessions they were interested in during the morning. They met for lunch and both attended the closing session. Around three in the afternoon, the vendors began taking down their booths and exhibits. Brian and Susan headed back to the hotel.\n\nThey met in the lobby at six, had the rental car brought around, and headed toward Bob Chinn's Crab House. Normally the trip took about forty-five minutes, but on a summer Friday afternoon, traffic barely moved\u2014it seemed everyone was leaving town.\n\nWhile they were driving, they talked shop about the female Viagra project. \"Have you tried Feminoral?\" Brian asked.\n\n\"A couple times. My manager gave a Hitachi Magic Wand vibrator and Feminoral samples to all the women on the project team. Then he gave them all a survey form and asked them all to try it and report back how they liked it.\"\n\n\"Did they like it?\u2014the Feminoral, I mean.\"\n\nSusan blushed. \"I thought he was rather crude giving everyone a Magic Wand. I tried Feminoral, but it didn't do much for me. Maybe it was thirty percent better than without it.\"\n\n\"My buddy says Bugger's female Viagra is a lot better than that.\"\n\n\"How'd you find out about that?\"\n\nBrian had another fabrication he'd cooked up which he related to Susan, \"I met an old fraternity buddy at the conference. He works for Bugger. Anyway, he bet me $100 that Bugger would have their female Viagra on the market before us. I took him up on it.\n\nBrian continued, \"Would you believe he slipped me some of their female Viagra pills?\"\n\n\"You're kidding, right?\"\n\n\"No, I have them right here.\" He pulled a small plastic vial out of his pocket and Susan saw it was about half-filled with small pink tablets.\n\n\"At least they're smart enough to choose the right color,\" she said.\n\n\"What do you mean?\"\n\n\"Well, Viagra for men is blue, and Bugger's pill for women is pink. But Shtup chose brownish-black for Feminoral. It looks like a little hamster turd.\"\n\nBrian chuckled at Susan's comment. Then he said, \"My buddy says the code name Bugger uses for their female Viagra is Vaginitrol. \n\n\"He says nitrol is a chemical that's used to relax the blood vessels around the heart to prevent angina, and that Vaginitrol relaxes the blood vessels in the vaginal area, so it increases the flow around the vulva and clitoris.\n\n\"Since you've tried Feminoral, would you like to try a Vaginitrol to make a comparison?\"\n\n\"I normally don't take pills from men that I've just met. There have been too many instances of date rape.\"\n\n\"You don't really trust me, do you?\"\n\nSusan felt like she'd been put on the spot. She wanted to trust Brian\u2014her heart told her to go ahead\u2014her brain told her otherwise. He'd been a gentleman ever since she met him, \"Well... I don't know.\"\n\n\"I understand fully, but you really can trust me.\" He held up three fingers, \"Scout's honor.\" \n\nIn the back of his mind, he was thinking, \"I'm such a shit to take advantage of her like this.\"\n\n\"Let me think about it,\" she said.\n\nBrian put the vial back in his pocket. \"Let me know if you'd like to try one later.\"\n\nSince traffic was slow, it took them well over an hour to reach the restaurant. When they arrived, there was a line of people out the door waiting to get in\u2014typical for a Friday evening. They heard someone in the line ahead of them say there was an hour wait. Brian and Susan stood in line holding hands.\n\nBehind them in line was a group of boisterous, giggly young women. Most of them appeared to be in their early twenties, talking loudly and laughing about some bachelorette party they'd recently attended, and the lewd things that took place. Perhaps they were intoxicated, or maybe they weren't, but they were annoying nearly everyone in the line.\n\nAfter about fifteen minutes, Brian leaned down and whispered in Susan's ear, \"I'm so glad you aren't like that.\" Then he kissed her gently on the lips. She put her hand behind his head and returned the kiss. Her heart began beating like a triphammer.\n\nSusan thought to herself, \"Brian has been so sweet and such a gentleman. He's shown me a great time, and hasn't asked for anything in return.\" \n\nShe compared him with other men she'd dated. Nearly all of them expected to get into her panties\u2014some on their first date.\n\n\"Brian, I'm sorry I indicated I didn't trust you while driving here. I really do. Why don't you give me one of those pills?\"\n\nBrian reached into his pocket and retrieved the vial of small pink tablets. Each one was about the size of a baby aspirin. He opened the vial, extracted one, and handed it to Susan.\n\n\"My buddy says they're sub-lingual. You just slip it under your tongue and it dissolves in a minute or so.\"\n\nSusan popped the pill under her tongue. \"Mmm... Cherry flavored.\" \n\nAfter another 45 minutes, they were finally escorted to a table by a waitress. When they were seated, the waitress brought them a small tray of rolls brushed with olive oil, and took their drink orders.\n\n\"I always loved the rolls here.\" Brian said.\n\n\"Me too, I think I could just fill up on the rolls and forget the meal, they're so good.\"\n\nThey looked over the menu, both undecided about the choices listed. All the seafood had been flown in fresh. Each of them saw several items they liked\u2014it was so hard to make a decision. Brian finally chose the fresh grilled Ahi tuna, and Susan selected grilled halibut. Their Mai Tai drinks arrived, then the waitress took their order, and disappeared in the direction of the kitchen.\n\nBrian and Susan reminisced about times they'd visited Bob Chinn's years earlier. While Brian was telling her about some birthday party he'd attended, she felt an exhilaration she hadn't noticed before. Her heart rate had increased and she felt a little flushed\u2014Brian's story shouldn't have caused that. As she looked at Brian, she realized she was becoming sexually aroused.\n\nShortly afterward, Susan began noticing a nearly imperceptible lubrication between her thighs. She attempted to ignore it, but it increased and she could feel the wetness in her panties, quickly followed by the pronounced swelling of her labia. \n\nShe thought to herself, \"Maybe the tablet Brian gave me works after all.\"\n\nSusan accidentally dropped her napkin, and when she bent over to pick it up, she felt her nipples rub the inside of her bra\u2014they were nearly erect and getting more sensitive. Then she felt a familiar fullness in her vulva\u2014which she recognized as a stage of her sexual arousal. Her clitoris began to tingle when she squeezed her thighs together\u2014she felt goose bumps on her arms, like those she used to get when she read those steamy sex scenes in the romance novels.\n\nBrian noticed her goose bumps, \"Is the air conditioning too cool for you?\"\n\n\"Yes. I think I should have worn a sweater,\" she said, as a sexual shiver shot up her spine. \n\nA few minutes later, she felt her lubrication increase\u2014her panties were getting wet. Since she was wearing a light-colored skirt, she didn't want to have a dark spot on the back of it when she stood up, so she excused herself to use the ladies room.\n\nOver the past few minutes, her clitoris had become fully engorged with blood. Hurrying toward the ladies room, she felt a tormenting sensation\u2014the same wondrously pleasurable feeling she always had just before she orgasmed. With each step, her swollen clitoris rubbed against her panties, and the friction of her bra against her sensitive nipples caused a pleasure-pain shiver to pierce her spine.\n\nBy the time she reached the ladies room, her panties were soaked with her juices. In her rush to get inside, Susan almost ran over two elderly, gray-haired ladies, who were slowly entering the door.",
        "Once past them, she quickly entered a stall and slid her skirt to the floor. She checked the back of it, and luckily, it was dry. She lowered her panties and slipped them off, wrapping them in several layers of tissues she carried in her purse.\n\nSusan always kept two or three super absorbent tampons in her purse, just in case she needed one in a hurry. She decided it was time to use one now. Susan opened the wrapper and inserted it in her vagina. \n\nOhhh... Did that ever feel good! She bumped her clitoris and waves of pleasure flowed through her. Although she masturbated only infrequently, there was an unseen force that guided her hand to that small button between her labia. It only took a minute or so until Susan had a noisy orgasm that made her lightheaded. It was one of the most powerful orgasms she remembered having since she began masturbating at fourteen. She hadn't intended to be so loud, but her orgasm brought so much pleasure she had really lost control. The two gray-haired ladies heard her in the stall. They harrumphed before they left the ladies room, and Susan heard one of them say, \"Trollop.\"\n\nOnce she'd recovered, Susan decided to wash her hands and return to the table, but now she had another problem. She had a definite air of arousal about her\u2014she hoped Brian wouldn't notice\u2014or if he did, that he wouldn't make some awful joke about \"smelling fish,\" in a seafood restaurant yet.\n\nSusan arrived at their table just before their meals were served. Brian noticed Susan looked flushed and her pupils were dilated\u2014a sign of sexual arousal, but he didn't say anything. As they ate their meals, Susan's nose picked up the telltale odor of her arousal. Her libido continued rising, and every time she shifted in her seat, she could feel little tremors of sexual exhilaration shoot through her clitoris.\n\nShe tried to maintain her focus on the meal, but a subliminal message of 's-e-x' kept flowing through her head. It was all she could do to resist dragging Brian under the table and ravishing him on the spot.\n\nThey finished their meal\u2014it had been as tasty as they had remembered from past visits. While they were waiting on the check, Susan again excused herself to use the ladies room\u2014she felt some new leakage.\n\nBack in the restroom stall, she found the first tampon was overflowing with her lubrication. She'd soaked it as quickly as she did on the first day or so of her monthly period. As she replaced the first tampon with the second, she fought the urge to jill. Her body was again begging for sexual release. \n\nThen the thought struck her\u2014if the Vaginitrol she'd just taken had that kind of effect, her job was toast. Shtup's female Viagra project would be history. There was no way Shtup could compete with Bugger when a product this incredible was available.\n\nShe left the stall, washed her hands, tidied her hair, and reapplied her lipstick. When she looked in the mirror, she saw the flush on her face and neck that she felt between her legs.\n\nBy the time she arrived at the table, Brian had paid the check and was ready to depart. \"Where to now?\" he asked.\n\n\"I think you'd better take me back to the hotel.\"\n\n\"Feeling ill?\"\n\n\"No. I've just never felt this level of rapture before.\"\n\n\"Okay, let's go.\"\n\nOn the drive back to the hotel, Susan's level of arousal continued to climb. She craved having Brian's cock buried deep inside her. Susan felt an overwhelming, insatiable urge to mate, almost like a heifer in estrus. She wondered if this was the way teenage boys felt in the presence of females. She had never been so horny.\n\nBrian was making small talk while Susan was giving him hints she wanted sexual intercourse. How could he be so blind? Was she going to have to lift her skirt and show him her dripping pussy to get his attention?\n\nShe could smell occasional wafts of her arousal, and she figured Brian had to have noticed. Yet Brian hadn't made a comment, nor had he made a move on her\u2014which at this point she was desperately hoping he'd do.\n\nSusan considered leaning over and unzipping Brian's fly. If she could get his cock out of his trousers, he might just notice she was horny. However, they were in heavy traffic on the Interstate, headed toward Chicago. There was too much of a possibility for a traffic accident, so she gave up that idea.\n\n\"You really are a gentleman, aren't you?\"\n\nBrian looked at her and smiled, \"Has the Vaginitrol begun working yet?\" \n\nHe knew\u2014he could see the lust in her eyes.\n\n\"Oh god\u2014Brian, I'm yours. Take me back to the hotel and fuck me silly.\" She couldn't believe those words had just come out of her mouth, but they were her true feelings.\n\n\"I'll do my best,\" Brian said. \"Are you on the pill?\"\n\n\"Yes.\"\n\nBy the time they arrived at the hotel, the odor of female arousal filled the car. Brian handed the valet the car keys, who drove it away. Susan hoped the valet wouldn't recognize her the next time they needed the car.\n\nBrian and Susan rushed through the lobby on their way to the elevator. As the elevator doors closed, they wrapped their arms around one another in a passionate kiss. When the elevator doors opened on the 12th floor, a middle-aged couple was waiting there. The man had to cough to get their attention. Embarrassed, they left the elevator and headed toward Brian's room.\n\nOnce inside, they kissed lustily again. Susan couldn't recall ever being so aroused in her entire life. She kicked off her shoes and pulled Brian toward the bed, then stepped out of her skirt. She'd already taken her off her panties in the restaurant, so she was naked from the waist down.\n\nSusan frantically tried unbuckling Brian's belt, but her trembling fingers failed her, so Brian unbuckled it himself. She unzipped his zipper, and when his trousers hit the floor, she pulled down his underwear. His cock was fully erect, leaking pre-ejaculation fluid.\n\n\"My buddy says it takes about four hours for Vaginitrol to wear off.\"\n\n\"I don't care\u2014just fuck me.\"\n\nSusan lay back on the bed and said, \"I'm ready whenever you are, big guy.\"\n\nBrian had never seen a pussy as swollen as Susan's. He knew the Vaginitrol relaxed the blood vessels in the vulva, but Susan's labia were quite puffy, and her inner labia appeared to be affected by edema\u2014deep pink and dripping with her lubrication. Her clitoris peeked out between her inner labia, with its little glans ready for the stimulation of intercourse.\n\nWith Susan's pussy bared, his nose picked up the scent of her arousal and his cock throbbed in anticipation. He was about to plow into her hot pussy when he noticed a small white string dangling from between her pussy lips. \"Are you having your period?\" he asked.\n\nShe shook her head. \"No, I needed the tampon to soak up my lubrication when we were at the restaurant. Would you be a dear and bring me a handful of tissues?\"\n\nWhen Brian gave the tissues to Susan, she removed the tampon, wrapped it in tissues, and disposed of it in the wastebasket. \n\nThen she lay back on the bed again, \"Want to make another stab at it?\"\n\nBoth Brian and Susan laughed at her poor choice of words.\n\n\"Dammit Brian, just fuck me. Please?\"\n\nBrian placed his penis at the opening of her vagina and slowly pushed inside her hot, wet, swollen tunnel. He'd barely entered her when he felt her orgasm begin. Brian wondered to himself, \"Was that the same as premature ejaculation for a man?\"\n\n\"Deeper\u2014faster,\" Susan cried out. Her whole body shook in ecstasy as Brian pumped in and out of her. The sounds of hot flesh slapping against hot flesh merged with their moans of fevered sex. Brian thought she was hyperventilating. Her orgasm seemed to go on and on and on. Brian had never had his cock so milked, squeezed, or tugged by a pussy. He was amazed at the intensity of Susan's orgasm, which caused him to discharge a monumental load. After her full-body orgasm, Susan collapsed under him and went limp. \n\n\"Susan! Oh, my darling Susan\u2014are you all right?\"\n\nAbout thirty seconds later, Susan slowly opened her eyes\u2014they were unfocused. A little drool escaped from the corner of her mouth. \n\n\"Brian...? Brian, what happened?\"\n\n\"You passed out while we were having sex.\"\n\n\"I think we should do it again, because I missed part of it.\" \n\nWhile she was lying there trying to regain her breath, she noticed something warm and wet on her backside. \n\n\"This is the first time I've ever been with a squirter,\" Brian said.\n\n\"What?\"\n\n\"Roll aside.\"\n\nWhen Susan rolled on her side, she felt around\u2014the wet spot seemed quite large. Investigating, she discovered the wet spot was the size of a medium pizza.\n\n\"How embarrassing,\" she said. \"I've soaked the bedspread.\"\n\n\"You're lucky. Most women never squirt their entire lives.\"\n\n\"My orgasm was pretty extreme,\" she admitted. \"I've never had one that powerful before.\"\n\n\"Massive would be a good term,\" said Brian. \"You don't really know how steaming hot you are when you orgasm. It felt like your pussy was trying to chew my penis off. You're definitely multi-orgasmic.\"\n\n\"I've never done that before, either.\"\n\nTheir first coupling left Susan sexually unsatisfied, so they threw the bedspread on the floor and put down a layer of several bath towels. \n\nSusan lay back on the towels, \"Brian, please\u2014let's do it again.\"\n\nUnfortunately, Brian's cock hadn't fully recovered from his first major ejaculation\u2014it was limp, dangling between his legs.\n\nSusan had never tried oral sex before, but she was so aroused and in such need that she gave Brian a blow job to stiffen his cock. Her body cried out to have her innermost itch taken care of, and only Brian's cock was long enough to reach it.\n\nThey had sex three more times that night before the Vaginitrol finally wore off. Both of them had never felt more sexually satisfied. The room reeked of sex.\n\nWhen Susan stood, the ooze of their combined fluids ran down the insides of her thighs. She grabbed a tissue and attempted to mop up the drainage, but there seemed to be no end of it, and the tissue was quickly soaked. From her vulva, she picked up the waft of strong-smelling, sexual-sweat muskiness she always had after she'd had a powerful climax. She raised her arm and caught a similar pungent sexual-sweat odor from her armpit.\n\n\"I really need a shower,\" she said.\n\nBrian said, \"I need one too. I'll join you.\"\n\nTogether, they enjoyed washing every square inch of each other's body in the shower. Some places needed to be washed more than once.\n\nThe exhausted lovers finally crawled into bed naked that night, with their arms wrapped around each other. They quickly drifted off to a deep sleep. The second bed Brian had offered Susan remained untouched.\n\n* * * \n\nSaturday morning, Brian woke up first. Lying there, he watched Susan sleeping peacefully. The sheet had slipped down to the level of her belly button, so Brian had an excellent view of her naked breasts. \n\nAlthough her breasts were small, Brian figured he could cover each one with a small tea cup, her nipples were long, and they stood up nicely in the cool air. At the point where he considered clasping his lips on one of her nipples, Susan finally blinked her eyes open.\n\nBrian said, \"Good morning, lover. How are you this morning?\"\n\n\"Good morning to you, too. I'm a little sore, but a good kind of sore. You really rocked my world last night.\"\n\nShe half sat up in bed and leaned over on her elbow, and kissed Brian passionately on the lips. It was then she felt the cool air on her breasts\u2014she grabbed the sheet and pulled it up to her shoulders, attempting to maintain some modesty.\n\n\"It's not necessary to cover them up\u2014I've been admiring them for the past half hour, and was just about to nibble on them.\"\n\nSusan blushed, \"I've always felt they're too small.\"\n\n\"Anything more than a mouthful is wasted, so small doesn't bother me.\"\n\nBrian's comment boosted her ego. She'd always been self-conscious about the smallish size of her breasts. What a relief that he admitted the size of her boobs wasn't important to him. \n\nJust then they heard the muffled thump of the door to the adjoining room being closed, and shortly afterward, the sound of a vacuum cleaner. \"That has to be the hotel maid,\" Susan said.\n\nBrian rolled and looked at the digital clock on the night stand next to the bed, \"Did you realize it's eleven-thirty? We really must have been tired last night.\n\nHe added, \"Uh-oh... The Cubs-Brewers game starts around one. We'd better get going.\"\n\n\"May I have another of those Vaginitrol tablets?\"\n\n\"Not now\u2014we don't have time\u2014besides, you'd kill us both. Why don't we go to the ball game, and you can have one this evening before bed?\"\n\n\"Damn it Brian, the feelings I had from that one little pill last night were so amazing, I want to try another one.\"\n\nBrian knew the effects of Vaginitrol were were good, but he didn't realize they were that good. From the effects he'd seen with Vaginitrol, it appeared to Brian that Bugger was sitting on a financial gold mine.\n\nSusan had just mentioned the word 'pill' and it triggered something in her subconscious. \"Omigod!\" she said.\n\n\"What's the matter?\" asked Brian.\n\n\"I just realized I forgot to pack my birth control pills. They're back in Houston. I've missed, let's see... four days. Damn.\"\n\nShe felt a mixture of anger, self-reproach, dizziness, and dread. \"Damn, damn, damn. I should have known better, but it's too late now.\"\n\nBrian tried to have empathy for her, but had no idea what was going through her head at that point. \"I take full responsibilities for my actions. If you're pregnant, I'll do the honorable thing.\"\n\nThat gave Susan some small assurance that if she was pregnant, her baby would have a father. A fleeting thought passed through her head\u2014she might be able to snare a wonderful man as father for her child if she became pregnant. She banished the thought\u2014it wasn't the way fairy tale romances played out.\n\nGiven the shock of realization she'd forgotten her birth control pills, Susan resolved that whatever happened, she would live the quote\u2014'put on your big girl panties and just deal with it.'\n\nSaturday afternoon Brian and Susan attended the Cubs-Brewers game at Wrigley Field. They each had two Chicago-style hot dogs and a soft drink, because they'd missed breakfast. The breeze was blowing in from Lake Michigan, so it was a great day to be at the ball park. \n\nThey engaged in good-natured banter throughout the game. \"I don't know how you can be a Cubs fan,\" Susan laughed. \"They haven't won a World Series since... When was it? ...1900?\"\n\n\"Don't make it worse than it already is\u2014it was 1908. And besides, I always root for the underdog.\"\n\nSusan needled him again, \"I suppose you have to, since you can't cheer for a winner. I doubt you'll ever see the Cubs win a World Series during your lifetime.\n\nBrian didn't smile, so Susan piled it on\u2014\"Wait 'til next year,\" she joked. \"That should be the Cubs motto\u2014Wait 'til next year.\"\n\nThe game was well played\u2014the Cubs went ahead 3-1 in the fourth, and the Brewers tied the game at 3-3 in the seventh. The score remained tied until the twelfth inning, when the Brewers hit a home run, winning the game 4-3.\n\nEven though Susan had teased Brian for nearly the entire game, she still held his hand throughout. All in all, it had been a pleasant day for the couple at the ball park.\n\nAs promised, Brian took Susan to Lawry's Prime Rib for dinner Saturday evening. The wine was fine; the service was great; their meal and dessert were superb. Brian made a toast to their relationship. Susan hoped it would lead to more than just friendship or a one-night-stand. She couldn't believe her good luck in finding a man as charming, as kind, and gentle as Brian.\n\nAfter a day at the ballpark and an evening at a fine restaurant, Brian asked Susan if she'd like to take a roundabout walk back to the hotel. They walked hand in hand south on Michigan Avenue to the River Walk stopping here and there to share a kiss. Then they walked along the river for a while until they found a place to stop and sit. They watched some boats on the Chicago River and other lovers\u2014holding hands and kissing\u2014just like them. Finally they decided to stroll back to the hotel. It was going to be their last night together, and neither of them wanted it to end.\n\nThey arrived at the hotel around 9:30 PM. They were a little tired so they went to Brian's room. There was no doubt between the lovers what their next activity would be. Their eyes for each other and their passionate kisses told all.\n\n\"Now may I have one of those Vaginitrol tablets?\" asked Susan.\n\n\"Sure.\" Brian found the vial and gave her a tablet which she slipped under her tongue.\n\nSusan's craving for Vaginitrol had imparted an overwhelming desire for more stimulation between her thighs. She'd had a concern about having not taken her birth control pills for over four days, but the temptation of Vaginitrol trumped her concern.\n\nVaginitrol appeared to be more than just a female enhancement drug; it was an aphrodisiac, and it seemed addicting at that. \n\nThey moved to the bed and Brian pulled the bedspread off the bed and tossed it on the second bed. Then he placed several thick bath towels strategically in the middle of the bed.\n\n\"Brian, these little pills are worth their weight in gold\u2014maybe more. Do you know what that means?\"\n\n\"Yeah, it means you'll be extremely horny in about an hour.\"\n\n\"That too, but do you realize both our jobs are at risk?\"\n\n\"What?\"\n\n\"Well, look at it this way, Feminoral is only about thirty percent better than nothing at all, but Vaginitrol is off-scale high with female sexual arousal. That means even if Feminoral makes it to market first, when Vaginitrol shows up, we're dead.\"\n\n\"Perceptive observation,\" remarked Brian.\n\nBrian and Susan kissed, their passion becoming more inflamed with each kiss.\n\n\"You know something we missed last night?\" asked Susan.\n\n\"No, what?\"\n\n\"Foreplay. We\u2014well, I was so horny that we didn't spend any time with foreplay.\"\n\n\"I'm all for that,\" Brian said. He slowly unbuttoned her blouse and lifted it off her shoulders. She helped him by undoing the clasps on her bra. \n\n\"Men are so clumsy when it comes to unfastening a woman's bra,\" she thought. \n\nHe gently removed it and admired her breasts. The cool air-conditioned air, plus her arousal, caused her nipples to stand up. \n\nBrian latched his lips on her right nipple, and flipped his tongue over it, causing her to let out a small gasp. She immediately felt a surge of heat in her pussy.\n\n\"Oh Brian,\" she moaned. \"That feels so good\u2014do it again.\"\n\nBrian shifted to her other nipple and gave it the same attention he'd given to her right one.\n\nWhile Brian was suckling her nipple, Susan was unzipping his fly, trying to extract his cock from his trousers. Because it was erect, she wasn't having any success. Brian finally unbuckled his belt and dropped his trousers, helping Susan get him undressed.\n\nBrian finally let go of Susan's nipple and they both began undressing each other. Tonight, they took their time\u2014unlike the previous night when they tore their clothes off and jumped immediately into wild intercourse.\n\nWhen they were both undressed, Brian kissed along Susan's neck, across her collar bone, then moved lower and kissed her breasts, paying attention to licking and sucking her nipples. She lay back on the bed and Brian kissed and licked around her belly button.\n\nShe could feel goose bumps appear when he kissed her abdomen, just above her pubic hair. It had been an hour since she'd taken the Vaginitrol tablet, and it was beginning to take effect. \n\nSusan began feeling her lubrication flowing from her vagina, and her labia were full, feeling swollen and engorged with blood. Brian's nose picked up the scent of Susan's arousal and it had a powerful effect on him. His throbbing cock was ready and waiting to perform the function nature intended for it.",
        "When Brian touched her labia with his tongue, her stomach seemed to be filled with butterflies. The most pleasurable feelings flowed through her body, and when he touched her clitoris with his tongue, electric feelings shot up and down her spine. \n\nHer clitoris began to expand with blood and it began tingling each time Brian's stroked it with his tongue. By now, she could feel lubrication flowing from her vagina across her asshole onto the towels beneath her. \n\nThe surge of blood caused by Vaginitrol forced her clitoris to fully erect, which retracted its hood. The little button, now turgid and tingling, caused a tremor to flow through Susan's body every time Brian's tongue touched it. Brian relished the taste of her pussy\u2014a somewhat metallic, salty, sweet and sour taste\u2014but more so, because he could see the effects his tongue was causing.\n\nSusan's sexual excitement finally reached its peak as the first of many intense orgasms assaulted her body. She no longer had control of her limbs. Her orgasm was a toe-curling, mind-blowing, muscle-spasming, stars-behind-the-eyelids kind.\n\n\"Oh god... Oh god... I'm cumming...,\" she cried out.\n\nOne orgasm rolled into the next until after about six or so, Susan had to push Brian's head away, as she lay there panting for breath.\n\n\"I can't take any more,\" she said. \"You're killing me with pleasure.\"\n\nWhen she finally regained some of her breath, she said, \"Brian, you've been neglected,\" and reached down and began stroking his erect penis. It was hard, and leaking its sticky pre-ejaculation fluid.\n\n\"Brian, I need you inside me now, but go slowly and deeply. I want it to last\u2014not like last night.\"\n\nSo Brian mounted her, and slowly they made love. She asked him to hold still so he could feel the rippling of her vaginal muscles while he held his cock motionless inside her.\n\n\"It feels like I'm having convulsive spasms in my vagina, but it isn't an orgasm. It's more like my entire body is almost at the peak of pleasure, just before I orgasm. I've never felt that before. It must be the Vaginitrol causing it.\"\n\n\"I can feel it on my cock,\" Brian said. \"It feels really good.\"\n\nA minute or so went by and the two of them felt the fluttering undulation of Susan's vaginal muscles. Finally she said, \"Brian, you can move now.\"\n\nIt took only a few strokes and Susan went over the top. Her orgasm hit her like a ton of bricks. Her eyes rolled back in her head, her body went rigid, and her pussy throbbed like never before. The sheets balled up under Susan's hands as they clenched into fists. Her body shook with the orgasm of her life. \n\nBrian could feel her pussy milking him like it was a Hoover vacuum cleaner. He didn't think he could withdraw, even if he wanted\u2014but he didn't have the desire to. He was getting as much pleasure as Susan\u2014it felt like her pussy was sucking the semen out of him. Just when he couldn't take any more pleasure from their fucking, Brian felt his balls tighten, then he let go with a load that surprisingly was larger than the first one the previous night.\n\nSusan blacked out again, but this time, Brian expected it. Less than a minute later, she came around.\n\nWith a smile a mile wide, Susan said, \"That was wonderful, let's do it again when we regain our strength. Right now, I'm as limp as a wet noodle.\"\n\n\"You squirted again,\" Brian said.\n\n\"And all because of Bugger's little pink tablet.\"\n\nThey made love twice more. They'd have gone another round, but their weary muscles prevented them from continuing. Their minds and their genitals were ready\u2014their tired bodies weren't.\n\nCompletely exhausted, they dragged themselves to the bathroom, showered, and collapsed in a tangle of arms and legs on the bed.\n\nThe last thing Brian and Susan said to each other on Saturday night\u2014actually early Sunday morning\u2014was, \"I love you,\" and they meant it.\n\n* * * \n\nSunday morning about 5 AM, Susan was awakened by Brian thrashing, sobbing, and whimpering beside her. At first she didn't understand what was happening, but once she was fully awake, she realized Brian was still asleep, having a nightmare.\n\n\"Brian... Brian, wake up.\"\n\nShe put her hand on his shoulder and gently shook him awake. He had an expression that was a mixture of sadness, fear, and agitation.\n\n\"What's wrong?\" Susan asked.\n\n\"I can't tell you. I wish I could, but I love you too much.\"\n\nSusan couldn't make any sense of what Brian was telling her. \"Was it a bad dream?\"\n\n\"Yes.\"\n\n\"Why don't you tell me about it\u2014get it off your chest, and then maybe you can go back to sleep.\"\n\nBrian could feel himself torn in two. His mission for Bugger consumed half of him, but the other half of him was in love with Susan. He tried looking into his future; being a spy for Bugger wasn't what he'd had in mind when he took on his 'special project.' \n\nA thought flashed through his head. \"Be a man. Make a decision,\" it said.\n\n\"I have a confession to make.\"\n\nSusan was more than a little surprised. \"Was he already married?\" she wondered. \"Was he an ax murderer?\"\n\nWith tears in his eyes, Brian said, \"I truly love you, Susan...\" \n\nSeveral seconds went by and he cleared his throat, \"...but I've been spying on you.\"\n\n\"What do you mean, you've been spying on me?\"\n\n\"I stole files from your laptop about Feminoral. I work for Bugger, and my name is really Arthur Smithers.\"\n\n\"Why you bastard!\" Susan shrieked. \"You seduced me just to get data from my computer?\"\n\nShe flew into a rage and began beating on his chest with her fists. The newly identified Arthur managed to grab her wrists to keep her from scratching his eyes out. \n\n\"I ought to kick your balls so high between your shoulder blades that you'll have to unzip your fly to spit,\" she screamed.\n\nArthur again said, \"Susan, believe me, I really do love you.\"\n\n\"I trusted you, and you said you loved me.\" She burst into tears. \"But you're like every other man\u2014once you've had sex with me, I'm just your throw-away whore. I hate you\u2014I HATE YOU!\"\n\nSusan managed to free her wrists from Arthur's grasp and ran into the bathroom, slamming the door behind her. Arthur heard the lock click, then the sounds of glass or something breakable shattering on the bathroom floor. Susan bawled loudly for several minutes. The sounds eventually turned to whimpers and sobs.\n\nArthur, remorseful for the emotional pain he'd caused Susan, tiptoed to the door and heard sniffling and sobbing coming from behind the door.\n\n\"Susan, I really do love you.\"\n\n\"Go away!\" \n\n\"I didn't really want to spy on you. My boss gave me a 'special project' to spy on you and I was dumb enough to take it. I love you more than you'll ever know. In fact, I'm going to quit my job so we can be together.\"\n\nSusan heard what Arthur had just said, and when she understood the part where he said he was going to quit his job, it caught her attention. If he quit his job, then he wouldn't have access to any more Vaginitrol, would he?\n\nShe opened the bathroom door a crack. Between sniffles, she asked, \"Brian\u2014Arthur? You'd really quit your job for me?\n\nArthur said, \"Yes\u2014I couldn't live with myself if I took your files back to my boss.\"\n\nThrough her tears, Susan began laughing, \"You were spying on me, but your company is so far ahead of mine. It should have been me who spied on you. If you want, you can copy my entire laptop to yours. None of the information on it will benefit you.\"\n\n\"Well, I'm not going back. I'll call my boss and tell him I'm resigning.\n\n\"No, no, no. You can't quit working for Bugger,\" Susan countered. \"If you quit, then you couldn't get your hands on more Vaginitrol. If anyone should quit, it should be me. Since Vaginitrol is so much better than Feminoral, my project is dead anyway. And I really do love you too, Brian, or Arthur, or whatever your name is.\"\n\nSusan came out of the bathroom naked and wrapped her arms around a naked Arthur. She gave him a lusty kiss, slipping her tongue between his lips. Her steamy kiss aroused his cock again, and within a few minutes, they were back in bed with Arthur thrusting in and out of her vagina.\n\n\"Careful there, cowboy,\" Susan said. \"I'm a little tender there on my lower left abdomen.\" \n\nIt was then that Susan recognized why. \"Instead of calling you Arthur, do you mind if I call you 'Daddy'?\"\n\n\"Why would you do that?\" Arthur asked.\n\n\"Because I'm ovulating\u2014I'm sure of it.\"\n\nArthur and Susan spent the remainder of the morning discussing where their relationship was headed.\n\nArthur said, \"If you're pregnant, I'll marry you. Even if you're not pregnant, I'll marry you.\" \n\nHe dropped to one knee and asked, \"Susan, will you marry me?\"\n\n\"Yes, I'd marry you even if your name isn't Arthur.\"\n\nThey passionately kissed and Susan took another Vaginitrol tablet. Then they fucked until their sex organs were rubbed raw.\n\n~:~ ~:~ Epilogue ~:~ ~:~\n\nBy the time smart readers finished the first page of this tale, they probably concluded Brian (Arthur) and Susan would fall in love and have sex before the end. However, there's a little more to the story.\n\nUnknown to Arthur, Susan, and all the middle management of both their employers, the highest levels of management at Bugger and those at Shtup had been holding secret meetings, discussing a possible merger. Both companies, calculating they could make more money by cooperating, finally decided to combine their operations. The newly formed company, known as Bugger and Shtup, is now more commonly identified by the public as BS.\n\nAnd what were the results of Vaginitrol, you may ask? Well, what normally occurs in drug trials, the Food and Drug Administration (FDA) became involved and reviewed the Phase I results. There had been fifty female volunteers who tested Vaginitrol; ten male technicians supervised and monitored the testing. One problem with Vaginitrol was its addictive quality. Second, were the side effects\u2014not for the women, but for its effects on men. \n\nBy the end of Phase I testing, two of the ten males had cardiac arrest caused by overexertion (they had literally been fucked to death). Seven others were hospitalized for exhaustion. The tenth one had his male appendage so badly mangled by intercourse with the women, that it had to be amputated.\n\nThe FDA issued its opinion that Vaginitrol was a \"clear and present danger\" to society. The FDA ruled that any arousal drug which could turn a nun into a raving nymphomaniac should not be released to the public. That, my readers, is why you won't be able to purchase Vaginitrol at your local pharmacy.\n\nOn the personal side of the story, Arthur and Susan both realized they had found \"the one,\" so they quit their jobs and moved on. Several months later, Arthur and a very-pregnant Susan were married, with Jennifer as their maid of honor.\n\nArthur finally found another job as a biochemist at a consulting firm. Luckily for him, he was able to perform a significant portion of his work from home, where he could spend a lot more time with Susan and their cute twin daughters.\n\nSo the moral to this story, if there is one: Be careful with whom you sleep, or you too might find yourself sleeping with the competition.\n\n* * * * * * * * * * * * * * * * * * * * * \n\nI want to thank Nymphwriter for editing my story and for her suggestions to improve the plot.\n\nThank you for voting."
    ],
    "authorname": "Privates1stClass",
    "tags": [
        "spy",
        "female viagra",
        "chicago",
        "pizza",
        "shtup",
        "bugger",
        "seagull",
        "sexual sweat"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/sleeping-with-the-competition"
}
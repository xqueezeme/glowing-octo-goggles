{
    "title": "The Steamy Chase Ch. 04",
    "pages": [
        "Comments, critiques and tips are welcome.\n\n***\n\n\"Busy?\" Cole asked, leaning against Kayla's desk.\n\n\"For you, no. What's up?\" Kayla looked up at Cole with a smile.\n\n\"Good. Come on, we're going out for lunch.\" Cole said reaching for Kayla's hand.\n\n\"Cole...I have a lot...\"\n\n\"For me, you're not busy remember? Come on Kay. And that's an order.\"\n\n\"Bully.\" Kayla muttered as she stood up and smoothed the front of her chic slim-fit, shape-defining black and white peplum shift dress. She knew she looked elegant in that dress.\n\n\"I heard that.\" Cole said picking up her bag.\n\n\"You were meant to.\" Kayla said snatching her bag from Cole and falling into step beside him.\n\n\"Love the shoes.\" Cole said glancing down at Kayla's black ankle strap platform heels. Its silver strap gave the shoes a sexy glamorous look.\n\nKayla chuckled. \"Wanna get one for Briana? It will look amazing on her feet.\"\n\n\"Is that all you girls think about? Shoes?\" Cole drawled, as he hit the call button for the elevator. \n\n\"Don't even start Cole.\" Kayla gave a mock scowl making Cole roar with laughter as they stepped into the elevator which promptly began its descent to the ground floor. \n\n***\n\n\"Okay spill it.\" Cole said staring into Kayla's eyes.\n\nThey were seated in an Italian restaurant and the waiter had just taken their orders and delivered their drinks.\n\n\"Spill what?\" Kayla asked looking at Cole with her striking green eyes.\n\n\"Come on Kay, I'm not a fool so don't treat me as one.\"\n\n\"I don't know what you're talking about.\" Kayla said, looking Cole in the eye challengingly.\n\n\"I've been watching you for the past two weeks Kay. You're not yourself. Something is going on with you and I want to know what it is. We're not going to leave here until you talk so better start if you have a lot of stuff to do as you claimed.\"\n\nKayla sighed. She knew Cole was not going to let her off the hook till she talked. \"You know, the normal thing to do, will be to wait till I feel like I want to talk Cowboy.\" She said, taking a sip of her drink.\n\n\"Not this Cowboy baby.\" Cole signaled their waiter. \"Hold our orders for now Antonio. I'll let you know when to serve us.\"\n\n\"Certainly Mr. Adams.\" The waiter said with a bow and left them. He was always thrilled to see Cole because he was a big tipper. \n\nCole turned to look at Kayla with raised brows, waiting for her to start talking.\n\n\"It's nothing really. I...\" \n\n\"Not from where I'm sitting Kay.\" Cole said, cutting Kayla off. \"You're walking around like someone died. You have circles around your eyes. You've lost your spirit. You're not the Kayla I know and adore. You're just a...shell. So don't tell me it's nothing. Don't insult my intelligence Kay. I've waited for you to open up but...\" Cole threw his hands up, \"I'm done waiting.\" \n\n\"Okay, settle down Cowboy.\" Kayla looked down at her fingers, which were gripping the napkin on the table as if it were her lifeline. \n\nShe saw Cole's hand touch hers and gently pry her fingers open to pull the napkin out of her palm. He replaced it with his fingers. The gesture was so sweet Kayla knew she was going to cry. She also knew she was going to tell Cole everything. He was the only person who knew that beneath her tough exterior, lied the softest of hearts. She just hoped her spilling wouldn't create any problems for Dean because Cole was very protective of her and acted irrationally when it came to her. She remembered when Cole taught her how to throw a punch so that she could punch anyone who fucked with her if he wasn't around to do the punching himself. Kayla smiled and felt a tear slip down her cheek.\n\n\"Shit!\" Cole muttered and promptly leaned over to wipe at her cheek with a handkerchief he pulled out of his pocket. \"Kay, what is it?\"\n\n\"Oh my God, Cole I'm not tearing up because of whatever is bothering me. Honest. I'm just...thanks for being you.\" She said in a small voice.\n\n\"Hey, you're the sister I never had. And no one fucks with my Kayla. If anyone dares fuck with you, I'm gonna huff and puff and...\" He broke off when Kayla burst into laughter.\n\n\"You're nuts you know that? Okay here goes. I...I hooked up with Dean. And...\"\n\n\"What?\" Dean bellowed, his eyes widening. \"What do you mean you hooked...\"\n\n\"Keep your voice down Asshole. Do you what the whole frigging restaurant to hear?\" Kayla asked turning to look around. \"Jeez!\"\n\n\"You actually slept with him?\" Cole whispered, and promptly groaned at Kayla's nod. \"What the fuck were you thinking Kay?\"\n\n\"That's just it. I wasn't thinking.\" Kayla said quietly, looking down at her fingers.\n\nCole sighed and reached out to tilt Kayla's chin up. \"Kay, I've known for a while that you have the hots for him.\"\n\n\"What?\" It was Kayla's turn to exclaim, her face turning rosy pink.\n\n\"Don't bother denying it. I didn't say anything because I knew you were sensible enough to know he's bad news. I love Dean like a brother, but I'll be the first to admit no woman is safe around him. What made you...he didn't force himself on you did...\" Cole's voice had gone lethal.\n\n\"No, no. Nothing like that. I...I might have done the forcing.\" Kayla said with a sheepish look, covering her face when Cole groaned.\n\n\"Kay...\" Dean ran his fingers through his low cropped hair in frustration. \"When was this and what happened after?\"\n\n\"On the Island. Nothing happened after. I had to promise it was...going to be a onetime thing before he...went through with it.\" A frown appeared on Kayla's face, marring the space between her brows. \"Look Cole, this is really none of your business. We're both adults and we had a deal so...\"\n\n\"A deal?\" Cole actually screeched. \"You made a fucking deal to just fuck each other and forget about it? Jesus Kay. You're not that kind of girl.\"\n\n\"Well he didn't know that initially. He thought I was...'worldly'.\" Kayla said giving the word quotations with her fingers.\n\n\"Is that what he said?\" Cole's eyes narrowed dangerously. \"He thought you were a slut?\"\n\n\"Cole calm down.\" Kayla didn't like it when Cole got worked up.\n\n\"Don't tell me to calm down. Why else would he make such a deal with you? Of course he thought you were a slut. Asking for it and all. Fuck Kay!\" Cole hit the palm of his hand against his forehead in frustration.\n\n\"Well he didn't think so for long. And the deal was actually made after he realized I wasn't that worldly after all.\" Kayla said with a shrug. \n\n\"At what point exactly did you kids make that deal?\" Cole sounded pissed off.\n\n\"He's older than you Cole.\" Kayla chuckled, trying to lighten the mood. \"It was after he found out I was a 'Mary' as he stupidly put it. The guy is a jerk.\" Kayla said, and then quickly added when Cole growled... \"He really didn't want to. But I couldn't stand being rejected simply because I was a virgin. So I told him it was going to be a onetime thing. And I meant it. It's just that...\"\n\n\"Wait. You did tell him you were a virgin before the whole thing started right?\"\n\n\"No.\"\n\n\"He had to find out himself?\" At Kayla's nod, Cole shook his head disapprovingly. \"That's not cool Kay. That's called ambushing. Not cool.\"\n\n\"I'm sorry.\" She groaned. \"And he told me as much. That's why he wanted to stop.\"\n\n\"But you talked him into going ahead with it. That's how come you guys had to make a deal. No strings right?\"\n\n\"Right.\"\n\n\"But it's killing you. You think about him all the time. You want to be with him. You...\"\n\n\"What am I going to do Cole?\" Kayla whimpered, dropping her head on the table. \n\n\"You're in love with the idiot.\" Cole muttered.\n\n\"What?\" Kayla's head came off the table, her heart pounding rapidly. \n\n\"You're in love with Dean, Kayla.\"\n\n\"I don't think...\"\n\n\"It isn't just a mere crush. You're totally in love with the moron.\" Cole rested his elbows on the table and placed his head in both palms, lost in thought. \"I have to sort this out somehow.\" He kept muttering to himself.\n\n\"Cole, stay out of it please.\" Kayla's cheeks were wet with tears. They couldn't seem to stop flowing. She hated feeling this vulnerable. She reached out and snatched the handkerchief Cole offered and furiously wiped at her cheeks. \"Promise me.\"\n\nInstead of responding to her demand, Cole rather signaled the waiter, who quickly came to serve their food.\n\n\"Cole...\"\n\n\"I can't promise anything Kay. But I'm going to give you time to sort this out, or I'm going to come down hard...on both of you. That, I promise.\" Cole said, hard-faced.\n\n\"I...I don't think I can eat.\" Kayla said in a small voice.\n\n\"You will eat Kay. All we ordered are your favourites. I want to make sure that you've eaten something. Did I add that you've lost weight?\" Cole asked digging into the food.\n\nKayla sighed. \"You do know I'm gonna get you for this don't you?\"\n\n\"I'm looking forward to it love. Go on, eat.\"\n\n***\n\nIt was Friday night. A day after Kayla spilled her heart to Cole. She had just stepped out of the shower when she heard her door bell ring. Kayla lived in a really nice condo, which she had bought with her inheritance, that had been given to her by her parents' lawyer when she got to the age of twenty-one.\n\nWhen her parents died, she had been taken in by her maternal grandmother, who had also died a year after her parents. Her inheritance had been held in trust for her by the lawyer of her parents till she was twenty-one years. She had quickly bought herself the condo and later, enrolled in law school. Though she had lived in a foster home and hadn't really been shown much love and direction, she planned on doing something worthwhile with her life so that one day, her children would be proud of her.\n\nKayla had a beautiful home and she was proud of it. It had been designed elegantly to suite her personality and the beautiful paintings artfully arranged on the walls gave the whole place a touch of class. \n\n\"Patience.\" She muttered under her breath when the doorbell kept chiming. \n\nKayla pulled on a robe, tying it as she made her way to the main door, wondering who was bothering her at that time of the night. She looked into the pinhole and froze.\n\n\"What the fuck did you do, Cole.\" Kayla muttered, running her fingers through her wet short hair in frustration. \n\nDean was at her door. It had been almost three weeks since their romp on the Island and this was the first time she was seeing him. She knew she had to open her door and apologize to Dean for whatever Cole had said or done, but the sudden heated ache between her thighs had Kayla reaching for the pillar beside the door to maintain her balance. She wanted him. Bad.\n\n\"Oh my God!\" Kayla whimpered. She couldn't believe that a mere glance of Dean Broody could arouse her this much. Kayla took deep breaths, trying to pull herself together.\n\nStraightening her back, she cursed Cole in her mind. Thanks to him, Dean was at her door, probably pissed off. They did have an understanding after all. The fact that she was dying inside didn't nullify that agreement. She looked down at her robe, making sure it was tied very well as she was naked beneath it. This wasn't going to take very long. She would simply apologize and tell Dean to ignore Cole and then send him on his way. With a deep breath, Kayla opened the door.\n\n\"Look Dean, I'm very sorry for...\" But before she could complete her sentence, Dean's mouth was on hers.\n\nOne second she was apologizing, the next, Dean was kissing her senseless. Kayla resisted for just a second, and then she melted into that steamy kiss. The door slamming shut registered in a faraway place inside her brain. God, she had missed those succulent lips. She felt so much pleasure from Dean's lips she thought she'd go mad. When Dean flicked at the sensitive roof of her mouth with his tongue, she mewled in amazement. She couldn't think beyond the kiss. \n\nDean trailed his lips down her throat, dropping kisses and licking at her sensitive skin. He pulled one side of her robe off her shoulder, baring her left breast with its gold ring. Even as a thrill shot through Kayla, she was bombarded with a tiny voice of reason inside her head, which was opposed to what her body was begging her to do that very moment. She knew she had to stop it.\n\n\"Dean...\" But her voice trailed off into a lusty moan when his warm lips closed around her nipple. All the resisting, all her anger at Dean, fell with one damn touch of his perfect lips. \"Oh my God! Dean.\"\n\nAn ecstatic cry ripped itself from her throat at the shocking sensation of warmth and wetness as Dean gently tugged her nipple ring between his teeth. Her world slid away. She vibrated with need and could barely breathe. She got instantly soaked. Dean slid his thigh between hers, and Kayla rocked against it uncontrollably. She didn't want this to stop, wanted more, wanted him.\n\nShe needed to come. \n\n\"Oh, God,\" she whispered shakily as he continued to suck her taut flesh, a hand moving to her butt to press her tighter against his thigh. \n\nDean felt her wetness soak through his jeans and let out such a sexy moan, Kayla shivered. He withdrew his thigh from between hers, delighting in Kayla's cry of protest.\n\n\"Dean, please,\" she gasped. She thought she would definitely end up in a mental institution if Dean stopped at that point. Surely he wasn't that cruel, she hoped.\n\nKayla gave a lusty cry and nearly crumpled to the ground when she felt Dean's thick finger inside her wet folds, his thumb drawing devastatingly slow circles on her enlarged clit. His strong arm around her waist held her up. As those wicked fingers worked gently and maddeningly on her, Kayla undulated shamelessly against them, her head falling back in ecstasy. His fingers stroked and strummed her, wreaking wonderful havoc on her slick flesh. It felt so good she sobbed with pleasure. She was supposed to fight this, avoid this, be angry at him, but she couldn't fight the pleasure that built until it felt like fire was searing her insides and tearing through her mind. \n\nWith a scream, Kayla unraveled around those fingers. She went to pieces as Dean kept a tight squeeze on her pulsing clit with his thumb and forefinger, whilst pushing two fingers deeply inside her. Her pussy convulsed rhythmically around his fingers. Her legs turned to jelly and she sagged against Dean, breathing harshly. He kissed her gently on her swollen lips, their tongues dancing around each other, drawing a groan from Dean. When they came up for air, he gently withdrew his fingers from between her legs, slightly shaking his head at her when he saw her face flame with mortification. She leaned her forehead against Dean's chest as she shivered uncontrollably. He stroked her hair soothingly as she tried to bring her breathing under control.\n\n\"I can't help it Kay.\" Dean muttered, feeling Kayla jerk at the sound of his voice. \"I've tried to stay away from you these past weeks. God knows I've tried. I can't anymore.\"\n\n\"What did he say to you?\" Kayla asked, her voice muffled because of the position of her head.\n\n\"What did who say?\" Dean asked, sounding genuinely confused.\n\nKayla looked up at him then. \"Didn't Cole talk to...never mind. Dean, just because you want to fuck me doesn't...\"\n\n\"Damn right I want to fuck you Kayla. But it's not just that. What I feel is more than mere fucking.\"\n\nKayla snorted. \"Dean come on, this is me you're talking to.\" All Dean ever wanted with ladies was to get his rocks off and everyone knew that.\n\n\"Look, I've tried hooking up with other women these past weeks but it just doesn't help. I've jacked off until my balls are blue, just thinking about you and it doesn't help either. Nothing's going to help until I have you again. I know that. But it's not just about the sex Kay. I...I don't know how to describe it but...\" Dean unconsciously rubbed his chest. \n\nKayla's breath hitched in her throat. Dean looked lost and confused. She knew she should be furious at him, but surprisingly, all she wanted to do was hold him and comfort him, which didn't make any sense to her. But the little voice inside Kayla's head told her not to take Dean seriously as what he had just said could be one of his lines. It was a known fact that if Dean Broody wanted to fuck anyone, he would say and do anything to get into their pants.\n\n\"Listen Dean, you know this can't work. We have to move on.\"\n\n\"I don't want to.\" Dean whispered.\n\n\"Dean...\"\n\n\"Please Kayla. I'm going out of my fucking mind here.\" Dean rasped, and she'd never heard him sound so fierce.\n\n\"I think we should...\"\n\n\"And that's your problem right there Kay. You think too much. Just let go and feel.\" \n\n\"I thought I did just that on the Island.\" Kayla said in a shaky voice. God, how she wanted this man!\n\n\"So what are you afraid of now?\"\n\n\"I gave you my word.\"\n\n\"Break it.\"\n\n\"Dean...\" A whimper escaped Kayla when Dean's lips grazed her left ear.\n\n\"Don't think Kay. Just feel.\" The sound of his voice was so soft and erotic her pussy clenched.\n\nThen he was bending to capture her lips in another scorching kiss. And just like that, her protests slid away. She wanted him...all of him. Kayla knew she was probably acting like a bitch in heat but she needed him, needed to feel him inside her one more time. She would think of the consequence later. But for now, she just wanted to feel. Her hand slid down to the bulge at his groin and squeezed, almost coming again at the lusty groan that tore out of Dean.\n\n\"Jesus Christ, Kay.\" He whispered into her mouth. \"What the hell are you doing to me? I want you so bad it hurts.\"\n\nDean loosened the sash holding Kayla's robe together. When it fell open, he broke off the kiss and stared at the naked, sexy, alluring body beneath it and almost drooled. \n\n\"God, you're beautiful.\" He cupped her face in his hands and threaded his fingers through her hair. Then his hands were moving down to her tiny waist and he was picking her up. Dean turned around and planted her back against the door. \"Put your legs around me Kay.\" He husked.\n\nKayla did as instructed and immediately felt Dean's hot erection probing against her pussy lips and, oh, he felt enormous. She gasped, wondering at which point Dean had released his hard cock from his jeans. Then her breath caught on a groan and she tensed, remembering the pain she had endured the last time.\n\nDean sensed her fear and quickly reassured her, \"It's not gonna hurt this time.\"\n\nThen taking her lips with his, he gently pushed into her folds, his thick shaft stretching her, filling her, invading her silky, soft, wet heat. Dean nearly came right there when Kayla tightened around him.\n\n\"Oh, yes,\" he groaned, his voice shaking.\n\nA shockwave pulsed through Kayla's body as she felt Dean moving deeper into her. Her pussy adjusted to the overwhelming stretch and accepted him greedily. She loved how he felt inside her, thick and deliciously intense. She locked her legs tighter around him and gave a throaty moan. Dean smiled when Kayla gave that low throaty moan.\n\n\"Good?\" Dean asked against her lips.\n\n\"It feels too good.\" Kayla breathed, her mouth falling open against Dean's. The feeling was indescribable. That sweet nerve-stimulating sensation of being penetrated, feeling that hard flesh fill her up, was totally out of this world. Penetration was definitely a new high for her.\n\n\"Do you have any idea how good you feel?\" Dean breathed against her lips.\n\nThen he deepened the kiss, his tongue swirling erotically around hers. Kayla loved his taste, felt intoxicated by it. She felt her head spin with pleasure as Dean started moving slowly within her. One of his hands slid beneath her bottom to hold her tighter against him as he took her with gentle thrusts, driving her out of her mind with deep, slow strokes. Kayla gave a lusty moan and brought her arms up to wrap around his neck, looking Dean in the eye.\n\n\"You feel amazing Dean.\" She whispered, seeking his mouth for a spine-tingling kiss even as she tightened her legs around him, trying to keep up with his rhythm, but in the end she let him drive them both toward bliss.",
        "\"Have you thought about this as much as I have?\" He murmured against her lips.\n\n\"Every second.\" She breathed.\n\nKayla's breathy moans and cries of pleasure were music to Dean's ear and they spurred him on. She whimpered, her body clenching around his cock when he went even deeper, stretching her till her muscles expanded around his girth. She rippled and constricted around him, tighter and tighter, drawing groans from Dean. \n\n\"Oh fuck Kay.\" Dean swore as his head fell back in abandon.\n\nWith a guttural cry, Dean jammed into her in a series of deep, firm thrusts. He gave it to her hard and fast, showing no mercy. His hot, wet mouth fastened to the side of her neck, sucking on the sensitive skin and driving Kayla even more out of her mind. She cried with the pleasure of it, her entire body shivering with delight as he fucked her thoroughly, the sounds of their joining, loud in the quiet living room. Her mouth fell open as she threw her head back in ecstasy, not even feeling it when her head hit the door. Kayla was mindless with pleasure. Dean pounded relentlessly into her, rotating erotically within her, rubbing that pleasurable spot inside her and grinding against her clit the whole time. \n\nThere was no fighting her orgasm when it hit. Kayla's thighs locked down on his hips as her world exploded. She kept screaming his name as wave after wave of thunderous rapture swept through her, each contraction seeming to allow him deeper inside her. Her orgasm was so explosive her whole body shook uncontrollably as she clung to Dean.\n\nBefore she could completely catch her breath, however, Dean's hands slid down between them, finding and stroking her clit persistently with his fingers as he continued to drive his cock into her with control and power. Her body convulsed uncontrollably as another orgasm tore through her.\n\n\"Oh God. Oh God! Dean!\" Her cries became ear-splitting shouts.\n\nDean watched Kayla's eyes dilate, looking blissed out, with tendrils of hair stuck to her sweaty forehead and thought no woman could look as hot as she did that very moment. He could watch her in this state forever.\n\n\"God, I can't get enough of you,\" he murmured, just as he leaned down and took that nipple with the ring back into his mouth and worked on it like his life depended on it. \n\nKayla lost all ability to breathe. She felt each pull on the ring deep within her pussy where his hard cock thrust leisurely. Then Dean's thumb started circling and rubbing her clit with maddening speed. \n\n\"Don't stop, don't stop... ohhh...\" Kayla felt another impending explosion and couldn't believe she was about to have another orgasm. Surely too much of that could be harmful. \"Oh My God!\" She screamed as all hell broke loose in her body and she surrendered to a powerful climax. irrepressible tears streamed from her eyes.\n\n\"Kayla.\" Dean whispered her name as he watched the tears flowing in earnest. But for the ecstatic expression on her face, Dean would have stopped because seeing her tears made him want to destroy something. Her expression however implied he was rocking her world and Dean knew he would give and do anything to see that look any day. God, she was exquisite.\n\n\"Dean, you've got to stop please.\" Kayla cried out. She didn't think she could take any more. She was nearly hyperventilating.\n\n\"You sure about that?\" Dean husked, shifting his hold on her in such a way that, his forearms were under her thighs, opening her up for a deeper penetration that lodged his hard length against her cervix. Then he increased his tempo, his new angle causing his dick to hit that pleasure spot inside her without mercy. The touch of pain mingling with the pleasure swirling inside her, totally blew Kayla's mind into space. And just like that she felt the beginnings of another climax start at the base of her spine. The intensity of the feelings coursing through Kayla scared her so much a cry wrenched from her throat.\n\n\"Please, I can't take any...\" But her words turned into an erotic wail as Dean plunged his tongue into her ear, mimicking the movement of his dick inside her.\n\nEyes closing tightly, Kayla came with a hoarse cry of Dean's name, her entire body convulsing in fierce tremors as another toe-curling orgasm exploded through her. She constricted around him tightly, and she knew, from the erotic sounds he made that he loved it.\n\n\"Dean...\" Kayla sobbed as she clung tightly to him. \"Please.\"\n\n\"Shhh\" Dean walked with a trembling Kayla still wrapped around him and deposited her on a nearby couch, his cock still lodged deeply inside her even as he felt liquid fire burn within him, centering on his groin.\n\nWith his eyes locked on Kayla's, Dean slipped his hard cock wetly out of her with one hand, and clutching Kayla's fingers tightly with the other, Dean let the wave of his suppressed orgasm roll over him, through him, sweeping him away. All those exquisite contractions his cock had been subjected to whilst inside Kayla, landed him right in the middle of a mind-blowing explosion. He irrepressibly spilled his seed onto her stomach with a hoarse cry, shaking as the ferocious orgasm tore through him. He was coming so hard he forgot to breathe, his head thrown back in ecstasy as everything in his body focused on the pleasure that was ripping through him. Dean continued shaking with the intensity of his release, trying to regain a portion of his senses. \n\n\"Fuck Kay, what are you doing to me? I can't stop coming.\" Ropes and ropes of cum kept spurting onto her stomach from the broad purpled head of his big thickly veined cock, some going as far as her chin. \n\nHis eyes looked unfocused and wild. When she saw the stark panic, mixed with vulnerability in those beautiful dark blue eyes, Kayla just wanted to hold him. It seemed like the most natural thing to do. She wanted to hold him and never let go. Kayla let go of Dean's fingers, quickly took off her robe and wiped the cum off her stomach, then opened her arms to him.\n\n\"Come here, baby.\" She whispered, surprised at the ease with which the endearment rolled off of her tongue, as if it were said every day. \"I want to hold you.\" \n\nAnd without any hesitation, Dean went into her arms, nudging them onto their side so that he wouldn't crush her. Cuddling up against him warmed more than Kayla's body. It warmed her heart. She sighed with contentment as she relaxed against his side, her head resting on his shoulder.\n\nSilence reigned supreme as the two sated friends drifted in their thoughts, both wanting to acknowledge that what had just happened between them went beyond sex, yet both afraid that their feelings would not be returned. \n\nKayla knew she had to end what was going on. She didn't want to but knew it had to be done in order to guard her heart against heartbreak. She had to let Dean go. Her heart was breaking now but it was for the best. Better now than later. Dean didn't notice the tears that spilled from the beautiful woman he was already falling for...but had no clue."
    ],
    "authorname": "adjoaq",
    "tags": [
        "passion",
        "feelings",
        "friends",
        "first time"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/the-steamy-chase-ch-04"
}
{
    "title": "Knights of the Round Ch. 02",
    "pages": [
        "The chronological order of my stories is now listed in WifeWatchman's biography.\n\nFeedback and constructive criticism is very much appreciated, and I encourage feedback for ideas.\n\nThis story contains graphic scenes, language and actions that might be extremely offensive to some people. These scenes, words and actions are used only for the literary purposes of this story. The author does not condone murder, racial language, violence, rape or violence against women, and any depictions of any of these in this story should not be construed as acceptance of the above.\n\nPart 5 - Things To Give Thanks For \n\n\"This is Bettina Wurtzburg, KXTC Channel Two News!\" yelled the lovely redheaded MILF from in front of the Courthouse at 7:00am, Wednesday, November 23d. \"Tomorrow is Thanksgiving, and it is expected to be a heavy traffic day as people get on the road to visit their families!\"\n\nBettina talked about traffic and the holiday, then began with the real news: \"Police have no new leads on the murder in the Tenderloin District that claimed the life of one of legendary rapper T-Square's bodyguards. The man has been identified only as 'Holden', and Police say there is no evidence of drugs being involved in the shootout that happened Sunday night. However, sources tell Channel Two News that the crime is racially related, and that Holden was targeted because he was a black man.\"\n\n\"What the heck?\" asked Joanne Warner as she listened with me and Cindy in MCD.\n\n\"Bettina went on: \"And in other news, Regional State DOJ Director Harold Bennett says that an audit of the Town & County Police Force shows that they used proper procedures at the Holden Crime Scene, and that their officers were very well trained and meticulous in every aspect of handling a crime scene properly. Chief Sean Moynahan said that Precinct Two's Sergeant Carswell did an excellent job at that scene, as he does at every scene. Chief Moynahan also said that the training provided by Chief Emeritus Griswold and Commander Donald Troy has been of the highest caliber.\"\n\n\"No mention of Tasheeka Jones.\" Cindy said with some asperity.\n\nBettina then said \"And Channel Two News has learned that Appellate Judge Leahy has let stand the ruling by Judge Folsom that denies Thomas P. Cook's lawsuit to have Loran T. Michaels immediately seated on the Council. Mr. Michaels can sit in on all Council meetings and discussions, but cannot vote until his formal term begins in January.\"\n\n\"And in State news,\" Bettina said, \"Governor Val Jared has announced that SBI Reserve Director Tom Conlan will take over as Director of the SBI. With the formal resignation of former SBI Director Jack Lewis having been submitted, Governor Jared has moved swiftly to reshuffle the top leadership of the SBI.\n\n\"Of note is that Director Conlan's first official act as SBI Director was to ask the SBI's Office of Ethics and Review to prioritize the investigation of Richard 'Dick' Ferrell and his assault upon paraplegic SBI Lieutenant Tanya Perlman. Mr. Conlan says that he will 'vigorously' pursue charges against Richard Ferrell, and will be asking for an indictment of Mr. Ferrell by Christmas.\"\n\n\"We can only hope.\" said Cindy.\n\n\"I'm wondering how Robert Gaston is handling that news.\" I said, knowing a few things the others didn't.\n\nBettina then said: \"And now let's go to Sports with Nick Eastwood. Nick!\"\n\n\"Thank you, Bettina!\" said Nick Eastwood. \"There are several games across the nation of great importance, not the least of which is the renewal of the Iron Bowl in Tuscaloosa, Alabama, as the undefeated Crimson Tide takes on their hated arch-rival, the Tigers of Auburn. The Alabama-Auburn rivalry may be the most heated in the nation, as it drags an entire State into its clutches. But hold on! say Ohio State and Michigan fans! Their feud encompasses two states, and they are eager to remind everyone that a shooting war over Toledo was fought at the border of these States in the early days of America's history. The football games for all these rivals will be just an intense as that border war, though hopefully without the gunfire.\"\n\nNick went on: \"And we have plenty of action in our own Conference, as the third-ranked and once-beaten Wildcats take on the Purple Hawks of State U., who boast a strong 9-2 record and No. 15 national ranking. Meanwhile, our No. 4 Bulldogs will take on State Tech here at University Memorial Stadium.\"\n\n\"Nick!\" shouted Bettina, \"the last time this game was played at this site, you left the field nearly paralyzed. Do you think the Bulldogs remember that?\" I noted that Bettina was trying to start trouble.\n\n\"I know that I sure remember it.\" said Nick Eastwood. \"However, Bettina, the Conference will be watching this game carefully after the fights of the last two seasons between these teams. State Tech is already being considered for sanctions for their dirty play this year, as well... and they've vowed they will not accept any penalties from the Conference. So while State Law requires the University and State Tech to play a varsity football game every season, this may be the last time this is a Conference football game...\"\n\n* * * * * * * * * * * * * * * *\n\n\"What the hell is that race-baiting shit about?\" Cindy asked me as we watched the news. \"There is nothing to suggest anything racially motivated, even if Holden is black. I know we have to have the First Amendment, but sometimes I'd like to force the Press to reveal its sources on inflammatory shit like that.\"\n\n\"I agree.\" I said. \"That was pretty uncalled-for by the Press, and I might just have to embarrass Bettina with a public statement. But we'll see what Priya says at eight o'clock.\"\n\n\"Sir,\" said Joanne, \"what did you think of Mr. Bennett's comments?\"\n\n\"You still go hunting with him?\" I asked.\n\n\"Melina Allgood and I went hunting with him in October.\" said Joanne. \"Up around Lake Amengi-Nunagen. Melina got us special hunting permits.\"\n\n\"I see.\" I said. \"Well, I suspect that the situation with SDOJ Agent Jones got a little too warm for him. Maybe even the Governor had a word with him.\"\n\n\"Is that what really happened?\" Cindy asked me quietly.\n\n\"For the most part.\" I said. \"Chief Moynahan made some phone calls, and I called Tom Conlan. Once it got back to the Governor, Bennett suddenly called Jones on the carpet. She couldn't say under oath that we were doing anything wrong at our crime scenes, so he wrapped things up------ ah, good morning, Captain Croyle.\"\n\nTeresa was headed straight for the coffee pot, and she looked bleary-eyed. \"I couldn't get to sleep last night.\" she said as I peered at her. \"I just couldn't get comfortable. Abdominal pains... must've been something I ate.\"\n\n\"Is it that time of month?\" Cindy asked quietly, though I heard it. Teresa shook her head 'no'.\n\n\"Captain Croyle,\" I said loudly, \"I need you to put out an email to all Uniformed Officers, and you might as well send it to everyone else on my behalf, that the audit of our crime scene procedures came up with zero faults. To have no faults at all is damn near impossible to do, but the best Police Force in the world, that being ours, just did it. Let everyone know how proud I am of them.\"\n\n\"And add the Chief's appreciation, as well.\" said Chief Moynahan, who had just come in.\n\n\"Yes sir.\" said Teresa. \"If you'll excuse me, I'll go do that now.\" She left the room.\n\n\"What's bothering you?\" I asked Cindy, who'd been peering at Teresa.\n\n\"This is not the first day Teresa has complained of abdominal pains.\" Cindy said. \"And for her to even mention it, when she normally won't say a word about being in pain, is bothering me, as well.\"\n\n\"Well,\" I said, \"keep an eye on her. I will have no problem making her go to the doctor.\"\n\n* * * * * * * * * * * * * * * *\n\n\"This is Priya Ajmani, Five-Alive News in the Morning!\" said the beautiful Indian reporterette as Cindy and I watched in my office... and Cindy watched attentively.\n\n\"Five-Alive News is following the murder of one of legendary rapper T-Square's bodyguard last Sunday.\" Priya said. \"While Police have no leads and seem overmatched in this case, sources tell Five-Alive News that the murder may be a racially motivated killing of a black man...\"\n\n\"She went there.\" said Cindy.\n\n\"Yes, but that wasn't the important thing.\" I said.\n\n\"What was?\" Cindy asked, not desiring to play the Game at the moment.\n\n\"Just like Bettina did, Priya said 'sources'. Not 'experts' or any b.s. like that, but 'sources'. The Media has to be somewhat careful and scripted in their own speech on air, so if they're saying they have 'sources'... then it's likely someone is feeding them something.\"\n\n\"Hmm,\" said Cindy, \"so someone is trying to gin up a racial issue out of this killing. Think it's the Media themselves?\"\n\n\"They are having no problem colluding on it.\" I said.\n\n\"Think it really was a racially motivated killing, and someone associated with the killers is using the Media to gin up the story?\" Cindy asked.\n\n\"Now that's Iron Crowbar thinking there.\" I said. \"It could also be someone sees this killing and says 'we can use this to our advantage'. So they opportunistically gin up the racial story.\n\n\"Who would want to do that, that we know of, anyway?\" asked Cindy.\n\n\"That,\" I said, \"is the $64,000 question...\" Cindy peered over at me but I was already going into a reverie...\n\n* * * * * * * * * * * * * * * *\n\n\"Come on in, Robert.\" said Governor Val Jared. Robert Gaston, Deputy Director of the SBI for the time being, came into the Governor's side office. A lunch for two had been set on the table. \"Let's have some lunch.\" the Governor invited Gaston after they shook hands.\n\nAfter the appropriate amount of small talk, the Governor said \"What I asked you to come down for, Robert, is to discuss the situation with the SBI, as well as some other things.\"\n\n\"I heard you were putting Tom Conlan in the SBI Director slot.\" said Gaston.\n\n\"Yes, the Media found out about that one before I had a chance to talk to you.\" said Governor Jared. \"Yes, I'm putting Conlan in that position. I know that position is what you were hoping for, Robert, but I have another position I want to talk to you about. It's one of the Regional Director slots in the State Department of Justice.\"\n\n\"Which one, sir?\" asked Gaston.\n\n\"Well, you'll just about have your pick.\" said Jared. \"The Northwest Region is taken by Harold Bennett, and he has done a very good job up there; he's really shown us that the regional system can work very well. The open positions are the Southwest Region, which covers Southport and Jacksonville; the East Region, which covers Jamestown and goes up towards Westphalia and Eastphalia; the Southern Region, which goes from Midtown and covers the farmlands south and southeast of there. The Northeast Region, which is mainly the City, is going to be filled by someone from the City, someone who knows what is going on up there.\"\n\n\"Some interesting choices.\" said Gaston. \"Do you have any preference, Governor? For me?\"\n\n\"No, not really.\" said Jared. \"The Southwest region will probably be the most exciting, what with Southport and all the Organized Crime down there. Midtown and the south will probably bore that Regional Director to tears. The East Region is like the Northwest: fairly quiet, with the Women's Prison in Madison County part of it, State Tech part of it, and some rural areas to the east.\"\n\n\"I'll have to give it some consideration, Governor.\" said Gaston, already knowing where he wanted to go.\"\n\n\"Good.\" said Jared. \"I hope you'll come on board with our team. You probably don't want to stay in the SBI. It's going to get ripped apart to the foundations. By the way, if it were solely up to you, how would you go about fixing that problem?\"\n\n\"Well, Governor,\" said Gaston, \"as you know, I've spent my whole career in the SBI. I know there were some corrosive elements, but the overall organization wasn't bad at all. If I'd been named SBI Director, I was going to weed out the crap, put good people in the right positions, and streamline it to be more responsive, especially in the War on Drugs.\"\n\nThe Governor nodded. \"You'll have a bigger role than you realize in that War on Drugs. The State DOJ is going to be taking a prosecutorial lead in getting drug pushers off our streets, and the Regional System will be an integral part of that.\"\n\n\"If I may ask, Governor,\" said Gaston, \"is the SBI Reserve going to continue on?\"\n\n\"Oh, they'll be the backbone of the new SBI structure.\" said the Governor. \"I believe that system has worked extremely well. What do you think?\"\n\n\"Er, it's had its merits.\" said Gaston, being careful with his words. \"As you probably know, Governor, even with the Reserve Program, we need a strong core of dedicated SBI Agents. The Reservists often don't use the program properly, or their superiors in the local departments don't let them work with us as much as would be needed. I know there's those two exceptions from the northwest, but Troy and Ross are exceptions.\"\n\n\"And they're exception-al.\" said the Governor. \"We'll be working those kinks out, and as a Regional Director, you'll have plenty of say-so and power to coordinate the SBI working with the locals. So... which sector do you think will be the most challenging?\"\n\nThe time had come, so Gaston made his choice. \"Southwest, Governor. I think you need me to help clean up Southport.\"\n\n\"No small task, that will be.\" said the Governor in his best Jedi Master Yoda grammar. \"Okay, then, you get the Southwest. Welcome aboard.\"\n\n\"Thank you, Governor.\"\n\n* * * * * * * * * * * * * * * *\n\n4:40pm, Wednesday, November 23d. Everyone not on 2nd shift had been released at 4:00pm, including Personnel & Records, and the Detectives. As I went by MCD, I noticed Jerome Davis looking at the whiteboards. I went in.\n\n\"Anything jumping out of there at you?\" I asked as I came up to him.\n\n\"No sir.\" said Davis. \"I was just trying to get it all in my head. You guys have so much stuff coming at you, how do you put it all together?\"\n\n\"Whiteboards.\" I answered, realizing Jerome would not get the joke. \"And by the way, you've done pretty well so far, yourself. Captain Ross and I are impressed with what we are seeing.\"\n\n\"Thank you, sir.\" said Jerome. After a moment of peering at the whiteboards again, he said \"Sir, where do you see any racial component in any of this? Besides the fact the victim is black?\"\n\n\"I don't.\" I said. \"At least not based on what we know so far.\"\n\n\"You think T-Square would have one of his own guys killed for racial reasons?\" asked Jerome. \"I heard guys talking about that. Hey, I've seen racism, but I don't get why the Media would be talking that stuff.\"\n\n\"I dunno.\" I said. \"I personally don't see where T-Square financially benefits from racial strife in this area. And it's been my experience that those ginning up racial divisions have a financial reason to do so. Like in many, many crimes we investigate, it often comes down to 'follow the money'. The Media? Those bastards have every financial reason to gin up race wars, as do white supremacists on one side and militant blacks on the other.\"\n\n\"Damn.\" said Jerome.\n\n\"However,\" I said, standing up from where I'd been sitting, \"I don't have time for the white and black of it; I only care about the blue... Police blue. That's my job.\" Jerome nodded.\n\n\"Tell ya what.\" I went on. \"Head on home, and have a good Thanksgiving. And we'll get back to it on Friday.\"\n\n\"Yes sir. Have a good Thanksgiving, sir.\" Jerome said. But he did not move from that spot, nor stop looking at the whiteboards.\n\n* * * * * * * * * * * * * * * *\n\nThursday, November 24th. Thanksgiving Day. We were at The Cabin. Present for the festivities were: myself, Laura, Carole, Jim, Molly, Ross, Ian, Todd, Teresa, little Doug, my mother Phyllis, Chief Griswold and his wife, Tanya, little Pete, Jack Muscone, and Chief Moynahan.\n\nCindy was not here. She was having lunch at 'The Vision' with her father Dr. P. Harvey Eckhart and his acolytes that lived there. Thanksgiving Day was a very big day there, and I could understand Cindy wanting to spend that time with her father. I also suspected she wanted to talk with him in a father-daughter kind of way.\n\nI'd invited Joanne and Seth, but they said they had other plans. Those plans were to spend the day with Daniel and Melina Allgood, with Melina and Joanne talking about hunting. Barry Oliver also attended that function with his date, Lainie Everett, one of my Data Guyz.\n\nHere at The Cabin, the women were bustling around the kitchen, chattering like parakeets, while us guys sat and watched pro football, and generally babysat the kids. Not that I had not done anything: Todd and I had deep fried the turkeys earlier that morning.\n\nI had Bowser in my lap and was petting him, while Todd was heaping some love on a receptive Buddy. Carole was too busy marshaling her young troops to notice. Somewhat to my surprise, Bowser sniffed Chief Moynahan's hand then let Moynahan pet him.\n\n\"Nothing like a home with good dogs in them.\" said Moynahan as he skritched Bowser under the chin.\"\n\n\"Especially this home.\" said Laura, who had come up behind me. \"Don loves that dog more than he loves me.\"\n\n\"Not true!\" I said jovially. \"But Carole will have to make her own statement.\"\n\n\"Bowser is a good dog!\" Carole yelled, a bit too loudly.\n\n\"You guys need to get washed up.\" Laura said. \"We're about ready to eat.\"\n\nAs we got up, I went over and hugged Laura. \"I don't love Bowser more than you, sweetheart.\" I said. \"But he does have a Commendation Medal.\"\n\n\"Get your hands washed, you!\" Laura said, slapping me on the butt to get me moving.\n\n* * * * * * * * * * * * * * * *\n\nAfter lunch, we were sitting around watching the Dallas Cowboys football game against the Atlanta Falcons. It wasn't a very good game, as the Falcons couldn't hold their early lead to save their lives, and were now being soundly crushed by the Cowboys. We were talking in groups about different things, and I was talking with Teresa and Chief Griswold.\n\n\"Have either of you heard anything about Jenna Stiles, and what she's going to do?\" asked Chief Griswold.\n\n\"Krasney offered her her old job back, but she declined.\" I said. \"I get the feeling she's going to find a job in Midtown, either as a a lawyer or as a lobbyist for rape victims and other women's issues.\"\n\nGriswold said \"I was wondering if she would get back together with Cindy, and stay here.\" I could see he was phishing for information.\n\nTeresa took the bait. She said \"From what Cindy has said to me, she's tried to contact Jenna, but Jenna's avoided Cindy except for saying hello at public gatherings, and such stuff. I don't think Cindy is going to figure into Jenna's future plans.\"\n\n\"I haven't talked to Cindy about that.\" I said. \"But I suspect their relationship is over. Of course, I've been wrong about things like that in the past. I never question the course of true love, and I am no good at figuring out things concerning love. I've been lucky in that area, and I don't question any of it.\"\n\n\"Well,\" Griswold said, \"I happen to know a certain Governor who is looking for good State Attorneys. Think Jenna might be interested in that?\"\n\n\"Can't hurt to ask, sir.\" I said.\n\nAnd speaking of football, someone who shall remain nameless, but his initials are (T)odd (B)urke, decided to organize a 'dogpile the Iron Crowbar'. So I had Jim, Doug, Ross, Pete, and Ian all jumping on me (or being placed on me) in one gang-tackle as I lay on the floor. Bowser barked loudly at them, and I was not sure if he was trying to verbally protect me, or if he was egging the kids on.\n\nCarole was struggling to get in on it, and was miffed when she couldn't. Teresa held her and said that Daughters of Paratroopers like them stayed out of such frays, and Carole seemed to accept that. Laura and Molly and my mom were taking pictures of this gang assault of a police officer, but as evidence for future years...",
        "Part 6 - The Holy Grails (of the Gridiron) \n\nSaturday, November 26th. The Gods of Football Scheduling smiled upon me. The Bulldogs-Engineers game was at noon, while the Wildcats played at 7:00pm. Laura and I had been invited to sit with University President Wellman and his entourage in his box, and we accepted. I even wore a blue shirt, though it did not have any University or Bulldogs markings on it.\n\n\"Well, Don,\" said President Sidney P. Wellman as we gathered at a reception at the President's Office before the game, \"at least you won't have to fly back home in a helicopter this year.\"\n\n\"Thank goodness.\" I said. \"And no one is expecting a new baby this year, either. Ian will be a year old tomorrow.\"\n\n\"How time flies.\" said Wellman. \"And you won't get a visit from Jack Lewis in the box, either. Endorsements are not exactly what he needs, right now.\"\n\n\"Very true, sir. Do you know where he is now?\" I asked.\n\n\"No, I don't know.\" said Wellman. \"I heard, don't know it to be true, but I heard that he was over in Acropolis City. He may be trying to get a State job over there, or maybe a teaching assignment at Eastern State.\"\n\n\"Mmm, interesting.\" I said. \"I never thought of him as a teacher. But he did once run the Police Academy, so maybe teaching is something he likes.\"\n\n\"Teaching is very interesting.\" said Wellman. \"It's wonderful for those that have the wherewithal for it. I miss teaching classes. I used to try to teach a class every semester or two, but the demands on my time are such that I can't give the teaching the attention it deserves. Your wife, now she's an amazing woman. She finds time to teach, and teach well, do her research, guide her graduate students, and everything else on top of that... including raising those wonderful children of yours.\"\n\n\"Yes.\" I said, smiling at the thought of Laura, and of Carole and Jim. \"She is an amazing woman, and I'm a very lucky man.\"\n\n\"I feel the same about my wife.\" said Wellman. \"And it's a blessing to have such a feeling. So many men don't know how we feel. Pastor Westboro never got over his wife leaving him, as you know. Tom Riordan had a wonderful wife in Janet, but let that treasure slip through his fingers.\"\n\nAfter a moment more of chit-chat, someone announced that it was time for us to go to the game.\n\n* * * * * * * * * * * * * * * *\n\nThe Bulldogs, under Head Coach Ted Thrasher, were disciplined and played clean. The same could not be said of State Tech.\n\nThe tone of the game began early. The Bulldogs got the ball and began driving. State Tech players were bumping the quarterback late, even on handoffs. Then on one play, the pass was delivered and the play was downfield when a State Tech player went for the quarterback's knees, very late. The QB rolled with the play and was unhurt, but flags came flying. Offensive linemen went to help their quarterback and pushed the Tech player back. No flag. A State Tech player came in and pushed a Bulldog lineman, and another yellow flag flew. That Tech player was charged with unsportsmanlike conduct, his first of the game.\n\nThe Bulldogs scored easily. And their defense was just as good as it had been against the much stronger Wildcats. It was three-and-out for State Tech. On third down a State Tech lineman practically tore off a rushing Bulldog defender's jersey. Another yellow hanky against Tech, though this penalty was declined.\n\n\"It's looking like an ugly day.\" said Laura to me as we watched. I nodded, and looked across the field at the State Tech fans section. The stadium field ran east and west. Visitors were mostly in the upper deck of the south stands, in the southeast corner, then dispersed into smaller groupings along the top of the south stands. The State Tech fans were starting to get a little ugly.\n\n* * * * * * * * * * * * * * * *\n\nThe halftime score was 28-0, Bulldogs. The Bulldogs fans loudly booed the Tech band as it played, which was pretty unusual; Bulldogs fans were normally cordial to visiting bands and fans. However, when I checked in with Captain Croyle and Sergeant Rudistan, I learned that three arrests had already been made for fighting in the walkways under the stands.\n\nThe game went on. I saw Bulldogs linemen not get called for holds, but Tech linemen were called for even the most minor of holds. The Bulldogs pinned their ears back and went after the Tech quarterback. Even screens and draw runs did not stop the Bulldogs onslaught. By way of contrast, State Tech was called for pass interference on what the Bulldogs were getting defensive holding, if anything at all. A State Tech player could sneeze on a Bulldog receiver and get a flag. Aggressive Bulldog defenders were not flagged for their play unless it was too egregious to be ignored.\n\nIt was 38-0 at the start of the fourth quarter. The State Tech fans had been loudly booing every flag, and booing when the University was not called for something obvious. They were getting louder, rowdier, and uglier... even worse than the players. I was watching the far stands with 'professional' interest. I got up and went to the back of the box, got my police radio out of my pocket, and called in.\n\n\"Commander Troy to Captain Croyle and Sergeant Rudistan. Go to private channel. Go to private channel.\" This was our pre-arranged code to go to Channel 5 encrypted radio. Once Teresa and Rudistan called in that they were on the channel, I said \"I want you guys to get our armored police and put them very visibly in the State Tech fan areas. Put riot police in the walkways behind the State Tech fans, and all along where they might exit. Increase units at all exits and paths to them. Make sure the State Tech fans see a huge TCPD presence.\"\n\n\"Wilco.\" said Teresa. Moments later, I saw six armored, helmeted officers at every entryway to the seats, more officers on ground level looking up at the State Tech band and fans seated in that corner, and I heard on the radio the deployments being implemented.\n\n\"Everything okay, Commander?\" asked President Wellman.\n\n\"I'm doing what I can to make sure everything will be.\" I said. \"You can see what we're showing the State Tech fans.\" He looked over and saw the huge police presence.\n\n\"If that's what it takes.\" Wellman said. \n\nA moment later, a State Tech defender grabbed the Bulldog running back by the face mask and violently twisted his head to the ground. Yellow flags flew. The State Tech defender was called for his second unsportsmanlike conduct in the game in addition to the face mask foul, and was ejected. At this point the State Tech coaches were almost rushing the field, and were yelling and screaming into the officials' faces. More yellow flags flew. State Tech was assessed 60 yards in penalties on that one play and its aftermath.\n\nThe Bulldogs were substituting, and still scored on Tech's first string defense. The final score was 48-0, and I need not say that the State Troopers and TCPD put out huge numbers of Officers to keep the field free of fans, get the players to their own locker rooms, and stop any fights. The head coaches shook hands with the barest minimum of courtesy and were whisked off to their locker rooms by the State Troopers.\n\n* * * * * * * * * * * * * * * *\n\n\"I'd say we got off relatively light today.\" said President Wellman. \"Thank you for your help with that, Commander.\"\n\n\"Glad to be of help.\" I said. \"I will relay your thanks to my entire Police Force. I am proud to be part of that awesome team.\"\n\n\"And well you should be, Commander. And well you should be.\" said Wellman... who was no fan of police in general...\n\n* * * * * * * * * * * * * * * *\n\nWith Ian's birthday the next day, I'd invited Cindy to spend Saturday night at the Cabin with Molly and the boys. Laura and I brought Jim and Carole and the dogs, as well. Cindy and I watched the Wildcats game against State U. Somewhat to our surprise, Carole stayed to watch the game, mostly being held by Cindy. Bowser was either in my lap or in front of us, and he would bark whenever the Wildcats scored a touchdown.\n\n\"How does he know?\" Cindy said.\n\n\"I don't know.\" I said. \"When I was growing up in Apple Grove, we had a cat. Good looking cat: bengal tiger stripes but was gray and black. He would sit and watch baseball games. If we tried to change the channel, he would meow loudly at us and stare at us until we changed the channel back to the baseball game. His head would go up and back down as he watched fly balls. He didn't watch anything else, but he loved baseball games on TV.\"\n\n\"Ha, I love it!\" Cindy said. Then she said \"Look at this. Clean game, decent sportsmanship. Not like State Tech.\"\n\n\"Yeah.\" I said. \"Tech is gone from the Conference, I believe.\"\n\nThe final score was Wildcats 28, Purple Hawks 14. We were on our way to defend our Conference title in the Conference Championship game, with a chance to avenge our regular-season defeat at the hands of the Tigers. The unfortunate thing was that Alabama and Ohio State remained undefeated, giving us little hope for a repeat national title...\n\nPart 7 - Action and Accountability \n\n\"This is Bettina Wurtzburg, KXTC Channel Two News!\" yelled the lovely redheaded reporterette from just across the street from the Stadium, but careful not to be on Campus grounds. \"Channel Two News has learned that complaints have been made about the strong Police presence at the University football game this past weekend. Let's go to Nick Eastwood for the coverage. Nick!\"\n\n\"Thank you, Bettina!\" said Nick Eastwood, also with the stadium behind him. In fact, he was only six feet away from Bettina, though the network had them on split-screen and made it look like they were nowhere near each other.\n\nNick began: \"A large number of State Tech fans, as well as that School's Athletic Administration, formally complained to the Governor and the State Department of Justice that the Town & County Police Force's strong presence at the game was offensive, intimidating, and uncalled-for. Roll tape.\"\n\nA tape of a black woman came on screen: \"It looked like the riot police!\" the woman said loudly. \"They were looking at us like we were some kind of rioters, you know?\" Another woman, a University student with a very short haircut, said \"they were dressed in helmets and had shields and big billy sticks. They looked very scary, and I'm sure the children were feeling very scared of them.\" Yet another person, this time a nerdy-looking State Tech fan, said \"They were acting really rough with us. They wouldn't let us get back to our cars. They were forcing us to walk in certain places, and anyone who tried to go to their cars were being threatened and harassed.\"\n\nThe representatives for the group 'Citizens for Police Accountability', Ken Eidex and Jay Swenson, were also shown on tape making a statement: \"We believe that the Town & County Police Force should be investigated for Police harassment, intimidation, and acting outside their jurisdiction. They do not have authority on the University Campus, and Commander Donald Troy vastly exceeded his authority in deploying his stormtroopers to intimidate State Tech fans.\" The Media obviously gave their statement plenty of attention, since it was from the representatives of a concerned citizens group.\n\nNick Eastwood reappeared. \"Reached for comment, TCPD Chief Sean Moynahan said that the Police committed no acts of abuse, and also said that the State Tech fans were throwing objects onto the field and appeared to be gearing up to rush the field. Campus Police Commissioner Dexter Robinson said that the TCPD had been invited and authorized to help with law enforcement on Campus on game day, and that the Police actions were necessary, as the State Tech fans could not be trusted to act with any more civility than the State Tech players on the field!\"\n\n\"Nick,\" said Bettina, \"does the Governor plan to take any action about these intimidating Police tactics?\"\n\n\"No, Bettina.\" said Nick Eastwood. \"Governor Jared, with the election now past him, has no reason to accommodate the complaints of Citizens. Instead, he issued a statement praising the Police for quickly assembling a large contingent of Officers that could handle any trouble that might have started.\"\n\n\"Amazing.\" Bettina said, her voice connoting derision for Governor Jared. \"Like you said, Nick, the election is over. Meanwhile, the malls are reporting that Black Friday was a near-disaster for them this year, as online businesses are taking tremendous market share from them...\"\n\n* * * * * * * * * * * * * * * *\n\nWe gathered in Classroom 'E'. Joanne and Teddy Parker wheeled the whiteboards in. Present at this meeting were myself, Captain Ross, Detectives Washington, Parker and Warner, Patrolman Davis, as well as the Mouseketeers and J.R. Barnes of the Crime Lab.\n\n\"Full house today.\" I said, bringing in a couple of boxes of doughnuts. They disappeared quickly. I sat down at the head of the conference table, the door behind me and the whiteboards to my right, and began the meeting.\n\n\"Okay, Captain Ross, what's first?\" I asked.\n\nCindy sang \"M-O-U-S-E.\" She then said \"Go ahead, guys.\"\n\n\"Thank you, ma'am.\" said Myron. \"We love that introduction, by the way.\" Good ass-kissing, Myron, I thought to myself.\n\n\"First, the cellphone records are about as exciting as watching fresh paint dry.\" said Myron. \"Absolutely nothing but calls to and from T-Square, from his boss, the bodyguards' coordinator, from other bodyguards he works with, and someone that does scheduling for the Regiment. No calls to outsiders; it's as if he has no friends outside the T-Square Regiment.\"\n\nMyron continued: \"More interestingly, we had the GPS device in Holden's car forensically examined and then restored.\" said Myron. \"The FBI was doing it for us.\"\n\n\"Did they say what took so long?\" I asked.\n\n\"Sir,\" said Myron, \"I've got to say that what they were doing isn't easy, and requires some time. Also, they probably did not work last Thursday or Friday... being Federal Government employees.\" I could see that Myron shared his father's disdain of the Federal Government.\n\n\"Okay. Did they get anything?\" I asked.\n\n\"Yes sir.\" said Myron. \"Well, they got some stuff. First, the GPS was disabled at least three hours before the shootout... well, the crime, I should say. Someone had time to go in and do that. They also tried to wipe the GPS with a magnet, and that left some spots. We got that data, but it's not really helping us. We can't tell exactly when they were at a location, and such. What we did get showed simple, direct routes between Holden's apartment and T-Square's club. The earliest thing recorded, which would've been erased over if any more driving had been done, was a trip to the City Airport three days before the crime.\"\n\n\"Let me ask you to say that again.\" said Theo. \"They had time to wipe the GPS?\"\n\n\"Yes.\" said Myron. \"Plenty of time.\"\n\n\"Okay, J.R., \" I said, \"you got anything to add to the autopsy report and crime scene reports?\"\n\n\"Yes sir.\" said J.R. \"Martha's test show pretty conclusively that Holden died at least an hour before the shooting incident, and maybe as far as two hours prior. Also, the majority of the blood in the car was in the shotgun seat, not the driver's seat, and the bullets that struck the car were on the driver's side, not the passenger side.\"\n\n\"Did we get any better camera footage of the crime scene?\" I asked.\n\n\"No sir.\" said Mary Milton. \"And as we discussed earlier... the cameras were not recording live, but re-recording a feed of an earlier time period. So we have nothing of value.\"\n\n\"Wow, who can do something like that?\" asked Jerome Davis.\n\n\"That is a very good question.\" I said. \"And the answer will take us a good ways to telling us who is responsible for this crime.\"\n\n* * * * * * * * * * * * * * * *\n\nAfter that meeting, as I went back to my office, I asked my lovely assistant Helena \"Are people getting their Orange Order ballots in?\"\n\n\"You won't believe it, sir.\" said Helena. \"We've got almost all of them back in already. Well over 90%, anyway. The only ones we don't have are people who took vacation days for all of last week.\"\n\n\"Good!\" I said. \"I hate last minute rushes.\"\n\n* * * * * * * * * * * * * * * *\n\nHe was never seen with the same face twice, or so the legend goes. J.J. 'Ice Cube' Perry was white, and that's all most of us knew of him. The slender, almost timid looking officer with slicked back black hair and a boyish face when in uniform, a little too boyish... was seen in the grocery store as having long brown hair cut straight, reminiscent of the Beatles, and octagonal glasses like the late Mrs. Veasley liked to wear her hair and eyeglasses. He was seen in the underworld and the clubs of the Tenderloin District in darker brown hair with long sideburns, a droopy mustache, and darkened eyeshades, and maybe other disguises, as well.\n\nBecause of his ability to disguise himself and his care in doing so, 'Ice Cube' had so far completely stymied The Teacher's abilities to identify him properly, and 'Ice Cube' was just about the only LEO in the County and indeed the Region that could make that boast.\n\nSo when an overweight man that looked more like Officer Hendricks than an underworld figure walked into the Crime Lab with Barry Oliver, not too much notice was taken of it. But inside, the man went into the secret passage to the main Police Headquarters building, and came out into the Armory as a thin man with large eyeshades and a toboggan on his head. He and I were alone in an empty cubicle space in the I.T. area, the one that once belonged to Myron Milton. I need not say my bug-killer was full on.\n\n\"Yes, Commander, that's what I picked up.\" said Perry. \"The scuttlebutt in the Tenderloin District is that T-Square has been working with other black artists, musicians, and political figures to coordinate an effort for black unrest. Demonstrations, protests, maybe some violence if the right situation crops up and they can exploit it.\"\n\n\"Some of the more connected people think that there is a White Supremacist group trying to subdue the Black groups and, and I quote, 'suppress the Black voice'.\" continued Perry. \"They think that 'Providence Springs' was meant to be the beginning of that. And they think that Holden was murdered as a warning to T-Square to toe the line. I'm not sure what 'Providence Springs' is, sir, but it sounds like some sort of operation by the White Supremacists.\"\n\n\"Any idea of a name for these white boys?\" I asked.\n\n\"The name I've heard is 'White Roots', sir.\" said Perry. \"They're a band of motorcyclists and rednecks in based eastern Tennessee, in the Great Smoky Mountains. Rumor is that they were the ones hiding Rudolph, that guy who bombed abortion clinics and the 1996 Olympics in Atlanta.\"\n\n\"No other white supremacy gangs?\" I asked.\n\n\"If there are, I haven't heard any names for them.\" said Perry. \"I only get this info by overhearing others with bugs and directed listening devices, so it's spotty at best.\"\n\n\"You do a good job correlating the data, though.\" I said. \"I like that.\"\n\n\"The Mouseketeers help me a lot, sir.\" said Perry. That caused me to sit up straight.\n\n\"Whatever you do, Perry, do not be seen talking to them in public, at any time, under any disguise. It's too dangerous for you and for them.\"\n\n\"Roger that, sir.\" said Perry. \"So what do you want me to try next?\"\n\nI thought for a moment, then said \"There's a group, or at least its legal beagles, called 'Citizens for Police Accountability'. See if you can find out who this group is, where they are and where they are from, and what they're trying to do with their public verbal assaults on the Police.\"\n\n\"Will do, sir.\" said Perry. \"Okay, how do I get out of here?\"\n\n* * * * * * * * * * * * * * * *\n\nThe Evidence Supervisor, wearing his plain gray baseball cap, escorted me as I brought a large box up the elevator from the underground areas. Using my I.D. to open the elevator door at the top, we rolled the box on its dolly out into the hallway. I opened the side of the box to let out Perry.",
        "Some moments later, nine uniformed patrol officers went out to their cars. Four pairs of officers got into their cruisers, and the ninth into the backseat of a cruiser. They pulled out, going in different directions. At some point on their patrol, that ninth officer was let out of the backseat of the vehicle, and he disappeared amongst the crowds...\n\n* * * * * * * * * * * * * * * *\n\nTuesday morning, November 29th. Captain Teresa Croyle went into the Old Mill, the 2d Precinct Headquarters. She was escorted to a large conference room on the right side of the building, on the second floor. All of the Precinct Captains and Lieutenants, and some Sergeants also, were already there.\n\nAs she came in, she noticed that the conference table was round. The chairs for everyone else were simple folding metal chairs, but the chair meant for her was a large wooden chair like a dining room table chair, with armrests and a cushion, and wrapped up in gold cr\u00eape paper.\n\n\"Behold your throne, Queen Guinevere!\" said Sergeant Rudistan, being very mischievous.\n\n\"Ah, the Round Table.\" said Teresa, not showing that she was fazed a bit. \"You know why I like having a round table, Sergeant Rudistan?\"\n\n\"Uh, no ma'am.\" said Rudistan.\n\n\"Because I can't be cornered.\" Teresa replied. There was polite ass-kissing laughter at the bad joke. Teresa sat down in the throne chair, wincing a bit.\n\n\"Something wrong, ma'am?\" asked Precinct Captain Damien Thompson of Precinct 2.\n\n\"No, not really.\" said Teresa, willing her face to mask the pain she'd just felt. \"Okay, folks, we've got a lot to do. You guys have put together a great plan for reducing us from three Precincts to two, and the Commander has approved it. He also sends his congratulations to you for your work on it, and in making this happen. So it's pretty straightforward. We'll begin reassigning people after Orange Order Day and the Policeman's Ball this weekend. By January 1st, we'll already be operating as if there are only two Precincts.\"\n\n\"Our only other big issue,\" said Captain Croyle, \"is the seminar by 'The Vision' at the Civic Center the week after Christmas. We are working with The Vision's security people on the arrangements. And the reason we the TCPD have arrangements for this in the first place is what I'm about to tell you... which is not to leave this room for the time being: Dr. P. Harvey Eckhart himself is going to personally teach this seminar, and that is going to be a big deal. So... it shouldn't be any worse than a football game, but be ready for it.\"\n\nPart 8 - Knights of Orange \n\nThursday, December 1st. After giving Helena a bouquet of roses for being the keeper of the Ballot Box, Cindy and I took it under two man control to the Cop Bar, where we had the back room reserved. The twenty Members of the Orange Order were already there, as was the most powerful person in the County... the Intendent, Mrs. Peabody.\n\n(Author's note: the full process is detailed in 'Calm Before The Storm, Ch. 02'.)\n\nCindy and I relinquished the boxes, and Mrs. Peabody and Corporal Kirkpatrick counted the ballots. When it was over, the members of the Inner Circle came over and examined them, then the announcement was made to the full Membership. There was applause at the results.\n\nThen Chief Griswold got up and said \"As you know, this is my last rodeo with you guys. I'm relinquishing my place in the Inner Circle. It has been a great honor to be a part of this wonderful honorary organization, and an even greater honor to have served with you.\" The gathering applauded the old Chief warmly.\n\nThen Corporal Kirkpatrick said \"Would the Inner Circle please form a circle in the middle, and the rest of the members form a circle outside them.\" As we did so, Kirkpatrick got out the robes and a lantern with orange glass. He walked between the circles, going around three times, and then stopped...\n\n... in front of Captain Cindy Ross.\n\n\"Captain Ross,\" said Kirkpatrick formally, \"if you accept the responsibilities and rewards of being a member of the Orange Order Inner Circle, signify so by taking this lantern.\" Cindy took the lantern.\n\nThe rest of the Membership was dismissed as the Inner Circle commenced with the rites of inducting Cindy into our ranks.\n\n* * * * * * * * * * * * * * * *\n\nFriday, December 2d. Orange Order Day.\n\nChief Griswold was in MCD at 7:00am to join our coffee klatch. He was dressed in his standard dark blue uniform, with his 'Retired' badge over his left pocket, his eagle-and-arrows 'bird colonel' ranks on his shoulders, and his nametag. Nothing else. I was second to arrive in MCD, wearing only my badge and nametag and ranks... no rectangles for the MOV, DSM, or Purple Order. Instead of the twin rows of light blue piping, I had twin rows of barely visible black piping on my pants legs. It was as standard as one could get.\n\n\"Oh, let me get a picture!\" squealed Joanne Warner when she came in and saw me and the Chief. As more and more Officers trickled in, more pictures were taken.\n\n* * * * * * * * * * * * * * * *\n\n\"Ready to lead our initiates tonight?\" I asked Cindy in my office at 2:00pm. \"Did you drink a lot of beer as Chief Griswold told you to?\"\n\n\"I may have indulged in an extra bottle.\" Cindy said, smiling. Just then there was a knock on my door. Cindy opened it, and Lt. (Ret.) Tanya Perlman drove in, followed by Auxiliary Detective Phyllis Troy, both in standard 'Orange Order' uniform. Tanya was wearing her 'Retired' badge and her ranks, of course.\n\n\"Hello everyone.\" said Phyllis. \"As you know, we Auxiliary officers will be manning the desks and doing some patrols while the Police Force goes through the Orange Order procedures today. And since we'll need some adult supervision, I asked Lt. Perlman to provide that supervision.\"\n\n\"An excellent idea, Mom.\" I said. \n\n\"So,\" Tanya said, \"any solutions to the Holden murder yet?\"\n\n\"Not yet.\" I said as we settled down to talk. \"I've got some feelers out, and I've asked the Mouseketeers to get some data for me-------\"\n\n\"Did someone say 'Mouseketeers'?\" asked Mary Mahoney Milton, letting herself into my office without knocking.\n\n\"M-O-U-S-E!\" sang Cindy Ross.\n\n\"Okay, Mary,\" I said, \"you can talk in front of everyone here. Just mind the cuss words in front of my mom.\"\n\n\"Like that ever stopped you, son.\" my mother replied. Everyone else laughed. I just shrugged.\n\nMary said \"We've been working on that group 'Citizens for Police Accountability', sir. Jay Swenson is a lawyer, and has made a career of working with groups that are connected to the political Left. He last worked with a group called the 'Women's Action Network', and has done work for the State Organization for Women, the 'SOWs'. He's considered to be a pretty slimy lawyer, uses questionable tactics to trick people into being compromised. He was censured by the State Bar of the State east of us, but otherwise has kept his nose officially clean.\"\n\n\"Ken Eidex, though,\" continued Mary, \"is a real creep. He's overweight and overbearing. He claims to be a lawyer, but I can't find a college law degree awarded to him, nor has he been admitted to any State Bar. He's often a spokesperson for political groups, more like a Union rep than a lawyer, though.\"\n\n\"Any anti-Police activities by either of them in the past?\" I asked.\n\n\"Jay Swenson has sued Police around this State and the one to the east on behalf of clients who claimed Police brutality upon them.\" said Mary. \"He also has worked in cooperation with Chase, Lynch & Berry, the law firm that takes pride in hating the Police, on a number of cases. Ken Eidex has no record with the Police, but has led demonstrations against them. Word from FBI sources is that he tries to put himself into a position of seeming leadership of a group, but nobody really follows him, especially when the chips are down. He's a con man, essentially, but otherwise considered harmless. Jay Swenson is considered the greater threat.\"\n\n\"Good work.\" I said. \"Okay, everyone find a place to be for the Orange Order initiation. Mom, Tanya, I think the Chief wants you to stop by his office...\n\n* * * * * * * * * * * * * * * *\n\n\"Ah, I'm glad you could join us to-day, Lieutenant Perlman.\" said Chief Moynahan as Tanya settled her wheelchair in front of his desk. My mom had dropped Tanya off then returned to my office. \"How are things in the State Crime Lab?\n\n\"Oh, pretty good.\" said Tanya. \"I'm fully healed from what that bastard Ferrell did to me, and the Crime Lab guys are improving by the day. So far, we've been tested by defense lawyers in three cases, and we came up rock-solid in all of them...\"\n\n\"Egggg-celent!\" said the Chief. \"And you're doing excellent work outside the lab, as well. I've heard of your nickname: 'Lady Ironside'. It fits you verrrry well.\"\n\n\"I still miss working with you guys.\" said Tanya. The Chief then steered the conversation into other channels, mostly about her son Pete...\n\n* * * * * * * * * * * * * * * *\n\nWe gathered in the Main Conference Room. I noticed that there was an air of excitement about this initiation, a lot more than last year, and I understood why. We all put on our Orange Order medals, with me wearing my Inner Circle medal for the first time in this ceremony.\n\n\"Okay, Captain Ross, \"said Corporal Kirkpatrick, \"as our Inner Circle initiate, you're the line leader for the candidates. Okay, let's go.\"\n\nWe all went out and turned left, going down the back hallway. Most of the Sergeants had decided to sit in the gym to wait, and they were talking when we came in. Upon sight of us, silence was instantaneous.\n\nCorporal Kirkpatrick, followed by me, came up to the group. \"Sergeant Carswell,\" said Kirkpatrick, \"would you please come with us?\" To congratulations and acclaim, Carswell was ushered into the line behind Cindy. We headed out.\n\nWe went down the hallway between the booking areas (which were inaccessible from this side) and Personnel & Records, walking towards the front of the building. The main auditorium was nearly full, as most Uniformed Officers were waiting there. We went down the front hall and around the corner.\n\nArriving at our destination, Corporal Kirkpatrick whispered \"Commander, this one is all yours.\" I nodded, elated that I was the one getting to do this. I went forward, knocked on the door and opened it.\n\n* * * * * * * * * * * * * * * *\n\n\"Well,\" said Chief Moynahan, sitting behind his desk, \"I know I'm not eligible for this, so we'll sit back and wait, then go in the main auditorium to see who has been sellllec-teddddd...\"\n\n\"I'm curious to find out, myself.\" said Tanya, sitting in front of his desk. Just then, there was a knock on the door, and it opened.\n\nI walked inside, followed by Corporal Kirkpatrick and Teresa Croyle. I looked at the Chief as I approached, then at the last second turned and looked at Tanya.\n\n\"Lieutenant Perlman,\" I said severely, \"would you please come with us?\"\n\nTo be continued. "
    ],
    "authorname": "WifeWatchman",
    "tags": [
        "mystery",
        "police drama",
        "crime drama"
    ],
    "category": "Non-Erotic",
    "url": "https://www.literotica.com/s/knights-of-the-round-ch-02"
}
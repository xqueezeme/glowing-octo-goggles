{
    "title": "There and Back Again Ch. 151",
    "pages": [
        "Chapter One Hundred Fifty-One: Peak Security \n\n\"The Crows figured out Zevran's alive, and they know he's here.\" Aedan waited a beat before continuing, \"We were attacked on our way here from Kinloch.\" \n\nEyes widening at his words, I did a quick visual inspection and confirmed that neither of them seemed to be injured. I'd just assumed that the Crows would let it go once they'd learned that Zevran had become a Warden. Hadn't he said at one point that several Crows back in Antiva had become Wardens? And I'm fairly certain Aedan did Ignacio's dirty work when we were in Denerim to make sure no more contracts would be taken out on us...It seemed, though, that Zevran looked far more sour than I would have expected even given an attack by the Crows. \n\n\"Maker,\" Alistair replied while my mind spun, trying to think about all of the implications at once. \"Was anyone hurt? Did they target just you, Zev, or the Wardens as a whole? I'm thinking some sort of object lesson might be in order; no one messes with one of our Wardens.\" \n\nZevran gave Alistair a shocked look before schooling his expression. Aedan shot the elf a smug grin, and I wondered what that was all about. \n\nAnd then I found out. \n\n\"No, no one was hurt. They took pains to isolate Zev, and the only reason it didn't work was that I woke early for watch. But then...what's that charming phrase you use, sister? Ah, yes. Shit-for-brains, over here, is convinced that he should leave us and go after the Crows alone so that none of us will be targets.\" \n\nThe former assassin winced. \"He took you hostage, amore mio. Tried to use you to get to me.\" \n\n\"And I slit his throat for it with my boot knife. So?\" \n\n\"They will try again, maybe send more Crows, competent ones. They could try that with Sierra, yes? It would be better-\" \n\n\"Bullshit,\" I exclaimed, and the elf's eyes widened in surprise. I narrowed my eyes at him. \"Knock that shit off right now, Zevran. Self-sacrificing melodramatic gestures are my thing, and I don't recall giving you permission to use them.\" \n\nAedan covered his mouth to stifle his laugh, but Alistair guffawed loud enough I was sure that whatever guard was stuck standing outside our quarters could hear it. Zevran's mouth made a shocked 'o' shape, whether at the profanity - which I hardly ever used - or the joke, I couldn't say. \n\n\"I wasn't aware you knew you did that, sister.\" Aedan's eyes danced merrily, and I was amazed the laugh I could see there hadn't come rolling out. \n\nI winked. \"What would an elegant damsel like me do without some white knight to rescue me when I'm in distress?\" \n\nAlistair chortled, and Aedan snorted in amusement. When it appeared Zevran had gathered the shards of his wit, Alistair turned more serious. \"Zevran, we'd have protected you from the Crows even before you were a Warden.\" \n\n\"Some of us did, as I recall, even if he botched the job of protecting you from himself,\" I needled Aedan. \n\n\"I said I was sorry!\" he complained, aggravated. \n\nAlistair face-palmed, I started giggling, and Zevran, finally drawn in to the silliness of our domestic unit, chuckled at my brother's red-faced embarrassment. \n\nWhen we'd all collected ourselves, Alistair went on. \"All jokes aside, you were one of us before you became a Warden. If the Crows are going to target you now that they know you are...well, we won't stand for that.\" \n\nZevran looked about to object, but I interrupted. \"We will increase security here at the Peak - we probably need it anyway - and make sure that no one gets in who doesn't belong here. I already have a bodyguard - I'll just make it easier on her for her to do her job, instead of avoiding her.\" I blushed, and Alistair laughed. \"And if any Crows come for you here, they'll pay dearly for the attempt.\" \n\nI got up and went behind the elf's chair, leaning down to wrap my arms around his shoulders in a hug. After a moment of sitting stiffly, he patted my arms awkwardly; I knew he wasn't convinced. \"I'm not willing to give up and live in fear, Zev. The Crows might get me. I'm going to do everything I can to prevent that, and I'll go down fighting if it comes to that, but I'm not going to let them ruin my life - or yours - because I'm scared. I could have been killed by darkspawn, the Architect, Loghain, Anora, deepstalkers or bandits or a whole host of other threats over the last year. If the Crows want to use me, kill me, they can just get in line.\" \n\nI whispered the last part into his ear so no one else could hear it. \"You make my brother truly happy - something he's never had before. Ever. If you think you're going to casually walk out of his life that easily, you've got another thing coming, mio fratello.\" I squeezed him one more time to make sure he knew I was kidding - mostly - and the wry chuckle I got from him told me he'd gotten the message. \n\nI worked my way back over to my seat, which Alistair had taken over in my absence, so I just sat down in his lap instead. \n\n\"Told you,\" Aedan whispered to Zev as I passed, and I exchanged grins with my brother as Zev flushed. \n\n\"That said, will you work with Avanna, Levi, Mhairi, and I'm thinking Loghain? I think the five of you are the best people to make sure our security is as good as we can make it.\" Zev nodded mutely, speechless (I assumed) in the face of such overwhelming support. I ignored it, giving him the opportunity to collect himself. \"If you need resources, let me know. For now we're well-funded by the King, and if those mines pay off, we won't need to rely on his charity for long.\" \n\nThat seemingly settled, the four of us began to discuss everything else going on. \"I'm assuming I need to take back over for Greagoir's templars to give them a rest. How long has it been, anyway? I don't even know what time of day it is.\" \n\nAedan checked the wan light coming in the shuttered window. \"It's afternoon,\" he told me. I was surprised; I'd slept probably sixteen hours. \"And yes, the templars seem to have much more difficulty than you - they haven't moved from that room. Can't concentrate if they're disturbed, apparently. I'm sure a rest would be welcome. But Avernus put some sort of sleep spell on the Architect, and he says he has some ideas he wants to discuss before anything else gets done. And poor Levi is chomping at the bit to talk to you, sis - we'd told him you weren't well, but obviously he doesn't know all the details. I think it would be good for everyone to see you up and about, to be honest. \n\n\"If you're up to it, of course,\" he amended, noticing Alistair's frown deepening. \n\nI ruffled my husband's hair fondly. \"I'm okay,\" I insisted. \"Really. I'm not saying everything's just fine, but I can manage. And I don't really have much choice. Duty, right?\" I stood up, tugging on Alistair's hand until he clambered up beside me. \"But first, I have to insist on a bath. Would you tell everyone I'll be down in half an hour?\" \n\nAedan and Zevran agreed, and after giving both of them hugs, I shooed them out and climbed into the bathtub with my little showerhead. I'd contemplated dragging Alistair in with me, but I didn't think I was quite ready for any sort of intimacy yet...and we were on a bit of a timeline. \n\nAlistair used the tub when I was done, and then chatted with me while I braided up my hair and got dressed in one of my fancy pant suits. Lucky men - he just has to throw on armour. \n\n\"I can't believe Zev thought we'd want him to leave.\" Alistair looked irritated. \"Doesn't he know us at all?\" \n\nI smiled sadly. \"It's nothing to do with us. Everyone he's ever met before us evaluated him based on his value - as an employee, an assassin, a lover, whatever. He was valuable because of his specific skills. Here, he's just one Warden among many - and now he sees himself as a liability. His skills in fighting darkspawn aren't enough to overcome the risk he poses if the Crows come here. He doesn't see himself as having any other value.\" \n\nAlistair shook his head. \"And I thought my upbringing was messed up.\" \n\nI finished with my hair and went on tippy toes to steal a kiss. \"You and me both. We're just going to have to teach him otherwise.\" I stole a second kiss. \"Thanks for not over-reacting to the risk to me.\" \n\nHe scoffed. \"You'd skin any Crow alive who came after your family. And you'll have me and a fortress full of Wardens to help keep you safe.\" \n\nI chuckled and checked my image in the mirror one last time. \"Alright, let's do this.\" \n\nMy first stop, after pausing in the main hall and promising Levi, Avernus (through Jowan), Avanna, Mhairi, and Greagoir audiences at some point before the end of the day, was the closet housing the templars who were holding the Architect's mana. With the creature unconscious once again thanks to some new potion of Avernus', transferring his mana back to me was simple. The six men shuffled off to their rooms, a wing that Levi had dedicated to Greagoir and his templars, promising to return late in the evening so that I could catch up on even more sleep at night. \n\nThen I hit the dining room for a meal. Most of the Wardens were there - with the exception of Solona, Faren, and Sigrun, for obvious reasons - or if not, they joined us almost immediately. Wardens, with their crazy metabolisms, are always hungry, and I was no exception; fortunately, the kitchen had been warned, and had gotten used to us in a hurry. The amount of food put out could have fed most of Ferelden's army - or fifteen hungry Wardens. After initial greetings and hugs - everyone embarrassingly happy to see me alive and well - things were quiet as we all filled our bellies. \n\nAfterwards, Zev closeted himself with Loghain, Levi, Mhairi, and Avanna, and I wondered what the five of them would come up with for security measures at the Peak. Anders went upstairs to check on Solona, and apparently work on his research towards Faren's cure; all he'd say was that he would let us know when Solona was ready for visitors, and that he had several promising avenues to look into for Faren. Aedan put Conrad in charge of the rest of the Wardens, and he set up groups to go with our already-established patrols: the basement, where the eluvian was being stored and the Deep Roads entrance was; the mines; and the ramparts - and half to rest, so they'd be able to do the night-time patrols. \n\nAlistair, Aedan, Jowan, and I headed up into the tower to meet with Avernus. \n\nThe elderly mage had arranged couches in the library where I'd first met him. The garbage pile of materials that would burn, which he'd collected over the centuries, had been removed, and the books had been reshelved, with some obvious effort to organise them. Everything was clean, and bright sunshine flooded through a west-facing window. We settled down together, and I caught Avernus' sharp gaze on my face as I curled up beside Alistair, with Aedan on the other side. \n\n\"I'm fine, now, thanks.\" I smiled, deciding to assume his concern was for my health. I never have any idea what's really going on in the old reprobate's head. \"How are you feeling?\" \n\nHe watched me for a moment more, ignoring my question, before looking away and addressing Aedan instead. \n\n\"Thank you for coming. I wanted to talk to you before your templar allies start work, and give you a suggestion of how we should handle this creature.\" He gestured to the door beyond which the Architect slumbered, and then he looked back at me. \"But first, I need some information from you, your Highness,\" his tone was formal, but almost teasing. I grimaced, and he grinned, the expression making him look even more skeletal than normal, \"on the other similar darkspawn you mentioned.\" \n\n\"Corypheus?\" I was surprised; I'd mentioned the magister to Jowan, Aedan, and Alistair in passing, but had never discussed that situation with Avernus that I could remember. \"What do you want to know?\" \n\n\"Perhaps it would be best if you started at the beginning.\" \n\nI took a deep breath, closing my eyes and considering what I knew. And then I spent the next few minutes describing what I could remember of the downloadable content from the second Dragon Age game. I told them that Corypheus claimed to be one of the original magisters from Tevinter who breached the veil and entered the Golden City, and how he claimed it was black and the Maker's throne empty. How the Wardens had imprisoned the creature, but whatever had kept him dormant had started to wear off near the beginning of the Century. Some Wardens, and I didn't know who besides Larius, had kidnapped the pregnant wife of an apostate mage named Malcolm Hawke, and used her as leverage to force said apostate to use blood magic to bind Corypheus behind some sort of nested seals. Then, years later, Corypheus had called to some tainted Carta members in his dreams; they had attacked the children of the mage, needing the 'blood of the Hawke' in order to free him. \n\n\"Tell me about these seals?\" Avernus requested. \n\n\"I don't know much.\" I tugged on my braid, trying to remember. \"There were demons behind them, that he'd been forced to summon, I know that. And traps and puzzles in order to navigate them, though that could just have been a game mechanic to appeal to the gamers. There was a key - a staff, I think - that was tied to his blood as well.\" \n\n\"He wasn't a blood mage prior to that?\" I shook my head. \"And they let the mage go afterwards?\" I nodded. \"Sloppy.\" His tone was derisive. Jowan winced. \n\nI ignored the comment, not wanting to get into any details of what he'd have done instead - I could imagine, and that was bad enough. \"As far as how the seals worked, I don't know. There was the implication that they'd used some sort of ancient Tevinter ritual that the Wardens knew about, but I couldn't say if that was the truth or just an assumption I made.\" \n\nAvernus scoffed. \"Everyone assumes any ritual or mysterious magical effect comes from ancient Tevinter.\" He rolled his eyes. \"No matter. I am familiar with a ritual like the one you describe.\" He sat up, fingers steepled, elbows on his knees. He looked back and forth between the three of us across from him. \"I have a proposal for how this creature can be pacified, bound and imprisoned in such a way that he will not be able to break free like Corypheus did.\" \n\n\"I'm listening.\" Aedan had looked slightly ill at the prospect of imprisoning the Architect - and failing, like the Wardens had done with Corypheus. He gazed at Avernus intently, hoping for something to prevent that history from repeating itself, I knew. \n\n\"The first thing we need to clarify, before I begin, is that magic - whether spells, barriers, or seals, does not require things to be a certain size. Do you understand what I mean by that?\" \n\nHe went on to describe a plan in detail - much more devious than I had imagined possible. And after an hour of discussion - and vehement objections by Jowan - I was convinced that it would not only work, but it would provide the best protection against discovery or rescue that we could possibly muster. And we already had everything we needed to make it happen. \n\n******** \n\nI spent the rest of the day in meetings. Levi and I spent a couple of hours going through budgets, expenses, staffing, timelines for having the rest of the Keep cleaned up, and such. We needed more soldiers - which surprised and somewhat horrified me, given that I already employed almost fifty - but we couldn't expect them to patrol twelve or more hours per day without breaks, so we needed enough to cover the nights and the days, as well as time for combat training for each as individuals and then as groups. We were also going to need more housekeeping staff - cooks, cleaners, launderers, and seamstresses, as well as some basic maintenance staff for a Keep as old as ours. We'd do well to have a permanent stone mason of some sort available to keep an eye on structural stability and needed repairs, and he'd need general labourers to do the actual work. We could use non-magical healers and herbalists, and a gardener for Avernus' rooftop garden. We also needed someone to organise the training and determine the needs of the soldiers we employed. \n\nI approved his requests to recruit for all of those positions. I reminded him we wouldn't discriminate based on race - anyone with the necessary skills was to be considered - nor would we pay differently for elven workers than for humans. And I requested that he consider the family members of current employees when hiring, so as to hopefully reduce the isolation of those working for me. \n\nWe took a quick tour of the Keep; he showed me the servants quarters, and I made requests for more braziers, basic wall tapestries and carpets to help hold the heat, and for organising family quarters for any staff with spouses or children who would live at the Peak. And I needed to know the numbers of children we'd be dealing with - between soldiers and servants - so I could arrange some sort of schooling. \n\nThere were enough barracks-style wings to support our current complement of soldiers and Wardens, but more of them would have to be cleared, cleaned, and furnished before we could expand. And I wanted at least a few family quarters there as well, for those who might have spouses come work as servants or labourers, and children too. Most of the soldiers, I knew, would leave their families behind in whichever city they hailed from - but the option should be there, if we had the space. \n\nI'd decided I would try to run the Peak as an example to the rest of Ferelden of how things could be without discrimination, without segregation, and without taking advantage of the poor. We weren't going to have homelessness like the cities suffered from, but I still wanted everyone who lived at the Peak to have more than just their basic needs met. They should be able to afford the rare luxury, and save for the future as well. They should have time off to visit family elsewhere, or just to relax, and hopefully enough of a community would build up that eventually there would be socialization and the formation of families within the Peak. \n\nI also met with Greagoir, and requested he keep us in mind for healers looking to leave the Circle. We had Anders, though I knew he'd be leaving, and I didn't want to rely just on Warden healers in any case. They had a habit of being out in the field fighting darkspawn, and if I was to have hundreds of staff and soldiers, we were likely to have illnesses, injuries, and even births eventually. I also asked him to pass on the need for a Chantry Mother or Sister to come and provide services and succor to the Andrastians living there. There was a small chapel near the main hall, and quarters for a few Chantry staff. I would also write to the Grand Cleric, but figured it couldn't hurt having him look out for likely candidates. \n\nHe also had a request for me that left me speechless: he was asking permission to have templars rotate through the Peak, to train with the Wardens in combat, become comfortable with the concept of mages outside the Circle - and learn from me, if possible. He wanted to screen potential candidates for resistance, and send those with the most potential to see if any could learn to do what I could. None of his had been able to form a shield, and it seemed working together like they did to suppress the Architect's mana wasn't successful for that ability. \n\nI promised nothing except to think about it. I was concerned about having more templars about, making our mages nervous, and wasn't totally convinced that I wanted the Chantry having access to the abilities I'd learned. I knew I'd never use my powers to harm a mage, whether apostate, Warden, or Circle, unless directly attacked, but the Chantry could not say the same. I'd traded my knowledge for Anders' freedom out of necessity, not because I was keen on sharing. I wanted to talk it over with Aedan and Alistair, maybe Solona as the least biased mage I knew - and if possible, Leliana and Grand Cleric Dorothea - before making up my mind. ",
        "My meeting with Avanna was amusing. The poor woman was irate, having spent the past several weeks constantly having to chase me, cajole me, or coerce me into letting her do her job; I'd avoided her whenever possible, gone into battle without her, and sent her away the one time she'd been present to protect me. \n\nTo her shock, I didn't wait for her to harangue me with her complaints; I dealt with the issue head-on. \n\n\"I'm sorry.\" Her shocked look made me giggle, but I suppressed it. \"I haven't made your job easy up to now. And now you know the threats to us have increased, and we need to be more vigilant than ever. I promise not to keep trying to dodge you and making your life harder. In fact, I think I should recommend you recruit a small number of others to be my immediate bodyguards, as well as a guard who will be responsible for the security of the family quarters, and security while travelling. I'd also like you to continue coordinating with Mhairi and Seneschal Dryden to ensure that no one comes to the Peak who isn't meant to be here, and investigate any incidents that may happen despite our security.\" \n\nI gave her a sympathetic smile. \"I can't promise to allow you - or anyone - to be my shadow; honestly, being that obvious would probably be counter-productive anyway. But I do promise to keep you, or whoever you designate, with me while travelling, and within a reasonable distance during the day while working. And once things settle down here, I'd like to start training again - and I think perhaps you and I can be sparring partners sometimes.\" \n\nI left her with a shocked but thoughtful look on her face, though I noticed one of my soldiers - a woman who'd been transferred here with Mhairi, whose name I couldn't remember - discreetly follow me after. \n\nMy meeting with Mhairi was short and to-the-point; she requested permission to set up a formal command structure within the soldiers, given that I currently had only one formally recognised leader despite there being three separate groups of soldiers who had integrated one at a time. My knowledge of military rankings was limited at best, and Ferelden used a hodge-podge of different terminologies depending on whether someone was in the regular army, the guard, working for an individual noble, or a local militia, so together we muddled through and came up with something that would work for us. \n\nMhairi was promoted to Captain of the Soldier's Peak forces. We wouldn't have a commander - it was too confusing, with two Warden-Commanders already running about. Avanna would also be a captain, and both women would report directly to me. Underneath them, Mhairi was to evaluate and select two lieutenants and four sergeants. Lieutenants would be responsible for training, scheduling, and coordinating their platoons; sergeants would manage day-to-day concerns of their squads. And Mhairi would oversee it all, with the exceptions of my personal guard under Avanna. This would expand, once we'd recruited as many soldiers as Levi and I had agreed - eventually our aim was to have somewhere just shy of two hundred men and women responsible for the protection of the Peak, the mines, and the surrounding areas. \n\nOur standing forces would number more than most Arlings, but given the Peak's status as a purely military installation, with no farmholds and few civilians other than the servants necessary to keep it running, it made sense as a place to concentrate full-time forces. We had specific tasks - guarding the Deep Roads entrance, and helping the Wardens with their missions, which would involve large groups needing to travel through the country at times. And I knew that the King had hoped we could arrange for rotating forces from the Denerim guard and the army throughout Ferelden so that each would have some amount of familiarity with each location and also with the Wardens. Cailan wanted to ensure Ferelden would never again be caught flat-footed by invasion - whether by darkspawn, Orlesians, or anyone else, and a large standing force based at Soldier's Peak would help ensure our security and sovereignty. \n\nI joined the Wardens - and Avanna, Mhairi, Levi, and Greagoir - for supper, and enjoyed just listening to the banter going around. I missed our old companions - it felt like years since I'd seen Leli, Wynne, Morrigan, or even Sten - but for now, I had a place to call home, people I loved and respected, a mission, and the ability to enjoy it, and I wasn't going to waste the opportunity to make some good memories. \n\nAfter supper, and before transferring the Architect's mana back to the hopefully rested templars, I got the chance to relax with my family - Aedan and Zevran had quarters near ours, and they joined Alistair and me in our small sitting room for a while. I'm going to have to look into decorations at some point - this place is about as personal as a hotel room at the moment. By unspoken agreement, we avoided talking about anything serious - not our plan, nor the Architect, nor the miscarriage. We played some cards, drank some wine, and chatted idly until I started yawning. A quick trip to the base of Avernus' tower later, and my head was free of the pressure that had been slowly building all day. I crawled into bed with my husband and fell asleep before my head hit the pillow."
    ],
    "authorname": "ElyssaCousland",
    "tags": [
        "fantasy",
        "fanfiction",
        "dragon age",
        "romance",
        "modern girl in thedas",
        "celebrities"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/there-and-back-again-ch-151"
}
{
    "title": "Sosoni Ch. 02",
    "pages": [
        "I met with Bert Headley, and he invited me into his living room only after I paid him. I spoke to him about my \"research.\" I also mentioned the conversations with my gas station guy in Crenshaw.\n\n\"Alrighty, what do you want to know.\"\n\n\"I want to know if there really was a family that stayed behind\u2014that decided to go native.\"\n\n\"There was six Lemhi family groups. One decided to stay, and as the story goes, they did.\"\n\n\"Who were they?\"\n\n\"Chief's son's family. Kid's name\u2014hell, he was just a kid then\u2014was Tonjadika, I think. Pretty young wife and one kid, practically an infant.\"\n\n\"They had a child?\"\n\n\"Yep. Little one.\n\n\"The guy\u2014he was the chief's son?\"\n\n\"Yep.\"\n\n\"Why didn't he go with the other families?\"\n\n\"He's an Indian; how the hell should I know what he was thinking?\"\n\n\"What year was this?\"\n\n\"Oh, 1998, maybe 99.\"\n\n\"Twenty years.\"\n\n\"Yep.\"\n\n\"So, the kid would be about 21 or 22 now?\"\n\n\"Sounds about right.\"\n\n\"What happened to them?\"\n\n\"No idea. Kamewaititti told me about them stayin'. I never saw him again to ask him about it.\"\n\n\"Who is that?\"\n\n\"Kamewaititti? A Shoshone. He was one of the heads of the families.\"\n\n\"And he left?\"\n\nHeadley nodded. \"With his family.\"\n\n\"How can I find Kah-may-why...\"\n\n\"Kamewaititti.\"\n\n\"Right.\"\n\n\"The hell for?\" Headley asked.\n\n\"My book. Further research.\"\n\nHe watched me for a long moment, and then said, \"Far as I know, he lives up in Fort Caldwell on the reservation. Find him there.\" \n\nI had him repeat the Chief's son's name, so I would know it: Tonjadika.\n\nI hit a decision point. Fort Caldwell was about two more hours away, and it was nearing 5:00 pm. Even if I could find Kamewaititti, he might not be interested in speaking with me, especially at night. Plus, I would have a five-hour drive back home.\n\nFuck it. I'm going, I decided.\n\nI hit Fort Caldwell at quarter after seven, and I walked into the convenience store at the edge of town and asked about Kamewaititti. Nobody had heard of him. I asked about any Shoshone families in the area, and the guy directed me to a bar.\n\nI went to it.\n\nI didn't belong there, and the patrons were coldly silent about my presence. I sat down at the bar, and the bartender never once approached me.\n\nI spoke to the man next to me, asking him about any Shoshone in the area. He stuck out his thumb and pointed behind himself at a table in the corner, around which sat four Native Americans.\n\nI went there, waited to be acknowledged, and once I was, I asked about Kamewaititti.\n\nMet with silence, I told them I would leave as soon as they told me where to go.\n\nOne of the men flipped a used Keno card over, jotted down an address with a black crayon, and handed it to me. Back in my car, I mapped it and drove there.\n\nAn old woman answered the door, and she let me in after I introduced myself and asked after Kamewaititti. She pointed to a chair, and I sat next to an old Indian man, about the same age as Headley, watching basketball.\n\n\"Are you Kamewaititti?\"\n\nHe looked at me, said nothing.\n\n\"Bert Headley sent me. I wanted to ask you about Tonjadika and his family.\"\n\nHe looked at me.\n\n\"They stayed behind?\"\n\nHe looked back at the game and shook his head. \"They went into the forest to live.\"\n\n\"Do you know where?\"\n\n\"Miles and miles west of where the Salmon River meets Saddle Creek.\"\n\nThis would put them in the general area of where I met Sosoni.\n\n\"When was that?\"\n\n\"Spring of 1998.\"\n\n\"Why did Tonjadika and his family go into the forest?\"\n\nHe quit watching the game, studied me for a few moments, and then he told a story.\n\nTonjadika's father, the chief, was a bit of a radical. He believed for the tribe to thrive, they must integrate with American culture and civilization. He did not even want them to go to a reservation, but as a stepping stone towards complete integration, he convinced the tribe to move to Fort Caldwell for ten years, and then to leave it. \n\nTonjadika's mother was the daughter of the old chief, a man who raised his family in the old ways of the forest. Tonjadika's mother taught her son these ways, and the child loved them. He grew up, married, and had a child. About this time, he learned of his father's plans. He rebelled against the decision, and the chief was very angry. Nevertheless, Tonjadika took his wife and their small child into the forest when the rest left for the Fort Caldwell.\n\n\"How old was Tonjadika when he went into the forest.\"\n\n\"Oh, 22 or 23. His wife must have been 19 or 20.\"\n\n\"They had a child?\" I asked.\n\n\"Just a baby then.\"\n\n\"What was her name?\"\n\n\"Her name? No, his name.\"\n\nThis floored me. \"What?\"\n\n\"They had a son, a one-year-old son.\" Then he told me the boy's name.\n\nI didn't even hear the name. I was totally flummoxed. This was impossible, I thought. A Boy? Have I been pursuing the wrong lead? I asked, \"What happened to them? Did no one ever visit them?\"\n\nKamewaititti nodded, gravely. \n\nHe explained that about a year after the tribe moved, the chief, his wife, and several others went to visit Tonjadika and his family in order to convince them to come to Fort Caldwell. Tonjadika refused to even see this delegation, but his wife spoke with the visitors. \n\nShe told them that the child\u2014the son\u2014had recently died. The visitors could see that she was pregnant again. Even so, Tonjadika was bitter, blaming his father, the chief, for moving the tribe and its resources away. The last thing she told them was that Tonjadika ordered them never to return. So, no one had seen or heard anything of them since.\n\nI asked, \"What was Tonjadika's wife's name?\"\n\n\"Okoweney.\"\n\n\"Has anyone ever tried to see the family again?\"\n\nNever, he told me, for the chief made it clear that his son, Tonjadika, and all his family were to be forgotten.\n\n\"Are there any remaining family? For Tonjadika or his wife\u2014Okoweney? Any relatives?\"\n\n\"Cousins, but it is no matter. Tonjadika and all of his family are forgotten.\"\n\nI made to get up, but another question occurred to me. \"What does Sosoni mean, in your language?\"\n\n\"People.\"\n\nI offered him money, and he refused, but his wife took it. I left and drove home.\n\nI had a lot to think about.\n\nBased on Kamewaititti's tale, Sosoni must have been born in the Winter of 2000, making her 18 years old. It seemed about right from her energy and exuberance. \n\nIt was a terribly sad tale, though. She had a dead brother that she probably never even knew existed, a father who resented and disowned his own father, and a tribe that had \"forgotten\" them all. \n\nHer parents couldn't possibly be alive, given Sosoni's shock at seeing me. Yet, they would only be about 40 years old now. So, what had killed them? Certainly not old age. How old had Sosoni been when it happened? I imagined she could not have been more than ten, and probably younger\u2014much younger. What kind of miracle was it that she had survived? How strong a person to survive alone? The blood of two Shoshone chiefs, perhaps more, ran in her veins.\n\nI pulled into my house after midnight, and the days of travel, on foot or otherwise, had taken a toll. I crashed, and I didn't wake up until just before 11:00 am the next day.\n\nI scrambled to gather up my things. I threw together a hasty lunch and was going to give her my good knife as a present, along with a leather belt to carry it. I hastily punched a few extra holes in for her waist size.\n\nAnd, because I was giving her my knife, I decided for the first time since the day I saw her, to bring my pistol. I would have felt naked without some protection.\n\nI left after midday, and I felt bad that I was going to be late for our lunch appointment. So, I drove the four-wheeler a mile or so further down the trail, but still out of earshot from the lake, or so I imagined. I was certain that the sight of this machine\u2014the sound even\u2014would frighten Sosoni.\n\nI made it to the clearing just after 1:00 pm.  She had already laid out the blanket.\n\nI called her name and waited. I dropped my pack near the blanket.\n\nI called her name again. Then, I heard a terrifying sound. It was her. It was a guttural howl. I ran toward it, knifing through trees and scanning.\n\nShe lay on the ground, looking up. She was pale. There were slashes across her new coat and blood underneath. More slashes ran across her legs and the blood on her feet and ankles made it look as if she were wearing red socks.\n\nI picked her up and carried her back to the blanket. Her eyes, wide with terror, stared at me as she made urgent, hoarse sounds. She shook her hands, and as I wrapped the blanket around her, her voice boomed with panic.\n\nShe was trying desperately to communicate something to me. The next sound I heard told me everything I needed to know. \n\nI spun toward it. \n\nA mother fucking grizzly bear, fifty yards out, bounded right at me, its bellowing roar still echoing across the valley.\n\nSosoni screamed; I may have, too.\n\nMy hands darted for the holster at my hip, unbuttoned it, and drew the pistol as the monster blitzed. I saw its teeth and its eyes.\n\nI chambered a round and immediately fired it into the air. Sosoni shrieked, but the piercing report did nothing to ward off the bear.\n\nI had three seconds. I leveled the pistol at the bear's face and squeezed the trigger, slowly and smoothly for the first shot. I got two more off, aiming center mass on its chest before I curled into a ball.\n\nThe impact was like getting hit by a car. I was fortunate in that it was a glancing blow; the grizzly's center of gravity\u2014which certainly would have crushed me to death on impact\u2014passed over my body. Its hind legs slammed into me. I rolled and skidded twenty-five feet, hitting the trunk of a tree on the edge of the clearing. I scrambled to my knees and discovered my shooting hand was empty. \n\nThe pistol lay on the ground near Sosoni where I had been hit.\n\nI rose to my feet and a shock wave of pain emanated from my right knee. I limped over to the pistol, searching for the bear's return.\n\nI heard a low growl in the trees, and I ran, despite the agony, to get the gun. It looked operable. I knelt by Sosoni, taking the pressure off my knee when I saw it\u2014the bear.\n\nIt stood on all fours, unmoving, partially hidden by a tree trunk and about ten yards from us. It seemed to be glaring at me. The first movement I saw was the rise and fall of its chest, and the breathing produced a low rumble. It was missing an eye, and its face was a mask of bloody fur. \n\nThe bear faced us directly, so I ensured the pistol had a round chambered. Then, I got up and began walking to put myself on the beast's flank. Sosoni screamed and clutched for my feet.\n\nI kept my eyes on that grizzly.\n\nIt wasn't dead, of course, but I had hurt it. I just didn't know how much. That the bear did not move almost seemed more alarming.\n\nI moved closer to the massive body. \n\nIt still hadn't moved.\n\nI knelt down and aimed just behind its great front leg. \n\nThe head turned toward me. Its jaw gaped, and a stream of blood plummeted toward the ground.\n\nI shot. The bear's head reared up, and it bellowed. I shot three more times at its heart. Then, it sank down. After a few seconds, it's back no longer rose and fell.\n\nI limped over to it, put the gun to its head, and made sure it was dead.\n\nAfter making the gun safe, I went back to Sosoni. She grabbed for me, and I knelt down and held her hand. I smiled at her, and then I put my pack on. I re-wrapped her in the blanket and lifted her up. Fuck, my knee hurt, but she was light.\n\nI carried her, and we passed abreast of the grizzly's body and it's annihilated head. Sosoni gazed at it, and then she said my name. I smiled at her, but she looked at me with something like reverence in her expression. \n\nI wanted to show Sosoni I was strong, and I did not stop\u2014not even once\u2014to put her down and rest my knee. Why was I trying to impress a woman who just witnessed me going toe to toe with a fucking grizzly bear and winning? I don't know. She was the kind of woman, I guess, that I never wanted to stop dazzling. \n\nShe fell asleep or passed out as we neared the four-wheeler. I sat her in front of me and wedged her between my arms on the grips. Then, I raced home.\n\nI parked the machine and carried Sosoni inside to the guest bedroom. I cut away her clothes, all the new ones, and surveyed her wounds. I had a first aid kit, so I spent the next several minutes stopping the bleeding, but I knew I had to call Charles.\n\n\"Hey, buddy. I need you up here.\"\n\n\"You hurt?\" he asked.\n\n\"No, someone else is. Grizzly bear.\"\n\n\"Call 911 for crying out loud.\"\n\n\"I can't. It's gotta be you.\"\n\n\"Why?\"\n\n\"Come up and I'll tell you.\"\n\n\"That's two hours up and back! I can't just call it quits right now; I've got patients waiting.\"\n\n\"Please, Charles.\"\n\n\"Are you in trouble?\"\n\n\"I promise you, Charles, there's nothing illegal about this. I'm trying to protect this person.\"\n\n\"How bad?\"\n\n\"Not horrible, but bad. Not dying, I don't think.\"\n\nHe didn't say anything.\n\n\"Please.\"\n\n\"On my way.\"\n\nHe hung up before I could thank him.\n\nI cleaned her wounds as best I could. Then, I turned off all the lights, shut the blinds, drew the black-out curtains, and cloaked Sosoni in darkness. \n\nWhen Charles arrived, I intercepted him before he reached the door.\n\n\"Thank you for coming. I can't even tell you.\"\n\n\"Let's go.\"\n\n\"We've got a minute. She's sleeping.\"\n\n\"She? Your ex-wife?\"\n\n\"No. Someone else.\"\n\n\"Okay, let me have it.\"\n\nI gave him the quick and dirty version, putting emphasis on my fear of overloading her psychologically by suddenly immersing her in modern civilization.\n\n\"Are you saying she's a wild woman?\" he asked.\n\n\"I'm saying this woman is like someone from 1750.\"\n\n\"Great balls of fire.\"\n\n\"I know,\" I said.\n\n\"Okay, what are you asking of me?\"\n\n\"Do whatever we can do to avoid overwhelming her. Sedate her.\"\n\n\"Look, buddy, now that I'm involved, so is my oath. I'll sedate her if it won't hurt her. I'll treat her here if I can, but if she needs help that is beyond what I've got here or back at the office in McCall, I'm taking her to where we can heal her body. If that screws up her mind, so be it. My duty is to keep her physical body healthy. Can we agree to those terms?\"\n\n\"We can.\"\n\n\"Then, let's go.\"\n\nHe did, in fact, end up sedating Sosoni. When he finished examining her, he turned to me and said, \"We need to get her to my office. I don't think there are any breaks, but there might be.\" He pointed to a few places. \"And I'm worried about internal bleeding.\"\n\n\"Okay.\"\n\nI took Sosoni in my Jeep, and we drove down to his office in McCall. It was nightfall when we arrived; it was after 9:00 pm when he gave me the news.\n\n\"No breaks, but it's a pretty bad ankle sprain.\"\n\nI nodded.\n\n\"You'll need a good brace.\"\n\nI nodded.\n\n\"No internal bleeding that I can find.\"\n\nI nodded.\n\n\"I'll write you a script for what she needs\u2014antibiotics and pain killers\u2014but you can take her home.\"\n\nI stood. \"Thank you, Charles.\" I shook his hand.\n\n\"Now, let's get a look at that knee of yours.\"\n\nIt was a sprain. No other major problems for me. When Charles finished, I thanked him again. \n\n\"Ah, it's nothing. Forget it,\" he said. \n\n\"Send me the bill. Seriously.\"\n\n\"Alright.\"\n\n\"Oh, can I get another sedative for her; I want to keep her out for, say just 24 more hours.\"\n\n\"Why?\"\n\n\"I want to get her out of my home, back in the woods.\"\n\n\"What for?\"\n\n\"Charles, I need to ease her into modern civilization. I'm going to take care of her out there.\"\n\n\"Care for her in the woods?\"\n\n\"Yes. Any problem with that?\"\n\n\"Not if you keep her wounds clean.\"\n\nI left Sosoni at Charles' office and made a supply run. Lots of clean water, food, bandages, prescriptions, and some new clothes for her. A couple of new blankets. When I returned, Charles gave her one more dosage of sedative, wished me luck, and I drove Sosoni back to my home.\n\nThere, I packed out for an extended stay in the woods. It took me a few hours to get everything ready. In the early morning, I drove us all the way to near the clearing. \n\nWith Sosoni resting peacefully on the blanket, the first thing I wanted to do was get rid of the carcass of the grizzly. I dug out a large area around the body, clearing it of anything but dirt. I surrounded the bear with charcoal. I put charcoal all over the top of the dead beast\u2014a big bag's worth. In total, three bags of charcoal went into this operation. I doused it in lighter fluid and set the carcass on fire.\n\nThe blaze raged. I fed it with dead branches. The smoke and smell were overpowering, but the fire slowly consumed the fur and dead flesh. I kept running into the forest to gather up more dead branches. After two hours, the fire reduced the bear to a pile of ashes and bones. I used a bucket to douse the smoldering embers with water from the little lake. A gentle breeze carried the fumes away.\n\nChecking my watch, I knew Sosoni would be coming out of her sedation soon. I staged the food in anticipation of her being ravenously hungry. Everything set, I waited for her to wake by brushing her hair. If I had known what a pain in the ass that operation was going to be, I probably wouldn't have even tried. \n\nSosoni came out of her sedation gradually. She watched me while I drug the brush through her extensive locks. \n\nShe licked her lips, and I brought her a cup of clean water from my supply. She drank it lustily, and I brought her more and more until she was sated. She winced in pain a few times, and I helped her sit up. She saw the food, and I brought it to her.\n\nThe instructions on the pain medication informed me that it had to be taken after eating. I knew Sosoni must be in great pain, but I needed her to eat, first. I wrapped another new blanket around her and helped her eat a sandwich and grapes. I could see that hunger and pain vied for supremacy. At some point, she just put down the food and rested.\n\nI mixed the pain medication in with some water, and I gave it to her. She drank it.\n\nI stood up and collected the trash. Sosoni said my name. I turned to look at her, and with her good arm, she pointed at the tree.\n\nJerk off? Now? I shook my head and crossed my hands in the air: no.\n\nShe pointed at the tree again, and she began crawling to me. I ran to her and lifted her up, holding her and shaking my head. \"No, Sosoni.\" \n\nShe pointed to the tree and said my name. Evidently, this was part of our ritual, and she was not going to allow it to be neglected, no matter how much she hurt. \n\nThe hell with it. I carried her to the tree. She knelt and tugged on my pants with her good arm. I helped pull them down. She shuffled on her knees in front of me. She grabbed my growing cock and pulled to me to hardness. \n\nHe face was just inches in front of my cock, and she alternately watched it and me. The pain medication had not yet taken effect, and it was kind of amazing to see her work through the distress so that I could cum.\n\nWhen I moaned and began breathing heavily, Sosoni opened her mouth. She inched closer to me, her gaping mouth poised to collect everything I gave her. Oh, shit. \n\nI grunted, felt the spasms, and pushed forward. The underside of the tip just rested on Sosoni's tongue when I came. I watched it trickle, gush and then loose into her mouth.\n\nShe drew away, and I watched her swallow. Then, still stroking my cock, she aimed me down and over the water. I leaned against the tree to put my hips across the edge of the lake. A dribble spilled out the tip and fell in. She milked the shaft a few more times. The last dregs, however, hung on the tip, and Sosoni gathered it on her finger. She let her hand fall into the lake and rubbed it off her finger with her thumb. Withdrawing her hand, she watched the fish snap it up.\n\nI yanked my trousers up, and then I helped Sosoni to her feet. I carried her back to the blanket and set her there. A few times, she moaned in pain. I laid beside her, draping my arm across her tummy. She turned to me, and our faces were close. We gazed at each other.",
        "I said her name and she said mine. I slowly rubbed her tummy. We rested there in silence.\n\nA few minutes passed. She closed her eyes and took a deep breath. She held it, and then her eyes flashed open, wider than before, and she gazed at me, searching my eyes with hers. Her mouth gaped wide. She touched her raw shoulder and smiled.\n\nThe pain medicine was working.\n\nShe sat up, and she began noticing the changes\u2014the new blanket and her new clothes. She saw the bandage covering the claw slashes on her shin. She touched them. She felt her shoulder, and pulled her new shirt away, looking inside and seeing the bandage there. She looked at me.\n\nI smiled and nodded.\n\nShe touched my face, and then her eyes grew wide. She moved as if to stand up, and I helped her. She looked back to where I had finished off the bear, and she saw the smoldering pit. She pointed to it, and I carried her there. The skull and bones, intermingled with some blackened flesh and surrounded by dying embers, gave off small wisps of smoke. Sosoni turned to me, wonder in her eyes.\n\n\"Fire,\" I said, \"I burned it.\"\n\n\"Fie-ruh,\" she responded.\n\nI nodded. When she seemed satisfied, I walked her back to the blanket and set her down. I said, \"Sosoni home,\" and I pointed to several places across the lake. \"Sosoni home?\" I asked her.\n\nIt was mid-afternoon. Night would soon approach. I wanted to get her settled in her own place. \"Sosoni home?\" I asked again.\n\nI picked her up and began carrying her toward the place on the lake where I had first seen her. \"Sosoni home,\" I said. I carried her, dodging branches and trees, stepping over chunks of deadwood. \"Sosoni home,\" I repeated. Then I looked at her and said it again.\n\nShe stared at me, and then she pointed with her arm. I walked in that direction.\n\nShe continued guiding me, pointing here and there, and in a few minutes, we had maneuvered to the other side of the lake, behind the enormous boulder with the watery cave. The back side of the boulder had a narrow entrance, about four feet high and two feet wide, and jagged. There was no way for me to carry her through.\n\nI set her on her feet, and she put most of her weight on her good leg. She hopped to the crack, and I followed her. We hunched over and entered. After the narrow entry passage, we emerged into a low space. We both had to crawl. I could see the light reflected into the cave by the water from the crack on the other side, and I heard small ripples lap against the stone.\n\nIt was as if the boulder\u2014a 25-foot high egg-shaped rock\u2014had been cracked where it met the earth. Yet, it was partially buried as well\u2014submerged on the lake's side a few feet and buried in the earth on the rest. Sosoni lived in this crack. \n\nHere she had two egress points, one on the lake's side, in the water, the other on the land side. The lake gap appeared much smaller because half of it was submerged. Between these two cracks lay her home. The earth was her bed, and the area was about four feet high and narrow at the top. There was no way to stand comfortably. \n\nThe place where she slept was long, but not very wide, perhaps five feet across, but nearly ten feet long. Her old rags were there, as well as some other tatters of used up clothing and some rock-type tools, it seemed. The cave smelled like she smelled: like leather and earth. I didn't mind.\n\nShe crawled into her place and laid down. I looked around. No obvious keepsakes here, unless one could count the bedding she was using.\n\nI said her name and she looked at me. I held up my hand: wait, and I turned to leave. She briefly protested. \n\nI ran back and grabbed the supplies I had brought: the jugs of fresh water, the food, the medicine, the bandages, the blankets, everything. I hauled them all back to her cave home. She grinned when I came back inside.\n\nI spent some time digging a small pit in the ground against the rock wall opposite her sleeping area. I fetched some twigs and dried leaves and brush. Stacking them in a nice pile, I took out a lighter. Sosoni watched, confused.\n\nI looked at her and held my hands up: relax. I had no idea if she got that message, but she jumped and hollered when I struck the lighter and created fire in front of her. \n\nI smiled and lowered the flame to the brush. It caught, and Sosoni watched, wary, but mesmerized.\n\nIt was a small fire, and the cave's two exits worked as I'd hoped\u2014the fire pulled fresh air from the lake's side and pushed the smoke out the other side.\n\nNight was beginning to fall.\n\nI set up her bed, putting the thicker, more rugged blanket on the ground and saving the softer one to cover her. I used her old clothes as a pillow. Then, I began removing her clothes. I was careful around her wounds.\n\nOnce naked, she looked closely at the bandages on her shoulder, on her shin, and on her ankle. When her curiosity seems satisfied, I pried up each bandage and checked underneath. She looked too. The wounds appeared to be clean and beginning the process of healing.\n\nThen, I unwrapped her ankle. She saw how it had swelled and turned blue. I took her foot and began, very softly, moving it around to check her range of motion. She watched me and if there had been any pain, she didn't show it. When I finished, I rewrapped it. Then, I helped her put on her pullover and her skirt-shorts.\n\nI covered her in the blanket and laid beside her. We watched the small fire, and she fell asleep.\n\nI can't remember a more uncomfortable night, not being used to sleeping on a blanket on the hard ground. I slept in fits\u2014fifteen minutes here, an hour there\u2014but most of the time, I was awake and thinking.\n\nThe earliest hint of morning light peeked into the cave when Sosoni began to moan in her sleep\u2014the pain medication was wearing off. I climbed over her, trying not to wake her, and prepared a cup of the water-medicine mixture.\n\nI had to piss, so I began crawling out. Sosoni called my name, and she got up to follow me. I tried to wave her off, but she was insistent. She grunted and winced as she crawled. When she reached the cave exit, I helped her up and carried her. I set her down about 30 or so paces from the cave and began to continue, but she crawled after me. So, I stopped and returned to her side.\n\nI pulled down my pants and pissed. She watched, and this was a new experience for her, but one she could relate to. When I finished, she squatted down and peed. I began to reach down to help her back up, but she scooted over a short distance and began digging with her fingers. She squatted over it. \n\nOh. Damn.\n\nWhen she finished, she covered the area with the loose dirt. She rose to walk, and I put my arm around her for support. She led me to the lake, where she had me wade her in. I supported her while she squatted down in the cold water. In it, she rubbed herself clean. Finished, I helped her out of the water.\n\nSosoni let go of me and knelt. She put her hands on my hips and turned me around, tugging at the back of my pants. What the hell?\n\nI pulled them down for her, and she checked out my ass. She even pried my cheeks apart. When I felt her let go, she turned around and lifted her skirt, exposing the soft and firm cheeks of her ass. She looked back at me, smiling.\n\nYes, we're alike that way. \"Same,\" I said.\n\nShe said, \"Say-em.\"\n\nI nodded, and then I carried her back to the cave. When she crawled back in, the pain stopped her, and I knew it was time to get her medicine. \n\nI fetched the blanket, two bananas, some bread, and the water-pain killer solution. I laid out the blanket and helped her to it. She sat and waited while I set the food before her.\n\nI showed her how to peel the banana, and then we ate. Sosoni liked that banana. She devoured it and another one. When she finished the bread, I made her drink the medicine cup. After she drained it, she pushed the cup away and began tugging at my pants again.\n\nI held her hands, stopping her. She looked at me, forlorn. She gestured to her shoulder, her shin, and her ankle, and then she began tugging at my pants again.\n\nThe pain? Confused, I held up the cup to her. I said, \"This helps. For the pain.\" I touched my shoulder and ankle to show her.\n\nShe pushed the cup away and pulled on my pants, pointing to the lake. \n\nThen I understood. Oh, damn.\n\nIt had been the timing\u2014the timing of her last medication. I gave Sosoni the medication after we had eaten and just before she had jerked me off in her mouth. She must have concluded that my semen was the magical pain elixir.\n\nI grabbed the cup, and she groaned. \"This is medicine. Not this,\" I finished, pointing at my crotch.\n\nShe pointed at the lake, and she was insistent, grunting and yelling my name. She loudly protested, and I caught a glimpse of her anger.\n\nI relented, as much out of her insistence as out of my own lust.\n\nI picked her up and carried her over near the water. I pulled down my pants and she greedily clasped my dick. On her knees in front of me, she pulled on it and drew it toward her mouth.\n\nThe power of desire took control of me. I said her name, and she looked up at me. I took my penis in one hand and drew her head towards it with the other. She understood.\n\nShe opened her mouth and closed her lips around my stiffening shaft. I must have been holding my breath. The second I felt the wet warmth, I let out a huge sigh of pleasure, and she gazed at me.\n\nShe sucked\u2014truly sucked\u2014my penis. It was amazing and powerful, but, after the initial pleasure, began to get uncomfortable. I held her head and said her name. When she looked up, I drew up her arm and sucked on her finger gently, demonstrating. \n\nShe watched and seemed to understand. I eventually let go, and she rode back and forth with her mouth. Her lips gripped me tightly, and her tongue, surprisingly strong, slid from side to side along the bottom of the shaft. This was no expert blowjob; what made it weirdly sexy was how desperately wanted my semen. She wasn't thinking about my pleasure; she was only thinking about easing her own pain, convinced that my cum was the answer. \n\nI caressed her head and moaned. It was coming, and she knew it. She bobbed more quickly, and when it began to course through my cock, she grunted a little. I felt her lips tighten around the shaft even more. I felt her tongue flex and push against me, and I heard her swallow. After each gulp, I felt the breath from her nose rush against my pubic hairs.\n\nWhen the spurting flow ended, she withdrew. There was still some semen leaking out the tip. Sosoni wiped it with her fingers, and I grabbed her wrist before she could move.\n\nI pointed to the lake and shook my head. She was going to give some to the fish. I said, \"No. For Sosoni.\" I moved it toward her mouth, and she smiled with her eyes and sucked it from her fingertip. Then, she took me in her mouth again and sucked really, really hard. I gasped.\n\nIf it was all for her, then she wanted all of it. She swallowed and then released me.\n\nWhen all was finished, I carried her back to the cave, thinking. \n\nPart of me felt terribly guilty about letting Sosoni believe my cum was pain medication. Part of me loved it that I was going to be getting a blowjob after every meal. \n\nThe problem that I foresaw was some day in the future when we could communicate more clearly, when she had a sense of how modern civilization worked, and it would dawn on her that my semen didn't have any special properties. She would realize that I was just some horny asshole. I supposed that I was. \n\nBefore lunch, I felt light pressure in my stomach and bowels, and I knew the time had come. I had hoped to be able to escape while Sosoni slept, but she was awake. I signaled for her to stay, but, of course, she followed me when I crawled out. I tried to stop her again, but she clung to me. So, I picked her up and carried to a spot where I, like her, dug a small hole.\n\nHer eyes grew wide and she watched me with anticipation. \n\nIt was, without a doubt, one of the strangest of all my moments with Sosoni. She maneuvered behind me while I pulled off my socks, shoes, and pants. I squatted over the trench and\u2014no kidding\u2014she was maybe a foot behind me, watching the whole event. When I finished, I followed her lead: I buried it and, damn it, I waded into the frigid water and rinsed my asshole clean. \n\nI didn't even flinch when that ice cold water hit my package; that's how much I wanted to be strong for Sosoni\u2014even if she had watched what I'd just done like a kid at a magic show.\n\nI joke about it a little, but I actually understood. She was looking for ways in which we were similar. That was an important one. Heck, she wasn't raised learning about personal privacy. It was no big deal to her.\n\nLunch came and went. I gave her pain medication, and she gave me head. The way she swallowed my cum was almost too sexy, too perfect. Her fevered anticipation and ravenous hunger for semen rapidly spun me up to climax. It hit so hard and fast that I felt like I needed to hold onto something. I buried both hands into her hair, clutched her head, and grunted while my essence surged into her mouth. \n\nIn the evening, we didn't even go to the lake; she sucked me in the cave while I laid down. My stomach flexed, raising my torso from the hard ground at the peak. My bare stomach was covered in masses of her black hair. I muttered her name and groaned.  \n\nAs night fell, I curled up behind her, under the blanket. She took my hand and put it across her chest. I held her. I caressed and rubbed her, loving how her breasts felt in my hands. They filled my hands completely, and they were turgid like muscles. \n\nMy erection grew behind her, and she briefly touched it. I fell asleep, beat tired after losing so much sleep the night before.\n\nThe next day was eerily similar: three doses of medication and three blowjobs from Sosoni. By the last one, she was coming to learn what worked\u2014what I liked.\n\nShe took her top off, and carefully avoiding her bad shoulder, encouraged me to cup, feel, and suck on her breasts. She took my cock more gently, and she had felt my reaction when she went deep, so she tried to gather as much of my cock in her mouth as she could. She also began playing softly with my balls, sliding her fingers down them and around them. \n\nSeeing me urinate fascinated her. I didn't even bother encouraging her to stay in the cave. I helped her out and just let her watch. When I finished, she wanted me to watch her.\n\nIn the afternoon, I swapped the bandages on her shoulder and shin. The deep cuts were healing well. Charles had told me to look for pus\u2014yellowish or clear pus. It would be a good sign. It was coming. \n\nSosoni watched all of this in amazement. I cleaned her wounds, put the antibacterial cream on them, and dressed them again.\n\nI worked the range of motion in her bad ankle. The swelling was going down, and the discoloration of the skin faded. Plus, she began putting more weight on it from time to time.\n\nSosoni appeared to enjoy the attention I gave to her wounds, and I felt like we were practically attached to one another. We didn't do all that much as she convalesced, but whatever we did do, we did together. \n\nI sensed a problem.\n\nI was running low on supplies. Soon, I would need to make a run back to my house, and I didn't feel ready to bring her just yet. I set a departure time for the next morning, after our routine.\n\nThe strangest part of that second full day at the cave happened that night. We curled up together, and this time we were both naked\u2014by her choice. I grew hard against her ass.\n\nI was carefully avoiding her pussy\u2014not for lack of desire, but I wasn't sure I wanted to risk further injury by fucking, and I wanted her first experience to be special\u2014when she was fully healed. There was also something my father once said to me that gave me pause. \n\nIn any case, Sosoni reached back and took a hold of me, and I thought, Oh, shit. She's going to put it in her pussy. But, she didn't.\n\nShe tried to put me in her ass.\n\nGrasping my cock, she wiggled it between the firm globes of her ass cheeks and positioned me against her anus.\n\nI didn't move.\n\nShe held me there, and she pushed back against it. My cock did not penetrate her. She grunted and pushed harder. Nothing. She was too small; I was too big. Everything was too dry.\n\nPlus, I didn't push. I just laid there, stunned. Was she confused? Did she not understand that my cock was meant for her pussy? Before the injury, I had briefly used my fingers on her clit, and she had reacted. She knew where the real pleasure was located.\n\nYet, she kept trying to fit my cock into her ass. She grunted, even, in her strain.\n\nWas she thinking that this was a way to get more medicine? \n\nShe tried a few more times, and then gave up.\n\nMorning came, and after my morning blowjob and other business, I set up another cup of water with medicine and the remains of the food, and I placed it in the cave. Sosoni was confused by this. When she saw me gathering up supplies, she looked downright alarmed.\n\nNext, she watched me throw on my pack. She yelled my name and limped over toward me. I closed the distance and held her. I showed her the empty water jugs; she pointed to the lake. I raised my fingers to my mouth\u2014food\u2014and shrugged my shoulders. \"No more food,\" I said.\n\nShe said, \"No,\" and it almost sounded right. She grabbed onto me.\n\nI pointed to everything I needed to resupply, but she just did not understand.\n\nI took her back to the cave. I kissed her on the lips, and then I left.\n\nShe followed me out and clutched at me. \n\nI decided to show her a flash of anger. \"No!\" I bellowed. \"Sosoni, stay here!\" \n\nShe jumped back, seeing the sudden rage. Then, she cowered and crawled back into the cave.\n\nI felt like a fucking dick. It was easy to forget that, in many ways, she looked at me more like a hero than as an equal. To her, I was some magic man, some killer of grizzly bears. \n\nI knew she wouldn't follow me this time, but I planned to make it up to her when I got back.\n\nShe didn't follow.\n\nAn hour or so later, I had my four-wheeler; an hour after that, I was home. I took a shower, refilled my water jugs, collected up fresh bandages and other supplies, assembled food for three more days, and then I called Charles. I had a question.\n\nI explained to him Sosoni's mistaken assumption regarding the pain medication. He chuckled a bit and said, \"Some fellas.\" Then, I told him about her trying to put my erection in her anus, and I asked him if we maybe missed something in our exam\u2014some injury down there or some digestive trouble.\n\nCharles asked me a few questions about her stools, and I was able to answer them with some accuracy, thanks to Sosoni's desire to be near me every moment.\n\nThen, he said. \"We didn't miss any internal or external injury resulting from the bear attack\u2014that I can assure you. Your description of her diet, how she's eating, the frequency of her bowel movements, and the consistency of her stools tells me that there's no serious digestive issue.\"\n\n\"What do you mean 'serious?'\"\n\n\"Well, let me ask you this: is it safe to say what you give her to eat is probably vastly different from what she was eating when she was alone out there?\"\n\n\"Yes.\"\n\n\"And probably different from anything she's ever eaten in her life. So, her body is adjusting, and she may have some minor aches and pains, but these would be nothing to be alarmed about.\"\n\n\"So, what are you saying?\"\n\n\"Look, she's a young woman, and even without a formal education, I'm sure she understands there's a relationship between her mouth and her anus. Food goes in; stool comes out. Changes to her diet change the stool. Make sense?\"\n\n\"Yeah.\"\n\n\"Okay, she also knows how eating satisfies the urge of hunger and how bowel movements satisfy the urge to defecate. Still sounding right to you?\"\n\n\"Yeah.\"\n\n\"Point is I think she's just curious. This is experimentation\u2014not necessarily sexual experimentation, but there may be some component of that. It's more something else\u2014medical experimentation, call it.\"",
        "\"I'm not following.\"\n\n\"She mistakenly believes your semen to be the substance that gives her relief from pain. Your woman understands the digestive relationships we've been talking about, so my guess is she's trying to see what will happen if she takes the semen rectally. Will it help any minor discomfort she's experiencing from her new diet? She's curious is all.\"\n\n\"You're sure it's not a real medical issue?\"\n\n\"Everything you've described is normal. We were extremely thorough when we looked at her a few days back. Now, if something changes, then you need to let me know.\"\n\n\"But, Charles, do I...?\" I couldn't finish the question.\n\nHe knew what I meant. \"There's no medical risk, provided you're careful and gentle. Do you like her? Does she like you? I don't know. You're obviously taking care of her as a husband would his wife. It's really up to her and you and none of my business.\"\n\nI said okay. He asked me about her shoulder, shin, and ankle. I explained what I saw. He said it sounded like things were moving along well. I thanked him. \n\nIn all, I spent two hours resupplying. It would be a six-hour round trip, roughly.\n\nI loaded up and bungee-corded down the supplies on the four-wheeler, and then I took off. I knew my trail pretty well, and I hauled ass out there. I was closing with my four-wheeler's parking spot and beginning to dread the prospect of another hike with all the heavy supplies. \n\nThen, I got extremely lucky.\n\nI saw her on the ground, scooting away from the trail, terrified. She stopped and covered her ears as I ripped past. I slammed the brakes and turned around.\n\nSosoni saw the ATV turn toward her, and she got up and ran, limping from it like it was another bear.\n\nI stopped, shut down the machine, yanked off my helmet, and yelled her name. I ran after her, calling her name.\n\nShe fell down, and seconds later, I caught up with her.\n\n\"Sosoni, are you all right?\" I knelt beside her. She was in a daze of pain, but she recognized me and began to wail. I lifted her up and carried her to the four-wheeler.\n\nI set her on the machine and hooked my helmet on the back. She flopped off and crawled to me. Reaching for my pants, she tugged at them.\n\n\"No, Sosoni,\" I said. She tugged harder. I grasped her hands. \"No. Home. Home.\" The tears in her eyes pained me to see, but I lifted her up and put her back on the four-wheeler. I climbed aboard behind her. I put her hands over her ears, and then I started it up.\n\nI faintly heard her yell when it started. I held her with one arm across her tummy, and she turned to look at me. It was a decision point.\n\nShe had seen the four-wheeler. What could it hurt, then, to go the whole hog and take her home? Keeping her wounds clean was not easy in the cave. Making supply runs back and forth for several more weeks seemed excessive. It was time to bring her home, but I wanted to fetch a few things from the cave, first.\n\nI put it in gear and edged forward. She yelled again, and she put her hands on the steering post. \n\nThe good news was that I never had to make the hike again. The bad news was she had spent the last five or so hours limping and crawling after me. Had she reinjured anything?\n\nWe arrived at the cave, and I parked. Sosoni kept grasping for my pants; I knew she was in pain. It couldn't hurt to stay for a bit and get her some relief. So, I carried her into the cave. Back at the four-wheeler, I grabbed some things, including a sandwich, went back, and handed her the food. She pushed it away.\n\n\"No! Sosoni, eat!\" I brought my hand to my mouth, pretending to eat. She relented, taking it and eating. The cup and medicine I had left behind were still there, untouched. When she finished the turkey sandwich, I handed her the cup with medicine, and she drained it.\n\nI took the cup from her. I was sitting on my knees, and Sosoni was on her side, propped up on an elbow, facing me. She whined and tugged at my pants. I sat up and pulled them down, along with my underwear.\n\nShe didn't hesitate. Her head eclipsed the view of my cock, and her lips encased my limp penis in wet heat. Her head drew back and her lips securely held the tip. She sucked and my cock stretched before my eyes. She did it, again. Collecting what she drew in each time. I could see my cock fattening. Sosoni engulfed it, and in moments, I was fully hard watching her head slide back and forth.\n\nShe was sucking me on her elbows and knees, and I looked over her body, down her back to where her ass rocked back and forth ever so slightly.\n\nSeconds away from exploding in her mouth, I held her head and withdrew my cock. She looked at me and made a plaintive sound. She grabbed at my legs as I crawled behind her. She yelled. She cried out and slapped down on the ground with her palm on the blanket.\n\nI lifted her skirt, and she grew silent. She watched me, craning her neck around, as I placed my cock against her ass. I took her hand, drew it behind her, and put it on the shaft.\n\nWith my hands now free, I took what I had retrieved from my pack seconds earlier, and I put some on my finger.\n\nSosoni held my cock, wiggled it between her cheeks, and placed the tip on her anus. She pulled my penis with her hand and pushed back with her hips. Again, nothing. Too dry. She cried out and made to spin toward me.\n\nI held her still, and she moaned desperately.\n\nI rubbed the slick stuff over the tip of my erection. She cried out again, and then she stopped when she felt my finger rub the lubricant over her anus.\n\nI slid my finger inside her, and she drew a sharp breath.\n\nWithdrawing the finger, I took Sosoni's wrist and guided her hand back to my cock. Sosoni didn't make a sound. She took my erection, placed it back against her little hole, and lowered her hips against me.\n\nMy heart pounded; my body felt supercharged with energy. I let out a low rumbling groan. \n\nFor her, I knew, this was medical. This beautiful young woman wanted\u2014no, needed\u2014to squeeze my penis into her ass. She thought she needed me to inject her there with my semen. Already aroused from the blowjob, I knew it wouldn't be long before she got what she wanted.\n\nWe both gasped when the tip slid in; it was clasped by the tight ring of her anus. Sosoni wheezed. I held her hips. She waited, not ready for more. \n\nMy erection involuntarily convulsed, and the tip of it flushed and mushroomed inside her.\n\nSosoni hollered. She panted for breath. It flexed again, and she winced and moaned.\n\nI gently eased more into her, and her gasps began taking me higher. The feel of her soft ass cheeks against my waist, the fullness of her ass in my hands, and her fierce concentration and labored breathing, all of it took me near the edge.\n\nI began thrusting gently. \n\nSosoni peered back into my eyes. She pushed against me, and I could see the struggle writ in her eyes.\n\nIn seconds, I was ready. \n\nShe pushed; I pulled, sliding my cock almost fully into her, and then I came. She felt the surges, pinched her eyes shut, and hollered as each one fed her body with the coveted fluid. \n\nWhen I finished, I slowly pulled out, and I could sense her relief\u2014she had what she wanted. She turned to me and looked at my penis. A drop of semen remained on the tip, and Sosoni quickly pushed me flat on my back and licked it off. She swallowed it, and then re-examined the tip. She smelled the shaft, and then licked and sucked it clean. All of it was hers.\n\nI sat up and put her on her tummy. I spread her ass apart and looked. There was some on the rim, and I wiped it up with my finger and showed it to her. She sucked it off.\n\nI laid back down on my side, slid my fingers under her shirt and gently scratched her back. It was another new experience for her, and she made soft cooing sounds to show her appreciation.\n\nAfter a good amount of time, she turned to me and smiled. The pain medication was taking effect. Sosoni caressed my face.\n\nThen, I rolled her onto her back and spread her legs. She lifted her head and watched me. She had a thick coat of black fur on top, but very little on or around her pussy. I spread her slit apart and kissed her there. I put my tongue inside the crease, and I tasted her.\n\nI wanted more. I put my hands on either side and spread her wide open, and then I kissed and sucked and flicked my tongue on her clit. I gently pushed my tongue inside her, and I paused. Something felt different as if a little tongue were pushing back against mine.\n\nI pulled back, spread her open, and looked. \n\nOf course.\n\nA cherry\u2014a hymen. I had never seen one before, and there it was\u2014a little crescent of flesh. Sosoni was a virgin. \n\nA true virgin pussy. Fuck, it made me wild. I circled her little nub with my tongue and listened to her moan. Then I put my lips around the top, completely encasing her clit, and I lapped at it as quickly as I could.\n\nSosoni came in no time, and it was utterly barbarous. She made sounds that no civilized woman ever made. She didn't have the benefit of television and movies to learn how actresses mimic intense sexual pleasure. Sosoni was raw and real, and she sounded like she was dying in the most agonizing way imaginable.\n\nSeems awful, maybe, but it wasn't. This was the sound of ecstasy from someone who had no idea how to express it, had never any reason to express it. Her utterances, bawls, and moans were precisely what came naturally to her\u2014truer than anything some civilized woman had ever sounded like during an orgasm.\n\nAnd I was killing her with pleasure. \n\nI relented as her cries diminished and settled into long, deep breaths. I looked up and Sosoni's head was back, her breasts rising and falling. I climbed up and over her, and she opened her eyes. There was astonishment in her expression\u2014and joy. She cradled my face in her hands. I kissed and laid beside her, softly squeezing her breasts.\n\nShe reached down between her legs and felt herself, and then she sat up. Her knees spread wide, she looked down at her pussy. I sat up and watched her.\n\nShe opened herself with her fingers, feeling and probing. Checking it, maybe. Then, she turned to me and smiled. She sighed, and I could see the exhaustion on her face. She laid back down \n\nI caressed her tits and listened to her breathing become more and more rhythmic. When she fell asleep, I packed up the remaining items in the cave. \n\nI finished in just a minute or so. The ATV was all set with everything except Sosoni and the old blue blanket I had given her. I decided to let her rest for another hour, and in the interim, I walked around the lake to our first meeting place, and to the remains of the bear.\n\nIt felt like a lot longer than a few weeks since I had met her. Shit, it felt like a year.\n\nI walked over to the pit of ashes and bones. Reaching down, I grasped the skull and hauled it up. I had gotten so unbelievably lucky that day. For one, I had brought the pistol because I was going to give Sosoni my knife as a gift. There was also the fact that Sosoni hadn't been mortally mauled. Also, I had time to get the shots off, and finally, the three I got off had done enough damage to give me the time to retrieve my pistol and finish off the beast.\n\nIt dawned on me, right then as I examined the skull, seeing the bullet hole where I had finished it off, that I had been having nightmares about the attack. I was just too tired to remember them.\n\nI walked back to the cave with the skull, and I added it to all the gear I was taking back.\n\nInside the cave, I roused Sosoni. When she got up, I grabbed the blanket. I gestured for her to follow me, and we left the cave.\n\nOutside, I picked her up and put her on the four-wheeler. She looked frightened.\n\nHooking my helmet on the back, I said, \"It's okay, Sosoni. It's fine.\"\n\nI climbed in behind her, adjusting myself and grinding against her booty.\n\nI nudged her, and she turned to look at me. I covered my ears with my hands and nodded at her.\n\nShe covered her ears, and I started it up. Faintly, I heard her yell at the sound. \n\nWhen I started moving, she grasped the handlebars in the middle, and I drove us away from the rock. I took us around the little lake and past the bear's remains. She turned to look as we passed.\n\nI hit the trail and got us moving more rapidly. Sosoni turned to me and smiled her strange, frowning grin.\n\n*****\n\nThanks to readers. More to come. -FS"
    ],
    "authorname": "fsqueeze",
    "tags": [
        "blowjob",
        "feral",
        "first",
        "indian",
        "interracial",
        "native",
        "oral",
        "swallow",
        "wild"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/sosoni-ch-02"
}
{
    "title": "JJ and Ashley Ch. 05",
    "pages": [
        "Ashley was aware before she had the energy to pry her eyes open. That alone made her not want to open them and become fully awake. She was warm and cozy, snuggled in under her sheet. Her body felt both energized, yet pleasantly heavy.\n\nMemories of the day before slowly started to flicker through her mind, bringing a lazy, lopsided smile to her face. Those memories also convinced her to open her eyes, her smile growing when she saw JJ, curled around her and sleeping. \n\nA sense of contentment swept over the blonde followed by curiosity. Ashley glanced up at JJ's face, relaxed and peaceful in sleep, none of the usual seriousness present. Ashely took that as encouragement and slipped a hand up to lightly touch one of JJ's nipples, the pale brown nubs soft and relaxed. She circled the areola, fascinated with how silky soft the skin was. \n\nAshley ran her fingertips in lazy circles around the small but plump mass of JJ's breast, coasting across the shallow valley to play with the other one. When she had both nipples awake and rigid Ashley swept her hand down JJ's torso. Even in sleep the older woman's muscles were clearly defined under her milky skin.\n\nAshley paused at JJ's small, innie bellybutton and dipped a finger into the tiny indentation. \n\nWhen her fingers bumped into JJ's belt buckle Ashley peeked down, her eyes having been drawn to the steady pulse of JJ's heartbeat, visible in the hollow of her collarbone. JJ still wore her jeans, complete with the heavy leather belt. A naughty idea lit inside Ashley's head and she chewed her lip, glancing up at JJ's sleeping face, then back at her pants. She knew JJ had been heavily aroused last night, but hadn't allowed Ashley to do anything about it. \n\nAshley moved carefully so she wouldn't wake JJ. The buckle of her belt clanked loudly, but JJ never stirred, her arm still draped lazily over Ashley's hip. The zipper got stuck for a second, the fabric rumpled. It took a slight tug and it came free, allowing the curious blonde to open JJ's jeans.\n\nJJ wore a pair of briefs that looked like men's underwear. Ashley pulled the denim away from JJ's body enough to see the pocket, intended for a penis that JJ certainly didn't have. Somehow, Ashley found the sight rather exciting, the red fabric and dark grey seams contrasting brilliantly with JJ's pale skin. She hooked a finger into the wide elastic waistband, checking once more to make sure JJ was sleeping, then pulled the briefs away and peeked inside. \n\nShe'd been expecting to find pubic hair, dark as the hair on JJ's head and curly like her own. Instead she found nothing but bare pale skin. Ashley stared and blinked, overwhelmed for a moment by images of bare, intimate skin. She'd heard plenty about how other girls groomed their privates, but she'd never felt the need. The idea of taking a razor to those tender bits was a little scary. What if she cut herself? Can't exactly get a bandaid there, now can you?\n\n\"Like what you see?\" JJ's voice was quiet and low, just a bit raspy from sleep. It still startled Ashley enough that she jumped and let the elastic band snap back against JJ's flat abdomen. She looked up into sleepy brown eyes, blushing when JJ grinned.\n\n\"Sorry.\" Ashley whispered, feeling a little bit guilty about getting caught peeking.\n\n\"Look all you want, I don't mind.\" JJ rolled into Ashley and kissed her forehead before resting her own against Ashley's. \"Did you sleep okay?\" \n\n\"I think I'm the one who should be asking you, since you're in my bed.\" Ashley giggled. \n\nJJ waved that small detail away with a half-hearted gesture. \"Who cares?\"\n\n\"No one. I slept well. Stayed nice and warm all night long.\" Ashley felt shy now that JJ was awake and talking so causally with her. She'd kind of expected this morning to feel more awkward, never having woken up in bed with someone else. \n\n\"Same. Don't wanna get up.\" JJ sighed and pulled Ashley closer, their hips coming together flush.\n\nAshley bit her lip and snuck a hand between them, pushing at JJ's jeans. \"Me neither.\" \n\nJJ hummed in her throat, rolling to her back and helping Ashley push her jeans down. Before she let Ashley's hand start exploring, JJ held her wrist and looked the blonde in the eyes. \"I'm not expecting you to make me cum. Just have fun, explore. Do anything you want. I'll tell you if it's good or not.\" JJ kissed Ashley's fingertips then let her hand go.\n\nAshley blushed and looked away from JJ, watching her hand reach for JJ's bare sex. Both of them gasped quietly when she made contact, her fingertips just barely brushing the smooth skin. Ashley stroked the bare area for a while, amazed at the smoothness of JJ's skin. \n\nBefore long she got more curious, and with a deep breath, slipped her fingers over the curve of JJ's sex and traced the seam of her labia. More silky skin beneath her fingertips, but now Ashley could feel the heat radiating from JJ's body. \n\nWanting to watch what she was doing, Ashley sat up and leaned over JJ's knee. JJ pulled her other leg out of her pants completely to spread her thighs wider to give Ashley more room. Ashley caressed JJ's thighs, admiring the hefty muscles that lay still under her touch. JJ sighed when Ashley's curious fingers grazed along the crease of thigh and groin. \n\n\"Is that a good spot?\" Ashley whispered, stroking up and down along that same area. \n\n\"Yeah. Too much and it's just ticklish though.\" JJ folded her arms behind her head to watch Ashley. \n\n\"I'll remember that.\" Ashley shifted herself again, laying between JJ's thighs, to get a close look at everything. She used her thumbs to peel JJ's pussy open, the pink inside a slightly darker shade than her own. She studied the folds and creases, noting that JJ was already, or still, wet. She could see the tight entrance to JJ's body, seeping the clear liquid that coated the lush pink of her puss. \n\nAshley inhaled discreetly, finding that the sweetly musky smell was rather appealing. She'd sniffed at her own fingers before after masturbating and was familiar with her own scent. JJ had more of a musky smell but Ashley rather liked that.\n\n\"You can touch if you want.\" JJ encouraged, hoping she didn't sound too desperate. \n\n\"I know. Just getting a good look first. I've looked at my own, but never from this angle. Obviously.\" Ashley blushed, pulling JJ's lips wider, watching how that moved everything else. She glanced up and spotted JJ's clit, a small bud peeking out of from underneath its fleshy hood. \n\nWith a deep breath and a swipe of her tongue to wet dry lips, Ashley moved her hand, a single finger extended and tentatively touched JJ, stroking slowly down the wet crease of her smaller inner labia. \n\nJJ's pussy felt like her own, hot, wet, and silky smooth. Ashley pushed that same finger through the gathered moisture at JJ's slick perineum and ventured up to the older girl's clitoris. She rubbed the hood, not sure about the tip yet. She knew her own was too sensitive to touch sometimes, and didn't want JJ to pull away. \n\nMaking small strokes up and down the short length, Ashley watched JJ's clit play peek-a-boo. She could feel the small shaft under her finger becoming stiffer, the way her own did when she masturbated. \n\n\"You can rub the tip if you want.\" JJ murmured, cocking her head to watch from a different angle. She wanted that intense sensation, but didn't want to pressure Ashley. Her excitement was building quickly, left over from the night before and fed by the sight of Ashley exploring between her legs. \n\n\"Really? I can't touch mine. It's too much.\" Ashley dragged her finger over JJ's clit, right over the small bud. JJ's thighs twitched, more juices seeping from her tiny hole. Ashley focused on rubbing at the little tip, wetting two fingers in JJ's copious liquid and rubbing them directly over her clitoris. \n\nJJ groaned, her hips twitching under Ashley's hand. \"Fuck, that's it.\" \n\nAshley blushed, looking up to read JJ's expression. JJ's brow was furrowed, her eyes half lidded. She looked from Ashley's hand to meet her eyes, a pink flush creeping over JJ's cheekbones, matching the flush on her chest. \n\nThe sight of JJ so clearly aroused filled Ashley with confidence. She licked her lip and brought her other hand up to play too. She tapped a fingertip in the pooled juices just under JJ's hole. Ashley slowed her rubbing, needing to pay attention. With her wet finger she circled around the tight opening, dipping in just a little. \n\nJJ exhaled loudly and pulled her other thigh up, both feet flat on the bed now. She hadn't expected Ashley to be quite so adventurous or determined. She'd figured Ashley would take a peek, then they'd get up and start the day. Or maybe she'd get to play with Ashley some. This was a pleasant surprise, Ashely's finger slowly sinking inside JJ.\n\nOnce she'd gotten her finger inside JJ Ashley wasn't sure what to do. She'd never penetrated herself, and never another person. To keep JJ excited, she sped up how quickly she was rubbing JJ's clit, rewetting her fingers first. Ashley was startled when her finger was squeezed tightly, actually pulling back a little. She pushed back into JJ until her finger was deeper than before, the heat and soft inner walls of JJ's pussy completely enveloping her digit. \n\n\"Don't stop, baby. Keep going, in and out.\" JJ canted her hips up to encourage Ashley to move her finger. \n\nAshley bit her lip and pulled her finger back, almost all the way out. She could feel the way that JJ's opening was pulsing, squeezing and gripping. It was very different, but actually kind of exciting. She pushed her finger back into JJ, still rubbing at her aroused clit.\n\n\"Fuck Ashie, that's amazing.\" JJ panted, her hands - no longer behind her head - stroking her flat belly. Her thighs were trembling and she was having trouble keeping her head up to watch Ashley.\n\n\"Yeah? Does it feel good to have my finger inside you? Inside your pussy?\" Ashley blushed, never having said pussy aloud. \n\n\"Oh, you have no idea.\" JJ dropped her head back and pinched one of her nipples. \n\nAshley almost giggled, pumping her finger into JJ, working out the coordination between her hands. \"I have no idea. I've never tried this before.\"\n\nJJ barked out a short laugh, her hips humping into the air in time with Ashley's thrusts. \"Boys generally aren't into getting fingered.\" \n\n\"Ew, no. To myself, I mean.\" Ashley wrinkled her nose at the idea of sticking her finger in a boys butt.\n\nJJ was having trouble talking, her body locking up in preparation of exploding. \"That's gonna have to change. Faster, please, Ashie.\" \n\nAshley sped up her rubbing, ignoring the burning of tired muscles in her forearms and shoulder. She didn't thrust into JJ faster, but added more pressure when she bottomed out. \n\n\"Fuck.\" JJ moaned, low and rumbly in her chest, her body going completely rigid. Ashley gasped when she felt all of the older woman's internal muscles clamp down on her finger, pulsing and squeezing rhythmically. She looked up along JJ's tight body, taking in the way her nipples stood proudly from her modest breasts and the intense expression of pleasure on JJ's face. \n\nAll at once JJ's body relaxed, slumping back down onto the mattress, her chest rising and falling rapidly with her panting. She waved an arm weakly at Ashely, who gently removed her finger from JJ's sex and crawled up the bed to lay next to the dark-haired girl. \n\nJJ gathered Ashley to her, their skin sticking because of the sweat coating JJ. JJ pressed her lips to Ashley's forehead then landed a flurry of light kisses all over her face, making the blonde giggle. \n\n\"You're a goddamn natural.\" JJ was still trying to get her breathing back to normal. \n\n\"You think?\" Ashley asked, pleased beyond words that she'd given JJ pleasure the same way JJ had done for her the night before. \n\n\"Think? I still can't breathe without sounding like a rhinoceros that ran a marathon. You, you are dangerous.\" JJ grinned while she said it, so Ashley took it as a good thing. \n\n\"Well then you'd better keep on your toes.\" Ashley warned, glaring playfully at JJ.\n\nJJ had a reply but she was stopped by a gentle rap on the door. Ashley paled for a second before lunging out of the bed and tossing JJ's shirt at her, pulling her own on hastily. She stuck her arms through the sleeves and double checked that JJ was covered, then opened the door. \"Hey Mom.\"\n\n\"Hey ladies. I just wanted to let you know breakfast is ready. I felt like making waffles.\" Debbie didn't give any indication that she guessed what they'd been up to. She certainly wasn't about to mention that Ashley's shirt was on inside out and backwards. \n\n\"I would love some waffles. What about you, Ashie?\" JJ lay calmly in the bed still, her naked lower half covered by the blankets. \n\n\"Waffles sound great. Do they come with bacon?\" Ashley asked, sniffing the air. Whew, it smelled like pussy in there.\n\n\"No bacon. Track is starting, you know better missy.\" Debbie gave Ashley a look, which made Ashley pout. \"There's still syrup and coffee, if that makes up for it.\" Debra leaned on the doorframe, having more fun than she should, dragging this out. \n\n\"Well, neither are as good as bacon, but they'll do.\" Ashley repositioned JJ's jacket on her desk chair and was about to sit down when her mother spoke again.\n\n\"Did you two stay up all night? Aren't those the clothes you were wearing yesterday?\" Debbie looked Ashley up and down, then over at JJ. She missed the look of panic Ashley sent JJ, frozen in place.\n\n\"We fell asleep talking. Never had a chance to change.\" JJ covered smoothly, also having noticed Ashley's shirt but unsure if Debbie had caught on. \n\n\"Okay. Make sure you put clean clothes on before you leave the house. Don't take too long getting to the kitchen. Cold waffles are not delicious.\" She looked between the girls one last time, then left the room, closing the door behind herself. She returned to the kitchen, a broad grin on her face. \n\nAshley waited the five seconds it would take her mother to get clear of the door then flopped on the bed. \"God that was nerve wracking. Do you think we fooled her?\" \n\n\"Nope. Your shirt is inside out. And backwards.\" JJ smirked, reaching under the sheets to pull her briefs and jeans back on.\n\nAshley pulled the shirt away from her chest to confirm, then groaned. She covered her eyes with an arm. \"That's embarrassing.\" \n\n\"At least she didn't chase me from the house with a shotgun. Relax, Ashie. She already knows that something is going on between us. Didn't you see how she figured it out last night when you asked if I could sleep over?\" JJ stood to buckle her pants, then ran a hand over her hair, making sure the bedhead wasn't outrageous. \n\n\"Really?\" Ashley half sat up, alarmed. \n\n\"Yeah. Calm down.\" JJ sat next to Ashley's hip. \"You're an adult, as I am. I doubt she'll ask us to keep our physical relationship out of her house.\" \n\n\"But she knows. Do you think she heard us last night?\" Ashley looked genuinely upset, which was another reminder to JJ how inexperienced the blonde was.\n\n\"Ashley, whether she heard us or not, she knows. It could just be because of our past history or intuition. I don't know. There's no reason to be ashamed or embarrassed.\" JJ stroked Ashley's side, patting her bottom.\n\n\"I've never done something like this here. I never brought a boy in here to make out, you know.\" Ashley shared, rolling to lean against JJ. \n\n\"And you'd better not start now.\" JJ teased, getting a laugh from Ashley.\n\n\"No, I'm quite happy with my boy-less bedroom.\"\n\nJJ smiled and leaned down to kiss Ashley's cheek. \"Me too.\"\n\n***\n\nBreakfast was relaxed, despite Ashley's embarrassment that her mom knew she and JJ had messed around. She forgot about it after a few minutes in, both JJ and Debra acting as if it didn't matter. Ashley realized there wasn't anything to be embarrassed about and relaxed, laughing at her mom's bad jokes. \n\nDebra left shortly after breakfast, needing to get some shopping done. JJ helped Ashley wash up the dishes, then followed the blonde back to the bedroom. \n\nAshley left the door open, and stretched out on her bed with a sigh. \"Well, that went better than I expected.\"\n\n\"Told you it would be fine.\" JJ sat at the foot of the bed and began putting her shoes back on. \n\n\"Yeah, yeah, rub it in a little more. I told you I've never done this before.\" Ashley griped, raising her arms above her head and stretching, a full body stretch that pointed her toes and arched her back. \n\nJJ couldn't help watching, Ashley's toned tummy exposed when her shirt rode up. It took some effort to look away and finish tying up her old red high tops. JJ stood and took her jacket from the desk chair.\n\n\"Where are you going?\" Ashley asked, realizing that JJ was getting ready to leave. \n\n\"I've got to work on the house. We left all of Emily's stuff out when we left. I need to put that away and sort out the other trunk.\" JJ shook the jacket open and slid first one, then the other arm in.\n\n\"Are you sure that's a good idea?\" Ashley asked. \n\nJJ shrugged, adjusting the collar of her leather jacket. \"I know what to expect now. That it might be something from her, or Mack. It's okay.\"\n\nAshley frowned, not so much worried for JJ as curious about what could be in the foot locker. She had plans for this afternoon though. \"Text me when you figure out what it is, yeah?\" \n\n\"You bet, little lady.\" JJ gave Ashley the same half smile she'd had as a girl.\n\nJJ came to the edge of the bed and leaned over to give Ashley a kiss. Ashley opened her lips immediately for JJ's tongue. Even though JJ had planned to keep the kiss chaste, she couldn't resist the invitation and slipped her tongue inside Ashley, tasting the syrup she'd had at breakfast.\n\nAshley pressed her advantage and slyly slipped her hands inside JJ's tee, cupping her small breasts and tugging just a little roughly at JJ's nipples. JJ grunted and pulled back, nipping at Ashley's lip. \n\n\"Easy with the nips, will you?\" JJ scolded, softening the words with sucking kisses along Ashley's neck. \n\n\"S, Sorry.\" Ashley gasped, tipping her head back to bare her neck. \n\nJJ growled, sucking harder at the tender flesh of Ashley's neck. An exposed neck was a primal sign of submission, and one that JJ relished. She shivered, knowing that she needed to get going, but reluctant to leave. \n\nAshley whimpered, her neck more sensitive than she'd known. Tingles were racing up and down her body, raising goosebumps. She ran her hands along JJ's sides, feeling needy. \n\nIt was with a frustrated moan that JJ pulled away from the delicious length of Ashley's neck. Both women were breathing heavily, but JJ exerted some self-control and straightened. \n\n\"I really do need to go, Ashie.\" JJ insisted, finger-combing her hair back. \n\nAshley sat up, rubbing he hand over the wet spot on her neck. \"Okay.\"\n\nJJ led the way back down the hall and to the front door. She let Ashley open the door, but turned to her before stepping over the threshold. \"I enjoyed last night, Ashie. Probably more than you know. I will text you to work out another little date, okay?\" \n\nAshley blushed, but smiled and nodded. \"Okay.\" \n\nJJ tugged on one of the blonde's wild curls then stepped onto the porch and walked briskly to her truck. \n\nAshley waved as JJ drove off, then shut the door and leaned against it, a ridiculous grin on her face and a giddy laugh bubbling up from her throat. In the space of one day, she felt like a completely new woman. Ashley felt like she had discovered some deep secret of the universe, powerful and all-knowing. She knew how to make JJ cum. Ashley knew how JJ's lips tasted, how she kissed. She knew how JJ's hands felt on her skin, strong and warm, just a little rough from hard work. \n\nPushing away from the front door, double checking she'd locked it, Ashley wandered back to her room. The house was empty and she knew exactly what she was going to do. Crawling back onto the bed Ashley laid on her belly, her face pressed to the sheet where JJ had slept. It smelled just like the dark-haired girl and Ashley moaned, slipping a hand underneath her and into her leggings, then into her panties. ",
        "The memories of the night before and that very morning combined with JJ's scent and her own practiced fingers made quick work of Ashley's arousal. She lay panting on her bed, swallowing the saliva that was pooling in her mouth. Exhaling slowly to slow her pounding heart Ashley pulled her fingers from her pants and cleaned off her fingers, something she'd started doing late one night her sophomore year in college. \n\nSitting up slowly, Ashley checked the time. She had three hours before the group skype call. She definitely needed a shower before then. She smelled like girl sex and waffles, not that they would know. It would be distracting though. \n\nStanding, Ashley gathered clean clothes together and crossed the hall to the bathroom. She stripped off her clothing while the water heated up. That was when she noticed the hickey JJ had just left on her neck. Shit. Someone was bound to notice. \"Hair down today, I guess.\" Ashley muttered to her reflection. \n\nAshley stepped into the spray and tipped her head back, letting the warm water soak her hair. A hand crept up her neck, massaging the spot where JJ had left her love bite. Her small smile faded. Was what they'd done considered sex? Had she just had sex on a first date? \n\nShe mechanically began shampooing, her mind starting to whirl. Was it no kissing until the second date, or no sex? If she calculated right, they'd already made it to third base. Or was that a home run? Wasn't a home run actual intercourse? Who the hell thought a baseball analogy was appropriate? Did any of those 'rules' apply if you'd know the person for several years, not just the forty-five minutes of your blind date?\n\nShe rinsed and started working conditioner into her hair. Maybe this wasn't something to stress over. She'd enjoyed herself, and JJ had seemed to enjoy it. She'd said as much before she left. \n\nAshley chewed her lip, tossing her hair over her shoulder and rinsing her hands. She couldn't help but rethink how she'd behaved. While she'd just been doing what felt right, Ashley didn't know what JJ really thought about what they'd done. Did JJ think badly of her for going so far so soon? Ashley snorted and squirted soap on her loofah. Don't be ridiculous, JJ had been more than willing to go at Ashley's speed. JJ wouldn't think poorly of Ashley because she was eager to play. \n\nAshley made short work of soaping up and rinsing her body and hair, being extra thorough with her hair. Turning off the water she wrapped herself in a large fluffy towel and used another to wrap her hair, squeezing to soak up the excess water. Drying off, Ashley sorted through her lotion basket, trying to find a good one to wear. \n\nShe settled on a tropical one, applying it generously. After a swipe of deodorant she dressed in a skirt made of a light, flowy fabric and a simple sea green blouse with short capped sleeves. She dried her hair and returned to her room. \n\nHer phone had a text, so Ashley dumped her clothes in the laundry basket and unlocked the screen, absentmindedly kicking a dirty shirt and pair of socks towards the hamper as she read. \n\n'Hey. Locker just has books in it.' JJ had text her almost twenty minutes ago. \n\nAshley plopped herself into the desk chair and swiveled while she tapped out a reply. 'Didn't take Mack for the literate type. No offense.'\n\nJJ replied quickly, 'None taken bc he wasn't. They're Emily's.'\n\nAshley felt like she should have known that. 'Wow. Anything good?'\n\n'Lots of classics. A couple romances and some mysteries. She had good taste.' JJ sent a picture along with that message, about half the books pulled from the trunk and stacked neatly beside it. \n\n'It's an impressive collection.' Ashley replied, going back to the picture and peering closely at the spines, trying to make out the titles. She couldn't read any of them but a few looked familiar.\n\n'Ya. It's getting added to mine. Want any duplicates?' JJ asked.\n\n'Wait, you read?' Ashley teased, checking the time. She set the phone down and began making her bed. She was not about to give the girls any clues to the fact that she and JJ were more than friends at the moment. \n\nHer phone pinged with another text, quickly followed by another. Ashley positioned her pillow and took her blanket with her to check the messages. \n\nThe first was from JJ. 'You keep up these jokes Imma tan your hide.' Ashley sniggered and replied. 'Only if you can catch me.'\n\nThe second was part of the group text, Brenda asking if everyone was still on track for the skype call. Ashley responded in the affirmative and tossed her phone to the bed to fold the blanket she kept at the foot. \n\nThe small electronic pinged six more times before Ashley had the blanket to her liking. \"I'm so popular today.\" Ashley muttered under her breath, picking up her phone and reading through. So far, everyone was still doing the call. Good. \n\nJJ had responded too. 'Challenge accepted.'\n\nAshley blushed, the idea of JJ spanking her mildly appealing. Frankie had swatted her butt a few times while they fooled around and it had excited her. It wasn't the pain, since he'd been gentle. It had been the way her bottom had tingled, the way the impact had sent ripples to her pussy. It had been like a signal to her body and her body had responded with full arousal in moments. What that led to still made her blush bright red.\n\nAshley looked down at the phone in her hands, chewing her lip as she thought about what to say. Slowly she typed. 'Accept at your own risk. What'll you let me do if I catch you instead?'\n\n'Anything you wanted.' JJ added a smiley face to that. \n\n'Hmm. I'll hold you to that.' Ashley responded, leaning over her desk to turn on her laptop.\n\nAs the machine warmed up Ashley straightened up her room. It wasn't too messy, but there were a few items of dirty clothes around and her bag had been dumped rather unceremoniously next to her desk, spilling textbooks. So she cleaned up out of habit.\n\nRoom clean, Ashley sat down and logged into her email, deleting junk and answering one from her roommate Lisa. \n\nLisa and Ashley had only been rooming together since the beginning of the semester, Ashley's previous roomie having graduated in December. Ashley had learned very quickly that Lisa was painfully shy and rarely had friends over. If she did, she made sure to ask Ashley prior to inviting them. More than once Ashley had tried to explain that the room belonged to Lisa as well and she didn't need to ask permission. And more than once Lisa had agreed that she understood, then continued to ask. This email was just another in a short line of requests to have a friend over. Ashley gave her usual, positive answer and logged off her email. \n\nShe still had thirty minutes, but Ashley logged into skype and found that Brenda was already online. Of course she was. Ashley shook her head. Brenda was the biggest mother hen of the group, always on top of plans, who was sick, who had the worst period cramps, and coming through with the appropriate care packages. Ashley fondly remembered being dragged along to pick up soup and cold remedies for Chloe the winter of 2009. Brenda had filled a box with soups, teas, simple pain relievers, and a new extra fluffy blanket for Chloe. She'd put Ashley in charge of mailing it, under strict directions to have it arrive the next day. \n\nAshley sent Brenda a quick message, 'Hello there.'\n\n'Hi. How are you?' Brenda typed back.\n\n'Doing well. Came home early yesterday cuz Rolley canceled class.' Brenda would know which Professor Ashley was referring to, since they went to the same college. They'd never had a class together, but they'd shared professors. \n\n'Of course he did. If he cancels a class, it's always on a Friday.' Of course Brenda caught the pattern, probably writing it down every time a class was cut. \n\n'You just chilling?' Ashley asked. She had a hard time talking with Brenda online like this because the other girl's dry sense of humor made her jokes difficult to catch without any inflection or body language. It was much easier to talk face to face, but that would mess up the group chat.\n\n'Yeah. Little brother is in town and has his friends over. I'm sitting in my room, making no noise and pretending that I don't exist.' Brenda added a smiley face, but Ashley caught the reference and giggled. \n\n'That bad, huh?' Ashley sent a laughing emoji along.\n\n'Last time I made an appearance it took me two hours to get free. You would not believe the questions 14 year old boys ask about college.' \n\n'I can guess. How many times did they ask about how hot the girls are?' Ashley smirked, imagining Brenda's precocious little brother. \n\n'Only about twenty five times. I think they were trying to be sly about it.' Ashley caught Brenda's sarcasm. \n\nAshley was trying to think up a clever response when Sarah popped online. She created a group message and sent a greeting, answered by Brenda and Ashley both. \n\n'Any sign of the others yet?' Sarah asked, her font colored purple, in contrast to Ashley and Brenda's regular black. \n\n'Nope. They should be online soon.' Brenda assured Sarah. \n\n'How's it going on your end?' Ashley asked, not having spoken with Sarah in a few days. \n\n'All is good here. Have some good news to share with everyone.' Sarah sent two happy face emojis.\n\n'Okay, we'll be patient.' Ashley rolled her eyes. Of course Brenda would wait. Ashley wanted to know what Sarah had to share. She knew the quiet brunette had been doing some serious job searching since she'd graduated in December, but had little luck. Another thought occurred to her as Rebecca and Amy's joint account appeared online. Sarah was in an exclusive relationship with her boyfriend of two years, Nathan. Was the good news a pregnancy?\n\n'Yo bitches. Lets get started. What are we waiting for.' Rebecca typed, her handle simple RA.\n\n'Chloe's not online. I texted her and she's finishing lunch.' Brenda informed everyone. \n\n'Tell her to bring her food to the computer. Im not waiting all day.' Rebecca snipped.\n\nSeconds later Chloe popped online and Rebecca started the call. Ashley exhaled, butterflies alighting in her tummy. She accepted the call and shook her hair over her shoulders. \n\nFour windows opened, her friends faces appearing on her screen. Ashley smiled and adjusted her laptop until she was pleased with how her own feed looked. She waved, then caught sight of Chloe about the same time as the others. \n\n\"Eww! Did you grow up with cavemen?\" \"Omg Chloe, can you not eat like a dinosaur?\" \"Chloe, you didn't have to kill it first. It was already dead.\" \"Chloe that's disgusting.\" They all chimed in, while Rebecca's girlfriend Amy just smiled with a bemused expression on her face. \n\nChloe glared at them over the decimated half of her burrito, beans and rice sticking to her cheeks while salsa dripped from her chin. She took another bite just to spite them, the tortilla ripping as it tried to contain the filling. The burrito's contents fell over her fingers and more bits of food coated her cheeks. She cheeked the bite, looking like a pale blond chipmunk. \"You wanted me online. You got me, burrito dinosaur manners and all. Shut yer yaps.\"\n\n\"Okay, so we'll just try to ignore that little mess. Amy and I have tickets to come out June 3rd and stay for two weeks. That was the most time she could get off from work.\" Rebecca started, her red hair braided and trailing over her shoulder. Amy sat next to her, tall and thin, her blue Mohawk combed neatly to the side. The taller girl rarely spoke, but when she did everyone listened. \n\n\"June 3rd works for me. School will be out for Ashley and me by May 13th. I'm coming home that same weekend.\" Brenda consulted a small day planner, a pencil at the ready to make notes. \n\n\"I'm working part time at the arts and crafts store again this summer, but it'll be morning shifts.\" Ashley reminded the group. Last year she'd had the same job, but had been stuck with evening shifts which put a big damper on plans.\n\n\"Thank God you got mornings. What about you, Sarah?\" Rebecca leaned forward into the camera, her face filling the small window. \n\n\"Uh, I should be free that first week. The second week, I've got another obligation.\" The petite brunette adjusted her glasses and grinned, tucking her hands in her lap.\n\n\"Obligation? Since when did you start using big words with us, smarty pants?\" Rebecca squinted at her screen, her green eyes averted from view for a moment. \n\n\"Since I got that job at the library.\" Sarah admitted, receiving congratulations from the group, including Chloe who appeared to be finished with her messy burrito. Sarah had been the only one of the group to stay in town and attend the local community college. She'd graduated before all of them with degrees in Classic Literature and Clerical Professions and applied for a job as assistant librarian. \n\n\"So now you get to spend your days shushing kids and sticking books on shelves. Joy skippy.\" Chloe rolled her eyes and guzzled a pale yellow liquid from a glass bottle. \n\n\"Actually, I'm a librarian, not an assistant. I applied to be an assistant, content to work my way up the chain. But they've had one person leave and another has given them notice. It's pretty far in advance, which gives them time to train me part time until they leave in June.\" Sarah frowned at her screen, adjusting her glasses. \"Chloe, I hope that's lemonade.\" \n\n\"No it's piss, to go with my caveman burrito. Of course it's lemonade!\" Chloe snapped, wiping her mouth with her hand.\n\nEvery one sat quietly, a little taken aback by Chloe's temper. This was unusual for the typically chipper blonde. \n\n\"How's things on your end, Chloe?\" Ashley asked, watching Chloe's window. \n\n\"Busy. I've got a billion projects all with deadlines approaching. I haven't been laid in weeks and I'm pmsing.\" Chloe used both hands to push her short bobbed hair from her face and sighed. \"Sorry. Stress is making me bitchy.\" \n\n\"Forget about all that for the time being, Chloe. We're making plans for a fun, stress free summer.\" Brenda soothed, her calm tone carrying through the computer. \n\n\"I'm sorry for teasing you about the burrito. I eat like a dinosaur too when I'm bitchy.\" Rebecca leaned back, either missing or ignoring the sidelong look from Amy. \n\n\"Yeah, I've seen it. Maybe that's where I learned it.\" Chloe teased, relaxing and putting her work to the back of her mind. \n\n\"Well you didn't learn it from me.\" Sarah giggled, her eyes tracking something beyond the computer. \n\n\"Okay, so Amy and I are, obviously, free. Ashley is free, Sarah will be free for one week. Brenda, were you available?\" Rebecca tilted her head, her red braid falling off her shoulder.\n\n\"I'll be free. I signed up to be a coach at a summer lacrosse camp but that's not until July.\" Brenda's brown ponytail bobbed as she looked from her planner to the computer. \"I'll keep those weeks open.\" She bent to write in her day planner. \n\n\"Okay, so Chloe, that leaves you.\" Ashley prodded. \n\n\"Semester ends May 11. Okay. Then I should be able to be home by the 15th or 16th. Mom and Dad have some shindig I have to go to at the end of May. Shit, what was that?\" Chloe muttered as she thought things through, consulting a wall calendar she'd pulled from nearby. \"A wedding or something? Whatever. That's out of town and we get back on the 27th. So yes, I'll be there.\" Chloe looked back up at the screen, grinning. \n\n\"You need to write this down so you don't forget.\" Brenda urged, a worried look on her face. She never planned things that casually. \n\n\"Consider it written.\" Chloe tossed the calendar aside. \"Ashley would you be able to pick me up from the airport, as usual?\" \n\n\"Probably. You're coming back on the 15th or 16th?\" Ashley confirmed, looking sharply at the camera. \n\nChloe sighed and the others giggled. \"Yes, the 15th or 16th.\" She grabbed the calendar and after tossing a couple dead pens, scribbled on the appointed days. \n\n\"I'll make sure I'm not busy.\" Ashley wrote herself a note on a post it and stuck it to the upper shelf on her desk. \n\nChloe rolled her eyes and set the calendar aside again, but close enough to grab again. \"Like what else could you possibly have to do?\" \n\n\"You never know.\" Ashley answered, keeping her expression innocent. \n\n\"Hmph, whatever.\" Chloe rolled her eyes, a grin assuring Ashley she was teasing. \n\n\"Enough squabbling you two. What are we going to do while we're there?\" Rebecca leaned against Amy, who automatically wrapped a long arm around the redhead's shoulders and kissed her head. Ashley had to suppress a grin, remembering how JJ's similar embrace had felt.\n\n\"I've been thinking about this, and made a list of possible activities.\" Brenda announced, holding up a sheet of paper with her neat handwriting forming a decent sized list. She cleared her throat and began reading the options. \"We could go camping, weather permitting. That would take up the largest chunk of time. Everything else is just activities. Amusement park, bowling, clubbing, mini golf, movie marathon, roller skating, swimming, and tanning.\" Brenda looked back up at the camera expectantly. \n\nEveryone was quiet for a moment, pondering. There wasn't a lot to do in Sierra Falls, which had become painfully obvious once the girls were in college, surrounded by parties and cities bursting with activities. While none of them felt the need to turn this vacation into a raging party, they still wanted to have fun. \n\n\"What if we do everything? Go camping the first week, then the second week, do the activities in order of most energy spent.\" Sarah spoke slowly, playing with her ear. \"We go camping, which requires a lot of energy and planning, but is fairly relaxing. That gives us time to catch up and everything. Then when we come back, we do clubbing first. That's pretty high energy with the dancing and stuff. Then we just pick and choose the rest of the week.\" \n\n\"But you'll only be able to do the camping, since that's the first week.\" Ashley pointed out, understanding Sarah's logic. \n\n\"I can do some things, if they're in the evening. I could go clubbing, and do the movie marathon, or at least join after work.\" Sarah explained, a faint blush rising on her cheeks when a tall figure moved through the background. \n\nChloe lurched forward in her chair, almost falling in her hurry. \"Is that Nathan?\" she whispered, moving around ineffectively to try and see around Sarah. \n\n\"Yes. Now pay attention.\" Sarah cleared her throat and continued. \"I don't mind missing out on some of the stuff, so long as you keep me in the loop, plan wise. We all know I'm the least athletic of us all. I won't mind missing out on mini golf.\" The petite brunette nudged her glasses back up her nose. \n\nRebecca had been tapping her fingers on Amy's thigh and sat up straight, ready to give her opinion. \"I like the idea of doing all the hectic, energy demanding things first. Very logical. I'm down for camping, but we're bringing the damn bug spray this time. The commercial stuff, not that homemade crap. Sorry, it just didn't work. I was eaten alive. Also sunscreen, cannot forget that. Hell yes to a night at the club, but I want to go more than once. The only thing I refuse to do is the amusement park, although I'll make an exception for mini golf.\"\n\nEveryone seemed to agree with Rebecca, so they began to plan things out. Camping from June 4th to the 10th, returning home late on the 10th. Breakfast out on the 11th with dancing at the club that evening. They all knew they'd need a day to recover from hangovers, so a movie marathon was planned for the following Sunday. They agreed to plan out the second week that Sunday, but to keep the activities low key. Rebecca insisted on another club night, which was set for the 17th, since she and Amy had to fly back home to Rhode Island late on the 18th. \n\nAshley wrote out the plans, content to let Rebecca and Brenda work things out and simply go with the flow. She had butterflies in her tummy, a large part of her wanting to ask if JJ could tag along with the group. Her phone pinged at that moment, getting everyone's attention. She tried to keep a straight face as she opened the text from JJ.",
        "'Skype yet?' Two words. That's all it took for her heart rate to increase dramatically. \n\n'Yep. Right now.' She replied, setting the phone down and looking back to the computer to see five pairs of eyes watching her. \"What did I miss?\" she asked.\n\n\"It's not what you missed.\" Rebecca tilted her head and squinted, Chloe doing the same thing from her window. \n\nAshley raised her eyebrows, not understanding Rebecca's cryptic statement or behavior. \"Huh?\"\n\n\"So how has your weekend been so far, Ash?\" The redhead asked casually, straightening and setting aside her notes from their talk. \n\n\"Good. Left school early. Had a, uh, fun day yesterday.\" Ashley swallowed, suddenly nervous. She had wanted to share some of what she and JJ did, but this just felt weird.\n\n\"A fun day? What'd you do?\" Rebecca asked while Chloe snickered. Even Sarah and Brenda grinned, both sitting this one out. \n\n\"Well, I stopped by JJ's to see how the house was coming along. She's done so much to that place. It almost looks like new. I mean some paint, carpet and a new roof have worked wonders.\" Ashley stopped herself before she could gush too much.\n\n\"And how is dear JJ?\" Chloe asked, batting her lashes and grinning.\n\n\"She's good. Happy to be almost done with the house. Oh, she took me roller skating. I can totally skate now!\" Ashley remembered she'd wanted to tell them.\n\n\"And JJ taught you?\" Chloe was giggling, her chin propped on her fist.\n\n\"Yeah.\" Ashley knew she was missing the point here. There was no way they'd know what else she and JJ did, so what was going on?\n\n\"Did our dear, sweet JJ teach you anything else?\" Rebecca asked, one eyebrow lifted suggestively. \n\nAshley couldn't help the blush that flared across her cheeks, but a glance at her own, small window on the screen revealed what they'd been smirking about. That damn hickey was visible, plain as day on her pale skin. Ashley cleared her throat and adopted a lofty air. \"Maybe. Maybe not.\"\n\nEveryone giggled at that, then Amy leaned in. \"You wanna invite her for June?\" \n\nAshley smiled, \"I was going to ask you guys about that actually. Would anyone mind if JJ tagged along for some of our plans?\" \n\nWhen everyone agreed they'd love to see and catch up with JJ, Ashley nodded. \"I'll let her know.\" \n\n\"So are you two dating? Engaged? What?\" Chloe asked bluntly.\n\nAshley laughed, \"Definitely not engaged. Um, dating might not be quite the word, because this is...extremely new. We're just taking things one day at a time right now.\" \n\nBrenda piped up. \"Ashley, while this might feel new or be a new aspect of your relationship with JJ, I don't think it's new to us. It was pretty clear, even as kids, that you and JJ were closer than the rest of us were. While we may not have envisioned that you and she would link up romantically, I feel like it was obvious that you two would have a deeper, closer friendship together than any of us would with her. \n\nSarah nodded, her screen reflected on her glasses for a second. \"I agree with Brenda. You were the one who brought her out of her shell and you two have this bond from that. We can't compete with that, and I don't want to. I'm happy to be your friend, to be her friend. I love that your two were, are, so close.\" \n\nAshley blinked, speechless. She hadn't expected this. What do you say when your best friends accept that you have a stronger connection to someone than you do to them?\n\n\"For the record, I thought you two might fuck at some point, but only after puberty started.\" Chloe sipped her lemonade. \n\nSarah clucked her tongue at Chloe's crass language, while Rebecca snickered. \"So, you can keep the details to yourself, but I'm curious. How good is JJ at kissing? Like, scale of one to ten with one being you'd rather kiss a fish.\" The redhead asked, her own girlfriend poking her in the ribs, either for being nosy or being curious about another woman's kissing skills.\n\nAshley blushed as she remembered JJ's kisses, a pretty big smile spreading across her face. \"I'd say she's solidly a 45 when it comes to kissing.\"\n\nThere were giggles, hoots, and Chloe sent a shrill whistle. \"Damn. Why couldn't I have been the one to help her out of her shy little shell?\" the pale blonde lamented playfully."
    ],
    "authorname": "DarkFang",
    "tags": [
        "lesbian",
        "lesbian sex"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/jj-and-ashley-ch-05"
}
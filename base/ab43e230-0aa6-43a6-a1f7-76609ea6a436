{
    "title": "Two Hundred Dollars Ch. 24",
    "pages": [
        "It took Bailey three hours to realize what had happened. \n\nTo be fair to her, she experienced in those few hours so much discomfort just from sitting down, the nagging sensation of having forgotten something important had registered on the needle of her sensations. \n\nBut, sometime around two o'clock in the afternoon, she noted that her underwear felt a bit funny. She put it down to the fact that she'd worn it since yesterday and decided it high time to change. \n\nKent has a picture of me now, Bailey thought, seeing herself in the mirror, all stretched out on his bed. \n\nThe notion didn't worry her much, but left a slight tingle in her spine, the herald of a nascent adrenaline rush, ready to spike at a moment's notice. \n\nNo need to panic, she reminded herself, he's proved himself more than trustworthy. Look at this morning, for example... \n\nHer thoughts trailed off as she slipped off her transparent panties and felt the strange sensation between her lips. \n\nI'm still a bit wet from... oh, fuck! \n\nBailey tried to recall the sequence of events from the moment Kent had handed her phone back to her, but the whole episode had blurred into a continuous stream of sunlit images of herself and her own stunned amazement. \n\nI just... just left? What the hell is wrong with me? \n\nShe knew she'd felt horny, felt her heart pumping her blood hard and that funny whooshing in her ears she'd get when Kent really got to her. At Laura's they'd had to hold back to spare Laura another wave of religiously inspired guilt, but she'd figured Kent would want to do something once they got back home. \n\nAnd what happened? Bailey looked back in wonder. I got stunned by my own pictures and forgot everything else. \n\nShe shook her head in disbelief, hoping that she hadn't offended Kent. \n\nI sat in his lap. I felt how ready he was. Oh, god, he must think I'm such a twit. \n\nA part of her wanted to get up and walk over to his room, try to pick up where they'd left off, but the largest portion of her brain knew how ashamed she'd feel to admit what she'd done. What would Kent do? Laugh at her? \n\nIt's not like I can apologize. That's just not what we do. \n\nShe heard Kent's door open down the hallway, listened to his boots on the floor, heading away. Shortly, they clumped up the stairs and he left the apartment. \n\nI guess I'll take a shower. No use putting on clean underwear without it. \n\n============================= \n\nKent spent most of Sunday, when his mind didn't dwell on homework, wondering about Bailey. She'd reacted to her pictures in the strangest way, as if she'd never known the power of her own body. \n\nChrist, Bai. I'm paying two hundred dollars because you're attractive, but you're surprised that you're attractive? \n\nHe'd mentally recorded the open-mouthed shock of her facial expression in his most persistent and reliable memory, far more reliable than that provided by any storage available in the cloud. Kent decided he'd done her a good turn, at least, providing her with something better than the dry recordings of their adventures she'd taken thus far. \n\nIt's mostly the sunlight though. Artificial light just doesn't do human bodies justice. \n\nWhen his mind didn't cycle through Saturday morning's photography session, it switched over to Laura and her mental issues. \n\nHe couldn't quite countenance the idea of punishing Laura on behalf of her religion. Sure, when the wood went hard and the naked girl told him how badly she deserved it, Kent knew he'd give her the spankings she needed. But another part of him said that going along with her weird punishment scheme didn't make her any better. \n\nUgh, but you know if she bends over for you again, you'll slap her butt just like you did this morning. \n\nThe key to acting properly, reliable sources had told him, lay in deciding ahead of time on the correct behaviour and modelling it in your head. That made it much more likely you'd do the right thing in the heat of the moment. \n\nBut what's the right thing here? Laura's a grown-up, really. She's definitely consenting and it's not like she's actually ill. So what if she needs a spanking to make her guilt go away? \n\nHe regretted the university didn't have a chapter in their Ethics class for this sort of thing. They'd learned much on the subject of consent, and the importance of making all information available to all parties. \n\n\"Hey,\" Bailey popped her head in his doorway and Kent turned away from the screen full of homework he hadn't managed to maintain a focus on. \n\n\"What's up?\" \n\n\"Wonderin' how you are,\" Bailey leaned her breastbone against his door frame, right next to the white board. \n\n\"Good, you?\" \n\nBailey shrugged, \"You look troubled, actually.\" \n\n\"Yeah,\" Kent tilted his head toward the ceiling in admission, \"I'm wondering if it's really right to keep spanking Laura. I don't want to be her... um...\" \n\n\"Angel of Atonement?\" Bailey filled in with a smile. \n\n\"Colourful,\" Kent acknowledged. \"But, yeah.\" \n\n\"I've never seen her this happy,\" Bailey pointed out, \"She's actually giddy, sometimes, talking about all this. I've known her a long time.\" \n\n\"Fair enough,\" he said. \"It's just a bit creepy.\" \n\nBailey nodded and came into his room, standing in the middle of the open space with her arms folded. \n\n\"Think of it this way,\" she said, staring at the ceiling. \n\nKent waited as Bailey collected her thoughts. \n\n\"It's like a game,\" she spoke her words not to him, but with a hollow voice, as if narrating for someone watching from a little camera hidden in the ceiling's light fixture, \"the role you're playing makes Laura feel right. So you keep playing it as long as you both enjoy it, unless you think it's really, honestly bad for her.\" \n\n\"Until I feel like we're just taking advantage of her?\" \n\n\"I assure you,\" Bailey said, \"that's not happening here.\" \n\n\"You know her better than I do,\" Kent admitted. \n\nBailey squared off at him again, changing the entire tone in the room, \"You ready?\" \n\n\"You sure?\" Kent's eyes widened, \"you were pretty red yesterday.\" \n\n\"That's what makes this offer so entertaining,\" she said, marching over to the board, \"Only a tiny bit different.\" \n\nBailey carefully put five ticks on the board. \n\nWhat is she thinking? Fifteen completely naked? She might be able to take that, but I don't know. \n\n\"Five sets,\" she patted her denim covered butt as she turned, \"Over top. With inspections.\" \n\n\"Inspections? Plural?\" Kent asked, \"How many?\" \n\n\"One at the beginning,\" she said, \"and one after every dollar.\" \n\n\"Forty-four spankings,\" he pointed out. \n\n\"Still good at math, then,\" Bailey replied dryly. \n\n\"Sounds like a deal,\" Kent said. \"That's up to you anyway.\" \n\n\"Right,\" Bailey said. \"But the, um, poses are up to you.\" \n\nKent felt blood rushing all over his body as the reality of their deal flowed through his brain, the realization striking him that he could tell her how to pose six different ways. \n\n\"Let's start easy, then,\" Kent instructed her quickly, pulling out the little stepping stool from under his bed, \"Strip and bend over the bed.\" \n\n\"Hm,\" Bailey let out an unimpressed half-sigh and unbuttoned her jeans before stepping up on the stool and sliding her jeans and panties down to her knees before bending over the bed. \n\nKent stood behind her, reaching out with his hands to 'inspect' her. \n\nThat's part of it. If I don't do that, it's like I'm not trying to collect on everything owed. \n\nBright pink flesh greeted him every where he touched, though he felt delighted that the darkest red patches had already faded away. It gave him lots of space to work with. \n\n\"Forty four,\" he said. \"Hope you can managed all that.\" \n\n\"I'll be fine,\" Bailey assured him and taking his comment as his admission the first inspection had ended, stood up straight and pulled up her pants. \n\nAfter buttoning her jeans, she leaned over the bed and spoke over her shoulder, \"This is comfy.\" \n\n\"Just like this?\" \n\n\"Uh-huh.\" \n\nNot a great deal of creativity on her part, but I guess I started it off boring, too, Kent realized as he started whacking away at her right cheek, the low, thick tones of his palm striking denim echoing around the room. We'll get better. \n\nBailey's counting voice came through so calmly that Kent kept his strikes focused, tightening them in the central area of her right cheek. He stopped when she called out, \"Eight!\" \n\nShe turned her head to look at him quizzically. \n\n\"One group of eight,\" he explained, \"And four groups of nine, right?\" \n\nBailey shrugged and stood up, waiting expectantly. \n\n\"On your side,\" he said, \"Facing the wall.\" \n\nWith a tentative nod of approval, she turned her back on him and laid down with her head to his right. She undid her jeans and wiggled out of them, revealing a snug, athletic pair of blue panties. She slid these out of the way to bare her cheeks to him. \n\n\"How do I look?\" \n\n\"The right one is definitely redder already.\" \n\n\"It was redder before,\" Bailey pointed out, tilting her hips a little to lift that cheek away from the sheets. \n\n\"Well, now it's substantially redder,\" he corrected himself. \n\nKent looked at the way the light from the window lit Bailey's backside and set himself a course. Bailey, seeing the gleam in his eye, narrowed her eyes and glared at him. \n\n\"What are you up to?\" she asked cautiously. \n\n\"You'll see.\" \n\nBailey pulled her panties back up and then her jeans, informing Kent, \"I'll do the next set Laura's way.\" \n\n\"Perfect,\" he said, \"As long as I can get at both cheeks.\" \n\nOnce she'd buttoned up, Bailey assumed the pose Laura had first shown them so many weeks ago, sticking her butt out while resting her hands on her knees. \n\nAlright, Kent took a breath and focused, taking a position on Bailey's left so his right hand had a good angle for every important part of her. Fortunately, I get several chances to take a look at her ass and make sure I've got this right. \n\nHis next strike landed on her left cheek, a little left of centre. \n\n\"Nine,\" she announced patiently. \n\nKent landed two more strikes on the left cheek, perfectly centre. \n\n\"Ooh,\" Bailey cried out in surprise. \"Ten, eleven.\" \n\nHe moved over the inside of her left cheek and landed four strikes there in rapid succession. \n\n\"Ha!\" Bailey yelled out. \"Twelve, thirteen, fourteen... FIFTEEN!\" \n\n============================= \n\nBailey turned around to glare at Kent, about to shout some curse at him, but choked on her words as she caught the intensity of his own glare, concentrated entirely on her butt. \n\nWhat the fuck is he up to? \n\nBefore she could think of anything to say, Kent raised his hand struck the outside of her right cheek, twice in succession. \n\nBailey gulped and counted out, \"Sixteen and seventeen.\" \n\n\"Alright,\" Kent said, turning an analytical look her way, \"Up on the bed, hands and knees.\" \n\nHe really does have a plan, she realized, mechanically crawling up on the bed, look at the focus in his eyes. \n\nShe felt a bit like she had when he'd taken all those pictures the morning before, as if he'd decided to use her body for something, and taken away little pieces of her soul with each image. Now, his clinical look did the same thing, slicing and dicing her for a critical purpose to which Bailey had no clue. Her wonder now outstripping any anxiety about nudity, she knelt on his bed, pushed her jeans and underwear out of the way, and bent over like he'd asked. \n\nI'm spreading my legs enough he can see my pussy from there, but I bet he doesn't even care. \n\nInstead, she felt his finger tracing lines across her ass, left to right, squeezing almost to the point of pinching, here and there. The strange detachment she'd seen in his eyes continued in his touch. \n\nNot emotionless, really, Bailey decided, it's just that one step above the pure lust I'm feeling right now. \n\n\"Alright,\" Kent took his hands away. \n\nShe buttoned up her jeans again and stretched out across his bed on her stomach, keeping her body as straight as possible. \n\n\"How's this?\" she asked. \n\n\"Works for me.\" \n\nAlthough she'd put her right cheek farthest away from him, perhaps subconsciously trying to protect it, he concentrated all of her spankings on that side, pounding away the hardest on her outside of her cheek. \n\n\"Twenty five and twenty six,\" she sucked air through her teeth. \n\n\"You sure you can do all five sets?\" Kent asked, an honest note of worry in his voice. \n\n\"I'll be fine,\" she scolded him, lifting her chest off his bed so she could look at him. \"How do you want me?\" \n\n\"Right,\" Kent's concern melted away as she pointed over at head of the bed where the sunlight still his the wall. \"Stand up there, in the light, so I can see you properly.\" \n\n\"Oh.\" \n\nShe remembered the sunlight, that powerful beam of magic that had lit her body. As Bailey stood at the head of the bed and pulled down her jeans, she felt the warmth of the sunlight on her cheeks, and stuck her hips out. Locking her knees outward to keep her pants from falling down, she laid her hands against the wall. \n\nThe bed sank a little as Kent knelt down behind her. Both of his hands took hold of her cheeks, squeezing hard, before he backed off and she felt fingertips tracing vertical lines down from her waist to her thighs. Every time he made those lines, she did her best to suppress her shivers, but her body moved of its own volition. Her hips, of their own accord, pushed backwards, willing his fingers to delve between and under her cheeks. \n\nTouch me, already, you jackass. \n\nBut Kent backed off and said, \"Alright.\" \n\nBailey inhaled sharply and fell to her knees, bouncing slightly on the bed, and pushed away from the wall, using her hands to brace herself as she exposed her denim clad cheeks. If she arched her back just right, it gave her about ninety degrees of bend at the hips. That should suffice for whatever plan Kent had in motion. \n\nThe spankings started landing with so little warning, she fell behind in the count and had to rush to catch up by the time she got to, \"Thirty!\" \n\nKent, she noticed, had a very specific pattern. His strikes were landing on her cheek in very precise, focused locations, picking away at her flesh piece by piece, even as he hammered harder on the sorest, rightmost portion of her ass. \n\n\"Thirty-five!\" she announced, stunned by the rapidity of his onslaught. \"What the hell?\" \n\n\"Almost done,\" Kent's voice came out as somewhere between a warning and a promise. \n\n\"Uh-huh,\" Bailey twisted her mouth as she rubbed her rear. \"Need another look?\" \n\n\"That's the deal,\" Kent said. \"On your back this time. Legs straight up.\" \n\nBailey gulped, wishing she hadn't pushed him. They'd done this position before but she had to think about how she wanted to get into it. Putting her feet on the floor, she undid her jeans and pushed them down to her knees, leaving her panties in place. Then she sat back, rolled onto her back on the bed and, only when her she'd gotten her legs up, did she finally push her panties out of the way. \n\nShe felt her heart pounding as Kent knelt on the floor, and pushed at her thighs to lift her hips up and get a good look underneath. \n\n\"How much can you see?\" she tried to keep the quiver of your voice. \n\nKent paused in his inspections. \"A lot?\" \n\n\"What's 'a lot'?\" \n\n\"Well,\" he drawled, and his fingers slid down her thighs toward her butt. \"I can show you by touching you.\" \n\n\"Okay,\" she breathed, and her body instantly tingled as his fingers gently stroked her hair, her lips, pushing gently into the skin of her vulva. \n\n\"Oh!\" Bailey squeaked, twitching and jumping as he came close to her entrance. \n\nKent's hand moved away from her tender areas, \"About that much.\" \n\nBailey inhaled, \"I see.\" \n\nHe had returned to his examination by then, touching and stroking her reddened cheeks, pushing her up higher to get a closer look at what flesh lay against the sheets. She barely noticed any of this however, because the play of his breath across her hair overrode all other sensations. \n\n\"All right,\" Kent gave her a last squeeze. \"Let's do the last nine. You ready?\" \n\nEagerly, and without thinking, Bailey rolled to her left and planted her feet on the floor before pulling her clothes back into place. \n\n\"Here,\" she said, and put her feet back on the stool. \"I don't know what you're doing, but this should give a good angle.\" \n\nThe pain of his spankings had crossed some threshold where it no longer mattered to her. She wanted to get to the end of it and this position would get her there the fastest. \n\nHe started slapping her ass right away, six quick shots to her right cheek followed by two to the left. \n\n\"... forty two, forty three ...\" Bailey counted, waiting for the last one. \n\nKent laid his hand directly on the centre of both her cheeks, his palm stretching across the seam of her jeans. Understanding what he wanted, she squeezed her legs together as tightly as she could. \n\nHere it comes. \n\nHis hand rushed through the air and pounded his last strike at the insides of both cheeks. \n\n\"Forty four, Christ,\" she exclaimed, standing up and grabbing her rear. \"How do you want for the last 'inspection'?\" \n\n\"If you want a picture,\" Kent said, pointing at the head of his bed, \"Stand in the sunlight. But I'd have you over my lap for the end.\" \n\n\"Alright,\" she said, and fiddled with her phone before handing it to him. \"Here.\" \n\nI wonder what the hell he did to my butt. \n\nShe climbed up on his bed again and turned her back before unbuttoning her jeans and dropping them and her panties to the mattress. \n\n\"Get in close,\" she reminded him, \"I don't want my clothes in the picture.\" \n\nShe lifted her shirt up past her midriff and Kent moved in to take a few shots. \n\n\"That should do it,\" he said, holding up the phone and sitting on the edge of the bed. \n\nBailey knelt down, turned away from him, and then slid across his lap. Kent grabbed her cheeks almost instantly, squeezing and kneading her muscles like he always did. \n\nMy god, his hands, she felt a whimper building inside her and let her legs go soft so they'd naturally spread apart. \n\nShe switched the phone into display mode and caught the first picture of her ass. \n\n\"How did you do that?\" she blurted out before she realized it for a stupid question. \n\nIt's perfectly obvious how he did it, idiot, she chided herself for sounding like a child, you gave him forty four spankings and all the viewing time he needed to get it right. \n\nThrough denim, he probably couldn't have made the highly defined patterns he'd made before. Instead, he'd blended the colour of her cheeks from a pale pink on the leftmost part of her left cheek to a deep, angry red on the outside of her right cheek. He'd spent each 'inspection' going over her ass super carefully for the expressed purpose of getting the coloration smooth all the way across her cheeks. \n\n\"Skillz,\" Kent replied calmly, his hands sliding down to massage the insides of her thighs. \n\n\"This is really impressive,\" she complimented him, spreading her legs farther and lifting her hips. \n\n\"This how you like it?\" Kent asked, sliding his right hand under her body and cupping her vulva, his middle finger nudging gently at the wetness between her lips. \n\n\"Oh god, yes,\" she muttered, felt her brain melting even as she added, \"your other hand...\" \n\nOh, good, he knows what I mean, Bailey thought, as his left hand found her lower back and pushed her into his right hand. Perfect. ",
        "She pushed against the resistance of his left hand, grunting to let him know how hard he should push. Kent locked his arm down, shoving her hips backward, his middle finger delving between her lips and pushing upward on her clit. \n\nBailey shivered, trying her best to hold her orgasm, hoping to enjoy the moment, but she could only see the sunlit picture of her own rosy, red ass cheeks glowing at her from her phone and she only felt Kent's hand squeezing her body together, holding her fast in place, controlling her. \n\nA high pitched squeak came out of her lungs, growing louder as ecstasy approached. \n\nThere is nothing better in my life than this feeling right now. \n\nBailey bucked as hard as she could against Kent's strength, but he didn't relent as he drove her through her orgasm and out the other end. \n\nI'm coming and he's... not... stopping. \n\n\"Kent,\" she gasped, feeling all of her air vacate her lungs. \n\nHe's still... pushing... I can't. \n\nBailey sucked in air, desperate to let him know that her moment had passed and he ought to- \n\n\"Oh god!\" she screeched. \"Again?!\" \n\nHer body convulsed anew, helplessly locked in place against Kent and the surface of his bed. \n\nCan't escape. What happens now? \n\nWhen the second wave of pulses stopped, she felt herself losing control of her muscles. Bailey's legs and arms went limp and, finally, Kent relented. \n\nShivering, she flattened her body back out on his lap. \n\n============================= \n\nWell, that looked spectacular. \n\nUnsure of how to proceed after the half orgasm, half seizure he'd just witnessed, Kent rubbed gentle circles over Bailey's lower back while she hyperventilated. \n\n\"Kent,\" she began, but found she'd spoken to early and needed several more breaths to recover. \n\n\"No rush, Bai,\" he reminded her, even while the weight of her body pressed down on his erection. \n\n\"You, uh,\" she whispered, still unable to rise. \"You. I think you broke me.\" \n\n\"You still look whole,\" he laughed. \n\nBailey let out a small laugh too, finally able to turn and give him a weary look, dozens of strands of her red-brown hair tacked to her face with sweat. Her hips starting moving again, too, life visibly returning to her muscles. \n\n\"Okay,\" she whispered, slipping down to the floor, her eyes bleary as she knelt in front of him. \"Pants.\" \n\n\"Pants?\" \n\n\"Pants,\" she unbuttoned his jeans, unhooked his belt and savagely pulled down both jeans and underwear. \n\n\"Yow!\" Kent shouted, \"Easy.\" \n\n\"Uh-huh,\" she rolled her eyes before turning to the erection before her. \n\nKent watched his vision double as his eyes crossed when Bailey leaned over and kissed the tip of his erection. \n\n\"We're good now,\" she smirked, and crawled back up into his lap, sideways as she had before. \n\n\"What are you-?\" Kent looked at the unorthodox position and wondered if she planned to take a few more spankings. \n\nIt took a little doing, but Bailey managed close her thighs around his erection, catching him in the triangle between her thighs and her genitals, the swollen head of his cock sticking up from between her cheeks. \n\nTrapped against her dripping, wet pussy, Kent realized, as Bailey started pumping him by clenching her thighs, forcing the side of his shaft into her lips. Everything is wet in there. \n\nHe thrust against her, little though he could, watching those red cheeks pulse and twitch with each convulsion around his cock. \n\n\"Oh, god, Bai.\" \n\n\"Uh-huh?\" she moaned. \"Come on...\" \n\n\"Bai...\" \n\n\"Gimme, gimme!\" \n\nKent started to grunt and let out a short roar of triumph as his orgasm struck, a fountain springing into the air to splatter across Bailey's flesh, from one cheek to the other. \n\n\"Ooh!\" Bailey squeaked, pulsing harder against him. \n\nVolley after volley semen sprayed about, white droplets and short streaks created by the harsh jerking of Bailey's muscles. In short order, his juice had splattered her from the small of her back down to her thighs, dripping between her ass cheeks and down their outsides. \n\n\"Quick, quick!\" Bailey urged, shaking Kent with her panic. \n\n\"What?\" \n\nKeeping her cheeks clenched, she pushed her phone into Kent's hands. \n\n\"But my cock-\" \n\n\"Is going to get soft, so hurry!\" she urged again. \n\n\"Oh, okay.\" \n\nToo shocked to argue, he held the phone over his right shoulder, as far away as he could get, leaned back and snapped several pictures. He couldn't really see what he'd shot though, so flipped the camera and around went to selfie mode. The picture would come out reversed and lower-res, but at least he'd get a proper framing. \n\n\"Okay, okay,\" he breathed. \"Got it for sure.\" \n\n\"Oh, god,\" Bailey whispered, \"It's dripping down everywhere.\" \n\n\"That's what it does, yeah.\" \n\nWhat got into Bai? This is really weird. Awesome. But weird. \n\n\"One more pic,\" she demanded, carefully extricating his dwindling erection from thighs, \"while we have sunlight.\" \n\n\"You'll drip come all over the-\" \n\n\"Then hurry!\" Bailey climbed up on his bed and stood with her back to him, her backside shining in the sunlight. \n\n\"Wow,\" Kent remarked, lining up the shot, \"It really kinda glows in the sunlight.\" \n\n\"You got it?\" \n\n\"Stick your butt out a little.\" \n\n\"Like this?\" \n\n\"Yeah, good,\" Kent said, \"Got it. Good.\" \n\n\"Alright,\" she said, \"I need um ... some tissue or something.\" \n\n\"Here,\" he tossed her the cotton boxers she's so ruthlessly ripped down his body just minutes earlier. \n\n\"Thanks.\" \n\nKent watched as she wiped and scrubbed his semen off her back, her ass cheeks and her thighs. \n\nIt really dripped in there, he noted as she delicately cleaned off the inside of her cheeks. \n\nWhen she finished, Bailey pushed him on his back and laid next to him, propped up on her elbow. \n\n\"You want that one?\" she asked. \n\n\"One what?\" \n\n\"The picture,\" she jerked her chin at where she'd stood a moment before. \n\n\"With come on you?\" \n\n\"Uh-huh.\" \n\n\"Ma-a-aybe,\" he drawled out. \n\n\"One dollar,\" Bailey prodded with a smirk. \n\n\"Deal,\" he agreed without thinking. \n\n\"I'll crop it and get it to you later, kay?\" \n\n\"Sure, Bai.\" \n\nA moment later, she'd hopped out of his bed and refastened her jeans. \n\nAm I falling asleep, or is she just really fast? \n\nWith that, Bailey disappeared out of his room. \n\n============================= \n\n\"Kent, that you?\" Bailey called out as he came down the stairs that Monday afternoon. \n\n\"Yo.\" \n\n\"Got your pic if you still want it.\" \n\n\"Damn right.\" \n\nHe hadn't marked the extra dollar off the white board yet, awaiting the handover of the image in question. Bailey rolled her chair up to the doorway of her bedroom, stuck her head out into the hallway and waved her phone at him. \n\n\"You sure about this?\" he asked. \n\n\"I trust you,\" Bailey rolled her eyes. \n\nKent ditched his gloves and fished his phone out of his pocket as Bailey walked down the hallway toward him. With a few quick taps, they transferred the image to his phone and Kent opened it. Reddened cheeks, dotted with white droplets, spread before him. \n\n\"Good cropping job,\" Kent noted. \n\n\"I fixed up the colour a bit, too,\" Bailey pointed out, \"brought out the red a little more.\" \n\n\"Nice,\" he complimented. \n\nBailey ticked her chin up, indicating the white board, which Kent promptly wiped and updated to fifty two dollars. \n\n\"We have some time,\" she said, letting her voice trail off suggestively. \"My lab isn't until two thirty.\" \n\n\"Sure you can take any more?\" Kent waved the picture in front of her face dubiously. \"I tagged you pretty good yesterday.\" \n\nBailey blew air up into her hair dismissively. \n\n\"My left side is fine,\" she said. \"Just do them all there.\" \n\n\"Really?\" \n\nBailey walked up to Kent, pressed her chest against his. \"I'll do three dollars, naked. And you can have one extra spanking if you do them all on the left.\" \n\nThe strong scent of a floral perfume assaulted his nostrils, soaking him in Essence of Bailey. \n\n\"Just one extra?\" he asked softly. \n\n\"Seems fair,\" she pouted. \"one spanking when I'm naked is worth about three when I'm clothed, right?\" \n\n\"So?\" Kent acknowledged the approximated arithmetic with a jog of his head. \n\n\"And it's normally one extra spanking per set of ten when I tell you where to spank me.\" \n\n\"Oh, I see,\" Kent rolled his eyes doubtfully, \"So the three spankings I should get for going easy on you turn into one because you're naked?\" \n\n\"Yeah,\" Bailey firmed up, keeping the pressure of her breasts against his body. \n\n\"I'll agree,\" Kent paused, \"if I get to undress you.\" \n\nBailey twisted her lips and stepped back from him, took several breaths, and walked over to the white board. The marker thumped three times before she closed the door and walked back to the centre of the room. \n\n\"Knock yourself out,\" she raised her arms in the air and waited. \n\nWhat will make this hardest on you? Kent wondered. Clearly I have to do it slowly, but in what order? \n\nPondering, he sat down in the desk chair and looked her over. \n\n\"Excuse me?\" Bailey sounded offended, her fisted hands going to her hips. \n\n\"Just thinking,\" Kent replied without meeting her eyes, instead letting his gaze wonder upward from her toes. \n\nWhen, after some casual leering, he reached her breasts, Bailey twitched. \n\nThat is the part she hid the longest. Duh. \n\nKent stood up and looked her in the eyes, \"Ready?\" \n\n\"Yes,\" Bailey hissed out an exasperated sigh. \"While I'm young.\" \n\nHe reached for the hem of her sweater and lifted it up past her shoulders, forcing her to raise her arms. With her face temporarily covered, he got a good look at the white cotton bra she wore underneath. \n\nSnug, well fitting and simple, Kent thought, nothing fancy, but very clean and sharp. \n\nWith a wiggle, the shirt came off her arms and their eyes met with a sudden awkwardness, as if they'd both caught the other staring. Bailey lowered her arms in embarrassment and Kent looked aside, pretending to assess the straps of her bra as he reached both arms around her back. He leaned in close, breathing on the side of her neck and over her bare shoulder, acting as if he needed to see the clasp in order to unlatch it. Bailey leaned into him, her lips touching wetly on the side of his neck, making Kent wonder if she meant to bite him. \n\nThe bra came undone easily in his hands and Kent pulled the straps forward off her shoulders and down her arms. He looked down between their bodies at her pert, little breasts and their tiny, hardened red nipples. \n\n\"Not like you haven't seen them before,\" Bailey whispered, keeping her eyes low and speaking into his chest. \n\n\"Always a treat, though.\" \n\nBailey breathed out a short laugh, then sucked in her breath as he went for her jeans. He knelt before her and pulled them down and off her feet. \n\nWhite underwear too, he noted the similarity in both colour and fit, like an adorable little angel. \n\n\"It's all very cute,\" Kent told her, moving his head around to view her panties from different angles. \n\n\"What is?\" Bailey's face reddened. \n\n\"The matching panties and bra,\" he said. \"Almost makes me wish I hadn't take your bra off so soon.\" \n\n\"Aw, poor you,\" Bailey scraped his ear drums with sarcasm. \n\nWith a twist of his lips Kent grabbed the waist band of her panties on both sides and pulled them swiftly down to the floor. \n\n\"Oh!\" Bailey let out a squeak of surprise but quickly recovered her cynicism, \"In a hurry, are we?\" \n\n\"I'm not the one blowing through half my debt in a week,\" he pointed out as he stood up. \"How you want your spankings?\" \n\nBailey turned and ticked her chin at the bed. \"Over there.\" \n\n\"How?\" \n\n\"Like this,\" Bailey said and climbed on the bed. \n\nShe mimicked her pose from the day before, kneeling on the right side of the bed and stretching her body out to his left while leaving her cheeks up in the air. It gave him a good angle on her left cheek. \n\n\"Lift your chest a little,\" he suggested. \n\n\"What?\" \n\n\"So I can see you while I'm spanking you, right?\" \n\n\"You need to see my br-breasts?\" she turned her head. \n\nShe stammered on the word, there, Kent noted, must have hit the mark stripping her top off first. \n\n\"I'm pretty sure that's the rule, yeah.\" \n\nBailey lifted up her chest just enough that her nipples cleared the sheets. \n\n\"Good girl,\" Kent drawled. \n\n\"Not lately, I'm not,\" Bailey turned away with a frown. \"Get on with it.\" \n\n\"There isn't just one spectrum of good and bad,\" Kent laid his hand on her left cheek. \n\n\"Do we need n-dimensional geometry?\" Bailey shivered under the gentle touch of his hand. \"How many ways are there to be good and bad?\" \n\n\"Well...\" Kent trailed off and gave Bailey her first spanking. \n\n============================= \n\n\"One,\" Bailey called out. \n\n\"There's the kind of good and bad your friend worries about,\" Kent pointed out, rubbing delicious circles into her cheek. \n\n\"Where some old religious douches make up a bunch of rules?\" \n\nThe second spanking struck the centre of her left cheek. \n\n\"Two!\" \n\n\"Yeah,\" Kent agreed, \"Somebody made a rule to hold together a society a couple thousand years ago and people are still getting judged by it.\" \n\nWhack! \n\n\"Three,\" she said. \"I'd rather judge good and bad by whether I'm helping or hurting people.\" \n\nHis palm cracked off the lowest part of her ass cheek. \n\n\"Four.\" \n\n\"I'm hurting you right now,\" Kent pointed out helpfully. \"And having fun doing it.\" \n\n\"And I agreed to it,\" Bailey rejoined. \"So it's fine.\" \n\nA louder crack echoed off the side of her cheek. \n\n\"Laura says she's fine with it, too,\" she added. \"And that's five.\" \n\n\"Yeah,\" Kent sounded worried. \"That's what she says, but I still wonder if we're messing her up.\" \n\nHere we go again. \n\n\"She's a grown up,\" Bailey sighed loudly. \"We talk about it and I assure you-\" \n\nIn the middle of her sentence, Kent snapped his hand off her cheek much harder than before. \n\nOuch. I had that coming. Remind me not to roll my eyes at him while I'm bent over. \n\n\"Six, Christ,\" Bailey cursed. \"Those are all the kinds of good and bad I know.\" \n\n\"Quality,\" Kent added. \"An object can be good or bad in a way that has nothing to do with morality.\" \n\nWhy are we going over our Ethics class? \n\n\"Sure, but what's that have to do with us?\" \n\nKent slapped her ass cheek again, low and hard, but not punishingly hard. \n\n\"I'm giving you a pretty good spanking, for instance,\" he laughed. \n\n\"Seven,\" Bailey rolled her eyes where he couldn't see. \"Gee, thanks.\" \n\nHe spanked her again, getting the centre of her cheek. \n\n\"Eight,\" she added, turning to look at Kent. \"I just don't understand why we're talking about this.\" \n\n\"Well,\" Kent inhaled, absentmindedly slapping her cheek again. \n\n\"Nine.\" \n\n\"It seems to me that you're doing this because you think it's a good way to save money,\" Kent said. \"You're finding another way to pay your debt and you don't see anything wrong with it.\" \n\n\"I don't,\" Bailey blurted out without taking a moment to think about it. \"Why should I?\" \n\n\"You shouldn't,\" Kent shrugged one shoulder as his eyes went to ceiling. \"But your friend Laur-\" \n\n\"I think she's your friend now, too,\" Bailey interjected. \n\n\"Okay, fine,\" Kent dismissed the correction. \"Our friend Laura.\" \n\n\"What about her?\" \n\n\"You're doing this because you're good,\" Kent explained. \"She's doing this because she thinks she's bad.\" \n\nHoly shit, Bailey turned to stare at the blank wall in front of her, I never realized that Laur- \n\nAt that moment of stark revelation, Kent chose to strike, hitting the sorest part of her seat with a final, snapping assault. \n\n\"Ten!\" she screeched back at him. \"Jackass.\""
    ],
    "authorname": "xtorch",
    "tags": [
        "debt",
        "ejaculation",
        "inspection",
        "money",
        "payment",
        "picture",
        "spank",
        "spanking",
        "fetish"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/two-hundred-dollars-ch-24"
}
{
    "title": "My First Year in College Ch. 16",
    "pages": [
        "Tyler is a freshman student at Creepside College. Gay and closeted, he has some troubles controlling his urges surrounded by frat guys, sexy professors, his hot brother and most importantly, his stunning straight roommate: Austin. The story is divided into 2 main parts - semester 1 (ch. 1 to ch 12) - semester 2 (ch. 13 to ch. 24).\n\nIn the previous chapters, Tyler promised himself he would stop obsessing other straight guys. But his resolution did not last long as he played with a passed-out Austin, and even tried to catfish him. Things took a turn when Austin found out he was talking to a catfish!\n\n********\n\nChapter 16: Doing a Martin\n\n\"I ALWAYS KNEW YOU WERE A FAG.\"\n\nMy mind went all over the place. My life was over. Austin knew! He \"always\" knew. I started to sob like a little child.\n\nDid Ryan tell him something? About me being gay? They were in a car for hours together, maybe he would have mentioned walking on me jerking-off to gay porn? No, he would not have... Or maybe Ryan had mentioned \"Anna\"'s profile? And Austin would have matched the pieces of the puzzle together? No, Mallory was there too. There was no way Ryan could talk about his secret Instagram account in front of her. But what if he did when they were alone? Or maybe, Austin just knew I was gay, not from Ryan but from the staring... the creepy stalking, or worse... from the touching... Maybe he remembered New Year's Eve? But then, how could he know Anna was me? Did I say something in the conversation? I almost betrayed myself several times while I was catfishing Ryan... Shit! I could not go through the conversation again to check because Austin blocked Anna's profile. Maybe it had something to do with the IP addresses?\n\n\"I ALWAYS KNEW YOU WERE A FAG.\"\n\nI was shaking.\n\nHe knew all along.\n\nI needed to do something. Anything.\n\nI picked up my phone shaking and called Austin. Either that or I would drive myself crazy.\n\nTo say what? Sorry I tried to catfish you? Sorry I touched you in your sleep? I was already regretting calling him when he answered:\n\n\"Yo mate! You could not wait until tomorrow to talk to me?\"\n\nI was crying over the phone but could not verbalize a word. He did not seem mad. He seemed awfully normal actually.\n\n\"Bro what's going on? Hello? Ty, Are you Ok?\" He sounded more concerned now.\n\n\"Yeah... I...\"\n\n\"What is it?\"\n\nHe seemed surprised that I was crying. The man just called me a fag. How could he act so normally?\n\nThen I realized it. He called Anna a fag, the fake profile. Not me.\n\nI hung up.\n\nWhen I read the phrase \"I ALWAYS KNEW YOU WERE A FAG\" directed at me, I instantly thought that he had recognized me. The fag in Austin's life. The one who had been obsessing over him for months. But maybe...\n\nI went back to the two videos I had just sent. OH FUCK! That was it! In one of the videos, Sofia/Anna had red nails, in the other, she had blue nails and a different haircut. I pretended the two videos were live! Of course, Austin realized I was a catfish at that moment; besides, he was probably suspicious since the very beginning -- this is why he kept asking for a live cam session!\n\nI was a total fool.\n\nAustin caught a catfish. He did not catch me. At least... not yet! I deleted Anna's account immediately. Austin tried to call me several times. Damn, now this phone call, crying, it was the most suspicious thing ever.\n\nI did not answer, he texted me:\n\n\"Man, answer the damn phone!! I'm worried. What's going on?!\"\n\nI collected myself as best as I could and called him back.\n\n\"I'm sorry, Sofia and I, it's already over. She did not want anyone to know about us and I wanted to have a more serious thing... She just ended it.\"\n\nThe lie came out without thinking it through but it turned out to be the most perfect lie, it was explaining my fake relationship with Sofia, ending it before the new semester started and giving me a reason to cry over the phone.\n\n\"That bitch!\" he said. Maybe I should specify, he was not talking about me.\n\nI said I needed to be alone and never wanted to talk about \"that bitch\" again (that would also save me from further explanations) and Austin told me he would be there to change my mind the next day.\n\nMy dear reader, that evening was the last time in my life I ever catfished anyone.\n\nI played too close with the fire. This time, I got lucky. But on so many occasions, my brother or Ty could have caught up to me. Actually, one of them eventually did. But more on that later.\n\nOn the first evening back on campus, the guys (Austin, Gary, Martin, Henry, Steve, and Luis) and I sat down together retelling our holidays. I was happy to share Austin's embarrassing drunk stories from New Year's Eve. Although, I did not mention me stripping him while he was passed out or our interrupted masturbation session. We had a nice time. Once most of the boys started to talk about football again, Gary and I called it a night and we went to bed.\n\nDuring the first week, I barely saw Austin even though we would always take time to joke around and would now text each other constantly, like best friends do. His practices were taking a lot of his time, since he broke up with Ashley, he registered for some more activities: swimming and wrestling... As if he was not already hot enough? Steve and Austin were now wresting together once a week and this thought alone was enough to keep me awake at night. They were objectively two of the sexiest men of the entire College.\n\nThis time apart from my roommate did help me as I was dedicated to start fresh and focused more on classes this time around. The previous semester was a bit too crazy and the latest incident with the catfish convinced me I needed to work on controlling my urges.\n\nWhen Austin was sleeping in tight underwear or naked next to me, I would merely look and direct my thoughts on tennis training or homework. Don't worry my dear reader, I had not completely lost my mind, of course, I still peeked at his morning woods and sweaty armpits. The man was a perfect Adonis, it would have been a crime not to look!\n\nThankfully, Janice was there to keep me right on track. Austin and Ashley were now very vocally hating each other and could not be in the same room together, but their break-up felt like a little break-up for Janice and I and I was happy to spend some time alone with her.\n\nAdmittedly, we had grown close together while we were the official third and fourth wheels of Austin and Ashley's relationship.\n\nJanice gave me more details on what had happened the night of the end of semester party. It was still a very sensitive subject for Austin. Ashley drank a lot and ended up making-up with a sophomore, a certain Brandon -- not even that cute -- right in the middle of the dance-floor. According to Janice, it was a coping mechanism for Ashley who felt trapped in the relationship since Austin had moved in in her room. To be trapped in a relationship with Austin, I would give anything but I did not say that to Janice and faked to understand the psychology behind Ashley's behavior.\n\nOn a Thursday night, a couple of weeks after the start of the new semester, Austin came back to the room very late, around 2am. I knew there could be only one good reason for him to return from football practice that late: a post-training fuck session. I did not ask any question though.\n\nBut maybe this had triggered something because the next day, Austin was very in the mood to jerk-off to some porn together. I happily obliged.\n\n\"You know what your brother told me?\" He said, while I was masturbating him in front of a Latino girl shoving a dildo in her ass.\n\n\"You are scaring me...\" I replied, being truthful.\n\n\"We should not worry about jerking each other's off! He said it was almost mandatory among roommates.\" He laughed, making his hard cock pulsating a bit under my fingers.\n\n\"Ah...\" I said, remembering the deep embarrassment of that morning when he caught us.\n\n\"He said that he did worse. Did you know about that?\" I had a hard time to focus as Austin was caressing my balls while casually talking about my big brother. \"He told me he was sucking his roommate dick all the time when they were both singles during College and they could not get girls!\"\n\nI stopped jerking him off.\n\n\"You know, just to help him get a good release with his mouth! Always better than a hand!\" Austin continued, smirking.\n\nWas he proposing something to me?!\n\nI looked at him, stunned: \"Austin?\"\n\n\"Relax man!\" He said. \"I did not ask you to do a Martin on me!\" He smiled and jerked off his monster cock with both of his hands while one guy was now fingering the Pornstar on the screen, she was squirting a lot.\n\n\"Doing a Martin\" was our new name for a very sloppy deep-throat. We had coined the phrase when Martin told us another one of his blowjob stories with a waitress in the bathroom of a restaurant.\n\nI continued jerking off, now focusing on my own cock. A lot of thoughts were battling in my head. How did I want to play this? Why would my brother say that to Austin? To put me in an uncomfortable position or... maybe to help me? To help me get what he knew I really wanted? I should offer Austin to suck his dick. Now.\n\nBut it was too late: Austin had cummed on his slightly hair abs, using his own hand, well his own two hands.\n\nI was a bit taken aback but the sight of his cum was always sufficient to make me blow my load. We went to bed, once again sleeping naked. Did I just miss the opportunity of the life time?\n\nAs the days passed, I thought I did because if Austin would still be comfortable jerking off on his bed, he was no longer offering me a helping hand and even less so, to lend him my mouth. Maybe he thought that he had shocked me?\n\nOn the contrary, he had implanted the idea deep in my brain and knowing me, it was obvious that I could not let it go until I would have successfully deep-throated his monster cock. To be fair, I did not need that much help to think about offering a blowjob to Austin but still, hearing those words from his own beautiful lips. It had now become my new obsession.\n\nOn January 27th, we all celebrated Austin's 19th birthday. I had bought him a new wrestling singlet. He was new to the sport and had to borrow some singlets from Steve for each of his class. You can imagine I chose the most revealing one I could find, bright yellow, with as little as fabric as possible. I could not wait for him to try it on.\n\nAs usual, the evening started to get wild with the guys. Crowded in Gary and Steve's room, we started to play a game of truth or dare.\n\n\"Martin?\" Started Gary.\n\n\"Truth.\"\n\n\"Did you ever sleep with a woman over 50?\"\n\n\"Damn right I did! And it was great!\" Martin bowed down, proud of himself. Everyone else applauded and/or fist bumped him.\n\n\"Keep your mommies away guys!\" Shouted Luis to warn us all. Everyone got a good laugh, although, I was pretty sure nothing would stop Martin to actually fuck one of our moms.\n\n\"Steve?\" Asked Martin.\n\n\"Dare!\"\n\n\"Run naked through the hall!\" Ordered Martin. \"Now!\"\n\n\"I am not surprised you want to see me naked Martin! I saw your looks in the locker-rooms after practice!\" It was pretty ironic as Steve was always the one who seemed to stare at everyone else in our shared bathroom. I thought of the many times I got to see his boner in the past few weeks only. My ears went a little red.\n\n\"Yes, Steve... if you say so... Now, take off those clothes!\" Martin had always a sort of authoritarian tone. He made me think of Professor Fletcher in a way. Wait, Professor Fletcher did say those exact words to me actually. I smiled to myself while Steve took off his clothes, not even trying to hide his genitals. He started running in the corridor with a huge smile on his beautiful face, his black flaccid cock flopping against his muscular thighs.\n\nHe put back his underwear on. Only his underwear, why bother to have more clothes on when you looked like that? Then he said:\n\n\"Birthday boy! Truth or dare?!\"\n\n\"Dare.\" Replied Austin.\n\n\"I dare you to drink 3 shots of tequila out of Henry's belly button!\"\n\nHenry took off his shirt right away; This one too was always happy to show off his muscular smooth body.\n\n\"At least, he is shaved\" said Gary \"easier than if it was on Martins\". Martin showed off his hairy torso with a smirk. \"Next time maybe.\" He winked. You bet that I LOVED these parties among the guys.\n\nAustin obliged and drank out of Henry's body. He did not leave a single drop.\n\n\"Henry\" He said.\n\n\"Dare!\" Shouted Henry immediately.\n\n\"Pay back time: Drink 4 shouts out of Martin's belly button!\"\n\n\"Fuck you man!\"\n\nMartin was too glad to completely take off his shirt and present his hairy chest to Henry. Henry pretended to be grossed out but did not shy away, he sucked on the belly button, and told he had swallowed some hair afterwards. Again, everybody was drunk and giggling.\n\n\"Tyler. Truth or Dare?\" Henry asked.\n\nI knew that if I responded truth, I would probably have to lie but I was scared of the dare. However, I would not mind drinking of Austin's body so I went for it.\n\n\"Dare!\"\n\n\"Wow Tyler grew some balls!\" Teased Martin. \"Shut up\" Austin said, defending me. I just gave Martin the finger and everybody laughed.\n\n\"Ok... I dare you to suck Austin's dick as a nice birthday present! I think the man of the hour deserves it!\"\n\nThis was way out of line compared to the other challenges and way out of character for Henry. He was drunk, but still. There were a few seconds of silence. I looked at Austin. His hand was actually approaching his zipper and his crotch -- oh my god, were we doing this?! - when Henry said:\n\n\"Ok maybe that's a lot for a first blowjob... You should suck Gary instead, more manageable.\" Everybody laughed, once again, not me though and not Gary who complained: \"My dick is hard to manage as well... I mean... It is big!\". Austin, on my right side, kept on smiling but almost seemed disappointed we did not go through with it.\n\n\"Come on Henry, give me a real challenge, something doable.\" I pleaded.\n\n\"Ok, ok. Just suck on this banana then! But I want a beautiful deep-throat!\"\n\n\"Great idea!\" Encouraged Steve.\n\n\"Martin should be the judge of my banana sucking skills then. He's the expert, right?\" I said, daring the guys.\n\n\"Go ahead Ty, I'll give you your grade.\" Martin said imitating our strict English teacher. \"Let's see if you can do a Martin properly.\"\n\nGary handed me a banana. To be honest, I had already done that once or twice before, privately though, not in a room full of straight College guys. I proceeded and tried to deep-throat the banana, under the hissing and applause of the guys. Why should I care, I went straight for it! Once I gagged, I pushed it back.\n\n\"I am impressed Tyler. I would give you a B+. You could have gone deeper but I salute the commitment\" Martin shook my hand while inspecting the saliva on the banana. A devilish look in his eyes.\n\n\"Martin.\" I said. \"You have already used your truth, right? So, Dare?\"\n\n\"Dare, sure! You can ask me anything!\"\n\n\"Try to go deeper than me on that banana. If you can...\"\n\nThere was now some tension in the air.\n\n\"Sure, I'm not a pussy\" He took the banana out of my hand, it was still full of my saliva but Martin forced it into his mouth right away, almost completely, a tear coming out of his eyes.\n\n\"SHIT!\" Said Steve. \"Wow, he really did go for it. It almost got me hard!\"\n\nMartin kept the banana in his throat, almost challenging us all to laugh or to try to do better.\n\n\"Man, that's good, you did it.\" I spoke. Impressed. Intimidated even.\n\nMartin kept on going and only removed the banana from his mouth 20 seconds later, when it was totally drenched with his saliva. \"The fucker!\"\n\nThe challenges followed for almost half an hour until everyone was too drunk to understand the rules of the game. I know, the rules were pretty simple but we were also really drunk. Luis ended up totally naked, he looked delicious. Gary and Steve had to make out and they weirdly seemed into it.\n\nWhen we got back to our room, Austin and I were both dizzy. We struggled to open the door, both giggling like two teenagers.\n\n\"Happy 19th!\" I shouted, once again.\n\n\"Thank you, my friend!\" He put his arm around my neck.\n\n\"I am sorry you did not get a blowjob from a good slut for your birthday!\" I hugged him. He was undressing, now getting fully naked. I was too. We were still semi hugging. The moment was getting deeply erotic.\n\n\"Well Ty... for your birthday, I'll think to get you a hooker! I know you want to lick some bitches' ass very bad, I'll find a way to get you that!\" We laughed again. I was buzzing.\n\nI was too drunk to think straight.\n\nLiterally, I thought very gay.\n\nHe was naked before me and for the first time ever, I touched his flaccid cock. I wanted him.\n\n\"I can sacrifice myself for the team.\" I said seriously, staring into his blue eyes, my hand on his cock.\n\nAustin looked at me intensely. Then, he understood.\n\n\"You think you'd know how?\"\n\nI was still sober enough to avoid mentioning what I had done with my Laws Professor to prove my skills.\n\n\"Well, I guess it's not that complicated. I have already sucked on a banana\". He started to touch his now semi-hard penis, grinning.\n\n\"Ok. Wait.\" He turned on the computer and launched a porn. It was not the usual stuff we would watch. In a hurry, he clicked on the first video he saw, it looked like a 90's movies with very hairy guys and normal looking girls.\n\nHe lied down on his bed.\n\n\"Let me focus on the movie.\" Austin slowly got harder. I was standing next to him in my boxer briefs. I was getting hard myself despite the alcohol going through my body.\n\nI knelt down. That did feel weird and Austin looked at me, a bit unsure. I joked: \"I am just about to pray the lord, nothing else\".\n\n\"Man... that's so fucked up.\" I did not move, but then he continued: \"I'm hard, you can try!\"\n\nI leant towards his big dick; I had never been that close. I took a good look, enjoying the moment. I had already seen it harder but it was good, I could ease it in my mouth while it was still a bit soft. I appreciated every vein, his big balls, his pubic hair. I touched his dick with my hand first. He was focusing on the porn on the computer but he moaned. I played with the foreskin with my fingers, let the head out and finally, I went in, started to suck the tip of it.\n\nAustin moaned again.\n\nI was now sucking his dick. Taking as much in as I could. I was hoping he would guide me with his hands in my hair but he was lying still, sometimes touching his dick with his own hand but never touching me. I felt his tool growing inside my mouth. I touched his balls.\n\n\"Am I doing this right?\" I asked.\n\n\"Shut up.\" He said abruptly. \"I'm trying to picture you as a girl!\"\n\nAs pathetic as this may sound, that broke my heart a little. He could enjoy my mouth only if he believed it was not mine. It did not stop me though. This was just too good. He tasted too good. I went on him deeper, harder. He moaned louder.\n\n\"Fuck, fuck\" he said.\n\nI looked towards his face; his eyes were closed. I was leaking tons of precum on the floor. My own dick was really hard. I was starting to really get into it, then I remembered I was supposed to be straight and removed myself a bit.\n\nHe let me go and just jerked himself off with his hands for a while, still without opening his eyes.\n\n\"Thanks bro! That was a nice birthday present!\"\n\nMy eyes were teary, and not only because of the difficulty of gagging on his now well erected dick. My feelings of lust, of love, of fear were overwhelming me.\n\nHe kept on jerking off:\n\n\"How did it feel?\" He asked softly.\n\n\"Weird.\" I replied. Instead of delicious. Instead of paradise. Instead of \"I love you\". Instead of \"Fuck me in the ass now.\"\n\nHe opened his eyes and saw that I was a bit distraught.\n\n\"Dude, are you ok? That's just a dick! You did not have to!\" He looked concerned now.",
        "I smiled. I was playing the role of the straight guy a bit too well, maybe.\n\n\"No that's fine. We have to experiment! You told it yourself, my own brother did it with his friends, no big deal! I'll tell you what, I'll even finish. I'll try to challenge me and go deeper. I'll do you a proper Martin! Then I'm counting on you to do the same thing to me on my birthday.\"\n\nHe did not answer but closed his eyes again. Implicitly telling me to go for it.\n\nI went on his dick again, this time trying to do a better job. It was very thick, and it was longer than the only other dick I ever had in mouth. But I wanted it so bad. I let some tears rolled down my cheeks as I was pushing myself to swallow my roommate monster cock. It was now fully hard. Actually, I had never seen it that hard: 9.5. inches of meat.\n\nThis time, I played with my tongue and went back and forth. Austin was moaning louder and louder. He placed his hands behind his own head, like he was relaxing and letting me finishing him off. I always loved when he put his hands like this. Showing off pecs, armpits and biceps. I went on his dick harder. Licking his head. I touched his balls at the same time. I spat on it with the saliva forming in my mouth while I was gagging.\n\n\"FUCK!! That's fucking good!\"\n\nHe could not hide his enjoyment anymore, some precum flew down my throat. I was touching my own dick and I jizzed, as my nose was touching his pubic hair, a large amount of cum fell on the floor. I did not tell him. It started to get even sloppier, I guess I was now \"doing a Martin\" right!\n\n\"Ty, be careful... I'm gonna...\"\n\nI did not stop.\n\n\"Ty... I\"\n\nI went deeper as I ever did, fighting against my gag reflex against his rock-hard dick, playing with my tongue.\n\n\"TYYY!!!\"\n\nHe cummed inside my mouth. I was so surprise I spat half out of the cum on his thighs and abs. I almost went to swallow the rest when Austin snapped me back to reality and said:\n\n\"So sorry bro! I could not help it!\"\n\nWith my mouth full of cum, I said: \"Happy birthday!\"\n\nHe laughed. I did too.\n\nSadly, I knew what I had to do to keep the appearances. Did it still matter at this point? I had no idea but I wasted some more of that precious liquid. I spat some more cum out of my mouth into the sink.\n\n\"Man... I don't know if I could do the same to you... I can jerk you off though? You made me cum I should help you out.\" He offered.\n\nI had already jizzed. A lot. But Austin did not need to know that.\n\n\"No, that was YOUR birthday present. I'm too tired anyway.\"\n\n\"Ok, then...\" He was still visibly drunk, closed his eyes, and started to doze off a few minutes later, naked on his bed, his semen sticking on his defined and slightly hairy abs.\n\nThe first time we jerked off side by side, I could not believe it and then, it became a habit. The first time we jerked each other off, I could not believe it and then, it became a habit. Could this blowjob become a habit too?\n\n**************\n\nI hope you enjoyed this new chapter guys! As always, be respectful of my work but please share your comments and feedback! I love reading them. Who's excited for the rest of the story? It took 16 chapters for Tyler to finally suck on Austin's perfect cock, was it worth the wait? What do you think will happen next?"
    ],
    "authorname": "Thomas_Lodge",
    "tags": [
        "college",
        "roommates",
        "friends",
        "catfish",
        "frat guys",
        "parties",
        "drunk"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/my-first-year-in-college-ch-16"
}
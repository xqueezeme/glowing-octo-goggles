{
    "title": "Gods and Crowbars Ch. 03",
    "pages": [
        "This story is part of an ongoing series. The chronological order of my stories is now listed in WifeWatchman's biography.\n\nFeedback and constructive criticism is very much appreciated, and I encourage feedback for ideas.\n\nThis story contains graphic scenes, language and actions that might be extremely offensive to some people. These scenes, words and actions are used only for the literary purposes of this story. The author does not condone murder, racial language, violence, rape or violence against women, and any depictions of any of these in this story should not be construed as acceptance of the above.\n\nPart 12 - Return To Duty\n\nAt 6:00am, Monday, April 17th, I stood in the booth of the TCPD Armory Range, took aim with my Beretta 96 service weapon, and fired ten shots. Three rows of holes, 3x4x3 appeared in the center of the target. Then I ejected the magazine, put in a new, loaded one, pressed the lever to release the slide to spring forward, switched hands, and fired at the other target left-handed. The shots were not in as neat a pattern, but passed.\n\n\"Congratulations, Commanderrrr.\" drawled Chief Moynahan, watching from behind me. Deputy Chief Della Harlow took the Armorer's certification and added it to the paperwork in my file as the Armorer put the targets into two frames. He'd gotten into the habit of keeping a bunch of frames due to the requests of friends of Officers re-qualifying for their targets, to be given as gifts. The Chief had asked for my targets to be framed as a gift from him and Della.\n\n\"You are officially back on duty, Commander.\" Della Harlow said.\n\n\"Your turn, Chief.\" said the Armorer. The Chief went to his station, and fired his Beretta 92FS, which had been his military service weapon and was now his Police service weapon (how he got the Army to let him keep his weapon, I don't know and am not asking). He perforated the bullseye of the target, easily passing the test. He did not attempt to qualify left-handed.\n\n* * * * * * * * * * * * * * * *\n\n\"This is Bettina Wurtzburg, KXTC Channel Two News!\" shouted the lovely redheaded reporterette at 7:00am, Monday, April 17th, from (appropriately) in front of the Federal Building. \"Today is Tax Day, and County residents are scrambling to get their taxes done and sent to the IRS and State Revenue Service!\"\n\n\"The Leonard Sharples trial is entering a new phase, as the Prosecution rested its case Friday afternoon.\" said Bettina. \"The Defense will begin presenting its evidence and witnesses this morning. Legal experts are saying that while former Detective Sharples may be convicted on some of the lesser charges, the Prosecution did not adequately prove the murder case of Scrawny Haskins, and that the Death Penalty is very unlikely.\"\n\n\"Former SBI NTF Director Richard Ferrell remains hospitalized after his back was broken by unknown assailants before he was captured by Town & County Police Officers. Doctors have confirmed that Mr. Ferrell is paralyzed from the waist down. In a related story, the FBI went to Court to gain Federal custody of Mr. Ferrell and control of his case, citing his involvement with criminal organizations that the FBI is investigating. However, Town & County Assistant D.A. Franklin Washington expertly argued the case on behalf of the State, showing that all of Mr. Ferrell's charges are at the State and local levels. The Federal Judge denied FBI Special Agent in Charge Les Craig's petition, leaving Mr. Ferrell's case in local hands.\"\n\n\"Also today,\" said Bettina, \"the Police Department issued a statement that Commander Donald Troy has returned to full duty, only a couple of weeks after being wounded and requiring back surgery. And in the Federal case in which Commander Troy was shot and wounded, the U.S. Attorney's office issued a statement that Betty Morelli has rejected a plea deal offer that would've required her to testify against her husband Jerry Morelli. Full charges will be brought against her as a result.\"\n\n* * * * * * * * * * * * * * * *\n\n\"After all that, she rejected the plea deal.\" said Cindy. \"That woman is crazy.\"\n\n\"Crazy like a fox.\" I replied. \"She's got something up her sleeve. I dunno what it is, but she has a plan.\"\n\nWe were sitting in my office after the coffee klatch. I'd received an ovation when I walked into MCD with my two framed targets. Doughnuts had been brought in, and they tasted very good... and did not last five minutes.\n\n\"What about Jerry Morelli?\" asked Cindy. \"Is he talking?\"\n\n\"No.\" I said. \"Not yet. They've got him ice-cold for attempted murder and related charges. They're not going to give him immunity for giving them his entire criminal empire, and he's not going to give that away. Les Craig is once again left holding the bag.\"\n\nCindy said \"Funny how Bettina made a point to show up Les Craig like she did. Guess he's not giving her pickle-tickles anymore, huh?\"\n\n\"Doesn't look like it.\" I said. \"I suspect their out-of-bed uses for each other are done, so that little exchange of values does not need to continue.\"\n\n\"I wish that we could say that of him in the FBI,\" said Cindy, \"but Callie got word that he's still being groomed for top-level positions.\"\n\nI took out my bug killer and turned it on. \"She still working with Janet?\" I asked.\n\n\"Not since your wife retired.\" said Cindy. \"But they're keeping her in the loop on some things. I'm not sure why.\"\n\n\"Well,\" I said, \"my friends in the LAPD, Claire Michaels and her boss Captain Raytheon, have been working with the FBI on some of the same stuff we're working on here. They're working on their version of 'White Roots' there, and the same Superior Bloodlines is behind them that is behind our friendly neighborhood supremacists around here.\"\n\n\"Makes sense.\" said Cindy. Then she froze in her tracks. \"She... Callie didn't come back here just for that, did she?\"\n\n\"No, my friend.\" I said reassuringly. \"Callie's here to do sex research for my wife, recruit University girls for her movies, and most importantly, to be with you.\" Cindy relaxed considerably after my reassurances.\n\n\"Cindy,\" I said, understanding what my cousin was thinking, and feeling, \"you gotta relax. And you gotta love like there's no such thing as a broken heart.\"\n\n\"Someone could write a country music song about that. Probably will, one day.\" Cindy replied. I nodded vigorously in agreement.\n\n* * * * * * * * * * * * * * * *\n\n\"Welcome back, Commander!\" Mary Mahoney Milton said brightly as she and Myron sat down in my hot chairs. Her hair was a lovely shade of metallic pink today, and the rest of her looked very healthy and happy, a pleasing bloom on her cheeks... hmmm...\n\n\"Thank you.\" I said. \"I'm very happy to be back. So, anything happen while I was away?\" The Mouseketeers chuckled.\n\n\"Not much, Commander.\" said Supervisor Myron Milton. \"We did gather some information on Benny Brighton. The consensus opinion is that he was a tool, a lackey, a 'useful idiot', but in truth he's been a valuable operative for the equivalent of 'White Roots' in the Los Angeles area, a group called 'Bruins For A White California', a.k.a. the BFWC. Opponents started derisively calling them the 'Polar Bears', and they adopted it for themselves.\"\n\n\"Hoo boy.\" I said. \"So Benny was one of them?\"\n\n\"He always seemed to be on the fringe of them.\" said Myron. \"The LAPD's Major Crimes division has made some major busts of this group, but never netted Benny. What Mary and I have reason to believe,\" (which meant Myron hacked into something, somewhere) \"is that Benny is a go-between, a liaison between Superior Bloodlines and these more up-front racial groups like 'White Roots' and the 'Polar Bears'.\"\n\n\"So why was he working for Ferrell?\" I asked. I did not need a long reverie for it to hit me. \"Ohhhhh, wait a minute. I see it now.\"\n\n\"See what, sir?\" asked Mary.\n\nI did not answer, but asked \"Is Benny still in our custody?\"\n\n\"Yes sir.\" said Mary. \"County Jail, in isolation. But he's too hot to hold, so he's going to be transferred to The Asylum's new Supermax-level security area.\"\n\n\"I've got to talk to him before that happens.\" I said.\n\n* * * * * * * * * * * * * * * *\n\n*BUUUUZZZZ!*\n\nThe buzzer opening the door to the most secure area of County Jail blasted loudly as Benny Brighton was brought into Interrogation-2. He was handcuffed to the ring on the table. He was tall, skinny, dirty blonde unkempt hair, and in need of a shave.\n\nI studied him for a moment through the one-way glass. We were waiting for his lawyer to arrive... Nathan Masterson of Gresham & Mason.\n\n\"Did he ever invoke?\" I asked.\n\n\"No sir.\" said Cindy. \"He asked for a lawyer, but he readily answered questions with the proviso that he could invoke at any time.\n\n\"That in itself is very interesting, don't you think, Captain?\" I asked.\n\n\"If you say so, sir.\" Cindy replied. \"I'm not sure why you think that, though.\"\n\n\"It means they, meaning his lawyer and his Superior Bloodlines bosses, trust him enough to talk to us. They trust him to know what he can say and can't say.\" I replied. Cindy nodded with new understanding.\n\nAfter the lawyer was brought in, I came in through the anteroom door, bringing Detective Teddy Parker with me. Yes, it's politically incorrect to say this, but I knew if I brought in a black or female Detective, I'd get no cooperation.\n\nI sat down rather slowly, and said \"Hello, Benny. I'm Commander---\"\n\n\"I know who you are, Mr. Iron Crowbar.\" said Benny. \"How's your back?\"\n\n\"Good enough to fight a running battle all the way to Los Angeles and halfway back.\" I said. \"But thanks for asking.\"\n\n\"Didn't think I was important enough to merit the Iron Crowbar's personal attention.\" Benny said. I was not fooled.\n\n\"Oh, I rushed to get out of the hospital for two reasons, Benny. First, their food is awful, much worse than what you're having in jail, here. And second, just so I could talk to you.\"\n\n\"What do you want of my client?\" asked Masterson, getting tired of the preliminary theatrics.\n\n\"Benny, why are you hanging around a dirtbag like Dick Ferrell?\" I asked. \"He's scum. He's stupid. He's fucked up so many times they just call him 'the fuck-up' in the SBI. You were doing better than that in California, Benny. What gives?\"\n\n\"Unlike you, so I've heard, I follow my orders.\" said Benny. \"I was told to work with Ferrell, and I did.\"\n\n\"And you're now sitting in jail because of his stupidity.\" I said. \"Maybe you should not have followed orders.\" Benny shrugged, and then I asked \"So who gave you those orders, Benny?\"\n\n\"Like I told your FBI guy, that straight-laced Boy Scout that looks like he needs to get laid,\" said Benny, talking about Martin Nash, \"I get my orders from Ben Ellman, great leader of White Roots; and from Franklin Gray, a great white man.\"\n\n\"Mr. Stormbringer.\" I said, which rattled Benny, and his lawyer, for the first time. \"Ah, the company you keep, Benny... the company you keep. Bad people. And if you think I believe those two are your real bosses, you've got another 'think' coming. Ellman was arrested a long time ago,\" (Author's note: 'Point Hollow') \"and Franklin Gray is the true 'useful idiot' to your masters... or master, as I perceive.\" Benny's eyes lit up when I used the plural, giving away that he had one boss, which I'd already surmised. \"So, Benny, help yourself out tremendously, and tell me who your real boss is.\"\n\nMasterson leaned over and whispered something to Benny, who nodded. \"I need to talk to my lawyer for five minutes.\" Benny said. We got up and went out to the anteroom.\n\nWhen we came back in five minutes later, Benny said \"On the advice of Counsel, pursuant to the Fifth Amendment, I'm invoking my right to remain silent, and will answer no more of your questions.\"\n\n\"Very well, Benny.\" I said, having not even sat down yet. I turned to go. \"I won't be seeing you again, at least before your trial. Good luck to you.\" With that I left, knowing that Benny had just signed his death warrant by invoking. His only hope to live was to tell all he knew, making killing him not worth the effort...\n\n* * * * * * * * * * * * * * * *\n\n\"Out of curiosity,\" asked Cindy as we drove along in my Police SUV, \"why did you give them so much, like 'Stormbringer' and Franklin Gray, and all that?\"\n\n\"Several reasons, and just so you know, Jack Muscone and I talked about this earlier.\" I replied. \"We know Franklin Gray is not a real player for Superior Bloodlines. They've been stringing him along, letting him think he's important, but in reality he's just a tool for them, and became useless after Jeanine Burke and then Michael Burke's murders.\"\n\nI continued: \"The 'Stormbringer' operation of Gray's is more important, but Jack and I believe that letting them know we know about it will cause them worries. They'll wonder how we know, who told them, who the traitor in their midst is, and they'll also have to decide whether or not shutting it down is necessary. We know that we're not going to be able to penetrate it and use it to our advantage.\"\n\n\"I can see that.\" Cindy said. \"I still might not let them know we know, though.\"\n\n\"At any rate,\" I said as we arrived at our destination, \"we've stirred the pot, and we'll see what happens.\" I gave her some quick instructions, ending with \"Good luck.\"\n\n\"Thanks.\" said Cindy, getting out of my Police SUV. \"I'll call if I need anything...\"\n\nPart 13 - Reunion Union\n\n\"Thank you for seeing us today!\" said Detective Joanne Cummings Warner as she sat down with Susan Gurley in the conference room of Bodycore Technologies, a company dedicated to exercise science, with workout programs as well as equipment. Town Fitness Centers was an enthusiastic customer of their products.\n\nJoanne was dressed smartly in civilian clothes, a black skirt and jacket with a light blue blouse, her badge on her belt just left of the buckle, and her gun holstered further left along the side of her left hip, facing 'backwards' for easy drawing. Joanne was good and fast at drawing her service weapon and shooting accurately with it.\n\nWith her was Detective Jerome Davis, in a brown jacket and pants, and an off-white shirt with brown and red criss-cross stripes that somehow managed to work and look fashionable. Ostensibly he was getting training by working with Joanne. He also was her backup and bodyguard, if such was needed.\n\nSusan Gurley was 42 years old. She had dirty blonde hair styled simply, like Senator Katherine Woodburn styled her hair Susan had been a very beautiful woman in her earlier days, and still was very attractive though her somewhat 'big boned' body was just beginning to add weight. She was a paper pusher in the Sales Department of Bodycore Technologies.\n\n\"So what is this about?\" Susan asked. \"It's been ten years since Jason died.\"\n\n\"Yes ma'am.\" said Joanne. \"We periodically review old cold cases, and this one came up as your class is about to have another anniversary reunion.\" She noted that Susan's eyes glazed over at the rather big word 'periodically'.\n\n\"So what can I help you with?\" asked Susan. \"I told the Police ten years ago that I thought Jimmy Amberton had acted suspiciously that night.\"\n\n\"You thought he was the guilty one?\" asked Jerome.\n\n\"I don't know for sure,\" said Susan, \"and it might be slander if I say out loud what I actually think. But Jimmy Amberton was just a slimy little punk all through school. Everyone hated him. Why Jennifer married him, I don't know, but the way she was acting with Jason, dancing with him that night, I think she was seeing the error of her ways in marrying Jimmy.\"\n\n\"Yes, we read the case notes of your statement to the Police back then.\" said Joanne. \"If I may ask some questions from a different direction... you are the Class Vice President?\"\n\n\"Yes.\" said Susan.\n\n\"With Jason being the Class President but now deceased,\" Joanne said, \"you now are the one to make the reunion arrangements?\"\n\n\"Actually,\" said Susan, \"I already was the one making the arrangements. Jason, me, and Kay Helmsley, who was the Class Secretary/Treasurer, were the committee to do things like that. I live here in Town, so I've always just gone ahead and done it.\"\n\n\"So you made the arrangements ten years ago?\" asked Joanne.\n\n\"Yes.\" said Susan.\n\n\"Did you meet with Jason and Kay beforehand, to plan the event ten years ago?\" asked Joanne.\n\n\"Yes, we did meet.\" said Susan. \"Two months before the event, which was early August, if I can remember right.\"\n\n\"Did any of you ever meet up with the Ambertons during that time?\" Joanne asked. Susan paused for the first time, a little frown forming on her face.\n\n\"Ma'am?\" pressed Joanne, peering at Susan.\n\n\"Well...\" Susan said, \"It was like this. Jason lived in Midtown at the time. He drove up and stayed for several days. We met Friday to hash out our plan, then we were going to meet again on Sunday after I check into some arrangements. On Sunday, I was driving to the Hyatt Hotel, where our meeting was. As I parked, I saw a man escorting a woman to her car. It was Jason Rutledge and Jennifer Amberton. And he kissed her on the mouth before she got in her car and drove away.\"\n\n\"Why didn't you tell anyone that before?\" asked Joanne.\n\n\"I'm not trying to be evasive when I say this, but no one asked.\" said Susan. \"And at the time, I thought it was their business, not mine.\"\n\n\"Jason was murdered,\" said Joanne in a disbelieving voice, \"and you did not think him meeting with Jennifer Amberton two months before wasn't important for the Police to know?\"\n\n\"At the time,\" said Susan, \"it was shocking, everything was going on so fast and things were a blur. All I can say is I didn't think of it, and no one asked me about anything that had happened before that weekend.\"\n\nJerome Davis stepped up to the plate, and asked: \"Ma'am, did you have a sexual relationship with Jason Rutledge?\"\n\nSusan's face fell. \"Yes.\" she said. \"That same weekend. After our meeting, Kay went home. Jason asked me up to his room, and I went, even though I was married, and still am. And yes, Jason and I made love. Nine months later, my daughter, our second child, was born, and I'm sure she's Jason's daughter, though my husband doesn't know anything about it.\"\n\n\"Thank you for your honesty, Mrs. Gurley.\" said Jerome.\n\n\"Ma'am,\" asked Joanne, \"did you receive any money after Jason died?\"\n\n\"No.\" said Susan.\n\n\"Are you aware of any arrangement by Jason for any children of his to inherit any money when they reach adult age?\" asked Joanne.\n\n\"No, I haven't heard anything like that.\" said Susan.\n\n\"Do you know who did inherit Jason's money after he died?\" asked Jerome.\n\n\"No, I never did know that, and I really didn't ask.\" said Susan, thinking about it possibly for the first time ever. \"I always assumed he had family somewhere that would inherit the money.\"\n\nJoanne had Susan sign the write-up of the conversation, which was now an affidavit. \"Thank you for your time, ma'am.\" said Joanne. \"And if you hear anything else that can help us, please let us know.\"\n\n* * * * * * * * * * * * * * * *\n\nNathan Masterson was driving in his expensive Lexus SUV on the Nextdoor County Highway towards the City. Just as he entered Nextdoor County, he made a phone call.\n\nAfter he disconnected, he continued to drive along the highway, watching for Police. They were notorious for picking up speeders along this highway. He noticed a old green car following his vehicle. He sped up slightly, but the car kept pace.\n\nAs he neared the City, he noticed the green car fall back. Finally, it vanished from his rear view mirror's sight.\n\nAs he got to his offices in the City, he suddenly had a very bad thought enter his head. He got a small device out of the trunk of his car, which looked like a drone controller with a little antenna on it. He activated it, and a beep began emitting. He scanned inside his car, and his heart sank as he found one bug wired into the car's phone speaker system, and another embedded in the GPS system...",
        "Part 14 - Playing God\n\nFortunately I had been able to keep up with some paperwork while I was convalescing at home. But there was still a large pile of it, and a huge number of emails to go through. It was 3:00pm when I finally looked up from my computer screen. And that was because Helena buzzed me that Captain Ross wanted to see me.\n\n\"Whaddya got?\" I asked as Cindy came in.\n\n\"I know you're super busy,\" said Cindy, \"But I just talked with Detectives Warner and Davis, and I'd like for you to hear about this straight from their mouths.\n\n\"Sure.\" I said. \"Bring them in.\"\n\nLess than a minute later, Joanne and Jerome were in my hot chairs, and Cindy was sitting on the sofa behind them, listening in as they told me everything they'd learned about the case so far, then added their conversation with Susan Gurley.\n\n\"Wow.\" I said. \"So Susan had a child by Jason, as did Jennifer in all likelihood. And you don't think Susan knows about the trust fund?\"\n\n\"She either doesn't, or she's a very good actress.\" said Joanne. \"And I'm inclined to believe the former. I'm not super impressed with her mental acumen, though she may be acting brilliantly in hiding it. She also has something against Jimmy Amberton... ten years ago she made strong statements about him to Police, and today she all but accused him of being the perp.\"\n\n\"And your impressions of Susan Gurley, Jerome?\" I asked.\n\n\"Like Detective Warner said, sir,\" said Jerome, \"she was trying hard to put Jimmy Amberton on our radar screens. But she seemed forthright and unworried until I asked if she herself had had an affair with Jason Rutledge. She got kind of worried then, and seemed to want the interview to end so she could get away from us.\"\n\n\"Do either of you think she was lying to you?\" I asked. \n\n\"No sir.\" said Joanne. \"She did not have to come across with a lot of what she admitted to. She didn't act like she was trying to think and choreograph her words.\"\n\n\"Sir,\" said Jerome, \"what Detective Warner says is true. But I've seen people in the neighborhoods where I grew up who were so good at lying, you couldn't tell they weren't telling the truth. Susan Gurley struck me that way... she may have thought about it a long time ago and for a long time what she might say if the Police ever came to talk to her again.\"\n\n\"Very interesting observation, Jerome.\" I said. \"You both have done very well, here. So what's next?\"\n\n\"That is what I wanted to ask you, sir.\" said Cindy. \"I was going to have them shelve this to work on current stuff. Or do you want them to work more on it?\"\n\n\"Hmmm...\" I said. \"Well, it seems you guys, especially you Joanne, have dug up a lot of new stuff. If I were to tell you to keep going, what would you do next?\"\n\n\"I'd get on the phone or in my car and go see or talk to as many of the people that were there that I can find.\" said Joanne.\n\n\"Good. What else?\" I asked.\n\n\"Look at the evidence that was accumulated?\" guessed Joanne.\n\n\"Good. What else?\" I asked. Neither had a response.\n\n\"So...\" I said, \"tell me about your examination of the crime scene.\"\n\n\"Sir, it was... it was ten years ago.\" Joanne said.\n\n\"And the earth shifted and moved the location across the mountains or something?\" I asked. \"Okay, sorry, I should not be so snarky. But seriously, we will go look at the crime scene. And note I said 'we'. I want you to do what you said and in the order you said it: talk to as many people as you can find, then examine the evidence, and then when you're ready, come and get me; the three of us will go to County High School. Oh, Captain Ross is welcome to join us, if she's not too busy.\"\n\n*BRING!* *BRING!* *BRING!*\n\nIt was my personal cellphone, and it was my wife Laura calling on it. \"Darling,\" she said, \"can you come to my office... like right now?\"\n\n\"On my way.\" I said. Hanging up, I said \"We'll talk more of this later. Captain Ross, you're with me.\" And with that, Cindy and I left for Campus.\n\n* * * * * * * * * * * * * * * *\n\nWhen Cindy and I got to Laura's office, my Police partner's eyes lit up at the sight of Callie Carrington sitting on one of the twin sofas. My eyes and ears perked up at the sight and sound of \"Daddy!\" being called out by my firstborn child.\n\n\"Hi Sweetpea.\" I said, picking up Carole and hugging her. \"You being a good girl for your Mommy today?\"\n\n\"Yes, Daddy.\" Carole said. \"I drew pictures, too. Marie is going to color them for me.\"\n\n\"That's good.\" I said. \"Okay, you go back to the nursery room, so we grown-ups can talk.\"\n\n\"Okay Daddy. Bye!\" Carole said, running to the back room as soon as I set her down on the floor.\n\n\"She is so cute.\" Callie said.\n\n\"She's a handful.\" Laura replied. \"Have a seat, Don.\"\n\nI sat down next to Cindy, to her right. Facing me on the other sofa was Laura, and Callie to her right.\n\n\"Don,\" said Callie, \"your idea worked. We picked up something.\"\n\nI'd let Cindy off at The Cabin, where Callie was waiting for her, and filled her in on the mission. They took the Black Beauty, painted green of course, onto the road, following Nathan Masterson's car after he passed by them. As Cindy drove, Callie was operating some of the CIA's best equipment, which picked up the transmissions from the bugs in Masterson's car. And after Masterson found the bugs, they self-destructed in five seconds.\n\nNo, really... they self-destructed in five seconds. Part of the bug's guts was a small container with two chemicals that mixed when the bugs were moved or if a signal reached them. The chemicals started a fire in the electronics of the bugs. Neat, neat stuff.\n\n\"Here's what we picked up on Masterson's phone call.\" said Callie. She played back what her device had recorded:\n\n\"Tell Paulsen the Iron Crowbar knows about 'Stormbringer'! No, I don't know... just tell Paulsen, will you! It's blown! He needs to know!\" The transmission then ended.\n\n\"The number he dialed,\" said Laura, \"was a burner phone in the heart of the City. Could be any of the major buildings there; we can't trace closer than the cell tower on top of the Cannon Building.\"\n\n\"Any of you know who 'Paulsen' might be?\" I asked.\n\n\"No.\" said Laura. \"And I'm going to hold off searching. Masterson found the bugs; they transmitted a radio signal before catching fire and being destroyed. So if he's connected to a rogue cell at the highest levels, they'll probably be watching me, you, Jack Muscone, and any of our allies to see if we make such a search.\"\n\nI nodded. \"Good idea. But this information is valuable, very valuable.\"\n\n\"Can't help us in Court, though.\" Cindy said. \"We absolutely got that without a warrant.\"\n\n\"Cindy, remember what I told Casey B. Walker after you rescued Don from his thugs?\" Laura said.\n\n\"Not really; I was helping them get Don to Dr. Cordell for medical attention.\" Cindy replied.\n\nLaura said \"Walker said he'd see me in Court, and I told him he knew these things didn't see the light of day of a Courtroom, or something to that effect.\" Cindy smiled and nodded.\n\n\"In other words, ma cousine,\" I said, \"this is not at the local law enforcement level... this is at the 'Gods and Crowbars' level.\"\n\nI then turned to Laura. \"Dear, I think it's time you had that little 'talk' you've been meaning to have.\" My wife nodded vigorously in agreement.\n\nPart 15 - The Verdict\n\n\"This is Bettina Wurtzburg, KXTC Channel Two News!\" shouted the reporterette at 7:00am, Tuesday, April 18th, from in front of the Courthouse complex. \"In what is considered by legal experts to be a shocking development, the Defense in the trial of former TCPD Detective Leonard R. 'Sergeant' Sharples rested late yesterday afternoon. The Prosecution also rested, and the case is expected to go to the Jury this morning as the opposing sides work with the Judge on jury instructions.\"\n\n\"And in State news,\" said Bettina, \"1st District State Senator Katherine Woodburn called Governor Jared's plans to cut 50% of all State EPA jobs 'one of the most cruel and mean-spirited actions we have ever seen from any Governor of any State, ever'. Senator Woodburn accused Governor Jared and the Republicans of wanting the children of the State to have to drink dirty water.\"\n\nBettina continued: \"The Governor also has said that his plans to completely restructure the SBI will be coming out soon. With the Legislature's session now finished for the year, the Governor says he can now concentrate on, and I quote, 'getting the work done that the voters of this State elected me to do'.\"\n\nBettina went on: \"Civil rights groups are also voicing concerns over the budget bill that they say will allow the Governor to use State money to round up undocumented workers and deport them. The Governor has also struck down the previous policy of not separating children that are Citizens from their parents that are foreign workers. Some groups are promising to sue the Governor to reinstate the 'full family together' policies...\"\n\n* * * * * * * * * * * * * * * *\n\n\"So, Mr. Crowbar,\" said the Chief as we watched Bettina in MCD, \"what is your plan, that the Governor is going to read verbatim to the Press?\" There were chuckles in the room at that.\n\n\"Don't I wish.\" I said. \"If it were my plan, it would be simple: there would be no more SBI. But I do like what the Governor and his people are putting together, so far.\"\n\n\"And that is?\" asked Cindy Ross (of course).\n\n\"It's embargoed.\" I said. \"I can't tell you yet. But you guys will be the first to know, once something is finalized. I will say this: the Reserve Program is not working very well right now. For example, the Town & County Council is complaining about me and Captain Ross doing what they call 'outside' work with the SBI. So something will be done along those lines, and along the lines of the SBI bill passed by the Legislature earlier.\"\n\n\"Sir, when is the Governor going to start cracking down on Illegal Persons?\" asked Teddy Parker. The room went silent.\n\n\"That's politically incorrect, at best.\" said Deputy Chief Della Harlow angrily. \"They're 'undocumented workers'. There's no such thing as an illegal person, and I'd better not hear such offensive language again.\"\n\n\"I beg to differ.\" I said loudly, taking up for my Detective with my rank that matched Della's. \"If they're here illegally, they're illegal, period. If this Police Force finds any illegal persons in my County, they will be arrested and turned over to ICE for deportation. And that is not up for political debate.\" \n\nI would imagine that it was the same degree of 'silent' when God laid down the Ten Commandments to Moses, but everyone in the room got the message: that I was not going to lose this 'pulling rank' game today.\n\n\"Okay, okay, this is a Police Department, not the State Legislature, thank God.\" said Chief Moynahan. \"Swallow the politics along with your coffee, and we'll all get our jobs done a lot better.\" That was the final word on the subject. The Chief won the 'pulling rank' game. Deputy Chief Harlow left the room almost immediately, and would never return to an MCD coffee klatch again.\n\n* * * * * * * * * * * * * * * *\n\nAt 3:00pm, the Duty Desk Sergeant came to my office. \"Commander,\" he said, \"I just got a call from the Courthouse. The Jury came back with a verdict. They'll read it at 3:30.\"\n\n\"Thank you.\" I said. When the Duty Desk Sergeant was gone, I turned to Cindy and said \"Want to go watch?\"\n\n\"Would not miss it.\" she replied.\n\nWe did not even try to drive to the Courthouse, but instead walked across Courthouse Square. We went to the LEO entrance and were allowed in with our weapons (and crowbars). We hurried up to the chamber, which was packed. We stood in back with the Deputies.\n\nAt 3:30pm everyone rose as the Judge came in. They remained standing as the Jury filed in. Everyone then sat down as the Judge read the slips of paper given him by the Bailiff. He then had the slips given to the Court Reporter, who entered them into the record.\n\nThen the Prosecutors and Defense Counsel, as well as Defendant Leonard R. Sharples stood up for the reading of the verdict.\n\n\"On the issue of Count 1, murder in the first degree with aggravating circumstances, how do you find?\" All ears were tuned as the Jury Foreman read the verdict:\n\n\"We the Jury find the Defendant guilty.\"\n\nI had to remain silent, but I did a double fist pump. Cindy clasped her hands and looked into the sky as if in prayerful thanksgiving. I could sense the rest of the room was more than a little bit happy.\n\n\"On the issue of Count 2, attempted murder of a Police Officer with aggravating circumstances, how do you find?\"\n\n\"We the Jury find the Defendant guilty.\" said the Foreman. Cindy punched me on the shoulder, and the Deputy on my other side shook my hand. I was a happy Police Commander as I listened to Justice be served upon my behalf from the Jury Box.\n\nAs each verdict was read off, and Sharples found guilty of every count, I could not know that in Police Headquarters there was loud cheering going on.\n\nBut all was not over. The judge announced that the penalty phase, the consideration of the Death Penalty, would begin in the morning.\n\n* * * * * * * * * * * * * * * *\n\nThe Cop Bar was a happy place as the sun set. The stain upon the TCPD in the form of Leonard 'Sergeant' Sharples had been lifted. I got a text from Lorena Rose in Los Angeles, who'd had her cover blown and her life endangered by Sharples, and there was no mistaking Lorena's happiness. I texted her back with some cheerful comments.\n\nAs we celebrated on the outside patio, Jack Muscone and his full team arrived: Sandra, Martin, and Lindy. Clark Webster also was with them, as were SBI Agents Tom Chow and Ted Orosco.\n\n\"Great work, guys!\" said Jack as he set a pitcher of beer at our table. Sitting with me were Cindy, Callie, Teresa, Wes Masters, and Molly. Detective German had also come over with Molly. And Todd Burke, Teddy Franklin, Barry Oliver, and Tanya Perlman were here.\n\n\"Mind if I borrow your Captain of Operations for a moment?\" asked Jack.\n\n\"Just don't offer her a job with the FBI.\" I replied. With that, Teresa followed Jack back inside.\n\n* * * * * * * * * * * * * * * *\n\nAlone in the back room, Jack set down a shot of bourbon for Teresa and one for himself.\n\n\"I remember you buying me a beer to thank me for taking out the guy who killed your sister.\" said Jack. \"I thought I'd return the favor with a shot of bourbon.\"\n\n\"Salud.\" said Teresa as they clicked shot glasses then downed their shots.\n\n\"I'd have killed him.\" said Muscone quietly. \"I'd have lost control. It's better this way... broken back. Thank your friends for me, also.\"\n\n\"Yes.\" said Teresa. \"I was thinking of you, and what you did to avenge my sister, when we went on our mission. I was returning the favor, as you are returning the favor of me buying you that beer that time. And yes, it's better that he suffers, badly, for what he's done. His kind of corruption merits worse than death.\"\n\n\"So, what do you think about Sharples?\" asked Muscone.\n\n\"The Commander seems to have a special desire to see that one through to the end.\" Teresa replied. \"So I therefore feel the same way.\"\n\n\"He's more than just a boss to you, isn't he?\" asked Jack. \"And more than your future uncle-in-law.\"\n\n\"You should know.\" said Teresa. \"You were with him when he went and found that photo of me and Alexis, and got my story out in front of everyone. He saved me from... worse than death.\" Tears were rolling down Teresa's cheeks as she remembered, and contemplated how things might have been...\n\n\"That's the Iron Crowbar for you.\" said Muscone. \"I probably shouldn't tell this tale out of school, but he once told me that he worked his ass off to save you because he could see how great you would become one day. And you know what? He was right. You're an awesome cop, and a great mother to Todd's kids.\"\n\n\"He's always right.\" said Teresa. \"Even when he says something that sounds hair-brained and totally crazy, I know he's ultimately right. And I hope I don't forget that when... well, when one day no one else is going to believe him.\"\n\nAfter a moment of contemplation, Teresa said \"Well, let's go back and join the party. Not every day Sharples gets convicted of murder.\"\n\n\"True.\" Jack said, chuckling. They came back on deck.\n\n* * * * * * * * * * * * * * * *\n\n\"Excellent job, sir.\" said Norm Chow to me as we quietly spoke alone in the front part of the patio, nearest the front door and parking lot.\n\n\"What, Sharples?\" I asked.\n\n\"No sir.\" said Chow. \"That time somebody was shooting at you on this patio and you went out and shot them.\"\n\n\"Oh yeah, that.\" I said, remembering. (Author's note: The Murdered Football Player, Ch. 06.) \"How did you know about that?\"\n\n\"I've been reading up on all your cases, sir.\" said Chow, his voice flat, his face showing no emotion. \"Some incredible stuff, there, sir.\"\n\n\"Yes, life is interesting in this Town & County.\" I said. \"So tell me, Chow... what do you want to do?\"\n\n\"I guess it's going to depend on what they do with the SBI, sir.\" said Chow. \"I once thought that going to Quantico and being in the FBI was my life's dream, but the SBI has some good people in it, and can be a good law enforcement unit.\"\n\n\"How would you like to help me rebuild the SBI?\" I asked.\n\n\"You leaving the TCPD for the SBI?\" asked Chow, his voice dispassionate, but inwardly he was surprised.\n\n\"No, nothing like that.\" I said. \"But Director Conlan is talking to me about doing more with the Reserve Inspector post, making it all but full-time, and putting the right people in the right places. And you would do very well in several places, of which you'd have your pick.\"\n\n\"Sir,\" said Chow, \"I like working in the field. I don't want to be behind a desk, leading from behind. Don't get me wrong, I know you're not doing that, but I'm not one for Admin stuff. I'd rather lead a team, like Special Agent Muscone or Webster are doing, where I'm still out there with them.\"\n\n\"Well then,\" I said jovially, \"the Governor and I have just the thing for you.\" I looked around to make sure no one was listening in, then said \"We're thinking about a new unit, called 'Special Investigation Services', a.k.a. the SBI-SIS. They'd be the State version of Major Crimes. They'd help local units investigate crimes that cross county lines, like the George Aurus case.\"\n\n\"Aren't you afraid they'll become like Ferrell's NTF was? Barreling in over local jurisdictions, taking over cases? Throwing their weight around?\" asked Chow.\n\n\"While I'm alive and SBI Inspector, and in charge of the SIS unit, that's not going to happen.\" I said. \"But I get your point. The problem is that cases like Aurus prove Katherine Woodburn's point about the SBI. We need something effective, but like George Washington said about the new American Government, it will 'depend upon the wise and the honest'. I believe you are just the man for that.\"\n\n\"I'll give it some thought sir.\" said Chow. \"A lot of thought, actually.\"\n\nI could tell he liked the idea. One more chess piece in place on the Iron Crowbar's chessboard...\n\nPart 16 - Come To Jesus\n\nMeanwhile...\n\nAs the sun was setting, illuminating the windows of Laura's office, which faced west, in a strange golden glow, Melina Allgood entered her sister's office. Laura was sitting behind her desk. Don's mother Phyllis had picked up the children and taken them home to the Mountain Nest.\n\n\"You wanted to talk to me?\" Melina said, coming up. She was dress in all black, including high-top running shoes.\n\n\"Have a seat.\" Laura said quietly. Melina sat down, seeing that Laura was very somber... and Melina knew that they were about to have what is called a 'Come To Jesus' meeting. Little would be left on the table after this.\n\n\"Are you aware,\" asked Laura, \"that a sniper tried to shoot and kill Carole or me the other day?\"",
        "\"I heard about it.\" Melina said. \"Someone kicked the scope into the bastard's face, then killed him.\"\n\n\"Yes.\" said Laura. \"Was that your doing? Killing the perp?\"\n\n\"No, I didn't even know about it until it was all over.\" said Melina. \"I was at a meeting of the Ladies Club at the time, too.\"\n\n\"I know.\" said Laura. \"I checked up on you on that. So, did you have someone go kill that perp? Did you have anything at all to do with it?\"\n\n\"No, Laura.\" Melina said. \"I had nothing to do with any of it, neither the perp nor whoever busted him. I had no knowledge the attempt was going to happen. And I thought it was a Mob retaliation for Don running those State Lab samples, and for busting the Pine Valley project.\"\n\n\"That whole business of him getting shot in the back in the City was retaliation for the Pine Valley case.\" said Laura. \"So... you recruited some Agents. One of them was codenamed 'Darkwave'. What happened to her?\"\n\nIf Melina was shocked, she rolled with it quite well, Laura thought. Melina said \"I'm not sure. She was part of my cell, my team, and then right around the time Don busted George Aurus, she disappeared.\"\n\n\"She went rogue.\" Laura said.\n\n\"I don't know.\" Melina said. \"She was 'disavowed' by my cell's leader, but I'm not sure she did anything to deserve it. I'm not exactly trusting of him myself, these days.\"\n\n\"Why would she go rogue, or do anything to get herself disavowed?\" Laura asked, looking hard at her younger sister. Love of blood did not necessarily top love of country at this moment.\n\n\"All I know,\" Melina said, \"is that she sent me a note saying thanks for all I'd done for her, and that she'd never betray me. That was the last I heard of her. I think she's working with someone on the outside, not in the Company, but I'm not sure who that is.\"\n\n\"You should think more like the Iron Crowbar does.\" said Laura. \"He is very aware of what is going on, and he is getting pissed off. I just have one more question for you, Agent 'Huntress'...\"\n\nLaura opened her desk drawer and took out a photo, a copy of the one that was on my whiteboards.\n\n\"Who is this man?\" Laura asked. Melina sat back, reeling in shock as she recognized him...\n\nTo be continued."
    ],
    "authorname": "WifeWatchman",
    "tags": [
        "mystery",
        "police drama",
        "crime drama",
        "iron crowbar"
    ],
    "category": "Non-Erotic",
    "url": "https://www.literotica.com/s/gods-and-crowbars-ch-03"
}
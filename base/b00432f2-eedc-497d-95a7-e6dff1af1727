{
    "title": "Do-It-Yourself Story Kit",
    "pages": [
        "I have written a few stories to date, and I have received some comments on how I should have done this or changed that. I receive all comments well and appreciate each and every one. Some have been good and some have been not so good. I try to use each comment to make the next story better or easier to read.\n\nI have noticed a pattern on some of the comments I have received on my loving wife stories. Most of the comments come from people that have not yet ventured into the writing side of Literotica. I don't want any of you to take this as criticism. Far from it, I know how difficult it is to take that first step. I myself took many years of reading on this site before I decided to plunge in and write my first story.\n\nThis piece is for those of you that need a boost in starting your first story. As per normal, I was in my usual frame of mind (out in left field somewhere). I was driving down the interstate with nothing better to do. And the thought of this do-it yourself story kit came to me. \n\nPlease use it and feel free to change it as needed, and you too can become a famous writer on the Internet. If this kit works for you please send your three easy payments of $14.99 to this site with instructions to forward them to me. And remember, as always I will not take responsibility for low scores or rude comments. If you have received bad or mediocre score, you fucked some thing up. I will not consider any refunds. Now continue on and write the best damn story Literotica has ever seen.\n\nMy name is ___________ (insert chosen name here) and I am a __________ (insert profession here) by trade. I am married to a beautiful woman, her name is _________ (insert wife's name here). We have been married for _____ (insert number of years here) years, and have ___ (insert number of children here) wonderful children. We first met in ____________ (insert location here), while I was _________ (insert your situation here) and _______(insert wife's name here) was __________(insert wife's situation here).\n\nLet me tell you a little about my wife. She has ________ (insert hair color here) hair, a _________(insert face type here) face, and _____(insert bra size here) breasts. She is _______ (insert age here) years old, but looks only_____(insert lesser age here). Her legs are_________ (insert leg length here) and ___________(insert leg shape here) but the most impressive feature is her _____________(insert feature here).\n\nOur sex life is____________ (insert type of sex life that you want to have here) and we enjoy, ________________________________________________(insert sexual preferences here).\n\nI have noticed some changes in our relationship lately. First ________ (insert wife's name here) seemed to be _________ (insert mood here) and she was _________(insert other mood here) while making love. I began to suspect some thing was wrong when she______________________________ (insert suspicion here). This was so unlike _________ (insert wife's name here) she is usually so __________ (insert condition here). I didn't want to confront her until I had more information. So I decided to __________________ (insert decision here).\n\nI would need proof when it was time to _______________ (insert appropriate legal action here). So I ___________________________________ _______________________________________________ (insert surveillance technique here).\n\nI was confused by _______ (insert wife's name here) actions. Why would she do this to me. I have tried to be a good husband and father. I remember the last time we made love _________________________________________________ _________________________________________________ _________________________________________________ _________________________________________________ (insert long gratuitous sex scene here).\n\nI had thought that I was man enough for her, maybe I am not. When she told me how much she loved me, was this another lie?\n\nBy the next week, I had all the proof I needed. The ________________________________________________ ________________________________________________ ________________________________________________ ________________________________________________ (insert detailed account of the surveillance proof here)\n\nI now had the proof I needed to confront _________ (insert wife's name here). It would be difficult, but I had to do it. She had betrayed me and broken our wedding vows. I could not forgive her for that, she could not be trusted. \n\nThat night after the kids were in bed, I called _______ (insert wife's name here) into the living room. I asked her sit so we could talk. I asked her why she would do this to me. Did she think I would never find out about ________________________________________________ ________________________________________________ ________________________________________________ ________________________________________________ (insert indiscretion here).\n\nAt first she tried to deny it, then I showed her ________________________________________________ (insert proof here). She knew that I had caught her red handed. She cried and told me it was a mistake, and that it would never happen again. She told me she didn't mean to hurt me and she loved only me.\n\n_______ (insert wife's name here) I can't trust you any longer. I intend to ________________________________________________ ________________________________________________ ________________________________________________ ________________________________________________ ________________________________________________ (insert appropriate revenge scenario here).\n\nAnd I will ________________________________________________ ________________________________________________  ________________________________________________ ________________________________________________ ________________________________________________ (insert further detail on planned revenge here). ________________________________________________ ________________________________________________ ________________________________________________ ________________________________________________ ________________________________________________ ________________________________________________ (insert optional revenge on wife's lover here)\n\nWell, it's been six months from the time I confronted ________ (insert wife's name here), and the divorce is final now. I can never forgive her for what she did to our family. I hope one day to find a new wife that will respect me and love me. My hope is that some day _________ (insert wife's name here) will see what she lost by her actions. An affair is not going to effect only one person in any marriage, please think of the consequences before you make the biggest mistake of your life.\n\nIf you have completed this form properly, you now have a story to submit. "
    ],
    "authorname": "leapyearguy",
    "tags": [
        "writing",
        "loving wives"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/do-it-yourself-story-kit"
}
{
    "title": "Solstice Ch. 23",
    "pages": [
        "Dear readers,\n\nWe've made it to the final chapter. There were over 120,000 reads of the first chapter. By chapter 22 there were just 7,000 of us left. Thank you for seeing this through with me.\n\nWhile writing this story I've killed off billions of people. As I'm sure you've figured out, someone is dying in this chapter. When writing a story, I get attached to the characters too. I love and hate them just as the readers do. This was a tough chapter for me to write.\n\nI appreciate the e-mails and comments I've gotten from you. Yes, even the ones that called me names, trashed my writing, and said that the story was dumber than a rock.\n\nI hope I haven't let you down with this final chapter. There will be no sequel.\n\nDocWords\n\nChapter 23\n\nFor the next year Alex worked on creating his environmental bubble using his own power with no success. He was frustrated. In times of trouble, he often went fishing to clear his mind. While standing on the boat dock, someone bumped into him, pushing him into the lake. To his surprise, he realized that he was underwater and not wet.\n\n\"What the hell?\" he said, noticing he could hear his own voice.\n\nHe looked around and saw that he was in a bubble. He touched it with his finger, and it vanished, soaking him in the process. He climbed out of the lake with a huge grin on his face.\n\n\"Sorry, Dad. I didn't mean to do that. I thought you knew I was here,\" Terra told him, laughing.\n\nAlex grabbed her right hand as another Alex grabbed her left, and they pulled her with them into the water. All three were in a bubble. Both Alex' concentrated, and the three, holding onto each other, were able to stand. Terra reached out to touch the side.\n\n\"Not yet,\" Alex said, as two more personas appeared.\n\nAll four Alex' joined hands and it began to rise. Slowly at first, then completely out of the water.\n\n\"Dad, how are you doing this?\" his daughter asked.\n\n\"Shhhh,\" he replied.\n\nThey continued to rise and were several feet above the surface of the water. The bubble began moving sideways over the bank.\n\n\"Terra, where were you headed?\" he asked.\n\n\"Home.\"\n\nThe bubble, just a few feet above the path, headed toward home. As they passed people, they rose to avoid them. Everyone who saw it was standing with their mouth agape. They stopped in front of the house.\n\n\"Call for your mom,\" Alex said.\n\n\"Mom! Mom! Mommm!\" Terra screamed.\n\nThe front door opened, and Ariana stepped out. She smiled, realizing what she was seeing.\n\n\"Can I touch it?\" she asked.\n\n\"One second,\" Alex replied, then lowered them to the ground. \"Okay, what's it feel like?\"\n\nShe touched the surface. \"It's smooth but feels solid.\"\n\n\"Ariana, pick something up and throw it at us.\"\n\n\"Like what?\"\n\n\"A rock or something.\"\n\nShe reached in the pocket of her gown and pulled out an apple. Ariana pitched it gently and watched as it bounced off. She picked it up again and threw it hard. It bounced off again.\n\n\"Put your hand on the bubble,\" Alex told her. She did as he said. \"Terra, try and take her hand.\"\n\nTerra reached for her mother's hand and passed through the bubble. She grasped her mother's hand and pulled. Their hands were now both inside.\n\n\"Keep pulling. Ariana, I want you to come in with us.\"\n\nIt took some trial and error, but after about a minute, she was inside with the others. Alex tried to raise them off the ground. It didn't move. Another Alex joined them. The five Alex' joined hands and the bubble rose several feet before returning to the ground and disappearing.\n\nThe personas disappeared and Alex slumped over on the ground.\n\n\"That was exhausting,\" he said, catching his breath.\n\nTerra and Ariana were on their knees with him to look him over.\n\n\"Relax, Dad,\" Terra said, worriedly.\n\n\"You did it. Alex, you did it!\" Ariana added, smiling.\n\nIn a moment, Alex sat up. He picked up the apple his wife had thrown and took a bite. \"I'm starving.\"\n\n\"Oh Alex! That was on the ground.\"\n\n\"Only for a few minutes,\" he said, taking a second bite.\n\nThere was a crowd around them as Aphrodite walked up.\n\n\"Did you fall or something?\" she asked.\n\n\"I made the bubble, mom. It's not strong yet, but I made it,\" he said, biting the apple again.\n\n\"The protecting bubble?\"\n\n\"Yes. We rode in it from the lake.\"\n\nShe and Ariana shared a quick knowing look before looking back at Alex. \"It's going to have to be really strong to work,\" Aphrodite reminded him.\n\n\"I know, but it's a start.\"\n\n*****\n\nThe progress was slow. He knew he would have to include Ariana's orgasm energy, but before that, he needed to use all his to make it as strong as possible. Beginning with a strong bubble, then adding her energy, would give them the power they would need.\n\nAlex rarely walked more than a few feet from then on. He was in a bubble and guiding it, sometimes alone, and sometimes with multiple personas. He learned how to make it strong and safe from normal everyday hazards. Alex spent hours with Urania to learn what he would be up against when the time came to really use it. He knew, without a doubt, this was going to be dangerous for all three occupants.\n\nHis first big test was fire. Alex began with eight of his personas and a large bonfire. The whole community was there to watch his test. The fire was lit as they looked on. He created the bubble and drifted upward and over the large fire, then descended into it slowly. The upward hot air current made it difficult to control. The fire burned for hours as Alex sat comfortably in the middle of the smoke and flames. His ninth persona was with Urania. Since all personas could see and feel what the others did, he was able to share his observations and experiences with her in real time.\n\n\"Dad, start reducing the number of personas. We should know how many it actually takes to stay safe. Remove them one at a time. If anything changes after removing one, get out,\" Urania told him.\n\nAlex began removing his personas one at a time about every ten minutes. By the time he got down to three, Alex could tell it was becoming harder to control and he would tire soon. Rather than stop, as Urania suggested, he added a fourth persona which brought him back to full strength.\n\nAlex called off the experiment after about eight hours due to his hunger, thirst, and fatigue. He knew that if there had been provisions for everyone in the bubble he could have continued longer.\n\nThe following day he met with Aphrodite, Ariana, Terra, Demi, Alexandra, Helen, and Urania to brainstorm.\n\n\"I need some clue how long we're going to be in the danger zone,\" he said, hoping one of the group would have some idea.\n\nAphrodite was the only one with any clue. \"Less than an hour. Ariana will need to make contact with the air and water. Terra will need to do the same with the soil.\"\n\n\"Do you know how fast the cleansing goes?\" Urania asked.\n\n\"It'll begin immediately, but will take right at a year to complete,\" Aphrodite replied.\n\n\"Xanadu time?\" Urania asked.\n\n\"Yes.\"\n\nUrania did some calculating in her head. \"Terra time that means three years. The cleansing will proceed at about one mile an hour. All they need to do is get it started?\"\n\nAphrodite hesitated before answering. \"Yes. What other testing are you planning?\" she asked, changing the subject.\n\n\"I'm going into the upper atmosphere and underwater. I can test how it holds up in both low and high pressure,\" Alex replied.\n\n\"When are you including me and Terra?\" Ariana asked.\n\n\"After those tests, assuming they're successful.\"\n\n\"Alex, you're going to require a much stronger power source than just yourself,\" Urania reminded him.\n\n\"Covered. That's where Ariana comes in with her orgasm power.\"\n\n\"Do I get to orgasm too?\" Terra asked, grinning.\n\n\"We all will. Probably several times,\" her father replied.\n\n\"Alex, are you sure you can keep the bubble intact and cum at the same time?\" Ally asked.\n\n\"I haven't tried, but I think so.\"\n\n\"I'd be happy to volunteer to assist in that test,\" Demi said smiling.\n\n\"So would the rest of us,\" his mother added.\n\n\"That will need to be at night and should probably be done over the water,\" Urania told them.\n\n\"Why?\" Alex asked.\n\n\"The bubble is transparent. There are kids watching. Thus, the nighttime. Over water, because if it fails, falling in water is less dangerous than falling to the ground,\" Urania reminded him.\n\n\"Good points.\"\n\n\"I also think you need to take food and water on this venture. If you're going to be cumming as much as I suspect, you'll need that to keep your strength up,\" Urania advised.\n\n\"Have you tried teleporting in the bubble?\" Aphrodite asked.\n\n\"Only locally so far.\"\n\n\"You need to do that too. That's how you'll be getting there,\" his mother replied.\n\n\"I'll do that alone the first few times before risking someone else.\"\n\n\"Alex,\" Urania said, excitedly. \"I hadn't thought about this before. If you were in Hiroshima on August 6, 1945, you could give your shield a real test.\"\n\n\"Why then and there?\" he asked.\n\n\"It's when they dropped the a-bomb,\" Alexandra said.\n\nAlex swallowed hard. \"I'm not sure I wanna do that.\"\n\n\"If it survives that, it'll survive the cleansing,\" Urania said.\n\nAlex thought for a moment then looked at his mother. \"If I lose a persona, or two, will I survive that?\"\n\n\"Yes, but those personas will be gone for good,\" Aphrodite said.\n\nHe looked at Urania. \"We need to know.\" She nodded.\n\n\"Alex, no! That's crazy,\" Ariana barked. Terra put her hand on her mother's and smiled knowingly. \"You're right. We need to know,\" Ariana said.\n\nThey talked for about another thirty minutes before going their separate ways. Alex went with Terra to play with his daughters, Sol and Luna. If he wasn't working with his bubble, that's generally where he could be found. Toddlers now, they were daddy's girls. They loved riding in daddy's big ball, and he often took them places with him. They were his joy.\n\nAlex teleported several times alone before trying it with someone else. Helena was the first.\n\n\"Where would you like to go?\" he asked.\n\n\"What are my options?\" she laughed.\n\n\"Somewhere you've been or would like to go, maybe?\"\n\n\"All those places were destroyed, remember?\"\n\n\"We're able to go back in time, not just to a place.\"\n\n\"Can I meet Brad Pitt?\"\n\n\"Sorry, it only works on places. We'll be the only ones there,\" Alex replied.\n\n\"Well, shit! I was hoping to give Brad a blowjob.\"\n\n\"We can go to his house, and you can give me a blowjob,\" Alex suggested, grinning.\n\n\"If I'm giving you a blowjob I'd rather do it someplace besides Brad's house. Let's see.\" She thought for a moment. \"How about the front steps of the White House?\"\n\n\"The White House? In Washington D.C.?\"\n\n\"Yep, even Monica Lewinski never did that.\"\n\nAlex laughed. \"You're sure?\"\n\n\"I'm pretty sure.\"\n\nAlex created the bubble and then vanished with his aunt. Instantly, they were standing between the front columns of the White House. Helena looked around then dropped her gown.\n\n\"Can we go in?\"\n\n\"Sure,\" Alex replied, opening the front door.\n\nShe led him inside and to the oval office. \"Mr. President, take off that gown and have a seat on your desk. It's time for your State of the Union BJ.\"\n\nHelena sat in the president's chair and patted the desk in front of her. Alex took off his gown and sat where she indicated. His cock was already hard knowing what was coming. She rolled the chair up between his legs and gingerly took her nephew's cock in her hands. She began stroking him then took him into her mouth for a few minutes then stopped.\n\n\"Okay, back out to the porch. This is where I take the title,\" Helena said.\n\n\"What title is that?\" Alex asked, climbing off the desk.\n\n\"Official White House cocksucker.\"\n\nShe grabbed his cock and led him out the front door. Kneeling in front of him, she took Alex in her mouth again and began sucking in earnest as she rolled his balls in her palm. Helena owned him and soon had her mouth, face, and chest covered in her nephew's cum.\n\nAs she came a moment later, Alex created another bubble and got behind her. Once his cock was inside her, the bubble rose into the air. Alex pounded his aunt as they did a low-level pass over many of the historic sites of the capital. As they settled onto Lincoln's lap in the Lincoln memorial, he filled her pussy with his cum. She was trembling and bucking as she experienced it, then lay forward resting her head on Lincoln's left arm.\n\n\"Thanks, Abe. I needed that,\" she said softly.\n\nAlex and Helena teleported back home then Alex went see Urania.\n\n\"The A-bomb trip won't work. The shockwave, if it didn't destroy the bubble would blow it away.\"\n\n\"Dad, I never intended you to be there when it went off. Maybe ten or fifteen minutes later, with several personas. That reminds me, Grandma said that if you lose a persona, it's gone for good. Always leave at least one at home. How well are you able to control it when you cum?\"\n\n\"Seems to be working fine. During the orgasm part we'll be sitting still. I just have to maintain the strength.\"\n\n\"Does it get stronger when you cum?\"\n\n\"Yeah, and I suspect that when Ariana cums it'll get a lot stronger.\"\n\n\"Time to take her for a test drive. Maybe Ariana and Terra both?\" Urania asked.\n\n\"Yeah, but somewhere relatively safe.\"\n\n\"Pick somewhere that's geographically similar to where you plan to do the cleansing. Level, slow moving water close to the ocean,\" she said.\n\n\"I grew up in Colorado. I have no clue where to go,\" Alex replied.\n\n\"Grandpa Adonis swam with manatees in the Crystal River. It's on the west side of Florida. From what I saw in his memories, it looks like a perfect place. Touch my hand. I'll show you where it is,\" Urania told him.\n\nAlex touched her hand and saw a map in his mind. \"That works for me. Let me go see what Ariana and Terra are up to.\"\n\nAlex vanished and popped into his living room.\n\n\"Anyone wanna go to Florida?\" he asked.\n\n\"I do! What's Florida?\" Terra asked.\n\nAlex and Ariana laughed. \"It used to be one of the go to vacation spots,\" Ariana replied. \"I went to Daytona Beach on spring break. It was party city.\"\n\n\"Wrong side of Florida. We're going to the gulf side,\" Alex told her.\n\n\"If you're taking us to Florida, I want the Atlantic side,\" Ariana said, pouting.\n\n\"Fine. We'll go to Daytona.\"\n\n\"When are we going?\" Terra asked.\n\nHe stepped over and took their hands. \"Right now.\" The bubble formed around them with three additional personas. The six vanished, then materialized over the sand at Daytona beach.\n\n\"This is gorgeous,\" Terra remarked, looking around.\n\n\"It's much prettier without all the drunk college kids,\" Ariana chuckled.\n\n\"I'm going to take us up. We need to find just the right spot.\"\n\nThe bubble began to rise quickly. \"Alex, are you sure this thing's safe?\" Ariana asked, anxiously.\n\nAll the Alex' were looking around. \"There, on the waterway. Minimal surf. Uh, yeah, it's safe,\" Alex replied.\n\nThe bubble lowered and sat down on the sand where it was just touching the water. It moved gently with the surf.\n\n\"We need to test a couple of things here. Any clue how you'll actually be doing the cleansing?\"\n\n\"I'll need to be in contact with both the air and water. Terra will need to be in contact with the land.\"\n\n\"For how long?\" he asked.\n\n\"However long it takes,\" Ariana replied.\n\nFour more Alex appeared. \"When we go there'll be ten of us. Just like now. The bubble is as strong right now as I can make it. You'll both need to be cumming when we arrive and keep cumming until you make the contact. Both of you try and make contact now,\" he told them.\n\nAriana and Terra both reached for their spots. \"I can't get through. Back off a little,\" Terra said.\n\nAlex removed one persona at a time. When it was just a single Alex and the two women inside, they managed to reach their marks.\n\n\"Okay, let's try again with you both cumming.\"\n\n\"Dad, wouldn't it have been simpler to just ask one of us for a blowjob?\" his daughter asked.\n\nHe grinned at her. \"Probably so.\"\n\nAriana knelt and raised his gown. She stroked him to get him hard. It took only a few seconds, and she began sucking him.\n\n\"When I cum, share it. Try to reach through the bubble during your orgasm.\"\n\nTerra knelt next to her mother and began licking her father's balls. Alex smiled watching these two women he loved so much giving him so much pleasure. He felt himself building quickly and soon began to cum. Ariana took the first stream into her mouth then aimed the second at her daughter. She collected the remainder in her hand. As the women came, they tried pushing their finger through the bubble with no success.\n\n\"Let's try it with just one of us,\" Ariana said, dipping her finger into the cum.\n\nShe held it to her daughter who licked it clean. When Terra came, they tried again. Still without success.\n\n\"Shit!\" Alex said, as he removed the bubble. \"Shit, shit, shit!\"\n\n\"What's wrong?\" his daughter asked.\n\n\"You can only get through when the bubble is at its weakest. I want the fucking thing strong. Our lives depend on it.\"\n\nAriana and Terra looked at each other. Both knew what the other was thinking.\n\n\"Alex, when the time comes, the bubble will do exactly what it's supposed to. Just like the hurricane did. Relax,\" his wife told him.\n\n\"Ariana, I'd rather die than let something happen to either of you. I couldn't live with that,\" he replied.\n\n\"Dad, we feel the same way,\" Terra said. \"Experiment over. I wanna see the waves and jump in the ocean.\"\n\n\"Me too,\" Ariana said.\n\nAlex formed a new bubble and they floated over the waterway to the outer banks. The moment the bubble released them, both women were naked and running into the surf. They stayed at the beach playing together for about an hour before returning home.\n\n*****\n\nDemi walked to her mother. \"Mom, in a few minutes, Alex and Urania are going to have a talk. You need to be there.\"\n\n\"Why?\" Aphrodite asked.\n\n\"He discovered that the only way for Ariana and Terra to begin the cleansing is to drop almost all power to the bubble. He doesn't want to do it.\"\n\n\"Where are they?\"\n\n\"Library.\"\n\nAphrodite stood and headed for the library. She arrived just as Alex did.\n\n\"Hi sweetheart. Fancy meeting you here,\" she said, smiling.\n\nHe kissed her. \"Gotta talk to Urania. I've run into a problem with the bubble.\"\n\n\"Mind if I sit in?\"\n\n\"Not at all. I need all the help I can get.\"\n\nThey went inside and found Urania exactly where they expected. She was at a large table with piles of papers on it. Most were in her own handwriting.\n\n\"Urania, I've got a problem.\" She looked at his crotch. \"Not that kind of a problem. I took Ariana and Terra to the beach to test out the bubble. The only time they can get their hands through is when it's just me controlling it.\"\n\n\"How about when they're cumming?\" she asked.\n\n\"Still no. I can't protect us by myself. We've got to come up with another way or we can't do it,\" he replied.\n\n\"Alex, you don't really have a choice,\" Aphrodite said.\n\n\"The hell I don't. If I can't protect them, I'm out.\"\n\n\"The planet has to be cleansed. You're the only one that can safely get them in there to do it,\" his mother said.\n\n\"Getting them in isn't the problem, mom. They need to touch the air, water, and soil. The only way they can do that is if I weaken the bubble. If I do that they'll be exposed to the radioactivity and poison gas. They'll die.\"\n\n\"So will you, Alex,\" Urania added.\n\n\"I don't give a crap about me. I'm only risking my eight clones.\"\n\n\"Alex, listen to me,\" Aphrodite began. \"You're the only one that can get them there safely.\"\n\n\"Mom, there's gotta be a way you can help. I can't do it alone.\"\n\n\"Look at my face. Have I aged recently?\"\n\n\"A little, I guess,\" he replied.\n\n\"I don't want to be rude, but it's more than a little,\" Urania said.",
        "Aphrodite gave her a sideways glance then smiled. \"Careful, you're on thin ice, little girl.\" Urania blushed. \"She's right. Keeping Xanadu alive is draining me. We have six months before we begin the cleaning. That takes a year. Then we put plants on it. That's six more months. Once we have plants, we add the animals. Six months later we move. That's two and a half more years. I'm cutting it really close strength wise. If we have no delays, we'll make it. If you, Ariana, and Terra fail, everyone in Xanadu is going to die.\"\n\n\"Fuck!\" Alex snapped.\n\n\"Dad, you're going to have to go in strong. With all eight personas, Ariana, and Terra cumming, then drop your bubble. I've calculated from what Grandma said about how fast it works. It'll clear an area with 1.4 feet per second once it begins. In less than five seconds you'll have a space large enough for the three of you. Five seconds, Dad.\"\n\n\"Can we survive five seconds?\" Alex asked.\n\n\"That I can't answer yet. I don't have enough information,\" Urania replied.\n\n\"Fuck! Fuck! Fuck!!!\" he shouted, as he paced around the room. \"Ariana and Terra need to be told of the risk.\"\n\n\"I agree,\" Urania said.\n\nWhen Alex left, he went to his wife and daughter and explained the situation to them. They still wanted to proceed.\n\n*****\n\nAfter a long discussion over the next week, it was decided to cancel the A-bomb test. If it was successful, they would gain a small amount of information, but if it failed, they were all doomed. The risk didn't outweigh the benefits.\n\nAlex continued his other testing and learning to control the bubble but failed to discover an alternative.\n\n*****\n\nThe day before the cleansing, Alex' stress level had reached its max. Ariana suggested that Alex get away with Terra for the day. He agreed but also had a persona with Ariana. Both women wanted to spend the day with family and friends. Neither showed any indication of fear or nervousness.\n\nIn the evening, Ariana wanted alone time with Alex. They had a nice dinner for two then retired early to their room.\n\n\"Alex, can you turn off your enhancements?\"\n\n\"Yes. Why?\"\n\n\"Make love to me tonight. Let's just be a regular husband and wife. No magic pre-cum, enlarging dick, or super cum.\"\n\n\"May I ask why?\"\n\n\"I fell in love with you when I was a little girl. When I became a big girl, we made love. Not once in all these years have we ever just made love. Between your superpowers and elixirs, we've always been enhanced. I want to know what it's like just being people who love each other.\"\n\n\"What if I'm lousy in bed?\" he asked, with a curt smile.\n\n\"I guess I'll have to dump you. Shut up and make love to me.\"\n\nAlex looked at his sister. \"You know I love you, don't you?\"\n\n\"Yes, I know that. I also know that you know I love you. Are you going to make love to me, or talk all night?\"\n\nHe didn't answer with words as his lips met hers. Both moved slowly, as if it was their first time together. No part of her body went unexplored as he proceeded. Alex kissed and nibbled his way down as she cooed. She almost came when he kissed her mons the first time. Sensing it, he backed off. She would cum when he was ready. He edged her for what seemed to Ariana as hours. When he finally began tonguing her clit, she exploded with a moan that could be heard throughout the entire house. Her hips raised completely off the bed as she came. Ariana's entire body shuddered before finally dropping back onto the bed. Alex watched her as she slowly began returning to the present and smiled.\n\n\"Wow!\" she whimpered. \"That was the biggest of my entire life.\"\n\n\"Oh bull. You had bigger when you took that elixir,\" he replied.\n\n\"Not bigger, just more explosive. This one lasted longer than anything we've ever done. Come up here. I need you inside me.\"\n\nAlex moved up and positioned himself between her legs then slid his cock into her. As they began slowly moving on each other she looked into his eyes and smiled.\n\n\"Troubled?\" she asked.\n\n\"Worried about tomorrow. If anything happened to you or Terra, I'd never forgive myself.\"\n\n\"Alex, you've given me everything I ever dreamed of and more. Tomorrow, you, me, and Terra are going to create a world for the children of Gaia. I'm willing to take whatever risks I need to, with you, to accomplish that. Terra is too. Tonight, I need you to hold me, make love to me, and be completely in the present. Will you do that for me?\"\n\nAlex smiled then kissed her. \"I can do that. God, I love you.\"\n\n\"And I love you...until the end of time,\" Ariana replied.\n\n*****\n\nTwo rooms away, Alex and his daughter, Terra, were laying together.\n\n\"I thought you'd be with Titanus tonight.\"\n\n\"No, tonight I wanted to be with you. He's busy with one of the others tonight,\" she replied.\n\n\"Anxious about tomorrow?\" he asked.\n\n\"Not at all. I'm excited. Tomorrow I fulfill my other destiny.\"\n\n\"Other destiny?\"\n\n\"My first was to give you our daughters, Sol and Luna.\"\n\n\"What treasures they are,\" he said, smiling.\n\n\"They love their daddy. So does their mom. I want you to always remember that.\"\n\n\"I'll remember,\" Alex replied, kissing her.\"\n\nTheir hands began caressing each other and soon they were physically joined.\n\n*****\n\nAlex was up early and drinking coffee with his mother.\n\n\"Alex, when you're there today, Ariana and Terra are going to need more help than just the bubble.\"\n\n\"What kind of help?\" he asked.\n\n\"In order to begin the cleansing, they're going to need your fertile sperm to give them the power to do it.\"\n\n\"That shouldn't be a problem.\"\n\n\"They'll tell you what they need and when. Listen to them. If you don't, you'll all fail.\"\n\n\"Mom, I'll listen.\"\n\n\"Don't just listen, do what they tell you.\"\n\n\"Mom, I know how important this is. Trust me.\"\n\n\"Promise me,\" she said.\n\n\"Fine! I promise,\" he said, somewhat annoyed by her persistence.\n\n\"You're keeping one persona here?\"\n\nAlex chuckled. \"Yes, mother. We've been over this multiple times.\"\n\n\"Just making sure,\" Aphrodite replied.\n\n*****\n\nThe cleansing was planned for noon. With the importance of the event, it was to be based in the assembly hall with most of the adults in the community.\n\nAfter one last review, Ariana, Terra, and eight Alex personas went onto the platform and removed their robes. The other Alex stayed nearby with Aphrodite, Demi, Alexandra, and Urania.\n\n\"Alex, follow their instructions,\" Aphrodite said.\n\nAll nine Alex' gave her a thumbs up and smiled. Ariana and Terra got on their hands and knees. An Alex got behind each and began fondling their pussies. Once wet, they slipped their cocks inside.\n\n\"When you're both cumming we'll go,\" Alex told his wife and daughter.\n\nThey nodded as they began moving on the cocks inside them. As soon as they began to flush, a moment later, all the Alex' joined hands. The bubble appeared as both Alex' came in the women. A few seconds later, Ariana and Terra came. The bubble and all ten occupants disappeared.\n\nThey were inches above the ground with soil beneath them. The bubble moved laterally and stopped where one side was over land and the other above water. The air outside the bubble was so clouded there was no visibility. Alex set them gently on the ground.\n\n\"Weaken it so we can get through,\" Ariana said.\n\nAlex slowly eased off. \"I don't like this,\" he said, but continued.\n\n*****\n\n\"They're in and easing down the bubble strength. Everything seems good so far,\" Alex, in Xanadu, said. \"Almost there...hands are through.\"\n\n*****\n\n\"Weaken a little more,\" Terra said.\n\n\"Be ready. We're going to need the dimiourgo sperm in a second,\" Ariana advised.\n\nOne at a time, the Alex personas began to fade. They'd never done that before. They had always just vanished.\n\n\"Something's wrong! We've gotta stop,\" Alex shouted.\n\n\"No! Keep going,\" Ariana insisted.\n\n\"Now, dad!\" Terra shouted as only the last two Alex remained.\n\n\"Dimiourgo!\" Alex screamed.\n\nHis personas both came, then vanished. The bubble was gone and replaced by a spinning wind that was clearing the air and expanding around them. As Ariana and Terra came, their bodies began to wither and fall.\n\n*****\n\n\"Noooooo! Oh god! No!!\" Alex, in Xanadu, screamed, as he vanished.\n\nAlex stood within the whirlwind. It had grown to a width of about five feet and was completely calm in the center. Where Ariana and Terra had been there was nothing.\n\nAlex screamed at the top of his lungs. \"NOOOO!!!!\"\n\nHe began pounding the ground repeatedly as he screamed and cried. The ground began to shake and tremble, both on the ground and in Xanadu.\n\n*****\n\n\"They've done it,\" Demi said, just as the shaking started. \"Mom?\"\n\n\"That's Alex. He's there. His anger is causing the quakes,\" Aphrodite said.\n\n\"Why's he angry?\" Urania asked.\n\n\"All eight personas, Ariana, and Terra, are gone,\" Demi replied.\n\n\"Oh God,\" Alexandra said, crying.\n\nDemi took Ally in her arms. \"They knew this was a one-way trip,\" she said, as she began crying.\n\n\"That's why Terra asked me to take care of the girls?\" Ally asked. Demi nodded. \"I need to go to them. This is going to kill Alex,\" she sobbed.\n\nDemi looked at her mother. Aphrodite looked as if she'd aged ten years in the last few minutes as tears streamed down her cheeks too. Aphrodite turned and left the building.\n\n\"Someone tell us what's happening,\" a woman called out.\n\nUrania stepped onto the platform then turned to the crowd. \"They were successful getting the cleaning started, but we lost Ariana and Terra doing it.\"\n\n\"They died?\" someone asked.\n\n\"Yes, along with eight of the nine Alex,\" Urania replied.\n\nThere was a lot of mumbling within the crowd. \"We should honor them,\" Chen, from the China group said.\n\n\"Name the planet Terra, and the ocean Ariana,\" someone shouted.\n\nThe assembly leader stood. \"All in favor?\" she asked. The group roared. \"Opposed?\" There was silence. \"Motion passed. Can we have a moment of silence?\"\n\nThere was utter silence for a moment then people began leaving. Within an hour there were flowers picked and surrounding the house where the two women had lived.\n\n*****\n\nBy the time Alex raised his head, the whirlwind had grown to over a hundred yards across. He looked up and saw a clear blue sky. The water next to him was crystal clear. Even knowing that they had succeeded, didn't lighten his guilt. \"I failed you. Oh god, I failed you,\" he said. \"Ariana, Terra, I'm so sorry.\" Alex vanished.\n\nAphrodite was sitting alone in the grass near the lake. Her head was down. Tears dripped into her lap as she felt Alex' presence behind her.\n\n\"Mom, I failed them. They're dead,\" he cried.\n\nShe stood and turned to her son and held out her arms. He walked up and melted into her.\n\n\"You didn't fail. They knew they wouldn't be coming back.\"\n\nAlex pulled back. \"What? You knew? They knew?\" he asked angrily.\n\n\"It was the only way,\" she said.\n\n\"You should have told me! We wouldn't have gone.\"\n\n\"That's why I couldn't tell you.\"\n\n\"Who else knew?\"\n\n\"Demi and Helen, they're the oracles.\"\n\n\"No one else?\" he asked, angrily. Aphrodite shook her head. \"Fuck you, Demi, and Helen! I never want to see your faces again.\" Alex vanished.\n\nAphrodite walked back to the house a while later.\n\n\"Mom, have you heard from Alex?\" Demi asked.\n\n\"Yes, he came to me a couple of hours ago. When he found out that you, Helen, and I knew what would happen, he got angry and left.\"\n\n\"Where is he?\" Ally asked.\n\n\"I don't know. He's not in Xanadu.\"\n\n\"I can't sense him,\" Demi replied.\n\n\"We need to leave him alone for now. He's really hurting. Let's give him space,\" Aphrodite said.\n\n*****\n\nAlex materialized at the old family home in Colorado, in Ariana's room. Laying on her bed, his mind was filled with her memory. He cried himself to sleep. Alex had no idea how long he slept, but still felt exhausted. He picked up a picture off her dresser of happier times. It was a picture with them when they were both teens. He started crying again.\n\n*****\n\nLife in Xanadu was somber for the next few days. Only 'the old ones' had known death. Over time, the flowers in the yard discolored and wilted. Sol and Luna picked them up and planted a small flowerbed for their mother and grandmother. Ally, as she had promised Terra, spent a lot of time with them. They all cried often. The girls were about fifteen in Xanadu time. Except for their father's absence, their lives slowly returned to normal.\n\nAbout a month had passed when Helen came to them as they tended the flower bed. \"Your dad has been coming to the gardens to eat. He comes just before sunrise every day. He always starts at the tomatoes.\"\n\nThe girls looked at each other and smiled.\n\n\"Thanks, Helen,\" Sol said.\n\n\"You're welcome,\" she replied.\n\nThat evening the two girls spent time learning to make cookies with their aunt Ally. At bedtime they headed to the gardens. One carried a blanket, the other had the cookies with her. They spread out the blanket near the tomato garden and waited.\n\nWhen Alex arrived early in the morning, he saw them. Both were asleep. He walked to them and sat on the ground near them and lightly kissed each on the cheek, trying not to wake them.\n\nLuna opened her eyes and smiled. \"Hi dad.\"\n\n\"Hi baby. I've missed you.\"\n\n\"We've missed you too,\" Sol agreed.\n\n\"We made you some cookies,\" Luna told him, as both girls sat up.\n\n\"You made them?\"\n\n\"With Ally's help,\" she replied.\n\nSol handed him one. He tasted it and smiled. \"Delicious. Thank you.\"\n\nLuna handed him a folded piece of paper. \"Mom left this for you.\"\n\nAlex looked at it and teared. Then slowly opened it and began reading.\n\nDaddy,\n\nI imagine you're hurting pretty bad right now after what happened. I'm also pretty sure you're angry too. You shouldn't be.\n\nA couple of years ago Demi saw the future and realized what would happen. She talked to grandma about it, hoping that as Gaia she could change it.\n\nGrandma explained that trying to hold Xanadu together was draining her. She no longer had that kind of power. Grandma talked to Mom and me and explained it. We both agreed that our sacrifice would be small if it would save everyone else. We agreed immediately to go through with it. Helen, when she turned eighteen, saw the future too. We told no one else.\n\nOur biggest concern was you. We knew how much you loved us and that if you knew what was going to happen, you'd never allow it. The five of us agreed to hide it from you. The people of Xanadu needed our small sacrifice to survive. We couldn't tell you.\n\nMom probably knew you better than anyone. Her biggest concern was what would happen to you afterward. She knew you'd be devastated. We all did.\n\nYour sacrifice was far greater than ours. We're with Gaia now and you're still in Xanadu, probably alone, and hating yourself for not being able to fix it. You aren't alone. Sol and Luna will always be there for you. They need you as much as you need them. They were conceived the day after I found out about the future. They're my gift to you. They'll help you to remember, but they'll also help you to forgive us for deceiving you.\n\nYou need to forgive Demi, Helen, and your mom. They did what was best for over a thousand people even though they knew how much it would hurt you. They love you enough they could do that, knowing they might lose you forever. Please don't let that happen.\n\nOne day, hopefully many years from now, you'll be with us again in Gaia. We aren't gone. We're with you with every step you'll ever take.\n\nI love you. I always have and I always will.\n\nTerra\n\nAlex was crying shortly after he started reading. When he finished, he handed the note back to his daughter.\n\n\"I think it's time to come home, huh?\"\n\nBoth girls nodded and the three embraced for a long time. He had the girls read the note as they sat there eating the cookies. They gathered up the blanket and walked back to the house. Alex sent the girls off to bed then made a pot of coffee. He poured two cups and walked to his mother's room.\n\nShe looked at him as he walked up beside her bed. \"I understand now,\" he said, offering her a cup of coffee. \"I'm sorry for what I said. Can you forgive me?\" he asked, tearing.\n\n\"Welcome home, my love,\" she said, as she held her arms out to him.\n\nAlex set the coffees on the table and went to her. Their lips met as they embraced. Aphrodite tore his clothes off as they began exploring each other with their hands and lips.\n\nAlex worked his way down her body as he explored and took her nipple into his mouth, teasing it with his tongue before moving to the other. Her fingers ran through his hair as she held him close. Alex continued his journey to her nether parts and kissed, nibbled, and licked his way. As he reached her groin, she drew her legs apart for him. Alex' tongue stroked her right up the middle between her labia. She moaned loudly as his tongue entered her.\n\n\"Alex, turn around. I need some breakfast too.\"\n\nAlex repositioned himself and his mother crawled on top of him, offering her pussy and taking him in her mouth. With her first taste of his pre-cum she flushed. He felt her clit get rock hard and teased it with his tongue.\n\n\"Mmmph, mmph,\" she mumbled as her pelvis rocked on her son's face. He felt her stiffen and sucked her clit into his mouth. Aphrodite groaned loudly as she came. She took him into her mouth completely, and in seconds, Alex was filling her mouth with his warm offering. Just as she began to relax her second orgasm overwhelmed her. She rode through it with him deep in her throat, causing Alex to explode again. Alex pulled out as she came a third time from his cum. Her moans were heard throughout the house.\n\n\"Alex is home,\" Demi said to Alexandra.\n\n\"Something tells me they're just getting started. Shall we have a little playtime of our own?\" Ally asked.\n\nDemi didn't answer as she turned putting her face in her wife's pussy and offering her own.\n\nTitanus was sleeping with Helen and Urania just one room farther away. All three chuckled and started a party of their own.\n\nSoon, there were moans coming from all over the house. The only two that managed to sleep through it were Sol and Luna, who had been up most of the night.\n\n*****\n\nLife, for the most part, returned to normal. Alex slept with his mother full time, but still made an occasional visit elsewhere. At festivals and celebrations, he stayed with Aphrodite and rarely participated. He spent a lot of his time with his daughters, Luna and Sol.\n\nJust before the fall equinox they came to him and invited him on a picnic. Both had just turned eighteen.\n\n\"Dad, we need a favor,\" Sol told him.\n\n\"What's that?\"\n\n\"We want you to be our first,\" Luna replied.\n\n\"Why not Titanus, he's papas?\" he asked.\n\n\"Because we love you,\" Luna said.\n\n\"Not to mention, we heard you're the best,\" Sol grinned.\n\nAlex laughed. \"Who told you that?\"\n\n\"Everybody that's been with you both,\" Sol replied.\n\n\"Yeah, and rumor has it you have special talents,\" Luna added.\n\n\"Check with Titanus, Demi, Ally, and Aphrodite. If they're okay with it, I am too.\"\n\n\"Already done. They're fine with it,\" Sol replied.\n\n\"I guess we're good then,\" he chuckled.\n\n\"We want to spend the night with you too. So, you can teach us.\"\n\n\"I could teach you much of it, but a woman would be better for some things.\"\n\n\"Aphrodite has volunteered to join us for that part,\" Luna grinned.\n\n\"Sounds like you have this all planned out.\"\n\n\"She also said we can join you two in your big bed whenever we want,\" Luna laughed.\n\n\"I think I'm too old for that.\"\n\n\"Oh bull. We hear you guys two or three times a day,\" Sol replied.\n\n\"That's probably Titanus.\"\n\n\"Nope. He makes them moan a couple of times. You make them scream a couple of times,\" Luna said.\n\n\"And moan lots of times,\" Sol added.",
        "Alex grinned at them.\n\n*****\n\nAlex went back to the house after the picnic and up to Aphrodite. \"What have you been telling my daughters?\"\n\n\"Moi?\" she asked, grinning.\n\n\"Yes, you.\"\n\n\"Truth, the whole truth, and nothing but the truth. So, help me, me,\" Aphrodite replied.\n\n\"Is Titanus having problems?\" Alex asked.\n\n\"I wondered about that and asked Helena to test him. She said he's better than your father ever was. He can't hold a candle to you though.\"\n\n\"I owe that all to you, my dear wife, mother, and goddess.\"\n\n\"The physical abilities, partially. The attention to detail is all yours.\"\n\n\"Thanks. Wanna fool around?\" he asked.\n\n\"Sorry. I have a date with Nomena this afternoon. I'd be more than happy to share your bed when I get back.\"\n\n\"Deal.\"\n\n*****\n\nIt was on Saturday afternoon of the solstice that Alex was called to the platform. Helen was hostess and Urania sucked him to have cum available. Demi and Ally brought Sol and Luna up. Sol was to go first.\n\nHelen walked to Sol. \"Are you eighteen?\"\n\n\"I am.\"\n\n\"Are you a virgin?\"\n\n\"I am.\"\n\n\"Do you want your father, Alexander, to have your virginity?\"\n\n\"Yes, I do.\"\n\n\"You may prepare her,\" Helen told Demi and Alexandra.\"\n\nThey stepped forward and dropped her gown, then sat her on the raised bed. Alex stepped up to her.\n\n\"You're sure you want me to do this?\" he asked his daughter.\n\n\"Yes, dad. I want you to be my first.\"\n\nAlex smiled then kissed her. Demi and Ally helped her lay back then held her legs up and apart. Urania collected pre-cum from Alex and touched it to Sol's tongue. She flushed immediately as Alex knelt and licked her labia.\n\n\"Oh god,\" she whimpered.\n\nAlex progressed to licking everywhere as she began to rock her pelvis. He stood and Ally helped him line up. He nodded to Urania who touched cum to Sol's tongue. When she bucked and came a moment later, he pushed himself past her hymen then stopped.\n\n\"Oh my god, dad! This is amazing.\"\n\n\"Need another dose?\" Alex asked.\n\n\"I don't need one, but I'd love more,\" she said, grinning at him.\n\nUrania touched her tongue again. As she began cumming, she used her legs to force her father fully inside. He began slowly fucking her. Her orgasm continued for a long time. Even when it stopped, she continued moaning. In a few minutes, she came again and triggered her father. The orgasm from his cum triggered before she was even recovered from the last one. Sol fainted and lay there for a couple of minutes before moving again.\n\n\"Are you okay?\" he asked her.\n\n\"Holy fuck! That was awesome, dad!\" she said laughing. \"You're gonna love this,\" she told her sister.\"\n\n\"Then get off the table. It's my turn,\" Luna replied.\n\nAlex helped Sol sit back up then stepped away. Helena stepped up and washed his cock. Sol was helped off the table and set in one of the chairs. She still had a smile on her face.\n\nHelen turned to Luna. \"Are you eighteen?\"\n\n\"I sure am.\"\n\n\"Are you a virgin?\"\n\n\"I am.\"\n\n\"Do you wish to give your virginity to your father?\"\n\n\"More than anything.\"\n\n\"You may prepare her,\" Helen said.\n\nAlly and Demi removed her gown then sat her on the table. Alex stepped to her.\n\n\"You're sure?\" he asked.\n\n\"Totally sure.\"\n\nHer aunts laid her back and supported her legs as Urania collected pre-cum. Alex knelt and began kissing and licking her inner thighs. Then tongued her pussy as Urania fed her the pre-cum. She flushed instantly.\n\n\"Whoa, that's good stuff,\" Luna said, smiling at her father.\n\n\"Wait 'til you get the good stuff,\" Urania told her.\n\nAlex stood and Demi lined him up. \"I'm ready, dad,\" Luna said.\n\nAlex nodded. Urania stuck her cum coated finger in the girl's mouth. She began bucking seconds later and her father drove himself deep inside her and stopped. When she relaxed, Urania offered another. She eagerly sucked the finger into her mouth and came again. Alex began moving in and out as she came. He continued for several minutes, and she began moving hard on him and came for a third time.\n\n\"Uhhhhhh,\" she screamed.\n\nAlex filled her and triggered number four. She finally collapsed on the bed.\n\n\"Oh dad, thank you.\"\n\n\"It was my honor,\" he said, pulling out.\n\nOnce off the table both girls hugged their father then left the platform. Helena cleaned him up again.\n\n\"Mind if I get some cum to pass around?\" Helena asked.\n\n\"Got a big bowl?\" he asked.\n\n\"Yep,\" she replied, showing him, then took him into her mouth.\n\nAlex rewarded her with a large bowl full a few minutes later. She passed the bowl around and when it returned nodded to Helen.\n\n\"On three, ladies. One...two...three,\" Helen said, loudly.\n\nIn seconds to room filled with the sounds of women cumming.\n\nAlex dressed and left the platform, joining Aphrodite. A short time later, Alex, Aphrodite, Sol, and Luna went to shower then returned to the house. They grabbed a bite to eat then went to the big bedroom.\n\n\"Where would you two like to start?\" Aphrodite asked.\n\n\"Blowjob!\" they both replied simultaneously.\n\n\"Assume the position, Alex,\" his mother said.\n\nAlex got on the bed. Aphrodite laid between his outstretched legs with a girl on each side. She began by naming the parts and teasing each. The girls were giggling and laughing as she did. As his cock grew from flaccid to rock hard, they were in awe. She shared pre-cum with them and smiled as they flushed. Aphrodite had them each feel the different parts and copy the caresses she had done. Both girls frequently collected pre-cum and shared it. They progressed to stroking techniques and both were enjoying taking turns and doing it together. When Alex came, both girls jumped then Aphrodite shot at least one spurt into each of their mouths. All three came a few seconds later. The girls, after recovering, licked cum from Aphrodite's hand and came again.\n\n\"Does cum make you orgasm every time?\" Luna asked.\n\n\"Only with Alex. It doesn't work that way with the other men,\" Aphrodite replied.\n\n\"That's why dad's so popular,\" Sol said.\n\n\"That's part of it. His cock enlarges inside to fill you. The thing that really makes him a good lover is that he puts you first. He wants, first and foremost, for you to enjoy it. Ready to learn sucking?\"\n\n\"Does it make the orgasm bigger when you get the whole load?\" Sol asked.\n\n\"No, it only takes a tiny bit. Have Demi share a memory of a blowjob with you. You can feel what Alex feels. It's really intense,\" Aphrodite suggested.\n\n\"That would be so cool,\" Luna chuckled.\n\nAphrodite began demonstrating blowjobs and showed them several different techniques she used. Both girls were enthusiastic learners. Luna got the first mouthful then shared with her sister in a deep kiss. Sol followed her and was also rewarded.\n\n\"With that, I'll leave you three to continue with your studies. Practice, practice, practice,\" Aphrodite reminded them.\n\n\"Mom, aren't you going to show them your deepthroat?\" Alex asked.\n\n\"Yes! Please show us,\" they begged.\n\nShe grinned then swallowed him completely. Both girls were amazed but couldn't go nearly as far.\n\n\"We'll work on that more later. Have fun,\" she said, kissing them goodbye.\n\n\"Do you want to learn how to eat a woman?\" Alex asked.\n\n\"How about next time? I want to learn to fuck.\" Sol said.\n\nLuna agreed. Alex took them each through multiple positions. Sol seemed to favor cowgirl while Luna loved being taken from behind. They were each treated to several more orgasms before finally collapsing from exhaustion and falling asleep.\n\nOn Sunday, the girls joined in the revelry at the equinox. Both were a bit disappointed with the men after having been with Alex. They cleaned up and went home for more practice with their father.\n\n*****\n\nAlex met with Aphrodite, Urania, and Artemus to discuss repopulating plant life. Artemus had used the atlas created by Aida and met with a large group of 'old ones' to make her selections. They had already been approved by the assembly.\n\n\"This is a safe trip, right?\" Alex asked his mother.\n\n\"Perfectly safe. Artemus how long are you thinking it'll take?\"\n\n\"We picked out forty-seven sites around Terra. I expect an hour at each site. Alex said travel time isn't an issue. Probably three or four days,\" she replied.\n\n\"Are you staying on Terra the whole time?\" Urania asked.\n\n\"Alex is going to teach me about camping,\" she said.\n\n\"Then you'll need to take shelter, food, and clothing,\" Urania told them.\n\n\"All set. We've picked out a site for a base. We have a tent, blankets, warm clothes, and a list for food. We'll bubble firewood and water.\"\n\n\"When are you planning to leave?\" Aphrodite asked.\n\n\"Day after tomorrow,\" Alex replied.\n\n\"How about seed for starting the garden?\" Urania asked.\n\n\"I've been practicing. I can create what we'll need,\" Artemus said.\n\n\"I think we're good then,\" Urania replied.\n\nArtemus and Alex left together to put everything together except the food and water. That they would do the morning they left. Both were excited about their upcoming adventure.\n\nThey had a crowd for their send off. The first trip from Xanadu to base camp would be the most difficult considering all the weight. Without the extra personas, Alex had to make two trips alone with supplies and brought Artemus with him on the third. It only added a few minutes since the travel was nearly instantaneous.\n\nWhen they arrived, they set up the base camp. By the time that was done they had only a few hours of daylight remaining. Artemus suggested they plant the area they were in first. Alex agreed, not knowing exactly what to expect.\n\nThey walked about a hundred yards from camp. Artemus looked at her atlas than waved her hand. Sprouts began popping up in every direction as far as either could see.\n\n\"Damn, you're good. How long until the plants are mature?\"\n\n\"Two or three days. By the time we break camp this will be a beautiful meadow of flowers and fruit. There'll be trees over there and that flat area will be grassland for cattle. Ready to go back to camp and fix dinner?\"\n\n\"I thought this would take an hour.\"\n\n\"Me too, dad. I guess I am good.\"\n\n\"I guess you are.\"\n\nThey walked back to camp. Alex built a fire while Artemus put together their dinner. They shared the cooking and tending the fire.\n\n\"Dad, while we're here, do you think you can find the place where Terra...well, you know?\"\n\n\"Yeah, I've been there several times. Why?\"\n\n\"I want to plant something special there.\"\n\n\"We can go there tomorrow if you want.\"\n\n\"I'd like that. Do you miss her and Ariana?\"\n\n\"Every minute of every day, baby,\" her father replied.\n\nBoth were quiet through dinner as they thought about the ones they had lost. After cleaning up they went inside their small tent. Artemus laid down on their mat.\n\n\"You don't want to sleep in your clothes. You'll perspire in them and have wet clothes in the morning,\" Alex told her.\n\nShe sat up and took off her gown, then laid back down facing him.\n\n\"Are you sure you aren't just trying to get me naked, dad?\"\n\n\"I'd need to ask Pontus first. I didn't ask.\"\n\n\"I did. He's fine with it. Did you know that Terra only had sex with Titanus twice?\"\n\n\"Twice? They were together for a couple of years.\"\n\n\"Just twice. The day they got married was both times.\"\n\n\"I wonder why? Surely he couldn't have been that busy.\"\n\n\"He wasn't. She was in love with you. You're the only other guy she ever had sex with.\"\n\n\"I didn't realize that. I loved her too. I wish I'd known.\"\n\nAlex undressed and joined her on the mat. She rolled over on top of him and kissed him.\n\n\"Are you sure you want to do this?\" he asked.\n\n\"I've wanted this since that first time on the platform. Make real love to me, dad.\"\n\nAlex needed no further convincing.\n\n*****\n\nThe next morning was cooler than they were accustomed to. Alex rekindled the fire, and they had a hearty breakfast. Following breakfast, Alex took her to the spot where Terra and Ariana had sacrificed themselves.\n\nArtemus took her father's hand. With her free hand she waved as if scattering something on the ground. In seconds, sprouts were breaking through the topsoil.\n\n\"I planted red roses. These are the only ones I'm putting on the planet. One day, they'll spread and be everywhere. When you see a red rose, you'll know it's Terra.\" Artemus started crying. \"Terra, I miss you so much.\"\n\nAlex held his daughter in his arms and cried with her for a long time. Both finally had a chance to say goodbye.\n\n\"I'm going to put white roses out for Ariana in another place,\" she told her father.\n\n\"She'll like that. Thank you, sweetheart.\"\n\n*****\n\nThey traveled around the planet for the next three days and by the end of day three flowers were blooming in their meadow. Their last stop before breaking camp was a large lake where Artemus planted Ariana's white roses.\n\nThey took down the campsite and returned to Xanadu.\n\n*****\n\nThree months later they returned to survey their work. The planet had changed from the barren soil and rock into a lush green garden of Eden. Artemus brought back a dozen beautiful red roses and another dozen white ones. She presented both to Aphrodite as a tribute to Ariana and Terra. Aphrodite cried.\n\n*****\n\nIt was another three months before the trip to repopulate the planet with animal life. This time it was with Leto, the second daughter of Adara, and Artemus' younger sister.\n\nThe stops were even more numerous this time. Again, with a wave of her hand, juvenile animals, fish, reptiles, mature birds, and insects were re-introduced. The herbivores would mature and reproduce faster than the carnivores, allowing both to balance numbers well. In six months, Terra would be fully repopulated.\n\n*****\n\nFarmers and builders were next. They began building the new settlement. Initially it was all in one area but would spread as people decided to move on. This took the better part of three months with over one hundred people working. Alex was the only means of transportation from Xanadu to Terra and back.\n\nThe people of Xanadu had been building carts to carry what they could of their possessions. The big move would begin on the Tuesday following the summer solstice.\n\nKnowing this would be the last celebration before leaving, every adult was there. On Sunday, the sexual activity would stop and even the children would be participating. It was a great and joyous celebration. For most of the people, the only home they had known was Xanadu. Even so, they picked up on the excitement.\n\nOn Monday following the celebration, Aphrodite asked Alex to walk with her. They went to the now empty playground and sat on a bench.\n\n\"You've seen how I've changed. I can tell when you look at me.\"\n\n\"I've seen some changes,\" he replied.\n\n\"Some?\" she laughed. \"Alex, I look thirty years older than my mother.\"\n\n\"You still look good, mom.\"\n\n\"Honey, I'm way beyond fishing for compliments. Trying to hold Xanadu together has worn me down. Tomorrow, when everyone is gone, Xanadu will no longer exist. In a physical sense, I won't either.\"\n\n\"Mom, you're Gaia. You can't die.\"\n\n\"I'm not dying, Alex. I just won't be physically present anymore. I'll be where your father, Ariana, and Terra are. I'll still be with you, just not in a physical sense.\"\n\n\"Mom, I can't lose you too,\" Alex said, tearing.\n\n\"You aren't losing me. I'll be with you every step of the way. One day, you'll come and join me and the others there.\"\n\n\"Mom, there's gotta be another way,\" he begged.\n\n\"You have to carry on what we started in Xanadu. My children need their father. They're excited but they're scared too. This is a new world we've created. They'll look to you for answers.\"\n\n\"Please just take me with you. I don't want to be alone.\"\n\n\"You'll never be alone. We'll be with you. Sol and Luna are here for you too. They'll be by your side until you join me. I need you to be my Spartan for a little while longer.\"\n\nAlex sighed deeply. \"I'll do as you ask. I don't like it, but I'll do it.\"\n\nAlex took his mother in his arms and held her for a long time. They went back to the house and spent their last night together in each other's arms.\n\nAt noon, the following day, people had gathered in the meadow next to the assembly hall. With a wave of her hand, Aphrodite opened a portal from Xanadu to Terra. In an orderly fashion the people went through the portal. Alex and Aphrodite were the last two in the procession. As they neared, Aphrodite stopped. Alex held her one last time and kissed her.\n\n\"I love you, mom.\"\n\n\"I love you too. Now go. I can't hold it much longer,\" she said.\n\n\"Bring me home soon, please.\"\n\n\"When it's time, baby. Go.\"\n\nAlex stepped through and looked back. The portal was gone.\n\n*****\n\nEpilogue\n\nMany years had passed, decades, in fact. The eight groups had dispersed over an area of Terra for about fifty miles along the Ariana shoreline. Each group was self-sufficient, yet there was a considerable amount of trade and interaction between them. Groups celebrated their own holidays, but at the summer solstice they migrated to the Greek group for the biggest celebration of the year.\n\nThere was peace, no crime, no prejudice, males and females were equal, and people were living happy, productive lives.\n\nWith the information Helen had collected from 'the old ones', technological advances were being made. Among many other things they were able to produce metals and even glass. Using the power of the sun and wind, they had electricity in some areas. Not all groups saw this as good and chose not to implement some things.\n\nThere were farming communities and livestock were being raised. Horses were the primary means of transportation between the groups. Sailing vessels were used for fishing and occasionally transport. Several small groups had been sent on expeditions to explore their new world. Schools were numerous, as were the number of students attending them. The population tripled with each new generation. The number of males to females was about equal, and all males were fertile, not just the papas.\n\nThe people who had been adults before Xanadu, the 'old ones', were all gone, except Alex. He was the last. His small home was a short distance from the Colorado group. Alex rarely left his homestead or the surrounding area. His daughters, Sol and Luna, lived with him and tended to his needs as wives. Visitors were rare. The people saw him as the last of the gods and occasionally left him gifts and offerings. Mostly, he was alone with his thoughts.\n\nHe had gotten home from the summer solstice celebration and sat on a bench facing a nearby pond. Red and white roses covered much of his homestead. He smiled looking at them. Alex had dozed off sitting there, as often happened, but was awakened when he felt kisses on each cheek.\n\nHe opened his eyes and smiled, seeing Ariana's beautiful face on one side and Terra's on the other. Aphrodite stood in front of him looking as she had on his eighteenth birthday.\n\n\"Have you finally come to take me home?\" he asked.\n\n\"Is that what you want?\" Aphrodite asked.\n\n\"More than anything. I've missed you,\" he said softly.\n\n\"We've been with you every minute of every day, my sweet husband.\"\n\nAlex teared. \"I've felt you, but I couldn't see you.\"\n\n\"Ready to go?\" she asked, offering her hand.\n\n\"Ready.\"\n\nAlex took her hand and stood. His body had changed from the wrinkled old man he had become back into the Spartan he had been so many years before. Ariana and Terra held his arms as Alex took his mother's hand.\n\n\"Welcome home, my son, my love,\" she said.\n\n\"Who'll take care of Luna and Sol?\" he asked.\n\n\"They're coming too,\" Terra told him.\n\n\"There's one more thing I need to do,\" he said. Alex waived his hand and his homestead vanished. There was no trace that it had ever existed. \"Now they can't turn it into some damned temple or something.\"\n\nHe took his mother's other hand. The morning sun crested the horizon with its first golden rays as Alex and the others disappeared."
    ],
    "authorname": "DocWords",
    "tags": [
        "daughter",
        "mother",
        "sister",
        "brother",
        "son"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/solstice-ch-23"
}
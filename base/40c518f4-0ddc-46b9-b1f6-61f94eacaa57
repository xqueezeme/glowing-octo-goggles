{
    "title": "Sera Ch. 09",
    "pages": [
        "Steven\n\nI smiled a bit and casually nodded hello to Kitten's green eyed, part Asian friend while she briefly regarded Sheila and I with mild surprise in her expression.\n\n\"Hello,\" my aunt offered in a neutral tone.\n\n\"Hi,\" she greeted us both before moving into the room. \"Is the cook here?\"\n\n\"I sent him off on break,\" Sheila explained matter of factly. \"Maybe I can help you?\"\n\n\"No thanks, I'll wait till he comes back.\"\n\n\"Suit yourself.\"\n\n\"Have either of you seen Kitten?\" Gina asked us, though her eyes remained on Sheila.\n\n\"No,\" the deceptively older woman replied.\n\n\"I saw her a couple hours ago,\" I offered. \"She was at the garage out back.\"\n\n\"Oh. Okay, thanks.\"\n\n\"How's things?\" I asked.\n\nHer brief hesitation told me what I expected.\n\n\"Great. This is one hell of a place.\"\n\n\"Not to mention the amenities,\" Sheila just had to joke.\n\n\"Yeah, that's something else, alright. Kinda like Vegas or... whatever.\"\n\nShe'd said it with a slightly upturned lip and I was sure my Aunt caught it. She seemed the type that would.\n\n\"Ah well,\" the timeless blonde answered with an easy going smile, \"Live and let live, huh?\"\n\nNow Gina smiled, a slow, wry expression as she appraised Sheila openly.\n\nWith a quick glance at my aunt's slightly hiked skirt, \"Whatever floats your boat, eh Sheila?\"\n\n\"That's the idea.\"\n\nGina only nodded, continuing her appraisal for another moment before asking, \"So, what do you think of Kitten?\"\n\nThis surprised Sheila as much as it did me, but after a short pause, she replied, \"I'm sure she's nice enough to the people she likes.\"\n\n\"She is.\"\n\n\"You're curious. About me.\"\n\nGina shrugged, looking away from her and replied, \"It's a little odd seeing... another version of her.\"\n\n\"I'm not sure if I should be insulted by that or not, but I think the similarities between us mostly stop at physical appearance.\"\n\n\" ... Mostly.\"\n\n\"No offense, but since you don't know me, you can't really judge.\"\n\n\"I'm good with people. Look, maybe I'll just come back later.\"\n\nNeither of us stopped her, me because I didn't like the growing tension, Sheila most likely for the same reason. However, Gina nodded somewhat politely to both of us before walking out, the gesture seeming to contradict her previous attitude.\n\n\"That was odd,\" Sheila remarked.\n\nKitten\n\nWe were alone, Auntie Ashleigh's private staff having slipped away at some point during the most incredible- if not totally and strangely out of this world- orgasm of my life. I was in a stupor, staring at her without knowing what to say while she gathered herself with a happy, almost delirious smile. She loved me so much.\n\nAnd when she did sit up, guiding me back and to my shaky feet, I somehow felt different.\n\n\"(Giggle!)\"\n\nAuntie looked at me, panting a little and still smiling as she seemed to search my face, inquiring after, \"Are you alright, sweetie pie?\"\n\n\"I- Auntie, that was...\"\n\nFirmly back in reality, I had no idea what in hell it was.\n\n\" ... Incredible,\" she finished with a sigh.\n\n\"Auntie... I think I passed out and had some kinda dream.\"\n\n\"Really?\"\n\n\"Yes. You were there.\"\n\nHer smile grew wider as she sat forward in her seat, taking my hands and looking me in the eyes again. Hers were so beautiful.\n\n\"Yes. I'll always be there.\"\n\n\"I know, Auntie. I love you.\"\n\n\"I love you too, baby. Sooo much, you can't imagine.\"\n\n\"Umm...\"\n\n\"Yes?\"\n\n\"I feel kinda funny,\" I imparted, still taken aback by my abnormal orgasmic experience.\n\n\"So do I. That was fantastic. And you were such a good girl.\"\n\n\"It was so... Oh my god...\"\n\n\"What?\"\n\n\"I actually sucked... Oh...\"\n\n\"You did what I told you, as you agreed you would. The responsibility is mine.\"\n\nI looked at her thoughtfully, remembering her words concerning that before I consented.\n\n\"Did you enjoy yourself?\" she asked.\n\n\" ... Yes, Auntie,\" I admitted with a slow, shameful smile.\n\n\"Of course you did. You wanted them to fuck you, didn't you?\"\n\n\"Yes. All three of them. Auntie?\"\n\n\"Yes?\"\n\n\"When do I get to go to your guest room?\"\n\n\"We'll see,\" she replied with a wink of her enthralling eye.\n\nSteven\n\nSheila seemed a little deflated by the time I'd finished the egg burger she made for me. By the time we got to the front parlour, she was looking at the floor with a frown as she moved to the leather couch.\n\n\"You wanna drink?\" I asked.\n\n\"No.\"\n\nFor once, I didn't either, so I sat across from the sexy thing, wondering if I should ask what was wrong. Instead, I probed with a comment as I tried to keep my eyes away from between her legs, she still not having adjusted her skirt.\n\n\"You don't owe her any explanations. Like you said, she doesn't even know you.\"\n\nShe only shook her head, the silent communication suggesting that this wasn't what she was upset about.\n\n\"Okay, what's wrong?\"\n\n\"(Sigh) ... It's just... Look, this is going to sound awful, but I'm not used to going someplace and having people know things about me. I've done a lot of crazy and wicked things in my time, but I was always able to turn my back and move on without dragging my guilty past along, except for two times: When I left home after Dad... did what he did, and when I had to leave John and my own daughter behind. Those two situations have always bothered me way down deep, down where things can be buried, but always present. Do you know what I mean?\"\n\n\"Yes,\" I sympathized, thinking of the Driscolls, Audrey Chapel and Pastor Marx.\n\n\"But now, here I am, faced with the people I've hurt from both those situations after all these years, and it's a little trying at times. I'm not used to being an outcast. I could never help myself in terms of being the slut I am and, in large part, my acceptance of that is what allowed me to go on all this time, maybe even hoping somehow that each new situation would be different for me, that I could be normal with new people who knew nothing about me, but it never happened and I don't expect that it ever will. What's worse is that the home that Ashleigh offers me here seems so perfect and good for me, but how can I stay someplace where everyone knows all about what I am and the things I've done? How could I ever be happy here when only two members of my own family will even speak to me? It makes me feel guilty, worthless even, and that's something else I'm not used to. I hate it. Of course, I don't deserve any sympathy...\"\n\nIn the time it took her to say this, her expression had gone from gloomy to outright despair. I felt quite badly for her and I guess this is why I said what I did.\n\n\"Mum and I are having sex with each other.\"\n\nIt didn't even register for about a second but, when it did, her head snapped up and she looked at me with blank faced surprise. This made me look down at the floor as she had been doing up till then, regretting my confession but going on anyway in the hopes that it would make my Aunt feel better about herself.\n\n\"Yeah, we've both been uhh... giving in to what Ashleigh calls, 'the Burchell drive', and not just with each other. Also, Mum and Kitten are having a little affair and you already know how Ashleigh feels about it, sooo... you probably shouldn't feel too bad. Mum's just acting like a hypocrite and so is Kitten.\"\n\n\"Oh my god... I mean, I suppose I shouldn't be surprised because I always knew Kathy was as horny as me, but I... She was always so controlled, but her own son- I'm sorry, I didn't mean to...\"\n\n\"I know, it's okay,\" I told her, looking up at her still shocked expression. \"But please don't tell them I told you, okay?\"\n\n\"No, I'd never do that, don't worry, but... Well, I can't help but be a little pissed off with your mother under the circumstances. No offense kid, but... that hypocritical bitch. ... I assume she seduced you?\"\n\n\"Sort of, but not really. She's sort of changed lately and... well, we were there sleeping in the same bed and stuff just happened.\"\n\n\"What stuff?\"\n\n\"Sheila!\" I protested with a slight smile.\n\n\"Well, what stuff?\"\n\n\" ... She- we were broke and we had this landlord that was kind of putting it to us, and Mum worked it so that we'd perform for him in lieu of our rent. We did pretty much everything.\"\n\n\"Oh my god, you gotta tell me.\"\n\n\"Sheila!\"\n\n\"Well, I'm sorry, I'm just picturing stuff and it's turning me on.\"\n\n\"Fine,\" I said, a little embarrassed. \"The first time, he had me fuck her boobs until I came.\"\n\n\"All over them,\" Sheila assumed, sitting on the edge of the couch now.\n\n\"Yeah, and her face too.\"\n\n\"I can just imagine after what I've seen of your capabilities. What else?\"\n\n\"We did sixty-nines for him and we uh... well, we were trying to stay away from intercourse, but during one session, he told me to rape her.\"\n\n\"Oh wow. Did you?\"\n\nI nodded, my smile getting a little tighter, my dick a little bigger when I remembered the incident, telling her, \"I was pretty wound up at that point. We were having our own little playtimes without him by then and I was... well...\"\n\n\"God, I wish I could have seen that.\"\n\n\"(Ahem) Okay, but my point is like I said, it's pretty hypocritical of her to judge you. I love her, but it's still wrong.\"\n\n\" ... It's damned big of you to admit that to me just to make me feel better about myself.\"\n\nI shrugged, but she went on, smiling fondly at me now.\n\n\"You just keep scoring points with me. Look, if anything... I mean, if you ever need someone else to partner up with...\"\n\nI smiled back, not feeling so regretful or ashamed about my confession to her now, and replied, \"You're on, Sheila.\"\n\n\"So are you, Sweetie pie. You're right on. And so handsome. (Giggle)\"\n\nI smiled wider, looking between her legs and around the rest of her as she stood and asked, \"You busy tonight?\"\n\n\"Got no plans,\" I offered.\n\n\"Now you do. Come to my apartment at nine this evening and I'll show you a really good time.\"\n\nWith an incredibly enticing smile, she leaned over and gave my lips a sloppy kiss with her tongue before walking away and out of the room.\n\nKitten\n\nMy legs a little shaky, I found myself at the foot of the stairs that led to Auntie Ashleigh's third level, private apartments, still not over the incredible orgasm she'd given me. Almost as surprising was the fact that, sexually, I was quite well satisfied, even though it usually took a lot more than the act we'd performed. Was it because of the perverted acts I'd performed with her staff just prior? The unique orgasm itself, or both?\n\nMy buxom aunt certainly did like dressing me; that was for sure. I was distracted from my thoughts by the outfit she sent me away in as I wandered aimlessly, looking down at myself again with an excited smile. Over a white micro-thong, I wore a skintight (and when I say, 'skintight', I'm not kidding, baby) pair of white lace, see-through leggings. A very low cut, white lace demi-bra barely encased my boobies, covered by more see-through white lace in the form of a short bellied, long sleeve top with a really low, oval neckline. My belly showed and the micro-thong didn't cover miffy's hair, this even more discernable than my nipples were. Obviously, I loved the outfit.\n\nAs I wandered, I speculated on what it would be like to submit to Steven. What would he have me do? I visualized him fucking miffy in Auntie Ashleigh's 'guest room' while I sucked her pussy, Stevie and I chained to the bed in some way, till we both came in one filthy, incestuous mess. I excited myself with this fantasy in a way I've never quite thought before.\n\nYes, I know that sounds a bit off, but I was also still grappling with the subtle difference that I sensed within myself and it seemed that I perceived everything a bit differently. That was one hell of an orgasm, alright.\n\nReluctantly, my mind hopped to Gina, then to my family in Langley and the things my aunt and I spoke of concerning it. It was clearly and unfortunately possible that I'd need to stay longer than the two weeks Gina and I had agreed to, the same agreement I'd been beating her over the head with. I wondered if she mightn't have to return early and without me, but would she ever do that? Would she insist I go with her? I somehow knew I'd never have a chance at keeping her mouth shut back home without me there with her. She'd seen too much.\n\nI looked closer at my surroundings as I went, almost in the same way I did when I'd first arrived, but this time a lot of the wonder at the grandeur of the place was replaced with the returning knowledge that I could stay if I wanted. It was as though the fact had finally sunk in and something in my chest seemed to flutter when, for the first time, I took it seriously. If it worked out that Gina did leave early with it planned that I follow in another couple weeks... would I ever follow?\n\nFrom what Auntie Kathleen had said, I got the idea that she and my cousin were planning on staying for at least several months unless they felt it necessary to leave sooner for whatever reason. As for that, I knew I could go with them if things didn't work out with Ashleigh, as she made clear to me on two separate occasions. She promised that I'd never regret it and, standing there thinking about it then, a funny part of me knew it was true. It was exciting, the way my life had opened up, and the idea that I'd return to Langley suddenly looked somehow unrealistic. And depressing. It scared me almost enough to quell my excitement at the idea of staying, mostly due to the fact that Stevie was here.\n\nI was on the main floor, the sound of voices bringing me back to reality. They were coming from the parlour and one of them sounded like Sheila. Moving quickly on my bare feet, I padded to the doorway, stopping to listen just behind it with a large potted plant beside me to hide behind should it become necessary. (How clich\u00e9 but, apparently, that's how it really works)\n\n\"You just keep scoring points with me,\" Sheila coozed. \"Look, if anything... I mean, if you ever need someone else to partner up with...\"\n\n\"You're on, Sheila.\"\n\n\"So are you, sweetie pie. You're right on. And so handsome. (Giggle)\"\n\nAfter a short pause, she asked, \"You busy tonight?\"\n\n\"Got no plans.\"\n\n\"Now you do. Come to my apartment at nine this evening, and I'll show you a really good time.\"\n\nMoments later, I was behind the plant and spitting mad as I watched the whore emerge from the parlour with her tight mini-skirt hiked halfway up her hips. I had to stop myself from jumping her from behind and beating the life out of her as she gained the stairs and started her ascent, probably on her way to prepare for soiling my Stevie.\n\nI somehow forced myself to wait and it was a good thing, too. Stevie emerged moments later and moved down the wide hall, past the odd pictures on the wall and around the corner. Stepping out from behind cover, I glared upstairs for an enraged few seconds before starting up them myself.\n\nI couldn't believe it! I'd warned her! And how could Stevie do this to me? He knew as well as I did that he was mine. Not hers, but mine! I was almost as mad at him as I was at Sheila, but I also knew that he was only being seduced by her like she'd done to so many men with her fucked up mind.\n\nStill, it was a disappointment. And he wasn't supposed to do that to me.\n\nSteven\n\nI'd gotten a bit used to not wearing underwear and I found I liked it. I chose a pair of faded blue jeans later that evening that fit me a bit close with a tucked, white T-shirt. I was horny as hell and glad the fly of the old jeans had buttons instead of a zipper.\n\n\"We can't fuck her,\" I told myself in the mirror while I fixed my hair with a comb.\n\n\"I doubt she'll leave us that choice once we're in her apartment.\"\n\n\"Yeah, but what about Kitten?\"\n\n\"Invite her,\" I said with a dirty smile.\n\n\"Fuck off, I'm serious. She wouldn't like us having sex with her mum.\"\n\n\"Her mum's already jerked our cock and we've rubbed her pussy,\" I pointed out.\n\nI watched myself smile at the memory of Sheila and I sitting atop the bar, naked from the waist down and how she reached over and grabbed my straining and eager member.\n\n\"That was good,\" I admitted.\n\n\"She'd be awesome.\"\n\n\"Yeah, but you're not listening. What about the Kitten factor?\"\n\n\"You're such a wet blanket. As I see it, the Kitten factor is its own entity.\"\n\n\"Something that'll take its course no matter what.\"\n\n\"Right. I doubt it'll matter in the end between she and us, whether we fuck her mum or not. Besides, she's having sex with ours, isn't she?\"\n\n\"True. I keep forgetting that.\"\n\n\"I love remembering all over again every time you do. I think Mum is right about what kind of threesome we'd make.\"\n\n\"Imagine a foursome with Sheila.\"\n\n\"A fivesome with Ashleigh too.\"\n\n\"Oh fuck... Okay, shut up.\"\n\n\"Think of Kitten and Sheila in a sixty-nine.\"\n\n\"Mum and Sheila.\"\n\n\"Oh my god, yes.\"\n\n\"I'm so fuckin' horny.\"\n\nAt five to nine, I opened my door to leave, a bit nervous about my little date with Sheila at this point, but still horny as hell. The idea that people would easily recognize that excited me all the more, but the sight of my mother standing in the corridor effectively wiped other people right out of my mind. Her face shone with one of her big smiles, the happy/horny kind I'd come to be familiar with, along with a wild look in her eyes as she looked from my condition to my face.\n\n\"Hi, sweetie pie.\"\n\n\"Mum, I- what's going on?\"\n\n\"You seem surprised.\"\n\n\"Kind of,\" I recovered. \"Why didn't you knock, or come in?\"\n\n\"I wanted to surprise you.\"\n\n\"Well... you did. What's up?\"\n\n\"Nothing. I was thinking we could hang out and have some fun. If you're not busy, that is.\"\n\nThere was no excuse I could give her on the spot that wouldn't sound as manufactured as it would have been, so I just told her I wasn't, bothered that I'd be standing Sheila up, at least for a little while. However, it was hard to be too bothered with Mum standing there wearing a pair of black cotton, stretchy short shorts. A tight, deep orange T-shirt covered her chest, one of her pushup bras underneath it, with red and yellow stripes crossing those nice big tits. On her feet were a pair of shoes with heels higher than I'd ever seen her wear before.\n\n\"Great, let's go then,\" she suggested, looking pointedly at the front of my jeans again before taking my hand to lead me down the corridor.\n\nThe bottoms of her ass cheeks hung out of her shorts and it turned me on all the more as I came to walk at her side. Of course, we had to maintain the illusion that there was nothing sexual between us as we walked, but that was easier with the accepted 'Burchell drive' policy within the house. I mean, where else could a mother and son walk, he with a raging hardon, she dressed like a prostitute, without being closely scrutinized?\n\n\"Where are we going?\" I asked as we descended the main staircase.\n\n\"It's another surprise,\" she almost giggled.\n\nThat wild look was still in her eye, but my attention was soon distracted by her chest as we walked, Mum giving no clues as to what she had in mind while I got even hornier. I'd learned that Mum's surprises were fun and the whiskey I'd been sipping as I got ready for my date with Sheila allowed my parasite a larger hand of control. Whatever she had up her short sleeve, it was going to be good, especially after the condition I last left her in.\n\nWhen we came to the back of the house, she stopped at a small table with a vase of flowers on top, opened the drawer and produced a folded piece of black cloth. She approached me with a sleazy smile, eying my crotch again, and stepped around behind me.\n\n\"You have to go with the flow here, hon. You know what I mean.\"\n\n\"Yeah, I- wha-?\"\n\nThe folded cloth was a blindfold that she'd placed over my eyes and began tying at the back of my head as she assured, \"Don't worry, you'll love this. (Giggle) Just go with the flow and give me your hands back here.\"",
        "She'd finished tying the blindfold and reached around to take my hands herself instead of waiting for my compliance. I heard the double click of the handcuffs at the same time I felt them touch my wrists and, I must admit, I was suddenly alarmed.\n\n\"Okay, what's go-?\"\n\n\"You trust me, don't you sweetie pie?\" she said as she tugged me forward.\n\nShuffling carefully behind her, I could only answer, \"Yeah, but this-\"\n\n\"Then stop worrying. You're in good hands.\"\n\nWe went outside where I could feel the slightly cool darkness of nighttime, hear the crickets singing as she led from my right side, her hand caressing my arm as it guided me wherever. I did trust her in the way that she'd never see any harm come to me, but it was hard to be at ease while at the mercy of an admitted mass murderer, loving mother or no.\n\nAfter a minute, the terrain changed from cobblestones to something more smooth and consistent, such as a concrete pool deck. As I speculated on this, Mum let go of my arm and shoved me forward.\n\nI was right about the pool deck.\n\nThe shock of being suddenly pushed was instantly replaced by that of being underwater. Added with the fact that my hands were bound behind me and that I couldn't see, multiplied by the other fact that my mother was half crazy, my anxiety level burst through the top of my skull in an instant.\n\nThen the blindfold was gone and Mum knelt poolside, holding my head above water with the very same expression on her face as when she met me at my apartment door while I coughed and sputtered. I felt sudden heat inside my pants as my bladder released itself into the chlorinated water. In the back of my mind, I hysterically giggled at the irony of having my Jujitsu neutralized so my life could be threatened in the very environment where I'd conquered others so many times in the past. And it wasn't just irony. No sir-ree, these were two aspects of my life that she had authored, saw as her own achievements and resources. Yes, in that moment, she'd already sent me a very clear message about-\n\n\"Sweetie pie, I thought I'd made myself clear where Sheila's concerned,\" she said in her sweet/horny tone that normally made me want to jump her.\n\n\"(Sput! Gu-ulk!)\"\n\nShe drove my head underwater and I franticly kicked, reflexively straining my arms against the cuffs in a useless effort to make them help me. After what seemed like an eternity, my head was pulled back above the surface by the hair.\n\n\"Hmmm?\"\n\n\"Hu-uugh! Yu-! Yes, Mum!\"\n\n\"Right; like I said, I thought I did. That's why, for the life of you, I can't understand why you'd be hanging around with her behind my back. After I made myself so perfectly clear about her. I was thinking you could shed some light on that, Son.\"\n\n\"I'm sorry, Mum! I'm sorry, I won-!\"\n\nShe drove my head under for another seeming eternity, then hauled me up as before, waiting once again until I stopped choking and sputtering before informing me with a sweet tone and bottomless eyes, \"When I want your apology, I'll ask for it. Right now, I want an explanation. Why did you defy me?\"\n\n\"I- I didn't mean to, I just g- got talking to her a- and she seemed so nice and-!\" I yammered.\n\n\"Seemed so nice, did she? Had you forgotten what I told you about her? What she did to our family? Even Kitten tried to warn you,\" she reminded, playfully poking my nose. \"Did you not believe us?\"\n\n\"Yes, I believed you, I just-!\"\n\n\"Did you think I wouldn't find out? It's a big house, but not that big, hon. I'm a little disappointed and... insulted at your blatant disregard of my instructions. See, I thought we were a team. I thought I could trust you.\"\n\nThe vague part of my mind that had been giggling over ironies was now screaming about how stupid I'd been to allow myself to be so easily tricked into something like this. Meanwhile, the rest of my mind held on in blind faith that Mum wasn't going to make me number fifteen.\n\n\"Mum, pli- please, I- Idn' mean tisss- dis- diserg...!\"\n\nI was so scared I couldn't even speak, not even to beg for my life.\n\n\"You really have changed since Saint John,\" she continued, still in her loving and somewhat slutty tone. \"Once I started getting used to it, I found I liked it, but now I see why I also had reservations.\"\n\nShe paused here, looking at me curiously and, in my abject terror, I looked her straight in the eyes and was mesmerized right away. I was able to utter a short, wavery cry before she forced her way into my head, my feeble, confused efforts at stopping her quickly overrun by the aged power of her Jedi stare.\n\nShe left me completely aware as she carefully sifted through my experience, recent memories of Sheila and I surfacing here and there. The worst thing about it was that I couldn't feel her as a person, only her actions. I began crying while she raped me in her own way, feeling so alone in this violation that I longed for some part of her beyond the elusive blackness in her bright hazel eyes.\n\nThen she was out. I still stared at her, bawling my eyes out and as completely unhinged as Marie was just before Mum killed her. Her smile remained, though it was tighter than before, not quite reaching her narrowed eyes.\n\n\"You'd best get your act together, sweetie pie. This is the second time I've had to re-educate you. Will there be a third?\"\n\n\"Pl- plee-eease, Mum-myyyyy!\" I managed to beg around my hysterical sobs.\n\nShe shoved my head under again, deeper than the last times and then let me go to sink or swim, as it seemed. This was even worse than being dunked because that hand at the top of my head also kept me from drowning. I floundered in complete panic, my legs splashing at the surface, the cuffs biting painfully into my wrists while I experienced a sickening vertigo, inhaling water despite myself.\n\nI saw her watching a few times from underwater as she knelt there looking down, brief, liquidy images that burned to my memory to always be seen, much longer than the actual experience of it. Just as I'd begun to accept that she was going to let me drown there in front of her, I was grabbed by the collar of my shirt and hoisted to the surface.\n\nI don't remember her hauling me the rest of the way out of the water, nor the removal of the handcuffs, only that I couldn't see for a time while I expelled water from my lungs and stomach. Some time later, I'd managed to collect myself enough to unsteadily get to my hands and knees, grayed vision scanning my immediate area in a half daze.\n\nMy other mother was gone.\n\nKitten\n\nThe door opened soon after my knock to reveal Sheila with a winning smile on her face.\n\nMy father and Peggy had spoken a few times of a smile that Sheila had, one that went with an overall way that could convince almost anybody to do almost anything, and this had to be that smile. It wasn't just her mouth, or even her eyes, but her entire being. As it dropped like the Liberal Party's popularity, I wondered if I at times showed this smile. Regaining some composure, she replaced her sudden expression of complete surprise with one of acerbic dread as she rolled her eyes.\n\n\"Oh, lord. What fresh new hell is this?\"\n\n\"Expecting someone else?\" I asked with a sneer.\n\n\"What do you want?\" she asked, ignoring my question in a long, classy, very form flattering dress, high heels and with her hair and makeup done flawlessly.\n\n\"I already told you that, but I guess you weren't listening,\" I retorted, suddenly half slipping, half pushing past her and into her apartment.\n\nShe'd taken a breath to say something that was halted in her throat as I passed by her. It wasn't until I'd actually moved through her foyer and right into her dimly lit living room that she finally managed to voice her outraged protest from behind me.\n\n\"What the hell do you think you're doing!? Get out!\"\n\n\"Shut up, whore. I told you to stay away from my Stevie, and now I'm back to tell you again.\"\n\n\"Y-! Your Stevie, is he?\" she incredulously demanded.\n\n\"That's right, and I want you to know that Auntie Kathleen knows all about what you're trying to do and she's as unhappy with you as I am. You should've listened when I told you-\"\n\n\"What the bloody fuck do you think I'm 'up to', you little idiot?\"\n\n\"What you always get up to. Stealing men and ruining their lives along with anybody else involved. You make a mess wherever you go and I'll be god damned if you do it with him. He's mine!\"\n\n\"Oh my god, you're just as fucked up as Mum was.\"\n\n\"She couldn't have been that fucked up to see you for what you are. No wonder she hated you; you're just a lying, emotionally fucked up, filthy pig.\"\n\nThis got quite a reaction. Her expression darkened considerably as her fists balled, feet taking her two steps closer to me, voice low and strained.\n\n\"You better watch your mouth, you little fuckin' freak! I'll-\"\n\n\"Pah!\" I scoffed, nonchalantly walking up to a table she'd obviously had brought to her room along with the two chairs that accompanied it. It held two chicken dishes with a lit candle between them, both placements arranged impeccably and with obvious care.\n\n\"Is this supposed to be your idea of a romantic dinner? Really, Sheila? God, do you really think he'd be interested in a zero class piece of garbage like you?\"\n\nI plucked a thick shard of chicken from the plate with my fingers and took a bite. It was actually very good, but I spit it back into the plate with disgust anyway.\n\n\"Hey!\"\n\n\"Your chicken sucks. Jeez, you're useless.\"\n\n\"I worked really hard on that, you little-!\"\n\n\"Is that how you lured your Daddy to his own suicide? Some little second rate chicken dinner? Much like yourself?\"\n\nSomething in her entire being seemed to pop and, with an enraged howl, she was on me in a heartbeat. I was startled, to say the least, as she drove me backwards and over the table, it along with the carefully prepared chicken dinners crashing to the floor with us. Her fists were flying and so were mine, each of us punching and grabbing, pulling and scratching as we screamed like two feral cats.\n\nShe was on top of me and I couldn't squirm out, finding her twisty style of fighting exactly like my own, but with superior strength and skill. She was soon getting the better of me and I knew I'd lose if I couldn't get out from under her quickly.\n\nAfter my most ferocious attack to her face, I actually managed to kick my way free, but she grabbed my lace leggings by the back of the waistband before I could get completely away from her. Letting me know she wasn't done with me yet, she yanked back hard as she came to her feet, tearing them down the back and spinning me around to unexpectedly meet her fist as it drove mercilessly into my tummy. The wind whooshed right out of me while my eyes opened as wide as my mouth.\n\nSheila's dress was torn down to her waist and her braless, but very perky boobies jiggled slightly upon delivery of every fist to my face while she held me by the hair with her left. Her punches were fast and furious like mine, my hands and forearms useless in guarding my face against them. Her features raged at me, blood from her nose colouring her teeth a frightening red while it dawned on me that I was going to lose this fight.\n\nShe finished her barrage with another fist driven hard into my tummy, buckling my knees while the world went a little dim. Before I could hit the floor, she violently shoved me into the wall, holding me up with a hand closed around my throat as she brought her seething, hateful face up to mine.\n\n\"You little twat!\" she spat. \"Steven and I are friends! If I'd wanted him that badly, I'd have had him by now, idiot! But ya know what? Huh? Now I think I will have him. Yeah, I'm gonna get right into his pants and-\"\n\n\"(gaa-ag!)\"\n\n\"-and suck him and fuck him until he can't even remember your name, you warped little freak! That's what you get for fucking with me and, if you think I'm afraid of Kathy, you're sorely mistaken!\"\n\nWith that, she bodily flung me across the room, landing me on the floor in a heap with a breathless grunt. A moment later, she was dragging me through her foyer by my hair, me trying to scream in pain without enough oxygen in my lungs to do it with while scrambling to keep up on my knees.\n\nOnce in the corridor, she barked, \"Now get the fuck out!\"\n\nSheila drove the toe of her shoe so far up my bum to emphasize her curse, I'm surprised I couldn't taste it in my mouth, the impact shoving my head hard into the opposite wall, my body heavily to the floor.\n\nHer door slammed shut above and behind me as I finally found the breath for a broken moan, my body hurting all over, but nowhere near as badly as my pride.\n\nSteven\n\nIn a sudden, senselessly raging fit, I attacked some young shrubbery on my way back to the house. In hindsight, I'd say it was an understandable, emotional release that one might well experience after having accepting death at the hands of one's own (other) mother.\n\nI collapsed to the grass after my frenzy, out of breath after littering the area with every living thing I could rip up and tear apart, or beat against the cobblestones like a deranged lunatic. Once I'd stopped crying, regained some wind and a little composure, I stared vacantly at the cobblestones while my head began working somewhat usefully again. Mindless of the visual carnage in the artificially lit area around me, I began to tone my excuses for her.\n\n\"If she wanted me dead, I'd be dead. It didn't mean anything, so don't read too much into it. It's just the way Mum is, we know that.\"\n\n\" ... Uh huh.\"\n\n\"We know how she is! We knew when we started hanging around Sheila what we were eventually in for!\"\n\n\"She almost drowned us,\" my parasite seethed.\n\n\"We were asking for it! Fuck sakes, don't do anything stupid, man,\" I warned.\n\n\"Me?\" I replied tonelessly, still gazing at the cobblestones. \"When have you ever known me to do anything stupid?\"\n\n\"Oh my god. Okay, just get a hold of yourself. We're not doing anything at all until we've had a chance to think this through.\"\n\n\"No time. Somebody has to warn Sheila.\"\n\n\"What? Look, I like her as much as you do, but if Mum catches us even thinking about her now, she'll kill us! Literally!\"\n\n\"Can't be helped. We can't let her get blindsided by Mum. If she almost killed us, imagine what she might do to her?\"\n\n\"Ohhh, fffuck,\" I lamented in resigned agreement.\n\nI heaved myself to my feet a moment later, stumbling slightly and very much wanting a drink. Making my way up the path towards the house, my teeth began chattering, but I wasn't cold.\n\nKitten\n\nAgain, Gina wasn't in my apartment when I practically dragged myself through the door. Stumbling to the tub while holding what was left of my leggings halfway up my thighs, I made my way to the bathroom and got a bath started. I could taste blood on my lips and in my mouth and I wondered how bad I looked, but was unwilling to take a look in the mirror. Sitting on the marble edge of the hot-tub, I closed my eyes, remembering the last time I took a beating like this.\n\nI'd gone to Jaybirds to call out two of the strippers who worked there for beating up Gina, ending up almost killing them both despite the beating I'd received at their hands in the process. Having won that time, the pain wasn't so bad. Having lost to a single opponent, Sheila of all people, the pain seemed all the worse and I understood how Gina didn't want to go out and face people after what they'd done to her back then. I felt like a victim, beaten and humiliated. I hated it.\n\nA little while later, lying back in the hot suds with a soaked washcloth over my face, Gina came back from wherever she was. I didn't remove the washcloth to look because I didn't want her to see my face and, truth be told, I was as sorry she'd showed up as I was glad to find her absent when I'd arrived.\n\n\"Where have you been?\" she asked with no small amount of irritation in her tone.\n\n\"Vodka.\"\n\n\"What?\"\n\n\"Vodka and chocolate milk. Get me one, please.\"\n\nAfter a pause, I listened to her heels leave my bathroom. She soon returned, approaching the tub and stopping to place the glass on the edge before repeating her question.\n\n\"Where have you been?\"\n\n\"With Auntie Ashleigh.\"\n\n\"I've been looking for you all day,\" she complained.\n\n\"I'm sorry, I didn't realize,\" I droned, trying to sound sincere.\n\n\"You've been spending a lot of time on your own lately.\"\n\n\"You mean time without you. I haven't been alone, I've been with my family,\" I returned, silencing her for a few moments.\n\n\"Look, I don't want to fight with you, I've just been concerned. That's all.\"\n\n\"Oh, Gina...\" I sighed, shaking my head slightly. \"I understand that and I know you love me, it's just that... I'm going through a thing right now and... you know.\"\n\nWith a softer voice to match my more conciliatory one, she said, \"But we're not communicating anymore, and that worries and saddens me.\"\n\n\" ... I have a real thing for Stevie. A real thing. I'm trying to deal with that and... stuff. It doesn't seem like the kind of thing I can really talk to you about.\"\n\n\" ... Okay...,\" she said, slowly sitting on the edge of the tub's raised platform. Dunking a hand and softly running it down my arm and across my shoulders, she added, \"I just don't want to feel shut out.\"\n\nShe suddenly removed the washcloth from my face and her warm smile turned to one of surprise and dismay.\n\n\"Wh- what the hell happened to your face?!\"\n\n\"I got in a fight,\" I groaned, rolling my eyes.\n\n\"A fight!?\" she asked as though she'd never heard the term. \"Did you win?!\"\n\n\"No,\" I growled in humiliation. \"I lost. I haven't looked in the mirror, is it bad?\"\n\n\"Yes, it's bad! Your bottom lip is swollen and you've got three long scratches down your face from your forehead, almost to your jaw! Fuck! Who did this to you!?\"\n\n\"That's not so bad,\" I sighed, trying to minimize the event in her eyes.\n\n\"Who!?\"\n\n\" ... Sheila,\" I disgustedly admitted.\n\n\" ... Wh- Well... I'm just gonna go kick her ass then, aren't I!?\" she said with all the attitude of the old Gina.\n\nI couldn't help smiling, even though it hurt, but said, \"Smutty, don't. I don't mean anything by this, but... if I can't take her...\"\n\n\"No way! I'm gonna get a fuckin' table leg and-!\"\n\n\"It's bad enough that she did this to me,\" I interrupted. \"I don't want to see it happen to you, too. Besides, I can deal with this in another way.\"\n\nShe knew I was right. I could tell by how she sat there in impotent anger, furious resignation in her eyes. See, despite my size, Gina knows from the incident at Jaybirds that, when it comes to fighting, I'm the girl to send in. I go berserk. Apparently, I get that from Sheila because it's exactly how she took me out. In fact, I'd estimate that she probably could take out Gina along with Tisha and Tanya at the same time, fighting all the harder for it. It's exactly how I'd be and, normally, it'd spell victory for me.\n\n\"You know what I'd really like you to do, though?\" I asked in a sweet voice that I hoped would gloss the situation over a little for her. \"If you don't mind?\"\n\n\"What!?\" she strained.\n\n\"Believe it or not, the chef down in the kitchen never heard of potato pancakes until I told him how to make them.\"\n\n\"Potato pancakes?\" she asked incredulously.\n\n\"Yeah. If you really wanna make me happy, maybe you could go down and get us some. We'll eat right here, how's that sound?\"\n\nShe sighed, a quick, forceful expulsion and put her face in her hand, shaking her head with her eyes closed.\n\n\" ... Smutty?\"\n\n\"Yeees, I'll get some potato pancakes.\"\n\n\"You have to promise not to pick a fight with Sheila.\"",
        "\"Are you se-?\"\n\n\"Promise...\"\n\n\" ... Fine, I promise.\"\n\n\"Thank you. I appreciate that you want to beat her up for me, you know. I do.\"\n\nI raised my hand from under the water and took a tender grip on her upper arm, soaking her sleeve there. We looked lovingly into each other's eyes and she seemed to actually swoon for some moments before I painfully leaned forward to give her a kiss on the lips.\n\n\"Oh my god, I love you so much, Slutty,\" she whispered heavily, strangely and completely over her outrage of only moments before.\n\n\"I love you, too, but you worry too much.\"\n\n\" ... I worry too much,\" she replied in mock agreement.\n\nSteven\n\nI was as surprised as Gina when we came around a corner in the apartment wing and literally bumped into each other. The accidental meeting jolted me out of my semi frantic state as effectively as her thoughtful, yet confused expression was taken from her face.\n\n\"Oh!\" she expressed.\n\n\"Sorry.\"\n\nMy other thoughts of the moment were wiped out at the sight of her, that look in her eyes that reminded me of Audrey Chapel. Poor Gina, I knew, had gone swimming and run afoul of a shark.\n\n\"What happened to you?\" she asked in a light daze, looking me up and down.\n\n\" ... Uh, I fell.\"\n\n\"You should get cleaned up,\" she advised, her eyes drifting, then returning to my face. \"You know, she really likes you. Kitten, I mean.\"\n\n\"Uh... huh. Gina, where are you going?\"\n\n\"To the kitchen for potato pancakes.\"\n\n\"For who?\"\n\n\"Me and Kitten. She sent me. I love her. I... love her...\"\n\n\" ... Christ,\" I commented under my breath, taking a look about while hustling her around the corner. \"Gina, look at me.\"\n\nShe did this readily and I captured her eyes somewhat quickly, wondering even then what I was doing. Snap decisions on little information followed by immediate actions aren't my style.\n\nThe door to her mind had been left open by someone and there were definitely footprints left behind. It wasn't Mum; I was familiar with her tracks. Ashleigh would have left no traces I'd ever detect and Sheila, I was fairly convinced, didn't have the Jedi spell. Naturally, this left one likely possibility, the implications of which severely complicating the overall picture at Ashleigh World.\n\n\"Gina, go on to the kitchen for your potato pancakes,\" I told her. \"Everything's fine, you never ran into me here.\"\n\n\" ... I'm going to the kitchen for those potato pancakes,\" she decided, more to herself than me. \"Everything's fine and I never ran into you here.\"\n\nI broke eye contact, closing the door to her mind when I backed out. She blinked in confusion a few times, then simply left. I was a bit stunned as I watched her cute ass walk away, then looked around to see if anybody'd seen this little encounter, but saw nobody. The crashing, recent memory of Mum almost drowning me snapped me back to reality, reminding me that I had to get to Sheila's place and warn her. Her apartment door wasn't far from the corner where I met Gina and I hurried the rest of the way. After knocking, I got no answer, so I tried again with the same result.\n\n\"Ssshit!\"\n\n\"Now what?\" I mumbled, looking around myself again.\n\n\"First of all, let's get away from Sheila's door before Mum catches us. We'll go to our apartment, get cleaned up and about a pint of whiskey into us while we think.\"\n\n\" ... Good call.\"\n\nLocking my door, I checked carefully through my apartment, making sure Mum wasn't there waiting for me where I'd least expect her. Then, avoiding the balcony that was adjacent to hers, I went straight for the refrigerator for the quart of whiskey, then to the shower. I was stripped off and in the stall in no time with a nice hot stream of water pouring over my body and a bellyful of liquid fire beginning to soothe my nerves. The dual heat action threatened to lull me into staying for a while, feeling somewhat safe and secluded with the door locked, but there was no time. I had to hurry and do... something.\n\n\"We should tell Ashleigh.\"\n\n\"That's... yeah. She could probably find Sheila right away and make sure she's alright.\"\n\n\"Yeah. Uh, do we tell her about Gina?\"\n\n\"Absofuckinlutely we tell her. We're supposed to be bringing crazy Kitten slowly around to the idea of her little stowaway, but it looks like Mum's beat us to the punch. Ashleigh wants to be in charge, I say let her deal with it.\"\n\nBottle in hand, I hopped out of the shower and quickly dried off, taking another swig before hurrying to my bedroom. Stanley was there on my bed and he watched me while conversation resumed.\n\n\"What gets me is the lack of any sense,\" I mumbled under my breath as I hastily pulled on a pair of light gray dress pants. There's no... consistency to the parasite. There's no pattern.\"\n\n\"Should there be?\"\n\n\"Yes.\"\n\n\"Why?\"\n\n\"Because there should be. All living things develop by some pattern, but your ilk doesn't seem to.\"\n\n\"Maybe my ilk has a more complex pattern of development.\"\n\n\"I don't know. What I do know is that this shit isn't made any easier by Ashleigh. She's gotta come across.\"\n\n\"That, I agree with. We're working in the dark.\"\n\n\"Fuckin' right.\"\n\nI finished dressing and took another heavy gulp of the bottle before placing it on the kitchenette counter on my way to the door. When I looked down to finish buttoning my black shirt, I caught a slight case of vertigo from the whiskey and slowed a little.\n\n\"Whoa.\"\n\n\"Yeah I know, thanks.\"\n\nKitten\n\nMy second visitor of the evening came around shortly after Gina and I finished up with our potato pancakes. I was still in the tub, the various impact points that peppered my body beginning to set in and hurt worse as I leaned with my elbows on the edge of the tub. Gina had brought a mood back with her, which I attributed to my fight with Sheila. She got up to answer the door, taking the plates and cutlery with her, and returned with Auntie Kathleen.\n\nShe followed Gina in wearing a tight pair of stretchy black short shorts that looked fabulous on her with a deep orange T-shirt, a bright yellow stripe across her big boobies. Walking skillfully in a pair of black pumps, she was flashing her usual smile until she saw me.\n\n\"Oh my god, Kitten!\" she exclaimed, hustling right over to the edge of the tub I still leaned over with a shocked expression.\n\n\"It's not that bad, Auntie,\" I told her with a slightly glum tone.\n\nIt really wasn't. I knew at this point, finally having checked out the small mirror on the back edge of my tub while Gina went for the pancakes. I'd gotten off pretty easy in terms of facial damage and I'd been wondering if Sheila held back because I was her biological daughter.\n\n\"Not bad!? There's scratches all down your beautiful face! She did this to you, didn't she?\"\n\n\"I was unprepared.\"\n\n\"Unpre- I didn't realize you two would get into a fight! You were only supposed to lay down the law! To tell her I knew what she'd been up to and that I'd be along! Oh, I knew it was a bad idea!\"\n\n\"Sorry, Auntie. I never actually got to that point.\"\n\n\"Oh my god!\" she repeated, sitting on the edge of the tub to gently examine my face with her fingers.\n\nWe happened to look into each other's eyes while Gina watched silently from the center of the room. Our gaze lingered until the moment was broken when Auntie drew back slightly, looking at my facial features as though searching for something, then sniffing a little.\n\n\"Sweetie pie, did Sheila...? Uhh, did she do anything else to you?\"\n\n\"What do you mean?\"\n\n\"Did she, um... rape you?\"\n\n\"What?\" Gina barked.\n\n\"No, Auntie.\"\n\n\" ... Okay... Um, have you and Ashleigh spoken recently?\"\n\n\"Today,\" I replied, feeling the smallest blush at the flashing memory of sucking those strange men's cocks. \"Earlier on.\"\n\n\"Uh huh, she replied with a look of quick understanding, yet concern. \"Well... as far as Sheila goes, don't you worry. I'll deal with her shortly in any case. I take care of my own, and I guarantee you that Sheila will pay extra for this, and sooner than later. She could never beat me.\"\n\nShe then looked at the other, mostly silent occupant of the room and asked, \"Gina honey?\"\n\nGina only looked at her in return.\n\n\"Have you been talking to Steven?\"\n\n\"Recently? No.\"\n\n\" ... Oh, Okay,\" Auntie said with a hint of surprise in her tone.\n\n\"I didn't see that bitch Sheila, either,\" Gina sullenly added. \"Not that it'd do me any good if I did, since slutty made me promise not to beat her with a stick of furniture.\"\n\n\"Hon, please don't take offense, but it wouldn't be a good idea to try. Kitten's lucky to get away with what she got. Don't be fooled by Sheila's size, the whore's got spirit. Back in high school, there was this clique of girls, the popular clique if you know what I mean. By this time, Sheila had gained quite a reputation with the boys and also this clique, some of whose boyfriends she'd screwed. One day, four of them were waiting for her in the girl's washroom while I was down in the principal's office dodging a completely separate issue, but it didn't matter. They weren't prepared for what walked into the girl's room.\"\n\n\"She beat them all?\" I asked, proud in a disturbingly strange way.\n\n\"Beat the tar out of them,\" she confirmed with a vague expression that I guessed might match my own. \"Mind you, they did quite a number on her, but she was the one who was left standing. Actually, she said she was on her knees when it was over, but none of the others could say that. Nobody messes with the Burchell girls.\"\n\n\"Except another Burchell girl,\" I amended with a sudden smile.\n\n\"But not this Burchell girl,\" Auntie said with a playful pinch of my unscratched cheek. \"She's got age and experience on you.\"\n\n\"I don't want to think about it. How did things go with Stevie?\"\n\n\"I reasserted myself. He'll be good now, Kitten.\"\n\n\"Now I'm really glad I came to you,\" I beamed.\n\n\"Sweetie pie, you can always come to me,\" she told me with a warm, motherly smile.\n\n\"Wait a minute,\" Gina broke in, \"could someone bring me back into the loop?\"\n\n\"Well, if you're not gonna hang around, smutty...\" I implied with a good natured smile.\n\n\"Um, I was looking for you.\"\n\n\"Sorry, you were sleeping and I didn't want to disturb you, so I left.\"\n\n\"I'm always waking up alone, then I run around looking for you.\"\n\n\"Well, do I have to have you glued to my hip the whole time I'm here?\"\n\n\"Kat... I don't think I deserve to be-\"\n\n\"Not now, smutty.\"\n\nI'd humiliated her, the unavoidable truth in the ensuing, awkward silence. Well, why did she have to push it? Right in front of Auntie Kathleen, like I was some kind of stupid kid who couldn't take care of herself?\n\nAuntie was looking uncomfortably away from the both of us while Gina stared at me with an expression I'd never seen on her face. Without another word, she walked out of the room without any effort by me to stop her.\n\nSteven\n\n\"This had better be good, because I just sent a translator home early at full pay.\"\n\nFinding Lynette earlier, I was told that 'Mistress' had left orders not to be disturbed. I had to assure the blonde that 'Mistress' would absolutely appreciate being disturbed by a visit from me about a half dozen times before she made a call on her cellphone, then led me to Ashleigh's den, a place I was still very curious about.\n\nStanding just inside her closed doorway, I announced \"Mum almost drowned me.\"\n\nShe didn't react to this right away but, after a moment, blinked at me a couple times before speaking with much less irritation and a lot more concern.\n\n\"What? What?\"\n\nI told her the story.\n\n\"Holy... When was this?\" she asked incredulously.\n\n\"Little over a half hour ago,\" I said, by this time slumped on her couch and wondering if she had any alcohol in her lair.\n\n\"Well, what the hell kept you!?\"\n\n\"I got cleaned up while I decided what I should do, but first I had to drop by-\"\n\n\"Decide what to do!?\" she demanded as though I wasn't the victim. \"You fucking tell me, is what you do! Immediately! Not almost an hour later!\"\n\n\"Well, I had to go tell Sheila first before Mum got to her, didn't I!? She knew I was going to meet her, she was right outside the god damned door when I opened it to leave!\"\n\n\"Well, where's Sheila now!?\"\n\n\"I don't know, she wasn't in! You have to go fi-!\"\n\nShe was already on it, already out of her chair with an alarmed expression and heading for the door. She was dressed the most decently I'd ever seen her in a form flattering, hot pink business suit with very well fitting slacks. Her tits bounced crazily in her modestly buttoned white blouse, jacket only secured by one button at her midriff.\n\n\"Stay here!\" was all she said before she disappeared beyond the door that slammed shut behind her.\n\n\"Oh my fuck, what is wrong with the women in this family?\"\n\nAt least she was on it and, after a moment, I had to admit to myself that it felt a lot better having a strong ally in this situation than it did to be all alone when the shit hit the fan, like I was in Saint John. With a start, I noted my hands were trembling a little and I grabbed my thighs, closing my eyes and willing my nerves to settle. Ashleigh would find Sheila in time, everything would somehow work out and, in the meantime, she'd left me alone in her den.\n\nThe shelves covering the walls offered information pretty much exclusively on the subjects of anatomy, spiritualism, sexuality, death, natural geography and the paranormal. Some looked new and, when I checked publication dates, I found some that had been written during the current decade, but there were also some old ones, some very old, then some that didn't even have publication dates and were often written in hand. In addition, about half of them weren't written in English, the only way to guess at the subject matter being the occasional illustration.\n\nOne of them caught my eye. The scene it depicted was a small village. Everywhere in the scene, people were having various forms of sex in what appeared to be a town orgy. The artwork was such that, despite its simple form, it somehow managed to convey great detail in how it sparked the imagination. The viewer could see things like facial expressions that weren't really there on closer inspection.\n\nI checked out her desk next, touching or moving nothing I didn't have to so as not to leave anything out of place. In addition to her computer and among the usual expected desktop items were scattered papers written in freehand, but again, in some language other than English. Some were neatly piled and put to the side as though they were being put into order and they all looked quite old. In front of my aunt's chair was an open notebook, one of those black hardcover deals with the contents written in English.\n\nI guessed it was a translation of the loose papers, mostly because of the awkward way the notebook read, the language either not translating well to English, or the translator Ashleigh had to send home just wasn't that good.\n\nTo summarize, what I read amounted to how some spirits take an interest in people. This is somewhat common with the spirits of those who have passed on and various demonic presences such as poltergeists, but quite uncommon when it comes to 'earth spirits'. Also, the level and type of interaction where an earth sprit is concerned is often quite different than other more common types of paranormal 'infestation'. (That's the actual word the translator had used)\n\nBecoming wary of being caught by my returning Aunt, I had to tear my eyes away from the notebook before I could read much more, going back to the chair in front of her desk to slouch while I looked around myself thoughtfully. It was pretty clear she was on to something where the parasite was concerned, pretty obvious that she at least wasn't completely in the dark, but what it was specifically that she knew couldn't be determined without intense study of some the books around me, if not all of them. So, apart from the comfort I took in the fact that there were probably some answers to be had and that Aunt Ash most likely had them, I actually had none myself as a result of my brief investigation of her den and its contents.\n\n\"(Sigh)\"\n\nI found myself thinking of the illustration from the book, the town orgy and remembered how its curious detail got a physical reaction from my dick. It began happening again as I remembered one particular scene where two naked men were removing a young woman's clothes with greedy expressions while six more hurried to their location. I was soon totally hard, lightly stroking myself through my pants while imagining I was one of those guys pulling her clothes off, or even the guy who was with the two elderly ladies who were all over him. I was quite abnormally excited, considering what all had just happened with Mum, and I was a bit embarrassed when Ashleigh returned.\n\n\"Alright, I found her,\" she reported with unmistakable relief in her tone. \"She's had a little trouble of her own this evening in the form of a surprise visit by Kitten, but I had Lamarr escort her to my apartments for the-\"\n\nShe'd made her way to her desk and was just rounding it when she stopped, looking at its contents and then back at me with some alarm in her features. Her expression evened out before she drily inquired of me.\n\n\"Get a good look, did we?\"\n\nShe wasn't mesmerizing me as she looked me straight in the eyes, however I knew it would be pointless to lie to her in any case, so I replied truthfully.\n\n\"You can't blame me.\"\n\n\"Uh huh,\" she answered. Anyway, I sent Sheila to my apartments for the evening.\"\n\nShe seemed to forget about my snooping as she finished her way to her desk, sitting behind it, but also gathering up the notebook and loose papers.\n\n\"What language is that?\" I asked.\n\n\"I told you I'll tell everything I know to all of you at the same time. I can understand your curiosity, but I'd rather not be accused of keeping secrets while I'm trying to knit this family together.\"\n\n\"It's not easy working in the dark, Ashleigh.\"\n\n\"You have all the light you need for now. Look, Sheila thinks it's a good idea for you to spend the night at my apartments as well.\"\n\nI shook my head, saying, \"Mum's already made her point, she's not one to keep making it unless I prove it necessary, and I'd rather avoid that for now if I can. How'd things go with Sheila and Kitten?\"\n\n\"Uh... not well. She'll tell you, I'm sure. You are going to keep talking to her, right?\"\n\n\" ... Yeah. I like her a lot.\"\n\n\"Good. She likes you too, and she's worried. I didn't tell her what your Mum did to you tonight, but I did tell her you two had spoken and that you were fine. Are you fine?\"\n\nHer concern was evident and I looked down when I nodded my head and sighed.\n\n\"I told you she'd hurt you again,\" she reminded quietly.\n\nRetreating from the subject, I said, \"Listen, something else has happened.\"\n\n\"Oh?\"\n\n\"I ran into Gina on the way to Sheila's apartment.\"\n\n\"Ahhh, Gina,\" she sighed, sitting back in her puffy, black office chair. \"I like her, but she's becoming a pain in my fat ass, like I knew she would.\"\n\n\"Your ass is not fat, and how big a pain can she be while surrounded by five Burchells, all of us hosting our little guests?\"\n\nHer lips compressed at my reference, but she only asked, \"What happened?\"\n\n\"I ran into her in the corridor, quite literally, and she was... Well, somebody had a Jedi spell on her.\"\n\n\" ... Really?\"\n\n\"Yes, and since I know Mum's tracks and since you don't leave any and since I don't think Sheila even has-\"\n\n\"Wait a minute... 'tracks'?\"\n\n\"One of Mum's terms. That sense you get when you can tell one of us has been in a person's head. Like I said, it wasn't Mum's, you can hide yours and I don't think Sheila has the Jedi spell, so...\"",
        "\"Kitten.\"\n\n\"Kitten,\" I confirmed, again wishing I had a drink as I crossed my legs. \"Gina was running around with the door to her head left wide open.\"\n\nShe smiled a bit and said, \"I'm sorry, it's just so weird to hear Mum's old expressions along with new ones from you and your mother. As you can imagine, I have my own.\"\n\n\"More appropriate ones, I'm assuming,\" I replied with subtle sarcasm, glancing about the circular room.\n\n\"Enough that I'm quite impressed at your abilities for your age. How proficient are you with entry and instruction?\"\n\n\"I take it you mean the Jedi spell, or 'nudge', as Mum calls it.\"\n\n\"Yes.\"\n\n\"Nowhere near as good as Mum, but I can get the job done.\"\n\n\"How good is she?\"\n\n\"Fucking good. I figured you could tell.\"\n\n\"Yes and no. I can see and feel her raw ability, but I've never seen her spell an average person and there's a certain subtlety... almost an art form to doing it that's very telling in its own way.\"\n\n\"Yeah, well I'd say mum's got it. Now she's kick-started Kitten and Kitten's been messing with Gina.\"\n\n\"So you gained entry to Gina's head.\"\n\n\"It seemed like the thing to do at the time, yeah, I wasn't gonna let her run around like that. Don't worry, I fixed her so she'd be none the wiser. I like her too, and I don't like the idea of Kitten doing that to someone who's supposed to be her friend.\"\n\n\"It's not your business.\"\n\n\"I made it my business.\"\n\n\"What if it was Sheila who did it?\"\n\n\"I doubt that and it wouldn't change anything even if it was.\"\n\n\"What makes you think she can't do it? I wouldn't make that assumption.\"\n\n\"When I looked into her eyes, I didn't see... it.\"\n\n\"Uh huh. Did you see 'it' in Kitten's?\"\n\n\" ... No.\"\n\n\"I understand why you did what you did, but you should probably leave Gina alone if you see her spelled from here on. Mind you, thanks for telling me, but I'm keeping a close eye on the Gina situation myself. You just worry about easing kitten into the know.\"\n\nAshleigh, I'm telling you that Gina was spelled and she'd just come from Kitten. The facts here point to the strong likelihood that-\"\n\n\"When's the last time you even saw kitten?\"\n\n\"Wh- yesterday.\"\n\n\"Yesterday. What the fuck, Steven? Why are you sitting here telling me what you suspect based on likelihoods? She's right here in the house, for god's sake, go and interact with her like you're supposed to be doing, and find out what's going on first hand.\"\n\n\"If you're in charge, then you have a responsibility to make sure Gina's safe. I've seen people get used by... I just don't want to see any more nice people fucked up on account of us.\"\n\n\"Don't worry, sweetie pie. Like I said, I'm keeping an eye on the situation. You just concentrate on making up with Kitten. She obviously knew you were supposed to visit Sheila tonight.\"\n\n\"Wh- How in hell am I supposed to be all warm and fuzzy with her while you encourage me to remain friends with Sheila? To say nothing of how Mum feels about that. Christ, you don't ask for much, do you?\"\n\n\"Stop bitching, if I didn't think you could help, I wouldn't have asked.\"\n\n\"Yeah, well I'd like to know what you plan to actually do about all this.\"\n\nShe made no reply, rather only looked at me thoughtfully with a funny little smile.\n\n\"You are going to do something, right? It'd be nice to have all this knowledge put to use,\" I said a trifle irritably, gesturing around me with a hand that should have been holding a drink. \"If you could bring yourself to support me just a little bit here?\"\n\n\"Of course I'm going to do something,\" she assured with the same expression.\n\n\"Ya think I could be let in on this someth-?\"\n\n\"You'll find out with the others, there's no need for you to know any more.\"\n\nI dumped my face in my hands and moaned."
    ],
    "authorname": "Ameaner",
    "tags": [
        "incest novella"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/sera-ch-09"
}
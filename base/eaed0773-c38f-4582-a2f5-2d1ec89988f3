{
    "title": "Ideal Suburbia Ch. 12a",
    "pages": [
        "This is a series of stories that are a sort of sequel to two text-adventure games. Each installment is a complete story on its own, but for a full understanding, the reader may want to start with Chapter 1.\n\n+++++\n\nI threw down my pen in disgust on my dining table. I glared at the tables and charts and references spread out there before me. The idea of developing a new suburban country club out here on the west side of the city, where there were none, had rooted my mind and would not let go. And it could work. The numbers, the opportunity were clear. Construction seed capital could be raised by selling founding memberships to wealthy or well-off prospective members, who would certainly pony up big cash to buy front of the line memberships in a new, beautiful club in an area of the metro area that had lots of money, but no such facility. Housing developers could be sold the excess land lining the course to raise the remaining needed funds. Expert staff would also be needed, but that was down the road, and I had ideas anyway.\n\nBut.\n\nTo set up the corporation and sell those founding memberships, I needed the land. I calculated that I needed at least five, preferably six or seven hundred contiguous acres to build a really good course and surround it with the right sized neighborhood. Where could I find it, and how would I pay for it if I magically found such a seemingly non-existent plot?\n\nI stretched my shoulders and noted that it was a good thing that today was my workout day with my personal trainer Courtney. Since I had been working with her, I had dropped the few pounds I needed, gotten a bit more stamina, but most importantly, I was more limber and recovered from strenuous activity, be it exercise, sex, gardening, or whatever, much faster than I had since I was a teenager. She was worth every penny.\n\nI arrived and she buzzed me into her small studio, situated as it was on the backside of an inconspicuous warehouse facility. Courtney was always a sight to behold, and I always had to struggle to keep my gaze on her down to a sub-creepy level when I was working out.\n\n\"There you are!\" she exclaimed as I entered. She bounded over, full of energy as always, but she actually hugged me. That was new. \"Did you know that this is my first fully-booked month since I opened?\"\n\nI congratulated her warmly, but she slapped me on the shoulder and said, \"Yes, I've only just this week figured out how much of that increase in customers came from you! You never told me, you stinker, but you've be a one-man volunteer sales force for me!\"\n\n\"I just wanted to make sure you stayed in business,\" I said easily.\n\n\"Yeah, well when you first walked in here, I was mostly just making the rent. Now, I am making mon-ey! I'm ahead of, instead of behind, my business plan!\"\n\n\"And a lot of it is because of you! Look,\" she went on excitedly, pointing at her master schedule on the wall. \"I've gotten four customers just from among your co-workers. Well, three. That doughboy Steve flamed out. And I have seven people who work for your clients. But the big number is all the neighbors around here that are due to you.\"\n\n\"Really? I don't think I even know that many neighbors yet.\"\n\n\"No, I only have about four who got my name from you, but there are so many more who were referred by them in turn! It all comes back to you!\"\n\nI leaned against a weight rack and looked pleased at her. \"I'm stoked! But it wasn't like I was running ads for you. I just kept you in mind. That isn't that hard.\"\n\n\"Seems like it might be,\" she answered cryptically, \"But who gave you permission to lean? No one leans in my dojo, Hoss! Get on that treadmill.\"\n\nAnd the session was off. Helping her business seemed to have earned me the reward of being pushed even harder. And Courtney kept prowling around me, watching my every move. Once I got off the treadmill (she took the settings up to nine once or twice for the first time), I was more than warmed up. I was tired. Before we got to weights, she wrung me out with old school calisthenics and yoga.\n\nCourtney had not corrected my pushup form in several weeks, but there was zero tolerance today. Someone must have complained though, since it wasn't her bare foot pushing down on my ass to keep my body straight as a rail, but the palm of her hand. Indeed, the agenda today seemed to be less yelling than usual, replaced by more shoving. As she knelt and held down my ankles while I did crunches, Courtney added, \"Once I figured out you knew so many of my clientele, I've been asking about you.\"\n\nUm. That could be tricky. \"Oh really?\" was all I could gasp. The crunches left me with no more air for probing questions.\n\n\"Yes. I just wanted to see if you were eating well and taking care of yourself on the regular, or if you are only living the healthy life when I'm watching you. That sort of question.\"\n\nI collapsed on my back, unable to finish the last three crunches she had demanded today. \"I'm a good boy, I swear,\" I said, heaving a deep breath of air. Inside, I was little worried. What were the various women I had sent here saying about me? What might they be saying to each other? What might Courtney tell one about what another said?\n\n\"Wuss,\" said Courtney sternly at my failure, releasing my ankles and slapping my thigh hard. \"Absolute wuss.\"\n\nI knew better than to apologize by now. Apologies were a sign of weakness.\n\n\"Two minutes rest,\" she declared and went to set up the weights. My eyes followed her, of course, as they inevitably did when I knew she wasn't looking at me. She was always the picture of fitness, each muscle and curve not so much toned as manicured to perfection, but today her workout outfit was a bit more awesome than the usual (and still quite gorgeous) leggings under long-sleeved leotard. She had no leggings today at all, and wore a sort of cross between a leotard and a sling bathing suit. The green garment had short legs reaching down her thighs about half way, and was held up by two narrow straps sweeping up around her breasts, over her shoulders, and down to meet at a point high on her back. Upper modesty and support were provided by a bright yellow band of what had to be mostly lycra running around her torso, under the straps of her half leotard. As enticing as the outfit made her breasts, I still did not have a good idea of their size or shape, crushed against her chest as they were, but this new top implied that they were larger than I has previously suspected, and quite capable of supporting themselves.\n\nAs I watched her bend over and shift the weights, I realized that this outfit really did reveal a lot of flesh in a lot of areas that I had not been treated to before. Her previous skin-tight outfits had always displayed her delicious, ultra-fit form to its sculpted best, but with this new look I could tell that not only was she sculpted, her entire athletic figure was lightly carved as well. She was in no way jacked or ripped, no bulging muscles protruded anywhere on her to mar her ultra-feminine form, but the barest outlines of her perfect musculature were apparent everywhere I could see her skin. This was the first time I could see her flat stomach laid bare, and there was the faint but unmistakeable outlines of a well-defined six pack whenever she stretched upward.\n\nThe elastic fabric of her half leotard fit her more or less like it had been spray painted on, and it was impossible for me to keep my eyes off of the rock-hard contours of her small, chiseled ass, or the generous, two finger wide gap between the tops of her thighs.\n\nShe was setting up the weights in a different configuration than was normal on arm day. Swell. I would be extra sore tomorrow.\n\nAs I started lifting, Courtney said, \"Nope. Stop a second and ditch the shirt. You've backslid to those loose cotton tees, and I cannot see whether the right muscle groups are activating. Next week, either no shirt or go back to the stretchy Under Armor ones you have.\"\n\n\"Those are uncomfortable.\"\n\n\"Ok, no shirt, then.\" Courtney said, sounding indifferent to how, as long as she got her way.\n\nI resumed the unfamiliar exercise and she stood behind me closely. Coaching quietly or loudly, depending on if I got what she said on the first try. Here or there I felt her fingers touching one muscle group or another on me. Fortunately, she alway had me just tired enough to avoid a hard-on during our workouts, though said erections often came on with a vengeance on the ride home.\n\n\"So,\" she said, making conversation while she spotted me during a new and difficult overhead lift, \"your friends have lots to say about you...\"\n\n\"Uh huh?\" I replied, dubiously.\n\n\"Oh don't worry,\" she laughed, \"it's always good things.\"\n\nThat could cover a host of definitions.\n\n\"Your lesbian friend? Or customer? Whatever. The one who actually tried to hit on me before I made sure she was way too tired to try that again. She said you are remarkably good at putting different people together in unexpected ways. It was after that comment that I began to see how much of my new clientele was due to you.\"\n\nShe went through a few more women and one male friend I had sent her way. She didn't relay anything crazy, but a lot of the women's comments could have been double-entendres, if they had wanted to mean them that way.\n\nAt least I was getting a bit of a free ride as Courtney talked. I was still working hard, but I had not gone this many minutes in a row in this studio without panting since I'd started coming here.\n\nNext, she put me lying on my back on the weight bench with two very heavy dumbbells in my hands. She actually straddled me, watching my pecs work and leaning down to use her hands to keep my upper arms from going past ninety degrees. I knew I needed her to spot me since it was an awkward lift and even if I completed all the reps she was asking for, I would still need help just divesting myself of the dumbbells when I was done.\n\n\"Then of course, there is your next door neighbor, Linda. I think she is my best trainee. She always works crazy hard. I think she may be the only client I've had here that I've never had to yell at.\"\n\n\"I didn't think that was possible,\" I grunted, trying to keep my arms at the right angle so she would not yell at me... again. \"What... does Linda have to say about me?\"\n\n\"All good, as usual. Just that you have hidden skills in the way of pool cleaning.\" I chuckled. If Courtney only knew. \"Aaaand that you have a monster cock that I should really take a good look at,\" she added merrily. I jumped, but not really in surprise, just the confirmation of my fears. I looked around frantically to find a way to flee, or at least to put down the dumbbells, but she had me in that awkward position. I did not want to just drop the weights. Dropping weights got you punishment sets in Courtney's studio.\n\nMeanwhile, Courtney had slid both her hands down my bare chest to rest on the front of my shorts. Did I say that I was always too tired during training to get an erection? Right then, Courtney had been going easy on me for a while now, and I almost immediately responded to her touch. She laughed again, reaching out one hand (the other remaining in place on my pants) to take a dumbbell from me. Once my one had was free, I was able to put down the other heavy weight.\n\n\"I have to tell you,\" she said, \"I have never encountered so many different women saying so many different complimentary things about a man.\" Her hands were both back to massaging my swelling cock. \"But I was still pretty stupid. It wasn't until Linda just flat out started taking about sex, that I realized a bunch of the others were too!\"\n\nI looked down, she had her crotch now pressed right against my balls, and she had both hands wrapped around the fabric covering my now rigid cock. I looked up and shrugged a goofy smile.\n\n\"So,\" she purred, \"mind if I go ahead and take a look at what she told me to?\"\n\n\"I think you have made it clear that you are in charge here,\" I said, holding my hands well away from her and my crotch.\n\nShe tugged down my shorts to my knees and reached out to stroke my member, which was hell of a lot more certain about what was going on than I was. \"One thing's for sure,\" she said, no longer so much evaluating the size of my cock as she was outright playing with it, \"you have no history of steroid use!\"\n\nI just could not help myself any longer. I couldn't keep my hands to myself. I reached for her and slid my hands up the bare, slightly slippery flesh of her thighs until I could grasp her lycra-clad hips. They were every bit as firm but smooth as they looked and I tugged her back to straddle me again, though now her crotch was pressed fully against my balls. She was idly tracing the outline of my cock, the shaft, the veins, the head, and I swept my hands up her torso until I grasped her very firm, warm bust. She breathed deeply in response but kept playing with my cock. I slid my hands further up and tugged down on the center of her band bra top. She arched her back cooperatively, but kept her hands on my cock until I had the whole top pulled down below her breasts. At that point, she let go of me long enough to slip her straps off her shoulders and pushed her top down around her narrow waist. Her breasts were indeed very nice. Of a respectable medium size, they jiggled enticingly when they popped free of their lycra prison. They were sloping but bouncy with quarter-sized lightly pink nipples. They eagerly demanded attention as they proudly rested on her slender but powerful torso.\n\nI could not keep my hands off of them, and I reveled in their elastic rebound and soft skin. The excited nips quivered under my touch.\n\nBut Courtney rose to her feet, pulling me after her so my shorts would drop completely free. I put my arms around her and slid my hands down into her leotard to clasp that chiseled ass in my hands. It felt every bit the sculpted bit of perfection it looked, and I tugged downward on both garments to pull them completely to the ground.\n\nWe stood before each other, utterly naked. She reached out to grasp my cock and pull me toward her. Keeping a firm grasp on my member, she grasped the back of my head with her other hand and laid a kiss on me that left us both nearly as breathless as one of her more hard-core aerobic exercise sets.\n\n\"As advertised,\" she gasped, fondling my cock some more.\n\nIn response, I ran my hands over her shoulders and down her chest to caress her breasts. As I teased at her hardened nipples, I murmured something about how I couldn't believe her form was somehow even better naked than in her workout clothes. I could feel her body responding powerfully to my touch, increasingly so as I began to move my caresses southward, but suddenly she stepped back away from me. She did keep her fingers on my cock, however, until she was too far from me to keep her grasp. She moved her hands to her hips, presenting me with an utterly arresting visage. \"Now, now,\" she admonished me, with a look that was somehow simultaneously stern and a leer, \"I'm pretty sure that you hired me in the first place because sex is a lousy workout... even as much sex as you seem to get. My professional ethics demand I make sure you get your workout first!\"\n\nI was certainly willing to go with the \"lousy workout\" option, but while I wanted a lot of things from Courtney, getting punished for being lazy was not one of them. All I said was, \"OK\".\n\nWe started with two different lifts on the bench. With the first, she stood above my head to spot. If I craned my head back just a bit, I got a spectacular view up at her naked body. After the first set of ten, she got angry and told me, \"stop staring up at my tits during the lifts! When you crane your neck back, it throws off your body position and you use too much pec and not enough tricep,\" she added, caressing the muscle groups in question. She leaned over me as she spoke, which gave me a really excellent view of said tits. I could tell today was going to be a day of mixed messages....\n\nI completed the second set of the first lift while keeping my head and eyes behaved. Damned if I couldn't feel the difference in how my muscles fired. But for the second bench lift, Courtney moved around and straddled me over my chest. \"I'll spot from here this time. How's that? You can oggle all you want, and keep your head in the right position.\" I really, really liked this particular set, but on the very last lift of the last set, I stalled, and Cortney had to help me get the bar the last foot up to the rest. \"That's why it's called 'spotting',\" Courtney replied when I grumbled about not getting the job done. \"That's what your trainer is here for,\" she went on with a sudden leer as she reached behind her and gave my half-hard cock a single, lascivious caress, \"to make sure you get it up!\"\n\nI couldn't help myself and reached for Courtney, but she sprang up and beckoned me to the array of aluminum piping that she called the stretching cage, and I called The Rack. She leaned against the outside of the damned thing with feline grace and beckoned me in. \"For some reason, I'm very concerned about your flexibility today,\" she grinned.\n\n\"Well, I hardly want you to be concerned about anything,\" I replied. I dutifully climbed into the cage and began to run through the variety of arm, leg, and body stretches that I hated, but had to admit were very effective. It was certainly more fun today, though. Courtney had always used her hands to guide my use of the machine, but today, her guidance was lingering and downright erotic.\n\nPosition eight was as much an isometric exercise as a stretch, as my legs and arms were spread wide and supporting my body weight was a chore. I slipped getting into the stretch and had to grunt hard to stabilize myself. Courtney grunted too, in bemusement. \"You got distracted there,\" she said. Then she reached out and gently grasped my erection, which was back to full mast after her last set of manual instructions on the prior stretch. \"I don't know how you can be expected to be on your game with this in the way. I should help you with that....\"\n\nWith that, she leaned over and began to run her tongue around the head and up and down the shaft of my now aching cock. She lifted her hands and cupped my balls, tickling them outrageously, with her lips wrapped firmly around my glans. Then she sloppily licked my cock all over, drenching it in saliva, slid her hands up to grasp my shaft, and began to pump. She looked up at me and grinned. \"Now, you have to maintain your pose in the apparatus, or I'll stop,\" she warned, before bending her head again to alternately stare at my cock and bob her head up and down upon it.\n\nI found that admonition to be highly motivating, and I kept my pose for far longer than I ever had before. But I did not make any great effort to hold off my finish as her vigorous massage of my shaft and oral attention to the tip soon brought me to an impending climax. I gasped a warning to her and she began to jerk me even more vigorously. She did release my cock from her mouth as she looked up at me with a smile, but she kept her mouth open and right over it. The effort of supporting my body warred with the rising tide within me and I found myself barely able to hold myself up as the shudder of my release weakened my core. I came in three or four big spurts. The first missed her mouth and spattered on her cheek, but she then caught the majority of my cum in her smiling mouth. A final, much weaker blurp arched out and fell short of her mouth and chin, spilling down to splatter on her taut, kneeling thigh.\n\nGretchen closed her mouth as if tasting my cum. Seeming pleased, she swallowed what had spray into her mouth, but she then grabbed one of the omnipresent sweat towels she had all over the gym and carefully cleaned up the cum I had deposited on her face and thigh, as well as my finally softening member. She stood, uncoiling that fit body, and stepped backward. \"There,\" she said. \"Now that that monster won't get in the way for a little while at least, let's give the rowing machine a run for its money.\" She practically danced away across the gym to the rowing machine, her trampoline-tight little ass drawing me after her far faster than I usually approach that damned thing.",
        "It was good that she had dealt with my erection before I got on the rower, or it really would have gotten in the way as I slid forward and back. But Courtney was standing beside the machine facing me, bending over to exhort my efforts. This left her tasty tits dangling down, right in my sightline, and my eyes refused to leave their bouncing form. I felt my cock begin to somewhat half-heartedly chub up again, just a little, despite my exhaustion, and damned if she didn't punch up the difficulty when she noticed, as if to stave off its triumphant return. When the usual time was up, Courtney made me continue, and at an even higher pace, her voice commanding and her body enticing me to keep on going until I finally dropped the pull rod and collapsed back on the seat, my legs temporarily noodles.\n\n\"Very, very good!\" she smiled, then straddled me and sat down in my lap, facing me, her crotch pressing against my currently limp cock. \"I think it is time for pull-ups,\" she continued, evilly.\n\n\"Nope,\" I replied, ready to risk some assertiveness. I wrapped my arms around her and stood, lifting her off the ground. Courtney was surprisingly light, which was fortunate, because my exhausted legs wobbled as I did so. She shrieked, but rather than spring away from me, she wrapped her legs around my hips to help me support her. \"So far, I've been the one having all the fun,\" I asserted firmly. \"A gentleman can't let that go on.\"\n\nI had a moment of inspiration, and turned toward another piece of equipment, the knee raise thingy. It was like a very high chair with no seat, just arms and a back. I lifted Courtney on to it, her forearms bearing her weight on the sturdy arm rests. This left her feet dangling quite far from the floor. I knew it was one of her favorite pieces of equipment, as the knee lifts, twists, and crunches you could do on it were largely responsible for her spectacular abdomen. I was about to make sure that she loved it even more....\n\nCourtney instinctively settled herself securely on the machine and started to ask what the hell I was up to. I forestalled her by lifting her knees suddenly and resting them on my shoulders, leaving me a lovely spread view of her very cleanly waxed pussy. It was bare between her legs, with a wide rectangular landing strip up top.\n\n\"Oh,\" she said.\n\nI caressed her petite but rock hard ass, lifting her a bit more and sliding her forward as I tilted my head and began kissing my way up her inner thigh. When I reached her crotch, I stuck out my tongue and licked her slit up from bottom to top with what I intended to be excruciating slowness. When I reached her swelling bud, I circled it just as slowly. I looked up across her washboard abs and over her rich, upthrusting breasts to stare into her azure eyes. A smile crinkled my own eyes and I let my tongue slid slightly lower and begin to probe inside her.\n\nCourtney adjusted her thighs on my shoulder to give me an even better angle, and sighed, her gaze rolling up to the ceiling. \"I guess I can let you take a break for this....\"\n\nI lifted my face and replied sternly, \"No. This is what we are doing today. You told me sex is lousy exercise, but I'm pretty sure that if we do enough of it, we will both get... some kind of benefit!\" A tart riposte from Courtney dissolved into a groan as I managed to work my tongue into her very tight pussy much deeper than before.\n\nI felt like I had made some kind of genius discovery. Given her light weight, strength, and the excellent design of the apparatus, Courtney could hang like this almost indefinitely. Meanwhile, I could stand almost completely straight, with the added bonus of those fabulous thighs brushing my cheeks. It all made for just about the most comfortable cunnilingus I'd ever performed, while looking like some acrobatic craziness. I intended to make it last. Besides, Courtney tasted great.\n\nEach time I could feel her begin to squirm in anticipation of release, I would withdraw from her pussy and rain licks and kisses along her thighs instead, until she caught her breath and I could resume my main intentions. I denied her release several times before she growled in her most intimidating trainer's voice that it was about goddamn time that I 'finished the set.' With feigned reluctance, I returned my lips to her sex, sliding my tongue one more time along her slit before giving my undivided, unrelenting attention to her clitoris. Her demanding tone quickly devolved to pleading cries and her hips began to buck and surge against my face. I slid my hands from her ass, around her torso, and up to her delectable breasts. I clenched those rich handfuls, then began to pinch and tease her nipples. Immediately, I felt her approaching the point of no return.\n\nIt is a good thing the building's walls were thick enough to dampen industrial noises, because it turned out that Courtney was quite a shrieker....\n\nWhen both her thoughts and her volume began to return to normal levels, I let her oh so fit legs slide from my shoulders and I stepped back. Courtney hung from the apparatus for a moment longer, a broad, sweaty grin on her face. Her gaze never left mine as she stepped on a support off to the side and sprang down to the ground lightly. She approached me and I gathered her into an embrace, leaning my head down to kiss her deeply. We stood there for a bit, simply communing with our mouths. But then she slid a hand onto my chest, then downward to grasp my eager cock, but with clear trepidation in her trembling grasp.\n\n\"It's not like I'm inexperienced,\" she murmured. \"I've had plenty of lovers. But I've never seen, much less touched a cock this big. Luck of the draw, I guess.\"\n\n\"You aren't scared, are you?\" I asked with gentle incredulity.\n\nShe shook her head, \"Just wondering whether it will fit. Because,\" she added looking up at me with a sudden light in her eyes, \"I am quite ready to find out!\"\n\nWhatever she said, there was a little fear there. I am certainly no porn star freak, but I am comfortably larger than the norm. Nevertheless, her confidence and randiness were clearly outpacing that hesitation. She began to pull me down to the cushioned floor right there, and I lay atop her. I shifted between her legs, with my tip just brushing her crotch. I kept poised there for a while, while I diverted us both with a further exploration of her achingly fit torso. After a batch of teasing, licking, kissing, and even some gentle biting of her protruding nipples, I felt her hips squirming beneath me.\n\nI pushed myself up on my arms, locking the elbows straight and began to rub my glans along her opening. She was drenched down there in anticipation, and I pressed my hips forward. The tip slid easily between her folds, but I found myself surprised at how hard further progress was. She was indeed moist and eagerly receptive, but like every other muscle group on her fabulous body, her kegels were extraordinarily strong. I reached my fingers down and caressed her clit as my cock probed her. If anything, it made her clench even harder at first, but when I then moved my fingers away, she relaxed slightly and I found myself able to slide further in. Courtney gasped as I did so and ran her hands down my back. I began to thrust an inch or so at a time, working my way deeper, to her evident approval. At last, I pulled almost completely out and then thrust myself fully into her in a single, swift stroke. Courtney arched her back beneath me and groaned happily as I began to thrust in earnest.\n\nShe writhed happily for a moment or two, but then suddenly grabbed me and rolled both of us over so that she was atop me instead. I happily went with this and thrust up into her again, but now she rose off of me and moved away, beckoning. Curious, and eager to continue, I got to me feet and followed her. She stepped over to the stair climber machine and locked the treads in place. She climbed the first step and looked back over her shoulder at me invitingly. I stepped behind her and embraced her, nuzzling the nape of her neck, cradling her breasts, and pressing my erection against her ass.\n\nI quickly realized that while Courtney was much shorter than me, standing on the high first step of the machine left her at just about exactly the right height. I grabbed my cock and, bending my knees slightly, guided it between her legs, which she helpfully spread in response. Feeling her hot wetness, I re-straightened my legs and pushed back inside her. Both of us groaned in satisfaction this time.\n\nEach stroke felt amazing, in part because she was so wet and quivering with pleasure, and in part because each and every thrust still encountered the same delicious resistance. The woman's muscles down there were amazing. I absolutely reveled in fucking her.\n\nWe kept this up for a timeless while, but both of us seemed unwilling to let ourselves approach a climax yet. I cast about to find a truly spectacular topper move to finish this 'workout', and spied the floor rack of exercise balls by the mirrored wall. I reluctantly pulled out of Courtney, she turned about and I embraced her again for a long kiss. Then I swept her up and carried her over to the large, soft rubber balls. I lowered her down, leaning her back over the middle-sized one. She immediately grasped my intention and braced her feet on the ground and arched her entire naked body over the ball, with her hands bracing on the floor over her thrown back head. I greedily lowered myself onto her and penetrated her once more. These balls are designed to be unstable to lie on, without excellent core strength. Fortunately, we both had that, and our cores were, to put it mildly, working in sync.\n\nI began to pump in and out of her as forcefully and quickly as I could without unbalancing us. I was in heaven. Below me, Courtney's arched form glistened and contorted beautifully as she rocked up and down on the ball in a rhythm that increased the range and power of my thrusts. \"Do not change what you are doing,\" she grunted. \"For god's sake, do not stop what you are doing! You've got the perfect angle right here.\"\n\nAlways listen to your trainer. I looked up at our reflection in the mirror. We made quite a sight. I could see that Courtney's head was relaxed backward, and she too was enjoying the view of our gymnastics, albeit upside down. My only frustration was that I wanted to fondle or suck those lovely tits, jutting up beautifully below me and in the mirror, but if I had tried, I could never have maintained our balance. I contented myself with the strangely voyeuristic view in the mirror. Our eyes met in the reflection.\n\nI was getting simultaneously exhausted and incredibly turned on. I could feel Courtney was similarly ready to give in to the climax clawing its way up within her. I began to pound her as hard as I could without toppling us off the precarious ball, gasping with the exertion. Suddenly, Courtney's talents as a screamer showed themselves again as she climaxed mightily. The sounds of her ecstasy, combined with the view in the mirror of her eyes rolling up with pleasure, and the final squeeze she put on my thrusting shaft sent me over the edge with almost no warning. I spasmed uncontrollably hard as I let out a torrent of cum inside her. She shrieked again in response to my flood.\n\nWe teetered... and fell off the ball. I bounced off the next ball over, she slid to the ground, and we ended up in adjacent heaps on the floor. We gasped and wheezed as we each fought to regain our breath, and sat up, facing each other.\n\n\"Holy shit, you are amazing,\" I told her, a goofy grin on my face as I admired her fantastic, haphazardly splayed body.\n\n\"And you are... creative,\" she replied. \"We should write a book!\" I looked at her quizzically. \"Sex In The Gym\", she went on. \"But we would need a lot of research,\" she leered back.\n\n\"Ha! You said when we first met that sex was low-value exercise!\" I challenged, fully prepared to be convinced.\n\n\"Sure. Sex while just lying there in a bed sure is pretty low value exercise. Whatever the fuck WE just did was a goddamned workout!\"\n\nI reflected that I was already working on an entrepreneurial project, but even entrepreneurs need the occasional side gig...."
    ],
    "authorname": "Publius68",
    "tags": [
        "workout",
        "gym",
        "blowjob",
        "cunnilingus",
        "oral",
        "trainer",
        "equipment",
        "exhaustion",
        "gossip"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/ideal-suburbia-ch-12a-1"
}
{
    "title": "Basics - Neural Control Node Ch. 05",
    "pages": [
        "Author's Note\n\nThis chapter resumes the next morning. Josh slept with Essie and Rhi in Gina's room. While Gina and Tess enjoyed a night together in the main bedroom. Rhi chose to sleep apart from her daughter Gina, and her rekindled love for her sister Tess.\n\nWednesday morning, and movers are scheduled to arrive to move all their things to Tess's house to give them more room and less back and forth between small apartments. Josh has a meeting with a strange guy looking to score a Neural Control Node. Lots of things are happening.\n\nNeurally enhanced assistant scorecard:\n\nJosh - Cube 1: (Active nodes)</br>01- Gina</br>02- Rhiannon (Rhi)</br>03- Ester (Essie)</br>04- Contessa (Tess)</br>05-\n\nJosh - Cube 2: (Deactivated nodes)</br>01- Jasmine</br>02-Eve\n\nWednesday is a hump day, midpoint of the week.\n\nThis is obviously a work of fiction, all characters that engage in sexual activities are above the age of 18. This chapter does include a scene with incest. \n\n\n\nBasics: Neural Control Node Ch. 05\n\nI will not fall in love<br/>I cannot risk the bet<br/>'Cause hearts are fragile toys<br/>So easy to forget<br/>It's just another day<br/>~Just Another Day- Oingo Boingo\n\nI awoke with a start, sitting up and breathing rapidly. The remnants of the dream faded too fast to cling to, as I caught my breath. Essie cursed in Spanish as she had been resting her head on my chest. I looked at Gina's alarm clock, 5:55AM again. I curled towards Essie and kissed her forehead.\n\n\"Sorry,\" I said, \"I had a nightmare...\"\n\n\"It's okay,\" she whispered and lifted her hand to my cheek, \"You have a lot on your mind, just get some rest.\"\n\nRhi pressed against my back, and I enjoyed the feel of her warm breasts pillowing into me. She kissed behind my ear, and ran her hand along my side.\n\n\"Same dream?\" She asked.\n\nI rolled back onto my back and looked at her, and shrugged.\n\n\"I never remember it after I wake up with a start,\" I admitted.\n\nRhi pressed up and leaned over my side to kiss me tenderly. Her hand combed through my hair and her blue eyes looked into mine with concern.\n\n\"I agree with Essie, you have too much in your thoughts,\" Rhi said quietly, Essie nodded her eyes closed but listening, \"You should share more with us, we are here to help you. Always.\"\n\nI rose up and kissed Rhi, as my hand ran along her spine. I smiled into her eyes, enjoying our morning closeness.\n\n\"You all do a good job of emptying my thoughts in such a nice way,\" I said, \"Waking up with you always soothes me, Rhi.\"\n\nShe smiled a wicked smile, and let her hand drop to my crotch. Her fingers tracing the outline of my swelling shaft and stroking it. She kissed me again, then kissed my chest, looking up at me.\n\n\"I should empty something else of yours,\" she purred and continued kissing as her head slipped under the covers.\n\nI groaned and shifted to find a more comfortable position. I spread my thighs as Rhi's hand continued to stroke, and her tongue pressed my foreskin back. I inhaled a long breath as Rhi's warm mouth enveloped my sensitive glans. Essie stirred again and looked at me curiously. Seeing my expression she looked down to watch the bump in the sheets moving up and down.\n\n\"Mmm,\" Essie purred, shifting to kiss me deeply, \"I hope she saves some for me.\"\n\nEssie deepened the kiss, her hand running over my chest. My fingers ran along her spine and under her lush black locks, gripping lightly at the nape of her neck. I kissed her back enjoying her lips and tongue. My other hand combed through the top of Rhi's head, my hips lifting to encourage her oral explorations.\n\n\"Is this how you wake up every morning?\" Essie purred, parting the kiss, \"Aside from the startled nightmare thing?\"\n\n\"I'm hoping this becomes tradition,\" I growled, and tugged her hair back.\n\nEssie hissed and arched, while I lowered my mouth to her breast. I kissed and moved my mouth to her nipple. She shifted up on her knees then moved up to offer me her breasts, her hands sliding along the sides of my head. Her fingers stroking along my skull encouraged me to suck, lick and gnaw on her hardening nipples.\n\n\"Mmmmnnnnfuck,\" Essie purred, \"I'm beginning to see the benefits of rising early.\"\n\nI dropped my hand from her hair, and cupped her breast. The fingers of my other hand tightened into Rhi's scalp as my hips lifted. My cock was at full strength and she was pressing to take my length into her throat. I let go of her head and tossed off the covers. I pulled my mouth from Essie's nipple to look down and watch Rhi. Our eyes locked and she purred like a kitten that found the cream. \n\nRhi pulled her lips off of my cock with a pop, while Essie's hand found my cheek and redirected my mouth to her rigid nipple. Rhi straddled my hips, her hand pulling on my shaft as she positioned herself. I dropped my hand from Essie's breast down her lithe abdomen and cupped her sex. Essie's moan told me I was on the right track as my fingers spread her lips apart.\n\nRhi wormed her hips over the tip of my cock, then with a soft moan sunk down impaling herself on my steely dick. I groaned into Essie's breast, breaking the suction around her nipple. My other hand wrapped around her back as my mouth moved to her other nipple, and regained a firm suction on her hard dark tip. I swirled my fingers up and around Essie's clit eliciting another indulgent moan. Rhi leaned forward, and I felt Essie twist, and then sensed their kisses as I feasted on Essie's nipple. \n\nRhi rode my cock slowly, and I pulled my lips from Essie's breast. Rhi's hand had combed through Essie's hair and her fingers gripped tightly as she kissed the younger girl hungrily. My fingers slid between Essie's bare lips and then curled into her opening, pressing deeply inside of her.\n\n\"Ohh fuck, Papi,\" Essie growled between Rhi's insistent kisses, \"Right the fuck there.\"\n\nI kissed down her belly, my torso twisting as I kept my hips level, lifting into each of Rhi's drops. Rhi steadied herself with a hand on the center of my chest. I kissed down to lick at Essie's clit as my fingers pressed and milked her g-spot. Essie shifted and spread her legs, her back leaning against the headboard. I took a quick glance and saw my two lovers locking eyes, watching each other.\n\nI growled, and moved. I pulled my fingers from Essie's cunt, and then leaned and gripped Rhi's hips. I pulled her forward and kissed her, lowering my hands to her ass. I pulled her off my cock, and she whimpered in displeasure. I twisted and then pressed her down between Essie's spread thighs. Rhi's eyes flicked up at mine and flashed me a grin. Then she pressed her lips to Essie's cunt, sliding her fingers inside to take over what I had started. I shifted to my knees and crabbed between Rhi's lower legs, gripped her hips and aligned my cock. \n\n\"Oh yes, fuck me Master,\" Rhi groaned, looking over her shoulder.\n\nI drove into her deeply, pressing Rhi forward, as she resumed licking Essie's glistening lips. Essie gripped the sides of Rhi's head and she ground her cunt forward into her face.\n\n\"Lick my cunt,\" Essie growled, \"Fuck, yes, make me cum you sexy slut.\"\n\nI hammered into Rhi hard and fast, her flesh rippling from my powerful strokes. Rhi gripped behind Essie's thighs, and pressed her hips back to meet my thrusts. Her mouth glued to Essie's cunt. Essie tossed her head back, her hair swaying as she locked eyes on me, her mouth open as she moaned.\n\n\"Fuck your slave,\" Essie growled, \"Fuck, I can feel you pound her, fuck her hard,\"\n\nMy eyes flared as they locked on Essie's brown eyes. What started as a sensuous morning blowjob had escalated into a full out rutting. \n\n\"Cum for me, slave,\" I growled. \n\nI gripped Rhi's hips and hammered into her hard. I felt Rhi clench and then her cunt rippled, her juices running down her thighs as she shrieked into Essie's cunt. I pulled out and reached for Essie. Rhi rolled over onto her back, gasping for breath. \n\nEssie climbed over her and kissed me deeply. I returned the kiss. I soon twisted her around as I slid back. With a firm hand I pressed her down between Rhi's spread thighs. Essie purred as she understood my intention and lowered her mouth to suck on Rhi's clit. I shifted off the end of the bed, then reached and pulled Essie's hips back. \n\nRhi crabbed down as Essie moved backwards. I gripped one of Essie's brown cheeks, and pried it apart, then aligned my cock and drove it deep into her cunt. Rhi's fingers curled into Essie's dark black hair, and pulled her mouth back to her cunt. I gripped Essie's hips and fucked her hard, tugging her back to meet each hard thrust. She groaned as she lapped Rhi's clit ring, sealing her mouth around her flesh, lapping at her clit. \n\nI locked eyes on Rhi's - her blue eyes such a contrast to Essie's exotic brown pools. I watched her as I fucked Essie. Essie was whining and purring, each pounding thrust pushing her near her edge. She tossed her head back for a moment, then Rhi's fingers tightened and pulled her back against her cunt.\n\n\"Both of you fucking cum,\" I growled feeling my edge speed towards me.\n\nThey stiffened in unison as my hips drove forward. I felt my cock swell then pulse deep inside of Essie's clenched cunt. I shot rivers of cum into her, as her cunt rippled milking me. I watched as Rhi arched back her pelvis lifting, Essie's dark halo of hair a shadow centered around a mist of juices spraying from Rhi's contracting cunt. Essie vibrated, her senses overloaded as she lowered and lapped hungrily from Rhi's spending.\n\nMy hips jerked involuntarily as my own orgasm ripped through my nerves. Grunting with each pulse of my balls. I slowly lowered and pressed into Essie's back kissing behind her ear. Then pulled free and slid onto my back on the bed. My girls shifted and pressed their naked flesh against mine. Essie dropped her mouth to my cock to clean me, and I kissed Rhi deeply, tasting Essie on her lips.\n\nI closed my eyes and just rested. Slowly Rhi slid against me, and then Essie slid up my other side. They mirrored each other as their hands rested on my chest, and they met over me to kiss me, then lowered to kiss my chest. My arms ran over each of their backs as I enjoyed the blankness of my mind, only aware of the bliss I was feeling.\n\nRhi pressed up and kissed me, and I smiled into her eyes. Essie was kissing my chest, her arm rubbing my belly. Rhi grinned as she looked at me, then pressed up and slid off the bed.\n\n\"Time to fix breakfast\" She smiled, \"I have to not be greedy, and it's so easy to be greedy with you.\"\n\n\"I don't mind being greedy,\" Essie laughed, then kissed the tip of my cock. \n\nHowever, Essie did press up and stood beside Rhi. \n\n\"I can help you, if you'd like,\" Essie said, \"I don't have any of the cooking apps, but I can follow directions. Point me where to start.\"\n\nRhi pointed at the closet, \"Clothes help, no one likes hot bacon grease on their skin.\"\n\nThey laughed together as I rested on the bed. Rhi gathered her clothes from where she dropped them the night before and walked down the hall to her room. Essie pulled on a pair of gym shorts and a tee-shirt and followed. I laid back and relaxed. Essie came out of Rhi's room carrying laundry, then returned to gather her discarded clothes.\n\n\"Just gonna start a load,\" she smiled, \"Then later, new sheets for all the beds!\"\n\nI grinned and watched her ass as she walked down the hallway. Then shifted my attention to a nude Gina making a beeline to me. Tess slid out and hugged Essie, then headed out with her to the other apartment.\n\n\"Your little whore needs your cock,\" Gina giggled and slid beside me to hug me tight.\n\nI kissed her fully, and gripped a handful of her pink curls. She looked at me as her eyes flared.\n\n\"Did you enjoy yourself with your aunt last night?\" I asked, searching her eyes.\n\n\"Yes,\" she nodded, \"I did. I have had a crush on her. I would like to see her regularly. I was kinda glad it was just me and her though. Did you enjoy sleeping with Essie and mom?\"\n\n\"Yeah,\" I smiled, and then lifted my hand to cup her breast, and then knead it firmly. \n\n\"Mmmmmmggghhhh\" Gina expressed turning a moan into a purr.\n\nMy fingers milked her flesh, moving to pluck her tight nipple then twist the bud. She shimmied in pleasure. I moved to repeat with her other breast and she lowered to kiss me fully. Her hand ran down to my cock, and stroked. I groaned at her touch.\n\n\"We have a lot to do today,\" I reminded her, \"Movers are coming, right?\"\n\n\"Yeah,\" Gina nodded and groaned softly, \"Supposed to be here around nine.\"\n\n\"I want to fuck my whore in the shower, so we can get clean.\" I growled.\n\nGina's eyes brightened at that thought, and nodded. \n\n\"Sounds delightful,\" she said, \"which one.\"\n\n\"My bathroom,\" I said, which was really Rhi's bathroom.\n\nRhi's room had an en-suite bathroom and a larger shower and garden tub. Essie and Gina shared the apartment's bathroom with a smaller tub and shower. Gina grinned and slipped off the bed. I followed and she took my hand and pulled, excited to have me to herself.\n\nWe were already naked, so while the water ran to get warm, I pressed Gina against the tiled wall of the bathroom and kissed her deeply. My hands dropped to her firm bottom and gripped. She arched to press her ass into my hands which had the added benefit of pressing her full breasts into my chest. I growled at the feeling of her moving in my grip. \n\nI parted and looked towards the door. Tess was silhouetted at the entrance, the morning sun rising in the bedroom window behind her. Gina and I grinned as she walked in, her robe dropping from her shoulders.\n\n\"Rhi said she could handle breakfast,\" Tess said, \"Do the two of you mind company?\"\n\n\"Come and shower with us auntie,\" Gina said, \"I want you to watch him take his needy little whore.\"\n\nTess looked at me with a raised eyebrow, then down my torso to where Gina had found my cock and was stroking it.\n\n\"Needy little whore, hm?\" She chuckled, \"Can I be the greedy slut then?\"\n\nI laughed and stepped into the garden tub. The backsplash of the large circular tub was all tile, and the corners made of nice firm seats. I settled onto one of the seats as Gina sunk to her knees, and stroked my cock. Tess stepped inside and pulled the clear glass door closed behind her. Tess settled onto the opposite corner of the tub, and watched.\n\nMy thighs spread open as Gina hungrily sucked on the tip of my cock. Her fingers stroked it as she dropped her mouth down, taking more and more of my length into her throat. Tess spread her thighs and her fingers spread her bare lips apart. I looked at her fingers as one nicely manicured nail ran between her full lips then circled her clit.\n\n\"I should have been waxing this ages ago,\" Tess moaned, enjoying the feel of her fingers on bare flesh. \n\nI lifted my eyes to Tess' breasts, they were full and had a bit of sag. Gina was occupied with deep throating my cock, and I didn't want to interrupt her - yet. I looked at Tess and grinned.\n\n\"Do you trust me, Tess?\" I asked, \"I think you'll like some of my adjustments, but I won't do anything unless you allow it.\"\n\nTess slowed her stroking and looked at me, her eyes clouded with a bit of confusion. She took a moment to think, then nodded.\n\n\"I do trust your judgement, Josh,\" she said, \"I'll tell you if I don't like anything.\"\n\nI smiled and took a moment to watch her, my hand lowering to Gina's head, a soft grip encouraging her to continue her cock worship.\n\n\"Hey Tess, lift your breasts to a minimum of sag while keeping a natural appearance.\" I started.\n\nTess fluttered her eyelashes as the command putting her into active mode took effect. Then her breasts lifted, and stood proudly. Like a young woman's breasts, full and ripe. She looked down and lifted her hands to cup them feeling their weight in her hands.\n\n\"Increase your cup size to the next cup size, and tighten your areola. Nipple sensitivity at 90% with firm dime-sized nipples.\" I commanded as I watched her shudder in pleasure at the adjustments.\n\n\"Change your hair to tight ringlets, and the length to just past your shoulders,\" I continued, \"Remove any cellulite and firm up thighs, buttocks and bottom of your arms. Tighten your abdomen and increase core strength by 50%, add a bellybutton ring.\"\n\nTess shuddered as the changes took effect. She was the first that really experienced wholesale changes to her natural look. Gina's disguise wasn't meant to be permanent, but I was molding Tess to fit my taste. I could sense her arousal as the changes took effect. Her eyes locked on mine and she nodded her approval. \n\nShe tossed her head, and her dark azure curls bounced around her shoulders. I lowered my hand to grip Gina's pink curls and then directed her attention at her enhanced aunt. Gina looked up at me then back at her aunt, eyes blazing. I nudged her and she crawled the short distance across the tub. \n\nTess watched as her college aged niece crawled towards her through the shower spray, Gina's ripe young breasts swaying as she knelt before her aunt, then ran her hand from Tess' knees to her upper thighs. Tess lowered her hand to her niece's head, and gripped tightly, grinding her mouth to her cunt. Gina purred as she started to lick her aunt, slowly lifting her ass and gyrating it for me.\n\nI sunk to my knees and gripped my cock. I stroked it, feeling how much spit Gina had spread as she had fucked her throat while I was adjusting her aunt's appearance. I notched the tip into Gina's opening, her lips swollen with arousal and open like the petals of a flower. The shower spray was focused on the nexus between Gina's cunt and my cock, and she groaned as my glans buried inside of her, and pressed her hips back. Gina wrapped her arms under Tess' thighs, holding herself as I started to fuck her with gusto.\n\nTess' eyes blazed, her green irises reminding me of one more change.\n\n\"Hey Tess, your irises are a deep blue, almost violet,\" I growled and watched as the color changed. Her dark blue eyes were now strikingly different from Rhi's brilliant light blue. Our eyes locked in heat as I pounded into Gina, whose mouth was sealed around Tess' open lips licking hungrily.\n\nI felt Gina's fingers pressing along my shaft, then pressing into her clit. She moaned as her cunt clenched, the pressure from her fingers tightening her sheath as I drove in steady strokes. My fingers gripped her ass pulling her back to meet my thrusts. She never wavered from eating her aunties dripping cunt, holding herself up using one arm.\n\n\"Such a good little fuck toy,\" I growled, \"She is a wild cat, isn't she, do you see why's she's my needy fuck toy whore?\" I asked Tess.\n\nTess nodded, \"Fuck yes, oh fuck, she's gonna make me cum, fuck...\"\n\nTess arched and then sprayed Gina's face with her juices as she climaxed hard. I slammed into Gina and roared, bucking in short jerking strokes as I hit my peak. My first shot sparked Gina's climax and she shuddered between Tess and I. I felt her cunt clamp and ripple along my shaft as it pulsed a series of jets into her contracting young cunt.\n\nI leaned over Gina and combed my fingers through Tess' curly blue locks. I gripped firmly and her eyes blazed as I pulled her over to kiss her deeply. Her tongue pressed against mine and her arms lifted and wrapped around my neck. We enjoyed a long kiss as the shower continued to spray water around us. \n\nSatiated, we all rose and started to wash each other. Hands gliding over wet flesh, soap suds spreading over blushed flesh. Fingertips cleaning in tight spaces. I washed Tess' new hair, and Tess explored Gina's pink curls. We rinsed off, and then turned off the water. I reached and pulled towels in and helped my shower mates to dry. \n\nTess's azure ringlets had gone slightly slack from the water, tightened into a mass of curls just this side of kinky. It made for an exotic look, and Tess' now violet eyes, shone as she looked at herself in the mirror. ",
        "Tess turned to me, and placed her hands on my chest, looking up at me. She rose on her tiptoes to kiss me, deepening it with the press of her tongue.\n\n\"I'll not doubt your judgement again,\" Tess said, \"You're the boss, whatever you say goes. I can see why all your girls are happy. You spoil us.\"\n\n\"You all spoil me too,\" I grinned, \"We should go eat, it won't be long before the movers are here.\"\n\n\"Oh right,\" Tess said, \"Rhi did tell me to hurry. I lose track of time around you, Josh.\"\n\n\"Same,\" said Gina, as she lifted onto her toes to kiss me back.\n\nWe spread out to get dressed, Gina back to her room. Tess raiding Rhi's closet. I pulled on comfortable shorts, and a tee-shirt, then pulled on some sneakers for the busy day ahead. \n\nWe met at the door, and then walked to the other apartment. I was actually looking forward to living under one roof. The logistics of the two apartment's worked when it was just Rhi, Gina and I. Adding two more really demonstrated the pitfalls of our arrangement. Rhi and Essie smiled and met us as we entered. Then after a series of hugs and kisses we all sat down together. \n\nRhi had made an arrangement of fresh summer fruit, melons, and berries. Essie had taken my car and gotten a collection of bagels and cream cheese. Coffee and a selection of juices completed the spread. I felt a little bad that we had tarried so long in the shower.\n\n\"Sorry we took so long,\" I said aloud, Rhi just grinned and looked at her sister's new look.\n\n\"Tess you look amazing,\" Rhi started, then smiled at me, \"Don't be, Josh, Essie and I combined a little cleaning up and tidying. We simplified some things, and got my office mostly packed.\"\n\n\"So what's the plan,\" I asked, \"Do we need to pack up each room?\"\n\n\"Nope,\" Tess said, \"the movers will pack and unpack, load and unload. We just need to be clear on what stays and what goes.\"\n\n\"Okay,\" I said, \"My office and living room stays, then the only thing from this apartment that should go is Rhi and Gina's office stuff in the main bedroom. Which bed and anything else in there should remain behind.\"\n\n\"My bed,\" Gina said, \"Which used to be yours, Josh. So your apartment ends up being mostly the same.\"\n\n\"Right,\" Rhi agreed, \"I'll clear the lease on my apartment, and we will keep yours as a second home until Essie's job situation is finalized. Even then your apartment can be useful when we come into town. Riverdale will be a fun new start, but when we come back to the city for some things it will be nice to have a home base.\"\n\n\"Sounds like a plan.\" I said.\n\nI excused myself, and walked back to my office to check my emails. My two cubes. I won from auction and had both been sent, and I stored the tracking numbers. Another email from Hassan confirmed the meetup today at noon at the truck stop. I checked my watch, just over 3 hours away.\n\nEssie leaned inside my office door and looked at me, then smiled. \n\n\"Did you hear back from se\u00f1or shitbag?\" She asked.\n\n\"Yeah,\" I said, \"The meet's on.\"\n\nI told her about the location and she nodded. Then she looked at me up and down, then down at her toes then back to my eyes.\n\n\"We should both be in disguise,\" she said, \"We don't want this fucker to identify us later.\"\n\n\"If I can do what I plan, it won't matter,\" I said, \"You're right though, it is better to be disguised, then no witnesses can identify us either.\"\n\n\"Right,\" Essie beamed, \"Now you're thinking.\"\n\n\"Let's think about that while we help get the move started.\" I said, and she nodded agreement.\n\nWe heard a knock on the door and joined the rest of the family in my living room. The movers were very professional, one young man was in his early twenties, while the older worker was in his later twenties. They wore the same professional coveralls with name tag patches, and their logo along the back.\n\n\"Okay,\" said the older guy, \"I'm Tom, who is my main contact?\"\n\n\"That'd be me,\" Rhi smiled, \"Most of the things that need to be moved are over in my apartment next door,\" she said pointing, \"only things needed to load out of here are the office furniture from this room here.\"\n\nTom peeked inside what used to be my bedroom, and nodded. Then wrote on a sticky pad, \"office\", and slapped the sticky note on the door. \n\n\"Great,\" Tom said, and nodded to his partner, \"Joey, get started on this, box up things, and I'll get the lowdown next door.\"\n\n\"Sure,\" Joey said, slowly peeling his eyes from Gina's smile.\n\nGina lingered to help Joey with identifying what to take. She was flirting hard, which made me smile. I appreciated her help because there were still a lot of things that I didn't need to make the move right away. I wanted a bit more time to sort through my stuff. So Gina's MaidMode knowledge of my things and her flirty smile helped Joey with his task. I followed the rest of the moving entourage to Rhi's apartment.\n\nRhi asked Tom to follow her to Gina's room. I was glad that someone had stripped all the beds of sheets. The rooms were already neatly arranged, thanks to the MaidMode enhancements in my assistants.\n\n\"Everything in here but the bed,\" Rhi said, \"Then everything else in all the rooms in this apartment.\"\n\nTom looked around, then pulled out his sticky pad. Together Tom and Rhi named each of the rooms, so the boxes would be labeled correctly. By the time that was done, Gina and Joey returned to the main apartment.\n\n\"The office is all boxed up,\" Joey said, \"You want to box this apartment first, before we move?\"\n\n\"Yeah, the move will be easier with everything boxed up.\" Tom said, \"How about TVs, electronics, things on the wall?\"\n\nRhi identified her electronics in her apartment. She said she would take care of their laptops in the office. I reminded Tom not to open any closed door in the other apartment. He agreed. \n\nFrom that point it was stay out of their way, as they efficiently packed up Rhi's rooms with little wasted effort. Essie drug Gina out of the apartment, and back into mine, so Joey could concentrate. I thought it was cute how Gina flirted with Joey. I guess the low jealousy setting worked both ways.\n\nRhi and Tess were monitoring the move. I told Rhi what my plan was regarding the meeting with the stranger that wanted to buy a cube. She nodded in agreement when I said Essie and I would go in disguise. I joined Gina and Essie back in my office to start the process. With the drive time to the truck stop, we had about an hour before we needed to leave to the meetup.\n\n\"What do you think?\" I asked Gina, \"How should we look?\"\n\n\"Well,\" Gina said, tapping her lip, \"You should look nothing like yourselves. So Josh, a beautiful bald black man, and Essie should be your blonde haired cheerleader type main squeeze.\"\n\nEssie and I looked at each other and shrugged.\n\n\"We would definitely not look like ourselves,\" I agreed, then thought through the process.\n\n\"We'd better strip, Papi,\" Essie said, pulling down her shorts, \"If our proportions change our clothes won't fit.\"\n\n\"Good point, we may even need new clothes.\" I mentioned.\n\n\"Let's agree on sizes,\" Gina said, \"Then while you guys perfect the look, I'll run to the store to get a new set of clothes.\"\n\n\"We gotta be quick,\" I reminded, \"We have to leave in an hour.\"\n\nI had strippped naked while we talked, and Essie was as well. I started with myself.\n\n\"Make me a six foot six inch tall black man with a bald head.\" I began, then just continued a stream of thought, \"A basketball players physique and a short goatee. Brown eyes. Well proportioned cock for similar sized black males.\"\n\nMy perspective changed as my body grew, and held up my arm to look at the skin tone. The AI selected a light-skinned hue, and I darkened it to a more ebony tone. My muscles were sharply defined, thanks to a lower body fat. I turned in a circle for my female companions. \n\nThey both whistled, then their eyes dropped to my new form's equipment and their eyes widened. We had adjusted my normal appearance to have an above average cock. Apparently above average for a Caucasian was still smaller than a tall black man. I dropped my hand down, and then looked down. It was huge, even flaccid, it could be mistaken for a firehouse, the uncircumcised foreskin tightly pulled over the glans looked like a nozzle.\n\n\"Fuck, Papi,\" Essie said lifting her eyes up, \"Save this setting please?\"\n\n\"So Extra Large,\" Gina said, \"the sizes I should get from the store.\"\n\n\"Extra Extra,\" Essie said, shaking her head.\n\n\"Okay, Okay let's not get distracted.\" I said, \"Save this as 'Osiris', and then revert to my normal appearance.\"\n\nThe AI made sense of my commands, and I pulled on a pair of shorts to not get further distracted.\n\nThen I looked at Easie and used my imagination.\n\n\"Hey Essie, appear like a five foot eleven inch model of swedish descent, full D-cup breasts,\" I commanded, \"with long straight blonde hair, and laser hair removal from the neck down. Nice round ass. Not runway skinny, but lithe with low body fat.\"\n\nEssie grinned as her skin tone lightened, and she grew half a foot. Her hair turned near platinum and hung like a sheet of silk down her back. Her breasts were full and perky with small tight nipples that seemed to already be aroused. Her legs were long and lean, her ass high and round. Gina whistled her approval.\n\n\"Reserve another slot for this one,\" Essie said, turning from side to side looking down at herself.\n\n\"Save appearance as Pamela for Essie.\"\n\n\"Slot one of nine is saved as Pamela.\" Essie said robotically.\n\n\"Pamela?\" Gina asked.\n\n\"Anderson,\" I said, nodding. \n\n\"I'm a bit taller than her, Papi,\" Essie chided.\n\n\"Add barb wire tattoo around her left bicep and save,\" I said, \"I was focusing on your tits.\"\n\n\"Oh, then apropos,\" Essie said, weighing her new jugs.\n\n\"Let's all go to the store,\" I suggested, \"Then we can change appearance while in a dressing room, and try on the clothes.\" \n\n\"Someone might notice you leaving the dressing room.\" Gina said.\n\n\"Have you ever noticed who goes in and out in the local big box store?\" I asked.\n\n\"Good point,\" Gina smiled, \"I'm game.\"\n\nI reverted Essie and I to our normal forms, then we got dressed. I walked over and told Rhi what we were going to do, and assured her that we would drop Gina back home before we went anywhere.\n\nEssie grabbed her service weapon with her shoulder holster and a leather jacket. She also grabbed a small pistol with a waistband holster. I trusted her instincts, hoping that firearms wouldn't be needed. I did understand that even after our mini stakeout, we might be walking into a trap.\n\nI pulled out my second cube, and placed it on the charger. Adding my main cube and another charging pad. It wasn't long until they both flashed green lights on the points of the cube. I picked up both and we went to the local superstore. The red exterior was familiar, and the girls soon were ahead of me making a beeline to the female section.\n\nMy selection wasn't complicated. The tallest large size sweat suit they carried, a sports style tee-shirt, new boxer briefs, and extra large sized basketball shoes. I collected what I needed then went into the dressing room and stripped. I returned to the Osiris appearance, and then my phone rang.\n\n\"Make me a Pamela, Papi,\" Essie whispered, \"I'm naked and ready.\"\n\nI spoke the command into the phone, and it registered. She giggled into the phone, and then clicked off. I imagined it must have worked. \n\nI looked at myself in the mirror. The dark ebony skin made me look like a shadow. My eyes lowered to my cock, and I just shook my head. I opened the underwear bag and pulled up a new pair of briefs. They fit fine in the waist, but my cock's outline bulged down one thigh. Luckily the briefs were long, I still had a few inches before the head would poke out.\n\nSatisfied, I pulled on the sweatpants, they were a little short, so I decreased my height by a couple of inches. The tee shirt fit fine hanging down my torso and past my waist. I pulled on the sweat suit jacket and it fit and hung properly. Then I pulled on some socks, and tried on the shoes. Everything fit well. I collected my old stuff and put it in a bag, then pulled off the tags to check out and pay for my new clothes. \n\n\"Everything fitting?\" I asked when Gina rang.\n\n\"We may need some help,\" she said, \"Your model doesn't appear to fit any off the rack clothes.\"\n\n\"I'll be right there.\" I left the dressing room, and bought all my new clothes at the dressing room attendants station. She didn't even bat an eye, and just rang me up. I put the receipt in the bag with my old clothes then found the girl's dressing room.\n\nThe clothes they selected were the right style. Painted on blue jeans with rips in the thighs and lower legs. A sport style halter top that flashed Essie's bare midriff. Her leather jacket fit fine. Just a few adjustments to shorten her height, a small increase to her bust, and tighten her bottom made the clothes fit perfectly She looked amazing. \n\nI added a belly button piercing, that would sparkle as her top rode up. Essie slid her small pistol into its holder and it was near invisible tucked into her waist in the small of her back. Her leather jacket concealed it perfectly. We posed in the mirror, and looked like a college jock and his blonde girlfriend. Gina approved. We paid for Essie's clothes then walked back to our car. No one batted an eye.\n\nWell everyone was watching us, but no one suspected a thing. I played to the crowd and kissed both my beauties as they climbed back into my car. I had to adjust my seat down and back to fit inside, and still felt like Wreck-It Ralph driving one of the candy racers. But it worked.\n\nWe dropped Gina back off at home and I checked our inventory. My main cube I locked in the glove compartment. One slot was still available and I didn't want it occupied by accident. My second cube, with Jasmine's and her mother's deactivated profiles on it, I placed in the original packaging, including the paper QR code. I carried that in my sweat jacket pocket. Essie checked her weapon, ensuring it was loaded with a round in the chamber.\n\n\"If things go bad,\" she said, \"I don't want to have to chamber a round, just cock and shoot.\"\n\n\"I trust your gun safety protocols,\" I said, \"Hopefully you will teach me what that even means.\"\n\n\"So tell me your plan,\" Essie said, \"I don't want to be surprised.\"\n\n\"I'll tell you on the way,\" I said, \"He is supposed to be wearing a red tie, and already be in a booth.\"\n\nI pulled out and headed down the highway. I was feeling a bit nervous, and was glad Essie was with me. She had a calm demeanor when she was under stress.\n\n\"Does he know what you look like?\" Essie asked.\n\n\"No,\" I reported, \"I told him I'd recognize his tie, and use the phrase, 'cube master', when I sat down.\"\n\n\"Not very subtle,\" Essie said, \"But nothing this guy has done has been subtle.\"\n\n\"I figure I'd play on his eagerness,\" I said, \"Show him the originally packaged cube, then wait for him to open it in front of us.\"\n\n\"And if he doesn't\" she asked \n\n\"I won't accept his money til he is satisfied it's legit,\" I replied, \"No deal until he touches it.\"\n\n\"What will happen if he touches it?\" Essie asked.\n\n\"If he isn't a node master,\" I explained, \"he gets captured, and assimilated. That's what I'm expecting, then he'll be useful to me. He'll be forced to follow my commands. I have some ideas after that.\"\n\n\"If he is a node master?\" Essie questioned. \n\n\"That's the worst case.\" I said, \"I know it will flash a different message, detecting another node master, and asking if the cube should be added to his account. You will need to be ready to persuade him to give me back the cube. We can disengage then come up with another plan.\"\n\n\"But I can't see the cube messages,\" Essie said, \"Only you can see it, right?\"\n\n\"Right,\" I said, \"If he's not a node master, you won't need to do anything. If he is, I think you should sit beside him, tease him, distract him. As he is opening the package, pull your weapon and be ready. If I say, 'Razzle Dazzle', then knock the cube back towards me, and let him know you're armed.\"\n\nWe were both silent for a while letting the miles pass.\n\n\"What are our names?\" She asked.\n\n\"I was thinking I'd be Jerome and you could be Tawny.\" I tried.\n\n\"Tawny huh,\" She grinned at me, \"That's not bad, Jerome. Where'd you get those?\"\n\n\"I actually work with a guy named Jerome,\" I said, \"but he looks more like Steve Urkel, and his wife Tawny is a librarian.\"\n\n\"So nothing like us,\" she grinned. \n\n\"Not even a little,\" I agreed. \n\nI saw the tall sign for the truck stop and my gut tightened, \"Almost showtime,\" I said, pulling into the exit lane.\n\n\"Okay,\" Essie said, \"When we get in, pull out your cube and turn on the communicate app. That way you can hear me. Right?\"\n\n\"Right.\" I agreed.\n\n\"I'll go in and make a sweep, see if he's there.\" Essie continued. \"If I spot him, I'll sit at a table, and ask for a menu.\"\n\n\"Okay,\" I agreed, \"Then what,\"\n\n\"I'll keep tabs on him,\" Essie said, \"Switch to Vision, so you can see him through my eyes. I'll keep sweeping the room, over the tip of my menu. When you are satisfied, go back to Communicate and tell me you're on your way in. The abort word is 'bubble gum'\"\n\n\"Bubble gum,\" I repeated, \"If either of us say that, we walk out and don't turn back around.\"\n\n\"What would cause you to abort,\" I asked. \n\n\"If he has any muscle,\" Essie said, \"I'll spot them. When you slide into the other side of his booth, I'll be watching. If it's all good I will join you, you introduce me, and then I'll slide in beside him. If he's got muscle, \"I'll ask for some bubble gum,\" then slide in beside you.\n\n\"Okay,\" I said, \"at that point, we just have to disengage. I'll say I lied about having a cube, and hopefully he won't freak out.\"\n\n\"I think everything we're doing is overkill,\" Essie said, \"But it's worth having a plan. Let's do this.\"\n\nEssie kissed me deeply, then slid out of the car. I pulled my cube out of the glove compartment and tapped to get to Essie's Communicate app. I listened as she moved through the diner. She slid into a chair and asked for a menu.\n\nI tapped out of the Communicate app, and then into her Vision. The screen lit up and I could see her pan the room over the top of her menu. She focused on one guy. It was Hassan, and he had on a red tie. He looked bored, checking his watch and his phone repeatedly. \n\nI pulled out my phone and sent him a message from my fake account. \"Running late.\"\n\nThen I tapped out of Essie's Vision and back to Communicate. \n\n\"That's him,\" I said, \"Watch him, I sent him an email I was running late.\"\n\n\"Yeah,\" Essie whispered, \"He's checking his phone, looking even more irritated. But I've cleared the restaurant, he's alone.\"\n\n\"Okay, coming in,\" I said. \n\nI locked my cube back in the glove compartment, then slid out of the car, and hit the fob to lock the SUV's doors. I walked slowly, aping the gait of the professional athletes I usually watched on TV, when they were actually playing sport, pre-pandemic. I opened the door and walked in.\n\nI walked past the little trucker mini-mart, then into the restaurant proper. I shielded my eyes, and looked around. I made a little show of looking then recognizing Hassan. I waved, and didn't smile then walked over and slid into the booth, slumping down in the seat.\n\n\"S'up\" I said, \"You the cube master?\"\n\n\"I hope to be soon, yes.\" Hassan said, \"I am Hassan, you are.\"\n\nEssie stood by the end of the table. I nodded to her.\n\n\"I'm Jerome,\" said, \"this is Tawny.\" \n\nHassan's eyes lit up as he looked at Tawny, letting his eyes wander over her curves. \n\n\"Hey Hassan,\" Essie said, slipping in beside him, \"You doing good today, baby?\"\n\nShe was turning all the charms, pressing his buttons, pulling his levers. Twirling her hair while looking at him, then smiling over at me. Hassan didn't know what to do with himself. He looked at me and then back at her. ",
        "\"She's mine,\" I said, \"Don't get any ideas, pay for this cube, you can get your own girl.\"\n\n\"Right,\" Hassan said, \"Sorry, yes. Do you have it?\"\n\nI made a show of reaching into my pocket, then pulled out the cube in the apparently original packaging. I placed it on the table top, then looked at Hassan.\n\n\"Do you have my money?\" I asked.\n\nHe pulled an envelope out of his breast pocket proudly, then reached inside and fanned 5 twenties. He showed them to me, I nodded, then he slid them back into the envelope. He placed it flat on the table.\n\nI nodded and Essie winked at me, she was ready. I pushed the cube over to him, and he slid the envelope across the table. I held the envelope down on the table with my hand.\n\n\"Open it up,\" I said, \"I want you to see that it's brand new.\"\n\nHassan smiled and rubbed his hands together, then gripped the top of the packing box and shook lightly. The weight of the cube started to pull the bottom down from the top of the packing. Hassan gripped the bottom and slid it out. Putting the empty top on the table and looking at the cube.\n\nHe looked up at me with a grin, then touched the cube.\n\nHis eyes blanked and the cube started streaming. His voice shifted to monotone, and he chanted the assimilation script. I felt like I needed to scrub my skin as he fell into the sway of my backup cube.\n\nNeural Control Node Unit 3 of 5 initialized...</br>Unit Hassan added to the control list...</br>Active mode restarted...</br>Say Setup to resume setup processes.\n\n\"Setup Hassan,\" I said quietly leaning over the table watching his eyes fade out as he blinked back into Setup mode.\n\n\"Unit Hassan, alias Asshole. You will forget this meeting after you leave this restaurant.\" I whispered across the table. \"You will not seek out any other NCNs, the node you won at auction send to the following PO Box. Once it has been mailed you'll forget anything there is to do with Neural Control Nodes.\"\n\nHe started to repeat the new commands, and I stopped him short.\n\n\"Do not speak out loud, just nod that you received my commands.\" I growled.\n\nHe nodded at me.\n\n\"Return to active mode,\" I said.\n\nHis eyes regained focus and he just looked at me blankly. \n\n\"Take your money, and go,\" I said, taking my cube back, and then sliding the envelope back towards him, \"I'll be in touch.\"\n\nHe nodded and took back his envelope, while Essie slid out from his side. She slid beside me watching him cautiously, her hand going to my thigh.\n\n\"Thank you,\" he said, then walked directly outside and to his late model sedan and drove away.\n\n\"Fuck, Papi,\" Essie whispered, \"That was hot, I kinda want drop under the table and suck your huge cock right now.\"\n\nI grinned at her, and put the cube away. Then we slid out of the booth, leaving a $20 tip for the waitress that never visited and went back to our car. I have to admit, I was as aroused as Essie was. Once we were back in the car, she leaned over and traced the outline of my cock. It had stretched down my thigh. Walking to the car had been a bit difficult with an erection growing down my thigh.\n\n\"What are you going to do to him?\" Essie said, \"You let the asshole off easy. He needs some re-education I think.\"\n\n\"I have some ideas,\" I said, \"but I want to get his other cube first before I fuck with him too much.\"\n\n\"Hurry home,\" she said, \"I want that hard black cock of yours up my tight white pussy.\"\n\nI made good time on the way back to the apartments. Rhi called while we were on the way back and I put her on speaker.\n\n\"The movers have us all packed up,\" Rhi said, \"Tess and I are driving up in our cars to meet them at her house. Gina stayed behind to help you move her bed back into your room.\"\n\n\"That sounds like I plan,\" I said, \"We'll do that, and then we'll drive up to Tess'. Can you text me her address?\"\n\n\"Sure thing babe,\" she said, \"Are you okay, your voice sounds off.\"\n\n\"It's my disguise,\" I said, \"I'll have Essie send you a photo.\"\n\n\"Okay,\" Rhi said, and I could tell she was grinning, \"See you soon, I'm so excited to be all within the same four walls.\"\n\n\"We are too, Rhi,\" Essie said. \n\nShe snapped a picture of me driving, then another of the outline of my cock stretched along my sweatpants. She texted them to Rhi. In a couple of minutes Rhi called back.\n\n\"You have a big black cock?\" She said shocked, \"No wonder Gina volunteered to stay behind. You're going to share right?\"\n\n\"Yeah babe.\" I said, \"Essie and Gina made me save this look. I'm starting to feel jealous about myself.\"\n\nWe pulled into the parking lot of the apartments. I said the command to change Essie and I back into our normal forms before we left the car. We both hurried up the stairs gripping our oversized clothes. Once upstairs we slipped into Gina's room. She was lying naked on the bed, legs spread and masturbating. Her eyes flared as we returned and I changed back into a black sex god, shifting Essie's form into Pamela mode, and suddenly our clothes fit again.\n\n\"Did it work?\" She asked first, then slid off the bed and onto her knees. \n\n\"Yeah I said,\" pressing down my sweatpants and shorts, I was pumped with adrenaline and needed a release.\n\nEssie was stripping just as quickly as I was and Gina couldn't wait for me to kick off my shoes before she was sucking on the head of my monster cock. I managed to free my feet from my sneakers and step out of my pants and shorts, while Gina spread her spit all over my ebony shaft.\n\nEssie was naked and on her knees, looking up at me as she gripped Gina's hair and pushed her throat deep onto my cock. Gina choked and gagged, then reached and stroked my shaft.\n\n\"Fuck,\" she said, \"I can't even wrap my hand around it.\"\n\nI pulled my jacket and shirt off and looked down my ebony flesh at the two eager girls. Gina lowered her mouth and sucked in one of my heavy balls. Essie in the Pamela configuration, pushed her lips over my crown, and her blue eyes looked up at me. I gripped her blonde pony tail, then wrapped it around my wrist and tugged her into me. Her eyes rolled back and she coughed, then swallowed and my cock slid into her throat. She pressed her mouth forward, with a purr until her nose pressed against my belly.\n\n\"Fuck\" I said, \"Such a cock whore, yeah, feed on my big black cock.\"\n\nShe fluttered her eyes, then pulled back. It was like watching a snake shed its skin as it took a long time for my cock to pull from her mouth. Gina looked at it with awe and tried to imitate Essie's skillful deepthroat. She got about halfway down it, then coughed and gagged. She pulled back and I pulled her head back.\n\n\"Swallow all of my cock, my greedy cocksucking whore,\" I chided.\n\nShe got to the same point then forced herself to swallow, and I felt my head drive in deeper. She purred around my shaft, then with my head in her throat just pushed forward until her nose touched my flesh. I held her there and she purred, I could feel her throat vibrate, then I pulled back quickly and she gasped. Large strands of her spit pulled from her mouth and spilled onto her breasts.\n\nEssie had rolled onto her knees and shook her hips, rotating her hips as her hands reached back and spread her cheeks apart.\n\n\"Slam that fuck stick into your bitch, Papi,\" she begged.\n\nHer Nordic features not meshing with her normal slang, but I didn't mind. I lined up the head of my cock, the foreskin stretched tight over my glans, and pressed into her tight opening.\n\n\"Oh fuck...\" she said, as my cock stretched her, \"Fuck fuck fuck fuck\"\n\nI slowly drove it into her, and then stroked back. It took two or three tries before I could feel her ass press into my thighs. Gina had turned and was offering her cunt to me in much the same way. I pulled out of Essie and notched into Gina's slick lips. \n\n\"How long were you masturbating?\" I asked.\n\n\"Too long...\" Gina whined, \"I need your cock, baby.\" She growled, pressing her ass back.\n\nI drove into her, and felt her opening stretch around my shaft. She groaned then pressed back, wanting more.\n\n\"Fill your whore,\" she goaded, \"Slam that fuckstick into me, fuck.\"\n\nI gripped her shoulders then just drove in deep. She shrieked at the intrusion then pulsed into orgasm, her tight cunt clamping around my cock. I groaned out, and fed my fingers into Essie's white cunt. She tossed her head and looked at me as I rutted into Gina.\n\nI pulled back and lined up behind Essie again. This time I wasn't gentle and rammed into her making her scream. She looked over her shoulder with lust filled eyes.\n\n\"Fuck me, fuck fuck me...\" she babbled, \"all of it .. stuff it in me.. fuck.\"\n\nI gripped her shoulders and rammed into her pulling her back into my strokes. She shuddered and moaned, her head tossing back. I pulled out, and tapped the bed. \n\n\"Gina on bottom, Essie on top\" I directed, \"Line your pussies up so I can fuck you both.\"\n\nThey quickly aligned and I squatted down slotting my cock into Gina's cunt. I drove forward looking down watching her cunt stretch to take the black log between her legs. I fucked her for ten strokes and she arched back almost to the edge. I pulled back and aligned then drove into Essie. She pressed back and kissed Gina, driving her tongue into her lover's mouth. I slammed into Essie for a count of ten.\n\nI alternated back and forth, I pulled out each time just before they came. I was nowhere near my edge, so this continued as they ramped up to their peaks. The room filled with their whines and pleas for more. I couldn't fuck them deep enough.\n\nGina tripped into bliss first her head arching back as I felt her cunt clench around me. Then I switched back to Essie and rutted into her until she arched back and her legs clamped shut, her juices flowing down over Gina's overheated cunt. \n\n\"On your backs, both of you,\" I growled in my deeper voice. \n\nEssie rolled over and looked up at me. Her eyes dropped to my cock as I stroked the thick shaft, pulling my foreskin back and rolling my palm over my glans. My precum soaked my palm and I used that to stroke my cock. The pair squeezed together, their tits bouncing and they're eyes looking at me. Their mouths were open like little birds wanting to be fed. I groaned and my cock pulsed. \n\nI was amazed as the thick ropes of cum that shot from my cock and splashed into their flesh. Rivers of cum started to form on their flesh as my shots ran together and pooled in the low points. My white cum dripping from their breasts to their bare pussies. \n\nThen they both rose and Essie was the first to seal her mouth around my crown. I felt her lick around the head and suck, her tongue flicking along the slit. She pulled away and Gina's hungry mouth sucked in my cock, repeating the same hungry motions. They gorged on my cum, then laid down and reversed so they could lick my cream from each other's flesh. \n\nI watched them as I stroked my monster cock. It took a long time for my cock to get to full strength, and it also took a long time for it to soften. I rolled onto the bed beside my lovers and rested. They pressed against me, and Essie slid over me to the other side. I was quivering and they went through tremors and aftershocks from their orgasms.\n\nAfter a while we were able to break from the blissful reverie. I blinked and looked at them both. They smiled and kissed me. I returned Essie and I to normal form, and both of the girls grinned. \n\n\"Don't erase that slot,\" Gina said, \"We need that on the regular playlist.\"\n\n\"Fuck, yes,\" was all that Essie was able to add to the conversation.\n\nWe slowly got up and I found some clothes. My costume was way too big for me to wear in my normal appearance. Gina had her outfit on from the moving morning. Gina had remembered to save outfits for both of us. The rest of our clothes were in a moving trunk headed to Riverdale. \n\nOnce we dressed we made quick work of moving my mattress back to my room. It was a bit odd, seeing my apartment now mostly unchanged from the way it was Saturday morning when I ordered my cube. With the chore done, I relaxed on my sofa and pulled out both my cubes. \n\nThe girls leaned against me resting, but wanting to feel me near. I wanted them near too. I checked my email on my phone, and I was surprised to have received an email from Hassan. I guess the cube he won from auction had expedited shipping, and he was sending me the tracking number for the cube he shipped back to me per my commands.\n\n\"What should we do to Hassan?\" I asked.\n\nPart of me was split, he hadn't done anything wrong, he was just ignorant. However, the thought of him having the power of the cube made me uncomfortable. His social media thoughts on women were primitive. He didn't think they should be educated. A woman's only role, according to Hassan's social media posts from over a year ago was to serve men and bear children. It was offensive to me. \n\nThough what I had accomplished with the cube, wasn't much different than Hassan's stone-age philosophy. Although I had given each girl a choice to deactivate, part of my mind wondered if anyone would ever choose to give up their neural enhancements. Was the positive feedback of the AI, pleasure, and 'lovely beneficial brain chemicals,' as Rhi put it, hooking my girls on the power of the cube. Had they become addicted to the neural enhancements?\n\n\"I think he should see what it's like to be a woman,\" Essie said absently. \n\n\"Can you even change genders,\" Gina asked, \"that would be interesting.\"\n\nI found my secondary cube and tapped to bring up Hassan's label: Asshole, then tapped on it to bring up the apps menu. I installed FuckMe, and FuckMe:Orientations out of curiousity. After the apps installed I paged through the settings.\n\n\"You can actually,\" I said, \"You can change orientation, gender - there is an add on that allows a plethora of orientation options.\"\n\n\"Make him an asexual transgender, with a cock.\" Essie suggested, with a giggle \"Give him breasts, and a very sensitive anus. Make it so he can't get hard without something in his ass.\"\n\n\"Are you serious, or just brainstorming?\" I asked, \"because, I think I can actually do all of that.\"\n\n\"Think you should make him into a woman, but force him to wear a veil, under the veil is his normal face. But his body is completely female.\" Gina said, with a goofy grin, \"Then force him to be a cam girl, and make money that way. If his callers can make him cum they can see his face.\"\n\n\"Remind me not to make either of you mad at me,\" I said, and chuckled at their jokes. \n\nI paged through the options looking for something a little less drastic but with appropriate karma. Technically he couldn't even remember me. He would have no knowledge of the cube. I could deactivate him and he wouldn't be able to bother anyone.\n\n\"Let's see what the asshole is doing.\" I decided. \n\nI flicked to his profile and then tapped on vision. The screen filled up showing Bala was at his desk, in his office. Four large screen monitors in front of them four with streaming stocks figures going down the page. A few windows opened to financial television shows, as it was getting close to market close. I couldn't see the details of his trades.\n\n\"Interesting,\" I said, \"he seems to be a day trader, that's pretty mundane.\"\n\n\"We really don't know much about this guy, do we?\" Essie asked, \"He just might have been looking for cubes, there isn't any crime against that.\"\n\n\"True,\" I said, \"We don't know why he was looking for cubes, just made the assumption it was to enslave females based on some old social media posts.\"\n\n\"Can we find out more about him before we ruin his life?\" Essie asked, \"I'm all for fucking up someone that deserves it, but I really haven't gotten anything disturbing from this guy. I could do a background check.\"\n\nMaybe it was the bliss I was feeling from having hard satisfying sex with my two younger girls, but I suddenly felt bad about giving Hassan a hard time. I flicked through his options, and found the Alias setting on the cube interface. I removed the \"Asshole\" alias, and then tapped out of the cube.\n\n\"We don't have to do anything right now,\" I said, \"He's under my control, and he shouldn't even remember what a cube is, maybe I'll talk to him later under Setup mode and get what was on his mind.\"\n\n\"I think that's a good plan Papi,\" Essie said, \"It's hot and I'm ready to go. Didn't Tess say she had a pool?\"\n\n\"Yes!\" Gina said, \"It's an awesome view, and I agree let's go swim, it's too hot to lie around here scheming.\"\n\nI put my arms around my two girls and pulled them close. They leaned into me and we enjoyed a short moment of relaxation. Then it was time to get moving.\n\n\"Are you going to take your bike?\" I asked Essie.\n\n\"When will we be back down here?\" She asked, \"I don't feel much like riding, it's been a pretty hectic day.\"\n\n\"I can bring you back whenever,\" I offered, \"Let's lock up this spare cube, and your extra weapons, and get going.\"\n\nI gathered up my laptop, and power supply. Essie put away her smaller gun, I put my spare cube on the top shelf of her gun safe. Essie kept her service weapon and her shoulder holster. She pulled out a smaller gun safe, for the back of my car. \n\nWe looked into both apartments, it was weird seeing Rhi's completely empty. My own looked like it normally would, before the cube entered my life. We all stayed together, as we locked the doors then headed to the car. It was just getting on towards late afternoon. \n\nI drove up to Tess' quietly wondering what it even looked like. Gina tried to describe it for us, but Essie and I had trouble picturing it. \n\n\"You'll love it,\" Gina finally said, \"It's nothing like our apartment.\"\n\n\"I kinda liked what we had going at the apartment,\" I admitted, \"That might be because it was mine, and I had control. This seems like I'm just visiting. It might take a bit before I think of it as home.\"\n\nGina plugged the address into my car's GPS, and we headed up to Riverdale. While the name brought echoes of comic books to my mature brain, the town itself was pretty much on point for its name. The city ran along a river, and then widened along the larger valley. The city was protected by flooding control systems, lessons learned from an annual flooding pattern made it pretty effective. \n\nThe directions took us past the downtown region and along a golf course. The houses got exceedingly more grand and spaced further apart. I saw a moving truck parked in one of the driveways, and it correlated with the map directions.\n\n\"It's right there!\" Gina said as I pulled up, \"I hope the movers are almost done. I want to swim, maybe skinny dip.\"\n\n\"That sounds fun,\" I agreed, \"What do you think, Essie?\"\n\n\"At this point anything without clothes sounds wonderful,\" she said, \"I'm ready for summer to be over, and cooler weather.\"\n\nI pulled into the drive past the moving trunk. Tess' house was large, with a driveway that curved along the front. The moving truck pulled in the opposite way, so I pulled past it and parked on the other side of the entrance. Rhi was at the door smiling and gathered Gina into a hug, then Essie for a squeeze. \n\nFinally it was my turn, and Rhi leaned into me, lifting her arms along my back and over my shoulders. I wrapped my arms around her back and kissed her. She was hot, and looked like she'd had a hard day. She smiled at me and dropped her head to my chest and rested.\n\n\"We're almost done,\" she said finally, pulling back and looking up at me, \"Do you want to see our room.\"\n\n\"I want to see the whole house,\" I said, \"I have no idea what to expect.\"\n\n\"We will need all four of us on MaidMode to keep it tidy,\" Rhi grinned, \"Tess has help though, so maybe not.\"\n\nI thought to myself about using some of my spare nodes to enhance the help Tess hired. It was certainly possible, but I dismissed it out of hand. I wasn't always comfortable with the influence I had over people I cared about. I didn't want the added burden of enslaving people I didn't even know. ",
        "Rhi escorted me through the front door. Immediately there was a large living room, and directly on the opposite wall from the front door a large stretch of bay windows. The river was in view on the other side of a generous infinity pool. The hot tub was tucked in under the large cantilevered veranda to the right. \n\nThe shade from the veranda allowed for a large patio space that felt like an extension of the living room. To the right side of the living room, towards the kitchen was a dining area, which had an echo of a similar arrangement on the patio. A large kitchen was further to the right of the entry, with the ever present view of the river and pool visible from behind the counter.\n\nPast the living room to the left was a broad hallway. Rhi took me down the hall, showing a couple of open rooms setup as work spaces. To the right just past the living room Rhi opened a large double door into the entry of the master bedroom. A short entry opened to a large bathroom to the left, and spacious closets on the right.\n\nStraight ahead was a spacious master bedroom. It also bordered the pool at right angles from the living room. Large windows on two sides let in natural light and allowed views of the pool and then the river as it passed the house. Tess had a large king size bed against the back wall, looking out towards the pool. A spacious sitting area extended along the far wall overlooking the river. The whole lower level of the house was like an extension of the outside with generous views.\n\n\"We can sleep here with Tess,\" Rhi explained, \"She has made a space in her closet for our daily wear. The rest of our clothes will be in the room above this one.\"\n\n\"What about Gina and Essie?\" I asked. \"What if we want a night alone?\"\n\n\"Great questions,\" Rhi smiled, \"Come with me.\"\n\nShe led me to a stairway at the end of the hallway, and we walked up the stairs. The upstairs had a large bedroom directly above the master suite. A long hall with a half wall open to the living room below led to three rooms along the far side of the house above the kitchen and garage. One room overlooked the pool from above the kitchen. The other two had open porches that looked out over the river as it approached the house.\n\n\"This is amazing,\" I said, \"What can we do to help around here. I feel like we should do more than just take up space.\"\n\n\"We can talk about it.\" Rhi said, \"I reserved the room above Tess's for you and me. We can use that if we want some alone time. Gina and Essie can decide if they want to be roommates, or have their own room. The only people living here are the five of us. Tess' help comes and goes.\"\n\n\"I just hope we don't scare them away...\" I grinned.\n\n\"Once the movers go, we all want to swim,\" Rhi said with a grin.\n\n\"You all?\" I said, 'When did you talk with Gina and Essie?\"\n\n\"I can just tell,\" Rhi grinned, \"We're ordering pizza too, sorry.\"\n\n\"Don't be, I love pizza,\" I said, \"You've had a pretty busy day, you deserve a night to just relax, swim. ,,,\"\n\n\"A good swim sounds good,\" Rhi said, \"Today has been exhausting, I'd like to keep it \n\nquiet tonight.\"\n\n\"I agree,\" I said looking into her eyes, \"It has been a crazy day, and I would love to just spend time with all of you. Just quality time, if you know what I mean.\"\n\n\"I do, Master,\" Rhi assured me, \"We may need to ensure everyone agrees, but we will have plenty of time and space for more strenuous activities in the coming days and weeks.\"\n\nWe heard the rumble of the moving trucks engine starting. We shared a soft kiss then started to walk downstairs to go to the pool.\n\n\"Oh, we should put on our swimsuits,\" Rhi said.\n\n\"Gina said something about a skinny dip on the way here,\" I mentioned.\n\n\"Tess only allows those after dark,\" Rhi said, \"something about the HOA rules.\"\n\n\"Then where are my clothes?\" I smiled.\n\nRhi maneuvered me back to the upstairs room, and showed me that most of my clothes were stored in the upstairs bedroom closet. \n\n\"This is really our room, sleeping with Tess is optional,\" she explained, \"So all of our clothes and belongings will be here. I reserved a small area in Tess' room for our day to day. I don't know how this will work, but I'll manage it using MaidMode. For now, your daily outfit and swimwear will be stored in our space downstairs.\"\n\n\"Okay,\" I said, \"that makes sense.\"\n\nShe guided me back downstairs, and showed me the new closet space. Part of my mind was impressed with the amount of forethought that Rhi had given the process of moving into this new unfamiliar space. I was thankful she wanted to make it easy for me, and was thinking of how I would want things. We changed into our swimsuits, then walked out to the pool deck through Tess' bedroom access.\n\nGina and Essie were already in the water, wearing swimsuits. Tess was also in her swimsuit sitting on the edge, her feet slowly kicking in the cool water. Rhi slid down beside her sister, and I sat on the other side.\n\n\"You have a very nice place,\" I said to Tess, \"Thank you again for inviting us, I feel like we have invaded your enclave.\"\n\n\"I'm happy to have the company,\" Tess smiled, then leaned and kissed my cheek, \"I want you to feel at home here, Josh. I don't want you to think you are a visitor that can't relax.\"\n\nTess reached out and held Rhi's hand, then brought it to kiss the back of her sister's hand. Rhi smiled at Tess and then pulled her close and shared a soft kiss.\n\n\"I'm so happy that we've reconnected, Tess,\" Rhi said, \"I am sorry it took me so long to get over my issues.\"\n\n\"We both had our issues, Rhi,\" Tess said, then looked over at me, \"Sometimes we need an external push in the right direction to get over our own junk.\"\n\n\"I'm just amazed I haven't fucked everything up yet,\" I grinned and slid into the pool, \"You all keep me focused on keeping you happy and safe.\"\n\nI pushed back, twisted, porpoised under the water, and kicked towards Gina and Essie. I surfaced between them. I smiled at both of my younger minions. They grinned back and then leaned to hug me close. We made a circle and I pressed back to float on my back. Essie treaded water and looked at me with questioning eyes. I tipped back and treaded water vertically beside her.\n\n\"Would it be okay if we postponed...\" she looked me up and down, \"freaky orgy time?\"\n\n\"Freaky orgy time?\" I chuckled, \"You mean you don't want my big black cock? No, I'm feeling the same way. This is a bit surreal, isn't it.\"\n\nGina had swam back towards Rhi and Tess and was standing on the bottom. Her head just above the water of the deep end. I looked around and the pool was designed to feel like it extended into the river itself. The uninterrupted view of the river that the house - no this was a mansion - allowed was amazing.\n\n\"You have no idea, Papi,\" Essie said wrapping her arms around me, \"Sunday night I was looking forward to relaxing in my studio apartment, it's one chair, a futon, and a refrigerator with very little food.\"\n\n\"And now...\" I prompted.\n\n\"I feel like a visitor,\" Essie said, \"That I could be invited to leave at any moment. I feel a bit insecure, my world is nothing like this.\"\n\n\"You're not going anywhere,\" I said, \"I need you near me, I feel like things could get more weird. I have never been near this much lavishness. I don't think Rhi and Gina have either. Tess is from another world.\"\n\n\"How did I become so important to you?\" Essie asked. \n\n\"I dunno,\" I said, \"You resonate with me, maybe because you understand we're not completely secure. You and I aren't related, like they are, we're close, but we're not family. Why do you call me Papi?\"\n\n\"That's what I've always called my boyfriends,\" Essie blushed, \"It's like calling you Daddy, but not in an incestual way. You're like my guide or mentor. I want to be your precious girl. I'm also fiercely protective of you.\"\n\n\"That's a new generation thing, the whole Daddy-babygirl thing,\" I shrugged, \"I'm old enough to be Gina's dad. I think I was in college the same time Rhi got pregnant, now that I've learned more about her life. We could have been married, and Gina could have been our child. So that's weird.\"\n\n\"I'm six years older then Gina,\" Essie said, \"I've been closer to thirty than twenty for over a year. I enjoy being a police officer, but these days, I'm thinking of a change. Maybe private eye work. The mission we had has me thinking you and I would make a good team.\"\n\n\"Me?\" I grinned, \"I'm just a bit-head network support tech. Been working in computers all my adult life. I understand more about machines, than people. I like to solve puzzles, but don't ask me to solve a mystery.\"\n\n\"Well,\" Essie grinned, kissing me softly, \"We're kind of a little of both now, no? Investigations are all about problem solving, seeing things differently. Trying to see how the pieces and evidence fit. I see you do that all the time with how you think about the cube and how it influences us.\"\n\n\"If you want to change jobs,\" I said, \"I'll support you however I can.\"\n\nTess and Rhi stood up and were moving back inside. Gina swam over to us and wrapped us into a hug, followed by a kiss for each of us.\n\n\"Isn't this great?\" She smiled, \"I love this house, I can't believe I live here now.\"\n\n\"It's amazing,\" I agreed, \"Essie and I are having a bit of culture shock, this is way above our experiences.\"\n\n\"Mine too,\" Gina nodded then looked at both of us carefully, \"We will make this work, right? We can live as lovers and friends. We won't be jealous and crazy. We are different, right?\"\n\n\"It's a fluid situation,\" I confessed, \"So much has changed since Saturday afternoon. I hope we can settle down to a routine. It's been a bit chaotic. I need a quiet night.\"\n\n\"Me too,\" Essie said.\n\n\"Me three,\" Gina agreed.\n\n\"Pizza is here,\" Rhi announced, as Tess slid a few boxes onto a picnic style table.\n\nWe made it to the shallow steps, and dried off using towels that Rhi had set out. Rhi has also set out plates and napkins. They had ordered a variety of pies, and everyone had a piece or two of each sitting in chairs under the edge of the veranda. The heat of the day had faded, and the breeze from the river was slowly becoming chilling.\n\n\"What were you and Essie talking about in the pool,\" Rhi asked, as she leaned against me.\n\n\"We are both a bit overwhelmed,\" I said wrapping my arm around Rhi, feeling her warmth on my side, \"You three are all related, and know each other better. We will figure it out. We all want to find a rhythm to our days. Less chaos, more harmony.\"\n\n\"I like that idea,\" Rhi agreed, running her fingers along my chest, \"Each day has brought something new. Something to stress us. I felt a bit disconnected from you all day. It's good to have you beside me now.\"\n\n\"At the end of the day,\" I began, \"this is where I want to be, next to you.\"\n\nGina and Essie got up and started putting away the pizza boxes and plates. Tess gathered towels and went to start a load of wash. Rhi and I walked back into the living room, the warmth of the day was still present inside the house, while the outside cooled down in the dusk. I held Rhi comfortably, watching the way the sunset changed the skies. The view outside was more facing to the north, so the skies to the east were dark, and the west was still lit up and fading to oranges and reds. \n\nThe other girls came and sat around us, Tess alongside Rhi, with Essie curled up next to me and Gina beside her. It felt good to just relax and get used to a new home. Not many words were said, but lots of touches communicated the intimacy we all were becoming familiar with.\n\n\"I'd like to spend some time with each of you alone tonight,\" I said, \"I want to check in with each of you, and listen and talk...\"\n\n\"And fuck,\" Gina interrupted with a grin, \"I'm down for quality time, but I know you Josh, and you know me.\"\n\n\"I do,\" I agreed, \"I expect you're right, but that's part of connecting with each of you individually. Which I think is important today. I will end the night with Rhi in our room. If that's okay with you Tess.\"\n\n\"I get a visit too, right?\" Tess asked, \"So long as you check in with me, I'd enjoy a night to sleep alone in my own bed. Sleeping with other people is a new thing for me.\"\n\n\"Okay,\" I said, \"It's getting dark. I need to check my email, then spend time with each of you. I don't care what the order is, so long as I end up with Rhi, whoever is first can come get me in 30 minutes.\"\n\n\"Rock, paper scissors?\" Essie asked with a shrug looking at the others. \n\n\"Arm wrestling?\" Rhi laughed.\n\n\"I think drawing straws would work best,\" Tess said getting up to go to the kitchen. \n\nI slipped into a small office-type room along the hallway across from Tess' bedroom. It had a couple of chairs and a small table that could work as a desk. I pulled my laptop from my bag. I found a plug for the power cord, then set up a space at the small table. As I was starting up my laptop. Tess slipped in and handed me a sticky note.\n\n\"The order is on there, as is the Wi-fi password.\" She smiled, \"I got the short straw, so I go first. I'm going to get ready, just let yourself into my room when you're done with your work.\"\n\n\"I'll be quick,\" I smiled, \"I'm looking forward to talking with you.\"\n\nMy emails had a few from work, which I reviewed, going from top to bottom to make sure I didn't re-answer settled questions. Looked like everything was going fine while I was on an unexpected break. Nothing was happening on my cube phishing email account, which was expected. Then I checked my personal email, and after deleting promotions and crap, one email stood out.\n\n\"NCN - We are impressed with you,\" read the subject line, the From line read: bala@ncnhq.com.\n\nI opened the email up, and read through it:\n\nPlease don't be alarmed, I work with the initial development team of the Neural Control Node. While it may appear the project is abandoned and shuttered, that is furthest from the truth. What is true is that you, and everyone that received a cube were selected from your online shopping profile to participate in a private beta of the first version of the cube.\n\nWe wanted to see how well it would be adopted with limited instructions, as a way to test the extensive natural language and intuitive AI we want to have the final production version rely on. \n\nYou alone have exceeded the parameters of the beta process. You've incorporated more units than any other, and based on the diagnostics we are tracking have been a responsible user. We have had to terminate many of the cubes for violations of the TOS, dangerous practices, and other troubling issues. We would like to speak with you more, if you would like to join a video conference to discuss tomorrow.\n\nIt was signed, \"R. Bala - Sr. Product Manager\"\n\nI took a moment to think, then sent back a quick note.\n\n\"Send me an invite,\" It said, \"I'll take the meeting - Josh.\"\n\nI sat for a moment thinking through what I just learned. A limited beta made sense. The fact that they wanted to test the way units would respond to natural language prompts, as well as the AI assistance in the wild, made the most sense. I was also gratified that they shut down some nodes that were disruptive, I wondered what the parameters were. I had gleaned enough from stray inputs from the AI that they were tracking our use. \n\nI knew about the larger company behind the AI and the network. It wasn't just an online shopping company, it was also heavily leveraged into cloud computing, media, music and in home devices - the buzz term used was often called the Internet of Things (IoT). Their line of voice activated home devices probably had most of the market share. \n\nAdding an AI/Neural connection seemed to be a natural next step. Albeit a bit disturbing given how the cognitive connection seemed to be irreversible. I appreciated my experience with the cube and seemed to demonstrate that the cognitive link allowed a beneficial component to the next wave of technology, I also suspected I wasn't a typical user.\n\nI blinked, and realized I was daydreaming. I shut the lid of my laptop then made my way to Tess' room. \n\nI knocked lightly, then entered. She was sitting against the headboard, her full breasts exposed, and the covers pulled neatly around her waist. She smiled at me as I pulled off my tee shirt, and shorts, and slid under the covers in my boxers. I leaned towards her and kissed her, lowering my hand to cup her breast and then tugging lightly on her nipple.\n\n\"Mmmm,\" she purred, \"I thought we were going to talk.\"\n\n\"We are,\" I said, \"but I'm a bit of a breast man, and I made this pair very appealing.\"\n\n\"No complaints,\" Tess said, smiling at me as I looked at her, \"I wanted to ask you a question, though.\"\n\n\"Anything,\" I said, refraining from more breast play, \"That's what I want is to listen to you.\"\n\n\"Very unexpected from someone who has mind controlling powers,\" Tess responded, \"Appreciated more than I can express. I wanted to ask you if you're using protection? I don't want Gina to get pregnant. I saw firsthand what an early pregnancy did to Rhi's life.\"\n\n\"Honestly,\" I answered, \"I don't really think about it, because I had a vasectomy when I was 20. A girl I met and had sex with in college had a pregnancy scare. So I can't get anyone pregnant.\"\n\n\"So you knew at 20 you never wanted children?\" Tess asked, \"I find that hard to believe.\"\n\n\"At the time I thought if I ever wanted a child, I would find a way to adopt,\" I explained, \"There were too many unwanted pregnancies, and I figured if I ever wanted kids I'd go the adoption route. I also froze some sperm just in case having an heir became important. It hasn't. I've been single all my life, never married, and never had any serious long term relationships.\"\n\n\"What about STDs?\" Tess continued, \"Are you worried about that with us?\"\n\n\"Maybe I should be?\" I answered, \"I know I've been celibate for a few years, and I think Rhi is that same. I haven't asked Gina or Essie. Have you been active sexually?\"\n\n\"I haven't,\" Tess answered, and paused for a long moment, \"I guess I'm more like you, comfortable with being celibate \u2014 until suddenly now, I want to have a lot more sex. I feel like I'm catching up. But I don't want to contract anything.\"\n\n\"Is there an app for that?\" I asked.\n\nTess' eyes flickered and lost focus for a few moments, then she regained focus and looked at me with a smile.\n\n\"There is actually,\" She said, naturally, then slipped into a marketing script \"Thank you for asking, the HealthMonitor app is recommended to keep your neurally enhanced assistants disease free. They will undergo continuous monitoring, through AI enhanced algorithms that can detect most STDs at 95% accuracy rate. Please say help for more information.\"\n\nSeemed like a no brainer to me. I wanted to find out more. Thiswas another reason the cube interface was kind of clunky, and the natural language interface was a bit odd. I had to know what question to ask, then I had to wade through canned scripted responses. I was skeptical about the efficacy, but it wouldn't hurt to install it on all my assistants.\n\n\"Help,\" I asked, \"What are some other diseases or conditions the HealthMonitor app can detect.\"\n\n\"Glad you asked, Josh,\" Tess said again with a smile, \"The application constantly monitors body temperature, heart rate, blood oxygen, blood sugars, and 14 other health metrics. The application references an extensive database of diseases and conditions and the AI interface will warn the node owner for any out of parameter conditions. It takes 24 hours to determine a baseline for each of your assistants, then their health will be continuously monitored for any out of baseline conditions.\"\n\n\"Did you understand what you just said,\" I asked Tess.\n\n\"Yeah,\" she said in a more normal tone, \"That's pretty incredible, really. I am borderline type-II diabetic, continuous monitoring of blood sugar would really be helpful.\"",
        "\"Install HealthMonitor on Tess, Essie, Gina, and Rhi\" I instructed, wondering if I could do it in a single command through a single assistant. \n\nTess' eyes flickered for a while, then regained focus.\n\n\"HealthMonitor installed on Tess, Essie, Gina and Rhi, please wait 24 hours to construct the initial baselines.\" Tess recited in the odd natural language AI voice, \" Information is available via your cube interface, or just ask, 'how you are feeling?' To begin a health assessment with your neurally enhanced assistant.\" \n\n\"Okay,\" Tess grinned, \"That was an easier conversation and solution than I expected. I suppose we can move on to the next topic.\"\n\n\"Oh?\" I grinned, \"What would that be?\"\n\n\"Do you lick a pussy as well as Gina?\" Tess teased, and pulled off the covers and spreading her legs.\n\n\"Can you suck a cock as well as your sister?\" I teased back, pushing my boxers off.\n\nI stretched out towards her, and she slid and extended beside me. She lifted her top leg and I used my fingers to slide over her bare mound. I spread her lips apart and then licked between her lips. Tess was stroking my cock, and then pulled the foreskin down and swirled her tongue over the sensitive glans.\n\nI gripped her hip and pulled her over me as I rolled onto my back. Her knees pressed against my shoulders and my hands lifted to her ass to pull her against my lips.\n\n\"Of fuck,\" she groaned, \"Yes, lick me like that... mmmm\"\n\nThen she was silent as she began to reciprocate by sucking my cock. I wrapped my arms around the tops of her thighs and used my fingers to pull her lips apart. Using my tongue to lick inside her petals. I shifted my head so I could attack her clit, then back to lick and suck her sensitive flesh. She writhed under my tongue, and her mouth dropped deeper onto my shaft. \n\nShe tried to take me into her throat, but couldn't quite master the technique. She made up the difference by focusing her tongue and lips on my head, while stroking her fist up and down my cock. She would drop down and I'd feel a cascade of her drool sluice down my shaft, then she'd use that lubrication to stroke me firmly. \n\nI licked around her opening, then licked outside the rim of her asshole. She groaned then pressed to indicate that was a thing she liked. I slid down and battered her clit, while pressing two fingers into her cunt, and worming a finger from my other hand into her tight asshole.\n\nShe pulled off and moaned deeply, which only encouraged me to finger her deeper. She retaliated by consuming my cock, stroking my shaft, and then cupping and pulling on my balls. My hips responded by lifting, my thighs parting as I moaned into her dripping cunt.\n\n\"Cum for me, I want to taste your juices,\" I growled, and I felt her cunt clench in response.\n\nA few more strokes of my fingers and she arched back, her hand stroking my cock. I felt her cunt clamp around my fingers and a stream of her cum shot into my mouth. I sealed my lips and used my tongue to lap and clean, teasing her clit and prolonging her climax.\n\nShe kept jerking my shaft as she moaned through a series of body bucking orgasms. I hit my peak and I shot a bolt of cum onto her face. She pulled back a moment in shock, then another jet shot across her cheek persuading her to open her mouth and suck until my cock stopped pulsing.\n\nShe rolled off of me then reversed, capturing my cum on her finger and sucking it clean. She opened her mouth to show me she swallowed then kissed me deeply. I enjoyed sharing her taste and even tasting myself on her lips. I held her close and stroked her back. We caressed until we were calm, then I kissed her softly.\n\n\"Thank you,\" I said, \"For this, and for opening your home to us.\"\n\n\"Mmmm,\" Tess smiled her eyes gleaming, \"so worth it, I can see why both Gina and Rhi speak so highly of you. I think it's time for your next visit, though. I think you're smart to give us all time with you alone. Sleep well when you are able.\"\n\n\"Sweet dreams,\" I said and kissed her again, then slid off the bed.\n\nI deposited my boxers in her hamper, I didn't think I would need to be modest. The next girl on the list was Gina. I walked upstairs and found her room, and knocked lightly.\n\n\"Come in, Josh,\" she said.\n\nI entered and she pulled back her covers and patted the bed beside her. I slid in and pulled her back against me. Her back was against my chest and my arms wrapped under and over her sides. I kissed along her jaw and she lowered her head to turn and look at me.\n\n\"Just hold me for a bit,\" Gina said smiling and then contentedly pressed herself bottom back into me.\n\n\"This is your time, whatever you want to talk or do,\" I reminded her.\n\n\"I'm sore from this afternoon,\" she groaned, \"Fuck it was incredible, but stretched my tiny little pussy.\"\n\nI lifted a hand to cup her breast, while lowering my other hand to slide lightly over her clit. She moaned pleasantly, and turned her head back to look at me. \n\n\"You're such a horn dog,\" she smiled and kissed me.\n\n\"You're my good little whore,\" I replied, \"Unless you want to be my lover. I enjoy our teasing banter, but it's in the moment. It's not your identity.\"\n\nShe turned more to look at me, then nodded. She ran her hand along my cheek.\n\n\"It was a bit overwhelming and confusing at first,\" she admitted, \"I haven't had many partners, although I'm not a virgin. You're older, my mom's age. So part of me likes being your young whore, that you come to do naughty things your wife doesn't want to do.\"\n\n\"I'm not married to your mother,\" I said, \"I've never had a relationship more than two months and that was five years ago.\"\n\n\"My imagination sometimes goes in weird directions,\" Gina admitted, \"I don't think of you as my father, not at all. But girls my age do get attracted to older mature men, like you. So being your whore was a bit of a role play for me. Like I was a GFE escort.\"\n\n\"GFE,\" I asked, \"Go Fuck Egypt?\"\n\n\"Girlfriend Experience,\" she laughed, \"Some show on a late night movie channel. Young escorts having dates with older men. Some just want to talk, others want kinky hard sex their wives won't do.\"\n\n\"So long as you don't think my wordplay is actually as I see you, Gina,\" I replied, \"I slip into that role too sometimes. Like when I'm using you hard, and you like it so much. It's an easy headspace to get into. Outside of those times, I don't see you as my whore or slut. I really do treasure you, Gina.\"\n\n\"I do enjoy the wordplay, I understand better it's not a command. I think I can adapt to that,\" Gina said, \"I adore you Josh, I'm very happy to be part of your hive.\"\n\nShe smiled and she kissed me. I held her close and caressed her. She kissed me back and deepened the kiss, then twisted and pressed me down and straddled my hips.\n\n\"You made love to me,\" she smiled, \"This time I want to make love to you, okay?\"\n\n\"Nothing I'd rather do right now,\" I grinned and held onto her hips.\n\nShe licked her lips and used her hand to stroke me. Our close proximity and my shortened refractory period already had me ready. She ground her cunt along my hard shaft, and coated it with her juices. I held onto her hips and watched her deep green eyes. She smiled and looked at me, then lifted rising from my groin. She pushed my crown between her lips, then bit her bottom lip as she winced. Then her eyes widened as I slid inside her.\n\n\"Still a bit sore,\" she explained, then leaned forward and wrapped her hands around the back of my neck.\n\nWe kissed deeply, and she moved her hips riding my cock slowly. I lifted my hands to her breast to cup and knead. She purred into my mouth, but didn't break the kiss. My tongue flicked over her lips and she sucked my tongue into her mouth as she moved up and down my cock, twisting her hips. Her cunt was tight and it felt like she was giving me a handjob with how she used her inner muscles. \n\nShe parted from the kiss, and I groaned at the feel of how she was riding my cock. She smiled at her green eyes were bright, I felt like she enjoyed that she could make me groan with how she was fucking me. My hands ran down her sides and I gripped her ass. I wanted to go faster, and she nodded, accepting my suggestion then moaning as she lowered her head and increased the pace.\n\n\"This is going to make me cum,\" she panted, and I could tell she was on the edge, \"Cum with me Josh, I want to feel you fill me.\"\n\nI nodded, and then lifted my hips to meet her. The passion between us synced up and then we were both there. I arched my back and my hips jerked, my cock pumping my second load of the night into her young cunt. \n\n\"Yessssss,\" she moaned, as she hit her climax at the same time, \"oh yes yes fuck yes...\"\n\nThen she lowered back and we kissed as our hips quieted and our bodies stilled. I wrapped my arms around her to hold her tightly. Then she parted and smiled at me.\n\n\"Thank you, Josh,\" she smiled, \"I think I'll sleep deep tonight, tell Essie I love her.\"\n\nI kissed her tenderly as she slipped beside me. I stroked her cheek, and then tucked her into bed. I stopped by the bathroom and washed my hands and my cock. After drying my hands, I walked to Essie's door and knocked lightly.\n\nShe opened the door completely naked, and grinned up at me. I leaned down and combed my fingers through her hair and tightened my grip as my lips met hers. Essie purred and arched to press against me, her breasts compressing against my chest.\n\n\"Took you long enough, Papi,\" she grinned with a wink, then walked to her bed. \n\nI closed the door and followed behind her, crawling up alongside where she laid on her side.\n\n\"Do you just want to go at it?\" I asked, \"or did you want to talk some first?\"\n\n\"We talked enough at the pool for now,\" Essie said and rolled onto her back, \"I want you to make love to me, slowly until I can't take it anymore.\"\n\n\"Happily,\" I smiled and kissed her.\n\nI leaned across the bed, and lowered my mouth to her breast. I tried to sense how she was thinking, what she needed. She expressed that I was on the right track by arching to press her firm nipple between my lips.\n\n\"We fit already,\" Essie said, her words returning to our pool conversation, \"We figured out our puzzle. I have your back, and you have mine. Now I just want to feel you against me, making love.\"\n\nI sucked on her nipple, feeling her arousal and nodded. I pulled from one nipple to the attach to the other, my left hand dropping between her thighs. She spread her legs apart, and I cupped her sex, she was already soaking wet.\n\n\"I heard you,\" she said, \"not loudly but enough that I got a head start... I'm ready for your cock, please. I don't need a lot of foreplay.\"\n\nI grinned and lifted my mouth to kiss her as my hips moved between her thighs.\n\n\"Reach down and put me where you want me,\" I growled, then kissed along her jaw and tipped her neck back.\n\nOne of her hands combed behind my head and the other dropped between us. I felt her reach and find my erection her fingers pulling the shaft down as her hips rose.\n\n'I need you right here, Papi,\" she said.\n\nI lifted my head up to watch her deep brown eyes. We locked gazes as my cock entered her, then her eyes blinked closed and her head rocked back. I drove my hips into her slowly, and our bodies aligned. Her ankles lifted around my hips as they cycled in and out. She was tight, and wet, and I enjoyed going slow, feeling her flesh. I enjoyed how her body flexed to meet mine, how she used her eyes and gaze to entrance me as I made love to her. \n\nIt wasn't long until our breaths shortened and the need we both felt was palpable, like pressure all around. I accelerated my thrusts, her hands gripped my sides and pulled at me. I couldn't drive deep enough or go fast enough. She encouraged me with her moans, and my growls made her eyes blaze.\n\nThen we were there and I slammed forward into her. The third ejaculation of the night as big as the first. My hips jerked in pulses as I felt her cunt clench in waves, our eyes locked as we trembled. Then I kissed her and rested, my weight on her dark flesh as her fingers lightly traced up and down my spine.\n\n\"Mmmm thank you Papi,\" she purred, \"That's just what your kitten needed, I'm going to sleep soundly tonight. Give Rhi my love.\"\n\n\"Sweetest of dreams, mi ni\u00f1a,\" I said with a grin.\n\nI wish I could have captured her bright grin at my words, it warmed my heart. I pulled away from her, then headed down the open hall to Rhi's room, The house was quiet, and the reflection of the moon off the pool and river waters reminded me of the changes of the day. I slid into our room, and closed the door.\n\nRhi was naked on the bed. Kneeling in the center facing the pool as she waited for me, her breathing steady, her hands resting palm up on her thighs. I recognized the submission pose from various stories and forum posts I'd read over the years. That she was offering herself to me, letting me know I was her Master, I owned her. The soft lighting from behind her completed the intimate atmosphere. \n\nI didn't need a five minute refractory period, my cock was like an iron spike seeing my azure haired slave in such an inviting pose. I stalked around the bed, and crawled up behind her. She shuddered but maintained her pose. I looked and noticed the dark windows and backlighting behind her revealed a mirror like reflection. \n\nMy fingers gripped a tangle of blue hair at the nape of her neck, and then pulled to lift her chin and bring her eyes to mine. I kissed her, deeply and she opened her mouth willingly giving into my heated control. I wanted to talk to her, ask her so many questions. Her eager kiss suddenly left me mute. I had to have her.\n\nI parted the kiss and pressed her forward over her knees. She pressed forward and stretched her arms out in front of her head, gripping the edge of the mattress giving me complete control. Her ass lifted and she waved it lightly towards me, offering herself. I kept my hand in her hair, and gripped her hip with my other hand. My cock like a rod slid between her open thighs. I ground against her then drew back.\n\nWe aligned without words, without fingers or hands, my cock lifting to press between her engorged lips. I felt her need coat my head, and I drove steadily forward until I was balls deep. Then I took a moment to enjoy being connected to my soul mate, before I shifted, leaned forward, and rammed my hips into her. I took her hard, like she was my property. I hammered into her my free hand dropping under her to her grip a breast.\n\nI could tell she was enthralled by my instinctive control. Her moans were raw and filled with need. My fingers crushed into her breast, using it to lever myself as I fucked her hard. I grunted in a series of hard thrusts, that made her body tremble. I released her hair and her breast, and reached forward, my cock stilled deep inside her. I gripped her forearms and pulled them back, rotating them along her torso. \n\nI pulled her arms back as I arched, this lifted her torso off the sheets, her breasts swaying freely. My hips hammered into her as I took her hard. I looked past her and saw our reflection in the darkened windows. Rhi was mesmerized staring at my reflection behind her, and I was captivated by her blue eyes. She stared into my soul. Right then I was there, at my peak. \n\n\"Cum with me now,\" I growled\n\nShe trembled as her eyes flared in the reflection and I felt her seize. We climaxed together, locked together, eyes fixed as our bodies shook in bliss. It felt like eternity.\n\nI was only a few moments before my body relaxed, and I slumped forward. I wrapped my arms around the tops of Rhi's shoulder as my weight drove her into the mattress.\n\n\"You are mine,\" I growled and kissed behind her ears, my breath flowing hotly over her flesh as quivered at my words.\n\n\"Body and soul, Master,\" she said, \"yours always.\"\n\nI don't remember moving, but we were under the sheets and entwined. Her head on my chest, being lulled to sleep by my heart beat. My fingers combed through her hair as my eyes closed. Completely at peace as slumber took me away.\n\nIt really was a hump day.\n\nAuthor's Note\n\nJosh and four assistants under one roof. How long will that last? Will they find some self-control or fuck themselves crazy? Who is in control anyway?\n\nEditing props go out to Pope1944 and DJS_Ronin. Any additional racial blurs, secular innuendos, poor whore choices, or punctuation punishments are entirely my fault.\n\nStay tuned, a slot is still available and more cubes are on their way to Josh's PO Box. How many willing slaves can one man have?\n\n~ Hank\n\n"
    ],
    "authorname": "HankDolworth",
    "tags": [
        "bisexuality",
        "body modification",
        "female submission",
        "group sex",
        "incest",
        "male dominance",
        "mind control",
        "polyamory"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/basics-neural-control-node-ch-05"
}
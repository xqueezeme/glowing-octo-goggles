{
    "title": "Spanked By My Boss Ch. 03",
    "pages": [
        "I make more mistakes. I make them on purpose. I fill out an anonymous complaint form on the company website, too. I fill it in, about myself, saying I'm rude and tactless and insensitive. Then I fill out another.\n\nThen I wait, hoping they will be passed along to my boss.\n\nSoon, they are. A few nights later, as everyone is packing up to go home, she calls me into her office, and shows me the complains, and tells me I never learn.\n\n\"I know,\" I say. \"I'm sorry. I'll do better.\"\n\n\"No,\" she says. \"Filling in fake complaints is just silly. It really is.\"\n\nI look at her, surprised.\n\n\"The internet address is logged,\" she says. \"You did it from here. From right out there, at your work computer.\"\n\n\"Oh,\" I say, embarrassed. \"Um, yes.\"\n\n\"That's just silly,\" she says. \"You never learn.\"\n\n\"I'm sorry.\"\n\nI have a shift-dress and button-up shirt and tights, and I'm not really organized for easy undressing. She looks at me for a moment, and then tells me to take off the tights. I feel a bit awkward, but I step out of my shoes and do. She just watches, as I reach up under the dress and wriggle and tug them down. I feel a bit embarrassed, since this is about the unsexiest way to undress possible, but I manage, as best I can. I take then off, and then hold them out to her, unsure what she wants me to do.\n\nShe takes them, and tells me to turn around, and put my arms behind me. I do, and she ties my wrists with my tights, firmly, behind my back. She uses a proper knot, and tugs it tight, so my arms are trapped and I can't pull them free. \n\nI try.\n\nShe slaps my ass when she sees me tugging, slaps it hard, and says, \"Don't do that.\"\n\nI stop.\n\nShe turns me towards her desk, and pushes me forwards. So stumble, and slip, and almost fall. So I go forward, and land on it, land hard. So I'm suddenly lying face-down on her desk, with my hips at the edge and my feet still on the floor. \n\nShe stands behind me. She lifts up my dress, and pulls my undies down, and slaps the back of my legs so I shift my feet and let her take them off me.\n\nAnd then she just stands there.\n\nShe stands there and looks at me. \n\nI'm nervous. I'm breathing fast. She's looking at me, lying there, helpless, tied, and that's scaring me as much as it is exciting me.\n\nIt's exciting me a lot.\n\nShe reaches past me, and picks up a plastic ruler. A thin, whippy plastic ruler she has on her desk for keeping track of rows of numbers on spreadsheets. She shows it to me, holding it out until she's sure I've seen it, I think, and then she moves, and stands behind me.\n\nShe stands behind me, out of sight, so I tense up, waiting for what I know she's about to do.\n\nI turn. I try to see. She twists her hand into my hair, and pushes my face onto her desk, and says, \"Don't.\"\n\nI stop. I just lie there still. Nervously waiting to be hit. \n\nI know I'm about to be hit. I know the ruler will hurt, and I'm almost scared of it.\n\nI wait, but she doesn't hit me. She strokes me with the ruler instead. She slides it up the back of my legs, and slowly over my ass. I sigh, despite myself, my skin tingling where I'd expected to feel pain, all tensed-up with nervousness. She slides it down and up again, up between my legs, and then taps it against the inside of my thigh demandingly. I understand what she means. I move my feet further apart, so she can reach me more easily. \n\nShe reaches. She strokes me with it. She slides the ruler higher between my legs, all the way up the insides my legs, gently teasing me.\n\nTeasing, and somehow threatening too.\n\nShe strokes the ruler upwards, as high as it will go. She touches me. She touches my pussy with the corner of the ruler. She presses it against me. \n\nI jump, surprised, still nervous.\n\nIt's sharp, and digs in a little, and almost hurts a little, too. It slides as she moves it. I'm wet so it slides against me.\n\nShe's touching me with a ruler, and I actually enjoy that she is. \n\nShe strokes. She presses. She uses it to prod at me, as if just looking, then she takes the ruler away.\n\nI jump again. I'm tense again. I know what's to come. \n\nShe waits a moment, just long enough I think she won't, just long enough I think I'm wrong, again, and she isn't going to hit me.\n\nAnd then she does.\n\nShe hits me hard, with the ruler, so it bends and wraps around me and lands sharply painful all across my ass. She hits me hard, so it hurts. So it stings. So I jump and shriek and flinch.\n\nIt hurts. It hurts wonderfully.\n\nShe hits me again, and then again, and I can't believe how painful it is. \n\nShe hits me. She hurts me. She hurts me until I sob. \n\nShe hits me until I get wet and excited, and start pressing myself down onto her desk, trying to feel it beneath myself, half-masturbating as she hits me. She hits me so I moan, and sigh, and whisper little pleas for her to stop and not to stop. She hits with the flat part of the ruler, so it's sharply widely stingy, whipping down onto me and bending around me as it lands. Then she hits me with the edge instead, which digs in more and hurts more deeply and makes me gasp and wince. She hits me ten or fifteen times, carefully up and down my ass. Hitting all of me deliberately, until it hurts all over, unbearably. \n\nShe hits me until I'm crying, until I'm struggling, trying to get up. Then she puts her hand on my back, holding me down, and hits me five more times.\n\nThen she puts the ruler down, and stands behind me, and fucks me. She fucks me with her suit still on, pressing herself against me. Pushing onto me where she's just beaten me, so I feel the cloth of her trousers all rough and scratchy-soft against my sore skin, and so the pressing of her fucking hurts me every time she moves.\n\nSo it hurts me wonderfully.\n\nShe pushes onto me with sharp little movements, onto my tender, aching ass. Grinding me, pushing at me, then she reaches down between my legs, and presses her hand against me, rubbing me wetly as she fucks me.\n\nShe fucks me until I come, and until she does too. \n\nShe makes us both come, then, breathless, she pulls me back up, and unties my tights, and hands them back to me, and tells me not to be so silly next time or what she does then will be far worse.\n\nI nod. I sniff, and wipe my face, and then I nod.\n\n\"Do you understand?\" she said.\n\n\"I do,\" I say. \"I promise.\"\n\nShe tells me to go, and I do. I leave. \n\nI go back to my desk, and sit awkwardly, because my ass is sore. \n\nI sit down, and fill in another complaint form, right then and there, hoping she sees it right away."
    ],
    "authorname": "TessMackenzie",
    "tags": [
        "lesbian bdsm",
        "bdsm",
        "spanking",
        "hit with a ruler",
        "office spanking",
        "punished",
        "ruler spanking",
        "silly story",
        "funny"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/spanked-by-my-boss-ch-03"
}
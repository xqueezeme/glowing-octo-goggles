{
    "title": "The Tennis Star Ch. 01",
    "pages": [
        "All characters are over 18. A few famous Tennis Pros are mentioned, but the main characters are all completely fictional. Several actual locations in the Orlando area are mentioned, however Carrie's workplace and tennis club are fictional.\n\n*****\n\n\"Out!\" \n\nWhat?! My mouth opened to protest, but I snapped it shut before making a sound. My opponent was right. I'd overcooked that forehand and I knew it. Crap! I picked at my racket strings as I walked back toward the baseline. I couldn't believe I was blowing this.\n\nCamille swatted the ball back to me, which I caught while calling out the score. \"Thirty - Forty.\" Also match point. Ugh. She was 5'10\", long arms and legs. Does not like body serves. I'd been using them effectively all match. Not gonna stop now. \n\nI tossed high and swung. Whack! The ball caught the top of the tape and dropped straight down. I forced my shoulders not to slump as I pulled a second fuzzy yellow tennis ball from under my red skirt. Camille spun her racket in her hands and took a step forward. I forced myself to breath. \n\nThe ball bounced once, then twice and I rocked and served a kicker out wide. Apparently I'd done that once too often today. Camille anticipated me and stepped out, cracking a two handed backhand deep to my right. I lunged and made contact, but my return was weak, high and short into the middle of the court. Camille recovered in plenty of time and I watched helplessly as her easy forehand winner sailed past me.\n\nA scream bubbled up inside me but I held it in. Mostly. I did keep from smashing my racquet. 6-4 7-5 was not a bad score line against the club champion. I jogged up to the net where Camille was waiting with a wide smile\n\n\"Thanks Carrie, that was a great match.\"\n\nI took her proffered hand and pulled her into a brief hug. \"Thanks. One of these days.\"\n\n\"You're welcome to keep trying. I always enjoy it.\" \n\nI nodded to her as she separated and ran over to the small plastic bleachers where her husband was waiting for her. I watched them embrace, hearing him say how proud he was of her. I sighed. No one was there for me, so I packed up and headed back to the locker room. \n\nI stripped off my outfit and stepped into the shower, letting the cool water wash over me. Several of the big points in the match flashed before my eyes and I tried to channel what my coaches from Georgia would have said. I didn't follow that one forehand into the net, and it let her back into the point. And I'd gone for too much several times. I was a good player. I didn't have to take every chance that came by. But I wasn't good enough today. \n\nBefore I left I checked next weeks matches. I was scheduled at 10am against Julie Schmidt. She was good, but I was better. Excellent. I could take my frustrations out on her. At least that's what I was feeling now. By next Saturday I'd be in a good mood again, just happy to be on a tennis court against a quality opponent. Probably.\n\nI missed my days at Georgia, the camaraderie, the excellent competition, both within the team and from other schools. My world felt lonely now, especially since I'd gotten dumped last month. I definitely hadn't been in love, but he'd been someone to spend time with. At least he'd been honest when he met someone else. I couldn't say that for all of them.\n\nI stopped at my favorite little sandwich stand on my way home, picking up a turkey wrap and a sweet tea, which was my absolute favorite thing about living in the South. The tea here in Florida wasn't as good as back in Athens, but it wasn't bad. I got back to my apartment, where the heat hit me like a wall when I opened the door. That meant my roommate would likely be at her boyfriend's down in Kissimmee all weekend. \n\nI checked the time. Five till one, perfect. After firing up the AC I used the bathroom and put my bag away, pulling out my sweaty tennis outfit and throwing it in our little washer. I sat myself down in front of the TV and pulled up the Tennis Channel. The women's semi's from Cincinnati were on. Garbine Muguruza vs. Iryna Baraskova. Should be a good match, both were powerful women, big hitters. At 5'6\" it wasn't really my game, but I sure appreciated it when I saw it. Muguruza had won Wimbledon once already, but Iryna had made the semi's of both Wimbledon and the French this summer. She hadn't won a major yet, but I was sure one was coming. She had everything, powerful ground strokes, good defense, a big serve, and she moved with a lyrical grace that I found absolutely captivating. Amazing, given she was just over six feet tall. Definitely my favorite player right now. \n\nIt was a great match. Garbine took the first set in a tiebreak, but Iryna stormed back to take the second 6-3. They were at 4-3 in the third when a trainer was called. Iryna had been favoring her left knee after landing awkwardly earlier in the set. She had it taped it up, but just wasn't the same. Muguruza took the last two games and the match. Crap. \n\nThis had been an all around rotten day so far. I decided to grab my bike and go for a ride around the lakes, clear my head. After all, the sun'll come out tomorrow, right? It did, of course, but after lunch Sunday my Tennis app sent me a note that Iryna Baraskova had withdrawn from the US Open due to a knee injury. I shook my head and cleared the notification window. That sucked. \n\nThe next two weeks passed slowly. I'd been a Kinesiology major at UGA, and was a licensed occupational and physical therapist at Orlando Sports Medicine and Rehabilitation Center, but what I really loved was massage therapy. PT generally involved a lot of difficulty and pain. It was rewarding enough, especially when you saw improvement in a patient, but massage was better. Even deep tissue, therapeutic massage made you feel wonderful after it was done. I loved seeing the tension flow out of my patients as I worked, leaving them a quivering, satiated puddle of contentment. At least that was always the goal.\n\nBeing that the OSMRC was world renowned for its excellence, I'd worked on a number of professional athletes, always hush-hush. Players from the Dolphins and Rays were not uncommon, and I didn't think anything of it after my first six months. I'd take them any day over the weekend warriors who were patients here. For professional athletes, recovery was business, and they generally treated their therapists, men and women, with respect. Not always, but often enough. Businessmen with bad knees and tennis elbow were another story altogether.\n\n\"Sorry.\" One look at him showed me he wasn't sorry at all. I moved away from the hand, which had grabbed my ass for the second time in a mock attempt at keeping his balance.\n\n\"Now, now, none of that.\" I pointed up into the corner of the room. \"Remember, you're on camera.\"\n\nHe followed my finger to the small glass lens, which had been installed for just this reason. That realization generally put the kibosh on any further fast fingers, but not always. Fortunately this particular jackass was cowed enough for me to get through the session with only a dinner invitation to turn down at the end.\n\nI popped my head into my boss's office after I'd finished. \"Hey, Mike. A little handsy, that one.\" \n\n\"OK, I'll make a note.\" \n\nMike was a good sort, and Mr. Clanary there would likely find the rest of his therapy conducted by men if at all possible. \"I've got you in the massage room for the afternoon. All women, so hopefully no problems for the rest of the day.\"\n\n\"Thanks, Mike.\"\n\nMy second appointment that afternoon was a difficult, deep tissue massage, and my hands were sore by the end. I ducked into my prep room and soaked them in the warm water for a few minutes. My next client was being brought in, and I called in to tell her I would be just a minute.\n\n\"Please, take your time.\" Her accent was a rich, Eastern European brogue. It was beautiful, and somewhat familiar. I entered the room and pulled the chart from its plastic pocket on the wall. \n\n\"If you'd like to lay down with your face in the ring we'll get started.\" She came out from behind the dressing screen and I literally dropped the chart. It made a horrible clattering noise, but I barely noticed.\n\nThe woman standing before me chuckled. \"You know me, yes?'\n\nI nodded, forcing my jaw to close. \"I'm sorry, Ms. Baraskova.\" I bent down to pick up the dropped clipboard. Her long, powerful legs were right in front of me. Incredibly toned, they carried her toward the table. I stood slowly. I was staring and I knew it. My brain was screaming at me to get a grip. She opened the towel wrapped around her torso and slid onto the table with the same easy grace I'd so admired on the tennis court. I folded the fabric down so that it covered her rear. \n\n\"Would you like a sheet to be more covered?\" \n\nShe looked up at me with incredible blue eyes that took my breath away. \"No, not unless you wish it.\" \n\n\"So what are we doing for you today?\" I tried to make my voice sound professional. The chart had only marked a requested massage. Since one of the physicians hadn't ordered it, the focus was up to the client. \n\n\"Just a general massage, please. The last weeks have been ... difficult.\"\n\n\"I can imagine.\" I reached down and oiled my hands and began to work on her feet, moving up through the leg. I heard her sigh in pleasure, and I felt a thrill run through me. I couldn't believe what I was doing. Her skin was soft and smooth. A ridiculous part of me had thought she'd be made of iron or porcelain, like some mythical creature. Feeling real skin beneath my hands sent a had me breaking out in goosebumps.\n\nShe gave a little moan as I touched her. \"You knew me, so you are a tennis fan. Yes?\"\n\n\"I am. I, um, I was very disappointed when you weren't able to play at The Open.\"\n\n\"Thank you. I will miss New York. You play also?\"\n\nI blushed, which I was thankful she couldn't see. \"Yeah.\" I thought it was a bit presumptuous to call what I did 'playing' next to a grand slam semifinalist. \"I did all through college, and I still get in a weekly match at my club over at Rosedale.\"\n\nI reached the top of her leg. \"Will you do the buttock as well?\" \n\n\"Of course.\" I pulled the towel away to reveal the most perfectly shaped rear end I'd ever seen. As I worked the muscle I felt a tingle rise in my core. I'd never had this type of reaction to a woman before. I chalked it up to being star struck and did my best to go about my work. I went back and kneaded up the other leg, being very gentle around what I knew to be her injured knee. \n\nAs I continued into her lower back, I finally found my groove, and I could feel the tension start to ease out of the world class athlete on my table. She began to make those soft sounds of relaxation which I so loved to hear from my clients. But hers, they reached deep inside me, and I badly wanted more of them. \n\nI glanced up at the clock, and we were already halfway through the session. \"Turn over for me please?\"\n\nIryna spun on the table as I held her towel. Her long, sandy blonde hair flowed around her head, and those ice blue eyes looked up at me. I almost fainted. I laid the towel back over her, covering her breasts to below her waist. I took her hand and pulled it up to my chest as I worked the palm and slowly down. \n\nIryna closed her eyes. \"So other than tennis, how do you spend time?\"\n\nI tried to focus. My God, it was hard to look away from her. \"I like to ride my bike. Lie around and watch cheesy movies. I also love cool restaurants. I'm not big into clubbing. Too loud.\"\n\n\"You have boyfriend to take you to nice restaurants, yes?\"\n\nNormally I would dodge a question like that, but I couldn't with her. For some reason I really wanted her to know I was single. \"No, not anymore.\"\n\n\"He was not a good boyfriend?\"\n\nI blushed. \"No, he was nice, and fun, and just...,\" I shrugged my shoulders, \"not for me.\"\n\n\"He did not make your heart sing, yes?\"\n\n\"No. I...I don't think I've ever had that.\"\n\nShe smiled at me, and I almost swooned. I finished both of her arms and began to work her shoulders and neck. \n\n\"Ohh.\" Iryna's head cocked and I felt my hand rub against her cheek. \"If they knew your skills in massage, you could have anyone to date. Mmm\"\n\nAs I looked down I could see my nipples traitorously standing out through my sports bra and scrubs. I was sure she'd noticed as well, but if so she didn't say anything. God, what if she thought I was perving on her? And I was straight! \n\nIf she was discomforted it didn't show. We chatted about some of my favorite restaurants in the area, and I felt myself relaxing as we spoke. Often famous clients were not terribly chatty, allowing you to just get on with what you were doing. But Iryna was friendly and funny. She was easy to talk to. Before I knew it our time was up, and I helped her stand from the table. \n\n\"Thank you, miss...?\"\n\n\"Oh, um, Carrie. Carrie Mitchell.\"\n\n\"Thank you, that was wonderful, Carrie.\" She soft rolled the R in my name. I could get used to that. \n\n\"You're welcome, Miss Baraskova. I'm at your service.\" Her mouth twitched into a smile when I said it. \n\n\"Good. I will hold you to that. And I am Iryna.\" Even barefoot she stood six inches taller than me. I knew I was staring stupidly up at her, but I couldn't look away from those incredible blue eyes. \"I will see you again soon, I think.\"\n\n\"I hope so.\" I backed out of the room, grinning like a schoolgirl. I repressed a nervous scream and sat heavily down onto a bench, desperately trying to make sense of what had just happened.\n\nI was still walking on a cloud when I got home that night, and my roommate Sasha jumped all over me. She could tell something was up, but I couldn't tell her anything. Revealing the name of a patient was a huge no-no. Luckily she was satisfied when I admitted I'd met an idol of mine. She wasn't any kind of sports fan, so I knew she'd never be able to come up with who it was. \n\nThat night was far more disconcerting. I dreamed I was playing tennis, not uncommon, but my opponent morphed from Camille into the six-one Ukrainian I'd met that day. She destroyed me on court, but our handshake didn't happen at the net. Somehow it was in a room I didn't recognize, with only her and I. Her hand slid up my arm, and I felt hypnotized by those crystal blue eyes. Her mouth bent towards mine, and my heart thumped in my chest as she kissed me. I seemed to dissolve into her, and then I was alone, waking with a desperate feeling of loss. My panties were wet, and I had to change them, my knees slightly weak as I stood from my bed. The next night I masturbated before I went to sleep, hoping to head that off. I rarely fantasized about other people when I rubbed one out, preferring just to concentrate on the feelings in my body, but this time Iryna's face floated to my consciousness as I came. What the hell was happening?\n\nI didn't see Iryna in person again for the rest of the week, although she continued to make regular appearances her in my dreams. On Wednesday I heard during coverage of the Open that Iryna had had successful arthroscopic knee surgery. Her ACL had not been torn, which would cut her recovery time, but she had needed significant debridement and cleaning in the knee. \n\nThe first Saturday in September dawned bright and warm. I arrived at the Rosedale Tennis Club a little after nine, using the rear member's entrance to get into the locker rooms. I spent fifteen minutes on one of the exercise bikes to warm up before dressing quietly, trying to get my mind into the match. I was playing a reasonably new girl whom I hadn't faced yet. But she'd already qualified to play in the top division here, though, so I couldn't take her lightly. I was on at ten on court four. I walked out about ten minutes beforehand. As I approached I noticed a bit of a commotion around the small set of bleachers next to the court.\n\nI sat in my chair, looking across at the small crowd of people, who were definitely surrounding something. I couldn't see what it was. I tried to put it out of my mind as I dug into my tennis bag, pulling out my racquets, water bottle, and sundries.\n\n\"Carrie!\" My blood froze and butterflies erupted in my stomach as I recognized the rounded 'a' and softly rolled 'r' in my name. I looked up slowly, not believing what I'd heard. But there was no mistake. The people parted and a tall blonde was waving at me from a folding chair next to the bleachers, her right leg elevated and sporting an air cast. \n\nI walked across the court, a smile spreading across my face. Everyone nearby was staring at me in both wonder and disbelief. \n\n\"Carrie, I hope this is OK? I wished to see you play.\"\n\nI sputtered, trying to find my voice. \"Um, yeah, sure, of course. How did you even get in here?\" I knew that was a stupid question when I asked it, but Iryna just grinned and put on an obviously affected air of superiority.\n\n\"I am Iryna Baraskova, the fifth ranked woman in the world. I go where I wish.\" I cocked my head at her in disbelief and she giggled. It was sweet and innocent. I loved hearing it. \"It is kind of true. My agent called the club. I have an honorary membership now. I will make a nice donation to the youth program.\"\n\nI laughed. \"OK, I hope you enjoy.\" \n\nI turned around and walked back toward my chair. My opponent had arrived, and was standing open-mouthed, staring across the court. \"Holy Crap! Is that...\"\n\n\"Yep. She's a friend of mine.\" I tried to keep my voice nonchalant. \n\n\"Uh-huh.\" She turned back to her bag, but her head was still drawn to the celebrity across the way. \"Sorry. Pari Sunil.\" She extended her hand and I shook it and introduced myself. We flipped for serve, and went out to warm up.\n\nThe match went well. Once we started most people left Iryna alone. It was a little surreal having her there, but once I was out hitting balls I was fine. Pari was a very solid player, but I don't think she'd ever competed at the levels that I had. That showed in the big points, and I won 6-3 6-2. Iryna actually stood to applaud after match point, struggling up on her crutches. \n\nI jogged over to Iryna after shaking hands at the net. \"It's not what you're used to, I'm sure, but...\"\n\n\"Oh, hush. You were wonderful.\" Iryna was beaming at me. I'd never felt so proud in my life. \"I know you wish to clean up, but may I take you for lunch?\"\n\nTechnically that was against the rules, but those rules were mostly there to let us turn down unwanted offers, and to keep employees from initiating relationships with patients. A same sex friendship wouldn't raise any eyebrows. Besides, I really wanted to say yes.\n\n\"Ok. And I think someone wants to meet you.\" Pari was still milling around the player's area, glancing over frequently. I waved her over and made the introduction before excusing myself to get my bag and head to the locker room.\n\nI was admittedly anxious to finish, but I made myself take stock while the shower's cool water ran over my shoulders. Iryna Baraskova had come to watch me play tennis, and was taking me out for lunch. What did that mean? Maybe she just wanted to be around the game. I understood that, at least. But lunch? Hey, I told myself, she was just a person in a strange city. She probably only wanted a friend. I know I would in her situation. Ok. Just behave normally. Sure.\n\nBack out on the courts Iryna was standing near the front entrance, leaning on a pair crutches and signing autographs. I walked over and she smoothly disengaged from her admirers, flashing me that thousand-watt smile as I approached. The butterflies in my stomach swirled around when I saw her. God, she was beautiful. She leaned in and kissed my cheek, the skin where her lips had touched tingling as she pulled away.\n\nShe turned and began swinging her crutches toward the entrance. Even hobbled, she moved so gracefully. I followed along in her wake. A stretched SUV had pulled up to the gate, and a man in a white jacket and slacks jogged around to open the door. \"Carrie, this is Martin, my driver while I am here. Martin, this is my friend Carrie Mitchell.\" ",
        "\"Ma'am.\"\n\nHe opened the door, and Iryna hopped inside, far easier than I thought she'd be able to. I climbed in behind her. Wow. I gently touched the leather seats. The whole cabin was pristine. A mini bar glowed neon white. I realized my mouth was hanging open as the door shut behind me. \n\n\"A bit much, yes?\" Iryna was grinning at me. \"I am not usually this, um, fancy. But my leg needs the room for now.\" She had it elevated on the long couch, and I sat across from her. The driver's door opened and closed, and the shield slid down. \n\n\"Where to, ladies?\"\n\nIryna looked at me. \"Where should we go for lunch? It is your city.\" \n\nI'd only lived here a few years, but I didn't want to disappoint. It's not often you get to represent for an international sports star. \"What do you like?\"\n\n\"Something, um, American, I think.\"\n\nI smiled and accentuated my Georgia accent. \"Sweetie, y'all aren't just in America. Y'all are in the South. Martin, to the COOP.\" \n\nHis eyes looked up at me, and I saw the approval in them. \"Yes Ma'am.\"\n\nIryna's eyes went wide. \"What is this coop?\"\n\n\"The COOP. Real southern soul food. It's pretty new, but it's good\"\n\n\"OK, I am in your hands.\" For some reason that simple statement sent a tingle up my spine.\n\nThe COOP was up in Winter Park, so I had a decent amount of time to enjoy our beautiful ride. We chatted a little about my match, and I could tell she was refraining from giving me pointers, although I would have taken them all day from her. She told me about some of the amazing places she'd been, Like Singapore, Tokyo, Paris. She asked a lot of questions about my team at Georgia..\n\n\"I have never been on a team, not like that. To be around the other women, pulling all together for one thing. It sounds nice.\"\n\n\"Usually. You get a dozen women together and there's going to be some drama, but in the end we all loved each other. I miss it.\"\n\n\"Drama? Oh, you were fighting over the boys?\"\n\nI blushed a little, \"Well, not too much. Georgia is a big school. There were plenty of guys to go around.\" I took a sip of the bottle of water I'd gotten out of the mini bar. I wondered for a moment how much it would cost her. \"Actually, the most drama was from two of our players who were dating each other.\"\n\nIryna's eyes widened \"Truly?\"\n\n\"Uh-huh. They broke up during the season and wouldn't speak to one another. It was super awkward. I was only a sophomore so I just kept my nose out of it. But then again, one of our doubles teams were together throughout school, so...\" I shrugged.\n\n\"And you were OK, playing with lesbians?\"\n\nI felt like the question was a test, so I answered truthfully. If she had any prejudices probably best to know it now. \"Of course. I'm still good friends with the second couple. I was in their wedding last spring. It was beautiful.\"\n\nHer eyes relaxed at my answer. I was happy for that \"That all sounds wonderful. I would like to go to school. I have been many places, but I feel I know very little. You are lucky. I finished high school on a computer. I am on the tour ever since. Airports and practice courts are very much the same, no matter where you are.\"\n\nI understood that. Being on a major college team I'd traveled some, mostly around the South. But Starkville, MS and Lexington, KY didn't seem all that impressive next to Paris or Melbourne.\n\nWe arrived at the COOP. Iryna turned heads when she entered, but six-foot blondes will do that anywhere. No one seemed to recognize her, which was good. I wanted her all to myself. \n\nIryna studied her menu. \"What is this? Chicken with waffles?\" \n\n\"Oh, yeah, a soul food classic. Ok, so the story goes that when jazz musicians would finish playing at three o'clock in the morning, they couldn't decide between dinner or breakfast. So, fried chicken and waffles.\"\n\n\"You have had it, yes?\"\n\nI nodded enthusiastically. \"Oh, yeah. They drizzle a maple-bourbon sauce on top that's to die for.\" \n\n\"Very well.\" She sat back and set down her menu, pulling her leg onto a chair to elevate it. Our server came by with the the pitcher of swear tea I had ordered, insisting Iryna try it. She confidently ordered her chicken and waffles and I opted for the chicken and dumplings, which I hadn't had here before. It was all amazing. Don't tell my grandmother, but that was the best chicken and dumplings I'd ever had. For some real southern flair I'd ordered a side of collard greens, which were rich and smooth, not bitter at all. Just excellent.\n\nAs we climbed back in the stretch SUV, I could feel the heaviness of the food. I rarely ate like that at lunchtime. I gave a groan as I fell back into the leather seats.\n\nIryna sat down next to me and extended her leg. \"That was delicious, but if I eat like this too often I could not fit into my clothes.\"\n\n\"Well, you wanted American.\" We both laughed. \n\nIryna grimaced and reached down to her knee. \"I would love to do more, but I think I need to ice my leg. And the Women's final from New York is today. I will watch that.\" \n\n\"Yeah. Thank you for lunch. I had a wonderful time.\"\n\n\"As did I.\" She hesitated for a moment. \"Would you like to come and watch the match? If you don't have other plans?\"\n\n\"I'd ... I'd like that.\" Her face lit up as I answered. I almost turned away, but I couldn't. She was so beautiful. Her eyes just held mine. Her hand reached up and brushed a strand of my honey brown hair away from my face. My skin tingled where she touched me, and I leaned into her palm, which supported me gently.\n\nIryna leaned forward. My heart jack-hammered in my chest. Whatever rational part of my brain that was still operating realized she was going to kiss me and started to panic. But a deeper, more primal part of me told it to shut the hell up and let this wonderful thing happen. And it was going to be wonderful. I believed it with ever fiber of my soul. \n\nAs my eyes fluttered closed suddenly the car swerved and I heard the tires squeal. Iryna's leg slipped off the seat and she screamed. Martin regained control and started driving smoothly again. The intercom popped on. \"Everyone OK back there?\"\n\n\"Iryna wrenched her knee. What happened?\"\n\n\"Idiot on a motorcycle drove between us and the car in the next lane, then cut me off. Everything's fine now.\" \n\n\"OK.\" The intercom crackled closed. Iryna was grimacing and holding her knee. I slid down onto the floor and cradled her leg. I looked up at her. \"Sweetie, I have to check and see if you reinjured it. This is gonna hurt like hell, alright?\" She nodded as she looked down at me. I could see her steel herself again the pain, but I also saw the trust in her eyes. I turned back to her knee, forcing myself to focus. I slowly removed the air brace, and began probing the knee, testing for stability. With the recent repair this had to be done very carefully, and I put all my skill into it. Iryna inhaled sharply as I twisted, but she didn't move. The joint felt patent, just as it should. \n\nI gently replaced the brace. Her knee needed to be raised, so I climbed up and held it in my lap while Iryna laid back. As we drove I massaged Iryna's leg. She kept her hand over her eyes, although I saw at least one tear slide out from under her fingers. \n\n\"Iryna? Are you OK?\" \n\n\"I hate this, not being able to move, to sit as normal. I am sorry, Carrie. We are having a lovely afternoon. And I ruin it.\" \n\n\"Oh, stop it. You haven't ruined anything. And it's still a lovely afternoon.\"\n\nShe reached her hand out, and I took it. I could feel the silky power of her grip, but I also knew she needed someone to hold her up. So I did, gently caressing her skin with my thumb as we went down the highway.\n\nThe car slowed and stopped. I hadn't been paying attention, so I had no idea what part of town we were in. Martin's door opened and closed. I looked out through the tinted window, but couldn't see clearly. Martin opened the main cabin door, and I helped Iryna out and onto her crutches. She began to move and I saw where we were. The house wasn't a mansion, not exactly. But it was as close as I'd ever seen. I helped her through the large red double doors and to the half bath off the main hall.\n\n\"Do you need help?\"\n\n\"No, thank you Carrie. Please make yourself at home. I will be out soon.\"\n\n\"Ok. I'll be here if you need me.\" I found the kitchen, which was nearly the size of my apartment. Not really, but it felt like it. There were ice packs in the freezer and I pulled one out, wrapping it in a hand towel. \n\nThe bathroom door opened and closed. \"Carrie!\" I made my way back to the foyer, where Iryna was standing with Martin. \"I would like to send Martin back to the club for your car, before I release him for the day. Would that be OK?\" \n\nI nodded and fished my keys out from my bag, which was sitting by the door. We made our way into the living room, where a massive sectional wrapped around in three directions. A huge flat screen was mounted to the wall, at least seventy inches I'd guess. Iryna slid back into a corner of couch, elevating her leg. I placed a few cushions under her injury and set the ice pack on it. I sat a cushion away, in the middle of the long section of the sofa. Iryna looked a bit disappointed. The front door closed as Martin left, and I was acutely aware of Iryna and my aloneness, and for the first time since I'd met her I felt awkward.\n\n\"Carrie?\"\n\n\"Yes?\"\n\n\"In the car, I made you uncomfortable, yes?\"\n\nI looked down. \"No. I just, ... I've never... Umm.\" God! What the hell? I couldn't think straight.\n\n\"You have never been with a woman, yes?\"\n\n\"Yes. I mean, no. No, I haven't.\" I was blushing furiously now. I forced myself to look at her. \"But I like being with you.\"\n\n\"I like being with you as well. I have many friends I enjoy spending my time with. With you, I would like more.\" \n\n\"But why? I mean, you're you. And I'm, well... \"\n\n\"You are what? Beautiful? Kind? Funny? I am scared, Carrie. I have never been hurt like this. I am twenty-six. Careers can end at this time. How well will I play again? Do I just fade away now? So scared. On your table, when you were touching me, it was peace. Watching you today, talking with you, sitting here now, I am not scared.\" \n\nI felt a tear roll down my cheek. No one had ever said anything like that to me before. \n\nIryna reached out and took my hand. \"Please, just stay, watch the match with me. I will not push you into anything, Carrie.\" And I believed her. In that moment she was not my hero or a major celebrity. She was just a woman, one I found intoxicating.\n\nI stood up and stepped over to her corner of the huge sectional. I slid in next to her, resting my head on her shoulder. Her arms wrapped around me and pulled me tight, and I snuggled deeper into the embrace. The TV came on, and we watched the pre-match show in silence. I lost track of what was being said as the rhythm of Iryna's breathing and the sound of her heartbeat lulled me into a dreamlike state. It was wonderful. \n\nSome of my earliest memories were simply sitting in my father's lap. He'd hold me tight, sing to me or tell me stories. I felt so safe and loved. Cherished. It was my favorite thing about being with a man. Being wrapped in their arms, held close. Ironically, it's also something guys tend to really suck at.\n\nBut Iryna didn't. There were no pawing hands, no cheap feels. Her arms were long and strong, and they held me beautifully. It took a minute for my mind to process what was happening. Iryna felt different, she smelled different. But for all its strangeness, it felt so good. I didn't want to move. I wanted to be right here, close to her. As I realized that, I let myself relax. I leaned back, and her arms tightened around me. I ran my hands over them as they held me, admiring their strength and softness. Iryna purred behind me, a sound that sent a delicious shiver through my body. \n\nThe match started, and we watched. I know the game of tennis far better than most, but Iryna observed it on a completely different level. She whispered things in my ear that I never would have seen. Her insight energized my mind, while the feeling of her breath on my neck took care of everything else. As the match came to a close I realized this had been one of the most enjoyable days of my life. I leaned forward, running my finger along Iryna's arm until I was holding her hand. I turned toward her, her sky blue eyes holding me there. God, she was beautiful.\n\n\"Carrie?\" \n\nI lifted her hand to my cheek, and I leaned into it as I had in the car. \"Iryna? On the way here, were going to kiss me?\"\n\nHer eyes dropped for a moment, her voice growing husky. \"I wished to, yes.\"\n\n\"Would you still like to?\" \n\nIryna nodded her head. I leaned forward slowly. Her hand left my cheek and trailed down my back, leaving a trail of fire behind. Iryna's head came forward, and her eyes closed. I smiled and lifted my hand to her head, guiding her mouth past mine. I kissed her cheek, feeling the electricity on my lips. Iryna gasped, her mouth opening and turning to mine. We found each other there, our kiss melding us together. In the car a part of me had said this would be wonderful. But it'd been wrong, wonderful didn't begin to describe this. Energy spread to every part of my body. My hair was tingling, and I could feel goose bumps rising on my arms. I had always wondered what people meant by a toe-curling kiss. Not anymore.\n\nIryna's tongue caressed my bottom lip, gently requesting entrance. I opened my mouth and sought hers with my own. Our tongues met, caressing each other slowly, gently. It was so unlike what I'd known before. To the men I'd dated, kissing had been a requirement, something to get me from point A to point B. It had been a battle, and they'd always sought dominance. I could always feel them pushing through their kiss toward what they truly wanted. There was none of the here. This was kissing for the pure pleasure of it. The experience and the intimacy were overwhelming. \n\nI whimpered in joy and slid closer to her, Iryna wrapping her arms around me as I melted into her. She held me close, as close as anyone ever had, and it was bliss. She was so strong, but soft and gentle. I felt safe and cherished. As we continued to explore each other's mouths my hand slid down from her cheek, fingers brushing lightly over her sensitive skin. I reached behind and caressed the back of her neck. She purred in pleasure as I did, and a thrill raced through me, knowing I had caused that. \n\nShe pulled me tighter, and the softness of her breasts pressed against mine. Her nipples pressed through my grey cotton tank, and I knew she could feel mine as well.\n\nHer mouth latched onto my lower lip and sucked it in as she pulled away, and I gasped at the intensity of it. She slid down over my jaw and feathered her lips against my neck. I could feel her breath, hot on my skin. It was making me crazy. I couldn't believe how badly I wanted her.\n\n\"Please, Iryna. Please.\" I desperately tried to pull her near, but she held her distance. She moved further down, finding the pulse point above my collarbone, and there I felt her lips tighten as the delicious suction began. \"Oh, God!\" I moaned and cried softly as Iryna's gentle lips kissed and suckled over the sensitive flesh. She moved up my neck as I fell deeper into her embrace. Finally she found my ear, pulling the lobe into her mouth as I whimpered and held her desperately. \n\nIn moments it was too intense, and I pulled away. I felt her arms slacken as her eyes asked desperately if she had done something wrong. Even in the heights of her arousal she needed to know I was OK. In that moment I felt something inside me snap. I was hers, even if it was only for this night. \n\nI answered her eyes' question by kissing her again, almost fiercely. Our tongues warred this time, each desperately trying to give more pleasure than they were receiving. I slid my mouth away, going directly for her ear, nibbling and chewing gently on it \"Oh, Carrie, Bozhe miy, o mylist\" Iryna lapsed to her native language as I moved down her skin. I nuzzled deep, bathing her in soft kisses and gentle nips. I found the hollow of her neck, but I could not stop. I continued, moving over her breastbone and kissing the skin exposed by her scoop neck T. \n\nMy hand ran down her side, feeling her back arch at my touch. I wanted under that shirt, and I began to pull it free from her skirt. Iryna put her hand on mine to stop me.\n\n\"Carrie, I do not, ... you do not have to do this. It is too fast for you. I will wait, yes?\"\n\nI looked deep into those sky blue eyes, and saw the concern there, and I loved her for it. But I also knew it was not necessary. I laid my finger gently on her lips. \"I know you would. That's why you don't have to.\" I turned, straddling her lap and leaning in to kiss her. She met me with a fervor, our tongues caressing each other, me shuddering as she ran hers along my lower lip. \n\nI reached down for the bottom of her shirt, but she stopped me again. But this time there was no hesitation in her eyes, just a playful hunger. \"It is not fair. You have already seen me, yes?\n\nThat was true. I'd seen her on my table, completely uncovered, and she was a goddess. Fair was fair. I leaned back without ever breaking eye contact and slowly raised my arms over my head. She grabbed the hem of my gray tank and lifted. I gasped as the cool air touched the skin of my belly. My top landed on the floor and Iryna pulled me close, wrapping her arms around me as her mouth explored my sternum and the valley between my breasts. Her hands began working at the clasp to my nude colored bra, and moments latter it was being drawn forward around my shoulders. \n\nIryna pulled away to see what she had revealed, and I forced myself not cover up. I'd always felt my breasts were one of my beast features, not huge, but a solid C cup with dark silver dollar sized areolas. They had a nice, teardrop shape. I'd always liked them. But here now, I desperately wanted them to be acceptable. For a moment I remembered who I was with. She could have anyone. Why was she with me? But this lasted only a second, as the admiration shone from her eyes.\n\n\"Oh, Carrie, you are beautiful.\" I gave a single, nervous laugh, placing a hand gently on my lover's head. Iryna closed her eyes and leaned forward, taking my left nipple into her mouth.\n\n\"Oh, God!\" I threw my head back as electricity danced through my chest. Her mouth applied delicious suction while her tongue bathed my nipple with flicks and nips with her teeth. My head was spinning. I couldn't believe what I was feeling. Iryna's nails glided over my back, leaving ecstatic lines of joy in their wake and making me press forward, which only increased the incredible stimulation on my breasts. All I could do was hold still and shudder in pleasure.\n\nI'd had my girls manhandled before, and I mean that quite literally. I'd always endured it, cause guys like playing with boobs. But this, oh my God, this was exquisite. Iryna wasn't playing with them; she was worshipping them. She moved from one to the other and back with a languid grace, savoring every moment. Just as I couldn't take any more on one side, she would switch. It was beautiful.\n\nAfter an eternity Iryna's kisses began to move back up my chest, and I tilted my head down to capture her mouth with mine. My kiss was filled with gratitude and promise. I was determined to return the favor, feeling a primal need to give her back some of the pleasure she'd just given me. I leaned in, looking into her incredible blue eyes, as I ran my hand from her head over her shoulder, feathering it down over her side. \n\nI grasped Iryna's shirt and lifted, smoothly pulling it over her head. Her white cotton bra unclasped in the front, and I peeled it back to expose my goal. They were just like I remembered, incredibly firm, hard nipples reaching out into the afternoon air. This time though, I had no need to avoid them. I placed my hands over the pale globes, gently caressing her areolas and lightly pinching the nips. I leaned in and kissed her neck, as she sighed and lifted her chin to give me access. My mouth worked down, over her clavicle and towards her breast, letting my hands roam freely over the soft skin of her belly, admiring the powerful six pack underneath. ",
        "Iryna leaned back with a contented sigh as my tongue swirled around her breast. I worked from outside to in, finally circling the pebbled skin of her light pink areola. \n\nShe pushed her chest up, seeking more contact, but I pulled ever so slightly away, blowing air over the nipple. \"Oh, Carrie, bud laska\"\n\n\"What?\"\n\n\"Carrie, please.\" Her back arced of the sofa at a light flick of my tongue. She whimpered once, and I relented, sucking her left breast as fully into my mouth as possible. Iryna cried out as I bathed the tip with my tongue, alternately flicking and caressing, with an occasional nibble thrown in. I moved back and forth, relishing the little disappointed sighs each time I disengaged, and the delicious moans as I started again. \n\nEventually I moved down, running my tongue along the crease where her breast rose from her chest. I kissed further, tracing the lines of her abs and circling the indentation of her navel. Up to now we'd done no more than what a couple of horny teenagers might in a reasonably roomy backseat. But, horny as I was, unbelievable so, I was no teenager, and this was a fully grown woman in front of me. Despite my lack of experience, I knew how two women made love. The only question was could I do it. At that moment, with this goddess roiling in pleasure beneath me, I knew I could.\n\nMy hands held her sides, then slid around behind and untied the bow holding her wrap around skirt together. I pulled the ribbon of fabric through the cloth eyelet, unfolding the material out left, and then right. I gazed down at my prize. Her hips were slim, but distinctly feminine in their curves. Her smooth, creamy skin and plain white cotton panties stood out against the brown and blue patterned skirt that now served as a backdrop.\n\nI was mesmerized, just staring at her as my hands ran over her belly and down her legs. \"You are so beautiful.\"\n\n\"Oh, Carrie.\" \n\nIryna sat up and I kissed her, pushing her slowly back as my fingers traced delicate patterns over her inner thigh. My hand felt the leg band of her panties and traced a finger over the fabric covering her sex. She moaned into my mouth, which was incredibly erotic. My mouth moved to her neck, and she cried out as I rubbed over her mound. She was incredibly wet, her excitement soaking through her panties. I massaged her more forcefully, and my lover began grinding herself against my hand. \n\nMy mouth moved down, finding her breast as my thumb began circling the sensitive nub at the top of her slit. \n\nIryna was writhing. I heard my name, coupled with a lot of words I didn't understand. I let her nipple pop out of my mouth and I slid down, my tongue trailing over her stomach. I could smell her now, her musk heady and erotic. I grasped the waistband of her panties, and with a whimper she lifted her hips so I could peel them off. I maneuvered them carefully past her knee brace, cradling the injured leg and kissing the skin around it. I moved up her leg, kissing the sensitive skin I found there. Her legs spread, and suddenly I was face to face with her dripping sex. Ok, now I'd studied anatomy, heck, I had one myself. But I'd never seen one like this, so close. And, oh God, her smell.\n\nI'd hated giving my boyfriends head. I hated the taste, I hated gagging on their junk. I gagged easily. The first time I tried to give my boyfriend a blow job I literally threw up in his car. \n\nBut this wasn't the same at all. I loved her smell, musky, tangy, earthy and wonderful. A small triangle of sparse blonde hair sat above her clitty, which was peaking out of its hood. Her inner lips were swollen and pouting, and her opening glistened with her essence. \n\nI eased her legs further apart. My tongue extended and pushed it as far into her as I could. Her hips bucked as I made contact, so I wrapped my arms around her legs and held myself steady. I refused to let go. If I'd thought her scent was wonderful, it paled to her taste. It went straight to my head, the tang and musk making me crazy. I licked up in a long stroke from her vagina over her lips to her little nub. I darted my tongue around lapping up every drop of moisture I could find.\n\n\"Oh God, Carrie, it is wonderful, please...\" I kept working, and she kept moaning, sometimes in English, some Ukrainian, I think, But I didn't seem to be able to drive her over. Then the clinician side of my brain kicked. I never touched someone without a plan. Be it a massage or P.T., If you were competent you always had a plan. And here I didn't. I was just fumbling around in the dark. So I pulled away, running my finger down the length of her slit, trying to form a strategy. But I couldn't. I just didn't know how. So I did what anyone should when they don't know something. I went to school.\n\n\"Carrie?\" Iryna propped herself up on her elbows, eyes searching to see if something was wrong. I felt a wicked smile crawl across my face. Up to now she'd been moaning and sighing. I was going to make her scream. \n\nI bent to my work. I went to her vagina, inserting my tongue as far as it would go. Then out, then in, and out again. Iryna fell back against the couch, and I noted the reaction. Next I ran my tongue around her opening, alternating the angle and placement of my tongue. Quickly I found the right rhythym, making Iryna moan and push her herself towards me, trying to force me to go deeper. But I'd learned what I needed to know and pulled away.\n\n\"No Carrie, please, please don't stop.\"\n\nI blew gently over her sex, making her grunt and fall back into her cushion. I lazily ran a finger from her pearl down. \"I'm just exploring. You be patient.\" As I said it I slipped my finger inside her, and her hips bucked. I slipped my finger out and put it in my mouth, watching Iryna's eyes smolder as I languidly savored her flavor. \"I love the way you taste.\" \n\nI smiled wickedly and bent back, beginning to search the distance between her clitty and her core. I pulled her inner lips into my mouth, gently sucking and running my tongue along the creases I found there. I delved deep into her cleft, always slowly working my way up. I found she loved having her lips suckled while I ran my tongue along the inside, and I repeated this technique often to delicious success. I was having an immensely satisfying time, but Iryna's whimpering and begging were becoming more and more insistent, and as I feasted I knew I wanted to feel her come, and to know that I had caused it.\n\nHer clitty was sitting proud and swollen at the top of the inverted V formed by her inner lips. I flicked it once with my tongue, earning an \"Ungh!\" and a buck of Iryna's hips. I ran slow circles around Iryna's nub while she desperately tried to push her sex against my mouth. I could tell she enjoyed the flicking, but what really was driving her insane was caressing underneath, particularly just on the left side..\n\nI fastened my lips around her, sucking her hood and all into my mouth, my tongue continuing its ministrations on her clit, especially on that special spot I'd found. Her breathing became heavier, panting and moaning. Suddenly she stiffened for a moment, before dissolving into cries and words I didn't understand. I felt her powerful muscles rhythmically contracting as her orgasm claimed her. I just held on for dear life, trying to give as much stimulation as possible while Iryna's hips bucked and jerked, her muscular thighs holding my head in place. \n\nAs she finally relaxed her legs I lifted my eyes to look at my lover. Her face and chest were beautifully flushed. Her crystal blues had darkened slightly, but still so gorgeous. She held her arms out to me and I wanted them so badly. I crawled up over her body and melted into her embrace as she pulled me to her. My face was coated in her juice but she didn't seem to care, and we kissed passionately.\n\n\"Oh Carrie, you were so wonderful.\" \n\nI buried my head in her shoulder, loving the feeling of just being held while she stroked my long, light brown hair. She pulled out my hair tie, letting the softness spill around us both. Her mouth found my neck, alternating little nibbles and pecks as she spoke. \"But now, it is your turn, moya lyuba.\"\n\nI could have asked what those words meant, but inside I knew. It meant she cared, and I felt my soul sing.\n\n\"Stand up, Carrie.\" I was reluctant to pull away, but I did as I was told. Iryna sat up on the sectional, kissing me on my stomach, her long tongue playing around my navel. I shuddered at the sensation, running my fingers through her long, sandy blonde locks. Her hands moved to my khaki shorts, undoing the button and lowering the zipper. She pulled them down, peeling them over my round backside. I may not have been in the ridiculously amazing shape Iryna was, but I worked out regularly mostly and ate healthy in addition to playing tennis, so everything was still firm and tight. I'd never been more glad of that fact than that moment. \n\nOn the other hand, when I'd packed up my change of clothes for my match this morning I hadn't expected to be slowly undressed by the most beautiful woman I'd ever been in the same room with. I wish I'd been wearing some sexy, lacy thong, but no such luck. But Iryna ran her hands over my light blue Haines Her Way briefs as if they were fine lace. She hooked her fingers around the waistband, and a moment latter I was stepping out of both garments. \n\nIryna ran her fingers over my mound and through my patch there. I hated having a lot of pubic hair; it felt uncomfortable and gross when I sweated, so I kept everything well trimmed. I was glad I did. Iryna kissed me again, right in the hollow between my belly and mons. I sighed and pulled her head tighter to me, but she drew away, her hand finding mine as she lay back on the couch.\n\n\"Come here.\" She pulled me gently to her, and I bent my knees up onto the cushions with her. She lifted my leg so that I was straddling her, and then she slid down so her head was directly beneath me. My pulse raced and my breath came in ragged gasps as her hand wrapped slowly around my thighs, gently drawing me down to her mouth. I could feel her breath on my dripping sex, my mind drowning in anticipation. Then, suddenly, my world dissolved as her lips enveloped me. \n\nI'd had a few boyfriends who'd tried to go down on me, but they'd fumbled through it, mostly attempting to get me wet enough for them to move on to what they really wanted. But even their abbreviated efforts had been enjoyable. But this... this was transcendent. I'd never felt pleasure so intense. She pulled my clit into her mouth. The power of the suction with the gentleness of her caressing tongue made me cry out. Iryna kept that up for a moment before backing off, which was a good thing, because I don't know how long I would have lasted, and I wanted it to go on forever. \n\nIryna's tongue worked down the length of my slit, alternately sucking and licking on my lips. When she reached my opening she penetrated as deeply as she could with her tongue, delicious shudders running through my body with every withdrawal and thrust. I realized I was grinding myself on Iryna's face, my head lolling around as she worked on me. She just went with it, moving up and down my cleft. She'd tease my pearl for a second, then move away as I whimpered in frustration. But then she'd go to work somewhere else and I'd start to cry out again. \n\n\"Oh God, Iryna, Please.\" I grunted, as I felt every swipe of her tongue all the way into my fingers and toes. She reached up and grabbed my breast, twisting hard on the nipple there, making me throw my head back and scream. Iryna eased. I thought she was afraid she'd hurt me, so I held her hand in place. \"Don't stop, please, don't stop.\" She went back with gusto. Her tongue flicked my clit, making me shudder. And then she did it again, and again, her hand still teasing and pinching my tit. I began to quiver. I was so close, my orgasm felt inevitable, and I was almost afraid of the intensity that was building. I was cresting the hill of a roller coaster, strapped in, just along for the ride, excited and scared at the same time. Iryna could sense it too, and she sucked my clit into her mouth, bathing it in her attentions, just as she had at the start. I rocketed over the edge.\n\nIt began in my sex, ripples of pleasure radiating out to every part of me. My toes and fingers clenched, every rhythmic contraction making my body contort with pleasure. Iryna's mouth was relentless, drawing out the sensations, another wave, and another. Oh, God, another. Finally they began to lessen, and I felt the world going dark as aftershocks washed over me. Iryna had relented somewhat, suckling softly now as I twitched and whimpered. I pulled myself away, sliding down her body, feeling that instinctual desire to be held after I'd come. Just like my orgasm, it was more intense that ever before. I kissed my lover, and I could taste myself on her lips, which was much more erotic than I thought it would be. I definitely liked her essence more, though. She wrapped her arms and uninjured leg around me as I cuddled against her. And I held her as tightly as could manage. I felt wetness on her shoulder, and I realized I was crying. \n\nIryna tilted my face and kissed away a tear \"Carrie?\" Our noses were touching and all I could see were those incredible crystalline eyes.\n\n\"Please don't disappear\" My voice broke slightly as I spoke. I could see the confusion in her eyes. I touched her cheek with my hand, gently, almost reverently, afraid she might dissolve at the contact. \"I don't want this to be a dream.\" A sob escaped as I said it, and I watched her sharp, Eastern European features soften. \n\nShe pulled me close and whispered in my ear. \"Never, moya lyuba. I am right here.\" \n\nOverwhelmed tears continued to spill from my eyes for a moment, as I luxuriated in her strong embrace. I felt contentment, and peace. It was so premature to say love, but I couldn't imagine love feeling any better. I rested in her, and slowly slipped away from consciousness, happy.\n\n\"Carrie?\" I woke on the couch, covered in a blanket, my head on a pillow. Iryna was limping towards me. \"Carrie? Would you like some dinner?\" She was wrapped in a terry cloth robe. I was still naked, save for my socks, so I kept the blanket pulled around me as I sat up.\n\n\"Mm, yeah.\"\n\n\"Good. I brought you a robe.\" She pointed to the couch, where a soft blue cotton robe sat folded.\n\nI grinned. \"If it's yours I'll probably trip over it.\"\n\n\"Yes, but it was here as a compliment when I rented the house. It should fit. I must bring my own.\"\n\nI blushed at the thought of letting the blanket fall away while she was watching. Stupid, I know, considering what we'd just been doing. She smiled at my embarrassment and turned away, letting me wrap myself in the soft garment in private as she walked back to the kitchen. \n\nI followed, where a salad with marinated grilled chicken waited. It was perfect, especially after our heavy lunch.\n\n\"I am eating many salads now. Usually I can eat what I want, because I am so active and work hard, but now, I am working much less. I hope it is OK.\"\n\n\"It's wonderful, thank you.\" I blushed. \"You're wonderful.\"\n\nIryna grinned, picking at her dinner. She took a bite, her eyes never leaving my face. \n\n\"Carrie, you have beautiful eyes. People tell you this, yes?\"\n\n\"Not too often. They're too dark.\" \n\n\"No, like deep pools. I can get lost in them I think.\"\n\nI could feel the blush spreading across my face. \"Thank you. You're my favorite player, you know.\"\n\n\"Really. You are just saying this.\" I could see her redden now. \n\n\"No, it's true. I always loved the ways you moved around the court. It's lyrical almost. You have this effortless power that I always envied.\" I looked down. \"You're beautiful, like a Valkyrie.\"\n\n\"Thank you.\"\n\nI took a bite of chicken, getting a bit of the creamy feta cheese from the salad. \n\n\"It feels strange to be here, with me, yes?\"\n\nI nodded. \"Some, it's getting less strange though.\"\n\n\"I am glad. It is hard, being 'Iryna Baraskova'. People always want from me. My last girlfriend, she wanted to be dating a famous someone, I think. But I am just me, a girl from Kiev who plays a game for a living. I barely finished what you call High School. I feel so ignorant, everyone knows more. My agent, my coach, my accountant and lawyers, I have to trust them. It is so scary. On the court I am in control. There I know what to do, and feel I am strong.\" \n\n\"What about your family?\"\n\nA dark shadow seemed to pass over Iryna's face. \"When I was twenty my father found me with a woman. Ukraine is not a good place for people like me. I cannot go home. They kept it quiet, but he quit as my coach, no longer comes to my matches. Many speculations about why, but I am not 'out' as you would say. My agent will be very upset with me for doing this with you.\"\n\n\"Iryna, your secret is safe with me, I promise.\" I made steady eye contact, trying to show her I meant it. \"But it shouldn't have to be a secret, not today.\" \n\n\"Someday, I hope. But I do not want to embarrass my family.\"\n\nI walked around the kitchen island where we had been eating and wrapped Iryna in a hug. \"I'm so sorry.\"\n\n\"Thank you.\" She held me close. \"Carrie, will you stay with me tonight?\"\n\n\"Yes.\" I couldn't imagine anywhere else I would want to be.\n\nI saw Iryna wince as she tried to stand. \"Is your knee hurting?\"\n\nShe smiled sheepishly. \"I do too much today. My therapist will not be happy, I think. But it was fun.\"\n\n\"She'll forgive you.\" I helped her up and back to the sectional. She took some ibuprofen, refusing anything stronger, and I got some ice for her knee, propping it up on a pillow. A large bag of trail mix was the closest thing to junk food I could find, so I filled a bowl and cuddled in next to her. I grabbed the remote, flipping on the Rays and Red Sox, and spent a very enjoyable hour or so trying to explain baseball to Iryna.\n\n\"Why does he not run?\"\n\n\"Cause it's a fly ball. You can't advance until the ball is caught.\"\n\n\"But before, they ran when the ball was in the air.\"\n\n\"That's cause they didn't think anyone was going to catch it. If someone had caught it, they would have had to go back.\"\n\n\"Oh.\" Her voice made it clear she didn't understand at all. \"Americans are strange.\" \n\nI bounced a peanut off her and she reached inside my robe and tickled my side. I squealed and slapped at her shoulder, trying to get away, but the six-one world class athlete was much stronger than I was. She held me tight, and suddenly we were kissing again. Her hand roamed freely inside my robe while I wrapped my arms around her neck.\n\nIryna trailed up my jaw and nibbled on my ear, whispering ever so softly. \"Carrie? I may take you to bed now?\" She sucked on my earlobe and I gasped.\n\n\"Oh, God, yes.\" I stood and helped her to her feet. She put an arm around my shoulder and we made our way to the bedroom slowly. \n\n\"I feel so silly. I should be carrying you, moya lyuba.\"\n\n\"You can lean on me anytime.\"\n\nShe made it into the en-suite by herself, and I sat on the edge of the King plus sized bed, which was not as soft as it looked. I preferred a firmer mattress, and this one was perfect. I heard the toilet flush and the sink run for a while. Eventually Iryna reentered and I took my turn. There was an unopened toothbrush on the counter, which I greatly appreciated. Iryna was sitting on the edge of the bed when I finished, her blue eyes darkening with desire.\n\nI stopped in the doorway, untying my sash and letting the robe fall in a heap at my feet. I walked towards her slowly, naked as the day I was born, letting my hips sway with every deliberate step. Seeing her look at me, wanting me, I felt powerful, sensual, beautiful. \n\n\"Oh, Carrie, I...\" She sputtered on the last word as I slid a knee onto the bed, then the other, straddling her lap. I took her mouth with mine. She whimpered as I kissed her, her powerful arms wrapping around me as I rose up on my knees so my face was above hers. She slid down, nipping and kissing my sensitive neck. I sighed and threw my head back, giving her full access. ",
        "In a heady display of strength, she lifted and spun me. I felt like I almost flew, landing on my back, head flumping into a soft pillow. Then she was on top of me, my breath catching in my throat at the hunger in her eyes. She lowered her lips and kissed me, her tongue driving deep into my mouth. I ran my hands over her back, some ridiculous part of me naming the muscles I felt as touched her. She moved down, her mouth working over my chest and through the valley created by my breasts. My nipples were taut, almost aching, soothed one at time by Iryna's hungry attentions. She loved on them, and I arced my back, trying force more contact. But that tender flesh was not Iryna's destination, and she moved further. Her tongue traced over my stomach, circling my navel and causing me to purr in anticipation. \n\n\"Oh God, Iryna, that's ... that's so good.\"\n\n\"I can stop here then, yes?\"\n\n\"Don't you dare.\"\n\nShe smiled up at me and continued. I felt her move through the short, soft fur of my mons, and I cried out as she blew lightly over my sex. I thrust my hips up, but she denied me contact. Her breath was cool on the wetness of my slit, making it impossible to deny how excited I was.\n\n\"Iryna, please\"\n\n\"Please what, Moya Lyuba?\" She nuzzled her nose against my hood.\n\n\"Oh God, Please put your mouth on me. Iryna ... Please. I need you\"\n\nIryna purred as I spoke, sending vibrations deep into my core, and I felt my mind go fuzzy at the sensation. Iryna drove deep into my vagina, and then licked upwards, using the broad flat of her tongue to touch as much of me as possible. I screamed out her name, and she set to work in earnest. What she had done on the couch had been wonderful, and given me the powerful orgasm of my life. But this was something different. She searched me, loved me, every crevice of my most intimate place was explored. I'd never felt so exposed, so helpless in the presence of another person. But I also felt adored. There was nothing in the world but Iryna and I, and the feelings she was sending roiling through me. I spun ever up the mountain.\n\nAs I swam in the bliss, something was lurking in the background, huge, a leviathan edging ever nearer. I was aware of it, and as it crept closer I began to fear it as much I needed it to consume me. Iryna's tongue was a magic wand, leaving pure joy in its wake, but never driving too far. She held the monster at bay, and I knew it was obeying her commands. Her tongue worked my clit, sucking, caressing, teasing. Suddenly I felt two fingers at my entrance. They stroked up, then down, coating themselves in my nectar, before driving inside of me. \n\nI cried out. Iryna's tongue began lashing my swollen pearl, while her fingers effortlessly found my g-spot. I felt the leviathan rushing forward. It had been summoned, and there was no stopping it now. It crashed into me, detonating in my pussy and rushing outwards. I knew I was speaking, unknown words, punctuated with Iryna's beautiful name. She kept her mouth locked on my clitty, fingers running over and back on the magic spot in my vagina as I bucked and wailed.\n\nSlowly heaven receded, aftershocks rocking my senses. My fists relaxed from the death grip I hadn't realized they'd had on the blanket beneath me. Iryna eased out her fingers, running them gently over my sensitive entrance. Her tongue relaxed, caressing the underside of my clit, every movement sending little spasms through my body. \n\n\"Oh, God, Iryna that was...Oh, please, I can't... so sensitive...I, Oh my.\" My head lolled back onto the pillow as my lover's ministrations started to build intensity, and I felt myself beginning to climb the mountain again. She reached up and grabbed a nipple as she worked, adding a new delicious sensation coursing through me. I was absolute putty in her hands. I found myself rubbing my hips against that glorious tongue, desperate to find that place I'd just left. Iryna was a master, and it came when she wished, thankfully not too long in the future. It was different this time though, instead of an explosion it was a rolling wave of ecstasy, coursing through my body, running out to the furthest reaches of my limbs .\n\nIt subsided, and I didn't even have the energy to ask her to stop. And she did not. I could do nothing but lay there as she took me up the mountain one last time. I couldn't grip the sheets, I couldn't arch my back, I couldn't even curl my toes. As I came, I felt as if I'd been immersed in pure, liquid bliss, oozing into every pore, carrying me along in a beautiful, tropical wave. \n\nAs the bliss finally retreated, I was crying with joy and exhaustion. Then Iryna was there, holding me, and I sank into her arms, weeping as she kissed me on the forehead and cheek.\n\n\"Oh, my beautiful, Carrie.\" I felt her hand caressing my hair, and I forced my eyes to open, to stare into the crystalline blue depths of my lover's gaze. I could not speak, but I didn't need to. Her mouth captured mine, and I tried to express everything I was feeling into that kiss. I wanted so badly to return the ecstasy she'd given me, but I knew my body wouldn't let me, not yet.\n\n\"Shhh, my darling, sleep now, yes?\"\n\n\"But, I want...\"\n\n\"I know, and thank you, but there will be many nights for that. Now, rest.\" I nestled into her arms, and sleep found me, deep and restful, full of beautiful dreams of a future I wasn't sure was even possible. \n\n*****\n\nThanks for reading, comments and constructive criticism welcome. Trolls will be laughed at and then ignored. This will be a four part story, with possibly more after that. The other bits are written and are being edited."
    ],
    "authorname": "JCMcNeilly",
    "tags": [
        "romance",
        "lesbian",
        "lesbian sex",
        "romantic"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/the-tennis-star-ch-01"
}
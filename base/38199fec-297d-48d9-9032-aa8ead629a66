{
    "title": "The Prize Day 03",
    "pages": [
        "Christmas Day\n\nAndy woke up, still in the middle of the bed. Unlike the night before when he had woken up alone, Alex and Natasha were still in the bed, nestled up to him. He tried to stay as still as possible, so as not to disturb them. He just looked up into the ceiling and contemplated the past 48 hours. He'd had sex with five of the thirteen women who were staying in the house with him. Porn stars. Beautiful, confident women who were under no obligation to be with him, and yet still were.\n\nMaybe they were just horny. Maybe the Caribbean air had something to do with it. Anyway you sliced it, Andy was having an experience of a lifetime. He smiled to himself just thinking about how lucky he'd been.\n\n\"Merry Christmas,\" he heard to his right and saw Natasha smiling at him.\n\n\"Merry Christmas,\" he said softly to her.\n\n\"Merry Christmas!\" resounded Alex, giving up on the pretense of still being asleep.\n\nAndy turned over and gave her a soft kiss. Alex liked it and thought it was sweet. Natasha flipped him back toward her and gave him a much deeper kiss. That was certainly enough to wake Andy up.\n\n\"Guess we should go check the stockings for coal,\" Andy said stating to rise up.\n\n\"Wait!\" Alex said abruptly and stopped Andy. Natasha also held him back. Andy looked puzzled.\n\n\"We have to go prepare your surprise!\" Natasha explained.\n\n\"Wait here and we'll come knock on the door when you can come out,\" Alex instructed. \"Don't come out till then, ok?\"\n\nAndy nodded his head and the girls got out of bed. They didn't bother collecting their clothing, just opening the door and blowing a kiss to Andy before they left. He sat there stirring.\n\nAndy went to the bathroom. He took a massive piss since the girls had stopped him from doing so last night. Once he was finally done, he washed his hands and headed back into the bedroom.\n\nHe collected his pajamas from the night before, figuring he could at least wear them until after breakfast. Since apparently, he had some time to kill, he grabbed his laptop.\n\nHe checked up on e-mail and messages from friends. People knew where he was, but no one knew the company he was keeping. He figured it was no one else's business. He checked the news sites to see if he missed anything important and saw that he didn't, as always.\n\nHe was checking a few videos out on YouTube when he heard a knock on his door.\n\n\"Ok, come on out!\" Natasha bellowed from the other side. He could hear her moving quickly from the door. He put his laptop away and left the bedroom. He walked down the hall not seeing anything out of the ordinary. He at first thought to head to the kitchen for a cup of coffee but heard faint giggling coming from the living room. Andy headed there to see what the noise was.\n\nWhat he saw caused him to drop his jaw. He saw 13 women, lined up just as they had been when he first met them two days ago. Except this time, they were wrapped in red bows and nothing else. Each had the bow across their chest covering their nipples, and then they came down to form a sort of panty between their legs. All the ladies were smiling at him, even Gianna.\n\n\"Merry Christmas, Andy!\" they all said in unison and all in extremely cute voices. Andy stood there for a few more seconds astonished as the girls kept giggling and smiling.\n\n\"Santa really knew what I wanted this year!\" Andy said to the girls who all giggled at him.\n\n\"Do you like your presents?\" Sara asked innocently but meaning nothing innocent in the saying.\n\n\"I'm gonna have to go ahead and say yes,\" Andy said, dripping in sarcasm.\n\n\"I guess you should go ahead and open them then,\" Cassandra said with wink.\n\nHe moved over to the first girl on the left who happened to be Sara. He looked around the back and found a tie to the bow there. Andy reached out for it.\n\n\"No, no, oh no,\" Gianna said stopping him. \"You wanna open these gifts, you gotta use your mouth!\"\n\nAll the girls giggled and agreed with Gianna. Andy just inhaled and went about his task.\n\nOne by one, he went down the line \"unwrapping\" his gifts. Some of the girl's knots were tighter than others and he really had to work at it. None of them did a thing to help him, however. Finally he pulled Angela's knot free, and all the women were now completely naked. You could've broken a brick on Andy's dick at this point.\n\n\"So,\" Charlie started, \"we made a decision regarding our dress code last night for this trip.\"\n\nAndy looked at her inquisitively, but Whitney then took over.\n\n\"Except for when we leave the house, we're all going to be completely naked for the trip!\"\n\nAndy's heart started pumping hard. Now not only was he the only man in a house full of porn stars, but now they were all going to be naked the whole time. This was almost too much for any man to take.\n\n\"And\" Liliana added, \"we really don't think it's fair if you don't adhere to the dress code too.\"\n\nAndy was sitting there petrified. He had a huge hard on and now he was being asked to disrobe in front of them all. Sure, more than a third of them had already seen him naked, but this was a new thing. He slowly zipped his zipper down while some of the women had a hungry look to them. He eased himself out of the shoulders and in one fell swoop, dropped the pajamas down to the ground.\n\nThere were hoots and hollers all around, along with a couple of wolf whistles.\n\n\"Damn!\" Gianna exclaimed seeing Andy's dick for the first time. She was genuinely impressed.\n\nCassandra looked him up and down and her pussy already got damp. She looked at him with pure lust.\n\nCharlie wasn't handling it much better. She wanted to jump him right then and there.\n\n\"Not bad for a white boy,\" was all Candace could get out, licking her lips as she said it.\n\n\"Hey!\" Liliana shouted out, \"after breakfast, let's have a pool day!\"\n\n\"That's a good idea,\" Alex seconded, \"we haven't gotten any chance to check it out yet.\"\n\nEveryone was soon in agreement about the plan for the day. They all started over toward the kitchen for some much-needed coffee and food. There were more than a few hangovers spread across the group. The coffee was already made, and all the orders were already there, thanks to Andy's quick-thinking last night.\n\nAndy poured out coffee to all those who wanted it. Many of the girls thanked him, and a few grabbed his now naked ass, even Gianna. Andy took a deep drag off his coffee then quickly refilling it. He'd had a few extra shots last night then the rest and could really use it.\n\nThe breakfast was as good as yesterday, only this time; Andy was eating in front of 13 naked women, many of whom were giving him the \"eye.\" Andy just tried to keep to his own, eating his French toast. Alex and Natasha kept looking at him with glee, remembering last night. Angela and Karlee quietly waiting to put their plan into place.\n\nAndy was finding it hard to eat. Oh, the food was good, but all these boobs and pussies and asses were messing with his mind. It was overload. Add to that at least half the women were either smiling at him or winking at him, he was really having trouble keeping the one-eyed monster in check. Luckily, he was sitting at the table giving him some leeway.\n\nCassandra sat down next to him with her omelet.\n\n\"How do you like your presents?\" she asked him with a huge grin on her face.\n\n\"I'm thinking I must've been a much better boy then I thought,\" Andy replied. Cassandra giggled at that.\n\n\"Not too good I hope,\" she added, starting to feel up his leg.\n\nAndy was gritting his teeth as hard as he could to keep in control. Cassandra saw this but had no intention of letting him stay in control.\n\n\"Do you like my presents?\" Cassandra asked shaking her DDD's around a bit.\n\n\"They're beautiful,\" Andy said honestly. Cassandra blushed at the comment, thought it wasn't as though she didn't know it.\n\n\"Thank you, Andy!\" Cassandra gushed. \"Wanna give em' a taste?\" she added with a smirk.\n\nAndy's heart raced. He'd always loved her tits, spilling many loads to them in the past. But then he remembered the hot sauce on his lips from the eggs.\n\n\"I have hot sauce on my mouth, I wouldn't wanna hurt you,\" Andy said cutely/honestly. Cassandra smiled at the sweet gesture, but a little hot sauce was not going to stop her.\n\n\"I can deal with a little spice,\" she offered pushing her tits toward him. How could any man refuse that offer?\n\nAndy leaned over and sucked on one of her breasts. Andy's contact instantly popped Cassandra's nipple erect and she relished feeling Andy's lips on her. He sat back up, but Cassandra wasn't satisfied.\n\n\"Can't leave the other one hanging,\" she said popping her other titty forward. Andy dutifully dipped back down toward her other breast.\n\n\"Yeah! Get it, Andy!\" Gianna declared seeing the display and now everyone was aware of the titty tasting. \"How'd those titties taste, dude?\"\n\n\"Pretty damn good,\" Andy responded. Gianna smiled, knowing for herself how good Cassandra's tits were. Charlie then sidled up to the other side of Andy.\n\n\"Time to try some Latin flavor!\" Charlie charged as she offered up her tits to Andy as well. He dutifully sampled both of her breasts. They may have been slightly smaller, but they were still fantastic. Charlie also loved feeling Andy's lips on her boobs, getting damp at the attention.\n\nCassandra saw this and her cheeks flushed with jealousy. Angela saw this as well and knew they had to put their plan into action quick.\n\nA few more women came up for an Andy titty suck and yet he somehow managed to get his breakfast down. He, however, was now harder than he could ever remember. Angela and Karlee nodded to each other and snapped into action.\n\nAndy got up from the table to clean his plate off, not really able to hide his erection which had every woman's attention. Angela and Karlee then flanked Andy on either side, Angela grabbing hold of his erect dick.\n\n\"I think we need a bath before the pool day!\" Angela declared, \"we'll be back!\" With that Angela and Karlee escorted Andy to his bathroom while the other girls just started.\n\nCassandra was livid. First, Charlie stepped on her, and now these two! She knew that she was going to have to get more aggressive now.\n\nCharlie wasn't happy either. She was so horny now and Andy was gone. She'd just have to bide her time.\n\nGianna was straight up impressed by the two, taking him by the cock and dragging him for a bath. \"Nice move,\" she thought to herself.\n\nAndy was pulled along through his bedroom and into his bathroom. He was amazed to find the tub already full of warm water and suds. He looked inquisitively at his \"captors\" who just returned his confusion with wicked grins.\n\n\"I may have snuck in before to get the bath ready,\" Karlee admitted. She then stepped into the tub and took some of the suds and applied them to her tits.\n\n\"Wanna help us get clean?\" Angela said, walking around Andy to join Karlee in the tub.\n\nAndy smiled as he approached the tub, both girls offering their hands to help him in. It was an enormous tub and was certainly large enough for all of them. They sank into the tub, Angela pulling Andy to lay on her as she surrounded him from behind, pressing her breasts deep into his back.\n\nKaylee smiled as she produced a sponge and began very lightly washing Andy down. She didn't really make much of an effort behind it and soon just had Andy's cock in her hands. She surrounded it with bubbles, and she slowly began stroking it.\n\nAngela started massaging his chest and started whispering into Andy's ear.\n\n\"Your gonna fuck our cunts so hard,\" Angela said not being on for being subtle anymore. \"Your gonna bury that cock in us and ram us until we blow,\" she added, now nibbling at Andy's ear.\n\nKarlee then put her mouth to Andy's cock, putting a lot of suction on it. It felt amazing as Andy just laid his head back as Angela and Karlee continued on their various pursuits.\n\n\"Where do you think you'll wanna cum?\" Angela said continuing the massage. \"On our faces? On our tits? In our mouths? In our pussies?\"\n\nKarlee was really getting Andy hard now.\n\n\"Ange, you really should try this, switch with me.\"\n\nThe girls maneuvered around the tub, so Karlee was now behind Andy and Angela began her work on Andy's cock.\n\n\"Fuck, it even tastes good!\" she thought to herself taking the shaft as deep down her throat as she could. Gagging herself on it, she got herself wetter and wetter as well.\n\n\"She loves your cock, Andy,\" Karlee now whispering in his ear. \"I can't wait to feel it deep in my pussy,\" as she aggressively rubbed his chest.\n\n\"Gah! Fuck!\" Angela announced after her \"meal\" of Andy's rod. She smiled and returned right to it, pretty much fucking his cock with her mouth.\n\n\"Thank God it's an overflow tub,\" Andy thought to himself, \"they'd flood the whole house!\"\n\nAfter a few more gags, Angela was ready. She spun around in the bath and presented her ass toward Andy and Karlee.\n\n\"Get her, Andy!\" Karlee encouraged. She knew how much Angela had been wanting to fuck Andy and now she had her chance. Andy got behind Angela and aimed his cock at her bare pussy. He pushed in and was suddenly in heaven.\n\nIt felt wonderful in there. Easily, the best pussy he'd been in so far. Wet, warm and tight he eased himself in and out of her.\n\n\"Don't be such a nice guy!\" Angela chided with a smile. \"Fuck me!\"\n\nAndy heeded her words and picked up the pace. The water was thrashing around as he went deep into her.\n\nAngela for her part was in heaven. Andy's cock felt every bit as good as she thought it would. She thought it fit her pussy like a glove. Every time he slammed it into her, it hit all the spots that she loved. And she was no slouch of making it known.\n\n\"Yes, Andy! Oh God!! Fuck this pussy!! You own this pussy!!\" she bellowed while getting rammed as good as she had in quite a while.\n\nKarlee loved the sight. She'd seen Angela being boned before, but this was definitely hot. She was playing with her pussy pretty good watching her friend get defiled.\n\nAndy started feeling pressure on his cock and within a second of him thinking that, Angela gushed a huge orgasm that was powerful enough to shoot Andy right out of her.\n\n\"FUCK!!! UGH!!\" was Angela could get out. It was a quick, powerful orgasm and she was stunned.\n\nKarlee got really wet seeing Ange shoot Andy out of her and decided she need to try him for herself. She leaned Andy back into the tub and began to straddle him. She then found his cock in the water and slid it up inside her.\n\nShe was surprised at how nice and hard it felt in her. Unlike Angela, she decided to take it slower with Andy. They basically sat in the tub and rocked, with the occasional thrusting. Karlee made sure she had his complete attention and began an intense make out session with him as their genitals got better acquainted.\n\nKarlee found it very erotic. She was never much of a \"make love\" girl, but in this case, she really liked it. She wrapped her arms tight against Andy as she continued to rock on his dick and explore his fillings with her tongue.\n\nAngela finally came out of the daze she'd been in. It wasn't the first time she'd had such an intense orgasm, but damn was that quick. She turned around and saw Karlee and Andy in a passionate embrace seeming to be making love more than fucking.\n\nShe thought they looked lovely together and Angela had a pang jealously running through her, wanting to be the one he was being that passionate with in a tight embrace. But it's not like she hadn't gotten hers. Angela decided to up the ante and proceeded to behind Karlee.\n\nKarlee was still deep in the throes of passion when suddenly she felt a finger slide up her ass and start poking around. As Andy had both his hands on her back, she knew it had to be Ange.\n\n\"You like being DP'd?\" Angela asked as she slipped a second finger into Karlee's ass. Karlee just looked back at her and smiled.\n\n\"You know it. Fuck that ass, baby!\" Karlee encouraged as she started riding harder on Andy's cock.\n\nAndy for his part was loving all this. Karlee felt so warm and intimate and could now feel Angela's fingers probing her back door. Karlee was in another world.\n\n\"Keep it up, guys! That it!!\" Karlee urged as both Andy and Angela kept up the pace. Karlee didn't often have all the attention on her, so she was milking this for all it was worth.\n\nAfter a few more minutes, she got sent over the top.\n\n\"Shit! Shit! SHIT!!!!\" as Karlee thundered her orgasm throughout the bathroom. Angela was glad to get her friend off, but she now had other plans.\n\nDeciding it was her turn again, Angela got on all fours again into the position she had been in previous. Both Andy and Karlee instantly recognized that she wanted attention again. Andy then dutifully aligned his cock for her pussy and started to push.\n\n\"Uh uh\" Angela said, \"other hole,\" as she wiggled her ass more; making it crystal clear what she wanted. Karlee then decided to correct the matter herself and grabbed Andy's cock and pointed it right at Angela's ass.\n\nAndy was going to ease himself into her, but neither girl was having that, Angela fulling impaling her ass on his dick in one fell swoop.\n\n\"FUCK YES!!\" Angela screamed to the world as Andy's cock found its true home, to her mind. Andy started off with small strokes, but Karlee stuck a finger up his ass now to get him moving. Andy didn't disappoint.\n\nIf Angela's pussy was heaven, her ass was the cloud above heaven. His cock was slick enough that it didn't need lube and Angela was feeling every inch of him.\n\nKarlee wasn't resting either. She continued to both finger Andy's ass and finger her own pussy, loving the show she was getting.\n\n\"Fuck her ass, Andy!\" Karlee prodded. \"Make her cum!\"\n\nAndy wasn't sure what she was talking about, but Angela was; a large smile coming over her face.\n\n\"Cum, Andy! Cum in my ass!\" she urged, \"Claim my slutty, tight ass as yours, baby!\"\n\nThese words, as intended, had a profound effect on Andy as ropes started shooting into Angela's ass with a lot of force. Angela could feel every rope splash into her bowels, giving Angela yet another orgasm.\n\n\"Fuck! Oh, Andy that feels so good!\" Angela moaned as Andy's orgasm subsided. She felt so full of his cum and smiled at him. She shifted around and gave him a deep kiss. She then saw Karlee looking at them.\n\n\"Wanna clean me up, babe?\" Angela asked her with a wink. Karlee smiled as she went around to Angela's ass and started to eat out the cum dripping out of her ass. Angela loved the feeling and kept making out with Andy as she was doing it.\n\n\"All clean!\" Karlee declared. Angela ended the kiss and looked deep into Andy's eyes.\n\n\"Isn't bathing with others fun?\" she asked with a huge grin on her face.\n\n\"My limited experience in this has me agreeing with you,\" Andy said with a smile.\n\n\"Well if you're ever feeling dirty, you know where to find me,\" Angela said stepping out of the tub. Karlee and Andy followed suit, and all started drying themselves. Andy started digging in his bag.\n\n\"What are you looking for,\" Karlee asked.\n\n\"Sunblock,\" Andy said producing the cream. \"If we're gonna be outside all day and el buffo to boot, it might be best to have some protection.\"\n\n\"Good idea,\" Angela said. Being from Australia, she knew the importance of sun protection. \"And more hands make things go quicker,\" she added taking the bottle from Andy's hands.\n\nThe girls then did an extremely through job covering Andy in the sunblock from head to toe, paying particular attention to his package. Andy then did the same to help the other two girls. Once they were all fully lathered, they left the bathroom taking the cream with them.\n\nIn the time since they had left the other 11 occupants of the house alone, most had already moved out to the pool area. There were patio tables around it and it also had lounge chairs surrounding it as well. Someone also had the good sense to raid the bar and bring out plastic cups. Candace was pouring drinks when the three reemerged.",
        "\"There's the cleaning crew!\" Alex said after seeing their arrival. Cassandra and Charlie were both very happy to see Andy back and smiled at him.\n\n\"All pristine now?\" was the sarcastic remark out of Gianna who smiled at the trio. Angela and Karlee both held up thumbs up signs to indicate the affirmative. Andy blushed yet again, but not as much as he had been.\n\n\"They got lotioned up too,\" Natasha noticing how shiny they were.\n\n\"Safety is sexy,\" Andy said with a smile. \"Plus I'm Irish and I burn easily.\"\n\nCassandra saw a new opportunity.\n\n\"Hey, Andy?\" she called over, \"could you give me a hand?\"\n\nAndy went over to Cassandra, laying on her stomach, his dick slightly hard swinging in the light breeze.\n\n\"Could you help me out?\" Cassandra asked, \"I forgot to put on sunscreen.\"\n\n\"No problem,\" Andy replied shifting into help mode and out of \"horn dog\" mode. He cracked open the bottle and squirted some lotion on to his hands. He then squirted some onto Cassandra's outstretched hands.\n\n\"I'll handle my face; you start working on the rest.\"\n\nAndy started on the obvious areas in his mind. He slathered her back with lotion, covering her shoulders and hard to reach places. Cassandra was covering her face while Andy got the back of her ears. She needed to hit the accelerator.\n\n\"Don't forget my sensitive areas,\" she added with a smirk, sticking out her ass to make herself clear. Andy took a deep breath again and put more lotion on his hands. He began rubbing both her cheeks with the lotion lightly.\n\n\"Ya gotta rub it in, Andy,\" Cassandra said teasingly, \"you wouldn't want me to get a burnt ass, would you?\"\n\nAndy smiled and applied more pressure. It had an immediate effect on both participants. Andy chubbed up more and Cassandra had decidedly more moisture between her legs. He finished up there and did the back of her legs as well.\n\n\"Don't forget the front,\" she said dropping all pretenses.\n\nAndy started on her stomach and Cassandra was done fucking around.\n\n\"If my tits burn, I swear I'm smacking you!\"\n\nAndy got the message quickly and put his lotion covered hands all over her tits. Cassandra was now in heaven as Andy's sole focus in life was now her huge breasts. Andy was quite happy too. He'd always fantasized about Cassandra's breasts and now, they were in his hands, and he was massaging them.\n\nThey were clearly lathered up well and Andy was about to move on, when suddenly Cassandra shoved Andy's face into her breasts.\n\nAll the women were looking with varying degrees of respect, arousal, and jealousy. She then took Andy's hand and shoved it toward her cunt.\n\nAndy managed to get his head free enough to look up at her.\n\n\"Wouldn't want my kitty to burn, would you?\" she asked as innocently as she was capable of. He tried to cover as much of his face as possible, thinking it must now be blushing beat red. He started lightly putting lotion there.\n\nIt wasn't that he was shy about touching a woman there, the last few days proved that at least; but this was in front of an audience.\n\nAs he was having this thought, almost on cue...\n\n\"Get in there, dude!\" Candace pushed.\n\n\"Rub down that cunt!\" was Gianna's helpful contribution.\n\nIt certainly urged Andy on, ensuring that Cassandra's clit was well covered for sun exposure. Cassandra was in heaven. Andy was finally touching her where she wanted, and Andy was doing a hell of a job. Her legs were starting to buckle as she was about to go over the edge.\n\n\"Andy!\" Liliana yelled out. Both of them stopped and looked at her. \"Your phone is ringing, and it says \"Mom\".\"\n\n\"Shit!\" was Andy's only response as he darted toward his phone. Cassandra was now convinced there was a curse on her. She looked at Liliana and as soon as Andy was out of earshot...\n\n\"What the FUCK?!\" she bellowed loud enough for half the island to hear her, practically. Liliana just shrugged her shoulders. Sara ran over to Cassandra to try and keep her from killing the young interloper.\n\n\"Take a breath!\" Sara said, trying to ease her down.\n\n\"I need a drink!\" Cassandra declared as she was escorted quickly to the bar.\n\nAndy raced inside to get to the phone. He got it just in the nick of time.\n\n\"Hi, Mom,\" he replied slightly out of breath.\n\n\"Hi, honey,\" his mom responded, \"everything ok?\"\n\n\"Yeah, yeah. I was just in the bathroom,\" he said in explanation. \"Merry Christmas!\"\n\n\"Merry Christmas, honey! I sure miss you. Are you having fun out there?\"\n\n\"Lots,\" he said. \"Enjoying the sun and gonna head down to the pool.\" He was at least being honest about that.\n\n\"That's nice,\" his mom responded, \"make sure you put on plenty of sunscreen.\"\n\n\"Already taken care of, Mom,\" he said again honestly.\n\n\"That's my boy!\" she said as they continued their conversation.\n\nCassandra now had a drink down her and was calming down a bit. She'd apologized to Liliana, and they'd given each other a hug.\n\n\"I just wanna fuck the guy, you know,\" Cassandra said to the assembled women. Gianna and Sara sprang into action. They started rearranging furniture outside and everyone helped out.\n\n\"Well, I hope you have a great time, honey,\" Andy's mom said comfortingly, ending the call.\n\n\"Thanks, Mom. Take care. Love you.\"\n\nAndy ended the call and went to the bathroom for a quick pee. He hadn't really lied to his mom. Just avoided certain information. That's not as bad, he mused. What she didn't know, wouldn't embarrass him. He shook the dew off and headed back outside.\n\nHe was not prepared for what he saw.\n\nAll the girls were looking at him arrayed in kind of a horseshoe. In the middle was Cassandra laying down with her legs spread. She crooked her finger toward Andy, telling him to come over.\n\nAndy had a hard on quicker than ever before. It was stiff and ready. He walked over to the makeshift bed the girls had constructed. He'd lusted for her, and he wanted this.\n\nAndy got on the \"bed\" and got close to Cassandra. She had desire in her eyes. He immediately pulled her into a deep kiss. It was passionate and messy. Andy felt along her leg until he reached her pussy. It was red hot and dripping. He broke the kiss and eased himself in.\n\nCassandra was in heaven, she finally had Andy inside her, and it was worth the wait. His dick seemed to fit perfectly in her, and she loved feeling it.\n\nAndy had similar thoughts. Her pussy felt perfect. So wet and tight, he had yet another new favorite. He looked down at Cassandra and didn't see a porn star, just a woman who wanted to be with him.\n\nUnlike some of the previous encounters he'd had with some of his housemates, he took his time here. There would be no fucking to start with, this was pure love making in his eyes.\n\nThe other women were all cheering them on, but neither of the two could hear them. There may have been audience, but the two of them were the show. They couldn't hear a word; they were just there together.\n\nCassandra hadn't had this in a long time. She'd been fucked in every conceivable way during her career, but making love was rare. She realized this guy didn't want to bang a porn star, he wanted to make love to her, her the woman. The thought alone was enough to push her over the top.\n\n\"Uh, uh, ANDY!\" she wrung out as everyone was now clear that Andy made her cum.\n\n\"Nice!\" was Gianna's reaction, impressed by Andy's skill.\n\n\"Pussy magnet!\" was Alex's reaction, knowing exactly how Cassandra felt right now.\n\nAndy ignored it all and kept his focus on Cassandra. He kept a steady rhythm with her very pleased beneath him. It was passionate. There was an emotional connection here that neither had felt yet this trip. She desired him, yearned for him.\n\nHe started to increase his pace, matching the passion that was there. He felt addicted. She wasn't far off. Sure, she'd been with a lot of guys, but they were actors, or randos. She didn't give a shit about them as long as they made her look good or got her off. This was different. She wanted this man.\n\nEveryone else was enjoying the show, some giving Andy a second look at his skills. It seemed almost a miracle that no one was masturbating or trying to hook up. They were just enjoying the show.\n\nAndy was close and he knew it. He knew what he wanted. He leaned into Cassandra who was surrounded by pleasure.\n\n\"I wanna cum in you,\" Andy said quietly and innocently.\n\nCassandra looked at him with a lot of feeling. She saw his desire and had no interest in lessening it.\n\n\"I want you to,\" she responded only loud enough for Andy to hear. \"Do it.\"\n\nAndy needed no more urging. He unleashed into his partner, flooding her pussy with his load. The hard slap sent Cassandra back over again and she wasn't as reserved this time.\n\n\"YES! Flood me! TAKE IT!!!\" making it clear to all who she now thought owned her pussy.\n\nAndy came out of his orgasmic haze and saw her face. He made out with her again, keeping his cock in her as they simply embraced. It was a beautiful sight.\n\nA round of applause emerged that the two heard this time. They both looked around to see 12 naked women applauding the live sex show that they had just given everyone. They were both slightly embarrassed, Andy more so than Cassandra, but both smiled at each other over the beauty of what had happened.\n\nAndy slowly got off of her and helped Cassandra up. You couldn't've smacked the grin off of her face. She'd finally had Andy and it was as wonderful as she'd hoped it be. They walked over to the bar area for some much-needed hydration.\n\nSara was smiling at them. She was very happy that her friend had finally gotten what she'd wanted. Though she also had to admit she was a bit jealous. Sure, Andy and her had been together already and there were some tender moments there as well, but that looked so intimate. She really couldn't figure out why she felt jealous though.\n\nCharlie was half smiling. Cassandra had gotten hers and she knew her friend had been frustrated, but seriously; she was ready to have him too. It didn't need to be soft and intimate, really, she just needed a good old-fashioned dicking. Her pussy dampened as she began her own plotting.\n\nAngela and Karlee, having been the most recent recipients of Andy's cock; both were impressed he was able to go again so quickly. Like Sara, Angela was a little jealous of the intimacy that Andy and Cassandra seemed to have but put it out of her mind for now. It was Christmas after all.\n\nAlex and Natasha were happy for Cassandra. They didn't realize last night that she was trying that hard to get with him. They definitely would've invited her to join them.\n\nEveryone got drinks and started settling in. The pool was very big as was the area around it. What really got Andy's attention was the view. You could capture so much of the sea from there, it was amazing.\n\nThe girls all went around, either dipping into the pool or starting work on their tans. The speakers were blaring out party/pool music now as everyone got comfortable.\n\nCassandra was laying by the pool in bliss now. She smiled as she enjoyed the sun and her post orgasm high. All was now right with her world. She looked across the water and saw Andy looking out over toward the sea.\n\nA flush feeling came over her. She'd finally gotten hers, so why this feeling of yearning? Were two orgasms really not enough for her? This felt weird. Normally, after she'd had a guy, she'd never give it another thought. Not this time.\n\nNot Andy.\n\nAndy was enjoying his drink and saw Dillion sitting near him. He noticed that it didn't look like she had any lotion on her and that she looked bored.\n\n\"Hey, how's it going?\" Andy inquired to her.\n\n\"I'm good,\" she answered friendly.\n\n\"Do you have any lotion on?\" Andy inquired.\n\n\"No, I forgot,\" she admitted, \"that show you put on before kinda distracted me.\"\n\n\"Oops,\" Andy told her. \"Sorry,\" he added somewhat sheepishly while rubbing the back of his neck. Dillion just smiled at him.\n\n\"It happens,\" she admitted.\n\n\"Here,\" Andy offered. \"Let me get you some lotion.\"\n\nAndy left her to retrieve the bottle which was now over near the bar. He noticed it was a lot less full then when he left it there.\n\nHe returned to Dillion and handed her the bottle. She took the bottle and looked at it. Then she looked at Andy wryly.\n\n\"So, I don't get any help?\" she said with an eyebrow raised.\n\n\"My manners escaped me,\" was Andy's only reply.\n\nShe took a generous amount from the bottle as did Andy. Dillion worked on her front as Andy worked on her back. Her skin was taught and creamy.\n\n\"Enjoying island life?\" Andy asked her while rubbing her naked back.\n\n\"So far,\" she said. \"I can't wait to see more of the island.\"\n\nAndy knew there were some excursions planned in the coming days.\n\n\"That'll be fun,\" he agreed. \"Can't stay cooped up in the house the whole time.\"\n\nDillion looked over her shoulder at him smiling.\n\n\"Really?\" she mused, \"you can't stay in a gorgeous house with naked porn stars?\"\n\n\"Well...\" he led in with, \"too much of a good thing can be bad for you,\" he said with a wink.\n\nShe smiled at him as he continued. She got her face covered and started working on her chest. Her breasts may not have been as big as some of the girls in the house, but at 32D, they were bigger than they appeared. They were so cute and perky that most people thought they were fake. She was kinda surprised Andy didn't offer to do that for her, but he seemed content to rub the lotion into her back.\n\nShe actually respected that, most guys and more than a few girls always went for the obvious areas.\n\n\"So, are you having a good time here?\" Andy asked her while rubbing into her back.\n\n\"Yeah,\" she said honestly. \"Everyone here is really cool and chill.\"\n\n\"I think so,\" Andy added. Dillion liked the feeling on her back. Andy had strong hands, she thought.\n\n\"Could you put some on my legs?\" Dillion asked. Andy dutifully started putting lotion on her legs.\n\n\"You must be in heaven with all of us here,\" Dillion said somewhat matter-of-factly.\n\n\"To a point,\" Andy said, \"it's weird to have all this attention on you,\" he admitted. \"It's cool on one end and overwhelming on the other.\"\n\n\"I get that,\" Dillion admitted. \"It's kinda like being a hot girl. You know everyone is going to focus on you.\"\n\n\"Maybe,\" Andy admitted, \"it has to be a lot to always know that the attention is going to be on you.\"\n\n\"You get used to it,\" Dillion admitted. \"I've always been pretty and then when my curves started coming in, the attention got to be a lot sometimes.\"\n\n\"It's gotta be a lot of weird pressure,\" Andy said continuing to work the lotion into her legs. Dillion just turned around and looked at him.\n\n\"No other guy ever understood that before,\" she thought to herself. She initially hadn't thought that much of Andy and wasn't really sure what some of the other girls saw in him. She began to see it now and smiled.\n\n\"You should take care of my butt too,\" she said looking back at Andy, \"can't have it burn.\"\n\nAndy saw the logic \"behind\" that and squirted some lotion on each cheek. She really had a nice ass for someone her size. He gingerly started to rub the lotion in, but not as deep as he had done with her legs and back. Dillion noticed this instantly.\n\n\"You gotta work it in, Andy,\" she said prodding him. \"It won't bite.\"\n\nAndy got bolder with this and really got to work. He massaged the lotion into her toned ass, being careful not to delve into places where he hadn't been invited yet. Dillion let out some groans and moans trying to show she had no objections to what he was doing. Not only did she have no objections, but the touch was also getting her wet. She was really starting to appreciate the skill that Andy brought to the table.\n\nOnce her ass was well covered, Andy backed off assuming his job was finished. Dillion wasn't satisfied.\n\n\"You have to cover the front too,\" she said flipping herself around ensuring he had a perfect view of her breasts. \"Can't have me burn.\"\n\nAndy was hip enough at this point to know when he was being teased and he looked over the woman he was being asked to touch. Yes, she was young, but she was more than willing. And legal. He started working lotion onto her stomach, leaving nothing untouched. Dillion grew tired of this quick.\n\n\"You need to take care of my sensitive areas too,\" she said thrusting her breasts forward. Andy got the message and knew there was no pretense left. He put a healthy amount of lotion on each hand and placed them on her globes.\n\nFrom the instant he touched them, he knew their power. Maybe not as large as say Angela's or Cassandra's, but they were firm, fit her frame and were almost impossibly pert. Andy kneaded her breasts softly, but with some power. He ensured to get the underside of her breasts as well, which Dillion appreciated. He finished off the lotion that he had on his hands between her stomach and her shoulders. But Dillion wasn't done yet.\n\n\"All the sensitive areas, Andy,\" she said with a lip bite and a smile. Andy again put lotion on his hands as he began his work below her naval. She was making small noises at first, trying to encourage Andy in his work. After covering as much of the surrounding area as possible, he reached her outer lips.\n\nHer area was shaved with some stubble. Her lips were pronounced, but not overly so. He gently applied the lotion to those areas, while Dillion parted her legs a bit to accommodate. She loved his touch on her, seeming to understand why some of the others had been drawn to him. He was tender and did not rush. He unintendedly was teasing her pussy as he applied the lotion, causing her to squeal a bit. This got the attention of several of the girls around who were now paying attention to the pair.\n\nAndy began to move his hand away and Dillion was as quick to place it back. Andy looked up at her face, which was just grins.\n\n\"I don't think your done yet...\" she said while using his hands to rub her outer lips. No more pretense, Dillion made clear what she wanted. She extended two of his fingers and pushed them into her.\n\nAndy was shocked at her tightness. True, she was younger than most of the group and certainly fresher in the business; but you'd think she was still in high school. A few gentle thrusts with his fingers was all it took for her area to get damp. The lotion was foreplay and now she wanted satisfaction.\n\nAndy surrendered to the inevitable and began working at a steadier pace, adding his thumb to her clit as the sounds were getting louder from Dillion.\n\n\"Oh, God,\" she said subtly but still quite audible, \"just like that.\" Andy took that as his que to keep going. He hooked his fingers finding her g-spot with ease.\n\n\"YES!\" Dillion squealed, \"that feels so good baby!\"\n\nCassandra witnessed this and was pondering. She had just had Andy just little while ago, yet she was still feeling the pangs of jealousy. Like she had a claim over him that the others were not respecting. She stirred a bit.\n\nGianna just looked over at the two, impressed at Andy's stamina at this point, having had sex twice already today that she knew about.\n\nCharlie looked over and rolled her eyes. People kept beating her to the punch and it was really starting to piss her off. She went inside for a drink and to cool off a bit.\n\nThe Stevens' sisters looked over and just watched the show. Most of the rest of the girls did similarly just enjoying the display occurring, some rubbing themselves at the show. Angela especially, whose ass was still a bit gaped by Andy.\n\nBy now, Dillion had Andy's dick in her hand and started working it. She was impressed by just how nice it felt in her hands and rubbing over his mushroom head. Andy was now trying to make her cum, increasing his work over the g-spot. It took about 30 seconds for the effect to be complete.\n\n\"Shit!!!\" Dillion exclaimed, as Andy's hands got a tiny bit wetter. She then sat up and kissed Andy hard.",
        "\"Fuck me,\" she said into his ear, leaving no doubts as to her further consent. Andy laid her down onto the lounger and entered her.\n\nIt felt almost like a vise on his cock. If it were not for the fact that her pussy had been gushing fluid for a few minutes, he doubted it would've even gotten inside. He slowly and rhythmically began his work.\n\nDillion was in heaven. Andy's cock was nice and thick. He didn't shove himself into her, merely eased himself in. Not rough or anything really close to love making, just nice gentle fucking. Her hands instantly found his ass and she pulled him deeper into her.\n\nTo other girls around the pool, it was a beautiful show. More than a couple looked at them thinking there should be a camera around. Candace looked at them and thought how sweet and nasty the scene was all at once.\n\nDillion was coming close to the edge as Andy continued his steady plowing.\n\n\"Oh fuck, shit, shit, SHIT!!!!\" as she reached another orgasm at the talents of Andy.\n\nAndy was just trying to hold on. He normally had pretty good control, but her already tight pussy really clamped down mid orgasm. He was biting his tongue to hold back. Eventually, she eased up and he was able to maintain himself.\n\nShe than motioned for Andy to lay down on his back and she straddled him, going all the way down on his cock. She started slowly at first, putting on a bit of a show for him and possibly the girls, before she really got to work.\n\nAndy grabbed onto her firm ass as she began to ride him earnest, really going for it. She was slamming down on his cock, getting every inch into her. Her moans were audible all over the pool as no one was interested in small talk anymore.\n\nLiliana saw her friend slamming down on Andy and heard her pleasure from it. She had already been masturbating somewhat discreetly, but now she was dropping all pretense.\n\nAlex and Natasha were watching fervently as well. Both were having flash backs to last night, Andy's cock devouring their cunts and other holes. They looked at each other and decided to help the other out, diving their fingers into each other. It was a full-on show now.\n\nDillion leaned over and let Andy suck on her tits. He rolled his tongue over the nipples, causing her to throw her head back in pleasure. Andy for his part loved the feel of her breasts in her mouth. They were perky, cute, and beyond tasty. All this attention on her tits did nothing to diminish her riding.\n\n\"Oh God!\" Dillion roared as she continued to plunge down onto Andy. She finally decided she needed to do him doggy and turned herself around putting her ass up into the air for Andy. Andy got behind her and shoved himself in.\n\nNow he could clearly see everyone around the pool looking at them, although it shouldn't've come as any shock. He wasn't sure how he felt about everyone now seeing him banging someone, but then he remembered he had just done that earlier.\n\nAndy shut his eyes and continued going. Dillion was doing all she could to continue the encouragement.\n\n\"Fuck me, Andy!\" she shouted out. \"Harder!\"\n\nAndy obliged her, grabbing her hips and ramming her. Everyone around the pool liked the sight and was impressed by the effort Andy was putting forward. Cassandra was even watching, silently wishing that she had taken Andy that way too.\n\nCharlie had returned and found herself turned on watching Andy again. She leaned against the wall and started rubbing one out. At least Andy can get her off this way.\n\n\"Spank me, baby!\" Dillion demanded.\n\nAndy brought his hand down and delivered a light slap on her ass.\n\n\"Harder!\" she still wanted. He delivered a slap to her backside that could be heard on the other side of the pool\n\n\"Fuck yeah!\" Dillion said as she squeezed his cock again in orgasm. Andy couldn't take it anymore. He quickly pulled out and a few ropes landed on Dillion's ass and lower back. As he caught his breath, a round of applause broke out all around.\n\n\"Now it's a Merry Fuckin Christmas!\" Gianna yelled out during her applause. Andy and Dillion just looked around and faintly waved. Dillion than turned to Andy.\n\n\"Thanks,\" she said with a wink.\n\n\"Here to help,\" was all Andy could say catching his breath. He then saw the beautiful inviting pool in front of him.\n\n\"Guess we should clean up,\" Andy said, using his head to indicate his thoughts. She smiled and got up. They both ran toward the pool and jumped in.\n\nThe water felt amazing as they came up to the surface. Andy felt splashing from all sides as apparently many of the girls decided to follow he and Dillion's lead. Everyone started swimming around.\n\n\"The water feels great,\" Sara offered.\n\n\"Now, this is how you fuckin' Christmas!\" Candace declared luxuriating in the water.\n\n\"Nice to have your own flotation devices,\" Angela said clearly meaning her tits.\n\n\"Not a lot of potential drownings here,\" Alex said, \"except Andy!\" Charlie than came behind Andy.\n\n\"Just have to keep him safe,\" she said wrapping her arms around him and pressing her body into him.\n\n\"I guess you're the lifeguard,\" Andy said looking back at her smiling.\n\n\"You know it,\" she said returning the smile and giving him a kiss on the cheek. She really liked being close to him.\n\n\"Hey!\" Gianna said to get everyone's attention. \"Let's play a game!\" Approvals came from all quarters. It was soon agreed upon that Marco Polo would be fun. Andy was chosen to be \"it\" first. He closed his eyes and spun around for a bit while everyone got to their positions.\n\nAfter a few seconds, Andy started his searching. He didn't call out at first, wanting to see if he could get locations just by hearing the water move or any giggling at him. He heard slight giggling, but it could've been coming from the girls not playing.\n\n\"Marco!\" he said finally.\n\n\"POLO!\" he heard from all sides, but particularly toward the deep end of the pool. He moved gingerly in that direction, slow movements. He wasn't going to tempt them yet.\n\n\"Marco,\" he said quickly.\n\n\"POLO!\" from all around, but particularly loud from his five o'clock. In a faint, he moved slightly off that until he thought he had convinced whoever was there that he was going in the wrong direction.\n\nHe then suddenly lunged and got the arm of somebody. He opened his eyes and saw it was Liliana. Andy just kinda shrugged.\n\n\"You're it, I guess.\"\n\nGianna was in tears laughing.\n\n\"Girl!\" she yelled out from the shallow end, \"why didn't you move when he got so close to you?\"\n\n\"I was gonna until he went the other way,\" Liliana said giggling.\n\n\"That's what he wanted you to do,\" Angela said correctly.\n\nLiliana was now it and everyone went to hide again, including Andy. Andy sidled up to Charlie.\n\n\"Let's stay together so if she comes this way, we can bolt in opposite directions and we'd have a better shot,\" Andy whispered.\n\n\"You just wanna be close to me,\" Charlie whispered back to him with a smile. He smiled back and they stayed close.\n\n\"Marco!\" Liliana yelled out across the water.\n\n\"Polo!\" came from all around. Liliana headed to where there were more voices toward the deep end. Her hands came close to touching Karlee, but just missed her. Karlee slipped away as silently as she could, the music still going made this easier.\n\n\"Marco!\" Liliana again bellowed.\n\n\"Polo!\"\n\nShe darted to her left and her hands hit the wall. Unbeknownst to her, she'd been trying to get Whitney, but she darted out of the way. Her search continued. She started moving closer to Natasha.\n\n\"Marco!\"\n\n\"Polo!\"\n\nLiliana darted quickly and tagged Natasha.\n\n\"Motherfucker!\"\n\nLiliana just shrugged as Natasha closed her eyes. She started moving around and then heard movement out to her right. It sounded like someone getting out.\n\n\"Fish out of water!\"\n\n\"FUCK!\" came from Candace who was trying to head to the bathroom quick. \"I really gotta piss!\"\n\n\"Oh, fine,\" Gianna said resigning to the inevitable. \"We'll switch to chicken then.\"\n\nEveryone started organizing for chicken fights. Gianna would be one of the pillars and Andy the other. Sara climbed onto Gianna's shoulders as Karlee got on Andy's. Both got themselves steady as Gianna got her trash talking started.\n\n\"You two are going fuckin' down!\" she said with swagger and a smile.\n\n\"Bring it, amazon!\" Karlee said playfully, but forcefully back. Sara and Karlee then locked up, trying to shove the other off of their pillar's shoulders. Sara was holding her ground, but Karlee wasn't above cheap tricks. A boob flip was enough to send Sara crashing into the water. Gianna turned and looked at her soaked partner.\n\n\"What the fuck, woman?\" Gianna said incredulously. \"One tit flop and you go down?\"\n\nSara was also pissed that she'd been duped like that, but the next challenger was up. Britany was next and climbed onto Gianna. Andy could feel the heat coming from Karlee's pussy, obviously the adrenaline of the contest getting to her. Britany and Karlee's bout didn't last long as Britany was a little tipsy and quickly landed in the pool.\n\n\"Motherfucker!\" Gianna screamed at the top of her lungs. \"I need somebody over here who can fuckin' hang!\"\n\nAngela then came forward and the look on her face said that she wasn't messing around. Karlee looked a bit nervous seeing her friend climb on Gianna's shoulders. The heat from Karlee's pussy quickly gave way to fear. Andy held on for all his might, but it was Karlee in the drink this time.\n\n\"Fuck yeah!\" Gianna proclaimed finally victorious. \"Aussie! Aussie! Aussie!\" she exclaimed, high-fiving Angela.\n\nAndy saw the next competitor was Charlie. She looked fierce and determined. She was also really turned on to have her box on Andy's neck. She gave Andy a kiss before she got on top.\n\n\"For luck,\" she said with a smirk.\n\nThis was a pitched battle. The two were practically in a cat fight before Gianna's grip slipped and Angela went down. Charlie was practically dancing on top of Andy.\n\n\"Ok!\" came a voice from the crowd. \"Enough fuckin' around!\" was booming from Candace as she came bounding toward the pool, her tits and ass swaying every which way. Gianna had a bit of trouble getting steady with her curvaceous pal on her shoulders, but soon got balanced.\n\n\"Let's make this interesting,\" Candace said with a sly grin.\n\n\"I'm listening,\" Charlie said with her hands on her hips Peter Pan style.\n\n\"The winners are bunkmates with Andy tonight,\" she said boldly. The girls gathered around all let out various ooh's and ahh's. The look on Gianna's face clearly showed that she approved of the wager. Andy could feel Charlie's legs tighten up at the suggestion of the new wager. This was going to be serious.\n\nCandace started hard. She damn near smacked Charlie at first, to try and discombobulate her, but it didn't work. Charlie recovered and immediately started fighting back hard. What was supposed to be a friendly game turned onto a full-on catfight. The gallery assembled was cheering on the various sides. It seemed fairly even for a while.\n\nSoon, Gianna decided to up the ante and made aggressive steps forward that took Andy by surprise. He stumbled and Charlie had hooks around Candace at the same time. They both hit the water, but Charlie hit first.\n\n\"FUCK YEAH!\" Gianna exclaimed in victory as Candace came back up. Charlie was pissed, but everyone watching agreed that she had lost. She was fuming but did her best not to show it.\n\nNo need to get pissed, she thought. I'll get him!\n\nIf anything, the loss made her more determined. Candace and Gianna high fived each other and looked over at Andy with fire in their eyes. Andy was frozen by both excitement and fear.\n\nSuddenly another voice rang out from somewhere that dinner was ready. Everyone got out of the pool and dried to the best of their abilities. It was a full Christmas feast with turkey, stuffing, yams, potatoes and an assortment of other goodies. The patio tables outside were plenty large to seat everyone comfortably, so it was decided to eat outside. Andy was a gentleman and was the last to assemble his plate. Then another battle ensued.\n\nIt seemed to him like every girl wanted Andy to sit near them. Some were emphasizing their tits and some even spread their legs to get his attention. Ultimately, Andy made a smart play and sat on the end right next to Charlie. She smiled wide when he did.\n\n\"Sorry we lost there,\" Andy said contritely and sincerely. He then threw his arm around her naked body in a comforting way. If Charlie's brown skin could blush, it would've then. She smiled at him and put her hand on his inner thigh.\n\n\"Oh, I think I'll win in the end,\" she said as she used her pinkie to play with his cock hole. Everyone then settled in to eat.\n\n\"Make sure you eat up, Andy,\" Candace said a few seats down, \"you're definitely going to need the energy for later...\" letting the comment hang there for everyone else to \"ooh\" at the comment. Gianna just looked at Andy and licked her lips, as if he were a dessert to be enjoyed after the meal.\n\nThe food was excellent as always, but Andy started noticing that the girls were all even more comfortable then they had been previously. It was as if their nudity lowered all their defenses and started talking honestly with each other. They started talking about various actors they'd worked with and some of their favorite scenes.\n\n\"Do you have a favorite scene of mine, Andy?\" Charlie asked in a mockingly innocent tone.\n\n\"Uh, I'm not sure,\" Andy said trying to deflect the question. Charlie was having none of it.\n\n\"Well you've watched scenes with me in them, haven't you?\" she asked while she was lightly stroking his leg.\n\n\"Sure,\" he said trying to concentrate on his food unsuccessfully. Charlie just smiled at Andy who was obviously embarrassed.\n\n\"So?\" she said with an increasing smile and continued stroking of his leg.\n\n\"I guess the one with you and the other girl finding that you shared a boyfriend,\" Andy answered lamely and took another bite.\n\n\"Ooh, with Tessa,\" she said knowing the scene he meant. \"That was a hot one,\" as her stroking now became more of a grip.\n\n\"What about me?\" Sara deciding to chime in. Andy was still chewing, but it didn't seem to damper her efforts.\n\n\"The nature walk,\" is what Andy managed to mumble out.\n\n\"Ooh,\" she said teasingly, \"you like a naughty nature girl, huh?\"\n\n\"I ain't even gonna ask Andy,\" Gianna said in an almost glib manner, \"all my scenes are fuckin hot. Just wait until you experience the real deal!\" she said shaking her tits about. Andy was starting to lose his grip on all this.\n\n\"You got that shit right,\" Candace said, mirroring the actions of her friend. Andy wasn't sure what the two were liking more, that they were going to fuck him later, or showing off to everyone. Andy put the thought at the back of his head as he tried to again focus on the meal.\n\nAll around him, the girls were talking of various things. Pregnancy scares, STD scares, guys and girls that they had worked with that were good and total douche-nozzles. Eventually the meal came to an end, and someone decided that dance music was appropriate. The girls started moving around, swaying to the music. Cassandra came up behind Andy and tapped his shoulder.\n\n\"Dance with me, Andy,\" she said extending her hand to him. If nothing else, Andy was a gentleman and promptly got up and started dancing with her. They moved gently at first, just swaying to the music; their hands just staying on each other's waist like if they were in Junior High. Eventually, Cassandra started moving more seductively; letting her hands start to wander over Andy.\n\nCassandra was getting more turned on by the second. She was already fully aware that she was falling for this man, more so then she'd even thought last night when she was talking/fucking Sara about it. As her hands roamed, she felt like she was melting. She knew what she wanted.\n\nAll the other girls were watching their movements. Some in enjoyment, others in envy. Surprisingly, two of the most envious turned out to be the Stevens sisters. Apparently, a part of them thought that because they drew \"first blood\" that they deserved special consideration. They started making their moves toward the couple and making their own case on Andy.\n\nCassandra ceded to the sisters for now, already forming plans for the long game in her mind. The sisters were on either side of Andy, Brittany twerking her ass against Andy's dick and Whitney grooving with him from behind, being sure to push her DD's against his back. They grinded against each other while whispering to Andy.\n\n\"Did you have fun the other night with us?\" Brittany would whisper in his ear.\n\n\"You're making me all wet, Andy,\" Whitney added while starting to rub his chest. Andy was getting hard and Charlie, watching the whole ordeal, was fed up. She went over and extracted Andy as politely as possible. Then she fell into his arms as they slow danced.\n\nAndy liked the feel of Charlie against him. She didn't seem as provocative or imposing as many of the other girls. While they danced, she whispered into his ear.\n\n\"This feels really nice,\" as they continued to sway with the music. \"Do I feel good, Andy?\"\n\n\"Very much so,\" was all he was able to get out.\n\n\"I really like you,\" she whispered again into his ear, slightly blushing at the omission. \"I think we are going to have a great week together,\" as they continued dancing. \"Maybe more...\"\n\nThat was the opening salvo in Charlie's mind. The first, at least as far as she knew, person to suggest something more after this week was over. With that, Charlie took Andy into a deep kiss.\n\nCassandra watched from the side with conflicting emotions. She was happy that Charlie was finally getting some time with Andy but was also worried. Charlie wasn't the only one who had long term ideas on Andy. Alex and Natasha were looking over and thinking the same thing. They both liked Andy too, and saw what Charlie was putting down.\n\nAngela was looking over with envy as well. Their romp earlier left a definite impression on her mind, and she wanted to get closer to him. Sara wasn't much better. She'd had one hot encounter with him but wanted more. She still wasn't sure if it was Andy himself or the fact that he was the only man here. She just watched and sipped her drink.\n\nCharlie seemed immune to all the girls looking at them. She was having her time with Andy was enjoying every minute of it. She took her fingers and started playing with his hair. They were soon interrupted.\n\n\"Come on, Charlie,\" Dillion said approaching them both. \"You can't hoard Andy all night!\"\n\nCharlie acquiesced to the younger girl, feeling secure that she'd left her impression on Andy. For his part, Andy was still completely unused to beautiful women fighting over him. He kissed Charlie on the cheek and started dancing with Dillion.\n\nShe was lithe and smooth next to Andy and wanted to be as close as possible.\n\n\"I really enjoyed our talk earlier today,\" she said softly to Andy.\n\n\"Me too,\" he said while his arm was on the small of her back. Dillion thought it was cute but wanted to push him a bit.\n\n\"You can put that hand on my ass, you know,\" she said off-handedly, \"it's not like you haven't had it there before.\"\n\nAndy had to admit that it was impeccable logic and moved his hand down slightly, so it was just resting on one of her cheeks. Dillion started grooving her butt more toward his hand.\n\nDillion really was unsure about what to think about Andy. He was definitely sweet and was a really good fuck. But she was still young and just starting her career in this industry. She'd figured out that some of the older girls had other designs on him.\n\nShe wasn't wrong because even at that moment, Sara was keeping a close eye on all of this. Like Charlie and Cassandra, she really had feelings for Andy and wanted more time with him. She then figured there was no time like the present. As Dillion was whispering who knows what to Andy, Sara cut in.",
        "Whether it was recognizing seniority or just wanting a drink, Dillion turned Andy over, but not before giving him a deep kiss. Sara then thrust her DD's into him as they danced closely as well. Sara could feel Andy's cock growing against her as they danced, and she smiled. She put her head on Andy's shoulder as they danced.\n\n\"You feel good against me,\" she whispered into his ear in a sweet and sultry tone.\n\n\"I'd have to say that the feeling is mutual,\" he said a little louder than a whisper. This just made her pull him tighter toward her. She joined her hands behind him to get him as tight in as possible against her. Andy's dick was now firmly between both of their stomachs.\n\nSara certainly didn't mind, loving the feeling of his hot cock against her. True, she would've preferred if it was in her, but it would make dancing harder. She then started nibbling on his ear making his cock even harder. They just kept swaying away.\n\nGianna and Candace were looking all this and knew that Andy was now primed to go. They looked at each other and nodded. They quickly made their way through the other girls that were dancing and came up to Andy and Sara.\n\n\"Alright!\" Gianna announced so that everyone could hear. It certainly made Andy and Sara stop moving. \"Time for us to get our prize!\"\n\nSara looked at the taller women and was about ready to throw a bitch-fit. They had Andy all night and they couldn't give her until the end of the fuckin' song?! She then quickly thought that this was only the second full day and that they had a whole week still to go.\n\n\"Let 'em have their fun tonight,\" she thought, \"I'll get him later...\" she turned to Gianna. \"Try to leave some for the rest of us girls,\" she said to them both before turning around and looking at Andy. \"We do have a long, long, week ahead of us.\" She kissed him on the cheek and gave him a wink as she turned and left.\n\nAndy was on his own now.\n\nThe two started circling around him like lionesses and their prey. This made Andy a little nervous, thinking that they were just gonna pounce on him and knock his ass onto the cement. Soon to Andy's ease, they just started dancing to the music; grinding up on Andy with their equally, juicy asses. His cock had deflated a bit when he thought they were gonna knock him down, but it was regaining strength quickly. Gianna quickly spun around, facing Andy and putting her hands on his face.\n\n\"You ready for the fuck of your life?\" she asked aggressively. Andy gulped a bit but regained his composure.\n\n\"Are you?\"\n\nGianna immediately laughed out loud, as did Candace. She was impressed.\n\n\"That's the spirit!\" was all she said. She then ground her tits into him, making his body feel their heft. Candace followed suit from behind him. They were putting their full weight into it and Andy was not complaining. Gianna finally decided that if they teased him anymore, he might just splooge right there. As she had plans for that cum, she decided to break off.\n\n\"Let's go,\" she said grabbing both Candace and Andy by the hand and leading them toward the house. Candace certainly wasn't complaining, and Andy just looked back at the other girls outside. There were quite a few hoots and hollers as they all disappeared inside.\n\nIt was no time at all that all three were in Andy's suite. Candace was the first to say something about it.\n\n\"Damn! This is nice!\" she said admiring Andy's set up.\n\n\"This shit is pretty sick,\" Gianna admitted adding her thoughts. She then turned and looked at Andy, striking a pose. \"Which is better looking?\" she asked inquisitively, \"the room or these two fine bitches in front of you?\" Andy wasn't taking the bait.\n\n\"Hard to say unless you come closer.\"\n\nGianna and Candace were both impressed. Both in their professional and personal lives, they were used to being the cocky aggressors with both men and women, but Andy didn't seem to be putting up with it. Both their pussies started to moisten a bit.\n\nThey both moved to Andy and just mauled him. Both seemed intent on getting their tongue into Andy's mouth first with Candace winning that race. She massaged his tongue lightly as Gianna came behind Andy and started hoovering his neck. Andy let his hands wander down to Candace's big, firm ass and kneaded it firmly. Candace responded with pulling Andy tighter into the kiss.\n\nGianna then tapped her on the shoulder, and she took over. Gianna was far more aggressive in the kiss then Candace was, which was no surprise to Andy. Andy thought that she was trying to suck his tongue out of his mouth. Candace put a hand on both their asses and started lightly kissing both their bodies. Andy had his hands on Gianna's ass and even slid his finger around her asshole. Gianna said nothing but copied Andy's move on Andy. She didn't insert it, just playing and teasing along the rim.\n\nCandace then dropped to her knees and pushed Gianna enough out of the way to sample Andy's cock. It was sloppy and thorough as she went to town on him. Gianna got behind Candace and buried her face in her backside, which only encouraged Candace to work harder on Andy. She was full throating his cock, getting it nice and slick for herself.\n\nOnce she was convinced that it was ready, she stood up and bent over the bed. Gianna wasn't willing to surrender the first dicking that easily.\n\n\"Don't you wanna fuck me first?\" Gianna asked with her traditional flair.\n\n\"Bullshit!\" Candace said somewhat playfully. \"Come taste some black pussy!\" she said with a wink. \"It's a wild ride...\"\n\nGame, set, match and Gianna knew it. Andy lined up behind Candace and for the first time in his life, fucked a black woman. Her pussy was very warm and inviting. Maybe not as tight as Andy had come to like after fucking Dillion earlier in the day but he soon had a steady rhythm going. Gianna, not wanting to be left out entirely, shoved her cunt in front of Candace to start licking, which she accommodated.\n\nCandace for her part found herself really liking Andy's cock. Not the largest she'd ever had, but it hit all the spots that made her squirm.\n\n\"Fuck, yeah!\" she said muffled by Gianna's womanhood, \"fuck that pussy!\" Not that Andy needed the encouragement, but he slapped her ass hard and continued the assault. A few minutes later, she went over the top.\n\n\"Fuck! FUCK!!!!\" as Candace came on his cock. Gianna took that as acknowledgement that it was her turn.\n\n\"Get on the bed!\" she ordered Andy. Always being good at following instruction, he did so. Gianna quickly straddled him and then leaned over to whisper to him.\n\n\"You have no idea how good this shit is going to be,\" she said gently. With that, she impaled her pussy on his cock. While she had seen it all day, including inside at least three other people, she had to admit it felt good. Like Candace, she'd had bigger; a few of them damn near broke her in half. With Andy's, she felt nothing but pleasure. She started at trot, but quickly went to full gallop on top of him.\n\n\"Oh, fuck!\" Gianna said ramming her pussy into Andy, \"take this shit!!\" She was riding him hard and fast, placing her hands on Andy's shoulders for stability. Andy reached up instinctively for her world-famous chest and began kneading them. Gianna knew what he really wanted and placed her breast toward him mouth to allow for a suck/motorboat. Andy did both eliciting moans and giggles from Gianna.\n\nCandace watched the scene for a while before deciding to back in the game. She leaned over and kissed Andy passionately, practically trying to suck his tongue out of his mouth. Gianna smiled and kept riding while dropping a digit on Candace as she did. Candace decided to change it up.\n\nShe quickly straddled Andy's face and Andy started lapping at her pussy and asshole, tasting the juices that were flowing down to him. Gianna started making out with Candace as she continued her bouncy ride. Candace returned the kiss loving the feeling of both of her lips being busy as the two women fondled each other.\n\nSoon, Andy was feeling a familiar feeling. He tried to tell both girls, but the sound was still muffled by Candace's cunt. Candace like the feeling, but also wanted to hear what he said.\n\n\"What did you say?\" she asked as she slightly lifted off his face.\n\n\"I'm gonna cum!\"\n\nGianna immediately moved off of Andy as she wasn't real keen on a creampie. Both girls licked, teased, and stroked his dick until a cum fountain came forward. Most if it landed on Andy's stomach and the two women started lapping it up, stopping every so often for a cummy kiss.\n\n\"I gotta say,\" Gianna admitted, \"you got some game!\"\n\n\"Not bad at all,\" Candace agreed. She actually thought he was a lot better than that but kept it subtle to match Gianna. After a day full of nudity and sex, Andy was soon fast asleep.\n\nWhile all this was going on, the rest of the girls pretty much all went to their rooms and bed. Cassandra was laying in her bed deep in thought. What began as a fun game and slight competition had become something more. Up to this point, Cassandra had all but sworn off men except for scene partners. Andy had her thinking different.\n\nShe was laying there, actually thinking about a relationship with Andy beyond the confines of this trip. So many questions flew through her mind. Did Andy feel the same way? Could she make him happy? Was she really falling for him?\n\nThese were all key questions of course, but another kept creeping into her mind, even as she started to sleep.\n\nDid anyone else feel this way about Andy?\n\nCassandra's roommate Sara laid in her bed doing some thinking as well. It had been a weird two days. What she knew that no one else there knew, is that Sara had planned this trip to be one of the last things she did in the porn world. She thought she might do solo shows and maybe girl/girl, but no more boy/girl. She started thinking Andy may be the way to get out clean but wasn't sure. She didn't sleep well that night.\n\nAngela finished up her 69 with Karlee and laid together in the afterglow. Karlee was snuggled up to her, resting her head on her massive breast. Angela loved Karlee, just like a sexy, little sister. She also found her mind flowing back to this morning with Andy and Karlee in the bath. She loved all three of them together in there. A slight smile came over her face as she drifted off to sleep.\n\nCharlie was determined. Currently, her roommate Gianna was getting fucked by Andy and she was sitting all alone in her room. She knew exactly what she was going to do tomorrow. She'd spent half the night thinking about it. Slowly she dipped a hand down toward her pussy, but then immediately stopped. No masturbation for her tonight. She would be charged up for the morning.\n\nAlex was currently being fucked by Natasha doggie style with a strap-on. Natasha was pulling on her hair and slapping her ass. Alex had fucked Natasha with it first and she was really enjoying her turn. After just a few minutes, Alex's pussy gushed, and she came hard on her friend's fake cock.\n\n\"FUCK!! Oh yeah!\" Alex said as she stopped panting and collapsed on the bed. Natasha unstrapped her cock and spooned next her friend. Alex was finally breathing normal as Natasha reached around and cupped her large breast.\n\n\"That was fuckin' intense, babe!\" Alex said in her blissful state.\n\n\"You were damn good yourself!\" Natasha said sweetly into her lover's ear. \"Was it better then with Andy last night?\"\n\n\"That was amazing!\" Alex said gleefully turning to Natasha and giving her a peck on the cheek. \"I really like him.\"\n\n\"Me too,\" Natasha said with a smile. Then she turned slightly serious. \"How much do you like him?\"\n\n\"A lot,\" Alex admitted. \"What about you?\"\n\n\"Same,\" she admitted somewhat sadly. \"You think he likes us?\"\n\n\"If last night is any indication, I think so,\" Alex said playing with Natasha's hair. \"I definitely wanna spend more time with him.\"\n\n\"For sure,\" Natasha agreed. Then she had a smile on her face, \"am I gonna have to fight you for him?\" Alex smiled at that.\n\n\"Why fight?\" she stated, \"plenty for both of us.\"\n\n\"Yeah, but what if I wanna take him home?\" Natasha said, slightly startled at her own admission. Alex looked into her eyes in surprise as she was thinking along the same lines. She then grinned at her friend.\n\n\"Like I said,\" she said kissing her friend, \"plenty for both of us.\"\n\nAndy for his part was soundly asleep. Candace on one side and Gianna on the other, completely oblivious to the plans and machinations going on in the house."
    ],
    "authorname": "rumpleminty",
    "tags": [
        "anal",
        "bath",
        "pool",
        "threesome",
        "pornstar",
        "christmas",
        "group",
        "group sex"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/the-prize-day-03"
}
{
    "title": "Return to St. George",
    "pages": [
        "This story is a work of fiction. Any resemblance to any real person or institution is coincidental and unintentional. This is a sequel to my previous story \"Welcome to St. George\" and reading that story will help put this story in context.\n\n_________________________________________________________________\n\nThere had been changes on our island. The most devastating change for me was that Sara had left. Her father had suffered a severe stroke about a year earlier. She had gone to San Diego to take care of him and had \"fallen\" (her word) into running the family real estate business. We talked by phone periodically and Sara assured me that she would, eventually, return to St. George. After about nine months, I realized that wasn't going to happen. The house and my life were very empty without her.\n\nStacy Maxwell had first come to the island when the father of her college friend Joanne Long had bought a house not far from ours on the west side of the island. Stacy, Joanne, and their friends had used the house before Art Long did. Sara had encouraged a relationship between Stacy and me and she and Stacy formed a relationship. Stacy had come back to the island by herself several times while she was in law school. The three of us gave each other a lot of pleasure. A collateral benefit was that Stacy was an accomplished sailor. I had bought a sailboat not long after moving to St. George but wasn't near Stacy's level. I had learned a lot about sailing, and about other things, from Stacy. Unfortunately, Stacy was not a candidate to fill the void left by Sara. Stacy was now working hard to build her legal career. \n\nJoanne and Stacy's other friends who had come to St. George were now starting their careers, so I didn't see them anymore either. Gretchen and Beth, our neighbors from across the road, had left the island when Beth was diagnosed with cancer. While St. George had a lot of great things, the kind of sophisticated medical care Beth needed was not among them. The only positive change was that Art Long, Joanne's dad, had started using his house just up the hill from mine frequently. Art was a good guy and we had become friends.\n\nI had been very lucky in my own practice and had come to St. George with enough money that I didn't need to work. I still earned a nice amount each year from passive investments. That had been great when Sara and I were together because it had meant that we had the time and resources to do whatever we wanted. It was a mixed blessing after Sara left because I had a lot of time but nothing to do. \n\nI did volunteer to crew St. George's one rescue/patrol boat. St. George had bought a 47-foot motor lifeboat from the US Coast Guard. The boat was captained by a member of the St. George Public Safety Service, the government agency that handled customs and immigration, law enforcement, and emergency response. However, the PSS was not able to provide a full professional crew for the lifeboat. Consequently, several of us who had some seamanship ability volunteered to serve as the three crewmembers. There were about 20 volunteer crew who served under one of three professional captains in rotation. Typically, we were each on call one week a month.\n\nOne of my weeks on call coincided with a strong storm in the Atlantic. While the storm was not projected to hit St. George, we would get high winds and very rough seas. Because of the enhanced risk, the volunteers on duty that week spent the storm in the PSS barracks at the harbor in Chamberlain, only a few yards from the boat if we were needed.\n\nOur professional captain during the storm was PSS Marine Commander Antoinette Wilts, commonly known as \"Captain Toni.\" Captain Toni was, in my opinion, the best of the three captains. She was an outstanding boat handler with excellent judgment and courage, but she was also easy to work with and would listen to us amateur volunteers. In return, we volunteers busted our asses when Captain Toni was at the helm. During that storm, the other crew were Bob Heddrick, who ordinarily captained a tour boat around the island, and Steffi Williams, who was a nurse at the island's clinic. Bob and Steffi were good people. \n\nEveryone had plenty of advance warning about the storm. Consequently, I didn't expect that we would be called out. Surely, the only vessels out would be the very large commercial vessels that typically operated far enough offshore to be out of our range. Absent a desperate emergency, any problems with those vessels would be handled by the better-equipped and fully professional services on nearby islands. I expected to wait out the storm in the PSS barracks.\n\nMy expectations were wrong. We got the call while the center of the storm was at its closest to St. George. A private sailboat needed help about eight miles east of the island. Captain Toni, Steffi, Bob, and I quickly put on our life vests. In compliance with St. George's mandatory nudity laws, the vests and deck shoes were the most we ever wore. That was just as well because the rain was coming down as almost a solid sheet of water. A small fringe benefit was that Steffi had a nice ass.\n\nWe got underway quickly, but it was very rough outside the harbor. While the boat could go very fast, we made slow progress against the waves and water. We had brief radio contact with a woman on the sailboat, but we lost that. Captain Toni headed for the sailboat's last known position. Because the weather kept pushing us off course, it took the better part of two hours to reach the area where we thought the sailboat should be. The problem was that, with the weather and the darkness (it was about 1:30 a.m. when we reached the sailboat's last reported location) we couldn't see more than a few feet from the boat. The searchlight was useless. Captain Toni repeatedly ran the lifeboat's siren in the hope that the people on the sailboat would hear it a fire a flare or do something to help us find them.\n\nWe finally found the sailboat by pure dumb luck. We almost ran over it. Captain Toni had to turn hard to avoid hitting it then carefully brought us back alongside. Two women were standing in the deck, which was awash. There was no mast in sight. It wasn't until we were about two yards away that I realized that the women had been yelling the whole time. \n\nWe fixed a line to a life vest and I dove over the side. I swam to the sailboat and strapped the vest around the younger woman. Bob reeled her the short distance through the waves to the lifeboat. Timing the wind gusts perfectly, Bob tossed the vest back to me and we repeated the process with the older woman. I was about to abandon the sailboat when a man appeared on deck. I have no idea where he had been, but I waved for Bob to throw the vest and line back again. Unlike the women, the man seemed hostile, but I got him into the vest and Bob reeled him onto the lifeboat. I took a small risk by free swimming back to the lifeboat myself. \n\nOur lifeboat had a small amount of space inside the small cabin and below deck. Steffi took the three people we'd rescued inside while she did a preliminary medical exam. Fortunately, none of the three were really hurt, although the man seemed very angry. \n\nGoing with the wind, the trip back in was much quicker than our trip out. We learned that we had rescued a family. The man, whom I guessed was in his mid-sixties, was Karl Harlow. We also rescued his wife Julia, whom I guessed to be in her forties, and a girl named Sandy, whom I guessed to be between 18 and 23. Julia told us that they had chartered the sailboat in Guadeloupe. We did not ask then what they had thought they were doing out in that storm.\n\nWe were about twenty minutes out from the dock when Julia, seemingly largely recovered from her ordeal, said, \"May I ask you something?\"\n\n\"Sure,\" I replied.\n\n\"Why is it that none of you are wearing any clothes apart from your life vests?\" Julia asked.\n\n\"We're with the St. George Public Safety Service,\" I replied. \"A few years ago, St. George enacted legislation making nudity mandatory for everyone on the island at all times.\"\n\n\"That's cool,\" Sandy said.\n\n\"Where are you taking us?\" Julia asked.\n\n\"To our dock in the harbor in Chamberlain, St. George,\" I answered.\n\n\"Uh, does that mean that we have to go naked?\" Julia asked.\n\nKarl, who had said nothing to that point, growled \"Fuck that!\"\n\n\"Not necessarily,\" I answered. \"If you want to move around the island, yes you must be naked. However, if you would prefer to stay clothed, the government runs a shelter at the airport. We can have a PSS van take you there and you can stay there until you can get a flight off the island. I know that sounds a bit harsh, but it is the law.\"\n\n\"How often are there flights?\" Julia asked.\n\n\"Ordinarily,\" I answered, \"there's a flight daily; although they are often sold out. I don't know how the storm will affect the air service.\"\n\n\"What's on St. George?\" Sandy asked.\n\n\"We have a number of beautiful beaches which are wonderful when it's not like this,\" I answered. \"Chamberlain has high-end duty-free shopping and a number of excellent restaurants. There are several five-star resorts on the island, and a casino near the airport.\"\n\nJust then, Steffi interjected, \"We're only a few minutes from the dock. Would you please let me know if you wish to remain clothed so we can radio ahead for a van to take you to the airport?\"\n\n\"No one's taking clothes off,\" Karl growled. \"Fucking heathens!\" I thought that I saw disappointment in Sandy's face.\n\nCaptain Toni brought us to the dock as gently as if it was a calm day. We helped the Harlows off the boat and into our barracks to await the van to the airport. In the somewhat better light of the barracks, I concluded that Julia Harlow was a handsome woman and that Sandy was borderline beautiful. Their clinging wet clothes disclosed that both women had very nice figures.\n\nInside the barracks, Captain Toni, Steffi, Bob, and I took off our soaked life vests. Julia commented, \"It is surprising how much more naked you all look without those vests on.\"\n\nSandy said, \"You guys have great tans. Do you all live here?\" We all four nodded affirmatively. \"So, you never wear clothes?\" she asked.\n\n\"Only if we go off of the island for some reason,\" Steffi answered.\n\nCaptain Toni went to her office to write her report. Bob went to monitor the radio. I asked, \"Does anyone want coffee?\" Julia and Sandy both said, \"Yes, please.\" Karl just shook his head. Steffi helped me bring out four mugs of coffee.\n\nAs I handed mugs to Julia and Sandy I unwisely asked, \"How did you come to be out in the storm?\" Julia grimaced slightly and shifted her eyes towards her husband and then back. \n\nKarl growled, \"Goddamned weather warnings are always exaggerated. Bitch called for help when I had it under control.\" I thought Karl was delusional. The storm warnings were not exaggerated, and he hadn't had anything under control.\n\nKarl didn't say anything else. However, Julia and Sandy were very pleasant. I learned that the Harlows were from Columbus, Ohio where Karl owned a construction company. Julia had been a banker until she married Karl three years earlier. Sandy's father, Julia's first husband, had been killed several years before that while deployed with his Army reserve unit in Afghanistan. Sandy was a varsity diver at a well-known university in the Midwestern US. \n\nJulia, Sandy, Steffi, and I had become reasonably friendly by the time the van arrived to take them to the shelter at the airport. Before they left, I wrote down Steffi's and my cell phone numbers (St. George had and has very reliable service all over the island that was compatible with North American phones) on a slip of paper and handed it to Julia. \"I hope that you get to wherever you are going without any problems,\" I said, \"but, if you need anything while you're on St. George, please feel free to call Ms. Williams or me.\"\n\nJulia took the slip of paper, ran her eyes over my bare body, smiled, and said, \"Thank you Harry. It was nice to meet you.\"\n\nSandy added, \"Yes, thank you so much. I'm sorry that we can't stay on St. George.\" Karl spit and the three of them followed the PSS officer out to the van.\n\nOnce they had gone, Steffi said, \"I'll bet that the women would have gotten naked and stayed but for the husband.\"\n\n\"Folks from Ohio?\" I asked rhetorically. \"I doubt it.\" With that, I put the Harlows out of my mind.\n\nThe storm had passed by that afternoon and Steffi, Bob, and I went home. Bicycling from Chamberlain to my house, I didn't see much damage beyond a few limbs down. However, I had heard before I left the harbor that the east side of the island had suffered much worse. Once I had satisfied myself that nothing had happened to my house, I went up the hill to check on Art's place. I was sure that he'd expect me to and would call to find out if he'd suffered any damage. \n\nWhen my phone rang just after sunset, it wasn't Art calling. When I answered, I heard, \"Harry Stone? It's Julia Harlow. We're at the airport but it has been damaged and they're telling us that it may be several days before it is open again. Uh, well, uh, Sandy and I talked, and we agreed that we want to get out of this 'shelter.'\"\n\n\"You realize. . . .\" I started.\n\n\"Yeah, I know, we have to take our clothes off,\" Julia said. \n\n\"What about your husband?\" I asked.\n\nIn a hard voice, Julia said, \"Karl is staying here.\" I'd made another misstep. I heard what sounded like Julia taking a deep breath. \"Where should we stay?\" she asked in a more normal tone.\n\n\"I know a few of the hotel and resort managers,\" I said. \"Give me your number. I'll call you back when I've found you a place.\"\n\nI started calling my friends at the hotels. That quickly became frustrating. Several of the larger hotels were, naturally, close to the airport and had also suffered damage. The largest, part of an international chain, had moved its guests to other properties. In short, there were no vacancies on the island.\n\nAfter about 45 minutes of calling and a bit of begging, I was forced to call Julia Harlow back with my negative report. \"Shit!\" she said. \"Sandy and I have had all we can take of this so-called shelter. We're fucking prisoners here.\" Julia was quite agitated. \n\n\"Well,\" I said, \"This may sound bad, but I've got a guest room and this side of the island wasn't hit at all. You're welcome to stay here.\"\n\n\"God! Thank you,\" Julia said. \"What is your address? Can we get a cab from here?\"\n\n\"Don't worry about a cab,\" I said. \"I'll come and get you. Give me about 45 minutes.\" I ended the call, got out the \"carriage bike\" with a back seat where two people could sit side-by-side, and started peddling towards the airport.\n\nThe shelter at the airport really was a holding cell, although it did not have bars on the windows or doors. Anyone who refused to undress when they arrived in St. George was kept there until they were transported off the island. Since almost everyone came to St. George for the purpose of vacationing in the nude, the shelter did not get much use. Those rare times when it was used typically involved people, like the Harlows, who had arrived on St. George involuntarily. \n\nThe shelter was a small concrete block building on a far corner of the airport. As I pedaled through the airport grounds, I was surprised by how much more damage had occurred there than on my side of the island. Even though it was night, I could see a small army of people working under temporary lights to clear the runway and taxiways to get the airport back in service.\n\nAt the door to the shelter, I had to show my island ID card, which I kept in a small card holder held around my left wrist with Velcro, to a young lady wearing only her PSS cap and sandals. Her dark skin suggested that she was one of the minority of people in St. George descended from the island's original inhabitants. After checking my ID, she let me through the outer door into an anteroom. There, a young man dressed in his PSS cap, sandals, and a gun belt unlocked a second door. The young man followed me into the inner room.\n\nThe main room at the shelter was spartan. There was a table and a few chairs, four cots, and a refrigerator in one corner. Along one wall were four small windows just below the ceiling. The opposite wall had a plain, unmarked door which I assumed led to a bathroom. While I assumed that the shelter was air-conditioned, the room was uncomfortably warm.\n\nJulia and Sandy Harlow, dressed in the clothes they'd worn when we rescued them, came up to me.\n\n\"Thank you so much for coming,\" Julia said. \n\nSandy gave me a quick hug and a peck on a cheek. \"Yes, thank you so very much,\" she said. I saw Karl Harlow sitting in one of the chairs. He just stared at me.\n\nWith some trepidation about what I was getting myself into with these people, I asked \"Are you ready to go?\"\n\nThe PSS officer with me cleared his throat. \"Ladies, you must remove all of your clothing before I can allow you out of this room,\" he said.\n\n\"We know,\" Julia replied. She bent down and slowly started to remove her shoes. Sandy, on the other hand, swiftly whipped off the tee shirt she was wearing and unfastened her bra. Sandy's breasts, highlighted by her tan lines, were not large but were in proportion to her slender body. They looked firm and Sandy's small nipples looked erect. Topless, Sandy bent over and slid off the deck shoes she was wearing. She straightened without hesitation. Her blue eyes beneath her wavy light brown hair gleamed. She smiled, reached down, and undid the top of her shorts. She hooked a thumb into the waistband of her shorts at each hip and pushed them and her panties down her long legs to her ankles. Sandy stepped out of her shorts and stood naked making no effort to cover herself. She looked very nice.\n\nSandy's unhesitant disrobing seemed to give Julia confidence. She pulled her shirt over her head and dropped it on the concrete floor. As she reached behind herself to unfasten her bra, I could see beads of sweat in the valley between her breasts. A moment later, Julia's breasts were completely uncovered. Julia had much larger breasts than her daughter. Not surprising for a woman her age, Julia's breasts sagged slightly. Julia's nipples also appeared hard.\n\nJulia looked at Sandy, then looked at me. I noticed that she did not look at her husband who was sitting behind her. Julia took a deep breath, unbuttoned her shorts, and pulled down the zipper. Wearing only a pair of cotton panties, I could see that Julia's hips were wider than Sandy's. Julia's legs were shorter and her thighs bigger than her daughter's. Still, Julia Harlow was a very attractive woman.\n\nJulia took another deep breath. She grasped the waistband of her panties at each hip and slid them off, bending forward as she pushed the panties down her thighs and calves. When her panties reached the floor, Julia straightened and took a step back. \"We're ok?\" she asked her daughter.\n\n\"We're great!\" Sandy replied with a smile.\n\nJulia turned to me. \"Am I properly dressed to visit St. George?\" she asked.\n\nLike most people, Julia Harlow looked much better naked than clothed. \"Quite properly,\" I replied. \"The two of you will enhance the beauty of our island,\" I added.\n\nFrom his chair, Karl Harlow uttered one word: \"sluts!\"\n\nThe PSS officer had stepped away. He came back with two heavy gauge plastic bags which he handed to Julia and Sandy. \"For your clothes ladies,\" he said. \"Please remember that it is not legal to wear any clothing at any time while you are on St. George.\" To me, the officer said, \"We've already checked their passports. They are free to go.\" The officer asked Julia and Sandy, \"You have other bags?\"\n\n\"I was with Captain Wilts when we took them off of a foundering sailboat early this morning,\" I explained. \"Their bags are gone.\"\n\nTo the women, the PSS officer politely said, \"I'm sorry.\"",
        "\"Ready?\" I asked Julia and Sandy.\n\nJulia turned towards Karl. \"Are you sure that you won't come?\" Julia asked her husband.\n\nKarl simply spat again.\n\nJulia turned back to me with a sad and embarrassed look on her face. Sandy reached out and put a hand on her mother's bare shoulder. Sandy glanced at Karl with a look of distaste, then turned to me, smiled, and said \"We're ready.\"\n\nThe male PSS officer held the door to the room open as Julia, Sandy, and I walked through. The female PSS officer in the outer room opened the outside door. \"We're so glad that you've chosen to enjoy St. George,\" she said brightly to Julia and Sandy. \"I'm sure that you will find that being naked is much preferable to being clothed,\" the officer added.\n\nOutside, Sandy exclaimed \"You came on a bicycle?\"\n\n\"Yes,\" I answered. \"With only a few exceptions, internal combustion engines are banned on St. George. Most of us use bicycles to get around the island. It helps keep us in shape.\" \n\n\"It's worked for you,\" Sandy said. She and her mother got onto the bench seat on the rear of my bike.\n\nAs I started to pedal away from the shelter, Julia said, \"I want to apologize for Karl. Our marriage hasn't been working well. This trip was Karl's idea to try to work things out. But he just must be in total control. He won't listen to anyone. He chartered the damned sailboat in Guadeloupe and wanted to sail to Antigua. Everyone knew that a bad storm was coming. But Karl insisted that we had to go when we did, or he'd have to return the boat without going to Antigua. He said that the news always makes storms sound worse than they really are. He almost got us killed but for you and the other people on your rescue boat. Once we got to the shelter, he cursed me for radioing for help. He said that he had it handled. The mast was gone, and the boat was sinking!\"\n\nJulia gave one short sob. \"When we were at the shelter, Sandy said that she wanted to see St. George. She said that it would be fun to be some place where we had to go naked, Karl called her a 'whore' who just wanted to be 'fucked by a nigger,'\" Julia said.\n\n\"It isn't the first time he's called me a 'whore,'\" Sandy said placidly.\n\nJulia was getting a little worked up venting about her husband. \"Yeah. Karl thinks that the swimsuits Sandy wears in competition are too revealing. He's said that she should dive naked since she 'obviously wants to show her cunt to everyone.'\"\n\nI kept quiet. I didn't know these people well. It certainly was not my place to comment on Julia's husband or her marriage.\n\n\"Anyway,\" Julia went on, \"when Sandy said that she wanted to see St. George, I started thinking and decided that it might be fun and even, maybe, a little sexy to run around naked. I mean, it's not like anyone here knows us. That really pissed Karl off. He called me a 'sick pervert.' Karl thought this trip would help our marriage. It's only reinforced my determination to get out.\"\n\nThis was a conversation which I thought it unwise to join. To change the subject, I started playing a bit of tour guide, describing the part of the island we were passing through. Julia remained quiet for the remainder of the ride. Sandy asked an occasional question. I think she was trying to be polite.\n\nAs we arrived at my house, Sandy said, \"Your house doesn't have any walls?\"\n\n\"It does,\" I replied, \"but they retract. I usually leave the house open to get the sea breezes. I'll close the walls around the guest bedroom for you.\"\n\nJulia broke her silence. \"Good god am I tired,\" she said. \"I haven't slept since night before last.\"\n\n\"Have you eaten?\" I asked.\n\n\"No,\" Sandy replied, \"they didn't offer us anything but water at the shelter.\"\n\n\"I can fix some quick sandwiches if you like. You can eat them while I set up the guest bedroom,\" I said.\n\n\"That would be wonderful,\" Julia replied.\n\nI quickly made some ham and roast beef sandwiches and set them out with some fruit, a pitcher of ice water, and an open bottle of cabernet. While Julia and Sandy ate, I moved the walls to enclose my guest bedroom. When the women had finished their light meal, I showed them how to lock themselves in and pointed out the small washroom with a commode and sink that was accessible without unlocking the bedroom door. Sandy gave me a peck on my cheek and said, \"Thank you Harry.\" The women went into the bedroom and I heard the deadbolt set.\n\nI was up reasonably early the next morning. I boiled some eggs, sliced some mangoes, and prepared a plate of cold meats and cheeses for the women to eat when they got up. When I finished that task, I went out and sat in one of the Adirondack chairs on my back patio, looking out on the Caribbean.\n\nAround 10:00 a.m., Sandy came out on the patio. I got a better look at her than I had before. She was slender but appeared well muscled. Her longish thighs were very firm, but not thick like a gymnast's. Her breasts were roughly grapefruit size with upturned nipples. Her stomach was flat with visible muscle. Sandy wore her hair at a length below her ears but above her shoulders. Her large blue eyes had a look of good-natured amusement. She had a small, upturned nose and a few freckles on her cheeks. The 'girl-next-door' look was, however, belied by very sensuous, sexy lips. She had very pronounced tan lines around her breasts and around her pubic triangle.\n\n\"Good morning,\" Sandy said as she walked out onto the patio. \"I need to lose these tan lines,\" she said, \"they draw attention to my tits and my mound.\"\n\n\"That's a problem?\" I asked.\n\nSandy giggled. \"No, I guess not,\" she said as she sat in the chair next to me. \"How much of this is yours?\" she asked as she looked around the small cove my house sat on.\n\n\"I own everything from the road to the mean high tide line,\" I said gesturing towards a small stake on the beach. \"From there out to the twelve-mile limit belongs to St. George. However, we rarely get people coming through here. There's a family beach just around that point,\" I concluded gesturing towards the point on the south end of the cove.\n\n\"What do you mean by 'family beach?'\" Sandy asked.\n\n\"Uh, well, the current culture of St. George has influences from the indigenous people and from the 'hippies' who came here in the 1960s,\" I replied. \"The natives did not have the European taboos about sex and the folks who came in the Sixties and early Seventies brought the 'free love' thing. In other words, sex has always been open and public on the island. When the island started to market itself as a tourist destination, they realized that most tourists would come from North America and would find the public sex offensive. Therefore, public sex was outlawed except for a couple of 'adult beaches' and the Garden. All of the other beaches, where open sex isn't allowed, are called 'family beaches.'\"\n\n\"What is the Garden?\" Sandy asked.\n\n\"It is this very large park in Chamberlain that was established back when St. George was a colony,\" I answered. \"Since independence, the government has kept it well maintained, but sex is allowed anywhere within the park. It is all strictly consensual, but, if you're in the park, it is assumed that you are willing to have sex. Half of the park is for heterosexuals and the other is for same-sex interactions. It is also understood that anyone may watch anyone else.\"\n\n\"Wow!\" Sandy exclaimed. \"Doesn't anyone worry about STDs?\" \n\n\"Yes,\" I said. \"There are free condoms available at several locations in the Garden and most of us who live here get tested at least monthly.\" I shifted to my left and pointed at a small green dot on my right hip. \"A dot in that location with the current month's color tells everyone that you've been tested this month and are clean.\"\n\nSandy giggled. \"So,\" she asked, \"how often do you go to the Garden and the adult beaches?\"\n\n\"I've been celibate for just over a year,\" I admitted.\n\n\"Why?\" Sandy asked. I briefly explained the situation with Sara. When I was done, Sandy asked \"Why do you have the dot then?\"\n\n\"I guess that I don't want to admit to myself that things have changed,\" I replied.\n\n\"How long were the two of you together?\" Sandy asked.\n\n\"Almost sixteen years,\" I answered.\n\n\"That was pretty shitty of her to leave after you'd built this house and everything,\" Sandy said.\n\n\"No,\" I said, \"I understood. It was family initially and once Sara got to California and took over her dad's business, she found an outlet for her competitiveness that she'd been missing here. I think that she came to think of being down here as being on the sidelines.\"\n\n\"Pretty damned nice sidelines if you ask me,\" Sandy said. \"I can't believe that you aren't bitter about her leaving.\"\n\n\"I'm not happy about it,\" I said, \"but she has to live her life. I can't control it for her.\"\n\n\"Do you still talk?\" Sandy asked.\n\n\"Yeah, we talk on the phone about once a month,\" I replied.\n\n\"Is she seeing someone out there?\" Sandy asked.\n\n\"I assume so,\" I replied. \"Sara is very gregarious and wants people around her. She also loves sex. But she has had the decency not to mention any boyfriends to me.\"\n\n\"That's sad,\" Sandy said. She stood up. \"Do you do yoga?\" she asked.\n\n\"No,\" I answered.\n\n\"Damn. Then you don't have a yoga mat, do you?\" Sandy said.\n\n\"Actually, I might,\" I answered. \"Sara did yoga for a while and had a mat. Let me see if it's among the stuff she left.\" I got up and went off to search through the large closet where I carefully kept the things Sara hadn't taken with her or asked me to ship to her later. Indeed, there was a yoga mat. I brought it out and handed it to Sandy.\n\n\"Thanks,\" she said. \"I feel sluggish if I don't do my yoga in the morning.\"\n\nSandy spread the mat on my patio in front of the chairs and began some warm-up positions. I made a point of staring off to the south. After a few minutes, Sandy said, \"Harry, it's ok if you look. If I was bothered about you seeing me, I'd have gone somewhere else.\" I looked. As Sandy went through her routine, she was fully exposed to me. My appreciation for her beauty was growing rapidly. I was trying hard to make sure something else wasn't growing and wasn't completely successful.\n\nAfter about a half hour of yoga, Sandy stopped. She had worked up a sweat which added to her sexiness. \"I know that people do yoga in the nude,\" she said, \"but I never have before. This is great! Now, I'm going to be unhappy having to wear clothes in my class at home.\" Sandy glanced down at my semi-erection and then looked up and smiled at me. \"Where's your shower?\" she asked.\n\nI pointed to the outdoor shower at the side of the patio. \"There are soap, shampoo, and towels in that cabinet,\" I said.\n\nSandy's smile broadened. \"Another thing I haven't done before: shower outside. This is becoming a trip of firsts.\" She went over and started her shower.\n\nAs Sandy was showering a few feet away, Julia came out onto the patio. Julia was heavier, shorter, and older than her daughter; but I saw a clear resemblance. Julia glanced at the mat and at Sandy in the shower and said, \"I guess she did her yoga?\" I nodded. Looking around, Julia said, \"This is nice. Is it yours?\"\n\n\"Yes, above the mean high tide line,\" I answered.\n\n\"How long have you been here?\" Julia asked. \n\n\"Almost fourteen years now,\" I said.\n\n\"You live here alone?\" Julia asked.\n\n\"For the last year or so, yes,\" I answered.\n\n\"Oh,\" Julia said. I was glad that she dropped it. Telling Sandy about Sara had been depressing. I didn't want to go through that again.\n\nSandy finished her shower and walked towards us as she toweled off. \"Mom, showering outside is wonderful. You have to try it,\" Sandy said.\n\nJulia smiled. \"I will,\" she promised.\n\nI served the women the breakfast I had prepared, although it was more of a lunch now. Afterwards, I asked what the women wanted to do. \"I slept a long time,\" Julia said, \"but I'm still pretty worn out. It's been a trying couple of days, physically and emotionally. I think I'll just sit here this afternoon and do some thinking. I'll probably go to sleep early again tonight.\"\n\n\"That's fine,\" I said. \"I'll bicycle up to town later and get some fresh fish to grill for dinner.\"\n\n\"Before you do that,\" Sandy asked, \"can we take a walk along the beach?\"\n\n\"Certainly,\" I replied, \"but you're going to need sunscreen. You don't want to burn any of those white bits.\" I handed Sandy a tube of sunscreen. I kept them all around the house. I was hoping that Sandy would ask me to put sunscreen on her back, but she asked her mother.\n\nA few minutes later, Sandy and I were walking around the point onto the family beach. There was a decent crowd for a weekday in August. There was a mix of older people, a few folks my age, a few people with children, and even a few teenager/twenty-somethings. Of course, everyone was nude.\n\nWe had walked the length of the beach when Sandy said, \"I've never been to a nude beach before, so I hadn't thought about it, but it just seems more sensible for everyone to be naked on the beach.\" She paused. \"The sun and breeze over my entire body sure feels better than wearing a swimsuit.\"\n\n\"Have you skinny-dipped?\" I asked. \"Being in the water nude feels even better.\"\n\nSandy giggled. \"Once at a quarry during freshman year, but I was a bit drunk.\"\n\n\"You want to swim?\" I asked. \"We can dry off as we walk home.\"\n\n\"Sure,\" Sandy said. We walked into the warm sea water. The water was pretty shallow, and we had to go a way out before we were waist deep. At about that point, Sandy turned to look back at the beach. Just as she did, an unusually large wave knocked her off balance. She fell into me. I caught her and our bare bodies touched for a couple of moments. Sandy smiled at me. \"Thank you, Harry,\" she said.\n\nWe went further out and swam for twenty minutes or so before we went back to the beach. Brushing the water out of her hair, Sandy said, \"Damn, that's ruined me. Now, I'm never going to want to wear a swimsuit again, and I'm on a swim team!\" Sandy reached out and took my hand. \"Ready to head back?\" she asked. We walked naked, hand-in-hand, back around the point to my cove.\n\nI grilled fresh fish to feed Sandy and Julia that night. They both went to bed early. I sat up for a time, trying to read but thinking about the afternoon. I found myself becoming very attracted to Sandy and recognized that was ridiculous. She was only here by accident and she was probably 25 years younger than me. Being lonely warps your thinking.\n\nI always slept with the walls around the master bedroom retracted, so the next morning was not the first time I had been awakened by someone just walking into my bedroom. I heard a male voice saying, \"Sleeping in buddy?\" It took me a second to place it as my neighbor Art Long.\n\nI had met Art's daughter Joanne before I met him. Partly from Joanne's description but mostly from my own prejudices, I had assumed that Art would be an obnoxious, domineering rich guy. When he started coming to the island with his much younger girlfriend Miriam, I learned that my assumption was grossly in error.\n\nArt was, indeed, very wealthy. He and another man owned a company which created and managed private equity funds from Manhattan. However, Art was not at all pretentious. He was down-to-earth and very knowledgeable on a wide range of subjects. While I found Miriam to be shallow, Art and I had become pretty good friends.\n\nWaking and gathering my senses, I sat up and asked, \"How'd you get here? The airport's closed.\"\n\n\"Not as of this morning,\" Art replied. \"We flew the company jet in this morning. A big CA jet took off just after we cleared the runway.\"\n\n\"Where's Miriam?\" I asked. Art never came to St. George without his girlfriend.\n\nArt gave a rueful smile. \"Miriam traded me in on a younger model,\" he said, \"son of a big-time real estate developer in the City. The father's a bastard, but the son might be ok.\" \n\nSandy and Julia walked in just then. I climbed out of bed and made introductions. I also explained, briefly, how the two women came to be on the island and staying with me. To Julia, I said, \"Art says that the airport is open now.\"\n\nJulia started out of the room and then stopped. \"Shit. I can't call him. Karl lost his phone with the boat. Sandy and I had ours in our waterproof fanny packs, but Karl left his in the galley.\"\n\n\"I can call the shelter,\" I said. \"They'll let you talk to him.\" It took me a few minutes to find the number for the PSS \"clothed persons shelter\" at the airport. When I called, I was told that Karl Harlow had been released onto the Caribbean Air flight that left for Miami that morning. I reluctantly shared that information with Julia and Sandy.\n\nSandy seemed unfazed, but Julia was pissed. \"That bastard left the island without even telling me, and left us here?\"\n\nSandy put an arm on her mother' shoulder. \"Mom, it's ok. I think it is working out better this way.\"\n\nI took Art aside and quickly explained what I knew of Julia's and Karl's rapidly unravelling marriage. \n\nStepping back to Julia and Sandy, I asked, \"When were you planning to go home?\"\n\n\"Sunday,\" Julia said. \"School starts for Sandy the week after next.\"\n\n\"Where are you going?\" Art asked.\n\n\"Columbus, Ohio,\" Julia said.\n\nTaking his cell phone out of a small pouch he had slung over his shoulder, Art said, \"Let me check on something.\" He talked softly on his phone for a couple of minutes then made a second call. I overheard Art end that call with \"I'll be back in the office Monday.\"\n\nTo Julia, Art said, \"I can stay a few days and my pilot won't mind, she loves St. George. She doesn't mind diverting to Columbus on our way back to New York. I can give you a lift if you like.\"\n\nArt has a personal magnetism. Julia's face brightened considerably. She looked at Sandy, who nodded. Julia said, \"That would be wonderful. Thank you very much.\"\n\nArt said, \"It looks like this side of the island got off easy, but I still need to check the house. How did Chamberlain come through the storm?\"\n\n\"No damage at all,\" I said.\n\n\"Why don't we take these two to dinner tonight?\" Art asked.\n\n\"Naked Crustacean?\" I asked, that was indisputably the best restaurant on St. George.\n\n\"Works for me,\" Art said.\n\n\"Be here at six?\" I asked.\n\n\"You got it,\" Art replied. He left.\n\n\"What was that about?\" Sandy asked.\n\n\"Art and I just agreed to take the two of you out to dinner at the finest restaurant on the island,\" I replied.\n\n\"Oh boy,\" Sandy said, \"going out to a restaurant naked. Another first!\"\n\n\"Art seems nice,\" Julia said.\n\n\"He is a great guy,\" I replied. \"I've known him for several years now. He has that house which you can barely see up the hill there,\" I said pointing.\n\nSandy and Julia had lost everything they weren't wearing when their boat had foundered Sunday night/Monday morning. I let them go through some year-old toiletries which Sara had left to see if they could find anything useful. Julia obviously did because, when she came out of the guest room just before Art arrived that evening, she had fixed herself up. She looked very nice, and I said so.\n\nJulia smiled, twirled once, and said, \"Do you like my dress?\" She was, of course, naked.\n\n\"That is the best outfit you could wear,\" I said. Julia smiled.\n\nSandy stepped out of the guestroom. \"And what about me?\" she asked, smiling. All she had done that I could notice was brush her hair, but Sandy didn't need to do anything to look great.\n\nI said, \"Your outfit is simply stunning.\"\n\nSandy's smile widened. She ran her eyes up and down my bare body. Then, she looked me straight in the eyes and said, \"Thank you. You look pretty good too, Harry.\"\n\nAt the restaurant, Julia and Art sat on one side of the table while Sandy and I sat on the other. I'm not the most perceptive of men, but I thought that there was some sort of spark between Julia and Art that night. Regardless, we had a great meal. Art told some interesting stories. I told some boring ones. We had a lot of laughs. It was the most pleasant evening I had spent since Sara had left the island.",
        "Back at my house after dinner, Art said \"I'd love to show Julia and Sandy mountain park tomorrow.\" Mountain park was the island's nature preserve in the hilly center of the island. It was a tropical paradise. I glanced at Sandy. She gave a very slight shake of the head.\n\n\"I haven't checked the boat yet,\" I said. \"I'm pretty sure that it's ok, but I need to go to Chamberlain tomorrow to do that.\"\n\n\"I'd love to see a boat that actually floats,\" Sandy said. \"May I go with you?\" Sandy was obviously trying to let her mother and Art go to the preserve by themselves.\n\n\"Of course,\" I answered.\n\nTo Julia, Art said, \"It's just us. Would you do me the honor of accompanying me to the park tomorrow?\"\n\n\"I'd love to,\" Julia replied.\n\nThe four of us had a glass of wine before Art left and Julia went to bed. Sandy and I walked out onto the patio. There was a nice breeze blowing in from the sea. \"Mother is my best friend,\" Sandy said, \"and I know her pretty well. She's interested in Art. Is he really ok?\"\n\n\"Yes,\" I replied, \"I've known Art for years now. I'd trust him in any situation.\"\n\nSandy laughed. \"Mother may be disappointed if he's too trustworthy.\" Sandy stepped closer to me. \"Thank you for a wonderful evening,\" she said. She gave me a quick kiss and went inside.\n\nSandy and I biked up to the harbor the next morning. My boat looked ok. \"Would you like to go out on her?\" I asked.\n\n\"I'd love to,\" Sandy replied.\n\nWe picked up some food and wine at the harbor deli. I motored out of the harbor and raised sail when I was in open water. I made course for a small cove on the north east side of the island, about 30 minutes away. We were the only boat in the cove that Thursday. I anchored and we swam for a while in the clear water before getting back onboard, drying off, and eating lunch. This time, Sandy did ask me to put sunscreen on her back.\n\nWe each savored a second glass of wine sitting on deck after lunch. I was pleased that Sandy no longer seemed concerned about keeping her legs together. I thought that a woman this wonderful must have a boyfriend at school. I wondered what he was like.\n\n\"You're wondering about my personal life,\" Sandy said, reading my mind. \"You told me about yours, so it's only fair that I tell you about mine. I'm currently 'unattached.'\"\n\n\"My god, why?\" I asked. \"I'm not real familiar with your school, but I can't imagine they have any more attractive girls there than you.\"\n\nSandy laughed. \"Thank you, Harry. I just find men my own age a bit immature. Maybe I'm too defensive, but it seems to me that the guys are primarily interested in what is between my legs. I hope that I'm good at sex, but I think that I'm a whole lot more than just a vagina. Also, school and diving take a tremendous amount of my time. If I don't fuck up this year, I'll get my bachelor's in finance with high honors and I think I have a shot at winning the conference in ten-meter platform. I don't really have time for a superficial relationship.\"\n\nI was already impressed with Sandy. As our conversation that day covered a wide range of topics, I realized that she was a highly intelligent and informed person. It didn't lessen my opinion of her that we shared many likes and dislikes. However, her comment about being unattached had me harboring unrealistic ambitions again.\n\nWe stayed in the cove talking longer than I had planned. By the time I had the boat tied up in the harbor again and we had biked home, it was dark. To my surprise, the house was empty.\n\nAbout fifteen minutes after we got home, Sandy's phone rang. I heard her say, \"we must have been out of range.\" \"Yes, it was a great time. How was your day?\" \"Oh, really?\" \"Well have fun.\" Ending the call, Sandy said, \"That was Mom.\" With a slightly wicked grin, Sandy added, \"She's staying at Art's tonight.\" I raised my eyebrows. Sandy said, \"No, that's good. I'm certain that nothing's happened between Mom and Karl for a long time. She needs to get laid.\"\n\nAs I was fixing dinner, Sandy walked into the kitchen holding a book. \"That's a hell of a library you have,\" she said. \"How many books to you own?\"\n\n\"Three thousand and twelve,\" I answered. \"I counted them after Sara left.\"\n\nSandy held up a copy of Kerouac's \"On The Road.\" \"I've heard about this. May I borrow it while I'm here?\" Of course, I agreed.\n\nDespite my hopes, Sandy slept in the guest room that night. Julia stayed at Art's for the rest of the week. I took Sandy around the island including a stop in Chamberlain to buy some clothes for her trip home. \"That's novel,\" she said, \"shopping for clothes stark naked. I like it.\" Unfortunately, while I thought that we were becoming close, Sandy slept in the guest room for her entire stay. I liked her too much to risk suggesting otherwise.\n\nJulia and Sandy were still nude when they boarded Art's plane that Sunday morning. Because it was at the private jet terminal, I could walk out to the plane with them. Before she went up the steps to the plane, Sandy hugged me and gave me a kiss full on the lips. \"Thank you, Harry Stone,\" she said. She winked. \"We'll stay in touch.\" I didn't really hold much hope of that.\n\nOnce Sandy, Julia, and Art had taken off, I realized fully how much I had enjoyed the week. I'd lost the hollow feeling I'd had since Sara left. It was back now.\n\nI was sitting on the patio that night, drinking wine and remembering the week, when my phone rang. It was Sandy. \"Well, we got to the house here in Columbus and Karl was gone. He left Mom a pretty insulting letter saying that he was divorcing her and reminding her that he owned the house before they married so she has to move out. What a jerk. I'm heading to my apartment at school tomorrow. Mom has some friends in Indianapolis whom she can stay with. It will be nice to have her closer but not too close. And, Harry, thank you very much.\" We were about to end the call when Sandy said, \"Wait! What is your e-mail address?\" I told her.\n\nI began receiving daily e-mail from Sandy. Many were short, just telling me what she had done that day. I tried to say something interesting in response but being interesting is a challenge for me. Some were more substantive. I learned that Julia and Karl had negotiated a separation agreement that provided Julia with a large lump-sum cash settlement. I learned that Julia had leased a townhouse in Indianapolis but drove down to see Sandy at school regularly. I also learned that Julia had made several trips to New York to see Art.\n\nIn mid-October, I received an e-mail from Sandy that had attached a picture of her in a form-fitting red one-piece swimsuit. She looked very nice. Her message was \"First meet of the season. The rule book says that I have to wear a suit. Yuk.\"\n\nI took a small risk in my reply: \"You look almost as good in the suit as you do nude. Good luck. Please let me know how you do.\"\n\nA few hours later, I received a reply to my reply which said. \"You're sweet. Won platform AND 3-meter board.\" About a month later, I got an e-mail from Sandy attaching a picture of her standing at the edge of a diving board with her back to the camera. She was nude. She wrote, \"Snuck in after practice last night. Heidi shot this. You've seen it before and I'm glad of that but thought you'd like a reminder. Invitational starts tomorrow.\"\n\nThe next e-mail of note was in mid-December. \"Exams next week. Wish me luck. Coming to St. George with Mom and Art for Xmas. Can't wait to see you.\" I was excited and panicked. On one hand, I did want to see Sandy very much. On the other hand, I still doubted the wisdom of getting involved with someone so much younger. I was also afraid that I'd disappoint her.\n\nI called Art to confirm that he, Julia, and Sandy were coming and to get Julia's phone number to find out what kind of Christmas gift I get for Sandy. I hadn't talked to Julia since she'd been on St. George, involuntarily, in August. The first thing she said to me was, \"Harry, I owe you something. I was in a bad place last summer and being on a sinking boat with my asshole ex-husband seemed to be rock bottom. You saved my life. You introduced me to the joy of going nude, and you introduced me to Art Long. Art is a very special man.\"\n\n\"You had the courage to take your clothes off,\" I said. \"Art is a very good man, but if you and he have connected, it's not because I introduced you but because you've recognized each other as special people. Hey, what should I get Sandy as a Christmas gift?\"\n\nJulia answered, \"Harry, I don't know whether you realize it, or even want it, but my daughter has fallen for you in a big way. I know that there is a significant age difference between you and Sandra; but I don't think that matters as much with Sandra as it would with most girls. It obviously isn't my decision, but 'll be honest with you: I'm hoping that you and Sandra form a lasting relationship. What should you give her? She talks about you every time she and I talk. Just being there for her will make her happier than anything.\"\n\nNone of that reduced my anxiety or gave me any practical advice. I did finally get Julia to make some specific gift suggestions which I immediately ordered. I did visit a Chamberlain jewelry shop where I found a necklace with a diamond pendant which I thought would look good on Sandy.\n\nSandy, Julia, and Art came in on December 23. Thankfully, my gifts, including small gifts for Julia and Art, had arrived. I was waiting naked on the tarmac as Sandy came off Art's plane. Of course, she had undressed on the plane. Sandy hugged me tight and we shared a long kiss. Her first words to me were: \"Yet another first for me: A Christmas with no clothes on.\" She took my arm and said, \"And I'm glad I'm spending my first naked Christmas with you.\" We walked inside for her to clear immigration.\n\nAfter the three of them were formally \"admitted\" to St. George, Art came up to me and said, \"Joanne sends her regrets. I invited her to come along, but she's spending the holidays with her boyfriends and his parents in Boston. I think that is getting serious. But I know that she misses St. George.\"\n\nJulia, of course, stayed with Art. Sandy stayed with me, but she slept in the guestroom that night. On Christmas Eve, I made her dinner. We drank some wine and, much later, walked nude, holding hands, the beach. Back at the house, Sandy hugged me tightly and we shared a long kiss. She giggled and walked off to my guest room with an exaggerated wiggle of her beautiful bare ass.\n\nAt Art's request, I had arranged for the Naked Crustacean to cater Christmas dinner at Art's house. I was friends with the owners. They did a great meal. We exchanged gifts after dinner. I think that Sandy was expecting the things her mother had suggested to me. However, the necklace seemed to surprise her. She was sitting next to me when she opened it. She gasped, looked at me for a moment, and then gave me another long kiss. I put it around Sandy's neck and fastened it. The diamond hung between Sandy's bare breasts. She looked exquisite. Her smile was the most beautiful thing of all.\n\nDinner had been around mid-day. It was still light when Sandy whispered to me, \"We need to let Mom and Art celebrate alone.\" Sandy and I walked down the hill to my house holding hands. When we got there, Sandy said, \"Give me a minute to put the necklace some place safe. Wait.\" She went into the house for a moment and came back out. She took my hand and led me onto the beach. She stopped a few feet short of the sea. The sun was almost touching the water. Sandy put her free arm around my waist and drew me towards her. \"I've got one more gift for you Harry, I hope you like it.\"\n\n\"What's that?\" I asked stupidly.\n\n\"Me,\" Sandy said in a very sexy voice. She turned her right hip towards me and pointed to a small yellow dot. \"You'll never need to go to the Garden,\" she said. She put both hands on my bare ass and pulled me into a tight embrace. I put one hand on her bare ass and the other on her bare back and held her tightly. We kissed for a long time. Sandy was rubbing herself against my dick. When we broke the embrace, Sandy knelt in front of my semi-erection. \"That looks good,\" she said. She kissed the head of my dick and ran a finger up the underside of my shaft. \"I have a place you should put that.\"\n\n\"Lie back,\" I said. Sandy lay on the sand on her back with her legs apart. I got down on all fours between her legs and licked up the inside of her left thigh. When I reached her vulva, I kissed it and then began licking Sandy's clit. She inhaled sharply. After letting me lick her for a few moments, Sandy said, \"Harry, in, please?\"\n\nI moved up so that I was over her and slid my dick into her very wet pussy. \"God, that feels good,\" Sandy said. \"Can we stay like this forever?\" I began moving my dick back and forth inside of her. \"That feels better,\" she said as she wrapped her long, strong legs around me. I lowered my head and kissed her. As I was penetrating her pelvis, her tongue penetrated my mouth. Before long, she began bucking her hips. I took that as a cue to thrust faster and harder. Sandy gently bit my lip. She used her legs to pull me into her as her pelvic muscles gripped around my dick, making me push harder. I could see sweat on Sandy's face and felt sweat breaking out on me. I looked in Sandy's eyes. What I saw was the most beautiful sight I've ever seen. She clamped down on me even tighter and started to grunt. I was pushing into her with all the force I could summon. I knew that I would come soon. Between grunts, Sandy said, \"Let . . it . . . go . . . in . . . me.\" She made a sound like \"arrga\" and arched her back. At that same moment, I exploded into her. I lost vision for a second. Sandy grabbed my head with both hands and pulled me to a fierce kiss. \n\nEven though I had come, I continued thrusting my dick inside Sandy's vagina. She hadn't said anything about stopping and her body was still responding. Sooner than I'd expected, Sandy grunted, \"oh . . . my . . . god . . . another . . . ONE!\" She arched her back again. She slid her head down my neck and bit my shoulder.\n\nSandy finally relaxed. I was still inside of her but was no longer pushing. I raised my head and torso up to let her breathe. Her eyes were closed. After a long moment, she opened her eyes and looked directly into mine. \"I love you,\" she said.\n\n\"I love you too,\" I responded. We kissed again, much more gently. The sun was down, and it was dark when I rolled off Sandy and lay next to her on the beach. It was a clear, starry night. \"That is how you're supposed to celebrate Christmas.\" Sandy said.\n\n\"You are a very special woman,\" I said. \"That was the best lovemaking experience I've had.\"\n\n\"I know I shouldn't ask this, but, better than Sara?\" Sandy asked.\n\nI thought for a second. \"Yes,\" I said, \"better than any with Sara.\"\n\n\"So, you'll keep me?\" Sandy asked.\n\n\"Be careful what you wish for,\" I said.\n\n\"I know what I'm wishing for,\" Sandy replied, \"and I hope that I've got it.\"\n\n\"You do,\" I said.\n\nSandy and I lay side-by-side naked on the beach for a long time. We finally got up and walked back up to the house. We shared the outdoor shower. While there was a lot of exploring each other's bodies, we did get the sand off. We toweled each other off. I sat down in one of the Adirondack chairs and Sandy sat in my lap. After a few minutes, Sandy asked, \"Harry, do you have Skype?\"\n\n\"No,\" I said.\n\nSandy laughed. \"You do know what Skype is?\"\n\n\"I do,\" I said with mock indignity.\n\n\"Can you get it?\" Sandy asked. \"That way we can talk and see each other once I'm back at school.\"\n\n\"I know that some people on St. George have it,\" I said, \"so, yes, I'll get it.\"\n\nA bit later, Sandy said, \"I'm tired. You wore me out.\" She stood up and took my hand as I stood up. Sandy led me to the master bedroom. \"No more guest room,\" she said.\n\n\"Do you want me to close the walls?\" I asked.\n\n\"No,\" Sandy said, \"I'm safe with you and I don't care who sees us together.\"\n\nWhen we were both in bed, Sandy began stroking my dick. \"I'm not trying to fuck again,\" she said, \"but I want to try something I've heard about.\" She easily got me hard. She got on top of me and used her hand to guide my dick into her. \"Let's see if we can just sleep this way,\" Sandy said. I put my arms around her.\n\nSandy was still on top of me and I was still inside her when we were awaked the next morning by Art's voice saying, \"Someone else got lucky too.\" I opened my eyes to see Julia and Art standing naked beside our bed. With just a thin sheet over us, there was no mistaking the position Sandy and I were in. Sandy opened her eyes and smiled at me. Then she leaned up and kissed me.\n\nI knew that Julia was open-minded, but I was a little nervous to be lying in front of her in coitus with her daughter. Both of the Harlow women must have mind-reading ability because Julia said, \"Relax Harry. You're the first guy Sandra has met whom I've been hoping would make love to her.\"\n\nSandy made no move to break our intimate connection as Art asked, \"So, what does anyone want to do today, besides sex?\"\n\n\"We can take the boat out,\" I suggested.\n\n\"Can we have sex on the boat?\" Sandy asked, smiling.\n\n\"I've had a bad experience with boats recently,\" Julia said, \"but sex makes it worth the risk.\"\n\n\"In that case,\" Art said, \"I promise that there will be sex.\"\n\nSandy and I got up and made a light breakfast for the four of us. That involved a lot of touching and rubbing against each other. So did fixing some sandwiches to take on the boat. \n\nIt was a beautiful tropical day and, as we bicycled into Chamberlain, there were a lot of people out. As required by law, everyone was completely naked. Julia said, \"Before we were brought here in August, I'd have died if I'd been naked outside with strangers. Now, I'd be angry if someone told me to get dressed.\"\n\n\"You just like to show off Mom,\" Sandy said teasingly.\n\n\"Well, yeah,\" Julia responded.\n\n\"Beauty like that should be shown off,\" Art said.\n\n\"So should a dick like that,\" Julia said, nodding her head towards Art.\n\n\"I prefer Harry's,\" Sandy said.\n\nArt laughed. \"Now I'm hurt,\" he said.\n\nMost people on St. George have a boat and many of our visitors rent boats. It seemed like most of those boats were out that Boxing Day. The cove where Sandy and I had stopped in August was full. I knew that there was another cove a few miles on that was guarded by a small mangrove island. People didn't go there either because they didn't see it or because they were deterred by the narrow channel into the cove. There was only one boat there. Like us, it had two couples aboard. We waved to each other and I anchored as far from the other boat as possible.\n\nThe four of us swam for a while. Julia and Art sunbathed on the small beach while Sandy and I hiked around a bit in the surrounding woods. Apart from the folks on the other boat, there was no one around. A bit later, we all swam back to my boat for sandwiches and some wine. \n\nIt was a very warm day. The heat, the wine, and the recent end to my celibacy had, I guess, my mind focused on sex. The sweat between Sandy's and Julia's breasts seemed incredibly erotic. Art and I were sitting in the cockpit sipping our wine when Sandy and Julia went forward to chat about something in private. Although Julia's was a bit larger and softer, both women were presenting luscious bare asses to us. I heard Julia laugh and saw her nodding her head. Then she called out, \"Boys, would you come up here and help us with something?\"\n\nArt and I went forward. As I stepped next to Sandy, I asked \"What do you need?\"\n\nSandy reached out a hand and grasped my dick. \"Sex,\" she said, \"I'm horny. So's Mom.\" I didn't need any further encouragement to pull Sandy to me and begin fingering her clit. Soon, Sandy was wet, and I was hard. \"On your back,\" Sandy said. I laid down on the deck. Sandy straddled me and squatted down. When she got low enough, she used her hand to guide my dick into her. Glancing to my left, I saw Julia starting to ride Art about two feet away.",
        "Sandy was as good on top as she was underneath. She soon bent down so that I could lick one of her nipples. I let Sandy set the pace and she took it slow. Having Sandy on top gave me a better view of her face when she sat up. Sandy's face was beautiful all the time, but the look which she got on her face during sex was the most beautiful, and arousing, thing I've ever seen.\n\nMore than once, I noticed Sandy glance over at her mother on top of Art. I think that she found it arousing that she and her mother were both having sex within a couple of feet of each other. Frankly, it was. Whether that was the cause or not, Sandy and I were into what we were doing, and we were enjoying it. We were in no hurry.\n\nMy shoulders got a bit raw from rubbing against the deck, but that was a worthwhile sacrifice. As I heard Julia start to grunt, Sandy accelerated her pace. I helped as much as I could by pushing up into her. Between the sight of Sandy losing herself in our lovemaking and the great things she was doing with my dick, I was soon on the verge of coming. As I came, Sandy arched her back and emitted a scream that must have been heard in Chamberlain. Immediately after her scream, Sandy collapsed onto my chest panting as if she'd just finished a sprint. I put my arms around her and held her. When her breathing slowed some, Sandy kissed me. We lay like that for what seemed a long time, until we heard applause from the other boat. \n\nSandy and Julia stood up. They looked at each other for a moment and started laughing. They hugged, then turned to face the other boat and took a bow. I glanced at Art, who said, \"Harry, I think that we both found keepers.\"\n\nJulia turned back to Art and me. \"That was a blast,\" she said. \"We need to do that again.\" None of Sandy, Art, or I disagreed.\n\nUnfortunately, Sandy, Julia, and Art were flying back to the States on New Year's night. While I'd been invited to a couple of New Year's Eve parties, Sandy wanted to spend the night with just the two of us together. I fixed her dinner and, afterwards, we sat on the patio and talked. Sandy had brought out my watch and checked it periodically because \"I want to start the year with us making love. That's what the new year will be about.\" About 11:50 p.m., we started kissing and fondling each other. Sandy was on her back on the beach and I was thrusting into her when we heard fireworks around the island indicating that a new year had begun. It was the best start to a year that I'd ever had.\n\nI walked with Sandy to the steps to Art's plane. Sandy, Julia, and Art were still nude. Sandy and I hugged tightly and kissed. Sandy reached down and squeezed my dick. \"I love you,\" she said.\n\n\"I love you too,\" I replied. Whether it was smart or not, I did love Sandy. I still do.\n\nSandy turned away. I longingly watched her beautiful bare back disappear into the plane. I'd felt hollow when Sandy had left the island in August, just after I had first met her. That was mild compared to what I felt as she left that New Year's night. I suspected that I was being damned foolish hooking up with a woman less than half my age. But Sandra Harlow was simply too great to let go. "
    ],
    "authorname": "HStoner",
    "tags": [
        "mandatory nudity",
        "public nudity",
        "public sex"
    ],
    "category": "Exhibitionist & Voyeur",
    "url": "https://www.literotica.com/s/return-to-st-george"
}
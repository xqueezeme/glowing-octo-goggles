{
    "title": "Written Down",
    "pages": [
        "Author's Note: Any and all persons engaging in any sexual activity are at least eighteen years of age; there is no underage sex in any of my stories.\n\nDisclaimer: This story has been edited by myself, utilizing Microsoft Spell-check. You have been forewarned; expect to find mistakes.\n\nTwo days after the mild confrontation between Todd, Monty and herself, Becky was sitting on her couch, cowboy hat on her head, black dress boots on her feet. She had ordered a second vibrator, a glass vibrator, and wished she'd spent a few extra dollars to have the toy shipped overnight. She reached for her cell phone.\n\n\"Cal's Western Wear; Callie speaking,\" a pleasant sounding female answered the phone.\n\n\"Yes. I um, uh, hi, I uh, I bought some boots other night? Really cute guy helped me?\" Becky stammered, even subconsciously putting a hand over her bald mound as she spoke with this unknown female.\n\n\"Douglas?\" Callie suggested.\n\n\"Yes! That's it; he there,\" Becky asked, spreading her legs slightly as she thought of the handsome blond man.\n\n\"Be in 'bout five,\" Callie said. \"I'll tell him you called, okay?\"\n\n\"Thank you,\" Becky said and terminated the call.\n\nBecky had that odd, slightly off-center feeling in her belly as she thought of the really cute salesman, Douglas. Becky picked up the vibrator again and brought it to the mouth of her pussy. Suddenly, she had a thought.\n\n\"Uh. DUH! Be a lot easier if you'd told her your name,\" Becky slapped her forehead, knocking her hat off her head.\n\nShe picked up the Stetson and placed the hat over her pubic mound, then hit the 'Send' button twice to redial the number for Cal's Western Wear.\n\n\"Cal's Western Wear; Callie speaking,\" Callie answered.\n\n\"Yes, it's me again. Tell him Becky called,\" Becky giggled.\n\n\"Will do,\" Callie chuckled. \"Got a phone number, Becky?\"\n\nBecky gave the woman her phone number, disconnected the call and put the hat on her head again. She spread her legs again. She thought she should add batteries to her next Burns & Burns grocery order.\n\nThey'd opened a Burns & Burns grocery store in the building that used to house the old Early's Grocery Store. Because her mother worked at the Burns & Burns in Oakleaf, Texas, Becky enjoyed a 'family discount' for the grocery chain. She also liked the fact that Burns & Burns would often suggest substitutes for any items that they were out of; Super 1 Foods did not offer that service. If Super 1 was out, they were out. It was up to the customer to request substitutes.\n\nAt seven fifty that evening, Becky squealed when her phone rang. She fumbled with it for a moment, then answered. Again, she had that odd, tight feeling in the pit of her stomach; it had only diminished slightly over the few hours since her first call to Cal's Western Wear.\n\n\"Hi, Becky? Hi, this is Douglas,\" Douglas's pleasant, masculine voice spoke, sending shivers up and down Becky's spine.\n\n\"Hi, um, I uh, I don't know if you remember me, I, it, think it was Tuesday,\" Becky said, sitting down hard on her couch.\n\n\"Bought the red riding boots and the black dress boots?\" Douglas guessed.\n\n\"Got them on right now,\" Becky admitted, flexing and looking at the black boots on her feet. \"The black ones.\"\n\n\"Know, we still have a pair of the brown ones, size seven, right?\" Douglas suggested.\n\n\"Not really a fan of brown,\" Becky admitted.\n\n\"Oh. Oh, and the riding boots, got those in black and think, no, no, out of the white,\" Douglas said.\n\n\"Want to come over for supper?\" Becky interrupted. \"I mean, it probably won't be as good as chili and Ramen noodles, but...\"\n\n\"But what is?\" Douglas laughed. \"Yeah, I'd love to. Let's see, oh! I'm off tomorrow night; how 'bout that?\"\n\nBecky gave Douglas the address, got his cell number and confirmed that he had no food allergies. Then she rapidly tapped out a grocery order. She smiled as she remembered to add a four pack of C cell batteries as well as Double-A batteries for the glass vibrator that was being shipped to her address.\n\nBecky debated with herself about what to wear for her date with Douglas. She asked herself what would impress the handsome blond man, what would send the right message to him. She knew she would wear the cowboy hat with black band and black stiletto heeled boots and black belt with Silver Star buckle. But, what should she wear in between hat and boots? For a moment, she even entertained the idea of wearing nothing between boots and hat.\n\n\"Damn, Becky, really?\" she asked herself as she did pose, nude except for hat and boots in front of her bedroom mirror. \"Know you like to fuck, but damn, you some kind of a slut now?\"\n\nThat tight, off-center feeling was monumental in her belly. Becky felt horribly off-balance as she posed nude in front of the mirror. She turned and looked over her shoulder and smiled; she looked good coming and going.\n\nBecky knew, by her dad's standards, by her mom's standards, yes, she was behaving like a slut. Since Rory had plucked her cherry, Becky had engaged in sex with a total of eight men, and one woman.\n\n\"Oh, come on, like I am so sure Mom and Dad were virgins when they met?\" Becky asked herself, shrugging off the feelings of guilt and shame.\n\nWith that, Becky bent to the task of selecting her outfit for the night. A pink and blue and orange patterned snap button blouse went on over Becky's black lace bra and a pair of boot cut button fly jeans went on over her black thong panties. She threaded the belt through the loops and again posed in front of her mirror. She unsnapped the first two buttons of her blouse; that gave a goodly hint of her cleavage.\n\nBecky prepared the Thai peanut chicken soup and a pineapple vegetable stir fry with fried rice. When a black pickup truck slowly drove along the street, then braked for a long moment in front of her house, Becky felt her heart beat a little harder, felt her pussy get moist, and felt her belly get tight. Then the truck slowly pulled into her driveway.\n\nDouglas got out of the truck, black cowboy hat on his handsome blond head. Becky admired the black denim work shirt and black jeans as he strode to her front door, paper bag in hand.\n\nBecky was glad of two things when she opened the door. One, that she was wearing her five inch heels; Douglas was six feet two inches in his socks. His three inch heels made him tower over her, even with her boots.\n\nAnd she was glad she had a pair of panties on; the crotch of her blue jeans would have looked like she'd peed in them otherwise. Douglas was nearly model handsome as he smiled at her.\n\n\"Oh! You aren't seeing anyone, right?\" Becky suddenly thought to ask.\n\n\"Yes,\" Douglas laughed. \"Hell of a time to ask that, but, yeah, between class and work, I just haven't had time to get a girlfriend.\"\n\n\"Oh, what you in school for?\" Becky asked, leading them to the kitchen.\n\n\"Good God, that smells great,\" Douglas said, pulling a bottle of wine out of the paper bag. \"Didn't know what you were making, but figured white goes with just about anything, right? Even chili and Ramen noodles.\"\n\n\"Eww, all right? Chicken and veggies; white's perfect,\" Becky agreed. \"Soup's just about ready.\"\n\n\"And, I'm at the Vo-Tech; studying to be an electrician,\" Douglas said, quickly using the offered corkscrew to open the bottle.\n\nOver their meal, Douglas revealed that Cal's Western Wear was going out of business. The business was in a bad location; very little traffic in the area. Cally refused to do any substantial advertising so few people were even aware of where we are. The Corona Virus just made a bad situation even worse.\n\n\"But, know what? Made me get off my ass, start doing something about my life,\" Douglas confessed. \"Otherwise? I'd be the world's oldest minimum wage worker.\"\n\nOver coffee and ice cream with a brown sugar bourbon glaze that Layla had showed Becky how to make, Douglas and Becky shared their first kiss. Both laughed when their kiss caused their cowboy hats to fall off of their heads.\n\nWithout his hat on, Becky saw how curly Douglas's blond hair was. She also saw his deep brown eyes more clearly. He had a square face, with a strong nose and strong jaw. She could see he had a light brown five o'clock shadow; she'd assumed it was the shadow of the hat giving his jaws that darker cast.\n\nHats out of the way, they shared another kiss. Becky opened her mouth and Douglas did not hesitate to force his tongue into her mouth.\n\n\"Oh my God; I think I'm about to cum,\" Becky thought to herself as they kissed.\n\n\"Mmph!\" she grunted into Douglas's mouth when his hands went from her slim waist to her heavy breasts.\n\n\"I'm not a slut,\" Becky declared as she savagely pulled her snap buttons open.\n\n\"Uh huh,\" Douglas agreed as he unbuckled her belt.\n\n\"But you better fuck me,\" Becky demanded, trying to wiggle out of her jeans without removing her boots.\n\n\"Where's your bedroom?\" Douglas demanded, scooping Becky into his muscled arms.\n\nOnce on the bed, Becky saw she had no choice but pull the boots off, unless she wanted their first fuck to be with her jeans and panties bunched up around her knees. She wiggled out of her clothing, then assisted Douglas out of his jeans.\n\nDouglas had a thick six inch erection. Becky saw that he was uncircumcised as she bent and took him into her mouth.\n\nWhile her head bobbed up and down on his thick meat, Douglas played with Becky's large breasts, her large areolae and hard nipples. Becky grunted in orgasm when Douglas ventured giving her left nipple a hard pinch.\n\n\"Here, I, oh damn,\" Douglas groaned and pumped his semen deep into Becky's throat.\n\n\"Mm-hmm,\" Becky groaned, savoring each spurt.\n\nWhen he finished spurting, Becky rolled from her knees onto her back. She spread her legs wide and Douglas returned the favor. He started with long slow licks from anus to the top of her wet slit. Then, he added his fingers to the oral attention.\n\n\"Oh thank God he knows how eat pussy,\" Becky groaned to herself as Douglas licked and fingered her pussy.\n\nWithin three minutes, Becky was grunting and bucking, pushing her pussy hard against Douglas's face. She tensed when he suddenly pulled his mouth from her pussy.\n\n\"Aieegh!\" Becky screamed out as Douglas shoved his renewed erection into her pussy.\n\nThey kissed hungrily, mashing their crotches together almost savagely. Douglas gripped Becky's breasts in his large hands, squeezing and mashing them as they pounded against one another.\n\n\"I'm, about, where you want...\" Douglas grunted.\n\n\"Pill,\" Becky wheezed. \"Come in me.\"\n\nThey both trumpeted in mutual orgasm. Becky clung tightly onto Douglas as his sperm blasted deep inside of her. Douglas held himself up; trying not to fall and crush the diminutive girl beneath him.\n\n\"God!\" Becky finally wheezed out. \"You're a great fuck. Know that?\"\n\n\"Yeah?\" Douglas gasped out. \"Well, you ain't half bad yourself.\"\n\nDouglas rolled to Becky's left and lay on his side, facing her. He now gently touched her flesh, her waist-length brown hair, her face. They kissed softly.\n\n\"Be right back; got to potty,\" Becky suddenly said, wiggling out of the bed. \"Bathroom's right there if you need it.\"\n\n\"What?\" Douglas laughed. \"Then where you planning on going?\"\n\n\"Other bathroom, smarty pants,\" Becky called out.\n\nBecky went into the guest bedroom and scampered to the guest bathroom. Inside of the bathroom, she pulled the enema bag from underneath the sink and quickly prepared an enema.\n\n\"This, ugh, oh God, this is always the worst part,\" Becky grunted out loud as she worked the nozzle into her protesting rectum.\n\nAfter flushing the toilet, Becky located the jar of petroleum jelly. She looked at her reflection in the large bathroom mirror as she prepared herself for anal sex. She did think she made quite an erotic sight as she thrust the three greasy fingers in and out of her light brown hole.\n\n\"Hey, was getting kind of lonely,\" Douglas smiled when Becky sauntered into her bedroom again.\n\n\"Aw,\" Becky said as she paused long enough to pull her boots on.\n\nScrambling onto the bed, Becky knelt and stroked Douglas's semi-erect cock a few times. She then bent and wormed her tongue between his foreskin and cockhead. She swallowed his cock down her throat until her nose pressed against his light brown curls.\n\nWhen Douglas was fully erect, Becky swung her leg up and over, straddling his hips. She looked over her shoulder at his handsome face as she wiggled toward his feet.\n\n\"Hope you like doing it up the butt,\" Becky said as she gripped his cock in her left hand, her right butt cheek in her right hand.\n\nBoth Becky and Douglas groaned as she lowered herself onto his erection. Becky watched his handsome face contort as the blunt head of his cock pressed against her resisting anus.\n\nThat first jolt, that first stab of pain was always so delicious. Becky had to turn and concentrate as she fed his thick meat into her tiny rosebud.\n\nTodd's cock was just a little longer than Douglas's cock, but Douglas had a nice girth. He also had a thick vein along the underside of his cock. She could feel his thick foreskin curling as more and more of his blunt cockhead pushed upward into her.\n\n\"Oh, oh God yes,\" Becky grunted as the thick ridge of his foreskin pushed upward into her.\n\n\"Ugh, oh God, Becky,\" Douglas groaned as he watched her tiny anus flower open to accept him.\n\n\"Aieegh!\" Becky screamed in painful orgasm when she'd worked half of him into her.\n\nShe released her hold on his cock; he was trapped within her now. She pulled both buttocks apart, trying to ease his travel. She could feel each millimeter as it pushed into her.\n\n\"Oh God, oh God,\" Becky groaned; he was quite wide of girth.\n\nThat last inch seemed to just 'pop' into her and Becky sucked in a great lungful of air. Then she sat, shuddering as all of Douglas Gueydan was deep inside of her guts.\n\nBecky leaned forward slightly. She could feel his cock bending with her movements; all of her nerve endings seemed to be focused in that one area of her body. Then she rocked back slightly.\n\nWith one wiggle from side to side, Becky began the slow, laborious task of rising up. She used her thigh muscles, her abdominal muscles to force herself up. Her yoga exercises seemed to be paying off.\n\n\"Oh, God, I love...\" Becky groaned as she let herself fall down again. \"Shit! Love it up the butt.\"\n\nShe turned slightly and peered over her shoulder at him. She managed a tight smile, then gave another wiggle of her hips.\n\nShe reached one hand to her left breast, twisting and pulling her nipple cruelly. The other hand rubbed up and down her drooling slit.\n\n\"Aw Jesus, Jesus oh God,\" Becky screamed out in orgasm.\n\n\"Aw ugh, oh God yes!\" Douglas cried out and began to pump a long rope of semen into Becky's bowels.\n\nWhen they caught their breath, Becky slowly, gingerly wiggled forward, letting his slimy cock pop out of her. She remained still on hands and knees, shaking slightly at the sudden emptiness she felt inside of her guts. Then she scampered off the bed.\n\nDouglas lay stock still as Becky clambered down and slammed the door of her half-bath. A moment later, he heard the toilet flush.\n\nBecky returned a moment later and clambered back into the bed. She took his wilted cock into her hand and cleaned it with a warm washcloth. She then leaned over and softly kissed his slack mouth.\n\n\"You stay the night?\" she quietly asked.\n\n\"Uh huh,\" Douglas agreed weakly.\n\nDouglas was slowly rousing when he felt the bed jostle slightly. Gray dawn was filtering in through the gauzy curtain and half open blinds when he felt a small hand encircle his morning wood. Then a warm, wet mouth engulfed him down to the root.\n\n\"French toast for breakfast okay? Need use up the last of the bread,\" Becky asked, pulling her mouth off of his cock with a loud 'slurp.'\n\n\"Ugh, uh, yeah, okay,\" Douglas panted, head whirring.\n\nBecky performed a slow, noisy blow job. Finally, Douglas could take no more of her torture and pumped his seed down her throat.\n\nIn the kitchen, Douglas sipped his black coffee, watching Becky work on their breakfast. She had bacon cooking in one skillet while she heated a second skillet. Then, when she had several strips of bacon done, she dropped the first four pieces of bread into the second skillet.\n\n\"Isle of View,\" Douglas read his coffee mug out loud.\n\n\"Love you too,\" Becky commented, pouring the maple syrup into the skillet with the bacon grease.\n\n\"Huh? Oh! Isle. Of. View, got it,\" Douglas chuckled.\n\n\"My sister in law gave them to me,\" Becky smiled, indicating her own coffee mug. \"We say it to each other all the time. She is just the greatest, I swear.\"\n\n\"By the way, your house, it's really beautiful,\" Douglas commented as Becky put his plate in front of him.\n\n\"Thanks. Blue was my dad's favorite color,\" Becky admitted.\n\n\"Was?\" Douglas smiled. \"What's his favorite color now?\"\n\n\"Oh, I'm sure he's driving a midnight blue Mustang Mach one around in Heaven,\" Becky smiled at the thought.\n\n\"Oh. Sorry,\" Douglas said, pouring an obscene amount of syrup onto his piping hot French toast.\n\n\"Don't be; he suffered a lot last few days,\" Becky said, sitting at the table with her own plate. \"So, he's a lot better off now.\"\n\n\"So, uh, what's your favorite color?\" Douglas asked.\n\n\"Pink,\" Becky admitted. \"But, kind of hard match a whole lot with pink.\"\n\n\"I uh, when can I, when can we get together again?\" Douglas asked as he finished his breakfast.\n\n\"You tell me; I'm doing classes on line so I'm free pretty much all the time,\" Becky said. \"Just put them into the sink; the dishes in the dishwasher are clean.\"\n\nDouglas checked his watch and glanced at the kitchen clock, verifying the time. Becky paused her eating as he ambled toward her.\n\n\"Hate to eat and run, but I've got about twenty minutes to get home, change out of my clothes and get to class,\" he admitted.\n\n\"Typical man,\" she smiled, abandoning her plate of food...\n\nDouglas checked that he had everything; wallet, keys, cell phone, cowboy hat. At the door, Becky stretched up and gave him a kiss. By the time Douglas left, he only had ten minutes to run home, change out of his clothes and get to class. With a sigh, Becky began the unpleasant task of cleaning the kitchen.\n\nThroughout the day, Becky received sporadic, random text messages from Douglas. She would smile and respond, then return to her studies. Looking out of the office/bedroom window, looking across the street at the Gardner home, Becky did wonder if Todd was bothering to keep up with his classes. She wondered if Monty was keeping up with her classes.\n\nAt lunch time, Becky made a BLT with the remaining bacon and the last two pieces of the old loaf of bread. Then she sent Douglas a selfie of herself wearing nothing but boots and hat.\n\nThe glass vibrator came in and Becky dropped two double-A batteries into the toy. She positioned herself then sent Douglas a picture of the large instrument spearing her wet pussy.\n\nDouglas sent a text, letting Becky know his next night off was Wednesday. Layla had sent Becky the recipe to make ravioli and Douglas agreed to be the guinea pig for the new recipe.\n\n\"Pink still your favorite color?\" Douglas texted on Tuesday night.\n\n\"Yes. Except fuchsia; that's not really pink,\" Becky responded.\n\nOn Wednesday, Douglas showed up carrying a large Cal's Western Wear bag and a bottle of a hearty red wine. Becky greeted him at the door, wearing the Daisy Duke Leather patched shorts and a pink top. Her cowboy hat was on her head, her red riding boots on her feet. Douglas smiled at her sassy little smile and kissed her.\n\n\"So...what's in the bag?\" Becky asked.\n\n\"Man that smells great. Ever heard of Candy Cotton?\" Douglas asked.\n\n\"Candy...I've heard of cotton candy,\" Becky said. \"Just put the garlic bread into the oven; we'll be ready to eat in a few minutes.\"\n\n\"Anyway, she's a bull rider; started off in junior rodeo 'bout six years ago and ordered some stuff,\" Douglas said, putting the wine bottle onto the table. \"And right after she ordered the stuff? Hit a growth spurt; shot up from four eleven to five seven almost overnight.\"",
        "\"Lucky brat,\" Becky smiled, indicating her short stature.\n\n\"Uh huh; ought see her now,\" Douglas said, putting the bag down next to his chair and picking up the corkscrew. \"At least six feet, got to weigh two fifty, I bet. Most of the bulls think they ought be the ones riding her.\"\n\n\"Okay. Won't be able get that mental image out of my head,\" Becky said, checking her garlic bread.\n\n\"And because her name's Candy Cotton? Wears nothing but pink,\" Douglas said, pouring them each a glass of wine.\n\n\"And is 'bout two hundred and fifty pounds? That's a scary thought,\" Becky laughed, serving the food.\n\nAfter the veal ravioli covered in homemade marinara sauce, Becky again served them vanilla ice cream with a brown sugar bourbon glaze. Douglas smiled as she served the coffee in her 'Isle Of View' mugs.\n\n\"The bag?\" Becky asked as he scraped the last bite of dessert into his mouth.\n\n\"Hmm? Oh, the bag,\" Douglas agreed and pulled it around.\n\nHe pulled out a pair of pink suede chaps. Becky looked at the odd scraps in confusion. Douglas pulled her close and tied the chaps around her legs.\n\n\"Now? You can ride a bull,\" he laughed as she modeled the leather garment.\n\n\"Or my man,\" Becky said, walking in the chaps.\n\n\"And; they're a size seven and a half,\" Douglas said and pulled out a pair of bubble gum pink riding boots.\n\n\"Oh!\" Becky said, looking at the flowers embossed on the leather shank of the boots.\n\n\"They don't fit? Can always stuff some paper in the toes,\" Douglas suggested.\n\nThey were a little loose, but Becky decided she liked them. After all, they were already paid for.\n\nShe walked quickly to her bedroom to see what she looked like in pink chaps and boots. A moment later, she strolled into the kitchen again, with only hat, chaps and pink boots on.\n\n\"Looks like you overdressed there, Bull,\" Becky drawled.\n\n\"You're right, ma'am,\" Douglas drawled in response.\n\nIt amused Douglas that Becky insisted on keeping boots, chaps, and hat on while they fucked. But, at age twenty four, Douglas had more than enough experience with women to know, if that's what Becky wanted to do, he had better go along with the plan. He hammered his cock into her tight pussy while she rode him hard.\n\nBecky's hat finally fell off of her head as she kissed him. She let the hat lie on her bed as she lay down across him. When his limp cock slipped from her sloppy pussy, she gave him another kiss, then sat up. She picked the hat up and put it on again as she wiggled off of him.\n\n\"Stay the night?\" Becky quietly asked as she loosened the chaps.\n\n\"Absolutely,\" Douglas agreed, kissing her softly.\n\nBecky easily worked the boots from her feet and put them into her closet. The cowboy hat went onto a peg just inside of the door. For a long moment, Becky wondered what to do with the chaps, then finally just looped them over a plastic hanger.\n\nAfter pulling on her sleep shirt, Becky peeled down the comforter. Becky and Douglas wiggled underneath the comforter and Becky snuggled up against him. Douglas wrapped his arms around her and they kissed.\n\n\"I uh, listen, we uh, I know we just started seeing each other,\" Douglas said, trying to see her face in the darkness.\n\n\"Uh huh,\" Becky agreed and lightly brushed is lips with hers.\n\n\"But, I, it too soon talk about being exclusive?\" Douglas pressed.\n\nBecky tensed. She didn't know if Douglas noticed her tensing; his hands continued to lightly rub along her back. She let out a little sigh.\n\n\"Listen,\" she said gently.\n\nThat gentle word stopped Douglas's light caresses. His hands rested on her back, very close to her bubble butt. He did not respond when Becky again touched his lips with hers.\n\n\"I promise, as long as we together? I will not see any other men,\" Becky said softly.\n\n\"Oh. Well, then, that's exclusive,\" Douglas said, reaching down and squeezing her buttocks through her sleep shirt.\n\n\"No, Douglas, you didn't hear me,\" Becky said quietly.\n\n\"Yeah, you said as long as we're together...\" Douglas said.\n\n\"I said I won't see any other men,\" Becky finished. \"Men. Douglas, I'm bi. I like women. Hell, I love women. Love women almost as much as I love men.\"\n\n\"Can I watch?\" Douglas chuckled after a long moment of silence.\n\n\"Watch? You just want watch? You don't want join in?\" Becky asked, small hand gripping his renewed erection.\n\n\"You don't want fuck my face while my girlfriend licks my pussy?\" Becky asked, purposefully using profane language while stroking his cock. \"You don't want jam your dick up my ass while I use my vibrator on my girlfriend?\"\n\n\"Too soon say I love you?\" Douglas groaned as Becky sank her mouth down over his cock.\n\n\"I love you too; you my man,\" Becky said after she pulled her mouth off of his cock with a loud 'pop.'\n\nIt did not take long; the thought of the fresh faced, innocent looking Becky with another woman had the sperm bubbling up in Douglas's cock. With a strangled groan, he emptied his balls into her throat.\n\n\"Love you,\" Douglas again murmured.\n\n\"You my man,\" Becky affirmed, again putting her head on his chest.\n\nCal's Western Wear closed on a Sunday. The few remaining clothes and boots had already been sold to another clothing store in Myndee, Arkansas. Bargain Bin, a discount store in Bender, Louisiana had bought most of the display racks. Cowboy's BBQ catered the event for the few patrons and former employees that came for the occasion.\n\nBecky greeted Callie, was surprised when the leathery looking older woman hugged her tightly. She smiled as Douglas dragged her around, introducing her to everyone as his girlfriend. She did not miss the murderous glares she received from two former employees, both female.\n\n\"And, here you go, Douglas; promised you a bonus you stayed on 'til the end,\" a now very drunk Callie slurred.\n\n\"Yes ma'am,\" Douglas smiled tightly as he wiped a tear away. \"Thank you, Miss Cally.\"\n\nCallie's bonus was ten crisp one hundred dollar bills in an envelope. Douglas told Becky he would use that money to pay toward his student loan for the Vo-Tech.\n\n\"That's a good idea,\" Becky agreed as they climbed into his 2002 Dodge Dakota.\n\n\"Well, guess what?\" Douglas said after a few moments of driving.\n\n\"I give up. What?\" Becky asked.\n\n\"Now I don't have a job anymore,\" Douglas said.\n\n\"For now,\" Becky encouraged. \"Soon as you graduate...\"\n\n\"No, Becky, I don't have a job. Means all this, 'oh I miss you, oh I can't wait see you; when's your next day off?' stuff? That's all gone,\" Douglas explained.\n\n\"Oh yeah!\" Becky laughed happily.\n\n\"So. I miss you. Oh. I can't wait see you again. Guess what? I'm off tonight,\" Douglas said.\n\n\"And I got that gas grill I been dying try out,\" Becky agreed.\n\nWhen they pulled up, Monty, Aunt Margaret and Todd were getting out of Aunt Margaret's car. Becky nodded in satisfaction; Monty, or Aunt Margaret had made Todd get a decent haircut. Aunt Margaret and Monty waved and Becky and Douglas returned their friendly wave. Todd shot Douglas a white-hot glare, then turned his back on the couple.\n\nBecky, through Layla's instructions, managed to do a decent job on the steaks, zucchini and yellow squash skewers and ears of corn. Afterward, though, Becky declared that the gas grill would be Douglas's domain. He could stand outside swatting at mosquitos and sweating, waiting for their food to cook.\n\n'Isle Of View' Becky typed out and set the message to Layla.\n\n'Isle Of View 2' Layla responded.\n\n\"Um. Okay, I do this grilling thing, I get instructions from the cooking queen?\" Douglas asked, putting his emptied plate into the dishwasher.\n\nWhen he got no response, Douglas turned to see that Becky was not in the kitchen. He smiled as he saw that she had set out the ingredients for making warm blackberry cobbler drinks. He checked that the reservoir of the keurig was filled with water and began the process.\n\n\"Oh, good, you got the hint,\" Becky said, pink boots making a clomping sound as she ambled into the kitchen.\n\nAgain, she was wearing her pink suede chaps and pink boots and cream colored cowboy hat. Because the boots were just a little too big, Becky made a clomping sound as she walked. That clomping noise did not detract from the naughty, sexy image that Becky projected.\n\nAfter some very energetic sex, Becky brought up the idea of Douglas moving in. Douglas agreed readily; he'd had two months left on his lease and had been debating on whether or not to renew the lease.\n\nTriangle Carter, Inc. hired Douglas the moment he had his certification in hand. They were an oil-field company that maintained Internet, computer hardware and software and electrical systems. Their largest consumer base was off-shore rigs. A typical shift for a TC employee was fourteen on, seven off.\n\nSo for the last two nights he had before leaving for his first assignment, Becky made Douglas fuck her, made him go bowling as often as he could get it up. Douglas didn't object; bowling in bed was his all-time favorite sport.\n\n\"That's got hold me for two weeks,\" Becky explained as she tried to get another erection out of his wilted cock.\n\nFour days before the end of Douglas's first shift, Becky was sitting in her office, completing her Western Civilization 315 assignment when the sound of a car door made her look up. She peered out of the window and saw a police cruiser sitting in her driveway. She also saw a beautiful blonde woman in a Baylor Lake Police Department uniform approaching the front door. Becky felt that familiar, odd, slightly off-center feeling in her belly.\n\nThe previous year, 2019, the citizens of Baylor Lake and Jazz Beach, Louisiana had voted to incorporate, become a town. Being a town, rather than an unincorporated part of St. Elizabeth Parish meant that Baylor Lake and Jazz Beach would need a police force, and a post office.\n\n(It also meant their property taxes would double over the next five years; the bureaucrats never tell you that part. It meant that there would be politicians, all with their right hands out while their left hands were rooting around in the cookie jar. But the bureaucrats never tell you that part.)\n\nBecky was not living in her home when the vote was cast; she would have voted 'no' if she had been. She understood enough of business and finances to know that the money for a police force, a post office would not come from leprechauns and unicorns; it would come from her. St. Elizabeth Parish would not cut taxes from the Bender, DeGarde, Flowers and Kimble citizens, but they would cut services to Baylor Lake and Jazz Beach. Someone had to make up for the shortfall to Baylor Lake and Jazz Beach, now just called Baylor Lake, and that someone would be her.\n\nBut in March of 2020, Becky did vote for the politicians that ran for the newly created township of Baylor Lake, Louisiana. Lieutenant Ritchie Himmer had over twenty five years of experience on active duty in St. Elizabeth Parish. His opponent had thirteen years of experience driving a desk around in Baton Rouge, Louisiana. Becky pulled the lever for Ritchie Himmer for Captain of the Baylor Lake Police Department.\n\nBecky quickly pulled the unlined riding coat on over her nude body as she walked to her front door. She wondered what the police might want with her, but was not afraid.\n\n\"Afternoon, ma'am,\" Officer Rochelle Esposito said, blue eyes looking at the short woman in cowboy hat and long coat.\n\nRochelle's blue eyes also peered into the home as much as she could through the small chink that Becky allowed. It was a warm September day; the woman's coat was a little odd, as was the cowboy hat on the woman's head, the bubble gum pink boots on the woman's feet.\n\n\"Yes, Officer?\" Becky asked politely.\n\nRochelle swept her hand back, brushing her shoulder length blonde hair back. Her hair used to reach down to just above her tight heart shaped buttocks. At the Academy, a female trainer pointed out that long hair gave an opponent something to grab onto. Long hair could be a hindrance, especially on a windy day; it could get in her eyes. Her habit of brushing her hair back was a decade's long habit that Rochelle had not been able to break just yet.\n\n\"Ma'am, looking for a Jonathon David Savoie; he here?\" Rochelle said, voice authoritative.\n\n\"John... Mean, guy lived here before?\" Becky asked, frowning.\n\n\"So you're saying Jonathon Savoie's not here?\" Rochelle snapped, again peering past Becky into the small slice of interior that she could see.\n\n\"No, he's not. Thought y'all had him?\" Becky asked. \"I mean, didn't y'all arrest him, what, July?\"\n\nBecky could feel her pussy getting wet as she looked at the five foot, four inch beauty. Becky read the officer's name badge that perched just over the officer's 34D breast, 'Esposito.'\n\nBecky brought her bare thighs together. The woman was gorgeous. Becky loved the dark blue uniform, loved how the blouse stretched taut across the officer's breasts, loved how it tapered into her narrow waist. The nine millimeter handgun emphasized the woman's sweetly rounded hips.\n\nOfficer Esposito's face was a beautiful face, framed by light blonde hair cut in such a cute style. The dark blue hat on the officer's head highlighted the light blonde hair and also emphasized the woman's light blue eyes.\n\nHer nose was slim; Becky hated her own button nose; her glasses kept sliding down. The officer's complexion was lightly tanned, her cheekbones were high, aristocratic. Her lips were full, pouting, kissable and her chin was rounded.\n\n\"July...\" Rochelle murmured, pulling her tablet off of her belt.\n\nRochelle pursed her lips and her blue eyes flashed with anger. The tablet showed that one Jonathon David Savoie was indeed in the custody of the Bender Police Department and had been since July eighteenth.\n\nAnd Rochelle was willing to bet that Officer Jack Powell had known that when he'd given her the electronic summons. The former classmate from Baylor Lake High School seemed incapable of moving past the hijinks and hierarchies of high school cliques.\n\n\"Thank you, ma'am,\" Rochelle snapped and turned to walk away.\n\n\"Wait,\" Becky called out, unwilling to let the beautiful woman leave.\n\nBecky didn't know what she was doing; she had no plan in mind. She had never approached another woman before. But the odd feeling, that slightly uncomfortable, off-kilter feeling wouldn't leave her body.\n\nMonty and Becky that had been a mutual seduction. They'd both been attracted to one another. They had both been curious, na\u00efve but curious.\n\n\"You just going take my word for it?\" Becky asked. \"You not going demand to look around?\"\n\nAgain Rochelle brushed her hair back. She'd been a cheerleader in high school; she'd been approached before, by both men and women. She'd even had a few lesbian dalliances, while in high school, with other cheerleaders.\n\nNone of those approaches had been as clumsy, as blatant as this, though. Rochelle did feel a slight shiver of excitement ripple through her as she looked at the large brown eyes behind the slightly smudged eyeglasses.\n\n\"Ma'am, Mr. Savoie is in custody at the Bender lock up,\" Rochelle said.\n\n\"Sure it's the right one?\" Becky asked. \"Might be another Jonathon Savoie. You might want come in, take a look around just to make sure.\"\n\n\"I haven't called it in yet,\" Rochelle said, more to herself than to Becky, then smiled. \"Know what? You're right. I better come in and have a look-see.\"\n\nThe living room was beautiful, but comfortable. There was a beige loveseat with deep blue throw pillows against the large picture window. To the right of the loveseat was a large deep blue couch with beige throw pillows and deep blue throw pillows. Next to the couch was a beige recliner, an exact match to the beige loveseat.\n\nThe walls were a pale blue, the carpet was a sandy beige. Rochelle's eyes also saw the wall-mounted 52inch LCD television; her father, Francis Esposito would have drooled over that television.\n\n\"What's in there?\" Rochelle asked, pointing to a door to the right of the television.\n\n\"My office. It's a third bedroom but I mainly use it for school,\" Becky admitted.\n\nRochelle peered in through the open door. She saw a very nice desk; Becky had bought it at a garage sale, sanded it, stripped off sixty three years of dirt, grime, and a very amateurish paint job, then stained the wood a honey blonde. Rochelle also saw an overstuffed leather office chair; she smiled because the chair was raised to maximum height. There was a comfortable looking day bed, a blue patchwork quilt casually draped over the polished brass arm of the furniture.\n\n\"Officer Esposito, would you like a cup of coffee?\" Becky asked, walking toward the kitchen.\n\n\"Yes, yes ma'am, I think I would,\" Rochelle agreed, following the short woman through the living room.\n\nRochelle admired the sleek, clean lines of the kitchen, the counters and appliances were slightly lower than the average counter or appliances. There was a rolling ladder that mounted to a track along the top of the upper cabinets. The colors were soft, muted, warm and inviting.\n\n\"What do you take in your coffee, Officer?\" Becky asked.\n\n\"Just a lot of cream,\" Rochelle said, sitting in a padded chair. \"And it's Rochelle.\"\n\n\"Hi Rochelle, I'm Becky Meadows,\" Becky said, putting a K-Cup into the coffee maker. \"All I've got is Community dark roast; that okay? Oh. Or I got decaf.\"\n\n\"Dark roast is perfect,\" Rochelle agreed. \"Uh, ma'am, Becky, why are you wearing that coat?\"\n\n\"I was sitting at my computer when you pulled up,\" Becky said. \"So threw this on.\"\n\n\"You can take it off; you're making me sweat just looking at it,\" Rochelle smiled as she made notes on her tablet.\n\nShe sent the information; Jonathon David Savoie was already in custody, a guest of the Bender Lockup. Rochelle made sure to CC Captain Ritchie Himmer on the file.\n\nShe wasn't sure if Captain Ritchie Himmer believed in the 'good old boy' way of doing things; Rochelle didn't know if Captain Himmer was one of those that believed that women should stay at home having babies and leave the hard work up to men. So far, the man had been nothing but professional in his duties as the captain of the small police force.\n\nBut Rochelle did want this mission, the unnecessary time, the waste of manpower hours noted. All Jack would have had to do is type in Jonathon David Savoie's name and he would have found the man. Instead, Jack had sent Rochelle out here for nothing.\n\n\"I can't; I, when I'm at my computer, when it's just me, I uh, I'm naked,\" Becky admitted, handing Rochelle a mug of coffee.\n\n\"Oh. I uh, then uh...\" Rochelle stammered, looking at the cute woman.\n\n\"Be right back,\" Becky smiled a sassy little smile at her guest's.\n\nBecky strode out of the kitchen. Rochelle sipped the hot coffee, looking over her schedule. After serving the summons, she was supposed to go on routine patrol, concentrating on the area near the St. Elizabeth's Public Library. They'd been getting complaints; suspicious looking vehicles in and around the playground behind the library.\n\n\"This better?\" Becky asked, returning to the kitchen.\n\nRochelle's eyes flickered up. Becky had put on a pair of Daisy Duke Style shorts with leather patches and a too short, too tight pink tee shirt. Becky still wore the bubble gum pink cowboy boots on her feet. Rochelle could see that Becky Meadows had an outie belly button, and could see that Becky wore no bra underneath the tee shirt; the light shadow of her areolae were plainly visible through the shirt's thin material.\n\nThe short legs were well-formed, pale. Her slender belly was also pale as it peeked out of her short tee shirt. Becky's breasts were very large, especially on such a short woman. The breasts were natural; store bought breasts would not have that natural sag to them. Rochelle could also see a hot blush on the woman's pretty face.\n\n\"I uh, yeah, I, that's an uh, that's a cute outfit,\" Rochelle stammered. \"Especially with them boots.\"",
        "And, right before Rochelle's eyes, the short woman just seemed to crumple. Becky had been standing, nicely rounded left hip thrust forward, left boot pointing pink toe to the ground. And suddenly, the woman just sagged.\n\n\"God, I'm so stupid,\" Becky whispered. \"I'm trying to, I mean, you're gorgeous and I'm, I'm just doing it all wrong. Never mind. Stupid. Stupid, stupid Becky.\"\n\nBecky turned to leave the entrance of the kitchen. Rochelle looked at the sweetly rounded buttocks as they peeked out of the far too short shorts.\n\n\"I uh, I didn't think you were doing it wrong,\" Rochelle called out. \"I uh, I mean, I, I'm not gay, but I, I could tell you were flirting with me when you asked me to come in, look around.\"\n\n\"Oh. I uh, oh! I, I'm not gay either,\" Becky said. \"I got a boyfriend. I'm not gay; I'm bi. I'm bisexual, you know?\"\n\n\"Boyfriend here?\" Rochelle asked as Becky slipped into the chair across the table from hers.\n\n\"No. Off-shore,\" Becky admitted, staring at her table top. \"Been almost two weeks; I've just about worn out my vibrators, I swear.\"\n\n\"Me too!\" Rochelle giggled. \"Been, oh God, I don't even want tell you how long it's been. Maybe we could be vibrator buddies.\"\n\n\"I, I'd like that,\" Becky giggled, looking up, heavy blush still on her pretty face.\n\nRochelle dug her cell phone out of her slacks. She got Becky's phone number and gave Becky her own phone number.\n\n\"My dad died last year; prostate cancer,\" Rochelle said, putting her empty coffee mug into the kitchen sink.\n\n\"Mine too. Well, liver failure; he was an alcoholic,\" Becky said.\n\n\"My ex-husband, God, I was such a God-damned idiot ever screw around on him, I swear. I had it all to do all over again, I'd told Chad and Tommy go fuck themselves, but...\" Rochelle continued her tale.\n\nRochelle paused, staring out the kitchen window at Tallow Road. She turned around and gave Becky a soft, sad smile.\n\n\"Anyway, my daddy dies, where's Chad? Where's Tommy? Jared's only one shows up; him and that damned wife of his. Jesus, I want hate her so bad but Ann's just so damned sweet I can't. Ann comes right up to me, hugs me and tells me she is so sorry for my loss and I ever need anything please call her. Ever want strangle someone and kiss them at the same time?\" Rochelle admitted. \"And right after that, Mom has a stroke. Fried her brain; half the time she doesn't even know who the hell I am. Can't bathe herself, can't wipe herself, Jesus, can't even feed herself. Had to put her in Pine Groves. Wipes out my dad's life insurance and the shitty health insurance he'd had don't pay shit for her care. Lost the house, had to sell it to pay the bills. Chad and Tommy? Any sign of trouble? 'Oh well uh, hey sorry girl, got this stuff over here need to do, but I holler at you later, okay? You call you ever need some dick, okay?' So I'm living in this crummy ass one room studio, wearing out C cell batteries faster than they can make them.\"\n\n\"So that's why there's been a shortage,\" Becky attempted humor.\n\nRochelle allowed herself a good belly laugh. She walked to where Becky sat.\n\n\"Uh huh. My shift's until two in the a.m. I'll call you some time tomorrow, okay?\" Rochelle said and bent at the waist.\n\nRochelle gave Becky a soft kiss on her lips. Then she checked her belt. Gun, baton, pepper spray, Taser, tablet; she was good to go.\n\n\"Thank you, Officer,\" Becky called out.\n\n\"Welcome, ma'am,\" Rochelle said. \"And, thank you for the coffee. Oh. And the ear.\"\n\nShe put her hand on the doorknob. She looked at the attractive brunette and smiled.\n\n\"Minute I become a cop? Half my friends don't even want to know me anymore,\" Rochelle admitted. \"So, I don't really get talk a whole lot about my dad dying, my mom being in Pine Groves.\"\n\n\"I'm here you ever want talk,\" Becky said, walking up to Rochelle.\n\nBecky stretched up slightly and the two women shared another soft kiss. Becky softly squeezed Rochelle's hand.\n\n\"I'm here you ever want to talk,\" she repeated.\n\n\"Thank you, Becky,\" Rochelle said quietly, her bottom lip beginning to quiver.\n\nRochelle stepped outside and pulled the door shut. Becky quietly engaged the deadbolt. Becky quickly pulled up her Falgout Film Studios menu and did a quick search for 'police women' and found three films available. But when she clicked on play, she saw she'd already used her five free movies for the current thirty day period.\n\n\"Damn it,\" Becky giggled and signed up for Gold membership.\n\nPulling up the first film, Becky watched a beautiful young woman with pneumatic breasts in an obviously fake police uniform doing a routine traffic stop. Within minutes of pulling the Porsche over, the well-endowed police woman had a beautiful blonde nude save for handcuffs and stiletto heels. The handcuffed blonde was 'forced' to lick the police officer's neatly trimmed pussy. Then the police woman sodomized the blonde suspect with her night stick while fisting the suspect's pussy.\n\nBecky idly masturbated as she watched the extreme lesbian action. Then, she went to her kitchen, pulled her glass vibrator from her freezer. In the living room again, Becky pulled up her favorite Dallas Sanantonio film. This one showed the gorgeous brunette with four men. Dallas straddled one man, taking his large cock into her pussy, while a second man sodomized her. The third and fourth man took turns fucking Dallas's mouth. Whichever cock was not in her mouth, Dallas stroked with her small fist.\n\n\"Ooh!\" Becky shivered as the ice cold glass vibrator came into contact with her wet pussy.\n\n\"Yyeess!\" Becky hissed as she worked the buzzing toy into her pussy.\n\nIt was just after lunch the following day when Becky received a call from Rochelle. Becky saved her work on her computer and picked up her phone.\n\n\"Hey, listen, I uh, I just wanted tell you, I really appreciate yesterday,\" Rochelle said.\n\n\"Oh, I uh, me too,\" Becky agreed.\n\n\"I mean, just you sitting, let me talk, God,\" Rochelle said.\n\n\"So, what you doing right now?\" Becky asked, trying to remember if she'd put her glass vibrator back into the freezer after she'd used it yesterday.\n\n\"On my way see my mom,\" Rochelle said. \"Got you on blue tooth right now, so if I fade out, that's why.\"\n\n\"What time you go in?\" Becky asked.\n\n\"Got another four to two shift; just took Gloria and Kathleen back to school,\" Rochelle said. \"Not supposed take them out of school for lunch like that, but since I'm a cop, they don't really say much.\"\n\n\"Gloria and Kathleen?\" Becky asked.\n\n\"My two girls. Gloria's let see, Gloria's seven and Kathleen's five and they're already talking about skipping Kathleen to the first grade,\" Rochelle said, her pride evident. \"Had them in Claiborne, but this damned virus has W. C. C. Claiborne shut down so we hurried up and got them in St. Richard's. And they love it; making all kinds of friends and everything.\"\n\n\"Aw! And I bet they're real pretty too,\" Becky complimented.\n\n\"Yeah, but the smarts? Don't know where they got that from,\" Rochelle laughed. \"God knows, neither one their daddies got an ounce of brains. And me? Lucky to graduate high school; pretty much got by on my looks.\"\n\nBecky and Rochelle chatted for a few minutes more. Rochelle announced she was pulling into the parking lot of the Pine Grove Assisted Living Facility.\n\n\"I uh, I'm off tomorrow,\" Rochelle said. \"I pick Gloria and Kathleen up from school, then after dinner, I bring them home to Jared and Ann's house; mm, 'bout six thirty; they have homework to do.\"\n\n\"Makes sense,\" Becky agreed.\n\n\"So I uh, I, it okay, can I come over after I drop them off?\" Rochelle stammered.\n\n\"I, yes, I, I'd really like see you again,\" Becky said, voice a soft squeak.\n\n\"I, I'd really like see you again too,\" Rochelle admitted.\n\nBecky wondered if Rochelle's face was as red as her own. She wasn't looking at her face, but Becky could feel the hot blush warming her throat and ears and cheeks. Rochelle whispered a soft 'good-bye' and Becky's phone gave off the three beeps, letting her know Rochelle had terminated the call.\n\nBecky resumed her school work. It took a few minutes for Becky to quit thinking about the beautiful police officer and get her head into her schoolwork. Finally, Becky finished up her assignments, then completed a grocery order. The App told her the order would be ready at five that evening. Just as she put her phone down, the phone buzzed.\n\n\"Hello?\" Becky asked, not looking to see who it was.\n\n\"I, you, I need a cup of coffee,\" Rochelle barked.\n\n\"Come on over; I'll start the machine,\" Becky said.\n\n\"And...I'm here,\" Rochelle said, pulling into the driveway.\n\nBecky hit 'end' and shoved the cell phone into her pocket. She again felt her pussy get wet as she saw the beautiful blonde in her neatly pressed uniform as Rochelle got out of the police cruiser. Becky also felt that odd feeling in the pit of her stomach as she watched Rochelle's beautiful body's fluid movements. She ran to the kitchen to press 'start' on the machine, then ran to get the door.\n\n\"My mother sees the uniform and first thing out of her mouth is, 'what has my idiot daughter done this time?'\" Rochelle snapped when Becky opened the door. \"I mean, yeah, I got the damned mask on, but still.\"\n\n\"Oh, Rochelle,\" Becky said, reaching her arms out.\n\nRochelle let the smaller woman hug her tightly. She allowed herself to be led to the plush couch.\n\n\"Were you, you was in trouble a lot when you was a kid?\" Becky softly asked, gently rubbing Rochelle's back.\n\n\"No! That's the thing really hurts,\" Rochelle said. \"I mean, yeah, I done some stupid shit, but the cops never was at our house.\"\n\n\"A mother's fear, I guess,\" Becky murmured.\n\n\"Yeah, I guess,\" Rochelle agreed. \"But she called me 'idiot' too.\"\n\nThey sat in silence for a few minutes. Becky continued her gentle massage of Rochelle's back and shoulders. Rochelle turned to look at Becky.\n\n\"I. I. Thank you,\" Rochelle softly said.\n\nBecky leaned her head up and softly kissed Rochelle's lips. Rochelle returned the gentle kiss.\n\n\"Thank you,\" Rochelle repeated.\n\n\"Welcome,\" Becky said. \"Oh! Coffee machine should be ready by now.\"\n\nThey sat at the kitchen table. Becky remembered that Rochelle liked her coffee with plenty of creamer; Becky hoped she'd remembered to put powdered creamer on her grocery list. After their cups of coffee, Rochelle wearily got to her feet. At the door, the two women again kissed softly. Then Rochelle opened her mouth and sucked Becky's coffee tinged tongue into her mouth.\n\n\"See you later,\" Rochelle said.\n\n\"Yes ma'am, Officer Esposito,\" Becky smiled.\n\nAt the grocery store, Becky was told that Burns & Burns was out of the Duracell batteries in double A cell size; was the Burns & Burns brand an acceptable substitute? Becky assured the young man that this was fine. Becky knew her face had to be as red as a tomato, but the young man did not say anything as he loaded her groceries into the back of her truck.\n\nA text the following morning from Rochelle made Becky smile. The two women sent text messages back and forth sporadically throughout the day. Rochelle's day consisted of cleaning her one bedroom apartment; she'd upgraded from her one room apartment after her first paycheck from Baylor Lake Police Department. Rochelle admitted, she was a horrible cook; she just did not have the patience. And Kathleen was such a picky eater, it was hard to think of anything to make that the finicky child would eat.\n\nSo, couple of Happy Meals; I usually grab something eat after I drop them off,\" Rochelle texted.\n\nHaving stuffed bell peppers here; want me keep couple for you,\" Becky suggested.\n\n\"Yes!\" followed by a Happy Face emoji.\n\nBecky made four stuffed bell peppers, using ground veal and ground pork. She prepared some canned yams to go with the stovetop peppers; Layla had taught Becky how to take the 'can' taste out of the yams. Then Becky tried to decide what to wear.\n\n\"Is this, this is a date, right?\" Becky asked her reflection in her mirror as she tried on a pretty pink bra and pink thong panties.\n\nShe decided on a short sleeved snap button blouse, boot cut blue jeans, and her pink cowboy boots. She put her cowboy hat on, then decided to leave the hat on the hook. Truthfully, the hat got in the way when she kissed.\n\n\"Don't know how she does it,\" Becky said aloud, thinking of her favorite porn actress, Dallas Sanantonio.\n\nShe'd read somewhere that Harrison Ford's hat had been stapled to his head for certain scenes in the first Indiana Jones movie. Becky did not think Dallas Sanantonio stapled her hat to her head. But it was uncanny; that hat just never came off of Dallas's head while she fucked, or sucked cock, or licked a pussy. Scene after scene, that hat stayed on the beautiful woman's head.\n\n'On my way,' Rochelle texted.\n\nBecky responded with a widely smiling emoji.\n\nA few minutes later, Becky saw a Toyota Corolla pull into her driveway. She watched as Rochelle checked her makeup, her hair before exiting her car.\n\n\"Good, I'm not only one's nervous,\" Becky smiled, observing Rochelle's antics.\n\n\"Wonder if she feels...\" Becky wondered as her insides tightened.\n\nBecky dimmed the lights and walked to the door. She wondered if she should have put on some soft music as the doorbell chimed.\n\n\"Hi,\" Rochelle said.\n\n\"Hi; you look so different out of your uniform,\" Becky smiled.\n\n\"That a good thing or...\" Rochelle asked. \"Wow, the peppers smell great!\"\n\n\"It's a good thing; you, you're beautiful,\" Becky said, pulling Rochelle toward the kitchen. \"Come on; it's ready.\"\n\nAfter their dinner, Becky made her bourbon brown sugar glaze and served then some vanilla bean ice cream. They ate slowly, sipping coffee in between bites.\n\n\"I know, I know what I um, what I want to do,\" Becky whispered as she ate the last bite of ice cream. \"But I don't know how to get there from here.\"\n\n\"What do you want to do?\" Rochelle nervously asked, taking the last sip of her coffee.\n\n\"I want, I uh, I want kiss you, strip you naked and make love to you,\" Becky braved saying.\n\nRochelle leaned over and softly kissed Becky's lips. They kissed, lip to lip for a long moment. Then Rochelle opened her mouth and gently licked Becky's lips. Becky opened her mouth and the two women kissed.\n\n\"Where's your bedroom?\" Rochelle softly whispered.\n\nBecky led the way. In anticipation, in the hopes of bringing Rochelle into her bedroom, Becky had left the bedside lamp on. The three way bulb was at its lowest setting, casting a soft glow about the room.\n\nStanding next to the bed, Becky turned and put her arms around Rochelle. At five six, Rochelle was eight inches taller than Becky, but Becky's cowboy boots did shorten that by three inches. Again, they softly kissed, tasting each other's tongues. Then Becky gently, deliberately unbuttoned Rochelle's blouse.\n\n\"Oh, that, that's so pretty on you,\" Becky murmured, seeing a pale blue satin bra holding Rochelle's 34D breasts.\n\n\"I, uh, I wear, I only wear it when I'm on a date,\" Rochelle confessed, blushing hotly.\n\n\"Our first date,\" Becky sighed happily.\n\n\"Yeah, I uh, our first date,\" Rochelle agreed.\n\nThey kissed again as Becky gently eased the blouse from Rochelle's shoulders. She lay the blouse across a small velour chair that sat next to the door of her walk-in closet. After another series of kisses, Becky unhooked Rochelle's bra.\n\nBecky pulled back slightly, to allow Rochelle's bra to slide from Rochelle's chest. She peered through her glasses, realizing she needed to clean her glasses. But, even through the smudged glasses, Becky saw two perfect globes of flesh, each capped with a large light brown areolae and tightly crinkled hard nipple.\n\n\"Beautiful,\" Becky whispered, then kissed Rochelle's lips.\n\nBecky softly caressed Rochelle's face, then Rochelle's throat, and then ran her soft fingers over Rochelle's lightly tanned shoulders. Becky continued to kiss Rochelle's lips, occasionally sucking Rochelle's tongue from her mouth as her fingers danced over Rochelle's flesh.\n\n\"Mm, oh!\" Rochelle grunted when Becky's fingernails gently raked along Rochelle's breasts.\n\n\"Mm hmm,\" Becky murmured as she gently pinched, then firmly pulled Rochelle's nipples.\n\nBecky twisted slightly, then brought her mouth to Rochelle's left nipple. Rochelle sucked in her breath when Becky suckled on the nipple. Becky's left hand continued to toy with Rochelle's right breast.\n\nBecky switched to Rochelle's right nipple. Her left hand dropped, gently trailing up and down Rochelle's rib cage and slim waist. Becky's right hand toyed with Rochelle's wet nipple, then Becky raked her fingernails along the underside of Rochelle's left breast.\n\nBecky pulled her mouth from Rochelle's right nipple and softly kissed Rochelle's gasping mouth. Rochelle again sucked in her breath, then aggressively jammed her tongue into Becky's mouth.\n\nRochelle's hands flew up and gripped Becky's face. Rochelle then dropped her hands from Becky's face to the opening of Becky's blouse. She attempted to figure out how to unbutton Becky's blouse. Frustrated, Rochelle finally gave a savage tug to Becky's blouse. The snap buttons gave way easily.\n\nBecky's hands went to the waistline of Rochelle's khaki slacks. She unhooked Rochelle's belt, then unbuttoned Rochelle's slacks while Rochelle's fingers tried to unhook Becky's bra. She finally succeeded in getting Becky's bra undone.\n\n\"Mm, oh God,\" Rochelle whined as Becky unzipped Rochelle's khakis.\n\nRochelle pulled her mouth from Becky's mouth. She briefly admired the pretty pink bra, then lowered her mouth and captured Becky's right nipple in her mouth. Rochelle was not gentle as she sucked on Becky's nipple.\n\nBecky allowed Rochelle to be forceful with her. She, however, continued with her gentle touches and caresses to Rochelle's flesh. She found the waistband of Rochelle's pale blue satin panties and wormed a finger, then two fingers into the front of Rochelle's pretty panties. Becky's fingers felt Rochelle's stiff pubic hairs.\n\n\"Mm! Oh Jesus!\" Rochelle cried out when Becky's fingers found her wet slit.\n\nRochelle flooded the gusset of her panties as Becky's fingers quickly brought her to orgasm. Becky used the slight distraction to swivel Rochelle to sit upon the bed.\n\n\"Oh God, Becky,\" Rochelle gasped out.\n\n\"Mm hmm,\" Becky agreed as she quickly shrugged out of her blouse, bra, boots and jeans.\n\nBecky knelt on the floor and helped Rochelle out of her leather tennis shoes. Then Becky tugged Rochelle's khakis down and off of her slender legs.\n\n\"God, you, you're just beautiful,\" Becky murmured, standing again.\n\nReluctantly, Becky took her glasses off and put them onto her nightstand. Squinting in the faint light, she smiled and leaned to kiss Rochelle's lips again.\n\n\"Beautiful,\" Becky repeated as she and Rochelle lay down on the bed.\n\nThe two women stretched out on top of the soft, fluffy comforter, gently kissing, gently touching each other. Becky trailed her lips from Rochelle's lips and found Rochelle's hard nipple. Her hand toyed with Rochelle's other breast while she sucked on Rochelle's nipple. Then she trailed her head further down. Rochelle's belly was firm. Her navel was a dent in her belly and Becky did gently dip her tongue into Rochelle's navel for a little 'taste' of Rochelle's flesh.\n\n\"Oh,\" Rochelle fought to speak as Becky gently eased Rochelle's panties down.\n\nRochelle wanted to say something to Becky. She wanted to emphasize, again, that she was not gay. Rochelle may be enjoying their moments together, but she was not gay. She might be bisexual, and even that was questionable. But she, Rochelle Esposito was most assuredly not gay.\n\nRochelle wanted to tell Becky how beautiful Becky was. Rochelle wanted to tell Becky her touches and kisses were driving her mad, happily, blissfully mad with lust. She wanted to taste Becky; taste Becky's nipples, taste Becky's sweat, her flesh. She wanted to peel Becky's pretty pink panties down and taste Becky's pussy.",
        "Rochelle wanted Becky to pull her blue panties down and off, wanted Becky's mouth on her nipples, on her pussy.\n\nRochelle wanted to tell Becky that she was not gay. She might be somewhat, slightly bisexual; Rochelle wasn't sure at this very moment.\n\n\"Yyeess,\" Rochelle hissed as she felt her panties being tugged down.\n\nShe raised her hips, to allow Becky to pull her blue panties down over her tight backside, over her hips, down her muscled legs. When Becky had Rochelle's panties off, Rochelle spread her legs, exposing her fringe of blonde curls, her wet pussy lips.\n\n\"Yyeess, oh my God!\" Rochelle screamed out as she felt Becky's hot breath blow across her puffy lips.\n\n\"I love you,\" Rochelle shrieked out when Becky's mouth covered Rochelle's pussy.\n\nBecky licked and sucked on Rochelle's fragrant lips. She forced her tongue into Rochelle's pussy and waggled her tongue back and forth, tasting Rochelle's excitement.\n\nRochelle's pussy had a sweet, musky flavor. Becky had tasted her own pussy, on her fingers, on her vibrator, on Todd's cock, on Douglas's cock. Becky had also tasted Monty's musky pussy. Rochelle's pussy also had a musky flavor, with an underlying tinge of sweetness. Becky could tell that Rochelle kept herself clean.\n\nBecky used her thumbs to open Rochelle's pussy. She thrust two fingers into Rochelle's slick pussy while lapping her tongue up and down.\n\n\"Mmph, augh, oh God,\" Rochelle cried out, clamping her thighs around Becky's head when Becky's mouth encircled Rochelle's clitoris.\n\nBecky licked and fingered Rochelle to three screaming, grunting, thrashing orgasms. Finally, Becky pulled away, fighting against Rochelle's grip. Rochelle relaxed her thighs and Becky sat back onto her heels. Becky sucked Rochelle's juices from her fingers.\n\nBecky wiggled out of her panties; the crotch was sopping wet with her excitement. She lay forward again, kissing from just above Rochelle's sprigs of blonde curls to Rochelle's tight belly. She knee-walked forward, kissing Rochelle's sweaty flesh until she reached Rochelle's 34D breasts. Becky suckled one nipple while her hand teased the other. Then she switched.\n\nFinally, Becky wiggled forward and pressed her bald pussy against Rochelle's furred crotch. She lay fully on top of Rochelle, pressing Rochelle into the soft mattress.\n\n\"Uh, oh God,\" Becky suddenly cried out in orgasm; her clitoris rubbed back and forth across Rochelle's wiry sprig of pubic hair.\n\nThe two women kissed, tongue tasting tongue. Becky thrust and mashed and rubbed her pussy against Rochelle's pussy until she reached a second orgasm.\n\n\"Oh,\" Becky moaned, rolling off of Rochelle.\n\n\"Oh,\" Rochelle agreed, shuddering slightly.\n\n\"I uh, wow,\" Becky wheezed.\n\nRochelle wanted to tell Becky she was not gay. She enjoyed what they'd just done. Of course she'd enjoyed it; she'd had achieved orgasm from Becky's touches, from Becky's mouth.\n\nRochelle wanted to tell Becky she did not think they'd ever repeat this moment together. She liked men, craved sex with men. She was actively seeking a relationship with a man, hopefully one that could father a child, and more importantly, be around to help raise the child. She had profiles on three dating web sites, as well as on the U.L.D. on-line personals. Of course, because Rochelle was a cop, most of the men seeking women tended to steer clear of Rochelle.\n\nRochelle rolled over to tell Becky that she wasn't gay. Her lips pressed against Becky's lips. She tasted herself on Becky's lips. She tasted herself on Becky's tongue. Rochelle sucked fervently, sucked her taste from Becky's lips and tongue.\n\nHer hands lifted, squeezed Becky's heavy breasts. Her hands sought out Becky's large areolae, Becky's tightly crinkled nipples. Rochelle pulled her mouth from Becky's mouth and captured Becky's right nipple in her mouth.\n\n\"Mm hmm,\" Rochelle crooned as Becky's arms hugged her tightly.\n\nRochelle sucked forcefully on Becky's nipple. Her fingers twisted and tugged Becky's other nipple. Rochelle switched, began to suck on Becky's left nipple while her fingers tugged and twisted Becky's wet right nipple.\n\n\"Ugh, oh God yyeess,\" Becky grunted.\n\n\"I love you,\" Rochelle whispered as she kissed her way from Becky's breasts to Becky's nub of a belly button.\n\nRochelle kissed from Becky's navel to Becky's bald mound. Rochelle ran her fingers, then her tongue over the smooth flesh. She ran her fingers, then her tongue over Becky's protruding inner lips.\n\nRochelle wiggled around and lay between Becky's spread legs. Again, she ran fingers and tongue over Becky's smooth flesh. She then began to lap in earnest at Becky's pussy lips.\n\nRochelle lapped from the bottom of Becky's wet slit to the top of Becky's slit. She did this several times, tasting Becky's musky pussy. Then she used her fingers to open Becky's pussy. Her tongue found Becky's fat little nub and she 'batted' the sensitive nub a few times before sucking it into her mouth.\n\nRochelle fingered Becky's pussy with her left hand. Her right hand, Rochelle brought down between her own legs. She sucked and fingered and licked Becky to two orgasms while fingering herself to two orgasms.\n\n\"No more, too, ugh! Oh God, too sensitive,\" Becky pleaded.\n\nRochelle rolled onto her back and used both hands to bring herself to one more orgasm. She then wiggled up until she and Becky were laying side by side.\n\nA few moments later, Rochelle rolled over and pressed her lips to Becky's lips. The two women embraced, kissing softly.\n\n\"Stay?\" Becky whispered. \"Stay the night?\"\n\n\"Going have to,\" Rochelle agreed. \"I'm too wiped to drive.\"\n\nThey wiggled underneath the comforter and flat sheet. They kissed again, then Becky turned out the light. With one final kiss, they fell asleep.\n\nIn the morning, Rochelle woke up in a strange bed, alone. She took a quiet moment, reliving the previous evening's love-making. She reached her hand down and began to lightly rub her pussy.\n\n\"Damn it, got to pee,\" she smiled, wiggling out of the bed.\n\nThe toilet in the half-bath was a small one, close to the ground. Rochelle smiled; Kathleen would love it. She had Gloria and Kathleen one weekend every month; only two weekends to go. Rochelle wondered if Becky would like to meet her girls.\n\n\"Thought you're not gay?\" Rochelle asked her reflection as she washed her hands.\n\n\"Oh, shut up,\" Rochelle told her reflection.\n\nShe dressed in last night's clothing; sticking her panties into her purse. Then she quickly made the bed.\n\nShe found a sweating, nude Becky in her living room, just finishing up her yoga. Becky smiled and stood.\n\n\"Give me a minute and I'll make us some breakfast,\" Becky said. \"Nothing fancy; just some yogurt and fruits and nuts. Coffee machine's on.\"\n\nRochelle made herself a cup of coffee. Just as she sat at the table, Becky appeared, wearing just a U.L.D. Storm football jersey and panda bear slippers.\n\n\"Cute slippers,\" Rochelle smiled.\n\n\"Today's special is our Tropical blend,\" Becky said, dumping unflavored Greek yogurt into a bowl.\n\nBecky sliced up two bananas, then added some pineapple chunks, some mangos, and coconut milk and coconut shavings. Each bowl was topped with a hefty sprinkling of slivered almonds and a steamy kiss.\n\n\"Okay, I'm off at seven tonight,\" Rochelle said, putting her breakfast bowl into the dishwasher.\n\n\"Need come over,\" Becky pleaded. \"God, want you to meet Douglas; you'll love him, I swear.\"\n\n\"You love him? Good enough for me,\" Rochelle lied, sure she already hated the unknown man.\n\nDouglas wearily let himself into the house at four that afternoon. It had been a very long two weeks of hard, physical labor, then a boat ride that seemed to take forever to get in. To his shame, Douglas had become seasick on the journey, but only a few men had laughed at Douglas's discomfort.\n\n\"Hey, Sweetheart,\" Becky called out from her office.\n\n\"Hey Beautiful,\" Douglas smiled as a nude Becky came out, wearing nothing but cowboy boots and cowboy hat.\n\n\"Leave it,\" Becky said as Douglas started to carry his clothes to the garage. \"You got all week wash them. Becky needs something else right now.\"\n\nBecky managed to keep the cowboy hat on her head while she sucked his cock to a teeth grinding ejaculation. She also managed to keep it on her head while she rode him to a second ejaculation. The hat did fall off her head, though, as Douglas pounded her greasy anus hard and fast.\n\nLaying in the bed, cuddled in sweaty happiness, Becky told Douglas about her new girlfriend. Describing Rochelle's beauty, her physical appearance had Douglas excited. Becky's description of their hot, sweaty night of lovemaking had Douglas's cock rock hard and throbbing.\n\n\"Told her stop by tonight; we're having fried pork chops; that okay?\" Becky asked, swiveling to straddle Douglas's renewed erection.\n\n\"Yeah, I guess,\" Douglas feigned disinterest.\n\n\"Okay, you being a butt hole about the pork chops? Or about meeting my new girlfriend?\" Becky laughed, pulling her right buttock with her right hand while trying to guide him into her anus with her left hand.\n\n\"Both, I guess,\" Douglas laughed, then groaned as he slid into her tight back door again.\n\nDouglas did start washing his clothes while Becky started their dinner. Every time he came within reach, Becky would pull him tight against her, reach up for a kiss.\n\n\"You know, don't think Vanessa ever acted like this,\" Douglas mused to himself as he and Becky shared yet another kiss.\n\nTwo years earlier, Douglas had been engaged to Vanessa Blanchard. The girl had been blessed with her mother's Latin good looks and lush body. She had also been blessed with her father's brains; at twenty three years old, Vanessa was just completing her doctorate in Statistical Analysis.\n\nAlthough Vanessa was very sexual, almost animalistic in her appetite, there was always a coldness, an aloofness that Douglas just couldn't identify. Even after she asked her to marry him, after she agreed, Vanessa's emotions never did fully thaw.\n\nWhen Douglas's grandmother died, Vanessa did not offer condolences. When he asked her to accompany him to Bender, Florida, to attend the funeral of his grandmother, Vanessa's answer was a terse 'no.' as she explained, it was not her grandmother that had died, it was his grandmother. Why did she need to inconvenience herself?\n\nWhen he returned to their apartment from the funeral, Douglas found that Vanessa had moved out. She had taken everything with her. Every stick of furniture, every food item, every towel and wash cloth, every dish towel, every plate and cup and glass. She had even taken the bar of soap from the soap dish that sat over the bathroom sink.\n\n\"I found someone else,\" Vanessa shrugged when Douglas finally located her, confronted her.\n\nVanessa was not happy when Douglas was able to produce the receipts for much of the furniture. She also balked at returning the seven thousand dollar engagement ring to Douglas.\n\n\"You will pay for this,\" Vanessa coldly told Douglas when she returned the ring and handed him a cashier's check for the furniture.\n\nHe had lived in fear for the next seven months; Douglas believed Vanessa when she said those cold words. Thankfully, though, Vanessa Blanchard was confined to Northeast Wellness Center, in Paulton, Louisiana.\n\nVanessa had come home to find her boyfriend in bed with their next door neighbor. The murder of the two men had been cold, calculated, gruesome.\n\nVanessa had been beautiful, sexual, and Douglas had believed he had loved her. Becky was beautiful, sexual as well. And when Becky said she loved him, Douglas believed she meant those words.\n\nAt ten after seven, Rochelle sent Becky a text, asking if she still wanted Rochelle to come for dinner. Becky responded with a 'you better; it's almost ready.'\n\n\"Now, you behave yourself,\" Becky waggled a finger at Douglas. \"You hear?\"\n\n\"What?\" Douglas laughed out loud. \"Becky! What you think I'm going do?\"\n\n\"Like I know how men think?\" Becky asked as they both heard a car door slam. \"Go get the door.\"\n\nRochelle was nervous. Suppose she didn't like Becky's boyfriend? She already didn't like him; he was Becky's boyfriend and therefore was competition for the beautiful girl's affections.\n\nSuppose Becky's boyfriend didn't like her? Rochelle knew all too well the sway men had over some weak-willed women. Becky didn't seem to be weak-willed, but then again, Rochelle had not seem weak-willed, and she'd thrown away a good marriage, the chance of a good life because of Chad and Tommy, two domineering men and her own inability to tell those men to take a hike.\n\n\"Hi, you must be Rochelle,\" Douglas smiled warmly as he opened the door. \"Uh, Becky? Uh, forgot tell me she's a cop, huh?\"\n\n\"I told you; you just didn't listen,\" Becky called out from the kitchen. \"Typical man. You just heard what you wanted to hear.\"\n\nRochelle felt her pussy get wet, looking at the handsome blond. He was model handsome, and his warm brown eyes were smiling at her as he ushered her into the home. His eyes were smiling at her, not leering at her, not sneering at her.\n\n\"And what did I want to hear?\" Douglas asked.\n\n\"That she's beautiful and after that, your brain just stopped, I'm sure,\" Becky responded.\n\n\"Dinner's just about ready; I got us some white wine go with it. You want a class?\" Douglas offered to Rochelle as he shut the door.\n\n\"I uh, yeah, I please,\" Rochelle stammered, feeling off-balance around the handsome man.\n\nThe wine was good. The food was excellent; Becky gave all credit to her sister in law, Layla. Douglas amused them with tales of his first tour on an oil-rig.\n\n\"And you got to be careful,\" Douglas said. \"They find out something bothers you? They'll do it and do it and do it until you're ready to kill them, and then they're all like 'What? Can't take a joke?' when it's no joke.\"\n\n\"Sounds like high school,\" Rochelle smiled.\n\n\"Uh huh. Yeah, some of them? Hit their peak in high school,\" Douglas agreed. \"Like Richard Richards? Comes up to me and says, 'Hey, Douglas, say you go camping with a bunch of us guys and you get really drunk and you wake up to find your ass is really sore and your lips are all sticky. You going tell anyone?'\"\n\n\"What? That's, they would do that?\" Becky asked.\n\n\"But I'd heard that one in high school,\" Douglas said. \"You say 'no' and they come back with 'want to go camping?'\"\n\n\"As if!\" Rochelle snorted.\n\n\"So I said, 'no, I wouldn't tell anyone,'\" Douglas said, tearing off a chunk of pork chop. \"And before Richard can say that stuff about 'want to go camping?' I hit him with 'because if I tell anyone, they'll want to know where I buried your bodies.'\"\n\n\"Cute. That's cute,\" Rochelle nodded.\n\nDouglas resumed eating. Rochelle swallowed her mouthful of food and told them how she'd become a cop.\n\n\"I'm sitting in my dumpy one room apartment, Leslie and me, we'd just finished a gig; God! I hated dancing, always felt so disgusting afterward, Leslie loves it, she's still doing it,\" Rochelle said. \"Anyway, I'm sitting there, and on Performance twelve? That Summer Duhon? That reporter is doing this thing on women cops.\"\n\n\"Eww, hate her,\" Becky interjected. \"With that stupid 'Hi-yee' and 'Bye-yee' stuff.\"\n\n\"And she's showing this Becky Yuma; woman's been a cop longer than I've been alive, and Elise Richards; her dad's a cop and Elyse is drop dead gorgeous, she's a mom and a wife; she's one stopped that bank robbery couple years back,\" Rochelle continued.\n\n\"Oh! Oh yeah, remember that!\" Douglas interrupted. \"Drove a van right through the front doors, jumped out shooting.\"\n\n\"That's it,\" Rochelle agreed. \"And showed Georgie Sanders; woman broke up a ring of dirty cops; she was still a rookie, but managed take down these vicious cops.\"\n\n\"Out in the Waters Projects? Remember that. Didn't know she'd been a rookie at the time,\" Douglas agreed.\n\n\"Y'all, y'all know I don't have a clue what y'all are talking about,\" Becky admitted.\n\n\"But I'm sitting there, looking at all this and I say to myself, 'I can do that. I mean, maybe not at the same level as Elyse or Georgie, but I can do that.' And so went and looked up how to sign up,\" Rochelle said. \"Apparently I wasn't the only one seen that thing on the news; they had almost a thousand women signed up.\"\n\n\"Oh my goodness!\" Becky said.\n\n\"All of them become cops?\" Douglas asked.\n\n\"You kidding? More than half of them dropped out first week,\" Rochelle smiled. \"Becky, I hate asparagus, I mean hate it with a capital 'H' but this is delicious.\"\n\n\"Layla's one showed me how make it; I hate it too,\" Becky laughed.\n\n\"I take all the blame; I told Becky I love it,\" Douglas said.\n\n\"You know, I'm trying real hard to not like you,\" Rochelle confessed.\n\n\"Really? But why? I'm so loveable,\" Douglas smiled. \"Yeah, I get it. I'm trying real hard not to like you either.\"\n\n\"What? Why?\" Becky asked the pair of them, head swiveling from Rochelle to Douglas.\n\n\"Because, silly, he's my competition,\" Rochelle admitted to Becky.\n\n\"And there's no way I can live up to what she can, what the two of y'all can do,\" Douglas agreed.\n\n\"But y'all, there's no...\" Becky argued.\n\n\"I mean, she's beautiful, and soft and pretty, and I'm just a hairy smelly man,\" Douglas continued.\n\n\"And he's got a dick, shit! He can give you kids; what I got?\" Rochelle agreed.\n\n\"But there's no competition,\" Becky again said. \"I love y'all both.\"\n\n\"You love me?\" Rochelle asked.\n\n\"And I love you too,\" Douglas said. \"Tell Layla I love the cauliflower puree too.\"\n\n\"Yeah, I do,\" Becky said to Rochelle. \"I mean, what we did last night?\"\n\n\"Oh my God! You didn't! You told him what we did?\" Rochelle asked, face flaming.\n\n\"Well, yeah, he's my boyfriend,\" Becky said.\n\n\"Yeah, she did. Made me jealous,\" Douglas said. \"There any more asparagus?\"\n\n\"No; I'll get more next time,\" Becky said.\n\n\"I am. So. Embarrassed,\" Rochelle said.\n\n\"I, Rochelle, you, you ashamed of what we done?\" Becky asked, feeling horribly off-center, almost nauseous now.\n\n\"It helps any? Becky said it was beautiful,\" Douglas said, putting his plate into the dishwasher. \"This pan go in the sink or dishwasher?\"\n\n\"No. Of course not,\" Rochelle stammered. \"It's just that, it's just, it's just so personal, you know?\"\n\n\"Neither; it's cast iron, Douglas,\" Becky said, the feeling of being unbalanced not diminishing.\n\n\"And? Yeah, it's personal, but I'm not going to keep secrets from Douglas,\" Becky said, afraid to get up; she was sure she'd fall over.\n\n\"I, listen, want me leave y'all alone?\" Douglas asked softly.\n\n\"No,\" Rochelle whispered.\n\n\"But you, we, we going make love? Again? I mean, not right now, but ever?\" Becky asked Rochelle.\n\n\"Yes, I, God damn, I, I think I'm in love with you, I mean, not just love you, but in love with you,\" Rochelle blurted out.\n\n\"Want me to leave?\" Douglas again asked.\n\n\"No,\" Rochelle said, getting to her feet.\n\n\"But you're not leaving,\" Becky insisted.\n\nRochelle's hand went to the buttons of her uniform blouse. She smiled nervously as she undid the first button.\n\n\"No, I'm not leaving, you're not leaving,\" Rochelle said, undoing the second button. \"No one's leaving.\"\n\nRochelle led the procession to Becky's bedroom. Becky followed, also undoing the snaps of her blouse. Douglas brought up the rear, unsure of what to do.\n\nAt the side of Becky's bed, Rochelle turned to say something. Becky stepped up and pulled Rochelle into an embrace. The two women kissed, tongues tasting tongues. Becky's hands found the clasp of Rochelle's plain white bra and unhooked the garment.\n\n\"You, uh you not getting undressed?\" Rochelle asked Douglas.\n\n\"I uh, I wasn't, I didn't know if y'all want...\" Douglas stammered.\n\nBecky released Rochelle, turned and pulled Douglas down for a passionate kiss. She began to tug his pullover shirt up.\n\n\"We want you, um, to join us,\" Rochelle assured the handsome blond.",
        "Rochelle leaned up and gave Douglas a soft kiss on his lips. She then stepped back to give Becky enough room to pull the man's shirt up and off.\n\n\"Nice. Mm hmm, very nice,\" Rochelle thought, looking at Douglas's muscled torso.\n\nDouglas used his toe to wiggle out of his left boot, then his right boot. Becky helped him undo his belt, then Becky got to the task of undoing her own belt buckle, her own blue jeans.\n\nNow nude, the three were somewhat unsure of what to do. Rochelle lay down on the bed, unsure of how to proceed. Douglas stood by the side of the bed, not knowing if he should approach Becky, or Rochelle first.\n\nBecky scrambled into the bed, lay on top of the reclining Rochelle and kissed the blonde woman. She then wiggled down and took Rochelle's left breast into her hands. She reached out with her tongue and licked around Rochelle's areole, flicking at Rochelle's hard nipple.\n\nBecky then sat beck and looked pointedly at Douglas. Becky pointed to Rochelle's right breast, then again bent to the task of pleasuring Rochelle's left breast.\n\nDouglas climbed into the bed, softly kissed Rochelle's gasping mouth, then bent his head and began to lick at Rochelle's right breast. Rochelle's hands came up and pressed both Becky's and Douglas's mouths firmly against her breasts.\n\nBecky wiggled down and kissed her way from Rochelle's left breast to Rochelle's sprigs of pubic hair. Douglas squeezed Rochelle's right breast in his hand while his mouth descended onto her left breast. Then, while Becky wiggled to kneel between Rochelle's spread legs, Douglas and Rochelle shared a passionate kiss.\n\n\"Mmph!\" Rochelle cried out, her voice muffled by Douglas's kiss.\n\nBecky used fingers and tongue on Rochelle's fragrant pussy. She licked and fingered Rochelle to two orgasms, then wiggled up again. She lay between Rochelle's splayed legs and pressed her bald pussy against Rochelle's blonde pussy. She sucked on Rochelle's left nipple while rubbing her pussy hard against Rochelle's crotch.\n\n\"Mmph!\" both Becky and Rochelle cried out.\n\nDouglas released Rochelle's lips and reached out for Becky. He kissed Becky, then gently rolled Becky to lie on her back.\n\nRochelle and Douglas took turns kissing Becky, kissing, nibbling and sucking on Becky's breasts. Then Rochelle wiggled down to kneel between Becky's legs while Douglas wiggled up and presented his cock to Becky's lips.\n\nBecky stroked Douglas's cock a few times, then began to work her mouth up and down the length of him. She tensed when Rochelle's hot tongue swiped over her clitoris. Becky tensed a second time when Rochelle thrust three fingers into Becky's pussy.\n\n\"Mmph! Oh God yes,\" Becky mumbled out when Rochelle's fingers and tongue brought her to orgasm.\n\n\"Oh, aw shit,\" Douglas grunted and began to spurt his sperm into Becky's sucking mouth.\n\nFor a long moment, Douglas lay, panting. He watched as Rochelle's mouth and fingers brought his girlfriend to another orgasm.\n\nRochelle was perched on her knees, sexy ass up in the air. Her breasts dragged against the comforter as she feasted on Becky's pussy. Rochelle's pretty face was the picture of contentment as she pleasured Becky.\n\nDouglas's cock began to revive, watching the beautiful Rochelle pleasuring the beautiful Becky. Becky twisted and kissed Douglas, her small hand stroking his renewed erection.\n\n\"Rochelle, my man, he fuck you?\" Becky grunted out as Rochelle brought her closer to another orgasm.\n\n\"Mm hmm!\" Rochelle eagerly agreed, raising her ass higher.\n\n\"You sure?\" Douglas asked his girlfriend.\n\n\"Yeah, I ung, oh God, I'm sure,\" Becky grunted as Rochelle sucked hard on her clitoris.\n\nDouglas knelt behind Rochelle. Her pretty little anus winked at him. Underneath, Rochelle's pink pussy lips were plump, puffy and wet with her excitement.\n\n\"Ugh!\" Douglas grunted as he pushed himself into Rochelle's snug pussy.\n\n\"Oh, oh God yes,\" Rochelle cried out as Douglas's cock pushed into her pussy.\n\n\"Isn't he good?\" Becky quietly asked Rochelle, combing her fingers through Rochelle's blonde hair.\n\n\"Uh huh,\" Rochelle groaned her agreement.\n\nEven though he'd just blown a load into Becky's hot sucking mouth, Douglas didn't think he'd last very long. Rochelle's pussy muscles squeezed and pulsed around the shaft of his manhood as he thrust into her. He attempted to distract himself by thinking of his work the previous fourteen days. He thought about getting seasick on the boat. He thought about the hot, wet pussy that was making obscene squishing sounds around his cock. He thought about the smells of the oil rig, the smell of the warm salt air and the smell of the machinery. Douglas thought of the heavy musky scent of Rochelle's hot wet snug pussy that was squeezing his cock tightly while Rochelle shook in orgasm.\n\n\"Aw fuck,\" Douglas cried out and began to pump his sperm deep into Rochelle's pussy.\n\nA moment later, Douglas pulled his limp cock from Rochelle's pussy. He flopped onto the bed next to Becky and the two kissed. Then Rochelle knee-walked forward. Douglas moved as Rochelle straddled Becky's face.\n\nDouglas's cock slowly, steadily resurged as he watched Becky licking at his semen as it drooled from Rochelle's pussy. Douglas knelt between Becky's spread legs, looking at Rochelle's beautiful backside while Rochelle knelt over Becky's face.\n\n\"Oh yes, that's it, Sweetheart,\" Becky encouraged as Douglas pushed himself into her pussy.\n\nDouglas was able to thrust in and out of Becky's snug pussy for several long strokes. She screamed in orgasm, then renewed her efforts to pleasure Rochelle as Rochelle gripped the headboard of Becky's bed.\n\n\"Aw shit, aw damn it,\" Douglas finally groaned and squirted a small load of semen into Becky's tight pussy.\n\nBecky and Rochelle switched; Becky straddled Rochelle's head and fed Rochelle her pussy, fed Rochelle the minimal amount of semen Douglas had managed to give her. Even watching the lesbian action, Douglas's cock was finished for a while.\n\nDouglas woke to the sounds of Becky and Rochelle whispering. Rochelle was dressing into her police uniform while Becky wore a simple U.L.D. football jersey, her usual sleep wear.\n\n\"No, Becky, I'll just grab...\" Rochelle protested.\n\n\"Rochelle, you're not leaving here without eating something,\" Becky protested and padded from the room, her panda bear slippers making no sound on the plush carpet.\n\n\"Your girlfriend's a big gigantic pain in the butt,\" Rochelle said to the wide-awake Douglas.\n\n\"Yeah,\" Douglas smiled. \"Good thing she's so beautiful, huh?\"\n\n\"I guess,\" Rochelle smiled.\n\n\"And uh, she's my girlfriend? Uh, thought she was your girlfriend,\" Douglas asked.\n\n\"Not when she's being a pain,\" Rochelle smiled and leaned over.\n\nShe softly kissed Douglas's lips. Then Rochelle playfully messed up his already tousled hair.\n\n\"Last night was, was, wow,\" Rochelle softly whispered.\n\n\"Yeah, wow is 'bout only word I can think of,\" Douglas agreed. \"We going see you again?\"\n\n\"I guess. Your girlfriend already invited me back for supper tonight,\" Rochelle smiled.\n\nShe gave Douglas another kiss then left the bedroom. Douglas drifted back to sleep. He woke again when he felt Becky's hot mouth around his cockhead.\n\nOver lunch, Becky brought up the previous evening's activities. Douglas warily commented that he had enjoyed himself, really liked Rochelle.\n\nHe did not say he hoped they'd do it again. He did not offer any opinion on how tight Rochelle's pussy had been. He did not say he wanted to see if Rochelle's ass was as snug, as hot as Becky's ass.\n\n\"You uh, you get mad if she moves in?\" Becky asked.\n\n\"What? I, Becky, Sweetheart, this is your house,\" Douglas said.\n\n\"Douglas, you live here too,\" Becky reminded him. \"It's your house too.\"\n\nKnow what? Yeah, I, I'd feel a whole lot better you had someone here while I'm offshore,\" Douglas admitted. \"And, shit, who'd be better than a cop?\"\n\n\"And that. That's why I love you,\" Becky declared, picking up their plates.\n\nRochelle was late for supper. When she came into the house, her eyes were red. Quietly, she told Douglas and Becky she'd had to accompany a little girl to the hospital. The girl had an accident, had soiled herself, and the step-mother had beaten the three, almost four year old girl so severely that the child might not live.\n\n\"How? How in the God damned hell can anyone do that?\" Rochelle screamed, fresh tears pouring from her eyes.\n\nThe three did not make love that night. The three climbed into bed, sandwiching Rochelle between them.\n\n\"I'm off today,\" Rochelle told them over breakfast the next morning.\n\n\"Oh good,\" Becky smiled. \"After yesterday? Bet you need a little time off.\"\n\n\"And I uh, I get Gloria and Kathleen tonight; get them for a couple of hours,\" Rochelle said.\n\n\"Supposed rain all day,\" Becky said. \"What y'all going do?\"\n\n\"Beats me,\" Rochelle admitted. \"Usually we'd go to Mouton Park but with it raining like this?\"\n\n\"Bring them over here; we'll make pizzas,\" Becky offered.\n\n\"With the homemade sauce?\" Douglas asked.\n\n\"Well, uh, yeah, what you think?\" Becky retorted. \"Like I'd make a pizza any other way?\"\n\n\"Listen, uh, Kathleen? Is super O.C.D. about food,\" Rochelle warned. \"I mean, the military's not as picky as she is.\"\n\n\"Then we'll get along just fine,\" Becky assured her. \"Ask my mom. My mashed potatoes touched the peas? I threw a fit.\"\n\n\"Might have noticed?\" Becky waved her hand around. \"House is spotless most of the time?\"\n\n\"Bedroom's not,\" Douglas teased.\n\n\"Will be, you keep it up,\" Becky warned. \"Now, I need get on my Statistics; I swear, I'm about lost in that class.\"\n\nThat afternoon, Gloria and Kathleen came into the house, looking around with the curiosity of children. All they knew was that this was Miss Becky's house and Miss Becky was a friend of their Mommy's.\n\nGloria was slim, slightly tall for her age. Her brown hair hung down to her waist, and was in a ponytail right now. She had warm brown eyes on her pretty face and a smile that was missing three teeth.\n\n\"Oh! How much the Tooth Fairy give you for them choppers?\" Douglas asked, shaking the girl's hand when Rochelle introduced him to her daughters.\n\n\"Five bucks each,\" Gloria excitedly told him. \"And? Got another one's real loose, see?\"\n\n\"Five bucks? Wow!\" Douglas smiled.\n\nKathleen was a miniature version of her mother. Blonde hair, bright blue eyes, brilliant smile. Because her Mommy and Miss Ann both wore their hair just touching their shoulders, Kathleen demanded that her hair be cut to just touching her shoulders.\n\n\"Five bucks? Well, bumpy dump!\" Becky exclaimed, entering the living room from her kitchen. \"All I ever got was a dollar!\"\n\n\"Bumpy dump?\" Rochelle giggled as both Kathleen and Gloria squealed with delight over the odd words.\n\nSince the rain was really coming down, Becky suggested that Rochelle and Gloria and Kathleen could play 'hide and seek' in the house. Gloria and Kathleen immediately ran off to find some place to hide while Rochelle counted loudly to twenty.\n\n\"Bumpy dump?\" Douglas asked, affectionately rubbing Becky's blue jean clad rump as he reached into the refrigerator for a beer.\n\n\"Uh huh,\" Becky smiled. \"Ever had go real bad? Felt like it was nothing but rocks coming out? That's a bumpy dump.\"\n\n\"Oh. Kay. Makes my butt hurt just thinking 'bout that,\" Douglas said and smiled as he heard one of the girls squeal. \"Think Mommy found one of them.\"\n\n\"Miss Becky, where's a good place hide?\" Gloria whispered loudly, running into the kitchen.\n\n\"Behind the table right there,\" Becky pointed.\n\n\"Um dee dum dee dum, anyone seen my Gloria?\" Rochelle asked, coming into the kitchen. \"Hmm? Anyone seen my Kathleen?\"\n\n\"Who?\" Becky asked, stirring the tomato paste into the sizzling garlic and onion and bell pepper puree in the large cast iron skillet. \"Who? Gloria? Kathleen? Rochelle, you sure you had any kids with you?\"\n\n\"There were here a minute ago,\" Rochelle smiled, spotting Gloria hunkered down behind her chair at the kitchen table.\n\n\"Don't have a clue who you talking about,\" Becky shrugged.\n\nIn the living room, Douglas had secreted Kathleen behind his recliner. Of course, Rochelle had spotted the girl's tennis shoes sticking out but walked past, 'missing' her daughter.\n\n\"Okay, she's gone,\" Douglas whispered to Kathleen when Rochelle entered the kitchen. \"Now, hurry back into the bedroom, okay?\"\n\nKathleen pretty much gave away her location by giggling. If her giggle hadn't alerted her mother, her pounding feet on the hardwood floor of the hallway certainly did the trick.\n\n\"I'll get you for that,\" Rochelle smiled as she walked past Douglas.\n\n\"So scared,\" Douglas said, smiling.\n\nThe pizzas were a hit with the girls. Kathleen opted for a cheese pizza; Becky made Kathleen put how much sauce she wanted, then how much cheese she wanted. That way, the fussy child would have no complaints about the pizza when it came out of the oven.\n\nGloria also made her own pizza, but hers had pepperoni slices added on top. She made a haphazard design of a heart on the small circle of dough.\n\n\"Mr. Douglas likes mushrooms on his; isn't that horrible?\" Becky announced as she made Douglas's pizza.\n\n\"That's bumpy dump!\" Gloria agreed with Miss Becky.\n\n\"Yeah, bumpy dump,\" Kathleen echoed.\n\n\"Both of y'all can just stick that pizza in your ears, hear?\" Douglas smiled.\n\n\"Um, excuse me, but Mommy likes mushrooms too,\" Rochelle smiled and accepted a bite of Kathleen's pizza.\n\nDouglas shook hands with both Gloria and Kathleen when they left. Becky insisted on hugs instead.\n\n\"You coming back?\" Becky whispered to Rochelle as Rochelle made sure that the girls had everything they'd come in with.\n\n\"I want to, but I've got the morning shift,\" Rochelle whispered. \"So, see you tomorrow?\"\n\n\"Okay. Love you,\" Becky said, softly touching Rochelle's hand.\n\nDouglas wasn't surprised when Becky 'dragged' him to the bedroom the moment the door closed behind Rochelle and Gloria and Kathleen. He was surprised when she lay on her back, taking a submissive pose.\n\n\"Love you, Baby,\" Becky whispered as Douglas thrust into her wet pussy.\n\nWhen Becky brought up the idea of her moving in to their home, Rochelle did not hesitate. She had a belly full of neighbors that thumped, banged, screamed through the thin walls, thumped, banged, and screamed directly overhead. She had her belly full of loud music thumping and groaning through the walls, especially when she returned from a late night shift and was trying to sleep through the daytime hours.\n\n\"Okay, but don't be teaching my girls any more stuff,\" she smiled and kissed Becky. \"Jared and Ann called me, wanting to know what 'Bumpy Dump' meant.\"\n\n\"Just means 'big old pain in the butt,'\" Douglas smiled. \"Whenever you're ready, we'll take my truck to get your stuff, okay?\"\n\nRochelle's ex-husband, Jared Broussard came over with his own pickup truck and helped his ex-wife and Douglas as they emptied out the apartment. Douglas was handsome, knew he was handsome, but the fawning attention Rochelle was giving to the scrawny, nondescript Jared had Douglas feeling insecure about his attractiveness.\n\nMuch of what came out of Rochelle's apartment went into a small storage unit. There was no room for her futon or small table and chairs in Becky's home. Becky had her own pots and pans and dishes and glasses. The spare bedroom in Becky's home was filled with Gloria's and Kathleen's outfits, books and toys and Rochelle's clothing. Whether Jared believed that Rochelle was actually sleeping in the spare bedroom or not, he didn't say.\n\n\"I'm going to kill your wife,\" Rochelle threatened, returning to the home from her apartment.\n\nJared looked up from the ice-cold beers he and Douglas were swilling and smiled. Rochelle grabbed Douglas's can of beer and gulped half of the can in one swallow.\n\n\"I go to my apartment; clean it up before dropping off the keys?\" Rochelle snapped, handing Douglas his severely depleted beer. \"And guess who's putting her vacuum cleaner into the trunk of her car? Yes! That's right! That wife of yours.\"\n\n\"That wife of mine has a name,\" Jared smiled, finishing his can of beer.\n\n\"Uh huh. Saint Ann,\" Rochelle snapped, stomping into the kitchen to get a cup of coffee.\n\nDouglas left a few days later for his second fourteen day shift. Both Becky and Rochelle gave him a warm, loving send-off, then crawled back into the rumpled bed to sleep for a few more hours.\n\nRochelle roused, smelling coffee, smelling cinnamon rolls. She padded, nude, from bedroom to kitchen.\n\n\"Hey, was fixing get you,\" Becky said, pulling the hot rolls from the oven.\n\nRochelle saw that her mug was already on the kitchen table, light curl of steam rising from it. She sat and sipped the rich brew.\n\n\"So, what time you go in today?\" Becky asked as she slathered homemade icing onto the four large rolls.\n\n\"Don't,\" Rochelle said. \"Got the early shift tomorrow.\"\n\nAfter their breakfast, Becky piled her hair on top of her head. She went into the hall bathroom and lighted three candles, then began to fill the whirlpool bathtub.\n\nA jasmine-vanilla bath bomb filled the dimly lighted room with its wonderful scent. Rochelle came into the room and the two women kissed. Becky urged Rochelle to get into the bath.\n\n\"Be right back,\" Becky promised, leaving the room.\n\n\"Oh, this is nice,\" Rochelle sighed, laying back in the large tub.\n\n\"'Bout get a lot nicer,\" Becky promised, closing the door.\n\nRochelle slid over so that Becky could get in. Becky turned off the water, then turned on the jets. For a few moments, the two women let the water pulse around them. They kissed softly, hands gently touching each other.\n\n\"And...\" Becky husked, turning on her waterproof vibrator.\n\n\"Oh, Becky,\" Rochelle sighed happily as the waterproof toy pressed against her puffy pussy lips.\n\n\"Ung!\" Rochelle grunted as Becky's mouth captured her hard nipple and delivered a light bite.\n\n\"Oh,\" Rochelle sighed out as Becky slid the humming toy into her depths.\n\nRochelle was satiated by the time they crawled out of the tub. Becky had used the toy, used her fingers, and used her mouth on Rochelle's body. Becky had even plumbed Rochelle's rectum with first fingers, then vibrator.\n\nAfterward, they lolled on the couch, still nude, and watched a Dallas Sanantonio movie. The brunette beauty took on six 'bad men' and managed to subdue them with her mouth, pussy and ass. Then, Dallas Sanantonio's deputy, a beautiful red head with enormous breasts cleaned Dallas's gaping rectum and sloppy pussy of all the semen, using her mouth. And, the entire time, Dallas kept her cowboy hat firmly on her head.\n\nAfter a light nap, after making love, Becky cooked them a pasta primavera. As usual, Becky gave all the credit to her sister in law. Rochelle did point out, Layla Greene was nowhere in sight. She may have given Becky the recipe, but it was Becky's labors that had prepared the meal.\n\nRochelle again woke to the smells of coffee. She could also smell bacon. Nude, she padded to the kitchen. Becky turned from the stove and gave Rochelle a warm smile.\n\n\"Just about ready, Sweetheart,\" Becky smiled, putting a slice of American cheese onto the black pepper biscuit's bottom half.\n\nRochelle watched as Becky slid a perfectly poached egg onto the slice of cheese, then layered three pieces of bacon onto the egg. A drizzle of honey and a smear of butter went onto the top half of the biscuit and Becky put the plate in front of Rochelle's seat at the table, two biscuit sandwiches ready for devouring.\n\n\"Going spoil me,\" Rochelle said, seeing the glass of orange juice and the cup of coffee waiting for her.\n\n\"Well, maybe you deserve to be spoiled, Sweetheart,\" Becky said, kissing her. \"Ever think of that?\"\n\n\"No, Becky. If anyone deserves to be spoiled, it's you,\" Rochelle said.\n\nAfter Rochelle's hurried shower, she put on her Baylor Lake Police uniform. The dawn had not even broken when Rochelle stepped outside. From the doorway, Becky watched the beautiful blonde get into her cruiser. With a wave, and a toot of her horn, Rochelle pulled away from their home.",
        "Becky felt a sense of loneliness envelope her. Douglas was still off-shore and now Rochelle was driving away for a shift. She felt the weight of depression settle down on her shoulders. She knew she had some studying to do; so far she was still maintaining a perfect GPA. Thinking of school, Becky glanced across the street toward Monty's home. She wondered if Todd was keeping up with his studies.\n\n\"Fuck him; who cares if he's keeping up with his studies,\" Becky snarled, slamming the door shut.\n\n\"You care,\" a voice in her head said.\n\nRochelle's pillow had AA light scent of Rochelle. Becky smelled her lover's pillow and even kissed the pillow softly as she drifted off to sleep.\n\n\"Have to pull a double; Frankie's out,\" Rochelle said when Becky answered her phone. \"Wife went into labor and she's not due for another two months.\"\n\n\"Oh no! I'll pray for her,\" Becky promised.\n\n\"So, don't hold supper for me; I'll just grab a bite somewhere,\" Rochelle went on.\n\n\"Be careful,\" Becky said.\n\n\"You too, Sweetheart,\" Rochelle said, then ended their call.\n\nRochelle colored slightly when she realized she'd called Becky 'Sweetheart' in front of her Captain and two other officers. She managed to turn and stride out of the precinct, head held high, shoulders squared.\n\nDallas Sanantonio kept Becky entertained. The beautiful brunette was happily servicing a red headed beauty with her tongue and fingers while a very well-endowed man plunged his cock in and out of Dallas's greasy anus. The man's sperm dribbled from Dallas's raw looking pussy. And as always, Dallas had her cowboy hat on her head, even as she flicked her tongue over the red head's puffy pussy lips. Dallas had her boots on her feet as she knelt between the red head's spread thighs.\n\nBecky bounced on her glass vibrator while watching the obscene action. The glass toy had been ice cold when Becky had brought the greased tip to her tightly clenched anus. Now, the instrument was body temperature warm as Becky bounced briskly.\n\n\"The three actors grunted and groaned in pleasure. Becky likewise grunted in orgasm. The man pulled his spurting cock from Dallas's stretched anus and liberally coated pussy, anus and buttocks with sperm. Becky turned the video off when the red head began to clean Dallas's buttock with her tongue.\n\n\"Meat loaf,\" Becky decided, pulling a pound of ground chuck and a pound of ground pork from the freezer. **.**.**\n\nShe cleaned the glass vibrator and put it into the freezer. The microwave made quick work of defrosting the meat and Becky worked slowly, methodically to assemble the meal.\n\nWhile the meat loaf baked, Becky did her homework. The alarm on her cell phone rang out and she hurried to the kitchen to check her meat loaf.\n\n\"Brown sugar, ketchup, garlic powder...\" Becky read out the ingredients and poured the mixture over the meat loaf.\n\nWhen Rochelle wearily crawled into bed, Becky roused. Rochelle sighed in pleasure when Becky hugged her tightly. They kissed, just a lip-to-lip kiss, then both women drifted off to sleep.\n\nThe smell of coffee and bacon roused Rochelle from a deep, dreamless sleep. Nude, she padded to the kitchen. Becky turned and smiled warmly at Rochelle, then closed the lid on the waffle maker.\n\nAfter breakfast, both women returned to the bedroom and slowly made love. After a brief nap, Becky woke up, crawled out of bed, and began her schoolwork.\n\n\"I'm going to take a nice bubble bath,\" Rochelle loudly announced. \"I sure hope some beautiful brunettes comes in there and molest me while I'm in the tub.\"\n\n\"Don't think it's molesting if you invite them like that,\" Becky giggled. \"Let me save this.\"\n\nRochelle already had the candles lighted and a cucumber-melon bath bomb dissolving in the steaming water when Becky entered, waterproof vibrator in hand. The two women kissed, then stepped into the water.\n\n\"I love you, love you so much,\" Rochelle whispered, kissing Becky again.\n\n\"Love you too,\" Becky agreed.\n\nMeat loaf sandwiches disappeared milliseconds after Becky put them onto the table. Then, Rochelle pulled an unresisting Becky back into the bedroom for some more loving.\n\nAfter they fell away from each other, panting, sweaty, Rochelle gasped and quickly checked her phone for the time. She sank back down, relieved.\n\n\"What? Give me a heart attack, huh?\" Becky demanded.\n\n\"My weekend with the girls; was afraid I'd missed going to pick them up,\" Rochelle admitted.\n\n\"Kathleen like lasagna?\" Becky asked, crawling out of the bed.\n\n\"Yeah. Likes ravioli more, though,\" Rochelle said.\n\n\"Think she'd like to learn how to make ravioli?\" Becky asked, pulling on a pair of panties. \"Layla told me how to make noodles.\"\n\n\"Bet they'd both get a kick out of that,\" Rochelle agreed. \"I mean, they're still talking about those pizzas.\"\n\nKathleen was amazed that ravioli did not have to come out of a can. Gloria was dutifully impressed as well; she'd never ever heard of anyone making their own noodles before.\n\n\"You sure you never done this before?\" Becky asked Gloria as the girl rolled out the pasta circles. \"You're a pro at this, I swear.\"\n\nKathleen spooned the ground veal and ground pork mixture on top of a pasta circle, then meticulously matched up a second pasta circle on top of the first pasta circle and meat.\n\n\"A little egg wash, crimp the edges, and next one, please,\" Becky completed the assembly.\n\nJared Broussard did not complain when Rochelle texted him that both Gloria and Kathleen were insisting that they get their bicycles. His wife, Ann accompanied him; the step-mother wanted to see where Rochelle was now residing.\n\n\"Oh, yeah, this is a nice, quiet street for bike riding,\" Jared and Ann agreed as they pulled the two bikes from the bed of Jared's pickup truck.\n\n\"I see what you mean,\" Becky whispered to Rochelle as they watched Jared and Ann leaving. \"I hate her too.\"\n\n\"Isn't she just so damned perfect?\" Rochelle whined.\n\nIn the pickup truck, Ann turned to peer at Becky. She then turned and sat back down.\n\n\"You hear Kathleen? I mean, they made pizzas last week? And then they made raviolis tonight? I hate that Miss Becky, I swear,\" Ann declared.\n\n\"You do not,\" Jared laughed. \"I don't believe you could ever hate anyone.\"\n\n\"You're right. I don't really hate her,\" Ann giggled.\n\nThen she gasped. She looked at Jared, then looked at Becky and Rochelle as the two women helped Kathleen and Gloria put on their bike helmets. She looked at Jared again.\n\n\"That Becky and Rochelle, you think they, Jared, are they, you know,\" Ann asked, then whispered, \"Gay?\"\n\n\"Doubt it,\" Jared laughed at Ann's reaction. \"Remember? Told you, Douglas? Rochelle's boyfriend helped us unload Rochelle's apartment? Saw him on that last rig I did. Remember?\"\n\n\"Okay. I mean, I don't have anything against, you know,\" Ann said, then whispered, \"Gays. But don't really think Kathleen and Gloria need to be around that kind of stuff.\"\n\n(Gloria and Kathleen were not around that kind of stuff. When it was Rochelle's weekend with the girls, Rochelle and Gloria and Kathleen slept in the large bed in the guest bedroom. Of course, from time to time, Gloria insisted on sleeping on the day bed in Miss Becky's office. Becky and Rochelle kept the displays of affection to a bare minimum; a soft touch of hands, a light caress of the shoulder. But never kisses, hugs, fondles.)\n\nReturning home on Thursday, Douglas got the lawnmower from the tool shed in the back yard and cut the grass. He complained loudly about the damned pecans that he'd run over as he'd mowed the back yard.\n\nEven though it was not Rochelle's weekend to have Kathleen and Gloria, Jared and Ann agreed that Rochelle could have the two girls visit her at Miss Becky's house for a few hours on Saturday.\n\n\"Honestly?\" Jared whispered to Douglas. \"Ann's been wanting to get pregnant. Kind of hard to be quiet, though, you know with them in the house?\"\n\n\"You do remember how you got them two, right?\" Douglas joked, not knowing that Jared wasn't the biological father of either of his two daughters.\n\n\"Yeah, I think I do,\" Jared agreed, seeing no mocking in Douglas's face. \"But, guess I better get going before I forget, huh?\"\n\n\"Okay, we're going pick pecans,\" Becky excitedly told the girls. \"And after? After we shell them? We're going make a pecan pie; what you think about that?\"\n\n\"That's bumpy dump,\" Douglas teased.\n\n\"Tell Mr. Douglas, he's bumpy dump and slippery snot,\" Becky told the girls as they searched the grass for fallen pecans. \"And if he keeps it up? He won't get any of our pecan pie.\"\n\n\"Yeah!\" both Gloria and Kathleen agreed. \"You hear that, Mr. Douglas? Keep it up and you won't get no pie.\"\n\nAfter their dinner, after they'd each eaten a piece of their pecan pie, Becky pulled a second pecan pie from the cooling rack and wrapped it in foil. Gloria and Kathleen were thrilled that they'd have a pie to give to their daddy and Miss Ann.\n\n\"There is no way y'all got that many pecans; I whacked most of them with the lawnmower,\" Douglas smiled as they watched Rochelle's taillights fading away.\n\n\"Bought a bag of them from Sam's,\" Becky admitted and looked up at him. \"You uh, Douglas? You want kids?\"\n\nThe thought of the small woman, belly big with his baby, large breasts filling with milk had Douglas's cock rock hard. Even though she was on the pill and had very little chance of becoming pregnant that night, Douglas scooped Becky into his arms and carried her to the bedroom. They were on round two when Rochelle came into the bedroom.\n\n\"Oh!\" Rochelle gasped out when Becky informed her that they were practicing making a baby.\n\nThe thought of Becky pregnant, belly becoming big, large breasts filling with milk had Rochelle's pussy dripping wet. She hurriedly stripped out of her clothes and joined the two lovers on the bed. She sucked hot kisses from Becky's gasping mouth while Douglas continued to hammer Becky's pussy.\n\nOn November 3rd, Rochelle, Becky and Douglas cast their vote for the president of the United States of America. On November 4th, when the pundits claimed Joe Biden was the clear winner of the 2020 Presidential race, Douglas shrugged his shoulders and remarked that Trump had clearly pissed off enough people, paving the way for a Joe Biden victory.\n\n\"His own damned fault. Who's the dumb ass said this virus would be over by the spring? Oh well. Whoever's the president, doesn't do shit about getting that pothole on Charles and Wick fixed, now does it?\" Rochelle agreed.\n\nOn November 15th, Becky was startled when her cell phone rang; it was five forty eight in the morning. She answered, keeping her voice low. After all, Douglas and Rochelle were still sleeping.\n\n\"Hello?\" Becky said, slipping easily into the Lotus position.\n\n\"Hey, I uh, man! Can't believe you still got the same number,\" Todd Moore's tired voice said.\n\n\"Mm hmm,\" Becky agreed, voice low. \"Got no reason to change it.\"\n\n\"I uh, anyway, uh, Monty? She uh, she had her baby,\" Todd said. \"Chloe Abigail Moore. Six pounds nine ounces, seventeen inches long; got all her fingers and toes.\"\n\n\"Oh, how wonderful,\" Becky said, not missing the fact that Todd had said 'her baby' and not 'our baby' in his announcement.\n\n\"Anyway, mommy and baby are resting right now,\" Todd said. \"So, I'm making the phone calls, you know?\"\n\n\"Uh huh,\" Becky agreed.\n\n\"I miss you,\" Todd blurted out. \"I love...\"\n\nBecky ended the call, cutting off Todd's declaration of love. She shook her head; Todd's wife had just given birth to their baby, and the immature man was on the phone declaring his love for another woman. She did not see much hope for their marriage.\n\nIn another week, Becky would be going to Sweet Oak, Texas, for the Thanksgiving Holiday. Douglas was scheduled to be off-shore during the week of Thanksgiving. Rochelle did not know yet if she would have to work Thanksgiving Day, but knew either way, she'd be working the Wednesday before and/or the Friday afterward. So Becky would be making the trek alone. During her visit home, Becky planned to talk with her mother about getting off the pill; Becky could feel the desire to be a Mommy building more and more urgent with each passing day.\n\nLayla Greene, Martin's girlfriend had hinted that she had an important question to ask Becky. Becky was pretty sure Layla would be asking her to be Layla's maid of honor; Becky would enthusiastically accept if that was in fact what the big question would be. Hopefully, Martin and Layla's wedding would fall on a day when Becky could bring Douglas and Rochelle to Sweet Oak, Texas.\n\nBecky got to her feet and toweled her sweating body. Nude, she padded into the kitchen to start on their breakfast. Layla had sent her a recipe for pecan Danishes and Becky still had more than half of a bag of the shelled nuts left.\n\nTHE END\n\nAnd, THE END of the 'Write it Down' series.\n\n**Author's Note: I write these stories for my pleasure. I post them here for your enjoyment. I thank you sincerely for reading my stories.\n\nI thank those that take the time to rate my stories, and those that 'favorite' my stories. I especially thank those that take the time to leave comments, whether they be good or bad.\n\nRochelle Esposito, Gloria and Kathleen Broussard, Jared and Ann Broussard are all characters from the 'Yapping Dogs' series in Loving Wives.\n\nCaptain Ritchie Himmler, Rochelle's supervisor is a character first introduced in the 'Men In Blue' series in the Lesbian Sex category.\n\nVanessa Blanchard, Douglas's psychotic girlfriend is a character introduced in 'Don't Poke The Sleeping Bear' in the Loving Wives category.\n\nHave a swell day. And some of you, have a swollen day."
    ],
    "authorname": "JimBob44",
    "tags": [
        "group sex",
        "romance",
        "lesbian romance",
        "ffm",
        "threesome",
        "corona virus",
        "lockdown"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/written-down"
}
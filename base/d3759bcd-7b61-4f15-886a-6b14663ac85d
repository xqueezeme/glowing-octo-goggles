{
    "title": "Master! Master! Pt. 16",
    "pages": [
        "I pushed open my bedroom door and a crowd of girls rushed me. \"Master!\" they all yelled in impatience.\n\n\"Sorry, girls, sorry, I had to get our last member.\"\n\nNeija, clinging to my arm, gave a sheepish smile. \"Sorry.\"\n\nWe stepped into the bedroom, to find that the entire floor was covered in beds. Lean a few on the walls and we'd have a giant padded cell. \"Ok, girls, are you all ready to play tonight?\"\n\n\"Yeah!\" the cheered.\n\n\"Momo wants to go first!\" my cat demanded.\n\n\"No, me!\" shouted Amanda.\n\n\"Get in line, pipsqueaks!\" Betty yelled.\n\n\"Actually, I've decided that Neija will get the first turn.\"\n\nHer ears perked up. \"Me? But I'm dirty and sweaty from being in the woods.\"\n\n\"What a coincidence, I have a shower.\" \n\nI then scooped her up in my arms and carried her into the bathroom with an army of animal-eared girls following me. I sat her down on the counter and turned on the shower, then stripping off my clothes. When I looked at her, she had a sweet smile on her face, her heart free of all doubts and stresses. Once the bathroom began to fill with steam, I stepped through the glass sliding door and invited her in. Under the hot spray, lips and tongues melded, her arms around my neck and mine around her slender waist. \n\nWithout ending our kiss, I retrieved a bar of soap from a rack behind Neija and began to scrub her back. The regal feline purred from the caresses, always loving some good petting. She raised one leg and wrapped it around me, my soapy hand sliding down her bronze thigh. She gasped as grabbed her ass, toned and full like a volleyball player's. I massaged the soft muscle, while between her legs, her tail writhed like a snake. She stepped down and switched to the other leg. I broke our kiss, my lips unable to resist her breasts any longer. They were luscious and full, most similar to Sonja's of all people. She panted as she felt me lick the water off her breasts, having never felt such a sensual touch. Behind us, the bathroom was filled with over a dozen hybrids, all them watching us with flushed cheeks and slick inner thighs.\n\n\"Come on, let's put a show on for them,\" I whispered in Neija's ear. I then pulled away and got behind her, the two of us facing the girls. \"Put your fingers on the ceiling. Let's see how long you can keep them there.\"\n\nShe didn't understand, but did as told, keeping her hands on the ceiling of the shower with the spray directly over her. She leaned her head from side to side, the hot water pouring on her face and riling her up. I stood behind her, soaping up my hands. The girls outside held their breaths, waiting to see what I would do. Despite her newfound compliance, the way that Neija growled and gasped told me that she was trying to brace herself. She was eager to play, but her pride as a lioness wouldn't simply let her act as the desperate nympho. She had to retain some kind of upper hand, maintain a dignity and reserve that no sensation could defeat. If anything, that excited me even more. It wouldn't be any fun if I didn't have to really work to make her orgasm.\n\nI didn't go for the sudden grab. Instead, my fingertips found her flat belly. She shivered from my touch, every animal instinct telling her to defend her vulnerable spot. I dragged my fingers up and down her stomach, making her writhe and shift back and forth to try and stop the tickling sensation. But while her hips were swinging like a chandelier, her hands didn't leave the ceiling. My hands finally found her breasts and I began to massage them with the soap on my palms foaming up. Neija began to whimper, new to such a powerful sensation. She bit her lip, her cheeks turning red, trying to maintain her will and dignity.\n\nThe girls outside were almost pressed to the glass, their curiosity approaching ravenous levels. Several even started massaging their own breasts the way I was massaging Neija's, but they weren't feeling anything close to what they saw in the lioness. They realized that true pleasure would only come in having their Master touch them. I was pulling out all the stops, using every trick I had to turn her breasts against her, making them weapons to tear down her resolve. With the proper technique, I could even use her to make music. By tickling the underside of her breasts, I could trigger a low moan, and by focusing on her nipples, I could raise the pitch. I'll admit, I became a little arrogant, trying to make her sing the main theme to the first level of Super Mario.\n\n\"Master, I can't take it anymore! I'm... I'm... ROOOOOOWR!\"\n\nI grabbed both of her arms with one of mine, keeping her from dropping them as she climaxed. Unable to touch her slit, she began lowering her hips and rubbing her thighs together to try and address the pleasure rampaging through her womanhood.\n\n\"My, my, did you just cum from having your breasts played with?\"\n\n\"You're a jerk, Master,\" she said with a pout.\n\n\"You should be thanking me. I just gave you what I bet is your first orgasm. Besides, I wouldn't feel the need to tease you if you'd just let go of your pride. You said you wanted to play, but you're still so uptight. Now, put your hands against the glass and lean forward with your legs spread. I'll help you loosen up.\"\n\nShe obeyed, assuming the position as if I was about to frisk her. She was facing the girls, all watching her with wide eyes. My fingers slipped between her legs, probing her flower. After her orgasm, she was sensitive beyond measure, so even the softest touching sent bolts of lightning up her spine. I soaped up her entrance, making sure it was as slippery as possible. My cock then replaced my fingers, but rather than entering her, I simply slid it back and forth across her labia. The anticipation magnified the sensations, causing her to let slip a moan before she could stop herself. I continued grinding my manhood against her, loving the look on the girls' faces as they stared at the purple head appearing from between Neija's smooth thighs and then receding like a wave.\n\n\"How long are you going to toy with me?\" she panted. I hadn't even penetrated her and yet I had already drained her stamina.\n\n\"I'll put it in, just as soon as you say \"Master, please fuck me\".\" \n\n\"What?! I agreed to play with you, but I'd never sink so low as to saying that!\"\n\n\"Well then, I guess I might as well just invite the next girl in. After all, you've already had your orgasm, so there's no real point to continuing.\"\n\nFinally, she smiled and even began to laugh. \"To think you could be so cruel. Ok, here it goes. Master, please fuck me!\"\n\nI leaned over and kissed her on the cheek. \"Goddamn, I love you.\"\n\nI didn't give her any warning. Instead, I simply drove into her in a single perfect shot. She moaned at the top of her lungs, as outside, all the girls held their breath. They had been told what it meant to play, but actually seeing it was something else altogether. I had fully penetrated her womanhood; her hot, wet interior smothering my cock, as if trying to both trap me inside and push me out. I grabbed her hips and rocketed up to stop speed, hammering her with all the strength I had and sending her voice bouncing off the bathroom walls.\n\n\"Yes, Master! Yes! Yes! Yes!\" she shrieked in ecstasy.\n\nI fucked her like a machine, loving the sight of the vibrations moving through her magnificent sun-kissed body. Her ass jiggled magnificently, the ripples moving up her shapely form and reaching her breasts, making them slosh like the sea during an earthquake. Her strength was fading, she could not maintain her position. Her outstretched arms, holding her off the glass door, began to shake, and soon, her forehead was pressed to the glass. She was unable to do anything more with me dominating her pussy. But I wasn't done yet.\n\nI wrapped an arm around her chest and pulled her back against me, and with my other arm, I lifted up one of her legs. This granted me access to go deeper and at a different angle, and even better, it gave the girls outside a better view of my cock sliding in and out of Neija's sleeve. \n\n\"Master, kiss me,\" she begged.\n\nI pulled out of her and spun her around. I picked her up and held her against the wall while she pressed her lips against mine. Her long, smooth legs were wrapped around my waist and I returned my sword to her sheath. I resumed fucking her, this time able to bob her up and down on my cock while she stuck her tongue down my throat. Soon enough, I could feel myself reaching my limit. I was about to blow, but of course, I couldn't deny Neija her big finish, and that meant cheating. I grasped the end of her tail and began rubbing the tip between my thumb and finger.\n\n\"Ah, Master, that's not fair!\"\n\nShe made the mistake of ending our kiss, because now I was able to lean past her and begin nibbling on one of her ears. She never stood a chance. She growled in climax over and over again, her body fully submitting to me as I soaked her secret garden with my seed. Her body became limp and her legs released me, but she could not stand on them. I scooped her up in the princess hold and turned off the shower. All the girls backed off to make room as I got out of the shower.\n\n\"Grab her some towels,\" I said.\n\nI carried her out into the bedroom and laid her out on one of the mattresses on the floor. I dried her off with the towels, causing her to purr like a Ferrari. \n\n\"Master, that was amazing,\" Neija hummed with her eyes half-open.\n\n\"Yeah, it was. You did great.\"\n\nShe grasped my hand and held it against her cheek, purring with eyes full of happiness. \"I love you, Master.\"\n\n\"I love you too, you big silly cat. Now go ahead and get some rest.\"\n\nI laid a blanket over her and stood up, my body trembling. After shooting my load, my stamina was greatly depleted, and I would have been happy to just go to sleep, but I couldn't do that to the girls. Luckily, I had a secret weapon.\n\n\"Betty, Leah, you know what to do.\"\n\nThey raced over, my member immersed in Leah's mouth and my lips around one of Betty's nipples. It took only a few moments for the girls to finish their work. Thanks to Betty's nectar of the gods, I felt like I could run a marathon, and after some loving oral service from Leah, my penis stood firm with a fresh erection, as if I hadn't even ejaculated. Best pit crew ever.\n\n\"You two are my rock,\" I said before giving them each a loving kiss. I then turned to the rest of the girls. \"Ok, who's up next?\"\n\n--\n\nWith Betty and Leah acting as my support, I fucked like my life depended on it. I had until sunrise to satisfy every girl, so unfortunately, I couldn't give them all the time I gave Neija, but I made up for it in intensity and by going straight for the sweet spots. As soon as one girl climaxed, I'd move on and deflower the next. I was always surrounded, a hundred eyes focused on me at all times. I had originally thought the girls might get bored waiting for their turns, but they were completely transfixed on the show in front of them. At several points, everything blurred together and I lost track of time, who I was with, and what I was doing.\n\n--\n\n\"Master, we're ready,\" said Chloe and Lola. \n\nChloe was lying on top of Lola as if in the missionary position, the two of them naked with Chloe's butt pointed at me. Goddamn, it's not fair how cute they are. I got behind them, but instead of simply mounting them, I held up one of Lola's small white feet and covered it in kisses. She laughed and squirmed as my lips moved across her toes. I did the same to her other foot, then to Chloe's. I lowered my head and began slurping on Chloe's pussy, making her pink tail curl. Lola stared at Chloe, their faces just inches apart, each with rosy cheeks. Chloe's whimpering, her watery eyes, her wetting lips, it was obvious she was experiencing something incredible and she wanted to feel it herself.\n\nI licked out Chloe for a couple more minutes, fully exploring her tight body with my tongue. I then went down on Lola, kissing her virgin labia, first gently, then with tongue. Lola began to whine from the alien probing, her skinny legs kicking the air as if she was being tickled. Lola and Chloe, they tasted so similar, so sweet. With my tongue, I could tell she was tight, just like Chloe had been her first time. I inserted my middle finger, causing her to arch her back and moan. I stirred her up while licking her clitoris to prime the pump and get her as wet as possible.\n\nOnce the job was done, I sat up and grabbed a pillow. \"Hold on, girls, I want to try something.\" \n\nI lifted the two of them up and put the pillow under Lola's hips so her womanhood was pointed up at an angle. With their bodies raised, I inserted my cock between their kissing pussies, causing both of them to begin to pant. Due to her diminutive size and fragile personality, I'd have to take it slow and gentle with Lola. I began my strokes, grinding between their wet lips, so plump and smooth, and wet with arousal. \n\nAs with Neija, just that simple touch was enough to drive her wild, Chloe as well, even though we had had sex countless times. Their eyes were swimming, their mouths open, their whimpers heard by everyone. I would have liked to stay like that a little longer, but I had a lot of girls to get to. I moved ahead, penetrating Chloe and filling her pussy with my muscle. After all the build-up I had done, it didn't take much to make her react. She moaned as I began my strokes, and below her, Lola watched with both nervousness and envy. I built up the speed of my strokes, soon slamming my full weight against Chloe's body with her pussy stuffed to the maximum. She was being pushed forward and pulled back with her nipples kissing Lola's.\n\nShe came after a few minutes and collapsed on Lola, panting in her ear. Semen was dripping from her slit, and without even me needing to say anything, Leah crawled over and restored my erection.\n\n\"Are you ready for this, Lola?\" I asked.\n\nShe gave an anxious nod. Leah released my cock and I pushed it into Lola. She cried out as I deflowered her, her virgin blood being shed. She spread her legs as far as she could, trying to lessen the intense feeling of penetration. Remembering her own first time, Chloe hugged and nuzzled Lola, trying to comfort her. I began a slow rhythm, kissing the entrance to her womb with my cock. I held them both against me and showed them equal affection. Sandwiched between her Master and her friend, Chloe had a smile on her doll-like face, and Lola, feeling her Master's love for her, perked her ears as my penis infiltrated her flower and my tongue infiltrated her mouth.\n\nAfter Lola achieved her orgasm, they both turned to me and I hugged them. They sat in my lap, the three of us sharing a triple kiss.\n\n--\n\nWith a big smile on her face, Leah released my cock from her mouth, leaving it covered in a thick layer of saliva. I was sitting in a chair against the wall, and as Leah moved away, Momo and Jenny flanked me from the sides. They pressed their tits together with my cock between them, burying it in their combined softness. I groaned in happiness, having never experienced such joy like this. They had grins of satisfaction as they rubbed against each other and massaged my dick. They were both well-endowed, boasting womanly shelves that were great on their own, but when combined, achieved something that not even Betty's divine knockers could achieve. Along with the physical joys of the double titty-fuck, there is the feeling of sexual conquest.\n\n\"Girls, I'm going to cum!\" I said.\n\nThey doubled their efforts, grinding me as hard as they could, trying to smother my cock like they wanted it dead. I soon ejaculated, shooting a stream of semen straight up and splashing it across their breasts.\n\n\"That was so cool!\" they both cheered.\n\n--\n\n\"FUCK! FUCK! FUCK! FUCK!\"\n\nThe one screaming so vulgarly was Betty. She was riding me in the cowgirl position, my cock buried deep in her asshole. The slutty cow milf was bouncing like her life depended on it, as if butt-fucking was the source of her life energy. Every time she dropped her fat ass on me, my body would shake and she'd scream in drunken lust. Were it not for the mattress beneath me, I'd be at risk of her crushing my pelvis. She seemed dead-set on turning her anus into my personal toy. As she rode me, she was squeezing her breasts. Every time she came, milk would spray out, so with her bobbing up and down, twin jets were shooting from her nipples and soaking everyone, even splashing the walls.\n\nIt would have been an amazing sight, and I definitely wished I could see it, but I was otherwise busy and my view was obstructed. Linda, the baboon, was riding my face, looking at Betty. The size of her ass was beyond enormous, it was obscene. It completely smothered my head, my only air coming from the gaps made when she shifted her position. I was tongue-punching both her pussy and asshole, causing her whole body to tremble and making her moan like an opera singer. With every movement she made, her ass cheeks would jiggle as if she was trying to twerk, and I could feel those vibrations through her. I reached around her and grabbed her ass cheeks, squeezing them, spanking them, mashing them together, and doing everything else I could to fully appreciate their presence.\n\nBetty finally moved off me, though collapsed would be a better word. After all the orgasms she had experienced, she was barely conscious. Leah immediately lunged, sucking on my cock and gluttonously licking up the taste of Betty's back door. Once I was back to my prime, Linda saw an opportunity. She dismounted my face, leaving me gasping for air, and moved down to my lap. She must have mated before, because while this definitely was her first time as a hybrid, she didn't show any pain like she was losing her virginity. Like Betty, or should I say, even beyond Betty, her ass was simply too big for us to have regular perpendicular sex, so she had to lean forward and ride me that way. Watching her colossal ass bouncing and jiggling on my cock left me utterly speechless. It was the most beautiful thing I had ever seen. \n\n--\n\nJenny hummed as I embraced her, panted as I kissed her, and moaned as I fucked her. I had her against the wall, she was standing up on one leg while her other leg was extended straight up like she was an acrobat. Her raised leg was across my chest, her fuzzy bunny toes wiggling above my head as I drummed her cervix. It would have been a crime not to take advantage of her flexibility. With her legs so far spread, the depth and freedom of movement I got were amazing, and she was so wet and loose from arousal that I felt like my cock was almost swimming through her. \n\nWith her leaning against the wall, my hands were free to roam her body, from squeezing her breasts to tickling her belly. But what was really driving her wild was my middle finger stirring up her anus, turning the gentle bunny into a ravenous harlot. The faster I fingered her, the more aggressive she became, sucking on my lower lip when we kissed and even separating so she could nibble on my ear.\n\n\"Master! Please! Cum inside me!\" she begged.\n\n\"You never need to ask.\"\n\nI kept fucking her, ignoring her cries of climax until I had one of my own. I pulled out of her, leaving her pussy dripping with semen.\n\n--\n\nTalia couldn't help but shed tears when I tore her hymen, but she didn't stop lowering herself onto my cock. While I was sitting in an easy chair, she was suspended over my lap, her legs spread over the arms of the chair with her feet hanging down the sides. Only my P and her V were in contact. Using just the muscles in her thighs, she started bobbing on my cock, slow, gentle dips to allow herself to get used to it. While she became accustomed to the feeling of being penetrated, I ran my hands through her beautiful feathers and kissed her breasts. Due to her size when she was just a bird, her hybrid form was likewise small and she had flat breasts, but to me, she was stunning and sexy beyond words.",
        "\"Master, do you love me?\" she whined.\n\n\"More than you could ever know,\" I replied.\n\nShe leaned down and kissed me. \"I love you too!\"\n\n--\n\n\"Urg... Gloria? Do you think you could loosen up a bit?\"\n\nI had the gorilla girl on her back and had just broken her hymen. Her limbs were wrapped around me and I was being squeezed with bone-crushing force. I tried to shake free, open up some room to breathe, but every movement I made stirred her up, causing her to moan and squeeze tighter. \n\n\"Gloria, I can't breathe!\" I began thrusting into her, hoping that if I made her climax, she might let go. I could feel the veins in my head bulging, my vision blurring, my face turning red and then purple. \"Someone help me before I pass out!\"\n\n--\n\nI was sitting back against the wall in the main bed with Sonja in my lap. She was between my legs, hers tucked under mine with her round butt pointed at me. I was holding her hands, pulling her back against my lap and driving my cock deep inside her. I was using only the strength in my forearms, letting me move her with greater strength and control. It was a great workout.\n\nSonja was wagging her tail and panting, a big smile on her face with her eyes rolling back in bliss. Betty had her outclassed in the breast and ass department, but when it came to doggy style, there was no one better than, well, a dog. \n\n\"Master, this is so much fun!\" she said.\n\n\"Well it gets even better.\"\n\nI didn't think I'd be able to do it, but I pushed myself up onto my feet without pulling out of her or letting go of her hands. I was crouching with my legs spread far apart, which would have been next to impossible to do under normal conditions, but with Sonja acting as a counterweight, I was able to maintain my balance. I resumed hammering her, now able to add full-body movement to the barrage. Sonja moaned at the top of her lungs, her breasts and ears flopping with every impact.\n\n\"Master, I'm cumming! ARUUUUUUUU!\"\n\nShe howled as I ejaculated into her again and again, flooding her body with an army of swimmers. I finally let go of her and she collapsed on the bed. I leaned over and kissed her cheek. \"Good girl.\"\n\n--\n\nMy limbs felt like lead weights and I could barely move. I don't know how many hours I had been playing with all the girls, but I was exhausted. Betty's milk was doing a great job of keeping me going, and Leah's saliva kept my erection fresh, but still, my body cried for a power nap. \n\n\"Girls, I need to take a break...\" I panted. \n\n\"But Master, it's my turn!\" Shannon, the satyr begged.\n\nA large tail wrapped around me. I was pulled across the sea of beds over to Levi, who embraced me and kissed my cheek. \"It's ok, Master. You've earned some time to rest.\"\n\n\"You are a lifesaver. Just wake me up in thirty minutes and I'll be good as new.\"\n\nLevi then held me close and wrapped her tail around the two of us, sealing us in a scaly cocoon like Elise had done the last time we had sex. Levi was on her back with me resting on top of her, using her breasts as pillows. Wrapped in both her arms and tail, it was pure bliss, and as soon as I closed my eyes, I was asleep.\n\n\"Master,\" Levi murmured. I opened my eyes, feeling like I had closed them just a second ago. I looked up at her and she kissed me on the forehead.\n\n\"It's been half an hour, are you feeling better?\"\n\nShe unraveled her tail from around me and I sat up. My muscles weren't trembling, my mind was clear, and I had digested a lot of the milk I had drunk from Betty, so my energy reserves were restored. \"Yeah, I feel a lot better, thank you,\" I said. With a smile on my face, I got back on top of her and kissed her. \"Wrap us back up, I think you've earned some extra special playtime.\"\n\n\"Of course, Master,\" she said happily. Her tail again wrapped around the two of us, and in the darkness, I made her my woman.\n\n--\n\nI had Tammy, the Komodo dragon, pressed against the wall. I was holding her up as a fucked her like a machine, slamming the entrance to her womb with all the strength she craved. Below her, her huge scaly tail was slapping at the wall while her breasts jiggled against me. She was moaning at the top of her lungs, the only thing she could in the face of such brutality. Of all the girls, she had the longest tongue, and she was sending it down my throat. It would have been a great moment if not for her claws leaving long, deep scratches on my back. Leah was behind me, licking the wounds as fast as she could to heal them. \n\n--\n\nIt was back into the shower, this time with Tessa, the alligator girl. She had requested it, preferring to be wet when we made love. Having the largest tail of any of the girls, taking her from behind wasn't feasible, so we were doing it in the missionary position. It was rather hard to do it this way on the hard floor, but I could never deny her wish. \n\nI pulled back when she came, releasing a beastly hiss and snarl that nearly made me piss myself. I sat up, still inside her, and watched as the hot water of the shower poured on her naked chest. \n\n--\n\nOutside my room was a balcony overlooking the fields surrounding the mansion. It was the perfect place for sex. Bleating shrilly, Shannon received my cock deep inside without complaint. I was taking her from behind, keeping her bent over the railing of the balcony. Her legs were spread, hooves shaking, and her eyes watered as I fucked her. It was pitch black outside with a warm, fresh breeze washing over us. My fondling of her breasts just made her moan louder, sending her voice echoing across the pastures. \n\n\"BAAAAAAAAH!\" she cried, having her umpteenth orgasm.\n\nI pulled out of her and she fell to her knees, but before I could even help her up, she spun around and began servicing me with her mouth. I patted her head, thanking her for her diligence.\n\n--\n\nLeah whimpered as she rode me, but there was a smile on my face. I was on the large bed lying against Betty with my head resting on her chest. She was rubbing her tits against the side of my head, while on my left and right were Sonja and Neija. With loving smiles on their faces, they leaned in, smothering my face with their luscious breasts. The warmth, softness, the feeling of accomplishment, it was overwhelming. To have three busty women trying to suffocate me with their tits while a fourth bounced on my cock, it was beyond hedonistic, it was almost blasphemous.\n\nLeah was ravenous, using me to stir her interior from every angle. The best sex always came from Betty, but Leah had the best pussy. She was the softest and always the wettest. The stimulation of full titty immersion, combined with her riding techniques, cost me my control and I released a white flood into her slender body. Sporting a gleaming creampie, she dismounted and lowered her head, sucking me off as she had again and again this evening. I had ejaculated into her but she demanded her own climax. She refused to give me any rest, forcing me back to a full erection. As soon as I was hard, she was back to riding me, this time with her back to me and my cock in her asshole. \n\n--\n\nI don't know whose bed I was lying on, it didn't really matter. What mattered was Kerrie and her pussy on my face. She and I were in the 69 position, but since she wasn't quite as tall as me, she wasn't able to get my entire cock in her mouth. Amanda, the grizzly, came to the rescue. She bowed between my legs and began licking the exposed shaft, making sure my entire cock got the love it needed. She and Kerrie worked together to satisfy me, my red panda making love to the head while Amanda played with my balls.\n\n--\n\nA row of girls was lined up before me, all of them bent over the side of the bed with their butts pointed in my direction. At one end was Liz, the tortoise, showing off the bone plates on her back, and at the other end was Momo, her tail twisting in anticipation. I started off my getting on my knees and going down on each girl, vehemently hollowing out their pussies with my tongue and drinking in their arousal. Each girl had a slightly different taste, but they were all delicious, and their moans were music to my ears. I moved down the line, finishing with Momo and leaving her pussy dripping.\n\nI went back to Liz, running kisses up her armored back, before sliding my cock into her virgin flower and extinguishing her virginity. I was slow at first, giving her time to develop her tolerance, then I began my strokes, building up my speed over time. At first I was holding onto her hips, then I grabbed her arms and pulled them back, gripping them like the handlebars of a chopper. Her moan was endless, her breasts, suspended and hanging over the bed, rippling from my thrusts. I was merciless, pounding her until she came, releasing a shrill below that I could not classify.\n\nI moved onto the next girl, Piper, the African wild dog. Still wet with Liz's arousal, I slid into Piper like a sheath. I did the exact same combination, deflowering her and then building up my thrusts until I was practically wearing her. Like Sonja, she howled when she came, and even squirted a little. I went down the line, taking a turn with each girl to fuck them into euphoria. I finished with Momo, making her climax again and again and leaving her pussy flooded with semen.\n\n--\n\nFor the entire night, I fucked like my life depended on it, giving each girl the time of their lives and leaving no part of their body untouched. Countless orgasms were experienced by all members present. Time lost its effect on me, my body zipping back and forth between fully energized and dead tired. I would definitely need a medical examination after this. But during the most exhausting moments, I found comfort in the fact that not only was I continuously kissing, licking, or inside someone, but Lorraine was also experiencing the same thing in her own party.\n\nIn her room, the men were all confused as to her actions. They didn't understand why she had them tie her to a table, bent over with her ass in the air. They didn't understand why she'd keep telling them to go rougher, harder, and deeper, even though they couldn't imagine her not being in pain. And the constant ejaculation on her face was definitely a puzzle. But they were having fun. All the men stood around her, taking turns. One would come up behind her, pick an orifice, and have his way with her, with Lorraine often berating him for not being brutal enough. The only time she was quiet was when she had a dick in her mouth, which was almost the entire night. He'd ejaculate into her and move aside to rest while the next man took his turn.\n\nIn both rooms of the house, it was definitely a wild night.\n\n--\n\nThe morning light in my eyes woke me up. The sun had finally risen high enough that it was shining right in my face. I sat up, finding myself in the middle of the bedroom. I didn't even know how I got there. Last I remembered, I was banging Cynthia, the aardvark in the corner. I looked around, finding myself surrounded by naked girls, all sound asleep and very satisfied. I wasn't sure how I felt, somehow both wired and exhausted at the same time. My mouth was definitely killing me. So many hours had been spent making out and going down on the girls, my tongue felt like it had been worn down to the nub. \n\nHoly shit, I was STARVING! \n\nI had been up all night with nothing but Betty's milk and a couple bites of a granola bar keeping me going. I was inevitably going to crash, but I really needed something to eat. I checked the clock; the cooks were probably setting up breakfast. I quietly got dressed and left the bedroom, letting all the girls sleep. I made my way downstairs, taking my time to enjoy the serenity. It had been a while since the mansion was this quiet.\n\nI entered the kitchen, seeing the cooks putting the finishing touches on breakfast and setting it out in typical buffet style.\n\n\"Good morning,\" I said with a yawn.\n\nJim, one of the cooks I had become friendly with, laughed. \"You look exhausted. Did you not get enough sleep last night?\"\n\n\"Let's just say I had a restless night.\"\n\n\"Where is everyone? You and Elise are the only two I've seen so far.\"\n\n\"Just wait, they'll find their way down here eventually.\"\n\nI filled up a plate with food and got myself a cup of steaming hot coffee. Moving into the dining room, I found Elise eating breakfast at the table and sat across from her.\n\n\"Morning.\"\n\n\"I can't believe you made it. I was sure you'd work yourself to death. So did you manage to make all the girls happy?\"\n\n\"Every single one of them is sleeping very soundly... if you get my drift.\"\n\n\"I got to hand it to you, that is no small feat. That's probably a world record. I'd pat you on the shoulder by I really don't want to touch you.\"\n\n\"By the way, I thought you said you'd come check in before you went to bed.\" \n\n\"I did, but you were busy getting your lap crushed by Betty while the baboon girl flattened your face with her steamroller ass. Like I said, I really don't want to touch you right now, not until you shower yourself in Purell. I've seen where your face has been. So, how's your little friend?\"\n\n\"Very sore. Without Leah, he most certainly would have died. I might need to take a couple days off to rest and let him recover. Anyway, how was your night?\"\n\n\"Great, I loved having the house to myself. It was so quiet. But I had a hard time sleeping, simply because I could help but wonder what you and Lorraine were doing.\"\n\nWe continued chatting, and as the time passed, the hybrids began to appear. They were exhausted from the long night, but hunger forced them to their feet. They all joined us, both the guys and girls having big smiles on their faces. Once they started eating, both sides began exchanging stories, and before long, the dining room was full. Well, almost full. One seat was still empty.\n\nI had just sat down with a second helping of pancakes when the room became silent, almost every hybrid perking their ears in different directions. I strained my own ears, trying to hear what had spooked them. At first, I couldn't hear anything, but then the noise began to appear. It sounded like... crinkling glass? Or paper?\n\n\"Bleeeeeeeh...\"\n\nI heard her voice and saw her standing in the doorway, at least I thought it was her. Lorraine stood before us, completely naked... but she was covered by something. Her deep ebony skin was coated in a layer of dry semen, almost an eighth of an inch thick. Jesus Christ, she looked like she was made of salt! I couldn't even see her face! It was just a mask of baby gravy, hardening into concrete! Her hair had become like a helmet, the strands all glued together. The crinkling sound we all heard was the flakes falling off from her movement. She had already left a path of white powder in her wake.\n\n\"Where am I? I can't remember who I am?\" she groaned, her voice deep and guttural.\n\n\"Tobi, Peter, get her out of here! Get her out the house! She's a walking biohazard!\" I yelled.\n\nThey jumped from the table and rushed over, picking her up and carrying her away. I looked down at my pancakes, having now lost my appetite.\n\n\"The two of you have tainted this mansion for me. I can't live here anymore,\" Elise groaned. I definitely agreed with her.\n\n\"I say we take off and nuked the site from orbit. It's the only way to be sure,\" I replied.\n\n--\n\n\"How the hell is this my job?\" I asked, spraying Lorraine with a garden hose. She and I were outside with a small crowd gathered around us. \"Elise, you're her sister, it's your job to take care of her.\"\n\n\"You can't ask this of me, you just can't,\" she said with her face in her hands.\n\n\"Dr. Lawrence, isn't there a chemical shower you can put her in or something?\"\n\n\"Look, just get her to the point where she's not leaving a snail trail through the mansion, and we'll take it from there.\"\n\n\"Hey, guys! How about a little help here? This is your splooge that I'm hosing off!\" I looked at one of the men, a zebra centaur that Lorraine had been fawning over. \"Xavier, I'm pretty damn sure you were the biggest contributor to this mess!\"\n\n\"Uh... Mistress asked for you by name,\" Tobi said nervously. \n\nI looked back at Lorraine, hands against the wall with her back to me, shaking her ass and whipping her hair back and forth. \"Goddammit, stop enjoying this!\"\n\nI turned off the hose and she turned around. \"Why did you stop?\"\n\nIt was mostly gone, at least on the surface. There was probably more semen in her nooks and crannies. She had a gray shade to her skin, likely a salt stain. Ugh, forever unclean!\n\n\"I'm done, someone else can deal with this. I'm exhausted and I'm going to take a nap. If everyone is interested, come join me.\"\n\nThat was all I needed to say, all the girls followed me up to my room. It was understandable, as we had all been awake for almost the entire night. Which reminds me, all the girls' beds were still on the floor, with sheets, blankets, and pillows. But there was still some open room...\n\n\"Girls, give me a hand with this,\" I said, moving over to the big bed.\n\nWith Momo and the others helping me, I pulled the big bed off the frame and onto the floor. Now we were all on the same level, well except for Leah in her rubber-lined cradle, but I'd give her plenty of attention later. All the girls pushed their mattresses closer to mine while I drew the shades, and with the room dark, I climbed into my bed. Immediately, all the girls swarmed in, trying to get as close as possible without actually crawling over each other. I was surrounded on all sides, Momo clinging to one arm, Neija to the other, Sonja wrapped around my left leg and Jenny around my right, with Chloe on my chest.\n\nAt that moment, I was overwhelmed with happiness. To have all my girls with me, who I loved with all my heart, was a bliss beyond human comprehension. We hadn't just played last night, we all made love, whether it was rough or vanilla, I bonded with each of them. There was nothing left between any of us. It's a feeling that can't be classified, the joy you feel to be surrounded by those who truly love you, and not in the way you love your friends or relatives, but true romantic love. I never wanted this day to end. I wanted to lie here in bed, surrounded by my girls, for the rest of my life.\n\n--\n\nI opened my eyes, awoken by shuffling and movement. My vision was blurry from sleep and the bedroom was dark, but I clearly saw a large lump under the blanket move towards me. A flash a white, two large ears poking out, a doll-like face with a tender smile and eyes full of love.\n\n\"Hey, Lola,\" I hummed with a smile of my own.\n\n\"Hey, Master.\" She moved closer to me, her nipples skating across my chest. She gave me a soft kiss and I tickled her under the chin.\n\n\"What's up, sweetheart?\"\n\n\"Neija and I talked during breakfast. She said you'd help her figure out what she'd want to do with her life, since we won't be going back to the zoo.\"\n\n\"Yeah, there's a whole world of possibilities for you girls.\"\n\n\"Can you help me with that too?\"\n\nI hesitated, a heavy feeling in my chest. \"Yeah, sure thing. We can get started tonight after dinner.\"\n\n\"Thanks, Master!\"\n\n--\n\nI tried to relax for the rest of the day, but it seemed like every few minutes, one of the girls would come up to me and ask me for the same favor as Lola. They were asking for employment help without even knowing what employment was. I agreed to help each of them out, but every time I did, the knot in my stomach would grow tighter. After dinner, Lola bounced over to me.\n\n\"Master, can you help me now?\"\n\n\"Uh... sorry, I'm still really tired from last night. But I'll definitely get started with you tomorrow.\"\n\nHer happiness deflated a bit, but she was still smiling. \"Ok.\"\n\nI started rubbing her head, focusing on her ears. \"Good girl,\" I said, remaining there with her for several minutes.\n\n--\n\nAfter dinner, I found myself out on the patio. The hybrids rarely went out at night because of the swarming mosquitos, but I had sprayed myself with repellent. It was just me and the sea of chirping crickets. I didn't know what time it was, my internal clock wasn't running properly. My brain felt like it was stuck in mud but my body was wired and jittery. I was just staring into the darkness, not even thinking.",
        "\"Hey.\" I jerked, feeling a hand on my shoulder. I looked up to see Elise behind me. \"I was calling out to you. Didn't you hear me? Is something wrong?\"\n\n\"Huh? Oh... no, nothing is wrong.\"\n\nElise slithered around and sat on the chair beside me. \"I know you well enough to be able to tell when something is off. You've been like a robot all afternoon. What's going on?\"\n\nI took a deep breath, wringing my hands together. \"It was so simple when we got here. We'd let the CDC study us, and when the zoo animals came, we'd teach them about the outside world and help them find permanent homes.\" I looked at Elise. \"Now I don't want that to happen.\"\n\n\"You don't want them to leave.\"\n\n\"I realized it this morning when my girls and I all huddled together. That moment, when I was surrounded by them, I was so happy, and I realized nothing on Earth could make me happier than that. I told Neija that I would help her find a direction in life, find a path that would take her anywhere on Earth. I knew that wherever she ended up, she'd do great. Then Lola asked for the same thing, and all day long, the girls have been coming up to me and asking me to help them find out where they can go. They all want to go out and explore the world.\n\nPart of me had just hoped that some of them would want to stay with me, maybe enough that the CDC would continue letting us live here, and... I don't know.\" \n\n\"Come on, you knew this day was coming. You can't just live in this mansion for the rest of your life with them. I get it, you're feeling empty nest syndrome.\"\n\n\"I love them. I don't want them all to leave me. I don't want to have to say goodbye.\" Before I knew it, my eyes were stinging with tears and my nose was getting stuffed up.\n\nWithout warning, Elise slapped me across the face. I looked at her, stunned, to find a warm smile on her face and watering eyes. She placed her hand on my aching cheek. \"Do you have any idea how much I adore you? How much I admire you? Only you could talk about going home with a harem of five beautiful animal girls, not to mention your booty-call Betty just a short drive away and have the balls to complain that it's not enough.\" She laughed and I couldn't help but laugh with her.\n\n\"I love them,\" I said again.\n\n\"I know you do, and that's how you know you did it right, that the thought of letting them go hurts you this much. Remember that night when I transformed, when you told me about Penelope? I said that you were the best guy this could have happened to, and it's truer now than it was even then. Those girls are so lucky to have you looking after them. Those girls are your lovers and like your children. You've loved them as a man and now it's time to love them as a parent, and that means getting them ready to set out on their own. The best thing you can do now is work hard to get them in a position to where they can make their dreams come true.\n\nYou've done nothing wrong. You have nothing to regret. This is what you're supposed to feel, and know that wherever they are, they will love you.\"\n\nI took a deep, shuddering breath. \"You're right.\"\n\n\"And for fuck's sake, you'll have Momo, Sonja, Chloe, Leah, and Jenny riding you every night after everyone else leaves. Hell, you'll have to come to my farm at least three times a week to give Betty the playtime she needs. You sure as Hell won't be lonely. But I suppose if that still isn't enough for you, I might decide to leave my bedroom door open.\" She then grasped my hands and pulled me to my feet. \"Come on, let's get inside. Now is when you should be spending all the time you can with those girls. Besides, these mosquitos are driving me nuts.\"\n\nI stood there, holding her hands. \"Sure. And Elise? Thank you.\"\n\nShe smiled and ruffled my hair the way I would with the girls. \"You're a good Master.\"\n\n--\n\nFor the next month, Lorraine and I helped our hybrids figure out what they wanted to do with their lives, turning us from camp counselors into guidance counselors. First, we taught everyone how to read and write, then we began researching their hobbies, using TV, books, and the internet. While Lorraine and I worked, Dr. Lawrence and the CDC interviewed possible adoption candidates, people with similar interests who'd give the hybrids homes and help them achieve their goals. After spending their lives in a zoo, surrounded by walls and fences, all the hybrids wanted to journey out into the world, see everything it had to offer, so we were looking at caretakers across the globe, people who would welcome such amazing creatures into their families.\n\nDuring the days, we would teach them about human social interactions, give them practice in speaking with people. We taught them how to control their feelings and emotions so their animal instincts wouldn't take over, taught them the value of rules and laws in human society, as well as manners. Beyond simply reading and writing, we also taught them basic math, some world history, explored different religions and cultures, and the customs they would find in whatever country they were going to.\n\nAnd during the night, I made love to my girls. True, we didn't have any more humungous sleepovers, mainly because I didn't think it was good for my health, but each night, half a dozen girls would join me, Momo, and the others, and we would spend half the night playing. In time, they would all go their separate ways, being welcomed into whole new families, finding lovers, and possibly even getting married, but for now, they were here with me, and I used every moment of every day to show them how much I loved them.\n\nThen, the day arrived.\n\n--\n\nWe were all standing outside the mansion on a beautiful summer day, watching a convoy of buses and cars roll up the driveway. All the zoo hybrids were dressed, carrying bags full of possessions they had collected since coming here. One by one, I hugged each the girls, all of us trying to hold back tears. I wanted so badly to ask them to stay, and I knew part of them wished I would, but more than anything, after lifetimes of captivity, they wanted to see what the world had to offer. This mansion, as huge as it was, just wasn't big enough for them.\n\n\"You have your phone?\" I kept asking.\n\nAll the girls were given phones with my number inside. I told them that if they ever got into trouble, no matter when or where, be it Antarctica in the middle of winter, I would fly and over and help them out. They also had bracelets with GPS trackers in case of emergencies. The CDC had been very thorough in screening adoption candidates, checking references and performing background checks. Just being squeaky clean wasn't good enough to look after any of my girls, they had to be the best that humanity had to offer, but of course I worried. I would worry about all of them until the day I died.\n\n\"Ok, everyone, get together for a picture!\" Dr. Lawrence hollered. We all gathered by the mansion entrance, huddled together. There were so many of us that the picture would have to be panoramic. \"Everybody say cheese!\"\n\n\"Cheese!\"\n\nHe took the picture, and then it was another round of goodbyes, this time with waterworks. Even Lorraine and her men were crying. I'll admit it, I cried like a little bitch. \"This isn't goodbye forever,\" I kept telling the girls, \"you have to promise you'll visit me.\" They all promised.\n\nNeija was the last. We held each other extra tight. \"Thank you, Master,\" she whispered in my ear. \"Thank you for turning me. Thank you for giving me this life to live.\"\n\n\"You're welcome.\" I said it not with my voice, but with a kiss.\n\nWaving goodbye and shedding tears, the zoo hybrids climbed into buses and cars and finally departed. Me, Lorraine, Elise, Dr. Lawrence, the doctors and cooks, Momo, Sonja, Chloe, Betty, Leah, Jenny, Steve, Tobi, Alex, and Peter watched them disappear down the road, and then it was over.\n\n--\n\nFor the next few days, everyone in the house was in a slump. After having over a hundred people living with us, the mansion now felt so big and empty with just... the thirteen of us. Wow, I guess that's still a lot. But I missed hearing a chorus of happy voices down the halls and in the dining room. We had all grown to love the zoo hybrids. Chloe especially took it hard, having lost her best friend. Whenever I saw her, her ears were drooping all the way down and she was holding her tail. \n\nWhat was also a bummer was losing the cooks. Now that it was back to our original group, Elise and I were back to preparing dinner. \n\n--\n\n\"So what's going to happen to this place?\" I asked, speaking with Dr. Lawrence in the mansion's clinic. \n\n\"The CDC is thinking of turning it into a shelter for hybrids that don't have homes. Either that or selling it to a weight-loss company to be turned into a fat camp. All right, in you go.\"\n\nHe motioned to a large metal box in the middle of the clinic, just slightly larger than a coffin, and standing straight up. It was made of lead and various other metals that blocked radiation. I stepped inside, seeing Geiger counters along the walls and in the corners. They all crackled from the ambient radiation of the room, but as soon as I closed the door behind me, they fell silent. Dr. Lawrence knocked on the door a minute later and I stepped out. He had a long stretch of paper with undulating lines on it, like it had been used for a polygraph.\n\nHe gave a sigh of exhaustion. \"Nothing. You give off as much radiation as a turkey sandwich.\"\n\nSince coming here, everyone in our crazy menagerie had undergone every test known to man, trying to find something to explain this phenomenon. Bupkis. Zilch. Nada. No machine built by man could pick up anything. Lorraine had even suggested we try a Ouija Board. Dr. Lawrence agreed simply out of desperation for a result, but all we found out was that she loved to screw with us. It was disheartening to say the least, to have come all this way and not have an answer. Not since Betty (and possibly Elise, we're still not sure) had Lorraine and I transformed an animal by accident, but that wasn't saying much, considering how isolated we were in this mansion.\n\nAll that waiting and anxiety with nothing to show for it. Talk about a kick in the teeth.\n\n\"So what now? My girls and I just go home?\"\n\n\"Well there isn't much of a reason to stay. The renovations to your house have been completed and we'll continue to offer financial support for you and the girls, as well as study your behaviors. There is nothing else we can do. Humanity simply isn't advanced enough to understand this insanity.\"\n\n--\n\nThe next day, we all packed up our things and prepared to leave. Now that we had Jenny with us, my Subaru was overflowing with bodies and luggage, so I had to tie a few suitcases to the roof.\n\n\"Are we really going home?\" Chloe asked. \n\nI rubbed her head. \"Yep. I know you had reservations about coming here, but aren't you glad you did?\"\n\nShe smiled and nodded. \"Yeah! It was a lot of fun!\"\n\n\"Ugh, it's going to suck going back to living as a farmer,\" said Elise.\n\n\"I think it's time for you to get over this fear of touching the ground. I know for a fact that you get caked in cow shit on a daily basis,\" said Betty.\n\n\"I don't get \"caked!\" And by the way, a fair amount of that shit was yours!\"\n\n\"All I know is that everyone in the barn wants to see you and I'll drag you out of that house if I have to.\"\n\n\"What are you two complaining about?\" asked Lorraine. \"You've got me and my four pillar men helping you. It'll be smooth sailing!\"\n\nBetty then strode over to me. \"Master, I expect you to make frequent visits. I can only go so long before I need a rough ride.\"\n\n\"Don't worry, I'll be around plenty, mainly to help Lorraine annoy you and Elise.\"\n\nBetty smiled and kissed me, and when she walked away, I slapped her on the rear, giving her a happy little spring in her step. I then walked over to Dr. Lawrence, standing by the door.\n\n\"I'll be in town for a few more days, then I'll fly to Atlanta to give a full briefing of everything that has gone on.\"\n\nI shook his hand. \"Thanks for everything. I can't tell you how much I appreciate the help you've given us.\"\n\n\"It was certainly for a good cause. Take care.\"\n\nI nodded and walked back to my car.\n\n\"I finally get to see Master's home!\" Jenny said with a smile.\n\n\"Just remember to keep your expectations low. After all, you've spent all this time living in a mansion.\"\n\n--\n\n\"Yay! We're finally home!\"\n\nSonja cheered as we pulled up the familiar driveway. Ah, it was good to return to our old cabin. Actually, it was no longer just a cabin. It had been extensively remodeled, now almost four times its original size and with all the room we'd need. I had seen the blueprints and been involved in the planning, but I hadn't bothered checking out the progress or the end result until the now. The work crew had done a great job, both in building it and cleaning up the mess afterward, though it would probably be a good idea to get a magnet and search the lawn for screws and nails. Speaking of which, the lawn was badly overgrown, as well as our garden.\n\nWe unloaded our luggage from the car and stepped inside. The kitchen had been extensively redone, with a huge freezer and food pantry installed. It had cannibalized the space we used as a living room, but that wasn't a problem. It led off to several rooms, all of which could be easily converted into a den, guest bedrooms, a home office, or whatever I wanted. It would certainly be nice to not have the washer and dryer ten feet from the TV. We even had a second bathroom. Going upstairs, we found an expanded bedroom, along with plenty other multipurpose rooms. Oh Lawrence, I owe you big time. We had a huge bed, just like at the mansion, and rubber-lined tank for Leah to sleep in next to us.\n\n\"So, Jenny, what do you think of this house? I know it's smaller.\"\n\nShe smiled and gave me a big hug. \"It's perfect. It's nice and cozy.\"\n\n--\n\nAfter we unpacked our things, we started arranging the furniture. Since I didn't have a lot of possessions, the building crew didn't need to worry much about things getting destroyed during the renovation, but there were still plenty of things that needed to be moved around while they worked, like the couch and TV, both wrapped in plastic to protect them from dust. Before we left, I had done all I could to get things out of the way for them, but it's not like I had a lot of space to work with in the first place.\n\nWe picked a new living room, moving the couch and TV inside, and then all collapsed on it. Well, me, Momo, Sonja, Chloe, and Jenny collapsed on it. Leah had a beanbag chair made of a special laminated material that didn't bother her skin or get dirty due to her slime.\n\n\"It's good to be home.\" \n\n--\n\nThat night, I cooked dinner in our new kitchen and we ate in our brand-new dining room. Well, I was sitting at the table. The girls were finally able to revert to their original habit of eating out of food bowls. I now had five animal vixens eating side by side on the floor, their faces buried in food with their tails wagging. I could live to be a hundred and still never get tired of the sight. Then, after dinner, we spent some more time watching TV, and it was up to bed.\n\n\"It's so nice being back home. Momo missed it,\" my cat said we climbed onto the bed.\n\n\"But I still miss living at the mansion with everyone,\" Sonja whined.\n\n\"I know you do,\" I replied, \"I sure as hell miss everyone. But we'll see them all again.\"\n\n\"But on the plus side, now we're back to the five of us getting all of Master's time!\" said Jenny with a mischievous grin.\n\nI laughed and rubbed her head. \"That's definitely true. Now, how about we break in this new bed?\"\n\n\"Yay!\" they all cheered before jumping on me.\n\n--\n\n\"Master, where are we going?\" Jenny asked.\n\n\"It's a surprise, you'll see,\" I replied.\n\nIt was a bright sunny day and I was leading the girls into the woods. Sonja and I were carrying a cooler full of food, while in Momo's hands was a large picnic blanket.\n\n\"That reminds me. Leah, I don't know if you ever saw this spot.\" \n\nI looked back at Momo, Sonja, and Chloe. I could tell they knew where I was taking them, but they weren't sad about it. If anything, I think they looked relieved. We hiked through the woods for the good while, finding the underbrush flourishing and growing rampant, but not enough for us to lose our way. We finally arrived, finding a cross made of two sticks stuck in the ground. Moss and small flowers had claimed the soil around it. I stood in front of the spot, my heart lighter than it was the last time I was here.\n\n\"Master, what is this?\" Jenny asked.\n\n\"I never told you or Leah about her. This last winter, a deer appeared out here in the woods. We didn't get to her in time and she froze to death.\" Jenny and Leah stiffened and a mournful look appeared on Momo, Sonja, and Chloe's faces. \"Her name is Penelope. When spring came, I came back here and gave her a proper burial.\" I looked back at the girls and smiled. \"But alive or dead, she is a member of our family, and we can still enjoy a nice picnic here with her.\"\n\nMy smile appeared on their faces, and working together, they unraveled the blanket and laid it out next to the grave. Sonja and I opened the cooler and we handed out the food. On a day like this, with warm sunlight and a sweet breeze, there was nowhere I'd rather be than having a picnic with my girls. We ate our lunch and chatted, I even pulled out a frisbee and threw it for Sonja and Jenny while Momo laid out in a sunbeam and Chloe and Leah played in the creak just down the hill. It truly was a beautiful day,\n\n--\n\n\"Master, what happens when we die?\" Chloe asked as she watched me bury some carrots from our garden in the soil of Penelope's grave. All the girls looked at me, waiting for my answer.\n\nI kept my eyes on the ground, trying to choose my words. \"No one really knows for sure. Some people believe you live on as a soul without a body, either roaming the universe or being reborn into something else, possibly going on to reach a place called Heaven. Others believe that you simply cease existing, that it's like falling into a dreamless sleep.\"\n\n\"But what do you believe?\" Sonja asked.\n\n\"I'm not sure. I've always left it as... I'll find out when that day comes. For me, it's not really that I believe in anything, just a matter of hoping for the best. I don't know what happens when we die, but I like to think that Penelope is right here with us, and I don't mean because she's buried here.\"\n\nI then looked back at the girls and they all pounced on me, hugging me tightly. \n\n\"Whoa, girls!\"\n\n\"We'll always be with you, Master,\" they each said.\n\n--\n\nThe ringing of my phone jerked me awake. The room was pitch-black, minus the glowing numbers on my alarm clock. It was just after 3 AM. \n\n\"Hmmmm, Master, I don't want to get up...\" Momo groaned.\n\n\"Chloe, can you hand me my phone?\" I asked.\n\nChloe did what I asked and hid under the blankets to escape the noise. The caller ID said Dr. Lawrence. It had been two weeks since I had last seen him.\n\n\"Doc, what's up?\"\n\n\"We have a situation.\"\n\nI sat up. \"Bad or good?\"\n\n\"It's a game-changer. We just got a report that a Chinese news anchor transformed into a goat hybrid on live TV.\"\n\n\"You're fucking with me. You mean like Elise?\"\n\n\"Yeah. The Chinese government has suppressed the footage but shared it with the WHO and the WHO shared it with the CDC. I just emailed it to you.\"\n\nI got out of bed and went downstairs to my laptop. Unfortunately, this isn't a movie, so it took a few minutes for me to turn it on and just get to my homepage. Then there was the problem of bringing up a browser window, with my computer apparently aware that I was in a rush, because it was taking forever.\n\n\"How many people know about this? Unofficially?\" I asked.\n\n\"At least half of China has heard about it by now. No one can find the actual footage, but a lot of people saw it happen.\"",
        "Finally, I got my email up and opened the video attachment. It showed two news anchors, a man and woman, talking behind a desk about stocks. Without warning, a pair of horns grew out of the man's head. He bolted up and screamed, grabbing his butt as a tail appeared in his pants. He then fell to the floor, I'm guessing because his feet had turned into hooves.\n\n\"Let me guess, the Chinese are blaming me and Lorraine for this?\" To think that my life had gotten weird enough for me to utter such a statement.\n\n\"They originally were, but we talked them down by telling them the results of the distance experiment.\"\n\nOne of the experiments performed at the mansion was a test of me and Lorraine's range. Two officials of the CDC volunteered their dogs for the experiment, a French bulldog and a cockapoo. They started off ten miles from the mansion and slowly drove towards our position while Lorraine and I focused on turning them. The transformation didn't occur until around five and a half miles. The problem was that it only measured our intentional abilities, not when it happened on accident. But on the plus side, I heard the doctors were overjoyed living with their transformed pets.\n\n\"Once this gets out, we'll have worldwide panic, especially if it occurs again. People turning into hybrids? It's like the furry Rapture,\" I said.\n\n\"If this continues to escalate, it will completely rewrite the future of human culture. We might just get the X-Men world that Lorraine talked about.\"\n\n\"Perhaps, but there is still the matter of preproduction. Elise is sterile, just like any other hybrid, and it's likely that this guy is now as well. If that remains true, then this won't become hereditary.\"\n\n\"We can only hope. The Chinese are examining him and not giving out any information. However, I have good news. We might have found another test to study you and Lorraine, the only one of its kind.\"\n\n\"What test?\"\n\n\"We want to examine you in a neutrino detection facility. Japan has offered to let us use theirs in exchange for the credit if we get any results. I've already booked a flight for you and Lorraine. You leave in two days.\"\n\n\"Wait, wait, wait, you want me to babysit that anime freak in JAPAN?!\"\n\n--\n\n\"I'm finally here! I'm finally here! I'm finally here!\"\n\nLorraine was bouncing around me, more excited than Sonja with a new frisbee. We had just landed at Tokyo International Airport and I was burned out. I had been stuck with this lunatic for more than two damn days in one cramped metal tube after another. I hadn't even gotten to \"relieve my stress\". I mean, sure, Lorraine would happily do me if I asked, but I just couldn't, not after I had to hose all that semen off her. I was just lucky I hadn't caught any STDs from her. But what really sucked was that we still weren't done traveling. We had to board yet another plane to the Niigata Airport. This day just keeps on getting better!\n\nI tried to focus on my own excitement, having traveled farther from home than ever in my life. The only other country I had ever been to was Canada, and let's face it, that barely counts as international travel. I was actually surprised by how normal it looked. With Lorraine's constant blabbering, I had assumed that the entire country would be one giant anime expo, but the airport seemed culturally sterile for the most part. It did have a neat mall-like design. But man, I had never seen so many Asian people before! It was awesome! Like I said before, in Maine, the average complexion is 'Starbucks cup'.\n\n\"Come on, let's go explore Tokyo!\" Lorraine said.\n\n\"No, our next flight is in an hour and we are going to stay here.\"\n\n\"But we've come all this way! Just let me buy one figurine!\"\n\n\"There's probably a store around here somewhere that sells that stuff. Tell you what, you have thirty minutes to go look around the airport. Afterwards, if you're not back, I'll call Elise and tell her to burn your manga collection.\"\n\nShe ran off and I gave a sigh of exhaustion. I found the gate for our next flight and picked a quiet spot to lie down on the floor near the window. It felt like it had been a week since I could actually lie flat on my back. Surrounded by other passengers and their luggage, I set an alarm on my phone and took a nap. Soon we would reach the Super-Kamiokande Neutrino Detection Experiment facility, but until then all I wanted was a room and a bed with no one else around. I just continued counting the seconds until I could go into my hotel room at Gida and lock myself up in solitude.\n\n--\n\n\"I'm glad you two could make it,\" said Dr. Lawrence. \n\nWe were in the office of Dr. Saito Nagisa, head of the facility. He was a middle-aged man, but in better shape and with more hair than Lawrence. \n\n\"Glad to meet you,\" I said, shaking his hand. Lorraine did the same.\n\n\"The honor is mine. I had heard rumors that there were two people who could cause these transformations, but I didn't think them to be true. Whatever it is that produces these hybrid creatures, be it science beyond our comprehension or simple magic, I'm hoping that my facility may give some answers.\"\n\nI sat down in one of the two chairs across from his desk. \"I meant to look this up on the flight here, but Lorraine wouldn't give me any time to myself. What exactly are neutrinos?\"\n\n\"Neutrinos are subatomic particles, about one millionth the size of an electron. They have a neutral electric charge, and due to their small size, are barely affected by the fundamental forces of the universe and rarely interact with regular matter.\"\n\n\"So, how do you detect them then?\"\n\n\"Below this facility lies a 40-meter-tall steel tank holding 50,000 tons of ultrapure water. Inside the tank are 13,000 photomultiplier tubes that detect light from neutrino reactions. When a neutrino manages to strike a water molecule, an electron or positron is knocked off, moving faster than light, at least, faster than light can move in water. This creates a cone of Cherenkov radiation light, which is the optical equivalent to a sonic boom. The Cherenkov light is recorded by the photomultiplier tube. Using the information recorded by each tube, the direction and \"flavor\" of the incoming neutrino is determined.\"\n\n\"So you think neutrinos are causing these transformations?\"\n\n\"No, not the neutrinos, something else.\" A knock came from his door. \"Come in!\"\n\nA lovely young scientist entered the office, holding a folder. She was around my age, long black hair tied into a ponytail. \"I have the results,\" she said.\n\n\"Perfect timing. This is one of my head researchers, Toka Itami. Please explain to them the results we've been getting.\"\n\nShe nodded and turned to us. \"For the past year, we've been getting unusual readings from our detection lab. The sensors have been picking up something akin to Cherenkov radiation, but it hasn't been coming from interactions with the water.\"\n\n\"Our detection tank is buried underground in order to shield it from ambient radiation,\" said Dr. Nagisa. \"That way, only neutrinos from solar activity and supernovae are able to enter the detection field. We believe that the neutrinos are interacting with something, another kind of subatomic particle. We'd like to put you in the tank and see if our sensors pick up anything.\"\n\n\"This is gonna be sweet!\" said Lorraine.\n\nDr. Lawrence cleared his throat. \"Though first, there is the matter of sanitation...\"\n\n--\n\n\"Oh, yes! Harder!\" Lorraine moaned.\n\nNo, she wasn't getting laid. She and I were actually getting scrubbed in a chemical shower underground. No amount of brushing and soaping could wash the filth from her soul. I was doing my best not to react, but the people in the sanitation suits were brushing hard to remove all dirt and dead skin cells. The water in that tank was ultrapure, and they wanted to keep it that way.\n\n--\n\nOnce we were cleaned, we were dressed in full-body sanitization suits, covering us from head to toe with facemasks and safety goggles. Dr. Itami led us down a brightly-lit corridor to a heavy steel door, and after punching in an access code, it swung open into an airlock.\n\n\"So, just to be clear, you actually want us to get into the water?\" I asked.\n\n\"That's right, but first we want to get readings of you outside of the water. Whenever repairs or renovations have to be done, our technicians move around the tank in boats. There will be a small dock for you to stand on. We won't be able to talk to you while the detectors are active, but we'll flash the lights when we want you to get in and out of the water.\"\n\nWe stepped into the airlock and the door was closed behind us. The door in front of us then opened and we stepped out into a circular chamber, over a hundred feet wide and tall. The walls were fiberglass, and behind them, we could see thousands of sensors. The tank was half-filled with water, with a metal dock in front of the airlock entrance.\n\n\"So I guess we just stand here while they get their readings?\" \n\nShe and I stepped onto the dock and closed the airlock door behind us.\n\n\"Did you ever think, in your wildest dreams, that you'd end up in a place like this? We're in Japan, standing in a neutrino detection tank. That... that is all kinds of messed up.\"\n\n\"I know, it's almost like... an anime plot,\" she said while elbowing me in the ribs. \n\nI groaned in annoyance.\n\n\"Look at that water. I wonder what it tastes like. It's ultrapure right?\"\n\n\"I bet it tastes bland. With nothing in it, it wouldn't have any flavor.\"\n\nA few minutes later, the lights flashed. \n\n\"Alright, time to get in.\"\n\n\"I really hope it's not cold.\" We slowly and clumsily climbed into the water. \"Fuck, it is cold!\" Lorraine shrieked.\n\nIt certainly was. Being in the suit was definitely a weird experience. I could feel the water pushing in from all angles, but my skin touched nothing but rubber. We worked to keep our heads above the water so that it wouldn't get into our suits and we wouldn't contaminate it.\n\n\"After this, I'm dragging you to a hot spring resort. I won't take no for an answer,\" Lorraine said.\n\n\"Fine, but you're paying.\"\n\n\"I wish we could get all the hybrids here for that. Now THAT would be a great anime episode!\"\n\n--\n\n\"These are the readings were typically get. These are the results from the past year. And these are the results we got from you two.\"\n\nWe were back in Dr. Nagisa's office, looking over graphs from the sensors. The average neutrino detection levels were practically zero, the levels from last year were up about a quarter of the page, and the ten minutes of Lorraine and I in the tank maxed out the sensors.\n\nI was overwhelmed. Finally, we had a clue. True, these numbers didn't mean much to me, but we had finally gotten onto the right path.\n\n\"Ok, so we know that the neutrinos are interacting with something, but what?\" Lorraine asked.\n\n\"We call them temerons, we believe them to be a kind of tachyon,\" said Dr. Itami.\n\n\"You don't sound very sure,\" I said.\n\n\"You must understand,\" said Nagisa, \"this is the deepest level of fringe science.\"\n\n\"Oh, I loved that show!\" Lorraine squealed.\n\nMoving on...\n\n\"So what are they? What exactly do they do?\"\n\n\"Tachyons are subatomic particles, like neutrinos, that move faster than light, and we believe, possibly through time. Temerons, on the other hand, we believe move through dimensions.\"\n\n\"Dimensions? You're talking about the multiverse theory.\"\n\n\"Correct. According to the multiverse theory, there are infinite universes in which every possible occurrence has or will transpire, which also means there are infinite universes that could follow completely different laws of physics. We believe that temerons move randomly through dimensions, bringing with them different physical properties. These can manifest in black holes, wormholes, and quantum fluctuations, events that completely defy the laws of physics.\"\n\n\"Haven't you considered that maybe they do follow the laws of physics, but we simply don't understand the laws of physics well enough?\" I asked.\n\n\"That's why it's currently just fringe science, beyond dark matter and even mirror matter. Temerons are essentially increments of randomness, making them impossible to predict. They pass through dimensions. bringing about upsets in the natural order. We believe that we are witnessing a mass migration of temerons into our section of space, manifesting in the appearance of hybrids. They bring with them aspects of different universes, such as different evolutionary paths, alternate realities, or splicing together life forms from separate universes. It may even be possible that life came to be because of temerons reaching Earth.\"\n\n\"And what does that have to do with us?\" I asked.\n\n\"Our sensors cannot detect neutrinos, only the energy released upon neutrino reactions. What we've been sensing this past year is temerons passing through our space and colliding with neutrinos in the tank. The results we got just now with you two were due to neutrinos passing through your bodies but colliding with temerons. We believe that rather than being changed by the temerons and turned into hybrids, you both contain a vast amount of temerons inside you, and those temerons can be directed out from your bodies and into other life forms, causing the transformation into hybrids.\"\n\n\"This is why none of our tests picked up anything,\" said Dr. Lawrence. \"Because the only way for us to detect what was going on was to use the second hardest thing to detect.\"\n\nI sat back in my chair, my mind going a mile a minute. On one hand, it was an indescribable relief to finally have an answer, even if it was just theoretical. On the other hand, this was a pretty ridiculous explanation. Subatomic particles that move through dimensions causing randomness? But come on, I'm turning pets into sexy animal-eared girls, what other kind of explanation could I have possibly gotten?\n\n\"So is there any way to stop this?\" I asked.\n\n\"Stop it, are you kidding? It would be easier to stop a supernova. Temerons are moving through our space in this universe at an increasing rate. For all we know, it could all stop tomorrow, or this stream could continue on until our universe destroys itself. My guess is that this isn't going away. We've entered the new age of human civilization, and it's just going to get weirder from here.\"\n\n\"But what about me? Is there a way to stop this from happening to animals and people around me?\"\n\n\"There is no scientific basis for me to give any kind of answer. I can't even explain why you're full of temerons without experiencing any repercussions or transformations. My guess? Your body is going to keep producing hybrids forever, even after you die.\"\n\n--\n\n\"Oh, this... is... bliss,\" Lorraine said. She and I were sitting in an indoor pool at the Wariishi Onsen near Higu. Behind us were the windows to the forest outside. This hot spring was coed, so there were both men and women with us. Actually, it was mostly men, and the women weren't exactly lookers, but that was no surprise. \"After all that flying, this heat is exactly what I needed.\" She turned to me when I didn't respond. \"Are you ok?\"\n\n\"Yeah, this water really is great. I just thought... that when I finally got an answer, it would change things. Is anything different now? If I end up turning another animal by accident, I'll still be where I was when I turned Betty and Elise. What am I supposed to do now?\"\n\n\"Just figure it out as you go. That's the only thing we can really do. If something happens, deal with it then, but unless you know what it is or when it'll occur, there's no point in worrying about it now. We'll go home, you'll crawl into bed with your girls, I'll crawl into bed with my boys, and we'll wake up and make a plan for that day, and we'll just keep doing that and that's just fine.\"\n\n\"Every once in a while, you do manage to spit out a pearl of wisdom.\"\n\n\"Motherfucker, that's what makes me so endearing.\"\n\n--\n\nIt was another nonstop nightmare getting back home, two of our flights getting canceled and one getting delayed twice. It was a relief when we finally stepped foot in Maine, and just like before, we had driven Lorraine's car so she was stuck with the parking bill! Ha!\n\nWe made the drive back to the farm, with the cows in the field mooing as we pulled up the driveway. Like my cabin, the Baxter home had been extensively remodeled, now more than twice its original size. We got out of the car, but for some reason, only the pillar men greeted us.\n\n\"Tobi, where are the girls?\" I asked.\n\n\"They're inside with Elise,\" he replied without pulling away from the group hug with Lorraine.\n\nI went inside, finding both Elise and Betty sitting at the kitchen table. Betty looked miserable, like she was suffering from a hangover.\n\n\"Hey, we're back,\" I said. \"Were the girls good while I was gone?\"\n\nElise looked up at me, a very tense expression on her face. \"Take a seat.\"\n\nI sat down next to her. \"What's going on?\" Icy fingers closed around my heart. \"Is everyone ok?\"\n\n\"It started this morning. Betty and I... are on our periods.\"\n\nAs a man, my natural reaction was of course disgust, but once I had a second to process, my jaw dropped. \"Are you sure?\"\n\n\"I'm a woman, so yeah, I know what I'm talking about! Just look at Betty! She's suffering from some wicked cramps!\"\n\n\"Ugh,\" Betty groaned, \"how the fuck do humans deal with this shit? Master, I'm begging you, turn me back into a cow. I can't take this.\"\n\n\"But if you two have periods, then that means you ovulate, which means... you can get pregnant.\"\n\n\"Yeah, about that. Girls! You can come down now!\"\n\nI looked to the stairs and saw Momo, Sonja, Chloe, Leah, and Jenny. Instead of rushing to hug me, they all held up positive pregnancy tests.\n\n\"Master, what does this mean?\" Momo asked.\n\n\"Apparently they run on an earlier cycle than Betty and I.\"\n\nOutside, all the cows raised their heads and perked their ears, certain they had just heard a shrill scream.\n\n--\n\n\"Doc, something happened... something big,\" I said, lying on the floor in Elise's bathroom, ironically, in the fetal position.\n\n\"What do you mean?\"\n\n\"Doc, can you please tell me what the symptoms are for a heart attack? Because I'm having one. I might also be having a stroke. Help me, Doc, I think I'm dying!\"\n\n\"Whoa! Whoa! Slow down! Start from the beginning! What's going on?\"\n\n\"They're pregnant, Doc, they're goddamn pregnant! Momo, Sonja, Chloe, Leah, and Jenny, I knocked them up!\n\n\"Wait, are you serious? Tell me you're serious!\"\n\n\"Yes, I'm fucking serious! They're pregnant, Elise and Betty are menstruating, and I think I might be pissing my pants! Most of my body is going numb right now!\"\n\n\"Slow down, take a deep breath!\"\n\n\"Five! Five kids! And that's the best-case scenario! I sure hope you were telling the truth about the CDC supporting us, because I don't think I have the qualifications for any job that would let me feed ten people!\"\n\n\"Yes, of course we'll keep supporting you! This is monumental, this has redefined the future of human evolution!\"\n\n\"Fuck human evolution! I'm not ready to be a dad!\"\n\n\"Of course you are. You've done a fantastic job taking care of those girls. You've been practicing parenthood for the past year, you can do this. Listen, I have to pass this on to my superiors. Right now, you need to be with your girls. Just relax, you won't be alone in this.\"\n\nI hung up the phone and slowly got up. I felt like I was going to puke, but I built up my courage and opened the bathroom door, to find all of the girls waiting for me.\n\n\"Master, are you mad at us?\" Sonja asked.\n\nI took a deep breath. \"No, of course I'm not mad at you. This is just... a huge shock.\"\n\n\"What is?\" Chloe asked. \"Elise won't tell us what's going on.\"\n\n\"Let's all sit down and I'll explain it.\"\n\nWe all gathered around the kitchen table, me facing the girls. I tried to pick the words I was going to say, but it felt like there was a wool sock stuck in my throat. \"Girls, the five of you are pregnant.\"",
        "Lorraine's mouth hung open, but the girls looked at me in confusion. \n\n\"What does that mean?\" Chloe asked.\n\n\"It means that you are each going to give birth to a baby. Right now, you each have a baby growing inside you, and in nine months\u2014I'm guessing, I don't know in your cases\u2014you're going to push those babies out. That is the true purpose of playing, it is so that animals can reproduce. Until now, I was sure that you girls couldn't get pregnant, but it seems that's changed.\"\n\nMomo leaned forward. \"Momo is going to have a cub?\" she asked with wide eyes.\n\n\"Actually, in your case, they're called kittens, well, kitten hybrids\" said Lorraine.\n\n\"But I've never had a baby before!\" Chloe squealed fearfully.\n\n\"I know you're scared. I'm scared too, but I'm going to help each of you, and the CDC is going to help us, and I'm hoping Elise, Lorraine, and Betty will help us.\"\n\n\"Only if Master promises to put a baby in me,\" Betty said.\n\nI covered my face with my hands. \"One kid at a time, Betty.\"\n\n\"This is so cool! I'm gonna have puppies!\" Sonja cheered.\n\n\"So what do we do now?\" Jenny asked.\n\n\"Now I take extra special care of you, my sweet little pets, and in nine months, our family will double.\"\n\n--\n\nTwo Years Later:\n\n\"Master, it's almost time,\" said Chloe, waking me up.\n\nI opened my eyes and yawned, wishing I could have napped for a bit longer. These days, I had to sleep whenever I could. \"Thanks, Chloe.\"\n\nI sat up in the bed, but slowly, since I was holding five infants. No, not the five I had expected when I first found out the girls were pregnant. Five babies, ha! More like each girl giving birth to five babies! I was the proud father of 25 kids, and with Betty demanding I get her pregnant, that number might increase. The babies I was currently holding were between me and Chloe. Like her, they were perfectly human, except for their mouse ears and tails, making them cuter than sin. The problem was that they were each the size of a baked potato. No, they were not premature; they were all perfectly healthy, they had just inherited their mother's diminutive size. All five were wrapped up in wool socks, sleeping soundly and perfectly content. As we carried them back to their crib, one of them began to cry, giving a tiny rodent-like squeal.\n\nI raised her up and kissed her forehead, my lips covering her entire scalp. \"No, no, honey, it's ok. I just need to take of business and then I'll be right back. Shhhh, go back to sleep.\"\n\nI gave one of her ears a gentle rub, calming her down and putting her back to sleep.\n\n\"They are so cute!\" Chloe chirped.\n\n\"Yet still not as cute as their mother,\" I said, giving her a kiss of her own.\n\nI then left the bedroom, walking down the hall with the walls lined with pictures from all of the zoo hybrids. Since leaving, they had all gone on to lead amazing lives, and every day, I'd get letters from them with updates as to what was going on. Many of them had started working in animal care and rescue centers, others in patient care at hospitals and nursing homes. Lola was the star of the retirement center she worked at, every tenant loving her. Almost all of them had found lovers and many were pregnant or already parents. None of them were married, but that was due to the law, though countless protest groups were fighting that.\n\nI passed by a photo of Neija and her brother, the two of them standing in the Serengeti National Park in military uniforms. They were flanked on either side by fellow members of the Tanzanian army, all working together to fight poachers. She hadn't yet picked a lover, but that was because she was happily married to her job. I had gone out to visit her before the girls gave birth and we had a romantic weekend.\n\nI passed by the living room, where the news was showing a protest in the streets of DC. They were advocating for human-hybrid marriage, as well as equality and an end to discrimination. It was hard enough for animal-born hybrids to live happily, but for the 5% of the human population that had also turned, prejudice was a major problem. But in a way, remarkable progress had been made in a short time. Really, it was just religious and conservative groups that opposed hybrids. Most of the world had grown to accept them and they could be found in all forms of media and in countless homes with loving families. The fact that humans and hybrids could interbreed was one of the driving forces of the movement.\n\nI stepped out into the front porch where Sonja, Chloe, Leah, and Jenny were playing with the rest of the children in the front yard. Believe me when I say, you don't know the meaning of cute until you see a toddler with puppy ears and a fluffy tail, rolling around in the grass and laughing while chasing butterflies. Jenny's babies would hop around on their short little bunny legs, long ears flopping. Nearby, Leah sat in a kiddy pool full of mud, playing with her children. Their black skin with yellow dots made them look like tiny aliens, but they had the cutest laughs. \n\n\"Master,\" Momo said. \n\nShe was sitting in a rocking chair on the porch with our kittens. One of our sons was in her lap, snoozing. The rest were on pillows around her, relishing the warmth of the sun. I sat in the chair next to her and one of the babies woke up. She crawled from her pillow over to me and meowed for attention. She had messy black hair just like her mother and a round face with a string bean tail. \n\n\"Hey, Cecilia, how are you doing?\"\n\nI picked her up and held her in my lap, listening to her purr as I rubbed her ears and tickled her chin. She wormed and stretched as I tickled her belly, wiggling her little arms and legs. Ugh, I can't even describe how adorable kitten babies are. When the kids got older, we'd probably have to move back to the mansion for the needed space, but for now, I loved our house out in the woods. Besides, I already spent enough time there as it was.\n\nIn the two years since I found out the girls were pregnant, I had gotten a degree in teaching and now worked in the mansion in the afternoons, helping homeless hybrids learn about the world and adapt to human customs. I did it both for them, and as a thanks to the CDC, or rather, the newly formed Department of Human-Hybrid Relations, for their continued support of our family. Lorraine worked there as well, at least, when she wasn't on the farm. Elise, Betty, Lorraine, and the pillar men still labored taking care of the cows. On a positive note, the fact that the farm was run by hybrids put it on the map. They were the most popular non-commercial dairy producer in Maine.\n\nOf course, I didn't forget about my duties as Betty's Master. I'd visit every few days and give her some good loving. Like Neija, Elise was married to her job, so she didn't bother dating. She was simply the kind of girl who would rather stay single and surround herself with friends and family. Though, whenever she felt the need to scratch the old itch, I was happy to take her to pleasure town.\n\n\"Master, Mr. Jones said he'll arrive in just a minute.\"\n\nThe words came from a girl standing in the doorway with a phone in her hand. She was an adult hybrid like Momo and the others, a raccoon hybrid that had appeared in the fall, and the newest addition to our family. She had long, dark-gray hair, two cute round ears, a ridiculously fluffy ringed tail, and the skin around her eyes was darkened, like a mask. And of course, she filled out her top beautifully and had long tan legs that seemed to go on forever. All my girls were now on the pill, but in a few years, if she asked, I might not object to getting her pregnant.\n\n\"Thanks, Holly.\" I picked up Cecilia and got to my feet. \"Ok, everyone, time to move the kids!\"\n\nWorking together, we all carried the children to the backyard to continue their playing. Sonja and I then returned to the front yard as a station wagon pulled up the driveway. A pudgy bearded man was driving, and in the backseat was a beautiful German Shephard. He came to a halt and I shook his hand when he got out.\n\n\"Hi, Thomas? Nice to meet you.\"\n\nHe grabbed my hand with both of his. \"No, it is an honor for me to meet you! I still can't believe you're real!\"\n\n\"Sonja, this is Thomas. Thomas, this Sonja.\"\n\n\"Hello!\" Sonja said happily. \n\n\"She's beautiful. You're a lucky man. This here is Molly.\"\n\n\"Thank you. Now, let's talk on the porch. You can let your dog out, she and Sonja need to talk.\" He and I went to the porch and sat down, Thomas sitting in the rocking chair Momo had occupied just a second ago. \"So, why do you want me to turn your dog?\"\n\n\"Because I love her and I feel like she's the only one in the world who accepts me, so I want her to be a partner instead of a pet.\"\n\n\"I've looked over your financials, you can definitely take of her. However, I need to know that you won't simply use her for sex. How long have you had her?\"\n\n\"Three years.\"\n\nHe handed me a certificate of adoption from her breeder. \n\n\"And when did you decide that you wanted Molly turned?\"\n\n\"About two months ago. Please understand, I've spent my whole life being rejected, and every relationship I've been in has ended up a disaster.\"\n\n\"Now that scares me, because how do I know you aren't the cause of the disaster? I need to know that I'm not putting your dog in danger by turning her.\"\n\n\"My first real girlfriend cheated on me. The second thought I was cheating on her and dumped me. The third left me because she was bored. My last tried to run off with all my money. I just want to be able to come home to a girl who actually loves me and is happy to see me.\"\n\n\"All right, then. Just let me see the custody certificate.\" He handed me another piece of paper, one from the DHHR, labeling him as a caregiver of a hybrid. They had performed a background check and deemed him clean. \"Perfect, then let's do this. Hey Sonja, how are things on your end?\"\n\nIn the front yard, Sonja was sitting on the grass with the German Shepherd, the two of them chatting. She was interviewing Molly to get an outside view of Thomas, see how he really acted. \"She says he's good!\"\n\n\"Ok, bring her up here.\"\n\nSonja pranced over with the dog following suit. They came up onto the porch, Sonja with a big smile on her face. \"Molly thinks the world of you. I asked her and she said she really wants to be like me.\"\n\nThomas patted her head. \"Yeah, she and I have been through a lot together.\"\n\n\"Ok, let's get started.\" \n\nI focused on the dog, willing her to transform. 'He's your Master, not me. He's your Master, not me.' I said that in my mind over and over again. I had to do that, otherwise, the dog would call me her Master, and past customers had been greatly annoyed by that.\n\nIn happened in a second, the German Shephard transforming into a hybrid, a beautiful young woman with pointed canine ears and a fluffy tail. Seeing Thomas, a wide smile crossed her face.\n\n\"Master!\"\n\nWith a joyful grin, she leaped into his arms and hugged him, the two of them laughing in happiness and Thomas shedding tears of joy. Sonja and I watched them with warmed hearts, happy for their new relationship. Thomas turned to me, unable to stop his tears.\n\n\"Thank you so much,\" he said.\n\n\"Just take good care of her. Make sure she's happy.\"\n\n\"I will.\"\n\nThomas left with Molly, while I counted the five grand in the envelope he had given me. This was a little side business of mine, sanctioned by the DHHR. People who passed the adoption screening could be sent to me and I'd turn their pets for them, female pets, at least. Like all adopted hybrids, the wellbeing of any animals I turned was routinely checked on and monitored. Homeless hybrids were already being adopted left and right, but there were always people who wanted their own pets turned. I would comply if said animal was a cat, dog, mouse, rabbit, raccoon, or cow, because then the girls could interview them to get the real impression of the client.\n\nThe DHHR covered our housing, food, and water and power, due partly to my teaching work at the mansion, but this money I saved for miscellaneous purchases like Christmas presents, and should anything happen in the future and we lose the DHHR's support. But really, I did it because I liked making people happy. The guys I usually helped were like Thomas, rejected by the opposite sex, often unable to date because they were too shy or had other social problems. But hybrids gave endless love without judgment, expectations, or standards, only under the condition that that love was returned. \n\nThe funny thing was that Lorraine a LOT more business than I did. There were a ton of women who also wanted to check out of the dating scene and spend their lives with an animal-eared lover. \n\nWith business taken care of, Sonja and moved to the backyard to join the kids still playing. One of Sonja's three daughters, Maggie, waddled over to me. She had long blonde hair just like her mother and her smiling face could outshine the sun.\n\n\"Master! Master!\" she said. \n\nThat was the only word she could say yet, as was the case for all that could speak. I tried to get them to call me daddy or papa or anything else, but they called me Master, just like their mothers.\n\nShe held out a dandelion in her tiny hand to me. I crouched down and received the flower. \"Thank you so much! That is so sweet!\"\n\nShe smiled and clapped her hands.\n\n\"Master! Master!\"\n\nThe End\n\nThanks for reading! Please tell me your thoughts!"
    ],
    "authorname": "Sage_of_the_Forlorn_Path",
    "tags": [
        "animal girl",
        "cute",
        "comedy",
        "fetish"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/master-master-pt-16"
}
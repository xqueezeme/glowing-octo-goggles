{
    "title": "Coming Out with the Truth Ch. 07",
    "pages": [
        "John:\n\nSarah knew something was up. I was sitting at her kitchen table with a beer while she cooked dinner. She cast me a look every now and again, but she didn't say anything or ask me to help out. Which is how I knew that she knew something was up. Otherwise she'd have been talking to me, at the very least.\n\nI was grateful for the silence. The thoughts rattling around in my head made it hard to think about anything clearly. I was sure that talking to Sarah would only intensify the chaos and I was having enough trouble as it was.\n\nHer husband, Chris, came into the room. He was carrying her littlest, Jonathan, upside down by his ankles and Jessie was running next to him, both of them shrieking with laughter. Chris was grinning madly.\n\n\"Chris!\" Sarah growled. \"You're supposed to be getting them ready for bed not getting them all hyped up! What if you drop him? They're never going to settle down now!\"\n\n\"Come on,\" Chris leant forward to kiss her. Jonathan shrieked even louder. \"I haven't dropped one of our kids yet.\"\n\n\"Yeah, well, there's still time.\" Sarah glared at him.\n\nChris grinned and hoisted Jonathan up to kiss mummy goodnight, then left the room with him over his shoulder. Jessie hugged her and ran after Chris again, gave me a sloppy kiss and big cheeky grin on the way out.\n\nChris was back within a few minutes, Jonathan and Jessie both apparently tucked up in bed. Callum, the oldest of the three, went to bed before they did, apparently since he didn't have a day time nap anymore. Chris cracked open a beer of his own and then wrapped one arm around Sarah and leaned over her shoulder.\n\n\"Mmm,\" he said, inhaling over her bolognaise sauce.\n\n\"Grate some cheese for me, Chris.\" Sarah said wearily, turning away to fix up the salad.\n\nChris nabbed a spoon from the drawer and scooped up some sauce. He winked at me from behind Sarah's back. I didn't think I'd given anything away, but Sarah spun around.\n\n\"Chris!\" She snapped. He grinned and stuck the whole spoon his mouth. \"You're supposed to be helping me, not-!\"\n\n\"Bloody hell!\" Chris's face was suddenly very red. \"Shit, that's hot!\"\n\n\"It's boiling, you idiot!\" Sarah said, quickly whipping out a glass of water for him and starting to fuss.\n\nI had to hide a smile at her quick change of direction. It was very Sarah.\n\nSarah sent Chris off to watch tv with his cold beer and rubbed her eyes.\n\n\"Am I a nag?\" she asked me in a small voice, leaning against the bench-top.\n\n\"What?\" I asked. I guess I hadn't expected that as a question. She sighed and turned the sauce down and came to sit opposite me at the table.\n\n\"Am I a nag?\" she repeated.\n\nI swallowed before I responded. So maybe she got uptight a bit quick sometimes... but she and Chris were happy, weren't they?\n\nIt hit me like a sucker punch to the stomach.\n\nI suddenly realised how much I wanted what she had. It just snuck up on me all of a sudden. Wasn't this just like those times Keith told me off when I burned something or tasted something before it was ready while he was cooking? Wasn't this exactly what I was missing out on?\n\nWasn't this what I couldn't have?\n\n\"Sarah.\" I said softly, feeling suddenly very, very empty. \"This is life. You don't know... you don't know how much I would give to... to have a life like this.\"\n\n\"Really?\" Sarah asked me, looking up at me. I nodded.\n\n\"You and Chris... you don't know how lucky you are.\"\n\nShe nodded slowly, the look she gave me intense and searching. I pretended not to notice.\n\n\"Thanks.\" She said softly and kissed my forehead before getting up to finish the meal.\n\nShe called Chris in and hugged him tight in the doorway for a moment. I looked at my beer.\n\nIt was true. She didn't even know what it was she had. Which was basically everything I wanted. Someone to come home to, someone to wake up with, to raise children with and grow old with. Someone to cook with and do laundry with and talk with... someone to be happy with and to be sad with. Someone special.\n\nBut why? Why couldn't I have it?\n\nThere was no reason that I could see, apart from my own stupid cowardice.\n\nThe knowledge sat like a leaden weight in my stomach, made my chest ache.\n\nI was quiet through the whole meal. Sarah noticed.\n\nShe sat down with me in the kitchen after dinner while Chris got the kids ready for bed.\n\n\"Have you spoken to Keith recently?\" she asked me.\n\nMy back immediately went up. \"No.\" I said defensively. \"Why?\"\n\n\"He's been avoiding you too? I'm worried about him.\" I said nothing. \"Maybe you could talk to him,\" she suggested hopefully. I nearly told her that I couldn't, but then she'd have asked why. But god I missed him. I wanted to tell her, I really did, but something stopped me.\n\nSomething held me back.\n\n\"Yeah.\" I agreed pointlessly, having no intention of actually doing so.\n\nI couldn't face him. Not when I couldn't give him what he wanted.\n\nThe problem was that I had never been more aware of just how much I'd lost.\n\nOr rather, how much I'd thrown away.\n\n\n\nKeith:\n\nEm and I decided to go to the city for the weekend. She thought I needed to get away for a few days and I thought a distraction might be nice.\n\nI had plans to see mum and dad, catch up with a few friends whom I hadn't seen for months, plans to go out and have some fun and maybe actually enjoy myself for a while.\n\nWe drove back to the city early in the morning and had brunch with some friends at a caf\u00e9 we liked in one of the newly trendy neighbourhoods. They were pleased to see us, but I thought they looked at me funny. I knew why. I wasn't myself.\n\nI got through brunch anyway, managed to actually laugh and smile a bit and for a while to feel like I hadn't left a huge great chunk of my heart back on the oval in town.\n\nMy phone rang as we were driving from brunch to Em's place. I didn't know the number .\n\n\"Hello?\" I answered cautiously.\n\n\"Keith. Hi. It's Tim.\" I knew immediately from the voice who it was and sucked in a breath. I didn't know him overly well, but he'd been a nice guy. Under different circumstances we might have even been friends. \"Uh. Graeme's brother.\" He went on. I had to smile.\n\n\"Yeah, I know who you are. How are you?\"\n\n\"Yeah, good. Listen, I heard from Lisa that you're in the city this weekend. She heard from Sal.\" Christ. I'd only said goodbye to Sal 20 minutes ago. And I hadn't realised Sal or Lisa knew Tim that well.\n\n\"Yeah. Yeah, I am.\" I agreed. I didn't have a whole lot of choice if he knew I was here.\n\n\"Great. Listen, you want to meet up for a drink? I really want to talk to you. Face to face.\" He sounded serious. My heart sank. Fuck. I didn't want to talk about Graeme.\n\n\"I'm sort of a bit busy this weekend...\" I said slowly. It wasn't a lie, either. I was jam packing everyone in.\n\n\"Listen,\" he said again. I shut my eyes. \"It's just that- I feel really bad about what Grae did to you. I just want to-\"\n\n\"Tim. I'm fine.\" I tried to sound firm, but I couldn't really. He was silent.\n\n\"Five minutes.\" He countered. I sighed and rolled my eyes at Em. I wondered what exactly Sal had been saying that spurred Lisa to tell Tim and made Tim need to talk to me so desperately.\n\nI drew a breath and fought the temptation to start my sentence with 'listen' the way he did. \"Why don't you drop past my sister's tonight? We're having some friends around for drinks.\"\n\n\"Oh. I-I don't want to be in the way.\" He sounded hesitant. Prick, I thought. Maybe I'd been wrong about him. He was probably afraid it would be a room full of gays and guys in heels.\n\n\"You won't.\" I assured him. \"We set it for seven, so come over a bit earlier.\" There was a short silence. I hoped I'd discouraged him.\n\n\"Yeah, alright.\" He finally agreed.\n\n\"Great.\" I agreed somewhat flatly, and told him the address.\n\n\"What does he want?\" Em asked once he'd rung off.\n\n\"No idea.\" I lied, leant back in the seat and shut my eyes.\n\nTim arrived at 6.30 on the dot. He'd dressed up, which was nice considering I didn't think he'd want to stay long, but he still looked a lot like Graeme. Far too much like Graeme for comfort.\n\n\"Keith.\" He greeted me warmly when Em showed him into the kitchen.\n\n\"Hi Tim.\" I tried to sound bright, but I don't think he was fooled.\n\n\"You've lost weight.\" He said, sounding concerned.\n\n\"Yeah.\" I agreed, although I hadn't realised it was that much. Still, I wasn't going to argue. He'd known me for six years and had seen me often enough to be able to play spot the difference. I got us a beer each. I was feeling way too tense.\n\n\"Keith.\" He said when I came back. \"I'm really sorry about Graeme.\"\n\n\"It's fine.\" I told him. \"You had nothing to do with it.\"\n\n\"Which doesn't make it ok.\"\n\n\"Tim. It doesn't matter anymore. I'm over it. Alright?\" He didn't look convinced. \"I was heartbroken at first, but I got through it. I let go of Graeme when I saw the engagement notice. That was months ago.\"\n\n\"Oh. Right. So- so you knew he was getting married before the cops...?\"\n\n\"Yeah.\" I agreed. He scrutinized me closely.\n\n\"So you're not upset about Graeme?\"\n\n\"Well I wouldn't say that.\" I said with a smile. \"I probably couldn't face him. Don't think I'll ever want to see him again. But that's... he's not the reason I've lost weight, if that's what you're asking.\"\n\n\"Are you alright?\" Tim asked me without hesitation, reaching out to touch my wrist.\n\n\"I will be.\" I answered, trying to sound assured. I probably would be, too. One day.\n\n\"What happened?\" he asked.\n\n\"Fell in love with the wrong person.\" I admitted. \"Things didn't work out.\"\n\nTim squeezed my arm and slid his hand up my shoulder. \"Twice in one year's a bit rough.\" He said softly.\n\nI nodded. \"Yeah.\" He didn't have to tell me that.\n\nI'd forgotten this about Tim. He was confident and self-assured like Grae was, but really physically demonstrative. He was always reaching out to touch the person he was conversing with, stranger or no. I knew he'd freaked a couple of people out and managed to get into a few interesting situations because of it, and it was even more marked with people he knew. I tried hard to ignore the way his hand lingered. I knew without a doubt that he was totally straight and definitely had no interest in me. For all intents and purposes, he was just concerned. But it was still awkward.\n\n\"You need to talk about it?\" He asked.\n\n\"No. I think I'm ok.\" I answered firmly. I was determined not to talk about it, not to cry any more. He smiled. \"How about you?\" I asked. \"How've you been?\"\n\n\"Well.\" He said with a twist of his lips. \"You know, Grae and I had a huge fight. He invited me to the wedding, but it was conditional. I had a list of things I couldn't talk about. The whole family did. And the friends. I think a few of them didn't come rather than lie for him. He rang me. Before I knew. To tell me he was bringing his girlfriend for dinner. I- I laughed, Keith. I told him the least he could do was call you his wife. And there was this silence. And then he cleared his throat and told me her name and told me in no uncertain terms that I was not to mention you or even hint about him having been in a relationship so recently and that I was to give mum and dad the same message and make sure everyone had their stories straight. I couldn't believe it. It was only a month after we last all got together and he expected to bring his girlfriend and have us make her feel welcome. But to lie for him... I couldn't believe it. I pressed and he admitted that... he told me everything.\"\n\nI was touched that he'd fought with Grae, but it was awkward. It was almost humiliating. I didn't particularly want everyone I knew to know that my long term partner had cheated on me and left me for a woman.\n\n\"Let's not talk about it anymore.\" I said. \"I appreciate the sentiment, Tim, but... I don't need to go over it, anymore. It's done. It's over. Alright?\" he nodded slowly.\n\n\"I just wanted you to know that... I'm sorry.\" He said.\n\n\"Thanks.\"\n\n\"And... you know when the wedding was?\"\n\n\"On our anniversary? Yes. The message was... rather clear.\" Tim grimaced.\n\n\"It was just chance. He didn't mean it. It was just the only day they could get the venue they wanted. Short notice, you know.\"\n\n\"Right.\" I agreed vaguely. \"How is she, anyway?\" I asked, because I didn't want to talk about Graeme anymore. I wasn't sure how talking about his wife was any better, but it had been the first thing to come to mind when I was casting about for something else to talk about.\n\n\"She's alright. She's a nice girl, but...\" He looked awkward. I had to smile. \"She found out.\" He finally said.\n\n\"What? About me?\" I was surprised. From what he'd said before, I would have thought that I would have been the secret Graeme took to his grave.\n\n\"Yeah. The police, you know. When Graeme flipped out and gave them your name... she wanted to know who you were when the police talked to her later. I don't know exactly how it played out, but... I gather things are a bit rocky for them at the moment.\"\n\n\"Tim.\" I said. I felt like I was suffocating, my chest was so tight. I didn't need to know this. I didn't want to know any of it. I would have preferred to have never heard anything about Graeme ever ever again. \"Can we change the subject now? Please?\"\n\n\"Oh, sure. Of course.\" I shook my head in slight disbelief and took a deep breath. Obviously he'd really wanted to get that off his chest.\n\nWe chatted for a while until it got close to seven. I asked Tim if he wanted to stay.\n\n\"Oh.\" He said, frowning. I wondered what was up with him. \"Well. My girlfriend will probably be here to pick me up soon.\" Oh. That was it? That was the reason he couldn't stay?\n\n\"Bring her in.\" I said with a shrug. \"We won't bite.\"\n\n\"Really?\" he asked. \"You're sure that'd be ok?\"\n\n\"Yeah.\" I agreed. It would be. He was a nice guy and I was fairly sure my friends would like him. They might be upset he was a) straight and b) spoken for, but that would be all. Unless they tried to flirt with him despite both those points. God, I really hoped they didn't.\n\nThe evening was a great success. We all had too much to drink and were all best friends by the end of the evening. I'm not quite sure what happened after that.\n\nMost people ended up staying over, so when we woke up it was like the aftermath of some frat party which I'd never experienced when I was at Uni, and had never actually expected to experience at my age.\n\nIn the morning we made coffee and Emma sent a couple of people down to the shops to buy large amounts of food to fry up, and I found myself suddenly confronted with a whole lot of my friends who had taken it upon themselves to come and stay with me for a few days to make sure I was ok.\n\nAnd nothing I said or did would discourage them.\n\nJohn:\n\nIt had been more than two weeks. The longest two weeks of my life. Not a day went past where I didn't wonder why I hadn't said anything, and more, why I couldn't now. I couldn't figure out why it was so hard, and every day I wondered if it would even make a difference if I spoke up now. I'd thrown everything away before I'd even recognized what I had.\n\nAnd Keith had left town.\n\nSarah had seen him and his sister packing huge amounts of luggage into her tiny car and I was sick to my stomach thinking that maybe he'd moved back to the city...\n\nIf he had, I was going to have to get his address off Gloria and go up to see him.\n\nYeah. Right.\n\nI asked myself, then what? The problem was that I didn't know.\n\nBut I couldn't stay like this.\n\nI was drowning on my own. It had never mattered before that I was alone; being alone and single had never been a big deal.\n\nAnd now it was. I was miserable. Utterly consumed with regret and with confusion and a great raging emptiness inside me.\n\nLife without Keith in it suddenly seemed so pointless, but the idea that I could have him in my life seemed so remote, so impossible, that I couldn't reconcile that desire with reality.\n\nSo I wallowed. Thought about him all the time and wondered what the hell I was supposed to do now. And felt like I was drowning.\n\nKeith came back on Thursday. I was working but Sarah called me. He was back in town. With an entourage.\n\nI was sick with nerves. What would he say if I went to see him? What if I didn't? Just the thought of it and I froze up.\n\nThat Saturday the town held an annual fair. Normally I took charge of my brothers' sons and took them around but they were starting to grow up and wanting to run around with their friends and I had vague ideas of catching Keith and talking to him. God knows what I was going to say.\n\nI saw his sister first. She was pretty eye catching, with her green star shaped sunglasses and silver sparkly sneakers. She was walking arm in arm with two other women, another two following with two guys who were meticulously groomed and dressed in a way that clearly marked them as from the city and probably gay. None of the others was dressed like Emma was.\n\nThen I saw Keith. He was walking slightly behind them with a tall, blonde man, engaged in serious conversation.\n\nAs I stopped they all stopped and conferred for a moment. A blonde girl with Emma let go and gave the tall blonde man a tender kiss, cupping his face, then linked arms with Emma again and the girls wandered off together. The two guys spoke briefly to Keith, laughing, then they headed off as well. The big blonde man put his arm around Keith.\n\nHot jealousy swam through me. The blonde woman- she could have been the one in the photos the city cops had shown Keith. I'd only glimpsed one photo of Graeme, but this guy was him. I was sure of it.\n\nAnd maybe Keith had been too good for me. But this guy- this guy did not deserve to be within the same country let alone touching him again.\n\nThe icy rage that coursed through my veins was of a strength that took me by surprise. I found myself striding up to them as they walking in my direction, and totally powerless to stop myself. Keith laughed at something he said, his face lighting up and I couldn't stand it. He saw me just as I reached them and his face fell. I half expected him to say hello, but he didn't. The blonde man kept grinning, probably hadn't even seen me. I had to do something -- anything -- to wipe the smile off his face. I grabbed the front of his shirt and roughly jerked him towards me. I didn't care that he was taller than me. I wasn't thinking anymore at that point.\n\n\"You! You stay away from him!\" I snarled. He looked shocked. \"You've already hurt him enough, you prick!\"\n\n\"John -- let go!\" Keith yelled at me, grabbing my arms and trying to push me away. I had a good grip on his shirt. I was not letting go.\n\n\"How could you do this?\" I snarled at him instead. \"How could you bring him here? Have him in your house?\"\n\nKeith stiffened. \"I have the right to entertain whoever I like.\" He snapped coldly.\n\n\"Even a fuck like him?\" Keith went red.\n\n\"Excuse me-\" the tall blonde said tentatively. I shoved him away from me as hard as I could. He went down.\n\n\"John!\" Keith yelled, giving the blonde a hand to his feet. The blonde wasn't quite ready, so Keith hauled him up rather than helping him much. I was shaking. With rage, jealousy, despair- I'm not sure.\n\nThe whole thing had taken a matter of seconds.\n\nKeith grabbed my arm and dragged me behind the nearest stall, out of the eyes of the crowd. The blonde followed. I scowled at him.\n\n\"What the hell is wrong with you?\" Keith yelled. He shoved me. I barely felt it.\n\n\"You're here with him- and he had his arm around you- after everything he did! You forgive him that easily?\"\n\nKeith stared at me as if I were crazy, then comprehension dawned in his eyes. \"You've got no right-\" he sputtered. \"You can't tell me who I can and can't see!\"\n\n\"In case you've forgotten,\" I yelled, flinging an arm out to point at the blonde man.",
        "\"He's not Graeme!\" Keith shouted. Well. That was a slap in the face. \"And even if he was,\" he went on in a lower voice, viciously. \"Why would you attack him? Why would you try and protect me now when you didn't care enough to stand up for me when I needed you?\" His words were a knife in my gut. He was right. What the fuck could I say to that? \"John,\" he said plaintively, shaking his head. \"Please. Just leave me alone.\"\n\nHe was begging.\n\nThat moment felt a lot like dying.\n\nKeith fixed me with a last look, then he turned and walked away. The only action I could muster was to scowl at the blonde as he followed.\n\nI stayed behind the stalls, sat down on a step, winded.\n\nI still didn't know who he was. Or why he'd been kissing that girl and then had his hands on Keith. I was pretty sure Keith wouldn't ever speak to me again though. I was pretty sure I was out of chances. I'd had ideas about talking to Keith, but this... I didn't know what the hell to do now.\n\nIt didn't take long before Sarah found me.\n\n\"You and Keith had a fight?\" she asked instantly. I nodded. \"What happened? Is something- is this why you've both been acting weird?\" I frowned at her. \"John!\" she said, grabbing my arm.\n\n\"Fine, yes! What do you want me to say?\"\n\n\"Why didn't you tell me?\" She demanded.\n\n\"What- tell you I'm the reason your new best friend won't speak to you and have you take his side and never speak to me again?\" I asked bitterly.\n\n\"John!\" she looked shocked. \"What's wrong with you? You're my brother! Tell me what happened!\"\n\n\"No.\" I said coldly.\n\n\"So you'd rather I heard it from Keith?\" she asked.\n\n\"He won't tell you a thing.\" I said firmly. I knew he wouldn't, either. He'd promised and he'd keep that promise. That was just who he was.\n\nSarah glared at me, folded her arms. I stood up and walked away, left her there. Normally I was nicer. Normally I was patient and didn't offend everyone, but this whole thing had thrown me.\n\nI kept seeing Keith laughing, the big-man-who-wasn't-Graeme's arm around his shoulders, feeling that hot, sickening jealousy and now feeling more despair than I had since I'd heard he'd left town. I hated the idea that he could leave me and find someone new so very quickly, but I knew it would happen- if not this time then sometime in the future. He would. He'd find that man who actually wanted to marry him and live with him and share his life with him. And it wouldn't be me.\n\nThe pressure around my chest was suffocating as it hit me.\n\nHere I'd been, seeing Keith with him, wondering what I could say to make him stay with me. Wondering what the blonde guy had that I didn't, when that wasn't the question at all. The question was what he could give, that I couldn't? What could he offer, that I hadn't? And the answer was easy.\n\nEverything.\n\nHimself.\n\nHis honesty.\n\nHis life.\n\nBut I hadn't known, an inner voice tried to justify my actions. He'd never said a thing, so how had I been supposed to know what he wanted? But that was rubbish, really. I knew it was. It was all excuses and cowardice and pathetically transparent attempts to justify something that couldn't be justified at all.\n\nAnd now I finally figured it out, figured out that I was so in love with him that the rest of the world didn't even matter anymore, and I'd lost him.\n\nI'd lost everything.\n\nKeith:\n\nTim steered me along. I wasn't seeing anything. I was reliving the fight. I was reliving those moments where, again, John might have come out and said something-anything. Except obviously he didn't feel like I did. Except that he'd bothered to attack Tim.\n\nI didn't know what to think anymore.\n\nI felt like I'd been living in a strange sort of limbo in the last few weeks and now, seeing John again had somehow brought me right back to where I was that Saturday. And now I had no idea what was going to happen.\n\n\"You ok?\" Tim asked me finally. I nodded dumbly, and looked at him.\n\n\"I should be asking you that.\" I said slowly. John had torn his shirt, and his pants and shirt were dirty down the back where he'd landed on the ground. He smiled.\n\n\"I'm fine.\" He told me. He sounded sure, too.\n\nHot tears pricked the backs of my eyes. \"This wasn't supposed to happen.\" I told him.\n\n\"Come on.\" he said and pulled me along to a quiet caf\u00e9 off the main street. I hadn't been here. I'd become a regular at Jim's. I hoped Jim wouldn't take offence. Tim ordered coffees for us, then once we'd taken a table he pulled out his phone.\n\n\"Don't.\" I begged, grabbing his hand. He stopped. \"Don't tell them. Please. Em's already worried enough about me. It's fine, really. Please. I'm fine.\" He pursed his lips and put his phone away.\n\n\"Keith.\" He said quietly.\n\n\"Please.\" I repeated. \"Let's just have our coffee, then go out and pretend that nothing happened.\" He didn't look happy with this idea but I was determined not to give him a choice. I wanted to enjoy the day, not have Emma make me go home again or fly into a rage and out John to the whole street.\n\nHe frowned at me, but didn't move to call anyone yet. I fidgeted until the young girl brought our coffees over, then tried to drink some. I must have burnt half my tastebuds off.\n\n\"Ok.\" I said when I could talk again. \"I want to be back at the stage for the presentations.\" Tim nodded slowly.\n\n\"Alright. Where did Martin and Chris go?\"\n\n\"I think they were checking out the craft stalls. They're decorating their house.\"\n\n\"Ok. So we can see the presentation and then find them and the girls and then find something to eat.\"\n\n\"You don't have to come to the presentation. I want to go because my friends from the cooking group are all competing against each other, but you might find it boring. Maybe you should go and find Alison.\"\n\n\"Mm.\" A very noncommittal response.\n\n\"Tim, I'm fine.\" I assured him again. I wasn't sure I actually was. I felt... numb, beyond anything else.\n\n\"Yeah. Ok.\" He said doubtfully. \"Well. We'll see. I want to check out some of those stalls, too. We'll go past them on the way to the stage.\" I didn't think he was going to leave me alone now no matter what I said so I shrugged and agreed.\n\nI really didn't want to make a big deal out of this.\n\nI just wanted to pretend that everything was ok. And then maybe if I pretended hard enough, it would be.\n\nJohn:\n\nI kept an eye out for Keith while avoiding Sarah. I was still trying to figure out who this blonde guy was and why he kept putting his arm around Keith and touching his arms and placing his hand against his back. I was wondering if Keith would smile at me like that if I was brave enough to walk around in the open with my arm around him.\n\nFiguring out what an idiot I was had given me this feverish sort of energy. I'd never felt like this before. Restless and nervous and determined to fix this and the consequences be damned- all at once.\n\nI just needed to find Keith.\n\nEveryone was starting to gather at the main stage for the presentations. It wasn't like there were prizes- but the fact of winning meant something around here.\n\nI stood in the shadows right next to the stage, scanning the crowd. Keith was there with the blonde. They were talking quietly together. The blonde was still touching him.\n\nAt least Keith wasn't touching him back.\n\nGloria took out the prize for cakes. She usually did. I was surprised Keith hadn't won it. I'd wanted him to win. I'd planned on grabbing him as he walked off stage and pulling him into the shadows and then... well. I hadn't got further than that. But it didn't matter, since he wasn't going up on stage. Now I had to rethink my plans.\n\nGloria went up on stage and shook the principal's hand. He was acting as the mc for the whole event.\n\n\"Just want to say thank you to the judges!\" she called into the microphone. She was still yelling into it, after all these years. I was sure people had explained to her before that she didn't need to do that, but she still persisted. \"Also to Keith, where are you Keith? I couldn't have done it without you, Keith! You deserve some of the credit since if you'd entered I wouldn't be up here this year! You've taught me more about cooking this year than I've learnt in a long time!\"\n\nThere was a scattered applause, and I saw the smile on Keith's face as Gloria beamed at him.\n\nWhat the hell did I need a plan for? I suddenly knew what I had to do. And there was no planning, no engineering things to get Keith on his own, no prepared excuses. This was it. Here. And now.\n\nI jumped up the steps and grabbed the microphone from Gloria before the principal could get his hands on it.\n\n\"I have something to add.\" I said. My voice was curiously strong and steady given the shaky feeling in my arms and legs.\n\nThe principal blinked at me. \"John- I'm sure we could- but not right now, we're in the middle of-\"\n\n\"Yeah, well, too bad.\" I sounded abrupt and I knew it, but the words were bubbling up inside me, finally coming out and there didn't seem to be much need for conscious decision making. I couldn't have stopped the words, even if I'd wanted to. Everything I'd pushed back for so long was overflowing out of me, rushing out of me in a torrent of words which I didn't even know were nonsensical or not anymore, but I couldn't hold them back. \"This is the most important thing I've ever said in my life so the best thing you could all do is just pipe down and listen up.\" The crowd sort of shuffled, all those eyes flicking back and forth between me and the principal. They made no difference. I was going to say what I should have said long ago.\n\n\"Gloria here has told you all what a great cook Keith Draper is and how much he's taught her, but that's not all he's done. He's succeeded in teaching our boys how to kick one of those round balls for one thing and he's been there for those kids when no one else was stepping up to the plate. But there's a lot the rest of us can learn from him too.\" Keith was looking at me, his expression wary. I fixed the image of him in my mind, looked back out at the crowd. \"He's one of the most compassionate and caring people I know. He's completely honest with the world and not afraid to be himself. His arrival here has changed my life in ways I couldn't even have dreamed of a year ago. His confidence, integrity and calm are things I can only envy. And the most amazing thing about Keith? He loves wholeheartedly and unconditionally. He loves without holding anything back, without asking anything in return. He believes in love so strongly that he's prepared to do anything for it, to compromise everything. And he shouldn't have to. Because love isn't supposed to be like that. So I have something to say. To everyone here. And to Keith.\"\n\nI looked back and found him again in the crowd, looking at me as if there was no one else in the whole street. My heart pounded against my ribs. I drew a breath. \"I'm sorry. I messed up. I could make so many excuses. But I won't, because you've been right this whole time and I've been too much of a coward and too big of an idiot to see it. You've given me so many chances and I just keep letting you slip away. So I'm begging your forgiveness. Keith, I'm begging you to forgive me for being so damned thick. And I'm begging you to come back to me, because- Keith Draper, I'm in love with you.\"\n\nThe silence should have rung but it didn't. The street was still alive with laughter and talk, chintzy music and yelling. It was only the crowd right before the stage that was staring at me with open mouths. I didn't care. I only had eyes for Keith.\n\nHe wasn't smiling.\n\nI shoved the microphone back at Gloria and jumped off the stage. I had to get to Keith.\n\nWhy wasn't he smiling? What had I done wrong?\n\nMy cheeks were burning and I had some vague awareness of what I'd just done, but it didn't matter. None of it mattered unless Keith forgave me. I pushed through the crowd, silent as statues, and found Keith before me.\n\nKeith looked up at me, his eyes overly bright with tears. I reached out to him, to pull him into my arms.\n\nHe held up a hand to stop me. I went cold all over.\n\n\"Keith. I-\"\n\n\"What do you want?\" he demanded in a small voice. I stared at him.\n\nWhat did I want? I wanted- \"Everything.\" I managed, remembering the last time I'd seen him, at the park. \"Move in with me. Or I'll move in with you. We'll get a dog, we'll adopt some kids- I'll buy you a ring if that's-\"\n\n\"No,-\" he said, shaking his head.\n\n\"Keith, I love you.\" I interrupted him. He couldn't refuse me. Could he? If he did, everything had been a waste. I suddenly felt desolate and realised that this must have been how Keith felt about our time together when I'd ruined everything and failed him all in an instant.\n\nMaybe I deserved this. If this was some sick kind of divine retribution for being such a dick before, then this was an awful irony.\n\n\"I don't need a ring.\" Keith said quietly, wiping his eyes. Relief made me weak. The world apart from Keith was swimming. \"And I'm certainly not ready for kids.\"\n\n\"You forgive me?\" I begged. I needed to be sure. \"Babe-\"\n\nKeith nodded. That was all I needed. I pulled him into my arms and crushed him against me. His feet weren't touching the ground and he pressed his face against my neck and shoulder and he started to laugh. I closed my eyes and breathed him in. I was not going to let him go. Not now. Not ever.\n\nI gently placed him back on his feet and Keith pulled back to look up at me, still laughing, and all of I sudden I had to do more. To really show him how serious I was. I brushed a kiss across his lips. Keith smiled at me, eyes dancing. Neither of us were under any pretences. We both knew I'd done it on purpose.\n\n\"Kiss me again,\" he demanded in a whisper, arms sliding around my neck. I didn't need any more prompting than that. I'd been wanting to do little else for weeks. This time, I kissed him properly.\n\nI only stopped because people started whistling and cat calling, and the principal cleared his throat. He'd obviously got the microphone back from Gloria and was prepared to take over proceedings again. He announced that they would be returning to the awards presentations. Keith grinned at me, very pink and rested his forehead against mine, just held onto me.\n\n\"I love you.\" I whispered. I needed him to know and to believe it. I didn't want him to doubt me, ever again.\n\n\"I love you too.\" He whispered back. His warm breath made me shiver.\n\n\"I'm sorry.\" I managed. There was so much to apologise for that I didn't see how he could ever forgive me.\n\n\"John,\" Keith breathed.\n\n\"I'm so sorry. I know I'm an idiot and I just... need you to know how much I missed you. I realised I can't do this anymore. It's never-\"\n\n\"John.\" Keith repeated, brushing his lips against mine. \"It's ok. You did it. It doesn't matter anymore. You're here now.\"\n\nI swallowed hard. \"How can you forgive me so easily?\" I didn't mean to blurt it out, but I was glad I asked the question.\n\nKeith's expression softened. \"I forgive you.\" He said softly, firmly. With such sincerity that something inside me relaxed.\n\nI found myself smiling at him stupidly. We were standing in the middle of a curious crowd professing our love to one another and grinning at each other. I had the thought that it was time to move.\n\n\"Come back to my house. Yours is full of people. And I don't want to share.\" I whispered. \"Stay over. We'll make breakfast and-\" Keith looked up at me, smiling. He'd never stayed over at my place before. He'd barely ever been there at all.\n\n\"Ok.\" He agreed. \"I'd better give Tim or Emma the key first, though.\" I nodded reluctantly. I didn't want the delay, but if they couldn't get into Keith's house they'd either break in or annoy Sarah. Or come and find us. None of those options really appealed to me.\n\nI kissed him again for good measure, then linked my hand through his and began to make my way with him through the crowd.\n\n\"So where will-\" I began to ask where he thought they'd be, but Keith's hand tightened in mine and he stopped. I looked in front of us and stopped as well.\n\nThe blonde guy was standing staring at us with a sort of bemused expression on his face, a phone next to his ear, but he wasn't talking. Who the fuck was this guy, anyway? I frowned at him, and he muttered something into the phone and hung up.\n\n\"Uh...\" Keith said as we walked towards him, which I thought summed things up rather nicely.\n\n\"John, right?\" the blonde man said with a grin, looking me over. \"We were never introduced. Glad to see you've come around.\" I was too taken aback to glare at him. If he and Keith had something going on then surely Keith wouldn't have told him about us... and he wouldn't be happy that I'd 'come around'. \"Tim.\" He introduced himself and stuck his hand out and I bit my cheek and shook.\n\n\"Tim's a friend from the city.\" Keith said anxiously. \"He and his girlfriend came down with some of my other friends to stay for a few days.\" So the blonde girl was his girlfriend. I still didn't like the way he'd been all over Keith, but I couldn't think of any way to question it. Not when I was so clearly the person in the wrong.\n\n\"Sorry about your shirt.\"I said stiffly instead. I hadn't realised I'd ripped it. Tim grinned.\n\n\"That's ok. I'll pass it on. It's well deserved.\" I wondered what that meant and watched him suspiciously.\n\n\"Tim is... Tim is Graeme's brother.\" Keith finally said. Ah. Well, no wonder I'd thought he looked like the photo. Although I could admit that being blonde was enough of a resemblance for me to leap to the same conclusion.\n\nTim let go of my hand and put his hand on Keith's arm. \"Tim.\" Keith said. \"Can I give you the key to my house?\" he asked. He was going red. I grinned. \"I'm going to go back to John's. You'll let everyone in?\" Tim nodded and took the key.\n\n\"Sure?\" he said doubtfully.\n\n\"On the plus side, there's an extra bed now.\" Tim grinned. \"No kinky straight stuff in my bed, got it?\" Keith suddenly said firmly, his expression dark. Tim just laughed. Keith started telling him where things were in the cupboards. I was focussed on the feel of his hand in mine; the adrenaline rush of being here, in public, holding his hand.\n\n\"Why's uncle John holding hands with that man?\" That voice... Charlie or Sam or Callum? My eldest nephews were all between six and ten and all sounded so similar. Who was here? Al or Mike or Sarah? A cold tremor went through me.\n\nI looked up. My eldest brother was only a couple of meters away. His two sons were staring at me. Charlie was only six, looked all wide eyed innocence. Ollie was ten, old enough to understand a bit more . He looked surprised, confused.\n\nI looked at Al. He gave me a look of disgust, of disbelief. I met his gaze. My heart raced. I didn't look away.\n\n\"Dad?\" Little Charlie repeated. \"Uncle John is-\"\n\n\"He's not your uncle!\" Al suddenly snarled, grabbed both boys by their shoulders and started pushing them away through the crowd.\n\nBoth of them looked back at me.\n\nI managed a smile and a wave, hoped it looked convincing. I wasn't sure it did.\n\n\"You done?\" I asked Keith, and he gave me a black look, but grinned at Tim. I didn't think he'd noticed what had just happened. \"We'll see you tomorrow.\" I said to Tim. \"Lunchtime. We'll fire up Keith's barbie.\" Tim just nodded blankly and I pulled Keith along with me. I expected him to laugh, but he slipped his arm around my waist and looked up at me.\n\n\"Barbecue?\" He questioned. I nodded.\n\n\"Unless you don't want me to meet your friends.\" I said, but I sounded stiff and sharp even to myself.\n\n\"I'd love you to. But you don't have to, yet.\" He said, and he sounded so sincere that I believed him.\n\nI couldn't think of what to say next.\n\n\"Are you ok?\" Keith finally asked, in a very small voice.\n\nI looked down at him, his worried eyes, his wary expression.\n\nWe weren't doing this again.",
        "I squeezed his hand and drew a deep calming breath. \"I just need to get out of the crowd, babe.\" I answered. Keith smiled, nodded.\n\nI heaved a sigh of relief as we past the oval, felt some of the tension I'd been carrying leave my neck and shoulders. Keith leant against me as we walked, smiled up at me with a goofy grin, and I felt better.\n\nSome of the boys were playing around with a couple of soccer balls. One came in our direction. I half expected Keith to run and get it but he left it, and two boys sprinted over.\n\nOne of them stopped. Joel looked at both of us, looked at Keith with a question in his eyes.\n\n\"He's out.\" Keith laughed, grinning. Obviously holding hands wasn't clue enough. All the same, the words hit me hard.\n\nI was out.\n\nAfter spending what felt like my whole life so far hiding from the truth, I was out.\n\nJoel grinned at us, then sprinted back off with the others.\n\n\"What, he knew?\" I asked suddenly. It didn't matter; I was just surprised.\n\n\"Yeah.\" Keith answered with a smile. \"He saw us. In the shed that time.\"\n\n\"What the hell was he doing in your back yard?\" I demanded.\n\n\"I don't actually know. I didn't ask.\" Keith said, sounding surprised.\n\nI looked at him and laughed. He smiled and I took the chance to kiss him.\n\nWe walked quickly to my house in silence. I hoped his thoughts were occupied with the same things mine were.\n\nI was glad my house was clean. I'd done quite a bit of cleaning over the last few weeks. I'd needed a distraction and now I was extra happy I'd chosen domestic chores rather than some project in my shed.\n\nI shut the door behind us and pushed Keith against the wall. I couldn't believe he was here. I couldn't believe that he'd forgiven me already, that he was looking at me with an expression I'd really thought I'd never see on his face again.\n\nHe parted his lips and moved as if to meet me for a kiss, but I passed over his mouth and kissed along his cheekbone. Keith groaned, but his hands gripped my shoulders firmly. I bit his ear and felt him shiver, but he arched his neck to give me better access. I nibbled my way down the graceful line of his throat, delicately licked that spot below his ear I liked so much, then trailed my tongue to the corner of his neck and shoulder. I bit him, loved his gasp and the way his hands flexed on my shoulders. I sucked his smooth warm skin hard, heard him moan and pant before I moved back and licked the love bite I'd given him. He was going to have a few more of those before I was done.\n\nI slid my hands under his shirt and stroked my hands up his torso as I pulled his shirt over his head. I took the opportunity to look him over again. He'd lost weight. His ribs were showing more, his jeans hung lower on his hips. I kicked myself inwardly. I'd done this to him.\n\n\"It doesn't matter.\" Keith whispered, kissing my face. He'd obviously figured out what I was looking at.\n\n\"I'm sorry,\" I whispered again anyway, and lowered my lips back to his skin. I made a special point of kissing every single one of his ribs. I was going to learn how to cook properly. I was going to feed him up again. This time, I was going to give him everything.\n\nI slowly kissed my way down the centre of his stomach. I flickered my tongue in and out of his belly button, loved the way his body arched and his muscles flinched. I moved lower, listening to the hitch in his breathing, but I only reached the waist of his jeans before I stood up again and claimed his lips for a deep, demanding kiss. Keith wrapped his arms around me and pressed himself closer. I freed his hair from its tie, slid my fingers over his scalp. Keith moaned softly.\n\n\"Shoes off.\" I murmured and we struggled to get them off while remaining clinging to each other. \"Couch.\" I hissed then, and we stumbled across the room to the couch. I lay on top of Keith, straddled his legs and rubbed my denim clad erection against his. He jerked and moaned and I bit his nipple to make him thrash even more.\n\n\"John,\" he groaned. \"John...\" I sucked his skin and enjoyed the way he caught his breath, intent upon grinding against him until he came. Who cared if he didn't have any other clothes with him? Seeing him wear mine all day tomorrow knowing his were stained with cum would be hot as hell.\n\nKeith whimpered at the same moment there was a knock. We both stopped still. I did not want to answer the door. Not now. Not for at least eighteen hours. I bent my head to kiss Keith again, but the knocking returned, more insistent.\n\n\"I heard you!\" A voice called loudly. \"I know you're in there.\"\n\nI swore and reluctantly got up, tried to adjust my crotch so I looked half way decent opening the door but I think I failed.\n\nIt was Sarah. She pushed past me into the house and saw Keith. He was just sitting up from where he'd been lying on the couch. His hair was beautifully mussed already, and if that and his swollen lips weren't proof enough of what we'd been doing then his shirtless state and the vivid love bites I'd just given him were a small clue.\n\nI stood silently. This was what I'd been dreading.\n\nSarah looked between us for long moments, then finally sucked in a breath.\n\n\"So it's true.\" She said faintly.\n\nI nodded. She stared at me like I was a stranger.\n\n\"Sarah,\" I said gently, afraid and sick at the thought she might hate me. She was different from the rest of my family, though. Surely...\n\n\"I can see I'm interrupting.\" She said frostily, and turned back to the door.\n\n\"Barbecue.\" Keith said rather stupidly. I blinked.\n\n\"Right. Sarah. Barbecue at Keith's. Lunchtime tomorrow. You'll come?\" I felt like I was begging. She pursed her lips and looked me up and down. Christ.\n\nShe adjusted her bag over her arm and turned to go without a response.\n\n\"John?\" Keith asked. He was probably wondering why I was watching my sister head back to her car when he was sitting half naked on my couch. And now I was wondering that too.\n\n\"C'mon, babe.\" I said, holding my hand out to him and shutting and bolting the door. No more interruptions. \"Let's go to my room.\"\n\n\"John.\" Keith said very softly. I looked at him. His expression was serious. He beckoned me back to the couch and I found my legs carrying me there.\n\nHe looked so worried, so sad. Seeing his expression brought everything back.\n\n\"John, my love,\" Keith whispered, standing up and wrapping his arms around me. I didn't want him to see my face, didn't want him to see my tears. I pressed my face against the side of his neck. \"It's ok,\" he breathed, rubbing my shoulders like I'd rubbed his. \"I'm sorry, I'm so sorry,\" he whispered.\n\n\"What for?\" I asked. My voice was rough, but I blinked rapidly and pulled back to look at him. Why should he be sorry?\n\nKeith looked up at me, dull fear in his eyes. I swallowed hard. He reached out and cupped the side of my face. \"I'm sorry things aren't easy. I'm sorry Sarah -- she probably just needs to get her head around it, though. It's a big change. And I'm sorry your family is...\"\n\n\"No.\" I shook my head and kissed him. I did not need him to doubt me. Not now. \"I love you.\" I managed. \"I want this. I don't regret this. But it's still...\"\n\n\"I know.\" He answered softly, squeezing my fingers. \"It's not going to be easy. But you can do it. I'm here.\"\n\nI wrapped him in my arms. I wasn't going back. I wanted him to know what this meant to me; what he meant to me.\n\nKeith held me close, then pulled away. \"Let's make a drink.\" He said softly, pulling me by my hand into my kitchen.\n\n\"Cups?\" he asked, flicking the kettle on. I got them out of the cupboard and passed them over. \"Tea? Coffee? Hot chocolate? Do you have any chocolate powder?\"\n\n\"No.\"\n\n\"What? Not even Milo?\" I laughed shakily.\n\n\"Nope, not even.\"\n\n\"Huh.\" Keith said, blinking at me, as if he'd taken it for granted that everyone in the country surely had a tin of Milo stashed away somewhere. I laughed again. \"How about real chocolate? Any of that?\"\n\n\"Yeah.\" I pulled a block of good chocolate out of the cupboard and his eyes lit up. He grinned at me and took it. I watched him set things up to melt the chocolate and my mouth watered.\n\n\"I missed you so much.\" I told him.\n\nKeith turned around and hugged me tight. \"I missed you too.\" He murmured into my chest.\n\nHe finally gave a deep, happy sigh and looked up at me. He gave me a kiss, then turned to open the fridge.\n\nHe stopped with his hand on the door.\n\nMy fridge was where I stuck important photos. And obviously he'd seen them.\n\nAfter a moment I pulled him back into my arms, holding him close against me.\n\nIf I wanted to share my life with him, then I had to be honest with him. I had to learn to talk to him.\n\nI cleared my throat. \"This is my eldest brother, Al.\" I said softly. \"His wife, Penny. And their kids. Charlie and Oliver. That's Jonathan there, he snuck in. He's in this one with Sarah and Chris and Cal and Jessie as well. And this is my other older brother, Mike, with his wife, Marie. And their kids, Sam, Will and Lewis.\"\n\n\"All boys?\" Keith sounded surprised. Apart from Sarah's one little girl, he was right.\n\n\"Yeah.\" I agreed. \"You should be around at Christmas time.\" The whole house full of them, hyper on presents and sugar...\n\nExcept that this year I doubted that I'd be invited at all.\n\nI drew a deep breath but I couldn't hold back my grief. These kids were so much a part of my life... the only reasons I saw my brothers at all. \"I'll probably never see them again.\" I admitted to Keith roughly.\n\n\"Hey,\" Keith said softly, turning around, but his eyes were sad and he didn't have anything else to add. Instead he just held me tight and let me crush him against me.\n\nI loved him more than I'd ever thought possible.\n\nWe didn't make it to the bedroom. We got close, but I was pulling his clothes off as we went, which rather slowed our progress. Then I pushed him against the wall and started my oral exploration of his body all over again.\n\n\"John, love,\" Keith hissed on a shuddering breath. He came hard and I swallowed it all, let him thrust into my throat as he peaked. I'd gotten a whole lot better at that.\n\nI caught him as he slid against the wall and kissed him softly.\n\nTo have him here, in my house, in my arms... this was a gift. I almost couldn't believe this was happening.\n\nHe smiled at me, a secretive smile, full of wickedness and love and life. \"You never brought anyone home before?\" He breathed.\n\nI shook my head.\n\nHis smile grew and he slid a hand down my chest, over my stomach, inside the waistband of my jeans. \"Make love to me in your bed.\" He whispered tenderly, rubbing my cockhead lightly with his fingertips.\n\nI nodded, watched his face. He looked wildly happy. Happier than I'd ever seen him.\n\nIt made my chest all tight. It made me scared, which seemed ridiculous considering he was here and he'd forgiven me for my idiocy. How could I not have been this scared of losing him before?\n\nI stared at him for a moment, I guess until he realised I wasn't really with him anymore. Then Keith wrapped his arms around my neck and held me tight.\n\n\"I missed you so much.\" I found myself repeating. \"I can't tell you how happy I am that you're here, how much I need you and how-\"\n\n\"Hey,\" he whispered, sliding his fingers into my hair and kissing my cheeks, rubbing his nose against mine. \"John, it's ok. It's fine. I'm here. I love you.\" He was kissing my lips again and I pushed him back against the wall so I could kiss him more deeply as instinct took over.\n\nKeith giggled softly, looking at me through his lashes. \"Take me to bed, lover.\" He said coyly.\n\nMy bed was fairly old and obviously needed something tightening. Of course, by the time I was inside him and the squeaking was particularly noticeable I wasn't about to do anything about it. Especially not with the way Keith was pulling me deeper inside him, pleading in whispers for more.\n\n\"Harder,\" he moaned, and I laughed into his neck.\n\n\"Babe, I'm afraid the bed might fall apart,\" I admitted to him. Keith giggled, stroking his hands up my belly and chest, teasing my nipples.\n\n\"You can sleep in mine,\" he offered, reaching above his head with one hand to brace himself on the headboard, and reaching the other hand behind my head.\n\n\"And what if we break the wall, too?\" I asked between breaths. The bed was hitting it with increasing regularity.\n\n\"Move in with me,\" Keith gasped. \"Wake up with me every morning.\"\n\n\"Really?\" I asked. I was so close.\n\n\"Yes... John...\" Keith groaned, suddenly giving a cry.\n\n\"Yes...\" I moaned as he came hard between us, his legs tightening around me. I hissed it again as I came deep inside him.\n\nI slowly let my weight rest on top of him, Keith's arms wrapped around me.\n\n\"Did you mean it?\" I asked as we caught our breath.\n\nKeith looked at me, smiled.\n\n\"Of course I meant it. I'm not living in your teeny brick bungalow when I bought the nicest house ever just the other side of town and spent months getting it the way I like it. But you don't have to right away.\"\n\nI looked down at him. What was this house anyway, other than a place to come home to after work? Keith's house was a home, a place to live. I imagined setting up my stuff in that garage out in his yard, putting my dvds on the shelf next to his, fighting with him over whose furniture we were going to keep and which cupboard in the kitchen was best for what and I was suddenly sure that that was what I wanted.\n\n\"Yeah.\" I said slowly. I wasn't sure if I was exhilarated or terrified or maybe even both, but my mind was made up. I was in this, and I was in this wholeheartedly. I was throwing myself into this with everything I had and everything I was, starting now. \"I guess we had better wait a bit.\" He nodded, but I thought he looked slightly disappointed.\n\n\"Yeah.\" He agreed. \"What you did today... that was a pretty big step.\" I grinned at him.\n\n\"I think it just might be a bit tricky moving my stuff over while you've still got a house full of guests.\" I told him, ignoring what he'd said.\n\nKeith licked his lips. \"What?\" He said dumbly.\n\n\"When are they all going home?\" I asked.\n\n\"Uh, most of them on Sunday or Monday but... they'll all be gone by Friday.\"\n\n\"Good.\" I said, kissing him lightly. \"Friday it is.\"\n\nKeith:\n\nWaking up spooned against John for only the second time was one of my two top morning wake ups ever.\n\nFor someone who'd never really spent the night with anyone, he was really really good at knowing exactly how to lie so we were both comfy. I woke up with John right up close behind me, his arm loosely around me.\n\nI sighed, planning on lying there a lot longer. I loved this time of morning. The cosiness and sleepy arousal. John made a shushing noise and kissed the back of my neck which made me giggle.\n\n\"Morning.\" I whispered.\n\n\"Hi.\" He answered, finding my hand under the blankets and twining our fingers. \"You're awake.\"\n\n\"Uh huh.\" I agreed. I was so warm and so comfortable and so relaxed.\n\nJohn kissed the back of my neck gently, nuzzled my shoulder.\n\nI woke up some more. Was he just feeling frisky or did he need something more along the lines of reassurance? Comfort?\n\n\"How do you feel?\" I whispered, shifting onto my back so I could see him. I touched his cheek and saw the sudden look of pain in his eyes.\n\n\"Fine.\" He said instantly. It seemed more of a reflex than a real answer. I stroked his cheek and John let out a breath sharply, let his head drop and rest against my shoulder.\n\n\"Kind of shocked.\" He admitted really quietly, shifting onto me and holding me. I ran my fingers through his hair. I felt oddly calm- John had never talked about these sorts of things before. This was moving forward. \"This is... a wonderful way to wake up. But I... Keith... I-\"\n\nI kissed the side of his head and cradled him against me.\n\n\"It's ok,\" I told him softly, pressing another kiss to his head. \"I know. It'll be ok, though. Right now, it's hard, but... you did an amazing thing for me, and I will never, ever forget it. But it did happen fast and you're going to need some time. But I understand, and I'm here for you. And you can talk to me about anything.\"\n\nJohn looked up at me with a smile, looking a lot more relaxed. \"You're amazing.\" He told me.\n\nI blinked. I wasn't used to John telling me things like that. \"Thanks.\" I said with an awkward laugh.\n\nJohn grinned at me. \"Seriously.\" He said. \"You are. Everyone can see it. And- I love you.\"\n\n\"I love you.\" I repeated, my heart swelling, smiling like an idiot. He leant over me, brushed a kiss against my lips.\n\n\"I don't think I ever did anything to deserve you.\" John murmured.\n\nI laughed. \"That's not how it works.\"\n\n\"Good. I guess I'll stop worrying about that then.\"\n\n\"Do you worry about that?\" I asked, surprised. I traced the curve of his eyebrow and the side of his face.\n\n\"I did,\" John finally answered. \"I... But I don't think I'll worry about that so much now that- now that I'm out.\"\n\nI couldn't help the grin that took over my face. Luckily John grinned back at me.\n\nHe kissed me again, hungrily this time. I felt the way he rubbed his hips against mine, found that slow arousal suddenly making the leap into full hardness. I held him close as we rubbed against each other for long moments. The morning felt warm, and the light was golden. This felt like the perfect start to the first day of the rest of our lives.\n\nI pulled back and rolled to retrieve the condoms and lube from his bedside table.\n\nJohn moved up right behind me, kissing my shoulders.\n\n\"Can we get rid of these?\" I found myself asking. \"Go and get tested and never use them again?\" John's mouth curved into a smile. I'd never asked in all the months we'd been together, since I'd been pretty sure he'd have refused on the basis that going to his doctor and asking for a test would have revealed something he wasn't prepared for.\n\n\"Sounds good,\" he murmured back. His fingers slid down the centre of my back, down to my pucker. \"I need you so much,\" he breathed against my neck.\n\n\"Need you too.\" I responded, passing him the condom and smiling at him. I was on my side, my shoulders twisted in the opposite direction to my hips. John was behind me, but I could kiss him, and his groin was right behind my butt.\n\n\"I don't think I could do this without you.\" John whispered, an odd catch in his tone. I turned to look at him more. His eyes were dark. Afraid?\n\n\"I'm here,\" I whispered back, reaching back and touching his cheek, drawing him into a kiss. \"I'm here for you. Always, John.\" He claimed my lips and kissed me with passion and need. I reached down and found him fumbling to put on the condom. I helped him roll it down his length and gave him a gentle squeeze. He groaned softly and kissed me again. \"Here, my love,\" I slicked him up with lube and then hooked my top leg behind his.\n\n\"Keith,\" John breathed my name as I guided him home. I was still relaxed enough from the last night's love making that I took him in without difficulty. \"Keith,\" he groaned softly.\n\n\"There,\" I managed, drawing air deep into my lungs and clutching the pillow with my other arm. \"That's it. All the way, John.\"\n\nJohn let out a soft noise somewhere between a whimper and a moan, placed his hand over mine and moved his hips until his skin was flush with mine. \"Keith,\" he repeated again, his voice rough.\n\n\"I've got you.\" I kissed him softly. \"I've got you, John.\" He filled me, held me tight.\n\n\"Ouunghh... Keith. I'm so sorry... I missed you so much...\" He seemed to be becoming more emotional and not less. \"I love you and I messed up so bad,\" he went on, squeezing me closer instead of making love to me.\n\n\"Hush,\" I reached back again and cradled the side of his face. I felt the wetness on his cheek against mine. \"We're here now. It's ok, John. Everything's ok.\" He drew deep breaths and I fought the urgency rising within me. Rocked my hips back against his to try and gently remind him what he was supposed to be doing.",
        "\"I need you so much,\" he whispered again. His voice was deeper, huskier. I was pretty sure we'd changed subjects. He began to move against me, sliding out and pushing back inside me with the utmost tenderness.\n\n\"You've got me,\" I answered, closing my eyes as John's hand slid down from my hip and began stroking my aching length. His movements were getting stronger and more sure and I was losing track of all the things I'd been going to say to him. Instead I think I only babbled as my nerves lit up and heat swept through my body. \"John, I'm yours. Always. I'm here, my love, I'm here.\"\n\nJohn kissed me, pressing his body closer and wrapping himself around me. But this was getting sort of uncomfortable.\n\n\"Love, let me roll over,\" I whispered. John pulled out of me without saying a word, let me shift onto my back. I hooked my legs around him as he lowered himself again, wrapped my arms around his neck.\n\nI could feel the head of his cock against me, moved against it.\n\n\"John,\" I breathed, kissing his cheeks. He reached down and pushed back inside me. Back home. \"I missed you so much,\" I whispered, pulling him closer.\n\nJohn gave a choked noise and kissed me, continued his rocking motion and the gentle friction between us.\n\n\"Keith,\" he groaned softly against my neck.\n\n\"Yes, John.\" I whispered. My eyes were squeezed shut and I was clinging to him as if he was my only hope of survival. I think he was holding me just as tight. \"Yes...\"\n\nEvery breath I took shuddered in my chest. My body trembled, awash with sensation.\n\n\"Keith, I love you.\" He gasped, hitting the bundle of nerves inside me again and again and I had to moan. This was too much. Too much being said and too much being felt.\n\n\"John,\" I wanted to reply, to tell him how much I loved him too, but I found his hand slipping between us to stroke me again and I forgot how to speak.\n\nA few panting gasps and whimpers later and I came. My body tightened around him and I cried his name as the world faded to white-hot brightness around me - and John followed me over the edge with a hoarse moan and a shudder.\n\nI drew deep breaths and stroked the smooth skin of his back and shoulders.\n\n\"I love you.\" John finally whispered, his head resting against my shoulder.\n\n\"I love you,\" I echoed, holding him tight, trying to hold him inside me for as long as I could.\n\nJohn smiled and rubbed his nose against mine with a soft sigh. He seemed much calmer now, much happier.\n\n\"I should have been promising you all that.\" He murmured finally. I giggled.\n\n\"If you want to, I won't say no.\" I said lightly, but my heart was full and my body was floating.\n\nJohn kissed me, looked at me with warmth, with love. I couldn't stop smiling.\n\n\"Anything.\" He said with a bemused sort of air. \"But I don't even know where to start.\"\n\n\"We'll figure it out.\" I told him, but I didn't care. Not really. Not when he'd already agreed to move in with me, had offered me a dog and a ring and children. A life together.\n\nThat was everything I'd ever hoped for and more.\n\nJohn bent and kissed me again. \"Everything.\" He murmured, as much to himself as to me.\n\nAnd there was nothing else in the world that I could possibly want.\n\nI smiled and kissed him again.\n\nOnce we'd showered and been through John's clothes and found me a t-shirt that fit me halfway decently we decided that I was going to have to stick with my jeans from the day before. Anything of John's just wouldn't have fitted well enough to pass as mine. Although it wasn't like it really mattered since they were probably going to figure out that the t-shirt wasn't mine pretty quickly anyway.\n\nWe drove to the supermarket and got some food, but John suggested we walk over to my house, which I thought was a good idea, since if there was any alcohol we might need it to get through the afternoon, and then we wouldn't want to be driving.\n\nAs we walked, John chatted as much as usual (which means, not as much as me). It was pretty clear that he was nervous despite what he'd said the previous day. I was too. I just tried not to let him see it.\n\nHe drew a deep breath in the street outside my house. I stopped and looked at my house with him.\n\nJohn looked at me with a smile I hadn't expected. \"Well.\" He said. \"I guess you'd better take me in and introduce me to your friends.\"\n\nI grinned back. \"They'll all be very excited to finally meet my mysterious boyfriend.\" I told him lightly. I was suddenly aware neither of us had used that word yet, but I was pretty sure John would smile.\n\nHe did. And pulled me into his arms. \"You know,\" he said slowly. \"I'm pretty sure I didn't come out for a boyfriend.\"\n\nHe was still smiling and his tone was warm, but I wasn't sure what he was talking about.\n\n\"What?\" I asked, hoping I didn't sound too hesitant or confused.\n\nJohn kissed me lightly, rested his forehead against mine. \"I think I'd rather have a partner. Or a husband. Or even a fianc\u00e9. But a boyfriend? Nah.\"\n\n\"Really?\" I asked slowly. I wasn't sure why this surprised me quite so much, but it did.\n\nJohn nodded. \"Always. Forever. Everything.\"\n\nMy heart soared. I was suddenly sure that they were just about the three best words in the English language.\n\n\"I love you.\" John added.\n\nOh. Apart from those three words.\n\n\"I love you too.\" I kissed him back and grinned at him.\n\nThen he took hand and led me up to the door.\n\nHe was smiling and relaxed again. I guessed he was going to swing back and forth a bit between being confident and laid back and being worried, but I thought it was natural. And I was sure that everything would be fine.\n\nAll the same, I felt more nervous than John as he rang the bell.\n\nEmma in particular had the potential to make this really difficult. I didn't know what Sarah was going to do, either. For John's sake I hoped she was going to be good about it. I suspected she would be, since she hadn't attacked either of us the last night, but I wasn't sure. She wasn't just John's sister. She was also his best friend.\n\nAs it turned out I needn't have worried. Tim opened the door for us (it felt pretty weird being let into my own house) and grinned evilly. I held John's hand tightly. He gripped my hand just as tightly in response.\n\nWe stepped into the hall and I heard Emma's piercing wolf whistle before I even saw her peering round at us from the kitchen. There was a burst of muffled laughter, and I led John through.\n\nEmma was supervising in the kitchen (well, her and Sarah) and she led my friends in a round of whistling and hooting.\n\n\"Thanks, Em.\" I said dryly. She beamed.\n\n\"John.\" She said, ignoring me and extending her hand. \"Nice to finally meet you.\"\n\n\"Yeah. You too.\" He said awkwardly, and went to shake her hand. She pulled her usual trick and hugged him instead.\n\n\"Ok.\" I said when she'd let him go and had hugged me too. \"John, this is Martin and Chris, Lisa, Sal and Beatrice... Everyone, this is John.\" The girls all smiled and looked pretty pleased to see him, but Martin looked suspicious and aloof. Yeah, he would. Martin could hold a grudge like no one else I knew. I decided to throw it out there. Just in case. \"And you had all better be nice to him.\" I threatened. I'd meant to add a threat, such as withholding dessert or something equally horrendous, but I saw Sarah coming towards us and stopped. I held my breath, but she just looked at John. She took his arm and led him out of the kitchen, the same time I recognised another couple of people coming into the kitchen from outside, where there appeared to be more people. Joel, Gordon, Gloria and Sarah's Chris along with Zack; I hadn't known he was coming.\n\n\"Hi.\" I said to them, more than slightly taken aback.\n\n\"Finally?\" Zack asked, raising his eyebrows at me.\n\nI nodded, letting out a breath and grinning. \"Yeah.\"\n\nJohn:\n\nWhen Sarah gently but firmly pulled me out of the kitchen I felt sick.\n\nThe relief I felt when she hugged me was palpable.\n\n\"You never did do things the easy way, did you?\" she asked, voice muffled.\n\n\"No.\" I said with a grin, holding her tight against me.\n\n\"How come you never said?\" she asked, looking up. There was hurt in her eyes, no matter how nice she was being. \"How come you never told me?\"\n\n\"I didn't think there was any point.\" I admitted. \"Not when I made it beyond thirty without meeting anyone I really cared about and I never expected to meet anyone I'd actually feel something for. I never thought it would happen. So it was easier just to ... I'm sorry.\" I said. \"I should have told you first.\"\n\n\"You didn't have to tell me first. But telling me might have been nice.\"\n\n\"Yeah. Sorry.\" she shook her head as if it didn't matter.\n\n\"Christ.\" She moaned suddenly.\n\n\"What?\" I asked. She sighed.\n\n\"When Callum next asks me why you're not married I'm going to let you explain it to him.\" I laughed.\n\n\"Yeah. Ok.\" I agreed, way too easily. It wouldn't take her too long to retract that demand. Not when she figured out what else I could tell a curious kid.\n\nShe hugged me again. \"God, John.\" she murmured. \"This is so not going to go down well.\"\n\n\"Well,\" I said, trying hard to sound like I didn't care. \"It's not like we ever really liked Mike or Al anyway.\" I named our two brothers. I'd never really got on with them, and I really disliked their wives. I didn't know why I cared so much what they thought of me despite that, but the fact was that it hurt.\n\nSarah pulled away from me and stared at me, then covered her mouth and laughed.\n\n\"I saw Al yesterday. He was there.\" I finally admitted. Sarah looked at me with worried eyes. \"He told Ollie and Charlie I wasn't his uncle anymore. Charlie was asking him...\" I remembered Ollie looking at me with those big eyes, Al steering them both away before they could even get close.\n\n\"John...\" she said helplessly. I knew she was worried about me. I shrugged.\n\n\"It's fine, Sarah.\" I lied. \"I'll be fine. I've got Keith now.\"\n\nThe smile that lit her face was enormous. She punched my arm. \"I'm so happy!\" she said. \"You've finally got someone!\" I rubbed my arm but grinned back at her.\n\n\"Yeah.\" I agreed. \"He's... I'm moving in with him.\" Sarah gaped at me and then shook her head, smiling.\n\n\"Wow.\" She said, and hugged me tight. I held her back. I'd been pretty sure she'd be ok with this, and I was glad. Losing the rest of the family was enough. \"You certainly don't do things by half measures.\"\n\nI laughed. \"No. You weren't at the presentation when I came out?\"\n\n\"No. Gloria told me all about it. She just about burst with pride. But that's ok. There's a video, apparently.\"\n\nThe ground dipped beneath my feet. \"There's a what now?\" I blurted in shock. Christ, I was glad I hadn't known that at the time!\n\nSarah laughed. \"And I'm sure Penny will be reasonable.\" She said, already launching into her brusque organising mode. \"And if not, then I'll just call you every time I babysit so you can come over and see them. And you know what? Those kids love you. They're not going to just forget that.\"\n\nI smiled at her. I was grateful for her attempt to make me feel better, but I just didn't know how this would ever play out.\n\n\"So how long has this been going on for?\" she asked, changing topics again.\n\n\"Uh... nearly six months.\" I answered with a wince. Her jaw dropped just like I expected.\n\n\"Six- six months? But you both came over for dinner. A lot. I never knew, I had no idea... But...\" She stared at me with an open mouth until I reached out and tapped her chin with a finger. She shut her mouth fast but glared at me. \"I can't believe you.\" She said darkly, shaking her head.\n\nI offered her a smile. She sighed and hugged me again.\n\n\"So this was what the fight was all about? This is why he's been avoiding me and you've been acting odd?\"\n\n\"Basically.\" I nodded.\n\n\"Well.\" Sarah said, squeezing my arm. \"I'll be glad to have the both of you back to normal.\" Although that, I thought, was a very subjective term.\n\nWe went out the back to where everyone was gathering around the table and barbecue. Emma came up and began chatting to Sarah immediately. They seemed to be getting on just fine without me so I moved over towards Keith. Partly because I didn't know any of his friends and I'd forgotten their names already and partly because the skinny dark haired guy was distinctly unfriendly, but also because I'd only just got this right. And I wasn't about to let Keith go anywhere without me just yet.\n\nHe gave me a smile that was, in combination with the sight of him wearing my t-shirt, positively lethal. He passed me a beer.\n\n\"Everything alright?\" he asked softly. His eyes were dark and warm and incredibly happy. Somehow I felt stronger, calmer, just with that look.\n\n\"Yeah, it's fine.\" I agreed, smiling back and slipping my arm around his waist. \"Everything's wonderful.\"\n\nKeith laughed softly and I ducked my head to kiss him.\n\nEmma hooted and tried to get everyone else to whistle at us. It didn't really work, which Keith found even more amusing. He gave me another kiss, then leant back against me and I wrapped my arms around his middle.\n\nWe spent the whole afternoon eating and laughing and talking with our friends, and I don't think I lost contact with Keith at all for hours.\n\nI felt good. I felt optimistic, which said something, seeing as I'd never felt so free or so happy that I could remember, and I couldn't imagine how I could be any happier. There were clouds on the horizon, sure, but nothing we couldn't handle. As long as I had Keith, as long as Keith loved me and I loved him, then everything was going to be fine. He made life worth living, he made everything brighter and happier, and every moment with him made me realise just how damn lucky I was. I felt like I had a second chance, and I was determined not to let anything make me forget what a gift it was or let anything get in the way. I knew what was important now.\n\nFor the first time in a long, long time, I actually felt like everything was going to be great.\n\n..."
    ],
    "authorname": "zolia_lily",
    "tags": [
        "gay novella",
        "gay sex",
        "gay love story",
        "gay romance",
        "drama",
        "coming out",
        "gay drama"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/coming-out-with-the-truth-ch-07"
}
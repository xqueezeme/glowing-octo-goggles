{
    "title": "Between the Push and Pull Ch. 02",
    "pages": [
        "Hi Everyone, \n\n Thanks for the encouraging comments from the first chapter! I have to admit that I wasn't sure how the whole porn thing would go over with readers, but thanks for keeping an open mind.\n\n We're getting into the thick of things here in chapter two\u2014heavy sex content. Hope you're okay with that!\n\n And again, please comment. I love getting your feedback. Happy reading. \n\n Yours, \n\nHB\n\n Copyright (c) 2016 by Hudson Bartholomew. All rights reserved. This story or any portion thereof may not be reproduced or used in any manner whatsoever without the express written permission of the publisher except for the use of brief quotations in a book review.\n\n*****\n\nBetween the Push and Pull \u2013 Chapter 2\n\nRyan tugged at his collar and the bowtie they told him to wear. He insisted that PhD students didn't necessarily wear bowties\u2014he certainly didn't when he was in school\u2014but they insisted that this PhD student did. So Ryan was stuck with a bowtie that threatened to cut off his air supply. \n\nOther than the bowtie, the rest of the outfit wasn't so bad. Slim fit dress shirt with rolled up sleeves under a vest, and tight jeans that showed off his ass. The wardrobe lady called it \"hipster chic.\" Ryan helpfully pointed out that hipster was already pretty chic, so she didn't need to add chic as a description\u2014that earned him a dirty glare. \n\nThe whole production was a lot more than what Ryan was used to. Typically, porn sets consisted of the people having sex, a couple of cameramen and assistants, and the director. Floodlights were set up to light the set and mics were attached to the top of the handheld cameras. \n\nBut this time, Ryan found himself on the sidelines of an honest to goodness film set. They'd managed to rent out an actual nightclub for a few hours and the entire place was buzzing with film crew fixing the lighting, sound guys with mic booms, and people running around with pieces of furniture. Erik was huddled with Gary and one of the cameramen talking through what they'd be shooting today. \n\nNot for the first time did Ryan question what he had gotten himself into. Once he agreed, Erik and Gary immediately started scheduling shoot times, despite Ryan's objection that they didn't have a script yet. That's when Erik sheepishly admitted that they already had the first two episodes mapped out. \n\nRyan remembered the apologetic hesitation in Erik's blue eyes when he handed the script to Ryan. He almost sounded nervous when he asked for Ryan's opinion. Ryan was loath to admit it, but the screenplay was quite good. Now he was worried whether he'd be able to pull it off. \n\n\"Okay, you ready?\" Gary's approach pulled Ryan from his own thoughts. \n\n\"Yeah, where do you want me?\" \n\n\"Over here,\" Gary led Ryan over to a tall round table with a glass of liquid on it. \"This is your drink, so you can sip at it during the scene.\"\n\n\"Don't worry,\" Erik smiled as he approached, \"It's water.\" His dimple winked at Ryan. \n\n\"And where will you be?\" Ryan asked.\n\n\"Erik will be on the platform,\" Gary pointed to the box not far from the table. \"You'll be sipping at your drink, and watching Erik dance. Simple, shouldn't be too hard.\" \n\nRyan nodded\u2014right, shouldn't be too hard. \n\n\"Great, let's get started,\" Gary turned to toward the crowded room. \"Places, people!\"\n\nAnd suddenly there was a hush across the room. The house lights dimmed, as ambient white light filled the space. Colorful strobe lights roamed around the room, controlled by some unseen force. Someone took Erik's robe from him and he stepped up onto the box. \n\nGary called out, \"Action,\" and Erik started moving to an unheard beat. \n\nRyan let his eyes wander, appreciating the ripple of muscle as Erik undulated on top of the box. His skin glistened with oil and the colored lights played off the shiny planes and angles\u2014he looked less like a man, and more like impressionist art come to life. \n\nWide shoulders, and strong arms. Defined chest that tapered to narrow hips adorned simply by straps from a jock strap. His thighs\u2014Ryan had never seen such muscular thighs in his life. Strips of muscle twisting down his limbs until they disappeared in thick, black biker boots. \n\nAnd all along Erik's body swirled one unending tattoo. Ryan had seen one end of it peaking out of Erik's t-shirt back at the bar; wisps of smoke spiraled down his left arm and licked at his elbow. From there, the tattoo snaked up around Erik's shoulder and down his back in a frenzy of little whirlpools. The smoke trailed diagonally across Erik's back, wrapped around his waist, over his hip, and circled his right thigh before dissipating just above the knee. \n\nImpressive\u2014very impressive. \n\nRyan's gaze trailed back up Erik's body to contemplate the most important organ. It was hidden behind a scrap of red fabric, stretched taunt and threatening to burst. Erik's bulge was just as impressive as the rest of his body. Ryan had already adjusted his previous guess based on the videos he found online\u2014now that he was confronted with it in person, he knew his adjustment was accurate. It wasn't eight inches; it was more like nine, and probably five inches in circumference. It was huge. \n\nRyan tried to suppress a shudder at the thought of Erik's size, and his asshole clenched involuntarily. They'd already discussed what roles they'd be taking, and although Ryan almost always topped in his scenes, everyone had agreed that this character in particular felt more like a bottom. Gary and Erik had been wary of asking Ryan to bottom, and he wasn't thrilled by the idea himself, but it had felt like the right way to go. \n\nWhat Ryan had never told anyone, though, was that he secretly preferred to bottom, at least he did in his private sexual encounters. Even now, knowing that the big fat cock hidden by that red jockstrap would soon be invading his ass was enough for Ryan's cock to plump, and he shifted on his feet to alleviate the pressure. \n\nErik turned, his body undulating and rolling, arms raised and his head falling back as if lost to some enthralling music. Just like his front, Erik's back was ripple after ripple of clearly defined muscle, each one glistening in oil, his tattoo a living, breathing creature that moved to its own dance across his skin. His ass, two perky mounds framed perfectly by the straps of the scrappy article of clothing. \n\nThen he bent over, head suddenly between his calves, and piercing blue eyes peaked back at Ryan. Ryan swallowed heavily at the look in them\u2014Erik knew he looked good, and he knew Ryan knew he looked good. \n\nHis new position left his ass lifted high in the air, cheeks spread and Ryan could see Erik's wrinkly asshole exposed to the air. It twitched once as Erik twerked at him. In this position, Ryan could see Erik's tattoo as it wrapped around his inner thigh, dangerously close to his most private of parts and Ryan wondered at how it must have felt to have needles piercing into such delicate skin. \n\nRyan's hand ached, and he realized that he'd been clutching his glass of pretend alcohol much harder than necessary. He forced himself to relax his grip and raised the glass for a sip. It was disconcerting how the glass trembled in his unsteady hand. \n\nRyan slowly lowered the glass and placed it gently back on the table, eyes lowered, gathering himself for a moment before glancing back up. Erik was watching him, reading him, studying him while his body moved. \n\nErik's hand floated up to his chest, two fingers rubbed at a nipple until it stood on end. The other hand lingered on his bulge, tugged and massaged. And all the while, his eyes unwaveringly focused on Ryan, drawing Ryan into the performance. \n\nThis was an act, Ryan reminded himself. They were on camera. But the way Erik looked at him, the way Erik touched his own body and danced to the silent music\u2014it made it easy to get lost in the make-believe moment they were creating.\n\nErik knew how to move; Ryan certainly could appreciate that. He wondered suddenly what genre of dance Erik specialized in in his past life\u2014Ryan made a note to ask about it. It was a weird thing to think of in the middle of a scene, but Ryan actually felt more surprised that his mind hadn't wandered well before then. \n\nIt was a testament to how good Erik was, good enough to move Ryan from his typical appreciation for the male body, and pull him into a more primal attraction to something beautiful. There was absolutely no doubt that Erik was different from the other guys Ryan had met in the industry; the problem was, Ryan just didn't know what he should be doing about that. \n\n\"Cut,\" Gary's voice rang out in the eerie silence of the set. \n\nRyan blinked a couple of times as his brain reoriented itself. Turning toward the sound of Gary's voice, he found a giant smile on the other man's face. \n\n\"Guys, that was amazing. Unbelievable.\" \n\n\"Yeah?\" Erik had slipped on a robe and was heading toward the monitor. \"Let's take a look. Ryan, you want to watch?\"\n\n\"No,\" Ryan answered immediately. He never watched himself. \n\nErik shrugged and his dimple winked at Ryan. \n\nRyan watched Erik watch the video they just shot. The little furrow appeared between his eyebrows, and his eyes darted back and forth, just like that time he was reading the newspaper. He was in analysis mode\u2014gathering information, dissecting it, and drawing a conclusion before moving on to the next set of facts. \n\n\"This is good,\" Erik concluded. \"This is very good.\" \n\nHe and Gary engaged in some sort of discussion while Ryan waited for his next instructions. Around him, the film crew made adjustments, moved equipment, and generally looked busy although Ryan wasn't sure exactly what it was they were doing. \n\nThey ran through that scene a couple more times before moving on to the next. This time, Ryan was told to exit through the club's back door to find Erik outside, taking a smoke break. There was some dialogue involved, which Ryan was a little nervous about. In his entire porn-making career, he never actually had dialogue that needed to be convincing. He'd already spent a couple of days making a fool of himself in front of his mirror at home, reciting lines until they didn't feel stupid coming out of his mouth. \n\nThe first couple of times they ran the scene, Ryan would forget what he was supposed to say. Then the few times he got his lines right, Erik would burst out laughing and ruin the shot. \n\n\"Sorry! Sorry!\" Erik shook his head back and forth with his mouth hanging open. \"Ahh...\" came a strange sound as he got the giggles out of his system.\n\n\"One more time, I'll get it right, promise!\" Erik settled himself back onto the wall and lifted his cigarette into the camera's field of view. \n\n\"Action!\" Gary called out. \n\n\"Uh, hi,\" Ryan hit his mark, hands in pocket, head slightly tucked, voice shy. \n\n\"Hi,\" Erik barely spared him a glance and took a long drag from his cigarette. \n\n\"Um, you're great in there. I was watching you dance.\"\n\n\"Yeah, I saw you.\" Erik blew a lungful of smoke up and away from the camera. \n\n\"Uh, my name's Roman. Roman Cox,\" Ryan stuck out his hand and peaked up from under his lashes. \n\nErik glanced down at Ryan's outstretched hand, as if weighing his options before slowly extending his own. \n\n\"Everett Flynn.\"\n\n\"Everett,\" Ryan let the name roll around on his tongue. \"That's a nice name.\"\n\nErik raised his eyebrows, lips twitched in a smirk. \"Yeah.\" \n\nA moment of pregnant pause. \n\n\"So, Roman. What brings a nice fella like you to a place like this?\"\n\nRyan's head snapped up to find an amused smile on Erik's face. \"Oh, um, well, it's kind of a weird story.\"\n\n\"I'm all for weird stories, and I've got a couple of minutes to spare. Entertain me.\"\n\n\"I'm a PhD student. I'm doing research of the psychological effects of being a go-go dancer. I'm in the process of recruiting some subject to interview.\"\n\n\"Psychological effects? Like if we're damaged by dancing practically naked in front of other men?\" \n\n\"Uh, well, not damaged. That would be starting with a negative bias,\" Ryan's voice adopted the academic drone that once came so naturally to him. \"But how dancing affects what the dancer thinks about himself, his relationships with others, his role in the social hierarchy. Stuff like that.\"\n\n\"Right,\" Erik puffed on his cigarette. \"So, Roman, do you have any research subjects yet?\" \n\nRyan let out a nervous laugh, \"Not yet. I'm still looking for people who are willing to talk with me.\" \n\nErik dropped the cigarette to the ground as he pushed away from his spot on the wall. He turned toward Ryan and took the one step to bring them inches apart. Ryan found himself raising his eyes a couple of inches to meet Erik's taller stature. His lips parted under Erik's intense blue gaze. \n\n\"Well, Roman. You now have one research subject.\" \n\n\"What?\" The word came out breathier than Ryan had anticipated. \n\nErik's smile deepened in response. \n\n\"Me, Roman. I'll be your first research subject. That is, unless you don't want me?\"\n\n\"No! No, I definitely want you.\" \n\n\"Good.\"\n\nErik raised one hand to hold Ryan's chin and lowered his mouth to close the two-inch gap to Ryan's lips. It was a quick kiss, a test kiss. When Ryan didn't back away, Erik came back for seconds, deepening the contact, his tongue sneaking out to tease. \n\nRyan responded, his own tongue meeting Erik's as they lapped and nibbled at each other. Ryan let a whimper escape his throat and angled his head to both deepen the kiss and let the camera get a better view. \n\nDamn. Erik could kiss. It shouldn't have been a surprise to Ryan, but he somehow had not been expecting such an expert manipulation of lips and tongue. When Erik finally pulled back, Ryan was out of breath, and he wasn't faking it. A part of him recognized the dilation of Erik's pupils and the flush on Erik's cheeks, and he was glad he wasn't the only one affected by the kiss. \n\n\"Stick around, Roman. We'll... talk... when I'm finished my shift.\" \n\n\"And cut!\" Gary called out. \n\nRyan took a step back, and a rush of cool air came between their heated bodies. A tinge of regret tugged at Ryan, which didn't make any sense, so he ignored it. He glanced quickly at Erik and caught blues eyes staring at him and a pink tongue sneaking out to swipe at rosy lips. \n\nRyan knew they were both professionals who were good at their craft, but something about that kiss had nothing to do with acting. \n\nErik headed off to review the video with Gary, and Ryan settled into the background again. It was just acting, he told himself. This whole thing is just acting, just like every other porn movie he's shot. It's all just pretend. So why was he having a hard time convincing himself? \n\n*****\n\n\"So you guys are going to sit facing each other on the couch. Ryan, you'll have your notebook in your lap, taking notes, got it?\" Gary gave them some instructions as they set up for the scene. \n\nRyan nodded and fiddled with the blank notebook in his hands. This scene should have been the easiest of the ones they had worked on this week\u2014it was the only scene with actual sex in it, the only type of scene that he'd had experience with. And yet, he couldn't shake the tickling restlessness in his limbs, or the way his stomach fluttered with nerves. \n\nHe told himself to get over it, focus on the job, and be a professional. But then Erik would shoot him a blue-eyed look, piercing past Ryan's typical fa\u00e7ade and set him on edge. \n\n\"Hey,\" Erik's voice whispered into Ryan's ear, and was accompanied by his strong hands on Ryan's shoulders, kneading at the tensions. \"Are you sure you're okay with bottoming?\" \n\nRyan had to suppress the shiver caused by Erik's proximity and reminder of his role in this scene. It wasn't a role Ryan usually played in his videos, so maybe that was why he was nervous. Ryan clenched his asshole at the thought of being penetrated, and gave Erik a slight nod. \n\n\"Okay,\" Erik gave Ryan another squeeze on his shoulders. \"Like we discussed, just tell me if anything doesn't feel good, okay?\"\n\nRyan gave him another slight nod. \n\n\"Places, everyone!\" Gary called out. \n\nThere were fewer people on set today, more like a typical porno shoot\u2014just Gary and a couple of camera guys, and a couple of assistants. Ryan was back in his professorial getup, complete with vest and bowtie. Erik was again half naked, clad only in low riding sweats with the band of his briefs peaking through. \n\nIt would be a couple of minutes before they got into the real action, but Ryan took a few deep breaths to get his dick to start moving in the right direction. Studying Erik's body helped. The baggy sweatpants contrasted with the narrowness of Erik's waist, his Adonis lines cut deep, one adorned by wisps of his tattoo, and disappeared into the waistband of his briefs. \n\nErik settled himself on his side of the couch and stretched his arm across the back of the cushions. His biceps bulged at this angle and the swirling, smoky tattoo seemed to move on its own accord, twisting itself to wrap around Erik's body. \n\n\"How do I look?\" \n\nRyan's eyes shot up at Erik's question to find a knowing smirk on Erik's lips. Cocky bastard. Ryan grinned and shrugged before taking up his position on the couch, notebook in hand. \n\n\"Here, don't forget these,\" Gary handed Ryan a pair of thick-rimmed reading glasses to complete his nerdy professor look. \"Ready?\" he asked the two men, both of whom nodded their consent. \n\nGary stepped back and let the camera guys get into position. \n\n\"Action!\" \n\n\"Everett, tell me why you wanted to be a go-go dancer?\" Ryan asked. \n\nErik chuckled and ran a hand through his hair before answering. The movement caused his muscles to dance, and Ryan could see one of the camera guys angling to get a close up shot. \n\n\"Well, it sounded like fun,\" Erik's voice was low and lazy, his eyes half lidded and smoldering. Ryan's tongue sneaked out to wet dry lips, and his teeth clamped down gently on his full bottom lip. \n\n\"And I heard it paid well. If you work at the right club on the right nights, the guys tip really well. Plus, I like being naked and I like dancing\u2014it's a turn on.\" Erik shifted closer to Ryan as his spoke, every movement fluid like the smoke covering his body. \n\nRyan cleared his throat, and swallowed thickly. \"Once you got started, was it what you expected it to be? Or was there anything surprising about the job?\" He glanced down at the notebook and pretended to jot down Erik's answer. \n\n\"It's a lot more of a contact sport than I had anticipated.\"\n\n\"What do you mean by that?\" Ryan could feel the heat from Erik's body now; their knees were touching on the couch. \n\n\"Well, a lot of guys are hands-y and they're not shy about copping a feel when they want.\" \n\n\"So they grope you when they dance?\"\n\n\"Mm-hmm,\" Erik murmured. He was close enough now that every breath Ryan breathed smelled like his unique scent of musk. Combined with the heat that always seemed to radiate off of Erik, it was enough to get Ryan's dick nice and plump. Ryan shifted awkwardly to ease the pressure in his pants. \n\n\"Sometimes it's annoying because I just want to dance, and the guy is being kind of rude. But sometimes...\" Erik trailed off.\n\nRyan glanced up from his notebook into hypnotizing blue eyes, just inches away from his own. He coughed and reached up to adjust his fake glasses. \n\n\"Sometimes, I don't mind,\" Erik reached out and ran the backs of his fingers down Ryan's cheek. Ryan shut his eyes and turned into the touch. \"You know, I find guys in glasses really sexy. I guess I have a thing for the nerdy hot look.\"\n\nThat wasn't in the script, and it took Ryan a second to realize Erik was ad libbing. By the time he figured it out, Erik was leaning in and Ryan had just enough time to tilt his head up, gasp quietly and meet him half way. \n\nIt was a slow kiss, gentle little licks and long presses of lips against lips. No teeth. ",
        "Erik's hands found their way into Ryan's hair and angled his head for better access. Ryan opened wider to give Erik's tongue more room to explore his mouth; it swirled, teased and taunted Ryan's tongue to give chase. Ryan's own hands grasped at Erik's wide shoulders, as if it would give him greater purchase to pin down Erik's tongue. \n\nErik's arm snaked around Ryan's back and pushed gently to adjust Ryan's angle. Ryan took the cue and tilted his head back, allowing Erik to lick across his jaw, and suck on Ryan's earlobe. Ryan wore studs in both his ears\u2014round disks in matte black. Erik caught the one stud in between his teeth and tugged, then used his tongue to twirl the piece of jewelry around in circles. \n\nRyan gasped and cried out\u2014tendrils of fire shot from Ryan's earlobe down to his cock, along the way wrapping around the most sensitive parts of Ryan's body, mimicking the path of Erik's smoke. \n\nErik kept playing with the earring, and each twirl would send more tendrils of fire until Ryan could no longer think and could barely breathe. He was vaguely aware of desperate cries emanating from his throat, and his fingers clawing at Erik's back. Just when he thought he was going to black out from lack of oxygen, his ear was released. \n\nThe sudden coolness of air against the wet skin was a shock to his system, as was the gentle breath Erik breathed across the tenderized flesh. Then a quick tug on his knees and Ryan ended up flat on his back, blinking up at the ceiling, wondering what the hell had just happened. \n\nThat definitely wasn't in the script. \n\nAs Ryan struggled to breathe, Erik's smug grin appeared above him. Cocky bastard. \n\nRyan tossed the fake glasses on the floor right before he pulled Erik down for a kiss and didn't hold back. He plunged his tongue as deep into Erik's mouth as he could reach until Erik's strength failed and his weight collapsed onto Ryan. A thick bar of heat landed near Ryan's crotch, scorching hot even through Ryan's pants. With one hand holding Erik's head in place, Ryan reached down with his other to palm Erik's ass. Rather than finding the soft material of the sweatpants, Ryan instead grabbed hold of a handful of firm, muscled flesh. \n\nErik was naked. While Ryan was still fully clothed. A groan escaped from Ryan's throat as he ground his aching cock against Erik's. \n\nDespite Ryan's attempt to continue ravaging Erik's mouth, the naked man was able to wrench himself away, just a few inches until they both panted into each other's faces. Erik's blue eyes were clear and determined\u2014an unspoken challenge had been accepted and Ryan suddenly realized he was in over his head. \n\nErik feigned a kiss and instead landed on Ryan's neck. Using his teeth, Erik pulled at Ryan's bowtie until the knot popped and the fabric fell away. One by one, Erik's dexterous tongue worked at each button on Ryan's shirt until Ryan's chest was exposed, heaving with his breathing. \n\nWith lidded eyes, Ryan watched as Erik pushed back and maneuvered their legs until he was sitting on his haunches with Ryan's knees on either side. Erik massaged Ryan's thighs as his piercing blue eyes raked over Ryan's body. \n\nRyan bit at his lip and lay there to let Erik have his fill. \n\nA number of times now, Ryan had admired Erik's dance-trained body. And while Ryan wasn't under any illusion that he looked quite like Erik, he knew his own body was lust-worthy. And from the expression on Erik's face, Ryan was feeling pretty pleased with how his body was being received. \n\nErik leaned forward and started licking and trailing kisses along Ryan's body. Ryan let his head fall back and just enjoyed the sensation of mouth, tongue, and teeth exploring his skin. Some attention was paid to one nipple, then the other. It felt nice, but they weren't really hot spots for Ryan. \n\nAs the exploration continued, Ryan felt a hand groping at his jean-enclosed cock and he rocked up against it as encouragement. He was achingly stiff and desperate to be released, but he made no movement to ease the discomfort\u2014Erik was scripted to strip him of his clothes, and the way Erik's mouth was venturing farther and farther south, Ryan was sure the other man had something creative in mind. \n\nHe wasn't disappointed. A scorching heat enveloped Ryan's cock through the fabric of his pants. Erik mouthed at Ryan's bulge until he found the head and focused his attention there. The suction increased in force as a hand massaged at Ryan's balls\u2014Erik was doing a great job at getting Ryan impossibly hard. Absolutely no need for a fluffer or any of the other tricks porn stars used to stay hard. \n\nRyan lifted his head to watch Erik work away at his crotch. He ran his fingers through Erik's hair, and found it soft and thick, curling slightly at the ends. Ryan used his fingernails to scratch lightly across Erik's scalp, which earned him a purr that reverberated along his cock. He felt a dollop of pre-cum wet his briefs. \n\nErik's blue eyes flashed up to meet his; Ryan was gratified to find that they weren't quite as clear as moments before. Maintaining their stare, Erik's teeth gripped at the button fly of Ryan's jeans. Twisting his head, Erik popped the button out of its hole and moved down to the next one. Ryan had to wonder at the strength of Erik's teeth. \n\nWhen all the buttons were undone, Erik's hand gripped at the waistband of both the jeans and Ryan's briefs underneath. Prompted by a quick tap of the finger, Ryan raised his hips and Erik yanked his clothes down his thighs. Ryan's cock sprang up and hit against his stomach with a slap, throbbing in its freedom. \n\nRyan lifted his legs straight into the air, like they'd discussed earlier, and Erik quickly rid him of his jeans and his socks. With his leg lowered on either side of Erik's thighs, Ryan pushed himself up to sitting and Erik ran his hands down Ryan's arms, pushing his shirt off in the process. \n\nWith them both naked, Ryan reached for Erik, and they traded sloppy kisses while their hands explored foreign skin. Erik's arms snaked around Ryan's back and supported him as they laid back down on the couch, chest against chest, thigh against thigh, and two heated cocks meeting for the first time. \n\nErik threaded a hand in between their bodies and grasped their two cocks together. Ryan jerked into the grip, feeling the head of his cock bump against Erik's; he was rewarded by a grunt that escaped Erik's throat. \n\nThey alternated thrusts into Erik's hand, velvet steel against velvet steel. Ryan particularly enjoyed how the sensitive heads bumped against each other, each time resulting in that little grunt from Erik and a little nip on Ryan's lips. \n\nErik seemed pretty engrossed in the playtime their cocks were having together, but Ryan could sense some restlessness coming from Gary in the corner. He gave Erik's ass a firm squeeze and almost chuckled when Erik responded with a reluctant groan. \n\nWhen Erik pulled back, Ryan couldn't help but smirk\u2014Erik's eyes were definitely not clear anymore. With his hands on Erik's strong thighs, Ryan gave them a squeeze and tug. Erik shuffled up\u2014normally an awkward move, but by Erik, graceful as a swan\u2014until he knelt across Ryan's chest, his nine-inch cock presented for Ryan's inspection. \n\nUncut\u2014excellent. \n\nRyan ran his hands up Erik's torso, fingers and palms skimming over the taunt skin. Erik's hands rode on top of his own, directing them to where he wanted them to go. Erik's head was tilted back, hips thrust forward, abs tense in anticipation of what was to come next. Ryan aimed to please. \n\nThe foreskin on Erik's cock was already drawn back, the head swollen and red, heat radiating off of it. As Ryan drew in a breath, he could smell that muskiness he now associated with Erik, strong and potent, swirling around Ryan's senses. \n\nHe blew a gentle stream of air across the engorged head and got a responding squeeze of both his hands. Seemed like someone was sensitive. Slowly, Ryan drew the tip of his tongue across the heated skin and lapped and licked while blowing open-mouthed breaths and watched as Erik's cock jump. \n\nRyan's hands were being held in vice grips now, one held over a nipple and the other pulled up against Erik's cheek. Recognizing his cue, Ryan curled his fingers and pinched at the nipple under his hand. Erik's entire body tensed, his hips thrust forward and the head of his cock popped unexpectedly into Ryan's mouth. No worries\u2014Ryan could work with that. \n\nHe closed his lips around Erik's cockhead and marveled for a moment at how full his mouth was with only the head. Hollowing his cheeks, Ryan sucked and twirled his tongue around the head, probing at the piss slit. A drop of salty pre-cum greeted his tongue and Ryan groaned to let Erik know he approved. \n\n\"Fuck,\" Erik's voice sounded strained. Ryan was encouraged. \n\nLifting his head off the armrest, Ryan took more of Erik's cock into his mouth. From his position, and considering the thickness of Erik's cock, he couldn't get even half of the length in before the bulbous head hit the back of Ryan's throat. Ryan wiggled his tongue back and forth against the underside of Erik's cock, and swallowed a few times to massage the sensitive head. \n\nWith a spasm, Erik collapsed and he just barely caught himself with a hand braced next to Ryan's head. With his hands freed, Ryan wrapped one around the base of Erik's cock, and used his spit to ease the twisting motion that he matched with his mouth. \n\n\"Ugh,\" the groan came out in an unsteady sequence, and Erik's other hand came down to support his weight above Ryan's head. \n\nErik thrust his hips, and Ryan gave him an encouraging squeeze on the thigh. Granted permission, Erik's thrusts became stronger and deeper until Ryan could feel his spit dribbling down his chin. \n\nRight before Ryan was able to give the signal that he'd had enough, Erik gently pulled himself from Ryan's mouth. Ryan kept stroking the thick, long piece of meat while Erik caught his breath above him. \n\nWith a sigh, Erik murmured a \"fuck\" under his breath before bending down to capture Ryan's mouth with his own. As their tongues dueled, Erik floated down Ryan's body, his cock leaving a wet trail of Ryan's own spit. When he settled back between Ryan's thighs, he shifted his attention to Ryan's cock. \n\nErik didn't spend too much time on Ryan's dick, which was fine since they were running behind schedule and needed to get to the fucking. So with an apologetic glance upward, Erik slid Ryan's cock deep into his throat and worked it over for a few minutes. \n\nRyan was impressed, there was no hesitation on Erik's part, just open up and in it went. Ryan wasn't as long or thick as Erik, but at seven and a half inches himself, most scene partners took a couple of bobs before they got him all the way in. \n\nWhile Erik's throat worked away on Ryan's cock, Erik's fingers were probing for Ryan's hole. When they found it, Ryan couldn't help the involuntary clench at the unfamiliar touch. Erik purred around Ryan's cock and Ryan took it as a directive to relax. \n\nThe fingers rubbed in gentle circles across the sensitive skin, with no attempt at a breach. Ryan laid his head back, closed his eyes and focused on the wonderful suction on his cock\u2014just enough to get his balls churning, nothing too intense that would trigger a pre-mature orgasm. \n\nThen strong hands pushed Ryan's thighs back and he reached for the backs of his knees to keep them up. The wonderful suction eased off his dick and moved down to his balls, where each one was treated to a few moments in the wet heat. And finally, his ass. \n\nErik's talented tongue swirled around the wrinkled skin and teased at the opening, swirled and teased, swirled and teased, fanning that earlier fire into a stronger flame. Erik kept probing, a gentle push of the tongue, then easing back until Ryan started clenching his ass to keep Erik's tongue in place longer. \n\nAt the same time, Erik's hand kept jacking on Ryan's cock, pulling his foreskin over the head and back down again. How did he know that Ryan liked that? The dual sensation on his cock and his ass was confusing, and Ryan found himself thrusting his hips back and forth, chasing after both Erik's hand and tongue. \n\n\"Everett, please.\" The words escaped Ryan's mouth before he realized he uttered them. He felt Erik smile against his ass cheeks before his hole was bombarded with a driving piston that was Erik's tongue. Erik's hand twisted around the head of Ryan's cock, his thumb swiping across the top. At the same time, Erik's nose was rubbing into Ryan's perineum and Ryan could feel it massaging his prostate. \n\n\"Fuck, fuck, fuck,\" Ryan gripped at the back of his knees, fingers cramping. He could feel himself inching toward the edge, the pressure building deep in his stomach as Erik worked all of his sensitive spots. He was going to come, he could feel it; but it was too soon, and Ryan wasn't sure he could do anything to stop it.\n\nFinally, he found a moment's clarity of mind to reach for Erik and came up with a handful of hair. A part of him warned to be gentle, but the part that was about to explode in a million pieces had no restraint\u2014he grabbed the fistful of hair and yanked. The relief was instant as Erik staved off his attack to struggle out of Ryan's grip. \n\n\"What the fuck?\" Erik sounded annoyed, but Ryan didn't care at the moment. He was too busy trying to claw his way back from the edge. Little tremors shook his body, and any little touch would surely send him flying over the edge. \n\n\"Alright, alright,\" Gary spoke up from behind the camera. \"Look at him, you're killing the guy and you haven't even fucked him yet. Here, take these.\" \n\nGary tossed a foiled packet and a bottle at Erik. \n\nRyan felt some shifting around in between his legs, but he ignored it. With his eyes shut tight, he focused on getting his breathing under control and his head cleared of the haze of serotonin. \n\nHe opened his eyes again at a squeeze on his thigh. \n\n\"Ready?\" Erik asked, blue eyes gentle. Whatever annoyance he felt at getting his hair yanked, he must have gotten over it. \n\nOne more deep breath and Ryan nodded. \n\n\"I don't think I'm going to last long,\" Ryan warned, he noticed how gravelly his voice sounded. \n\nErik grinned, his dimple winking at Ryan. \n\n\"Legs,\" he instructed and helped Ryan into position with a hand under Ryan's thigh. \n\nWith his hole exposed again, Erik blew a stream of air across the twitching muscle and Ryan had to squeeze his eyes shut to block out the image of Erik's smug grin and twinkling eyes hovering over his own ass. \n\nA cool gel was spread across Ryan's hole and then a gentle pressure as Erik pushed in a finger. It'd been a long time since Ryan had been breached like this, and just the one finger felt unbelievable thick. It took a few thrusts, but Ryan's body slowly recovered its muscle memory, and his sphincter gradually relaxed. \n\nThen a second finger, and he already felt impossibly full. Slowly, Erik worked them into Ryan's ass, planting soft kisses across the backs of Ryan's thighs as he went. When they were finally in to the hilt, they twisted, curled and scissored inside of Ryan's ass. \n\nThe tendrils of fire were back, racing from Ryan's stretched hole out through every cell of his body. Erik's fingers quickly located Ryan's prostate, and every tap sent out a new burst of flames. \n\nHot, Ryan was too hot. He couldn't breathe; the air was too hot to breathe in. He turned his head back and forth, trying to find a cooler patch of air to ease the heat. \n\nHis ass. His asshole was on fire and it felt like too much and not enough at the same time. He needed it to stop, but that wouldn't solve his problem; he needed something more, something stronger to drive the heat away. Another tap on his prostate, another burst of flames, and then the assault thankfully eased. The invading fingers were slowly extracted and Ryan felt light kisses peppered across his face. \n\nBlinking his eyes open, Erik's blurry face hovered millimeters from his own. He half-heartedly returned Erik's kiss, his body reacting more than his brain was able to give direction. \n\n\"Shhh, easy,\" Erik whispered against Ryan's lips before capturing them again with his own. \n\nSomething thick and blunt bumped up against Ryan's burning hole, sending his pulse racing even faster than it had been before. \n\n\"Easy, relax,\" Erik's whispers echoed against Ryan's ear as the pressure built against Ryan's hole. \n\nRyan's hands found their way across Erik's back and they held on tight as Erik leaned in, his hip unrelenting until the giant head of his cock popped in past Ryan's sphincter. A strangled cry was torn from Ryan's throat and his fingers dug into Erik's muscular back. \n\n\"Breathe, baby, breathe\" came the whispers against his ear and there was nothing else Ryan could do but follow their instruction. \n\nInch by inch, Erik's cock slid deeper and deeper into Ryan's body. With every inch the fires burned hotter and Ryan's ability to think dissipated like the wisps of Erik's smoke. \n\nFull, so full. Ryan felt like all of his organs had been pushed out of position, and if he moved even one millimeter, he would explode. But he held on, tightening his grip across Erik's back, his legs wrapped tightly around Erik's waist. Hold on, was all he could do. \n\nSlowly, the fullness eased out, along the way raking a fire that burned. Then slowly back in, forcing all the air out of Ryan's lungs. Out and in, out and in, the fire burning hotter with each stroke over Ryan's prostate, and making the air too hot to breathe. \n\nErik undulated in Ryan's arms, the movement driving the thick cock deep into Ryan's gut, and at the same time rubbing Erik's hard abdominal muscles against Ryan's throbbing dick. Hold on, just hold on.\n\nThe tempo picked up, the bursts of flames came in quicker succession, each crackling with energy building up inside of Ryan's body. Faster and faster they came, and the crackling zinged like an electric current. Too much, it was too much. Hold on, just hold on. \n\nThen Ryan's grip started slipping, his fingers no longer able to maintain their grasp on Erik's anchoring body. He could feel it coming, the explosion that he could no longer hold at bay. He tried to say something, give some sort of warning, but his brain was unable to formulate the words to say. \n\nRight when he couldn't hold it back any longer, a firm grip settled around his cock and twisted across the sensitive head, igniting the explosion that ripped through Ryan's body. He heard some sort of screaming sound in the distance, white light flashed behind his eyelids, and his body shook uncontrollably. \n\nThen a burning rod was placed on top of his cock, sending a second wave of explosions over him as the scorching flesh rubbed against his own. \n\nRyan's brain was shattered into a million pieces, not able to process any coherent thought. His senses were sending in information: every inch of his skin was on fire, his ass burned, his cock felt tenderized, and every muscle ached. He gasped at the air, each breath slightly cooler than the previous, but it would be a while before he could pull himself back together. \n\nIn the distance, he heard some shuffling movement, and a heavily whispered, \"Goddamn.\" "
    ],
    "authorname": "hudsbart",
    "tags": [
        "porn",
        "gay male",
        "new york",
        "romance",
        "oral sex",
        "anal"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/between-the-push-and-pull-ch-02"
}
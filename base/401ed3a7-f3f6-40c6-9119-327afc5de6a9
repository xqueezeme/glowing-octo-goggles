{
    "title": "Hidden Desires Pt. 02",
    "pages": [
        "Author's note: One of the core themes of this story is the subject of being born intersex. If you are not interested in such a subject then please move on.\n\nDru_Druthers wishes to express a heartfelt thank you to all who read, voted, favorited and commented on Part 01 of this story. The overwhelming support has made writing this story worthwhile.\n\n(The story previously ended with: \" 'Let me love you,' Jade whispered as she tugged Terry towards the center of the bed. She gently eased Terry onto her back, her head propped by a couple of pillows. Then Jade straddled Terry's stomach.\")\n\nChapter 13\n\nThis was entirely new to Jade, but knowing how she liked her breasts treated, she utilized that knowledge to bring pleasure to Terry, as well as stir herself with the new excitement of feeling Terry's clitoris as she brushed it with her pussy with every movement she made. Each touch was maddening, her mind and emotions going through a rush of new thoughts that were so unfamiliar, and so stimulating. Though she tried to lighten the touches, they proved even more thrilling, more sexually provocative, sending ripples of sensations through her body.\n\nTerry's senses were sent into overdrive as Jade caressed every inch of her face, neck and chest with her lips and tongue. She suckled Terry's nipples and licked the undersides of Terry's breasts. She squeezed and fondled them lovingly causing Terry to moan, groan, and cry out in sheer bliss. The light brushes Terry also felt from Jade's pussy, Jade's wetness against her clit thrilled her continually, her clit being so very sensitive.\n\nSlowly, Jade worked her way down Terry's stomach and finally looked at Terry's sex. She had a small patch of brownish blond pubic hair that was neatly trimmed. She did indeed have a penis-like growth, right about where a clitoris should have been. It was very erect and about five maybe five and a half inches long. It wasn't too thick but very smooth. Unlike the rest of her body it wasn't pale but was pinkish red, she didn't have a foreskin and no head as Jade's ex had but did have a small opening which Jade knew was Terry's urethra. No testicles, but otherwise it did have the appearance of a penis Jade noted. \n\nJust below her enlarged clitoris, Terry had a vagina too but her lips were very tiny, seeming almost none existent to Jade. There was no sign of a clitoris otherwise as far as Jade could tell but she could see signs of Terry being wet, both from her urethral opening, and from her pussy's slit. The whole experience was so unknown and new to Jade, with her love of Terry, Jade was about to explode with her growing lust. \n\nJade had loved intercourse with Michael, and had given him oral too, but she'd never honestly liked it, only giving it to him occasionally because she knew he loved it. However, with Terry, it wasn't a penis, it was her clitoris, her ultimate font of sexual sensation, and it was calling to Jade fiercely, hotly. That pull, that knowing that here she could provide Terry with innumerable joys, was so sexually compelling that Jade's nostrils were flaring with the passionate desire to give Terry a sexual experience unlike any woman ever had. Her breathing was becoming ragged, she so wanted Terry's enlarged clitoris.\n\nTerry was watching Jade carefully, gauging her reaction.\n\n\"May I touch you?\" Jade asked quietly, controlling her boiling heat.\n\n\"If you want to,\" Terry whispered.\n\n\"Do you want me to touch you?\" Jade asked.\n\n\"Yessss!\" Terry hissed.\n\nShe watched as Jade wrapped her hand around her hardness and stroked her gently. The sensations were mind blowing and caused Terry to let out a low groan.\n\nShe had stroked herself before, but this felt so different. Jade's hands were soft and so warm, and more, she always knew where she would touch, but with Jade, each touch was unexpected providing a greater sexual thrill with each movement of Jade's fingers.\n\n\"Does this feel good baby?\" Jade asked. It wasn't the first erection she had handled but knew that everyone was different\u2014and Terry certainly was different \u2014she didn't want to hurt her by being overzealous.\n\n\"God yes!\" Terry quietly panted. She was so aroused that Jade's efforts were bringing her dangerously close to the edge of orgasm.\n\n\"Jade, if you don't stop I'm going to...\" Terry warned Jade. She slowed down not wanting Terry to blow just yet.\n\nIt was a bit odd for Jade. She had loved her husband and had held his hard cock in her hands many times but never had she felt the overwhelming joy she was feeling, touching Terry's member was constantly stifling her breathing, making her gasp repeatedly. \n\nJade had not only disliked giving oral sex to Michael, she didn't like the idea of him cumming in her mouth but with Terry, she had no such reservations. In fact the thought of Terry cumming in her mouth excited her beyond words.\n\nShe locked eyes with Terry and smiled and then she slowly lowered to lick the head of Terry's enlarged clit. Terry's eyes went wide as she watched the erotic display of this exotic beauty placing her open mouth on her member. \n\nJade's tongue glided along the smooth head and she tasted Terry's wetness. It was more than just intoxicating to her; it was wondrous, pulling powerfully at her desire for more of Terry's love. To her, there was an underlying hint of sweetness that inexplicably screamed at her to want to drink of it without end. Licking slowly, Jade found that she absolutely did love the taste that was so wondrous to her senses. \n\nHer tongue on the head of Terry's clit had all of Terry's nerve endings on fire. Wave after wave of pure sexual bliss shot through Terry causing her body to jerk from all of the conflicting sensations of pleasure she was receiving.\n\nAs they clashed marvelously in her, shooting arrows of sexual delights through her body, Terry reveled in them, and anxiously awaited the next and sweeter pleasures that she somehow knew were coming. Her moans and groans became louder and louder, her breathing coming in short, harsh pants.\n\nSo little had been done, yet Terry had felt so much. Is this how it was meant to be for her? Jade took things a little further and closed her mouth around Terry's member. She sucked softly on the warm, smooth skin that was throbbing mildly, an inviting staccato as fingers saying come hither. Occasionally running her tongue on the head, then moving her mouth softly up and down the shaft, she felt Terry's body stiffen.\n\nTerry had never expected anything to feel as wonderful as a mouth on her large clitoris that had previously given her so much shame and guilt. The shaft was every bit as sensitive as the head, shocking her with so many delightful sensations that threatened to have her orgasmic soon. Jade's gentle ministrations had Terry going out of her mind. She had had orgasms in the past at her own hands, but it never felt like this. \n\nHer whole body shook, and then her muscles tightened. She closed her eyes tightly and saw lights behind her eyelids. She felt lightheaded and something monstrous building inside, just below her stomach and lower back.\n\nJade looked at Terry's body. Terry's knuckles were white from how she was gripping the sheets. She was covered in a light sheen of sweat and her skin had a light flush to it. Her face held a look of the sweetest ecstasy. In that moment Jade thought she looked so beautiful.\n\nTerry let out a sudden feral scream; her hips bucked causing Jade to hold on tightly to Terry's cheeks. Terry's climax consumed her entire body as she ejaculated a torrent of fluid into Jade's mouth.\n\nJade swallowed as much as she could but it was just too much and some spilled out of her mouth and down her chin and chest. Jade was so hot, so aroused that the feeling of Terry's orgasm caused her own climax. She felt her own juices pouring out of her, but the taste of Terry's love consumed her, her mind swimming deliriously, all of her senses demanding more. \n\nIt became a series of orgasms between them as Jade kept on gently at times, overcome with lust at others, working tongue and lips on Terry's marvelous enlarged clitoris. Jade's orgasms were mild, insignificant, where Terry's were strong, taking her to heights of pleasure she had never imagined possible.\n\nJade's heart was bursting with her feelings of joy, she thrilled at sensing Terry's delight, her orgasmic self unleashed in a way that was never expected, they were so often, so continuous. At last, when Jade stopped, Terry was having trouble breathing, her eyes closed, her face looking strained, yet somehow angelically satisfied. Jade crawled up to her and lay down beside her. She kissed Terry's lips softly sensing that she needed to control her lusting. Terry's eyes fluttered open and she smiled at Jade, albeit, shakily. \n\n\"How are you feeling, love?\" Jade asked.\n\n\"Spectacular. I never thought\u2015what you did... My god!\" Terry answered breathlessly. Her mind was reeling from all that had just happened, was still happening. She couldn't believe she had been missing out on something so unexpectedly wonderful for so long.\n\n\"I'm glad you enjoyed it sweetheart,\" Jade told her softly and kissed her again. Terry was feeling energized and kissed Jade with a renewed passion, turning onto Jade then working her way down, tasting herself on Jade's lips and elsewhere before continuing on to her neck and breasts.\n\nShe moved quickly and purposefully planting kisses all along Jade's body. All of Terry's earlier apprehensions were gone as she caressed, kissed, and touched all of Jade. She finally settled herself between Jade's legs and kissed her right above her slit. She inhaled Jade's strong scent and slowly extended her tongue. She licked tentatively at first, but slowly became more enthusiastic and explorative, varying the pressure of her strokes. \n\nThe effects on Jade were phenomenal, but her mind couldn't forget how Terry's clit had felt, its sensitivity, and what it did to both of them.\n\nTerry reveled in the feelings, both the physical sensations of her tongue moving through the juicy folds of Jade's labia and the emotions that were bubbling over inside her.\n\nShe was with the one she loved, bringing her pleasure, touching, tasting her lover in the most intimate of ways. Jade truly loved and accepted her, Jade had given her the greatest sign of this and now it was her turn to show her love too.\n\nTerry's enthusiasm was driving Jade mad with pleasure. Her swift tongue was pushing Jade over the brink once again but more than that, Jade could feel Terry's love for her through every touch, caress and tease.\n\nTerry felt like she could stay right there, between Jade's open legs, her tongue pushing inside of Jade forever but she wanted Jade to feel what she had, that unbridled, uninhibited, rampant release. Terry locked her lips around Jade's little nub and suckled hard. The effects were immediate.\n\nJade screamed, instinctively jerking away from the sharpness of the feelings that so suddenly shot through her, but then grabbed Terry's head and pulled her tightly to her as Jade's hips rose up off the bed, her features strained.\n\nAll of the anticipation, all of the unexpected sensations from making love to Terry, all of the love she felt for Terry were about to explode in raptures that were engulfing Jade's feelings along with every nerve in her body.\n\nTo her surprise, Terry felt a hot spurt of liquid shoot out onto her chin and down to her breasts. It was followed by two more bursts before Jade let go of her and fell limply back on the bed.\n\nTerry looked up amazed; she didn't know women could have a climax like that with an ejaculation similar to her own.\n\nJade was panting hard, her eyelids half closed. It took a few seconds for her to come out of her orgasmic haze. When she did, she reached for Terry, who crawled up and tenderly kissed Jade's lips.\n\n\"Baby are you alright?\" Jade asked seeing the perplexed look on Terry's face.\n\n\"Yes. It was just; do all women climax like that?\"\n\n\"Like what?\" Jade asked concerned.\n\n\"Well, you kinda did it like me, in a sort of spurt. It\u2014they\u2014were short and quite powerful.\"\n\n\"Really, I've never done that before,\" Jade said thoughtfully, \"but then again, no one has ever made me feel like you do or did just now.\"\n\nWith a huge smile on her face, Jade pulled Terry to her and kissed her deeply. Terry kissed her back and snuggled close. They were both feeling the relaxing after effects of their orgasms and holding each other, they drifted off into a blissful nap.\n\nChapter 14\n\nThey napped for about an hour before Jade awoke and sighed contently as she watched the still sleeping Terry next to her. Terry looked so sweet, so peaceful and utterly beautiful.\n\nThey had drifted off, both uncovered and not caring. As the night progressed the room was slightly chilled and both women's nipples were responding to the drop in temperature.\n\nTerry's buds were small and cute and Jade couldn't resist the urge to reach over and lick the closest one. Jade sucked softly but then, savoring the feel of Terry's hard nipple in her mouth, she sucked harder until she heard Terry moan. She felt Terry's hand on the back of her head gently playing in her hair.\n\nJade moved to the other breast and sucked that nipple, running her tongue over it in circular motions. Terry's back arched and she cried out Jade's name in a harsh whisper.\n\nJade released the bud and kissed her way gently up to Terry's lips and after a sound kiss, snuggled close.\n\n\"How are you feeling my love?\" Jade asked.\n\n\"I can't believe how wonderful this is. Being here with you, lying naked with you after having some glorious, unbelievable sex; I never thought I'd experience this. I'm so happy I can't even describe it. I feel like I'm going to burst with joy.\"\n\n\"And excitement it seems,\" Jade giggled as she noticed Terry's enlarged clit becoming rigid again.\n\n\"I can't help it,\" Terry blushed. \"You're lying here all warm and naked and sexy and I just want to\u2015\"\n\n\"Get physical again?\" Jade asked with a smile. Terry bit her bottom lip in the cutest way and nodded.\n\n\"Well I have some ideas about some things we can try if you'd like?\" Jade offered.\n\n\"Okay.\"\n\nJade turned her body around so they were lying on their sides facing each other's sex for a sideways sixty-nine.\n\nThey each went slow, teasing each other with soft licks and gentle suckling. Jade had focused only on Terry's clit earlier and now tenderly licked and probed at Terry's slit.\n\nTerry was more confident and gently probed with her fingers, working one gently inside of Jade. She loved the warm, velvety feeling as her finger moved in and out of Jade.\n\nSoon their movements became erratic as the sensations each were generating were causing the other to lose focus.\n\nJade's orgasm took her first. Her hips bucked as she rode Terry's fingers\u2015now three\u2015as they rubbed her most sensitive spots. Her moans were muffled as she tongued Terry's slit.\n\nWith Terry, it took a little more time as Jade was being careful, her finger just barely entering Terry. Terry was a virgin\u2015in every sense of the word\u2015and Jade didn't want to accidently deflower her. Jade had special plans for that. Terry's vaginal slit was, naturally, not nearly as sensitive so it took patience on Jade's part.\n\nTaking Terry's clit into her mouth, Jade sucked softly and rolled her tongue over the tip, allowing for Jade to catch all of Terry's sweet spending. It also added some more sweet stimulation to the pleasures that Terry felt.\n\nWhen the orgasm did come it was beautiful in its sensuality, leaving Terry feeling relaxed and in heaven as she felt herself as if floating in all the bodily joys coursing through her.\n\nHaving both had another sweet taste of sexual bliss, Jade pulled back the covers and they held tightly to each other and with a last few whispers of love both fell into a deep but contented sleep. \n\n* * * *\n\nSaturday morning seemed to come all too quickly as Terry awoke. She felt Jade's soft breasts pressed against her back, Jade's arm was around her and her hand was holding one of Terry's breasts. It was all so new for Terry, to wake up naked in bed with another person. Her mind went back to all that had happened the previous evening.\n\nFrom the time they arrived until now, Jade had been so wonderfully attentive. She had been so caring and loving and most of all so understanding of Terry's feelings about her body.\n\nThe love that they made was passionate, extremely intense and so unbelievably mind blowing that just the memories made Terry's body tingle deliciously. \n\nShe felt Jade stir then she felt a soft kiss on the back of her neck.\n\n\"Good morning my love,\" Jade said then kissed Terry's shoulder. Terry turned around and looked into Jade's eyes. The love she saw there made her heart sing. She leaned in and kissed Jade's lips, pressing their bodies together. Jade felt Terry's stiff clitoris as it pressed against her.\n\n\"Good morning.\"\n\n\"So, I can feel that somebody's very lively this morning,\" Jade said as she rubbed herself mildly against Terry's clit. Terry shuddered and pulled back.\n\n\"It is feeling pretty good, but I need to pee; then it'll go down unless we start doing this again,\" Terry explained. \"I better go before I have an accident I haven't had since I was four years old,\" Terry joked. She looked towards the door and hesitated for a few moments before she left the safety of the covers and walked across the room naked.\n\nJade watched her and felt proud of Terry. She knew that it was hard for her to show herself, her body in the light of day after hiding it for so long.\n\nAs Terry went through the door, Jade bounded out of bed and followed. She needed to pee too and they both needed to shower anyway.\n\nTerry was standing in front of the toilet bowl when Jade entered. Terry froze.\n\nJade went past her to start the shower but noticed Terry, looking uneasy.\n\n\"What's wrong?\" She asked concerned.\n\n\"It's just that I've never peed in front of anyone before,\" Terry answered and blushed.\n\n\"Oh sweetie, I'm sorry, I didn't even think,\" Jade answered, \"I'll leave, okay?\"\n\n\"No, we are lovers so it's okay.\"\n\n\"Are you sure?\"\n\n\"Yes. It's just another part of us being closer. It's just a little strange for me, that's all.\" Terry said with a small smile.\n\nJade watched in fascination as Terry sat down on the toilet. Tucking her member so it pointed downward into the bowl and letting her stream flow. When she was done, she took some paper and wiped the end of her clit and then stood.\n\nJade stopped her from flushing and took her turn. This time it was Terry who was fascinated to see how Jade peed and wiped.\n\nAfter flushing, Jade went to the shower and pulled Terry into the warm spray.\n\nIt was another first for Terry. She had not shared a bath with anyone since she was a child with her mother giving her a bath. Of course this was entirely different. Underneath the spray of hot water, Jade's hands were delicate and sensuous, washing every inch of Terry's body.\n\nStarting with shampooing and conditioning Terry's hair\u2015which in itself was a heavenly experience\u2015Jade thrilled and titillated Terry with every touch. Working on Terry's back, scrubbing thoroughly with a bath sponge and moving down, she rubbed Terry's arms and legs, even working the sponge gently between Terry's butt cheeks.\n\nJade lingered on her breasts, using her hands to massage them and pulling deliciously on Terry's nipples. By the time Jade reached Terry's clit, it was hard and stood upright almost pointing straight up.\n\nFocused on Terry's genitals, Jade's hands played a sensual symphony of pleasurable sensations. Accompanied by a chorus of 'I love you', a climax swept through Terry's body, leaving her shaky and holding on to Jade for fear of falling. Afterward, Jade was sorry not to have positioned herself to drink of Terry's plentiful love offering, then ruefully cleaned Terry again.",
        "\"I won't miss another drop again, darn it,\" Jade said, then smiled up at Terry.\n\n\"I hope not,\" Terry answered breathlessly.\n\nAfter recovering, Jade handed Terry the sponge. It was Terry's turn to indulge her desires as she began washing Jade's body.\n\nUsing Jade's example as a guide, she washed Jade's hair and down Jade's back to her butt. She spent much time on Jade's breasts\u2015maybe too much time\u2015fondling and squeezing the plump flesh. She couldn't help but lean in and kiss her juicy nipples.\n\nEventually she moved on, actually going to her knees in front of Jade to properly wash her tummy, legs and feet. Terry couldn't resist lifting Jade's leg onto the side of the tub as she enthusiastically rubbed between Jade's folds, making sure every nook and crevice was clean. The end result was a sweet but powerful orgasm that Terry's mouth took advantage of.\n\n\"You are so beautiful, Jade, and you taste delicious too,\" Terry, serious at first, grinned at the last.\n\nFinally, as the water started to run cold, both women got out and dried off. They both donned thick fluffy bath robes and set off for the kitchen. \n\nThere wasn't much said as they helped each other make breakfast. There was a quiet, comfortable ease in which they moved around, as if it was an everyday thing. Somehow they just fit; each complimenting the other, and seemed to be what the other had been missing.\n\nChapter 15\n\nWith breakfast and the cleanup done, they lounged together on the sofa talking about the previous night.\n\n\"I have to admit, I was really scared about how things would go last night,\" Terry said as she held Jade's hand, intertwining their fingers.\n\n\"I know; I could sense it. I had some apprehensions too. I was trying my best to let you know that it was all okay. You know we could have stopped at any point don't you?\"\n\n\"Yes, and I almost did when you zipped down my dress, but then you were so gentle and reassuring, your touches were as if you were trying to comfort me, and yet so...so sexy, thrilling. Still, I almost bolted when I was completely naked. You'll never know how hard it was for me to turn around,\" Terry told Jade.\n\n\"I can guess it was almost impossible but I'm so happy you did. You are utterly beautiful, and I am proud of you too.\"\n\n\"Really?\" Terry asked as she straightened up to look Jade in the eyes.\n\n\"Yes you are. My heart leaped this morning when you stepped out of bed and walked naked to the bathroom. You truly are beautiful, my love.\"\n\n\"If I am, it's because of you. You make me feel beautiful, and like I can do anything,\" Terry breathed out as she leaned into Jade and kissed her deeply. When their kiss finally broke, Jade was breathless.\n\n\"Oh boy! That was just about too sweet,\" Jade told her.\n\n\"Just about?\" Terry queried her.\n\n\"Well, yes; at least for what I planned for us if you'd like.\" Terry looked quizzically at her, but nodded. \"Our time is so limited, and that kiss just about had me ready to rush us back into the bedroom,\" Jade said with a light, rueful smile.\n\n\"Maybe we should. It sounds good to me,\" Terry said, her breath halting again.\n\n\"God, Terry, you know I'm so in love with you, right? You have to know that.\"\n\nTerry nodded instantly. \"Just as I am with you,\" she said so softly that it was as a sweet whisper.\n\nTrying not to get caught up in making love again, though Jade would have loved to do just that, she took a deep breath and started again.\n\n\"Honey, there's a place not far from here, a short hike maybe, but it leads to a wonderful spot I know, and the day is so beautiful; it's secluded too. I kind of planned it for us ahead of time, and I wondered if you'd like to do that. If so, maybe you could put on something light. Would you like that?\" she asked, hopeful she hadn't been too brash in her planning.\n\nTerry didn't think she was brash in any way. The look of love in her eyes told Jade she'd love it, and her head was nodding slowly in affirmation. Jade kissed her, a soft kiss that she had no problem keeping from becoming too serious; the thought of a picnic with Terry was so appealing to her.\n\n\"Let's get dressed then, okay?\"\n\nThey went to the bedroom together and dressed. Jade put on a pair of shorts and a light top along with sneakers. Terry\u2015who didn't wear pants because of her bulge\u2015wore a summery dress and sneakers. Though it was almost impossible, Jade averted looking at Terry, fearful of seeing her large clit and being too drawn to it, it was such an aphrodisiac to her. She even made sure to hide her quickening breath.\n\nThey packed the picnic items Jade had prepared the day before they arrived along with a blanket and hand-in-hand Jade led them out the back deck and through a path that took them through the woods at the rear of the cottage.\n\nThere were some plants and shrubs, lots of large trees but otherwise the path was clear and easy to walk. They moved in silence, enjoying the sounds of nature. Before long, Terry's ears picked up the soft sounds of running water. Soon they met a small brook running along the side of the path. They continued for a little while before Jade led them to a small grove where the water ended\u2015or maybe began\u2015in a small pool.\n\nThe surrounding brush was short and seemed well kept and along with the trees, gave the area a sense of great privacy; the path ended right where they stopped, and there was no sign of there ever having been any other path. Off to one side were two large trees, growing closely together in a way that gave the impression of a semicircle. The ground was clean and shady, a perfect spot for the blanket.\n\n\"It's beautiful,\" Terry commented as she looked around.\n\n\"Yes and romantic I hope?\"\n\n\"Oh yes that too,\" Terry quietly gushed in rapt agreement.\n\n\"But most importantly, it's private. This spot is part of the property the cottage sits on,\" Jade told her.\n\nAfter spreading the blanket, they both sat and put out the picnic supplies. There were sandwiches, fruit, a light salad and a bottle of wine along with bottled water and a couple of slices of pie.\n\nThe pool had many shallow spots with small rocks separating the small bodies of water from the rest. Jade explained that the water came from a small underground spring; it was very cold and perfect to chill the wine and water. She pinned the bottles between some rocks and then joined Terry on the blanket.\n\nThey stretched out side-by-side, held hands and stared up at the trees and the view of the sky between the branches. It was different from their previous love and lust, a sense of peace for their love to grow in giving them a feeling of oneness just being in each other's company, and enjoying time together.\n\nAfter awhile, Terry broke the silence. \"Jade?\"\n\n\"Hmm?\" Jade answered.\n\n\"Can I\u2015we talk?\" Terry asked tentatively.\n\n\"Sure sweetie.\" Jade could hear the worry in Terry's voice and wondered what was on her mind.\n\n\"Jade, it's all been so beautiful, and this too, though very different and I love you so much. I know you love me too, very much so, because you've accepted me as I am. I need to know, I need you to tell me\u2015\" Terry stopped unable to find the words to ask what she wanted to know.\n\nJade rolled to her side and propped up on her left elbow. She cupped Terry's face with her other hand and smiled gently as she looked into Terry's eyes.\n\n\"I love you. You don't have to be afraid to tell me anything or ask me anything. Whatever it is, we can talk about it and work it out. In my past relationship, we didn't communicate enough. I don't ever want that to happen with us,\" Jade told her. \n\n\"Okay,\" Terry said in a whisper as a few tears escaped from her eyes. Jade always seemed to know just what to say to alleviate her fears. After a couple of deep breaths, Terry sat up and spoke.\n\n\"Love,\" she pronounced the word to let Jade know she wanted to talk about it seriously, \"I'd like to know where we stand; that is, where do you see us going in terms of our relationship?\" she asked to show her sense of still feeling uncertain.\n\n\"I love you, Terry, and I want to spend the rest of my life with you,\" Jade answered immediately, her words soft and love filled.\n\n\"But have you thought this out? Have you considered what it will mean for your life? This\u2015me\u2015I'm your first female lover. You've only now discovered that you're a lesbian. You're going to have to decide how to live. Can you handle being out in the open or will you feel a need to hide us. Either choice will have repercussions,\" Terry said seriously.\n\nShe wasn't as out as others but she wasn't in the closet either. Her employees, while they didn't know about her being an intersex individual, they did know that she liked women.\n\nShe had experienced for herself how troubling life was for an 'out' lesbian. There were still many who hated a person just because of whom or how they loved.\n\nJade needed to understand these things, Terry felt, before she made any firm decisions, though the sex she had with Jade wasn't something she wanted to throw away. Yet there was the love she knew she had for Jade, and the absolute and certain strength of it in her, but... It pained Terry to think that she could lose Jade if she, or either of them, wasn't prepared for life as a lesbian couple, either in or out of the closet.\n\nJade sat up and quietly thought about all that Terry had said. She was deeply in love with Terry and wanted desperately to make a life with her. In all her planning she didn't think too deeply about what it would mean to be in a lesbian relationship, to be labeled a lesbian.\n\nShe had read reports in the papers and seen on the news about gay bashing and women being hurt, humiliated and degraded about their lifestyle. She had heard of the preaching's of various religious types condemning homosexuality, and promising a place in hell for those who practiced this lifestyle.\n\nJade had been aware of the many battles for equality and rights fought by the homosexual community, some winning some losing but truly never paid much attention since it didn't affect her.\n\nHowever, as Terry pointed out, these issues now affected her directly. She couldn't pretend to be uninterested any more.\n\nHide? Would that be an acceptable solution? No!\n\nHiding her relationship meant that she would have to hide Terry as well. She could never pretend that she didn't have someone as sweet, kind, loving and sexy in her life. It wouldn't be fair to Terry, much less to the love she had for her, the love they had for each other.\n\nOpen or in the closet? There wasn't a choice there really. Jade had never been one to hide anything. She faced her problems head on, efficiently and with steel in her heart. This would be hard, harder than anything else in her life because this was her life now. She would have to deal with the small mindedness of the people around her. Surely her co-workers, many who already didn't appreciate her for being number one, would have much to say. Her friends? Well, she'd soon enough learn how many were her 'true' friends. Family? That was a big one.\n\nHer parents were an unconventional match to begin with. Her grandparents on her father's side were very strong in their Catholic faith. They had reluctantly accepted her mother, but accepting an Asian woman into an Irish family was a far cry from accepting a lesbian granddaughter. They were already unhappy about her divorce; this might be adding fuel to the fire.\n\nHer mother might be okay with it after she had some time to think and digest it, and if her mom accepted it, then her dad would follow. He would never admit it but mom had him wrapped around her little finger.\n\nThe one person Jade was sure would accept her new life was her younger brother. He adored her and would just be happy that Jade was happy.\n\nAll these thoughts swirled around Jade's mind but the bottom line was that she would never deny Terry as her lover, her partner and if Terry accepted, as her wife, as well as her being Terry's wife.\n\nTerry could see the play of emotions on Jade's face as she sat deep in thought over what Terry had mentioned. She was nervous; actually she was scared out of her wits. She had no idea what Jade would decide.\n\nIt was possible that all of this might be too much for Jade. The pressures of this lifestyle, hiding or worse not hiding and having to deal with all the ridicule that could follow, could cause excruciating pain.\n\nThe trauma of having to reveal this secret to one's family and friends or keeping such a huge secret bottled inside could tear them apart, love or no love. What if Jade felt it would be simpler, easier to just stop and return to an uncomplicated heterosexual life?\n\nWas Jade's love strong enough for her to want to stay with Terry? Was Terry strong enough to survive if it wasn't? Could she handle losing Jade, Jade's love and acceptance of her?\n\nJade saw the fear and panic slowly rising in Terry. She quickly pulled Terry to her in a tight hug.\n\n\"No! Baby no. You will not lose me. I will not give you up. I don't care how hard it might be, how much prejudice I'll have to fight. As long as you are with me, I'll be strong enough to fight it. If anyone\u2015and I do mean anyone\u2015has a problem with me loving you, then they can just fuck off.\n\n\"I feel it inside of me Terry, you are my everything. I was happier than I had ever been when we were just dating and spending time together and now that I know how incredible it is to make love with you, I'm complete. I'm whole Terry. You make me that way, and I'll never deny you, or our love.\"\n\nTears spilled out of both women's eyes as they held tightly to each other. Kissing each other they both felt the intense and undeniable oneness of their love. \n\nSomehow they were both fully on the blanket, Terry on Jade's breast, her sighs of joy easily heard, her contentment sensed by Jade just as Jade knew her own contentment.\n\nAfter feeling peace in their love, Jade thought they needed to eat.\n\n\"Ready to eat a bite?\" she asked Terry. \"We may need some energy soon,\" she said with a grin.\n\n\"Yes, we just may,\" Terry answered with a smile.\n\nJade retrieved the wine, and they ate, affectionately feeding each other and at times, lovingly cuddling together. By mid afternoon, they headed back to the cottage, feeling even closer than before\u2015if that were possible.\n\nStill enjoying their commitment, they quietly cuddled on the sofa again. However, in due time, Jade's love of Terry, and the terrible pull of her sexy clitoris, she had to make love, had to enjoy Terry's marvelous love that was calling to her.\n\n\"Baby, I have to make love to you,\" Jade said with a heat that surprised Terry.\n\nThough surprised by Jade's sudden need, she instantly felt her own. Their loving time outside had rekindled their sexual need of each other, and it screamed at Terry to love Jade also.\n\n\"Let me have you too. Please,\" she implored with a matching heat.\n\nTheir lust so aroused, Jade quickly stepped out of her shorts and panties at the same time, and tore her top and bra off even quicker as Terry simply lifted her hem leaving her panties to Jade to pull off.\n\nSeeing Terry's clit outlined, Jade tried to be delicate in taking Terry's panties off, and yet rush to get at her prize.\n\n\"Hurry,\" Terry urged her.\n\nJade needed no urging, and quickly placed her body over Terry's in a hurried sixty-nine. She had her mouth over Terry's clit, taking it all in and then working it into her throat. Jade had done that to Michael once, but only quickly, and pulled back. It did take a bit of working, but it was doable, and with Terry, she loved doing that for both of them. She wanted all she could get of Terry's lovely clitoris that had been threatening to drive her insane with her wanting.\n\nFeeling Terry already gorging at her pussy, she felt Terry's orgasm begin, and vowed not to let it out of her throat, she wanted to feel it all go directing into her. Her wish was fulfilled beautifully as she heard Terry's moans of pleasure and her own orgasm beginning.\n\nTerry loved how Jade was loving her, how she gave her endless orgasms, taking some into her mouth after initially taking it all. She sensed Jade loved her taste as she loved Jade's taste.\n\nTerry, though becoming distracted with her own climaxes at times, worked to give Jade the same treatment, planting her lips firmly on Jade's clit, sucking hard at the pearl and gliding her tongue over it.\n\nShe felt Jade's body stiffen but Jade's mouth did not release her clit and continued to suck hard even as Jade's orgasm crashed through her. They held on to each other, both refusing to let go but determined to wear the other out.\n\nFinally after several hard orgasms, Terry cried out, \"Please, no more. I need to rest. I need to rest,\" she repeated.\n\nJade pulled away reluctantly, her mouth still yearning for more of Terry's love even if her body was screaming for some rest too.\n\n\"I'm sorry, baby,\" Jade said.\n\n\"I'm not. God, that was hot. Fast, but hot as can be,\" Terry uttered in staccato fashion, still working to catch her breath.\n\nAfter recovering, they went to clean up, then from Jade's supplies, together they made a vegetable casserole and had dinner on the deck, unable to take their eyes off of each other, their hearts still pounding. Leaving the dishes till later, they sat and tried to talk to each other, content, yet feeling their lust still needing to be fulfilled. When they finally did go to bed, they cuddled together. Their light touches and soft caresses quickly gave rise to their mutual lust for each other and before long, they were both naked.\n\nTerry took the lead this time, which pleased Jade immensely. Slowly and sensually, Terry kissed and licked a trail from Jade's mouth all the way to her toes. She left Jade's nipples and lower lips alone but worshiped every other part of Jade's body.\n\nWhilst lying on her stomach, she felt Terry's tongue working a wet and slippery trail along the length of her spine, from the back of her neck all the way to the start of her butt.\n\nThe sensations were almost more than she could take as the mix of Terry's hot tongue; her saliva on Jade's skin and the cool air all sending Jade to heights of arousal she never dreamed possible.\n\nJade could feel her wetness dripping out of her and her clit throbbing. Her nipples ached with the pressure of them being pressed into the cool sheets.\n\nShe felt Terry's hands on her butt cheeks, kneading and pulling the taut flesh apart. Feeling Terry blow softly on her rose bud and then shockingly, she felt Terry's tongue tickling her anus.\n\nA loud moan escaped Jade's lips as the sensations overwhelmed her. Terry began licking a trail up and down between Jade's cheeks, stopping occasionally at her bud.\n\nTerry urged Jade to spread her legs apart and after she did, Jade felt Terry's fingers teasing her lips and then entering her. The much needed stimulation after so much torture was just too much and as her long awaited orgasm washed through her, Jade's mind just slipped away and she gave in totally to the pleasurable sensations.\n\nAfter what seemed like hours, she felt Terry urging her to turn over, a hand on her hip and another on her shoulder tugging gently.\n\nShe rolled and saw Terry looking down at her concerned.\n\n\"Are you alright love?\" a worried Terry asked.\n\nJade was in a dreamy daze and smiled broadly; she pulled Terry to her and kissed her long and deep. Terry pressed her body to Jade's and they snuggled comfortably.\n\nWhen Jade fully regained her senses some time later, she felt Terry's stiff clit pressed against her. She reached down took it in her hand, stroking it gently. Terry moaned and turned onto her back. Her eyes spoke volumes of her need for release.\n\nTerry's clit was as hard as any erection Jade's ex had ever had. When she released it from her hand it wobbled slightly but stood on its own jutting out from Terry's pelvis.\n\nSince their first conversation about Terry's body, Jade had wondered if it were really possible for Terry to penetrate her. She leaned in and whispered her request.",
        "\"Baby, I'd like to try something if you're up for it?\"\n\n\"What?\" Terry whispered back.\n\n\"I want us to try and see if you can put your clit inside of me.\"\n\nTerry's eyes widened at the suggestion. She knew it was possible for her to do such a thing but never thought she would ever have the chance to try it.\n\n\"I've never done anything like that before. What if\u2015\"\n\n\"We'll go slowly and if it's uncomfortable we'll stop okay,\" Jade assured her. Any reservations disappeared as Terry looked into Jade's eyes. She knew she was safe with Jade.\n\nRealizing Jade's experience with penetration, Terry had no problem with her taking the lead. After giving it some thought, Jade had Terry lie flat on her back, her head propped on a pillow.\n\nShortly, Jade straddled Terry. With her pussy against Terry's enlarged clit that was fully engorged and hot, her own pussy now splayed wide with her excitement, Jade teased them both a little while she slid up and down slowly until they were gasping with their wanting.\n\nJade was so excited to try this with Terry. The thought of being able to bring their bodies together in such a manner had Jade dripping and her vaginal muscling pulsating in its want to be filled by Terry.\n\nTerry was more than horny. Jade's pussy covered her clit, surrounded it, and set off sensations that were excruciatingly sweet. She watched as Jade's pussy slid up and down her clit laving it with her juices. Seeing it happening as it was, Terry was gasping, she was so turned on; Jade's pussy sliding down seemingly revealing what she'd hidden from Terry. It was all too erotic for both of them. Peak-a-boo clit, Terry thought as her breath tried to fail her.\n\nHaving teased them both enough, she had Terry hold her clit up then started to ease her pussy down on it. Slowly, carefully, Jade pressed her pussy down onto Terry's clit, moaning with pleasure as she did.\n\nAt the first touch, Terry moaned too, her body coming alive as she felt Jade's hot moist tunnel encase her. If Jade's mouth was heavenly then this was beyond that. It felt like more than a joy, more than heavenly. Jade's wet juices coating her clit so slickly, sensuously; the new feelings were excruciatingly sexy. She felt Jade's pussy clenching her clit and knew it wasn't happening on purpose; no, it was Jade loving Terry in her pussy. How beautiful to see Jade taking so much pleasure from her.\n\nJade was very tight but not constricting or uncomfortable. As more of Terry's long and lovely clit fed into Jade's body, her mind was rattled with the blissful sensations. So overpowering were her feelings that her body threatened to explode.\n\nJade was using all her will power to focus. The marvelous sensations that she was feeling, her body, and her instincts were to push hard to maximize her own pleasure. Much as she wanted that she couldn't no matter how irresistible the feelings were, she had to go slow. The fact that this was so new, so unheard of made all of the sensations even more erotic, fantasy pictures flying through her mind. It was just about too hedonistic for Jade's mind.\n\nAfter a painstakingly long time, Jade's body finally met Terry's; her clit was buried to the hilt inside Jade. Though Jade had thoughts of going slow for Terry, as well as for herself, Terry couldn't hold back, her ultra sensitive clit was too excited, and repeatedly so. She moaned as she ejaculated time and again, her juices slipping out only exciting both of them even more, their genitals were so slick now.\n\nTerry's shaft fit perfectly inside of Jade, and was constantly pressing on that special sweet spot inside of her.\n\nThey looked at each other's faces. Terry could see that Jade was straining to hold back her wanton lust. Jade could tell that Terry was still crying out for even more relief from this marvelous sexual torture, her face emblazoned in Jade's mind, the ecstasies on Terry's face unforgettable.\n\nJade gently rocked her hips back and forth, enjoying their bodies being so sweetly connected. Terry groaned, her hands gripped Jade's hot thighs and squeezed as her body was assaulted with ever thickening, heavy sensations that were rolling, roiling wildly in her body consuming her entire being. Terry was in the grip of what all Jade was doing to her, the wondrousness of what she was being given.\n\nJade slowly increased her rocking; Terry's clit was playing havoc with her sweet spot bringing untold orgasms, but not the one that needed to come out. Not yet. Terry's breathing increased until it was coming in pants and hitches. Jade knew that Terry couldn't keep up with the myriad sensations, but that was fine with her because Jade felt that one orgasm of monumental proportions coming on fast.\n\nJade threw back her head and moved her hips faster, testing the limits of what Terry could take. She heard Terry utter an animalistic growl as Jade's orgasm washed over her. Her vaginal muscles contracted around Terry's clit and Jade felt the unrelenting urge to just let go, which she did.\n\nTerry felt the pressure building within her both physically and emotionally. Jade's body tensed, her muscles squeezed Terry's clit with such force that it threatened to be painful. It was all Terry could take; she felt the massive hot release of fluid again as she heard an ear splitting scream erupt from Jade. Both her mind and her body let go and then she felt Jade collapse against her.\n\nBoth women were completely spent. Jade leaning forward on Terry as both remained limp, trying to catch their breaths. Terry's now softening clit was still inside of Jade and Terry could feel a large amount of now cooling liquid from both herself and Jade's spending. She was glad that Jade had a protective vinyl cover on the mattress. The sheets would be easy to change.\n\nIt took a few moments but at last, Jade found enough strength to break the connection to Terry's body. She took a few moments to breathe deeply before she forced herself up to check on Terry.\n\n\"Baby? Are you alright?\"\n\n\"I think I might have died and gone to heaven and beyond. My god Jade. That was, was...\"\n\n\"I know baby, I know. Words are not enough. Except for maybe, I love you,\" Jade told her with a tired smile.\n\nTerry's smile was equally as tired, \"I love you too.\"\n\nChapter 16\n\nAfter resting their spent bodies, they took a long, languid soak in the bathtub, not getting out until the water was cold. The bed was a mess so they changed the sheets and snuggled together.\n\nAs the morning dawned, both women were elated to wake up next to each other once again. Jade would truly miss the feel of Terry's body next to hers. Terry was having the same feelings and she thought she had the perfect solution, if Jade would agree to it.\n\nAfter utilizing the bathroom for their morning necessities, they cooked together again, making French toast. Both loved the way they just fit as a couple.\n\n\"Love,\" Terry began as they sat at the breakfast table, \"how's the house hunt going?\"\n\n\"Not well I'm afraid. Everything I've seen so far doesn't suit me at all,\" Jade answered sullenly.\n\nTerry nodded in understanding as she wondered if it was the right time to say something.\n\n\"I really need to find something soon; I can't keep imposing on Paula like I have. She's a great friend and she won't ever say anything, but she needs her privacy too,\" Jade said with a smile, remembering what had happened all those weeks ago.\n\n\"You liked my house didn't you?\" Terry asked softly, having sensed her opening.\n\n\"Yes, it's quite beautiful,\" Jade answered as she thought back to the homey feel Terry's house gave off.\n\n\"Would you like to stay?\" Terry's voice was just a whisper now but Jade's ears picked up the words; was Terry asking what Jade thought she was?\n\n\"Baby, are you...?\" Jade's voice trailed off leaving the question open.\n\nTerry stood from her chair and then kneeled in front of Jade. She took both of Jade's hands in her own, her voice soft but sure, \"These past two mornings, waking up in the same bed with you, your beautiful face being the first thing I see... I love you so much, and it's not only our lovemaking\u2015though that is mind-blowing\u2015but the little things too.\n\n\"I know this weekend has only been our first time together in such an intimate way and I'm sure it might be rushing things a bit, but I don't want to go home tomorrow without you being with me. Say you'll move in with me so I can wake up to your face again and again,\" she pleaded with soulful eyes that threatened to bring forth tears of joy.\n\nMomentarily stunned, Jade looked into Terry's lovely eyes, and knew she also wanted to wake to them every morning and for the rest of her life if possible too. She nodded without thought.\n\n\"Yes,\" she finally said, her head still nodding slightly, \"I'd love to,\" Jade whispered as she reached for Terry, hugging her tightly as tears of joy rolled down Jade's cheeks.\n\n* * * *\n\nThey spent most of the day making plans about how fast the move could happen. Jade didn't have anything except her clothes and a few possessions that were currently in storage.\n\nTerry was happy to move things around to accommodate whatever Jade wished to bring. Overall, it seemed that she could be moved in properly over the following weekend.\n\nBoth were happy in the knowledge that they were building a future together and were relieved that this newfound closeness would not end when the weekend did, but there were still many questions that were unanswered.\n\nAfter dinner, they stripped and sat out in the Jacuzzi, enjoying the relaxing sensations of the swirling waters. Jade noticed that there was no hesitation on Terry's part in undressing before her now. The combinations of the dinner wine, the massaging jets and the quiet night, had both women feeling really good. In this relaxed state Terry felt confident enough to open up about some of her concerns.\n\n\"Love, you've made me so happy this weekend. You've given me more than I ever dreamt possible. Your love and acceptance of me, my body, and the way you've worked to alleviate my fears of rejection\u2015it's all been so wonderful. I have to tell you, well that is\u2015\"\n\n\"It's okay baby, you can tell me anything,\" Jade interrupted Terry as she seemed to pause. She moved closer to Terry and encased her in a reassuring hug, then holding her hand, Jade waited patiently for Terry to continue.\n\n\"I have concerns about meeting your family, about my secret. You are the only person other than my doctor to know the full extent of my body. On the outside I look like an average woman, but I'm different.\"\n\nJade wanted to interject, to assure Terry that she was all woman, but she held back sensing that Terry needed to have her say without interruption.\n\n\"I know that you and Paula are really close and your parents, your brother too, but I don't think I could handle anyone else knowing about my, uh, about me. I couldn't bear it if they looked at me funny. I know you'll probably say that they are not like that and that they'll accept me but it's going to be hard enough for them to accept that you're a lesbian with a live-in girlfriend without the added hang-up of that girlfriend being as I am.\n\n\"Jade, I'm not like you, I've had my share of hardships but I'm not as strong as you might think. When I was younger, I had my mom to help me through it; after she died, it's like my strength died with her. I was hurt more and more until I stopped seeing people beyond a couple of dates because I didn't want to be hurt anymore. You've broken though my barriers and now I'm open and exposed. I've allowed you in, and I've come to depend on your strength but I'm still fragile. I can't be hurt, and if you tell anyone else\u2015\" she stopped, tears slowly, but steadily falling down her cheeks.\n\n\"Shhh,\" Jade hushed the now shaking Terry. Jade softly rubbed her back as Terry sobbed into Jade's shoulder.\n\nThis was a major fear for Terry. Jade loved her and understood, but others would not Terry was sure of that from her previous experiences.\n\nJade realized just how much the roles of this relationship were different from her previous one. It used to be that she was the soft one and Michael having the emotional strength. Now, Terry was the soft, feminine one and Jade was the one who had to be strong. She now truly understood what Paula had meant about femme and butch in their discussions of lesbian dynamics.\n\nThough Jade would never be a butch like Paula was, she realized that she was the more dominant in the relationship and it would be up to her to take care of Terry, the way she had thought Michael had taken care of her. There was no big change to be made, Jade had always been stronger, both mentally and emotionally than most women so she was more than happy to be as a butch to Terry's femme. Besides, it would only be between them and no one else.\n\n\"It's alright baby,\" Jade soothed, \"This is our secret, something that's personal between us. The same way that sex is something sacred that's just for us, so too is what our bodies look like under our clothes. It's no one's business but our own. I promise you my love; I will never discuss this with anyone else, not Paula, my parents, my brother, not even my therapist,\" Jade assured her as she kissed Terry's head and rocked her slowly.\n\nThey remained cuddled together in the hot bubbling water until Terry felt better. She was happy to be able to get her feelings out and felt relieved that Jade understood her fears.\n\nLater after returning to the bedroom, Jade made slow, sensual love to Terry, showing that Jade could temper her raging lust for Terry when needed. Terry's orgasms were gentle and left her feeling spent but idyllic. She wanted to reciprocate but Jade would not allow it. This moment was all about showing Terry the extent of her love and wanting Terry to know how much Jade truly loved her.\n\n* * * *\n\nJade awoke to a delicious tingling in her pussy and when she came fully awake she realized that it was from Terry's tongue gently licking her lower lips. Jade purred as the tingling increased. She felt two fingers enter her as Terry tongued her clit. Jade arched her back as Terry's fingers plunged hard and fast, glad that Terry's body was perfectly positioned, her mouth sucking eagerly on Jade's compelling and sensitive clit. The orgasm crashed over her causing her to bellow out Terry's name.\n\nThough hating to leave Jade's luscious and hot, still throbbing pussy, Terry crawled up over her body and straddled her hips, Terry leaned down and sucked first one of Jade's nipples then the other. Jade pulled her lover to her and kissed her hard, tasting the remnants of her orgasm on Terry's lips. Jade felt Terry's hard clit lying at her tummy.\n\n\"Baby, put it in me,\" Jade begged in a husky whisper. Terry smiled shyly as she moved between Jade's legs. Jade spread her legs wide, opening herself to Terry. She parted her lips for Terry and watched Terry's face to see the play of her emotions. There was still some apprehension about this new aspect of their love making but the excitement was much greater, it's still newness a most stimulating sexual experience to be desired.\n\nTerry moaned as the tip of her clit touched Jade's opening. The sensations were almost too much and she almost came just from that slight touch. She managed to hold on as she pushed slowly into Jade, but no sooner than she was all the way in, the warm, slippery feeling of Jade's velvety tunnel was too much for her over sensitive clit and she came, spraying her sweet juices into Jade.\n\nHaving Terry orgasm inside her was so erotic but Jade wished she had done so in her mouth again so she could drink all that wonderful fluid. No matter, she loved feeling Terry's clit inside of her, loved giving Terry pleasure and so Jade lifted and rolled her hips, giving Terry even more stimulation, not to mention giving herself more too.\n\nTerry came several times, each orgasm rolling into the next until it felt like one long, uncontrollable orgasm that overwhelmed her senses and nerve endings. Terry fell unconscious onto the bed beside Jade and was out for almost a minute. Jade was worried she might have pushed Terry beyond her limits but then Terry was conscious again and smiled dreamily at Jade.\n\n\"God, that was so beautiful,\" Terry gushed happily.\n\nThey lounged in bed until ten o'clock before they rose and showered. While there, Jade had to have Terry in her mouth again, and went to her knees. It afforded Terry another hedonistic\u2015really, a voyeuristic\u2015view of them having sex that was pulse-pounding in Terry's ears. She'd never imagined seeing anyone taking her fully enlarged clit into their mouth. As she watched Jade taking her in and out, then all the way into her throat had Terry gasping and wanting, needing, to scream, it was all so exotically raw to her.\n\n\"God, baby, I love having your clit in my mouth,\" Jade gasped, almost as excited at their sex as Terry was.\n\n\"Jade, it's so hot seeing you taking my clitoris like that. God, just talking about it is keeping me horny. Horny! Yes, so horny. Thank you, my love, thank you,\" she said as she slid to her knees and kissed Jade hotly.\n\nIt was, they knew, the denouement of their weekend that was to seal them together.\n\nWhile Terry made something to eat, Jade packed; it was time to return to the other world.\n\nJade drove them back slowly, savoring the last moments of a spectacular weekend. Jade dropped Terry off at her house and headed to Paula's. She was going to tell Paula about her decision and pack a few things for the rest of the week, the rest she would move on the weekend.\n\nChapter 17\n\nPaula could read that something was up the minute she walked in and laid her eyes on Jade.\n\n\"My god, you look sexed out,\" Paula teased as she hugged her friend.\n\n\"If I do it's cause I am,\" Jade answered with a huge smile.\n\n\"Oh-ho-ho, that good huh?\"\n\n\"I'm not telling,\" Jade said firmly but smirked in a pleasant way, answering Paula's question. They laughed and chatted idly until Jade got down to the matter at hand.\n\n\"Paula, I'm so in love with her and she loves me too, just as deeply. We connected, it was something beyond just the sex\u2015though that was spectacular\u2015but there's this; I don't know what to call it. We are just so in sync with each other. She compliments me in every way that I can imagine.\n\n\"She asked me to move in and I accepted. Now I know you might think it's too soon for that but it just feels right.\" Jade looked at Paula to see her reaction. She was mildly surprised to see a huge smile on Paula's face.\n\n\"Well my dearest Jade, it seems you've found your soul mate,\" Paula said with a happy smile.\n\nThe words echoed through her and she realized Paula was right. Terry was her other half, Terry completed her; she was Jade's soul mate.\n\n\"So you're okay with the move?\" Jade asked though she didn't need Paula's permission or approval but wanted her friend to be happy for her.\n\n\"Hell yes! I can see how happy she makes you, and that was even before you screwed each other's brains out,\" Paula laughed and hugged Jade. Jade breathed a sigh of relief.\n\n\"Oh before I forget, I have something for you,\" Paula said as she sprinted to her bedroom. She came back holding a red drawstring bag.\n\n\"I wanted to give this to you before you went, but I figured that for your first time, fingers and tongues would be appropriate,\" Paula winked causing Jade to blush.\n\nFrom the bag, Paula pulled out a black leather harness with various different sized dildos.\n\n\"Since you two are going to be living together, you'll need to spice things up every now and then,\" Paula mused. She went on to explain the finer points of harness use; giving Jade advice on technique and how different positions required minute adjustments.\n\n\"I never guessed it was all so technical. Michael made it look so easy,\" Jade said as she tried to absorb all that Paula was telling her.\n\n\"Well you have to remember that men can actually feel what's going on and they learn from that sense of touch. We have to think it through first and then work it out without the benefit of physical signals that we feel. I'm just giving you some pointers so you and Terry won't fumble too much, though I don't think Terry will be using this on you.\"",
        "\"What makes you say that?\" Jade suddenly feared that Paula knew about Terry, or had guessed.\n\n\"Well I have known her a while. That woman is pure femme. She's not the dildo wielding kind.\"\n\n\"Yeah you're probably right,\" Jade said, thinking that Paula had no idea how right she was, or wrong she was depending on the context.\n\nPaula also explained about the difference of dildo sizes, saying that one should never try to go from a normal size to a giant one in one step. Patience was the key, working with gradually increasing size if one wanted to go bigger.\n\n\"Oh, and if either of you decide to be really kinky, and think of anal, never ever go from ass to pussy with the same one, or without thoroughly washing it. Better to go from pussy to ass, okay?\" she said, winking and smiling. \"Hey, just in case, huh?\"\n\nPaula also showed Jade a very slim, long vibrator that Paula said was for anal use. Jade didn't object to it, remembering the heavenly sensations Terry inspired when she tongued Jade's rosebud.\n\nPaula maintained that you could never have enough lube and to never rush entry. The slower the better until your partner asked for more.\n\n\"Thank you, Paula. I mean it. You're the best friend ever.\"\n\n\"You're welcome, babe. Have a happy life with her. You're both lucky, you know.\"\n\nJade went back to her bedroom and tucked her new equipment away safely. She would definitely use this but not right away. She had a great idea for using it but not just yet.\n\nTaking her packed bags, she thanked Paula for letting her impose for so long, assured her that she'd move the rest of her things out on the weekend and rushed off to her new home.\n\n* * * *\n\nWhile Jade was at Paula's packing, Terry was making space for Jade's arrival. She had dreamt of this for so long, being in love and sharing her life, a home with a lover and partner. She was so excited about coming home to someone and not just an empty house; all joys and laughter they would share. Terry was even looking forward to the disagreements they would have; her friends always said that makeup sex was the best.\n\nTerry giggled at that thought as she finished clearing out the right side of the closet\u2014their closet. By the time she moved to the bathroom to make space for Jade's things, she was giddy with excitement.\n\nWhen the door bell rang, Terry made a mental note to give Jade her spare key. She rushed to the door and opened it.\n\n\"Welcome home,\" Terry said with a sweet smile as she held the door for Jade to enter. Jade walked in, dropped her bags and wrapped Terry up in a tight hug, planting a sensual kiss on Terry's lips.\n\n\"Thank you baby. I'm so happy to be with you,\" Jade told her after their lips parted.\n\nTerry showed her to their bedroom and helped her unpack. They decided to have dinner delivered from the nearest Chinese place which Terry said was very good.\n\nWhile Terry made the call, Jade hid Paula's present at the back of the closet. She didn't want Terry seeing it until they had a chance to talk.\n\nPutting out her tooth brush in the adjoining bathroom, Jade marveled at the huge bathtub. Unable to resist, she played with the water controls until she had the tub filling with warm water.\n\nShe spotted Terry's scented bubble bath and poured in a huge helping of the liquid. The scent of roses wafted throughout the house and drew Terry to the bathroom.\n\n\"Jade?\" Terry questioned as she entered the room. Her waist was encircled by a firm hand as Jade pressed her already naked body against Terry's back. Jade shifted Terry's hair and kissed her on the back of her neck. One hand worked upward, gently cupping one of Terry's breasts while the other worked down to stroke Terry's sweet clit.\n\nTerry's hand joined Jade's at her breast while the other reached back to Jade's butt, caressing the supple flesh. She could feel Jade's hard nipples pressing into her through the thin material of her blouse.\n\n\"Come on baby, let's get you out of these and into the tub,\" Jade said in a sultry voice. Terry's answer was to moan and nod.\n\nBoth sets of hands moved quickly and soon they were both sitting in the tub. Jade sat with her back against the tub with Terry sitting between Jade's opened legs, leaning her back against Jade's front, her head on Jade's shoulder.\n\nJade was gently running her hands over Terry's breasts occasionally gently rolling Terry's nipples. This was doing delicious things to Terry's already engorged clit.\n\nJade licked and nibbled Terry's ear as her right hand moved under the water to Terry's clit. It was hot and hard and Terry gasped sharply as Jade ran her palm over the head.\n\n\"Is that too much baby?\" Jade asked.\n\n\"No, it was wonderful,\" Terry whispered heatedly. As Jade did it a few more times, Terry brought her hand up and wove her fingers in Jade's hair. She pulled Jade's head towards her and kissed Jade with such passion that Jade's head spun.\n\nJade wrapped her hand around Terry's clit and gently stroked up and down as their tongues danced together. Terry's body shook as her hips bucked, rippling the water they were sitting in.\n\nJade just held Terry's clit, allowing her to stimulate herself. With her free hand, Jade continued to play with Terry's breast. With Terry's movements, Jade's nipples were being rubbed in a delightful way and Jade could feel Terry's tight butt moving against her pussy. It wasn't enough to make her have an orgasm; however it was just enough to keep her highly aroused.\n\nTogether, naked in the tub, Terry luxuriated in the sexual play they were enjoying, but it was becoming quite serious to her. The sensations that were more than just pleasant were beginning to scream in her. Like an opera star singing to a steadily higher note, Terry's body was feeling the mix of the erotic going to higher notes in her until something had to give.\n\nIt was all too wonderful!\n\nTerry broke the kiss and with a high pitched scream, her body stiffened and she climaxed long and hard; it all felt so delicious, so unlike when she masturbated. This was real. Jade held her close, until she relaxed and recovered.\n\n\"God love, that felt so good,\" Terry told Jade after she had caught her breath.\n\n\"I'm glad I could do that for you baby, I love giving you pleasure,\" Jade said and planted several soft kisses on Terry's shoulder.\n\nTerry turned around to face Jade, her hand searching under the water for Jade's clit.\n\n\"It's my turn love,\" Terry said as her hand found the nub and slowly rubbed it with a finger.\n\nJade moaned but just as it was starting to feel good, they heard the doorbell; the food had arrived. Reluctantly, Jade climbed out of the tub and dried off quickly. She slipped into a robe and rushed downstairs to meet the delivery man.\n\nAfter collecting the food and placing it in the kitchen, she rushed back to the bathroom. This time, Terry was the one who leaned against the tub and Jade sat between her legs.\n\nJade could feel Terry's still firm clit pressing on her butt but the way Terry was tweaking Jade's nipples quickly distracted her.\n\nTerry reached down and slid a finger through Jade's lips. Terry began to slowly and sensually masturbate Jade, rubbing her clit and gently easing two fingers inside of her.\n\nThe sensations were driving Jade insane with pleasure. Then Terry did three things simultaneously; she sucked on the sensitive spot just below Jade's earlobe, squeezed one of Jade's nipples and she pushed two fingers into Jade as far as she could while she rubbed her thumb rapidly on Jade's clit.\n\nJade felt as if her whole body was tying itself into a knot. Everything, from her legs to her brain locked in a violent burst of pleasurable sensations that tore an ear splitting scream from her. She collapsed into Terry's arms with Terry being the only thing that kept her from sinking under the water.\n\nWhen her conscious mind returned, she was cradled in Terry's arms. Jade felt relaxed and peaceful. She sighed contently; this is what love was supposed to be like.\n\nChapter 18\n\nAs the water drained from the tub, Terry switched on the shower head so they could rinse off. Jade watched as the warm spray cascaded down over Terry's sexy frame, admiring how the water dropped deliciously off of her still erect clit.\n\nJade couldn't resist\u2015well she didn't really want to. Dropping to her knees, Jade hurriedly held on to Terry's hips and engulfed her clit, slowly taking all of it into her mouth, and eventually feeling it slide into her throat. One of the wonderful things about that beautiful clit was that even in its excited state, it was still somewhat pliable, and every inch of it was so sensitive just as her own clit was. Jade loved that about Terry's sexy clit.\n\nHolding on to Jade's shoulder for balance, Terry moaned long and loudly as Jade's mouth worked a sensual magic on her most sensitive organ. The heat from Jade's mouth was incredible and as Jade slowly started to move her head allowing that firm piece of succulent flesh to slide out a bit, and then back in her throat, Terry's body went into that now familiar feeling of deliciously unbearable ecstasy.\n\nWhile Terry's muscles tightened and her clit pulsed, her grip on Jade's shoulders became painful, however Jade wasn't about to stop to complain.\n\nTerry's breath was ripped from her being in a harsh rasp as her orgasm over took her. She emptied a huge torrent of cum into Jade's willing mouth but Jade would not let her rest. Terry barely had enough time to grab a breath before Jade's mouth brought a second climax to her.\n\nPanting hard and feeling completely drained, Terry's body sagged against a now standing Jade.\n\n\"Love, are you trying to kill me?\" a partially dazed Terry managed to ask as Jade's body was the only thing keeping her upright.\n\n\"I'm sorry baby, but you are so sexy and you taste so good that I can't get enough of you or your love juices,\" Jade told her, kissing Terry gently.\n\nThey managed to finish rinsing off, donned their robes and made their way downstairs to dinner. They cuddled together happily and picked off each other plates.\n\n\"Paula wasn't at all surprised about me moving out to be with you,\" Jade said.\n\n\"She's a smart woman. I think she saw this coming before I even thought of it,\" Terry answered.\n\n\"You're probably right but she's happy about it.\"\n\n\"Oh I'm sure the others will be too when they find out. They've been trying to get me hooked up with someone for a long time,\" Terry said.\n\n\"I'm so happy that didn't happen otherwise I would have missed out on being with the most beautiful, sexy, intelligent woman I've ever met,\" Jade said heatedly as she kissed Terry deeply.\n\n\"So am I,\" Terry whispered feeling a little dazed from the heady kiss, \"though Vittoria might not be too happy.\"\n\n\"Why do you say that?\"\n\n\"Because she's so very attracted to you but has kept it in check because Paula promised to knock her into next week if she tried anything.\"\n\n\"Paula really told her that?\" Jade asked.\n\n\"Yeah. Vittoria's kinda intense and she likes things rough.\"\n\n\"Rough? As in harder, baby harder or tie me up and spank me?\" Jade asked. Terry blushed a bit as Jade spoke.\n\n\"She's into bondage from what she's said. She once told me that she has the best orgasms when she's been tied down and beaten with a riding crop.\"\n\n\"Well if that's her thing and gets her going then good for her\u2015\" Jade stopped when she had a concerning thought.\n\n\"Baby, is that something you're interested in? Being tied and spanked and dominated?\"\n\nTerry bit her bottom lip, a gesture that told Jade she was unsure of how to say what she wanted to say.\n\n\"It's okay baby, just tell me,\" Jade told her taking her hand and holding it in a comforting way. Terry took a deep breath and spoke, her voice full of conviction.\n\n\"Jade, I love how you've been with me so far. You've been patient and gentle and sometimes you've taken charge, which is really nice but you haven't taken over or tried to control me or anything. I really love that even though you're strong, you don't overpower. I don't want a relationship where I have to obey you. I like what we have and how we have it,\" Terry finished.\n\nJade relaxed and smiled brightly, \"I love what we have too and I don't want it to change. I'm not into the dominating thing but at times I may get a little carried away and a stray slap might find its way to your gorgeous butt,\" Jade said as she pulled Terry to her and caressed her butt cheeks.\n\n\"I like making soft love to you and I wouldn't want to change that for anything,\" Jade whispered as she leaned her forehead against Terry's.\n\n\"Come on, let's clean up and go to bed,\" Jade suggested, Terry was more than happy to agree.\n\n* * * *\n\nThey didn't bother with pajamas as they crawled in between the crisp cotton sheets. Jade was lying on her back with Terry stretching out on her stomach, partially on Jade's body, her leg draped over Jade's leg; her enlarged clit in its soft mode resting against Jade's right hip. Terry rested her head just above Jade's right breast with her right hand gently cupping Jade's left breast.\n\nJade's left hand was tenderly caressing Terry's hand that was on her breast, her right hand was snaked around Terry's body and was sensually stroking Terry's butt, her fingers occasionally dipping between those firm cheeks to fondle Terry's pussy lips as best she could. It was enough to tease Terry so that soft moans emanated from her lips. Pleased with her exploration of Terry's body, she coaxed as much of her juices as she could\u2015as it turned out, Terry's love was flowing marvelously. It excited Jade so that her juices were flowing copiously too, and more, she could feel Terry's clit dripping on her leg.\n\nTheir breaths were both becoming stunted, Terry's nearly gasping in pleasure. Terry moved slightly and Jade felt warm, sensual lips caressing her neck, collar bone then just above her breasts. Terry began softly kneading Jade's left breast causing a small moan to escape Jade's lips. A bigger moan followed when Terry placed her mouth over Jade's right breast, sucking softly at the stiffening nipple.\n\nJade had seen this side of Terry once before over the weekend where she had gently taken control of the love making. It was a side of Terry Jade liked very much so she just relaxed and let Terry do whatever she liked.\n\nTerry caressed, fondled and sucked on Jade's fabulous breasts, enjoying the softness of the skin and the firm texture of the breast itself. Jade's nipples were large and so inviting to nibble on which Terry did a lot of. Jade's body didn't object either.\n\nAfter what seemed like an eternity to Jade, Terry moved lower, kissing Jade's stomach, tonguing her bellybutton and nuzzling Jade's bare mound. Terry planted a series of soft kisses on Jade's outer lips as she drew Jade's legs apart as wide as they would go.\n\nTerry used her thumbs to gently pry apart Jade's inner lips and drug her tongue straight up the middle, her touch ending on Jade's exposed clit.\n\n\"Oh god! Baby,\" Jade cried out, her hips rising slightly from Terry's touch.\n\n\"You like that love?\" Terry asked.\n\n\"Yes, oh YES!\" Jade answered as Terry rapidly licked it a few more times.\n\nTerry kept up her assault until Jade was right on the edge of climax then she changed tactics, denying Jade her release. Instead of licking, Terry began sucking on Jade's lips and clitoral area, leaving the clit for last. She enjoyed her mouth taking Jade's lips one at a time, and caressing within each one with her tongue, then lightly suckling the lips. She wished Jade could do that to her, then wondered if Jade would try it, it felt so delicious to Terry.\n\nWhen at last Terry licked gently, but vigorously, on Jade's clit, Jade cried out as she felt her orgasm about to begin, but again Jade's release was held back as Terry changed her style once more. Terry mixed things up, licking and sucking Jade's pussy, driving Jade insane with her need for orgasm as she drank all of Jade's juices which she loved.\n\nJade was ready to beg, plead, threaten or blackmail Terry to let her cum when she felt two fingers entering her and Terry's mouth on her clit. Terry worked Jade's pussy hard and fast, taking a no-nonsense approach this time.\n\nJade's body felt like it was trying to turn itself inside out. Everything tightened, froze then tightened some more. Jade's back arched as the entire lower half of her body lifted off of the bed. Terry managed to stay with her as Jade's vaginal muscles gripped Terry's fingers so hard that Terry could no longer move them.\n\nThe first gush of fluid hit Terry's neck. She quickly released her lip lock on Jade's clit and placed her mouth over Jade's opening. Terry caught the next three blasts and drank the fluid down quickly.\n\nCollapsing on the bed, Jade's orgasm left her exhausted but completely sated. Her body remained limp, she was panting so hard, her eyes closed but her lips curled into a satisfied smile.\n\nTerry cuddled up next to Jade and held her tired lover. After many long minutes, Jade gathered enough strength to speak.\n\n\"Terry, baby, where did you learn to do that?\"\n\n\"I read a lot of stories about how to give Sapphic pleasure,\" Terry said simply.\n\n\"Well baby you are amazing at it. I've never had orgasms like that with anyone else. I'd heard women talk about how they squirt when they cum but I never have before\u2015before your touch. You're going to have to teach me or maybe show me some of those stories.\"\n\n\"Oh you do just fine on your own love but I guess I could spend hours teaching you all that I've learned,\" Terry answered, a smug smile on her lips. There was something in her voice, a playfulness or mischievousness perhaps. Whatever it was, Jade realized that in the coming weeks they might need to pace themselves. If their entire love making was going to be that good then they were in danger of death by orgasm.\n\nTruthfully; if you had to go, Jade didn't mind going that way one bit.\n\nChapter 19\n\nWith the move completed, Jade and Terry began their lives together. There were many adjustments that both had to make, minor problems to sort through and even a few minor disagreements, but in the end they worked everything out and fell into a routine.\n\nTrue to her word, Jade didn't hide her relationship or her newfound status as a lesbian. She didn't shout it from the rooftops either though. One of the first things Jade did was to place a picture of Terry on her desk. Greg, her trusted assistant was ecstatic, welcoming Jade with open arms into the family.\n\nBeing a loyal assistant, Greg kept his ear to the ground, reporting all that the office staff had to say. Jade wanted to keep abreast of everything so as to avoid any potential problems that might arise.\n\nThere was the general office gossip but nothing Jade couldn't handle. It seemed that no one dared to do or say anything negative, Jade was, after all, the best employee in the company and because of that, she was tight with the boss.\n\nAt Terry's business, all of the employees were thrilled at the turn of events. Darla had let the whole office know about the flower delivery and their employer's hot girlfriend. Terry's office became a revolving door of employees, all finding some excuse to get a glimpse of the photo of their boss' lady.\n\n* * * *\n\nIt had been a glorious month so far in Jade and Terry's relationship. They loved being together, spending time with each other, going out or just staying at home. It wasn't all about the sex\u2015though that aspect was spectacular\u2015it was the little things that added so much to their happiness.\n\nOn the weekdays, Jade loved to awaken first and sneak out of bed to make the coffee. She would return with two steaming mugs, climb back into bed and awaken Terry with gentle kisses.\n\nOn the weekend, it would be the reverse, with Terry waking early and bringing a tray with coffee and some sort of breakfast pastry that she would bring home the evening before.",
        "They traded turns during the week doing the house hold chores like cooking, and the dishes, sharing the cleaning and laundry on the weekends, but more than often doing them together. Whenever Terry made lunch for them to take to work she would leave little love notes for Jade. Terry also found notes that Jade left in different places at home.\n\nThey were blissfully happy and each wondered if it would always be this way.\n\nAfter an especially sensual round of lovemaking one Friday evening, they were cuddled together gently stroking each other's bodies when Jade whispered in Terry's ear.\n\n\"Baby, tell me about your fantasies please.\"\n\n\"My fantasies?\" Terry queried.\n\n\"Yes baby, you do fantasize don't you, about what you might like to add to our lovemaking, what you may have thought of before we met? I'd like to know about them; will you tell me please?\" Jade asked gently.\n\n\"Jade, you've already made my fantasy come true by giving me your love,\" Terry told her and kissed Jade's neck.\n\n\"I'm happy to have done that for you hon, but I'm sure you have at least one sexual fantasy in there somewhere that we haven't fulfilled yet.\"\n\n\"Jade, love, before I met you, all my fantasies were of finding someone who would want to be with me. As far as sex was concerned, what I dreamed of was all that we've done so far. I hoped that someone would want to be with me despite my body and you've done that so beautifully for me,\" Terry said, a bit of sadness in her voice but also tinged with faint glimmer of excitement from somewhere within her.\n\nShe paused for a bit letting her words sink in. Jade knew how much Terry had longed for the intimacies that they now enjoyed and felt her heart bursting with pride and love that she was the one to be able to share this with Terry.\n\n\"There is one thing though, it's not a fantasy, but more of a curiosity,\" Terry said slowly, possibly more than a bit untrue.\n\n\"Alright baby, will you tell me?\"\n\nTerry sat up and leaned her back against the headboard. Jade joined her, taking Terry's hand in her own and giving her the time she needed to compose her thoughts about whatever she wanted to say.\n\n\"Back when I attempted to date men, there was always the thought in the back of my head about intercourse. If I ever got to that place with a man, my vaginal opening might not be able to handle penetration without me getting hurt, so my thoughts turned a lot to anal sex,\" Terry near whispered the last, giving a hint of just how much she had fantasized about it. Jade squeezed her hand reassuringly but didn't say anything yet; waiting to see if Terry had more to say.\n\n\"I did a ton of research about it, reading studies and help guides about how it was done. The risks and safety issues, if it would be pleasurable, that sort of thing. It seemed like the only way I could have a workable sexual relationship with a man,\" Terry said with a long sigh.\n\nJade cupped Terry's cheek and turned Terry face to her own. Jade smiled a gentle smile at her love and asked softly, \"What about now, is it still something you'd like to try?\"\n\nTerry smiled a shy smile at Jade and nodded her head. Jade smiled back at her and kissed her softly on the cheek. In point of fact, Terry had subconsciously, if not openly consciously, hunted for anal sex information. Taken with her need to find a way to be acceptable, and still enjoy sex was a growing fantasy in her. It had become a secret vice to her mind, her desire for love and sex with a loved one.\n\n\"We'd need to get a toy and lube and take some special steps,\" Terry advised a bit shyly but with a smile in her voice that was tinged with impending excitement. Were her fantasies about to come to pass? She hoped so, she so often dreamed of them.\n\n\"Well, the lube we'll have to buy and you'll have to tell me more about those special steps but as for the toys\u2015\" Jade left the sentence hanging and moved from the bed. She retrieved the drawstring bag from the back of the closet and after resuming her place on the bed next to Terry, she placed the bag in Terry's lap.\n\n\"Compliments of Paula. I didn't know quite how to tell you about it,\" Jade said with a sheepish grin. Terry opened the bag and slowly removed the variety of dildos within; her eyes wide with surprise.\n\n\"Paula gave you this?\" Terry asked her voice holding wonder at the things she was seeing.\n\n\"Yeah, the evening I moved out, and no, she had no idea of how you are, just a lesbian's thing she knew she liked. She wanted us to be able to spice things up, her words, but with your beautiful clit and the sexy way you can use it, well the need for a strap on didn't come up until now,\" Jade told her.\n\nThe assortment of sizes in dildos Paula had selected was imposing to Terry's mind. She couldn't imagine the smallest\u2015which seemed to be about five inches and quite slender\u2015going inside of her anus not to mention her vagina.\n\nJade saw the look of concern and touched Terry's arm, \"Hey, we don't have to use these, we can buy the right sizes so you won't get hurt or feel uneasy about them,\" Jade reassured her. As always she just knew the right thing to say at the right time to help Terry feel comfortable and relaxed.\n\nHowever, it wasn't only concern that Terry had, but also the realization now before her of what she had always wanted as a way to fulfill her needs. Though her needs were now changed for the most part, the fantasy was still there, still vibrant within her.\n\n\"Have you tried it on?\" Terry asked.\n\n\"No, not yet.\"\n\n\"Will you, so I can see how it looks?\" Terry asked her eyes so sweetly pleading, but lust-filled, so that Jade couldn't say no.\n\nJade fiddled with the straps until she had the basic concept of how it should go. Terry fitted a black, eight inch dildo into the ring system and Jade donned the harness. The dildo drooped slightly but stayed in place as Jade turned and moved around the room. They both couldn't help but giggle at how Jade looked.\n\n\"You look very well endowed,\" Terry said and fell over on the bed laughing at how Jade held the toy and dangled it while rocking her hips.\n\n\"What do ya say baby, wanna take a ride on this?\" Jade teased in as deep a voice as she could make while stroking the dildo suggestively. She had Terry laughing so much that tears were running from her eyes.\n\nThey played around some more, fitting different attachments, joking and telling each other their thoughts. After having their fun, Terry spoke seriously about the safety measures they should take if they were really going to do this.\n\n\"There's a lot of bacteria that's in the anus and so it is recommended that we should do an enema first in order to get the passage as clean as possible. In addition to that, we should use a condom with the toy,\" Terry said seriously.\n\n\"Okay, I guess that makes sense,\" Jade agreed though not really sure of it all. \"What else?\"\n\n\"Then there's the issue of the lube. The anus doesn't lubricate so we must use our own. From what all the research says, there's no such thing as too much lube when it comes to anal sex. Water based is mostly recommended so I think we should go with that.\"\n\n\"Since you've done so much research on it, we'll go with what you say. Honestly, I don't know anything about it, or not much,\" Jade told her but remembered her ex's proclivities that she'd never suspected. \n\n\"We also need to decide on the size of the toy we'll use.\"\n\n\"If there's something else you'd like to try later, then I'm all for it too. This is about making you happy and comfortable.\"\n\n\"Oh Jade, I love you so much,\" Terry said wrapping her arms around Jade's neck and kissing her fiercely.\n\nA sense of doubt crossed Terry's mind. Did Jade really want to do this, or did it turn her off, for she knew about her ex, and she wondered if it did make Jade very uncomfortable.\n\n\"Jade, is this something you'd like to try also?\" Terry asked after some time had passed.\n\n\"Well baby, when I was married, the idea never came up. I enjoyed straight sex and masturbation, but I wasn't too adventurous. You've brought out a side of me that I didn't even know I had,\" Jade told her, kissing Terry's lips heatedly. \"And I love you so much for it. To answer your question, I think I'd like to try it out too, especially after what I felt at the cottage when you licked my anus so sensually.\"\n\nChapter 20\n\nThe next day they sat in front of the computer and researched for almost an hour about the practice of anal sex. They found many helpful hints and tips about the do's and don'ts.\n\nWhile Terry stopped to make a quick lunch, Jade continued poking around the internet, checking out lubes and toys. Quite by accident she came across a site that specialized in sex toys. What made this site special was that they advertised a special type of dildo that was hollow. It was designed for both men with erectile problems and men who just wanted to thrill their partner without worrying about going soft.\n\nThe possibilities of what one of those dildos could do to their lovemaking were running rampant through Jade's mind. She loved Terry's clit and loved how sensitive it was, but because it was so sensitive she couldn't hold out too long while inside Jade without cumming repeatedly which in turn caused Jade to orgasm quickly\u2015sometimes too quickly, not to mention all of her love juices running out of her. Then there were Terry's feelings of wishing she could keep from climaxing so fast while fucking Jade. Though this hollow dildo seemed to be the answer to that, she would actually miss that sweet knowing that Terry did love her so much as to bless her with her multiple orgasms which thrilled Jade to no end. Not mentioning the possibility yet, Jade decided to do a little more research.\n\nOne afternoon before going home, Jade stopped at an adult toy store to buy some anal lube. When Jade asked about the hollow dildo attachment, the woman\u2015Cathy\u2015was very knowledgeable about the device and helped Jade find a nice seized one that they had in stock.\n\nA particularly small dildo caught Jade's attention; it was just about five inches long and not more than an inch in width, possibly more slender than the one they had. To Jade it seemed perfect for Terry's pussy. In the end, Jade left the store with lots of lube, three different sizes of anal toys, a hollow dildo with harness and the little surprise that she would use for Terry's virginity. However the last would be a surprise that Jade would spring on Terry in the most special of circumstances.\n\n* * * *\n\nTerry needed no foreplay. Not even a kiss. She was already struggling with her breath\u2015she couldn't get a decent one. Jade noticed how turned on Terry was, how it was affecting her, taking her over. The fantasy that had most grown in Terry was about to be reality, and now, without thought, it was growing exponentially in her.\n\nTaking things slow in their first attempt at anal exploration. They had each given themselves an enema earlier and had made themselves as clean as possible. They began by slowly kissing and caressing each other, Jade very intentionally, Terry automatically, lost in the wonder of her fantasy.\n\nAfter sensually sucking on Terry's clit and bringing her to a couple of quick\u2015even by Terry's standards\u2015though very delicious orgasms, Jade donned the latex gloves and placed some lube on her finger. While Terry lay on her back, Jade carefully ran it over Terry's pink rose bud. Little by little, Jade massaged and pushed into Terry's bud, driving Terry wild with the pleasurable sensations\u2015reality swiftly combing with fantasy.\n\nIt was unlike anything Terry had ever felt before. The slight and slowly increasing pressure from Jade's finger sent her senses into overdrive though it wasn't in her as yet. She felt herself becoming more aroused\u2015if that was possible. Jade saw it too as Terry's clit was as hard as it had ever been and her pussy was incredibly wet as well. Jade heard it too in the way Terry was moaning and crying out.\n\nAfter a few minutes of steady pressure, Jade's finger slipped into Terry's anus. Jade stopped all movement, allowing Terry to get used to the intrusion that was so unfamiliar. Very carefully, Jade moved her finger in a slow in and out rhythm as Terry's hips began moving of their own accord.\n\nWhen Jade sensed that Terry was ready, she introduced a second finger inside of Terry, albeit, very carefully. Terry's hand flew to her clit, and she gently caressed herself. Terry starting to cry out was Jade's cue, and she quickly took Terry's clit into her mouth as a mind blowing orgasm swept through Terry so quickly that it left her dazed and panting hard. Jade, on the other hand, had a huge grin if only in her mind for she still loved the feel of Terry's clit in her mouth.\n\nRemoving her fingers and throwing out the glove, Jade cuddled with Terry until her breathing was even again, feeling satisfied with her own after glow from savoring Terry's love. She had to wonder if she didn't have an orgasm herself, she loved it so much.\n\n\"How was it baby?\" Jade asked softly.\n\n\"My god Jade, that was amazing. I can't wait for you to feel what it's like,\" Terry said excitedly\u2015she had quickly pushed Jade down on the bed and kissed her intensely\u2015\"and what you did, that was so sweet and felt so delicious,\" she raved as she still worked to catch her breath.\n\nAfter resting a while, Terry fitted her hand into a glove and lubed it up, Terry, quickly horny as could be to make love to Jade, attacked her pussy with her tongue as her finger rimmed Jade's anal opening. She had to caution herself to reign in her passionate lusting for her breath was becoming too stunted; she so wanted to make love to Jade.\n\nThe combination of her tongue on Jade's pussy and clit as well as her finger pressing on Jade's rosebud had Jade fighting to catch her own breath; she felt so aroused that she was going out of her mind. As her orgasm threatened, she felt Terry's finger pushing steadily into her and when she felt a second one enter her, Jade's orgasm exploded, magnified tenfold, squirting on Terry's face.\n\nDiscarding her gloves and wiping her face, Terry held a shaking Jade until her body calmed. Though Terry, as sensitive as she was, had in the past given Jade some extremely powerful orgasms, this earth shattering one Jade just had seemed to be even more potent than any of the previous ones. \n\n\"Jade, love? Are you okay?\" Terry asked as Jade's body continued to shake, all of her nerve endings feeling like they were fried and still sizzling.\n\n\"Fine\u2015baby\u2015fine,\" Jade managed to croak out while trying to get enough air to fill her lungs.\n\nAfter a few minutes, she was feeling much better and able to talk again.\n\n\"Baby, I think we need to pace ourselves and be very careful about how we do this anal sex. For a minute there I thought my body was going to rip itself apart.\"\n\n\"I know exactly what you mean. It was all so intense and just from our fingers, imagine what it could be like with a toy,\" Terry said her voice in awe.\n\n\"From our fingers and tongue, you mean. Just imagine using a vibrating toy too,\" Jade said and shivered.\n\nTerry laughed lightly. \"Now that would be something else, but you can't deny that your orgasm wasn't spectacular,\" Terry said with a small smile. Jade grinned at her love.\n\n\"No baby, I certainly can't deny that.\"\n\nOver the next few weeks they continued to explore, testing the limits of how much they could take. Their love making was too enthralling at times. Gradually, they grew accustomed to anal penetration and both grew to love the feeling of their fingers entering them. The orgasms were so overwhelmingly intense that they tried to not overdo it. Maybe, Jade concluded, it was time to fuck Terry's ass as she wanted for so long.\n\n* * * *\n\nIt was time. Terry's fantasy of being fucked in her ass had to happen as Terry, mild and loving though she was, had dropped a few hints that she was not only ready, but so wanted it.\n\nJade had everything in readiness. Showering, and naturally making love to Terry's luscious clit, Terry was more than prepped for what was coming. Kissing Terry endlessly as Terry had become accustomed to Jade doing, and loving it always, Jade knew she was ready. Getting up, she put on her harness and inserted the dildo.\n\n\"Baby,\" Jade started breathlessly, \"I'm going to make love to you, but from behind,\" she couldn't get herself to say that she was going to fuck Terry in her ass, she was so nervous.\n\nHow swiftly Terry's features changed. Seeing Jade with her harness and dildo on, she knew what was coming. The very last act of her fantasy, now suddenly so close to being a reality instantly had her on edge. Her anticipation of being taken anally with a phallus had her body humming, her mind blazing with excitement, her pussy contracting and her ass tingling, whether real or imagined.\n\nJade saw her state and was becoming more anxious to fulfill this longing that Terry had for so long kept hidden. She couldn't wait to give Terry what she'd so long and often wished for.\n\nTerry's eyes reflected her lust and craving for Jade to fuck her ass. Terry's breathing was becoming almost frantic, her chest heaving, her panting sounding almost desperate as she looked at the dildo in total fascination.\n\n\"Try to relax, baby,\" Jade admonished.\n\n\"Please Jade, now,\" Terry said. She tried mightily to get her breathing under control, as she lay back on the bed and spread her legs for Jade to begin.\n\nKissing her softly and tenderly, Jade said, \"Turn over, baby.\"\n\n\"Uuh,\" Terry moaned softly at Jade's words, both excitement and fear clouding her mind, but with Jade's hands on her, she turned over.\n\nLooking at Terry's smooth and sensual ass, and knowing what she was about to do, had Jade just about orgasmic herself. God, she looked so sexy; Jades pussy was clenching and dripping, the sight of Terry's ass was so erotic. Jade's breath hitched when she lifted Terry's hips, bringing another long moan of expectation from Terry. Neither could wait, but Jade prolonged it, albeit unintentionally. She was too mesmerized by Terry's ass already wiggling lightly with her wanting.\n\nShe had to kiss those lovely cheeks. Kiss and nibble at them, that is. She'd never truly considered the sweetness of Terry's ass, her globes that were so enticing, at least not as she was now. They were driving her crazy, and it only became worse when the kissing and nibbling began. Why hadn't she done this before, it was so sweet.\n\nFor a long time Jade gorged on her need to make love to Terry's cheeks with her lips, but Terry was in too great a need, and waited helplessly for Jade to fuck her. Terry sensed that her need, her fantasy, held her helplessly in thrall. Offering herself to Jade as she was, and unable to see, naturally brought on some fearful anxieties, but also an excitement that was absolutely thrilling.\n\nJade slipped her hand into a glove and lubed her fingers. She kissed one of Terry's cheeks first, and then slowly and carefully pushed first one then another finger into Terry's anus.\n\n\"Oh, god,\" Terry uttered with stunted breath. Jade could hear Terry's harsh breathing already.\n\nWhen Jade's fingers were sliding easily in and out, Jade removed them, added more lube, and placed the head of the dildo at Terry's opening.\n\nA huge rush of excitement shot through Terry's body when she felt the dildo tip at her entrance. Holding Terry's hips, Jade pushed slowly. Terry groaned when she felt the dildo meeting resistance.\n\n\"Relax baby, relax,\" Jade cooed as her hand took possession of Terry's clit and started rubbing her lubed thumb over the head. She had towels over and under Terry's clit anticipating her orgasm, and kept control of Terry's body with her forearms pressed against Terry.\n\nThe burst of blissful sensation from Jade's touch had the desired effect and the dildo slipped easier into Terry's hot and sweet ass.\n\n\"Ohhhhhh,\" Terry felt the sudden surges of extreme pleasures beginning. Jade paused, and allowed Terry to adjust. After an appropriate amount of time, Jade carefully moved her hips, working a little of the dildo out and then back in.",
        "Terry was flushed, sweat covered her forehead and her eyes became glazed. Her breathing became labored and somewhere deep inside an animalistic growl erupted. Her hips started to swivel wildly and push back at Jade.\n\nSoon, Jade was moving in and out of Terry's ass faster, but still making sure to keep control of Terry. Terry was matching Jade's movements at times, but at others she was too far gone in the sensations colliding so pleasurably in her.\n\nSuddenly Terry screamed at the top of her lungs. Her clit, which was rock hard in Jade's hand, erupted almost violently. The towel catching most of it, Jade did get a handful which she quickly used to coat Terry's clit with enhancing all of the sensations even more.\n\nJade regretted that she couldn't have all the sweet and delicious tasting liquid, but it was making Terry's clit so slick and the sensations more heavenly.\n\nWith a mighty growl, Terry gave one last, hard push at Jade and then collapsed, panting and fighting to catch her breath. Jade pulled out carefully and quickly removed the harness. As quickly as she could, she moved to Terry and held her as she fought to get her breathing under control.\n\nIt took some time but eventually Terry was enjoying the afterglow and kissing Jade's breast spastically.\n\n\"I love you,\" were the first words spoken from Terry's lips. Jade smiled and softly kissed Terry's head.\n\nLater that week, Terry returned the favor, though she could only do so with a hand held toy but the experience was in no way diminished for Jade.\n\n* * * *\n\nOn Terry's birthday, Jade threw her a wonderful party. Paula and the gang, and a few other friends, attended making it a beautiful affair. Terry had never been so happy to celebrate her birth.\n\nBy eleven pm all of the guests had left and the house cleaned. Up in their bedroom after their shower, Jade presented Terry with a special birthday gift.\n\nIt had been a couple of months since they had gone from fingers only to Jade using a dildo and harness on Terry. That had brought about even more explosive orgasms to Terry. Whenever Jade fucked her anally, she always had a towel handy. Fucking her doggie style, Jade would soon caress Terry's hot and horny clit. Anticipating Terry's orgasm, Jade would wrap her arms about Terry, one hand holding the towel so Terry's cum wouldn't fly all over everything, and the other hand on her clit, Jade moved ever so slightly within Terry as she caressed the beloved clit to orgasm.\n\nAs Terry's orgasm began, Jade would take much of the fluids and coat Terry's clit with them thus heightening all of the sensations, and more, driving Terry to lose herself in the utter beauty of all her body was feeling.\n\nHowever, Terry felt bad that she couldn't reciprocate, leaving her to only use her fingers and a hand held toy on Jade. As much as she wanted too, her clit was just too sensitive to penetrate Jade's anus as she wished she could, but all that was about to change.\n\n\"Happy birthday baby,\" Jade said handing Terry a beautifully wrapped box.\n\n\"What's this; didn't you already give me a gift?\" Terry asked as she sat on the bed with the box.\n\n\"Yes but this one is special; it's really for the both of us,\" Jade said with a sweet smile on her lips, \"Go on hon. Open it,\" Jade urged.\n\nTerry ripped at the wrapping eagerly and opened the box. Her face grew puzzled at the contents.\n\n\"What?\" Terry asked as she took out the light purple dildo and the harness to go with it.\n\n\"This, love, is for you to wear,\" Jade said as she smiled at Terry's confusion.\n\n\"Jade how am I\u2015\" Terry began as Jade came to sit next to Terry on the bed.\n\n\"Turn over the dildo and examine it,\" Jade said. Terry did and at first she still didn't understand until she placed her fingers into the dildo's hollow opening. Terry's eyes went wide at the realization of what she was holding.\n\n\"You mean\u2015\" Terry stammered, her voice thick with emotion.\n\n\"Yes baby, this is for you to make love to me with. Your clit will fit snugly inside and you'll be able to hold on from having an orgasm so you can take me both in my pussy and my butt for as long as you like,\" Jade said softly.\n\n\"Oh god Jade, my love, how\u2015where...?\" Terry tried to asked, her emotions getting the better of her as she began to cry tears of pure joy.\n\n\"I found it a little while ago and I've been saving it for a special occasion,\" Jade told her as she gently kissed Terry's cheek and held her close.\n\n\"Want to try it on?\" Jade asked when Terry had stopped crying.\n\n\"Yes,\" Terry whispered. Jade helped her as she put on the harness and tucked her clit into the dildo. The harness was also special, having an opening for a penis\u2015or in this case, Terry's enlarged clit. Tightening the straps, the dong\u2015which was a little longer than Terry's clit\u2015stood proudly, only slightly sagging from its own weight.\n\n\"Oh baby you look very sexy like that. How does it feel?\" Jade asked as she watched Terry touch the dildo.\n\n\"It's strange to have one of these on, to see and touch it from this angle,\" Terry was barely able to say, her breath so stunted.\n\n\"Yeah I understand. Wanna give it a test run?\" Jade asked.\n\n\"Yes, I'd like to make love to you with it,\" Terry said her voice still strangled from her love and fantasy driven lust.\n\nJade grabbed a bottle of lube and rubbed a generous amount on the toy.\n\n\"How would you like to have me hon, on my back or my tummy?\"\n\n\"Your back please. I want to look into your eyes and kiss you,\" Terry responded, her voice a feral, lust filled growl.\n\nJade crawled to the middle of the bed and awaited Terry. Slowly she came to Jade and settled between her spread legs. She placed the tip of the toy at her opening and pushed forward as she normally did whenever she fucked Jade with her clit.\n\nThe dildo wasn't too thick and slid into Jade easily. Jade groaned when it was all the way inside of her. Terry lowered her body to Jade's and kissed Jade's lips hungrily as she slowly moved her hips.\n\nAfter a while Terry found a nice rhythm and drove into Jade with increasing passion. Terry thoroughly enjoyed using the strap-on to make love to Jade. She had never been able to keep thrusting for more than a couple of minutes before she had an orgasm. The hollow toy gave only minimal stimulation so she kept going, giving Jade everything she could.\n\nJade started lifting her hips to meet Terry's thrusts, loving the feeling of the dildo going in and out of her. The look of utter joy in Terry's eyes as she worked to bring Jade to orgasm was priceless.\n\nTheir kisses remained passion filled as Terry continued to work her hips in a sensual dance of lovemaking. Their eyes stayed locked on each other, each reading the love and fulfillment the other felt.\n\nAfter a long time of Terry working without pause, and beautiful sensation upon beautiful sensation, Jade felt the familiar stirrings of an impending massive orgasm. Jade moaned and called out, her voice thick with her feelings of bliss.\n\n\"Don't stop baby, you have me there, I'm\u2015\" Jade's voice went from speech to a guttural groan as her climax hit her full on. Her vaginal walls gripping the dildo so fiercely that Terry was forced to stop her thrusting.\n\nTerry's legs and hips were sore from all the movement but her heart was bursting with happiness at having been able to keep going for so long.\n\n\"I love you Jade. This has been the best birthday I've ever had,\" Terry said her lips finding Jade's in a most love-laden kiss.\n\n\"I love you too. I'm happy that you enjoyed it baby. Of course, the night's not over yet. When you've rested; it's my week for anal.\n\nChapter 21\n\nOn their six month anniversary of moving in together, Jade announced that it was time for her to tell her family everything. That weekend, she took a plane on Friday and headed for her childhood home. During the flight, Jade went over in her mind what she was going to say. Just how does one tell their parents that after all this time, you've discovered that you're a lesbian?\n\nWas she really? Jade was in love with Terry. When she thought of Terry, her mind, body, heart and her very soul sang a joyous chorus. Terry was her everything; she didn't feel an attraction to any other woman.\n\nNow that the thought occurred to Jade, she realized it was true. In her line of work, she met many people, many women. Looking back over the last six months or so, Jade had met with a lot of beautiful and very appealing women. None of them even sparked an appraising look from Jade. She only had eyes for Terry. So, was Jade a lesbian or simply just in love with an incredible woman? In Jade's mind, it was the latter.\n\nAs Jade approached her parent's house, one thing was clear to her, regardless of her parent's views, she was going to return home and propose to Terry.\n\n* * * *\n\nJade sat in the old kitchen that hadn't changed in the last twenty years. She sipped her herbal tea as she watched her mother moving about the kitchen making Friday's dinner.\n\nJulia Kobayashi O'Connor was a tiny woman, only five feet two inches tall. Her straight, jet black hair was cut into a bob, falling just below her chin. She looked like a typical Asian woman except for her very American accent. Her looks aside, she wasn't to be trifled with and had a keen eye so nothing went past her. She knew something was up with her daughter. Jade would not come home just for a visit.\n\n\"So my precious girl, what brings you home? Not that you need a reason to come home,\" Julia said as she sat across from Jade.\n\n\"I have something to tell you and dad and Robbie,\" Jade replied.\n\n\"Well your dad and Robbie won't be home until tonight so you can wait if you like or you can tell me before you worry yourself into oblivion.\"\n\n\"I'm not worried,\" Jade said, trying to fib, but her mother could read her like a book.\n\n\"Jade, you couldn't pull the wool over my eyes when you were fifteen and you certainly can't do it now. Whatever it is, just tell me. Is it something bad? Are you sick?\" Julia asked concerned.\n\n\"No Mom, I'm fine and it's not bad, at least not for me. Whether you agree or not well...\" Jade trailed off.\n\n\"Just tell me precious. We'll work whatever it is out.\"\n\n\"Okay,\" Jade began, taking a few deep breaths to steady herself, \"Mom, I'm in love with someone; we're living together and are committed to each other.\"\n\n\"Well that's wonderful precious. After your divorce I was worried,\" Julia said relieved.\n\n\"There's more, Mom,\" Jade continued.\n\n\"Okay?\"\n\n\"This person I'm with is a woman.\"\n\nJade watched and waited for her mother's reaction. There was the obvious shock and confusion as Julia tried to absorb what Jade had said.\n\n\"Alright precious,\" Julia said after some time, \"let me get this straight, you're living with and in love with a woman?\"\n\n\"Yes Mom.\"\n\n\"So, you're sleeping with this woman? Are you gay?\"\n\n\"Yes, I guess I am,\" Jade answered.\n\n\"You guess; you're not sure?\"\n\n\"That's not what I meant. It's just a little complicated.\"\n\n\"So explain it to me?\" Julia asked.\n\n\"There's nothing to explain, the bottom line is I'm in love with Terry.\"\n\n\"Terry, is that her name?\"\n\n\"Yes Mom, her name is Terry Matthews. I met her after I divorced Michael.\"\n\n\"Is that why you and Michael broke up, you realized you were gay?\"\n\n\"No Mom. Michael and I had irreconcilable differences but this wasn't a factor, I met Terry after Michael and I broke up,\" Jade assured her mother.\n\nShe couldn't tell her mother that she had caught her husband with another woman, or that her libido was suddenly awakened by seeing Paula fucking her lover. Her father would want to go after Michael with his hunting rifle if he knew he cheated so blatantly on Jade, and in their marriage bed.\n\n\"I need some time to think about this. Don't tell your father yet. Please keep an eye on the stew until I get back,\" Julia told her daughter. She grabbed her purse and keys and went to her car.\n\nAs far back as Jade could remember this had always been Julia's way of dealing or accepting something shocking. She needed to be alone to absorb, think and comprehend what she had just been told. She drove off leaving Jade to wonder what would happen next.\n\n\"At least I didn't get yelled at,\" Jade said to the empty house.\n\n* * * *\n\nAfter checking on her mother's stew, Jade took a quick shower and stretched out on her old bed. She had called Terry when her plane landed to let her know she had arrived safely but now Jade yearned to hear her love's voice.\n\n\"Hi baby,\" Jade opened as Terry answered.\n\n\"Love? What's wrong?\" Terry asked worried. She didn't expect to hear from Jade again until the next day.\n\n\"Nothing's wrong, except that I miss you terribly,\" Jade replied.\n\n\"Oh Jade, I miss you too. Now tell me what's wrong,\" Terry demanded. She wasn't fooled for a second. In the past few months she had learnt to read Jade's moods, mannerisms and voice.\n\n\"Well, I told my mom.\"\n\n\"And?\" Terry asked anxiously. She was very afraid for Jade and what might happen between her and her parents.\n\n\"She said she needed to think about it so she got in her car and took off. She asked me not to tell Dad yet. Actually she took it pretty calmly,\" Jade said. She was somewhat surprised about her mother's reaction. Jade thought her mother's reaction might have been greater, but apparently not.\n\n\"Alright, that doesn't sound too bad. Compared to some of the coming out stories I've heard, I think you just might be okay.\"\n\n\"I hope so. Tell me baby, what are you wearing right now?\" Jade suddenly asked, her voice becoming lustful.\n\n\"I just got home so I'm still wearing my lilac skirt with the matching blouse,\" Terry told Jade. She knew where this game was going.\n\n\"I want you to take off all your clothes for me please,\" Jade told her in a low, urgent voice. She heard Terry struggling to get the garments off.\n\n\"Okay they're all off,\" Terry announced.\n\n\"If you're not in the bedroom, please go there and get on the bed,\" Jade requested. Terry did as she was asked. When she confirmed that she was on the bed, Jade continued.\n\n\"Baby, I want you to stroke your clit for me, stroke it until you orgasm. I want to hear your release. Will you do that for me please?\"\n\n\"Yes love, I'll do that for you,\" Terry said, her voice quickly being as lusty as Jade's. Quickly finding a hand towel, she returned to the bed. Her clit was already hard and she was wet just from the way Jade's voice sounded; so full of desire for her.\n\nSlowly she began to caress her clit tenderly, moving slowly over the length of it, her thumb giving special attention to the head, moaning all the while for her lover to hear. It didn't take long for Terry to achieve release, her clit being so sensitive. Terry cried out as her fluids shot out. In a way, Terry wished she didn't have the towel to catch most of her orgasm, she so wanted to feel as if Jade was truly with her. Still, it was just as delicious to her as it was to Jade.\n\nShe was breathing hard but heard Jade's moans over the phone.\n\n\"Jade, love?\" Terry questioned when she caught her breath.\n\n\"I'm here baby,\" Jade answered her voice strained. Terry could picture what her love was doing.\n\n\"Are you close love?\" Terry asked.\n\n\"God yes baby. Soon, very soon,\" Jade replied. She had been working her own clit in time with Terry and was just about at her peak.\n\n\"Jade, I love you and I'm hard for you again,\" Terry told her. The image of Terry's aroused body was just what Jade needed, the erotic words like magic to Jade's lusting. With a mantra of I love you, Jade's orgasm swept through her. So did Terry's again, and hard.\n\nChapter 22\n\nAfter hanging up with Terry, Jade went to the bathroom and cleaned herself up. She dressed and went back to the kitchen to see if the stew was done. To her surprise she found her mother sitting at the table.\n\nFor a moment, Jade wondered how long her mom had been back and if she'd overheard her having phone sex with Terry. She couldn't tell; Julia was and had always been, unreadable.\n\nJade crossed the room and poured herself some juice from the fridge. She sat opposite her mother and nervously waited for what was to come. In a soft voice Julia started.\n\n\"I came back because I had some questions I wanted to ask you but I have all the answers I need,\" Julia said, a small smile playing at her lips.\n\nJade flushed crimson; she'd heard it all, or enough to know of how it was with her and Terry.\n\n\"Mom, I\u2015\" Jade began but Julia reached for Jade's hand across the table and shook her head.\n\n\"I may not always understand or approve of all the decisions you or Robbie made in your lives but the thing is, it's your lives and you both must live them to suit you, regardless of what anyone thinks. I want you to be happy and if what I overheard was any indication, then I have no choice but to accept this woman who brings you so much pleasure.\"\n\nRelief flooded Jade to the point of tears wanting to start.\n\n\"Thank you, Mom,\" she whispered, her voice choking.\n\n\"You're welcome, but precious, we must handle things delicately with your father. I think it's best if I tell him. If you'll take Robbie with you after dinner, perhaps to the park and tell him, that'll give me time to talk to your father. Robbie loves you dearly and has a few gay friends so he shouldn't take it in a bad way. Try to give your father and me a couple of hours; I'll soften him up and then tell him. He usually takes shocking news better after a tumble.\"\n\n\"Mom, please. I really don't need to know about that,\" Jade said shocked that her mother would be so casual.\n\n\"Oh precious really\u2015after what I overheard? You do know that your father and I still have sex, don't you?\" Julia more said than questioned with a mischievous smile.\n\nJade covered her face with her hands and groaned realizing that her mother was just teasing\u2015or was she? She wasn't sure. Still she was happy to know that her new lifestyle had not damaged their relationship.\n\n\"Alright my precious, tell me about this woman that has you so enthralled,\" Julia said.\n\n\"Oh Mom, she is just the most beautiful person I've ever known. Every day I'm with her, I fall even more in love with her\u2015if that's even possible,\" Jade said.\n\nJulia smiled at Jade's dreamy-like expression.\n\n\"Her family, do they know and approve of the both of you?\"\n\n\"I'm afraid she doesn't have any. Her mother died when she was at college and her father left when she was a baby. No siblings that she knows of and no other relatives either.\"\n\n\"So what does she do for a living?\"\n\n\"She's an accountant and owns her own accounting business,\" Jade answered proudly.\n\n\"So how did you meet this remarkable woman?\"\n\n\"Well remember I told you I was staying with Paula until I found a place of my own?\" \n\n\"Yes,\" Julia answered.\n\n\"Well Paula invited me out with some of her friends one night. Terry was one of those friends and after we started talking, we discovered we had similar interests. We started going out, dating, and well I fell for her and her with me,\" Jade ended, skimming over the more salacious details that caused her and Terry's meeting.\n\n\"Alright, what about future plans? Have you thought this whole thing through, what it means to be gay in this society?\"\n\n\"We've talked about it a lot and we know how hard it can be but we are committed to each other and the way we feel so there's no turning back.\"\n\nJulia could see the conviction in her daughter.\n\n\"What about children? Am I going to get a grandchild from you? I know there are options for gay couples these days.\"\n\n\"We haven't discussed it yet but when we do I promise you'll be the first to know of our decisions,\" Jade assured her mother. \n\n\"Thank you; that would be nice of you. When will you bring her to meet us?\"\n\n\"If things go well with Dad and Robbie then I'll talk to her and work something out,\" Jade said, not committing to anything.\n\n\"You think Daddy will really be okay with this\u2015with me? What if he doesn't agree? And what is Nana and Granddad gonna say when they find out?\" Jade worried.",
        "Julia stood and went to Jade. She held her close and tried to think of something comforting to say.\n\n\"I don't know precious. They weren't too fond of me at first but they came to accept me, perhaps they will with your Terry too.\"\n\n\"Do you think Oba and Oji would have approved?\" Jade asked referring to her mother's deceased parents.\n\n\"From what you've told me about Terry and how much you both love each other, I think they would,\" Julia assured her.\n\nWhen her father and brother came home they both hugged and kissed Jade, happy to have her with them again. Dinner was light and comfortable just as it was when she was younger.\n\nHowever Jade couldn't help but worry about how her father would take the news as she and Robbie left.\n\n* * * *\n\nLuckily, the park was fairly deserted.\n\n\"So my big, little sis, what's up?\" Robbie asked using the pet name he had given Jade since he had gotten taller than her.\n\n\"Why does something have to be up my little, big brother?\" Jade replied as they made their way to the swing sets.\n\n\"Something's up because I know you. You wouldn't just bring me out here to catch up, so spill.\"\n\n\"Okay, okay, I do have something to tell you, something big. I met someone and I'm deeply in love.\"\n\n\"That's great Jade. I gotta tell ya, I never really liked Michael. He was nice, don't get me wrong but you two never really had that much chemistry, at least in my opinion. So who's the lucky guy?\"\n\nJade took a deep breath and decided to just say it.\n\n\"It's not a guy, it's a woman,\" she paused and waited for Robbie's reaction. His eyebrows went up in surprise and she could see the wheels turning in his mind. After a long pause he spoke.\n\n\"Hot damn, I never saw that coming.\"\n\nThere was another long pause before he asked, \"You happy with her?\"\n\n\"More than I ever dreamed possible,\" Jade replied.\n\n\"Alright then, as long as you are happy then I'm all for it,\" Robbie replied with a huge grin.\n\nJade jumped off of her swing and dove into his arms. Luckily, Robbie seemed to anticipate her, and came up quickly too. They hugged for a long moment, Jade exulting in Robbie's acceptance of Terry.\n\n\"So got a pic of her?\" Robbie asked once they had separated and were again seated.\n\n\"Yes, of course,\" Jade answered. She quickly pulled out her cell phone and pulled up the most recent picture of Terry she had.\n\n\"Damn sis, she's hot\u2015smoking hot! What's her name and how the hell did you managed to hook a babe like that?\" Robbie teased as he ogled the picture.\n\n\"Terry Matthews and just lucky I guess. What, are you jealous?\"\n\n\"Hell yes, my sister gets to tap all of that,\" he grinned, \"Seriously though, she is very pretty and I'm extremely happy for you,\" Robbie told her.\n\n\"Thank you Rob, that means so much.\"\n\n\"I take it that you haven't told Mom and Dad yet?\"\n\n\"I told Mom and she's telling Dad now. She took it okay enough but I don't know how he's gonna take it. I'm a little scared Rob. What if he hates me because of...?\" she left the question hanging, feeling a sudden fear.\n\n\"Hey, I know it's hard, the not knowing, but it'll be okay. Dad will probably be okay with it, especially if Mom has anything to say about it.\"\n\nThey continued talking with Robbie wanting to know everything about how Jade had met Terry. They caught up on their work, their lives and Robbie's own girlfriend that he adored.\n\n\"Her name's Margaret and I think she's the one. I'll introduce you tomorrow.\"\n\n\"I'd like that very much.\"\n\n\"Hey, are you that serious about her? I mean ring serious?\"\n\nJade nodded.\n\n\"Well if that's the case, I've got a friend that owns a jewelry shop in town; I can take you there tomorrow and see if anything jumps out at you. He'll even give you a good price. Do you know her ring size?\"\n\nJade smiled sheepishly, \"I've been thinking about proposing for a little while now, I, um, measured her finger one night while she was asleep.\"\n\n\"Clever sis and sneaky too,\" Robbie grinned.\n\n\"Glad you think so, and thanks Rob, you're the best to help me like this.\"\n\n\"Anything for my big little sis, you know that. Well it's late, I think we should head back,\" Robbie suggested and Jade agreed.\n\n* * * *\n\nTheir father was waiting for them. Robert O'Connor Senior was a large and imposing man with dark hair, green eyes and strong facial features. Being over six feet tall, he and his wife looked quite the odd couple.\n\nUnlike Robbie, who was the spitting image of Robert, Jade had only inherited some of her father's height and his skin color. None who saw them could ever tell that she was his daughter.\n\n\"Hi, Daddy,\" she said using her little girl endearment she never quite grew out of as she kissed his cheek.\n\n\"Hi yourself, beautiful,\" he said as he usually did. \"We need to talk, huh?\"\n\nNervously, Jade nodded, then said, \"If you're ready.\"\n\nJulia and Robbie had left so they could talk.\n\n\"I'm ready. Sit down, let's talk a minute.\"\n\nJade sat down, her fingers wanting to do something, but she controlled them.\n\n\"Your mother says you're in love again, but this time with another woman. Right?\"\n\n\"Yes, Daddy,\" she whispered softly.\n\n\"And that you two are living together?\" Jade nodded.\n\n\"Is this something that you're sure of Jade? Have you always felt attracted to women or is it just this particular woman?\" Robert asked.\n\n\"I think it's just her. I've been around other women, very beautiful women, but I've never felt anything for any of them,\" Jade answered.\n\n\"How long have you two been together?\"\n\n\"Almost nine months now.\"\n\n\"And you waited so long to tell us? Did you think we'd abandon you? Disown you?\"\n\n\"No, I don't know Daddy. It was all so new. I didn't expect to fall in love with her but I am, deeply in love, and she loves me just as deeply. She's all I think about when I'm not with her and when I am with her I feel complete. Do you know what I mean?\" \n\n\"Yes,\" her father said with a smile remembering he felt the same way when he had met Julia. \"What are your future plans?\" he asked.\n\n\"I want to marry her. I know there's a lot of debates about the right and wrong of it, but I want to do it. I'm going to propose to her when I get back home and I have no doubt that she'll accept.\"\n\n\"I take it you told Robbie and he's okay with it?\"\n\n\"Yes Daddy.\"\n\n\"Alright, but we want to meet her before you propose. That is my only condition before I give you my blessing,\" Her father said with a crooked grin.\n\nJade was shocked speechless but recovered enough to hug her father tightly as she cried tears of happiness and relief into his neck and shoulder.\n\nChapter 23\n\nIt was very late when Jade finally crawled into bed. She was so happy about the turn of events that she couldn't wait to call Terry.\n\n\"Hello,\" Terry's sleep laden voice answered.\n\n\"Hi baby.\"\n\n\"Jade, what's wrong? Why are you calling so late?\" Terry asked as she yawned loudly.\n\n\"Nothing's wrong, in fact everything's right. My parents are okay with us and I couldn't wait to call and tell you.\"\n\n\"That's nice love,\" Terry answered sounding like she was falling asleep again.\n\n\"Okay baby you go to sleep and I'll talk to you tomorrow.\"\n\n\"Okay, I love you,\" Terry said softly as she drifted off.\n\n* * * *\n\nThe next morning Jade awoke to her cell phone ringing.\n\n\"Hello.\"\n\n\"Love, was I dreaming last night or did you call and tell me that your parents were okay with us?\"\n\n\"No dream baby, it was all real. My parents are happy I've found love again,\" Jade answered coming fully awake at the sound of Terry's voice.\n\n\"That's wonderful love. I was worried but I'm so happy for you. What about your brother?\"\n\n\"Oh he's good with things too. He thinks you're hot, which of course you are,\" Jade said and giggled.\n\n\"Hmm, you've been showing pictures of me to your family?\" Terry asked.\n\n\"Only Robbie asked and yes I showed him one from my phone.\"\n\n\"I hope it was a picture of my good side.\"\n\n\"Baby all of your sides are good,\" Jade told her in a husky tone, \"Hey sorry about waking you up last night,\" Jade continued.\n\n\"It's okay, it was important after all.\"\n\n\"Thank you baby. Now that you've awaken me, how about making my day. Tell me, what are you wearing now?\"\n\n\"Oh, love, is that all you think about?\" Terry laughed softly her voice filled with her love for Jade and her growing lust too.\n\n\"Always, my beautiful baby; I need a taste of your sweet love to keep me from going crazy from missing you,\" Jade begged.\n\n\"Mm, my only love, if you must know, I'm sitting on our bed and I'm completely naked after just having stroked my clit to orgasm while thinking of you,\" Terry said in a sultry voice. Jade moaned at the mental picture as her hand started to descend into her panties to rub herself.\n\n\"Are you hot and wet for me right now?\" Terry asked.\n\n\"Oh god yes,\" Jade hissed as one of her fingers parted her folds. She was dripping already. It excited her to no end; Terry's new level of sexuality that seemed to keep growing and growing, not to mention how at times she would take charge like this. It thrilled and captivated Jade so completely. She loved how Terry had opened up so sweetly under their love.\n\n\"Are you touching yourself?\"\n\n\"Mm-hmm,\" Jade answered as she touched her clitoral area sending a jolt of pleasure surging through her body.\n\n\"Are you going to rub your clit and cum for me love?\" Terry asked.\n\n\"Oh Terry, yes baby, yes,\" Jade answered as her finger rubbed her now engorged clit.\n\n\"Tell me what you're doing right now.\"\n\n\"I'm caressing my clit,\" Jade whispered.\n\n\"I want you to stop and push two fingers inside yourself,\" Terry told her. Jade did it and moaned at the penetration.\n\n\"I want you to work them in and out slowly until you're just about at your peak.\"\n\nJade continued for several minutes while Terry kept talking so sexily to her. Jade finally announced that she was feeling that familiar tingle in her lower back.\n\n\"Love, take your fingers out and rub your clit hard and fast for me, I want to hear your climax.\"\n\nJade did exactly that as the pressure on her body became unbearable. Trying her best not to scream and alert the rest of the house, Jade turned into her pillow so only Terry could hear her. She grunted and groaned as the strong orgasm rocked her mind and body fiercely. It was amazing how she sensed her mouth as if it had Terry's magnificently sexy clit in it.\n\nBreathing hard from her euphoric bliss, she heard Terry's asking if she was okay.\n\n\"I'm fine baby, but have I told you lately that I love you?\" Jade managed to say.\n\n\"Not since yesterday,\" Terry answered. \"That was a very sweet orgasm, love. You made me want to be with you right now.\"\n\nJade loved what Terry told her. \"Baby, were you really naked and just had an orgasm?\" Jade queried her. She heard Terry giggle.\n\n\"No, I Just wanted to see what you would do if you thought I was,\" Terry answered in a fit of giggles.\n\n\"Oh, you are so going to pay for that when I get back home,\" Jade warned but laughed.\n\n\"I might just pay for it now, you've made me hard.\"\n\n\"Mmmmm, just the way I like you; I wish I was there to take care of it for you, baby,\" Jade said with heat as she pictured placing her mouth on Terry's hard enlarged clit, sucking her and having her spraying her lovely juices down Jade's throat.\n\n\"Oh love, as much as I'd love to stay and play with you, I have a breakfast date,\" Terry said wistfully.\n\n\"Oh, I'm out of town for one day and you've already found someone else to date?\" Jade joked.\n\n\"Yes, and if I play my cards right I'll be having hot monkey sex later.\"\n\n\"Without me? Oh you wouldn't dare!\" Jade said in mock sternness.\n\n\"And what if I do, what will you do to me, or should I say, for me?\" Terry challenged, but with an excited hitch in her breathing.\n\n\"I'm gonna come home and tie you to the bed and tease and tantalize you until you beg me to give you release,\" Jade answered in a lusty growl.\n\n\"Oh promises, promises,\" Terry laughed, but with her voice having a strain in it that Jade knew was Terry's need for sex with her. Still Jade laughed too, her own voice much as Terry's.\n\n\"Seriously, if I don't get going I'll be late,\" Terry said with regret.\n\n\"Then by all means my love go; I'll talk to you tonight,\" Jade told her. She knew Terry had made breakfast plans with one of her friends.\n\n\"Thanks love. Until tonight, I love you and I'll be naked and waiting.\" Jade groaned but before she could reply, Terry laughed softly and was gone. Jade chuckled as she put down her phone and stretched.\n\nShe dressed and after a quick stop at the bathroom she went to the kitchen. Julia was already hard at work with breakfast, cooking eggs, bacon and hash browns.\n\n\"Good morning, can I help?\"\n\n\"Morning precious, and yes, you can get the toast done,\" Julia told her as she stirred the eggs.\n\nJade set the toast and got some coffee just as her father came in and sat. Jade poured him some coffee and retrieved the first batch of toast and set another.\n\nBy the time Robbie joined them, the food was all laid out so they all dug in.\n\n\"So what are your plans for today?\" Robert asked Jade.\n\n\"Well, Robbie promised to introduce me to his girlfriend and I thought I'd go pick up a little something for Terry,\" Jade replied.\n\n\"That's good,\" Robert commented.\n\n\"What kind of something are you picking up?\" Julia asked, knowing full well Jade had something up her sleeve.\n\n\"Just a souvenir Mom, nothing special.\"\n\n\"Uh-huh,\" Julia replied not believing Jade for a second but she let it go for now.\n\n* * * *\n\nBreakfast ended and Robbie drove Jade into town. He chatted excitedly about Margaret, telling Jade that she owned the small roadside caf\u00e9.\n\nJade followed her brother through the front door of The Salt and Pepper Caf\u00e9. She watched as Robbie went up to a woman who was somewhat older than she expected, and embraced her warmly.\n\n\"Mags, this is Jade,\" Robbie said smiling brightly.\n\n\"Nice to meet you Jade. Robbie talks about you non-stop,\" she said. She had a smile that lit up her whole face.\n\nJade was stunned. Robbie was only twenty five and yet he was in love with and dating a woman that was fairly older than he was.\n\n\"Rob will you go down to the market for me please, I need a few things? I'll keep Jade entertained.\"\n\n\"Sure babe,\" Robbie replied happily. Margaret gave him a list and he was on his way. Margaret led Jade to her office in the back where they'd have some privacy.\n\n\"I take it this is a bit of a shock for you,\" Margaret opened. Jade liked that she seemed to be a pretty frank woman.\n\n\"Yes, I must say, Robbie never mentioned that you were older than he is,\" Jade told her. That got Margaret laughing. It was like listening to sweet music; the way Margaret's voice sounded. Jade loved it.\n\n\"Yes, older, I like that, but it's okay to say that I'm old.\"\n\n\"Well, I don't want to offend in any way.\"\n\n\"Thank you, I appreciate that. Just for the record, I'm thirty seven, twelve years ahead of him.\"\n\n\"Hmm, ten ahead of me. Tell me honestly Margaret, do you love my little brother?\"\n\n\"More than I've ever loved anyone else in my life,\" Margaret said looking Jade squarely in the eyes. Jade could see no deception there. This woman really did love her brother deeply.\n\nThey continued to talk honestly and quietly until Robbie returned. Jade watched how happy her brother was and she could see why. Margaret had this natural warmth to her personality that just drew people to her. Jade could see how devoted they were to each other. By the time they left the caf\u00e9, Jade was looking forward to having her as a sister-in-law.\n\n* * * *\n\nAfter a bit of persuasion on Robbie's part, Margaret agreed to accompany the siblings to Robbie's friend Dale, the jeweler. The trio spent the better part of an hour looking over the most popular styles of engagement rings available.\n\nThe rings were all beautiful but none seemed to fit what Terry would, or should wear, at least in Jade's opinion. She noticed that both Robbie and Margaret seemed enthralled with a lovely platinum ring with a large diamond in the center and twelve smaller stones set at six on either side of the center piece.\n\nIt was a very nice ring and would look good on Margaret's hand but it was not for Terry. Jade was about to call it a day when something in the corner display case caught her eye.\n\nIt was just striking. The center stone was surrounded by six smaller stones; three on either side. The pattern of the smaller stones were triangular, with two sitting side by side next to the large stone and the third sitting by itself after the first two.\n\nThe ring band itself was slender giving the whole ring a look of elegance but in a quaint sort of way. It was like Jade could hear a chorus of voices singing just how perfect the ring was\u2015it was Terry's ring.\n\n\"What's got you smiling like the Cheshire cat?\" Robbie asked as he and Margaret joined Jade at the display.\n\n\"There,\" Jade pointed.\n\n\"Oh my, it's simply breath taking,\" Margaret said in an awed voice.\n\n\"So it's not just me thinking that then?\" Jade asked.\n\n\"No way, it's gorgeous,\" Margaret replied.\n\n\"Does that look like something your Terry would like?\" Robbie asked.\n\n\"Oh yes, it's definitely her.\"\n\n\"I see this beauty has caught your eye,\" came Dale's voice behind the trio, \"would you like to see it?\"\n\n\"Yes please,\" Jade said eagerly.\n\nDale explained that the ring's design was an antique. The stones were diamonds set in platinum and quite expensive. It would put a small dent in Jade's bank account, but there was no way she was leaving without that ring.\n\n* * * *\n\nJulia was waiting patiently for Jade's return. As soon as Jade entered the house, Julia stepped up to her daughter and held out her hand.\n\n\"Let's see it.\"\n\n\"Um, see what Mom?\" Jade asked sheepishly.\n\n\"Don't even try it. I know you and I'll bet the entire house that you went out and bought an engagement ring. So produce it young lady,\" Julia said, her voice stern but a smile playing at the corners of her lips.\n\n\"How do you always know Mom?\" Jade asked as she handed over the small velvet box.\n\n\"All part of being a mom, someday you'll know,\" Julia said as she popped open the box.\n\n\"Oh my god! Precious, it's exquisite. Well you've always had great taste so I'm not totally surprised,\" Julia said proudly.\n\n\"Thanks Mom.\"\n\nJulia reminded Jade of her promise for the family to meet Terry before any proposal was made. Jade assured her mother she would comply and asked her mother to hold on to the ring for her until she needed it.\n\nJade spent the rest of the weekend getting reacquainted with the neighborhood and the few friends she had during high school who still lived there. It had been almost two years since her last visit and Jade was surprised at how some things had remained the same while others were so very different. The friends and people she had known from school who stayed all seemed to be happy with their quaint suburban lives and Jade smiled thinking that she was just like them too living with and loving Terry.\n\nBy Sunday afternoon, Jade said goodbye to her family until her next visit, one where Terry would be joining her. Though happy to be with her family, Jade was looking forward to returning home to the arms of her love.\n\nChapter 24\n\nJade felt a rush of excitement as she parked in front of her house. Not bothering with the garage, Jade rushed to the front door, hurriedly unlocking it and quickly closing it behind her. She was expecting to find Terry waiting for her in the living room but she was not there.\n\n\"Terry, baby?\" Jade called as she made her way up the stairs. Jade entered her bedroom and both her bag and her jaw dropped. The bedroom lights were dimmed and standing next to the bed was Terry, dressed in the sexiest outfit Jade had ever seen.\n\nTerry's breasts were incased in a strapless, lacy, white, bra styled top that was held together in the front with a crisscross of ribbons. She was also wearing a matching lacy white micro mini skirt that did very little to disguise the outline of her clit that was incased in white French cut panties that helped to outline that lovely clit of hers.",
        "\"Oh my god!\" Jade managed to get out. She licked her suddenly dry lips at the sight before her.\n\nTerry's hands were balled into fists at her sides. She was extremely nervous since she had never done anything like this before. She had debated all afternoon whether or not this was a good idea and if Jade would like it. She needn't have worried because from the look of hunger on Jade's face, she loved how Terry looked.\n\n\"Welcome home,\" Terry said softly, her voice thick with tension. Jade realized Terry's discomfort and felt a surge of pride and unwavering love. Even though it was hard for her to do this, she still did it all for Jade.\n\n\"Baby,\" Jade had to clear her throat because her voice was overcome with emotion that made her stumble, \"you look incredible. If this is what I get to come back to then I need to go out of town more often,\" Jade told her love with a salacious grin.\n\n\"You like it?\" Terry asked still not sure if this was such a great idea.\n\n\"I love it and I love you,\" Jade answered as she crossed the floor and took Terry in her arms. She kissed her love long and passionately until both had to stop so they could breathe.\n\n\"Want to know how much I love how you look,\" Jade asked as she unbuttoned and unzipped her jeans. She took Terry's hand and slipped it into her panties so Terry could feel how wet she was and how much her pussy lips were swollen with arousal.\n\n\"Just the sight of you did this to me,\" Jade announced as she began rubbing her pussy against Terry's hand. Terry didn't need any instructions as she pulled Jade tightly to her and began working her fingers against Jade clit.\n\nTerry bent her head and began nibbling on Jade's neck. Jade moaned as Terry's finger slipped lower and into her needy core.\n\n\"God\u2015yes baby, right there, just like that,\" Jade cooed as Terry's thumb gently rubbed her clit and three fingers moved in and out of Jade's body.\n\nJade's knees started to buckle as the pleasurable sensations overtook her. They were close to the bed and Terry managed to guide them to it before they ended up on the floor.\n\nLying Jade on her back, Terry continued thrusting her fingers as Jade's orgasm swept through her. Terry removed her fingers and licked Jade's sweet juices that coated her hand. She pulled the wet jeans and panties down to Jade's ankles, bent her legs sideways, and buried her tongue between Jade's folds, lapping up all that remained.\n\nTerry kissed her way up Jade's body, pausing to remove the rest of Jade's clothes, and also to enjoy those glorious breasts and sexy nipples of hers. By the time she reached Jade's lips, Jade's breathing was somewhat normal again and she took control of the kiss.\n\nJade rolled Terry on her back and paused briefly to remove her shoes, jeans and panties before she pounced on Terry.\n\nTerry's nipples were poking out through the lacy material and Jade couldn't help but suck on those hard nubs through the fabric. She bit gently on the left one as her hand dipped under the skirt to stroke Terry's engorged clit.\n\nJade could feel a wet spot on Terry's panties. Her finger tips expertly rubbed small circles on Terry's clit causing her to cry out.\n\n\"Do you know how hot you look, how sexy you are?\" Jade whispered into Terry's ear, then she lightly bit the lobe causing Terry to gasp. Jade continued to lick, nibble and bite Terry's already heated skin, going from her neck down to her stomach and then down to her inner thighs. She hooked her thumbs in Terry's panties and pulled them down and off.\n\nTerry's clit sprang upward, making a tent in the micro skirt. Jade raised the fabric up and licked her way up and down the sensitive shaft, avoiding the tip. Terry was panting hard and clawing the bed sheets.\n\n\"Look at me baby,\" Jade requested. Their eyes locked as Jade took the tip of the clit in her mouth. Terry's eyes glazed over with pleasure as Jade's tongue did wonderful things to her oversensitive organ. With just a few swipes of her tongue and ample suction, Terry's clit pulsed and she emptied her cum into Jade's waiting mouth.\n\nJade drank down the precious liquid not letting any of it spill. In the last three months she had become an expert in drinking down all that Terry had to offer, even with multiple orgasms. Letting go of the clit, Jade licked Terry's pussy lips clean of any escaped liquid and then crawled up beside Terry and held her close, enjoying the post orgasmic bliss.\n\nThey slept for a short time with Terry waking first. She was still wearing her bra top and the skirt. Jade was completely naked and Terry snuggled into that heavenly body. She couldn't resist cupping Jade's breast and softly kissing the plump nipple.\n\n\"Umm that's nice,\" A sleepy Jade said as she wrapped her arms tightly around Terry. She kissed Terry's sweet lips as her hands caressed the soft fabric of Terry's lacy top.\n\n\"Hon, where did you get this outfit?\"\n\n\"Yesterday when I was out with Abby, we went shopping and she dragged me with her to get some lingerie to wear for her husband since it's their anniversary soon. Anyway, I saw this in the display and I asked one of the sales people about it.\n\n\"They offered for me to try it on but you know there was no way I was going to do that so I just gave them my bra and panty size. Do I really look good in this stuff?\" Terry asked, her insecurity surfacing again.\n\n\"Oh yes baby, you are so gorgeous in it. So very, very sexy too,\" Jade assured her.\n\n\"Well you certainly seemed to like it,\" Terry said as she stroked Jade's tummy lovingly.\n\n\"I loved it; it was the most wonderful surprise I could have come home to,\" Jade said with a huge grin.\n\nThey kissed each other softly while gently caressing each other's body. It wasn't to start anything but more for the comfort of being together again. They had only been apart for two days but it felt like much longer.\n\nThey reaffirmed their love under the shower spray, getting lost in the hot soapy intimacy. They made slow, soft, sweet love, mostly Jade luxuriating in the sounds of Terry as she tortured her clit with a host of touches that drove Terry wild.\n\nChapter 25\n\nBy the time they dried off and slipped into their robes, both were famished. Terry had cooked lasagna so they dug into it with a bottle of wine while Jade gave Terry a full account of all that happened during her trip\u2015minus the ring purchase of course.\n\n\"I was really shocked at how well my parents took the news. I thought for sure at least one of them would try to talk me out of this lifestyle, as many call it or something like that. My only concern now is my grandparents. I have no idea how they are going to take this and who is even going to tell them,\" Jade said as she sipped her wine.\n\n\"Well I have no experience dealing with grandparents so I can't offer any advice for you love,\" Terry told her.\n\n\"That's okay baby, it'll work out somehow.\" Jade paused briefly, then brought up the question of meeting her parents, \"Baby, my parents really want to meet you. I didn't make any promises about when but I told them we'd talk it over and decide something.\" \n\n\"Thank you for that love. I've never met any parents before so I'm afraid I have no idea what to expect, and to be honest, that makes me nervous,\" Terry confided.\n\n\"It is a scary notion. I remember when I met Michael's parents; it was nerve racking. They were nice though, and I relaxed after the first fifteen minutes. My parents and my brother are good people so it'll be okay, I promise.\"\n\n\"I know I shouldn't worry but I can't help it.\"\n\n\"It's alright hon, I'll be with you every step of the way.\"\n\n\"You sure about that? What if your mom or your dad wants to have a serious talk with me alone?\" Terry asked, feeling slightly foolish at her asking.\n\n\"Then you'll hear them out and if you don't like it then we'll pack up and leave at once.\"\n\n\"As nice as that sounds love, I don't want to be the cause of any problems between you and your family,\" Terry told her.\n\n\"Baby, you are my world. If my family doesn't understand and accept that then they'll be the ones forcing me to choose, not you. You know if push comes to shove baby, you're my number one, always,\" Jade kissed Terry softly as if to seal her words with it. \n\n\"So when do you think you might like to go?\" Jade asked.\n\n\"I don't know. They're your parents so why don't you choose,\" she said, still feeling anxiety over the whole thing.\n\n\"Alright. How about in a month? We can make a weekend of it. Leave Friday afternoon and come back by Sunday?\" Jade suggested.\n\n\"Sure, that sounds good,\" Terry agreed with a small smile. Jade could tell that she was still apprehensive about the visit but Jade vowed she'd do everything she could to help Terry to feel comfortable about the trip.\n\nWhen they slipped into bed, Jade took the opportunity to calm Terry's nerves with special and very loving attentions to her magnificent body. Just before they finally slept, Jade heard a sigh of contentment from Terry. It was every bit as sweet as all of her moans before that. Jade snuggled happily with Terry as they fell asleep.\n\n* * * *\n\nThe month seemed to fly by, and before Terry knew it, she was boarding a plane with her love on their way to meet what was the equivalent of in-laws. It was a prospect that filled Terry with a certain amount of dread.\n\nThe vast number of 'what if's' crossed her mind repeatedly. What if they didn't like her? What if they thought she wasn't good enough for Jade? What if her secret were to be discovered? What if\u2015\n\n\"Baby please relax, you're cutting off my circulation,\" Jade said with a small smile. With all her worries, Terry didn't realize she was gripping Jade's hand so tightly.\n\n\"I'm trying but\u2015\"\n\n\"I know baby. It's okay,\" Jade tried to console her. She really wanted to take Terry in her arms and kiss away all her fears but she dared not in such a public and confined setting as a plane full of people. Jade had to settle for gently stroking Terry's hand and hoped it helped.\n\nTheir plane landed in good time and they quickly found a taxi. It was just a twenty minute ride from the airport to Jade's childhood home. She held Terry's shaking hand all the way until they were in front of the O'Connor's front door.\n\nIt was mid-afternoon and the streets were clear and the surrounding neighbors inside their homes or still at work. Since there might be one or two peeking out from behind their curtains, Terry needed the reassurance so Jade chanced a quick kiss and a small hug.\n\nIt seemed to help a little as Terry smiled, albeit weakly.\n\nJade retrieved the key she still kept for her parents' home. She slipped it into the lock and smiled at Terry, \"I love you baby.\"\n\n\"I love you too,\" Terry said her voice a tad shaky with nerves.\n\nJade unlocked the door and led Terry inside. The house was inviting with it's simple but lovely decor. The living room was spacious in its design and comfortable for any who spent time there. Terry could detect the smell of cinnamon throughout the house as Jade placed their bags to one side and led Terry through a door to the kitchen.\n\nThis room too was warm and homey. The cinnamon scent was strongest here and on the table Terry could see why; a plate of cookies that looked freshly baked.\n\nThe small woman who was standing at the sink seemed unaware of their presence as she dutifully washed the dishes. Terry felt her heart speed up wildly; this was the moment of truth.\n\n\"Hi Mom,\" Jade said causing her mother to turn, her face breaking into the widest smile.\n\n\"Hello precious, welcome back,\" she said as she dried her hands and reached for Jade. They hugged and Jade kissed her mother's cheek.\n\n\"Mom, this is Terry Matthews,\" Jade introduced as she took Terry's hand and drew her love to her side.\n\n\"Hello Mrs. O'Connor, it's nice to meet you,\" Terry said as she extended her hand, her voice thick with her nervousness.\n\n\"Hello Terry; it's nice to meet you too and welcome. Please call me Julia,\" she told her with a warm smile as she accepted the offered hand. She saw the anxiety in Terry's eyes and heard it plainly in her voice.\n\nJulia was nervous too, after all it wasn't everyday that your formerly straight daughter brought her girlfriend home. Julia however hid her nervousness much better than Terry seemed able to.\n\n\"I'm so happy you're both here,\" Julia said. Terry could hear the sincerity in Julia's voice along with her smile and knew that she meant it.\n\n\"I baked some cinnamon sugar cookies, how about we sit with some milk and have some\u2015oh, do you drink milk?\" she asked, looking at Terry.\n\n\"Yes, thank you. That sounds nice.\"\n\n\"Jade and her brother have always loved my cookies and some milk; I hope you enjoy them as much as they do.\"\n\nJade and Terry sat next to each other, Julia sat opposite them, each taking a cookie. Jade was thinking of how else she could help Terry feel more at ease, but she had to admit that her mother did that for her like no one else could.\n\nFor herself, Julia couldn't help but admit that her daughter's choice was indeed a sweet and beautiful looking woman.\n\nWhen Jade had told of her relationship with a woman the previous month, Julia was half expecting to have Jade bring home one of those very masculine type women. Like many people, she had a stereotypical view of how a lesbian looked and acted. This woman was elegant and very feminine.\n\n\"How was the flight out?\" Julia asked.\n\n\"It was fine Mom,\" Jade answered.\n\n\"Terry, Jade tells me you're an accountant; that must be interesting.\"\n\n\"Not really Mrs.\u2015uh\u2015Julia. Just a lot of numbers day in and day out,\" Terry said her voice tightening a little.\n\n\"Jade also told me you own your own business so that must keep you busy?\"\n\n\"A little bit yes but it's all still very dull, and fortunately I do have some excellent help.\"\n\n\"Was accounting something you had always been interested in?\" Julia asked. She did sense Terry's tenseness and hoped she wasn't adding too much to her discomfort.\n\n\"No, I\u2015I wanted to study photography but that didn't work out and I had always been good with numbers, so I just went with what would make me successful,\" Terry said a bit of sadness in her voice. Jade had heard this story before. Terry still had a passion for taking pictures but now it was only a hobby.\n\n\"I'm sure you would have made a wonderful photographer,\" Julia said reassuringly. She too recognized the sadness in Terry's voice about the road not taken.\n\nJulia continued asking non-intrusive questions and Terry began to relax. When Julia started dinner, Terry offered to help and Jade smiled, this was something they could bond on, which they did.\n\nRobbie came in first, rushing into the house a full hour before his normal arrival time. His face broke into a big goofy grin when he set his eyes on Terry.\n\n\"Terry, my baby brother Robbie,\" Jade introduced.\n\n\"Awe come on Jade, did you have to say I'm your baby brother? You could have said 'this is my very handsome brother',\" Robbie complained as he shook Terry's hand and winked at her. Any apprehension Terry had about meeting Robbie quickly melted as his easy going manner and sense of humor made her relax.\n\nIn the living room, Robbie was telling about Jade and his childhood when Robert came home. He was a big man and gave off an air of seriousness that swiftly made Terry feel uneasy.\n\nJulia stood and went to him taking his work bag. He bent and kissed her gently, wrapping a massive arm around her briefly. As Julia went to put his bag away, Robert stepped further into the room as he appraised the woman who held his daughter's hand.\n\n\"Good evening,\" Robert said, unsure of exactly how he should behave. When his daughter had brought home Michael, he had been the strong, protective father who gave the 'if you hurt my daughter you'll be in trouble' speech, but this was a completely different scenario.\n\nWhen Robbie had introduced Margaret to them, he had been courteous and welcomed her, he did not need to be a protector then but Jade was his little girl. His instincts were to give any pursuers a hard time but this lovely young woman looked like she was going to be sick. Robert could feel her tension from across the room.\n\n\"Hey Dad,\" Robbie called.\n\n\"Hi Daddy,\" Jade answered as she went to him and kissed his cheek. She took his hand and led him over to Terry.\n\n\"Daddy, this is Terry Matthews,\" Jade said simply. Robert extended his hand and gave his most reassuring smile.\n\n\"Hello Terry, it's nice to meet you.\"\n\n\"Hello Mr. O'Connor, it's nice to meet you too,\" Terry replied in a low voice filled with fright as she placed her hand in his.\n\n\"Please call me Robert,\" He told her as he shook her hand very lightly. Julia came back into the room.\n\n\"How was your day dear?\"\n\n\"It was fine but I received a notice from the supplier, the prices of all plumbing supplies are going to be raised by an additional six percent,\" Robert informed them. He owned and ran the local hardware store in town.\n\n\"Oh no, Simon is not going to be happy about that,\" Julia said.\n\n\"Simon owns the plumbing company in town,\" Jade whispered not wanting Terry to get lost in the conversation.\n\n\"Do you feel ready for some dinner now?\" Julia asked her husband.\n\n\"I'm always ready for your cooking,\" he grinned.\n\nTerry felt the warmth of Jade's family and found herself hoping she'd fit in with them. She was warming up to all of them quite fast. Jade saw it, and gave her a small, quick hug to go with her smile of happiness that had been seeping through every fiber of her being.\n\nAt dinner, the conversation was kept light, everyone talking about this and that. Robert, trying not to be too obvious, kept his eye on Terry. She seemed very sweet and looked at his daughter with such love and devotion that it was hard not to like her. He also noticed that though shy at first, she was very versed in many subjects which meant she wasn't just a pretty face.\n\nShe was that too, pretty, Robert noticed and somehow he felt a sense of pride knowing that his daughter had captured such a beauty. It felt strange but he decided to approach this situation as if he had another son who brought a girl home. Somehow that made things easier for his mind to process.\n\nAfter dinner, they returned to the living room where they all had some coffee.\n\n\"Sweetheart, dinner was magnificent as always,\" Robert praised.\n\n\"I'm glad you approved but I can't take all the credit tonight, half of the production was all Terry,\" Julia announced with a broad smile.\n\n\"Oh, well Terry, my compliments, it was superb,\" Robert acknowledged, his smile gentle and sincere.\n\n\"Terry is indeed a great cook. It's something we love to do together all the time,\" Jade told them.\n\n\"Really, you never seemed to like cooking when you still lived here,\" Julia said her face seeming serious except for the smile that tugged at her lips.\n\n\"Well Mom maybe Terry has better incentives for her to want to stay in the kitchen,\" Robbie offered with a suggestive grin. His words or meaning behind them caused Terry to blush instantly.\n\n\"Robert O'Connor Junior, you mind your manners.\" Julia admonished her sometimes brainless son. Terry had gotten to a point where she seemed to be feeling good and not so nervous but with Robbie's innuendo Terry was tensing up again.\n\n\"Don't mind him dear, I accidently dropped him on his head when he was a baby,\" Julia said with a wink.\n\n\"Yeah, that explains why he mistakenly thinks he's handsome when clearly he's not,\" Jade piped in making everyone except Robbie laugh.\n\n\"Hey, when did this turn into pick on Robbie night?\" Robbie asked shaking his head in disbelief at how he was suddenly being treated.\n\n\"Face it son, you kinda dug yourself into that one with that comment,\" Robert said making them all laugh, including Robbie this time. He knew his father was right. The tension that Robbie's comment caused in Terry slowly melted away with the laughter. Soon the conversations continued until it was off to bed.",
        "Chapter 26\n\n\"How you doing hon?\" Jade asked when they were safely behind the door of Jade's old room.\n\n\"I'm okay. Getting better,\" Terry said and smiled briefly. Jade embraced her and kissed her. They sat on the bed and Jade held Terry for a while hoping to chase away any leftover anxiety.\n\n\"You alright to shower?\" Jade asked. They had gotten into the habit of showering together at home but as much as Jade's parents were okay with Terry, the pair didn't want to risk causing any ill feeling to arise. They had talked about the dos and don'ts before hand and they decided that showering together was a major don't.\n\n\"I'll be fine love. There is a good lock on the bathroom door right?\" Terry asked. It wasn't the first time she had asked.\n\n\"Yes, there is, I promise.\"\n\n\"Then I'm good,\" Terry said and smiled. She tried not to show her ever present worry that somehow, someone might walk in on her while in the bathroom and discover her secret.\n\nJade knew her lover too well to be fooled. She could sense the worry in her but couldn't see any other way to make her feel less anxious about using the bathroom.\n\nTerry gathered her necessities and taking a deep breath, she went through the door and to the bathroom that was two rooms away. She knocked and got no answer so she opened the door and entered.\n\nShe closed and locked the door and prayed that the lock was reliable. She stared at herself in the large mirror and smiled weakly. She decided that the quicker the better and hurriedly stripped and entered the tub, drawing the thick shower curtain.\n\nThe hot water felt heavenly and caused Terry to relax but not too much. She washed her body only, electing to leave her hair alone since it was so long and would take time to wash. She grabbed one of the large towels and stepping out; she dried her body as fast as possible and slipped on her panties, night gown and robe.\n\nFeeling relieved that she was covered again; she brushed her teeth then collected her belongings and unlocked the door. She opened it and almost walked into Jade.\n\n\"Love?\" Terry asked wondering what in the world Jade was doing. Seeing Jade's sheepish, almost embarrassed smile, Terry seemed to catch on.\n\n\"Wait, were you guarding the door?\" Terry questioned and grinned when Jade nodded that she was.\n\n\"I had to do something baby, you were so worried about the lock,\" Jade told her. Terry took Jade's hand and led her back to the bedroom. Terry was so overcome by her feelings of love for Jade's thoughtfulness. When they were both inside and the door closed, Terry pushed Jade's back against the door and kissed her hard.\n\n\"I love you so much; thank you,\" A breathless Terry said after their lips parted.\n\n\"You're welcome and I love you too.\"\n\n* * * *\n\nJade had her bath as well but missed feeling Terry's hands on her body and her hands on Terry's, especially that sweet clit of hers that she lusted and obsessed over. Jade took comfort in knowing that it was just for these two days that their love would be modified\u2015mostly. She was also relieved that her parents didn't make a fuss over her and Terry sharing a bed. At least she could hold her love while they slept\u2015and maybe more too.\n\nAfter finishing in the bathroom, Jade slipped into a night gown and panties and made her way back to her room. Terry was already in bed so Jade quickly put away her things and joined Terry.\n\nSleeping with clothes on felt strange since they both had gotten used to sleeping naked or with just panties on but it was necessary for Terry's peace of mind. She didn't want to do anything that might make Jade's parents have a problem with them or rather her, so she and Jade had agreed to stay covered and no getting frisky while under their roof.\n\nJade couldn't help herself as she draped half of her body over Terry's. She pressed herself tightly to Terry, kissing and suckling her neck. Moving to Terry's lips, Jade saw the flash of desire in Terry's eyes as Jade kissed her hungrily. Terry returned the kiss with an intensity that matched Jade's as her body responded.\n\n\"Jade, love, we agreed we wouldn't. What if your parents hear us?\" Terry said though she wasn't putting up any other resistance as Jade dragged her tongue along Terry's earlobe.\n\n\"They won't hear us if we're quiet,\" Jade whispered, her hand dipping inside Terry's neckline to cup her breast. Jade gently fondled Terry's breast, rolling the pad of her thumb over the now swollen nipple.\n\nThe fabric of Terry's night gown had enough stretch to it that Jade was able to pull the neck down to allow Terry's whole breast to be exposed. When that sexy little nipple came into view, Jade clamped her mouth over it, bathing the tip with her tongue.\n\nTerry stifled a moan as Jade worked her nipple. Terry's clit was reaping the benefits of Jade's work as she became more and more aroused. Jade's hand made its way under Terry's hem and up to the outline of her clit.\n\n\"Jade, please,\" Terry pleaded as Jade's hand lightly rubbed her clit through her panties. They should stop; in the back of her mind she knew that they should, but Terry really didn't want to, she was feeling too good to have Jade stop now.\n\nShe felt Jade's mouth leave her breast and felt the sheet that was covering the lower half of her body being pulled off of her. Terry opened her eyes in time to see Jade slip both hands under the gown. Jade hooked her fingers in the waistband of Terry's panties and tugged lightly causing Terry to automatically lift her hips.\n\nJade rolled them into a little ball and placed them at Terry's lips.\n\n\"Open please,\" Jade said and Terry did. Jade gently tucked the panties into Terry's mouth.\n\n\"There, now no one will hear your cries of pleasure and I am going to pleasure you my sweet baby,\" Jade said in a low but husky voice. Terry didn't have time to protest or object as Jade hurriedly lifted her night gown over her hips and swallowed Terry's clit. Working her tongue almost frantically along the shaft, Terry's hips began to lift, her moans and cries muffled by the makeshift gag.\n\nIt wasn't long before Terry's hands flew to Jade's head. Terry wrapped her fingers in Jade's luscious hair, holding Jade tightly to her. Terry's orgasm exploded, filling Jade's mouth with her gushing fluids as her screams of ecstasy filled the gag.\n\nAfter removing the balled up panties to ensure that Terry could breathe properly, Jade thoroughly cleaned her and retrieved a fresh pair of panties. She slipped them on Terry knowing that her lover wouldn't want to sleep without any. Jade fixed Terry's gown over her legs and pulled the sheet back over her body then Jade settled next to her, wrapping her arms protectively around Terry.\n\nTerry snuggled into Jade, her voice soft and sleep laden, \"No fair, you ambushed me and now I'm too tired to love you,\" she complained.\n\n\"You'll love me another time baby. You needed this to help you get rid of all that pent up tension. Don't you feel much better now, much lighter?\"\n\n\"Uh-huh,\" Terry agreed. She mumbled some more then Jade heard her soft, quiet breathing as she fell fast asleep.\n\nJade kissed Terry's cheek and thought about her plans for tomorrow. She quickly followed Terry into sleep.\n\nTo be continued.\n\nThis story, Hidden Desires, is an original story. This story is copyright protected \u00a9 by Dru_Druthers. No use, in whole or in part without the express written consent of the author, Dru_Druthers.\n\nThough this story is fictional from the mind of the author, Dru_Druthers, yet people such as Terry in the story are real, though not widely known of. Being intersex can mean many different physical appearances are possible. In May of 2012, the world was told of Steve Crecelius, who married, had several children with his wife, then went to a hospital to be checked on for kidney stones. While there, an ultrasound was reported to have found Steve was a female. He and his family decided to have him be wholly female, and a year later was wearing women's clothing. Many news sites carried Stevie's\u2015the new name she adopted\u2015story. See the many sites on the Internet attesting to this, including major news broadcasters and papers nationwide.\n\nDru_Druthers expresses her sincere thanks to her beta reader who wishes to remain anonymous.\n\nLastly, Dru_Druthers expresses a special thank you to two wonderful ladies who also supported her and her work. "
    ],
    "authorname": "Dru_Druthers",
    "tags": [
        "intersex",
        "lesbians",
        "oral sex",
        "squirting",
        "anal play",
        "toys",
        "hermaphrodite",
        "love story"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/hidden-desires-pt-02"
}
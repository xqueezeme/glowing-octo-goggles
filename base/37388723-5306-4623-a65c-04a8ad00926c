{
    "title": "Tucker's Studio Ch. 04",
    "pages": [
        "I have a whole series of these stories written. They work pretty well as stand alone stories, all revolving around Tucker Sims and his porn studio, but some things will make more sense if you read them in the order they were posted. I hope you enjoy them. As usual, the people and places are fictional. All characters are over eighteen.\n\n \u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n The Christian Boy\n\n Tucker's success adding Ryan to his stable of men had him on the lookout for another college boy. It was risky because all boys that age love to have sex, and all of them think they wanna be a porn star. Finding someone intelligent, sensible and quiet about his work \u2014 not to mention smokin' hot in the body department \u2014 was the trick. He'd approached a slew of young men over the years, asking them about modeling, but nine times out of ten he walked away without giving them a firm offer for a test shoot. Ryan was the gold standard. He never bragged about his part-time porn job to his friends and the ladies loved him, both for his youthful charm and his hot body, not necessarily in that order.\n\n Tucker struck pay-dirt one day at the city pool, the same place where he'd met Molly a while back, at his nephew's swim team practice. Molly was there the day he talked to the new boy. She lingered a bit after practice to see what Tucker was up to.\n\n The young man in question \u2014 we'll call him a boy since he was only eighteen \u2014 was one of the lifeguards that showed up for duty when the swim team turned the pool over to the general public for the final hours of the warm afternoon. Tucker had seen him a few times before, and caught him for a chat ten minutes before the boy's shift started.\n\n \"Some of those kid's got some talent, huh?\" Tucker said to him, gesturing to the swim team packing up their things.\n\n \"Yeah they do,\" the boy said. \"They're better than I was at that age. That kid in the backstroke was really fast.\"\n\n \"So this might sound weird comin' outta the blue,\" Tucker said, \"but I'm in the modeling and photography biz. We do some film work too. You ever do any modeling or acting?\"\n\n \"No,\" the boy chuckled. \"What makes you think I did?\"\n\n \"You got the look the ladies like,\" Tucker said. \"That's what it's all about these days. I'd love to have you come down and do a try out shoot. I've got a nice studio over in the warehouse district. A full staff, all on the up-'n-up.\"\n\n He wasn't lying, as long as you think \"on the up-'n-up\" means dirty naked fucking. Tucker reached in his pocket, took out a business card and handed it to the young man. Molly, lingering in the shade, smiled when she saw the hand-off. She wondered to herself if she'd have that sweet lifeguard cock \u2014 the one so blatantly lumped under the boy's speedo \u2014 inside her one day. She could feel her pussy moisten as she thought about it.\n\n \"So what are we talkin' about?\" the boy asked Tucker. \"Like catalogs and stuff?\"\n\n \"No, usually calendars to start out. You in your bathing suit, just like this. Stuff that appeals to the ladies, you know? If it works out, we start at fifty bucks an hour for photos. We go up from there. It's good money, and fun work.\"\n\n \"Yeah, I don't think I can do that. My mom's a Pastor. The Church of the Lord Savior, out on Bardston Road. I live with her in a little apartment attached to the main chapel. She gets upset that I have to wear this bathing suit in public,\" the boy chuckled. \"I told her it's the uniform for the lifeguards but she wrote a letter to the city. Said she thinks it's obscene. I don't think she'd like it if I got my picture taken in it.\"\n\n \"What about the girl lifeguards?\" Tucker asked.\n\n \"Oh, she hasn't seen them yet,\" The boy said with a smirk. \"They're one piece, but nice. Real thin, but, I guess this is too,\" he said, looking down at himself.\n\n \"We can put you in a pair of shorts. We're gonna need a bare chest though, at least partially. Maybe just an open shirt? We don't have to get into the details of it here though. If you think you can swing it without makin' your mom too upset, give me a call. I'm assuming you're eighteen, right?\"\n\n \"Yeah. Two months ago.\"\n\n \"That means you get to make up your own mind from now on, right?\" Tucker said. \"These photos are gonna end up where your mom probably won't see 'em anyway. You could always go the 'what you don't tell her won't hurt her' route, right? Anyway, it's up to you my friend. What's your name anyway?\"\n\n \"Billy. Billy Carpenter.\"\n\n \"Great talkin' to ya Billy, I'm Tucker. I hope to hear from ya.\"\n\n So that's how the bait was presented. Setting the hook was a separate challenge. Of course Tucker didn't look at it that way. He was all about good vibes and folks doing what made them feel good. If Billy was genuinely uncomfortable with the situation he'd send him home no problem. Having a bunch of conservative Christians picketing outside his door wasn't something Tucker wanted to wake up to. Ever. But he wasn't a believer, and all their uptight bullshit about recreational sexuality, in the name of what he considered to be mythology, bugged him. Why shouldn't he push back a little? Reality vs. myth. He knew which side he was on, and there was nothing more real than an epic fuck. Billy'd find that out one day, even if his mama had already brainwashed the shit out of him.\n\n \u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n A week later at the pool Molly was sitting in her favorite spot, way up in the top corner of the bleachers, away from the gossiping mothers. She spotted Tucker when he carried his nephew's bag in for the practice, and waved him up. It wasn't like her. Tucker usually left her alone so she wouldn't feel uncomfortable, on the off chance someone knew his business. But that day she was curious about things.\n\n \"Hi boss,\" she said brightly.\n\n \"Hi Molly. How's it goin'?\"\n\n \"Good, thanks to you. I just moved into my new condo.\"\n\n \"Nice! I love it when life is good, don't you?\"\n\n \"God yes! Who ever thought gettin' screwed could make life so wonderful. So I saw you talkin' to lifeguard boy last week.\"\n\n \"Oh Yeah. Nice kid. I offered him a photo shoot to see if he'd work out. I wish it had because he's perfect in a lot of ways. Reminds me of Ryan, ya know? But you can't win 'em all.\"\n\n \"It didn't go well?\"\n\n \"No. He got spooked. That's all right though. I mean I don't wanna force anybody. It's no good if people aren't comfortable.\"\n\n \"Did you have a girl work with him?\"\n\n \"Yeah. Markie.\"\n\n \"Hmm,\" Molly said. \"I can see why he mighta got nervous with her.\"\n\n \"Really? I thought she'd be good with him. She's sexy.\"\n\n \"Yeah, but, she can be a little intimidating. Even...well...I'm not gonna mention names, but one of the experienced guys told me she makes him feel weird sometimes.\"\n\n \"Huh. I guess I didn't realize that,\" Tucker said. \"I don't know if I can get him back for another try, but what do you suggest?\"\n\n \"Me,\" Molly said with a hint of a smile.\n\n \"You Molly? What about blowin' your cover here at the pool? It might get around you know.\"\n\n \"I don't think it will because he'll be part of our family.\"\n\n \"My my, we are confident, aren't we?\"\n\n \"I talked to him a couple weeks ago, before you did,\" Molly said with a slightly embarrassed little smile. \"It was just a casual chat, but there was somethin' there. A girl knows.\"\n\n \"Christ Molly, a couple weeks ago he was seventeen!\" Tucker laughed.\n\n \"No! He wasn't, was he?\" \n\n \"No, I'm just kidding. It was two months ago.\"\n\n \"Oh my God!\" Molly said with wide eyes. \"Is he that young? Thirty fuckin' years younger than me?\"\n\n \"Yeah, and his mother's a Pastor at one of those whacked out fundamentalist churches. He lives there with her, right in the goddamned church!\"\n\n \"Fuck!\" Molly said. \"Are you sure you wanna go after him? Sounds fucked up to me.\"\n\n \"I've got a good feeling about him. He's our kinda people. Smart, not a bragger. I've been doin' this long enough I can smell the good ones. Plus I hate those fuckin' churches.\"\n\n \"So give me a shot,\" Molly said.\n\n \"You just wanna suck some lifeguard cock,\" Tucker said.\n\n \"Well, there's that,\" Molly smirked. \"I probably shouldn't tell you this, but when I was doing my modeling thing back when I was his age...actually I was seventeen I think, I met a lifeguard at the beach. It was like love at first sight, you know? My best friend fucked him that night. Remember I told you not feeling comfortable in front of the camera fucked up my head? Well there was stuff like that happening too. Having a hot body and zero confidence sucks when you're a kid.\"\n\n \"It's funny you say that. I have a feeling Billy's in the same boat. I mean he's got the body of an Adonis, but his mom's got his head all fucked up about stuff. A lot of it's body image and sexuality I think.\"\n\n \"Let me help him. If anybody understands that shit I do. Plus...I mean...it's lifeguard cock,\" Molly laughed. \"What can I say, you've turned me into a horny slut, and I love it. If you get him back on set and I walk in there in my favorite tit teddy \u2014 you know the one \u2014 I'll bet a weeks wages I can get him to cum in his speedo. He might not fuck me on the first go around, but you'll see a young man come out of his shell, I guarantee it.\"\n\n \"Wow! Molly Bianchi! I love this confidence I see in you lately. You know you're my favorite girl?\"\n\n \u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n \"All right Billy, that was great,\" Tucker said. \"Now, I hate to pull this on you, 'cause I know it made you uncomfortable last time, but I'd love to try a few shots with another model. The last one didn't work out so good, but everybody's different so lets try it again with somebody else, okay?\"\n\n \"Okay,\" Billy said, but he wasn't enthused.\n\n \"I've encouraged other people at the pool to model for me, and Molly here's done really well with it,\" Tucker said as Molly walked out. \"Have you met her?\"\n\n Billy couldn't answer, due to speechless disorder. It was caused by Molly, and her tit teddy. She called it that because it made her tits look amazing. Of course from a male point of view they looked amazing every minute of the day, but in her eyes that particular teddy brought out the best in them. She was right of course, hence Billy's speechlessness. \n\n \"Hi Billy,\" Molly said. \"I'm so glad you're gonna be working with us.\"\n\n \"Oh. Yeah, well...\"\n\n \"So, models, we kinda talk frankly. Is that okay?\" Molly asked him.\n\n \"Yeah,\" Billy said quietly, still flustered by the sight of the sexy woman from the pool in her tit teddy.\n\n \"You look really good in that speedo,\" Molly said.\n\n \"Oh,\" Billy said, looking down at himself as he grew. \"Thanks, but...\"\n\n \"No butts. Although the back of you's really cute too,\" Molly said with a sexy smile and a wink.\n\n \"Oh,\" Billy said. He almost snorted an exhale, like a horny moose.\n\n Tucker stood off to the side, in the shadows beyond the photographic lights, and smiled. \n\n \"So what do you want us to do boss?\" Molly asked Tucker.\n\n \"How about a standing pose. You behind Billy, with your arms around him,\" Tucker said.\n\n \"That sound okay Billy?\" Molly said.\n\n \"Yeah,\" he said nervously.\n\n Molly moved behind him, pressing tight to his back, wrapping her arms around him. One hand landed just below his chest, the other one lower, just above his speedo. Speedos are low folks, so we're talkin' halfway between bellybutton and cock. Yeah, it was sexy. Sexy as hell. Billy had already swelled a bit from before, but now he was positively bulging, which in a speedo means the fabric has separated from the mothership. Houston, the speedo has lifted.\n\n Molly couldn't tell of course, but she could sense it. Chip, the men's stylist, was as gay as gay can be and Molly used his eyes as a gauge. If Billy was turned on, Chip would telegraph it. Molly knew Chip pretty well and that was just the way it was.\n\n So Chip, he fought it, but he just couldn't stop glancing at Billy's crotch, and Molly, she couldn't stop pressing her tits against Billy and massaging his belly. The photographer snapped off shots, moving around the couple. Tucker let it go on just enough, and then...\n\n \"Okay Billy, remember we're tryin' to turn on the ladies here. They're the ones who buy these calendars. Think you can work with that? With Molly?\"\n\n \"Yeah,\" he said quietly.\n\n \"Good. Let's switch positions,\" Tucker said. \"Yeah, that's it, get right up tight against her...put your arms around her the way hers were around you.\"\n\n Billy's arms moved tentatively, and he wasn't as tight against Molly as she wanted him to be. She moved back and placed his arms. His half-hard cock was against the top of her ass, and she positioned his arms where his mother wouldn't approve, one right up where the tit teddy cradled the bottom of her big orbs, and one down where hers had been on him \u2014 halfway between belly button and crotch, where he could feel the heat of her womanhood. He'd never felt anything like her.\n\n \"You okay honey?\" Molly asked. \"The camera loves this stuff.\"\n\n \"Yeah,\" Billy said quietly.\n\n \"Nice you guys,\" Tucker said. \"That looks good.\"\n\n Tucker gave Billy a few moments to settle in, and the photographer time to work the pose.\n\n \"Okay Billy, how about a hand down on Molly's thigh. Leave your left one up where it is. Maybe even slide it up a little if you're comfortable with that. You okay with that Molly?\"\n\n \"Sure, that's fine,\" Molly said.\n\n Billy was relieved that Molly thought it was all fine. So, yeah, I guess if she's good with it, he thought. But it still took Molly's guidance. She moved his right hand to her thigh, way up high with his fingers two inches from her prize, and she pushed the left one right against the bottom of her tit, holding a little of the weight of it. Billy's cock grew even more against the small of her back. She had a pretty good idea he was a big boy by the way he looked soft in his speedo, but feeling him harden against her left no doubt in her mind.\n\n \"How's this?\" Molly asked Tucker.\n\n \"Nice,\" he said as the photographer worked.\n\n \"Billy, can you hold her tit in your hand?\" Tucker asked.\n\n \"I, uh...I dunno. Molly?\" he asked shyly.\n\n \"Sure honey,\" she said. She put her hand on his and moved it up even more, cupping her nicely. She moaned just loud enough for Billy to hear, to make it clear she liked it.\n\n \"Perfect,\" Tucker said. \"That looks great.\"\n\n \"Molly,\" Tucker said after the photographer got what he wanted, \"let's get you in a bikini. I think having both of you in swimsuits will look a little more natural. Take a break Billy. Grab a bottle of water or somethin' if you want.\"\n\n \"Oh. Okay,\" he said sheepishly, not wanting anybody to see the hard-on in his speedo. He held his hands over it as he stepped out of the light.\n\n Molly came back ten minutes later in a little string bikini. Forty-eight years old, but damn, she would have had a line of boys following her if she wore that thing at the beach.\n\n \"Nice!\" Tucker said when he saw her. \"Marsha, see if you can find a nice white towel for her. Somethin' to drape around her neck. Okay guys, lets pick up where we left off, with Billy behind you Molly. Let's take advantage of all that skin showing. Billy, put your hands on Molly's sides, where her waist is smallest. Get right up tight to the back of her and kiss the top of her shoulder. Yeah, that's it. Nice Billy. Now kiss a little closer to her neck. Hold that. Molly, you look like you're enjoying that.\"\n\n \"I am,\" Molly purred. She felt Billy grow even more. \"That feels nice honey.\"\n\n Molly's hand dropped to Billy's thigh, subtly encouraging him to stay tight to her.\n\n \"Let's try the towel,\" Tucker said. \"Molly, take your top off and we'll drape this over you instead.\"\n\n \"Untie me honey?\" she asked Billy. She used both her hands to hold her hair up off her neck and glanced back at him with a sexy smile.\n\n \"The...whole thing?\" he asked nervously.\n\n \"Yeah. Take it off and hand it to Marsha.\"\n\n Billy backed up just enough to do the deed. He was hoping no one would see his huge hard-on, but Marsha got a glimpse of it when she took the bikini top from him. She draped the towel around Molly's neck, adjusting it carefully so it covered her big tits in a sexy way.\n\n \"All right Billy, up nice and close, hands on her sides, kiss her shoulder again. Nice. I like this. Yeah, we're gettin' some heat now.\"\n\n \"Yeah we are,\" Molly purred, pulling Billy in tight against her ass with her hand again.\n\n \"Do you mind some lip kissing Billy?\" Tucker asked.\n\n \"No...I guess...is that all right?\" he asked.\n\n \"It's all right with me if that's what you mean,\" Molly said, glancing back at him with twinkling eyes.\n\n \"Yeah, just like that Molly. Turn your head back to him. Kiss her Billy, and hold it while we get the shots.\"\n\n Molly tilted her head seductively and Billy put his lips on hers, close-mouthed, like he'd kiss his mother. Molly was having none of that. She opened her mouth and moaned as she felt Billy's lips open. Her tongue made a foray through the neutral zone, and Billy joined in, just a little at first, but Molly built the heat as the photographer circled.\n\n \"You're a good kisser,\" she whispered when they were through.\n\n So here's the thing about Billy. He's never had a girlfriend. He was home-schooled by his mom, so the 'real world' of girls had been shielded from him. There's a girl from church, Emily, who's in his Bible study class. Billy's mother thinks of her as his girlfriend, and she keeps a wary eye on the lass. But there'd never been a date, or really any time alone. Never so much as a kiss. They'd been at a mutual friends pool one time, chaperoned by parents of course, Billy in his thick, baggy bathing suit, and Emily in a conservative one piece. He got a look at most of her tits when she bent over, but his mother saw it happen and gave him the nastiest look he'd ever seen. \n\n Billy had a male friend down the street from where he lived. His mother didn't like the boy, but Billy did, and he got to see some Playboy magazines that belonged to the boy's father. There was porn on the boy's phone too. Billy recoiled at first, thinking it was way too bad and he shouldn't be looking, but he did anyway, and it solved the mystery of what went where, and a few other things he'd heard about but didn't understand. He masturbated a lot, like most boys his age, thinking about the Playboy girls, and Emily's tits.\n\n So the kiss with Molly was his first, and it was a good one. Sweet and soft, but oh so wet and sexy. His cock was rock hard against the top of Molly's beautiful round ass. She loved the feel of it. \n\n \"Beautiful. That was great,\" Tucker said after the kiss. \"Billy, I want you to move your hands up under the towel. Cup Molly's tits like your hands are her bra. Don't worry, the towel will cover everything. We'll do a few shots straight like that, and then, Molly, tip your head back for another kiss.\"\n\n Billy wasn't moving and Molly could feel him tense up. She knew he wouldn't touch her bare tits on his own, so she moved his hands up, placing his sweaty palms where she wanted them. Billy was astonished by the softness and the warmth, and the sheer size and weight of them. He was looking down over Molly's shoulder. Her lovely cleavage was on full display between the draping ends of the towel, and he could see his fingertips right there in the middle of it all. If he hadn't seen it with his own eyes he wouldn't have believed it.\n\n \"That's good, keep looking down like that Billy,\" Tucker said. \"Nice. Okay, now let's have another nice long kiss.\"\n\n Molly let her head fall back even more sensually, mouth open. Billy was a fast learner and the kiss was nice and steamy. Molly kept it going longer than the first one. In the middle of it her hand disappeared behind her, moving across the slippery fabric of the speedo, onto Billy's hard lump for a slow, gentle squeeze. She didn't linger there, knowing it was too soon for that. Her body tingled a little when she felt his quiet grunt vibrate in her mouth, and the corners of her lips curled up in a smile.",
        "\"You feel so good,\" she whispered into his mouth as their lips parted.\n\n She knew the look in his eyes when the kiss ended. It was pure lust. She wanted to tear off his bathing suit and ride him hard, but that would have to wait for another day. Groundwork, she kept telling herself. Just lay the groundwork today, not the boy.\n\n But Molly had promised Tucker she'd get Billy to cum in his speedo, and she was wondering if that would be to much. Would it encourage him, or scare him off? Of course she didn't know he was an untouched virgin, and that her quick squeeze had almost done the job already.\n\n \"Fantastic you guys,\" Tucker said. \"Marsha, roll out that blue shaggy rug, will ya? Whaddya think Billy, not a bad job for fifty bucks an hour, is it?\"\n\n Molly put her hands on his and slid them down, off her sweaty tits, onto her hips.\n\n \"No. It's good,\" he said, a little flustered by the ridiculously sexy woman he was still pressed up against. Molly stayed close against him, knowing he'd be embarrassed if everyone saw his throbbing erection.\n\n \"How about Billy on his back with me sitting on top of him,\" Molly said, trying to think of a pose that would hide the big lump in his little speedo, and help his modesty.\n\n \"Good, yeah, let's do that.\" Tucker said as the rug was being spread out.\n\n Molly gave Tucker a 'turn around' signal with her finger. Tucker took the hint and huddled for a minute with Marsha and Chip and the photographer.\n\n \"Hurry up,\" Marsha whispered to Billy. \"They won't see you.\"\n\n She guided him down onto his back on the thick rug, quickly settling down on his crotch in cowgirl position before Tucker broke up the impromptu meeting.\n\n It was a sexy pose. From most angles it looked like Billy was naked, with Molly in just her bikini bottom with the little towel. The towel hid hard nipples that had sprung to life when she settled her crotch down on Billy's hard lump, but they were soon to make an appearance. \n\n \"Yeah, that looks great!\" Tucker said enthusiastically. \"Hands on her hips Billy. Molly, lean forward and put your hands on his chest.\"\n\n \"How 'bout this?\" Molly asked, leaning even farther, with her hands on Billy's shoulders. \"Sexy, huh?\" she smiled as she jiggled her tits side to side. The towel wasn't doing much in that position.\n\n \"Super!\" Tucker said.\n\n Jiggling her tits wasn't the only thing she was doing to keep the Billy aroused \u2014 her crotch was moving on his hard lump. It was almost too slow of a movement to see, but they both could feel it, and she kept it up non-stop.\n\n \"Nice,\" Tucker said. \"Now lean back Molly. Put your hands on his legs. Marsha, adjust that towel so it's down the inside, so we can see the sides of her tits more.\"\n\n The photographer worked the pose for a minute, and Tucker called in Marsha again.\n\n \"Go the other way now, towel to the outside. Just barely catch it on her nipples.\"\n\n Billy was watching everything intently of course, and that pose really got him. Molly looked as sexy as he'd ever imagined a woman could look. Then the towel slipped off one side, and there it was, a real tit, right there in front of him for the first time. Molly reached up and uncovered the other one.\n\n \"How's this?\" she asked Tucker.\n\n \"Perfect. You guys look great,\" Tucker said.\n\n Molly pulled her legs from the squat and put her bare feet on Billy's shoulders. Her ass was just below his crotch so she didn't squash his cock. His big lump was a little more on view that he wanted, but it was right up against the humid heat radiating off Molly's pussy, so he wasn't complaining.\n\n \"Awesome Molly,\" Tucker said. Yeah, work it.\"\n\n She put her big toe near Billy's mouth and he kissed it. Tentatively at first, but then he licked it and took it in his mouth. Molly's sexy smile no doubt encouraged him. The photographer captured it all.\n\n Molly sat up, put her legs back at her sides, adjusted her pussy real nice on Billy's lump, and tossed the towel to the floor beside them.\n\n \"Wanna do hands on tits again Billy?\" Tucker asked. \"You don't have to if it makes you uncomfortable.\"\n\n \"He's not uncomfortable, are you Billy?\" Molly said with a soft smile, arching her back to encourage him. \"He's a professional model now,\" she said as his sweaty palms cupped her. \"You better watch out though Billy. I might wanna take you home with me.\"\n\n She moved her pussy on him more forcefully and Billy's body stiffened. She could feel his cock throbbing and she knew from the look on his face he was going over the edge. She felt every pulse as he filled his speedo with his warm cream.\n\n Tucker knew he'd cum, and knew about the boy's modesty, so he called a quick end to things.\n\n \"All right, that pose was awesome. I think we've got what we need today. Billy you were great. I hope you had fun and you wanna come back.\"\n\n \"Oh, you'll come back, right?\" Molly said to Billy. \"Can we work together again? I'd love to.\"\n\n \"Stop by my office when you get changed Billy and I'll pay you. Good job people,\" Tucker said, ushering everyone away so Molly could get Billy up without much embarrassment.\n\n When it was just the two of them, still on the floor, Molly bent down and gave Billy a soft kiss. \n\n \"I hope you don't mind me kissing you,\" Molly said. \"I feel like we shared something special today. I didn't mean to make you cum, but you're just so sexy. Sorry if I embarrassed you.\"\n\n \"No...that's...you didn't...I mean you did,\" he said, looking at their still intertwined crotches, \"but you didn't embarrass me.\"\n\n \"Good, 'cause I loved it,\" she said with a lusty smile, moving in for another nibbling kiss. \"You'd better get cleaned up and get your money. Don't be surprised if he pays you more. We did some nudity and the pay ramps up for that. You can make really good money if you wanna do more of this kind of thing. I hope you do honey. You make me super horny. Now go. Get cleaned up. I'll see you next time.\"\n\n \u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n \"You're gonna be late for work,\" Billy's mother Laura said when he got home. \"Where have you been, down at Danny's?\"\n\n \"Oh. Yeah,\" Billy said. He hated lying to his mom, but his new part-time modeling job was something she would not understand.\n\n \"Did you do your Bible study this morning?\" \n\n \"Yes Mom.\"\n\n \"I prayed for something good to happen to you today. I hope it did,\" Laura said.\n\n \"Oh, yeah. It was a good day,\" Billy said, remembering the feel of Molly's warm tits in his hands. \"Really good. How about you?\"\n\n \"Oh, just lots of paperwork. Pastor William gave me a hand. It went pretty well. Is your bathing suit clean? I hate you wearing it, but I should at least keep it clean. I was gonna toss it in with the laundry today, but I couldn't find it.\"\n\n \"Oh, yeah, it's clean enough,\" Billy said, thinking about it all rolled up in his backpack, saturated with sticky cum. \"I usually just rinse it out at the pool-house. It's no big deal.\"\n\n \"Okay honey. You better get going.\"\n\n \u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n Happy screaming children dominated the scene at the pool, along with a few overweight mothers. The hot days drew out the teens, some of them good looking, but Billy couldn't help thinking that very few of the girls, and none of the older women, were even remotely as sexy as Molly. He wasn't surprised she was a model. Damn she was attractive! She must be in lots of catalogs and things, he thought, and maybe even TV too. He grew up without a TV in the house, so he was only guessing.\n\n His mind wandered way more than it should have that day in the lifeguard chair. Luckily nothing bad happened that needed his attention, because there were times when there was nothing in his head but Molly. He actually popped a boner sitting there thinking about her, which wasn't a good thing to do while on-duty in his little speedo. \n\n It turned out to be the hottest day of the summer so far, and the pool was packed. The pool supervisor called in a second lifeguard to help keep an eye on things. Amongst the frenzied din of children's squeals Billy heard a familiar voice. It was Emily.\n\n \"Hi Billy,\" she said shyly, looking up at him in all his speedo-ed glory.\n\n \"Hi Em! I've never seen you here before.\"\n\n \"My neighbor talked me into it. You know Kathy. I told her you worked here and...\"\n\n \"It seemed like a good day for a swim,\" Kathy said, with a sly smile.\n\n \"Wow Em, you look really...nice,\" Billy said. \n\n Emily blushed. She wasn't used to wearing a bikini, and certainly not in public, but Kathy had talked her into wearing one of hers. It was way skimpier than anything Emily would have bought for herself. She looked nervous but excited as she stood there soaking in Billy's approving gaze.\n\n Billy gazed on Kathy too, amazed at the way she'd blossomed into a woman since he'd last seen her \u2014 petite, curvy, confident looking, and sexy as hell. He only gave her a quick once over though, instinctively knowing Emily would want his eyes on her. Kathy's eyes drank in Billy pretty thoroughly, and her eagle eye noticed his cock grow as their bikini clad bodies got to him. He'd never had a hard-on so many times in one day in his life.\n\n \"Pool's awful busy today,\" Billy said. \"You guys'll probably be black and blue before you get outta here.\"\n\n \"Looks like fun. Is it always like this?\" Emily asked.\n\n \"No. Super hot today.\"\n\n \"Yeah,\" Emily said. She knew he meant the weather, but Billy looked super hot too. The sight of him sitting there nearly naked had her flustered. She was at a loss for words.\n\n \"Did your mother really write a letter about your bathing suit?\" Kathy asked.\n\n \"Yeah,\" Billy said, kind of embarrassed that Emily had told her.\n\n \"Looks good to me,\" she said. \"You like it Em?\"\n\n \"Oh, uh...yeah. It's...good,\" she stuttered. Kathy giggled at her.\n\n \"Lets get wet,\" Kathy said to Emily. \"These suits look really good when they're wet.\" She smiled a devious smile at Emily, who was blushing again. \"Keep an eye on us Billy?\" Kathy said, turning her devious smile on him.\n\n \"Yeah. I get paid to watch you,\" he said, wondering if it would be too obvious if he used his hands to cover up the bulge in his lap that was bigger than it was supposed to be.\n\n Kathy giggled again. They left their flip-flops and towels by Billy's lifeguard chair and she led Emily away. Their cute asses jiggled under the microscopically thin fabric, and Billy finally had to cover up, leaning forward so he could lay his arms across his crotch. His boner was out of control.\n\n Billy tried to keep his eye on all the kids, but there was no way he was letting Emily and Kathy out of his sight. He noticed them giggling right after they got in the water, and they both stayed low with just their heads out. Turns out Kathy's new bikini's, the ones they were both wearing, went semi-transparent when they got wet, and were super clingy. They were designed that way, and Kathy knew it, but she hadn't told Emily. Kathy got a big kick out of it, but Emily was horrified, in a nervous, giggly kind of way. Kathy was a bold little thing, and it wasn't long before she stood up in water shallow enough to show off her tits. Emily stayed low. Post-pubescent boys started to gather around, so Kathy giggled and swam away. She swam over to where Billy's lifeguard chair was, and pulled herself up with her arms folded on the pool's tiled edge, her mid-sized perkies and dark, hard nipples on wonderful display through the miracle fabric.\n\n \"How's business,\" she said with a delightful, mischievous smile.\n\n \"I'm starting to like my job,\" Billy said. He knew it was only a matter of moments before he'd have to lean forward and cover himself with his arms again.\n\n Emily saw her friend's little trick and quickly joined her, although she stayed armpit deep in the water. She did hold herself off of the wall a few times, giving Billy some tantalizing glimpses of her pink nipples through the glass-clear water. Her tits were even nicer than Kathy's, if that was possibly. She felt positively wicked, but kinda liked it, and she blushed again.\n\n \"My supervisor will get mad if he sees you guys talkin' to me,\" Billy said.\n\n \"Oh okay. What time do you work 'till,\" Emily asked. \n\n \"Just another hour. Pool closes at seven,\" Billy said.\n\n \"We'll wait for you,\" Kathy said brightly.\n\n A shot of nervous adrenaline hit Emily. She had asked because she wanted to be gone before Billy got through. Having to hang out with him in their tiny bathing suits would be too much, she had thought. She was a one-baby-step-at-a-time kinda girl, and what she had already done was a huge step already. Kathy though, had a way of getting her to do things.\n\n They splashed back in the water amongst the frenzy of children and plump adults, glad to be there on the ninety-five degree day. As busy as the pool was, nothing happened that needed Billy's lifeguard skills, so he kept one eye on the general public and one eye on Emily and Kathy. They had fallen in with a group of teens, and Billy noticed the boys were paying particular attention to his bikini clad friends. \n\n At five minutes to seven Billy's supervisor announced the pool was closing and a great horde of wet humanity climbed the big steps to dry off and head home in the still blistering heat. Kathy and Emily were the only ones walking toward the far end of the pool, toward Billy's chair where they'd left their towels. Time seemed to stand still as he sat there and watched them approach. Two eighteen-year-old girls in all their raging hormonal glory, their little semitransparent suits clinging to them like white on rice. Glistening skin. Hard nipples. Jiggling tits. Camel toe. It was all there, and it was positively obscene, the best thing Billy'd seen in his life. Well, at least equally the best, he thought, as Molly's bare tits flashed briefly in his mind.\n\n The girls dried off as Billy sat there and watched. His cock had sprung to life again, and this time it might spell trouble \u2014 he couldn't just sit there forever. Emily, who was trying to maintain as much modesty as she could under the circumstances, turned away from Billy as she dried herself, but Kathy was just being a tease, pushing her cute tits this way and that as she dried them, not trying to hide at all.\n\n \"Let me do your back,\" she said to Emily. She wiped down Emily's shoulders and back with her towel, paying particular attention to Emily's perfect little ass, making the cheeks jiggle as she scrubbed the thin bikini fabric, her own tits wobbling nicely from the effort.\n\n \"Kathy! Jeez!\" Emily said.\n\n It was all too much for Billy. He leapt off the lifeguard chair and splashed into the water, the only thing he could do considering the raging hard-on threatening to split right through his speedo.\n\n \"Hey, that's not fair!\" Kathy said. She'd worked hard to make the big lump grow, and it was all for naught. Emily was relieved though. The whole situation was too much for her Bible-school trained mind to get a grip on. She wrapped her towel around herself and felt a little relief from her exposure.\n\n \"Em! My Grandmother does that!\" Kathy said when she saw her. \"You're not gonna walk outta here like an old lady, are you?\"\n\n Emily ignored her, and they walked along the poolside following Billy as he slowly swam his way to the steps. He emerged from the crystal water looking like a Greek God. Over the last two years he'd gone from boy to man in a spectacular way, with strong, hairy legs; some hair on his muscular chest and a little below his bellybutton leading into his bathing suit; a tight, well-rounded ass; and the thing that the girls couldn't seem to stop glancing at, a much bigger than average sized cock, courtesy of his estranged father's good genes. His mother's protests to the city about the speedo were well-founded. With his, uh, endowment, it really was nearly obscene.\n\n The water had done it's job though, and at least his boner was under control. He had a feeling it wouldn't last. Emily was covered up, but Kathy's tits jiggled as they walked, and that ass of hers! Sure enough, he was growing again by the time they got to the pool house.\n\n \"I gotta punch out. I'll be right back,\" he said. Inside the cool of the cement block building he pulled on his shorts but didn't bother with his shirt. After a quick scrub of his wet hair with a towel he was back out into the warm early-evening sunlight.\n\n The girls were waiting for him. Emily had even taken off her towel. She tried to convince herself that her suit had dried enough to be a little less see-through, but really she did it because she didn't want to be left behind in what seemed like a quickly escalating contest for Billy's attention.\n\n The three of them walked slowly toward the parking lot. Kathy wanted Billy to ride home with them in her car, but he told them he couldn't, making up an excuse so he could ride the bus home as usual. He felt like he was rapidly getting in over his head, and he could sense that sweet Emily was feeling that way to. They lingered for a while at a picnic table in the shade before breaking up.\n\n \"We're both gonna kiss you. Is that all right?\" Kathy asked with twinkling eyes.\n\n \"Kathy!\" Emily said, amazed at how bold her friend was.\n\n \"What? Lots of people share,\" Kathy said matter-of-factly. \"So can we?\" she asked Billy.\n\n \"Yeah, I guess so,\" Billy said, not quite believing his luck.\n\n He glanced at Emily. Neither he nor she made a move.\n\n \"God, you two are too much. Get on with it all ready!\" Kathy said. She stood in front of Billy, pulling him down to her level with her hand on the back of his neck. Her lips were soft and she opened her mouth, just as Molly had done earlier in the day. Billy's brand new tongue skills went to work, matching Kathy's enthusiasm like an old pro. He was proud of himself. She pressed her nearly naked body against him as the kiss intensified. Billy's hands were on her tiny waist, and he finally had to push her away when cognizant thought got through his spinning brain and he remembered Emily was watching.\n\n \"Jeez!\" Kathy said a little breathlessly, surprised that the quiet church-boy knew what he was doing.\n\n Emily couldn't believe what she had just seen and was suddenly very nervous. She'd long dreamt of Billy kissing that way, but was completely surprised to see the skill she'd dreamed of was real. And now she had to somehow match it! The first kiss of her life and she felt pressured to do it in a way she didn't even understand!\n\n With her heart pounding, she stepped up. Billy took the lead this time, holding the back of her head as Kathy'd done to him. Emily knew her mouth needed to be open because of what she'd just seen, and her lips seemed to melt together with Billy's. It was a warm, wonderful feeling, and everything in the world that she'd been thinking left her head. Billy's tongue surprised her and thrilled her. His strong hands pulled her tight and she felt his lump against her. She and Billy were both lost in the magic.\n\n \"Okay already!\" Kathy said after the long, sensual kiss threatened to never end. \"Get a room you guys.\"\n\n The kiss ended softly, as it had started. Billy wanted to linger there, holding Emily in his arms, but he didn't. \n\n \"Bye Billy,\" Kathy said as she ushered her friend away quickly, into the parking lot. None of them knew quite what to say, so she just broke things up hastily. Billy sat on the picnic table and watched their bikini clad asses wiggle away. What a day, he thought to himself. Mom prayed for something good to happen to me and I got Molly, Kathy and Emily. Thank you God!\n\n \u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n Billy took the bus downtown to Tucker's studio. He gazed out the window at the passing scenery and thought about girls. Three days had passed since the best day of his life. Emily had ridden her bike to the church to see him the day after their kiss at the pool, but his mom was there so they just walked around the garden for a little while. Laura could sense her son was changing. She still thought he was too young for it all, but she was starting to resign herself to the fact that he was eighteen, a young man, and it was inevitable. She took comfort in knowing Emily was a nice respectable girl.",
        "Kathy, too, popped into his thoughts on the bus ride, and, of course, Molly. Tucker had told him Molly would be at the studio that day to work with him again, and Billy was glad about that. The first woman he'd worked with, Markie, had sort of scared him in an odd way, but Molly, she was just dreamy, like one of those Playboy girls come to life. How old was she, he wondered? Thirty or thirty-five maybe, he thought, grossly underestimating her forty-eight years. Billy walked the two blocks from the bus stop with a spring in his step, anxious to see her again. Inside the studio, Tucker brought Billy into his office.\n\n \"Your first session was really fantastic Billy,\" Tucker said. \"Molly really loved workin' with you. Were you comfortable with it all? With the nudity?\"\n\n \"Yeah,\" Billy said, unable to hold back a little smile as he thought of Molly's bare tits. \"She's great.\"\n\n \"Good. Yeah, it's fun, isn't it?\" Tucker said. \"I mean where else do you get to play like this and get paid for it. So today, I'd like to get you guys naked. We're gonna do some artistic stuff \u2014 dim light, black-and-white photography. Like art gallery stuff. You've seen that kind of thing, right? Molly, she's really lookin' forward to it. Called me yesterday to make sure you were coming. I'm gonna give you guys both a hundred-fifty an hour for this, all right?\"\n\n Billy was stunned. His thoughts spun in ten different directions. Naked? Me? No, Mom would go crazy if she knew! Molly really likes me? She probably needs the money, this is her job. A hundred-fifty and hour? I could buy an iPhone in just a couple hours! Molly called to make sure I was coming? I get to see her tits again, and more! What if I get hard? I know I'll get hard!\n\n \"I don't know,\" Billy said. \"I was kind of embarrassed last time, and I was sorta covered up.\"\n\n \"Gettin hard you mean? Oh fuck Billy, we're all used to that here. That's all part of it man. That's what men look like. Women love that shit.\"\n\n \"Really?\" Billy said, thrilled that someone was talking so bluntly to him about 'real life'. \"Won't Molly be embarrassed?\"\n\n \"Fuck no. Was she last time? She thinks your hot man. It makes her feel good to know she can do that to a young man. She loves that shit. All the girls here do.\"\n\n Billy just sat there, not sure of what he should say or do.\n\n \"Tell you what, let me get Molly and you guys can talk alone about it, all right?\" Tucker said. \n\n He got up from his desk and walked down the hall. A few minutes later Molly walked into the office wearing a white robe. She closed the door and joined Billy on the couch.\n\n \"Hi honey!\" she said a radiant smile. She gave Billy a peck on the lips as she sat down. \"I'm so glad we're workin' together again. I had so much fun last time.\"\n\n \"Me too,\" Billy said.\n\n \"Tucker told me you're a little nervous about the nudity. Everybody is the first time honey. But once you do it once or twice you'll love it. It's really just so relaxing once you get used to it. You'll feel so free and natural. It's the way God made us after all, right?\"\n\n \"Yeah, I guess,\" Billy said, captivated by Molly's beautiful eyes.\n\n \"So you're worried about your cock gettin' hard in front of the crew?\" Molly asked, sensing that might be the core of the problem. \"They've all seen it a thousand times before. And you should be proud of yours. I could tell last time it's really beautiful. You've got a better body than most of the models here.\"\n\n \"Really?\" Billy said, sounding surprised.\n\n \"Oh yeah honey! Show it off! Be proud of it! I wanna see it, I know that!\" Molly said, her sexy smile working hard on Billy. \"Will you try it with me? I know you'll like it once you get used to it.\"\n\n \"Yeah, I guess so,\" Billy said. There was no way he was saying no to Molly.\n\n \"Are you worried you'll, you know, cum again, with the crew around?\"\n\n Billy blushed and nodded, too embarrassed to say anything.\n\n \"Oh, honey, it's okay you know. That's a beautiful part of life too,\" Molly said. \"I can help with that, if you want. If we take the pressure off right now you won't pop so fast when we're out there.\"\n\n Billy wasn't sure he knew what she was talking about. A lot of what she was saying was like a foreign language to him, but he was getting the gist of it.\n\n \"Do you want me to...help with that?\" Molly said, her eyes looking about as seductive as any Billy had ever seen.\n\n I..dunno,\" Billy stammered.\n\n \"I'd really like to,\" Molly said. \"Let me honey. Stand up for me.\"\n\n Billy stood and Molly pulled him close in front of her, between her spread knees as she sat on the couch. She lifted his t-shirt a little and unfastened his shorts. Billy's heart was pounding. His shorts dropped to his ankles and Molly pulled down his tight boxer briefs. The big cock she'd been dreaming about jumped up.\n\n \"Oh honey,\" she said with a genuine sense of reverence as she took it in her hand. \"So beautiful.\"\n\n It was quickly in her mouth and Billy was instantly in heaven. He'd read a lot about heaven, and there it was, suddenly engulfing his very being, like God's golden breath. Molly stroked the big cock slowly as she lost herself sucking on it. Billy didn't know what to look at \u2014 the sight of his cock disappearing into Molly's mouth, or her beautiful tits, barely contained in her loose, fluffy robe. When her hand went to Billy's balls it was all more than he could take. She held him tight as he unloaded in her mouth, a gushing serving of the sweetest cum she'd ever tasted. Molly swallowed it and sighed.\n\n \"So nice,\" she said, still admiring the hard young cock, stroking it slowly. \"Put this thing away,\" she said as it softened a bit. \"I'll be touching you a lot more out there, just so you know,\" Molly said. \"I can't wait honey. This is gonna be so fun!\"\n\n Molly stood as Billy pulled up his shorts. She puckered up and gave him a playful little kiss, and then she left. His face was flushed red and he was still trying to process things when Tucker came back in.\n\n \"Whaddya think Billy? We gonna have a nice session today?\"\n\n \"Yeah, I guess I'm ready.\"\n\n \"Good. Go back and see Chip. You remember where he is, don't you? There's no wardrobe today, so he'll just fix your hair a little and get you in a robe. I'll see you on the set shortly.\"\n\n \u2014\n\n Back in the dressing room Chip kept up the vibe of having fun with what was about to happen. Billy's head was spinning. He knew it was all pretty wild, but it was a job, and Molly was Molly, and he'd be damned if it wasn't fun! \n\n Chip had moussed Billy's hair a little, and Molly's hair and makeup was done. She looked stunning and radiant when they met on the set. Billy's nerves were keeping his hard-on at bay, so when Tucker asked them to disrobe it was nerve-wracking but not too embarrassing. He glanced at Molly's tits and shaved pussy but quickly looked away, not wanting to be caught ogling. His cock plumped a bit, but thankfully stayed semi under control.\n\n The set was a queen sized bed, with dark satin sheets and a small, fuzzy fleece blanket. Molly climbed on and Billy followed. He was relieved when she pulled the little blanket over them because his formerly under control cock wasn't any more. Damn thing had a mind of its own. He rolled on his side so it wouldn't tent the blanket. Molly had a feeling she knew what was happening, so she rolled too, and spooned herself back against it. In a matter of moments it was raging hard, in tight between Molly's ass cheeks, the length of it extending between her thighs. Billy felt the warm moisture of her pussy when she moved on it. He was stunned.\n\n \"That's nice just like that,\" Tucker said. \"Molly push the blanket down a little so we can see your tits. Billy, put your arm around her. Let your hand fall wherever its comfortable. Lay your heads down, relaxed like. Yeah, that's good.\"\n\n Billy's hand fell just above Molly's tits with his wrist in her deep, warm cleavage. She was moving her ass ever so slowly on the big cock. It was an instinctual movement that she couldn't have controlled even if she'd wanted to. Billy's body had never felt so alive before, but it was so relaxed and comfortable. He could have stayed just like that forever.\n\n Molly had other ideas. After the photographer got his shots she moved Billy's hand onto her soft tit, and she tilted her head to him.\n\n \"Kiss me,\" she said softly.\n\n \"Yeah, work it you guys,\" Tucker said. \"We'll roll with wherever you guys go.\"\n\n Billy would've done what she'd requested even without Tucker's approval. Molly was irresistible to him, a temptress of the highest order. She was Eve, standing naked in the garden, right there in the gritty warehouse district of his own city.\n\n The kiss was wet and juicy. It was sort of a cocked head, sideways affair, with tongues flashing in the open. Tucker loved it.\n\n \"Smokin' hot kiss you guys. Damn, you're gonna be my go-to couple, I can see that.\"\n\n Molly moaned when she though about all the future possibilities with the delicious eighteen-year-old.\n\n \"Can you roll on your back Molly?\" Tucker asked.\n\n She hated to break pussy contact with the hot shaft, but she rolled, putting her glorious tits on full display. She pulled Billy's head down to her hard nipple, her chest heaving as his lips wrapped around their target.\n\n Billy had no idea if he was doing anything right, but Molly's moans and sighs and heavy breathing gave him a pretty good idea.\n\n \"Nice Billy,\" Tucker said. \"Work 'em both.\"\n\n The instructions were music to his ears and soon he was a nibbling, sucking fool. Talk about losing yourself in your work!\n\n The crew worked slowly. Tucker didn't want to rush anything or be too invasive. Billy needed to feel safe and comfortable if Tucker was going to get him to come back, so the proceedings were very easy-going and supportive.\n\n \"Awesome you guys. Love it,\" Tucker said. \"Marsha, can you adjust that blanket so its just barely covering the middle of them? Sort of drape it sexy.\"\n\n Billy came up for air while Marsha adjusted things. She got a glimpse of his hard cock, even touched it a little through the blanket as she placed it, and gave Billy an approving smile. Billy had thought he'd be embarrassed by such a thing, but instead it gave him confidence.\n\n \"Okay Billy, work those tits a little more. Pinch those nipples. You like that, don't you Molly?\"\n\n Oh yeah!\" she cooed.\n\n Billy had never heard of the pinching thing, and didn't want to hurt her. He gave one a gentle squeeze.\n\n \"Harder baby,\" she sighed. \"Oh yeah! Suck on the other one. Use your teeth.\"\n\n Billy was back in heaven again, and he was starting to understand the place. He'd have to read up on it in the Bible to see if he could get any clues to this new world with girls.\n\n He noticed Molly's hand disappear under the blanket as he nibbled and pinched her nipples. It was in her crotch, but he didn't know what she was doing. Her ragged breathing jumped up a few notches very quickly. A few moments later her hand came out and she pulled Billy's hand down to replace it. She kept her hand on top of his to guide him, pressing his fingers into her squishy slit, moving them just a little to and fro. \n\n \"Oh fuck,\" she said breathlessly as her back arched up against Billy's mouth. Molly was fully involved. Billy was at the wheel, driving with a brand new learner's permit, but handling the racy vehicle well. \"Oh that's good baby!\" Molly sighed.\n\n The proceedings were escalating briskly but organically, and Billy didn't have too much time to think about things. Molly's hand left his alone on her wet pussy and reached for his cock. The 'barely there' blanket covering that Marsha had so artfully placed across their hips no longer covered much, and Molly's cock stroking brought things into view even more.\n\n \"Really nice guys, keep it up,\" Tucker said quietly to reassure Billy.\n\n God yes, keep it up, Billy thought to himself. I don't even care that everybody can see. Please don't end things now!\n\n Billy had no clue how to pleasure a woman, but the angle of his hand was right across Molly's clit. His movements were slow and the pressure was just right. Her nipples were sensitive, and Billy's big cock was thrusting through her fingers. All systems were go, and she launched.\n\n \"F-u-u-uck!\" she stuttered, barely able to get the sexy sounding word out. Her body tensed and her abdominal muscles rolled like ocean swells. It was a quiet but powerful orgasm.\n\n Billy almost came when Molly did, but luckily she squeezed his cock tight in her hand when her body tensed, probably not even realizing she was doing it, and it shut down his impending eruption.\n\n Molly pushed Billy on his back and rolled herself on top of him. Her orgasmic buzz still had her drunk, and she kissed Billy with a flood of passion. His cock was on his belly and she rubbed her sopping wet pussy on it hard. Marsha knew it was too much to soon so she moved in and covered Molly's ass with the blanket. The kiss was so intense they were barely aware of Marsha's movements.\n\n \"Put it in be baby,\" Molly whispered breathlessly in Billy's ear. \"They won't know.\"\n\n Billy knew he shouldn't, but the heat of the moment was way too much to deny. Molly felt the tip of his cock move through her wet opening and she moved back on it, forcing two inches in. Billy gasped.\n\n \"Yeah that's it.\" Tucker said. \"Act it up real good, like it's the real thing.\" He knew full well there was some dirty fuckin' goin' on.\n\n \"Oh fuck you're big!\" Molly whispered breathlessly in Billy's ear as he went deeper in her glorious pussy. \"I fuckin' love it!\"\n\n Billy loved it too. It was a feeling he wasn't prepared for, but then, no amount of knowledge can prepare a boy for that feeling, the first time his hard cock is massaged by a velvety vagina. It's an otherworldly journey, and Billy was deep into the trip.\n\n Molly rocked back on him and started a proper fucking. Billy's hips got into the action \u2014 instinct is a wonderful thing \u2014 and their eyes stayed locked on each others. It was only a few moments before Billy's young senses were overwhelmed, and he pumped his second load of seed of the day into Molly, this time deep in her gut. Molly loved it. Her post orgasmic buzz was still smoldering, and Billy's big cock felt spectacular gushing inside her. Oh God what a feeling!\n\n \"That's great you guys, I think we've got enough for today,\" Tucker said. \"Billy you're doing great. Really nice work my man. All right everybody, lets leave these kids alone to get dressed. Stop by my office on your way out Billy.\" Tucker looked at his watch. \"Let's call it two-hundred dollars for today, and we'll schedule the next session.\"\n\n The studio went quiet when the crew left. Molly kissed Billy, soft and sensual. \n\n \"Wow!\" she said, rolling on her back. \"That was so awesome. You're fuckin' amazing. That cock of yours! It feels so good! You're girlfriend's a lucky girl.\"\n\n \"I don't really have one.\"\n\n \"Oh, how come honey?\"\n\n \"Hasn't happened yet. I kissed her a few days ago though, at the pool.\"\n\n \"What do you mean?\" Molly asked, propping herself up on her elbow, looking surprised. \"Your first kiss?\"\n\n \"No, that was you,\" Billy smirked.\n\n \"No fuckin' way! I was your first kiss? And now...I'm your first fuck?\"\n\n \"Yup,\" Billy said sheepishly. \"Sorry. I should have told you.\"\n\n \"You're sorry? You gave me the best gift in the world and you're sorry? Oh my God Billy,\" Molly said, pulling him close and hugging him tight. \"I can't believe I'm your first. Was it anything like you dreamed?\"\n\n \"Way better,\" Billy said. \n\n \"You're such a sweetheart! God I wish I was younger. You'd be mine so fast.\"\n\n \"You think Tucker will let us...work...together again?\" Billy asked.\n\n \"I'm sure of it. I want you to fuck me out in the open next time. Will you do that for me Billy? We can do it all kinds of different ways.\"\n\n \"Here? With everybody watching?\"\n\n \"Yeah. It's super fun. Makes it wicked hot. We sorta already did it, right? Ooo, I see you kinda like the idea,\" she smiled, reaching for his newly hardening cock. \"God, you're my kinda animal.\"\n\n Molly got on her hands and knees and took Billy's cock in her mouth as he lay on his back. She worked him to a frenzy and he shot a sputtering load in her mouth again while he fondled her big, hanging tits.\n\n \"Oh my god your cum is so sweet! Like candy! We'll save the fucking for next time. Okay?\" she asked with a pleading twinkle in her eye.\n\n There was no way Billy was saying no.\n\n \u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n When Billy got home Pastor William's car was in the parking lot, parked next to his mom's. There was no sign of her in the apartment, so he walked through the connecting door into the church. Billy enjoyed Pastor William's company, so he wanted to say hello.\n\n Both his mom's and Pastor William's offices were empty. The lights were on and paperwork was spread out on the work table, so he was on the right track. He walked down the hallway to the kitchen, thinking they might be taking a break. Nobody there. Standing there in the quite darkness of the place, ready to turn around, Billy heard something. He walked down to the far end of the kitchen, to the storage room in the back. The door was closed, but there was a light showing under it and when he got near it the sounds were clear. He'd heard the same noises watching porn on his friend Danny's phone \u2014 bodies slapping together, deep breathy moans, some quiet dirty talk. His mother was being fucked, and she was loving it! It had to be Pastor William. His car was there and he and Laura had been catching up on paperwork the last few afternoons. The only problem was William was married. His wife led the worship music group at the church. Billy had taken guitar lessons from her in the past. He liked her, and William too. A handsome guy about his mom's age, with one of those outgoing, friendly personalities.\n\n Billy beat a hasty retreat from the church kitchen and went back to the apartment to get ready for work at the pool. He wondered how long his mom had been fucking Pastor William, and worried about how it all might end up if things got ugly. It wasn't at all like his mom to be doing something like that. At least Billy didn't think so. It was all terribly confusing to him.\n\n He'd taken a quick shower at the studio, so all he had to do was throw some snacks and water bottles into his backpack for work. His mind wandered to all the sex that was happening. What did Molly mean when she said, 'We can do it all kinds of different ways'? Will I know what to do? What way was Pastor William doing it with Mom? Should I even be thinking about that? God, it really sounded like she was into it! So weird! What exactly have you been up to Mom?\n\n \"Oh, are you leaving already honey?\" Laura said, walking in the apartment just as Billy was walking out. She was a bit out of breath.\n\n \"Yeah, gotta catch the next bus.\"\n\n \"Sorry honey, I guess I got caught up in the paperwork. Sometimes I lose my head in it.\"\n\n \"Yeah, no, that's okay Mom. Pastor William givin' you a hand today?\"\n\n \"Yeah. I don't know what I'd do without him. He knows just how to help when I'm getting overwhelmed.\"\n\n \"Okay, gotta go. I may hang around the pool for a little while after and play frisbee with the other lifeguards.\"\n\n \"Okay honey.\"\n\n \u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n It was another busy day at the pool. Still well above ninety degrees, with no end to the heatwave in sight. Billy had to jump in three times to help children \u2014 two false alarms and one genuine rescue. He caught things quick, before it got bad, but it was scary.\n\n About an hour before his shift ended Emily and Kathy showed up, wearing the same magic bikinis. Emily hadn't really wanted to, but Kathy convinced her that taking a step back into a more conservative bathing suit would send the wrong message to Billy. So the skimpy, almost-see-through sexpot suit it was. She felt just as uncomfortable in it as she had the first time. Maybe if she stayed out of the water it wouldn't be so bad. But it was such a hot day! And maybe if they didn't leave their towels by Billy's chair. But Kathy made her do it again!",
        "Kissing Billy the last time they'd seen him left Emily very mixed up. She'd always wanted to kiss him, and hoped for a real relationship with him, but Kathy kissed him too, and hers was just as hot and sexy as Emily's. She didn't know what to think. Maybe this time, if they talked to him after his shift again, something would sort out.\n\n \"Hi Billy,\" Kathy said, with a touch of seductress in her voice.\n\n \"Oh hi Kath! Hi Em!\"\n\n \"Hi Billy,\" Emily said shyly.\n\n Emily was happy to see Billy bright and cheerful. He could be a little moody sometimes, but on that day she noticed a slightly different swagger, a confidence she hadn't noticed before. It was subtle but it was there.\n\n The girls went about their usual teasing. Emily was soon in the water, but the near nakidity felt different. She wasn't exactly comfortable, but she wasn't exactly freaked out either. It was a change she was happy about even though she knew her mother and father wouldn't be.\n\n The scary incident in the pool earlier kept Billy pretty focused on his job, but he kept track of 'his girls' too. They were hanging out with the same group of teens, and the same boys were hovering near them, no doubt stealing glimpses of the nipples on almost-see-through display. Kathy absolutely loved it, teasing the crap out of them. Emily wasn't blatant about it, but she was getting more of a rush out of it than she did before. Who knows, a few more days and she might be puttin' 'em right out there like Kathy did. \n\n When the pool closed Billy had to jump in again to dowse his boner after Kathy and Emily did their usual drying off routine. It was even better than the first time \u2014 Emily didn't turn her back to him, so he got a very clear view of who the real Emily is. Damn! When did she become this  girl he wondered, thinking back to the tomboy clothes she wore when they were younger. The magic bikini erased any lingering vestiges of tomboy, that was for sure. \n\n After punching out for the day and pulling on his shorts, Billy walked with the girls to Kathy's car again, wondering if there'd be any more kissing. He thought about initiating something himself, but he wasn't quite there yet, still confused and a bit shell shocked by all the new sexuality in his life.\n\n \"Wanna walk around the park a little?\" Kathy asked when they neared her car.\n\n \"Sure,\" Billy said.\n\n Emily wanted to cover up. She and Kathy pulled on little shorts as they stood next to the car, but Kathy stopped her from putting on a t-shirt.\n\n \"It's too hot out,\" she said. \"You look good just like that.\"\n\n Billy agreed, but didn't say anything. Emily liked his look of silent approval, so she tossed the shirt back in the car and they walked off toward a shady grove of trees in the distance.\n\n \"Do you see lots of hot girls here at the pool Billy?\" Kathy asked. Emily was interested to hear the answer.\n\n \"Not really. Once in a while. Mostly it's...girls who like to eat,\" he said diplomatically.\n\n \"Did you ever have to rescue a pretty girl?\" Kathy asked.\n\n \"Not yet. Just kids so far. One today, just before you came.\"\n\n \"Really?\" Emily said.\n\n \"Yeah. It was kind of a crazy day,\" he said. It was the understatement of the year, considering the rescue, fucking Molly, two blow-jobs, and catching his mom getting fucked silly by one of the community's Christian leaders.\n\n They walked across a grassy knoll and came to a dense stand of trees. Kathy led them in. The shade was noticeably cooler.\n\n \"This is nice!\" she said as she led them to a pocket of white pine trees where the ground was carpeted with long, soft needles. \"Wow!\" she said, looking up at the towering trees. \"This is so beautiful!\"\n\n She kicked off her flip-flops and sat down. Billy and Emily did the same. Birds were singing and a chipmunk chirped its danger signal. The sounds of the city seemed to vanish and they felt like they were deep in the wilderness.\n\n \"I wanna kiss you both this time,\" Kathy said with a twinkle in her eyes, wasting no time.\n\n \"Kathy! Nothin' like sayin' what's on your mind!\" Emily said. There was a moment of silence. \"Whaddya mean both?\"\n\n \"This,\" Kathy said. She planted an open-mouthed kiss on Emily and palmed her bikini covered breast. Emily responded, exhaling deeply, but then pulled away.\n\n \"Kathy! What the fuck!\" she said, shocked and embarrassed. She glanced at Billy as a blush reddened her face.\n\n \"Come on! That was fun and you know it!\" Kathy said. \"Billy liked it. Guys love it when girls play.\"\n\n Billy didn't know what to say, but his smile gave away his feelings.\n\n \"Now you,\" Kathy said to Billy. She moved toward him and planted her lips on his smile. It was a forceful move and it pushed him down onto the carpet of pine needles. She was on her knees, and moved one of them between his legs, right up tight to the heat of his groin. Emily was once again stunned by her increasingly wild little friend. It was a wet, delicious kiss. Kathy didn't want to stop, but she knew she had to or she'd make Emily mad.\n\n \"You go,\" she said to Emily. Kathy's eyes flashed with lusty energy.\n\n Emily felt numb, but she moved slowly to Billy. He reached for her and pulled her down, gently, in what seemed like slow motion. As their lips fused together one of his hands went to the back of her thigh and pulled her more fully onto him. He kept his hand there, inches from her pussy. She breathed hard out of her nose as all her senses took in what was happening. Billy smelled like a man. His bare, muscular chest was warm against her little bikini top. The feeling of his fingers holding her leg like that, and the hard lump in his shorts...well, it all made her light-headed, like she was about to faint.\n\n Kathy didn't interrupt the way she did the last time they kissed. She sat silently, watching, wanting to see where it was going, how it would end, all the little sexy details. She had a lot of time to observe because it went on and on.\n\n \"Fuckin' hot,\" she said quietly when the passionate kiss finally ended. \n\n Billy and Emily agreed wholeheartedly, but neither said a word. Emily rolled off onto her back next to Billy. She didn't really want to get off of him, but thought she should. The two of them looked up through the tall, swaying trees at the blue sky above and felt a little dizzy, like the world was shifting under them.\n\n \"You and me again,\" Kathy said to Emily. She knelt next to her and kissed her softly. Emily didn't protest. She lay there quietly, still dizzy, reeling from it all, and kissed Kathy back. It was another kiss that lasted, and when their lips finally parted Billy could see their tongues flick together one last time. The look in the girls eyes made it pretty clear it was the beginning of something unexpected but wonderful.\n\n \"Fuckin' hot is right!\" Billy said quietly.\n\n Emily giggled, both for the obvious reason and because she'd never heard her Bible school classmate swear before. So much new was happening it was hard for everyone to keep up with.\n\n \"We shouldn't screw or anything, but we could play a little,\" Kathy said, still on her hands and knees next to Emily. \"Wanna?\" she asked.\n\n She put her hand on Emily's belly and moved it sensuously, her fingertips tickling the soft skin. She dragged her fingernails across Emily's ribs, right below the magic bikini. Emily's nipples responded, pushing out the thin fabric. Kathy's face gave away her delight at the response. \n\n The fingers swept back down to the top of the shorts again, raising goosebumps all over Emily's body. Kathy felt like she suddenly had magic powers, and it thrilled her.\n\n With Emily on her back, her thin waist opened a gap between her lower belly and her shorts. Kathy took advantage and moved her fingertips into the shadowy space. Emily's chest heaved. Kathy flicked the button open and lowered the zipper. Two more inches of lower belly flesh to play with, with a bit of super-soft fur. Kathy didn't push things. Emily was still Emily after all, and she was amazed things had gone as far as they had.\n\n \"Do me,\" Kathy said in a near whisper.\n\n She had her shorts off in an instant, and lowered herself down to the soft forest floor next to Emily. Billy, completely captivated and ever observant, could just make out the little racing stripe of pubes under her thin Bikini bottom, and the contours of her pussy lips. He'd seen it all at the pool when the suit was wetter, but now, reclined in a sun-dappled forest, it seemed even sexier.\n\n Emily sat up next to her friend, pine needles clinging to her back. She touched Kathy tentatively, but it was enough to trigger Kathy's own goosebump eruption, and her nipples burst forth in dramatic fashion. It made Emily smile. She mimicked what Kathy had done to her \u2014 the fingertips, the dragging nails. She found herself wanting to do more, which surprised her. Kathy raised her knees, with her legs spread just enough to be sexy. Emily took the hint and slowly dragged her fingernails up one inner thigh and down the other, coming tantalizingly close the Kathy's hot oven. Emily could have sworn she felt the heat rising off of it.\n\n Kathy's hormones had been switched fully on, and she wanted more. She reached behind her neck and untied the top of her bikini, lowering it off her firm, young tits. Billy swallowed hard. Would Emily shut this down, he wondered? Please God, no! I'll pray more later, but please, no!\n\n Emily continued, shocking everyone, including herself. She dragged her fingernails up Kathy's belly to the newly opened up playground, goosebumps erupting once again. Kathy's nipples were much darker and different from hers. She'd seen them before at various times when they were dressing, but never hard, never goosebumpy, never like this. Her fingers went right up the middle, through cleavage territory, onto Kathy's neck and then her face. Kathy looked like she could hardly stand it all, like it was glorious torture that she wanted much more of.\n\n Emily's fingers plunged down off Kathy's chin, down her neck and onto a breast, circling slowly around a sexy nipple, just barely avoiding the dark flesh. Down the slope she went, back up the other side to give the other pretty breast the attention it craved. That nipple took a direct hit, and Kathy's chest heaved. Ooo! Sensitive! Kathy was dying for more. Just dying!\n\n \"Use your mouth!\" she could barely whisper as her chest heaved. \"Please Em!\"\n\n There must have been something in the air that day, because Emily put aside all her usual inhibitions. Her head lowered to her sexy friend and she licked a nipple. Kathy gasped and shuddered a little.\n\n \"Suck on 'em Em!\" she said.\n\n Emily did. First one, and then the other. It was a strange sensation. The nipples were rubbery, and the tits oh so warm and soft. Kathy was digging it way more than Emily ever thought a person would, and that made Emily love it even more. As she sucked, her hands got involved, not only on the beautiful tits but on the body and on the legs, ending where these things usually end, on the hot pussy, but of course the thin bikini fabric was still there. It mattered not. Emily could feel the dampness and the heat just fine, and Kathy, well let's just say she'd never felt better in her life.\n\n Billy loved being the voyeur, but at a certain point he had to join in. He didn't know if the girls would approve, but it had to be done. His head joined Emily's, one tit for each of them, and his hand joined the fleshy exploration.\n\n \"Jesus!\" Kathy exclaimed quietly. The look on her face gave away her inexperience. She talked a good game, and was bold with the preliminaries, but this was all a first and it was truly blowing her mind.\n\n Emily was astonished to see Billy's hand slip under Kathy's bikini bottom. Her instinct was to yell something \u2014 Stop! or, Billy what the hell! \u2014 but it was so incredible, so out there beyond what she'd ever thought she'd see that day, she couldn't say a thing. Her head pulled away from her writhing friend's breast and she just sat there, holding Kathy's hand as the sexy little sprite had an orgasm. \n\n Emily couldn't believe it, and neither could Kathy. Billy had pinched her nipples and used his teeth on her, the way Molly liked. And his inexperienced fingers in her pussy didn't matter too much. Kathy was just ready, that's what it mostly came down to. Emily had wound her to the limit, and Billy released the spring. Whammo!\n\n \"God Billy!\" Kathy said breathlessly as she guided his mouth to her nearly trembling lips. \n\n After the kiss she lay there with her eyes closed, breathing hard, her legs all akimbo, her arms out to her sides.\n\n \"Fuck!\" she whispered.\n\n Emily looked at her beautiful heaving tits and wanted to kiss her, so she did. It was a sweet, loving kiss between friends. Friends with a new and special bond.\n\n \"Let us do you now,\" Kathy said as she descended slowly from the dreamy cloud she was on.\n\n \"No, I don't think...\" Emily said.\n\n \"Don't think. Let us,\" Kathy said as she sat up and removed the bikini top that was still fastened around her middle. \n\n She guided Emily onto her back on the ground, unfastened her shorts and pulled them off Emily's legs.\n\n \"Sit up,\" she commanded.\n\n Emily did and Kathy reached around her, untying the bikini top. Emily held it in place as she lay back, and left it lying lose on her breasts. Kathy started in on her, kissing her heaving belly as Emily looked up at the tall, swaying trees. Billy didn't know if he should join in \u2014 it was sweet Emily after all. Emily turned her head to him and smiled the most beautiful smile. It nearly melted his heart, and drew him to her lips.\n\n By the time the sublime kiss had ended Emily's tits were out in all their young glory. Billy had one firmly in hand, and Kathy was licking the perfect roundness of the other, making her way to the pinkest nipple in all the world. It puffed out in a lovely way \u2014 one of the reasons she looked so insanely hot in the magic bikini \u2014 and Kathy couldn't wait to feel it on her tongue. The beautiful pinkness of them had lured Billy too, and at almost the same moment both of the lovely things were engulfed by warm, happy mouths. Emily came very close to fainting again.\n\n Her back arched off the soft pine needles, pressing her lovely orbs harder into her friend's mouths, and she nearly came on the spot. Kathy had a feeling Billy might not be as bold with his old friend as he'd been with her, so she took his hand and guided it down to Emily's hot spot, pushing his fingers under the fabric, onto her soft, furry mound.\n\n Kathy did what her friend had done \u2014 she sat up, held Emily's hand, and watched the beautiful show. Emily though, was a tougher nut to crack. She was writhing beautifully, and loving what was happening, but a sweet orgasm wasn't hitting her. Nerves maybe? Bible school baggage? Too much stress from thinking that she needed to match what Kathy had done? Whatever it was, she needed a little more to send her over the edge.\n\n Kathy wanted to try something. Oral sex had fascinated her for a year or more of porn watching, and she was dying to give it a go. Boy-on-girl, and more recently, girl-on-girl porn had kept her up many a night. When she first suggested the play session in the woods that day she was thinking she'd try and get Billy's cock out, to see what using your mouth on one was all about. She never dreamed she'd get a chance to get her tongue on Emily's pussy. Not shy, conservative Emily. But here it was, the point in time when it just had to happen. The stars had aligned and it was right there, just a thin piece of fabric away, practically begging to be licked. Emily was far enough gone that Kathy was pretty sure she wouldn't flinch or pull away.\n\n Under the little bikini bottom Billy's hand was working gently. He didn't know about clits, of course, or really anything about what he was doing, so maybe that was the problem. Emily's knees were up part way, and slightly apart. Kathy knelt between them and pushed them down, spreading Emily wide. Just doing that seemed to help \u2014 maybe it let Billy in? For whatever reason, Emily moaned deeply.\n\n Kathy's mind was consumed by thoughts of Emily's pussy, and making her cum. There was no way she wasn't going in at that point, for all the marbles. She pulled the bottom of the little bikini aside and got her first look at the scene of the action, soft and glistening, almost golden, with Billy's fingers squishing through the wetness. The rawness of it all, happening right there in front of her, was breathtaking.\n\n Kathy dropped to her stomach, feeling the slight prickle of soft pine needles tickling her tender tits, and put her mouth on the extraordinary fleshy wet thing. When Emily felt her she whimpered so loud the chipmunk started chattering again.\n\n The first thing that hit Kathy was the smell \u2014 sweetly fragrant, unlike anything in her memory \u2014 and the taste \u2014 earthy, salty, somewhat sweet, and way more slippery that she expected. Billy moved his hand a bit, but stayed there, not wanting to completely give up his ground. \n\n Kathy's enthusiasm ramped up quickly though. Billy's hand was nudged aside, taking up residence on Emily's soft inner thigh and then going on a more general exploration, doing a good job of keeping the goosebumps alive. Emily's tits, of course, were still being ravished by Billy's mouth. It seemed he couldn't get enough of them.\n\n Emily was flying. She had no comprehension of the outside world. Everything was a wonderful, glorious blur. Without even realizing she was doing it she'd become quite vocal. Her body was alive like never before and she made wonderful noises because of it. Billy loved it, and Kathy did too.\n\n Unlike Billy, Kathy knew about clits. She knew just where to rub on herself when she watched porn, and she knew just where to work on Emily with her tongue. A mumbling, nearly out-of-control orgasm was the result. It was Emily's first. She'd played with herself a little in her bedroom, just experimenting, but never all the way to orgasm. The rip-roaring fire-breathing one she'd just had was a whole new world.\n\n Eating pussy had fired up Kathy's horniness to epic levels. There was a huge tent in Billy's shorts that needed attending to, and it wasn't far away. As she gasped for air after working hard on Emily, she reached for it, sliding her hand up inside the leg of his baggy shorts. She was stunned when her fingers landed on hot, bare cock.\n\n You see, jumping in the pool to cool Billy's hard-on had left his speedo wet, so he had taken it off in the pool-house changing room and gone commando under his shorts. Kathy was touching a hard cock for the first time in her life, and a big one at that. \n\n Emily was just coming back to reality, eyes drifting open and closed. By the time she was focused a little, Billy had undone his shorts and Kathy had them pulled down, freeing the big thing.\n\n \"Oh God!\" Emily whispered when she saw it. The size of it astonished her. Kathy was astonished too, in the middle of her own 'Oh god!' moment, wanting desperately to feel the big thing in her hand again.\n\n Billy kicked off his shorts, and the girls both thought they must have be dreaming. Sexy Billy Carpenter, sitting naked in the woods, with an absolutely massive hard-on!\n\n Kathy was like a zombie with one thing on its mind. She was desperate to know what a hard cock would feel like in her mouth. No thoughts of how Emily would react clouded her mind. She just zeroed in on it and filled her mouth with it.\n\n A low, grunting \"Oh!\" was all Billy said.\n\n Emily watched. She was still a bit dazed from her orgasm, but the new sight sobered her up a bit. Billy was beautiful. She sort of knew that already of course, but naked, in all his aroused glory, he was just stunning. The man of her dreams. And her best friend was blowing him.\n\n She got on her hands and knees and joined Kathy. Kathy smiled and handed off the big piece of meat. Emily was shocked at the feel of it \u2014 how hard, how silky, how hot, and how freakin' long it was!",
        "The two girls traded licks and gentle sucks. It was definitely beginner stuff \u2014 Billy knew that because it was very different from Molly's rotating stroking and deep throating \u2014 but it still felt incredible. And it was two girls at once! God yes! He'd snuck up on heaven again!\n\n Billy lasted a while longer this time. It wasn't an epic long time, but cumming three times earlier in the day tempered his hot cock a bit. He was glad he was able to last because it gave the girls time to get more comfortable with the situation. Nervous giggles gave way to relaxed laughter as they played with their new toy. A look of astonishment, surprise and wonder never left their cute faces.\n\n Kathy was the more experienced of the two, even though she'd never touched a cock before. Porn watching had given her lots of insight, and her mind reeled as she tried to remember everything she should be doing. Emily mimicked her, and the two of them learned as they went, Kathy often asking Billy, \"You like that?\" and Billy always replying, \"Oh yeah!\" in a deep, sexy, moaning voice the girls loved.\n\n After a good long time Billy came. He was in Emily's mouth, and Kathy was sucking on his balls. Billy's moaning and tense body made it clear to the girls he was close, and then Emily felt the big rod throb in a new way. She let it free of her lips just in time, and marveled at the distance the first ribbon of cum flew.\n\n \"In your mouth!\" Kathy almost screamed.\n\n She knew that was the way the sexy porn girls did it, and she also knew Emily wouldn't do it, so she grabbed the throbbing cock and aimed it toward her mouth. Cum splattered Kathy's excited face before she could get her lips around the spurting monster. Billy grunted when her wet mouth engulfed him, and he watched as she slurped up his slippery seed.\n\n \"Good Lord!\" Emily whispered as the gloriously messy scene unfolded.\n\n \u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n The next morning Emily rode her bicycle to the church to see Billy. She was nervous about seeing him, but felt a strong need to be close to him. Some of it was a feeling that she needed to get the upper hand on Kathy, since Kathy seemed to be leading the way sexually.\n\n \"Hi Billy,\" she said sweetly when he answered the door.\n\n \"Oh, hi!\" he said happily. \"I'll be right out.\"\n\n Billy knew his mom wouldn't approve if he invited Emily into the apartment when she was working, so he pulled on a shirt and went outside. They walked to the children's playground, out beyond the parking lot, so they could talk.\n\n \"We kinda got crazy yesterday,\" Emily said shyly as they walked.\n\n \"Yeah,\" Billy said, choosing his words carefully. \"Did you...I mean, was it all right? Did you like it?\"\n\n \"Yeah. I liked it a lot,\" she said. \"You?\"\n\n \"Yeah! I've sort of...thought about you like that for...a while.\"\n\n \"Me too,\" Emily said. \"I didn't really picture it as a threeway though.\"\n\n \"Yeah, that was...crazy,\" Billy said. His face gave away his delight.\n\n \"You liked it, didn't you,\" Emily smirked, showing the first crack in her nervous seriousness.\n\n Billy smiled. It was a big, shy sort of smile.\n\n \"Billy Carpenter! What am I gonna do with you,\" Emily smiled shyly.\n\n Billy could think of a few very good things they could do, but not within view of his mother's office window.\n\n \"So what about Kathy?\" Billy asked\n\n \"What about her?\" Emily asked, with a tinge of jealousy in her voice.\n\n \"Are you guys...cool? I mean that was wild.\"\n\n \"Oh. Yeah I think so.\"\n\n \"That wasn't something I expected between you two, that's all.\"\n\n \"Yeah, I know. Maybe it'll be weird a little bit. I don't know yet.\"\n\n \"Maybe it'll be really good,\" Billy said.\n\n \"Maybe,\" Emily said, unable to hold back a sweet smile. It faded before she continued. \"Are you gonna get with her when I'm not around?\"\n\n \"Not if you don't want me to,\" Billy said.\n\n \"She's a virgin too you know,\" Emily blurted out.\n\n \"Yeah, I kinda figured.\"\n\n \"Really? I thought boys would think she's experienced, because of how she acts.\"\n\n \"No, you can sorta tell.\"\n\n \"Oh God, then everyone can really tell with me!\" Emily said, looking slightly horrified.\n\n \"No! I mean after yesterday, maybe not so much,\" Billy said.\n\n Emily smiled. It was a sweet smile, but with a new sexiness that Billy hadn't seen before. Billy wanted to kiss her, so he did.\n\n Laura was in her office, glancing out at 'the kids' when it happened. The sight took her breath away and choked her up. Tears welled in her eyes. It was an emotional scene for her to see, especially right there on the children's playground. Her little boy was becoming a man right before her eyes.\n\n \"Billy!\" Emily exclaimed softly when the kiss ended, knowing it was a big moment for him to do such a thing right there at the church.\n\n Billy smiled, not knowing what to say.\n\n \"Wanna work in the garden a little?\" he finally said, breaking the beautiful, silent spell.\n\n The two of them pulled weeds in the front flower beds. Laura brought them some lemonade.\n\n \u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n Two days later, at eleven in the morning, Billy had his cock deep in Molly again, and this time the whole crew was watching. It had started similar to the last time \u2014 walking out in robes, climbing onto the bed, spooning. But there was no blanket, and the lights were a little brighter. Billy felt strangely relaxed. He felt like he knew Molly really well, and the rest of the crew was the same each time, so he felt pretty comfortable with them. Having sex with the girls in the middle of the day in the woods had boosted his confidence too. Sex was really fun, he thought, and everyone looked so good doing it.\n\n So there he was, on his back. Sexy Molly was bouncing on his long rod, whimpering with delight. Some of her noises reminded him of Emily and Kathy. Girls make awesome noises, he thought. Molly's tits were so different though. Bigger and softer and jigglier, with huge brown areolas and nipples that stuck out a whole inch. And the way she was riding him, with a sex lover's enthusiasm, well, those beautiful tits were bouncing like crazy. It was an extraordinary sight for young Billy to see. He was breathing hard and had a huge smile on his face. Molly was smiling too.\n\n \"God Billy!\" she said breathlessly, looking at his beaming face. \"I've never seen a man so happy when he's fucking.\"\n\n \"Put your hands on those big tits Billy,\" Tucker said. \"Squeeze 'em hard!\"\n\n Billy corralled the wildly flailing thing in his big hands.\n\n \"Oh fuck!\" Molly said, and she broke into a laugh as she rode the smiling lad hard. Billy never stopped grinning, and Molly never stopped laughing. Eventually her body slowed but the laughing continued as she dropped to Billy's embrace.\n\n \"That was too much!\" she said happily, gasping for breath.\n\n \"Fantastic!\" Tucker chuckled. \"Happy porn. That's what we like around here.\"\n\n Hearing the word 'porn' threw the fear of God into Billy for a moment, but he wasn't a dumb kid, he pretty much knew what he was in the middle of. It surprised him, whenever he thought about what he was doing, but it was like some kind of a drug. Molly was like some kind of a drug, and he was already addicted.\n\n \"Jeez, I'm surprised you lasted through that one Billy,\" Tucker said. \"Molly told us you're new to everything. Most guys your age pop pretty quick.\"\n\n \"I may have taken the pressure off before we started,\" Molly said mischievously.\n\n \"Oh sure, you don't let the camera in on that!\" Tucker said kiddingly. \"I'm gonna have to watch out, you guys'll run away together. Well I can't believe you've got long to go before the first pop, so how about a tit fuck. It's a nice cock for that.\"\n\n Billy had no idea what Tucker was talking about. Molly smiled at his innocence.\n\n \"I'll show ya honey,\" she said. \"Let me lie down there and you straddle me.\"\n\n Molly guided Billy over her, the first time his big, sticky erection had been on full display to everyone. Marsha finally got the full picture of why Molly loved the kid so much.\n\n Molly pushed his knees apart to lower him and had him lay his cock between her tits.\n\n \"Let your spit fall on it baby,\" Molly said. \"Get it nice and wet and slippery.\n\n She spit on her hand and helped him, stroking all the wetness into her favorite new cock.\n\n \"Do it again,\" she said as Billy lubed things up. \"Get my tits all wet. Yeah, that's it. Now watch.\" She pushed her big orbs together and enclosed the hard sausage. \"Move now. Fuck my tits.\"\n\n Billy started moving. The look on his face was priceless, and Molly laughed again, a deep, sexy laugh that Billy loved.\n\n \"Isn't that awesome?\" Molly said. She was smiling and her eyes twinkled as she watched the long hunk of man meat appear and disappear from her softness. \"Oh fuck that's hot! Tell me when you're gonna cum baby.\"\n\n Billy was astonished at what was happening. He'd never seen anything like it on Danny's phone. It was a almost unbelievable sight, and an extraordinary feeling. He didn't last long.\n\n \"I'm gonna!\" he said.\n\n Molly lined up her open mouth and Billy let loose, shooting right onto her tongue as his thrusting continued. He threw his head back, groaning at the ceiling as his balls emptied. He looked down at Molly, her tongue circling, spreading the warm lip gloss all around her smiling mouth.\n\n \"Best tit fuck ever,\" Tucker said. \"Great stuff. Take ten everybody.\"\n\n \"God Billy, you're gonna spoil me,\" Molly said. Marsha handed her a towel and walked away with the others. \"I don't know when I've had so much fun. It all feels brand new again when I'm with you.\" She used the towel on Billy's cock and on her tits, cleaning up the slippery mess. \"So what's up with your girlfriend? Any progress?\"\n\n \"Yeah, lots. She's got a friend, and they've been coming to the pool. They've got these little bikinis...\" he said, getting a far off look in his eyes.\n\n \"Ahh, the old hot bikini in front of the lifeguard trick,\" Molly smiled. \"I know it well.\"\n\n \"So Kathy \u2014 that's Emily's friend \u2014 she kind of makes things happen, you know? We ended up in the woods across that big field behind the pool.\"\n\n \"Who, you and the friend?\" Molly asked.\n\n \"No, all three of us.\"\n\n \"Ooo! This is gettin' interesting!\" Molly said. \"So wait, didn't you say your girlfriend's a virgin?\"\n\n \"Yeah, all of us are,\" he said. \"Well, not me anymore.\"\n\n \"Oh, honey! Do you wish you'd waited? To be with Emily?\"\n\n \"No!\" Billy said firmly. Molly pulled him to her and hugged him.\n\n \"You're so sweet,\" Molly said. \"So what happened in the woods.\"\n\n \"Lots of oral stuff, and tits. It was awesome!\"\n\n \"A threeway in the woods! Damn, you're gettin' it goin', huh?\"\n\n \"It was pretty sweet,\" Billy said, reliving it all in his mind.\n\n \"So whaddaya wanna do with me today?\" Molly asked. \"Anything you're curious about?\"\n\n \"Can I...lick you?\"\n\n \"Yeah! I want you to. How about doggie style too? I'm dying to get you way deep in me like that.\"\n\n \"What's that? I mean I think I know, but...\"\n\n \"Like this,\" Molly said as she got in position. \"See my pussy back there?\" she said, showing him with her fingers. \"You'll get on your knees behind me and just stick it right in there. It'll go right in, a little at a time. Once you get it in you just fuck. It's awesome, trust me. It can be done different ways too. You can do it standing up. Here, I'll show you.\" Molly got off the bed, bent over and arched her back. \"See? Sexy, huh? Or I can be on the edge of the bed on my knees with you standing up. There's lot's of variations. We'll do it all eventually. You can use your mouth too, lick me back there before you put your cock in. Don't be afraid of what you're licking back there, everything feels good. God I love that I make you horny,\" she said, admiring the big erection that had sprung up as Billy watched her demonstration.\n\n Billy's heart was pounding. He wanted to do it all now!\n\n \"So the licking...on the front. I've never done that.\"\n\n \"Oh. Not with the girls the other day?\"\n\n \"No. They did it to each other.\"\n\n \"Really! Wow! Nice! You got some hot little numbers there.\"\n\n \"It was their first time. They were sorta figuring it out.\"\n\n \"Did they?\" Molly asked.\n\n \"Oh Yeah!\" Billy said, grinning slyly. \"And then they did me.\"\n\n \"Blow-jobs? Nice!\"\n\n \"I wish you could show them how. I mean it was really good, but...how did you learn?\"\n\n \"Oh jeez, just years of futzing around. I don't know. It wasn't 'till I started watchin' porn that I saw how it was supposed to be done I guess. There's no real set way though. It's all good. So you want me to help you when you eat my pussy? Show you where to lick and stuff?\"\n\n \"Yeah, can you?\"\n\n \"Sure honey. It'll be fun. We'll do that and then Doggie, all right? I'm not goin' home without that,\" Molly smiled.\n\n The crew came back in, Molly told Tucker the plan, and pretty soon Billy was gorging himself on his first pussy feast. The photographer circled around clicking photos, Molly gave expert instruction, and she had one sweet mother of an orgasm. Billy felt like a little-leaguer who'd just hit a grand slam.\n\n Doggie style quickly became Billy's favorite thing in the whole world. He loved the taste of Molly's pussy so much he did what she'd suggested and started with his face between her ass cheeks, licking every part of her. Molly looked so incredible like that \u2014 ass in the air, shoulders down, back arched \u2014 he could have stayed there all day. But his cock started asking for more, so he went up on his knees and sunk the aching thing as deep into Molly as it would go. She was asking for it every inch of the way, dirty, nasty talk that was like music. When the deep fucking commenced her body was alive \u2014 possessed almost \u2014 with a fiery, carnal spirit. She cared not where they were. She wasn't posing. She wasn't acting. It was raw, pure sex of the highest order. The camera just happened to be there to capture it all. After the session she asked Tucker if he could make her a framed print of the doggie style action. He picked a shot with Billy's sweaty muscles flexed, Molly's mouth open and her eyes rolling. One-five-hundredth of a second of orgasmic bliss. A freeze-frame that proves heaven is real. It hangs in Molly's bedroom.\n\n \u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n \"Rejoice!\"\n\n \"Rejoice!\"\n\n \"Rejoice!\"\n\n The choir sung with fervor on Sunday morning. The church was always well attended and the services were energetic and uplifting, with lovely singing and a talented group of musicians leading the modern style Christian worship, led by the beautiful guitar fingerpicking and strumming of Pastor William's wife Bonny.\n\n Emily was there with her mom and dad, and Billy broke with tradition by sitting with her. Laura noticed of course, from her position at the pulpit. Emily's mother noticed too. It wasn't so much where Billy sat that caught her eye, it was the tight pants he had on, two-year-old dress pants he'd pulled from the back of his closet without his mother knowing, thinking Emily would like the way they showed off his muscular thighs and his bulge. She did. She loved the way the tip of his tie flirted with the bulge as he sat there, like a long, colorful tongue having a lick.\n\n Pastor Laura and Pastor William delivered the day's sermon together, a well choreographed back-and-forth about resisting Satan's temptations and reveling in God's glories. Billy didn't pay too much attention; he was too busy stealing glimpses down Emily's pretty church dress, being careful to use only his eyes and not move his head. She wore a lovely pink bra that day, and her tits were so smooth and beautiful.\n\n That same evening she rode her bike back to the church to see Billy. He hadn't seen his mom in a while \u2014 Sunday, of course, was Laura's busiest day \u2014 so he pulled Emily into the apartment for a quick, passionate kiss and some through-the-clothes fondling. They both got worked up pretty quickly and knew they shouldn't continue, so they went outside.\n\n Billy wanted to ride their bikes to some vacant land down the road, so they could be alone, but Emily couldn't stay long, so they just walked around the church grounds. It was another hot day. Billy knew there were some ice cream bars in the big freezer in the church's kitchen, so they went inside the deserted building and walked silently down the dark hall. Billy heard his mom's voice, giggling a little, and a deep, male laugh. The kitchen was lit up down at the end of the hall, and Billy stopped short in the darkness, grabbing Emily's hand to stop her too, when he saw his mom squeezing the Haitian refugee janitor's ass as the two of them giggled their way into the supply room and closed the door.\n\n \"Billy what's going on?\" Emily whispered. She looked shocked, like she already knew the answer.\n\n \"Don't tell anyone,\" Billy whispered as they retreated back down the hallway. \"Not even Kathy. No one, all right?\"\n\n If Mom's doing it we might as well do it too, Billy thought, so he stopped at the far end of the hall, in a dark little alcove where he could keep an eye on things. He kissed Emily.\n\n \"Billy, not here,\" Emily said.\n\n \"Yes. Here,\" he said, placing Emily's hand on his growing bulge.\n\n \"Billy, what am I gonna do with you?\" she whispered, and she kissed him again.\n\n Billy unfastened his shorts and pushed them down a little. Emily couldn't believe her eyes.\n\n \"Right here?\" she asked with big surprised eyes. She didn't wait for an answer and grabbed hold of Billy's hot meat. She'd been dying to feel it in her mouth again ever since that day in the woods, so she dropped to her knees and took it in, moaning a quiet song even more beautiful than the choir.\n\n Billy came quickly. Emily heard Kathy's voice in her head \u2014 \"In your mouth!\" \u2014 so she let Billy's offering flow, gushing warm and sweet onto her tongue. Kathy had swallowed it, so Emily did too. It felt like pure energy going down her throat, like the spirit of womanhood had suddenly filled her insides.\n\n After a sensual kiss and some tit fondling there was a noise from the kitchen down the hall. Billy's mom's quickie was quite quick, so Billy pulled up his pants. Emily had a wonderful look of surprise on her face, like she couldn't believe what they'd all just done. Right there in the church!\n\n \u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n A few days later the girls were at the pool again. The heat wave had broken; there was more room to actually swim, so they took advantage, and Kathy \u2014 looking beautifully slutty that day in waterproof lipstick and eye makeup\u2014 delighted in floating on her back, showing off the hard nipples and pussy contours under her see-through bikini to all the males in attendance. Emily, feeling more like a sexy woman with each passing day, joined in the fun. Billy leaned forward to cover his hard-on with his arms, but after a while he gave up the hiding, sat back, and got a secret thrill when he caught a few older women looking at it.\n\n When Billy's shift was over Kathy was almost jumping up and down with excitement as she organized the trek to their magical spot in the woods. She was about as horny as a person could be, but the others were close behind. She hadn't discussed with Emily what she wanted to do when they got there, thinking Emily might not approve, so there was a reason for her extra level of nerves and horniness.\n\n When they reached the idyllic spot it was just as wonderful \u2014 dappled sunlight, chirping birds, frolicking chipmunks. Kathy added to the wonder by immediately asking Billy to remove her bikini top. He stood behind her and did it, of course, and Kathy took his hands and cupped them on her nice tits. She let out a breathy moan that had been building all day.\n\n Emily shook her head at her friend but wasn't really surprised, a fact that was given away by a little smile. She smiled bigger when Billy approached her. She turned away from him so he could strip her breasts too, goosebumps rising on her flesh when he did. She just about melted when his hands cupped her and he kissed the side of her neck. He'd learned that move at Tucker's studio.",
        "Billy's cock was free under his baggy shorts again, his wet speedo safely tucked away in his backpack. The two topless girls had him plenty hard, and Kathy wasted no time. With his shorts around his ankles two warm mouths engulfed his hardness and his smooth balls. He was back in heaven again, floating on a puffy white cloud with two angels.\n\n After some lovely sucking Kathy backed off and watched for a moment. Emily looked so beautiful with a cock in her mouth.\n\n \"I brought something,\" Kathy said, with a little devilishness in her voice and eyes.\n\n She reached in the pocket of her shorts and pulled out six condoms, unfolding them like an accordion.\n\n \"Kathy!\" Emily gasped, with big, surprised eyes. She was disappointed with herself for saying it. She had hoped she'd gotten beyond the exclamations of protest, but this, this was big.\n\n \"What! I don't know about you, but I don't wanna be a virgin anymore. You can do what you want,\" Kathy said to Emily.\n\n Emily wanted to say 'Holy shit!', but she didn't. Of course she wanted Billy to fuck her. She just didn't think it would happen with Kathy around. And she was sure Billy was a virgin too. She wanted to be his first. She'd always thought she would be.\n\n \"Me first,\" she said, surprising herself and the others.\n\n \"That's the spirit!\" Kathy said. \"And I get to watch!\"\n\n Kathy's eyes were almost spinning with excitement. Hormones were coursing through her at an unprecedented rate. Emily was more nervous, but her hormones were pumping too. She was still on her knees with Billy's cock in her hand, so she let the big thing back in her mouth, slow and sensual as she thought about it fucking her. It was awfully big. How could it go where only slender fingers had been? Maybe that's why it's supposed to feel so good. But oh my gosh it's big! Are they all like this?\n\n Emily's sweet mouth, and the thought of fucking the two girls, was too much for Billy \u2014 his cum gushed and his knees went weak.\n\n \"Shit Em!\" Kathy said, amazed that her friend had taken the mouthful and swallowed it, and worried that Billy would wither.\n\n \"It's okay. I'll last longer now,\" Billy said as he caught his breath. Emily thought she knew what he meant, and she wondered how he knew it.\n\n Kathy kissed Emily, tasting the cum in her mouth and giggling. She fumbled with Emily's shorts, and when they were pushed down she unfastened her own. She stripped them off along with her bikini bottom. Billy and Emily froze for a moment, looking at her in all her naked glory.\n\n Billy dropped to his knees and pulled down Emily's bikini. He only got it halfway down before his mouth was drawn to her pretty pussy. Her knees went weak when he made contact.\n\n Billy licked through her wet slit, holding her swooning body up with his strong hands hooked around the back of her thighs, his long fingers right up in her crotch. She was suddenly on that cloud in heaven too! Having Kathy lick her pussy the other day was one thing, but Billy sucking her soft folds into his mouth, that was a whole 'nother thing!\n\n \"Turn around and bend over,\" Billy said softly, his lips glistening with Emily's wetness.\n\n \"What?\" Emily said. She couldn't believe what she was hearing, or what she was thinking.\n\n \"Turn around,\" Billy said as he spun her little body in his hands. \"Bend over.\"\n\n Emily did it. She was breathless and thought she was dreaming. Billy's mouth moved in and picked up where he'd left off, licking deeply through the wet pussy.\n\n \"God!\" Emily whimpered.\n\n Kathy was transfixed by the goings on, but she sensed the overwhelmed unsteadiness of Emily's body and moved to her, taking her hands. Kathy dropped to her knees so she could be face-to-face with her. Emily, moaning breathily, looked at Kathy with lusty eyes. Their mouths met in a wet, sloppy kiss. Emily was on the launchpad, ready for lift-off.\n\n Billy used all the licking tricks Molly had showed him. He'd found Emily's little clit pretty easily, and was giving it a nice, slow massage with his long tongue, the way Molly liked. He was thrilled to see it all worked on Emily too, and she came hard, her arms wrapped around Kathy's shoulders, her body wracked with deep, uncontrollable tremors. It was sweet.\n\n \"Fuck her now. Just like that,\" Kathy said, before Emily had even begun to recover.\n\n Billy loved the idea, and reached for the condoms on the ground. He ripped one open and looked at it, trying to figure it out.\n\n \"Roll it on,\" Kathy said.\n\n He tried one way with no luck, but the other way worked. Emily was still in position, breathing hard, wondering. Would it fit? Would it hurt? What was going on back there, did Billy even want too? Then she felt it, something there, something pressing, something going in!\n\n The condoms were lubed, and Emily was sopping, so the big thing slipped into the tightness. Billy felt pressure and thrust his way past. Emily squealed and tears welled up in her eyes.\n\n \"It'll be good in a minute,\" Kathy said quietly, her face just inches from Emily's. She was just guessing, but it seemed like it might be true.\n\n Emily suddenly wished they'd done it differently, so she could see Billy. Did he hurt too? Were there tears in his eyes? Did it feel the same to him, that pain?...oh my God! That's not pain anymore! Shit! God damn!\n\n Billy was halfway in and going deeper. Emily's sweet little ass was all his and looked...well there were just no words! His hands were on her hips and she started rocking back to him, meeting his short, deepening thrusts.\n\n \"Fuck!\" she muttered breathlessly, the first swear word she'd ever spoken. She wondered how much more there was of Billy, how much deeper he could possibly go.\n\n \"Take it Em,\" Kathy said quietly. \"Take it all.\"\n\n Soon they were fucking beautifully \u2014 deep, long thrusts met by Emily's rocking hips. She was nearly out of it, her brain seemingly drugged by heroin, as Billy's cock made her fly.\n\n Billy was flying too. Emily's insides felt different than Molly's. Her young pussy squeezed him so much more. His hopes for lasting longer after the blow-job were somewhat dashed by Emily's heavenly tightness. And then there was just the sight of her. The girl he'd long been crazy about was fucking him! Yes, he was fucking her, but she was fucking him too, moving enthusiastically, muttering those incredible sounds girls make. Emily's sounds. I'm fucking Emily!\n\n That was all she wrote. Billy came hard, jerking spastically against the sweet little ass as he hung tight to her hips. Feeling him go was the tipping point for Emily, and she came with a shudder. A warmth she'd never felt before flooded her, like Billy's energy had suddenly filled her bloodstream.\n\n \"Holy shit!\" Kathy said, holding up her rag-doll limp friend.\n\n As Emily's raging hot blood settled she stood and turned to her lover, glancing at the beautiful perfection of him before melting into his arms. It was a kiss neither one of them will ever forget.\n\n \u2014\n\n Fifteen minutes later Billy was on his back on the soft pine needles, with Kathy bouncing on his hard cock like she was possessed.\n\n \"Quieter Kathy!\" Emily implored her. \"Quieter!\"\n\n It had started slowly, with Kathy getting nervous, and then getting embarrassed by her nerves. Some kissing, caressing and tit play \u2014 from both Billy and Emily \u2014 calmed her, and she climbed into position. Her small size made the big cock seem even bigger, which didn't help her nerves any, but Emily helped line things up and guided her down. The jolt of pain shocked her when Billy thrust in, but it made her lightheaded and a look of euphoria gradually spread across her pretty face. It wasn't long before she was bouncing, and Emily was trying to quiet her down.\n\n \"There's people in the park you know!\" Emily said, unable to hold back a smile. \"You wanna get thrown in jail?\"\n\n \"I don't fuckin' care!\" Kathy exclaimed loudly as she bounced. \"Oh God I love it!\"\n\n Emily had a feeling she was witnessing the birth of a slutty little sex-pot, right there in those lush, verdant woods. She just hoped all of Kathy's attention wouldn't be focused on Billy. And speaking of Billy, where did he learn all this lover stuff? As Emily watched his big cock slide in and out of Kathy, and she thought about all the rest of what had been happening...jeez, he must be watchin' porn! But how can he do that without a computer or a phone?\n\n Kathy had a melt-down-big orgasm, flailing around and finally holding Billy's big shoulders while her hips went wild and her pussy burned up. It was a totally addicting feeling and she wanted more right away. Billy really did last longer that time and didn't cum, even though Kathy had a super tight little pussy.\n\n \"Do doggie,\" the little minx said breathlessly as her pussy popped off the latex covered cock. She assumed the position on the ground.\n\n Damn! That's what Billy thought when he saw her like that. Damn! He plunged his nearly overheated cock in and fucked the shit out of her. Emily couldn't believe her eyes. Kathy, she just howled like a banshee, loving every second of it. Billy came one last time, and Kathy did too.\n\n \"You're gonna get us arrested!\" Emily said as she put on her bikini, genuinely worried about all the noise the two of them had made in the city park.\n\n \"Maybe the prison guards'll fuck me,\" Kathy said, and then she laughed, lying sweaty on her back, arms over her head, chest heaving.\n\n \"Good Lord!\" Emily said. It was her mother's favorite saying. \"Seriously, put your clothes on you guys. Do you have any idea how loud you were?\"\n\n \"No,\" Kathy said with a dreamy smile, still breathing hard. \"I don't.\"\n\n Emily tossed her bikini to her and she reluctantly put it on, brushing pine needles off her sweaty skin as she did.\n\n \"We're not virgins anymore,\" she said, and a big, beautiful smile lit up her pretty face.\n\n Billy smiled at his two girls. God he loved sex.\n\n \u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n \"So Billy, are we ready to jump into video work?\" Tucker asked. The two of them were sitting in his office at the studio. \"That's where the good money is \u2014 four or five-hundred for a two hour session \u2014 and I'll be honest with ya, if we stick with stills there won't be a lotta hours. There's just not as much demand for that kinda stuff. Video though, I can pair you and Molly up for all kinds of fun stuff. Got plenty of other nice girls for you to work with too. Group sex stuff, orgy, whatever you're into.\"\n\n \"Other girls?\" Billy said, sounding like he was interested and terrified at the same time.\n\n \"Yeah, we got a bunch of 'em. And when you get a little more experience you can work with the amateurs. We often bring in women off the street who wanna give it a try. Molly started that way. I met her at the pool a few months ago. You'll be terrific for that. When a sexy older amateur lays her eyes on you there'll be fireworks. Here, let me show you some of our girls...\"\n\n Billy looked at still pictures and a few video clips. As he watched the videos he was fascinated by the men as much as the girls, watching them to see what he could learn. A couple of the girls though, they caught his eye. One in particular really had his attention. Molly walked in and noticed the still pictures out on Tucker's desk.\n\n \"Hey, no fair,\" she said. \"He's mine.\"\n\n \"Don't worry Molly, I've got plenty planned for you two,\" Tucker said. \"But it seems he's got a taste for redheads.\"\n\n \"Alice? Oh she's nice honey,\" she said to Billy. \"I guess I can share.\"\n\n \"So we good with the video Billy?\" Tucker asked.\n\n \"Yeah, I guess,\" Billy said.\n\n \"All right, I'll work up a contract for it. Keep everything legal, you know? Now you two, none of that takin' off the pressure bullshit in the backroom. Save it all for the cameras, okay?\" Tucker said with a smile. \"We'll make the first set-up a nice cumshot, and then we can get on with things. God I wish I could get hard as easy as these kids do.\"\n\n \u2014\n\n Molly \u2014 wearing a beautiful evening dress and a pearl necklace \u2014 had Billy's waiter uniform pants open. His room-service cart was next to the hotel style bed, and he was sitting on the edge of the mattress, leaning back on his elbows. His big cock was in Molly's hands. She was spitting on it to lube things up, and proceeded to give Billy the mother of all hand-jobs \u2014 a two-fisted affair with one hand twisting one way and one hand twisting the other, both of them moving up and down. It was a devastating technique, and Molly was giving it her all. Billy blew like a geyser. When they cleaned things up after the scene Marsha had to wipe cum off the top of Molly's head. They all laughed about it.\n\n The highlight of the days session, from Billy's point of view, was a nice, leisurely sixty-nine. Now that was something he hadn't imagined! And he was glad somebody had! He couldn't wait to try it with Emily and Kathy. Maybe the two of them could do it to each other! And maybe...holy shit, do you think?...maybe I could get my cock in there, while they're doing it! Billy was a creative thinker, and the puzzle-like possibilities of this sex stuff seemed endless.\n\n The room-service hotel room scene left Molly worn out and smiling. Up against the wall, missionary, doggie, Billy thrusting into her mouth while she was flat on her back. They even ventured into the kinky stuff a little, fucking with a butt plug in Molly's ass when she was on her back with her knees by her shoulders. Billy fucked her long and fucked her hard that day. The crew applauded when it was over. Tucker had never seen such a natural young talent, especially one that looked as good as Billy.\n\n Lying on the bed, basking in the afterglow after the crew left, Molly asked about Billy's girls.\n\n \"You fucked them both?\"\n\n Billy smiled but was a little embarrassed. He knew it wasn't the normal thing to do with your first girlfriend.\n\n \"Shit Billy! You're a fuckin' wild man!\" Molly said. \"Did we make you that way?\"\n\n \"No, I think maybe it woulda happened anyway.\"\n\n \"Where were all the guys like you when I was a kid?\" Molly said, shaking her head.\n\n \"How old were you when you...\"\n\n \"My first time? Seventeen. Almost eighteen, so about you guys age. It was an older guy though. My tits got really big really fast, and older guys were really into me. Funny how that works. Anyway, it was my boss at a supermarket job I had. I wasn't even legal, and he wanted me to be his girlfriend. It was fucked up so I quit.\"\n\n \"How was it?\"\n\n \"My first time? Not very good. I'm sure Emily and Kathy are way happier.\"\n\n \"They seemed happy,\" Billy smirked.\n\n \"Yeah! If you fucked 'em like you fucked me today...holy shit! So what are their bodies like? Different than me?\" Molly asked. She took Billy's hand and put it on her tit.\n\n \"Yeah,\" Billy said. \"They're both...petite I guess you call it. Is that the right word? Small. Kathy's real small. Not their...tits. I don't mean that.\"\n\n \"Yeah, I know honey. They got nice tits?\"\n\n \"Yeah,\" Billy smiled. \"Not like yours, but really nice.\"\n\n \"What's different about 'em?\" Molly asked, enjoying Billy's gentle squeezing of hers.\n\n \"This part's smaller,\" he said, outlining her big areola with his finger, and this part doesn't stick out as much, but they get real hard like yours. Kathy's are real dark, and Emily's are sorta pink.\"\n\n \"Nice. Are they sensitive like mine? Did you try pinching their nipples?\"\n\n \"Yeah,\" Billy smiled. \"That was good.\"\n\n \"Did you try anything else I showed you?\"\n\n \"Yeah. I licked Emily before I fucked her. I made her cum like you did.\"\n\n \"Whoa! Fast learner! I'm gettin' jealous of these little foxes.\"\n\n \"I licked her bent over, like you showed me, and then I fucked her like that, standing up.\"\n\n \"Oh my God! That was her first fuck! A little petite thing with your big cock? Jesus!\"\n\n \"What, was that bad?\" Billy asked.\n\n \"No honey! I just can't imagine! Wow, she's off to a good start! Is she tight? Did you cum too?\"\n\n \"Super tight. Yeah I came when she did.\"\n\n \"Good Lord! You're a dream Billy Carpenter. And then you had another cute little thing to fuck? God almighty! So how'd you do it with Kathy?\"\n\n \"Down on the ground. She was on top of me, like you were the other day when you were laughing.\"\n\n \"That's called cowgirl position honey. You know how a cowboy rides a horse? When a girl rides a guy like that it's called cowgirl. Is she tight too? Did she cum?\"\n\n \"She's super tight too. She came wicked. Then she got off and wanted doggie and we both came again. She was really loud. Emily was worried we were gonna get caught.\"\n\n \"Holy fuckin' cow! That's a fuckin' porn movie you guys made, right there in the woods! I'm so jealous. I wanna go back and be young again. You got me all horny again too. Wanna fool around again, just you and me?\" Molly asked as she squeezed Billy's half-hard cock. \"Ooo, I guess you do,\" she purred as she felt it harden. \"How do you want me baby?\"\n\n Billy rolled on his back and pulled Molly into a sixty-nine. She purred some more on his long cock as he ate her. She asked if he wanted to fuck her. He took her up against the wall again, with her big tits in his hands. The studio was mostly dark. Marsha watched from the shadows.\n\n \u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n Billy and Emily's relationship deepened quickly. Childhood friends became teen-aged lovers. Kathy was the wildcard, sometimes with them for sex, sometimes not, sometimes alone with Emily, licking pussies in Kathy's bedroom. Billy loved the alone time with Emily, but he had to admit, the threeway shit was crazy wonderful.\n\n His sixty-nine idea proved to be totally awesome. It happened first with Kathy, when the three of them were in her bedroom. She was the top of a sixty-nine with Emily, and Billy fucked her deep while Emily licked. With Kathy's over-amped sexuality, the experience just about short-circuited her. She rolled off into the fetal position, twitching and moaning for a while. A little while later Emily wanted it like that too. Said it was the best orgasm she'd had up till then. Both the girls worshiped that big cock of Billy's.\n\n Speaking of worship, once Billy found out about his mom's escapades at the church he started paying attention to what was going on around there. He snuck into the storage room one day when his mom was out at the store. He found a camping mattress rolled up in the corner, behind some boxes. He rolled it out on the floor. It was nice and soft and had lots of stains on it. There was a big box of condoms rolled up inside it. A big box.\n\n He'd added another man to the count too, but he was thinking there could be more. So far there was Pastor William, Wilky the janitor, and Wilky's helper Nathan, a boy Billy's age from the neighborhood. He'd gone all through Bible school with Billie and Emily.\n\n Billy thought about using his knowledge as leverage to get his mom to let him screw the girls in his room, but he knew that might blow up into something bad. Turns out it all blew up anyway. Nathan, dumb as a box-of-rocks, had hidden his phone in the storage room and secretly filmed a session with himself and Wilky and Laura. He lives at home and his mom found it. He had transferred it onto the family laptop and was trying to fancy it up with iMovie. The kid's about as smart as...well, we already established that.\n\n So Laura left the church in disgrace. The scandal took down Pastor William, Wilky, a local Christian volunteer leader and two of the parishioners, both of them family men. Turns out Laura was gettin' around. Do unto others indeed.\n\n It was late summer when it happened, and because of it all, Billy didn't go to the Community College like he was planning. Emily went off to college, not too far away, and Kathy, well, she never did like school and studying. Her parents weren't happy about her not continuing with her education, but she got a pretty good hostess job at a fancy restaurant. A hot body and a beautiful smile is good for that kind of thing. Her parents were disappointed with her again when she told them she was moving in with Billy.",
        "Yes, Billy got his own apartment. His mom got a place with Pastor William, who'd left his wife. The two of them were putting together plans to open a new Christian church \u2014 The Church of Love and Togetherness. They envisioned a place where 'free love' was the name of the game, all with Jesus's blessing, of course. The Bible can be interpreted many different ways after all. Billy had no idea if it would work \u2014 their rust-belt city might prove too small and conservative for such an endeavor to succeed \u2014 but his mom seemed happy planning out the details.\n\n So that was all big stuff. Life changing events all around. But the biggest bombshell was when Dicky Biggers came to light. Yes, that was Billy's porn name. He and Donna Deeper \u2014 that's Molly \u2014 had become a hugely successful team for Tucker, getting the most hits on the website of any of his pairings. Billy hated having a secret life, so when the shit hit the fan at the church he figured it was a good time to come clean to everyone. He used the flying shit as a distraction. It sort of worked, with his mom anyway. She was freaked out, but she had so much on her mind it didn't kill her, the way it might have. \n\n Emily though, she was devastated when she found out about Billy's job. At first. But it didn't take too long for Kathy to start changing her mind. Young minds are resilient and malleable that way. Emily's pretty sure she's not gonna marry Billy, but she still loves the smiling stud, and that big cock of his. She loves Kathy too, and her college is close enough so she can spend weekends with them once in a while. That threeway shit's addicting.\n\n When Kathy found out Billy was a porn star her first thought was \"Of course! That's why he fucks so good!\" It didn't even phase her that it was bad or anything. Kids these days! She loves being the girlfriend of a porn star. Absolutely loves it. She'd like to get into the business herself, but Billy's not so keen on the idea. Maybe someday. \n\n Billy, he works with the whole stable of girls at the studio now, and lots of amateurs. Molly's still the love of his professional life, but a twenty-six-year-old willowy Redhead named Alice is a close second. Tall and slim, with impossibly long legs and an ass drawn by an artist, she's a small titted, pale skinned temptress of the highest order. She and Billy took a shine to each other immediately, and they fit together and work together like a perfectly choreographed dance. It's not smooth and practiced looking though \u2014 it's raw and sweaty and wild, every time. Tucker knows there'll be fireworks whenever they're together. He can count on it.\n\n So we'll end this story in the studio, at the filming of the annual Christmas video. If you read Molly's story you'll know that Molly's Aunt Mary and Uncle Henry will undoubtedly be watching the finished product, just as they did the year before, probably after the family Christmas get-together.\n\n Tucker usually doesn't allow visitors to watch his performers at work, but for the last few years the filming of the Christmas video has become a bit of a party. Kathy and Emily were both there, cocktails in hand, along with Marsha's husband and a few other folks.\n\n The stars for the evening were Tucker's 'A' team \u2014 Billy, Molly and Alice. Tucker went all-out and bought an antique sleigh for the occasion. It was on a set with fake shrubs and fake snow. Billy and the girls had nineteenth-century fashions on \u2014 leftover costumes from a local theater company Tucker sometimes deals with.\n\n There was a bit of a story, something about cutting a Christmas tree for the house, getting wet from the snow and getting cold. They needed to huddle together under a blanket for warmth, and get out of those wet clothes. Not all the clothes at first \u2014 good Victorian girls wouldn't take off their underthings in a boys presence, would they? The old sleigh barely held together as the wild fucking went on, and on, and on. \n\n Kathy and Emily were mesmerized by it all \u2014 the former Bible school boy ripping up two of the sexiest women they'd ever seen, under the lights, in front of an ever circling, ever working crew. They'd watched Billy's videos of course, many many times, but being there in person, seeing the crew, hearing the noises, smelling the smells, seeing Molly's big tits bounce under the bright lights \u2014 it was an extraordinary experience.\n\n Marsha had seen it all of course, hundreds of times, but ever since Billy showed up on the scene he made her hornier than the others. She understood why Molly fell for the young man, and she'd often wished she wasn't such a faithful wife, so she could have her way with Billy in the dressing room, or maybe even on camera. But she never did. She held tight to her will power. The cocktails tasted awfully good at that Christmas party though, and watching Billy after she'd had one too many drinks was more than she could stand. She took her husband's hand, walked him into the shadows where she knew everyone could see them, and gave him a rip-snorting blow-job fueled by watching porn stars for years. Soon she was stripped to nothing but her bra and they were fucking up against a wall. If you watch the Christmas video and listen carefully you can hear them \u2014 Marsha getting into it good, watching Billy as her husband fucks her hard, not too far behind the cameras.\n\n Tucker hit the jackpot with Billy. He kind of had a feeling, when he first approached him at the pool. Tucker had a bit of a gift for finding people on the street, people who grew to love fucking under the lights, and Billy was as pure and natural at it as can be. Everybody loved him and he loved everybody. He blossomed at Tucker's studio, and Molly? Well, she's one hell of a gardener."
    ],
    "authorname": "riverboy",
    "tags": [
        "big cock",
        "older woman",
        "younger man",
        "first time bisexual",
        "threeway",
        "religion",
        "christian",
        "church",
        "teen",
        "threesome"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/tuckers-studio-ch-04"
}
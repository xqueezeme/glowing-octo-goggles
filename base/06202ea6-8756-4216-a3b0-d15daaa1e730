{
    "title": "It's Who You Know Ch. 07",
    "pages": [
        "Darren\n\nWe stayed around Zack and Amelia's for a short while. Tyler needed the company. He needed to chat about things that had nothing to do with the past year, and I couldn't offer him that. He and Zack were discussing when they'd first met at college. I'd heard both of their versions alone, and now they were arguing about the actual events.\n\n\"I honestly thought you were starting on me,\" Zack said.\n\n\"You were a fucking dickhead with problems.\"\n\n\"Yeah, well, you know why I sat at the back in the corner? 'Cause I didn't want to talk to anyone.\"\n\n\"Well that was tough shit, wasn't it?\"\n\nHe laughed his typical guffaw. \"You know what it was like to suddenly have a little squirt like you sidling up to me?\"\n\n\"'Little'? Wow. Lia, are you hearing this? I was trying to be friendly and he thought I was trying to start a fight.\"\n\n\"Go easy on him, Ty. He didn't always have social skills.\"\n\n\"He still doesn't. He managed to piss off four guys in a meeting and they tried to beat him up.\"\n\nZack held his arms out with a mocking glare. Tyler flinched back before returning it with his lip curl. They were chest-bumping, circling, making a snickering mockery of what I had seen that night. I felt a twinge, however light-hearted it was supposed to be.\n\n\"You want some?\"\n\n\"Yeah?\"\n\n\"C'mon you little bitch.\"\n\n\"Oh my God,\" Amelia said. \"Boys, boys.\" They started shoving, then wrestling, and she clasped a hand to her brow.\n\nI seriously considered moving off the sofa as they nearly tumbled onto it.\n\nTyler had his foot hooked around the back of Zack's knee and they were hopping, laughing, staggering, until Zack finally lost his balance and Tyler managed to land on top. The thud was so heavy I think the whole room shook.\n\n\"You think you can take me? I killed a man.\"\n\nHe went limp the moment he said it and Zack slammed him down. There was a pause of silence, both their faces fallen. Zack released him and sat back on his knees.\n\n\"I guess we're even now, huh.\"\n\n\"Yeah.\" Tyler sat up with a grunt, and ran a hand down his face. \"Shit.\"\n\nZack's arm went around his shoulders. They stayed there, hugging. There was so much emotion on Amelia's face, and I wondered if as much showed on mine, too. It probably should have been a private moment between them, but neither seemed to care that we were there.\n\n*\n\nI stared in the mirror at home. I would forever have this scar on my cheek. It wasn't that bad, it just... ruined symmetry a little. I needed to get used to it. Every time I caught my reflection I wanted to brush at the mark, brush it off my face, as if it was something that wasn't supposed to be there.\n\nI wondered what people who met me from now on would think of it. Where would they think it was from? What would it make them think of me? Did I look like someone who partook in violence now?\n\nTyler had that scar in his eyebrow, but it wasn't something I consciously thought about when I pictured his face. It was just a part of his look. Maybe that was how it would be with me, with people who met me. Some might ask where it was from. Was I going to spend a lifetime shrugging, replying 'car crash', the way Tyler just told people that he hit his head?\n\nThat stupid mark on my face didn't deserve all the thought I was giving it.\n\nTyler was sitting on the island counter in the kitchen, reading the packaging on something. I could fill my cupboards with ingredients and he would find a way to throw things together, to make something out of anything. I loved how his mind worked. It was why he worked in the labs. It was supposedly why I'd hired him.\n\n\"Darren,\" he said. \"I think I need glasses.\"\n\n\"Really?\"\n\n\"Yeah.\" He squinted and held the packaging further away from him. \"I've always got headaches when I read too much, but now, I just can't read this tiny text. Do you think head injuries can make my eyes bad?\"\n\n\"It can effect things. We should take you to get checked.\"\n\nHe grinned at me. \"Would I look good with glasses?\"\n\n\"It'd actually make you look slightly clever.\"\n\n\"Wow.\" He hopped down. \"You know, I was thinking, maybe I shouldn't buy a second car of the same model. It just won't feel right. I don't know what to get. Maybe a Porsche or something, but I always thought they were pretty ugly.\"\n\n\"How much are you getting from insurance?\"\n\n\"Almost replacement value. They're being pretty good.\"\n\n\"You should just get another Camaro,\" I said, heading for a drawer at the end of the counter.\n\n\"They did release a new design. Looks pretty beasty.\"\n\n\"It's a better-looking car than more expensive ones.\" I chucked the Lamborghini's keys at him. \"Especially this fucking thing.\"\n\nHe caught the keys and frowned at them, then at me.\n\n\"Let's go for a drive,\" I said.\n\n\"Serious?\"\n\n\"Yes.\"\n\nHe bolted out the front door, circling the thing before he unlocked it. \"How long has it just been standing about? Will it even start, Darren?\"\n\n\"I charged it last week.\"\n\n\"Holy fucking shit. It took you this long to psyche up?\"\n\n\"Shut up and get in.\"\n\nHe sat behind the wheel, fiddling with the seat and mirrors. I gripped the dashboard, looking about at the interior. I hated the car. I hated how the doors opened. I hated its shape. It looked like a fucking alien bug.\n\nIt made some unhappy sounds when Tyler started the engine. A long series of squeaks before it growled. He revved it and looked at me with that boyish grin. I had to get out. I paced and rubbed my forehead. He got out too, sliding across the bonnet, gripping my waist and kissing me.\n\n\"Come on, you can do this.\"\n\nWe stood there for a moment while it chugged and snarled, waiting impatiently. It was a sound I felt more in my stomach than on my ears.\n\n\"You're driving,\" I said. \"I might if I think I can.\"\n\nWe clambered in, he shifted into reverse and we started to roll. There was a constant tension in my muscles, but I didn't feel much else. I was sick and tired of my anxiety. I wanted to be done with it.\n\nWe left the gates and he never went very fast. He was just cruising, enjoying its power and control. The car felt so balanced and steady, I still didn't understand what had happened when it swung out of my control on that fateful day. It was the exact same model. The exact same colour.\n\n\"This is fucking awesome,\" he said. \"Jesus Christ. I never thought I'd be driving a Lambo in my life.\"\n\n\"Go faster.\"\n\n\"Sure?\"\n\n\"You've not even done above thirty yet.\"\n\nI felt like Jamie. It was what he'd been like. 'Go faster. Go faster. Go on, pussy.' We had been stupid rich boys racing a stupidly expensive car. I watched Tyler's calm posture, going up a gear when the engine wanted it. He didn't seem to have that suicidal death wish that I did. He didn't have the urge to go fast, just because he could. The urge to play on train tracks, to skydive, to swim with sharks, just because I wanted to feel the danger.\n\nTyler liked excitement. He liked to have a good time. He didn't seek out danger. There was a difference.\n\nI didn't know if it was my upbringing, or if it was some personality trait. I liked rules, I liked discipline, I liked order. Then I loved to shatter it with chaos, to lose control, just for a short while. I wanted to feel the adrenaline, but it was self destructive. I had taken it too far. It wasn't me who got hurt. It was others. I couldn't handle the adrenaline now. It just made me sick.\n\nMaybe if I had ever known what real danger was, I would've had more respect for life. I knew what it was, now. Two car crashes and a brutal street fight later, I think I understood.\n\nTyler picked up speed and made a sharp turn. Feeling the tug of the seatbelt against my body was enough to start it. I tried to push it down, but it rose up. Even just acknowledging its existence made it stronger. Yet it was impossible to ignore.\n\n\"Tyler, stop.\" My voice strained. \"Wait. Just a minute.\"\n\nHe pulled over and I got out, gasping for breath, clutching my head. The air was fresh. It was probably going to be a chilly night. It'd be dark in a couple of hours.\n\n\"You okay?\" Tyler asked, leaning across the passenger seat.\n\nI could do this. \"Yes.\" I got back in and shut the door. \"Keep going up here and turn right. I want to show you where I crashed.\"\n\n\"Are you sure? We're supposed to easing into this.\"\n\n\"Yes, I'm sure.\"\n\n\"You're diving in deep again.\"\n\n\"Just do it.\"\n\nHe drove us along those countryside roads, slowing around every bend, but they were just as empty as always. Everything was flooding back to me, a weight in my guts, but I was okay with it. I was facing it.\n\n\"I think it was here,\" I said. \"No, wait, no. Further up.\" It almost all looked the same. We came to that long, straight line between two fields, and it struck me. This was where I had put my foot down. So reckless and clueless. Jamie laughing and hooting in my ear. \"It's up here.\"\n\nI spotted the tree and pointed it out. Tyler pulled over. It was a giant, beautiful oak, leaves turning gold and dropping with autumn. My body was heavy but I opened the door and clambered out. I was trembling, cold sweat making my shirt stick to me beneath the waistcoat. I probably looked a lot like Amelia as I stood there with one hand clasped over my mouth, taking it in.\n\nThe car fell into silence and the driver's door shut.\n\n\"This is it, huh?\"\n\n\"Yes.\" I stepped closer. \"Right here.\"\n\nTyler walked over to the tree and placed a hand on the trunk. There were still some obvious markings on it, where the bark had been damaged and healed over. All these years and that tree still beared the wounds.\n\n\"Come on,\" he said. \"It's not gonna kill you.\"\n\nI didn't feel the same desire to touch, I was content just looking at it. I stood beside him, felt his hand at the back of my head, stroking my hair. He was watching my face.\n\nParts of the road were cracked and raised by the oak's roots. Was that what had done it? I had initially lost control further back, though. Was it horse shit? Was it a smear of mud? Why had it happened? Why did it spin like that when I braked?\n\nJamie was gone forever. I missed him.\n\nI still had wounds like that tree. I wasn't over it, even if I thought I was. But today I was going to start anew. I was going to accept it and move on. I was going to be a new person. A better person. My life needed me at the wheel.\n\n\"I'm driving,\" I said.\n\nTyler grinned, walking around to the other side. \"No speeding.\"\n\nI opened the door. \"No.\"\n\n\"No drifting.\"\n\nI sat inside with a grunt. \"No.\"\n\nHe leant across and pecked my cheek. \"I love you.\"\n\nIt was a strangely empty feeling. Being in control, but having to let go at the same time. The two extremes balanced each other out. I think I expected more. It was just a machine. Pedals and gearstick. I made it along the countryside roads, but once we headed back towards civilisation, I didn't want to be around other cars. My body ached from tension. I pulled over and we swapped seats.\n\n*\n\nIt was getting dark once we got home. There was a definite cold breeze. Tyler shivered and jogged up to the door, crunching gravel and making the light come on.\n\nHe made me so thick with emotions.\n\nHe was still here. He'd been through my fears with me, protected me from some of them, and still had his energy, his smiles. I had initially kissed him because I liked what I saw on the outside, and I had struck gold with the person I found beneath.\n\nI had a lot of luck. We were both lucky, to have survived what we did. He was lucky to be let off from what he'd done. The probation was just a cover, something to make a statement. He was a free man. I knew we weren't going to have trouble getting through it.\n\nHe was heading to the kitchen, but I wasn't really hungry. Not for food. I wanted him. His body. His taste.\n\nHe looked good today. He looked good every day but there was something about the current red shirt and black jeans combo. Maybe it was the way the hairs on his forearms were still standing from the chill outside. Maybe it was how all his tension and worry was evaporating and he seemed so happy to be alive.\n\nHe was saying something but I slid an arm around his middle, touched my lips to the back of his neck. He leant into me. My hand ran down his shirt, beneath his belt, beneath the snug fit of his jeans, following the hair down. He was already getting hard and the stroke and squeeze of my fingers finished it.\n\nHis head rested back against my shoulder. My free hand brushed over his exposed throat. He shuddered and groaned.\n\n\"Fuck,\" he breathed.\n\n\"I want you,\" I growled. \"Right now.\"\n\nI tasted the skin of his neck, sucked on it. It rippled through him and his hands grabbed at my hips. There were some things he couldn't resist. He could be so easy to control. I loved his heat, watching him lose himself in his lust, knowing that I was doing it to him. All he cared about was feeling good, and making me feel good. He was an incredible lover.\n\nThe best I'd ever had. And he was right there to have whenever I wanted.\n\nWe were straight up to my room. Once turned on, he was in tunnel vision. He usually instigated it first, but to come so heavily onto him was exhilirating - however much I wanted it, he usually got there before me. I'd finally caught him unaware at a random moment.\n\nHe wanted me. And he was so damn happy every time he got what he wanted. He was already unbuttoning my waistcoat and shirt as I pushed him onto the bed. Amazing things had already happened that day. It was time for more.\n\nHe kissed my chest, moving from one nipple to another while his hands squeezed my waist. He never liked to make it easy. He was such a hot bottom because he put up enough of a fight, while still being so willing and submissive. He made me feel like I earnt it. And he loved it. To see him enjoy being penetrated and fucked was what made it feel so good.\n\nBut there was another side to him. What if I didn't always want to win?\n\n\"Oh, shit,\" he moaned. I bit his ear, his throat, pushing him down with my body weight. His legs wrapped around my waist and pulled me closer. \"Fuck me.\"\n\nI pulled away. \"No.\"\n\nHe sat up, I took another step back.\n\n\"I want you to fuck me.\"\n\nHe stared. I knew he wanted it. He'd been dropping the hints from the very start; he was waiting for me to want it, hoping I would. I'd been wanting it for a while. Life was in the way but now, none of that mattered. This was me, and him, the closed world in my bedroom.\n\nI was sweating more than normal just thinking about it. I could feel it under my arms, on my chest. I almost couldn't breathe just from the look he was giving me.\n\nHe got to his feet, my heart raced. So many nerves, and it felt incredible. His hand touched my stomach, light as a feather. I flinched. He brushed it around my waist as he circled me, leaning in to nuzzle my ear, breathe through my hair.\n\n\"You want me to fuck you?\"\n\n\"Yes.\" It was nearly a whisper.\n\n\"Hard?\"\n\n\"Yes.\"\n\nThe chuckle rolled from his throat and he shoved me onto the bed. He was on top of me, grinding against my crotch, mouth on mine, forcing his tongue inside when my lips parted with a gasp. His fingers curled in my hair, holding my head down as he kissed my neck, across to a shoulder, down my chest.\n\n\"I want you to show me how to let go,\" I breathed.\n\nHis breath tickled me. \"Don't you always let go?\"\n\n\"I want to let go like you do.\"\n\nHe dragged his tongue across my stomach. \"Then you have to want it as much as I do.\"\n\nHe moved back up to my face, pushing his hips into mine, rubbing his covered cock against mine. I groaned. It was already feeling so good. And it was firing me up.\n\nHe didn't know how to hold me down. Or maybe he wasn't trying. With a surge and a growl I rolled him over. He thought I was going to make this easy for him? \"I want you to fuck me until I beg you to stop.\"\n\nHis eyes flickered with excitement. He fought back, wrestled, grinned and snarled. My arms were tired. My whole body was tired from the strain I'd put it through with the drive. I didn't give in. He won.\n\nEven when below him I didn't stop. I needed to feel him overpower every inch of me.\n\nHe was continuing to undress me while wrestling me down. My belt came away from my trousers, but I wasn't expecting it when he wrapped it tight around my wrist and buckled it through the gaps on the headboard. He straddled me while he pulled off his own. I burst into laughter from the surprise and butterflies - he pinned me with a knee on my shoulder, shin across my chest. The whole weight of him was too much. My second arm was tied.\n\nI tested my bounds, it wouldn't be easy to escape. And I didn't want to. Shit. What had I let myself in for.\n\nHe was grinning, running his hands down my body. \"Are you gonna be good?\"\n\n\"Do I have any choice?\"\n\nHis fingers brushed my nipples. \"I'll show you how to lose control.\"\n\nFucking hell.\n\nHe had everything else off me, and slowly started to undress himself. I strained against the belts again as the shirt slipped over his shoulders. The urge to touch his body was too strong. The jeans came off, he was so hard. Clothes might compliment him but he would always look best naked. A figure like his was supposed to be seen, scarred and marked as it was. Even his cock looked so perfect, symmetrical.\n\nHe leant over me, kissed me. I had just enough slack to relax my arms with my elbows bent, but not much else.\n\nHis touches were light, gentle. It felt like he was exploring my body again, as if it was the first time he was seeing it. Every so often his fingers would give a little squeeze, his palm would press harder, his tongue would come out from his lips.\n\nI might not go crazy like he did when my neck was kissed, but it still sent shivers through me. He pulled my hair to keep my head back, giving him access to every inch of my throat. He found my pulse. I felt it when he pressed his tongue there.\n\nWas the window open? I felt so chilled, aware of every cold line of sweat on my body. Heat radiated from him, warmed me wherever our skin touched.\n\nHis cock brushed against mine and I shuddered violently. He chuckled and finally gave it some attention, circling a finger around the head, smearing the pre-cum, then leaving a long wet line down my shaft.\n\n\"You always get so wet, Darren.\"<br> <br> I grunted.<br> <br> \"I love it.\"\n\nHe was moving down, between my legs, tongue licking and tasting. He took me into his mouth and gave a single suck, then stopped. His hands ventured from my hips to my chest.\n\nFuck. He had full access to my nipples and I couldn't stop him. He gave both a pinch, then was twisting and turning, rolling between finger and thumb. It felt so good, then started to get so sensitive I couldn't take it. I was moaning and squirming, trying to escape with twists and bucks. My cock touched his with every throb and twitch. The arches of my spine couldn't push him away. He tugged harder.\n\n\"So sexy,\" he husked.\n\n\"It's not fair,\" I gasped.\n\n\"I know. I wish mine were as sensitive as yours.\" He leant down to suck and flick with his tongue. I groaned, arms and shoulders straining. Could I come from this? Why was I wired this way?\n\nMy legs wrapped around him, pulling him against me, needing some pressure against my crotch. It was an aching, a tension in my stomach. I needed release.\n\n\"Please, stop.\"\n\nHe bit me when he pulled away, making me shudder. He kissed down my stomach, licked up drips of pre-cum, tickled my balls with his tongue.\n\n\"Fuck, Tyler.\"\n\nHis tongue went lower still, teasing at my hole while his hands held my thighs.\n\nWhy the fuck were my arms tied? Heat was burning through me. I wanted to fuck him so hard. I was straining and squirming while his tongue worked my hole, never quite giving me enough. He held my legs down. I moaned and growled at the same time. Go deeper, damn it. Fuck me with your tongue.\n\nHe pulled away, gave me that lip curl, the snarling grin, eyes telling me how much he enjoyed what he was doing to me. I was seeing the wild side again, I was giving it domination and control over me.",
        "He leant over to the drawers to get the lube. I wanted to shut my eyes, or stare at the ceiling, but I couldn't take my gaze off him. My heart raced with anticipation. A wet finger rubbed around my hole, I took in every sensation. With more lube, he ventured inside. He didn't go deep, just teasing and circling around the entrance.\n\nWhy wouldn't he go deeper? When I tilted my hips he pulled the finger out.\n\nHe was taking his time lubing up his cock, switching between teasing me and finishing the job.\n\n\"You want it?\" he asked.\n\n\"Yes.\" My voice was rasping. Shaping words was difficult.\n\n\"You want my dick?\"\n\n\"Fuck yes.\"\n\nHe pushed two fingers in, deep. There was the slightest bit of pain, but he made it disappear, rubbing and pressing at the walls. He avoided the perfect spot where he knew I felt it best.\n\nFor fuck sake.\n\nHow long could he tease me? The belts felt clammy around my sweaty wrists. My fingers were hurting my palms, my fists were so tight.\n\nHe started to rub my hole with the head of his cock. It slid up and down, smooth and slick.\n\n\"Feels good?\"<br> <br> \"Yes,\" I breathed.\n\nHe pressed harder. \"You want it?\"\n\nI couldn't manage much more than a moan.\n\n\"How bad?\"\n\nI tilted my hips into his movements, almost pressing him inside. He pulled back.\n\n\"Fuck me,\" I gasped.\n\n\"That's right. Beg for it.\"\n\nHe leant over me, pushed against my hole with his thighs against mine. He stroked a nipple.\n\n\"Beg.\"\n\n\"Fuck me.\"\n\nHis fingers pinched. \"Beg!\"\n\n\"Fuck me! Please, Tyler, fuck me!\"\n\nHe was pushing inside. I threw my head back, crying out with some sort of roar. I didn't even care what sounds I was making. I wanted this so bad. Hurting, and feeling so good at the same time. He was going in with every thrust, every push.\n\nFuck. Yes, yes, yes...\n\n\"Fuck,\" he breathed. \"You tight bastard.\" His hands gripped my waist. \"You want it deep?\"<br> <br> \"Yes,\" I gasped.\n\n<br> \"Then let me in.\"\n\nI wanted to loosen, but I couldn't stop squeezing around him. He kept going, forcing inside. It was burning, but the slide of the lube was soothing.\n\nWith another shudder my body finally submit. He went in as far as his length allowed, hitting parts of me that hadn't felt anything in a long time.\n\n\"Oh yeah,\" he growled. He started thrusting. \"Yes. Yes!\"\n\nI felt faint. These sensations were too much for me. He was fucking me, pounding me while I was moaning, gasping, helpess. His eyes were so dark - the opposite side of him to the tilted brows, the sexy cries, the hands that held me in desperation. He was in control of his pleasure.\n\nMy lungs couldn't suck in enough air. It was still hurting, but I didn't care.\n\n\"Feels good? You like that?\"\n\nI couldn't talk. I was trying to fathom what was happening to me.\n\nHe shifted, tilting me against his thighs. I gripped the belts to steady myself. He went harder, faster, hitting at a different angle. The pain was disappearing. I was left with this uncontrollable feeling, something building up deep inside.\n\nHe was hitting that spot, over and over again.\n\n\"Don't stop,\" I begged. \"Don't stop...\"\n\nI would've been jacking my cock so hard were my hands free. I couldn't. This explosive feeling was building up and I had no outlet.\n\nIt went past that. Waves coursing through my entire body, tingling in my spine, pulsing in my stomach. I felt like I was already coming. It was endless. Crazy. Pressure that wouldn't stop building. My insides were tightening and loosening around Tyler beyond my control. He might have been talking dirty but I could barely hear it. All I could focus on was my body.\n\n\"What's wrong?\" his husky voice teased. \"Feels good?\"\n\nHis hands were pulling me down onto him, accompanying the thrusts, hitting so deep.\n\n\"Fuck yes.\" He kept talking in that breathless voice. \"You feel so fucking good.\"\n\nI couldn't take it. Something happened to tip me over the edge. I was coming, primal, involuntary groans vibrating in my throat, pleasure ripping through me, a few seconds of being lost in it before it reached my cock.\n\nI bucked, convulsed, moaned so loud.\n\n\"Oh my God,\" Tyler gasped. \"Shit, Darren...\"\n\nHe came, hard, pushing me against the headboard with his last thrusts.\n\nOur bodies were trembling, panting. I finally managed to open my eyes, he was looking at me, shocked, grinning in disbelief.\n\n\"Oh my fucking God,\" he said. Breathless. \"What did that feel like?\"\n\n\"Amazing.\" I was soaked in sweat, my body limp and sensitive. I felt like I'd just been hit with a hammer.\n\nHe slid out of me, played with the cum on my stomach and chest, dragging his fingers through it. \"You don't understand how sexy you are.\"\n\nI swallowed over my dry throat. \"Can you untie me?\"\n\n\"No.\" He held my hips. \"I'm not done yet.\"\n\nHe was still hard. I watched the head of his cock disappear from view, pressing at my hole. I was exhausted and powerless. \"I don't think I can do it again.\"\n\n\"That's okay. I just want to fuck you.\"\n\nI was drained, but relaxed. He pushed inside me without much resistance, and started to fuck. I thought I'd be numb, but there were tingles of pleasure. His cock rubbing my insides just felt... good. He was using his own cum as lube. It turned me on so much, but I didn't have the energy to do much with it, other than enjoy the warmth.\n\nI think he was enjoying the sight of me, tied down beneath him, covered in my own cum, weak and shattered from the mind-blowing orgasm. He kissed me, I stroked his tongue with mine.\n\nThe pressure was building again. Blood was rushing to my cock and I was getting hard.\n\n\"Please,\" I groaned. \"Untie me.\"\n\nHe finally did so. I stretched my aching arms, touched his body, pulled him closer. My fluids smeared in his chest hair. He chuckled, softly, pressing his mouth on mine.\n\nI was able to coax the second orgasm out of me with my hands. Tyler watched, grinning, as I shuddered and moaned. It wasn't like the first, but I don't think I could handle something like the first. It left me feeling more satisfied, at least. He held me and moved to finish, pounding into me for a few minutes, doing whatever he wanted.\n\nI could feel his throbbing. He breathed out a long, slow moan, gasped, and moaned again. \"Fuck, Darren.\" The movements of his body drifted to a stop and he collapsed against mine. \"I love you.\"\n\nMy fingers traced along his chiselled jaw. \"I love you too.\"\n\nHe was breathing through my hair, each exhale rattling in my ear. I couldn't move, he didn't seem to want to either. That was fine. We dozed off for a while until he stirred and startled me awake. I was a little cold and stiff, and messy.\n\n\"I'm hungry,\" he grumbled.\n\n\"Order a pizza.\"\n\nHe chuckled and checked his watch. \"It's only, like, nine. Jesus Christ. We fucked too early. I wanna sleep.\"\n\n\"Large pepperoni, stuffed crust.\"\n\n\"As adventurous with toppings as always.\"\n\nI grinned and rolled onto my stomach, grunting with the effort. His hand stroked and squeezed my arse.\n\n\"How you feeling? Sore?\"\n\n\"Meh.\"\n\nHe chuckled again, kissed up my spine. \"That was so hot, what you did.\"\n\n\"You did it to me.\"\n\nHe kept kissing my shoulders, my neck.\n\n\"Tyler. Pizza.\"\n\n\"Right.\"\n\n---\n\nTyler\n\nI woke up before him, thought I was running late. Went through the typical morning routine of letting Amanda out, feeding her, preparing the coffee machine. Realised once I was in the shower that it was Saturday.\n\nJesus, my brain was so fried.\n\nI'd been so tense leading up to my trial. Now it was all over, and life was going to go back to normal. All these amazing things, this was normal.\n\nDarren's hands made me jump. I hadn't heard the door open, him come in. Probably because I had the spray up to its roaring strongest, as usual. He shoved me against the tiles and I nearly slipped over. His hard cock pressed against my arse.\n\n\"What the fuck? Did I drop the soap?\"\n\n\"Yes.\"\n\nI laughed. \"Oh my God.\"\n\nWith a bit of spit and the water of the shower, he was starting to thrust inside. I should have known he wouldn't just let me get away with yesterday. I let out a playful growl of pain, he chuckled in my ear, arms across my chest and stomach. It was pretty rough and dry, but he didn't go all the way in and barely lasted a minute, just using me for his morning wood. When he was done he got down on his knees and gave me an amazing blowjob.\n\nGod, life was good.\n\n\"You're gonna make my water bills crazy,\" he said.\n\n\"I love showers.\"\n\n\"I know.\" His chest bounced with his chuckle and he shoved me out of the warm spray into the chill. \"Go make me coffee.\"\n\n\"Fucking hell, are you gonna start putting the heating on? It's basically winter now.\"\n\n\"It comes on by itself.\"\n\n\"Well it's not working.\"\n\n\"You're a wimp.\"\n\n\"Fuck you.\"\n\nHe had to take a work phonecall, walking in circles in the kitchen, trapped in semi-casual chatter with a client. The business really was his life, and I was so used to it. The constant distractions, noises from private and work phones, long conversations where his voice got less pleasant and more blunt the moment it went over 15 minutes, on the dot. His grumpy face when he finally got sick of it and switched the technology off. Only to have to chase up voicemails whenever he turned it on again.\n\nIt wasn't always so bad, but I almost burst into laughter when he was busy on his work phone and his private one started ringing. He waved it at me with a frown, to answer it. It was Jackson. Oh.\n\n\"Hello?\"\n\n\"Tyler? What, are you his home secretary now?\"\n\n\"He's talking with a client.\"\n\n\"All right.\"\n\n\"Can you tell me what it is? Is it anything important?\"\n\n\"No, it's really nothing exciting. Tell him to call me later.\"\n\nThe thing I'd learnt with Jackson, was that 'nothing exciting' could mean five guys about to kick the door in with guns. Oh well.\n\nDarren finished his call, then finally complained about it being chilly.\n\n\"I fucking told you!\"\n\nWe snuggled on the sofa while he drank his coffee, kicking a toy across the floor for Amanda. She skidded and clattered on the wood, bringing it back each time, thinking it was the best game ever.\n\n\"Should be walking her,\" he said.<br> <br> \"Yeah?\"\n\n\"But I'm sore.\"\n\nI burst into laughter, putting my legs over his lap. \"When was the last time you bottomed?\"\n\n\"Years ago.\"\n\nWe had one of those conversations, at long last, about exes. I'd been so curious about Darren's history, but had put off asking, because I wasn't sure if I was comfortable talking about my own beyond passing comments.\n\nThere had been lots of comments about his, not always from him. Especially about his 'twink' ex. So I finally asked.\n\n\"Yeah,\" Darren was saying. \"He was just a bit... effeminate.\"\n\n\"Was it kinda recent?\"\n\n\"No, not really. It was over some years ago.\"\n\n\"Why does everyone still mention him all the time, then?\"\n\nHis breath hitched with a chuckle and he rubbed his brow. \"He was a bit of a personality. Hard to forget.\"\n\n\"Why? What happened?\"\n\nThere was a silence and he stared down at his mug. \"Well, I met him through Rick. Rick thought I'd be perfect for him because I'd 'treat him well'. He was one of those people who was obviously gay, but not comfortable with himself.\"\n\n\"He had problems?\"\n\n\"He just wasn't confident, you know.\"\n\n\"And you were?\"\n\n\"More than him.\" He took a sip of his coffee. \"I wasn't really with him for long before the crash happened.\"\n\nI think I already pieced together the story just from that. I already saw how it would become a painful, downwards spiral to rock bottom, but I let him keep talking, explaining.\n\n\"I don't want to sound like I'm just bad-talking him. He was there for me, he did what he could. But when you go through something like that it makes you see things in a different way. I knew it wasn't going to work. The way he was, with how I wanted to be. Problem was, I was in love with him, so I wouldn't let go.\"\n\n\"You really loved him?\"\n\n\"Yeah, I did. At least I thought I did. The longer I'm with you, the more I question it.\" He shook his head. \"I was in a bad place back then. It's hard to really know.\"\n\n\"I guess it ended bad.\"\n\n\"Yeah, it was a mess. The whole relationship was a mess, to be honest. He always had problems with my uncle, and there was this one argument where Vince ripped a whole new one into him. That was the last straw. He was gone. Told me it was over. Was just gone. It ripped me apart. I was angry at everybody, but especially Vince.\"\n\nI sat up and leant an arm on his shoulder. He smiled at me.\n\n\"He wasn't a bad person. We just weren't compatible. We dragged that relationship out two years longer than it should have been.\" He sat forwards to leave his empty mug on the table, and ruffle Amanda's ears. \"Now that's out of the way, can I bitch?\"\n\n\"Yes. Bitch away.\"\n\n\"He was so fucking high maintenance.\"\n\nI chuckled and sprawled out.\n\n\"He was the moodiest person I've ever known,\" Darren continued. \"Worse than any woman with her period. He just expected me to do everything perfect but never made it clear what he wanted. We argued a lot. Stupid little needling arguments where he got all snarky. He expected me to spend money on him, because I was rich. He had no respect for where that money came from. If I was busy with something to do with the company, he'd fucking strop, and whine that I had no time for him.\"\n\nHe was doing his thing where he waved an angry hand around with his story. I loved it.\n\n\"The sex wasn't even that good. He was a virgin. Well, virgin. He'd been with other guys, but never gone all the way. Even after we got to a point where getting my cock in wasn't a fucking performance, he never really enjoyed it.\" He sighed, the hand stroked along my thigh. \"Not like you do.\"\n\nI just grinned and folded my arms behind my head. \"So all the others before him?\"\n\nHe tossed me one of those looks. \"Some flings. Nothing that lasted as long.\"\n\n\"Yeah?\"\n\n\"Yeah, I actually used to go to gay bars when I was younger. Now I just get headaches.\"\n\n\"I bet you had them flocking to you, you rich cunt. Bet you were a right sugar daddy.\"\n\nHe rubbed his brow with a smirk. \"I honestly didn't try that hard. If something happened, fine. If not, then whatever. Just sex. You know how it is.\"\n\n\"Do I? You might have actually fucked more people than me.\"\n\n\"Bullshit. There's no way someone like you walks into a bar without getting some every night. Don't need money with looks like yours.\"\n\nI chuckled and clasped a hand over my face. There was a lot of stuff I wasn't proud of. \"So when did you break up with this high maintenance twink? Four years ago?\"\n\n\"Around about.\"\n\n\"You seriously had nothing since then?\"\n\n\"Some dates. Rick's always liked setting me up. Never met anyone where I felt something could work. I guess I was a bit jaded, didn't really know what I was looking for either. A couple of times, just fucked someone the whole night and never saw them again. Didn't feel right about it.\"\n\nAmanda was dropping a toy at his feet repeatedly, looking at him like he was a retard and not understanding what she wanted. He sighed and gave it a kick across the floor. She scrambled after it in a flurry of claws.\n\n\"So can I hear about your conquests, Ty? All of your exciting history?\"\n\nI chuckled. \"For fuck sake. No. I was just a dirty slut. Use your imagination. I'm sure anything you think of probably happened somewhere.\"\n\n\"Come on.\"\n\n\"No.\"\n\n\"There were obviously some actual relationships in there. You wouldn't have been so anxious with me unless you knew what it was like to be dumped.\"\n\nDamn. I grumbled something in protest while he leant over me, kissing my cheek as I tried to hide my lips.\n\n\"I don't care,\" he said.\n\n\"But I do.\"\n\n\"Because you think I care.\" His body was so warm, I squeezed him tight. \"I love you.\" His lips started to touch at my neck. \"And you're the most amazing sex I've ever had.\"\n\n\"Stop it,\" I chuckled.\n\n\"Tell me, Tyler.\"\n\nWhere to even start? The beginning, right. So I told him about my first serious girlfriend, when I was 15 to 16.\n\n\"She was the first person I tried 'coming out' to, the first person I really told about liking guys. She decided that meant I was gay and she dumped me.\"\n\n\"Nice.\"\n\n\"Yeah. To be fair to her, she could have gone around spreading rumours in the whole school and ruined me. She didn't. She kept it to herself. I appreciated that.\"\n\n\"Would it have been that bad?\"\n\n\"Yes. Seriously. I basically had no friends, okay? Acquaintances, acquaintances everywhere. I knew everyone, because I was the class clown always getting sent out into the corridor, but I didn't have real, proper friends. I tried being friendly with everyone but it was always shallow. The kids I hung about with at lunchtimes were all guys. It was always the banter, to act gay, to take the piss out of it. No-one was supposed to actually be gay.\"\n\nHe smirked at me. \"The class clown, huh?\"\n\nI sighed. \"Didn't you have that kid at your school? Y'know, the one who was always getting sent out when you'd only been sat down five minutes or less. The one the teachers started sending out before they'd even done anything wrong, as pre-emptive measures. That was me. 'Get out, Tyler. You're looking at someone, Tyler. Get out. You said two words, Tyler. Get out.' I never did any fucking work. I don't know how I ever passed exams.\"\n\n\"Did you make sure to pull faces through the door and disrupt the rest of the lesson?\"\n\n\"Of course!\"\n\nHe grinned and shook his head. \"Yeah, there was a kid like that at my school. He got the shit beaten out of him by his parents, though.\"\n\n\"My parents had to go in to talk to the teachers all the time. Didn't do anything, though.\"\n\n\"When did you tell your family?\"\n\n\"What?\"\n\n\"About being into men.\"\n\n\"Once I was at college.\"\n\n\"How did they take it?\"\n\n\"Pretty well. The worst one was actually Nicole. She was a fucking bitch about it for a while, y'know, all 'eww you're gay' and shit. Then at some point she just grew up and changed. Didn't care anymore. Was even, supportive.\"\n\n\"Your dad still seemed... confused.\"\n\n\"Yeah, I've just confused him by being with you. He always thought I loved women, and just had sex with men. Then he sees I'm in love with a man. He's never really been an asshole about it, nothing like your uncle. He's called me a fag, a puff, a pretty-boy, a fudge-packer. But he insults everyone. I mean, shit, he had one of those long parent talks with me about making sure I was being safe if I was doing anal. So fucking embarrassing. 'Dad, oh my God, I'm eighteen'! Then the weird realisation that he must have done it before to know so much about it.\"\n\nDarren was grinning down at his hands.\n\n\"He was really convinced that I was fucking Zack at one point. Well, getting fucked.\"\n\nHis eyebrow rose and he tossed me a side glance. \"You had a massive crush on him, didn't you?\"\n\nShit. I hated admitting it. \"Yeah... When I was, like, nineteen.\"\n\n\"Don't blame you.\"\n\nI chuckled and clasped a hand to my forehead. \"It was weird because I didn't at first, it just happened after I'd already known him a couple years. Like I got the idea in my head, and had a hard time making it go away.\"\n\n\"It's okay. I used to have a massive crush on Jackson.\"\n\nI squeaked. \"Seriously?\"\n\n\"Yes. He's not aging so well, but back when I first met him, he was like some handsome stud straight out of a Bond movie.\"\n\n\"I believe you. How long have you known him?\"\n\n\"Since I was eighteen or so.\"\n\n\"What's his real name?\" I had been wondering that for a while.\n\n\"Theodore.\"\n\n\"Ted? Teddy Jackson?\"\n\n\"I dare you to call him that next time you see him.\"\n\n\"You were supposed to be calling him back...\"\n\n\"No. I've only heard about one girlfriend so far.\"\n\n\"For fuck sake.\"\n\nIt was hard to explain what things had been like through college and university. A lot of flings. A lot of one night stands. A lot of pissing around, a lot of mistakes. I wasn't very good at organising it in my head, kept back-tracking and changing my mind on details.",
        "We were discussing Daniel, my on-and-off dysfunctional uni boyfriend. I really didn't want to think about him for long, so I blurted it out fast.\n\n\"Yeah, well, last time I saw him he raped me.\"\n\nDarren went quiet and studied me in surprise.\n\n\"Got me nice and drunk, possibly drugged, took me home, and fucked me while I said no.\"\n\n\"... You sound awfully nonchalant about it.\"\n\n\"I can't be bothered to care about it. Shit happens.\" I stared at the floor. \"You're actually the first person I've told.\" He was sitting closer, putting his arm around me. \"I kept partying once I was done with uni, because I was an idiot. Couldn't leave that lifestyle behind. He wasn't the only mistake I made.\"\n\n\"Why did you keep doing it?\"\n\n\"People just expected it of me, y'know? At school, I was the class clown in every lesson. Get older, I was the sex clown of nightclubs who pulled every fucking night out. People invited me out because they expected me to get some, and they hoped, thought it was supposed to help them get some, too. It could be guys or girls, which was part of the fun in it. 'Who, what, is Tyler getting this time?' Jesus Christ.\" I frowned at the wood at my feet. \"People love it when you're funny. They forget you've got feelings. You're not always walking happiness.\"\n\nHis arm squeezed my middle tighter and I got Amanda's nose in my face. I'll admit it, dogs are pretty amazing, how they sense your mood change. I was really attached to that dog by then. I loved how she followed Darren everywhere in the house, watching him with complete adoration.\n\nI breathed in Darren's scent, leaning against him. \"Rick was right about you.\"\n\n\"About what?\"\n\n\"You treat people well.\"\n\nHis knuckles brushed my cheek.\n\n\"You've been so good to me,\" I continued. \"Right from the start.\"\n\n\"It's what you deserve.\"\n\n\"Maybe. I'm just not used to it.\"\n\n\"Everyone deserves to be treated well, Ty.\"\n\nI sat straight to grip the nape of his neck, pressing my forehead against his. \"All of this has been amazing. You're amazing. I wouldn't change a thing that's happened.\"\n\n\"Maybe we could've done without the street fight and car crash.\"\n\n\"No.\" I kissed him. \"Those men would've found you even if I wasn't there, and I don't want to think what might've happened to you. You were thinking of going with them, you fucking idiot.\"\n\nHis eyes were soft, then hidden as he looked down. \"What that man said. It still won't leave my head.\"\n\n\"You never trust someone like that. Ever. No matter what.\"\n\n\"What if what he said was true?\"\n\n\"Then there's some mob boss out there who wants to steal your business.\" I stroked the scar on his cheek. \"It probably wasn't true. He was probably saying whatever, to get you to go with them nicely, so they could take you somewhere quiet and make it a clean job.\"\n\n\"Yeah but-\"\n\n\"They weren't gonna let me go. I was a witness, they were gonna kill me, Darren.\"\n\nHe held me tight. I was never going to tell him the other things I had thought about, how far my imagination could go. The thought of Darren becoming a victim of one of those horror news stories made my blood run cold. There's some sick people out there, who like to have 'fun' before they make their kill.\n\nEverything about that man set off every alarm I had. Maybe I was thinking all the worst possible things in an attempt to justify what I had done. To justify it to everyone else. In my heart, I was sound with what happened. Hopefully I'd never be in a situation for it to happen again, but I wasn't going to live with guilt for protecting Darren.\n\n\"I guess I should call Jackson,\" he said.\n\nI knew why he was apprehensive about it. He wanted a break. He was scared of what news he might hear. He didn't want to hear about the current movements of the criminals hunting him down. It was still a surreal thing.\n\nI stroked my fingers through his hair, pulled back to study his face. His eyes were still soft.\n\n\"Ty,\" he started. \"I know you've practically been living here the past couple of months, but, do you want to move in? Like, properly.\"\n\nMy heart fluttered. I didn't know what to say. \"Yes, I... I'd like that. I'd love that.\"\n\nHis face lit up with a smile.\n\n\"I've got a lot of shit,\" I said.\n\n\"I'm sure there's room for it.\" He started to get to his feet. \"And hurry up with your new car, so we're not both sponging off Zack all the time.\"\n\n\"You miss it, don't you?\"\n\n\"I liked your car.\"\n\n\"I liked my car.\" I watched him head towards the kitchen, Amanda trotting behind him and almost getting beneath his feet. \"Can't I just drive your Lambo for a bit, 'til it's sorted?\"\n\nHe paused, glanced over his shoulder. \"I guess, yeah.\"\n\nAmanda stayed at the threshhold where the light wood turned into kitchen tiles, as well-behaved as ever. She looked around at me, her tongue hanging out, as if she wanted me to agree with her on how awesome Darren was. "
    ],
    "authorname": "IvoryTusk",
    "tags": [
        "gay romance",
        "gay sex",
        "gay anal",
        "role reversal",
        "switch"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/its-who-you-know-ch-07"
}
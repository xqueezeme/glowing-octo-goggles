{
    "title": "A World for the Taking Ch. 08",
    "pages": [
        "\"We're turning south here,\" Tammy said, looking through the gap in the trees down a narrow cut in the hill. The earth had shifted over the rock strata at some point in the last three or four years, creating this cut. It looked more like a manmade ditch than a natural feature, but it was not straight or of a regular depth, and there was no reason to dig a ditch way the hell out in the middle of nowhere. However, the impression of it being manmade was strengthened by the lack of trees. There were a few, but mostly they grew to either side of the cut leaving the bottom clear which made it more passable than trying to break new trail. Apparently the deer and at least one moose agreed with her assessment. In the loamy soil at the bottom amid drifts of last autumn's leaves and moraines of twigs were dozens of old tracks and some that were not so old.\n\n\"I thought we were going to be at the tower yesterday,\" grumbled Yoshi. His sullenness had returned the previous evening when there was no sign of the tower.\n\n\"I thought so too,\" Tammy said, glancing back at him. \"Yoshi, this isn't like walking over to Dunkin's store.\"\n\n\"I know,\" he sighed. \"Sorry. Think we'll get there today?\"\n\n\"I do,\" she said, perhaps a little too curtly. She was very tired and sore and her ear was bothering her. \"Come on. We might see it before noon.\"\n\nTo Tammy's surprise and the true delight of Yoshi and Jean, and satisfaction of F`reet `du Hom, when they broke from the southern end of the cut about a half an hour later, the tower loomed large at the top of a hill across a shallow valley. Its alternating red and white stripes shimmered in the late morning sunshine and the huge dish at its top gleamed dull grey. It was no more than six kilometers away as the crow flies. Of course, that meant if they took a straight line on a smooth course from where they stood to the base of the tower, it was no less than ten kilometers. And they all knew there was no straight course in this heavily wooded country.\n\n\"Let's go!\" Yoshi urged.\n\n\"Wait, damnit!\" Tammy snarled. \"You hear the flyer? See anything?\"\n\n\"I don't hear anything,\" Jean said from behind Yoshi. \"I can't see anything from back here, either.\"\n\nTammy took out her binoculars and scanned the sky. From down over Big Lake all the way back north towards Waimea there were only silhouettes of birds against the bright blue. The only sounds she heard were the distant cry of an eagle and scamperings in the undergrowth of small animals. She did not fully understand why, but Tammy was unsettled. The Dusig had been cruising like vultures in quest of a corpse since she and F`reet `du Hom had shot down the lifter. Maybe, just maybe they had given up searching for them, but she could not believe that.\n\n\"Alright,\" she finally decided. \"Keep your eyes and ears open. I'm pretty sure we're way ahead of the soldiers on the ground, but that flyer could sneak up on us. Yoshi, you and Jean have to get to the tower, no matter what. If I tell you to go, you go. Don't argue. Don't ask questions. Just get to the tower. Jean, take a good bearing. It'll be easy to get lost down there.\"\n\nWith this final admonition, Tammy thumped Boudi in the sides and started down into the valley between the two hills.\n\n*****\n\n\"My tail aches,\" F`reet `du Hom quietly grumbled. \"It is worse going downhill. How does T` Emmi do it? And I am sure the fur on my thighs is gone. But you are a good girl, aren't you, dTuh` chiz?\"\n\nShe leaned forward and patted the mare affectionately on the side of her neck. dTuh` chiz bobbed her head tiredly and whickered softly, as if she understood the need to be quiet. Vaguely the pilot was aware she spoke aloud, but in her mind she was speaking to her ever patient mount. Murmuring to herself had become a habit over the past two days. jZav`Etch females did not always do well on their own. Though she had the companionship of the Humans and T` Emmi, she was isolated by language. F`reet `du Hom smiled at the soulful eyes on the back of the steelie's head and returned her attention to the woods around her. She had seen enough of trees to last her quite a while. She had been born and raised in a city and though she enjoyed hunting and fishing and many other activities undertaken in the forests of her home world, F`reet `du Hom had had enough of this forest. She certainly had had enough of riding.\n\nThe suns were now high over the valley, nearly to their zenith, and she felt the need for food. The Human prepackaged rations were bland and she did not wish to rummage through the packs on her saddle to find the sausages T` Emmi had given her. They were quite good, but there were few of them left. Her hand drifted to the pouch on her belt. The food bars there had to be ancient. Were they still edible? With two fingers she explored them, fearing what she might discover.\n\n\"The wrappers are intact,\" she murmured, a little surprised.\n\nShe was about to take one out when her finger brushed something that was not a food bar. Flat and as wide as two of her fingers she could not guess what it was. Taking the strange object from the pouch she discovered it was a very old data storage card. Being a civilian model it could not have been part of the original emergency equipment. Though she was very curious, she had no way to read the data at the moment. Perhaps, if they survived this adventure, she would find some way to examine the contents of the card. For the time being she tucked it back where she had gotten it and took out a food bar.\n\n\"Fish with tHi`qel*? My favorite,\" she snorted. Her tail flicked with uncertainty, but her whiskers twitched with hope. \"Can it still be good?\"\n\nPeeling the wrapper open she was pleased to smell the freshness of the spice. It sent her mind racing back to her people and her home. Her heart ached to return and for an instant she could almost see her father's house with her mother's garden behind. tHi`qel grew thick in that garden among many other herbs and spices. With a soft purr she took her first tentative bite of jZav food in days. The bar was still fresh and might have been the best thing in the universe. After the last bite she folded the wrapper and tucked it in her pocket. Later she thought she might sniff it to bring back good memories.\n\n\"Oh, to return home,\" F`reet `du Hom sighed. \"I truly wish to return home, dTuh` chiz. As beautiful as this world of yours is, I have had enough.\"\n\nSince crash landing here, there was only one event she truly desired to repeat. Always her eyes searched among the tall trunks for the puma. Such a strange creature! So like her kind and yet so very different. On jZav, her people's world of origin, there were several large predators of the kind and science said they were related to the jZav`Etch. It was amazing to her that the puma existed at all. How could it? Theories abounded regarding parallel evolution, but those mainly focused on the fact so many intelligent species had developed at all and most of those species conformed to the bipedal design. The puma, as far as she could recall from her studies years ago, was a unique case of near exact replication. Yes, the ears were much larger and the cranium much smaller, but those eyes and that face could belong to one of her cousins. Well, they could almost belong to one of her cousins. The mouth was proportionately somewhat larger than would be found among her kind. Nevertheless, upon seeing it she had almost called out a greeting.\n\n\"I wonder what other animals will surprise me,\" she murmured and patted dTuh` chiz again.\n\nF`reet `du Hom adjusted her seat once more as they finally began to climb the slope up to their destination. The tower could be glimpsed occasionally between the bows of trees overhead. It looked well made. A sophisticated construction. She wondered absently if the Humans had built it off world and set it on a foundation fully assembled or if they had shipped the parts and built it here.\n\n\"As long as Yo`Shii can connect the transceiver and get it working, it does not matter,\" she breathed and took in a deep breath through her nose. \n\nScents of the strange herbivores T` Emmi called 'deer' came to her. They were quite distant now, but had come along this path not long ago. Other scents, less strong, she could not identify. One smelled of musk, blood and meat. It was not a puma. She would recognize that scent again easily. Curious, F`reet `du Hom drew in another deep breath and tried to decipher what it might be. How large would it be? What would its prey be? She shook her head. There was no way to tell. Still, she tried again. Suddenly a cold chill ran down her spine and her hackles rose. \n\n\"Dusig!\" she hissed. Her eyes went wide and she scanned all around. Had she imagined it?\n\n\"F`reet `du Hom?\" jZeen` asked from ahead of her. The girl looked puzzled and afraid. jZeen` had worn that expression too many times of late. Her face was not suited to it. She should be laughing and happy, not fearful.\n\n\"Hush, child,\" F`reet `du Hom said, placing a finger across her lips in the gesture these people used to mean silence.\n\njZeen` frowned uncertainly. It was amazing how Humans could express so much without a tail or substantial ears. They did not even have whiskers. And yet the girl's expression was clearly readable.\n\nF`reet `du Hom drew in another noseful of the forest air, fearing she was right. The scent of Dusig was faint. Wherever they were, they were not close. The breeze across her whiskers told her it was flowing from up the hill they were climbing. That would mean the Dusig were ahead of them.\n\n\"T` Emmi!\" she hissed softly and thumped dTuh` chiz in the sides to hurry her past jZeen` and Yo`Shii. \"T` Emmi, we must stop! The Dusig have gotten ahead of us! Stop!\"\n\n*****\n\n\"What's she saying about the Dusig?\" Jean asked, fear and confusion vying for dominance on her face.\n\n\"Are they coming?\" asked Yoshi, pulling his shotgun out.\n\n\"I don't know!\" snapped Tammy crossly. She raised a hand in a calming gesture and tugged on her reins to stop Boudi on the trail. \"What is it, F`reet `du Hom?\"\n\nThe jZav`Etch pilot spat a frustrated word and visibly forced herself to relax.\n\n\"Dusig, T` Emmi,\" she said distinctly and pointed up the hill. She gestured to her nose and made and exaggerate pantomime of sniffing the air. Her eyes were intent on the girl.\n\n\"She smells the Dusig,\" said Tammy, frowning. \"You two hold still a minute.\"\n\nTammy lightly bumped Boudi with her heels and went a few paces up the hill. She rose in her saddle and inhaled deeply through her nose, mentally sifting through the various scents. Millions of scents confronted her like background noise and she could detect nothing of the...\n\n\"Holy shit!\" she choked. \"She's right. I could barely smell it, but it's there!\"\n\nTammy wheeled Boudi around to face the others. She didn't know what to do.\n\n\"What's there?\" Yoshi asked, looking fearfully up through the trees.\n\n\"The smell of the Dusig,\" Tammy told him. \"They're ahead of us somewhere!\"\n\n\"You can smell them?\" Jean asked and sniffed. Her Human nose was incapable of distinguishing anything from the myriad of forest smells. \"I can't. Are you sure?\"\n\n\"I'm sure,\" Tammy confirmed. \"Really faint. It's there, though.\"\n\n\"We can't just turn back,\" Yoshi said firmly. \"We came all this way. We killed people to get here, Tammy. We can't turn back.\"\n\n\"Maybe we could head down to Big Lake,\" put in Jean. \"Hide out for a few days. They might give up and go away.\"\n\n\"And they might blow up the tower!\" Yoshi snapped. \"They might be planting explosives right now. For all we know, we'll hear an explosion any second and the tower will come crashing down.\"\n\n\"Both of you calm down,\" said Tammy, sounding like her mother. \"We have to think. How did they get ahead of us?\"\n\n\"The flyer,\" Yoshi said as if it was obvious. \"They've been buzzing around all over the place.\"\n\n\"Right,\" Tammy nodded. \"F`reet `du Hom, how many?\"\n\nThe pilot shook her head and held up a palm, indicating she did not understand.\n\n\"Dusig.\" Tammy pointed up the hill and began ticking numbers on her fingers. \"One? Two? Three?\"\n\n\"Dusig?\" F`reet `du Hom said, brightening. She nodded and held up a six fingered hand. She swiped her other hand across the palm and shrugged, shaking her head.\n\n\"What does that mean?\" Jean wondered.\n\n\"Why do you keep asking me? I don't speak the language!\" said Tammy irritably. \"I think she means she doesn't know.\"\n\n\"If they were bringing in soldiers with the flyer I don't think there can be very many,\" said Yoshi in a calmer tone. \"That flyer seats four and a pilot. They might be able to crowd five in, but I doubt they could get more than that and still have room for gear like weapons or explosives.\"\n\n\"What if they shuttled in groups?\" Jean pointed out. \"They could have brought a small army from town by now.\"\n\n\"I don't think so,\" Tammy said thoughtfully. \"The smell would be stronger. If there were a lot of them up there, I think I would have smelled them sooner.\"\n\n\"Really?\" Jean asked. \"Are you sure?\"\n\n\"I can smell a pack of wolves from east of here.\" Tammy gestured vaguely between the hills in that direction. \"And there's a wolverine around somewhere closer. I can smell her musk and she made a kill recently.\"\n\n\"Wow,\" Yoshi breathed, impressed.\n\n\"But you don't know how many wolves,\" said Jean.\n\n\"Oh for Christ's sake!\" hissed her sister. \"They're kilometers away. The scent is faint. But the Dusig are above us. Their scent isn't much stronger. Too much other stuff around here for me to really notice it until I was trying to.\"\n\n\"Okay,\" said Yoshi, shooting a glance at Jean to quiet her. \"Where does that leave us?\"\n\n\"I don't know,\" Tammy said and slumped thoughtfully in her saddle. \"We need to get the message sent. There's no telling what these jerks have been doing in town. After we send the message we can disappear into the forest and hide out until the cavalry gets here.\"\n\n\"The cavalry?\" Yoshi looked confused.\n\n\"It's just an expression,\" Jean informed him sulkily. \"Pa says it sometimes.\"\n\nThey all fell silent for a few minutes as they collectively worked on the problem. F`reet `du Hom looked especially uncomfortable and restless. Finally, Tammy looked at the pilot questioningly. F`reet `du Hom scowled, frustrated. She made hand gestures as if she were pulling something out of her pocket and pointed to Yoshi.\n\n\"Get your pad out, Yoshi,\" Tammy said. \"I think she wants to look at the map.\"\n\nThe off-world boy dug in his pocket and produced the device. It took him only a second to bring up the holographic map and show it to the jZav`Etch. F`reet `du Hom pointed to the juncture of the creek and stream where they had separated and then traced a line from the hill they were supposed to have met Tammy. She held her palm up in question.\n\n\"We went this way,\" Yoshi told her and traced a line across the map to roughly their current location. \"We are here.\"\n\n\"Dusig,\" F`reet `du Hom said, jabbing a finger through the map back along their track. She held up both hands with all twelve fingers splayed.\n\n\"Alright,\" said Tammy, nodding. \"Twelve Dusig behind us.\"\n\n\"Are we sure there are twelve?\" asked Jean.\n\n\"Let's not worry about that right now,\" Tammy said and turned her attention back to the map. She pointed to their location, asking, \"Dusig?\"\n\nF`reet `du Hom nodded and touched the glyph of the tower. When it expanded to a three dimensional image she jerked her finger back in surprise. A tiny version of the tower floated above the map, rotating slowly. Tammy waved her hand through it and it disappeared. F`reet `du Hom flicked her tail in irritation and carefully ran her finger in a circle around the glyph.\n\n\"Right,\" Tammy said. \"We know the Dusig are there. What else?\"\n\nF`reet `du Hom pantomimed shading her eyes from the sun and looking northward as if she were searching for something. It occurred to none of them that this was the same sort of gesture a Human might use to communicate someone was searching or looking for something. When it was clear the others did not understand her she pointed insistently at the glyph and repeated her pantomime.\n\n\"She means they're looking for us to the north!\" Jean said a little more enthusiastic than she had been a moment before.\n\n\"Maybe,\" Tammy hedged. With a rolling gesture of her hand she said, \"F`reet `du Hom, go on.\"\n\nThe pilot flicked her ears and indicated the glyph and then pointed to their location below it on the hill. She traced a curved line around to the west and up the slope to the tower. She traced another line to the east and up to the tower and a third all the way around the far side of the hill to the south and up. She looked questioningly at Tammy. When the girl only scrunched up her face uncertainly F`reet `du Hom pulled out her pistol, retraced her lines hurriedly and pretended to shoot the tower.\n\n\"Oh!\" Tammy brightened and looked at Yoshi. His eyes were a little wide and a small smile quirked the corner of his mouth.\n\n\"I don't get it,\" said Jean. \"She wants us to separate or something?\"\n\n\"She wants to come at them from a direction they aren't looking,\" said Yoshi. \"Maybe we can take them off guard.\"\n\n\"But you said they could have sensors and stuff,\" argued Jean. \"What if they've got them all around the tower?\"\n\n\"I wish I had my kit,\" grumbled the off-world boy. \"I could detect their sensors if they had any.\"\n\n\"Sensors...\" Tammy said thoughtfully. She reached out and took the pad from Yoshi. A quick tap on the screen brought up the holographic key pad and she worked it to bring up the sensor plan they had used to find the Dusig on that second day before the fight at the scout ship. \"Looks like there's one down over there.\"\n\n\"A sensor?\" Jean asked, looking through the trees in the direction her sister was pointing.\n\n\"And there are a couple more within range of the tower,\" Tammy said, nodding. \"Let's go.\"\n\nThey had to scrape a thick layer of moss and old leaf mold off the sensor when they found it, but when Yoshi got the cover off the interior was in pristine condition.\n\n\"Power cell is at about half charge,\" he observed, linking his pad to the service box. He knelt beside it and started pulling components out. \"Your dad will need to change it in a couple of years. Looks like we've got a good connection to the other sensors.\"\n\n\"Turn on your audio,\" said Tammy, watching over his shoulder. \"Maybe we can catch a communication while we're here.\"\n\n\"I wonder how Ma and Pa and Mike are doing,\" said Jean.\n\n\"They're probably fine,\" Tammy assured her, though she felt some apprehension at the thought of their family.\n\n\"There we go,\" Yoshi said, examining the display intently. He called up the hologram of the area around the tower and sat back on his heels. \"That blue blip is the flyer. Looks like there are four soldiers up there.\"\n\n\"Are you sure?\" Jean asked.\n\n\"Those are the same kind of signatures we got before,\" Tammy told her. \"See anything that might be a sensor?\"\n\n\"This sensor isn't really meant to look for that kind of stuff,\" the off-world boy said. \"But let's try something. Give me a second.\"\n\nHis fingers flew over the virtual keyboard in a blur. Suddenly the image in the hologram started jumping. The dots indicating the Dusig hopped around almost too fast to register them.\n\n\"What are you doing?\" Jean asked.\n\n\"Running it back over the last day,\" he said, still working the keyboard. \"Maybe they'll give something away by their movements.\"\n\nThe Dusig suddenly disappeared from the hologram and Yoshi froze it. He then keyed the controls to advance the scene hour by hour until the Dusig reappeared. Reversing by fifteen minute increments and then forwarding it minute by minute he found the time when the flyer arrived and froze the image.\n\n\"They got there early yesterday evening,\" he said.\n\n\"All power cells put out heat, right?\" said Tammy. \"Could we track something like that?\"",
        "\"I don't think so,\" said Yoshi. \"If they build their stuff like the CP there's going to be all kinds of shielding. I'll check, though. Give me a second.\"\n\nYoshi worked the keypad again and shook his head.\n\n\"Nothing there,\" he said. \"Either I'm right about the shielding or they didn't bring any sensors.\"\n\n\"Go ahead and advance the timeline,\" she told him.\n\n*****\n\nAs the dots rapidly shifted around the tower's hilltop F`reet `du Hom leaned in to get a better look at the display. She watched carefully, tracking individual dots, noting how they operated in pairs. They quartered the area in a sloppy search pattern and F`reet `du Hom felt more sure than ever these Dusig were not military and had never been trained by jZav`Etch. She was only a pilot and had little training in operations on the ground, but as part of her officer's school she had done several field exercises, so knew a little. Regardless, it did not take a veteran of many years to recognize amateurs at work.\n\nShe tried to think why the Dusig were after her. What had happened during the time she could not remember? Why did the Dusig come here? Why had she come here? Vaguely she recalled trying to alter the course of the scout ship she had commandeered. She had made the attempt and had still come this way. Why? It made no sense. \n\nUnless! \n\nUnless she had been unable to change her course!\n\nThat would mean the scout shuttle had been preprogrammed. That could account for the communication controls being removed. Without the controls, no messages could be sent. The Dusig might also have feared she and the other jZav`Etch officers would escape with one of the ships. It would take a very long time for a shuttle, even a scout shuttle with its powerful drive and comparatively low mass, to get back to Hegemony territory, but it could be done and the Hegemony would seek out the renegades and bring them to heel one way or another. Locking the navigational systems on a specific course would both prevent the ship from returning to the Hegemony and deliver the fugitives to a known location where they could be dealt with.\n\nShe let her thoughts drift over that notion for a while, paying only partial attention to the map and the movements of the Dusig. Why had the rebels not destroyed her scout shuttle? They had tried. The light cannon on the transport shuttles had simply not had the power to take her down, though they had eventually hammered through the shields. Still, the B`hag`Geera's Thumb could have. It was a cartographic vessel, not a warship, but it was equipped with cannon and a missile launcher. Either could easily have destroyed her shuttle. Why had they let her go?\n\nAn idea struck F`reet `du Hom and she straightened and began to pace, deep in thought. Could the navigator have done something to sabotage the ship? Something simple the Dusig would not notice right away? Qel`ta Nhem was a canny and resourceful Pah`Tht. After long years of service he had been promoted from a veteran engineer to an officer's position. He knew the workings of the ship as well as any in the fleet. Most importantly, he had been brave.\n\n\"He might do it,\" she murmured softly. \"Weapons control was right next to navigation. He could have locked out the cannon with a simple code. It would not take much to temporarily disable the system.\"\n\nShe shook her head. Simple sabotage would be simple to diagnose and correct. Even poorly trained subject race engineers could sort it out given time. The Dusig had not used the weapons on the B`hag`Geera's Thumb to bombard the settlement and destroy the little atmospheric ships of the Humans. They had used the shuttles' cannon. That was obvious from the limited damage done to her ship and the local aircraft they had salvaged the tools from. And now they did not have the shuttles, apparently. Otherwise they would not be using the Human ships. What had happened to the shuttles?\n\n\"Bob!\" she said a little louder than she had intended, drawing the attention of the three youngsters. They asked questions and looked curiously at her, but she waved them off. A little dubiously they returned to their study of the map and she returned to pacing.\n\nBob and Deb`bho `Rah had definitely done something. That explosion could have been a drive chamber breach. A small one to be sure, but a breach all the same. It could have crippled all three shuttles depending on how they had been parked. Up until now, the Dusig had acted clumsily at best. It was no great leap to reason that they had simply parked their shuttles in a group rather than dispersing them.\n\n\"But they are not entirely foolish,\" she murmured. \"Perhaps the senior male was killed or disgraced. He would have been replaced immediately. The change in their approach to recapturing me was notable. He knows something of strategy and common sense.\"\n\nF`reet `du Hom stopped her pacing and looked at the map hologram. Whoever was in charge of the Dusig now had deployed one group of soldiers on foot to investigate around her shuttle. That was obvious now that she considered it. Rddoy had not set off those explosives without cause. She and T` Emmi had certainly heard the brief firefight afterward. And the second group in the large utility ship had come south to do something. She suspected it was to find her, or just as likely, cut her off from the town where an armed hostile element might provide her with aid. They might not have known she was already being helped by the locals, but after she and T` Emmi shot down the utility ship they would have few doubts. The survivors of that encounter would have reported two jZav`Etch on the planet.\n\n\"That probably yanked a knot in the matriarch's tail.\" She smirked at that. Dusig had only very short tails, hardly worth the name. \"So what do they do? They order the survivors to pursue us and send the light ship to scout for them. Once they realize we are continuing south they realize there is another tower that could be made to function. And so they send a small force to hold the tower while the larger force comes up behind and traps us!\"\n\nThe youngsters were staring at her again when she turned to face them. She had not realized she was speaking aloud and cursed herself for looking foolish. Gritting her teeth and swishing her tail she shook her head sharply and stepped to stand next to Yo`Shii.\n\n\"Where are the Dusig now?\" she asked slowly, indicating the glowing dots on the map.\n\n*****\n\n\"I don't understand,\" Yoshi said to F`reet `du Hom.\n\n\"She asked something about the Dusig,\" said Jean.\n\n\"Dusig,\" the pilot said forcefully and ran her finger in a circle around the tower glyph on the map and then held her hand palm up.\n\n\"Show her the current view,\" said Tammy. \"I think she wants to know where they are.\"\n\nYoshi shrugged and ran his fingers over the virtual keyboard. The map returned to current time, displaying the positions of the Dusig. F`reet `du Hom studied the map a moment and then waved her hand to the north edge of the hologram asking \"Dusig?\"\n\nYoshi scrolled the map north and more than a dozen dots in two distinct groups appeared. They were on the far side of the hill. One was following the creek and the other was quickly cutting across country to the east of the route their little party had taken.\n\n\"Rddoy?\" F`reet `du Hom asked.\n\n\"What?\" said Yoshi, confused.\n\n\"She wants to see where Roy is,\" said Tammy. There was catch in her voice and a gleam in her emerald eyes that said more than her words.\n\nYoshi gave a nod and reset the parameters of the sensors. Two new dots popped up on the near side of the hill, though somewhat further east.\n\n\"He's with someone!\" Jean said, surprised.\n\n\"Who could he be with?\" Tammy wondered.\n\n\"Looks like... Holy crap! It's a Vespan!\" the off-world boy barked. \"Where did a Vespan come from?\"\n\n\"Town,\" Jean said instantly.\n\n\"How?\" wondered Yoshi.\n\n\"No idea, but that isn't important,\" said Tammy. \"Roy is still alive and he's coming this way. He's moving faster than the Dusig, too, and I bet he doesn't know about the ones already at the tower.\"\n\n\"We need to get to him,\" said Jean.\n\n\"Yeah!\" agreed Yoshi.\n\nAs much as Tammy's heart told her to run and meet Roy, she could see it wasn't the critical thing to do. For now, Roy was relatively safe and he was not alone. That was a big relief and she had to sit down before she fell down. Plopping on her butt next to Yoshi she took in a couple of deep breaths and tried to think.\n\n\"We can't do that,\" she finally said and raised a silencing hand before her sister and Yoshi could protest. \"The most important thing is getting the tower working. There are only four soldiers up there. If we run off to get Roy they might destroy the tower before we get back. Even if they don't, it's possible one of the other groups will make it to the tower before we get back here to do anything. And even if they don't, we'll be twice as tired as we are now.\"\n\nJean dropped to her knees in the dirt and considered the map.\n\n\"So what do we do?\" she asked and looked from Tammy to F`reet `du Hom.\n\nTammy looked up at the pilot, indicated the dots around the tower glyph and turned her hand palm up.\n\n*****\n\nYoshi held his lower lip between his teeth and took another step. Just like stalking deer. That's what Tammy had told him. Move quiet. Keep your eyes and ears open. Don't let them see you. Great advice. The problem was, he never stalked deer. He didn't stalk anything. He sat in a tree stand and waited for the deer to come in range. \n\nOnce his foot was firmly planted he lifted his other foot and eased forward, placing it carefully between a couple of sticks he might otherwise have stepped on and snapped. He could not risk the noise. As tired as he was and as frightened, he felt every nerve alive with tension. Sweat trickled down his back. It was not summer and nowhere near a warm day. Why was he sweating?\n\nHis mind kept trying to bring up things that were not at all important. Flashes of old schoolwork and games he had played with friends. He should have peed before starting this slow creep through the woods. Had he shut his closet door before leaving the house? Would his mother find the storage card with his private videos? Where were his parents now? Was that a stick in his sock or a bug? And suddenly the face of his uncle Ernst flashed into his mind.\n\nTall, blonde and hugely muscular, Uncle Ernst was not a blood relation. He had married Yoshi's Aunt Mariko. The two had met while she was serving as an ordinance clerk and Ernst was in the CP Marines. Yoshi liked Uncle Ernst. He enjoyed Ernst's stories. And now he wished Uncle Ernst was here to get him the hell out of this mess.\n\n\"Yea, though I walk through the valley of the shadow of death,\" Yoshi whispered under his breath, trying to imitate his uncle's voice. \"I shall fear no evil for I am the baddest son-of-a-bitch in the valley.\"\n\nYoshi almost laughed at himself. He was not bad in any way that was good. He was literally bad at almost everything. But Ernst had encouraged him. Ernst had taught him to shoot a bow and a pistol. He was going to teach Yoshi to shoot a rifle but got transferred before he could. Yoshi took another silent step and arrived at the edge of the clearing around the tower.\n\nJesus! I'm tired, he thought. And I really need to pee.\n\nNarrowing his eyes he sought the target he was supposed to take out. \n\nYeah. Take out. I'm supposed to kill the poor bastard. \n\nThis was so not his thing. He was all but shaking. He did not want to kill anyone. He already killed somebody. It was someone else's turn. He wanted to run away and hide. He wanted his mom, damnit! \n\nAnd there it was. The Dusig was sitting with its back to Yoshi, looking down the other side of the hill. Everything stopped. Yoshi wasn't even sure if his heart was still beating. He couldn't kill this guy. It was just some poor dude that got told to do something. Yoshi considered turning back. They could come up with another plan. He couldn't kill another person. He didn't want to kill anyone ever again.\n\nThe Dusig soldier cocked his head in a reptilian jerk and began to turn as if he had heard something. Jean was off to Yoshi's left and the soldier was turning that way. As of their own volition his arms brought up the bow with the arrow knocked and drew back the string. The fletching touched his cheek for an instant and then the slim shaft was in flight. There was no sound, not even a buzz as the graphite shaft tipped with angry, glittering steel sliced through the air. The perfect silence was broken the instant the arrow struck the Dusig bellow the left side of his jaw. The soldier screamed a high-pitched gurgling, keening scream and rose clutching at the shaft that transfixed his throat. He spun and his serpent eyes scanned back and forth with a look of utter horror. Yoshi sent a second shaft into his throat just above the breastplate. A gout of dark purple blood sprayed across the ground even as the Dusig pitched backward thrashing. \n\nYoshi could not look away. He dropped his bow and reached for the shotgun across his back. More soldiers were coming and he had to be ready. Figures appeared from around the tower and Yoshi was still scrabbling for the weapon. They were going to kill him! Oh God! Mom!\n\nAnd then the Dusig were dead. Three shots rang out simultaneously and a ball of bright viridian light that left streaks in the boy's eyes smashed one right in the chest. The other two just crumpled. Yoshi blinked and turned away, tearing at the front of his trousers. It was close but he got his fly open in time and peed the best pee of his life. It was over. It was over. Thank you, God! Thank you. He peed more than he could remember ever peeing. He was standing there, his bladder long drained and his privates still out when Jean found him.\n\n\"Yoshi?\" she asked from behind him. \"Yoshi?\"\n\nComing back to himself he quickly stuffed everything back where it was supposed to be and closed his trousers. He was trembling all over. Finally he was able to turn around and look at his girlfriend.\n\n\"I want to go home,\" he said softly.\n\nJean burst into tears and threw her arms around him. He held her and they both cried. Tears rolled down their faces and wet their shoulders and they just held on until there were no tears left.\n\n\"I want to go home, too,\" she whispered hoarsely. \"I want to go home.\"\n\n\"Yeah,\" he agreed, kissed her cheek and tried to collect himself. \"Let's get this over with.\"\n\n\"I don't want to look at them again,\" she said. \"I killed one. I shot him in the face. Tammy told me I had to. It's awful. So much blood.\"\n\n\"I know,\" he said and gently pulled her arms from around his neck. He held her hands and looked into her tear streaked face. It was dirty and blotchy red, but it was the most beautiful face he had ever seen. Yoshi kissed her softly on the lips and she sniffled. He said, \"Come on. We'll take the long way around.\"\n\n*****\n\nWhen Tammy returned to the tower with the steelies she found Yoshi and Jean already inside working on the communications gear. Jean wasn't actually doing any work. She simply knelt beside Yoshi with a hand on his back and her head bowed, but he had the panel off the front of a terminal and was pulling cable ends out, laying them neatly side by side.\n\n\"I've got the tools,\" Tammy said.\n\nYoshi jerked as if startled and then nodded. He breathed out and then in deeply.\n\n\"I'll help,\" he said, patted Jean's shoulder and followed Tammy outside.\n\n\"Jean's really messed up,\" Tammy whispered as they unstrapped the toolbox from the stretcher.\n\n\"She is,\" he said stiffly. \"Me too.\"\n\n\"We'll get this done and leave,\" she told him. \"You'll take Jean west, down towards the lake. There are a bunch of good spots to hide down there. I'll try to get F`reet `du Hom to go with you.\"\n\n\"What about you?\" he asked, lifting the transceiver.\n\n\"I need to find Roy. He's out there with a Vespan. I think it's Mr. Vemmo. Almost has to be. Doesn't really matter which it is, though. None of Te`ja's family are properly trained to be out in the forest like this. I have to go find him.\"\n\n\"Jean won't like that,\" said Yoshi seriously. \"She'll want you to go with us.\"\n\n\"I know,\" she said. \"But I can't.\"\n\nThey carried the tools and transceiver inside.\n\n\"I'm going to need Freet do...\" Yoshi scowled and shook his head. \"I need the pilot. I don't want to try to figure this out all on my own.\"\n\n\"She was... Um... Working,\" Tammy said with a meaningful glance at her sister. \"I'll go get her.\"\n\nWhen Tammy rounded the tower she saw F`reet `du Hom had just laid the fourth Dusig soldier next to the other three. The pilot pulled the arrows from the one Yoshi had shot and examined the shafts before turning to Tammy.\n\n\"Yoshi needs you,\" said the girl.\n\nF`reet `du Hom nodded, understanding the boy's name if nothing else.\n\n\"T` Emmi okay?\" the pilot asked, placing a hand softly on Tammy's cheek.\n\n\"Yes,\" she said. \"I'll watch. You go to Yoshi. He needs help.\"\n\nF`reet `du Hom brushed her cheek on Tammy's and went into the tower. Tammy was left with the dead. She found herself able to look at them. To her surprise it was not as difficult now. The first time she had murdered someone her stomach had turned and she had nearly vomited. Roy actually had vomited. What did that say about her? What did this lack of feeling say?\n\n\"You never had a chance,\" she said and knelt to close their alien eyes. \"Never got off a shot. Why? Why did we have to kill you? Why did you even come here? You'd be alive if you hadn't come here!\"\n\nWith abrupt, unreasoning anger she balled her fist and slammed it into the cracked breastplate of the one she had shot. Pain ran up her arm and suddenly tears stung her eyes so she did it again and she was crying. She did not weep for long. They were all in danger and there was something else she needed to do. Wiping at her face she went around to the flyer and got in. The little ship smelled terrible. It was the stink of the Dusig. Out in the open they hardly smelled at all but in this confined space their reptilian musk was thick. The Dusig must have spent hours in the flyer just cruising, looking for her and her friends. She decided to leave the door open.\n\n\"Let's see what we can see,\" she sniffled and switched the power on. \n\nThe screens on the console lit instantly. Power was at eighty percent and everything looked functional. Weird hieroglyphics were scratched on some of the controls, probably for the pilots so they would know what did what. Another was scratched on the sensor kit's power button. She pressed it and waited for the holographic display to boot. When it came on Tammy was sure something was wrong. A massive smear obscured most of the display and she couldn't make heads or tails of any of it.\n\n\"What the fuck?\" she breathed, staring at the display and reaching for the controls. \"Did they break it?\"\n\nSeveral minutes of fiddling elapsed before she understood the display was zoomed in way too far to be used on the ground. Given this unit was meant for search and rescue and often only a pilot would be using it without help, the unit was preset for altitude. That would explain why the Dusig had stayed so high at first. Eventually Tammy figured out how to adjust the controls for ground level and she realized the big smear across the display was actually the bulk of the tower. As she continued to zoom out more of the surrounding area came into view.\n\n\"That's better,\" she sighed in relief.\n\nLife signatures were everywhere, though. The system automatically filtered out things like trees and small animals so all Tammy had to do was figure out how to refine the search to pick out the Dusig.\n\n\"Would help if I knew their body temperature,\" she grumbled, working the controls.\n\nIt took several more minutes to narrow things down enough for her to pick out the group of soldiers coming along the cut she had taken that morning to get to the tower. The Dusig were more than half way through it! That put them a hell of a lot closer than Tammy had thought they would be. Of course, she and the others had detoured to work their way around the hill to come up from the south. That had taken hours. It was what? Fifteen thirty by now? She checked the chronometer on the control panel and was surprised to find it was just past sixteen hundred.",
        "\"Less than three hours till dark,\" she said, fear clinching her gut for the umpteenth time. \"We really need to get going!\"\n\nShe burst from the flyer and sprinted to the tower door.\n\n\"How much time is that going to take?\" she asked before anyone could react.\n\n\"Don't know,\" said Yoshi. He was holding a small bundle of cables and looked as if he were sorting their ends.\n\n\"Yoshi, guess!\" she commanded more harshly than she'd intended.\n\n\"Three, maybe four hours,\" he stammered. \"I have a lot of plugs to make and there's still the power to regulate and...\"\n\n\"They are on the way,\" said Tammy, fear thick in her voice.\n\n\"We should run,\" Jean said immediately. \"Let's forget about this and just go.\"\n\n\"No!\" Tammy was not going to give up now that they had reached the tower. \"Jean, where's your rifle?\"\n\n\"Out there,\" the girl said, pointing spastically to the door. \"You can have it. I don't want it anymore. I don't ever want to hunt again. I don't want to kill anymore, Tammy.\"\n\nTammy dropped to her knees in front of her younger sister and hugged her. She kissed the top of her head and then leaned back to look the girl in the face.\n\n\"I want you to get hold of yourself,\" Tammy said more gently. \"Ma and Pa and Mike and everyone else is depending on us.\"\n\n\"They don't even know where we are,\" whined Jean tearfully.\n\n\"Yes they do,\" Tammy assured her. \"By now Steve will have told them. Even if they don't know, we still have got to send the message. The Dusig aren't going to just go away.\"\n\n\"Why not?\" Jean asked, wiping a dirty sleeve across her eyes. She sat up a little straighter.\n\n\"They want F`reet `du Hom for some reason,\" said Tammy. \"And I think they might want me, too, if they find out I'm here.\"\n\n\"You?\" Jean shook her head in disbelief.\n\n\"I'm jZav`Etch, sweetie,\" Tammy said. \"They won't know I've never been to the Hegemony, and I don't think they'll care.\"\n\n\"They can't have you,\" said the girl. Her voice sounded a little stronger. \"I won't let them. It's not fair. You didn't do anything! None of us did!\"\n\n\"Alright. I know,\" Tammy soothed. \"I'm going to get your rifle. Wait here. Yoshi, keep going. Work as fast as you can.\"\n\n\"Where are you going?\" he asked.\n\n\"To get Jean's rifle.\"\n\n\"That isn't what I meant!\" he called after her as she disappeared through the door.\n\nWhen she came back Tammy handed the weapon to Jean.\n\n\"I don't want that,\" the younger girl protested.\n\n\"Jean, the Dusig aren't going to care if you aren't armed,\" said Tammy evenly. \"They will come up here and they will try to kill us.\"\n\nJean looked away and swallowed hard. Another tear rolled down her cheek, but she held out her hand and accepted the rifle.\n\n\"You need to protect them while they work,\" Tammy told her, nodding towards Yoshi and F`reet `du Hom.\n\n\"Okay,\" said Jean, checking the rifle's magazine out of habit. She wiped at her cheeks again and looked up at Tammy. \"Don't you mean we need to protect them?\"\n\n\"I'm going down there to slow them up,\" Tammy explained. \"I'll take some of the explosives and ambush them.\"\n\n\"What? You can't!\" her sister objected.\n\n\"I have to stop them, Jean.\"\n\nF`reet `du Hom got to her feet and took Tammy firmly by the arm. She said something and shook her head. Apparently she intuited Tammy's intent from the sisters' exchange.\n\n\"I have to,\" Tammy insisted. \"And there's no time. They're getting closer.\"\n\nTammy tried to pull away but the pilot held firm. She dragged Tammy out the door and waved for Jean to follow. Yoshi stood and she waved him back. He ignored her and followed anyway. F`reet `du Hom led them around the tower to the dead Dusig. Jean cringed back and looked away, but Tammy gaped as F`reet `du Hom knelt and went over the dead bodies. She rose holding a pair of small devices. After wiping them on the tail of her borrowed shirt she reached up and none-too-gently fastened one to Tammy's uninjured ear. With Jean she was more careful.\n\n\"What the hell are these?\" Tammy asked, touching her earpiece gingerly.\n\n\"I heard that!\" said Jean, turning to look at her. \"In my ear. I heard you. They're radios.\"\n\nTammy tore hers off and glared at it.\n\n\"They could hear us!\" she gasped and looked accusingly at F`reet `du Hom.\n\nThe pilot snatched the radio from her fingers and put it back on the girl's ear. She stepped away and tried to explain something, making hand gestures that were too difficult and rushed for anyone to comprehend.\n\n\"Wait a second! Wait a second!\" Yoshi said, waving his hands like a referee. \"I think she changed the frequency. You know, the band they communicate on. The Dusig won't hear you.\"\n\n\"Oh. Right.\" Tammy's tail flicked and her ears lay out to the sides in embarrassment. \"Wasn't thinking. Sorry.\"\n\n\"I don't know how much this helps, though,\" said Jean, fingering the small device.\n\n\"I do,\" said Tammy, her eyes brightening. \"Come on, Jean. Yoshi, you and F`reet `du Hom get back to work.\"\n\n\"But...\" he began.\n\n\"Get the fucking tower working and send the goddamn message!\" she all but screamed at him.\n\n*****\n\nTammy felt the air begin to cool as the suns sank closer and closer to the western hills. She had found a good sized tree and was perched almost comfortably in the branches. Her eye was tired from checking her scope every few minutes. Jean's voice suddenly spoke in her ear and Tammy jerked, every fiber alert.\n\n\"They're getting closer,\" her sister said.\n\nTammy sighed in irritation. \"I told you to let me know when they were almost at the end.\"\n\n\"I know,\" Jean replied apologetically. \"I... I was just wondering something.\"\n\n\"Wondering what, Jean?\"\n\n\"Why the ones we killed, the ones up here, didn't use these sensors like we are.\"\n\n\"Oh.\" Tammy tried to relax. \"I don't think they actually knew how to use them. They figured out how to turn the sensors on but it takes more than that to work the controls.\"\n\n\"But they figured out how to fly this thing,\" said Jean.\n\n\"They had to,\" Tammy said. \"Besides, flying it isn't all that complicated. It's not like a spinner. A flyer's computer does most of the work. All you really need to do is tell it where you want to go. The sensors are automatic. They've got a default setting. For what they were doing in the air, that was enough. Hush now. Call when they're almost at the end.\"\n\n\"They're coming to the end of the cut right now,\" her sister replied.\n\nTammy put her eye back to the scope and sighted on the narrow passage she had used earlier that morning. Movement between the trees drew her attention.\n\n\"I see them,\" she whispered softly, though she was well out of earshot of the enemy.\n\nHer first bullet left a path of falling leaves and twigs before it struck the leading Dusig. The alien dropped, clutching his stomach and rolling on the ground. Dark purple stained his hands and his reptilian face was screwed up in pain. The soldier behind him reached to drag him clear and Tammy fired again. She missed. The bullet sent a cloud of debris into the air and the soldier ducked back. The wounded Dusig reached out imploringly, obviously begging for help. Tammy waited for a clear shot and depressed the trigger only when one of the other Dusig tried for the wounded point man. This third bullet found its mark. The pouldron covering his right shoulder shattered and there were two soldiers squirming and rolling in the leaf mold.\n\nViridian streaks blasted the trees everywhere and made Tammy duck down for all the good it would do her. They never really came close but when she looked again the wounded were under cover and all she could see were the barrels of enemy guns.\n\n\"They're behind the dirt bank and some trees,\" said Jean. \"I don't think you can get a shot on them.\"\n\n\"No,\" said Tammy. \"Keep watching.\"\n\n\"Looks like they're going back along the cut,\" said Jean. \"Around the last bend near that big tree. The oak, I think.\"\n\n\"Good,\" Tammy sighed. \"That's what I was hoping.\"\n\n\"They could still come for us,\" Jean worried.\n\n\"They probably will. I just wanted to slow them down for a while. I'm going to lure them to the east. You know, buy Yoshi more time.\"\n\n\"I think I can see Roy now,\" said Jean.\n\nTammy's breath caught in her throat but she coughed and asked, \"Where is he?\"\n\n\"On the crest of the spur leading up to the tower. About five kilometers out. Just came in range.\"\n\n\"It'll take him hours to get here,\" Tammy murmured. Her heart ached to go to him. He was in danger and if he arrived after she and the others left the tower he would be in even worse danger.\n\n\"I could call him on my pad,\" Jean suggested.\n\nFor just a second Tammy's heart sored. They could warn her love! They could divert him to a safer route. The data pads had a range of ten kilometers in clear ground, but all these trees and the uneven terrain would be pushing their max performance. And what if the Dusig were intercepting communications?\n\n\"I doubt you'll get through to him,\" Tammy said reluctantly.\n\n\"So?\" countered Jean. \"If it doesn't work, it doesn't work and I can try later when he gets closer.\"\n\nWith only a slight hesitation Tammy agreed. Through the tiny radio in her ear she heard Jean calling Roy. Roy did not respond.\n\n\"Wait until he gets to three kilometers before you try again,\" she told Jean. \"And keep an eye out for the group behind him, too.\"\n\n\"They aren't behind him anymore,\" her sister said. \"More like he's above them and they're down in the valley. The ones in the cut look like they're splitting up. Three of them are staying behind that tree.\"\n\n\"What about the others?\"\n\n\"Don't know yet,\" said Jean. \"Moving around a bit like they're looking for something. Maybe they're going to make a stretcher for the wounded.\"\n\n\"Alright. Just keep an eye on them.\"\n\nTammy had to shift to a more comfortable position. It seemed like no matter where she settled a branch was poking her. How did leopards do this for hours? For that matter, how did monkeys sit in trees for days? She shook her head. Why was it the little things that irritated so much? Why did she keep thinking of trivial stuff?\n\n\"Tammy!\" Jean called unexpectedly. \"They're climbing out of the cut and going downhill to the west. Looks like seven of them.\"\n\n\"What about the others?\"\n\n\"Staying by that tree.\"\n\n\"Those have to be the wounded,\" Tammy said. \"Don't forget they're there, but watch the seven. They're the ones I'm worried about.\"\n\n\"Can't you see them?\"\n\n\"Jean, there are too many trees! I'm only getting flickers of thermal and some of those might be deer or something.\"\n\n\"Oh. Sorry.\"\n\n\"Quit apologizing. Not your fault.\"\n\n\"Can you see that big pile of rocks down slope from the cut?\"\n\nTammy squinted through her scope and picked out the reddish stones.\n\n\"Yeah,\" she said. \"Only just. Bunch of branches in the way.\"\n\n\"Aim at the lower edge of the rocks and fire when I tell you,\" said Jean excitedly. \"On three. One, two, three!\"\n\nTammy stroked the trigger and felt the Johnson Big Bore push solidly into her shoulder. Through her scope she saw a large shard of red stone fly into the air and a scrabble of panicked movement.\n\n\"That stopped them!\" Jean hooted. \"They're all clustered behind the rocks now.\"\n\n\"Okay,\" Tammy breathed out slowly. \"Good thinking. How are you doing? Holding up alright?\"\n\n\"Yeah.\" Jean sounded a little sheepish. \"I'm sorry about earlier. It was just...\"\n\n\"I know, baby sister,\" Tammy said kindly. \"Me too.\"\n\nThey went quiet, waiting on the Dusig to make their next move. Minutes felt like hours but the suns had hardly changed position before Jean warned Tammy again.\n\n\"One just crawled past the stones. There goes another one!\"\n\n\"Damn! I can't see them.\"\n\n\"Just shoot the rock again,\" Jean suggested.\n\n\"I don't have that much ammo!\"\n\n\"Maybe you should have taken my rifle,\" said Jean. \"Or one of their guns.\"\n\n\"Your little 30 doesn't have the power to go through their armor at this range and I don't know how to use one of their guns.\" Tammy gritted her teeth. She had not had time to think things out. \"I'm moving.\"\n\n\"What?\" asked Jean in surprise.\n\nTammy ignored her. Slipping her rifle sling around so the weapon hung across her back to free her hands the girl chose a new tree and leaped, crossing seven or eight meters and catching a thick branch. She paused only long enough to pick another tree and leapt again.\n\n\"Where are they, Jean?\" she asked. She was a little disoriented and had lost track of the cut and the pile of red stones.\n\n\"They all moved,\" her sister said. \"They're still west of you. What are you doing?\"\n\n\"Playing squirrel,\" Tammy told her and leapt again. She missed the branch she aimed for but caught the thick trunk and pulled herself up. Another leap took her at least ten meters to the next big tree and she paused to catch her breath. \"Where are they?\"\n\n\"If you look due north, that's where they are. About forty meters. Coming through the trees. They're moving kind of slow.\"\n\nTammy crawled out further on the branch and pulled her rifle around. Looking through the scope she saw flickering shapes darting back and forth from one piece of cover to another. She waited for the nearest one to pop into the open and fired. The big 12mm round smashed a sapling but she had missed her target. The Dusig all went to ground. She was close enough to hear them call to each other and all of a sudden there were heads poking out from behind half a dozen trees. She fired again and leapt. The branch she had been on disintegrated under a hail of viridian bolts. More slashed through the leaves, following her to her next tree. She dodged behind the trunk, feeling the impact of rounds through the wood. More rounds sizzled and bit the foliage on the western side of the tree and Tammy turned back, leaping to the tree she had just come from. She did not try to get a shot off before leaping to another. A few bolts slashed the air around her and she jumped straight up. One handed Tammy got her rifle oriented more or less on the Dusig's position and snapped off a shot before leaping again.\n\n\"Jesus!\" she swore, catching a branch and swinging up and over it. A bolt slammed into the trunk next to her and she dove.\n\nDodge and leap and fire a shot was all she could do. She lost track of time but knew she must have been doing this for several minutes. When her next leap drew no fire she stopped to get her bearings and call Jean.\n\n\"What are they doing?\" she panted.\n\n\"They stopped chasing you,\" her sister said, sounding strained.\n\n\"Where am I?\" Tammy asked, chancing a look around the trunk she clung to.\n\n\"East of the tower,\" Jean said. \"Hard to figure but I think you're about a hundred meters up the valley.\"\n\n\"And the Dusig?\"\n\n\"Maybe sixty meters behind you,\" said Jean. \"They're in the bottom of the valley now. What are we going to do?\"\n\n\"Hang tight,\" said Tammy and gathered herself for a leap.\n\nA couple of minutes later she had covered most of the distance back to where she guessed the Dusig had stopped. Reaching into the little haversack she normally carried her rations and necessities in she found the lump of explosive she had intended to set a trap with. It took her a few seconds to insert the detonator and set her pad to count down before sending the signal to trigger it.\n\n\"Where are they, Jean?\" she whispered.\n\n\"About twenty meters west of you. I don't know what they're doing. Looks like maybe they don't know either.\"\n\n\"How many are left?\"\n\n\"Still seven.\" Jean sounded even more stressed. \"You haven't hit any of them.\"\n\n\"Alright,\" Tammy whispered. She had not believed she had gotten any more, but she had hoped. \"I won't be able to talk for a bit. Don't worry. I'll call as soon as I'm in the clear.\"\n\nTammy touched the key on her pad's screen and the timer began counting down. With a hard toss she tried to get the lump of explosive right in the middle of the unseen group of soldiers but she was not about to wait to see what happened.\n\nLoud warning shouts echoed through trees as she leapt away. A blast of sound and light and a flurry of debris followed. Tammy stopped and looked back. Between the branches she could see Dusig rolling to their feet and hear them snarling in their strange language.\n\n\"What was that?\" Jean demanded fearfully.\n\n\"I'm fine,\" Tammy hissed back. \"Did I get any?\"\n\n\"No. Whatever that was it was about ten meters from them.\"\n\n\"Damnit!\"\n\nTammy shifted to a more secure position on her branch and put her riffle to her shoulder. She scanned between the trunks, found a target and fired. The Dusig spun like a top before dropping to the ground. A stunned silence lasted for a heartbeat and then the canopy around her erupted in viridian bolts.\n\n\"They're coming for you!\" cried Jean in her ear but Tammy was already leaping away.\n\nWhen the shooting stopped so did Tammy. Panting and shaking she pulled herself onto a nice thick branch and called her sister.\n\n\"How'd I do?\"\n\n\"Tammy!\" Jean sobbed. \"Oh thank God! I was so worried.\"\n\n\"I'm fine,\" Tammy panted reassuringly. \"How'd I do?\"\n\n\"They followed you, but four of them are turning back this way.\" Jean sounded more frightened. \"Three of them are still moving towards you. They're spread out like when we hunted quail with Uncle Dan.\"\n\n\"Are you sure? I thought I shot one.\"\n\n\"One, two, three, four. I'm sure,\" said Jean. \"And three are moving towards you. You better move. They're less than thirty meters from you.\"\n\n\"Shit!\"\n\nTammy leapt southward, hoping to work around the three after her and come up on the four making for the tower. She had been sure her shot had at least wounded that one guy, but if he was wounded, it wasn't bad enough to make him quit.\n\nBelow she heard a shout and a couple bolts from the weird rifles slashed through the trees. She dodged and leapt higher. A bolt struck the trunk above her. Tammy snapped off a one handed shot and leapt again. She was getting tired and thought maybe she should go to ground somewhere. Let the soldiers go past her and double back like she had originally planned. A bolt from another Dusig sent her scampering along a branch and she leapt again. This was ridiculous. Her ambush had failed to pin them down and her bomb had done no more than catch their attention.\n\n\"And now I'm in a shooting gallery,\" she growled. \"Got to do something.\"\n\nShe leapt south and no shots followed. Had she lost them? Were they low on ammo?\n\n\"Jean?\"\n\n\"Yeah?\" Her sister's voice sounded different. More intense somehow.\n\n\"Where are they?\"\n\n\"I don't know,\" said Jean. \"I left the flyer. I'm at the edge of the hill. Those guys moved pretty fast. They're about a hundred fifty meters below me and I think I can get a shot at them.\"\n\n\"Alright,\" Tammy said tensely. \"Don't take chances. I'll check in later.\"\n\n\"I love you, Tammy,\" Jean said, her voice quavering a little.\n\n\"Love you too baby sister.\"\n\nTears were threatening Tammy's eyes and she was hoping those would not be the last words she spoke to Jean, but there was no time to worry about it. She leapt to the west. No shots came. Damn it! Where were the Dusig? Climbing out on a branch she lay prone and used her scope to search among the trees. There! She snapped off a shot and the soldier screamed in sudden, unabashed pain. He rolled on the ground clutching his thigh and Tammy waited for his fellows to run to help him as the ones at the tower had.\n\nBy short rushes the other two came on. They darted from tree to bush to broken stump, leapfrogging so one could cover the other. These guys weren't entirely stupid after all. Tammy waited for them to get close to their friend and fired again. Too late! Her target moved just as she pulled her trigged and the bush collapsed behind him. The other soldier sent a flurry of quick shots in her direction and Tammy bailed. She bounded off one branch and onto another and leapt for a new tree. More bolts stitched the air around her as she flew. Some came close enough for her to feel the heat of their passage.",
        "\"Fuck that shit!\" she gasped, hauling herself onto a thick branch and ducking behind the trunk. \"Jean, how's it going?\"\n\nNo answer.\n\n\"Jean?\" \n\nTammy reached up to the radio in her ear and found it was gone. She had lost it! She was reaching for her pad, hoping her sister wouldn't panic at the loss of communication when another bolt sizzled by her head, knocking bark from the tree. Tammy leapt without thinking. She missed the branch and the trunk she had aimed for and was plummeting towards the ground. Her hand caught a thin branch and she latched on, arresting her fall but jerking her shoulder mercilessly. The branch snapped under her weight and she dropped twenty meters, banging off the trunk and a dozen small branches as she fell. A sharp pain up her left arm jarred her senses and a crack on the head made her vision swim. She landed hard but came up on her feet already running. Disoriented she darted away, unsure of where she was going. Pain and fear drove her to near panic until another bolt slapped a dead tree in front of her, setting the rotten wood to smoldering. She dove behind it and grimaced at the shock to her arm.\n\n\"Oh shit, oh shit, oh shit!\" she whimpered, clutching her arm to her chest. She didn't need her medical kit to tell her it was broken. At least she could still move her fingers and there was no sign of the bone protruding. A spreading warmth on her scalp told her the knock on her head was more than a bump. She pressed tentative fingers to it. They came away slick and red.\n\nFrom the other side of the log she heard a cautious footstep in the leaves. The Dusig had gotten pretty damned close. Had she been stunned when she landed? Maybe they were just that fast. Her rifle was too awkward to use effectively with one hand. Fortunately she still had her pistol. She slipped it from the holster on her belt and thumbed off the safety. She wanted to pee. Why was it that people always needed to pee at times like this? Evolution was a dumb bitch sometimes. Why weren't the Dusig pissing themselves?\n\nAnother soft footfall brought her out of her fatuous contemplation and she shifted as quietly as she could. She couldn't see over the log without exposing herself. Up above the trees the sky was turning the color of evening. It would be dark soon. Where was Roy? Had he been close enough to hear the shots? No way. He had been five klicks from her. Tammy braced herself. She had to do something to end this stalemate. The soldiers were coming for her and she was out of options. She was hurt. Not really bad, but bad enough. They had the advantage. She wished she had another bomb to throw at them.\n\nThrow?\n\nHell, why not? It worked in those old novels her pa loved so much. From her belt she took the empty magazine and tapped it lightly on her buckle, hoping to make it sound like she had activated a grenade or something. The footsteps paused. She threw it. A grunt of surprise and scrabbling noises followed and Tammy sat up, bringing her pistol to bear. The Dusig soldier was diving away from her magazine when she shot him. The heavy caliber round spun him in the air and she fired again. He hit the ground and she shot once more. The bullet ricocheted off his helmet and knocked him over. She fired again, three bullets in rapid succession. One caught him in the ass and he howled as he ducked behind a tree. Tammy scanned for his pal, but saw nothing. It was a standoff now.\n\n\"You motherfucker,\" she growled. Her pain and fear fueled a desperate anger. She set her pistol next to her within easy reach and laid her rifle across the log. She knew exactly where the son of a bitch was, the range was extremely short and that tree was not all the thick. \"Fuck you. Fuck that tree. And fuck whatever's behind you.\"\n\nTammy caressed the trigger and the rifle shoved hard against her shoulder, the electric snap loud and the hypersonic crack of the bullet louder still. She gasped in pain as her everything suddenly protested the abuse. The bullet passed through the tree and the Dusig soldier yelped. She grinned even as her arm pulsed agony. The soldier scrambled away through the underbrush. His arm or his shoulder was leaking blood and he had abandoned his weapon. She was going to shoot again but her vision was fuzzy and she could not get a bead on him. Tammy sagged back to the ground.\n\n\"Thank God!\" she said fervently.\n\nAll she wanted to do right then was curl up and cry. She couldn't do that though. There was at least one more out hunting for her and the one she had just run off would tell him where she was.\n\n\"Got to move, Tammy,\" she told herself. \"Got to move right fucking now.\"\n\nInstinct urged her back towards the tower and her sister. Tammy crawled over the still smoking log. To the south the hill began its gentle rise and she began her climb. She was suddenly missing Boudi very much. She had not brought the mare because she knew Boudi wouldn't be able to match her in the trees and steelies were big targets. Still, about now she could have used a ride. A few minutes later she tripped and fell into a hole where a large white pine had torn free of the soil. White pines were notorious for that. They weren't really meant for this sort of terrain, but they did grow fast, and early on the company had wanted to establish a viable forest, so white pines had been scattered around like dandelion fluff. \n\nThe shock of hitting the ground got her brain working again, though she was still muzzy. She was under cover and she had gotten away from the spot where the Dusig would be looking for her.\n\n\"Fuck it,\" she growled softly and took out her med-kit. She fumbled it open, dropped it, picked it up and dropped it again. Her world went grey and dim and she drifted into darkness.\n\n*****\n\n* tHi'qel - spice used to flavor fish."
    ],
    "authorname": "RipperFish",
    "tags": [
        "adventure",
        "cat",
        "furry",
        "sci-fi",
        "survival",
        "forest",
        "future",
        "multi-chapter"
    ],
    "category": "Non-Erotic",
    "url": "https://www.literotica.com/s/a-world-for-the-taking-ch-08"
}
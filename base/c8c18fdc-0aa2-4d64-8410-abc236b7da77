{
    "title": "Tuff as Nails",
    "pages": [
        "Editor's note: this story contains scenes of incest or incest content.\n\n***\n\n*Author's Note: Any and all persons engaging in any sexual activity are at least eighteen years of age.\n\nDisclaimers: This story has been edited by myself, using Microsoft Spell-check. You have been forewarned.\n\n*****\n\nEzekiel 'Tuff' Richards looked at the sideline, looked at Coach Brighton and shook his head in disbelief. Coach Brighton was calling for 79R. Again. Even after the Elgee Eagles had dropped Tony Lowell twice. First and then became second and fourteen. Second and fourteen was now third and seventeen. And Coach Brighton was demanding 79R again.\n\nTuff lined up behind Brent Roberts and called for the football. He turned, faked a handoff, then sprinted right between the three Eagles that were tackling Tony. Tony was also fooled; he scrambled frantically, thinking he had somehow fumbled the ball.\n\nTuff had advanced twenty four yards before the Elgee safety realized that Tuff had the ball and tackled the quarterback.\n\nThe referee also tacked on an additional ten yards for Defensive holding against the Elgee Eagles.\n\nLooking over at the sideline, Tuff saw that Coach Brighton was livid. And again, the man called 79R.\n\n\"Pack, go Fifteen Sweep,\" Tuff said to Alan 'Pack' Hart, their tight end.\n\n\"But Coach...\" Alan said.\n\n\"IS trying to lose this game,\" Tuff snarled.\n\nAgain, Tuff called the audible for 79R and did not miss the smiles on the faces of the Elgee players. Brent snapped the ball, Tuff again faked the handoff, leaving Tony Lowell looking confused. Tuff prayed that Pack would be where he was supposed to be as he hurled the ball.\n\nThe Baylor Lake bleachers erupted in screams as Pack ran in for a touchdown. With five seconds left in the game, their Homecoming game, the score was now Elgee Eagles 20, Baylor Lake Bandits 19.\n\nCoach waved his kicker back to the bench and signaled that they were going for a two point conversion. And again, he signaled to Tuff that he wanted 79R.\n\nTuff didn't even bother trying to fake a handoff. He just took the ball and sprinted into the end zone himself. Tuff handed the football to the referee, then sprinted to the sideline.\n\n\"Brighton grabbed Tuff by his face mask and screamed, \"I am the God Damned coach! I tell you fucking seventy nine R, you run fucking seventy nine R, you little fucking cock sucker!\"\n\nTuff picked Coach Brighton up by his throat and held the man off of the ground.\n\n\"You ever raise your voice at me again? I'll rip your head off and shit down the hole, feel me dog?\" Tuff said, voice barely above a whisper.\n\nTuff then threw the man to the ground. Manny Lopez kicked the ball; the Eagles tried to run, but the boy only made it to his fifteen yard line before he was tackled. The referee blew his whistle, signaling the end of the game.\n\nThe boys met at the middle of the field and politely shook hands with one another, telling each other 'good game' and 'we'll get you next time' and 'congratulations.' Coach Brighton did not join them. He sat on the bench and wondered where he would get the five thousand he'd just lost on tonight's game.\n\nThe Baylor Lake fans stormed onto the field, screaming and cheering. Many of the boys smiled as their cheerleaders squeezed them, as their female classmates hugged them, as their male classmates high fived them.\n\nTuff walked past the milling students and parents, nodding to one or two students that congratulated him. He entered the locker room, stripped out of his sweaty uniform, grabbed a bar of soap and a towel and stepped into the small communal shower.\n\nShower finished, he dried off, then pulled on his threadbare bargain brand jeans, his tee shirt, and his church socks.\n\nHe called them his church socks because they were holey. The tennis shoes were a size twelve; Tuff should have been wearing a size thirteen.\n\nOther players were just starting to troop into the locker room as Tuff left out of the rear doors. Then he made the four mile walk home.\n\nHe had told everyone, told them and told them, do not vote for him. Tuff said that he would not be at the Homecoming Dance. But no one listened. Ezekiel Richards won Homecoming King by a landslide.\n\nBritney Kendricks was crowned Homecoming Queen; no one was surprised. If she had not won the competition outright, she would have bought it. Her daddy was Harry Kendricks, owner of Kendricks Engineering, a large Oil-field company. Kendricks Engineering made Kendricks pumps, the pumps that were on nearly every off-shore oil rig in the world. And what Britney Kendricks wanted, Britney Kendricks got.\n\nThe girl actually felt slighted that Tuff Richards skipped the Homecoming Dance, felt slighted that she'd had to dance with the senior escort, Alan Hart, and not Tuff Richards.\n\nAt the Pak-N-Sak, Tuff lugged another dolly of St. Elizabeth Lager to the cooler and stacked the shelf rapidly. The last case, he opened and distributed the cold bottles in the barrel of ice near the front counter. A bell rang, indicating that someone had pulled up to the pumps outside. He recognized Britney Kendricks' 2012 Corvette.\n\nIt actually amused him; that the stuck up beauty would actually pump her own gas. \n\nStepping behind the counter, he kept an eye on the car. His eyes did open slightly when she stepped out of the car. The dress she had bought for the Homecoming Dance was form fitting. The white gown was strapless and Britney's quite impressive chest seemed to be the only thing holding the ankle length gown on.\n\nWhen she turned to put the nozzle into her tank, Tuff saw that the gown was slit up the side to just below her hip. Her very shapely thigh was quite visible as she bent at the waist to squeeze the nozzle.\n\nWhen she finished, she stuck the nozzle back into the pump. Then she opened the passenger door, grabbed something off of the passenger seat and marched, with great purpose into the store.\n\n\"Evening,\" Tuff said easily.\n\n\"Here, ass hole, this is yours,\" Britney snapped, tossing a cheap plastic and rhinestone crown at him.\n\n\"Told y'all don't vote for me,\" Tuff said, almost amused.\n\n\"Well, we did; you owe me a dance,\" Britney snarled.\n\n\"I owe you shit; I told y'all I wouldn't be there,\" Tuff said. \"Not my fault none of y'all believed me.\"\n\nIt had been hard enough to get Ricky Benoit, the store manager to agree to give Tuff off for Fridays. Tuff wasn't about to ask for both Friday and Saturday off, just because it was their Homecoming Dance. And even if Ricky had agreed to give Tuff the night off, Tuff didn't have a suit to wear to the dance. Tuff didn't have the money to take a date either, and he saw no reason to go if he didn't have a date.\n\n\"You owe me a dance and I will get that dance,\" Britney vowed, face red with anger.\n\n\"Owe you shit, Britney but thanks for bringing me the crown,\" Tuff said lightly and nodded in greeting to the three giggling girls that came into the store.\n\n\"Hi Tuff,\" one of the girls simpered, which made her two friends giggle excitedly.\n\n\"Hi Melissa,\" Tuff smiled.\n\nThen he leaned forward, squinting at the girl.\n\n\"Hey, wait a minute, come see?\" Tuff demanded.\n\nMelissa sashayed to the counter, swiveling her hips. She stopped at the counter, small chest thrust forward.\n\n\"Oh, my, goodness; you got your braces off!\" Tuff exclaimed.\n\nThis caused the three girls to squeal. Giggling and squealing, they ran back out of the store, jabbering excitedly to one another.\n\n\"They didn't buy anything,\" Britney noted.\n\n\"Never do,\" Tuff smiled, watching as the trio ran across the nearly deserted highway to the trailer park across the street. \"Can't afford anything.\"\n\n\"Well, what you expect? They live in a trailer park,\" Britney sneered.\n\n\"Uh huh, anything else?\" Tuff said, twirling the gaudy crown on a thick finger.\n\nBritney Kendricks was beautiful, stunning, with waist length strawberry blonde hair, large green eyes, a pug nose and pouting lips. Her breasts were quite large and sat high on her chest; it was whispered that the breasts were store-bought. Her waist was narrow and her hips and buttocks swelled nicely. Her legs were sculpted, shapely and she often wore clothing to emphasize her legs.\n\nThe Sunday after his next pay day, Tuff walked from his Baylor Lake, Louisiana trailer to Stolzle's Shoes, in Kimble, Louisiana. The walk was nearly twenty four miles and Tuff slapped his forehead just as he walked into the parking lot of the shoe store. He did not know if the store was open on Sundays.\n\nFortunately for him, it was. An attractive red head smiled at him and flirted as he looked at different athletic shoes. He kept his face bland even as he wanted to wince at the prices of their shoes.\n\n\"Oh, that's a good one yeah; they got them a good innersole,\" the sales clerk said when he finally selected a cross-trainer model. \"What size you thinking?\"\n\n\"Think I'm a thirteen,\" Tuff said. \"The cleats I'm wearing are a thirteen.\"\n\nThe girl measured him. Tuff again kept his face bland as her eyes flickered at the sight of his holey socks. She measured both feet, then her eyes flickered to the crotch of his cheap jeans.\n\n\"Man! Know what they say about big feet, huh?\" the girl asked and Tuff blushed hotly.\n\n\"They wear big shoes,\" she smiled cheekily and got to her feet. \"You actually a thirteen and a half, double E. Think we got that in that size.\"\n\nTuff tried on the shoes and actually sighed with relief. They felt wonderful. Nearly his entire paycheck went to the shoes, but, no matter what his mother said, it was not an extravagance, it was a necessity.\n\n\"And, guy opened these up and stole himself a pair, believe that? Some people huh? But can't sell them no,\" the girl said and stuffed an opened bag of athletic socks into the bag with the new shoes.\n\n\"Thank you, ma'am, I really appreciate that,\" Tuff said quietly.\n\n\"Welcome,\" the girl said cheerfully.\n\nThe twenty four mile walk seemed worse. His old shoes bound his feet; each step drove the point home.\n\n\"Where you been?\" Marie Richards accused when he entered the trailer.\n\n\"Store,\" Tuff said, holding up the bag.\n\n\"I'll bet,\" Marie snarled. \"You was fornicating. Weren't you? You was fornicating, sinning. I seen the way them girls is, all dressed like the whores they is.\"\n\n\"Mom, here, bag's right here. Receipt shows when I was there; want to check?\" Tuff said.\n\n\"And what'd you buy? Drugs?\" Marie accused.\n\n\"Yeah, Mom, they got stores sell drugs. And give you a receipt, in case you want return their drugs,\" Tuff said, rolling his eyes.\n\n\"Don't you sass me,\" Marie said.\n\n\"Then don't say stupid stuff, huh?\" Tuff said.\n\nAt school on Monday, Tuff noticed that Coach Brighton had a beautiful shiner and a busted lip. At practice, Coach yelled at the players, singling Tuff out for the majority of his criticisms.\n\nThen Tuff jogged from school to the Pak-N-Sak for his five to one shift.\n\nAt seven thirty, Pack came in. He played as if he was going to grab a beer out of the ice barrel and Tuff smirked. Pack knew Tuff would never sell him the beer. Even if they were teammates, friends, Tuff was a straight shooter.\n\n\"Hear Britney's pissed at you?\" Pack asked as he put the large soda and the beef jerky onto the counter.\n\n\"Heard I don't give a shit?\" Tuff asked.\n\n\"Dude, what? Just fuck her, let her find out how small your dick is and move on, huh?\" Pack said.\n\n\"Uh huh, and what if she likes small dicks?\" Tuff asked, handing Pack his change.\n\n\"Then tell her Manny's even smaller than yours,\" Pack laughed.\n\nThe Baylor Lake Bandits ended the season with a 7 and 2 record. Cabrini Catholic High School and Kimble Academy were the only two teams that beat the Bandits. And, Cabrini beat them again in the first game of the play-offs.\n\nThe Winter Festival was held a month after their football season ended. Being a public school, Baylor Lake High School was not allowed to have a Christmas Dance, a Christmas celebration.\n\nAgain, Tuff told everyone he would not be attending; please do not vote for him to be the Festival King.\n\n\"Oh, you are going, and you are taking me,\" Britney declared smugly.\n\n\"No, I'm not,\" Tuff said. \"I'm working.\"\n\nThree days before the Winter Festival, Ricky Benoit informed Tuff he would be scheduled off for that Friday. Tuff simply shrugged his shoulders and continued stocking the shelves.\n\nThe next day, Britney again informed Tuff he would be escorting her to the Winter Festival. And again, Tuff told her he would not.\n\n\"But you're not working,\" she whined, actually stamping her foot.\n\n\"And how'd you know that?\" Tuff asked, baffled.\n\n\"Daddy told your manager give you Friday off,\" Britney preened.\n\n\"I make nine dollars an hour. Six times nine is fifty four, Britney, so, thanks a fucking lot for costing me fifty four bucks, stupid bitch,\" Tuff snarled angrily.\n\nBritney gasped, beautiful face a mask of shock.\n\nJust after lunch, just as he was about to walk into his American History class, Britney stomped up to Tuff.\n\n\"Here, ass hole,\" she snarled, thrusting a bank envelope at him.\n\n\"What? What's this?\" Tuff asked.\n\n\"Your fifty four bucks,\" Britney sneered.\n\n\"Aw, fuck you, Britney,\" Tuff snarled, shoving her hand away.\n\nThat Friday night, instead of going to the Winter Festival, Tuff was behind the trailer park, letting Melissa and her two squealing, giggling, preening friends beat him at basketball. The air was brutally cold with the humidity blowing in from the Atchafalaya Basin, but the eighteen year old boy and the three younger girls didn't notice as they ran back and forth, squealing and screaming.\n\nFinally, Mr. Trahan, the man whose trailer was next to the court stuck his bald head out and yelled for them all to go home, quit making all that noise.\n\n\"Heard Britney was wanting you go with her to that Winter Festival?\" Melissa dared ask as they walked toward her trailer.\n\n\"Uh huh, and heard Bobby Broussard wanted you go with him,\" Tuff said.\n\nShe blushed hotly and looked at the ground. Then she looked over at the handsome young man. He had a square, strong face, a mop of unkempt brown hair and warm brown eyes. \n\nHe was tall for his Cajun heritage, nearly six feet tall. His thin shirt bulged with his rippling muscles and his jeans were taut across his thighs.\n\nHe had to buy bargain brand jeans, had to buy jeans that would fit over his massive thighs, so usually the waists were too big. For three bucks, Melissa's mother would take in the waists for Tuff. Melissa knew that Tuff's waist was a slim thirty two inches, but he often had to buy size forty waist jeans and slacks.\n\n\"So, why didn't you go?\" Tuff asked when they reached Melissa's trailer.\n\n\"Denise needing her some glasses,\" Melissa whispered.\n\n\"Same here,\" Tuff said. \"Um, pay the light bill? Or... spend a bunch of money on a suit I might wear once.\"\n\n\"It's going get better yeah,\" Melissa promised, more for herself than for his benefit.\n\n\"You studying? Only way you getting a scholarship got to do real good in school,\" Tuff encouraged.\n\n\"Twenty six to ten!\" Melissa yelled just before dashing inside of her trailer. \"Ha ha! Beat you. Twenty six to ten yeah!\"\n\n\"Uh huh,\" Tuff smiled and opened the door of his own trailer.\n\n\"What was that little tramp screaming about?\" Marie demanded. \n\n\"Mom! God! She's not a...\" Tuff exclaimed.\n\n\"Don't! Don't you dare take the name of the Lord in vain!\" Marie screamed.\n\n\"What that Bible say about judging others, huh?\" Tuff demanded. \"Melissa's a good kid, Mom. She's not a tramp. She's not a whore. She's a good kid.\"\n\n\"You hear me? You don't be saying the name of God like that,\" Marie shrilled.\n\nTo make up for missing Friday, Tuff worked a double shift on Saturday. He sighed when he saw Britney's Corvette scream to a stop just outside of the door of the Pak-N-Sak.\n\nFortunately for him, the store was crowded. Fortunately for him, the store continued to be quite busy. Finally, Britney tired of waiting for an opportunity to scream at him and stormed away.\n\nThe Valentine's Day Dance was approaching. Tuff did find it amusing that they could not celebrate Christmas, but they could celebrate a day named after a Catholic saint.\n\nBritney let it be known that she expected Ezekiel Aaron Richards to be her date for the Valentine Day dance. Tuff let it be known he would not be her date for the dance; he would not be attending.\n\nAgain, Ricky sidled up to Tuff and let him know that he would not be working that Friday.\n\n\"I uh, uh, listen, I uh, I took a lot of shit you didn't go to some Winter dance?\" Ricky said.\n\n\"Then you about to take a whole truckload of shit,\" Tuff said.\n\n\"And how you know Harry Kendricks anyway?\" Ricky asked.\n\n\"I don't,\" Tuff said.\n\n\"Really?\" Ricky asked, dubious.\n\nBritney smiled smugly as she approached Tuff as he put his books into his locker.\n\n\"So, what time you picking me up? Oh, and my dress is red, okay? That way you know what color corsage get me,\" she announced.\n\n\"Not picking you up, not taking you, not going,\" Tuff said.\n\n\"You're not working that day,\" Britney challenged.\n\n\"Britney, get this through your head,\" Tuff yelled. \"I. Am. Not. Taking. You. I am not taking you. Shit! Really? Would rather go with Pack than with you, stuck up bitch.\"\n\n\"You, Tuff! Are, you're not gay, are you?\" Britney asked, genuinely curious.\n\n\"Gets you off my ass? Then yeah, I'm a fag, okay?\" Tuff yelled, then stomped away.\n\n\"Dude, you're not, huh?\" Pack asked as Tuff sat down in their homeroom.\n\n\"No, I'm not,\" Tuff sighed.\n\nThen he smiled at Pack.\n\n\"But you do have the dreamiest eyes,\" he said.\n\n\"Aw, shut up, homo,\" Pack laughed.\n\nTuff should have known Britney would not let it go, would not simply accept that he wouldn't be taking her to the Valentine's Day dance. She cornered him as he tried to enter the cafeteria at lunch time.\n\n\"Why don't you want to go to the dance with me?\" she demanded.\n\n\"Believe it or not, Britney? There are some things your Daddy can't buy you, all right?\" Tuff said.\n\n\"Plus that?\" he asked as he opened the door. \"I just don't like you.\"\n\nBritney's entourage all told her that Tuff was a jerk, an ass hole, lower than whale shit. She would be much better going to the dance with Pack, or Brent, or Tony.\n\nThe Friday of the Valentine's Day dance, since he didn't have to work, Tuff climbed onto the roof of the trailer, lay back and watched the stars. He could locate and name nearly one hundred of the small twinkling lights. He studied them, imagining what the ancient astronomers must have felt as they gazed upon the distant, mysterious heavens.\n\nAs part of her graduation gift to him, Mrs. Bergeron, Melissa's mother did not charge Tuff for altering the dress slacks that he wore underneath the white graduation gown. She had him try on the slacks with the dress shoes.\n\nBecause the shoes were a size eleven, Tuff stood on the backs of the shoes, flattening them down. His heels stuck out over the sole. But Principal Savoie had announced that tennis shoes would not be allowed on the small stage.\n\nSuddenly, Mrs. Bergeron understood why Ezekiel never wore a coat, no matter how cold it was outside. The boy didn't own a coat. She now understood why the young man wore tee shirts that looked ready to fall apart. . Tee shirts cost money. And she understood that the young man didn't have money for dress shoes, shoes that he'd probably wear once, maybe twice.\n\n\"And I been charging him three dollars each pair of pants,\" she thought.\n\nMarie scrounged together some money and bought herself a sensible skirt and blouse and some sensible shoes. Feeling quite attractive in her new clothing, she proudly attended the graduation ceremony, sat with other parents, bored siblings, family members in the crowded gymnasium.\n\n\"And now, some words from our valedictorian,\" Principal Savoie intoned. \n\nBehind him, the twenty nine students looked bored, some fidgeted, some whispered with their neighbors. All wished he would just hand them their diplomas and let them leave the cramped, hot gymnasium.",
        "Deborah Nicole Bertrand may have had a 5.0 GPA, but public speaking was not her forte. Finally, she mercifully concluded her mumbled monotone delivery and bolted from the podium.\n\n\"And our Salutorian, Ezekiel, Aaron Richards, or as most of you know him, Tuff,\" Principal Savoie announced.\n\n\"Deborah, thank you for those uplifting words; I am sure we will all remember and treasure your encouraging message,\" Tuff said. \"Principal Savoie, teachers of Baylor Lake High School, thank you for giving us the tools that we will need as we go forward into our lives. Parents, families, friends, thank you for encouraging us, for inspiring us, for challenging us, and some of you? For threatening us with grievous bodily harm to do better.\"\n\nHe let the laughter die down.\n\n\"It worked, didn't it?\" a man yelled out and there was more laughter.\n\n\"Yes sir, it worked,\" Tuff agreed. \"You know? Some of us already know what we want to be, some of us already have aspirations, and know what it will take to achieve our goals. Some of us have hopes and dreams, and some of us have no earthly idea what we're going to do, where we'll wind up when we walk out of those doors, those large, open doors right there. But we do know, we've been given the tools. We've been given the tools, but it is up to us, each one of us whether or not we'll use those tools. Class of Two thousand twelve? I implore you, I beseech you, I challenge you. Pick up your tools, use your tools. Thank you.\"\n\n\"Great speech, but you're still a big giant homo,\" Brent Roberts whispered to Tuff when Tuff sat back down.\n\n\"Takes one to know one, bitch,\" Tuff whispered back.\n\nThe two young men laughed quietly and nudged each other with their broad shoulders.\n\nFinally, Principal Savoie seemed to realize that people were not there to listen to him drone on and on. The diplomas were handed out, special awards were presented, then the students and families were allowed to file out.\n\n\"Mr. Richards, Mr. Richards? Over here,\" an older man in a dark charcoal pinstripe suit called out as Tuff tried to hustle his mother toward her 1984 Delta 88.\n\n\"Yes sir?\" Tuff said politely.\n\n\"Harry Kendricks,\" the man introduced himself, hand outstretched.\n\n\"Oh, yeah, the shit for brains keeps calling my boss and making me lose hours,\" Tuff said. \"Stick that hand back in your pocket unless you want me to break it off.\"\n\nHarry Kendricks stared, open-mouthed at the young man that dared to speak to him in such a manner. He dealt with captains of industry. He dealt with heads of states, business men, military leaders, despots, dictators. No one dared speak to him in such a rude, condescending manner.\n\n\"Ezekiel Aaron Richards!\" Marie hissed, outraged.\n\n\"Well, its true, Mom,\" Tuff said. \"Remember? February? Had to cut the cable? This is the ass hole called Ricky and had me lose twelve hours then.\"\n\n\"I uh, well, I'm sorry, I uh, I didn't realize,\" Harry stammered.\n\n\"Of course you didn't realize,\" Tuff snapped. \"Stuck up pieces of shit like you? Y'all never realize that your selfish, self-centered actions have consequences. Oh, not for you. You just keep on doing whatever the fuck you want. But it's people like us that pay the price for your actions.\"\n\n\"I did not raise him to talk like this,\" Marie apologized to the now quite upset man.\n\n\"Go ahead, Mr. Kendricks. Stick that hand out again,\" Tuff said. \"I dare you.\"\n\n\"Best of luck in your future endeavors, Mr. Richards,\" Harry said, turned and walked back to where his daughter and wife stood.\n\n\"Is he coming to the party?\" Britney asked hopefully.\n\n\"Not a snowball's chance in hell is that young man coming anywhere near your party, Honey,\" Mr. Kendricks admitted.\n\n\"Tuff! Hey Tuff,\" Deborah Bertrand squeaked.\n\nThe pudgy girl's face beamed, even through the layers of acne. Tuff smiled warmly at the girl and she blushed hotly.\n\n\"Thank you so much for what you said about my speech,\" Deborah gushed.\n\n\"Welcome. It was a beautiful speech,\" Tuff said and hugged the girl.\n\n\"So, who wrote it for you?\" Tuff teased and she squealed.\n\n\"Listen, we uh, I, I mean, we, Britney invited us all to her house; you going?\" Deborah asked hopefully.\n\n\"No, but y'all have fun,\" Tuff said.\n\nA few other students shook Tuff's hand. A few even wanted pictures with him. Many asked if he was going to Britney's party.\n\n\"Dude!\" Pack said. \"She's got a pool!\"\n\n\"Pack, you won't even get in a bathtub and you're telling me you'll get in a pool?\" Tuff teased.\n\n\"Aw, your ass, homo!\" Pack laughed.\n\nThen he surprised Tuff by hugging him tightly.\n\n\"Man, love you, hear?\" Pack said.\n\n\"Love you too,\" Tuff said, suddenly feeling a great sense of loss.\n\nHome again, he removed the gown. He carefully folded the polyester material and mortarboard and put both into their plastic bags. The tassel, he hung on the mirror over his dresser.\n\nHe removed his slacks and hung them. The dress shirt, he had sweated in, so it went on top of the washing machine. Then, dressed in ragged tee shirt and his Baylor Lake High School gym shorts and battered flip flops, Tuff doused himself in mosquito spray and climbed on top of the trailer.\n\nStaring at the constellations, Tuff felt that overwhelming sense of loss again. Then he remembered Melissa Bergeron's words on that cold winter night.\n\n\"It's going get better yeah,\" Melissa said.\n\nCoach Cole Harrison of the University of Louisiana at DeGarde Storm was a vastly different coach than Coach Brighton had been. Cole did not scream, threaten, belittle his players. He spoke to them. He pointed out errors and made suggestions on how they could improve.\n\nHis freshman year, Tuff rode the bench. His sophomore year, Tuff saw some playing time. His junior and senior year, Tuff was the first-string quarterback. But because their best record for the four years that Tuff played for the Storm was in his freshman year, when they were seven and four, no professional teams came looking for Tuff Richards.\n\nA few engineering companies did recruit Ezekiel Richards, though. In his senior year, Tuff was part of an engineering team that competed on the world stage. They came in fourth, behind the teams from Japan, South Korea and Norway.\n\nTuff had thoroughly enjoyed his college experience. Even though he lived in Baylor Lake, he opted to live on campus, in Schaeffer Athletic Dormitory. Even as a lowly freshman, Tuff often had junior and senior cheerleaders willing to warm his bed.\n\nHe also enjoyed tormenting his mother with wildly exaggerated accounts of the debaucheries that took place in his dormitory. Marie Richards switched from praying for her own soul to pleading with Jesus to please forgive her son his many transgressions.\n\nBest of all, for Tuff Richards, though, was that there was no sign of Britney Theresa Kendricks. She had gone to Vassar. Their paths did cross, whenever Britney was home for a long weekend, or a break in between semesters.\n\nOnce, at a party at Pack's house, Britney showed up with a sneering, posturing young man. Tuff surprised everyone by greeting Britney, and introducing himself to Robert Brown, Britney's date.\n\n\"So,\" sneered Robert. \"What are you majoring in? Oh! I'm sorry; that was rather presumptive of me, wasn't it? You are in college?\"\n\n\"Aw yeah I am me,\" Tuff smiled, actually amused by the young man's arrogance. \"I was majoring in that there alligator fucking, but I switched over to crawfishing; that a lot easier yeah.\"\n\n\"Tuff!\" Britney giggled, slapping Tuff's arm playfully. \"Robert? Tuff's an engineering major.\"\n\n\"Oh,\" Robert said, then smirked. \"Well, I'm in financing myself. Carrying a three point nine.\"\n\n\"Oh, that mean you smart, right?\" Tuff said and walked away.\n\nBritney cornered Tuff in the kitchen, after Robert Brown had consumed one too many St. Elizabeth Lagers.\n\n\"You still owe me a dance,\" Britney slurred, also more than a little drunk.\n\n\"Don't owe you shit, Britney,\" Tuff sighed.\n\n\"Yeah you do; I was the queen and you was the king, you supposed dance with me,\" Britney whined.\n\nPack laughed out loud. Tuff gave the grinning boy the finger. A moment later, the booming, pulsing music ceased.\n\nSuddenly, 'Nights In White Satin' by The Moody Blues began playing.\n\n\"Pack, you ass hole!\" Tuff yelled.\n\n\"Come on,\" Britney demanded, molding her lithe body against him.\n\nShe had been attractive, beautiful in high school. In the three years since graduation, she had become even more beautiful. Her body was still as perfect as always.\n\nTuff gave in and swayed along with the music. If her breasts were man-made, they were of an excellent quality. They pressed firmly and molded against him.\n\nHer moist lips traced along his jaw. Her breath was hot in his ear.\n\nTuff could feel his cock stiffen as she rubbed against him. The song played on and on and Tuff ground his teeth, wishing it would just end.\n\nThen, as the narrator recited the words to some nonsensical poem, Britney kissed Tuff full on his lips. Her tongue wormed into his mouth.\n\n\"There,\" she breathed. \"That wasn't so bad, was it?\"\n\n\"Uh huh, got your dance, stuck up little bitch, happy now?\" Tuff asked and left the party.\n\n\"Dude!\" Pack said a few days later. \"Man! What'd you do? You left out of there and Britney just starts crying and carrying on, I mean, shit!\"\n\n\"Dude, didn't do shit, just danced that one crappy dance with her,\" Tuff denied. \"And, shit, man, just how long is that fucking song, huh?\"\n\nAfter his graduation with a BS in mechanical engineering, Tuff debated with himself; go into Corporate America, or go for a Master's. Chris Dumas of Pilot Petroleum did encourage him to pursue his Masters, as did St. Elizabeth's Distilleries. A few other oil companies wanted him yesterday and even offered Tuff a signing bonus.\n\nThen Kendricks Engineering demanded an interview with him. Tuff was very tempted to tell the sneering voice on the other end to kiss his ass. But, he knew the oil field is a very tightly meshed business. If a worker gets run off of one rig, before that worker's feet touch on dry ground, every company in the industry knows about that worker's transgressions.\n\nHe had bought a suit for his graduation so got out that suit, knotted his tie, and drove his 2001 F150 pickup truck to Kendricks Engineering in Baylor Lake.\n\n\"Yes?\" a stunning red head with pneumatic breasts demanded when Tuff walked into the reception area.\n\n\"Ezekiel Richards, here to see, uh, Mrs. Hebert,\" Tuff said.\n\n\"Mm, mmm, no, no Ezekiel Richards,\" the woman sneered as she checked her monitor.\n\n\"Tuff Richards?\" Tuff guessed.\n\n\"Oh! Yes sir, right here,\" the girl brightened. \"Please have a seat; I'll let her know you're here.\"\n\nTuff met with Chloe Hebert, an attractive woman in her mid to late forties. He was polite, answered her questions, and did admit he was torn between accepting a job, and pursuing his Master's degree.\n\nThen Harry Kendricks walked into the conference room. Tuff kept his face passive as Harry murmured to Chloe. Chloe then wished Tuff well and left the room.\n\n\"Mr. Kendricks,\" Tuff said politely.\n\n\"Naw, naw, my friends call me Harry,\" Harry said jovially.\n\n\"Yes sir?\" Tuff said, face and voice neutral.\n\n\"Ah, uh well now, uh, Ms. Hebert says you might be pursuing your Master's?\" Harry asked.\n\n\"Possibility,\" Tuff said.\n\n\"Well, son, what would it take for you to sign on with Kendricks Engineering?\" Harry asked, trying to sound upbeat.\n\n\"An act of God,\" Tuff said. \"Mr. Kendricks...\"\n\n\"Harry,\" Harry interrupted.\n\n\"Mr. Kendricks, let's not waste each other's time here. I have absolutely no desire to ever work for you. I would rather go back to making nine bucks an hour at the Pak-N-Sak than work for you. I would rather live on welfare than ever take a job here,\" Tuff said, getting to his feet.\n\nTuff heard Harry Kendricks yelling something as he left the conference room. He ignored the man as he strolled down the maze of corridors, making his way to the reception area.\n\n\"Mr. Richards, please, Mr. Kendricks wants...\" the red headed receptionist said, standing as Tuff entered her area.\n\n\"Mr. Kendricks doesn't always get what he wants,\" Tuff said.\n\nULD was happy to accept Tuff into their Master's program. He began his studies in earnest.\n\nA few days after the interview with Harry Kendricks, Deborah Bertrand called Tuff. Tuff chatted pleasantly with the girl, even as he wondered how she had obtained his cell number.\n\n\"Anyway, I uh, listen, a couple of us are getting together tomorrow night, no big whoop, just you know, hanging out and stuff,\" Deborah suddenly said.\n\n\"Know what? I'm about go blind here, yeah, I'll be there,\" Tuff agreed and got her apartment's address.\n\nArrow Court Apartments were fairly new, having sprung up along with the St. Elizabeth Parish Trauma Center. Tuff parked in the Visitors space and tried to guess where Apartment 4E would be.\n\n\"Hey! You made it!\" Deborah screamed, obviously already into whatever alcohol was on hand.\n\nShe was still a pudgy girl, but her horrible acne had receded somewhat. Her large brown eyes seemed larger through her thick glasses. She was still dressed in the baggy, shapeless clothing she'd worn in high school.\n\n\"Tuff Richards,\" an obviously drunk Britney Kendricks announced.\n\n\"Great,\" Tuff muttered.\n\n\"Hi Britney; where's Robert?\" Tuff asked politely.\n\n\"Around here somewhere,\" Britney said, waving an arm to indicate the apartment.\n\nRobert was in the kitchen, trying to impress Deborah's roommate. The young man actually seemed surprised when Tuff greeted him. Tuff had only come into the kitchen to fix himself a drink.\n\n\"I was telling, uh, telling...\" Robert slurred.\n\n\"Sandra,\" Deborah's roommate supplied.\n\n\"Sandra! I was just telling Sandra that the real estate bubble was doomed from the start,\" Robert said smugly.\n\n\"Yeah; George W. Bush tried three times to get Congress to do something about the adjustable rates mortgages and they refused,\" Tuff agreed. \"That balloon, pun intended, was doomed to burst sooner or later.\"\n\nRobert scowled; Tuff obviously was not as ignorant as he had believed. Sandra took that opportunity to beat a retreat. Robert downed his drink and fixed himself another one.\n\n\"Hey!\" Britney said, a little too loudly. \"Uh, thought you was fixing me one?\"\n\n\"Did; right here,\" Robert said, handing Britney a glass.\n\n\"Heard you really pissed Daddy off,\" Britney said, leaning heavily against Tuff. \"Bad Tuff! Bad, bad boy!\"\n\n\"Uh huh,\" Tuff said.\n\n\"But, Tuff, oil field, think it's headed up or down?\" Robert asked, gulping his drink.\n\n\"Should have heard him, he was so mad!\" Britney giggled.\n\nShe gulped her drink, looking up into Tuff's handsome face.\n\n\"All of y'all, out, huh? I got the bean dip on the table out here,\" Sandra ordered.\n\nRobert left the kitchen. Britney held onto Tuff for a moment.\n\n\"Daddy really wants you work for him,\" Britney declared.\n\n\"Uh huh,\" Tuff said.\n\n\"Oh! Oh! Can I, I want talk to you,\" Britney said.\n\n\"What are we doing now?\" Tuff asked.\n\n\"In private,\" Britney whispered loudly.\n\nBritney pulled Tuff into a bedroom, closed and locked the door. Then she sat on the bed.\n\nHer short skirt rode up, revealing her neatly trimmed bush of pink blonde pubic hair. Her pale pink lips peeked out, slick with her moisture.\n\n\"So, uh what'd you want to talk about?\" Tuff asked, looking at her pussy.\n\n\"Bad Tuff!\" Britney said, giggling. \"Bad, bad Tuff.\"\n\nThen she pulled the short dress up and off.\n\nHer breasts were large orbs on her slender chest. Each globe was capped with a large light pink areole and a hard nipple. Her belly was slightly concave, with a cute little tunnel of a belly button.\n\n\"Want make love?\" Britney asked. \"Or you wanna fuck?\"\n\nTuff smiled and made her squeal when he grabbed her by her ankles, pulling her buttocks to the edge of the bed. He knelt between her splayed thighs and kissed her mouth hotly.\n\n\"Oh!\" she moaned into his mouth.\n\nHis arms went around her, pulling her tightly to him. Then he released her mouth and trailed his mouth down her throat.\n\n\"Oh, Tuff!\" Britney moaned.\n\nHer breasts were not store bought; they were natural. Tuff gently cupped and massaged each in his large hands. Then he bent and traced his tongue from the outer rim of her left areole, circling the crinkled flesh until he reached her hard nipple.\n\n\"Yes,\" Britney sighed, arms around Tuff's neck.\n\nHe repeated the same with her right breast, then made her squirm as his teeth nipped at her heavy breasts.\n\n\"Oh God yes,\" Britney moaned when Tuff suddenly looped her thighs over his broad shoulders.\n\nShe squealed and squirmed when he blew his hot breath across her puffy lips. Then she stiffened and groaned as he lapped up and down her lips, tasting her essences.\n\n\"God damn yes, oh fuck!\" Britney screamed in orgasm when Tuff bit down on her clitoris.\n\nThen he stood, unhooked his jeans and dropped them to the floor. Her legs were still on his shoulders as he positioned the head of his cock to her slick pussy.\n\n\"Ugh!\" she screamed as his fat cock gained entry.\n\nHer eyes opened wide and her mouth hung open in a silent scream as Tuff jammed all eight inches into her snug pussy.\n\n\"Oh my fucking God,\" Britney squealed as Tuff began to pull out.\n\nSoon he had a rhythm going and Britney just lay, head and shoulders on the mattress, back and ass suspended as he hammered in and out of her. She whimpered, whined and moaned. Then she screamed again and her already quite snug pussy clamped down on his thrusting cock.\n\n\"Ugh! Aw shit,\" Tuff grunted and pumped his seed into her.\n\n\"God damn, that was unbelievable!\" Britney enthused as Tuff's semi-flaccid cock slid out of her stretched, raw pussy.\n\nTuff gave her a soft kiss to her smiling lips. Then he pulled his pants up, cinched his belt and left the bedroom.\n\nDeborah smiled a drunken smile when Tuff thanked her for inviting him. Robert was too busy trying to impress a bored looking Sandra to really notice him. The three or four other people just nodded when Tuff told them good-bye.\n\nSeven weeks later, Tuff's cell phone rang. The area code was one he did not recognize, but he had been waiting on some source references for his thesis.\n\n\"Hello?\" he asked.\n\n\"I'm pregnant, you mother fucker,\" Britney Kendricks sobbed into the phone.\n\n\"Well, congratulations; how's good old Robert feel about that?\" Tuff asked.\n\n\"Dumped me soon as we knew for sure,\" Britney sniffled.\n\n\"Oh,\" Tuff said, waiting.\n\n\"\"That's all you got to say? 'Oh'?\" Britney sobbed.\n\n\"Well, what am I supposed to say?\" Tuff asked.\n\n\"How about 'I'll marry you,' or 'I'll do the right thing?' How about 'I'll support the baby?' How about any of that?\" Britney screamed.\n\n\"What? Why in the fuck would I marry you? And why would I support Robert's baby?\" Tuff asked. \"And uh, hey, quit screaming in my ear, huh bitch?\"\n\nThat afternoon, Tuff walked toward his pickup truck. A Mercedes-Benz sat next to the truck. When he unlocked the door of his truck, a muscular man opened the passenger door of the Mercedes-Benz.\n\n\"Mr. Kendricks wants to see you,\" the man growled.\n\n\"Good to know,\" Tuff said easily.\n\n\"Get in,\" the man ordered.\n\n\"No. I'll follow you,\" Tuff said, almost amused.\n\nSomeone inside of the car said something. The man nodded to Tuff, got back into the car and closed the door.\n\nTuff followed the Mercedes-Benz to Kendricks Engineering. They circled around the building and parked in the rear of the building. Two men got out of the Mercedes-Benz, both quite muscled, both wearing dark suits and dark glasses. One proceeded them, the other stepped behind Tuff and walked behind toward a steel door. The first man punched a number into the keypad and the door clicked.\n\nEntering the building, the trio walked down a corridor, footsteps ringing on the concrete floor. Another door, another keypad, another click. Then they were in a large office.",
        "\"Ah, Tuff, good to see you again,\" Harry Kendricks said, no smile on his face.\n\n\"Mr. Kendricks,\" Tuff said, nodding.\n\n\"Told you, my friends call me Harry,\" Harry Kendricks said and sat behind the ornate mahogany desk.\n\n\"Yes sir,\" Tuff said.\n\n\"Sit, sit, get you anything? Coffee? Water?\" Harry said.\n\n\"No thank you,\" Tuff said, but did sit in a low slung chair.\n\nFor several moments, the four men were silent. Finally Harry did smile slightly.\n\n\"In negotiations, it's often said, the first one that speaks loses,\" he said.\n\nTuff said nothing.\n\n\"Well, then I guess I'll start. My Britney says she's pregnant and you're the only one had unprotected sex with her,\" Harry said.\n\n\"Find that very hard to believe,\" Tuff said.\n\n\"And Mr. Richards? I do not want my daughter to be an unwed mother,\" Harry continued.\n\n\"Then might I suggest you get the father to marry her,\" Tuff said.\n\n\"Ah! A most excellent idea, Mr. Richards!\" Harry said, as if delighted. \"Shall we say, first Saturday in August?\"\n\n\"Need talk to the father about that,\" Tuff said.\n\n\"I am talking to the father, Mr. Richards,\" Harry snarled.\n\n\"I'm convinced you are not talking to the father,\" Tuff snarled.\n\n\"Listen, Tuff, may I call you Tuff? Listen Tuff, I don't want my grandchild to be born out of wedlock,\" Harry said. \"What if you say, marry Britney, live with her, man and wife, and when the baby's born, do a DNA test. Baby's not yours? Walk away, leave Britney to raise the baby on her own.\"\n\n\"Can do DNA tests in utero nowadays,\" Tuff said.\n\n\"But if it turns out you are the father? You and Britney stay married until the baby's first birthday,\" Harry continued.\n\n\"And what do I get out of this?\" Tuff asked.\n\n\"DNA says you're not the father? One hundred thousand,\" Harry offered.\n\n\"And if I am the father?\" Tuff asked.\n\n\"You are the father? And you stick around until my grandchild's a year old? A million. And another million for every year after that,\" Harry offered.\n\n\"And if I refuse marry Britney?\" Tuff asked. \"Father or the baby or not.\"\n\n\"You love your mother?\" Harry asked, voice hard. \"Be a shame anything happened to her, huh?\"\n\n\"Let me show you something,\" Tuff smiled and hoisted himself out of the low chair.\n\nHe pulled his snug pull over shirt off. The two bodyguards looked at Tuff's back, then at each other. Then they turned their attention back to Harry and Tuff.\n\nTuff turned and Harry's face blanched at the sight of Tuff's back. The flesh was mottled, crisscrossed with scars of old welts. Tuff pulled his shirt back on.\n\n\"Amazing what an electric cord can do, huh?\" Tuff asked. \"So, Mr. Kendricks, threatening my mother? Not a problem. Do whatever you want.\"\n\nHe started walking toward the door of the office. The muscle bound man on Tuff's left reached out a hand to stop Tuff.\n\n\"Mr. Kendricks isn't finished with you,\" the man growled.\n\nTuff's elbow flashed out, striking the man in the ribs. Everyone heard the crack of the man's rib. Tuff jerked his knee up, driving into the man's crotch. When the man bent forward, Tuff's elbow struck the man in the back of the head and the guard crumpled to the floor.\n\nTuff swept the second body guard's legs out from under him, then stepped onto the man's right arm. His left foot rested lightly on the guard's throat.\n\n\"Move one muscle and I'll stomp your windpipe, cock sucker,\" Tuff said. \"Say yes if you understand.\"\n\n\"Yes,\" the man whispered.\n\nTuff then looked at Harry Kendricks. The man sat, mouth open in shock.\n\n\"See, Mr. Kendricks, I'm the most dangerous man you'll ever meet,\" Tuff said flatly. \"I have absolutely nothing worth living for.\"\n\n\"My grand... Britney's baby?\" Harry weakly offered.\n\n\"See? Even you, Mr. Kendricks,\" Tuff smiled. \"It's your grandchild, its Britney's baby. Not once did you say anything about it being my baby.\"\n\n\"A million dollars, Tuff. Mr. Richards,\" Harry bargained.\n\n\"Really? You want to confine your daughter to that? TO a loveless marriage?\" Tuff asked.\n\n\"It wouldn't have to be, I mean, you made love to her,\" Harry said.\n\n\"I fucked her,\" Tuff corrected. \"Used her like the cheap whore she is.\"\n\nHarry's face flushed red with anger. Tuff stepped off of the body guard and swung the door of the office open. He walked down the concrete walkway to the first steel door. The door to the outside would not open. Tuff had watched the guard punch in the key and now punched in the same code. With a click, he was able to push the door open and step outside.\n\nThe next day, two men were standing, waiting next to Tuff's truck. Tuff smiled and his smile grew wider as one of the guards also smiled.\n\n\"Mr. Kendricks would like to see you, Mr. Richards,\" the man said politely.\n\n\"It okay if I follow y'all?\" Tuff asked.\n\n\"But of course, Mr. Richards,\" the man said and both men got into the Mercedes-Benz.\n\nAgain, one walked in front, the other walked behind as they approached the steel door.\n\n\"Took me forever remember that nine digit code,\" the man behind Tuff said. \"Because you were able figure it out? Had to change it this morning.\"\n\n\"Sorry,\" Tuff said.\n\nAgain, Tuff stood in Harry Kendricks' office. Harry waved Tuff to a chair.\n\n\"Britney is my only child,\" Harry Kendricks started once Tuff was seated. \"Cheryl? My wife? Had two miscarriages, then Britney. You know she was premature? Cheryl had her when she was only six and a half months along. God, we were so scared we were going lose her...\"\n\n\"Give me a few minutes, I'll see if I can find someone gives a shit about your pathetic little life, Mr. Kendricks,\" Tuff said\n\nOne of the body guards stepped forward. The other guard held out his hand and stopped the first man's progress. Silently, he shook his head.\n\n\"Anyway, Mr. Richards,\" Harry said, fighting hard to control his rage. \"I would really like for us to reach a compromise here.\"\n\nTuff said nothing.\n\n\"Mr. Richards?\" Harry asked after a long moment of silence.\n\n\"Remember what you said yesterday?\" Tuff smiled. \"First one speaks loses?\"\n\nHarry sat for a long moment. Then he actually smiled. He waggled a finger at Tuff.\n\n\"And, that, Mr. Richards, is why I want you working here, at Kendricks Engineering,\" Harry laughed. \"So. What will it take?\"\n\n\"To work here? Or marry your daughter?\" Tuff asked.\n\n\"Both, Mr. Richards. Both,\" Harry said.\n\n\"How much you got?\" Tuff asked.\n\n\"Me? Close to three billion, give or take,\" Harry said.\n\n\"Sorry, not enough,\" Tuff said. \"We done here?\"\n\n\"One million when you start working here, one million when you and Britney wed, and one million when the, when your child is born,\" Harry said. \"And a million every year after that.\"\n\n\"Mr. Kendricks,\" Tuff said.\n\n\"Harry, damn it, boy, keep telling you, call me Harry,\" Harry said.\n\n\"Mr. Kendricks,\" Tuff said. \"Why not offer that deal to Robert Brown? Surely that little weasel would jump at that kind of money.\"\n\n\"Britney wants you,\" Harry said. \"And, I want you. I saw that project your team submitted. And everyone on that team, even your instructor says it was all you.\"\n\nTuff sat for several long moments. Harry sat and watched the young man. Finally Tuff shrugged.\n\nYour daughter's unhappiness means that much to you,\" Tuff said.\n\n\"Huh? No, no, my daughter's happiness...\" Harry said.\n\n\"Uh huh,\" Tuff smiled tightly. \"So, where do I sign?\"\n\n\"Oh, a handshake will do, boy,\" Harry said jovially.\n\n\"Stick that hand back in your pocket, you sleazy sack of shit,\" Tuff said. \n\n\"You watch how you talk...\" one of the guards snarled.\n\nAgain, it was the other guard that held the first one back. Harry took several deep breaths to calm himself down.\n\n\"You still bank at First DeGarde?\" Harry asked, typing on his computer's keyboard.\n\n\"Yes sir,\" Tuff said.\n\n\"Ezekiel Aaron Richards,\" Harry mused aloud. \"And... Done. You'll start here on Monday.\"\n\n\"Can't wait,\" Tuff said drily, getting to his feet.\n\n\"Well, welcome aboard,\" harry smiled and stood.\n\nHarry extended his hand. Tuff looked at the hand, then looked at Harry's face. He then turned and walked to the door of Harry's office.\n\nThe two guards stepped aside. One actually opened the door for Tuff.\n\n\"And, Mr. Richards, I'll get the door for you,\" that guards said.\n\n\"Don't bother; I know the code,\" Tuff smiled.\n\n\"Impossible; I had my other hand over my hand,\" the man said.\n\nTuff punched in the code and smiled when the door clicked.\n\n\"Well, kiss my ass,\" the man said.\n\nTuff wasn't even out of the parking lot and his cell phone rang. Again, it was the area code for Poughkeepsie, New York in the display.\n\n\"Daddy told me,\" Britney shrilled happily when Tuff answered the phone.\n\n\"Uh huh,\" Tuff said heavily.\n\n\"Oh Sweetheart, just wait and see; I'm going make you the happiest man in the world,\" Britney enthused.\n\n\"Oh? Going commit suicide?\" Tuff asked.\n\nAfter a long silence, Tuff disconnected the call.\n\nDr. Mouton, the Dean of the Engineering Department of ULD was not happy to be losing Ezekiel Richards, but understood that money often won out over integrity. He shook the young man's hand and wished him well.\n\nMarie was suspicious; she'd never heard her son say anything nice about Britney Kendricks. She was livid when she found out that the wedding would be taking place at St. Elizabeth By The Lake Catholic Church.\n\n\"Catholic? CATHOLIC?\" she shrilled. \"Worshipping statues?\"\n\n\"Oh no, you're thinking old school Catholic. No, new Catholics practice matricide in the name of Satan, Lord of the underworld,\" Tuff said.\n\nHe checked his account and nodded when he saw that his current balance was $1,000,349.18. He cut off his mother's complaints by telling her they needed to go to Abdul's Department store; she needed a dress for the wedding.\n\nThe obviously gay man in the Men's Department helped Tuff select four suits. The man fairly swooned when he measured Tuff for the alterations.\n\n\"The navy suit? Hundred dollars you can have it ready for pick up on Saturday; I start my job on Monday,\" Tuff said.\n\n\"Yes sir,\" the man simpered.\n\nStolzle's Shoes sold him a pair of penny loafers and a pair of black wingtip oxfords. Marie also found a pair of sensible pumps.\n\n\"What you think? Black? Or, maybe this gray?\" Marie asked.\n\n\"Mother of the groom's dress is gray,\" Tuff said. \"But, let's face it, black goes with just about everything.\"\n\nMarie offered to help him find a house. Then she offered to move into the house since Tuff would be needing her help.\n\n\"Mother, I will buy you your own house if you promise to never ever visit me in my new house,\" Tuff said.\n\nMonday was spent filling out paperwork, then watching webinars on sexual harassment, diversity in the workplace, and safety rules and regulations. At lunch time, Tuff prepared to open his brown bag lunch when Harry's personal assistant, Helen Theriot paged him to Harry's office.\n\n\"Yes sir?\" Tuff said when he entered the man's office.\n\n\"We're going to La Scalia's for lunch; Cheryl and Britney are meeting us there,\" Harry said genially.\n\n\"Fine,\" Tuff said.\n\nHarry insisted that Tuff ride with him in his limousine. Again Tuff decided not to fight.\n\n\"So, Tuff, how do you like...\" Harry started.\n\n\"Sir? I'm perfectly okay with awkward, uncomfortable silence,\" Tuff interrupted. \"In fact, I would prefer it over having conversations with you.\"\n\n\"Now, you listen here, you little...\" Harry snarled, getting in Tuff's face.\n\nTuff reached a beefy paw out, grabbed Harry's face and shoved the man, hard. Harry bounced against the door of the limousine and sat, dazed.\n\n\"No, you listen here, cock sucker,\" Tuff said, voice low. \"I have jumped through all of your fucking hoops so far. But I will be damned if I will ever be friends with you.\"\n\n\"Everything all right, sir?\" the driver's voice crackled over the intercom.\n\n\"Uh yeah, yes Johnson, thank you,\" Harry mumbled.\n\nThey pulled up to the restaurant. The driver opened the door and a still shaken Harry got out.\n\n\"Thank you, Mr. Johnson,\" Tuff said when the driver held the door open for him.\n\n\"You are welcome sir, and may I say, welcome to the family, sir,\" the driver said.\n\n\"Thank you,\" Tuff said again and gave the driver a fist bump.\n\n\"Very good, sir,\" the man smiled.\n\n\"Ezekiel,\" Cheryl Kendricks said when Tuff stepped into the foyer of the restaurant.\n\nShe was a beautiful woman in her early fifties. Tuff could see what Britney would look like in another twenty five years. She would have a few more well placed pounds, a few wrinkles, a few strands of gray. And would be a mature beauty.\n\n\"Mrs. Kendricks,\" Tuff said.\n\n\"Oh, no, no darling! Call me Cheryl,\" she insisted.\n\n\"He won't...\" Harry said.\n\n\"Fine, Cheryl, it's wonderful to meet you,\" Tuff said, enjoying the look of bitterness on Harry's face.\n\n\"You!\" Britney said and playfully slapped his arm. How come you haven't called me? I waited the whole weekend...\"\n\n\"Sorry, was swamped, running around, trying get everything ready for the wedding,\" Tuff said.\n\n\"No, no, Ezekiel, you just have to show up,\" Cheryl said and latched onto Tuff's muscular arm as the hostess guided them to their table.\n\nHer fingers toyed with Tuff's massive bicep and she smiled up at Tuff.\n\n\"No, no, dear, Britney and I are already planning the wedding; you just show up, did you play sports in school? Harry, have you seen this young man's arms?\" Cheryl prattled happily.\n\n\"Please call me, please,\" Britney whispered to Tuff, pressing her phone number into his hand.\n\n\"Fine, Britney, fine,\" Tuff sighed.\n\n\"And I'm serious, I will make you the happiest man in the world,\" Britney whispered.\n\nShe leaned against him.\n\n\"I love you,\" she whispered.\n\n\"Uh huh,\" Tuff said.\n\nThe ride back to Kendricks Engineering was spent in silence. Tuff completed his work day and drove to the trailer. He did call Britney on the new phone number she'd given him. They decided to meet at Sweet Pea's, for red beans and rice.\n\nThere, the two decided that they should pick out the house they'd share as husband and wife together. Carmen Davis of Davis Realty found a beautiful five bedroom, four bathroom home and Tuff wrote out a check for the down payment.\n\n\"No, Sweetheart, Daddy said he'll buy...\" Britney objected.\n\n\"Britney, your Daddy buys this house? I will never spend one night in it,\" Tuff said, face and voice tight.\n\n\"Oh. Okay,\" Britney relented.\n\nCheryl and Britney gleefully went to the task of furnishing and decorating the house. Any time Britney asked Tuff's opinion on anything, Tuff said whatever she wanted was fine with him.\n\n\"See, Harry? That's how a man should do it, not ask how much it's costing him,\" Cheryl laughed happily.\n\n\"Uh huh,\" both Harry and Tuff said.\n\nTuff excelled at his job. Dr. Claude Ivernek, the head of the Engineering Department stormed, unannounced into Harry's office.\n\n\"The boy is a genius,\" he enthused, heavy German accent even heavier in his excitement. \"You vill approve this, ja?\"\n\n\"What is it?\" Harry asked, looking at the schematics.\n\n\"Boy has designed smaller pump,\" Claude said.\n\n\"And? We don't need...\" Harry said.\n\n\"No, no, is smaller, but pump nearly three times,\" Claude shrilled.\n\n\"How much smaller?\" Harry asked.\n\n\"Eighty percent smaller, I am losing my mind!\" Claude enthused.\n\n\"Cost?\" Harry asked.\n\n\"Not even a tent of the K.E. Four,\" Claude said, pulling out a sheet of paper with the projections.\n\n\"A fifth the size, we'd reduce our footprint, the fucking environmentalists will love us,\" Harry mused aloud.\n\n\"And old pumps? Mr. Richards says we clean them up, sell them to India, to China,\" Claude went on.\n\n\"Well? What the fuck are you waiting on? Get busy, damn it, get busy,\" Harry ordered. \"We're starting on the, the, the K.E. TR One.\"\n\n\"The boy is genius, I tell you,\" Claude bubbled and hustled out of the office.\n\n\"Daddy is so happy with you,\" Britney bubbled into the phone. \"Oh! Oh! And I found the cutest crib for the nursery.\"\n\n\"Thought we already had a crib,\" Tuff asked.\n\n\"No, no, that's the changing table,\" Britney giggled.\n\n\"Well, does the new crib match the changing table? Or the dresser?\" Tuff asked.\n\n\"Oh! I better see!\" Britney gasped and hung up.\n\n\"God, if you truly are a loving and merciful God, please kill me,\" Tuff implored out loud. \"Please? Have some ass hole run the next red light, anything.\"\n\nGod did not respond. Tuff managed to make it home safe and sound. He greeted his future mother in law, looked at the picture on the box of the crib and agreed, it truly was the most perfect crib man had ever designed. With a perfunctory kiss to Britney's happy lips, Tuff got busy assembling the crib.\n\n\"Ezekiel, you didn't even look at the instructions,\" Cheryl pointed out.\n\nTuff looked at her for a long moment, then continued assembling the crib.\n\n\"Mother, really? He's an engineer? He puts this kind of stuff together in his sleep,\" Britney giggled. \"Sweetheart? I'm making that smothered steak for supper, okay?\"\n\n\"Be down to help you soon as I finish this,\" Tuff agreed.\n\n\"I love you so much,\" she enthused and bounded out of the room.\n\n\"She really does,\" Cheryl said as Tuff slid the last spring into place.\n\n\"Yes ma'am,\" Tuff agreed. \"You see a, never mind, there it is.\"\n\nThe day of the wedding was a sweltering hot August day in Southwestern Louisiana. An afternoon thundershower did bring some relief, albeit temporary. Tuff had spent the night in his mother's trailer and now, while Marie shrilled complaint after complaint, shrugged into his tuxedo.\n\nJohn Johnson pulled up to the trailer in the long limousine. As usual, Tuff greeted the family chauffeur with a fist bump. The man did ingratiate himself to Marie by complimenting her on her beautiful outfit.\n\n\"Bride's supposed be the main attraction, ma'am, but you'll come in a close second in that get up,\" the man said.\n\n\"Suck up,\" Tuff whispered and the man chuckled.\n\nJust as Tuff was about to get into the limousine, nineteen year old Melissa Bergeron opened the door of her trailer. In her arms, she had her baby boy. Tears streamed freely down her sad little face.\n\n\"Bye Tuff,\" she said, then slammed the door of her trailer shut.\n\nPack was Tuff's best man, a cousin of Britney's was her matron of honor. Four girls that had gone to high school with them also stood in as bridesmaids. Tuff had three high school chums and one college friend as his groomsmen.\n\nFinally, the music swelled to a nearly intolerable volume and a smiling Harry escorted a beaming, crying Britney up the aisle. Even Tuff had to admit, Britney Theresa Kendricks did make a beautiful bride.\n\nFather Goldbridthe performed the wedding in his usual, no-nonsense manner. With very little ceremony, he wed the couple and that was it.\n\nDuring the reception, Pack walked to the bandleader.\n\n\"Hey, everyone? Everyone, this is Tuff's and Britney's song,\" Pack announced loudly. It's the song they danced to when they fell in love.\"\n\n\"Aw, you ass hole,\" Tuff actually laughed when the band began to play 'Nights In White Satin.' \n\nHe did dance with his bride. And, just as she had done at Pack's house, Britney molded herself to him, breathed her hot breath in his ear, kissed along his jawline.\n\nJohn Johnson drove the couple from the reception hall to their hotel in Lafayette, Louisiana. Despite Tuff's silent prayers and entreaties to God, John was far too experienced a driver to allow them to be killed in a traffic accident.\n\nTheir suitcases were already in the hotel room. Tuff easily picked Britney up, stepped with her across the threshold and lay her on the bed.\n\n\"Sir? I will be here at ten tomorrow morning to take you and Mrs. Richards...\" John said.\n\nJohn smiled as Britney gave a happy squeal at hearing her name for the first time.\n\n\"...to the airport,\" John finished.\n\n\"I uh, do I tip you or what?\" Tuff asked.\n\n\"Your customary fist bump will be tip enough, sir,\" John smiled. \"And again, sir, welcome to the family.\"",
        "\"Thank you, Mr. Johnson,\" Tuff said and the two bumped fists.\n\nTuff kissed Britney's lips, then helped her out of her gown.\n\n\"And we'll put it in storage; this was my momma's, and one day? One day, our daughter will wear it,\" Britney gushed happily as Tuff eased the gown down.\n\nWhen he looked up from his kneeling position, Britney was wearing a white corset, white thigh high stockings, and white pumps. Her pink blonde pubic hair was glistening with her excitement. Her exposed nipples were tightly crinkled with her excitement.\n\n\"Now, Mr. Ezekiel Aaron Richards,\" Britney mock ordered. \"All this stuff about waiting until we're married? We're married now.\"\n\nTuff hung the gown on the wooden hanger and carefully zipped up the neoprene bag. Then he casually slipped out of his tight dress shoes, shrugged out of his tuxedo jacket, and casually unbuttoned his shirt.\n\nBritney's eyes went wide at the sight of Tuff's muscled chest and arms. Then her brow furrowed and her eyes squinted as she saw some lines on his flesh. When he turned to hang his shirt up, she screamed at the sight of his back.\n\n\"Oh my God, oh Sweetheart! Oh, what happened?\" Britney cried.\n\n\"The vengeance of the Angel of the Lord,\" Tuff said simply. \"I was sinful and the angels punished me for my sins.\"\n\nHe struggled out of his tight tuxedo trousers. Then he turned and frowned at the sight of his bride's tears.\n\n\"Oh Sweetheart, no angel did that to you,\" Britney sobbed.\n\nShe touched one scar on his bicep with a trembling finger. Then she bent and kissed the thin welt.\n\n\"Don't!\" Tuff growled and pushed her away.\n\n\"I'm going kiss every one of those horrible scars until they all disappear,\" Britney vowed.\n\n\"Don't! Don't even touch them,\" Tuff growled angrily. \"You hear? Don't even touch them, fucking cunt.\"\n\nBritney gasped at his hateful words.\n\n\"What, what'd you call me?\" she whispered.\n\n\"A cunt, Britney, a fucking cunt,\" Tuff snapped. \"What else am I supposed to call you? Fucking knew I didn't want marry you, had your God damned ass hole fucking dad hound me and hound me. Well, we're married now, so deal with it.\"\n\n\"But I love you,\" Britney said. \"And, and, I'm, we're having a baby.\"\n\n\"Well, whoop de fucking do,\" Tuff said bitterly. \"That just makes everything so much better, doesn't it?\"\n\nHe picked up the desk phone and punched '0' on the key pad.\n\n\"Uh yes, said there's a gym here? What floor? Sixth? Thank you,\" Tuff said and hung up.\n\n\"We're, we're, this is our wedding night,\" Britney asked, sitting on the lip of the bed. \"And you're going work out?\"\n\nTuff looked at her pained face and relented. He cupped her beautiful face in his hands, then softly kissed her lips. She moved to unhook the corset.\n\n\"No, leave it on; kind of sexy,\" Tuff ordered.\n\nHe made her squeal when he pulled her, by her ankles into the center of the bed. Then he flipped her onto her belly.\n\n\"Oh!\" she cried out was he slipped his erection into her pussy.\n\nHe slid in and out of her wetness, unconcerned with her pleasure. But the position had his cock rubbing along her G-spot and soon Britney was trying to hunch herself back to meet his forward thrusts.\n\nShe'd had sex before. She'd had sex often with Robert Brown. Robert had a slender cock, about four inches in length. He didn't like oral sex, well, he didn't like performing oral sex on her, said her pussy smelled like a dead fish.\n\nShe had none other lover in her life. A lover whose power and authority had driven her wild with lust, wild with pleasure. And even he couldn't pleasure her like Tuff was doing.\n\n\"Wait, what? What are you...?\" Britney groaned as Tuff wet a finger in her secretions, then tickled her light pink anus.\n\n\"Getting you ready,\" Tuff said and jammed the wet finger into her rectum.\n\n\"Oh! Oh God, Tuff, that's so nasty!\" Britney protested as he fucked her ass with his finger.\n\n\"She squealed in orgasm as he roughly jammed a second finger into her anus.\n\n\"Ugh, ugh, oh God, oh, quit Baby, please,\" Britney complained as another orgasm racked her body.\n\nTuff continued to stroke his cock into her pussy while fingering her ass. He could feel that familiar tingle begin in his balls so he held himself inside of her while his fingers continued to torment her anus.\n\n\"Aiee!\" Britney howled and shuddered in orgasm.\n\n\"Please Baby, please stop. I'll, I'll suck your dick, okay?\" Britney begged.\n\n\"Oh, I know you will,\" Tuff promised. \"And you'll take it up the ass too.\"\n\n\"Oh Tuff, that's disgusting,\" Britney protested.\n\n\"Uh huh,\" Tuff said and slowly pulled his cock out of her pussy.\n\nHe then knee walked around and pressed his slimy cock to her gasping mouth. Her beautiful green eyes looked up at his impassive face as she slowly swallowed his cock into her mouth. She nursed his cock and licked all around the fat head and glans.\n\n\"Ugh!\" she shuddered, eyes wide with wonder.\n\n\"I never, I just had one, just from sucking your...\" Britney gasped.\n\nTuff used a handful of her hair to pull her mouth back onto his cock. She closed her eyes in bliss as she swallowed him down her throat.\n\n\"Damn, aw shit, damn, I'm about to...\" Tuff announced.\n\nTritney's small hand stroked his cock. Her cheeks hollowed as she sucked at the head of his cock. Her soft tongue lapped feverishly, trying to coax his sperm, his delicious sperm from his cock\n\n\"Ugh!\" Tuff bellowed and began to pump a torrent into Britney's mouth.\n\nShe shuddered as she felt another orgasm well up in her guts. Spurt after spurt filled her mouth with his salty, bitter tasting semen.\n\nThe bedside clock blinked that it was five fifty. Tuff felt his bride sleeping next to him, snuggled up against his back. Some of the old welts itched, some of them burned as he came to consciousness. Britney was a heavy sleeper and did not rouse when he slid out of the bed.\n\n\"God, what have I done?\" Tuff bitterly asked himself as he relieved his bladder.\n\nHe then dressed and made his way to the sixth floor gym. An hour later, he let himself back into the room. Britney was still sound asleep. He kissed her forehead and she woke up. She smiled at the sight of Tuff.\n\n\"Morning, husband,\" she said.\n\n\"Morning,\" he agreed. \"John will be here in a couple of hours; I don't know how long it takes you get ready.\"\n\nHe called down for room service to bring them some breakfast while Britney scrambled into the shower. She was still in there when the breakfast came up.\n\n\"Britney, you like cold eggs?\" Tuff asked.\n\n\"No, ew!\" Britney said.\n\n\"Then hurry the fuck up,\" Tuff ordered.\n\n\"You're not a morning person,\" Britney accused as she came out, wrapped in a towel.\n\nHawaii was beautiful and Tuff did enjoy himself. Since her baby bump wasn't evident yet, Britney did enjoy flouncing around in various bikinis and insisted that Tuff take many pictures of her.\n\nTwo of the photographs he took Britney vowed she would delete as soon as she got her hands on the digital camera. One was of her beautiful face, lips stretched wide to accommodate his fat cock. There was a thin trickle of semen dribbling down her chin.\n\nThe other was of her ass being split open from Tuff's fat cock.\n\n\"No, Sweetheart, please?\" Britney begged as Tuff roughly jerked her onto her hands and knees.\n\nA slap to her sleek buttocks caused her to yelp, then giggle.\n\n\"Just my pussy, please, Baby?\" Britney begged and squealed as Tuff did slide his hard cock into her pussy.\n\n\"Ugh!\" Britney shuddered as a slimy finger was pushed into her winking anus.\n\n\"Ugh! Oh, Tuff, no, please?\" Britney whined as a second finger soon joined the first finger.\n\nShe was protesting, but Tuff smirked as she began to thrust her hips back to meet his forward thrusts. She stiffened then grunted in orgasm when he wormed a third finger into her stretched anus.\n\n\"That's, no more, Baby,\" Britney begged as he corkscrewed the fingers around in her rectum.\n\nShe stiffened in a second, more intense orgasm. The scream caught in her throat and she only managed a gurgling sound.\n\n\"Ugh, oh,\" Britney grunted as Tuff spread his thick fingers apart.\n\nThen he was pressing the head of his cock to her virgin hole. She clenched her face, her belly, and her rectum as tightly as she could.\n\n\"Going hurt you fight it,\" Tuff warned as he slid a millimeter of his cock head into her anus.\n\n\"Ugh!\" Britney cried out as her greasy anus stretched around his fat knob.\n\nHe grabbed onto her massive breasts and twisted her sensitive nipples. He used her breasts as if they were reins, pulling her back.\n\n\"Ugh, oh God damn!\" Britney cried out as another millimeter of Tuff's large cock pressed into her tight hole.\n\nTuff's right hand reached underneath her and found Britney's drooling pussy.\n\n\"Ugh, oh shit! Oh you God damned mother fucker!\" Britney screamed out as his toying with her hypersensitive clitoris caused her to jerk, driving another few millimeters of his cock into her rectum.\n\nThey both groaned when his cock head popped past her sphincter.\n\n\"Augh, augh, aiee!\" Britney grunted, then screamed as an orgasm welled up and burned inside of her guts.\n\nTuff kept pushing forward as Britney bucked and grunted underneath him. Her large breasts slapped hard against each other, making a delicious slapping sound as he gained entry into her ass.\n\n\"God damn! That fucking hurts, ass hole!\" Britney screamed.\n\nThen she was bucking in another orgasm. Tuff loosed a thick flood of semen deep into her bowels and she gave a strangled bark as a painful orgasm racked her body. As soon as he caught his breath, Tuff grabbed the digital camera and snapped a picture of his fat cock nestled between her beautiful butt cheeks.\n\n\"My ass still fucking hurts, ass hole,\" Britney complained as they settled into their first class seats for the return flight home.\n\n\"Uh huh, give me a minute, see if I can find anyone who cares,\" Tuff said.\n\nHome again, Tuff did again carry her over the threshold of their home. Then he left her alone to call her parents. He did not call his mother. Instead, he went to the bedroom they'd set up as his home office and worked on a filtration system he was designing. If his hunch was correct, the petroleum refining industry would demand at least one of these in every single refinery, worldwide.\n\n\"Sweetheart? We're going to Mom and Dad's for supper,\" Britney called out.\n\n\"What time?\" Tuff asked.\n\n\"About six,\" Britney said. \"What? Why are you working? We have a brand new bed's not even been broken in yet.\"\n\nAfter christening their bed, the newlyweds napped. Then Britney woke him up with a blow job. So, even though they were going to the in-laws, Tuff was fairly relaxed when they pulled up to the Kendricks home.\n\nTuff greeted Cheryl with a kiss and Harry with a polite nod of his head. Over drinks, Britney showed her parents the numerous pictures they'd taken, even though Cheryl and Harry had been to Hawaii before.\n\n\"Uh, darling, Ezekiel wasn't there?\" Cheryl finally asked.\n\n\"Huh? Well, yeah,\" Britney said.\n\n\"Well, I've not seen a single picture of him yet,\" Cheryl pointed out.\n\nAs her pregnancy progressed, Britney's need for intimacy also increased. Tuff was often grateful to be going to work, to get away from her clinging nature. She also needed constant validation that her pregnancy was not making her fat and unattractive.\n\n\"Britney, you are fat, pregnancy makes women fat; it's just a part of it,\" Tuff sighed when he was asked, for the thousandth time if she was fat. \"But, it's also what makes you even more beautiful today than you were on our wedding day.\"\n\n\"You're just saying that,\" Britney accused.\n\n\"No, no, I'm not just saying that,\" Tuff said. \"You really are fat.\"\n\nHe laughed when she squealed in indignation.\n\nMarie came over a few times, but Tuff kept her visits to a minimum. Rather than being happy for her son, she only had complaints, mainly about him.\n\n\"Oh, see you got enough money for an espresso machine,\" Marie would snipe. \"But uh, my air conditioner went out last month. Didn't have money get that fixed.\"\n\n\"Espresso machine was a wedding present,\" Tuff said. \"Hey, you want a cup?\"\n\n\"Miss Marie, we're having cherry cobbler for dessert; you're not allergic to nuts, huh?\" Britney called out.\n\n\"And steaks? We're having steaks? Don't tell me that was a wedding present,\" Marie grumbled.\n\n\"No, cow just walked in front of my truck,\" Tuff said. \"No, Britney, my mother's not allergic to nuts.\"\n\n\"Oh, and the pump thingies' going out on my car; you believe how much George's wants fix it?\" Marie asked.\n\n\"More than the car's worth, I'm sure,\" Tuff said.\n\nTuff bought his mother a well maintained 2015 Chevy Malibu and a nice two bedroom home on the outskirts of Bender, Louisiana. Her neighbors soon learned how inconsiderate, how selfish her son was. He had a five bedroom mansion in Baylor Lake and stuck her all the way out in Bender.\n\n\"I guess he doesn't want me coming see him and my grandbaby,\" Marie grumbled. \"But that's all right. Jesus sees him, sees how he treats his mother. It'll all be read aloud in front of the Tribunal of Angels.\"\n\nWhen Tuff showed the sketches for his filtration system, Claude gasped. He looked at the sketches and at the schematics, then at the projection values.\n\n\"Come, come, you, we must,\" he babbled and dragged Tuff to Harry's office.\n\n\"Oh my God, this would shave, what? Nearly half the time off of refining?\" Harry gasped. \"Build it, build it, what the fuck are you standing around for?\"\n\nYes sir,\" Tuff said.\n\n\"What you think we ought to name it?\" Harry called out.\n\n\"K.E. Britney,\" Tuff said as the door closed.\n\nOn a March morning, with rain steadily pounding for the third day in a row, with many streets flooded, Britney sat up in bed and screamed. Tuff calmed her down as soon as the contraction passed and helped her dress.\n\n\"Ugh! Jesus, oh sweet Jesus, oh God please help me,\" Britney sobbed out when another contraction came.\n\nTuff picked her up and carried her down the stairs. He stepped into the garage and put her into his pickup truck.\n\n\"No, no, Sweetheart, please don't leave me,\" Britney sobbed.\n\n\"Britney, I need to put some shoes on,\" Tuff smiled, extricating himself from her grip.\n\nHe dressed, found his cell phone, and hit the number 666 on his keypad.\n\n\"Hi Mr. Kendricks, yeah, she's going into labor; fixing leave the house now,\" Tuff said calmly as he started the truck.\n\n\"If I die, please, please take care of our baby,\" Britney begged.\n\n\"Britney, you're not going to die,\" Tuff said as he drove slowly through the swollen streets of Baylor Lake, then DeGarde, making his way to the St. Elizabeth Trauma Center.\n\nThe delivery was a long, tortuous one. Britney sobbed and screamed, clinging desperately to her husband. She seemed to sense, if she let go of him, she would slip away.\n\n\"We are never ever having another one, you hear?\" she sobbed.\n\nOne of the nurses, having heard this declaration more than once, giggled. She patted Britney's shoulder reassuringly.\n\n\"Hear that all the time. And usually? Year or two later? They're right back in here, saying same thing all over again,\" the woman said.\n\n\"Well I mean it,\" Britney said.\n\nDr. Ellen Sweetman smiled as she strolled into the room.\n\n\"Grandparents are waiting hear what the word is,\" she said.\n\nShe checked Britney's dilation and smiled.\n\n\"Only about four centimeters. Mr. Richards? You can go on to the cafeteria, get yourself something eat if you'd like,\" the doctor suggested.\n\n\"NO! No, please Baby, please don't leave me,\" Britney screamed, grabbing onto Tuff's left arm frantically.\n\n\"Think I'll pass,\" Tuff said.\n\nCheryl came in and tried to take Tuff's place. Britney refused to let go of Tuff though. Harry also failed to persuade his daughter to let Tuff go get a bite to eat.\n\n\"Sweetheart, Y'all got here at what? Five thirty? It's almost one o'clock; I'm sure Tuff's starving,\" Cheryl said gently.\n\n\"I'm fine,\" Tuff said. \"Oh, damn, someone call my mother?\"\n\n\"You mean, you called us but didn't...\" Harry asked, then smiled proudly.\n\nAt three nineteen, Cheryl Marie Richards gave a lusty cry and Britney finally relaxed her grip on Tuff's arm.\n\n\"Thank you, Sweetheart,\" she murmured. \"I love you so much.\"\n\n\"You did great, you hear?\" Tuff gently said.\n\n\"It's a girl,\" Britney said. \"You, you're not disappointed, you're all right it's a girl? Next one, next one will be a son, okay?\"\n\n\"Britney, I'm thrilled it's a beautiful girl, now I have two beautiful girls in my house. I couldn't be prouder, I promise,\" Tuff assured her. \"A little girl? With dolls and dress up and a playhouse and dances and piano lessons? Oh it's going be perfect.\"\n\n\"Now can Tuff go get something to eat?\" Cheryl teased her daughter.\n\n\"Oh Sweetheart! I'm so selfish!\" Britney wailed.\n\n\"Britney, you were scared,\" Tuff said gently.\n\n\"Well, congratulations, 'Daddy,'\" Harry jovially said as a weary Tuff left the delivery room.\n\n\"Kiss my ass, cock sucker, we're getting a DNA test,\" Tuff said.\n\nIn the cafeteria, Tuff stuffed his lunch into his mouth. A moment later, Cheryl came and joined him.\n\n\"Harry told me what... Cheryl Marie is yours, you do know that?\" she quietly asked.\n\n\"No offense, Cheryl, but I'd like scientific proof of that,\" Tuff said.\n\n\"Ezekiel, she's yours,\" Cheryl said firmly.\n\nTwo days later, Dr. Ellen Sweetman confirmed Cheryl's assertions. She talked about markers and other scientific jargon and announced that Ezekiel Aaron Richards was ninety nine point nine nine nine percent the father of Cheryl Marie Richards.\n\nThe doctor had a startled look on her face when Tuff asked for copies of the test results.\n\n\"I uh, well, this is the only copy,\" Dr. Sweetman stammered.\n\n\"Then walk your fat ass over to the copier, press the button and run off copies of it,\" Tuff said, face tight.\n\n\"Sweetheart, really!\" Britney said, shocked at her husband's rude behavior.\n\nDr. Sweetman gave Tuff the requested papers. Then he helped Britney to her feet. Britney clung to his arm as he carried Cheryl Marie in her car seat carrier in the other arm.\n\nAt home, Tuff helped Britney into bed. Then he placed Cheryl Marie in her bassinet.\n\nIn his home office, Tuff looked at the papers Dr. Sweetman had provided. He grimaced and shook his head. Two of the pages were missing.\n\n\"Okay, bitch, how much did Harry pay you?\" Tuff asked aloud.\n\nHe heard Cheryl Marie give a tiny cry and was immediately on his feet.\n\n\"Baby's crying, needs her daddy,\" Britney said sleepily.\n\n\"Then tell me who he is,\" Tuff wanted to say, but instead gently picked the wailing child up.\n\nBritney lowered the straps of her nightgown, baring her large, milk-filled breasts.\n\nTuff placed Cheryl Marie in her mother's arms, then went into the bathroom. A moment later, he returned with a towel for Britney's unattended breast.\n\n\"Thank you, Daddy,\" Britney said, smiling happily.\n\nTuff watched mother and child for a long moment. The baby had a shock of bright orange hair and a tiny pale face. Britney's own strawberry blonde hair had darkened considerably during her pregnancy and was now more red than pink. In that brief moment, the two were a beautiful picture.\n\nTuff changed the baby's diaper. He then helped Britney change the pad from her episiotomy.\n\nTuff swabbed the pad with a cotton ball. He put the ball into a sandwich bag. The baby's mouth was swabbed and she scrunched up her face. Tuff quietly apologized to the tiny infant. Then he sucked on a cotton ball for a moment.\n\n\"Tuff Richards. Too ugly for friends Richards, what's up?\" Brent Roberts said when Tuff caught the medical student outside of his apartment.\n\n\"Need you run DNA tests on these,\" Tuff said. \"You. No one else but you, okay?\"\n\nBrent walked back into his cramped apartment. He then placed the three sandwich bags into a large sealed bag and had Tuff initial the bag. The two friends then caught up on what had been going on since they'd last talked.",
        "\"Aw!\" Brent sighed as Tuff showed him the picture of Britney and Cheryl Marie as mother breast fed child.\n\n\"Yeah, one day, one day you might have one of these, oops! Well, you and your boyfriend might ADOPT one of these,\" Tuff said.\n\n\"Frank hates kids,\" Brent admitted.\n\nTuff stared at Brent for a long moment. Then the two friends smiled and punched each other playfully.\n\n\"Fucking knew it,\" Tuff said.\n\n\"Yeah, well, not everyone does, okay?\" Brent said. \"So, keep it between me and you, all right?\"\n\n\"Oh bull shit too! Going on my Twitter soon as I leave here,\" Tuff joked.\n\n\"You don't have a Twitter account,\" Brent said.\n\n\"Where were you?\" Britney demanded when Tuff returned.\n\n\"Went to work out,\" Tuff lied. \"Britney, I've been in this house forever, going out my mind. I just needed a little time for me, okay?\"\n\n\"Well, we missed you. Didn't we, Cheryl Marie, didn't we? We missed our big strong Daddy, yes that's right,\" Britney sang to the baby.\n\nHarry and Cheryl came over to the house. Harry smiled smugly when Britney told them that Dr. Sweetman had confirmed what they'd already known; Ezekiel Aaron Richards was the father of Cheryl Marie.\n\n\"See, darling?\" Cheryl said softly, resting a motherly hand on Tuff's bicep. \"You're the father. Now we can move forward, right?\"\n\nTuff said nothing, just smiled a tight smile. Harry's smug expression slipped away when Britney told them that Tuff had demanded a copy of the test results.\n\n\"Now, you are on paternity leave; I don't want to see you in the building until six weeks have passed,\" Harry playfully ordered the young man.\n\n\"Uh huh,\" Tuff agreed. \"I'm still trying find a solution to angled drilling.\"\n\n\"No. No more work,\" Britney ordered. \"You have a baby and a wife that needs you.\"\n\nAt that moment, Tuff's cell phone rang.\n\n\"Hey Tuff, you come on over?\" Brent asked.\n\n\"Lunch tomorrow? I need me some Tommy's po-boys, hear?\" Tuff said.\n\n\"Tommy's? Carbs? No, man, how about Saladelights? On nineteen?\" Brent suggested.\n\n\"I'm there, dude, twelve thirty,\" Tuff said.\n\n\"Who was that?\" Britney asked.\n\n\"Pack. Meeting him at Tommy's tomorrow for lunch,\" Tuff said.\n\nAt twelve thirty the next day, two men in dark suits sat in Tommy's Po-Boys restaurant, dawdling over fried oyster po-boys. They lingered long after they'd finished their po-boys, but Tuff and Pack never did appear.\n\nAt one fifteen, Harry looked up as Tuff entered his office.\n\n\"Don't know how much you paid Dr. Sweetman,\" Tuff said.\n\n\"I have no idea what...\" Harry said.\n\n\"And don't really care,\" Tuff said, dropping a folder onto Harry's desk.\n\n\"What's this?\" Harry asked.\n\n\"A second, actual DNA test, run by a college student with no skin in the game,\" Tuff said.\n\n\"Well, how do you know...\" Harry blustered.\n\n\"And said it's the damndest thing,\" Tuff said, flipping the folder open. \"Both females? Both females have the same father.\"\n\nHarry's face lost all color. Tuff stood, silently regarding the man.\n\n\"The college student? Doesn't have a clue who the two females are. They're Jane Doe and Jane Doe Junior to him,\" Tuff said quietly.\n\n\"Well, I suppose you think you're going to blackmail me now, huh, you little bastard?\" Harry snarled.\n\n\"The only thing I want from you is my freedom,\" Tuff said plainly. \"Let me go. Let me go get my Masters, my Doctorate. I'll divorce Britney; she can keep the house, the car, everything.\"\n\n\"But she loves you,\" Harry begged.\n\n\"But I don't love her,\" Tuff snapped, slapping the top of the desk. \"Jesus! You ever hear me say I love her? You ever hear me say anything like that? No? Know why? Because I can't stand the whining stuck up little cunt.\"\n\n\"Your baby?\" Harry begged.\n\n\"Your baby. Your baby,\" Tuff said. \"Don't know how long you been fucking her, don't even care. When I'm gone? Y'all can keep on fucking, I just don't give a shit. I just want out.\"\n\n\"My company; God damned it, you know how hard I worked make this company what it is?\" Harry groveled. \"Britney? She'll never be able run this company. Cheryl would run it into bankruptcy in a heartbeat. I need someone here can take it over when I'm gone.\"\n\n\"Then go public,\" Tuff suggested. \"Go public. Hold on to fifty one percent of the company, the shareholders will appoint you as Chairman of the board. When you're gone? Shareholders will appoint someone else, someone that will keep your legacy going. One day? Cheryl Marie will take over in her granddaddy's shoes.\"\n\n\"The Britney, the TR One, the bonuses, they've made, they've made you a millionaire, son. You can't just walk away from that, can you?\" Harry wheedled.\n\n\"Why not?\" Tuff asked. \"I been broke before; didn't kill me.\"\n\nHarry tried to grab Tuff, tried to prevent him from leaving his office. Tuff smiled as he slapped Harry's hands away, then delivered a backhand to Harry's face that had Harry seeing stars.\n\nTuff got into his pickup truck and sighed. He knew what was about to come would not be pleasant.\n\nHe did not love Britney. He did not even like her. But she would be hurt and he did not relish the idea of hurting another human being. Years of his mother's skewed religious fervor had rubbed off on him.\n\nBritney screamed, begged, sobbed, threatened suicide if he left. Cheryl Marie cried for food, for a dry diaper.\n\n\"Your baby, you're not, you can't leave,\" Britney begged.\n\nTuff dragged his suitcase, Britney clinging desperately to it. Had it not been so painful, Tuff would have actually laughed at the comical sight of dragging suitcase and woman down a hallway.\n\n\"Baby's crying,\" he reminded Britney.\n\nTuff thought briefly of going to Pack's house. Then he remembered Harry's goon squad. Pack could take care of himself, but Pack's mother would be an easy target for the goons. Same thing with Brent and Frank.\n\nSo he went to his mother's house. The whole time, his cell phone rang and rang, Britney alternated between hanging up and leaving long, tearful messages.\n\n\"Well, what did you do?\" Marie demanded when Tuff put his suit case into the second bedroom of her home.\n\n\"Forgot to put the toilet seat down, and boom! World War Three,\" Tuff said.\n\nHis cell phone rang. Tuff saw that it was Cheryl's number.\n\n\"Ezekiel? Hi, it's your favorite mother in law,\" Cheryl said quietly. \"We meet somewhere?\"\n\n\"With or without the body guards?\" Tuff wanted to say.\n\nThey agreed to meet at the St. Elizabeth's Parish Library, on the park benches behind the building.\n\n\"They really did a beautiful job restoring the place,\" Cheryl said, looking at the library.\n\n\"Yes ma'am, they really did,\" Tuff said.\n\n\"Harry told me they weren't doing that anymore,\" Cheryl said tightly. \"He swore to me they weren't doing that anymore.\"\n\nShe punched her thighs with her fists.\n\n\"God damn it to hell, he swore!\" she screamed an anguished scream. \"He promised, he swore!\"\n\nTuff watched the woman's rage morph into extreme sorrow. Silently he held out his handkerchief.\n\n\"I didn't know men still carried these things,\" Cheryl said bitterly.\n\n\"Yes ma'am,\" Tuff said.\n\nShe dabbed at her eyes, then blew her nose. Wadding the linen up, she jammed it into her purse.\n\n\"I'll get it back to you after I wash it,\" she promised.\n\nTuff said nothing. He watched a few children playing on the swing set, on the slide.\n\n\"Twenty percent of the TR One and the Britney are going into your account,\" Cheryl said after a long moment.\n\n\"That's very generous,\" Tuff said. \"I was given a bonus when they...\"\n\n\"Should be a few millions,\" Cheryl continued. \"Quite a few million. You'll have enough money to do whatever you want.\"\n\n\"Thank you, Cheryl,\" Tuff said.\n\n\"And don't worry about Harry,\" Cheryl said, getting to her feet. \"He won't dare do anything to you.\"\n\n\"I'm not worried about him,\" Tuff said, getting to his feet.\n\n\"I'll get you your handkerchief, I promise,\" she smiled sadly.\n\n\"I got a few million dollars now; keep it,\" Tuff smiled. \"I think I can afford buy myself a few new ones, huh?\"\n\n\"Why they call you Tuff anyway?\" Cheryl asked as they slowly walked toward her car.\n\n\"Wouldn't ever cry,\" Tuff said. \"My momma would beat me, beat me 'til I was bleeding. But I refused to cry.\"\n\n\"Britney's heartbroken,\" Cheryl said as they stood by her car. \"I'm sorry, I know, I promised not to say anything about her, but...\"\n\nShe looked at Tuff's impassive face.\n\n\"She really does love you, God, it's almost like worships you,\" Cheryl said.\n\nShe touched Tuff's arm.\n\n\"She's, son, I know she's such a spoiled girl, I know she's terribly immature; that's her daddy's fault, and mine too, I suppose. But Ezekiel? Can't you? Won't you try?\"\n\n\"Did try,\" Tuff admitted and suddenly felt a tear trickle down. \"I did try. And when Cheryl Marie was born?\"\n\n\"See?\" Cheryl smiled, wiping away his tear with her thumb. \"You're not so tough.\"\n\n\"No ma'am, guess I'm not,\" Tuff agreed.\n\nHe gave her a kiss, then waited until she was in her car before walking to his truck. He sat in the truck for a long moment. Then he saw a small child, hair in two pigtails running from library to playground equipment. Behind the girl, a young mother walked, smiling at the child's enthusiasm.\n\n\"No ma'am, guess I'm not so tough after all,\" Tuff said, watching the girl bravely climb to the top of the slide.\n\nBritney kept calling his cell phone. In order to get some sleep, Tuff shut it off. In the morning, he saw that he had nine voice mails, fifty three missed calls, and a long string of text messages.\n\nThe one that hurt was the simple picture of a sleeping Cheryl Marie. The baby was beautiful, a little angel as she slept.\n\n\"So, what really happened?\" Marie again demanded to know.\n\n\"Did a DNA test,\" Tuff revealed. \"Turns out, I'm not the daddy.\"\n\n\"See? See? You hadn't been fornicating, wouldn't be in this mess,\" Marie crowed.\n\nThen she thought of something.\n\n\"This, they ain't going make you give this house back, huh?\" Marie asked.\n\n\"They might,\" Tuff lied, enjoying her panic. \"In these kinds of things? She'll probably get all kinds of lawyers, really rake me over the coals, you know?\"\n\nA week after leaving Britney, Tuff asked Carmen Davis to help him find another home; his mother was driving him crazy. She found him a condominium in Kimble, Louisiana.\n\n\"Yeah, used to be apartments, but when the hospital opened...\" the real estate agent admitted.\n\n\"It's perfect,\" Tuff said.\n\n\"I uh, I know it's none of my business, but you and that girl, y'all seemed so happy together,\" Carmen said.\n\n\"Yeah well,\" Tuff said, not answering her query.\n\nFor a moment, a brief moment, Tuff wished he had Britney and Cheryl to help furnish the condo. But a very flirty salesgirl at O'Neil's Furniture and Appliances did her best.\n\n\"And we can have this delivered there on Thursday; morning or afternoon?\" the girl asked.\n\n\"Morning works for me,\" Tuff agreed.\n\nMiller's Electronics had a crew out on Wednesday evening and PC Nation had the cable up and running the moment the Miller's team was out of the way.\n\nThree months later, Tuff opened his mailbox and found a thick envelope from Richards, Pellichet & Jones Law Offices.\n\n\"Been wondering,\" he said.\n\nBut it was not the divorce papers he'd hoped for. Instead, it was papers from Kendricks Engineering, outlining the company's public options, and giving Tuff one thousand shares of K.E.\n\nTuff smiled, seeing Cheryl's hand in Harry's decision to give him anything, anything at all. He signed the documents and dropped them into the envelope the law office had provided.\n\nOn August Fourth, two days before the one year anniversary of his marriage, Tuff received a frantic call from Britney.\n\n\"Tuff, it's Daddy, he had a heart attack, they've taken him to St. Elizabeth's,\" Britney wailed.\n\n\"I'll meet y'all there,\" Tuff promised.\n\nBy the time Tuff parked his truck, found what floor Cardiology was on, and made his way to the wing, Harry James Kendricks had passed away. Cheryl stared numbly at nothing. Britney held onto a whining, fussing Cheryl Marie, and Robert Brown stood behind Britney's chair, looking smugly at Tuff.\n\n\"Cheryl, I am so very sorry for your loss,\" Tuff said quietly.\n\n\"I have this for you,\" Cheryl mumbled.\n\nShe dug in her purse, then pulled out Tuff's handkerchief, neatly folded. She held it out to him. Tuff folded her hand around the scrap of cloth.\n\n\"Think you need it a lot more than I do,\" he quietly said.\n\n\"I'm sorry I called you,\" Britney quietly sniffled. \"I just, I just didn't know who else to call.\"\n\nTuff saw the little flash of anger on Robert Brown's face. He gently touched Britney's hand.\n\n\"It's fine; I'm glad you called,\" he said.\n\n\"What am I going to do?\" Cheryl asked.\n\n\"Mrs. Kendricks, I'll take care of everything,\" Robert smugly offered.\n\n\"Daddy had this all already set up, Robert,\" Britney snapped at the young man. \"There's nothing for you to take care of.\"\n\nCheryl Marie struggled mightily to get out of her mother's lap.\n\n\"She crawling yet?\" Tuff asked, nodding toward the baby.\n\n\"Not yet, but she's trying,\" Britney smiled sadly.\n\n\"Mrs. Kendricks?\" a doctor asked softly.\n\n\"I just, I just didn't know who else to call,\" Britney repeated as Tuff took the seat to her left.\n\n\"Told you, glad you did,\" Tuff said.\n\n\"Thank you,\" Britney said.\n\nRobert simmered as he listened to Britney. He had rushed over the moment he'd heard about Harry's collapsing. He had attempted to handle Cheryl Marie, but Britney wouldn't release the child. He had tried to ingratiate himself to Cheryl, but the grief-stricken woman basically ignored him.\n\nThen to hear that Britney had called Ezekiel, Tuff, her ex-husband, the man that just walked out of her house, leaving her with a newborn baby? And he was the one Britney called first?\n\n\"Labbe's Funeral Home will be picking your father up,\" Cheryl said heavily.\n\n\"Ma'am, let me drive you home,\" Tuff said.\n\n\"I'll follow, bring you back to get you, you still driving that old truck?\" Britney quietly agreed.\n\n\"Hey, got you here when them streets was all flooded,\" Tuff defended his old truck.\n\n\"Oh, I wasn't saying anything about that truck,\" Britney said. \"Love that truck. I'm in labor, losing my mind? And that truck just goes right through everything? No, no, Sweetheart, I love your truck.\"\n\nTuff guided a nearly catatonic Cheryl to the elevators. As they waited, she nervously twitched her fingers along his massive bicep.\n\n\"I hope Harry still has that twenty year old Scotch,\" Cheryl said as Tuff unlocked her car door. \"I feel like getting good and drunk.\"\n\n\"Twenty year old Scotch will do it,\" Tuff agreed.\n\nTuff pulled the car into the garage, lowered the door, then helped Cheryl out of the car.\n\n\"Sir! Welcome back,\" John Johnson said when he saw Tuff enter the house.\n\n\"Mr. Johnson, it is good to see you,\" Tuff smiled. \"But, no sir, I'm not back.\"\n\n\"Harry died, Johnson,\" Cheryl said. \"Where's the Scotch?\"\n\n\"Oh, ma'am! Oh I am so so sorry!\" John gasped.\n\n\"The Scotch?\" Cheryl demanded.\n\n\"Yes ma'am, it's right over here, ma'am, shall I pour you a glass?\" John asked.\n\nOutside again, Tuff approached Britney's Lincoln SUV. He could see Robert sitting in the passenger seat and guessed that Cheryl Marie's baby seat would be behind Britney's seat. He opened the rear passenger door and heard Britney demanding, \"Robert, get out, all right? Just get out.\"\n\n\"I am not leaving you alone with HIM,\" Robert snarled. \"Uh, after what he did to you? You really think I'd leave you? With him?\"\n\n\"He's my husband, you stupid dumb ass,\" Britney snarled.\n\n\"Heard her, Bobby, out,\" Tuff said, opening the front passenger door.\n\n\"I don't think so,\" Robert shrilled.\n\n\"You can get out. Or I can pull you out,\" Tuff said.\n\n\"My car,\" Robert said. \"My car's at the hospital.\"\n\n\"Well, no one told you leave it there,\" Britney said. \"No one told you get in.\"\n\n\"Get in the back seat, Bobby,\" Tuff sighed.\n\n\"I don't think...\" Robert said.\n\nTuff delivered a light slap to Robert's face.\n\n\"You want another one?\" Tuff asked.\n\nRobert knew he was no match for Tuff's physical strength, so sullenly got out. Britney hid her smirk, poorly.\n\n\"Thank you again, Tuff,\" Britney said as she drove back to the hospital.\n\n\"Call me, let me know when the visitation is, Tuff requested.\n\n\"And me,\" Robert demanded.\n\n\"So, uh, how have you been?\" Britney asked.\n\n\"Been all right. Working on a hydraulics project, get water to areas in a drought,\" Tuff said.\n\n\"No, I mean...\" Britney quietly said.\n\n\"I know what you mean,\" Tuff said. \"I'm keeping myself busy.\"\n\n\"Thinking of selling the house,\" Britney said.\n\n\"Selling, why?\" Tuff asked. \"Thought you loved that...\"\n\n\"Too big for just me and the baby,\" Britney said.\n\nThen her eyes filled with tears.\n\n\"And now that Daddy's gone,\" she suddenly wailed.\n\n\"Pull over, pull over, pull over now,\" Tuff ordered.\n\nBritney pulled to the side of the road. Tuff reached across the console and held her until her racking sobs subsided. Robert sat in the rear, fuming.\n\nFinally, Britney softly pushed Tuff away. She wiped her eyes with the back of her hand, then pulled back out into traffic again.\n\nAt the hospital, Britney softly touched Tuff's hand. Then she leaned across the console and kissed him softly on his cheek.\n\n\"Thank you, Sweetheart,\" she whispered.\n\n\"It's going get better yeah,\" Tuff said, then got out.\n\nRobert attempted to open the front passenger door, but Britney hit the door locks. When he attempted to walk around to her window, Britney drove away.\n\nCheryl asked Tuff to be one of the pall bearers and Tuff agreed. John Johnson, Cheryl, and Britney insisted that he ride to the Garden Of Memories cemetery in the long limousine. Getting out of the limousine, both women clung to him, again infuriating Robert Brown.\n\nFather Goldbridthe was his usual impassive, no-nonsense self; it was just too hot and humid for any long, flowery services.\n\n\"And you'll come back to the house?\" Cheryl begged as they walked back to the limousine.\n\n\"Yes ma'am, just let me get my truck, Tuff said.\n\nAt the house, some of Britney's relatives were none too polite as they pried into Tuff's presence.\n\n\"Really, darling, but I thought, didn't he leave you?\" an aunt asked Britney.\n\n\"Yes, yes, Harry said something about a divorce?\" a female cousin sniffed.\n\n\"He is here because I asked him here,\" Cheryl piped up. \"If his presence makes you uncomfortable then perhaps you could just leave?\"\n\nRobert hung around, tried to fraternize with the relatives, the friends. He was never rebuffed outright, but very few encouraged him either.\n\n\"Robert, you ask me again if I need anything, I will slap the shit out of you,\" Britney finally barked. \"I need anything? My husband is right here.\"\n\n\"Just trying to be helpful,\" Robert grumbled.\n\n\"And he's your ex-husband, remember?\" he muttered under his breath.\n\nFinally, it was just Cheryl, Britney, Tuff, Robert, and the household staff.\n\n\"Robert, thank you for coming,\" Cheryl said pointedly.\n\n\"Oh, it's nothing,\" Robert said glibly. \"I couldn't let you go through such a trying time on your own.\"\n\n\"Well, thank you, drive carefully,\" Cheryl said.\n\n\"Oh, I uh, I mean...\" Robert stammered.\n\n\"Take a hint, Robert,\" Britney said abruptly.\n\n\"The reading of the will is next, no, I guess it's this Friday,\" Cheryl said as she poured herself a tall glass of vodka.\n\n\"Vodka?\" Tuff smiled. \"I thought you were going to drink all of Harry's Scotch.\"\n\n\"I did,\" Cheryl smiled. \"Why I'm drinking vodka now.\"\n\n\"Britney? Want one?\" Tuff asked.\n\n\"Breast feeding,\" Britney responded. \"But believe me? Minute I wean little Miss Piggy? I plan on having one very tall Long Island Iced Tea, you hear?\"\n\n\"As I was saying, the reading of the will is this Friday; Donald Pellichet is, is, was Harry's lawyer,\" Cheryl said, faltering.\n\nTuff wrapped his arms around a sobbing Cheryl. Britney hugged her mother from behind. One of her arms went around Tuff's waist.",
        "\"He's really, he's really gone,\" Cheryl wailed.\n\nJohn Johnson and Markisha, the cook stood off to the side, waiting. When Cheryl had finished wailing, John nodded his approval to Tuff.\n\n\"Anyway, as I was trying to say, Ezekiel, the will? It's at nine o'clock; would you please be there?\" Cheryl asked.\n\n\"Yes ma'am,\" Tuff agreed.\n\nHe kissed Cheryl on her cheek, hesitated and kissed Britney. He had intended to kiss her on her cheek, but she twisted her head and softly kissed his lips. They smiled at each other.\n\nThen he pulled his suit jacket on and left the large living room.\n\n\"Thank you, sir, and again, welcome back, sir,\" John said as he trailed Tuff to the front door of the mansion.\n\n\"I keep telling you, Mr. Johnson, I'm not back,\" Tuff said.\n\n\"And I keep telling you, Mr. Richards, welcome back,\" John said, holding out his fist.\n\nTuff smiled, gave the man a fist bump, and stepped out into the dank night. The mosquitos must have been waiting; they swarmed within moments of him stepping outside.\n\nAt the reading of the will, Tuff was stunned to find out that ten percent of Kendricks Engineering was to go to Cheryl Marie Richards, with Ezekiel Aaron Richards to act as trustee. Britney was to receive twenty percent and Cheryl was to receive thirty percent.\n\n\"And, Mrs. Kendricks? Claude Ivernek has been named temporary trustee of the board of directors,\" Donald said. But as the majority shareholders, the three of you will have some decisions to make regarding Kendricks Engineering.\"\n\n\"I do not have any idea; have you ever eaten at Bombay Caf\u00e9?\" Cheryl asked as they stepped out of the law office.\n\n\"No, you?\" Tuff said.\n\n\"It's Indian cuisine; I love it,\" Cheryl said, grabbing Tuff's arm.\n\n\"I could eat. Britney?\" Tuff agreed.\n\n\"Absolutely,\" Britney said, strapping Cheryl Marie down in her stroller. \"Let's go.\"\n\n\"Okay, emergency board meeting Monday at nine, Ezekiel, please be there,\" Cheryl said, checking her cell phone.\n\n\"By the way, how did you get my cell phone number anyway?\" Tuff asked Britney. \"I got it changed when I moved out.\"\n\n\"Pack; no, don't be mad at him, it was an emergency,\" Britney said.\n\n\"I'm not mad, oh my God, this soup is something!\" Tuff said.\n\n\"Lime wedge in the bottom,\" Cheryl warned. \"The board meeting?\"\n\n\"When am I, I'm in school, remember?\" Tuff protested.\n\n\"Uh huh, and as Cheryl Marie's trustee,\" Britney giggled.\n\nTuff thought he had only despised Harry James Kendricks before. Even from the grave, the bastard was still trying to manipulate him, trying to interfere in his life.\n\nDr. Mouton again wished Tuff well in his future endeavors. The man did thank Tuff for the schematics for the hydraulics pump he'd designed.\n\n\"The university will hold the patent on this, of course,\" Dr. Mouton warned.\n\n\"Uh huh, know that,\" Tuff agreed.\n\nMonday morning, Cheryl wasted no time. The meeting was called to order and Cheryl thanked both Claude Ivernek and Helen Theriot for stepping in after Harry's demise. Then she moved to have Ezekiel Aaron Richards appointed as Chairman of the Board and the Chief Executive Officer and Chief Operating Officer of Kendricks Engineering.\n\n\"Seconded,\" Claude Ivernek resounded before Britney Richards could second her mother's motion.\n\n\"Thirded, if a third is needed, Helen Theriot agreed.\n\n\"Uh, one thing, ma'am?\" Danny Scandurro, one of the trustees asked Cheryl. \"What will your position be?\"\n\n\"Same as always,\" Cheryl smiled. \"I'm the head of shopping.\"\n\nThen she lost her smile. As was her custom whenever she needed reassurance, her fingers sought out Tuff's bicep.\n\n\"Mr. Candurro? Truthfully, Harry ran this company. I have no real idea what it is that we do here. Yes, I know, we make machines. But how they work? How they get from here to wherever they're going? I'm clueless. Ezekiel here? He knows everything there is to know about this company. And what he doesn't know? He's not afraid to ask. My job? My job is to stay out of the way and let Ezekiel make money for our employees. For my daughter, and for my granddaughter,\" Cheryl said.\n\n\"Thank you, ma'am,\" Danny said.\n\nTuff walked into Harry's office. The impressive mahogany desk sat, as did his large leather chair, as if waiting for Harry to walk back in, claim his place.\n\n\"Cheryl? This desk...\" Tuff said.\n\n\"Was my father's,\" Cheryl said.\n\n\"I am thinking that desk would be perfect in the library at your home,\" Tuff said.\n\n\"And that chair,\" Britney said. \"You want him out of here, don't you?\"\n\n\"Yes,\" Tuff said bluntly.\n\nThe salesgirl at O'Neil's Furniture smiled a sassy smile when Tuff strode in.\n\n\"Office desk and chair,\" Tuff said forcefully.\n\n\"And where are we delivering this?\" the girl asked.\n\n\"Kendricks Engineering, CEO's office,\" Tuff said, fiddling with an office chair. \"Love this chair, but this is the ugliest color.\"\n\n\"Did you just say, the CEO's office?\" the girl asked, mouth open.\n\n\"And, those two chairs, oh, and I need a couch, probably leather,\" Tuff said. \"I'll pay extra if you can have it all there this afternoon.\"\n\nThe next morning, Tuff stepped out of his condo and stopped short when he saw John Johnson already waiting for him. The man smiled and opened the rear door of the limousine.\n\n\"Good morning, sir,\" John said.\n\n\"Look, its Tuff, okay?\" Tuff said.\n\n\"No sir,\" John said politely. \"I couldn't.\"\n\n\"Even if I insist?\" Tuff asked as John closed the door.\n\n\"I'm afraid not, sir,\" John said a moment later, voice crackling through the intercom.\n\n\"That wall go down? I don't feel like talking through a speaker,\" Tuff asked.\n\nThe partition slid down noiselessly.\n\n\"I uh, I was planning on driving myself,\" Tuff admitted.\n\n\"Ah yes sir, but this way? You can do some reading, get caught up on paperwork, even nap if you wish,\" John said cheerfully.\n\n\"Yeah, I guess so,\" Tuff agreed.\n\n\"Good morning, Mr. Richards,\" Sierra, the red headed receptionist chirped when he strolled in.\n\n\"Good morning, Mr. Richards,\" a few others chirped brightly as he walked down the maze of corridors.\n\n\"Good morning, Mr. Richards,\" Britney smiled as Tuff entered the office outside of his office.\n\n\"Good morning,\" Tuff said, looking around. \"Where's Helen?\"\n\n\"You promoted her to president of sales,\" Britney said, settling down in Helen's old chair. \"I'm your new personal assistant.\"\n\n\"You are, huh?\" Tuff said.\n\n\"How else am I going to learn the business?\" Britney asked.\n\n\"And, when did I promote Helen?\" Tuff asked.\n\n\"This morning. And believe me, she was very grateful,\" Britney said.\n\nTuff opened the door of his office.\n\n\"Oh, and that salesgirl? Candy? Said she'd be by later to bring you an office warming gift,\" Britney said.\n\nTuff smiled, then quickly wiped the smile from his face.\n\nWhen the men from O'Neil's Furniture had delivered his furniture to his new condo, Candy had stopped by with a housewarming gift, a rubber plant. She smiled cheekily as she walked over to a corner of Tuff's new condo.\n\n\"I think this would look good. Right. Here,\" she said and bent at the waist to put the plant down.\n\nThe ridiculously short skirt rode up, revealing her lack of panties. Her bald pussy glistened with her excitement.\n\n\"Unless you can think of somewhere else you'd rather put it?\" she asked, looking over her shoulder at him. \"Like, maybe the bedroom?\"\n\nTuff wondered how soundproof the office was; Candy was a screamer.\n\n\"I like these chairs a lot better than those old ones,\" Britney said, following Tuff into the office. \"Those other ones were so hard to get out of.\"\n\n\"It's a psychological thing,\" Tuff explained. \"Keeps the other person feeling at a disadvantage.\"\n\n\"Oh. Then why'd you get rid of them?\" Britney asked as she sat in one of the new chairs.\n\n\"Want people to feel that they're on equal ground that we're meeting on a level playing field\" Tuff explained.\n\nThen he thought of something. He peered through the door into Helen's, Britney's office.\n\n\"Where's Cheryl Marie?\" he asked.\n\n\"In the new nursery you set up. And U.L.D. was more than happy to send over three Early Education majors for their Internship. Oh, that reminds me; you're donating one hundred thousand to their Education foundation,\" Britney said.\n\n\"Damn, I need a nap after such a busy morning,\" Tuff smiled. \"What time did you get here?\"\n\n\"Seven thirty,\" Britney smiled.\n\n\"Seven, your ass Britney! You've never gotten up before ten o'clock in your life!\" Tuff said.\n\nHe then frowned. On her left hand, he could see her wedding ring and engagement ring. He had actually skinned his knuckle ripping off his wedding band when he found out he was not Cheryl Marie's father.\n\n\"You itinerary is right here; it's also on the calendar on your computer,\" Britney said brightly.\n\nShe crossed her legs. She still had perfect legs. She waited for Tuff to sit, to look over his 'To Do' list.\n\n\"First things first, I want to see this nursery,\" Tuff said.\n\n\"It's right next to the lunch room,\" Britney said, getting to her feet.\n\nThere were five children, ranging in age from three months; Tuff assumed the small baby was Sierra's son, to three years old, whom Tuff recognized as Charles Ivernek, Claude's son. Two young women stood, supervising the mild chaos.\n\n\"There will be more,\" Britney said after checking on Cheryl Marie. \"And the mothers here? Are thrilled.\"\n\n\"How much are we charging them for day care?\" Tuff said.\n\n\"Nothing; it's one of the benefits KE offers its employees,\" Britney said.\n\nBack in his office again, Tuff sat behind his desk for the first time. He adjusted the office chair to his liking and looked at Britney.\n\n\"So, Sweetheart; how's it feel?\" Britney asked.\n\nTuff frowned; both at her calling him 'Sweetheart' and at the framed portrait of Harry James Kendricks that hung on the wall. The man's smile seemed to be mocking him as he sat looking at him. Tuff moved his gaze away from the arrogant face of Harry.\n\nOn his desk was a picture frame, a hinged booklet type in burnished brass. On one side was a wedding picture of himself and Britney. The second frame held a very recent picture of Cheryl Marie.\n\n\"Momma put that there,\" Britney said after a long moment of silence.\n\nYour mother's a very wonderful woman,\" Tuff sighed heavily.\n\n\"She says the same thing about you,\" Britney said. \"No, no, not that you're a wonderful woman, but that you're wonderful.\"\n\nCandy did come by with another rubber plant, identical to the one in his home. Again, she bent, displaying her lack of undergarments. But because Britney was right outside of his door, Tuff whispered to Candy that he'd be home at seven that evening.\n\n\"Sorry, Baby, got to be home with my husband,\" Candy whispered back.\n\n\"Wait, you, you're married?\" Tuff said, surprised.\n\n\"Yeah, don't wear my rings at the store,\" Candy smiled. \"Get a lot more sales guys think I'm single.\"\n\n\"Thanks for coming by,\" Tuff said abruptly.\n\nBritney entered Tuff's office after Candy sashayed out.\n\n\"That cheap... You know, anything you want, all you have to do is ask for it,\" Britney said, tears in her eyes.\n\nTuff frowned at her.\n\n\"Remember? I'm great at giving head,\" Britney sniffled.\n\n\"Uh huh, and knowing where you learned that makes my dick go into hiding,\" Tuff spat bitterly.\n\n\"I can't, listen, Mr. Richards, I can't undo that,\" Britney snapped, voice tight. \"I can't make it all go away.\"\n\n\"I know; I'm sorry, that was a cheap shot, but it's the truth,\" Tuff sighed.\n\n\"And I really thought, I swear to God, Tuff, I really thought Cheryl Marie was yours,\" Britney spat, angry now.\n\n\"I did too,\" Tuff admitted, looking at the pretty little girl in the photograph.\n\nHe rolled a pen on his desk. He then looked at the framed photograph again.\n\n\"I really did too,\" Tuff said. \"And for that brief moment? I thought I had something, I finally had something worth living for.\"\n\n\"Still do,\" Britney said, pointing to the portrait of her father. \"That son of a bitch? Made you her trustee.\"\n\n\"Yeah, why the fuck did he do that?\" Tuff demanded.\n\n\"Because Sweetheart,\" Britney said. \"He knew you were more of a man than I would ever be.\"\n\n\"Well duh,\" Tuff said. \"You're not a...\"\n\n\"You know what I mean,\" Britney said.\n\n\"I'm tired. I'm going home,\" Tuff said.\n\n\"To be with that Candy tramp?\" Britney sneered.\n\n\"No, no, my personal assistant ran her on out of here,\" Tuff said.\n\n\"And I see that slut around here again, I'll do a lot more than just run her off,\" Britney promised.\n\n\"Uh huh, and uh, hey Britney, when's last time you and dear old Dad did the nasty?\" Tuff asked.\n\nBritney's face lost color. Tuff stood, regarding her.\n\n\"Well?\" he finally said.\n\n\"When he, when he had his heart attack,\" Britney whispered.\n\n\"Jesus, aw, damn, Britney, I'm sorry,\" Tuff said.\n\nFor a brief moment, he considered hugging her as she sobbed silently. Then he just turned and left his office.\n\nThe next morning, before he walked to his office, Tuff stuck his head into the nursery. There were two college girls watching eleven children. Cheryl Marie was in a playpen, hammering her small fist on a stuffed animal.\n\n\"Hi Sweetie, hi,\" Tuff said quietly through the nylon mesh.\n\nShe looked up, her light green eyes looking into his brown eyes. Then she put the stuffed animal's ear in her mouth.\n\n\"Hi, remember me?\" Tuff asked quietly.\n\nHe nodded in approval to the two workers. Then he left the room.\n\n\"The nursery? They provide nutritious meals and snacks for the kids?\" Tuff asked when he walked into Britney's office.\n\n\"I, no, the parents are supposed to bring that,\" Britney said, getting to her feet.\n\n\"We have a lunch room; we need to see about putting a full kitchen in there, need to get a dietician,\" Tuff ordered. \"Juice and animal crackers, that kind of stuff for those little urchins.\"\n\n\"Yes, Mr. Richards,\" Britney smiled.\n\nAt eight o'clock, Helen Theriot walked in. After the pleasantries were exchanged, the woman got to the point.\n\n\"Do you know a Robert Brown?\" she asked. \"He listed you as a reference.\"\n\n\"Not as well as my personal assistant does,\" Tuff admitted.\n\nBritney frowned when Helen asked about Robert Brown. She glanced quickly at the young man's resume. Then she handed the two sheets of paper to the older woman.\n\n\"Yeah, I know him. Keeps hanging around, even though I told him, I'm married,\" Britney said.\n\n\"Give him a chance, Helen, but keep him on a very short leash,\" Tuff said.\n\nWhen Helen left the office, Tuff waved Britney into a chair.\n\n\"So, uh, why haven't you filed for divorce? And why the rings?\" Tuff asked.\n\n\"Why haven't you?\" Britney shot back, pretty face twisted in anger. \"Huh? You're the one left, remember?\"\n\n\"I asked you first,\" Tuff said.\n\n\"I haven't filed for divorce because I keep waiting for you to come home,\" Britney said, tears of bitterness beginning to leak from her eyes.\n\n\"And the rings?\" she said, waving her left hand. \"Next to my baby girl? These are the most important things I have, Mr. Richards.\"\n\n\"Them rings didn't stop you from fucking him, did they?\" Tuff snapped.\n\n\"No, they didn't,\" Britney admitted, getting to her feet.\n\n\"God damn it, I never could, I never, I didn't have the strength to tell him no,\" Britney screamed as she stood at the inner door of his office. \"You! You were supposed to protect me, Tuff. You were supposed to help me say no.\"\n\n\"It would have helped to know that, Britney,\" he yelled back. \"It would have helped. But did you ever say anything?\"\n\n\"I couldn't,\" she sobbed, then fled his office.\n\nFifty minutes later, Tuff heard the telephone in Britney's office give a ring. He heard a voice answer. A moment later, a quiet female's voice announced the Sheik Mohamed Akir Aljabi on line three.\n\n\"Thank you,\" Tuff said, picking up his hand set.\n\nHe handled the sheik, a government official from Uzbekistan, then got to his feet. An attractive blonde whose name he could not remember looked up from Britney's desk.\n\n\"Yes sir, Mr. Richards?\" the girl asked.\n\n\"Where's Britney?\" Tuff asked.\n\n\"Mrs. Richards said she had to leave,\" the girl said. \"I'm filling in until she gets back.\"\n\n\"Thank you, uh...\" Tuff said.\n\n\"Denise,\" the girl said. \"Denise Leblanc.\"\n\n\"Thank you Denise,\" Tuff said.\n\n\"Yes sir,\" Denise said and smiled.\n\nWhen he prepared to leave, Denise was still at Britney's desk. She quickly shoved her cell phone out of sight when Tuff opened his door.\n\n\"Really do not like our employees texting on company time,\" Tuff said quietly, but firmly as he left her office.\n\n\"Yes sir,\" Denise whispered.\n\nThere were only three children in the nursery; Cheryl Marie was not among them. There was only one young lady in the room. She smiled uncertainly at the handsome stranger that looked around the room.\n\n\"Are you here to pick up...\" she asked.\n\n\"No, just looking around,\" Tuff admitted.\n\nThe next morning, Tuff could not explain, but he was happy to see Britney at her desk.\n\n\"Good morning, Britney,\" he said, somewhat cheerfully.\n\n\"Mr. Richards,\" she said flatly.\n\nShe followed him into his office. She waited for him to sit before sliding a sheet of paper to him.\n\n\"Here are three general contractors; their appointment times are next to their names. They'll be going over the kitchen you want to put in,\" she snapped.\n\n\"Very good,\" Tuff agreed. \"The sooner we can get that done, the better.\"\n\n\"Here's the names of three good real estate agents; I don't know when you'd want to start showing the house, but they've said they'll make themselves available whenever you'd like,\" Britney snapped, slapping a second piece of paper down on his desk.\n\n\"Okay,\" he said. \"But it's your...\"\n\n\"And, here's the names and numbers of three good divorce lawyers; I'll leave it up to you when you'd like to meet with them,\" Britney snapped, slapping a third sheet of paper down on the desk.\n\n\"Anything else, Mr. Richards?\" she asked, getting to her feet.\n\n\"Think that's plenty for now,\" he smiled.\n\nShe shot him a murderous glare when he smiled. Then she got to her feet and stomped out of his office.\n\nHe met with each contractor, first in his office, then in the lunch room and in the nursery. Tuff had Britney accompany them as the three contractors looked over the area they would be working in.\n\n\"You know, to cut down on the dust, and the noise? Perhaps just a window? Going from lunch room to nursery. The meals and the snacks could be served through the window,\" Paul Robichaux suggested. \"And that way? None of the kids could wander out of here, get too close to the hot stove, or worse yet, wander out of the building.\"\n\n\"An excellent suggestion,\" Tuff agreed.\n\nAgain in his office, he had Britney sit next to him on the leather couch. For a long moment, she sat, ramrod straight, not facing him.\n\n\"So, which one did you like?\" he asked.\n\n\"You're the boss, you decide,\" she snapped.\n\n\"And you are my personal assistant, and I am asking your opinion,\" Tuff said.\n\n\"I liked Paul; he seemed to have some really good ideas,\" Britney softened.\n\n\"Agreed. He also has children of his own and seems to know a lot about them,\" Tuff said.\n\n\"You looked at his facebook page?\" Britney deduced.\n\n\"Uh huh,\" Tuff said. \n\nHe gently put a hand on her shoulder. She turned slightly, looked at the hand, then at him.\n\n\"I didn't know,\" he said.\n\n\"How could you?\" Britney said, fresh tears beginning.\n\n\"I'm sorry,\" Tuff said.\n\nShe didn't answer, just wrapped her arms tightly around him. He held her tightly, gently rubbing her back, her shoulders.\n\n\"Second day in a row you made me cry,\" Britney lightly joked as she pushed herself away from him.\n\n\"Sorry about that too,\" Tuff smiled.\n\nHe gently touched her face with his large hand. Then he kissed her softly.\n\n\"Really, I really wish you could have let me know,\" he said quietly. \"Britney, I didn't know, I just didn't know I was supposed to be protecting you.\"",
        "\"Sweetheart, I'm sorry, I am so sorry,\" Britney whispered. \"I just, I just didn't know how to tell you.\"\n\nShe kissed him. She opened her mouth and he sucked her tongue into his mouth.\n\n\"Careful, I'm still breast feeding,\" she whispered when his large hands reached up and cupped her large breasts.\n\n\"Still?\" he asked, but did back away from her breasts.\n\nThe ringing of her telephone broke their kiss. She smiled and dashed to her office.\n\n\"Kendricks Engineering, Mr. Richards' office,\" she intoned. \"Dean Simms? Yes sir, please hold.\"\n\n\"It's the Dean of U.L.D. on line one,\" she called through the open door.\n\nTuff spoke briefly with the Dean of Student Affairs at the local university. When he hung up, Britney was again sitting on his couch, her business jacket off.\n\n\"That hundred thousand dollars we donated?\" Tuff asked.\n\n\"You. You donated,\" Britney said.\n\n\"Well, there's a banquet Saturday night, seven o'clock,\" Tuff said.\n\n\"Oh?\" Britney asked.\n\n\"Black tie, of course,\" Tuff said.\n\n\"Oh, but you do look so good in a tux,\" Britney enthused.\n\n\"So, since you're the one made me donate it, you be my date for this shindig?\" Tuff asked.\n\n\"Are, yes, yes, I'll be your date, shit, you still owe me a dance,\" Britney enthused, getting to her feet.\n\n\"I don't owe you a dance, Britney, we already had that damned dance, remember?\" Tuff said.\n\n\"T. Dayton's, oh, and I'll need, Tuff? You bring Cheryl Marie home? I've got a few things to do, God, it's this Saturday? They really don't give anyone time get ready, do they?\" Britney said as she left the outer office.\n\n\"Hello, Mr. Richards, Denise smiled as she took Britney's seat a moment later.\n\n\"Hi Denise, how's my second favorite personal assistant?\" Tuff smiled.\n\n\"Working hard to be your most favorite,\" she said.\n\nTuff did not respond to the blonde's blatant statement. At the last check of his bank account, he had enough money to settle several sexual harassment suits, but didn't really want the hassle.\n\nInstead, he closed the door of his office and poured himself a few fingers of Harry's twenty year old Scotch.\n\n\"Mrs. Richards on line one, Mr. Richards,\" Denise's voice cut through.\n\n\"Of course; minute I'm about to have fun,\" Tuff smiled.\n\n\"Cheryl Marie's car seat and stroller is in the closet next to my desk,\" Britney bubbled. \"Johnson will be there at six, unless you want to go home earlier?\"\n\n\"Six is fine,\" Tuff said.\n\nAt five fifty five, Tuff stepped out of his office, wished Denise a good evening, and took both stroller and car seat out of Britney's closet.\n\nCheryl Marie smiled at him when he scooped her out of her playpen. She gurgled happily when he put her into her stroller and strapped her in.\n\n\"Have a good evening, Mr. Richards,\" the young lady said.\n\n\"You too,\" Tuff said.\n\n\"Mr. Richards,\" John Johnson smiled as Tuff approached the limousine.\n\n\"Mr. Johnson,\" Tuff said.\n\nThe chauffeur quickly anchored the car seat and folded the stroller as Tuff buckled the child into the car seat.\n\nCheryl Marie giggled and gurgled as Tuff played 'Patty Cake' with her. When the limousine came to a halt, Tuff looked out at the familiar sight of his old home.\n\n\"Huh,\" Tuff said when John opened the door.\n\n\"And she keeps the porch light on for you, sir,\" John said quietly as he unfolded the stroller.\n\nTuff pushed the stroller up the drive, car seat under his left arm. He knocked on the door, always hating the way the doorbell sounded at this house.\n\n\"What? Why'd you knock? You could have just come on in,\" Britney said when she opened the door.\n\n\"I don't, I left my keys on the table, remember?\" Tuff said.\n\n\"Oh. Oh yeah, that's right,\" Britney said.\n\nShe rested a small hand on Tuff's arm.\n\n\"Making smothered pork sausage and rice; you staying?\" she asked, light green eyes staring up at him hopefully. \"I know that's one of your favorites.\"\n\n\"I uh, yeah, sure,\" Tuff agreed.\n\n\"If you say 'welcome home,' Mr. Johnson, I swear I'll hit you,\" Tuff warned before telling the chauffeur he'd call him when he was ready to be picked up.\n\n\"Yes sir,\" John smiled.\n\nBritney was a good cook, especially when it came to a good Cajun dish. Then she had Tuff help her give Cheryl Marie a bath. Then Tuff read a bedtime story, even though Cheryl Marie didn't understand anything Tuff was saying.\n\n\"You staying the night?\" Britney begged. \"Still got a few of your tee shirts here. Oh, and some boxers.\"\n\n\"No, Britney, but thank you,\" Tuff said gently.\n\n\"Fine, Mr. Richards,\" Britney teased. \"See you at work tomorrow.\"\n\n\"Uh huh,\" Tuff said as John answered his cell phone.\n\nHome again, Tuff checked all of his suit pockets for anything of importance. He removed his cell phone from the inside pocket. Then, he found two keys in the other inside pocket.\n\n\"You little bitch,\" Tuff couldn't help but smile as he recognized the front door key and the rear door key of his former residence.\n\nHe debated on what to do with the keys and finally just lay them on his chest of drawers. Then he readied for bed.\n\nAgain, Denise filled in for Britney the next afternoon when Britney left for her appointment at T. Dayton Salon. The blonde girl smiled at Tuff as she crossed her well-shaped legs slowly.\n\n\"Mrs. Richards on line two, sir,\" she said a moment later.\n\n\"Yes, Britney?\" Tuff asked.\n\n\"Car seat and stroller in the closet in my office; I'll pick up a large Supreme from Taste of Sicily's on the way home, okay?\" Britney bubbled into the telephone.\n\n\"And how you know I don't already have plans?\" Tuff asked.\n\n\"You don't, do you?\" Britney asked, all traces of happiness gone.\n\nTuff felt a horrible sinking in his stomach. He could hear the hurt in Britney's voice.\n\n\"No, no, but Britney, really, you can't just go around assuming, all right?\" Tuff said.\n\n\"You're right,\" Britney agreed. \"No, no, Sweetheart, you're right.\"\n\nCheryl Marie smiled when Tuff bent to scoop her up. He smelled the heavy diaper and brought the infant back to his office, diaper bag over his shoulder.\n\n\"Oh!\" Denise sighed at the sight of Cheryl Marie. \"Is that...\"\n\n\"Britney's baby, yes,\" Tuff said, entering his office.\n\nIn his private bathroom, he changed the child's diaper. Then, as she sat on the small fuzzy rug, Tuff thoroughly washed his hands.\n\n\"Now, let's see if you can make it all the way home before unleashing another one of them turd bomb, huh?\" Tuff asked the child.\n\n\"Mr. Richards,\" John Johnson smiled, opening the rear of the limousine.\n\n\"Mr. Johnson,\" Tuff agreed.\n\nTuff used his key to let himself into the house. He could smell the Supreme pizza, thin crust.\n\n\"Wow, you look terrific,\" Tuff complimented, even though he really could tell no difference in Britney's appearance.\n\n\"Really? You like it?\" Britney asked happily.\n\n\"Yeah,\" Tuff agreed.\n\n\"And were you a good girl for Daddy? Were you a good girl?\" Britney fussed over Cheryl Marie.\n\nThey ate the pizza. Again, Britney had Tuff bathe Cheryl Marie, had him read a bed time story to the child.\n\nThen, when he left the nursery, Britney stood in the hallway, modeling a sheer camisole top that barely covered her heavy breasts and a pair of sheer panties.\n\n\"Sure you won't stay?\" she asked, turning and showing him that the panties were a thong.\n\n\"Britney, the problem has never been about how beautiful you are, or how desirable you are,\" Tuff said.\n\nHe kissed her. She clung to him.\n\n\"Then what, Tuff? What is it, Baby?\" Britney asked, begging.\n\n\"I, I'll see you tomorrow,\" Tuff said. \"Banquet starts at seven, okay?\"\n\n\"Tuff, what? What is it? What can I do?\" Britney pleaded.\n\nTuff stepped outside and used his key to lock the front door.\n\n\"Mr. Richards,\" John said.\n\n\"Mr. Johnson,\" Tuff agreed.\n\nThe office was empty on Saturdays, but the manufacturing side of Kendricks Engineering was bustling. There were nearly one hundred orders for the KE TR-1 and even more orders for the Britney filtration system. Tuff watched as employees danced a mad ballet, each doing their part to manufacture the KE product line. \n\nThen he stepped back into the office portion of the building. The silence was deafening after the bedlam on the other side of the doors.\n\nAccording to his calculations, there should be three trucks at the loading docks; two dropping off material, one preparing to transport completed units to the Port of New Orleans. At three thirty, a second truck would be there to transport a load to the Port of Southwest Louisiana.\n\nHe stepped out of the rear doors and looked. He smiled as one truck slowly pulled away from the loading dock.\n\nAgain in his office, Tuff sat behind his desk. As chaotic as the manufacturing floor had looked, there was an order to it all. As frenzied as the loading docks had looked, there was an order to it all.\n\nAs peaceful as it was in his office, with no ringing telephones, no computer humming, no Britney or Denise just outside of his door, it was a chaotic jumble, a complete mess.\n\nPack was in Brazil, travelling along the Amazon. Brent and Frank were in Montana, hiking Glacier National Park. Deborah was expecting her first baby; she would not reveal who the father was.\n\nThere was no one for him to call, to talk to about his problems. His mother would spout some religious chatter, would misquote the Bible. Cheryl, as close a friend as she was, was somewhat biased.\n\n\"It's going get better yeah,\" Tuff muttered to himself.\n\nHe poured himself a few fingers of Harry's scotch.\n\n\"But when?\" he asked himself, not touching his drink. \"Huh? When is it going get better?\"\n\nHe looked at the portrait of Harry. He frowned.\n\n\"And what kind of narcissist hangs a painting of himself in his office?\" he asked the portrait.\n\nHe grabbed the portrait and took it off of the wall. His first thought was to throw the painting into the dumpster behind the building. Then he carried it down the hall.\n\nWhen Sierra would come into work on Monday morning, she would see the portrait of Harry James Kendricks perched on the wall behind her desk, greeting their employees and guests as they entered the reception area.\n\nAt six thirty Saturday evening, Tuff smiled as he stepped out of his condominium. John Johnson was there, hand on the door of the limousine.\n\n\"Good evening, Mr. Richards,\" the driver said. \"You're looking very nice tonight, sir.\"\n\n\"Thank you, Mr. Johnson,\" Tuff said.\n\nHe entered his home and smiled at the sight of Cheryl's slightly large backside as the grandmother knelt on the floor, fussing over Cheryl Marie. The woman looked over her shoulder and smiled widely.\n\n\"Well, Ezekiel, don't you look handsome in your tuxedo,\" Cheryl praised.\n\n\"Thank you,\" Tuff said. \"You're the baby sitter tonight?\"\n\n\"You know it,\" Cheryl said. \"And Britney says 'Sleeping Beauty' is Cheryl Marie's favorite bedtime story; it's the one her Daddy reads to her all the time.\"\n\n\"Uh huh,\" Tuff agreed.\n\n\"You ready?\" Britney asked, coming into the living room.\n\n\"Wow,\" Tuff said honestly. \"You look, that is just beautiful.\"\n\nBritney smiled and twirled so that Tuff could get the full effect of her little black dress, her expertly applied make up, her elaborately done hairstyle.\n\n\"Now I see what all the fuss about 'little black dress' is about,\" Tuff said and Britney smiled happily.\n\nAt the banquet, Tuff and Britney mingled, talking with the faculty, the other guests. Tuff did purse his lips slightly at the sight of Robert Brown.\n\nRobert Brown was the escort of Professor Ashley McLean, head of the English Studies. The fifty year old woman was stuffed into a black dress that was at least two sizes too small. When she raised her arm, it revealed that shaving was not a priority for her.\n\nAfter the meet and greet portion was out of the way, Dean Robert Simms did make a small speech about the generous donation of Ezekiel Aaron Richards to the University of Louisiana at DeGarde. Tuff stood and gave a small bow and wave.\n\n\"No, no, Mr. Richards, a few words, please?\" Dean Simms encouraged.\n\n\"I uh, well, any organization is only as good as its employees,\" Tuff said. \"Some of our employees have children. Their children are too young for school, and since leaving them duct taped in a closet is till illegal in this state...\"\n\nHe let the laughter die down. Britney sat, beaming up at him proudly.\n\n\"My personal assistant,\" Tuff said, looking down at Britney.\n\nHe looked at her beautiful face, her light green eyes. Her pride was evident, her smile was genuine as she looked up at him.\n\n\"My wife suggested that we have a nursery for those employees. Our own daughter is only six months old; we too are benefiting from this nursery. And it's a good feeling, knowing that we can walk down the hall, stick our head in and see our Cheryl Marie,\" Tuff said.\n\nHe felt Britney's fingers touching his hand. Tuff looked down and saw the tears in her eyes.\n\n\"Now, I've already pointed out, an organization is only as good as its employees. So, we at Kendricks Engineering are donating one hundred thousand dollars to the Education Department here, to make sure that U.L.D. has the best employees. So that they can keep churning out the best of our employees. In our nursery, in our engineering, in our sales team, right Robert?\" Tuff continued.\n\n\"Right, Tuff,\" Robert said, after recovering from his surprise.\n\n\"Dean Simms, Kendricks Engineering is committed, to our employees, to our community, to our neighbors and our friends. As our neighbor, as our friend, please let Kendricks Engineering know what we can do for you,\" Tuff concluded.\n\nBritney leaned her head against Tuff's shoulder when he sat down.\n\n\"I love you, I love you so much,\" Britney whispered into his ear.\n\nAfter the meal, after the dessert, Britney walked over to the young man quietly playing a piano. The man was just playing dinner music, some background ambiance.\n\n'Nights In White Satin' began to softly play.\n\n\"May I have this dance?\" Britney quietly asked Tuff.\n\nShe had not demanded the dance. She had not declared that he owed it to her. She quietly asked if she could have a dance with him.\n\n\"They are playing our song,\" Tuff agreed.\n\nA few people looked on as the young couple stood, gently swaying to the tinkling melody. Some joined them in the very small area.\n\nJust as she had done at Pack's party, at their wedding, Britney molded herself against Tuff. Her lips sought out his jawline. Her breath blew seductively in his ear.\n\nHe held her lush body against his. She hummed the words of the song as they held onto one another.\n\n\"A hundred bucks you play that again,\" Tuff said to the young man when he played the last notes of the song.\n\nThe one time Tuff left Britney alone, Robert made a bee-line for her. He bragged about his sales for the month, and asked her pointedly if Tuff was still 'pouting,' leaving her alone in that big empty house.\n\n\"Robert, that's my wife you're trying to horn in on,\" Tuff said easily from behind Robert. \"Now, why don't you go talk to Dean Mouton about the hydraulics pumping station he's working on? It could mean some sales for you in Afghanistan.\"\n\n\"We, we're not in Afghanistan, are we?\" Robert asked.\n\n\"It'll be your new sales territory I see you around Britney again,\" Tuff warned.\n\n\"My hero, come protect me from the big bad wolf,\" Britney teased as she wrapped her arms around his broad shoulders.\n\nBefore he left the banquet, Tuff had secured a promise of a contract for Kendricks Engineering to do the manufacturing and the sales of the hydraulics pumping station. He had talked with Dr. Whitehead about holding a contest among the architecture graduate students to design a new facility that would be manufacturing the hydraulics pumping station. He had promised another donation to the Mathematics Department.\n\nThe piano player gasped when he emptied his tips jar and saw ten crisp one hundred dollar bills folded together among the five and ten dollar bills.\n\n\"It was a good banquet, Mr. Richards?\" John asked as he opened the rear door.\n\n\"It was wonderful, Mr. Johnson,\" Britney enthused.\n\nJohn looked at her for a brief moment. He had known the young lady for nineteen of her twenty three years. Just like her father and her mother, she had always called him 'Johnson,' never 'Mr. Johnson.'\n\n\"A very productive evening indeed, Mr. Johnson,\" Tuff agreed.\n\nThe men bumped fists, then John closed the door of the car.\n\n\"Now, how you do that?\" Britney asked, holding out her fist.\n\nTuff showed her how to do an appropriate fist bump. She practiced on him the entire ten minute ride home, to her house. She laughed happily and kissed him.\n\nJohn opened the door and smiled. He looked, surprised when Britney held out a fist. He smiled and the two bumped fists.\n\n\"Good night, Mr. Johnson. Thank you,\" Britney said.\n\n\"You are welcome, ma'am,\" John said.\n\n\"Good night, Mr. Johnson,\" Tuff said, giving John a fist bump.\n\n\"Good night, sir, and welcome back, sir,\" John said.\n\n\"That will be all for tonight, Mr. Johnson,\" Tuff quietly said.\n\n\"Again, sir, welcome back,\" John quietly said.\n\nCheryl came out of one of the guest bedrooms to ask Britney how the evening had gone. But when she saw Tuff approaching behind her daughter, she smiled and shut her door.\n\nThey both looked in on the sleeping Cheryl Marie. The infant did not stir when Britney gently ran her hand over her back. She continued to breathe softly.\n\n\"You are, please, you are staying? Please?\" Britney asked quietly.\n\n\"Sent Mr. Johnson on home,\" Tuff admitted.\n\nBritney wrapped her arms around Tuff, pulled him tightly, and kissed him. It was a scorching kiss, a passionate kiss.\n\nBritney pulled Tuff from the nursery to their bedroom. As she pulled him, she hummed, 'Nights in white satin, never reaching the end...'\n\nIn the master bedroom, Tuff saw his New Orleans Mardi Gras coffee mug sitting on what would have been his nightstand. He also saw that there were three pillows on what would have been his side of the bed.\n\n\"I've been looking all over for that mug,\" he said.\n\n\"Been right where you left it,\" Britney said as she struggled to get to her zipper.\n\nTuff reached out and unzipped the dress. Then he pulled her against him. She sighed in contentment as she felt his muscular chest against her back, felt his powerful arms around her waist.\n\nShe wiggled her backside, feeling his erection pushing at his trousers. She gave another sigh when she felt his lips graze her ear.\n\nThen he pushed her dress down. It puddled at her feet, leaving her in only thigh high stockings and four inch heels. She twisted in his arms and pulled him down for another scorching kiss.\n\n\"Fuck me, just fuck me,\" she whispered.\n\nHis jacket, cummerbund and tie joined her dress on the bedroom floor. His shoes, shirt and trousers were kicked into a corner of the bedroom.\n\n\"Oh, Sweetheart!\" she cried out as he drove himself into her wet pussy in one thrust.\n\nHe pounded his cock in and out of her pussy. She wrapped her stocking clad legs around his narrow waist, pulling him tight against her.\n\n\"Oh, shit, shit, oh God, here it, ugh!\" Britney grunted in orgasm.\n\n\"Whose pussy is this?\" Tuff demanded.\n\n\"Yours, baby, that's your pussy,\" Britney grunted, another orgasm welling up in her.\n\n\"Whose ass is that?\" Tuff demanded.\n\n\"Yours Baby, you want to fuck your ass?\" Britney asked, then shook and shuddered through a second orgasm.\n\n\"Whose mouth is that?\" Tuff demanded.\n\n\"Yours, Tuff Ezekiel Aaron Richards,\" Britney gasped and groaned. \"All of me is yours, all of me.\"\n\nWith a groan, he emptied his balls into her tightly pulsing pussy.\n\n\"Give it, oh God yes, give it to me!\" Britney screamed as she felt his semen flooding into her pussy.\n\nAfter he caught his breath, Tuff reached down and pulled his black socks off of his feet. Then, he pulled Britney against him. She lay, her pretty head on his chest, fingers lazily running along his flesh.",
        "\"Thank you,\" she said quietly.\n\n\"Thank you,\" he echoed.\n\nThe next morning, at the breakfast table, as they ate the apple pecan pancakes and scrambled eggs that Britney made, Cheryl started crying.\n\n\"Cheryl, what? What's wrong?\" Tuff asked, going to the other side of the table.\n\nHe crouched down and hugged her to him.\n\n\"No, no, it's not, Ezekiel, no, it's just...\" Cheryl snuffled, wiping her flannel sleeve across her face.\n\n\"You can tell that crazy ass mother of yours that prayers really do work,\" Cheryl finally gurgled.\n\nShe clutched Tuff's hand tightly.\n\n\"I have prayed and prayed that one morning, I would get to see you, sitting right there, in your home again,\" Cheryl confessed.\n\nA few more tears slid down her face. She patted Tuff's hand in a matronly gesture.\n\n\"And seeing you there, enjoying your breakfast? Ezekiel, I'm just so happy,\" Cheryl said.\n\n\"Yes, you can tell Miss Marie that prayers really do work, Sweetheart,\" Britney said, rubbing her mother's back.\n\nShe mock-glared at her mother.\n\n\"Uh, might want to leave off the 'crazy ass' part, though,\" Britney said.\n\nNine months after the banquet, Kendricks Engineering had all three hundred and four of their employees and their spouses and children in Mouton Park for the Fourth of July celebration. Half of the staff of Cowboy's BBQ was catering the event. There were two clowns entertaining the children, making balloon animals, juggling. A disc jockey kept music playing; the tennis court had been converted into a dance floor.\n\n\"Aw, don't you do it, Britney Theresa Kendricks Richards, don't you dare,\" Tuff warned as Britney waddled over to the dis jockey.\n\nAs 'Hey Baby' by No Doubt finished playing, 'Nights In White Satin' began to play.\n\n\"I told you don't do it,\" Tuff laughed as she pulled him onto the dance floor.\n\nThey danced, gently swaying together. It was hard for her to press herself against him; her nine month pregnancy making her belly too big.\n\n\"Gazing at people, some hand in...Oh! Oh, oh, Tuff, oh!\" Britney sang, then gasped.\n\n\"Baby?\" Tuff guessed.\n\n\"Uh huh, I think so,\" Britney gasped.\n\n\"Cheryl, Momma? Guess what?\" Tuff said.\n\n\"Claude, you're in charge,\" Tuff called out as he slowly assisted his wife toward his reliable pickup truck.\n\n\"Ja, but nice you recognize that,\" Claude Ivernek said.\n\nCheryl Marie fussed slightly, but allowed Cheryl to scoop her up and carry her to the Mercedes-Benz.\n\nMarie insisted on being in the delivery room. But she was in the way, and was driving the nurses and Dr. Roger Pilleur crazy, so Tuff ordered her to wait in the waiting room.\n\n\"Or, here, mother, here's a twenty, you can call Rapid, have them come pick you up,\" Tuff barked.\n\nThe three people in the waiting room took only ten minutes of Marie's shrill complaints before telling her to put a sock in it. None of them cared how ungrateful, how inconsiderate her heathen son was.\n\n\"And, despite what you might think, ma'am, your son does not need to find Jesus,\" one grandfather to be snapped. \"Jesus ain't lost.\"\n\nAt seven fifteen that evening, Tuff sent out a text message to all KE employees that Ezekiel Aaron Richards, Junior was twenty inches long, was eight pounds three ounces, had all ten fingers and all ten toes, and was looking forward to running the company one day. Britney was also doing fine. Tired. But fine.\n\n\"See? I told you,\" a nurse said to Britney.\n\n\"Huh?\" an exhausted Britney said.\n\n\"You said you wouldn't be having no more last time you was here, and I told you you'd be right back,\" the nurse reminded Britney.\n\n\"Oh, oh yeah!\" Britney giggled. \"Well, this time I mean it.\"\n\n\"Uh huh, you'll be back,\" the nurse prophesized.\n\nTHE END\n\n**Author's Note: I write these stories for my pleasure; I post them here for your enjoyment. I do thank you for reading my stories.\n\nI especially thank those that take the time to rate my stories, those that take the time to leave comments.\n\nI do know that the 'Burn The Bitch' crowd and the 'Scorched Earth' crowd will not be happy. Email me your bank account and routing numbers and I'll refund every penny you paid to me to read my stories. And, since I don't read emails? You may be waiting a while.\n\nHave a great day."
    ],
    "authorname": "JimBob44",
    "tags": [
        "rich girl",
        "poor boy",
        "spoiled girl",
        "high school crush",
        "father-daughter incest",
        "pregnancy",
        "marriage",
        "reconciliation",
        "small town",
        "louisiana"
    ],
    "category": "Loving Wives",
    "url": "https://www.literotica.com/s/tuff-as-nails"
}
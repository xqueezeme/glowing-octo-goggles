{
    "title": "Willow\u2019s Way Ch. 04",
    "pages": [
        "Note 1: This is dedicated to MLT17 for requesting this series.\n\nNote 2: \n\nIn Chapter 1, Faith tries to seduce and ass fuck Willow, who surprises the aggressive slayer by turning the tables.\n\nIn Chapter 2, still the same night, Faith can't get enough of being sodomized in the high school while they are supposed to be on patrol.\n\nIn Chapter 3, Faith falls deeper into anal submission to Willow, who fucks her in a graveyard, where Buffy catches them in the act.\n\n* * * * *\n\n\"So, you and Faith?\" Buffy asked Willow the next day after school, when the two of them were finally alone.\n\n\"Yeah, crazy right,\" Willow said, a little less confident without a strap-on around her waist and a big dick at the fore... which especially instilled her confidence when it was buried deep inside Faith's amazingly resilient asshole.\n\n\"I didn't even know you were gay,\" Buffy said.\n\n\"I didn't know for sure either,\" Willow admitted. She'd always had a crush on Xander and had dated Oz, and had a secret crush on Buffy forever, but after these past few encounters with Faith, there was little doubt she preferred women to men... and she also preferred doing the fucking to being fucked.\n\n\"And with Faith of all people,\" Buffy said, not particularly shocked to see Faith with a girl, as she was obviously a sexually charged woman, but completely astonished to see Willow fucking Faith, and not the other way around. Seeing Willow being so dominant was shocking, almost unbelievable, given her usual shy, somewhat meek, personality. Although on many occasions she'd also seen Willow break out of that stereotypical box and become strong while fighting evil.\n\n\"Yeah, I know, even I don't believe it sometimes,\" Willow said, which was kind of true. Obviously, they were polar opposites.\n\n\"Are you two dating?\" Buffy asked, wondering if it was just sex. The image of Willow dominating Faith was, for some reason, still vividly sketched in her head, and it made her confusingly wet. She hated to admit it, but it had been incredibly hot to witness.\n\n\"We are,\" Willow said, Faith having agreed to label their relationship as girlfriend and girlfriend... although very reluctantly... but Faith's lust for Willow's cock in her ass had made her willing to agree to things she ordinarily never would.\n\n\"Cool,\" Buffy said, finding it both shocking yet hot. \"Just don't let her boss you around.\"\n\n\"Oh, trust me,\" Willow said, admiring Buffy's body, wondering what it would be like to fuck her too, wondering if, as a slayer like Faith, her asshole too would soon regenerate to virginal. She added, planting the seeds for the slim possibility of fucking her best friend, \"I'm the one in charge of our relationship.\"\n\n\"Really?\" Buffy asked, even though she had witnessed firsthand Willow fucking Faith, it didn't occur to her that Willow would be the one in charge... even though, in retrospect, it was obvious she'd been last night.\n\n\"Yeah, once I push the right buttons, she's actually quite submissive,\" Willow revealed, then added, planting more seeds, having done some research about sub-domme relationships after that first night, \"I've learned that most women in positions of authority tend to become secretly submissive once they go off duty.\"\n\n\"Really?\" Buffy asked, realizing that was true for her. Behind the slayer persona she needed to wear almost all the time, when she was alone, or with Angel in the past, she too was submissive... she just wanted to let go and let someone else to be in charge. She wanted just to be used as a slut, a tendency that always confused her and led to her feeling guilty after a night of sexually charged debauchery.\n\n\"Yes,\" Willow continued, unknowingly saying what her best friend was thinking at the moment, \"Many women after a long day at work, or in Faith's case a long night, just want to shut off their brain and be told what to do.\"\n\n\"I can't imagine,\" Buffy lied, even as she felt her cheeks go red at the way Willow's words hit close to home, and she could indeed see that tendency in herself.\n\nWillow noticed Buffy's suddenly flushed face, wondering if this theory she'd read about was true in her case, as she continued planting an abundance of seeds, \"Girls like Faith hide their secret submissive side by being a feminist, or in Faith's case, through excessive sexual bravado. She's always been quite the bully in the bedroom, but now she's very relieved she doesn't have to be.\"\n\n\"Seems a bit extreme,\" Buffy said, as she thought to herself that was absolutely how she often felt.\n\n\"It's just a theory,\" Willow said, acting casual, as if she weren't planting seeds, and perhaps even fertilizing them a bit.\n\n\"I just couldn't have fathomed Faith in that...\" Buffy paused, then finished, recalling exactly what she'd seen, \"...position.\"\n\n\"You couldn't have imagined my being in charge either, could you?\" Willow asked, enjoying the slight power shift that was occurring, and the slightly confused fluster on Buffy's face.\n\n\"I was a little surprised,\" Buffy admitted with an awkward smile, as the visual of Willow fucking Faith so aggressively popped back into her head.\n\n\"So was I,\" Willow laughed, \"but something very natural came over me when Faith tried to turn me, and before I knew it, I was the one turning her!\"\n\n\"Turn? Turning?\"\n\n\"Yeah, she wanted to turn me into her fuck-toy like she had so many others, but instead I turned her into mine,\" Willow said wickedly, all in that cute, sweet casual way she always spoke.\n\n\"Willow!\" Buffy gasped at her friend's blatant frankness, plus the wetness leaking into her own panties.\n\n\"What?\" Willow asked. \"I'm just happy I have someone I can share this with! Keeping it a secret was driving me nuts.\"\n\n\"Well, your secret is definitely out of the bag,\" Buffy said.\n\n\"Yeah, it's kind of liberating.\"\n\n\"So it seems,\" Buffy laughed, happy to see this side of Willow. Happy to see her happy; confident even.\n\n\"Mistress, may we please go and fuck now?\" Faith asked obsequiously, no longer worried about keeping the secret of her being submissive to Willow, especially since Buffy had already witnessed them in the act. Plus, she needed to get ass fucked right fucking now... which overrode everything else... propriety had never been one of her strong suits.\n\nBuffy shook her head at Faith's brazen request (for want of a stronger word), even while she couldn't help wondering what it would be like to be fucked by Willow... something she'd never remotely considered before seeing what she'd seen last night, and then replaying it in her head over and over and over again ever since. Fuck, I really need to get laid!\n\n\"You really are insatiable,\" Willow said, shaking her head at Buffy in the way an understanding but also condescending girl would when their clueless boyfriend said something stupid or inappropriate.\n\n\"But you love fucking me,\" Faith wheedled, knowing that Willow became a completely different person once a strap-on was around her waist.\n\n\"I didn't say I didn't, and yes we will,\" Willow said, shaking her head some more. \"Sorry... duty calls.\"\n\n\"Yeah, I can tell. Then see you tonight at the Bronze?\" Buffy asked, noticing for the first time Faith was wearing a dress, also probably for the first time.\n\n\"Sure,\" Willow nodded.\n\n\"Let's go, Mistress,\" Faith said, in her typical impatient tone. Submissive or not, she was accustomed to the world revolving around her and her needs.\n\n\"Yeah, yeah,\" Willow said, \"hold your horses... or your twat, or something,\" possessively taking her hand.\n\n\"You're the one who turned me into an addicted ass slut,\" Faith said wickedly, deliberately loud enough for Buffy to hear... the idea of helping her Mistress to turn her into the bottom bitch definitely appealing.\n\n\"I'm going to gape that shit hole so good,\" Willow replied, also loud enough for Buffy to hear... yet another seed planted.\n\nBuffy shook her head at their nasty talk, as well as noticing Faith's legs were in nylons, and she could see the top of the lace top stockings whenever the wind blew the dress up. Faith wearing a dress and nylons didn't go unnoticed. It was one more way Willow was controlling Faith... which was very impressive. She remembered dressing up as a cheerleader for Angel, as well as the Devil in all red lingerie, and an angel in all white.\n\n\"You'd better,\" Faith said, frustrated by her constant longing for having Willow's dick in her ass, and by feeling longingly empty whenever it wasn't filled.\n\n\"I think I created a monster,\" Willow said shaking her head.\n\nTen minutes later, Faith was sucking her strap-on cock. \"God, you look so good with a mouthful of my dick, you sexy slut.\"\n\n\"Mmmmm,\" Faith moaned, being called names by Willow really turning her on.\n\nAs Willow watched the pretty, the strong, the defiant, the slayer, the conquered, sucking her cock, an idea popped into her head. What if she could learn a spell to make the cock real? Was that possible? It would definitely be something to research.\n\nFaith bobbed on the strap-on, ironically wishing it was a real cock. Being subjected to Willow's dominance with a real throbbing, spurting cock would be the ultimate rush!\n\n\"Ready for some butt fucking?\" Willow asked as she pulled her (unfortunately fake) cock out of the pretty girl's mouth.\n\n\"Yeppers! Just shove it in,\" Faith said, as she stood up and bent over the bed... the initial pain being an integral part of her sexual thrill of submissive obedience.\n\n\"You really are the most insatiable ass slut,\" Willow said, as she admired Faith's ass bent over so invitingly. Faith was naked except for the thigh high stockings Willow now insisted she always wear.\n\n\"Yes, I need your dick in my ass; yes, I love your dick in my ass,\" Faith babbled, knowing that was what Willow wanted to hear, but also she just wanted that cock in her ass!\n\n\"That sounds pathetic,\" Willow said, slapping Faith's ass.\n\n\"True, but you know I love being your ass slut,\" Faith justified, looking back at Willow, who she'd recently seen as nerdy and meek, but now saw as sexy and strong... weird how perceptions could be turned completely on their head, \"I'm even dressing like a preppy bimbo for you!\"\n\n\"I think those outfits make you look sexy,\" Willow said, as she stroked her hands down Faith's silky sheer nylon legs.\n\n\"I'll dress anyway you want me to,\" Faith promised, so completely intoxicated with the pleasure Willow constantly gave her. \"I'll be your personal live action Barbie ass slut, just so long as you keep fucking me.\"\n\n\"I've never had a Barbie.\"\n\n\"Then just dress me up however you wish, and make me your anal slut Barbie or Heloise or whomever,\" Faith offered, Willow's hands on her legs feeling nice, but she desperately needed the thrill of a dick reaming her shit hole.\n\n\"Very enticing,\" Willow said, as she positioned her cock at Faith's once again virginal looking asshole.\n\n\"Just slam that big fuck dick up your Barbie's shit hole,\" Faith begged, as Willow teased her rosebud.\n\n\"Tonight we're going to the Bronze as a couple,\" Willow announced, as she slid the entire dick inside Faith's asshole in a single aggressive whomp!\n\n\"Yesssssss,\" Faith moaned loudly, not agreeing to Willow's expectations, but to the thrill of that cock sliding inside her ass... the instant pain-pleasure principal coursing through her body.\n\n\"Yes, tonight all of Sunnydale learns you're my girlfriend,\" Willow asserted, resting her hips against Faith's backside.\n\n\"Okay,\" Faith agreed, knowing that although she didn't really like the label of girlfriend (a label she'd avoided almost her entire life), she was willing to do anything to have Willow's cock in her ass on a regular basis. Plus, she didn't give a flying fuck what anyone else thought of her, and that wouldn't change if people saw her holding hands with a nerd, or even if they saw her bent over a bathroom stall with a nerd's strap-on dick pounding her ass.\n\n\"Okay what?\" Willow asked, as she did five quick thrusts into Faith's ass... the rush of being in power over her as exciting now as it was the first time.\n\n\"Okay, I'll join you on a date,\" Faith agreed with a moan, as the sudden rough thrusts sent waves both of pleasure and pain through her body. \"And you can show me off.\"\n\n\"And you'll dance with me?\" Willow asked.\n\n\"I'll eat your cunt while you belly dance if you want,\" Faith said, willing to do anything to continue getting fucked by this nerd fuck stud.\n\n\"Well, maybe we won't go that far,\" Willow smiled, although the idea of having her quietly eat her out under a table while they were sitting with her friends, or maybe fucking her in a bathroom were both turn ons.\n\n\"I'm your slut now, Willow, I'll do anything you tell me to,\" Faith said, knowing how pathetic she sounded, yet she meant it. She couldn't explain why, she didn't understand it... but God was she in major lust with Willow... and she was beginning to worry it was more than just the deep anal drillings. She was beginning to think she was falling for Willow as in being in love.\n\n\"Oh yes, I'll be sure to test that theory,\" Willow said, still sometimes thinking she was living a dream. A quiet nerd... a wallflower for her entire life... she couldn't even get an average guy like Xander to notice her... but she suddenly had one of the hottest girls ever under her thumb... even one of the strongest.... who was declaring complete obedience to her!\n\n\"Test away,\" Faith agreed eagerly, as Willow began ass fucking her.\n\nWillow fucked her for a couple minutes before thinking she should experiment with some new positions. She'd googled anal sex positions for women, and had memorized three for now, planning to explore some more as time went on.\n\nShe pulled out just as Faith's moans were increasing, and admired the huge gaping hole that had been puckered tight just a few minutes ago, \"Fuck, your ass can just open up for dick!\"\n\n\"Shove it back in,\" Faith demanded, hating the emptiness that occurred when Willow's dick abandoned her asshole even for a moment.\n\n\"Crawl onto the bed and lie on your stomach,\" Willow ordered, ready to try one or two of those new positions. This one she thought would be an impressive power position.\n\n\"Okay, but you'd better have that cock back in your girlfriend's ass before I can count to one,\" Faith said, as she quickly obeyed the redhead, using the term 'girlfriend' to encourage her to hurry up and not tease her... oddly enjoying being told what to do... but equally hating that she enjoyed being told what to do. This went against her personal credo of controlling everyone.\n\n\"Oh, I'm going to fill that gaping asshole and pound you like the fuck Barbie doll you are,\" Willow said, as she got onto the bed. \"Now spread those ass cheeks wide for your girlfriend's big cock.\"\n\n\"Oh yes, baby,\" Faith said, anticipation of having the cock buried deep in her ass again swirling inside her.\n\nWillow, recalling the position, positioned her cock at the gaping asshole, so wide her fist could easily fit inside, moved her hands to Faith's shoulder blades, spread her legs slightly to either side of Faith's legs, and slid her cock into the inviting, needy hole.\n\n\"Ooooooooh, yes!\" Faith moaned, this position allowing the cock to penetrate her at a different angle, bringing new pleasure.\n\n\"I'm going to fuck you so hard,\" Willow promised as she began thrusting roughly, her body crashing into Faith's, the cock going as deep as possible into the slayer.\n\n\"Oh yes, fuck my ass, Baby, fuck it good,\" Faith moaned, as the deep hard thrusts she was receiving in this position brought intense pleasure, making her body bounce up to meet each deep penetration.\n\n\"You like this, slayer slut?\" Willow asked, this position so powerful, so hot, and making Faith bounce up off the bed like a marionette.\n\n\"Love it Baby, you're fucking my ass so fucking good,\" Faith moaned, as her entire body bounced up and down while pleasure rose inside her... an orgasm definitely imminent.\n\n\"Your ass was made for my cock,\" Willow staked her claim, sweat beginning to roll down her forehead, as this was quite the workout.\n\n\"And your cock was made for my ass,\" Faith blurted out, as her orgasm continued its accelerate pace.\n\n\"Come, slayer slut, come, my submissive shithole slut,\" Willow ordered, wicked words flowing out of her mouth with great ease.\n\n\"Oh fuck, yes, more,\" Faith moaned, the name calling, the dominance, the deep drilling, all had her in a lustful frenzy.\n\n\"Now, you fucking lesbian ass whore,\" Willow demanded, her tone vicious as she destroyed Faith's asshole, not bothering with any artsy alliteration.\n\n\"Fuuuuuuuuuuuuck,\" Faith screamed, the deep pounding, the odd angle, the nasty demands, and the way she was being literally bounced around like she was on a trampoline, making this orgasm even more intense than her previous ones.\n\n\"Yes, slut,\" Willow said, as she kept fucking Faith for another minute before pulling out, discarding the strap-on, flipping over the bigger, stronger girl with relative ease, and sitting on her face.\n\nFaith was dazed and still enjoying the intensity of her orgasm, when she was suddenly staring into Willow's pussy.\n\n\"Get eating, slut,\" Willow ordered, \"show me your appreciation for my fucking that asshole of yours.\"\n\nMindlessly Faith obeyed, beginning to lick the pussy she was becoming addicted to.\n\n\"Good girl,\" Willow moaned, as she began to grind her wet pussy on the hot girl's face.\n\nBefore their shocking role reversal a few days ago, Faith was always the dominant. Faith did the humiliating. To everyone. Yet now the rougher she was used, the more humiliation she was subjected to, the more excited and completely intoxicated and obedient she became. Faith extended her tongue as her nerdy girlfriend ground her sweet delicious wetness all over her face, onto her lips and onto her tongue.\n\nWillow decided to find a spell to grow a real cock, so she could fuck Faith with it, and thus she could cum on and into Faith. This hot image, mixed with Faith's tongue, had her orgasm rising quickly. She reached down, grabbed Faith's head, and really began to grind on the beautiful brunette.\n\nFaith kept licking the best she could, before a gush of wetness soaked her face and teased her tongue.\n\nWillow let out a muffled moan as her orgasm hit. Glancing at the clock, she realized her mother would be home soon. A moment later, she got off Faith and said, \"You need to leave.\"\n\n\"That's it?\" Faith asked, surprised, feeling a bit like she was just being used. \"We were just getting started!\"\n\n\"I know I'm being abrupt, but my mom will be home soon,\" Willow said, gazing down upon the pussy-juice-coated face of her hot girlfriend.\n\n\"Then let's go to my place,\" Faith offered, desperate to be fucked again, one time never enough, licking her lips to taste a little more of Willow's cunt cum.\n\n\"Meet me at the Bronze at 9:30,\" Willow said, hoping to find the time to research some new magic, and perhaps to find a way of transforming her strap-on into a real dick... or just a spell that would give her a real dick by inverting her pussy, or something.\n\n\"Fuck, you really hate me,\" Faith sighed, feeling so empty without Willow's cock in her asshole.\n\n\"Not exactly. But I do like to hate fuck your ass,\" Willow said, admiring her slut and the gaping asshole that was already beginning to shrink.\n\n\"Then do it,\" Faith challenged, needing that cock back in her ass.\n\n\"I promise; I'm hoping to come up with a great surprise for you tonight, but whether I manage that or not, I'm going to fuck the living shit out of you,\" Willow guaranteed, even though she wondered who had coined such a stupid and messy sounding phrase.\n\n\"You'd better,\" Faith said, reluctantly accepting she wasn't getting ass fucked anymore at this moment, and now she'd have to spend some time with the Scooby gang tonight.",
        "\"I don't break my promises,\" Willow assured her, pulling Faith up and kissing her. \"Now get out of here before my mom gets home.\"\n\n\"Fine,\" Faith said, not really a meeting someone's parents kind of girl... yet she was disappointed at having to leave Willow. What the fuck is wrong with me?\n\nThree hours later... Willow was staring at herself in the mirror wearing only a pair of thigh highs and with an absolutely real ten-inch cock dangling between her legs. It was longer and fatter than her strap-on, and her newly discovered magic spell made it completely replace her pussy. It was so hot! As she stroked her dick... yes, her very own dick!... she felt instant pleasure coursing through her. This was both literally and figuratively quite a rush. Fuck, was she was going to astonish Faith!\n\nWillow arrived at the Bronze early, wearing a dress that was long enough and frilly enough to conceal her new secret weapon, but not by much, and picked a secluded booth with a deliciously wicked idea.\n\nFaith arrived early too, missing Willow so much... not only the sodomy... which she continued using as her excuse to continue seeing Willow and to use the swearword... well, it was one to her... girlfriend. She continued trying to deny her insatiable desire to spend every breathing moment with the nerd. So when she reached the table, Willow was already sitting there looking up at her with her geeky, cute as fuck smile, Faith's ass was already twitching for a fucking, and her heart oddly speeding up, and she asked crudely, continuing her uncaring fa\u00e7ade, \"Can we leave already, so you can drill my shit hole?\"\n\n\"No, but you can crawl under the table and between my legs while I wait for my friends,\" Willow counter-offered wickedly.\n\n\"You don't think I will?\" Faith demanded, loving to take part in daring wild encounters, and her I-don't-give-a-fuck-what-others-think attitude adding verisimilitude to that philosophy.\n\n\"Oh, I know you will,\" Willow said, before adding, \"now get down there and suck my cock.\"\n\n\"Fuck, I love when you talk nasty and tell me what to do,\" Faith said, her pussy and ass tingling with anticipation of the promised strap-on.\n\nFaith crawled under the table, not even looking around to see if anyone was watching, and crawled between Willow's legs, surprised by how dark it was.\n\n\"I have a little surprise for you,\" Willow said, as she felt Faith's hand touching her nylon-clad knee. \"Well, more of a really big surprise for you!\"\n\nFaith brought her hand to Willow's strap-on dick and gasped... this toy felt very, very real and very, very big. \"Holy shit!\"\n\n\"Like your surprise?\" Willow asked.\n\n\"Is this really real?\" Faith asked, as she stroked a very big, a very fat, and a very real-feeling cock.\n\n\"It is,\" Willow said.\n\n\"How the hell did you manage to create this?\" Faith asked, as her mouth watered. She'd never really enjoyed sucking dick, even though she was quite good at it. Usually if she did suck one, she sucked it just long enough to get it hard, wet and ready to go inside of her. But this time she was excited... this made Willow literally the perfect person... a pussy to eat, although it seemed to be replaced at the moment, a dick to suck... and, of course, pillage her asshole.\n\n\"Magic,\" Willow answered. \"You like?\"\n\n\"I love it,\" Faith said, captivated by this cock she could only vaguely see in the dark, enclosed space... just a little light coming from the dance floor... but it was undeniably huge!\n\n\"I expect you to suck it and not say another word until I tell you to, is that clear?\" Willow instructed, knowing she had a magic cock, and also somehow a magic spell over the slayer.\n\n\"Yes Baby, I'll do anything to please you,\" Faith said, meaning it. She'd never felt like this before... so consumed with lust... her desire to please and obey controlling her... a strange desire to make Willow happy lingering in the back of her mind.\n\n\"Well, get to sucking; my new organ won't suck itself,\" Willow said, just as she saw Cordelia and Xander walking towards their table.\n\n\"Yes, Baby,\" Faith said, as she opened her mouth and took her lover's cock into her mouth.\n\n\"Oooooh,\" Willow moaned, surprised by the sudden sensations from getting her very own cock sucked, which felt... very different from having her pussy licked. Not better, not worse... just very, very different.\n\n\"No Faith?\" Xander asked when he reached the table, still finding it so weird that just days after he'd fucked Faith, Willow was now dating her.\n\n\"Oh, she's around here somewhere,\" Willow said, not giving her cock sucker away just yet.\n\n\"Xander says you and Faith are a couple,\" Cordelia said, as they both sat down... that claim seeming impossible to believe. Cordelia was bi, having had a couple of nerds, a cheerleader, a teacher, and her mom's best friend all go down on her in the past few months since she'd turned eighteen... she'd wondered what it would be like to have Buffy or Faith munch on her pussy, or maybe even Willow (she'd learned that both nerds and older women were very eager to please her) begging to eat her pussy.\n\n\"We're fucking, yes,\" Willow said bluntly, wanting to shock Cordelia and Xander... Faith having awakened a dominance in her that incorporated a nasty side and a really blatant I-don't-give-a-fuck-what-others-think attitude. It was all quite liberating.\n\n\"Willow!\" Xander gasped, shocked by her sudden 180\u00ba personality overhaul.\n\n\"Shit,\" Cordelia said, suddenly impressed by the heretofore meek girl.\n\n\"What?\" Willow shrugged, \"that's what we do every day, although....\" she paused for dramatic effect.\n\n\"Although what?\" Cordelia asked dutifully.\n\n\"Mostly I ass fuck her, and then sit on her face,\" Willow revealed wickedly, and also accurately.\n\nFaith was enjoying both the hard, fat flesh and blood-engorged cock in her mouth, already imagining feeling it deep inside her ass, while listening to Willow exercising her wild, wicked tongue.\n\n\"Bullshit,\" Xander said, thinking Willow was full of it.\n\n\"You don't believe me? Hey Faith, do you like it in the ass the most, my sexy slut?\" Willow asked, peering down at her crotch, and thus also at her cock sucking girlfriend.\n\nFaith reluctantly allowed the throbbing dick to slip out of her mouth to respond, as she continued to stroke it, \"Yes, I love it the best when you fuck the shit out of my ass, Baby.\"\n\n\"No way,\" Xander said, as he bent down, raising the tablecloth to see Faith busy between Willow's legs.\n\n\"Privacy,\" Willow said, knowing it was a silly objection, considering.\n\n\"I can't believe it,\" Xander said, as he sat back up... jealous that Willow had Faith, jealous that Faith had Willow.\n\n\"Believe what?\" Buffy asked, arriving to join the conversation, unaware that Faith was sucking a recently conjured dick under the table. She had decided to wear a dress and nylons. She told herself it wasn't for Willow, it was just because she wanted to look cute... but....\n\n\"You wouldn't believe me if I told you,\" Xander said.\n\n\"Try me,\" Buffy said, having gotten to the point where nothing surprised her anymore... although Willow fucking Faith in the ass in the graveyard last night had definitely proved that theory wrong. That had absolutely astonished her!\n\n\"As we speak, Faith is under the table eating out Willow,\" Cordelia announced, wishing Faith was under the table eating her out... suddenly very jealous of the nerd she hadn't usually given the time of day to.\n\nWillow noticed, as she enjoyed having her new cock sucked, that Buffy was wearing a dress and nylons... which couldn't be to impress her, could it? Yes, she wore dresses sometimes... but she hadn't ever seen her in nylons.\n\n\"No way,\" Buffy said, that actually again surprising her. She still couldn't comprehend how Faith had ended up being fucked by Willow. If Willow was being fucked by Faith, that she could have seen as a distinct possibility, but this role reversal of the mouse ruling the lioness seemed impossible. Of course she lived in a world where the impossible became possible all the time... vampires and zombies and such being vanquished by teenaged girls... so this shouldn't have surprised her... yet it did.\n\n\"Well, that's not precisely true,\" Willow said, as the pleasure from Faith's lips wrapped around her cock was really making her feel good.\n\n\"So Faith isn't under the table?\" Buffy asked, a little confused.\n\n\"No, she's definitely under the table and between my legs,\" Willow moaned, feeling like she was going to come any second as she admired Buffy's sexy outfit. \"By the way, you look really hot tonight.\"\n\n\"Oh, it's just something I threw on,\" Buffy deflected, even though the compliment made her feel warm and fuzzy inside.\n\n\"Well, you look amazing,\" Willow said breathlessly, quite obviously about to come.\n\nUh, thanks,\" Buffy said, excited Willow had noticed.\n\nThe pleasure from having her cock sucked was suddenly overwhelming her, even as she admired Buffy's sexy attire, which she sensed was definitely for her, she moaned loudly, still maintaining eye contact with one slayer while another one sucked her dick, \"Oh fuck, suck it, suck it good!\"\n\n\"Suck it?\" All three nonparticipants gasped in confused unison.\n\nFaith devoured the cock, very impressively able to deep throat it, and eager to get her girlfriend's rocks off.\n\nWillow, wishing to continue shocking her friends, who'd always seen her as meek, or as just a sidekick, the Velma of this other Scooby group, waited until she couldn't hold back anymore, reached her hand under the table, pushed Faith off her cock, and grunted as she erupted all over her face!\n\nFaith had been hoping to swallow this new cock's very first load, but she had no say in the matter as she was suddenly coated with warm, sticky, cum. But even so, the submissive event sent waves of pleasure through her as Willow always knew just how to treat her...as her cum slut... her plaything... her fuck toy.\n\n\"Did she just come?\" Cordelia asked, \"Like a guy?!\" even though it was obvious Willow just had, and it oddly made her own pussy suddenly very wet.\n\n\"Shit,\" Xander said, watching the facial expression of Buffy's best friend as her cock had an orgasm... making his own very hard cock flinch in his pants.\n\nBuffy didn't say anything... she just watched Willow cum... curious, intrigued, confused.\n\nOnce Willow had unloaded a huge load all over her face, Faith took the dick back into her mouth.\n\nWillow opened her eyes and apologized casually, \"Sorry everyone, I just couldn't hold back any longer.\"\n\n\"So we see,\" Cordelia laughed, finding Willow's odd apology hilarious.\n\n\"Hey Buffy, it looks like you were busy too,\" Willow pointed out, noticing a small tear in her dress, acting like it wasn't weird to have a male orgasm at the table with all her friends looking on.\n\n\"Not as busy as you,\" Buffy smiled, Willow somehow still being Willow.\n\n\"Yeah, it's been quite the day,\" Willow said.\n\n\"So I see,\" Buffy said, as she finally sat down beside Cordelia.\n\n\"Come up here, Baby,\" Willow ordered.\n\n\"Sure, Baby,\" Faith agreed, her face bathed in cum, yet exhibiting no shame at all as she crawled up and took a seat beside her girlfriend.\n\n\"Is that actually semen?\" Xander asked, \"like from a pair of balls?\" even though it obviously was.\n\n\"A massive load, yep,\" Faith said, scooping some off her chin and dramatically, noisily, slurping it into her mouth for all to see and hear, and perhaps to marvel at.\n\n\"That doesn't even make sense,\" Xander said, as Buffy looked at Faith's face coated in cum.\n\n\"That's so gross,\" Cordelia said, preferring the taste of pussy to dick, and considering male cum disgusting.\n\n\"I disagree,\" Faith said, scooping some more off her cheek, and this time offering the fingerful to the uppity bitch... another girl she'd planned to top one day before her Willow flip threw all her prior plans into disarray... yet perhaps they could tag team her. She wanted to be with Willow, wanted to be her only real girlfriend, but if her Mistress was game, she could absolutely get behind some tag team domination.\n\n\"Gross,\" Cordelia repeated, pushing Faith's hand away while doing her very best not to come in contact with the offending finger.\n\n\"Your loss,\" Faith shrugged, bringing her finger to her lips and sucking the cum off of it. \"Mmmmmm, delicious!\"\n\n\"So I guess I should explain I've been exploring some dark magic,\" Willow said.\n\n\"And you found a way to give yourself a penis?\" Xander asked.\n\n\"Actually it's a big, fat, delicious fucking cock,\" Faith corrected him.\n\n\"Are you sure that's safe?\" Buffy asked, even as she wondered what Willow would look like with a cock, since she hadn't actually seen it yet. How big was it? Obviously it had produced cum. It sounded so strange, and yet she was secretly intrigued... and her pussy was very, very wet.\n\n\"Of course,\" Willow said, not that there were a lot of stories about this spell ever being used.\n\n\"Well, all I know is that nobody fucks me in the ass like my hot girlfriend,\" Faith said, loving the uncomfortable look on everyone's faces, and yet also wishing to make it clear the two of them were an item.\n\n\"Is that so?\" Xander said, a little, okay a lot annoyed, since they'd fucked just a couple of days ago.\n\n\"Look, I have to admit you were a fine fuck, Xander,\" Faith said, not at all embarrassed to admit she'd fucked him, \"but you're a sheep, while Willow is a mountain lion.\"\n\n\"Faith,\" Willow said in her usual shy and geeky tone, even as her hand squeezed her leg.\n\n\"What?\" Faith continued, wanting to make her point as clear as possible, \"Look, I've always been a top. I've fucked guys, I've fucked girls, I've fucked guys and girls simultaneously, but I didn't know I was looking for someone just like you.\"\n\n\"Someone like Willow?\" Buffy asked, trying to process what was happening between the new couple, as well as her own feelings.\n\nCordelia was bewildered... she'd always been top bitch at the school... although Faith had slightly challenged that... but now Willow stepping up? No fucking way! This had to be just a show where everyone... or at least Willow and Faith... had written and rehearsed their lines beforehand.\n\n\"Yeah, I needed to find someone who could see past my tough, don't give a shit persona, and discover the real me,\" Faith continued.\n\n\"And just who is the real you?\" Xander asked, still feeling angry and insulted, since Faith was implying Willow was more of a man than he was.\n\n\"I was a submissive slut just looking for a Mistress who could use me as a complete fuck toy,\" Faith explained bluntly, looking directly at Buffy as she added, \"being a slayer puts a girl under a lot of pressure, a lot of always being on, so sometimes it's just nice to let someone else take control, isn't that right Buffy?\"\n\nBuffy was partly listening, partly imagining Willow fucking her, God she needed to get laid, but she denied the accusation, even though it was indeed 100% true, \"What? No, not at all.\"\n\n\"Then why are your cheeks bright red?\" Faith asked. \"Are you imagining my sexy girlfriend bending you over a tombstone and fucking your athletic ass?\"\n\n\"Faith, enough,\" Buffy said, not about to let the gang know there was even an ounce of credibility in Faith's all-too-accurate words.\n\nCordelia noticed Buffy's reaction, and wondered if she could turn Buffy into her slut, just like Willow had done to Faith... it was more believable than what was currently happening.\n\nWillow too noticed a flustered Buffy, and wondered if she could have her cake and eat it too... could she succeed in fucking both slayers?\n\n\"What?\" Faith asked innocently, the cum on her face beginning to dry, and excited to feel Willow's hand slide under her dress, \"I needed someone who understood what I needed. Who saw past the fa\u00e7ade of my slayer mentality, and saw me as a person with needs.\"\n\n\"The need to get ass fucked?\" Cordelia asked.\n\n\"Oh, don't act all sweet and innocent,\" Faith said. \"You'd bend over and take Willow's dick in your asshole in a heartbeat.\"\n\n\"Yeah, right; I don't think so,\" Cordelia scoffed, even though she felt wetness leak into her panties.\n\n\"You, just like me, like Buffy, and like most strong-willed women, need to find someone, it could be a man or a woman, who won't take our bullshit, but instead will bend us over and take our shit hole, and just use it like the fuck hole it is,\" Faith said wickedly.\n\n\"This is too much,\" Buffy said, even though she didn't leave, she was somehow compelled to stay... to listen to more revelations while not giving herself away... her pussy on fire....\n\n\"Trust me, it's never too much,\" Faith said, as Willow slowly rubbed her pussy. \"Each of you needs someone to control you in the bedroom, to fuck you like you need to be fucked, to use you as the three-hole cum slut you really are... to literally own you.\"\n\nAs they listened in shock, Faith stood up on her chair, turned around, lifted up her dress to reveal she was wearing thigh high stockings, she wasn't wearing panties, and she had a prominent tattoo saying, Property of Willow Rosenberg.\n\n\"No way,\" Xander and Cordelia gasped in perfect unison.\n\nBuffy stared at it in equal shock... but was speechless.\n\nFaith wiggled her ass for a moment before sitting back down and saying, while squeezing Willow's still hard cock, \"Look, I was as shocked and surprised as you were, I mean being topped, dominated, ass fucked, name called and face sat upon by someone as sweet and innocent seeming as Willow was pretty humbling... but it was absolutely what I needed.... Ladies, accept who you are, and the truth will set you free.\"\n\nWhen no one responded, even though each seemed to be pondering her analysis, Faith continued, \"I mean there's nothing quite like being bent over, and having your shit hole just drilled and gaped.\"\n\n\"Yeah, I don't know if it's Faith's quick slayer body recovery or not, but within a few minutes after every time I ass fuck her, it's like she's a virgin all over again,\" Willow added, enjoying the stunned silence, as well as Faith's outspoken loyalty.\n\n\"Because you have so much experience in fucking asses?\" Xander finally challenged, all of this just too much for him and his threatened manhood.\n\n\"Well, not yet,\" Willow said, making eye contact with Buffy, who quickly looked away.\n\n\"And I need my asshole plundered again pretty fucking soon,\" Faith said.\n\n\"Well, I'm just happy you two are happy,\" Buffy said, trying to act casual, even as a pang of jealousy coursed through her, \"we all are, aren't we?\"\n\n\"Yeah, I've never been happier,\" Xander said, dripping with sarcasm.\n\n\"Whatever floats your boat,\" Cordelia shrugged, more focused on the possibility of turning Buffy, just like Willow had done to Faith.\n\n\"Fuck, I need this cock now,\" Faith declared to all, as she bent down, lifted up Willow's skirt and took it back in her mouth... completely shamelessly.\n\nWillow pushed Faith's head back up and said sternly, wanting to put on a show for Buffy, perhaps for Cordelia too, fucking that bitch would be so much fun, \"Did I give you permission to suck my cock?\"\n\n\"I'm sorry, Baby; I just need your cock so badddddd,\" Faith said like a bitch in heat... which... well... she was.\n\n\"Not in front of my friends,\" Willow said. \"Everyone, I'm sorry about my pet. Ever since I took her ass she's been insatiable.\"\n\n\"You're the one who turned me into a submissive, ass taking, cock begging, cunt eating bimbo slave,\" Faith said wickedly, wanting to turn Willow on while putting on a show for the others. \"Please, I need you to fuck my shit hole with your delicious new cock, and then to cum inside it.\"\n\n\"Fine,\" Willow sighed dramatically. \"Sorry, I'd better take care of her before she tries riding me right here and now.\"\n\n\"Oh, may I?\" Faith asked, willing to straddle Willow right here, and lower her ass onto the big, fat cock.",
        "\"I was trying to make a point,\" Willow said.\n\n\"Well, stick your point in my asshole,\" Faith said, \"I'm sure Xander would love to watch.\"\n\n\"Hey, don't draw me into this,\" Xander objected, throwing his hands up, even though truth be told, of course he'd love to watch that.\n\n\"Let's go,\" Willow said.\n\n\"Finally,\" Faith said, as Cordelia and Buffy moved aside, and Willow and Faith slid out from the table.\n\n\"You want to come and join us?\" Faith asked Buffy, unlike Willow noticing for the first time her fellow slayer's clothing choice. \"It looks like you're dressed for some action.\"\n\n\"No, thank you,\" Buffy replied demurely, even though a large part of her indeed did want to take part, but no way could she let any of them know... especially Faith. No way could she let the gang know her weakness. That given the chance, she would suck dick and get fucked by a man who knew how to take control... and now she wondered if she'd let a big-dicked woman do what Angel used to do to her.\n\n\"Your loss,\" Faith shrugged, taking Willow by the hand. \"I'm about to have my girlfriend's dick so deep in my asshole!\"\n\n\"Jesus, just go already,\" Xander said, this entire encounter having done a real number on his manhood.\n\n\"Come on,\" Faith said, pulling Willow away, but not towards an exit, but to the bathroom.\n\n\"Where are we going?\" Willow asked.\n\n\"I can't wait to get back to my place to have your cock in my ass,\" she said, as she pulled Willow down a hallway.\n\n\"You really can't wait?\" Willow asked with a smile, loving the power she had over Faith, and having loved every declaration Faith had made to her friends, and having loved seeing the looks of shock on their faces... and, she was pretty sure, the look of curiosity and uncertainty on Buffy's.\n\n\"I need your dick in my ass all the fucking time,\" Faith said.\n\nWillow sighed playfully as they reached the bathroom, \"You really are needy.\"\n\n\"Needy for your dick in my shit hole,\" Faith said as they entered the bathroom, where two girls were standing at the mirror.\n\nFaith ignored them, dragging Willow into the last stall, a wider one, and without even closing the door, lifted up her dress, bent over the toilet using the top for balance, and said needily, \"Just shove that cock in my ass, right... fucking... now!\"\n\n\"Holy shit,\" one of the girls said, as Willow closed the door.\n\n\"Yes, pack my shit,\" Faith said, playing on the girl's words, not giving a shit, pun intended, that they were listening, \"with that big cock you witched into being just for me.\"\n\n\"Maybe not just for you,\" Willow smiled, as she moved behind Faith.\n\n\"You want to fuck Buffy too, don't yoooooou?\" Faith moaned, as Willow slid her cock into her ass. The cock was wider than the strap-on, creating a more intense burn.\n\n\"I didn't say that,\" Willow said, as her cock disappeared inside the incredibly tight ass... her own sensations so much more intense with a real cock. With a strap-on, the fucking was about dominance, about power, about humiliation, about giving pleasure... but now while it was still about all those things, she could feel the pleasure as well.\n\n\"Or maybe Cordelia, or Xander,\" Faith continued, as this cock went deeper into her ass than the previous plastic one.\n\n\"I didn't say that either,\" Willow said, now balls deep inside Faith's ass.\n\n\"Or maybe those two girls in here we just walked past,\" Faith said. \"I bet they'd suck your dick and take it in the ass.\"\n\n\"Gross,\" the same girl said.\n\n\"Don't knock it until you try it,\" Faith called out, as Willow began slowly ass fucking her.\n\n\"Let's go,\" the girl said.\n\n\"Oh yes, fuck my ass with your big cock,\" Faith moaned, the extra girth, the extra length creating new pain... new pleasure.\n\nMeanwhile... back at the table....\n\n\"Can you believe those two?\" Xander asked.\n\n\"That was so fucked up,\" Cordelia said as she looked at Buffy, who seemed to be lost in her own little world.\n\n\"Yeah, fucked up,\" Buffy agreed mindlessly, unable to push the idea of a dominant Willow out of her head. What she saw last night was hot, and had led her to multiple self-manipulated orgasms, but tonight's new revelations had gotten her horny as fuck.\n\n\"You okay?\" Xander asked.\n\n\"Yeah, I just need to go,\" Buffy said, getting up and drifting away.\n\nCordelia, also horny as fuck, said, \"I'm outta here,\" as she was already heading to one of her pet's places to sit on her face.\n\n\"Yeah, me too,\" Xander said, more to himself, as he ended up going home alone and jerking off.\n\nBuffy was walking out when she heard a girl ask, \"They're fucking in the bathroom?\"\n\n\"Yeah, right now,\" another girl said, so Buffy mindlessly changed direction and went towards the bathroom, her head still lost in fog.\n\nAt the bathroom, she set up a closed for cleaning sign in front, then quietly walked in as she heard Faith begging for it.\n\n\"Oh yes, harder, give it to me harder,\" Faith moaned, loving this new bigger, fatter, real cock... it enhanced her pleasure greatly.\n\nBuffy quietly walked into the stall two over, closed the door, and sat on the toilet and listened, as she spread her legs and brought her hand to her very wet panties.\n\n\"You love it hard, don't you slut?\" Willow asked, shifting into dominant mode.\n\n\"I'll do anything to have your big cock in my asshole,\" Faith answered, nothing feeling better than having Willow fucking her there.\n\nBuffy rubbed herself slowly as she listened to the hot, nasty act.\n\n\"My next load is going to breed that ass of yours,\" Willow said, curious what it would feel like to come inside her... having until now only been come in.\n\n\"Breed my asshole, fill it with a massive load,\" Faith said.\n\n\"God, your ass is so tight,\" Willow said, this experience so much more intense than when wearing a strap-on.\n\n\"And your cock is so big it's tearing my shit hole apart,\" Faith moaned, her orgasm rising quickly from the deep anal drilling.\n\nBuffy bit her lip as her orgasm also began to rise, as she listened to the nasty ass fucking, imagining herself being the one getting that dick.\n\nFor a couple more minutes Willow slammed her cock deep into Faith's ass, and Faith talked nasty.\n\nBuffy listened intensely, her own orgasm rising, so desperate to be the one getting fucked.\n\n\"Oh yes, come in my ass,\" Faith begged, her own orgasm about to erupt.\n\n\"Get ready, slut,\" Willow said, feeling herself about to come.\n\nBuffy began rubbing faster, her orgasm imminent.\n\n\"Fuck,\" Willow grunted a dozen or so deep thrusts later, as she unloaded her load inside Faith's ass, which sent a rush going up her spine.\n\n\"Yes!\" Faith screamed, as her own orgasm hit the moment Willow's warm cum began filling her butt hole.\n\nBuffy covered her mouth with her free hand, as she too came from listening to the wicked act.\n\n\"Oh fuck, this is so good,\" Faith cried, as the orgasm spun through her.\n\n\"Agreed,\" Willow said as she stopped, her dick deep inside Faith's cum-filled ass.\n\n\"You know we're not done for the night,\" Faith said, enjoying the brief intimate moment as they both recovered from their orgasms.\n\n\"Yeah, I need to discover how many loads I can shoot in a single night,\" Willow said, curious what that count might be.\n\n\"And I need to learn how many different places you can shoot those loads,\" Faith said.\n\n\"Yeah, for starters, your pussy and mouth need deposits,\" Willow said.\n\n\"As do my tits,\" Faith added. \"Let's go to my place and fuck some more.\"\n\n\"Okay,\" Willow said, pulling out and admiring an even bigger gaped ass... one that looked even hotter and nastier with the white load inside of it.\n\n\"You gaped the shit out of me,\" Faith said.\n\n\"I definitely did,\" Willow did, admiring her cock work.\n\nFaith stood up, pushed Willow against the wall and kissed her, even as she felt a little cum leak out of her ass.\n\nThey kissed passionately for a minute as lovers, before Faith broke the kiss and mentioned, \"I bet you could fuck Buffy if you wanted. It's obvious she really wants you.\"\n\nBuffy's eyes went wide.\n\n\"You think so?\" Willow asked, even though she was thinking the same thing.\n\n\"I bet her cunt was leaking like crazy from all our dirty talk,\" Faith said.\n\n\"She did seem a little rattled,\" Willow agreed, as Buffy was frantically but silently rubbing herself to a second orgasm... once she had her first one, they always seemed to come fast and furious in succession.\n\n\"She even dressed up for you,\" Faith said.\n\n\"I noticed that,\" Willow nodded.\n\n\"I bet you could have her right here and now,\" Faith said, as she placed her hand in Willow's and they began strolling out of the stall.\n\n\"Think so?\" Willow asked, having been wondering that herself.\n\n\"In a heartbeat,\" Faith said, as they left the bathroom.\n\n\"Fuck,\" Buffy muttered as softly as possible, as she closed her eyes and brought herself to a second orgasm, imagining indeed submitting to Willow.\n\nTHE END of Chapter 4."
    ],
    "authorname": "silkstockingslover",
    "tags": [
        "anal sex",
        "gaping",
        "lesbian",
        "submissive",
        "ass fetish",
        "magic",
        "shemale",
        "voyeur"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/willow-s-way-ch-04"
}
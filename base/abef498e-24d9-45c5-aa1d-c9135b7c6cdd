{
    "title": "Her Eyes Did The Talking",
    "pages": [
        "This is a story of a very special 25-year old woman, the man she falls for, and her special relationship with her virtual-sister/BFF/roommate. That is all the hints I am giving, except I would say the story has primary elements of Erotic Couplings and Romance, with bits of parallels to Group Sex &amp; Loving Wives themes. \n\nThe story came out longer than I expected, as I so enjoyed writing these characters. At least for this length, it has plenty of foreplay &amp; sex. And, I have put in headings, mostly occurring at breaks in the timeline, to give you reference points if you need to read parts of the story at different times.\n\nStill being quite new to writing, I really appreciate your feedback.\n\nAnd, this is my entry for the Summer Loving 2019 Contest, so please vote at the end.\n\n---------------------------\n\n----- At the Office -- Wednesday ----\n\nAmber leaned on top of the short cubicle wall, \"So Danny boy, you gonna' make it to my party Friday evening? I know there will be girls there that will be glad to see you!\"\n\nDaniel always welcomed her confident, cheerful nature and, further, enjoyed looking at her tall, toned, well-equipped figure. He did think her name was certainly appropriate, for she had both natural amber hair and eyes. He enjoyed her friendship so much, that he had not wanted to risk messing it up by trying to date her, as that had messed up some female friendships in the past.\n\n\"Sure!\" he quickly replied, \"Need me to bring anything?\" He was looking forward to this party, as he had never been to Amber's house; nor did she seem to have many, if any, parties, to his memory.\n\n\"Nope, we have got everything already purchased. Just bring your hunky self with that big smile, sometime after 6:30 pm,\" Amber replied, \"And look sharp for the girls! You have two days to prepare. Bye!\"\n\nAmber was always good for his ego with her flirty compliments and useful insider info. Such as, Amber had recently revealed to him that his nickname among the office girls was \"Horse.\" Daniel always thought his looks were okay, but acknowledged that maybe that was why, when he had been out with a group from work, the office girls had hovered around him.\n\nHe was a bit na\u00efve, as he had never had a sister to learn about girls from, and his mom was not one to offer advice on such topics.\n\nDaniel used to have a brother, Billy, but he died years ago, when his hearing problems kept him from recognizing an approaching car, while chasing after an errant basketball.\n\nAt 27 years old, he had not had an official girlfriend for three years. He did have a number of friends for booty calls, with which he could exercise his hormones, and he actually got called by them more often than he called them. Some of them were even good female buddies for certain events. But, he was growing tired of just having only these buddies, and one night stands.\n\nSo, he decided that this Friday at Amber's was going to be a fresh start; he needed to meet different women, or take a different approach to dating.\n\n----- Amber's Party -- Friday ----\n\nWhen Daniel arrived at Amber's place, he locked his Soul Red Mazda 6, checked his clothes were straight, and went to the front door. He rang the doorbell, and Caroline, from accounting, answered the door. The bleach blond had on a gold lame dress with such an open plunging neckline that he thought more of her well-enhanced boobs were exposed than were covered.\n\n\"Hey Danny!\" Caroline said, as a huge smile bloomed on her face. She followed up that smile with a little growl, \"Aren't you looking delicious tonight! Come on in. And save me a slow dance, as my girls would really like to get acquainted.\" Daniel cleared his throat, and responded, \"Certainly, Caroline. The 'girls' have always looked very welcoming!\" She giggled, loudly and childishly.\n\nJust over a year ago, Caroline had gone from having nearly invisible breasts to ones he guessed were at least 38D's, all on her two-week vacation. Ever since, she had pranced around the office in low-cut or tight tops (or tops which had both features) while swooshing the mass of her purchased tits in front of every single, straight guy in the company, and some of the married ones too, if they drooled appreciatively.\n\nShe also liked to feign innocence as she rubbed her firm breasts against men, while she, supposedly, squeezed past them in the wide hallways at work. Caroline let everyone that was interested have a good look at her new assets (well, except for that gal in shipping who had done a hands-on check of their size, the first time she and Caroline were in the restroom together). The 'sex kitten' act was just too heavy handed for Daniel's tastes, so he had never wanted to date her.\n\nAs Caroline jiggled back into the crowd, Daniel looked around and realized the place was packed with people, many of whom he knew from work.\n\nA number of attractive girls were scattered around. The most entertaining of them to watch was a tall, dyed redhead that he did not know, who was dancing quite energetically. She had both arms swaying over her head, while wearing red short shorts, and a white tube top over her ample breasts. Her protruding nipples swayed to &amp; fro under her skimpy top, threatening to burst out with every move. Her height and ample, athletic build reminded him of Amber, and he wondered what Amber would look like dressed in the dyed-redhead's skimpy clothing.\n\nDaniel next noticed a number of lingering, female glances coming his way, with a couple girls trading the glances for direct eye contact and adding big smiles. He smiled and nodded back to the latter two, neither of which he recognized from the office.\n\nAmber's large living room was cleared of most of its furniture, with the hardwood floor serving as the dance floor. The open concept home had the family room next to the living room, and many people were seated or standing in there, as well as into the adjacent kitchen.\n\nDaniel had heard the music from outside, but only now realized how well sound-insulated this home must be, as the music was much louder inside, with a strong bass being pumped out.\n\nAs his eyes continued to roam, he noticed a girl standing next to the end of the stub wall between the living room and family room. Well, standing was not quite accurate, as she was swaying to the beat of the music. She was a strawberry blond with large wavy curls in her long hair. Her face was not a knockout, but her face wore a small, contented smile on her well-balanced and very warm features. She had modest, but full breasts that swayed lightly, matching her movements.\n\nHe estimated she was probably 5'5\", without her platform sandals. She was dressed simply, in a satiny wrap dress with spaghetti straps and a fairly low-cut front. The dress seemed to be a deeper blue with large orchids printed on it, though from his distance and the lighting, he was not sure of the color.\n\nHer eyes were down, so he was able to keep watching her, without being obvious. While the other dancers were wiggling, shaking, and twirling, this strawberry blond was just doing her swaying, but it was as if her soul was in her moves.\n\nHer movements were lovely and fluid, and they carried through her hair and dress. Her hands lightly held the hem on each side of her nearly knee-length dress, and they swept the dress for &amp; aft, adding to the flow of her swaying.\n\nLost in his thoughts of watching the swaying girl, he was startled when Amber bumped his shoulder, and spoke loudly, over the music.\n\n\"Hey, Danny. Glad you made it! Drinks are both in the kitchen and on the patio, off the family room. I have already fielded several questions as to who the stud is that just came in, so you have been noticed. Want me to make some introductions for you?\"\n\n\"Uh, no thanks,\" he said, \"But can you tell me who is the girl in the blue dress over there; the one swaying to the music?\"\n\nAmber's smile changed from that of the bubbly host, to a pleased, happy smile. \"That is Kaitlyn. She is my roommate, and I think you would find her VERY interesting.\" Amber added a little wink after resting her palm on his forearm. Daniel watched Amber's tall, goddess-like figure as she went off to greet others, and he wondered what her emphasized \"VERY\" could mean.\n\nDaniel looked around the room some more, studying all the scantily clad girls, mixed among guys in tees or polos, mostly with shorts. He felt a bit overdressed in a freshly pressed short sleeve shirt, Docker slacks, and loafers. He was just thinking about getting a drink when a waiving Caroline caught his eyes, and she, then, pointed to the dance floor. He had not realized it was a slow song, but felt he had to be honorable about his earlier agreement to dance, so he moved to the dance floor.\n\nCaroline joined him there, and predictably planted her chest against his, her nipples getting hard as she rubbed against him. Then, with the same growl, she said, \"You know, if you ask me out some time, you could get to know me a LOT better!\" and she added emphasis to the word 'LOT' by pressing against his groin.\n\n\"I will keep that in mind,\" he replied, hoping he sounded reasonably convincing without sounding eager. As they slow danced around the floor, they came close to Kaitlyn, and when he looked at her, she was looking right into his eyes. Her warm eyes had the same lake blue color as her dress. Her eyes followed his until his dancing turned him away. He quickly turned Caroline, who was cooing contentedly, so he could look back at Kaitlyn, who was still following his eyes, but now her eyes seemed to be smiling at him. He responded to her with a big smile and saw her return his smile.\n\nShortly, the song ended, and Danial walked Caroline across the floor to the area where she had been standing before their dance. \"OOohh, only one dance?\" she purred.\n\n\"Maybe another later,\" he offered. The dance floor had filled up, so he moved off along the side, returning a few female smiles. He found a place to stand, but it was across the floor from Kaitlyn, and his view of her was blocked, particularly by the tall redhead, who was at the moment, pulling up her tube top.\n\nWhen Kaitlyn came into view, Daniel saw she was looking around, while still swaying. When her eyes found him, their roaming stopped, the smile returned, and her eyes stayed locked on him. With the ebb &amp; flow of the dancers, his view of her was intermittently blocked, but every time she came back into view, she was looking at him with the same glowing expression.\n\nDaniel felt a little uneasy with her constant attention on him, but at the same time, he wanted to stay looking at her sweet features as well, and she certainly had his curiosity working overtime.\n\nAfter both the current and next songs had ended, he decided it was time to satisfy his curiosity and maybe get drink. As the crowd flowed away from the dance floor, he worked his way across towards Kaitlyn.\n\nHe saw her eyes take on a distinct twinkle as he approached, whereupon, she extended her arm out, level with her shoulder, and with her hand open, palm up.\n\nHe lightly took her hand.\n\nShe immediately led him onto the dance floor, looking back at him with that twinkle. Before he could introduce himself, another dance song with a strong beat started up, and Kaitlyn started dancing.\n\nHer movements were more vigorous than when she had been stationary, with greater hip movement, and her hands sometimes wove above her head, but the basic movement was the same swaying, just amplified.\n\nHer eyes stayed on his throughout much of the song. The times they weren't on him were when she had turned her back to him, to dance in front of him.\n\nHe watched as her lovely rear swayed in front of him. He saw her hair extended to about the bottom of her shoulder blades, and the lovely reddish blond color perfectly matched the color in the center of the orchids printed on her dress.\n\nWhen the song stopped, he bent down towards her ear, which was about six inches below his, to introduce himself.\n\nBefore he got a word out, she pulled back a little from him, and placed her index finger, delicately, across his lips.\n\nAs he paused, still perplexed, the music started up again, with a slow romantic song.\n\nShe looked a bit thoughtful, as if trying to listen carefully for something. Then, her smile broadened, and she put her hands around his neck and started to sway gently.\n\nDaniel was not going to turn down this invitation, and placed his hands on her waist, feeling her slim frame through the thin material of the dress. He started moving to the tempo of the music.\n\nShe changed the speed of her swaying to match his movements.\n\nHe looked down to see her looking up at him, and he saw how truly blue her eyes were. He thought these were the sexiest eyes he had ever seen, as she blinked slowly.\n\nShe closed her eyes, and placed her cheek against his chest, as she swayed along with him.\n\nHe enjoyed the feel of her face against him, and took in the light floral fragrance from her hair.\n\nHer hands left his neck and moved down inside his arms, and then wrapped around his back with her hands cupping his shoulder blades.\n\nHe leaned his head down to rest on hers; her fragrance even stronger this close to her.\n\nKaitlyn's fingers splayed out, over his back.\n\nHe was relishing the feel of her body against his, when the song ended.\n\nHer swaying continued for a moment after he had stopped moving.\n\nDaniel was about to ask Kaitlyn if she would like to get something to drink.\n\nBefore he could, she took his hand and started to pull him through the crowd. Amber saw them as she came out of the kitchen, and Amber smiled and winked at Kaitlyn, who then playfully skipped for a couple steps.\n\nAs Kaitlyn cleared the crowd, at about the edge of the kitchen entry, Kaitlyn looked back at Daniel, with that twinkle in her eyes, and started to lead him down a hallway. They weaved around several couples; the first two couples talking, and the last couple locked in an embrace. Her head turned towards the last couple for a moment, and then she looked backed at Daniel with a playful twinkle in eyes now.\n\nHe was thinking that she must want some privacy for a kiss, as they reached the end of the hallway, where there was a door with a paper sign taped on it, which read \"OFF LIMITS.\"\n\nShe opened the door.\n\nHis mind actually focused enough to remember that she lived here; this must be her room.\n\nShe pulled him into the room about five feet, then released his hand and walked around behind him. Her warm eyes locked on his when he turned to face her.\n\nShe put her hands behind herself and felt around until she found the door knob. She backed up slowly, closing the door as she moved. After the door had closed, there was a metallic click, as she twisted the lock in the center of the door knob.\n\nShe reached down, and removed her sandals.\n\nHis puzzled mind must have showed on his face, as she swayed slowly up to him, with her hands still behind her back, and lightly biting her lower lip.\n\nHis mind was caught between conflicting ideas, wondering if what he thought was happening, really was happening or not, as it was hard to believe. He had told himself that he was going to get away from one night stands, but this girl was so different, he had to know how this night would turn out.\n\nWhen Kaitlyn was right in front of him, her arms came around to encircle his neck. She pulled herself up on her tiptoes, slowly closed her eyes, and placed a light kiss on his lips.\n\nDaniel was amazed at the delicacy of her touch. He thought, \"If ever a kiss could be said to be whispered, that was it.\"\n\nHis manhood was quickly rising to prepare for what it wanted to happen.\n\nDaniel's mind was racing with questions: How should he respond to all this; who did she expect him to be? He looked down at the ever present smile and those wonderful eyes.\n\nHe thought of those writers that talked of being lost in the bottomless pools of a woman's eyes. He had always thought it was just writer's license, but faced with Kaitlyn's eyes, he realized it was entirely true.\n\nHe slowly put one arm around her back, and fixed on her eyes so that he could absorb her reactions.\n\nShe gave a little tilt of her head, and her eyes closed for a couple seconds, before they reopened with an even softer look than before.\n\nHis other hand came up to gently brush her cheek.\n\nShe closed her eyes and tilted her head further, exposing more of her neck.\n\nDaniel took the offer, and ran his hand down the side of her neck, and then curled his hand behind her neck.\n\nHe lowered his head and placed a gentle kiss upon her smiling lips.\n\nShe readily responded to his kiss with her own eagerness.\n\nHe was amazed at how soft those lips were. He had never felt anything like them. Really, he had never experienced anything close to this whole evening, but he was eager for the experience. He slowly parted from her lips.\n\nShe lazily opened her eyes.\n\nHe truly saw a smile in them. He finally decided; she must want a wordless seduction, with sensual gentleness.\n\nHer hands left his neck and her arms pulled in between his arms. Her hands found his top shirt button. Never taking her eyes off of his eyes, she leisurely worked her way down the row of buttons.\n\nHe slipped out of his loafers.\n\nShe started to work his belt buckle loose. Then her smile broadened as she lowered his zipper, brushing his hardness with her movement.\n\nHe stepped out of his pants, after they had fallen to floor.\n\nHe looked in her happy eyes, and wondered how his eyes could ever answer hers, in all the ways her eyes spoke to him. It was a new language he wanted to learn.\n\nHe stood there in his boxers, and took in all the warmth in her face. That face was a wondrous mix of happiness, contentment, calmness, mixed with hints of desire and wisdom.\n\nA happy smile broke out on his face as he looked at her.\n\nHer eyes took on a bit of a look of mischievousness, and then her eyes dropped, as she reached for the tied bow of the sash that held her wrap dress closed.\n\nDaniel's hand reached out and stopped her hand.\n\nShe looked up at him with a slight question and some concern in her face.\n\nHe smiled as his hand waited, situated on top of her bow.\n\nKaitlyn's hand slid away and she smiled. The mischievous look in her eyes returned, and those eyes followed him as he walked around behind her.\n\nHe placed his hands on her hips.\n\nShe pushed her hips back a little and sashayed her sassy butt across his boxers and their enclosed manhood.\n\nDaniel moved his hands up and started to pull on the ends of the sash's tied bow.\n\nKaitlyn looked down to watch his hands work. She stayed watching as the bow came undone, and as he let the ends of the sash drop loose.\n\nStill with her back to him, she reached across to her left and grasped the loose edge of the dress. Next, she swung the front panel of her dress to her right side, and then just stopped, holding her hand near her right shoulder.\n\nHe reached over her shoulder with his right hand and took the dress from her hand.\n\nShe dropped her arms down to near her sides.\n\nDaniel used his left hand to brush the spaghetti straps off of both her shoulders, holding on to the left strap as he started to slowly ease the dress down her back. He took in her lovely shoulders. As he lowered the dress further, he confirmed she had not worn any bra.\n\nAs the dress reached her hips, she slipped her arms out, and he took in her smooth back and gently tapered waist. From there, he simply pulled the dress away, set is aside, and dwelled on the pleasing thought that she wore no underwear at all.\n\nShe maintained her position as he moved to snuggle up behind her, sliding his arms under her arms and then wrapping his arms around her, under her breasts. His firmness pressed against the fabric of his boxers, and rested between the upper halves of her buttocks.",
        "He felt her take in a sudden breath, hold it for a moment, and then let it out, contentedly.\n\nHer head tilted back, to be next to his. Her arms came up so that she could put her hands in his hair.\n\nHe drew his hands back to her sides, and then eased his hands up to cover her breasts.\n\nHer back arched a little, and she leaned back into him.\n\nDaniel slowly fondled her breasts, finding them nothing like he expected or had ever experienced. Her breasts were so soft; they were like two little down pillows.\n\nAs her fingers played in his hair, he searched for her nipples, and felt her hips start to move against him. In his search, he felt another soft, small mound at the center of each downy soft breast. In the center of each of these smaller mounds, he felt a hard button, but it barely projected outward. He assumed she must have puffy nipples, though he had never experienced them before.\n\nHe ran his palms down her flat stomach and used his fingers to frame her vulva, while his thumbs brushed her neatly trimmed and baby soft pubic hair.\n\nHer hands fell from his hair, her back quickly straightened, and her legs began to quiver.\n\nDaniel nuzzled her neck, through her hair.\n\nKaitlyn sank slightly into his arms, as her quivering legs sagged.\n\nDaniel moved his hands back to her hips, and used the leverage there to turn her to face him.\n\nHer eyes found his, and he saw so much pleasure registered in those blue eyes.\n\nHe wrapped his arms around and clasped her petite, firm butt, before he leaned down to kiss her.\n\nHer lips raced to meet him halfway, and they locked in a much firmer kiss, with the tips of their tongues brushing each other's lips.\n\nAs they kiss went on, she slid her hands between them and under the waistband of his boxers. Her soft fingers wrapped around the top of his cock, trying to reach around his girth. She failed to touch her opposing fingers.\n\nHe gasped in her mouth.\n\nShe broke the kiss and looked up to see his contented facing looking down at her.\n\nShe moved her hand further down his thick shaft, and then bit her lower lip.\n\nShe moved her hand down a third time, reaching the base of his long shaft, and her eyebrows rose in the center, in an anxious expression.\n\nShe released him, and then pulled his boxer's waistband out until it cleared his erection. As she knelt, to slide his boxers to floor, she felt his hands slide off her butt and up her back.\n\nShe stepped back, and Daniel saw, for the first time, her rosy, puffy nipples, strawberry blond patch, all on a wonderfully proportioned body. And he noticed the sparse freckles that his mind had not even registered before.\n\nHe reached and flipped off the light switch for the overhead light.\n\nHer hand caught his arm, still on the light switch, and her breasts brushed across him when she did.\n\nHe took the cue, and turned the light back on. Then he reached down to his pants on the floor, and fished out his wallet.\n\nAs he unfolded his wallet and reached towards the money in it, her smile faded.\n\nHe withdrew a wrapped condom from behind the bills.\n\nHer smile flashed anew, as she saw what he held. She gleefully pulled it out of his hand, and stuffed it back into his unfolded wallet. Then she pressed her hands around his, to close the wallet.\n\nHe smiled, broadly, and then picked up their clothes, setting them on a chair. He set his wallet and wristwatch on her desk.\n\nKaitlyn bounced to her bed, and then folded down the bedspread and sheets, all the way to the footboard. She lain on the far side and held her hand out for Daniel to join her.\n\nHe settled in next to her lovely body, enjoying the contact of her warmth, her smooth skin, and her gleaming eyes.\n\nWatching her watch him, he started to run his hand down her sides, her hips, and almost to her knees, before he reached the limits of his arm's length.\n\nShe responded with fluid motions of arching, shifting, and raising her legs to allow him to explore further down her legs.\n\nHis hand continued to roam down, all the way to her foot, and then up and across her stomach, ribs and across those so soft breasts, as he kissed her.\n\nShe quivered at his touch, and sank into his kisses.\n\nHe gently gripped one breast, and dropped down to kiss it, plus lap his tongue around it.\n\nHer back arched.\n\nHe thought he had never enjoyed touching anyone so much, as nearly every new touch he placed on her skin was answered by her body with wiggles, or quivers, or twitches, plus those liquid blue eyes.\n\nHe treated the other breast with equal attention, as well as stopping to trace lines through the freckles in between.\n\nHer breathing gained speed and her hips began frequent shifting.\n\nWith other girls he had been with, in this amount of time, a girl would have dropped to her knees to prove how well they could inhale his cock. But here he was with Kaitlyn, wanting this touching to last and last, while watching her wonderfully warm face losing its focus as the pleasures he gave took away her control.\n\nHe took his time, kissing her neck, using his tongue to trace around her ear lobe, across some freckles, and even kissing her eyes when they languidly closed.\n\nDaniel propped himself up on one arm, and locked onto her eyes. Then he slowly slid his hand down her stomach.\n\nHer body arched under his hand, the arch from her moving to follow his hand downward. He saw her eyes grow larger and her upper chest and neck were turning crimson. He was getting lost in those lake blue eyes, when they slowly closed in response to his hand reaching her baby soft pubic hair.\n\nShe dropped back onto the bed, and spread her legs in welcome.\n\nHis hand covered her vulva, and a finger slipped between the lowest part of her inner lips. He drew one finger across her wetness and then dragged her slickness up across her clit.\n\nThe smile left her face, and her mouth fell open. Her fingers danced around, erratically above her breasts; her face tensed; her whole body jolted sharply and then shuddered...more than once.\n\nHe was stunned. He had only touched her there once, but she seemed to have orgasmed. He watched the lovely emotions cross her face, which eased from tension to bliss.\n\nShe finally opened her eyes. Her look wandered around, not seeming to focus, until she found his face. Then her eyes glowed with utter pleasure, and a pleased smile spread across her face.\n\nDaniel looked at her, loving her seemingly satisfied delight, but still wondering if she had actually orgasmed.\n\nShe nodded happily, recognizing the question on his face.\n\nHis smile grew bigger. He knew this night's goal; he would see how many times he could create an orgasm in this amazing creature.\n\nHe rested against her, feeling her body occasionally reverberate with small aftershocks. He used the time to formulate his plan.\n\nHe got up, and then answered her curious eyes by coaxing her to roll onto to her stomach. After she did, he had Kaitlyn put her arms out from her sides, and moved her lovely, wavy hair to one side.\n\nHe took one finger, and touched the top of her neck. Then he, gently and slowly, drew the finger down her spine to her tail bone.\n\nHer forehead pressed into the pillow, her fingers curled to grip the sheets, and her hips rolled upward, as his finger ran down her.\n\nHe stood over her and placed both his palms and fingers around the upper sides of her ribs, his fingertips brushing her squashed breasts. Then he drew his hands down her sides, past her hips, and onward to her ankles.\n\nHer legs spread slightly, her shoulders tensed, and her hips rolled the whole time.\n\nHe ran his hands up the inside of her legs, just skirting her labia.\n\nHer fingers clenched and unclenched. Her hips rolled high and thighs spread, clearly presenting her glistening pussy.\n\nHis hands rolled over her buttocks, and smoothly slid up her back.\n\nShe melted back onto the mattress, her hips shifting, side to side.\n\nHe kept his hands traveling around her body for at least another five minutes. Sometimes he kneaded her muscles, other times ran his whole open hands over her, often accenting his touch with feathery brushes of either his fingertips, or from the backs of his fingers.\n\nHer body never stopped squirming, rising, and momentarily tensing. Her breaths grew bigger and more frequent.\n\nDaniel loved what he was doing to her, and he gained creativity with everything he tried. He felt himself still quite aroused, but had no immediate desire to enter her or to reach his climax. He thought he could keep touching her for hours.\n\nHe coaxed her to roll onto her back, but had to wait a moment for her to recognize his request, and for her languid response.\n\nKaitlyn slowly stretched her legs out, moved them apart, and then sighed, heavily.\n\nHe saw her eyes sparkle with lust and pleasure. He put his hands on the back corners of her jaw and lowered to kiss her. He offered his tongue and then ran it around the inside of her lips.\n\nHer chest heaved and her tongue brushed his, welcoming it as it explored.\n\nRising up from her, he let his hands slide off her jaw, down her freckled neck, over her breasts and stomach, and then brush her pubic hair, before traveling on to her feet.\n\nHer back arched, her hips rose abruptly at the touch of her pubic hair, and then she sank, lazily, as his hands continued towards her feet.\n\nDaniel started to kiss the soles of her feet while massaging her toes.\n\nKaitlyn's knees twitched and bent, pulling him slightly forward, and then her legs spread a little further apart.\n\nHis hands slid up to her inner thighs, surrounded her outer labia, and he started to massage them, up &amp; down.\n\nHer stomach muscles rolled, her breathing halted &amp; restarted, and her fingers clenched the sheets, firmly, and then released it to start their erratic dancing in the air.\n\nHis thumbs dragged through her moisture, and then up her, inside her labia, and then surrounded her clit. He massaged it gently, between his thumbs, knowing what to expect next. He watched her face intently for the 30 seconds, or so, that it took.\n\nThe crimson on her chest &amp; neck brightened; she pursed her lips tightly; her breathing stopped as her neck arched and her shoulders rose. Then her eyes went wide as her body froze for a moment. Then her legs started quivering. Several sharp jolts shot through her as her mouth fell open. Finally, her body sank back to the bed and she started breathing, rapidly.\n\nHe slowly stroked her body, feeling the internal quivers lessen. He saw her eyes lock on his as she raised her head. He thought of fire on water, as the blue of her eyes was lit by the fire of her passion.\n\nHe moved to stand beside her, and started kissing her heaving breasts. Then, he started kissing down her stomach, with its muscles still tight and rolling at his touch. He ran his tongue around her pubic hair, and was just starting to slide his tongue down her center, when he felt her grasp his cock, quite firmly.\n\nShe saw Daniel look at her, and she gave him an anxious, desiring look, as she spread eagled her legs. She stretched her free arm out, with her palm up, positioned over pussy, beckoning him between her legs.\n\nHe moved over her, carefully, as Kaitlyn sat up slightly, but did not let go of his cock. When he finally had himself located between her legs, he took up a position on his knees and hands.\n\nShe put both hands around his shaft, and then rolled her hips up so that she could coat his large crown with her wetness. Then she positioned him at her opening, and gently pulled him down, into her vagina.\n\nDaniel saw her concerned expression, her closed eyes, and how firmly she was biting her lower lip, while holding her breath. He paused to make sure she wanted more of him inside her.\n\nAfter a long moment, Kaitlyn opened her eyes and started breathing in short huffs.\n\nAfter a few moments, he saw her face relax, her eyes took on a wicked sparkle, and she rolled her hips up further, pushing him in another inch. Her saw her eyes close, briefly, and a gentle wince passed across her face.\n\nShe took her hands off his shaft and reached up to spread her lush hair out behind her head, before returning her head to the pillow.\n\nWhen she looked at him with a smile and nodded, he pushed in another inch. He added the fourth inch when her fingers went to his waist and lightly pulled him closer.\n\nHer mouth formed an \"Oh\" when he slid back out of her. She used her fingers to signal him to please reenter her, as she lowered her hips back to the mattress.\n\nDaniel looked down to see about half of his shaft coated in her wetness, and he starting to pick up the lovely scent of her, too. He slid back into her, further than before.\n\nHer back arched as she felt him spread her.\n\nHe watched her face as he continued to sink into her. When he had less than an inch to go before he was fully exploring her depths, her hands gripped his sides, and pushed for him to halt.\n\nBiting her lip again, she locked on his eyes, and slowly rolled up her hips. She winced at the pressure he had hit within her. She worked slowly, rolling her hips, until her body finally cleared the way for his full length. She let her grip on his waist relax, and then her hands fell away.\n\nWhen he felt her take his full length, and her grip ease up, he started in with long, slow strokes. He had never felt a girl that was this silky smooth inside. Also, for the first time, he could feel ripples within a girl, as he stroked her.\n\nHer eyes tried to stay on his, glittering in her pleasure. However, her gaze kept wandering off, as the sensations he created flowed through her.\n\nHe was only a dozen or so strokes into pleasing her, when he saw her fingers starting their dancing, and the crimson blush returning. He felt her stomach roll against his. He felt her knees rise up, to press against his sides. He slowed his strokes further, but increased the length of each, by fully sliding out of her, then pushing back through her opening, before ending pressed hard against her.\n\nHer hips fell into a rhythm with his strokes; her head began rolling side to side; her fingers danced faster between them, as if trying to touch him, but unable to manage even that little bit of control.\n\nWhen he felt a small jolt, he buried himself in her and held there. Big jolts followed, and he fought to stay within her, at first, as she bucked, arched, and squirmed. Then he felt something amazing. Her vagina clamped around his shift, so firmly, that he could almost not leave her, if he had tried. He waited, held there, a long time, as all her shaking and twitches slowly ebbed.\n\nShe finally opened her eyes, fought to focus, and then found his face. When she did, she took a couple deep breaths, and then planted a hard kiss on his lips as her fingers wound through and gripped his hair.\n\nHe had never felt a more passionate kiss. He sank into her passion, pressing his full body on hers and feeling her heaving chest.\n\nHer hands finally released his hair, and she lightly pushed him up, so that his chest rose off of her.\n\nDaniel gazed down and saw the most mischievous smile, and the most devilish twinkle in those amazing eyes, that he had seen yet. He felt her release her internal grip on him.\n\nHe took the cue of her releasing him to resume his slow, deep strokes of her.\n\nHer back arched a bit, as her breathing stopped.\n\nHe got in few lovely, smooth strokes, before she played her ace in the hole.\n\nShe resumed breathing, lowered her back, and gave him a wink.\n\nHe felt her tighten around his shaft. Not as solidly as before, but certainly a firm grip. He knew his plans would be out the window at this point, for he was not going to last too long, with what her taut, silky tunnel was doing to him.\n\nShe watched his concentration start to wander; his eyes closed longer each time. She smiled wickedly.\n\nHe stroked into her a number of times, but a bit more cautiously, as he tried to maintain enough control that he could try to bring her with him, to be joined in that moment.\n\nShe maintained her grip, but other muscles of hers were taking on a life of their own. Her breathing huffed, with small \"whooshes\" coming out of her rounded lips, which had lost their smile. Her back stayed arched off of the mattress as the sensations surged through her, from each time he plunged into her depths.\n\nHe felt her back sink down, and then pull her legs back up, against his hips. He saw the crimson color spreading on her; her neck muscles &amp; shoulders tensing, and her hips twitching. He felt her grip of his shaft soften, and he recognized that he had little time left.\n\nHe ramped up the speed of his strokes, slamming against her, again &amp; again.\n\nHer breathing ceased; her eyes froze open, wild and unfocused; she could not control her grip on him any longer, nor any other muscle in her body.\n\nHe hoped this was it for her, as he had only a moment left, which he used to take in the wild look on her face; the feel of her shaking thighs; those dancing fingers. The moment passed in an instant, as he felt his face contort, the electricity in his groin, and then his strong pulses exit into her, while he held himself firmly against her hips.\n\nHis final swelling, his depth within her, and the added warmness he sent into her, brought sensations beyond what Kaitlyn could contain. Her mouth went wide open; her legs captured his, holding him firm to her. She shook, violently; her hands desperately grasped his back, then her whole body tried to curl up around him.\n\nDaniel struggled through staying deep within her writhing, shaking body, as he tried to control his own breath, and further tried to maintain eye contact with this wonderful being. Her felt her pulsing, rhythmic, clamping on his shaft.\n\nIt took some time for them both to return to regular, though rapid, breathing. The whole time, their delighted eyes stayed locked, and they both grinned like idiots.\n\nFinally, his softened shaft oozed out of her, and he saw her saw face take on a playful pout. He let out a long exclamation of \"WOW!\"\n\nShe twisted her upper body under him, reached into the drawer of the nightstand and withdrew a notepad and pen. She quickly drew something with her left hand, and then turned the notepad to him.\n\nHe looked at the notepad and chuckled as he saw five giant exclamation points, each drawn with a heart replacing the dot at the bottom. He smiled broadly, thinking it was such a delightful bit of humor and passion, for her to have drawn that image. And how appealing it had been for her to play silent all this time, even through multiple orgasms...\n\nHis brain suddenly skidded to a halt, \"...Silence?...Writing?...NO!...It can't be...Can It?!\"\n\nKaitlyn saw the look on his face suddenly shift to confusion, or even desperation, and her smile faded.\n\nDaniel's mind raced back through the years, thinking of how he had talked to his younger brother, Billy.\n\nDaniel looked at her concerned face as he sat up. He brought his hands up, and slowly signed, \"Are you deaf?\"\n\n\"Yes, and mute, too,\" she signed back. Her face brightened with hope, and she watched, intently, his stunned face, knowing that the next moment meant everything.\n\nKaitlyn saw a look of clarity arrive on his features, and a smile start to grow.\n\n\"W-O-W\" he signed, in individual letters, as he was pretty rusty with sign language, and his vocabulary had never been that broad.\n\nHer smile grew, cautiously. \"O-K?\" she signed.\n\nDaniel gave her a contented smiled, looked into those lake blue eyes, and then brushed her hair away from both sides of her head. He reached down to one ear, and gently kissed it. Then he repeated the kiss on her other ear. Next, he put his hand behind her neck, and added pressure to her jaw with his thumb, to have her tilt her head back. His next kiss was planted softly on her freckled throat. He let her head drop back down, and delicately kissed her lips.",
        "She felt his lips leave, and the biggest smile she had ever felt blossomed across her face, while she watched Daniel rise up and clumsily sign, \"Very O-K.\"\n\nKaitlyn grabbed his neck, pulled herself up against him, and kissed him lavishly.\n\nHe reveled in that long, playful kiss, while so many questions and thoughts played through the background of his mind. He finally pulled back, looked down at those sparkling, blue eyes, and knew he wanted to stay lost in them.\n\nWith a buoyant gleam on her face, she quickly signed, \"I can read lips, pretty well.\"\n\nPuzzled, he signed back, \"Slower, please.\"\n\nShe chuckled silently, and repeated what she had said, in a more deliberate manner.\n\n\"Good\" he spoke. \"I would like to talk a lot with you, but it is pretty late now. May I stay with you tonight?\"\n\n\"Y-I-P-P-E-E-!\" was her immediate reply. She pointed down between them and signed \"W-E-T.\" Then she scooted out from under him and saw him drop onto his side. She went to the desk in her room, and reeled off a couple sections of paper towels from a roll in a drawer. She came back, cleaned the bed as best possible, as well as him and herself. She turned off the light, felt her way to the bed, climbed in, and then wrapped herself tightly around him.\n\nThe last thing Daniel remembered that night was his stroking the wavy hair along the side of her face, and feeling her respond by snuggling her face against the side of his chest.\n\n----- Next Morning, After Amber's Party -- Saturday ----\n\nDaniel awoke to light knocks on the door. Before he could even respond, his awareness of the quiet after last night's party, got his attention. This not being his room, he waited a moment for Kaitlyn to respond first...then his error became obvious to him.\n\n\"Come in,\" he said.\n\nThe door eased slightly open, and Amber's face shown through the narrow gap. A smile emerged on her face. \"Anybody want breakfast?\"\n\nDaniel smiled back, as he said, \"Sounds good to me.\"\n\nFeeling his chest reverberate from the talking, Kaitlyn burrowed out from under the sheets.\n\nAmber's smile broadened as she saw a disheveled mass of strawberry blond hair emerge from under the sheets, below Daniel's chin.\n\nKaitlyn swept her hair out of her face. She looked at Daniel's face, and saw him mouth \"Amber\", as his face nodded towards behind Kaitlyn. She quickly rolled over, the sheets sliding off her naked upper body. She grinned at Amber, and then signed \"Thank you!\"\n\n\"You are welcome,\" Amber happily replied. \"Unless you two have some unfinished business, how about we have breakfast in 20 minutes?\"\n\nKaitlyn turned her head to look at Daniel and saw him wink. She turned back to Amber, and nodded sharply. Kaitlyn's wavy locks fell back over her face.\n\n\"Twenty minutes,\" Daniel chuckled, as he swept Kaitlyn's hair back off of her face. He saw the door close, and then he moved back to let Kaitlyn drop onto her back. \"Good morning, beautiful,\" he whispered, as he bent down to kiss her, watching those wonderful eyes close, slowly. He pressed against those oh-so soft lips, and then ran one palm over her breast and down her stomach.\n\nHer hand locked onto his wrist, stopping him. As his face pulled back, she tapped his nose twice with a free finger, and then, with a sparkle in her eyes, signed \"Breakfast...you dog!\" She replaced her hand on his hand and lifted it, from covering her navel. She sat up, turned, and placed her legs on the floor. As she stood, she felt his hand drag down her back and grab her butt. Kaitlyn playfully swatted his hand away.\n\n----- At Breakfast -- Saturday ----\n\nThey arrived in the breakfast nook with Daniel in his rather wrinkled clothes from last night, and Kaitlyn wearing a tangerine-colored, silk kimono robe, loosely tied in front. Amber looked surprising neat, with brushed hair, and wearing a jogging suit.\n\nDaniel &amp; Kaitlyn looked around, seeing the kitchen counter covered in glassware, and two large open trash bags in the one corner, showing mostly crumpled cocktail napkins, paper plates, and crushed beer cans. The rest of the house was surprisingly clean.\n\n\"This place is so clean, didn't you get any sleep?\" Daniel asked Amber, as she finished plating breakfast.\n\n\"A few hours,\" Amber replied, smiling. \"But it is almost 10:30, sleepy heads.\"\n\nStartled, Daniel looked at his bare wrist, then at the clock on the wall. \"Good point,\" he responded. He felt a tap on his nose, and looked down to see Kaitlyn's eyes smiling, and saw her sign, \"Not too late for...\" as she moved her kimono aside to expose her breast. He sighed, and signed back, \"Dog\" as he drew her kimono closed, and as Amber brought the plates of food to the table.\n\nKaitlyn happily pranced over to her chair between them, and plopped down. She started in on her plate of scrambled eggs, bacon, and sourdough toast. Her eyes went from Amber to Daniel, back and forth, until Daniel spoke.\n\n\"I think you had something to do with this, eh, Amber?\"\n\n\"MMMmmm...,\" Amber mumbled while biting her toast.\n\n\"That time in the office you signed to me was a test, wasn't it, as you knew of my deaf brother?\"\n\n\"Uh huh,\" Amber hummed through smiling, closed lips as she chewed.\n\nDaniel looked at Kaitlyn who wore a grin, but quickly diverted her eyes to her food. While her head was down, Daniel mouthed \"WOW\" at Amber and nodded towards Kaitlyn.\n\nAmber nodded, knowingly, and winked. She saw Kaitlyn's eyes look up, and Amber added, \"I want to go for a run, as well as do some errands, so you two have the house to yourself until at least 2 P.M.\"\n\nDaniel looked at Kaitlyn, and saw her eyes turn to him with that mischievous sparkle. \"Thanks, I think we will make good use of the time,\" he said, with a restrained smile.\n\nThey shortly finished their meal and he picked up their plates and carried them into the kitchen. \"Thanks for the food,\" he said as he waited for Amber to clear some space in the sink for the dirty dishes. As Kaitlyn was behind Amber and him, he said, discretely, to Amber, who was nearly as tall as him, \"Mind if I hang around here...often?\"\n\nShe put the plates in the sink, and whispered, a little shyly, \"We would both like that, very much.\"\n\nThat answer caught Daniel a little off-guard, but before he could consider that answer, Kaitlyn tapped him on the arm.\n\n\"What?\" she signed.\n\nDaniel turned around, as did Amber.\n\n\"What did you say?\" Kaitlyn reiterated, with her hand gestures.\n\nHe grinned, \"Just said 'I enjoyed the party'.\"\n\nKaitlyn placed her hands on her hips, in an animated fashion, and tilted her head with a questioning frown.\n\nAmber and Daniel looked at each other, and by lucky coincidence, both looked at Kaitlyn and shrugged, at the same time.\n\nKaitlyn glanced back &amp; forth, from one to the other, flashed a huge smile, and then bounced forward, between them, and hugged them both.\n\nDan kissed Kaitlyn's forehead.\n\nShortly later, Amber left for her run and her errands, after turning on the dishwasher.\n\nHardly before the door had closed, he saw Kaitlyn's eyes lock on his and saw her bite her lip, as her hands fiddled with the knot in the sash that held her kimono closed.\n\nDaniel walked up to her, and saw the robe fall open. Leisurely, he looked her up and down, toes to forehead, and took in the intricacies of her body. He looked into her eyes and asked, \"Have you always been...this way?\"\n\nShe nodded, slowly, causing her wavy hair to shift up &amp; down.\n\nHe followed that question with, \"I would like to see you, a lot more often.\" Then he added, \"Not all of it like this,\" as he swept his palms over her breasts.\n\nHer eyes softened, and her face readied for a smile.\n\n\"I hope you want that, too?\" he asked.\n\nKaitlyn's head bobbed up &amp; down, enthusiastically; her hair moving all around and partially covering one eye. The smile exploded.\n\nHe led her over to the couch in the living room, realizing that the couch had not been there last night. He also remembered that the house was on a cul-de-sac, and therefore, it was unlikely to have any neighbors looking in the windows, and seeing a bare Kaitlyn. He sat down, and had Kaitlyn sit on his lap.\n\n\"How much did Amber tell you about me?\" he asked.\n\nHer eyes looked up at the ceiling for a moment, and then looked back to him with a humorous sparkle. She started to sign, but then realized she was too close to him, so she just signed, \"Wait.\"\n\nShe moved back, off his lap, and lain down on the couch, with her head on the arm pillow, and her knees over his lap. She saw him look down at her bush, and she spread her legs wide for a moment, then clasped them back together, as she laughed, which came out as little huffs. The kimono lay at her sides.\n\nShe thought to keep her words simple and slow, for his ability to read sign language seemed somewhat limited. \"Amber told me many little pieces,\" she grinned, \"including the rumor about this.\" She drew back the foot closest to his stomack, and rubbed his crotch with her heel. \"Better than the rumor,\" she added, with that mischievous look back in her eyes.\n\nHe grinned, shyly, at the last remark, and further regretted he had to take his eyes off of hers, so that he could watch her hands talk. He put a hand on her thigh, and petted it gently.\n\nShe found the loose kimono sleeves got in the way with her signing, and slipped out of the sleeves, which left her naked on top of its fabric.\n\nShe went on, \"Amber told me what you look like: Again, better in person. She said you were kind, polite...P-O-L-I-T-E she spelled when he looked puzzled...funny and happy. All seem to be true. She said you were good at your job, and you two had been job friends for three years. She also told me about your brother being deaf, and dying.\"\n\n\"So you knew I could understand sign language before the party?\"\n\n\"Yes\" and she diverted her eyes for a moment. \"I wanted to meet you, but have you meet just me: K-A-I-T-L-Y-N me...not deaf and dumb me.\"\n\n\"I understand,\" he said, \"but that was quite a way for you to introduce yourself!\"\n\nShe looked a bit shy, and signed, \"It was not my plan. I knew small talk would not work, as then you would know I was mute. I did not want you to think I was a slut...S-L-U-T..., but when I watched you, looked into your eyes, and later we danced that slow song, I just knew there was no point to wait. I wanted you.\" She smiled broadly, \"I am glad I did, and I know I will want you a lot more.\"\n\nHe nodded, smiled, and said \"I am very glad you did...and that you want to see me again. I assume you know my last name is Taylor (which he pronounced carefully). So what is your name...last name?\"\n\n\"R-A-I-V-I-N\" she signed, \"K-A-I-T-L-Y-N, C-Y-N-T-H-I-A. Amber likes to call me S-I-N-F-U-L.\" Her eyes flickered with lust.\n\n\"Kaitlyn Sinful Raivin,\" he slowly pronounced, as he returned her lusty look.\n\nShe asked, \"Your full name is?\"\n\n\"Daniel Ev...\" he started, before switching to sign, \"E-V-E-R-E-T-T.\"\n\n\"Nice\" she replied, \"May I call you D-A-N, to make talking easier?\"\n\n\"Certainly,\" he replied, and moved his hand up to rub her stomach.\n\n\"That is nice, too!\" she signed.\n\nTheir conversation continued, with occasional pauses for Kaitlyn to catch her breath when his hand petted her more sensitive spots.\n\nShe learned a number of things. He lived in a home in the area of the former Hamilton Field airbase, in the newer developed portion of Novato (California), which was about 10 minutes south of Amber's home in the original part of Novato. Dan's parents lived outside Sacramento, about a 1-1/2 hour drive to the east, and he had no other brothers or sisters, anymore.\n\nDan learned her parents lived in Oregon. She had an older and younger sister, and no one else in the family had her limitations. She was an artist, though she did not support herself with it. She had a trust from her family that provided a decent income, but selling art certainly allowed for some splurging on wants, rather than needs. She volunteered at a school for deaf children in San Francisco, twice a week. And, as he suspected, she really loved sex.\n\nAfter she officially confirmed that last item, he began to run his thumb over her mons.\n\nHer hands quit talking, and she started to wriggle under his touch.\n\nThe door into the garage opened, and Dan abruptly relocated his hand to her knees.\n\nAmber came in, carrying shopping bags and looked at Kaitlyn lying naked on the couch, across Daniel's lap. \"You two finished, already?\" she smirked.\n\nDan quickly replied, \"We spent the time getting to know more about each other.\"\n\n\"I can see where you did your research,\" Amber taunted.\n\nDan blushed.\n\nAmber laughed. \"Don't worry Daniel. She spends more time like that in the house, naked, than dressed!\"\n\n\"Hey!\" Kaitlyn quickly signed, \"That makes me sound like a slut!\"\n\nDan saw Kaitlyn blush, profusely.\n\n\"Sorry, Dan,\" Amber chuckled, \"to be accurate, she spends a lot of time in the nude, but not on her back with men! You ought to see her with paint all over her. Then again, you would probably enjoy cleaning her up.\"\n\nDan laughed as he watched Kaitlyn, and saw her blush fade.\n\nAmber went down the hallway with her packages, still chuckling.\n\nDan silently mouthed to Kaitlyn, \"So, are you my slut now?\"\n\nKaitlyn feigned shock, then bit her lip, and nodded shyly. She looked back and not seeing Amber, she spread her legs again for a long moment, then she closed them.\n\nBefore she closed her legs, he caught the incoming sunlight reflecting off her glistening folds.\n\nShe signed, \"Think I sprung a leak...L-E-A-K...think you can fix it?\"\n\nHe smiled and nodded.\n\nShe stood up, draped her kimono over shoulder, and extended a hand to him.\n\nHe snickered, stood up, took her hand, and followed her lovely ass, as he had last night, but this time that ass was bare.\n\n\"S-T-R-I-P-!\" she signed, when she had closed the door to her room.\n\nHe watched her ferocious looking eyes as he undressed. Once naked, he reached out for her breasts.\n\nShe grabbed his wrists, steered his back to the bed, and pushed him so that he flopped on the bed. She flipped her hair to one side, and dropped to her knees. She took his semi-flaccid member in her hand, and then licked up and around. She kept this up, also occasionally popping his crown in her mouth, until she had his cock's full attention.\n\nDan blissfully lain there, feeling the growing urgency in his hips that she was creating. He felt her stop, and then grab and lift his legs, which had been draped over the side of the bed. She placed them on the top of the mattress, aligning him with its length.\n\nHe felt her move onto the bed, and he barely had time lift his head to look, before she was straddling him and was pressing him into her entrance.\n\nShe, again, grimaced slightly, closed her eyes, and bit her lip as she paused with him just inside her. When she opened her eyes, she locked on his, as she so loved to do.\n\nHe watched her eyes, as she lowered herself onto him. He saw moments of concern in hers, but the look was quickly replaced with determination. When she had slid down him those last two inches, he saw shock on her face, as she quickly lifted back up. The look of determination returned, and she started rocking her hips forward &amp; back.\n\nAs she rocked, she slowly eased down the last inch onto him, making sure her cervix would let him pass. When she finally rested her full weight on him, she threw her head back in relief and pleasure, and took a long pause.\n\nDan delighted at his depth within her, and at her moisture, which was running down his balls. He felt her slowly start to ride him in long strokes, as she leaned over him with her beautiful hair brushing his chest. He massaged her soft breasts and reveled in the same sensations as last night; her unbelievably silky tunnel, and the ripples of the tissues within her that he passed with each stroke.\n\nShe sat up, and started bouncing against his hips.\n\nDan saw the crimson quickly rise in her upper chest and neck, her intermittent biting of her lip, and felt the on-off clenching of her fingers into his chest. He knew he would not last all that long with these wondrous sensations. He heard the lurid wet sounds, and with a little tinge of sadness, knew she had never heard them.\n\nIt took her only a short time, before she convulsed and shook. Then, she paused as she fought to regain control of her muscles; eager to do it all again. She did, twice. After the third orgasm, she read his face as being close. She used every ounce of control that she could muster, to keep her eyes on his, as she clamped him on her up stroke, and released on her down stroke.\n\nShe was at the edge, but holding for the moment, when she saw Dan's mouth fall wide open. She could feel his grunts resonate under her hands. When she felt the new warmth flooding her, she let go, putting her full weight onto him, and convulsing so hard, that she nearly fell over.\n\nHe felt her head drop to his chest, and her hair fell across his face. She clamped him strongly and continuously. He groaned through his last pulses, and held her up as her body lost all control.\n\nThey stayed that way, both feeling the resurgence of aftershocks that overtook her. Her body finally settled on top of him.\n\nAfter several minutes, she was finally able to lift herself, along with her hair, up from him. She felt their sweat try to keep them stuck together. When she thought she could keep herself stable without her arms, she signed, \"Yes, your slut. I will need a lot more of this!\"\n\nShe saw him laughing, and felt his laugh through her hips.\n\n-----A week later -- Sunday ---- \n\nThe following weekend, Dan &amp; Kaitlyn arrived at Amber's house mid-morning on Sunday, and were welcomed by Amber, \"Hello strangers. Seemed odd not having you two around for a couple days, after having you both here every night since the party!\n\nKaitlyn signed, \"I need clean clothes.\"\n\nAmber chuckled. \"So how do you like Dan's home?\"\n\nKaitlyn's eyes sparkled. \"Dan's place has California king sized bed. And a really big shower.\" She looked up at Dan and smiled happily, then returned her look to Amber, and signed, \"With unlimited hot water, and lots of soap!\"\n\nDan blushed.\n\nAmber laughed, \"I can see her priorities have not changed!\"\n\nKaitlyn and Dan blushed.\n\nDan smirked, and said to Amber, \"Yeah: I thought I might have to drop her off for a couple days, so that I can get some rest!\"\n\nKaitlyn punched him in the arm, and then grinned.\n\nAmber chuckled and then asked, \"So, are you two staying around today?\"\n\nKaitlyn responded first, \"He is taking me to a beach on the coast which he thinks I will really like. Y-E-A-H-! I need warm clothes.\"\n\nAmber replied, \"Sounds great. You two are welcome to come back here, but I may have my own WB friend here this evening.\"\n\nKaitlyn clapped and bounced.\n\nDan said, \"We probably will not be back until 7 or 8. So, we had better get started.\"\n\nKaitlyn nodded, and headed to her room.\n\nWith just Amber there, Dan exclaimed, \"Thanks, Amber. I am getting really attached to her, really fast. She is unlike anyone I have ever met. She is alive with everything around her, and...well, you know...such a sensual creature.\"\n\n\"Yeah, I do,\" Amber replied, with a bit of a wicked smile.\n\nThat smile caught Dan's attention. He started cautiously, \"Do you mean...?\"\n\n\"Yup, several times,\" Amber smiled. She reached out and held Dan's forearm, \"But don't worry, she is not Bi, just curious, and she did not have many dates...so...\"\n\n\"I supposed I shouldn't be surprised, but I had not even considered that before.\"\n\nAmber grinned, \"She is bundle of surprises; don't ever think you are done with them.\"\n\nAs he considered that idea, Kaitlyn returned, dressed in jogging suit, with a zippered top and sneakers. She held another, heavier jacket, a small travel-type bag, and two beach towels. She raised her eyebrows in a question, and held the towels up in front of Amber.",
        "\"Sure, you can borrow them,\" Amber replied.\n\nKaitlyn smiled, took Dan's arm, and lead him towards the door, adding a goodbye wave above her head, to Amber.\n\nAs Dan &amp; Kaitlyn got to his car, he opened the trunk, and added Kaitlyn's supplies to the ones he had already placed in the trunk of his Mazda 6. As she had done previously, she walked back to the passenger door, trailing one finger up over the roof line. When she was seated, she signed, \"Still a beautiful car, and a wonderful red color.\"\n\nHe smiled, and rubbed her leg.\n\n\"How long?\" she signed\n\n\"Almost two hours.\" Dan replied, as he drove away.\n\nKaitlyn reached over and turned on the radio, and read the digital info until she found an 80's rock station on Sirius XM. She checked the radio to confirm it was still set at maximum BASS settings. She turned up the volume, and started to dance with her arms.\n\nDan patted her leg, and put his finger in his ear.\n\nKaitlyn reduced the volume, and stroked his leg. She had already learned to not be too playful in the car, as Dan took his driving seriously. She would just save her carnal interests for a less \"distracting\" time.\n\nAs they traveled through the rolling valleys on the way to the coast highway, with the old oak trees and dried-grass colored hills, he looked over to see her still squirming as she danced in her seat, and as she thoroughly took in the scenery.\n\nHe stroked her shoulder and saw her turn her eyes towards him. The sunlight coming in the windshield lit up the color of her eyes with a brilliance he had never seen before and would never forget. He kept coming back to her eyes, after each glance at the road.\n\nKaitlyn saw the lovely looks he was giving her. She partially unzipped the top of her outfit, and moved his hand from her shoulder to her bra-less breast.\n\nHe took one last look at those liquid blue eyes, and then turned his focus back to driving. The smile stayed on his face, and his hand on her breast. After a few moments, he slid his hand away, feeling that her puffy nipple had risen. Before his hand fully left her skin, he felt her grab his hand, and put it back over her breast.\n\nHis smile grew, he gave her breast a squeeze, and then put his hand back on the steering wheel. After a moment, he glanced at her and broke out in a loud chuckle at the silly pout on her face, as she held her top open, exposing both of those lovely breasts.\n\nKaitlyn left her chest bared as they traveled through the rural landscape, even when passing oncoming traffic, for about 10 minutes. When they approached the turn for the coastal Highway 1, and the small town that resided at the intersection, she zipped back up.\n\nAs Dan waited for a gap in the traffic, which was backed up for nearly half a mile behind a laggardly motorhome, he turned to her and asked \"What is Amber's WB boyfriend mean?\"\n\n\"With B-E-N-E-F-I-T-S,\" she responded, assuming his improving sign language vocabulary had not yet improved that much.\n\n\"Ooohhh\" he replied, thinking that that definition should have been more obvious to him.\n\n\"You have any WB friends, other than Amber?\" he asked, nonchalantly, as he waited for the last few slow cars to pass.\n\nKaitlyn paused, looked a little flustered, and signed, \"She told you about me and her?\"\n\nDeciding he did not want to be crawling at the end of this queue of cars, he turned and then pulled off into the parking lot of a convenience store/gas station. He turned off the radio.\n\n\"It happened to come up, but no details,\" he said, \"Once she told me, I realized the idea should have occurred to me.\"\n\n\"Then you are okay with the idea that I have been with a woman? It has only been with Amber, and just 3 times,\" she asked, cautiously.\n\n\"Guess I cannot blame you,\" he chuckled, \"I have looked at Amber's body with some of those thoughts, for years.\"\n\nKaitlyn smiled, as she signed, \"The feeling is M-U-T-U-A-L.\"\n\n\"What? You and I have only...OOohhh...Do you mean Amber with me?!\"\n\nKaitlyn nodded merrily, her hair dancing, with a big grin on her face.\n\n\"Well, that one sure got past me,\" he said.\n\n\"She has wanted you in her bed for some time, but thought it more important that you and I meet...Do not tell her that I told you!\"\n\n\"Of course: And she is that good of a friend? That is amazing!\" he said.\n\n\"We grew up together, as neighbors,\" she replied, \"She is three years older, and has always looked out for me. Her house was her parents' home, and my family was next door. When my sisters and I left home, that is when my parents moved to Oregon, and I moved in with her.\"\n\n\"Really\" he said, as he absorbed this new perspective.\n\n\"To save you counting, I am 25. And, Mr. S-N-O-O-P,\" she said, \"No WB friends. What about you, stud...S-T-U-D?\"\n\nDan laughed, especially at her spelling out 'stud'. \"Yes\" he said, \"but they no longer interest me.\" He looked at her rather solemnly, and said, \"They cannot hold a candle to you, by any measure.\"\n\nKaitlyn was rather taken aback, and her hands came up, but no words followed. Her smile had disappeared, and a single tear wandered down her cheek.\n\n\"I cannot get you out of my mind,\" Dan added, slowly, \"I do not even have thoughts about doing anything that do not have you in them.\"\n\nNow it was tears flowing down both her cheeks. Her hands finally thawed, and they fumbled out, \"Me, too.\"\n\nHe wiped at her tears, and leaned over and kissed her, long and gently.\n\nShe was blinking at new tears.\n\nHe winked and said, \"Let's get to that beach. We still have nearly an hour to go.\"\n\nHe pulled on to a now vacant highway, going north, and set the cruise control at 58 mph. In a couple miles, they passed the motor home that had bogged down the traffic. It was parked on the shoulder, steam pouring out from the front, and there were two cars stopped with it.\n\nFor that hour, whenever he looked at her, she had a sweet, contented smile, and her eyes danced between him and the beauty of the Pacific Ocean, which she could see out through the windshield and through his side of the car. Her hand rested on his thigh for the entire time, with her thumb occasionally sweeping back &amp; forth. She left the radio off.\n\n---- At the Beach -- Sunday ----\n\nWhen they got to the place that Dan had selected, he pulled into the small parking lot. There were no other cars in the lot of this lesser known location. They unpacked the trunk, trying to keep things from getting blown away by the moderate incoming sea breezes. Kaitlyn put on a baseball cap, in an effort to partially contain her flying locks, and put on her heavier jacket, to free her hands to carry other items.\n\nDan also put on a baseball cap, which needed the band tightened to keep it from being blown off. He put on his windbreaker over his heavy t-shirt, and stuffed a few small items into the pockets of his well-used jeans.\n\nHeading for the stairs that Dan had pointed to, they passed the state's single stall toilet outhouse. The steep stairs wound down the face of the cliff to the beach, around 30 feet below. Kaitlyn was in front.\n\nThe further down they went, the more often Kaitlyn looked back at Dan, her smile bigger each time she did. When they reached the sand, Dan led her towards the cliff, where there was a small cavern, which was not visible from the road. It not only gave virtually complete shelter from the wind, but its shape also amplified the sounds, and those sounds were dramatic.\n\nJust out from the cavern was a steep point of rocks, worn perfectly to create thundering crashes when the waves hit them every few seconds. Occasionally, a little sea spray drifted down on them.\n\nDan was starting to unfold the beach blanket, when he looked to see what Kaitlyn was doing. When he saw her, he stood up and just drank in her shear enjoyment.\n\nKaitlyn stood in the sand, about 50 feet out from the cavern. Her shoes were already off, and she faced the crashing waves. She took off her baseball cap, and tossed it back in Dan's direction, and Dan saw the sun make her hair glow.\n\nShe smiled, gleefully, as the waves thundered nearby. She spread out her arms to welcome the deep, forceful sounds impacting her body.\n\nAfter a few minutes, she removed her heavier coat. After another minute, she turned to Dan and winked, and then unzipped and stripped off her jogging jacket. After the ocean created the next big boom from the rocks, she wrapped her arms around her naked chest, and danced on her toes.\n\nThen she stopped, dropped her arms, and looked a bit thoughtful. A split second after the next boom of surf, she quickly turned to face the cavern, her hair now blown all around her face.\n\nDan happily watched her repeat this several times, thinking she must be able to detect the rapid echo created by the cavern. To him, she appeared to be laughing. Then he saw her stop, smile at him for a moment, and then start running towards him, breasts swiveling. He barely had time to brace himself before she leapt into his arms, her arms around his neck and her legs wrapped around his waist.\n\nDan chuckled warmly, but kept his eyes and mouth closed, as she bounced quick, wet kisses all over his face, also knocking his cap off. His hands felt the chill on her body from the sea spray and cool sea winds. Then he felt the warmth of a strong kiss, planted on his laps, which he lengthily returned.\n\nHe coaxed her to get off him and stand up. Lightly palming both her breasts, he said, \"Let us finish setting up, so that I can show you more.\"\n\nShe leaned her breasts harder into his hands, and kept her twinkling, wide open eyes on his.\n\n\"Really?\" he smiled.\n\nHer rapid nods threw some of her hair over his hands.\n\nHe used his fingertips to push on her chest above her breasts, so that he could push her back into a balanced stance, before he withdrew his hands. He smiled, \"Work first, play later.\"\n\nShe shrugged, cheerfully, and ran off to pick up her hat, then her shoes and two jackets. She walked back to the cavern, and then put the jogging jacket back on, and pulled her hair through the opening in the back of the baseball cap, leaving her with a broad pony tail.\n\nWhen she had finished helping set out the blanket, pillows and food, he picked up a beach towel and placed it over his shoulder. \"You will want the other jacket as we will get wet, and you will need your shoes for the rocks.\n\nShe did as he requested, and took his hand, where upon he led her out, towards the rocks and waves. She stopped, held up one finger, and ran back to the bag she had brought. She got out her cell phone, tucked it in her pocket, and zipped the pocket closed. She ran back to him.\n\n\"You have a cell phone?\" he asked, \"Who do you talk to?\"\n\nShe tilted her head, and looked at him, waiting for his stupidity to pass. \"D-U-H\" she signed. He was being really slow on this one, so she signed, \"Facetime, hands, get it?\"\n\nHe blushed, looking at her eyes, which danced in the sunlight, and said, \"Sorry, I do not know why I am so slow on picking on some things with you. I am not usually like this. Well, maybe I do know...I am just too lost in your eyes.\"\n\nKaitlyn shook her head while still smiling, then lightly swatted the back of his head, and pushed him to start moving. She took his hand again, followed him into a crevice, and then carefully traced his footsteps over the wet rocks, as he climbed up about 10 feet.\n\nAs she emerged on top of the local rocks, Dan pointed towards the crashing wave.\n\nShe watched for a second, and then saw water shoot upwards through a hole in the rocks. She had never seen a blowhole, and now it was getting her wet. Dan took her a bit farther away, where she gleefully looked upwards at the towering spray of water. She ducked as a heavy spray settled on them.\n\nDan felt her tight hug as she surrounded his waist, and bounced on her toes. He took the beach towel off his shoulder, unfolded it, and wrapped it over their shoulders, including much of her hair. He watched her take her cell phone out and shoot a few pictures of the view, then change camera settings to take a selfie of the two of them.\n\nThey stood there through another half dozen waves, looking like those group kitten videos on YouTube, as they both tilted their heads up to follow the rocketing water, then both ducking their heads as the water collapsed under gravity's hand.\n\nKaitlyn looked up at Dan, wiped the salt water from around her eyes, and nodded her request to exit.\n\nWhen they got back to the cavern, Dan watched as she shed her damp jacket, shoes, and ball cap. Out of the wind in the cavern, he took off his windbreaker, and then decided to remove his shoes as well. They sat on the blanket, and dug into the snacks he had brought, and the canned sodas (liquor was not allowed on the beach).\n\nAs their intake of nuts &amp; chips slowed to occasional nibbles, she signed, \"Can you give me your cell phone number?\" and then reached for the pocket of her heavy coat to get her phone.\n\nDan pulled out his phone, brought up a display with his number, and showed it to her. When she was done, she showed him her number. He entered it, and then said, \"You might have mentioned you had a cell phone.\"\n\nHer eyes widened, and her face took on a silly look. She signed, \"Other than when you are at work, when in the last week was I farther away than the other side of the bed?\"\n\n\"Point taken,\" he laughed.\n\nShe scooted up, right next to him, and signed, \"I have one bar, how about you?\"\n\n\"Two\"\n\n\"Try calling me,\" she signed.\n\nAs he went to press the Call icon, he saw her stuff her phone down the front of her jogging pants.\n\nHe hit call, her phone buzzed, and she started giggling, silently.\n\nHe started laughing, and then complied when she gestured \"Again.\" He fell on his back laughing, as her legs squeezed together and as she fell backwards, laughing in those little huffs.\n\nWhen the laughing subsided, he queried, \"Did you put the phone in your panties?\"\n\nShe stripped her jogging pants to her knees, and signed, \"What panties?!\"\n\nHe looked at her bush, and then up to her eyes, and they told him what she wanted.\n\nHe started to slowly unzip her jogging jacket.\n\nKaitlyn proceeded to kick off her pants. Then, she slipped out of her jacket, stood up, and moved to straddle him with her feet. She bent at her waist, and her hair fell over her head. Then she undid his belt buckle, and popped the waist button of his jeans.\n\nHer eyes looked at him through her hair, and she signed, almost in front of his nose, \"I want you naked...\" she stopped, sighed, then continued, \"N-A-K-E-D when I get back!\"\n\n\"Back from where!?\" he promptly exclaimed.\n\nShe did not reply, but turned and ran out of the cavern.\n\nFeeling some concern for it being a public beach, albeit, one with no one else apparently there, he took off his tee shirt and then watched her naked form run until knee deep in the surf. He started to slide off his jeans, when he saw her turn her back to a big wave and then she disappeared.\n\nThe icy wave blew all around her, and over her, as it knocked her to her knees. She stumbled to her feet, and started to run away, but she was fighting the drag of the outflowing water. She gave Dan a playfully shocked look, which grew a little more real, as another cold wave hit her at the thighs, causing her to stumble again. She beat the next wave and started to run, but then shifted to hopping for a few steps as she unwound a piece of kelp from her hobbled ankle.\n\nSeeing she was okay, he finished removing his jeans and socks before she finished the run back to him.\n\nDripping wet, her hair now much darker from the water, she reached him and, without pause, lifted his boxer's waistband to clear his already firm erection, before she yanked his boxers down his legs. She immediately moved over him and lowered herself onto him. This time, she did not pause, and took him all in on the initial slide, but not without grimacing, nor having the strain show in her neck muscles.\n\nDan saw her huff, heavily, a few times and her eyes were wide. \"Okay?\" he asked.\n\n\"In a moment,\" she replied, still looking a bit apprehensive about her ambitious plunge on him.\n\n\"This is a public beach, you know,\" he chuckled.\n\n\"Then I had better be fast,\" she signed and grinned. Her eyes sparkled under her dripping hair as she clamped around his shaft. She immediately went about bouncing, fast and hard, against his hips. Water flew off her body. Within a few bounces, the crimson was blooming on her upper chest.\n\nHe felt the sand under the blanket shift as she pounded him down. His mind exclaimed, \"You had better be fast, you amazing woman, for I will not last long, what with you clamping me, constantly.\" Just when he thought she would shortly finish him off, she stopped.\n\nShe paused, sitting on his hips, and looked around the cavern, with a curious expression.\n\nDan saw a look of recognition on her face, and then she looked at him with a, not previously seen, warmth in those wondrous eyes.\n\nShe rose up from him, nearly letting him leave her. Then, in one solid stroke, sank onto his hips, without crashing against him. She paused for a few seconds, and then repeated the move, over and over.\n\nIt was a new thrill to him, and became a really special moment when he realized her down strokes were timed to match the thunder of the waves. Once he recognized this, he added an upstroke of his hips at the moment of the thunder in the cavern.\n\nHe saw her crimson blush grow bright, and saw it spread to her neck, as well. He felt small shudders echo through her, and saw her eyes struggle to stay focused. Then he knew she was there, as her knees clamped his side, her eyes closed, and the arms pressing on his chest, buckled.\n\n\"Cum, my love, cum hard,\" his mind pleaded. He felt a short moment of stillness, before several sharp jolts shot through her. He was nearly there himself, but he waited until her breathing resumed. When it did, he started rolling his hips in strokes that went fully up into her. He watched her straighten, her eyes wide, and her mouth forming an \"Oh\".\n\nHe changed to move as fast as possible, their hips slapping twice or more a second. He lasted for only a few seconds, before he tensed, grimaced, and then growled with each aching pulse.\n\nShe collapsed on top of him; her only coordinated action was to move her wet hair to miss his face. The coolness of the sea air on her skin became apparent. She slowly rose up on her forearms, and then sank to kiss him, desperate for it never to end.\n\nHis relished the kiss, but his mind stayed divided; one part realizing he had said \"love\" to himself. He pondered, \"I have never said I loved a woman, not even to myself. Is this really the one?\" He felt very contented when his mind answered \"Yes\" without any consideration.\n\nHe decided he had to be the rational one, and suggested that they get dressed. He chuckled to himself with the idea that getting dressed was never a popular choice, with his sweet \"nudist.\"\n\n---- At Amber's, After the Beach -- Sunday ----\n\nWhen they got back to Amber's house, it was nearly 9 P.M, and they were both quite tired, plus the pizza they had stopped for on the way back, was adding its own drowsiness. They unloaded Kaitlyn's items and went into the house.\n\nThey did not see Amber around, and decided to take a shower together to clean off the saltwater, and then to rest for the remainder of the day. They undressed in Kaitlyn's room and Dan borrowed a terry cloth robe from her, though it was too small for long-term modesty. They went in and she used the toilet, while Dan opened the lightly textured glass door to the roomy shower, and adjusted the water temp.\n\nDan was still reaching in, waiting for the temp to rise, when he felt Kaitlyn's hand around his shaft. He began to rise, as well, as she slowly stroked him to attention. When the temperature was correct, Dan directed Kaitlyn to go in first, just as remembered he wanted to drape a towel over the top of the shower glass. He stepped across to grab a towel and turned.",
        "The door to the bathroom burst open. In rushed a naked Amber. She got about 3 steps before the shock registered on her face. She looked at Dan's shocked face, then down at his fully erect member, and then put a hand over her vulva, plus crossed one arm over her breasts, squashing their ample size.\n\n\"I...I...HAVE TO PEE!\" Amber exclaimed, and then rushed pass Dan to the toilet, firmly brushing against him from the limited space.\n\nThe moment Dan broke out of his shock, he quickly stepped into the shower and faced his back towards the glass, which faced the toilet.\n\nA very surprised Kaitlyn wondered what Dan was doing.\n\nAmber called out, above the sound of the running water, \"SO, so sorry...My date is using my toilet and I suddenly couldn't hold it. In my rush, I didn't think about you being in here, Dan. I will be gone in a minute!\"\n\nKaitlyn looked at Dan's blushing face, and his rigid, odd posture, and now-flaccid cock, and signed, \"What is wrong?\"\n\nDan looked at her quizzical face, and said, \"Amber...on the toilet...nude...now!\"\n\nKaitlyn's eyes lit up, with a merry look, and a humorous grin spread across her face. Kaitlyn opened the shower, and stepped half way out so that she could see Amber. Kaitlyn waved Amber to come into the shower.\n\nAmber's face went into shock, again, but she was able to mouth, \"NO!...uh...My date is in my bathroom. I was desperate to pee. I will go in a minute.\"\n\nKaitlyn gave a fun shrug, and signed \"Your loss.\"\n\nAmber gave a small smile, and pointed at Dan. She mouthed, \"OMG\", and held her hands out, wide apart, like a fisherman's tall tale.\n\nKaitlyn nodded happily and put her hands together to form a big circle. She saw Amber's eyes grow wider, and then watched as Amber flushed the toilet, and went to leave. Kaitlyn gave Amber a goodbye wave, and closed the shower door.\n\n\"Is she gone?\" asked Dan.\n\nGrinning broadly, Kaitlyn nodded. \"Did you like what you saw?\" she signed.\n\n\"Well,\" he said then paused, before continuing, \"I am a guy. She does have a beautiful figure, big tits with huge nipples, and a pretty, shaved pussy. Would you believe me if I had said 'NO, she is not beautiful'?\"\n\nShe looked down at his once-again, firm erection, and signed, \"I do believe you, when you say she is beautiful, because she is.\"\n\nThen Kaitlyn did her pouty face, cupped and bounced her smaller-by-a lot breasts, and then reached down and combed her fingers through her pubic hair. Then she waited for Dan to start the back peddling, trying to keep any humor from showing on her face.\n\n\"NO...No...!\" Dan started on cue, \"Don't shave it off! And your breasts are beautiful, too! Do not change a thing...I love you just the way you are!\"\n\nKaitlyn's face froze. She was not budging until she knew that Dan realized what he had just said.\n\nDan paused, fretting for a moment. Then, he looked down at those anxious, unbelievably addictive eyes. \"I...L-O-V-E...Y-O-U,\" he signed, and sighed with the relief that it was now out in the open.\n\nHe watched her and saw those eyes, framed by soggy, straight hair, starting to melt into tears, which were quickly rinsed away as the shower spray washed them off.\n\nHer hands tentatively rose, and were shaking. She did her best to clearly sign, \"I have been in love with you since that slow dance at the party. I tried to tell myself that love at first sight is not real, like that...it was just lust...L-U-S-T..., and maybe I would really fall for you, later. Now I know I was wrong, it has been love all along...and I do not want it to ever stop.\"\n\nHe smiled, and tapped her nose, which made her smile. \"Neither do I.\"\n\nHe thought she was going to kiss him, as she pushed him back, against the shower wall. Instead, she held him there, both her hands pressing against his chest, as her head dropped. He watched, waited, and took to counting the drops of water that trailed from her hair.\n\nFinally, she raised her head, tears again flowing down a now-sad face. She stepped back and looked in his eyes. \"There is something I must tell you, then...now.\"\n\nNow, he looked at her anxiously.\n\nKaitlyn raised her hands, but paused to try to control the shaking. After a moment, she signed, \"I...cannot...have children.\"\n\nHe looked at her fallen expression, and asked, softly, \"Cannot, or do not want to?\"\n\n\"Both\" she signed, \"I am broken, that way. And, I do not want to raise children that I cannot hear, and cannot hear me. I have conquered...C-O-N-Q-U-E-R-E-D...many things in my life, but I have also seen what my limitations can do to others' emotions. Helping the children who are deaf is enough for me.\"\n\nDan held her shoulders, to straighten her up. \"I...DO...NOT...CARE,\" he announced, \"If we get to that point, we can decide then. No children, or even adopt a child, even a deaf child: Either way is fine with me. It is you that I want, and I have no expectations beyond wanting you in my life.\"\n\nKaitlyn threw herself against him, and hugged him tightly.\n\nHe held her rocking body for several minutes, until he noticed the hot water fading. He tapped her on the back, and she looked up. \"The hot water is running out. We better clean up quickly, and get out.\"\n\nShe nodded.\n\nThey both washed themselves, and each other, quickly, and then turned off the shower. They dried off, put on their robes, and moved to her room. There, they disrobed and climbed into bed, with no conversation.\n\nKaitlyn had quietly snuggled against him. Dan reached into the drawer of her nightstand and got out the notepad and pen. He wrote \"I LOVE YOU!\" using her heart symbol at the bottom of the floating exclamation point. He set the image in front of her to see, and she smiled broadly.\n\nHe saw her look up at him with a huge twinkle in her eyes, and then felt her take the pen from his hand. Below what he had written, she drew a horizontal arrow, with an arrowhead at both ends. Then she propped the notepad between them.\n\nHe smiled and nodded, and then put the notepad and pen back in the drawer, and turned off the small lamp on the night stand, leaving them in darkness. He found her face, and softly kissed her, before he closed his eyes and settled in for what he thought might be the best night's sleep he had ever had, with her wonderfully snuggled tight against his chest.\n\nBefore he could fall asleep, he started to hear loud exclamations coming through the wall. Apparently, Amber's room was adjacent to the wall their headboard was on. The exclamations he heard were clearly female, and seemed to fall into the categories of \"Yes, Yes\", \"Oh God\", and \"Fuck!\" He started to hear a rhythmic thumping against the wall, and chuckled.\n\nKaitlyn felt him chuckle, and rolled on her back, and turned on the lamp. \"What is funny?\" she signed.\n\nSmiling, Dan took one of her arms by the wrist, raised it up, and placed her palm against wall.\n\nKaitlyn paused, then grinned, and took her hand back before signing, \"She needed that!\" Kaitlyn turned the lamp off, but then switched it back on again. She signed, \"It is your turn in the morning!\" and turned the light back off. She felt him hum, happily.\n\n---- Morning After the Beach -- Monday ----\n\nDan &amp; Kaitlyn were casually dressed as they came out to the kitchen about 8:30 the next morning. It might have been earlier if Kaitlyn had not been good to her word. Amber was seated at the table, working on her Apple tablet.\n\n\"Not going in to work today?\" Dan asked.\n\nAmber looked up, and seeing his face, blushed. \"Glad we have flex hours. I just let them know I would be in later. How about you?\"\n\n\"Same\" he said.\n\n\"Had breakfast?\" Kaitlyn asked Amber.\n\n\"No, my date left late last night, and I have only been up for about 20 minutes.\"\n\n\"Well, I am making breakfast, then,\" Kaitlyn signed, \"Oatmeal and English muffins alright?\"\n\nAmber said, \"Sure\" and Dan nodded his agreement, though he was not quite sure what food Kaitlyn had signed about.\n\nKaitlyn went into the kitchen and appropriate preparation noises resounded.\n\nDan sat next to Amber at the table.\n\n\"She gets pretty noisy in there, doesn't she,\" Dan quipped.\n\n\"Sure does. Creates quite a clatter,\" Amber replied, \"Sometimes I have move to another room.\"\n\nAmber continued to tap her finger on, and slide her finger across, her tablet. Without looking up, she said, \"Sorry about barging in last night.\"\n\n\"I was a bit embarrassed at the time, as it caught me off guard,\" he chuckled. \"But what man in his right mind is going to complain about seeing you naked?\" Dan said, as he nudged her elbow.\n\nHer head stayed down, and she fought to keep her smile from growing too big. \"And I found out that the office rumors about you, do not do you justice, Horse!\" she said, and glanced up at him.\n\nNow Dan was blushing, \"TMI on that one!\"\n\nAmber chuckled at that, and then went on, \"You both look like the proverbial cat that swallowed the canary this morning. Have a good night?\"\n\n\"More than that,\" he replied, \"I have fallen for her.\"\n\n\"Wonderful, though I am not surprised,\" Amber said, with a happy tone.\n\nDan smirked, and said, \"We had a quiet night, after the shower, and fell asleep to the 'music' from your room. It had a great 'beat'!\" He nudged Amber's elbow again.\n\n\"The music in my...?...OH GOD!\" Amber said, almost in a squeal. She blushed, profusely, and covered her mouth. After a moment, she whispered, \"I am so used to little miss Sinful not hearing things, that I forgot myself. I will try to keep it down next time...if there is a next time. And just so you know, I do not hear you two doing...well...Kaitlyn has told me some things, so I know you are not monks in there.\n\nDan grinned.\n\nAmber grinned.\n\nThey stayed quiet for a few minutes, but both of their noses detected the delicious, toasty smell of properly fork-split English muffins.\n\nKaitlyn brought the meal out to them, which included a large serving bowl of steel-cut oatmeal, a plate of 8 heavily buttered, crunchy muffin halves, plus white sugar, brown sugar, butter, and maple syrup. Kaitlyn sat next to Amber, and thus opposite Dan.\n\nThey passed the oatmeal bowl, and served their portions. Next, Kaitlyn and Dan both reached for, and both got a hold of, the bag of brown sugar.\n\nKaitlyn put on a playful face of determination and fierceness.\n\nDan glared back, stifling a chuckle, at seeing those luscious blue eyes and warm features trying to look tough.\n\nAmber gave up on politeness and waiting, and reached over their warring hands, which stayed clamped on the brown sugar bag, and snatched up the her chosen maple syrup. \"No fighting, children!\" Amber chided.\n\nDan looked at Amber, laughed, and let go of the brown sugar.\n\nWith her focus on Dan, Kaitlyn had missed Amber's reprimand. Seeing Dan look at Amber, Kaitlyn looked at Amber, and signed \"W-H-A-T\" with her free hand.\n\nAmber smirked, and with her mouthful, signed, \"No fighting, children!\"\n\nKaitlyn stuck out her tongue, and served herself her hard won brown sugar. When she was done, she gave Dan a big victory smile, and plopped the bag on his side of the table.\n\n\"I can add 'Brat' to the long list of things I love about her,\" Dan mused.\n\nAs the meal wound down, there were two muffin halves left, and Amber slid their serving plate in front of Kaitlyn, who shook her head. Amber slid the muffins over to Dan, \"All yours, Danny boy.\"\n\nHe grinned, and took them both. Before he bit into one, he said to Kaitlyn, \"My parents have a condo at Lake Tahoe. They will not be there next weekend. You want to go up there next weekend, say leave on Friday evening?\"\n\nKaitlyn's face gleamed, got in one big nod, and then stopped to look at Amber. \"But, Saturday is Amber's birthday. She will be...2...9....\"\n\nAmber was swatting at Kaitlyn's hands, trying to shut her up.\n\n\"Do you have a party planned, or is anyone planning one for you?\" asked Dan, chuckling at Amber's and Kaitlyn's swatting match.\n\n\"Nothing important,\" Amber said.\n\n\"Then you come too, and even bring a date, if you want to. There are three bedrooms,\" Daniel said to Amber.\n\nAmber started, \"Oh, I would just be...\" She stopped as Kaitlyn was shaking her arm and smiling broadly.\n\n\"I guess Kaitlyn has just answered for you!\" Dan said, with a grin.\n\n\"Okay, then,\" Amber said, \"How about we work extra hours in the next few days, and leave after lunch on Friday? We can take my VW Atlas, so that we have plenty of room.\"\n\n\"Great\" Dan said. Asking Kaitlyn, \"I assume that is okay?\"\n\nShe nodded, vigorously.\n\n\"Then can you be ready when Amber and I get back from the office on Friday, and can you pack some perishable items, that we might want to eat, in a cooler? Nothing fresh is kept up there.\"\n\nKaitlyn gave him two thumbs up.\n\nDan added, \"You both, and even your date Amber, will need good windbreakers, nice clothes for a dinner out, and decent walking shoes for that dinner.\"\n\nHe saw a two pairs of curious eyebrows raised. Amber added, \"I doubt I will find a 'date' as most of my friends have tickets and parties planned for the Giants versus the Dodgers this weekend, at Oracle Stadium. I'm not a baseball fan.\"\n\nBiting into one of the two remaining English muffins, Dan mumbled to Amber, \"Maybe you can meet somebody up there. The bedroom walls are not adjoining!\"\n\nHe felt Amber kick him under the table, as he saw Kaitlyn sign at him, \"You were eating, and I did not understand what you just said.\"\n\nDan just smirked and shrugged. He saw Kaitlyn's face take on a perturbed look, and saw her turn to look at Amber for an answer. Amber's head was down, as she snickered.\n\n---- Lake Tahoe -- Friday ----\n\nHaving left at 12:30 PM, avoiding rush hour traffic, and having traveled north of San Pablo Bay to reach Interstate 80, the three of them had nearly reached Tahoe City. Amber had done all the 3-1/2 hours of driving. They were driving along the lovely Truckee River, on State Highway 89.\n\nAs Tahoe City came into sight, Amber turned to Kaitlyn, touched her arm, and said, \"I have not been here in years. How about you?\"\n\nDan released his seatbelt and leaned forward from the back seat, so he could see Kaitlyn's answer.\n\n\"Never\" Kaitlyn signed.\n\nDan said, \"Take the turn to follow 89 South. When we turn, you can glimpse the lake beyond the small dam as we cross the bridge.\"\n\nWhen they crossed the short bridge, Kaitlyn signed, \"Wow! How beautiful. It is a lot bigger than I expected. But, what were all those people looking at, below the bridge?\"\n\n\"The lake is 25 miles long, and 11 miles wide, and very deep,\" he said, \"And, the bridge's nickname is Fanny Bridge, as the people hang over to look at the many huge trout down there, which are off-limits to fisherman.\"\n\n\"Amber, you will be turning left at the top of this little rise, in about half a mile,\" Dan instructed.\n\nAs she made the left, Dan said, \"Here we are, the Tahoe Tavern Properties. Go straight and turn into the first parking space on the right.\"\n\nWhen they parked, they all grabbed armfuls of luggage, and then Dan opened the condo's front door, and ushered them in.\n\n\"Wow,\" Amber gushed, \"look at that view of the lake!\"\n\nKaitlyn's mouth just stayed open.\n\n\"So you like it?\" Dan chuckled.\n\nKaitlyn nodded vigorously, her hair, once again, falling around her face.\n\nAmber's response was, \"Hell, yeah!\"\n\n\"Great,\" Dan said, \"this way to the bedrooms.\" He led them upstairs, and pointed Amber to the left, and Kaitlyn to the right. To Amber, he said, \"Sorry, you get the parking lot view, and we are in the master, so we get the lake view.\"\n\n\"This is lovely; no complaints,\" Amber hummed, happily.\n\nThey all finished unloading. Then Dan announced, \"We are going to celebrate Amber's birthday, a day early, with dinner out. You both need to be ready at 6 PM, with those suitable walking shoes, and something for your hair, if you do not want it blown around.\"\n\nKaitlyn and Amber looked at each other, a bit puzzled, then looked at Dan and nodded their agreement.\n\nDan added, \"I have to run an errand, so I will be back in half an hour.\" Dan walked out through the patio doors and out across the large, common area lawn, towards the condos that were on the lakefront.\n\nWhen he came back, no one was downstairs, so he went upstairs. The guest bathroom was closed, so he assumed Amber was preparing herself. He went into the bedroom, and then the master bath, where he found Kaitlyn naked, doing her makeup.\n\nShe saw him, behind her, through the small spot she had cleared on the steamed up mirror.\n\nHe walked up close behind her, wrapped an arm around her breasts, reached up with his finger, and drew a heart in the steamed mirror.\n\nKaitlyn nodded, wiggled her butt against him, and then signed, \"Enough, you dog, I have to get ready.\" The reflected, reversed image in the mirror of her signing, challenged his reading skills.\n\nHe nuzzled her neck, taking in all the freshly washed smells of her, and then went back into the bedroom, to change.\n\nJust before 6 PM, they were gathered in the living room. Dan surveyed the faces of his \"entourage\". Amber had her just-over-the-shoulder length, straight hair tied back in a ponytail, and it really accentuated her long neck, and sharp jaw line. Dan quickly switched to Kaitlyn's face, seeing, for the first time, her hair braided. It narrowed her features, giving her a lovely elegance, which he had not imagined before.\"\n\n\"Like?\" Kaitlyn signed, and gave a shallow curtsy.\n\n\"Hell, yeah,\" Dan choked out. He had no further ability to speak, as he looked down at Kaitlyn's emerald green, wrap dress, printed with yellow flowers. He took in its mid-thigh length, and deep neckline, that showed her cleavage and beyond, as it was cut to well below her breasts.\n\nSeeing that his eyes were transfixed and were not sharing their lust, Kaitlyn moved around behind Amber. Dan's eyes rose up, given that Amber was about half a foot taller, and saw Amber's hesitant smile. His eyes dropped back down and saw how little she was wearing. She had on a bright yellow romper with the neckline dropping all the way to her narrow waist. She had on a long gold chain, whose strands merged as they submitted to the depth of the cleavage between those really round breasts.\n\nAmber half turned, and showed him it was backless, except for two narrow straps that crisscrossed between her shoulder blades. And her huge nipples were really pronounced, causing him to think of what an effort she must make, at work, to subdue their appearance. The short, short length of the romper made her athletic legs look unbelievably long.\n\nJust as he was actually forming a sentence in his brain, he saw Kaitlyn peek out, from behind Amber, with a big, lecherous smile, and she winked. With a last pause to swallow, he said, \"Shit Amber, any breathing male will not miss you this evening.\"\n\nAmber grinned shyly, and said, \"Yeah, but I am not really shopping. Any way you look pretty tasty yourself, dressed up like that.\"\n\nComing back to his senses, he said, \"Well...thanks...with those...necklines...you will definitely want your windbreakers. We had better get moving.\" He picked up a small flashlight from the counter, and put it in the pocket of his windbreaker. He opened the front door and let them out. He noticed they both were wearing sensible flats, as he had suggested.\n\nThe girls started to walk towards Amber's parked SUV, but he redirected them to follow a tarmac walkway. They followed him for about 300 feet before they encountered some stairs. The group went down the stairs, about 20 feet, until they reached the shore end of the pier.\n\n\"That is long!\" Amber said.\n\nDan turned to face them. \"The pier has been renovated, but it dates to the 1920's when steamships docked here. It is 1,000 feet long, but the water is only about 15 feet deep at the T-shaped end.\n\n\"So, we are going to dinner by boat?\" Amber queried, happily.",
        "\"Happy last day of your 28<sup>th</sup> year,\" Dan responded, with a delighted grin.\n\nKaitlyn clapped and bounced on her toes.\n\nWhen they got almost to the end of the tall pier, they walked down a few steps on one side, which gave them access to a lower decking, where a boat was tied up. Dan held out his hand, to steady them, as the girls stepped down into the boat.\n\n\"This is really nice!\" Kaitlyn signed, \"What is it?\"\n\n\"A 22-foot Cobalt 220 bowrider,\" Dan replied.\n\nKaitlyn looked at Amber, as Dan went to untie the moorings. Amber spelled out in individually signed letters, of what Dan had said.\n\nDan started the boat and then idled out of the restricted area, into a rather calm lake. \"Better sit now and get those windbreakers on. It is about a 10-minute ride.\"\n\nAmber tapped Kaitlyn, whose eyes were sparkling as she took in everything around them, and pointed to the seat and to the windbreaker. Kaitlyn nodded. Amber &amp; Kaitlyn sat on the side-facing seats, across from Dan's driving seat.\n\nDan got the Cobalt up on plane, and set an easy cruise, to the south, at about 33 miles an hour. He pointed at some of the large, old estate homes along the way.\n\n---- Lake Tahoe Dinner -- Saturday ----\n\nWhen he started slowing, he pointed ahead and said, \"Sunnyside Restaurant.\" He docked near two other boats, at the restaurant's marina facilities, and assisted the girls out. \"It is an unusually nice evening. Do you want to leave your jackets here?\"\n\nKaitlyn and Amber both dropped their jackets back into the boat. As the trio walked up to the back entrance they saw that the restaurant was fairly busy. The also noticed that they got a lot of attention, with some downright stares aimed at Amber. They asked to be seated outside, on the deck, and were fortunate to get a lovely view of the lake. Dan was seated between them.\n\nThey ordered cocktails (for those of you interested; Kaitlyn-Mojito, Amber-Chivas Regal/rocks, Dan-Herradura Margarita/rocks &amp; salt) and received their drinks quickly. Dan raised a toast to Amber's birthday. After the toast, the three were rather quiet, looking at all the scenery, and the long, evening shadows the tall pines cast into the extremely clear water. Dan also looked at the beauties seated with him, and happily tapped his fingers on the table, adjacent to the base of his drink glass.\n\n\"This is wonderful, Dan, thank you so much!\" Amber said, as she reached over and wrapped her hand around Dan's. Amber glanced at Kaitlyn, who gave her a menacing look, then broke into a huge smile, winked, and reached out for Dan's other hand.\n\nAmber chuckled, and kept her hand around Dan's.\n\nDan looked down, with an odd contentment as he held both of these women's hands. Their enjoyment of watching the shadows creep across the lake towards the eastern shore was interrupted by a request for their food orders (okay, again for the curious out there: Shared Starter/Crispy Monterey Bay Calamari; Kaitlyn, Apple &amp; Candied Pistachio Salad with Saut\u00e9ed Fresh Fish; Dan, Caesar Salad with Peppercorn Crusted Ribeye; Amber, Caesar Salad with Maine Lobster Tails [which Dan had to convince Amber to order, telling her to ignore the price]).\n\nWhen they had finished their dinners, which included a shared bottle of Chardonnay, Dan was momentarily startled when Amber's hand rested on his thigh, seemingly unconsciously. Kaitlyn was holding his hand, now freed from eating his dinner. They all looked around at the darkening sky, the shadows having reached, then left, the mountains of the eastern side of the lake. Kaitlyn appeared the most entranced, with her head constantly swiveling, and her eyes occasionally looking at Dan, with the most delightful sparkle.\n\nEveryone was too full for dessert, so Dan suggested a round of Sambuca. Neither Kaitlyn nor Amber knew what Sambuca was, but seemed curious when it was described as licorice (anise) flavored. Dan ordered three flaming Sambucas, and whispered something else to their server.\n\nAmber &amp; Kaitlyn were a bit tipsy, and willingly agreed to Dan's selection.\n\nWhen the server came back, three snifters of Sambuca were set out, plus a serving of Lava Cake with a candle in it, in front of Amber, plus a small box, that started playing \"Happy Birthday to You...\" The server lit both the candle and the three snifters of Sambuca. The dancing flames of the drinks delighted Amber &amp; Kaitlyn as the flames played across the table in the darkening evening light, for the few seconds of the flames' short lives.\n\nKaitlyn clapped, and signed \"Make a wish and blow out the candle!\" Amber paused, and then bent to blow out the single candle. Dan sucked in his breath as one full breast came into view when the top of her jumper relaxed, and bowed out.\n\nDan raised his glass, \"To Amber's birthday wish; may she get whatever she wants.\"\n\nAmber stroked Dan's thigh several times, then removed her lingering hand. \"Amen,\" she added.\n\nDan, absolutely, noticed Amber's stroking of his thigh, and then saw Kaitlyn's eyes sparkling at Amber, with a look he did not recognize, but certainly was curious about.\n\nThey all sat for a while drinking in the last of the view and sipping their Sambuca (which Kaitlyn &amp; Amber found delightful) until darkness had robbed the last of the sunlight. The nearly full moon now provided what light was left.\n\nDan and Kaitlyn shared lusty looks when not viewing the local lights that reflected off the water. Over this same period of time, Amber had become distracted by two older men who had recently arrived and were seated a couple tables away. Both the, apparently drunk, men were seated facing Amber's way. Neighboring tables were wincing, and glaring at the two vocal men.\n\nKaitlyn noticed it first; the change on Amber's face. Dan caught Kaitlyn's look, and turned to look at Amber. The change in her was quite apparent. He likened her look to that of contained fury.\n\n\"Amber, are you all right?\"\n\n\"Yeah, but they aren't going to be!\" she growled. She turned her chair.\n\nDan grabbed her arm. \"Where are you going!?\"\n\nAmber spat out the words, \"There are two...dick wads...over there think Kat &amp; I are a couple of cheap whores, who should be on our hands and knees, begging for their cocks. And they think you are too stupid to even know what to do with our...pussies.\" Amber's face gained a malicious grin, and then she said to Dan, \"I read lips, too! You two stay here, I will be back shortly.\"\n\nAmber bolted up from the chair, breaking Dan's hand loose. Then she paused to compose her face.\n\nDan started to turn his chair, when he felt Kaitlyn's firm grip him on his arm. He jerked around to her, and saw her calmly sign, \"Just wait. She will be fine.\"\n\nAmber faked a sexy smile, and did her best runway model walk over to the two men. The two men's faces gleamed, and the bulkier one said, \"Hey babe, you comin' over for some real action?\"\n\nShe bent and put her hands on the table. Both men's eye's fixed on her jiggling, nearly exposed, chest.\n\n\"I read lips, you two fucking pieces of shit! We are not whores, and even if I was, I wouldn't touch your measly, Viagra-powered dicks for a million dollars. Given your wedding rings, I assume you two have wives that won't let you two slime balls touch their bodies, either. And if you think I would crawl and beg for any man's cock....\n\nThe bulkier man shouted, \"BITCH!\" while he jumped up from his chair.\n\nDan jerked in his chair, but felt Kaitlyn's grip tighten. He settled, but stayed tense as he watched.\n\nAmber saw the bulkier man's shoulder and elbow pull back, with an open palm. \"Thank you\" she said to herself, as she saw the slap coming a mile away. She easily blocked his arm, and then grabbed his hand and bent it back at his wrist. The man yelped in surprise and pain, and then dropped back to his seat.\n\nThe other man at the table yelled, \"HEY!\" and started to reach for Amber. She had prepared for this too, and mashed her heel onto his foot. He yelled in pain, his arm retracting.\n\nA shaking voice beside her said, \"I am the manager. Is there a problem here?\"\n\n\"DUH!\" Amber shot back. \"These two testosterone clowns think my friend and I are for sale, and that we should be begging at their feet for the privilege of...entertaining their manhood.\"\n\n\"Bitch, I am gonna...\" barked the bulkier man, his face still red and contorted from the pain of Amber's grip on his wrist.\n\n\"Another word, and I will have you charged with assault,\" Amber growled, \"And another move, and I will break this chicken wrist, you fuckin' misogynist!\"\n\nAmber looked around to see the manager and the several staff surrounding the table.\n\n\"Sirs,\" the manager said, \"you are no longer welcome at this restaurant, now, or at any time in the future. Your bill will be taken care. Please leave immediately, or I will call the police.\"\n\n\"The two men echoed, \"Okay, okay, we're going.\" Amber let go of his wrist.\n\nAs the men were escorted out by the staff, the manager walked Amber back to her table. \"I am so sorry, miss,\" he said, to a background of applause.\n\n\"It wasn't your fault, and you handled it very nicely,\" Amber said, \"Thank you.\" She sat in the chair that he had pulled out for her, and let out a big sigh.\n\nThe manager said, \"And, of course, your meal is on the house.\"\n\n\"Oh, that seems too generous,\" she said, then added a bit conspiratorially, \"Actually, I rather enjoyed myself!\"\n\nThe manager quickly laughed before reestablishing his composure. He waved to the server, who came over, and the manager drew a circle over the table. The server nodded and promptly left.\n\nAmber looked at Dan and Kaitlyn, \"How about lunch here, tomorrow, my real birthday?\"\n\nKaitlyn happily nodded, and Dan nodded, too, with a deep sigh of his own, from tension he released.\n\n\"Deal?\" Amber asked the manager.\n\n\"More than fair,\" the manager said, \"Anything you want, plus all liquor tonight is complimentary as well.\"\n\nKaitlyn knocked on the table, and everyone looked at her. She signed, \"Are bikinis allowed on the deck, at lunch? Amber translated the question to the manager.\n\n\"They certainly are, and you two would be a lovely addition to the scenery,\" the manager added, with a wink.\n\nWith that, the manager excused himself just as the server came back with three more Sambucas, which were quickly lit.\n\nKaitlyn tapped her glass, once the flames were out, and signed, \"To Amber's courage!\" and raised her glass. Dan raised his glass to that. Amber acknowledged them with a smile as they sipped.\n\n\"God, you had me worried!\" Dan said.\n\n\"Sorry,\" Amber replied, a bit shyly, \"I forgot you didn't now.\" Having waited the proper time, she now sipped her Sambuca.\n\n\"What?\"\n\n\"That my dad was a career police detective, and I am a second degree black belt.\"\n\n\"Yeah, that would have helped my adrenaline level, if I had known that before you took off!\"\n\n\"Again, sorry,\" Amber said, and put her palm on his cheek.\n\nDan was a bit surprised with Amber's touch, and that at the same time, Kaitlyn rested her hand on his. Amber retracted her hand, and they all took their time finishing their Sambuca.\n\nHe said they had better get back, as it was nearly 9 PM, and they would be traveling slower in the dark. He indicated to the server to bring the bill, and then fended off Amber's demands to share the cost.\n\nWhen he finally convinced Amber of his sincerity in paying the entire bill, Amber casually leaned over and kissed him, and said \"Thank you for one of the best evenings I have ever had.\"\n\nDan momentarily froze, and then looked at Kaitlyn, who looked very odd, like she was trying to suppress some strong expression on her face.\n\nThe bill paid, they walked to the boat. Dan assisted their boarding, and they donned the windbreakers, while Dan started the motor, and then untied the mooring ropes.\n\nDan pushed off, flipped on the marker lights, and then idled away from the docks. \"Can you pull in the fenders,\" Dan asked.\n\nKaitlyn could not see his lips well in the dark, but saw Amber pull up the rope of one of the fenders, so she pulled up the other one.\n\nOnce clear, he brought the Cobalt up to a deep plane at about 25 mph, at which point the bow dropped back down for better visibility. There was plenty of moonlight, and he knew the way back quite well.\n\nDan saw Kaitlyn, standing by the windshield, facing back, smiling at him, her braided hair blown around her neck. He felt Amber's hands on his shoulders, and assumed she was standing on her knees, behind him. Dan saw Kaitlyn gesturing to Amber, but could not see what she was doing well enough, with what little light there was. He could not see Amber shaking her head, and mouthing \"No!\"\n\nWhatever conversation they were having, Dan could not both drive and ponder fully, as they cruised through the night. Their boat was the only sound they heard, and the only movement they saw on the glassy smooth waters.\n\nDan saw Kaitlyn looking calm, and then she pointed above his head. When he looked up, Amber's breasts pressed against the back of his head as she leaned down to kiss his forehead. When his head dropped back down, he saw Kaitlyn smile and wink at him, and felt Amber pat his shoulder's twice.\n\nHe wondered what all this attention from Amber was about. \"Sure, it was her birthday dinner,\" he thought, \"but it seems more than that, and Kaitlyn seems to be complicit in whatever is going on.\"\n\nShortly after the forehead kiss, Amber bent down toward Dan's ear and said, \"Uh oh, I see that look!\"\n\nDan looked at Kaitlyn and saw her slipping off her windbreaker. Then she untied her wrap dress, and tucked her clothing into a storage pocket. Dan watched as she moved her naked body past the two access panels to the front. He saw her stand, lean forward, hands on bow rail, and watched her braided hair thrash in the quiet, cool wind. He could imagine the delight in her eyes.\n\nHe shook his head at the thought of her delight, forgetting that this movement would rub against his mammary headrest. He felt Amber lean down, and when she did, he said to her, \"That is the woman I have fallen in love with.\"\n\nAmber replied, to his ear, and said \"And she loves you, so much. Don't forget that, even when she is being...extremely...generous.\"\n\nDan pondered that response, too, as they neared the Tahoe Tavern pier. Kaitlyn moved back behind the windshield, grinning ear to ear, as the moon lit her lovely body, and then she put her dress and windbreaker back on.\n\nShortly, they docked and he helped the girls out. \"Give me a few minutes: I have to put the boat on the buoy.\" He tied the tender dinghy to the stern, and idled around to his buoy. He secured the Cobalt, and then rowed the tender back to the dock.\n\nAs he met the girls, he could see, in the dock's soft lighting, that Kaitlyn wanted to say something.\n\nKaitlyn signed, \"I am a little drunk. Hold me up, please?\"\n\nHe turned looked to Amber, who said, \"Me too, please?\"\n\nDan smiled, and went between them, putting an arm around each of their shoulders.\n\nAmber put her arm around Dan's waist, and Kaitlyn slipped a hand into Dan's back pocket, and squeezed his ass. They walked the length of the pier, and finally separated because they had to go up the stairs, which they did, all holding onto each other.\n\n---- Lake Tahoe at the Condo -- Friday Night ----\n\nWhen they got back into the condo, they all hung up their windbreakers, and agreed they were tired, and would head off to bed. Kaitlyn started unbraiding her hair. Everyone went upstairs, and headed into their bedrooms.\n\nAs soon as their bedroom door closed, Kaitlyn whipped off her dress, and signed, \"I have had a great evening, so far.\"\n\n\"I will see what I can do to keep your enjoyment going,\" Dan said, with a big grin.\n\n\"Why don't you start right here,\" she said, as she spread eagled her legs on the king sized bed.\n\nDan quickly disrobed, and dropped down to run his tongue through her folds.\n\nShe soon had to retract her legs to put her feet on the top of the mattress, as her legs were already starting to shake.\n\nDan continued, putting her through two orgasms, before he entered her.\n\nShe wanted to be a tiger this night, and immediately clamped his shaft. Kaitlyn tried to keep her focus long enough to watch him cum. She barely made it, as a few seconds after he stopped, deep within her, her own body surprised her during that calm moment, as is burst out in shudders, and she held on for the bliss that followed.\n\nAs they laid there, resting in pleasure, Kaitlyn looked at the clock, and saw it was 12:03. She got up, and wetted a wash cloth with warm water, ringed it and brought it to Dan to clean himself. She waited as he did, and then cleaned herself.\n\nShe put the washcloth in the bathroom, and moved to the foot of the bed. Kaitlyn looked at Dan with a huge twinkle in her eyes, and signed, \"I love you so much. Do you trust me when I say that my love for you will never change?\"\n\n\"Uh...Yes...Of course,\" he said, a bit puzzled by the nature of the question, and at this time of the night.\n\nKaitlyn opened the bedroom door and went out, still naked. A minute later, she walked back in, leading Amber, who was dressed in a mid-thigh length night shirt. Amber's eyes were down.\n\nDan was startled, and looked at Kaitlyn's grinning face.\n\nKaitlyn signed, \"I wanted to give Amber her birthday present now, if you agree.\"\n\nDan fumbled, \"Well...uh...sure...but where is her present?\"\n\nKaitlyn's grin grew bigger, her eyes sparkled in a look beyond lust, and she bounced on her toes. She signed, \"It is you!\"\n\nDumbfounded, Dan looked at Kaitlyn: There was no question, she was serious. \"So you want me to make love to Amber...tonight?\"\n\n\"Tonight, this morning...I want you to be hers all day!\" Kaitlyn signed.\n\nAmber's eyes looked up at Dan, full of hope.\n\nDan scooted to sit up in the bed. \"Why don't you two come and sit on the bed, and let me get my head around this?\"\n\nKaitlyn and Amber sat on the edge of the bed, as he requested.\n\nDan looked at Amber, \"Are you okay with this?\"\n\nAmber looked right at him, \"Danny boy, I have had the hots for you, as long as I have known you...and before there were the office rumors about you,\" she said, giggling at the last part.\n\nAmber continued, \"But I always thought that you and Kaitlyn were a great match and that she really needed you in her life. I like you a lot, but, moreover, I have lusted for you in my bed. But, I had no intention of taking any action to move that idea forward. I so enjoyed our friendship, and did not want to mess that up.\"\n\nAmber went on, \"That we are at this moment, is all due to Sinful, here: This wonderful, loving friend, who wants me to have what I have longed for, even if it is the man she loves. I warned you about her surprises, and her generosity.\"\n\nKaitlyn had a huge smile, and bounced on the bed, turning her twinkling eyes to see what Dan would say.\n\n\"I...I am...well, quite conflicted,\" Dan sighed, \"This is so beyond any reality I ever imagined; having the woman I love, dearly, urging me take another woman, her best friend, and show her all the passion I have for her...Sinful...if I understand correctly?\"\n\nKaitlyn nodded vigorously, looked at Amber, and then back at Dan. 'Sinful' signed, \"Whatever Amber wants and whatever you think will please her, no exceptions. And I will never have one moment of regret, unless you do not put your whole self into pleasing her...even if you have to totally ignore me for the whole day.\"\n\n\"God, this feels strange agreeing to this, he said, \"But, it also is quite tantalizing, now that I can give myself permission to think about it. I have lusted for you, too, Amber, but did not want to mess up our good friendship, either. Somehow, I think doing it this way may workout to our benefit.\"\n\nAmber spoke, \"It is getting pretty late, and it would seem odd just to jump into this, so may I suggest that we get some sleep...all three of us...here...and, as they say 'get a fresh start on things' in the morning?\""
    ],
    "authorname": "GoneGray",
    "tags": [
        "big breasts",
        "big cock",
        "birthday",
        "consensual",
        "foreplay",
        "lake",
        "multiple orgasms",
        "romance",
        "sensual"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/her-eyes-did-the-talking"
}
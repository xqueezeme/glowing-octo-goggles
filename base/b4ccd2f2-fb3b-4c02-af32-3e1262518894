{
    "title": "Undying",
    "pages": [
        "Fate predestines two souls to love each other for an infinite number of lifetimes. That's the storyline of my last post, \"Timeless.\" Most of the people who read it realized that it was a trilogy. But I was on deadline for a book in my day-job and Randi's closing date was fast approaching. My buddy RichardGerald told me to finish the damn story and I finally had some time. So, I cleaned up the first two parts and added the missing section. I hope this satisfies my six regular readers and the people with the pitchforks and torches who were not amused by the ending of the story this replaces... Thanks for reading me- DT\n\nUNDYING\n\nONE STOP ON THE RIVER OF TIME\n\nNolan was the best horseman in the army. So, the toffs were using him as a galloper. He'd been up on the Sapoun\u00e9 Heights all morning. Now, he was lathering his horse, as he rode helter-skelter down the escarpment. Whatever had gotten up his ass was important.\n\nIt was chilly and overcast, like most fall days in the Crimea, and the Brigade was sitting in the grey and humid weather; nervously awaiting our fate. The Heavies had just seen off a swarm of Russian cavalry up on the Causeway and it looked like it would be our turn next.\n\nNolan was headed directly for that fat clown Bingham. I thought, \"This isn't going to go well,\" since Nolan had nothing but contempt for George Bingham, third Earl of Lucan. Nolan's scorn was well placed. Neither Lucan, nor his preening weasel of a brother-in-law Cardigan, should have been leading a troop of blind monkeys, let alone the entire cavalry corps. But a corrupt system, one that valued aristocracy over ability, had put both of them in charge.\n\nNolan skidded his horse to a melodramatic stop and handed Lucan the order. It was clear that Lucan didn't like it. He said, \"This order is useless and dangerous without infantry support.\" Nolan said sneeringly, \"Lord Raglan's orders are that the cavalry should attack immediately.\"\n\nLucan blustered, \"Attack, sir! Attack what? What guns, sir?\" Nolan waved his hand vaguely up the valley and said with disrespect dripping off of every syllable: \"There, my lord, is your enemy! There are your guns!\" Lucan peered in the direction Nolan indicated. There was a Russian battery visible at the far end of the valley, perhaps a mile distant.\n\nLucan was stupid, even by hereditary lord standards, and Nolan's insolent tone clearly infuriated him. So, rather than ordering the galloper to clarify Raglan's intent, as he should have; the bungling fool nodded in Cardigan's direction and simply told Nolan to deliver it. That sealed our fate.\n\nNormally, orders are handed directly from the superior to the recipient. That way their purpose can be explained. But Lucan and Cardigan cordially hated each other. Cardigan's view of Lucan had something to do with Lucan's fondness for touching up his wife; who was Cardigan's sister. While, Lucan detested Cardigan because he was an all-around profligate sod.\n\nI had already had far too much experience with James Brudenell, 7th Earl of Cardigan. That was the reason why I was sitting in front of the \"Death or Glory\" boys when Nolan, rather than Lucan, gave the order to Cardigan.\n\nCardigan, quite rightly, objected to what was plainly a very bad idea. The valley that we were being ordered to charge down, was lined with Russian artillery. Raglan couldn't have possibly expected a successful attack. However, instead of clarifying Raglan's ACTUAL intentions Nolan asked Cardigan if he was afraid to carry the order out.\n\nThat was the worst thing Nolan could have said. I heard Cardigan shout, \"By God!! If I come through this alive, I'll have you court-martialed for speaking to me in that manner.\" Nolan laughed disdainfully, turned and trotted over to his friend Morris, who was next to me in front of the Light Brigade. Nolan asked Morris for permission to accompany the charge. I would've gladly given up my place. Since it was clear that the north valley at Balaclava was a potential slaughterhouse.\n\nMeanwhile, Cardigan sent an aide-de-camp over to query Lucan about what to do. That brought Lucan back in a huff. Old fiddle-faddle came riding up sputtering angrily, pointed at the distant Russian guns and shouted, \"Lord Cardigan. You will attack the Russians in the valley.\" Cardigan answered back with irritation in his voice, \"Certainly, my Lord. But allow me to point out that there is a battery in front, a battery on each flank, and the ground is covered with Russian riflemen.\" In other words, it was a death trap.\n\nLucan replied, \"I cannot help that. It is Lord Raglan's positive order that the Light Brigade is to attack the enemy.\" So, Cardigan sighed exasperated, turned to his trumpeter and said. \"Sound the advance!\" The 17th Lancers, were at the front of the brigade, wearing our tight-fitting blue uniforms and striking czapka style Uhlan helmets. A lot of choices about regiment were based on the cut of the uniform and the 17th's was extraordinarily dashing. We carried long lances instead of carbines. They looked impressive at the charge. But they were unwieldy in a fight.\n\nThe process was well-understood; walk--trot--gallop-charge. We'd just accelerated to the trot when Nolan raced in front of the ranks agitatedly waving his sword. He yelled, \"Wheel to the right my Lord. The guns are up there.\" He must have realized that Cardigan didn't plan to attack up the Causeway heights to our south; as Raglan had intended. The right-wheel would have saved us. But just then, a shell burst next to Nolan. He gave a girlish shriek and his horse turned and galloped back through the advancing squadrons. Nolan was slumped limp in the saddle. He slid to the ground as we advanced past him.\n\nThe Queen's toady Tennyson tried to exalt the senselessness carnage, \"Cannon to right of them, cannon to left of them, cannon in front of them, volleyed and thundered.\" Seems splendid doesn't it? Well, that doesn't come close to describing the reality of the situation. We were sitting ducks for the massed Russian artillery. But ours was not to reason why, ours was to do or die; and die we did.\n\nI was frightened out of my wits. The only thing that kept me at the front of the charge was my greater fear of showing the white feather. Cowardice was the one unforgivable sin in Victorian society. Death was preferable. Hence, it was fear of dishonor, not bravery, that motivated me into the valley of death.\n\nReality blurred. My vision narrowed to the space between my horse's ears. Even the maelstrom of noise was muted. I could hear the sound of balls and cannon shot hitting individual troopers. There were grunts, cries and even wails as men were shot out of their saddles. Macabre things happened. Big, bluff Troop-Sergeant-Major Thatcher had his head totally taken off by a solid shot. His headless corpse continued to ride for another fifty yards still holding his lance braced to the front. It was ghoulish.\n\nWe got to perhaps eighty yards from the battery, when the Russians fired a point-blank salvo of grapeshot. The sound of grape scything past was indescribable. It cut through our front-rank and any person's survival was a matter of chance. Fortunately, it wasn't my day. Unfortunately, it wasn't Cardigan's either.\n\nOnly the good die young. That must be true. Because Cardigan reached the guns unscathed. Then, he turned and blithely trotted back up the valley. As he passed through what was left of his Brigade, he exclaimed, \"Men it was a mad-brained trick, but no fault of mine.\" Then, he retired to his yacht, which was anchored in Balaclava Bay, for a bit of caviar and champagne with his friends. He never lived that craven act down.\n\nThere were perhaps forty men left in the squadron as we swept into the battery, cutting and lancing the Russian gunners. It was our turn now. I hacked one Russian in the back as he tried to run. Then, I turned and sabered an officer who was trying to rally his men. Unfortunately, I used the point, the sabre stuck and the weight of the man's falling body knocked it out of my hand.\n\nSuddenly, I found myself riding headlong into a teeming mass of Cossacks; holding nothing more lethal than the reins of my panicked horse. William Howard Russell, described it for the Times, \"Gallant Lambert, his noble heart broken by the death of his comrades, charged alone into the Russian horde, and was lost.\" It's always nice to have the press on your side.\n\nI was frantically yanking on the reins, desperately trying to turn my foolish animal around, when I was swarmed by a host of white uniforms and savage beards and a cultured voice said in perfect English, \"You fought well. But now you are my prisoner.\"\n\n*****\n\nMy old man bought me a Cornet's commission in the Eleventh Hussars, on the day I turned sixteen. I was the second son. So, I wouldn't inherit. Still, I was happy about my new career. A Cornet normally cost eight hundred pounds. But Father put up a cool thousand, to get me into the Cherrypickers. The nickname supposedly comes from an eponymous event during Wellington's peninsular campaign. But the uniforms are so impressive that there was another meaning to the term \"cherrypicker.\" The 11th Hussars had by far the best turnout, black coat with a lot of gold facing, red trousers and jaunty black shako with a white plume.\n\nBeing a Cornet meant I carried the troop standard. It was the best place to begin my army career. It put me above all of the common soldiers. But it didn't require much in the way of responsibility. So, I spent my time swanning around Aldershot and Whitehall and attending balls in Winchester and London.\n\nI wanted to try it on with Ophelia the minute I laid eyes on her. My bloodlines are Saxon. So, I was taller than most, big, blond and sturdy. I must have looked splendid in my uniform. Ophelia was of Norman stock, slim and beautiful, with a delicate oval face, huge brown eyes and porcelain complexion.\n\nShe wore the fashion of the time, a scoop front dress that showed off her tiny waist and her pert little boobies. Her thick raven hair was pinned into loops and swirls like every other woman in attendance.\n\nThe orchestra was playing a country air. I sauntered over and asked if she would partner me in a reel. She blushed furiously as she said, \"My pleasure gallant sir.\" She never took her beautiful, luminous eyes off mine as we turned and wove our way through the intricacies of the dance. There was promise in them.\n\nWhen the dance ended, I politely took her hand, bowed and said, \"The regiment is being reviewed at Whitehall on the morrow. It would be my honor if you would attend it.\" Her eyes sparkled as she said, \"And what will become of me afterward kind sir?\" I tried to keep a straight face as I said, \"Perhaps you and your chaperone could visit me for a light dinner.\"\n\nOphelia was sitting with the rest of the beauties as we wheeled our mounts around Horse Guards Parade. The band played martial airs. It was a hot, sunny summer day and the ladies were all shaded by frilly umbrellas. The servants ran back and forth with cool drinks as we did our mounted drills. We were all sweating buckets under our heavy gear.\n\nAs I sat in front of the eighty men in my troop, I caught Ophelia's eye and winked. She blushed, gave me a coquettish smile and turned to the man and woman she was standing with. I already knew that the man was her brother-in-law and the woman was her sister. No proper Victorian lady would meet a man unaccompanied.\n\nI joined the party after I'd handed my mount to the stable boy. As I mentioned, I'm taller than most. So, I towered over Ophelia in my knee-high riding boots and shako. She rushed up to me with her superb eyes full of wonderment and said, \"You look splendid.\" I said nonchalantly. Thank you m'dear;\" trying to hide what had sprung up in my skin-tight cherrypicker pants.\n\nShe was in a frilly white empire-waisted dress that pushed her tits out like the backs of two particularly round and shapely nesting doves. I took the time to gander down the long narrow valley between those splendid peaks. She caught me looking hungrily at them. Instead of slapping my face she gave me an insolent smile. That was encouraging.\n\nThe four of us dined on eel pie at the Clarence, just off Whitehall and thence to St. James Park for a stroll in the splendid English summer evening. Ophelia seized my arm every chance she got. She would look at me soulfully with her beautiful brown eyes. I could feel her intense heat. Then afterward, she impulsively kissed me, as I was putting her in the hired coach to Belgravia. Proper Victorian ladies do not kiss strange men on a first date. That was promising indeed.\n\nOver the next two months, I was a constant presence at Ophelia's family house. It was important to get to know the family since we were officially courting, specifically her father. Ophelia's father had earned his title the hard way; by leveraging his shady business practices into enough wealth to be \"made\" Baron by the Queen. He was a miserable old skinflint. But he loved his daughter.\n\nHe had reservations about me, because my family was only landed gentry. But at least he didn't set the hounds loose when I visited; much as I suspected he would have liked to. One evening, we were taking brandy and cigars after dinner. That was suspicious in-and-of-itself. Since, the great man rarely condescended to recognize that I existed. As soon as the women withdrew, leaving just us fellows, the Baron said, \"I need to ask you a question my good man.\"\n\nNothing like starting out a conversation by insulting me. But he was a peer and I was a humble cavalry Cornet. So, I said in my best bright-eyed-and-bushy-tailed voice, \"Yes sir.\" He continued condescendingly, \"My brainless daughter claims she can't live without you.\" The little voice in my head capered and said, \"I knew it!!\"\n\nHe looked at me with the same gimlet stare he had used to cheat so many people out of their hard-earned coin and said, \"So I must find out your intentions.\" That shot a jolt of panic down my spine. How much did he know?\n\n*****\n\nOphelia and I had ridden out to picnic on Hampstead Heath the weekend before. It was a beautiful English summer day. We had chosen a shady grove to spread out the blanket and open the bubbly. We had consumed a bottle of Moet and were feeling a might peckish. So, Ophelia sent her servant back to the house to fetch a picnic lunch.\n\nHis absence left us unchaperoned for the first time in our relationship. Ophelia was lying back, bonnet off commenting on the cloud shapes in the bright blue English sky. I lay next to her mischievously contradicting her. She said, \"Oh look darling. That one looks like an angel!!\" I said gruffly, \"Looks more like a sheep to me.\"\n\nShe slapped my arm. I tickled her. She got an odd glassy-eyed look. I gazed into those eyes and I could see flaming lust. I glanced around. There was nobody in sight. I took her slim body in my arms and made a classic ravisher's noise as I kissed her for real. There was no hesitation as her mouth opened and our tongues dueled.\n\nShe gave a little cry and tried to drag me between her widespread legs. I thought, \"Finally!!\" But that was just wishful thinking until we could clear the decks below. I said, \"Are you sure?\" Because it was going to take a little while before we would be able to properly come-to-grips.\n\nThose first moments were NOT romantic. I was wearing my skintight Cherrypicker pants and she was fortified by vast ramparts of crinoline petticoats and frilly underthings. She was making inarticulate noises as she frantically shucked her impedimenta and it was good that she was doing that. Because I wouldn't have known where to start. My pants were secured by a dozen buttons. I hurriedly unfastened enough to hastily drag them down my legs.\n\nI positioned myself with the ram touching the wall. Under the classic rules of engagement, there would be no-quarter after that. I looked down on the loveliest sight a man has ever beheld. Ophelia's eyes were wide open. She was staring at me with a need that was almost menacing. I was the big, bluff cavalry trooper and she was a mere slip of a fair maiden. But in that moment, it was clear that she was the predator and I was the prey.\n\nEvery man in that era viewed women as delicate things who only indulged in the obscenity of sex to satisfy men's lustful urges. No virtuous woman was EVER supposed to enjoy it. Well Ophelia had obviously never read that chapter in the book of etiquette. She reached between us and impatiently jammed me into a passage that was lubricated by boiling hot honey. I slid right to the top without encountering any obstruction. That was a surprise. But what happened next snuffed out any thoughts about her virginity.\n\nShe gave a gasp that was probably heard down at Canary Wharf, her eyes rolled up in her head, she elevated her hips, wrapped her legs around my ass, like she was getting her riding seat, and we set off at the gallop. Once we'd set to partners, it was a long and arduous chase. Victorian gentlemen learned about sex from the ladies of the night. So, by my twentieth year I had accumulated extensive experience in the commercial act of love. Still, this was new and totally unexplored territory.\n\nFor one thing, Victorian whores don't make the animal noises that my beloved was producing. They also don't sing the praises of the act itself. I would occasionally get a \"hurry up!!\" from one of my rented rides, especially if I was taking up too much of the lady's time. But I'd never heard one of them demand through gritted teeth, \"Nearly there, don't stop!!\"\n\nI'd also never experienced what came next. Ophelia made a loud cry and spasmed, her passage began chaotic fluttering and she started to tremble and shake like she had the ague. All-the-while her eyes were jammed shut and her mouth was open in a silent scream. It scared me to death. The only time I had seen a similar expression was when trooper Blake shattered his leg after his horse fell on him. Was she in that kind of agony?\n\nAt that precise moment though, I fired a roaring broadside that obliterated all rational thought. Our mutual shaking, hollering, shrieking, and quivering went on for an interminable period of time. Then there was the eerie stillness that descends on the battlefield after the shooting has stopped. Ophelia was lying on her fanned-out mass of raven hair, head cocked to one side and a rope of drool hanging out of her mouth. I was panting and blowing like a stud bull, sweat plastering my hair to my head, with a rip in my shirt that Ophelia had apparently created with her fingernails.\n\nWe reassembled our wardrobe to a point where there was a possibility that her father wouldn't horsewhip me when I returned his daughter. But I still had to face the music. I turned to her; she was gazing at me with the unblinking eyes of a bird of prey. She said firmly, \"Now we are married!!\" Her utter certainty was intimidating. Victorian men considered women to be frivolous creatures. Maybe that was a misperception?\n\n*****\n\nThat was why I was in a panic one week later when Ophelia's father, the Baron Litchfield, asked me about my intentions. I would have said anything to get myself out of the situation. But at least I was smart enough to do a little probing. I said, \"My intentions Sir, are to do the honorable thing.\"\n\nI assumed he would take it as a statement of intent to marry his daughter after a long courtship. Rather than what I was actually saying, which was that I'd marry her if she was with child. The Baron looked at me like I was an idiot and said, \"Ophelia told me that you asked her to marry her last Saturday. Did she misunderstand you?\"\n\nThe question was posed with real menace in his voice. I was trapped. If I said, \"Yes indeed, she mistook me.\" I was going to sound like the sort of cad who makes offers to women that they don't intend to keep. If I said, \"No she didn't,\" I was going to be a married man.",
        "I tried a diversion by stating the obvious. I said, \"It would be my honor to marry your daughter and I will certainly do so as soon as we come to an agreement about the dowry.\" I knew that would set the old miser down a new path. He blustered and said, \"So is this attachment based on my money, Sir?\"\n\nI shrugged and said, \"As you've pointed out many times, I am not well-off. You DO want to keep your daughter in the style to which she has become accustomed.\" He could see that I was asking for a big bag of cash. He also might have considered me a gold-digging scoundrel. But the old reprobate loved his daughter. So, he said with hesitation, \"All right then. I agree to ensure your livelihood and future.\" With that, I was a married man.\n\nWhat I'm describing might not sound romantic. But, in Victorian England, marriages within a certain social class were financial transactions. A gentleman never wanted to work in trade; or even worse, with his hands. So, what we had been discussing wasn't odd for the times. What WAS odd was the fact that I had been manipulated into it by a mere slip of a girl.\n\n*****\n\nOphelia and I set up housekeeping in a lovely Bloomsbury mansion. It was a short walk to Horse Guards, where I was permanently posted. The Baron Litchfield's money had ensured that. I was now a Lieutenant with the 11th. That was also purchased, not earned.\n\nAll-in-all married life was acceptable duty. Ophelia was a perfect wife, submissive in public and a wild animal in the bedroom. Victorians never discussed sexual topics, on pain of ostracism from society. But from whatever conversations I overheard, or drunken comments that were made, it was clear that my wife had an exceptional sexual appetite.\n\nHer lack of a hymen was a bit suspicious. But then again, day-in-and-day-out she was a perfectly docile little Victorian spouse. Of course, she couldn't cook, or clean. That was for the servants anyhow. Still, Ophelia was an asset at every ball and social event, flirting impeccably within the ironbound social dictates of our era. Even so, the ardent quality that the romantic poets raved about was totally lacking from our marriage.\n\nI didn't have any sense that I was missing out. Ophelia was a beauty and that added to my status with the other men. And she could sail nicely over all the jumps in the boudoir steeplechase. We got along companionably at the breakfast and dinner table. But then again; in Victorian England, men were men, and women were women. So, we had little to talk about outside of the contents of the Times.\n\nOphelia's money underwrote my manly pursuits; drinking and gambling at Whites, horse betting at Epsom and the occasional drunken romp at a high-class London knocking shop. While she spent her time in womanly activities, which mostly involved tea and mindless chatter with the other wives. You might think we were a couple of self-involved, supercilious twits. That would probably be a fair assessment. But then again, marriage was something our class did to fit into society. I had seen very few marriages that were built around abiding love.\n\nOphelia, as was her duty, gave me all of the necessary respect. My opinions were her opinions and she was properly submissive in public. Yet, the money was Ophelia's, not mine. So, I learned to tread lightly when it came to flaunting my status as the man of the house. The prior year had been full of excited speculation about the Russians and the Ottomans, who had been at each other's throats since early 1853. Hence, not surprisingly, the word came down in March of 1854 that it was to be war.\n\nThe night of the 28th was rainy but the crowds were in the streets, all celebrating the declaration. The Regiment held a small fete, just the officers. Even Cardigan himself showed up.\n\nThere was singing, toasting and extravagant boasts about how we would give those Ruskis a good hiding. As usual, I had liberally imbibed in the rum punch. Ophelia sat sipping champers in a cloud of ladies and acting like the belle of the ball. She would occasionally exchange companionable glances with me.\n\nI was over in the corner, with Lieutenant Cooper and Captain Fairfield, wittily assessing the question of whether Cardigan had been dropped on his head as a baby. That was the point where James Brudenell, 7th Earl of Cardigan himself, condescended to join our lowly band.\n\nHe was a peacock; a little bandy rooster, who didn't quite come up to my mustache. But his self-opinion and arrogance made him ten feet tall. The conceited ratbag said with forced jovially, \"Wambert, Haw-haw!!\" His lisp was one of his less attractive features. Of course, nobody had the balls to tell him that. I wondered alarmed , \"What's this all about?!!\"\n\nBrudenell looked in Ophelia's direction and said covetously, \"Quite a wovewy woman don't cha know!!\" If anybody else had made that remark I would have dunked him upside down in the punch bowl. But since Cardigan was my commanding officer, I meekly agreed.\n\nHe looked at me with meaning and said, \"I'll be getting awong now.\" Then he walked purposely over to Ophelia bowed, and kissed her hand. She smiled politely as Cardigan indicated something on the other side of the room. They disappeared in the crowded ballroom. I just stood there. I was flabbergasted by the man's cheek. But there was nothing I could do short of calling him out. And inviting a peer of the realm to walk out with you simply didn't rise to the level of the offense. Plus, I knew that Ophelia could take care of herself.\n\nCooper said disgusted, \"Let's go somewhere else old man. This is getting preposterous.\" I readily agreed and we finished the night at Whites. They were still reveling in the streets when I took a Hansom back to our place in Bloomsbury. Honestly; for all I would've noticed there could have been a Russian invasion going on. I'd had a skin-full.\n\nI arrived home drunk most nights. But this was a personal best. I think Cardigan's attentions to Ophelia had caused that. I really didn't know what to think. 1850s society required women to be chaste and virtuous. Ophelia had exhibited nothing but Victorian rectitude in her daily life. Yet, she had an extreme fondness for pork and there was the troubling suspicion that she wasn't a virgin when I married her.\n\nI knew that Ophelia was prone to crushes, as she had originally been with me. And even though Cardigan was physically unimpressive, he was a clotheshorse, and a Peer of the Realm. I didn't know what the man intended. But it was clear that he had set his sights on Ophelia and she wasn't exactly discouraging him.\n\nI was half shot. So, I didn't bother to wake the staff, or let Ophelia know I was home. I just staggered upstairs and fell into bed, still clad in my tunic and breeches. I was woken an indeterminate period of time later, by the sound of a little night music. A woman was being absolutely rogered to death at the other end of the hall.\n\nLike every Victorian couple of a certain social class, Ophelia and I slept in separate rooms and the wanton cries were coming from the direction of her bedroom. I was still drunk as I opened the door and weaved-my-way down the hall, trying not to lurch into any side-tables, or knock off any of the garish Victorian bric-a-brac. If I had been a bit more sober, I might have paused when I got to Ophelia's chambers. But squiffy as I was, I just threw the door open and stood there swaying drunkenly, trying to grasp what I was seeing.\n\nBlimey!! My wife's bare legs were wrapped around the skinny ass of some half-naked chancer who was having at her like a demented Easter rabbit. She had her head thrown back, eyes screwed shut and mouth wide open in an obscene \"O.\" She was obviously experiencing an orgasm, thrashing in ecstasy and emitting loud shrieks as she came. Her noisy abandonment was what had alerted me to the presence of the fox in the henhouse.\n\nThe fact that I was being dishonored in my own abode sobered me up. I let out a roar of fury, strode three paces to the bed, seized the interloper by his waist. He was tiny. So, I easily lifted him off my wife and threw him backwards into the wall. He wavered there, stunned, rifle at present-arms. Then it discharged lewdly all over my fine Turkish rug. I could see in the lights from the streetlamps that it was Cardigan.\n\nHow many ways was this a total disaster? Let me count them. First and most obviously I had been cuckolded by my commanding officer. Second, although I would be well within my rights to beat the little bastard into a bloody pulp; I was a mere cavalry lieutenant. I would be trashing an influential member of the nobility. You can't win with the nobs, once they circle the wagons. Finally, and not insignificantly, Ophelia was the one with the money.\n\nWe all knew that the next few seconds would have a profound impact on our lives. Victorian society was unforgiving on the matter of infidelity; which was hypocritical in the extreme. Since, with the possible exception of Victoria herself, shagging other people's spouses was a common feature of Victorian life. I presume, that was the reason why exposing somebody else's adultery was viewed as such an egregious breach of good manners.\n\nEven worse, since I was the one who was cuckolded, and Ophelia was the slut in question; the person who would come off best in the ensuing scandal would be Cardigan. He might even be glorified in some of the more rakish circles, and Cardigan knew that.\n\nThe egotistical ass recovered quickly. He casually gathered his pants and boots, turned and walked out of the room. As his skinny butt vanished out the door he turned and cautioned with cool superiority, \"Wambert, not a word.\" His shrunken cock was coated with Ophelia's juices. It dangled obscenely as he stepped into his Cherrypicker pants and departed.\n\nI stood there fists clenched snorting like an angry bull. Ophelia was huddled at the head of her bed. She had gathered the bedclothes around her to hide her nakedness. She was glaring at me with a mixture of guilt, sadness and defiance. She thought that she had the whip hand when it came to our finances. She said accusingly, \"What are you doing here? I thought you would spend the night at Whites.\"\n\nI knew what I was going to do, and I was astonishingly calm doing it. I said, \"Well I didn't M'dear and that's your loss. You have dishonored me and your family by your wanton behavior and I will be discussing this with your father on the morrow.\" It was clear that was the LAST thing Ophelia wanted me to do. She wailed and said, \"It was just a dalliance, nothing more. He forced me. I was too weak and girlish to resist. I still love you with all of my heart and soul husband.\"\n\nI actually laughed outright and said, \"The only person you love is yourself, you spoiled little dollymop.\" I added grimly, \"Divorce would ruin both of us in society. So, we will just have to pretend nothing happened. But we are no longer married in any way. You are just a fellow resident of the same house. And if I EVER find you here with a lover, I will publish it in the Times. That is, after I've horsewhipped both of you naked down the street.\"\n\nWas I angry? Frankly, my only emotion was good riddance!! How could I be so cavalier? Well, Ophelia HAD dishonored me. But I'd never felt anything for her in the first place except trapped. The best I could say about our life together was that it was \"comfortable.\" I certainly didn't love her. Hence, it was easy to lapse into the sort of arrangement that our peers had; as long as both of us were discreet.\n\nThere was one crucial detail that I had to get out of the way. Given Cardigan's participation, I clearly couldn't stay in the 11th. That fact made me a lot unhappier than chucking my worthless whore of a wife. So, I called on Ophelia's father bright and early the next morning.\n\nBlackmail is such an ugly word. I like to view what happened as coming to an \"understanding.\" For my part, I agreed to behave as if nothing unfortunate had happened between me and the old skinflint's daughter. That would keep the lofty old fart's family out of scandal. In return he bought me a Captaincy in the Lancers. I also arranged a cozy permanent living for myself, independent of his daughter. That way the little cunny couldn't hold anything over my head.\n\nThat settled the matter. I didn't care what Ophelia did after that. We were both careful. We knew what even the slightest whiff of scandal would do. We even resumed marital relations. Ophelia was still the best fuck in town.\n\nShe DID fall pregnant. It was just before I departed for the Crimea. Her progeny later became a Bishop of the Anglican church. Hence, he was clearly not mine. My only association with Cardigan, after that fateful night, came when he took over command of the Light Brigade. We all know how that turned out.\n\n*****\n\nI was covered in sweat. Rivulets of it ran through the black powder grime on my face. I was exhausted and in shock. The Cossacks led me to a little holding area behind the Russian lines. They were reestablishing their batteries and picking up their own casualties.\n\nThe officer in charge walked over to the body that still had my saber sticking out of it. He put his foot on its chest and hauled the blade out, accompanied by a sucking sound. He casually wiped it on the dead man's uniform and muttered, \"krestyanski.\"\n\nThen, he walked back with the sword in his hand, gave it to me and said, \"You deserve to keep this. We thought you people were drunk, charging us like that. But you seem to be sober. So, you must be a very brave man.\"\n\nI had nearly pissed myself every time a shell burst. But I didn't think it was a good idea to share that with him. Instead, I said, \"The honor is yours sir,\" and handed it right back to him. He smiled engagingly and said, \"And he's also a gentleman. Come my friend. You will be my personal guest until you are exchanged.\"\n\nThat was how I met The Hetman Ivan Timofeyevich Razin. Razin was a tall martial looking man of sixty. The hairy, savages who had captured me were his Cossack cavalry. They were considered to be among the best light horse in Europe and Razin was the equivalent of a Cossack general. As a Hetman, Razin had huge estates in the fertile land west of Kursk. He was well educated, cultured and a true Russian aristocrat.\n\nThe Russians didn't have a rail system to speak of. Consequently, I was taken by boat up the Dnieper to Kiev, and from there to the Bojarski region of the Ukraine. I was considered to be a guest not a captive. It might seem strange that I was being treated so well, since I was an enemy combatant. But Razin was from the same social class as I was. So, we had more in common as \"gentlemen,\" than Razin had with his own troops; who were peasants.\n\nWe both knew that I would be exchanged for one of theirs. In fact, it was common to accord a captured officer the same courtesy that you gave an honored visitor. So, he brought me up to his estate. I was free to roam. I certainly wasn't going anywhere. Russia is vast. Napoleon lost an entire army trying to walk out of there.\n\nMy time spent on the estate was more of a vacation than it was captivity. I had comfortable quarters, plenty of food and my run of the place. The architecture was neo-classical, with the columns and frontage of a Greek temple. They bedded me down in the main facility, I hesitate to use the word \"house\" because it was larger than most of our civic buildings. I had a nice view across the lawns and all the servants catered to me.\n\nThere was one servant in particular, a little Russian dumpling. She was young, perhaps eighteen. But she had an insolent smile. huge bouncers and a big sturdy butt. It wasn't three days before I was riding her like West Australian at the Ascot Derby. She even whinnied when she came. She didn't speak English and I never knew her name. But her enthusiasm was matchless. Needless to say, I was enjoying my captivity immensely.\n\nWe'd just finished a strenuous bout in the linen closet, and I was wandering around the Great Hall looking at the trophies. Russian Hetmen must love to hunt. Because, there was an entire herd of antlers mounted on the wall. I was looking at an antique boar-spear when a melodious voice said in effortless English, \"Do you hunt?\" Luckily, I'd put the spear back in its rack. Otherwise I would have dropped it on my foot.\n\nThe source of the voice was a woman and my reaction to her was remarkable. Have you ever been in a situation where you felt like the entire course of your life was leading you to one inevitable point in time? Well, this was it.\n\nUp to that moment, I had been an unbridled libertine; whose only aim was to enhance his own pleasure. To me, women were nothing more than the means to my selfish ends. I never viewed them as having legitimate hopes, dreams and fears. Because frankly, they were just props in the egotistical drama of my existence.\n\nThen suddenly, the course of my life changed. Here was a person I felt the deepest empathy for. The feeling was complicated and subliminal. But it was a profound connection. I wanted to share my intimate thoughts with her. I wanted to be her partner. And inexplicably I also knew that she would be the only woman who would ever understand me.\n\nI could accept thinking that way; if we had been lifetime lovers. But my sense of contentment, the feeling of finally reaching safe-harbor, was utterly unnerving. That was because the woman was an ABSOLUTE, TOTAL STRANGER.\n\nShe was a true Russian beauty. Her long thick chestnut hair cascaded over her shoulders and down her back. It framed her perfectly proportioned heart shaped face. She had high cheekbones, a dainty, slightly snubbed patrician nose, full kissable lips and huge blue eyes. She was small, perhaps five two, with a dusky complexion. The contrast with the blue of her eyes was striking.\n\nAn uncomfortably long period of time elapsed, while we just gazed at each other. I stood there gaping like an idiot, with my heart beating like it had during the Charge. She was standing with one hand over her mouth and the other pressed against her delectable heaving bosom, looking just as poleaxed as I was. She finally said in a voice filled with wonderment, \"I feel like we've known each other forever. But I don't know your name.\"\n\nI mustered enough of my shattered reason to say, \"It's Lambert Madame; Captain Tom Lambert of the Queen's Seventeenth Lancers.\" I then bowed formally, without any of my customary rascally impudence. I had no idea what had come over me.\n\nShe was equally flustered. She said, \"I am the Grand Duchess Tatiana Gregorova.\" So, she was part of the royal family. She added still agitated, \"I am here to become acquainted with my fianc\u00e9, Count Aleksey Ivanovich.\"\n\nIvanovich was the only legitimate son of the Hetman; and a debauched little rodent he was. Razin had whelped over a hundred kids. But his wife, the Countess was short, hideously obese and more religious than the Patriarch of the Russian Orthodox Church. So, it was likely that little Aleksey was one-and-done for him.\n\nOn the other hand, Count Aleksey was nowhere near a proper match for this unearthly beautiful woman. Rather than being short and fat like his mother, he was short and frail. He DID have his mater's imperious eyes, weak chin, and prominent nose; which hovered over his rat fur mustache like a mountain ledge. He also had the Cossack aversion to bathing. So, he stank.\n\nAleksey's father was at the Crimean front, where all good Cossacks ought to be. However, Aleksey's mother had insisted that her twenty-five-year-old \"boy\" had a \"nervous condition\" that necessitated that he be kept away from unpleasant things. That was a genuine condition alright. We called it cowardice.\n\nSo, while the rest of his brethren were fighting us; Aleksey lounged around the palace; drinking with his equally decadent buddies and fucking anything with a functioning cunny. He especially had it in for me. Since, the girl I was galloping had initially been his plaything. Still, because he was a coward, he never actually confronted me.",
        "I glanced furtively around. Tatiana, and I were standing by ourselves in the Great Hall. It would have been the height of madness for a prisoner of war \"guest\" to be caught alone with the fianc\u00e9 of the Lord of the Manor's son; even if his father DID view him as a disgraceful little chickenshit. But I was inexorably drawn to this woman. I gestured toward one of the window alcoves. There would be some privacy without appearing to be clandestine. She followed me.\n\nWe faced each other. I could see the tentativeness on her face. I probably looked equally confused. My normal move in those situations would be to grab a tit in one hand and a buttock in the other and kiss her. Especially if the woman was as beautiful as Tatiana was. Amazingly, I was disgusted by even the THOUGHT of doing that. It would be a base and demeaning thing to do to the woman you loved.\n\nI said with humble respect, \"I realize that this is poor manners and I apologize for my boldness. But I feel as if we've known each other in a past life. I know that sounds mad. But I can't account for the compelling sense that I've experienced this before.\"\n\nHer splendid blue eyes registered astonishment. It was like I had read her mind. She blushed prettily and said, \"I don't understand what has happened either. But I feel exactly the same way. It is as if I know you intimately, and you are privy to my innermost secrets. How could this be when we have just met?\"\n\nI said jokingly, \"Maybe the Hindus are right. Maybe this was predestined.\" My skinflint father-in-law had invested heavily in the East India Company and General Anson was a relative of his. Anson had spouted that crap whenever he came from a John Company visit. He said that the Hindus believed that the soul was immortal. They called it karma.\n\nBy that logic, I suppose it was possible that I knew Tatiana in another life. But of course, that was foolish nonsense. The better explanation was that we fit each other's notions about the ideal mate. Still, I couldn't shake the sense that I had loved this woman since the time of the pyramids.\n\nShe was looking at me, eyes shining. She said, \"I am to marry the Hetman's son. Razin wants the connection to the royal family and my uncle, the Czar, needs his support.\" Marriages among the nobility were arranged based on political and economic advantage. If the affianced pair were attractive, all-the-better. But physical appeal was irrelevant.\n\nShe added still blushing, \"I know that what I am asking strains the bounds of propriety. But I feel the need to explore this further. I hope you feel the same way.\"\n\nAt that, she abruptly turned and walked toward the women's side of the building. When she entered the hallway, she stopped, turned, and gave me a longing glance. That look left me standing there musing in the bright sunlight coming through the eighteen-foot high, floor-to-ceiling windows.\n\nLife had always been easy for me. I was the second son, a military adventurer. I had no family ties. In fact, I'd never felt anything for anybody. Hence, I had zero personal attachments. Especially the kind that can break your heart.\n\nI had walked away from a faithless wife, because I hadn't actually loved her. I'd simply used my discovery of her in-flagrante to get what I wanted. I didn't see that as morally right, or wrong. It was just the way I did things. Now, there was no denying the reality that I had the irresistible desire to nurture, protect and cherish this mysterious new woman; that, at all costs.\n\nMy little servant friend confronted me as I walked to my rooms. It was obvious she was ready for a rematch. Normally, that was an offer I couldn't resist. Big luscious tits, bright wanton eyes and a mop of dirty blond hair. I shook my head unhappily and said, \"Nyet.\" She looked as confused as I felt.\n\n*****\n\nThe engagement ball was a month later. It was a grand gala, involving most of Tatiana's relatives. Czar Nicholas had just kicked over the traces and his son Alexander II was too busy arranging the end of the war. But every other species of royal was there.\n\nRazin had made it back after Sebastopol fell. He was holding court with the other Cossack nobility, pointedly ignoring his wife who was squatting toad-like among the ladies. Aleksey was lording it up with his usual pack of wastrels. He was already three sheets to the wind. I was standing alone, in my usual window alcove. It had been a very tough month.\n\nTatiana was never unchaperoned, and it would be suicidal for me attempt to talk to her if other people were present. She was a proper royal lady and a bargaining chip in the great game. So, her probity had to be absolutely assured. That assurance was provided by a collection of lady's servants, and guards, who accompanied her everywhere.\n\nThe war had ended badly for the Russians and none of them were in a mood to suffer the likes of me. So, my trying to woo her would not have been taken kindly. Hence, I had to watch the only woman I would ever love, go about the highly regulated process of getting to know Razin's depraved son.\n\nIt was a carefully choreographed dance. Everybody with a dog in the fight was watching the progression of things to ensure that there were no missteps. The two of them had been formally introduced the week before. That event wasn't a ceremonial dinner at the manor house. It was a diplomatic occasion that was held in front of ambassadors of the Czar and the Razin household.\n\nWe lesser-folk all stood around the great hall in a herd, watching the open space in front of the windows. I hadn't missed the fact that those were the same windows where Tatiana and I had first met; where the connection had been forged. Perhaps you have never known the painful yearning that I experienced. You would have to be utterly devoted to somebody to feel that way. Yet, if you have ever suffered that kind of heartache, you know exactly how I felt.\n\nYou want to be with the love of your life every second of every day. You want to bask in the light of your mutual passion. You want to banter and exchange your deepest thoughts. Most importantly, you want the constant reassurance that the other person feels the same way about you. I guess that describes the emotion called love. And sadly, I never got close enough to my love to as much as exchange a glance.\n\nIn fact, Tatiana and I had never even been in the same room until the introduction ceremony and it was killing me. It was like I had contracted the ague; right down to the chills and aches. Those came over me every time I saw Tatiana wandering the lawns of the estate with her ladies. Needless to say, floods of melancholy were washing over me.\n\nI was even more shocked to find how greatly my desire for Tatiana had increased during our enforced separation. It was more like an obsession now. That was an utterly alien emotion for me. And, because of the lack of reinforcement, I began to doubt that there ever was anything between us in the first place.\n\nI had always had a good laugh at the brooding treacle that oozed out of the Bronte novels. Now I was living it. Even worse, rather than responding the way that I normally did to the onset of and feelings of mawkish sentimentality; getting drunk and rogering some little piece of Russian fluff, I was mooning around like a lovesick swain.\n\nHence, there I was, standing at the back of the hall and suffering from an advanced case of green-eyed fever, waiting for the only woman I would ever love to be led out like a prize cow at the Guernsey Cattle Show. I think I mentioned that I'm taller than most. Thus, I was able to see over the heads of the crowd, even though I'd been shoved to the back with the servants. We were all standing in one half of the hall. The other half was empty except for the Czar's representatives and Razin.\n\nThe door to my right opened and Aleksey walked out in full Zaporizhian Hetman gear. His frail frame was clad in a long bearskin coat, red pantaloons and a close-fitting Russian mink hat. He had a curved Cossack sword at his belt and the piece of rat fur that he wore under his nose was groomed into a weak handlebar. He looked ridiculous.\n\nHe stood and struck a classic Cossack pose. Then, he wavered slightly. There as an almost audible gasp from the people in front of me. Aleksey was clearly skunked. Only his mother made a croak of pride. Then he wobbled his way across the room to stand with his Father.\n\nFinally, the door to my left opened and The Lady, The Grand-Duchess Tatiana Gregorova emerged. She was in a gorgeous, pale-blue silk gown trimmed in sapphires. The dress revealed an astonishing amount of excellent cleavage. Regency was still the style in Russia. Even if showing her boobs off like that would have gotten her banned from Victoria's court. I had remembered her incorrectly. I knew she was lovely. But she was a generational beauty. I swear, a ray of dazzling sunlight followed her as she glided across the room toward where her uncle's representatives were gathered.\n\nAs before, her perfect features were framed by her extraordinarily luxurious hair. But this time I could also see her elegant shoulders and her ample bosom with skin like the finest satin. My heart was breaking as she smiled shyly at her intended. In return, he gave her a lecherous leer.\n\nThen she furtively glanced in my direction.\n\nThe ball that took off Sergeant-Major Thatcher's head was like a light slap compared to the impact of that glance. Her look was filled with misery and longing. She was suffering the same pangs as I was. I don't know what my anguished return glance told her. But she flinched as if she had been hit. Still, she was a Royal. So, she composed herself and turned to her fate.\n\nSubstantial speechmaking ensued. I didn't speak Russian. But I applauded along with the rest. Aleksey had to be prompted for responses because he couldn't take his eyes off of Tatiana's tits. She stood like the ice maiden, no emotion whatsoever, responding politely where appropriate.\n\nThen the representatives stepped aside. The happy couple were allowed to touch each other for the first time in their soon-to-be married life. The protocol required the man to take the ladies proffered hand in a two-handed grip. Say something appropriately romantic, and then bow and kiss the top of her delicate fingers. But Aleksey was clearly stewed.\n\nPossibly, that explained what happened next. The minute the Czar's representative offered Tatiana's hand, Aleksey bleated like a sheep, took a drunken step forward, and grabbed Tatiana in an embrace that the old me would have heartily approved of. Then, he summarily dragged her into a sloppy kiss. The look of astonishment and fear that came over Tatiana's face made my blood boil.\n\nHer future husband was trying to fumble one boob out, when Razin and the Czar's deputies dragged them apart. Tatiana was absolutely devastated. Aleksey was still making obscene rutting noises. There was shouting. The crowd was either gasping in horror or loudly laughing. I made a vow then-and-there, to kill the little snake. It had to be done. Tatiana couldn't marry a monster like that. I'd survived the Valley of Death. I was living on borrowed time anyhow.\n\nTatiana rushed crying into her quarters. Razin handed Aleksey to the Cossack guards. It was clear that he had been deeply humiliated, and he was in no mood to suffer his idiot son. At that point his wife tried to intervene on Aleksey's behalf. Razin was a man of culture. But it looked like he was going to hit her. Before that happened, one of the Czar's representatives took both parents aside and there was a lot of frantic gesturing and yelling.\n\nWe were all herded out. So, I didn't see the resolution. But it was obvious that feathers had been smoothed. That was the reason why I was now standing by myself at my love's engagement ball. The orchestra played a fanfare and the bride-to-be swept into the ballroom. Tatiana was stunning.\n\nShe was in one of those classic Victorian ball-gowns, the yellow silk molded to her beautiful hips. She was wearing a lot of diamonds and white gold. The festivities paused while everybody applauded. Her smile was weak and unconvincing. She was terrified. I was wearing my Lancer uniform. It looked as good as new. It had been carefully cleaned, the rips had been repaired and I looked dashing with all of my regalia on.\n\nI was dressed that way because they wanted me ready to travel at a moment's notice. The word had come down to Razin that I was to be taken to Kiev and thence back to Sevastopol, where I would be handed over to the British. I knew I wasn't going anywhere. Since, I would soon be dead or rotting in a Russian jail.\n\nThere was a receiving line; to allow us to pay our respects to the newly affianced couple. I joined it and worked my way up to the guests of honor. I got to Aleksey first. He was wearing a crisp white and gold Leib-Guard Uniform. Those are the elite units that serve as the personal protectors of the Czar and his family. It was nothing more than a costume for him. Since he was a spineless coward. I towered over him, as I offered him my hand and coolly said, \"Felicitations on your wedding, old boy.\" He didn't extend his. Instead he looked at me with absolute contempt and said, \"Ah yes, the Englishman. I don't shake hands with English dogs.\"\n\nUnder normal circumstances, my only recourse would be to invite him out for pistols at dawn. But I was standing in a glittering receiving line full of Russian aristocrats. So instead, I muttered \"We will see about that, my good man.\" Then I moved on to Tatiana. She was quivering like a small woodland creature. One hand was on her delectable bosom and the other extended. The polite hand gesture reflected her excellent breeding. No matter how fearful she was, she was carrying on.\n\nA cauldron of fear, revulsion and profound hopelessness was brewing in her eyes. There was also the deepest and most sincere adoration. That was reserved strictly for me. I know that I must have given her something similar back. Because she sent me a full barrage of yearning and sexual longing. That was all taking place as I took her little hand in a gentle two-handed grasp and muttered, \"Felicitations my Lady.\" Then I moved on to Razin and the toad. I didn't look either of them in the eye. Razin was smart enough to figure out what I was planning.\n\nThe dancing was the waltz. Strauss was all the rage in Europe and the people in the room were sophisticated specimens of European aristocracy. The twirling figures in their glittering finery were a splendid panoply of movement and color. I was not among those people, since I was the despised outsider.\n\nThe gaiety was getting to me. I had seen into Tatiana's soul and she was as profoundly miserable as I was. It was our karma to be together. But circumstances made the hope of our joining utterly impossible. I was leaving for Sebastopol, sentenced to live the rest of my life in an unhappy marriage, pining away for my lost love. Even worse, Tatiana was condemned to a lifetime of being the personal chattel of a decadent and sadistic pig.\n\nI planned to solve the Tatiana's problem, by removing her intended from this earth. It would be my parting gift to her. I was appalled at how selfless I was becoming. It simply didn't fit the old Lambert style. Still, I wasn't going to give Aleksey the pleasure of abusing the only thing that I held dear.\n\nI excused myself from the happy revelers and walked out, through the enormous French doors and onto the massive stone patio; musing as I went. Aleksey was rarely alone. Not that that he needed to be, since the presence of witnesses was irrelevant. But I would have to dispose of the little turd by hand and I was afraid that I might get dragged off him before I finished the task. That is, if enough of his friends were present.\n\nThe patio opened onto extensive formal gardens replete with hedgerow fancies. It was a warm spring night in the Ukraine. Perfect weather for an engagement festivity. There was a cloudless sky swathed in stars with an almost melodramatic full moon. The moon lit the world in a silvery glow. It was a beautiful and peaceful scene. The music and the sound of the happy revelers wafted to me as I selected a cheroot. I sat on a stone bench wrapped in melancholy.\n\nI lit the cheroot and took the first aromatic puff. Then I heard a strangled cry accompanied by a woman weeping. It was coming from behind the first row of topiary. I immediately knew. I sprang to my feet, pounded across the patio, dashed onto the crushed stone path and into the garden. Sounds were coming from my right. I turned, desperately searching the space between the hedges. The moonlight made everything ghostly bright.\n\nI saw them on the ground not thirty yards distant. Alexey must have asked Tatiana to accompany him into the garden, so they could talk. That would be the proper way of getting acquainted. Of course, Aleksey didn't have a noble bone in his body. So, rather than discussing each other's wishes hopes and dreams, Aleksey wanted to prematurely consummate the marriage.\n\nHe was between my love's struggling legs, one hand holding both arms above her head, while the other was tearing at her pantaloons. Her dress and chemise had already been ripped off and one spectacularly full breast was bouncing enticingly as he noisily gobbled the nipple. She was weeping and plaintively pleading for Aleksey to, \"Please stop!!\" She wasn't screaming, at least as yet, because she didn't want anybody to witness her humiliation.\n\nThis was my chance. I was perhaps a half foot taller and four stone heavier than the little twat. So, I put my hands together and violently clubbed him in the back of the head. He made a strangled yelp and collapsed on Tatiana. I dragged his lifeless body off her and threw him into the hedge, like a piece of offal.\n\nTatiana was thrashing in panic and hysterically weeping. I stood over her huffing like a Great Western steam locomotive; staring anyplace but where she lay. She was wearing nothing but the remnants of her pantaloons, which had been pulled to her knees. Her big full breasts, her tiny waist and her womanly parts were all on display.\n\nOf course, I had seen a lot of breasts, bellies and cunnys in my day. But this was my love, my other self; and I was just as humiliated by her state of nakedness as she was. So, I turned obliquely, addressing one of the shrubs, and said with tenderness, \"Don't worry my love. He won't hurt you anymore. It will be my honor to die defending you.\"\n\nThen to my utter astonishment, a blade jutted from the front of my uniform. The little rat had stabbed me with the razor sharp shashka that was part of his Guards costume. Naturally, it was in the back. My partial turn was fortuitous; since it kept the wound from being instantly fatal. How wonderful!! I now had time to finish the business.\n\nOddly enough, there was very little immediate pain. Others had told me that mortal wounds aren't felt as much as sensed. Perhaps that's a mercy. I spun abruptly. The shashka was buried to the hilt in my back, protruding just below my ribcage. They don't have guards. So, the turn ripped the sword out of Aleksey's hand. I glared at him. He was glaring back, with a triumphant sneer. He should have been running.\n\nI seized the front of his uniform. He gave a squeal of fear as I yanked him toward me. Then I closed my fingers around his throat. His eyes bulged as I began to crush his windpipe. My grip was driven by the pent-up rage that had accumulated watching him debase my love. His arms began to flap like a chicken's wings. Then he reached up and tried to break my grip. I increased the pressure as he gouged at my eyes. I thought, \"Who needs to see? I'm dead anyhow.\"\n\nIt took what seemed like forever. But it was probably only two minutes. I was looking into Aleksey's terrified eyes as the light slowly went out of them, his arms fell. I continued for another few seconds, just to make sure. Then I dropped him.",
        "I reached behind me and pulled the sword out. Blood gushed. I put it under Aleksey's jaw and pushed. It went completely through the back of his skull and into the ground. The little piece of shit lay there now, pinned like some rare genus of noxious bug. Then I had to lie down. I collapsed next to Tatiana, who was wailing in grief.\n\nShe threw herself on my chest crying, \"Don't leave me. I love you. I can't live without you.\" As my vison faded into the ultimate singularity, the truth was revealed. I was choking in my own blood. But I still managed to croak, \"We'll never be apart my love. The next life will be better.\" She reached for the sword.\n\n*****\n\nDESTINY REDUX\n\nThe Jenny circled lazily out over the bean fields and touched down on the dirt of the fairground. It rolled across the grass toward the beaten-up card table, where I was lining up our next mark. Oscar jazzed the engine and did a fancy rudder turn, which parked the bird in a cloud of dust. It was terrific showmanship. A dollar a ride was an exorbitant price for the Depression. So, we had to get the rubes' attention.\n\nI put the step-ladder next to the rear cockpit and the passenger crawled out. He looked shaken. That was typical for the first time. Oscar clambered out of the front cockpit, jumped briskly off the wing and tossed me the helmet. He was my dad, late forties, with a weathered face, tall and lanky, a toothpick permanently lodged in the corner of his mouth.\n\nThere wasn't much work in the 1930s, everybody scrabbled for what they could get. Mom caught pneumonia, struggling to put food on the table. We didn't have the money for medicine. Dad tried to peddle his old biplane. But mother died before he could get it sold.\n\nAfter that, it was just us Lambert boys; pa and me. The two of us went town-to-town, fairground-to-fairground. Dad'd taught me to fly when I was eleven and he said I was a better pilot than he ever was. That was debatable since he'd been an ace in the war. Of course, he was flying a Spad S.XIII back then.\n\nHe had come home a local hero, handsome and dashing, like the cartoon character Smilin' Jack, married his hometown sweetie and used his vet's bonus to buy a little dairy farm in Wisconsin. He'd grown up on an Arkansas pig farm. But he wanted out of that State after he'd seen Paree. He said he'd do anything but raise pigs in the shitty Arkansas summer.\n\nHe couldn't stay out of the air. So, he bought himself a surplus JN4-D trainer. They were practically giving them away back in 1919. Pa was lucky. His Jenny had the better Hiso-eight, instead of the OX-5. Since the OX-5 had the scary habit of conking out at two-thousand feet.\n\nThe twenties were happy times. A lot of enthusiasm and optimism. Those were the days. It all came crashing down in 1929. I was ten years old. We lost the farm and mom died and all we had left was the fucking airplane. You could make a living barnstorming and that's when we became airborne hobos.\n\nFor four-bits, we'd take the local yokels up for a half hour. We lived in rooming houses or camped out under the wing on hot summer nights. We saw a lot of the Country. We were relatively happy. We had each other and there was food on the table, most of the time.\n\nDad did aerobatics, while I did wing walking. Most modern parents wouldn't put their fourteen-year-old kid out on a Jenny's wing; with no safety apparatus except a rope around their waist. But it was the middle of the Depression. People did what they had to do to survive. And believe me, walking for a few seconds on a wing moving at forty miles an hour sure beat standing for half a day in a bread line. Plus, I was a teenager. You never think about dying.\n\nMy daring-do DID make me popular with the ladies. I was taller than most, big, blond and sturdy. So, I looked a lot older than my age. It was nothing but flirting and experimentation in my early years. Then I reached adulthood. The farm wives helped me figure out the rest. Dad had his own fan club, only older.\n\nDon't judge us until you've lived it. It was the Depression. We were all broke. There wasn't any place to go, nothing to do. Everybody was desperate. You grabbed whatever fun you could, and fucking was free. Still, we were careful to avoid gun toting husbands when we came around the following year.\n\nConsequently, there I was, standing in the heat of an eighty degree fall day in Los Angeles. We'd been hopping west looking for events and we'd finally made it all the way to the Los Angeles County Produce Festival. That was our normal yearly pattern. We'd hit every fair between Eau Claire, and LA. Then we'd winter in the California sun and then do it all over again.\n\nPa and I traded off the flying duty. The Jenny's normal flight time was a little more than two hours. That's before you had to land and refuel. But after an hour of wrestling with Miss Jenny you'd be ready to hand her over to somebody else. She was a very demanding lady. Early morning was the best time to travel, before the heat sent the thermals up. Those big wings grabbed every upward current. So, it was like bobbing on a life raft after that .\n\nThe festival ground was near the Lockheed works and even though America was still officially neutral, that place was gearing up for the upcoming war. The Depression was over as far as the LA area was concerned. The action around the plant was twenty-four hours a day, seven days a week and the workers were flush. So, we'd made a bundle giving rides.\n\nThe person next in line looked nervous, like he was afraid to put his life in the hands of a twenty-one-year-old kid. I'll admit, I wasn't a Life magazine picture of a pilot. I was in bib overalls clod-hoppers and a sweated-out pair of long johns. But I could make the Jenny dance on the end of a string. I put on the leather helmet and goggles, jumped up on the wing and said jovially, \"Come on, sport. You can't live forever.\" He turned and ran. But he left his dollar.\n\nI said teasingly, \"Anybody else?\" A musical English voice said, \"Can I fly it?\" I said, \"Sure pet, as long as you have a buck. Just let me get it off the ground first.\"\n\nThat was my attempt at humor. I knew my little friend would be begging me to take over as soon as I handed her the controls. The aircraft industry was in its infancy when Jenny was built. There're no fancy trim tabs to give it stability. So, there's no natural return to straight-and-level flight. As a result, keeping Miss Jenny on an even keel was a demanding physical struggle.\n\nI nearly fell off the wing when the disembodied female voice stepped out of the crowd. I had fucked them all; the long and the short and the tall. Yet, the instant I laid eyes on this woman it was like cupid shot me with an arrow out of blue-heaven. I was a barnstorming airplane bum, with no formal education. I hadn't had a real home in nine years. But I wanted to marry this girl right there on the spot, and I knew that I'd sacrifice anything to make that happen.\n\nThat unexpected onset of painful yeaning was disturbing. The odd part was that I DIDN'T want to fuck her. Instead, I felt an instant and deep connection. It was an inexplicable buzz, like a spiritual longing. It was like we'd been lovers forever and I was instantly jealous of every other man she'd ever known. If that was kismet, then so be it. I never wanted to let this woman go. It was a terrifying feeling.\n\nI suppose the attraction made sense in some respects. She was knockout gorgeous; super-thick chestnut hair cut in one of those jaunty bobs that all of the smart young ladies wore. That mop of hair framed her perfectly proportioned heart shaped face. She had high cheekbones, a lovely, slightly snubbed patrician nose, wide mouth and very full lips. But her crowning glory was the most incredible pair of blue eyes. She was small, perhaps five two, with a lovely dusky complexion. The contrast with her eyes was striking.\n\nI instantaneously knew, beyond a shadow of a doubt, that her light would be the navigation beacon I would follow for the rest of my life. I also knew that was an utterly ridiculous thought, since this woman was a TOTAL STRANGER.\n\nShe was beautiful and there I was gaping like an idiot. An embarrassingly long period of time passed while we gazed at each other. She was standing with one hand over her mouth and the other pressed against her delectably heaving bosom, looking just as poleaxed as I felt. Finally, she shook her head like a dog drying itself off and said spiritedly, \"So do I get that ride or not.\"\n\nShe walked briskly toward the plane, ample chest still heaving with emotion. I tossed her the helmet and goggles. She handed me a dollar. I usually have to show our customers how to put the gear on. She slipped it on like most women would don a hat. Then she jumped catlike onto the wing and began to slither into the front cockpit, which is where the pilot normally sits.\n\nShe bumped a firm round hip on me, just to get me out of the way. That caused me to spring something inappropriate in my overalls. She said, \"I'm paying for it buster. So, I'm up front.\" I was pretty sure we'd both fall through the wing fabric if I stood there a moment longer. So, I hastily hopped off and climbed the ladder to the rear cockpit. I said, \"I'll get us up, and you can take it from there.\" She looked back at me with a merry smile.\n\nI switched on the magnetos, and Oscar spun the prop. The old Hispano-Suiza turned over, coughed and sprang to life in a cloud of blue smoke. I taxied us out on the grass. There wasn't a runway to speak of. I just aimed at the part of the horizon that didn't include any trees.\n\nThe Jenny's built like a kite. But it's underpowered and heavy. Hence, even though the wings were trying to generate lift, the thing bumped along for quite a while before it ambled off the ground. The crazy woman up front was laughing gleefully as that happened.\n\nWe got to a few thousand feet and headed southwest, out toward the Pacific. I could see the Hollywood Bowl and the new observatory at Griffith Park below.\n\nOff to the northeast, behind us, was the Lockheed facility, the one that made the Electra; the same airplane that Amelia Earhart flew. Burbank itself was a former sheep ranch and you could still see the open space. But the grazing land was rapidly being covered by new buildings.\n\nI reached forward and tapped on the turtle back. My beautiful little passenger turned. I made a gesture that she should take the controls. I was smiling patronizingly. If she wanted to be an aviatrix, now was the time to prove it.\n\nI knew she'd panic as soon as I took my hand off the stick. The Jenny lurched when I handed it over, like I knew it would. But she calmly steadied it.\n\nShe flew on the same course for several seconds. Then she jammed the throttle full-on and started an inside loop. The JN-4D was never designed to loop. It doesn't even have seatbelts. The Jenny complained. I complained. The Hisso sounded like it was coming off the airframe.\n\nWe rose anti-clockwise until we got close to one o'clock inverted. I was making garbled choking sounds and gripping the coaming, trying not to fall out. At which point, my crazy little friend snapped into a perfectly executed Immelmann. I abruptly dropped back into my seat, to find that we were headed northeast, on the reciprocal, 300 feet higher than before\n\nI had just gotten my heart back in my chest, when the little vixen half rolled and dropped into a split-s, I was back to dangling upside down screaming like a little girl. When she finished that maneuver, we were on the same heading at the same altitude and the same speed as we'd originally been on.\n\nMy mystery girl turned around, beautiful face lit up like a kid at Christmas and mouthed, \"Isn't this fun??!!\" I promised myself to never be so smug again.\n\n*****\n\nWe landed and bumped along. The mystery woman climbed out of the cockpit even before the plane stopped rolling, looking energized. She leapt to the ground and whipped off her helmet. Her thick chestnut mop made her look like a mischievous little girl. I felt like I'd just taken a ride on the Coney Island Cyclone.\n\nOscar came over with the chocks. He'd seen what had transpired and he lit into me the moment the engine stopped. I couldn't hear him at first, over the cracking and popping of the cooling exhaust pipes. But his voice started getting clearer the minute things died down, \"What's the matter with you!! Are you trying to scare our customers to death?\"\n\nMy mystery woman tittered and said, \"That was me, not him. And I think it was the other way around.\" Oscar stopped and looked at her, amazed.\n\nHe said, \"So you mean that fancy flying, was you?\" Then he added scratching his head, \"I probably should have known. He doesn't usually act like Eddie Rickenbacker.\" She grinned impishly and said, \"Anna Gregory, at your service.\" That was how I met the love of my life.\n\nIt was starting to get dark. The crowds had gone home, and Pa was securing the Jenny for the night. The winds came up in the evening. So, we had to tie it down. And since we were camped under the wing it was also our house. That didn't mean we were destitute. It was just that our nomadic life-style didn't lend itself to tangible places, or fancy hotels and it was actually quite pleasant camped out under the stars. Plus, it never rains in LA.\n\nAnna was looking at me, still puzzled. I said trying to sound casual, \"I know this sounds crazy. But I'm feeling the thing that the French call deja-vu. It's like we've been here before.\"\n\nShe looked amazed, like I was the guy from the film that Bogart's wife was just in; \"The Mind Reader.\" She said, without her normal swagger, \"I don't get it either. I feel exactly the same way. But there's no possibility we could have met. I've never been in this country before.\"\n\nI said jokingly, \"Maybe I knew you in another life. I'll bet what goes around comes around.\" Anna threw back her head and laughed loudly. She said, \"Where've I heard that line before?\" It was just me being silly. Still, I couldn't shake the sense that I had loved this woman since King Tut was a pup.\n\nShe looked at me, eyes shining and said, \"Do you wanna grab a burger or something? I feel the need to explore this further. I hope you feel the same way.\"\n\nI certainly did. I didn't have a car, or much else to speak of. But Anna had a neat little cream-colored Model A convertible. So, she drove us down US 101 to Ptomaine Tommy's which was the joint back then.\n\nPa and I'd made a lot of dough and burgers were only two bits. So, I was the big spender. We were eyeing each other hungrily; and it didn't have anything to do with the burger and malt sitting in front of us.\n\nThe wordless gazing was getting super-hot. So, I tried a detour, just to cool myself down. I said, \"What turned you into an ace?\" She laughed ironically. She knew what I was doing. I think she felt the same way because her explanation was a little long-winded.\n\nShe said, \"I grew up next to Bicester Airfield in Oxfordshire and I've been fascinated by flying since as far back as I can remember. Daddy finally bought me a joy-ride when I was eleven. That did it. I was hooked, I got my pilot's license at sixteen and then flew for fun until the war.\"\n\nThen she stopped and looked at me like I might not have heard about the current dust-up in Europe, \"You DO know there's a war going on over there. It started last year.\"\n\nNow that was downright insulting. I was a flying bum. But I read a lot and I wasn't THAT stupid. Still, her next revelation shocked me. It turned out that she was a military pilot. She wasn't exactly flying the Dawn Patrol. But she was part of the British Air Transport Auxiliary.\n\nThe Brits had started using women to free up male pilots for combat. The girls ferried all sorts of aircraft from factories to active service squadrons and that's why my new-found lifelong love was in LA. She was there to master the intricacies of the Lockheed Hudson.\n\nThe Hudson was developed from the Electra airframe. But it sported two Pratt &amp; Whitney R-1830 Twin Wasps, which made it a major handful for any pilot, particularly a slip of a girl. So, Anna and Lockheed were working on methods specially designed for female pilots.\n\nI'd seen a Hudson the day before, while I was up with a customer. I said, \"Was that you?\" She smiled eagerly and said, \"Probably, we're the only people flying the A-28 in this area.\"\n\nI just sat there, mouth hanging open, staring at her with unconcealed desire. I couldn't get over how much I wanted this woman. She was gorgeous and she was a much more qualified pilot than I was. It was daunting to be so pathetically needy. But there was this unmistakable chemistry that kept encouraging me. I felt like we were destined to be together.\n\nNaturally, the gods laughed. We were huddled in a booth next to the window, heads together like lovers. When I saw movement out of the corner of my eye and a guy sat down next to Anna. He put his arm around her, hugged her, and said cheerfully, \"Hey Babe, where've you been. I've been looking all over for you.\" The look of panic in Anna's eyes was matchless.\n\nHe was a good-looking guy, black hair in that slicked back style that was just coming into popularity. He had a striking pair of grey eyes that made me think there was a lot of Irish in his family tree. He had one of those pencil mustaches that Clark Gable made all the rage and a cupid bow mouth, that I'm sure the girls would call kissable. He was sitting down, so it was hard to tell how tall he was. But he looked small and compact, like most good pilots.\n\nI knew he was a pilot because his stylish leather flight jacket had a Lockheed logo and the name O'Leary embossed on it. It was eighty degrees inside the diner, and he was strutting around like he was Lindbergh over Paris. But certain kinds of fellows always have to flaunt themselves. At least he wasn't dressed in bib overalls and a union suit like me.\n\nHe stretched his hand across the table and said, \"Bill O'Leary, I'm Anna's boyfriend.\" I could see that particular thunderbolt coming. So, I didn't react. But the anguish in Anna's eyes went up more than a few notches.\n\nI took his hand and said, \"Tom Lambert, Anna went up with me today in my JN-4.\" O'Leary laughed and said, \"Not many of them around anymore. What are you, a barnstormer?\"\n\nI smiled, although I was dying inside, and said, \"Guilty as charged. My pa and I go around the Country giving rides. We've been doing it since we lost the farm back in '30. Haven't really had a home since then. But you know how it is.\"\n\nHe clearly didn't. He looked at me like I was some kind of Okie and said, \"You really oughta get a job. I can get you a foot in the door at Lockheed. We've got lots of jobs at the plant.\" I didn't like his tone. But I said, friendly-like, \"We're doing alright as long as the Jenny holds up and I'd miss being in the air. What do you do there, assembly line work?\" That was intentional.\n\nMaybe he'd seen how Anna and I were interacting. Because, he gave me a look like he was marking his turf and said, \"Test-pilot at Lockheed. The A-28's a beast and I've been helping Anna here, learn the ropes. That's how we got together.\" Anna had gone from wary to wretched. She said in a strangled tone, \"Now Bill, it's only been a month. It's not like we're married.\"\n\nO'Leary chuckled and said patronizingly, \"We will be.\" Then he turned to me and said, in a just-between-us-guys fashion, \"Anna's one hot little number if you get my drift, ain't you sweetie?\" That statement dripped with carnal innuendo. How subtle. Mr O'Leary was teetering between getting his ass kicked and me saying, \"Well I gotta get back.\" I chose the civil route. strictly for Anna's sake. But it was a close call.\n\nMy heart was breaking as I rose and said, only to her, \"Maybe in the next life kiddo.\" She looked like she was going to cry. She said a little too loudly, \"NO WAIT, I have to give you a ride back.\" I said, \"Don't worry about it. I can stick out my thumb. There's lots of traffic on 101 this time of the evening.\" I had my pride.",
        "Before she could say anything else, I turned and walked slowly out in the direction of the road. I tried to make my saunter through the dusty parking-lot look casual. But it felt like I'd left half my soul back there in that booth.\n\n*****\n\nI heard a noise. It was 1AM and I was lying under a piece of canvas that was draped over the Jenny's right wing. I was still wide awake, unsuccessfully trying to convince myself that Anna was merely a passing fancy.\n\nPa was snoring like a buffalo. So, I knew it wasn't him. I grabbed my handy flashlight and baseball bat and rolled out from under the wing ready to give whoever it was a deluxe beating.\n\nWe had some maintenance to do and we didn't want to be disturbed by the hustle and bustle of the fair. So, we'd wheeled the Jenny over next to the tree line. Highway 101 runs past on the other side of the woods and whoever was creeping up on us had parked there, on the shoulder. That was suspicious.\n\nThe moonlight made him easy to track. I hid behind a tree, waiting to jump out and give him the scare of his life. Then, as the figure passed, I shined the light in his eyes and said in a warning tone, \"Stop right where you are.\"\n\nThe figure gave a startled yelp and I dropped the flashlight. It was Anna!! We were both stunned. I walked two paces to her. She was hyperventilating. I said concerned, \"What are you doing out here at this hour?\" I know. It was an idiotic question. But she'd shocked me as much as I'd shaken her. She said plaintively, \"Don't leave me.\" That was an even bigger shock.\n\nI said earnestly, \"I thought you'd promised yourself to O'Leary.\" She said bitterly, \"Bill had no right to say those things. So, I told him to take a long walk on a short pier.\" Then she grinned impishly and added, \"He's been a jerk since the day we met. He just wishes he'd gotten past first base with me. But we've been together in the same cockpit for the past month and he thinks he owns me.\"\n\nI looked into her face in the silvery moonlight. Her gorgeous eyes were a cocktail of love and uncertainty. Then, she threw her arms around my neck, and raised her beautiful face for a steamy kiss. I kissed her back like we had been doing this for three or four millennia. I knew exactly how to hold her hard little body, her lips felt like coming home.\n\nShe was making needy moans as I lowered her onto the soft grass by the side of the path. I'd fucked women everywhere from haylofts to three thousand feet in the air. Some were quick fumbles. Some lasted days at a time. None of them came close to the bewildering sense of convergence that I felt as we began our dance of love.\n\nIt was partly the alien emotions. There were sentiments bouncing around in my skull that I'd never experienced; a feeling of empathy, compassion, tenderness, and a very profound perception of intimacy. I cared about this woman, how she felt, what she thought. Her happiness was my happiness. Then, there was the novelty of making love to a partner rather than simply getting my ashes hauled. We had a future. I could sense that.\n\nWe were both naked by that point. I'd started out in nothing but my long-johns anyhow, and my unlaced clodhoppers, which I had hastily donned while I was grabbing the flashlight. Anna frantically shed her clothing as she lay back in the high grass.\n\nThe body that the moonlight revealed was sensational. It was the perfect female paradox, small but powerful, soft and hard. Her waist was tiny, but her breasts were full and broad. Her hips were wide and fruitful, yet lithe and nubile. Her legs were long and superbly shaped. But she was only a couple of inches over five feet tall.\n\nThere was no doubt that I had worshiped this body in many settings. I knew exactly what to do. She gave a little gasp as I entered her. I remembered that she wasn't vocal during sex. But she was wildly passionate. Her hands slapped loudly on my back as she enfolded me with both her arms and her legs.\n\nThen I made sweet love to her. She squeaked and yipped and moaned throughout the act; pounding back at me with the same ardent fervor. Her lovely face had an expression of blind ecstasy, eyes screwed shut, mouth wide open in an extreme \"O\", panting noisily.\n\nFinally, the inevitable hit and we both experienced the age-old euphoria. But this time there was an entirely new dimension to it, and it was a lot more than simple biology. I wasn't getting my rocks off, like with all the farm girls. I was tying my past and future to another person.\n\nHumans have no mating season. Sex is a natural selection imperative for us. It drives a male and a female to one purpose, offspring. And evolution provides ample incentive to mate frequently; in the form of an endorphin rush that is no less potent than a narcotic. Still, if propagation is the Darwinian purpose, then sex's indispensable social aim is to cement a family unit. That's why the right kind of sex creates a connection between two people; and it is that bond that separates love from fucking. Anybody who has ever experienced the difference understands what I'm talking about. It's the feeling of absolute connection. Whatever hurts them hurts you. You want to safeguard each other at all costs.\n\nThe odd part was that I didn't need to think about any of this. A those feelings were just there. I knew that my love for this woman was, and always had been, innate. I also had the profound sense that our connection extended centuries into the past and eternally into the future. I don't know why I was so convinced of that. It actually made no rational sense. But Anna and I were forever joined. She was staring at me with the same thoughtful look of recognition. I said awestruck and confused, \"We've found each other.\" She nodded, tears in her eyes.\n\n*****\n\nEverything happened very quickly after that. Anna spent her days at Lockheed and Mr. O'Leary was nowhere to be seen. That was at her request. Lockheed was counting on a big British order. So, O'Leary's disappearance wasn't hard for them to arrange. Anna didn't need to demand that for my benefit. I trusted her. But she said that she wanted to have no uncertainty about her commitment to me, no matter how far apart we were. That pledge helped me get through her departure back to England.\n\nWe spent every day just enjoying our time together. We didn't do anything exciting or glamorous. Sometimes we'd drive down to the Santa Monica Pier, or the nearby beaches. She roomed with two women who worked at the Lockheed plant and I lived under a JN-4 wing. So, there wasn't a lot of privacy and there definitely weren't any long lingering weekends.\n\nWe didn't need it. One of the things about finding the right person is basking in the sheer joy of their companionship. We DID have lots of passionate moments in out of the way places. Topanga canyon will never be the same to me. But we had a mere two weeks to enjoy our togetherness before the telegram arrived. It reminded both of us that there was a war going on and Anna had a duty.\n\nI saw her off at the Southern Pacific's Union Station. We both cried. I've always been a big happy-go-lucky galoot. So, perhaps you have some idea of how much that little display of unmanly emotion embarrassed me. She touched the window as the train began to pull out. I waved sadly. That might have been the end of our perfect romance. But we already had plans.\n\nAnna was going back to England. But there was nothing stopping me from joining her except the government. America was trying to stay neutral. So, it was illegal for a U.S. citizen to enlist with a foreign power. Frankly though, who cares about silly details when the love of your life is over there? So, I answered an ad from an outfit that smuggled American flyers across the border to Canada. And it wasn't a week later that a fellow tracked me down at my permanent abode, which was a tent pitched next to the Jenny.\n\nHe was a swank dude named Sweeny and he offered to help me get into the Royal Air Force via something called the British Commonwealth Air Training Plan. He had all the documents that I'd need and travel money to get me to a place called Ottawa, in Canada. They'd evaluate me there and if I was good enough, the next stop would be England and Anna.\n\nPa and I talked it over. I could tell the idea of my going to war was killing him. But he'd gone the same route when America got involved in 1917. So, he understood better than most. He even accompanied me down to the Union Station via our normal mode of transport, which was our right thumb. As I boarded the train he said, \"My time over there made me into a man. I suspect it'll do the same for you. Take care of yourself Tommy and be sure to write your old man once in a while.\"\n\nImpossible!! It almost looked like a tear in his eye. He added, \"Don't worry about me Tommy. I'm gonna get a job and live the life here.\" He always did his best. He was a good Pa.\n\nThe journey across America was no big deal. At least, it wasn't for a guy who had spent the past ten years flying over it. There were three other \"volunteers\" on the train. We played cards all the way to Ottawa. Red and Andy were flying buddies at Main Field in LA. They were both experienced pilots, like me, and eager to get in on the action. The third guy was maybe five feet tall. He was a pilot too, even if he had to sit on a phone book to do it. Naturally they called him, \"Shorty.\"\n\nWe parted company almost immediately upon arrival. That's because the Canadians shanghaied me into being a flight instructor at Uplands Field. We didn't keep logs. But I probably had five, or six thousand hours in the air and if you can fly a Jenny you can fly anything. So, their Avros and Stearmans were no challenge. I hated not being able to transition on to Anna. But orders were orders and I was in the army now.\n\nGetting raw recruits from places like Winnipeg and Calgary up to speed as pilots was another matter entirely. Still, my time at Uplands did give me an opportunity to get checked out on the Hurricane. That was my own special experience. The Jenny had a ninety-horsepower Hispano-Suiza engine and cruised at seventy-five miles an hour. The Hurricane had a twelve-hundred horsepower Rolls-Merlin and it cruised at over three-hundred. But the eight .303 machine guns were still its best feature. I spent every spare minute enjoying the freedom that little fighter gave me.\n\nI missed Anna so much that my teeth hurt. And I worried about her all the time. She was flying strictly in Great Britain, not the skies of France. Still, there was a war going on and nobody was safe. We wrote each other constantly. But the mail was hit-and-miss. The Atlantic seemed to be full of something called a U-Boat. Anna sounded resolute. I'm sure I sounded frustrated. I might have been stuck in the frozen north for the duration. But that spring the Nazis helped me out by beating the shit out of the French. Suddenly, England stood alone, with Hitler licking his chops on the French side of the channel.\n\nAir superiority was the only thing keeping his storm troopers off English shores and Britain needed every experienced pilot they could lay hands on. Better yet, by that point I was as capable with the Hurricane as anyone could be. So, they shipped me over with a priority tag. The trip from Halifax to Southampton was on the Grey Ghost. The Queen Mary traveled without escorts because she could outrun any trouble, including U-Boats. I arrived at Southampton docks on the last day of July 1940. Then I took a bus the twenty miles up to Middle Wallop and Number 238 Squadron.\n\nThe squadron had been equipped with Spitfires and it was just transitioning into Hurricanes. So, we had a little down time that weekend, while they sorted the whole thing out. The average pilot recruit had two-hundred flying hours total; and as little as eight weeks in an operational training unit. I had closer to eight thousand hours now. But of course, I'd been flying for a decade; even though I was only twenty-one years old at that point. And I'd managed to log a remarkable one hundred hours in the Hurricane, because I was so bored at Uplands.\n\nThe first thing I did was call Anna. She was sixty miles away at White Waltham in Maidenhead. The person who answered the phone had to chase her down. So, I hung on the line until I heard a puzzled tone say, \"Hello.\" They must have told her a guy was calling for her. It was the first time I'd heard her voice in seven months. I swallowed the instant lump in my throat and said cheerily, \"Hello my love. I was in the neighborhood. So, I thought I'd give you a ring.\" She shouted, \"TOMMY!!!\" Then she began to cry -- women!!\n\nI told her that I had just gotten off the ship and I was at RAF Middle Wallop. I was dying to see her. We Yank volunteers had a long leash back then. It was early Friday and so I had appealed to my boss Squadron Leader Fenton for a weekend pass. I'd said pleading, \"I haven't seen my girl in seven months Sir, and I'm fully checked out and ready.\" Fenton was a decent chap. He could see how much I needed this. But he said, \"The Hun are gearing up for something big and we need you around. If your girl can make it down here, you can take the weekend in Southampton. That's all I can offer you.\"\n\nI said glumly, \"Yes Sir,\" saluted and walked out of his office. It was impossible. I called Anna and gave her the news. She took it inexplicably well. She said, \"I'll be there as soon as I can, love.\" Thus, I was resting in a chair a couple hours later, depressed. I'd dragged it over by the tarmac, and just sat there in what the English laughingly call the summer sun, wondering how in the world Anna could make it down with all of the wartime limitations on travel.\n\nThat was when I heard an approaching Hurricane. The pilot was a hotshot. He came full throttle low over the control tower and snapped a climbing four-point aileron roll, finishing with a flourish; by hauling it into a full loop and landing directly off the return. It was a masterpiece of flying since the Hurricane engine tends to cut out when it's inverted. A couple of us ambled over to see who the pilot was. The Hurricane rolled to a stop and the rew went out to service it. The canopy pushed back, and the pilot emerged. He was incredibly small. He climbed down off the step, turned to face us with a jaunty smile and said, \"I heard you chaps could use a new Hurri.\"\n\nMy heart nearly stopped. It was Anna!!! She removed her helmet revealing her thick mop of brown hair, tossed it to a crewman and rushed over to give me the sweetest, most passionate kiss imaginable. I heard choirs of angels as the universe realigned. We were together and it had all been worth it.\n\n*****\n\nWe were lying in a soft warm bed at the Dolphin on Southampton harbor. The morning light through the big bay window lit up a devastated scene of passion. We had made love all night. It was like we were trying to make up for the lost seven months in one evening. Anna was sitting up against the pillows now, daintily sipping a morning cup of tea, while I leaned on one arm and watched her.\n\nShe was unselfconsciously naked and absolutely exquisite. Her smooth back with its satin skin was propped up on the same headboard that we had been lustfully banging against the wall for the past hour. Her full round breasts bobbled as she raised and lowered the cup. Their perfectly shaped brown nipples jogging up and down with the movement of her arm. Her thick mop of hair looked exactly as it did when it came out from under her leather flying helmet and her blue eyes sparkled with joi d'vivre. She looked as content as I felt.\n\nStill, there was one pressing matter, and I had to get it out of the way today. I'd been saving my flight pay for this exact moment. I reached into my kit and pulled out a little black box. I said, trying to sound casual, \"Well, we both have to be back at our posting by noon. But there's something I'd like to ask you first.\" She turned her head and looked at me, interested.\n\nI said, \"We're in the middle of a war and neither of us knows what's going to happen next. So, would you do me the great honor of marrying me this morning? I'm pretty sure we can hunt up a Vicar to provide the blessing?\" It wasn't the usual bended knee. The pall of warfare makes everything serious and somber, even a proposal. But it was as heartfelt as any lifetime question can be. I thought she would whoop with joy. Instead she began to weep. I slithered back up the bed and pulled her head over on my shoulder, concerned.\n\nShe sniffled for a short while. Then I heard a little voice say, \"Of course I'll marry you, goose. I'm crying because I want to be with you all the time and that's not possible.\" I got it. I felt the same way. I said; surprising even myself by my reasonable tone of voice, \"This war isn't going to last forever. But my love for you will. So, let's go through the formalities. I want the whole world to know how I feel about you.\"\n\nShe squealed and threw her arms around my neck. Another hour passed before we wandered up St. James looking for a church. The first one we came to was Catholic. I supposed it was as good as any. Anna was a fairly regular church goer. But she was an Anglican and I'd never been in a church in my life. The priest was named Father Brown. He was a kindly old gentleman. Neither of us were Catholic. So, he would have had a perfect right to kick us out. But apparently, he'd served in the trenches in Flanders before he'd become a priest and he understood the vicissitudes of wartime.\n\nHe performed the ceremony in full vestments at the front of the empty church. When he said, \"You may kiss the bride,\" we just stood there looking at each other like we'd heard those words in every setting from pagan rituals to Medieval high church. Then I kissed her, and it felt like the circle had once again been closed. We were together.\n\nAnna had to have the Hurri back by noon Sunday. She had only \"borrowed\" it. Luckily, the OOD for that weekend was the American flyer, Jackie Cochran, and she had a heart of gold. So, Jackie detailed Anna down to Middle Wallop for a \"test flight.\" Our parting was a lot less emotional than before. That was because we were only sixty miles apart and she had a little diamond ring on the third finger of her throttle hand. She took off, returned over the field with a six-point Victory roll and disappeared to the east. I watched her until the Hurri was an invisible speck in the sky.\n\nI would have been devastated. But I had a lot of work to do that day. The squadron veterans took us new boys up for a lesson in formation flying. My \"mentor\" was a taciturn Welshman nicknamed Taffy. He didn't talk much but he could fly. He obviously didn't think much of me at first. That's because he kept bouncing me. I'll never forget the joyful shout in my headset, \"Akkaaa, Akkaaa, Akkaaa, beware the Hun in the sun!!!\" as he'd rocket past me, head on, perhaps three feet over my vertical stabilizer. He nearly made me wet myself the first couple of times he did that. But it familiarized me with the insane tempo and chaos of aerial combat.\n\nWe hadn't been at it more than a week when Herr Goering dialed up something called, \"Adler Tag.\" I think that means, \"Day of the Eagle.\" All I know is that a whole shit-load of Stukas, Heinkels and Ju 88s paid us a call that Tuesday. The Chain Home radar system picked them up as they assembled across the channel and the Dowding controllers at Uxbridge vectored us out to meet them. They knew it was big. So, we had been roused early and on the flight line as the sun came up.\n\nWe sat in our Hurricanes for a couple of hours while the Section Operations Room sorted things out. Then it was, \"Start engines.\" The Coffman starter fired, and the prop began to turn. Alfie, my crew chief, slid the lid forward and I was alone in a very familiar yet alien world. I probably had as many hours in a Hurricane as the top guys in our Squadron. But I had never flown one into battle. We taxied out in two plane echelons, the lead and his wing. Taffy was group XO. So, we were second onto the runway. There wasn't any air traffic control rigamarole. The minute we lined up we were rolling, and we rose together headed for a vector of Ju88s. We'd formed up into a flight of four echelons, eight hurricanes altogether.",
        "The Krauts had thrown everything but the kitchen sink at the airfields. I could see a flight of Stukas off to the east. They were being bounced by the Spitfires of 609 Squadron. Lucky them; The Stuka was a notorious sitting duck. Our problem was more serious. Since, the Ju88 was almost as fast as we were. It looked like the whole Luftwaffe, plus Hitler and Goering himself, had decided to make the call. There must have been fifty of them. They were at seventeen thousand feet in a clear blue English summer sky. We climbed to twenty-six thousand, which was close to our operational ceiling and circled until the lead elements were right underneath us. Then we came down like stooping hawks.\n\nThe Ju88 was what is called a \"schnellbomber\" very fast and lightly armed. So, we weren't worried about the single MG81 that the rear gunner had. Taffy picked out a Ju88 on the edge of the highest flight and walked his .303s right up the fuselage from back to front. I saw the canopy explode and the bomber began to spiral down. The 303 is a pea-shooter compared to the twenty-millimeter cannon that the Spits and 109s pack. So, you have to line up the shot a lot more carefully. Fortunately, the Hurricane was a superbly stable gun platform.\n\nI didn't fire a shot. I was on Taffy's wing, mainly to provide wing cover and learn the ropes. We hurtled through the Germans and then hauled up for a pass at their bellies. The formation had mostly gone past when we got up to the lowest echelon. The Ju88 is a fine aircraft. But it is almost defenseless if you are attacking from underneath. Taffy fired a three second burst into the wing root of the leader and then another one into the portside wing. He must have hit a bomb because the wing blew off and the JU88 cartwheeled away. I still hadn't fired a shot.\n\nWe were loitering beneath the bomber stream when Taffy indicated that it was showtime for me. He drifted back on my wing and I picked out the tail-end-Charlie. I corkscrew turned, to line him up from the rear, fired a three second burst and missed by twenty yards. He was a lot faster than I thought. I closed the range, meanwhile the cockpit rear gunner was trying to get me first. I heard a few strikes on the fuselage and wings but I was intent on the prey looming in the sighting reticule of my GM2. The fact that he was shooting at me pissed me off. So, I gave him the full nine yards. Machine gun belts are exactly twenty-seven feet long.\n\nThere were strikes all over the middle of the fuselage and he burst into flames. I saw the face of the guy who'd been shooting at me as I zoomed over my \"kill.\" I'll never forget his expression. It was a mask of horror. His look made war a reality and it made me question what I was doing up there.\n\nBoth Taffy and I were out of ammunition. We had splashed three and we were ready to refuel and rearm. One of the things that made a difference in the Battle of Britain was the fact that the Germans were at the edge of their operational range. Whereas we could pop down for a quick cup of tea and more gas and goodies. We flew three more sorties that day. Taffy got another one which made him two kills short of being an ace. The only JU88 to get through our covering patrols hit a building behind the field instead of us. They DID bomb the shit out of RAF Andover.\n\nThe next day it was He111s. They hit one of the hangers and killed a few of our people. The Spits from 609 Squadron caught them on the way back. The entire squadron bagged another fourteen. And thus, the months of August, September and October passed. They'd come over in waves. We'd shoot down a flock of them. They'd knock down a few of ours. The difference was that our chaps would parachute safely away and be ready to go the next day. Whereas, theirs were destined for internment in Canada. I'd been to Canada. I didn't envy them.\n\nUnfortunately, there were so many of them and so few of us that the sheer weight of numbers was beginning to turn the tide in the German's favor. Our airfields were being bombed into uselessness and it was starting to look like they might knock the RAF out of the war. Then it all mysteriously stopped. They say that a bomber command raid on Berlin pissed off Hitler so much that he ordered the Luftwaffe to devote all of its resources to leveling London. Whatever the reason was, it was a big mistake. Once they stopped paying attention to the RAF, we were able to build back to prewar strength and new pilots restocked the ones we'd lost. The bombing of English cities didn't hurt fighter command in the slightest.\n\nOur Hurricanes and Spits mauled the shit out of the Huns every time they came over in the daylight and so they switched to night attacks. It was basically indiscriminate saturation bombing in the dark and a lot of London's east end and dockside was on fire every night. The dilemma posed by the German's new tactics was that Britain didn't have any significant night fighter capability. That was when I was transferred to 604 squadron.\n\nBy that point I had three confirmed kills and I was considered to be an up-and-comer among the old hands at Middle-Wallop. So, they seconded me to a squadron made up entirely of Bristol Beaufighters. The Beau was a beast. It had two 1,600 horsepower radial engines and weighed almost eight tons. The Brits needed a platform to haul the newly developed Mk-14 aerial intercept radar, which let us see the Kraut bombers when they came over at night. The problem was that, up to that point they didn't have anything fast, or lethal enough to be operationally effective. The Beaufighter was the answer.\n\nIf the Spit was lethal nobility and the Hurricane was a honest, hardworking tradesman. The Beaufighter was the brawny, broken nosed thug, with a club on his shoulder, and a blackjack in his pocket. It was actually a bit faster than the Hurricane and its four, nose mounted 20mm cannon, delivered a punch more devastating than a Joe Lewis upercut. Better yet, mine was delivered by ATA pilot officer Anna Lambert. I'd known my love was coming. So, I was standing by the revetment when she rolled my new steed in to park it.\n\nI fell in love twice. First, with the beauty who emerged smiling from the cockpit and slithered down onto the wing. The second was with the Beau itself. It was my kind of aircraft, brutally, efficient and extraordinarily lethal. Anna jumped off the wing directly into my arms, flying suit and all, wrapped those beautiful legs around my waist and we had a moment; right there in front of the ground crew. We both had overnight passes. So, we retired posthaste to the Dolphin. We had gotten the same room, with the bay window overlooking the River Itchen. Anna had brought a little canvas bag with a change of clothing. But she still had on her flight suit.\n\nAs soon as I closed the door, she kicked off her flying boots and turned toward me with a delightfully devilish look on her face. She slowly and seductively unzipped the flight suit and shrugged it off her shoulders, revealing that she had been flying an eight-ton fighter aircraft totally alfresco. Her round, perfectly shaped breasts, her tight little body and her beautiful long legs had nothing hiding them from prying eyes but an olive drab, cotton coverall. She smiled seductively posed and said cheekily, \"You like?\" I most certainly LIKED!!\n\nI lost my uniform pants shirt and shoes like they'd been blasted off. I strode the four feet to Anna, threw my arms around her and we fell backwards onto the bed; with her laughing merrily. As soon as I got us situated, I took a moment to look at her jewel of a body. It was like the opening chords of Beethoven's Ninth. You might have heard it a hundred times. But it still moves you.\n\nIt was Anna's absolutely ideal proportions that struck me. Her neck was graceful yet powerful. At the same time, her shoulders were broad, but delicate. Her breasts were ample but still perfectly shaped and proportionate to her body. The nipples were little stalwart watch towers on the swell of those two superb hills. Her stomach was flat, and her hips were wide and fruitful. Yet, you could see the muscle structure that defined their ideal shape.\n\nOf course, her legs were her real glory; long smooth and shining thighs the muscles clearly outlined, with a gap at the top. Her tibia were perhaps a tad longer than the average woman's and so her lower legs looked almost coltish. The whole thing ended in a dainty pair of feet. Those feet had just been pushing on the rudder pedals of an eight-ton Bristol Beaufighter. Now they were pushing on the bed in eager anticipation; bright red toenails curled.\n\nI looked at her superb face. It was beaming with adoration. I said simply and humbly, \"I love you.\" She whispered, \"I love you too.\" Then our lips met. Her mouth opened to greet my eagerly probing tongue and we were totally wrapped up in each other for what seemed like hours. Yet, there is always a point where lust trumps romance. Anna uttered a guttural moan and her legs began to open. It was like they were moving without her conscious control. I climbed between them, supporting myself on my arms. I was gazing into the depth of her eyes. There was a feral connection. It was as if the link had been forged at the beginning of time.\n\nThen her eyes very slowly rolled up in her head. She uttered a wild cry of passion, grabbed me and forced me into her eager receptacle. She elevated her hips so that I instantly slid to the top. We stayed there utterly joined for seconds and then she began to buck uncontrollably. I had never seen a woman come so fast. But that was only the beginning. She began to urgently mutter, \"On top, on top.\" I got the message. I reversed us, still joined, with her gripping my hips like she was riding a horse. She sat straight up, impaled, hands on my chest, face contorted in lust, eyes screwed totally shut. Then she began an exaggerated circling motion with her hips emitting little shrieks and whimpers.\n\nAs she did that she leaned backwards, mouth wide open, sightless eyes staring at the ceiling. Her right arm was extended, so that her hand was gripping my left thigh. I began to hump like an extraordinarily mad, March Hare. She gave a throaty laugh, that was full of erotic meaning. Then she seemed to implode on herself. Her head snapped forward, whipping her glorious mop of hair around her face, and then back again. She gave a wild cry and started to bounce up and down so hard that I was afraid she would hurt her lady parts. Then her hips went into overdrive back and forth, she emitted a strangled moan and her body went totally rigid. She held herself motionless in that muscle cracking pose for thirty or forty seconds, while her passage went insane. Then she shrieked and collapsed forward on my chest, limp.\n\nI was close at that point. So, I reversed us again. Her legs and head were flopping around as I did that, like she was unconscious. But there comes a time when you simply lose track of the fine details and this was it. I pounded on her limp frame for a few seconds and then it was like a block-buster exploded in my loins. I buried my face in her neck and didn't surface again for an eternity. When I did, my first thought was. \"This is sex for the ages.\"\n\nAnna seemed to have gotten her wits back by the time my sanity returned. She giggled and said, '\"You really didn't have to fuck me to death. I can't imagine how I could EVER love you more.\" I laughed and said, \"I can always try.\" Then I added with total sincerity, \"Here we are, stuck in harm's way. And I have never been happier in my life.\"\n\n*****\n\nThe Beaufighter took a while to master and nighttime radar interception was a new thing. So, the entire squadron was stood down while we worked on night fighting. Our ground-based radar could get us within five miles. That was sufficient in the daylight. But at night, you had to be within 1,000 to 2,000 feet to spot your target. The Mark IV Airborne Intercept radar mounted on the Beaufighter filled in the gap.\n\nThe Beau is a two-seater; pilot in the front, radar operator directly behind. My operator was a sergeant named Ginger. He was a Geordie with an accent so thick I could barely understand him. The rest of the chaps assured me that it wasn't my fault. Apparently neither the English, nor the Scots can understand Tyneside either.\n\nHe was a decent bloke, kind of a caricature of a Newcastle United supporter; all Toon army, pub fights and Scots resoluteness. He was perhaps seventeen, although he looked like he'd just entered puberty, pimples and all. Of course, the zits blended well with the ginger hair and freckles. I had just reached the ripe old age of twenty-two. So, he treated me like his da. He sat behind me crammed into the cockpit of the Beau gazing at little waves on a lighted screen, like an oscilloscope. Somehow, he could tell where the targets were from what he saw. So, he would take over the navigation once the Dowling controllers at Uxbridge had vectored us into the general area. We tried it out first, with intercepts of our own aircraft.\n\nOutside the cockpit, it was nothing but stars at 19,000 feet, pitch black below. Ginger was calling the headings and I was driving blind. We had made several course and elevation changes when he said confidently, \"He's ooon yr starboord quarrrter.\" I looked and sure enough, the target Wellington was flogging along just a thousand feet away. I announced on the common frequency, \"You've just been shot down.\" And the Wellington driver said blithely, \"Thanks for the bounce old boy.\"\n\nWe ran those practice ops almost every night for a week. Then we were ready for the real deal. By that point my Beau had been painted black with grey splotches as camouflage. We were almost invisible in the night. Different than day operations, our night fighters took off like solitary birds of prey. We carried one external tank so we could loiter high over the bomber streams, waiting to be vectored in.\n\nIt must have been a busy night for the Heinies because we hadn't been on-station for more than a few minutes when we got our first call. There was a flight of three bogeys headed for the Isle of Dogs. We were loitering at 20,000 feet over Croydon, so we got the assignment. The Dowding controllers were vectoring us toward Bromley. But of course, we couldn't see the Hun, who could be anywhere from 25,000 feet down to right on the deck. Still, Ginger picked them up almost immediately, flying at 15,000 feet.\n\nThey were HE 111s, better armed than the JU88s and Dornier's, but slower. They were the workhorse of the Luftwaffe because of their carrying capacity. I was counting on the Beau's hitting power and the fact that we were more-or-less invisible to the ventral and dorsal gunners as we crept up behind the 111 on the left side of the echelon. They were cruising rather than flying at full speed, obviously trying to conserve fuel. But then again, what did they have to worry about except the flak over the target.\n\nThat was a fatal misassumption. I lined up my unsuspecting quarry, closing to easy shooting range. The Beau was a silent and invisible predator, stalking an unwary victim. It almost didn't seem fair. Twenty millimeter cannon deliver a devastating blow and there was the added advantage that they were situated right in front of me. So, all I had to do was aim the aircraft. The problem was that they're also so powerful that they'd drive the nose down when you shoot.\n\nI fired a short burst and immediately pulled back on the yoke, to line up the leader. I really didn't even have to look at my first kill. My twenties had blown his left wing off and he started to somersault. He never knew what hit him. The leader must have seen what happened because he began a right bank, and the ventral gunner opened fire. The Hun was shooting wild because he still didn't see me. The twenty-millimeter shells ripped into the bomb bay right behind the ventral position and blew the entire Heinkel to kingdom come.\n\nI was occupied for several seconds avoiding flying pieces of bomber. As I was doing that, the last 111 broke right and disappeared headed home. I would have chased him, but I was out of ammunition. The twenty-mike-mikes are notorious gluttons. There was a bit of a celebration waiting for me when I got back. The last Heinkel had made me an ace, just like my Dad. I immediately called Anna. I wanted to do a little bragging.\n\nThey told me she was delivering a Stirling for Coastal Command. It was a relatively short flight from Stoke down to St. Eval in Cornwall, where she was dropping it off, and she would be back by midafternoon. I told them to have her give me a call when she returned. Then I hit the rack for a well-deserved kip. I wanted to be rested because I still had to be back in the office that evening. I had been sawing logs for approximately four hours when one of the enlisted clerks from squadron headquarters roused me. He said gravely, \"The governor wants to talk to you.\" That would be Squadron Leader Michael Anderson.\n\nMike was a handsome, late thirties guy, who was always fun at the pub. So, I was in good spirits when I approached his door. I was thinking he probably wants to congratulate me for getting dealt the ace. I knocked and heard, \"Come!\" Mike was sitting behind his desk, pipe in mouth. He looked dire. I thought, \"Oh-oh, what's this??!!\" He said, \"Sit down Tom. I have some very bad news.\" My first thought was my father. I felt a wave of sadness.\n\nThat thought was annihilated by his next words. He said sadly, \"We just received word that the Stirling your wife was flying was shot down over the Bristol Channel. It went straight in. There were no survivors. I'm very sorry old chap.\"\n\nHow do you react to the news that ends your life? My precious wife; snuffed out by the heartless vagaries of war. Anything else could've happened and I would have survived. But this was unsustainable. I was alive and breathing - temporarily. But I was a deadman. Anderson was staring at me like a parachute mine had just landed in his visitor's chair. He needn't worry I no longer had a soul. All I had left on this earth was one final task.\n\nI said mildly, \"Who shot her down.\" Anderson said warily, \"It was a 109. The women in the accompanying Stirling said it was one of the Abbeville Boys.\" Those fuckers flew Messerschmitt's with a distinctive yellow nose. I didn't have any idea what one of them was doing over the Bristol channel in the daylight. But it made sense. He must have been freelancing after escorting bombers up to Bristol or Cardiff.\n\nI sat there for an eternity. Anderson puffed his pipe and waited. I finally sighed and said, \"Well there's nothing I can do about it, thanks for telling me.\" He looked surprised. I suppose he expected an explosion. There would be one all right. But it wasn't going to be in his office. I said, just to make sure he wouldn't get in my way, \"I'm fit for duty, Sir. I just need some time to grieve. I'll be in the air tonight.\" I turned and walked out of his office before he could stop me. I made it a point to act as normal as possible for the next couple of weeks.\n\nThere was a little remembrance ceremony in Maidenhead. Her parents were there and so was I. They looked almost as distraught as I felt. I tried to say a few words. But despair was my only friend now, and anguish was its everlasting companion. I just stood there choking. I couldn't even speak. I finally had to sit down, bury my face in my hands, and let it all out.\n\nI must have looked awful. Because the CO started hinting that I was going to be stood down. It was only the fact that the Blitz was still raging that kept me in the air. For a fortnight, I was a remorseless killing machine. I took every vector they offered, and I added six more HE 111s, making me a double ace. I always shot for the fuel tanks. It gave me a small amount of satisfaction watching them burn.",
        "I had been surreptitiously poking around the squadron's photo recon and intel sections trying to build a picture. They had a bunch of detailed pictures and even some hard intelligence. The last piece of the puzzle was the Resistance's tip about the chateau. It was useless information To the intel boys. But it was all I needed. I was finally ready to put my plan into action.\n\nI had been grimly awaiting the new moon. That came on the night of December 22nd. It was nearly Christmas. But I wasn't feeling the holiday spirit. I'd asked the ground crew to put a couple of extra auxiliary tanks on the Beau. The Beaufighter was initially designed to haul torpedoes. So that wouldn't be a problem carrying excess fuel. I said I wanted more loiter time.\n\nNight fighting is solitary. Hence, my Beau was the only aircraft sitting on the tarmac as the setting sun signaled the beginning of the long dark winter night. Ginger came ambling out with his parachute. He wouldn't be coming with me. I said, \"You're not going old son. It's a top-secret mission and the CO wants me to fly it by myself.\" Ginger looked puzzled. I said convincingly, \"You can check it with him in the morning if you want. But I'm ordering you to stand down tonight.\"\n\nI called to one of the ground crew and said, \"I'm ordering this man to stay home. You're a witness in case the Governor asks.\" The crewman gave me a, \"Who cares?\" look and said to Ginger, \"More time in the pub mate.\" That settled it. I was alone as I took off into the night sky.\n\nI hit the channel over Eastbourne, cruising to conserve fuel. The flight controllers kept asking me where I was going. I told them I was chasing a bogey. Now that I was out over the water, I turned off the radio and concentrated on my compass and dead reckoning. Fortunately, the Somme Estuary is easy to spot.\n\nI dropped to 200 feet as I followed the river the ten miles to my target. I wanted the Krauts all sleeping peacefully, with nothing but sugar plums dancing in their head and I didn't want the German's primitive radar to warn them . The airfield at Abbeville was a little northeast of the city. As I turned for my final approach, I sensed that there was somebody sitting in the observer's seat.\n\nI had actually expected her. I looked back. She gave me the same merry smile she had given me that first day in the Jenny. She said tenderly, \"I had to be here. You know we always go into the next life together.\" The profound feeling of peace and contentment that washed over me was in stark contrast to the hell I was about to unleash on the Abbeville Boys.\n\n*****\n\nThe guys in the photo recon Mosquito couldn't believe the devastation. Almost an entire Jagdgeschwader had been wiped out by a suicidal British pilot who dove a gasoline laden Beaufighter into their barracks in the middle of the night. Most of them were sleeping. They never had a chance. The resulting explosion and the cooking off of the 20-millimeter shells had destroyed the building and all of the surrounding support facilities. Now, although there were Messerschmitt's to fly, there was nobody to fly them.\n\nThe rogue pilot's commander had tried to explain that the man had been driven mad by the death of his wife. But in his heart, Squadron Leader Anderson knew that Pilot Officer Lambert had finally found the peace that he so desperately sought. And, as it had since the dawn of time; karma continued to move two eternally linked souls to their inevitable next encounter.\n\n*****\n\nFATE TAKES A BREATHER\n\nWe were the children of the baby boom. Our parents survived a depression, fought a world war and unleased a tsunami of kids that swamped the system. First, it hit the elementary schools and then the high schools. By the time college rolled around we were like a pack of starving hyenas .\n\nIt would be an understatement to say that the competition was ferocious. You sent out ten applications and got maybe one acceptance. You never even thought about applying to the prestigious places like Harvard, Berkeley, or Michigan. Only the best-of-the-best got into them. That's the reason why I was such a misfit when I showed up on the Ann Arbor campus.\n\nI was a working-class kid recruited into the Big U on an athletic scholarship, not his genius IQ. In fact, the kids from my high school had a pool going about whether I'd flunk out by Thanksgiving. It didn't help when the fellow at freshman orientation told us to shake hands with the person on each side, because one of us wouldn't be around next semester. So, I felt neither entitled, nor even like I belonged.\n\nThey housed scholarship athletes in their own dorm. I could've gotten another swimmer, or a gymnast; somebody with a minor sport scholarship. But I got a football hero and he was a total pain in the ass. Chuck had no concept of personal space and his side of the suite was always a den. Even worse he was hornier than the fabled two dicked billy goat. So, he spent most of his time either pussy-hunting or drinking with his fellow Neanderthals. But Chuck could throw the ball seventy yards. So, the athletic department kept him eligible, and his future was always more NFL than MBA anyhow.\n\nHis legitimate prey were the girls who were trying to prove how wrong their mothers were. There were herds of them on 1960s campuses. And so, there were far too many nights when I'd come back from the library to find a tie on the door. Unlike Chuck, there was no pot of gold at the end of my college rainbow. Hence, I was getting an engineering degree. That wasn't an easy major, especially when you had three hours of practice five days a week. Every other minute I was in the library, or class. So, social life wasn't an option.\n\nThe campus is beautiful in the middle of October. There are a lot of mature trees and little sidewalks lined with old fashioned streetlights. There was the hint of burning leaves and I knew I was as prepped as I could be for tomorrow's 9AM exam. They'd kicked me out of the library when it closed, and I was enjoying a leisurly walk back in the soft fall evening. My mellow mood changed as I approached our room. There was the ubiquitous tie on the door and faint thumping and moaning noises were emanating from inside.\n\nMost nights I was willing to give the inconsiderate piece of shit some space. But tomorrow's exam was going to make-or-break my grade point average. So, I was in no mood to suffer my horny friend. I banged loudly on the door. The moaning stopped. Chuck's pissed off voice said, \"I'm in here!!\" I said just as pissed off, \"I've got an exam tomorrow. So, take your ass over to Sigma Chi or I'll get the RA!!\" That was the nuclear option. He knew I meant business.\n\nA couple of minutes passed, and Chuck appeared in the door, disheveled. I stepped back to let him go by. He gave me a surly look. I didn't care. He was a quarterback, perhaps six feet and two hundred pounds. I might be a fish. But I was big and blond, two inches taller and twenty pounds heavier.\n\nThen Chuck's current object of lust emerged. She was small, perhaps five two. She was wearing the standard coed uniform, tight jeans and t-shirt. It showed off a superb body. But this wasn't one of Chuck's usual skanks. She was knockout gorgeous; super-thick chestnut hair parted in the middle and draped down her back in a long smooth curtain almost to her tiny waist. That was the Ali McGraw, Love Story, look. All the coeds wanted it. This girl had it nailed.\n\nHer shining hair framed a flawlessly proportioned heart shaped face. She had high cheekbones, a beautiful, slightly snubbed nose, wide mouth with full, sexy lips and incredible blue eyes. She was trying to avoid my eyes, because she was doing the walk of shame. But she had to glance up as she moved past me. We both gasped. It felt like standing in a railroad tunnel watching a locomotive rushing at you. I instantly knew that I'd sacrifice anything to make this woman mine.\n\nI just stood there gaping like an idiot. She was frozen in the doorway with one hand over her mouth and the other pressed against her big round tits. An uncomfortably long period passed. We both knew that something deeply special was happening. Chuck might be dim-witted. But he could sense that there was electricity between us. So, he grabbed my mystery woman by the arm and said roughly, \"Come on Annie. We can finish what we started back at the Sig Chi house.\"\n\nI was gazing longingly up the hall, as her perfect round ass swayed its way toward the elevator, when she turned and gave me a look that overflowed with confusion and yearning. I knew where Chuck was taking her and what they were about to do. The dazzling bolt of jealousy that hit me was astonishing. I wasn't simply bothered by the fact that Chuck was about to fuck her. It drove me wild to think that she'd ever been with another man. It was a terrifying feeling.\n\n*****\n\nI aced the final, even though I hadn't slept much. Chuck was gone all night. I got back from the exam about ten-thirty in the morning and he was zonked out. It must have been an all-night fuck-fest. The raging pang of jealousy nearly buckled my knees.\n\nI had a meet that afternoon. So, I hit the rack myself. I woke up just in time to make it over for the pre-race stretching. Chuck was gone, probably for a second round of humping the other half of my soul. I took a couple of cleansing breaths, just to clear my mind.\n\nThe thing about swimming is that you sit around bored, waiting for one incredibly intense minute. The strain builds as your event gets closer. But this time, I wasn't agonizing about the race, as much as I was eating my heart out over Chuck's mystery girl. It was ridiculous to pine for somebody who you'd never even talked to. But I could sense the connection. She felt it too. I could see it in her eyes. The word \"soulmate\" is such bullshit term. It embarrasses me to use it. But there's no other way to describe what this woman meant to me.\n\nThen they called my event. Competition focuses you, which was exactly what I needed. I had to stop my ridiculous mooning over a woman I didn't actually know. It was disturbing. She was probably fucking my worthless roommate, right that very second. But I couldn't imagine how I could live the rest of my life without her. To say the least, I was conflicted.\n\nI was doing the 200 'fly, that day which was definitely not my best stroke. But the guy who normally did it had the flu. I was poised on the blocks, psyching myself to endure the usual two minutes of undistilled agony, while I looked up at the sparse crowd. It was a pre-race ritual, like an actor counting the house. Maybe twenty people were sitting up there.\n\nThen I saw her!! It was the girl from last night!! We locked eyes. She waved. I false started. Actually, what I did was fall face first into the pool out of sheer shock. Then, after I dragged myself out of the water, I proceeded to set a personal, pool, conference and NCAA record for the event. I didn't need to guess what had motivated THAT.\n\nWhen I came out of the dressing room, I found my mystery girl leaning against a wall. She was clearly waiting for me. She looked self-contained and heartbreakingly beautiful. She walked over, stood directly in front of me and eyed me somberly like I was some kind of zoo animal. Then she said simply, \"We have to talk.\"\n\nI said flustered, \"How about Dominik's,\" which was a few blocks away. She just nodded and marched off. I hustled to catch up. But not before I noted the twitching of those incredible buns. I got us a pitcher of sangria and we sat out under the pergola in a beautiful October day. The campus surrounding us was buzzing with activity. The sky was cloudlessly blue, and the late afternoon sun was bright.\n\nUp to that point we'd exchanged exactly seven words. But it felt like we'd been sitting across from each other for at least a hundred lifetimes. She was still looking at me puzzled, like I was a novel species of anthropoid.\n\nShe said with wonder in her voice, \"I feel like we've known each other forever. But I don't know your name.\" I said trying to sound cool, \"It's Lambert, Tommy Lambert.\" Then I went back to staring at her. She blushed and said, \"I'm Annie Gregory.\" The wordless gazing continued.\n\nAll of us jocks take an eastern religion, blow-off class, to satisfy the liberal arts requirement. But I'd learned some things in it too. I said, trying to sound spontaneous, \"The Hindus believe that the soul is immortal. That it progresses through an infinite number of lives. Maybe we knew each other in a prior life and are fated to be together here. Don't they call that kismet?\"\n\nI honestly thought that she'd laugh, since that sounded like something Pepe Le Pew would say. But instead, she seemed to melt right in front of me. Her huge blue eyes registered total astonishment. I could see that she believed it too. But she didn't want to say it. It was like I had read her mind.\n\nShe actually blushed. No coed does that. They're all too jaded. Particularly the beautiful ones. She said, \"I don't understand this. But I feel exactly the same way. It is as if we've shared each other's intimate secrets?\" She went back to looking at me, eyes shining.\n\nThis was getting too intense. I said, \"Do you want some time to thing about this? We could get together tonight and talk it through.\" She looked relieved. Too much had happened too fast. We needed a bit of time apart to figure out where our heads were at.\n\nShe said, \"Pick me up at my place at 6:00. We can grab a bite to eat and talk.\" I said questioningly, \"Your place?\" She said, \"I have an off-campus apartment.\" She wrote down the address and said, \"How about six o'clock?\" Hmmm, so she had money.\n\nI hustled back to the dorm to interrogate Chuck. There were too many missing pieces. High on the list of questions was how many times he's fucked her last night. Chuck was a study in death-warmed-over, sitting there in a ratty old glen-plaid bathrobe, hair still messed up from sleep, face pale and unshaven. I said, trying to sound sympathetic, \"Rough night?\" He said, \"You have no idea. I've never been this hung over in my life.\" I said as nonchalantly as I could, \"That was Annie Gregory you were with last night, right?\" Chuck got a sour look and said, \"That bitch is a freak!!\"\n\nMy heart sank. Anybody my roommate thought was freaky would have to be a real slut. But I said, like I was mildly curious, \"How so? Is she into kinky things?\" Chuck grimaced and said, \"I wish. She dated Rocky Ferraro for a while, and he said she was the hottest fuck on campus. I had her down to her panties when you barged in. But the minute we got to the lobby she blubbered something about how she \"couldn't do this,\" and ran off leaving me holding my dick. So, I went over to Sig Chi and got wasted.\"\n\nHe added puzzled, \"Man! It was frustrating!! She's the best looking bitch on campus. But I don't know what crazy monkeys are fucking in her head. Nobody passes up an opportunity to sample MY man-meat.\" My heart soared. He hadn't fucked her. The part about the love of my life being the hottest fuck on campus was a little disturbing. But this was the Age of Aquarius, the pill, and free love. I thought to myself, \"We hadn't met yet.\"\n\n*****\n\nAnnie's \"apartment\" was actually the first floor of one of those old turn-of-the-century houses just off the campus. There had always been a lot of money in the area. And the houses were big, bright and airy. I knocked on the intimidatingly big Victorian door, wondering what I'd gotten myself into.\n\nAnnie and I might have a connection. But I washed dishes in a fraternity house to make the pocket money I was going to use to buy her a burger; and she could obviously shell out for something like THIS? The woman who answered the door wasn't the same one I had been sitting across from a mere three hours earlier. This one was firing for effect.\n\nAnnie was wearing one of those baby doll dresses that the model Twiggy had made popular, with about four inches of gleaming thigh showing. She'd had on jeans before. So, I had no concept of how shapely and well-muscled her legs were. It was an erection causing sight. Her sheaf of thick chestnut hair was pulled back smooth into a long ponytail down her back and she was wearing makeup for the first time. Her superb eyes were only matched by her full succulent mouth.\n\nShe was amazing. I had an instant flash of insecurity. She was rich, beautiful and incredibly sexy. What was she doing with me? Then I looked into those huge intelligent eyes and saw nothing but love and devotion. She was so happy to see me that she was almost prancing with eagerness. She said brightly, \"Where are we going?\"\n\nI didn't have a car. So, it had to be close. There was a nearby campus hangout that had cinnamon buns to die for and hand squeezed limeade to wash it down. More important, it had very private booths. I said, \"I might be a starving student . But I can still afford a trip to Drakes.\" Annie just glowed with contentment as she grabbed my arm and said, \"My favorite place!\" I enjoyed the heft of her firm boob pressed against my arm.\n\nThe place was jammed as we settled into one of the big wooden booths. I was returning from the counter with two limeades and a big cinnamon bun to share, when Austin Cooper sauntered up. He was one of those hot-shit, preppy douchebags who infested the campus back in the day; slick and totally entitled by daddy's money. The rumor was he'd deflowered more virgins than the high priest of the Druids.\n\nIt was obvious that he and Annie had a history, likely in the biblical way. He said, ignoring me completely and talking directly to her, \"Hey babe, haven't seen you in a while. We're partying tonight at the house and I know how you like to party. Come on up any time, and we can renew old acquaintances.\" I was thinking of kicking his ass on principle alone.\n\nAnnie looked at the piece-of-shit as if she was having a hard time remembering him. Then she said, like it was all coming back to her, \"Oh yes, I remember you now. It's Austin isn't it?\" That took fuck-face down a notch or two. She added dismissively, \"I don't party with boys anymore. I prefer men. Meet my fianc\u00e9 Tommy.\" Did she just say \"fianc\u00e9??!! Okay -- I can go with that.\n\nI stood and offered my hand. I was perhaps five inches taller and easily sixty pounds heavier. He took an instinctive step back, intimidated. I said meaningfully, \"Hi, I'm Tom Lambert and I'm the only one Annie will be partying with from now on.\"\n\nHe looked me up and down and sneered, \"All you're going to do is join a long line of guys who've fucked her.\" Then without shaking my hand he spun and walked away. He was pissed. How delightful. I sat back down and said mildly, \"Nice fellow.\" Annie's face was bright red. She was obviously so angry that she was almost frothing at the mouth. She said, \"I don't know what I was thinking. He's a total asshole. I swear that you can count on one hand the number of guys I've actually slept with. But the stories just keep coming.\"\n\nShe gently reached across the table and took my hand. She said, \"I always knew you were out there. I just had to kiss a few frogs to find you.\" Then, she added sheepishly, \"Your roommate was more like a horny toad. The instant I saw you I knew who you were. So, I just ran off. He was livid.\" Chuck had already made that clear.\n\nMy instincts told me that Annie was telling the truth. But it really didn't matter. I had been waiting for this woman my whole life. She said meekly, \"Can we please go back to my place. I knew what she wanted, and that was going to present a problem.\"\n\nAnnie's place was neat and tastefully decorated. It reflected a sophisticated and thoughtful person. She was indeed the whole package; beautiful, intelligent and sensible. She was chattering away from the large kitchen where she was getting us both a glass of cabernet.\n\nShe said, \"Both my parents are lawyers and we're rich.\" She added uncomfortably, \"They kind-of spoil me.\" I said apprehensively, \"My dad's a high school teacher and my mom took care of us. I hope it doesn't bother you that I'm poor.\"",
        "At that point, she appeared in the doorway holding two wine glasses. She handed me a glass and sat, leaning into me with her long gorgeous legs folded under her. I put my arm around her, marveling at her ease and grace. Women are indeed the flexible sex. If I'd tried to do that, we both would have both been drenched in wine.\n\nThen she seemed to decide. She took my glass and carefully set it on the coffee table. She turned and slid crossways, facing me. She threw her arms around my neck and raised her lips for our first kiss. And that was the predicament.\n\nI'm not bad looking, tall, blond and well-built. So, you'd probably wouldn't guess that I was a twenty-one-year-old virgin? But as I said, I was either studying, or swimming and I am not the most confident guy around women.\n\nI was also certain that Annie would expect a performance similar to the ones she had gotten from the five men who had come before me. After all, she was supposed to be the hottest fuck on campus. I had to come clean. I said, \"I know what you are thinking. And I have a secret that I have to get off my chest first.\"\n\nShe looked at me in horror. It was like she thought that I was about to confess that I was out-and-proud; or I liked to see my women hogtied in a rubber suit, something like that. I said,\" I hate to admit it. But I'm still a virgin.\" I could have probably told her that I was actually from the planet Tatooine and I would have gotten a less astounded reaction. I was humiliated.\n\nThen she began to laugh. First the mirth came into her eyes. Then it took over her entire face. And finally, her whole body was convulsed by uncontrollable paroxysms of laughter. Okay, that was mean!!! I started to rise in a huff. But she yanked on my hand to pull me back. I was off balance, and I fell face first on her big couch. As I fell, SHE was arranging herself so that I would fall on top of her. Her legs were spread incredibly wide.\n\nI immediately pushed myself up on my arms to take my weight off of her. In the meantime, she was frantically scrambling around in the area of my zipper. The next thing I knew, there was an extremely hot and wet sensation on the part of my anatomy that had never experienced such an amazing, out-of-this-world feeling before.\n\nShe grabbed the back of my head and pulled me down to an open-mouthed kiss that replicated the wonderful feeling at the other end. I had watched enough porn that I had the process down in concept, if not actual practice. So, I began the age-old motion and Annie went utterly nuts.\n\nShe threw her head back, mouth wide open making extreme effort noises. It was like she was choking to death. Then she let out an unearthly cry and threw her legs around my hips and her arms around my neck. I don't use a word like \"abandoned\" very often. But that was how Annie gave herself to me.\n\nShe would buck shout, and quiver wordlessly. Then she would go right back to throwing her hips up at me. That motion is similar to swimming and I have the endurance that you get from all those years in the water. So, I just kept on-and-on and she kept bucking, shouting and quivering. I finally looked at her face. She had the exhausted look of somebody who was right on the edge of losing it.\n\nShe started chanting, \"Come Tom!! You have to come in me NOW. I can't take it any longer. Please come. PLEASE!!!\" I started pounding on her like I was trying to break her. She took me to the hilt making hoarse grunting noises while I lost myself in an ecstasy of coming.\n\nThere were several mislaid minutes as I got my wits about me. I had bailed out of Annie the instant the cataclysm in my loins died down and I was now lying on the floor. Annie was on her back, one arm dangling off the couch like she had been shot, and legs spread wide. That would have been a wanton sight, except she was out colder than a proverbial mackerel. I thought, \"Great, I've finally found my soulmate - and I've killed her!!!\"\n\nI rushed frantically into her bathroom and got a cold wash rag. She was still just lying there when I hustled back. Her delectable chest was rising and falling with great intensity and her nipples were like little brown acorns. I considered that a good sign. I pushed her gorgeous legs together, while examining her fertile hips and hard stomach. I'm a GUY. I notice those things.\n\nThen, I began to gently bathe her forehead. She came back to me slowly, like she had been someplace long ago and far away. Those incredible blue eyes focused and then she gasped. She said with wonder in her voice, \"What did you do to me? I've never experienced anything like that in my life.\" I shrugged lamely and said, \"I don't know. I've never had sex before.\"\n\nShe smiled weakly and said, \"I haven't felt passion like that in my life. It was like I was joining with a thousand versions of you.\" I knew what she was saying. While we were making love, it had felt like cosmic gears were turning and vital parts were clicking into place. Then, the oddest thought struck me. We were together again.\n\nAnnie said, her voice lazy with satisfaction, \"Now lie down here with me and hold me.\" I obediently turned on my side and she snuggled those big round rock-hard buns into me, she wrapped my arms around her and went right off to sleep. I lay there for a little while sensing her enticing smells and feeling her little jerks as she slept, and I was scared shitless. There would never be another woman for me. But I had only known her for a day, and I had no idea what to do next.\n\nThat was answered for me the next morning. I awoke on a bright sunny fall morning. Her apartment was in a solid 19th century house. It had floor to ceiling windows, not the dinky little things you see in modern houses. And the sun was just streaming into the room. Annie was lying in my arms in the same position that I had been holding her when had fallen asleep.\n\nBut there was a new feature. I was sporting a hard-on that must have been using up 90% of the blood in my body. And it was jammed in the crack of her exquisite round ass. I was trying to figure out a way to shift her onto the couch without waking her up when she moved. And what had been an embarrassing poking of her butt-crack became an extremely stimulating poking of her nether lips.\n\nI swear she was sound asleep but as soon as I touched her entrance she moaned loudly and said sleepily, \"Ahhhh yesss that's it!!\" and she arched her back, pushed her ass at me and I was suddenly hilted in a very hot and totally wet pussy. That produced a snort of epic proportions and her head turned, to look back at me eyes wide open in surprise.\n\nShe moaned loudly and threw her top leg over mine. She arched her body back against me so that she was lying mostly on top. Then SHE began to thrust back in a frantic bucking motion that ended perhaps 30 seconds later with her loudly yelling, \"Oh God YESSSSSS!!!!\" Then the high frequency quivering started again. It was like she was being electrocuted. As she worked through her orgasm her butt cheeks were frantically clenching and unclenching on top of my lower stomach and her passage was fluttering with little nips and ripples.\n\nFinally, she just lay limply on top of me panting. I was still hard as a rock. But I had no desire to cum. I just wanted to worship her. I couldn't imagine the inner fire and feminine spirit that could produce that kind of sensuality. I slowly withdrew. She moaned loudly all the way out. She rolled off me to lie on her back on the broad couch. I propped myself up on one elbow. I looked into her perfect face and she was looking back at me with apprehension.\n\nI knew she wanted affirmation. I said, \"If I never see you again, I will cherish what we shared for the rest of my life.\" She looked at me like I was a total idiot and said merrily, \"What gave you the idea that you will EVER get away from me? We've found each other. You are mine. We are eternal lovers and I will never let you go.\" It felt like the cosmos had suitably realigned.\n\nI never spent another night in the dorm. Annie had a lovely place. So, I just packed my things and moved in. We married at the end of the semester and we spent the following three and a half years living the kind of blissful life that people who genuinely enjoy each other's company have.\n\nI would run into Chuck once in a while. He would give me \"that\" look. It was like he couldn't figure it out. But then again, guys like Chuck never would. For him, marriage was all about lust and domination. While Annie and I had partnership. And a fellow can weather through anything if he has the right companion in life.\n\n*****\n\nAnnie had always planned to go to law school. So, I did a master's in aerospace engineering. You couldn't grow up in the early years of the space race and not be fascinated by manned spaceflight, and the North Campus Aerospace Research Center was the place where the Mercury astronauts had trained.\n\nThen, I settled in at the Goddard Spaceflight Center in Greenbelt Maryland. The Houston Manned Spacecraft Center was mission control for the Apollo program. So, they got the TV coverage. But Greenbelt did the flight dynamics. We made every mission possible.\n\nI was called a FIDO; not a dog, but a flight dynamics officer. My group did the stability and control calculations for the Apollo launches. We computed the escape trajectory and uploaded the burn, attitude and timing data to the Saturn V launch vehicle. We also calculated the lunar insertion vectors for the Command Service Module once in orbit.\n\nMy first launch was Apollo 10, which was the proof of concept for the moon landing, I was shadowing the senior FDOs, supervising uploads to the onboard CSMs. The CSM was the Apollo guidance computer. Every Apollo mission was run by a single capsule CSM with a capacity of four kilobytes; about the same memory as a later Apple II. Needless to say, the programming was excruciatingly difficult.\n\nI was an old hand by the time Apollo 11 came along. I recall spending the morning of July 16th sitting at a console as we fed updates to the Saturn V launch vehicle sitting on Pad 39a. I was only a spear carrier. But it was unforgettable. I was a senior flight controller by Apollo 13. That was the only other time I touched history. I led the team that jury-rigged the critical DSM burn that returned the astronauts after they had their \"problem.\"\n\nMeanwhile, Annie was getting comfortable in her new job as a Federal District Attorney. \"Say WHAT??!! A Fed??!!\" Her decision shocked everybody. We just assumed that she would take her talents to a Beltway firm. But Annie always saw the big picture and she knew that there were far too many young lawyers only interested in feathering their own nest.\n\nMy wife was newbie with the Department of Justice. So, she got the shit trials. Which was gratifying, since it meant I could support HER for a change. My work was logical and precise. Everything we did was predictable. We arrived on time, We got home when we were supposed to. Annie, on the other hand, lived in the rough-and-tumble world of federal law enforcement. Her days were a crapshoot.\n\nSo, I'd get home at my normal, exact hour and my wife would show up much later -- exhausted. I'd have dinner ready and then we'd spend a quiet evening just enjoying each other's company. Of course, that typically led to a more strenuous form of stress relief. But all we ever really cared about was being with each other, and evenings were the best part of our day.\n\nA hundred years ago, Dickens called a year like 1968 an, \"epoch of incredulity.\" Disbelief is the right word. It was as if the world had gone nuts. The year started out with the Tet offensive. Then two social icons were assassinated, first King, then Bobby Kennedy. In between, George Wallace's shooting proved that old-fashioned racists weren't immune to assassin's bullets either. Then there was the Democratic convention. That quickly descended into what could only be described as all-out culture war.\n\nI tell you this because it was the backdrop for the 1968 presidential election. That election featured two deeply unpopular candidates; Richard Nixon and Hubert Horatio Humphrey. The Vietnam war took just enough wind out of Humphrey's sails to narrowly elect Nixon. And so. the Republicans now owned the war. Almost immediately, Tricky Dick started performing escallatio on the Vietnamese. That drove the antiwar movement batshit crazy. Hence, the Dems thought that Nixon was ripe for the picking by the time the 1972 election rolled around .\n\nNixon's opponent was George McGovern, who was a social warrior with bold ideas and impeccable counterculture cred. At the same time, Slippery Dick's approval rating was hovering in the forty percent range. Something had to be done. That something surfaced shortly after midnight on Saturday, June 17, 1972, when the DC cops caught five guys burgling Democratic National Headquarters. The FBI quickly connected the break-in with a slush fund used by Nixon's re-election committee, and the fecal matter hit the rotary object.\n\nNixon swore on a stack of bibles that he didn't do it and then he went on to bury McGovern in an epic landslide. THAT should have ended things. But almost immediately, stories began to pop up in the Washington Post that hinted that the Watergate break-in, and the attempt to cover it up, reached all the way to the Oval Office. Everybody wondered where the reporters got their information.\n\n*****\n\nSometime in December of 1972, I began to notice that Annie was keeping secrets. Up to that point we had been what sociologists call a binary couple. That is, our connection was absolute and only to each other. Now, it was as if a mysterious force was stealing some of Annie's bandwidth.\n\nThe primary symptom was distraction. There would be the occasional disappearances at odd times. Sometimes she was home later than usual. Occasionally she'd come home and then go back out again. A less secure guy might hire a private eye or put a tap on the home phone. But it never crossed my mind that my wife was cheating.\n\nStill, Annie was clearly up to something and she wasn't sharing it with me. That was worrisome. Our partnership was founded on trust, and trust requires total honesty. Hence, I had no problem sitting my wife down on a snowy evening in January of 1973 and asking her point blank what the heck was going on.\n\nSurprisingly, she got nervous and fidgety. It was obvious that she didn't want to tell me. I said concerned, \"I know something odd is going on in your life. We are too closely attuned for me to miss that. We have always shared the bad with the good, so spill.\"\n\nAnnie looked truly frightened. She said, \"I won't let it affect you.\" Now some men might assume that was a confession. But a hundred incarnations of our love told me that my wife was in trouble. I moved to the settee in front of her, gathered both of her little hands in mine, leaned forward and looked into her beautiful eyes. They were pools of love and conflict. I said, \"We vowed for better or worse. Whatever hurts you, hurts me. So, let's face this together.\"\n\nAnnie was still hesitant. She said, \"I love you. I'll always love you. But they're too powerful. Your life would be in danger if I told you.\" Then she said with real anguish, \"They kidnapped Martha Mitchell because she knew too much. I can't imagine what they'd do to you if anybody found out.\" That was an astonishing statement. Martha Mitchell was the wife of the Attorney General of the United States.\n\nI said alarmed, \"What in the world are you talking about. Who would be crazy enough to threaten John Mitchell's wife? Who are THEY?\" She looked at me pleadingly. I could tell she'd made up her mind. She said resolutely but tenderly, \"This doesn't involve you in any way. It's something I have to do. You are just going to have to trust me.\"\n\nI said, \"That's a very big \"ask\" my love. Because you've just told me that you are in harm's way and you want me to stay out of it. That leaves me with a moral dilemma. Do I insist that you put me in it with you? Or do I step back and trust you to handle it? There's a ton of angst in it for me either way.\"\n\nShe continued to look at me imploringly. I had to trust our bond. I said hesitantly, \"But I respect you. So, I will go through this blindly as a tribute to our love.\" She got an indescribable look of relief on her gorgeous face, rose, took my hand, and led me into the bedroom. Annie never solves problems with sex. In fact, her sexuality is so fundamental and natural that I couldn't see how she could force herself to use it to manipulate. She said, \"Could you please just hold me. I'm scared and I need to feel your arms around me.\"\n\nI'm a foot taller. So, I more-or-less enfolded her. We lay fully clothed on the bed with her lush body pressed against mine. I could smell the lavender in her hair. it reminded me of our very first night together. Had it only been five years? She was softly crying and shivering slightly. This was serious!!\n\nI made up my mind. I had to trust her. I said, \"I'll honor my pledge to stay out of this as long as you promise to ask me for help if you need it. And by all means, let me know when this is over. I'm worried sick.\"\n\n*****\n\nI'd pledged to stay out of Annie's mysterious business. But I hadn't made any promises about not finding out what she was up to. I could track an Apollo capsule from the time it swung around the dark side of the moon, until it splashed down in the Pacific. So, I could track my wife as she made her way around DC.\n\nI put a miniaturized RF beacon in her right taillight, wired into the harness for the lightbulb. It emitted a constant ping in the eleven kilohertz range, the same as our satellite system; which was where I \"borrowed\" the equipment. Now, all I had to do was wait for her next mysterious late-night trip. That came the following Wednesday. I knew it was going to happen. She had been nervous all evening.\n\nShe came bustling out of our den with a couple of folders under her arm. She was wearing jeans and a sweater. So, she wasn't going anywhere fancy. She put on her bulky pea coat gave me a lingering kiss goodbye and said, \"I'll be back in a couple of hours. Please wait up. I have something I've been dying to tell you.\" I said, \"Be careful.\" We both knew she was going to one of her enigmatic appointments.\"\n\nI activated the tracking beacon the minute her car cleared the driveway. 1973 technology wasn't like it is today. There were no nav screens with little dots on them. The only way I could actually track my wife was to monitor the shifts in the signal strength. Thus, I was exactly five minutes behind her as she headed north on Maryland-185 toward the beltway.\n\nWe lived out in Chevy Chase, which was a compromise distance between Greenbelt and The Justice Department down on Northeast N Street. I had a lot farther to drive. But I had 495 and Annie had DC traffic. She took the westbound rotary toward Cabin John. So, she was headed for Virginia. I kept the ping stable, perhaps six miles behind her as she crossed the Potomac. Then it veered east. So, she was on the George Washington now.\n\nShe was driving sedately, obviously in no hurry. I closed the distance until I could just see her sporty Olds Cutlass convertible, as she took the exit into Rosslyn. I followed her through the whoop-de-do over to Fort Meyer street and then south to Wilson Boulevard. That whole area is nothing but office buildings, fast food and HOTELS. My heart sank. Was she meeting somebody at the Hyatt? Annie continued blithely past, thank god!!\n\nThen I saw her turn indicator come on and she disappeared into the parking garage under the Oak Hill Office building; curiouser and curiouser. That place is a beehive during the day. But it was shut up tight at 11:00 PM. I didn't want to spook my wife by pulling in behind her. So, I parked on the street and hustled down the stairs into the bowels of the parking structure. I quickly checked each level, listening for voices, or any sound.",
        "I finally heard her car idling on level \"D.\" I felt ridiculous, stealthily creeping around a parking structure in the middle of the night. But I almost immediately spotted Annie standing behind a pillar while she talked to a man who was equally hard to see. It was dark and shadowy down there. Hence, I had no problem creeping near enough to overhear the conversation. Annie was just saying, \"This is the last of it. You have everything you need.\"\n\nThe man's voice said, \"You are a true patriot and a brave woman. The American people owe you a debt of gratitude.\" Annie said, steel in her voice, \"You can repay me by making sure that nothing gets traced back to me. You HAVE to protect me as your source. I have a wonderful life and a husband who I love, and I'm pregnant.\n\nMy eyebrows shot up to my hairline. I was going to be a daddy!!?? We had been trying for almost a year. When was she going to tell me THAT!!! Then it dawned on me. Annie had said that she had something important to tell me tonight. The mysterious man laughed and said, \"Don't worry. We only identify you as Deep Throat. No sexist innuendo THERE.\" Annie chuckled and said, \"You only wish. I reserve that strictly for my husband.\"\n\nAnnie arrived home bubbling over with relief and the joy of what she was about to tell me. I was appropriately surprised and overjoyed. I would have been a dead man if I'd told her that I already knew, because I was lurking in the parking structure when she had handed the last batch of Watergate material to Woodward.\n\nThe identity of Deep Throat was a well-kept secret until Mark Felt claimed it. Woodward quickly confirmed, even though there was abundant proof from the timing of things that Deep Throat couldn't possibly be Felt. Of course, Annie worked directly for Felt at the time and my wife was a person of courage and integrity. More relevantly, Felt's confession came in 2005. By that time our youngest, Mike, was 27 years old and flying an F-15E Strike Eagle over Iraq. Coincidentally, August 4th, 1974, the day that Nixon resigned, was also the day of our daughter Brooklyn's first birthday party.\n\n*****\n\nYou don't think about the end-game until you get there. That's unfortunate. Because, the end of your life is when all the important questions get asked. Did you justify your existence? Did you add a little value? Or, were you a waste of oxygen, a taker, not a giver? Your story's already been written. So, there's no way to change the ending.\n\nI was content with my life. I'd done interesting work, which had contributed in a small way to advancing mankind. I'd fathered three wonderful children. They'd grown up to be effective adults, and more importantly, decent people. But the primary comfort in my old age was the love of the woman who was sitting next to me on the little stone bench in our favorite spot, overlooking Saline Point.\n\nI had a couple of lucrative patents and Annie had retired as a Circuit Court judge. Maryland weather is depressing in the winter and the climate in the Windwards is always perfect. So, we bought a place on the north shore of the island of St Lucia.\n\nI could still do a few laps in our Olympic sized pool. But an old man insisted on standing between me and the mirror. Of course, Annie had never aged; at least in my eyes. Alarms had been going off in my head for weeks. It was nothing substantive, just a premonition. But it wouldn't go away. I turned to my dear wife and said with too much anguish in my voice, \"I would be lost without you.\" Her eyes crinkled with concern. We'd been married for over fifty years. She knew what I was implying. She said, \"I know that. So, I know you'll be right behind me if I go first.\"\n\nI said, \"I think it's going to be the other way around my love. But either way, thank you for this life.\" I looked into her sweet eyes and the love I felt for her was reflected back at me full force. We kissed like eternal lovers. The gentle breeze picked up. The sun was shining brightly, It was hot in the tropics. But I could feel the icy fingers tapping me on the shoulder.\n\nEPILOGUE\n\nAnnie came running up the hill toward me. It was a lovely spring day, not a cloud in the sky. The grass was green and lush, and the trees were in their first glorious bloom. Behind her, three adult children and a host of friends were gathered around a grave. It had only been two months. But I felt like it had been forever. I marveled at her beauty, long chestnut hair, gorgeous face and superb body. I thought to myself, \"How could I be so lucky?\"\n\nShe rushed into my arms and we kissed passionately. The gears of the universe began to creak into motion. She said, \"God!! I missed you!!\" I chuckled and said, \"I haven't been dead THAT long. I've just been waiting around for you to catch up.\" She gave me one of her glorious smiles and said contented, \"I hope the next life is as happy as this one's been.\" I grinned back at her and said,\" We always have each other. That's good enough for me, no matter what cards we get dealt.\"\n\nThen I added playfully, \"I wonder if they'll have flying cars?\" My eternal love and everlasting soulmate whacked me on the arm and laughed merrily. Then, as we had done for millennia, she gently took my hand and we walked together into the bright light."
    ],
    "authorname": "dtiverson",
    "tags": [
        "predestined meetings",
        "beautiful wife",
        "timeless love",
        "drama"
    ],
    "category": "Loving Wives",
    "url": "https://www.literotica.com/s/undying"
}
{
    "title": "Trini Trims the Tree",
    "pages": [
        "[This story follows \"Trini Plays a Trick\" and \"Trick or Trini,\" but can probably be read pretty easily on its own. I hope you enjoy it, and Merry Christmas to all!]\n\n*\n\nSo, flying doesn't normally give me wobbly stomach. And opening up that I'm a t-girl doesn't normally make me weak in the knees. I'm even the coolest of cucumbers about what to say when my occupation comes up in conversation. (\"Event coordinator\" if someone's introducing me to their granny, \"world's greatest escort\" if it's pretty much anyone else.)\n\nAnd being around rich white folks? Never a problem -- not with my client list, honey.\n\nWhich should have made the fifteen-minute flight by twin-prop, six-seater puddle-jumper from Nassau to a super-exclusive little Bahamian island for a week of Christmas-time festivities easy as easy-peasy pie with piece-of-cake chaser.\n\nRight?\n\nOnly for some reason, I think I had crushed every bone in Wyn's hand before we even got off the runway.\n\n\"You okay?\" he asked as we got airborne. His left hand covered the back of mine where I had his other one trapped in my quivering death-grip.\n\n\"Sure, yeah,\" I said, tossing my hair in an attempt to loosen up. It felt a little heavy and weird because I'd had it cornrowed to cut down on maintenance if we got in the water. \"When do you think they're going to start the drinks service?\"\n\nHe laughed. It was that warm-every-vein-and-squooshy-bit-in-your-heart laugh of his, which helped me take a deep breath and unclench some to let the circulation back in his fingers. Our hands swung easier in the aisle between our seats.\n\n\"Hopefully,\" he answered, \"right after they send the cameraman through to get this scene on video -- you flipping out while I'm actually relaxed for a change.\"\n\n\"Are you?\" I blinked and turned my head. Sure enough, once I got my eyes working instead of staring out the front windscreen at blue Caribbean sky, I saw he was right. \"Hot damn, you are, aren't you?\"\n\nWyn shrugged and scrunched his mouth to one side. His blue-green eyes sparkled like the tropical water along the beaches below us. \"I don't know ... maybe more relieved than relaxed. We're here. It's real now. Instead of stressing and freaking, it's time to just ride it out. Whatever happens, I'm getting on a plane with you next week and flying home.\"\n\nI shivered for a whole different reason and leaned across the aisle, tugging his hand to get him close enough I could put my lips on his.\n\nBuck up, Trini, I told myself when the kiss broke and we smiled at each other and kept swinging our hands together. You're not the one who's got to introduce his transsexual hooker girlfriend to his one-percenter parents and then top it off by telling his dad he's quitting the family business. If Wyn's shaken the shaky-shakes out of his system, you got no excuse for pissing your panties.\n\nThe four-day trip from Miami had felt more like a rollercoaster than a cruise. Don't get me wrong -- we had a blast. But at least a couple times a day, at a lull in the dancing or when we finished getting a massage or decided we'd had enough of the ship's casino, I'd catch him with this look on his face and have to squeeze him close and take him for a drink or a sunset walk. Or if all else failed, get him back to the cabin and screw his brains out. That last one worked like a charm every time.\n\nThe look always came back, though. This was a high-fucking-stakes trip for Wyn. I mean, girlfriends come and girlfriends go, and even if I was a pretty big shocker of a girlfriend, a guy can get away with bringing home the wrong girl at least a time or two, even if he's from Upper East Hoity-Toityville like Wyn. But you're talking a whole other ball game with the bit about \"Hey, Dad, you know that CFO thing you're lining up for me? Fuck that shit.\"\n\nAnd as supporting and reassuring and screw-his-brains-out sexy as I stayed on the outside, every day took me up another notch on the anxiety scale as we sailed closer to this showdown.\n\n\"So why are you getting nervous all of a sudden?\" Wyn asked. \"That's not your normal digs.\"\n\nI shrugged. But I guess it was more of an I-don't-want-to-say shrug than an I-don't-know shrug, and the look in his pretty sea-and-sunshine eyes told me he saw through it.\n\n\"Come on,\" he prodded, squeezing my hand when I didn't answer right away. \"You're way too tough to be worried what my parents think of you. I didn't make them out to be that scary, did I?\"\n\nI shook my head, frowning.\n\n\"Then what?\"\n\nDeep breath. My dark, long-fingered hand in his. Those eyes.\n\nI couldn't help ducking the subject in typical Trini fashion. With my best smirk sliding into place, I said, \"I'm terrified if I get in a pissing match with your dad, it'll make him feel inadequate when I pull mine out and he sees it.\"\n\n\"Uh-huh,\" he said. Then he gave me a little I'm-letting-you-off-the-hook-for-now smile. \"Whatever you say.\"\n\nWe stayed quiet a while. The plane rose, banked a couple times, then turned its nose back down. The view out the windows ... holy shit, was that ever something. I mean, I've been to the Bahamas before, on a cruise with some friends a few years earlier. The islands and the ocean and the sky are freaking amazing no matter what the angle. But from out the window of our little twin-prop plane, hanging in the middle of blue that went up forever ... just ... fucking wow. Little jewels of islets, emeralds set in gold-ring beaches floating through this crazy aquamarine that ran off to the edge of the world ... whoosh.\n\nIt couldn't help but settle down my antsy-ness.\n\nAt least until the pilot announced that we'd be circling our island and landing in a minute.\n\n\"Fuck,\" Wyn said, leaning across to look out my window as we made a wide turn. \"Dad really out-did himself this year.\"\n\nI looked too. And looked again. And looked again. \"What ... wait ... did he rent a whole fucking island?\"\n\nThe view out the window said that's exactly what Mister Moneybags Tate had done. We were headed for a little spear of land just big enough to have its own airstrip. A tiny cove opposite the grey line of the tarmac had two or three boats at a pier. Other than that, the greenery of the island was broken only here and there by the trappings of ultra-wealthy leisure -- a couple of villa-style houses, a crystal-blue pool, tennis courts, a tiny chapel that I guess came in handy if you wanted the place for a wedding. There weren't enough buildings to fit more than ten or fifteen guests, tops, so unless Wyn's dad had arranged to split the rental with some other group ...\n\n\"Damn, my dad likes to show off, but this is extravagant even for him. I mean, there's only five of us -- six if Liselle brings her friend Carly. I bet we're going to be outnumbered by the staff.\"\n\nWelcome back, nerves. Sure wish this flight had actually had a drinks cart.\n\nWe touched down after a single circuit over the island. For the first time in my life, the plane didn't have to taxi anywhere once it landed; coming to a stop used up pretty much the whole damn landing strip, and we just turned in a circle by the maintenance building before the pilot shut down the engines with ocean to our left and a gazebo and a path leading off through the trees on our right.\n\n\"I'm guessing that's not your dad,\" I said, pointing to a tall black guy in a suit who stood by the end of the trail. As the props slowed, he walked across the concrete toward us showing a warmly professional smile.\n\nWyn laughed. \"No. Probably the staff manager. The high-and-mighty Jerry Tate doesn't stand around waiting for anybody.\"\n\nA few minutes later, we found ourselves headed up the steps of a ritzy beach-house, with Mr. Tompkins the staff manager preceding us to hold the door. I'd barely crossed the threshold when a crisply masculine, authoritative voice rang out from a side hall, turning my head.\n\n\"That you, Wyn?\" said the voice as its owner strode into the foyer to greet us. \"About time I get to meet this --\"\n\nTo give him credit, he only faltered a fraction of a second when he saw me, blinking his steely grey eyes once before letting them glide onward to Wyn. The expensive, finely tailored dress-shirt he wore and the slacks and loafers that went with it said he made a habit of never meeting anyone while dressed too casually. Maybe he'd put on shorts and a polo shirt later, but not for introductions. I was glad I'd worn one of my nicer dresses.\n\n\"-- girlfriend of yours,\" he finished, keeping his eyebrows from tightening too much or creasing his high forehead.\n\n\"Hey, Dad,\" said Wyn, with a hint of oh-boy-here-it-goes in his voice. \"I'd like you to meet Trini Jones. Trini, this is my father, Gerald Tate.\"\n\nI held out my hand. \"I can't tell you how glad I am to meet you, sir.\"\n\n\"Likewise, of course,\" he said, taking it.\n\nNo feel of nervous sweat on either of our palms ... which was good, because the second his classically sculpted face hit my retinas, I thought:\n\nOh, it's this Jerry.\n\n* * *\n\nThe first thing Jerry Tate had said to me, closing his hotel room door behind us a year and a half earlier, was, \"So this is a bucket-list thing, and I don't need or want any sweet-talking or play-acting. Get your clothes off and let's get to it.\"\n\nThen he turned away, shucked his bathrobe, and walked to the luxury suite's bedroom without even looking back. And that was a good thing, because if he'd looked back, he might have caught me trying to keep a straight face while I undressed.\n\nJust to be clear, I don't make a habit of looking down my nose at clients or laughing behind their backs. But there's a certain kind of guy who just has to be in control. In control of himself, in control of everybody around him, in control of every situation every day. And when that kind of guy gets an itch for my kind of scratching, he can't stand it. He's been a thousand percent sure of his sexuality his whole life -- so \"sure\" he usually has to demonstrate it with homophobic jokes and a string of hot-chick conquests. But for some reason, he gets this kink, and he can't stop it working at him, and working at him, and working at him. And when he finally gives in and looks me up online (this kind of guy would never ask anyone for advice on how to get his itch scratched), he always has to make excuses (\"bucket list\"), demonstrate his maximum alpha strut, and let me know he's absolutely, definitely, completely not going to be into it (\"no sweet-talk\").\n\nI feel sorry for the poor shmucks, because I always make sure they enjoy the hell out of themselves, and they always walk away half-ashamed of how much they liked it. Okay, maybe not always. Every once in a while, I get a call-back from one of them, and he turns into a regular, and I watch him soften up over time and start turning into a real man. But I could tell Jerry wasn't going to give a call-back.\n\nOn the other hand, doing his top-dog stride into the other room, he showed me a damn fine ass -- every bit as chiseled as his jaw. Legs weren't bad either, and the play of muscle in his back and shoulders said he worked as hard to control his shape as he did controlling everything else. So I ran my tongue over my teeth and left a trail of clothes all the way to the bedroom, pretty sure I'd have a good time showing Jerry an even better time.\n\n\"Okay,\" I said, rubbing my hands together, my cock and tits all out and swaying as I entered the room. \"So you're the boss, obviously. What do you want to do first? And is there anything I should call you?\"\n\n\"Jerry,\" he said, eyes fixed on my crotch from his place by the bed. That hard, grey gaze narrowed and eased a few times -- maybe trying to decide what to think of the first cock besides his own that would be entering his sexual history. His broad chest expanded as he inhaled.\n\nSince Jerry didn't seem ready to give me my marching orders, but did seem to be swelling up pretty rapidly as he stared, I untucked my handbag from my armpit, raised both arms over my head, and did a slow turn for him. Here you go, Jerr. Some sweet, firm, curvy ass for you to drool over. A nice, soft waist. Girly brown belly over lonnng, fine legs. And a big, hard, black dick to let you find out whatever it is you want to find out. What it feels like topping a t-girl? How much sexy sausage you can get down your throat?\n\nOr how to take it, deep and fast, up your ass?\n\nHe nodded his head of fine-groomed grey hair as I finished my turn. Like a lot of my clients, he had a couple of decades on me. But he wore it better than most. \"That's good. You'll definitely do. For starters, come over here and get on your knees and blow me.\"\n\nI'll bet my eyes sparkled as I sashayed toward him, grinning. The jutting pole of his hard-on made it clear he didn't need any foreplay, so this was a total dominance move. I'm betting that means you want to take it in the butt, don't you, Jerry? Gotta make sure I know my place before you let me into the driver's seat, right?\n\nSinking to the carpet, I clicked open the handbag and fished a rubber out by touch, my eyes staying on his and my mouth just inches from the swollen, pulsing tool in front of me. With a rip of the package and then just enough suction, I held the ring of the condom flush against the ring of my lips, then leaned and sucked so that I unrolled it by going down on him.\n\n\"Damn, you're pretty good,\" he said when I landed my nose in the soft brown curls above his root and got the rest of his rod all the way down my throat. I could tell he meant it to sound like a throwaway compliment -- but a little hitch in his breath told me I was doing better than just \"pretty good.\"\n\nLet's make you feel all safe and secure in your hetero self-image, then, Jerry.\n\nI slurped.\n\n\"Hhh-hh ...\" went his breath, ragged and hot. My eyes stayed locked on his. I brought my hands up to my tits and started squeezing them, teasing them, slow and steady in time with each bob and lick I gave his sheathed-up shaft. He got his hands in my big, frizzy afro and started thrusting. \"Yeahhhh.\"\n\nHis hips upped the pace. I rolled with it, working my neck, my lips, my tongue, my throat. Jerry had a pretty hefty cock -- long and full, plenty to gag a less-eager deep-throater than me. The feel of it sliding along my inner cheeks, my tongue, stuffing itself down my esophagus, got me horny as hell. I've always been a sucker (pun intended) for having a good prick fuck my mouth, and the way he grunted and panted as he really got pumping turned me from stiff to steel-hard.\n\n\"Uh -- uh -- uhhh... fuck ... I want to cum on those tits ...\"\n\n\"Mm ... hmm,\" I said, in a couple of gaps where his pistoning length left my airway clear enough for me to hum the noise out.\n\n\"Fuck! Yes! Suck it -- take that cock -- all the way -- in -- nnnggg ...\"\n\n\"... mm ... hmm ...\"\n\n\"Ah! Ah! Ah!\" I felt him starting to swell as his humping went wild. \"Fuck, yeah! Get ready ...\"\n\nHe had that red-faced, mouth-shaking thing going on. The bulgy neck-vein thing too.\n\n\"OAH! Guh -- huuhhh ...\"\n\nHis hands left my hair. One palm pressed against my forehead and urged my face away as orgasm charged up out of his balls and along his shaft. I could hear it in his groan and feel it with my lips and tongue, and with absolutely perfect timing, I circled my hand around that ready-to-explode man-member, stripped loose the condom as my mouth pulled back, and aimed his throbbing jets right at my chest. Hot, spattering splashes of jizz blasted out across the dark flesh of my breasts.\n\n\"AH, God!\" Jerry yelled, his eyes and mouth wide as he watched himself douse my rack in white, spermy seed. \"Fuck!\"\n\nI thrust my boobs out as far as they'd go and milked him for every sticky streamer he had in him.\n\nWhen he finished, he gave a last groan and toppled backward to the bed, arms behind him to hold him up, face turned to the ceiling. For a while, he stayed like that, frozen except for the movement of his chest and belly as he gasped.\n\n\"Jesus,\" he said at last, once he got enough breath back to look at me. \"You've got a hell of a mouth on you.\"\n\n\"Thanks,\" I said. I kept eye contact, using one fingertip to draw slow figure-eights in the silky runnels of semen he'd shot all across my chest. Then I raised an eyebrow. \"That's not all I've got on me. Any particular part you're interested in trying out next?\"\n\nHis eyes dropped from my face to my splooge-smearing finger and then down to the hungry beam of my cock between my legs.\n\n\"Yeah,\" he said -- in charge, sure of what he wanted, and now prepared to demand it. \"I've got to piss ... maybe take a dump too. Then I'm going to have you fuck me in the ass.\"\n\n\"Ready when you are,\" I replied, meeting his gaze when he brought it back to mine. I added a hungry grin, but kept the, Just like I thought! to myself.\n\nJerry got up and strolled to the bathroom in that virile way some guys do right after they come, like the whole world exists just to get them off and every orgasm proves it to them again. I watched the toned muscles of his ass as he went, letting myself smile and shake my head at last. I'd noticed the bare bathroom counter on the way past -- no sign of personal toiletries. And I hadn't seen luggage anywhere in the suite. All of that told me Jerry had shelled out way more to the hotel than he had any practical reason to, and since our appointment was only for two hours, every penny past a plain room and king mattress had been spent to let me know I was renting myself out to a Big Man.\n\nI resisted the temptation to check the trash for empties and see if he'd raided the mini-bar waiting for me. You've got a job to do, Trini, babe, I told myself. Let's get ready for that instead of peeking into poor Jerry's self-confidence issues.\n\nIt didn't take much to get back in business mode. All I had to do was arrange myself on the silky-soft bed, glide a couple of fingers up and down my shaft, and think about my client's well-muscled bottom and generously sized cock.\n\nI do like my work.\n\nWhen he came out of the bathroom a few minutes later, Jerry still had his top-of-the-world poise going. I looked him up and down and licked my lips.\n\n\"You keep yourself in fine shape, Jerry,\" I said. He grunted as though the compliment meant nothing, but I saw a surge go through his hanging dick when I said it. \"Now how do you want this well-trained piece of equipment to find its way into that shape? On the bed? The floor? Face-to-face? From behind?\"\n\nHe puffed up his chest a little. \"I'm going to get on my hands and knees in the middle of the bed, and you're going to give it to me so I can feel your tits on my back and watch us in the mirrors.\"\n\nHis head gave a toss toward the mirror-doored closet along the wall that faced the bed.\n\n\"Yes, sir,\" I replied, putting a slink in my voice and shifting so I could throw the bedspread back. Jerry climbed onto the sheets with me, on his knees but spine upright and shoulders squared in manly fashion. I rolled on a condom and lubed myself up as he found a spot he liked. He paid no attention to where I was -- in fact, I'd bet he deliberately positioned himself so I'd have to move around behind him, instead of him pointing his ass my way.\n\nSure, Jerr, I thought warmly. I'll come to you instead of you coming to me. And then I'll come in you while you're coming too.\n\nI made sure to drop the lube bottle where it would be in arm's reach once things got going.\n\nRunning my dry hand appreciatively up his biceps and around the hard swell of his shoulder, I worked my way behind him, leaning to kiss the side of his neck and tongue the little hollow behind his ear. In my peripheral vision, the mirrors let me see an upward lurch of his cock at my attentions.",
        "His ass clenched by a hair as I grazed one lube-slick finger up his crack. Then he relaxed, and I ran it back down with more pressure.\n\n\"Now, since this is your first time,\" I said, finding and caressing the tight knot of his asshole with my fingertip, \"we can work our way up one finger at a time --\"\n\nJerry shook his head and dropped forward, hands to the sheets, which took his ear at least momentarily away from my sultry breath. \"I want it all at once. A hooker last year fingered me right when I was coming -- I know what a finger feels like. I want to know what it's like to be rammed.\"\n\nHis expression in the mirror told me not to warn him how much that might hurt, so I flared my eyes instead. \"Yeah,\" I said, \"you seem like the kind who can take it.\"\n\n\"That's the whole point. Let's go.\"\n\nNodding, I shifted more directly behind him and lined myself up. He didn't flinch when my tip touched down against his asshole. But he did close his eyes and set his jaw.\n\nI raked my fingernails down his spine and pushed.\n\n\"Ngh.\" His muscles barely yielded at all. I kept my free hand circling on the small of his back, nails making a hint of contact that said, relax, since I knew he didn't want me to say it out loud. I pushed again. \"Hnhf ...\"\n\nFor my third push, I kept the pressure on, steady enough I could feel a little give. The guy's breathing sped up something fierce. Come on, Big Man, I thought, let go. Let me give you what you want.\n\nJerry opened his eyes and glared at me in the mirror. The voice that made it out past his clenched teeth hit somewhere between a growl and a snarl. \"Do it!\"\n\nInside, I shrugged. Outside, I gave him an of-course-sir-right-away-sir, nod, along with my well-compensated obedience.\n\nWith both hands at his waist, I jammed.\n\nBreached him.\n\nRode all the way in and folded at the waist to get my nipples against his back like he'd ordered.\n\n\"AGH! SHIT!\"\n\nJerry had some spine on him, I'll tell you. Most guys would have been all \"Pull it out, pull it out!\" after a second or two, but Jerr hung in like a champ even with the muscles of his asshole grabbing my root so hard the cramps must have been agony. I settled more of my weight onto that sculpted back of his, wrapped my arms around to caress his chest and knotted-six-pack abs, and put my mouth down by his ear.\n\n\"I'm going to pull out now and let you feel it a second time,\" I said, quietly but making sure I didn't let any hint of sympathy or mercy into my voice. \"If that's okay.\"\n\nHe nodded, but said nothing. I could see the sweat breaking out on his pain-ridged forehead, feel the tension everywhere my body touched his body, like every muscle he had was squeezed as tight as the dick-invaded ring of his sphincter.\n\nPeeling myself up from his back, I put my hips in retreat and felt the powerful, instinctive push of his rectal muscles all along my shaft as he expelled me. When my tip came free, I watched his butt spasm closed and waited for the twitching trembles to die down.\n\nHis panting gradually slowed, and some of the contorted lines eased in his face. \"Say the word when you're ready.\"\n\n\"Again,\" he said, almost immediately, trying to show how tough he was. I couldn't tell if that was to prove something to me, or to himself.\n\nI lined up and thrust into him again, slower this time, letting myself glide instead of ramming. His ass muscles still objected, but with less resistance than before. The stroke felt tight and sweet as heaven from my end. And the virile strength of his back made me hot to get humping. But I restrained myself, massaging his pecs and shoulders instead, nipping lightly at his earlobe as his rectum tried fiercely to drive me back out.\n\n\"Another one of those?\" I whispered steamily. \"Or some of this?\"\n\nMy hips rolled to show him how it felt to get ass-fucked at full depth by a professional.\n\n\"Nng --\" he said, somewhere between pleasure and pain. Close enough to the second, though, that I figured he'd take my offer to pull out. But even though the strain on his face said the same thing, Jerry apparently had some iron fucking will on him, because instead, he growled, \"That. Fuck me.\"\n\n\"My pleasure,\" I said, grinning. Then I got things started.\n\nLittle strokes first -- out and in by just a nudge. He grimaced and grunted at each one, with his asshole still having seizures around my shaft. But with every slippery, anus-expanding thrust, I heard and felt those pain reflexes drop away, until Jerry's grunting turned the corner into the territory of damn-if-it-doesn't-feel-fucking-amazing-getting-colon-probed-by-somebody-else's-cock.\n\nI rolled and pressed against him as I thrust, making sure he felt the pillowy flesh and brick-hard tips of my tits on his back. Sweat sprang out between us, slicking the hot plane where my belly slid along his spine. Not too far in, he started humping too.\n\n\"Uhhh ... fuck, yes,\" he said, his tailbone moving hungrily in response to every lunge I made. \"God damn.\"\n\nI wandered my right hand along his hard-working abs, past the bellybutton, to tickle at his pubic hair and then at the very erect cock I found beyond his thicket. With a grab and a firm pump, I said, \"Ready for this to get some attention too?\"\n\n\"Uh-huh,\" he said, shoving hard into my grip. \"Work it.\"\n\nThe stiff pole of my cock against his prostate had squeezed a nice dribble of precum from his tip, and a few tight-fisted tugs brought even more swelling out. I caught a palm-full and used it to polish his knob\n\n\"Uhhh,\" he moaned as I treated his ass and his cockhead alike to some good, slick friction. Starting to really dig it, aren't you, Jerry? When the precum got too tacky, I reached for the bottle of lube where I'd strategically dropped it earlier and squirted myself a handful. The swipe of my fingers along his shaft, wetting him up, made him groan even more. Teasing my free hand through the hair of his chest, I rode in deep and really got to work. Like a morse code of sex, I bounced back and forth between strong, reaming cock-strokes and silky-smooth milking: uh-uh-uh/oh-oh-oh/uh-uh-uh. To top it off, I shifted and circled my upper body so that the play of my breasts along his back never let itself be forgotten. \"Oh, God ...\"\n\nThere we go. What's that, Jerry? Where's your can't-ever-let-it-go need for control now? Hmm. Looks like you must have dropped it somewhere.\n\nI ran my tongue up the long muscle that bordered his throat, then sucked his earlobe between my lips. The hitch of his breath and the writhing of his torso beneath me said I had him exactly where I wanted, and when I threw a glance up at the mirrored closet doors, I found him staring at us, his mouth slack and eyes almost stunned. Wrapped around him, plunging into him, gleaming with sweat, dark against his faint country-club tan, I grinned and then blew him a reflected kiss before returning my mouth's attention to his throat and jawline and shoulder.\n\nThree times, I got him right up to the edge. Each time, I felt the extra clench of his muscled tunnel around my shaft, or heard him give a whimper, or felt his prong turn even stiffer in my grasp. Each time, I locked my hands and hips in place and gave him a nipples-and-tits-only backrub until I heard his breathing drop a good ways back toward normal. Then I'd start again, slow, and work him steadily along the road to orgasm.\n\n\"For God's sake,\" he groaned on our fourth push for that summit. \"Make me come this time!\"\n\nMy answer was a sweet glistening swirl of my hand around his cock and a half-dozen plunging, full-depth strokes into his ass.\n\n\"AH -- AH -- FUCK!\" he cried out. Then he let loose with a motherfucker of an orgasm so fierce I just had to look up into the mirror and watch it. The dick in my reflection's hand blew white streamers loose all over the sheets underneath us, throwing cum across the hotel bedding like whip-strokes. I held myself all the way inside him and kept my grip tight on his throbbing erection as he ejaculated gallon-jugs of semen everywhere. When the explosions started dying down, I gave him another cock-prod in the prostate and milked his hard-on, and he shouted and blew even more hot spunk onto the linens.\n\n\"Holy fuck,\" he gasped, head lowered, whole body trembling. I let go of his softening prick and put my hand down to support some of my weight, in case the quivers were him reaching the limits of his strength. \"Holy fuck ...\"\n\n\"So. Jerry. Do I pull out and get on my merry way, or --\"\n\n\"No.\" The shakes left him and his head lifted, eyes sure and commanding in the mirror. \"I want it all. I want to know what my ass feels like with a dick coming in it. And lift up and hammer me so I can see your knockers swinging while you do it.\"\n\n\"Gotcha,\" I said, in a tone that made it sound like I meant, Aye, aye, sir, even though I really meant, I got you good, didn't I?\n\nI rose up from his sweat-slick back, dragging the nails of both hands along his spine as I went. Then I took hold of his waist, made eye-contact in the mirror, and drew back until only my tip remained lodged inside him.\n\n\"Hard and fast?\" He nodded brusquely, so I nodded back. \"Here we go, then.\"\n\nI'd kept my own orgasm at a low boil through every trip pushing Jerry toward his brink. It wouldn't take much to bring me off, especially with this Big Man's domineering, masculine physique on hands and knees in front of me, waiting for me to slap it into him.\n\nTime to find the sweet spot, Trini. Long enough he thinks he knows what a real ass-pounding feels like, not so long he gets tired of it and thinks you're overstaying your welcome. Somewhere a little short of a minute, maybe? Play it by ear.\n\nWith a quick pump of the hips, I laid into him, making sure I threw my shoulders back at the same time for maximum boob-bounce. We both grunted with the power and pleasure of that jab -- but I made sure I beat him out for loudness.\n\n\"Fuck, that's good,\" I said, keeping my teeth shut tight as I pulled back for another stroke. \"Nnnf!\"\n\nKnit those eyebrows together, girl. Curl those lips. Show him how good it is, giving him a good buttfuck.\n\n\"Uhh! Uhh!\" With every thrust, I accelerated, fingers clutching his muscled waist or digging into his ass-cheeks. \"UH! Fuck, yes ...\"\n\n\"Do it,\" Jerry commanded. \"Do it!\"\n\nI put that touch of heaven into my voice as I groaned and whapped up against him. It didn't take any faking -- levering my cock into his tight hole felt fantastic. \"Ooohh ... ooh ... uh --\"\n\nFaster. Faster. Face scrunched in, breath steaming through my nostrils and snarling teeth ...\n\n\"Ah ... Uh ... UH ... UHHNNG!!!\"\n\nBingo.\n\nThe floodgates opened, and Jerry found out how a long, strong stiff one feels, blowing loose inside your ass. I threw my head and shoulders back, breasts raised high, hands clamping him to me in a vice-grip so he got the full effect of my hard on, plunged into his bowels and pumping a out fat load of semen that only the condom kept from absolutely flooding him.\n\n\"Mmmmmm,\" I hummed, relaxing back to vertical and opening my eyes. Moment of truth.\n\nJerry had what I think of as The Look.\n\n\"Was that okay?\" I patted his bottom and pulled out.\n\n\"It was fine,\" he answered. But he didn't make eye contact.\n\nYep. Not going to get a call-back from Jerry. Enjoyed being a cum-bucket too much to risk a repeat.\n\nHe slid over and sat at the edge of the bed, hands on his knees. I threw a glance at the bedside clock.\n\n\"Plenty of time left on our two hours,\" I said. \"Should we wash up and --\"\n\n\"No.\" His back straightened. Hands moved from knees to thighs. Then he stood and turned. \"I got what I needed. You can go.\"\n\n\"Sure,\" I said, scooting off the bed to fetch my handbag. I dropped the bottle of lube in it and slid a business card from the side compartment. \"Here. In case you ever decide to call again.\"\n\nThe Look. He wanted it. Wanted to take it. Wanted me to stay so he could bend over and take it, and take it, and take it. Maybe past the two-hour mark. But he just couldn't let himself go there. Couldn't be the weak one, getting studded for someone else's pleasure. He did accept the card, though. Too much business reflex in him to flatly say no to another professional's card.\n\nI wonder how long he's going to spend in this room, deciding whether to toss my number in the trash or put it in his pocket.\n\nBut I kept that thought to myself and headed into the suite's living area to get dressed. Jerry shut the bedroom door between us and didn't open it again.\n\n* * *\n\nSo on the one hand, yay! I didn't have to worry about Jerry bringing up the subject of my job. I'm a fucking Einstein at reading posture, and Jerry's had gone just tense enough for me to know how scared shitless he was that his family might learn the scoop I had on him.\n\nBut on the other hand, oops, I'd fucked my boyfriend's father.\n\nKind of a big secret to keep from Wyn, but how in God's gonzo gonads could I possibly tell him?\n\n\"Mom not here?\" Wyn asked. His voice had a hint of pins-and-needles in it, like he either wished she was there to keep his dad in line, or dreaded the possibility of having to make the same several shocking revelations more than once.\n\n\"Took the boat over to town with Liselle,\" Jerry said, releasing his handshake with me and switching to offer one to his son. \"Shopping.\"\n\nHoly shit, that's some over-the-top family PDA right there, I thought, watching Wyn and his dad shake hands.\n\n\"Come on,\" Jerry said, when the gratuitous show of affection wound down. \"Let's ...\" He tossed a glance my way. \"Let's get some drinks.\"\n\nWe followed him through the house -- under vaulted ceilings and past ostentatious sculptures and the posh trappings of wealth. And this is just the shit that the owners decided they could spare to make their renters feel at home. Wonder what those people's house looks like.\n\n\"Nice place you found this year, Dad,\" said Wyn as we came into a marble-floored great room, chandeliers suspended over the furnishings. A giant but undecorated artificial Christmas tree stood in one corner with an unopened shipping crate next to it.\n\nMister Tate headed for a bar on the far side of the main sitting area. \"Wish I could say I did it just to impress ... um, Miss Jones. But actually, I won a bet with Carlson Fenway. Loser had to put up for the winner to stay here. Twenty grand a night, five-night minimum. And I'd have been shelling out five times that on jewelry, if your mom caught me losing that kind of money. What can I get you?\"\n\n\"Midori and gin,\" I said, not bothering to add, if they have it. Looking at the place and the size of that bar, they had it.\n\n\"Rum and coke, please,\" said Wyn.\n\nJerry mixed our drinks, and we took them over to a huge, enveloping couch and some massive armchairs. For himself, he brought a tumbler and a bottle of expensive scotch, pouring several fingers and then sitting in the chair nearest the couch where Wyn and I settled.\n\n\"Here's to a spectacular holiday visit,\" I said, raising my glass. The two men did likewise -- Jerry tossing back more of his drink than Wyn or I did when the toast was over. \"Mm,\" I added after a sip. \"You're a pretty good bartender, Jerry.\"\n\nFor half an hour or so, we nursed our drinks and made small talk ... how our flight from Nassau had been, how the cruise had been, what kind of bet Jerry had made with Carlson Fenway. (That turned out to be a game of \"Fantasy Fortune 500\" -- each player picked a CEO, COO, CFO, and C-all-the-other-letters-in-the-alphabet-O, then tracked the stock performance of each executive's company for the year and averaged them to find out who'd done better.) The conversation avoided any hot-button topics, and either that fact or the rum and coke settled Wyn down until he looked almost at ease in the big, overstuffed sofa.\n\nThen a door opened somewhere, and a female voice called out, \"Hello-ooo ...\"\n\n\"Ah, the girls,\" Jerry said, standing quickly and shooting his cuffs. \"We're in here, Meredith.\"\n\nWith a bit of echoing sandals-on-tile noise and feminine chatter, two women made their way through the house and appeared through the cove-side archway. One stood tall and ice-queen imperious, blond hair falling cleanly to her shoulders, a chic white sundress wrapping up her runway-model elegance. The other ...\n\nJesus fucking Christ. It was all I could do to keep from saying it out loud. You have got to be shitting me.\n\nMerry.\n\n* * *\n\nThe first thing Meredith Tate had said to me, once the hostess seated us at an isolated booth a year earlier, was, \"So, just to be clear, I didn't actually hire you to ... you know, do what you ... well, you know.\"\n\nWife found the card, I thought. I've had this happen to me several times, surprisingly enough. Usually, the husband's \"carelessness\" substituted for having the balls to outright say he wanted a divorce; leaving my card where a spouse could get hold of it took some major incompetence or deliberate self-sabotage. Twice, though, it had led to some wild threesomes that hubby didn't have the guts to outright ask for.\n\n\"That's perfectly fine,\" I said. \"The charge is the same either way, though.\"\n\nMerry nodded, her prim, china-pale features struggling with propriety. She had grave hazel eyes, an unscowlable Botox forehead, and perfect deep-brown hair that probably took three professionals just to open the bottle it came out of.\n\n\"My husband ... well --\"\n\nI stopped her by moving my eyes toward the waiter who approached us over her right shoulder. We ordered our drinks, she told him that was all we'd be needing, and she gave him a hundred from her pocketbook to show she meant it.\n\n\"My husband doesn't know that I know where his secret business-card stash is. He's a very clever man, but he made the mistake of marrying a cleverer woman, and I like to keep track of what he's up to.\"\n\n\"So ... you set up drinks dates with all the women whose cards he brings home and hides?\"\n\nShe frowned, making mid-fifties lines appear around the corners of her mouth. \"No. But ... if they have websites, I do look at those. And I looked at yours.\"\n\nNot approvingly, I gather.\n\nOur cocktails came, and then the waiter beat a hasty retreat. I was a bit sorry to see him go; he had a delicious dimpled chin and an even better bottom.\n\n\"Merry,\" I told her, feeling uncomfortable that I had only her first name to use. Given the lady's overstarched formality, 'Mrs. So-and-so' would have rolled off my tongue more easily. \"I hope you're not going to ask me for details. As I'm sure you can imagine, my line of business takes a through-the-roof amount of discretion.\"\n\nHer composure gave the tiniest twitch. \"I could offer much more than your fee ...\"\n\n\"I wish I could take it, because I don't like to see anyone upset as a result of what I do. But I just absolutely can't. I hope you understand.\"\n\nShe took a deep breath and a pull on her Manhattan.\n\n\"Well then ... in general terms. Could you answer some questions about your usual clientele, without naming names?\"\n\nOh, honey, if I don't have to name names, I'm happy to talk all night on your dime.\n\n\"Of course,\" I said, with a reassuring smile.\n\nMerry nodded and thought. \"First ... are most of the men who engage your services ... well, are they secretly homosexuals?\"\n\n\"Almost never,\" I said, smile turning frank. I pointed both index fingers at the swells of my breasts. \"Gay guys usually aren't into these. Or waists as curvy as mine.\"\n\n\"I see,\" she said. \"That's some relief, I suppose.\"\n\nRight, I thought. Cheating on you might be bad. Cheating with hookers might be worse. But cheating because he's gay? Oh dear, the embarrassment.",
        "Merry sipped her drink again. \"Then what is ... I don't mean to be rude, but what is the appeal?\"\n\nI laughed, very tempted to say, 'Have you seen me?' Instead, I launched into the same explanation I'd given the other handful of card-finding wives who'd approached me over the five years I'd been working.\n\n\"Some of them are bi,\" I said. \"They like women, but they like men too, and I can give them a little of both. Others have a specific t-girl kink. A fetish. And others just get a wild hair up their ass to ... get something else up their ass. Men don't necessarily attract them, but there's something about a penis they just can't get out of their heads.\"\n\nWith a swallow -- and not because she'd taken another drink -- Merry contemplated her next question.\n\n\"And once in a while,\" I said, in case she wanted a reed to hold onto, \"they're not calling because of what I have between my legs at all. What they really want is a black girl, and they rationalize that since I'm not really a girl to them, it's not really cheating. They get to see a hot black woman going down on them, or tit-fucking them, or whatever else they want except for the vagina part. As long as they skip the vagina part, they're not really breaking their vows.\"\n\nShe gave a snort. \"Well, that's not Je-- ... not my husband. He gave up worrying about the vows some time ago, if his little treasure-trove of business cards is any indication.\"\n\nI shrugged. \"There are also those who want a show. They'll hire me to bring a friend and give a live-and-in-person performance while they whack off, but they don't put their hands on either of us.\"\n\nSomething turned behind Meredith's not-quite-green, not-quite-brown eyes.\n\nAha, I thought as she hastily reached for her drink. Hadn't considered the look-but-don't-touch angle, had you, Merry?\n\n\"Would you like to at least see what your husband saw?\" I asked her. \"We could go in the ladies' room real quick, or ...\"\n\nThe rest of the Manhattan drained away. The cheated-on wife stared into a tumbler of ice cubes while her cheeks went from pale to rosy.\n\nTen minutes later, in a hastily rented hotel room across the street, I was taking my clothes off, blue shimmerscale halter-top first.\n\n\"Oh, my,\" said my audience of one as I undid the catch of my bra. \"I can't believe I'm really doing this.\"\n\n\"Relax, sugar,\" I told her gently, slipping out of the cups and straps and tossing the bra away. Maybe I should have suggested a second drink instead of rushing right over here. But Merry had turned urgent once she took me up on the offer. I think she worried about losing her nerve. \"You're just having a little look. What do you think so far?\"\n\nHer delicate throat moved in a swallow, and her voice came out low. \"They're very nice. I wouldn't have expected ... I mean, they can obviously do amazing things these days.\" She looked down at her own modest chest. \"Maybe I should reconsider having mine done. I always thought it was crass, but ...\"\n\n\"Everybody's mileage varies,\" I said, topless, hands on my hips and one knee slightly bent. \"I grew a pretty decent pair just from hormones, so the surgeon didn't have to do all the heavy lifting.\"\n\n\"Really?\" She blinked. \"I didn't realize ... I thought it all had to be cosmetic.\"\n\nI shook my head. \"For me, it was just because I wanted sexpot tits instead of girl-next-door ones. But sweetie, do we really want to be talking boob jobs? I'm happy to if you want to, but I think we're both pretty well set up in the breast department.\"\n\nHer face colored again. \"Well. You wouldn't if I had my blouse off.\"\n\nShrugging, I ran my skirt's zipper down, nice and quick so it cut through the quiet of the room with a sizzle. \"Feel free to take it off and prove me wrong if you want to. I'm just saying, from over here, they look pretty good.\"\n\n\"You're ...\" Merry's nostrils flared and her breath faltered. \"You're not trying to get me to ...\"\n\nWith a laugh, I shimmied out of my skirt. \"I'm trying to get you to do whatever you want to do, honey. My whole job is to make people feel good, you know? If all that takes is showing you how I look naked, great. Or if you need me to tell you your breasts are nicer than you think, that's fine too. Or ...\"\n\nGliding one hand down the front of my panties, I rolled my hips and rubbed my smoothly tucked crotch.\n\n\"That won't be necessary, certainly.\" But the way her stare kept following my hand said maybe she wasn't certain at all. A decision came over her, and she looked up at my face. \"On the other hand, I don't suppose there's any harm in getting a completely unbiased opinion. You have to promise not to lie, though. I'm paying you to be open with me, not feed me a line.\"\n\nAs her hands went to the buttons of her blouse, I smiled encouragingly, raised a hand to my cleavage, and drew an 'X' there with one finger. \"Cross my heart.\"\n\nShe got the first button open easy, and the second too. At the third one, her hands had started to tremble, and as they neared her waist, they shook. By that point, though, she was a lit firecracker, with a fuse bound to burn all the way down. Tugging out her shirttails, she flung the top loose and grabbed for the catch of her bra -- a front-opener that whipped off after the blouse in a bare second.\n\nHer chest rose and fell with quick breaths. She settled her hands at her waist and squared her shoulders.\n\n\"Child,\" I told her, eyes on her tits, \"time is sure kinder to A-cups than to big-bosomed girls.\"\n\nI didn't have to lie about that. Merry had a perky little pair -- smooth swells that I'll bet embarrassed her in her teens but now looked almost exactly the same as in her post-pubescent glory days. Maybe shifted a hair lower from years and having kids. Pink, pointy little nipples. A couple of beauty marks near her breastbone to accentuate the whiteness of the skin.\n\n\"Mm-hmm,\" I said, nodding. \"If tits were my thing, I'd definitely be having to hold myself back right now.\"\n\nHer mouth fidgeted for a bit, like it didn't know how to settle into a smile. Then she bit her lip and looked me in the eyes.\n\n\"What ... what would you be holding yourself back from doing?\"\n\nI gave her my best arch look, right eyebrow up. \"You want me to tell you -- or show you?\"\n\nThose sweet little domesticated nostrils flared again.\n\n\"Show me.\"\n\nI walked over, gliding demurely instead of vamping and va-va-vooming. Even with my shoes off and hers still on, I had a full head more height than she did, plus another six or eight inches of poofy curls, so I did my best impression of meek and mild to let her feel like she was the one in charge.\n\n\"First,\" I said, running the back of one finger along her collarbone, \"I'd get a nice, close look.\" And I did, staring and putting the heat in my eyes and licking my lips. Not that Merry's melons did anything for me -- they were perfectly nice tits, well above average for shapeliness despite their size, but I don't get a hard-on looking at the Mona Lisa. Michelangelo's David, on the other hand ...\n\n\"Next,\" I went on, trailing the finger down and over the slope of her right breast, \"I'd have to feel how soft they are.\"\n\nI added my other fingertips and circled them all around the dainty, pillow-soft curve, then lifted gently at the lower swell. My free hand found her other breast and grazed its circumference just as lightly. I let out an appreciative murmur. In front of me, Merry closed her eyes and breathed like a hummingbird. I palmed her with both hands, lifted and caressed, feeling the pebble-hard nipples against my skin.\n\n\"And what I'd really, really have to work at,\" I whispered, in a slow descent to one knee and then the other, \"is keeping myself --\"\n\nHands shifted, baring her nipples and areolas.\n\n\"-- from leaning in --\"\n\nMouth closer, my words fell hot against her skin.\n\n\"-- and licking --\"\n\nMy tongue flicked out to draw a gasp from her.\n\n\"-- and tasting --\"\n\nI sealed my lips about her nipple, ran my tongue-tip in a circle there. Merry groaned.\n\n\"-- and sucking --\"\n\n\"Wait ... wait, just --\"\n\nThe word and her tone tipped me back. I broke contact and looked up at her.\n\n\"I'm sorry,\" I said. \"Was that --\"\n\nChest rising and falling, quick and steady, she said, \"I don't need you to show me what you showed my husband after all.\"\n\nI got ready to stand up, in case she wanted me to go.\n\nBut she didn't.\n\n\"I need you to fuck me.\"\n\n\"Well!\" I smiled and gave her a knowing head-tilt. \"I guess someone has some very sensitive nips.\"\n\nMerry nodded, unbuckling her thread-thin silver belt. \"And they haven't gotten that much attention in ages.\"\n\n\"You're sure about this?\" I asked as she unfastened her slacks and skinned them off. Underneath, she had plain white panties, smooth hips, and trim, athletic thighs with just a hint of middle-aged crease starting to show where waist met hips and hips ran down into legs.\n\nShe stepped out of her shoes and pants at the same time, then all but jumped out of her panties and into the bed.\n\n\"I'm sure it's a horrible, nasty thing that I'll feel awful about when it's done.\" Her eyes had gone all round and wild-womany, and her voice shook as she crawled up to yank away the coverlet and topsheet. \"So please, before I lose my nerve -- come and do something to me that I can regret later.\"\n\nUntucking, I took my own undies down, while Mercy watched from hands and knees at the head of the bed. Her tongue wet her lips at sight of my dangling dingus, which hadn't firmed up yet and wasn't a total monster under any conditions, but still appeared to be much more than she expected to see today. Her eyes stayed on it as I fetched a condom and some lube from my bag.\n\n\"Do you want to put yourself in my hands?\" I asked, climbing onto the bed with her. \"Or is there something specific you'd like me to do?\"\n\nIn a rough voice, she said, \"I want it to be dirty. I want us to do it like animals.\" And she swiveled her bottom toward me, putting her head down in the mass of pillows beyond her. \"Please -- hurry and mount me like a dog.\"\n\nIt took some intense concentration on the image of our square-jawed waiter in his tight, black server's pants, but I managed a reasonably quick erection. While milking my cock into full working order, I stuck a thumb in Merry's cooch and made her gasp. She felt very wet and ready -- a few rubs of my trigger finger on her clit brought a full-body shudder out of her.\n\n\"Put it in me,\" she panted, grinding back against my hand. \"Put it in me. Be a beast.\"\n\nNow, I'm only bi when I'm on the clock, and having a thumb up Mrs. High Society's hoo-hah wouldn't ordinarily light my fire. I mean, she had a nice one, don't get me wrong -- neat, smooth lips and a tender pink nub, nestled in a bush that wasn't fully landscaped but had at least been trimmed back from run-amok hair-splosion.\n\nBut the tone in her voice ... that got me going the final nudge. You can't beat the sound of a horny, sex-woken primate for clicking my ready-to-fuck switch. It's just plain contagious, even if the body it's coming out of isn't my normal cup of tea. (Or cup of booty.)\n\nSo I tore the rubber packet open with my teeth and dressed my weenie in its work clothes while Merry fucked my thumb and forefinger with everything she had.\n\n\"Okay, sweetie,\" I said, getting in behind her. \"You ready for something bigger to slide in there?\"\n\n\"Yes ... oh ... oh, yes!\"\n\nAnd easy as that, I un-thumbed her and stuck it deep.\n\n\"UH!\" Merry shoved back hard and turned into a little wildcat. \"Ah! Urhh! Yes, oh, yes, you stud, dog-fuck me dirty -- nnggh ...\"\n\nDamn, sounds like somebody has been neglecting this cunt something fierce.\n\n\"So you like a good doggy dicking, Merry?\" I slammed hard and growl-grunted on my question mark. \"That? Yeah?\"\n\n\"Yesss ...\" she rumbled, rougher and lower than you'd think a little thing like her could manage. \"Uh -- uh ... hit it ... hard ...\"\n\nWith both hands on her waist, I gave her a half-dozen power-pumps, driving her deeper into her pile of pillows with every one. \"Rrhh! Good girl. That's -- ah ... a good -- girl. Yeah, my little -- vixen -- is in heat, huh?\"\n\n\"Hrrh! Hrrh!\"\n\nThere's my sweet spot. That right there.\n\nI worked her hard and showed her how good I can be when I'm in my groove. Customers come in all shapes and sizes, and you might be surprised that the best ones aren't necessarily the hunks or the muscle-boys. Sometimes they're not even boys at all. If I can get them where I had Merry right then -- out of her head with lust and fire, going crazy over every stroke of raw excitement I gave her -- if I can get them to that spot, they can be ugly or fat or wrinkly or female, and the job still turns into a picnic for me. Maybe my cock felt pretty good, sliding in and out of Merry's wet hole, but my belly and the middle of my chest felt even better -- all steamed up with sexual power and the kick of knowing I could erase everything bad in Merry's life, make it all disappear, totally, for just a little while.\n\nA few minutes in, she squealed and came, and I slowed things down for a bit to let her recover. Soft, long strokes as I leaned forward, let my tongue hang out, and puppy-panted in her ear. My tits dragged along her back while I screwed her, one hand holding up my weight and the other wandering her belly, her thighs, her ass. Just for grins, I worked that hand between us and got a finger down her crack.\n\n\"Oh,\" she gasped, her whole body tensing. I wiggled the finger, drove it deeper along her crevice. \"Oh, dear, that's -- don't ...\"\n\n\"No?\"\n\n\"That's so dirty. I don't ... you shouldn't ... ooh ...\"\n\nMy fingertip landed against her rosette and threw it into spasms.\n\n\"It's filthy ... I ... I ...\"\n\nGetting back to the vertical, I probed her cunt with enough force to drive my pubes against my finger and my finger against her butt-pucker. Then I did it again.\n\n\"No? Yes?\"\n\n\"Hhh ...\" Her ass pushed back against me, vagina hungrily devouring my rod and asshole dimpling around my fingertip. \"Oh, no, no, no ... so wrong ...\"\n\nOn my next stroke out, I dipped my finger lower and ran it around my shaft, coating it with her pussy juice. Gliding back in, I pressed the lubed-up digit where it sure seemed like she wanted it. Just the tip of the tip popped in, but Merry thrashed like I'd donkey-dicked her.\n\n\"Oh, God, you nasty brute! Please don't befoul me that way, I'm begging you!\"\n\nTwo knuckles in, she groaned and came again.\n\n\"Uhhh -- uhhh -- so ... disguhhh ... uhh --\"\n\n\"You said I needed to be an animal, Merry,\" I told her, lodging my whole finger inside and pumping my hips to cunt-ream her. \"Aren't you liking it?\"\n\n\"No, oh, no, how could -- I -- glluhh ...\"\n\nKeeping the index finger in, I dropped the middle finger down so that my shaft brushed against it with every in and every out, until I had it juiced up too.\n\n\"You'll like this twice as much,\" I said.\n\n\"What? Nngff! Oh, dear Lord, what are you doing? Sweet heaven, don't ...\"\n\nBut the tremor in her voice and the ease with which she took the second finger told me to keep going. I seesawed her two holes, fingers-in, dick-out, dick-in, fingers-out, back and forth and back and forth. Merry whined and rocked her hips helplessly.\n\n\"Please, no more, no more,\" she said as her hungry ass and cunt squelched out, More, more! \"Oh ... oh, no, for God's sake, please tell me you're not going to put your penis in my bottom like I was one of your homosexual lovers ...\"\n\nDamn, in for a penny, in for a pound, huh, Merry? Well, I can definitely do a pound.\n\nI got my fingers loose. Both hands went to her butt-cheeks, thumbs spreading her crack wide.\n\n\"Sweet Jesus, save me from this sodomite!\" She put a lot of emotion into it, but I've heard better acting at middle-school drama productions.\n\nWith a quick pull out of her snatch and a tilt of my pelvis, I wedged my juice-dripping tip against the pink yawn of her asshole. Then I gently but relentlessly plugged myself into her poop-chute.\n\n\"AHHH -- fuck! Fuck me, you fucking animal! Fuck me there! Grahh!\"\n\n\"Yeah?\" I asked, dropping to all fours and sealing my body tight to hers. \"You want to be mutt-mounted, Merry? Mutt-mounted and ass-jammed?\"\n\nShe just growled and roared and rolled beneath me like an ocean getting its big O on. Her voice pitched upward and upward with every series of butt-thumps I gave her, until I finally heard the queen of all orgasm cries getting ready to bust out of her throat. Right then, I grabbed up into her crotch with one hand and drubbed her mons and clit with a three-fingered claw.\n\nI wouldn't be surprised if our waiter from across the street heard her going off.\n\n\"CHRIST IN HEAVEN -- OH, SHIT -- COCK! DOG-COCK, FUCK -- SHIT!\"\n\nWhen the shouting and shaking finally wrapped up, she plopped off me and fell flat, lying there face-down, arms at her sides, quivering and gasping. My insides turned all rosy and sweet, even though I hadn't gotten all that close to coming.\n\nA minute or two later, without raising her head from the pillows, my little housewife client said, \"Trini.\"\n\n\"Mm-hmm? What else can I do for you, Miss Merry?\"\n\nMuffled by the downy pile, her voice still came out clear enough for me to catch every word.\n\n\"I'm going to need my own copy of your card.\"\n\n* * *\n\nSo hilariously enough, Jerry had never called me back, but I'd gotten repeat business from his wife for months after that, sometimes as often as every other week. And now here she was giving me my second chance in twenty minutes to practice that innocent 'Have we fucked at some point? No, of course not, I've never met you in my life' look.\n\nNaturally, with the business I'm in, I've got that look down to the ground, right-side-up or upside-down. Merry, on the other hand, did an even worse job of it than her husband had. I think she might have stood there blinking all day if the men hadn't both gotten up and if Wyn hadn't walked across the room for another Tate-family burst of demonstrative affection -- which in this case consisted of giving a brief smooch to each of his mother's cheeks as she presented them to him by turning her head.\n\nI followed him over while Jerry sat back down. The tall, icy blond gave a surprisingly non-icy smile and held her hand out to me.\n\n\"Liz Tate,\" she said as I took it and shook it.\n\n\"Trini Jones. It's really nice to meet you.\" Yeah. As in, 'Thank God there's at least one member of this family I haven't played hide-the-sausage with.'\n\n\"Nice to meet you too,\" she replied. Then she let go to fist-bump Wyn. \"Hey, bean-counter.\"\n\n\"Hey, corporate overlord.\"\n\nMerry looked like she couldn't decide whether to be annoyed or relieved that the fist-bump and sibling sniping blocked the way between us and prevented the obligatory mother-girlfriend handshake. After a beat or two, she barged past them with her arm extended.\n\n\"And I'm Meredith,\" she told me, with a bit of a stiff smile and a flinch to her grasp like she expected an electric shock when our hands met. I tried to loosen her up with a smile and a gentle squeeze of my fingers.\n\n\"I can't tell you how tickled I am. And you're as beautiful as your son is dreamy. But do you go by 'Meredith,' or --\" I threw Jerry a glance over my shoulder. \"-- Mister Tate's been saying, 'Merry.'\"\n\nBright red. I might as well have said, 'Really? Meredith? Didn't you have me call you 'Merry' all those times I plugged your ass with my dick?' Ever-so-subtly, I rubbed the back of her thumb with my own and tried to use my eyes to promise her I wouldn't tell anyone.",
        "\"Well ...\" she said, flustered and taking her hand back, \"I suppose, given that Wyn's brought you all this way, it really ought to be 'Merry.'\"\n\nI grinned. \"Great. So ... do we want to all sit down over more drinks?\"\n\n\"Oh, I really don't --\" / \"Yeah, I could really use a --\"\n\nBoth of them stopped, mother and daughter looking at each other.\n\n\"Tell you what,\" Liz said, turning her gaze to me and then to Wyn. \"I'm betting Dad for damn sure didn't show you guys to your bungalow, right? How about I walk you over there and give these two a chance to get in sync on their host-and-hostess mode?\"\n\nMerry just about collapsed from gratitude -- I could see it. Jerry made a casual gesture with one hand and swirled his glass of whiskey in the other, but his forehead uncrimped a bit in relief.\n\nBeside me, Wyn scratched his head and shrugged. \"Sure.\"\n\n\"Tompkins get your luggage already?\" Liz asked, on her way to the sliding glass door that separated the great room from a wide, brick deck beyond.\n\n\"I think he said someone would deliver it for us.\"\n\nAs we headed outdoors, Merry called after us belatedly. \"We'll see you at five for dinner, of course!\"\n\nI smiled and waved back at her. In fact, everyone smiled and waved ...\n\nAlthough some of the smiles looked more comfortable than others.\n\n* * *\n\n\"Wow,\" said Liz, once we'd left the patio and started our way along a path made of broad, elegant paving stones, irregular enough to look natural yet also comfortably flat and level. \"Did you guys drop some kind of bombshell on Mom and Dad that I don't know about? I haven't seen them that freaked out about meeting someone since I brought home the head of the campus Young Democrats in college.\"\n\nSomething about her confidential but cheery tone stirred itself together with the bright Caribbean sunlight and the tang of the ocean breeze, and I felt a kink go out of my stomach muscles. Liz is all kinds of right, I decided. Wyn promised me I was going to like her, but knowing that she'd been CEO of one of their dad's companies since the age of twenty-four had left me dubious.\n\n\"I dunno,\" Wyn said with a dip of his brown eyebrows. \"Did you really think they seemed that upset?\"\n\nLiz and I both laughed at the same moment. I looped my arm through his and squeezed him close. \"Oh, honey, I'm guessing they're pretty damn tight-wound all the time, but yeah, I think I threw them for a loop.\"\n\n\"You don't think they, um, guessed that ... uh ...\"\n\nAs he picked his way around it, his sister eyed us both. \"What, that you're trans?\"\n\nI got a warm grin at that and bumped Wyn with my shoulder. \"Hey, I thought you said you hadn't worked up the courage to tell her yet!\"\n\n\"I didn't,\" he said, throwing a dash of cold water on my moment of pride in him.\n\n\"I know my way around the gender playbook,\" Liz told me. Our path wandered through a couple of pretty sitting areas, then around a full-size tennis court. \"If you were a little shorter with a little smaller hands, I'd have been on the fence. But I pretty much knew the second I saw you, especially since Brother Bean-counter told me there might be some shoes dropping this Christmas.\"\n\n\"Look, Liz, I'm sorry,\" Wyn said. \"I knew you'd be cool about it, I just --\"\n\n\"Oh, shut up, you,\" she laughed. \"If you'd told me, I'd have been dying to spring it on Dad in the middle of a board meeting just to watch him react. Trust me, I'm impressed that you're even dating a transwoman, much less that you've brought her to Christmas Week. You've really grown a pair this year -- I'm not going to bust your balls over it if wimpy old last-year Wyn nagged at you and made you too worried to tell me.\"\n\n\"Thanks,\" he said. \"So, anyway, do you think they guessed too?\"\n\nFingers in ears. La-la-la. Not hearing any of this ... fuckshit, can I tell them? 'By the way, Liz, I'm also a hooker and it might interest the both of you to know that I ...' Oh, even-bigger-fuckshit, how can I not tell Wyn?\n\nI damn sure didn't want either of his parents to be the one to break the news to him, and who knows what they might do to keep their son from getting any deeper in with a black t-girl sex-worker?\n\n\"Ehhh,\" Liz said, teeter-tottering one hand. \"Dad, maybe. Except I doubt his macho pride could process the fruit of his loins riding an LGBT train to Hookup Town. And Mom? No way. Would never even enter her brain.\"\n\nLiz, you'd be surprised what all might enter your mom's brain ... and what she might let enter other parts of her too ... Christ, Trini, can you maybe shut this shit off?\n\n\"That's the path to mine, by the way,\" she said with a gesture up another paved trail. \"It's called 'Stingray Place.' Just one bedroom, but goddamn, it's nice.\"\n\n\"We all get our own houses?\" I asked. \"Yikes!\"\n\nShe laughed. \"Did Dad already tell you the story about winning the rental in a bet?\"\n\n\"Yeah,\" Wyn said. \"I still can't figure why our folks would be acting weird, though. I mean, I did warn them ahead of time that you're black, so that's not it.\"\n\nNope. They are definitely not put off by me being black.\n\n\"Oh, just let them wig,\" Liz told him. \"Maybe it's something else entirely. Maybe they've finally worked up the cojones to split, and seeing a happy couple makes them feel even shittier about spoiling Christmas with a divorce announcement.\"\n\n\"Man,\" he said. \"That would suck.\"\n\nThis time, her laugh came out as a bark. \"Are you kidding me? I would raise a fucking toast. I don't know why the hell they're still with each other except for the joy of stewing in their own misery. Did you know, Mom says they haven't even done it in over a year? Look, the dock and the boats are down there.\"\n\n\"Jesus, Liz. TMI.\"\n\n\"What, you don't want to know where the boats are?\" She grinned and winked at me as we walked on, but I didn't manage much of a grin back.\n\nIf Wyn thinks his parents not doing it is TMI ... I am so fucked.\n\n\"Anyway, this is you guys up ahead. 'Dolphin Cay.'\" In the direction she nodded, I saw a cozy, perfectly maintained tropical bungalow through some gaps in the trees. \"Want me to come in, hang out, catch up on things? Or should I just let you get settled in and see you at dinner?\"\n\nWyn looked at his watch. \"I dunno. What is it, an hour till five? I guess we should get unpacked. And Trini probably wants to change for dinner.\"\n\nIf I hadn't known Liz worked out of the same office as Wyn once a month, I'd have insisted she come in so they could visit. Hell, it's not like I'm shy -- if she didn't mind, she could even hang out with both of us while I switched clothes. But since they'd seen each other just a couple weeks ago, and since I really needed to figure out something to say about me and Wyn's parents ... I just poked myself into smiling and said, \"I am an outfit-for-every-occasion kind of girl.\"\n\n\"Cool.\" She leaned over and kissed her brother on the cheek. Then, surprisingly, she did the same thing to me. \"I'm glad you're here, Trini. Wyn had it straight when he said you were a blast, I can tell. Ha! If 'straight' is the right word.\"\n\nWyn opened his mouth, but Liz stopped him with a pat on the head.\n\n\"Kidding,\" she said. Then she waved and turned back along the path. \"See you guys in a little bit!\"\n\n'Dolphin Cay' had some fabulous billionaire beach-house architecture going on. Huge, airy, arch-topped windows. An open floor-plan that let you see straight through the house -- in our case, from the approach to the rear deck and hot tub into the kitchenette and dining area, past that into a small but stunningly furnished living space, and past that through the front window to the forward veranda and its view of the beach and sea out beyond. Over to the other side of the kitchen, a bedroom/bathroom combo that ran the full length of the house.\n\n\"Yipes,\" I said. \"Gorgeous, but kind of exposed, don't you think?\"\n\nWyn shrugged. \"Oh, there's probably a bunch of pushbutton blinds that roll down. Or the windows self-tint with a dimmer switch.\"\n\nI glanced over to see if he was joking, then realized, even if he was joking, he was probably right.\n\nInside, we explored the house and its minimalist elegance, then found our bags waiting in the bedroom and started unpacking.\n\nAnd I tried to strategize.\n\nSo, honey ... you know how you're more or less cool with my job?\n\nHey, I have this pretty good idea about why your parents were acting weird.\n\nFunny story about your mom and dad! I know you'd never guess this from looking at them, but ...\n\nWow. It sure is a small world sometimes.\n\nOh my god, Wyn, I've fucked both your parents.\n\n\"Do you think they've figured out I'm planning to quit?\" he asked after a couple of minutes of silence. \"I mean, what else could it be? Liz has always been able to read them better than me, so she's probably right that they haven't guessed about you.\"\n\nI stopped unloading my dainties into the bureau. \"Oh, sweetie, I'm sure you've got nothing to worry about.\"\n\nMe, on the other hand ...\n\n\"I just don't know,\" he said. \"It would make sense. Dad's been grooming me to be a CFO since I was twelve. He's going to blow a gasket when I tell him, and if Mom knows it's coming, she's probably squirming in terror at the prospect of a family fight with a guest there to witness.\"\n\nShit. Like he wasn't already nervous enough, and now me freaking them out is making him freak out even more than he already was.\n\nI went over and put a hand on his shoulder, turned him and drew him to me.\n\n\"You're fine, sweetheart. I'm betting ... I mean, I'm a hundred percent sure it's me.\"\n\nHis chin settled over my shoulder and his arms went around me. He felt so good there, so right. How the hell was I supposed to break this to him?\n\n\"Hmmm,\" he sighed, with a deep breath and a loosening of the tension all through his body. \"It can't be you -- you're too amazing.\"\n\nDamnit, Trini! Do NOT get distracted into having sex with him!\n\nBut he had me tight against him now, and I could feel that switch clicking in the way his hands moved along my back. Not to mention what I could feel going on in his downstairs department.\n\nHe breathed into my ear.\n\n\"Think we have time to do it and get cleaned up and changed before dinner?\"\n\nHave I mentioned I have a crazy powerful sex drive? It's not normal. I mean, not normal for anybody, much less a transwoman who's been on HRT for ages. But it's part of who I am and part of why I do what I do, and for some reason Wyn knows how to fire it up more than anybody I've ever met. I think I must have been really, really, really good in a past life -- like, a saint -- and this is how karma has rewarded me.\n\n\"Ohhh,\" I said as he began kissing down the side of my neck, \"it probably depends on how long it takes us to find the button for those blinds ...\"\n\n\"Who cares,\" kiss (neck), \"about,\" kiss (collarbone), \"the blinds?\" kiss and deep tongue-lick (cleavage), \"Mom and Dad are freaking out back at the main house,\" zip (dress), \"Liz has gone to her place,\" unsnap (bra), \"and I'm sure the staff are paid really well to be discreet.\"\n\n\"Then we definitely have time,\" I gasped, kicking loose my sandals, shucking out of my dress, tossing away the bra. He had most of his shirt buttons undone by the time I finished undressing. \"Here, let me help you get naked.\"\n\nFrom my knees, I took care of his belt, pants button, and fly, then pulled down his slacks and undies. My favorite Freudian object stood up from its nest of curls as soon as I had it free, so I caught it with my lips and deep-throated it while I held his loafers and he stepped out of everything but his socks.\n\n\"Jesus, Trini, that's so good. Can you get on your back and I'll do the same for you?\"\n\n\"Mm-hmmm,\" I said around a mouthful of cock. But I bobbed a couple of times before slipping off, just to hear him moan.\n\nI'll figure out what to tell him about his parents later, I thought, popping loose and settling back to the carpet. Right now he needs me to make him feel good.\n\nWyn got into position on top, a thigh to either side of my face, dick and balls hanging low above my nose, filling my head with a savory masculine aroma. I licked the underside of his shaft, all the way from tip to base, then kissed and lip-nipped his swinging nut-sack. One of his hands surrounded my swollen erection, stroking gently, milking. His breath landed hot in my crotch, followed by the tip of his tongue.\n\nWith a loud, \"Gluhmmm!\" I swallowed him deep. My hips bucked and rocked to meet the tug of his hand as his tongue ran wet laps around the circumference of my cockroot.\n\n\"Oh, babe, yes,\" he whispered at the bob and twist of my head. \"Uhhh, yesss ...\"\n\nI felt his lips part around the tip of my dick, sweeping down flush with the top of the fist he had gripping me. Every gland I had in the area responded with fluid enthusiasm.\n\n\"Rrrhhmmm ...\"\n\n\"Uh-huh,\" he said, momentarily leaving my tip wet and bare. \"Uh-huh!\"\n\nOne of my hands had him by the tail-bone, helping me pull myself upward to engulf him. I let the other one move to the back of his head, combing the nails through his short, brown hair. He took the hint and rode his mouth all the way down on me, replacing the pumping fist with soft, damp suckling.\n\nEven though we'd just started dating fifty-some-odd days earlier, Wyn could suck like a pro. (Which, unlike most people, I am able to say literally.) Night-by-night and week-by-week, he'd gone from talented beginner to master of fellatio. Of course, it helped that I knew what I liked and didn't shy from discussing technique (and demonstrating it). But the man had a natural talent, and the way he could flutter his inner cheeks along my rod and hit all the right spots with his tongue at the same time -- it was just magic.\n\nAnd maybe the best part was how much he liked doing it.\n\nSomehow, I could tell that the eager jab of his hips as he fucked my mouth didn't just say he enjoyed getting his dick way down my throat. Instead, I could feel and hear that he loved the way I tasted ... the way I moved and squirmed and moaned in response to his oral gymnastics.\n\nThe way -- surprisingly quickly -- he could get my hard-on to expand and tremble at the edge of orgasm.\n\nThen the way he could dial me back, hold me where he wanted me, slowly gliding his own thing in and out of my quivering mouth.\n\nThe boy had gotten good at this, and he knew it -- and he owned it.\n\nI came quicker than normal ... maybe I snuck up on him with a stealth squirt, or maybe he figured we should keep it short to be sure we made dinner on time. Either way, I groaned around his cock and arched my back and blew a giant squeezy-spurty load of liquid white thunderbolts. Wyn dove to the bare base of my exploding firecracker, his mouth and throat all gulping suction as I came and came and he swallowed and swallowed.\n\nWhen he'd vacuumed up the last drop, I rolled him over and rotated around between his legs, keeping up my blowjob all the way. He looked really pleased with himself once he'd lifted up on his elbows to watch me work.\n\n\"I'm getting the hang of that, huh?\" he asked with a grin.\n\n\"Mmm-hmmm!\"\n\n\"Ooh. Wow. Mm, that's nice.\"\n\nEye-contact was my secret weapon. Different things do the trick for different guys, but with Wyn, it seemed like me staring up at him while happily hoovering his shlong turned on his motor as much as all the tonguing and slippery lips and deep-throating put together.\n\n\"Oh, God,\" he said. \"Mmh! Mmh! Nngh ...\"\n\n\"Mm-hmm.\"\n\n\"Yes -- ah --\"\n\n\"Mm-hmmm.\"\n\n\"Ooh ... ooh ... eeeee ...\"\n\n\"Mmmmmmmmmm --\"\n\n\"FUCK!\"\n\nJackpot. His head went back and his tool throbbed in my busy mouth and suddenly I had as much cum as I could swallow, surging out from my man's sperm-cannon and down the shooting gallery of my throat.\n\nOne bellyful of semen later, I let him slip out and crawled up along his body to kiss and hold and be happy with him.\n\n* * *\n\nWyn convinced me to go casual for dinner, which started things off uncomfortably because he wore shorts and a polo shirt, I wore a skirt and halter-top, and his parents both came dressed to the nines. Mister Tate had changed into an even nicer dress shirt and slacks and added a tie. Mrs. Tate picked a regal burgundy number for her dress and had fancied up her hair and makeup as well.\n\nThankfully, as Wyn held my chair for me to sit down, his sister came in wearing shorts and a t-shirt, golden hair pulled back in a long ponytail.\n\n\"Oh good,\" she said, grinning at us. \"I'm not the only fashion slacker.\"\n\nMerry crimped her mouth in disapproval, but said nothing.\n\nThe early part of dinner went by smoothly, with food bought in restaurant style by a server while the cook could be heard toiling in the kitchen. We had our choice of wines; I just asked for something sweet.\n\nConversation over the appetizers (an oyster thing that wasn't oysters Rockefeller but looked sort of like it) stuck mostly to, \"So how do you like your bungalow?\" and \"It's great! Very nice,\" kind of stuff, along with discussion of some of the island's other facilities. Pools. Hot tubs. Beachside walking path that ran most of the way around the place. Mini-marina. Jet skis. Discussing the amenities took us halfway through soup, a breezy little fish stew with hints of curry and coconut. Then Liz told an extended joke that got interrupted in the middle by delivery of our entrees, steaming filets Oscar whose smell alone just about made me drool.\n\nThen, midway through the steaks, a pause dragged on long enough that Wyn took it for his chance.\n\n\"Yeah, um ... maybe we should just get this out of the way in case it blows up.\"\n\nEveryone gave him a different sort of attention. Jerry's was the fingers-laced-together skepticism of a schoolmaster waiting to listen to a B-student's oral dissertation. Merry's held a dubious resignation, as though all too many family dinners had previously \"blown up.\" Liz's just said, 'Ooh, I bet this is going to be good.'\n\n\"I've decided that I'm going to look for a different job next year.\"\n\nJerry delivered a withering sigh of, 'No, you only think you're going to do that.' But aloud, he just said, \"Go on.\"\n\n\"You know those charity finance courses you said were a waste of my time? Well, they weren't just a couple of classes. I finished a whole minor in it, and --\"\n\n\"Oh, God help me,\" his father said. \"Do not tell us you're thinking of leaving a sure track for CFO to go and ride herd on compliance accounting for some bozo nonprofit.\"\n\nBristling, Wyn replied, \"Yes, actually, that is what I'm --\"\n\n\"I think it's great,\" Liz cut in. \"Do you have someplace in mind?\"\n\nBefore he could answer, Mister Tate said, \"Great? You think it's great that he's going to throw a real career away for the sake of --\"\n\n\"I'm not throwing anything away.\"\n\n\"-- some idiotic, bleeding-heart, probably socialist --\"\n\nAll right, time to ring the bell on this one.\n\n\"Excuse me, but can I say something?\" The squabble died down. For a second, I thought Wyn's dad would snap at me for interrupting, but then I saw the, 'Oh, wait, this girl has some embarrassing goods on me' lightbulb click on over his head and he composed himself.\n\n\"Look, I hate to stick my nose into the family business, but --\" I gave Jerry just the tiniest tweak of my eyebrow. \"I'm sure you know what it's like to want something and decide to make it happen, don't you, Mister Tate? Isn't that what entrepreneurialism is all about? You know, when you get to the bottom of it?\"\n\nI didn't even put any stress on the word 'bottom.' But the man still knew I had him by the balls when I said it.",
        "In the silence while everyone awaited Jerry's response, I heard the cook stirring or scraping something on the other side of the kitchen door. He's really stirring up a storm in there. Is our storm winding down in here?\n\n\"We'll talk about this later,\" Jerry mumbled at last, looking down at his plate in a very subdued, non-gazillionaire manner.\n\nHah! I thought, doing a victory lap in my head.\n\n\"I ... guess so,\" Wyn said. He glanced curiously at me, then back to his father. \"Not that it's going to change anything for us to wait --\"\n\nWith a pained expression, Mrs. Tate cleared her throat. \"He said we would talk about it later. Now can we please move on to a less contentious subject.\"\n\nThank you, Merry! I knew there had to be an upside to your persnickety Miss Manners-ism.\n\nJerry picked up his knife and power-sawed his steak. Wyn held his fork like it might help him think of something to say. Liz decided to come to the table's salvation.\n\n\"So,\" she asked me brightly, \"I haven't heard yet -- what is it that you do, Trini?\"\n\nIn the last ten yards of my victory lap, I tripped and fell flat on my face.\n\nOh, for God's sake. Now? It couldn't be, I don't know, any other question???\n\nWyn held his fork even tighter. His parents both stared at their food like they were trying to move it with their minds.\n\n\"Well, truth be told, I'm ...\"\n\nAn event coordinator.\n\nEvent coordinator.\n\nEvent coordinator. Come on, Trini, say it with me, 'An event coordinator.'\n\nBut looking Liz in the face, with her expression saying she actually, genuinely wanted to know, I just couldn't fake it.\n\n\"I'm a professional escort.\"\n\nShe blinked for a second or two after I got the words out.\n\n\"Escort.\" Her eyes kept shuttering and unshuttering, moving between me and Wyn. \"You mean you ...\"\n\n\"I have sex with people for money.\"\n\nShe snort-laughed and then laugh-laughed. \"Ha! That's either the balls-iest dinnertable joke I've ever heard, or ...\"\n\nI didn't have to look at Jerry and Merry to know from the silence they'd gone dead-dinosaur petrified. And after a second of that silence, Liz's eyes went as big around as the china.\n\n\"Oh my God.\" Back-and-forth almost faster than she had blinked, her gaze flipped from one of her parents to another. \"It's true. And the two of you have both slept with her!\"\n\n\"What?\" The way the word burst out, Wyn must've had his breath held, waiting to see what would happen. \"Liz, don't be --\"\n\nClearly expecting a denial, he turned to me. All I could do was bite my lip. I saw his jaw drop. His eyes moved on to Jerry, but only for a second. Yeah, he can kind of buy that news. On the other hand ...\n\n\"Mom?\"\n\nThat word, aimed right at her, de-fossilized Mrs. Tate. With a squawk, she popped up from her chair and started shouting.\n\nTo the room: \"This is outrageous!\" To Liz: \"How could you say such a thing?\" To Wyn, with her voice cracking: \"How could you think such a thing?\"\n\nThen she disappeared upstairs in a whirlwind of tears and sobs.\n\nJerry stood up, folded his napkin, and left the house.\n\nWyn stared after him for a minute. \"What the fuck?\"\n\n\"I'm sorry, Wyn, I didn't know until I got here and --\"\n\n\"No, no, no,\" he said, instantly covering my hand with one of his. \"Not you.\" His face turned to his sister and turned livid at the same moment. \"Liz. What -- the -- FUCK.\"\n\nShe leaned back in her chair and crossed her legs, wineglass swirling in one hand. \"I'd like to say I just blurted it out without thinking,\" she said, pausing afterward to take a sip. \"But to be honest, it was a total executive decision.\"\n\nI felt the anger in Wyn's grip where it squeezed my hand. \"An execu-fucking what?\"\n\n\"Come on, Wyn,\" she said. \"Let's add the facts up. Your girlfriend announces she's an escort. Then, instead of yelling at you for bringing a whore to Christmas, they both just completely freeze? Pardon me, Trini, I'm not calling you a whore, I'm just saying that's what the Mom and Dad we grew up with would call you. Only they didn't. They sat there like statues -- only not quite like statues, because if you were paying close attention, Mom just looked mortified, and Dad looked mortified and startled. Which means Mom already knew about Dad and Trini, but Dad had no idea about Mom.\"\n\n\"Damn, Wyn,\" I said. \"You told me Liz was smart, but I didn't know you meant she was Sherlock-Holmes kind of smart.\"\n\n\"Yeah, she's a fucking genius.\" He had cooled down as she talked, now just holding my hand instead of locking it in a vice. \"I still haven't heard why you'd call them on it at the dinner table, Liz.\"\n\n\"It was then or never. As soon as they realized Trini wasn't going to tell on them, we were all done for. You know that, don't you? They couldn't stay the people we grew up with and also allow a sex-worker in their house. There's no universe in which the people who raised us would allow Trini to stay. If I'd let them leave the room with their secret safe, Mom would have gone up and Xanaxed herself comatose for the rest of the trip, and Dad would have told the two of you to get off the island tomorrow morning. You gave him the perfect excuse -- leaving the company and bringing home a prostitute. So first thing in the morning, the two of you are gone. Mom's in Xanax la-la land. When she comes to, she doesn't just think she's a failure as a wife -- she thinks she's a failure as a mother too, because now there's a major split between you and Dad, and a big icebox between me and Dad because I'm pissed at him kicking you out. Plus, she knows he kicked you out for having sex with the very same prostitute he had sex with. What a fucking hypocrite. After something like that, there's no repairing their relationship, but she's still going to stay with him, because we've left her the illusion of propriety, and getting divorced would break that illusion. Total shitsville. Have I missed anything? Any holes in that scenario?\"\n\nWyn frowned, shaking his head slowly. \"No, that's pretty much how it would go. Only ... what exactly is better this way?\"\n\nLiz drained her wineglass. \"Damn, are you going to make me do all the hard work in this conversation? I'm parched already. Hey! On the other side of the door! Can I get some more of the Chardonnay in here? Okay, while I'm waiting on the eavesdroppers to bring me my wine, does someone else want to take a turn at bat?\"\n\n\"Uh ... my brain is boggled,\" said Wyn, picking up his own glass for a slug.\n\n\"Eat some more of your steak, then,\" his sister told him. \"It's a crime to let this shit go to waste. How about you, Trini? Anything you want to throw out there that wouldn't violate professional confidentiality?\"\n\nI thought about it, then looked at Wyn. \"Well ... it should be pretty obvious at this point that both of your parents are waayyy repressed, right? I'm not giving up any secrets with that. I bet you understood it back in high school, if not earlier. Only you didn't know they're both major pervs, and they sure didn't think you'd ever find out. They've been hiding this big chunk of who they are all your life, and now they can't hide it anymore. Kind of wipes the slate clean on your whole family dynamic, right?\"\n\n\"Score one for Trini!\" Liz said as the server came in with a newly filled wineglass and the bottle on a tray. Liz snagged them both. \"Thank you.\" The server gave a little curtsey, picked up the empty glass, and left again. \"You picked a smart one here, Wyn. Later in the week, you've got to tell me the story of how you found her.\"\n\nI grinned. \"It's a good story.\"\n\n\"Yeah,\" Wyn agreed. \"It's a pretty damn good story.\"\n\n\"Well shit, then,\" she said, taking another drink. \"Maybe you should just tell me now and we can all get drunk and leave our plotting against Mom and Dad till tomorrow.\"\n\nAt the same time, Wyn and I both said,\n\n\"I'll drink to that.\"\n\n* * *\n\nWe didn't end up all that drunk, and we did end up doing some plotting, though not enough to settle anything. But lying in bed that night, after some quiet, reassuring sex with the most beautiful man I think I ever met, I had an idea. A couple of ideas, in fact.\n\nThe next morning, we got the lay of the land. Merry was still shut up in her room. Tompkins said that Mister Tate had taken one of the boats right after dinner and headed to an island across the way -- the one where Liz and Merry had been shopping the day before. Presumably, he'd gotten plastered and stayed the night there.\n\nSo we split up: Liz to talk their mother out of her room, Wyn to try to find his dad and wrangle him home, and me to the airstrip where I had the pilot fly me back to Nassau for something I didn't expect they'd have on the smaller island. I got back early afternoon to find that everyone had done their jobs, and ten minutes later we all gathered in the big room where that towering, naked Christmas tree stood waiting in its corner.\n\nWoosh. I have never had to dog-paddle my way through a shame-swamp of loathing and resentment like the one stinking up that room. Luckily, it almost all came off the Tate parents -- if I'd been hit with it from all four sides, I think I'd have run.\n\n\"Okay,\" I said, walking over in front of the tree and putting both hands on my hips. Liz and Wyn watched me attentively from the couch. Meanwhile, Jerry and Merry -- seated in the most widely spaced chairs in the room -- couldn't let their eyes settle in any one place, jabbing a variety of glares and sneers around the room at each other and at their children, then wimping out and looking away after a second or two. \"So here's the deal. All eyes on me.\"\n\nSurprisingly, Mister and Mrs. Tate obeyed. Or maybe not so surprisingly -- under Jerry's hung-over stare of hatred I could see that forbidden, repressed lust clawing to get to the surface. And under Merry's please-let-me-die embarrassment, her puffy red eyes had just a tiny hint of wistful longing.\n\nI got going.\n\n\"The first thing to do is admit the biggest fact. Nobody here gets to blame this cockup on anybody but themselves.\"\n\nWith his fiercest scowl, Jerry said, \"Why exactly are you the one lecturing us, then?\"\n\nOh, Jerry. Do you think I'd be standing up here if I wasn't ready for that one?\n\n\"Easy,\" I said, smiling just as fiercely as he'd scowled. \"One way or the other, we've all fucked each other getting to this point. But I'm the only one in the room who's a professional in fucking, and that makes me the expert.\"\n\nMerry blushed. Wyn treated me to one of his sweet, worshipful looks. Liz gave me a thumbs-up. And Jerry let the point drop.\n\n\"Now,\" I went on, pacing with my hands clasped behind me (and don't think it escaped me that this pushed my tits up and out against the front of my tube-top), \"two of you called me for sex. Wyn called me for a date. Liz let all of our cats out of the bag. And I --\" Here, I gave a glance down my front, holding out a long, bare leg to take it all in. \"-- I took a bunch of hormones, had plastic surgery, set up an illegal sex business, and then blabbed my job to Liz instead of lying when she asked.\"\n\nI took my hands from behind my back and shrugged.\n\n\"Some of those things turned out better than others.\"\n\nThat got a laugh from Wyn and his sister.\n\n\"I know, right?\" I grinned at the Tate siblings, but I was more interested in making their parents react. \"Now, you two --\" I pointed my eyes and a finger at Jerry, then Merry, shifting back and forth until they both looked ready to squirm. \"-- maybe you both regret making those calls now. But there was a time when you didn't. When you really, really didn't.\"\n\nMrs. Tate looked away, even redder. Jerry swallowed, but set his jaw to try to hide it.\n\n\"So our job at this point,\" I said, pacing again and looking from one of them to the next to the next, \"is to look around this room and remember that everybody here either loves each other, or has worked their butts off trying to live up to the other people's expectations. And our job is also to remember how good it felt when that work paid off. How proud you were when your kids both graduated with honors, high school and college. How it felt getting patted on the back for terrific grades or for pulling the company's stock price up. And yeah, not to dodge a really important one, but how fantastic the sex was. Especially the two of you.\"\n\nJerry and Merry both bristled when I pointed, but I kept going before they could open their mouths. \"I don't mean with me. Or, I do, just a little -- but I'm mostly talking about way back, probably before the kids, when you had the time of your lives boning each other.\"\n\n\"That is so uncalled-for!\"\n\n\"Oh, shut up, Mom,\" said Liz. \"It's way too late for you to go back to pretending you don't like boffing with the best of them.\"\n\nMerry's mouth hung open, but either she couldn't say anything or she held herself back from it.\n\nLiz turned back to me. \"Trini?\"\n\n\"Thanks. Sorry you've been getting left out of this sex part of the speech.\"\n\n\"Haha. Trust me, I've had more than my share.\"\n\nI went back to working the room. \"So the point is, there's not one of us who's incapable of having an awesome time with the others if we just put our minds to it. And for the next three days, we're going to put our minds to it. Who plays tennis?\"\n\nMerry and Jerry both furrowed their brows, but I saw their eyes flick toward one another.\n\n\"Not in a long time, right? But you used to. And I was pretty good in college.\"\n\n\"Me too,\" said Liz.\n\n\"I hate tennis,\" Wyn said. \"I completely suck at it.\"\n\n\"You can be the line judge. Next -- who plays poker?\"\n\n\"Ugh,\" said Merry, maybe with more disgust than when the subject had been sex.\n\n\"Everybody else though, right? And there are enough jet-skis down at the cove for us to take turns, and I saw last night that we all drink. So the deal is, Merry's going to make us up a schedule of activities. That's your skill set, right, Merry?\"\n\nShe nodded, grudgingly.\n\n\"A tennis tournament, poker, jet-skis, maybe some swimming, more of those gourmet meals, drinks in the hot tub, some doubles tennis matches --\"\n\n\"Bridge,\" Jerry growled.\n\nWith my hands up, I said, \"I've never gotten bridge, but I'll watch. We're going to fill up the rest of our stay here with things we enjoy, and we're going to do our damnedest to enjoy them and enjoy each other.\"\n\nI looked around. Nobody tried to fight me.\n\n\"And tonight,\" I said, \"we're going to pull out the box of ornaments for the Tate family Christmas tradition Wyn told me about, and we're going to dress this tree up like a motherfucker. Now, Merry, go get your day-planner.\"\n\n* * *\n\nThe rest of the day went pretty well.\n\nLiz and I let her parents win most of the doubles sets. (I'm saying we let them win, anyway. To be honest, they were pretty damn good, and the more matches we went through, the better they fell into a team groove and the harder they made it on us two younger girls.) Wyn didn't play, but he joined me in the shower afterwards, which, honestly, I appreciated way more.\n\nDinner rocked my world. Crazy good shrimp scampi appetizers, clam chowder, unbelievable swordfish, and a hurt-yourself-getting-the-last-of-it-down chocolate/espresso cake. Conversation hovered on the low end of the boredom/excitement scale -- which of course means it went much better than the evening before.\n\nAnd then came Christmas-tree time.\n\nThe Tates went someplace new every Christmas, and wherever they went, each person picked out an ornament or a knick-knack that could be made into an ornament. Then, at the end of the trip, they packed it all in a box and mailed it home to bring with them the next holiday season. So the tree didn't get any lights or garlands, but filling the branches up with ornaments took everyone back to different years and different places, dozens of funny incidents or noteworthy disasters that had piled up over the course of a couple decades jaunting around the world each December.\n\nBy the end of it, that does something to you, I think, if you let it into your heart even a little. The vibe between Wyn and his family hadn't turned all sugarplums and gingerbread cookies, but it was better. Maybe better than it had been in a long time, I guessed -- or at least, I hoped.\n\nWhen the last ornament went up and the last of those stories had been told, Merry fished a big star from the bottom of the box. But I stopped her before she could get far with it.\n\n\"Nope,\" I said, bringing out the bag from my Nassau shopping trip earlier in the day. I climbed up the stepladder with it, fished out the contents, and crowned the plastic evergreen in true Trini fashion.\n\n\"What ... in God's name ... is that?\" Jerry asked.\n\nI hopped down from the stepladder and raised one hand toward the strap-on I'd arranged atop the tree.\n\n\"It's a new angel for the Christmas tree,\" I said. \"And at 12:01 tomorrow night, it's going to be Christmas, and the angel turns into somebody's Christmas present. I don't want to see it up there Christmas morning.\"\n\nMerry stared up at the skyward-pointing dong and its leather straps. One hand rose up to cover her mouth. Jerry, after a moment of compressing his face ambiguously, went to the bar to get himself a drink.\n\nLiz shook her head and gave me an admiring smile. \"I like you, Trini. I'm not a hundred percent sure how well you're going to fit in with this family, but I like the hell out of you.\"\n\n\"I'm not a hundred percent sure either,\" I told her. \"If I stick around, though, I bet you dollars to dildos this family will end up fitting in with me.\"\n\nThat said, I stepped over to Wyn and took him by the arm. \"Think we could go find some mistletoe now?\"\n\n\"Oh, yeah,\" he said, squeezing me to him. \"Definitely.\"\n\nAnd we walked out under tropical Christmas stars to do some celebrating. "
    ],
    "authorname": "IanSaulWhitcomb",
    "tags": [
        "escort",
        "prostitute",
        "mtf",
        "bahamas",
        "parents",
        "anal sex",
        "strap-on",
        "christmas tree",
        "doggie style"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/trini-trims-the-tree"
}
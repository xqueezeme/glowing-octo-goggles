{
    "title": "Rock and Water Ch. 06",
    "pages": [
        "I love new relationships and all of the \"firsts\" that come with them. This chapter has a few firsts, and even a space landing... Thank you FA_JF for your ongoing editing skills and advice (and your patience when I don't always listen)!! \n\n*\n\nPatrick stays over the next evening too. It feels like we're falling into an easy rhythm. So far we've always stayed at my house, but he asks that I come to his place for the first time this Friday. We're both pretty wiped out when he arrives after work, so we just eat a simple dinner and watch a movie curled up on the couch together. Both too groggy to do much more than stumble to the bedroom when the movie is over, he puts me to bed promising wicked pleasures in the morning.\n\nFor once, I wake up first and as quietly as I can, sneak into the bathroom to relieve my aching bladder. I close my eyes and let out a groan as relief floods me. Slowly I open them and see that Patrick has slipped into the bathroom and is watching me intently with a slight smile across his face.\n\n\"Hey! A little privacy please!\" I plead, as I quickly cross my hands over my lap. Patrick's smile only broadens as he shakes his head and walks over; leaning down to give me a quick peck.\n\n\"Good morning sweetheart...,\" he drawls. \"Need some help there?\"\n\n\"No!\" I blush and laugh at the same time. \"I can wipe myself just fine, thank you.\"\n\n\"I'm curious why you're feeling so shy. There isn't a place on or more appropriately, in your body that my hands or lips haven't explored.\"\n\n\"I... I'm just....\" I realize he's right. He's seen me at my most vulnerable, and having him in the bathroom as I pee is certainly pretty low on the list of embarrassments.\n\n\"You're right. It just felt a bit soon to be peeing in front of each other... that's all.\" As I'm wiping myself, I give him a big smile. \"The only thing I ask is privacy next week when I get my period.\"\n\n\"If you think that's going to detract me from fucking you you're quite mistaken; but...if you want privacy in the bathroom for those days, I think I can live with that.\"\n\nAs soon as I stand he slips by me and before I can get out of earshot he lets his own bladder go and I could swear there was a racehorse in the room, causing me to laugh myself to tears.\n\n\"Shower?\" I ask.\n\n\"Absolutely.... Also, I believe I made a promise to you last night.\"\n\nTrue to his word, morning breath be damned, as soon as hot water is blasting down on us his mouth assaults mine with a deep and searching kiss. Our slick bodies caress each other as I'm drawn into his tight embrace; I feel his cock grow rigid against my belly. Pulling my body far enough back to grip the base in my hands, I begin to stroke it with an unerring and single minded goal. Pre-come forms pearly droplets at the crown; the sight of his milky seed has me mesmerized.\n\nPatrick gasps and braces himself against the shower wall, but before ceding control to my intent, he lets out a growl and is upright once again. Looking down at me with a wicked grin, he forces me to release his cock; stepping back and seizing it in his own grip. I watch him stroke himself and my breath becomes irregular as I'm transfixed by the sight of his hand gliding over the rigid length. I study his movements; the way his hand twists at the top before pulling back, over and over again. His eyes remain locked on mine; monitoring the effect this has on me. My hands are fisted at my sides while my legs squeeze together in an answer to the rhythmic clenching of my pussy. My nipples stand out impossibly hard, while my breasts feel flushed and heavy.\n\nHe turns me around, placing my hands against the shower wall and spreading my legs shoulder-width apart. \"Stay\" is all he says and I obey. I feel him reach for the bar of soap, lathering it in his hands before cleaning me from head to toe with firm, massaging strokes. He adds a little more soap before washing my pussy and asshole thoroughly, fingers delving deep inside. Pulling the handheld showerhead down, he sprays my body clean, paying extra attention once again to my pussy and ass. The hard spray teases every nerve ending and I spread my legs even wider. Without a word he replaces it in its base and chuckles as I groan in protest.\n\n\"No matter what I do, keep your hands where they are.\"\n\nI nod, words escaping me as I feel him pull my hips back; kicking my legs apart until my pussy and ass are exposed and on display for him. He drops to his knees behind me. With a firm grip on my hips, he leans in and begins what could only be described as a feast of my pussy. His lips and teeth alternately suck and bite, driving me to the edge hard and fast. His tongue glides in rhythmic circles around my clit, before he captures it between his lips and sucks hard. My elbows give out and I fall forward towards the wall, cradling my head on my forearms. Without releasing my clit, he smacks my ass HARD, signaling me to get back into position.\n\nWith one hand, he pinches my clit between his thumb and forefinger, drawing back the hood. I briefly grimace in pain before a jolt of pleasure overcomes me. The tip of his tongue begins to firmly lick my exposed clit causing me to ride up on tiptoes in an attempt to decrease the intensity of sensation. Once again his free hand slaps the same ass cheek, on the same spot, and I force myself to brace my feet firmly on the shower floor once again. His mouth pulls away from my clit, but his tongue continues its exploration of my pussy, lapping up my juices from deep inside the swollen hole.\n\nStrong hands grasp each ass cheek spreading them wide; the flat of his tongue travels over my perineum and up to my clenching asshole. I let out a cry of pleasure as I feel the tip make contact, then without hesitation penetrate the tight ring. Every nerve ending off the sensitive tissue sings with pleasure, and an act that at one time would have brought me great shame now has me begging in broken words to let me come.\n\nTears form in my eyes as I beg. \"Please Patrick...please, please, please... May I come Sir? Please make me come Sir?\" The last plea comes out as a question, and it's answered by another hard slap to my ass.\n\n\"Shush,\" is all he says.\n\nI feel a whisper of hot breath against my ass before his tongue resumes fucking my tight hole. The sensation creates warm waves of lust to course through my body, until it's all I can do to remember to breathe. \n\nFinally, I feel him rise behind me and the head of his cock slowly penetrate my dripping pussy. It welcomes his cock like a long lost lover, clenching rhythmically with each thrust. Reaching above my head, he lowers the showerhead until I feel it slowly travel down my abdomen towards my pussy. Starting with the pulse setting, hard punches of water assault my clit in a slow, steady rhythm until every cell in my body throbs to the same beat. I can't help myself, I begin to beg again.\n\n\"I can't...I can't. Please... I can't do this. It's too...too much.\"\n\nSwitching to a constant hard stream aimed directly on the exposed head of the swollen mass of nerves, Patrick leans down and whispers in my ear, \"come.\" My orgasm hits me hard and fast. I hear a voice screaming and moaning, barely registering that it is mine. My knees buckle, but Patrick just tightens his hold around my waist as he plows into my pussy, the sound of our bodies smacking against each other echoes through the bathroom. Just before he explodes he pulls out and showers my back and bottom with his come. I close my eyes and catch my breath as he leisurely massages his come into my skin, then uses the water to gently rinse me clean.\n\nReplacing the showerhead, he pulls me tight against him; his front to my back. We stay like this for a few minutes, both trembling despite the warm water. Once recovered, I turn around to cup his face in my hand, gazing at him through half-mast eyes. \"Thank you, Sir.\" The look of joy on his face these three simple words invoke makes my body flush with pleasure.\n\nWe're quiet, yet tender with each other for the rest of the morning. The plans for the kitchen cabinets long settled, we sit in the backyard with our coffee and scones, toying with the idea of a trip the coast.\n\n***\n\nThe rest of the week flies by. As Patrick wraps up his current job, refinishing an antique bar at a local restaurant, I've begun the arduous task of getting the interior of my house ready to paint. I go through, room by room, removing curtains, scraping off stickers from Addie's youth, and taping off moulding. The days are filled with hard, physical labor and I've felt no need to go to the gym as I'm getting all the workout I need at home. Deep inside though, I know the real reason I've been avoiding the gym.\n\nAddie and I email every day and skype every few days. Frank has kept her busy with sightseeing and time with his family. She's already developed a crush on his neighbor's boy who is thirteen, causing Frank no end of worry. Thankfully we're getting on well with each other and I talk him through how to handle her first crush.\n\nHe tells me he's dating an old girlfriend from his last year of Secondary school, but has yet to introduce Addie. I mention I've begun dating someone too, and we discuss how to get Addie used to the idea of her parents dating other people. It's not that she believes we'll ever get back together; just that she's finally become adjusted to her new \"normal\" and we don't want to upset her. I notice as we skype that neither of us flinch or seem bothered by the other's dating; in fact, we're both pleased that the other is happy in their life.\n\nMy cell phone rings as I'm careening through my front door on Friday morning, returning from the paint store with yet more supplies. Seeing Patrick's name on the screen, I laugh at myself because every time he calls my stomach does flip-flops just as it did back in junior high. I realize Addie and I have more in common than I'd care to admit.\n\n\"Hey sweetheart, how's my girl?\" A warm glow radiates through my body at the sound of his gruff voice.\n\n\"Better now... I got a lot done today; almost ready to start painting.\"\n\n\"That's good. Although...how would you feel about taking a break from it for the weekend?\" My heart skips a beat, imagining a whole weekend together. We're both quiet, but I hear his even breath through the phone. \"I'd like you to spend this evening through Monday morning with me, and I'd like you to submit to me for the duration.\"\n\nMy breath catches. I think I know what's he's asking, but I'm not sure how I feel about it. \"Um... What exactly do you mean by 'for the duration'?\" My voice is steady but inside a tremor is building on itself.\n\nHis tone is calm, but I can hear an undercurrent of excitement. \"From the moment you walk in the door this evening, until the time you step out on Monday morning, you will accept your place as my submissive in every way.\" There is a subtle, yet clear emphasis on the word 'every'.\n\n\"Wait.... What?\" Anxiety flares from within me, but something else too. Wetness quickly trickles into my panties as my breath becomes rapid and shallow. I'm on the cusp of protesting when instead I bite my lower lip and listen to his proposition.\n\n\"I've said it before; I'm not looking for a slave.... I'm not looking for 24/7 either. I would though, love the gift of your submission for more than a few hours on isolated days.\" He pauses to find the right words, which also gives me time to process what he's trying to say.\n\n\"You're speaking of more than just sex,\" I whisper.\n\n\"Yes.\"\n\nOnce I realize what he is asking of me, every fiber of my being begins to scream internally that I can't do it... that I'll lose too much of myself. \"What if's\" begin to ping through my brain. What if I begin to resent him, or even worse, what if I give him everything and he discovers it's not enough? Forcing myself to quell the internal chatter I ask myself new questions. What would it hurt to try? He's done so much for me; shouldn't I give him this? Lastly... What if I like it?\n\nI lift my head and brace myself as I give him my answer. \"Ok, Patrick. I'm yours.... I'll submit to you, in every way, for the weekend.\" As soon as the words are out, an odd sense of calm washes over me; almost relief. The tremor that started at the onset of the conversation has transformed into a vibration that pulses through every nerve, gathering strength as it centers on my pussy and clit.\n\nOn the other end of the phone, Patrick let out his breath slowly; his relief is palpable and I know that I've pleased him. \"Thank you, Corrine. Before the weekend starts, I want to assure you that I know how hard this may be for you, which makes it even more special for me. Bending your will to please mine is such an act of trust...of giving. I'm going to push you, but I promise I'm not going to abuse or take advantage of your submission; and as always, your safewords of yellow or red are available should you need them.\"\n\nI hear his words, but it's hard to concentrate because my desire is amping up by the second. Unconsciously I had begun squeezing my thighs together and letting my free hand is caress the underside of my breast, slowly running my thumb over the tightly constricted nipple. Lost in sensation, I barely hear Patrick trying to get my attention.\n\nHe laughs a little. \"You're awfully quiet over there... That usually means you have unspoken concerns, or you're excited. Which is it?\"\n\n\"I'm, um...excited.\" My cheeks flush at my admission.\n\nA barely audible groan escapes him. When he speaks his voice is low and commanding. \"Tell me. What has you excited?\"\n\nI attempt to put my thoughts together before I speak. My voice comes out more steady and clear than I'm feeling inside. \"Well... As you said, everything we've done so far have been isolated experiences sandwiched between more, uh, traditional dates. Those times, when I'm submissive for you, don't feel like games or sessions as they did with Robert.\" I can't quite find the words I really want to say, and I huff in frustration. \"They feel...natural...peaceful.\" I chuckle a little before adding, \"...even when you were spanking me.\" \n\n\"Those are the words of a true submissive, sweetheart. Do you know that?\" He pauses briefly. \"More important though, is that you're MY submissive. You are MINE, Corrine.\" His last words come out with a ferocity I have yet to hear from him, and they envelop me like a tight embrace.\n\n\"Yes, I'm yours.\" \n\nHis voice, level again, adds quietly, \"...and I'm yours.\"\n\nWe're both quiet for a moment. A rush of emotion surges through me and I want to blurt out that I love him, but for as 21st century as I am, I still seem to hold on to old-fashioned decrees about how soon you should confess your feelings, or whom should say them first. What's not holding me back though is concern that he doesn't feel the same. As much as I want to hear the words from him, I feel them with every look and every touch he gives me.\n\n\"Back to tonight... Your instructions are simple. Beginning when we get off of the phone, I want to lubricate and insert your small butt plug. No playing with yourself or other stimulation of any kind. By 3pm, I want you to have switched to your medium plug, then just before you come over insert your large plug and leave it in. If at any time you need to evacuate your bowels, remove the plug, clean up, then reinsert it.\"\n\nI decide that instead of an insurance adjustor, this time he sounds like doctor preparing me for a procedure. Judging by the flood of wetness in my panties at this thought, I consider sharing my long dormant doctor fantasy with him some time....\n\n\"Yes, Sir.\" Neither of us comments on what these instructions are clearly implying. Tonight he plans to fuck me in the ass. I feel my tight hole clench involuntarily, unsure if I'm feeling anxiety, desire, or both. All I know is that there is no other man I would want to take my virgin hole.\n\nWe make a plan to meet at his place at 6pm tonight. He gives me clear instructions on what to pack, including the dress I wore when we stayed out at his cabin, some jeans, t-shirts and hiking boots. I'm curious what he has planned for the weekend but am also excited to let him take charge. The need to plan and control everything begins to ebb as the newly familiar feelings of passivity and acceptance flow in.\n\nAfter we get off the phone, I use the bathroom, clean up, then retrieve my bag of toys. I pull out the three plugs, but look longingly at my large vibrator as I realize that I haven't used it on myself since Patrick and I started dating. Picking it up by the base with one hand, I stroke my other hand up and down the smooth ridges. \n\nClosing my eyes, I imagine that it's Patrick's cock cradled by my fist. Without conscious thought I lean forward, mouth open, and push the head of the vibrator inside my mouth. Using my tongue to lubricate the toy cock with my saliva, I push it deeper and deeper until I feel it straining to enter my throat. My already soaked panties become slick with juices, and the wet fabric begins to bunch between the lips of my pussy, rubbing against my swollen clit. I begin to rock my hips back and forth in a feeble attempt to gain friction as my mouth works over the cock.\n\nSuddenly my eyes fly open as I realize what I'm doing; exactly the opposite of what he'd requested. Part of me would argue that I didn't touch myself per se, but I know it's a weak argument. I stop my hip thrusts and pull the vibrator from my mouth. Thick cords of saliva remain attached to the head of the cock as I pull it out. I collect the viscous fluid in one hand and lubricate the small butt plug. Pulling aside my wet panties, I push the plug in with one swift motion until the base is seated between my cheeks. Adjusting my panties back in place, I lower my skirt and get on with the task of painting; only now I'm miserably turned on.\n\nRemaining in a constant state of unfulfilled arousal, I switch out the plugs through the course of the day until I find myself packing up the car with my bag and Griffin. Gingerly I sit myself in the driver's seat, the large plug stretching and probing my tight asshole. I turn on loud music to distract myself as I drive across town towards my weekend of submission. I laugh out loud as I realize how fitting my choice in band is; Flogging Molly. \n\n***\n\nWhereas I live in the northeast section of the city, Patrick lives in the southeast. Although it only takes around fifteen minutes to get from one house to the other, the vibe of the neighborhoods shifts from being a bit edgier in the northeast, to a little more laid back in the southeast. Whereas the northeast is filled with art galleries and bars, the southeast has more coffee shops, parks, and food co-ops.\n\nI pull on to his street and locate his house. It's a big, old four-square that sits up on a little hill above the street causing it to look even larger. The house is painted a deep pewter color with white shutters and black trim.\n\nAs I'm parking, Patrick walks out of his house with Guinness in tow, a huge smile on his face. Griffin and I get out of the car and before I know it he grabs me off the sidewalk in a huge bear hug; lifting me high off of the ground. A quick cop of my ass assures him that the plug is in place. With wide eyes and a devious grin, he pushes the plug in deeper through my clothes causing me to let out a lustful moan. A little protective of me, Griffin begins to nip at Patrick's ankles until he relents and returns me carefully back onto the sidewalk. Before heading up to the house, Patrick says he'd like to show me something, so I leash up Griffin before he takes my hand and leads me up his street a short distance.\n\nAt the corner of his street, just down from his house, is a gorgeous street mural painted on the pavement taking up the entire intersection. On the corner itself is a small, covered gazebo with a bench and a bulletin board housing multiple fliers. Patrick tells me that he built the gazebo over 10 years ago as a neighborhood meeting place, and that the mural had been designed and partially painted by his ex-wife Maureen. I do my best to appreciate its beauty, but I feel the sharp edge of caddy jealousy and even a little ire course through me. Rationally, I know it's unfair since I don't know her side of what went wrong between the two of them, but looking at what they once created together for their neighborhood shows me that at one time she was just as invested as he was in their marriage and community before letting it all go. My heart breaks for him. A flash of my own culpability in the deterioration of my marriage stings me as I realize I'm in no place to cast stones. ",
        "We head back to my car and grab my bag. Walking up the stairs that lead to his house, I see that along with the Bronco there's a covered motorcycle in the driveway. I'd forgotten that during our first hike he'd mentioned that he owned one, but didn't use it much for city riding. Removing the cover, he reveals with pride a 1976 BMW R75/6, with a black tank. It's been since well before my marriage that I've been on a bike. In my mid-twenties I'd even taken the Motorcycle Safety Federation class with the thought that I'd buy my own, but never did. He asks if I'd be comfortable going for a ride on Sunday, and I nod with uncontained excitement. \n\nAs we approach the front door, he mentions that he and his wife bought it thirteen years ago; three years after they'd married. I remember that he'd mentioned that he married at twenty-five. Doing the math in my head I realize that makes him forty-one to my forty-two and I pause in the doorway feeling a bit stunned. For whatever reason, maybe the greying in his hair, I'd assumed he was older than me. Briefly I close my eyes as I process this new bit of information. He notices the change in my demeanor and asks me what's wrong. I tell him it's nothing, but it's clear by his expression he knows otherwise and backs me out the door.\n\n\"Ok Corrine... You need to talk to me. Do you have reservations about this weekend?\" Although his tone is serious, his eyes impart worry and concern.\n\n\"What?\" I answer, stunned. \"No! I have no reservations at all. I want this... I want to be here.\" Summoning the courage to tell him the truth, I admit that I'm thrown off about being older than him.\n\nPatrick throws his head back and laughs robustly. \"Oh shit! You had me scared there for a moment!\" Failing to see the humor, I step away from him, crossing my hands over my chest as I wait for him to stop laughing. Only then does he see how serious I am, but this only reignites his laughter once more.\n\n\"What is so fucking funny about this?\" I want to come off as stern, but his laughter is infectious and I can't help but crack a smile.\n\n\"What's so fucking funny? Are you serious?\" He just stares at me smiling for a bit, shaking his head. \"Here I thought you were about to hightail it away from here...away from me and what I've asked from you; but instead you're worried about a few months difference in our age?\" Before I know it, he's standing directly in front of me cupping my face in both hands; forcing me to look him in the eyes. \"I don't give a rat's ass if you're ten months or ten years older than me. You're smart as hell, turn me on until I can't think straight, and every time we say goodbye all I can think about is seeing you again.\"\n\nThe warmth in his eyes and the sincerity of his words knock the wind out of me. No words have ever made me feel so cherished, and all I want in this moment is to make him feel the same. Walking through his front door is the best way to start. Reaching up on my tiptoes, I gently kiss his lips. \"Thank you, Sir. May we go inside now?\"\n\nHis expression becomes pensive as he looks at me for a few moments longer. He nods his head once. \"Ok....let's do this.\"\n\nI'm not sure what I was expecting as we entered the house. Perhaps that he would ask me to kneel, or strip. I thought he might have a list of instructions on how to address him or behave over the weekend lest I get punished. There were no such guidelines offered. In fact, he was acting as he would on any other night, telling me about finishing his job at the bar and the aged bottle of whiskey they gave him as a thank you. We take off our shoes in the foyer, and he goes about giving me a tour.\n\nThe interior of his house is all old hardwood floors, antique rugs and comfortable furniture. There's an odd assortment of industrial art and abstract paintings, along with an old refinished bar in his basement with original built in taps. I discover that he brews his own beer as a pastime and frequently invites friends over to watch soccer or basketball on the large screen television centered on the exposed brick wall. Overall, the house so far has a strong male presence. I suspect he must have purged any trace of Maureen from it after she left him.\n\nHis kitchen is small, but efficient. The defining features are an industrial grade oven that he salvaged from a restaurant supply store, and the beautiful butcher block counters. I smile as I check out his cabinets, the design not too far off from what I asked for myself, although the wood is a bit lighter than I'd requested.\n\nWhat strikes me the most about his house is how alive it is with plants. From large potted ones to hanging spider plants and ferns, I'm in awe at the time and effort that must go into their care. I'm drawn to the far wall where a trellis runs from floor to ceiling. Rooted in to a large ceramic pot on the floor, is a vine-like plant with thick, dark green, curly leaves. It seems to have crawled up the trellis and taken over half of the wall. Long strands hang loose and a few have small bunches of pink flowers. \n\nHe walks up next to me, placing his arm casually around my shoulders. \"It's a Hindu Rope plant... also known as Hoya Compacta. My grandmother started this one from a clipping over 35 years ago. It was quite a feat to bring it here after she passed.\n\n\"It's stunning. You never told me of your love for plants.\"\n\nHe laughs, and even looks a little embarrassed. \"I figured I'd let my obsessive habits reveal themselves one by one. Don't want to overwhelm you from the get go.\"\n\nBefore heading upstairs, we briefly go to his back deck and yard. Unsurprisingly, there's a bar set up, also with a built in tap. A large grill and smoker are set off to one side of the deck, while two refinished picnic tables, attached benches and all, take up the other side. The plants are as lush and varied as they were inside.\n\nWe head back into the house. After grabbing my bag, he guides me towards the stairs. As we walk up the stairs I'm acutely aware of the large plug that with each step simultaneously feels as if it is pressing deeper yet also slipping. I clench tighter to ensure it won't fall out, and needless to say it is a relief when I reach the last step. I pause at the top in secret satisfaction with myself for my success, only to see the amused look on his face which makes it clear that my struggle was not so secret after all.\n\nI roll my eyes at him and he just smiles harder. At the top of the stairs, there is immediately a door on the left where his home office is. Along with a traditional desk which has his laptop and printer set up, he has a drafting table currently covered in various sketches. Many photographs of finished work are haphazardly thumbtacked to the walls.\n\nTo the right of the stairs is a hallway with two doors on either side, along with a final door at the end of the short hallway. The door on the left leads to a sparsely furnished guest room, while the door on the right leads to the guest bathroom. His descriptions of these rooms are limited. I notice as we approach what I assume is the master bedroom his demeanor, and even his posture, have shifted. Just minutes before he projected ease and humor; now he radiates quiet intensity. In response, all thoughts and emotions come to a crashing halt as my mind begins to clear itself of everything except what is happening right here, right now.\n\nWe walk through the door and he sets down my bag. I take in his room; slate grey walls, off-white trim, wrought iron king bed with a large antique chest at the foot of it. There are old, wood nightstands with their own lights on either side of the bed. Two windows look out to the backyard, with large black-out shutters that are currently open. There are sliding doors that likely lead to a closet, and an open door that appears to lead into his bathroom. As with the rest of the house, a few paintings and plants decorate the room. A faded Persian rug covers most of the hardwood floor.\n\nMy perusal of the room is brief, as my eyes continue to be drawn to not his bed, but what is on top of it. I walk closer to the bed, but he stays where he is by the door allowing me to explore on my own. Lying on the neatly made bed, still in their packaging, are an array of leather cuffs, floggers, whips, vibrators, dildos, plugs, beads, clamps, a hand-held massager and rope. Almost the entire bed is covered, and I realize there's more on one of the nightstands. Walking over I see some paraffin wax candles and a box. Picking up the box, I see that it's a Chinese cupping set. I look at him in question and he just gives me a sexy smile.\n\nPlacing it back on the nightstand, I look back at the bed. It's almost too much to take in at once, but curiosity and excitement begin to tingle inside of me. I go to pick up a flogger, but look back at him first. Patrick nods his approval, his eyes transfixed on me and my reaction to his collection. I pick up the black leather flogger; it feels heavy in my hand. Tendrils of leather hang from the handle, each with a single knot tied near the end. I run the ends of the flogger against my other palm, causing a chill to run down my arm. Placing it back on the bed, I run my hands briefly over the coiled, single-tailed whip. I don't know whether its fear or avoidance, but I move on quickly to the next toys.\n\nThe collection of vibrators and plugs in various shapes and sizes is similar to my own. There is a box with a picture of a very large dildo with a suction cup which seizes my attention and makes my cunt twitch. Last year Robert had sent me a link to a video of a woman forced to fuck herself on one of these as she was flogged, and I'd masturbated more than once to it as I imagined myself in her place.\n\nAgain I look at him for permission and he nods. I remove the dildo from its packaging, and feel its weight and thickness before attempting to encircle my hand around it. My hands are of average size for a woman, but I can just barely touch my thumb to my middle finger. Between the length and the width it appears a little bigger than my favorite vibrator at home. I've never bought a dildo before, preferring the benefits of vibrations should I need them. I replace it into its box and lay it on the bed.\n\nLastly, I run my hands over the coils of soft hemp rope and briefly flash back to the feel of the nylon rope as it rested snug against my chest just last weekend. I feel Patrick approach me from behind until he is standing directly behind me with his arms snuggly encircling my own.\n\n\"I can't tell you how hot it was to watch you scrutinize those toys. It almost looked like you were shopping at a farmer's market, deciding which peach to purchase until I saw you flush as you picked up the flogger.\"\n\n\"I, uh...like the flogger.\" I look down as I say this, my flush spreading.\n\n\"I also saw your reaction to the whip, and at another time we'll address that. Just know that for now I have no intention of using it on you any time soon.\" Relief, but also an odd twinge of disappointment course through me. It's true, the whip made me wary, but I'm concerned that my reaction to it may inhibit him from introducing me to whip-play; which by the fact that he bought one means it's something that he enjoys. I'm about to protest but he stops me.\n\n\"Take note that I said it wouldn't be any time soon; I didn't say never.\" The stern tone and certainty of his words make me know this is true, and my eyes close as I picture Patrick above me, the handle of the whip firmly in his grip. I release the breath I didn't realize I was holding and feel the familiar twinges of lust forming deep in my gut, causing my pussy walls to swell and my nipples to become tight and erect against the thin material of my tank top.\n\nHe pulls me even tighter into his embrace. \"It's important to me that you see that everything here is new; that it's all for you.\" He pauses before continuing. \"As my marriage was crumbling, I tossed everything I had because it was too painful of a reminder for me... of all of the lies and deception that had become of us. Until I met you, I wasn't even certain if I'd ever find a partner that I could share this with again. I don't mean finding someone to play with, that's easy enough to find in a club or online... I mean a true partner...someone to love.\"\n\nMy breath catches as I hear his last words. I'm not sure if it's an admission of love, or a just a desire for it. In this moment though, I don't really care.\n\n\"I bought these earlier today, each one with you in mind.\" His cock begins to harden against my lower back, and I reflexively grind my hips against him. \"Be still,\" he commands. \"I'd considered having a little fun and taking you with me, but in truth I don't think I could have handled the distraction.\" He laughs a little before adding, \"I was hard the whole time I was shopping as it was.\"\n\nI smile as I revel at the image of my dominant, always in control boyfriend unable to control his hard-on while shopping for toys for me...for us. I realize that even in my own mind, this is my first admission that he is, in fact, my boyfriend.\n\nPatrick moves from around me, heading to the trunk and opening it. The inside of the oversized trunk appears to have been refinished, and has multiple pull out shelves and compartments. Meticulously he begins to remove items from the bed and packs them into the trunk. Every item appears to have its place predetermined by him. Remaining on the bed are only leather wrist cuffs, two carabiners, nipple clamps, and lubricant.\n\nSteady gaze fixed on me; he walks back and instructs me to sit on the side of the bed, causing the butt plug to settle deep inside of me. I'm forced to look up at him and suddenly he looks larger than life, or more to the point, I feel very small.\n\n\"You've been waiting since you arrived here for some sort of instructions or guidelines for the weekend.\" He says this as a statement as we both know it's true, but he still pauses for a response.\n\n\"Yes Sir.\" Every ounce of my attention is on him. His ice-blue eyes are bright and intense as he stands over me. My body, hyperaware of his proximity begins to respond on its own accord. Aromatic juices begin to seep in to my panties, as my breasts continue to swell.\n\nReaching down, he lifts my thin bra and tank top over my breasts, leaving them to rest on my upper chest; no longer of consequence to him. He inspects my flushed breasts briefly; perhaps ensuring that the marks and small bruises from the other night have faded. Taking both nipples between his fingers, he gradually begins to pinch them as he resumes speaking.\n\n\"Here are the rules for the weekend... One, in the house or when we're alone together out of the house, I'm Sir. In public, I'm Patrick.\" His grip on my nipples tightens, triggering a spasm in my pussy.\n\n\"Two, you will not deny me any request, sexual or otherwise.\" Pinching my nipples harder, he begins to slowly pull them outwards. I respond with a throaty moan. \n\n\"Three, you will be punished if you break either rule one or two. The level of punishment will fit the infraction.\" Both nipples are twisted ninety degrees and held there. I begin to breathe rapidly through my nose, not wanting to tempt fate by opening my mouth for fear that I might shout out in pain.\n\n\"Lastly, as we discussed earlier on the phone, I expect you to use your safewords if at any time you feel your emotional or physical well-being are at risk; this includes during punishment.\" With one final tug he lets go and they bounce back to my chest. Briefly the pain ratchets up and my eyes squeeze shut as I absorb the pain.\n\n\"OPEN THEM!\" My eyes shoot open in time to see him drop to his knees, alternately suckling each of my breasts, soothing the tortured nipples with his tongue. With a final lingering lick along my cleavage, he reaches behind me to retrieve the wrist cuffs. With a pair of scissors I hadn't noticed on the nightstand, he cuts away the packaging and hands the cuffs to me. I feel the weight of the cuffs in my hands, stroking the black leather. They appear well crafted, and although the leather is new and still slightly stiff, there is also softness to them. Large gauge, quick release buckles are on one side, while O-rings adorn the other.\n\nHe buckles them securely to my wrists, ensuring that he can easily fit two fingers underneath while also making sure I can't slip out. He turns the O-rings to the inside of my wrists, then secures them together in front of me with a carabiner. Instructing me to lay on my back with my head towards the headboard, he lifts my arms above my head, securing my wrists to the wrought iron headboard with the other carabiner.\n\nTilting my head back a little, I look in wonder at the thick black leather and chrome binding my pale wrists to the headboard. The visual alone creates a delicious sense of helplessness; but when I test the restraints and feel the tug of leather against my skin and hear the loud clang of chrome against iron, my body convulses as if I've been shocked. Pulling my legs tightly together and bringing my knees close in, I squeeze my cunt muscles and begin rapidly rocking my hips back and forth as I feel myself suddenly reeling towards orgasm. The plug in my ass stimulates me with each thrust and just before the wave crashes I feel my ankles grabbed, pulled down and apart. I can't help myself when I scream \"No!\" and begin flailing against the bed.\n\n\"Corrine... CORRINE!!\" I hear Patrick calling me, but it takes a moment for me to realize what just happened and I blush with embarrassment. \"You're fine sweetie... I know this is all new to you. It's a lot to take in. That was a beautiful display, but holy shit... I can't say I've ever seen someone almost come from just seeing themselves in wrist cuffs.\" This makes me blush even more, and I turn my head away.\n\n\"Look at me.\" I do, and am met by warm but incredibly impassioned eyes. \"You are the most passionate, responsive, and oh so lucky for me, easily embarrassed little slut I've met.\" He gives me a crooked grin as he slowly slips my skirt and panties down and off my legs. \"Fuck. I love that no one else knows what a wicked little woman you are.\"\n\nPatrick slowly rises from the bed and in no rush removes his clothes. My eyes take in his long, trim runner's body. His chest is rises and falls rapidly, in contrast to his slow, languid movements. My eyes travel down his torso, from the well-defined muscles of his abdomen to the sexy trail of hair leading to his very erect cock. It twitches and bobs as he casually massages his balls while staring down at me. Forgetting my restraints, I struggle to rise to him, only to land with a soft thud back on the bed. \n\nCrawling over me, he straddles my hips; his cock and balls resting on my soft belly. At some point he's picked up the nipple clamps and dangles them overhead for me to see. They're wide clamps covered in black rubber; each with a screw to adjust the tension. He spends a brief time lightly pinching and twisting my nipples to make them erect before closing the clamps around each one, including some of the areolas. He places them in quick succession without allowing me to adjust to the first. I scream and buck, but he leans down penetrates my lips, muffling me by driving his tongue deep into my mouth.\n\nWe make-out like teenagers, grinding our bodies together, although mine helpless against his probing and punishing hands. One of his hands rests on the chain connecting the clamps, periodically giving it a light tug. His other hand alternately massages and pinches the flesh of my breasts and the undersides of my arms, each torment sending stabs of pleasure to my swollen, dripping cunt.\n\nPulling away from me, Patrick sits up on his knees as I continue to writhe before him. Grabbing two pillows, he stacks them, then tucks them under my hips and bottom.\n\n\"Spread your legs wide and place your feet on the bed, as close to your lovely ass as you can.\"",
        "I grunt as I get myself into the position he asks; only when I'm done do I realize how lewdly I'm spread in front of him. My pussy lips open before him as the plug shamelessly protrudes from my tight hole.\n\nHe takes the handle and begins to slowly rotate the plug side to side, waking up the sensitive flesh and sending shivers through me. Pussy juice coats the crack of my ass so thoroughly that wet sounds are made with each movement of the plug. He tugs agonizingly slowly on the handle; his eyes fixed on it as it emerges from within me. Pain and pleasure peak quickly as I'm stretched to the widest point of the plug, only to feel him push it back in, just as slowly. He repeats this motion over and over again my hips begin to meet his hand with every push.\n\n\"Oh baby... If you could only see how wide you're stretched.\" He smiles briefly. \"...but I guess you already know that. I have to tell you...seeing you like this is turning me on like crazy. It's got me thinking of all sorts of nasty, dirty things I could do to you to make you blush and come. It makes me wonder how much further I could push you; about what other objects I could fit inside your cunt or ass.\"\n\nHis eyes have turned dark....very dark. He continues to fuck my ass with the plug almost mindlessly, still staring, but obviously deep in thought. My own mind skirts over a few images...foods...bottles...his fist. This last one causes me to intake my breath sharply which seems to snap him out of his own dark thoughts.\n\n\"Does that turn you on, Corrine? Having all these toys to play with but being fucked by things that were never intended to be sexual? How would you feel if I fucked you in your cunt with the handle of my hammer, knowing I'd be using it on the job the next day?\"\n\nMy face grows hot and I begin to rapidly shake my head no...but then stop because although I'm racked with shame, I know that I would, in fact, like it very much. In truth, I would love it; but it hurts so much to reveal my darkest needs to him for fear even he will be appalled. My next thought is, if not him, then who? Taking a deep breath I close my eyes and slowly nod my head.\n\nHis voice is now soft and encouraging. \"Open your eyes. Tell me what you want.\"\n\nOpening my eyes, I pause to collect my thoughts. \"I want....I want that. I want you to stretch me....my holes, Sir. I want to be fucked by you, by toys... by anything that would please you. I was picturing it in my head....different objects. Then I saw you. I saw your fist in my cunt. I've seen it in pictures, in movies. It's something I've never wanted for myself; but then...maybe you...\"\n\nI stop talking as I watch Patrick's mouth slackens; his eyes wide. He is truly stunned by my admission and just as I'm convinced my worst fears are coming true he's suddenly on top of me, kissing my face and neck so sweetly I almost burst in to tears.\n\n\"Aaaaaaaahhhh fuck, Corrine. You are so perfect. Beautiful.... Smart as hell, and so fucking hot that I almost just came when you said that. I will take you wherever you want to go baby...and yes, I would love to one day fist your cunt, but that's something we're going to have to work up to and right now I want my cock in you. I need to fuck your beautiful tight ass and come deep inside.\"\n\n\"YES! Fuck my ass! Fuck me! Please, Sir!\" I feel so helpless, my wrists bound to the headboard when all I want is to grab him tight against me and wrap my legs around his back. Instead I feel him grab the backs of my thighs and push them up so my knees are bent against my belly.\n\n\"Stay...just like that!\" With gentle but constant pressure, he watches raptly as he pulls the plug out of my ass. Cool air kisses the exposed pink flesh as it briefly remains open before the tight ring closes once again. He lets out the breath he was holding and continues for a few seconds longer to just stare at my never-fucked hole. Grabbing the lubricant from the nightstand, he uses two fingers to well lubricate my ass, then strokes his cock with what is remaining on his hand.\n\n\"These are coming off first.\" He reaches for the nipple clamps, and using both hands pinches their backs and releases their pinching grasps. I let out an anguished scream and buck against him as the blood floods back to the tortured tissue sending pain, heat, and then pleasure through every nerve of my body. Throwing the clamps off the bed, he massages my throbbing breasts and nipples until the pain subsides to a pulsing, dull ache.\n\n\"When I'm inside of you for the first time, it's all I want you to feel.\"\n\nUp on his knees, he uses one hand to guide the head of his cock to my puckered hole, which is surprisingly resistant considering it had been plugged all day. In no hurry, I feel him run his cock up and down the crack, stimulating and relaxing me at the same time. Once again I feel him press against the ring, and this time I feel the head slip in. I make a sound, somewhere between a grunt and a gasp as I feel myself pushing outwards which only seem to ease his entry in deeper.\n\nYes... There's pain at first, but as he continues his slow descent into my dark, snug hole a level of pleasure I've never quite felt before takes hold. There are so many layers to it that I know it's not just a physical pleasure that's consuming me. As he begins to slowly rock in and out of me, holding the backs of my thighs tightly so my ass is lifted high to meet his thrusts, nerve endings that have never felt this kind of sensation are sending disparate messages of pleasure and pain and the two feelings entwine within me. I feel full of him physically, emotionally, and on one other plane that could only be described as metaphorically.\n\nIn this moment I am his to use, to fill, to devour. I know he choose this position on purpose so he could watch my face and my expressions as he fucked my ass for the first time, and I'm pleased because I can watch his too. Sweat is forming on his creased brow; his eyes are locked on mine and filled with animalistic lust and need. His thrusts come harder and harder and we're both grunting and moaning as each thrust is met with the loud smacking sounds of flesh against flesh. Letting go of my left leg, the palm of his hand comes down on my clit, pressing it hard into my pelvic bone. In rhythm to our thrusts, he begins to grind his palm into my clit in a circular motion and within thirty seconds I'm begging him to let me come.\n\nBefore he can answer I'm crying and swearing as my orgasm overcomes me. I'm bucking against him, squeezing his cock with abandon; feeling it sliding against the tight walls, in and out in an increasingly irregular rhythm until he shouts out and I feel each rush of his seed spraying against my inner walls. Letting go of my leg and collapsing on top of me, Patrick continues to milk his cock in my hole until he has nothing left, come or otherwise.\n\nPropping himself on one elbow, he uses his other hand to gently wipe my sweat soaked hair off my forehead. \"I don't think I'll ever forget the way you looked while I was fucking your ass for the first time. I know I'll be playing it in my head over and over again for weeks...\" he laughs a little, \"...probably years. Whether you realize it or not, you kept me captive in there. It was all I could do to pull in and out, you're so snug. The head of my cock was gripped so tightly I didn't think I could last. When you came I almost kissed you in gratitude because I just couldn't hold on any longer.\"\n\nBefore I can revel in the effect I had on him, he leans down, giving me a lingering kiss on my lips before he gets off of the bed. He moves up to the headboard and releases the carabiner, then detaches the cuffs from each other. \"Stay there a second more... keep your hips up if you can.\"\n\nHe moves to the trunk and rummages through his new purchases. Removing it from its package, he pulls out a medium sized butt plug. Oh fuck, I think. What's he up to? Taking it into his bathroom, I hear the sink run for a bit and I can only assume he's giving it a quick cleaning. Returning to me, he slides it easily into my already lubricated asshole with a grin that is both innocent and wicked.\n\n\"Ready for a quick shower, then dinner? Reservations are in 30 minutes.\"\n\n\"What? But...Why?\"\n\nAs he speaks, he rolls me over on to my front and begins to massage my shoulders and arm. \"Because I want to know my come is inside of you. When we're sitting across the table from each other, talking about work or whatever, I'm going to know my come is somewhere no one else has ever been; and if I'm being completely honest... I feel like I just landed on the fucking moon and staked my flag.\"\n\nI laugh at his analogy. Wiggling my bottom, I can almost imagine his seed moving inside of me. Just knowing it's there, he's there, feels good. \"Alright Buzz... I'm ready for that shower.\"\n\nAfter giving my ass a quick slap, he pulls me up and into his arms. \"One, don't think there won't be any repercussions for coming without permission; and two, it was Neil Armstrong who stepped first onto the moon.\"\n\n\"Geek.\"\n\n\"Slut.\"\n\nWith that lovely exchange we head to the shower, the plug a constant reminder of his claim on me. We've breached a new level of intimacy tonight, and I muse that he's left more of himself inside of me that just his come."
    ],
    "authorname": "jhollander",
    "tags": [
        "bdsm novella",
        "fsub",
        "mdom",
        "anal",
        "toys",
        "female submissive",
        "male dominant"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/rock-and-water-ch-06"
}
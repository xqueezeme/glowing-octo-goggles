{
    "title": "How To Be a Good Mentor",
    "pages": [
        "For those who've read my other stories, Shannon's back; this is a prequel of sorts. And if you're new to my work, welcome! Hope you enjoy.\n\n* * *\n\nI was hesitant about whether I should talk to her about this. I mean, the school has a mentorship program for a reason: you're supposed to be able to talk to your mentor about anything, anything at all, and they're not supposed to blab about it. But this?\n\nGranted, it was probably the kind of thing that happened to many, if not most first-year teachers. And there was no doubt my mentor and I had a great relationship, almost a friendship already; weird when I thought about it, because the truth was she'd been one of my own classroom teachers when I'd been a senior.\n\nBut still. This topic? With this mentor?\n\nSo I was uncharacteristically subdued as I came up behind her at the faculty lunch table. She was alone; none of her other friends shared this lunch period. As always, she was munching on some sort of quinoa/tofu/kale/broccoli thing. I felt guilty about the Italian sub I'd be unveiling soon.\n\nI was surprised she didn't hear me as I came in; it's not like I'm a ninja, and I wasn't trying to be particularly quiet. But her slender neck underneath her dark wavy hair, piled like a bird's nest atop her head, didn't tense at my approach. She had firm, hard shoulders; I knew she worked out, but right now she sat slack and easy in the awkward institutional chair, her jawline visible from behind as she worked at the quinoa. Or couscous? I let my feet make an obvious shuffling noise, and she finally turned.\n\n\"Oh. Hey! How's it going, Dave?\" She smiled up at me, a wad of some orangey sauce trailing from her lips; she'd always been pretty clumsy, truth be told. I reached up and scratched vaguely at my face where the sauce was, and she took the hint with an embarrassed giggle. \"Thanks,\" she muttered into her napkin. \"What's on your mind?\"\n\nI suppressed a sigh as I plopped into the chair across from her, still feeling a little residual awkwardness at being in here. I'm sure there are some people who can take a job at their alma mater and work with their old teachers as if they'd been hanging out together for years, drinking beers and singing karaoke, but I'm not that guy. \"Hi, Shannon.\" She'd needed to correct me three separate times on the first day of school, my addled brain thinking of her only as \"Ms Boyle.\" I reached slowly into my bag for my sandwich. \"Can't I come share a happy, quiet lunch with my mentor? Do I have to have something on my mind?\"\n\nShannon smiled again, knowingly this time. \"You're a nice kid, Dave, but a little too expressive. You've got a readable face.\" She wiggled her eyebrows. \"I can tell you're working on something.\"\n\n\"I am.\" I unrolled the sandwich, glancing up past my glasses to see if she was watching all that processed meat come gooily into view. \"You know Lucy Marsh?\"\n\n\"Know her?\" She chortled, a small spray of parsley flying back toward her Tupperware. \"I had her twice, but only because she was too fucking dumb to pass the first time. Why? Is she one of yours?\"\n\n\"I've got her in that skills class, the one with like eleven kids.\" Special ed teachers like me weren't supposed to have skills blocks of more than ten kids without an extra aide, but the school played fast and loose with that kind of thing all the time.\n\n\"Shit.\" Shannon put her plastic fork down and reflected, staring off into space. \"I haven't really seen her since she was a sophomore. Still have massive tits?\"\n\nI nearly choked on my first bite of prosciutto. Shannon Boyle had a notably dirty mouth, something I hadn't really expected when she'd been my teacher. From what I'd seen, the new math teacher Gina was even worse. \"Yes, uh, Shannon,\" I replied as evenly as I could. \"She does, indeed, have massive tits.\"\n\nShe giggled again. \"Christ, Dave, calm down. You don't have to pretend you don't notice them; after all, it's why so many of them dress like they do.\" She shoved in another clump of whatever she was eating. \"Some girls like being noticed.\" I gulped instinctively. Shannon was not overly large in the chest, to say the least. I wanted desperately to change the topic, but given what I had to talk to her about, that wasn't much of an option.\n\n\"That's kind of the problem with her,\" I said slowly. We chewed together, her with a lot less self-consciousness than I. \"She's... well, she's kind of...\"\n\n\"She's hitting on you for a higher grade.\"\n\n\"Yes!\" Shannon had stated it calmly and deliberately. Just that morning, young Lucy had come sauntering in with a saucy little grin and a bit too much eye makeup. \"I swear to God, Shannon, her skirt might as well have been nonexistent. It was like one of those field hockey skirts.\"\n\n\"Ouch.\" Shannon ruminated. \"She's got nice legs.\"\n\n\"No shit. So she comes over to me, like while I was sitting in my chair, and she perches on the edge of the desk. She looks at me and bites her lip.\"\n\n\"Dude.\" She shook her head. \"What a slut.\"\n\n\"She goes, 'Can I ask you a personal question, Mr Dole?' I could hardly say no. So she leans in, and her top... well, it was pretty low-cut.\"\n\n\"Shit.\" Shannon's eyes lit up. \"She's a smooth operator.\"\n\nI didn't answer at once, remembering: I'm as male as the next guy, and even though I've got no interest in a teacher-student sex scandal and don't particularly like Lucy, there's a reason men get hard when they see massive breasts. Her cleavage had beckoned like a goddamn treasure cave, complete with a dragon waiting inside to devour me. \"Right. Well, so then she kind of whispers to me, and says she's not sure if her skirt meets the dress code. 'My mom threatened to keep me home, Mr Dole,' she said. 'But I told her I'd miss my skills class, and I love going to my skills class.' I didn't know what to say.\"\n\n\"You say that her skirt is too short, and that her mom was right.\"\n\n\"Well, it's harder for a guy to say something like that than for a woman.\"\n\n\"True.\" She scraped some orange-sauced green things to the corner of her Tupperware. \"What did you say?\"\n\nI shrugged. \"What could I say? I told her it wasn't an appropriate question, and that if she wanted to come in early, she should have some kind of academic question for me to answer. She kind of got all huffy at first, but then she just smiled and got up and stretched, like, right in front of me.\" I paused as I remembered the sight, glorious and firm, as Lucy Marsh jiggled fitfully right in front of me. Her top had ridden up to reveal the glint of her pierced navel. Her belly had been smooth and tanned. \"I said she should leave.\"\n\n\"Killjoy.\" Shannon swallowed, then looked seriously at me. \"Dave,\" she pointed out, \"you should think long and hard about asking her out.\" She shrugged. \"The word is she gives excellent head.\"\n\n\"Jesus! Shannon!\"\n\n\"I'm just kidding,\" she giggled, primly snapping the lid back onto her container of nutrition and gazing at me thoughtfully. \"I'll bet she'll just go away if you ignore her, Dave.\" She swept a thing of dental floss from her purse and went at it, as if I wasn't even there. \"Pretend she's not getting to you. I mean, treat her like any other student. She'll get the message.\" She stared thoughtfully into space. \"Want to hear a story, Dave?\"\n\n\"Sure.\" I had work to do on my sandwich; we only had another ten minutes for lunch. Shannon settled back and began with the kind of relish that implied she'd told this story often.\n\n\"So I was in my second year here, teaching three sections of modern US history and two of Early World. I think this was...\" she frowned. \"Five years ago, maybe? I think it was when you were here, or maybe just after you left; I don't know.\" My ears pricked up in mid-soppressata. \"Anyway, it was around then. So the Student Body Council used to do that thing, the Valentine's Day fundraiser, where they sold carnations during the lunches?\"\n\nI remembered. I'd been the SBC Treasurer, after all. We'd made money hand over fist. You'd let kids write out a message, seal it in an envelope, and then write their crush's name on the outside. They'd drop it off with five dollars, and on Valentine's the SBC brought the envelopes around to the recipients, with a red or white carnation. It was all in good fun; it was the same thing we'd always done around the holidays, with candy canes. I nodded.\n\n\"So I'd gotten a couple the year before, just innocuous little notes from nerds and kissups. But I'd been a first-year teacher, and I was only like your age, so I probably looked like a student.\"\n\n\"I can relate.\" I'd recently grown a scruffy little beard in order to avoid being mistaken for a kid. That, and I wore ties every day. Alas, though, my pitiful beard was such a sorry-ass thing that the effect was, I knew, pathetic; there were fifteen-year-old sophomores in the building with better facial hair.\n\n\"Right? So I didn't think anything of it. Then one of those SBC kids came by with another flower for me, and I big white envelope, and it had my name and room number on the outside. I opened it right there in class and damn near lost it. Like, my head just about exploded.\"\n\n\"Really? What was in there?\"\n\n\"Well,\" she said slowly, \"there were a couple of things. A poem, for one, very nicely done in silver ink on some cardstock. It was very complimentary toward me.\" She took on a distant look, smiling faintly as she remembered. \"Very complimentary. I loved it. I looked it up later on a plagiarism website, but it seemed to be original. It was signed 'Secret Admirer.' Then there was a note, saying about how much the sender loved me, and wanted me to be happy, and how beautiful I was; stuff like that.\"\n\n\"The usual.\" I was watching her closely, and she surprised me with a frown.\n\n\"No, actually. Not the usual. I'd have expected being told I was hot, or sexy, or something like that. But this one said beautiful.\" She sighed. \"Maybe it's nothing, but it really made me happy at the time. Jesus, I was young.\"\n\nI forced myself to take another bite. \"Was there anything else in there?\"\n\nShe looked up, her dark eyes meeting mine. \"Oh yes.\" She took a precise sip of her water. \"Two small envelopes, numbered 1 and 2. The note said to open them in order, so I did.\" She suddenly looked suspicious. \"Did you hear about this at the time? It made major waves; if you were here, you'd have heard about it.\"\n\nI shook my head. \"Doesn't sound familiar.\"\n\n\"Huh.\" She shrugged. \"Well, whatever. Envelope number 1 had a photo of a bed, just a normal bed in a normal bedroom, normal sheets. But it was nighttime, and there was a candle on the windowsill, and there were -- get this -- rose petals on the bed.\" She chuckled. \"Like, a teenage boy's bedroom, with all the clutter you'd expect on the bedside table, and then this romantic setup... it was too much. But very flattering. The note with that picture said something about how he wanted to relax with me, make out with me, et cetera.\"\n\nMy mouth had gone dry, despite the oil and vinegar on my sub. \"And the second envelope?\"\n\nShe arched an eyebrow. \"Well, see, that's why I almost lost it. It was a picture of a penis.\"\n\nI'd expected it, but it still made me gasp. \"No way.\"\n\n<br> \"Oh yes.\" She took some more water; her face was pinkish. \"A real, live, honest-to-God dick. Like, all hard and shit.\"\n\n\"No way.\"\n\n\"You said that already,\" Shannon went on calmly. \"It was a pretty good shot, actually, framed well and in focus, with plenty of detail. All I could see was the penis andthe balls, then the pubes and a little of the abs, like, up to his belly button.\" She shivered. \"It really was quite hard, Dave.\"\n\n\"Huh.\" I swallowed. There wasn't much more to say.\n\n\"Exactly.\" She sighed. \"The note with that picture was a little more explicit. Weird, though: it was still... well, I don't know how to put it. Polite? Gentlemanly? As polite as it could be, anyway, telling me how much he wanted to fuck me.\" She looked away. \"Really hard.\"\n\nI had to know. \"How did it make you feel?\"\n\n\"Me? After I got over my shock?\" She looked at me long and evenly. \"I shouldn't really tell you what I did when I went home that night, Dave. Wouldn't be appropriate.\" She chuckled. \"Bad mentorship.\"\n\n\"No doubt,\" I replied immediately, concentrating on my sandwich. Two bites left. \"So what'd you do?\"\n\nShe shrugged. \"Some of the kids had seen the photo, so I didn't have a choice. I told Mr Oliver, he told the assistant principal to do something about it, and then presto. No more Valentine's Day flowergrams for the SBC.\"\n\n\"Ah.\" I swallowed. One more bite. \"So that's why they stopped it.\"\n\n\"Yup.\" Shannon paused again, staring into her water, then sighed. \"But more to the point, I always figured it was Craig Metcalfe's dick. So things were... well, awkward between he and I after that.\" She shrugged, then started putting her things away. \"I ignored him. It went away. End of story.\"\n\n\"Huh.\" I was obscurely disappointed. \"Why Craig Metcalfe?\" Craig was a roofer now, though in high school he'd been captain of the water polo team. Shannon blinked.\n\n\"I -- I don't know,\" she admitted. \"He was always flirting with me, and all the gossip said his dick was huge. I didn't give it much thought; the, uh, the coloring seemed to match.\" She hesitated then, looking at me sideways, then decided to speak. \"Thing is, well... it worked.\"\n\n\"What's that?\"\n\nShe shrugged. \"It worked. As a valentine. It was precisely the right approach for me.\" She got to her feet, her compact muscular body quick and decisive in its movements. I tried not to stare. \"I'm off. I need to pee before class. Gonna be okay with Lucy?\"\n\n\"Lucy? Oh, uh, sure.\" I shook my head. \"I know what I need to do. I just needed to vent.\" I smiled up at her, always tentative. \"Thanks, Shannon.\" She grinned back.\n\n\"Don't mention it.\" She nodded, then she was gone, that symmetrical ass of hers wagging impudently in its tight skirt, and I realized I was annoyed. Annoyed at Craig Metcalfe, as unfair as that was. The truth was, I'd spent hours over that shot, getting my cock just right in the camera frame, fiddling with the timer, even setting up the lighting.\n\nBut I felt a thrill, too. Because she'd told me it had worked. My valentine to my teacher had worked.\n\n* * *\n\nShannon Boyle was an absolutely smoking woman now, but when she'd had me in class six years ago she'd been... different. No less hot, really, but there'd been a little more weight, softer curves, a gentleness to her that had driven a certain kind of nerdy, soulful male student into fits of distraction. I think she'd been in her second year of teaching when I had her in modern US, and her occasional fumbles with classroom management (rougher kids ran all over her) and classwork (she'd had a habit of forgetting to collect assignments) had seemed, to me, endearing.\n\nMany an adolescent night had been spent wondering what she looked like naked. Of course, she wasn't alone: I was an average, horny boy, so I used to picture nearly every woman I knew naked. There was Mrs Grant, the Spanish teacher, who jiggled and shook so powerfully in her white sweaters. Ms Temple, down in Guidance, who called everybody \"honey\" and who you could never be quite sure wasn't flirting with you; she still worked here, still as hot and flirty as ever. And Ms Linnea, the PE teacher; my God, but she'd been fine. A tall, lean woman in sweats and a tanktop, she'd been fodder for many locker-room conversations among all of us guys.\n\nBut, to me, Ms Boyle had always been different. Special. She'd been young and fresh-faced, with an air of naivete that made me want to protect her. Of course, she'd also been busty and worn skirts, which made me want to fuck her. Hence that valentine photo, so out of character for me.\n\nI'd perched my camera, a clunky digital in those days before everyone had smartphones, on my dresser, then taped a flashlight to my desk for sidelighting; a trip to the internet had told me to soften and reflect the harsh light with a piece of white cloth, so I'd sacrificed a pillowcase and then not told my mom about it. I'd lined everything up carefully, taken a series of test shots in my tighty-whities, and then it had been time to go: I'd thought about Ms Boyle, looked at her picture in last year's yearbook, and with the steadiness and reliability of any 18-year-old penis, I'd gotten hard in about nine seconds.\n\nThe camera had a timer, but I'd had to go back and forth to take subsequent shots until I was sure I'd gotten everything perfect. Once I had, I'd stared at the result with a mixture of pride, fascination, and embarrassment. It's not every day a guy studies his own dick, and I didn't really have a sense about how it should look. But the lighting made it look like a goddamn tower, like a great big fleshy chimney, the brown birthmark on the right side now looking a little like a pumpkin; it only did that when I was hard.\n\nAnd, apparently, she'd liked it.\n\nThe poem, too, seemed to have been a hit, but then I'd figured it would be. I was a good writer even then. I'd had my aunt do the calligraphy, telling her it was a homework assignment and claiming Shakespeare had written it. All in all, a solid Valentine's success. Until the foolish little muppet had opened the dick picture in class, in front of her students.\n\nI'd been lying to Shannon when I'd told her I hadn't remembered the incident. It had been the major scandal of the year at East Seaborne, and the principal Mr Oliver had gone on the warpath. He'd called the cops, a detective had frowned and called the superintendent, and a letter had been sent home to parents. There was a minor story in the news a couple days later, but in the end the administration had decided there wasn't much they could do. Short of compulsory cock and/or bedroom inspections of the entire male student body, with Ms Boyle checking out each one, there would have been no way to figure out whose penis was in the photo. Unless someone blabbed.\n\nI hadn't. Not to anyone. And, geeky as I was, there was nobody in the school who could vouch for what my dick looked like, other than the cross country team in whose locker room I'd spent a few years changing. There had been a girlfriend of unimpressive blowjob technique, but she'd moved away the year before and now went to school somewhere in Nowheresville, Kansas.\n\nSo I knew I'd get away with it. It had given me a secret thrill, at the time, to know that the lovely Ms Boyle knew what I looked like erect. I'd wondered whether she'd pondered my dick, plus the flowery bed, and lain awake at night thinking about what they meant. Today's lunchroom had given me at least a partial answer to that: she had.\n\nI assumed she'd given Oliver the pictures, now moldering shredded in some landfill or buried in a file somewhere in the disciplinary office, East Seaborne's version of a cold case.\n\nFeeling strangely lightheaded, I packed up my stuff and got ready to move on to my next class. Lucy's class. The school had a rotating schedule, so I saw her at different times each day. I wondered what she'd do after our morning encounter; certainly she'd make sure her jacket was off, her boobs on full display for me and the other guys in the room. Of eleven kids, nine were boys; the other girl, Elizabeth, was a mousy freakshow who lived a life of total silence in the corner. That left a river of testosterone, all of which Lucy Marsh lapped up with smooth, easy self-assurance; the girl knew exactly what she had, that was for sure. I was confident I wasn't the first male teacher she'd tried to vamp for a better grade.\n\nMy room was the worst in the building, bar none, buried deep in the back corner of the lunchroom; I'd attended school there for four years, and never had I known the room even existed. The furniture was hardly inspiring, but I'd made an effort with some paint and plenty of projects hung on the walls. My desk was a massive thing, a hand-me-down from a bank or post office, and as I walked in I saw Lucy lounging behind it, her feet high on the desk. \"Hi, Mr Dole!\" she chirped as she caught sight of me.",
        "I gulped. Lucy was short, but perfectly proportional; her legs were beautifully formed, launching from her scandalous skirt to make a shapely bridge to my desktop. Slouched down in the seat as she was, the hem of the skirt was well up onto the curve of her ass; there was an awful lot of skin on display there, even by Lucy's standards. No folds or wrinkles marred her belly, the tits above on proud display in the low-cut top I'd noticed that morning. Topping it all off was a deceptively sweet face with an innocent grin and, of course, freckles that matched her carrot-colored hair. Two braided pigtails sprouted above her ears.\n\n\"Out of my seat, Lucy.\" I was in the mood to be brusque with her, even though nobody else was in the room yet; the boys were generally tardy, and the other girl, a skinny little thing with green eyes, wasn't exactly careful about her overall attendance. \"I've told you not to sit back there.\"\n\n\"Ooh.\" Her made-up lips made a little O that she obviously knew was fetching. \"So sorry, Mr Dole. I get so forgetful around you.\" One leg came down to plant her worn leather sandal on the floor, in the process treating me to a nice long view of the powder-blue panties she had on. Lace. I swallowed and looked sharply away as she laughed merrily. \"I'll move.\"\n\nI heard the dry slap of her sandals as they crossed the room, joined now by the shuffle of the rest of the class as they filed in. I wondered whether I should even sit in my chair; it seemed indecent. Half her ass had just been planted there, undoubtedly bare; Lucy was the sort of girl who'd wear thongs everywhere. So instead I hitched my butt onto the desktop, greeting the kids as they came in; a long, dry hour stretched ahead of me.\n\nThis was, after all, my life. I managed a warehouse, essentially, for students the administration could find no other place for. Most were decent kids, but they'd all fallen through the cracks of the educational system at some stage. Some had real learning disabilities, some not. Some were motivated, some not; some could be made to work on their schoolwork with me. Some?\n\nWell, suffice it to say I generally spent my classes prodding kids to stop playing games on their school-issued laptops. This was a losing battle, but it was certainly better than dealing with Lucy and her overheated body. There was nothing for it, though; she trailed me like a loyal spaniel, sauntering along in my shadow no matter how many times I told her to sit down and get to work. \"I was sitting down,\" she whined at one point, letting me see her eyes flicker over toward my chair. \"You told me to get up. Now you're telling me to sit down.\" Those eyes narrowed beneath her plucked brows. \"Do I fluster you or something?\"\n\nI just gaped; it was a completely unexpected word, coming from such an idiot-child. Perhaps she wasn't as big a dummy as she seemed. \"Do you... no, Lucy. No. You don't fluster me. Uh, how do you know that word?\" It was a stupid, senseless, patronizing thing to say, but I wasn't thinking straight. She did fluster me. She was completely sexy, and her hair smelled like watermelon; the effect was totally intoxicating. Shannon had told me to ignore her and she'd go away, but Shannon was an idiot.\n\nAnd now she rolled her eyes, blue like the sky, and scoffed at me. \"I'm not a moron, Mr Dole.\"\n\n\"Of course not,\" I came back faintly, but by then Jason and Chad were yelling at each other over in the corner, and I had to get over there and make sure they weren't doing anything worth yelling about. Sometimes, my kids just needed to let off steam.\n\nI ran into Shannon again as I trudged toward the parking lot at the end of the day, having finally shaken loose from the worst of my little needlings, the weirdo kids who had nothing better to do after the bell rang but hang around with teachers. I shuddered at the thought; it would never have occurred to me when I was a student. I'd been a geek, but I hadn't been homeless. I sighed heavily as I fell in beside her. She heard.\n\n\"Rough class?\" Her smile was what it had always been, like a little burst of caffeine on a drab day.\n\n\"Lucy Marsh.\" I kicked at a pebble. \"No improvement.\"\n\n\"Jesus, Dave,\" she sighed, putting a companionable arm around me. \"There's no point blahblahblahblah,\" because of course she was touching me, and there was no way I'd be able to focus on anything else. She stroked up and down my back, my dress shirt slippery underneath her fingers. \"Right?\"\n\n\"Uh, right.\" The arm went away, my brain reengaged, and I wondered what she'd ended up saying. \"I'll just wait and see what happens.\"\n\n\"Atta boy!\" This time she punched me, painfully, in the upper shoulder. \"I'm off to go work out. You should get out to a gym, Dave; not that you need it, of course.\" I was as skinny as a pencil, my metabolism not yet elderly. \"But the endorphins are nice.\"\n\n\"No doubt.\" I was not an exerciser. We were in among the cars now. \"See you tomorrow, Shannon.\"\n\n\"Chin up, kiddo.\" And then she winked at me, goddamn it. I nearly whimpered in frustration as I reached my car.\n\n* * *\n\nAlways a dedicated and accomplished masturbator, I indulged myself shamelessly that night.\n\nIt was getting to be too much; I was currently between girlfriends, and had gone some six weeks without so much as a kiss, let alone any of the kind of action a healthy 24-year-old male ought to be getting. Now I was dealing with the sex-crazed Lucy while, unknowingly, Shannon was dealing with the sex-crazed me; too much. So I got started in the shower, squeezing a generous dollop of shampoo into my hand and moving on to a quick, reliable fantasy about a girl coming in with me. To save water, ostensibly.\n\nBut this time the girl was Lucy, with water dribbling free from her oversized tits, and in my mind she took me in her mouth beneath the running water and blew me powerfully; in reality, I plastered the tiled wall of my apartment bathroom.\n\nThen, later, it was off to bed after a lackluster night watching hockey and eating microwaved burritos, and then it was Shannon's turn. In high school I'd pictured her as a voluptuous, generous lover, having soft-focus sex in a basic-cable environment of restrained passion; nowadays, her lean body more powerful and her mouth far saucier than I'd ever imagined, I saw her more as a sexual monster, a crafty and challenging woman who'd like it, say, bent over a table and getting spanked.\n\nSo in that fantasy I let her ride me, her full tight breasts making regular circles in my mind's eye while she swore at me until I blasted my cum all across my stomach, almost up to my neck. The experience left me panting, the second powerful orgasm in three hours.\n\nAnd that didn't even count my dreams.\n\n* * *\n\nI'm not sure whether Lucy was waiting for me, exactly, as I came into the building a week or so later; she was there, though, passing through the metal detector at the exact same time I was. I tried not to stare; it was a pair of shorts today, which looked more like a pair of underwear made to look like shorts. They were short enough that the bottoms of her asscheeks stuck clearly out like little fingernail slivers at the top of her legs. \"Good morning, Mr Dole!\" Again, that innocent smile beneath calculating eyes.\n\nI forced a nod. \"Hi, Lucy.\" In a most unwelcome way, my penis was responding to her body; I felt a faint twinge down there. She had on a button-down flannel long enough to reach the bottoms of her shorts; from behind, it looked like she was wearing nothing but the shirt. I waved halfheartedly as I eased through the machine. As usual, my belt buckle set the thing off; Lucy stood there and laughed as the cop wanded my groin, then came mincing through the machine with a wink.\n\n\"What'd they find in there?\" she grinned, moving alongside me as we passed the office.\n\n\"Nothing, Lucy.\" She snorted.\n\n\"I doubt that,\" she purred. \"I'll bet you're hiding something in there. Hey, so Valentine's is coming up; should I wait until then to give you your card, or do you want it now?\" She was gazing up at me as we walked, and it was hard not to feel pretty good; guys like me get little attention from hot females. My old high school girlfriend had told me scores of times that I was sexy, but I'd never really bought it. It always seemed like the sort of thing a girlfriend ought to say, regardless of its truth. Certainly my subsequent girlfriends had pointedly refrained.\n\n\"Not appropriate, Lucy,\" I sighed. It was becoming my stock response to her. She giggled.\n\n\"Calm down, Mr Dole; I'm giving them to all my teachers.\" We walked in silence after that, passing the inevitable knots of people that tend to tie up predictable spots in high school hallways. At one point we had to swerve to avoid a pack of cheerleaders; as we hit the narrow gap, Lucy squeezed her luscious body as firmly against mine as if we were bear-hugging, calmly turning sideways as she did so; warm teenage breasts smashed against my arm as the front of her shorts touched my hip lightly. \"Excuse me,\" she breathed up toward my ear, the watermelon smell a cloud around me; and then we were through, Lucy strolling off as though nothing had happened. \"See you in class, Mr Dole!\"\n\n\"Uh, yeah.\" I had first period off today, and was seriously wondering just how wrong it would be to shut my classroom door, flick the lights off, and whack off in the corner by the bookshelf; her retreating thighs tempted me even as they moved away. The day would be a long one. I adjusted myself in my khakis as surreptitiously as I could, then rejoined the flow of drifting students to head back to my classroom.\n\nA hectic morning brought a welcome break for lunch, and I took my seat with one of those exhausted sighs that seemed to be a major part of my life these days. Across the table Shannon was gabbing with her cronies, my old guidance counselor Audrey Temple and Gina Torrey, the foulmouthed math teacher who'd gotten hired after I graduated. She was a slight little thing, almost small enough to fold up and stuff into a suitcase, and if I'm telling the truth I didn't think she looked all that attractive; in fairness, I'm more into curves and less into bad skin, both of which counted against Gina. Still, to hear her tell it, she was spending a lot of time fighting off interested men.\n\n\"How'd it go with that guy from the Japanese restaurant?\" Audrey was asking as I started to eavesdrop. They seldom seemed to notice me, or if they did, they certainly didn't let it get in the way of their usual topic of conversation: penises. Gina popped a Dorito into her mouth.\n\n\"The waiter, or the guy at the bar?\"\n\n\"Both.\" Audrey laughed. \"Either.\"\n\n\"Well,\" Gina drawled, sitting back to put her tiny feet up, \"the bar guy came home with me, but he couldn't get it done.\"\n\n\"Really.\" Audrey frowned. \"The big guy? With all the hair?\" She shook her head. \"It's never the ones you'd expect, I guess.\"\n\n\"I know, right? The guy looked like a mountain man; I figured he'd fuck like Davey Crockett. But no. I let him get my clothes off, and then he got all bashful and shit, slinging poetry and trembling. I'm sitting there naked, wondering when he's going to get that hairy dick out, when it occurs to me he's not trying to turn me on. He's trying to turn himself on.\" She shrugged. \"I kicked him out pretty quick, I'll tell you.\"\n\n\"You didn't even try to get him to go down?\" Shannon asked mildly, grading papers.\n\n\"Shit no. That beard would have gotten me all itchy.\" Gina arched an eyebrow at Shannon. \"Don't you have that problem? Leon's got a beard.\" I focused intently on my sandwich; the sex habits of Gina Torrey did not interest me, but those of Shannon Boyle did. I hoped I wasn't blushing.\n\n\"Yeah, but it's just a short one. He does just fine down there.\" Gina giggled knowingly. \"That guy at the bar looked more like Santa Claus.\"\n\n\"Right. And Santa don't go down,\" Audrey crowed. \"I think they would have mentioned it in one of those Christmas songs, if he did.\"\n\n\"Damn! Can you imagine?\" Gina crumpled her empty chip bag noisily. \"Big fat bearded dude coming down the chimney headfirst? Me just lying there in the fireplace with my underwear off?\" There was a long pause while everyone chewed.\n\n\"No, actually,\" Shannon said at last. \"I can't say that sounds appealing.\"\n\n\"Not really my thing, either.\" Audrey was getting her trash together. Gina looked from one to the other.\n\n\"Well, fuck you both, then,\" she snapped cheerfully. Then she turned back to Audrey with a wicked grin. \"I'll tell you though, bitch,\" she gloated, \"that little Japanese waiter was a better bet.\" She winked. \"Ever fucked an Asian guy?\"\n\n\"No.\" Audrey was married to a guy named Andy, I think. \"My bed is not Epcot, Gina.\"\n\n\"Well,\" the math teacher said with some relish, \"if that waiter was any indication, there's a reason the Asian birthrate is skyrocketing.\" Gina was married too, I thought, but none of her stories ever gave any indication she worried too much about her husband. None of my business, anyway. \"He was just the right size. Not much taller than me, nice skinny little dick.\" She made a face. \"Tasted a little weird, though, but to be fair he'd just come from work.\"\n\nI tried not to make too much noise as I stood; Audrey and Gina never really paid attention to me, but Shannon gazed up at me as I got to my feet. She smiled her warm, indulgent smile at me. \"Careful, girls,\" she called. \"We're freaking out poor Dave.\"\n\n<br> \"No,\" I protested, glancing over at Gina. She had her lips pursed, looking calmly at the front of my pants. \"I'm just done with lunch.\"\n\n<br> Shannon frowned briefly at me. \"Doing okay? Anything new with that one kid we were talking about?\" Even in the lunchroom, we were supposed to be confidential in the mentorship program. Gina and Audrey traded a sneaky look.\n\n\"What kid?\" Audrey put in quickly. Shannon shook her head.\n\n\"No thank you, Guidance Counselor,\" she smiled. \"It's mentor-mentee privilege. Dave and I were talking about one of his little lost lambs in class.\"\n\n\"Lambs. Right.\" I gave a lopsided grin. \"If the lambs are lying, foul little jerks who are just out to make my life miserable.\"\n\n\"Poor dear little man,\" Gina murmured, her eyelids coming down like window shades. \"She was my mentor a couple years ago, David. You can tell me all about it.\" Oh dear lord. Was every female in this building out to get me?\n\n\"Stop that.\" Shannon gave Gina a playful punch on the arm. \"I'll swing by and see what's going on later, Dave. Take it easy.\"\n\n\"Bye, hon!\" Audrey sang. I could feel Gina's eyes on my ass as I drifted out of the room with womanly giggles floating after me.\n\n* * *\n\nShannon came by the next day after school, her heels chopping against the floor tile in a way that screamed \"teacher.\" She stuck her head into my room and took in the clutter with a single searching glance. \"Want to go get a coffee? We can figure out your large-breasted problem.\"\n\nI snorted. \"It's going to take something stronger than coffee.\" Goddamn Lucy had been her usual self again, equal parts sass and ass. She was even starting to corrupt wispy little Elizabeth Sheely in the corner; I'd caught that one doodling penises on the corner of her physics notebook, her green eyes intent. \"Damn woman is killing me.\"\n\n\"Relax. Come out with me and take a load off. We can walk to the B&amp;T; the weather's great.\" Truth, that; early February wasn't usually so warm there, and a walk to Harborside Book and Tea would be nice.\n\nWe probably looked like a couple as we walked, and a decent-looking one at that: me with artful stubble, expensive glasses frames, and fashionable shoes, slouching moodily along like any good hipster; she, athletic and vivacious, light on her feet and dressed like a sales rep or a real-estate agent, a skirt giving out just above her knee with a pair of supple boots underneath; dark stockings in between. There was an easy, smooth taper to her body from the hips down, her ass particularly prominent in the black skirt. Shannon was wearing a simple white blouse today, the top two buttons undone to show a hint of cleavage and the firm skin beneath her neck. She was always sparing with her makeup, letting the freckles shine out.\n\nIt had always been her face that did it for me back in high school, truthfully. There was nothing at all wrong with the rest of her either, but unlike most adolescent boys I hadn't stopped examining females after I mentally measured their chest. It was not a classically gorgeous face: rounded, the nose small and pointy, her eyes very dark beneath long lashes. It was those eyes that I'd always found most interesting. They sparkled with lively interest, the lids rising and falling expressively. Her mouth was wide to match her round face, and as we took our seats at the little table in the back of the B&amp;T I couldn't quite believe I was sitting across from her, alone.\n\nIt felt like a date.\n\n\"It's still Lucy, isn't it?\" She shook her head in sympathy after mousy little Brittany ran off with our order. Her eyes rolled. \"What a little bitch.\" We'd asked for the back table so that we could gossip, but she was still careful to keep her voice down. \"Has she tried to screw you yet?\"\n\n\"Yet?\" I laughed, shrugged, and toyed with the napkin. \"No, but she's getting bolder and bolder. I'm curious whether she's doing this to any of her other teachers, or whether it's just me. Like, that she's preying on me due to my inexperience.\"\n\n\"Stop it.\" She laid a hand briskly on my arm, and I took an involuntary breath. She was just being nice, but still. \"She's a sleazy little whore with a daddy complex who needs to get herself under control. This is not about you.\" She kept her hand there, but she hesitated before she moved on. \"You've always been super-nice, is all. So she thinks she can take advantage of you. Been there, done that.\"\n\nTrue. When she'd started, Shannon had been renowned for her kindness. It had taken her awhile to learn to be a bitch on command. \"What's the worst thing a kid ever did to you? Other than that mysterious valentine, I mean.\"\n\n\"Let's see.\" Her eyes focused somewhere over my shoulder, out the front window. Her full lips compressed into a little line, and then she nodded. \"Right. So, it was a year or two after you graduated. There was this kid, you might remember him: Paul Sanchez?\"\n\n\"Yeah.\" Nice kid, but kind of a dick. \"I knew his brother Mike.\"\n\n\"So he was in my lower level junior class? Modern World? It's everything from the Enlightenment to this morning, so it moves fast. He was a shitty student. Smart, but lazy; he never did his work. His parents sent him in once for a before-school powwow.\n\n\"I sat him down and yelled at him, but he just sat there like a fucking lump. I could tell I wasn't getting through to him. And then I realized he was staring at my chest the entire time I was talking to him. 'Hey!' I said. 'Eyes up here, shitbag.'\"\n\n\"Wait. You called him a shitbag?\"\n\n\"As soon as I said it, I realized I shouldn't have. We just stared at each other with our mouths open. I mean, you know now what a filthy mouth I have, but when you were my student, did you think I talked like that?\"\n\n\"Of course not.\" Any thought of her talking dirty back then would have made me cum instantaneously.\n\n\"Right? So I sort of laughed nervously, and he just slouched down lower and moved his eyes up to mine, real slow-like. And he smiled his weaselly little smile, and I knew I was in deep shit.\" Brittany scuttled up with our drinks, mine a fluffy concoction of caramel and whipped cream, hers just a tall glass of Earl Grey with honey. I felt like a pussy and stirred the whipped cream into the drink as quickly as I could. \"The problem was,\" she said, very low, as she watched me stir, \"Paul was not a particularly ugly kid. He, uhh, got around. Know what I mean?\"\n\n\"Sure.\" Mike had had two kids by the time he was twenty, by two different classmates. So it must run in the family. \"He was your Lucy.\"",
        "<br> \"No, not as stupid as she is. Like, he was always more subtle. You had to watch your back with Paul. And here, I'd just given him an opening by swearing at him. He looks up at me, all sly-like, and says, 'You're not supposed to call me that, Ms Boyle. I might just have to tell Mr Oliver.' And there I was, looking at him like a fucking dumbass.\" She shook her head, still mortified by the memory. \"He threatened to tell his parents, too.\"\n\nI raised both eyebrows. I'd never heard about any of this, and I'd been in college just down the road. \"Minor scandal,\" I observed. Shannon made a face.\n\n\"Well...\" she looked around the room and then leaned across the table. I caught a brief glimpse of the lace edges of her bra inside her shirt before I reminded myself I was a gentleman. \"Very minor. I, well, I made the problem go away.\"\n\nMy heart sank. \"What did he want? An A?\"\n\n\"No, actually. He couldn't give two shits about his grades. No.\" She fidgeted, looked away, and then took a quick sip of her tea before she smiled guiltily. \"I kissed him.\"\n\nI sat back. \"Nasty,\" I said quietly.\n\nShe looked at me for a long moment. \"So, see? Been there.\" She looked squarely over at me. \"Not that I'm recommending that you kiss Lucy, you understand. Far from it.\" She shuddered. \"You'd probably get syphilis or something just from touching her.\"\n\nI forced a laugh. The image of Shannon kissing a student was squarely in my mind now, dominated by a tortured question from my younger self: if goddamn Paul was good enough to steal a kiss from Shannon Boyle, why hadn't I? I struggled to get back into what she was saying. \"She'll stop once she realizes it's not going anywhere. Just make sure you don't lead her on.\" She arched her brows meaningfully. \"No flirting.\"\n\n\"Me?\" I sat back in the spindly chair. \"I would never.\"\n\n\"Sure.\" She took another sip. \"Quit bullshitting. Young teachers flirt with older students all the time. It usually means nothing.\" And then she was staring right at me. \"I used to flirt with you a little, Dave. Remember?\"\n\nGod, but hadn't she flirted with everyone? I'd never really thought of it that way before, though. \"You weren't flirty,\" I protested. \"Just informal.\"\n\nShannon barked out a laugh. \"Informal. Right. And, of course, you never flirted back.\" She winked. \"You were a little charmer, Dave. You and your friend Robbie.\" I blushed; Robbie was nothing like me, but I could see Shannon didn't know that. No, he'd always had plans. He'd closed the deal, too, just after graduation as he'd taken his calculus teacher into the bathroom and fucked her. She gazed at me levelly. \"I noticed.\"\n\nI just stared back and tried to smile. This wasn't the kind of witty repartee I was any good at. Funny she should think I'd been flirting back then: staying quiet and trying to smile enigmatically was my usual routine with women I was smitten by. It never really occurred to me it might have worked. \"Well,\" I added, mostly because it seemed like it was my turn to speak, \"it's not like I ever crossed any lines.\"\n\n\"Me neither,\" she replied quietly. \"Except that once, with Paul.\" She winked then, grinning suddenly. \"And, of course, Craigie Metcalfe.\" She giggled at the dumb look that crossed my face. \"The Valentine's dick pic. He certainly crossed a line.\" She tossed her hair back as she killed her coffee. \"Don't worry about that slut Lucy,\" she finished scornfully. \"She's just a little pop-tart who doesn't understand the power of her own boobs. But,\" she winked, holding up an admonitory finger, \"at least if you get a secret Valentine's Day pussy shot, you'll know whose it is.\"\n\n\"Gee.\" I stood hastily to get the door for her. \"That's reassuring.\"\n\n\"Cheer up,\" Shannon ordered, patting me on the back as she passed. \"Nothing will happen. I've got your back.\"\n\n\"Ah yes,\" I managed. \"The essence of mentorship.\" She chuckled again.\n\n\"Exactly.\"\n\n* * *\n\nI felt a weird sense of unease on the 12<sup>th</sup>, with just two days to go before Valentine's Day. It was the last day Lucy's class would meet before the 14<sup>th</sup>, so I knew I'd have the next day to recover before she did whatever she was planning on doing to me. I was giving them an exam, so most of the period involved me sitting quietly as they worked, my feet up on the desk. She made no effort to notice me, nibbling calmly at her pencil as she finished up her test.\n\nIt wasn't until the end of the period that she at last looked up to my desk, frowning until she caught sight of my Kleenex. She gave an ostentatious sniff, then got up and came my way with her usual nonchalantly swaying hips. I tried not to look, but it was difficult: her jeans looked like they'd been steamed before she put them on, so tightly did they fit. They essentially hid nothing; her top was no better, a short jacket gaping open to show a shirt at least two sizes too small. Her breasts pulled hard at the neckline.\n\n\"Can I borrow a tissue?\" she whispered as she came within range; the whisper was for show, of course, a transparent flirtation on her part. I had a rule about making noise while other people were taking tests, but Lucy Marsh was not a rule-follower. She just felt like whispering.\n\nWordlessly, I nodded over toward the box of tissues and went to take my feet off the desk; before I got the chance, though, she swooped in and leaned right over my legs, stretching far over me to grab for the Kleenex. It was a long reach for such a short girl, and I was very aware of her crotch as she ground it against my leg, her ass as her body arched across, the gaping neck of her shirt just inches from my dropped mouth, the sweet jiggle of the eighteen-year-old breasts within; she was quick with her reach, but all these images smashed into my brain and stayed there while she straightened slowly up, wiping at her nose as she kept her body pressed firmly against my knee.\n\nShe stood there, I thought, for quite a bit longer than she needed to, her eyes sparkling with lazy triumph over my slouched form as she kept her pussy right against my leg. I couldn't see her mouth as she wiped at her nose, but I could see the crinkle of a smirk in the corners of those glittering eyes.\n\nI'm sure I swallowed; I'm just as sure I gazed up at her with a helpless expression of dumb mulishness as she regarded me. At last she finished up, dabbing gently, her right hand steadying herself against the back of my chair as she leaned back across to toss the tissue into my wastebasket. Her thumb over the back of my seat was warm against my shoulder, her left arm extended toward the trash can, and now her tits were staring right at my face, close enough for me to feel her body heat. Her left hand flicked the Kleenex toward the wastebasket, and her breasts jiggled again as she giggled. \"Whoops,\" she said softly; she'd missed her shot, and now the tissue lay on the floor.\n\n\"You missed,\" I muttered unnecessarily, my throat dry. Her jacket framed those boobs of hers so nicely...\n\n\"I know.\" She moved with lithe, feline speed behind my chair, scrambling to pick up the Kleenex, her warm body now pressing against the chair behind my shoulderblades, her solid flat belly rubbing across the back of my head before I could get it out of the way. And then she was crouching down, groping for the trash can, and as she leaned down the short jacket was no match for her posture, rising up with her shirt to reveal a broad, firm stretch of her lower back, the dimples above her butt flexing, the pants drooping low over her hips to reveal a bright red thong rising from her asscrack. \"I'll get it.\"\n\nAgain, it all took longer than it needed to; she was displaying herself for me, letting me see what she wanted to show me. At least a third of her ass was in view, the pants gripping tightly at the rest, and I had a sudden overwhelming urge to reach down and grab the smooth skin she was showing me underneath her ribcage, to pick her up and throw her over the desk.\n\nMy dick was very, very hard.\n\n* * *\n\nYou might say I know a lot about masturbation. I'm something of an expert; since early puberty, I doubt more than three days have gone by without a nice, healthy jerk-off, even when I have a girlfriend. And with practice has come expectation: I know which fantasies work, I know where to put my hands, and I know about how long it's going to take before the excitement ends and the wiping begins.\n\nWhich was why that evening surprised me so much: I got home to piles of mail and dirty dishes, and a hard-on that hadn't really quit since I'd found myself gazing on the perfection of Lucy's overdeveloped ass. So I ignored the piles and retreated to my sofa, assuming I'd need to spend my usual few minutes thinking of a fantasy, getting it into my mind, and then settling down to a nice, even wank.\n\nBut no. Not that day. That day, I came almost before I had a chance to get ready. As I shoved my fly open and reached in, my dick pulsed like a severed power line, throbbing through the hole in my boxers. It spewed out a massive load the moment I wrapped my fingers around it, spraying cum all over the shirt I hadn't even been able to pull out of the way. And, gasping, I was left with a ruined tie and a sharp, solid mental image of Lucy Marsh bent over with my cock inside her.\n\n* * *\n\nShe came in early for Valentine's Day dressed, as she usually was, in an outfit that left very little to the imagination: a tight pink t-shirt, the dark bra straps clearly visible under the thin material; over each nipple was a shiny red heart. The shirt ended about two inches above where it should, and she was showing the entire world her flat abs over a pleated red skirt that fell, if I'm being charitable, to the bottom of her ass. Beneath that were a pair of red fishnets, the kind with the smaller holes; down below, a pair of shiny white high heels gave her a height boost. Her face between a pair of bouncing ponytails was its usual saucy, pushy self, the smirk flashing across her bright red lips as she caught me staring at her legs. \"Hi, Mr Dole,\" she sang. \"Happy Valentine's Day!\"\n\n\"And to you, Lucy.\" I was careful to keep my feet off my desk this time, the chair pushed way back against the whiteboard. Her smirk widened.\n\n\"Like my outfit today? I wore it just for my valentine,\" she crooned, and I had no clue at all what to say as she twirled. We were alone, though my door was open to a hallway beginning to fill with sleepy teachers. The wispy skirt flared out a little as she spun, showing me just enough of the base of her ass to convince me she was wearing a thong. Or less. I looked desperately away.\n\n\"Looks great, Lucy.\" God, but it did; a thin mist of watermelon whisked around me. She stared, her head cocked, and I felt the intense pressure of the awkward silence. Jesus. Did this kid have me so intimidated I couldn't even figure out anything to say to her? \"Um.\" Naturally, I picked the wrong question. \"Who's the lucky fella?\"\n\nGoddamn, I thought savagely as her grin widened. I was flirting despite myself. \"Well,\" she said in a playful, drawn-out squeal, \"maybe there's more than one. Or maybe not. But either way,\" she winked, \"I made you a card.\" From the depths of her expensive pocketbook came a small white envelope with a slight bulge in the middle of it. \"You should wait until after I leave to open it, though.\"\n\n\"Of course.\" The bulge was a hard lump, small like a piece of candy. \"I, uh, don't have a card for you. I'd have to bring one for everyone else, you know.\" I managed half a smile, willing myself to stay flaccid as Lucy leaned down close to put a hand on my shoulder.\n\n\"I understand, Mr Dole,\" she went on, her voice hovering just above a whisper. I caught the scent of her toothpaste; my God. \"I know I'm your favorite student.\" It was exactly the sort of thing that charming, winsome kids jokingly say to teachers all the time.\n\nI got the definite sense that Lucy didn't mean it as a joke, though. Worse, I could tell she knew I knew it. She squeezed once, convulsively, then winked again. Savagely I forced my eyes to stay on hers, and not to drift down to where her black bra was so plainly visible through the neck of her overstressed t-shirt. \"Well,\" she drawled after a pause, \"you have a nice day now. See you later, Mr Dole!\" And then she was off, the skirt flouncing back up as she swept around, and her shoes made a loud and abrupt clopping noise as she strode off toward her first class.\n\nMy dick was, by that time, wedged painfully down my leg, hardening awkwardly in the least comfortable position I could imagine. The adjustment took both hands, my chair swiveled all the way around as I dug at myself. Luckily, nobody came in while I was clawing; the little white envelope waited ominously on my desk.\n\nTo My Favorite Teacher, it proclaimed in obnoxious pink ink; the dot over the I was, predictably, a tiny heart. I slashed my thumb underneath the flap, part of it coming away still damp with her saliva; out fell one of those chalky hearts you can find at drugstores, the kind with the red messages written on them that sold by the dozen. It skittered across my lap as I snapped the card open, and for some obscure reason I felt a twinge of irritation at how banal the message was.\n\n\"Happy Valentine's Day, Mr Dole!\" A happy face trailed off the page, and that was it. A red marker had been Lucy's weapon of choice, but other than a bright glossy orange heart and a fuzzy cartoon puppy on the front, that was all there was. So, frowning, I reached out to toy absently with the little candy heart.\n\nUnusually, it was wrapped; looking closely, I saw printing on the wrapper. Ah. So this hadn't come from a drugstore; the printing advertised one of those websites where you order your own customized hearts, with your own messages. The heart was the large size, about the size of a quarter, and pastel green. I glanced curiously down at the red block print and had to look twice. The inscription, marred by a little gouge in the corner where the heart had chipped as it hit my desk, stared back at me.\n\nBE MINE.\n\nAND EAT MY PUSSY.\n\nThat was all it said, in two faded red lines of text.\n\nInstinctively I glanced up to make sure nobody was looking through my door at me; hell, who was I fooling? I was making sure Lucy wasn't out there gloating as she watched my reaction. For a split second I tried to convince myself that this message had ended up in my envelope randomly, just one in a large pile of hearts she'd laughingly dared herself to order from the website, but I knew it wasn't. And the implication stunned me.\n\nLucy Marsh, one of the hottest girls in the school, a girl with a formidable sexual reputation, a girl assumed to have callused knees from all the times she'd sucked dick, wanted to feel me licking her clit.\n\nAt once, with no ability to stop it, my mind went over the nuts and bolts: as short as she was, she'd need to be sitting on a table or something with me in a chair before her. She didn't have enough leg to wrap around my neck if I knelt before her, and somehow I just couldn't picture her as the kind of female who enjoyed lying in bed. A daring girl like her would want it fast and hard, in a closet or someplace where there was a risk of discovery to heighten the mood.\n\nLike, say, a classroom.\n\nI'd need to help her up, even my cheap school desk too high for her; she'd sit there, legs swinging, and she'd lean carefully back on her elbows as she waited for me with her long lashes hooding her dark blue eyes. Her thong, I imagined, would offer no real obstacle at all; it'd be skinny enough that it barely covered anything anyway, and at the moment it would be no match for the red, puffy swelling of her turned-on labia, probably already pushed sideways by her own arousal.\n\nBy the time I got in there, fingers first, I doubted I'd even need to do more than nudge the thong aside, my hands brushing over her inner thighs on their way to the intense pink humidity underneath her skirt. She'd draw one of those shuddering feminine breaths as I got there, my fingertips grazing along her sodden inner lips and coming away sticky, trailing her juices. She'd sink lower on the desk, the skirt bunching up beneath that bubbled ass of hers, and I thought feverishly about what her skin would taste like if I ran my tongue up her sweaty leg.\n\nShe'd be moaning as I got closer, and then her breath would catch in her throat as, at last, my tongue made tentative, almost dainty contact with the dark red-brown flesh at the edges of her slit. There'd be a convulsive heave of her thighs, the muscles clamping my head as the sourly musky smell of her overwhelmed me, and then I'd dive the rest of the way in.\n\nThere'd be a long, whimpering sigh of relief as her body relaxed around me, her elbows surrendering as she carefully laid herself down across the desk; I'd have to get my hands up underneath her to hold her in place, clutching at the smooth skin of her hips, feeling her pelvis rock, and then we'd both ignore the logistics and focus on the way my tongue and lips were pleasuring her.\n\nFrom the outset she'd be a daring and sexy lover, vocal, responsive as a Ferrarri. She'd move a lot, I felt, those fluid young muscles shoving her vagina in a smooth, insistent rhythm against my face; no doubt she'd be a woman who knew exactly what she wanted from me, and who wasn't shy about claiming it. For my part, I knew, I'd be turned on as I'd never been, the teacher-student taboo driving me wild, the surpassing excellence of Lucy's body reaching deep into the lizard recesses of my animal brain, my dick harder than I'd ever felt it.\n\nSo I'd give her my absolute best, being careful not to ignore any part of that delicious little pussy. I'd start out slow and deliberate, flickering at various pieces of her, learning what made her shudder while I visited every inch of her crotch, asshole to wax-trimmed pubic hair, on an unpredictable schedule that would leave her breathlessly wondering where I'd go next. And then, finally, once I had her trembling and cursing me, once her thighs flogged around me and her hands gripped at my hair, once her juices were running like Yosemite Falls, I'd go in for the kill.\n\nI felt like I already knew right where her clit would pop out, how long it'd be: I'd curl my tongue tightly, clamp my mouth against her opening, and let her have it. She'd scream, tensing up, and I'd be relentless, my tongue driving around her pussy like a mini penis, my upper teeth scraping gently at a clit that, I was sure, would be poking out like a tiny missile. She'd be a fun woman to eat out, I knew, and the heavy smell of her would be everywhere; I imagined she'd be a copious leaker. I'd be smelling traces of her in my nasal passages for a week.\n\nThis would go on... well, five minutes? Ten? As long as I damn well wanted while her eager young body bucked and squirmed. She'd thrash through it all, tangy and sweet at the same time, her forgotten thong stretched alongside my face as I burrowed deeper.\n\nBy the end I'd be on by feet, bent way over her for better leverage, with her firm ass filling my hands, her body curled up in a heaving mass with me savagely eating her out. We'd both be groaning, her abs tense against my forehead, and it would be a simple matter to get my pants open, her body already perfectly positioned for the hot angry moment when my stiff dick flew out and trembled, marble-hard and sweaty, more than ready for me to simply straighten up and jam it into her. She'd shriek, but not in pain; no, she'd be so juiced up it would be like sliding my cock into a bowl of warm butter, all slick and messy and --\n\nAnd Shannon Boyle was looking quizzically at me from the doorway.\n\nWhat she saw was me, staring vacantly at a piece of candy with the biggest erection I'd ever had hidden imperfectly under my desk. \"You okay?\" There was concern there, but mostly hidden laughter; I had the disquieting notion she knew exactly what I'd been thinking about. \"You look sort of flushed.\"",
        "\"Oh. No, I'm fine.\" Shannon was wearing a dress today, tight and speckled with hearts; my hard-on would get no help from the sight of her as I tried to will it down. \"Just slept in, is all.\"\n\n\"Huh. I saw little Lucy prancing away down the hall; what did she end up giving you?\"\n\nThe fantasy of a lifetime. \"Just this card,\" I croaked, and the innocuous wording on the card was a godsend as Shannon slunk over to read it. My God; she was wearing fishnets, too; was the whole world out to make me stain my trousers this morning? I swallowed. \"Pretty harmless, as a matter of fact.\" My sweaty palm shook around the candy heart.\n\nShannon frowned, her pretty mouth slightly open. \"Not much,\" she agreed. \"No pussy pics, then?\" She laughed then, and put the card back down. \"Hang in there, Dave. I'm off to get some coffee before the bell rings. Want some?\"\n\n\"No thanks.\" Shannon made strong coffee, and I was already feeling queasy enough. \"Catch you later?\"\n\n\"If you're lucky,\" she grinned, a common response from her; she tossed her head back at me as she walked away, almost catching me staring at her athletic ass through the dress, rippling and swaying as she strode off...\n\nShit. I needed a woman desperately.\n\n* * *\n\nIt was called \"Augmented Professional Development,\" which was East Seaborne Memorial High School faculty slang for \"Getting Wasted on Friday After School.\" It appeared on the weekly agenda as APD, put there by a willing assistant principal who was happy to accept free drinks; this let participating teachers leave early on Fridays to get to the bar.\n\nIt was, of course, a totally dishonest scam. But the School Board hadn't figured it out yet, so nobody really cared.\n\nThe Valentine's Day APD was being held at Texas Vinny's Grill, a shoddily fake southwestern-themed place a few towns over with live music (on Tuesdays and Thursdays, though) and a karaoke machine that Gina, the unpaid APD Coordinator, often used to good effect.\n\nOr so I'd heard. I was not a usual APD participant, but the prospect of drowning my sorrows in $1.50 draft light beers was too good to pass up after the week I'd had. Shannon, designated-driving for Gina and Audrey, perked up as soon as I asked if I could come.\n\n\"I've been telling you for weeks you should come out with us,\" she gushed. She seemed genuinely happy about it, still with that elegant sexiness in her tight dress. \"I never pass up a chance to have a drink with my mentees.\"\n\n\"Well, thanks,\" I flushed. I was not yet in the habit of having my former teachers offer me drinks.\n\n\"I think Kathleen might be coming along. Kathleen Maurer? Teaches Spanish?\"<br>\n\n\"Sure.\" I had no idea why she'd thought of telling me that; I had no real relationship with the woman, except for a vague impression of extreme tallness. Maurer was the girls' basketball coach. Was Shannon trying to set me up with her or something? The prospect was odd, but I'll admit in my present condition I'd have welcomed any kind of hookup.\n\n\"She'll need the front seat, is the thing.\" Shannon was apologetic. \"I know you're taller than most of us, but you'll need to cram into the backseat. I hope that's okay.\"\n\n\"Please!\" I put both my hands up as if to block an attack. \"It's no trouble at all. Thanks again for driving.\"\n\n\"Don't get too excited,\" she replied dryly, rolling her eyes. \"There's a rotation. It's my turn.\"\n\nHer car was regionally famous, a battered Honda known for the used Kleenex visible on the passenger seat and for its stained upholstery. It smelled like dirty socks; Shannon really only used it for trips to her gym. I saw Gina Torrey already leaning against the trunk, her tiny frame giving off her usual air of challenging, aggressive energy. Her eyes widened behind her stylish sunglasses when she saw me. \"Well!\" she sang. \"Looky here. Finally got him to come out with us, eh Shan?\"\n\n\"Hi Gina,\" I said wearily. I was feeling sluggish and defeated after sparring with Lucy and her classmates that afternoon, forcing them through the English department's grotesque obsession with Steinbeck.\n\n\"He's in back,\" Shannon announced smugly. \"With you.\"\n\n\"Oh, is he?\" She eyed me. \"\"Hell, I'm not going to pass that up.\" I didn't like the way she was smiling, a greedy and cynical twitch of her petite lips.\n\n\"Gina usually fits just fine in the middle.\" Shannon slung her purse into the trunk.\n\n\"I fit just fine in a lot of places,\" Gina sniggered. I managed a smile, but by then Kathleen and Audrey were strolling across the parking lot, looking at me with curiosity. I felt like I was on display, and Shannon noticed.\n\n\"Don't worry,\" she smiled, giving my arm a quiet squeeze. \"They're very nice.\"\n\n\"It's Dave, right?\" Kathleen was a cool one, definitely, an Amazon with high cheekbones and a body pummeled by many years wrestling basketballs away from other peoples' hands. She looked vicious. Again, I felt a faint sense of worry; if I wound up going home with this one, by chance or design, she'd break me in half. \"We met at the orientation thing in August.\"\n\n\"Hi, Kathleen.\" She nodded, pale grey eyes flickering along my body, then slid into Shannon's worn passenger seat. Audrey was already opening the far door, and Gina gave me a swift hungry look as she minced past me and tumbled into the center of the smelly rear seat. I looked furtively across the roof of the car to find Shannon, smirking back at me not unkindly; she was enjoying this. She slipped me a broad wink, then sank down into her sweat-stained drivers seat, leaving me to worm my way into the seat behind Kathleen.\n\nI don't suppose I was terribly surprised that Gina was, to put it mildly, giving Audrey plenty of room. Her thigh, skinny and gleaming, waited under her skirt. I smushed my leg up against hers with a resigned \"Sorry.\"\n\n\"Oh, I'm fine.\" She repelled me, and not just because she wasn't my type looks-wise; Gina was the kind of amiable flirt who advertised her sexual availability as a matter of course, whether she needed to or not. Now she just stared boldly over at me, waiting. I wondered what she was expecting as Shannon jammed the key into the ignition.\n\n\"Seatbelts!\" she trilled, and I found the shiny buckle over my shoulder. Then I realized what sneaky Gina was waiting for, grinning so slyly.\n\n\"Excuse me,\" I muttered, for Gina's tiny butt was planted right on top of the seatbelt latch. She raised her eyebrows innocently.\n\n\"Yes?\"\n\n\"Umm. You're sitting on the... uh...\"\n\n\"Oh! Right!\" Gina giggled and moved about two millimeters toward Audrey, who still had more than enough space. \"Sorry, David,\" she purred in challenge. \"I just don't have any room.\"\n\nAnd that's how I found myself with Gina Torrey's warm, bony ass perched right on top of my clumsy hand as I groped blindly for the seatbelt thing. She grinned at me the entire time, delighting in my embarrassment as I reluctantly pushed my other hand underneath her wriggling little body, with no way to avoid running my fumbling fingers over all sorts of her most intimate bits and pieces. Not that she minded. \"Having some trouble finding the slot?\" she whispered, thoroughly enjoying this. \"Lots of men do.\"\n\n\"You guys ready?\" Shannon didn't wait for an answer, jerking the car back out of the space and whipping it toward the exit. I finally heard the click of my seatbelt and yanked my hands out from under Gina, only to feel her crash against the rest of my body as Shannon swerved, Steve McQueen-style, out onto the road.\n\n\"She's such a rotten driver,\" Gina whispered again, this time nearly sitting in my lap. Audrey was cracking up on her side of the car, and I felt my face grow red as I settled in for the humiliating ride to the bar.\n\n\"Do you mind?\" Kathleen wasn't waiting for a response either, her seatback shoving into my knees as she thrust it back. \"I need more legroom.\"\n\n\"We don't!\" Gina and Audrey were laughing openly now, and I suppose karma was happy that only one of the five of us was in misery during that trip.\n\nThe road wound along the sea for miles, skirting West Seaborne before Shannon hooked inland, slamming the tittering Gina back into me as we joined a short line-up of teacher cars all converging on Texas Vinny's.\n\n\"Wow,\" Gina sighed as we pulled in, the laughter still audible in her voice. \"Thank God. We're fucking crammed back here.\" I stared resolutely out the window, trying not to notice as her hair tickled the side of my neck. Her leg was strong and warm across mine, and despite my revulsion my dick was living up to its age and its recent inactivity; I could already tell, thankfully, that Shannon would be parked before Gina could feel me prodding her from below. What was wrong with me? I couldn't remember ever being so horny.\n\n\"Aww.\" Audrey's sarcasm stung me. \"And you two looked like you were having such fun. I think we're making a love connection back here, girls.\" Shannon and Kathleen were giggling in front, and I could feel Gina's eyes boring speculatively into the back of my head.\n\n\"He's a cutie,\" she observed, sounding like an anthropologist observing some sort of folk ritual. I might as well not have been there. \"Not quite my type, though. Besides, I'm a married woman.\" Out of everyone else's view, her hand suddenly shot straight down her side and onto my cock, its confident accuracy speaking to her vast experience of men's bodies: she knew exactly where my half-hard shaft would be, and her fingers went right to it. She gave a quick, harsh squeeze. \"Well, almost my type,\" she allowed. I felt her breath gusting warm across my scalp as she let go, and God finally heard me: Shannon parked.\n\nI went straight for the door handle, but Gina was murmuring into my ear. \"Sorry, David. No offense; I actually prefer smaller men. But if you can't find a woman here, let me know later tonight; I'll figure out something fun we can do.\" She was still laughing at me as my hand scrambled back underneath her ass to release the seatbelt, and then I was free; I got myself all adjusted, moving at hyperspeed, before Kathleen could get out of the seat in front of me. I caught a knowing smile from her as she brushed coolly past me to head for the entrance.\n\nAnd then there was the sympathetic Shannon, dimpling up at me as Gina unfolded herself. \"Sorry,\" she whispered. \"Think of it as an initiation to the APD experience.\"\n\nI glanced over at Gina. \"She's one of a kind, fortunately.\"\n\nShannon laughed, and I felt better already. \"She was doing a little more squirming back there than she needed to do,\" she nodded as we made for the door. \"How was it for you? Did the earth move?\"\n\n\"A hundred years ago, I'd have been duty-bound to marry Gina after that,\" I shrugged. \"I feel like I know her quite well now.\" Impulsively, Shannon grabbed my arm and chuckled.\n\n\"Well, if you think I can hold a candle to her, you can hang with me tonight,\" she suggested. \"My boyfriend's away for work, so I could use a hot date.\"\n\n\"How hot?\" I regretted it at once, but it came out automatically. I blushed as she squeezed tighter.\n\n\"My my! Aren't you forward!\" She waited while I opened the door for her. \"If you weren't my former student, I'd think you were hitting on me.\"\n\n\"Oh, never that,\" I stammered quietly, but I doubt she heard me as she sauntered into the bar, greeting other teachers right and left, and there I was doing one of those things I hated most: schmoozing. I'm a witty guy when I'm with people I know well, but throw me into a social setting like this and I'm hopeless. That's why Shannon found me alone about ten minutes later, nursing a Pepsi.\n\n\"Aw, fuck that!\" she exclaimed. \"Let me buy you a beer. What's your poison?\"\n\n\"Nah, I'm good with this.\" The idea of Ms Boyle buying me booze was still weird.\n\n\"Bullshit. You'll let me buy you a beer, or else I'll send Gina over to demand you do a body shot out of her armpit.\" I gaped. \"Oh, she'll do it too. I'm guessing...\" She frowned cutely, nibbling at her lower lip, \"something dark? A stout maybe? You seem like that kind of guy.\"\n\n\"Sure.\" Well, she had it right at least. Her holler toward the bartender yielded some sort of local microbrew, blessedly light on hops, and she lifted her seltzer water to clink glasses as she hitched herself carefully onto the stool next to me.\n\n\"To good times,\" she winked. \"And less trouble from Lucy Fucking Marsh.\" We drank deeply, and she raised an eyebrow. \"I'm sure I don't need to tell you this, Dave, but even if she doesn't calm down, you need to stay out of anything with her that even suggests impropriety. Like, never be alone in a room with her; that kind of thing. I'm sensing she can be a vicious little bitch.\"\n\n\"You're telling me.\" I toyed with my glass, debating about whether I should say more. \"She also gave me... well, it was a suggestive piece of candy,\" I finished lamely, and Shannon stared.\n\n\"What? Like a lollipop shaped like a dick or something?\" Her eyes were wide.\n\n\"No,\" I hesitated, and then I took a sip of beer, looked her in the eyes, and it all came out. All of it: the words on the heart, the fantasy, all of it. Shit, she was my mentor; what the hell else was she there for, if not to hear about my problems? Shannon listened, her lips pursed grimly, her eyes glittering occasionally, taking infrequent sips from her glass. And, when I was done, she sighed and looked aside. \"So,\" I finished, my voice low and miserable. \"What's next? What do I do next time I see her?\"\n\nShe pursed those full lips she had, and as I stared at her in profile I understood that, most likely, what I'd felt for her back in high school hadn't been lust. I'd been in love with Ms Boyle, though I'd been too young to realize it. She'd been my ideal woman then, a person I wanted to take care of and spend time with. And now here she was, six years later, and that small pointy nose dusted with freckles still made my heart race. Abruptly, I decided I was done feeling sorry for myself. \"Fuck it,\" I announced, draining the last of my beer and half-turning on the stool. \"Let's dance, Ms Boyle.\"\n\nHer active face quirked up into a smile, and she tossed her thick hair over her shoulder as she glanced sideways at me. Mischief glistened in her eyes. \"Huh.\" She shrugged. \"Glad you finally got that Lucy shit off your chest. I'd be delighted to dance with you, Davey Dole,\" and she was on her feet, smoothing her dress over those sleek thighs she'd found at the gym, and I smiled stupidly as I tightened my tie and offered her my arm.\n\nAt the outset, I'll say it: I'm no dancer. But neither was Shannon, so we didn't feel a lot of awkwardness as we swayed randomly to whatever contemporary pop nonsense they were spewing. \"The music leaves something to be desired, unfortunately,\" I ventured, but in reality I didn't even feel like speaking: Shannon Fucking Boyle was holding me, her arms up under mine, her teasing fingers resting along my shoulderblades. And, unbelievably, my own hands were on her: that softly-firm part of a woman where the ribcage ends and just before the hipbones jut out was under my sweaty palms, and I was in heaven.\n\nShe smiled up at me. \"Be honest,\" she replied, and her voice was a throaty murmur. \"Do you care?\"\n\nI smiled back. \"I'm pleased to be your date.\"\n\n\"I can tell.\" It wasn't a purr, exactly, but there was definitely something unexpected in her low voice, and then her hands were drifting down my back toward my kidneys and, thank God, the music changed, and she leaned back out with a big grin. I tore my eyes from her cleavage. \"Name that tune!\" she cried. \"It's one of my favorites.\" She was moving already, and I had a dim impression of an old music video from my earliest childhood, with lots of neon and singers with odd hair...\n\nNobody will ever accuse the Human League's Don't You Want Me of being the reincarnation of Mozart, but the fire in Shannon's eyes warned me that I should just go with it. So I did, and the synthesizers swelled and my heart beat faster and I felt Shannon's sweet body moving in my hands and I was right back in love.\n\nGoddamn. She was a coworker, and my mentor, and my former teacher, and she had a boyfriend anyway. This, I didn't need.\n\nBut the dance was moving along anyway, stuck in its own momentum, so I gave up and pulled her closer and we moved together. I felt her cheek land on my chest, found a moment to hope I wouldn't get hard, and abandoned myself to the situation.\n\nOne song, then another, and even after they stopped playing 80s songs we kept on moving together. At some point Audrey came up, drunkenly blathering something in Shannon's ear, but she brushed her aside and we kept swaying. Then there was Kathleen, still cool with a strange bearded hipster in tow, telling Shannon with quiet satisfaction that she wouldn't be needing a ride back. I glanced at them as they left, wondering whether the hipster would survive; Kathleen was at least a foot taller than he was.\n\nBut then the floor started getting crowded as the evening wore on, and the two of us found ourselves shunted further and further toward the edge as better dancers invaded our space. We wound up at a small table in the corner, nursing some drinks in unexpectedly comfortable silence. This was all moving strangely, I thought, with weird undertones that I'd never learned to expect from a night out with a lady. But, still sick and tired of the strain of the past week, I refused to care. I leaned back against the little banquette seat and looked over toward Shannon, wondering what she'd want to do.\n\nAnd it was the shock of my life when she narrowed her eyes, then nodded slightly as she seemed to come to some sort of decision. And then she scooted right up beside me, took my right arm, and draped it across the back of the seat so that she could nestle against me, her shampoo filling my nostrils as her head came back against my chest, and I found my hand drifting down to rub her shoulder and, just like that, I felt her body relax as she sighed.\n\nThat's about the point where my libido woke back up.\n\n\"Thanks for being my date, Dave,\" Shannon was saying dreamily, and with a sense of thrilled terror I realized she had laid her hand on my right knee. Christ, but that meant her elbow was within maybe half an inch of where the head of my penis was starting to quest through my boxers like a worm trying to find its way to the surface. \"I've always liked you. I'm glad you ended up as my mentee.\" Fingers were squeezing at my knee; how was this possible? Shit, was she drunk?\n\n\"I...\" What could I say? Well, I supposed the truth couldn't hurt at this point. \"You were my favorite teacher, Shannon. Still are.\" Her fingers spasmed around my knee.\n\n\"Ah!\" She tipped her head sideways to give me a playful smile. \"Why?\"\n\n\"Why?\" So maybe the truth could hurt, after all. I could hardly tell her I'd looked forward to her class solely so that I could watch her breathe. That I still felt about the same whenever I saw her. So I looked away, only to see Gina twerking against some sort of clean-shaven stud, both their mouths hanging slackly open, their eyes lidded heavily.\n\nShannon Boyle was no idiot; naturally, the pause told her everything she needed to know. The playful smile turned warm, caring. \"Aww. Poor thing.\" She pulled away from me slightly, twisting to look at me more closely; I moved my hand off her shoulder, though I didn't sense she was bothered by it. There she sat, twisted around, her fine body straight-backed and perfect in profile. She waited until I dragged my eyes back to hers, and then took a few seconds to read what they had to tell her. \"Ah. I see.\" She said it very quietly, almost gravely. Then she nodded to herself, her eyes very wide. \"Still, huh?\"\n\nI sighed and tipped my head back. \"Yup.\" The ceiling was stained and in dire need of new paint; I knew because I was looking at anything but her. \"Still.\" But I felt her eyes studying me, and she didn't move her hand. And after a few more minutes of silence, she got up and went to the bathroom, and I was left sighing into my half-finished beer as Gina Torrey just about had sex on the dance floor.",
        "* * *\n\nThe ride home was subdued and even anticlimactic; that's what happens when two out of five of your carpool mates hook up and the other three don't. Not that Audrey was interested; her husband Andy sounded like a great guy, and of course Shannon had her guy too. Leo? Leon? Something like that. And then me, of course; I'm not a guy who hooks up in bars, never had been. But at least it meant I got the front seat this time.\n\n\"So, Gina.\" Audrey seemed to need to fill silences; it was her thing. \"It's like she's not even married.\"\n\nShannon shook her head. \"I don't ask. Either he's a very understanding guy, or he's just oblivious.\" She shrugged. \"They've got a kid, too. It's weird.\"\n\n\"Wow.\" Audrey was staring out the window. \"I've never understood why I'm friends with her. She fucks everything in sight and doesn't even seem to care. I'm just not sure how anyone can be like that.\" She sighed heavily. \"It's weird, is all.\"\n\nShannon glanced at me, then I saw her grin wryly at Audrey through the rearview mirror. \"You should keep her away from Andy, then.\"\n\n\"I know, right?\" She tapped me on the shoulder. \"I mean, she's not even all that hot, is she Dave?\"\n\n\"No!\" It probably came out more harshly than intended, but what the hell? I'd had an emotional evening. \"I guess I can see how she's sort of sexy, but I don't find her attractive at all.\"\n\n\"Good for you!\" She sat back. \"You're a good guy, Dave. What's your type? Want me to set you up with anyone?\"\n\nOf course, Shannon looked instinctively over at me, but I was careful to stare straight out the front window. \"Nah, I'm good. Thanks, though.\"\n\n\"I'm taking you home, right?\" Shannon was talking to the rearview mirror again. \"Not back to school?\"\n\n\"Yup.\" Audrey wasn't quite wasted, but she was close. Andy would be going to the school to pick up her car tomorrow, no doubt. \"Thanks, hon. I owe you.\"\n\n\"Sure.\" The Temples lived in a quiet suburb a few miles inland, and I insisted on walking the poor swaying counselor to her own doorway. \"Whoops,\" she tittered as she dropped her keys. \"Guess I need to sit down awhile.\"\n\n\"It was a fun night,\" I said diplomatically. \"Thanks for letting me come out with you guys.\"\n\n<br> \"Anytime, sweetie. You're fun to have around.\" She aimed the key carefully at the lock, and scored a hit on the second try. \"See you Monday.\"\n\nAnd then there was nothing left but a stilted, awkward ride, alone with Shannon, as she took me... where? Three beers in, I'd probably be okay to drive back from school, but it wasn't worth the risk: first-year teachers can't get caught with even a whiff of a DUI, not if they want to become second-year teachers.\n\nI was about to ask Shannon to just take me back to my place when she looked over at me, smiling. \"So, Dave,\" she began lightly, \"you never answered Audrey's question. What is your type?\"\n\nI gazed levelly back, trying to figure out whether she was serious. The normal me would have passed the question off with an embarrassed joke, flushed, and finished the ride in silence. But after what had happened on that banquette at the bar? \"Teachers who have boyfriends.\"\n\nHer tongue poked out at me, lizardlike. \"You're no fun.\" She was plugging her phone into the sound system, firing up her playlist. \"Audrey hates my taste in music, but you seem more polite than she does.\" Satisfied, she hit PLAY and darted a quick glance back up at me. \"Or maybe you just like the same music I do.\"\n\n\"What are the odds?\" I muttered, then cringed slightly as the song started. More synthesizers. \"It's great!\" I lied.\n\n\"Liar.\" She flicked the smelly little car into drive and headed off, her head bopping placidly along to OMD or Erasure or whatever this was. I gave her a few minutes to ask me where she should take me, then cleared my throat.\n\n\"I'm over on Third Avenue, by the way.\"\n\n\"I know where you live,\" she replied calmly, sweeping along in the wrong direction. \"Can you stay out awhile longer, though? Or do you have a better date to get home to?\"\n\nI thought about it, the night rushing past outside as we descended toward the shore. \"Don't you?\"\n\n\"I told you,\" she shrugged absently. \"Leon's away for work. I think he's on some oil platform off the coast of the Maldives, or somewhere.\" She seemed totally at ease with whatever it was that was going on. \"I like to get to know my mentees better outside of work, though, and this seems like a golden opportunity.\" She finally looked back over at me, her eyes sly. \"But I feel like I know you pretty well already.\"\n\nI blinked. \"I mean, well, what happened in the bar...\"\n\n\"What happened in the bar happened,\" she interrupted firmly. \"And it's out there now, and you can't take it back. And I wouldn't want you to, anyway.\"\n\n\"No?\"\n\n\"No,\" and the playful smile was back now. \"Girls like being told they're pretty, even indirectly.\" She put a hand to her hair, raking it back, and then let her mouth fall open. \"That was what you meant, wasn't it? That awkward silence of yours? You meant you thought I was pretty back then, and that you still do?\"\n\nI thought about trying to walk it back, but why bother? 'No,\" I said, just slightly bitter. \"Not pretty. Gorgeous.\"\n\n\"Ooh!\" She shook her head and paused for a stop sign. \"I like where this is going.\"\n\n\"Where is this going?\" I asked her, point-blank. I was no kind of flirt, after all. Her dark eyes glittered back out of the blue glow from the dashboard.\n\n\"You just go ahead and keep complimenting me,\" she winked. \"Then you'll see.\"\n\n\"No, I mean, where are we going?\"\n\n\"Don't you know?\" She turned down a quiet street, toward the marshes. \"I told you, I like to drink with my mentees. I couldn't drink at the bar, so...\" It was a nice neighborhood, quiet, filled with small houses that had lots of windows. She took a final right turn, the inky night ahead full of sawgrass. \"I'm taking you to my house, Dave.\"\n\nI swallowed, excited and vaguely frightened. \"Oh.\" There seemed little more to say.\n\n\"You can compliment me some more, we can have some laughs... watch a hockey game...\" She shrugged with exaggerated carelessness. \"You might just find me complimenting you back, too.\"\n\n\"Why?\" For some reason that struck her as funny; Shannon was laughing as she pulled up to a little grey place with no garage. It backed up to the marsh, near a path where we used to do our cross-country runs.\n\n\"Here we are,\" she announced, stepping delicately over a pile of mail on the floor. The place was incredibly tidy, and very beachy. It was the home of a sophisticated and mature woman, and I had no idea what I was doing there. \"Make yourself at home, Dave. I'm dying to get these shoes off; mind waiting while I change?\"\n\n\"No, uh, not at all.\" She turned on the TV for me, then grinned at me as I sank awkwardly onto a loveseat. I was left to watch her ass again as it retreated into the gloom of the unlit house, toward some stairs in the corner. The place was all pale wood and pieces of coral arranged on little tables, the carpet a dingy beige; walls in light blue.\n\nThis was going to an unexpected place. There was no way in hell, I believed firmly, that it would be anything more than a friendly but firm conversation about boundaries. Shannon was an incredibly nice lady, far too kind to make me feel bad, so she'd tell me gently but earnestly that, while it was very flattering that I'd had a crush on her back in high school, it wouldn't be appropriate now, and that we really should just be friends. Then we'd wait to get sober, she'd drive me back to pick up my car at the school, and I'd be left with copious regrets and what would obviously wind up as a furious masturbation session.\n\nThe game came on, some Canadian team she cared about against some American team she didn't. I fidgeted as I heard her shuffling around up there, slamming a closet door. There was a rush of water in the walls as she flushed. It was a few minutes more before I heard her skipping easily down the stairs to emerge from the darkness of the living room; the only lights she'd turned on were the ones in the kitchen. I forced myself into a studied casualness as I turned my head to see what she'd changed into: yoga pants and a sweatshirt. Pink bunny slippers. Her hair was frizzed by its trip through the sweatshirt.\n\n\"Much better,\" she announced as she slipped into the kitchen. \"Feel free to take your tie off, Dave. I was surprised you left it on in the bar, actually.\"\n\n\"Me too,\" I admitted. Truthfully, I'd forgotten I had it until it was too late. I frowned, thinking of a witty comment, then gave it a try. \"When you look as good as I do, you've got to maintain a certain standard.\"\n\n\"That's true,\" she replied, sucking at her lower lip as she peered into a cabinet. \"You always look nice. What'll you have? I warn you, I'm a bartender who tends to err on the side of too much fuckin' booze.\" She laughed.\n\n\"Well then. Rum and Coke?\"\n\n\"Coming right up, sir.\" She busied herself with two large bottles. \"You can never have too much rum.\" Unsure whether she expected a response, I turned and watched the American team score a goal. She was over in another minute with two large glasses. \"Nor too much gin, actually,\" she mused, curling down into the seat beside me. She drew her legs up under her, moving with a feline gracefulness, and held out my drink. \"Feel free to tip your wait staff,\" she grinned.\n\n\"I don't think I've got anything smaller than a twenty,\" I replied; she'd been taking my other minor flirtations pretty well, incredibly enough. Might as well keep it up. Shannon was making me feel very comfortable.\n\n\"I'd take a twenty,\" she giggled. \"Or two.\"\n\n\"Forty dollars? For one drink?\" I gave a dry laugh. \"That'll be the day.\"\n\nShe fixed me with an odd stare as she slowly took a sip of her gin and tonic. \"You haven't tried it yet,\" she pointed out quietly. \"Besides, we're a full-service establishment. I can do more than just make cocktails.\"\n\n\"I'll keep that in mind.\" The drink was powerful, the rum washing straight into my stomach at about twice the volume I was used to. She was grinning at me as I brought the glass down.\n\n\"See?\" She winked. \"Told you so.\" She had seen the little grimace cross my face. \"Just let me know if you want more Coke,\" she said dismissively.\n\nI put my glass down on the table, carefully landing it on a coaster. \"I think you're just trying to get me drunk, Shannon.\"\n\nShe knocked back another sip, still staring intently. \"And what would be so wrong with that?\" she asked quietly. \"You're over 21. You're a big boy.\" She set her own glass down, then arched her back. \"Nothing like getting out of your work clothes at the end of a long week,\" she mused, then looked quickly up and down my body. \"If you want, I could find some of Leon's stuff for you. A shirt definitely, a pair of sweats?\"\n\n\"No, I'm fine.\" I made myself take another sip. \"Wouldn't want you to have to do any more laundry than usual.\"\n\n\"You don't really care how much laundry I have to do,\" she pointed out confidently. \"You're just not sure how far to go here.\"\n\nI looked at her for a long moment, trying to focus. \"How far to go in what way?\"\n\n\"In any way,\" she said quietly. \"In every way.\" She glanced at the TV. \"You're not watching the game, are you?\"\n\n\"Not really.\" She smiled again, playful once more.\n\n\"Can I make a confession?\" she said suddenly, winding thick hair around her finger. She didn't wait for me to nod. \"I liked dancing with you at Texas Vinny's. And I felt pretty comfortable sitting with you afterward.\" She leaned forward a little. \"And then you went and ruined it all by telling me you were into me.\"\n\n\"Well.\" I managed another sip, a bigger one than I'd meant. \"I wouldn't say that's exactly how I put it.\"\n\n\"No,\" she agreed, \"but that's what you meant.\" We both knew she was right, so I just looked at her some more. She hadn't taken off her makeup, but then she never really wore much anyway: just enough color on her lips and eyelids to emphasize how full her mouth was, how large her eyes were. She was a woman who knew how to make herself attractive. \"I meant what I said, though. I wouldn't ever want you to take any of it back.\"\n\n\"Good,\" I babbled before I could think anything else through. \"Because I don't want to.\"\n\nAnd then she smiled, a full and uninhibited smile that made her skin crinkle alongside her eyes. \"Why, Davey Dole!\" she chided. \"I do believe that was another compliment.\"\n\nI tried to think quickly, to be witty. \"No,\" I tried. \"It's actually just the same one as before.\"\n\n\"True, I guess. You could always try a new one.\" Her eyes were dancing now, the drinks forgotten on the table. The Canadians either scored a goal or took a penalty; neither of us was paying any attention.\n\n\"You first.\" This was becoming easier, the alcohol and the effect of her vibrant personality pummeling my self-consciousness. Almost without realizing it, I reached up and undid my tie.\n\n\"Well then.\" She pushed her lower lip prettily out, looking sideways into the darkened living room. Her whole body was relaxed, the slender legs still drawn up underneath her, and I noticed she didn't seem to have left her bra on, though it was hard to tell with the baggy sweatshirt. I felt myself tremble slightly. \"Okay,\" she went on slowly. \"How about this. You're an easy guy to cuddle up with on a restaurant bench.\" I felt myself raise my eyebrows, and then for some reason I nudged things further. This whole situation seemed completely surreal.\n\n\"Just on a restaurant bench?\" Greatly daring, I rested my arm casually across the back of the loveseat and wondered if she was sending the message I was beginning to hope she was. \"Or other places too?\"\n\n\"How should I know?\" She stopped playing with her hair. \"I'd have to try other places.\" Her smile grew broader as I nodded casually toward my raised arm, and she giggled as she launched herself across the loveseat toward me. Her movements were completely fluid, totally under control; her strong legs flipped her whole body around, and next thing I knew there was a firm, yoga-panted butt wedged solidly in next to my right hip, her sleek body settling comfortably into my chest. I held myself still as she adjusted herself, giving little jerks and wiggles until she was calm, and then she nodded to herself. \"Good.\" A pause, then she reached impulsively up for my arm, pulling it down until my hand rested back on her shoulder, dangerously close to where her right breast had to be waiting beneath the shapeless sweatshirt.\n\n\"Better. If you want your drink, I'm happy to grab it for you, Dave.\"\n\nI was already struggling to keep myself under control. \"Is that part of your forty-dollar full service?\"\n\n\"My!\" Her body shook slightly as she chuckled. \"This is a side I'd never have suspected from shy little Davey in my history class.\" She stretched her neck, looking up at me. \"So. I think it's your turn again.\"\n\nBy now, even a guy as socially awkward as I was could glimpse where this seemed to be going. I couldn't believe my luck, but I figured I should just go with it. I had no idea what she wanted; I thought she would maybe, just possibly, let me give her a slight kiss whenever she dropped me off. But, regardless, coming up with compliments for her was easy. I'd been thinking of them for six years now. \"Every single time I see you,\" I said quietly, \"it makes my day better.\"\n\n\"Ooh!\" she squealed softly. \"I like that.\" She nestled more deeply. \"I like that a lot, actually.\"\n\n\"And this? Right here?\" I took a deep breath, then let it out. \"It's everything I wished for when I was in your class.\"\n\nI thought I might have gone too far then, for she said nothing. But then I heard the sigh, and her hand was back on my knee, and her breathing seemed to quicken. After awhile, she spoke up. \"You know how teachers get a little bit attracted to students,\" she said, not asking. \"Well, I won't lie. I always felt just a wee bit disappointed whenever you were absent.\" She squeezed. \"I liked seeing you in class.\"\n\nMy erection was swift and sure, exploding to life with a mind of its own, snaking through my pants until my boxers restrained it. I gasped. \"Something the matter?\" she asked innocently. \"I wouldn't want to make you uncomfortable here...\"\n\n\"Oh, no. It's fine.\" I could smell her, that rich smell of shampoo and body wash and a long day in front of the classroom, with the gin on her breath rising thinly above the rest.\n\n\"Because, I'm pretty sure,\" she went on, turning so that her left breast came to rest on my shirt, her beautiful face now just a couple of inches away from mine, \"that if I wasn't your mentor, this kind of situation would be slightly inappropriate.\" Her hand ran from my knee, up my leg, past my dick and onto my chest. She gave no sign that she could tell I was hard, but Shannon was a grown woman with plenty of experience: she had to know. \"As it is,\" she added, \"it's just... good mentorship.\"\n\n\"Excellent mentorship,\" I agreed, my thumb stroking her shoulder. I sought a distraction. \"You looked amazing today. That dress...\"\n\n\"Shit, that thing was tight,\" she sighed, stretching out her neck. \"I almost had to call you upstairs to help me unzip.\" A finger found its way into my shirt front.\n\n\"No thanks,\" I said immediately. \"Isn't that Leon's job?\"\n\n\"Yes,\" she agreed smoothly, \"but he's not here. You are. What, is the idea of unzipping my dress all that horrible?\"\n\nDecidedly not. \"Actually, I think it's something I could get used to,\" I started to say, but by that time her smiling face was closing the distance, and her generous lips were opening just a bit, and holy fucking crap, Shannon Boyle was kissing me.\n\nIt had never really occurred to me to think seriously about what it would be like to kiss her; there had never been any possibility of it happening, I thought, so the sensation overwhelmed me. She tasted like gin and coffee, her lips just the right combination of softness and firmness as she gave a small, squeaking moan and bore into me, tipping her head sideways to get her little nose past mine. Go! screamed my brain, and without a second thought I stuck my tongue between my lips and licked softly at hers; she opened wide immediately, and without further ado we sucked each other in, tongues flailing, saliva lashing into each other's mouths.\n\nHoly shit. She wasted no time steering her body up and over mine, her legs bunching and flexing as they brought her around and against me. I found my hands guiding her smoothly in, resting along her sides as she maneuvered onto my lap; one of them had already found a route underneath the shapeless sweatshirt, gripping at the firm pale flesh beneath as our tongues continued to wrestle.\n\nAt some point I grew aware she was gasping, or maybe it was me, feverishly trying to get some air as we made out with a desperation that, I think, surprised us both. She ended up kneeling on the cushions, her tight lovely body bridging over mine as she straddled me, sitting along the tops of my thighs; my hands found themselves up under her sweatshirt, running over the rolling muscles of her back as she slurped backward, a string of spit connecting us before she sat up and looked down at me. There was passion in her eyes, but not just that; I saw there warmth, and sweetness, and a gentleness that made my heart melt.\n\n\"So,\" she said, needing to clear her throat twice before she got it out, \"did you wish for that, too, Dave? When you were sitting in my class?\" She moved calm, lazy fingers toward my buttons. \"Or was it just snuggling you were after? Because, you know, we could just as easily sit here and cuddle and finish the hockey game.\" She had two buttons undone, her other hand moving inexorably into the gap, playing with my chest hair. \"I do like seeing my team win...\"\n\nBut she was grinning again, looking exhilarated as I pulled her back down, holding her sweet, sweet body tight against mine as I devoured her again, and her mouth opened wet and willing around mine. Some part of my brain was still wondering why: why was she doing this? With me? But the other part of my brain, the urgent red part, was too busy playing with her, my tongue running into and out of her mouth with a forceful rhythm, my hands kneading her skin beneath the sweatshirt as my hips bucked subconsciously up toward her. And when she felt that, she gave another breathless little squeak into my mouth.",
        "\"Mmm!\" She pulled back again, staring at me with a wild, challenging look in her wide eyes. \"That was interesting, Dave. Nice little move, there.\" She looked straight down, and even though I'd guessed she'd know I was hard, and I knew she'd have to find out eventually, the moment when she bowed her head and searched greedily for my cock had me so self-conscious I nearly looked away.\n\nIt didn't take her long. It couldn't have; my penis is not terribly small. She knew immediately what she was looking at. \"Why Dave,\" she cooed. \"You do like me.\"\n\nThere's no way for a man to be nonchalant about a hard-on. Not a man like me. \"Well, uh, I told you so,\" I replied, subdued. My throat had gone dry, my body shivering with the reality of what was happening here.\n\n\"You did indeed,\" she went on absently. I finally looked down at her; with her legs spread wide, the yoga pants might as well have been shrink-wrapped on. She wasn't hiding anything more than I was; her labia were clearly outlined, the slit between them just a hand's breadth from where my cock surged obscenely down my leg. We paused a moment, the two of us breathing hard but calming down after trading tongues; our hands rested lightly on each other's hips. At length, Shannon cleared her throat again, but her voice was still smoky as she spoke up.\n\n\"So, here's the deal,\" she said slowly. \"As your mentor, I think it's my duty to look out for your well-being. And I'm afraid that, with all the alcohol you've consumed tonight, I really do feel it'd be irresponsible for me to let you drive anywhere.\"\n\n\"Huh.\" My own voice was strained. I couldn't stop looking at her mound. \"As my mentor.\"\n\n\"Right. I'm just being professional.\"\n\n\"Sure.\" Her skin was trembling under my fingers, and I couldn't believe it: she was nervous. Or excited; either way, it wasn't anything I'd expected. I looked to the left, past the TV as it continued droning relentlessly on, to a couch against the wall. \"I appreciate it, Shannon,\" I croaked. \"I'll be fine on the sofa.\"\n\n\"Bullshit,\" she snapped at once, still staring hard at my dick. \"No way. You're my guest. I insist that you take the bed.\" And then she was blinking, a crafty grin flashing past her teeth as she swept her eyes up to my face. \"Well, part of the bed, anyway. You're not a student anymore, Dave. We can be adults about this, I'm sure. I'd trust you to be a gentleman if we go upstairs.\"\n\n\"Now why would you do that?\" I held my breath; I was becoming pretty confident that my flirting was going well here, but this was such an unbelievable development that I couldn't trust my own mind.\n\n\"Well,\" she said pompously, her fingers nibbling at another shirt button, \"surely trust lies at the base of any mentor-mentee relationship, I would think.\"\n\n\"Ah.\" I couldn't stop my fingers from flickering up her sides under the sweatshirt, feeling the muscles there, and she sighed. \"And so I take it you'll be a perfectly respectable lady.\"\n\nShe laughed breathlessly, really more of a snort. \"You'll find I'm an excellent hostess,\" she murmured, her finger running rhythmically up and down my stomach above my belly button. \"Remember: full service is something I pride myself on.\" She dragged herself backward, her feet finding the floor as she got to her feet. The forgotten drinks and the hockey game might as well not have existed. \"I never did give you the full tour of my house, Dave. If you'd like, I can show you where you'll be spending the night.\"\n\nI swallowed, my cock rampant now, my brain finally realizing this was actually going to happen, amazingly enough. I was dazed. \"Just in the interest of safety, of course. To keep me out of trouble.\"\n\n\"Of course.\" She stood there, legs spread, her hands on her hips, and I saw her eyes waver back down to my crotch. \"I insist.\"\n\n\"Well then.\" She stepped back until the coffee table halted her, and when I got up I was a mess: my shirt most of the way undone, a huge tent in my khakis, my mouth smeared with her spit and lipstick. \"Lead on, Shannon.\"\n\n\"Yes sir,\" she winked, the grin tightening in self-congratulation, and then she was moving around the loveseat toward the stairs. I followed, my eyes glued to where the yoga pants outlined the smooth, muscled curve of her ass; I guessed she hadn't bothered with underwear. She passed the kitchen, skirted the corner of the dining room, and was on her way up the stairs without a backward glance.\n\nShe obviously knew I'd be staring at her butt the entire way up the stairs. Why wouldn't I? After what we'd been doing on the couch and what seemed to be coming up next, there was no reason not to. So I took it all in; from where I walked behind her, her thighs were just barely narrow enough for me to make out her pussy from behind. I felt my mouth fall open, the glory of her ass staring me right in the face; certainly no underwear, not even a thong that I could detect. Each cheek was a perfect, rounded bubble, muscular but not too lean, enough in itself to stir the penis of any man not already hard as fuck.\n\n\"There are two bedrooms up here,\" she was saying calmly over her shoulder, \"but we just use one of them for storing shit. And for Leon's fishtank.\" I caught an eyeroll. \"So there's only the one bed, I'm afraid.\"\n\n\"Gee.\" I reached the landing and followed her down a short hallway that overlooked the living room, the hockey game still mindlessly on. \"However shall we manage that?\"\n\n\"It's a problem,\" she agreed with faux seriousness as she turned abruptly through a doorway to the left. \"The only thing I can think to do,\" she pondered, \"would be to share the bed. Being careful, of course, to stay on our proper sides.\"\n\n\"Always.\" I was lightheaded as I passed into Shannon Boyle's bedroom, with its huge windows overlooking the salt marsh; dizzy, and not from the stair climb. The place was airy, high-ceilinged, with a bathroom opening to the right; she'd left the light on in there. The place smelled like washed sheets and a faint scent I'd noticed in other feminine bedrooms, a mix of soap and powder and body odor and perfume. Her tight white dress lay on the floor near the bathroom, with a matching grey bra and panty set nearby.\n\n\"Sorry the place is such a mess,\" she breezed; that night's clothes on the floor were the only items out of place, and she made no effort to pick them up. \"When Leon's away, I tend to get... dirty.\" She turned to face me as she reached the corner of the bed, her eyes sparkling in the dim light. She stood poised, breathing evenly as she stared at me. \"You ought to just go ahead and take your shirt the rest of the way off, Dave,\" she advised with a faint smile. \"You seem to be a bit disheveled.\"\n\n\"Can't have that, can we?\" In response to her studied calm, I could feel my heart trying to hammer out of my chest, my skin flushed and sweating. \"I'm not sure I brought proper, uh, sleeping attire,\" I blundered on, forcing my hand to stay steady as I undid the last few buttons and started to shrug my shirt from my shoulders.\n\n\"I can find something of Leon's,\" she shrugged, then cocked her head and grinned. \"I usually sleep naked, Dave. Are you okay with that?\"\n\n\"Well, uh, customs of the house...\" She was already lifting the sweatshirt, and I stopped talking as she exposed her lean, smooth abs, her ribcage, and finally the breasts I'd been waiting more than six years to see, never having any kind of realistic idea I would ever, ever do so. They were what I'd always hoped: nicely sized round handfuls of firm flesh, bobbing now as the sweatshirt scraped up over them, with small dark nipples that drew a gasp out of me as they settled back into place, high on her chest as the sweatshirt came sweeping the rest of the way off. I felt myself gaping as she stood there proudly, her back straight, and smiled at me with that conquering smile women get when they know they've got you. She let me squirm awhile longer.\n\n\"Oh, I'm sorry. Am I distracting you?\" Her smile was wide and content; she was very satisfied with my reaction, as well she should be. I felt like a novice monk facing the Second Coming. She looked at my upper body, pursing her lips critically. \"You're a little scrawny, Dave, if I'm being honest. You always were, you know.\" She took one very deliberate step toward me. \"I'd love to get you into the gym; I'd whip you into shape tout suite. I'd consider it another kind of mentoring.\" And then she was right before me, nearly a head shorter, the two of us half-naked and looking seriously at each other as though trying to memorize every detail. \"Which side of the bed do you want, Dave?\"\n\nI swallowed. Her nipples, a red so deep and mysterious as to be almost purple, reached out for me. I stared helplessly. \"I, uh, I guess the side by the door?\"\n\n\"Sure thing.\" She reached nonchalantly up to brush back her heavy hair, the nipples dancing again like windchimes. \"Eyes up here, Dave. You're not being the respectful gentleman you promised you'd be, you know.\" She was grinning. \"Do I need to put my shirt back on?\"\n\n\"No! Jesus fuck, no!\"\n\nShe laughed her rich, bell-like laugh. \"Go sit down on the bed, Dave. You seem a little tense, but I've got an idea.\" Her dimples were in full effect in the soft light from the bathroom, and I moved as if in a trance to take my seat, my legs hanging over the edge of the bed. It was a king-size; I'd never been on a bed to large, even in hotels. It felt like sitting on an aircraft carrier.\n\n\"Now then,\" she purred, sliding around to stand before me. I caught my breath as I raised my eyes to her face, skipping over her symmetrical lycra-covered pussy, past where the yoga pants became smooth muscular flesh with just the barest hint of softness, past where the bathroom light picked out her sternum, flanked by those two perfect breasts; her face, radiant and with freckles chasing themselves across both cheeks, looked serious. \"I'm going to suck your dick, Dave. I want you to relax and enjoy it. When you feel like cumming, just go ahead and do it; I won't mind.\" She licked her lips slightly, her fingers flexing. \"The goal here is to calm you down and get you nice and mellow. You want to feel nice and mellow, Dave?\"\n\nHer teasing little grin encouraged me. \"Hell yes.\" She knew I was nervous; there was no point in pretending. We were way past any of that.\n\n\"Good.\" And then my dreams moved into a higher gear, her big gorgeous eyes sinking down as she went to her knees. Her hands found a comfortable spot on my thighs as she rubbed my legs slightly. I let them part as she forced her way gently between them, and then she craned her neck to maintain eye contact. \"Might want to lean back, Dave. I like to have full access to my men.\" She giggled.\n\nMy God. I'd thought I couldn't get any harder; I'd been wrong, seeing the passion spread slowly up and over her face from her flushed chest to the eyes so firmly skewering mine. I felt like half my blood volume was charging toward my dick. The passion, I knew with a sudden flash of insight, came from power: she knew I was hard, and she knew she was the reason, and it was getting her off.\n\nI let my head drop back onto the mattress; I knew I'd benefit profoundly from her arousal, and in a sudden surge of excitement I wondered what I'd done to deserve this. The ceiling was distant, full of weird angles and shadows from way out in the harbor, but now was hardly the time for nautical speculations. She was yanking with businesslike greed at my fly. And when I tipped my head up to look down my hollow chest at the longed-for sex goddess crouching between my legs, I saw nothing but a thorough professional: a genuine prostitute could not have undressed me more efficiently. And I mean that as a compliment.\n\nThough I was careful not to tell her.\n\nMy belt came whisking out of its loops, her left hand coolly holding my cock through the pants to keep it out of the way as her right maneuvered the buttons holding the pants together. With no wasted motion, both hands then made the short trip to my waistband, hooking both pants and underwear out of the way. Her expression had been neutral, almost clinical, but now she glanced up to see whether I was watching her; once we made eye contact, she grinned with her mouth open, and arched one eyebrow. \"So let's see if you're just as scrawny everywhere,\" she joked, already knowing the answer; her left hand had been firm on my junk. She knew what she was getting.\n\nI debated about whether I should let my head flop back and wait for Shannon to work her magic, but in the end I decided to keep my head propped up: you only get one chance to see a woman react to your naked cock, and this was a night I wanted to remember forever. Her experienced fingers prepared me for the unveiling, a couple of them digging slightly into my boxers to pull out my cockhead; she let it rest against my belly, then tightened her grip, arched her back to get her body out of the way, and stared intently at where she was about to free me to the cool air of her bedroom. She examined the rubber duckies on my boxers. \"Very manly choice of underwear, Dave. You ready?\"\n\n\"I think you can probably tell,\" I managed, my voice sounding strangled in my ears. She winked, which I was starting to get used to, and then she had my clothes most of the way down my legs in a single brisk motion, pushing them down past my knees and then raising her body to kneel on the mass of boxers and khakis. I was locked into place.\n\nHer smile and her eyes both widened as she looked down at my dick in the shadows. \"Why Dave!\" she gushed quietly, her face twisting into a mischievous smirk as her fingers came to rest on my hairy thighs. \"I didn't know you cared.\" Truly, the penis before her was obscenely, even hideously extended, as long and firm as I could ever remember it being, vibrating like a guitar string as it stretched up from my lank little nest of pubic hair. It looked like an artillery piece, pointing ready for war, waiting impatiently. She examined it indulgently, dipping low to study my scrotum. \"I'm not even sure where to begin.\"\n\nI felt something was called for here other than me gasping theatrically; time to get in the game. There was clearly no point in letting myself be awkward any longer. So I drew my elbows back and propped myself up and, at last, allowed myself to smile. \"I'm sure you can figure something out, Shannon.\"\n\n\"I'm sure I can.\" She hadn't even touched it yet, and already the sensations were overwhelming; in particular, I was nearly shivering as I felt the smooth skin of the sides of her breasts rub dryly against my inner thighs. \"Don't you worry about me, kiddo. I'm game.\"\n\nThen it happened.\n\nThose big, shining brown eyes met mine one more time, she made a very Lucy-looking kissy face, and then she kept watching me as her mouth dropped open toward my ballsack. I felt stillness, then her warm moist breath, then finally her tongue, reaching delicately out to plant its tip right up into my crotch, just shy of my asshole. Then she swept, wet and graceful, up around my balls, her tongue flattening, moving slowly enough not to outrun her supply of spit; she finally arrived around the top, where shaft met sack, and then she was gliding deliberately up and over every vein, every tendon, every nook and cranny, her shoulders rising, her hands trembling with excitement.\n\nI finally let my head fall back again, sighing in disbelief, when I saw her tongue arrive at my head, then pause while she crawled up over my groin to bring her lips down over my straining dick, and so I lay there and felt like I was melting into the comforter as, with a slick slithery noise, I entered her mouth and the sucking began.\n\nIt felt like heaven. I mean, I've had blowjobs before, but... I'll never know whether she was just really good at it, or whether it was me: I'd been so invested in Shannon Boyle for so long. She was my oldest crush, and having her sucking my cock could have been a disappointment that would never live up to my dreams. Or it could have been the most profoundly breathtaking experience of my life.\n\nAnd, so far, it was the second one. I lay there like a victim of a bomb blast: stunned to insensibility; shocked to be in that situation; profoundly grateful, too. The smacking and slurping of Shannon's steady mouth, the ticklish whisper of her wavy hair across my skin, the gentle tightening of her fingernails over thighs or balls or stomach; she was letting out occasional moans, too, and they sounded genuine. I was gone, lost on a red-pink cloud, my senses operating at their highest pitch.\n\nBut not for long; there was a painful sense of dilation, the ceiling seeming to stretch away from me, and I felt my orgasm come looming toward me like the monster out of some child's closet, and just as menacing. Good Christ, it had probably only been, what, three or four minutes? There was no way I could even think of cumming so early. \"Gahh,\" I grunted, curling myself upward as I shook myself out of the intensity of Shannon's skilled tongue, and as I twisted off the bed I saw her: my dick snaking firmly past her dark lips as she looked hard at me, her eyes now blazing as her nimble fingers plucked at my scrotum, then dipped playfully lower to play near my asshole.\n\n\"Shit, Shannon,\" I gasped, trying to dig my butt into her bed so that I could pull my dick out and maybe, possibly, preserve myself for even three or four more minutes, salvaging a little of my pride. She wasn't having any, though; she knew at once what was happening to me, and I saw her distended mouth twitch out into a smile as she bore down on me, slurping and gagging as my head nudged the back of her throat, the nasty choking sounds to out of character coming from the serene, ever-cool woman I'd been so in love with for so long.\n\nI was not a high school student anymore; I had no business cumming so early, but as I felt her tongue lap insistently at my balls, her nose leaking snot into my pubes as she clamped one of her hands around my ass with all her wiry, gym-toned strength, the pleasure peaked and peaked and peaked again, the wave of semen threatening like the growing pressure behind a breached dam, and when at last I heard her laugh wickedly around my dick, my tightening scrotum telling her fingers all they needed to know, it was game over.\n\n\"Jesus Christ!\" I cried, flopping back against the sheets, shaking like a rattlesnake's tail as I shot my sperm helplessly down Shannon's throat. She'd been swaying, but now she crouched still and tense, one hand on my shaft while her lips pulsed steadily just behind my head; those eyes of hers still pierced me, and I remember thinking that in that moment, there was nothing in the world I wouldn't do for her.\n\nWe don't really ever know what kind of people our coworkers are in their private lives; still less our teachers, but even allowing for that uncertainty and my own youthful crush I never would have dreamed of Shannon's competence as a dicksucker. She'd known precisely how to get my load, and now she was taking it down with no more difficulty than she'd have squashing a cockroach. I even got an impression of slight boredom from her, like she was already thinking ahead to the next way in which she could toy with me; an impressive amount of self-control, actually, given the quantity of semen she was currently processing.\n\nI lost count, but there had to have been four or five full loads, even before the inevitable trickly ones that come out at the end. My hips, tense and heavy, now eased back down onto the bed, the stringy muscles of my legs relaxing under her caress. Shannon waited, still sucking gently, and then she backed slowly off my slimy dick, letting me see every inch as it emerged shiny from her luscious mouth, before planting a soft kiss on the head and rocking back on her heels.\n\nFor a moment we both just breathed; panted, rather, but she recovered faster. A maniacal fitness routine will do that for you. \"So,\" she said hoarsely, \"I guess that'll take the edge off a bit, hmm?\"",
        "\"Fuck,\" I gasped back. \"I'm sorry. I feel like a junior higher.\"\n\n\"Great! That means you'll be able to pop right back up again in a few minutes, huh?\" She laughed, tossing her head sideways as she swept her hair into some kind of order. Her breasts still jiggled between my thighs, the nipples firm and pointy now. \"I'll say this, you taste good.\" Her tongue, such a lively thing of such unguessed talents, slipped out and licked her lips.\n\n\"I just should have lasted longer,\" I began, but she shut me up with a gentle smack to my balls.\n\n\"I told you,\" she crowed, crawling up over me, her mouth wide in a triumphant grin, \"just go ahead and cum. Remember the goal, kid; nice and mellow.\" She cleared her throat, still working to get down the last of my semen. She laughed, resting a hand on my chest now as she laid alongside me, her eyes smoking. \"Jesus, Dave. You weren't going to last anyway. All that tension with Lucy, and the fact that you've been pining for me for years, and all the rest of this... come on. You didn't stand a chance.\" She leaned over and kissed my forehead. \"Don't worry. As it happens, I was looking for a quickie out of you anyway. This should clear you out for later.\"\n\nI blinked. \"Later.\"\n\n\"Oh yes.\" She was stroking my chest, smiling softly, her delicious body still gleaming in the light from the bathroom. \"Remember, you're here all night. Now we can, you know, relax.\" Her lips found mine, the kiss sensual and grown-up and tasting like dick and cum. I didn't really mind. \"We're not through with each other yet, dumbass. Hell, I've even still got my pants on.\" She frowned. \"And you're still wearing your shoes.\"\n\n\"Ah.\" She was right, obviously. I felt deliciously, languidly sated, buried within the tousled sheets with a sense of profound gratitude, ready to take her on again. I rolled my head sideways, feeling the foolish grin as it spread across my face, getting used to the fact that my favorite woman in the word had just blown me epically. \"Thank you.\"\n\n\"Don't mention it,\" she said, smooth and sexy and still in control. \"Happy Valentine's Day.\"\n\n* * *\n\n<br> We rested after that, a rain squall hissing in the sawgrass and rattling against the windows. She made me take off my shoes and pants, then she stood up and looked down at me, almost detached, as I lay naked across her bed. Without another word, she slid her nail-gnawed thumbs into her waistband and confirmed what I'd already figured out: no underwear. The yoga pants peeled off to show me the tight, perfect pussy I'd been dreaming of for years, trimmed close; actually, I thought as I looked more closely, it looked like her hair was growing in.\n\n\"I shave for my boyfriend,\" she explained self-consciously as she saw where I was looking. \"This is, what, a week? Week and a half?\" She shrugged then, regaining her poise with a slight effort. \"It'll probably leave you all scratched up, but you won't care,\" she predicted confidently, and then her sleek legs were bringing her around the other side of the bed, and all I could do was watch in admiration as her ass came into view, as perfect as all the rest of her, strongly shadowed by the bathroom light.\n\nI wasn't sure how to ask the next question, nor whether I even should, but I sensed she wouldn't mind. \"How long you been dating him?\"\n\nShe shrugged as she pulled the sheets back to get into bed. \"About a year? He's a troubleshooter, so he leaves unpredictably and stays away indefinitely.\" She sighed, wedging herself into her pillow, then looked over to find me shaking my head. \"What? A girl's got needs, Dave. And you,\" she finished pointedly, \"shouldn't be complaining.\"\n\n\"No, no; it's not that,\" I protested. \"No. I just wouldn't ever have guessed you were like this.\" I frowned, then shrugged. \"It seems weird to me that my students won't realize how I am, either. Like, to me, it's no big deal; I know who I am. But they don't. It's just not something I've thought about before.\"\n\n\"Shit. Try looking at it from my side,\" she chuckled. \"Imagine if, six or seven years from now, you end up in bed with Lucy Marsh. Like, really in bed. Not in fantasyland.\" Shamefully, I felt my dick give a little lurch, but she was right; it was a strange thing to think about in the real world. \"That's what I'm going through now, Dave. I used to give you a grade; now I've just swallowed your cum.\" She half-shrugged.\n\n\"Is that weird?\"\n\nShe thought about it. \"No, actually. Not as weird as it should be.\" And then she was moving, turning onto her side with her eyes sparkling again, a moving lump beneath the sheets warning me that her hand was coming for my dick. \"It'd be weirder with other guys, I think.\" Her face grew cunning as her palm found me, still gummy from her spit and my semen. \"It'd definitely be weird with, say, Craig Metcalfe.\" Talented fingers tickled at my balls, and she smiled gleefully. \"Thing is, I never really thought about you sexually at all when you were a student. That probably makes this a little easier.\"\n\nI sighed again, still wondrously relaxed, now totally comfortable around her. She was going to get me erect again, and soon; after that, I'd be reaching the pinnacle of my sexual ambition, albeit a little late: I'd finally be screwing Ms Boyle. The rain kept up, and as I felt my penis harden again I realized I might never, ever have another night like this. The thought was a little painful, but not painful enough to keep me from turning toward her to look once more into those dancing eyes as I let my own hand reach out for her body. She watched me calmly, her hand warm around my dick as she waited to see what I would do; I caught the flutter of her eyelids, along with the merest gasp, when I made contact with her pussy.\n\n\"Well played, Dave,\" she murmured as she raised her left knee to give me access. Her vagina welcomed me with a generous squishing noise and an overwhelming sensation of vibrant heat; I became aware that I was holding my breath as I let it out, long and slow, when my other fingers found her lips. \"Mmm,\" she hummed, low and sexy; her hand tightened around my hardening cock. \"Watch out, kiddo. You're going to get me going here.\"\n\n\"Feels like you already are.\" Two fingers, then part of a third had no difficulty in getting into her, and she scoffed as she flexed her pussy around me, mocking my efforts.\n\n\"Shit. You ain't seen nothing yet.\" I was hard again, her hand sliding up and down with a slight, calculated twist down by the balls; for my part, I was rubbing softly at the sides of her labia, one finger steadily curling up to find her G spot. Her delighted gasp let me know when I found it. We lay there for a few minutes, saying nothing, just masturbating with dumb, goofy grins on our faces, the heat growing under the sheets.\n\n\"You know, Dave,\" she said casually, still throaty and with a slight sheen of perspiration coming out on her perfect breasts, \"I think I've thought of a way to get you to forget about that little whore of yours. Lucy.\"\n\n\"Have you?\" I slowly brought my other hand up to her right breast, my thumb playing with the little nipple there. She grinned. I was smelling the rich, wild smell of cunt by now. \"Do tell.\"\n\n\"Well,\" she went on slowly, working to keep her voice under control, \"I figure you'll forget all about fucking her if I let you fuck me instead.\" Her fingers tightened around my shaft. \"In the interests of proper mentorship, you understand.\"\n\n\"Mmm.\" She tasted salty, acrid when I rolled closer and nibbled at her neck. \"That sounds... reasonable.\"\n\n\"Not just reasonable, Dave,\" she chided, still husky-voiced. I felt the slickness across her wrist where my overexcited dick was leaving a trail. \"I don't think you understand what I'm saying. I'm telling you,\" she said carefully, as if speaking to a student, \"that I'm a goddamn sexual carnivore. Once you've had me, you'll forget about that little bimbo.\"\n\nI was kissing up her neck. \"What little bimbo?\"\n\n\"Exactly.\" I could hear the grin in her voice. \"You just lie down now, Dave. I hope you're ready for me.\" She scooted closer, the bed huge around us, and I rolled languidly onto my back; she was my mentor, after all. I figured it would pay to follow orders.\n\n\"Any, uh, ground rules?\" I asked. She smiled warmly as she gathered herself to throw her leg over me.\n\n\"You'll find I'm an easy woman to please. I like getting eaten out, but if you want to do that I'll need to get rid of that fucking douchy facial hair.\"\n\n\"Ouch.\"\n\n\"The truth hurts, but not as much as a strip of Velcro rubbing along my pussy. Other than that?\" She shrugged as she knelt beside me and looked down, smiling like a hunter stalking her kill. \"I don't fake it, but I doubt I'll need to. You know what I mean?\"\n\n\"Um.\" Her confidence overwhelmed me, but I got over it as soon as she snaked her long, shapely leg over me and got herself atop my thighs. \"Actually, I was talking about condoms.\"\n\nShe laughed, her eyes crinkling. \"Aren't you sweet! No, Dave; thanks, but I've got all that taken care of. You just do whatever you feel like doing.\" She blinked at me as she settled down, the smell of her aroused pussy now dominating me. I looked down my body to see her stubbly groin nudging against my balls with my penis once again a long, skinny rod pointed up off my belly. It was like I hadn't just blown a load in her mouth. \"You, uh, you don't think you'll be faking an orgasm, Dave, do you?\" she teased, eyeing my dick. \"My mouth should have bought me a nice long ride up here. Pressure's on, bud.\"\n\n\"Don't I know it.\" Gone was my nervous anticipation: I was eager, totally excited to get on with this. I felt confident. \"You might just wind up on the bottom, Ms Boyle.\"\n\n\"Ooh!\" She smacked my chest, her hands trailing back down to rest comfortably on my cock. \"Big talk, from such a shy boy,\" she mocked; she lifted my dick, holding it right up against her body while she started to breathe harder, moving her butt in tiny circles over my legs; I felt her pussy drooling onto me. Her whole upper body was pinkish in the dim light. My cockhead reached just above her belly button. \"Mmm...\" she sighed, playing with it; she moved it over herself, back and forth like a metronome, and she was right: her bristly pubes rasped on the underside of my shaft. \"Can I ask you a personal question, Dave?\"\n\nI laughed loudly. \"You're kidding. You're using my penis as a windshield wiper, and you're concerned about an awkward question?\" I arched my back a tad, poking my dick a little higher. That made Shannon giggle.\n\n\"How many girls have you been with?\"\n\nIt didn't require much thought. I was not the world's most experienced man. But I wasn't sure whether she was serious, or flirting, or teasing. \"Girls, or women?\"\n\n\"That,\" she purred, \"is the right answer, Dave. I'm proud of you. Women, then. Don't be offended, sweetie, but I'm guessing... not many? Five? Less?\"\n\n\"Less.\" I felt embarrassed, but I trusted her. I didn't sense she was trying to humiliate me.\n\n\"Thought so. Dave, do yourself a favor: watch my hips move while I'm fucking you. Do you know why?\"\n\nI was intrigued, but I nonchalantly reached up to cup her breasts, now hot and damp with sweat. \"Are you sure I can't watch your boobs?\"\n\nShe laughed again. \"Well! The shy boy's getting uppity.\" She bent down, swift and sure, and smothered my lips in a tight, slippery kiss. \"The way a woman moves her hips when she fucks, Dave, tells you a lot about whether she's into you.\" She straightened back up and then tossed her head back, the waves of her dark hair settling down her back. \"When a woman really feels close to you, she'll take you inside her and rock back and forth, her hips just grinding. See?\"\n\nShe demonstrated, laying my penis down and settling over it, a greedy grin spreading across her face as she smothered my dick right in between her labia. I gasped and twitched. \"Like this,\" she whispered, and then she did something I would never have thought such an intelligent, polite woman capable of: she ground across my cock like a first-class whore, like a pole dancer at a high-dollar club. She seemed to have a motor in her pelvis, swinging back and forth machinelike, her bright red slit never losing contact with my cock. I groaned. \"See?\" She was breathing hard, holding her upper body steady while she worked. \"I'll be doing this to you soon, Dave, but you'll have your dick in me. Does that sound like fun?\"\n\n\"Jesus, Shannon.\"\n\n\"Relax, hon; I've got something else to show you.\" She was enjoying this immensely, even getting off on it; I could see she was barely holding it together. And me? Shit. If she hadn't drained me into her mouth an hour ago, I'd have already been wiping myself. She straightened her thighs, kneeling high, the gap between her legs shiny with her own discharge. My penis looked like someone had upended a bottle of honey over it. \"But if she's more into getting off, like if she just needs an orgasm and you're the lucky bastard she's riding, she'll hop up and down.\" Grinning craftily, she reached down to hold my dick up, and then came plunging straight down onto it, no warning at all; she just took me all the way in, immediately, her vibrant red pussy sucking my dick in like a well-lobed piston, and then she popped right back up.\n\nShe was laughing and gasping with excitement as she rose. Holy fuck. I'd just seen my cock disappear into Ms Boyle! \"Like that,\" she managed, breathing hard, her inner labia quaking, \"only over and over and over again. Rinse and repeat, Dave.\" She looked into my face, but her eyes were far away. \"A woman rides you like that, it means she's a freaky little bitch. But not emotional; she's just into sex.\" Then she shook her head, bringing her eyes back into focus, and stared straight at me. She wasn't smiling now, her expression feral. \"Which way do you want my cunt first, Dave?\"\n\nWell. That certainly did it. I'd been eager before; now I nearly attacked her, lunging up to smear my chest against hers and grapple her into a sloppy kiss, teeth crashing together, tongues colliding as we both yelped like startled foxes. I held her close, probably bruising her as I clutched down at her ass and up at her shoulder blades, but in fairness she was just as horny; no sooner had my lips found hers than she began squirming, humping frantically to get her pussy lined up with my waiting cock. But I was holding her too tightly, straitjacket-tightly, and after awhile she swore in frustration and slid her arms free, planting them firmly on my ribcage to force me back down.\n\nI was a sweaty, disheveled mess as I landed, in no condition to control anything as she rocked forward, her pussy swooping toward my face while she groped behind her for my penis. Her face was downright scary: she was a predator, a carnivore with a proud tight body and a voracious sexual appetite, and she was in the mood for my dick. So she took it, her eyes blazing into mine as, entirely by feel, she steered her body onto my cock and landed with a grunt, impaling herself in a single slick motion.\n\nI gasped as I felt that heat again, squeezing viselike around me with a sickening splattery sound. We both cried out again, but by then she was in action, bracing her hands on my ribcage, looking down and over her shoulder as she fucked. Firm muscles tensed under my hands as her ass and thighs rippled powerfully, driving her thrashing body up and down with brutal force. I took awhile to get my breath back and do anything more than just lie there; Shannon was lost, a naked figure of wiry power and sheer passion, pushing herself for all she was worth as she gave me an overheated masterclass on the raw art of the steady, passionate fuck.\n\nAt length I snapped out of it and started to participate, gauging her bounces and thrusting up into her as best I could, then clamping both my hands onto her hipbones to keep her steady so that she could give her arms a rest. And she took advantage at once, her right hand flashing toward her clit while her left swept back to smack against my leg; she was bent backward now, my dick churning her as she kept up a rhythm that soon had my abs burning.\n\nSomeone was grunting desperately, in harsh time with the slapping as our bodies slammed together, but I swear I couldn't tell if it was me or her or both; not that it mattered. We were both completely in the moment, me trying to drive myself up and angle my dick to the spot where my finger had made her gasp earlier, she strumming herself with complete concentration while she got herself off. Her body rocked from side to side, the hard lumps of her abs flashing in and out of the shadows as she thrashed, and I watched in growing wonder as she began to get herself there. My dick disappearing into her stretched pussy was the most incredible thing I'd ever seen.\n\n\"Shit,\" she grated, clench-teethed, writhing with decreasing focus as her orgasm struck her, and then she was gone, a thick cry choking in her throat as she came. I felt her pussy spasm tight around me, pulsing frantically; her whole body shook, nipples taut and shuddery, and after a few more seconds of this a wide, beaming smile split her face.\n\nI was entranced; as far as I knew, I'd never given a woman a genuine orgasm before. I remained underneath her, my dick still clasped firmly inside her soaked vagina, and kept my hands lamely on her hips as she got herself slowly under control again, wiping her mouth self-consciously on the back of her hand. \"Holy fuck,\" I said, awed. \"You okay?\"\n\n\"Do I look okay?\" No, she looked radiant: her heaving skin glowed with sweat and the pink flush of her exertions, her hair all over the place as her body rode me slowly. \"I don't think you need to worry about me, Dave, but it's nice of you to ask.\" She was drooling a bit as she came back forward, abs flexing, to lean over me. \"You and I are going to get along really, really well,\" she winked, and then she was kissing me, her hips waking back up, grinding slickly over my body. We sounded like a mop getting wrung out.\n\nAnd that's when she started slithering, back into pole-dancer mode, only this time my cock was wedged inside her instead of lying against her. It was one of those magical, emotional moments: we'd both had our orgasm, and now we were just being close to each other, staring into each other's eyes, smiling like a pair of adolescents while we fucked slowly and deeply.\n\nIt felt suspiciously and frighteningly like love.\n\nBut eventually she brushed her hair back from her face, swept her tongue through my mouth one more time, and spoke gently into my ear. \"My legs are getting a little tired, Dave,\" she lilted. \"Think you can take over for awhile?\"\n\n\"Yes ma'am,\" I panted, and she straightened up, looking at me with her eyebrows raised, waiting to be told where to go and what to do. I frowned for a moment, my penis twitching slick and hard above me, and then I decided. \"On your knees, Ms Boyle,\" I said softly, and she grinned again, the picture of harsh, raw sexiness as she obeyed, her ass rising slowly as she teasingly arched her back, staring through her hair at me the entire time.\n\nIt was the single most intensely sexual sight I'd ever seen, right up until a couple seconds later as I watched my dick spear into her, her ass smooth and damp and perfect in my hands, and grunted once my pubes tickled her asshole. She sighed. \"You feel good back there, Dave,\" she told me quietly, but I was already watching, mesmerized, as I pulled myself out and then went pushing back in; vaguely, I was aware that she was busy trying to figure out how she could brace herself for me, but that was her problem.\n\nHer pussy, somehow loose and tight at the same time, clung to my shaft; our combined juices rolled slowly down her legs as I gave her everything I had. Once again the obscene, rhythmic slapping of sex filled the room. \"Mmm,\" Shannon muttered into her pillow, looking back at me with a smirk. \"This is fun.\"",
        "\"You should see it from my end,\" I grinned back, but I was taking it easy; we had all night, after all.\n\n* * *\n\nI was comatose when the early sun streamed weakly in, my wrecked body lying crusty and vague in a sticky puddle that smelled of starch. Parts of me were glued to the mattress as my eyes slowly opened to the sight of Shannon, grinning at me, bent over with her hands on her knees as she kissed me on the cheek. \"Hey, Dave!\" she chirped; she seemed fresh as a daisy. \"I'm off to go work out for an hour or so. In case you're wondering when you wake up, I haven't fled to complain to the principal about you.\"\n\n\"Shit.\" My mouth tasted like Shannon, which was wasn't ideal first thing in the morning. \"What the fuck time is it?\"\n\n\"It's almost six. I'm late,\" she went on apologetically. \"Make yourself at home. Hey, when I get back, I'm going to need a shower...\" She smiled evilly, the last thing I saw as I rolled over onto the cleaner side of the bed and descended back into blissful unconsciousness.\n\nI was still there sometime later; only the sun had changed, high now and blazing brightly. The slam of a dresser drawer somewhere jarred me awake. \"Wha?\"\n\n\"Morning, sunshine!\" Shannon sang. I squinted and saw sweat, and tight lycra workout clothes clinging to her body, her whole being glowing with energy and exercise. She pranced around the room humming, as happy and content as I'd ever seen anyone. \"Time to get up, buddy. This place smells like a strip club, and you and I are two big reasons why. Want to come take a shower with me?\" She reached down and whipped the sheets off me, leaving me naked and sluggish in the bright sunshine. \"Wow! You look even skinnier with the lights on,\" she giggled.\n\n\"Don't mock me.\" I scratched at my ass. \"It's too early.\"\n\n\"Bullshit. It's after eight already.\" She shook her head at me. \"Pathetic. Look! Your dick is, like superglued to your pubes.\" She grabbed me, and without warning she ripped my penis free of the dried nastiness of the night before. I yowled and shut my eyes. And, of course, I started getting hard again. \"Christ, Dave, stop being such a bitch,\" she chided, studying my penis closely. \"I never got a close look at you last night. I'm curious about whether --\"\n\nSilence.\n\nIt lasted a few seconds, and I cautiously opened my eyes. Down below I saw Shannon, her mouth wide open over my erect dick, peering at it with her eyes bulging. She was staring at the side of my penis.\n\nThe right side.\n\nThe side with the pumpkin-shaped birthmark that showed whenever I got hard.\n\nThe side I'd printed out in full color on a six-year-old valentine I'd left for my teacher.\n\nSlowly, her eyes came up to meet mine. They weren't so easy to read now. "
    ],
    "authorname": "Voboy",
    "tags": [
        "teacher",
        "student",
        "blowjob",
        "cunnilingis",
        "mentor",
        "co-worker",
        "fantasy",
        "masturbation"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/how-to-be-a-good-mentor"
}
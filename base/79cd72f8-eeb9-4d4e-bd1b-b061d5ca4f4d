{
    "title": "The Best Medicine Ch. 05",
    "pages": [
        "This story is a bit wordy and fairly long, so if you are looking for immediate gratification, you might want to look elsewhere.\n\nThe following story is a work of fiction. Any resemblance between these character and events and any real person or events is strictly coincidental . . . and pretty darn impressive seeing as it is a science fiction story. Do not reproduce or copy this story without the consent of the author.\n\nIn my magical, mixed-up world, characters don't worry about STDs or unwanted pregnancies except occasionally as a plot device. The author encourages the practice of safe (and hopefully satisfying) sex.\n\nWhile this is a science-fiction story, it may at different points contain sexual behavior that might fall into other categories. You can rest assured however that there will be NO depictions of Non-Consent, Mind Control, or Incest for any purpose other than as plot devices, and certainly not for sexual arousal. Anything else is fair game.\n\nThe following story is based in the same world as \"To Protect and Serve.\" While this series can stand alone, reading the afore mentioned series would be helpful. \n\nProofread by \"Cristalball\"\n\n--------- ------------------\n\nThe members of Joker's Wild had made good time, and were well into Tennessee when the woman they had been protecting held Farmer's satellite phone in her hand, nervously staring at the keypad.\n\n\"Are you sure you want to do this?\" Farmer asked.\n\nVanesse nodded. \"I don't want to go blundering into his territory with all this on our heels, and he might be able to help. I'm tired of this, and the sooner we get to safety, the sooner that I can figure out what's going on with Trina and the sooner I can avenge what happened to her.\" Her eyes rolled skyward, then back to Farmer. \"Okay,\" she said sarcastically, \"the sooner that we can get around to it. Trina's being a bit bitchy.\" The Princess winced. \"Okay, stop with the headaches! We talked about this.\"\n\nFarmer chuckled. Vanesse's conversations with herself were becoming increasingly fun to watch, especially when Trina made the Princess aroused or even climactic. Being possessed by your best friend, newly appointed lover, and personal bodyguard was not easy. Farmer handed over the satellite phone, which was already ringing.\n\n\"Hello? Is this my mysterious, untrained necromancer?\" came a familiar voice.\n\n\"How many untrained necromancers do you know?\" Vanesse asked. \"And if you say 'Including you? One,' then save it. Even I've heard that one before.\"\n\nWell if you're going to steal all my best material, what can I do for you?\"\n\n\"Lillian, I need to come clean with you. About me.\"\n\nThere was a pause on the other end of the line. \"Has something happened?\"\n\nIt didn't take much for Vanesse to bring a few tears to her eyes, thinking about how Trina had looked broken and bleeding in the snow. \"My friend . . . the one who was wounded? She was killed.\"\n\n\"I'm so sorry,\" Lillian replied. \"What happened?\"\n\n\"We were attacked by bounty hunters, except they weren't trying to rescue me. They were trying to kill me.\" Vanesse paused, and a calm feeling came over her. Trina was trying to give her a boost. \"My name is Princess Vanesse Bellethial, heir to the elvish throne. I am requesting sanctuary in the lands of your lord, Lord Shane Stapleton.\"\n\n\"I'm sure you'll understand my skepticism, but can you prove that you're the Princess? We've had a great many --\"\n\n\"Lillian, you know it's me. You've probably suspected since day one.\"\n\n\"Yes, but there's a difference between ME knowing, and Lord Stapleton being able to take action.\"\n\nVanesse wracked her brain, trying to come up with some way of convincing someone she had never met that she was who she claimed to be. In the meantime, she explained her situation. \"I was living up in Alaska, where I was captured. I was rescued by Farmer, the alpha matriarch of Joker's Wild.\"\n\n\"I've heard of her. Is that the woman who called me the first time?\"\n\n\"Yes.\" Vanesse covered the phone and looked at the werehyena. \"She's heard of you.\"\n\n\"Who hasn't? I rock!\"\n\nVanesse rolled her eyes, then talked into the phone again. \"We could not go public that I had been rescued, because there were already bounties out to have me killed rather than captured. But yesterday, my battle-dancer was killed . . . Trina was killed by a bunch of werewolves with guns and a helicopter and some insane damn vampire who bit her and then broke her --\" Despite the knowledge that Trina was somewhat safe inside her mind, Vanesse let out a sob. She hated thinking about what happened.\n\n\"Vanesse,\" Lillian said soothingly, \"I believe you. Lord Stapleton is going to need some kind of proof, though. Is there anything you can give me that could help?\"\n\nA memory flashed across Vanesse's mind, but it was not one of her own. She was looking through someone else's eyes at Vanesse's mother, who lay in bed holding a bawling infant and looking as proud as an elf could look. The person who's gaze she was sharing looked over at Vanesse's father and grandfather, who stood nearby with looks of joy on their noble faces. \n\nThe Queen held up her daughter and handed her to the King, who cradled the child and professed love and adoration to the little pink creature. Then Vanesse's grandfather, the Shepherd took a newborn Vanesse and stared into her eyes, commenting about how feisty she was. He smiled like a grandfather should, and for a moment Vanesse did not resent him for his absence. He had loved her. Then, he handed her to a pair of arms attached to the woman who's vision she shared. Trina. The Prince listened to a firm, young voice give the new Princess her Word that she would always protect her.\n\nVanesse was smiling, then realized that she had not spoken for quite some time. \"The Shepherd,\" she blurted. \"If Lord Stapleton could get a hold of him, he could pass on a message that would confirm it was me.\"\n\n\"Which is?\"\n\n\"Tell him that on the day I was born, Trina gave her word to me. He'll understand, and he's the only one left alive who would. Please hurry.\" Vanesse rattled off the directions that they were taking, just in case something happened. Lillian promised to look into it, then they hung up.\n\n\"Nice story you told her,\" Farmer said. \"About us rescuing you and all.\"\n\n\"You have to understand elvish politics. Technically, nothing I said was a lie.\"\n\nAlani looked over, obviously puzzled. \"How so?\"\n\n\"Well, I was captured, but I consider my time in Alaska as my captivity, with my uncle acting as the warden. You did rescue me from that captivity, and the part about not being able to go public with what happened out of fear for my life was true.\"\n\n\"Remind me never to get involved in elvish politics,\" Farmer said, feigning a headache of her own. \"It sounds positively confusing.\"\n\n\"That's my life,\" Vanesse said, her voice wistful and soft. \"They didn't teach me how to help people, but I know how to lie. And someday, I'll be the Queen of the liars.\"\n\n\"You don't sound all that happy about it,\" Farmer said, placing her hands on Vanesse's shoulders. \n\nVanesse tried to smile, but it died halfway up her face. \"I envy you a bit. Yeah, you have responsibilities, but you always seem to be having fun. You love your life.\"\n\n\"Yes, yes I do. But there have been some rough spots. I've lost more than a few gang-members, gotten into some damn ugly fights, and woken up next to some men and women that made me wonder what the hell I was thinkin' or drinkin'. You know what always helps?\"\n\nVanesse shook her head.\n\n\"I find something to laugh about. Elves lie, vamps drink blood, wolves hunt . . . hyenas laugh. Because if any given moment is gonna be my last, I don't want to spend it crying.\"\n\nVanesse wiped her eyes. \"I just don't see very much as being funny these days. You'd think maybe I could. I mean, my best friend in the universe is alive and living in my cerebral cortex, but --\" She stopped when her body began to fidget. Trina was getting uncomfortable. \"Stop it!\" she told thin air, then grimaced. \"I wish we just had telepathy or something.\"\n\n\"You'll work something out. So you've got a second chance with Trina, in more ways than one. You've got a kick-ass, hotter-than-hell escort all the way to Atlanta, so what's not to smile about?\"\n\nVanesse sat down. \"Farmer, what if I don't WANT to be Queen?\"\n\nThat one stunned Trina into no long messing with Vanesse's body.\n\nFarmer's face scrunched up a bit. \"Huh? Why wouldn't you want to be Queen? Isn't that what this is all about?\"\n\n\"Yes, and that's the point! My parents were killed because they were the King and Queen. I'm being hunted by people who want to 'save' me or kill me, all because of this stupid game that my uncle, my grandfather, and someone else are playing. With my life! Trina died . . . she died and now has to share my body instead of having her own life, all because of these horrible elvish political games. My whole life was a shadow of what it should have been before you showed up and rescued me, and it was because . . . dammit,\" she finished, unable to vocalize her frustration. She felt a warmth in her chest and some tension ease from her muscles as Trina worked from within her to calm her down. Make her happy.\n\n\"Do you want your uncle to be King?\" the werehyena asked.\n\n\"No. And that's the trap. The elvish people get someone in my uncle who really doesn't care about most of them, or me, who isn't fit to lead a parade, much less a kingdom.\" She raised her hand to ward off an objection. \"It's true. My uncle taught me to lie, not to lead. And I just let him.\"\n\n\"You have what? Twenty years before you're supposed to take the throne? You have time to learn. You've got time to go find out what your people really need.\"\n\n\"And what if it turns out they need a stronger monarch than I can be?\"\n\nFarmer cocked her head. \"I think you're underestimating yourself. But if the time comes and for whatever reason you don't think it's what you want . . . well, cross that bridge when you come to it.\" Then a random thought crossed her mind. \"Hey, when this all blows over, you're welcome to ride with us for a while.\"\n\nJack's and Alani's eyes shot open, and Doreen almost ran the RV off of the road. \"What?!\" they all said at once.\n\nVanesse blushed. \"I'm flattered, but it doesn't seem like I'd be all that welcome.\"\n\n\"Oh, that's not it,\" Jack said quickly. \"It's . . . uhm --\"\n\n\"What Captain Eloquent here is trying to say is that we've just never had a non-hyena ride with us before,\" Alani explained. \"I've never even heard the boss offer.\"\n\nVanesse was staring at her Walmart shoes. \"I . . . thanks, but I don't want to be a bother. I mean, what would I contribute? My background in drug sales and distribution is about as thin as my experience in . . . well, everything else.\"\n\n\"Not quite everything,\" Farmer said soothingly, putting a finger under Vanesse's chin. \"You've shown quite a talent for the healing aspects of your necromancy and, more importantly, how to build energy for it.\"\n\nThe Princess's heart was threatening to break out of her substantial chest, and her skin felt hot enough to cook on. \"You're not seriously suggesting that I act as your personal . . . you know.\"\n\n\"Slut?\" Farmer asked with a grin. \"Actually, you'd be the gang's slut. It'd be rude to keep a fine thing like you from the boys. You seem to enjoy it and, on one of my rare serious notes, we could show you a lot more of the real world than you could have imagined in your little Alaskan hideaway.\"\n\nVanesse was wondering where all of Trina's biological cues were during this. Surely her battle-dancer would be outraged at the prospect. 'Besides,' she thought, 'this is a ridiculous idea anyway. I'm a princess, damn it! That's not what princesses do.'\n\n\"Boss,\" Doreen called from the front, \"Ace just signaled that it might be a good time to stop and get some grub. It's been a while, and --\"\n\nFarmer was barely paying attention. She was too busy enjoying the feeling of Vanesse's body pressed up against her, those large tits and bright eyes competing for Farmer's attention.\n\n\"Boss? Anyone home?\"\n\nFarmer growled, but was pleased that Vanesse gave her a shy grin. 'She really doesn't understand how hot she is,' the werehyena matriarch thought. \"Fine. Where are we anyway?\"\n\n\"Just north of Tennessee. Even shifting drivers and sleeping in shifts, the boys are exhausted.\"\n\n\"Find a place a stop.\"\n\nThe caravan pulled into an all-night diner attached to a truck stop. The gang would take turns, some eating while the others watched out for would-be threats. And like in the wild, the matriarch got to eat first, along with her inner circle, Vanesse, and a handful of guys who took up surrounding tables.\n\nVanesse was still unused to \"road\" food, though she was assured by all the werehyenas that it was not representative of normal cuisine. The Princess thought that to be unfortunate, because the grilled-cheese sandwich and accompanying fries were heavenly. And the chocolate pie that acted as dessert required seconds, all by itself.\n\nAnd Vanesse spent time listening as the members of Joker's Wild as they talked. They were an interesting mixture of personalities. Some, like Farmer, Alani, and Ace were all highly educated, whereas Jack had never gone to college, Doreen was a high-school dropout, and Bud had actually done some serious jail time before his twin-brother had bailed him out and helped get his head on straight. \n\nBut despite the easy, jovial camaraderie, there was not doubt as to who was in charge. No one, except Vanesse, had started eating until Farmer had. They talked about ways to expand their drug business or pick up new transport work, but all ideas were flowed by the matriarch. They respected her, they liked her, but the pack still feared Farmer, at least a little. Vanesse was not sure how much of that was simple werehyena culture and how much of it was Farmer herself, but it was a very clear dynamic. After thinking about elvish politics and the fine art of lying, Vanesse found the werehyena style of government surprisingly refreshing. At least it was honest. \n\n\"Hey boss!\" Bud said from over near a jukebox that had probably been around since before Vanesse was born, \"Guess what?!\"\n\nVanesse had seen Farmer angry, amused, thoughtful, and horny, but she had never seen the look that now played across those strong, ebony features. It was a bastardized cross-breeding of fear and chagrin that was almost comical.\n\n\"You've got to be kidding!\" she said, almost choking on her coffee as she attempted to move towards the machine that filled her with an unholy dread. But the other werehyenas seemed to be quite intentionally blocking her path.\n\n\"What's going on?\" Vanesse asked as her new protector tried to force her way through a crowd of bikers.\n\nAlani was laughing too hard to respond, so Jack had to speak up. \"Remember when I told you that Farmer lost a bet where she said she could go a whole week without starting a fight?\"\n\n\"Yes. She lost it after three days, right?\"\n\n\"Yep. And you're about to see her pay up.\"\n\nBud had finished inserting sufficient coinage and had just hit the button before Farmer finally reached him. \n\n\"Sing it! Sing it!\" the crowd of bikers chanted, as some of those outside came in as word of the impending \"event\" spread.\n\nFarmer clenched her teeth, rolled her eyes, then tilted her head back and started to sing. Badly. Very, very badly.\n\n\"Ooh, baby, do you know what that's worth? Ooh heaven is a place on earth They say in heaven love comes first We'll make heaven a place on earth Ooh heaven is a place on earth!\"\n\nThere is a place caught midway between horror and hilarity, and that's where Vanesse found herself. Farmer's singing voice was so atrocious but she used it with such energy that the Princess found herself grinning like an idiot.\n\n\"She has to sing along with that song anytime we hear it playing,\" Jack said between chuckles. \"She never should have admitted that she loved Belinda Carlisle. Well, she should never admit that and then lose a bet anyway.\"\n\nMost of the rest of the restaurant patrons were just staring or laughing, while the wait staff was looking amused and perplexed. Farmer kept right on going until the last note, then promptly threw Bud out the front door and onto his ass.\n\n\"And stay out!\" she growled, then went and sat back down. The surrounding werehyenas were stifling laughs now, and their boss glared at each of them in turn. Only Vanesse was not sufficiently cowed. \n\n\"I'm more of a Bangles girl myself,\" the Princess said smugly.\n\n\"Oh just shut up,\" Farmer replied, sinking petulantly into her seat. \"I still say that the Go-Go's were vastly under-appreciated.\"\n\n\"Of course they were,\" the Princess said, patting Farmer's hand and then offering her a french fry.\n\nAnother werehyena came in, and he looked less than amused. \"We got a problem.\"\n\n\"What is it Bam-Bam?\"\n\n\"Scout car called in. We've got a line of unmarked black SUVs heading this way.\"\n\nFarmer was suddenly all business. \"Everybody out. Let's move this block party away from the civilians.\"\n\n\"Where the hell are we going?\" Alani asked, throwing a wad of twenty dollar bills onto the table before following the others outside.\n\n\"We ain't gonna outrun 'em, that's for sure. At least not for long,\" the matriarch grumbled, looking at the bulky RV. \"I don't want a gunfight while we're trapped in this thing. We make a run south and see if we can block up the road somehow. Put a flaming car on the highway and then call it in. That should slow pursuit down until we get to Nashville, and they won't try anything there. But when we get onto the other side --\"\n\n\"We'll be ready, boss,\" Jack said.\n\nFarmer clapped him on the shoulder. \"I know. And I need you to do something. Don't let the Princess out of your sight.\"\n\nThe caravan picked up speed, hurtling forward like hell was on its heels. Vanesse watched the faces of her protectors, and it made her uncomfortable. They wanted to stay and fight. They were proud, and they were strong, and they were being forced to run from a foe that they thought they could take. But they were putting aside their primal natures to defend her. She just hoped it did not kill them like it had --\n\n\"Stop with the headaches already!\" she murmured, as Trina made her displeasure with Vanesse's guilt trip known via a sharp pain right behind the eyes. \"I can feel guilty if I want to, damn it!\" She looked a bit sheepish as she noticed Jack staring at her. \"What?\"\n\n\"You know, you're two of the weirdest 'woman' that I've ever met. You're lucky that you're both sexy, smart, and funny.\"\n\nVanesse raised her eyebrow. \"Trina's rolling her eyes at you.\"\n\n\"How can you tell?\"\n\n\"I know her.\" In response, Vanesse got a smug sense of satisfaction.\n\n\"Hey, the next time that you're unconscious, can I have sex with Trina?\"\n\nThe Princess's jaw dropped, and her skin grew warm. \"You're serious?!\"\n\n\"Yeah, it'd be like a threesome all at once!\"\n\nVanesse closed her mouth, then she smirked. \"Why not?\" That elicited an alarming increase in her heart rate as Trina started poking biological buttons again. \"Hey, you want to watch ME having sex,\" Vanesse told her battle-dancer brain guest, \"so I want to watch you too.\"\n\n\"I never thought that a girl with multiple personalities could be so hot,\" Jack said. \n\n\"You've always found Farmer attractive,\" Alani pointed out. \"And she's completely insane.\"\n\nFrom the driver's seat, Farmer raised her hand like she was going to protest, then lowered it. Alani was technically correct. \n\nThey stopped long enough to turn one of the trail cars over and light it on fire during a section of road that was under construction, which would slow their pursuers down for a while. They managed it just in time, as the line of black SUVs pulled up before Joker's Wild was completely out of sight. Some gunshots came their way, but nothing impacted. At least this time, they did not seem to have --",
        "\"Helicopter!\" Farmer shouted into her radio as a spotlight strafed the highway. \"Where the fuck do they get those things?\" She paused, then continued, \"And why can't I have one?\"\n\n\"Have you ever heard of a helicopter gang?\" Alani asked. \"That would just be silly.\"\n\n\"Good point. Werehyenas on two wheels is much more logical.\"\n\nA bullet-hole appeared in the roof of the RV as someone up above opened fire. Jack threw the Princess onto the ground and covered her with his body. \n\n\"Getting a little fresh?\" Vanesse asked, her heart pounding.\n\n\"Never let it be said that I can't perform under pressure,\" Jack replied. He glanced at Alani, who was grabbing an AK-47 from under the seat and heading towards the roof hatch at the back of the vehicle. \n\nThe islander girl popped the hatch and braced herself, feet on the ladder. \"Say hello to my little friend!\" she shouted and let a torrent of lead loose on the offending rotary craft.\n\nVanesse's eyes shot towards the ceiling. \"She's up there,\" the elf growled angrily. \"That bitch! I can sense her!\"\n\nUp above, Natasha was fidgeting in the seat next to Abraham Holmes. He had never seen her acting nervous before, and it was creepier than her normal behavior. It was almost . . . well, human.\n\n\"The Lazarus woman sees with empty eyes,\" the vampire was whispering. \"She should not be. She went were the dark folk go, and she followed them back from the void.\"\n\nChristopher Knight did not have the patience to try and unravel what the blood-sucker was babbling about. He was seeing too many lights on the horizon. \"Sir, we've got to kill them and we've got to do it now. They get much closer to the city, and the risk of exposure is --\"\n\n\"I am aware of the dangers,\" Abraham said calmly. Everything about this mission felt off to him, but he was not going to back down now. He grabbed a string of grenades from the box at his feet. \"There will be no missing this time.\" He had to hold on for a moment as the chopper banked to avoid the hail of gunfire erupting from the roof of the RV. \"That's the target,\" he growled, pulling a pin and hurling the spherical ball of death outward. The chop of the rotors caught it and blew it wildly off course, the explosion occurring off the side of the road.\n\n\"Pull further in front,\" Christopher yelled at their pilot. Then he looked at his alpha and said, \"Just drop the whole line on them. Nothing is gonna survive that.\"\n\nAbraham nodded, the same idea having just occurred to him. He ran a line through the pins, waited until they were right over the road, then he yanked the line and dropped a dozen grenades all at once. And then, every vehicle on the road began to peel off through the fields. \"Damn it!\" he screamed.\n\nDown below, Farmer was attempting to successfully drive the metal behemoth across a field of tilled farmland. \"Did they really think that I was just going to drive into their trap?\" she muttered quizzically. \"Oh fuck.\" This last was said as she realized that she was bearing straight into an embankment that was much bigger than the RV.\n\nFarmer tried breaking, but she still hit the wall of dirt with enough force that everyone and everything in the vehicle went flying forward. The werehyenas were tough enough that they would be all right, but Vanesse's head connected with the RV's tiny table with a sickening crack. \n\n\"Vanesse!\" Alani shouted, crawling over the wreckage to get to the elf. Much to her relief, Vanesse was moving and moaning. She was alive, but she was obviously not in good shape. Farmer sat up, shook her head, then started to move towards the door. Her radio, amazingly still intact, started to squawk static.\n\n\"Alani, get the Princess and get her out of here. We need to make a break for the tree line,\" the matriarch said, then turned the dial on the radio. \"Guys, we need some protection. Those pursuers aren't so far away that they can't run over here, and that chopper has us pinned down.\" Even then, she heard the heavy thumping of air battering gravity into submission. She kicked the door open, grabbed a rifle from the pile of trash, then stepped outside and opened fire on the helicopter.\n\n\"Why doesn't that bitch just die?\" Abraham asked angrily as he watched the survivors stumble out of the RV and head towards the woods, the Princess cradled in one set of arms. \"Everyone, get ready to open --\"\n\n\"Fire,\" Natasha muttered, her voice suddenly very clear, and very afraid. \n\n\"Yes, that's what I was going to --\" Abraham watched in complete astonishment as his vampire seeress hurled herself out of a moving helicopter forty feet above the ground. Then the werewolf alpha's gaze snapped up as he saw something moving through the sky. Out there was something even darker than the night that surrounded it, and it was not alone. \"Abandon ship!\" he yelled, jumping out and hurtling towards the ground at a dangerous speed. \n\n\"What the hell is --\" Christopher said, just in time for him to see what had scared his boss enough to jump. \"By the Gods,\" was the last thing that the Dark Hunt's second in command would ever utter in his lifetime.\n\nThe helicopter was devoured by a ball of fire that rivaled the sun, at least in the eyes of those who bathed in its light. A number of the werewolf pursuit vehicles had managed to get past the road block and now, with wide eyes, they looked up at the darkness and saw a monster. \n\nFlapping mighty wings, a reptilian figure easily forty feet long hovered thirty yards away from the screeching helicopter, spouting flame from the tooth-ringed maw that protruded from underneath glowing green eyes. The world around the creature seemed to be moving in slow motion, waiting patiently for the monster . . . for the dragon . . . to finish cleansing the sky of its enemy.\n\nBut when Farmer looked towards the sky, she saw something even more frightening, and much, much larger, floating in the blackness beyond the green dragon, the burning helicopter, and the fiery wreckage that had begun to rain down on them all.\n\n\"Farmer!\" Jack screamed, stumbling backward with a still-groggy Vanesse in his arms. \n\nThe werehyena matriarch looked down just in time to block a clawed arm from taking her throat out. The same werewolf that she had fought before had morphed into his half-form and was attempting to finish what he had started days earlier. Alani and Doreen both morphed and engaged other werewolves that were attempting to flee the fiery fiend that flew overhead. \n\n\"Get her out of here!\" Farmer shouted over her shoulder, putting some distance between her and her adversary so that she could morph to half-form. She took a couple of hard swipes before the transformation was complete, but she was used to changing in a hurry. \n\nBut Jack was not getting very far. A blur of darkness swept by and claws raked across his face, blood spraying and bone breaking as he was flung halfway across the field. Vanesse was sent tumbling towards the base of a tree, and only Alani's quick thinking kept her from impacting.\n\n\"I can still taste her,\" Natasha whispered, staring with an unholy desire towards the elf's still form. \"I can still see the pretty doll behind the glass eyes.\"\n\n\"Psychotic bitch,\" Alani muttered, moving towards the woods only to have the vampire appear between the werehyena and relative safety.\n\n\"Give them to me,\" Natasha said. \"I need to finish her. She should not be.\"\n\n\"Look who's talking.\" Alani was looking around desperately for some help. She could not fight this thing and protect Vanesse at the same time. But Farmer was busy, Jack was down and out, and Doreen --\n\n\"Leave her alone, bitch!\" the blonde werehyena screamed as she nailed the vampire across the back with a heavy stick. \n\n\"Way to --\" Alani's support was cut off as the vampire spun, ripped Doreen open from gut to throat, then turned around before the young werehyena even had a chance to blink. Alani backed up, helpless in her horror as she watched the youngest member of Joker's Wild trying to keep her intestines from spilling out. But she did not have much chance to fear for Doreen, as the vampire was coming for her now.\n\nVanesse struggled as much as she could to get out of Alani's arms, even as Trina struggled to take control of Vanesse's body. Pain lanced through the Princess's head as the battle-dancer screamed and shouted from the bottom of her friend's psyche to get out . . . to protect Vanesse one more time.\n\n\"No,\" Vanesse whispered, pulled on her magical reservoir to give herself some strength, and then quickly rolled out of Alani's hands. She was tired. She was tried of running and being scared, and she was tired of everyone around her suffering while she whimpered helplessly.\n\n\"Princess?!\" Alani shouted in surprise, moving to grab the elf and attempt to flee again. She made the classical blunder of taking her eyes off of the enemy for just a moment, and she paid for it when the vampire pounced and rammed her head into a rock with a grotesque thump.\n\nNatasha stood up and watched bemusedly as her quarry crawled towards the blonde werehyena who was still bleeding from the gaping wound in the front of her body. The elf reached forward to touch the dying lycanthrope, but the vampire grabbed her by the ankle and lifted her off the ground as if she were no heavier than a kitten.\n\n\"Bad elf,\" the vampire cooed, feeling more confident. The elf was hers to play with. The two alpha weres were off beating each other into oblivion, so she should have a moment alone before the sky lizards came . . . before the living shadow noticed her. \"I killed you. I drank of your life, then made sure you had none. You don't belong here,\" she hissed.\n\nVanesse realized that she was not truly the target of this monster's attention. The vampire wanted Trina. Somehow, it knew that Trina was still alive. Sort of. Vanesse tiredness was suddenly and inexplicably replaced. By anger. \n\n\"Leave her alone!\" she shouted. She was not sure why, but she was more concerned about Trina than her own safety. And the nausea in the pit of her stomach indicated that the battle-dancer was not happy about that.\n\n\"I cannot,\" the vampire replied. \"She broke the way of things. Rivers of time and karma have changed their courses. There are too many possibilities now. It makes it hurt to see.\"\n\n\"What are you talking about?\"\n\n\"She should not be. She cannot be kept in the light world by the power of an utterance, but she has not gone. She had stolen the secrets of my kind. I must steal them back.\"\n\nVanesse swung wildly, but she would not have wounded this creature even if she had managed to hit. She was not a fighter. She was just a spoiled little princess who got people killed.\n\nA memory flashed before her eyes, then another, and another. Memories of her training, studying, thinking --\n\n'I'm not a \"nothing\",' she thought, accepting the thoughts that Trina was pushing forward. 'I'm a necromancer. And this bitch is dead.' \n\nNatasha grabbed Vanesse by the front of her sweatshirt and spun her around so that they were now face to face. \"I wonder if it is your blood that I will taste, or hers? Regardless, you will not be coming . . . AURGH!\"\n\nThe vampire screamed in pain when Princess Vanesse Bellethial uttered a few simply words and proceeded to power-dump directly into the vampire's face. It was a horribly dangerous maneuver, but Vanesse was not going to go down without a fight. She had never cast this spell, but she knew that it was a holdover from the days when necromancers and the undead did not have as cordial of relationships as they did in this day in age. Pure necromancer energy . . . the energy of life and death . . . could be fatal to a creature caught between the world of light and the ever dark. Creatures just like this one.\n\nBut Natasha was not young, and she was powerful. She hurled the Princess away, then staggered forward again. She had not been hurt like that in as long as she could remember. She hated it. She hated the one who caused it. \n\n\"I will drain your blood and your tears and your screams until there is nothing left but your husk,\" she snarled, standing over Vanesse's bruised body, which was turning over with great pain on the cold, churned earth.\n\nVanesse wondered if this was how Trina felt before she had died. Hurt, frightened, hopeless . . . 'No,' she thought. 'Trina was stronger that this.' Even as she thought it, the battle-dancer was hurling herself against Vanesse's mental defenses, trying to get out. 'Trying to get out.' The thought blasted into Vanesse's vision like a comment. She had an idea. Could it work? Trina was always the strong one. It was time to use her strength. \n\nNatasha expected begging or pleading, and she was definitely expecting screams. She was not expecting for an elvish princess to lunge at her and bite her.\n\nVanesse tasted blood. It was not much, but it would be enough. It had to be. Even as her enemy yanked her away, she began to focus energy. Not her energy, but Trina's.\n\n\"Did you like your last taste?\" the vampire asked.\n\n\"Blood for blood,\" the Princess snarled. \"You took something from me. From her. I'm taking it back.\" With that, Vanesse unleashed a second power-dump. The vampire, already weakened, looked shocked as a glowing white light emerged from the Princess's eyes and mouth and struck the undead straight in the face. \n\nNatasha finally got her screams. Unfortunately for her, they were her own.\n\nAbraham Holmes was not more than twenty yards away when he heard the most horrific thing that had ever assailed his ears in his entire life. He turned to see that his would-be victim was holding onto Natasha's head, but both their faces were obscured by a brilliant light. \"What the OOF!\"\n\nIn his moment of distraction, the werewolf had gotten kicked hard in the gut by an exhausted werehyena. Farmer wanted him dead, and she wanted to go see if her friends were still alive. But she was so very, very tired from her skirmish. \n\n\"It would have been good to be on the same side,\" Abraham growled, pulling his emergency pistol out of its ankle holster and pointing it at his adversary. \"You're a good soldier. Too bad it has to --\"\n\nA massive paw came down and squashed Abraham Holmes, crushing him like a grape.\n\nFarmer gaped. She looked up and saw that the darkness had come for the werewolf mercenary, and it came in the form of a dragon. The creature before her was as massive as a greyhound bus in the body, not to mention the wings that seemed to reach all the way to the horizons, and a tail that flowed behind the mighty beast like a stream. And it was so very, very black. Smoke seeped out from beneath the monster's scales, wafting into the great open above. The neck was long and thick, and that head was adorned with a massive pair of jaws and eyes that sucked the light out of the air nearby. It was horrible. It was frightening. It was beautiful. It was a dragon.\n\nThen a figure slid off of the dragon's back, then another and another. One of them, a beautiful red-haired woman, strode towards Farmer. \n\n\"Where is the Princess?\" the woman asked quickly. She did not sound hostile, but she was certainly all business.\n\nIt took every bit of willpower Farmer possessed to pull her eyes away from the dragon. The animal part of her was screaming at her to run like hell, because as strong as she was, the dragon was the apex predator here. \"Who the hell are you?\"\n\n\"My name is Lillian. I'm from --\"\n\n\"Crap, you're from Stapleton's crew?\" Farmer looked around. \"Vanesse?!\" she shouted, then took off with a pronounced limp towards where she had just seen the Princess. \"She was fighting the damn vampire!\"\n\nLillian rushed to keep up, with two rather imposing black men falling in beside her. Both men were dressed in body armor so advanced it made the werewolves' gear look like toys, and each was carrying enough firepower to down a revolution in a Central American country. \n\nFarmer looked back briefly and saw that the werehyenas had moved out of the field of battle, allowing the two dragons to finish mopping-up the werewolf presence. Then she hurried over to the scene. \"Doreen!\" she shouted as soon as she saw her young pack-mate, blood gurgling from her mouth and from just about everywhere else.\n\n\"Tried,\" the blond girl said through bubbles of sticky red liquid. \"I tried to save her . . . like you would have --\" Doreen's gaze was glassing over. A werehyena could survive a lot, but with as much blood as she'd lost, she was a goner.\n\n\"The Princess is stable,\" Lillian said, looking around. \"Bangaly, Reaper, keep your eyes peeled. You,\" she said, pointing at the werehyena matriarch, \"You're Farmer, right? Which one . . . oh Lady of Death,\" she said, noticing the ravaged form cradled in Farmer's arms. She moved over with speed and purpose. \"I need you to hold her while I close up the wounds. Damn, this is not the place for surgery. I need --\"\n\n\"What? What do you need?\"\n\n\"I need to stitch her up first, and I don't --\" Lillian stopped talking, taken aback when Farmer furiously let out a string of laughing barks. Immediately, several werehyena's got up from watching the dragons hunting and headed toward the ruins of the RV.\n\n\"Keep her stable,\" Farmer said. \"I'll do the butcher work.\"\n\nLillian did not argue. She just poured enough energy into her patient to keep the vital systems operating while the werehyenas went about satisfying their alpha's commands. One of them came over with a reinforced box, after which Farmer started to pull out her medical gear.\n\n\"Bit more than your regular first aid kit,\" Lillian muttered, but kept on healing as the werehyena matriarch did what she could to close up the hole in her young friend's chest.\n\nMore and more hyenas began to gather around, giving their power and support to their leader and their youngest. Lillian was surprised to see the young blonde's chest steady and her vitals stabilize much faster than even a lycanthrope's normally would. \n\n\"Stay with us little one,\" Farmer said soothingly. Then she saw Jack crawling over, his face suffering from some deep gashes, but nothing life threatening. He was hauling Alani with him. The islander girl was not moving. \"Is she --\"\n\n\"She's alive, but she got her noggin thumped pretty hard.\"\n\n\"Can you --\"\n\nLillian raised her hand. \"I'll do what I can.\"\n\nFarmer nodded. \"Glad you got here when you did.\"\n\nThe redhead smiled. \"As the Princess suggested, I already had guessed her identity. Lord Stapleton gave the go ahead to come up and start looking for you as soon as I told him, and her identity was confirmed by the Shepherd while we were on our way. It was smart for the Princess to tell us what route you were taking. Luckily, the Greater Dragons move a little faster than you would expect.\"\n\nThe werehyenas all looked towards the sky. The smaller of the two dragons was swooping across the field, then suddenly stopped and pounced on a werewolf who was attempting to take refuge in a bush. The mighty beast jumped up and down, smashing the hapless werewolf repeatedly against the ground. The way that it was toying with what would normally be a vicious opponent made it almost look like --\n\n\"Don't compare him to a kitten,\" Lillian said with a smirk. \"Aodh hates being compared to anything cute, especially if it's cute and fluffy.\"\n\n\"Aodh?\"\n\n\"That's his name,\" the redheaded necromancer said. \"And THAT,\" she started to say as a dark shape floated to the ground, \"is Shamira. Better known to the magical world as Shadow Wing.\"\n\nShadow Wing was massive in a way that did not truly translate from the rules of modern physics. The great black dragon seemed to take up far more space than mortal eyes thought it should, to the point where staring at it too long gave the viewer a sense of claustrophobia. Smoke seeped out from underneath its scales, and darkness radiated from its eyes. It was darker than the night around it, a living, breathing, killing shadow.",
        "As Shadow Wing landed, the smaller dragon, Aodh, immediately took a subservient pose, head bowed and body below that of the larger beast. After a moment, the two dragons' eyes met, then Aodh started looking around frantically. Shadow Wing let out a puff of smoke, rolled its eyes, then looked at Aodh's feet. The smaller dragon looked quizzically at its larger counterpart, then lifted its front foot. There, it found the remains of the werewolf it had stepped on earlier.\n\nFarmer was grinning and on the verge of laughing as the smaller dragon started shaking its foot, much like it was trying to get a piece of gum off of its shoe. Finally, it scraped the bloody corpse off using a tree. Shadow Wing stared at Aodh, then looked around the field. The younger dragon nodded enthusiastically, then began to march in a circle around the clearing while Shadow Wing headed over towards Farmer and company. \n\nHalfway there, Shadow Wing began to transform, smoke pouring out from its very core. When the smoke cleared, a muscular, gorgeous, and wholly naked woman stood where the dragon had just been. \n\n\"I swear, that boy would lose his head if it wasn't attached,\" the woman was muttering as she arrived at Farmer's location.\n\n\"He's a good kid,\" Lillian scolded the newcomer. \"He does his best, and it might not hurt to remind him of that.\" She motioned to the werehyena. \"Shamira, this is Farmer, leader of the Joker's Wild hyena pack. Farmer, this is Shamira.\"\n\nShamira nodded, crossing her powerful arms over her enormous chest. \"Nice to meet you, all things considering.\"\n\nFarmer returned the nod, a little dumbfounded as to what to say. \"You're a dragon.\"\n\n\"You've rendered another one in total awe,\" Lillian chuckled.\n\nThe muscular woman actually looked flustered . . . almost embarrassed. \"So, where's this Princess we came to rescue?\"\n\n\"She's unconscious, but otherwise appears unharmed. We have three werehyenas to patch up, but this is the only one who had life-threatening wounds. We can patch everyone else back together once we get to Savannah.\"\n\n\"Savannah? I thought you guys were based out of Atlanta.\"\n\n\"Normally, yes. But security is tighter at Banshee's territory down in Savannah thanks to the Greater Dragons, so Lord Stapleton thought it would be better to take the Princess there. The Representative is already down there, and the Alpha and Shepherd are on their way.\"\n\n\"Well, this is gonna be a party,\" Farmer muttered. \"So . . . you're a dragon?\"\n\nShamira through her arms up in the air. \"Yes, I'm a dragon. Living incarnation of Shadow Wing, yaddah yaddah yaddah. Can we just move past that part?\"\n\n\"No,\" Reaper said.\n\n\"Unlikely,\" Bangaly added.\n\n\"You're joking, right?\" Farmer said. \"You're a fucking dragon! A big one! That's . . . that's gotta be the coolest thing I've ever seen.\"\n\n\"It is rather impressive,\" Lillian added, standing and giving Shamira a peck on the cheek. \n\n\"She's hot!\" Jack said, his hand covering the scars on his face. \n\n\"Well, at least now we know he's okay. He's oggling,\" Farmer said. Then she glanced at the Princess. \"Speaking of subjects of his affection, I wonder why --\" She stopped, glancing at Lillian. Currently, no one outside the caravan knew that Trina was still alive. And why hadn't Trina taken over Vanesse's body?\n\nVanesse's eyes opened. \"Did we win?\" she gasped.\n\n\"Groan.\"\n\nFarmer looked over to the source of the noise, and her blood froze. The vampire! She had completely forgotten about the blood-sucking fiend, and now the bitch was awake! With a snarl, Farmer lunged across the earth, closing in. As soon as the vamp opened her eyes, the werehyena punched straight between them.\n\nThe being who had caused them all so much heartache went flying back in an undignified clump, crashing and rolling in the dirt. \n\n\"Wait!\" Vanesse screamed, but her voice was drowned out my Farmer's anger.\n\n\"Uhm, should we be interfering or helping?\" Shamira asked.\n\nLillian nodded. \"That's the vampire that the Representative warned us about. They've been looking for her for centuries.\"\n\nFarmer leaped up and came down with claws extended, intent on taking the vampire's head clean off. But those dark, sultry eyes were opened and . . . confused. The would-be victim rolled backwards, getting out of the way just in the nick of time.\n\n\"I think the boss is claiming this fight,\" Jack said. \"She --\"\n\n\"Stop her!\" Vanesse bellowed. \"That's not who you think it is!\"\n\n\"Princess, I'm not sure what you're talking about. I --\"\n\nVanesse recognized the voice, but not the face. \"Lillian? What are you . . . that's not the vampire!\"\n\nFarmer was drawing on every ounce of primal rage at her disposal, to the point where she was knocking over trees to get at a vampire who seemed to be retreating without actually going anywhere. \n\n\"Don't hurt her!\" Vanesse screamed again, then went charging after the fight.\n\n\"Princess!\" everyone shouted at once as they gave chase. All except Shamira, who just shook her head. \n\n\"It was supposed to be my weekend off,\" she grumbled, then started to change back to her dragon form. \n\nFarmer grabbed a log that most people could not even lift and swung it at her adversary. The vampire ducked, then seemed to find her voice.\n\n\"What the fuck are you doing, you insane mongrel?! Do not MAKE me kick your ass again!\"\n\nFarmer swung down, causing her vampire opponent to cartwheel somewhat gracefully out of the way. \"It wasn't me you fought last time,\" she growled. \"It's not me you jumped from behind and --\"\n\n\"What are you (duck) talking about? Did someone (dodge) put some bad shrooms on your pizza? If you hurt Vanesse's body, I'm going to beat you so bad, even your mama won't love you.\"\n\nThat made Farmer pause for just a moment. \"Vanesse's . . . Trina?!\"\n\n\"Of course it's Trina, you half-wit! Who else would be possessing Vanesse's body?\"\n\n\"That's . . . not Vanesse's body.\"\n\n\"Of course it is,\" the vampire said, then looked down. \"Though I don't remember Vanesse wearing . . . when did she dye her hair black?\"\n\nVanesse stumbled between the two of them, throwing her hands up to protect the vampire.\n\n\"Princess, get away from her!\" Lillian shouted when she arrived, cutting off Vanesse's explanation. \"That's Natasha Baranova, a very old and very dangerous vampire! She's completely insane and --\" It was Lillian's turn to be confused, when the would-be villain jumped in front of Vanesse and took a defensive stance.\n\n\"Where?\" the vampire said, looking around. \"I don't hear anything.\"\n\n\"If you would just let me explain --\" Vanesse started to say, then was interrupted again when the remainder of Joker's Wild, along with Lillian's bodyguards and a pair of full-sized dragons arrived.\n\n\"Duh . . . dragon!\" Vanesse said, staring at the sky, then subsequently fainted.\n\n\"Princess!\" the vampire said, moving faster than the eye could follow and catching the elf before she hit the ground.\n\n\"Natasha, don't hurt the Princess. It's over,\" Lillian said. \"If you let her live --\"\n\n\"Okay, who are you and why are you calling me Natasha?\"\n\n\"Let's not play games,\" Lillian said, her voice soothing. She saw Bangaly raise his weapon half-way, making sure that Natasha saw him. That meant that Reaper, one of Lord Stapleton's assassins, was somewhere nearby, waiting for his shot. \"You don't need to do this.\"\n\n\"What are you . . . wait,\" the vampire said, lifting up the Princess. She looked at Farmer. \"This is Vanesse!\"\n\nFarmer nodded. \"Yep.\"\n\n\"I'm not in Vanesse!\"\n\n\"Nope.\"\n\n\"Who's in Vanesse?!\"\n\n\"At the moment, just her.\"\n\n\"So who am I in?\"\n\nFarmer pointed towards Lillian. \"I think she has an explanation as to the 'who' of it.\"\n\n\"What are you two talking about?\" Lillian asked.\n\n\"Uhm . . . well . . . erh . . . hmm,\" Farmer muttered in order. \n\n\"Actual words might help,\" Lillian suggested dryly.\n\n\"Speaking really isn't her strong suit,\" Jack mumbled. \"Could someone fix my face? I mean, chicks dig scars and all, but this is just a bit gross.\"\n\n\"EVERYBODY STOP!\" This was projected directly into the skulls of everyone present by one very confused Greater Dragon.\n\nFarmer held her head. \"Ouch! Not so loud. Why didn't anyone tell me that it --\"\n\n\"She,\" Lillian corrected her.\n\n\"-- that SHE could do that?\"\n\n\"You didn't ask,\" came the prim, telepathic response. \n\n\"If we could wake up Vanesse, she could probably explain it better than I could,\" Farmer said, sitting down and shifting all the way back into her human form. One of her own had arrived carrying Doreen, so she went to check on the fallen hyena.\n\n\"I whacked her good,\" the weak but still animated girl said.\n\n\"Yeah, I can tell. Was your master plan to strangle her with your lower intestines?\"\n\n\"Only if stabbing her in the eye with an exposed rib didn't work.\"\n\n\"That's my girl,\" the matriarch said, ruffling the girl's hair.\n\n\"Okay, could people stop pointing guns at me and explain what happened?\" the captive vampire said.\n\nLillian gave a quick boost of power to Vanesse, bringing her into the conscious world again. \n\n\"Where . . . what . . . I could have sworn I saw a . . . dragon,\" she ended in a whisper, staring up at the blackness she had mistaken for the sky.\n\n\"Good evening Princess, Shamira sent, \"I mean you no harm.\"\n\nVanesse could not speak. The Greater Dragons were things of legends, even to the legendary. Before her stood something that she had only heard in the wildest tales, curled up in her father's arm as he spoke in melodramatic tones before an open fire.\n\n\"Princess?\" Lillian asked. \"Vanesse?\" She snapped her fingers in front of the elf's face, which seemed to finally get her attention.\n\n\"That's a dragon.\"\n\n\"I know.\"\n\n\"Right there.\"\n\n\"I can see her.\"\n\n\"No, she's right there!\" Vanesse said emphatically, pointing at Shadow Wing.\n\n\"Yes, she's a very good friend of mine. In other words, we've met.\" Lillian smiled. \n\n\"There was another one and --\" Vanesse followed Lillian's pointed finger to where the smaller-ish green dragon was looking on quizzically. \n\n\"And we'll talk all about the dragons AFTER you explain why you don't want us to kill Natasha.\" When Lillian was met with a blank stare, she added, \"The vampire who killed Trina.\"\n\n\"Trina!\" Vanesse said excitedly, looking up and then seeing . . . her. The woman who killed her best friend. Her new best friend, currently cradling the Princess in her arms. \"Don't hurt her!\"\n\nEveryone looked from the elf to the theoretically hostile vampire. Well, everyone except Farmer.\n\n\"See?\" she said. \"Told ya.\"\n\nVanesse struggled a bit, so the vampire put her down. \"This,\" she said, \"is Trina.\"\n\nLillian looked confused. \"Trina was your battle-dancer. That's --\"\n\n\"I know, I know. Listen, there was something I didn't come clean about the last time we talked. Trina isn't completely dead.\" Then like a flood, Vanesse spilled the story, from Trina's death to being reincarnated within Vanesse's mind. She left out the part where Trina had interpreted events as being rejected by the Dancer in White. That seemed far too personal. \n\n\"That's not possible,\" Lillian said. \"Only vampires and demons can occupy a human host. Vampires only possess their own bodies, and demons force their way into someone else's.\"\n\n\"Possible doesn't seem to apply here,\" Vanesse replied. \"Because the woman in my head was Trina. Now . . . Trina's in here,\" she said, putting a hand on the vampire Natasha's shoulder.\n\n\"But . . . how?\"\n\nVanesse took a deep breath. \"I did a full-force life blast on the vampire,forced her spirit out and replaced it with Trina's.\"\n\nMost everyone looked confused, except for Reaper, Lillian, and vampire Trina.\n\n\"That's impossible!\" Lillian said.\n\n\"You forced a host spirit out of its vampire body?\" Reaper said, an unaccustomed fear in his voice. \n\n\"Vanesse, you could have hurt yourself!\" Trina said, shaking Vanesse by the shoulders. \"Or worse!\"\n\n\"I couldn't let her keep on walking while you were trapped inside my head! She took your body away, why shouldn't I give you hers? She killed you! She deserved to die!\"\n\nLillian still looked stunned. \"You forced the spirit of a vampire almost half a millennium old out . . . on force of will?\"\n\n\"Is that hard?\"\n\n\"It's unheard of! Any kind of expenditure like that should have killed you. I . . . and I'm not sure what kind of precedent this sets.\" Lillian looked at Reaper, the only other vampire present. \"By all accounts, it was self defense, but . . . there will be some vampires who are more than a little concerned about what you did. What you're capable of doing.\"\n\n\"I . . . I was just so angry,\" Vanesse whispered, feeling herself wrapped up in Trina's new, strong hands. \"All that she did to us. To you.\"\n\n\"I'm not mad at you,\" Trina said, unfamiliar with the sound of her own voice. It was too deep and husky for her liking. \"Except for putting yourself in danger. Again. We'll figure this out, okay?\"\n\n\"Promise?\"\n\n\"Promise.\"\n\n\"Ladies and gentlemen, I think we need to get going,\" Shamira thought. \"There is only so much interference that the Lord of Tennessee is going to be able to run, and we've made quite a commotion out here.\n\n\"You're right, of course,\" Lillian said, her eyes still on the Princess. \"I think that I'll ride with her Majesty. Has transportation been arranged?\"\n\n\"We're switching vehicles again?\" Farmer muttered. \"I'm leaving a trail of broken parts across North America.\"\n\n\"Lord Stapleton has provided several buses. Your getaway vehicles will be disposed of in a manner that they cannot be traced back to you. We will be accompanying the Princess.\" She looked up. \"You might want to take the young one and fly home.\"\n\n\"I'm not that young,\" came a new set of thoughts, broadcast from the smaller dragon.\n\n\"You're two, Aodh. That's young.\"\n\nVanesse snickered as the smaller dragon actually seemed to pout, then took off into the sky.\n\n\"Great, now I'm going to have to boost his ego,\" Shamira thought, glaring at an unrepentant Lillian, then followed her charge into the darkness.\n\n\"He's only two?\" Farmer asked, her disbelief plain to see.\n\n\"Physically, but he's the equivalent of a teenager mentally. Whether that's a good thing or not varies greatly on whether you're asking Shamira when dealing with him or when she's dealing with the younger ones.\"\n\n\"How many are there?\" Vanesse asked.\n\n\"There's Aodh, two sea serpents, a quetzalcoatl, a stone dragon, and a horned dragon. So that would be six, plus Shamira.\" Lillian grinned. \"We get so excited when a new one hatches, then Shamira realizes that it means she gets less time alone with her girlfriend. That's when she starts banging her head against a rock.\"\n\n\"She's amazing,\" Vanesse said\n\n\"That she is,\" Lillian agreed. \"That she is. Shall we depart, Princess?\"\n\nVanesse nodded and made her way towards the road, surrounded by werehyenas, Lillian and Lord Stapleton's guard, and by Trina. Vanesse's gaze kept falling on the new incarnation of her best friend. The vampire was staring at her hands, and had gone completely silent when Vanesse had been fawning over the dragons. She raised her hand to get her friend's attention, but she was swept into a vehicle which Lillian was using as a mobile medical station. Vanesse wanted to watch a master at work, with Farmer's doctor's training coming in handy. But she kept looking around for Trina, who seemed to have vanished.\n\nAfter an hour, Lillian had the wounded patched up, and she looked much fresher than Vanesse would have. She had explained energy flow and retention, and what seemed like a million other things that she should have known. It frustrated her all over again how little her skills had advanced. Lillian had taught her more in a few phone calls and an hour on a bus than her uncle's tutors had in fifteen years.\n\n\"Where's Trina?\" she asked at last. \n\n\"The . . . your friend is actually on the next bus,\" Lillian said slowly and calmly. \n\n\"Why? She's my battle-dancer, so she should be --\"\n\n\"We don't know what you did or what happened exactly, so if there's any chance that Natasha is still in there, we can't risk her being near you. The Representative informed us that she is completely insane.\"\n\n\"No, she's gone. I felt her leave. I want my friend,\" the Princess said, trying to summon up some royal backbone. \"Now.\"\n\n\"Princess, I don't think that's --\"\n\n\"Unless you've moved from rescuers to kidnappers, you have no right to keep her away from me! You cannot tell me who I can and can't --\"\n\n\"Your Highness, she agreed to it.\"\n\nVanesse's felt like she had been punched in the gut. \"No, no she wouldn't.\" In thirty years of Vanesse's life, Trina had never voluntarily left her side. This had to be a mistake.\n\n\"Yes, she would. I believe you that Trina is in that body now, but if there is any chance that Natasha could re-exert control, we want to keep you safe. Farmer is here, and her seconds are in better shape now. They can protect you if you don't trust me and Lord Stapleton's men,\" she added, pointing towards the others on the bus.\n\n\"If she was going to hurt me, she would have when she had the chance,\" Vanesse growled through gritted teeth. \"I . . . want . . . my friend.\"\n\nLillian pulled out her phone. \"I'm going to call the next bus. You can talk to her and ask her. Okay?\"\n\nVanesse took the phone as if she thought Lillian might bite her. \"Hello? Trina?\"\n\nThe voice that came through the other end sent a chill through her. The voice held no fond memories for her. \"Princess?\"\n\n\"Trina, if you call me Princess one more time, I will fire you. I mean it,\" Vanesse said, trying to alleviate her mood a bit.\n\n\"How are you holding up?\"\n\n\"Well, I was doing fine until someone told me that you shouldn't be around me. How could you agree to that? How --\"\n\n\"Vanesse, I had to. What you did is unprecedented. I don't feel anyone else in here like I did when I was in your head, but we have to be sure. It's just until Lillian can take a better look around my head.\"\n\n\"This is supposed to be the good part, though. We're safe, we're free . . . you're supposed to be here with me to celebrate.\"\n\n\"You can celebrate with Farmer and the gang. Doreen almost died trying to save you, and Alani and Jack both got hurt. They can --\" \n\n\"None of them are you! You're my friend and my battle-dancer and --\"\n\n\"I'm not your battle-dancer,\" came a whispered reply. \"Not anymore.\" \n\nVanesse shook her head. \"What are you talking about?\"\n\n\"By our oldest laws, only elves can be battle-dancers. I'm . . . I'm not an elf anymore.\" \n\n\"That's a technicality!\"\n\n\"No, it isn't. And it's a rule that the monarchy and your people agree on. No matter what, your uncle will insist that you get a full battle-dancer . . . and elvish battle-dancer --\" \n\n\"So by trying to give you your life back, you're . . . you're leaving me?\"\n\nThere was silence for a moment, broken by a voice choked with an emotion that Vanesse could not recognize. \"I gave you my Word that I would always protect you, and even without my Word, you know how I feel about you. And if there is ANY chance that my being near you might cause you harm, then I have to take that seriously. But . . . I --\"\n\n\"Yes?\"\n\n\"Vanesse, I don't even know who I am now. I hear my thoughts, but when I look in my reflection, do you know who I see? The woman who killed me. At least when I was in you, it was a person I knew, someone's whose face I had looked at every day. More often than my own, I think,\" she added a bit shyly, and in a way that made the Princess's heart pitter-pat. \"I know what you tried to do and that you were doing it for me . . . from your heart. I just don't know what it leaves me as.\"\n\nVanesse wanted to cry, but she would not. A Princess did not cry in public, in front of strangers. \"You're still Trina. You're still the woman who knows me better than I know myself. You're the amazing person who's saved my life and made the world less scary. You're the one who always came through for me.\"",
        "\"And spirits willing, I always will. But I need to know that I'm safe for you and . . . and I need to try and understand this \"me\". And for that, I need some time.\"\n\nThe Princess hung up the phone, sniffed and was getting ready to wipe her nose on her sleeve when she found a hand offering her a kleenex.\n\n\"Thought you might need this,\" Farmer said. \"For some reason, you and she always seem to make each other weepy or angry, and since you weren't hurling shit across the room, I figure this would be appropriate.\"\n\nVanesse snickered, then wiped her eyes. \"So, do I look presentable?\"\n\n\"Not quite as good as you look right after I've balled your brains out, but pretty good.\"\n\nThe Princess blushed, but she had to smile. Farmer seemed to have already recovered and was looking at life with her customary zeal and humor. \"Bitch.\" Then she grew serious again. \"Farmer, I . . . I think that I should thank you. All of the gang, really, but especially you. You've done a lot more for me than you really needed to, and I'm not just talking about . . . you know. The sex.\"\n\n\"That was more fun than chore anyway. An honor bestowed, if you will.\"\n\nVanesse rolled her eyes. \"Anyway, thank you. Honestly, you're the first friend that I've actually made in fifteen years, despite how things started.\"\n\nThe werehyena matriarch held the smaller woman against her and stroked her hair. \"It was a privilege.\"\n\nThe Princess looked past Farmer to Lillian, who was hovering and pretending not to eavesdrop. \"So, why are you so worried about that vampire? The one I got rid of?\"\n\nLillian sat down and stopped fidgeting. \"Because she is . . . was . . . a full vampire lord, she's over five hundred years old, and she was completely evil before she ever went insane. She developed the ability to see into the future, and you know that the history of seers is littered with madmen and lunatics.\"\n\nVanesse nodded. Seeing into the future was too much for a single mind to handle. With an infinite number of possibilities, even looking a \"narrow\" slice of them was too much for the finite brain to handle. \"So why didn't someone do something about her?\"\n\n\"Ever try to sneak up on someone who can see the future? She was always gone before anyone could catch up with her. The idea that you were able to force a soul that powerful out of her own body is kind of intimidating.\" Lillian realized she needed to provide the girl some comfort. \"Listen, I believe that you're right and that she's right and that there is no trace of Natasha left in there, but the fact that Trina lived in your body for a day proves that it CAN happen. Between myself, the Representative, and Clara Yellowtail, Lord Stapleton's shaman, we should be able to rule definitively that Trina is safe and in full control of that body. It'll just be about five more hours.\"\n\nVanesse looked back. \"Could we maybe let someone go back there? Jack maybe? For all her belly-aching, I think she actually likes him, and she should have a friend with her. She's going through some stuff I hadn't even thought about.\"\n\n\"I think that would be a fine idea. We can transfer Jack over the next time we stop for gas, if he wants to.\" Lillian smiled a brilliant smile, and Vanesse realized just how beautiful this woman was. \"So, you've been cooped up for a long time. Why don't you have some hot chocolate or coffee, have a seat, and we'll get you caught up on current events. Okay?\"\n\nThe Princess returned that smile, sat down with Farmer glued to her side, and just began to talk.\n\n----------- ----------------\n\nIn Savannah . . .\n\n----------- ----------------\n\n\"Really? Five thousand songs?\" Vanesse asked. She had actually learned quite a lot in her trip through Georgia and while it had not quite made up for a decade and a half of isolation, it had helped. But when she had arrived at the estate of Sheriff Banshee, she had been given a \"cultural liaison\" and temporary bodyguard who was a little more hip than her associates. Vanesse had been fixed at the hip to a vampire named Bunny since arriving, and in the last hour, the Princess had learned a few things about her new compatriot. One, Bunny had opinions on just about everything. Two, she liked to talk about her opinions. Three, she had no off switch.\n\n\"Seriously, this is the most bitchin' Ipod ever! See, you can just touch the screen and you've got all the controls. Totally wicked. I really need to organize my playlists though, because this thing'll bounce around from Chopin to ZZ-Top, and that's kinda a leap in my whole listening vibe thing.\"\n\nListening to Bunny was a something of a game of mental acrobatics, but the girl just made Vanesse smile. She was happy to exist. She already knew that Bunny had only been dead for about a year, an existence saved from Leukemia, and she was, by her own admission, \"a total bondage submissive slut.\" Apparently, everyone in Lord Stapleton's immediate House, and by extension through his vampiric daughter Banshee's House, were into bondage, and they were quite unapologetic about it. And despite her bubbly attitude, the young vampire had a fully functioning and somewhat impressive brain, when she chose to actually connect it to her mouth.\n\n\"So, do you get to see the dragons often?\"\n\n\"Yes!\" Bunny said excitedly, jumping up and down like an excited schoolgirl. \"Nu, the Horned Dragon . . . she and I are buds. I mean, she's not even one year old yet, but she already has a favorite chocolate bar, and I've got her totally hooked on Britney Spears music.\"\n\n\"Who?\"\n\nBunny looked aghast. \"Oh my God! You don't know . . . of course you don't. You've been in Alaska for like for-EVER. Britney Spears is just one of the most amazing performers ever.\" The stacked young blonde vampire began frantically searching for something on her Ipod, then gave Vanesse one of her earbuds to listen to.  \"Hit me baby, one more time,\" Bunny sang, her body beginning to dance in her own little world.\n\n\"It's . . . catchy?\" Vanesse half-said, half-asked. She actually found herself liking the song and feeling guilty about liking it, all at the same time.\n\n\"Totally.\"\n\nBanshee's compound was a very interesting place, designed like an ancient Japanese palace, and Bunny and Vanesse were hanging out in a small room with paper walls. The Princess had been able to take a long, hot shower and get into some clean clothes. Someone had arranged for a royal elvish robe to be sent while she was getting cleaned, and Bunny had told her it made her look \"totally regal and stuff.\" Bunny had just helped Vanesse finish with her hair when the door slid open and Lillian stepped inside.\n\n\"Lillian!\" Bunny said, bounding over, remembering herself, then getting on her hands and knees and kissing Lillian's sandal-clad feet. She behaved like the submissive that she loved being.\n\n\"Lillian smiled slightly, then motioned with her chin to rise. \"For the Princess's sake, we are going to be 'off' for the rest of the evening.\"\n\nBunny looked visibly disappointed. \"But you have such pretty feet!\" She looked over at the Princess. \"Aren't her feet cute?\"\n\n\"Adorable,\" Vanesse said. \n\nThe redheaded necromancer laughed. \"I apologize that Lord Stapleton was not immediately available to meet with you. He is arranging the final transportation for the Alpha and the Shepherd, and apparently your uncle, the King, is on his way as well.\"\n\nVanesse's face fell. She did not want to deal with elvish politics or crowns or treachery at the moment. She just wanted to catch her breath, make sure that Trina was going to be okay, and then . . . well, she needed to recharge. And she could just imagine her uncle's face when she told him how she planned to get her battery up.\n\nAnd speaking of her battery, she saw Farmer's face peek around the entrance to the room. \"And in case you're wonderin' I'm doin' just fine.\"\n\nVanesse let out an unladylike snort. \"You and cockroaches will survive until the sun goes supernova.\"\n\n\"But I'll survive lookin' good!\"\n\nThe Princess's eyes caressed every inch of that hard physique and had to admit, the woman cleaned up well. She was still covered in tattoos and wearing biker's leathers, but the leathers and the skin were clean. And underneath the chaps and denim, she knew what other secrets that body had. She got on her toes and hugged the taller woman. \"Yes, you will.\"\n\nFarmer felt a warming feeling in her groin. \"Better back off, or we may be late.\"\n\nLillian raised her eyebrows. \"Have you had a chance to replenish your energy, Princess?\"\n\n\"No, I . . . wait. I need to get through these next few hours. I can't stop to think about . . . enjoying myself.\" \n\nThe other necromancer raised an eyebrow. \"Your Highness, you used up all of your magical reserves. You'll hardly be at your best if you fall asleep out there.\"\n\n\"I slept on the bus! And . . . and I need to make sure that Trina is all right.\"\n\n\"Trina is fine,\" Lillian replied. \"We confirmed that she is the only soul in her body, and she is currently attempting an adjustment that no one in your race's history has ever had to make. She needs time.\"\n\n\"I can't just do IT. Lord Stapleton is waiting!\"\n\n\"If you knew Lord Stapleton like I do, you'd know he would never begrudge a beautiful woman a quickie.\"\n\nBunny nodded in vigorous agreement. \"I can testify to that. Happily.\" She grinned. \"This one time, he handcuffed me to a carousel horse and --\"\n\n\"Bunny, this isn't about you. And that was hardly quick.\" Lillian looked at Vanesse and smiled, and there was a wickedness to those lips now. \"And I would be a poor hostess indeed if I did not offer my own services and that of Lord Stapleton's House in making sure that you are made very, very comfortable.\"\n\nVanesse's eyes shot open. \"Wait, are . . . are you hitting on me? AND trying to get me to have sex with Farmer?\"\n\n\"Hey, what about me?\" Bunny asked.\n\n\"I need someone to guard the door.\"\n\n\"Hey! That's just mean, and not the fun kind of mean where I'm getting spanked with a leather belt!\"\n\n\"You're all insane! The entire outside world,\" Vanesse said. \"I thought it was just her,\" she added, pointing her thumb at Farmer.\n\n\"Can we get back to the part where I'm getting left out of the sex?\" Bunny pouted.\n\n\"Okay, you're getting left out of sex. Better yet, I'm going to make you watch,\" Lillian whispered heatedly. \"You might learn a thing or too. Do you understand me?\"\n\nBunny gulped. This was what she was used to. Dominance. Lillian was a switch, meaning she could be either dominant or submissive, and she had just let Bunny know the score. \n\n\"Hey, I haven't agreed to any of this!\" The Princess was flabbergasted that this was even happening.\n\n\"No, and you are free to say no of course. But do you want to?\" Lillian asked. \"The King will be here in a few hours, we're going to be wrapped up in political happenings, you have to broadcast your end-of-distress beacon, and then there will be any number of other things to do. This may be your last chance for quite some time to indulge.\"\n\n\"Really? You're going to play the magnanimous angle?\"\n\n\"Is it working?\"\n\nVanesse grinned. A minute later, she was on all fours, Farmer ramming her enormous black cock into the elf's tight sex while Vanesse tasted Lillian's smooth pussy. Lillian was demonstrating both her flexibility and her enthusiasm, her legs forming the perfect splits while she gripped Vanesse's hair and ground that eager mouth against her sex.\n\n\"She's been practicing,\" the redhead murmured happily, glancing at Farmer. \"How has she managed since every one of your people is endowed?\"\n\n\"She had sex with Trina in her dreams. The battle-dancer is a good tutor, so it would seem.\"\n\n'I should be thinking about her,' Vanesse thought, 'but she'd get mad at me if I did.' And the Princess was also digging the energy. Farmer's big black cock had become familiar to her in the last week, and she reacquainted herself with the ever light ridge and bump on that wonderful pleasure device. \n\n\"Mmh, Princess, I think that you should declare asylum here in Georgia. I know so many people who would love to expand your knowledge of the . . . uh . . . uh . . . magical and carnal arts.\"\n\nThe texture of a real pussy was much more delightful that Vanesse could have imagined it. Had Trina been disappointed because she had been limited by the power and extent of Vanesse's thoughts? She hadn't complained, and now the Princess was learning some great new techniques. Because Lillian was more than happy to give advice, usually in the form of \"Right there, right there!\"\n\nAnd poor Bunny stood nearby, fully dressed in combat armor and pressing her legs together, looking on with a hunger that only a creature of the night could possess. She had been forbidden to even touch herself, and it was taking its toll.\n\n\"Don't look at her,\" Lillian requested. \"She is a spectator only.\"\n\n\"She's right. You are mean.\" Vanesse pressed the tip of her tongue against Lillian's clitoris, then sucked gently.\n\n\"I'm still teaching her that all good things happen to those who wait.\"\n\nVanesse dove deeper, pulling Lillian's pussy lips apart while sending her tongue in for an ice cream scoop. She did several more in succession, then the senior necromancer suggested she slow things down. She was not given much choice, as Farmer was pushing a thumb into a previously untouched place. \n\n\"What are you --\"\n\n\"It's okay, not putting anything else in there,\" Farmer assured her. \"Just giving you a new experience is all. Relax, and try and enjoy it.\"\n\nEnjoying it turned out not to be a problem. It had just freaked her out. Having a big cock in one point of entry while the other was teased was turning out to be fun. She wondered if she could handle --\n\n'Okay, one thing at a time,' she reminded herself. She squeezed Farmer's rod with her vaginal muscles. She did not have much control yet, but it was something else that she was learning, and the attempt made Farmer give off her happy growl.\n\nLillian let herself relax and gave herself a bit of a magical push to hurry towards climax. She really did need to get the Princess over to Lord Stapleton. But rarely had she seen such an unpolished gem, and she could not resist polishing it a bit more. \n\n\"That's it Vanesse, that's . . . oh fuck yeah!\" Lillian brought her legs together on the sides of Vanesse's face and proceeded to climax. \n\nThe Princess could feel the power flowing onto her tongue, and she drank it in like a battery. It was wild, and the energy smelled of roses and cinnamon, making her hungry to take all of it and more.\n\n\"Okay . . . okay, you can stop now,\" Lillian whispered as Vanesse nuzzled her sensitive sex, each caress of that hard clit like delicious torture. \n\n\"What a rush,\" Vanesse replied happily. She pushed up with her arms and looked back, relishing the view of Farmer thrusting into her, grabbing the Princess's soft ass cheeks with strong fingers.\n\n\"If you're done at that end,\" Farmer said with a grin, pulling out and then maneuvering herself in front of Vanesse. \n\nThe Princess, with more enthusiasm than she could have imagined just a week earlier, opened her mouth and wrapped her lips around the mushroom-like crown of Farmer's cock. She did not use her hands, letting the werehyena use her mouth like she had used her pussy, namely at her leisure.\n\n\"Where are my manners?\" Lillian asked. \"I'm letting my guest be neglected.\"  She lay on her back and scooted between Vanesse's legs. But before she went to work, she had some instructions for Bunny. \"Bunny, attend the Princess's asshole. Now.\"\n\nVanesse was in heaven. Bunny lunged into action, happy to finally have something to do, and her tongue danced around the pink ring of the Princess's sphincter, while Lillian was demonstrating just exactly how cunnilingus was supposed to be performed. The ladies of the House of Stapleton knew how to use their mouths. And speaking of \"using their mouths,\" Vanesse continued to use hers on the chocolaty goodness that was Farmer's enormous t-girl cock. \n\n\"Suck it,\" Farmer cooed. \"That's a good Princess. Fuck, you really need to come with us. I could use a good daily blowjob from a hot elf slut.\"\n\nVanesse blushed. What surprised her was not the language that Farmer had used, but how much she had enjoyed it. After fifteen years of being told how dirty sex was, she found herself agreeing. And liking it. She stroked that dick with both hands, leaving only the head in her mouth. She wanted Farmer's cum, like she was lost in the desert and it was the only thing available to drink. \n\n\"Well, I guess that's my signal to hurry it up,\" the werehyena said, letting herself relax so that she could get off more quickly and give Vanesse what she craved. \n\nBut Lillian's tongue and lips, as well as Bunny's fingers and tongue in Vanesse's ass, were too much, and Vanesse was climaxing before she could bring Farmer to release. Not that she was complaining. Orgasms were far too much fun to be too concerned with who's occurred first. Her body trembled, shivering with hidden delight as the climax built, then slowly tapered off.\n\nWhen Vanesse was done, she opened her mouth to help finish Farmer off, the black t-girl had other ideas. She flipped Vanesse onto her back and then mounted her chest, putting all nine-inches of her meat between the elf's full breasts and then pushing those breasts together.\n\n\"What are you --\"\n\n\"It's called breast sex,\" Lillian explained, running her hand over Farmer's ass as she began pumping between Vanesse's tits. \"Something you seem almost perfectly built for. Tip your head forward and suck on Farmer when the head comes through.\"\n\nVanesse was pretty much willing to try anything at this point, and Farmer certainly seemed to be enjoying the feeling. Surprisingly, having a hot, hard piece of flesh between her breasts was actually somewhat pleasant. When she caught Farmer's crown between her lips, the werehyena moaned. Encouraged, Vanesse began to play, sometimes sucking on the head of Farmer's cock, sometimes just kissing it or caressing it lightly with the tip of her tongue. \n\nBut then Farmer did what Vanesse found so unnaturally exciting, namely she took charge. She grabbed Vanesse's head and held it in place so that when she thrust through the woman's cleavage, black cock penetrated the Princess's mouth, where Farmer proceeded to climax. And could that woman ever cum! It was not long before it was spilling out of Vanesse's mouth, despite her attempts to swallow it all.\n\n\"Savor it,\" Lillian cooed. \"It sounds strange, but you can get more energy if you don't rush.\"\n\n\"You said this was a quickie!\"\n\n\"Don't talk with your mouthful, your Highness. While it is kind of sexy, it's not dignified.\"\n\nVanesse swallowed the rest of Farmer's load. \"I just got fucked by a relative stranger and a werehyena.\"\n\nLillian looked serious. \"Never let anyone tell you that the pursuit of pleasure between consenting individuals is ugly or undignified or ignoble in any way. You are a beautiful, smart woman who has a bright future ahead of her.\"\n\n\"Assuming I survive,\" Vanesse grumbled.\n\nThe redhead leaned over, kissed Vanesse in a more than friendly fashion, then smiled at her. \"You will. I'm thinking that you're stronger than you realize.\" She glanced at Bunny, who still looked so horny that she could almost die. \"You were a good girl. I promise you that later, after dinner, you will be amply rewarded.\"\n\nBunny bowed her head in respect, but secretly she was already looking forward to what Lillian had planned for her. \"Thank you Mistress Lillian.\" Bunny proceeded to sponge and towel the Princess off, arrange her hair, and helping her dress before heading over to the main hall.\n\n\"So, is it going to be worth it?\" Vanesse whispered to her vampire bodyguard, glancing towards where Farmer and Lillian where talking. \n\nBunny just grinned and said, \"It's always worth it. You don't get to be a dominant in Shane's household unless you know what you're doing.\"",
        "\"You really enjoy it, don't you? The games?\"\n\nThe young woman nodded enthusiastically. \"It's no different for me than breathing used to be. It's just who I am. Some people, like Shamira, need to be convinced that it's okay, but Shane and Renata set her straight on it.\"\n\n\"How so?\"\n\n\"Shane told her that being a sexual submissive is not the same as being weak, and if you get to know Shamira, she ain't weak. Then Renata reminded her kinda what Lillian was talking about. It's okay to want stuff, even if some people might consider it weird or freaky. Shamira was so used to having to be strong all the time that when she finally was able to let go, she was happy.\"\n\n\"Do you think . . . well, that maybe I --\"\n\n\"Nah. I don't see you as a sub. Just . . . well, slutty. And trust me, that's a good thing in my book.\"\n\nVanesse blushed, but she smiled. \"I like you.\"\n\n\"Back at ya! And now that you're hip to my taste in music, we can be BFFs!\"\n\n\"BFF?\"\n\n\"Best friends forever.\"\n\n\"Technically, Trina is my best friend.\"\n\n\"Oh, no sweat. BFF is an entirely different kind of best friend.\" The bubbly blonde proceeded to break down text-speak and modern friendships, filling Vanesse's head with pop culture like she was feeding her with a fire-hose. By the time they got to the main dining hall, the BFF status had been firmly established.\n\nThey arrived at the dining area, and it was full to the brim with lycanthropes, vampires, human guards and servants, a few other elves, and she was pretty sure that she saw a fairy or two flitting around the room. She had never seen such a conglomeration of beings in one place outside of a royal event.\n\n\"Lord Stapleton,\" Lillian said, parting the crowd with a wave of her hand, \"May I present Princess Vanesse Bellethial, heir to the throne and crown of the Elvish people.\"\n\nShane Stapleton was very close to the poster-boy for the modern view of vampires. Standing at six feet, two inches, he wore a custom made suit that fit him perfectly, and boy did he look good in it. Sharp blue eyes stared at her from underneath dirty blond hair, and she could tell that those eyes did not miss much. Clean shaven, full lips . . . 'Damn,' she thought. 'No wonder everyone wants to work for him.'\n\n\"Your Highness,\" Lord Stapleton said, \"It is an honor to welcome you to my territory, and only wish that it had not been under such dangerous conditions.\" He took her hand and kissed it, every bit the gentleman. \"And may I introduce Banshee, oldest child of my line and territorial lord. This is actually her estate.\"\n\nThe woman in question stepped forward, dressing in a traditional Japanese kimono. She was not a particularly large woman, but she had a determined, commanding presence that almost radiated from her Asian features. Vanesse knew that Banshee had been Lord Stapleton's chief assassin for approaching two centuries, and she had a reputation that made even an Elvish Princess nervous.\n\nBanshee simply nodded and bowed. \"It is an honor to meet you, your Highness. Know that you are safe and welcome here.\"\n\nVanesse curtsied. \"And thanks to both of you for arranging my safe passage for the last part of my journey. Being rescued by a greater dragon was . . . well, something that I shall remember until the end of my days.\" Shane smiled, making Vanesse's heart beat a little faster. 'I am a slut!' she thought.\n\n\"Shamira has that effect on people.\"\n\n\"And I would like to introduce you to Farmer, matriarch of the Joker's Wild werehyena pack. Without her and her comrades, I would never have made it this far unharmed.\" \n\n\"Greetings, and be welcome,\" Stapleton replied.\n\n\"Lord Stapleton, my other companion --\"\n\n\"Is currently resting,\" Lillian assured her. \"The spells we cast exhausted her somewhat.\"\n\nLord Stapleton leaned in. \"And she seems somewhat disoriented still. After dinner, we shall attend her so you can reassure yourself that she is well.\"\n\nVanesse smiled and blushed. \"Am I that obvious?\"\n\n\"Lillian told me of what happened and what she could of your relationship. I would be disappointed if you were NOT concerned with her health. Actually, the Representative is with her now.\"\n\n\"The Representative?\" Vanesse knew that the vampire's representative to the Tribunal was here, but it was still impressive to hear her name. The Representative was reputed to be a thousand years old, making her easily one of the oldest beings to walk the earth.\n\n\"Yes. She apparently knew the vampire who's body Lady Trina now possesses, and felt she might be able to help your friend transition.\"\n\n\"Thank you,\" Vanesse said. \"For looking after her. She deserves it more than most.\"\n\nShane offered his hand to his young guest, impressed that she cared more for her guard than for herself. He glanced at the less polished but still fetching Farmer. \"You and yours are welcome to join us for the feast. I promise to compensate you, on behalf of the Tribunal, for your considerable expenses in rescuing the Princess.\"\n\n\"There was an offer of free grub in there, wasn't there?\" Farmer asked with a grin.\n\nShane cocked an eyebrow and almost smiled. \"I believe there was.\"\n\nFarmer turned, whistled, and her gang came pouring in shortly thereafter. There were some odd looks from the other guests, but Joker's Wild did not care. They were used to being stared at.\n\n\"Farmer, would you sit with me?\" Vanesse asked, suddenly anxious to have at least one person she knew nearby.\n\n\"I'll keep an eye on you,\" Farmer replied, her voice becoming unusually solemn. \"Don't you worry.\"\n\nBanshee snapped her fingers, and another place was set at the high table. \n\n\"Princess, your uncle is on his way, as well as is the delegation from the Tribunal,\" Shane said softly. \"They have been delayed by storms up north, but should be hear by sunrise.\"\n\nVanesse went from relaxed to anxious to angry. \"Good. I have a few things to say to . . . several people,\" she almost snapped.\n\nLord Stapleton did not look surprised. He knew about elvish politics. \"If you would like, I am well-versed in politics. If you would like to discuss things before everyone arrive, you might find my ear to be quite attentive.\"\n\n\"Thank you, Lord Stapleton. I may take you up on that.\"\n\n\"Ah, there is someone I believe that you've already met.\"\n\n\"Lady Shamira!\" Vanesse said with a child-like glee. \"I'm glad to see you again.\"\n\nThe living incarnation of Shadow Wing was leaning against one wall, a silky black robe covering that goddess-like body, while her long black ponytail was draped over her shoulder and fell between two rather large breasts. Standing next to Shamira was one of the most deliciously sensual looking women that Vanesse had ever seen. She was a young, brown-skinned woman of Native American descent. Her long legs were on display for all to see, as the only thing below the woman's waist were a loincloth that barely covered the private areas, and a pair of leather moccasins. A leather vest encompassed small, soft breasts, and the woman's hair was decorated with a variety of colored feathers. And damn, that girl had the most amazing lips that Vanesse had ever seen, full, delicious, and smirking.\n\n\"You've got another fan,\" the new woman said. \"Another to add to your list of admirers.\"\n\nShamira looked like she wanted to blush, but couldn't. \"Don't start.\"\n\nThe woman grinned, then faced Vanesse. \"Hello, I'm Clara Yellowtail. I'm Lord Stapleton's shaman, though I currently reside here at Banshee's estate.\"\n\n\"Are you here to look after the dragons?\" Vanesse asked, thinking it wise to have a nature-based magic user around to help look after a new species.\n\nClara glanced over at Shamira and smiled. \"Well, one of them anyway.\"  Her gaze went far beyond friendship or even lust. It was the look Vanesse's father had whenever he looked at his queen. Whatever relationship these two had, it was not casual. And the returned look, one of pure devotion, sealed the deal.\n\n\"Does she really cause that much trouble?\" the Princess asked.\n\nShane coughed a comment into his hand, Clara grinned . . . even Banshee strove to suppress a smirk.\n\nShamira glowered at all of them. \"Okay, I do not --\"\n\n\"Yes, you do,\" they all said in unison.\n\nClara ran a finger along Shamira's jaw. \"If you didn't cause trouble, I wouldn't have any reason to discipline you.\" Her voice had gone from affectionate to downright sultry in just under a second. \"What fun would that be?\"\n\n\"I'd tell you to get a room, but dinner is almost served,\" Shane said. \n\nShamira looked somewhat intense, and her eyes did not leave Clara's face. \"But Lord Stapleton, the children are asleep, and how often --\"\n\n\"Dinner . . . now,\" Shane said firmly, then smiled as the muscular vampire-turned-dragon practically pouted all the way to her seat. \n\nDinner was a spectacular event and, for a while, Vanesse forgot her troubles. The food was amazing, and Lord Stapleton had even arranged for a string quartet. He and Banshee sat next to each other, with Vanesse and Farmer on one side while Clara and Shamira sat on the other. Banshee had introduced her to Aven and Neva, a pair of brother/sister elvish assassins that had sworn themselves to Banshee's service. For now, they stood nearby, protecting their Princess, but their presence only began to remind her of someone else's absence. She wanted to go check on HER bodyguard. She was getting ready to ask to see Trina again when a disturbance was heard toward the front of the room.\n\nThe music stopped, the crowd parted, and King Tarrin Ralisen, ruler of the elves, made his appearance. He was flanked by thirty elite elvish guards, as well as by Baron Glennon Montain, his guard, and Torris, the Baron's personal \"problem solver.\" Instantly, Vanesse felt a chill. She looked at the Baron, who was supposedly her uncle's first choice to be Vanesse's king, and she saw the eyes of the man that she was sure had put the death bounty on her head.\n\n\"Princess,\" the King said, hurrying forward, his face showing a rare moment of actual relief. \"We were so worried. Are you unhurt?\"\n\nVanesse rose, her legs trembling, but her voice was steady. \"I am well, your Majesty. It was a frightening ordeal, but Lord Stapleton has been a most gracious host.\" Then she saw how the King was looking at Farmer, and she had to put her plan into action. One of the principles of elvish politics was to set the tone of the conversation. \"And this brave werehyena and her pack escorted me safely from here after rescuing me from my captors.\" \n\n\"What captors? Who were --\"\n\n\"I never saw the faces of those that took me from our Alaskan compound. I was drugged, and they were all wearing masks. By the time I awoke, I was in the care of Joker's Wild.\"\n\nThe King was not buying any of this, but he could not accuse the Princess of lying directly, and she knew. He did not know what game she was playing, but she was just a foolish, young girl. He was the king. \"Farmer, is it? Who exactly did you rescue her from? I assume that there are bodies that can corroborate your story?\"\n\n\"I didn't realize that we needed an alibi for a rescue,\" Farmer said evenly, summoning up her alpha's strength. \"I didn't get a good look at the guys holding her, but getting her out safely was my highest priority.\"\n\n\"We wanted to let you know where we were,\" Vanesse said, trying not to talk to quickly. \"Unfortunately, we had discovered that a price had been put on my head, and finding people we could trust was problematic.\"\n\n\"You could have contacted me,\" the King said, annoyed that his desire to punish Farmer and her flea-bitten mongrels was being circumvented. 'Perhaps the Princess is not quite as much a dolt as I thought,' he contemplated.\n\n\"Information obtained from the first group of assassins who made a play on my life indicated to me that my enemy or enemies might very well have contacts within the nobility. While I trust you, your Majesty, there are those in Court that hold no love for me.\"\n\n\"Are you suggesting a spy? Amongst MY council?\"\n\n\"I only suggest that I chose to be cautious. I saw my oldest friend bleeding in the snow from bullets meant for me, so I hope you will forgive me my paranoia.\"\n\nThat stopped the King in his tracks, but only for a moment. \"I am sorry Princess. I did not even notice that Trina was not at your side. I had heard that she had not been witnessed at the scene of the last rescue attempt by the Royal Hunters, but . . . my condolences.\"\n\n\"Save your tears, your Majesty,\" came a smooth, freezing cold voice from a door behind Lord Stapleton. From out of the shadows, the new body of Trina stepped forward. \"I am not quite as dead as I was supposed to be.\"\n\n--------------- -------------\n\nTo be continued . . . "
    ],
    "authorname": "Evil Alpaca",
    "tags": [
        "transexual",
        "lycanthropes",
        "vampires",
        "lesbians",
        "undead",
        "magic"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/the-best-medicine-ch-05"
}
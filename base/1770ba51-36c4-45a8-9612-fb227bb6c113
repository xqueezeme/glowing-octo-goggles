{
    "title": "Organism X Ch. 05",
    "pages": [
        "Author's note: \n\nSorry this took so long. Honestly, the writing didn't take too long, but life got very busy. Anyways, this is more of a transitions chapter, but I think it sets up some interesting future developments. Hope you enjoy!\n\n*****\n\n1.\n\nThere was a rising pang of anxiety rising in Leah's gut as she walked down the hallway towards the boys' wing. Megan walked with her and Leah could sense the girl's own sense of foreboding, streaming into her brain like a staticky radio signal. Things were growing out of control. \n\n\"Tell me again how you left them,\" Leah said. \n\n\"They seemed out of it. Pale. Passed out. Not too different from how you described it.\" \n\n\"When I did it, I didn't give birth to some monstrosity. Besides, you're different than me. I can feel it.\" \n\n\"How so?\" Megan asked, genuinely puzzled. \n\n\"I don't want to get into it right now.\" \n\nIt was going on nine in the evening. The girls left the RA's room once it seemed that both of their newest victims were well under control. Emily already showed telltale signs of transformation, her breasts swelling, her body taking on an unnatural glow of beauty. Even more useful, the mousey redhead now seemed entirely under the thrall of Lindsay, her sire. Both of them were locked in a coital spiral of pleasure like long-time lovers. \n\nFelicia, meanwhile, was nothing more than a crumpled, twitching mass on the tile floor. Whatever the special creature that emerged from Megan's pussy was, it seemed to have complete shutdown the RA's higher faculties. \n\nLeah pushed through the double doors and felt her blood run cold. In front of her was a disordered crown of students and public safety officers. The entire wing was filled with nervous chatter. Both girls picked up their pace, plunging into the throng.\n\nThey rounded the corner in time to see an EMT hauling a stretcher out of a dorm room. The body on the stretcher was covered with a white sheet. \n\nLeah froze. Had it not been for the mass control over her nerves the parasite that inhabited her body exhibited, Leah would likely have started shaking in her boots. Behind the first stretcher, another emerged. Another body. Another sheet. \n\n\"Leah,\" Megan whimpered from behind her. \"Leah I-\" \n\nLeah cut the girl off, her instincts kicking in like lightning. \n\n\"Not now,\" she said in a quick whisper.\n\nLeah whirled around and grabbed Megan by the arm, dragging her back towards the girls' wing. \n\n\"We need to go.\" \n\nThey pushed right through the double doors and bolted through the lobby of the dorm. \n\n\"Leah, I killed them.\" \n\n\"Just shut the fuck up until we get back to Felicia's room.\" \n\nLeah caught her breath. Two dead boys. Two dead, human beings, killed by her actions. Not directly, but blood was on her hands. She wanted to feel some pang of guilt. At least horror. \n\nNothing. Leah felt nothing. Only the urge of self-preservation drove her forward. What the hell was happening to her? \n\nRegardless, there was no time. They needed to regroup. There was also her former roommate to reckon with. The one that got away. \n\n2.\n\nIt was the kind of rainy day where the color gray saturated every single thing, leaving an empty and drab world. The fluorescent lamps of the dining hall rained sterile, cold light down on Jessie's head. The small bit of scrambled eggs and cantaloupe on her plate sat uneaten, repulsing the exhausted girl.\n\nWhere do I go from here? Jessie wondered to herself. \n\nThere was so much to process and yet so little time to do so. Leah had become a monster. A predator, hunting down girls and spreading her affliction. She already had three or four girls now.\n\nAn image of Felicia's desperate face flashed through Jessie's name. It was the worst image from the night prior. \n\nYou left her, a voice spoke in Jessie's mind. She needed your help and you let her become one of them.\n\nWhat were they? What had Leah become? Then there was that snake-or worm-that attacked Felicia. It must have been the key to how Leah spread whatever was happening to her.\n\nA rolling burst of collective laughter nearby caused Jessie to jump suddenly. \n\nAt one of the larger tables nearby, a large, bespectacled boy with a neck beard was waving his arms and talking loudly to a small group of guys and girls. A rather heavy-set girl with pale blonde hair was letting out a low giggle as she listened. \n\n\"The school gives us weapons. LITERAL WEAPONS, and then they give us a broken closet to store them in. Absolutely genius!\"\n\nThe giggling blonde spoke up.\n\n\"Do you think anyone's going to steal any fake swords though, Bryce?\"\n\n\"I don't know, most people don't know. Besides, the rec building staff and fencing club, most people have no idea.\"\n\n\"Then it's a great idea to shout about it,\" another girl said, this one with short hair dyed to a reddish-pink shock. \n\nThe guy, Bryce, shrugged and the group's conversation moved on to other things. However, Jessie's mind was already starting run on overdrive. Leah was out there and her numbers were growing; what was worse, Jessie seemed to be her number one target. Some protection would help. \n\nJessie slinked up from her seat and put her plate on the conveyor belt at the back of the cafeteria, most of the food remaining uneaten. Then she started towards the front exit, hoping desperately she would not be seen. \n\nEverywhere, Jessie felt eyes bearing down on her. Anyone could be turned. Any girl at least. Maybe guys too. \n\nShe reached the double doors that lead outside, here eyes pointed at the ground when she collided against person. \n\n\"Hey watch it,\" a feminine voice Jessie recognizes said sharply. \n\nBoth women stepped back and stared at each other. Jessie recognizes the girl immediately as Casey Mozolla, a blonde, curvy girl on the Hornettes team. Standing at her sides were Nina and Emmy. \n\nJessie stood petrified, gazing desperately at the girls. If they were turned, what the hell was she supposed to do?\n\nNina spoke first, a look of concern that seemed sincere enough creeping across her face. \n\n\"Hey Jessie, are you okay? You-you look pretty run down.\"\n\nJessie eased up slightly.\n\n\"I'm fine,\" she said.\n\n\"Did your, um, problem get worked out?\" Emmy said. \n\nJessie remembered the night she had spent on the floor of Nina and Emmy's dorm room. That night had been one of the most confusing and anxious nights for her, only to be bested the day after by a long shot. \n\n\"No, I didn't,\" Jessie said. \"Have you seen Leah? Talked to her, been around her?\"\n\nNina and Emmy shook their heads, looking increasingly concerned and confused.\n\n\"I saw her,\" Casey piped up. \n\nShe looked annoyed, as if each passing second was one inconvenience too much. \n\nJessie fixed a hard gaze on the voluptuous blonde girl. \n\n\"Where? Were you near her?\"\n\n\"Chill. I saw her on the path. I waved, but I don't think she noticed.\"\n\n\"Good,\" Jessie nodded. \"Stay away from her. Megan and her roommate too.\"\n\n\"Why?\" Nina asked? Jessie was cutting out a fairly significant portion of her friend group by now. \n\n\"I-I can't explain. Just please listen to me. Avoid them as much as you can for now. They're-\" Jessie trailed off. What the hell were those girls? \n\n\"Okay,\" Emmy nodded along, \"Sure thing. We'll stay away.\"\n\nJessie knew she was being humored. The sad, sympathetic looks, the verbal head patting. They weren't going to listen. No one was. \n\nIt was all insulting, but the girls' patronizing gazes were a million times better than the cold hunger Leah showed Jessie the night prior. These girls weren't turned. Not yet at least. \n\n\"Please, just stay away from them,\" Jessie murmured in a feeble voice. Then she pushed past them and out into the rain and gloom beyond, making a beeline for the gym.\n\n3.\n\nErin Stephens knocked on Felicia Owens door for the fifth time and again heard nothing from the other side of the door. The hallway was empty save for the timid freshman, most of the girls in the dorm out at class. \n\n\"Come one Felicia, I need you girl,\" Erin said softly to herself. \n\n\"Talking to yourself?\" A masculine voice said from behind her. \n\nErin yelped and nearly jumped out of her skin. Whirling around, she saw Evan Sherman, RA for the opposite, male, hallway. He was wearing his usual dopey smile, but there deep purple circles around his eyes and his skin was pale. \n\n\"Why did you do that? You scared the crap out of me Evan!\"\n\n\"Guess I can't help myself. What's up?\"\n\nErin ran a dark, delicate hand through her curly black hair and took a deep breath, hoping to get her bearings.\n\n\"I need to check in with Felicia about my recommendation form,\" Erin said. \"It's for my RA application.\"\n\nEvan raised an eyebrow. \n\n\"But you're a freshman.\"\n\n\"Under special circumstances, a freshman can become an RA her second semester if there's an opening. I need a recommendation from my current RA.\" Erin pointed back at Felicia's door.\n\n\"Huh, well aren't you just your goodie-two-shoes self.\"\n\nErin cringed internally. Her reputation quickly morphed into that of the dorm's dorky little sister. It didn't help she was the only freshman on the floor. \n\n\"It pays well,\" Erin shrugged.\n\n\"I guess,\" Evan said. \n\n\"Are you okay?\" Erin asked. \"You look tired.\"\n\n\"Not really. Not with what happened last night.\"\n\n\"Oh God, I totally forgot. I'm so sorry. That's so sad!\"\n\n\"Yeah. They were good guys. Pretty freaky that both of them passed.\"\n\n\"Do they know what happened?\"\n\n\"Running an autopsy now. Honestly, it's way above my pay grade. Really shakes you up though.\"\n\n\"Well let me know if I can do anything,\" Erin said.\n\n\"Eh, I'll be fine. But thanks. I'll keep an eye out for this sleepyhead and point her in your direction.\"\n\n\"Thanks Evan.\"\n\nErin spared one final glance towards Felicia's room before walking down the hall leaving Evan at Felicia's door. The world felt darker and Erin needed some fresh air. \n\n4.\n\n\"He's not one of the-\" Bethany trailed off as she pulled into the hospital parking lot.\n\n\"No, he's not one of the dead ones,\" Eliza snapped. \"Don't say that.\"\n\n\"Sorry.\"\n\nEliza bolted into the hospital, Bethany trailing behind her. The woman at the front desk looked up Micah's information at Eliza's behest whole Bethany took in the sickly atmosphere of the lobby. \n\nThe sweet, antiseptic scent in the air sent Bethany back to the days when her grandmother was withering away from pancreatic cancer. I hate hospitals, she thought. \n\nEliza's sharp voice cut through Bethany's unpleasant daydream.\n\n\"What the hell do you mean I can't see him?\"\n\nBethany ambled over to the front desk and found Eliza red faced and broiling. \n\n\"Ma'am, he is not on public visiting hours currently.\"\n\n\"I need to see him. You need to let me go upstairs.\"\n\n\"Why? Are you his girlfriend or something?\" \n\nBethany could tell the nurse had pushed the wrong button. Eliza was going to blow if she did not do something.\n\n\"When will he be on visiting hours? Anytime today?\" Bethany asked quickly, slapping on a bright smile to ease the tension.\n\n\"Maybe,\" the nurse said carefully. \"He's apparently asleep right now. Has a check in with the cardiologist at 11-\"\n\n\"The cardiologist?\" Eliza interjected, her eyes going big.\n\nThe nurse continued, ignoring her.\n\n\"After that checkup and a few tests, he might be ready for visits, if he's up to it. He might not be. That's at least three or four hours down the line.\"\n\n\"We'll wait then,\" Bethany declared.\n\n\"But you have classes. Hell, I have classes,\" Eliza said.\n\n\"It's fine. Come on, it's important to you.\" Bethany said to her friend. She then turned to the nurse. \"Can you let us know if he becomes available.\"\n\n\"If I'm still on my shift, sure.\"\n\n\"Thank you ma'am.\"\n\nThe pair walked over to the beige waiting room chairs and sat down, Eliza grabbing Bethany's wrist as she did so.\n\n\"Thank you,\" she mouthed. There were tears forming in her eyes.\n\n5.\n\n\"I killed them,\" Megan muttered to herself in the dark room. \n\nShe was alone with her back against the door. The blinds were drawn and the room had taken on a funeral gloom. Emily was out somewhere, probably enjoying the changes brought by her nascent infestation. \n\nMeanwhile, Megan was at war with herself. Increasingly, her old, timid self shown through the sexual fog of her transformed state. \n\n\"I killed Brad. His roommate. I didn't mean to,\" she said softly, tears slipping down her cheeks.\n\nMegan felt her body. It seemed almost alien with all the augmented confidence drained away. Her breasts felt too large and heavy, her body so much fuller than before. What the hell was happening to her?\n\nThere was a stirring sensation deep within Megan's womb. While ever aware of the presence of gift Leah had implanted inside of her core, Only now did Megan fully grasp the horror of her condition. It was not just in her. This creature was her. It was a part of her just as much as her arms and legs. \n\n\"I don't want this,\" Megan whimpered. \"Get out of me.\"\n\nSuddenly, Megan felt a wave of energy run through her body, sending her to the floor. It was a mixture of agony and pleasure and something else. Something that spoke to her without words.\n\nSubmit, it told her. \n\n\"No! No,\" Megan cried, curling into a fetal position from the overwhelming sensation. \n\nAn image appeared in Megan's head. It was Brad as she had last seen him alive. Clearly from Megan's perspective, the pair were bucking and humping like animals. With the image, Megan could feel the sensations of that fateful moment.\n\nDeep within the girl, tendrils covered in green slime slithered down her love canal. Three of them emerged, one nearly the width of a snake, the other two smaller and more worn-like. The smaller ones immediately began to caress and tweak Megan's swollen clit while the larger one listened in and out of her pussy.\n\nA wave of unbelievable pleasure washed over Megan as she watched herself drain Brad away. She watched the boy's skin grow pale and his eyes become sunken. \n\n\"This is wrong. It's bad,\" Megan cried, desperately trying to hold onto her old self, the one that knew the difference between right and wrong. \n\nA jolt of electric pain surged up Megan's spine, causing her to spasm on the cold floor. Then, right on the heels of the agony came more Earth shattering pleasure. \n\nWith a sudden rush, Megan came to Brad's dying grimace.\n\n\"No, I can't. This is wrong,\" Megan whimpered futilely. \n\nShe saw more boys now. First Brad's roommate, who she drained even more thoroughly than Brad. Then other faces: boys she had seen or fantasized about. Boys to come.\n\nEach one Megan drained in her vision, siphoning their life energy through her mutant snatch. It all felt so natural. \n\nA voice inside cajoled her, telling her it was alright. In fact, it was natural and good to drain boy after boy. After all, she was a changing girl. A growing girl.\n\nMegan felt a tingle in her dramatically enhanced chest as if to punctuate the point. \n\n\"No-it's, it's, wrong, oh god but so good,\" Megan babbled. \n\nThe young woman writhed on the floor as something overwhelmed her last vestiges of humanity, training her to kill and to spread. \n\n6.\n\nJessie looked around the empty gym and the hallway past the line of glass windows on the wall behind her. Not a soul.\n\nShe reached out and tested the steel door knob of the closet. At first, she felt a little bit of resistance, causing her heart to sink. Then, after a little more pressure, the handle gave and she opened the closet door to reveal a dark, crowded space with a tall ceiling that stretched nearly twenty feet.\n\nJessie flipped a light switch, revealing heaps of sports equipment, racks of volleyballs and stands of what looked like hockey pads. The sight overwhelmed her. \n\nFocusing further back into the closet, Jessie saw the glint of metal. There was a bucket of what looked like fencing swords. Another bucket contained helmets with meshed steel fronts and cloth bibs. Then Jessie saw them. \n\nOn the back wall of the closet, she saw a series of different swords, some metal and some wood, hanging. \n\nJessie worked her way through the mess and finally made it within arms reach of the practice swords. The obvious choice that stood out to Jessie was a fancy metal blade with a fat rubber bumper duct-taped around what she assumed was a sharpened tip. If it was indeed sharp, this was something she could use to kill. \n\nThen the rational part of Jessie's brain kicked in. What better way to keep a low profile than to carry an antique rapier and go around stabbing girls through the heart. Perfect! \n\nJessie looked at the other options and found what she could only assume was a kendo practice sword. It had a circular hilt and a paneled blade that gave when she squeezed it. Not lethal by any stretch, but probably good for quite a few hard hits. \n\nJessie lifted the kendo sword off the rack and felt the grip, giving a few half hearted swings to test. This would do just fine, if she could get the damn thing out of the gym without attention. \n\nAt that moment, Jessie heard footsteps behind her. She whirled around to see a stern, athletic looking girl with faded blue hair staring back at her. \n\nJessie froze, the dual paranoias of fear of worm girls and fear of getting caught stealing from a club sticking her in her place. \n\n\"Are you authorized to be in here?\" The girl at the doorway said, her eyes fixed on the weapon in Jessie's hands.\n\n\"Um yes, I'm here for the swords club-I mean fencing!\"\n\n\"Fencing meets on Mondays, Wednesdays and Thursdays in the evening and it's a Tuesday,\" the girl said, stepping closer.\n\n\"Oh yes, this is for a special training session. You see, I'm new and just getting into, um, Kendo,\" Jessie said, hoping desperately that she had the right kind of sword fighting.\n\n\"I've never seen you with the club,\" the girl said, eyes narrowing.\n\n\"I'm new,\" Jessie said, instinctively moving back towards the wall.\n\nHer heart beat violently in her chest as her mind raced for an answer. Jessie thought back to breakfast and the conversation she had overheard. What had the guy's name been? Billy? Bryan? Not quite, but she was getting closer.\n\n\"Bryce!\" Jessie called out, the name crystallizing in her brain. \"Bryan sent me in to get some equipment. We have Lit and History one together and he really talked up the club and said he would help me get up to speed. I know I probably shouldn't have come alone, but he told me the closet was unlocked and he was busy.\"\n\nTo Jessie's shock, the girl eased up a bit. She stepped back a few paces towards the door before saying:\n\n\"Alright, that makes sense, I guess. Next time, come to the front desk first.\"\n\n\"Will do,\" Jessie said. \"I'm so sorry.\"\n\n\"No worries,\" the girl said in a disinterested monotone. \n\nJessie followed the girl out of the closet and scampered out of the gym. Her heart was beating out of her chest, but she felt just a little bit safer with the kendo sword grilled between her fingers. \n\n7. \n\nErin set her backpack down and brushed sweat off her brow. She felt like a big bundle of nerves with the deadline for the RA application looming. \n\n\"You look like you're having a time,\" said Lily Myer, Erin's roommate. \n\nShe was a small, rail-thin girl with sharp features and thick glasses that made her dark gray eyes seem much too big. A little sticking was the most fitting description Erin could come up with. \n\nErin held up her RA application. \n\n\"This is due by tomorrow. I'm so screwed.\"\n\n\"But you have the application. Did you put it off?\" Lily asked, a sudden edge riding her voice. \n\nShe wanted Erin out, badly. It wasn't personal or anything. Lily just happened to be very particular about her space. \n\n\"I'm not putting it off, but Felicia has been.\"\n\n\"Great,\" Lily scoffed. \"You should check in with her, right now.\"\n\n\"I tried this morning,\" Erin shrugged. \"And mid-morning. And just now. She usually does open-door hours at some point during the day, just not today, apparently.\"",
        "\"Okay,\" Lily said, clearly a little frustrated. \n\nI'm so sorry to inconvenience you, Erin thought spitefully. She could use a little space herself. \n\n\"Look, I've got class. After that, I'll check again. Hopefully I'll get ahold of her then.\"\n\n\"Sounds good,\" Lily said, turning back to the computer game she had been playing when Erin walked in. \n\nErin readied her backpack and stepped back out into the hallway, feeling the weight of stress and frustration more than ever. \n\nAbout five minutes after she left, there was a knock at the door. At first, Lily missed it on account of wearing headphones. However, the person at the door was persistent, knocking louder and louder. \n\n\"Who is it?\" Lily called to no response. Instead, the loud knocking persisted. \n\n\"Fucking fine,\" Lily grumbled, getting up from her desk. \n\n8. \n\nThe room was filled with mechanical sound. The constant, high-pitch beeping of the heart rate monitor. The wheeze of the air conditioner unit. Various alarms and notifications from the hallway. A symphony of illness weighing on Bethany's nerves.\n\nMeanwhile, Eliza was laser focused. She stormed through the halls and slipped right into Micah's room, sitting down by his bedside. \n\nThe boy was awake, barely. It was honestly shocking that the nurse at the front desk allowed them into the room given Micah's condition. \n\nHe was very pale, with deep purple rings under his eyes. His body seemed unnaturally emaciated. What the hell happened to him? Bethany wondered. \n\n\"Hey Micah,\" Eliza whispered.\n\nSlowly, Micah's eyes opened and his whole face brightened as he regarded Eliza - her elfen face and bright green eyes seeming to stir something in the boy. \n\n\"Well hello there,\" said Micah, his voice louder and more confident than Bethany expected. \n\n\"Hey sleepyhead,\" Eliza cooed. \n\nHearing the dower little storm cloud fawn over a boy was more than a little bit surreal. \n\nBethany liked Eliza. Hell, she liked pretty much everyone she came across; however, the little redhead could be a real downer at times. It was nice to see little light in her eyes.\n\nMicah shifted his focus to Bethany and for a moment, his eyes grew big and fearful. \n\n\"Oh God, Lindsay,\" he gasped.\n\nThen he caught himself.\n\n\"You're not Lindsay,\" he said.\n\n\"Nope, I'm definitely not Lindsay,\" Bethany said with a smile, getting a little closer to the bed. \n\nShe had to admit, even run down as he was, Micah was kind of cute. \n\n\"No,\" Micah smiled. \"But you are pretty.\"\n\nBethany's face flushed with heat and she could feel Eliza's cold glare without even looking over at her friend. Still, it was always nice to be noticed.\n\n\"What about Lindsay?\" Eliza cut in.\n\n\"She's-\" Micah began before trailing off, his expression darkening. \n\n\"What?\" Eliza said, her normal edge returned. \n\n\"I don't remember,\" he said. \n\n\"Did she have something to do with this?\" Eliza gestured at the hospital bed.\n\n\"I can't-I-probably?\"\n\n\"Who is Lindsay?\" Bethany asked.\n\n\"She's our friend from an English class we're all in,\" Eliza said. \"She kind of dropped off the face of the planet yesterday.\"\n\nEliza suddenly seemed to realize something.\n\n\"Did you see that girl Leah at all?\"\n\nMicah's eyes got big again. \n\n\"Yes! Both of them. I think they did whatever the hell this is to me.\"\n\n\"So safe to say we should probably avoid these girls?\" Bethany said.\n\nShe was feeling a bit creeped out now. What the heck did these girls actually do to this guy? \n\n\"Yeah, probably,\" Micah said. \"I hate to say it, I love Lindsay, she's great, but-yeah.\"\n\n\"We'll keep an eye out for her,\" Eliza said.\n\n\"Well I can't!\" Bethany added. \"I've got no clue what this girl looks like!\"\n\n\"She's got sort of strawberry blonde hair cut short, a little spiky. Glasses. I can point her out,\" Eliza said.\n\n\"Wait!\" Micah grabbed Eliza's hand. \"She was different somehow. I remember seeing Lindsay, but she wasn't Lindsay. Not exactly. He was uh-different. I don't want to say more attractive but.\"\n\n\"More attractive?\" Eliza added.\n\n\"Yeah. She looked a model. Actually,\" Micah paused, thinking about it for a moment. \"She kind of had the same look as that Leah girl.\"\n\n\"So I'm looking out for Lindsay with boobs?\"\n\n\"I mean, I wouldn't put it that way, but sure.\"\n\nThe door to the room opened and in walked a heavy set nurse in a deep blue pair of scrubs.\n\n\"Alright, we're going to have to bring this to a close. Mr. Micah needs his rest, after all,\" the nurse said. \n\n\"Fine,\" Eliza said, standing up. She kept her eyes fixed on Micah. \n\n\"You okay?\" She asked him.\n\n\"I think so.\"\n\n\"Then that's all that matters,\" Eliza said with a smile that made her look radiant. \n\n9. \n\nEmily opened the door and saw Megan toss her head back, a look of manic bliss stretched across her face. Emily's roommate, formerly the wannabe slut, now seemed to be living the role with every fiber of her being.\n\nMegan was naked, one slime coated hand buried in the folds of her pussy, the other mashing her large, sweaty breasts. The floor was caked in more of Megan's slime and the room had a sweet, musty aroma that instantly aroused Emily.\n\nThe redhead shut the door behind her quickly and began to undress. She didn't understand why she was doing this. Actually, there were a great many things Emily didn't understand. \n\nEmily lifted the tight yellow t-shirt she was wearing over her head and admired her figure in the full length mirror bolted to the dorm room door. The image took the girl's breath away.\n\nHaving spent her entire young adult life as a pudgy, lower-end of average girl hiding behind sweaters and glasses, Emily has trouble identifying with the centerfold staring back at her. Her breasts captivated her attention the most. How could they not?\n\nThey jutted proudly from Emily's chest as two soft, perky mounds that seemed to take up several handfuls. Even amongst her...sisters, Emily's growth spurt had proven extreme. \n\nSuddenly, Emily felt gentle hands wrap around her creamy torso before riding up to the bottoms of her heavy tits. She could feel the warmth of Megan's supple body and smell her musk in the air. \n\n\"My did you bloom,\" Megan cooed, groping Emily's boobs. \"Are you getting used to your changes?\"\n\nEmily groaned from the surge of pleasure that shot out of her breasts at Megan's touch. Despite their size, her breasts seemed far more sensitive than they ever were before. \n\n\"Not really,\" Emily panted. \"It's a lot.\"\n\n\"I get it. Has little Lindsay been treating you well?\" Megan said, bringing one hand to Emily's snatch. \n\n\"She's gentler than you.\"\n\nMegan let out a jovial laugh before plunging two fingers into Emily's pussy, eliciting a loud moan.\n\n\"She wasn't very gentle when she shoved her parasite into here. Besides, I just can't help myself. There's so much of you to play with!\"\n\n\"You seem pretty happy for a girl that killed two guys.\"\n\nEmily expected this to piss Megan off, but the girl only purred and picked up her pace on Emily's crotch. \n\n\"I've had a change of heart.\"\n\n\"So what about our dear RA,\" Emily asked. \"What's she like now?\"\n\n\"I have no earthly idea, Em. Haven't seen her since she was a crumpled ball on the floor last night.\"\n\nFrom the room next door, both girls began to hear strange noises. The walls in this dorm were very thin, so they often times picked up on a lot.\n\nThere was the sound of rhythmic creaking, possibly of bed springs. Over that was the sound of feminine moans. Two distinct voices.\n\nMegan recognized the one voice first.\n\n\"Speak of the devil and she will appear and fuck our neighbor, apparently,\" she said.\n\n\"Oh goodie, I was getting curious.\"\n\n\"Come on, let's get dressed and see what's up for ourselves.\"\n\n10.\n\n\"Hey Molly, you were an RA once, right?\" Erin asked, slipping up behind her TA after class.\n\n\"Hmm? Oh, yeah. I guess I was.\"\n\n\"You don't sound all that enthusiastic about it.\"\n\nMolly flashed a tired smile and shrugged her shoulders.\n\n\"It paid well enough, but I'm not really an authority figure. Wasn't my deal.\"\n\n\"Got it,\" Erin said, feeling deflated. \"I guess writing people up is a bummer.\"\n\n\"Yeah, plus telling people to shut up during quiet hours and handling check out and all. It kind of just sucks. Why?\"\n\n\"Our girl here is applying to be an RA!\" Melissa Takizawa piped in, having skipped up to the the pair from across the classroom. \n\nMelissa was a chubby yet pretty girl of Japanese descent with a short bob hairstyle dyed electric blue. \n\nSo you're pulling the whole second semester freshman RA thing?\" Molly asked.\n\n\"She's such a goody-two-shoes, isn't she? Gosh, I can barely pull out of bed and this one wants to be handing out write ups and room inspections!\" Melissa giggled.\n\nMolly raised an eyebrow and shot Melissa a quick glare that withered the girl.\n\n\"I did it too. I wasn't ready, but I needed the money. You seem a bit more put together though, Erin.\"\n\n\"Thanks,\" Erin said, blushing a little. \n\n\"Do you have everything in? Your application, your RA signature?\"\n\n\"Application yes, signature no.\"\n\n\"Who's your RA?\"\n\n\"Felicia Owens.\"\n\n\"Oh shit, really? I know Felicia real well. She's usually pretty good about that stuff,\" Molly said.\n\n\"I've tried knocking on her door a bunch of times, but she hasn't been around.\"\n\n\"You know what?\" Molly said as she checked the time on her phone. \"I've got time and I've been meaning to catch up with blondie. Why don't I go with you and see if we can find her.\"\n\n\"That would be amazing actually!\" Erin said.\n\n\"I'm just come with too, if you don't mind. Besides, my roommate is out right now and I don't feel like being alone in a boring dorm room,\" Melissa chimed in.\n\n\"You know, Melissa. There's still time to turn in an application! Come on, what do you say? RA buddies?\" Erin teased.\n\n\"Ew, God no. Besides, I actually like my roommate.\"\n\n11.\n\nThe headaches were worse today. Haley felt physically ill as she puttered about her dorm room. Class was in fifteen minutes, but Haley didn't know if she could manage it. \n\nAn overall sense of impending doom colored every moment since her attack the night prior. Something was very wrong, though the freshman could not put her finger on it. \n\nHaley stacked her textbook and notepad up and placed them into her backpack before cradling her forehead as another wave of nausea and worry overcame her. \n\nWhat the hell is this? She wondered. \n\nThe clock on Haley's nightstand showed that she had eleven minutes to get to class. Haley grabbed her things and rushed out of her dorm room.\n\nThe rain had stopped, but the sky was dark and gloomy. The campus seemed abandoned.\n\nHaley took in a deep breath of moist air and began to make her way along the sidewalk outside her dorm building towards her class on the other side of campus. Her head was pounding worse than ever and in her pain, she failed to notice the steady footsteps trailing her.\n\n12.\n\n\"We're going to find her,\" Eliza said as she stomped down the path.\n\n\"Who?\" Bethany asked.\n\n\"Lindsay. I'm going to find that bitch.\"\n\nBethany fought back her frustration. This had already blown up into far more than she intended. \n\n\"Isn't she dangerous? Micah told you to keep away from her.\"\n\n\"I don't give a shit. She was our friend. His friend. And somehow she fucked him up royally. I want to know why.\"\n\n\"Are you really doing him any good to possibly get yourself hurt?\"\n\n\"Just don't,\" Eliza said. \"Please just don't.\"\n\n\"Fine,\" Bethany said. She felt very tired all of a sudden and Eliza's anger was beginning to sting. \"Where are you going to find her?\"\n\n\"Starting at her dorm room. From there, I don't know,\" Eliza said. \n\n\"Which dorm?\" \n\nEliza's eyes narrowed, but she answered the question. \n\n\"St. Mary's, 301.\"\n\n\"Got it,\" Bethany said. \"Well good luck.\"\n\n\"Yeah, sure.\" \n\nEliza started down the path before abruptly spinning around and fixing Bethany with an intense stare.\n\n\"Hey, thank you for today.\"\n\n\"Of course!\" Bethany said, breaking into a smile. It was a little moment, but it made all the long hours worth it. \n\nShe watched Eliza march down the path and felt the warmth in her soul turn cold. Something was wrong with all of this. \n\nAnd image flashed in Bethany's mind of Eliza in a hospital bed not unlike the one currently holding Micah. How would a little pixie like Eliza hold up to whatever this girl Lindsay was capable of when she reduced a six-foot something to a shell.\n\nNo, Bethany decided. I'm not letting her wade into that shitstorm alone.\n\nShe waited for Eliza to disappear around a corner before trailing, slowly, after her. \n\n13. \n\nErin's door was left wide open. This was odd on multiple levels. \n\nFirst of all, Lily, Erin's roommate, absolutely hated having any crack in her own privacy and there was an unspoken ban on the door being left open while she was in the room. \n\nSecond of all, Lily was nowhere to be found. She was a cantankerous roommate, but not an irresponsible one. \n\nThe girls split up, Melissa and Erin checking Erin's room while Molly went to Felicia's room. \n\nThe room was a mess. Items were tossed all over the room, scattering the floor. Lily's bed looked as if a bomb had just exploded in it. Scattered sheets and pillows and splashed across all of it was a thick, green slime. \n\nThe air in the room was thick with a sweet, almost intoxicating odor that made Erin's head swim.\n\n\"What the hell happened in here?\" Melissa asked.\n\nShe looked very pale, her usual cheerfulness replaced by trepidation. \n\n\"I,\" Erin paused, looking for some sign in the room that would click this all into place. To make it all make sense. \"I don't know. This is weird.\"\n\n\"Guys!\" Mollie called from down the hall. \"Can you come see this?\"\n\nThe girls rushed out of the room and made their way down the hall, each exchanging nervous glances at the other. \n\nThey stepped into the open doorway of Felicia's room and their jaws dropped. \n\nThe condition of Felicia's room made Erin's seem pristine. What they saw chilled their blood.\n\nNearly every single surface in the room was covered, or at the very least splattered, with the same thick, green goo. Papers and office supplies were scattered about and the mattress was dislodged from the bed frame, one of its corners squished against a pool of green fluid on the floor. However, this was not the most alarming thing in the room.\n\nNo, the most disturbing aspect to the ruined room were the bulbous emerald sacks scattered about the room. Each one was about the size of a large grapefruit with a glowing core that pulsed, illuminating something within.\n\nThese orbs were clustered in groups of three or four, secured to the floor or the walls by hardened slime. Some orbs were smaller, about the size of a baseball, and lumpy while others were nearly the size of a water melon and looked ready to burst.\n\n\"Did we just walk into a science fiction movie?\" Melissa chirped in a high pitch, scared voice.\n\n\"Try horror movie,\" Erin added.\n\nThe scent from Erin's room was in Felicia's as well, but now it was nauseating. \n\n\"They're eggs,\" Molly said matter-of-factly \n\n\"How do you know?\" Melissa asked.\n\nMolly shrugged. \"A hunch, I guess.\"\n\nThen reached down to one of the smaller clutches and started to carefully dislodge the eggs. She placed three into her open backpacks.\n\n\"Um, Molly. Whatcha doing?\" Erin asked.\n\n\"I want to test these. My boyfriend and I-let's just say this is inline with a project we've been working on.\"\n\n\"You have some weird tastes,\" Melissa said.\n\n\"In men or projects?\"\n\n\"Both.\" \n\nErin looked around the room in disgust and horror.\n\n\"Did Felicia do this? What's wrong with her,\" Erin asked.\n\n\"I don't know, but something tells me we should leave sooner rather than later,\" Mollie said.\n\n\"No problem,\" Melissa said. \"Don't have to ask me twice.\"\n\nMollie zipped her bag up and the trio walked out of the room and down the hall at a brisk pace. None of them noticed the larger eggs within the room beginning to shake. Nor did they notice the cracks beginning to form along the surface of these eggs.\n\n14.\n\nLeah closed in on her prey now. She had been trailing the mousy little brunette for several minutes, waiting for the girl to isolate herself on the path. \n\nThis was the one. Her mind almost glowed with the psychic power it contained and Leah would have that power. The sisterhood would have that power.\n\nLeah looked around quickly to ensure that no one was looking and then lunged forward. The little brunette seemed blissfully ignorant.\n\nShe grabbed the girl from behind and sent her tumbling into the grass behind a series of bushes along the path. For her part, the girl seemed completely dazed by Leah's action. This gave the infected girl time to position herself just right. She straddled the girl and used one hand to cover her mouth.\n\nLeah purred. \n\n\"You have a very, very special brain.\"\n\nThe girl's eyes widened in terror and she began to struggle against Leah, but she did not have the strength to put up much of a fight. \n\nLeah drank in the girl's looks. She was an average girl with understated beauty. Nothing a big fat worm to the pussy couldn't radically fix.\n\n\"Oh I wouldn't struggle. Besides, you really have no idea how good this will feel,\" Leah said triumphantly.\n\nThen, she swooped down and brought the girl into a wet, forced kiss, allowing her corrupted saliva to pass into the girl. Leah felt her own large, swollen tits brush up against the small nubs of the brunette. She tasted the sweet saliva of the girl along with the rich brew of thoughts and memories their close contact brought her.\n\n\"Haley Lewis,\" Leah said. \"An average name, but that's not the whole picture. You are the perfect find.\"\n\nLeah cupped the girl's small breasts, trying to imagine how much bigger they would get once Haley became a sister. \n\nMeanwhile, Haley was quickly losing control of her body. Leah's saliva working through her system, weakening her muscles while sapping her will.\n\nThe young freshman watched in helpless horror as something began to emerge from between her assailants legs.\n\n\"You and this are about to get very intimately acquainted,\" Leah sneered."
    ],
    "authorname": "DevilBookCorruptions",
    "tags": [
        "parasite",
        "horror",
        "erotic horror"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/organism-x-ch-05"
}
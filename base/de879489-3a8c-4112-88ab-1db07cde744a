{
    "title": "Miss Callahan Ch. 01-02",
    "pages": [
        "Chapter One\n\nThis is exactly why I prefer working with men. Which I know makes me sound like a female misogynist. But sitting in a room for hours on end while her perfume hits me like a wave every time I move an inch, is increasingly challenging at this hour.\n\nWe've been at this since yesterday morning. I have no power against the stale cookies left on the table from yesterday's lunch. And I certainly have no power against this woman. Lauren Callahan. Her name is infamous even in this office.\n\nI don't usually go for older women. Not that I can \"go\" for her. She's not technically my direct manager, but she is superior to me. And we're in the middle of a pitch process. No sex is worth sacrificing a budget like this from a brand so recognizable. I won't be responsible for the agency losing because I can't control my hormones.\n\nThe rest of the team has gone by now, which I guess are the perks of being a junior staff member\u2014 you get to sleep the night before a pitch. I don't mind though; I love the adrenaline attached to this process. It's like putting on a show for some sorry corporate assholes who have too much money.\n\nBut I'm usually a lot more confident by this point in the process. The pitch deck is done, we're mainly just finalizing the design before tomorrow's run through. But tonight, I don't feel confident. I feel like an intern who's in front of the company president on the first day of the job.\n\n\"Slides 1--12 are done. Can you check them for me?\" she asks as she looks up from her laptop.\n\nI nod slightly, having trouble saying a simple \"yes\" as she looks at me with those stupidly clear, green eyes. Who has eyes like that?\n\nAs if reading my thought process, she gives me a slight smirk and looks down at her laptop again. I force myself to look at the slides in question, but I can vaguely feel her eyes back on me.\n\nShe's probably just curious about me. She came to town from our Austin office and we've been stuck in a conference room for two days together. Which is a weird experience \u2014 in one way intimate and in many ways, not. I know nothing about her except that she's an Executive Vice President and the company darling. Not to mention, she has perfect green eyes, and perfect wavy brown hair, and perfect plump lips, and perfect.... fuck.\n\nRead. I tell myself again.\n\n\"These look good,\" I say to her, chancing a glance up. She's looking at me again.\n\n\"I think we can call it a night,\" she suddenly says as she closes her laptop. \"The design team will finish it up in the morning before the run through at noon.\"\n\nI'm slightly surprised by the abruptness. The deck is definitely looking great, but usually the pitch lead wants perfection before allowing sleep. I won't complain though\u2014 my eyes are starting to swim with PowerPoint slides and though it might be empty, there's an inviting bed at home waiting for me.\n\n\"Sure. I think we're in a good place,\" I respond.\n\nShe closes her laptop and stretches. I avert my eyes immediately because I know exactly where they would go. I only look once she's standing since it would be weird to continue to look at anything but her at that point.\n\n\"Do you want a drink?\" she asks.\n\nI'm not sure why I seem to answer this woman in slow motion every time she poses a question, but I need to stop. It's not a good look. I'm a Vice President here for god's sake.\n\n\"Uh yeah, sure. Where do you want go?\"\n\n\"I thought I saw a bottle in your office? Or are you saving that for a special pitch?\"\n\nThere's that smirk again. I can't help but smile back.\n\n\"Well I was waiting for a contract from Dior, but I guess we can drink it now instead.\"\n\n\"Dior does everything in house. And usually in French,\" she sasses back.\n\nI'm not sure why but this whole exchange makes my mouth dry. I stand up and follow her unbelievably sexy backside to my office.\n\nOne of the perks of working the agency grind is that HR is a little more flexible than many corporate jobs. No, they probably wouldn't condone my thoughts about Lauren tonight, but they don't mind if the VPs and above have small bars in their offices. I'm pretty sure some of the male VPs think they're modern day Don Drapers with their monogrammed decanters and brown liquor (they're not).\n\n\"Have a seat, you can take the nice chair.\" I point to the chair behind the desk. I need to get the other chairs in the office replaced. I'm still using the hard, white ones that came with it.\n\n\"Not in your own office. Never let someone do that,\" she says low. Instead of sitting, she simply leans against the side of the desk and watches me grab two glasses from my small office bar.\n\nI suddenly feel a rush of confidence. If she's going to flirt, why can't I too? I pour the drinks slowly, knowing her gaze is on me. I gently and very intentionally put the blonde hair that falls into my face behind my ear. Women love my hair.\n\nI don't even know if she likes women. Not that it matters, I tell myself. I need to focus on what matters, which is the pitch we're working on and not the fact that her sexy smirk makes me want to rip her clothes off right here. But somewhere in the back of my mind, I know she does like women. And I know it does matter. Why does it feel like we've already crossed some line? Just from her smirk? Just from my intentionally seductive pour?\n\nI hand her the drink and can't help as I look down at her lips. And I don't care anymore that I'm being obvious. As I stare, she takes a sip while one hand still holds her body up from the desk. And now I'm in an internal battle with my eyes, willing them not to look down at her tits as she swallows her sip.\n\nHer mouth isn't any safer to look at, but I can't help but stare at the slight wetness left there from the bourbon. I try to capture it to memory as fast as I can. Knowing we won't be alone like this again. Not here in my office after midnight on a Tuesday.\n\n\"Sit down,\" she quietly demands as her head nods to my desk chair.\n\nIt was certainly not a question. And while it was said almost in a whisper, I move past her to my chair, not willing to mess up this moment. I can feel an unknown motive vibrating from her as her eyes follow me and I'm desperate to see what happens next.\n\nI sit down and turn my chair slightly so I can see her better. For a moment we both just sip our drinks. I haven't eaten since the lunch they brought in for us and I'm feeling the bourbon easily now.\n\n\"I'm glad I got brought in for this one. I've been hearing about you for a while and I've been curious,\" she says as she tilts her head slightly. Appraising me.\n\n\"You have?\"\n\nThe confession takes me by surprise. This woman is a god in this agency. She's flown in from pitch to pitch, wins business, and then heads out to the next one. She's one of the brightest strategic marketing minds in the world and has the accolades and respect to prove it.\n\nHow has she heard of me?\n\n\"You're skilled at business development. I've seen the case studies from your wins. But I must say, in the room, you're even more impressive,\" she says in that low voice again right before she takes another sip.\n\n\"Thank you. I enjoy this part of my job,\" I say lamely back.\n\nShe's quiet for a moment again as she takes a drink, looking at me over her glass. Apparently, this is actually the company's Don Draper. And I'm totally falling for it.\n\n\"Are you a bottom?\"\n\nIf I had been drinking, I would have spit it out. Instead I uncross my legs for lack of anything better to do and give what can only be described as a mix between a nervous laugh and a cough.\n\nShe must be wondering where the articulate, confident strategist went that she's been working with. Or not. Maybe she knows exactly what she's doing.\n\n\"Not usually,\" I answer back honestly.\n\n\"Are you comfortable being a bottom?\"\n\nI simply stare at her for a moment before responding. For some reason, this conversation with her feels natural. Even here, sitting in the chair I sit in every day working, but I can't say I'm surprised it progressed so quickly. Lauren Callahan seduces like she does business. Efficient, to the point, and successfully.\n\n\"Yes, I'm comfortable with it\", I tell her as she sits up from the desk and slowly moves over to me. She resumes her same position but right in front of me, so the desk is right behind her. My knees are almost touching her.\n\n\"Unbutton your shirt for me,\" she whispers into my ear as she leans down and gently caresses my cheek. It's both tender and hot. I answer by starting to unbutton before she even resumes her position and leans against the desk again.\n\nOnce my shirt is unbuttoned, she removes it from my shoulders, folds it and puts it on the desk next to her. She leans behind me and undoes my bra with an almost reverent touch. Before removing it completely, she leaves it where it is and looks into my eyes. I'm lost in her eyes for a moment before I realize she's saying something to me.\n\n\"Sorry?\"\n\nMy voice doesn't even sound like my own it's so husky with want for this woman.\n\n\"Is this okay baby?\"\n\nHer hands stay in the same spot on my bra as her intense gaze sears into me. I can only nod as her use of the word \"baby\" sends a jolt of electricity to my pussy.\n\nBut she takes that nod as consent and discards my bra. With an impressive amount of control, I do not possess in that moment, she carefully folds this too and places it on top of my shirt.\n\n\"You are so beautiful\" she says as she takes in my body with her eyes. \"I've been thinking about what's under your shirt for two days.\"\n\n\"I have too,\" I say back, while staring directly at her tits.\n\nShe gives me her signature smirk as she laughs, \"Oh, is this what you want baby?\"\n\nAs she moves her hand to the bottom of her shirt, I almost can't believe what's happening. She pulls it over her head and now carefully folds it before placing it with my bra. Somehow the controlled and careful way she's treating our clothing makes me excited and I can't help but think back to her question about me bottoming. I've never been with a woman who commands a room so easily.\n\nIt's not that I haven't relinquished control to a woman before. But most of the women I've dated have been fairly vanilla and strict \"roles\" didn't come in to play as much. Now I'm starting to realize just how much better this dynamic can be. Lauren in control is so very, very sexy.\n\n\"Take off my bra, baby.\"\n\nMy hands move faster than even my brain, and in an instant, I can feel her warm, impossibly soft skin underneath my fingers. I brush her hair off her shoulders before lightly grazing them down her arms and to her back. I feel a rush of satisfaction at the shiver I can feel underneath me.\n\nI'm now very aware of how wet I am. And I can feel my clit throbbing. I don't think I've ever felt it like this. It's almost painful how turned on I am. Luckily, I've always been good with bras, even the annoying, front clasp ones, and her bra is off within seconds.\n\n\"Fold it, darling. We are not teenagers.\"\n\nI fold one side of the bra over the other and set it on top of the growing pile of clothes on my desk while looking up at her gorgeous bare tits. I can see it in her eyes that she knows I'm enjoying this. More than I ever thought I would. How she can make something so sexy and condescending at the same time is beyond me. The fact that I want more of it is even more disorienting.\n\nAll slow seduction over, she quickly moves in to straddle me and firmly grabs the back of my head and pulls it close to her tit.\n\n\"Suck,\" she demands.\n\nMy tongue takes over and does what I've been daydreaming about for two days. I can't help the moan I let out against her chest. But she seems to like that, letting out her own gasp as she feels the vibration from my mouth.\n\n\"Mmm. Do you like them baby?\" she asks.\n\n\"Yes. You're so beautiful,\" I all but gasp back as I go back to devouring her tits.\n\nI pull each nipple and let them go with a pop. Swirling my tongue back and forth I don't even care that I'm being messy and nowhere near smooth. She doesn't seem to care as she pushes her tits further into my mouth.\n\nShe suddenly pulls my head back and looks directly into my eyes. Her usually clear eyes are dark, her pupils huge and black.\n\n\"God you're sexy,\" she pants. \"I want to hear you moan. I want you to come around my mouth. Do you want that baby?\"\n\nI nod with an open mouth. She leans in slowly and takes my mouth with hers and it's only now that I realize I've never tasted a woman's tits before I've kissed her. Until tonight. But tonight has many firsts. Just ask my poor, most likely scandalized desk.\n\nBut the wait for her mouth was worth it. I again can't help the moan that escapes me. As our tongues slide against each other's she can't seem to stop her own moan from entering my mouth and it gives me another rush to know I can affect her too.\n\nBut then she's climbing off my lap and I suddenly miss her body pressed against mine. The sadness dissipates quickly as I realize what her plan is. This woman wastes no time and I'm beginning to wonder how we kept things so professional until now.\n\nAs she nestles herself on her knees between my legs, she keeps her hands softly in her lap and looks up at me. Even here, in such a submissive position, she is wholly in control.\n\n\"Pull your skirt up, take your underwear off and spread your legs.\"\n\nAt this point I'm growing excited by the demanding tone she takes with me. I'm not used to being in this position, but it's natural with her. I do as she says in record time, even taking the time to fold my panties like I know she wants.\n\n\"Excited much?\" She laughs as she gently strokes my bare thighs. \"Don't worry baby, I'm excited too. I can already see how wet you are for me.\"\n\nI obviously can't see my own pussy, but I can feel what she sees. I can feel myself dripping for her. I resist the urge to touch myself to see. I have a feeling she wouldn't accept that.\n\n\"Tell me what you want,\" she asks as she starts placing small kisses and licks up my thigh.\n\nIt's hard to keep my legs from shaking let alone think and speak, but she stops and looks up at me.\n\n\"Baby. I want to make you feel good. But you're going to ask for it. Tell me. What. You Want,\" she says slowly.\n\n\"I want your mouth on my pussy.\"\n\n\"And then what?\"\n\n\"I want you to fuck me with your fingers.\"\n\n\"How many baby?\"\n\n\"Two, and then three.\"\n\n\"Mmm. Good girl. Say please and you'll get your wish.\"\n\n\"Please. Please.\"\n\nBy this point I'm going crazy just trying to control my body. Everything in me just wants to grab her head and direct it to my center. But I know that's not her game. And quite frankly, it doesn't seem to be mine anymore either.\n\nShe doesn't say anything more as she dips her head and drags her tongue from my entrance up to my clit.\n\nThe first moan escapes me quickly and I let it. It's sexy knowing we're in this office with nobody to hear me. She seems to think so too because I can hear her own moan against my pussy.\n\nShe sucks my clit into her mouth, moving the tip of her tongue over it. And I know I won't last long like that. I move my hips up and she seems to know I need more friction, so she releases my clit and begins a steady lick up and down my folds.\n\n\"Fuck, oh god. Lauren, fuck. I'm going to come if you keep doing that.\"\n\nI can see the smile in her eyes as she looks up at me. \"That is the point, darling. You may come.\"\n\nAnd with her words I come in seconds and scream her name as I fall over the edge. But I barely have time for two breaths post climax when I feel two fingers plunge into my pussy. She's now almost at eye level as she pumps her arm, so her fingers go in and out.\n\n\"How does that feel baby?\"\n\n\"Fuck! Good, another please,\" I beg.\n\nShe answers with another finger and continues to pump in and out.\n\n\"Mmm you're so tight for me. I love fucking you. The way you say please makes me so unbelievable wet baby.\"\n\nI don't even care at this point that I'm just a writhing mess in my office chair. Her words mixed with the fast pump of her fingers is making me lose all sense of propriety.\n\n\"Harder. Please, Lauren. I'm so close.\"\n\n\"I love that dirty mouth. Tell me to fuck you harder again.\"\n\n\"Baby please. Fuck me, fuck me. Harder. Please!\"\n\nAt this point I'm all but yelling. In one swift move, she pulls me up from my chair and puts me against the desk, so my stomach is against it.\n\nShe plunges her three fingers back in and fucks me from behind, pushing her body against mine with every thrust. Every time she thrusts deep, I let out a low, guttural moan, and I know I'm close to coming for the second time.\n\nI grip the desk, pushing against it slightly so she can fuck me harder.\n\n\"Are you going to come baby? Come for me. Come all over my fingers.\"\n\nSomehow my body responds to her demand immediately and I scream as I feel my pussy tighten around her three fingers. She continues her ministrations but slows her pace as she brings me down from my orgasm.\n\nShe keeps her fingers inside me as I breathe heavily against the desk and she's basically holding me up. The kiss she delivers to the back of my neck gives me shivers. She's so gentle with the removal of her fingers, I can barely feel it happen. But I feel the loss once they're gone.\n\nThis confident, demanding woman from two minutes ago is suddenly soft and gentle. She sits me down in the chair and helps me get my skirt down. She then buttons my shirt back up, so I look almost presentable.\n\nI reach out for her, aware that she hasn't had any release yet. But she gently grabs my wrist before I can go far.\n\n\"No. Tonight was about you. And it was amazing. Thank you.\"\n\nI don't know what to say back because the truth is, I could fall asleep in this chair right now. This woman did something to me I've never experienced, and my body is screaming for rest. I can simply stare up at her and watch as she casually puts her bra and shirt back on.\n\nOnce dressed she reaches down and grabs my underwear off the floor, placing it in her pocket. She leans over me and whispers into my lips.\n\n\"This is what happens when clothing gets discarded so loosely. These are mine now.\"\n\nI know I must look like a mess in the chair and all I can do is watch her go, not even able to muster a proper goodbye. She turns back one more time once she reaches my office door.\n\n\"Don't forget to save the pitch slides to the drive. See you tomorrow gorgeous.\"\n\nChapter Two:\n\nI'm not someone who can wake up easily. Even if I go to bed at 8pm, I will soak up every last snooze until I'm lying in bed coming up with excuses as to why I can just snooze my alarm again.\n\nBut this morning I wake up alert and don't bother to hit the snooze button. I'm not surprised. I often wake up easily after a night of really hot sex and I remember every bit of last night. Flashes of Lauren's sexy smirk and blazing green eyes cross my mind as I close my eyes and stretch. I can feel her presence other places as well.\n\nWhat I am surprised about is how fast these quick memories send a jolt to my pussy. Like a magic wand touched me...only more enjoyable.\n\nI pick up my phone and look at the time. It's still early. That's what happens when you wake up to your first alarm, idiot. I have some much-needed time.\n\nI close my eyes as my hand finds its way under my underwear band. I leave them on since I know this won't take long. I'm just so fucking turned on and probably never stopped being turned on since last night.\n\nIt doesn't take long to get close to my orgasm. I move from lightly circling my clit to slipping two fingers inside myself. I want to feel full again, stretched. It's not nearly the same, but as I remember her commanding voice telling me I can come, I do.\n\nFuck. That woman.\n\nI leave my hand there for a moment, enjoying the aftermath of my orgasm. And it dawns on me that it's been a while since I masturbated to someone I know. Someone I fucked already. Or who fucked me I guess is more accurate.",
        "Though that didn't take long I have to get my ass into gear. My shower is quick, and I pick out my dress as I let my hair dry a bit, only slightly recognizing how carefully I'm choosing what to wear.\n\nI feel butterflies in my stomach, total schoolgirl style, but I'm anxious to see her again. Even if it's awkward, I'm thirsty to look into those eyes again. Feel the burn between my legs from just her smell.\n\nAnd today isn't just any day. It's a pitch day. And I'm at my professional best when I'm in a pitch.\n\nThe Uber to the office is a blur. I didn't drive today so I can continue to review my slides before the client meeting. I don't memorize anything for pitches, even the most important ones. I just review the content, so I know it back to front since I'm much better on my feet without a script.\n\nI might be prepping a little more than usual and it might be because I want to impress a certain sexy brunette. I can't let her go thinking she has me all figured out just because I let her top me.\n\nChrist. I'm going to need new underwear after this week. I'm wet again even though I already took care of myself this morning. What is this woman doing to me?\n\nI'm due in the conference room in ten but I want to stop by my office. Maybe if I see my desk and chair, I'll realize it was all a dream.\n\nBut it wasn't. The two unfinished glasses still sit on the desk. Whoops. Guess I should have taken those to the sink last night. Good thing I'm usually here before the rest of the team and today's no exception.\n\nNot that drinking on the job is rare here. But still. I can't keep my blush under control thinking about her and I don't need additional opportunities to turn red in front of people I manage.\n\nI care a lot about my team. I pride myself on being an exceptional manager. I try to be relatable and fun though I expect a lot from them. And they know me as a confident VP who's seasoned and productive. Some of them aren't even much younger than I am, but I've always been more ambitious than my age group.\n\nAs I sit at my desk, I can't help but smile thinking about what happened on it only hours before. And that's the unfortunate moment when Lauren happened to stop by my door.\n\n\"Good night sleep then?\" She asks with her own smile on her face. She's obviously teasing me.\n\n\"Like a baby.\" I respond back boldly, emphasizing the last word.\n\nI see a quick flash of something behind her eyes before her face resumes its usual professional stoicism.\n\n\"Glad to hear it. I need you at your best today.\"\n\n\"I assure you, I feel very refreshed and ready to go. I um, hope you slept well. Your hotel was nice and all...\".\n\nI honestly can't even tell if we're flirting right now. What I do know is that neither of us has been able to break eye contact. Like an early morning game of chicken. Just with eye fucking.\n\nI expect her to leave after that little overture, but she doesn't. Instead she slowly walks to my desk like a predator approaching her prey. As I stare up at her lamely, she puts both her hands on the desk and leans over it.\n\n\"I didn't sleep well,\" she says low, in an almost whisper.\n\nBefore I can respond (not like I had a good response), she continues.\n\n\"I have this throbbing pain between my legs that you so unkindly left me with.\"\n\nI attempt to stammer out some words about trying to last night and wanting to, but she cuts me off with a quiet, low chuckle that causes my pussy clench tight with memories of what that mouth is capable of.\n\n\"Are you contradicting me?\"\n\n\"No, I'm sorry,\" I reply quietly.\n\n\"You can make it up to me after the pitch.\"\n\nBefore turning away to leave, she slips a key card over the desk with one finger and slides it in front of me. It's a hotel card and I'm so shocked I don't even fully read the name. Something with an \"F\".\n\n\"Room 720,\" she says as she sweeps out of the room without another glance back.\n\nI've had a lot of luck with women. And they tend to react well to me, but never have I had such a cinematic moment with one. I'm not even annoyed that she's playing an obvious power game. I'm intrigued. And I want more.\n\nAs I look back down at the card, I mentally memorize the room number for later. Of course she's staying at The Four Seasons.\n\nWalking into the conference room an hour later felt more awkward than ever before. Lauren was already sitting in there, huddled closely with one of the designers and looks up at me as I enter.\n\n\"Ems come look at these new versions,\" she casually calls over to me.\n\nI can't tell if she's trying to get a reaction from me by using a familiar nickname as if we were friends. It feels weirdly intimate.\n\n\"Sure,\" I respond as I look around at the others to see if they noticed anything.\n\nObviously, they didn't. I'm so thrown off by this new dynamic that it's making me paranoid. I go over and choose to sit on the other side of the designer instead of next to Lauren.\n\n\"Jackie these look amazing,\" I say as my attention is drawn to the new slides. \"You must have worked all night.\"\n\n\"Yes,\" Lauren agrees. \"They're perfect. I imagine you're tired today but thank you for your work on this.\"\n\nHer comment was for Jackie but she's boring her gaze into me as she talks. Luckily, Jackie doesn't seem to notice this weird moment we're having in the middle of a design review. Lauren is known to be intense, brilliant and discerning. Most people don't question anything she does.\n\nThe head of our business development team, Michelle Lee, enters the room for the last rehearsal. She's followed by a few others of the senior leadership team who will all sit in to give us final notes and feedback.\n\nThis is the \"be the client\" presentation. Basically, we do the whole pitch in front of coworkers who pretend to be the clients, including throwing us dark stares, confused looks and hard-hitting questions. It gets us prepared for the real thing.\n\nI hate rehearsals. I don't turn \"on\" until I'm in front of a real audience. But I get that others, especially some of the junior staff need it. Most people aren't as comfortable with public speaking as I am.\n\nWe all take our place around the table. In order to get to mine, I have to pass by Lauren. And as I pass, I swear I can feel an electrical current between our bodies. A hot one. Pull it together Emma.\n\n\"Ok let's start now. I'll time it. We'll ask questions at the end that we think you'll get,\" Michelle announces.\n\n\"And remember, just one pile on after a question is asked. We don't want everyone chiming in on every question,\" my coworker Tom adds on.\n\nAs the rehearsal starts, I have to remind myself not to stare at Lauren. She opens the pitch with a narrative around why we want to work with the client. And some smooth mumbo jumbo about why they inspire us. Once she's done, the rest of the team will explain why the client should want to work with us.\n\nIt's nothing I haven't heard before. These opening statements are all pretty similar\u2014 just trade out the brand name for another. Or maybe I'm jaded having spent the last 15 years of my career in the agency world hearing this exact pitch.\n\nBut Lauren Callahan is like something I've never seen. I'm again reminded of Don Draper and have to will myself not to go there right now.\n\nI've seen her in meetings, and I've been on numerous calls with her. But seeing her present is spectacular. I'm attracted to her in a whole new way. Her articulation of her point of view of this company, what their strengths are, where there's opportunities...it all falls from her lips so seamlessly. She's authoritative and diplomatic and I can feel myself squirming in my seat. The only thing I can do right now is squeeze my legs together and hope this ends soon.\n\nWhen she finishes, she casually leans back in her chair as if all she had done is say a quick welcome. I look at the Sr. leadership team and they are equally enamored. A flash of jealousy roars within me before I check myself. This woman is not my girlfriend, she's not even my friend. I have no claim on her.\n\nI avert my gaze from Lauren once she's done. I won't be able to present if she's looking at me and I have a huge part to play in this pitch.\n\nMy sections are interwoven through the whole hour. Both Lauren and I tag team the majority of the talking points while other specialists chime in at specific spots. We like to keep pitch teams small so we don't overwhelm the client.\n\nAnd while I don't usually give it my one hundred percent effort in the rehearsals, I can't help but be caught up in her enthusiasm and pizzazz. And it's like a well-practiced ballet. We moved around the slides with ease, chiming in when it makes sense, knowing when to let the other drive the conversation when it doesn't.\n\nThe questions at the end go smoothly as well with some small tweaks. The question part is actually the most daunting part of all this. We can't prepare for what the client will ask. And I have had some really weird questions from prospective clients.\n\nI shudder to think back on the pitch I did for a huge gaming brand and when they asked me my favorite video game, the only thing I could say was the 1992 Little Mermaid game for Sega that I played when I was seven.\n\nAfter some lengthy feedback and reworking of some details, the non-pitch team stood up and left the room. Michelle was last to depart.\n\n\"You guys are going to kill it. That was great. Email us after and give an update,\" she says and starts towards the door.\n\n\"Of course. Thanks for everything, Michelle,\" Lauren responds professionally.\n\nAnd then it was just the core pitch team left. We have an hour and a half before the pitch so will need to all pile in Ubers soon to head over. The client's office is close but not walkable distance. Besides, I refuse to walk to a pitch in heels.\n\nLauren starts her version of a pep talk. And though I'm sure she's saying something inspirational based on the other faces, I'm still feeling a post-rehearsal surge of adrenaline. And as I stare at her gorgeous mouth, that adrenaline starts hitting me somewhere slightly inconvenient.\n\nI use this chance to look at her closely. After all, everyone else has their eyes only on her. Are they throbbing like I am? Jesus, of course they're not.\n\nShe really is beautiful. The closest thing I've ever seen to a work of art, like she was created with the utmost precision. Her high cheekbones roll up into those piercing green eyes. And her lips, fuck, her lips. And I know what they feel like, which is even more magnificent than the way they look.\n\nToday she's wearing a sleeveless cream shirt and tan pants that hug her hips. She screams sophistication and class. Her clothes are obviously expensive but not ostentatious. She's pretty senior within the company so I'm sure she does okay for herself financially.\n\nI wonder if she has kids. Or a husband. Jesus, I really know nothing about this woman.\n\nNot one to worry about other people's mistakes, I continue to rake my eyes over her body. I've never really understood some people's obsession with clavicles, but holy hell. I want to kiss up her body and just suck my way around those beautiful things.\n\nShe's avoiding my eyes and it seems as if she knows where my thoughts are going. And it's nice to feel like I have power, just for one moment even though I know that I probably don't hold any in reality.\n\n\"We should call Ubers now. I'll be driving since I don't want to leave the rental here. Emma, please ride with me so we can finalize the closing statement,\" she says casually, and nobody blinks twice at her easy orders.\n\nThe closing statement was perfect. We don't need to finalize anything. And what does the rental care have to do with anything? I think I know that answer to that but keep my face neutral for the sake of appearances.\n\nThe rest of the team crowds around in the office kitchen, ordering cars while I follow Lauren to the elevators. We take it directly down to the parking lot, which was an excruciating 30 seconds of sexual tension. I'm slightly relieved we weren't alone in that small box.\n\nAs she pulls her rental car out of the garage, she seems in a hurry, even though we have plenty of time. She's not talking and I'm not very good at awkward silence.\n\n\"So, um. The final statement? Did you want to talk about it?\"\n\n\"No Ems,\" she replies.\n\nAnd there's that damn nickname again. So sexy coming off her tongue. And now I'm thinking about her tongue which can't lead me anywhere good before a pitch.\n\n\"Oh, okay,\" I say back, not knowing what else to say.\n\nThere's more silence.\n\n\"So, do you enjoy Austin?\" I break the silence again. Jesus fucking Christ fuck. Stop being an idiot. You have more game than that.\n\nAt that she glances over and smirks. Like she knows I'm out of my element with her and she's enjoying watching it.\n\n\"I like the way you look at me. As if you're hungry,\" she says, ignoring my question.\n\nI look over at her and don't look away, feeling like I now have permission from her to stare.\n\n\"I can't help but look at you, Miss Callahan,\" I respond, deciding to use her last name without thinking.\n\nHearing that made her turn her head and I saw a moment of surprise cross her face. I had a feeling she'd like that move. Somehow catching her by surprise gave me a rush of adrenaline and I want to do it again.\n\nInstead of responding, she slowly pulls up to a light and turns to me more fully. She moves her eyes over my body and keeps them trained on my legs, which are bare due to the hot summer weather.\n\nI've always been complimented on my legs, and I know what she sees as she moves her eyes down towards the slope of my heel. She looks back to the light in time for it to change and continues on in silence.\n\n\"I want you to spread your legs,\" she says, not even looking at me.\n\nMy mouth opens to respond but I'm not sure what to say. One of the darlings of this company is asking me to spread my legs right before we walk into a pitch. I should be appalled. But what I find myself doing, is complying.\n\nI slowly spread them apart, looking ahead at the road. I'm thankful I wore this dress as it moves easily with my body. If I wasn't already wet, I'm soaked now. Her commanding tone, mixed with how wrong this feels during work, makes my body vibrate with want.\n\n\"Good girl, baby.\"\n\nMy breathing is shallow as I hear that pet name again.\n\n\"You are really sexy,\" she says quietly. \"I want to know what part of last night you enjoyed the most.\"\n\nShe hasn't even touched me and yet I feel like we've already started to have sex. I spare a glance over at her and catch her green eyes. I almost moan out from my instant desire to kiss her.\n\nI know she won't wait long for an answer, and the fact is, I know my answer. But I also don't want to sound out of breath when I respond.\n\n\"I liked your fingers inside me, fucking me,\" I respond and even I'm surprised by the blatant desire in my voice.\n\n\"Have you thought about what I feel like?\"\n\n\"Yes.\"\n\n\"Yes, what?\"\n\nI know what she wants to hear, and I internally smirk at my decision from earlier in the ride. I only vaguely notice that we've entered the parking garage next to the client's building. Not the client's actual building though?\n\n\"Yes, Miss Callahan,\" I respond finally.\n\nShe pulls the car in to a secluded spot and shuts the car off. We sit in the silence while my legs are still spread, and I swear I can hear my heart beating.\n\nShe turns to me, but I've suddenly lost my courage. I look ahead as she asks, \"Are you wet right now baby?\"\n\n\"Yes, Miss Callahan,\" I respond, maintaining my eye ahead of me.\n\n\"I'm going to make you come before we leave this car. And then we're going to go and win this business.\"\n\nIt's not a question. She knows my answer anyway.\n\nI know we have a little time, but I can't imagine where the team will think we are. Hopefully, their Ubers took a while to get there.\n\nI quickly wonder if maybe we should get into the backseat, but I know we definitely don't have time for that kind of thing.\n\nI don't have to make a move; she takes control once again.\n\n\"Put your hands on the seat next to you and don't move them unless I say so.\"\n\nI comply without saying anything. I can't trust my voice at this point. The next thing that's going to come out of my mouth is a moan. And probably not even that sexy of one due to how turned on I am by this point.\n\nShe leans towards me and stops so her face is close to mine. She puts one hand on my leg, and it jerks in response.\n\n\"Ems,\" she says more gently than she's ever said anything. \"Look at me.\"\n\nI turn my head slightly and she gives me that scalding green-eyed stare.\n\nAs she keeps her eyes open, she kisses me and doesn't wait to slide her tongue in. All the control I've had since this morning is gone as I lean hungrily into the kiss with a loud moan into her mouth.\n\n\"I love the way your body responds to me,\" she whispers into my lips as she licks the bottom one.\n\nI half expected her to just dive right in, so to speak, considering the time limit. But that's so obviously not her style. She removes her lips from mine and it's nice to see she's breathing just as heavy.\n\n\"We can do these back up in a minute,\" she says through a smile as she starts to unbutton the top of my dress. It slips off my shoulders easily and I'm almost shaking I want her mouth on my tits that bad.\n\nShe pulls down my bra instead of taking it off and looks up at me.\n\n\"Do you like a little pain baby girl?\"\n\n\"Yes, Miss Callahan. Please.\"\n\nAnd now I'm begging. Already. I'd feel embarrassed if I didn't know she liked it. I can see it in the darkness of her eyes that she does.\n\nShe bends her head down to my right breast and takes it roughly in her teeth. I shout out, but its pain mixed with intense pleasure.\n\nFor the seconds after the initial bite, she swirls her tongue around my nipple, soothing her initial assault on it.\n\nI can't hold the moan trying to escape me, so I lean my head back on the seat and let it out as her tongue continues to worship my tits.\n\n\"Tell me what you want,\" she husks out between licks and small bites.\n\n\"Please, Miss. Put your fingers inside me. Please, please, please.\"\n\nIn normal circumstances I'm sure she'd tease this out even more. Make me beg again, but she complies with my wish.\n\nShe puts her right hand on my shoulder as she leans over and brings her left to my soaking pussy. And as she feels just how wet I am, her forehead falls onto her right hand as she groans in pleasure.\n\n\"You are so wet baby girl. Let's take care of this so you can concentrate later.\"\n\n\"Yes please. Fuck me, please, fuck me miss,\" I pant out.\n\nShe slides two fingers into me easily. The angle can't be that comfortable for her arm, but she doesn't show it.\n\nShe begins a steady thrust with her hand as she pants heavily into my ear.\n\n\"Fuck baby, you make me so crazy,\" she whispers. It feels oddly intimate.\n\n\"I love having my fingers so deep inside you. I thought about you all night. I made myself come, thinking of your tight pussy coming around my fingers.\"\n\nI honestly think I could come from just the way this woman talks to me. But her fingers are also building me up to a quick orgasm. My moans have become a stream of expletives.\n\n\"Harder miss, please. Fuck I'm so close.\"\n\n\"I want you to come on my hand baby. I want to be able to smell you on me while they all look at us. I want to remember your sexy moans as I hear you speak to them.\"\n\nThe thought that she will be able to smell me on her fingers, during a client meeting, is so dirty and hot, it sends me over the edge and I scream out as I come around her fingers.\n\nShe grips my shoulder harder as she guides her fingers expertly through the wave of my orgasm.\n\n\"That's it baby. That's it.\"\n\nShe stills as I come down from the high. My breathing is still heavy, but I'm also aware that I don't have all day to compose myself.",
        "She doesn't move so I turn my head to her. She gives me a smile I haven't seen yet. It's sweet and tender, not her usual confident smirk and it makes her look younger.\n\n\"Thank you,\" she says before leaning in and placing a soft kiss against my lips. I can feel her slowly remove her fingers as she presses her lips into mine.\n\n\"Shouldn't I be thanking you for all these orgasms?\"\n\nI can feel her smile against my lips as she responds. \"It's only been two. At least let me earn my thank you.\"\n\nShe pulls back further now and carefully buttons my dress up as I pull down the bottom. My nipples feel a little raw against my bra and I'm aware that she probably meant for me to feel them during the pitch too.\n\nI take a look at myself in the mirror and am pleased that, though slightly flushed, I'm not too disheveled.\n\nI only now realize that she's been staring at me.\n\n\"Should we go?\" I ask nervously.\n\nShe squints her eyes for a moment as if she's considering something. Her eyes stay fixed on mine as she slowly unbuttons her pants. Holy fuck.\n\nThe car is so silent that the zipper being pulled down is louder than it would normally be.\n\nShe reaches over and grabs my hand, guiding it to her waistband. She pushes my hand into the opening of her pants, and moves her panties aside with her fingers, effectively allowing both of our hands to feel.\n\nAnd oh my god. I thought I was wet before. I now know why she wore pants. She'd be dripping in a dress.\n\nShe allows me to soak up my fingers for a moment before guiding my hand back out of her pants. She quickly zips and buttons them back up.\n\nShe takes the hand that's now wet and slowly blows it dry, looking at me almost innocently as she does it. It's hands down one of the sexiest moves I've ever seen.\n\nShe leans in close to me and whispers right up against my lips. \"Now you'll be able to smell me too. And know just what you do to me. Now, are you ready to win this?\"\n\n\"Yes, Miss Callahan.\"\n\n\"For the next two hours, it's Lauren,\" she says, giving me a small wink.\n\nAnd just like that, her face moves from the woman who just fucked me in her rental car to the EVP who came to town to win.\n\nAs we walk to the client's building, right on time, I can't help but subtly bring my hand up to my face so I can inhale her.\n\nI smile inwardly. We're going to win this.\n\n \n"
    ],
    "authorname": "FemmeyFemmeFemme",
    "tags": [
        "bdsm",
        "erotica",
        "girl on girl",
        "hot",
        "lesbian",
        "lgbt",
        "romance"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/miss-callahan-ch-01-02"
}
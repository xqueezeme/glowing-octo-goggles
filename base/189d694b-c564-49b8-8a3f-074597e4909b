{
    "title": "To Love, Honour and Oh Pay Ch. 02",
    "pages": [
        "Lizzie sailed through the next forty-eight hours in a trance-like state. She threw herself into work and, as best she could, tried not to dwell on the unusual arrangement she'd recently signed up to. She needed some time to get her head around it and, for that reason, hadn't mentioned her conversation with William to Fiona, or indeed anybody. However, she was fully aware that they would soon need to pass as an authentic, loved-up couple; to say she was concerned as to whether they could pull it off was an understatement.\n\nHaving unpacked her only ballgown from its protective cover, Lizzie spent some time getting ready for her first public engagement with William. She wanted to make him proud, she wanted to make herself proud, but probably most of all, she didn't want people wondering what on earth he might see in her. For that reason, she'd taken a long lunchbreak from work, during which she'd visited the local hairdresser. \n\nNow she found herself wriggling into a gorgeous black velvet dress which she hadn't had occasion to wear for some time. She was simply grateful it still fitted. Once she'd coupled it with a dainty pearl necklace and a pair of black heels, she stood back and admired her reflection, pleased with her unusually elegant appearance. Glancing at the clock, she realised William was due to arrive in only a few minutes, which was good because it didn't allow her too long to get nervous. Grabbing her work briefcase, she pulled out their contract she'd recently drafted and gave it one final read through. \n\nIn next to no time, the doorbell rang. Pulling open the front door, Lizzie felt her breath forcibly extracted from her body by the sight of the man standing on her doorstep. Dressed in a black dinner jacket and bow tie, his recently washed hair was perfectly mussed, whilst his incredibly dark eyes twinkled like the darkest night. For a long moment, they simply stood staring at each other.\n\n'Come in?' croaked Lizzie at last.\n\n'Thanks,' replied William, sounding equally dazed. As he followed her into her home, his voice began to recover. 'You scrub up more than okay,' he said softly, as she turned to face him. 'You look utterly stunning.'\n\nLizzie couldn't help but grin broadly at his heartfelt compliment.\n\n'This is for you to wear, if you wish,' he murmured, pulling out a square velvet box from his pocket and placing it gently on the counter beside the contract. With an excited fizz in her tummy, Lizzie nudged the box open to find a flawless antique necklace studded with more rubies than she had ever seen.\n\n'It's exquisite,' she breathed, running her finger along the neckline.\n\n'It's a family heirloom. May I?' he asked, lifting the necklace from its box.\n\n'Yes,' she breathed, quickly removing her pearls and turning her back to William. She couldn't help but shiver, as his fingers fixed the clasp, momentarily brushing against her exposed neck.\n\n'Gorgeous,' he said simply and Lizzie bathed in his reflected praise.\n\n'Thank you, but it isn't necessary to let me borrow such beautiful items. You don't need to woo me,' she said jokingly.\n\n'Ah, but you did give me strict instructions to be nice to you,' he teased.\n\n'Not too nice,' grinned Lizzie. 'I might get used to it.'\n\n'Would that be so bad?'\n\n'Let me show you the contract,' she replied quickly, unsure of how to take his comment. Lizzie then explained each element of the agreement she had written, based on their discussions, which spelt out their arrangement, including the payments she would receive upon their divorce.\n\n'This all looks fine,' confirmed William, having read through the document.\n\n'Are you sure about the financial remuneration? It feels as though you'll be paying me too much money.'\n\n'I don't agree,' explained William, picking up a pen and signing at the base of both copies. 'I'm content with the figure. Are you going to sign too?' Nodding, Lizzie picked up the pen and scribbled her name.\n\n'It feels like fifty shades without the fun,' she said jokingly.\n\n'What kind of fun do you want?' he smiled, his eyebrow raised questioningly.\n\n'I just meant, we're signing up to an agreement that we'll live together but not... partake in any activities a couple normally... Oh, I know what I mean!' she said, her cheeks flushing an unbecoming shade of red.\n\n'I know what you mean too,' chuckled William. 'I just enjoy playing with you.'\n\n'Well don't!' admonished Lizzie with mock annoyance.\n\n'Do we need to agree on your safe word, Elizabeth?' asked William. Flushing, Lizzie shook her head at him in astonishment. He shot her a wink which caused even more confusion in her hormone-laden body. \n\n'Please just call me Lizzie,' she stuttered. 'Elizabeth sounds so formal.'\n\n'So I should only use \"Elizabeth\" when I'm disciplining you, then?' he enquired, straight-faced. With her mouth agape, Lizzie tried to respond but the words died in her throat, before they had chance to be set free. William observed her discomfort for a short moment, before breaking the silence.\n\n'Ought we to get our story straight before we face the music?'\n\n'Sure. Tell me what I need to know,' nodded Lizzie.\n\n'I was thinking, we've been dating secretly for, what, nine months?'\n\n'Those timings work,' she agreed quietly. 'But why make it public now?'\n\n'Why not?' he queried. 'The entail is public knowledge. People know I've got to take pretty swift action. Speaking of which, I would like you to move in with me sooner rather than later.'\n\n'That's...fine,' she said, fighting back a warm feeling inside her stomach that fluttered at the thought of soon being able to spend so much time with him. She was under contract, she had to keep reminding herself; that was the only reason any of this was happening.\n\n'Great,' he smiled. 'And don't worry, you'll be quite safe, I won't pounce on you.'\n\nLizzie wasn't quite sure how to take this admission; was he actually saying he was gay after all or that he simply had no interest in her specifically?\n\n'We'd better get going, then?' he suggested, as they both carefully sealed their signed copies of the contract in envelopes.\n\n'I'll just pop this in my safe and I'll be with you,' explained Lizzie, making her way out of the room.\n\n'You know, we need to pass as two people completely intimate with each other,' noted William, his raised voice reaching Lizzie in the adjacent room. 'Is that going to be a problem?'\n\n'I think we'll be able to wing it, should the occasion demand,' she grinned, returning. \n\n'You sure?'\n\n'Of course,' she murmured. 'Shall we make a move?' Nodding, William followed her out the door.\n\n~~~~~~~~~~~~~~~~~~~\n\nAs they walked up the driveway to the enormous country house, lights and music spilled from every open window and door. Lizzie's first emotion, when they arrived at the party, was relief that she'd made something an effort with her appearance. As far as she could tell, party goers seemed to fit into one of two categories; extremely rich or extraordinarily beautiful. Being neither, she felt somewhat of a fraud. However, she was also cognisant of the fact that being accompanied by William immediately made people take note of her; he was treated with very high regard and, automatically, that privilege was extended to her.\n\n'William!' cried out a middle-aged woman, dripping in diamonds, hugging him enthusiastically. 'Thank you for joining us.'\n\n'Charlotte, how lovely to see you,' said William warmly. 'Thank you for the invitation. Sorry if we're a little late.' \n\n'You know I'd forgive you almost anything,' she giggled.\n\n'May I introduce my partner, Ms Elizabeth Silverton,' he said proudly.\n\n'Delighted,' smiled Charlotte enthusiastically, briefly shaking her hand before returning her attention to William. 'Follow me. There are so many people dying to see you.'\n\nThe three of them made their way into the packed banquet room. Filled with loudly chattering people, they stood amidst fifteen circular dining tables, each beautifully decorated with starched, white tablecloths, silver candelabras, highly polished cutlery and what looked like extremely expensive china. With a free bar near the door and a live band and dancefloor at the far side of the room, clearly no expense had been spared. As they made their way towards the loudest group of all, an exquisitely pretty woman spied them approaching out of the corner of her eye.\n\n'William!' she squealed, leaving the group to clash her cheek against his. Several other women looked up in expectation, before noticing Lizzie's presence. They tried to hide their reactions but failed to prevent a number of disappointed frowns being cast in her direction. \n\n'Arabella,' murmured William in response, his back straightening uncomfortably as Arabella looped her arm through his spare one.\n\n'Shall I leave you to it?' murmured Lizzie. She could see these beautiful women were dying to get William on his own and the glances she was receiving were making her feel a little awkward.\n\n'Don't you dare,' he breathed into her ear, releasing her hand and instead placing an arm around her shoulders, encompassing Lizzie in a tight embrace. At the same time, he managed to subtly release himself from Arabella's tight grasp.\n\n'Lovely to see you all,' said William warmly. 'And might I introduce my much better half, Elizabeth Silverton.' Lizzie was politely welcomed into the group and the conversation they'd been engrossed in before their arrival quickly recommenced. However, she did feel like the destroyer of all hopes and dreams, when a glance around the room noted Arabella being consoled in the opposite corner by a friend. It was a very timely reminder to Lizzie that William was a very attractive, not to say seriously eligible man. She was bound to attract some jealous glances.\n\nBefore too long, Lizzie was enjoying herself enormously as the shock that William had turned up with a girlfriend started to wear off. The party was a lively one and everybody seemed to be intent on having a great time. She was almost disappointed when their conversations were interrupted by an announcement asking everybody to take their seats for dinner. As William led her towards their table, he groaned quietly under his breath.\n\n'What's wrong?' she asked immediately, looking concerned.\n\n'Unfortunate table placement,' he sighed.\n\nLizzie looked towards their table, confused by William's explanation. So far, only an older gentleman was seated, his back ramrod straight.\n\n'Uncle,' announced William as they reached their destination. 'It is my privilege to introduce to you Ms Elizabeth Silverton. Lizzie, this is my uncle, Lord Edward Mortimer. Whilst the two men glanced uncomfortably at each other, Lizzie stepped in to rescue the situation.\n\n'I'm thrilled to meet you, Lord Mortimer,' smiled Lizzie warmly, immediately on her very best behaviour.\n\n'And I you, my dear,' he replied, standing up to kiss her once on each cheek. 'Please do sit beside me.' \n\nAs guests were seated around the rest of their table and the first course was brought out, Lizzie found herself the sole attention of Lord Mortimer. Although always very polite and friendly, Lizzie felt as though she was under a mild form of interrogation, as the subjects of Lizzie's family, her job, her hobbies and how long she'd be seeing William were all covered in quick succession.\n\n'I had no idea you existed,' he stated, partly at Lizzie but also as an accusation towards William.\n\n'We've just been keeping a low profile,' explained William as waiters moved around them to replenish glasses. Lizzie felt sorry for him, the stress in his posture evident to her, even if it wasn't to others. Doing what came naturally, she placed her hand over the top of his. William looked down in astonishment at the table where his hand lay and then across to Lizzie.\n\n'And why would you want to do that?' queried his uncle, unaware of the confusion in William's eyes. Finding strength from Lizzie, William squeezed her hand gently, continuing to hold it before moving their joined hands to rest on his leg. Lizzie felt a flush pass over her face, acutely aware that the back of her hand was now touching his apparently well-muscled thigh.\n\n'Because, just to start with, I wanted Lizzie all to myself,' admitted William. 'And can you blame me?'\n\n'No,' admitted his uncle. 'I certainly can't.' Blushing deeply, Lizzie looked down at her lap.\n\n'Lizzie makes me extremely happy,' said William soberly, stroking his thumb across her hand which caused a tingling sensation to hurtle up her bare arm..\n\n'I can see that,' said his uncle. 'So, are you engaged?'\n\n'No,' said Lizzie shaking her head.\n\n'Yes,' said William at almost exactly the same time. Lizzie could feel William's hand clench in hers and she squeezed it supportively. Lord Mortimer looked confused.\n\n'So which is it?' he demanded suspiciously. Lizzie removed her left hand from William's and held it in front of his uncle.\n\n'No ring,' stated Lizzie smiling softly. 'Which in my book means no engagement.' Lord Mortimer brayed with laughter, capturing the attention of people at several other tables.\n\n'Excuse me,' said Lizzie, rising to her feet as William automatically stood beside her. 'I must go to the cloakroom.' William sat back down again and both men watched Lizzie pick her way delicately through the maze of tables and out of the main door.\n\n'She's not going to take any of your normal nonsense,' nodded William's uncle, apparently impressed. 'And I have to say I fully approve. Her gumption reminds me of my darling Rose,' he sighed sadly, before turning to speak to the couple on his right.\n\n~~~~~~~~~~~~~~~\n\nAfter the last of the puddings had been cleared away and the band started to play, Lizzie turned to William and smiled.\n\n'Thank you for inviting me. I've had a lovely time.'\n\n'The night is yet young,' he replied. 'Would you like to dance?' Nodding, Lizzie allowed herself to be led through to the far side of the room, where a medley of Queen tracks was being played.\n\n'You held my hand at the table,' he observed as they walked.\n\n'Yes,' flushed Lizzie. 'I thought your uncle seemed suspicious about us. I was trying to put him off the scent.'\n\n'Ah, is that why you did it...'\n\nAs they reached the dancefloor, \"Don't stop me now\" began to blast forth. Grasping Lizzie around the waist, William launched them into the melee, greatly surprising her by his moves. He could certainly dance. With her long dark hair threatening to become unpinned, amidst much giggling and hilarity, she kept pace with him as best she could. As the song ended, a beautiful blonde approached them, vying for William's attention. With practiced ease, he gently rebuffed her whilst continuing to maintain close contact with Lizzie in preparation of the next dance.\n\n'She really wanted to dance with you,' Lizzie scolded gently, when the disappointed woman had departed.\n\n'She'll get over it. Life is full of minor disappointments.'\n\n'Perhaps rumours of you being gay haven't reached this far out in the sticks,' teased Lizzie daringly.\n\n'Do you really think I'm gay, Elizabeth?' murmured William beside her ear. A shock of goosebumps shot across her exposed skin. One thing was for sure; her body didn't think he was.\n\n'I've got no empirical evidence either way.' \n\n'No,' he agreed, smirking at her. 'You haven't...yet'\n\nAs the band started to play a new number and the rhythm of the music automatically slowed, William pulled Lizzie's body closer to his own as they swayed around the dance floor.\n\n'What made you pick me?' said Lizzie quietly, trying to ignore the overwhelming feeling of rightness, simply being held in his arms. 'You're clearly not short of admirers.'\n\n'You're trustworthy, confidential and the only person who knows my plans,' explained William. 'If word gets out, I'll know exactly who betrayed me.'\n\n'Well, that's a relief,' replied Lizzie sarcastically, her body automatically backing away from his. 'As long as it wasn't because you thought I was a nice person, or anything.'\n\n'Relax,' soothed William, pulling her back towards him. 'That was what made me select you. But that's not why I chose you.'\n\n'So why did you choose me?' demanded Lizzie.\n\n'Are you fishing for compliments?' accused William jokingly.\n\n'No!' replied Lizzie. 'God, are you going to be this infuriating when we live together?'\n\n'Only if you're exceptionally lucky,' replied William with the shadow of a smile. 'If you must know, I chose you for the same reason that I don't wish to dance with any other woman in this room tonight.'\n\n'Which is?' she asked, not sure if she wanted to know the answer.\n\n'I wasn't joking earlier when I described you as my much better half. You're like an exotic butterfly in a roomful of monotone moths,' said William quietly. \n\n'You're just saying that, because you think you have to be nice to me,' accused an embarrassed Lizzie.\n\n'Am I? Why would I want to dance with anybody else, when I'm already dancing with the most attractive girl in the room?' he asked seriously.\n\n'You're just trying to be nice,' she repeated, as much for her own benefit as his.\n\n'Are you resigned to thinking the worst of me?' asked William. \n\nUtterly speechless, Lizzie allowed him to guide her around the dancefloor for a short while, unsure of what to think, concentrating only on his glorious body moving against hers. \n\n'I refuse to believe you didn't feel it, the first time we met in your office,' murmured William.\n\n'What?'\n\n'The most incredible connection between us. I just knew straight away.' Lizzie glanced into his eyes, not daring to ask what he knew. \n\n'I remember feeling very frustrated by you,' she replied, a small smile playing around her lips for daring to admit it.\n\n'Frustrated?' smirked William. 'Is that what we're calling it?'\n\n'And angry,' she added for effect. No way was she going to admit to this man that her true feelings had swayed somewhere between intense sexual frustration, and anger at herself for allowing him to walk away. William's stare pierced straight through her, making Lizzie feel as though he had taken a glance into the very depths of her soul. It was an unsettling feeling that caused her entire body to tremble. Then, completely unexpectedly, he smiled broadly.\n\n'If that's true,' he said confidently, 'then it sounds as though your spider senses need a little re-tuning.'\n\nAt that moment, the music ceased as the band took a brief break. Along with the other dancers, the two of them started to trail slowly back towards the seating area. Unsure of how to respond to him, Lizzie glanced towards their table and found her reprieve.\n\n'You're wrong about me being the most attractive girl in the room,' she stated. 'I can point to at least one other.' \n\n'You think so?' asked William disbelievingly.\n\n'I know so. She's sitting in your chair.'\n\nLooking in the direction of their table, sure enough, there sat a pretty girl of perhaps eleven or twelve years old, her legs swinging in beat to the music. Wearing a pink frock with her white blonde hair piled up on her head, the enormous grin on her face was priceless.\n\n'She's the daughter of Charlotte, our host,' muttered William. 'Annabel?' he said sternly, as they reached their destination. 'What are you doing here?'\n\n'The music was too loud for me to sleep,' she explained in a sing-song voice. 'I wanted to dance.'\n\n'Do your parents know you're down here?' he asked, as Lizzie took a seat beside their guest.\n\n'Yes,' she replied, quickly crossing her fingers, which were resting on her lap. Lizzie glanced at William who was grinning; her action clearly hadn't been missed by him either. Remaining standing, William scoured the room, eventually catching the attention of Charlotte. Smiling, he nodded down towards the little girl. Charlotte raised her eyes to heaven, shrugged and returned to her conversation.",
        "'You've got twenty minutes,' stated William, taking control of the situation. 'And then you need to go back up to your bedroom. Okay?'\n\n'Okay,' agreed Annabel, her eyes twinkling with delight as she settled herself more comfortably in William's chair.\n\n'So, Ladies,' smiled William. What can I get you to drink?'\n\n'I'd love a strawberry milkshake!' said Annabel so enthusiastically that Lizzie couldn't help but giggle.\n\n'I'll admit that's my favourite too,' confided William. 'But I'm not sure if this party is discerning enough to have that on the menu. Let me see what I can do.' With a quick wink at Lizzie, which unexpectedly made her stomach lurch in response, he left.\n\n'Is William your boyfriend?' queried Annabel, the moment he was out of sight.\n\n'Um, yes he is,' confirmed Lizzie.\n\n'Are you going to marry him?' she continued.\n\n'Probably, yes I am,' Lizzie confirmed. She'd been expecting a grilling of some kind tonight, but not from an eleven year old.\n\n'He's very nice, isn't he?'\n\n'Yes, he's very nice. And shall I tell you a secret?'\n\n'Yes please,' breathed Annabel, conspiratorially leaning forwards in her chair.\n\n'He becomes nicer every day I spend with him,' said Lizzie honestly.\n\n'I really like William,' said Annabel with a sigh. \n\n'Then you have exceptional taste,' grinned Lizzie. 'Tell me, what are your favourite lessons at school.'\n\n'I know science is for boys,' explained Annabel, fiddling with a discarded linen napkin on the table. 'But I really enjoy it. And maths too.'\n\n'Those subjects are most definitely not just for boys,' replied Lizzie emphatically, her feminist hackles rising as a matter of principle. 'You should feel free to study whatever you want to. I loved science and maths at school too.'\n\n'Really?'\n\n'Definitely.'\n\n'And are you a scientist now?' queried Annabel.\n\n'No, I work in law.'\n\n'A lawyer?' asked Annabel in unconcealed awe.\n\n'A solicitor,' Lizzie explained. 'Which is a type of lawyer.'\n\n'Wow, that's amazing!'\n\n'Not that amazing,' said Lizzie shaking her head. 'You do know, in life, you can be whatever you want to be, don't you Annabel?' The little girl looked up at her, her eyes open wide. 'You just need to study hard at school, decide what job you want to do, work out how to get there and then give it your best shot. And don't take 'no' for an answer,' she added.\n\n'Here, here,' said William softly, having returned without either of them noticing. 'Well,' he said, collapsing into a spare seat. 'Talking of giving things your best shot, I had to pull some serious string but...da-dah!' With a flourish of his hand, he indicated they should look behind them. Lizzie couldn't help but giggle to see a waiter approaching the table holding a tray of three drinks for them. They stood out dramatically from any other drinks being consumed in the room and were consequently receiving much attention from other diners. The three tall glasses were filled to the brim with frothy strawberry milkshake and decorated with straws, cocktail umbrellas, lit sparklers and various other paraphernalia.\n\n'Thanks Tom,' said William, once the waiter had distributed the drinks. 'I owe you one. Cheers!' he added to Lizzie and Annabel as he partook in their beverage of choice.\n\n'Cheers!' they repeated, grinning widely. Sipping their milkshakes, they all enjoyed the time that followed, chatting animatedly.\n\nFrom the corner of the room, refreshed from their break, the band began to strike up once more. Annabel glanced around, to ensure her parents weren't going to descend on her. Taking advantage of her momentary lapse in concentration, Lizzie caught William's eye.\n\n'Dance with her,' she mouthed, nodding down towards the little girl. Lizzie knew what it was like, as a young girl, to be infatuated by somebody as dazzling as William. He looked back at her questioningly before obligingly rising slowly to his feet.\n\n'Annabel, would you do me the honour of dancing with me, please?' he asked. With a huge grin, she nodded in acceptance. William walked up to her, pulled out her chair and then held out his hand, to lead her up to the dance floor. Taking it, Annabel glanced back around at Lizzie.\n\n'This is the best party ever. Thank you.'\n\nFrom a distance, Lizzie watched the two of them twirling around the dance floor, Annabel giggling as William tried to copy her moves, and then she tried to copy his. With a contented smile, she happily observed them, warmed by how good he clearly was with children. Over time, Lizzie noticed there were many other pairs of female eyes watching William closely, many with a similar look of contentment on their faces, no doubt all thinking the same thoughts. Lizzie shook herself. She hated being predictable plus she must keep reminding herself; this was all just for show. He wasn't hers anyway. \n\n'I'm heading home, M'dear,' spoke a voice just beside her. She'd been gazing so dreamily at William that she hadn't noticed his uncle taking a seat beside her.\n\n'Lord Mortimer,' said Lizzie, pleased to see the man once more. 'I'm really sorry that you're going already.'\n\n'Ah, you can have too much fun,' he smiled. 'But before I go, I wanted to say that I'm delighted to witness the positive influence you're having on young William.' They both turned to look at the man in question, who was twirling a giggling Annabel round and round; the centre of attention. 'You're filing down some of his sharper edges and I want you to know...I greatly admire you for that.'\n\n'Thank you,' breathed Lizzie, unsure of how to respond.\n\n'Now, I'd like to invite the two of you to come and stay with me this weekend, so we can spend some more time together.'\n\n'That sounds lovely,' she smiled.\n\n'Well, goodnight then and see you soon.' Lizzie rose alongside him, kissed both of his cheeks and watched the older man walk away. With an explosion of pink satin, Annabel returned.\n\n'That was amazing!' she exclaimed, dropping back into the chair.\n\n'I'm glad you've had a good time,' smiled Lizzie, already very fond of the little girl.\n\n'William told me I had to take my milkshake upstairs to bed now as my time's up. And he wanted me to tell you that it's your turn now.' Lizzie glanced up at the dance floor to see William beckoning her over with his finger. Standing utterly still and sporting a very sexy grin, he was resolutely ignoring the various women floating around trying to catch his eye. Lizzie felt her stomach churn with desire.\n\n'Sounds like I've been summoned,' said Lizzie standing. 'Good night Annabel, it was lovely to meet you.' Annabel flung herself around Lizzie's waist.\n\n'Thank you so much for letting me dance with William. It was the best! Goodnight!' she added, grabbing her milkshake and tearing out of the room.\n\nWilliam met Lizzie on the edge of the darkened dancefloor. Taking her hand, he moved her gently into his arms for the slow dance, cradling her tenderly. How was it, she pondered as they circled the floor, pressed together, that the lightest touch from William could have such a monumental effect on her body.\n\n'I missed you,' he smiled, kissing her cheek.\n\n'You've only been gone a few minutes,' Lizzie grinned. 'Hey, what are you doing?' she laughed as William continued to drop kisses on her face, travelling nearer and nearer to her mouth.\n\n'I thought I should provide you with some empirical evidence,' he murmured.\n\n'Is that what we're calling it?' giggled Lizzie, her heart beating hard and slow. 'So you're explicitly saying you aren't gay, are you?' she asked quietly. \n\n'I only expect to have to tell you this once, Elizabeth,' he growled. 'I am not gay.'\n\nSmiling cheekily, William dropped his mouth down to her sensitive neck, whilst his hands began to wander down her back. Lizzie gasped loudly as heat flooded to her face.\n\n'I get that,' gasped Lizzie as his highly capable hands caused a rush of desire to flood her body.\n\n'Ensure you don't make the same assumption again,' he ordered.\n\n'I won't. But in the meantime, you're fucking with our contract,' she growled, trying to ignore the throbbing which had started to encompass her clit.\n\n'Perhaps you should just be grateful it's only our contract I'm fucking with,' he murmured. 'You want me to stop?' he asked, his hands drifting lazily across the top of her ass.\n\n'Not entirely,' she gasped, as he continued to stroke her. 'But I do see what you're doing,' accused Lizzie. She found herself entirely unable to ignore his lightly grating teeth which travelled across her neck, whilst the warm, masculine scent of his body drifted tantalisingly into her nostrils.\n\n'What?' he grinned as they continued to rotate around the room to a slow, sultry track.\n\n'You're putting on a show for the benefit of everybody here.'\n\n'Is that right?'\n\n'Yes, that's right,' she confirmed, grabbing his ass, thrilled to hear him growl quietly. 'And two can play at that game.' Lizzie breathed out slowly, surprised by her body's reaction to the position in which she found herself. Heat was flooding to her core and she felt beyond horny as her fingers gently caressed his delightfully perfect, well-muscled ass.\n\nAs her hands explored and their bodies naturally began to entwine, Lizzie became aware of William's sizeable bulk now trapped between their swaying bodies.\n\n'Is that more empirical evidence?' asked Lizzie, feeling particularly smug about the reaction of William's body. 'I guess they don't call this part of the evening the erection section for nothing,' she smirked, knowing she would never have dared say that without the high level of alcohol currently in her bloodstream. She really must cut down on the booze; it was going to get her in trouble.\n\n'It's definitely evidence that you should relax your stereotyped rulebook and consider dating men under six foot in the future,' said William.\n\n'How so?'\n\n'Because your body's currently informing me that you're finding being hip to hip, and mouth to mouth, at the same time, seriously arousing.'\n\n'But we're not mouth to mouth,' she pointed out, causing William to grin widely.\n\n'Are you determined to walk into every trap I set?' he groaned. \n\nLizzie looked directly at him, still abundantly aware of his swollen length resting against her body. In silence, both of their hearts thudding rapidly, they continued to move against each other. Smoothly, one of his hands migrated to the small of her back, whilst the other glided under her hair to cradle the back of her neck. There he tickled and stroked, setting off all manner of reactions in her body, most of which shot straight down her backbone, direct to her core. Inhaling his warmth, Lizzie briefly closed her eyes, unable to continue processing the sensory overload she was experiencing. God, what was it about this man's touch which seemed to turn her to jelly? There was simply no hesitation, only confidence; he touched her as though he owned her. She opened her eyes once again when she heard William start to speak.\n\n'Maybe I should give you a brief demonstration?' he suggested. 'Purely for research purposes.'\n\n'Maybe you should,' she gasped in agreement.\n\nDrinking each other in, William slowly moved his mouth ever-closer to Lizzie, enjoying watching the heat flood to her face and the reflex reaction of her eyes automatically closing once more. Lizzie was no longer aware of anything, other than the heavy beat of the music reverberating through her, her own pulse beating in her ears and the close presence of William's lithe body pressed hard against her own. She waited. Dangling in the thrill of suspense, anticipating the first touch of his mouth. He didn't disappoint.\n\nWith a trembling body, Lizzie's first realisation of William's talents came when his lips pressed incredibly softly against the very corner of her mouth. He then progressed along her lower lip with butterfly kisses, seemingly with all the time in the world. A groan of contentment escaped from deep within Lizzie's throat as she tried to hold herself together and remember their public location, her pussy fluttering wildly. Right now, her urge to fuck this man was stronger than she had ever known.\n\nOnce he'd reached the centre of her lower lip, his tongue momentarily swiped across her sensitive skin, causing a strong surge of arousal to pass through her body. With a swift gasp, Lizzie held her inward breath as William continued kissing his way to the other side of her mouth, before slowly drawing away. Eventually, Lizzie managed to drag her eyes open and gazed into his soft, smiling eyes.\n\n'Hey,' he breathed gently. 'You okay?' Lizzie opened her mouth but no words escaped. Instead she allowed herself to be held upright in his strong arms, failing to remind herself that they were both only here, in this situation, because of a contract.\n\n'I knew we shouldn't try and wing being two people completely intimate with each other,' he murmured softly. 'You look like you've been hit by a truck. On the positive side,' he continued, gently stroking her cheek. 'If I don't like what you're saying in the future, I know a sure-fire way to stop you talking...'\n\n~~~~~~~~~~~~~~~~~~~\n\nAn hour later, Lizzie had still barely said a word. She found herself sunk in the leather passenger seat of William's low Ferrari as he drove her home. Occasionally running her tongue along her lower lip, tracing where his tongue had previously been, she was convinced she could still taste him. In her mind, she could still see the jealous glances of a good number of the women at that party, as they'd left the dance floor. \n\n'I'm not sure you could have been a bigger hit tonight,' said William kindly, as he steered his car through a set of sharp bends. 'Annabel literally didn't stop talking about you. Even more incredibly, you even seemed to gain something close to approval from my uncle which has previously been unheard of.'\n\n'They're both lovely,' sighed Lizzie. 'They made just as much of a hit with me.'\n\n'I still can't believe you agreed that we'd stay at his house this weekend, though,' groaned William. 'You do know he'll spend the entire time interrogating us, don't you?'\n\n'That's fine,' shrugged Lizzie. 'But I refuse to lie to him.'\n\n'We might as well not bother going then,' said William through the darkness and Lizzie was sure she saw him rolling his eyes by the light of the dashboard.\n\n'It'll be fine,' she soothed.\n\n'Mmmm. We'll also have to postpone moving in together for a few days. If you're still willing to move in with me, that is?'\n\n'Yes,' Lizzie smiled. 'I am.'\n\n'Even if I admit that I got Annabel to share your secret with me?'\n\n'You did?' said Lizzie shyly.\n\n'I did,' he confirmed, momentarily leaning across, squeezing her hand and then releasing. 'The feeling is entirely mutual, by the way. You become nicer every moment I spend with you too.'\n\n----------------------\n\nThank you so much for taking the time to vote or leave comments :-)"
    ],
    "authorname": "FenellaAshworth",
    "tags": [
        "attraction",
        "heir",
        "stranger",
        "dancing",
        "proposal",
        "legal",
        "lust",
        "desire",
        "friendship",
        "england"
    ],
    "category": "Romance",
    "url": "https://www.literotica.com/s/to-love-honour-and-oh-pay-ch-02-1"
}
{
    "title": "Yapping Dogs Ch. 02",
    "pages": [
        "*Author's Note: Any and all persons engaging in any sexual activity are at least eighteen years of age.\n\nDisclaimer: This story has been edited by myself, using Microsoft Spell-Check. You have been forewarned.\n\n*.*.*\n\nKathleen knew it was Wednesday and informed the staff of HappyLand Day Care that it was Wednesday; her Daddy was coming to get her.\n\n\"Now, how you think that girl know it Wednesday?\" one of the workers asked another worker.\n\n\"And know when it her Daddy's weekend get her?\" the other woman agreed.\n\nAt two forty five, Kathleen would start putting her crayons away. She always made sure to match her crayons up. Black, then brown, then blue went next to purple, then red and yellow, and finally, green and orange. The girl would fuss mightily if she was given a box of crayons and the crayons were out of order.\n\nBut, at two forty five, she would put her crayons away, neatly stack the coloring books, then arrange the blocks against the bench, and look around for any other errant toy that needed to be put away.\n\n\"Girl's got her some issues,\" Magdalene Savoie, the head administrator had noted.\n\nIf it was cold outside, Kathleen would stand by the coats on the hooks and wait for a teacher to come put her coat on. After five minutes, if no teacher came to put her coat on, she would call out.\n\nOn warm days, a day like today, she would just stand by the clear glass door and peer out, looking for her Daddy's pickup truck.\n\nOn days when it was her mother, or Maw-Maw, or Paw-Paw coming to pick her up, Kathleen would sit and draw, or sit and play, or just sing made-up songs until Mommy or Maw-Maw or Paw-Paw came in to get her. And if she was enjoying herself, Kathleen would be fussy when Mommy or Maw-Maw or Paw-Paw would come for her.\n\nGloria also knew it was Wednesday. On Wednesdays, she was always among the first children to spill out of William C. C. Claiborne Elementary school, looking for Daddy's truck. It was the same on the Fridays that were his weekends.\n\nJuice and animal crackers at Daddy's house, then, if it was sunny, out into the back yard for ball throwing, or swinging on the swings that Daddy had put up for his favorite girls. On rainy days, they'd sit at the table and draw and finger-paint. Daddy even knew how to make Play-Dough.\n\nIt was Wednesday and Wednesday meant dinner at Mickey D's for his girls.\n\nJared knew how to cook; his mother had taught him. When he and Rochelle Esposito-Broussard had been married, Rochelle was more than happy to let Jared do the cooking whenever he was in from off-shore.\n\nBut fixing anything that a five year old girl and a two, almost three year old girl would eat was outside of Jared's culinary skills. So McDonald's got their business.\n\nJared bought them their Happy Meals and sat them down. Then he squeezed the ketchup out onto a napkin for Kathleen.\n\n\"Daddy I got to go potty,\" Gloria announced.\n\n\"Now, Sweetheart?\" Jared asked, keeping the irritation out of his voice.\n\n\"I can take her,\" an attractive young woman offered.\n\nJared looked up at the young woman. She had short strawberry blonde hair, a pixie like face, and a warm smile. She was about four feet, ten inches tall, even with the high heeled shoes she was wearing, and had on a business jacket and a knee length skirt.\n\n\"Ma'am, I appreciate that, but I don't know you,\" Jared said. \n\n\"Oh! You're right,\" the woman said, beautiful green eyes open wide. \"Wasn't thinking, was I?\"\n\n\"But if you'd watch our food so they don't throw it out, I'd really appreciate that,\" Jared continued.\n\n\"I can do that,\" she agreed and took the seat next to him.\n\n\"Be right back,\" Jared said and lugged Kathleen in one arm while holding onto Gloria's hand with the other.\n\nHe got them into the bathroom, wiped down the toilet seat, and plopped Gloria down to do her business. While she was doing her business, Jared also changed Kathleen's diaper.\n\n\"And one day? You going be a big girl like your sister, and go potty in the big girl's toilet, right?\" Jared encouraged.\n\n\"Uh huh,\" Kathleen agreed.\n\n\"Okay, Daddy, I'm done,\" Gloria called out.\n\n\"How the hell does Rochelle do all this?\" Jared wondered.\n\n\"Thank you,\" Jared said to the young woman as he got the two girls back to their dinner.\n\n\"No Problem,\" the woman smiled, country accent thick.\n\n\"By the way, I'm Jared Broussard, and these are my girls, Gloria, and Kathleen,\" Derek said.\n\n\"I'm five, but she's only two,\" Gloria announced.\n\n\"And I'm Ann Huvall,\" the short woman smiled.\n\nHer accent really came through when she said her name. She pronounced Ann in two syllables and Huvall in three syllables. 'Ay-un' and Huvall came out 'He-you vawl.'\n\n\"From Not' Louisiana?\" Jared guessed.\n\n\"Yeah! How'd you know?\" Ann asked.\n\n\"Shreveport?\" he hazarded a guess.\n\n\"Where's that?\" Gloria asked, pretty little face wrinkled.\n\n\"Paulton, other end of I twenty,\" Ann confirmed.\n\n\"Uh huh,\" Jared smiled. \"So, what you doing in DeGarde?\" \n\n\"Working; I work at Young Insurance,\" Ann said.\n\n\"That's my company,\" Jared agreed. \"Truck and home owners.\"\n\n\"Well, we also do health, and know no one wants think about it, but we do life too,\" Ann said.\n\n\"Health is through my job, same with life,\" Jared said. \"Fontenot's welding.\"\n\n\"Well, let me give you my card case you decide you want get more, okay?\" Ann smiled.\n\nThe card said 'Ann Demonte' and Jared's eyebrow cocked.\n\n\"Hadn't had time get them changed,\" Ann admitted.\n\n\"Well, congratulations; when'd y'all get married?\" Jared asked.\n\n\"Tommy and me, we got married be three weeks Saturday,\" Ann said, holding out her left hand so Jared could see the engagement ring with tiny diamond and wedding band.\n\n\"Tommy? Tommy Huvall Junior?\" Jared asked.\n\n\"Yeah, y'all know him?\" Ann asked.\n\n\"Same guy I'm thinking 'bout, we went school together,\" Jared admitted. \"I mean, Huvall's a normal name around here.\"\n\n\"Y'all went to Baylor Lake?\" Ann asked.\n\n\"Same Tommy,\" Jared said, keeping his face bland.\n\nJared did not like Thomas Huvall, Junior. He had not liked the brash, arrogant boy when they'd gone to school together. He especially had not liked finding out that his wife, Rochelle Esposito-Broussard had continued to see Tommy behind Jared's back. Rochelle and Tommy had tried to pass Kathleen off as Jared's.\n\nA drunken girlfriend had let it slip that Rochelle was still sleeping with Tommy. Upon hearing that, Jared had demanded a paternity test on both Gloria and the then unborn Kathleen.\n\nThe paternity test had disclosed that neither child was Jared's. Nor was Tommy the father of Gloria Ann Broussard; Chad Theriot, another classmate from Baylor Lake High school had that honor. But Tommy Huvall was the father of Kathleen.\n\nBiological sperm donor or not, though, Jared Broussard was their Daddy. He loved and doted on his two girls.\n\n\"Well, congratulations, Mrs. Huvall,\" Jared said.\n\nHe looked around.\n\n\"So, uh, Tommy here?\" he asked.\n\n\"Huh? Oh, no, no, had a client took too long. Told Tommy I'd just get me a Big Mac,\" Ann said.\n\nThus saying, she got to her feet and approached the counter. Jared admired the way the skirt fit her nice bubble butt.\n\n\"Daddy, you want my French fries?\" Gloria asked.\n\nAs usual, Gloria had only eaten half the bag. Jared smiled and ate the rest of the bag, making loud chomping sounds.\n\nTo his surprise, Ann Huvall took her tray and sat down at their table again.\n\n\"My Daddy's the French Fry monster,\" Gloria told the woman.\n\n\"He is?\" Ann said, and moved her French fries on her tray, away from Jared.\n\n\"Here, Daddy,\" Kathleen said, holding out the rest of her French fries in her grubby little fist.\n\nJared made the two girls giggle and made Ann smile as he made chomping sounds again. Then Kathleen squealed when her Daddy also 'gnawed' on her small fist.\n\n\"So, you and Tommy? Y'all was friends in high school?\" Ann asked.\n\n\"No, not really,\" Jared said truthfully. \"But, you know how high school is.\"\n\n\"God, tell me 'bout it; longest three years of my life!\" Ann agreed.\n\n\"Three?\" Jared asked.\n\n\"I skipped a grade,\" Ann admitted.\n\nLooking at his watch, Jared saw that he'd be cutting it pretty close. Rochelle never criticized him if he was a few minutes late, but Jared knew it was important that Gloria and Kathleen be kept on a schedule.\n\n\"Y'all tell Mrs. Huvall bye; time go to Mommy's,\" Jared instructed as he wiped Kathleen's sticky hands with a wet wipe he kept in his shirt pocket.\n\n\"Bye Mrs. Huvall,\" Gloria said.\n\n\"Bye,\" Ann said.\n\n\"We come here every Wednesday,\" Jared said.\n\nHe didn't know why he said that. The woman was married. And she was married to a man he could not stand.\n\n\"'Tommy,' huh? Not 'Tom' or 'Thomas,' but 'Tommy,'\" Jared thought as he carried both girls, one in each arm. \"Grow up, huh, Tommy?\"\n\n\"I got it,\" an employee smiled and held the door open for Jared.\n\n\"Thanks; see you next Wednesday,\" Jared said.\n\n\"Oh? Ain't your weekend?\" the employee asked.\n\n\"Nope, 'fraid not,\" Jared said, a little surprised.\n\nThen he saw that the rotund woman was the manager of the fast food restaurant. He smiled and nodded in parting.\n\n\"Daddy's got a girlfriend,\" Gloria announced to her mother when Jared brought them into the Esposito home.\n\n\"I do?\" Jared asked, smiling. \"News to me.\"\n\n\"He does?\" Rochelle asked, stomach tightening.\n\nThe attractive blonde kept hoping, kept praying that she'd win Jared's heart again. She kept promising God, if she ever got the chance again, she'd be the best wife Jared Broussard would ever have.\n\n\"Should have kept that promise first time around, her mother had snapped at Rochelle. \"Instead of spreading them legs anyone said 'Hi' to you, huh?\"\n\n\"Uh huh, that Miss Huvall,\" Gloria reminded her father.\n\n\"Huh? Gloria, Honey, she's married to someone else,\" Jared patiently explained. \"She's not Daddy's girlfriend.\"\n\n\"Good thing; I'd have knock her out yeah,\" Rochelle joked.\n\n\"Oh, but she is married to your old boyfriend, Tommy,\" Jared said as he put Kathleen on the floor of Rochelle's parents' living room.\n\n\"Hey, Boy, how you doing?\" Francis Exposito greeted his former son in law.\n\n\"Good, Mr. Exposito, how you?\" Jared asked.\n\n\"Tommy? He got married? You making that up,\" Rochelle accused.\n\n\"No ma'am,\" Jared smiled.\n\nHe kissed both of his girls good bye, waved to Rochelle's mother, then left the house. Dead End had a much better hamburger than McDonald's, and unlike McDonald's, he could get an ice cold draft beer and could watch some attractive young ladies dance while enjoying burger and brew.\n\nHunger satiated, Ann Huvall drove to her mother in law's home, made sure to have briefcase and laptop in hand and locked her car securely. Then she let herself into the home.\n\nShe'd been with Ronnie Edwards, her mentor when they'd given a presentation at Seigel's Recycling. The forty or so employees looked bored as they made their sales pitch. None had any questions, other than to ask how much Seigel's was paying.\n\n\"It is a fifty-fifty split,\" Ronnie had explained patiently. \"The dental? For the Basic, you'd pay nine dollars and fourteen cents per pay cycle, Seigel's matches that nine dollars and fourteen cents.\"\n\nAnn's job had been to distribute the packets among the bored, listless employees. At the end of their presentations, she just stood, waiting for any of the employees to ask for assistance.\n\nTommy had been in that group of employees. The handsome young man had checked off the minimum coverage down the line and handed Ann the completed packet. She had blushed when Tommy had smiled at her. Then she had spluttered when he brazenly asked her for a date.\n\nThomas Huvall, Jr. had dark, curly hair, warm brown eyes, and a strong tanned face. Although a little on the heavy side, his arms and chest did look like Tommy had played sports in school.\n\nThe date had been dinner at Manny's Mexican restaurant, then miniature golf. Over dinner, Ann disclosed that she had grown up in foster homes; her mother was a prostitute and her father was unknown. He told her it was just him and his mother living in the small home he'd been in all of his life.\n\n\"God, feel like I known you all my life, yeah,\" Tommy said.\n\n\"Me too!\" Ann agreed.\n\nNow, walking into the small home, Ann felt like she didn't know her husband at all. They'd married after just a few days of knowing one another. Shortly after their marriage, Tommy somehow managed to lose his job at Seigel's Recycling.\n\nTommy assured Ann he would find employment soon. He promised her they'd save up their money. He promised her they'd get their own home and move out of his mother's home.\n\nTommy made many promises, but Ann had not seen any action on a single promise yet.\n\n\"Hey, there's my beautiful bride,\" Tommy called out.\n\nAnn sighed. It sounded like he was well into another night of drinking. Hopefully, he would be too drunk for sex.\n\n\"And there's that handsome husband,\" Ann said, forcing a smile to her face.\n\nAnn did not miss the disapproving look Chloe Huvall, Tommy's mother gave to her. Ann greeted her mother in law, but Chloe pretended not to hear Ann's greeting.\n\n\"Oh, oh, y'all know a Jared Broussard?\" Ann asked Tommy.\n\n\"That little pussy?\" Tommy guffawed and drained his can of beer. \"Yeah, I know him.\"\n\nHe did not ask why she wanted to know if he knew Jared Broussard. Ann wisely let the matter drop.\n\nIn the morning, Jared did think briefly of the cute young woman they'd met the evening before. Then he checked his log at the shop. Since it was not his weekend to have the girls, Jared agreed to go out on a rig and do some emergency repairs. He packed scuba gear and welding rig and drove down to the Industrial Canal. There, he was directed to the boat that would take him to the platform.\n\nWhile Jared was watching the dawn break over the Gulf Of Mexico, Ann was trying to dress quietly. Chloe Huvall found much fault with her daughter in law and did not hesitate to loudly inform Ann of her complaints.\n\n\"Going look for work today, Baby?\" Ann asked her husband as she slipped her feet into her pumps.\n\n\"Looking every day,\" Tommy lied.\n\nAt the office, Ann immersed herself in her day's work. One thing she absolutely hated doing was making cold calls. As Ronnie had pointed out, if she would do that first thing, she'd get it out of the way first. Then she'd have the rest of the day to concentrate on other things.\n\n\"Put it off 'til last? Then you got it hanging over your head the whole day,\" Ronnie said.\n\nThe last call netted her an appointment. The owner of the bar agreed to have all of the employees at the bar for nine thirty the following morning.\n\n\"How many? I'll bring by a box of Tornadough doughnuts,\" Ann promised. \"There's a Twisters Doughnuts in Paulton? Almost as good, I swear.\"\n\n\"Let's see, hmm, twenty, no, no, just hired the second shift cook and there's three new dancers, so, twenty four,\" Rosie, the owner of Dead End bar said.\n\n\"You got, oh, I need come along, make sure you do this right,\" Ronnie Edwards congratulated Ann when she told him of the appointment.\n\n\"Uh, why?\" Ann asked.\n\n\"Because Dead End has some of the prettiest women in DeGarde,\" Elizabeth Coutre, the manager of the Young Insurance branch said. \"Congratulations, though. We've had quite a few people try to get the foot in the door there. How'd you do it?\"\n\n\"I asked,\" Ann said truthfully. \"Just called them and asked.\"\n\n\"Seriously, I would like to come along,\" Ronnie said.\n\n\"They'll have their clothes on, Ronnie,\" Elizabeth teased.\n\n\"You don't know that,\" Ronnie teased back.\n\nThat night, over dinner, Ann did tout her success. Tommy said he wanted to come along. Ann shook her head, pasting a big smile on her face. Miss Chloe and Tommy had already drank eighteen beers out of a case. Supper was leftovers, and the television was blaring a rerun of an insipid sit-com.\n\n\"So, how did job hunting go today?\" Ann asked Tommy as she stoically chewed through the overcooked meal.\n\n\"Huh? Oh, it went good, yeah. That uh, what that is, that Kendricks Engineering said might be looking someone soon,\" Tommy lied.\n\n\"They said that last week, didn't they?\" Ann asked. \"You try that A. A. Soap place?\"\n\n\"Yeah, yeah, they ain't hiring,\" Tommy lied.\n\nHe was too drunk for intercourse, but was sober enough to demand a blow job. Ann unzipped Tommy's jeans, pulled down his stained briefs and nearly vomited at the smell of an unwashed cock.\n\n\"God damn, Tommy, when's last time you took a bath?\" she shrilled.\n\nHis slap stung her flesh. His slap also brought tears to her eyes.\n\n\"Forget it, bitch, ain't in the mood no more,\" Tommy snarled, pulling briefs and jeans up.\n\n\"Good, ain't in the mood neither,\" she snapped.\n\nThe next morning, Ann charged the four dozen Tornadough doughnuts, silently praying that the card would go through. Tommy had used her debit card recently. He said it was for a repair to his Dodge Challenger but had neglected to save the receipt.\n\nAt the bar, Ann smiled at the employees. It was a bar, a lounge. It had women that danced and removed their clothing. But the place was clean, well-lighted and smelled of food rather than cigarettes and spilled alcohol.\n\nThe majority of the employees were intelligent, engaged people, asking pertinent questions. A few times, Ann did have to turn to Ronnie and ask for clarification, but for the most part, Ann ran the presentation on her own.\n\n\"My card is with every packet and I will leave a few more here with Rosie; y'all have any questions, we're here to help,\" Ann assured the employees. \"Y'all hear about these insurance companies just want your money and never want help? Young Insurance ain't like that or I'd never work with them.\"\n\n\"Fucking card ain't working,\" Tommy snapped when Ann called him to share her good news; she'd signed up fourteen of the twenty one employees that had shown up for the presentation.\n\n\"Well, what you was using it for?\" Ann asked.\n\n\"Told you, needed water pump,\" Tommy barked.\n\n\"Thought you already replaced that?\" Ann asked.\n\nHe hung up.\n\n\"What?\" he screamed when she called back.\n\n\"We got disconnected; I was wanting see if you wanted go to that Tommy's Po-Boy place?\" Ann asked.\n\n\"And how I'm getting there? Told you, need a pump,\" Tommy snarled.\n\n\"Never mind,\" Ann sighed.\n\nA quick check of her bank account showed Ann that she did not have enough money to take herself to the sandwich shop. The Tornadough charge had brought the account down to four dollars and nineteen cents.\n\n\"Ann, Grant and I are going to Saladelights; our wives hate us and want us to eat healthy,\" Ronnie said.\n\n\"Which is why I keep a thing of beef jerky in my desk,\" Grant agreed.\n\n\"And we'd be thrilled if you'd come with us; our treat. You really did a terrific job at that presentation,\" Ronnie said.\n\nWednesday afternoon, Ann looked at the clock, nodded her thanks to the employees of Stolzle's Shoes and left. She'd not managed to sign any of the sales clerks up, but Tom Stolzle had talked to her about getting homeowner's insurance.\n\n\"And if I bundle homeowner's and auto?\" Tom asked.\n\nSo, she had one sale, but it was a hollow victory. She got into her car and smiled tightly. Miss Chloe would be incensed to find out that she'd filled up Ann's gas tank that morning; that would teach the ill-tempered woman to let her useless son use her gas credit card. Ann had taken it from his wallet as he slumbered drunkenly.\n\nWhatever Miss Chloe had cooked the previous evening had given Ann horrendous heartburn. And there was plenty of it left over.\n\n\"McDonalds, here I come,\" Ann said.\n\nJared stood in the playground area of the McDonald's. Both Kathleen and Gloria were having fun, so he didn't rush them.\n\n\"They having a good time,\" Ann commented.\n\n\"Hey! How's it going?\" Jared asked, genuinely pleased to see her.\n\n\"Good, you?\" Ann asked, smiling up at him.",
        "\"Yeah, just got in last night,\" Jared said.\n\nAnn did not object when Jared bought her a Big Mac meal along with the two Happy Meals for the girls.\n\n\"You not eating?\" Ann asked.\n\n\"Dead End's got ice cold beer and a burger guaranteed give me heartburn,\" Jared smiled. \n\n\"Y'all don't drink a bunch, huh?\" Ann asked.\n\n\"Huh? No, one maybe two, last thing I need is a DUI,\" Jared said.\n\n\"What's a D. U.? I?\" Gloria asked.\n\n\"It's when you drive when you're not supposed be driving,\" Jared told his daughter. \"So, since you got another what? Two, three years before you can get your driver's license, ain't got worry 'bout that no.\"\n\n\"Daddy, you told me I couldn't drive until I'm a hundred,\" Gloria reminded her daddy.\n\n\"No, no, told you you can't have you no boyfriends until you a hundred,\" Jared smiled.\n\n\"Daddy!\" Ann chided Jared.\n\n\"All right, all right, ninety nine, that better?\" Jared asked, smirking at Ann.\n\n\"Daddy, no,\" Ann said, returning Jared's smirk.\n\n\"How old you got be drive?\" Gloria asked.\n\n\"Sixteen. And you five now,\" Jared said. \"So, how long that is?\"\n\n\"Um,\" Gloria tried to think.\n\n\"Okay, sixteen, and you five now, so you take five away from sixteen,\" Jared coaxed.\n\n\"Eleven?\" Gloria asked.\n\n\"Very good!\" Jared said. \"Just for that, you get an extra kiss, okay?\"\n\n\"Okay!\" Gloria happily said.\n\n\"My weekend with them,\" Jared found himself telling his new friend. \"Fridays is fish sticks and mac and cheese. But Saturday? We do lunch here and then we go Chucky Cheese for dinner.\"\n\n\"You can come,\" Gloria invited Ann.\n\n\"Think my husband would let me?\" Ann asked Gloria, smiling.\n\n\"He can come too,\" Gloria decided.\n\n\"Oh, I don't think he likes Chucky Cheese,\" Ann said.\n\n\"What? No, no, Miss Huvall, everyone likes Chucky Cheese,\" Gloria corrected.\n\n\"Daddy's new girlfriend's going Chucky Cheese with us,\" Gloria announced to her mother when Jared dropped them off.\n\n\"Gloria, Sweetheart, Mrs. Huvall is not Daddy's girlfriend,\" Jared said.\n\n\"Oh yeah, found out, Tommy IS married,\" Rochelle said. \"Got it on his facebook page there.\"\n\n\"Told you, but I guess it just ain't true unless it's on Facebook, huh?\" Jared smiled and gave his two girls kisses.\n\n\"Oh, and someone got her a dentist's appointment tomorrow,\" Rochelle said, pointing to Gloria.\n\n\"They're on my dental plan,\" Jared reminded Rochelle.\n\n\"Got the card in my purse,\" Rochelle agreed.\n\n\"Oh, in your purse? Well, then we'll never find it,\" Jared teased.\n\n\"Know that's right, Francis agreed.\n\n\"Both of y'all, shut up,\" Rochelle shrilled.\n\n\"Bye girls,\" Jared said and gave the two girls another kiss each.\n\nAnn did not meet them at McDonald's for lunch on Saturday. She did not show up at the pizza place for dinner Saturday evening.\n\nJared had not expected the short young woman to join them. She was, after all, married. And unlike his ex-wife, Ann seemed like the sort of woman that would take her wedding vows seriously.\n\nSunday morning, Jared took Gloria and Kathleen to church. They went to St. Richard's Catholic Church in DeGarde, Louisiana, even though St. Elizabeth's By the Lake was closer to his home. St. Richard's had a more comfortable cry room.\n\nAnn and Tommy were in one of the pews. Ann looked happy; Tommy looked hung over. But when Tommy saw Jared heading to the cry room, he smirked. Then he nudged his wife and pointed.\n\n\"Him? That's the guy you was talking about?\" he asked, pointing at Jared.\n\n\"At the McDonald's? Yes,\" Ann agreed. \"He goes there with his daughters every Wednesday.\"\n\n\"Ain't his daughters,\" Tommy snorted.\n\n\"Huh? Yeah they are,\" Ann said.\n\n\"No, they ain't,\" Tommy smirked. \"Chad? Remember, met him couple months ago? He's the daddy of the older one and I'm the daddy of the baby.\"\n\n\"You got, that's terrible!\" Ann said.\n\nShe looked at the closed door of the cry room. The area was glassed off with heavily tinted glass and it was impossible to see into the small room.\n\n\"He knows?\" Ann asked in a scandalized whisper.\n\n\"Uh huh. Even sued us for custody; stupid pussy,\" Tommy giggled.\n\n\"Sued y'all for custody of them girls?\" Ann asked, looking at the glassed off area again.\n\n\"Yeah, believe that?\" Tommy giggled merrily. \"What a dumb ass, huh? But saves me paying child support.\"\n\nAnn did not comment, just looked at the cry room door. Before the service, a few more people entered the room, mostly women, with small children. One harried looking older man went into the room, leading a severely mentally challenged young woman.\n\n\"Don' wanna go,\" the young woman grunted.\n\n\"I know, but they need your help, remember?\" the old man coaxed.\n\n\"Hi Julie,\" Gloria greeted the challenged woman.\n\n\"Hi,\" Kathleen parroted her sister.\n\n\"See? Gloria and Kathleen are here,\" the father said.\n\nA few others greeted the young woman. The father just looked relieved. For an hour, he could sit in a semblance of calm and quiet.\n\nTommy wanted to blaze a trail out of the church as soon as the Deacon announced that the mass had ended. Ann sang along with the hymn, enjoying the choir.\n\n\"And, here, Julie, a quarter,\" Jared smiled, 'paying' Julie for her help.\n\n\"How about that, huh?\" her father smiled, nodding his thanks to the handsome young man.\n\n\"Hi, Miss Huvall!\" Gloria practically screamed when she saw the woman.\n\n\"Hi Ann, Tommy,\" Jared nodded.\n\n\"Well, hello Gloria, Kathleen. Y'all go here too?\" Ann asked the young girl.\n\nAnn scrutinized the younger girl's features. She was blonde, her husband had brown hair. The child had large blue eyes, her husband had piggish eyes of brown.\n\nThe older girl also did not look like Tommy, even though she had brown hair and brown eyes. Then Ann remembered that Tommy had said that Chad Theriot was Gloria's father.\n\nBut to Ann's eyes, she could see Jared's features in both girls. Both girls, particularly Gloria were warm, loving people, with happy smiles.\n\n\"Sup, Broussard?\" Tommy nodded, trying to hustle Ann to the doors of the church.\n\nIn her Toyota, Tommy took the driver's seat. Ann looked at Tommy. He cursed impatiently; they were stuck behind a thong of minivans. If Ann hadn't dawdled, singing that stupid hymn, they would already be halfway home by now.\n\n\"They was married? When y'all slept with his wife?\" Ann suddenly asked as she saw Jared's pickup truck.\n\n\"Huh?\" Tommy asked, then cursed when Jared somehow managed to cut in front of them. \"Shit! Look, huh? Made me miss our chance.\"\n\n\"Jared's wife,\" Ann clarified. \"Y'all know she was married when y'all slept with her?\"\n\n\"Yeah,\" Tommy chortled. \"Fucking whore.\"\n\n\"Tommy! That ain't nice, calling her that!\" Ann protested.\n\n\"He's off-shore, welding, yeah, he's a welder, he's off-shore busting his ass and we're over at her house fucking the shit out of her,\" Tommy laughed, remembering sleeping with Rochelle Esposito-Broussard.\n\nAnn was about to say something, then decided it would be pointless. Again, she looked at the man she thought she knew. The more time she spent with him, though, the more she realized, she didn't know him at all.\n\nAt Manny's, at the Golf-A-Rama, it seemed that they'd known each other for all their lives. There seemed to be a connection. Tommy had certainly claimed to feel that way. Ann had no idea that Tommy was a drunkard, nor the sort of man that would knowingly fornicate with another man's wife.\n\n\"Finally, God damn, about fucking time, huh?\" Tommy sighed as they pulled out onto the street.\n\n\"You just left church and you using His name in vain?\" Ann chided him.\n\nWednesday morning, Ann dressed for another day of work. Tommy barely acknowledged that she was leaving.\n\nAt work, during her 10:15 coffee break, Ann turned and collided with Jacy Kay, the receptionist of Young Insurance. A splotch of coffee soaked Ann's cream colored blouse.\n\nBoth women gasped, both women apologized, both women tried to blot up the stain.\n\n\"Well, need run on home before I go out to Mama's Po-Boy's, huh?\" Ann said cheerfully.\n\n\"Good luck with them; even Grant's struck out there,\" Ronnie said.\n\n\"Yeah, but I'm cuter than Grant,\" Ann mugged.\n\n\"Hell, that ain't saying nothing; everybody's cuter than Grant,\" Ronnie joked.\n\n\"Hey Ronnie? Not doing anything later? Think you could bite me?\" Grant laughed.\n\nAnn drove home, trying not to speed. She frowned; Tommy's newly repaired Challenger was in the same spot it had been in when she'd left that morning. Obviously Tommy's promise of going out looking for work first thing this morning had been forgotten.\n\n\"Oh God, yeah, oh baby, ugh!\" Ann heard Chloe Huvall call out.\n\nShe heard the slapping of flesh. She could also hear labored breathing over Miss Chloe's passionate screams.\n\nAnn felt her stomach lurch. The thought of the five foot tall, two hundred and forty pound woman having sex was a repugnant one.\n\nShe wondered where her husband was while his mother was busily doing the nasty. Ann stealthily walked down the hall toward the room she and her husband shared.\n\nAnd on her bed, the bed she and her husband shared, Chloe Huvall knelt, pasty white globes jiggling and shaking as Tommy pumped his short cock into her. Ann stood, unbelieving as Tommy's cock plunged in and out of Miss Chloe's slimy pussy.\n\nShe then had the foresight to dig her cell phone out of her purse.\n\n\"Hi y'all,\" she said.\n\nMiss Chloe screamed in shock. Tommy turned and looked over his shoulder at his wife.\n\nShe snapped off a few pictures with her cell phone, then rapidly scampered out of the house.\n\nCoffee stained blouse or not, Ann did manage to garner two sales that afternoon. But, no, Mama's Po-Boys did not decide to go with Young Insurance.\n\n\"Like I said, not even Grant could sell to them,\" Ronnie told Ann.\n\n\"No, but, oh my God, their oyster po-boy?\" Ann agreed.\n\nThat afternoon, Ann sat at her desk, not doing anything. She'd finished up the paperwork for her sales. She'd made sure her new bank account at First Union had received the latest paycheck. She double-checked that her old account at DeGarde National Bank had been closed.\n\nShe had not given Tommy access to her new bank account. The debit card was secreted in the case of her laptop computer. Tommy had complained about the old account being closed and had again slapped Ann's face when she snapped that he'd drained it, while never putting a penny into the account.\n\n\"Um, Mrs. Huvall? Getting ready go now,\" Leah Farmer, another agent said, breaking Ann out of her reverie.\n\nAnn looked around. They were the last ones there. Wearily, she nodded and got to her feet.\n\nMcDonald's, she decided, would get her business. From there, she had no idea what she would do, where she would go.\n\nAgain, Gloria and Kathleen were inside the McDonald's playground area. Ann smiled and parked her car.\n\n\"McDonald's in Paulton never had nothing like this,\" Ann said.\n\n\"Hey,\" Jared said. \"One in Baylor Lake didn't neither. Not that my mom ever stopped by there anyway.\"\n\n\"Hi Miss Huvall!\" Gloria called out as she crawled through a tube.\n\n\"Hi!\" Kathleen said brightly.\n\n\"Hi!\" Ann called back.\n\n\"Yeah, my mom was the kind, you didn't want to eat what she put in front of you? Then you just wasn't hungry,\" Jared said.\n\n\"Can I talk with you?\" Ann asked suddenly.\n\n\"Uh, yeah, bench over here,\" Jared said.\n\nJared sat. Ann sat a few inches away and steeled herself.\n\n\"Come home, got coffee on my top,\" Ann said finally.\n\nShe pointed to her small breast, to the splotch of coffee. Jared looked at the breast.\n\n\"Wanted change out of it, you know, but then come in and find my husband, my husband, man I'm married to, doing the nasty with his momma,\" Ann said, voice tight.\n\nJared thought about it for a moment. Then his brown eyes opened wide and his mouth hung open.\n\n\"Fuck... I mean, having sex? With his mother? His own mother?\" Jared hissed.\n\n\"Uh huh, y'all believe that?\" Ann asked.\n\n\"What'd you do?\" Jared asked.\n\n\"Mean, after I stopped puking?\" Ann asked.\n\n\"Daddy you ready?\" Gloria asked, running up.\n\n\"Yeah, Sweetheart, let's go get our Happy Meals,\" Jared said.\n\nHe picked up both of his girls and walked toward the McDonald's door. Ann got to her feet.\n\n\"We'll talk more,\" Jared promised her. \"Unless you in a hurry?\"\n\n\"Got nowhere go,\" Ann said simply.\n\nJared again bought Ann a Big Mac combo meal, along with Gloria's and Kathleen's Happy Meals. As he got Kathleen and Gloria situated, got their meals ready, Ann looked at both girls.\n\nTommy had said that he was Kathleen's daddy, and Chad Theriot, another school friend, was Gloria's daddy. But to her untrained eye, Ann could see no trace of Chad Theriot, nor any trace of Tommy in the two girls.\n\nAnd if Jared did know that he was not their father, the man did not show it. He was as loving and attentive a man as she'd ever seen.\n\n\"Seriously, what'd you do?\" Jared asked when Gloria and Kathleen were distracted.\n\n\"Didn't do nothing, just turned and left out of there,\" Ann said. \"As y'all can tell, didn't even change out my top.\"\n\nJared again looked at her breast. Then he looked at her as she slowly chewed her Big Mac.\n\n\"Well, you going back there?\" Jared asked.\n\nShe shook her head no. Then she looked up at him. A single tear rolled down her face.\n\n\"Moved here? Was staying in this horrible little boarding house, Mrs. Duvalier? God, that woman was crazy, y'all hear? Had rules for just about everything? Then met Tommy and we get married and we're going get our own place, but that ain't never happened. Now I ain't got nowhere go,\" Ann admitted.\n\n\"Got an extra room at my house,\" Jared said.\n\nJared accepted Kathleen's offered French fries and made Gloria and Kathleen squeal as he made chomping noises. Ann smiled and made Gloria laugh as she moved her French fries away from 'the French Fry Monster.'\n\n\"No!\" Kathleen squealed when Jared told her that her fingers looked just like French fries.\n\n\"No, Daddy, y'all don't eat her fingers,\" Ann ordered.\n\n\"This room?\" Ann asked quietly. \"Y'all going want us doing the nasty for it?\"\n\n\"I'm always want that,\" Jared said. \"I'm a guy. But, no, Ann, I wouldn't ever make you do nothing like that.\"\n\n\"Promise?\" Ann asked.\n\n\"Promise,\" Jared said. \"I'll even do a pinky swear y'all want.\"\n\n\"Here, French Fry Monster, I'm done,\" Gloria announced, holding out her French fries.\n\n\"Yum! And those fingers look like French fries too!\" Jared exclaimed.\n\n\"YOUR fingers look like French fries,\" Gloria stated.\n\n\"You know what? They sure do!\" Jared said. \"Think I should eat them?\"\n\n\"No!\" Ann, Gloria and Kathleen all shouted.\n\n\"See y'all next Wednesday,\" the manager smiled as the quartet filed out of the restaurant.\n\nAnn followed Jared to Rochelle's house. She sat in her car and waited while Jared dropped his girls off.\n\nThe young woman that answered the door was clearly Kathleen's mother; they both had straw colored hair. The woman touched Jared often, licked her lips, thrust her chest at him, smiled, laughed.\n\nAnn watched Jared's face as he turned and walked to his truck. There was a heaviness in his face as he left his little girls behind.\n\n\"No, Tommy Huvall, y'all ain't man enough be that little girl's daddy, y'all hear?\" Ann said bitterly.\n\nShe then followed Jared to the small home. The living room and kitchen/dining room were furnished with furniture that had been selected for comfort, not style. The children's' room, however, had two Princess beds side by side, an ornate desk, chest of drawers and dresser.\n\nTheir toys were in a large toy box, clothing was neatly hung in the closet.\n\n\"Can't believe how neat it is,\" Ann commented, looking around the children's' room.\n\n\"Uh yeah, Kathleen has to clean it before we can leave,\" Jared admitted.\n\nThe room Ann would be using was a simple room. Again, the furniture had not been selected for style. There was a simple single bed, with a patchwork quilt covering.\n\n\"Hmm, don't remember last time, we might want wash them sheets yeah,\" Jared said.\n\n\"Oh, think I can throw my top in with it?\" Ann asked, again indicating the coffee stained breast.\n\n\"Uh, yeah, yeah, need see about getting your clothes and stuff, huh?\" Jared said, looking at Ann's small chest.\n\n\"Come with me?\" Ann begged.\n\nJared smiled tightly. He knew that would not be a good idea. There was no shortage of ill-will between himself and Thomas Huvall, Jr. He had no doubt he could take Tommy in a fair fight, but he also knew Tommy didn't know how to have a fair fight.\n\n\"Actually, Ann, might want get the police help you out,\" Jared said.\n\nJared drove the two of them to the DeGarde Police Department. There, Sergeant Leeanne Pyle was assigned to them.\n\n\"All right, call him, let him know we're coming get your clothes and other things,\" Leeanne said after filling out the form.\n\n\"Where the fuck you at, huh?\" Tommy snarled into the phone.\n\n\"Police Department,\" Ann said.\n\n\"Aw, Jesus, what the fuck did you do, huh, stupid bitch,\" Tommy spat.\n\n\"Didn't do nothing,\" Ann protested. \"But, uh, listen, coming get my clothes right now, all right?\"\n\n\"No, no, it ain't all right,\" Tommy said.\n\n\"Tommy, them's my clothes, y'all ain't got no right keep me getting them,\" Ann said.\n\n\"Just try,\" Tommy challenged.\n\n\"Okay, can see this is going be fun,\" Leeanne said.\n\nCaptain Bob Chastaine assigned Officer Brian Jochet to go with them. Brian had played football in high school, and unlike Tommy, Brian had maintained his high school physique.\n\nJared did inform both Leeanne and Brian that there had been bad blood between himself and Thomas Huvall, Jr. in the past. All did agree, it would be best for Brian to remain with Tommy while Leeanne went with Ann to gather her things. Jared would stay outside of the Huvall home, with his pickup truck.\n\n\"He know where you staying?\" Brian asked Jared.\n\n\"Officer, this Baylor Lake,\" Jared smiled tightly. \"Everyone know where everyone staying.\"\n\n\"Oh, Jared! I didn't think 'bout that!\" Ann cried out.\n\n\"Ain't no big deal,\" Jared assured her.\n\n\"Then, it might be best you just go on home; we'll load everything in the cruiser,\" Leeanne suggested, in a tone that let Jared know it was not a suggestion.\n\nAlmost forty minutes later, Leeanne helped Ann carry her three bags of clothing into Jared's home. The pretty red headed officer did nod her head in approval when Jared put the freshly washed and dried sheets onto Ann's bed.\n\n\"You in good hands,\" she told Ann. \"You in a lot better hands now.\"\n\n\"So, what happened?\" Jared asked when Leeanne left the home.\n\n\"He started getting all loud and stupid,\" Ann said. \"I'm tired and I stink; where's the bathroom?\"\n\n\"Right there. Now, the Big Bird bottle is bubble bath, hear?\" Jared said.\n\nAnn laughed and dug a robe out of one of the bags.\n\n\"I'm taking me a long, hot shower, then I'm just going bed,\" she said. \"Good night.\"\n\n\"Good night,\" Jared agreed.\n\nAnn staggered into the kitchen the next morning, a severe case of bed head not quite distracting Jared from her choice of sleep wear. She wore a short, tight tee shirt and a pair of panties and on her feet she wore fuzzy pink socks.\n\n\"Oatmeal on the stove; I ad raisins and pecans to it,\" Jared said, jamming himself under the table.\n\nJared's cock was tenting his boxers. When Ann strained to reach a mug off of a hook and the panties stretched across her bubble butt, he almost groaned.\n\n\"Where the bowls?\" Ann asked.\n\n\"Cabinet next to the stove. Spoons in the drawer next to the refrigerator. I don't know why; that's just where my Mom always put them,\" Jared said.\n\n\"This is great; Miss Chloe never made nothing,\" Ann said, taking a seat at the table.\n\n\"That's fine for now, but when the girls are here? That's Gloria's seat,\" Jared smiled.\n\n\"Oh! Where you want me then?\" Ann asked.\n\n\"Next seat down,\" Jared said. \"Again, when they ain't here, that's fine yeah. But Kathleen gets all bent out of shape things ain't just right.\"",
        "Ann slid one more seat over. Jared wished she had not. The tee shirt was thin and the light now showed that her areolae were about the size of a half dollar.\n\n\"Mm-hmm,\" Ann murmured her approval as she spooned the oatmeal in.\n\n\"Before I forget, here, here's your keys,\" Jared said. \"Need to get to the shop by seven; don't know when you got to go in,\" Jared said, sliding a set of keys across the table to her.\n\n\"Thanks,\" Ann said.\n\n\"Uh huh,\" Jared said, trying to will his erection down.\n\n\"Coffee's good too,\" Ann complimented.\n\n\"Just make sure pot's off before you leave,\" Jared said and decided to make a break for the door.\n\nWhen Ann walked in to the office, Jacy Kay, the receptionist handed Ann a slip of paper. Jacy's expression, normally one of friendliness, was one of exasperation.\n\n\"Your husband calls me a lying bitch again, I'm calling the police,\" Jacy said in her small voice. \"I am not paid enough to put up with that.\"\n\n\"Jacy, he called y'all that? Call the police now,\" Ann said, dropping the slip into the garbage can.\n\nShe went to her desk, then sighed and picked up the telephone. Silently praying, Ann punched in the number.\n\n\"About fucking time,\" Tommy snapped. \"And I done told that little bitch she don't need be lying protect you neither.\"\n\n\"She wasn't lying, Tommy, I just got here,\" Ann said. \"Now, what y'all want?\"\n\n\"Okay, fine, you win,\" Tommy snapped. \"You win, now come on home.\"\n\n\"I win? I win what?\" Ann asked, baffled.\n\n\"Whatever little game you playing,\" Tommy snapped.\n\n\"Oh my God! I seen y'all doing the nasty! And y'all think this is... Tommy, I think you crazy, hear?\" Ann sputtered. \"Don't be calling here no more, hear?\"\n\nDespite being shaken, Ann managed to get appointments with T-Dan's Quick Repair Service as well as the Acapulco Grande Mexican restaurant in Pinoak, Louisiana.\n\n\"I hate doing cold calls,\" Ann told Ronnie. \"But you right. Get them out the way? They ain't just hanging over you whole day.\"\n\nAt T-Dan's, which was housed in a trailer in Jack's Creek, Louisiana, Ann talked with Danny Boudreaux, Darlene and Hillary. As all three had the same last name, Ann couldn't tell if both young women were his daughters, or if just one was his daughter and the other was his wife. The fact that both girls called him 'Daddy' did not clear anything up; they both leaned against him, both touched the older man quite affectionately. And there was a cockatoo that screeched insults at Ann the entire time she was talking with the three people about the insurance plans that Young Insurance could offer them.\n\nAs she was wrapping up her spiel, two babies gave lusty cries. Ann sighed as two small infants were quickly scooped up and Darlene and Hillary both began to breast feed their babies.\n\n\"Few things as beautiful, huh?\" Danny asked, smiling proudly. \"Ms. Dumont, I really think we'll be going with that health plan, you know, bundle it for my three employees.\"\n\n\"Three employees?\" Ann smiled.\n\n\"Yeah, Darlene's the accountant,\" Danny said. \"Hillary's the paperweight, and I'm the slave,\" Dan smiled.\n\n\"Let's get on it,\" Ann said, watching the two young mothers.\n\n\"I'm the paperweight?\" Hillary screeched, flinging her long blonde hair back.\n\n\"And Since when did she get upgraded?\" Darlene teased.\n\n\"Evil step-mother,\" Hillary said.\n\n\"Whatever,\" Darlene said and the two women giggled.\n\nUpon her return to the office, Ann was informed that the police had been called on her husband for harassing Jacy Kay.\n\n\"Why doesn't he just...\" Ann asked, looking at her cell phone.\n\nShe saw that the battery had no juice and wondered how long it had been out of power. She sat at her desk, still looking at the screen.\n\n\"And I bet I left the charger in the drawer,\" Ann said out loud.\n\n\"That, you get that at PC Nation?\" Ronnie asked. \"They should be able sell you one.\"\n\nAnn looked up. Ronnie smiled sympathetically and shrugged his shoulders.\n\n\"Couple years back, went through a divorce of my own,\" he said quietly. \"It is amazing, all the little bitty things you forget, run out of the house without thinking about it, and then, damned if that ain't the first thing you needing.\"\n\n\"It's written all over my face?\" Ann asked quietly.\n\n\"Just about,\" Ronnie agreed.\n\n\"See y'all tomorrow,\" Ann said, getting to her feet.\n\n\"Hey, doing us a chicken and rice, okay?\" Jared called out when Ann entered the small home.\n\nShe wanted to refuse; Mrs. Chloe had cooked a chicken and rice dish that made Ann nauseous. The woman used leg quarters because they were cheaper, and did not clean the chicken very well.\n\nBut she was hungry. And, she noticed, Jared's chicken and rice smelled a lot better than Mrs. Chloe's chicken and rice had smelled.\n\n\"Just let me get out of these clothes,\" Ann called back.\n\n\"Oh boy!\" Jared said.\n\nA moment later, Ann realized what Jared's exclamation had inferred. She squealed.\n\n\"That's not what I meant!\" she yelled from her bedroom.\n\nShe smiled when she heard Jared's laugh. Ann pulled a baggy tee shirt over her unfettered breasts. She believed that her breasts were small enough that her bra-less condition would not be readily noticeable.\n\nShe searched her garbage bags and found her Paulton High School gym shorts. She didn't know who had decided the school colors of battleship gray and white but it had been an ugly color. But the nylon shorts were comfortable. She did not wear panties underneath, preferring to be comfortable.\n\n\"Good day?\" Jared asked as he covered the large skillet.\n\n\"Yeah; that's not how Mrs. Chloe makes hers,\" Ann said.\n\n\"Might not have noticed, but I ain't Mrs. Chloe no,\" Jared said.\n\n\"No, y'all too pretty,\" Ann agreed.\n\n\"Oh, thank you,\" Jared preened, batting his eyelashes playfully.\n\n\"I do anything?\" Ann asked.\n\n\"Fixing load up the dishwasher, be ready 'bout twenty minutes,\" Jared said.\n\nThey sat at the kitchen table, each with a can of beer. Ann told him about her day and Jared listened. Then he checked the skillet and served them.\n\n\"Um!\" Ann enthused, chewing the piping hot dish.\n\n\"Blow on it,\" Jared coached. \"Want some Crystal's for that?\"\n\n\"Crystal's?\" Ann asked.\n\n\"Only kind of hot sauce allowed in this house,\" Jared said.\n\nThey finished eating. Then Ann leaned against him as he put their dishes into the dishwasher. Jared could feel that she wore no bra underneath her tee shirt and his erection was immediate.\n\n\"Got you a microwave at work?\" Jared asked, remaining bent over as he grabbed a few storage containers from a lower cabinet. \"Make you a lunch you want.\"\n\n\"Ooh, yeah!\" Ann enthused.\n\nHer hug didn't help Jared's condition. But he spooned a heaping amount into a container and showed her where he was putting it in the refrigerator. Then he spooned the rest into another large container.\n\n\"Thursday, you like that Big Bang Theory?\" Ann asked.\n\n\"Yeah,\" Jared said.\n\nHe sat on his recliner and she plopped down on the long couch. Even though the show was a rerun, they both enjoyed the show.\n\n\"Hated when they took that 'Mike & Molly' off,\" Ann commented.\n\nJared looked over and saw that her shorts had slid up her short thighs. He was looking at a goodly expanse of a pudgy buttock.\n\n\"Uh huh,\" Jared agreed, just looking at her cute butt.\n\n\"I'm probably going off-shore tomorrow; Chris had Alan scheduled, but knowing Alan, son of a bitch will call in sick,\" Jared said. \"I'll shoot you a text that happens, all right?\"\n\n\"That dangerous?\" Ann asked, swiveling to face him.\n\nWhen she swiveled, Jared saw a flash of pink blonde pubic hair. His blood left his brain for a moment.\n\n\"Uh, yeah, I mean, I do underwater welding, so, yeah, kind of,\" Jared managed to say.\n\nHe got a quick kiss, just a peck, lip to lip when he wished Ann a good night. Then he went into his bathroom and stroked His cock to a juicy climax, thinking about putting his houseguest on her knees, pounding into her tight ass.\n\nAlan did call in sick. Jared smiled and sent Ann a text that he was going off-shore, probably be gone about four or five days.\n\n\"Be careful, ILY,\" she responded.\n\n\"ILY?\" he tapped out.\n\n\"I love you,\" she responded.\n\n\"Oh. ILY2,\" he sent.\n\n\"The girls?\" Ann texted a moment later.\n\n\"Not my weekend,\" Jared responded.\n\nHe smiled when she sent a sad smiley face. That was how he felt when it wasn't his weekend.\n\nJared was off for four days, coming back on Tuesday. He sent Ann a text message letting her know that he was back on dry land, would be home when she got home from work.\n\n\"ILY,\" she responded, along with a smiley face.\n\n\"ILY2,\" he responded.\n\nJared realized that he enjoyed having someone to talk to. HE enjoyed having someone that noticed when he wasn't there, someone that was glad when he was home.\n\nThere was a stack of clean clothes on his bed when he walked into his bedroom. There was tracks on the floor, as if someone had run a vacuum cleaner in the room. The towel that'd he'd looped over his shower bar was gone, as was the washcloth he'd draped over the faucet. And the mirror sparkled.\n\n\"Someone's been busy,\" Jared noted.\n\nThe hall bathroom gleamed. The kitchen was also spotless.\n\n\"Yep, someone's been pretty busy,\" Jared smiled.\n\nHe dumped the clothes out of his duffel bag on the floor of the laundry room, then checked all pockets. Satisfied that they were emptied, he began his wash. His cell phone chimed.\n\n\"Hello?\" he answered his phone.\n\n\"Y'all hungry?\" Ann's cheerful voice asked.\n\n\"Could eat,\" Jared agreed.\n\n\"Acapulco Grande? Out in Pinoak?\" Ann asked. \"Got a presentation tomorrow; kind of wanted check the place out first.\n\n\"You there now?\" Jared asked\n\n\"No, no, I'm at the office,\" Ann said.\n\n\"Let me grab a quick shower and I'll pick you up,\" Jared said.\n\nHe did not dawdle, even as he did imagine a nude Ann bent over, scrubbing his tub clean, cute bubble butt wiggling and waggling. Twenty minutes later, he was backing out of his driveway.\n\n\"Almost forgot what it's like, having a man's got him his own wheels,\" Ann smiled as Jared opened the passenger door of his truck.\n\n\"Man, I ain't Tommy no,\" Jared thought.\n\nAt the restaurant, he helped her out of the truck and did not object when she clutched onto his arm. She did not release his arm as they stood in the small vestibule of the restaurant. She did not release his arm as they walked to their table.\n\n\"By the way, thank you for cleaning the house. Didn't have to do that,\" Jared said as they looked over their menus.\n\n\"By the way, how much rent y'all going charge me?\" Ann asked.\n\n\"None,\" Jared said. \"Momma didn't charge me when it was her house.\"\n\nThe meal was okay. It was standard Tex-Mex fare; only smaller portions and higher prices.\n\n\"Thank you, but I'm one invited y'all,\" Ann said when Jared paid for the meal.\n\n\"Uh huh,\" Jared smiled.\n\nDriving back to the office, they drove past the Shinano River Spa and both looked over at the squat building.\n\nFor sexual relief, Jared occasionally frequented a 'massage parlor' in Jack's Creek. Shinano River Spa had four Taiwanese women working in the small building. For ninety dollars, they would bathe him, then wrap him in a few warm wet towels. And lay Jared onto a padded bench. Each towel was gently removed, one by one, as the attractive Asian woman rubbed those parts of the body.\n\nFor twenty five dollars, the woman would gently, slowly stroke his erect cock. When he signaled that he was nearing crisis, she would take one of the discarded towels and catch the semen into the soggy cloth.\n\nFor fifty dollars, she would take his engorged cock into her small mouth and suck Jared to orgasm. Then she would spit the remnants into one of the soggy towels.\n\n\"Two hundred dollar? All three hole, okay? All three, very good, everybody like,\" the more aggressive of the four women would proposition Jared.\n\n\"Maybe next time,\" Jared would smile.\n\n\"You say that last time,\" she would cackle.\n\nJared made a mental note to spend two hundred dollars for all holes. Ann made a mental note to call the place, see if they'd be interested in insurance.\n\n\"Thank you again, but I'm one invited y'all,\" Ann said as they pulled in front of Young Insurance.\n\n\"Welcome,\" Jared said.\n\nShe leaned over the console and kissed him on his lips. Then, when he opened her door and helped her down from the truck, she stretched and gave him another kiss on his lips.\n\n\"See you tonight,\" she cheerfully said and dashed into the office.\n\n\"Um!\" Jacy Kay teased in her squeaky little voice. \"I saw that! You was kissing your boyfriend.\"\n\nAnn giggled, checked her mail slot then scampered down the hall.\n\nJared drove back to the Shinano River Spa and paid two hundred and ninety dollars. The girl rubbed him down, then sucked him to a juicy climax. After spitting out his semen into a towel, she wiped his cock clean then sucked him up again. When he was hard, she rolled a condom onto his cock and squatted over him.\n\n\"Oh you good, you big, you good lover,\" she sang out as she slid her sparsely furred pussy down his shaft.\n\nShe giggled when Jared reached up and toyed with her small breasts. She did not orgasm as she bounced up and down on him but did give a few fake moans of pleasure as they coupled.\n\n\"Okay, you go slow, you too big, you hurt you so big,\" she encouraged after sliding a fresh condom onto his cock.\n\nJared wondered if Ann liked anal sex. Rochelle, his former wife, Tommy's former girlfriend had claimed she hated anal sex.\n\nRochelle had hated anal sex with Tommy. Tommy didn't understand that a woman's rectum did not produce lubrication and thought he should be able to just jam his cock into her.\n\nJared had taken the time to lubricate Rochelle's rectum, had taken the time to loosen her up.\n\nBy the time Jared had pushed himself all the way into Rochelle's very tight ass, she liked anal sex. Rochelle didn't like it as much as vaginal intercourse, but did enjoy the occasional ass fuck.\n\n\"Oh you good, you good lover, you so big you splitting me in half,\" the Asian woman claimed as Jared's cock slid into her.\n\n\"Uh huh,\" Jared said, not fooled.\n\nJared gave the Asian woman a twenty dollar tip as he left, balls fully drained.\n\nThen he stopped at Super One Foods grocery store on the way home.\n\n\"Lasagna; haven't made a good lasagna in a while,\" Jared thought.\n\nAnn came into the home just as Jared was finishing assembling the various components of the lasagna.\n\n\"Oh boy! La sag nay!\" Ann said when Jared said they were having lasagna for dinner. \"Let me get out of my clothes.\"\n\n\"You keep promising that but I haven't seen it yet,\" Jared teased.\n\n\"That's not, you know what I mean!\" Ann giggled and kissed him on his lips.\n\nAgain, she wore the oversized tee shirt and the ugly gym shorts. And, again, they drank a can of beer each and talked about their day.\n\n\"You uh, you thinking might want you a divorce from Tommy?\" Jared asked.\n\n\"Yeah,\" Ann said sadly.\n\nShe looked up at Jared. He gave her a reassuring smile and she nodded her head.\n\n\"Yeah, I mean, I know I ain't all that pretty,\" Ann said.\n\n\"What? Who the hell told you that?\" Jared snorted.\n\n\"Everybody,\" Ann said.\n\n\"Well, everybody's dead ass wrong,\" Jared said firmly.\n\n\"And I know I'm not real smart,\" Ann continued.\n\n\"Jesus, Ann, really?\" Jared asked. \"Graduated a year early? Got a job at Young Insurance? And you're not that smart?\"\n\n\"But, I know I should have never married that Tommy Huvall Jr.,\" Ann said and drained her can of beer. \"Man that'd do the nasty with his own momma?\"\n\n\"First true thing you done said,\" Jared agreed.\n\n\"And how you treat them girls? You love them? That's how I want be treated,\" Ann said.\n\n\"That's how I'd treat you,\" Jared blurted out.\n\n\"Y'all already treating me like that,\" Ann said after a long moment of silence.\n\n\"Yeah, well,\" Jared said and determined that the lasagna was very nearly ready.\n\n\"Now, I don't know why, don't ask me, but whenever my momma made lasagna? She always fixed a can of early peas go with it,\" Jared said. \"I asked her last time I made lasagna and she said she don't know why she started that, but lasagna always means early peas.\"\n\n\"Why you all nervous?\" Ann asked.\n\n\"What?\" Jared giggled nervously.\n\n\"Is it because of what you said?\" Ann asked quietly.\n\n\"Yeah,\" Jared admitted a moment later.\n\nAnn didn't say anything. When Jared chanced a look at her, she was blushing lightly.\n\nThey ate their meal in silence. Each time one, or the other started to say something, they'd clam up. And look away.\n\nAnn helped Jared clean up. Then Jared reminded her that he'd just come in from off-shore; he was exhausted.\n\n\"Good night,\" Ann said as they stood outside of his bedroom door.\n\n\"Good night, Jared agreed.\n\nShe stood on her tiptoes and kissed him, lip to lip. She wrapped her arms around his neck for a moment, then released him and walked to her own room.\n\n\"Good night, she said again and entered her own bedroom.\n\n\"Uh huh,\" Jared said.\n\nHe went into his bathroom and masturbated to thoughts of his sexy houseguest.\n\nIn her bedroom, Ann made sure the door was firmly shut. At the Huvall home, the bathroom door did not firmly shut. It had a habit of slowly creaking open, often at inopportune moments.\n\nSeeing that the door was firmly shut, Ann dropped her shorts to the floor and lay down on her bed. Then she hiked her tee shirt up to her throat and began masturbating. First, she squeezed, massaged her breasts in her small hands. Then she pinched her hard nipples between thumbs and forefingers.\n\n\"Um,\" she moaned softly as the delicious feelings travelled from nipples to pussy. She twisted and tugged her nipples, steadily increasing the pressure.\n\nJust as she was about to gasp in pain, she reached down and began to run her fingers up and down her wet slit. The pinkish blonde hair was wet with her excitement as she ran her fingers up and down.\n\n\"Oh yes,\" she hissed, imagining Jared's fingers touching her.\n\nShe drove two fingers of her other hand into her pussy and imagined Jared driving his cock into her wet opening.\n\n\"Ah, shit!\" she grunted in orgasm.\n\nThen she felt terribly ashamed. Only disgusting, sinful girls masturbated. Only disgusting, dirty girls masturbated while thinking of another man when they were still married.\n\n\"No,\" she said out loud, trying to chase those thoughts away. \"No.\"\n\nAt the breakfast table the next morning, Jared dug his wallet out of his jeans. Then he studiously flipped through a small stack of business cards he'd dug out of the battered wallet.\n\n\"How many them cards y'all got?\" Ann smiled as she scraped the last bite of cheese grits from her bowl.\n\n\"And, damn, of course, always the last one, huh?\" Jared smiled, putting a business card in front of her.\n\n\"What's, Penny Jones, Attorney,\" Ann read aloud.\n\n\"Divorce? Custody cases? She's one of the best,\" Jared praised. \"I mean, anyone from there should be good. But really? I totally trust Miss Penny.\"\n\n\"Then that's good enough for me,\" Ann agreed.\n\n\"And its Wednesday,\" Jared reminded her.\n\n\"What time you get them?\" Ann asked.\n\n\"Pick them up at three, supposed be raining,\" Jared said.\n\n\"What's rain mean?\" Ann asked.\n\n\"We doing us some finger-painting,\" Jared said.\n\n\"Oh boy!\" Ann laughed.\n\nWhen she stretched up on tiptoes to kiss him at the door, Jared smiled and bent. She put her small arms around his neck and lightly licked his lips.\n\n\"I. L. Y,\" she smiled.\n\n\"I. L. Y. too,\" Jared smiled, kissed her again, then left for another day of work.\n\nIn the shower, Ann managed to get the shower head down. She held the pulsing water nozzle against her breasts for a few moments, then she jammed the nozzle forcefully against her pussy. After a few moments, she shuddered in orgasm.\n\n\"Jared Broussard,\" she said out loud. \"I ain't never touched myself so much before, I swear.\"\n\nAt work, Ann made sure that Jacy Kay, the receptionist, and Elizabeth Coutre, the manager of the office knew that she'd be leaving at two thirty. Elizabeth smiled and shrugged.",
        "\"Ann? You do realize? You're a salesperson. You can pretty much come and go as you want, just as long as you get your work done,\" the woman smiled.\n\n\"I know; I just believe in being responsible,\" Ann said.\n\nHer first call was to Penny Jones' office. Penny Jones' assistant, a very young sounding girl made an appointment for Friday, two pm. Ann thanked the girl, then set her jaw firmly.\n\nShe generated no sales, even after making twenty cold call phone calls. She did catch up on her paperwork, filed everything she had, then sat. Ronnie smiled as she blew a strand of hair out of her face.\n\n\"Okay, so now? You get out all your clients and you look at ways you can save them a few bucks,\" he advised. \n\n\"Okay?\" she said, clicking the icon on her desktop.\n\n\"Clients? They'll remember the salesperson that saved them a few bucks. And they'll tell their neighbor, their brother, their co-worker about the salesperson that saved them ten, fifteen, twenty bucks on their insurance,\" Ronnie counseled.\n\nShe started from the oldest files and moved through at a snail's pace. By two thirty, she'd called seven clients and made appointments with three of them.\n\n\"See you tomorrow,\" Ann said.\n\nThe rain was coming down in sheets by the time she made it home. She smiled; Jared's truck was already there.\n\n\"Hi Miss Ann; we're finger-painting,\" Gloria happily called out.\n\n\"Well, hi!\" Ann cheerfully said.\n\n\"Hey; what you doing home so early?\" Jared asked.\n\n\"Uh, it's Wednesday?\" Ann said.\n\nShe then made him take a lamp shade off of a table lamp while she taped a sheet of construction paper to the kitchen wall.\n\n\"Gloria, what's your favorite color in the whole wide world?\" Ann asked.\n\n\"Purple,\" Gloria announced.\n\n\"Blue,\" Kathleen announced.\n\n\"Okay, Gloria, need you sit right here, sit right like that, hold still,\" Ann coached as she positioned the lamp.\n\n\"What are you doing?\" Jared asked as Ann rapidly traced Gloria's shadow on the sheet of white construction paper.\n\n\"All right, Daddy, put this on the refrigerator,\" Ann said and taped another piece of paper onto the wall. \"All right, Gloria, hop down and let Kathleen sit there.\"\n\nAnn then positioned the three year old girl and worked quickly.\n\nBy the time Jared had Gloria and Kathleen cleaned up, ready to go to McDonald's for dinner, Ann had finished tracing and cutting out Gloria's and Kathleen's silhouettes. She had put the two cut outs into two picture frames.\n\n\"This if for y'all give to your momma, hear?\" Ann said. \"Gloria, yours is the purple one, and Kathleen, you're the blue one.\"\n\n\"Well now, what do you say?\" Jared coaxed.\n\nGetting them to the truck was a chore. Ann helped as much as she could, carrying Kathleen and trying to balance child and umbrella. But they were still pretty soaked by the time they made it to the truck.\n\nAfter dinner, Ann remained in the truck while Jared ran Gloria to the front door, then ran Kathleen to the front door. He got into the truck and made Ann screech as he whipped his head, spraying her with water.\n\n\"That was very nice, the silhouettes,\" Jared said.\n\n\"Miss Traynor, my fourth grade teacher showed me how do it,\" Ann said simply.\n\nAt home, Ann smiled and went to her room. Jared cleaned up the remnants of finger paint from the Formica covered table in the kitchen.\n\n\"And, here's yours, Daddy,\" Ann said, carrying two more framed silhouettes into the kitchen.\n\n\"Aw, hey!\" Jared smiled as he looked at the two pictures.\n\n\"I. L. Y,\" Ann smiled.\n\nThen she kissed him.\n\n\"I really L. Y,\" she whispered.\n\n\"Okay, I uh...\" Jared said and put the two frames onto the table.\n\n\"Something wrong?\" Ann asked, stomach beginning to tighten.\n\n\"I uh, yeah,\" Jared said, unable to look at her.\n\n\"What?\" Ann asked.\n\n\"I, Ann, damn it, it's, you got any idea how flipping hard it is?\" Jared asked.\n\nHe blew out his breath. Ann looked at him, fearful and confused.\n\n\"Fuck it, I'm just going say it,\" he said.\n\n\"I want you,\" he said, looking directly into her eyes.\n\n\"Then what are we waiting for?\" Ann asked, giggling with relief, giggling with happiness.\n\nHe picked her up, kissed her, then carried her to his bedroom. He made her laugh as he used his foot to kick the door shut. It did shut, with a loud bang.\n\n\"This is wrong,\" Ann thought briefly as she wiggled out of blouse and bra. \"You're married.\"\n\nShe unzipped her skirt and wiggled out of skirt and panties.\n\n\"This is not your husband; it's a sin sleep with a man other than your husband,\" Ann's mind thought as she spread her legs in invitation.\n\nJared quickly stripped out of his clothes and Ann's eyes opened slightly at the sight of Jared's hard cock. Tommy always needed a little 'help' to get his cock hard. Sometimes she'd have to put her mouth on him for several long minutes, and even then, his erections were fairly unsteady.\n\n(Ann did not remember, Tommy was usually quite drunk by the time she got home from work, and continued to drink during the evening hours.)\n\nJared stretched out on the bed and gathered Ann into his arms. Their kisses were hurried, almost frenzied. Their hands touched, stroked, rubbed at each other.\n\n\"Ooh!\" Ann grunted when Jared's mouth descended to a small breast.\n\nHe didn't complain about how small her breasts were. He didn't make fun of her 'itty bitty titties.'\n\nJared made love to her breast and nipple. Then he switched to the other breast.\n\n\"Ooh,\" Ann sighed as Jared's hot mouth teased her flesh.\n\nThen he was kissing her again, hungrily kissing her. His hands teased, tweaked her breasts and nipples. Then his mouth was travelling down again.\n\nAnn shivered then giggled when he nipped at her concave belly. He tongued her small navel then continued to travel down.\n\nTommy had put his mouth on her a few times. Tommy always assumed he was doing a good job because Ann seemed to be wet from his oral ministrations.\n\nIn actuality, Ann's pussy would be wet from Tommy's spittle. Ann was usually frustrated from Tommy's clumsy attempts and was grateful when his five o'clock shadow quit rasping her tender pussy lips.\n\nJared was not Tommy Huvall. Jared used thumbs to open Ann's small pussy and used his tongue to seek out the source of her excitement. Jared caused Ann to shiver as he wiggled and thrust his tongue inside of her.\n\n\"I want, I want taste y'all too,\" Ann gasped and grunted.\n\nJared Rolled onto his back and swiveled Ann into a sixty nine. She grasped his hard cock in her small hand and brought her mouth down onto the mushroom shaped head.\n\nJared groaned when her small hand touched his throbbing cock. He moaned when her hot little mouth tickled and teased the sensitive head of his cock.\n\nThen he resumed tasting Ann's flesh.\n\nAnn was pleased, very pleased that Jared's cock did not taste of urine and sweat and something foul. She discovered that he did have a slight hint of sweat, but there was a clean taste to his cock. There was also the taste of Jared's excitement, some of which leaked from the tip of his cock.\n\n\"Mmph!\" she grunted when Jared's tongue tickled her anus.\n\n\"Oh, that's just so naughty,\" she thought as Jared's hands pulled her buttocks apart.\n\n\"Oh yeah,\" she grunted out loud when Jared tried to force his tongue into her tiny pucker.\n\n\"Like that?\" Jared laughed.\n\n\"Uh huh!\" Ann enthused and redoubled her efforts on his hard cock.\n\nShe screamed in pleasure when Jared jammed two fingers into her virgin rectum. The scream was muffled by the thick cock in her mouth.\n\nTommy had tried, on more than one occasion, to insinuate his dick into her back door. But Tommy honestly believed that a cock wet from a pussy should be lubricated enough to jam into a small orifice.\n\nTommy did not finger her ass, did not tongue her ass, he did not get her ass ready for an intrusion. He just thrust it into Ann's spittle wet pussy, then attempted to shove it into her ass.\n\nJared fingered her ass and tongued her pussy.\n\n\"Mmph, oh God!\" Ann screamed as an orgasm racked her small body.\n\nJared's cock twitched, then began spurting a thick jet of semen. Ann struggled to pull his cock back into her mouth. Two jets of semen shot onto her small face before she again had her mouth firmly around his cock head.\n\n\"Mm,\" Ann thought as she tasted Jared's spunk.\n\nShe whimpered, grunted and shuddered as Jared's fingers and tongue brought her to a second orgasm. But she did not cease sucking his cock until she was sure he'd spent all he had.\n\nThen she used her fingers to wipe her face clean. She licked each finger clean almost frantically, trying to get all of him, all of his delicious semen.\n\n\"Mmph, oh God!\" she wailed out again as another orgasm racked her body.\n\nShe wiggled around, whining as the maneuver dislodged his fingers from her anus. Then she guided his still hard cock into her pussy.\n\nJared and Ann groaned as she slid down the length of his cock. Jared and Tommy's cocks were both approximately five and a half inches in length. But Jared's cock was hard, firm, not shaky. And Jared's cock had slightly more girth than Tommy's cock had possessed.\n\n\"Yes,\" Ann hissed then craned her head up for a kiss.\n\nShe could taste herself on Jared's lips, on his tongue. The naughty thought actually excited her and she sucked hard on his tongue. She gave little jerks and wiggles with her hips, maximizing the contact with his hard cock.\n\n\"Uh huh,\" she encouraged when his hands reached back and pulled her buttocks apart.\n\n\"Uh huh?\" he asked as he drove a spittle wet finger into her anus.\n\n\"Uh huh!\" she enthused and began thrusting hard.\n\nWhen he wormed a second finger into her back door, Ann let out a shriek of orgasm. Jared smiled, thinking they'd have to skip making love when the girls were here. Ann's screams would frighten them.\n\n\"I'm about, I'm about come, where you want me?\" Jared asked.\n\n\"Man's supposed come in the woman,\" Ann said through gritted teeth.\n\nHe grunted and she screeched in orgasm. She lay her body down on him and shuddered as he continued to finger fuck her tight ass and pump his semen into her tight pussy.\n\n\"How many fingers y'all got up there?\" she whined as her ass was being stretched, deliciously stretched.\n\n\"Three,\" Jared panted.\n\n\"Damn, need y'all stick your thingy up there, hear?\" Ann whined.\n\n\"Stick my what?\" Jared laughed.\n\n\"Your dick,\" Ann demanded, then wailed out in another orgasm.\n\n\"Mean it,\" Ann demanded, wiggling off of Jared.\n\nJared found the tube of KY Jelly in his nightstand. He did not know the last time he'd used it, and the thick crust of dried gel around the small opening proved that it had been a while.\n\nAnn had crawled around and was now using her small mouth on Jared's hanging balls. He shuddered with the pleasure her hot mouth was sending through his body. Then he squirted a dollop of the gel into the palm of his hand.\n\n\"Face down, ass up,\" Jared ordered.\n\nAnn assumed the position of shoulders to the bed, cute bubble butt sticking up. His cock jerked and twitched as he watched his semen dribbling out of her raw looking pussy, dotting the small triangle of pink pussy hair, coating her raw looking lips.\n\nJared squirted a second dollop of lubricant onto his middle and index fingers and brought them to her winking anus.\n\n\"Ooh, God yes,\" Ann hissed as Jared's fingers slid into her rectum.\n\n\"Reach back here, spread them cheeks, huh?\" Jared ordered.\n\nAnn pulled her small hands away from her breasts and did reach back. She pulled her buttocks open and Jared very nearly ejaculated at the erotic sight.\n\nBecause Ann was so short, the angle was a difficult one for Jared. He had to balance on one hand, else he would have simply fallen forward, shoving his cock into her on the first thrust.\n\n\"Mmph!\" Ann grunted as the head of Jared's cock gained entry.\n\n\"Come on, y'all, fuck me,\" Ann growled.\n\nShe released her hold on her buttocks and returned to squeezing and pulling her small breasts.\n\nJared did push forward slightly, easing another inch of his hard meat into her tight ass. The heat was incredible. The tightness was almost painful. Instead of trying to expel him, instead of trying to force the invading cock out, Ann's ass seemed to be trying to pull him deep into her.\n\nJared reached down with his other hand and run his thumb up and down Ann's splayed pussy lips.\n\n\"Aw shit!\" Ann screamed and bucked.\n\nJared forced more of his cock into her and paused. Ann drove her round buttocks back.\n\n\"Y'all better start fucking me or I'm slap the shit out of y'all,\" Ann growled.\n\nJared grabbed Ann's hips in both hands and began to force all of him into her. She hissed approval when she felt his pubic hair against her stretched anus. She almost protested when he began to pull out of her. But before she could whine her disapproval, he was driving himself back in.\n\nWithin moments, he had her knees off the bed, holding her up by her hips as he pounded his cock in and out of her back door. He then wrapped one forearm around her small waist and used the other hand to toy with her drooling pussy.\n\n\"Aieegh!\" she screamed out and sprayed his thighs and swinging balls with her orgasm.\n\n\"Ugh!\" Jared grunted and began pumping his semen deep into her guts.\n\nThey shuddered and shook, each trying to get more of Jared's cock into her, trying to get more of Jared's semen into her. Finally, though, Jared's cock began to wilt.\n\nThey lay on the bed, each panting, each sweating. Then Ann wiggled and put her small head on his chest. Jared wrapped an arm around her nude body and pulled her tightly against him.\n\n\"Too soon say I love y'all?\" Ann asked in a small voice.\n\n\"What's 'I.L.Y.' mean?\" Jared asked.\n\n\"No, I mean, Jared, I really think I'm in love with you,\" Ann said, rolling on top of him, taking his face in her hands.\n\nShe kissed him deeply. Then she pulled back and looked into his eyes.\n\n\"Ann, we just, we just made love,\" Jared said, returning her stare. \"I mean, that's what it was for me. Making love.\"\n\n\"Oh! Oh man! I got to...\" Ann suddenly cried out and quickly wiggled out of the bed.\n\nShe first thought to run to his door, open it and dash down the hall to her bathroom. But the urgency of the situation changed the direction of her scamper. She dashed into his bathroom and slammed the seat of his commode down with a loud 'bang!'\n\nJared waited until he heard the flush of the commode before he sauntered into the bathroom. He wet a face cloth and thoroughly cleaned his cock of the drying lubricant, the streaks of her fecal matter.\n\n\"Too soon say I love...\" Ann asked as she washed her hands.\n\n\"Not too soon,\" Jared smiled and lightly slapped her buttocks. \"Ann, I love you.\"\n\nAnn met with Penny Jones on Friday. She really liked the attractive woman almost from the first handshake. Then as she described the marriage to the woman, she saw that the woman had empathy, an understanding of Ann's plight.\n\nBut when she showed Penny the proof she had of Tommy's infidelity, Penny's face tightened.\n\n\"And you say this is his momma?\" Penny asked.\n\n\"Yes ma'am,\" Ann said.\n\n\"Uh, Ann? That's his momma? That's illegal. Even in Louisiana, despite what the rest of the world might think. That's illegal,\" Penny said.\n\n\"What's that mean?\" Ann asked.\n\n\"Means, I don't think getting a divorce is going be a problem,\" Penny said seriously.\n\nShe also looked at Ann's bank statements and drew up a chart for Ann's deposits and withdrawals, as well as Tommy's deposits, which amounted to zero, and Tommy's withdrawals.\n\n\"We'll petition for his financial records,\" Penny promised.\n\nRichard Boudreaux was the process server that Penny preferred to use whenever there was the potential of trouble. Theresa White was another process server, but Theresa was out, her due date very close at hand.\n\nThe smiling man admired Tommy's Dodge Challenger, then knocked at the door. A moment later, he knocked a second time.\n\n\"Yeah?\" Tommy snarled, jerking the door open.\n\n\"Hey, man, that Challenger? Would love to have... Oh well, know sure as I'm standing here, Bernie would never let me have one,\" Richard smiled.\n\n\"Yeah, they are sweet,\" Tommy agreed, stepping out, scratching at his bare belly.\n\n\"Oh, man, sorry, you Tommy Huvall? I'm Richard, you are Tommy, right?\" Richard asked.\n\n\"Uh yeah, yeah, I'm Tommy,\" Tommy agreed, trying to remember if he knew the grinning man.\n\n\"And you been served,\" Richard said, handing Tommy a manila envelope.\n\n\"I been...\" Tommy asked as Richard snapped a digital photo of him holding the envelope. \"What is this shit?\"\n\n\"Don't know; they just pay me hand them out,\" Richard smiled, looking at the Dodge Challenger again. \"They don't tell me what's in them.\"\n\nAnn knew the moment her husband had been served. He sent a barrage of text messages, most of which were unintelligible. Then he left a rambling drunken voice mail.\n\n\"Miss Ann? Your phone's ringing,\" Gloria said.\n\n\"Uh huh, but we busy, right?\" Ann said \n\nShe smiled as she and Gloria mixed together the batter for their supper of waffles. At the stove, Kathleen and Jared were carefully stirring the blueberries and sugar over the medium heat. \n\n\"Now, tell me again, why are waffles better than pancakes?\" Jared asked.\n\n\"Because, Daddy, waffles got them holes y'all can fill up with blueberry syrup. Pancakes? Syrup just run all off them,\" Ann smiled as she showed Gloria how to pour the batter into the sizzling hot waffle iron.\n\n\"Miss Ann, why you not married no more?\" Gloria asked as Ann closed the lid.\n\n\"Huh? Now why y'all say that?\" Ann asked, shocked.\n\n\"You're rings are gone,\" Gloria said, tapping Ann's bare left hand.\n\n\"Wow, Daddy, that is one smart little girl,\" Ann said.\n\n\"Uh huh, got to get up mighty early think you going fool any my girls,\" Jared said.\n\n\"Well, Gloria, Mr. Tommy said he wanted kiss other girls and not me,\" Ann said.\n\n\"But if you married, you not s'posed kiss nobody, just your husband,\" Gloria said.\n\n\"Exactly,\" Ann agreed.\n\n\"So, you kiss my Daddy?\" Gloria continued.\n\n\"Maybe,\" Ann smiled. \"That all right?\"\n\n\"Maybe,\" Gloria said, giggling.\n\nKathleen's waffle had to have a precise amount of blueberry syrup before she would eat. And, her scrambled eggs could not touch her waffles. And the syrup couldn't get on her eggs.\n\n\"I like breakfast for supper,\" Gloria announced. \"We should do this all the time.\"\n\n\"I'm flipping exhausted,\" Jared mumbled, tired from having to straighten Kathleen's dish to the child's specifications.\n\nA late night thunderstorm rolled in, with loud, window rattling crashes of thunder. Both girls screamed out in terror. And both children were relieved when Daddy was suddenly in their room, hugging and holding them.\n\nMiss Ann joined them as they crowded into Daddy's bed. Gloria and Kathleen slept in the middle of the bed, flanked by the two adults. \n\nThe thunderstorm rolled on toward Baton Rouge. But the four slept until the morning sun lazily filtered through the heavy curtains.\n\n\"Daddy, I got pee,\" Kathleen roused Jared.\n\n\"I'll take you,\" Ann offered.\n\n\"You can do that?\" Kathleen asked.\n\n\"I'm pretty sure I can,\" Ann said, fighting against the laughter.\n\nThey spent a full weekend, library, then park, lunch at McDonald's, supper at Chucky Cheese, church on Sunday and then 'fishing' in the small tributary of the Atchafalaya. Jared could not remember ever seeing a fish in the small canal, but it did keep the girls busy.\n\nAfter the girls had finally run out of the strength to cast their lines, they returned to the house. Jared fried some fish filets and French fries.\n\nThen Miss Ann kissed each child three times. Because it would be three days before she'd get to see them again. And Daddy drove them to Paw-paw and Maw-maw's house.\n\nAs usual, Rochelle was shameless in her flirtations. And as usual, Jared ignored her. He kissed the girls goodbye and drove home.\n\n\"Hey,\" Jared called out as he entered his house.",
        "\"Bedroom,\" Ann called back.\n\n\"Bed...\" Jared asked, coming down the hall.\n\n\"Got three days make up for,\" Ann said, laying nude on his bed.\n\nJared agreed and immediately put his head between her stubby legs and started tonguing her wet pussy.\n\nAnn was quick to scream out in orgasm. She grunted as Jared wiggled forward, then entered her pussy in one jab.\n\n\"God, Baby, love you,\" Ann cried out as he battered in and out of her, pussy making obscene sounds.\n\n\"Love you too,\" Jared said.\n\nBoth screamed out in orgasm as Jared's sperm jetted into Ann's pussy.\n\n\"Now, want get on top of y'all,\" Ann demanded.\n\n\"Good, tired of having do all the work,\" Jared teased.\n\nAnn liked doing the nasty in this position. Straddling him, his cock was straight up, filling her pussy. She could control the depth, the tempo of their joining. And Jared seemed to love teasing her sensitive breasts. He seemed to delight in touching her flesh. And, to add to the naughtiness, he would eventually start playing with her butt.\n\nShe bounced, wiggled and thrust to three orgasms, then smiled happily as Jared pumped a second large load of sperm into her sloppy pussy.\n\nShe leaned forward and kissed him. She then wiggled herself off of his shrinking cock and lay down on the bed next to him.\n\n\"Ask y'all something?\" Ann asked, her head on his chest.\n\n\"Yeah,\" Jared said, still trying to catch his breath.\n\n\"I uh, y'all ever want have your own kids?\" Ann asked.\n\n\"Got two of them right now,\" Jared said.\n\n\"No, I mean...\" Ann said.\n\n\"Hey, let me tell you something,\" Jared said, forcefully.\n\nAnn tensed, sensing she'd crossed over a line. She quit rubbing his flesh with her small hand.\n\n\"It might not be me got their momma pregnant,\" Jared said tightly. \"But it was me took care of their momma. And it's me taking care of them now.\"\n\nAnn held her breath. Her limited experience with men told her that this was when Jared would either slap her, or scream at her, tell her to get out of his bed. Get out of his house.\n\nHis hand trailed up from her round butt to her shoulders, to her pink blonde hair. He entwined his fingers, his rough, calloused fingers in her short mop of hair.\n\n\"It ain't the sperm makes a daddy,\" Jared said.\n\nShe felt his lips at the back of her head.\n\n\"Would love have two, three, nineteen more Glorias and Kathleens,\" Jared said softly. \"They're my life.\"\n\n\"Do my best give y'all two or three, going have talk to someone else 'bout them nineteen of them,\" Ann giggled.\n\n\"Oh, I don't know; we throw a couple twins, couple triplets in there?\" Jared joked.\n\n\"Jared Michael Broussard, I love you all my heart,\" Ann softly said.\n\nThe day they received the lifeless, emotionless sheaf of papers that declared Ann to be a divorced woman, Jared took Ann to Acapulco Grande to celebrate. As they finished the meal, Jared got down on one knee and asked Ann to marry him.\n\nThe first people they told were Gloria and Kathleen. The two girls were thrilled, especially when Ann assured them that they'd be a part of the ceremony, they'd be a part of the wedding and of the marriage.\n\nRochelle pasted a smile on her face when Gloria announced that she was going to be the ring bearer at Daddy's wedding. She smiled and agreed that Kathleen was going to be a very pretty flower girl when Daddy married Miss Ann.\n\n\"I spread petals for Miss Ann,\" Kathleen explained what a flower girl's duties were.\n\n\"And every single one of them petals will be exactly where it needs to be,\" Francis teased.\n\nRochelle managed, barely, to keep the smile on her face as she bathed the two girls, then made sure Gloria's homework was done, that both children had clothes for the next school day. She kept the smile on her face as she read them a bedtime story.\n\nThen she sat at the kitchen table and popped open a can of her father's beer.\n\n\"Well, it's your own damned fault,\" Connie, Rochelle's mother said tersely when Rochelle sobbed how unfair it all was.\n\n\"I know that Mother, thank you so much Mother,\" Rochelle snarled bitterly.\n\n\"Hey, hey, nuh uh, don't need be yelling at your momma like that,\" Francis snapped. \"She ain't one told you run around spreading your legs.\"\n\nLater that evening, after consuming five cans of her father's beer, Rochelle sent Jared Broussard a text message.\n\n'Please do no marry' was all it said.\n\nJared looked at the text message, but felt no need to respond. He put the phone back on his bedside table and smiled as he heard Ann singing, quite badly, along with one of Miranda Lambert's songs while she took a bubble bath.\n\nOver the next three and a half weeks, Rochelle sent Jared several text messages, begging, pleading with him to give her one more chance. Jared did not respond to any of them. Nor did he respond the few times Rochelle met him outside of her parents' home, wailing and sobbing.\n\nThe day of the wedding, Rochelle attempted to slash her wrists. Francis managed to kick the bathroom door open and press a towel to the struggling woman's bleeding wound while Connie tearfully called 911.\n\n*.*.*\n\n\"Now, remember,\" Kathleen told the staff at HappyLand Day Care. \"My Mommy's coming get me today, okay?\"\n\n\"Now, how you think that child know it's her momma's day come get her?\" one of the staff asked another member.\n\n\"Girl, I done quit trying figure that child out long ago,\" the other woman laughed. \"I just know, two forty five? Best just get on out that child's way.\"\n\nTHE END.\n\n**Author's Note: I write these stories for my pleasure; I post them here for your enjoyment. I do thank you for reading my stories.\n\nI especially thank those that take the time to leave comments, good and bad, and those that take the time to rate my submissions.\n\nYes, I do read comments. Many of you expressed a desire to see where the characters went after the ending of 'Yapping Dogs.'\n\nTo me, 'Yapping Dogs' was a completed story. It was a snapshot, a Polaroid of their lives.\n\nAfter Rochelle's failed suicide attempt, Jared and Ann apply for and are given primary custody of Gloria and Kathleen.\n\nOn the day Gloria and Kathleen find out that Jared isn't their biological father? I'm sure they'll shed some tears. They'll hug him tightly, and they'll declare he is their father, their real father, no matter what the DNA says. After all, it ain't the penis what makes a daddy. It's the heart.\n\nNow, you get you some catfish filets, some cornmeal, little bit that Crystal's Hot Sauce and you pass you a good time yeah."
    ],
    "authorname": "JimBob44",
    "tags": [
        "life after divorce",
        "life after high school",
        "loving father",
        "romance",
        "insurance salesperson",
        "unfaithful husband",
        "mother-son incest",
        "small town",
        "louisiana"
    ],
    "category": "Loving Wives",
    "url": "https://www.literotica.com/s/yapping-dogs-ch-02"
}
{
    "title": "My First Year in College Ch. 20",
    "pages": [
        "Tyler is a freshman student at Creepside College. Gay and closeted, he has some troubles controlling his urges surrounded by frat guys, sexy professors, his hot brother and most importantly, his stunning straight roommate: Austin. The story is divided into 2 main parts - semester 1 (ch. 1 to ch 12) - semester 2 (ch. 13 to ch. 24).\n\nIn the previous chapters, Tyler was forced to come out to in the craziest circumstances. A picture of Tyler's face, covered in cum, was shared to the entire campus and a series of event led to Tyler being hit by a car. Since then, Tyler has been recovering with the help of his (incredibly attractive) big brother. After almost a month, he now feels ready to go back to College.\n\n*****\n\nMy First Year in College\n\nChapter 20: Birthday cake\n\nThe first couple of days back at the dorm felt like a weird adjustment. Austin and I were both overly careful and nice to each other. \"Do you mind if I go take a shower?\" \"Do you mind if I keep the lights on to read for a bit?\" \"Do you need help with your homework?\" We desperately wanted things to go well and because of that, our relationship had become somewhat unnatural.\n\nIt was pretty much the same with the rest of the students and teachers. Everyone was treating me like a piece of porcelain, as if I could break at any moment. \"Are you sure you are feeling better Tyler?\" \"Are you sure you don't want to talk to a shrink?\" \"Please reach out to me in you need anything Ty!\".\n\nThankfully, things slowly went back to normal. When Martin and Luis started to tease Steve and I on a future relationship together, as if it was no big deal and without being scared that I would jump in front of a car, I understood it would all be ok.\n\nSteve was bisexual so this was, in theory, a possibility but I had not idea if something could actually happen between us.\n\nFirst of all, I thought that Steve, valuable member of both the wresting and football teams, and considered as one of the heartthrobs of campus, was way out of my league. With his fit body, light tone dark skin and winning smile, Steve was definitely stunning.\n\nSecond of all, I simply could not read him. Sometimes I thought he was sending me signals, joking that we would indeed make a great couple, and at other times, Steve seemed to be fooling around with various girls or guys, not giving a single fuck about me.\n\nI also knew via Austin what they were up to with the other guys of THE ALPHAS frat. The group of jocks kept the habit of fucking girls after practice in the locker-room, or at Tobias' place during the week-ends. Not really \"boyfriend material\".\n\nTo be honest, even if Steve had shown any interest in dating a dorky guy like me, I did not feel ready to start such a public relationship with a boy from the room next door.\n\nAlso, I noticed that Austin was not too thrilled by the idea either. Maybe he was afraid I would repeat what he had done with Ashley and left him for another roommate. I will be honest, just to get Austin jealous, I was happy to flirt back and forth with Steve.\n\nAustin and I were more mindful of each other's privacy and were less intimate than before. If our friendship was still very strong, on a pure physical level, we were back at week one when Austin would change in the bathroom, jerk off under his covers and we would wear boxers to go to sleep. I missed seeing him in the nude.\n\nI wondered if, as I had feared, he was uncomfortable to be naked around me, or worse, to simply be around me, now that he knew that I was gay.\n\nI was proven wrong when he came back from wrestling practice the next Friday, a weird smile on his face.\n\n\"I did not shower!\" He proudly announced.\n\n\"Congratulations. You smell like shit!\" I snapped back, grinning.\n\n\"I have a surprise for you!\"\n\n\"Oh boy...\" I spoke.\n\n\"Close your eyes!\"\n\n\"Really?\"\n\n\"Don't worry! There is no car around! You won't end up in an hospital!\"\n\n\"Yes, but YOU are around! It's even more dangerous!\" I was smiling. We were at a place where we could joke about it. That felt good.\n\nI obliged, closed my eyes and heard him acting up around me. What the fuck was he doing?\n\n\"Now, you can open your eyes!\"\n\nI opened my eyes and my jaw dropped. Austin was standing there: sweating, proudly wearing his bright yellow singlet, and flexing his biceps in a ridiculous bodybuilder pose. I had never seen him in the singlet that I had offered him for his birthday. It was better than all I could imagine. My perfect Adonis.\n\n\"WOW!\"\n\n\"It looks good, right?! You cheeky fucker, I should have known you were gay when you gift me that! Look at the bulge this thing is giving me!\"\n\nIt was not a bulge. It was way more than that. To anyone else, the dick would have been apparent through the fabric - this is why I had chosen this particular model -but with Austin's long and meaty flaccid cock, and the way he was sweating right at that instant, after hours of training, a very visible penis line was hypnotizing me. He wrestled in that?! All evening?! Lucky Steve and lucky rest of the team!\n\nThe balls were stuck to the fabric and his dickhead was right there, it was wet and almost completely see-through. I had no words. Austin was the sexiest man I had ever seen in my life.\n\nVery satisfied of the impact he had on me, Austin turned around, flaunting his ass. Again, his ass-crack was visibly showing though the fabric.\n\nThe singlet was just a bit too small, his muscles, which seem to be even bigger than before were barely contained. His hairy nipples were showing though the straps. Austin talked about how it was actually a good training apparel but I was no longer listening. I was dreaming.\n\nHe had worn it, just for me. As a surprise. Knowing very well the effect it would have on me. He was purposely turning me on!\n\n\"I wanted to wait for your birthday to surprise you with this outfit, but I have found another idea, way better than this one for your 19th birthday. So, when I was done with practice and saw myself in the mirror, I thought I looked good and that you would be happy to see it all!\"\n\nI was still speechless.\n\n\"It was a good surprise, right?\" He seemed suddenly unsure. My eyes were now lost on his wet thighs, where the yellow fabric stopped, so high, the singlet only covered his butt and very upper thighs. Thank you Lord for wrestling and wrestling singlets, such a beautiful invention!\n\n\"Yeah, the surprise is great! You're hot as hell. Just imagine that one of your girlfriends came to your room to ask you to check on her hot lingerie!\"\n\n\"Well, I would not mind!\"\n\n\"Exactly. I do not mind!\" I said smiling.\n\n\"Oh...\" He replied. \"I hope you enjoyed the show then.\" He bowed down. I was hard. I could not tell if he noticed.\n\n\"Should we go grab something to eat?\"He finally said, casually going back to his sport bag.\n\n\"Yeap! I'm starving!\" I responded. This sight got me hungry for sure, but not for food.\n\n\"Ok, I'll go take a quick shower and we can eat.\"\n\nHe left the room. I emptied my balls while he was in the shower replaying the image of Austin in my head. I loved him so much at this point.\n\nLater on, we went outside to eat some McDonalds with Janice and Luis. We were talking about the Dean who had recently resigned from her job when Luis started to fed Janice with ice-cream. I thought it was weird until it became even more surprising: they both shared an intense kiss.\n\n\"GUYS?!\" I shouted, dumbfounded.\n\n\"Oh yeah... You were gone for almost an entire month man... We are sort of dating now!\"\n\nDamn! If even Janice had a boyfriend, maybe it was time for me to get on the market as well!\n\nThat night, Austin slept naked in his bed. Everything was back to normal. Except that the new normal was even better than before.\n\nOf course, the main change in my life was my coming out. It meant that like everybody else around me, I could start to date around! I discovered Grindr during this month of March. Of course, I knew the app before, but now, I was actively using it. I was also hit on by quite a few guys on campus, the Fletcher scandal had one benefit: everybody knew I was gay and some guys visibly had a lot of fun watching my outrageous leaked picture.\n\nThis was the time I had my first random sex encounters.\n\nFirst, with a stunning black guy, a few years older than me. I blew him off and he returned the favor. It was the first time another guy had sucked my dick and I must say he did an excellent job. I cummed right in his mouth. Second, was a guy I had met during tennis training. He was very fit. He fucked me in the ass and let me finger him. I cummed on his ass and licked it afterwards.\n\nThird was an older man I matched with on Grindr, he was married, I hesitated but still went for it. He was not very good though. He cummed after only a few minutes. He finished me by jerking me off but I had to think of Austin in his wrestling singlet to eventually cum on his face.\n\nAustin and I did implement the system of the \"sock on the door knob\" to invite our dates in our rooms. Surprisingly, it looked like I was getting luckier than he was.\n\nHe had his fun too but he often told me that it was so much easier for me and for gay guys in general to find a good and compatible sex date. For us, it was like a market, we could find \"dominant types\", \"twinks\", \"daddies\", \"bears\", \"college guys\". I showed him how a single \"up to fuck?\" on Grindr could lead to a blowjob in the Building C basement 20 minutes later. Austin was very impressed... and frustrated.\n\nThe truth is, my gay awakening was not that great either. The few one night stands I had did not let me a memorable impression and although I had fun, the only person I actually wanted was the straight man who was sharing my dorm room. I kept that part from Austin though.\n\nI was born on April 5th 2003 and I celebrated my 19th birthday on April 5th 2022. The whole gang had prepared me a surprise party and invited my brother and Mallory to join in. It was one of the best birthdays of my life! I was out. I was finally me. I was surrounded by friends and family.\n\nCrazy how life can turn around. Eight weeks prior, I was living the worst day of my life, and there I was, living my best life surrounded by the people I loved most.\n\nAshley got me a calendar of naked firemen that I put above my bed while returning to my bedroom. I was sitting on the edge of my bed checking the (very hot) month of May when Austin came in after his shower.\n\nHe was only wearing his towel.\n\n\"Thank you so much again... For organizing this! For the watch, I know you were the one who chose it! I love it!\" Austin and the guys had offered me a beautiful luxury watch that I was proudly wearing on my fully healed left wrist.\n\n\"I'm glad you like your gifts.\" He insisted on the \"s\" in gifts, looked at the watch and then at the naked man on the calendar.\n\n\"I do! And I cannot wait for the month of May.\" I winked at Austin while I put back the calendar on the current month of April, the April's model was hot too but the shot was a bit dated and inexpressive.\n\n\"Are you ready for the last one?\" Asked Austin.\n\n\"Last one? What do you mean?\"\n\n\"You don't remember? I told you I've had a big surprise in mind for your 19th birthday!\"\n\n\"Oh...\" I was intrigued although it was hard to focus, he was grinning, just wearing his towel in front of me. \"I thought the surprise was the party, the watch.\"\n\n\"I still have one gift for you, and you know what we say, last but not least.\" He untucked his towel. Revealing a racy red jockstrap with thin black bands. He pointed to his bulge, his dick looked like it was about to burst out of the jock. \"It's yours!\" He announced.\n\nThe dick? Or the jock? What did he mean? My own cock immediately woke up in my pants.\n\n\"I bought it just for you. I thought you would not mind that I wear it before to... well, to taste the materials!\"\n\n\"I.... I don't.\" I stuttered.\n\nHe came closer towards me. As I was sitting, my eyes were right at the level of his (insanely huge) bulge. His pubes were poking out of the black strap. Austin seemed so proud of making me lose my cool. Obviously, I was blushing.\n\n\"When I turned 19, you offered me a very special gift. I thought I could return the favor.\" He said.\n\nMy heart started racing. I remembered perfectly what I offered him on his birthday. My lips. My mouth. His hard cock cumming inside of my throat. Was he actually offering me his dick?! I felt my dick getting harder. What was his end plan? I tried to look away from the bulge to look at his eyes, above me.\n\n\"Austin, what the fuck are you doing?\" I asked seriously.\n\n\"Look, from what I recall, you are more of an ass guy. Do you remember, one day, I promised you that I would make you lick an ass?\"\n\nThis was true. During one of the drunk nights with the guys, when asked what my kink was in bed, I said I wanted to lick a girl's ass. I meant a guy's ass of course, but other than that, the fantasy was true. Austin knew that.\n\nHe turned around. Showing me off his bubble butt, perfectly held by the jockstrap.\n\n\"I want to keep my promise. Do you think my ass could do?\" He was playing with me. Pretending to be naive. He went as far as spreading his butt cheeks. My dick got so hard, I thought I would cum right at this instant inside my pants. His pink asshole opened wide while his ass was just a few inches from my face.\n\n\"Austin... are you... are you sure?\"\n\n\"I am.\" His tone was a bit more serious; he was still facing the other way around so it was hard to probe him. \"I want my gift to be as good as the one you gave to me! And since, you had offered me a piece of clothing and a blowjob for my own 19th birthday, I thought it was the perfect circle. I could do the same!\"\n\nAustin played with the bands of his jockstrap \"this is the piece of clothing\"; then, he bent over to expose his asshole even more. \"...And this is your blowjob, turned into a rimjob as you are more of an ass guy!\". He had shaved, but not perfectly. His ass strapped was perfection. I was already drooling.\n\n\"Austin... I am really going to do it if you don't stop teasing me!\"\n\n\"I want you too!\" He turned around to face me. \"Look, if this is weird or uncomfortable for you, we can stop here and we can say that was just a joke, but if you want it, I'm dead serious, I had never had my ass licked properly before and I don't know, I thought that maybe you would like...\"\n\n\"Shut up\" I stood up and pushed him against his bed, he fell on it, a bit disoriented.\n\n\"Wow, Ty.\"\n\nI did not stop there and grabbed his legs.\n\n\"Hold them, spread your ass, just like that.\" I ordered. He had played with fire; he had awakened something in me and I was starving.\n\nAustin obeyed, he positioned himself against the wall, lied down and threw his legs in the air. He held his cheeks with his two hands to spread them, wide open.\n\n\"Can I get naked?\" I asked.\n\n\"Go for it\" he said.\n\nI undressed and jerked off. My dick was already full of precum, it was heavily leaking from the head. I was enjoying the view; his tight opened anus was stunning. You know the crazy part if you have read my story so far, one drunk night three months prior, I had already licked this beautiful asshole and Austin did not even know about that, and now, he was literally offering himself to me.\n\n\"Toss my roommate salad, volume 1\" I said. He laughed at my stupid joke and this laughter made his asshole winked at me. I was stunned.\n\n\"Do you want me to talk dirty?\" He asked.\n\n\"What do you want to say?\"\n\n\"I don't know. Something like, eat my fucking ass, you bitch!\" He was semi laughing but I was deadly serious.\n\nI knelt down and started to lick his ass at the sound of these words. I felt his whole body shaking at first.\n\n\"Are you good?\" I asked.\n\n\"Keep on going.\" His eyes were closed now. That was a bit disappointing, just like when I sucked his dick, he still could not look at me. I spat on his pink asshole and went down on it. And then, in it. I spread his anus with my fingers and inserted my tongue.\n\n\"Fuck, this is what girls don't do, they just scratch the surface, they don't go IN it!\" He was baffled.\n\nI went deeper, I made it sloppy. The more I was going at it, the more I was beating my dick. I went back and forth, fucking his asshole with my tongue, then very deep, looking for his prostate. He started to moan. I touched the jockstrap, felt his bulge, his dick was still flaccid. It was not totally soft but he was far from hard. I had to do a better job. I rubbed his cock through the fabric. I went back in his ass at the same time, making a mess with my saliva.\n\n\"Does my asshole taste good bitch?\"\n\n\"It does. It's the best I have ever eaten in my life!\" It was true.\n\n\"Huuummm... Keep going then...\" He was getting hard under my hand that I had slipped under the jock. I got the balls out, licking them alternatively with his asshole. Now going up and down.\n\n\"Your ass is so fucking good Austin. Delicious!\" I said, I wanted to taste every bit of him.\n\n\"Keep on eating! This is your birthday cake!\" He pushed my head on his ass, while rubbing his balls and asshole on my nose, mouth and chin. I felt my dick throbbing so hard.\n\n\"Wait\" Austin suddenly said. That got me anxious that I had done something wrong but he only wanted to change position. He got on his knees on the floor, bent over to expose his ass, put his head against the carpet and spread his butt cheeks again with his hands: \"Happy birthday Tyler! Come eat your birthday cake!\"\n\nI knelt down behind him and kept going at his ass like a mad man. I was eager to show him what I was capable of! How I was so much better than those girls who barely touched his ass. He moaned louder.\n\n\"HMMMMMMM, eat your fucking meal!\" He grunted.\n\nHe moved his own ass back and forth to push it against my head. I kept my tongue out of my mouth so he could fuck himself with it. I was in paradise. I kept on jerking off and soon enough, I could not help it and cummed in my right hand, my left hand was still on his dick which was now mostly out of the red jockstrap. The underwear was already stained with precum and saliva.\n\n\"This is the best birthday cake I have ever eaten!\" I shouted, almost in a delirious state.\n\n\"MMMMMMMMM....\" I felt his dick pulsating, now I could see the full 9.5 inches that I loved so much. He was leaking precum too. \"YOU DO LIKE MY ASSHOLE! YOU FUCKING DIRTY WHORE!\"\n\n\"YES, I LOVE IT. I LOVE WHEN YOU ARE NASTY. EATING YOU JUST MADE ME CUM SO HARD\" I put my nose in his ass, then my mouth, I wanted to go deep. I played around his asshole with my fingers and my saliva. I added some of my own cum on it too. This was filthy. He kept on moaning. I was jerking him at the same time.\n\n\"I want to make you cum\" I said.\n\n\"Suck me deep.\" He turned around, laying down, his back against the floor. His huge dick was out of the jockstrap, ready to be serviced. His eyes were still closed.\n\nI went for it. I gagged on his cock while rubbing his asshole with my now free hand. I put some more of my own cum on his anus. I deepthroated his cock and felt the tears coming out of my eyes. Austin deserved this so much. I was choking with it but kept on pushing myself.\n\n\"Move away!\" He shouted.\n\nDid I do something wrong? I did not, he just needed to cum. At first, I did not understand why I was depraved from his cum. I was disappointed. I wanted him to feed me. But then, I realized, he put back his dick in the jockstrap before unloading his semen. Of course, he had thought this through, Austin was gifting me the jock, he wanted it to be full of his warm cum. I was in awe.\n\nI saw the jockstrap being slowly filled with his milk, some going through the fabric, as Austin was grunting and shaking of pleasure. Then, he took it off and handed it to me. I refused to take it. I opened my mouth instead. He got the message. He put the dirty jockstrap in my mouth.\n\n\"Fuck, you're actually a bad bitch!\" He joked.",
        "I nodded with the jockstrap full of his warm cum in my mouth. I loved him more than anything in the world. His taste was perfect. When I thought I had enjoyed the flavor of his cum and sweats sufficiently, I spat the underwear out of my mouth and looked at the mess.\n\n\"That was definitely interesting!\"\n\n\"Yes, that was! I hope you enjoyed your birthday! You cannot say that I did not give my whole to make it special for you.\" Austin winked at me.\n\n\"You did. It was the best birthday of my life! Seriously.\"\n\nI meant it. We smiled at each other and went to bed. The jockstrap still on the floor, between us. Will I have to wait for my next birthday to taste his ass again?\n\n*****\n\nGuys, as always, I hope you enjoyed this chapter. Be respectful of my work, but please do share your comments and feedback, I love to read them! Only 4 chapters to go and so many possibilities. Who's excited for the final installments?"
    ],
    "authorname": "Thomas_Lodge",
    "tags": [
        "college",
        "roommates",
        "rimming",
        "sucking",
        "straight guys",
        "birthday",
        "19-year-old"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/my-first-year-in-college-ch-20"
}
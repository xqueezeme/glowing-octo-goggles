{
    "title": "Two Hundred Dollars Ch. 21",
    "pages": [
        "115 Dollars\n\n\"So let's get this straight,\" Laura said.\n\n\"Go ahead.\"\n\nLaura set her tea cup down firmly in the centre of her gingham place mat and squared off against Bailey. She gave one last glance around her mother's kitchen before going on.\n\n\"Getting spanked to pay off a debt,\" Laura paused. \"Not prostitution.\"\n\n\"Right,\" Bailey agreed, equally firm, and sipped her tea.\n\n\"Getting spanked to earn extra money?\" Laura wondered.\n\nBailey thought a moment, took another sip of her tea and set it down.\n\n\"I guess that's not prostitution either,\" she admitted. \"But I'd definitely feel weirder about it.\"\n\n\"At least you're consistent,\" Laura tilted her eyes at the ceiling. \"The definition of the act shouldn't change with context.\"\n\n\"Even if the reason for doing it does?\"\n\nLaura nodded, \"That's Situational Ethics. Whether something is right or wrong might change with the situation, but we shouldn't make it more complicated by giving the same act two different names.\"\n\n\"With you so far.\"\n\n\"Now,\" Laura raised a finger. \"It's only the spanking though?\"\n\n\"What?\"\n\n\"You've done other stuff with Kent. Does tha-?\"\n\nBailey cut Laura off, \"Not for money, I didn't.\"\n\nLaura held her hands up defensively. \"Okay. Because that would be prostitution?\"\n\nThis won a grimace from Bailey, \"I'm not going to give him a hand job for money, if that's what you're asking. That would make me a prostitute.\"\n\n\"But letting him see you naked is okay?\" Laura glared at Bailey, a tender note of accusation in her voice.\n\n\"That's part of the spanking,\" Bailey shrugged Laura off and turned up her chin. \"As long as it's with the spankings, it's fine. It's just... a different way of doing them.\"\n\nLaura twisted her lips in doubt, but mostly she wanted to rib Bailey, not actually analyze anything.\n\n\"What if he paid you to just take off your clothes and look at you?\" Laura turned her wide-eyed glare up to eleven.\n\nBailey went pale and gulped, \"I don't know.\"\n\n\"That's not prostitution, is it?\"\n\n\"No,\" Bailey stammered, trying to shore up her voice. \"That's more like I'm a stripper, though.\"\n\n\"Ooooh,\" Laura rolled her eyes. \"So there's a category between 'Bailey' and 'prostitute' called 'stripper'?\"\n\n\"Clearly,\" Bailey frowned at her friend.\n\n\"And you're okay with being a 'stripper'?\"\n\n\"I'm not stripping for him,\" Bailey gritted her teeth. \"It's just however I'm dressed when he spanks me.\"\n\nLaura considered this a while, carefully sipping her tea and plotting her next round of attack. Bailey took a few deep breaths in the meantime and tried to set herself straight.\n\n\"Bai,\" Laura said finally. \"We're cool with being spanked, and getting naked for money. We're also down with him groping us while he's spanking us?\"\n\n\"Guess so?\"\n\n\"So when does it become prostitution again?\"\n\n\"When there's a sex act,\" Bailey intoned. \"We've been through this.\"\n\n\"A 'sex act'?\"\n\n\"Like a handjob,\" Bailey sighed. \"Or a blowjob, or... or penetration. Whatever.\"\n\n\"You mean,\" Laura replied. \"When he has an orgasm? Or when we do?\"\n\n\"I-\" Bailey stammered to a stop. \"Well, him, I guess.\"\n\n\"See?\" Laura said. \"If it's prostitution to give someone a hand job, then why isn't it prostitution when you make him come while he's spanking you?\"\n\nBailey started to hyperventilate trying to respond, but calmed down three breaths into it.\n\n\"No,\" she said finally. \"He didn't pay any extra because I made him come. He only paid for the spankings.\"\n\n\"Dammit,\" Laura twitched out. \"Thought I had you.\"\n\nBailey shrugged, \"Better luck next time.\"\n\n\"Alright,\" Laura prodded, \"What if you needed some extra money?\"\n\n\"Uh-huh.\"\n\n\"And he wanted a hand job.\"\n\n\"How badly do I need this money?\" Bailey peered at Laura.\n\n\"Bad enough,\" Laura replied. \"Like, for food.\"\n\n\"Then I'd probably do it,\" Bailey said. \"If it's Kent, definitely, assuming he wouldn't just give me some food. But I'd still feel like a prostitute.\"\n\nLaura waited a beat before adding, \"Which would be bad.\"\n\n\"Which would be bad, yes,\" Bailey confirmed. \"But not as bad as starving.\"\n\n\"So in the right context...\" Laura trailed off.\n\nBailey only glared back at her.\n\n\"You'd totally do it.\"\n\nBailey took a turn to twist her lips. \"What do you want me to say?\"\n\n\"I just want to know the rules,\" Laura said. \"So I know what I'm allowed to offer him.\"\n\n\"You already know that,\" Bailey shrugged. \"His hand, the spoon, the spatula...\"\n\n\"The whip,\" Laura enumerated, \"varying degrees of nakednesss. Yada, yada, yada. I do like that 'being naked while he's blindfolded thing'.\"\n\n\"We'd be naked in front of each other, though,\" Bailey pointed out.\n\n\"That seems weird right now,\" Laura's eyes widened as she stared at the centre of the kitchen table. \"But it won't when he gets here.\"\n\n\"Hm,\" Bailey nodded. \"Wait, what? When he gets here?\"\n\n\"Oh, right,\" Laura sat up straight. \"You're not doing any tonight are you?\"\n\n\"Maybe one when I get home,\" Bailey said. \"But my butt's too red to bother having you over.\"\n\nLaura acknowledged the wisdom of this. It seemed a shame to make a whole thing out of doing one dollar each. They'd barely get turned on.\n\n\"That's what I figured,\" Laura said. \"Take tonight off, but tomorrow's Friday. My parents are going on some retreat for the weekend. We can have Kent over here. Just for a change?\"\n\nBailey sat back in surprise and a smile touched her lips. Her eyes wandered around the little kitchen and through the entry into the foyer and the living room beyond.\n\n\"Just for a change,\" she nodded her head. \"Yeah.\"\n\n=============================\n\n\"Hey, Kent,\" Bailey called into his room as she entered the apartment, still flush from the cold, November air.\n\n\"Bai,\" he replied. \"What's up?\"\n\n\"Um?\" Bailey looked down the hall.\n\n\"Carson's not home yet.\"\n\n\"Ah, good,\" she said. \"About tomorrow. You busy?\"\n\n\"Got a late lab,\" Kent reminded her. \"5:30 until whenever. Usually done by eight. Why?\"\n\n\"Laura's parents are away for the weekend,\" Bailey said. \"She wants us to, y'know, do it over there.\"\n\n\"Change of venue?\"\n\nBailey tilted her head. \"It's no library, or anything, but-\"\n\n\"But it has a lot of pictures of Jesus?\"\n\n\"Yeah,\" Bailey looked uncomfortable for a moment, \"we can work around that.\"\n\n\"I thought you'd want some now,\" Kent pointed out.\n\nBailey looked thoughtful for a moment, \"Kind of wanna save my butt for tomorrow, actually.\"\n\n\"Planning a new record?\" Kent put his elbow on his desk and rested his chin on his palm.\n\nBailey looked away, her eyes flickering wide, \"You never know.\"\n\nKent watched as she took a deep breath, her face flushing red with excitement.\n\n\"Okay,\" she said. \"I'll do two dollars right now, over top, one one condition.\"\n\n\"What's that?\"\n\n\"You promise to spread them around,\" Bailey glared at him, \"All over, not just one spot. So I'll be okay tomorrow.\"\n\nKent twisted his lips in doubt, knowing he had to protest. \"That's not the -\"\n\n\"In exchange,\" Bailey held up a finger. \"You can do eleven instead of ten for each dollar.\"\n\n\"Intriguing,\" Kent leaned back in his chair and steepled his fingers. \"A ten percent surtax.\"\n\n\"Sound fair?\"\n\n\"Almost,\" he replied thoughtfully. \"How will we agree I've adhered to our deal?\"\n\n\"What?\"\n\n\"I won't have you saying I broke the agreement and spanked you unfairly,\" Kent said. \"After I'm done, we'll need to prove I fairly distributed the spankings?\"\n\nBailey peered at him, \"How?\"\n\n\"An inspection,\" he pronounced with a sharp, melodramatic nod. \"I'll even take a picture.\"\n\nShe glared hard at Kent again and he smiled.\n\n\"Two dollars,\" she recapitulated. \"Twenty two spankings over top. And an inspection with a picture -- on my phone?\"\n\n\"Of course your phone,\" Kent said. \"The image contained, besides being important to you for whatever reason, will also allow you to complain if I focused my punishment too much.\"\n\n\"It's not punishment,\" Bailey quickly retorted. \"Just payment.\"\n\nShe turned to the white board and made her two ticks, then promptly walked over to his bed, pulling her cell phone out of her back pocket as she went. Bailey then took her position, bent over, lowering her chest to the mattress.\n\n\"Here,\" Kent said as he kicked the stool toward her.\n\n\"Don't I get to pick position?\" Bailey scolded over her shoulder.\n\n\"You want it spread around?\" Kent explained, \"You get up higher so I can get everywhere.\"\n\nWith a harumph, Bailey stepped backwards up onto the stool.\n\nMuch better. Of course, it'd be best if we got those pants off, but she still looks good in super tight jeans.\n\n\"Twenty-two,\" he warned.\n\n\"Just hurry up,\" Bailey replied, locking her legs and prepared herself with a deep breath.\n\n\"Quick and hard it is,\" Kent answered.\n\nShe doesn't want artistry this time around. Maybe she's stressed out about something or maybe she's nervous. This might be like that time she just lost herself in the count. Whatever she wants, she's worried Carson might return soon, so I've got to get on this.\n\nKent laid his hand on Bailey's right cheek.\n\n=============================\n\nI want this debt to be over with. Bailey thought, feeling Kent squeezing her cheek through her jeans. I don't even know why but I feel like... like it's hanging over me. It's in my way. I can't feel free as long as I owe him.\n\nBailey told herself that this sensation of encumbrance lay at the source of her desire to take twenty two swats on her ass today. As Kent began pounding her cheek, spreading his strikes all over as he had promised, she counted so automatically that the process didn't disturb her thoughts. In fact, she felt a certain kind of clarity.\n\nAt this precise moment, I am doing everything I can to clear my debt and get beyond it.\n\nShe also knew she had a bit of money in her bank account, but offering that to Kent felt wrong, too.\n\nI allocated that money to my expenses, not to this debt to Kent.\n\nMuch as the two spankings she owed Laura couldn't be repaid with a two-dollar coin once they'd become spankings, it didn't seem right to use Normal Money to pay off Debt to Kent.\n\nThe money from students loans isn't for this. That's for books and tuition and rent and stuff. This debt to Kent is separate.\n\nBailey considered, even while she counted off the spankings on her right cheek, what she might do with extra money. What, she wondered, might she do if she found a five-dollar bill on the sidewalk?\n\nI supposed I'd give it to Kent, then. It's extra money, isn't it? Unassigned?\n\n\"Eleven,\" Bailey announced.\n\n\"That takes care of the right cheek,\" Kent said. \"Does it feel evenly spread out?\"\n\n\"Yeah, I think so.\"\n\n\"Mm,\" Kent expressed his doubt with a moan.\n\nYou just want to see my ass after, she smirked toward the wall, but then again, so do I.\n\n\"Ready for the left?\"\n\n\"Go ahead.\"\n\nBailey started counting at 'twelve' as Kent picked up his assault. Through the denim, the spankings had more to do with impact and vibration than stinging pain. He could strike harder, deeper, and not really hurt her the way that a bare ass slap did.\n\nAnd never mind that spatula or the whip. Christ.\n\nStill, her mind dwelt on the debt.\n\nI want it gone, but I want it gone fairly and honestly. The challenge here, clearly, is to pay off the debt without using any of the money that's meant for my education. I won't touch those student loans, no matter what.\n\nA gleam, unseen by anyone, came to her eye.\n\nBut I do want to get past it. I mean, yeah, it's fun and daring and makes me horny as fuck, but I need... I need to have it done... to get to the other side.\n\n\"Ha!\" she cried out. \"Twenty two.\"\n\nWithout hesitation, she stood up on the stool and unbuttoned her jeans. One breath later, she let them and her panties hit the floor, fiddling with her phone the whole time. With everything set how she wanted, she handed it over to Kent.\n\n\"How do I look?\"\n\n\"Evenly pink everywhere,\" Kent nodded with satisfaction. \"I think I nailed it.\"\n\nBailey squeezed her cheeks together, locking her muscles up so the picture wouldn't turn too raunchy, and leaned over the bed. She heard the camera app click twice before Kent handed the phone back to her. She stood up and accepted the camera, turning to sit down with her legs crossed.\n\nHe can see my hair, if he's looking. Of course he's looking. It's fine. I'm going to pretend I don't care.\n\nShe flipped to review the pictures.\n\n\"Nice and pink,\" she said, noting that he'd taken the two pictures from opposite sides, neither right up her ass. \"Thanks.\"\n\n\"You're welcome.\"\n\n=============================\n\nKent had had a terrible time concentrating on his lab work.\n\nI can't just fuck up my education because of these two girls, he reminded himself as he walked home in the dark. I still have to do my school work somewhat competently.\n\nHe had managed to shut down his imagination, at least for brief periods of time. This supreme effort had allowed him to finish his lab work, collect his notes, and reach the park near their basement apartment just after eight o'clock.\n\n\"Almost home,\" he texted Bailey. \"You ready?\"\n\nA moment later, his phone binked at him.\n\n\"Already at Laura's.\"\n\nThe little icon spun around, indicating it wanted to download some image she'd sent with her text. A second later, a tiny picture popped up. Kent squinted at it, the cold air making his eyes water unexpectedly. He expanded the image with two fingers.\n\nLooks like one of those magnetic pads you attach to a fridge. It says... \"Shopping List\" on top.\n\nIn addition, someone had written \"$113\" into the top of the \"List\" area.\n\nOh, nice. A substitute for the white board. I hadn't even thought about that. How else could we do spankings at Laura's house? What are you going to do, bring that giant thing from your bedroom over?\n\nKent smiled as the phone binked again.\n\n\"Cool?\" Bailey asked.\n\n\"kk,\" he sent back.\n\nBy that time, he'd reached the side door to their house. Quickly as he could, he entered and ran down the stairs.\n\nAll things considered, I don't know how far we're going tonight, or how many time we're doing what.\n\nWith all the options in mind, and knowing he wouldn't have home advantage, he threw two extra pairs of underwear in his backpack as well as the spatula (which had never left his room to reach the kitchen). He tossed in an extra shirt and, deciding he didn't want to smell like a chemistry lab, ditched the shirt he'd worn all day in favour of a dark blue polo.\n\nNot exactly club ready, but that's not the plan, I hope.\n\n=============================\n\n\"You have a plan for tonight?\" Bailey asked, trying to lounge in the uncomfortably hard couch Laura's parents kept in her living room.\n\n\"Me?\" Laura's eyes widened.\n\n\"It is your house.\"\n\nTheir preparation, up to this point, consisted of the white board and two bottles of alcohol -- Laura's mostly full Irish Cream and Bailey's nearly empty whisky-- resting on the knee high living room table. Three shot glasses made a neat triangle around them, already filled with what Laura had called a \"Lucky Irishman\", equal parts of each alcohol.\n\n\"I was just going to wing it, I guess,\" Laura said. \"Did you want to do the blindfold thing again?\"\n\n\"You itching to get naked?\"\n\nLaura reddened and shrugged. \"Just trying to keep it interesting. You don't mind pushing it a little, do you?\"\n\nBailey tilted her head, \"You know how the rules work.\"\n\n\"Yeah,\" Laura said, \"I just mean, y'know, if I wanna do what you did.\"\n\n\"What I did?\"\n\n\"Well, I just wondered if you'd be okay-\"\n\nThe doorbell rang, interrupting Laura, prompting Bailey to hop up off the couch -- where she'd never wanted to sit -- and rush to the door.\n\n\"Hey, Kent!\" she greeted him at the door.\n\nKent unslung his backpack and dropped it in the foyer.\n\n\"Bai, Laura,\" he smiled in reply. He pulled an envelope out of the backpack and handed it to Bailey, \"Mail came in. This one says 'Urgent'.\"\n\nBailey took the hand-addressed envelope from Kent and eyed it warily. \"Oh, it's from my grandmother.\"\n\nLaura appeared beside Bailey and reached up to give Kent a warm hug and a peck on his cheek. \"Hi, Kent.\"\n\nBailey and Kent looked at Laura awkwardly, then at each other more awkwardly, Bailey still clinging to her letter with both hands.\n\n\"There are a lot of Jesus pictures,\" Kent observed, dodging the awkwardness.\n\n\"Yeah,\" Bailey agreed, turning away, her eyes setting on the shot glasses. \"Here!\"\n\nShe laid down her envelope and seized the glasses in her fingers, handing them out immediately.\n\n\"Bottoms up!\" Laura toasted, and the alcohol went down. \"Oh! That's way better than straight whisky.\"\n\n\"If you say so,\" Bailey's lips twisted doubtfully. \"I'm going to need more whisky. My bottle's almost empty.\"\n\n\"I could have brought mine,\" Kent offered. \"If you'd told me.\"\n\nBailey acknowledged this and turned back to the letter on the table. \"It is 'urgent', you know.\"\n\nLaura shrugged as Bailey tore the letter open.\n\n\"Oh,\" Kent saw the card inside. \"I didn't know your birthday's coming up.\"\n\n\"Next Saturday,\" Laura told him.\n\nBailey opened the card and three crisp, green, twenty dollar bills fell out.\n\nOh, shit, Bailey thought, looking over at the little white board on the fridge in panic. Sixty dollars? No, no, no.\n\n\"Um,\" she said aloud, \"You guys want to hit the LCBO?\"\n\n=============================\n\nLaura stared at Bailey, heard the strained note in her voice.\n\nSomething is horribly wrong and I have no idea what it is, Laura realized, I mean, thinking about your Nana right now could be a buzzkill, but that's not what I'm hearing.\n\nShe tried to figure what had happened. Maybe kissing Kent on the cheek had gone a little over the top, but Laura felt pretty sure that sort of schmaltz just rolled off Bailey like water.\n\nThen what? She'd opened the birthday card, found the money, and suddenly insisted on an outing.\n\nLaura tilted her head, peering at her friend, waiting for their eyes to meet. Bailey turned her gaze up, eventually, but the stony, fake innocent face she showed Laura gave her no new information.\n\nAlright, something freaked you out. Is your twentieth birthday that big a deal? I didn't think so. But if you need some breathing space before we get down to business, I got your back.\n\n\"Is my Irish Cream that bad?\" Laura kept her voice playful, forgiving.\n\n\"Yes, actually,\" Bailey jumped at the offer, her facial expression changing from vulnerable to a more comfortable cynicism. \"But-\"\n\n\"Butt?\" Laura asked.\n\n\"You want to do one dollar before we go?\"\n\n\"Each, or together?\" Laura asked, thinking, whatever you need, I'm here for you.\n\n\"Together, thanks,\" Bailey sighed with relief. \"Over top?\"\n\nKent stood aside as Laura swept past him into the little kitchen to make a single mark on the fridge.\n\nOkay, Bai. If this is what we're doing, I'm cool with it, Laura looked imploringly at Bailey but got no response. You gotta clue me in here.\n\n\"Where should we do it?\" Bailey asked, instead of explaining. \"Side by side?\"\n\n\"Right,\" Laura said, and looked around her living room, her brain scattered. \"Kneeling on the couch?\"\n\n\"Sure,\" Bailey nodded.\n\nLaura's panic over Bailey's mysterious mood swing suddenly swung into a different sort of blood rush as she turned her back on Kent.\n\nOh, god. We're starting again.\n\nLaura shivered putting her knees on the edge of the couch and leaned over to rest her elbows on the back, sticking her rear in Kent's direction. Bailey took a parallel spot on her right, the girls sharing a brief smile before Kent moved in behind them.",
        "\"Ready?\" he asked.\n\n\"Hurry up,\" Bailey scolded, \"I need more whisky.\"\n\n\"Right,\" Kent drawled back. \"I'll do these real fast, then.\"\n\nLaura looked over her left shoulder back at Kent, her raised eyebrow asking him, Do you know what's going on?\n\nKent shrugged in response and put his hand on her left cheek, blanking out her brain as lustful thoughts replaced sensible ones about her friendship.\n\nThe spankings came fast, the first two hitting her left and right cheek in succession.\n\n\"One, two,\" she called out, even as she heard the next two spankings strike Bailey.\n\n\"Three, four,\" Bailey replied, then, \"Five, six.\"\n\nKent had decided to work his way back and forth across their asses, strafing in one direction and the other. He hit Laura's cheek, right and left.\n\n\"Seven, eight,\" Laura winced, then, \"Nine.\"\n\nThe last swat struck Bailey, who announced, \"Ten!\"\n\nThat didn't even hurt, Laura noted when she stood up.\n\nYou have grown used to the defilement of your flesh.\n\nLaura grumbled internally, but had nothing with which to reply.\n\n\"Liquor store?\" Bailey asked.\n\n\"Sure, Bai,\" Laura nodded.\n\n=============================\n\nThe conversation on the way to liquor store had seemed light and weird to Kent, but it always felt that way when the normal world interposed itself in the middle of his sessions with Bailey and Laura.\n\nI remember that shock when I went grocery shopping with Bailey during Thanksgiving, Kent thought, the interlacing of everyday activities with the outdoor spanking left my skin feeling like an extra layer of clothing.\n\nOnce they'd reached the liquor store, passing through its doorway from cold to warmth, the feeling passed. Bailey went straight to the whisky aisle and selected her favourite brand.\n\n\"Do you have I.D.?\" the woman behind the cash register asked.\n\nBailey already had her driver's license out. After a perfunctory check, the woman scanned the whisky.\n\n\"$30.34,\" she announced.\n\nBailey handed over her two, crisp new twenty dollar bills and accepted her change. She inhaled deeply, looking at the money left over. Her head jogged back and forth in indecision while Kent watched the cashier bagging her bottle of alcohol.\n\nBefore taking the brown paper bag, Bailey turned to Kent and handed over her last twenty dollar bill and the nine dollars in change. Standing behind her, Laura's face turned to horror.\n\n\"What's this for?\" Kent asked.\n\n\"I owe you money, right?\" Bailey rolled her eyes. \"And I wasn't expecting this birthday money. So it's extra, which means at least some of it should go to you.\"\n\nOh, Bai, he thought, you really shouldn't have.\n\nShe hoisted her bag and led them out of the store.\n\n\"You didn't need to-\" Kent pleaded, following her.\n\n\"Yeah, I did,\" Bailey said, the automatic doors parting for her. \"We're only doing... y'know, this other stuff... because I didn't have the money.\"\n\nLaura pushed up beside Kent, her face schooled back to some semblance of normalcy as the cold November air struck them once more.\n\n\"Sure,\" Kent pocketed the money. \"That makes sense.\"\n\nI just wish you hadn't. This is fun and you took twenty nine units of fun away.\n\nThey walked on in a temporary silence.\n\nStill, it's twenty nine dollars I wasn't expecting to have either. Maybe I can make something out of that.\n\n=============================\n\nAw, crap, Bai. Why'd you have to go and do that? Laura thought, cycling around the same thoughts in her head the whole way home. I was perfectly happy getting spanked to help with your debt. Kent was happy and you were, too!\n\nBut with one fell swoop, she'd swept right past the hundred dollar halfway mark and down into the eighties. Suddenly, the end of this strange era of Laura's life loomed in front of her.\n\nWhat's going to happen to me when you run out of debt, Bai? Laura wondered. What happens with you and Kent and will I still have a place?\n\nLaura never pretended to have the arithmetical skill of her science and engineering friends, but she could subtract as well as anybody.\n\nNow we have just eighty three more chances to get kinkier, to push our limits.\n\nShe felt the clock running out, even as they marched home and kept their light conversation up. By the time they reached her house, Laura desperately needed another drink.\n\n\"Something to warm us back up?\" she asked.\n\n\"Next one's on me,\" Bailey acknowledged as they removed their winter wear.\n\nShe emptied the last drops from her old bottle and popped open the new one to fill up all three shot glasses with golden-amber liquid.\n\n\"To a debt half paid off,\" Kent raised his glass.\n\n\"To pay-offs,\" Bailey agreed.\n\nLaura clinked her glass with their, but didn't chime in. She fired her drink back, letting it scour her throat.\n\n\"It feels weird, now,\" Laura said. \"After going outside and coming back in. It's like starting over somehow.\"\n\n\"Starting over?\" Bailey asked.\n\n\"Like, um,\" she trailed off. \"Well, we usually start with some spankings with our pants on, then take them off right? But I feel like doing another one with my pants still on, like going outside makes me go back to the beginning.\"\n\nReally, her problem lay with the way the cold air and long walk had cancelled out the effect of their previous drink.\n\n\"Well,\" Bailey offered, falling back into a corner of the couch. \"If you want to do one over top, go ahead. I'll watch.\"\n\n\"Fine,\" Laura retorted. \"I will.\"\n\nUgh. You're my friend, but I hate that you're so tied up with your rationalization of these spankings that you took some of them away from me -- from us. Damn you.\n\nKent, sitting on the couch opposite, waved a slow hand at the kitchen, where they'd left the miniature white board stuck to the fridge.\n\n\"You stay right there,\" she pointed at Kent before marching into the kitchen to make her mark.\n\nShe came back and knelt beside Kent before laying herself over his lap.\n\n\"Ready,\" Laura said, lifting her hips toward his hand.\n\nShe closed her eyes as the slaps started landing, counting out automatically from eleven up to twenty. After the bracing cold of the outdoors and the twenty-nine-dollar catastrophe, she'd needed something to get her back into the right mood. Putting herself in close contact with Kent, and feeling his hand swatting at her right cheek over and over again did the trick.\n\n\"Twenty,\" she declared with satisfaction, and sat up in her place, looking over the low coffee table at Bailey.\n\n\"My turn?\" Bailey rolled her eyes.\n\n\"Whenever you want, Bai,\" Kent pointed out, and Laura heard his voice softening as the second shot of whisky got into him, too.\n\n\"Can we go somewhere else, though?\" Bailey asked as she looked around the room in frustration.\n\n\"My bedroom?\" Laura offered. \"Come on.\"\n\n=============================\n\nKent adjusted his pants as he stood, glad they'd decided to change venue. The country cottage kitchen didn't bother him too much. He could accept the homey looking yellow wallpaper, covered in floral patterns, along with the spindle-legged furniture. But the living room came across so harsh with its religious pictures, crosses and hard-surfaced couches.\n\nYou can't feel comfortable sitting on a couch like that, he though. Maybe Laura's used to it, but it's weird taking her across my lap while sitting on a hard slab of furniture.\n\nThe narrow hallway to Laura's room proved similar to the rest of the house, the walls covered in cross-stitched religious quotations and pictures of a bearded saviour.\n\nWith relief, they arrived in the bedroom. Kent felt a little disappointment when he saw the single chair in the corner with the same style as the living room couches, but the bed with its modest headboard looked soft and normal while the dresser had a full width mirror mounted on it.\n\n\"Better,\" Bailey, trailing behind them, breathed a sigh as she entered.\n\nLaura waved a hand around the room, \"All yours. But the lights don't dim, so, uh...\"\n\nShe was ready for this, Kent noted, watching as Laura struck a match and quickly lit four candles she'd left on the dresser. Two of them remained on the dresser, while she assigned two others to the nightstand by her bed. When Laura had completed that, she killed the bedroom light.\n\n\"There,\" she turned to Bailey with a smile.\n\n\"Thanks,\" Bailey lowered her eyebrows and leaned the miniature white board against the mirror.\n\n\"It's mobile,\" Kent observed.\n\n\"Yeah, this seems easier,\" Bailey pointed out, frankly examining the room in the flickering light.\n\n\"I was kind of looking forward to watching your naked butts wiggling down the hallway,\" Kent smirked. \"But, okay, this works too.\"\n\n\"Ha-ha,\" Bailey's voice came heavy with sarcasm as she marked a tick. \"Well, you can do my almost-naked butt now.\"\n\nFacing them both, she quickly unbuttoned her jeans and shamelessly dropped them to the floor, showing off her transparent panties, which took on an interesting shimmering quality in the candle light.\n\n\"Five, please,\" she said and promptly turned around to brace herself on the dresser.\n\nKent took a good look at her cheeks. The pinkness left from the day before had disappeared, as far as he could tell, and the five spankings he'd done just minutes ago hadn't left any impression at all.\n\nA blank canvas, was it?\n\nHe took a place beside Bailey, noticing that she looked him directly in the eye via the mirror while she waited, a strangely enthusiastic concentration in her glare.\n\nLet's make a good mark to start things off.\n\nKent didn't delay, striking immediately at the lowest part of her left cheek. The first slap on a bare ass always sounded the best, with that high, sharp note that accompanied it. The echo, especially in a room with such plain walls, sounded much better than the thicker, deep sound that came from denim.\n\n\"Twenty one.\"\n\nHe struck again, just a little to the left of his first slap.\n\n\"Twenty two.\"\n\nTwo more slaps landed, reinforcing his first moves against her bare flesh.\n\n\"Twenty three and four,\" Bailey sang out.\n\nKent laid the last spanking dead centre of her cheek, letting his whole hand taste the sensation of striking her ass.\n\n\"Twenty five,\" Bailey stood back up, rubbing at his the spot he'd struck. \"Bastard. That was hard.\"\n\nThat's not a complaint, though, is it, Bai? Kent smirked. That's just you saying that I've done it right. Can't have you thinking you aren't earning your last dollars.\n\nHe hadn't noticed until that moment how his thought processes had changed since the debt had crossed the half-way threshold. Worse, Bailey and Laura had demonstrated their willingness and ability to expend their asses in paying off huge lots of money in a single night.\n\nGone are the days of loonies and toonies, he grimaced, there aren't many nights left if they keep this up.\n\n\"Alright,\" Laura stood up from the bed and faced Bailey, \"Can we do the next one together? Or does your little butt need a break?\"\n\nBailey shrugged, \"You can do one.\"\n\n\"Oh,\" Laura paused. \"I was going to do it together with you.\"\n\nBailey raised an eyebrow and Laura beckoned her over to the bed. The two girls -- Bailey without her pants on -- conferred while facing away from him.\n\n\"Yeah?\" Bailey's eyes went wide. \"Sure, I guess.\"\n\n\"It's okay, though?\"\n\n\"Yeah,\" Bailey's voice wavered, \"You go first, though. I'll watch.\"\n\nLaura nodded and turned back to face Kent as Bailey sat back on the edge of her bed, her bare thighs pressed together. In the dim candlelight, he saw nothing of her through her transparent panties.\n\n\"Kent,\" Laura addressed him. \"A proposal.\"\n\n\"I'm listening.\"\n\n\"I keep my pants on,\" she started. \"But take my sweater off.\"\n\n\"So,\" Kent's voice trailed off doubtfully. \"You'd be wearing a shirt?\"\n\n\"No shirt.\"\n\n\"Ah,\" he said. \"Wearing pants and a bra.\"\n\nLaura gulped, \"I'm not wearing a bra either.\"\n\nKent lurched at that point, feeling his heart skip a beat as he looked Laura over, his gaze drawn downward over the loose fitted, beige cardigan covering Laura's upper body.\n\n\"Topless?\" he asked.\n\n\"Uh-huh,\" Laura nodded jerkily. \"I figure that makes it, what, seven spankings instead of ten?\"\n\nKent looked away to clear his head, keeping his eyes on the ceiling.\n\n\"Let me think,\" he muttered. \"When you take off your pants, it goes from ten to five. When you take off your panties, it goes from five to four.\"\n\n\"But taking off the top after that only takes it down to three,\" Bailey added.\n\n\"That makes it sound like your top and bra only saves you one more spanking,\" Kent chewed over that, sucking in a cheek, \"but that doesn't seem right.\"\n\n\"Maybe it's more about proportion,\" Bailey put in. \"It's not 'one fewer spanking', it's twenty five percent fewer spankings.\"\n\n\"Mm,\" Kent rocked back and forth where he stood. \"That would be about seven or eight. Well, seven and a half.\"\n\n\"What if one of us wanted to take off her pants, too?\" Bailey chided Kent, \"What then?\"\n\n\"So you're just wearing panties?\" Kent felt himself harden as he pictured all of the possibilities. \"We don't have a spot for that. It's, like, three and a half.\"\n\nLaura had watched silently, her arms folded, as they negotiated the fate of her cheeks between them.\n\nKent turned and looked at her suddenly, \"Have you ever done this before?\"\n\n\"Done what?\" she replied with the quickness of anxiety.\n\n\"Shown anyone your breasts?\"\n\nLaura shook her head in a sudden jerk.\n\n\"All right, then,\" Kent said. \"Seven it is. On one condition.\"\n\n\"What?\"\n\nBailey cut in, \"He has to be able to see your breasts while he's spanking you.\"\n\nShe turned to Kent, \"Right?\"\n\nThat's Bailey, alright, Kent thought, making sure I enforce the rules I put in place for her.\n\n\"Very right,\" Kent agreed.\n\nThat's not the condition I meant, though, Kent winced, but I forgot about that. If I actually mention what I wanted, Bailey will think I forgot about her condition. Crap. I was going to make Bailey strip Laura.\n\nResolving to finagle that requirement in at some later point, Kent looked at Laura expectantly.\n\n\"Right,\" Laura with a heave of her chest, \"here goes.\"\n\nShe quietly turned to face the mirror and stared at the eyes of her reflection while Bailey waited on the edge of the bed, a vague look of amusement on her face.\n\nIs this where I needle Laura just a little? Kent looked at Bailey, remembering the way she had poked at Laura during her 'bad girl' breakdown. I think it is.\n\nKent moved in behind Laura, watching her reflection over her shoulder.\n\n\"Go ahead,\" he prodded.\n\nLaura gulped nervously and he heard the anxious acceleration of her breath.\n\n\"You can do it,\" Bailey sang out from her bed.\n\nLaura smiled and crossed her arms to grab the hem of her sweater. She pulled upward, revealing her bare stomach, the hem of the sweater dragging over her skin.\n\nOh, god, please tell me she's going to do it...\n\nWhile the sweater hung generally loose, its hem ran tight, so it hugged her breasts as she pulled the elastic over them. The elastic reached its breaking point, having lifted her breasts up and, with her face covered by the rest of her sweater, released her generous mounds of flesh in one sudden drop.\n\nBeautiful, Kent felt temporarily numb as Laura's breasts bounced and settled into place.\n\nLaura followed this with some awkward wiggling, shaking her breasts back and forth, as she fought to get the sweater off over her head.\n\n\"Ngh!\" she grunted, getting it over her head and throwing it aside.\n\nLaura's frustration quickly dissipated when she caught sight of her body in her mirror. She immediately leaned over and braced her hands on the dresser, her breasts swaying in front of her. Kent watched, mouth partially open, as Laura pushed her shoulders together, fighting an instinct to cover her body, even as he laid his hand on her still-covered rear.\n\n\"Okay,\" she said. \"Ready.\"\n\nKent drew back a short distance, giving himself a better view of her reflection as well as the proper space for his swinging arm.\n\nHe had a decision to make regarding the amount of force to use. With her pants and who knew what panties underneath, the spankings wouldn't sting nearly as much as on bare skin. On top of that, the agreement said that he'd only get seven of them. Seeing her breasts while delivering the swats certainly added to his enjoyment, but didn't increase how much Laura would feel it.\n\nI've got to spank her a little harder than normal, even for over-the-pants, he realized. I always go a bit harder anyway, but this calls for a bit extra -- if for no other reason than to make her body shake a little.\n\nHer previous spankings, done alongside Bailey, he had distributed somewhat evenly. This time, he changed strategy, aiming for the thickest part of her cheeks, right in the centre. Winding up as far as he dared, he struck right on the centre of her left cheek.\n\n\"Ooh!\" Laura cried out in surprise, her hips jumping forward and her body shuddering. The shaking the movement induced in her breasts couldn't have looked better. \"Twenty six.\"\n\nShe moved, Kent noted. Laura never moves. Either I hit her harder than usual or she wants to move.\n\nIt involved a small sacrifice, but he had to know what she wanted. He delivered the next swat to her right cheek, but cut the power by about half. She didn't move this time, but made a disappointed mewing sound, \"Twenty seven.\"\n\nLaura wants an excuse. She wants me to see her tits shaking and she needs an excuse. That's the only reason for that tight sweater and this whole thing. This, at least, is a problem I can solve.\n\nKent stopped holding back at that point, knowing what Laura wanted, and whaled on her left cheek twice. He knew it couldn't hurt that much, given her body mass, experience and the thickness of her winter pants, but Laura played it up anyhow, thrusting her hips forward and her chest out with each strike.\n\n\"Twenty eight, twenty nine,\" she called out.\n\nTwo more shots went to her right cheek.\n\n\"Oh, Kent,\" she whined, shaking her breasts again, \"Thirty, thirty one.\"\n\nFor the last one, he struck her left cheek, harder than all the previous swats.\n\n\"Ha!\" she cried out, standing up straight so she could push her hips right up to the dresser and arch her back as she grabbed at her rear. \"Thirty two.\"\n\nShe turned around to glare at him indignantly. \"That was really hard.\"\n\n\"Uh-huh,\" Kent replied nonchalantly. \"How does it feel?\"\n\n\"What, my ass?!\"\n\n\"No,\" Kent answered, \"showing me your tits. How does it feel?\"\n\nLaura glowered at him, the candlelight shimmering off the sweat on her forehead.\n\n\"I mean,\" he pointed out. \"I played with them, squeezed them, pinched them, but I've never seen them.\"\n\nThat's not the pain of spankings making her skin shine, it's the nerves and anxiety of being topless.\n\n\"I'm going to put on a bra now,\" she frowned.\n\n\"Your call,\" Kent said. \"You only have to be bare when I'm spanking you.\"\n\nLaura turned her back to him and fished around in her dresser until she found a bra. This didn't prevent him from seeing her bare breasts, of course, given the mirror's angle. In fact, her attempt to hide from him actually exposed her nakedness directly to the candlelight, giving him a better view of her.\n\nHer exposure didn't last long, as she quickly found a dark coloured bra and put it on.\n\n\"I guess I'll go next,\" Bailey stepped forward.\n\n=============================\n\nAs if this isn't stressful enough, Bailey thought, considering the inner turmoil she'd gone through in deciding to repay Kent twenty nine dollars in cash, and regretting it the instant she'd handed over the money. I wish my grandmother had never sent me the money. Even if I'd opened the envelope alone, I could have hidden the money. But once it was where everyone could see it...",
        "Bailey sighed, pushing the decision as far into the past as possible.\n\nWhat's done is done. Now I have to do the next thing, and Laura's already pulled out her breasts. Bailey rolled her eyes. Pulled out? She dropped them. Beautifully. For someone who's never watched porn, she got that bit right.\n\nBailey felt the invisible push forward, seeing Laura go that far, knowing her friend who enjoyed having her breasts squeezed and her nipples pinched had taken that extra step.\n\nI've been naked in front of Kent, she thought, I can do this.\n\n\"Alright, Kent,\" she glared at him. \"What if I do the same? Take my top off?\"\n\n\"You want to go topless, too?\" he clarified.\n\nShe nodded and folded her arms, waiting for him to work it out.\n\n\"Bra and panties makes it four for a dollar,\" he said. \"If you're naked, it's three. For just panties, hm. I don't know. It's like we need to do three and a half. Maybe we have to do three spankings, but add something to make up for it?\"\n\nBailey rolled her eyes as if he were an idiot, \"How about I just do two dollars at once?\"\n\n\"Oh,\" Kent started. \"Seven spankings for two dollars? Sure.\"\n\n\"Duh,\" Bailey made two tick marks on the board.\n\nI'm not even going to try that manoeuvre Laura did. There's no point pretending I have the boobs for it and I still have my bra on anyway.\n\nInstead, she pulled her shirt off over her head, showing Kent her transparent bra.\n\n\"Here,\" she said, stepping forward to grab at Kent's shirt. He acquiesced, letting her take his shirt off. \"That's better. Now do me.\"\n\nWith that same ninja move, and just to prove it hadn't been a lucky stab, he released the catch on her bra.\n\nHere we go, she thought. Kent's going to actually see them, and right after staring at Laura's for the worst possible comparison.\n\nBailey left her arms low to create as much compression as she could to support her breasts. She shook the bra forward so it could slide off her shoulders and down her arms. She caught Kent staring at her little breasts, nipples jiggling as she discarded the bra.\n\nMy boobs aren't nearly as big as hers, but he's still looking, still seems a bit surprised. Hunh.\n\nStunned by his reaction, she didn't try to work any creativity into her position, striking the same pose Laura had used, but putting her elbows down on the dresser. She watched the flickering candlelight dance across her flesh, painting her cold-hardened nipples in stark relief.\n\nI mean, I don't look too bad. Just... smaller.\n\nA cool hand cupped the bare part of her left cheek, the place he'd already struck four times.\n\n\"Going the same place?\" she asked, wondering what he planned. Kent could just decide to turn one spot on her ass really dark, but he had to know that could shorten the night.\n\n\"You need evening up,\" Kent remarked. \"The night is young, right?\"\n\n\"Hmph.\"\n\nRegardless of what he'd said, his palm slapped her hard and low on her left cheek.\n\nEvening up, my ass.\n\n\"Thirty three,\" she grimaced, wondering if she should squeal and jiggle her breasts at Kent the way Laura had.\n\nI don't have it in me to pull that off. I'm just not a giggler, no matter how drunk I am.\n\nKent delivered the rest of the spankings to her right cheek, keeping them low and hard. Bailey counted them out, watching his eyes dart to her breasts after every strike. She let her body shake a little after every strike, wondering if that tantalized him, but refused to exaggerate the effect. Bailey also recognized that she and Laura had a long night ahead of them and, on account of this flogging, she'd find herself hard pressed to sit down for any of it.\n\n\"Thirty nine,\" Bailey announced when he'd reddened her right cheek to match her left.\n\nShe turned to glare at him in the dim light, daring him to say anything about her breasts, daring him to do anything about her topless state.\n\nThat's not in the rules, is it? She realized. Unless there's an inspection, he doesn't grope our butts. Unless we put ourselves over his arm, he doesn't play with our boobs.\n\n\"The only bad thing about this,\" Bailey observed out loud to Laura, \"is that he can't squeeze your boobs and spank you at the same time.\"\n\nHer hand went to her mouth instantly, not believing she'd spoken those words.\n\nIs my speech slurring? Am I drunk?\n\n\"Why not?\" Laura reddened slightly as she spoke, a blush that went down well past her neck.\n\n\"If he can't see your breasts, it doesn't count,\" Bailey glared at Kent as she put her bra back on, \"he caught me once at that.\"\n\nKent sat back in the uncomfortable chair, trying to find a way to slouch that didn't hurt.\n\n\"You use this chair for reading?\" he asked Laura, noting the lamp. \"How?\"\n\n\"It takes getting used to,\" Laura stammered. \"How did you catch Bailey?\"\n\n\"The deal with her bra and panties was that I get to see her breasts,\" Kent explained. \"She wanted to get spanked over my arm, but then I couldn't see her.\"\n\n\"So?\" Laura prodded. \"What did you make her do?\"\n\nBailey took her turn to blush.\n\n\"She took off her panties,\" Kent kept his gaze steady on Laura. \"Just so I could look at her.\"\n\nLaura's mouth widened and she stood up to point an accusatory finger at Bailey, \"Stripper!\"\n\n\"I am not,\" Bailey protested. \"That was just, just...\"\n\n\"Just letting him see you for money,\" Laura ticked her chin up in the and waved that same index finger. \"I call you out, stripper!\"\n\n\"You're stupid,\" Bailey groaned. \"And annoying.\"\n\n\"Stripper!\"\n\n\"I'm gonna smack you in a second,\" Bailey warned.\n\nLaura stuck her tongue, \"Admit it!\"\n\n\"If you smack her on the butt,\" Kent interjected. \"I'd pay to watch.\"\n\nBoth girls froze in mid-argument, their poses comical. Laura, in her pants and dark bra, still held her right hand in the air, drunkenly caught in middle of her denunciation. Bailey, still in her underwear, had just started to rise up and threaten Laura with what Kent hoped was a whimsical backhand. Instead of continuing their argument, they'd become completely still and, as one, turned their heads to look at him.\n\n\"Bai,\" Laura pleaded.\n\n\"I do kind of owe you one,\" Bailey's eyes narrowed.\n\nI think we've hit the sweet spot for low lighting and the heady mix of hormones, Kent thought, I hope I did, anyway.\n\nLaura looked back at Kent, then at Bailey, then at Kent again.\n\n\"Not today,\" Laura said, then eyed Bailey warily.\n\nMaybe not, but it's on the menu now and they both know it.\n\n\"Speaking of stripping, though,\" Bailey sat back on the bed and leaned back to look up at the ceiling. \"We're kind of unequal.\"\n\n\"Unequal?\" Laura asked.\n\n\"Us in our underwear,\" Bailey said. \"Him with his pants still on.\"\n\n\"Well,\" Kent paused to gulp. \"You both get down to your underwear and you can have my pants I guess.\"\n\n\"Hey!\" Laura peered at Bailey, \"I think you're just trying to make me into a stripper so you don't feel bad.\"\n\nThere's something going on here with all this stripper talk, Kent noted, but I can't tell if there's a way for me to push forward or not. This could be one of those numerous occasions where I just need to shut up and wait for them to push each other.\n\nKent watched Bailey glaring a dare at Laura, watched Laura look defiantly back.\n\nThey're frozen. Is it my move?\n\nThe moment passed, and Bailey turned back to Kent, \"Do you think this house has any other rooms?\"\n\n\"It's not a big place, sorry,\" Laura took the diversion. \"Just the living room, the kitchen, two bedrooms and the basement.\"\n\n\"What's down there?\"\n\n\"Laundry room,\" she shrugged, \"Mom's got a sewing room down there. Mostly storage, I guess.\"\n\n\"Can't hurt to look?\" Kent wondered aloud.\n\n\"I guess,\" Laura turned to check with Bailey and added, \"Sure.\"\n\n\"I'll make you both a deal, though,\" Kent said.\n\nHalfway to the door, they both turned and looked.\n\n\"Shoot,\" Bailey peered at him.\n\n\"Neither of you wear anything more than underwear the rest of the night,\" Kent said, \"and I'll take an extra dollar off the tally.\"\n\n\"Uh-\" Laura stammered.\n\n\"How long's 'the rest of the night'?\" Bailey asked.\n\nKent tilted his head thoughtfully, \"Okay, fine. Let's say 'until I leave the house'. That clear enough?\"\n\n\"That could be a while,\" Bailey said. \"Two dollars.\"\n\n\"Sure. If both of you agree,\" Kent looked over at Laura, who still seemed shocked. \"Laura?\"\n\n\"Anywhere we go in my house?\" she asked. \"The whole night? Just underwear?\"\n\nKent nodded but added, \"Unless you want to put those knee high boots on again, too. Panties and those were awesome.\"\n\nBailey snickered, \"Then we'd be almost the same height.\"\n\n\"Ha-ha,\" Laura replied.\n\n\"Will this make you a stripper?\" Bailey asked.\n\nLaura turned up a petulant lower lip, \"It's not, y'know, all the way.\"\n\n\"Will you do it?\" Bailey clarified.\n\n\"Since you asked,\" Laura retorted. \"Yes, I'll do it for you.\"\n\nThat was weird, Kent thought, reminding Bailey of the way this is really about Laura graciously helping Bailey out with her debt.\n\nBailey turned and laid a smile on Kent, \"I can do this easily. Did it all day on Thanksgiving.\"\n\n\"Uh-huh.\"\n\nLaura walked up to Kent, the fabric of her bra brushing against his chest. \"If you wouldn't mind?\"\n\n\"What?\"\n\n\"Her pants, Kent,\" Bailey scolded.\n\n\"Oh, sure.\"\n\nPressing his chest against hers, he leaned forward and unbuckled her belt, unbuttoned her slacks and pulled down the zipper. Though he knew he didn't have to do it this way, Kent knelt on the ground anyway, so he could slowly lower her pants to the ground, revealing the little pair of black panties she wore with its slightly transparent upper section. She stepped out of them, one foot after the other, and he cast the pants aside. Kent placed his hands on Laura's ankles, then slid them up the front of her legs as he stood up, grazing the front of her panties.\n\n\"Ooh!\" she squeaked.\n\n\"I believe we had a deal?\" Bailey interrupted.\n\n\"What?\" Kent asked.\n\n\"Us in our underwear,\" Laura reminded him, \"for your pants.\"\n\n\"Oh,\" Kent's eyes widened. \"Go ahead, then.\"\n\n\"Me?\" Laura squeaked again.\n\nNo one spoke and Laura realized they'd volunteered her for the role. As Kent had done for her, she unbuckled his belt first, but ran it entirely out of its loops on his jeans so she could take it in her hands. Folding it over in her hands, she pulled on it and snapped it against itself.\n\n\"No way is he using that on my butt,\" Bailey warned.\n\nLaura smirked and tossed the belt on her bed before working on the button and unzipping his pants. Kent's erection, at that point, became clearly visible in the outline of his boxer shorts, stretching the cloth up to the waistband.\n\n\"Whoa,\" Laura murmured.\n\nShe knelt, probably because Kent had done so, and stared at the shape of his penis as she pushed his pants down to the floor. Laura did not immediately rise.\n\n\"Do you wanna see it?\" Bailey taunted.\n\nLaura whimpered but didn't give an answer for several seconds.\n\nShe's thinking about it, though, Kent noted, watching her stare at his cock just off the end of her nose. He flexed his glutes, making his erection twitch.\n\nLaura let out another small whimper and reached a hand out, gently stroking his entire length with the back of one finger.\n\n\"Well?\" Bailey prodded.\n\nAfter a lengthy pause, Laura shook her head mutely and stood up, the redness in her face obvious in the candlelight.\n\n\"So it's an extra two dollars,\" she whispered.\n\n\"When I leave,\" Kent said. \"If neither of you cheats.\"\n\nLaura took a breath and held her nose up, \"Shouldn't be a problem.\"\n\n\"Of course not,\" Bailey chimed in. \"Also, I need another drink.\"\n\n\"Right,\" Laura said. \"Weren't we going to the basement?\"\n\n\"A drink first,\" Bailey admonished, \"That Lucky Irishman has grown on me.\"\n\n\"After you,\" Kent waved to the door.\n\nBailey gave him a twisted look and rolled her eyes before she and Laura left. Kent tagged along, picking up the little white board on his way.\n\nThat's a nice thong Laura's got, and I still love the dark green see-through on Bailey. Man, this is great.\n\nKent tried to divide his attention between both of their nearly bare pairs of cheeks as he walked up the narrow hallway between all the little tables the Andersons had laid out with their lace runners and knickknacks.\n\nI didn't realize how awkward this would be without pants on. Erections are really annoying for this sort of thing.\n\nOn the other hand, both of the girls looked pretty steamed up, so he doubted either of them could last much longer.\n\nThe living room, lit only indirectly by the valence lights in the kitchen, served as a great place for Laura to mix their drinks.\n\n\"To more spankings!\" she announced, and they tipped their glasses into their mouths.\n\nShe took a deep breath and looked at Kent.\n\n\"Yes?\"\n\n\"You're not too drunk to spank me again, are you?\" Laura narrowed her eyes.\n\n\"I'm sure I'll manage.\"\n\nShe clumsily took the white board from him and made two marks before setting it down on the knee-high coffee table. Bailey watched with an amused look on her face as Laura politely shoved Kent down on to the couch.\n\n\"That's eight, right?\" she asked.\n\n\"That's right.\"\n\n\"Okay,\" Laura turned her back to him and put her hands on her knees. \"I want it with both hands. What number were we at?\"\n\n\"Thirty nine,\" Bailey put in, then winced in shame at herself. \"I shouldn't even tell you, though.\"\n\n\"Is that a record?\" Laura wondered, still frozen in her pose.\n\n\"You did ten dollars on Monday,\" Kent pointed out, \"This'll only make six so far tonight.\"\n\n\"Yeah, but the spankings,\" Laura said. \"When have we ever done forty in one night?\"\n\nBailey nodded as she sat down opposite to Kent and pulled her legs up to sit cross-legged, \"That's true.\"\n\nLaura turned back to Kent and smiled, \"Ready.\"\n\nHe landed the first double smack immediately, eliciting a cry from Laura, \"Forty and forty one.\"\n\n\"I feel like you said 'ready' but you weren't,\" Kent pointed out.\n\n\"Well, it was very qui-\"\n\nTwo more slaps struck her cheeks high.\n\n\"-quick,\" Laura squeaked, \"Forty two, forty three.\"\n\n\"He'll stop if you want,\" Bailey sang out an offer.\n\n\"No, he can keep go-\"\n\nHe cracked another double spanking off her cheeks.\n\n\"Ow!\" she cried out. \"Forty four, forty five.\"\n\n\"Should I keep going?\" Kent taunted. \"Are you sure?\"\n\nLaura moaned in response, whispering out, \"Yes.\"\n\nKent swatted her cheeks one last time, drawing out a weak groan as Laura fell back into him, somehow managed to get herself on top of his erection.\n\n\"Forty six and seven,\" she moaned. \"Oh, god.\"\n\nShe had trapped his erection between her legs, which she spread just enough to let it poke at her lips.\n\n\"Oh, good god,\" she muttered again, rocking her body forward and back.\n\nBailey came over to sit next to her, \"Feels good?\"\n\n\"Yeah.\"\n\n\"Such a bad girl, though,\" Bailey taunted.\n\nGotta hold on. Gotta hold on. Fortunately, this isn't a really stimulating position for me, but still, I could come in my shorts from this.\n\nKent angled himself in an attempt to stave off his own orgasm, and reached around Laura's body to squeeze her breasts.\n\n\"Bad, bad girl,\" Bailey reminded Laura with a whisper.\n\n\"But it's okay,\" Laura defended herself with a whine. \"I did the spankings. It's okay.\"\n\nWhat the-?\n\nShe let out a moan again and Bailey looked a raised-eyebrow query over at Kent. He replied with his best I-have-no-idea look and continued squeezing Laura's breasts.\n\n\"The spankings make it okay?\" Bailey whispered.\n\n\"Yeah... yes.\"\n\n\"Oh,\" Bailey sang out. \"Should Kent give you an extra one?\"\n\n\"Oh! Oh! Oh!\"<br >Laura came down hard on his cock as she screamed out her orgasm. Kent gripped her breasts as tightly as he could, at least hoping he could restrain her from falling over and smacking into the coffee table while she bucked in his lap.\n\nAs she slowly came out of her orgasm, Kent pulled her back into his arms to hold her shivering body.\n\nOkay, then, he thought. I finally understand what Laura is getting out of this.\n\nHe looked over at Bailey, whose mouth hung half open while she stared at her oblivious friend. Bailey's eyes turned to Kent with an appraising look.\n\nShe gets it, too. Holy crap."
    ],
    "authorname": "xtorch",
    "tags": [
        "counting",
        "debt",
        "money",
        "nudity",
        "orgasm",
        "panties",
        "spanking",
        "stripping"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/two-hundred-dollars-ch-21"
}
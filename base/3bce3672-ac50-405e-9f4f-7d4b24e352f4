{
    "title": "There and Back Again Ch. 142",
    "pages": [
        "Chapter One Hundred Forty-Two: Seek and Find \n\nAnxiety drove us, and despite it being mid-afternoon when we left the Vigil, we managed to make good time, continuing well past dark. We'd met up with Oghren and Wulf along the way, so between those two and Aedan, Alistair, Justice/Vander (Vustice? Jander? Maybe not), Alim, Zevran, and a reluctant Sigrun, we had eight Wardens, and a large contingent of soldiers accompanying Nathaniel. I hoped that would be enough to take on, presumably, the Architect and whatever forces he'd managed to accumulate since the Dragonbone Wastes. \n\nHaving been briefed on the situation - missing Wardens, possible fighting between Rolan and the mages, and a large gathering of darkspawn - no one slept well. Justice kept to himself, just as Vander would have done, and I wondered whether that was by preference or in an effort to avoid making others uncomfortable. Sigrun, understanding that we needed her but upset at having to leave Faren's care in the hands of servants, also seemed to prefer to be alone, and we all left her to it. The rest of us almost clung together, sleeping in tents pitched close together and walking together in silence. \n\nWe had no idea what we would be walking into, and it was making us jumpy and nervous. \n\nThe next day didn't help; while we started early, we were slowed down by muddy, icy terrain, and the carts carrying food and water kept getting stuck. Full winter had not yet hit Ferelden, but there had been scattered snows and the temperatures had dropped below freezing - where they would likely stay until spring. It was less cold this far north than it would be in the bannorn or down in the Wilds, but between the wet and the cold, ice was inevitable. \n\nSeveral times during the day, especially as we struggled to free the carts from the muck, we could sense darkspawn at the edges of our range that would disappear rather than engage, putting the Wardens even more on edge. Sensing our urgency, we distributed packs to the soldiers, leaving the supply carts and an escort to follow behind as they were able and Nate ordered the troops to continue as fast as they could travel. Despite our increased speed, we didn't encounter any darkspawn, and they stayed enough ahead of us that we couldn't discern their numbers. \n\nWe travelled into the evening again, but exhaustion and darkness finally forced us to stop or risk losing soldiers to falls and silly, avoidable injuries. All of us were chafing at the bit, eager to find our fellow Wardens and be done with the Architect and his sentient darkspawn, but we knew overtired troops would not function well once we did engage. Everyone collapsed to their bedrolls after a brief meal of cold rations, and we got moving again as soon as the sun had peeked up over the horizon.  \n\nBy any estimates we were nearing the Tarcaisne Ridge, and we finally came across some darkspawn, easily eliminating small groups that I assumed were patrolling around wherever the Architect was holed up. Resistance increased the further southwest we went, and by midday our progress had been hampered significantly by multiple small scuffles. None of the groups posed a risk to our large company, but between the fighting and then burning the bodies, it took time, and we had only one mage - Alim - to aid in the latter. By afternoon we were within sight of the great cliffs of the Ridge, and the deep cleft where the road climbed up towards the bannorn. \n\nAfter staring at the maps and debating briefly with Nathaniel and a few local soldiers, and not wanting to risk either Nate's scouts or our Wardens, given the number of bands of darkspawn about, we elected to turn left and follow the ridgeline further south and east. The locals assured us there were caves in the cliff to the south, but nothing further north. We'd gone only a few miles before we came across evidence we'd chosen the correct route - and that something far stranger than just darkspawn was at work. \n\n\"Commanders! My Lord, Lady,\" a breathless soldier from the vanguard shouted to us. \"You need to see this!\" \n\nAedan, Alistair, Nate and I followed him, with the rest of the Wardens on our heels. We climbed a small hill, only to stop in shock. Before us lay a battlefield, void of anything living, but covered in a large number of corpses, the ground soaked with blood. The smell - a combination of the sharp, metallic scent of blood and the sickly sweet odour of rot - made me gag, and I fumbled for a handkerchief to cover my nose, not that it helped. My reluctant gaze initially turned away from the bodies, many torn to pieces, some being feasted on by crows and other birds of prey, but after a moment, I looked back in confusion. \n\nThere were darkspawn, dozens of bodies bloating in the late afternoon light, their blood black and thick where it had spilled onto the grass and mud, and a large number of soldiers, some of them wearing Amaranthine's colours and some in the tabards of the Fereldan army. But neither of those were what confused me. What drew my eye, and what I confirmed as I stepped carefully out onto the battlefield almost on autopilot to get a closer look, were a third category of bodies. \n\n\"Templars?\" Zev asked, rolling over the torso of a corpse that had been ripped clean in half. The armour was familiar, and the associated skirt-thing lay nearby across a set of mangled legs smeared with blood and filth. \n\nThe more I looked, the more confused I became. Some of the templars clearly had darkspawn-related injuries, broken pieces of the poor-quality weapons the darkspawn used jutting out of wounds, and claw marks from shrieks evident. But others had been cut down by more conventional weapons, some still with daggers or short swords embedded in wounds, others with amputations or decapitations that would have been impossible with dull, rusty darkspawn blades. \n\nScouts and trackers cautiously moved across the battlefield, examining the bodies and the tracks left behind. I hoped that they would learn something useful, but was more than glad that it wasn't my job - the wide open, dead eyes of so many people would haunt my dreams enough as it was without getting a closer look. \n\nNate detailed soldiers to begin separating and piling the bodies, while the Wardens began combing through the remains looking for any sign of our missing comrades. \"And if there were templars here, it's possible Solona and Anders made it this far also,\" Aedan commented. \"I specifically ordered them to wear Warden tabards at all times, so they shouldn't be difficult to locate if they...\" \n\n\"Don't say it,\" I whispered. It's bad enough we may have lost Conrad, and that one of our own may have been partly responsible. I won't consider the possibility that Anders and Solona are dead too. \n\nIn the end, it took the rest of the afternoon to separate out the bodies. We lit pyres for soldiers and templars, after removing identifying items and recording appearances to be sent to the Grand Cleric later; there were also twenty darkspawn corpses which Alim incinerated. There was no sign of any Wardens, no unrecognisable corpses, no gear, nothing. Mentally and physically exhausted, we made camp upwind of the battlefield, lighting a large bonfire and cooking a warm meal for the first time since leaving the Vigil. \n\nNate asked to meet with us, and in the end all of the Wardens crowded into his large tent, where several of the scouts and trackers I'd seen on the battlefield waited for us. The nobleman gestured at one of the men, and he cleared his through nervously. \n\n\"I'm Bosley, Commanders, one of his Grace's trackers.\" \n\nAedan nodded firmly. \"What did you determine, Bosley?\" \n\nThe man hesitated briefly, looking back at his fellows before clearing his throat again. \"Can't say for certain, o' course, but it looks...it looks like the templars killed five soldiers, and even piled the bodies, but then a day or so later, the templars were attacked by the rest of the soldiers. The templars had even surrendered, I think - some of them had their hands bound. But then they were all attacked by darkspawn. 'Bout a day ago, maybe a bit more. All told, there were thirty-four soldiers, and half as many templars. 'Bout fifteen horses, but I think some might have run off during the fighting. From what I could see, none of the templars or soldiers escaped. But...\" \n\nHe trailed off, and Aedan gestured to him, a reassuring expression on his face. \"Yes?\" \n\n\"There were drag marks, my Lord. Darkspawn tracks away from the battle, and they were dragging some things behind them when they went. Could have been injured darkspawn, but...\" \n\n\"Could have been Grey Wardens.\" Aedan frowned. \n\nBosley nodded. \"At least two, maybe more.\" \n\nAedan turned to me. \"How many soldiers in each patrol?\" \n\n\"Fifteen,\" I replied. Each of the Grey Wardens had been travelling with escorts, and Nate had allotted sixty to split between the four patrols. The math - more than thirty soldiers, or two patrols' worth, made my stomach plummet. \"And Solona and Anders had five.\" They'd been travelling light, by horseback, hoping to make it to the Circle and back quickly. \n\nAlistair winced. \"So all of both patrols, and all of the mages' escorts, are dead.\" \n\n\"Minus one,\" Aedan mused. \"A messenger who didn't make it? Or another captive?\" \n\n\"And the darkspawn probably have four Wardens.\" Or at least their bodies. I didn't say it, hoping that if I didn't acknowledge it, it wasn't real. \"That's a lot of Warden blood.\" \n\n\"Doesn't matter.\" Aedan's scowl was grim and almost feral. \"We'll kill the Architect, kill his darkspawn, and it won't matter how much blood he managed to drain.\" \n\nAlistair, with nothing else left to do, was staring at the assortment of items that had been taken off the templars' bodies, shoved in a crate in Nate's tent. Where in the hell have all these templars even come from? Alistair was clearly thinking along the same lines; he shoved aside the box and sighed. \"What, by the Maker's hairy arsehole, happened here?\" \n\n*** \n\nWe took the night to rest and prepare before following the tracks from the battlefield towards the cliffs. Closer up, the cliffs looked more like mud and less like rock, but they were dotted liberally with small openings, often half-hidden behind low, scrubby bushes or protruding boulders. The tracks were clear enough even for me to see, and led straight to the largest opening we could find right at the base of the cliff. On closer inspection, the opening had been haphazardly shored up with branches and rotting planks, and it made me wonder how big a risk mudslides and tunnel collapse would really be inside. \n\n\"Shouldn't we, I don't know, not follow directly behind them? Find some other way to sneak up on them?\" I looked at Alistair in surprise. He has a point. \"I'm surprised I'm the one bringing this up...\" \n\nAedan shook his head, even as Zevran nodded hesitantly. \"We don't have time. We can't let him escape again. Not to mention, any of the Wardens could be injured. It could take days or longer to try different tunnels and hope they connect. We're just going to have to go in and overwhelm them.\" \n\n\"And if they outnumber us?\" \n\n\"We'll cross that bridge when we come to it.\" \n\n\"Terrific,\" I muttered. \"Oh, don't even think about it, Aedan.\" My brother was giving me the puppy-dog eyes, clearly hoping I'd stay outside. Alistair smirked. \"I'm going in first, obviously.\" \n\nI held my hand up to silence the barrage of objections that statement brought. \"I'll be right back.\" \n\nThey know I'm right, even if they don't like it. I'd spent hours while travelling convincing Avanna, my bodyguard, that she would have to let me go ahead alone when we reached the darkspawn; there was no way I was putting her at risk of being taken and made into the next Broodmother. I'd ordered her to stay outside with those guarding the tunnel, no matter what. She was even less happy about it than Aedan, from the look on her face. I went up on tiptoes and kissed Alistair all-too-briefly, and then turned to the intimidating entrance with a deep breath and, squaring my shoulders, went inside. \n\nThe light from the door didn't illuminate very far inside, and it wasn't long before I was running my left hand along the wall, creeping forward blindly in the dark. It was awful; it felt like I was lost, but at the same time I could feel the weight of the mountain above me pressing down. The sensation of the taint was strong, like in the Deep Roads, obscuring my ability to sense whether there were darkspawn around. My mind started playing tricks on me, and I got startled at imaginary flashes of light or the perception of being followed more than once, pressing my back against the wall and gripping my daggers too tightly until the feeling passed. The tomb-like quiet wasn't helping my nerves either, every step or scrape of my own armour making me twitch. The tunnel twisted and turned randomly without branching, but all the time led down, deeper and deeper underground. \n\nI progressed forward slowly for some time without being able to see, my fear and paranoia mounting the further I went; I was on the verge of deciding to turn around and go back for a torch when I realised I could see a very faint glow ahead. I tried to sneak as silently as I was able, feeling enormously relieved when then tunnel opened into a section of Deep Roads. The lava channels were still flowing, providing reddish light and almost oppressive heat; I was wearing layers underneath and overtop of my armour, given the wintery chill outside, but I didn't dare try to strip off, alone as I was. \n\nThe section of the Roads I was in was obviously very old, the statuary and railings crumbling, the floor broken apart and covered in dirt and dust, but it still didn't totally take away from the obvious former grandeur of the place. The ceilings were high, like I was used to; the section of road - before it ended at a massive collapse - was ruler-straight and close to twenty feet wide. There were doors leading off each side, as well as two large irregular gaping holes in the walls that I assumed were either made by crosscut drifters or darkspawn. \n\nAnd I wasn't alone. Each door had two darkspawn sitting or standing nearby, and small groups gathered in each opening. Another, larger group gathered in the middle of the road segment, around what was obviously one of the Architect's sentient darkspawn. It wore armour, not the patched, scavenged junk most darkspawn had but an actual set of mail with a helmet, and it carried a maul that even Sten might have had a hard time wielding. The rest of the darkspawn were far less-well geared, but there were probably fifteen of them, in addition to the twenty more who guarded exits. \n\nThe tunnel I'd come out of was the only unguarded opening, and the large central group of darkspawn faced it expectantly. They know we're here. I looked closer at each doorway and the two guarded tunnels, but the Architect had been clever; the doors were closed and me opening one would not have gone unnoticed, even if the darkspawn couldn't see me, and the groups gathered in the two larger tunnels had spread out, a wall of darkspawn spanning each one, with no room for me to slip past. \n\nI resisted the urge to swear, and after fixing numbers in my head, headed back to the surface to let everyone know what we would face. The trip back took much less time than the trip down, knowing that the way was clear, the floor stable, and nothing awaited me in the darkness. However, still unable to see, I again trailed my left hand along the wall to guide me. \n\nAnd it was a good thing I did, otherwise I'd never have noticed the small, peculiar area along the wall that I couldn't see in the dark. \n\nIt felt sort of like abruptly plunging my hand into cold water - without getting wet, somehow, yet leaving me feeling slimy - or perhaps like that feeling when you sit on your foot and it falls asleep, only to have pins and needles when it wakes up. It wasn't painful, exactly, but it was very uncomfortable, though I hadn't done anything but touch the wall lightly. I was so surprised that I'd taken three steps past it before I realised something was there. I backed up and ran my hand over the spot again with the same results; I changed hands, and could feel it with both. I checked the opposite wall and found nothing - explaining why I hadn't noticed it on the way in. I sheathed my daggers, took off both gauntlets, and explored the wall with both hands, discovering that the sensation spanned about three feet of wall, extended from the floor to above my reach, and that the wall itself - other than the strange sensation - was smooth and felt no different to my fingertips than the rest of the tunnel. \n\nSatisfied that I'd learned all I could about the area alone and in the dark, I put my gauntlets back on and continued to walk back to the surface where I was sure my husband and brother were probably losing their minds with worry. I counted the steps to make sure I could find the strange spot again, I almost ran the last few feet once I could see the light of the entrance again, and I nearly bowled Alistair over in my rush to throw myself into his arms. He held me silently for a brief moment, pressing kisses to my forehead, before I finally pulled myself together and turned back to face Aedan, Nate, and the rest of the Wardens. \n\n\"It's not good news. The tunnel stays narrow and dark all the way down, and there's an ambush waiting at the bottom.\" I briefly described the segment of Deep Roads and its inhabitants. \"But...I think, well, I'm not sure. There's something...\" I trailed off, and saw everyone looking at me strangely. I sighed. \"Sorry. I can't be sure. But a hundred or so paces down, on the right-hand side...I think there's a magically concealed door. Is that a thing?\" \n\nLaughing at my awkwardness, Alistair gestured to Alim, who stepped up and nodded. \"There are various ways to conceal things with magic, but also barriers that would block a door. What makes you think it's there?\" \n\nI described the sensation as best I could. \"I'm assuming it was the templar thing, kind of like when I can sense the spells you cast. Not sure. It's a really weird feeling, though.\" \n\n\"Sounds like maybe an illusion ward? I've read about them, but never seen one. That's Tevinter magic. I can't say whether I can break it until I can see it.\" \n\n\"Well, let's grab a torch and go, then. It's not close enough for the darkspawn to see the light, and I can show you where I found it.\" \n\n\"You're not going alone,\" Avanna growled, and Aedan nodded. \n\n\"They can't sense you, but they can sense Alim. They might be waiting on the other side of that door! I'm coming with,\" Alistair declared. \n\n\"We'll split in half,\" Aedan decided with a nod. \"Tunnel's not wide enough to take a bunch of soldiers. I'll come back once we figure out that door.\" \n\n\"You can't both go,\" Nate cut in. \"You'd leave the Wardens without a Commander if something went wrong, or we were attacked out here.\" \n\nAedan swore, though I didn't miss the look of guilty relief on Zevran's face when he agreed to wait with the others. Quickly Alistair, Wulf, and Sigrun dropped their packs and drew weapons, leaving Oghren, Justice, Aedan, and Zevran reluctantly outside as 'backup'. I hugged Aedan and Zev, assuring them we'd be fine, and then stepped into the tunnel entrance with Alistair on my heels. \n\nI carried one of the arcane lamps Aedan had cleverly thought to bring from Soldier's Peak, and Wulf carried a normal torch at the back. I trailed my right hand along the wall and counted steps as I led my four compatriots down the twisting tunnel, surprised to find that the feeling of paranoia and nervousness wasn't much better with the addition of the light. The others felt it too, Alistair reaching out to touch my shoulder or back every few steps, and Alim clearing his throat nervously behind him. ",
        "Before long, Alim whispered \"Stop.\" \n\nI did. \"What?\" I asked quietly, turning anxiously. \n\nThe mage looked jittery, gripping his staff with shaking hands. \"Just...do you know how to cleanse?\" he asked us. \n\nLooking confused, my husband nodded. \"Something wrong?\" \n\n\"Just...do it. Do a cleanse.\" \n\n\"Won't that hurt you?\" I objected. \n\nAlim shook his head at the same time as Alistair responded, \"Not a smite. Cleanse doesn't hurt.\" \n\nLooking from Alim to me, Alistair shrugged, closed his eyes, held his arms out from his body slightly, and clenched his hands. I flinched in anticipation, expecting to feel a pressure wave or my ears pop or...something, but nothing happened. Well, nothing physical, but it took only a moment to realise that the oppressive aura that had been making my heart pound and my hands sweat was suddenly just...gone. \n\nI turned to Alim, eyes wide, and the elf just nodded smugly. \"That's better.\" \n\n\"Explain?\" I demanded a little too loudly, and Alistair chuckled, shushing me. \n\n\"A simple repellant,\" the mage informed me. \"There's a couple of wards overlapping here that cause nervousness. I'm thinking the whole tunnel is lined with them. It keeps unwanted visitors away - lots of apostates use them to discourage nosy neighbours, or so Anders once told me. I imagine this one was meant to disorient and distract us, rather than keep us away - nervous soldiers soiling their breeches don't fight very effectively.\" \n\n\"Nor do they notice concealed doors,\" Wulf added with a small laugh. \n\nI rubbed my face irritably. \"Wish I'd known that the first time.\" I sighed. \"How far does your cleanse extend?\" I asked Alistair. \n\nHe hummed. \"Maybe forty feet, give or take? I can do it again if needed.\" \n\n\"Alright, well...damn, now I've lost count. Anyhow, we must be close. Follow me.\" \n\nNow far less jumpy, I led the group confidently around another couple of turns when I felt my fingers tingle, and I stopped. \"Here.\" I ran my gloved fingers over the wall, confirming what I remembered of the strange area. I was somehow surprised to see that it didn't even look different than the dirt of the surrounding tunnel; I'd expected, for some reason, that the illusion would be easy to spot in the light. \n\nAlim stepped forward and touched the wall with a frown. \"I don't feel anything.\" He muttered something under his breath, and I sensed his magic flare, but nothing happened. \n\nAlistair touched the wall as well, and then took off his gauntlets and tried again. \"It feels...oily.\" He nodded at me. \"Not enough that I'd have noticed it if I wasn't looking for it.\" \n\nI touched the wall again, screwing up my face against the tingling sensation. \"It's a lot worse than oily for me.\" \n\nAlim scratched at his chin thoughtfully. \"Try the cleanse?\" he suggested. \"It's not a barrier, so I can't do anything about it, but if it's a glyph like the others...\" \n\nAlistair closed his eyes again with a nod, and I jumped slightly as I felt the tingling sensation skitter and change where my fingers rested on the wall. \"Oooh.\" \n\n\"What? Oooh what?\" \n\n\"It's...less strong now. Less annoying.\" I took off my own gauntlets and pressed both hands against the wall. \n\n\"A lot less strong? Or only a little?\" \n\n\"A little. Can you do it again?\" \n\nHe sighed. \"Maybe once or twice. I'll have to try.\" \n\n\"Why don't you do it?\" Alim suggested to me. \"You've got the higher resistance, right?\" \n\n\"I don't know how.\" I flushed, embarrassed to admit it. \"We've never managed enough time to train the basic techniques. I know how to do the things I can do really well, but none of the rest.\" \n\n\"What if we work together?\" Alistair asked. \"Like you showing me how to make shields or hold mana? Maybe if I do it one more time, and we work together, you can learn. It isn't a technique we ever even tried before. It might work.\" \n\nI shrugged helplessly. \"I'll give it a try, if you think I can. It's not like we have much choice - the other alternative is to get killed one at a time as we push through the tunnel. I'd rather not.\" No pressure! \n\n\"Alim, you'd better head back,\" Alistair recommended. \"If we do something wrong...I wouldn't want a mage nearby.\" \n\nThe elf nodded, then took my arcane lamp and trotted back up the tunnel towards Aedan and the others. We waited a few moments for him to be good and far away, and then I turned back to my husband uncertainly. \"What if we can't...?\" \n\n\"We can.\" He seemed absolutely certain. I was less secure in my abilities, and he sounded somewhat tired already. \"Come here.\" \n\nHe held out his arms, and I stepped into them, ignoring our armour as I tried to get as close as I could. He lifted off both of our helmets and pressed a kiss to my forehead, wrapping his arms around me. \n\nWulf cleared his throat and walked a few feet up the tunnel until he hit a curve; close enough to hear, but giving us a bit of privacy. I keep forgetting people here aren't so used to PDA. Alistair squeezed me slightly to get my attention, obviously predicting my wandering mind. \n\n\"It doesn't matter how you hold your arms, your posture, whether your eyes are open or closed. You know that feeling, when you can sense a mage when they're casting?\" I nodded. \"I want you to concentrate on that sensation, and then try to push it away. Even in the air around us there's a little bit of that feeling. Focus on it, and let me know when you're ready to try.\" \n\nI pressed my face to his neck, his comforting smell calming me, and then closed my eyes. I cast my feelings out around me, trying to feel what Alistair was talking about; do all things in Thedas have magic? Or is it like the Force, from Star Wars - little sparks that were in us and all around us? I sighed as I realised I was thinking, not feeling, and tried again. I cleared my mind and felt around me, using the by now rusty skills Alistair had tried to teach me back when he'd been training me to be a templar. \n\nSuddenly I felt...something. Being close to Alistair should have been distracting, but I had achieved my inner calm faster like this, and I could sense something all around us, like a low-pitched noise you could only barely sense at the edge of your hearing. Or maybe I'm imagining it because I want this to work. It didn't matter; we needed to try. \n\nI nodded. Alistair, feeling my movement, whispered softly into my hair, \"Okay, now push it all away. On the count of three, just push the magic away. \n\n\"One, two, three.\" \n\nI shoved, or at least I tried to. It felt like trying to scoop water with a sieve. Everything I tried to push slipped through the holes, resisting my effort, even as I felt some of it flowing past me, receding away from Alistair like a concussion wave. After a moment, when I concentrated, the area we stood in had less of the sensation, and I could feel the distant tsunami weakening the further it got from us. \n\n\"Oh! Oh.\" I hugged Alistair tightly. \"I felt you do it. I did it wrong, though.\" \n\nI explained the feeling of it slipping through my fingers, and he nodded. \"It's like when you swim,\" he explained, his voice sounding slightly fuzzy - like when he was half asleep in bed at night. \"Keep your fingers tightly together. Except these are figurative fingers, inside your mind. Sort of.\" \n\nI giggled, and he huffed. \"You know what I mean.\" \n\n\"Are you okay?\" His huffing might have been a mock complaint, but it hadn't escaped my notice that he was actually slightly out of breath. \n\n\"Just tired,\" he assured me. \"It's like going for a run after being laid up in bed for a while. I haven't been practicing this lately, and I'm out of shape.\" \n\nI reached out to touch the door, confirming that the tingling sensation was weaker again. Not gone, but weaker. \n\n\"Think we can try again? It seems to work better for me when I'm close to you like this.\" \n\n\"Right, so that's the excuse you're going with?\" he teased. \"Cuddle-cleansing wasn't a technique I learned in templar training, I'll have you know.\" \n\nI pinched his earlobe, and he gasped out a laugh. \"Don't make fun of me.\" \n\n\"Perish the thought,\" he chuckled, as he had every time I'd ever accused him of teasing, and I wrinkled my nose at him in mock irritation. He kissed the end of the scrunched-up button, and then pulled me closer again. \"Alright, now, concentrate.\"  \n\nI closed my eyes again, and the sensation came back more quickly this time as I cuddled close. \"Okay.\" \n\n\"One, two three,\" he counted again. \n\nI clenched my jaw and my fists, took a deep breath, and pushed."
    ],
    "authorname": "ElyssaCousland",
    "tags": [
        "fantasy",
        "fanfiction",
        "dragon age",
        "romance",
        "modern girl in thedas"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/there-and-back-again-ch-142"
}
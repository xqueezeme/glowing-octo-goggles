{
    "title": "Futa's Wild Passion Ch. 05",
    "pages": [
        "Futa's Naughty Meeting\n\n\"Let me drive you to college, Jenny,\" my mom said to me the next morning.\n\nI swallowed, my heart clenching. Fear rushed through me. Did Mom figure out that my little sister hadn't been just sleeping in my bed, but that we were naked in the middle of having sex? Mom had come home late the night before, called into her work by her slave-driving boss on a Sunday. At the time, I had woken up and started fucking Allie from behind with my futa-dick.\n\nJust as we were coming, Mom had checked in on us. It was so hard not to scream while my girl-cock was spurting cum into my little sister's twat. The room smelled of hot pussy. I was terrified Mom would realize what we were doing.\n\nShe hadn't at the time, but what if she realized it later.\n\n\"Um, sure,\" I said, icy pumping through my veins. The half-hard erection my new futa-dick had dwindled in my panties. \"Just me.\"\n\n\"Just you,\" she said. Mom didn't normally drive any of us to our college. Now that Allie was eighteen, she started her first year attending Parkland College. We normally took the city bus.\n\n\"Okay,\" I said, giving my little sister a look, arching my eyebrow at her.\n\nShe shrugged as she ate her sugary cereal full of marshmallow-shaped Lucky Charms that slowly dyed her milk a rainbow hue of colors. I had Raisin Bran before me while the twins were both eating Grape Nuts. I swallowed and stirred my spoon through my breakfast, my appetite vanishing.\n\nI finished eating and cleaned out my bowl, my stomach churning. Mom, wearing a beige trench coat, smiled at me. \"Come on, let's go. Ms. Petrov wants me in early.\" My mother swallowed. \"She wants to have a private meeting with me.\"\n\nPoor Mom. Everything I'd heard about her boss, a tyrant of a Russian woman, made me shiver.\n\nI followed Mom out to the car. Since Dad died, she had to be the breadwinner. She'd gotten a degree in computer technology and now run the servers or something for Ms. Petrov. She had to come in for emergencies like yesterday.\n\nI rubbed my hands, my gray skirt swaying about my thighs. It fell to my skirt. I had a pink blouse on, my round breast swelling it. I climbed into Mom's car, crossing my legs. She slipped in a moment later, her trench coat opening in the front to show off a rather short, black skirt. I blinked in surprised as it slid down her thighs.\n\nInstead of pantyhose, she was wearing thigh-high stockings connected to a garter belt.\n\n\"Um, that's fancy,\" I said.\n\nMom blushed and shoved her skirt down her thigh. \"I might, uh, have a date after work.\"\n\n\"Oh, good,\" I said, my dick twitching. My mom was sexy. I remembered that first masturbatory fantasy I had after my cock grew the day before. I had imagined my mother and Reverend Helen August sucking on my girl-dick. I had cum hard.\n\nAllie had shown me that incest was delicious. I tried not to look at my mother's stocking-clad thighs, but...\n\nMy dick throbbed. Becoming a futanari, one of the few in the world, had changed my sexual orientation in a flash. I thought of girls, girls, and more girls now. I breathed in as I forced myself to look away and...\n\nMom had perfume on. It must be a hot date. Good for her. Flashes of her wearing only those thigh-high stockings filled my mind, her blonde, curly hair framing her lush and mature face, her large breasts soft and pillowy, perfect for groping. I imagined juices beading on her pubic hair, wet for me.\n\n\"Oh, I need my big futa-daughter to fuck--\"\n\n\"Are you doing okay?\" Mom asked, bursting my fantasy.\n\n\"What?\" I gasped, my cheeks burning. I couldn't believe I was just thinking that. Right here. My futa-dick was so hard, trapped in my panties. My cock was far bigger than the average guys', and girls' panties weren't cut to handle them. I shifted, trying not to think about anything so my erection would go away.\n\n\"You know, with your condition,\" she said. \"You were pretty upset yesterday, and now...\"\n\n\"Oh, well, I've gotten some perspective,\" I said.\n\n\"Allie and you seemed close,\" Mom added.\n\nMy stomach knotted. \"Yeah, she's been surprisingly supportive. We, uh, were talking and fell asleep together, I guess.\"\n\n\"You two looked so cute together,\" Mom said, smiling. \"I'm glad you're getting along. The two of you fighting all the time, well...\"\n\n\"Yeah, I bet,\" relief surging through me. She didn't know.\n\n\"Are you going to be okay at school?\"\n\nI nodded. \"I think so.\" I leaned back in the chair. \"Pita came over and she didn't freak out when I told her.\" Pita was one of my closest friends. She, Briana, Wendy, Victoria, and Tina were my clique.\n\n\"I'm glad.\"\n\nSilence hung over the car for a moment. I didn't know what else to say. I certainly couldn't admit to having sex with Pita. My mom was a Christian. Reverend Helen, the same woman I'd fantasized about, always railed about the dangers of homosexuality. How such sexual activities would corrupt the soul and lead to greater sins.\n\nTo damnation.\n\n\"So, um.\" Color spread on Mom's cheeks, contrasting with her blonde curls. \"I understand that being futanari might have, well, shifted your sexuality.\"\n\nMy cheeks blazed. They must be as bright as my mom's matching my fiery hair.\n\n\"I understand that futanari tend to like girls.\" She swallowed. \"It's not really homosexuality. I mean, you have a penis now.\"\n\n\"Mom,\" I groaned, my dick throbbing. In my mind, my imagination purred in Mom's voice, \"You have that big dick. Mommy needs a cock. I haven't had anyone since--\"\n\n\"So if you want to be with girls, it's okay,\" Mom continued. \"You can date them and stuff. You know, just have restraint. Be, uh, safe.\"\n\n\"Okay,\" I said. I wasn't safe with Allie. My little sister wanted to be bred by me. It turned her on. She was into incest before we took each other's virginities the day before.\n\n\"So I talked with your dean and explained to Ms. Washington about your condition. She says the college will be discreet. They'll give you whatever support you need.\"\n\nI nodded, squirming. Ahead, the school loomed. I drew in a deep breath. Students who walked to school strolled down the sidewalk while cars streamed into the parking lot. Several city buses dropped off more. Mom turned into the parking lot and headed to the drop-off area before the main building.\n\n\"You have a good day at school,\" she said, leaning over to kiss me on the cheek.\n\nThe scent of her flowery perfume filled my nose. I noticed her blouse, low-cut. I could see down her cleavage, catching a hint of her a lacy bra. My dick throbbed. My mom was a sexy woman. My pussy clenched.\n\n\"It'll be fine,\" she said as she leaned back. \"You don't have anything to be embarrassed. Becoming a futanari isn't your fault.\"\n\nThat wasn't why I was blushing. \"I know. I'll be fine. Love you.\"\n\n\"Love you. Enjoy your day.\"\n\n\"Yeah, you, too.\"\n\nHer face fell. \"I just have to get through work.\"\n\n\"I just have to get through my classes.\"\n\nMom gave me this supportive, conspiratorial smile like we were in this together. She patted my knee right above the hem of my skirt, her hand soft and warm. My futa-dick throbbed. I was turning into such a horny thing. Her hand stroked up my thigh for a moment before she pulled away.\n\nI climbed out of the car, smoothing my skirt. I winced. I had a bulge.\n\n\"Hey, Jenny,\" Pita called, waving her hand. My Hispanic friend had a big grin on her face. She wore a pair of skinny jeans and a pink, baby doll t-shirt that clung to her small breasts. I remembered what those titties looked like, how big her nipples were. She was with two of our friends, Victoria and Wendy.\n\n\"Hey,\" Wendy said. \"You okay. You left church suddenly.\"\n\nThat was when my futa-cock had sprouted.\n\nI headed to my friends. Wendy had her blonde hair gathered in a French braid which gave her a regal look and left her smooth forehead bare. She had a heart-shaped face, her chin narrow, and wore a white blouse that didn't do much to emphasize her breasts. Her skirt fell longer than mine.\n\n\"You okay?\" Wendy asked.\n\n\"Oh, no!\" gasped Victoria, staring at me. She was a brunette with plump lips and curly hair. It spilled around her face. She had breasts as big as mine, her stretchy top, a riot of tied-dyed hues, clinging to her round mounds. \"What's wrong?\"\n\n\"I didn't tell them,\" Pita said as I reached the trio. Her eyes flicked down to my bulge. She licked her lips. Her curly, brown hair framed her tan face.\n\n\"Tell us what?\" Victoria asked. She took my hand when I reached her. \"Did something happen to you, Jenny?\"\n\nWendy stared at me, her eyes wide. She clutched her hands before her like she was about to pray.\n\n\"I, well...\" My cheeks burned. My futa-dick twitched. I was still hard from that glimpse down my mother's blouse and her innocent hand falling on my knee. \"You see... I have a condition. It, um, manifested yesterday.\"\n\n\"What sort of condition?\" asked Wendy. \"Is it serious?\"\n\n\"No, it's...\" My ears burned now. I took in a deep breath. I had to tell them. This wouldn't stay a secret. I had PE later on today. No hiding my cock in a locker room full of girls. \"I came down with Futanari Syndrome.\"\n\nWendy blinked.\n\nVictoria's eyes shot down to my skirt. She gasped, hands clapping over her mouth. \"You have a bulge.\"\n\n\"Yeah,\" I said, my cheeks burning. \"It's, um, quite big. I'm still trying to understand how to deal with it.\"\n\n\"It's so rare,\" Wendy said. \"Are you sure you have it?\"\n\n\"My clitoris turned into a dick,\" I said. \"I'm pretty sure.\"\n\n\"Uh-huh,\" Pita said. \"I saw it. She's a futa.\"\n\n\"Riiiight,\" Victoria said, giving Pita a sly look. Then Victoria glanced back at me. \"And that's not a sock stuffed down the front of your panties, Jenny?\"\n\n\"No,\" I said.\n\n\"Show us,\" Victoria said.\n\nWendy gasped, her cheeks scarlet. She then nodded. \"If you're not... you know, embarrassed.\"\n\n\"I'm not doing it here,\" I said. Victoria's doubt offended me. She was my friend. She should believe me. I wanted to yank up my skirt right here and waggle it in her face for not believing me.\n\nFor accusing Pita and me of playing a prank on them.\n\n\"Bathroom,\" said Pita. \"Let's go. We can get in the handicap stall. Room for all of us. Then you'll see.\"\n\n\"Yep, we'll see,\" Victoria said, arms folded beneath her round breasts.\n\nPita took my hand and pulled me along. She had this big grin on her face. She was eager to show our friends wrong. I'd learned that Pita had a futa fetish when I showed her my girl-dick. She'd sucked my cock clean of my little sister's asshole, not minding one bit.\n\nOf course, Pita thought I was having a secret affair with the MILF who lived next door to me. If anyone found out about Allie and me...\n\nWe swept into the school building, passing beige walls. The girls' restroom came up fast. Pita pushed me in. We swept past a girl on her way out. Another girl named Natalie washed her hands, giving us a glance.\n\n\"Hey,\" she said.\n\nI nodded as the four of us headed to the last stall and piled in. It wasn't too unusual to see girls do this. Sometimes they liked to show off new lingerie to their friends and wanted some amount of privacy.\n\n\"Okay,\" Victoria said when she locked the door behind us. \"Show us.\"\n\n\"I can't believe this is happening,\" Wendy said, her cheeks scarlet. \"Maybe we should just believe her, Victoria.\"\n\n\"No, I want to see this.\"\n\n\"You'll see it,\" I said, glaring at my doubting friend. I pulled up my skirt, my panties bulging with my futa-dick. Before I could pull them down, Pita did the honors.\n\nI groaned as the fabric rubbed across the tip of my girl-dick. Then it sprang out and bobbed before me, thrusting from my fiery bush. Wendy gasped, clapping hands over her mouth. Her eyes almost fell out of her eyes.\n\nVictoria's grin grew. She stared at my cock with hunger in her eyes.\n\nIt hit me then and I blurted out, \"You were faking doubting me? You just wanted to see my cock.\"\n\n\"Guilty,\" purred Victoria. \"Ever since Pita showed me that porno starring the first futa, that chick in Japan, I can't stop thinking about it.\"\n\nPita grinned at me.\n\nI groaned as Victoria fell to her knees before my cock. Pita joined her a moment later. They both grabbed my dick. Wendy shuddered, her blue eyes wide as our two friends stroked me. Precum beaded the tip while juices leaked out of my pussy.\n\n\"Not again,\" I muttered.\n\n\"Your cock is just hot,\" Pita purred. \"Come on, Wendy, get down here and get a good look at a futa-dick. This dwarfs Jeff's prick. My ex had a tiny cock compared to Jenny.\"\n\nWendy blushed and knelt down between Victoria and Pita. Victoria peered at it, her eyes studying it. My cock twitched with my heartbeat. My pussy grew hotter beneath their scrutiny. I could hear the faucet shut off. Footsteps echoed. Girls came in and left. Wendy, too, stared at my cock.\n\n\"That is huge,\" she said. \"Boys aren't that big, right? I mean... How does that fit.\"\n\n\"It fits,\" I muttered.\n\n\"You've already...\" Wendy's eyes widened. \"With who?\"\n\n\"Me,\" Pita said. \"We're sex friends.\"\n\n\"But not fuck buddies,\" I added.\n\nVictoria licked her lips. \"Is it weird that I want to suck your dick?\"\n\nWendy, to my surprise, nodded her head.\n\n\"Um, well...\" My dick throbbed. I felt my three friend's breathe on my cock's crown. The warm currents spilled around it, over it. They caressed my throbbing tip. My pussy clenched as this rush shot through me. \"I guess it's not too weird.\"\n\nI gasped as Victoria grabbed my dick. The brunette leaned in and licked the tip, gathering the precum leaking out. This hot shudder raced down my dick and through my body, my pussy clenching at the sensation.\n\n\"Oh, wow,\" I groaned, my heart pounding.\n\n\"She liked it,\" Wendy said in awe.\n\n\"Boys like it when you suck their cocks,\" said Pita. \"Why would a futa be different?\"\n\n\"I guess not,\" Wendy said. She swallowed, her blue eyes so wide. The flush spread across her heart-shaped face. She almost glowed scarlet. \"I just can't--\"\n\nWendy gasped in shock as Victoria engulfed the tip of my cock and sucked. Her hand tightened on my girth. Wendy shuddered while Pita grinned. Pleasure shot down my shaft. My cunt clenched as my friend loved my dick.\n\nIt felt incredible. This hot heat engulfed it. My cock throbbed and ached. The pleasure surged through me. I licked my lips, trembling from the bliss. It swept through me, my cunt clenching. Juices spilled down my thighs.\n\n\"Oh, damn,\" I groaned. \"That's nice. Um... Wow, you're really sucking on it. Ooh, yes, yes.\"\n\n\"Suck it,\" moaned Pita.\n\nShe kissed at the side of my shaft, her hand sliding up my thigh to cup my bush. Her fingers slid through my fiery hairs to caress my pussy lips. I groaned, my head swaying from side to side. The pleasure raced through me.\n\nPita nibbled up to Victoria's lips. I gasped as Pita's finger caressed my virgin pussy lips. She kissed the side of Victoria's mouth. The brunette moaned and sucked harder. Wendy watched wide-eyed at the naughty sight.\n\nMy pussy clenched as Pita nudged my hymen. I shuddered as she stroked my cherry, my futa-dick throbbing in Victoria's mouth. I groaned, my heart pounding in my chest. The pleasure swept through me with the brunette's every suck.\n\n\"I can't believe this is happening,\" Wendy whimpered.\n\n\"Yeah,\" I panted.\n\n\"It's so hot,\" Pita moaned. \"Ooh, don't hog her girl-dick, Victoria. Wendy and I need to suck it.\"\n\n\"What?\" Wendy gasped, her cheeks scarlet.\n\n\"You did nod your head,\" I groaned, my pussy on fire. Juices leaked out of my twat.\n\nVictoria popped her mouth off my dick with a wet plot. \"You did,\" she purred as Pita engulfed my cock's tip. \"Don't pretend you don't want to love this amazing girl-dick.\"\n\n\"Well...\" Wendy squirmed. \"I mean... it's a big cock and... and...\" She trembled. \"Oh, Lord, this is sinful.\"\n\n\"Uh-huh,\" Victoria moaned, licking her lips. \"So sinful.\"\n\nShe stroked my cock while Pita sucked on it. I shuddered, my Hispanic friend loving my clit-dick and pussy at the same time. The pressure swelled inside of me, that aching need to erupt and spurt my jizz everywhere. A heady rush shot through me. I swallowed and groaned, my breasts jiggling in my blouse and bra.\n\nPita noisily worshiped my cock. I glanced at the stall door. Beyond, I heard some girls chatting by the sink, their voices muffled, indistinct. They were feet away and had no idea I was getting loved by two girls while a third watched.\n\nVictoria kissed down my shaft to my pussy lips. I gasped as her tongue joined Pita's finger. Victoria fluttered her tongue around the folds of my twat, caressing around the base of my dick. Pleasure rippled up to the tip of my futa-cock, feeding my impending orgasm.\n\n\"You're licking her pussy,\" Wendy whimpered. \"That's really a sin.\"\n\n\"A tasty sin,\" groaned Victoria.\n\n\"Uh-huh,\" I panted, remembering the taste of my little sister's twat.\n\nPita's mouth popped off my cock. \"Mmm, your turn, Wendy.\"\n\n\"What?\" Wendy gasped, her eyes wide.\n\nVictoria, still fluttering her tongue around the folds of my pussy and brushing Pita's stroking finger, pushed my cock in Wendy's direction. The innocent blonde shuddered. She whimpered, trembling.\n\n\"Lord... I... I... I'm so sorry!\" Her head darted forward, blue eyes squeezing shut. Her lips slid over my cock's crown. I gasped as her mouth engulfed the tip.\n\nShe sucked.\n\n\"Wendy!\" I gasped, my virgin cunt twitching. This pleasure rushed through me. This hot delight that sent blood pumping hot and wild through my veins. \"Yes!\"\n\n\"Not so loud,\" purred Pita. She nuzzled up against Wendy, Pit's golden-brown cheek meeting Wendy's flushed face. \"Mmm, just love her. She'll give you such a wonderful treat. A salty delight that you're going to love swallowing.\"\n\nWendy whimpered around my cock's tip.\n\nShe sucked on it, but gently. I shuddered, my cunt clenching beneath the delight. This was so wicked. Victoria took another lick at my pussy then she pulled her head back. She nuzzled into the other side of Wendy.\n\n\"Mmm, just make her explode with that sexy mouth of yours,\" she purred. \"She's eager for it.\"\n\nI nodded.\n\n\"She's getting so wet,\" added Pita, her fingers caressing my labia. The bliss surged up to the tip of my cock, making me shudder. \"You're going to make her explode.\"\n\n\"Your first blowjob,\" Victoria moaned. \"Isn't it hot? You're going to make Jenny so happy.\"\n\n\"You're her sex friend now.\" Pita licked Wendy's ear. \"Hot, right?\"\n\nWendy whimpered. Her blue eyes opened, staring up at me with such awe on her innocent features. I groaned, my cunt clenching. The pressure built and built so fast. It screamed towards the tip of my cock. My heart thundered in my chest.\n\nI couldn't hold out long. Not with her wonderful mouth sucking at my dick. She nursed on it. That pressure swelled through me. I groaned, my heart pounding heat through my veins. This wicked heat surged through my body.\n\n\"Wendy!\" I whimpered. \"Oh, god, Wendy.\" I wanted to cry out louder, but we could get caught. I had to be quiet, but... but... \"Wendy!\"\n\n\"You hear that?\" purred Pita. \"You're making her feel so good, Wendy.\" Pita licked Wendy's ear.\n\nThe blonde shuddered and groaned around my dick. She sucked harder, her cheeks hollowing. Her blue eyes stared up at me, shining with her awakening passion. Victoria's hand stroked faster on my futa-dick. Pita rubbed my pussy with more pressure. Wendy's tongue caressed my spongy crown.\n\n\"You're going to make her cum,\" Victoria whispered. \"Yes, yes, you are, Wendy.\" Victoria nibbled on Wendy's ear.\n\n\"Do it!\" Pita moaned.\n\n\"Yes!\" I gasped, my ovaries tightening.\n\nMy pussy convulsed as the cum rushed up to my cock. It spurted into Wendy's mouth while sending a powerful blast of rapture through my body. Wendy's eyes bulged. She ripped her head back, gasping out in shock.\n\nMy cum exploded across her face. I painted Wendy's flushed cheeks with my jizz. More landed on Pita's and Victoria's features as they nuzzled up against the blonde. I groaned, my pussy spasming, juices gushing out of me.",
        "\"Jenny!\" Wendy gasped as I bathed my three friends' faces.\n\n\"Sorry,\" I groaned, the dual pleasure shooting through me as more and more jizz pumped out of me.\n\nRapture flowed from my cunt. Ecstasy fired from my girl-dick. The wonderful delights slammed into my mind. The pleasure had me dizzy. I shook my head, swaying. It was wonderful. Amazing. This was a bliss that had my mind reeling.\n\nI groaned, my breasts rising and falling. The heat pumped through my veins. I licked my lips, struggling to gather my thoughts. I fired out a final blast of cum while Pita and Victoria lapped up the spunk on Wendy's cheeks.\n\n\"Oh, my god,\" I panted.\n\n\"You...\" Wendy trembled. \"You came so much.\"\n\n\"She did,\" moaned Pita. \"Ooh, its good and...\" The warning bell rang.\n\n\"Shit,\" Victoria moaned. I rarely heard her curse. \"We have to get to class.\"\n\n\"We're covered in spunk,\" Wendy whimpered.\n\nPita took a long lick up her cheek. \"Mmm, there's a little left.\"\n\nWendy shuddered. She licked her lips, gathering up more of the pearly spunk. She pulled her tongue into her mouth. \"I'm sorry I panicked and got us all messy. It shocked me when she erupted. I thought it would taste bad.\"\n\n\"It tastes amazing,\" moaned Victoria. A look of frustration crossed her face and then she stood up. \"Come on, we have to get cleaned up.\"\n\n\"Yeah, we can't get caught,\" Pita said.\n\nWendy gasped in realization.\n\nI shoved my soft cock back into my panties. We had five minutes to clean up and get to our classes. Pita opened the door and peered out, my cum running down to her neck. She nodded and darted to the sink. She turned on the nearest one and splashed water on her face. The rest of us followed.\n\nI didn't have any cum on my features, but I did have a sweaty face. I pulled out my makeup kit from my backpack. All of us were hurrying, touching up lipstick and our foundation, mopping up sweat and water from our faces. We didn't have much time.\n\nWe bolted out of there a minute later, all of us scattering to head towards our classes. Mine was math. I hated it. But it was also on the other end of the college. I was practically running, my backpack bouncing on my shoulders. I parted with Wendy as she darted up a set of stairs we passed.\n\nI was alone. I rounded the corner, my math class at the end. A few stragglers grinned at me before heading to their classes. We'd all been there. My legs stretched out, my skirt rustling about my thighs. My breasts bounced and my futa-cock shifted.\n\nI was almost to my class, feeling the impending bell sounding that would mean I was tardy, when out stepped Dean Washington. I squeaked as I slid to a stop before colliding with her. I breathed heavily as the Black woman arched an eyebrow at me.\n\nThe tardy bell rang.\n\n\"Dean... Washing... ton...\" I panted, struggling to catch my breath. She couldn't know what just happened. \"I... I...\"\n\n\"We're almost late to class,\" she said with some amusement. She was a tall woman, wearing a flowery blouse that was unbuttoned to show off some of her ebony cleavage, a golden cross dangling down into the valley of her tits. The chain vanished beneath the decorative scarf she wore tied around her neck.\n\n\"Sorry,\" I said. \"It's been... an interesting morning.\" I was catching my breath, my heart slowing down.\n\nHer eyes flicked down. \"I bet. Follow me.\"\n\nI swallowed as she whirled around. I would have been on time if she hadn't stepped out of the classroom. My shoulders hunched as I hurried after her. She wore a dark pencil skirt, dark nylons vanishing beneath it. Her shoes were black flats, something comfortable to wear all day.\n\nI swallowed as I noticed the curves to her rump. Was this what it was like for a boy? To get turned on by every woman they spotted. Did the sight of curvy rump, a nice pair of tits, or legs clad in nylons send a tingle racing to their cocks every time?\n\nNo wonder they were so horny.\n\nMy cheeks burned as I tried not to stare at her curving rump. My pussy had that hot itch. I just came, but I'd learned that I had stamina with my futa-dick. My cheeks burned as she led me to the college's main office.\n\nMiss Larson, the secretary, looked up from her desk, her blue eyes landing on me behind her glasses. She had her blonde hair pulled back in a bun though her face had a youthful cast to it. Her plump lips pursed in speculation as I followed the dean on past the reception desk to a small hallway.\n\nIt led to a door. I hadn't been called to the dean's office ever.\n\nHow did she know what we did in the bathroom? Did someone hear us? Did Natalie realize what we were doing in there and hurry to Dean Washington to report us? My stomach squirmed. Mom would be pissed.\n\nShe said I could date girls, not screw them in the bathroom.\n\nDean Washington sat on the corner of her desk and smiled at me. It wasn't full of anger and the tension in my chest relaxed. \"I spoke to your mother about your condition, and I just want you to know the college will give you any special consideration that you need.\"\n\n\"Oh,\" I said, smiling. \"Thank you.\"\n\n\"So, you can use the restroom that you are most comfortable with. If that's embarrassing for you, the faculty restroom can be opened up to you. It's single occupancy.\"\n\n\"Oh, uh, the girl's restroom is fine,\" I said, blushing as I remembered the fun I had. \"I, um, still have my urethra in its normal spot so I don't need a urinal or anything.\"\n\n\"Oh, well, you don't have to tell such intimate information, but...\" the dean smiled at me, her eyes gleaming, \"I'm free to hear about any problems you might have.\"\n\n\"Well, thanks,\" I said.\n\n\"And for PE, you can use the coach's private locker room for changing and showering,\" she said. \"Coach Clarkson will give you privacy, of course, so you don't have to worry about anyone seeing your, uh, cock.\"\n\nMy cheeks burned more, my futa-dick twitching in my panties. \"Thank you. I, uh, think that will be best. It might be a... distraction.\"\n\nDean Washington arched an eyebrow. She slipped off her desk, her breasts almost right before my eyes. They were large and looked so fetching with her gold cross nestled in her ebony cleavage. It was such an arresting sight.\n\n\"You like that?\" she asked.\n\nMy cheeks burned. \"I was just admiring your cross. You must go to church.\"\n\n\"Proud member of Holy Gospel Revival,\" she said. \"Know it?\"\n\n\"The, uh, Black church,\" I said, blushing. \"I'm sorry, that didn't come out right.\"\n\n\"No, no, that's what it is.\" She took a step closer. \"But that's not what you're looking at. I always have an eye out for students like you.\"\n\n\"Futas?\" I asked.\n\nHer hands grasped my shoulders. \"Girls who like girls. I've had my eye on you for a while, Jenny, hoping you would blossom. I do love redheads, and now... You having that clit-dick makes this hotter.\"\n\nWas she claiming she was a lesbian who seduced students? I glanced up at her and gasped as she kissed me hard.\n\nI couldn't believe this was happening. This dizzying wave shot through me as she pushed me backward until she pressed me into the wall. The teacher's tongue thrust into my mouth. Her large tits rubbing into my chest, pressing on the top slopes of my own breasts. My futa-dick went hard in her panties.\n\nIt hurt.\n\nMy body responded to the teacher's kisses. I shuddered as the heat burst to life in my pussy. My cunt grew molten, my juices flowing out. They soaked my crotch. Her hands slid down my body as she kept me pinned to the wall by those boobs. Her touch went lower and lower. She reached my skirt.\n\nHiked it up.\n\nI groaned as her hands darted up my skirt. She slid up my thighs. The dean kissed me with hunger. Her tongue danced in my mouth. I couldn't believe this was happening. Were futas really this hot?\n\nMy twin sisters didn't pounce on me. Neither did Mom, but maybe... Maybe it was lesbians who liked futas. Me. My mom wasn't gay and Allie's spying on Tara and Sara proved they weren't having an incestuous, lesbian love affair.\n\nI manage to break the kiss, turning my head to the side. \"Dean Washington! This isn't appro--\" I squealed as she found my hard dick, squeezing me through my panties. \"This isn't appropriate! I'm your student!\"\n\n\"Mmm, you're just so sexy. Nineteen. My favorite age. Just budding into your sexuality, ready to be guided.\" She pulled back from me. \"I specialize in molding girls your age. I have a special club. I think you're perfect for it, if...\"\n\nShe grabbed her skirt and hiked them up, drawing the hem up her stockings. I groaned when they were revealed to be thigh-highs. Flashes of my mother's ivory thighs clad in similar nylons burned through my mind. My futa-dick throbbed. Dean Washington's skirt went higher and higher until she unveiled her crotch.\n\n\"Where are your panties?\" I gasped as she sank down on the edge of her desk.\n\n\"Mmm, if you want to join my special club, come here and lick my pussy. Eat me out. I don't normally move this fast, but you have that cock. It's said to make futas horny.\" She shuddered. \"Are you horny? Do you want to eat my pussy?\"\n\nI couldn't help the involuntary flick of my tongue across my lips.\n\n\"Yes, you are,\" she purred, running a finger up her shaved folds. She had thick pussy lips, her pink peeking out between her darker, outer folds. I shuddered. \"Just come here and lick, then you'll get to meet the club. Find other girls who will love your girl-dick.\"\n\nI already had that, but...\n\nI stumbled towards her in a trance. That pussy was so beautiful. A mature pussy, not one belonging to a girl, but a woman. My virgin twat clenched. My tongue flicked across my lips as I reached the Black woman.\n\nI placed my ivory hands on her knees and sank to the ground before her. She groaned as I leaned in and nuzzled into her dark folds. Her tangy musk filled my nose. It was such a heady scent, stronger than Allie's or Pita's twats.\n\nEven my own.\n\nIt was the scent of a mature pussy. Did Mom's or Reverend August's taste as strong?\n\nI licked at the dean's twat. She gasped, her large tits heaving over her head. She leaned back on her desk, her moans echoing through the room as I feasted on her. Her stocking-clad legs slid over my shoulders as she squeezed her thighs around my face, trapping me in place.\n\nNot that I wanted to leave. I could stay here forever.\n\nMy tongue penetrated her twat. I fluttered up and down her slit, teasing her. Caressing her. She shuddered, her large breasts jiggling, wanting to escape her blouse. Her scarf rustled about her throat, and her crucifix's chain rustled. Her tangy juices coated my tongue.\n\nThick and wonderful.\n\nI licked through her folds. I feasted on her, teased her. Loved her. She tasted incredible. A delight to love. My tongue darted through her thick folds. I fluttered up and down as I worshiped her. I groaned, her juices spilling over me.\n\n\"This isn't the first pussy you've eaten,\" she gasped. \"Ooh, did you eat cunt before your change? Or since it?\"\n\n\"Since,\" I whimpered.\n\n\"Mmm, wonderful,\" she gasped. \"You have enthusiasm for it. You're going to be a world-class pussy licker. Oh, with my tutelage and the club, you're going to be swimming in so much cunt. Especially coed cunt.\"\n\n\"You're favorite?\" I asked.\n\n\"Yes!\" she gasped. \"Ooh, yes, yes, I'm so excited. You're a futa. You have a clit-dick. Oh, Jenny, yes, yes, eat me.\"\n\nShe didn't care about being quiet. She let her passions echo through her office as I feasted on her. My tongue darted through her folds, gathering up her juices. I brushed her clit. She bucked. I flicked and fluttered against it.\n\nMy futa-dick throbbed in my panties. As I feasted on her, I reached down and hiked my skirt. I pushed and rolled and shoved my underwear down as I devoured her cunt. I thrust my tongue deep into the dean's tangy twat as I pulled out my futa-dick.\n\nI moaned in relief at freeing my shaft\n\nMy tongue swirled around in her pussy. I danced through her folds, loving the fact I was pleasing her. It was the best. This wicked sensation surged through me. I groaned, my head shaking from side to side as all these naughty sensations surged through me. I couldn't believe this was happening. It was wild.\n\nI was eating out the dean. She was violating the rules. The law!\n\n\"Jenny, yes!\" she gasped, her thighs squeezing around me. My tongue marinated in her mature pussy. \"Oh, that's it, you wonderful child. Ooh, I'm going to... to...\"\n\nHer body shook. Tangy juices flooded out of her. It bathed over my mouth. It coated my lips and chin. I gasped and lapped up her strong flavor. That wonderful, heady delight had my futa-dick throbbing. I feasted on the Black woman, lapping at her pink flesh.\n\n\"You're just perfect, Jenny!\" she howled. \"Oh, yes, yes, you're just amazing. Wonderful. Ooh, keep licking me. Just like that!\"\n\nI lapped at her. Feasted on her. She shuddered, her tits heaving. The tails of her decorative scarf fluttered. I grabbed my futa-dick and stroked it as my tongue plunged into her twat. I experienced her convulsing flesh, the proof of her climax.\n\n\"I have to fuck you,\" she moaned. Her thighs relaxed on the sides of my face, not holding me tight. Her juice still poured out. She was still cumming. \"Stand up! I need to ride that big, White futa-dick! I haven't had a cock in a decade! I want yours! Your girl-cock!\"\n\n\"Yes, Dean Washington!\" I moaned and stood up.\n\nMy futa-dick bobbed before me, my skirt bunched around my waist, my panties around my knees. Dean Washington slipped off her desk and grabbed my shoulders. I gasped as she whirled me around and pressed back into the desk. I sat down it, my skirt a tangled mess beneath my rump.\n\nShe mounted me, thrusting her large tits into my face as she reached beneath her skirt to grab my dick. I moaned, nuzzling into her cleavage. I brushed her gold cross, kissing the symbol of our faith, as she brought the tip of my cock to her mature pussy. I felt her thick lips, not the tight slit of my little sister or Pita, against my dick.\n\nWhat would it be like to have sex with other adults? Reverend August, my teacher Mrs. Greene, my neighbor Mrs. Carter, and even my mother.\n\n\"Dean Washington!\" I gasped as her hot cunt slammed down my dick.\n\nThe lesbian's pussy gripped me. I leaned back on my elbows, my breasts rising and falling in my blouse and bra. Our clothes rustled as she shifted on me. She'd taken every inch of me. I groaned, loving the feel of her wrapped about my shaft. It was incredible. I whimpered, my futa-dick throbbing in her cunt.\n\nShe slid her pussy up my cock, this look of joy crossing her face. Her back arched. Her hands cupped her tits through her blouse, gold cross flashing between her ebony breasts. My futa-dick throbbed, squeezing in her cunt. Her silky flesh massaged me. She wasn't as tight as Allie or Pita, but she still felt incredible.\n\nHer pussy slammed down my dick. She engulfed me to the hilt. I shuddered, my head swaying from side to side. This was incredible. My cock drank in the delight. I squirmed, knocking over a pencil cup. The contents rattled across the desk as the sexy woman rode me.\n\nHer ebony face twisted with rapture as she groaned, \"Oh, Jenny, yes, yes, the club is going to love you. This is better than a strap-on! A real cock attached to a hot girl!\"\n\n\"Yes, yes!\" I moaned, my head tossing back and forth. This was insane. I loved it.\n\nMy pussy clenched as she slid her twat up my dick, squeezing the entire way. The friction was incredible. It melted through me. It had my head shaking from side to side. This wonderful delight to experience. I groaned, my cunt drinking in the pleasure of her snatch.\n\nEverything she did built and built that wonderful ache at the tip of my futa-dick. I don't know why I ever freaked out about having a cock. It was the best. Incredible. I smiled at the sexy, Black woman riding my big shaft.\n\n\"Yeah, you love my cunt, don't you,\" she purred. \"Mmm, just enjoying some brown sugar. Yeah, you White girls love Black pussy.\"\n\n\"And you love White futa-cock!\" I moaned.\n\n\"Ooh, look at you,\" she said, her hands squeezing my round tits through my blouse and bra. \"Being bold. I love it.\"\n\nI shuddered, her fingers massaging my nipples through my blouse and bra. I groaned, the pleasure surging through me. It was incredible. I whimpered, my head shaking from side to side as the bliss rippled through my body.\n\nMy cunt grew hotter and hotter as she worked her pussy up and down my shaft. Her cross bounced in her cleavage. Her breasts heaved. Her face twisted. She wiggled her hips, her pussy massaging my futa-dick.\n\n\"I'm going to cum in you!\" I moaned. \"May I?\"\n\n\"Oh, yes!\" gasped the dean. \"You really ejaculate.\"\n\n\"Uh-huh!\" I moaned.\n\nShe leaned over me. \"Who have you fucked? One of your friends?\"\n\nI nodded, the pleasure racing through me. That was a safe lie. \"We're sex friends now.\"\n\n\"Mmm, just sharing some skinship, huh?\" she asked, her pussy squeezing around me. \"Hot! Who is she? Should she join the club?\"\n\n\"Maybe,\" I groaned, my body shaking. \"Oh, Dean Washington, I can't take much more.\"\n\nShe squeezed her pussy as she sank down my cock. The silky friction made my dick's tip feel amazing. I gasped. The pressure in my twat swelled. My ovaries quivered. I came closer and closer to that explosive release. To firing my futa-cum into her pussy. To flooding her with blast after wonderful blast of my jizz.\n\nI trembled on my elbows. Her fingers massaged my nipples through my blouse and bra. Those tingles added to the mighty delight building in me. Those last few drops raining on my impending climax were enough to let the floodwaters crest the dam.\n\nI came.\n\n\"Dean Washington!\" I howled as I exploded.\n\nMy cum fired out of my dick. Hot jizz pulsed out of me and flooded her twat. She gasped and slammed down me. Her pussy engulfed my cock to the hilt as the pleasure surged through me. Bliss fired from my shaft and washed out of my cunt.\n\n\"Yes, Jenny!\" she moaned and joined me.\n\nHer mature pussy writhed around my cock. She darted her head down and kissed me as her cunt massaged my futa-dick. My girl-cum spurted over and over in her, my own snatch convulsing. Juices gushed out, bathing my thighs as I trembled through my pleasure.\n\nHer tongue danced with mine. I whimpered as we shared this wonderful moment. I bucked and trembled, the rapture and ecstasy carrying me to such wicked and wonderful heights of bliss. I screamed through them, hitting the dizzying edges of euphoria.\n\nThen I crashed back down.\n\nI panted as her pussy milked out the last of my cum. I stared up at her as she shuddered, a big smile on her plump lips. She trembled and then she climbed off of me. I gasped as her pussy popped off my dick. My softening shaft smacked into my bunched up skirt.\n\n\"Mmm, yes, you are perfect for the club,\" she said. She walked around her desk while I panted, coming off my orgasmic high. She opened a drawer. I heard something rattle. \"Here is the key to the faculty restroom. Use it to clean yourself up then return to class.\"\n\n\"Yes, Dean Washington,\" I panted, taking the key from her.\n\nAfter I adjusted my clothing, I left her working at her computer. I shuddered at the naughty delights that just happened. I staggered out into the hallway, her pussy juices staining my face. The tangy scent filled my nose.\n\nAs I passed Miss Larson, the secretary said, \"Enjoy your class.\"\n\n\"Thanks,\" I said.\n\n\"I can't wait for the club meeting.\"\n\nI shivered at the heat in her words. I had no idea there was anything like this going on at my college. This day was getting crazy, and my first class wasn't even over. What else was going to happen to me?\n\nTo be continued..."
    ],
    "authorname": "mypenname3000",
    "tags": [
        "teacher",
        "student",
        "college",
        "futanari",
        "hermaphrodite",
        "incest"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/futas-wild-passion-ch-05"
}
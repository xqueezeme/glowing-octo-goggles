{
    "title": "Ducky the Demon Hunter!",
    "pages": [
        " WARNING! Contains satirical themes of religion. Some references will be lost if you have never listened to Led Zeppelin's song \"Stairway to Heaven.\" Thank you!\n\n*\n\nChapter 1: Stairway to Heaven\n\nThe soft sounds of guitar strumming and wooden flutes invaded her mind. Stairway to Heaven, that was the name of the song. It played vibrantly as she watched the black shadows that tried to flee from her. She could hear the curses, foreign and English in grating hissed voices. She was closing in. There were three, a red flame demon and two blue lesser flame minions slightly behind. \n\nShe licked her lips, anticipation zipping through her veins. She couldn't wait. She was herding them toward the pier. It was a commonly known fact that sweet little flame demons could not swim. She sped up and jumped down from the building rooftop as the demons stopped short, seeing the dead end. They blanched at the black ominous water and turned only to see her blocking them in her sinuous crouch. She lifted her head and gave them a sweet smile. The beam of a single lamppost kept them from the darkness.\n\nGlorious, the red flame demon was glorious. \n\nHe was naked as most demons were when in their true form. His cherry colored body was molded like a Greek statue. His arms and thick thighs were corded with sinewy muscle. Thick black hair that shone with red and metallic accents stood unruly at the top of his head. And most importantly, his penis was red, thick with an orange head and angry pulsing veins, rigidly erect. It was not because of his arousal, but because most flame demons never went flaccid. The creatures were naturally excitable and temperamental, so their dicks were always \"enflamed.\" \n\nDucky giggled at her inward musings and slid up from her crouch. \n\nThe demons looked at her with a measure of anger and fear. They would never have expected this to be the one chasing them. They had sensed a demon hunter of considerable power. She stood before them in all black wearing a cross between a nun's habit, a shinobi shozoko, and a boy Lolita. Her long black combat boots had black garters that led to a puff pair of black bloomer styled shorts. Long tattered bandages peaked out of her boots and wrapped around her arms, even under her fingerless gloves. If they had looked on closer they could have seen the kunoichi top she wore that hung to her generous curves. She topped it all off with her cloak, the nun's band and collar were white, glowing eerily in the darkness.\n\nThe red flame demon growled at her. Fire spewing from his mouth illuminated his face horribly for just a second. \n\n\"Harlot wench! What is thine purpose?\" \n\nDucky braced her guns by her hips and gave them a cheesy smile as she stretched onto her toes. \n\n\"If there's a bustle in your hedgerow, don't be alarmed now.\"\n\nThey looked at her with a measure of confusion and horror.\n\n\"Speak plain witch, dost thee tarry? Test not mine mercy.\"\n\nDucky tilted her head and pouted before she smiled at the blue demon to his left. \n\n\"It's just a spring clean for the May queen.\"\n\nIt was a flash even to their eyes. She had closed in so quickly. One minute she was yards away speaking in riddles, the next she was under Xxkuvjkl's chin with her gun. She grinned at him before a loud shot resounded. Twenty-two years of demons usually gave a gal the upper hand. He burst into flames and fell to his knees as she turned fluidly to the next blue demon. He shrieked, like a banshee running from her.\n\n\"Mercy! Ple...\"\n\nShe shot again, right between his eyes. He looked at her in shock and she shot him again as he charred and flaked into nothingness. The red demon stood on his hackles and let out a monstrous roar. \n\nOh boy, someone's going to have a headache tomorrow. \n\nArching his back in fury, he wretched forward as he blindly charged at her. She jumped up just as he reached the place where she had been. Falling behind him she reached back and put him in a headlock. Using her landing momentum she tossed him over her shoulder and flat onto his face. He groaned, red blood pouring from his temple and lifted only to feel his head tap against the barrel of her gun. He waited for her to kill him but she was unnervingly quiet. Looking up he saw she was amused.\n\n\"Why dost thou tarry?\" he growled. \"Be done!\"\n\nShe giggled bending down beside him. \"Your head is humming and it won't go.\" \n\nWith surprising ease she flipped him over onto his back. \"In case you don't know.\"\n\nThe naturally angry demon had become even angrier, the ground beneath him burning, yet none touching the smiling woman. \n\n\"Thine mouth ist a den for liars! Thee speak no truths with thine cryptic lies!\"\n\nThe girl sighed heavily as though he was scolding her. \"You're right, I'm sorry. It's just...I love that song!\"\n\nHe watched her unable to hide the disgust and unsettlement he felt. She cocked her head quizzically. \n\n\"You know, Stairway to Heaven? Led Zeppelin? Eight minutes of pure awesome?\"\n\nHe looked at her blankly. Obviously she had been harmed as a child. \n\n\"Why, dropped maiden wouldst heaven durst interest me?\"\n\nShe huffed seemingly disappointed. \"You mean I've been making well timed references all to myself? And you gave me the best pauses too! I thought we were playing a game!\"\n\nHe started as she leaned her body over his, her lip quivering.\n\n\"I thought we were in this together.\"\n\nHis eyes widened as her thigh brushed his manhood and his fire roared again, the heat tossing her away. He lifted to stand but found he could not. He was in a keeper's circle. She had him trapped and he found he could not even move his fingers. She positioned herself to sit cross legged as he blazed himself into a tantrum cursing her and all the high heavens. \n\nShe watched his dick with eagerness, loving how it twitched and seemed to harden even more the angrier he got. He tired himself out pretty soon and looked back at her to see her watching him intently. When he realized where her attention laid he gritted his razor sharp teeth, making the noise of nails going across a chalk board. \n\n\"That's really rude,\" she protested covering her ears. \"Now I'm definitely going to have a headache you jerkface!\" \"Consider thineself lucky witch! If ever wast I to enter thine service, torture would await thee.\"\n\nHis red eyes glinted as he gave her his own twisted version of a grin. \"I'd lie in wait for thine demise. I'd bind thee with barbs and torture thee, ripping screams from thine bloodied lips.\"\n\nShe rolled her eyes, pretending to yawn. \"Nothing I haven't heard before my predictable love.\"\n\nHe gritted his teeth again in response as flames began to course around him. He flew into another rage, the heat actually causing Ducky to shield her face. \n\n\"I'D RIP THINE TENDEREST FLESH! THEE WOULD BEG FOR DEATH! RAPE WOULD BE THINE ANSWER! JUST AS TWAS THE RAPE OF THE OTHERS! RAPING THINE BODY AND SOUL UNTIL THEE ART BUT A SOULLESS SHELL!\" \n\nAfter his rant he went out like he had been doused by water, the last of his flame wasted by his anger. He heard a silence then a series of jingles, before something hit the ground. Looking up he saw the woman had taken off her belt. With it were a series of weapons he wished to not look upon. Before he could speak she straddled him, her hips right above the nest of his sex. He sniffed and froze as the smell of lust permeated the air.\n\n\"Yeah?\" she asked huskily. \"You'd rape me?\"\n\nShe lowered her upper body to his, one gun still in her hand. He could feel her hardened nipples through her blouse. \n\n\"You'd fuck me with that big rugged cock?\"\n\nHe felt her tongue trace his ear before she gently nibbled on the earlobe. An involuntary shiver went straight to his groin. He shook his head angrily. It was a ploy. He was alive so she obviously wished to bind him. She was luring him in with her sex.\n\n\"I do not fear thee witch! Thou canst not bend me to thy will! \n\nShe ground against him like a dog in heat, ignoring his muffled protests. She could feel herself growing wet, and like usual she was wearing no panties. \n\n\"You're so warm,\" she moaned snuggling into his chest. \"You feel so good, you're making me wet.\"\n\nHe looked down at the girl unable to fight off his demonic pride in able to entice even a demon hunter. \n\n\"I am a fire demon. The pleasures I have thee surely could not imagine!\"\n\nShe chuckled and traced a hand down the contours of his chest. Dark maroon nipples started to harden under her scrutiny and she licked one. He raised his hips upward, somehow able to do that simple motion and the wave of his body gave her chills. She leaned back and tossed off her cloak. \n\nThere the demon saw she had a fine form. Well shaped full breasts, a thin waist, and thick strong hips. Her darkened eyes shone with lust and she licked her full lips like she was hungry. Despite himself he was quite pleased with her. Perhaps if he pleasured her enough he could make her his thrall slave. Then after a few fucks, he could kill her.\n\n\"Dost thee seek pleasure from me witch?\"\n\nShe smiled unzipping a zipper that was conveniently located between her legs. She spread the open folds he saw it revealed her unprotected pussy. It was already sopping wet and he felt the urges inside him stir. \n\nHis voice was raspy and deeper than before as he spoke. \"Come hither witch. To mine mouth. I shalt give thee thine pleasure.\"\n\nShe could see that he was acting on instinct, his thoughts on freedom secondary to his thoughts of lust but it probably wasn't smart to put those teeth near her puss. \n\n\"Witch?\"\n\nFuck it, she wasn't that smart anyway. \n\nShe hooked the fabric of her shorts into her garters so that the insides of her thighs were also visible. Slowly, gun in her hand she sauntered over. She though briefly of making him suck her gun for sport but decided against it. That was for another depraved day. \n\n\"Bite me and I will sever your ties to your forefathers,\" she said breathlessly. \"Then I'll let your ancestors kill you.\" To a demon such a fate would be worse than death. They would die and go nowhere, vanishing into the nothingness.\n\nHe looked at her with a bit of alarm but as her groin neared his face his lust took dominance. She raised herself above him on her hands and cried out when his tongue stretched up to drag along her slit. It was reptilian, tapered like a snake and bumpy like a dog's. He dragged the ridges against her clit and she arched and bit her lip. \n\nUnderneath her the fire demon smirked in glee. She was so wanton, so easy. He doubted he'd need to do much more to enslave her. He slid his thick wiggling tongue into her pink moist warmth and she clenched down moaning. His undulating tongue bounced against the walls of her pussy, stretching into her G-spot and making her whimper with delight. She reached and squeezed one of her nipples. Looking down at him with glazed over eyes she saw his eyes narrow and felt his low rumble inside her. The feel of his growl inside her was her undoing. \n\nShe shouted as the pleasure racked her and she felt forward fully in reach of his mouth and he sucked her sensitive clit. She shook and gasped until she could take no more. Jumping up she positioned his cock under her slit. It pulsed and throbbed in her hands. Bending over his waist she slowly began lowering herself on him. Just the head of his hot steaming cock nearly made her cum again but she restrained herself as she filled herself inch by inch with his meat. \n\nThe red demon's eyes were slits as he watched the female impale herself on his massive shaft. She continued to lower herself seemingly with no intention of stopping. \n\nSurely she wasn't...yes, she was going to take him in, all of him. \n\nWhen she finally bottomed out the loud squelching of her juices slipped over his tight orange balls. \n\n\"Yes...yes...Fuck yes!\" \n\nShe was so full. Her pussy quivered around him like it was trying to escape, or maybe speak. \n\nWhat's that pussy? You want more? Of course darling, eat up! \n\nShe rubbed her hips against hot thighs as she accustomed herself to his size.\n\n\"So tight female...\" he rumbled. \n\nShe panted as she lifted herself up off of him until just the orange head remained in her. Then she dropped her hips.\n\n\"Female...\" she lifted again, \"Witch...\" she dropped, \"Harlot.\" She grinned at him as she developed a slow steady rhythm. \"You and all these pet names.\"\n\nHe rumbled in satisfaction and began to lift his hips to meet her thrusts. \n\n\"Yes...thee shalt be mine pet. I will delight in thine depravity, and stretch thee so no other creature might find pleasure in thine loosened folds.\"\n\nShe giggled and moaned reaching up to rub a breast. All these demons had this really strange obsession with stretch a girl's who ha until it was loose and flappy. \n\nFricken weird really. \n\n\"You won't be the first to try.\" She purred, running her teeth along her plump lip. He ached to touch her when he realized he was still trapped.\n\n\"Free me pet. Unimaginable pleasure shall be yours.\"\n\nShe increased her pace as she felt the member inside her twitch and burn inside her. Steam started to rise between them as his heat and her wetness collided. She thought about making a pun about steamy sex but controlled herself. \n\n\"Pet....Pet! Obey me. I am master of...\"\n\nShe opened one eye to look down at him. \"Oh yeah that reminds me.\" \n\nHis eyes widened as the barrel of her gun lined underneath his chin. She had closed her eyes and was shivering as she thrust into him.\n\n\"You...said...you'd rape me.\" \n\nHe watched as she smirked, her ample ass smacking harder into his hips. He could feel his balls tightening and he growled. She shrieked as his hips jerked up harder at her and her tongue stretched out of her mouth as she panted.\n\n\"God you're delicious!\" She moaned and clicked the safety off her gun.\n\nHis lust and self preservation battled as he tried to still his hips but found that he could not. His first instinct had won. Looking into her crazed eyes, he knew that was her plan all along.\n\n\"No witch! I canst give thee more! I shalt be thine slave. Mercy!\"\n\n\"I'm sorry,\" she said unapologetically. \"You turned me on, but I just don't like rapists.\" Her smile was merciless and cruel. \"It's not hot fun if ya don't want it ya know.\"\n\nThen she dug the fingers of her free hand into his hair and rode him through his roars. She could feel her destructive orgasm crowning and his bouncing hips bucked her like a bull. She threw her head back and screamed incoherently until she began to moan lyrics. \n\n\"If there's a bustle in your hedgerow, don't be alarmed now...\" He watched as her trigger finger twitched.\n\n\"Stop!\"\n\n\"Mm...yes. Ugh. It's just a spring clean for the May queen!\" \n\nShe was shrieking now, the sound harsh and awful. \"YOU HEAD IS HUMMING...AND IT WON'T GO! IN CASE YOU DON'T KNOW!\" \n\nHe felt her pussy contract against him and true fear leaking into his unresponsive body.\n\n\"STOP!\"\n\n\"Oh! OH! THE PIPER'S CALLING YOU TO JOIN HIM!\"\n\nWith a final scream she came, her trigger finger pulling as she clenched over the demon's cock. The cry had set him off; his hot scalding cum filled her pussy. His hips fell to the ground and she shivered as she watched him smolder away. From his feet up he burned, his cock falling out of her as he stared at her with sated calm eyes.\n\n\"Not a bad send off right,\" she remarked with a sated smile.\n\nHe grinned at her, his teeth blackening as the curse burned his neck.\n\n\"...another...life maybe...\" \n\nThen he was gone. \n\nDucky looked at the darkened spot with just a twinge of remorse. \n\n\"Yeah, maybe we'll meet again in another life.\"\n\nHer communicator started ringing inside her belt and she crawled over to it. The white cross flipped open when she pressed the center circle.\n\n\"Yes?\"\n\n\"Is it done?\"\n\n\"Yes.\"\n\n\"Good. Head back to headquarters.\"\n\n\"Yes Maam.\"\n\nShe closed the communicator and fastened back on her belt. Then she realized she was still leaking demon cum. Oh and she hadn't gotten the dust for the contract! She needed the DNA of the demon to prove he and his minions had been successfully slain. What was she...?\n\nGrinning she pulled out the contract vial from her belt and filled it with the fluid between her legs. Once it was half filled with the orange fluid she capped it and put it in her belt. It'd be less worse than making Father angry over her carelessness. Not to mention it would suck to work for free. She washed herself with the pier water and said a simple prayer so that the demons would not roam as evil spirits. Then she headed off, humming to herself. \n\n\"And she's buyyying the stairway to...heaven.\"\n\nThe Church of Saint Modesta was an imposing building with gothic architecture. Long winding steeples and gray weather worn angels perched over the top of the roof as though guarding it from evil. The night was black, the new moon had made it so. Shaking herself she went to the giant double oak doors. The church was supposedly closed. She took the golden ring knocker into her hand and struck it against the oak three times. Each time resounded deeply within the hollows of the supposedly empty church. She waited but a moment before the door creaked open and she walked inside. It closed behind her automatically and she turned to look at the man whom had opened it for her.\n\n\"Father,\" she said as glee filled her heart. \n\n\"Yes my child,\" he responded. \n\nShe smiled at him and he gave her a small smile as well. Realizing what he was doing her promptly frowned and beckoned her towards the inner sanctum of the church. \n\n\"Anyone here tonight?\" she asked happily.\n\nThe serious priest nodded. \"Yes, your mother.\"\n\nRunning past Father she saw her mother bent over in one of the first pews. She appeared to be praying. When she reached next to her, her mother gave her a wide smirk. She was actually in the process of sharpening a dagger.\n\n\"What took you so long sweetie pie? I thought I was going to have to come after you.\"\n\nDucky pouted. \"There were three of them Mom!\"\n\n\"So?\" \n\nRaven Dumphrey knew her daughter's abilities more than anyone else. She also knew her daughter had inherited certain...peculiarities from her. She gave her a knowing look but then glanced at Father who was approaching them. \n\n\"We'll discuss later.\"\n\n\"Do we have to?\"\n\n\"Have to what?\" Father asked pointedly as he looked at her mother with disdain. \n\nFather was a tall lean man with an unknown quantity of years. He was probably in his mid-forties, but his face held a youthful countenance that matched someone in their late twenties. He had steely green eyes, severely straightened honey blonde hair and porcelain white skin from staying in the church all day. \n\nHer mother was the complete opposite. She was as dark as the night with beautiful long black hair that was currently in a French braid that ended by her butt. Her eyes were startling, an amber brown that struck the soul. A dark maroon color stained her full lips and mischief quirked just by the side of her mouth. \n\n\"Girl talk. Vaginas and stuff.\" She gave Father a devilish grin. \"Things you would never be interested in.\" \n\nFather scowled at her, controlled his urge to cross himself in her presence and redirected his attention to Ducky. \n\n\"Do you have the contract?\" \n\nShe nodded taking the vial out of her belt. He looked at the orange vial suspiciously.\n\n\"What...is that?\"\n\n\"It'll work.\"\n\nFather's frown deepened if possible, and he beckoned her to hand over the vial. She did so nervously. He procured the contract paper from his robes, a white scroll of papyrus. It floated up in front of them and unfurled. Uncapping the vial Father recoiled, coughing as the smell of sex and burning assaulted his nostrils. He looked at Ducky furiously but she gave him a smile. ",
        "\"What? He was a fire demon. You know how they're always...ya know. The wind was too fast for me to get the ash, so I just picked this up.\" \n\n With my vagina. \n\nHe looked at her unconvinced but somehow was comforted by her half truth. He could tell if she was fully lying. He turned to the contract and spilled the contents onto the paper. The paper absorbed it and paused before a red line went through the red demons' name. \n\nA deep ancient voice echoed through the parchment. No doubt it was the person whom had struck the hit. \n\n\"Contract honored...by?\"\n\n\"Ducky, sir.\"\n\n\"Payment will be granted.\" The paper seemed to hum before the voice asked. \"Casualties?\"\n\nDucky blinked. \"No, why?\"\n\n\"Traces of female human in contract tribute.\"\n\nShe could feel Father's holy rage burning holes into her heart. \n\nShe giggled rubbing her head.\n\n\"Oh well, they reached the pier before me. There was no human blood on scene. The red demon did threaten me with rape, and he did mention that he had raped others in the past.\"\n\nThe paper hummed as it checked the red demon's file. \"...Confirmed,\" he said at last. \"History of nonconsensual intercourse. Contract ended.\"\n\nThe paper shimmered away and Ducky forced herself to look up at Father. He looked at her sternly, still strangely appeased. \n\nPoor guy, he would hold on hope for just about anything to ignore what was right in front of him. \n\n\"Very well,\" he finally said. \"You have done well.\"\n\n\"Thanks,\" Ducky said letting out a small relieved sigh. \"I'm bushed.\" She was; demon cock was mighty.\n\n\"Good,\" he said nodding. \"But first, let us pray.\"\n\nShe wanted to pray in the comfort of her bed, but knew there was no arguing with him. She, her mother and Father knelt in front of the giant cross that lay against the backdrop of the altar.\n\n\"Let us give thanks for your victory and safe return,\" he said in his lifting spiritual voice.\n\n\"Yes Father,\" she intoned.\n\nThank you Lord for granting me strength and\u2014\"\n\n\"Let us pray for your continued success in the future...\"\n\n\"Okay.\" Lord, may I have success in\u2014\"\n\n\"And let us pray for the woman whom was ravaged tonight.\"\n\nShe paused, looking up at Father. \n\nHis eyes were closed and his hands were still folded in prayer, but she could feel the intent of his words. Her mother was trying hard to hold back her laughter.\n\n\"Let us pray for this poor, lost troubled woman, whom was subject to virtue-less, unholy carnal desires. So that she may be spared from evils in the future and never become victim again.\"\n\n\"...yes Father.\"\n\n\"Let us pray for her, ten times.\"\n\nShe held back a sigh. \n\n\"...yes father.\" \n"
    ],
    "authorname": "stubborn_dreamer",
    "tags": [
        "nonconsensual",
        "demons",
        "demon hunters",
        "comedy",
        "church",
        "satire"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/ducky-the-demon-hunter"
}
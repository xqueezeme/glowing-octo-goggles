{
    "title": "Operation Minnow",
    "pages": [
        "I arrived at the three-way intersection at 2302, taking up a position not where I was supposed to be, but where I could best control what was to come. \n\nThe next two hours passed quickly; waiting in a place where mortal peril looms is active waiting. I'm scanning. I'm listening. I'm smelling the air. I'm like an ambush predator.\n\nI reviewed my next actions\u2014the words I had to say to Colonel Kwan, the words he needed to say to me, the emblem I had to reveal, and the emblem Kwan would show to me. \n\nOnce verified, I would need to evaluate his condition for movement. What if he's injured? What if he's pursued? What if his English sucks? What if he's ignorant of stealth movement techniques?\n\nI reviewed it all. When 0100\u2014our appointed meeting time\u2014hit, I was not surprised by the sudden passage of time.\n\nI went to high alert. Listening now with fierce concentration. Willing my eyes to be like an eagle's. Forcing my body to be attentive to any changes to the environment around me. \n\nWhen he didn't show, I went through my contingencies again.\n\nFinishing, I re-checked my watch at 0157.\n\nThere was still plenty of time. \n\nBack at Anacostia-Bolling, Deacon told me that Kwan needed to be almost exactly on time for this to work. I wondered if he might have been right.\n\nI had built in two hours of leeway\u2014time I could burn and still make it out with Colonel Kwan. But after 0300, it was going to be tight. I needed to get to the South Korean side of the Korean Demilitarized Zone before 0618, sunrise. Once there, I could camouflage us and rest or sleep in relatively safely through the day. When nightfall came again, I could get us out.\n\nBy myself, I could get to the South Korean side in two hours and fifteen minutes\u2014not due to the distance, but due to the time consumed by the two mandatory fence line breaches. With Kwan along, I wanted every bit of that three-plus hours.\n\nI wondered about my drop-dead time. Should it change? I asked myself. Do I dare push it later?\n\nNo. \n\nWhat if, I wondered, I roll at 0300 and later find out he showed up at 0305? What will Deacon say? What about the fucking mission?\n\nI can't push the time, I decided. I can't. There'd be no way to get out of North Korea. I can't travel almost five kilometers over uneven terrain that included two fucking breaches, minefields, and DPRK patrols. I can't do it babysitting a North Korean colonel. Impossible.\n\nAnd I can't wait out another day. \n\nIf Kwan has been caught, I acknowledged, then in all likelihood, I'm compromised. DPRK interrogators will coerce the meeting location out of him, and their elite troops will come down upon me in force.\n\nI punch out at 0300, I told myself. That's it.\n\nAt 0232, twenty-eight minutes from drop-dead time, I heard the sound of a person. Footfalls on gravel. Distance 200 meters, give or take. My heart surged. Every sense, dulled somewhat from the overlong wait, sprang back into high readiness.\n\nThat cannot, I thought, be him. He would not be so stupid as to make that much noise.\n\nI powered up my NVGs and lowered them over my eyes, scanning west down the road. \n\nNothing.\n\nI switched them to infrared.\n\nNothing.\n\nI raised them from my eyes and listened.\n\nYes, footfalls.\n\nCloser. 180 meters. Just around the bend. A single person.\n\nIt has to be a civilian, right? I asked myself. But at 0230?\n\nI didn't know what to think. I lowered the NVGs and saw him. \n\nShort, skinny. My first thought was this was a civilian woman, but I quickly dispelled that, remembering the briefing on malnutrition. But, do DPRK Colonels\u2014Colonels!\u2014not get enough food to eat, too?\n\nMaybe, I decided, he's just a little colonel.\n\nBut his gait struck me as odd.\n\nHis attire was definitely not that of a member of the military. He wore a loose black shirt on top of loose black pants that didn't quite reach his ankles. His shoes looked almost like slippers\u2014black, sleek, and not at all rugged. On his head, he wore one of those wide conical bamboo coolie hats, and it also was black, pulled low to hide his face.\n\nI scanned the east-west road and the other road north. Nothing. Powering down the NVGs, I worked to restore my own night vision while listening intently for any other sound besides those damned footsteps.\n\nAt about 120 meters, my eyes darted up at a change.\n\n\"Fuckin'-a,\" I mouthed.\n\nThe colonel was jogging. Crunch-crunch-crunch-crunch.\n\nWas someone else coming? A vehicle behind him?\n\nI drew up my CQB rifle, looked, and listened. Nothing else out there but him.\n\nWhat in the fuck kind of colonel is this? I asked myself.\n\nDeacon hadn't known. There was no record of a Colonel Kwan. No photograph, either, but the DPRK contact had told our people that the information Kwan had would be invaluable. Deacon warned me about a trap\u2014for me, for the Colonel, or for the source that arranged the defection with our people. \n\nKwan was about 80 meters from the T intersection when I went stock-still. Didn't move a muscle. Didn't breathe. Didn't blink.\n\nI could see him now. Not clearly, but well enough. He was jogging towards the intersection, and this was no man's running form.\n\nThis was a woman. I hadn't a doubt.\n\nAt 50 meters, it was all confirmed\u2014breasts. They rocked up and down with each stride. Largish ones, too, for such a tiny frame.\n\nFuck me, I thought. Fuck me, a fucking civilian? Here? At two fucking thirty in the morning?\n\nI remained still, and a new idea occurred to me: the reason Colonel Kwan hasn't shown up yet is because of this civilian woman. He's waiting for her to pass before coming to meet me.\n\nIt made perfect sense. All the noise from the gravel? Kwan heard it and tucked himself away.\n\nJust some shitty luck, I decided.\n\nI blew a silent sigh and waited for her to pass, watching closely.\n\nAt 20 meters from the intersection, she slowed to a walk and passed me. \n\nYoung, I realized. She's young. Her gait\u2014a kind of springiness in it\u2014clued me in. Late teens or early twenties was my guess. But what the hell was she doing coming to my fucking intersection?\n\nLooking primarily along the roads east, west, and north, she scanned a complete circle. Then she crossed toward the northeast corner of the T and stopped there.\n\nI checked my watch. 0239. Shit.\n\nShe turned her back to me, looking into the thick tree line that began about eight meters from the road. \n\nBy my estimate, this girl was standing on exactly the proper grid coordinates for my meet with Kwan. She was looking directly into the copse where, quite naturally, I might have hidden\u2014perhaps exactly where Kwan was expecting me to be waiting for him.\n\nThis is not possible, I thought.\n\nCould Kwan be wearing a disguise? Disguised as a woman?\n\nNo, I said to myself. That's no disguise. I know how girls run. I know how tits shake.\n\nA further train of ideas began leaping into my mind. \n\nShe couldn't be an assassin sent to kill Kwan and me. No fucking way they send someone that incompetent. Plus, I couldn't see any weapons on her.\n\nI considered the idea that this was a lookout for Kwan\u2014someone he trusted but was willing to sacrifice in the event it was a trap. Kind of a shitty move, if true. \n\nThen, I wondered if it might be a relative. His daughter? His wife? I could see an old colonel being \"gifted\" with a large-breasted young wife by the fucked up DPRK regime. Did Kwan expect me to exfiltrate her, too? A last-minute change of plans? I hoped the fuck not.\n\nAfter that, it occurred to me that this might just be the coincidence it appeared. Scanning the intersection, I realized it was a fairly obvious meeting place. The trees close to the street on two of the three sides provided good cover, and there weren't a hell of a lot of decent roads around. \n\nMaybe, I thought, she was here to meet a boyfriend. A sneak out hook-up. I could see that happening. Her old man didn't like the kid; it was a bad match. \"I forbid you to see that boy!\" But they found a way. Made sense, though it didn't help matters. She needed to get the fuck out of here and ASAP. Be just my fucking luck if the meet-up time was set for 0300.\n\nI watched her. \n\nAll black, I reminded myself. She's wearing all black. It definitely suggested covert action. It didn't seem to be normal work or leisure attire. So, she was being sneaky, but she was making all kinds of noise and walking on the road. Didn't make any sense.\n\nMy watch read 0244.\n\nShe left the road, stepping into the low brush and making her way into the trees. Stopping just short of the darkness inside, she bent forward as if peering into the shadows. Left and right she scanned.\n\nShe whispered something. I couldn't hear the distinct syllables.\n\nBoyfriend's name, maybe? \n\nShe carefully walked along the tree line north a few steps, her eyes directed into the foliage. She went further up the hill. At about 10 meters, she turned back. Back at the intersection, she turned east, repeating her scan into the trees.\n\nThen she came back. At the corner, she backed into the shadows and sat.\n\nNo, I mouthed. No. No. No.\n\n0250.\n\nI turned on my NVGs and drew them over my eyes.\n\nShe was sitting just inside the shadows of the foliage, her arms wrapped around her knees.\n\nI knew what I needed to do. I closed my eyes and shook my head. \n\nSighing noiselessly, I powered down my NVGs and lifted them from my eyes. Then, as quietly as possible, I unslung my CQBR. \n\nChecking the silencer first, I switched it from safe to semi-auto and gently urged the forward assist, fully seating the 5.56mm round. I powered up the night scope and settled into a perfect seated firing position.\n\nThis was a 30 meter shot with a 10.5 inch barreled rifle\u2014a walk in the park against an unmoving target in any conditions\u2014day, night, rain, snow, fucking tornado. I would not miss a head shot.\n\nI raised the rifle to my eyes and checked my sight. I had her. Just a slow, steady squeeze when my breathing was right.\n\nA knife of guilt sliced at my heart before I could fire. This was not the kind of work I wanted\u2014killing some innocent North Korean girl?\n\nBut that's probably what I'm expected to do here, I thought. That's probably what Colonel Kwan is waiting for. Kill her, he's somewhere urging me. Shoot her! \n\nI wondered what Deacon would tell me to do. He wouldn't tell me to go talk to her, that's for damn sure. I didn't speak Korean. She was just some country girl, didn't speak any fucking English. \n\nThe minute I walk out of these trees, she fucking screams, I thought. Fucking screams.\n\nAnd even if she didn't, even if she let the giant foreign warrior approach, hiss a bunch of gibberish, and shoo her off\u2014even then, she would race home and tell someone. \n\n0254.\n\nFuck. Fuck. Fuck. Fuck. Fuck!\n\nThere was no time to maneuver east out of sight, cross the damned road, and come in behind her where I could cover her mouth before she cried out. \n\nI roll at 0300. That's it. That's my fucking time. 0300.\n\nShoot her now, I said to myself, and I give Kwan five minutes to get his ass over here.\n\nI raised the rifle and sighted into her head. \n\nMy index finger alighted on the trigger.\n\nMy breathing relaxed. \n\nShe looked up, and with each of my breaths, I watched the crosshairs gently rise and fall\u2014from her forehead down to her nose. \n\nForehead\u2014nose. Forehead\u2014nose. \n\nNow. Now. NOW. \n\nI drew my finger out and pointed it straight forward. \n\nI can't do this, I thought. I can't kill this girl.\n\nMovement arrested my attention; she rose to her feet. \n\nShe walked toward the intersection, scanning along each of the roads.\n\n\"Go,\" I mouthed in silence. \"Go home.\"\n\nShe began crossing the street. \n\nCrunch-crunch.\n\nCrossing south, to my side.\n\nShe stepped off the road maybe 30 feet east of me.\n\nI lowered the rifle and checked the time\u20140256.\n\nStepping gingerly through the low brush, she made it to the tree line and began a slow walk west, toward me.\n\nI carefully set my rifle down and drew my knife.\n\nI pushed myself from a seated to a crouched position, ready to explode upon her.\n\nShe leaned into the darkness\u2014peering, searching. Then, she stepped closer. \n\nCloser. Five meters.\n\nCover her mouth, I thought. Get the knife in her eye so she can see it. Then, I'll muzzle her, tie her up, and put her somewhere safe. Come daylight, she'll be seen and I'll be long gone, Kwan or no Kwan.\n\nLess than 2 meters.\n\nOne more step, girl, and you're mine.\n\nHer eyes went right over me, across and back. She squinted and scanned. Her right foot rose and planted.\n\nClose enough, I decided. Without a sound, I sprang at her.\n\nAt the same moment, I heard her whisper, \"Olion i-boibnida.\"\n\nMy hand covered her next utterance, a scream.\n\nHer body froze against me. I felt her every muscle tense, but I never raised the knife. \n\nShe had spoken the recognition passphrase.\n\nAstonished, I whispered, \"Nano bodna.\"\n\nHer body relaxed, and I uncovered her mouth and drew her into the shadows and down to the ground. Gripping her by the shoulders gently, but firmly, I asked, \"Where is Colonel Kwan?\"\n\nShe looked confused. She said, \"Daelyeong Kwan?\"\n\nI knew that Daelyeong meant Colonel in Korean. \"Yes. Daelyeong Kwan\u2014Colonel Kwan, where is he?\"\n\n\"Ye. Kwan. Cow-no Kwan,\" she said.\n\n\"Yes. Where is he?\" I pointed left, right, forward, and back. I shrugged my shoulders. \"Where is Colonel Kwan?\"\n\nShe said, \"Cow-no Kwan I.\" She pointed at herself.\n\nI blinked, staring at her. Shaking my head, I asked, \"You? You are Kwan?\"\n\n\"I Cow-no Kwan. Cow-no Kwan Min-Ji,\" she responded, nodding and removing her hat to display her face as if that would help.\n\nI let go of her shoulders and sat back on my heels.\n\nA moment later, I raised my index finger. Unbuttoning my shirt pocket, I drew out a 100 won South Korean coin and showed it to her.\n\nShe took off her shoe, reached into it, and pulled out a coin, handing it to me. \n\nI took it and examined it. One won. North Korean.\n\nVerified.\n\nThis girl was Colonel Kwan. \n\n***\n\nNo time to fuck around. I needed to get away from the road and somewhere Kwan and I could stop and make the adjustments and preparations for the big move.\n\nI said, \"Follow me. Quiet.\" I held my finger to my lips.\n\nShe nodded and reached for my hand.\n\nI gave it to her and led her south into the trees and up the hill. \n\nShe stepped where I stepped. She was careful, but the hand-holding was slowing us down.\n\nAs we moved, I considered her situation. A fucking colonel? A kid probably ten years younger than me? Maybe more. Incredible to me, but in North Korea? I could believe it.\n\nHaving seen videos of the regime's enormous parades through downtown Pyongyang, having seen company after company of female units doing that silly goose-step, I supposed it was possible. \n\nShe was connected. Maybe her father was some kind of Field Marshal or General. A big politician, maybe.\n\nHaving seen those women goose-stepping, I also knew that, strange as it seemed, those women all seemed to have big tits\u2014at least, the visible ones in the outer ranks did. Colonel Kwan Min-Ji fit the type.\n\nThen I wondered if she was one of those\u2014what do you call them?\u2014comfort women.\n\nEven in the darkness, I could tell she was attractive.\n\nMaybe she was some general's personal babe. That, also, would explain an insanely high rank for an eighteen or twenty-year-old. \n\nI stopped us halfway up the hill and we knelt. I spent a minute listening intently. Kwan kept quiet.\n\nSatisfied, I pointed to myself and whispered, \"Skipper.\"\n\n\"Ski-pell,\" she responded.\n\n\"Skipper,\" I tried again.\n\n\"Ski-pa.\"\n\n\"Good enough.\"\n\nShe pointed to herself, saying, \"Min-Ji\"\n\nI nodded. Then, I bowed slightly and extended my right hand, supporting my right forearm, as I was taught, with my left hand.\n\nShe bowed and did the same.\n\nWe shook hands. Hers was tiny but strong. She smiled nervously.\n\n\"Can you speak English?\"\n\n\"Spee Ying-wish? Ye, spee sung Ying-wish.\"\n\nHer words were heavily accented and barely intelligible.\n\n\"Were you being followed?\" I asked. The answer was more than likely \"no.\" She had, after all, been waiting at the intersection for almost 30 minutes, but I needed to ask, just in case. \n\n\"Fwo-lo?\" she responded, shaking her head slightly.\n\nI nodded. \"Followed. Is anyone following you?\"\n\nShe was utterly confused.\n\nI cursed to myself, remembering how Deacon told me the source said Kwan could \"get by in English.\" Bullshit. \n\nI slung the rifle behind my back. Using my fingers, I tried to show her what I meant. One person walking, I pointed to her. Another person behind her, following. \n\nShe seemed to understand.\n\n\"Anyone follow you?\"\n\n\"No fwo-lo.\"\n\n\"Okay,\" I whispered.\n\nNow for a harder question. I pointed to my watch. \"When,\" I said, \"will they know you're gone?\" I pointed randomly out, out there, saying \"They. Others.\" Then, I mimicked searching and looking. \"Look for you,\" I said, pointing at her. Finally, I pointed to my watch. \"When? They look for you when?\"\n\nShe didn't get it.\n\nI knelt and used twigs and pine needles. One for her. One for me. A bunch for the searchers. I pretended to be looking and searching with the sticks. I pointed at my watch. \"When are they coming? When will they follow?\"\n\nHer eyes widened in recognition. She spoke utter gibberish to me for a few seconds. I was about to stop her, but suddenly she pointed to my watch and began counting\u2014very poorly\u2014in English. Her little finger touched each number. \"Won-Doo-Nee-Fie-Fow-Sees-Seppen-Yay-Nie?\" She glanced up at me.\n\nI nodded. \"Yes. Numbers,\" I said, even though it sounded like she mixed up four and five. \"But what time?\" I asked, poking my watch. \n\nShe pointed at the seven, saying, \"Seppen?\"\n\n\"Seven. That's seven.\"\n\n\"Seffen.\"\n\n\"Bad guys come looking at seven?\" I asked, re-enacting the pine-needle troop search on the ground.\n\nShe nodded. \"Fwo-lo seffen.\"\n\n\"Okay,\" I muttered, considering how that time would impact my plan.\n\nShe said, \"Ho-kay.\"\n\nI glanced at her nervous smile and decided I needed to start by getting her ready to move out. I pulled out my pack and drew out a canteen for her.\n\nShe took it and watched me drink. She followed. Handing it back to me, I set it on the ground beside her.\n\nI took out three energy bars, handing them to her. I mimicked eating.\n\nShe shook her head, handing them back. \n\nI placed them beside the canteen, and then I drew out a small utility belt with two pouches on the front and an empty canteen pouch in the back. I stuffed the bars in one pouch and her canteen in its slot.\n\nGently holding out my hand toward her as if to say, \"It's okay. Don't worry,\" I shuffled on my knees towards her and wrapped the utility belt around her waist.\n\nIt was way too loose around her. I had set it for the Colonel I imagined\u2014small, but a male. For her waist, it would need further adjustment.\n\nShe whispered, \"Ah!\" and took the belt from me. Her fingers worked the little clasps, and she began adjusting it herself.\n\nSo, not totally incompetent, I thought. That helps.\n\nWhile she worked on the belt I drew out a light neoprene outfit.\n\nHer black clothes would be great camouflage if we only moved in the shadows at night. Black was perfect for that. But, under moonlight or in the open-air day or night, there were much better colors than black. \n\nThis neoprene stuff was perfect. Deep camouflage\u2014dark and medium browns mixed in with dark and medium greens with a few light tan accents here and there. It also was very stretchy\u2014it would almost, but not quite, be loose on her little frame. \n\nPlus, this stuff had the added benefits of being a good warming layer, defeating infrared, reversing into a civilian exercise-type outfit, and it had little buttoning loops built-in all over it to add elements that would break up her silhouette. For that purpose, I had brought several bits of camouflage netting which I then pulled out of the bag.",
        "Kwan had finished adjusting the belt. It was clipped around her waist.\n\nI signaled for her to remove it. She did.\n\nI gestured for her to pull off her hat. I took it and set it beside her.\n\nWe looked at each other.\n\nShit, she was a beautiful little thing. Long raven hair pulled into a low ponytail. Shy eyes and long eyelashes. High cheekbones with that almost inflated turgidness around the eyes that some East Asian people have. \n\nIf races and ethnicities have certain traits, then some people exemplified them all. When I looked at Kwan Min-Ji, I saw a pureblood Korean woman. Hers was the kind of face and body the regime might use on a propaganda poster to represent all North Korean women\u2014beautiful, young, full-breasted, and innocent.\n\nTurning away from these thoughts, I held up the shirt. She took it from me, and I turned around before she could even ask.\n\nA moment later, she whispered my name. \n\nI turned back. Seeing what she had done, I gently said, \"No no. Backward.\" The hood was in front. I signaled for her to turn the shirt around. \n\nShe did so immediately, slipping her arms inside the sleeves and rotating the shirt around.\n\nI showed her the facemask-style hoodie, and she drew it over herself, pulling the mouth and nose covering down under her chin.\n\nNext, I held up the pants. She took them and rose.\n\nI spun away.\n\nA few moments later, she called for me. I handed her the socks. After she pulled them on, she slipped on her shoes, and I showed her how the sleeves of her shirt pulled over her thumbs and covered the hands up to the knuckles.\n\nShe held up her old clothes, asking something in Korean.\n\nThey would not be needed, and we were leaving the country tonight. I mimicked digging.\n\nShe immediately understood and, together, we made quick work of unearthing a small hole and burying her old clothes.\n\nWhile she covered the hole, I fished out the paint stick and my camouflage netting. I called her to me, and I coated the ends of her fingers and a mask around her eyes in dark green. She accepted this with patience.\n\nNext, I unbuttoned several of the loops on her shirt and pants, attaching the netting there so that she wouldn't form the silhouette of a human.\n\nShe was ready.\n\nTime on deck? 0331.\n\nTime enough to check my map and determine my next heading.\n\nThe quickest way out of country was straight south, but from here that would take us directly into the heart of the DPRK's Joint Security Area defenses. Hell, there was a fucking regimental barracks two kilometers due south of me. \n\nNo, we were heading mainly east. A 3.1-kilometer jaunt east-southeast through these hills would get me clear of the barracks and ready to turn south. The route had shitty terrain, but great concealment.\n\n\"Min-Ji, follow me.\"\n\n\"Fwo-lo,\" she said.\n\nShe reached for my hand, but I brushed it aside. \"Too slow.\"\n\nShe didn't understand, but I moved out anyway.\n\nTwice I stopped to warn her about sound when she made mistakes\u2014breaking a fallen twig underfoot and allowing a leafy branch to snap noisily off of her body.\n\nShe adapted reasonably well.\n\nI stopped frequently to listen and to scan with my NVGs. Distant vehicles three times. Only once was I certain of hearing human voices, but they sounded indoors. I veered away from the source of the chatter and continued.\n\nWe came to a stop at 0438.\n\nAnother 2000 meters to reach the border. We were going to make it.\n\nThe key was the first breach\u2014the Civilian Control, CC, fence line on the North Korean side. That was about 800 meters southeast of us. At our pace, it would put us there at 0500. It would still be dark, and that was the whole shebang right there. I needed darkness to get us through that fence. \n\nOnce on the other side, we could make our final 750-meter trek to the DMZ fence line, arriving sometime around 0535. Once the DMZ fence line was breached, we could take a nice, slow pace through any minefields, and cross the South Korean border, arriving just after dawn. Not perfect\u2014a little late\u2014but doable.\n\nBefore any of that could occur, I needed to get us across the valley.\n\nIt was low, wet ground, great for irrigation ditches and farming, but highly exposed for us. At the lowest point, there ran two small creeks, one coming from the north and one from the east, that joined to form a stream. We needed to cross it. Once over, we would need to follow the eastern creek until we got back into higher ground\u2014about 750 meters total.\n\nBefore starting the mission, my map recon of the area suggested that the eastern creek had a good wall-like bank on the south side. I imagined once we crossed, we would be able to stay low and travel in the defilade of the bank as we maneuvered through the low ground.\n\nWith my NVGs on, I found the place I wanted, the intersection of the two small creeks. It was about 80 meters from us, but we would need to cross a road and an open field to get there.\n\nI had Min-Ji sit and wait while I scouted the road.\n\nClear north and south, so I listened.\n\nNothing.\n\nHustling back to her, I took her hand and we darted across the road. Then, I began low-crawling. \n\nShe followed; I was starting to appreciate this young woman's adaptive abilities more and more.\n\nA 60-meter low-crawl is no bullshit to a civilian. She was tired, resting beside the first creek in the low shrubs and bushes. I scouted ahead.\n\nWhat I found was a relief. The first creek was jumpable, and I believed the second one would be too.\n\nWhy not go over a bridge? There were few in the area and all roads this close to the CC fence line were too often patrolled. It was way too dangerous\u2014the noise of the gravel and the exposure. \"Do not be seen,\" Deacon had told me.\n\nI led Min-Ji to the edge and mimed the jump. Then, using my fingers I tried to ask if she thought she could jump it.\n\nShe nodded and said, \"Ye\u2014Yes.\"\n\nI went first, backing up a few steps and then leaping. I landed well. The footing on the other side was secure. Turning, I watched her do the same.\n\nOver, no problem. I caught her, but it was unnecessary. She cleared it with three feet to spare.\n\nWe crawled to the second creek. There were rocks on the edge of both sides, but it was narrower than the first one.\n\nPiece of cake.\n\nFirst, though, I donned my NVGs and checked the cover because either side of this creek would work. \n\nThere was no question: we had to cross. The side we were on was a flat marsh. The other side had a raised, sloping ledge about four feet high. \n\nI mimed and whispered, \"Jump again.\"\n\nShe nodded.\n\nI went first, landing easily.\n\nShe backed up, took two quick steps, and crumpled instantly into the water. She never got off the ground. Her ankle just rolled underneath her with a wet crunch. She didn't even scream.\n\nMaybe it had been a loose rock under her foot; maybe she had weak ankles. Didn't matter, she plummeted straight down into the water with a huge splash, completely submerged. \n\nIf her fall had been a video with no context for the viewer, it might have made several hilarious clip compilations. But, I had the context. My instantaneous thought was \"We're fucked.\" \n\nBut I needed to act. I planted one hand on the bank and pointed my toes so as to slip into the stream quickly and silently. The cold water immersed me from the neck down. \n\nDeep fucking creek, I thought. Cold mother fucking water. \n\nI scooped her into my arms, placed her on the bank, and climbed out. Then, I pulled her toward the four-foot ledge.\n\nShe winced in pain, clutching her ankle with both hands. I drew them aside and looked.\n\nOh, yeah, we're fucked, I thought.\n\nEven in the darkness through a wet sock, I could see the swelling had already begun. \n\nSecurity first, I reminded myself. I listened carefully. I peered over the ledge, scanning a circle around us with the NVGs set to infrared.\n\nClear for now, I said to myself, but that splash had been loud.\n\nI dug into my pack and drew out my first aid kit, seizing the wrap coiled inside. With utmost care, I removed Min-Ji's sopping shoe and sock. Bluish-purple blood bruising appeared just under the surface of her skin. I wrapped her ankle as tightly as I could.\n\nFinished, I glanced at her.\n\nShe no longer cared about her ankle; she shivered in cold.\n\nIt was 45 degrees. The water of that creek could not have been much warmer.\n\nFucking hopeless, I thought.\n\nMin-Ji could not possibly walk. Even if she could, there was no way her shoe would fit onto that foot with the swelling I saw plus the wrap. Barefoot over this ground? No way.\n\nI would have to carry her, and that blew the entire timeline to hell. At best, we might be able to make it out in two night's travel, but in the interim, her absence would be discovered. All hell would break loose on the border. There would be search patrols and helicopters.\n\nPlus, she was sopping wet. Hell, we both were. Exposure would slow down and seize up our muscles in no time unless we got warm and dry.\n\nAn idea crept into my mind, cold and clear.\n\nMy right hand slid down to my utility belt, and I felt the knife there. My thumb teased at the button that held it in place.\n\nI could kill her, I realized. Right here. Right now. Cover her mouth and slide the blade under her ribcage and into her heart. \n\nNo one would know. I could make my way over the border tonight. There was still time. Even wet, I could do it alone. I would tell Deacon she never showed up, must have gotten caught.\n\n\"Ski-pa go?\" she asked in a whisper.\n\nShe looked innocent, beautiful, and miserable.\n\n\"Fuck it,\" I hissed, and I knelt to get her onto my back, piggyback-style. Hunched over, I carried us along the creekside with the ledge on my right flank helping hide us.\n\nMy one goal was to get us into the higher ground, into the tree line about 600 meters from us. Once there I could make some decisions, but I had to get the fuck out of this low, exposed terrain.\n\nThere were insane risks in what I was attempting for a variety of reasons. First, I was now making it up as I went. No plan other than my next destination. Second, I was fast and therefore loud. Speed was critical. I didn't have time to worry about breaking twigs or kicking stones. Third, this way took me within 50 meters of a no-shit house. Not a small one; quite likely several families lived there, communally farming these lowlands.\n\nMin-Ji was light, maybe 90 pounds, but carrying her while I was bent over to keep out of sight was killing me. It made her start to feel like 200 pounds in no time.\n\nOne step. One foot in front of the next. Keep going, I told myself.\n\nI sucked at the air like a vacuum. In minutes, I wasn't cold; I was hot and sweating, not being able to tell if it was creek water or perspiration falling off my face like raindrops.\n\nNo stopping. Keep going. I can do this. Next step. Next step.\n\nAt the moment I knew I was going to collapse, I looked to my right and, to my relief, saw that the four-foot ledge was now closer to six feet. I knelt and stood up almost straight. Min-Ji's 90 pounds didn't feel like 200 anymore; they felt more like 150.\n\n300 meters to that tree line.\n\nI continued, almost jogging. My back no longer killing me, I began to consider my situation.\n\nThey would know about her absence at 0700. Call it fifteen minutes of a local search\u2014the boss would not wish to tell any higher-ups she was missing until he had done some searching of his own. Fifteen more minutes for getting the word out and for letting the decision-makers plan a response. A half-hour later, the search would be in full swing.\n\n0800.\n\nBut, daylight was coming at 0618.\n\nNo time to stop and look, I guessed the time to be around 0515\u2014an hour till sunrise.\n\nChecking a 360 circle and finding it clear, I ran hard the rest of the way, passing the house without a second thought.\n\nMy legs grew tired as I entered the trees and began running uphill. I saw a little cut in the ground and stopped, setting Min-Ji down.\n\n\"You okay?\" I asked.\n\n\"Ho-kay.\" \n\nShe's a trooper, I thought.\n\nI looked at her ankle. Through the sock, I could see the place where her skin bulged out from the wrap. It was still swelling. Had to be painful.\n\nMy watch read 0518. I flipped down my NVGs, scanned 360 degrees, and then pulled out my map. I focused solely on using the time I had to find a safe place to hole up before daylight, but where? \n\nSomewhere foot, vehicular, and air patrols will not find us.\n\n\"Ski-pa go,\" she whispered.\n\nI looked at her.\n\n\"Ski-pa go. Min-Ji...,\" she paused, thinking. Then she touched the ground beside her, saying, \"Heel. Min-Ji heel.\" Her eyes showed fear, but she pursed her lips and nodded as if to emphasize her decision.\n\nI couldn't help but smile at her bravery. \"No,\" I responded. \"Skipper stays with Min-Ji.\" I interlocked my fingers, adding, \"Skipper and Min-Ji.\"\n\nShe smiled briefly, wrapping her arms around her body and shivering.\n\nResuming my map analysis, I quickly muttered, \"Shit.\" To my south lay the dense forest, but also more DPRK outposts. To my east, there was a decent hill, but beyond that, more low ground. North and west were simply not options.\n\nThe hill to my east has several rough trails darting here and there, but dense foliage and plenty of space between. It was 800 meters away.\n\nStill dark, we needed to make one more jaunt before daylight. \n\nI took a long pull from my canteen and said, \"Min-Ji.\"\n\nShe looked at me, pale and cold. I helped her onto my back and began moving east. \n\nThe trip took about half an hour, most of it uphill, and my legs felt like molten lead when I set Min-Ji down and began to scout the area around us.\n\nWe were well away from the trails. It was a site with potential. I found one more thing I needed\u2014a vertical drop. Didn't have to be sheer, just a fairly steep declivity of at least four or five feet. I saw one just like I wanted about 15 meters west of where I had set down Min-Ji.\n\nShe was shivering uncontrollably when I returned and found her.\n\nI surprised her when I laid on top of her and began aggressively rubbing her shoulders and legs. I talked to her, knowing she wouldn't know what the fuck I was saying.\n\n\"You're going to be all right, Min-Ji. Just need to carry you one more time, and then I'm going to build us a shelter. We're going to make it. I'll get you warm again. One more move.\"\n\nAfter two minutes, I sat up and carried her in my arms to the drop.\n\nIt was 0606. Twelve minutes to sunrise. \n\nScanning the sloping face of dirt and grass, I found my spot, pulled out my knife, and went to work. Three feet wide and two feet high, I began digging out a tunnel in the face of the drop. \n\nA foot or so deep, I took a break and rubbed all over Min-Ji for about five minutes. Then, I resumed the dig, and I built up a routine that way\u2014dig for ten minutes, warm her up for five.\n\nIt took just over an hour to clear out our tunnel. Five more minutes to camouflage the entrance. \n\nMeanwhile, the sun came up. I heard distant vehicles on the roads. Nearer, I heard military vehicles start-up.\n\nI wasn't entirely sure how to approach what I knew had to be done next. I began taking off all of my wet clothes\u2014all of them. She stared at the ground in front of her, visibly shaking the entire time. I laid out my wet clothes as a kind of carpet for half of the tunnel and turned to her. \n\n\"Min-Ji,\" I said.\n\nShe glanced at me, and then her eyes bent down to my cock.\n\nI pointed at her and mimicked taking off clothes. Then, I pointed at my tunnel. \n\nHer teeth chattered. She didn't move. She just said my name.\n\nI undressed her, laying her pants and shirt on her side of the tunnel.\n\nWe were completely naked.\n\nYes, I looked. Yes, I noticed her body. Hard not to, even in peril. But, I didn't have time to linger upon it. I concluded that whoever she decided to love was going to be a lucky, lucky man.\n\nI lifted her up and fed her body into the tunnel, and then I climbed in beside her, remembering to pull the camouflage down over the entrance.\n\nIt was 0743. \n\nThe North Koreans knew their Colonel Kwan was missing. The search was about to begin.\n\nI pulled her shivering body next to mine, and then I draped over us a solar blanket that was silver on the inside, camouflage green on the outside. For the next hour, I steadfastly rubbed her, always pressing my warm flesh against hers, blowing my hot breath into her wet hair, and trying to get her body temperature back to normal.\n\nWhen she stopped shivering, I handed her an unwrapped energy bar and her canteen. She drank all of the water and washed it down with the bar. I ate and rehydrated, as well. After finishing, our limbs grew cold, and we pressed ourselves together once again.\n\nShe slept. I listened.\n\n***\n\nThe clothes underneath us began to dry out from our body heat. \n\nI needed to plan a night move out of this place.\n\nThe desperation of our condition was clear. The absence of Kwan so near the border could only mean one thing: defection. The obvious solution would be to run high-speed vehicular patrols over every inch of road, to keep the CC fence line under constant troop surveillance, and to flood the area with foot patrols.\n\nBut what did they know about her escape? Perhaps nothing, but maybe she had a confidante or a helper on the inside. I had to assume the worst. They wouldn't know my planned\u2014now scrapped\u2014escape route, but through interrogation, they may uncover the original meeting place between Min-Ji and me\u2014the three-way intersection.\n\nFrom there, I thought..., but I stopped at a haunting new realization: dogs.\n\nFuck me. Scent dogs. How could I have forgotten?\n\nThey would use dogs to track us. Undoubtedly they had some leftover items of Min-Ji's clothing. The dogs would sniff and lead the way. Then, they would find the clothing we had buried south of the intersection.\n\nI doubted those dogs would have my scent. My gear was specially designed to reduce scent plumes. The neoprene clothing I'd brought for her was, too, but her shoes would be the giveaway. They'd definitely have her scent.\n\nWe had traveled just over six kilometers from the intersection.\n\nThat gave me about three hours from the time they begin trailing us at the intersection. \n\nIt was 0922. They were likely on my trail already.\n\nI figured I had until noon. I cursed myself silently for not remembering their dogs.\n\nI glanced at Min-Ji. She remained fast asleep.\n\nI could kill her right now, I knew. She'd barely even have time to open her eyes. Fuck, it would be so easy.\n\nWho the fuck was I kidding? I couldn't bring myself to do that. There's got to be another way, I decided.\n\nWell-handled trailing dogs were nearly impossible to defeat. One needed to either wear them down, distract them, or make one's scent vanish.\n\nI couldn't wear them down if I had to carry Min-Ji, and I had nothing to distract them.\n\nI knew what I had to do, but the risk was horrendous.\n\nI looked at Min-Ji. She can rest, I decided. I've got to get started. It no longer mattered that it was daytime.\n\nI took my gear and slid out of the tunnel.\n\nMin-Ji woke. I signaled to her that I would be back, and I pointed at the three on the watch to signal how long I would be gone.\n\nShe looked afraid.\n\nI touched her cheek. I don't know why.\n\nDonning my gear and equipment, I covered the tunnel opening. I found two strong hunks of bark and lashed them to the soles of my boots with dummy cord. Then, I backtracked our route to the tunnel, keeping about 25 meters away from where I actually carried her.\n\nIt was slow going; stealth daytime movement is a laborious process, a combination of stalking and crawling.\n\n800 meters took me every bit of an hour and then some. It was 1053 when I reached my goal. Watching across the valley, I saw nothing. So, I spent the next few minutes gathering large, suitable stones.",
        "I heard them first\u2014the barking. Two dogs. Then I saw the search party. Four troops, a dog handler, and two German Shepherds. They were right on our trail, coming out of the foothills into the two-creek valley where Min-Ji had screwed up her ankle. \n\nA troop vehicle rolled up to them as they reached the road. It stopped. One of the patrolmen spoke to the soldier at the passenger window, and then the truck rolled off to the south. \n\nHounds to the hunters, I realized. A simple plan. The hounds were in front of me; the hunters were in that vehicle.\n\nThe man at the back of the group had a backpack with an antenna shooting out of it.\n\nRadio operator.\n\nHow frequently was he calling in their position reports? I wondered.\n\nI watched him closely.\n\nHe radioed in when they reached the first creek. They crossed it slowly.\n\nAt the second creek, they stopped. The dogs patrolled around the ledge, but eventually, they crossed. The German shepherds came together, sniffing at the place where I had wrapped Min-Ji's ankle. The radioman called it in.\n\nThey continued for 600 meters, slowly closing on me.\n\nFinally, they came to the first hill out of the valley. I was 20 meters from them, hidden well, but if those dogs had my scent, too, there would be a firefight very, very soon.\n\nThe radio operator had not called in anything since the second creek.\n\nThis was good.\n\nThe dogs moved in my direction for a few meters before turning and following the route I'd carried Min-Ji.\n\nThe soldiers passed me in a diamond formation behind the dog handler. The leader was in front. To his right-rear was a fella with his sleeves rolled up. To the leader's left-rear was a really short guy. The radioman still brought up the rear. I swept in behind them, still off-trail.\n\nIt had been twenty minutes since the radioman's last update.\n\nThe handler turned, saying something to the team leader. The team leader turned to the radioman and issued some orders. They continued.\n\nAnd the radioman unhooked the handset from his backpack and called Search Control or the vehicle or both.\n\nThat was what I needed to see.\n\nI stepped onto the trail behind the team, weapon at the ready, and closed with them. I had rehearsed this type of situation scores of times. Each of my feet planted into the earth like how someone might lay out a blanket\u2014a reverse peel\u2014for utter silence.\n\nBut I stepped quickly, too.\n\nIn five seconds, I was three meters behind the radioman. No one looked back. The noses of the dogs were buried in the trail.\n\nThe radioman hung up his headset, and I put a bullet in his brain. He collapsed.\n\nThe man to his right\u2014sleeve guy\u2014turned first, glancing at the radioman and alerting the team leader.\n\nThe team leader never had a chance to turn around. Back of the head, one shot.\n\nNow it was instinct. I had to take the risk that the dog handler was unarmed. He had his dogs for weapons, I figured. So, who would be the first to pull his weapon? Sleeves or shorty? \n\nSleeves still hadn't drawn his rifle; he glared at me in astonishment. \n\nShorty was swinging his rifle around, yelling. I cut it off with one shot to the face.\n\nSleeves didn't move. I stepped toward him. He flinched. One shot to the forehead and down.\n\nThe dog handler was hissing at the German shepherds, setting them after me.\n\nI shot him twice in the chest.\n\nOne dog came after me, low and snarling; the other seemed unsure.\n\nI shot snarler in the chest.\n\nThe other dog saw its companion go down and backed away from me. I shot him in the chest, too.\n\nThe whole group had to go down. No choice.\n\n\"Sorry dogs,\" I whispered.\n\nI checked each body. The dog handler had a pair of white women's panties in his coat pocket. \n\nMin-Ji's scent marker, I concluded.\n\nThe short guy's pack contained the dirt-encrusted garments that Min-Ji had buried after we left the intersection\u2014the black shirt and pants and the blackened bamboo hat, now a crumpled disaster. \n\nOne by one, I hauled each corpse back to the creek, weighed them down with the stones I had gathered earlier, and sunk them. The dogs, too. It took about twenty minutes.\n\nI raced back up the hill and cleared the area of my shell casings, mixed the blood into the soil, and swept the area clear of tracks.\n\nIt was 1317 when I began my trip back to Min-Ji.\n\nOne way to make a scent vanish, I said to myself, was to get rid of the dogs.\n\nThe bonus to this side mission was that I had now destroyed their scent items by sinking them in the creek. A new set of trailing dogs would need a new garment\u2014probably not too difficult to find, but it would give us more time.\n\nSlowly working my way back to Min-Ji, I considered what the enemy would do next.\n\nAt first, it would be assumed the radio went bad. The hunters' vehicle would drive back and forth, looking. At some point, a patrol would be sent out to find the team and the dogs. When they were declared missing, I imagined a new scent dog team would be summoned and deployed. \n\nIt gave us time, but even so, I could see the search commander flooding the area with troops looking for any sign of the dog team or us. But, I wasn't worried about foot patrols or vehicular patrols finding our shelter; I was worried about more dogs.\n\nI made it to the tunnel at 1428. \n\nMin-Ji saw me and the fear on her face melted into relief. She whispered my name. \n\nClothes dissipated body heat; I took mine off and climbed back into the tunnel under the solar blanket with her.\n\nShe turned around, curling her back against my front. I held her and not long after, fell asleep.\n\n***\n\nHaving been a part of other covert operations for years, my body was trained to listen, even when I slept, and to rouse the instant I heard something alarming.\n\nThat afternoon, I never did, though my mind registered the distance drone of automobiles on streets and occasionally the closer muffled roar of a military vehicle over gravel roads.\n\nI awakened when I heard MIn-Ji moan. She must've been sleeping, too.\n\nI checked my watch\u20141744. Nightfall approached. Sunset would occur at 1857 tonight.\n\nThen, I noticed it. I had a fearsome erection. Its length squashed into the tender flesh of Min-Ji's butt.\n\nI drew my hips back to create space, and she rolled towards me, eyes open. She whispered something in Korean that included my name.\n\nShe was young and beautiful. I wanted to kiss her. \n\nAnd I wanted to apologize for my erection, but I felt it best to remain aloof. Shit happened. I got a sleep boner. So what?\n\nI pointed to the seven on my watch, and then I signaled that we would go together.\n\nShe backed away from me, brought up her knee in what little space we had, and pointed to her ankle.\n\nI nodded and showed her that I would carry her again.\n\nShe gave a relaxed sigh, nodded, and when she lowered her leg, it brushed smoothly against the tip of my cock.\n\nShe flinched and her eyes darted to mine.\n\nAgainst my will, I ignored it and rolled away from her.\n\nShe put an arm around my chest and drew her front against my back. \n\nFuck me, I thought. Those fucking tits. \n\nThe erection remained.\n\nAt 1828, the damned thing subsided when a foot patrol passed nearby. They had been dropped off by a troop carrier on the road to our east. I had heard the vehicle roll off to the north after the drop.\n\nHiking up the hill toward us, the soldiers did what I expected\u2014they avoided the steep slope and went around us. \n\nNothing like a steep hill, I thought with a grin, to ward off foot soldiers. Always put your hiding place in a spot common soldiers wanted to avoid.\n\nThe closest they passed was 20 meters, I guessed, and they were headed west. Good news. \n\nSurveying my map in the last light of the day, I saw a tank ditch or trench 100 meters south of us that ran just north of east through the next valley. Its exit put us in the next set of foothills. \n\nThe risk was that it might be patrolled. The benefit was that it would be a high-speed axis where I could carry Min-Ji unseen.\n\nIt was worth the risk.\n\nThe key here was separation. Easting would give me that. Plus, the border turned sharply northeast in that direction. Every step would take me further from the main body of bad guys and closer to the DMZ.\n\nI began planning my course beyond the trench.\n\nA helicopter interrupted my thinking. It passed south of us, probably hugging the DMZ.\n\nGone, I checked the time: 1856. Outside, dusk had set in. Time to roll.\n\nMin-Ji and I dressed together outside the tunnel. I could not stop myself from peeking at her breasts. They were fucking beautiful, like the ends of fat artillery shells jutting from her torso.\n\nTo control my urges and focus on important matters, I checked and rewrapped Min-Ji's ankle. The thing was like a bluish-pink softball with toes poking out the front and a heel out the back. \n\nI glanced at her. She nodded determinedly.\n\nOnce we were packed out, I covered up the tunnel, took Min-Ji on my back, and began heading south over the fingers and through the draws that led to that tank ditch.\n\nIt was probably a remnant from 1953, I decided. The DMZ was located along the exact line of the Korean War front on some date back in that year. \n\nOf course there would be trenches and tank ditches, I told myself. Probably some old foxholes, too.\n\nA few minutes later, I saw it through the NVGs\u2014the trench. We began heading east, moving down the hill and into the man-made ditch. A bridge 80 meters away blocked us. \n\nWhen we arrived at the crossing, I found a four-foot culvert passing underneath it. I climbed inside it with Min-Ji on my back and crawled through. On the other side, I switched my NVGs to infrared to help me see any heat sources.\n\nNone.\n\nWe moved quickly through the ditch. At one point a vehicle passed over the bridge behind us, and I had to wait it out. 25 minutes later, we encountered another culvert. This one was at least 30 meters long, and through my NVGs, I could see standing water inside.\n\nThe last thing I wanted to do on a 39-degree evening was to get wet. I needed to make distance. Getting wet would put an end to our travels.\n\nI crept to the lip of the trench and surveyed the area. Fields. The road. No heat signatures. No sounds other than distant motor vehicles. I carried her over the bridge at a run, and we continued.\n\n300 meters further along the ditch, I saw two people through my infrared. They were at the back of a farmhouse, smoking cigarettes. We waited for them to finish and continued. \n\nThe ditch spanned about 1200 meters in total, but we made good time. It was 1957 when we emerged into the foothills.\n\nHere, we were as close as I'd ever been to the South Korean border, about 2200 meters, by my map estimate. How incredible the prospect seemed\u2014to be able to turn south and get out of country in four or five hours.\n\nBut it could not be. That area would be supremely dangerous right now.\n\nMore easting.\n\nI sighed.\n\nMin-Ji adjusted her grip on my body.\n\nI moved out.\n\nWe stopped and drank water from an irrigation ditch. I pumped it through my filter into our canteens. We ate energy bars. I rechecked my route. I rested.\n\nMin-Ji got my attention and mimicked sleep.\n\nI shook my head and signaled I wanted to pick her up again.\n\n\"Ski-pa no,\" she argued.\n\n\"No.\"\n\nShe relented. I took her up, and we continued up and down the hills, up and down.\n\nAt 0416, I had made it to our goal. We were on the western side of a hill, looking down at a paved road running north and south. The border lay just under 1500 meters due south of us.\n\nI began cutting a new tunnel into the side of a short cliff when it started raining.\n\nInstantly I stripped down. Min-Ji did the same. I stuffed our clothes into my pack with the rest of my gear and put it under the low branches of a pine to keep it as dry as possible.\n\nMin-Ji watched from under the same tree as I hacked into the soil and clay, chipping away hunks. It rained harder. Soon, we were both sopping. She curled herself into a shivering ball.\n\nI went to her, wrapping my naked body around hers and rubbing. After a few minutes, I went back to work. Back and forth. \n\nOnce, when I set down the knife and went to her, Min-Ji reached for me. I fell on top of her, and she wrapped her legs around me. My cock and balls rested between her legs, and I felt the soft pubic hairs of her vagina. Chest to chest, I rubbed her body; she rubbed my back, and we rocked together like lovers on the cold wet earth.\n\nI didn't want to leave her, but I did.\n\nI thought about the dangers ahead as I continued carving out our new home. \n\nNo doubt a new scent marker for Min-Ji had been procured along with a new team of dogs. They would have started somewhere near the last check-in point\u2014near where the killing took place. \n\nThe rain on our bodies would not help wash away our scent here at this new shelter. In fact, it probably would accentuate it, but those dogs would have to get close to smell it.\n\nThe rain on our back-trail, however, might help us a great deal. Scent generally comes from flakes of skin. The rain would tend to wash it away\u2014not perfectly so, but it would definitely delay them, for there would be false trails where little rivulets of rainwater carried our scent downhill when we actually went up.\n\nThe progress east I had made through the night would tax not only the men but the dogs, as well. Had I bought us a full day's rest in this tunnel? I didn't know. Maybe.\n\nAbsolutely frozen and almost two hours later, it was done, smoothed out, carpeted with our clothes, and camouflaged.\n\nWe climbed in. When our bodies met under the solar blanket, Min-Ji sighed beautifully. She rolled her back toward me and we nestled together, my arm over her tummy, her arm over my arm. My nose nuzzled into her hair until I found her neck. She hummed sweetly.\n\nI had carried her over seven kilometers on my back that night up and down hills. We slept.\n\n***\n\nI woke with another formidable erection. The skin on skin contact with Min-Ji's ass did not help. The connection between our bodies was warm and soft. It was like her skin sent thrumming pulses of warm energy into my cock and, from there, throughout my body.\n\nI didn't move. It felt too good.\n\nBut, I needed to know the time. I slid my arm free from her and glanced at my watch. \n\n0932.\n\nMin-Ji stirred.\n\nI drew my hips back from her.\n\nShe hesitated for a moment, and then she shifted her body, snuggling back against me. Her ass rubbed my cock as she settled.\n\nI gasped in silence at the strength of the sensation, feeling my erection contract against her.\n\nMin-Ji sighed.\n\nI wanted to touch her, to send her a signal that I wanted her. \n\nNot the time or the place, I told myself. I rolled onto my back and threw my arms behind my head.\n\nDrops of rain tapped the sodden ground outside the tunnel\u2014a slow, steady drizzle. I smelled the air. It was clean, cool, and abundant with the freshness of spring.\n\nWhat next? I thought. What will the enemy do next? What would I do if I were them?\n\nMin-Ji rolled toward me.\n\nI didn't look. \n\nMaybe they would form a picket line, I imagined, but from where? Maybe from the.... \n\nMin-Ji's hand cupped my cheek and drew my face toward hers. She whispered to me in Korean. Her voice sounded high and sweet, full of innocence and trepidation. \n\nI glanced at her breasts. They seemed to leap from her body towards me. So full and soft. Her surging nipples bore the color of dark, creamed tea. The two thick, jutting masses on Min-Ji's demure frame made her seem vulnerable. They were like two enormous jewels that could not possibly be protected by the venue upon which they were displayed\u2014there for the taking, but so beautiful that one dared not even try. \n\nShe continued to speak to me, and her voice grew in sweet, heart-wrenching dread. Her eyes turned pink. The skin of her face became mottled, and she began to weep.\n\nI rolled on my side toward her.\n\nShe said my name, wiping her eyes and breathlessly whispering more words I could not understand.\n\nI put my finger on her lips. \"Min-Ji,\" I whispered. \"No.\"\n\nShe searched my eyes, and she was so beautifully forlorn that I wrapped her in my arms and kissed her lips. \n\nShe squeaked, but not in shock or anger. It sounded more like surprise and gladness. Her body softened in my arms. Her tiny hand alighted upon my chest.\n\nI groaned into her lips when my hand cupped the broad heft of her breast, feeling the rigid nipple tickle my palm. \n\nI didn't ever want to let go, but I released in order to slide my hand over her ass and draw our bodies together.\n\nMin-Ji gasped when my erection slid up against her little patch of hairs. The tip drove through the fur and slid along her skin until it rested upon her navel. My testicles nestled into her pubic hairs.\n\nNot wanting to part my body from hers, I reached behind her ass and lifted her leg. My fingers crawled there, seeking and finding, rubbing and sliding. \n\nThen, delving.\n\nMin-Ji almost silently moaned on my lips. Her pussy lubricated my middle finger instantly. I inched the digit back and forth in the yielding, but taut grip of her body.\n\nHer hand glided down my tummy. Her fingertips found and tentatively caressed the shaft. \n\nI broke the kiss. I could see in her face every response to my finger. Her eyes closed, her lips parted, she moaned, and she tipped her head back as if lost in ecstasy. \n\nShe had forgotten about my cock, drowning in her own pleasure. \n\nWhen my lips met hers again, she gasped and responded boldly, thrusting her tongue in my mouth as if the kiss was exactly what she desired at that moment. Her body began to undulate upon my finger.\n\nNot long after, Min-Ji voiced a breathless climax into my mouth. Her orgasm was a kind of surrender\u2014languid and yielding. I felt her body contract on my finger, but only there. The rest of her melted slowly. Her arrestingly sexy and feminine orgasm lasted almost a minute, it seemed, and then she broke the kiss with a sweet sigh, relaxing completely.\n\nI kissed her cheek, her chin, her neck, and her chest.\n\nI kissed her breast once. Twice. Three and four times. And then I took a nipple into my lips while my hands explored her thighs and her ass\u2014feeling, rubbing, and massaging. All the while, I gently thrust my cock against her leg.\n\nA minute or so after I had begun, Min-Ji began to speak to me again. I glanced up at her. She kissed my forehead and continued talking. She spoke with mounting energy, always a whisper, but one becoming ever more enthusiastic.\n\nThere was amazement in her words\u2014and joy, it seemed. She was like a person absolutely dying to tell her story to someone. At one point, she drew my face from her breast, and cupping my cheeks with both hands, she laughed quietly as if telling me the most jubilant part of her tale.\n\nI resumed licking and sucking her nipples. Then, her voice grew even more hushed. She sounded serious and nervous.\n\nI quit and glanced at her.\n\nShe swallowed and whispered my name. She moved, creating space between our bodies. Her fingers pinched at the edge of the solar blanket. She drew it off of us, and she stared at my penis.\n\nMin-Ji glanced at me and spoke. Had it been a question?\n\nI had nothing to say.\n\nShe gazed at my cock, still whispering. Then, she curled up her knees and began to scoot further into the tunnel. Down. Down.\n\nI helped her, scooting up toward the opening. Soon, Min-Ji's mouth and the head of my erection were level. She spoke to me.\n\nTentatively, she reached for my cock and grasped it in her gentle fingers. The tip was fractions of an inch from Min-Ji's lips, and she whispered. I felt the air in tiny pockets, washing over the throbbing head. \n\nShe closed her eyes, still whispering, and it seemed to me like a kind of prayer. Not long after, she pursed her lips, and I watched her kiss the very tip of my erection. She drew back and glanced up at me. Her eyes were a mixture of anxiety and excitement.",
        "She's like a girl who knows exactly what to do, I thought, but has never done it before. \n\nMin-Ji's tongue squeezed from between her lips, and it touched my penis and drew back. She spoke again in a kind of hushed awe. Then, with her tongue barely out of her mouth, she licked precisely over the slit of my cock's exit.\n\nDrawing back, she looked at the place where she had licked, surveying the new stripe of saliva she had deposited. She licked again. Then, she spoke to my cock. \n\nHer words were unknown to me, but the tone was soft and loving, albeit with a few halts and stammers from her apparent nerves.\n\nMin-Ji glanced at me again, uttering excited words before lifting my cock to my stomach and taking in the sight of my testicles. She spoke again, and she kissed each one. Her other hand slid up and caressed the sack, gently rolling the balls over her fingertips. \n\nShe seemed to be talking about what she was doing. Then, her eyes met mine despite the intrusion of my erection. She said my name and drew herself up level with my cock again. \n\nGrasping the shaft, she aimed it into her mouth. She whispered a final phrase, closed her eyes, and parted her lips.\n\nI watched the mushroom tip distend her lips. Min-Ji's jaw fell open as she welcomed more and more of the shaft into her mouth. She hummed a tiny squeak and ceased the progress. I felt her tongue slither on the underside, and then she slowly disgorged the few inches she'd managed to take in.\n\nWith a gasp, she glanced at me eagerly.\n\nI nodded.\n\nShe whispered something to me and smiled. Then, she whispered to my cock again and resumed.\n\nUltimately, she managed to engulf about half of my cock, and from there, she very slowly bobbed upon it. She was almost continually swallowing. I felt the brief tugs and the little flexes and responses that sent undulations throughout her mouth.\n\nI caressed her hair and whispered her name.\n\nWhen she held in place at the deepest point she could manage, I grunted, feeling the hot power of my climax surge forward, closer.\n\nI could see that she felt the contractions in her mouth. \n\nShe looked at me, her jaw straining to encompass and contain the thick living pipe. \n\nSomething about her expression swept me to a newer, higher peak. And it was the feel of her mouth, her lips, and her tongue, too. All of it. I felt a ripple of hot effervescence roll down my body to my feet. My toes flexed outward and the soles of my feet prickled and buzzed in response to the shocking pleasure.\n\nI cursed through gritted teeth. \n\nShe drew back to the tip, and I felt the dizzying rush begin to explode from me. \n\nQuickly guiding her back down the shaft, I gently held her in place. Cum burst from the tip into her mouth. More. I felt like my head would explode. \n\nMore.\n\nFuck me it was good. \n\nI felt her gather and swallow, gather and swallow. With every ingestion, she squeaked.\n\nMore. Fuck me, it was the greatest blowjob I'd ever had. \n\nDon't stop, Min-Ji. Shit.\n\nShe swallowed one final time, and it ended.\n\nLetting out a long, whispering groan, my body sagged into resignation.\n\nA few seconds elapsed before I felt Min-Ji expel my cock; I heard her gasp.\n\nI breathed deeply for a few seconds, and then I drew her up to me, kissing her forehead. She looked at me expectantly, her eyes reddened from the exertion. I said her name, smiled, and held her body close to mine.\n\nFuck, that was good. I needed that.\n\nShe fell asleep in my arms.\n\nAs the lingering pleasure ebbed and passed, I listened outside of the tunnel, quietly cursing myself for neglecting my duties.\n\n***\n\nBy my map, I had put thirteen kilometers between us and the intersection. The South Korean border varied between about 1.5 kilometers and 5 kilometers from that straight line. I guessed the North Koreans had about 40 to 45 square kilometers to search.\n\nThey needed luck or dogs. There was no way to get enough people to form a picket line long enough to walk north from the border, outstretched arm to arm, and find us. No way.\n\nIt had to be more dogs. Had to be.\n\nAnd, sooner or later, those bodies might be found. A swift current from the rainfall might loosen the dummy cord from a sinking stone, and suddenly, a floating foot would appear. They would know they're looking for more than one scent, and they might be able to find mine.\n\nWhy hadn't I planned for dogs? I pondered angrily.\n\nBecause I never considered having to hole up and stay in country, I knew. Kwan shows, we go. He doesn't show, I go. Kwan gets hurt, I make a decision: if he can move reasonably well, we go. If he can't, I kill him. Either way, I planned on being out before sunrise.\n\nBut he became she. She wasn't some grizzled old prick of a Colonel. She was an eighteen-year-old innocent who was probably being used for a political purpose. I could not bring myself to kill her.\n\nSo I was still in country, and if I had planned for dogs, I could have foiled their hunt. There were techniques, artificial scent markers. I remembered the training.\n\nWhat they were probably doing now, I imagined, was getting bloodhounds\u2014the real scent dogs. German shepherds were better warriors than scent dogs. Bloodhounds were bred for scent. They were unmatched at trailing.\n\nThey would be getting bloodhounds, then, and sending them out randomly, hoping to seize upon our trail.\n\nIt was infuriating, thinking our escape was now at the whim of chance and not my own force of will.\n\nI made a decision, right there.\n\nIt was 1044. The rain had stopped, and the air temperature was climbing, already in the high 50s.\n\nI climbed out of the tunnel, got dressed, and took up a post watching the north-south paved road in front of us.\n\nI was only about 15 meters from the tunnel, lying prone with cammy netting over my head and arms.\n\nIt was a paved road, but two regular-sized vehicles could not pass abreast, much less two military ones. \n\nI was looking for three things. First, I wanted to know all of the types of vehicles that traveled on this road. Second, I wondered how frequently by type each vehicle was used. Last, I hoped to uncover some predictability, some routine, to at least one of them.\n\nHell, the North Korean delivery driver who picked me up from the beach during my infiltration had a routine. Maybe the civilians or military here did, too.\n\nChecking-in periodically with Min-Ji, I observed the road for two hours. During this time, I saw four UAZ-3151s\u2014basically a covered military Jeep. I counted two Ural-4320s, these were six-wheeled troop and equipment carriers. I saw a FAW-MV3\u2014another six-wheeled cargo truck. Finally, I watched a civilian truck, a white Sangri, roll through.\n\nAs I walked back to eat with Min-Ji, I heard the buzz of a four-cylinder car. I ducked and watched. A non-military blue GAZ\u2014an old Soviet sedan\u2014zipped past, heading south. The thing had to have been from the 1980s. It turned right into a drive not more than 200 meters south of us. I watched it park beside a long, one-story building. \n\nA civilian man emerged, carrying a paper sack in his arms. He went into the building.\n\nI went back, ate with MIn-Ji, and returned to watch the road.\n\nMore of the same, but the blue GAZ remained.\n\nAt 1800, I got Min-Ji out of our tunnel to dress and get ready for travel. A few minutes later, all of our gear was ready at a moment's notice. I put her back in the tunnel and pointed at the eight on my watch face.\n\nThen, I hit our back trail as the sun began to set.\n\nI didn't want to spend more than two hours. I was trying to get a sense of the intensity of their patrols in the area. Just how close, I asked myself, were they to us? \n\nAbout 20 minutes later, I found a spot with a commanding view to the south, west, and north. From the position, I also knew that no one could sneak in behind me and get to Min-Ji without being seen.\n\nTelling myself I would punch out at 1940, I switched my NVGs to infrared and scanned.\n\nDeacon had told me Defense Clandestine Services equipment was state of the art. He didn't lie. The infrared setting on these NVGs put special forces ones to shame. These could see much farther and clearer. What's more is that they could penetrate foliage and twigs. \n\nWe jokingly called them \"X-Ray Specs\" for that reason, and yes, if I had wanted to get a good look at Min-Ji's body through her clothes, with my X-Ray Specs set to infrared, I could have.\n\nThough, of course, I now knew pretty well what was under there. The memory brought a smile to my face as I listened and watched.\n\nI never made it to 1940. I rolled well before.\n\n\"Rolled\" isn't the right word. I launched. I ditched. I pulled the ejector handle.\n\nI fucking sprinted out of there.\n\nSometime shortly after true nightfall, I saw the heat signature of a squad-sized patrol\u2014about 12 soldiers. They were led by dogs\u2014four of them. They were about 1000 meters away.\n\nThey were on our trail.\n\n\"Mother fuck!\" I hissed, turning tail and rocketing back toward the tunnel at flank speed. I no longer cared if I might be seen. It didn't matter anymore. I would shoot and keep running. Nothing but escape mattered now.\n\nThey were back on our trail. They had Min-Ji's scent again or they had mine\u2014or both. With squad-sized patrols, it was likely they had found the bodies I Ieft in the creek. No way I could engage a squad without alerting the whole fucking DPRK army to our location.\n\nLeaping down the short cliff, I threw open the tunnel and hissed, \"Min-Ji! Now! Go!\"\n\nI hauled her out and threw her on my back, careful to cover the tunnel and make sure every item of our gear was in hand. I ran with her to the place where I'd seen the GAZ.\n\nThere really was no other choice.\n\nAlong the side of the slope, I duck-walked with Min-Ji on my back until I could set her down against the side of the one-story building.\n\nHow close were my pursuers now? My run back to the tunnel would have helped me gain on them. Getting to this building would have made me lose ground. Still at 1000 meters, but closing, I guessed.\n\nCreeping from window to window, I listened. Chatter and conversation. Perhaps ten or fifteen people in a single area. Children's voices.\n\nFood. I could smell food. \n\nDinner time.\n\nI did a slow circuit around the house, listening and scanning, to confirm my supposition.\n\n900 meters.\n\nThe low ground to the east seemed clear, but I checked with infrared and night vision to be sure. The road was clear, too.\n\nI went to the car. Windows up. Door unlocked. \n\nOne more thing to check. \n\nI deserve some luck, I thought. We deserve it. \n\nI gently opened the car door and looked.\n\nFuck. No keys. And bursting in that building and demanding the keys was not an option.\n\nWhat if they wouldn't give them up? Was I prepared to start shooting? Civilians and kids? Fuck, no.\n\nI knew other ways to start the car, but was there time enough? \n\n800 meters from us.\n\nDidn't matter. Had to try.\n\nSetting my pack in the passenger seat, I bent under the steering wheel and looked up. Four plastic Phillips screws. I pulled out my All-Purpose Tool, slid out the Phillips screwdriver, and went to work. The trim covering the steering column came off in a jiffy.\n\n700 meters. Scent getting stronger.\n\nNow for the ignition switch. I needed to find where the electrical circuitry for the starter met the mechanical switch\u2014where the key went.\n\nIt was covered by an aluminum box with four tiny nuts. I switched to my needle-nose pliers, tucking away the screwdriver. \n\nThe jaws slipped off the first nut.\n\nThey slipped off again.\n\nI tried a different nut, and they grabbed. Two twists, and the rest I did with my fingers.\n\n600 meters.\n\nNext nut. Got it. Same-same.\n\nThe third little nut was at a tricky angle. I missed twice but got it on my third attempt. My fingers couldn't get in there, so I had to take the time to twist it off with the pliers.\n\nGot it. \n\n500 meters. \n\nOur scent was getting stronger, I thought. Dogs probably closing faster, tugging at the leashes.\n\nWhen would they set loose the four of them on us? Soon. Fuck. Soon.\n\nLast stubborn nut. The pliers slipped off. And again. Fuck! And again!\n\nI pulled my face up to scrutinize the fucking thing.\n\nStripped.\n\nThe fucker was stripped.\n\n400 meters.\n\nFuck it. I dug my fingers under the diagonally-opposite corner from the stripped nut and yanked the fucker as hard as I could.\n\nIt snapped off.\n\nThere were the wires! Three tiny flat-head screws held the housing together.\n\nSwitching tools, I began unscrewing each.\n\n300 fucking meters. Shit! Shit!\n\nI stopped. \n\nBaying. I heard the baying of hounds. \n\nPanic seized me. Keep going or get Min-Ji and put her in this car right fucking now? She's got to be pissing herself.\n\nThe passenger door opened. \n\nI drew back and swung up my rifle.\n\nMin-Ji. It was her. I sighed, but in my head, I was singing her praises for her presence of mind. Yes, crawl your ass over here. Thank you.\n\nBack to those screws. Two out, one to go.\n\n200 meters. If they see us in this car, we are dead. They'll call it in on their radio. Choppers will be all over us. Dead.\n\nGot the screw out and drew the housing apart. The key cylinder unscrewed, and I threw it aside. Looking inside the hole it left behind, I saw what I needed. \n\nThank goodness for old cars with mechanical tumble-lock ignition switches!\n\nI switched to my needle-nose pliers, reached inside to the tab, and turned it right one click.\n\nI twisted the steering wheel. The steering column was unlocked. \n\nTurning another click, the battery engaged.\n\nFuck, yes.\n\n100 meters.\n\nRising, I threw my shit in the back, and I closed and locked the doors. Min-Ji stared at me wide-eyed.\n\nI shifted the seat back to accommodate my legs.\n\nHoping like hell the families inside the house were too busy with conversation and grub, I twisted the pliers one last time.\n\nThe engine turned over.\n\nAnd over. Fuck me, 75 meters? Less?\n\nThe GAZ started.\n\nI threw it in reverse and eased backward out of the driveway.\n\nScanning the street, I saw that all was clear. I pulled on the headlamps, backed onto the road, and turned north. As I passed the hill with our tunnel, I thought I saw movement.\n\nCould have been dogs.\n\nHoly shit.\n\nWe drove away. Our scent trail was cut off. \n\n***\n\nThis, I said to myself, is the best way to thwart scent dogs\u2014get in a fucking car and go. Those soldiers would find out about the car, I knew, but they hadn't seen us in it. \n\nThe road hugged the hills to the west, curving northward. After a kilometer or so, I pulled aside.\n\n\"Min-Ji, can you drive?\" I asked, pointing at her and the driver's seat, then pointing at her and mimicking steering the car.\n\nShe nodded. \"Ye!\"\n\n\"Come here,\" I waved her over. She climbed onto my lap, and I scooted under her to the passenger seat.\n\nShe moved the seat forward. I pointed down the road. She pulled out, and we were off.\n\nChecking the map, I saw a major intersection about another kilometer in front of us.\n\nDid they have the roads blocked? Would there be a checkpoint?\n\nI would have checkpoints, I thought, if I were them.\n\n\"Slower,\" I said, pointing to the gas pedal and angling the flat of my hand back and up. \"Slow down.\"\n\n\"Ho-kay,\" she said, easing off the gas.\n\nRe-checking the map, I looked for an alternate route.\n\nA turn-out lay ahead\u2014one that might be able to take us far away from any checkpoints. When I saw the gravel road out the windshield, I said, \"Min-Ji!\" She watched me point out the new route.\n\nShe slowed and turned.\n\n\"Lights off,\" I said.\n\nMIn-Ji continued to drive.\n\nI lined across her and turned off the lights. Min-Ji cried, \"Ah!\" And brought the car to a stop.\n\n\"Yes,\" I said. \"Stop.\"\n\n\"Staw?\" she responded as I reached into the back and grabbed my NVGs. Donning them, I switched from infrared to night vision and scanned the road ahead.\n\nI saw what I needed and pushed the goggles up from my eyes.\n\nWe looked at one another. I held out my right hand. \"Right,\" I said, mimicking spinning the wheel clockwise. \"Left,\" I said, putting out my left and spinning counterclockwise.\n\n\"Right,\" I said with my right hand out.\n\n\"Rye,\" she said.\n\n\"Left,\" I said, throwing out my left.\n\n\"Leff.\"\n\nI nodded and pulled down the NVGs. \"Go,\" I said.\n\n\"Ho-kay.\"\n\n\"Slowly,\" I added.\n\n\"Slo-lee,\" she said.\n\nWe went along, veering toward the left shoulder.\n\n\"Screw it,\" I snapped, grabbing the wheel and putting us back on in the center of the road.\n\nScanning left, we came upon our turn a few seconds later.\n\n\"Left,\" I announced, pushing the wheel hard over.\n\nMin-Ji turned it the rest of the way.\n\nOnce on the new road, I corrected us to the right, and we were headed north again.\n\nThe road wound into a low foothill, but it came out on the main road after about two kilometers. I held the wheel and helped her turn, handling all right ones and assisting her on the lefts.\n\n\"Stop,\" I said as we closed with the intersection. Min-Ji was beginning to understand that one. She stopped us bout 250 meters from the junction.\n\nI switched to infrared and examined ahead.\n\nNo guards.\n\nI switched back to night vision. Adjusting the focus and scrutinizing the map, I looked for a turn off the main road once we were on it.\n\nThere were several.\n\nI flipped the map over and scanned further north. We needed to ditch this car and soon.\n\nWord would be out. The dogs would have led the squad to that building where I stole the car. The people there would see the missing car and describe it, and then the patrol would send out the word\u2014stop any blue GAZ, extremely dangerous.\n\n\"Go,\" I said, and we went.\n\nAt the intersection, I said, \"Right.\"\n\nShe turned us, and I helped.\n\nOnce we were on the main road and moving, I turned our headlights on. \n\nMin-Ji's voice sounded relieved and a bit sarcastic when she spoke.\n\nThe road bent hard north. We followed it, winding into foothills. I noticed that had we turned west, the road would have eventually led right back to the intersection where we first met.\n\nHeading north, I was no longer worried about roadblocks or checkpoints; this path was taking us further from the DMZ, even though the border turned sharply north in these parts.\n\nShe followed the road for another 10 minutes before I asked her to slow down and had us make a left. We kept the lights on while we wound through a valley around a few acres of farmland.\n\nAs the road began to bear north, I said, \"Slow.\"\n\n\"Slo,\" she repeated.\n\nThen, I reached across her and said, \"Lights off.\" I pushed the headlamps off.\n\n\"Lye-Aw.\"\n\nUsing my NVGs, I guided her the rest of the way.\n\nAfter a few hundred meters of left and right curves to keep us on the gravel road, I said, \"Stop.\"\n\nClimbing out, I peered through my NVGs and walked ahead. After about 75 meters, the road turned hard right so that one could circle the farm completely. \n\nI ignored the turn and forged ahead, coming to a low bank. \n\nCould the GAZ make it over this? I wondered as I mounted the small slope. Beyond it, the ground sunk. Lower. Lower.\n\nI heard the water.\n\nI saw it through my NVGs\u2014the river.\n\nThis was the tributary that led to the Imjin River. All of those creeks and wetlands we had passed over, everything ultimately led to the Imjin River, which flowed through the DMZ to South Korea and connected with the larger Han River. The Han emptied into the ocean at the Yellow Sea on Korea's west coast. \n\nI ran back to the car. \n\n\"Follow me,\" I said to MIn-JI.\n\n\"Fwo-lo,\" she responded.\n\nI walked in front of the car, leading her to the river.\n\nOn the edge of the short bank leading down to the river, I stopped Min-Ji. She got out. I climbed inside and inched the GAZ to the very precipice before parking.\n\nMin-Ji and I spent a few minutes gathering heavy stones and loading both the passenger area and the trunk. Afterward, I slashed all of the tires. Finally, from outside of the vehicle, I stuck my foot on the brake and put it in low-drive. It teetered for a moment, and when I shoved it, the car rolled down into the river.",
        "We watched it sink. I threw on the NVGs to make sure it was completely submerged. It took about five minutes, but it worked.\n\n***\n\nOn the positive side, Min-Ji and I were more than ten kilometers north of our last hideout. There was no chance in hell any dogs had our scent trail. \n\nOn the negative side, DPRK troops were aware that Min-Ji had at least one armed operative assisting her escape\u2014me. They knew I had killed. They knew we stole a car, and there would be a massive manhunt for us. Finally, we weren't 1600 meters from the border anymore; we were about seven kilometers away.\n\nThere was precious little to celebrate. \n\nI refilled our canteens with filtered water from the river. Then, I took her hand, helped her onto my back, and began to move into the hills to the east.\n\nThat's when we heard the helicopter. A searchlight beamed down to the ground about 800 meters south of us, scanning the roads. The chopper zipped away to the west.\n\nI checked my watch: 2108. I continued.\n\nOnce in good cover, I stopped us and checked the map.\n\nThe paved road\u2014the main drag\u2014we had earlier been on bent to the east and hugged the Imjin River. The bad guys would probably know we took that road, and it would soon be extremely dangerous. We needed to stay away from it.\n\nBut, as I scanned the map, it became clear to me that the only relatively safe route was east, across the road before it became too dangerous.\n\nBut where from there? I scrutinized the map. \n\nSoutheast into the hills, I decided. It would be safe, and I could make more decisions from there. It was about three kilometers away.\n\n\"Min-Ji, let's go.\"\n\n\"Go.\"\n\nLess than a kilometer from us lay the road crossing, and it ended up being fairly easy\u2014a 120-meter sprint with Min-Ji on my back. No cars appeared, and we disappeared into the hills.\n\nHelicopter patrols continued circling the area. Twice we had to leap on the ground and freeze with our cammy netting pulled over us. We saw no troops.\n\nAt 0147, we arrived at a hillside covered in pines near the river. I set down Min-Ji, stretched, and rehydrated. She ate the last of her three bars. I had two left.\n\nThat was something to consider at a later time.\n\nThe map showed me a few things. First, it was clear that if I remained west of the Imjin River, while the terrain offered greater concealment, the more I traveled south toward the border, the more outposts and garrisons I would encounter. The east side of the river had fewer enemy outposts, but a lot of low, exposed ground in the river valley. \n\nPlus, it was a no-shit river, 50 meters at its widest, maybe slightly under 20 at its most narrow. \n\nYou can't just ford it in this cold, I thought, can you? \n\nThe river was just 150 meters from me. I pulled down the NVGs and checked it out.\n\nWith all of the rains, the water moved along swiftly. I scanned east to west, and I stopped. \n\nA narrows. Rocks with rapids running around them. A person could skip from rock to rock and stay dry.\n\nShit, I thought, I could get across right there. More exposed, low ground over there, but way fewer bad guys.\n\nCould I make the jumps with Min-Ji on my back?\n\nScanning along the western side of the river, I could see lighted facilities, distant helicopters, and vehicles. Surveying the east, I saw darkness.\n\nWe're crossing if I can. Need a closer look.\n\nI picked up MIn-JI and moved down the hillside to the low ground. There, I low crawled the final 100 meters to the river's edge with her on my back.\n\nWhen Min-Ji saw me examining the rocky rapids, she said, \"No. Ski-pa, no.\" Then, she rattled off some Korean.\n\nI shushed her and mentally mapped each step of the crossing. The tops of the rocks were not wet, and that was the key.\n\nI can do this, I decided. After one last infrared scan around me, I picked up Min-Ji.\n\nShe protested, and I shushed her again.\n\nHer arms clutched me tightly, and she began moaning as I stepped to the edge of the river.\n\nFirst jump. \n\nBoom, safe.\n\nA few easy steps and then my next big jump. About five feet.\n\nMin-Ji whined.\n\nI jumped and stuck it.\n\nThe river whistled through these rocks, and at about the halfway point, I scanned around me and felt nervous about this decision for the first time.\n\nThe next boulder was also about five feet from me, but the top wasn't flat; it was oblique and pointy. The rock after that one was maybe three feet beyond the pointy one, and it had a nice flat surface.\n\nTwo jumps, back-to-back.\n\nI rocked once, twice, and I jumped hard.\n\nToo far.\n\nMy right foot landed just beyond the tip. I shoved off of it, but it was an awkward jump.\n\nI had to land on my hands and knees.\n\nI did, and with Min-Ji on my back, it didn't feel too good.\n\nI remained on my knees, recovering, and to my relief saw that the rest of this crossing was steps. No more jumps.\n\nFour steps, though the last one looked a bit questionable.\n\nI rose and made the first three.\n\nThe last one was submerged. Three feet in front of me, it had a reasonably flat surface, but damn did the water look fast. Beyond it, about three more feet away was the bank.\n\nFuck it, I decided, I'm jumping the whole thing. Six feet with 90 pounds on my back and the rest of my gear.\n\nMin-Ji felt me prepare for the jump. Her fingers dug into my chest. With a grunt, I hurled myself for the bank.\n\nMy left boot sunk into the muddy edge, but my right swung through, carrying my momentum onto the bank. I fell forward, and Min-Ji tumbled over me. I rolled onto my back, and we both lay on that bank, panting.\n\nTime on deck 0225.\n\nNo time, I knew, to lay about. I needed progress.\n\nI crawled over to Min-Ji and put her on my back. There was 600 meters of low ground between us and the first of the hills.\n\nI fucking low-crawled it.\n\nI thought I knew what exhaustion was. The low crawl taught me a new level. My shoulders were on fire. The rest of my arms felt like dead animals.\n\nWe made it to the hill at 0346.\n\nTo our right was a dam, one of many, I knew, on this river. I knew we had to go on. It was the last thing I wanted, but we had to.\n\nI rose to my knees. \"Min-Ji,\" I whispered, waving her to my back.\n\n\"No Ski-pa go. No go.\"\n\nI waved her over again.\n\nShe whimpered and climbed on. I continued southeast into the hills.\n\nWe made another 1600 meters progress. It was 0502 when I began to cut us a new tunnel.\n\nSofter earth, I finished as the sun rose.\n\nI didn't need to look at the map. I knew how close we were. The border was two kilometers away. The first of the two fences was a mere 200 meters from us.\n\nMin-Ji climbed into the shelter naked.\n\nI climbed inside after her, too tired to undress, but she carefully removed all of my clothes for me. She massaged my back and shoulders. I felt the light touch of her lips on my shoulder blade as sleep swept me away.\n\n***\n\nI awakened to the feeling of my erection being stroked and my ass being gently kissed. \n\nI was on my left side. MIn-Ji was behind me; she had scooted down inside our tunnel and reached over my hip to grasp my cock. \n\nI felt her back there. She kissed each cheek several times. She cuddled against my ass with her face. She whispered things\u2014to me or to my body, I had no idea. She kissed more\u2014little pecks, but soft ones, infused with tenderness. \n\nIf my body reeked of perspiration, of river water, of not being able to shower for days\u2014she didn't seem to care.\n\nHer hand felt warm and soft. She held my cock with a firm, but delicate grip as one might hold a precious pet for the veterinarian. She stroked me very, very slowly. It was as if she didn't wish to wake me, as if she simply wanted to enjoy the feel of my erection in her hand.\n\nHer body moved; I felt her inch upward. She kissed my lower back, and I felt her nipples poke the flesh of my ass. Then, it was her breasts. She pressed them against me and dragged them over and back again.\n\nI rolled toward her.\n\nShe looked up at me and blushed over a shy smile.\n\n\"Ski-pa yes?\" she whispered.\n\nTwo-hundred meters from the fence, there would be patrols\u2014close by. They might even walk right past this tunnel. I needed to remain alert. A distraction now could be deadly.\n\nAbout to shake my head \"no,\" I saw my cock bulldozed against one of Min-Ji's tits. I opened my mouth to speak, but I couldn't. My heart began to thump harder in my chest. \n\nAnd MIn-Ji looked so eager and young. And those tits were so fucking big on her little body.\n\nI reached down and rearranged my cock, placing the shaft neatly in the cleavage.\n\nWatching the snug placement of my erection, Min-Ji whispered something as if surprised. Her eyes were wide when she looked at me and finished speaking. She leaned forward and kissed my belly. Then, her eyes went back to mine, and she waited.\n\nI drove my hips and gasped.\n\nMin-Ji's mouth fell open.\n\nAgain, I thrust my cock into the soft breach. I was hard like gun steel now\u2014so rigid that, despite the mass of Min-Ji's breasts, the tip began to slip out.\n\nMin-Ji blinked and spoke to me. Then, she reached down and, cupping her higher breast and drawing it against my cock, she ensnared the shaft inside her supple, downy cleavage.\n\nQuick learner, I thought. I began to rock my hips.\n\nMin-Ji watched me and whispered to me. When I couldn't help but respond to the intensity of my pleasure, her eyes widened, scanning and searching my face, reading my reaction. When I said her name and whispered, \"Yes,\" a timid smile unfurled upon her lips.\n\nI wanted to thrust harder\u2014her body summoned that ferocity out of me\u2014but I didn't need to. My blood was already lit. My body soared. I fucked her tits gently and quietly.\n\nThe satisfaction grew so acute, I pinched my eyes shut and stifled a groan.\n\nMin-Ji let slip a tiny squeak of a moan.\n\nIt swept me to the end. \n\nShe felt it, turning to watch. Together, we watched the head of my cock flush and plume in the tight gap between Min-Ji's thick breasts while streams of cum jettisoned free. The fluid dashed her neck and coated her chest.\n\nWhen the flow ended, Min-Ji sighed. I caught my breath.\n\nMin-Ji rolled onto her back and pushed herself up to me. She whispered something and kissed my nose.\n\nI was so perfectly relaxed that I didn't want to ever move. I wanted to watch her, right there as she was, for as long as I could.\n\nMin-Ji began to play with the semen on her chest. She dipped her finger into it and felt its texture with her thumb. She pressed a finger into the fluid again. This time she lifted the tip straight from her chest, watching a gossamer line of cum stretch between the two points, thinning until it finally broke. \n\nShe giggled and whispered.\n\nShe scooped a dollop and smelled it. She closed her lips over it. I watched her cheeks suck inward, and her finger emerged clean. Her eyes darted to mine and she gave me another shy grin.\n\nShe scooped another\u2014larger\u2014amount. Holding her hand near to the top of our tunnel, she pointed her finger down. Together, we saw gravity take hold of the thick glob and drag it to the very tip of her index finger. \n\nMin-Ji's mouth opened. Her tongue emerged flattened, waiting. The drop fattened, remained for a few seconds, and fell. A tiny whimper eeked from her throat as the semen landed on her tongue, and she instantly swallowed it.\n\nImmediately after, she sucked the fingertip clean and scooped yet another glob.\n\nShe spoke, offering the finger to me.\n\nI shook my head.\n\nShe shrugged and licked it off, speaking in an excited whisper. Continuing, she swept up and swallowed the rest of my body's deposit. When she finished, she kissed my forehead.\n\nI was getting drowsy. I held my finger to my lips and pointed out of the tunnel. \n\nShe nodded and put her finger to her own lips. Then, she rolled away and backed into me. \n\nI wrapped my arm over her, clutching one of her breasts, and I slept.\n\n***\n\nI woke with a start, instantly cupping my hand over MIn-Ji's mouth. \n\nFootsteps nearby.\n\nNo chatter\u2014these were disciplined troops.\n\nI counted at least seven, so it was likely more, spread out over a much larger frontage.\n\nA sprinkling of dirt rained down upon the solar blanket. Suddenly, a soldier dropped into view directly in front of the tunnel entrance. He must have leaped down the bank into which I built our shelter.\n\nMin-Ji and I absolutely froze. I don't think either of us breathed.\n\nHe remained there for a moment. Scanning left and right, I saw the Type-58 rifle in his arms at the ready position. Then, he moved on in a direct line away from us.\n\nPeering through the tunnel's camouflage covering, I saw a soldier on both flanks of the first one, spaced at about 10 meters. The one on the right stopped and looked back. \n\nI uncovered MIn-Ji's mouth and slowly reached for the rifle behind me, wrapping my fingers around the stock.\n\nThe soldier's eyes crossed over our shelter but didn't stop. Apparently satisfied, he continued onward to the east.\n\nWhen I could no longer see them, I waited another five minutes, listening intently. Hearing nothing, I sighed.\n\nMin-Ji did, too. She rolled over and wrapped her arms behind my neck. I let her kiss me, and her lips were firm and energized as if in an outpouring of relief.\n\nWhen she drew back, I checked the time. 1326.\n\n\"They won't be back,\" I whispered to her, knowing she could understand me no more than I could her. \"They'll consider this area clear for the time being.\"\n\nShe shook her head.\n\nI smiled to let her know it was good news.\n\nShe kissed me again, and this time I kissed her back. Our tongues joined and caressed. Her body seemed to melt beside me. The change felt like a bodily sigh, a kind of rendering of herself to me.\n\nI grew hard.\n\nMy middle finger found the heat between her legs, and her body bathed the digit in slickness as it passed inside of her.\n\nShe whimpered sweetly into my mouth.\n\nFuck, I wanted her. I broke the kiss\u2014still fingering her pussy\u2014and surveyed the tunnel. There was no space to get on top of her. The best angle would be on our sides from behind. I cursed to myself because I wanted to see her face.\n\nMin-Ji watched me, her eyes barely open, her mouth agape.\n\nAbsolutely beautiful, I thought, driving my finger into her. I realized, then, how good my finger felt. I knew it was good for her, but I could not believe how snug, how tautly embraced my finger felt inside of her.\n\n\"Ski-pa,\" she airily cooed.\n\nI drew my finger out of her, and I rolled her over. Inching closer, my cock slid between the two hills of her ass.\n\nHer face turned toward me, and I leaned in to kiss her, feeling the head of my cock nestled against her anus.\n\nI reached down, grasped my cock, and brought the tip under her until the tip pressed firmly against her pussy. I felt the opening of the tight passage.\n\nMin-Ji whispered to me. She shook her head.\n\nI stopped.\n\nWe stared at one another.\n\nI reached over her and raised her thigh. Nudging my hips, the tip of my cock parted her labia and garnered a coating of her fluids. I held in place.\n\nMin-Ji whispered to me\u2014hushed, urgent words. Her lower lip trembled as she spoke. Her face seemed pallid. Fear radiated from her eyes.\n\n\"No?\" I asked gently.\n\n\"No-no,\" she whispered, finishing with a few words in Korean.\n\nI shifted my body to move away from her, but her hand clutched at my hip. \n\n\"No-no,\" she repeated as if clarifying. Then, she whispered, \"Yes.\"\n\n\"Yes?\" I asked, maneuvering the head of my cock back to that slick, warm cleft.\n\n\"Yes,\" she murmured, nodding and adding some desperate last words in Korean.\n\nI held her hip and applied gentle, unyielding force. \n\nMin-Ji's face immediately contorted. She bit down on her lower lip; her eyes pinched closed. The strain flushed her skin. Veins arose on her neck and forehead. She had been holding her breath, but with a sudden burst, the air rushed out, and she began panting energetically.\n\nThe resistance upon the head of my cock slowly yielded, and suddenly the tip sank into her.\n\nMin-Ji stifled one cry with her lips. The second she covered with her hand, wailing into her palm.\n\nI dared not press onward.\n\n\"Holy fuck,\" I whispered, feeling on the head of my cock what my finger had already sensed and more. My body flooded with newfound energy and power. She had been like a dam, collecting and holding back the ever-increasing tidal wave of young, raw sexual energy. Once the connection had been made, the floodgates opened.\n\nEvery sense except that of feeling went white-blank; I was totally overcome by her. I felt the head of my cock pulsing rapidly inside of her. I was not climaxing, but it almost felt like I was. \n\nFor the first time, I felt I understood: she's a virgin\u2014at everything. Since we'd met at the intersection, I had assumed that her elevated rank of Colonel at so young an apparent age meant that she was a kind of sex toy for the big wigs and politicians.\n\nClearly that was not so.\n\nThis reaction\u2014her reaction\u2014could only be that of someone utterly inexperienced. This was her first cock.\n\nI wasn't packing some fucking anaconda between my legs. Sure, my cock was as hard as it had ever been, but it wasn't some kind of monstrous abnormality.\n\nAdmittedly, I had to acknowledge that Min-Ji was small down there. No, not just small\u2014tiny, but even so, no way a woman with experience reacted the way she just did.\n\nAnd yet she had known things\u2014known sexuality. She had known what to do with a hard cock. She sucked it\u2014extremely well, in truth\u2014but it was clearly a first effort. Moreover, she had helped me\u2014actually helped me\u2014fuck her tits. It surprised her, surely, but she knew how to help make it work. \n\nSo she had knowledge, but no experience.\n\nI understood American girls\u2014ones coming of age\u2014having knowledge, but no experience. There was, after all, the Internet.\n\nBut, a North Korean girl? There was no fucking Internet here\u2014none but some bullshit propaganda. Women, as I understood it, were taught about the basics, but not about the other stuff\u2014oral sex, tit-fucking, and so on.\n\nBut, MIn-Ji had known.\n\nPerhaps my assumptions about North Korean women had been wrong. Or, maybe, she had been given a different kind of education; she just hadn't yet been \"deployed.\"\n\nWith every breath, Min-Ji moaned as the head of my cock remained seated inside of her, pulsing.\n\nAfter a minute, she opened her eyes and turned to me. She whispered and nodded, bearing down in anticipation of deeper, thicker penetration.\n\nI pushed.\n\nMy cock trudged, gaining fractions, not inches.\n\nMin-Ji's mouth fell open. Her eyes went wide with shock. She snatched a desperate breath, holding it. She pushed against my hip with her hand.\n\nI stopped myself despite the instinctual urge to send the whole shaft hurtling home at once.\n\nHer passage was extraordinarily wet. Lubrication was not the problem; she was simply too tight. My cock felt as if it were stuck inside a hot, fleshy vice.\n\nMin-Ji's cyclic panting began to abate. Soon, she was blowing puffs of air. She sucked two long gulps of air and turned to me, nodding.\n\nI thrust, and my cock continued to dilate her pussy as it plodded deeper inside.\n\nMin-Ji winced. She covered another anguished cry with her hand\u2014this time biting down on her thumb.\n\nAlmost there. I was so close to being perfectly joined with her. Releasing her hip, I put my hands on her shoulders.\n\nShe turned to me, glassy-eyed.\n\nI nodded at her.\n\nShe took a deep breath and nodded back.\n\nI pulled on her shoulders and drove with my hips, stabling my cock fully and irrevocably inside of Min-Ji. Our pubic hairs mingled.\n\nShe turned bright red. I covered her mouth with mine, and she bawled down my throat. More cries followed, all muffled by my mouth. Soon, they subsided. She broke the kiss.\n\nTears welled in her eyes, and I asked, \"No?\"\n\nShe shook her head, saying, \"Yes.\"",
        "\"Min-Ji OK?\"\n\nShe nodded. \"Ho-kay.\"\n\nI smiled, and she slowly breathed through the pressure.\n\nThen, I felt her hand on my hip. She pushed and pulled twice.\n\nClutching a breast, I drew my cock back and gently pushed inside of her again. \n\nShe gasped, but it was me having the stronger reaction. \n\nMy mind felt like it exploded. Grasping that fat breast, with its abundance of feminine sexuality, exhilarated me. But it was her pussy. Her pussy was a fucking pleasure outlet, and my cock was plugged into it. The shaft throbbed reflexively.\n\nMin-Ji urged me on, and I thrust into her again, muttering, \"Oh, fuck that's good.\"\n\nOur eyes met, and it seemed that when she saw how much pleasure her body gave mine, Min-Ji forgot about any lingering pain and suddenly soared to new heights of ecstasy. \n\nWe kissed to hide our vocalizations, but we kept fucking.\n\nEvery undulation together seemed better than the previous. Her body channeled more sweetness, more pleasure, and more life into mine with each thrust. \n\nWe broke the kiss, and she caught a cry in her throat. I put my finger to my lips. She nodded, raising her arm and biting down upon her wrist.\n\nI could see on her face the satisfaction reaching its crescendo. She wailed into her arm as I drove inside of her with ever-mounting energy.\n\nI covered my own mouth, grunting into it.\n\nInstantly, I felt her body throb on my cock. Her eyes closed. Her head tilted back, and she sang into her arm.\n\nI gritted my teeth and let go, squashing my body against hers and feeling my cock sling barrages of cum into her very guts.\n\nNo climax of mine had ever climbed to such heights. My mind was pure fire. I froze against her, the only part of me moving was the throbbing of my shaft as it finished emptying all of that sweetness back into her.\n\nOur bodies slumped, and we gasped for air. My erection flagged and slid from her body as if it had died giving its life.\n\nWe were like two catatonics. I have no idea how long we laid motionless but for breathing.\n\nGradually, my energy returned. I drew her long hair aside and kissed her neck.\n\nShe turned to me, grinning as I'd never before seen. Her face seemed robust and alive with joy. She began whispering to me. Her words didn't sound urgent or excited. Happy, I would say. Adoring and affectionate. She kissed me tenderly. She giggled and caressed my stubble.\n\nAt some point, she quit speaking as if waiting for me to say something.\n\nI kissed her lips and whispered, \"I want to stay in this shelter with you, Min-Ji, and I never want to leave.\"\n\nShe murmured my name and grinned. Before long, she slept.\n\nI admired her for a time, remembering how after we first met I decided that the man she decided to love was going to be extraordinarily lucky. \n\nI was right.\n\n***\n\nMy thoughts had to return to the present situation in North Korea, so I pushed thoughts of Min-Ji aside. \n\nWe had to leave tonight; there was no question. One energy bar each remained. It would carry us through the night, but no further, and I couldn't just go hunting. Sure, there were certain edible shrubs, nuts, and berries here, but I couldn't go scouting during the day, and doing it at night would be impossible.\n\nWith my filter, water would be no problem as long as we could find a source\u2014didn't matter whether it was from a river or a muddy boot print. I could make it potable.\n\nBut without food, my energy would sap, and I wouldn't be able to carry her.\n\nTonight was the night of nights.\n\nMy original plan for breaching the fences still applied, so long as one decisive factor did not change. Since the place of my exit had already changed by necessity, the major concern now was the status of the fences in this new location.\n\nThe DPRK had been updating sections of their fence line to a new system that prevented power outages from disabling the electrical circuitry at one central point. It was a computer-based system that also kept the cameras running; the lighting was on a separate system.\n\nElectrified fencing generally emits pulses of current as a warning. North Korea's fences did that, too. At least, one of them did. \n\nBoth the inner, DMZ fence and the outer, Civilian Control fence were double fences with a few feet in between. The first fence one encountered would give a powerful shock. The second would emit lethal current\u2014the kind that made fingers unable to let go, the kind that set fire to clothing and skin. Lethal. \n\nThe Civilian Control fence was a mere 200 meters southeast of us.\n\nHere was my problem. I knew the fences had been updated at my original breach position. At this new location, however, I was unsure, and I needed both the Civilian Control and the DMZ fences to be updated to the new system.\n\nYes, the newer, computer-based system was the easier one for me to pass through. In fact, with the gear I had, I would not be able to breach the old-style fencing on the North Korea side.\n\nI mean, sure, if I had a few nights to work on it, then I could get through, but with one night and an injured fellow traveler? No. Not an option.\n\nThe way for me to know if the fence 200 meters in front of me had been updated was simple. Every 50 meters, there would be a six-inch cylindrical housing or junction.\n\nThe one beyond that\u2014the DMZ fence?\u2014well, I'd find out when I got there, I guessed.\n\nI broke out my map and began studying it, committing this new locale to memory\u2014every terrain feature, every structure, the course of both the CC and the DMZ fence lines, the route of the river and its little feeder creeks, everything.\n\nOne of the things I knew from my study was that every building this close to the border was DPRK military. There were no civilians around here.\n\nMy notes described some of the nearby buildings\u2014\"barracks,\" \"mess,\" \"ASP,\" \"fuel dump,\" etc.\n\nThere was a barracks to our immediate southwest at 220 meters.\n\nWhen I finished my studies, I checked the time\u20141558. Three hours until sunset.\n\nTime enough to get a last bit of sleep before the night of nights.\n\n***\n\nI woke and checked my watch\u20141830 on the button. Twilight was setting in.\n\nI spent a few minutes listening, and then I grabbed my gear and climbed out of the tunnel. Min-Ji stirred, but remained sleeping.\n\nGeared up and ready, I did a quick 360-degree recon about 15 meters around our shelter. All secure, I moved up the hill a few meters shy of the crest and surveyed the area.\n\nHelicopter to the southwest. Sparse vehicular traffic. Across the river to our west, I saw a fuel tanker roll up and refill at the fuel depot. A couple of other military vehicles rolled along the roads west and north of us. \n\nNo dogs, thank goodness.\n\nAs true darkness set in, I climbed down the hill to the river bank and refilled our canteens with my filter. Then, I made my way back to the shelter.\n\nMin-Ji was wide awake and nervous. She whispered my name and kissed me with relief.\n\n\"Time to go,\" I told her.\n\n\"Go,\" she said, climbing out. I checked her ankle and spent some time rewrapping it. She tried to walk on it, winced, and shook her head. I helped her dress, and by 1929, we were ready to go.\n\nTunnel sealed, I told myself, last night in the fucking DPRK.\n\nWe moved east, easing into saddle-shaped terrain with high ground all around us except in front where the fence line stood. Bright floodlights turned night into day along the road that ran in front of it.\n\nTwo parallel wire fences stood separated by about one meter, both 12 feet high and topped with four coils of concertina wire\u2014razor wire.\n\nTaking a deep breath, I switched my NVGs off, using them strictly as binoculars. \n\nYes! I found the cylinders. This was the new fencing. Our protected position was almost halfway between two of the little 6-inch housings.\n\nBefore getting to work, I needed to see how often this road was patrolled by foot or vehicular traffic.\n\nMin-Ji and I ate and washed down our last 3500-calorie energy bars.\n\nOver a two hour period, we saw one team of four soldiers and two troop-carrier trucks pass us.\n\nLeaving Min-Ji, I took the gear I needed and, remaining outside of the floodlighted area, moved into a firing position.\n\nIn my pack was an ASR-19, a short-barreled and very special rifle. I was reasonably familiar with it. I assembled it, finishing with the flash suppressor/silencer, and loaded it with the special rounds. \n\nAssuming the prone position, I sighted in on the first cylinder. Then, I sighted in on the second. Switching back and forth, I rehearsed my shots. Over. And again. And again until I felt perfectly ready.\n\nPlacing the weapon down, I scouted down the hill to the south with infrared engaged on my NVGs\u2014clear. Then, I moved to the north\u2014all clear.\n\nMoving back to my shooting position, I took aim at the first cylinder and shot. \n\nShifting to my next shot, I never even watched the first sink home. I had heard it strike.\n\nThe ultra-thin wire coming out of my rifle tugged a bit, but I lined up and took the second shot.\n\nHit. Got 'em both.\n\nTwo wires ran from my rifle to the two separate cylinders.\n\nThere would be an interruption to the fencing now, and the North Koreans would know about it.\n\nI had to move like lightning.\n\nGrabbing the two wires with my insulated gloves, I used the trimmers on the rifle barrel to sever them. Twisting the ends together tightly, I pulled out a small remote box and shoved the wires inside. A flick of a switch on the remote box and the connection was restored.\n\nBack at some terminal, an alert North Korean operator would have witnessed a less than eight-second interruption to the CC fence line's power at these junctions. Did he call it in or did he see the power come back on and ignore it?\n\nEasy question for me to answer: assume the worst. With Min-Ji's escape fresh in mind, these guys would be told to report anything, and troops would be ready to roll. DPRK troops were en route. No doubt about it.\n\nMy remote box had a small spike which I then used to secure the device in the trunk of a tree. Pulling down my NVGs, I engaged infrared and saw the steady glow of the light on the remote. Then, using a small controller, I remotely turned it off and on again to check if it all worked properly. It did.\n\nPower is back on, and I can control it. Good to go.\n\nThere were two schools of thought about what to do next. Option one was to wait out the inevitable patrol\u2014let them come, see that all was well, and leave. It assumed the razor-thin wire would not be seen. Option two was to go now, instantly.\n\nI chose option two.\n\nI raced back to Min-Ji, put her on my back, and crawled down to my firing position. From there, I depressed the controller button and checked it with my infrared. Power off.\n\nI ran to the fence, set Min-Ji down, and broke out my diamond-titanium snippers. They had short handles, but I wouldn't need the leverage to cut this fence. The cutting blade on this was diamond. The other side was a titanium-aluminum alloy, exponentially stronger than steel.\n\nBut there were a lot of cuts to make.\n\nI laid the back of my bare hand against the fence. No shock.\n\nI began cutting. Each cut took about three seconds.\n\nA minute later, a semi-circle about two feet wide and one foot tall was finished. I went through first, and then I held it down for Min-Ji.\n\nIn between the fences, I held Min-Ji tightly and hissed, \"Do not touch the fence. No touch.\" I pointed at the fence, pointed at my hands, and shook my head vigorously.\n\nShe shook her head, saying, \"No.\"\n\nI took out a special stake I had made. It was steel with a long, thin piece of fabric tied to one end. Shoving the stake into the ground, I tossed the end of the fabric against the second, inner fence.\n\nI didn't burst into flames.\n\nGood.\n\nI touched the fence with the back of my hand. \n\nGood.\n\nI took out a hand-held scanner and ran it over the ground outside the fence. Back and forth. Back and forth. A wider arch, back and forth. Nothing. No mines.\n\nPutting the device in my thigh pocket, I began snipping.\n\nAbout halfway around my next semi-circle, I heard the truck coming from the northeast. \n\nIt's on the fence line road, I thought, and it's coming with troops to check out this fence. \n\nMin-Ji cried out. I shushed her abruptly. Still cutting, I listened. Half a mile, maybe. \n\nOne minute at 30 MPH. Less if my estimate is wrong.\n\nFuck!\n\nI finished the second breach and waved Min-Ji through, but I remained in the middle.\n\nMin-Ji called for me. I silenced her again, pointing and ordering her into the tree line a few meters east of us. She hopped away.\n\nFishing in my pack, I pulled out a small tub of gray adhesive goo\u2014we called it cement. I bent the first fence opening back into position. Then, I \"glued\" about four of the joints together\u2014no time to do them all. The glue set almost instantly on contact with metal\u2014the chemical reaction was intensely hot, so my insulted gloved were critical.\n\nI saw the lights of the truck.\n\nDarting under the second breach, I went back to work with the cement. \n\nThe lights were coming up over the hill. Ten seconds.\n\nTwo joints. Three. Fuck it. I ran for the tree line, spun around, and engaged the power to the fence with my controller.\n\nTroops were climbing out as I confirmed through infrared that the controller had worked. Power restored. Cameras back on.\n\nI grabbed Min-Ji and put a tree between the two of us and the soldiers on the other side of the fence.\n\nOne fence down. One to go.\n\nHugging her close, I slid down the trunk to a sitting position, breathing deeply.\n\nNo time for this! my mind screamed. If they find the breaches, they can practically punch through and you can't outrun them with Min-Ji.\n\nInstantly I laid down, put her on my back, and low-crawled slowly away, scanning every few meters for any mines.\n\nOnce we were a good 50 meters from the fence and into the denser foliage, I rose, put Min-Ji on my back, and continued southeast with my mine scanner running continuously.\n\nWe had been made aware that the North Koreans put some mines between the CC line and the DMZ, but not many. I was being careful. The real minefields began once you crossed into the DMZ.\n\nWe made it to a road and stopped. I felt something. What the hell was that?\n\nThe ground trembled.\n\nVehicles. At high speed. A bunch of 'em.\n\n\"Fuck!\" I hissed, turning southwest and sprinting with Min-Ji on my back. Mines no longer mattered.\n\nThey found the wires. They called it in. They were coming in force from the east.\n\nA helicopter appeared, searchlight scanning the trees all around us.\n\nI had to watch for it and wait, darting from tree to tree.\n\nThe vehicles were closing in.\n\nFuck this. I dropped MIn-Ji and raised my silenced CBQR, sighting in on the helicopter hovering 180 meters in the sky and 200 meters east of us.\n\nDisengaging the safe, I squeezed one. Two. Three. Four rounds. The searchlight vanished with a crash of glass.\n\nI picked up Min-Ji and ran southwest.\n\nA road appeared. I darted across it without even stopping to look. But, it told me where I was. I could see it on the map in my mind. More southwest. More. More. \n\nMy NVGs were on continuously, but every few seconds I switched between night vision and infrared.\n\nA troop bunkhouse approached on my left about 100 meters away. \n\nDon't care, I told myself. No heat signatures. Fuck 'em. I ran right past it.\n\nAnother 300 meters on, I began to see headlights north and south of me on the two fence line roads.\n\nAll the way to the river, I realized. They had the fence lines covered all the way to the river. I was trapped between the CC line, the DMZ fence, and the Imjin River.\n\nBut, this was life or death. I had to try something.\n\nFlipping to infrared, I could see the heat silhouettes of dismounted troops forming picket lines and moving toward me from both directions.\n\nI kept running. My legs were on fire. My heart battered. My lungs pumped air.\n\nVeering slightly north of due west. I ran straight for the river, remembering a small bend where it narrowed into two channels with an island in between.\n\nI had run almost two kilometers with Min-Ji on my back when we emerged from the trees and found the river. The narrows were a bit more to the north. We ran along the bank, and I waded into the surging stream without stopping. \n\nHow I stayed on my feet, I don't know. The rains had made this river run fast.\n\nOnto the island, I ran across it and waded the rest of the way across bent double to hold onto the submerged rocks. Water plowed into my face. I was sopping, but Min-Ji was mostly dry.\n\nNo time to rest now. The nearest cover was a tree line 500 meters across an open field.\n\nI ran for it, hoping like hell my pursuers were focused on their side of the river.\n\nAbout 300 meters into my final sprint, I came upon a creek\u2014about six feet wide, but with good banks. I dropped into the bank and set down MIn-Ji, panting.\n\nI knew this creek. It ran right back into the Imjin about 800 meters downstream of where we crossed.\n\nAt both the CC line and the DMZ, the river had been dammed. Impassable above or below the surface. This creek joined up with the Imjin below the second dam.\n\nBut. \n\nBut, it had to pass under the DMZ fence line first, and it would be protected. Wire. Grates. It wasn't really an option.\n\nI rose and scanned 360 degrees on night vision and on infrared.\n\nThey might, I thought, be learning right now that we crossed the river.\n\nThen, I heard the trucks. I began seeing the heat signatures. They were closing in on this side of the river, too.\n\nI looked at Min-Ji. She looked terrified.\n\nI smiled. \"We're okay,\" I whispered.\n\n\"Ho-kay,\" she responded, and she seemed to calm.\n\nI liked how she trusted me.\n\nThat thought helped me make my decision.\n\nI waded into the creek. It was as fast as the river. The deepest it went was about four feet. I signaled for Min-Ji to join me. Laying on my back, she climbed on top of me between my legs, facing me. I let go of the root I was holding onto, and the current swept us downstream.\n\nThis creek wound erratically, back and forth. Now east, now north, now south, now west. The longest straight patch we hit lasted about 25 meters.\n\nI hadn't noticed it while running from the river, but now I did: the water was incredibly cold. I could feel it sapping my strength. With her tiny frame, Min-Ji would not last much longer.\n\nThe DMZ road was approaching. At one point, the creek ran parallel to it a mere 40 meters away. Trucks and troops were arriving. We heard the yelling of what had to have been a sergeant. NCOs all sound the same when they holler at troops.\n\nAs we continued winding through, I caught a glimpse of the place where the creek went under the DMZ road. Two minutes, maybe. If they see us, we're dead.\n\nHow wide was the culvert underneath? Narrow enough to capture and drown us, buried alive in a tunnel of rushing water? Or, would we be caught up in submerged razor wire first? \n\nCan maybe I get lucky here one time? Please?\n\nI heard the sound of rushing water. The bright lights illuminating the DMZ fence and its road splashed upon my face, blinding me. I heard soldiers running and leaders yelling. We crossed back into shadow, and when I opened my eyes the creek disappeared from view.\n\nWe plummeted down a man-made falls. Landing in a pool, I sunk and hit hard on corrugated steel. The current swept us into a culvert about four feet wide. There was no way out. None.\n\nThe power of the current would hold us here until we died.\n\nMin-Ji hollered, but the rushing water was so noisy even I could barely hear her.\n\nMy feet slammed up against a rebar grate. Min-Ji slipped from my grasp, spun, and got pinned with her back to the steel mesh, barely keeping her mouth and nose above the waterline.\n\nShe gasped for air. I held her hand, saying, \"We're okay.\"",
        "\"Ho...,\" she began, stopping when a surge of ice-cold water washed over her mouth. \"...Kay.\"\n\nFighting the onslaught of water, I drew up my bag and pulled out my diamond-titanium snips. Did they cut rebar? I guessed we would find out.\n\nPlanting my feet against the steel bars at the three and nine o'clock positions, I relaxed my legs enough to let the water bend my upper body toward the grate, just beside Min-Ji. This was quarter-inch rebar. The gaps were no more than three inches square.\n\nI guess the North Koreans don't even want their fucking otters crossing the border, I said to myself. \n\nReaching out, I put the first section in the jaws of my snips and squeezed. And squeezed.\n\nI could feel the progress, but it was slow.\n\nFuck, the water was cold.\n\nFinally, with an audible pop, the first cut had been made.\n\nNext one.\n\nMy plan was to snap through the above-water joints first, working my way around the culvert counter-clockwise.\n\nMin-Ji moaned with exhaustion as I cut through more. Her head began to dip under the water for a few seconds.\n\nThe absolute chill drained me of life. My legs shook with the effort of keeping myself in a position to make the cuts. \n\nNext one.\n\nNext one.\n\nNext one. The rest of the cuts would be underwater.\n\nMin-Ji cried out. Her face went below the surface, this time for about five seconds.\n\nI could not help her. To do that would mean I would never be able to get back into a position to cut. I just wouldn't have the strength. \n\nNo, I decided, the rebar comes first.\n\nNext one.\n\nFive to go. Maybe six.\n\nMin-Ji's face broke the surface. She cried for me.\n\n\"Hold on!\" I shouted.\n\nNext one.\n\nShe sunk.\n\nSqueezing with everything I had, the next one popped.\n\nMin-Ji did not come up.\n\nFuck!\n\nI raced to the next one. Five seconds later, pop! Two more to go, but maybe I could bend it with just one more.\n\nMIn-Ji had not reappeared.\n\nNo! \n\nI let go with my legs, and the water slammed me against the grate. Reaching under the surface, I found Min-Ji and hauled her up by the shirt enough to grip her body. I pulled her to the surface. She was limp in my arms.\n\nAnd I had dropped the snips. They were gone.\n\nNo.\n\nNo!\n\n\"No!\" I shouted. With my back to the grate and Min-Ji in my arms, I planted my feet on the sides of the corrugated metal tube and shoved.\n\nIt held, and I pushed once more with what felt like the last of my strength. The metal grate suddenly cranked over.\n\nInstantly, Min-Ji and I were submerged by the rushing water, rocketing through the tunnel on the current.\n\nWe surfaced about five seconds later. I glanced backward at the DMZ fence. Every soldier's back was to us; they were searching the field to the north.\n\nAnd we were now inside the North Korean part of the DMZ.\n\nImmediately, I checked on Min-Ji. Spinning her face towards mine, I rubbed her arms as the current carried us toward the Imjin River.\n\nHer face was bereft of color, but her eyes opened. \"Ski-pa,\" she muttered.\n\n\"I've got you, Min-Ji,\" I said, and I wrapped my legs around her body and began rubbing her intensely as we bobbed on the surface. \n\nGetting her out of the water was imperative, but the fact was I couldn't. \n\nThe creek kept us moving\u2014fairly swiftly\u2014toward the river and, ultimately, the border, and there was no fence on the actual line between the two countries. The next set of fences would be on the South Korean edge of the DMZ.\n\nOn the other hand, if I climbed out with her, both of us sopping wet, we would still be in North Korea. We would be slowly dying of exposure. I would soon be unable to carry her, and there was no place to hide in these lowlands teeming with minefields.\n\nThere were no mines in the river.\n\nNot even sure I could feel my arms, I rubbed away at Min-Ji, keeping her close against my body. \n\nSuddenly, I felt the current increase, and to my left, I saw the Imjin River connect with us. The combined currents pushed us into the middle.\n\nI estimated 2000 meters along the bends and shoots of this river to a place where I could safely pull us out. Watching the bank, I guessed our speed at a touch under two meters per second\u2014a good clip. Maybe 20 more minutes in the frigid water.\n\nThere was no point in remaining on guard for DPRK soldiers patrolling inside the DMZ. I couldn't do anything about them. The only thing to do was to keep Min-Ji as warm as possible.\n\nAt one point, an eddy spun me about ninety degrees to the west. I glanced along the lighted fence line behind us on both sides. Not much happening.\n\nAs I turned back, I saw three sets of headlights about a kilometer away, perhaps more. They were stopped, pointing into the DMZ.\n\nMy recollection of the map filled in the blank: there was a gate on that hill\u2014a guarded military gate that let patrols inside the fence.\n\nA platoon, I guessed, in those three trucks. About 40 men were probably jumping out the back of them and sprinting for the river, for us. \n\nNo military vehicles were allowed in the DMZ, only soldiers on foot, and the Armistice had strict rules about how many at a time.\n\nI guessed the DPRK was willing to flex that rule a bit on this occasion, but they would never violate the vehicle rule and risk an all-out war with the US and South Korea.\n\nI worked the mental math for our speed and distance, and I did the same for those soldiers.\n\nThis would be a close thing.\n\nI ran my hands up and down Min-Ji. Looking south, I could see a South Korean observation post and the lights of the ROK side of the DMZ about 1300 meters away.\n\nThere was a place, I knew, where I could get us out of the river sooner on the South Korean side. It was maybe five more minutes on the river, and I could step out onto free soil. The trouble was that OP would quickly spot us. True, being seen and caught by ROK soldiers was a vastly different matter than by DPRK. Still, my orders for Operation Minnow were to avoid any and all contact with the ROK.\n\nI had to ride it out.\n\n\"Stay with me, Min-Ji. Come on,\" I urged, massaging her body with wet noodles for arms.\n\nSuddenly, a flare went up into the sky from the South Side. I saw ROK soldiers running down the hill from the OP. DPRK coming south. ROK running north. \n\nWhat the fuck? I thought. Is there going to be an international incident here?\n\nA minute later, the river bent west. Now and for the next 900 meters, the border was the river. On my left, freedom; on my right, capture.\n\n\"Come on, girl. Get warm, girl,\" I murmured.\n\nThe North Koreans were closing in\u2014400 meters. \n\nThe South Koreans were a mere 200 meters from the river, but they were running at an angle that would put them on the river's edge behind us.\n\nWhat the hell? I wondered. Do they not see us?\n\nFocusing on Min-Ji, I spent the next minute or so doing everything I could in my weakness to keep her warm.\n\nThen, I heard the shouting.\n\nCraning back to see, the South Koreans were on the riverbank, and they were taunting, it seemed, taunting the North Korean soldiers.\n\nTurning to the other side, the North Korean soldier running at the front of the pack appeared to hear the ROK soldiers. He bent toward them.\n\nI blinked.\n\nThe rest of the DPRK platoon, scattered behind this leader, began angling to where the fastest man was running.\n\nI didn't want to make a sound. I didn't want to be seen. I let the river carry us and, using my hand as a steering oar, turned myself around to watch the confrontation.\n\nThere they were. The South Koreans were chanting something on one side. A bunch of the North Koreans were screaming on the other. Another smaller group of DPRK soldiers was walking along the bank, scanning the river. Between them, an officer yelled at the men in the argument with their neighbors. \n\nThere's my luck, I thought. I just got it. The North Koreans must have thought we climbed out where the South Koreans were. It made sense. If I could have, I would have.\n\nI listened to the diminishing sounds of the conflict as the river bent south. While I paddled us to the bank, I could have sworn I heard singing.\n\nThey're singing at each other, I thought, singing their National Anthems.\n\nNecessity breeds the strength to go on. I hauled Min-Ji out of the river. I put her on my back in a fireman's carry, and I walked the last 90 meters to the nearest hillside.\n\nI set her down, gathered up some leafy branches, and undressed us both. Completely naked, I put her under the solar blanket and laid the camouflage on top. Then I climbed inside and tucked the ends under us until we were completely sealed inside. I drew her shivering body to mine, and I wrapped her in my arms and legs.\n\nThe time was 0103.\n\nIt took every bit of the next two hours to bring her body up to temperature. With what little energy she had regained, she guzzled down her entire canteen and half of mine. I finished the rest and left our little hooch long enough to refill them and return.\n\nBy 0422, she seemed recovered enough that I could leave her for a spell. \n\nI found a shitty little drop and began to dig out a tunnel. With all of the stones and rocks that my knife encountered, it took two hours to finish. In the growing daylight, I moved us inside and concealed the outer edge.\n\nWe were safe enough.\n\nWe slept.\n\n***\n\nA few times in the morning, I was awakened by noises\u2014the South Korean side of the DMZ was a mere 275 meters from our shelter. I heard vehicles and voices, but nothing to keep me up.\n\nA little after 1300, I woke up and stayed up.\n\nNight of nights, I thought ruefully. That was no bullshit, right there.\n\nThe final phase of my mission was fairly straightforward\u2014get us out of the DMZ, past the ROK Civilian Control line, and call in my position, which was quite similar to my initial plan.\n\nOn my original route, there was to be a cell phone waiting for me at a certain set of coordinates. I was to retrieve it and call a number. A car would pick us up, and there would be the end of things.\n\nEverything in the original plan remained except the phone. That cell phone was many kilometers away and would most certainly have been retrieved by now.\n\nI knew the number to call; I just wouldn't have the phone to do it with.\n\nWorking for me, though, were several benefits. First, the South Koreans had removed and proofed all of their minefields. Second, they didn't much patrol the DMZ. They patrolled the area between the DMZ and their CC line, but it was no longer 1954. \n\nThose soldiers really weren't worried about a North Korean invasion anymore. What troubled the ROK military the most was idiots trying to gain notoriety by sneaking into the DMZ. Those soldiers tended to focus their attention south, not north.\n\nFood was the bigger concern because we could not travel until nightfall. I climbed out of the shelter, dressed in my wet clothes, hung out Min-Ji's to dry, and went to forage in the trees.\n\nIt didn't take long for me to decide to start gathering pine cones, tons of them. The things were everywhere. I filled my shirt over and over again, making a heaping pile. Then, entering a small clearing, I found a treasure: wild strawberries. I took every one that seemed ripe enough.\n\nOn a medium-sized, flat-topped stone, I tapped the cones and pine nuts began falling free. In twenty-five minutes, I had a meal of them. After another twenty minutes, I had two meals. Along with the strawberries, we were set.\n\nFinding a small brook in the forest that led to the Imjin, I took all of the nuts and berries in my shirt and rinsed them clean with filtered water out of my canteen. Then I carried everything back to Min-Ji.\n\nShe was awake. Her color had returned, but not completely. She seemed listless. I handed her a refilled canteen, and then I climbed in beside her and laid out our meal.\n\nShe smiled weakly, and we nibbled on the pine nuts.\n\nWhen they were gone, I brought in the strawberries, and Min-Ji's eyes went wide. She spoke excitedly. We finished them all, tossing the green leaves outside the tent.\n\nFifteen minutes later, she was asleep.\n\nI went back to my water source and rinsed my body. \n\nThe sun shined brightly, and the day grew reasonably warm\u201472 degrees. I took all of our clothes to the brook and rinsed them as well, wringing them out and hanging them back out to dry. Afterward, I sat on the grass outside our shelter, reliving the past three nights.\n\nWhat could I have done differently? If we made it out, what decisions would Deacon question? \n\nThere had been risks, surely. Some were rewarded. Others not, but we had our share of bad luck. \n\nI recalled with a shudder how close I had been to killing Min-Ji more than once. \n\n\"No,\" I whispered.\n\nI grabbed my map to study and plan for the night. \n\nMin-Ji climbed out of the shelter at around 1545. She seemed re-energized. I grabbed my canteen and my filter, and I carried her to the brook. There, I rinsed her body clean\u2014every inch of it.\n\nI had seen it all before, but never this clearly. I guessed her height at 5 feet 1 inch. Her weight was definitely under 100 pounds; my earlier estimate of 90 was probably right, though she may have been even skinnier now due to the last three days. Her hair fell down to her shoulder blades when wet.\n\nShe was surprisingly fit. In her previous life, she must have decided or been forced to keep fit. Still, her frame was exceedingly skinny, making her breasts seem all the more disproportional. I was a big fella with big mitts, and I could not wrangle one of her tits into a single hand. \n\nHer legs had strength and fitness, beautiful curves under that creamed tea skin. If anything truly surprised me, it was her little ass.\n\nMin-Ji was one of those women gifted with a sharply arching lower back that had the effect of bubbling out her butt. I rinsed that ass for a long, long time. My hands could not get enough.\n\nMin-Ji smiled at my erection.\n\nFinished, I carried her into the sunshine and laid her down. My body felt alive with anticipation. I knew exactly what I wanted, and I wanted it badly.\n\nI kissed Min-Ji and caressed her body. She accepted it, responding in kind to my touches. Then, I rose and spread her knees apart, climbing between. \n\nShe watched me nervously. I assumed her insides may have been a little sore from losing her virginity, but that wasn't my objective yet.\n\nI laid on my belly between her thighs. \n\nMin-Ji's eyes widened. She began whispering something, but it must have caught in her throat when she felt my tongue wiggle through her hairs and caress her vagina.\n\nI wanted my mouth on this pussy so badly. My cock, mirroring my excitement, was like the steel barrel of a grenade launcher underneath me.\n\nWith two fingers, I spread her apart and softly licked her clit, turning circles around it with the tip of my tongue.\n\nMin-Ji gasped.\n\nI continued using my lips and tongue on her little spot, taking her higher and higher.\n\nShe whispered dreamy words to the sky above. She made little squeaks of pleasure.\n\nWhen she felt my finger slide beneath my tongue and inch inside of her pussy, she moaned in delight. Time slipped away from me between her thighs. Eventually, Min-Ji covered her mouth and cried out into her hands.\n\nI smiled, not yet satisfied.\n\nShe protested for a moment before biting her lower lip and humming sweetly.\n\nWhen her next orgasm appeared imminent, I promptly rolled her over and hauled her to her hands and knees. \n\nShe gasped in surprise.\n\nWithout hesitating, I seized her hips and immersed my face in her pussy to finish her off. \n\nI listened to her choke back the rapturous cries of another orgasm. With one long and languorous lick, I drew back. MIn-Ji's arms gave way. Her face and chest sank to the grass.\n\nOn my knees behind her, I put my hands on that beautiful ass, caressing and kneading the flesh. Her skin there was warm and lush. The flesh underneath was full and firm.\n\nI listened to Min-Ji's breathing slow from a rapid pant to a relaxed sigh.\n\nMy erection ached for a connection. The skin upon it shined, feeling as if stretched to its very limits over a cast-iron bar underneath.\n\nThe moment my hand grasped the shaft, it flexed in response to the contact. I guided the tip towards Min-Ji's pussy. When the head divided her labia and began to penetrate, Min-Ji flinched and pulled away.\n\nHer face spun to me. She shook her head and spoke urgently. Then, sitting up on her knees, she touched her vagina and winced as if sore. \n\nI understood, nodding. Her body ached from losing her virginity the day before. She wasn't ready to do it again.\n\nWhen she saw that I grasped her meaning, she smiled sadly and began to lay on her tummy, but I stopped her.\n\nShe looked back at me.\n\nI stared down at her ass. I watched my thumbs drag over the flesh. I watched them knead circles. I moved them closer to the cleft. Closer. I drew her apart, letting her anus peak out.\n\nI felt my breath catch in my windpipe. My lungs drew air raggedly. Nervous energy flooded my body.\n\nI knew Min-Ji watched me.\n\nI bent down, keeping her ass spread. My mouth hovered an inch over Min-Ji's tiny puncture. I twirled my tongue in my mouth a few times, gathered up the fluids, and let them fall off my bottom lip, blanketing her anus in my saliva.\n\nRising behind her, we locked eyes. She was stunningly gorgeous and utterly unreadable. \n\nStill looking at one another, I massaged the wetness into the wrinkled flesh. It grew pliable. I urged the tip of my middle finger against it, and her taut ring allowed its passage inside.\n\nMin-Ji's eyes widened. Her jaw unhinged.\n\nI buried my finger to the second knuckle, gradually inching it back and forth.\n\nMin-Ji didn't speak. She gazed at me, breathing deeply.\n\nTugging out my finger, I cupped the head of my cock. My tongue swept through every nook and pocket of my mouth, drawing together a large dollop of saliva. I pursed my lips and let gravity convey the flow over the head of my cock. My hand caught the spillover, and I massaged the saliva all over the shaft.\n\nIt needed more, and I provided it. Then, I applied yet more to Min-Ji.\n\nI guided the glistening, sopping head of my cock to her. It grazed the wet, crinkled skin. Satisfied at the position, I glanced at Min-Ji.\n\nHer chest pumped air in anxious anticipation. She watched me like prey peers at the predator.\n\nI advanced.\n\nMin-Ji's anus resisted only momentarily. It soon began to dilate, admitting my cock in the tiniest increments. It was like watching the sun slowly sink into the earth at dusk watching the great head of my cock pass so ploddingly inside of her.\n\nI didn't wish to rush matters. I wanted to let her body yield to mine at its own pace.\n\nMin-Ji pinched her eyes shut and gritted her teeth. She stifled a high squeak of a hum. I felt her haunches bear down, and a moment later the tip of my cock sank home, locked inside by the fierce grip of her anus.\n\nShe voiced a long-held, throaty moan. Her head undulated as she drew deep draughts of air and blew them out. Her eyes opened. She swallowed, and then she nodded expressively.\n\nFucking her ass was, at the moment, the next best thing to what I truly desired but could not have. The feel of our bodies joined together was exulting.\n\nI had no urge to plunge inside of her. I had no desire to fuck-attack her body. I just needed this connection to her\u2014to be one, my body and hers.\n\nI fucked her slowly, taking only what she was willing to give, and it was not much.\n\nBut she gave more than enough. Her body was an engine of soft, feminine flesh. Joining with it charged me with rippling power.\n\nOur eyes met, and she saw how her body was giving me intense pleasure. Panting and with a sheen of perspiration that made her skin glow, she said my name. Her face showed all of the strain, but newfound joy as well.\n\nI said her name, and she smiled in spite of her labor. When I saw it, I was swept to the end. I clutched her hips and held her steady. I drew back, leaving only the plum head inside of her anus, and I watched the shaft pulse. Liquid volleys of cum flowed through me. ",
        "I held my breath as the exhilaration crested. I cursed, pinching my eyes shut in bright white ecstasy. My cock squeezed cum into her ass. \n\nShe felt it, squealing with each convulsive injection. More. More. And with a final, weakened throb, it was over.\n\nI gasped.\n\nMin-Ji and I watched each other for a moment. Both of us must have looked astonished.\n\nI glanced at her ass and drew my cock free. She moaned exhaustedly.\n\nWatching my semen dribble from the little hole, I collapsed backward, whispering her name again.\n\nShe crawled to me and lay across my chest. Her fingers wove themselves into mine.\n\nWe held hands. \n\n***\n\nWhen night arrived, we dressed and geared up for a final push. I took us west over a large hill before we turned south through a valley, stepped over a small creek, and crept to the DMZ fence. \n\nSetting Min-Ji inside good cover, I returned to the fence and, using the little hacksaw on my multi-tool, cut a passage through it one link at a time. It took every bit of three hours. I stopped frequently to scan with my infrared, but not a single DMZ patrol ever passed us. That was the difference between North and South Korea.\n\nInside the Civilian Control Area, I carried her west until we met up with the small creek again. We followed it south as it meandered towards the Imjin River.\n\nA good 1200 meters before it joined the Imjin, the creek passed under the CC fence. I set MIn-Ji down and inspected the culvert. It was a large, six-foot concrete tube, and the outlet for the creek consisted of four one-foot diameter holes in a diamond pattern, gated with half-inch rebar. The waterline only reached the middle of the two mid-level vents. The other side was all bank.\n\nPiece of cake, I thought.\n\nBacking out of the culvert, I took up a position and began firing silenced bullets into the concrete at its weakest point\u2014where the vents came closest to one another. Between each shot, I waited about 10 seconds and listened.\n\nAfter the 17th shot, a large chunk of concrete fell into the creek. It was now wide enough for us to get through. I helped Min-Ji first, and then I climbed out.\n\nThe reverse side of our neoprene was light grey with black trim wherever there was an opening\u2014to appear less military and more civilian. We found some cover, wrung out our wet clothes, and changed over.\n\nI did my best to show Min-Ji what we needed next\u2014a phone\u2014and how I hoped to get one. It took a while, but I felt she understood what she needed to do. \n\nI led us to a street that crossed the Han River to our south, and I walked along with her on my back. Min-Ji seemed awestruck. She looked around us as if we were on some strange planet. There wasn't much difference between North and South Korea where we were, but I think just knowing we were there made it seem all the more incredible to her. \n\nAfter 20 minutes or so, the headlamps of a car behind us finally appeared. I let Min-Ji down, adjusted her shirt to accentuate her breasts, and hid with my gear on the side of the road.\n\nShe waved down the car, hopping so as to shake her chest.\n\nI laughed. That had been all her idea. Clever girl.\n\nThe car stopped.\n\nI watched her hop over and speak with the man inside. He handed her something, and she held it in the air.\n\nI walked over, leaving my gear hidden.\n\nThe man's eyes went wide.\n\nI took the phone and dialed the number. When a voice came on, I gave the sign, got the countersign, and gave them my coordinates, requesting a non-emergency immediate pick-up for two. They told me what vehicles to expect; I told them their number was now compromised because I had to borrow a ROK civilian's cell phone.\n\nI handed the phone back to Min-Ji, and she gave it back to the guy in the car, leaned into the window, and kissed his cheek.\n\nThe man appeared to drive off in a bit of a daze.\n\nWe waited together not far from the road. She clung to me and kissed my face until I turned and gave her my lips. She took my hand and brought it to one of her breasts. I did not protest. Her fingers crawled down to my crotch, and she squeezed my erection.\n\nI drew back from her kiss, and she glanced at my crotch, grinning mischievously.\n\nIt was 0443. The road was mostly empty.\n\nI nodded.\n\nShe unbuttoned my trousers, hauled out my erection, and dropped her mouth over it, sucking with shocking force.\n\nI gasped and cursed.\n\nShe hummed, and her head began to rise and fall. I swept my fingers through her hair and guided her.\n\nTwo minutes later, I led her down and held her there while I came. \n\nShe whimpered when the first of it began spilling into her mouth. I listened to the muffled cluck of her throat as she gulped my semen, and I let go of her with a grunt.\n\nHer head popped up, and when she saw the amazement on my face, she laughed and hugged me.\n\nBlinking and collecting myself, I leaned back and secured my pants. As I sat up, two cars approached.\n\nBoth vans.\n\nThey stopped beside us. The rear door slid open on the first, and two men stepped out. One waited by the door. The second, a Korean, approached us. He stopped when he saw Min-Ji. \n\nLooking at me, he asked, \"Who is this?\"\n\n\"Colonel Kwan.\"\n\nStunned, he turned to her. \"Daeyeoung Kwan?\" he asked.\n\nShe said, \"Ye,\" nodding and pointing to herself.\n\nHe spoke to her in Korean for a moment and began walking to the van. \n\nMin-Ji remained on the ground.\n\nThe man turned back. Clearly, he had expected her to follow.\n\nI said, \"She's hurt. Her ankle. Can't walk.\"\n\n\"Help her into the van,\" he told me.\n\nI rose, swept her into my arms, and carried her to the van. Once seated and buckled, I stepped out.\n\nThe man climbed in.\n\nThe one beside the door stepped inside and began to close the door.\n\nMin-Ji shouted.\n\nThe man at the door stopped.\n\nLooking alarmed, Min-Ji pointed at me and spoke.\n\nThe leader responded, shaking his head. \n\nAbout to complain, Min-Ji grew silent when she heard my voice. I said, \"Min-Ji, it's okay.\"\n\nShe sat back, nodded, and said, \"Ho-kay.\"\n\nThe door closed.\n\nI went to the second van and climbed in beside the driver.\n\nThe driver, a long-haired fellow with a thick black beard, said, \"Skipper?\"\n\n\"Yeah.\"\n\nHe extended his hand. \"Harley.\" \n\nI shook it as the lead van drove away.\n\nWe followed.\n\nHarley said, \"Expected you three days ago.\"\n\n\"Yeah.\"\n\n\"Wasn't sure I'd ever get the call. Glad you made it.\"\n\n\"Yeah.\"\n\n\"Mission accomplished, right?\"\n\nI looked at him for a moment. \"All I think I can say is thanks for the ride.\"\n\nHe nodded. \"I read you loud and clear. Giving rides is Harley's job.\"\n\nWe drove in silence for a minute before Harley asked, \"First mission?\"\n\nI turned to him.\n\nHe said, \"Only ask because we never met before, and word from the underground says we got a new guy in OPGRU 4.\"\n\n\"Yeah. First one.\" \n\nThe lead van took an exit after the bridge.\n\nWe didn't follow.\n\nI asked, \"Where are they going?\"\n\nHarley shook his head. \"Didn't tell me. Debriefing, s'pose.\"\n\n\"Where are we going?\"\n\nHe gestured to the back of the van. \"Duffel bag back there for you. Change of clothes and whatnot. Taking you straight to Humphreys. Got a bird waiting to take you back stateside.\"\n\nI nodded, wondering if I would ever see Min-Ji again. \n\n***\n\nThirty-seven hours and four stops later, I was sitting across from Deacon in Anacostia-Bolling, the AB.\n\nThe duffel bag in Harley's van had contained among other things a laptop, and I spent some of the flight back typing out my report and sending it to Deacon. He was reading or re-reading it in front of me.\n\n\"Damn,\" he said, sounding like he was reading a tragedy.\n\nA minute later: \"Damn.\" This time, it was more of an awed whisper.\n\nA short time after that, he stopped and stared at me. \"Damn.\" \n\nI shrugged.\n\nHe appeared to read through to the end, and then he said, \"Some hard luck, Skipper.\"\n\nI shrugged again.\n\n\"I like how you write a report. Concise. Clear. Not bragging, not denying. A person who knows the business will know what really went down out there.\"\n\nI said, \"I figured it was for you.\"\n\n\"It is, but it's for the DOG, too, and it may go higher.\"\n\nDOG was the Director of the Operations Groups in Defense Clandestine Services. I nodded.\n\nDeacon rose from behind his desk and walked over to me, sitting in the chair beside me. \"Lots of debriefings to come,\" he said, \"but I want you to clean up and get some rest first.\"\n\n\"Thank you.\"\n\nHe leaned toward me. \"Why didn't you terminate her, Skipper?\"\n\n\"You wish I had?\"\n\n\"No! No, we're glad to have her,\" he responded. \"You know what I mean.\"\n\n\"After the ankle?\"\n\nHe nodded.\n\nI looked out the big window for a moment, thinking back to that first night. I sighed and responded, \"She was an innocent, and I believed I could still get the job done.\"\n\nDeacon considered this. He rubbed his grey-speckled goatee and nodded gravely. \"I get it, Skipper. I hear you, but I need you to hear me. On a mission, she's the subject\u2014nothing more and nothing less. She's not a woman. She doesn't have a family that will miss her. She doesn't have hopes and dreams. She's the subject and that's it. Never forget that.\" \n\n\"But look at her. How old is she? Nineteen? Twenty?\"\n\n\"She's eighteen,\" he responded, \"and it doesn't matter.\" \n\n\"Then what about the mission? You sent me there to....\"\n\nHe interrupted. \"It was accomplished. You got Kwan out, but at what potential cost? Think about the collateral damage that only occurred because you cared about her as a human being. Then, think about the collateral damage that might have occurred if you hadn't gotten her out.\"\n\n\"It's who I am, Deacon.\"\n\n\"No. That's who you are on the streets or back home. Out there on assignment, you are a Defense Executor\u2014a tool of the DCS\u2014not a man.\"\n\nI thought about his words. He rose and patted my back twice. Then, he began to walk back around his desk.\n\n\"Hey, Deacon?\" I asked. \"Was she worth it?\"\n\nHe stopped and turned to me. He put his finger to his lips and nodded deeply.\n\nI knew not to ask what information she carried. In the Marine Raiders, I had years ago learned to live with unanswered questions. OPGRU 4 would be no different.\n\n\"Go home, Skipper,\" he said, sitting in his big chair.\n\n\"Last thing?\"\n\nHe beckoned me with his hand, saying, \"Send it.\"\n\n\"Is she here?\"\n\n\"Maybe.\"\n\n\"If she was, could I see her?\"\n\n\"Not without knowing where she is.\"\n\nI nodded. \"She ask about me?\"\n\n\"Won't stop asking. Now, go.\"\n\nI rose and turned for the door, but I stopped. I said, \"I know you can't actually say anything, Deacon, but if you were to imagine\u2014just imagine, mind you\u2014the type of place where she might be staying, what kind of place do you imagine?\"\n\nDeacon tilted back in his big chair, eyeing me in silence. The suggestion of a smile began to appear on his face.\n\nMin-Ji was very pleased to see me\u2014orgasmic, really.\n\n*****\n\nNote: Thank you for taking the time to read this story. It's self-edited, so my apologies if mistakes pulled you out of the narrative. Skipper may deploy again. -FS"
    ],
    "authorname": "fsqueeze",
    "tags": [
        "adventure",
        "anal",
        "asian",
        "big tits",
        "first",
        "interracial",
        "korea",
        "mature",
        "military",
        "young"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/operation-minnow"
}
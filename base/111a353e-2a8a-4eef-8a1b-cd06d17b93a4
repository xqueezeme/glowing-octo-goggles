{
    "title": "Butt Jewelry",
    "pages": [
        "Author's Note: This story takes place in one of those high schools where everyone is eighteen or older. You know the ones.\n\n****\n\nRiley waited for Jen by the front of the school. She smiled when she saw her friend approaching and turned to fall into step beside her.\n\n\"Morning,\" Riley said cheerfully.\n\n\"Morning,\" Jen greeted her in return. \"Anything interesting this morning?\"\n\nRiley shrugged. \"Seems like a few more showing 'em off every day. No teachers around keeping an eye on things so far either.\"\n\n\"Nice. You're wearing yours?\"\n\nRiley gave Jen a sideways look. \"You think I wouldn't?\"\n\n\"You might have forgotten.\"\n\n\"Pff, and let you have all the attention? Like hell.\"\n\nThe girls grinned at each other. Right at the front doors they stopped, each hooked their fingers in their waistbands, and pulled their leggings and panties down at the same time, just past their butts. They then proceeded inside.\n\nRiley held the door for Jen and followed just behind her. She took a moment to check out the jeweled butt plug Jen was wearing. It was basically the same as Riley's, except that hers had a light blue jeweled base, and Jen's was pink.\n\nThey walked side by side down the halls. They'd taken care with their outfits, as anyone showing off butt jewelry had to. Their backpacks didn't come down low enough to cover their asses, nor did their shirts.\n\nTheir bottoms had been tested to make sure they'd sit just below their butts without riding up or down too far. It wouldn't do for their pants to fall all the way down, after all, and if no one could see their plugs, there wasn't much point. Riley and Jen had spent at least an hour or two walking around one of their houses together when no one else was around, just to test options. They each had a few choices that would work for them. Mostly leggings, though other options could work too if the hips weren't too high on them.\n\n\"I think you're right,\" Jen said. \"Hard to know for sure, but I think more people are getting in on this.\"\n\nRiley nodded, subtly scoping out other jewelry show offs. There weren't exactly an abundance of girls walking around with pants pulled partway down, shiny plugs on display between their cheeks, but enough that anywhere she looked she could spot one. It become a common enough fashion statement that it wasn't quite act of bravery it had been at first, though it still took some courage and self-assurance to actually go in public like that.\n\nEven fewer boys were showing off like than girls were, but again, more than there had been. Enough that you could spot them here and there without having to search too hard.\n\n\"More hearts lately,\" Riley observed as she checked out shiny butt plugs going by.\n\n\"Everyone used to go for the standard circle bases for a while, huh?\"\n\n\"We definitely did.\"\n\n\"Well yeah. Hearts are cute I guess, but maybe a little too cutesy?\"\n\n\"I kinda like 'em. I might get one at some point.\"\n\n\"Really?\"\n\n\"I dunno. Maybe. If this keeps getting more popular, we're gonna need to switch it up from time to time, you know.\"\n\n\"True.\" Jen sighed. \"As scary as it was, I miss those first few times we did this, when hardly anyone was showing their plugs. We'd get all that attention without even having to work at it.\"\n\nRiley nodded. The same amount of butt and jewelry showing with the exact same carefully calculated sway in their hips just didn't get the same results anymore. Still, they'd at least gotten in early enough to gain some notoriety from their efforts. Anyone starting now could still get respect for it, but wouldn't get to be a trend-setter by any means.\n\nThe girls stopped at their lockers. They'd managed to finagle their way into getting ones side by side, which made things especially convenient these days. They both were much more comfortable showing off their butt plugs with the other nearby for moral support.\n\nNot that they'd admit hesitance to anyone else, of course. They had a bit of a rep now, which was new and fun.\n\n\"Rumour has it lots more students are wearing plugs than we think,\" Jen mentioned conversationally. \"Only they keep their pants over 'em, is all.\"\n\nRiley snorted. \"Well that doesn't count. Scaredy cats. I mean, I knew some people were still doing that. You think it's a lot? I woulda thought anyone who really wanted to stay fashionable woulda kept up better.\"\n\n\"Could be basically everyone for all I know. Or maybe everyone wearing one is already showing it off. Who knows?\"\n\nThe girls took their sweet time rummaging in their lockers while sticking their asses out just a tad, without being too blatant about it of course. Once they closed their lockers up, they each adopted a lean against them, bags on the floor beside them, hips angled to show off their butts while they faced each other and chatted some more.\n\n\"Have you seen Logan?\" Jen asked, giving a slight movement of her head to indicate an indistinct area behind Riley somewhere.\n\nRiley casually looked over her shoulder, and was easily able to locate the boy in the question. \"Oh, ok, sure. That's only a li'l baby plug, though, from the look of it.\"\n\n\"At least he's doing it. It's still interesting when boys get into it.\"\n\n\"Lucky them.\"\n\n\"Those girls flirting with him are interested, anyway.\"\n\n\"Jealous?\"\n\nJen shrugged. \"Maybe a little. You know I crushed on him a bit last year.\"\n\n\"I remember.\"\n\n\"Now... now he's just that little bit more interesting.\"\n\n\"Better do something quick. If he's got two girls after him already...\"\n\nJen waved her hand dismissively. \"I don't see any butt crack on either of them, let alone jewels.\"\n\n\"Doesn't always matter.\" Riley grinned wickedly. \"Or maybe they'd got plugs in under their clothes, and they're gonna... show him privately.\"\n\nJen pouted. \"Whose side are you on, anyway?\"\n\n\"Yours, of course. Just give me the word if you wanna move in. I'll help you get them out of the way.\"\n\n\"Nah. Let them have their fun. Not sure if I even want to go for him.\"\n\n\"Yeah you do. If even I know you do, you certainly must.\"\n\n\"I'm being aloof here, thank you very much.\"\n\n\"And a splendid job you're doing of it. It's just that I know you so well.\"\n\n\"Ah. And here I thought it was 'cause I specifically mentioned him being kind of interesting.\"\n\n\"That certainly helped.\"\n\nRiley reached back and touched the base of her butt plug, casually toying with it a little. Most of the fun was in showing it off, the shiny fake gem sticking out of her butthole, which in turn provided some very, very limited illusion of modesty by not actually letting anyone see said butthole. It was a daring look, though slightly more common every day at their school.\n\nBut admittedly, Riley also kind of enjoyed the feel of it. The plug in her butt, making itself known when she walked of shifted her hips. Or when she sat on it in class and subtly wiggled herself around on it. Or even when she just played with it a little in the middle of a semi-crowded hallway.\n\n\"Plug falling out?\" Jen asked, a smile teasing the corner of her lips.\n\n\"Not hardly. My butthole is very tight and secure, thank you.\"\n\n\"Seemed like you needed to adjust just now.\"\n\nRiley stuck her tongue out at Jen's teasing grin. \"I like the feel of it. I'm allowed.\"\n\n\"You're not supposed to let anyone see that. You're just s'posed to casually show your plug off like you don't even care. You know how this works.\"\n\n\"Well maybe I'll just start something new. Gotta keep ahead of the curve, right?\"\n\n\"You really wanna try making masturbating in front of everyone the new thing?\"\n\n\"... well not when you put it like that.\"\n\nRiley rolled her eyes at Jen's beaming smirk. She didn't much mind what Jen thought. They both knew how good walking around all day with plugs in felt. It wasn't a secret. Just, for prestige reasons, it wasn't something they were supposed to acknowledge publicly.\n\nAs her eyes wandered, Riley caught sight of Hailey. Riley didn't react, tried not to give any sign she'd noticed, but followed Hailey with her eyes as she passed.\n\nHailey was rumoured to have been the first girl to dare actually showing her plug. Before that, it had been a whispered secret that some students were wearing them to school, unconfirmed and possibly little more than a myth. No one quite knew for sure who had been the first to take the obvious step of proving they were wearing their butt jewel, but Hailey's name was a top contender in school gossip.\n\n\"Anyone ever figure out if she was first?\" Riley asked, turning to follow Hailey's ass with her eyes for a moment.\n\n\"Still inconclusive last I heard,\" Jen said, not needing clarification on what Riley meant. \"But I got something better.\"\n\n\"Better than who was first?\"\n\n\"Mmhm.\"\n\nRiley scrunched her mouth slightly at the look on Jen's face. \"Well are you gonna tell me?\"\n\n\"It's a good one.\"\n\n\"Great. So tell me.\"\n\nJen took another moment to savour her advantage in rumour gathering, then leaned in and dropped her voice conspiratorially. \"The plug Hailey's been wearing...\"\n\n\"Yeah?\"\n\n\"Apparently it vibrates.\"\n\n\"What?\"\n\n\"Vibrates. Like a vibrator. In her butt.\"\n\nRiley turned around a little too quickly to maintain her air of nonchalance. Hailey's locker was down the hall, and though her bum wasn't visible, let alone what she was wearing in it, Riley could see the side of her face when the wall of students between them shifted the right way.\n\n\"There's no way,\" Riley said. \"She wouldn't just be... vibing herself all day. Would she?\"\n\n\"I expect it can be turned off and on.\"\n\n\"Oh, yeah, that would make sense.\" Riley chewed her lip thoughtfully, her mind going to the brief image of the jewel between Hailey's butt cheeks that she'd captured moment ago. \"You really think it vibrates though?\"\n\nJen shrugged. \"How would I know? It's just what I hear.\"\n\n\"It would be keeping ahead of the rest of us. That's for sure.\"\n\n\"I dunno. It gets awfully close to the masturbation thing again.\"\n\nRiley tilted her head and looked disbelievingly at Jen. \"You seriously gonna tell me you wouldn't be impressed.\"\n\nJen thought for a moment. \"Well yeah, I'd be impressed. I mean, it'd make a sound when vibrating, right? That'd get even more attention. And be a bit riskier probably.\" She switched to her conspiratorial tone again. \"But wouldn't it just make you horny though?\"\n\nRiley laughed softly. \"Probably. But then, I get kinda horny as it is.\"\n\nJen matched Riley's nearly silent laughter. \"You're not s'posed to admit it, you goof.\"\n\n\"You already know.\"\n\n\"True.\"\n\n\"And even if you didn't, I can trust you with my secrets.\"\n\n\"Probably just as well. If you didn't trust me with secrets, you've been awfully liberal in telling them to me.\"\n\nRiley, mulling things over in her head, reached a decision. \"I'm gonna go ask her.\"\n\nJen arched an eyebrow. \"Hailey?\"\n\n\"Yeah.\"\n\n\"Is that allowed?\"\n\n\"Asking her? Why not.\"\n\n\"I dunno. Ruins the mystique, I guess.\"\n\n\"Well I just won't tell you what she says, then. Keep the mystique intact.\"\n\n\"Don't you dare hold out on me.\"\n\n\"We'll see.\"\n\nRiley slipped through the hall, conscious of her lack of wingwoman as she moved away from Jen. She could still operate solo if she needed to, but it was way more comfortable with her best friend next to her, both of them showing off their jewels instead of just her.\n\n\"Hailey?\" Riley said as she took up a lean on the locker next to Hailey's.\n\nHailey closed up her locker. \"Riley,\" she returned. Her gaze shifted downward, and without really thinking about it Riley half-turned to show that she was displaying a plug. Hailey's smile grew bigger. \"Nice.\"\n\n\"Thanks.\"\n\n\"I think I heard you were wearing a plug. One of the early adopters, right? You and Jen?\"\n\nRiley nodded, flushing slightly at her reputation preceding her. \"That's right. Not that we're quite on your level.\"\n\n\"Oh?\"\n\n\"Well... some say you were first.\"\n\nHailey shrugged. \"Other girls started wearing them before I did.\"\n\n\"None showed them off, though. You were first at that?\"\n\nHailey smiled slyly but didn't say anything.\n\n\"You're not gonna tell me, are you?\" Riley said.\n\n\"A girl's gotta keep some mystery.\"\n\n\"Fair.\" Riley shifted her weight, inadvertently reminding herself of her butt plug. Even with all her experience, she still caught herself off-guard with it at times. \"New rumour is you have a, uh, different kind of plug these days.\"\n\n\"Maybe I do.\"\n\n\"Mystery again?\"\n\n\"Tell you what. Tell me what you think is special about it before I say anything.\"\n\nRiley swallowed, growing more nervous despite not quite knowing why. \"Does it... vibrate?\"\n\nHailey nodded easily, all smiles. \"Got it in one.\"\n\n\"For real?\"\n\n\"Yep.\" Hailey turned to show her butt to Riley.\n\n\"It, uh, kinda doesn't look that different to a regular plug,\" Riley said.\n\n\"I know, right? Still just like a regular old butt jewel. Give it a press though.\"\n\n\"What?\"\n\n\"The jewel. Press it for about three seconds.\"\n\nRiley swallowed, going somewhat fluttery as she reached for Hailey's plug. She'd touched other people's plugs on occasion. While they were wearing them, even. It happened. This felt different to her, and she didn't quite know why.\n\nThere was a border around the edge of Hailey's jewel, where the base of the plug was wider than the gem. When Riley pressed in the middle, the jewel clicked in just a bit, enough to be noticeable. Nothing happened, but after a few seconds, a whirring noise started up and Riley yanked her hand back from the sudden vibrations as though it had gone hot.\n\nRiley flushed deeper red, embarrassed at her reaction. Hailey didn't seem to pay it any mind, though.\n\n\"See?\" Hailey said.\n\n\"I do,\" Riley mumbled, still staring at her ass. She was bizarrely transfixed.\n\nHailey casually reached down and pressed her button again. The whirring grew louder.\n\n\"It's got different settings and everything,\" Hailey explained. \"Different speeds, but also it's got patterns.\"\n\nShe pressed her plug a couple times, and Riley got what she meant when the sound started going on and off in a controlled rhythm.\n\n\"That's pretty fucking cool,\" Riley said.\n\n\"Isn't it?\"\n\n\"So is. Do you actually turn it on while you're wearing it?\"\n\n\"Of course. What's the point otherwise?\"\n\n\"Uh, yeah. True.\"\n\n\"Obviously I don't have it on most of the time. The noise isn't so bad when there's people around, but in class when it gets quiet or something, you're be surprised how obvious it is.\"\n\nRiley's eyes widened. \"In class?\"\n\n\"Well... the thing about it is, right, that sometimes if you don't pay attention, you can kinda turn it on accidentally just by sitting the wrong way. And then to turn it off without actually sticking your hand down the back of your pants, not the easiest.\"\n\n\"Oh wow. That sounds crazy.\"\n\nHailey grinned, flushing just slightly pink. \"Not that crazy.\"\n\n\"No way. Definitely crazy. You get in trouble for it or anything?\"\n\n\"I've been lucky. I always keep covered up in class.\"\n\n\"Well of course.\"\n\n\"And I think mostly people think it's a phone on vibrate. Teachers do, anyway. Some of the people next to me... some of them have definitely caught on.\"\n\n\"Damn. That's insane.\"\n\n\"Glad you think so.\"\n\nA sudden flurry of activity at one end of the hall caught both girls' attention. Everyone displaying butt jewelry was pulling their pants up. Neither Riley or Hailey hesitated to do the same. A moment later, Mr. Simmons walked by. He didn't catch anyone with their pants down, in a literal sense or otherwise, and didn't seem to be trying too hard either.\n\nLike many teachers, he didn't bother getting as worked up about the new trend as he might have when it started. Some of them had been fiercely annoyed by the new fashion trend, but it was a hard one to catch anyone out on, since they could always just pull their pants up and pretend nothing was amiss.\n\nMost everyone who'd adjusted their cover went right back to showing their butts again when the danger was past, Riley and Hailey included.\n\nHailey pressed her plug and held it for a few seconds, turning it off. It was only then that Riley realized it had still be running as a teacher walked by.\n\n\"I need to get one of those,\" Riley blurted before she'd actually decided it was a good idea to say aloud.\n\nHailey looked curious and impressed. \"Yeah? You'd wear one?\"\n\n\"I think so. I mean, it looks cool and kinda fun. And I mean, gotta keep ahead of everyone else, right?\"\n\nHailey glanced around as she turned back so she was fully facing Riley. Riley was disappointed not to get to see her butt anymore. To kind of a weird degree, actually. She wasn't sure what was with that. She'd seen the plug. That had been the main goal.\n\n\"Almost getting popular, isn't it?\" Hailey said. \"Even the boys are starting to get into it. I wasn't sure they would, really, except for a special few.\"\n\n\"Most of 'em still just like looking.\"\n\n\"Can't blame them for that, I s'pose.\"\n\nRiley felt an inexplicable little flutter in her tummy. \"You think?\"\n\nHailey grinned. \"Don't tell me you don't like looking. Everyone does. Mostly everyone.\"\n\n\"Oh. Well yeah. Sure.\"\n\n\"You're fascinating, you know.\"\n\n\"I am?\"\n\n\"Yep. I think you must be one of the bravest girls in school, but the way you get flustered so easily I can't quite figure out what's going on there.\"\n\nRiley squirmed. \"Usually I got Jen with me. She makes me braver.\"\n\nHailey arched an eyebrow. \"Oh?\"\n\n\"You know. Best friends for forever, basically. Everything's easier with her around.\"\n\n\"Just friends?\"\n\n\"Um... what?\"\n\n\"Nothing.\"\n\n\"No, what did you-\"\n\n\"So listen, I gotta get to class, obviously. You really want a plug like mine?\"\n\nRiley really did. She'd wanted one anyway, but the way Hailey asked made her bizarrely interested specifically in matching with her. \"I do.\"\n\n\"Cool. I'll bring you one. Maybe tomorrow if I remember.\"\n\n\"You will?\"\n\n\"Sure. It'd be nice having someone else doing the vibrating thing. As far as I know it's just me so far.\"\n\nRiley's tummy fluttered again. \"So it'd be just us, then.\"\n\nHailey smiled wide. \"Fun, right?\"\n\n\"Um... so you want me to pay you back when you bring it or-\"\n\n\"Nah. I got a source. Don't worry about it. Just gotta let me see you wear it, obviously.\" Hailey's smile became almost suggestive. \"Maybe I could help you put it in, even.\" She winked, then slowly turned and walked away.\n\nRiley stood right where she was, both because she was confused and wasn't sure what had just happened, and because she couldn't take her eyes off Hailey's ass. As she watched, Hailey reached back and pressed her plug, presumably turning it on, though she was too far away to be sure.\n\nRiley was still a bit dazed when she rejoined Jen.\n\n\"So?\" Jen prompted.\n\n\"Hm?\"\n\n\"Is it a vibrator?\"\n\n\"Oh. That. Yeah, it is.\"\n\n\"Cool. Seemed like you talked about it kind of a lot.\"\n\n\"That and other stuff.\"\n\n\"Yeah?\"\n\n\"Well mostly just about plugs, I guess. I think... I think she's gonna bring me one. Like hers.\"\n\nJen looked impressed. \"Wow, really? How'd you swing that?\"\n\n\"I... didn't really do anything. She said she just wanted someone else to wear one. I don't think that's really the reason, but I don't know what is.\"\n\nJen tilted her head and seemed about to say something, but the bell rang before she could. \"Catch you at lunch?\" she said instead.\n\n\"Definitely.\" Riley took a deep breath and prepared to face her morning classes. \"I'll probably wanna hang after school too, the way this day's going.\"\n\n\"Yeah yeah, of course. No one's home at my place until this evening.\"\n\n\"Cool.\"\n\n****\n\nRiley was distracted all day. Classes were sometimes a place for games of showing off some more, even just pulling her bottoms down some while in her seat, enough to show a little shine from her bum.\n\nShe wasn't the only one, either. It wasn't really a surprise these days to see one or two shiny plugs showing for most of a period, if one wanted to look. Riley had even seen some games of letting others touch the plug a bit while class was happening, though she didn't really get into that sort of thing.",
        "One of her classes was with Hailey. Riley had the urge to go sit by her, but it was unfortunately one of the classes with assigned seating. Hailey smiled at her before the lesson started, and Riley caught that she was still sneakily showing off her plug a bit. Both the smile and the exhibitionism distracted her more than ever.\n\nIt made Riley's heart beat faster to lean forward and tug her pants down. As far apart as they were, it took Hailey some time to notice, but when she did it made Riley all happy and warm to get another wide grin for her effort. She kind of wished she could get away with more than that during class, but that was about her limit.\n\nIt was a massive relief to get out of school that afternoon, and subsequently get to Jen's house.\n\nRiley sighed with relief as she was finally able to strip off her leggings and panties entirely. Jen was only slightly slower to do the same.\n\n\"Damn, dude, my panties are soaked from today,\" Riley said.\n\n\"Yeah? Fun day was it?\"\n\n\"I don't even know! Just... confusing. Or something.\n\n\"Doesn't seem like your pussy's that confused.\"\n\nRiley rolled her eyes. \"Ha ha,\" she said with no trace of amusement.\n\nRiley followed Jen as the girls walked totally bottomless to the kitchen for snacks. She was basically just as comfortable in Jen's house as her own, and did her own foraging right alongside her friend.\n\nDespite initially thinking she was hungry, Riley didn't eat much. She wandered away before too long and went back to Jen's room, making herself comfy on the bed. Jen joined her only a moment later. By then, Riley had already spread her legs a bit and started playing with her crazily soaked pussy.\n\nJen still had a half a cookie in her hand and sat cross legged on the bed with Riley while she finished eating it. She brushed a few crumbs away when she was done, then rearranged herself and casually reached down to masturbate too.\n\n\"I think I really needed this today,\" Riley said, eyes half closed in pleasurable relief.\n\n\"I need it basically everyday,\" Jen said.\n\n\"Yeah, me too. More that usual, I mean.\"\n\n\"Mmhm. You even look super horny.\"\n\n\"I do?\"\n\n\"Yeah. Pretty wet down there. And kinda... puffy? Almost?\"\n\n\"Sure. I guess.\"\n\n\"I know you're gonna try and avoid it, but seriously, what did it for you?\"\n\n\"Who says I'm avoiding it?\"\n\n\"That right there was a deflection.\"\n\n\"Wasn't.\"\n\n\"And that.\"\n\nRiley sighed. \"Fine. Can I at least get off before you interrogate me?\"\n\n\"You can try. I don't know if I'm that restrained, though.\"\n\n\"No, you probably aren't.\"\n\nRiley slowed down and stopped working quite so deliberately toward orgasm. She kept fingering herself though. Just a little constant stimulation to take the edge off.\n\n\"I think you're right,\" Riley said. \"It's still not quite clear in my head, but I think there is something. I haven't quite worked it out yet though.\"\n\n\"So bounce it off me,\" Jen said, casually playing with herself very similarly to Riley. \"That's what I'm here for.\"\n\n\"Oh god. This is gonna sound... weird. Or dumb.\"\n\n\"Doubt it.\"\n\n\"You don't know what it is yet.\"\n\n\"Strangely, I might have an idea.\"\n\n\"For real?\"\n\n\"I might. Maybe you'll surprise me.\"\n\n\"Ugh, I don't wanna say it.\"\n\n\"You better. You can't leave me hanging now.\"\n\n\"Promise you won't think it's bad?\"\n\n\"That's a weird thing to make me promise, Ri. You know I can't help what I think. But also, what could you even say that I wouldn't accept, hm?\"\n\nRiley flushed. What she wanted to say was made somewhat more uncomfortable by her fingering herself while she said it. She had to reluctantly pull her hand away from her pussy and rest it on her leg.\n\n\"I think I might have a bit of a crush,\" Riley said, not quite looking at Jen.\n\n\"Oh. Good!\"\n\n\"On... Hailey.\"\n\n\"Nice!\"\n\n\"Nice?\"\n\n\"Well I already said good.\"\n\n\"Hailey's a girl, Jen.\"\n\n\"Yes, I'd actually picked up on that, thanks.\"\n\n\"But... but I don't like girls.\"\n\nJen wrinkled her nose. \"No, Ri,\" she said gently. \"You don't like boys.\"\n\n\"What?\"\n\n\"You've never liked a boy.\"\n\n\"I have!\" Riley hesitated. \"Haven't I?\"\n\n\"You've certainly never told me about any. And you tell me everything.\"\n\nRiley leaned back and tried to think. \"Oh. Oh wow. Fuck. Shit.\"\n\n\"Shit and fuck,\" Jen agreed empathetically. She too stopped masturbating for the sake of the conversation.\n\n\"I've never liked a boy?\"\n\n\"Probably not, no.\"\n\n\"But... but girls... but I'm... am I... do I...\"\n\n\"Shhh, you don't have to work it all out right now.\"\n\nJen crawled over, her jeweled plug catching the light and sparkling beautifully for a moment before she sat back down right next to Riley. She put an arm around her friend and just held her.\n\n\"I don't even hardly know Hailey,\" Riley mumbled.\n\n\"That often happens with crushes.\"\n\n\"I mean I know her some.\"\n\n\"She's possibly the first public butt jewelry wearer,\" Jen pointed out. \"That's enough to intrigue anyone.\"\n\n\"I guess.\"\n\n\"And she's cute.\"\n\nRiley felt her cheeks warm. \"Oh god, she is, isn't she?\"\n\n\"Mmhm. I mean, not my type, but she definitely is.\"\n\n\"You still like boys, I suppose?\"\n\n\"They're very nice to look at, yes.\"\n\nRiley covered her face with her hands for a moment. Jen pulled her closer and snuggled with her, sharing warmth and reassurance as best as she could.\n\n\"I was staring at her butt!\" Riley moaned. \"I couldn't figure out why.\"\n\nJen giggled. \"Butts are great. Don't fight it. We're living in a golden age of checking out your crush's backside. If you happen to have the right crush. Which, let's be real, we both kinda seem to.\"\n\n\"Why are you so calm about this?\"\n\n\"Because, my darling, I'm not the one having a world-shattering revelation.\"\n\n\"I guess that's fair.\"\n\nJen held Riley with both arms, gently rocking and soothing her.\n\n\"Jen?\" Riley asked cautiously.\n\n\"Hm?\"\n\n\"Does this mean... do we have to not, like, see each other with our clothes off anymore? Can we not relax after school like this?\"\n\n\"Why the hell would it mean that?\"\n\n\"'Cause... 'cause if I like girls...\" Riley took a deep breath, but still felt a little choked. \"I never quite understood why it seemed easier masturbating with you. More fun. But it, uh, kinda makes sense now. And I don't want to put you in that position.\"\n\n\"Oh, Ri. You're still crushing on Hailey, yeah? Not me?\"\n\n\"Pretty sure. But... I think I might like looking at you. Sometimes.\"\n\n\"I'm nice to look at. That's no one's fault.\"\n\n\"I'm being serious.\"\n\n\"I know.\" Jen pulled Riley's chin up, forcing her to make eye contact. \"And seriously, I don't want anything to change. Nothing, ok?\"\n\n\"I changed.\"\n\n\"No you didn't. You're the same girl you were half an hour ago. Same girl you've always been.\"\n\n\"I might look at you differently.\"\n\n\"So? Bish, I've checked you out just as often as you've looked at me. It doesn't mean anything. It's not bad or a big deal or anything, right? Never bothered either of us, did it?\"\n\n\"Well, no, but-\"\n\n\"Do you think you're going to start feeling uncontrollable urges to do things with me?\"\n\n\"No!\"\n\n\"Do you think I think you will?\"\n\n\"... probably not?\"\n\n\"Ok then. Are you going to stop being silly?\"\n\n\"... not yet.\"\n\n\"Do you want me to keep holding you for a while?\"\n\nRiley nodded and cuddled a little deeper into Jen's grasp. \"Yes please.\"\n\nJen kept holding Riley, sometimes rocking her or stroking her hair. Eventually they both got uncomfortable holding their positions and had to shift. When Jen started rubbing Riley's back, it lured Riley into lying down on her tummy and relax into the soothing touch of her best friend's hand up and down between shoulder blades and butt.\n\n\"Rather perversely,\" Jen said, \"I kinda want to grab your ass now. I think it'd probably make things a bit awkward, but I really want to do it.\"\n\n\"Like how?\"\n\n\"I dunno. Big ol' handfuls I guess. Maybe smack it a bit.\"\n\nRiley giggled. \"You're crazy.\"\n\n\"I dunno. It's a nice butt. The gleam of your plug really catches the eye, too. Keeps drawing me down.\"\n\n\"Thanks. But you better not. I'm only a brand new lesbian. You might make me fall for you immediately.\"\n\n\"Does that work?\"\n\n\"It might. I'm very vulnerable right now.\"\n\nJen kept rubbing quietly for long enough that Riley thought she was going to drop it. Then, with no further warning, Jen did in fact grab Riley's ass with both hands, giving firm squeezes. She then quickly alternated smacking each cheek in rapid succession like a drum roll.\n\nRiley squealed and started kicking. When Jen didn't stop, Riley rolled over and aimed her kicks for actual effect, catching Jen in the tummy. Jen laughed and fell over, miming dead for a moment before propping herself up on her arms.\n\n\"How was that then?\" Jen asked. \"You really want to kiss me so very badly now, don't you?\"\n\nRiley's eyes glinted madly. \"You're in trouble now,\" she confirmed, then launched herself at Jen.\n\nJen didn't have time to roll away, Riley was already on her. She laughed and barely managed to hold Riley back from trying to put big, play-acting kisses all over her face.\n\nThe girls tired themselves with wrestling each other and fell apart, bare legs still slightly tangled as they lay panting softly.\n\n\"I love the fuck out of you, you know that?\" Riley said.\n\nJen grinned and punched Riley lightly on the arm. \"You're my bish.\"\n\n\"Yeah I am.\" Riley groaned and sat up. \"Weirdly, I'm not even sure if I'm still horny or not.\"\n\n\"Guess I shoulda rubbed your face in my boobies some more or something, huh?\"\n\n\"Oh shush.\"\n\n\"You should still have a cum. Get it out of your system.\"\n\n\"Would that be weird right after, like rolling around on your bed with you?\"\n\nJen grinned, already reaching for her pussy. \"It got me kinda worked up, even,\" she said softly.\n\n\"Oh goddd, no it didn't. You were just already horny.\"\n\n\"And you're not?\"\n\nRiley bit her lip, then slowly reached for her clit. \"Maybe a little.\" Her bare leg remained draped over Jen's as she started rubbing herself. \"Not 'cause of you though.\"\n\n\"Maybe a little 'cause of me?\"\n\n\"Does your ego demand it?\"\n\n\"Yes.\"\n\n\"Then sure. Yeah.\"\n\n\"Good.\" Jen relaxed, let her eyelids droop, and just rubbed herself. She reached down with her other hand and fingered her butt plug some. \"Staying for supper?\"\n\nRiley hesitated but kept her fingers moving. \"You won't tell your family or anything, will you? About me? Not that I don't want them to know, but maybe not yet?\"\n\n\"Nah, Ri. That's up to you. Not my call.\"\n\n\"Thanks, Jen.\"\n\n****\n\nRiley ended up spending the night. It was a common enough thing not to attract the slightest attention from either family.\n\nShe was a little hesitant about sleeping in bed with Jen, but she wasn't given a choice in the matter. Jen noted her hesitation and yanked her into bed, trapping her under the covers before she could react.\n\n\"Do you want some cuddles?\" Jen asked.\n\n\"... is it weird if I say yes?\"\n\n\"It's weird if you don't.\"\n\nRiley accepted some light cuddles, then rolled around so Jen could spoon her from behind. While Riley still wasn't quite caught up to big revelation of the day, she trusted that Jen wouldn't let herself be caught in anything she wasn't comfortable with, particularly if she was initiating.\n\nThe cuddles didn't last all night by any means. Jen rolled away before falling asleep, and by morning both girls were sprawled and only touching accidentally.\n\nIn the morning light, and with a surprisingly decent night of sleep in her, Riley felt perkier than the evening before. She smiled at Jen's sleeping face before waking her up, then went about her morning as usual.\n\nWhen the girls helped each other lube up and insert their butt plugs for the day, it didn't even occur to Riley until afterward to think twice about it. It felt kind of nice that she hadn't lost all that lovely platonic intimacy that she and Jen shared.\n\nRiley started to get nervous as they were headed to school. Things remaining perfect between her and Jen was great, but she'd have to deal with what, if anything, she felt about Hailey. She'd been confused yesterday, and it was that much worse today. Now that she had a for real crush on a girl and all.\n\n\"You think there's any chance Hailey kinda maybe likes me back?\" Riley asked Jen.\n\n\"Well-\"\n\n\"It'd be easier if she didn't, in a way.\"\n\n\"I think-\"\n\n\"But what if she did? I kinda want her to.\"\n\n\"You could-\"\n\n\"What would I do though? Would I ask her out? Oh god, could I even? I don't know if I could.\"\n\n\"She-\"\n\n\"I'm probably not even really crushing. I just think I am. It's just 'cause she's cute, that's all. And I'm new to this. Liking girls. It's a new thing.\"\n\n\"It's not-\"\n\n\"And she's so brave, though. With plugs and stuff. And I kinda like how she smiles at me.\"\n\n\"...\"\n\n\"And there's this, like, funny kind of feeling in my tummy when she's around. At least yesterday. Has it always been there? Have I just not noticed?\"\n\n\"...\"\n\n\"She's just easy to talk to. Have you noticed that? Or is that just me? Maybe it's just 'cause I like her.\"\n\n\"...\"\n\n\"Oh wow, I do like her, huh? Maybe I really do. Is that crazy? We've never really been friends, not exactly, but maybe we don't need to be.\"\n\n\"...\"\n\n\"Or what if it's the mystery of her? Is that a thing? Do I just like that I don't know that much? Probably not. She's not exactly a mysterious stranger, huh? We've been classmates for a while. We talk some. Not like I don't know her at all.\"\n\n\"...\"\n\n\"I don't know, I'll have to see what happens.\" Riley took a deep breath and nodded to herself. She reached over and squeezed Jen's hand. \"Thanks for talking that through with me. I feel better.\"\n\n\"Oh sure. Anytime.\"\n\nThe girls didn't spend their time before class posing at their lockers, as was their usual wont. They only briefly stopped there, adjusted their pants for optimal jewelry display, then headed straight for Hailey's locker.\n\nRiley was a little disappointed that Hailey wasn't there yet, but when she turned around she found that Hailey was right behind her, smiling impishly.\n\n\"Hey there,\" Hailey said. \"I was gonna catch you at your locker, but then I saw you headed over here. And really, who can resist following behind two such pretty, well decorated butts.\"\n\nJen winked and blew an exaggerated kiss, half turned to wiggle her bum at Hailey, then settled down.\n\nRiley appreciated Jen's levity, since she was feeling somewhat on edge. Happy to have Hailey checking her out, happy to be talking to her again, but definitely unsure of herself.\n\n\"Hey,\" Riley said sheepishly, doing her best to appear normal, but quite succeeding.\n\n\"You brought a friend,\" Hailey said, nodding at Jen.\n\n\"I'm her security blanket,\" Jen replied chipperly. \"I don't mean to intrude by any means, but Ri hasn't seemed interested in giving my hand back.\"\n\nRiley realized that she had, in fact, been maintaining a death grip on Jen's hand this whole time. She jerked her hand away. That wasn't really a good start, showing up holding another girl's hand. She was pretty sure that wasn't the way one was meant to act around a crush.\n\nHailey only seemed amused though. Which wasn't necessarily a good thing, if it meant she had no interest in Riley at all.\n\n\"You don't have to be nervous,\" Hailey said.\n\n\"I'm not,\" Riley lied.\n\n\"You are,\" Hailey said.\n\n\"You definitely are,\" Jen added.\n\n\"Traitor,\" Riley muttered, only making Jen smile wider.\n\n\"If it's about the plug, yes I have it, and no it's not at all scary,\" Hailey said.\n\nShe reached into her bag and pulled out a box rather obviously containing a sex toy of some kind. There was a big picture of a butt plug on the front, in case there was any question exactly what kind of toy was contained within.\n\n\"Well don't show everyone,\" Riley squeaked.\n\nJen nudged Riley with her hip. \"Dude, you're gonna be wearing it soon.\"\n\n\"That's different. No one pulls their plug out and waves it in the air, do they?\"\n\n\"I mean, technically no.\"\n\nHailey shrugged and held the box in her arms, below breast level. Just subtly held it there. \"We could always get it in you right away,\" she suggested. \"If somehow people seeing it not in you is more embarrassing than in you.\"\n\n\"You guys both wanna make me sound insane, don't you?\" Riley grumbled.\n\n\"Well you are still showing off your ass and plug to everyone,\" Jen said. \"And you're all embarrassed 'cause Hailey's holding a box with a new butt plug in it. So...\"\n\n\"Weren't you just telling me yesterday not about playing with plugs and stuff? Being all casual about it?\"\n\n\"Sure was. So be casual.\"\n\n\"You two are kinda cute together, huh?\" Hailey said.\n\nRiley halfway wished she hadn't brought Jen. She was scared that it was really starting to look like they were a thing, and that was not at all the impression Riley wanted to give.\n\nThe only thing Riley could think to do was to try and find her bravery and act more decisive. She knew she could do it. She had before. Just because wearing her butt jewelry was normal for her now didn't mean that it had been so easy at that start. That had taken some uncommon confidence from her. Surely she had more of that.\n\nRiley gently took the box from Hailey. \"Ok, let's get it in me,\" she said, voice hardly even trembling.\n\n\"That's the spirit,\" Jen said cheerfully. \"I kinda want to see how it works once it's in.\"\n\n\"You haven't seen one yet, huh?\" Hailey said.\n\n\"Nope. Just heard about it from Ri. She seemed pretty excited, though.\"\n\n\"I'm not putting it in here,\" Riley said, half ignoring the other two. \"Usually I don't have to worry about it at school. What would be easier, like, an empty class? A bathroom? Outside somewhere?\"\n\n\"Probably a bathroom,\" Hailey said. \"See if we can't find an empty one.\"\n\nRiley nodded. \"Ok.\"\n\nHailey took the box back from Riley just as delicately as it had been initially swiped from her. \"Now, you did say that I could put it in for you.\"\n\nRiley swallowed, her mouth suddenly dry. Her heart was beating way too loudly, and she almost moved a hand to cover it before realizing that probably wouldn't actually muffle the sound of it.\n\n\"I think you said that,\" Riley corrected.\n\n\"Oh. Yeah, you're probably right.\" Hailey held the box back to Riley.\n\nRiley was all too conscious of Jen standing right next to her. She was of two minds, still wishing she hadn't brought Jen, and phenomenally glad she was there for moral support.\n\n\"But I could probably use a hand with it,\" Riley said, surprised at how confident her words sounded as she said them. \"If you want to.\"\n\nHailey's smile was slow to return, but once she was sure about what Riley was saying, it practically gleamed. \"I'd be happy to help.\"\n\n\"It was so nice of you to get it for me,\" Riley heard herself saying.\n\n\"Very thoughtful,\" Jen interjected with far too much amusement in her tone.\n\n\"And you have more experience with this kind of plug than I do,\" Riley finished.\n\nIt wasn't much of a reason, Riley knew. Except for possible size issues, butt plugs didn't really involve many differences as far as inserting them. Not the ones anyone at school wore, anyway. She'd seen online that there were some weird and even scary variations out there, though they tended not to have jeweled bases, which made them unsuitable as a school fashion option.\n\nFlimsy as the excuse was, no one questioned it. Riley knew why she was accepting help from Hailey, as did Jen. It was unclear yet what Hailey was thinking, but Riley could only hope it was somewhat in line with her own thoughts on the matter. Hailey had, after all, suggested putting it in for Riley in the first place. She must have some kind of interest in doing it.\n\nThe three girls walked in a loose group, Hailey leading Riley and Jen. Riley kept sneaking peeks at Hailey's butt in between bouts of clenching her hands and trying not to throw up due to nerves.\n\nJen subtly slipped her hand into Riley's when she wasn't paying attention. When Riley glanced over at her, Jen gave her a reassuring smile and mouthed something Riley didn't catch, but assumed was supportive.",
        "Once in the bathroom, Riley's anxiety leapt to a whole new and more urgent level. Hailey did a quick peruse, peering under stalls, and concluded they were alone for the moment.\n\nSomehow, Riley composed herself before Hailey turned around, and even impressed herself with how calm she looked in the mirror. Just by looking, she wouldn't guess that she was all aflutter inside, so badly wanting what was about to happen, but terrified of it at the same time.\n\nWith Jen, things like this were easy. Casual intimacy was such a normal thing for them, and was just stuff they did as friends. With someone she actually really might like as more than friends-though that still wasn't totally clear-Riley didn't know what to feel.\n\n\"Now what?\" Riley asked.\n\nHailey shrugged and opened up the box. \"I only took this out last night to charge it and give it a bit of a clean. It's brand new other than that.\"\n\n\"That's, uh, good.\"\n\n\"Mmhm.\"\n\nRiley noted Hailey fiddling with the butt plug, hesitating. It was actually tremendously helpful to see a touch of nerves in her as well. Riley didn't want to feel like she was the only one a bit out of her comfort zone.\n\nTaking a deep breath, Riley pulled her leggings and panties down to her knees and bent over the sinks, leaning on her arms. She tried to strike a balance by sticking her ass out enough to be enticing, but not enough to be obvious or slutty about it.\n\n\"I guess you could put it in now,\" Riley said. \"If you want.\"\n\n\"Yeah,\" Hailey said faintly. \"Guess I could.\"\n\nRiley's arms tensed up as Hailey knelt behind her. She had to concentrate on relaxing them, on breathing deeply and calmly. She wanted to keep track of Hailey in the mirror, but the angle wasn't good and only the top of Hailey's head was consistently visible. It was all the more nerve-wracking and exhilarating not to know exactly where Hailey was looking or what she was doing.\n\n\"Gotta take this out first,\" Hailey mumbled.\n\nRiley gasped softly at feeling her butt plug move. She should have been expecting it, but she'd also never had anyone except herself or Jen even touch it, let alone try to pull it out. Physically it was nothing exceptional. Emotionally it was a whole new thing for her.\n\nJen picked a different mirror and pretended to check herself out in it. Riley knew it was only a ruse to look like she wasn't that interested in what was going on, and not a great one either, since she couldn't keep her eyes from gravitating toward the action.\n\n\"Your butthole's so tight,\" Hailey said, letting Riley's plug slip back in before it had quite made it to the widest part.\n\nRiley flushed. \"Just a regular one,\" she mumbled awkwardly.\n\n\"I dunno. It's just different from dealing with mine. I can feel everything usually. I can't with you.\"\n\n\"I mean, that'll kinda happen.\"\n\nHailey pulled on Riley's plug again, once again getting it to nearly the widest part before letting it go back. \"Never seen this up close either.\"\n\n\"Never?\" Riley asked, voice cracking even just on the single word.\n\n\"Nope. It's... kinda fun.\"\n\nJen was trying to hide a smile, but it was getting so damn big as she listened and watched. Riley wanted to throw something at her, but didn't have anything handy. Plus if Hailey hadn't noticed Jen's amusement, Riley didn't want to call attention to it.\n\nRiley's arms trembled slightly. She hoped so fervently that she wasn't getting too obviously aroused or anything. She wanted to seem cool and in control, not like the nervous school girl with a crush that she was. But then, how many people had to deal with their first crush toying with their butthole up close and personal like this? It wasn't a fair scenario right from the start.\n\nBefore Riley had to decide how long she could let Hailey play with her, Hailey finally pulled the plug all the way free. Riley's bum was empty, rather unusual for this time of day. It felt like there was a piece of her missing just because of how used to it she was.\n\nWorse still, Hailey now had an unobstructed view of her butthole. Riley usually didn't have consider what it looked like or what anyone would think. Now she was filled with concern over what Hailey thought of it, how closely she was looking, what she was going to do next. So many different considerations.\n\n\"That's cute,\" Hailey said.\n\nRiley gripped the counter tighter and tried to keep her voice steady. \"What?\"\n\n\"There's just a tiny little gap there. Where I took the plug out.\" Hailey put a hand on Riley's ass cheek and spread her a bit more. \"You didn't quite close up. But I think you're getting there. It was only for a moment.\"\n\nRiley squirmed, wanting to close her legs, but also not wanting to give away how badly embarrassed and turned on she was. \"I didn't know I did that.\"\n\n\"You definitely do,\" Jen said from the side, feigning indifference with less and less conviction. \"Just a little gape there when your plug comes out.\"\n\n\"Oh my goddd,\" Riley whined. \"Don't tell her that.\"\n\nHailey laughed, then kissed Riley just above the butthole so fast Riley didn't have time to react. \"It's cute. Really. Don't be shy about it.\"\n\n\"It's hard not to be shy,\" Riley said honestly.\n\n\"Is it uncomfortable having me back here?\" Hailey asked.\n\n\"I mean, kinda. But... you can keep going.\"\n\nRiley's words hung in silence for a moment, making her feel vulnerable. Then Hailey ran a pair of fingers up and down over her asshole.\n\n\"Should get some more lube,\" Hailey said. \"Don't want to hurt you.\"\n\nAt last Jen made herself useful and passed Hailey a small bottle of lube almost as soon as she'd asked for it. With that small gesture, Jen abandoned her pretense of not watching and fully turned to observe Hailey at work.\n\nRiley felt Hailey's breath on her so close, so warm. She didn't think Hailey would actually, like, lick her or anything. She wouldn't, right? But she had stolen a quick kiss already. Who could say for sure?\n\nHailey rubbed some slippery fingers all around Riley's butthole, then pushed a single one inside. Riley's eyes rolled back and she struggled not to make any embarrassing noises.\n\n\"That ok?\" Hailey asked.\n\nRiley nodded, then realized Hailey probably wouldn't see the gesture. \"Yeah. Yep. Good.\"\n\nHailey pulled her finger out, added more lube, then stuck her finger back in. She pressed a second finger with the first, and slowly pushed them both inside Riley's ass.\n\nRiley knew she had to be visibly wet. She had to be. Maybe Hailey couldn't see, though. Couldn't see the effect she was having.\n\nOr... did Riley want her to know? Would that be better?\n\nThis was so damn confusing. Riley didn't know what the hell to do.\n\nOnly, Hailey's fingers felt so good, all slippery and gently going in and out. And her warm breath. Her eyes that had to be watching from so close. Riley was a total fucking mess over it all.\n\nEven Jen was transfixed. She had a hand down the front of her panties, rubbing just slowly, not all crazed and lost like Riley, but at least feeling the tension and arousal. It helped, weirdly enough.\n\n\"I'm gonna put the plug in,\" Hailey said breathily.\n\nRiley nodded. \"Ok. Bell's probably gonna ring soon.\"\n\n\"Oh yeah. That. Forgot about that.\" Hailey squeezed Riley's ass cheek with her hand that wasn't knuckle deep in Riley's tight bum, then reached for the new plug. \"This one might be just a little bigger than your old one. It's close, though.\"\n\n\"I'm ready,\" Riley said.\n\n\"I'm gonna lube it up too for you. We might need to clean you up a little afterward. Might have used too much already.\"\n\n\"That's fine.\"\n\nRiley squirmed again at the images her mind conjured of Hailey 'cleaning her up.' They weren't realistic images, not even necessarily things Riley knew she wanted, but in her horny state, they didn't meet much resistance from her.\n\nHer eyes rolled back just at the thought of Hailey abandoning all sense of decorum or restraint and diving tongue first into her ass. That was so crazy. Having Hailey eat her ass out like that. Probably Hailey wouldn't even really want to do that. Probably.\n\nBut, Riley had to admit, her first thought and excuse had been Hailey's preferences. Not her own. If Hailey was so bold as to do something like that, Riley had a suspicion she wouldn't want to stop her.\n\nThat was so damn slutty of her. Way too slutty.\n\nOr... was it? Butt plugs were all the rage right now. Why couldn't ass eating be cool too? For all Riley knew, it might be that she was just out of the loop.\n\nBut then, it really didn't have anything to do with anyone else. She had to admit to herself that it was really only her own mind that was throwing these ideas at her. Her, not some act of fashionable rebellion. And maybe... maybe that was ok. It was all so new, she just didn't know.\n\nThe tip of a plug pressing against her jolted Riley back to reality somewhat. Not a tongue, just a regular old butt plug. Well, not so regular maybe. Definitely not Hailey's tongue, though. Alas.\n\n\"You ok?\" Hailey asked. \"I didn't even push it much. You twitched pretty hard.\"\n\n\"Sorry. Just... nervous. I guess. In an excited way, I mean,\" Riley added hastily.\n\n\"You'll enjoy it. Trust me.\"\n\nRiley felt a trickle of arousal down her thigh. \"I'm sure I will,\" she mumbled to herself.\n\nHailey toyed with Riley again, as she had when taking the old plug out. She pushed it in almost to the widest part, then let it slide back, let Riley's butthole push it out.\n\nDid Hailey know what she was doing? Or was she just stalling to have a longer turn playing with Riley's ass? Riley shivered and felt the urge to clench her legs again at the thought that either way was probably a promising sign.\n\nIt was such a tease, the slow in and out. Feeling her ass stretch out, then close up. Riley loved it, and she couldn't stand it. She wanted more, and she wanted to Hailey to just push it in already.\n\nHailey eventually had to finish up. It was already obvious to everyone present that she'd taken longer than necessary, but not so long that it required comment. Not if no one wanted to mention it aloud.\n\nRiley bit her lip and held back a moan as her new butt plug popped past her outer ring and settled into place inside her. She didn't have long to adjust to it before Hailey pressed on it and made it start vibrating.\n\n\"There you go,\" Hailey said, giving both Riley's cheeks a squeeze before standing up. \"All set up.\"\n\n\"Thanks,\" Riley said faintly.\n\nShe turned around unsteadily, then blushed and bent down to pull her bottoms up. Maybe Hailey wouldn't have noticed how wet she was in that brief moment, but Riley didn't think she could count on it. She felt more secure having herself somewhat covered again, anyway.\n\nHailey and Jen both fussed with Riley's pants at the back, getting her adjusted for optimal presentation of her new plug. Jen's grin was just a tad too smug and knowing for Riley's taste, but she couldn't say anything about it with Hailey there.\n\n\"That vibration is super distracting,\" Riley said, trying to fight the weakness in her legs. All she wanted to do was lean back and jam her fingers down the front of her panties. She wanted to cum so damn badly.\n\n\"Isn't it though?\" Hailey said. \"That's part of why you have to be careful about turning it on during class or something. That and the sound of it.\"\n\n\"How come yours isn't on?\"\n\nHailey shrugged, gave a small, shy smile, and turned around. Riley looked down at Hailey's ass, chewed her lip a moment, then reached down and pressed Hailey's plug. She let it start vibrating too, then took it a step further and pressed again to turn it up to the next level.\n\n\"Ooh, hey, careful there. Gonna be time for class any minute now,\" Hailey said.\n\n\"You can turn it off again when you get there,\" Riley said.\n\n\"Yeah, but I'll be all... distracted.\"\n\n\"You're not already?\"\n\n\"Well, kinda.\"\n\n\"Ri definitely is,\" Jen supplied helpfully. Her hand darted in and pressed Riley's plug, turning it up higher as well.\n\n\"Oh my god, Jen!\" Riley squealed, turning away from her friend.\n\nThe movement only presented Riley's bum to Hailey, who pressed her plug again and turned it up to its highest vibration.\n\n\"Not fair!\" Riley protested, swinging her hands behind her to try and guard her backside. \"Ganging up on me.\"\n\nJen laughed and hugged Riley. \"Only 'cause you're cute when you're like this.\"\n\n\"Like what?\" Riley asked, only somewhat mollified by the hug.\n\n\"Embarrassed, horny, and trying to be cool for your crush,\" Jen whispered in her ear.\n\nRiley blushed worse than ever, but at least Hailey wasn't watching. She was busy pressing Riley's plug more and settling on a pattern of alternating on and off vibrations for her.\n\nIt just wasn't fair at all. The bell rang before Riley could do anything else about her situation, not that she could do much anyway. She was horny as all fuck, her ass was vibrating in a way that kicked it into another gear, and her crush was toying with her ass like it wasn't any kind of thing. What was a girl even supposed to do?\n\n\"Better get going,\" Hailey said, reluctantly leaving Riley's butt alone with a soft, trailing caress of her fingertips as she pulled away.\n\nThe girls all marched out together, Riley flanked and somewhat guided by Jen and Hailey. Her legs didn't want to fully cooperate. She needed to turn off her plug, to regain some concentration, but she didn't want to do that while Hailey was right there. It'd make it seem like she couldn't handle her upgrade.\n\n\"See you guys later?\" Hailey asked, though she only really looked at Riley.\n\nRiley nodded. \"Yeah, see you later.\"\n\n\"Cool.\"\n\nRiley stood and watched Hailey head off. Hailey's butt swayed addictively, her plug shone where it caught the light. The faint vibrating sound of it was lost well before the gleam of reflected light.\n\nRiley fumbled for Jen's hand and squeezed it tight when she found it.\n\n\"Doing ok there?\" Jen asked, amusement thick in her question.\n\n\"Turn it off, please.\"\n\nJen pressed and held Riley's plug until it mercifully went still.\n\n\"Getting to you, was it?\"\n\n\"Do you even know what it's like trying not to be turned on with that thing vibrating inside me?\"\n\n\"Not so much. I don't think it was the only thing getting you though, huh?\"\n\n\"How obvious was it?\"\n\n\"Well... you looked pretty fucking soaked.\"\n\nRiley groaned. \"I was. Still am. Surprised I don't look like I pissed myself yet.\"\n\n\"Ha.\"\n\n\"Then that fucking plug just going and going. You know when you vibe yourself?\"\n\n\"Sure.\"\n\n\"Imagine that but just, like, in you constantly, but no control over exactly what it's hitting. It's, like, not quite hitting the right spots, so it's a bit frustrating, but so close that it keeps you right on edge, and with the feeling that if you wiggle just right, you could probably make yourself cum.\"\n\n\"Oh wow. That sounds... intriguing.\"\n\n\"It's intriguing and delicious and hellacious all at once.\"\n\n\"Oh my.\"\n\nRiley sighed and gave Jen's hand a last squeeze before releasing it. \"Or maybe I'm just horny as fuck and making everything more than it is.\"\n\n\"You need to go cum?\"\n\n\"No time. We're already late. Come on.\"\n\n\"I'd cover for you.\"\n\n\"I know, Jen. Thanks. I just need to get through today for a while. That's all. Maybe I can cum at lunch.\"\n\n\"I'm sure you can. I believe in you.\"\n\n****\n\nRiley didn't make it to lunch. She didn't even make it through first period. Luckily she didn't make a habit of abusing bathroom breaks, so when she asked to be excused she was given permission with only the barest raised eyebrow at how early in the school day it was. Jen caught Riley's eye as she made her way out, but Riley only shook her head fractionally at the unasked question.\n\nRiley locked herself into a bathroom stall and dropped her pants, sighing with relief as she got her fingers busy. Rubbing her clit immediately gave her a feeling of well-being and an antidote to the insane arousal she was dealing with.\n\nIt would have been easy enough to cum just rubbing herself as usual. Riley had the plug in her butt to provide stimulation, and even without it she would have been maybe a few minutes from orgasm.\n\nBut there was certainly some time pressure. And, Riley had to admit, she was curious about what it would feel like with the plug running. She she turned it on.\n\nRight away the vibrations in Riley's ass melded with the dance of her fingers on her clit. It was like they were connected directly. Every little touch was amplified and made more intense by the humming in her bum.\n\nShe settled on medium vibration, leaned back, and fingered herself silly chasing the elusive orgasm that she so desperately needed.\n\nHailey's face popped into Riley's head as she sat there with her eyes closed. That wasn't too much of a surprise, perhaps. Maybe it was to be expected, even. Riley didn't fight it. She thought of Hailey, thought of her watching, maybe even helping.\n\nRiley's free hand dipped to her ass, found the edge of the plug, and toyed with it some. She was careful not to push on the middle where she might change the setting or turn it off. She pressed and wiggled it with no real goal or pattern in mind, only just the memory of Hailey teasing her to go on. The lingering feeling of a plug going in and out.\n\nThere was no way to quite replicate that exact experience. Riley was alone, and her plug was staying firmly inside her. But the exhilaration, the novelty, the physical thrill, those things she could chase.\n\nWith her eyes closed, her breathing quiet and shallow, Riley imagined Hailey there with her. Just watching. Watching Riley get herself off with lots of help from the butt plug Hailey had given her, and even inserted for her.\n\nHailey would watch, if she were there. Riley was sure of that. Maybe more than watch, but at least that much.\n\nAnd Riley would cum right in front of her. Or for her.\n\nFor her? Did that make sense?\n\nRiley couldn't even sort it out. The vibrating plug in her ass was driving her crazy. She found just the right spot, where it impossibly connected to her clit from within her butt, and rode her way to a beautiful, intense orgasm.\n\nThrills ran through her, from her pussy, her ass, and all the way up her body. Riley needed it so badly, and it was so damn good now that she had it.\n\nShe felt blissfully at one with the world afterward. Far too comfortable for her situation, really.\n\nHer panties were still soaked, and cooler than her body temperature now. Riley swapped them out with the spare pair she kept with her. She'd learned her lesson from her time wearing butt jewelry. Some days... some days it didn't leave one looking proper and unmussed. Best to have a backup ready.\n\nOnly Jen looked at Riley askance when she returned. A single questioning moment of contact. Riley gave her back a small smile and enough of a nod to confirm. Jen nodded back, and that was the end of it.\n\n****\n\nRiley and Jen met up with Hailey at lunch in the cafeteria. The three of them shared a square, four person table, each their respective chairs so as to be able to show off their jewelry.\n\nRiley and Hailey both turned their butt plugs on, just on the lowest setting. Enough to count, but not enough to be too loud or distracting while they talked.\n\n\"So how'd you like it?\" Hailey asked. \"All this morning and everything.\"\n\n\"The plug?\"\n\n\"Yeah.\"\n\n\"It, uh...\" Riley leaned in and lowered her voice. \"It got me kinda horny.\"\n\nHailey giggled softly. \"You too, huh?\"\n\n\"It does the same to you?\"\n\n\"It definitely does. Especially if there's something else going on. It's way more likely to get me going than a normal jewel.\"\n\nRiley felt her cheeks warm as she felt the constant, low vibration in her ass. She could still feel Hailey's eyes on her from earlier, up close and personal with her butt. \"I know what you mean.\"\n\nHailey glanced around, but other than the usual looks at their shiny, well-displayed butt jewelry, no one was paying them any undue attention. \"This is kind of embarrassing to say, but at first break I kinda had to sneak away and... get myself off.\"",
        "Riley chuckled softly in relief. \"You think that's bad? I didn't even make it through first period.\"\n\n\"Ha, really?\"\n\n\"Really.\"\n\n\"It's true,\" Jen added absently. \"Asked to go to the bathroom and everything. Came back looking like- ow!\"\n\nRiley smiled angelically, like a girl who wouldn't kick her friend under the table. She accepted the return kick with barely a flinch. Hailey looked between the two of them, but just shrugged.\n\n\"What are you staring at anyway?\" Hailey asked Jen.\n\n\"Oh that?\" Riley said. She flicked her eyes off in the direction of Jen's eyeline, a few tables behind Hailey. \"She's making eyes at Logan.\"\n\nJen had already zoned out again even after their under-the-table foot scuffle. \"Hm?\"\n\n\"Nothing, Jen,\" Riley said.\n\nHailey turned around, just for a moment, and got a look. \"Oh. Logan. Sure. He wears a jewel these days, huh?\"\n\n\"Yup.\"\n\n\"Wears it nicely,\" Jen added, just dreamily enough to be amusing.\n\n\"You just like his ass,\" Riley said.\n\n\"You're not wrong. It's... very nice.\"\n\n\"For a guy,\" Hailey said.\n\nRiley perked up a little. \"Don't like guys' butts?\"\n\n\"Well... not as good as girls' butts, are they? On average.\"\n\n\"Disagree,\" Jen said.\n\n\"She said on average,\" Riley said. \"Not disparaging your boy over there.\"\n\n\"Oh. Then... probably, yeah.\" Jen settled her cheek in her hand as she continued to stare wistfully into the near-distance.\n\nRiley nudged Jen. \"Would you just go over and ask him out or something. You're gonna drive yourself crazy. Or more likely, drive me crazy.\"\n\n\"He's got his friends with him.\"\n\n\"So? You want me to come with? I'll wing girl you, you know I will.\"\n\n\"We'll both go,\" Hailey volunteered. \"Almost even numbers.\"\n\n\"Nah.\" Jen pushed herself to her feet. \"You're right, though, I should go talk to him. He's not coming over here by the look of it.\"\n\n\"Well we're very intimidating,\" Riley said. \"You can't just approach this level of social elite all clustered together.\"\n\nJen rolled her eyes. \"That's probably it alright.\"\n\nJen shook her head gently, put a small, confident smile on, pulled her shoulders back, then started marching away.\n\n\"She's really gonna do it?\" Hailey asked curiously.\n\n\"Probably. Not sure how much of a thing she's really got for this guy, but I guess it's at least something.\"\n\n\"Sure. But, like, not even waiting 'til he's alone or something? Or wasn't he looking at her too?\"\n\n\"He totally was. They were all eye-smooching over here. Or whatever a couple steps down from eye-fucking is.\"\n\n\"But she-\"\n\n\"Jen doesn't always want to wait once she makes up her mind.\"\n\n\"Is that what she was doing? Making up her mind?\"\n\n\"Partly, probably. I egg her on a bit too.\"\n\n\"I noticed that.\"\n\nRiley glanced over at Jen, ready to head over quickly if it looked like she needed backup. Jen had worked some of her minor magic, though, and she and Logan had somehow already moved off on their own a little ways, apparently discussing something fairly intently.\n\nEven as Riley watched, the two cute little flirters each did half-turns, one at a time, either showing off or discussing their respective butt jewels. Or both.\n\n\"Yeah, she'll be fine,\" Riley said. \"I should know better to start with. I thought Logan was getting all this other attention and she had to move fast, but she just wanted to play it cool or whatever. Though I guess that wore off.\" Riley shrugged. \"Either way, she definitely seems to know boys way better than me.\"\n\nHailey arched an eyebrow. \"Oh?\"\n\nRiley flushed, wondering if she'd just said a little too much. But then, she couldn't just dance around things forever. \"Maybe she just knows people better than I do,\" Riley covered lamely, swearing at herself even as she did it.\n\n\"Oh.\"\n\n\"She definitely knew something about me already that I only just figured out,\" Riley said. \"Just for instance.\"\n\nHailey tilted her head, interest piqued. \"Oh?\"\n\n\"Please stop saying that.\"\n\n\"Sorry. What was the thing?\"\n\n\"It, uh, I don't know if I'm ready to say.\"\n\n\"And yet you brought it up.\"\n\n\"I feel like my conversation skills aren't quite all there today, if that's any explanation.\"\n\n\"I guess that's fair. I mean, new plug. Very distracting.\"\n\n\"Oh my god, so distracting!\" Riley squirmed around in her seat, unsure if she wanted to somehow get more or less stimulation from the plug whirring happily away in her ass.\n\n\"Are you... getting horny again?\"\n\nRiley chewed her lip, but as she met Hailey's eyes and felt a thrill run through her, she knew she didn't want to lie. \"Yeah.\"\n\n\"Good. Me too. Being naughty's fine, but being naughty with someone, it's better, I think.\"\n\n\"Me too.\"\n\nHailey leaned in close. Riley matched her posture, enjoying the small intimacy of their position.\n\n\"I almost don't dare ask.\"\n\nRiley's heart beat a little faster. \"Yes?\"\n\n\"What did you think of this morning? That was... kinda naughty. Kinda bad.\"\n\nRiley's ass clenched around her plug. Her clit throbbed in her backup panties that were well on their way to being just as soaked and useless as her first pair. \"I really liked it,\" she admitted softly.\n\nHailey's brow relaxed some and her eyes brightened. \"Yeah?\"\n\n\"Yeah. What about you?\"\n\n\"It was pretty great. I've never, uh, really done anything with another girl's butt like that before.\" Hailey blushed. \"You probably have way more experience than me with that stuff. I didn't think you'd actually, like, go along with me 'helping' you. But it was like no big thing for you.\"\n\n\"Are you even shitting me?\" Riley squeaked in a rather undignified tone. \"I was so fucking nervous!\"\n\n\"Were you? I didn't notice that.\" Hailey looked away for a moment. \"Then again, I was distracted.\"\n\n\"By my butt?\"\n\n\"Mmhm.\"\n\nThe girls giggled together softly, conspiratorially, releasing tension.\n\n\"Did you not see how wet I was?\" Riley asked.\n\n\"Well... I might have noticed. Horny's not the same as nervous, though. And I was mostly all busy trying to figure out exactly what was doing it for you. Just the plug, or... something else.\"\n\nRiley took a deep breath, doing her best to maintain eye contact. \"Both. The plug and... and the something else.\"\n\nHailey went bright pink. Riley felt herself match nearly the same shade. What a fucking pair they must make if anyone looked at the two of them.\n\n\"Good to know,\" Hailey said quietly.\n\nJen slipped back into her seat. \"What's up with you two?\"\n\n\"Nothin',\" Riley said, coughing to clear her throat. \"How'd your little flirt session go?\"\n\n\"Very well, thanks. How'd yours go?\"\n\nRiley looked at Hailey, who smiled shyly back. It was tempting to deny any flirting, or to deflect somehow. It hadn't really been flirting anyway. But maybe it was better in some ways. Riley was at least pretty sure she wasn't totally fooling herself about how Hailey felt.\n\n\"Very well also,\" Riley said.\n\n\"Oh good.\" Jen beamed. \"Me and Logan are gonna hang after school.\"\n\n\"Hey, there ya go. Got him right where you want him.\"\n\n\"Well, not quite. Not yet. But it's looking good.\"\n\n\"Cool cool.\"\n\n\"You guys wanna come?\"\n\n\"What, and ruin your date?\"\n\n\"It's not a date. Just hanging.\"\n\n\"Alone. Together. When you both wanna jump each other.\"\n\n\"Sounds kinda datey when she says it like that,\" Hailey said.\n\n\"I'm hoping for some dating to come of it,\" Jen admitted. \"But it's not officially a date or anything yet.\"\n\n\"Want me to yell at him?\" Riley asked. \"Tell him to take you out properly? He can hear me from here if I really-\"\n\n\"I obviously don't want you to yell across the cafeteria. And I don't want you to talk to him about it subtly either. I've got this. It's all going smooth.\"\n\n\"Oh good.\"\n\n\"You know, for claiming to want to be my wing girl, you sure don't take the job overly seriously.\"\n\n\"You never give me a chance to learn, do you? Being all independent and shit. Never get to develop my skills. You just flounce off and talk to boys by yourself like some sort of well-adjusted human being.\"\n\n\"Well I have to do something to leave you and Hailey alone, don't I? I'm probably gonna start needing more excuses, unless you two start sneaking away by yourselves. Which I can't really count on.\"\n\nRiley flushed and looked at Hailey who seemed just as flustered by Jen's statement. \"You're gonna say stuff like that, I really will yell at Logan across the room.\"\n\n\"Fair point.\"\n\nHailey stood up. \"I gotta get some stuff ready. I'll, uh, see you before I go home today?\"\n\nRiley nodded. \"Sure thing.\"\n\nRiley followed Hailey with her eyes, taking in the delightful sway of her hips. Hailey looked back once, only briefly, but enough for her to confirm she had Riley's attention as she left.\n\n\"Fuuuccck I could stare at her ass all day,\" Riley groaned, leaning forward and resting her head on her arms.\n\n\"Why sound so put upon? Sounds like a great thing. She'd probably enjoy it.\"\n\nRiley swatted half-heartedly at Jen. \"Would you cut it out? We're still, like, feeling things out a bit. I don't even know if she'd, like, want a girlfriend or anything like that. Let alone if she'd want me.\"\n\n\"You don't know?\"\n\n\"No. Of course I don't. I know she's interested to some degree. But that's about it. And I don't even know what part she's interested in.\"\n\n\"I know what part.\"\n\n\"That's not-\"\n\n\"Your butt.\"\n\nRiley lifted her head just for the chance to roll her eyes at Jen. \"That's not what I meant and you know it. Like, does she actually kinda like me? Or is she, like, just interested physically? Or is it only a curiousity thing?\"\n\n\"So ask. You want me to yell the question at her down the hall when we see her next?\"\n\n\"Shut up. I deserve that, but shush all the same.\"\n\n\"Roger.\"\n\n\"I'll ask her.\"\n\n\"Today?\"\n\n\"Maybe. Probably not, but maybe. It's all still new. You don't gotta rush it.\"\n\n\"But it's so cute! I just wanna see you all kissy and lovey and touching each other's butts more.\"\n\nRiley snorted, a crooked smile breaking out on her lips. \"You idiot.\"\n\n\"And you know I want you to be happy and shit, obviously.\"\n\n\"Yeah, I know. But seriously, don't rush it. You're embarrassing even me, let alone what Hailey thinks, and she doesn't love you like I do. I don't want you scaring her off.\"\n\n\"She's like the bravest kid in school. Who's scaring her?\"\n\nRiley's smile changed to something smaller but warmer. That was how people saw her. Even how Riley had seen her. But there was more there, deeper stuff. Hailey had fears and anxieties and stuff. Riley was starting to get a sense of some of them. \"I think I could scare her,\" she said softly.\n\n\"Hm?\"\n\n\"Feelings are scary, Jen. Even to the bravest of us.\"\n\n\"I don't know about that.\"\n\n\"Well... maybe if you start getting all close with Logan, maybe you'll see.\"\n\n\"Who says I will? It's just testing. Just for fun for now. Might not even like him that much when I get to know him. Who knows.\"\n\n\"I said 'if', didn't I?\"\n\n\"Yeah, you did. That's true.\" Jen shrugged. \"Anyway, not my fault you decided to go and get all crushy before asking someone out. Only makes it harder, I think.\"\n\n\"Oh my god. You know I didn't have a choice about that.\"\n\n\"Just saying.\"\n\n\"Uh huh.\" Riley fidgeted a bit, then reached back and turned off her plug. She'd halfway forgotten about it, gotten used to the low vibes running through her ass, but it was helpful to have it turned off all the same. \"So you're busy after school, huh?\"\n\n\"Yep. Unless you need me. I can postpone on Logan if you need me to.\"\n\n\"No way. You do your thing.\"\n\n\"You sure?\"\n\n\"Yeah. Just... wondering if it's too soon to ask Hailey to do something this afternoon.\"\n\n\"Dude, of course ask her.\"\n\n\"You think?\"\n\n\"Yeah, Ri. The sooner you figure out if there's actually something there, the better. Asking her out's the best way.\"\n\n\"Well I wasn't gonna ask her out. Just... to do something.\"\n\n\"Oh. Like what?\"\n\n\"Don't know. Haven't got that far.\"\n\n\"Well still, go for it.\"\n\n\"I just might.\"\n\n****\n\nThe way Hailey smiled at her just wasn't fair. Riley so badly wanted to kiss her, do something with those teasing lips.\n\nWouldn't that be something. To just start making out with her right there. That'd get an answer of some kind, anyway, either enthusiastic response, or definite refusal. Or, god forbid, ambivalence and uncertainty, made worse by Riley pushing too fast.\n\nFuck this stuff was complicated.\n\n\"Jen's off with Logan, then?\" Hailey asked as she finished putting stuff in her locker and closed it up.\n\nRiley nodded, settling into her show-off lean right next to Hailey, hips cocked for jewelry display. \"Yep. Just me.\"\n\n\"Cool. How you doing with that plug?\"\n\n\"Good, I guess. Had to, uh, take care of myself again since lunch.\"\n\nHailey grinned. \"The vibes do it for you, huh?\"\n\n\"Kinda. Just, like, being all in my butt and stuff. Do you ever feel like... like it's connected kinda...\"\n\n\"Connected? To what?\"\n\n\"Well, when you wanna get off...\"\n\n\"Oh, like almost connected to your clit somehow?\"\n\n\"Uh, yeah. Something like that. Is that dumb?\"\n\n\"No. I know what you mean.\"\n\n\"Oh good. 'Cause yeah, those vibrations can really take me places. My other plug, it could hit the spot sometimes. But this one... it's a whole other thing.\"\n\n\"Don't I know it. When I get home...\" Hailey trailed off, a rising pink tinge to her cheeks. \"Well, you know.\"\n\nRiley's heart beat faster. She swallowed, trying to steel herself. \"This might be way too presumptuous of me...\"\n\n\"I doubt it, somehow,\" Hailey said softly.\n\n\"You don't know what I was gonna say.\"\n\n\"I doubt it's too presumptuous. Whatever it is.\"\n\n\"Oh. Well, all it was... fuck, no, I can't even say it now. It's too embarrassing.\"\n\nHailey reached over and took Riley's hand. Both of them were trembling just a little with all the pent up nerves. \"Promise it's ok. I won't mind you asking, at least.\"\n\n\"Fuck. Ok. Do you wanna go somewhere and... and take the edge off? Together?\"\n\n\"Like...\"\n\n\"Like I usually need to masturbate after school,\" Riley blurted, pulse racing. With Hailey's hand on hers, and her reactions so far, Riley felt like she'd be ok, in spite of being on emotional thin ice. \"Do you wanna do it with me?\"\n\n\"That's...\" Hailey broke off giggling maniacally. \"Oh my god, that's a hell of a first date.\"\n\n\"Only if you say yes. Plus, you know, bearing in mind that you did play with my ass this morning already.\"\n\n\"Shit, yeah, ok, yeah.\"\n\n\"Yeah?\"\n\n\"Yeah. I mean, it's a lot, but oh my god I really want to.\" Hailey's eyes were impish. \"And you're right, I totally played with your butt this morning. And for real, it was kind of the best. I can't believe you let me do it.\"\n\n\"I can't believe you kept ass fucking me with those butt plugs instead of just swapping them!\"\n\n\"I was waiting for you to say something. Anything. Or Jen, even. She saw too. That whole time, you never even grunted like you wanted me to stop or anything.\"\n\n\"'Cause I didn't want you to stop.\"\n\n\"Kinda hoped that's what it was.\"\n\nHailey's eyelids feel slightly, her bottom lip caught between her teeth.\n\n\"Don't look at me like that,\" Riley said softly.\n\n\"What? Why?\"\n\n\"'Cause it was hard enough not to kiss you as it was.\"\n\nHailey's eyes flew open again, staring wildly at Riley. \"Oh wow.\"\n\n\"Too forward?\"\n\n\"No. A good amount, I think. Just... I'm maybe not ready in front of people just yet.\"\n\n\"No. Me either. So don't look at me like that. And that smile. Stop it. Cut it out!\"\n\n\"Can't help it.\"\n\n\"Then we better get moving.\"\n\nRiley started moving, dragging Hailey away with her. They moved somewhat out of synch at first, but then fell into step with each other, side by side, holding hands.\n\nIt was different holding Hailey's hand compared to Jen's, who Riley had much more experience with. With Jen it was all platonic love and knowing each other as deep as any could. With Hailey it was exciting, new, promising, and still a little uncertain as to what it all meant.\n\nBut that uncertainty was fading. At least Riley's fear of it was. They were holding hands! Hailey wanted to kiss! Or at least she wasn't upset by the idea, provided it wasn't so public. And they were going to go masturbate together!\n\nLike, holy shit, this was so much easier when Riley stopped being afraid and just tried things. Jen knew her shit sometimes.\n\nRiley's step caught, enough to make Hailey slow for half a step as well and toss Riley a worried look.\n\n\"You didn't just have second thoughts, did you?\" Hailey asked. \"We don't have to-\"\n\n\"No! No. Not that. Seriously not that.\"\n\n\"Oh good.\"\n\n\"Just... I'm used to masturbating after school being easy. Simple. But... I don't know where we'd go, exactly. We could go to my house, but then there's my family, there's questions, you'd have to meet people, I... god, this might sound silly, but how do I introduce you?\"\n\n\"Oh hell no, I get all that. Believe me.\"\n\n\"Yeah?\"\n\n\"Yeah. I mean... you're right. What exactly are we? I sure don't know.\"\n\n\"Right? But I like it. Whatever it is.\"\n\n\"Me too. You, uh, wanna come to my place? It's just me and Mom. You might meet her, possibly, but she's cool, and it wouldn't be a whole thing.\"\n\n\"Yeah? You're ok with that?\"\n\n\"I suggested it.\"\n\n\"Just checking.\" Riley squeezed Hailey's hand. \"I'd love to come over. Never had a girl take me home on the first date.\"\n\n\"Or as the first date?\"\n\n\"Definitely not that either.\"\n\n****\n\nHailey drove Riley to her place. Her car was clearly second-hand, but it was nice enough.\n\nRiley spent most of the drive slipped low in her seat, playing with her butt plug. She tried to only be a little distracting about it, or when they were at a stop light or something. Her battery ran low before they made it to Hailey's house, and Hailey only giggled when Riley pouted about it.\n\nThe house was empty when they arrived, which Riley was pretty happy about. She wanted some alone time with Hailey. And she especially was not ready for meeting Hailey's mom right now. Not as horny and distracted by other things as she was.\n\n\"I really need to get out of these panties,\" Riley said as she kicked off her sneakers.\n\nHailey looked at her. \"Boy, this date's going even better than I thought.\"\n\nRiley giggled. \"Shut up. Not like that. They're just soaked, is all.\"\n\n\"Yeah. Good date. S'what I'm saying.\"\n\n\"Oh my goddd. Just... where's your room?\"\n\nHailey grinned.\n\nRiley rolled her eyes. \"Yeah, still sounds like the date's going well. I know. I guess this is why people go for, like, coffee or whatever for dates.\"\n\n\"What fun's that, though?\"\n\n\"Hard to say.\"\n\nThey hadn't moved very far into the house yet, still within sight of the entryway, which was technically kind of risky, considering Riley didn't really know the flow of the place and what the chances were of someone else intruding. She was feeling brave enough to ignore all that, and simply pulled her bottoms down right where she was.\n\nHailey was staring wide-eyed at Riley when she straightened up, leggings and panties in her hand, now naked between shirt and socks.\n\n\"It was getting uncomfortable,\" Riley said, as though further explanation were needed.\n\n\"Yeah, no, I get that,\" Hailey said faintly.\n\n\"We're gonna masturbate anyway, right?\"\n\n\"Mmhm.\"\n\nRiley shifted her weight. \"Why are you staring so hard?\"\n\n\"Is that a serious question?\"\n\nRiley flushed, shook her head, and let a bigger and bigger smile spread on her lips. She did a slow turn, letting Hailey get a better look at her bottomlessness. Hailey'd been up close and personal with her butthole already. It wasn't like this was any worse than that.\n\nHailey's eyes went hungry and she reached out, took Riley's hand, and dragged her away. Riley followed eagerly, anxious to see Hailey's room, and excited for what would happen there.\n\nRather wisely, Hailey took the time to shut the door behind them. By the time she did, Riley had already bounced onto Hailey's bed. Hailey was drawn as if in a trance, and Riley only belatedly closed her legs up a bit. Modesty wasn't really high on her priority list.",
        "\"I don't know if I can just take my pants off like that,\" Hailey said, hesitating by the edge of the bed.\n\n\"Why not?\"\n\n\"'Cause you'll see.\"\n\n\"I want to see.\"\n\n\"It's embarrassing.\"\n\n\"How could you just start showing off your butt to everyone in school, and now all of a sudden you won't take your bottoms off when it's just me?\"\n\nHailey shifted her weight from one foot to the other. \"Partly it's different. Actually means something. Partly... jeez, I dunno, I was hoping you'd, like, do it for me or something, but I don't know how to trick you into it.\"\n\nRiley grinned and scooted forward, right off the edge of the mattress. \"Why would you think you have to trick me?\"\n\nRiley hooked her fingers in either side of Hailey's leggings and tugged them down. Her heart pounded, but she wasn't nervous. Just excited. Seeing and smelling Hailey's damp panties as they were exposed was such a visceral turn on for her, and only increased her interest in removing them.\n\n\"This isn't really a date, is it?\" Hailey asked.\n\n\"Why would you say that?\"\n\n\"I don't think this is what people do on dates. Let alone first dates.\"\n\nRiley lifted one of Hailey's legs gently, slipping her foot out of her leggings while Hailey held her balance, then did the other side. \"You're right. Doesn't have the feeling of a date. Never did. But... I really wanted to call it one. And I'm very happy we're on it. Whatever it is.\"\n\n\"You don't think we're, like, moving too fast?\"\n\n\"Nope.\" Riley paused before pulling at Hailey's panties. \"But if you want me to stop...\"\n\n\"I don't want you to stop.\"\n\nRiley looked up at Hailey as she pulled her panties down so very slowly. Hailey was nervous, for sure. Probably similar to how anxious Riley had been that morning with the butt plug change. Now it was Hailey's turn to get that kind of attention.\n\nRiley smiled up at Hailey, then tilted her head forward, coming nearly face to face with Hailey's shining wet pussy. Riley's leaned in and gave Hailey a kiss on the upper thigh, somewhere relatively innocent, if such a concept made sense with two horny, wet, bottomless girls who were already getting so close.\n\nThere was a soft moan from Hailey as Riley kissed her some more, still just gentle and tender, and nuzzled at her tummy. The smell of aroused pussy filled Riley's nose and made her so much more aware of her own insistent need.\n\nThey were supposed to be masturbating. Taking the edge off of the day. Satisfying their needs. But Riley was horny and not in a mood to remember exactly what they were meant to be doing.\n\nRiley pressed on Hailey, urging her to turn. She did so slowly, and in steps not quite her own, in thrall to Riley's gentle, unuttered command.\n\nHailey's ass was all hers. Hers to do whatever she wanted to.\n\nMaybe that was an exaggeration. Riley didn't much care about the reality of it. It had been a long time coming for her to realize that she might like girls, and that she could be so interested in Hailey in particular. The ass that had broken through to her was totally bared right in front of her, close enough to lick it without having to hardly move at all, if she wanted.\n\nRiley grabbed it with both hands and squeezed with her fingers just enough to get a good sense of its firmness. It felt so amazing in her hands. Just holding and fondling. Spreading Hailey's cheeks to get an even better view of the jewel not so hidden in the middle.\n\n\"You know how amazing your butt is?\" Riley murmured.\n\n\"What?\"\n\n\"It made me realize things I might not have otherwise.\"\n\n\"And here I thought it was just nice to look at.\"\n\n\"It's definitely that too.\" Riley leaned in and kissed Hailey's butt, then pressed her teeth to it, feigning a very gentle bite. A little nip of Hailey's ass. \"You know the problem is it's what started me being attracted to you. Now I might have a bit of an obsession.\"\n\n\"That's ok,\" Hailey said. \"I don't mind.\"\n\n\"Even if I want to... do things to it?\"\n\n\"That'd be fine,\" Hailey assured her, voice cracking slightly.\n\n\"Naughty things?\"\n\n\"I assumed.\"\n\nRiley pulled her hand away and drove back hard enough to make a small slap, then gripped tighter. \"Hnnnggg, you gotta take it away from me.\"\n\n\"... no.\"\n\n\"No?\"\n\n\"Dammit, Riley. Do you even know how horny I am? How I was trying not to embarrass myself by being too eager? You think I'm gonna want to stop you?\"\n\n\"Wearing plugs all day kinda does us in, huh?\"\n\n\"Kinda.\"\n\nRiley kissed and nommed at Hailey's ass some more. She felt Hailey pushing back gently against it, sticking her bum out more, straight in Riley's face. Encouraging the incredibly forward behaviour. More forward than playing with Riley's plug that morning though?\n\nRiley could do just the same, if she wanted. Her hand was already moving before the thought finalized. She grabbed Hailey's butt plug and tugged on it, pulling it out just a little. She let it go in and out, feeling Hailey's legs tense and tremble as she teased and teased, stretching Hailey's butthole a little bit at a time, but not pulling the plug all the way out.\n\n\"Hey, Riley?\"\n\nRiley ignored her name and kept nibbling on Hailey's ass and teasing her bumhole.\n\n\"Riley!\"\n\n\"I'm busy.\"\n\n\"I know. Just... can we masturbate now?\"\n\n\"You'd rather do that?\"\n\n\"I think I need to. I like this. Like, a lot. But I am going to go embarrassingly crazy if I don't get off soon.\"\n\n\"You're the one who wanted help getting your pants off.\"\n\n\"And you helped.\"\n\nRiley let Hailey go, but stayed kneeling and pouting up at Hailey as she turned around.\n\n\"Don't look at me like that,\" Hailey said.\n\n\"I've never wanted to eat an ass so badly in my life.\"\n\nHailey covered her face with her hands. \"Oh my god.\" She pulled her hands down, her face noticeably pinker than a moment ago. \"Do you really?\"\n\n\"For truly, yes.\"\n\nHailey bit her lip, took a few tottering steps, and practically fell over into her bed.\n\nRiley shuffled closer on her knees and leaned her elbows on the mattress. She watched in intense fascination as Hailey lifted her legs, reached to her butt to turn her plug on and set it on high, then set about rubbing her pussy with very little sense of dignity or decorum. Riley found it riveting.\n\n\"Don't make me do it alone,\" Hailey mumbled.\n\n\"I could just watch though. It's weird, usually when I'm horny and there's masturbating on the agenda, I'm right there. But... I really could just watch.\"\n\n\"Please don't.\"\n\n\"Do I get to play again once you finish?\"\n\nHailey nodded. \"As soon as I take the edge off.\"\n\nRiley crawled up onto the bed with Hailey and stretched out next to her. Riley was just as horny, but far more in control. She slipped a hand to her clit and rubbed it strategically while continuing to observe Hailey closely.\n\nThe plug in Riley's ass still helped her along, just as she was used to. It wasn't the same electric thrill as when it was vibrating and doing such neat things to her insides, but it was still very nice.\n\nHailey was a bit of a mess already. Her pussy was sloppy, though Riley's wasn't any better. With her more frantic schlicking, however, she was making far more noise. That and the constant buzzing from her ass.\n\nThe girls were lost in their respective, intertwined worlds. They weren't lost for long, though. Hailey very soon was cumming, and cumming hard. To Riley's surprise, not only did Hailey moan and twitch, she actually squirted as she came, some of the hot liquid splashing Riley in the process.\n\nIf Riley had been entranced before, she was downright enthralled now. Whether it was seeing Hailey squirt or actually feeling it, it was all she could take, and she came too, partly overlapping with Hailey.\n\nHailey turned off her butt plug, sat up, and smiled shyly as Riley finished. Riley rolled on her back and lay panting softly, staring up at Hailey. They both seemed far more relaxed after cumming, but not totally calm by any means.\n\n\"Sorry. I got some on you, huh?\" Hailey said.\n\n\"Yeah. That was freaking hot! How'd you do that?\"\n\n\"Squirt?\"\n\n\"Yeah. I've never done it. I thought it was, like, a porn star trick or something.\"\n\n\"I mean, I guess it can be. It's not something I do on purpose, really. Just... if I'm super turned on...\"\n\n\"Oh. So you can't show me?\"\n\n\"I could try. If you get super, super horny again sometime-\"\n\n\"I'm sure I will.\"\n\n\"-and probably if your plug's charged. For the vibrations.\"\n\n\"They do funny things,\" Riley admitted. \"I haven't messed around with it that much yet, I guess. Might help.\"\n\n\"And partly too you know what gets you off. Just try and do that too, but... more.\"\n\n\"More? Like harder?\"\n\n\"Maybe. Depends. I don't know how to explain it. I just kinda feel it. And only sometimes.\"\n\n\"When you're really horny. I got it.\" Riley sat up too and looked deep into Hailey's eyes. \"So, for now though, do I get to, um, carry on?\"\n\nHailey nodded. \"I'd like that. I think I need a drink first, though. And it wouldn't hurt to get these plugs out and charging. And-\"\n\nRiley pouted again, but admittedly she'd like to give her bum a bit of a break. And she'd like to have her plug ready for when she wanted tasty little vibes again.\n\nThe girls prowled the house half naked. Their partial nudity kept them flirty and playful, but not excessively so after cumming together so recently. They were in a low enough state of arousal to remain functional, more or less.\n\nRiley kept slipping a hand down to Hailey's butt, growing accustomed rather quickly to having the freedom to do so. She groped Hailey a little while they were getting some drinks. She got even handsier after they popped their plugs out and Hailey gave them a quick but thorough wash.\n\n\"Ooh, you've got a little gape going on,\" Riley cooed.\n\n\"I imagine I do.\"\n\n\"You think it's cuter than mine was this morning?\"\n\n\"Hard to say. I haven't seen mine, and you didn't see yours.\"\n\n\"I think yours is cuter anyway. I just want to kiss it.\"\n\n\"Kiss my butthole?\"\n\n\"Yeah.\"\n\n\"You really like my ass, huh?\"\n\nRiley kept fondling Hailey, but went thoughtful and quiet for a moment. \"Is it weird that your butt's genuinely what got me to figure out I might like you?\"\n\n\"It's not overly romantic, by some standards.\"\n\n\"Well... ok, yeah, I know how it sounds. Just... I couldn't stop looking at it. Or I didn't want to. I didn't know I might like girls, except your bum was too powerful for my denial.\"\n\nHailey giggled softly and wiggled her hips in Riley's grip. \"Ok, I can work with that.\"\n\n\"I like lots of other stuff about you. I really admired you, how brave you were. Are. I know we never got to be super good friends or anything before, but in hindsight I think I would have liked to be.\" Riley sighed and gave Hailey's ass a firmer squeeze in between gently fondling it. \"It definitely attracted my attention when you first started showing your butt jewelry off. Mine and everyone else's. You were probably the one who initially got me thinking about if I could do it too.\"\n\n\"Turns out you could.\"\n\n\"Mmhm, turns out.\"\n\n\"You remember when you asked me if I was the first to really show off?\"\n\n\"Yeah.\"\n\n\"Well... I guess for the sake of salvaging some romance out of this, I think I was the first. I probably was the first girl you saw showing her butt plug.\"\n\n\"I thought you might have been. Never thought to pay enough attention when it first started.\" Riley slipped her hands from Hailey's butt and wrapped them around her waist. \"I'm glad I get to keep believing it was you.\"\n\n\"I really think it was. Some of my friends had been talking about it. Going on like it was this crazy thing. Giggling about how naughty it'd be, and how it'd get boys' attention like nothing else.\"\n\n\"They weren't wrong.\"\n\n\"Sure. But none of 'em would do it. I got tired of it one day. Just struck me the wrong way one time, don't know why. I pulled my pants down at the back and just started showing off my plug. It wasn't even a great jewel then. Not coloured or anything. But it was enough. It was bolder than anyone ever expected, just because no one else had actually dared.\"\n\n\"Well it was. For the time. Now, though... well you know. You and your vibrating jewels. Gotta keep upping the stakes.\"\n\n\"I'm glad you joined me.\"\n\n\"Me too.\"\n\n\"And Riley? I'm glad you looked at me like that. 'Cause I've kinda been watching you too.\"\n\n\"No you haven't.\"\n\n\"I have! I remember. You and Jen. I don't remember when, but I remember. Both of you, standing at your lockers, asses casually out for everyone to see, perfect little gems shining to catch my eye. You were both looking good, but you in particular... I don't know. You're the one I really saw.\"\n\n\"You're not just saying that 'cause you ended up taking me home?\"\n\n\"I probably would, if that was the case. But no. Maybe just 'cause I knew you better. Had more classes with you or something. Generally liked you better, maybe.\" Hailey turned around in Riley's arms. Her eyes shone, her lips curled in a faint, crooked smile. \"Maybe your ass is just that much better than all the others out there.\"\n\nRiley slid her hands back to Hailey's butt. \"Can't be. That's yours.\"\n\n\"Well I can't see mine as easily, so maybe you're right.\"\n\n\"You're s'posed to argue some more.\"\n\n\"Nope. I've got the best ass. You win. I can lose gracefully.\"\n\nRiley spread Hailey's ass and snuck her middle finger in to press Hailey's still slightly gaping hole. \"But you liked mine though? Even if it's second best?\"\n\n\"I did. I do. When you actually let me swap gems for you... I swore it was a dream. A trick. Something. I took so long at it in case it was my only chance at it. I've never gotten to play with someone like that. Never really wanted to, for that matter. It was a dream in more ways than one.\"\n\n\"I know the feeling. And speaking of...\"\n\nHailey grinned and moaned softly as Riley wormed her finger past the ring of Hailey's bum where it hadn't quite closed. It couldn't close if Riley kept prodding at it.\n\nSomehow, without meaning to, Riley found herself moving in for a kiss. Maybe Hailey had started it. Maybe she'd done it without realizing. Maybe it had just been something that needed to happen.\n\nTheir lips met, tender and exploratory. Just tentative at first. Unsure. Their first kiss, just as Riley was getting knuckle deep in Hailey's ass.\n\nIt was perfect.\n\nThe front door opened just after the kiss. Riley would have felt bitterly disappointed if it had come any earlier. As it was, the interruption was unfortunate, but she felt as peaceful as a soft summer breeze.\n\nOr, rather, she felt all peaceful and serene about it excepting the intense panic that gripped both girls as they heard the sound at the same time.\n\n\"Hailey?\" called a woman's voice.\n\nHailey didn't answer. She slipped from Riley's embrace, grabbed her hand, and hauled her off to her room, both girls giggling like mad and trembling with panic and semi-resolved emotions.\n\nThey stood totally still for a moment once safe, then giggled some more, releasing nervous tension. Riley was a little slow to realize just how close they were standing together, but once she did, she slipped her hands back to Hailey's hips and snuggled in closer still.\n\n\"Stop,\" Hailey whispered. \"Mom's home.\"\n\n\"I heard.\"\n\n\"We're almost naked. We need to dress.\"\n\n\"We don't need to go out, do we?\"\n\n\"She's probably gonna come talk to me sooner or later. You really want her catching us like this?\"\n\nRiley sighed. \"No. Why'd she have to interrupt like that, huh?\"\n\n\"So inconsiderate.\"\n\n\"That's what I'm saying.\"\n\nHailey smiled and gave Riley a soft, quick kiss. \"To be continued.\"\n\n\"Mmm, ok. Continued. I can work with that.\"\n\nThe girls found their leggings and put them back on. Riley borrowed a pair of panties from Hailey and tried not to be too excited about it, since it really wouldn't do to soak right through Hailey's underwear right away.\n\nThey wandered back out to greet Hailey's mom, on the basis that it might be weird and suspicious if they didn't. Or at least it would involve more questions.\n\n\"Hey, Mom,\" Hailey said breezily. \"This is Riley.\"\n\n\"Well hello, dear,\" Hailey's mom said, extending her hand.\n\n\"Hello,\" Riley said, taking her offered handshake.\n\n\"Colleen.\"\n\n\"Hm?\"\n\n\"You can call me Colleen. If you want.\"\n\n\"I guess I usually don't really call my friends' parents anything, really. Never much thought about it.\"\n\n\"Well just if you want to. Are you staying for supper, Riley?\"\n\nRiley glanced at Hailey, who shrugged. \"Hadn't got that far.\"\n\n\"You want to?\" Hailey asked.\n\n\"It's fine with me,\" Colleen said. \"I'd just like to know so I can plan, is all.\"\n\nRiley hesitated a moment longer, then nodded. \"Ok. I will. Thank you. I'll, uh, let my parents know I won't be home for a bit.\"\n\nRiley hadn't even bothered contacting her mom or dad yet. She was at Jen's after school frequently enough no one would even think to question where she was, not until later in the evening. Might as well nip it in the bud, though.\n\n\"We'll be in my room, Mom,\" Hailey said.\n\n\"Ok, honey. But, uh, before you go...\"\n\nHailey stopped and turned back. \"Yeah?\"\n\n\"Do you know you left some toys in the sink?\"\n\nHailey went crimson. Riley was slower to catch the meaning, but once she realized their butt plugs were still out in the open, she felt her face heat up too.\n\n\"Shitshitshit,\" Hailey mumbled, dashing past Colleen. She went right back the other way even faster, plugs cradled protectively to her chest, but not quite hidden. \"Shitshitshit.\"\n\nRiley knew she should follow Hailey. Should get out of there somehow. She couldn't help looking at Colleen, though. Just gauging what Hailey's mom's reaction was.\n\nHer own parents... Riley didn't even want to think what their reactions would have been. She wasn't sure that they'd be angry, exactly. But they sure wouldn't have sounded as calm or amused as Colleen about it.\n\n\"It's good she's remembering to wash them,\" Colleen said lightly. \"Though I'd prefer if she wouldn't use the kitchen for it.\"\n\n\"It was only...\" Riley tried to throw out an excuse, but she realized as soon as she spoke that anything she could think of would only make things worse.\n\n\"I've embarrassed you both, huh?\"\n\nRiley put a hand to her warm cheek and decided not to try denying it. She had no idea why she was still even standing there, except that turning tail and fleeing now felt worse.\n\n\"Hailey's only mortified because you're here, if that's any help,\" Colleen said. \"Normally she'd laugh off forgetting something like that.\"\n\n\"How come you don't mind?\"\n\n\"Why would I?\"\n\nRiley didn't have a good answer for that. It was just was adults did. They minded things. Anything cool, usually, was especially minded.\n\n\"I'd rather Hailey be safe while she's learning,\" Colleen said. \"I know kids. I know the sorts of things they get interested in. I don't know why people act so shocked about it. They all got up to exactly the same things they rage at their kids about.\" Colleen frowned. \"Though admittedly, butt plugs are a new one. I certainly never developed any fascination for them at her age.\"\n\nRiley started backing away. She wasn't sure if Colleen had made the connection to their being two butt plugs and two butts present, but she didn't really want to find out.\n\n\"I'm gonna... go find Hailey,\" Riley said. \"Nice meeting you. I think.\"\n\nColleen smiled crookedly. \"Sorry it was awkward.\"\n\n\"No. Yeah. No. I mean... yeah.\"\n\nRiley turned and all but ran away. Hailey was moaning into a pillow in her room, and Riley gratefully shut them in together, with at least that small barrier between them and further awkwardness.\n\nRiley sat on the bed next to Hailey. Just sat there while she cooled down. Hailey peeked out, but only briefly before going back to her pillow-moaning.\n\n\"I mean... at least you were right about her being cool,\" Riley said.\n\n\"I can't fucking believe I left our plugs out like that.\"",
        "\"Yeah. But, like, I forgot about them too.\"\n\n\"That doesn't help much.\"\n\n\"No, I know. You, uh, think she knows one of them's mine?\"\n\n\"Probably.\"\n\n\"Oh.\"\n\n\"I mean, she knew the second one was for a friend. And then you come over almost immediately after, and there's the two plugs. I'm sure she's put it together.\"\n\n\"She knew about them before?\"\n\nHailey rolled onto her back, which helped unmuffle her voice. \"So, listen. My mom kinda... she sells sex toys.\"\n\n\"She what?\"\n\n\"It's sort of a side hustle kinda thing. But yeah. And she's pretty good at it, even. As far as I can tell, anyway.\"\n\n\"Oh wow. So wait. No. What?\"\n\n\"Mmhm.\"\n\n\"But then...\" Riley covered her mouth with both hands and slowly dragged them down to her chin, then let them fall to her lap. \"You mean when you brought that new vibrating plug for me... you got it from your mom?\"\n\n\"Yeah.\"\n\n\"Oh god. She definitely knows it's mine.\"\n\n\"I'm afraid so.\"\n\n\"But... so she already knew you were wearing one. Or more than one. And she was cool with it? She gave them to you? What is going on here, even?\"\n\n\"You've pretty much understood it already.\"\n\n\"I don't, though. Like, I get it, your mom's cool about stuff. But... she really gives you, like, jewel plugs and stuff when you want them?\"\n\n\"Well, I don't push my luck too much usually. But yeah. When it started being a thing, I just asked her for one. Picked it out of some of the stash she's got for selling. Asked if I could have it.\"\n\n\"And she just said yes?\"\n\n\"She was confused. She'd didn't understand why I wouldn't ask for a vibrator or something. She doesn't really get the butt plug thing, I think, but she's supportive.\" Hailey gave a small, mostly humourless smile. \"Little does she know she's supporting fashion choices more than sexual exploration.\"\n\n\"I don't know if she is, anymore.\"\n\n\"Why not?\"\n\n\"Because I'm feeling very exploratory.\"\n\nHailey flushed. \"Oh.\"\n\n\"Why do you sound surprised about that?\"\n\n\"Well... I was kinda afraid I'd ruined everything.\"\n\n\"Why? Just 'cause we almost got caught being bad, and your mom saw our gems in the sink and definitely knows we both wear butt plugs and oh god now that I say it out loud...\"\n\n\"Yeah. That.\"\n\nRiley shook her head and tried to clear it. She took a deep breath. \"No, it's whatever. It doesn't change anything.\" She scooted closer to Hailey and put her hand on Hailey's stretched out tummy, running it in small, lazy circles. \"I am so enamoured with you, you don't even know.\"\n\n\"Yes I do.\"\n\n\"It's kinda embarrassing that your mom half caught us, but so what? It wasn't nearly as bad as either of my parents finding a pair of butt plugs in the kitchen sink. I think in a month or two when I can look her in the eye again, I might even like to be able to ask her some stuff, if she's as cool about it as she seems.\"\n\n\"A month?\" Hailey giggled.\n\n\"Or two,\" Riley confirmed seriously, but wasn't able to keep from cracking a smile as she tried to hold a stony expression.\n\n\"She's honestly really good to ask hard questions. I get why people don't want to talk to their parents about sex, but Mom knows stuff. And she just, like, doesn't make me feel bad about asking them or anything.\"\n\n\"That sounds nice.\"\n\n\"It is.\"\n\n\"You think I should really stay for supper? I could still fake having to go home right away or something.\"\n\n\"Nah. Might be awkward, but I think it really won't be that bad. You know, since you didn't already freak out and want to leave.\"\n\n\"True. Plus you still owe me some... desert... for later, after supper.\"\n\n\"Did you just do that thing were you used 'desert' to mean sex?\"\n\n\"... yes?\"\n\n\"Alright, changed my mind, out you get.\"\n\n\"Hey!\"\n\nRiley swatted Hailey lightly, but with all due prim indignity. Hailey laughed and rolled away, almost falling off the edge of the bed. Riley tackled in her in what was meant to be further chastisement, but didn't really go that way. It was more just like impromptu cuddling, which was nice too.\n\n****\n\nSupper was, indeed, on the awkward side. But not too bad, really. There was some kind of connection there, between Riley and Colleen, that Riley couldn't quite put her finger on. A lack of judgement from Colleen, perhaps. It was hard to process a parent who knew her daughter and friend had been wearing butt plugs earlier, and her only comment on the whole subject had been about leaving them in the sink. The latter of which was fair enough, really.\n\n\"I think I kinda like your mom,\" Riley said afterward, once they were safely back in Hailey's room.\n\n\"Good. I'm rather fond of her too.\"\n\n\"It got to a point where I almost wanted to straight up ask her what she thought of us wearing butt jewelry to school.\"\n\n\"I'd rather you didn't.\"\n\n\"Yeah, no, don't worry. I'm hardly bringing that up. Just saying, like, I know most of the teachers hate us doing it, but I've been kinda curious sometimes why. Or what our parents would think if they knew.\"\n\n\"It's a good question,\" Hailey said. \"But not a good enough one for me to ask it. Cool as Mom is about that stuff, she doesn't need to know I'm showing off my plug at school like that.\"\n\n\"She might not get it, huh?\" Riley sighed. \"And if she doesn't, I can forget about my mom or dad.\"\n\nHailey nodded. \"So, uh, what you wanna do? We could go watch something, if you want.\"\n\n\"Maybe in a bit.\"\n\n\"Oh?\"\n\n\"You know you owe me something.\"\n\nHailey smiled slyly. \"What's that?\"\n\nRiley didn't answer. She pushed Hailey onto the bed, then rather unceremoniously started pulling her leggings down.\n\n\"Oh,\" Hailey giggled. \"That.\"\n\n\"Didn't think you'd get out of it, did you?\"\n\n\"Never crossed my mind.\"\n\nHailey very conscientiously moved her hips and legs to help Riley strip off her pants and panties. She hugged a pillow to her, burying her face nervously in it once Riley had her stripped bottomless, just the way she wanted.\n\n\"Why so shy?\" Riley murmured as she settled herself comfortably and casually spread Hailey's butt.\n\n\"'Cause I know what you're gonna do.\"\n\n\"And you don't want it?\"\n\n\"I do want it! I'm just not used to anyone doing that stuff. Even looking.\"\n\n\"But you're so pretty back here. Look at your little butthole. So cute.\"\n\n\"You know I can't see.\"\n\nRiley grinned. \"You can't, that's true. More for me, then.\"\n\nRiley played with Hailey's ass, spreading and fondling it. Giving it firm squeezes. She carefully examined every inch with her eyes and fingers, zeroing in slowly on Hailey's butthole.\n\nThere was something particularly enticing about Hailey's bum. Riley was fairly familiar with butts these days, but none had ever drawn her like this one. She'd never wanted to play with one so badly, nor had anyone wanting her to.\n\nLubing a butthole up and putting in a plug was basically all Riley had really done with one that wasn't hers, and she hadn't done much more than that with her own either. That limit on her experience was about to be blown wide open.\n\nRiley rubbed her thumb over Hailey's tight rear hole. She grinned at the reaction she got, the little squirm of Hailey's hips. She rubbed more, pressing, seeing how much Hailey's body would allow.\n\nThen she had to taste. She absolutely had to. Riley stuck her tongue out and gave the most tentative little swipe across Hailey's asshole. Then a bigger one.\n\nRiley was addicted right from the very first lick. She licked and licked at Hailey's ass like a girl possessed.\n\nHer fingers dug into Hailey's ass as she spread it wide, burying her face right in there. Her tongue flashed across, lapping again and again, endlessly spreading saliva over Hailey's tight hole.\n\n\"You taste so good,\" Riley purred.\n\nHailey squirmed. \"You think?\"\n\n\"Mmhm.\"\n\n\"It feels nice.\"\n\n\"Good. 'Cause I could do it all night.\"\n\nHailey giggled. \"I don't think you like it that much.\"\n\nRiley didn't answer. She didn't need to. She kept licking, sucking, nuzzling, fondling, and generally bestowing affection on Hailey's butt. Hailey tried to suggest switching more than once, but Riley wasn't having any of it, and Hailey didn't seem inclined to fight her too hard on the matter.\n\nEventually, Hailey's hips developed just a hint of a regular motion, involuntarily humping the bed. Shortly after, her hand sneaked down underneath to finger her pussy some.\n\nRiley left all that up to Hailey. She was a one track mind kind of girl at the moment, and didn't have time for anything but eating ass.\n\nRiley was fully in the zone. She wasn't aware of anything beyond Hailey's ass. She could hear Hailey's panting and mewling, feel her little wiggles, the way she rubbed herself. They were nice things to notice. But they couldn't compare to the taste and texture that Riley dedicatedly explored with her tongue, and the heat and softness under her fingers.\n\nA knock on the door startled Riley and made her jump back like she'd been caught. She hadn't. Not yet. She wasn't even sure why she panicked so hard, except that she'd never been tongue deep in anyone's ass before, and she had a very certain feeling that she didn't want to be caught at it.\n\nHailey wasn't in any much better shape, swearing softly and fumbling with her blankets. She managed to sit up and cover her naked lap, though it was an undextrously close thing.\n\n\"Yeah?\" Hailey called, voice sounding almost normal. She was still brushing her hair out of her face when the door opened.\n\nColleen took half a step in, paused at the sight of the two girls trying to look innocent and failing miserably. \"It's getting late,\" she said, eyes darting back and forth between Hailey and Riley. \"Would you like a drive home?\" she asked Riley.\n\n\"I'll take her,\" Hailey said.\n\n\"Are you sure?\"\n\n\"Of course. Why would I make you do it?\"\n\n\"You're awfully flushed. I thought... you might not be feeling well.\"\n\nHailey's face only got redder with her mom pointing it out. \"M'fine,\" she mumbled. \"Riley had a good joke. Got me laughing pretty hard. That's all.\"\n\nColleen didn't believe that for a second. Even Riley could tell. But she nodded and let it be, and that was something, anyway. She even closed the door behind her.\n\n\"Well shit,\" Hailey muttered. \"You're never gonna come back at this rate.\"\n\nRiley stopped Hailey before she could stand up. \"Don't count on that,\" she said softly. Riley leaned in and kissed Hailey, ever so softly, holding it for only a second or two.\n\nHailey blinked slowly afterward, nearly leaning in again for more, but then stood and tried to find her pants. Riley watched her dress, very much enjoying the quiet eroticism of the relatively benign act.\n\n\"We haven't been very subtle, have we?\" Riley said.\n\n\"Hm?\"\n\n\"With your mom. She totally knew we were doing something just now, huh?\"\n\n\"I imagine so. Hence you not wanting to come back.\"\n\n\"Nah, it's fine. She probably thinks we were making out or something right? That's what people do.\"\n\nHailey smiled crookedly. \"Sure. People. You, however...\" Hailey bent down in front of Riley and brushed their lips together. Hailey's tongue flicked out over Riley's bottom lip, perhaps tasting herself on it. \"You go straight for my ass.\"\n\n\"No regrets.\"\n\nThe girls got ready to leave without much incident. Hailey's legs were a little wobbly after lying there taking an impressive ass eating, and having made herself cum during it at least once. They remembered to grab Riley's butt plug, though they actually weren't sure which was hers of the two identical ones and just had to guess.\n\nColleen said goodbye to Riley just as warmly as if she didn't definitely know Riley had been making out with her daughter. Or, indeed, something more intense than that. But then, Riley had no idea about the inner workings of Colleen's mind, and for all she knew Colleen might be as easily be happy for Hailey, or totally oblivious.\n\nHailey drove Riley home, stopping along the street just by her driveway. Riley didn't even think about why Hailey had parked there until she dallied at getting out of the car, unwilling to leave so easily.\n\nWhen Riley looked at Hailey, she was looking right back, eyes shining in reflected light from the nearest street lamp. The girls moved as one, getting in as close as their seats would allow, and frantically kissing goodbye.\n\nIt was by far their longest, deepest makeout yet. It was almost as nice for Riley as licking Hailey's bum, with several added benefits as Hailey could kiss back, and dancing their tongues together was pleasant and arousing in its own right.\n\n\"I really need to get out of the car,\" Riley mumbled around Hailey's mouth.\n\n\"Ok.\"\n\n\"We can't stay out here all night.\"\n\n\"True.\"\n\n\"I'm going now.\"\n\n\"Ok.\"\n\nMinutes passed, only sloppy, experimental kissing sounds between them.\n\n\"For real,\" Riley said.\n\n\"Mmhm.\"\n\n\"I need to go.\"\n\n\"Mmhm.\"\n\n\"Stop kissing me.\"\n\n\"You first.\"\n\nIt was another few minutes still before Riley finally pulled back, panting and out of breath. \"Wow.\"\n\nHailey's eyes still gleamed, but she was just as breathless, and didn't push it. \"Yeah.\"\n\n\"That was easily the second best thing today.\"\n\n\"I feel like I know the first.\"\n\n\"Did you... did you like it too? The first thing? I know I went, like, a really, really long time. I couldn't help myself.\"\n\n\"Oh my god, so much!\"\n\nRiley grinned. \"Yeah?\"\n\n\"If you hadn't been keeping me so horny... I almost feel like I could have fallen asleep to it. It was so damn relaxing. But also, like, you were keeping my pussy flooding so bad. Did you see the wet spot under me?\"\n\n\"No.\"\n\n\"Well, it's gonna be a problem.\"\n\n\"Sorry,\" Riley said, meaning exactly the opposite.\n\n\"You should probably go before I kiss you again.\"\n\n\"I really should.\" Riley darted in for a kiss, but only a very quick one. \"See you tomorrow.\"\n\n\"With your new jewelry?\"\n\n\"Of course.\"\n\n\"Ok. Bye.\"\n\n\"Bye.\"\n\nRiley walked backward away from the car at first, unwilling to let her eyes off Hailey, but practicalities forced her to turn around. She stopped at her doorway and looked back, smiled at Hailey though she couldn't actually see her in the car the way the shadows fell, then went inside.\n\n\"Hey Mom. Hey Dad.\"\n\nRiley's parents offered greetings in return. They didn't make any particular fuss over her return. Not that they had any reason to. Riley felt all different and tingly over her day, but as far as they knew, it was just another day.\n\nShe smiled to herself, carefully keeping her butt plug out of sight behind her body, and waltzed away to her room. Tomorrow was another day, and she was more excited than she'd probably ever been to wake up and get to school.\n\n****\n\nRiley brought Jen back to her place that afternoon after school. They had to be a little more careful since Riley couldn't be sure her parents or brother wouldn't be around, but all that really meant was no wandering around the house bottomless and showing off their butt plugs.\n\nThey were still totally free to do as they liked in Riley's room, which as always meant first and foremost to rub one out.\n\nRiley took advantage of her vibrating plug while masturbating. Jen had to make do with her regular butt plug for anal stimulation, over which she expressed some minor jealousy.\n\n\"I might be able to get you one of these,\" Riley said afterward, after they'd each had a nice cum and were relaxing together in the afterglow. \"If you want. Hailey's mom I guess sells stuff like this on the side.\"\n\n\"Does she?\"\n\n\"Yeah.\"\n\n\"Fascinating.\"\n\n\"Isn't it? Yeah. I probably couldn't get another freebie, but maybe she'd have a better price or something.\"\n\nJen shrugged. \"I dunno. Haven't made my mind up whether I really want one.\"\n\n\"Why not?\"\n\n\"I don't know. Just don't think I need one right now.\"\n\n\"But fashion!\"\n\n\"I know. But, like, I've got Logan now.\"\n\nRiley gave Jen a serious look. \"You can't use a boy as a fashion accessory.\"\n\n\"Excuse me, says who?\"\n\n\"Me.\"\n\n\"Well you don't know, do you? If Logan and I work out, all I gotta do is keep him on my arm, both of us showing jewelry, and bam, easy top of the social ladder.\"\n\n\"That's so exploitative.\"\n\n\"Nuh uh. Side benefit. That's all.\"\n\n\"Pff.\"\n\n\"Well whatever. If it doesn't work, can always go vibrating, I guess.\"\n\n\"Does Logan at least know you're into him for fashion potential?\"\n\n\"First of all, that's a side benefit. You're not even listening when I say that, are you? Second of all, yes he does. We're gonna be, like, a high school power couple, so we're both coming out ahead.\"\n\n\"You seriously discussed that already? You've known each other, like, an hour.\"\n\n\"Dude, we've been at school together for years. Like you and Hailey. Not like either of us is going in cold, here.\"\n\n\"Yeah, that's true.\" Riley nodded toward the door. \"Wanna go take our plugs out?\"\n\n\"Sure.\"\n\nAfter a quick peek to make sure the coast was clear, Riley sneaked the short way down the hall to the bathroom, still bottomless, followed close behind by Jen. She helped Jen take the gem from her butt, and Jen did the same for her. They gave their toys quick but thorough washes, then dried them and took them back to Riley's room. Riley certainly wasn't about to leave them around for someone else to find, even less so now that it had gone wrong that one time.\n\n\"My butthole's a bit sore now,\" Riley said as they settled back in on Riley's bed. \"I think this plug's a little wider where it keeps me open. Wearing it for two days kinda has me feeling a bit chafed or something.\"\n\n\"Not too bad, is it?\"\n\n\"No. Just a little. Like remember when we first started wearing jewels?\"\n\n\"Oh yeah. Just that new feeling of having something up your butt all day, huh?\"\n\n\"Exactly.\"\n\n\"Want me to rub you a bit like we used to do? See if that helps?\"\n\n\"Yes please.\"\n\nRiley rolled on her tummy, then stuck her butt in the air in a face down, ass up position.\n\nJen got some lube, never in short supply these days, and dribbled a little down Riley's ass crack. She rubbed a slippery finger over Riley's slightly achy butthole, then pushed it inside. She massaged Riley's asshole with her one finger, then slowly pushed in a second when it felt right.\n\n\"Yeah, that's nice,\" Riley confirmed. \"Just needed a bit of a massage.\"\n\n\"Glad to help.\"\n\n\"You don't think it's weird for me to have another girl fingering my butt, do you?\"\n\nJen shrugged. \"Wouldn't think so. But that's between you and Hailey. Best not to refer to it as fingering, though. Fingering's definitely sketchy.\"\n\n\"Good call.\"\n\nJen fingered Riley's ass for another few minutes while they both mentally called it something else, then pulled her hand free. She gave Riley's bottom a medium smack to signify being done, then couldn't resist a quick, arrhythmic drum roll as though Riley's ass was a pair of bongos.\n\n\"That's better, thanks,\" Riley said. She rolled on her side and reached back, testing her ass with a finger. \"Much better.\"\n\n\"Anytime.\"\n\n\"I really need to see if Hailey'll let me finger her ass.\"\n\n\"On a first date?\"\n\n\"We're calling yesterday our first date.\"\n\n\"Ah.\"\n\n\"Aaannnd I kinda definitely ate her ass out for a while. So there's that.\"\n\n\"You did?\"\n\n\"Mmhm.\"\n\n\"Now who's moving fast? And you were giving me shit.\"\n\n\"It's different. I was doing something nice for Hailey. Not exploiting her for fame and fortune.\"\n\n\"Uh huh. She enjoyed herself, I take it.\"\n\n\"Very much so.\"\n\n\"And you didn't finger her then because...\"\n\n\"Didn't think of it. She was too tasty. Once I started licking, I didn't want to stop.\"\n\n\"... her ass was too tasty?\"\n\n\"Correct.\"\n\n\"Asses are sexy, Ri, but I don't know about tasty.\"\n\n\"How would you even know?\"\n\nJen blushed and didn't answer right away.\n\n\"Jeeennn, I asked how would you know?\"\n\nJen squirmed. \"I was gonna tell you.\"\n\n\"Yes?\"\n\n\"I might have... when me and Logan... yesterday...\"\n\n\"Ha! The tables turn! Again!\"\n\n\"Shush.\"\n\n\"You ate his ass?\"\n\n\"Just a little.\""
    ],
    "authorname": "Xarth",
    "tags": [
        "anal fingering",
        "ass eating",
        "ass licking",
        "best friends",
        "butt plug",
        "fisting",
        "high school",
        "lesbian",
        "public",
        "showing off"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/butt-jewelry"
}
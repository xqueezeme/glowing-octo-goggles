{
    "title": "The Tennis Star Ch. 02",
    "pages": [
        "This is the second part of a four part story, so it won't make sense if you don't read that first. All characters are over 18.\n\n*****\n\nThe morning light began to stream through the bedroom window as I regained consciousness. It wasn't my bed, but that didn't alarm me. I was alone, though, and that I didn't like. I started to sit up, but the air was cold, so I lied back down and pulled the covers up. The bathroom door opened, and I felt a smile stretch my cheeks as Iryna came back into the room.\n\n\"I am sorry, Carrie.\" She swung her crutches toward the bed. \"I did not want you to wake up alone.\" She slid back under the covers with me.\n\n\"You're here now. That's what matters.\" I wrapped my arms around her, and she did the same. \n\nShe kissed me, and it was just as wonderful as it had been last night. \"Did you sleep well, moya lyuba?\"\n\n\"Yeah.\" I snuggled in close, loving the feel of her strong arms around me. I laid my head on her chest. \"What happened last night?\"\n\n\"You forget already? I am losing my touch, yes?\"\n\n\"No, I just want to hear you tell me.\"\n\nIryna ran her fingers through my hair, kissing me gently on the crown of my head. \n\n\"Last night I made love to a beautiful, kind, and talented woman. Then I held her through the night as she slept, and I was happy.\"\n\n\"Mmm.\" I moved gently against her, closing my eyes. It was bliss. Or it would have been, if I hadn't had to pee.\n\nI started to pull away. \"Oh, sweetie, I have to get up.\" Iryna smiled and let me go. After I finished with the toilet I washed my hands, staring at myself in the mirror. My hair was mussed from sleep and, well, other things. I was also smiling. \n\nI giggled to myself and took a moment to look around at the palatial bathroom. There was a huge baby blue tub, encased in white marble, but I didn't see a shower initially. Then I noted the far wall didn't go all the way, creating a space behind. I poked my head around the edge, and saw the most beautiful stone tile alcove. \n\nThere were at least six different shower heads, along with was a waterproof touch screen on the near wall, which I played with for a few seconds, causing the various heads to turn on and off. Once I had them all going I stepped inside.\n\n'There's a lot to be said for being rich.' It was the last coherent thought I had before the jets washed everything away. It was lovely, water spraying from all sides, me just luxuriating in the warmth. It was so enthralling I didn't hear Iryna until her strong arms wrapped around me. I gasped as she pulled me back against her, her hands playing freely over my breasts and stomach. I reached behind and held her head as she kissed my neck, warm water running over us as she did. Her fingers slid down, over my mons and between my lips, where my body was quickly adding to wetness of the shower.\n\nMy knees shook as Iryna worked my clit, and I had to reach out and grab one of the safety bars to keep my balance. Her other arm wrapped around me, holding me up and caressing my nipples. Even on only one leg, her strength was amazing, and I pressed against her. I could feel her firm breasts against my back, while little sparks of joy went dancing through my limbs as she suckled my neck, the water warm on my body. The combination of sensations was overwhelming, and before I knew it I was dissolving into orgasmic bliss, shaking and crying out against my lover as she effortlessly held me up. Her fingers kept circling my clitty, drawing out every last delicious spasm of pleasure until I couldn't take any more, spinning in her arms and kissing her deeply. \n\n\"That was a lovely surprise.\" I smiled up at her.\n\nShe cocked her head to the side playfully. \"Well, I was lonely. And I love this shower. It is why I choose this place.\" She reached over and pulled a poof hanging from a hook and loaded it with body wash. \"But you are still dirty, moya lyuba.\" She worked up a lather, languidly running the poof from my neck down to my pussy, and slowly, sensuously, she washed me, every inch and crevice, her little kisses and touches almost making me swoon. \n\nAfter awhile I claimed the poof for myself and began my own ministrations, running it first over her chest and then each breast. Her nipples were taught, pale pink and delicious looking. I sucked them each into my mouth, feeling her jerk and shudder as I did. I went on, exploring every inch her, just as she had done. Her feet, a soft callus from hours and hours on a tennis court, her incredibly toned calves and powerful thighs, the muscles of her back, moving perfectly under her cream colored skin. The joint of her hip, curve of her elbow, I worshipped everything. Somehow I felt this was far more intimate than even our lovemaking had been. \n\nVery much by design I finished kneeling in front of her, the smell of her arousal breaking through the lavender body wash and cool, clean wetness of the stone tile. I ran my hands down her sides to her lower back and over her firm backside. Lifting her injured leg and placing it over my shoulder, I leaned forward, taking her pearl into my mouth. It tasted just like I remembered, musky and wonderful, and I luxuriated in it. \n\nUnfortunately, kneeling in a tiled shower is not the most comfortable position, so I had to focus on her most sensitive areas to hurry things along. I licked and sucked, running my tongue along the sensitive spot under her clit. Soon Iryna was bucking and writhing against me, her arms flung out and steadying herself on the safety handles. I concentrated on timing my licks and flicks to the rythym she was creating, and soon she was screaming my name as she came. \n\nI eased her leg down and stood, sliding my body against her. She kissed me gently and I laid my head against her chest. \"Iryna?\"\n\n\"Yes, Moya Lyuba?\"\n\n\"This is wonderful, but I'm turning into a prune, and if I don't get some breakfast soon, I'm going to start eating the soap.\" She laughed and kissed me again, before reaching out and hitting the red 'off' button on the panel. As I stepped out she wrapped me in big, soft towel before grabbing one for herself. I put my hair up to dry and found my robe, still laying on the floor by the bathroom door. \n\nSoon we were out in kitchen. I was cutting up a cantaloupe while Iryna made some scrambled eggs and turkey bacon. We moved well together, making small talk and touching every time we passed by the other. As we ate our breakfast Iryna told me stories about the tour. Hearing how a particular Grand Slam champion couldn't get the words right to 'My Way' when singing Karaoke was funny, but watching Iryna doing an impression of it had me almost falling off my chair.\n\nIryna loved to laugh, and she was a keen observer of people. You had to be on a tennis court, to read what's really going on in an opponent's mind. And despite her lack of education, she was so smart. I loved hearing her speak.\n\nWhen breakfast was finished and dishes put away I put my professional hat on. \"You have exercises to do, right?\"\n\nIryna nodded and got out the papers where her therapist had written her orders, and we started into them. It definitely wasn't like trying get a fifth grader to do his math homework. Iryna, like most high-level athletes, was solidly in the type A camp, and she was far more likely to overdo things than to shirk her recovery. Most type A's think, 'Hey, if doing the exercises once is good, twice is better, right?' As a physical therapist, I can tell you the answer to that question is almost universally 'No.' \n\nSo, much of the time I spent talking her down from doing too much. Fortunately, she channeled a lot of that extra energy into an upper body workout that put anything I'd ever done to shame. I worked out with her, deeply envying the home gym in her villa, which was nicer than my club's (not as large, but definitely nicer). She'd gone to some other place, and the intensity on her face was astounding. I was finally able to snap her out of it with the suggestion of a massage. Even without my oils I did a pretty good job, and it had a very happy ending indeed, as I finished with my face buried between her legs.\n\nAfter our multiple and varied workouts, we decided that a bath was needed, and she treated me to a repeat of her attentions from the shower, only this time with my entire body being tickled by the jets in that delicious tub. After I came down she just held me close as we enjoyed the water. \n\nUnfortunately, my mind was not able to fully relax into the moment. I needed to know a few things, things I really didn't want to ask about. \n\nI gently stroked the strong arms holding me, resting against my lover's tall frame. \"Iryna?\"\n\n\"Yes, Moya Lyuba?\" I still didn't know what that meant, but it sent a warm fuzzy into my heart every time I heard it. \n\n\"Can I ask you a few things?\"\n\n\"Yes.\" I felt her tense slightly, but she also pulled me tighter. \n\n\"How long are you staying?\"\n\n\"I must be back in Europe by November. I was to be here only three weeks, but now I will stay two months, if you wish it.\"\n\nThat's longer than I'd thought. \"Any time I can get, I'll take.\" My voice cracked a little as I said it. How could I be so stupid? I knew she didn't live here. The only reason she was around at all was that she'd hurt herself while in country. But part of me was devastated. I saw my dream again, where the woman I now knew was Iryna vanished into smoke when I tried to touch her. And what did she have? A girl in every port? Was I just the girl in Orlando?\n\n\"Do you, um, when you ... travel ... do you meet a lot of women?\"\n\n\"Oh, Carrie.\" She kissed my head. \"Do not think this.\" \n\n\"I'm sorry, I just...\" I closed my eyes, and felt a tear escape.\n\nI tried to pull away, but she did not let me go. \"I do not have many women. Is that right, my English? I have been with only four. First, when I was sixteen at the academy in Kiev. This is when I knew what I was, but she only was experimenting. It hurt so much. Then my first girlfriend, Tanya, the one my father found me with, and my last girlfriend, Elle. And I have been with you. For me, this is very fast. I am worried it is too fast. Maybe it is because of my fear, but after we met, I could not stop thinking of you. Never think this is not special for me; that you are not special.\"\n\nI leaned into her, and decided to trust what she was saying. What choice did I have, right?\n\n\"Now, the men's final is played soon. You will stay for this?\"\n\n\"Sure. Let's get some lunch.\"\n\nWhen we got out of the tub and returned to the living room I went to grab my phone from my purse, which I hadn't touched since I'd arrived.\n\n\"Oh, shit.\"\n\n\"What is wrong?\"\n\n\"My roommate is freaked out 'cause I didn't come home.\" I showed Iryna the last message.\n\nSasha- U better be getting laid, cuz if ur getting ax murdered I'm gonna be so mad at u.\n\nI sent her a quick text that I was fine and would be home that afternoon.\n\n'What will you tell her?\"\n\n\"Not sure. I'll think of something. I'll keep your name out of it, I promise, although I doubt she knows who you are.\" I don't think Iryna was fully satisfied with this answer, but she didn't push further.\n\nWe ordered a pizza, one at least reasonably healthy, and I had second sports fiasco in trying to explain American football to Iryna before the men's final started at four. I actually dressed before the match. I felt I'd be able to resist staying another night better with clothes on. I borrowed a pair of panties from Iryna, a little small but they'd do. She may be taller, but I definitely had more in the trunk, so to speak. The rest of my stuff from yesterday would do the job. \n\nWhen I went to sit down, I was planning on giving myself some distance between us, but I just couldn't. I sat close and put my head on her shoulder while her arm went around me. As we watched the match I thought to myself, wow, I'd just spent two days making love to a woman, which hadn't even been a wild fantasy beforehand, and I wasn't freaked out at all. I remember Cindy, one of my lesbian friends from college, telling me she'd had a full blown panic attack after the first time she'd kissed her future wife. I remember thinking, 'Man, I'm taking this well.' Being stupidly naive is comforting sometimes. My panic attack came on my way home. \n\nWe'd exchanged numbers and I'd gone out to my beat up silver civic, which looked incredibly out of place in this neighborhood. We'd made plans to spend next weekend together as well, and I couldn't wait. As I sat behind the wheel I had to pull a map up on my phone, as I had no idea in what part of the city I was. As I figured it out a text popped up\n\nIryna - I miss you.\n\nI covered my mouth with my hand and giggled, feeling like a silly schoolgirl holding a secret note from her paramour. The community gate opened automatically as I approached, and I pulled away from my little imaginary world and was surrounded by normal people again.\n\nI drew in a deep breath as what had just happened started to crash over me. I didn't even care who she'd been. I'd been with a woman, for God's sake! And I'd loved it, every last moment. I thought about it for a second, and there was no question in my mind. I had never, in my life, been as attracted to someone as I was to Iryna. And the sex, every orgasm I'd had had this weekend had been stronger and more wonderful than any I'd ever had before. Any, bar none. And I knew, without a doubt, that If I didn't have to go home, do laundry, be at work in the morning, etc. I'd be racing back to her bed at this very moment. \n\nWas I a lesbian? I thought back on my experiences with men. Even the better ones, were just nothing compared to her. And if she left, if I never saw her again, and if I ever finally stopped crying, I would want someone like her again. \n\nI searched my past for clues. In college, my roommate, Allison, had been a swimmer. She'd been tall, incredible shoulders and legs. I'd always been a little envious of her, even though she was a total sweetheart. But I'd enjoyed looking at her. She'd always been very proud of sexual exploits with her varied boyfriends, and I'd deeply hated hearing about them. Had that been jealousy? Maybe, but not about her having boyfriends when I didn't. It was about them touching her. I didn't like the thought of it. \n\nAnd my friends Cindy and Michelle, the ones who'd gotten married last spring, I'd always wanted what they had, because being with each other was so effortless for them. I'd been looking for it in the wrong place. \n\nBut the realization of my sexuality wasn't the scary part. What the hell was I going to tell my parents? My sisters? My grandmother? When I'd graduated High School she's given me a real string of pearls with matching earrings. I was supposed to wear them for the man I wanted to marry. Would she want them back? Would Sasha want to move out if I told her? I couldn't afford the lease if she did. Should I just keep my big yap shut about the whole thing?\n\nThe questions kept coming, racing through my mind one after another, until I had to pull over into a Denny's parking lot to calm down. I was about two miles from my place, and I knew Sasha would be all over me when I got home. I needed a story, but it had to be close to the truth, or I'd screw it up. \n\nI started to think it through, and that helped me to calm down. I'd met a guy at the club, new guy, never seen him before. He'd asked me out to lunch, one thing led to another and I'd woken up at his place. Hopefully Sasha'd be so pissed at me for going home with a guy I didn't know she'd berate me over that and not push for too many details. \n\nOk. We had a plan. I pulled back out onto the street and spent the last five minutes working out some details. Name was Ian, from Europe, sandy blonde hair, wore it long. Won't be here long, so just a hook up. I felt a pit open up in my stomach. Maybe that was too close to the truth. \n\nCrap. Too late now. I turned the key and walked in, closing and locking the door quietly behind me. Sasha was sitting on the couch while 'Say Yes to the Dress' was blaring insipidly from the TV. \n\n\"Hi, Sash.\" I walked in and set my bag down.\n\n\"You!\" She pulled her spoon out of a carton of Ben and Jerry's and pointed it at me. Ugh. I swear that girl could eat anything and still be a size four. \"Sit. Details, now.\" \n\nI giggled. \"Let me start laundry first.\" I moved past, and I could feel her eyes on me as I went. \n\nShe gave a disgusted sigh. \"Fine. Be quick about it, and if you want some of this bring a spoon.\" I threw my pile of scrubs into our little washer dryer combo and went back to the living room. Might as well get this over with. \n\nI flopped down on the far end of the couch, Sasha's eyes wide with expectation. \n\n\"Well?\"\n\n\"Well, what?\"\n\n\"Come on. Spill.\"\n\nI shrugged. \"I met someone after my match at the club. We went out to lunch.\" As I started I found that I could not lie about Iryna's gender. Omit maybe, but saying I'd been with a man felt like a betrayal.\n\n\"Uh-huh. A thirty-hour lunch? That's a hell of a meal\"\n\nGod, she had no idea. Couldn't say that, though. \"After we ate I just hung out back at their house.\"\n\n\"And...?\" Sasha made little circles with her hand, begging for more. I couldn't help but blush. \"I knew it! You hooked up! God, how was it?\"\n\n\"It was nice.\" I bowed my head, my cheeks felt like they had lava running through them. \"It was really, really nice.\"\n\nSasha's eyebrows arched. \"Really, really nice? How many 'really's?\" \n\nA big toothy grin spread across my face. \"Six, I think.\"\n\nSasha screamed and jumped across the couch, almost spilling her ice cream in pulling me into a hug. \"I'm so happy for you! What's his name? What's he do? When do I get to meet him? Was he hung?\"\n\nI spluttered at the questions, and refused to answer any more. \"Look, they're not from around here, it may have been a one night thing. I hope not, but I don't know.\" I yawned, not in the least bit feigned. \"Sash, as soon as I get these things figured out I'll let you know, but for now...\"\n\nThe disappointment on her tanned face was obvious. I'd spent a few too many evenings listening to the blow by lick details of the sexual adventures of her and her boyfriend, who was not only a nice guy, but according to her, a sex god. I hadn't really enjoyed all those conversations, although I had to admit their creativity was a bit impressive. I really hadn't had anything to reciprocate with until tonight, but I just wasn't ready, and I really wasn't sure how long I could keep up the neutral gender thing. \n\n\"Can we just watch the show? I gotta stay up at least long enough to get those in the dryer.\" \n\nSasha gave a look of exaggerated shock. \"You would watch this?\"\n\n\"I don't know. I might get married someday.\"\n\n\"Who are you? And what have you done with my roommate?\"\n\nI laughed and settled back. I imagined wearing one of those dresses, walking slowly down a grass pathway to where Iryna was waiting for me, beautiful in a white dress of her own. Jumping the gun? Hell yes, but a girl can dream.\n\nAfter half an hour I almost kinda got what Sasha saw in this show. We were laughing at a particularly neurotic young woman when my phone buzzed from the coffee table. My heart stopped in my chest and I jumped for it, just as Sasha did the same thing. I managed to get my hands on it first, checking the name on the message. \n\n\"It's just from Cindy.\"\n\n\"Bah.\" Sasha sat back and took another bite of her increasingly soupy ice cream. \n\nCindy - Hey girl, You still coming over for the game Sat.? 3:30 our place.\n\nOh crap, I'd forgotten all about it. \n\nMe - Maybe. I'll let you know ASAP. Anyone else coming?\n\nCindy - Nope, Alice and Tom got tickets, so they're going up. You have to help me keep M calm during the game.\n\n'M' was Cindy's wife Michelle, who we all called Mitch. She took Bulldogs football, um, let's just say very seriously.",
        "Me - OK, I'll try.\n\nSuddenly the phone was ringing in my hands, with a picture of Cindy in her her wedding dress and me in my bridesmaid dress on the screen. I ran into my bedroom, closing the door before answering. \"I said I'll try.\" \n\n\"Mitch wants to know what ...\" \n\nIn the background I heard someone call out \"Or who!\"\n\n\"Or who could keep you from a Georgia Tennessee game?\"\n\n\"It's a long story. I wasn't thinking and I kinda made plans.\" At least I hope I had plans. Did spending an entire day naked in Iryna's tub/shower/bed/arms count as plans? You're damn right they did. Oh, shit. And my match Saturday morning. It's OK. I'd work it all out. \n\n\"Do these plans involve someone tall, dark and handsome?\"\n\n\"They are tall.\"\n\nCindy's voice was muffled as she called out across her living room. \"She met someone!\" I heard a holler and feet running before a heavy flump onto whatever piece of furniture Cindy was occupying. \"Ok, you're on speaker. What's his name?\"\n\n\"Or her?\"\n\n\"Mitch, honey!\"\n\n\"What?\"\n\n\"Carrie, tell her it's not a her.\"\n\n\"Uhh.\" I stammered for a second. Finding this had been so special. I couldn't lie about it. And who would understand better than Cindy and Mitch? \"Well...\"\n\nCindy's voice was absolutely floored. \"Oh. My. God.\"\n\nI heard Mitch whoop. \"Sweetie, you owe me dinner.\"\n\n\"No I don't! I never agreed to that bet.\"\n\nI finally found my voice. \"What? You were betting about my sexuality?\"\n\n\"I wasn't. Mitch was.\"\n\n\"Don't blame me 'cause I have superhuman gaydar. I pinged you, didn't I, my beloved?\"\n\n\"Enough of that. Carrie, what happened?\"\n\n\"Umm, I met someone at work with a tennis injury. I mentioned I played too and they, she, showed up at my match on Saturday. Afterwards we went to lunch and one thing led to another, and ...\"\n\nMitch cut right to the point. \"Holy God, you slept with her already, didn't you?\" \n\nI felt my face flush. Luckily they couldn't see it. \"Kind of. OK, yes\"\n\n\"And?\" I swear I could hear them both shaking in anticipation.\n\n\"Oh, God, it was amazing. I finally get it, what everyone's been talking about. It's like I finally took off a blindfold.\"\n\nMitch laughed loudly. \"Welcome to the dark side.\" \n\n\"Mitch, honey.\" Cindy scolded her wife. \"Carrie, I'm so glad for you. She's welcome to come with. I'd love to meet her.\"\n\n\"It's so early, but I'll bring it up.\"\n\n\"Ok, well, let us know, and if you need to talk, I'm here.\"\n\n\"Thanks, Cindy\"\n\nWe chatted a minute more before I hung up. I went out and changed my laundry and sat back down to watch TV. The next weeks were going to be interesting.\n\nMonday went slowly. I didn't see Iryna, and wondering every hour if she would be the next on my list was a little nerve wracking. Finally I asked Mike to see my schedule and she wasn't on it anywhere, the whole week. \n\n\"I got a call from the higher-ups that you and Iryna Baraskova know each other?\"\n\nI nodded, my heart all of a sudden pounding in my chest.\n\n\"Why didn't you say something?\"\n\n\"I wasn't sure she'd remember. But I saw her over the weekend.\" Did that sound convincing? I hoped so.\n\n\"That's fine. We'll make sure she isn't on your schedule, you know the rules.\"\n\n\"Of course.\" I started to walk out.\n\n\"Oh, and Carrie?\" I turned slowly. Mike was looking sheepish. \"Could you get me her autograph for my daughter? I hate to ask, but it'd mean a lot to her.\"\n\nI smiled. \"Sure.\" \n\nWith that settled I could concentrate on my work, which made the afternoon go much faster. Once I got home I went for a bike ride, cursing central Florida's lack of hills. Still, it felt good to work up a sweat. When I got home Sasha was skyping with her boyfriend. I waved over her shoulder.\n\n\"Oh, Carrie has a new boyfriend.\" \n\n\"Congratulations!\"\n\n\"Thanks, but I don't have a boyfriend. I'll let everyone know when there's something serious.\"\n\nI made my way into my bedroom, stripping off my shorts and sports bra. After tossing on a comfy T-shirt, which I think had been Kevin's, I opened up my phone. Iryna had texted me twice, just 'thinking of you's. It was adorable. Just seeing her name on my phone sent a lovely, warm feeling into my chest. My finger hovered nervously above her phone number for a moment. I needed to talk to her about the weekend. But could I call Iryna Baraskova? Maybe not, but I would not live in a world where I was afraid to call my girlfriend, so I pressed the screen. The phone rang once and Iryna answered.\n\n\"Carrie?\"\n\n\"Hi.\"\n\n\"It is so good to hear your voice, moya lyuba. I miss you too much for only knowing you one week.\"\n\n\"I miss you, too.\" \n\n\"So how was your day?\"\n\nWe chatted easily for several minutes, just talking through silly minutia of our days. It \n\nwas so easy, so lovely to have someone to talk to. Iryna told me about her sessions and described Tina, her motor mouth therapist to a hysterical T. Tina is a lovely person, and very competent, but being in the same room with her for two hours could be very taxing on one's ears. I couldn't remember it being this easy to talk to anyone, except maybe my dad. Finally it got quiet, and I started several sentences without finishing them.\n\n\"Something is on your mind Carrie. What is it?\"\n\n\"I need to talk to you about this weekend.\"\n\n\"You cannot come?\" The hurt in her voice was evident. \n\n\"No, you have me for the whole weekend, with the exception of my match Saturday. But, umm, remember my friends I told you about? The lesbian couple from my university? Well, they umm...\" God, this was stupid. If Iryna wasn't who she was I wouldn't have any compunction about inviting her to meet them. So why should I now? Sad thing is I knew damn well why.\n\n\"What is it?\"\n\nMight as well just do it. \"They kinda weaseled it out of me that I'd met someone, a female someone, and they flipped out.\" I could hear her chuckling in the background. \"Don't laugh at me.\" My voice was feigned petulance.\n\n\"I'm sorry, moya lyuba.\"\n\n\"I kept your name out of it course. Well, they live in Tampa and I usually go down once a month or so and spend the night, and this weekend is the Georgia Tennessee game which you don't care about at all and, uhhh.\" I kind of said the last sentence to myself, trying to stop the babbling. \n\n\"You are asking me to meet your friends?\" There was no humor in her voice now. \n\nNo anger either, though. If I had to put a finger on it I'd say fear.\n\n\"They asked to meet you. Not famous you, my gir - my friend you.\" Whew, that was a close one. Idiot. \n\n\"I will have to think on this.\"\n\nI felt my eyes burn for a second, but kept my voice level. \"I understand. But if you say no, I stay with you, if you want me to.\" \n\n\"Thank you, Carrie. I will decide soon.\"\n\n\"OK. Sleep tight\"\n\n\"Good night, Carrie.\"\n\nThe phone disconnected and I flopped back onto my bed. Had I just destroyed everything? I told myself that I wasn't going to cry, and I was still telling myself that whenthe first tear hit my pillow. I didn't think I could do it, the hiding, sneaking around. I was just letting my mind run through some worst possible scenarios when my phone chimed again. It was Iryna.\n\n\"Hello?\" My voice cracked as I answered. Off the court I'd always been rubbish at hiding my emotions.\n\n\"I will go\"\n\nI felt like I'd been bathed in sunshine. \"Really?\"\n\n\"Yes. You were crying?\" \n\n\"No, I wasn't.\" It was not convincing.\n\n\"Oh, Moya Lyuba, why?\"\n\n\"It's stupid.\"\n\n\"Carrie...\"\n\n\"I just don't want to hide you! This, thing, with us, it's amazing.\" I pulled my legs up to my chest and hugged myself. \"I want to walk down the street and hold your hand, sit with you in restaurant without looking around wondering if anyone recognizes you. I...\"\n\n\"I want these things too, and it is so soon.\" Her voice was soft, and I wanted reach through the phone and hold her. \"My last girlfriend, she wanted to be more public, but I hid. I felt I must, but maybe I did not want to risk for her. For you, I feel different. But it is hard for me. We will start with your friends, yes?\"\n\n\"Yes. I miss you, I wish you were here.\"\n\n\"And what would you do, if I were there?\" Iryna's soft alto dropped a few notes, sending a delicious shiver through my body. \n\n\"I'd run my fingers through your hair, pull you close to me.\"\n\n\"And then?\"\n\n\"Kiss you.\"\n\n\"And I would kiss you back, gently at first, then more, with hunger.\" Iryna's voice was husky, and I could feel my nipples harden, that lovely tingle building under my panties. \"I would slide down, kiss your neck, nibbling gently on those special spots I found.\" I gasped as she said it, running my fingers over the areas she was describing. \n\n\"I would reach down and pull off your shirt. Take your shirt off, Moya Lyuba.\"\n\nI stripped off my T-shirt after setting the phone down and , picking it back up when I was finished. \"OK\"\n\n\"I kiss further down, over your chest, whispering how beautiful you are, how lovely your breast feel as I caress them.\"\n\nI laid back, using my hands to bring life to her words. \"I am pulling your breast into my mouth, suckling and bathing it with my tongue.\" I pinched my hard nipples. My breathing was becoming heavier, more labored, and I was sure she could hear it through the phone.\n\n\"Then, my mouth moves over your stomach. I strip off your panties, exposing your sex to me. It is so wet, and smells like heaven. I run my fingers through your juices, and when they are slick and warm I slide them into you.\" I cry out softly as my fingers enter my vagina, everything just as wet as Iryna was describing. \"They slide over that special spot, and my mouth finds your pearl, licking and sucking on it. It tastes wonderful, and I tell you so. I work you in earnest now, feeling you move and roll beneath me.\" I was frigging myself hard, my fingers moving in and out while my thumb worked my nub. I held the phone close, listening as Iryna's hypnotic voice continued to whisper in my ear. I could feel the tension building, and soon my pussy detonated with joy, my legs clamping hard over my hand as it sought to extended the pleasure just a moment longer. \n\n\"Oh, Iryna, that was lovely.\"\n\n\"For me as well. I am counting minutes until I can do that for real.\"\n\n\"I'm kissing you, and holding you, and I will all through the night.\"\n\n\"And I you, moya lyuba. I will dream of you. Goodnight.\"\n\n\"Goodnight.\" The phone disconnected and I clutched a pillow to my chest, imagining it was my lover, and I slept.\n\nI texted Cindy the next morning.\n\nMe - We'll be there.\n\nCindy - Yes! Can't wait to meet her.\n\nMe - Look, you kinda know her, so when we get there, don't freak out. Please.\n\nCindy - Oh, girl, you cannot do that to me. Spill, spill, spill.\n\nI sent her a short recording of crickets chirping. I love smart phones.\n\nCindy - Fine, love you, see you Sat.\n\nThe rest of the week passed ridiculously slowly, except for the one or two hours every night I spent on the phone with Iryna. Even my weekly Tennis lesson drug on interminably. I felt like I was back in high school, hiding in my room hogging my parent's landline, trying to keep my voice down so my sisters wouldn't be able to eavesdrop.\n\nAs much as I tried, I couldn't wheedle anything out of Iryna about our plans for Friday. I let her have her fun, as long as I ended up in her bed and arms that night I'd be happy. \n\nFinally Friday afternoon arrived, and I finished with my last patient. I think I set a new land speed record getting home. I'd been planning on what I'd wear since, well, yeah, but now that the moment of decision was on me I had no idea. I needed to shower, so that'd buy me a few minutes to think about it. Except that warm water cascading over my naked body didn't help to make me think about my outfit. Not that I didn't think about things, wonderful, sexy, beautiful... huh? What? Oh sorry. So, anyway, it was distracting.\n\nI finally pulled out a chiffon A-line cocktail dress I hadn't worn in awhile. A dark midnight blue, it felt right. I ran my fingers over beaded neckline. It really was lovely. I'd bought it for a special night out with Kevin, but that wasn't the dress's fault. I should give it another shot.\n\nDress color decided on, makeup and hair could now be done. Eye shadow matching the dress looked weird, so I went with a light champagne tan. A little blush and a peach lipstick I'd bought specifically for this dress completed the job. When I was finished I pulled the rollers out of my hair and let it fall down past my shoulders. \n\nThe girl in the mirror looked pretty good. It was the most make up I'd worn since Cindy and Michelle's wedding, but that had been professionally done. It wasn't a bad job, but, ugh. \"Sasha!\"\n\nThe bathroom door opened. \"How's it going?\"\n\n\"What do you think?\"\n\nShe looked over my shoulder and into the mirror. \"Excellent. Maybe just...\" I'd never been great shakes with makeup. My roommate Amanda had loved it, and had been more than willing to help. Since then I'd stuck with the basics. Sasha had apparently taken that course on make up that some how I'd been sick for, and she fixed everything in about ten minutes. \"There, perfect.\" \n\nIt was better, no question. \"Thanks, Sash.\" \n\n\"You are welcome. What'cha wearing?\"\n\n\"I'll show you.\" She followed me back into my room, where I held the dress up over my robe. \"Yes No?\"\n\n\"Yes, definitely yes. Where're you guys going?\"\n\n\"I don't know.\"\n\n\"Ahh, he's being all mysterious. I like it.\"\n\n\"I kinda do, too. I've been obsessing on it all week.\"\n\n\"Any guesses?\"\n\n\"Well, she's from Europe, so maybe...\" Oh, shit. Shit. Shit. Shit. I looked up at Sasha who was staring at me open mouthed. \n\n\"Did you say what I think you said?\"\n\nI cringed a little. \"Yes. It's a she.\"\n\n\"Uh-huh. So the six 'really's from last weekend?\"\n\nI sat down on my bed. \"Yep. On a scale of one to ten how freaked out are you?\"\n\n\"I'm not, I'm cool. I just, wow.\"\n\n\"Yeah, that's kinda what I said.\"\n\n\"But, you had a boyfriend.\"\n\n\"I know, but this is so much better. For me, at least. I've had a few boyfriends. None of them have affected me like she does.\"\n\n\"Ok, when you get home, I'm gonna want details. Real details this time.\"\n\n\"Thanks, Sasha.\" \n\nShe crossed the room and pulled me up into a hug. \"Have fun.\" And she left.\n\nI dressed quickly, taking care to choose better lingerie this time. I also packed a bag for the weekend and prepared my tennis stuff. I glanced at the clock. Almost six, Martin was coming to pick me up at six. I looked at the mirror. Sasha had done her magic. I looked good. When the buzzer finally rang I was pacing around my room in my heels, my weekend bag and tennis gear sitting on my bed. I lugged them out toward the door in time to see Sasha running over to the intercom. \"Who is it?\"\n\n\"It's Martin here for Miss Mitchell.\"\n\nSasha looked at me quizzically. \n\n\"That's her driver.\"\n\nI pushed past her as she mouthed \"Her driver!?\" at me. I pressed the intercom button and looked at the little view screen where Martin was standing demurely outside the front door. \"I'll be right down, thanks Martin.\"\n\nI turned around to see Sasha staring at me, gape mouthed. Thousands of questions were burning behind her eyes. Too bad for her. \"Well, bye!\" I grabbed my purse and eased out the door. \n\nMartin was standing in front of a long black sedan, and he opened the door as 5\\I approached. I handed over my bags and slid onto the leather seats. The trunk opened and closed, and we were on our way. \n\n\"Martin, are you allowed to tell me where we're going?\"\n\n\"Just back to the house, ma'am.\"\n\nI looked down at my outfit. \"I might be overdressed then.\"\n\n\"You look lovely, ma'am.\"\n\n\"Thanks, Martin.\"\n\nHomes and businesses flew by as we drove. I was going to see Iryna and it wasn't a dream. My heart was racing. Soon we were pulling up to the guard station at the gated entrance and then we were in front of the house. \n\nMartin opened my door and I stepped out. Martin followed me up the front stairs with my bags, my hand shaking as I rang the bell. The door opened, and all my nervousness evaporated as I saw a radiant smile spread across Iryna's face. God, she was beautiful. \n\n\"Carrie, you look so lovely.\" \n\nI stepped into her arms, inhaling deeply as she held me close, taking in her scent. Was there anything about this woman that wasn't amazing? \n\n\"You can put those there, Martin, and then you can go. Thank you.\"\n\nMartin set down my bags. \"You ladies have a lovely evening.\" There was a friendly little smirk on his face.\n\nI smiled a little half smile in return. \"Oh, she will. I promise.\"\n\nAs soon as the door closed I leaned my head back and let her kiss me. The warmth just flowed through my body. It was every bit as wonderful as it had been last weekend, just like I'd been imagining all week. \"Oh God, I missed you.\" I leaned my head on her shoulder, just luxuriating in the strength of her arms around me. \n\n\"And I missed you, moya lyuba. Talking on the phone is not enough, yes?\"\n\n\"Not even close.\" \n\nI rocked up on my toes and kissed her again. When I pulled back I let my fingers run down her skin, taking her hands in mine. I pushed away a little and spread my arms out. \"Am I overdressed?\"\n\n\"I would not change anything. You are beautiful. You will make it difficult for me to get through my evening plans before taking you to bed.\"\n\n\"If I weren't so hungry, I'd let you. But, I think you should feed me first, so I have lots of energy.\" I pulled in and whispered huskily in her ear. \"I'm definitely going to need it, and so will you.\" Holy crap! Were these things coming out of my mouth?\n\nShe pulled my hands up and kissed them, leading me into the dinning room. She was wearing dark blue skintight jeans, and I watched her perfect ass sway, even with the knee brace evident under the material. The room was beautiful, long tapers burning on the table, with two lovely place settings across from each other at one end.\n\nIryna pulled out a chair for me, and I gave her bottom a playful pinch as I sat down. She gave me a wicked smile and disappeared into the kitchen, returning with a decanter of golden brown liquid and a covered white platter.\n\nI slid the cloth napkin out of its ring and laid it in my lap. \"What is it?\"\n\n\"Well, tomorrow I think I will have an education in your culture, so tonight, I will give you a lesson in mine. She poured me a glass of the liquid, a few ice cubes falling in. \"This is Kompot, made from apricots, peaches and apples. We usually have this at Christmas, and it is served warm with cinnamon, but it is Florida so...\"\n\nI took a sip; it was sweet and really fruity. I liked it. \"What's under there?\" I pointed at the platter.\n\n\"Ah, these are varenyky.\" They looked like dumplings, and she set two on my plate. \n\n\"They are similar to perogies. These are stuffed with quark.\"\n\nMy hand stopped halfway to my mouth. \"With what?\" \n\nIryna laughed. \"It is a cheese, like cottage cheese but smooth.\"\n\nMollified, I took a bite. It was creamy and delicious, and I saw Iryna's face light up as my sigh indicated my approval. \"Iryna, did you make these?\"\n\n\"Yes. It is my grandmother's recipe. All Ukrainian girls are taught this.\" She sat down across from me and helped her self to some of the varenyky. \n\n\"Do you like to cook?\"\n\n\"I did not when I was young. My brothers' always could to be outside, playing football, and I must be in the kitchen. I hated this. But when I was away, and I could not go home, I was very glad I knew how. Last Christmas, I am alone at my home, but I am eating the same meal as my family. It is not like being in Kiev, but it is something.\"\n\n\"Do you talk to them at all?\"\n\n\"My mother and grandmother, on the phone only.\"\n\n\"Do they know?\"\n\n\"My mother, and I'm sure Babusja, my grandmother, knows also. She is very perceptive. Oh!\" Iryna jumped up and ran into the kitchen, where I heard the oven open and close. She reentered with two more dishes, one a soup tureen and another a plain dish with roasted vegetables. \"I had to talk to my mother to get these recipes. I told her I was making them for someone special.\"",
        "I smiled warmly up at her as she served me, placing two cylindrical meat rolls on my plate. 'This is Kruchenyky. It is pork with mushroom, egg, and onion stuffing. But do not eat it without this.\" She lifted the lid on the soup tureen, revealing rich, yellow gravy. \"You did say you enjoy mushrooms, yes?\"\n\nI nodded. \"I do.\" \n\n\"Good.\" She ladled some over the pork rolls, along with a scoop of vegetables. \"It is a very traditional dish.\" It was different, but delicious, and soon I found myself using a dinner roll to soak up the last bit of gravy off a very clean plate. \n\n\"That was wonderful, Iryna. Thank you.\" \n\n\"I am glad you liked it. If you want to go in and sit down, I'll clear the table.\"\n\n\"No, I'll help.\" I wiped my mouth with my napkin and stood, picking up my plate and glass. I followed her into the kitchen. She was trying to hide her limp as much as possible, but it was still there. \"Sweetheart, why aren't you using your cane?\" \n\n\"I do not like it. I feel weak with it.\" \n\n\"But you need it, if you don't you'll just hurt yourself again.\"\n\n\"OK, moya lyuba, for you.\"\n\nI helped her get the dishes in the dishwasher and the food put away. We moved easily together, dividing up tasks without needing to talk bout it. I let her do the rinsing so she could lean on the counter while I moved around behind her, going back and forth clearing the table. I couldn't help but touch her every I passed by, and I was rewarded with little smiles and glances that made my knees weak. \n\nI slipped my arm around her waist as we finished, and we walked to the couch. \"I wished to take you out tonight, but there is no Ukrainian restaurant nearby, and I am not yet ready for dancing.\" She pushed a strand of hair away from my face. \"I so wish to dance with you.\" \n\n\"Sounds like fun. Soon. But tonight a quiet night at home will be just fine.\" She sat down on the sectional and put her leg up as I slid in next to her, kissing her gently. We watched 'Carol', which neither of us had seen before. Clich\u00e9d, I know, but I don't care. It was nice, seeing a movie about someone like me. Which is also stupid, seeing, as I'd only been 'like me' for a week. \n\nTwo weeks ago I'd thought of myself as straight, if somewhat bored. Now I was watching a lesbian romance, wrapped in the arms of my lesbian lover, whom I was fully intending to do unspeakable things to later in the evening, the very thought of which made me giddy with anticipation. I was also very happy.\n\nI teared up at the end, that beautiful scene (spoiler alert) where Cate Blanchette is just smiling across the restaurant at Rooney Mara, and you knew everything was going to be OK. Over everything, love had won through. Of course, they had the advantage of living on the same continent. I snuggled in and kissed Iryna on her cheek.\n\n\"Iryna?\" She shuddered as she felt my breath on her neck.\n\n\"Yes, moya lyuba?\"\n\n\"Take me to bed.\"\n\nIryna stood and pulled me to my feet, and we walked with our arms around each other's waists back to her room. \n\nOnce inside, Iryna dimmed the lights and lit a scented candle on the bed stand. When she turned back to me I released the clasp on my dress and let it puddle around my feet. I heard her growl slightly, which sent a delicious chill down my spine. I stepped out of the material pooled around me and strode toward her, letting my hips sway as I did. Iryna took the last step and swept me into her arms, lifting me up and kissing me as she spun me around once and laid me gently on the bed.\n\nI got up on my knees and tugged at her blouse, and off it went before she slid onto the bed next to me. My bra quickly followed, and I laid back as Iryna began making love to me.\n\n\"Oh, God, I missed you.\" My only answer was her humming while her mouth was attached to my breast, making me groan and push against her. \n\nIryna's fingers slid down, sliding over my soaking wet lacey boy-short panties. They played across the waistband for a moment before sliding under, making me gasp as her middle finger slid over my clitty and between my lips.\n\n\"Please, Iryna.\" Her fingers continued to tease and tingle while her mouth worked my sensitive nipples. I loved the attention she was giving my breasts, but that was not going to get me where I wanted, where I needed to go. \n\nSoon my lover took moved her mouth down, kissing over my stomach, and I lifted my hips to allow my panties to be pealed off. She hovered over my sex, her breath teasing, before kissing me deeply, running her tongue between my lips and over my swollen little nub. \n\n\"Oh, yes!\" I relaxed back into the soft pillows, and just let myself feel the glorious sensations. She worked up and down and I felt my climax building, and soon it was on me. My body shook under her beautiful mouth as her tongue worked my clit. She did not relent, and I settled back for my second trip up the mountain. She slid her tongue down, driving it in and out of my vagina, which felt heavenly. I felt her reposition her hands, spreading my cheeks a little. Her tongue slipped out and down, and a totally new spike of pleasure shot through me as she circled my little rosebud. \n\nMy eyes shot open. \"Oh my God!\"\n\nIryna pulled away slightly, gauging my reaction. I took a heavy breath. \"Please don't stop.\" Iryna bent back and I jerked again as she rimmed me. I'd never been touched there, not by anyone, including myself. I'd though it'd be gross, but it was amazing. \n\nIryna moved back up my pussy, leaving a finger tapping at my backdoor. The combination of sensations was making me crazy, and I was moaning incoherently, my head thrashing about on the bed.\n\nThat incredible finger moved up to my pussy, coating itself in my nectar before sliding back down. Iryna was working my clit with a fervor and I knew I was close again, when I felt that finger move back and press lightly against my rosebud. I cried out as it slid in, her thumb mirroring the motion in my vagina. I came apart as my orgasm swept through me. \n\nI could feel her digits moving inside of me, caressing each other through the sensitive tissue between them, while her talented mouth drew out every possible ounce of pleasure from my clit. I began to recover, Iryna's fingers continuing to move ever so gently, her tongue caressing under my nub. I took some deep, ragged breaths, and then it happened again.\n\nIryna rode that next orgasm as she had the others, and when I came down I was literally seeing stars as my heart desperately raced to provide blood to my over whelmed body. I held my arms out feebly, and Iryna climbed back up the bed, where I held and kissed her, unable to speak. She pulled away slightly and I looked deeply into those incredible crystalline eyes, stroking the side of her face.\n\n\"Oh, that was incredible, wow.\"\n\n\"Moya Lyuba, why did you not tell me you liked having your bottom touched?\"\n\nI shook my head. \"I...I didn't know. No one ... oh God. I'm shaking.\" I laughed weakly, pulling Iryna to me. \"There's only one thing I don't like about this.\"\n\n\"And that is what?\"\n\nI unhooked Iryna's bra as I held her. \"You're wearing too many clothes.\"\n\nShe laughed and we had a small battle to see who got to take off her jeans and panties. I reckon we both won. I feasted on her for almost an hour, always seeking that next moment when she would shudder underneath me and flood my tongue with her incredible flavor. Finally I crawled back into her embrace, kissing her tenderly and just lying in her arms, my back to her as she ran her fingers through my hair. Soon we climbed under the sheets, finding the same position.\n\n\"Here is what I have missed. Every night I am imagining this, my Carrie in my arms, warm against my body. I will sleep well tonight.\" \n\nMy heart swelled with love as I pulled her around me. \"Are you nervous about tomorrow?\" \n\n\"No, if you are with me.\"\n\n\"Always.\" I closed my eyes and slipped away into dreamland.\n\nI woke in the same manner, still spooned against Iryna, her arms warm around me. I looked over at the clock. \"Oh, crap!\" It was quarter till eight, and I was supposed to be on the court in just over two hours.\n\nIryna stirred. \"What is it?\"\n\n\"I'm late!\" I ran out to the foyer stark naked to get my bag, By the time I got back Iryna was sitting up, leaning against the headboard, her breasts gloriously exposed. \n\n\"We could shower together, to save time.\" The wicked smile on her face told me that was not going to work. \n\nI tossed my bag on the bed and climbed up on all fours, letting my breasts sway beneath me. I saw Iryna's pupils dilate as I did it. \"Honey, that would not save time, and you know it.\" I gave her a quick peck and jumped away, grabbing my toiletries and rushing off into the shower. \n\nEven without Iryna distracting me that shower is bliss, and it took me awhile to break free from its spell. When I did, I saw Iryna had been watching me, and I wasn't allowed to leave the little alcove without a deep kiss. Oh, darn.\n\nI pulled my red shorts out of my bag and my Georgia tank top and dressed. I was wearing much more sensible underwear of course. Normally I spent at least some time on Friday night or Saturday morning mentally preparing for the match, thinking about my opponent and visualizing success, and not doing that made me feel woefully unprepared. \n\nMartin was waiting for us when I was ready, but I was still really late arriving at the club. With no time really to warm up, I made the court only a few minutes before the start of the match, and my legs still felt like jelly from last night. When I got there Iryna was sitting in the stands, again surrounded by a crowd of admirers. I greeted my opponent, I'd played her a few times before and won easily, so I was hoping that I could pull through on talent. \n\nInstead I got my clock cleaned. I was slow, my serve was terrible, and I was missing shots left and right. When we'd shaken hands at the net after the match she'd asked me if everything was OK. All I could say was that I'd had a rough night. I couldn't even look at Iryna. I'd never been so embarrassed in my life. I almost ran back to the locker room, taking time to just sit on the bench in front of my locker. Last night had been so wonderful, and now I felt like shit. I ignored the rest of the women, staring ahead blankly until someone sat down next to me. \n\n\"This is my fault, yes?\"\n\nI couldn't speak, so I just shook my head no. \n\nIryna put her arm around me. \"I am sorry.\"\n\n\"I'm sorry you had to watch that.\" I leaned against her shoulder. \n\n\"I got to watch you run around in your little shorts, so it is not all bad.\" I smiled weakly and dropped my head again. Iryna put her hand on my knee. \"Carrie, I do not like you because of how well you play tennis.\"\n\n\"Thank you.\"\n\n\"Now, we should go. I am anxious to meet your friends.\"\n\nMartin took us to my apartment, where we loaded our bags into my Civic. It's amazing how a little thing can make you question everything. My failure on the court had made me wonder about being near Iryna. Despite the lovely things she'd said, and had continued to say during our trip over, I was stilling feeling unworthy, a feeling that was only exacerbated by her being in my unimpressive car outside my lackluster apartment. \n\nThe beautiful home she was renting, fancy limos and nice restaurants, Iryna belonged in such things. My silver Honda? Not so much. What the hell was I doing? Who was I kidding? She was going to dump me and find someone more...better. More glamorous, more beautiful and refined, and now I was on my way to make a complete fool of myself in front of my friends. \n\nI was sullenly staring ahead, not speaking, just trying to push those thoughts to the back of my head when I felt a hand slide over my arm and into mine. She gave me a gentle squeeze and flashed me that brilliant smile, the one that made my stomach flutter. God, it felt so good being near her. \n\nSuddenly she breathed in quickly, her face lighting up. She pointed out the window. \"Carrie, what is that place?\" \n\nI could see a yellow and brown sign in the distance. \"You mean Cracker Barrel?\" \n\n\"Yes, I see them everywhere in the US. It is a store?\"\n\nI laughed. It felt good. \"Sort of, it's a restaurant, too.\"\n\n\"Really?\"\n\n\"Sure. You've never been to Cracker Barrel?\" She shook her head. \"You'd like it, it's very American.\"\n\nShe clapped her hands together. \"Can we stop?\"\n\nI chuckled at her enthusiasm. \"Sure, I guess.\"\n\nWe pulled into the parking lot and walked up to entrance, Iryna immediately jumping into one of the rocking chairs on the porch. Soon we were inside, and Iryna was like a kid in a candy store. Granted, Cracker Barrel is kind of a candy store already, but you know what I mean. She grabbed my arm and pulled me around the displays. \n\nIt was adorable, watching the wonder on her face. She put on a hat, one of those big floppy ones ladies wear in the garden, while holding up a old fashioned flower dress and twirling around. \n\nShe spent fifteen gleeful minutes looking through the old toys. I felt my bad day starting to slip away as I watched her. She held up a Raggedy Ann doll \"This is so cute!\"\n\nA real smile finally spread over my face, banishing the last of my gloom. \"Oh, I had one of those.\"\n\n\"Really?\"\n\n\"Uh-Huh.\" I reached out and touched the doll's red hair. \"She was my first tennis opponent.\"\n\nIryna laughed. Oh God, I loved that sound. She held Ann out and I took her, holding her tight to me. I felt my eyes burn with tears, but I didn't cry. At least, not until Iryna pulled me into a hug. \"My beautiful Carrie.\" Finally, she was just my lover again. I tilted my head back, smiling up at her, and she kissed me soundly. I heard an old woman make a scandalized noise, but I didn't care at all. \n\nOur name was being called, so we separated. I dropped Iryna's hand as we made our way around the little displays, but she reached over and took mine again. I looked up at her in surprise, but her face was a picture of determination and resolve. I'd seen that look before, on TV during her matches. It generally meant her opponent was in big trouble. \n\nWe walked hand in hand to our table. We probably got looks. I couldn't tell; I was staring at something else. We had lovely lunch, blackened catfish, and each other. \n\nNow let's face it, when it comes to romantic restaurants, Cracker Barrel ranks pretty bloody low on the list. But that time, it was amazing, and we were pathetic, gazing into each other's eyes like teenagers. I remember holding her hand as we tried to solve golf tee puzzle at the table. As we walked back to the car Iryna got a strange look on her face.\n\n\"Oh, I need my bag.\"\n\n\"Ok. Why?\"\n\n\"I will show you.\" \n\nI popped the trunk with my key fob. Iryna rummaged around for a moment before running back into the store. \"Just wait!\" \n\nI got into the car and started it, firing up the AC. It took about ten minutes before Iryna reappeared, holding the Raggedy Ann doll. She'd also changed her shirt. I squinted through the windshield, noticing the red and black, with a large bulldog logo on the front.\n\n\"When did you get that?\"\n\n\"I ordered it, after I agreed to go with you. It is wrong?\"\n\nI chuckled. \"No, it's perfect.\"\n\n\"Good. I want them to like me. Go Bulldogs.\" She said the last line in a high-pitched voice, punching Raggedy Ann's cloth hand in the air. \n\nMy laugh was real, the first since my match. \"Get in the car, you silly goose.\" \n\nIryna flashed me that million-watt smile and jumped in the car. As I pulled away, we looked at each other, and she took my hand. Down the road we went, my classic rock playlist jamming through the radio. We sang along, and I was duly impressed with my lover's knowledge of the lyrics. Who knew CCR was universal?\n\nIt was a wonderful two hours, everything else in the world just faded away, and we were just a couple on a road trip. I hadn't noticed the bag of old fashioned goodies Iryna had smuggled into the car, which we turned into a lovely sugar rush. Usually the drive to Tampa is a monotony of billboards and boredom. But put someone you enjoy spending time with in the front seat, totally different story\n\nI'd pre-written a text, which I sent at the first red light after getting off the interstate.\n\nMe - Five Minutes away. Remember, please don't freak out.\n\nCindy - I'm severely curious. CU soon.\n\nBy the time we pulled into their neighborhood, Iryna was gripping my hand a little tighter.\n\n\"Are you OK?\"\n\nIryna nodded. \"Yes. Maybe. I am nervous.\"\n\n\"You can trust them, I promise.\"\n\n\"It is not that.\" Iryna blushed and looked down. \"I ... I want them to like me.\" \n\nI almost reminded her that she was an international tennis star, and they were going to fawn over her. But that wasn't the issue. I remember her telling me that last Saturday she had a lot of friends, but I found myself wondering if that were really true. Acquaintances, sure. People to hang out with. \n\nI mean, she was Iryna Baraskova, I bet everyone wanted a piece of her. I realized at that moment I didn't want a piece; I wanted everything. And she wanted to give it. I didn't know if it would be me, but she needed friends, people who wouldn't see her as a meal ticket or status symbol, but just as that girl from Kiev.\n\nWe pulled into the driveway of a little Spanish-tiled bungalow with tan stucco walls. I could see Cindy's face peeking through the front window. She grinned and waved, and I did as well. She couldn't see my passenger from her vantage point, although I'm pretty sure she was trying. \n\nAs I got out a felt my own pulse rising. I went around to the other side. Iryna's knee was going to be stiff from two hours of sitting, and she might need some help out of my little car.\n\nI opened the door and held out my hand. She grunted as she moved her leg, but she stood. \"We'll get the bags later.\" Iryna nodded and we made our way up the walk to the front.\n\nThe door opened, and Cindy held out her arms with a huge smile. I embraced her. \"Hey, sweetie.\" I pulled back, and Cindy's eyes moved to my companion.\n\n\"Hi.\" Her light green eyes unfocused for a moment. \"You know, you look a lot like...\"\n\n\"Cindy, this is Iryna.\" Cindy's jaw hung open for a moment, so I continued. \"Iryna, this is my good friend Cindy Sp... er... Kirkpatrick.\" I blushed. \"Sorry still working on the whole name change thing. \" \n\n\"Uh-huh.\" Cindy was still staring. \n\n\"It is nice to meet you, Cindy. Oh! I forgot the gift!\" Iryna sort of limp-ran back toward the car. I popped the trunk, and she dug around in her bag. She brought back a bottle of wine and held it out. \"Thank you for having us.\" \n\nCindy looked down at the bottle, which seemed to break the stupid spell she was under. \"Ah...Thank you. It's nice to meet you. Please come in.\" \n\nShe stood aside and Iryna walked past her. Cindy shot me a wide-eyed 'What the hell?' look as I followed her inside. I stared back and dropped my voice to a low, power whisper. \"Remember, don't freak out.\" Cindy jerkily nodded her assent as we entered the living room.\n\nI heard a sound from the kitchen, and Mitch came around with a steaming platter. \n\n\"Teriyaki chicken wings, and we are officially ready to kick some Vol ass.\" She set it down on the coffee table among the chips and veggies with dip and turned to Iryna, extending her hand. \"Hi, I'm Michelle, but everybody calls me Mitch\"\n\n\"Iryna. Nice to meet you.\" \n\n\"Iryna, I like that name. And cool accent. Where're you from?\"\n\n\"Ukraine. Kiev, exactly\"\n\n\"Wow, long way from home. And holy crap, you're tall. How tall are you?\"\n\n\"Six one or two, depending on my shoes.\"\n\nCindy was staring in horror at her wife, but I just laughed. This was prototypical Mitch. Totally out there, completely without boundaries, and relentlessly friendly, she was a force of nature, and I loved her for it. The twinkle in Iryna's eye told me she was enjoying it, too. \n\n\"I like your shirt. Did Carrie make you wear that?\"",
        "Iryna laughed. \"No, I ordered it as a surprise. She speaks very fondly of her time there. It seems to be a special place. I am proud to support it.\" \n\n\"Carrie, I like her.\" Mitch moved back toward the kitchen. \"Iryna, you want a beer?\"\n\nIryna bargained down to a Diet Coke, and Mitch tossed her one from the kitchen, which Iryna caught easily. \"What do you do for a living, Iryna?\" \n\nCindy blushed furiously. \"Mitch, Honey!\"\n\n\"What?\" Cindy's incredulous look didn't sway her. \"I'm just curious.\" \n\n\"Sweetheart, that's...\" \n\nI cut in. Couldn't help myself. \"No, no, let's see how long it takes her.\"\n\nIryna smirked at me before answering. \"I'm a professional tennis player.\"\n\n\"Really? Wow. Ukraine's a great tennis country. You have a couple of women in the Top Ten right now, don't you?\"\n\n\"We do.\" Iryna took a sip of soda. \"Elina Svitolina and myself.\"\n\n\"Yeah, and, yourself. Iryna Baraskova. On my couch. Holy shit.\" All the color drained out of Mitch's face, contrasting hysterically with her jet-black hair \n\n\"I did try to tell you, Michelle, darling.\"\n\n\"Yes, you did. I'm just going to shut up now. Carrie, you want a drink? Honey?\" \n\nCindy and I put in our orders and I sat down on the couch next to Iryna, who casually put her arm around me while I placed a hand on her knee. The pregame show on my friends' flat screen was totally forgotten. \n\nCindy sat on my other side facing us while her wife handed her a light beer and my Sprite, before taking her own spot in her recliner. \n\nCindy passed me the soft drink. \"Ok, so we're going to lose Mitch as soon as the game starts, so couple questions.\" Cindy's mouth hung open for a second as she tried to decide how to start. \"How did this happen?\"\n\n\"Iryna walked naked into my room at work. What was I supposed to do?\" \n\n\"You are terrible, moya lyuba. She gave a massage. I have my rehab at her work. When she saw me she dropped her board. It was adorable.\"\n\n\"Uh-huh. Then she shows up unannounced to my match last Saturday at my little club, terrifying the locals.\"\n\nIryna ran her fingers through my hair. \"She was so beautiful, and funny, and sweet. I could not think of anything else all week. I had to do something to spend time with her.\"\n\n\"So you've only known each other for a week?\" \n\nGod, had it only been a week? It felt longer. I nodded sheepishly. \"I guess so.\" I could sense the protectiveness spike in my friends, and I think Iryna felt it as well. \n\n\"It is quick, for me also. But I promise you, I have never felt so excited about someone so soon. Carrie asked me this, did I, what is it? Meet a lot of women? I date rarely. It is dangerous; people do not know I am a lesbian. I could lose sponsors; it could hurt my family. But when I am with her, I do not care about these things. I care only about her.\" Her hand was gently stroking my arm while she spoke, and I turned my head, eyes watering, and kissed her.\n\nI looked back over at Cindy. \"I'm keeping her, I don't care what you say.\" \n\nCindy smiled and shook her head. \"Girl, welcome to the team.\"\n\n\"Thanks. You understand this has stay between us right now.\"\n\nMitch barked a laugh. \"Sure. Who the hell'd believe me anyway?\"\n\nThe national anthem was playing on the TV, and soon the game kicked off, and as predicted, Mitch only had eyes for her Dawgs. Iryna may not understand American football, but she understood sport, and she was a quick study. She asked intelligent questions, and Mitch was more than happy to fill her in. \n\nIf you're not from here, college football is every bit as serious as religion in the South, and Mitch was one of its chief evangelists. She'd found a willing proselyte in Iryna, who seemed really to be enjoying herself by the end.\n\nLuckily Georgia won big, as Tennessee was having a really down year and my Bulldogs were competing for a national championship. That meant everyone was in a good mood as evening fell. The chicken wings had been annihilated and we'd put a major dent into the veggie tray and other snacks, so no one was terribly hungry.\n\nIryna stretched and leaned back. \"What do you usually do after the game?\" \n\nMitch took a swig of her beer. \"Sometimes we go out to dinner, or to a club. What do you think, honey?\" \n\n\"I'd rather just hang out, get to know Iryna some.\"\n\n\"I'm OK with that.\"\n\nI leaned back into Iryna. \"Me too. Besides, I got my ass kicked this morning. Need the rest.\" \n\nCindy gave me a sympathetic look. \"Was it that one girl?\"\n\n\"Camille? No, it was someone I've beaten before. It was Iryna's fault. She kept me up last night.\"\n\nIryna dug her hand into my side, and I squealed and tried unsuccessfully to pull away. \"It was my fault?\"\n\n\"No, no, OK, ha ha, please stop.\" I writhed in her arms as she tickled me, finally doing the only thing I thought could distract her, kissing her deeply. It worked, and I lost myself for a moment before remembering where I was. When we broke apart I turned to my friends, my face burning crimson.\n\nMitch casually took a pull from her beer. \"Please, don't stop on our account.\" Cindy was shaking with silent laughter.\n\n\"Ok, that's enough of a show for you two. Pizza?\"\n\nPies were ordered and we spent the intervening time just talking, telling our stories from college, which will NOT be put into print here. Iryna was fascinated with the college experience, but I knew she had deeper questions. Finally, after the food had arrived and she'd had a beer, she found the courage to ask them.\n\n\"So how did you meet? You knew right away?\"\n\nMitch and Cindy looked at each other; that little glance that only people deeply and committedly in love can share.\n\nMitch reached out and took her wife's hand. \"I knew. She was captivating.\" \n\n\"You're so full of shit.\" Cindy laughed. \"You thought I was, how'd you put it? A stuck up, uptight, prom queen bitch.\" \n\n\"Maybe, but a beautiful stuck up, uptight, prom queen bitch.\"\n\n\"Gee, thanks.\"\n\n\"Well, you were always strutting around with that GQ boyfriend of yours. I really hated him. That's something.\"\n\nCindy sighed and turned back to Iryna. \"Anyway, our coach paired us together for doubles. I was not happy. I mean, she was arrogant, brash...\"\n\n\"A full on dyke.\"\n\nCindy smiled at her wife. \"Yes, that too. So we worked together, and took me a while to admit it, but she made me a better player. I know this'll come as a complete to surprise to everyone, but I tend to over think things\". Mitch and I both laughed.  \n\n\"Mitch didn't think at all. She, just, um, lived every point. I had to play with more passion not to just get swallowed up.\"\n\nMitch's eyes softened. \"And she made me play tennis, instead of just hitting the ball. It took me about a month to admit it, but we were a perfect team. By the end of the season I'd fallen hard. But she was straight.\"\n\nIryna's eyes widened. \"So you did not like girls?\"\n\nCindy shook her head. \"I didn't think so. I'd had boyfriends all through high school and even one in college. I'd had sex, and I liked it fine. I figured I was pretty normal. \n\nI knew I hadn't ever been in love, but I hoped that would come. But she was becoming my best friend. Mr. GQ dumped me because I wasn't spending any time with him and I really didn't care.\" Cindy giggled. \"And then you took me out to commiserate. We went to a party where we danced.\"\n\nMItch nodded and looked at her wife. \"Yeah. We were just goofing around, I wasn't letting myself touch you. You were breathtaking, and I was trying to be a friend. And then the DJ put on something slow, and I figured we'd go sit down, so I started to move away, and she looks at me and says 'Don't wanna stop yet.' She wraps her arms around my waist and lays her head on my shoulder. I remember my brain just fuzzing out. I put my arms around her and we rocked together through that song and the next. By the end of that I was done, absolutely and fully in love. And then we slept together.\"\n\nCindy spluttered for a second. \"We, well, uh, OK, we slept in your bed. We did not have sex.\"\n\n\"I stand by my phrase.\"\n\nCindy breathed out in exasperation. \"I'd had too much to drink. I remember her undressing me, which I loved, and her making me put on a T-shirt, which I hated. We climbed into her twin bed and I kissed her, but she wouldn't take advantage. I remember waking up in her arms, feeling relentlessly happy. So I did what any level headed young girl would do when she finds out she has new and unusual feelings for her lesbian best friend. I grabbed my clothes and ran like hell.\"\n\n\"She didn't talk to me for a week.\"\n\n\"I was terrified. I knew what it would mean. But, hey, it's college, maybe it's just a phase. I just needed to get it out of my system, right? So, I called her. It took a summer and a few months back at school sophomore year, but eventually I sorted it out. It didn't take long after that for me to realize it wasn't a phase. She is who I am supposed to be with.\" The pair were looking at each other now, and the feelings were obvious.\n\nI looked up at Iryna, who had a tear in her eye. \"And your families supported you?\" \n\nCindy's face darkened some. \"Not mine. I hid it all through college. I finally had to come out after graduation, I couldn't take it anymore.\" Mitch stood up and went to put her arms around her wife. \"My father told me I was going to hell, and that I wasn't welcome in their home until I repented. My mom just cried. I wasn't allowed to see my little sister, and she was only thirteen at the time. I have an older brother too, he was the only one who was supportive. He gave me away at our wedding, and even that caused strain between him and my dad.\"\n\nA tear rolled down her cheek and she hugged Mitch close. \"But her family's been great.\"\n\n\"Yeah, I'd been out since I was thirteen. I'm an only child, my mom almost died having me. So they didn't really complain, even if I was a total butch. My mom was a little sad not to have someone who loved to shop for clothes or put on makeup, but we found our common ground. And now she has a daughter who does love to do those things. They think Cindy hung the moon.\"\n\n\"It's why I was happy to take your name. I feel like I really do have a family.\"\n\n\"My dad almost cried when you told him you were doing that. I think a silly macho part of him felt like a failure in not having had a son to carry on the family name.\"\n\n\"Oh! Wedding pictures!\" Whatever melancholy Cindy had been feeling had passed and she jumped off the couch to grab their album, a beautiful dark blue book with two overlapping hands on the cover, each wearing rings, and embossed lettering. Michelle & Cindy, April 8th, 2017. \n\nCindy wormed her way in between Iryna and me, and they began thumbing through the album while Mitch sat on the armrest on the other side. I felt a little pushed out, but I'd seen the album, so no biggie.\n\nAs they moved from picture to picture I found myself daydreaming about what telling my parents about Iryna would be like. I didn't think they were homophobes, but it's easy to accept a stranger's differences. It can be another thing entirely when it's your own daughter. \n\nAfter Iryna had had a good laugh at me in that turquoise bridesmaid dress, we spent the rest of the evening chatting and trading stories. Iryna really opened up, and was having a wonderful time. I couldn't stop smiling; just watching her laugh and joke and just be her, the way she was when we were alone. It was after midnight when we made our way to the guestroom. I'd pulled on my long T-shirt and slid in under the covers. Iryna had brought more conservative PJ's, silk tops and bottoms. When she'd climbed in I turned out the light and rolled over to face her.\n\n\"Did you have a good night?\"\n\n\"Yes, moya lyuba. Thank you for this. It was like having real friends.\" \n\n\"You told me you have lots of friends.\"\n\n\"Not like you. Not that I can be me around. Tonight I did not have to hide, or be careful. I could be with you and it was OK. That felt wonderful to hold your hand, to tell someone how special you are to me.\"\n\n\"Even after just a week?\"\n\n\"Only a week? It feels like so much longer.\"\n\nI could feel myself tearing up, so I leaned in and kissed her. She wrapped her arms around me and I snuggled in. Our mouths moved together gently, it was a sweet, adoring kiss, not pushing to anything else, just making love with our mouths and tongues. Eventually I turned in her arms, spooning against her. \n\nThe night was quiet, I could hear Iryna gentle breathing whistling through my hair. I was slipping away when I heard a sound from the other room. I looked back over my shoulder at Iryna, who had a silly smile on her face, her incredible blue eyes looking up at the wall by our head. Then we heard it again. No question, that had been a moan of pleasure. \n\n\"Is that...?\" \n\nIryna just nodded and giggled.\n\n\"I think we got them worked up talking about how they met.\"\n\n\"Well, they know how to relax\"\n\nThe soft sounds were becoming more insistent. I spun so I was facing Iryna. \"You know,\" I brought a finger up and ran it over her ear. \"It would be rude to just listen. We could...\" I kissed her neck, earning a sigh. \"Y'know, join in.\" I began to work her neck in earnest. I was rewarded with a deep-throated growl, and I moved down over her collarbone. \n\nMy hands ran up over her silk pajamas, finding the top button and undoing it. I kissed the creamy skin revealed, feeling the rumble of her sigh beneath my lips. As each button popped open I moved further, licking slowly through the valley created by her firm, tall breasts, down over the soft skin of her stomach. \n\nMy tongue circled her navel as the last fastener gave way, and my arms slid up her torso, caressing her breast, and pushing the top over her shoulders. She lifted herself on her elbows and shrugged the garment off and onto the floor. Her head fell back to the pillow with a cry as my hands found her nipples, pinching and twisting lightly, just the way I knew she loved.\n\nI moved down over her lower abs, hooking my chin on the waistband of her bottoms so I could go even further. As I lifted the material my nose was struck with the smell of her arousal, and my playful teasing became real need. There was something about her scent that reached deep into my brain and flipped a switch, filling me with a hunger I hadn't known I was capable of. \n\nMy hands left her breast and slid down to her PJ bottoms. Iryna lifted her hips and off they went, revealing her beautiful pussy as her legs fell back wide upon the bed. I felt a thrill thrum through me as I shifted my body for a better angle. I could feel the tension and anticipation in my lover, and I made it my personal mission to make Iryna come loud enough that Mitch and Cindy would have no question as to what was going on. \n\nI bent to my work. It was a job I loved, after all. I moved around her pussy, luxuriating in her delectable flavor, the silkiness of her wet skin. I heard her lapse into Ukranian as the bucking of her hips became more insistent. I was good at reading tension levels in people, a pro, you might say, and even after just a few sessions of lovemaking with Iryna I was able to judge her pretty well, easing off as I felt her approaching her tipping point, keeping her moaning and crying out for release. At first she'd tried to stay quiet, but the further along we got the more she became insensate to where she was and upped her volume. Finally, when she was hollering and moaning my name I ran two fingers over her opening for a moment before plunging them inside while bearing down on her clit, driving her miles over the edge. I held on for dear life, riding wave after wave of her pleasure.\n\n\"Oh, moya lyuba, that was, that was ... oh, you are wonderful.\" Still breathing heavily, Iryna pulled me into her arms, and I laid my head on her chest, listening to her racing heartbeat and feeling the warmth of her body.\n\n\"You're so much fun to do that to.\"\n\n\"You truly like it?\" Iryna's eyes dropped shyly.\n\nI pushed away slightly and looked her in her gorgeous eyes. \"Of course I do, sweetheart. I love everything about it.\" I kissed her softly. \"Being close to you, giving you pleasure. The way you smell and taste, how your body moves when I touch you just right.\" I ran my fingers gently through her hair. \"The way you say my name. It's heaven.\" I snuggled back into her chest, and her arms wrapped around me. \"Why? Don't you...\"\n\n\"Of course I do, moya lyuba. But I have known I wanted this since I was very young. For you it is so new.\"\n\n\"It doesn't feel new. It feels like something ... old ... that I just found. But that's always been mine.\" I giggled. \"That doesn't make any sense, does it?\"\n\n\"I think it does.\" Iryna looked over her head at the wall, where the soft moaning had been replaced now with more insistent grunting and gasping, along with a slapping sound if you listened closely. \"They are not done yet.\"\n\n\"I think Mitch got out their toy.\" Iryna looked at me quizzically. \"A strap-on. Ever use one?\"\n\n\"Yes, but I do not think I could now with my knee, until it heals.\" Iryna's voice dropped, like it did when she was nervous. \"You would like this, someday?\"\n\nI'd loved everything we'd done, and I was getting the feeling it was only going to get better. Did I need that? With guys, I'd enjoyed penetration usually, particularly if they'd taken the time to get me ready, which was less often. But really by the time it was really starting to feel good, they'd grunt a few times, make a petition to a deity, and it'd be over. And then there'd be a mess.\n\nBut I knew with Iryna getting me ready wouldn't an issue. There'd be significantly less mess, and she wouldn't stop until I was satisfied. When I thought about that, it sounded wonderful. \"Sure, sweetheart, I think I'd love it.\"\n\n\"Good. But since I cannot yet, we will have to improvise, yes?\" Iryna slid quickly down the bed, hooking my leg with her arm and pulling me around so I was straddling her. Then I squealed as she almost lifted me up by the waist and placed me over her mouth. A shudder passed through my body as I felt her breath on my sex and I grasped the headboard as I lowered my hips down to her waiting mouth.\n\n\"Oh, God!\" Her mouth just enveloped me, her tongue dancing and diving through my folds. I knew that Cindy and Mitch could most likely hear my moans and gasps through the wall, but I didn't care. All I cared about was the tongue massaging my clit, and the finger circling my back door, which was making me crazy. \n\nI was grinding my pussy into Iryna's mouth, feeling that delicious tension building deep in my core. I looked down, where Iryna's crystal blue eyes stared up at me, her nose pressed against my mound, cheeks dimpled from the suction she was applying to my little nub. Oh, it was wonderful. The finger she had rimming me suddenly slipped inside and I went off like a rocket. Every spasm of joy caused me to jerk my hips forward and bang the headboard against the wall. \n\nStill reeling from the aftershocks I slipped back down the length of her body, feeling that desperate desire to be held I always get after sex. Iryna's arms wrapped around me, our legs entwining together.\n\n\"Oh, my Carrie, my beautiful one.\" She continued to whisper sweet words into my ear as I snuggled into her, and I knew, at that moment, resting against her, that for the first time in my life, I was in love. Hopelessly, helplessly in love. It had only been a week, maybe two. But I also knew that she was leaving. It couldn't last past eight. \n\nMy dreams that night were a mess, terrifying and heartbreaking, even though I didn't remember them. But when I woke I was still in Iryna's arms, spooned up against her. I could feel the strength of her, the softness of her breasts against my back, her breath as it tickled my hair. The warmth of her body filled me, chasing away the last of the night's shadows. But nature and the smell of sausage and coffee drifting in from the kitchen eventually got us out of bed.",
        "Cindy was sitting at the counter grinning wickedly over a cup of java. \"Good morning. Sleep well?\" Her voice dripped with innuendo, but that was OK. I could dish it out, too. \n\n\"Eventually, yeah. Someone was making a racket next door.\" \n\n\"Oh yeah, that was us.\" Mitch raised a spatula over her head in triumph before going back to the sausages in her pan. I broke out in laughter, especially watching Cindy turn red. \n\n\"So, breakfast?\" I sat down while Iryna went to the coffee pot. Just then the waffle iron chirped, and Mitch pulled out a golden brown piece of deliciousness before pouring on some more batter. \n\n\"Why's everybody embarrassed? So I made my wife's head spin last night. It's what I do.\" Mitch turned to Iryna while pointing toward me with the spatula. \"So how'd the newbie do?\"\n\nCindy and I shouted her name at the same time, but Iryna just laughed as she finished pouring two cups of coffee. \"She did very well.\" She added a scoop of sugar to one and stirred while handing it to me. \"She always does.\" I stared down at the swirling black liquid, hiding my own blush. Iryna sat next to me and kissed me on the cheek.\n\n\"That's good. Always tell my girls they have to represent.\"\n\n\"You have children?\"\n\nCindy laughed. \"No, she's a teacher and assistant tennis coach at the High School.\"\n\n\"Really, you teach?\"\n\nMitch pulled another waffle off and plated it, sliding it in front of Iryna. \"Yep. PE. No classrooms for me. My goal is to be the biggest lesbian clich\u00e9 in Florida. You should see my closet. Wall to wall flannel.\" \n\n\"Honey that isn't true.\"\n\nI raised my cup. \"That's right, she owns hoodies and white button down shirts, too.\"\n\nEveryone laughed. The waffles, made from scratch, were amazing, served with a local peach butter.\n\n\"You are the cook in the family then, yes?\" \n\nMitch swallowed a bite of her sausage. \"Cindy helps, but yeah. My mom taught me.\"\n\n\"I learned from my mother as well.\"\n\nI squeezed Iryna's knee. \"Uh-huh, Iryna made a Ukrainian feast for me on Friday. It was something else. So good.\"\n\nMitch nodded. \"Yeah, I think I was eleven the last time I let my parents put me in a dress. After I told them I didn't like any of that stuff mom was pretty disappointed. There was some real distance between us. I avoided her because she wanted me to do that stuff, and it kinda made me feel guilty about not being girly, y'know? I don't think she was trying to, but... Anyway, I remember my dad pulling me aside about it. Asked me to find some common ground with her, to give her her daughter back, y'know? So I let her teach me to cook. And I enjoyed it.\" \n\nCindy smiled. \"Yeah, the holiday dinners those two can turn out'll make you cry. I just show up and eat. It's awesome.\"\n\n\"This is women's work, like in Ukraine?\"\n\nI shook my head. \"Not necessarily. My dad's the cook in my family. He calls it his creative outlet. You'll have to come to Thanksgiving dinner. You'll see.\"\n\n\"Thanksgiving. This is in November, yes? I will not be able to, moya lyuba. I must be in Europe then.\" Her voice softened with regret, but the words stabbed me through anyway. \"But maybe someday, I hope.\" I smiled. It was all I could do.\n\nThe rest of Sunday passed. We stayed through the Buccaneers game. Mitch was a fan, although not quite at the intensity of Georgia football. She and Iryna really did enjoyed themselves, with my love being given a lesson on the differences between college and pro ball. On the drive back Iryna fell asleep in the front seat. It'd been a wonderful two days, but as I watched her rest, all of my insecurities seemed to rear their ugly heads. Part of it was me PMS'ing, since I was due on tomorrow. But I was also hyper aware of the expiration date on our relationship. Last night's realization of how I felt just poured salt in the wound. Six weeks left. Should I end this, before it got worse? Did I even have the strength to do that? \n\nIryna shifted in her seat, and reached out and took my hand. No. Six weeks was a long time, and I hadn't been kidding last weekend. I'd take what time I could get. After all, a month and a half is a long time. Who knows what could happen?"
    ],
    "authorname": "JCMcNeilly",
    "tags": [
        "romance",
        "lesbian",
        "lesbian sex",
        "romantic"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/the-tennis-star-ch-02"
}
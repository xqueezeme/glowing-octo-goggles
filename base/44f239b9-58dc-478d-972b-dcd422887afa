{
    "title": "Blue Topaz Eyes Ch. 02",
    "pages": [
        "Blue Topaz Eyes CH 2 Blue Glacier Eyes\n\nComment: This will make a great deal more sense if you read Blue Topaz Eyes first, although I suppose it could stand on its own. I never actually intended to write this, but the comments from the original pushed me in this direction. This is Emma's story \u2013 and it was her story all along, as I was writing the first.\n\n\n\nShe had the coldest blue eyes I'd ever seen. \n\nAlmost clear, the color of the frozen heart of a glacier.\n\nThey were flashing in quiet fury as she attacked. I could feel ice crystals on my heart as her voice cut and sliced with a surgeon's certainty. There was no trace of love or human affection in that voice.\n\nShe couldn't even see me as I stood back in the darkened hall. Not that she ever really did. I was practically invisible to her even at the best of times. And I was so rarely home from boarding school, or from 'vacations' \u2013 really forced networking visits with the other thoroughbred offspring \u2013 that I honestly wasn't sure she would recognize me on sight if we ran into each other on the street. Not that she'd ever deign to be simply walking down the street.\n\nHer victim stood stolidly, as if the words she spat were utterly meaninglessness, despite their gravity. He would never touch her again. There would be no other children. There would be no spare to the heir. No spare to me. I was doomed to be The Reinhardt.\n\nFather blinked his expressionless eyes once, the only movement in his carved \u2013 stone face. \"Fine. She'll do.\"\n\nThat was as close to emotion as I'd ever seen from Father. Practically an outburst of rage and fury for him.\n\nAnd that was what was expected of me.\n\nI'd been raised the scion of the greatest financial merger ever conducted. The Reinhardt had married the Shining Daughter of New York. \n\nThe Reinhardt. It sounded positively medieval. And it was. The head of the Reinhardt merchant family was never referred to by his first name. Just as Das Reinhardt. And that tradition had held even as the merchants became bankers who became venture capitalists. That merchant house had turned into a domain so large that nobody was certain where \u2013 or even if \u2013 it ended. \n\nI'd been raised from birth to be at the helm of this vast enterprise. Private schools, tutors, the elite boarding schools of Europe. Mathematics, Economics, and Statistics were hammered into me as soon as I could read the words. \n\nTae Kwon Do had started at 5 years old. To teach me self-discipline, reflex thinking and prepare me the less obvious, but equally brutal fights of the financial world. \n\nFrom the beginning, my life and my classroom instruction was designed to prepare me to become a corporate lawyer. In this world, financiers and economists could be bought by the handful. \n\nLawyers were problematic, like Machiavelli's mercenaries: a bad one could ruin you and a good one could prove too ambitious. But they were necessary, so The Reinhardt Apparent would train in law. To watch over the lawyers.\n\nSo my future was mapped out practically from birth. \n\nAnd I hated it. \n\nI had no idea what I wanted, but it wasn't this.\n\nA life of nearly absolute privilege and power. A life with no meaning at all.\n\nRaised by servants who changed out constantly. Ignored by Mother. Who became Evelyn to me when I inadvertently learned what a mother was supposed to be like. She'd never earned that title. \n\nI almost never saw Father; The Reinhardt was far too busy to bother with his only offspring. I suspected that he really wanted a son, but when he gave Evelyn a disease contracted from one of his many 'assistants' that possibility ended. She hardly cared about the affairs; after all, she had her yoga instructor and masseuse. It was his carelessness that turned her indifference to active disgust. \n\nAnd I'd seen the corrosive influence of money at that level. It ruined everything. Everyone. Trust was impossible. Love even less so. \n\nSo at thirteen, standing in the teak paneled hall outside the study, I learned that my dream of possibly escaping my fate was shattered.\n\nOh, I rebelled in small ways. I eventually managed to lose my virginity to a Norwegian ski instructor. And found a birth control pill pack on my bathroom sink the next day. I couldn't find the instructor again.\n\nEvery small rebellion was neatly countered, or ignored. Prep school led to college, which led to the elite law school. My future loomed like an iceberg.\n\nEvery bit as scheduled by Them.\n\nI did well \u2013 I was The Reinhardt-to-be. My early schooling and discipline paid off as expected. \n\nI studied hard. Research, Logic, Law. Top of my class in all of it. Of course.\n\nBut I kept fighting it. Secretly looking for a way out.\n\nI'd almost caved during Law school. I'd met a guy; he was funny, clever, smart, and managed to push all my buttons just so. I confided in him about my distaste for the life I was headed into. He listened to me and seemed to be completely understanding. He pondered whether I would be able to make that life into something I would love, despite everything. And he sounded so damn reasonable and clever. And he turned out to be working for The Reinhardt. I never did find out if they sent him or simply turned him after we became involved.\n\nThat was when I realized that I could never trust anyone. Anyone might be working for Them, and even if they started out with the best of intentions, eventually, the money would corrode their souls, just as it did everyone. \n\nSo I kept sharpening my skills and working to be the best. \n\nI turned out to be best of all at acting. Pretending to give in. I played along, looking for an escape route somewhere to take shelter, somewhere their money wouldn't have power. \n\nWhen I graduated Law school, I told Them that I needed to pass the Bar in New York, where the world of finance was centered, and then I would need several months, maybe a year and a half, to prepare to step up to the position they were holding for me. As expected, I passed the bar on my first try. They were in no hurry and suspected nothing.\n\nI moved into an apartment and practiced not having money. And promptly learned I didn't know anything about living unsupported. I ruined half my clothes figuring out how to do laundry. And cooking? I lost 10 pounds in the first month. \n\nAnd in that first month I decided I needed to do something to fill my days while I looked for my escape. A flyer in the lobby caught my eye. LPN Classes.\n\nAnd like everything else, I was damn good at it. It was a great way to learn about normal people. And learn to be normal. More than anything, I found I enjoyed it. I was finishing up my last practicals \u2013 like mini internships in different hospitals - when I found my escape. \n\nA shootout downtown had netted two killed and three wounded. Most were gang members, but one of the wounded was an FBI Special Agent. Brought to our hospital.\n\nTo badly paraphrase Hans Gruber; I was looking for a miracle and found the FBI.\n\nThe almost incorruptible FBI.\n\nI submitted an application immediately. And waited patiently for it to process. I never seriously considered they might reject me. I'd never failed at anything. And I drove myself relentlessly to be ready for the fitness tests, took lessons at gun ranges with every conceivable type of firearm. One of the instructors I hired with The Reinhardt's money was retired from the FBI, another was former Delta Force.\n\nBy the time my Academy class rolled around, I was as ready as humanly possible.\n\nThe other students were typical over achievers, full of attitude and drive. The top of their classes; the football stars and volleyball players, the cheerleaders and a few from the chess club. But they weren't thoroughbreds and we didn't mesh smoothly at first.\n\nI tried, I honestly tried to fit in, be one of the pack. It went wrong on the third day. I don't know if it was something I did or said wrong, but someone learned something. I heard whispers of \"Rich Bitch\" and found myself isolated. Maybe they thought I'd get lonely and drop out.\n\nFuck them. They had no idea what loneliness was. I'd grown up lonelier than they could dream. That isolation lasted for weeks.\n\nTheir attitude changed after our first sparring match in our fourth week. The instructor had watched us closely. He recognized my style. And my ability.\n\nI stand 5''3\" if I stretch up a little. So when we matched up, he put me against the biggest, strongest guy in the class. And winked at me.\n\nThat match lasted 23 seconds. My second match was almost a full minute.\n\nBy the next day my nickname had changed from Rich Bitch to Danger Mouse. \n\nAnd I got grudging respect. I was included, if not loved.\n\nIt was the warmest feeling I'd ever had. Six weeks of being part of a team.\n\nAt graduation, I discovered my deception had failed. A hand carved rose wood box was delivered to my room. With a bottle of 1928 Krug Champagne. That had to be Evelyn, for appearances sake, of course.\n\nThe Reinhardt had never given a gift in his life.\n\nI went home to face the music before taking my place in California.\n\nIt was not a pleasant meeting. The Reinhardt was silently furious, Evelyn coldly so. And I had a $20,000 hangover and an empty bottle in my luggage.\n\nSuffice to say, by the end of the 15 minute discussion, I was disowned. \n\nI wordlessly left the study, rounded up my unpacked luggage, and walked out.\n\nWhatever fantasies I had about being a Special Agent evaporated quickly. At first, it was endless rounds of paperwork and meetings. But it was somehow more real that way. I was good at paperwork, planning, putting the pieces together.\n\nIt was several months before I was included in any real operations beyond the usual low level cases entrusted to junior agents. And it was entirely because of blind luck and my own awful cooking.\n\nI was passed a message that one of the principles in one of my cases was being picked up. I was passed a time and an address and I headed out.\n\nFunny thing about case numbers. Get one digit wrong and everything cascades from there. Wrong agents get sent to the wrong places.\n\nSo when I showed up and found the Hostage Rescue Team command van sitting silently at the edge of a neighborhood I knew wasn't right for the harmless embezzler I was building a case against, I put on my apologetic junior agent face and went to give them the bad news. The wrong agent had been sent.\n\nThe inside of the van was electric; cold faced agents in armor looking at floor schematics and heatedly discussing plans, back up plans and back up plans to those plans. The whole scene put me in mind of wolves preparing for the kill.\n\nI spent a lot of my evenings watching Discovery Channel.\n\nI looked around for anyone at all I recognized. Nobody. I waited quietly, expecting some to ask me what I was doing, then I'd give them the bad news.\n\nFinally, the bald guy who seemed to be the hub of the activity zeroed in on me with no warning.\n\n\"Who the Holy Fuck are you?\"\n\nI tried to explain, but he cut me off with a furious exasperation. \n\n\"Sweet Jesus save me. Does your momma know you're here? And does she know you had to cross the street to get here?\"\n\nAmusement raced through the room. But I noticed one older agent with a steel grey crew cut sitting laconically on a map table looking at me expectantly. Probably waiting for me to cry.\n\nThe Reinhardt in me surged. \"Yes Asshole, she sent me to drag you back to the nursing home for your Geritol and your nightly enema.\"\n\nThe bald man turned into a red beacon of anger. But before he could say anything, the grey crew cut spoke.\n\n\"Dave, wait.\"\n\n\"Dave\" turned and looked at him.\n\n\"Mike?\"\n\nCrewcut looked at me \"Turn around\"\n\nSomething in his voice convinced me to do it without asking why.\n\n\"What do you weigh?\"\n\n\"115\"\n\n\"Maybe on a good day. Your clothes are loose, I bet you're around a buck five right now.\"\n\nThat was probably true. My cooking hadn't improved much. I was eating a lot of salads. Mostly because I either undercooked or carbonized everything else.\n\nI nodded.\n\nHe eyed me critically. \"She'd fit through the window with that skinny ass. We could go for the dream option.\"\n\nWhatever the dream option was, Dave was hesitant. \n\n\"She's not HRT, if this goes wrong we'll be grabbing our ankles for the Director.\"\n\nMike smiled, a grim smile. \"Nothing will go wrong. This is Danger Mouse. Jorge at the Academy told me about her, economy size kick ass in a fun size package.\" \n\nTo me \"Aren't you?\"\n\nI straightened up. Whatever this was I wasn't going to miss it. \"That's me.\"\n\nNobody was willing to argue with Mike.\n\nThe target was a known pedophile who was believed to have kidnapped a two year old from a park in in a nearby town. He'd been communicating across the internet with another man \u2013 in Britain somewhere - and telling him how he had her in his basement. And he'd said outright that before anyone could have her back, he'd kill her.\n\nThe only possible outside access to the basement was a tiny window that used to be a coal shoot.\n\nThe dream option was to have an agent in the basement to protect the little girl when the HRT came in the front door. But the window was far too small for any of the door kickers. Too small for most adults.\n\nExcept maybe an underfed Danger Mouse.\n\nI soon found myself squeezing through the tiny opening. And dropping into the pitch black of the basement with a tiny flashlight and a compact .45 that Mike insisted I swap out for the Bureau standard .40 caliber.\n\nMike was certain the Bureau standard wasn't powerful enough to absolutely ensure a first shot kill.\n\nSo armed, I searched the darkness. \n\nIt smelled of mildew, damp rock and dust. Even with the flashlight, the dark pushed in like a black velvet blindfold.\n\nI found her huddled under a blanket in the corner across from the stairs. I reached for her, to tell her I was here, to whisper that she was safe. I gently rolled her to face me, holding the flashlight just so.\n\nShe had the coldest blue eyes I'd ever seen.\n\nClouded over, pale, almost white. Unblinking, unseeing. Like ceramic. Fine blue porcelain.\n\nHer head lolled unnaturally as I shifted her, exposing the cord - a black bootlace maybe - cutting into her neck. \n\nI don't know how long I crouched over her, motionless. \n\nI know what the official report says, but time had stopped as I stared at her broken doll form with her broken doll face. And those blind, porcelain eyes.\n\nA sound called me back to the basement tomb. And a dim yellow light kicked on overhead, near the creaking wooden stairs. I turned toward the stairs, straightening up.\n\nAt first, he didn't see me in the gloom. He stood on the bottom step, a wood handled hammer loosely held in one hand. His pale blonde hair back lit in a halo by the brighter light from above. Then he saw me, silently standing, gun leveled at him. His eyes lingered on the badge at my belt for a moment and he let the hammer slip from his grip, then stepped carefully away from it, hands raised.\n\nI knew there was something I was supposed to say, the prelude to his arrest, his trial, his incarceration. \n\nIt just wouldn't come.\n\nThen his gaze drifted to the crumpled form in the corner. And he smiled, perfect white teeth just visible to me.\n\nI can't remember pulling the trigger, but I saw the shock in his eyes as he realized he was going to die.\n\nI try so hard to remember that look when my nightmares come. I treasure it.\n\nThe HRT hit the door upstairs a fraction of a second later. They came on relentlessly as the sound of my shots echoed and died. Moving down the stairs like a machine, a single coherent beast with blinding arc- light eyes and gun oil tainted breath. A black Kevlar-scaled dragon.\n\nA killing machine with nothing to kill.\n\nCurt calls of \"clear!\" snapped back and forth through the house.\n\nThe HRT leader's helmet came off as he scanned the basement. It was Mike. He took the whole scene in with one careful scan. He could see the whole story as if he'd been standing there when it happened. I stood, convicted by my own actions, waiting for him to demand an explanation. An explanation I didn't have. It was obvious he knew everything. \n\nHis right foot reached out and slid the hammer next to the dead man's hand.\n\nHe looked me dead in the eye. Quietly. \"We heard you identify yourself and order him to drop the weapon. He advanced with weapon in hand and you fired twice for effect.\"\n\nHe glanced down at the dead monster at the bottom of the stairs. Then looked back up at me. \"Stick to the script.\"\n\nNobody ever questioned the reports. I could see Mike's hand in it. \n\nI never felt a hint of guilt. \n\nThe mandatory psychiatric counseling sessions dug deep into my feelings over the shooting but they never asked the real question.\n\nMy dreams were haunted, over and over, by the cold blue porcelain eyes of a child.\n\nBut I was the favored daughter now. A month after the mandatory post-shooting cooling off period was over, I was selected for special training for covert assignments. \n\nI'd never seen training like it. Terribly realistic. Viciously effective. The pressure was unrelenting, exhaustion so complete I didn't dream at all. We were given psychological exams every week.\n\nI'd been raised to be the Reinhardt Apparent, and nobody was mentally tougher than I. But even for me it was a seemingly endless series of challenges. Sleepless nights in all kinds of weather and terrain, constant interrogations, round after round of close combat training. None of it even remotely like the normal step by step, safety first standard training.\n\nI reveled in it with teeth bar\u00e8d. Even if they were bloody occasionally. \n\nThe last test was devastating. They'd pulled the biggest fear from my evaluation and loaded it into the rape scenario.\n\nWhen I was twelve I was caught in a riptide. My weakness against that overwhelming power was addressed again and again in my evals. As was my helplessness in the face of my parents choices. A synchronicity of fears the psych evals picked up on. And those fears were weaponized against me.\n\nWhen the rape scenario began, I was taken down by overwhelming strength. My opponent had been chosen for his sheer power and briefed thoroughly on how to take me feel helpless. How to be the riptide.\n\nIt was terrifying. But I had an ace in the hole. The riptide was an old, fading, fear. My nightmares were dominated by cold blue eyes. I could at least fight the riptide.\n\nAnd I did.\n\nMy opponent had a boxer's chest, a wrestler's abs and the pain threshold of a battle tank. He'd taken my best kicks, and still knocked me on my ass. He was injured; he had several broken ribs and his groin had to hurt like hell. But he was on his feet, hands in the classic hammer \u2013 and \u2013 knife of a Shotokan expert. Standard, bullet-headed, old school Japanese karate. Solid, powerful, and heavy on the sweeps. As my hip reminded me. \n\nI was done. I couldn't really fight on this hip injury. And he knew it. I could see the dearly bought respect in his eyes, but he began to move implacably to my weak side. \n\nBut that wasn't my biggest concern. I'd seen something earlier in those eyes when he had me pinned. Against all logic we'd connected over the realization that we were players in an insane scenario. That it was all a game. And for a fraction of a second, I'd felt more real human warmth than I'd felt my whole life.\n\nThat precious moment cost him the injured groin and snapped ribs. But it had cost me more. We'd connected in a way that scared me more than the fear that this scenario might actually allow real rape. I could still fight that. I might lose, would probably lose, but I could, and would, struggle to the end.\n\nBut that connection felt too... something ... to fight. I'd kept men and women at arm's reach all my adult life. Who knew who my relentless parents might send? Professionals \u2013 convincing, perfect, people who could make anyone's heart skip a beat. Or they would simply buy anyone I connected with. Their kind of money could buy so much. Despite everything, I wasn't convinced Father and Evelyn had given up on making me The Reinhardt.",
        "At the end of the scenario, when he carried me to the infirmary, the magnetism was overwhelming. I caught myself starting to nestle into him, and just managed to turn it into a neck stretch. He'd given me his shirt in a gesture of chivalry, so my arm rested on the bare skin and muscle of those shoulders. \n\nWe bantered a bit while waiting for the doctor.\n\nThe connection just got stronger. Some kind of indisputable chemistry, way more than just lust. If there'd have been a door on the room, I'd have broken the Rules in a big way. A few more minutes and I'd have stopped caring about the door.\n\nThe doctor arrived just in time.\n\nAfter I got my crutches and started off, I looked back and saw him watching me. Part of me wanted to go back give him my real name. Part of me wanted to flee as fast and as far as possible.\n\nI kept his shirt and slept in it. I didn't even wash it for a month. That should have been disgusting. \n\nBut it wasn't. \n\nHe was far away, far enough for me to allow myself a tiny fantasy or two of a normal life. The dots of our blood mixed on the shirt were a symbol of something that could have been. \n\nMaybe. In a different world.\n\nI ended up washing the shirt in Hot to set the blood. I'd learned the hard way about that.\n\nIt'd be two more years before I saw him again. \n\nIn those two years, I proved myself over and over. \n\nI wanted to be the best agent ever born \u2013 I had the upbringing, the ability and the ambition to pull it off.\n\nAnd chasing those cases helped keep my own demons down. Those dreams of porcelain blue eyes became fewer and fewer, but never went away, and always woke me with a hard cold hand gripping my heart.\n\nI worked hard. And I had support.\n\nI knew Mike had given me the nod \u2013 which carried tremendous weight. I ended up assigned to Headquarters.\n\nI mostly worked organized crime; it's not as sexy as Counter Terrorism, but because of narcotics, the work is endless. \n\nBut it wasn't all drugs. I spent six weeks working as a waitress in a San Angelo bar when I helped take down one of the largest cattle rustling rings in history. We cooperated with the Texas Rangers to do it. \n\nThey're a great organization. But Cattle Rustling? Texas? Rangers?\n\nUm, well. Yeah, Howdy.\n\nSome smart ass stuck a dime store cowboy hat on my cubicle wall. But I have the real thing, along with a pair of sparkly boots, jeans, a western shirt and a bandana at my apartment. I kept my waitress uniform. \n\nI was nearly killed in a gunfight in Canada. \n\nOver cheese. \n\nAnd maple syrup. \n\nIt's a thing there. Cheese is heavily taxed in Canada, believe it or not, so crime rings smuggle cheese North and unlicensed syrup South across the US border. Four weeks of freezing my ass off, wearing flannel shirts and sleeping in a shitty room above a Canadian pizzeria. It went sideways just before we served warrants and ended in an actual honest-to-God gun battle. With me running alongside of a Royal Canadian Mounted Police Sergeant in a cheese warehouse. \n\nThose are people who take their mozzarella deadly serious.\n\nAs for my personal life, I simply didn't have one. \n\nI buried myself in my work. I didn't have a life outside. I couldn't trust anyone not to be corrupted by The Reinhardt's money.\n\nThe closest thing I'd had to a relationship was a few drunken gropes with another agent \u2013 Cat, short for Catherine - while we were undercover as a Lesbian art dealer couple. I didn't take it seriously at all \u2013 an all-female prep school practically guarantees experience in those kinds of relationships, but for Cat, it was life changing. \n\nShe'd never considered that her recurrent problems with relationships was because she was actually gay. She left the agency and ended up with a permanent girlfriend. Monica. Who owns a cupcake bakery. Seriously. \n\nAnd wears way too much tie-dye.\n\nActually, any tie-dye is way too much. But she carries it to a true extreme.\n\nStill, they seemed more than a little happy together. \n\nMonica tried to freeze me out when she learned of Cat's history with me, but in the end, she realized I wasn't a threat. I didn't do relationships.\n\nI didn't even have any real friends other than Cat and Monica, and I kept them at a bit of a distance.\n\nStill, work was great. I'd shown a knack for planning and execution, courtesy of my upbringing, and it was recognized in by most of the people I worked with. \n\nMore than that, I was a fanatic, relentlessly driven.\n\nI was blind to it until I ran into Mike in the hall outside the office.\n\n\"Danger Mouse.\" Only the HRT members used that name anymore, and they tinted it with a little respect.\n\nI gave a small grin \"Mike.\"\n\n\"Hear you've been doing the good work. I knew you'd make good. I knew you were one of us.\"\n\nHe paused, looking serious.\n\n\"Keep it up, Mouse. Somebody has to slay the monsters.\"\n\nOne of us. One. Of. Us.\n\nThat hit like a sledgehammer.\n\nMike wasn't just an agent. He was head of HRT. A Paladin, a Knight in Shining Armor, a True Believer, in every possible sense of the word.\n\nThat's what he meant.\n\nAnd I realized he was right. I'd stopped doing the job for myself, or for its own sake. My ambition was still irrepressible, but there was more now.\n\nI really Believed. For the first time in my life, I'd been following a dream of a better world.\n\nSo life went on at full tilt.\n\nUntil one day when I was in the weight room working out, and an older white haired woman started jogging on the treadmill next to mine. I didn't really look at her. Somebody's secretary from her demeanor. Still, she ran well.\n\n\"So I hear you're the golden girl around here. Maybe the next Hawthorne, I hear.\"\n\nMaria Hawthorne was the Executive Assistant Director. I'd heard her name thrown around. The EAD was a legend. The toughest bitch on the planet. Supposedly congressmen stepped lightly around her. And it wasn't all political \u2013 early in her career she'd take down drug rings and white slavers relentlessly. I don't know if it was true, but rumor had it she'd personally killed 8 men. \n\nI shrugged, \"Maybe, but if it means I end up trapped in an office? That's not for me.\"\n\nWe chatted on for a few minutes, harmless pleasantries for the most part. And I forgot all about it by the time I ended the day.\n\nI was right. She was somebody's secretary. Maria Hawthorne's.\n\nA week later as I entered the EAD's outer office I knew I'd been set up when I saw the secretary. She just smiled and nodded me on in. I'd been summoned with little ceremony, just a yellow memo that appeared on my desk.\n\nTall, thin, with dark brown hair in an almost severe style, the EAD was standing to the side of her desk when I came in.\n\nShe extended a hand.\n\n\"Nice to meet the next Me. Or so I hear.\"\n\nI prepared to graciously talk my way of that, but she cut me off with a smile.\n\n\"Let's take a walk, Emma.\"\n\nShe led me out the door and down out of the building.\n\nWithin a minute or two, she had us outside and headed south in the general direction of the Smithsonian. \n\nWe walked silently for a minute until we were out of area.\n\n\"Mike recommended you.\"\n\n\"For what?\"\n\n\"This problem I have. I bounce problems off of him sometimes. He's good at giving me perspective. \"\n\nI picked up the vibe that her relationship with Mike was a little more than work related. I'd checked on her when I go the summons and learned she was unmarried. And I knew Mike was a confirmed bachelor.\n\nI let that pass. And she continued. \"We have a case. The team that was working on it brought it up to me this morning. It's a perfect Bureau plan, looks great on paper. And I hate it. The Romanian network we're tracking has dodged this kind of stuff before. It's a different leverage point in the network, but we've come up empty on these guys too many times for it to be coincidence. These are really bad people moving really nasty weapons, and if we don't get it rounded up, there are going to be a lot of dead innocent people.\"\n\nA vision of blue porcelain eyes flickered in my mind.\n\n\"So what's my end of it?\"\n\n\"I want to use non-Bureau assets. These guys may have some Russian FSB contacts, or maybe they understand us too well and can predict us. Or...\"\n\nShe stopped.\n\n\"Or?\"\n\n\"Or we've sprung a leak. There's a lot of money in this game. Even the FBI isn't perfect.\"\n\nSilence hung in the air as I put it together.\n\nShe spelled it out. \"You can't be bought. I know about your parents. You could walk out of here any day and have more money than the rest of us put together. I'm sure they'd take you back.\"\n\nStill about the money. \n\nBut she continued. \"That wouldn't be enough alone. Mike says you're the agent for this. Willing to do what it takes. Whatever it takes. And you've worked with a lot of external agencies and they thought highly of you. Not everyone works and plays well with others.\"\n\nWe paused for a minute as we came up on one of ubiquitous food carts that surround the Smithsonian mall. \n\nShe called for a couple gyros. I told the guy I wanted to see them made in front of us.\n\nMaria raised an eyebrow.\n\n\"I worked a gyro cart in New York for three weeks on surveillance. They keep a bunch of readymade ones behind the counter to save time. Could be hours old. Even a day or two.\"\n\nWe found a bench and sat, eating.\n\n\"I'm pulling the team off at the Bureau, I'll tell them General Counsel has advised to attack the other end of the network. The only Bureau personnel in the know will be you, me, Mike and my aid. I called in a favor with the Director, I'm going to use an Army activity. CUMULOUS GREEN.\"\n\nThat didn't ring a bell and I said so.\n\nShe shook her head. \"It shouldn't. They don't work US domestic targets. Posse Comitatus. But I can get some of them loaned to us as assets under our control for counter terrorism. As technical assets only.\"\n\nI was doubtful and said so. \"A bunch of soldiers stomping around is probably worse than risking an internal leak.\"\n\n\"These aren't regular soldiers. The work cover assignments worldwide, mostly in the CT arena. They are some of the best. They have to be, where they operate, they are the bad guys. We're almost always one call away from the cavalry. If the cavalry comes where they operate, it's a really bad moment. Really capable, but they aren't police, Federal or otherwise. Last time we used one, the op went bad and the CUMULOUS asset picked up the SA's gun and killed three drug runners without trying to take them into custody. General Counsel went crazy over that. They aren't necessarily happy to be working with us again, and I had to get the Director to throw some weight around.\"\n\nWell, that sounded great. Odds were high they'd resent the hell out of me.\n\n\"So are you in?\"\n\nTurning down this kind of offer would pretty much be a career ender. I finished my gyro and looked around.\n\n\"I'm in.\"\n\nCUMULOUS GREEN was a small converted brick warehouse off the beaten path near Georgetown, with underground parking. The sign said \"Calliope LTD\" and looked harmless enough. But the parking attendant was the human version of a Doberman Pinscher \u2013 a study in alertness and restrained aggression. And so were the four internal guards we had to pass. \n\nA secretary checked our identification, called to ensure we were expected and buzzed us in. One of the security guards walked in with us. \n\nI don't know what I was expecting, but it pretty much looked like a standard office, not much different than mine. If anything, it was a hair more run down.\n\nThe people were different.\n\nIf the FBI was full of jocks and cheerleaders, this place was a haven for the kids who hung out at the far end of the parking lot. Smoking.\n\nThey were dressed nice enough \u2013 standard off-the-rack DC government suits. A bit more individualistic than would be normal at the Bureau. What really caught my attention was an edgy wariness as they tracked us coming in. Every single one of them watched us, even if not obviously. I got the impression that law enforcement officers of any flavor weren't their favorite people.\n\nWe were escorted to an office with a conference table where a hard looking woman in a severe suit greeted us. \n\nAfter Maria introduced all of us, she just responded with \"You can call me Donna.\"\n\nMaria seemed to expect that though, and explained what we needed, and to my surprise, her suspicions of a potential compromise, \"somewhere in the Justice Department\".\n\nDonna gestured to her secretary to \"call Eric\", who turned out to be a short, heavyset guy. He asked me to go with him to see what the technical support I needed.\n\nThree flights down, in the basement was Christmas. We passed a weight room, a firing range and arrived at a room that looked like Radio Shack had gone very, very bad. \n\nWe had to step over cables, boxes, half assembled computers to get to a set of shelves at the back.\n\nEvery cutting edge surveillance device invented, and some I'd never heard of. A lot of the stuff was not intended to be used within US borders at all. Ever.\n\nI was practically skipping back up the stairs.\n\nAnd found myself in the middle of an obviously tense moment.\n\nStaring at a familiar face.\n\nA rush of feeling poured in, like some kind of school-girl crush. Somehow, a smart-ass module seemed to turn on in me and I found myself starting a series of wisecracks. He joined in immediately with a knowing look and a half smile.\n\n\"Donna\" seemed to be perfectly okay with the banter, Maria looked expectant, and her aide just looked lost.\n\nI decided I'd better sort out the confusion, and explained how we'd met, although I left out a detail or two.\n\nAnd I decidedly did not mention that my heart felt like it was exploding. \n\nThe smart, logical portion of my brain was screaming \"RUN\" at the top its' voice, but the rest of me had a very different opinion. When he agreed to work with me \u2013 that, had apparently been very much in doubt \u2013 I felt relief and fear in near-equal measures.\n\nI asked Maria's aide for my folder of notes, sat down at the end of the table and we began going over plans. By the time I looked up, Maria, Donna and the aide had disappeared into another room. \n\nWe were very professional, going over infiltration plans, set up, target prioritization. He was absolutely thrilled that I had an emergency extraction plan that might actually work. The hardest part would be the initial set up, and he worked on a personnel roster for that. It may sound a little insane, but legally, he'd be the only 'loaned' asset. His people could bring equipment in, set it up. But they couldn't turn it on or test it. Yet they could stand next to an FBI agent and tell them how to do that In real time. So I'd have to tell Maria to bring in two more agents to do that.\n\nHe was professional, respectful and absolutely distracting. Apparently he'd been down at the shore on leave when he was called in and didn't have time to do more that spray on a little cologne on the drive. So he smelled of cologne and that hot-skin beach smell. And he had the most disconcerting habit of looking me directly in the eyes.\n\nLike I said, distracting. \n\nBy the time we finished, we'd managed to tell each other very little about ourselves, although somehow I'd managed to communicate that I was not in any relationship. \n\nAnd learned that neither was he.\n\nThat didn't help my internal dialogue at all.\n\n Move in day to the Romanian neighborhood was an eye-opener. The CUMULOUS GREEN team was about as convincing as humanly possible. One couple erupted from their car arguing loudly and convincingly about his behavior at a party the weekend before. He'd been drunk and obnoxious the whole time. It was obviously a long running and bitter dispute between; married couple, trying, just barely, to keep it together.\n\nAnd it was complete and utter crap. They hadn't even been teamed up as a \"couple\" until three days before. \n\nThe equipment was set up easily, classic newlywed furniture was brought in, with classic newlywed jokes, loudly thrown around. \n\nAnd when \"my\" guy went to get pizza, he came back with pizza and beer for everyone \u2013 and drugstore flowers for me. \n\nIt doesn't sound like much, and yes, it made sense as part of the cover. But it was literally the first time anyone had bought me flowers. And it must have shown on my face.\n\nOne of the female CA assets looked me holding the flowers and stage-whispered \"Oooh, looks like someone's getting some tonight!\"\n\nOh yes.\n\nHis eyes flashed in the dim light as he struggled with me as my weight pinned him to the top of the mattress. What modesty he had was only preserved by the light blue lace towel wrapped around his waist. That modesty wasn't going to survive long \u2013 as soon as I could trap both his wrists in one hand, I planned to rip the towel off of him. It was, honestly, proving to be difficult \u2013 he was very solid and he wasn't wasting time. But he was having a lot of trouble getting a grip on me. \n\nI'd made pretty good progress on my initial attack, catching him off guard in the darkness of the bedroom, dimly lit by a tiny orange LED nightlight. I'd yanked the shaving kit from his hand \u2013 no point in taking a risk - while tackling him onto the bed. I pinning him down, straddling his body with my legs. He couldn't get a grip to throw me off, because I'd taken the precaution of stripping down and coating myself with lotion. \n\nWe locked eyes for an instant \u2013 just a fraction of a second \u2013 and at that moment, I saw a slight smile on his lips. I could feel him grow hard against me between my legs. \n\nThen everything went right. \n\nThe assignment went very well \u2013 Maria's faith in CG was entirely justified. \n\nAnd the two of us worked well together. Very, very, well. I couldn't keep my hands off of him, and he was just as bad. \n\nAt first I thought it was lust, but soon it was clear we had more than that. We shared our secrets \u2013 those that we could. I told him about my life and how I'd escaped becoming The Reinhardt. His life had been classic small town America, with, as he put it, a hard right turn at Albuquerque that ended with him a team leader in CUMULOUS GREEN. \n\nIn many ways, he was a version of Mike \u2013 he was a Believer. He'd get little praise and no recognition for his efforts, but he might leave the world a cleaner space than when he arrived in it. At least that was his hope.\n\nI never did tell him about the corrosive power of The Reinhardt money and how it ruined everything it touch.\n\nThat toxic fortune was the reason I couldn't just stay with him.\n\nSooner or later, The Reinhardt's money would begin to move in and he would be spoiled and destroyed by it.\n\nI couldn't bear that thought. \n\nI admitted to myself that I was truly in love with him. There was no way I could watch the inevitable rot come for him.\n\nI let him think it was about my ambition and drive. I blamed the work. I tried to get him to blame me. \n\nI was clingy and needy, and even though he knew it was my choice, he was there for me. I felt like my soul was disintegrating.\n\nThen it got worse.\n\nI missed my period.\n\nAnd in the tradition of women and girls from the beginning of time, I prayed. I hoped. I held my breath.\n\nAnd it still didn't come.\n\nWorking at the women's health clinic meant I had access to pregnancy kits at work.\n\nPlus sign.\n\nI'd been raised in the cold logic of The Reinhardt; I'd simply 'take care of it'.\n\nSimple. Have a doctor remove a tiny mass of meaningless cells.\n\nSure. \n\nThat was the answer.\n\nRemove the \"me plus him\" that I'd never planned on or even thought about.\n\nI'd never have a kid. Hell, the first time I actually babysat was right here on this assignment. \n\nEven if we were really married, who would want a bunch of messy little brats running around?\n\nLike the ones he was so good with. The ones I'd had to snuggle with on the couch to get to sleep.\n\nThe nightmare came that night for the first time since this assignment had begun. ",
        "I would never have believed the dream could be worse.\n\nThe cold blue porcelain eyes turned to me as the head traced that unnatural path. But this time, her lips moved. And I heard her voice for the first time.\n\n\"Mommy, Please!\"\n\nI woke, just catching the scream in my throat, trapping that anguish and smothering it to a whimper of pain. \n\nHe stirred beside me, but didn't wake.\n\nI just lay there in a cold sweat for a minute, then edged out of bed, crossing the dark room on uncertain legs.\n\nI slipped into the bathroom, racing from the urge to wake him, to tell him. I shut the door and sat heavily on the rim of the tub. As the nightmare faded, I kept repeating to myself I that was doing the right thing, for me and him. Our careers, our lives weren't right for this. I feared his corruption by The Reinhardt more than anything. Besides, it was just some cells multiplying, not a human in any sense. I finally calmed enough. I stood to leave and glanced toward the medicine cabinet. \n\nI saw the woman in the mirror staring at me.\n\nShe had the coldest blue eyes I'd ever seen.\n\nAlmost clear, the color of the frozen heart of a glacier.\n\n. \n\nThe mission ended. It didn't make headlines, but the headlines that mattered were the ones that never had to be printed.\n\nThat mission should have set my career forever.\n\nI stood in Maria's office, all too obviously pregnant. I'd avoided her for two months after the initial debrief, then took three months of the endless leave I'd accrued, citing a need to recover from the mission. So now I stood, obviously pregnant, waiting for her to disown me for my personal failure.\n\nShe cocked her head to one side. \n\n\"So, have you told him?\"\n\nIt all spilled out; my fears, nightmares, everything. She just stood and led me to sit on her couch. And let me cry it out on her shoulder. \n\nIn the end, although she didn't agree with me in my decision not to tell him, she supported me. She argued I was too valuable to lose. I was moved out of covert assignments and assigned to counter terrorism planning. A massive step up. \n\nCat and Monica were Godsends. The two of them even coached me during delivery. Although I think we all forgot the whole breathing thing.\n\nThey handed me Ellie.\n\nShe had the brightest blue sapphire eyes I'd ever seen.\n\nAlmost surreal. They were full of warmth and love. \n\nWorking in CT Plans meant I was home most of the time, and when I wasn't Cat and Monica were there for us.\n\nI thought about calling him almost every day. But I still feared Them. And how they would ruin him. I loved him too much for that. \n\nI no longer had the dreams of cold porcelain eyes, but I crept down the hall to Ellie's room several nights a week. To check on her, to hold her. To make sure she isn't huddled in her blanket in a corner.\n\nYears passed. Ellie grew. \n\nI don't remember anything about Istanbul. I was there for three weeks and two days. I remember getting on the plane, thinking that when I came back it would be time to get Cat and Monica a new power of attorney. \n\nThen I remember waking up in the hospital. Staring at all of them. Especially him.\n\nHe wasn't angry with me \u2013 saddened by the loss of time with Ellie, but people in our world can be pragmatic to a fault, so he understood why \u2013 or at least he understood the reasoning I gave him.\n\nIt would be years before I could tell him the whole truth. \n\nI must have retained stuff from the long twilight sleep. The lost leg wasn't a surprise. But when I heard about Evelyn, I nearly screamed in terror.\n\nBut when she came in, she was different. She had on blue jeans. Her icy arrogance was completely gone. \n\nAnd she had the saddest blue eyes I'd ever seen.\n\nAlmost clear, the color of endless tears.\n\nI'd never heard her apologize. Ever. For anything. Until now.\n\nShe begged, not for forgiveness \u2013 she felt she didn't deserve any - she just wanted a chance to participate in Ellie's life. A chance, even a small chance, for redemption.\n\nI gave strict terms. And watched her like a hawk. She'd already warned off The Reinhardt, threatening to tear down his world if he didn't stay away forever.\n\nShe still cheated a little. He thinks the sword hanging over the fireplace that she gave him for his birthday is replica of Napoleon's sword from the Battle at the Bridge of Lodi. \n\nIt isn't a replica. \n\nBut only Evelyn and I know that.\n\nIt's been so many years. \n\nYesterday, I held my granddaughter for the first time. \n\nHer name is Elisa. And she's brilliant.\n\nShe has the brightest blue topaz eyes I've ever seen."
    ],
    "authorname": "Todd172",
    "tags": [
        "betrayal",
        "modern",
        "secret agent",
        "romance"
    ],
    "category": "Loving Wives",
    "url": "https://www.literotica.com/s/blue-topaz-eyes-ch-02"
}
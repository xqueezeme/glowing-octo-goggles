{
    "title": "Flower Ch. 06",
    "pages": [
        "I woke up, the warmth and light of the morning sun pulling me from my sleep, and for a few seconds I didn't know where I was, but then it all came back to me. I was safe, at least for now, sleeping in a borrowed t-shirt, in the tiny guest room in Gabriella's house. I was lying in a somewhat sagging bed on sheets made soft by the many times they'd been washed, covered by an old, heavy quilt that had at first made me feel constrained but that now somehow made me feel less anxious and almost... secure.\n\nI stretched and tried to ignore the slight stings from sore muscles and bruised skin, even though I knew that not thinking about bad things wouldn't actually make them go away. One thing that most certainly wouldn't go away was a pressing need to visit the ladies room. I sighed and sat up; it would have been nice to stay in bed for just a little while longer, after all, I didn't have to follow a strict daily plan anymore, did I?\n\nI backed out of the guest room, smiling at the tiny flowers that covered the wall and the only slightly larger flowers that someone had put in a teacup on the windowsill. The room looked like it was made for a small princess, and I could almost imagine the shelf on the wall holding books for children, the wooden box in the corner being filled with toys and a giggling baby girl lying in the bed I had slept in. I sighed and smiled sadly at the thought of the daughter I would never have. My biological clock kept ticking, but even if I sometimes I dreamt about children of my own, I kept reminding myself that there was no sense living in a world of what if's. \n\nI closed the door both to the room and to my pink princess dreams and turned around to the picture of a slightly gaping, wide eyed Sean. I had forgotten that the room was directly connected to the kitchen. I tugged at my t-shirt and walked quickly out of there, my face red and embarrassed, needing to take care of that increasingly urgent matter.\n\nMinutes later I stood staring at my face in the mirror, scanning my image for signs of the life I had lived and the escape I had made. My skin was pale, my eyes big and sad-looking and there was a tightness around my mouth that I hadn't seen before. I sighed and shook my head; I was still scared, little old me. And without makeup and the smile I had worn day in and day out, this was as good as it got.\n\nGabriella knocked softly on the bathroom door and told me she'd put some clothes for me to wear on the chair just outside the room. Oh good, I thought, at least I wouldn't have to parade almost naked in front of a wide eyed police officer again. I sneaked the door open and quickly retrieved the bundle of clothes. The pants and sweater set Gabriella had brought me was soft and a bit larger than my usual size, but I didn't feel like wearing anything tight and constraining anyway; I liked feeling soft and smooth and... free.\n\nI walked back into the kitchen feeling shy and awkward, tugging at the sweater and biting my lower lip. I tried to avoid looking at Sean, not wanting to add embarrassment to the insecurity I was feeling. Instead I looked at Gabriella, who of course pointed me to a chair across the table from her nephew, effectively spoiling my efforts at ignoring him. \n\nI sat down and I looked at the dark-haired man in front of me, there really wasn't much else I could do. He sat staring fixedly at his plate, as if he was also trying to avoid looking at me. I looked up at Gabriella as I heard her laugh quietly. She was glanced at her tense and tired-looking nephew before muttering something about silly boys and pretty girls. I looked back at Sean just in time to see his face turn just a few shades redder; Gabriella's continued low laughter made me think that she had seen it as well. It felt good to know that it wasn't just me that had felt the tension and embarrassment of our early morning meeting.\n\nI looked away and tried to familiarize myself with the small kitchen, finding it just as nice as Edward's, with the same lived-in feeling, but without the many memory items. Despite my newfound fascination for kitchen areas I just couldn't keep glancing at the man in front of me, his face somehow drawing me in. I realized that I had come to rely on his face to tell me the small things I wanted to know, because it didn't lie but was always completely honest. He really did look tired, and I wondered if he had been up all night, since the house only had two rooms and two beds, or if he had gone home.\n\n\"Did you go home to sleep last night?\" I asked him, before taking a small sip of the strong coffee Gabriella had poured and given me.\n\n\"No...\" he answered, stretching his back and neck \"I slept in the car...\"\n\n\"He didn't want to leave us poor women out here all alone,\" Gabriella added with a little bit of bite in her tone \"and he put his stubborn face on, so I knew there was no way to talk him out of it!\"\n\nThe small giggle that bubbled up at the thought of that particular facial expression, that I knew so well, was stopped by the realization that Sean felt we needed protection, and that meant we weren't as safe as I had felt just minutes ago. I sighed, surprised that I had actually been able to suppress the bad thoughts for a short while even though I knew that no one would be safe until my husband was caught. I looked down at my hands, sighed again and took another sip of coffee.\n\nMovements on the other side of the table made me look up to follow Sean's hands as he quickly assembled a sandwich. I smiled as I watched him dig deep holes in the previously flat surface of the butter, and thought about Edward and his short list of bad habits. It seemed I had found one more thing they had in common, in addition to the heart-shaped birthmark. I wondered if Sean had the habit of singing in the shower too, but that thought led me to distinctly kitchen-inappropriate thoughts about birthmarks on butts in showers, and I forced myself to start making a sandwich, hoping that busy hands would mean that my mind became a little less... preoccupied.\n\nI took a bite of my sandwich and turned to face the window, admiring the view of the small, glittering lake, calm beneath the clear blue sky. I understood why Gabriella loved this place, with a small forest beyond the house, a simple garden in front of it and just a few hundred steps below it, the small lake. Size-wise it wasn't much, but the view and the feel of the place made it so infinitely precious. I sighed, let my head rest on my left hand and kept looking out the window. I really didn't need all that much in my life, I thought; a small house, a garden, a kitchen full of memories and someone that sang in the shower and didn't feel the need to hurt me would be more than enough.\n\n\"Please try to eat,\" Sean said, his words hurried \"you need to stop worrying about other people and start taking care of yourself.\"\n\nI realized I was still holding the half-eaten sandwich and quickly finished it off. Before I could turn back to my dreams of a happier future, he handed over another sandwich, nodding towards me and my hand. I looked at him, surprised and a little bit annoyed. What was it about him that kept making me feel edgy, instantly angry or annoyed?\n\n\"Please stop trying to 'handle' me!\" I answered, before I could stop my angry words.\n\n\"I'm not... Well, I'm not trying to make you do anything you don't want to do... but you...\" Sean said, his words tuning out as Gabriella started laughing.\n\n\"What he's trying to say is that he's worried about you,\" Gabriella said \"and he wants to make sure you're ok. You don't have to eat that sandwich, even though he did make it with his own two hands...\"\n\nGabriella put on a sad puppy face with big eyes and pouty, slightly trembling lips; her wickedly laughing eyes betraying the pleading look she gave me.\n\n\"You're not really helping...\" Sean muttered and sent angry looks his aunt's way.\n\nOf course I knew he was just trying to be kind, but it seemed my temper was jumping all over the place all of a sudden.\n\n\"I'm sorry,\" I answered \"I didn't mean to snap at you, I just...\"\n\n\"... don't like being 'handled', right... got it...\" Sean said, folding his hands in front of him and sighing softly \"it's just... I don't want you hurt, or hungry, or sad... anymore... you know? And I thought... helping you...\"\n\nI looked at his face and saw sincerity written on it. It seemed he only wanted to make sure I was ok, but I wasn't used to people doing kind things to someone they didn't know very well, unless they could somehow benefit from it themselves. But that didn't really explain the anger, did it? Perhaps it was the fact that he was kind and charming, in a cute and quiet sort of way, in addition to being extremely good-looking? I had after all fallen in the prince charming trap once before, hadn't I?\n\n\"Aren't you heading off to work?\" Gabriella asked Sean with glittering eyes \"Because I think you've dug yourself sufficiently far down that particular hole, don't you? I wanted to know if I should go get a ladder so you could climb out and get going?\"\n\nSean stood up and walked out of the house muttering something about a law against relatives with smart mouths, that made me smile, if only for a short moment. It seemed that Gabriella and Elena had that particular habit in common, teasing poor Sean.\n\nGabriella poured us both some more coffee and sat down in front of me as we heard a car start and drive away. She looked out the window with a smile on her face that made me think that the house was her \"happy place\", a very live and real version of the concept I'd been having difficulties even imagining. We sat there sipping coffee in silent companionship for a long while, and I thought about the way silence could feel so different depending on the company you kept. With Gabriella I felt happy, warm and safe. And cared for. And loved.\n\nGabriella turned her dark eyes back to me and looked at me for a long while, her facial expressions coming and going, from anger, to sadness, to happiness and then back to sadness again. It seemed to me that she was stuck in memories of some sort and I sipped my coffee and let her process what needed to be processed, thinking that she would speak when she felt it was time to do so. I didn't have to wait for more than a few minutes before she straightened up and took a deep breath.\n\n\"Sean is the son of my sister Isabella,\" she said, her voice low and sad \"and I know I told you about her, that she was the reason I wanted to help you?\"\n\nI nodded and folded my hands on the table, both wanting to hear the story she seemed intent on telling and dreading it, because I wasn't sure I could stand to hear the story if it reminded me of my own, or if I could handle her sadness as she told it.\n\n\"Isabella actually was my big sister, a bright and beautiful woman destined for great things, or so it seemed when I was just a clumsy, spotty pre-teen. Her life always seemed so perfect, with good grades, good friends, and her always perfect looks. And since we had a good eight years between us, we didn't grow as close as we could have. And of course I was envious, who wouldn't have been, being stuck with a too perfect sister; I guess there were even times when I hated her a little as she patted my head and said something about my looks with pity in her voice. So we grew up and grew apart slightly more and more for every year that passed. And the final blow to our sisterhood came when the prettiest girl went and met the handsomest man, the way all fairytale's are supposed to end, but with the addition of me falling not so secretly in love with \"her intended\", their perfect wedding almost breaking my youthful heart in two.\" \n\nShe took a short break and looked out the window again, probably thinking back or perhaps collecting her thoughts and bracing herself against the storm of feelings I could see running across her face. As an only child I would never know what it felt like to lose your sister, and in her case she had done so twice - first by growing apart, then at her sister's unfortunate, premature death.\n\n\"It wasn't long before she was pregnant, and when I met her from time to time when she was carrying Sean she looked more radiant than ever. Of course it didn't take me more than a few weeks to get over my infatuation with her husband, so we could all meet in relative calm for the odd family dinner. We still didn't talk to each other as sisters though, only as a grown woman to a young girl with no real heart-to-hearts about what her life was like, and I shared just as little. But as far as I could tell, that first year as newlyweds was perfectly fine.\"\n\nAnother short break had me thinking about my first year as a newlywed and I fought the sick feelings that always tried to drown me when I walked down that path in memory land. Luckily Gabriella continued her story just a few breaths later.\n\n\"As the years passed we met even less than we had before, and it seemed that the little family didn't need either relatives or friends, because there were no more family dinners and no more socializing with close friends. I didn't think that it was such a strange thing then; I thought it was just the way it was once you had children. I remember that my mother was worried about something, but she didn't share those worries with me, and since I was a teenager with raging hormones by that time, I suppose I had problems of my own. I met my sister by accident in the store a couple of times, and noted that having children seemed to have a bad effect both on your looks and your nerves, because I could tell she didn't even brush her hair anymore, and she jumped and screamed when I tapped her on the shoulder to say hi.\"\n\nShe laughed bitterly and continued.\n\n\"And yes, it's kind of usual to let yourself go a little once you get children, there are page upon page written on that particular subject, but I should have noticed her scared eyes and the way she was frightened of a simple touch. I should have seen her pale tiredness, the way she kept losing weight, and that she started wearing long-sleeved, turtleneck t-shirts in the middle of summer. There were so many small signs pointing in a direction I never even had a thought of looking in.\"\n\n\"She didn't want anyone to see, she didn't want anyone to know...\" I whispered, blinking back tears.\n\n\"No, you're probably right about that,\" she whispered back \"but I so wish that I had seen... that someone had seen the signs, and tried to help her. In fact, I think there must have been people \u2013 like my mom \u2013 who suspected that something was more than wrong, and perhaps they did ask questions and perhaps they did try to help, but failed. And Isabella kept living what must have been a miserable life for thirteen years, until she fell down the stairs \u2013 and yes it was an accident \u2013 broke her neck and then... she was just... gone.\"\n\nShe sighed and dabbed her eyes with a small piece of paper.\n\n\"And that could have been the end of the story, if it wasn't for the then thirteen-year-old Sean. You see, for every year that passed with me entirely unaware of what was going on in that small family, another year of complete awareness passed for Sean. He lived and breathed the evil deeds of his father and the pain of his mother year after year. He was taught lessons about human nature that no kid should ever have to learn. He was taught to run, to hide and to keep silent, because if you couldn't be found you wouldn't be hurt. He was afraid, then as he grew older he became angry and frustrated.\"\n\nTears were streaming down my face, and I thanked my lucky star for my barren state and inability to give birth. The thought of bringing a child to life in the world I had been living in turned my stomach, and my breaths became fast and shallow as panic gripped me. I closed my eyes and concentrated on taking deep, slow breaths to stave off the attack, and when I felt calm enough I looked up at Gabriella, who was pressing two paper tissues to her eyes and kept swallowing, possibly to keep from crying. She continued to tell me her story, her voice thick from the tears she was fighting.\n\n\"If that boy had been forced to stay with his father after the death of his mother, then his story probably would have ended just as badly as hers. And I still think that what he did at his mother's funeral was one of the most courageous things I've seen, even though he still beats himself up for not doing it much sooner. What he did was to walk up to the most powerful grown-up he could think of, which happened to be his uncle, to tell him about his father and the way he had treated his wife and son. I'm so glad that Edward listened right there and then, and I'm always going to be grateful that he fought so hard to get Sean out of that house.\"\n\nI nodded, thinking that the Edward I knew would have fought hard indeed to protect his nephew. I thought about what I knew about the family, and it suddenly hit me that Sean had told me he'd been living with his aunt, not his uncle. If the uncle had made sure that Sean had gotten away from his father, wouldn't it then have been natural for him to live with his uncle instead?\n\n\"Sean told me he'd been brought up by you, not by Edward?\" I hesitantly asked.\n\n\"Well, you've met Edward and you know what a kind man he is,\" Gabriella answered \"and once he'd been able to get Sean away from his father, he sat Sean down and gave him two options, either he could come live with him and his wife, or he could go live with me and my then four-year-old daughter; no matter what choice Sean made Edward promised he would make sure he was taken care of. I still don't know what made Sean chose to come live with me, but perhaps he felt safer in a household with only women, or perhaps he saw the need to come to our rescue. Whatever it was I have never once been sorry that I took him in. I'm not saying it was easy to take on a teenage boy, especially since Sean carried a lot of frustration and guilt after his mother death, but with the help of Edward and his wife we managed to see him through the first few tough months.\"\n\nShe seemed to pull herself together, and even managed a small smile.\n\n\"I just wanted you to know that there are very good reasons why Sean is the way he is, angry but kind, and above all protective, sometimes to an annoying degree. He carries the world on his shoulders, that boy, and he can't stand seeing anyone being mistreated in any way. He also has a tendency to become too serious sometimes, which is probably why I keep teasing him. I love him deeply and I'm so grateful that he's come out of his ordeal with his heart intact.\"\n\nI felt deeply ashamed of the way I had snapped at him and the way I kept going from annoyed to angry when I spoke to him. If there was a way to unsay some of the things I had said, I would have gladly payed a royal sum for that possibility. \n\n\"I'm not going to yell at him again,\" I whispered \"I promise!\"\n\n\"Don't make any promises you can't keep,\" Gabriella answered with a smile \"just keep in mind that he's not as bad as he sometimes seems.\"\n\nI nodded, silently promising myself to stay calm and be friendly when he was around. That shouldn't be too hard, should it?\n\nI helped Gabriella clean up and do the dishes, realizing that it had been years since I had last helped out in the kitchen. I remembered when my father and I had spent the evenings together, chatting and cleaning up after dinner. It was a carefree and uncomplicated time in a home where love and respect were natural components, something I had naively assumed was the very foundation in every family.\n\nMy thoughts were yet again interrupted, this time by the shrill signal of Gabriella's phone. I shamelessly listened in on her conversation; it seemed that someone \u2013 I guessed it was Sean \u2013 was coming back because someone else \u2013 a woman \u2013 was coming over to talk to us. There was also something about the woman knowing too much, which made me think that they were probably talking about Mary. When Gabriella ended the phone call she confirmed my suspicions.",
        "\"Sean's friend Mary is driving over to talk to us and Sean is bringing Edward here so we can all be either interrogated or informed, as he so nicely put it.\"\n\n\"Mary is one of my friends too,\" I said with a small smile \"and 'a bit of both' is probably the true answer to the interrogation/information question.\"\n\n\"I've only met Mary twice,\" Gabriella answered with a smile \"but I would say you're probably right. I liked her the moment I met her though. I even started hoping that she and Sean would find each other, because he really seemed to like her without going all hopelessly goggle-eyed. He's even able to speak in full sentences when she's around, imagine that!\"\n\nI felt a short stab in my chest at what she was saying; Sean and Mary? And that strange feeling, as if someone was squeezing my heart, could it be some sort of aftereffect from him saving me, a mild hero worship of some sort? Or had my soft heart decided that I wanted Sean for myself?\n\n\"I figured it out when I saw them together the second time we met though. She wasn't a true girl in his eyes, probably because of the way she kept talking to and laughing at him; she was just one of the boys to him.\"\n\nMy breathing evened out and I felt annoyed, this time at myself. Mary would be perfect for Sean, the way she kept teasing him, just the way Gabriella and Elena did, the way she independently walked her own path in life, the way she seemed perfectly able to take care of herself, and the whole world for that matter. Sean wouldn't need to keep up his protective ways around my friend, she would protect him instead. I nodded, my mind deciding that the idea was a sound one, despite the whispered complaints from somewhere deep inside of me.\n\nGabriella asked if I wanted to take a short walk down to the lake with her and I agreed, thinking that sitting in the kitchen waiting would be painful enough even without my current conflicting thoughts and emotions.\n\nWe walked in silence and I let my eyes take in the calm, beautiful scenery around us. I tried to think if had ever been in a place that felt as peaceful as this one, but was unable to find even a childhood memory of something quite like it. When I grew up my life had been happy and full of love, and as I had been an active, energetic child, calm really hadn't been something I strived to achieve. But now it felt like a precious gift, a place and time where I could just rest, restore some of my lost energy and collect the still shattered pieces of my true self.\n\n\"Thank you!\" I whispered to Gabriella as we stopped by the edge of the lake. \n\nGabriella smiled back at me and bent down to run her fingers through the water. I crouched beside her, pushing my hands into the lake, surprised at the warmth of the water and the way that the repetitive motions of my hands sent me into an even calmer, almost meditative, state of mind. \n\nWe sat there for quite some time before the sound of an engine disrupted the calm around us. We walked slowly and silently up towards the house and was met by a sleek silver car and a slightly rumpled Mary jumping out of it. She came walking towards us, looking tired but with eyes that were still as alert as always. Somehow, as much as Sean's face and mouth seemed to get my attention, in Mary's case it was always her eyes that drew me in. It wasn't until Gabriella gasped and called out \"what's happened?\" that I looked at her properly and found that her lips were swollen and cracked.\n\n\"The short story is that I needed the help of an old friend, and one of his conditions \u2013 we didn't exactly part on good terms the last time we met \u2013 was that he'd get to hit me, just once. Don't worry, he hits like a girl... you know, a girly girl. And if Sean asks what happened, I fell asleep by my computer, fell off the chair and hit my face on a metal box underneath the table. Ok?\"\n\nI nodded, my head filled with thoughts about the strange ways of the world and men hitting women until I realized I still didn't know what had happened to Susan.\n\n\"And Susan then?\" I asked, keeping my voice low, trying to draw some strength from the calm that seemed to have deserted me once more \"Did she fall and hit her face too?\"\n\n\"No,\" Mary answered \"she was hit by a guy at work, a real piece of shit according to public and not so public records. But he's being handled as we speak. And well, Susan's being taken care of too, but in a slightly different, and very much better, way.\"\n\nThe wicked smile she sent my way, her eyes twinkling, amused by some secret knowledge, made me smile back at her, curious but happy that Susan's \"situation\" had been taken care of. I thought about asking more questions, but the sound of another car made me turn towards driveway. \n\nEdward came walking towards me, hesitating slightly before pulling me into a warm hug. A happy bark separated us and I laughed softly as a big, goofy dog came running up to us, pushing his head under my hand. I dropped to my knees and patted and hugged him, and got licked in the face a couple of times in the process. I laughed out loud as Alfred circled around me and then came back for more hugs and \"kisses\", a wonderfully freeing laughter, full of love and joy.\n\nSean introduced Edward and Mary, and Alfred, to each other before we all walked into the small kitchen. With extra chairs from the other rooms we all managed to fit at the small table, with Gabriella at the head of the table, Mary and Edward on one side and me and Sean, and Alfred, on the other side. Sean was sitting really close, his arm softly touching my arm, sending zings of energy through me on one side, with Alfred sitting on the other side of me, his warm head in my lap, sending waves of calm the other way. I could almost feel the zings and waves meeting inside me, the golden energy of human attraction calmed by the soothing blue waves of canine love.\n\nI let my self be rocked back and forth by the feelings inside of me as Sean asked Mary what had happened to her face and Mary gave her \"it was an accident\" answer, before cheekily asking him if he wanted to kiss it and make it all better. I felt Sean's arm tightening slightly before he blew out a frustrated breath and refused to answer her question. That \"thing\" deep inside of me was happy when he leaned away from Mary and seemed to settle in closer to me instead. \n\nWith short, quick sentences, Mary started telling us about the progress she had made in her attempts at finding the information we needed. She had been able to hack something \u2013 I didn't quite understand what \u2013 to find still pictures of women, but had failed to find any films or other material that tied my husband to any evil doings. She pulled her hair, looking a bit frustrated, before she told us about seeking out an old friend who was now helping her get through the last layer of security around some sort of cloud backup site she'd been unable to access by her own. She was confident that we'd have what we needed in just a few more hours. \n\nWe spent at least two hours around that table as Mary asked us tell her everything about our lives. Edward told us about his father, his mother and brother, his fight to save Sean, his calm, loving life with his wife and his grief when she died. Gabriella told us shortly about her sister and her own life as a single mother before Sean came to live with her and Elena. Sean told us nothing about his life before he came to live with Gabriella, but had plenty of loving things to say about his relatives, and some things to say about his work as a police officer as well. \n\nI didn't think I'd be able to tell them about my life, but I managed to quickly outline what my life had been like, with the rules, the schedules and the punishments. I told them about the last week's change in my husband's temper and him no longer following his father's \"no visible marks\" policy. No one spoke as I continued my painstaking journey through memories previously untold. I didn't dare look at them as I spoke, but I felt Sean's reaction through my arm. He seemed to tense up, perhaps reading himself to jump up, run out, fight, to do something.\n\nWhen I told them about being pushed into the street twice and Sean saving me the second time it happened, it seemed he couldn't take it anymore, because he jumped up and stood, his hands going into tight fists. I sat silently looking at my hands waiting for him to sit down again, before I continued my story by telling them about the way my attempts at getting away from my husband had made me ask Josh for help, and the way Josh had responded when I had told him about my financial situation.\n\nWe sat silent for a few minutes, all of us processing what we'd been told, before Mary started asking questions, seemingly skipping from unrelated event to unrelated event. When she asked me about the person that had pushed me, I answered as much as I could, with Sean adding what he knew. When Mary muttered under her breath that \"it didn't fit in the pattern\" and something about \"unknown factor\", I tried to follow her reasoning, but my tired mind refused to help, because it was occupied processing the feelings that Sean's protective arm around my shoulders was generating. I almost laughed out loud at the zing-a-ding-ding sound that seemed to be ringing in my head.\n\nMary stood up and looked at us all, raising an eyebrow as she saw Sean's arm around me. I could almost see the teasing words that were on her tongue before she shook her head and asked me to walk her out to the car. Sean stood up and pushed himself against the wall to let me out of the kitchen, and I passed him quickly, my cheeks going red as I took care to make sure I touched him as little as possible on the way out.\n\nMary told Sean to call his contact at the homicide unit, to alert him that they would have what they needed soon, and to make sure that they would have a team that could be trusted available on short notice.\n\nWe walked up to Mary's car, and as she stopped, leaned against the driver door and looked at me she probably saw my red cheeks, but she thankfully didn't comment on it. She sighed, ran her fingers through her hair and started talking, keeping her voice low.\n\n\"We have a plan, something tangible that we're working on to capture the devil you married, and to free you from the life you should never, ever have had to live. But at this point, when I can't do anything to help, when I can only await the result of someone else's efforts, all this anger and frustration that I have inside is almost killing me. I need to kick something, break things or scream. Or... I can find another way of using this energy I have inside... but I wanted to ask your approval first. It seems that your husband's family haven't really treated you right either. And I wanted to ask you if you'd be very sorry if I put some effort into breaking down the little empire they've built for themselves? I am quite capable of tearing it and them into tiny, little, non-important pieces of pocket lint. So may I... please?\"\n\nPerhaps it's true that we all have a vengeful side to us, that it's built into our human nature to get mad, to get even, but that wasn't the only reason why I nodded to her before she drove away. If the family treated one of its own the way they treated me, what were the odds that they treated other people even worse?\n\nI smiled as I saw Mary speeding away, thinking that powerful female friends were even better than my previous short thought about finding myself a powerful man. And I was sure that the wrath of this particular woman, although not scorned in the true sense of the word, would mean hell on earth for those deserving of it."
    ],
    "authorname": "SomeSayLove",
    "tags": [
        "beauty"
    ],
    "category": "Romance",
    "url": "https://www.literotica.com/s/flower-ch-06"
}
{
    "title": "Was It The \"Wrong\" Number? Ch. 14",
    "pages": [
        "Friday, July 31<sup>st</sup>, 1992, 8:00 A.M.\n\nI walked out of the house to load the last of my stuff to my truck. It consisted of some hang-up clothes and a pair of shoes. I turned to see that Mom followed me out of the house. She smiled broadly before she took me in her arms.\n\n\"I'm so proud of you,\" she said.\n\n\"Thanks, Mom,\" I replied as I rubbed my hands up and down her back. She was dressed for work and arranged for another nurse to stay late so she could see me off. They were still very shorthanded and despite her desire to help move me in at school, she couldn't. I pulled away slightly so we could look at one another.\n\n\"Your Dad would have been so proud of you, as well. He was the first of his family to attend college and it would have meant a lot to him,\" she smiled. I could see the tears beginning to form in her eyes. She reached up to wipe them away. \"You know, this would have been hard enough without everything else that's happened this summer.\"\n\n\"I know Mom, I feel the same way. I'm just glad that you're not going to be alone now. You have a family now,\" I said.\n\n\"Yes, I do and I'm going to need them more than I care to admit,\" she added. \"You should probably get going. Brenda has to work again tonight, and I can't keep her waiting on me.\"\n\n\"I understand, Mom,\" I said. \"I'll call you tonight. I love you.\"\n\n\"I love you, too, Bradley,\" she replied. She hugged me tightly. Without thinking that one of neighbors might see, I kissed her. Initially, she tensed but soon she relaxed and kissed me back with equal passion. We finally parted and she glanced around.\n\n\"You're going to have to work on your discretion, Bradley,\" she smiled.\n\n\"I'll try,\" I said.\n\n\"You're going to find that easier said than done,\" she said.\n\n\"That's true,\" I smiled.\n\n\"Get going,\" she said, as she caressed my cheek.\n\n\"I'm going,\" I said. \"I love you.\"\n\n\"I love you, too,\" she replied. She turned and I watched her get in her Honda. After a brief wave, she backed out and headed to the hospital. I got in my truck and headed in the other direction, towards school and the start of a new phase of my life.\n\nI merged on to the northbound lanes of the interstate. Kami and Carly were already living in our house just off campus. I'd stayed another week to help Lloyd out at the meat market since he was shorthanded as well. I owed him, as he'd arranged a job for me with an old friend of his that owned a market close to campus. It was perfect, as it paid a little better, and I could walk to work.\n\nAs I drove, I thought about the night before. Mom and I went out to dinner and then returned home for the most passionate love making we'd shared together. It was amazing. There was absolutely no talk of me leaving, as I would be only 75 minutes away. I knew that we'd be home on weekends fairly often, as Kami's soccer schedule allowed.\n\nI also knew I was not the only one in her life anymore. Mom went to \"see\" Angie and Richard a few nights a week, and I was certain Jackie was involved as well. After her talk with me about respecting her privacy, I took it to heart. I realized she was right about everything and I was just being a jealous, little shit. I certainly was not in any position to be policing anyone's activities. I'd just enjoy the moments I could with her.\n\nMy mind soon wandered to what was waiting for me when I made it to school. A quick phone call with Kami and Carly the previous afternoon indicated that they were missing me and that I should plan on a quiet weekend with the two of them. I smiled at that thought. A quiet weekend, yeah right. I continued to smile as I drove thinking about the fact I was madly in love with two beautiful girls and they wanted it that way.\n\n---\n\nThe previous three weeks had been a whirlwind as I'd been working as many hours as I could in addition to my other \"activities\". I'd accompanied Kami for her tryout at State on July 17<sup>th</sup>. Carly took a two-week trip to Europe with her Dad and Jenn, so it was just the two of us. I could tell Kami was anxious and I tried to reassure her. As we drove, she told me that she'd never really tried out for a team before as she was always so much better than the other girls. Additionally, she hated that Carly was gone as she'd always been her biggest cheerleader.\n\n\"You have two now,\" I reminded her with a smile.\n\n\"I know that,\" she said, playfully slapping my arm. \"It's just that she was always there in the past for the big moments and she's not now. I know you're here, but I need both of you now. It can't just be one or the other. Can you understand that?\"\n\n\"Yeah, of course I do,\" I said. \"The things that have gone on this summer, I could never have imagined, but now that they've happened, I can't think of not having you both with me forever.\"\n\nShe smiled brightly. \"That makes me happier than you can imagine. We just need to get her home with us.\"\n\n\"We will baby, just a few more days,\" I said.\n\nThe tryout turned out to be nothing more that the coach apologizing that she hadn't recruited Kami harder in high school. As she explained, she didn't think Kami wanted to play for a university with a practically brand-new program. Coach Andrews stated flatly that Kami needed to be there the 27<sup>th</sup> for the first practice. As I was growing accustomed to with her, Kami played it cool and said she'd be there. On the drive home, she let her emotions show.\n\n\"This is great,\" she exclaimed. \"We're going to play in a new stadium this year. I'm going to get to play against the best girls in the country. I can't believe she just wanted me to show up for practice!\"\n\n\"Whatever, she's been following you. She knows how good you are. You're good enough to play wherever you want,\" I replied. My arm was wrapped around her as we drove, and I leaned over to kiss her forehead.\n\n\"Whatever, yourself. You don't even understand the game,\" she laughed.\n\n\"I'm trying to learn,\" I smiled. \"It's just like hockey except you play on grass instead of ice.\"\n\n\"Uh huh,\" she rolled her eyes.\n\n\"I said I'm trying,\" I laughed. \"You knew you were good enough.\"\n\n\"You're so under my spell you wouldn't tell me the truth either way,\" she smiled devilishly.\n\n\"Well, that might be true,\" I said.\n\n\"That's what I thought,\" she said. She reached down in her lap and pulled her Umbro shorts to the side with her right hand. As usual, she wasn't wearing anything underneath. I glanced hurriedly between the road and the quick glimpses I got of her wonderful looking pussy.\n\n\"At least I know I should never buy you underwear as a gift,\" I said with a smile.\n\n\"I wouldn't wear them,\" she laughed. Her smile faded and her eyes closed in a sultry look. \"These shorts feel amazing against me. The fabric glides back and forth when I'm running. Carly can tell you, I'm so fucking horny after practices or games.\"\n\n\"I can't wait to see this,\" I said. I reached over and cupped her wet sex. I probed her gently with my middle finger and found her practically dripping already.\n\n\"Me either,\" she said. I looked up just in time to see a rest area sign. I quickly pulled off and was surprised that it was mostly empty, with just a few long-haul truckers catching some rest in their sleepers. I parked and opened the truck door before reaching for Kami's hand. In addition to her shorts she was wearing a white t-shirt along with her long, soccer socks and Adidas flip-flops. I looked at one of the picnic pavilions and noticed it offered some cover from prying eyes. I led her towards it and the minute we were somewhat secluded, she squatted in front of me and began unbuttoning my jean shorts.\n\n\"I love how you make things happen when you know we want you,\" she said. She tugged at my shorts and they were soon around my ankles.\n\n\"I'm never going to make either of you wait for anything, baby,\" I said.\n\n\"Good. I just hate that she's not here,\" she said.\n\n\"It'll be okay, she'll understand,\" I said.\n\n\"Uh huh. I'm sure you two whore around with one another when I'm not around,\" she said lustily. She grabbed my hardening cock and squeezed firmly.\n\n\"We have a few times,\" I said with a smile.\n\n\"I knew it was going to be dangerous letting you two get together,\" she smiled. \"It gets me so hot to think about you two fucking.\" She began sucking me forcefully. I looked down into her beautiful eyes as she worked my cock.\n\n\"Oh fuck,\" I groaned, as she took me deep.\n\n\"Mmmmhmmm,\" she moaned around my cock. Her mouth and hand moved quickly, driving me wild with desire for her. She knew exactly how to get me going. She pulled her t-shirt up and after a brief pause in her sucking me, it was off. She threw it on the bench next to me, before she swallowed my cock once more. I threw my head back in pleasure as she did.\n\nI loved having her suck me, but I wanted her. I needed to have my mouth on her and devour her sweet treasures. I firmly pulled her to her feet and she dutifully knelt on the bench. She pulled her satiny shorts down and I knelt behind her. My tongue sought her wetness and slithered through her puffy lips, drawing her nectar out. My tongue continued upwards across her tiny pucker before I returned to the bottom. I circled around her sensitive clit and she moaned softly. I loved hearing her, and I readily feasted on her wetness.\n\nAs I'd gotten used to, it didn't take long before she gushed against my face. She let out a barely restrained yell as it hit her. I gave her just a moment to catch her breath before I resumed my gentle assault on her clit.\n\n\"Mmmm, unnngghhh,\" she groaned as her second orgasm hit her not even a minute after the first. \"Fuck, baby. That's so good!\"\n\n\"Mmmmhmmm,\" I moaned as my lips closed around her mound and my tongue ground harder on her love button. It wasn't much longer before her tight frame convulsed once again. She wiggled away from me before tuning to face me.\n\n\"I want your fucking cock,\" she growled and took my hands, pulling me to the bench where she'd been kneeling. I smiled at her before I sat down. She put her feet on either side of me. The bench was not very wide and I reached for her tight obliques as she squatted above my cock, knowing I'd need to hold on to her. My cock entered her wetness in short order.\n\n\"Mmmm, that's what I need,\" she said.\n\n\"Me too, baby,\" I agreed. She'd rode my cock pretty viciously before, but nothing like that day. The look in her eyes was that of crazed lustiness. She reached for a piece of metal framing to steady herself as she rode me. This allowed my hands to move to her tender breasts and I began slowly squeezing her nipples. My intensity increased as did the wildness in her eyes. It hardly seemed like anytime at all before she bathed my crotch with her wetness. Her mouth was agape, and she leaned her head back in sweet agony. My attention to her taut nipples resumed and her eyes focused on me once again.\n\n\"Fuck, I love you,\" she gasped.\n\n\"I love you, too, Kami,\" I agreed.\n\n\"You feel so fucking good inside me,\" she said.\n\n\"Uh huh,\" I agreed. I was fighting to keep going, but I knew I wasn't going to last much longer. She seemed to read the expression on my face and smiled devilishly. The tempo of her hips increased. I began to rub her nipples again, but she pushed my hands away.\n\n\"This is for you now. Give me all of your cum, baby,\" she purred.\n\n\"Okay,\" I said.\n\n\"Fill me up good,\" she said as her hips slammed forcefully into my own. I grabbed her hips and tried to hang on for the ride. The crazed look on her face drove me wild and I could feel it happening.\n\n\"Oh, Kami,\" I bellowed as I could feel myself cumming inside her.\n\n\"Mmmm, yeah,\" she cooed. \"Give it to me, Brad!\"\n\n\"Oh, I am, god I am,\" I groaned. Finally, I finished and I pulled her towards me. We kissed voraciously before we finally parted and looked at one another.\n\n\"That was nice,\" she laughed.\n\n\"Hell yeah, it was,\" I smiled.\n\n\"We should probably get going. What if some family wants to stop and eat lunch,\" she giggled.\n\n\"Agreed,\" I laughed. We quickly dressed and walked out of the pavilion. I saw a trucker walking his dog off the side of the path. I tried not to make eye contact with him, but I noticed him raise his arm slightly. I glanced at him and saw he was giving me a thumb-up sign. I looked up to see a tremendous grin on his bearded face. I told Kami when we reached the truck.\n\n\"That's probably the most excitement he's had all week,\" she laughed.\n\n\"Probably,\" I agreed.\n\n\"I bet he'd really gotten hot if he knew we were cousins,\" she smiled.\n\n\"I bet he would,\" I said as I took her in my arms and kissed her ravenously.\n\n---\n\nWhen I arrived at \"our\" house on the 31st, I saw Kami's Porsche was gone, but Carly's Volvo was parked in the driveway. I hopped out of my truck and walked to the front door. It was a typical close to college house that had probably been built in the 1950's. I hadn't seen it, but Jackie explained it had been recently remodeled and that she was sure to sell it for a profit after we'd graduated. The front door was locked, so I knocked. The door quickly opened, and I was surprised when Carly opened it completely naked.\n\n\"What are doing answering the door naked,\" I asked.\n\n\"I saw you through the window,\" she smiled. \"I wouldn't have answered if I hadn't known it was you.\"\n\n\"Yeah, I guess so,\" I said. I pushed the door closed and took her in my arms. We kissed tenderly.\n\n\"I've missed you,\" she said.\n\n\"And I've missed you,\" I said. \"Kami is at practice, I'm guessing?\"\n\n\"Yeah, she'll be home around noon. They go back and run at 6,\" Carly explained.\n\n\"That sounds like a great time,\" I laughed.\n\n\"No, that sounds awful,\" Carly smiled. She took my hand in hers. \"Come on, I'll show you our new home.\"\n\n\"Okay,\" I smiled. It was a three-bedroom house, but they'd already designated one as our bedroom, one would be their study room and the other would be mine. Their room was already fully decorated, while mine consisted of a new chair and desk and little else.\n\n\"This will work,\" I said.\n\n\"I'm glad you agree,\" Carly smiled. I pulled her towards me.\n\n\"How could I not,\" I asked. \"I'm living the most amazing dream. I can't complain.\"\n\n\"Good,\" she smiled and our lips met once again. The tenderness soon passed and the fact we'd been apart for a week quickly overwhelmed us both. We kissed voraciously and I found myself pulling her towards the bedroom. We tumbled on the bed with her on top of me. She began pulling my t-shirt up.\n\n\"I was supposed to wait,\" she giggled.\n\n\"It's okay, we'll rest. We have time,\" I insisted. I pulled my shirt the rest of the way up before pulling Carly down on top of me. Her big breasts mashed against my chest as we continued kissing. I rolled her over on her back and moved down so I could suck her hard nipples. As always, that drove her wild. She moaned and held my head against her chest as I alternated between the two of them. I reached down and began pushing my shorts down. I got them off and I started to move down the bed so I could go down on her. When she realized what I was doing, her hands reached for my shoulders.\n\n\"I want you inside me,\" she said.\n\n\"You don't want me to..,\" I started.\n\n\"I've got enough of that this week. I need your fucking cock,\" she growled softly.\n\n\"As you wish,\" I smiled. I finished taking off with my shoes and socks, before positioning myself above her. She reached to guide me it. I pierced her wetness and pushed forward until I felt resistance.\n\n\"Oh,\" she groaned. \"God, you feel so good.\"\n\n\"So, do you,\" I moaned as I withdrew and pushed back in, beginning to slowly fuck her.\n\n\"Mmmm,\" she purred and reached for the backs of my arms. I looked down into her beautiful green eyes behind her glasses and smiled.\n\n\"What,\" she asked.\n\n\"I just love you and love sharing this with you,\" I replied.\n\n\"Me too,\" she said. \"We haven't gotten enough time with just the two of us.\"\n\n\"No, we haven't,\" I agreed.\n\n\"I want to share more so that you know that this isn't just because of Kami, that I'm yours as well,\" she said. \"I want you to know that.\"\n\n\"I know Carly,\" I said. I caressed her cheek as I continued to slowly make love to her. \"I love you, like I love her. You're both so amazing and wonderful.\" She smiled and pulled my face to hers. We kissed and she released my neck.\n\n\"That makes me so happy. I'm looking forward to our future,\" she said.\n\n\"Me too,\" I agreed. I increased my pace and I could feel the wetness flowing from her. The soft sounds of our coupling were apparent among our moans of pleasure. I leaned back on my heels and continued to stroke my cock in and out of her. I moved my right hand between us and after rubbing it in the thick nectar on her labia, I began massaging her clit. Her eyes went wide, before they closed as she focused on the more direct stimulation. I moved my thumb slowly and softly, trying to gradually build her up. She became insistent.\n\n\"Harder, baby,\" she groaned. I rubbed harder and faster. She groaned louder. \"Mmmmmmm!\"\n\n\"Just tell me if you need more,\" I panted.\n\n\"No, that's right. Just keep going. OH! Oh, Brad,\" she squealed and I watched as her eyes popped open and then closed again. I smiled to myself as I watched her, trying to imagine the intensity of the sensations she was feeling that could evoke that type of reaction. I stopped rubbing her briefly knowing that she might be overly sensitive, but her hand grabbed mine firmly. She simply nodded and I resumed rubbing her most intimate spot. Her hips began pushing off the bed to meet me.\n\n\"Mmmm, yeah,\" she wailed. \"Give me that cock.\"\n\n\"Uh, huh,\" I groaned as I increased the pace of my thrusts to meet her.\n\n\"Oh, fuck,\" she groaned and I watched as she writhed in bliss once again. Her eyes were wide open behind her glasses and her face showed shock. I looked at her closely wondering if I should continue. She nodded hurriedly and I kept up with my actions. I knew I was going to be coming soon myself, but I wanted to try to prolong her pleasure as long as I could.\n\n\"Harder,\" she groaned. Assuming she meant her clit, I rubbed it more firmly than I ever had. She threw her head back into the pillow on the bed and bellowed like I'd never heard before. Seeing her orgasm like that, I couldn't hold on any longer. I thrust into her amazing wetness a few more times and felt myself explode.\n\n\"Oh, Carly,\" I panted as I leaned back over her. I found I was sweaty from my exertion. She'd recovered and pulled me towards her. We kissed lustily in the afterglow of our lovemaking. Finally, I moved to her side and pulled her over so that she lay partially on top of me.\n\n\"That was a helluva start to the day,\" I smiled.\n\n\"I agree,\" she smiled. We laid there holding one another for a long while before either of us spoke. Finally, I did.\n\n\"You don't think she'll be upset that we started without her,\" I asked with a smile.\n\n\"She's always jealous. It's part of her personality, if she's not the main focus of attention, she gets jealous. She's always been a Daddy's girl. It stems from that,\" Carly smiled. \"But she'll get over it. We'll double team her until she'd slobbering and talking gibberish. It'll be okay.\"\n\n\"It's that easy,\" I asked with a laugh.\n\n\"You know how she is,\" Carly laughed.\n\n\"Yes, I do. She likes to cum,\" I said.\n\n\"As do we all,\" she giggled. She turned serious and leaned up on her elbow. Her hand rubbed across my chest. \"I know this has all been really casual and the three of us have sort of went along with it. I just want to know that you're okay with it.\"\n\n\"Of course, I am, why wouldn't I be, honey,\" I asked.\n\n\"Kami has been sure you were, but I've had these little doubts. I've just been wondering,\" she said.\n\n\"Why,\" I asked.\n\n\"Brad, I know we talked about this earlier, but I need to be sure. Kami has been my everything as far back as I can remember. My best friend, then my lover and so much more. We've always been so close to one another, and then you come along and then it's like you're all she can talk about. I feel threatened.\" I started to say something, but she raised her hand. \"Please let me finish. I want to make sure that I know how you feel about me independently of Kami. In my mind, I keep thinking you're going to tell her someday that it needs to be just the two of you and I'll have to take my chances with her decision.\" I looked at her closely and I could see how puffy her eyes were. She was on the verge of tears for something that I hadn't even remotely considered.",
        "\"Carly, please. Come here,\" I said as I reached for her. I pulled her against me tightly and I stroked her short blonde hair. \"I promise you. I will never make either of you make a choice. I hate that you've been thinking that.\" I could feel wetness on my chest where her head rested, and I knew she was crying.\n\n\"I have though,\" she sobbed.\n\n\"Carly, the idea of what we're living is beyond anything I imagined. I've been thinking I'm going to fuck it all up somehow and I'll lose both of you,\" I replied. \"I've never thought I'd be choosing one of you over the other.\"\n\n\"You haven't done anything though,\" she said quietly, despite her tears.\n\n\"No, because I love you both so much. I never want to lose either one of you. I want both of you in my life, now and always. I'll never ask either of you to choose. I'll walk away before I ask either of you to,\" I said.\n\nShe looked up at me and smiled slightly.\n\n\"I can live with that,\" she said.\n\n\"Good,\" I smiled. \"I know it's different than anything I ever imagined, but I'm not going to give either of you up because of it.\"\n\n\"You better not,\" she smiled, as she moved down my body...\n\n---\n\nThe following weekend was certainly something to remember. The lovemaking was amazing, and I tried hard to make sure they both knew how much I loved them and what they meant to me. We'd finished another sexual marathon on Sunday and they both cuddled up next to me.\n\n\"We do understand what you're trying to say,\" Kami said, resting her head against my chest.\n\n\"Are you sure, both of you,\" I asked looking over at Carly.\n\n\"Yes, baby. Both of us,\" Carly replied.\n\n\"Okay, good,\" I smiled broadly. \"I don't want either of you to doubt my love.\"\n\n\"We don't,\" Carly smiled.\n\n---\n\nI started my new job on the following Monday, and was told that I'd be working 10-7, Monday through Saturday until school started. I nodded enthusiastically and got to work right away as I wanted to make all I could before the end of summer.\n\nThe three of us quickly established a dynamic in our new home. Neither Kami nor Carly knew anything about cooking unless it involved a microwave, so I was responsible for making dinner each night. I usually brought some protein home from work and I tasked them with shopping for other items. I tried to teach them more about cooking, but I soon realized it was going to take some effort. The two of them were generally naked when I came home, and their attention was usually focused on rubbing their bodies against me as I worked. I didn't complain though, and they were very diligent about cleaning up for me.\n\n---\n\nA week before school started, Carly told us that Jackie, Jenn and she were going to New York City the following weekend. I was a little disappointed, and I could tell from Kami's expression that she was too. The three of us were sitting on the couch cuddling.\n\n\"It'll be okay, babe,\" Kami reassured me.\n\n\"Yeah, it will,\" I agreed. \"We'll just miss her.\"\n\n\"Hey, I'm going to be gone for like 4 days,\" Carly laughed.\n\n\"I've gotten pretty used to waking up with both of your naked bodies against mine,\" I smiled.\n\n\"I'm sure you won't suffer too much,\" Carly smiled.\n\n\"No, he won't,\" Kami giggled, as she stood. \"Let's go to bed.\"\n\n\"If you insist,\" I replied. Carly stood as well.\n\n\"We do,\" she smiled.\n\n---\n\nSomehow, I'd gotten that following weekend off and Mom suggested I come home for a couple of days. Kami quickly agreed, so around noon on Friday we headed to the city. Everyone was still at work except for David so we hung out at the Bennett house. Kami, being Kami, couldn't let that be the status quo. She soon stripped off her clothes and was kneeling on the floor in front of David and I, slowly and sensuously sucking our cocks.\n\n\"God, I'd almost forgotten Kami,\" David moaned as she took him deep.\n\n\"Ally and Jenn can't keep up with me, can they,\" she asked with a devilish smile. She quickly took him back in her mouth.\n\n\"God, no. Jenn is good at it, but she doesn't do it like you do,\" David groaned. \"Oh, yeah. Just like that. Damn man, you're so lucky.\"\n\n\"I can't complain, but neither can you really,\" I laughed.\n\n\"That's true,\" he said with a grin.\n\nKami lazily moved back and forth between us. I often pulled her to me after she finished sucking me so I could kiss her. I loved doing it and I knew it drove her wild. She'd move back to David and take his throbbing cock in her mouth. I began to sense she was taking her time. I got confirmation when David suggested that she move up on the couch.\n\n\"Huh uh,\" she said. \"You can eat my pussy all you want but I'm not supposed to let either of you cum.\"\n\n\"What do you mean,\" David asked.\n\n\"I've got orders from Mom and Aunt Jill,\" Kami replied. She turned to me and smiled.\n\n\"Are you serious,\" I asked.\n\n\"Very. We've been planning something special for tonight. They said I could tease but they wanted you both ready to go,\" she laughed.\n\n\"Come on Kami,\" David whined. \"Let's just fuck for a bit. I haven't gotten any of your pussy in almost a month.\"\n\n\"You can eat it,\" she said.\n\n\"Shit,\" David groaned. He stood up and pulled his shorts up.\n\n\"Don't go anywhere,\" she said. \"I'm supposed to keep an eye on you. I don't want you sneaking off to whore around with Ally. And no jerking off.\"\n\n\"This is just stupid,\" he huffed and moved to the chair opposite the couch. He flipped the TV back on. I reached for Kami's hands and pulled her up to me. When she was close, I wrapped my arms around her and then laid her on her back on the couch.\n\n\"No, don't tempt me baby. I can't refuse you easily,\" she said before I kissed her patiently.\n\n\"You're not refusing me,\" I replied. Her eyes showed confusion before I kissed my way down to her tender breasts. Her nipples were hard, and I began sucking and lightly biting them. She writhed on the couch as I continued to work them. I gradually moved away from them and made my way across her taut abdomen, kissing and licking as I went. I slid off the couch and knelt. Reaching for her hips, I turned her slightly so that I had better access to her. She pulled a pillow under her head and looked down at me with a look of anticipation. I didn't make her wait and my tongue quickly slithered through her wet, puffy folds.\n\n\"Mmmm, that's it Brad,\" she purred. I moaned in agreement as I savored her taste and scent. I licked across her lips lazily, avoiding her clit all together. If David and I were going to be teased so was she. After a few minutes of avoiding her clit, her hands became active on the back of my head. She pulled and tugged at my hair, but I remained steadfast.\n\n\"Damn you,\" she moaned.\n\n\"Fair is fair,\" I replied.\n\n\"Ugh, I knew I wouldn't do very good with this. David get over her,\" she demanded. He tossed the remote aside and stood from the chair. He walked to her side and her hand greedily reached for his cock through his shorts. \"Get it out.\"\n\n\"As you wish,\" he replied. His shorts swiftly dropped to the floor and he knelt on the couch above his twin sister. I looked up to see Kami take him in her mouth. She greedily sucked him, but I was determined to continue teasing her. It didn't take long before she paused blowing David.\n\n\"Baby, what are you doing,\" she whined.\n\n\"Teasing you,\" I replied before swirling my tongue lazily around her labia.\n\n\"Please, just make me fucking cum,\" she groaned.\n\n\"Huh uh,\" I smiled.\n\nHer hand grabbed the back of my head more forcefully than she'd ever done. \"Please baby. You know this wasn't my choice. I'm so hot from sucking your cocks.\"\n\nI watched as she grabbed her brother's cock and swiftly swallowed him as far as she could. Her hand insistently pulled me to her wet sex. My love for her overwhelmed the desire to prolong her release and I swiftly circled her clit with my tongue. It didn't take long and I felt her arch her hips off the couch. She groaned but the sound was muffled by her brother's cock. I greedily sucked and swallowed the sweet wetness gushing from her. She relaxed briefly before I continued licking her. It didn't take long before she pressed her sex in my face again.\n\nI could only imagine the sucking that David was getting. I heard the frantic gulps and slurps as Kami worked his cock. Kami had sucked me numerous times when Carly licked her, but she'd yet to make to Kami cum like I did. I paused my licking briefly to watch them. David's fingers held her short hair and gently thrust forward in Kami's hot mouth. For her part, she moved her mouth up and down his cock, meeting his thrusts. David pulled her tightly to him and I knew he was close. I resumed licking her and I heard her groan and press against my face just a few seconds before David gasped.\n\n\"Oh, Kami! Fuck! Take it. Take it all,\" he said. I looked up to see his ass cheeks clenched tight as he unloaded in his twin sister's mouth. She greedily sucked him until he was empty. He finally pulled his cock from her lips. She looked down and smiled at me. I sprang on top of her and began kissing her ravenously. I could still taste the traces of David in her mouth, but I loved this girl more than anything. Finally, we parted.\n\n\"Wow,\" she said. \"Someone liked that.\"\n\n\"I did,\" I smiled. \"And if I didn't want you to at least keep part of your promise, I'd be rearranging your insides right now.\" Her hand reached for my cheek.\n\n\"I know you would. You both would,\" she said, looking up to David. \"You both need to be ready to go tonight.\"\n\n\"I'm sure we will,\" I laughed.\n\n\"I know,\" she smiled. \"Let's clean up. Mom and Dad will be home soon.\"\n\n\"Okay,\" I agreed.\n\n----\n\nKami and I shared a long leisurely shower. As normal, she couldn't keep her hands to herself, so I ended up lifting her against the wall to give her my cock. I fucked her slow and deep, but she kept trying to make cum. When she did, I'd push myself in her deeply until the feeling subsided. She managed to get off two more times, but I was determined to wait. After we dried, we went into her bedroom to dress. I watched as she pulled a dress from the closet along with some more intimate items from her chest of drawers.\n\n\"You've taken this as a challenge,\" Kami said as she pulled a black stocking up her leg. She'd already wrapped a lacy garter belt around her slender hips.\n\n\"Of course, I am. I think there's something worth waiting for,\" I replied.\n\n\"There is,\" she smiled. The second stocking was pulled up and her fingers quickly worked the clasps securing them to the garter belt. I watched in fascination. When she finished, she looked up at me.\n\n\"Did you enjoy that,\" she smiled.\n\n\"Of course,\" I replied.\n\n\"Mom taught me how to wear them, since she does. They're a lot of hassle, but you seem to like them,\" she laughed.\n\n\"I prefer you anyway I can get you, but this is something new and exciting,\" I replied.\n\n\"I'll keep that in mind,\" she smiled. She walked into the closet and came back wearing some heels that significantly increased her height. She sauntered over to me and wrapped her arms around my neck.\n\n\"What do you think,\" she asked.\n\n\"You probably like me taller in these heels. I'm too short for you, aren't I,\" she asked still looking up at me.\n\n\"You're just fine the way you are,\" I replied. I leaned forward and kissed her.\n\n\"I better be,\" she laughed.\n\n\"You are. You and Carly both,\" I insisted.\n\n\"Good. I wish they were here tonight, but this is just supposed to be actual family,\" she explained.\n\n\"Oh, okay,\" I said.\n\n\"Mom and Jill thought it would be for the best. They talked with Jackie as well,\" she said.\n\n\"What's happening,\" I asked.\n\n\"You'll have to wait,\" Kami smiled. She picked up the dress and walked back into the bathroom. A few moments later, she returned. The dress was sleeveless and looked like it'd been made just for her. She turned around. \"Mind zipping me up? I promise you'll get to take it off later.\"\n\n\"I plan to,\" I said as my hand reached for the zipper. It started below her garter belt and I used the opportunity to run my fingers along her smooth back. I took my time and trailed a finger along her spine the whole way up. I could feel her get goose bumps.\n\n\"I asked you to zip my dress, not get me excited again,\" she quipped.\n\n\"There's a difference,\" I asked.\n\n\"Get dressed,\" she said as she lightly slapped my chest. \"I'm going to put on my makeup.\"\n\nI'd been instructed to bring something nice to wear, so I'd packed the one suit I owned. I began to dress and was just finishing when Kami walked out. Her lips were a deep red and looked very inviting. I moved to kiss her, but she stopped me.\n\n\"You better not. My pussy is dripping down my leg right now thinking about tonight,\" she said.\n\n\"It's that bad, huh,\" I asked.\n\n\"Fuck yes,\" she smiled. \"This afternoon didn't help. I know I'm ready.\"\n\n\"You're always ready baby,\" I laughed.\n\n\"Usually,\" she laughed herself. \"let's go downstairs.\"\n\n\"Okay,\" I replied as I took her hand. We walked down the stairs where we were greeted by Richard. He shared a quick hug with his daughter before he shook my hand. Kami excused herself and wandered off towards Richard and Angie's bedroom.\n\n\"You all settled in at State and ready to start classes,\" he asked.\n\n\"Yes, I am,\" I nodded.\n\n\"Good, you've got a full course load,\" he said.\n\n\"Yeah, I do, but I want to get some of the harder ones out of the way,\" I replied.\n\n\"That's true. Shall we,\" he said gesturing towards his study. He pointed to a chair in front of his desk and moved to pour us both a glass of scotch. He'd been teaching the finer nuances and I found that I enjoyed it. He handed me a glass and moved to sit at his desk.\n\n\"Do you all have everything you need,\" he asked.\n\n\"Yes, sir. I think so,\" I said.\n\n\"Good. I want you to have a little something though for special occasions,\" he said. He reached into his desk drawer and pulled out an envelope before he leaned forward across the desk to hand to me. \"Open it up.\"\n\nI pulled back the top and looked inside. There were several $100 bills in there. I looked up and saw him smile.\n\n\"Richard, please I can't take this. I have a job. It's okay...,\" I started.\n\n\"Brad, I just want you to have some cushion in life,\" he said. \"When I started college Angie, Jackie and I barely had food to eat sometimes. I want you to have money to take the girls to a movie or go out to dinner.\"\n\n\"This is too much,\" I said.\n\n\"No, it's not. I'm sure your father would have done the same,\" Richard smiled. \"Do me a favor and tuck that in your coat. It goes without saying that you shouldn't mention that to Jill.\"\n\n\"No, sir,\" I replied, tucking the envelope in my jacket pocket. As if on cue, Angie and Kami joined us. They were holding glasses of red wine.\n\n\"And just what are you two up to,\" Angie asked. She looked amazing in a dark blue dress with tan nylons.\n\n\"We were just talking my love,\" Richard smiled at her.\n\n\"Uh huh, I seem to remember things happen when the two of you talk,\" she said with an arched eyebrow. I stood from my chair and she walked towards me. She rested her wine glass on Richard's desk before she embraced me. Her lips moved to mine and she kissed me passionately. It went on for a while as we'd not shared a kiss in many weeks.\n\n\"Moooommmm,\" Kami groaned.\n\n\"Kami, I've not seen my handsome nephew in a long time. I'm entitled to get reacquainted with him,\" Angie grinned. \"Besides, you and Carly have had him all to yourselves for three weeks.\"\n\n\"We needed to keep him safe from your whorish ways,\" Kami laughed.\n\n\"Richard, how did we ever let this girl grow up to talk like that,\" Angie asked with a laugh of her own.\n\n\"Our children say the damnedest things, my love,\" Richard grinned. Angie moved to him and they embraced and kissed, as Kami wrapped her arms around me. We kissed as well.\n\nWe parted and she looked up at me. \"As soon as Aunt Jill gets here, we're going to dinner,\" she smiled.\n\n\"That sounds great,\" I said.\n\n\"Don't eat too much. You're going to have plenty of dessert,\" she grinned.\n\n\"I can't wait,\" I smiled.\n\n\"Me either,\" she replied.\n\n---\n\nMom arrived a short while later in a sexy red dress and red heels. It'd been three weeks since I'd seen her, and we moved quickly to one another. We hugged tightly, but soon our lips met and we kissed feverishly.\n\n\"I've missed you,\" she said softly.\n\n\"I've missed you too, Mom,\" I replied.\n\nWe turned to see the Bennett family watching us. They smiled brightly, particularly Angie. She dabbed her eyes lightly with a tissue.\n\n\"We should be going,\" Richard said. \"Our ride is outside already.\"\n\nWe stepped out the front door and I saw that Richard arranged for a limo for the night. I looked to Mom and saw her smile and shrug her shoulder. After everyone loaded in the back the driver took off. We arrived at a restaurant I was unfamiliar with, but I was certain I could trust Richard's judgement. We piled out of the car and I took Kami's hand to help her out, followed shortly by Angie. David helped my Mom before Richard exited last. I walked to the front door with Kami and Angie on either arm. David escorted Mom while Richard moved forward to speak to the ma\u00eetre' d.\n\n\"We've never been here,\" Angie said. \"He's been dying to try it though.\"\n\n\"I'm sure it'll be great,\" I replied. We were led to our table and the layout was unique as each table was self-contained. It looked perfect for a family dinner and I followed Angie into the booth followed by Kami. David, Mom and Richard completed the other side of the circle. A waiter dropped off menus and took our drink orders swiftly. After he left, I felt one and then another hand on my upper thighs. They rapidly moved upwards. I glanced briefly to either side and of course they were both intently studying the menu. Fair enough I reminded myself. My hands moved to their knees and I slid them upwards under the hem of their dresses, the feeling of nylon covered thigh as electric as ever.\n\nKami shifted in her seat and spreading her thighs slightly. I continued further up, and my fingers grazed the smoothness of her sex. She'd not been exaggerating earlier as she was practically dripping. I swirled my finger around in the wetness and her hand grabbed my hardening cock more firmly. While I continued teasing Kami, the fingers of my other hand made contact with Angie's pussy. Like Kami, she'd not worn panties either. I smiled inwardly at thought while my middle finger traced her outer lips before I pushed it into her generous wetness. My finger slipped in deeper and I heard her take a deep breath. Like Kami and Angie, my eyes never left the menu. I finally glanced up to see Mom looking at me, contentment on her face. From the angle of their arms, I assumed that Richard and David were doing much the same to her.\n\nThe waiter returned with drinks and took our orders. We carried on a conversation, but it was ragged as the six of us played our own little games. I loved the excitement of intimately touching them in a public place like that. Angie leaned over and whispered in my ear.\n\n\"You're going to have to stop. I'm about to cum,\" she said.\n\n\"All the more reason,\" I replied.\n\n\"If I scream, it's your fault,\" she smiled.\n\n\"I'll take that chance,\" I grinned back at her. My forefinger ground a lazy circle around her hard clit, and I watched her breathing deepen. I glanced around the table and saw David, Mom and Richard watching intently. Kami leaned over and licked my ear before whispering.\n\n\"Are you going to make her cum,\" she asked. I nodded slowly.\n\n\"Good,\" Kami purred. Angie began slowly and softly forcing her sex against my finger.\n\n\"That's it, Bradley,\" she whispered in my other ear. \"I'm almost there.\"\n\n\"Great,\" I said quietly.\n\n\"I can't wait to cum on your face later,\" she cooed.\n\n\"Me either,\" I replied.\n\n\"Mmmm,\" she groaned and reached for her thick, cloth napkin. She covered as if she was about to sneeze or cough. It helped muffle the sound, but everyone at the table clearly heard her groans of pleasure. She calmed and I slowly pulled my hands from between her thighs. After I ensured the waiter wasn't coming back, I brought my fingers to my lips and licked them clean. I happened to make eye contact with Mom. She shook her head before she smiled at me broadly.",
        "\"That was certainly exciting,\" Angie laughed.\n\n\"I can imagine so,\" Mom agreed. Her expression changed suddenly, and I knew that Richard and David resumed giving Mom their own attention. She tried to maintain her composure, but I could see she was losing the battle. Mom leaned her head back into the booth and she was obviously cumming, when the waiter arrived with our orders. She quickly resumed an attitude of normalcy as Richard conversed politely with the waiter. I looked at Mom and her face showed bewilderment, that is until our eyes met. Her expression quickly changed to slight embarrassment. I couldn't help but smiling back at her, knowing that after many years of being alone, she'd finally found some happiness again. Not what the rest of the world would define happiness as, but something deeper and more meaningful.\n\nThe remainder of dinner was fairly tame, and conversation was lively. I'd never experienced much in the way of family and enjoyed that time. Mom clearly did as well, and she held hands with Angie through much of dinner. The waiter brought the check and after Richard paid, we filed out to the limo. Once the door was closed, Kami sat on my lap and kissed me insistently. My hand stroked her silky, nylon-clad thighs. I caught glimpses of Mom and Angie sharing kisses with Richard and David. I felt a slight pang of jealousy as I saw my Mom with the two other men, but it quickly dissipated as Kami made sure my attention was solely focused on her.\n\nThe limo arrived at the Bennett house shortly before 10 and we walked inside. Richard insisted on pouring wine for everyone in the kitchen before leading us to the large living area where Kami and I made love for the first time. I found myself sitting on the exact couch with Kami and Angie on either side of me. Mom was seated on the opposite couch between Richard and David. We continued to sip wine and talk, but it wasn't long before Kami's hand found the front of my slacks and began incessantly kneading my cock. I turned to her, but she was telling everyone how things looked for the upcoming soccer season. I felt Angie's hand join Kami's and I turned to her. She leaned over and our lips met. Her passion was evident as always and we exchanged several soul wrenching kisses. Other than the kiss earlier, we hadn't shared any in several weeks as Angie backed off as things developed between my Mom and me. Finally, we parted.\n\n\"I've missed that,\" I said.\n\n\"So, have I,\" she smiled. I glanced across the room and saw Mom and Richard kissing. David's hands were caressing Mom's silky thighs and breasts through her red dress. Kami straddled my lap and kissed me ferociously.\n\n\"Mom and I are taking care of you tonight,\" Kami smiled.\n\n\"I can't wait baby,\" I replied. Angie shifted to where she was kneeling next to me and the two of them took turns kissing me and one another as they unbuttoned my shirt. They quickly took it off and their hands roamed my shoulders and chest. I reached behind Kami to help with the zipper on her dress. She stood and it fell to the floor. She stood there briefly in just her stockings and heels before she knelt before me. Her hands skillfully worked my zipper and pulled my hardening cock out. She stroked it lightly before taking it in her mouth. As always, I groaned as she wasted no time in taking me as deep as she could.\n\n\"She loves doing that for you,\" Angie said.\n\n\"Yes, she does,\" I agreed. I pulled Angie close and kissed her as Kami continued to work my cock.\n\n\"Mmmm,\" she said as our lips parted briefly. \"You certainly have no shortage of passion, Bradley.\"\n\n\"I can't help it,\" I replied. \"I love you all so much.\"\n\n\"As we love you,\" she said. \"I could use some assistance as well.\" She pulled away from me and turned. I unzipped her dress and she stood to let it fall. I watched intently as a beautiful, lacy bra along with a matching garter belt were revealed.\n\n\"You look amazing,\" I said.\n\n\"Thank you, my handsome nephew,\" she giggled. \"Hopefully Kami with learn the enjoyment of beautiful underthings someday.\"\n\nKami pausing sucking me briefly to look back at Angie. \"They get in the way.\"\n\n\"Getting there is always a big part of the fun, my dear daughter,\" Angie replied, before she turned back to me. \"I think I should help her out.\" I could only nod as she knelt next to Kami. Angie's hand took my cock by the base and when Kami reluctantly removed her mouth Angie took me deep. I groaned again and I felt my pants being pulled down. They were soon around my ankles and Kami pulled off my shoes and socks to fully remove them. Her hands parted my knees and she moved to suck my balls as her mom's mouth slid up and down my painfully hard cock. I heard Mom moan and looked up to see that Richard's face was between her stocking-covered thighs. David knelt above her, gently feeding Mom his hard cock. It was an amazingly sexy sight, and my cock throbbed in Angie's loving mouth.\n\nAngie stopped sucking me before she looked up and smiled. Kami quickly took over for her mother. My fingers combed through her short dark hair as she lovingly sucked me.\n\n\"I've missed your eager tongue,\" Angie said.\n\n\"I've missed licking your sweet pussy,\" I replied.\n\n\"You will be very soon,\" she said. \"But just focus on us pleasuring you right now.\"\n\nI nodded and watched as mother and daughter switched places once again. There was hardly any difference in their techniques. If I closed my eyes, I honestly couldn't tell whose mouth was on my cock. They used their mouths and hands on my cock, but my balls were never neglected. They'd alternate taking one in their mouth to either lightly suck or hum. It drove me wild. I knew that all of the activity of the day was getting to me. I needed to cum.\n\n\"I'm close,\" I grunted. Angie took me in her mouth again and she went into turbo mode bobbing her head in my lap. I felt it arriving fast and I groaned again. \"Oh!!\"\n\nAngie released me from her mouth and I looked down to watch Kami join her mother. Their tongues swirled around the head of my cock as I erupted. They continued lapping until long after all of my cum was consumed by their lusty mouths. Finally, the head of my cock became too sensitive and I reached for the two them. After the joined me on the couch, I exchanged kisses with both of them, savoring the flavor of my orgasm still fresh in their loving mouths.\n\n\"I needed that,\" I said.\n\n\"Yes, you did,\" Angie smiled. \"I understand that David cheated.\"\n\n\"A guy can only absorb so much teasing, and she's not one to keep someone under control. She gets too excited herself,\" I said pointing to Kami.\n\n\"I can't deny what he's saying,\" Kami giggled.\n\n\"I know,\" Angie shook her head. \"She's certainly a weak link since she's impulsive and lacks self-control.\"\n\n\"As if I didn't learn that from you,\" Kami said, reaching across me to gently slap her mom's knee.\n\n\"Maybe,\" Angie allowed. I glanced over to the other couch and saw that Mom was kneeling on the floor sucking Richard, while David was under her, licking her wet treasure. I longed to go over there and share Mom with Richard and David, but I knew I couldn't monopolize her time, besides my own hands were more than full. Reminding myself of that, I turned to Angie and kissed her hard before I pushed her lightly towards the arm of the couch. I slid off the couch and reached for her knees to part her thighs.\n\n\"I like where this is going,\" Angie smiled.\n\n\"Me too,\" I said.\n\n\"Would you mind taking off my heels,\" she asked.\n\n\"No, of course not,\" I replied. They were what I'd later learn to be Mary Jane style with two straps across the top of the foot. Her right foot was the closest, and I worked the two little buckles loose. After I pulled the heel off, I could see where they'd pinched her feet, and instinctively began to rub those areas.\n\n\"Mmmm, this is an extra benefit,\" Angie replied.\n\n\"I like it,\" I said. \"There's something about the way your feet feel in the nylons.\"\n\n\"I understand,\" she replied. I moved to the other one and began rubbing it as well. I suddenly wondered where Kami was. I looked to my left and saw that she'd joined the threesome on the other couch. She was bouncing on David's cock as he continued licking my Mom. I shook my head and turned to Angie.\n\n\"We've created a monster,\" Angie said, shaking her head.\n\n\"I'm afraid so,\" I said.\n\n\"It's good you're not the jealous type,\" she laughed.\n\n\"I'm realizing I can't be,\" I said.\n\n\"No, you really can't,\" she replied. She reached up for me. \"Kiss me and then eat me.\"\n\n\"I can do that,\" I smiled. After several more kisses, I moved back to the floor between her spread thighs. She rested her stocking-covered calves on my shoulders as I kissed my way up from her knees slowly, admiring her sex as I moved up. As always it was impeccably smooth, and it glistened with her excitement. I neared the crease where her inner thigh joined her groin and I could smell her arousal. I willed myself to be patient and I kissed and licked along this line before moving in further. It served its purpose as Angie's hands grabbed the back of my head and focused me on the proper area. Still, I didn't immediately comply. I spent a long time running my tongue along her puffy lips and through her sopping wet slit. I even pushed her thighs forward and ran my tongue across her tight asshole. She gasped loudly and I knew I'd need to experience anal sex with her sometime. Since our first time on the beach with David, Kami and I engaged in it regularly as well as introducing Carly to it.\n\nI moved back to her pussy and her hands pulled me firmly to the top. She was ready. I licked and alternately sucked her clit as she steadily got more excited. I used my fingers to penetrate her which caused her to writhe on the couch.\n\n\"Oh, Bradley,\" she wailed. \"That feels so good!\"\n\n\"Mmmm,\" I moaned as I continued to work her love button.\n\n\"Unghhhh,\" she groaned. I lapped the underside of her clit, which she always seemed to love. Her hips thrust upward allowing me even better access to her, and my lips closed on her clit. I sucked lightly while continuing to flick my tongue upward. I heard her groan and knew she was there. It took only a few more licks before she convulsed, and I paused briefly to let her come down.\n\n\"Mmmm,\" she purred. \"That was great.\"\n\n\"You think so,\" I asked.\n\n\"Uh huh,\" she smiled. \"Come up here and kiss me.\" I moved up above her and we exchanged a racking series of kisses. Her hand moved between us and found my cock. I'd recovered and I was soon hard from her insistent stroking.\n\n\"I think I've denied myself long enough,\" she said.\n\n\"Don't forget me,\" I reminded her.\n\n\"You missed your auntie's little honey pot,\" she asked.\n\n\"I have. It was my first, and it will always be special,\" I said.\n\nKami shook her head and playfully slapped my ass. \"You two are a little too mushy for me.\" I hadn't noticed that she rejoined Angie and me.\n\n\"You know I love you,\" I said, looking to my left to see her.\n\n\"You better,\" she smiled. \"Mom, fuck him or I'm going to.\"\n\n\"It'll be my pleasure,\" Angie replied. I moved back to a sitting position, while Angie stood up. Kami sat to my right as Angie straddled my thighs. She took my cock in her hand and adjusted herself slightly. We both moaned as her pussy lips slid down the length of my cock. Her wetness was copious, and she glided easily up and down my hard shaft.\n\n\"I've missed this cock,\" she said.\n\n\"He's missed you too, Angie,\" I replied with a smile. \"Auntie Angie, I mean.\"\n\n\"Mmmm, my dear sweet nephew,\" she purred. Kami reached behind Angie to unclasp her bra, allowing her ripe breasts to spill free. My hands as well as Kami's were drawn to them. We caressed and squeezed her breasts, while also teasing her nipples mercilessly. I pulled her closer to me so that I could get her nipples in my mouth. I sucked and lightly bit one while Kami's skilled hands played with the other.\n\n\"Oh, you dirty little devils,\" Angie moaned.\n\n\"We didn't learn everything on our own,\" I replied.\n\n\"You do have a point,\" Angie gasped. \"Oh, your cock feels so good!\"\n\n\"Good. You can ride me all night,\" I said.\n\n\"I'll imagine I'll be competing for your attention later,\" she smiled.\n\n\"You're damn right you will,\" Kami added. She reached for her mother's chin. Kami planted her lips against Angie's and I was enthralled by how torrid the kiss between mother and daughter was.\n\n\"Wow,\" I said softly.\n\n\"You like that, huh,\" Kami smiled.\n\n\"Fuck yeah! How could I not,\" I asked.\n\n\"If you didn't, I'd think there was something wrong with you,\" Angie laughed.\n\n\"I guess I'm fine then,\" I replied.\n\n\"I love riding your cock, but let me lay on the couch,\" Angie suggested.\n\n\"Okay,\" I said, grabbing her by her firm ass. I stood with her and she instantly wrapped her legs around my hips.\n\n\"Wheeee,\" she squealed. \"Don't hurt your back.\"\n\n\"You don't weigh anything,\" I said. I turned and laid her on the couch.\n\n\"My bathroom scale would beg to differ,\" she said. I lined my cock up with her wet sex and pushed forward. \"Mmmmm!\"\n\n\"I agree,\" I said, slowly thrusting in and out of her. I reached for Kami and pulled her towards me. \"Come here baby.\"\n\nI wrapped an arm around her and kissed her, never slowing the place I was fucking her mother with. We kissed ravenously before finally parting. Her head turned slightly to watch me fucking Angie.\n\n\"I love you,\" she said. \"I never thought I'd find someone that would be just as comfortable making love with my mom as he was making love with me.\"\n\n\"I love you too, babe. I am though,\" I added.\n\n\"I know and that's what makes it so hot,\" she said. She turned to see what was happening on the opposite couch. I looked myself. Richard was slowly fucking Mom from behind while she sucked David. \"It looks like Aunt Jill is enjoying herself.\"\n\n\"Yes, it does,\" I smiled. I refocused my attention on Angie. I realized she'd been watching as well, and she smiled broadly.\n\n\"It's not bothering you is it, Bradley,\" she asked.\n\n\"No, it's not,\" I smiled back.\n\n\"Good. I'm glad,\" Angie said. \"Jackie and I may have found some competition.\"\n\n\"I doubt it, but if either of you get lonely, you have my number,\" I laughed.\n\nKami'd been watching Richard and Mom but turned when I said that.\n\n\"You have enough to worry about,\" Kami said before she slapped my shoulder.\n\n\"I know I do,\" I said.\n\n\"Now give me that cock like you've wanted to for the past several weeks,\" Angie said.\n\n\"I will,\" I said. I reached for ankles and rested her heels on my shoulders. I gripped her nylon clad calves in my hands and began thrusting in and out of her faster. She nodded her head and closed her eyes.\n\n\"That's it, baby. Give me that cock. Oh, yeah,\" she groaned.\n\n\"Do it Brad,\" Kami said. \"Fuck her nice and deep!\"\n\n\"Yes,\" I groaned. Kami's hand slid between Angie and me, her fingers seeking Angie's clit. When they made contact, Angie's hips went into overdrive thrusting up to meet me.\n\n\"Mmmm, fuck. You two are driving me crazy,\" Angie moaned. Kami leaned over her mother and they kissed passionately. They parted and Angie looked at me with a crazed look in her eyes. \"Don't stop baby.\"\n\n\"I won't,\" I reassured her. I continued pounding her wet pussy. Out of the corner of my eye, I saw Mom was still taking Richard from behind. She'd stopped sucking David and her hands clenched the couch cushions tightly. She groaned loudly and I knew instantly that she'd came. Richard gave her a few more strokes before he too orgasmed. Angie grabbed the backs of my arms and squeezed them hard, announcing she was close as well. I increased my pace further and she urgently nodded her head.\n\n\"Yes, just like that,\" she groaned. I continued to thrust, and Angie groaned loudly. She arched her back and squeezed my arms so tightly I thought they might bruise. \"Oh, Fuck!\"\n\nI wasn't close to cumming, so I kept fucking her. Kami and I worked her through 2 more orgasms before Angie finally said she needed a break. I leaned down and kissed her.\n\n\"That was wonderful. I won't be making you wait again,\" she smiled.\n\n\"You had your reasons,\" I said.\n\n\"Yes, I did,\" she said. We both turned to see Mom and David making love. Mom was on her back with David on top of her. Their hands roamed each another and they kissed repeatedly.\n\nI was still half hard, and I moved to stand in front of Kami. She wasted no time and took me in her mouth. When I was fully, hard Kami paused to get a blanket from a cabinet. She spread it out and I laid back on it. She squatted over me and I entered her.\n\n\"Mmmm, baby,\" she groaned as she began riding my cock. \"I'm really hot for you. Watching you fuck my mom so good got me going.\"\n\n\"I'm hot for you, too,\" I agreed. My hands found her perky breasts and I began rubbing her nipples.\n\n\"Yeah, that's it. Make them ache,\" she suggested. I nodded and increased the pressure until her mouth opened and her eyes closed.\n\n\"Uh..., oh...,\" she squealed. She gushed against me, and I gave her nipples a brief break before I resumed my assault on them. Within 30 seconds, she came again. \"Oh, fuck! The way you make me feel!\"\n\n\"I love making you feel good,\" I said. She nodded at me, never breaking stride as she bounced on my cock.\n\n\"I love giving you the same. I want you to cum. I want you to fill my pussy up,\" she said.\n\n\"I will,\" I said. \"I want to get you off a few more times.\"\n\n\"No, I've been teasing you all day,\" she said. Her hands grabbed my wrists and pulled them from her breasts. I knew I could have resisted her, but my fiery little brunette was insistent. She interlaced her fingers in mine and I stiffened my arms so she could use them as extra support. She moved to a full squatting position as opposed to straddling me on her knees. She adjusted herself slightly before she started fucking me vigorously. It was intense as was the look in her eyes. She nodded her head encouraging me to cum. It didn't take long before I was on the edge. By that time, her hands were on my chest and her fingernails pinched my own nipples. I hadn't experienced that before, but when she pinched them hard, it literally made my cock throb.\n\n\"Oh, Kami,\" I groaned. \"I'm close.\"\n\n\"Mmmm, I know,\" she giggled. \"Give it to me. All of it.\"\n\n\"I will, baby,\" I said. She slammed her hips down on mine repeatedly and I felt it happening.\n\n\"Oh, Kami, Oh, baby, I love you,\" I bellowed.\n\n\"Uh, I love you, too. Do it baby,\" she replied. I exploded inside of her and I reached for her slender hips, holding her close to me as my cum filled her tight pussy. She groaned and I felt a small trickle between us. One last one, I thought. She fell forward on me and I wrapped my arms around her. We kissed and cuddled for a long while before I reminded myself that we were not alone. I rolled over with Kami still on top of me. When I was on my side, I looked to the couch that Mom was earlier and saw it was empty. I turned back over and saw Mom, Richard, Angie and David watching Kami and me. Richard and David were drinking scotch while Mom and Angie held glasses of wine.\n\n\"That was a great show,\" Angie said.\n\n\"The four of you were just watching,\" I asked.\n\n\"Of course,\" Richard replied.\n\nI turned back to Kami and saw her smiling. She sat up next to me and I moved up to a sitting position as well.\n\n\"I think the two of you go together pretty well,\" Mom said.\n\n\"He goes pretty well with Carly, too,\" Kami added.\n\n\"I'm certain he does,\" Angie winked.\n\n\"Would either of you like a drink,\" Richard offered.\n\n\"Sure,\" I agreed. I decided I should probably help, so I stood and pulled Kami to her feet. I followed Richard to the kitchen where he pulled another bottle of red from the wine rack. His practiced hands worked the corkscrew quickly and opened it.\n\n\"We'll let that breathe a moment while we pour a glass of scotch,\" he smiled. It was slightly comical as we were both naked, but we walked to his study as casually as could be. He opened the cabinet and looked inside for a long moment.",
        "\"Ah,\" he said finally, reaching in the back for a bottle. \"You'll really like this one.\"\n\n\"Oh really,\" I asked.\n\n\"Yes, it's older than I am,\" Richard smiled.\n\n\"Really?\"\n\n\"Yes, I bought it several years ago. I only drink it for special occasions,\" he smiled. \"I think tonight fits.\"\n\n\"Me too,\" I said. He offered the bottle to me and I noted that it was 50-year scotch. Richard let me try numerous scotches over the summer that ranged from 10 to 20 years, and I could only imagine what this one was like.\n\n\"We'll have a glass of this before we rejoin everyone. David and I have enjoyed this one recently, don't think he's being left out,\" Richard smiled.\n\n\"I won't,\" I replied. He poured and offered me a glass. He sat behind his desk while I took a chair across from him. We both took a sip and I was amazed by the smoothness. I swallowed it slowly savoring the complex flavors that I still didn't fully appreciate. Richard sat his glass on his desk and smiled at me.\n\n\"Brad, I can't say so much about how happy I am that we've found you and Jill,\" he said. I nodded as I was in complete agreement. He continued, \"Angie was always happy in our life, but to see the additional happiness she's found with Jill has been one of the brightest moments of my life.\"\n\n\"I can understand, Richard. The change in Mom has been impressive as well. She's not been very happy since Dad died,\" I replied.\n\n\"No, she hasn't,\" he agreed. \"She's come full circle.\" He smiled. \"We should probably be getting back.\"\n\n\"Yeah, we should,\" I nodded as we both stood.\n\n\"What are you going to study at State,\" Richard asked.\n\n\"Probably engineering, but I haven't decided for sure,\" I said.\n\n\"You really should consider pre-med. I know a few people,\" he laughed as he waved me through the door.\n\n---\n\nKnowing the Bennett family, I was not surprised to see what I saw when Richard and I returned with the bottle of wine. Kami was laying on the blanket on the floor, as David feasted heartily on her sex. Mom and Angie were on the couch I'd been on earlier. They were engaged in a 69, with Mom on top. I looked to my right where Richard stood. He shrugged and we moved to the opposite couch and sipped the remainder of our scotch. Over the course of the next several minutes, David made Kami cum. He moved to kneel between her spread thighs, and I watched as he leaned forward to enter her. She reached for his shoulders and he started fucking her in earnest. My eyes moved to Mom and Angie on the couch. Their mouths were obviously occupied, while their hands explored one another's bodies. Mom insistently rubbed Angie's nylon covered legs as she licked her older sister's pussy. I noticed Angie's fingers spending a lot of time between Mom's ass cheeks. I'd never dared ask Mom for any of that, but I could clearly see Angie fingering Mom's ass.\n\nThe two of them continued their play while David pummeled Kami's pussy on the floor. As I'd seen several times before, they really enjoyed one another. You could see the love and the intimacy between brother and sister.\n\nRichard and I sipped our scotch as we watched the two couples in front of continue to make move. Finally, David slammed into Kami one final time before bellowing in pleasure.\n\n\"Oh, fuck, sis. That's always so good,\" he said as he leaned down to kiss her.\n\n\"Yes, it was,\" Kami agreed. David rolled off of her and they snuggled on the floor. Mom and Angie had stopped and were laying in one another's arms, kissing and whispering to one another. I watched as the two of them could not keep from smiling at one another as their hands roamed over one another's skin. I looked back at Kami and David to see Kami crawling towards us on her hands and knees.\n\n\"Mmmm, two of my favorite men,\" Kami smiled as she reached us.\n\n\"Thank you, princess,\" Richard said, opening his arms for Kami. She stood and sat on his lap, where Richard held her tightly. She reached for my hand and smiled.\n\n\"I really want to do something special with you two,\" she said.\n\n\"What's that,\" I asked.\n\n\"What we did with David on the beach,\" she smiled.\n\nI looked to Richard and saw him raise his eyebrows. \"If it will make you happy, princess,\" he smiled.\n\n\"It would, Daddy,\" Kami replied. She raised herself from Richard's lap and moved to kneel in front of him. She reached to pat my leg, indicating that I should scoot closer to which. After I moved, Kami leaned forward towards her father's half limp cock and took him in her mouth. Richard's hand reached for the back of her head as she began slowly bobbing on his cock, causing it to harden rapidly. Her left hand moved towards me and I enjoyed the feeling of her fingers around my own cock. She lovingly sucked Richard for a few minutes before she moved over in front of me.\n\n\"Oh,\" I moaned as she took me deep right from the start. I, too, reached for the back of her head and stroked her hair. As was usually the case, it took just a few minutes in her mouth before I was ready to move forward. She slipped her lips off me and moved over to the blanket. She knelt there briefly before she patted a place next to her.\n\n\"Daddy, come lay here,\" she beamed. Richard looked over to me and smiled before he stood up.\n\n\"She's like her mother, hard to resist,\" he chuckled. He laid back on the floor, where Kami leaned down to kiss him, before she threw a leg over him. Kami was soon riding him, his cock glistening with her wetness. I turned to see Angie walking back into the room with a small, pink handbag.\n\n\"You might need these,\" she smiled. I took the bag from her and opened it. I smiled as it contained sex toys as well as a large jar of petroleum jelly.\n\n\"Thanks,\" I said.\n\n\"No problem, Bradley,\" Angie replied with a smile. \"Just be gentle.\"\n\n\"You know I will,\" I smiled back. Angie sat down next to Mom, who looked a little wide-eyed. David was asleep on the couch next to her.\n\nI turned around to see Kami gently riding her father's cock. Her hips moved slowly and Richard's hands roamed her soft, alabaster-like skin. I knelt next them, directly behind Kami. Even though we'd done it regularly since the Bahamas, I still wondered how her tiny pucker accommodated me. She paused riding Richard and turned around to look at me.\n\n\"Take your time and get me ready,\" she cooed.\n\n\"Okay,\" I said. She moved back towards me so that her face was just above Richard's cock. I moved around behind her again and smiled as she wiggled her ass as at me. I placed my hands on her middle back and pressed forward slightly. She pushed her ass upwards as her face moved towards her father's hard cock. I watched briefly before I leaned forward to run my tongue through her wet slit. The combination of tastes was intoxicating and I lost myself there for several moments.\n\nEventually, my tongue moved up further to flick over her tight asshole. It tasted strongly of her pussy juice and I found it intensely erotic. I focused my tongue on her opening and probed lightly. I heard her moan softly, the sound muffled by her father's cock in her mouth. As I continued, I felt her muscles begin to relax and I was able to get a tiny bit of my tongue past her sphincter. Her moaning increased as I stiffened my tongue and started gently tongue fucking her.\n\nI continued that was for a while before I reached in the bag for the petroleum jelly. I opened and grabbed a fingerful that I generously applied to her tight hole. I massaged it in and pushed my index finger in slowly, meeting very little resistance until my fist met her firm ass cheeks. I smiled to myself and fingered her slowly spreading the jelly inside. When I added my middle finger, there was a little resistance and she tensed slightly. I slowed my pace as she adjusted to the new intrusion. Within a few moments, I was fingering her at a moderate pace and rotating my fingers to really stretch her out.\n\nI reached into the bag and found a toy that seemed to be about the right size for the next stage. I greased it up and placed the head at her slightly gaped hole. When I pushed forward, it slid right in. It was accompanied by a deep moan from Kami. She removed Richard's dick from her mouth for a moment.\n\n\"Fuck, I'm so ready for your cock in my ass,\" she purred.\n\n\"Just a little longer, babe,\" I reminded her.\n\n\"Hurry,\" she said before resuming sucking her dad's cock. I took out the bigger toy and greased it up. It was almost as big as me girth wise. I lined it up with her hole and she moaned as I pushed. I knew I was stretching her, but she didn't say stop. I continued until it was buried in her to the wide base. Her body tried to force it out, but I maintained enough pressure to keep it in place.\n\n\"I'm ready,\" she said abruptly.\n\n\"Are you sure,\" I asked.\n\n\"Yes,\" she said firmly. I held the toy as she moved back on top of Richard. She aligned his cock and bounced on him a few times before stopping. I swiftly greased my own cock before I pulled the dildo out of her. I moved up behind her, holding her hip with my left hand as I guided my cock towards her back door. I pushed forward with my hips and I felt the head slip in.\n\n\"Unnnggg,\" she groaned.\n\n\"Are you okay,\" I asked.\n\n\"Yes, just keep going,\" she insisted.\n\n\"Okay,\" I replied and I grabbed her other hip with my right hand. I continued to push forward and finally felt my hips against her ass cheeks.\n\n\"Fuuuuuucccckk,\" she groaned. \"I'm so full. It feels amazing!\"\n\nI pulled back and thrust in her again, slowly building a rhythm. Richard began to move underneath us, driving his cock upwards into his daughter's wet sex. I slipped my fingers in her garter belt and used it to hold on to her.\n\n\"Uh,\" Kami groaned as our cocks moved in and out of her. Without communication, Richard and I synchronized our movements so that our cocks plunged into her at the same time with each thrust.\n\n\"Oh,\" she groaned and threw her head back towards me. \"That's so intense,\" she squealed. I released her garter belt and reached to play with her breasts. I rubbed her nipples and felt her shiver. Mom and Angie joined us on the blanket and I smiled at them as I continued thrusting my cock in and out of Kami's tight hole. They merely watched at first, but I could see devilishness in their eyes. Angie reached out first and began to pet Kami's smooth skin followed soon by Mom. Their hands stroked her back and shoulders before they moved to her front. I removed my own hands and let them tease and torment her nipples.\n\n\"Oh, I'm so hot. I love having all of you touching me and loving me,\" she panted.\n\n\"She's so spoiled,\" Angie laughed as she winked at me.\n\n\"She is, but she's fun to be around,\" I grunted.\n\nI watched as first Angie, and then my Mom took turns kissing Kami. They weren't the soft tender kisses I'd observed Mom and Angie sharing, but the lustful kisses of a woman with two cocks inside her. When Mom and Kami parted, Mom looked at me and mouthed, \"Wow.\" I could only nod as I knew very well how Kami could kiss.\n\nKami's tight ass felt amazing and I found myself on the verge of losing control. She'd been squealing almost continually and I wondered how many times she'd came. I heard Richard under Kami.\n\n\"Daddy is going to cum princess,\" he said.\n\n\"Please Daddy. I want you and Brad's cum inside me all night long,\" she squealed.\n\n\"You're going to get it, baby,\" I reassured her. My hips went into overdrive and thrust my cock in her deeper with each thrust. She responded instantly.\n\n\"Oh, that's it. Give me those fucking cocks,\" Kami groaned. \"I want it all!\"\n\n\"Oh, Kami, I'm going to cum,\" I shouted. The words barely left my lips and I began to ejaculate deep inside her bowels. As I recovered, my hands roamed over her back and hips. Finally, she moved from between Richard and me so that she could rest next to her father. I laid down on her other side.\n\n\"You okay,\" I asked.\n\n\"I couldn't be better, but I'll be sore tomorrow,\" she laughed.\n\n\"I can imagine so,\" I smiled.\n\n---\n\nEventually, we said our goodnights and Kami led Mom and me to her bedroom. I took a brief shower only to find the two of them were both asleep. I crawled into bed between them and one after another, the rolled over in their sleep and I was able to hug them close to me. I gave them both a final kiss on the forehead before I faded out myself.\n\n---\n\nThe next morning, I woke up to find Mom gone. Kami was still curled up next to me. After I shook of the last traces of sleep, I could hear the shower running. After ensuring that Kami was still soundly asleep, I turned back the bedcovers and walked to the bathroom. The way the bathroom was laid out, I was able to brush my teeth without Mom observing me. As I approached the shower, I could see she was rinsing her hair and facing away from me. I opened the door and wrapped my arms around her.\n\n\"What,\" she asked, almost jumping in surprise.\n\n\"I just thought I'd join you,\" I smiled as she turned around.\n\n\"Is that so,\" she smiled back. I leaned down and kissed her softly. Apparently, that didn't satisfy her as she reached for the back of my head and kissed me deeply. After we parted I smiled.\n\n\"That was nice,\" I said.\n\n\"I know how Kami kisses you now,\" she said with a grin.\n\n\"Yes, you do,\" I laughed. \"Did you enjoy yourself last night?\"\n\n\"Yes, of course. It was wonderful, it's just...,\" she stopped herself. The look on her face made my stomach knot. Was it all too much for her?\n\n\"What's wrong, Mom,\" I asked.\n\n\"I know what you were feeling,\" Mom said.\n\n\"What do you mean,\" I asked. She rolled her eyes.\n\n\"You know what I mean. Being jealous,\" she replied.\n\n\"Oh that,\" I said.\n\n\"Yes, that. Watching you with Angie last night and then with Kami, I felt a little left out,\" Mom said.\n\n\"You seemed to be enjoying yourself though,\" I offered.\n\n\"Of course, I was, but that doesn't help that I was jealous,\" Mom replied.\n\n\"You weren't the only one, but I felt like I managed to deal with it,\" I said.\n\n\"Yes, by ignoring me all night,\" she replied.\n\n\"Hey, that's not fair,\" I replied.\n\n\"No, I'm sorry. It wasn't,\" she said, as she reached for me. \"There's just a lot of emotion in all of this and I'm afraid I've not fully faced it.\"\n\n\"I think I understand, Mom,\" I said.\n\n\"Do you,\" she asked.\n\n\"Yes. I mean when this all started everyone was free with me. Then things started developing between us. I thought that it would just stay separate but then when Richard and I discovered that you and Angie might be sisters, it started spiraling. Then we made love and I thought I could that separate from everything else, but that was stupid and selfish. When you called me out on it, it made realize how stupid I was being,\" I said.\n\n\"Yeah, but look at me,\" she replied.\n\n\"Mom, it's going to be okay. I promise. I wasn't ignoring you last night. I just wasn't going to be involved in everything you did,\" I said.\n\n\"I know that now,\" she said. \"It's not helping that you've already left home. I'm thankful for finding Angie, but it's just been you and me for a long time and now you're gone.\"\n\n\"Mom, I'm like an hour and 15 minutes away,\" I replied.\n\n\"But you have your own life with Kami and Carly,\" Mom interjected.\n\n\"I'm never going to be too busy for you, Mom,\" I said.\n\nShe smiled and reached for my neck under the spray. Our lips met. We kissed softly at first, but it escalated. Finally, I pushed her back against the wall. I reached for her butt and attempted to lift her up, but she declined.\n\n\"Baby, I'm 43 years old. Let's go back to bed,\" she smiled.\n\n\"We might wake Kami,\" I said.\n\n\"And that would be a bad thing,\" Mom laughed.\n\n\"She can be an angry little bear in the morning,\" I said.\n\n\"Maybe we can take that chance,\" Mom offered.\n\n\"Okay,\" I smiled as I reached for the shower door. After drying, we walked hand in hand to Kami's bed. She was still sleeping on the far side of the bed where I'd left her. Mom laid back on the bed and spread her legs. I immediately knew what she wanted and I knelt at the bedside. After a few quick kisses on her thighs, my mouth focused on her wet sex. I loved the clean taste coupled with my Mom's natural sweet juices. I focused on her lips and the slit between them, savoring every lap. She was enjoying herself, but from the motion of her hand on the back of my head, I knew she needed more. My tongue swirled up towards her sensitive little button.\n\nI found it swollen and I twirled my tongue around it, causing her to moan deeply.\n\n\"Oh, Bradley,\" she cooed.\n\n\"Mmmm,\" I responded as I worked to please and savor her sweetness.\n\n\"That's it, baby,\" she said. \"You know what I like.\"\n\n\"I try,\" I said quickly, before I resumed licking. She pushed her hips up and against my face allowing me even better contact with her sex. My lips closed around her clit and I sucked gently while continuing to swirl my tongue.\n\n\"Oh, Bradley, that's it. Suck it! Yes,\" she exclaimed. I continued and knew she was getting close. I remained focused and tried my best to accommodate the gyrations of her hips.\n\n\"Oh, don't stop! Keep going,\" she encouraged me. I wouldn't have stopped if I had to. I was going to make my Mom cum once again on my tongue. Her hips pressed against me violently and she groaned loudly.\n\n\"Fuuuuuucccckkk,\" she moaned. She didn't use that word often, and I took it to be something special. \"Uggghhhnnnnn!\"\n\nShe collapsed back against the bed and she began petting my head. I gave her pussy lips one final kiss before I moved up next to her so that we could kiss.\n\n\"That felt so good, baby,\" she said, as our lips parted. She had the most beautiful smile on her face.\n\n\"I'm glad,\" I replied.\n\n\"I tried to be quiet,\" she laughed.\n\n\"I enjoyed watching though,\" Kami said, her head resting on her pillow. I'd not even known she was awake.\n\n\"I'm surprised you didn't jump in,\" I smiled.\n\n\"No, that was very special. Seeing the guy I love the most, loving his Mom in the most intimate way,\" she said. \"I just watched.\"\n\n\"I see,\" I smiled.\n\n\"I'm going to wash up,\" Kami said, as she practically hopped out of bed. \"I won't be long.\"\n\n\"Please don't,\" Mom said in a low sexy voice. I looked at her curiously. \"What?\"\n\n\"Nothing, I like that voice,\" I replied.\n\n\"So did your father,\" she smiled. I laid on the bed next to her and she snuggled against me. \"I love you, Bradley.\"\n\n\"I love you, too, Mom,\" I replied, before I turned to kiss her forehead.\n\n\"I've missed that. Your father kissed me on the forehead every night before we went to sleep,\" she said.\n\n\"Really,\" I asked. She looked and smiled as she nodded her head.\n\n\"It was one of the things that made me love him even more. You're so much like him,\" she said.\n\n\"He was a good role model, I guess,\" I smiled.\n\n\"He was, but I don't know what he'd think of your current lifestyle,\" Mom laughed. \"He was a wonderful man and a great lover, but he was pretty straight laced.\"\n\n\"I can imagine,\" I smiled, before kissing Mom's forehead once again. Kami returned from the bathroom naked. She quickly snuggled up against my other side.\n\n\"Now,\" she announced. \"We can all have some fun.\"\n\n\"I can't wait,\" I said.\n\n---\n\nJackie, Carly and Jenn arrived home from New York on Sunday afternoon. They joined us at the Bennett home for dinner and it was great to have the \"family\" together all at once. Richard gave a little speech about Kami, Carly and I leaving to go back to school that night.\n\n\"We all wish the three of you the best in your studies,\" he concluded.\n\n\"Thank you, Richard,\" I nodded.\n\nHe smiled before he replied. \"Please keep the idea of medical school in mind.\"\n\nMom glanced at me curiously. \"I thought that you wanted to study engineering,\" she asked.\n\n\"It was just a suggestion Richard brought up Friday night,\" I replied. \"I'm just giving it some thought.\" She smiled and nodded.\n\n\"I'm certain he'll excel at whatever he chooses, Jill,\" Richard smiled.\n\n\"Yes, I think so, too,\" she smiled in reply.",
        "---\n\nAuthor's Note: I want to thank everyone that has read, voted and commented on this series. It has been fun to write and hear everyone's reactions. I'm going to take a break from it for now, though. I have many other stories started or in my head and I want to focus on those instead. I find I get well into a series and it's hard for me to keep it going. This one is still open for now and if I want to continue it, I can.\n\nP.S.: You will see some of these characters in the future in other stories. I'm working on a story line involving Kami, Carly and Brad after college. I look forward to hearing everyone's comments on anything I write. Except the Anonymous, \"You suck!\" stuff. That gets old.\n\nCheers, Nosebone."
    ],
    "authorname": "nosebone",
    "tags": [
        "polyamory",
        "mom and son",
        "cousins",
        "aunt",
        "father and daughter",
        "anal"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/was-it-the-wrong-number-ch-14"
}
{
    "title": "All Grown Up",
    "pages": [
        "Chapter 1\n\nKimber scanned the airport Starbucks, searching for an empty table. In her right hand she clutched a strawberry frappuccino, while her left hand pulled her rolling carry-on behind her.\n\n\"No such luck,\" she muttered to herself and scanned the area once more, this time for someone, preferably female, sitting alone. At a table bordering the concourse she spied a middle-aged woman alone, deeply engrossed in her book.\n\n\"Looks like a good choice,\" Kimber thought as she headed off in that direction, carefully weaving between the closely bunched tables. She had almost reached her destination when she glanced at a gentleman as he turned the page of his paper. Kimber stopped short, stunned by the face she knew so well.\n\nChapter 2\n\n\"Hello, Mr. Andrews - do you remember me?\"\n\nThe voice startled Ken, not because he didn't expect anyone to speak to him, but because he instantly recognized it. As he quickly lowered his newspaper, he was expecting to see a little wisp of a girl with long sable hair and translucent blue eyes. The face that greeted him still had the clear, innocent eyes but her dark mane was now chopped stylishly just above her shoulders. Though still petite, her former wispy frame now had curves and the young woman before him was no longer a little girl.\n\n\"Of course I remember, Kimber Nelson, of McKinley High fame. I'm assuming it still is Nelson?\"\n\n\"Still Nelson,\" she quickly responded, briefly waving a ringless left hand. \"I always was picky.\"\n\n\"And you always knew what you wanted and where you were going. So where did you end up?\"\n\n\"That is still to be determined. I've had a few sidetracks but I'm still moving forward.\"\n\nKen nodded. He remembered her as the little girl, full of fire and passion for knowledge. A year behind Dane, his son, in school, she was fiercely competitive, whether competing on the Academic Decathlon team or the tennis team - both activities that she had shared with Dane. Ken suspected that his son was the only reason she had joined the tennis team.\n\n\"Can I join you?\" she asked, almost tentatively.\n\n\"Of course!\" he answered, folding his paper and setting it aside. \"What brings you to Phoenix - or is this your home now?\"\n\n\"Nope, still in Sacramento - in fact, I have a place near the river, not far from downtown. I'm just here for a conference, and heading home now. What about you?\"\n\n\"I have a few clients here that I see once a month, but still Sacramento is still home for me as well,\" he explained. \"So what have you been doing for the last...\" Ken paused to do the computation, \"...ten years?\"\n\n\"The usual, college, grad school, working, starting my own firm,\" she stated casually.\n\n\"Well, that's not 'the usual' for most people - only the most motivated ones - and you were always a motivated one.\"\n\n\"That's a nice way of putting it - my mom calls it 'obsessed',\" Kimber responded, laughing.\n\n\"So, how about you? What have you been doing the last decade?\"\n\n\"Just getting older,\" Ken chuckled. \"It's what I do best these days.\"\n\n\"Well, you haven't changed a bit!\"\n\n\"That's because I was old ten years ago,\" Ken chuckled. \"You, on the other hand, have changed - all for the better.\"\n\nKimber smiled at the compliment.\n\nTheir conversation was interrupted by the announcement that Flight 1080 to Sacramento was now boarding.\n\n\"That's my flight,\" Ken announced, pulling his boarding pass from his coat pocket and flashing it toward Kimber in explanation.\n\nKimber saw the 'A' on his boarding pass, and showing him her ticket with its 'C' noted, \"It's my flight too - save me a seat.\"\n\n\"Sure,\" Ken shrugged, grabbing his briefcase and leaving his newspaper folded on the table as he made his way to the front of the line.\n\nIt was not unusual for Ken to run into old acquaintances, in fact, his kids thought it strange if he didn't find someone he knew wherever he went, from Disneyland to the Capital Mall.\n\nStanding in line, waiting for the plane to start boarding, he glanced back at Kimber. \"Maybe if Dane had known she would turn out like that, he might have shown more interest,\" Ken thought.\n\nChapter 3\n\nKen and Dane had always been close, fishing buddies when Dane was little and tennis buddies as he approached his teenaged years. So when Dane had approached his dad first about volunteering to help the tennis coach and then, later, acting as a tutor/coach to the Academic Decathlon team, Ken had readily agreed. Kimber had been hard not to notice on either team.\n\nKen had been asked to prepare the students particularly for the economics test and Kimber had been his most inquisitive student, often coming up with questions well beyond the scope of the Academic Decathlon competition - and sometimes asking questions for which Ken had to look up the answers.\n\nKimber's attraction to Dane had been fairly obvious from the first day in 'AcaDec'. It seemed to Ken that she was always around his son - in fact, it seemed to Ken that Kimber was always close to Dane whether in 'AcaDec' or on the tennis court.\n\nNot that she was a pest, she was entirely too sweet for that, just rather obviously infatuated. Ken had even mentioned her crush to Dane, who dismissed his dad's powers of observation as extremely flawed. \"Dad you don't know what you are talking about,\" was Dane's response every time Ken mentioned Kimber's crush. But it was obvious to Ken, especially when the bookish and decidedly unathletic Kimber had showed up for tennis with a racquet she had never actually swung before.\n\nKen remembered that day - he was conducting the fall 'off-season' tennis program when she had approached him very tentatively.\n\n\"What if someone doesn't 'actually' know how to play?\" she almost whispered.\n\n\"Then I will 'actually' teach her.\"\n\n\"Really?\" The word came out almost as a squeak.\n\n\"Yes, really!\" he assured her.\n\nBut an hour later he was rethinking his promise. It seems like everything related to the mechanics of tennis were completely foreign to Kimber. With every swing it seemed she was more likely to hit herself than the ball. When open courts were completed for the day, Ken was wondering if her parents could get their money back for the racquet because he never expected Kimber to ever set foot on a tennis court again. She finished out the day a totally frustrated young lady.\n\nTo his great surprise she was waiting for him the following day, and every day until the season started, and by the sheer force of her determination she eventually became good enough to secure a spot near the bottom of the junior varsity team.\n\nBy the following year, she was a mainstay on the varsity team - where she was a consistent winner over more experienced and talented players - simply due to her stubborn tenacity and the sheer fact that she refused to lose.\n\nChapter 4\n\nKimber waited for the plane to start boarding, her impatience showing in her shifting stance. She was still amazed to have run into Ken Anderson this far from home, and even more amazed that he had recognized her and remembered her name.\n\nKimber was not one of those people for whom high school had been the highlight of her life. The truth was that she had just 'survived' high school. There were very few high school moments that she could recall with fondness, and almost none that she would consider living through again.\n\nThe little girl with the thick mane of dark hair had not been particularly popular. In fact, Kimber had never actually had a date in high school unless you counted the times she attended school events with one of her fellow nerd guy friends as a \"date\". It didn't help that she looked like one of those starving kids you can feed for five dollars a month that show up on commercials in the wee hours of the morning. Kimber never considered her lack of social life to be a tragedy though, because in high school she had only been interested in one guy.\n\nChapter 5\n\nBoarding went quickly, attesting to the fact that Tuesday afternoon flights had few 'amateur' passengers - just seasoned 'pros' that traveled regularly.\n\nEntering the plane, Kimber spotted Mr. Anderson just a few rows back, sitting in the middle seat on the left side of the plane. He stood as she approached and pulled his computer bag out of the overhead compartment, leaving room for her carry-on.\n\n\"Which seat do you prefer?\" Ken asked.\n\n\"The window seat if that is okay.\"\n\n\"Please,\" he said, stepping out into the aisle to allow her access to her seat and slid in behind her.\n\n\"I see that you prefer to sit in the front as well,\" Kimber noted as they settled into their seats.\n\n\"When I was a kid I loved flying, now I just tolerate it, so I look for quick getaways,\" he chuckled. \"Unless I have checked baggage, and then I'd rather wait on the plane where I can at least see what the holdup is, then wait at baggage and have no clue what is holding things up.\"\n\n\"I feel exactly the same way,\" Kimber stated. \"How often do you fly?\"\n\n\"It feels like every day, but the reality is about six trips a month, and with the recession it is increasing - I have to expand my area to just keep the revenues from dropping.\"\n\n\"Does Dane work for you?\"\n\nKen smiled. He had been wondering how long Kimber could go without asking about his son. \"Not since college - he only works for me when he is desperate.\"\n\n\"I always thought he would work for you - and eventually take over the business,\" Kimber explained.\n\n\"That was his plan in high school, but college opened up his options and his dreams changed - as they should. The truth is that while I would have liked to have him in the business, I always knew that Dane would choose a different path. When you own your own business - no matter what it is - your primary job is selling, and Dane never liked selling.\"\n\n\"So what is Dane doing?\"\n\n\"He is in market research.\"\n\n\"Does he like it?\"\n\n\"Most days.\"\n\n\"Isn't that how everyone feels about their job?\" Kimber laughed.\n\n\"Pretty much,\" Ken agreed.\n\n\"Is he still in Sacramento?\"\n\n\"Roseville, actually.\"\n\n\"That's not far, do you see him often?\"\n\n\"We still play doubles together. Do you still play?\"\n\n\"Yes! I had an excellent teacher that gave me a great love for the game! Maybe we could play together sometime - I love doubles!\"\n\nKen was pretty sure with whom she was looking to 'partner'.\n\n\"Ken?\" A male voice interrupted their conversation.\n\nKen looked up to see one of his clients standing in the aisle.\n\n\"I thought that was you, I don't know how I missed you when we boarded, but this is my lucky day. We are having problems in my San Antonio plant. I was there today, but couldn't work it out. I was going to call you as soon as I got back to town. This saves me a phone call.\" The man in the crumpled suit plopped down in the empty aisle seat and opened his laptop. \"Here, I'll show you the numbers.\"\n\nKen was annoyed at his client's rudeness, glanced at Kimber to see if she was upset, and was met with the understanding look of a fellow entrepreneur, and with a shrug that said 'what can you do?', she reached for her laptop.\n\nKen focused on the numbers on the screen. \"At least this will be a profitable flight,\" he rationalized to himself.\n\nChapter 6\n\nThe flight attendants were making their final sweep of the plane when the client finally closed his computer and returned to his seat, but only after Ken promised to leave the following day for San Antonio to personally supervise the implementation of the solutions he had outlined during the flight.\n\n\"I guess you have one more flight this week,\" Kimber commented. \"How long will you be in San Antonio?\"\n\n\"I'll be home Friday night.\"\n\n\"Big weekend plans?\" Kimber queried.\n\n\"I wish!\" Ken laughed. \"The San Antonio plant doesn't operate on the weekend, no reason to stay longer.\"\n\nThe plane came to rest at the terminal and the cabin came to life with passengers retrieving their bags from the overhead and flowing toward the open doors.\n\nOnce on the concourse, Ken turned to say goodbye.\n\n\"I was really looking forward to catching up with you - but business is business,\" Kimber stated. \"Maybe we could do dinner sometime - I'll buy,\" she offered tentatively.\n\nKen almost blurted out that Dane was married with a kid, figuring that his son was what she was interested in catching up on, but decided that would be too direct.\n\n\"Sure,\" he said instead.\n\n\"So do you have a card? I'll call you when you get back in town,\" Kimber said.\n\nKen fished a card out of his suit pocket.\n\n\"Thanks,\" Kimber said cheerily as she slipped it into a pocket on her bag. \"Talk to you soon.\"\n\n\"Looking forward to it,\" Ken replied, although still not sure he actually was.\n\nShe disappeared in the crowd as Ken struggled to remember where he had parked this time.\n\nChapter 7\n\nFriday afternoon found Ken sitting in the conference room of the San Antonio plant, his coat tossed carelessly over the back of a chair, his sleeves rolled up to the elbow, the top button unbuttoned, his tie loosened and the flurry of activity that had been centered here was now over. In the quiet that remained he sat alone, one neat folder in front of him, ready to be tucked away in his briefcase. A few scattered papers remained, left haphazardly around the table. Tonight the cleaning crew would remove the last physical evidence of two long days of frantic problem-solving.\n\nMost of the men that had shared this table with him had gone home exhausted. Ken was energized - just like he always was when he had solved a problem or averted a disaster, or both.\n\n\"All charged up and no place to go,\" Ken stated to the empty room. Glancing at his watch, he started to pack up, as he still had hours before his flight and nothing to do. He had already checked out of the hotel room that he had barely used, the stack of pizza boxes on the file cabinet testified to the fact that he wasn't hungry.\n\n\"Maybe I can catch an earlier flight.\" He picked up his phone and clicked on the appropriate application. He had soon booked an earlier flight and was sliding his phone into his pocket when he got a text.\n\n\"Hi, hope you solved the problem in San Antonio. How does dinner tonight sound? It's on me! - Kimber\"\n\nDinner with anybody sounded better than eating alone - the question Ken was asking himself was what Kimber's motives were.\n\nIf she was looking to use him to reconnect with Dane, she was going to be very disappointed when she discovers that his son was now unavailable.\n\nIf she was looking to sell him financial services of some sort, she would most likely be disappointed as well - while Ken would listen, in this economy he wasn't looking to add any overhead costs.\n\n\"Kimber was a good kid,\" he thought, \"I should at least do dinner.\"\n\n\"Sounds good! Where?\" he typed back to her.\n\n\"Russo's - it's a Ma and Pa Italian place, across from Fremont Park on 16th Street. Good food, I promise. When can you make it?\"\n\n\"I'm still in San Antonio. My flight lands at 7:05. I don't have baggage - is 8:00 too late?\"\n\n\"Not at all. I'll get us a table. See you there.\"\n\nChapter 8\n\nIt was still ten minutes until eight when Ken wheeled his car into Russo's parking lot. The patio was crowded with people of all ages, laughing and talking between tables. The crowd was obviously comprised of locals from the neighborhood giving a feel of 'family' to the atmosphere.\n\nA silver-haired gentleman with bushy eyebrows and a ready smile greeted him from a stool by the front door. \"Welcome to Russo's! I am Angelo, my wife Luisa and I hope you enjoy your visit here. This is your first time here, no?\"\n\nBefore Ken could form his reply, Kimber spoke, \"He is with me Angelo.\" She surprised Ken with a warm hug and a faint kiss on the cheek. \"Glad you could find it,\" she said lightly holding both of his hands.\n\n\"The GPS helps,\" Ken explained as she led him to a small booth nestled in the back.\n\nKen noticed that Kimber had shed the corporate attire for a softer, more feminine look. Her light flowered skirt flowed around two very shapely legs that testified to the fact that she still worked out regularly.\n\nThey were barely seated when a sweet older lady, with hair more 'salt' than 'pepper' appeared at their side.\n\n\"Luisa, this is my friend Ken,\" Kimber explained.\n\n\"Good to have you with us.\" Luisa's tone was genuine and her dark eyes sparkled. \"Kimber is one of our favorite guests! Would you like an appetizer while you look at the menu?\"\n\nKimber looked at Ken and he shrugged.\n\n\"This is your place, I'm sure I will like anything you choose,\" he said in answer to her unasked question.\n\n\"Then we will have the antipasto salad, the small size, and two glasses of the House Red,\" Kimber declared confidently.\n\nAs Luisa moved away, Ken got the chance to concentrate on Kimber. Her sable hair was not straightened tonight, but had the soft waves that he remembered from a decade earlier. Her eyes, still as arresting as before, had lost some of their naivety, but still retained most of their innocence. The soft blouse brushed against her curves, its neckline revealed just enough cleavage to make Ken realize that he was going to have to will himself not to look.\n\n\"I wasn't sure you would accept my invitation,\" Kimber started, \"actually I am shocked that you remember me.\"\n\n\"I remember you very fondly - you were a very impressive young lady,\" Ken said sincerely.\n\n\"Well at least I made an impression on someone,\" Kimber laughed. \"I wonder how many of the people I knew in high school could even pick me out in a police lineup.\"\n\n\"Probably none. No one that knew you then would ever expect to see you in a police lineup,\" Ken reasoned. \"Now if it was a picture in Forbes, or The Wall Street Journal, that would be different - people would expect to see you there.\"\n\nKimber blushed just a little at the compliment.\n\n\"So what are the big changes in your life?\" Kimber asked.\n\n\"The big changes...\" Ken considered the question for a moment, \"well, in the last decade I have bought out my partner, got a divorce, and became a grandfather. That is in the order they occurred, in order of importance, they would be reversed.\"\n\n\"How many grandkids?\"\n\n\"Three. My daughter Kari has two sweet little girls, and Dane has a wild little boy. He gives him a run for his money.\"\n\nKen watched her eyes carefully to see how she would take the news. He detected nothing. Maybe she had gotten over her crush, Ken reasoned.\n\n\"Do you like being a grandpa?\"\n\n\"Yes, I think that being a grandparent is the reward you get for not killing your kids - even when they deserved it.\"\n\nKimber laughed.\n\n\"You always seemed to enjoy your business, is it better or worse since you bought out your partner?\"\n\n\"Both, I don't miss having to have to talk him into everything, but I do miss having someone to share the load and somebody off whom I can bounce ideas.\"\n\n\"So why did you buy him out?\"\n\n\"Not my decision, he wanted out, he didn't want to deal with the clients' problems anymore.\"\n\n\"It's problem solving that makes owning my own business fun,\" Kimber noted.\n\nLuisa reappeared with their appetizer, setting a large bowl in the middle of the table and small plates in front of each of them.\n\n\"Have you decided what to order?\" she asked.\n\nKen and Kimber looked at their unopened menus.\n\n\"Kimber, why don't you just order your two favorite dishes and we will share,\" Ken suggested.\n\nKimber nodded, quickly rattled off two menu items, and Luisa hurried away.\n\n\"Tell me about your business,\" Ken asked.\n\n\"Oh, I'm into financial services, pension plans, 401Ks, some investments, sometimes the whole employee benefit package.\"\n\nKen waited for the sales pitch and none came. Kimber just quickly answered his question and let the topic drop.\n\nThe conversation turned to the kids in 'AcaDec' and on the tennis team. They reminisced about funny and touching memories from the past and touched on some current events. The food arrived and Ken found it to be excellent. Luisa brought a carafe of the excellent House Red, and they emptied it, sharing the great food, memories and laughs.",
        "Chapter 9\n\nWhen they had each drained the last drop of wine from their goblets, Ken stated the inevitable.\n\n\"If we don't go soon, Luisa will be sweeping around us.\"\n\n\"Actually, Angelo does the sweeping,\" Kimber informed him.\n\n\"So you have closed this place before?\"\n\n\"More times than I can count.\"\n\n\"Can I walk you to your car?\"\n\n\"That would be very inconvenient for you,\" Kimber informed him.\n\n\"How far away are you parked?\" Ken asked.\n\n\"About a half mile,\" Kimber replied. \"I walked here from my place.\"\n\n\"Walked? You don't look like you need the exercise,\" Ken noted.\n\n\"I wanted some tonight,\" she stated.\n\n\"Then, can I offer you a ride home or do you still want the exercise?\"\n\n\"Well, the exercise would still be good for me, but I would accept a ride home - if that's okay.\"\n\n\"Very okay.\" Ken picked the bill up off the table while reaching for his wallet.\n\nKimber placed her small hand on his larger one. \"This is on me,\" she reminded him.\n\n\"I'm a little old fashioned,\" Ken informed her. \"I never have gotten used to women paying for my dinner.\"\n\n\"You don't have to get used to it, you just have to put up with it tonight,\" Kimber explained. \"Maybe I will let you get the next one,\" Kimber said with a slight chuckle in her voice and to Ken's surprise, he found himself eagerly looking forward to a next time and picking up the next check.\n\nKimber stopped and paid the check at the counter on the way out, while Ken waited at the door. With so few cars left in the lot, there was no problem finding the car or getting out of the lot.\n\nChapter 10\n\nFollowing Kimber's directions, Ken soon found himself in front of a small 'arts and crafts' bungalow nestled between and under majestic oak trees.\n\n\"No modern loft condo\"?\" Ken asked.\n\n\"Not my style, I guess I'm just an old soul,\" Kimber explained. \"Plus I value my privacy - like the old Frost poem, I sometimes believe fences do make good neighbors.\"\n\nKimber paused a moment before continuing, \"I have thought of you often over the years - including every time I play tennis. I have so much to be thankful to you for - from my love of tennis to my love of business and tons of things in between. Writers that you mentioned that have become among my favorites, artists you talked about, their prints are on my walls - your economic way of looking at life that is now my way. I want to thank you for giving me the opportunity to express the gratitude that I have felt for years.\"\n\nKimber's eyes held Ken's captive with their sincerity and earnestness.\n\n\"I always hoped that I was making a difference and I am grateful that you feel I made a difference in yours. I will not soon forget this night.\"\n\nKimber's eyes suddenly dropped, then, her face flushed a little. Her eyes slowly rose until they once again met his, \"I don't want you to ever forget this night.\" Her eyes dropped again and the color rose in her face. \"Would you consider coming in?\"\n\nChapter 11\n\nKen was stunned by her offer and what it seemed to imply. \"Me?\" he stammered.\n\n\"Yes - you!\" Her eyes captured his again. \"It has always been you.\"\n\n\"But you had a crush on Dane...\"\n\nKimber shook her head, \"Never.\"\n\n\"But you were always around him...\"\n\n\"Only when he was around you.\"\n\n\"But you took up tennis...\"\n\n\"Because you would teach me.\"\n\nOut of objections, Ken stopped, a look of amazement on his face. \"So way back then you...\"\n\n\"Wanted to do this,\" and Kimber leaned in and kissed him, tentatively at first, and more aggressively as she felt Ken return the kiss. She felt an almost 'out-of-body' experience wash over her. Kimber had arrived at the moment that she had dreamt of for so long and it was more than she ever imagined.\n\nTheir lips parted, tongues exploring, passionately probing each other's mouth. Kimber felt his tongue slide deep into her mouth and could not resist the urge to suck it even deeper inside her.\n\nThe aggressiveness of her action caught him by surprise and his wonder at what was happening burst into passion. Grabbing the sides of her face, he held it tight to his as he alternately pulled his tongue partially out of her mouth and then let her suck it deep into her mouth again.\n\nKen's hands roamed downward as Kimber turned in her seat so that she was facing him. She pressed herself against him, rubbing her breast across his chest, yielding to the hands that slid lightly over her shoulders and then slowly worked their way down her back, stroking, caressing, and pressing her against him.\n\nTheir lips finally separated, as if they were coming up for air, but Ken's lips moved immediately to her neck, kissing, sucking, gently biting her in a way that pulsated through her body and added to the wetness that grew rapidly between her legs.\n\nHis right hand found its way to her hip, slid around her ass and down the outside of her leg until it reached the hem of her skirt. Kimber felt its warmth on her flesh as it started its trip back up her leg. Almost involuntarily, she felt her legs part, inviting his fingers to explore her wet warmth.\n\nKen heard a contented groan escape her lips as his fingers found her wetness. He slid them inside her panties, two fingers sliding inside of her and his thumb finding her clit, massaging it in gentle circles that she soon matched with her hips.\n\nKimber's sensuous gasps and groans grew in intensity until her hungry mouth once again found his, and her orgasm exploded all over his hand.\n\nThe passion in the kiss slowly subsided as the waves of pleasure ebbed gently away. Kimber's hand found his crotch and felt his hardness there.\n\n\"We could be more comfortable inside,\" she suggested with a whisper.\n\nKen nodded his agreement as she extracted herself from his arms. He got out of the car, adjusting the bulge in his pants, and before he could walk around the car to open her door, she followed him out through his door, pushing the button that opened the trunk as she slid out.\n\n\"I assume your suitcase is in the trunk?\"\n\nKen nodded.\n\n\"I was thinking that since you said you didn't have weekend plans...\" Kimber paused for a moment, \"...that you might want to bring it in.\"\n\nKen immediately accepted the invitation by retrieving his suitcase and following her to the door.\n\nChapter 12\n\nKen entered the open door into the Spartan room with dark hardwood flooring, sparse furniture, and Van Gogh prints on the wall. He closed the door and locked it. Turning around, he discovered Kimber throwing herself into his arms with a kiss more passionate than those they had shared in the car.\n\nKen felt her wetness as she wrapped one leg around him and pressed her pussy against him, grinding softly against his member, which was growing uncomfortably in his pants.\n\nFeeling his member growing against her, she dropped her hand to his crotch and rubbed it - feeling its length, width and hardness through his pants momentarily before she gave into her desires and unbuckled his pants and slid down his zipper, freeing his manhood, which Kimber took in her hand slowly stroking it to its base, and then cupping his balls through his shorts before sliding her hand back up the length of it to the head, that managed to slip out of his boxers.\n\n\"Mmmmm...\" she moaned softly, \"the bedroom is over here.\"\n\nShe led him into a large master suite, obviously carved out of two bedrooms, the classic furnishings looked like they could have been there for 70 years, complete with a vintage four post bed.\n\nAs the door closed behind them, Ken wrapped his arms around Kimber from behind. She could feel his cock hard against her ass and his hands cupping her firm 'B' cup breasts, sinking his teeth softly into her neck.\n\nKimber leaned her head to the right, exposing more of her neck and Ken responded to the invitation gently kissing, sucking, and biting her neck as her body writhed in response, her tight round ass grinding into his cock - causing his ministrations on her neck and shoulder to escalate, setting off an ever increasing spiral of passion, until Ken could resist no longer and swept her up into his arms. He carried her to the bed, placing her there, and lying close to her, their eyes caressing, their tongues exploring, his hand reaching up under her skirt and slowly removing her well soaked panties.\n\nKimber responded by pushing down on his unbuckled and unzipped pants. Ken lifted his hips off of the bed to aid in her efforts. As her hands managed to work his pants and boxers off of Ken's hips, she brought her bare foot to his crotch, rubbing his now rock hard cock with it, before using it to push Ken's pants down to his ankles.\n\nKen took over from there, working off his shoes and then his pants and shorts, as Kimber unbuttoned his shirt and pushed it over his shoulders and off his right arm, then rolled him across her body and removed it from his left arm.\n\nNow on top, Kimber kissed him deeply, closing her hand around his cock, squeezing and stroking it until the need to have it inside her was so overpowering that she quickly straddled him and lowered her wet pussy over his hard shaft, sliding down until he was completely inside of her.\n\nKen reached up to touch her, massaging her breasts through her blouse and bra.\n\nKimber softly pushed his hands down and started to slowly unbutton her blouse. She tossed it aside before unclasping her bra and letting it fall from her shoulders. Finally, she unhooked her skirt and drew it over her head.\n\nKen looked up at the gorgeous girl above him, the now tousled thick dark hair framing the beautiful face with its translucent eyes under artfully shaped dark eyebrows, the contrast making him feel that through those eyes he could actually see into her soul. Ken felt her hips wriggle as she made sure that he was fully inside her, before she started to slide up and down his length, pressing into him at the bottom and rising up until the head of his cock was just at the edge of her pussy before driving down on him again, and again, and again, maintaining a steady rhythm.\n\nThis was the cock that Kimber had always imagined riding and it was the perfect fit that she had always imagined it would be, thick enough to stretch her but not to the point of pain, long enough to fill her pussy but not so long that she could not take in his full length. The perfection of the fit allowed her to ride him without caution in increasingly faster strokes as she felt the stirrings of another orgasm starting to build in her body.\n\nKen watched the tight young body on top of him rising and lowering, her pert, firm 'B' cups bouncing slightly with each stroke, and he could not resist reaching up and touching them, cupping them in his hands, squeezing her nipples between his fingers in time with her strokes. Ken felt her pace increasing as he watched her beautiful face, her head tilted slightly back, eyes closed, softly biting her lower lip as deep moans started to escape her lips at the bottom of each stroke.\n\nKimber was loving the feeling of his large hands on her bare breasts, her nipples hard and stimulated between his fingers. She leaned into his hands to increase the pressure on her breasts, throwing her head back further and surrendering to the feeling playing out inside her - allowing louder and louder moans of pleasure to escape her lips as she felt the slow rise of her orgasm.\n\nOne of his hands left her breasts as he spread the fingers of the other hand so his thumb worked one nipple and his ring and little fingers the other one - his whole hand pressing Kimber's breasts together. It felt so good that Kimber took an involuntary deep breath and just as she started to let it out, she felt his free hand slide down her stomach and his thumb find her now swollen clit. He started to massage it, causing her breath to catch again, and Kimber's hips to stroke him faster, pounding down on him as she pushed toward her rapidly building climax.\n\nKen was thrusting upward in time with her accelerating stroke - straining against his desire to cum until he was forced to surrender to the passion of the woman that was riding him and he felt his cock explode inside her, shooting his load deep inside her, pulsing with pleasure.\n\nKimber felt the explosion inside of her in every nerve ending in her body and the orgasm that had been building up broke through with the sexual force of a bursting dam - washing over, around, and through her - carrying her away before depositing her, exhausted, sprawled across Ken's chest.\n\nChapter 13\n\nAs the intensity of their shared orgasm subsided, Kimber snuggled into his arms, his now spent cock still inside her, enjoying the soft pulses of her vaginal walls and sharing the afterglow of their passionate union.\n\nAfter a while, Ken finally broke the silence.\n\n\"So, this is what you had planned for tonight?\" he asked softly.\n\n\"For a lot longer than tonight,\" Kimber replied. \"I've been living this moment in my mind for more than a decade, remember.\"\n\n\"And you walked half a mile to the restaurant.\"\n\n\"So you would have to drive me home,\" she admitted.\n\n\"So you lied to me about wanting some exercise?\" Ken teased.\n\n\"You don't think this is exercise?\" Kimber responded playfully. \"When I told you that I walked because I wanted some exercise tonight, this is exactly the exercise that I wanted.\"\n\nStill laying on Ken's chest Kimber felt his gentle chuckle more than heard it.\n\n\"So how was your 'workout'?\" he asked.\n\n\"I hope it's not over yet,\" she answered seductively, as she started to kiss Ken on the neck and shoulders, nipping him playfully between kisses.\n\nKen turned his face toward her to once again capture her mouth only to have Kimber avoid his lips and start sliding down his body, trailing kisses down his chest, across his abdomen, closer and closer to his reawakening manhood.\n\nShe felt his body tense with the anticipation of her mouth on his cock and decided to tease him a little.\n\nLetting her hair play across his hardening rod, she kissed and licked a trail, first down one side and then up the other. She then softly licked the base of his shaft all the way around before sliding the firm tip of her tongue up the inside of his now rock hard cock. After flicking the head of his cock a few times in a darting motion she briefly took the head into her mouth and sucked on it deeply for a moment then continued her teasing by sliding her tongue up and down Ken's now throbbing cock. She left a new trail of kisses down the inside of one leg and then slowly up the inside of the second one.\n\nKimber was wondering how long he would let her keep up this teasing when Ken, almost panting, suddenly and forcefully answered her question by grabbing her shoulders and lifting her up on the bed beside him before rolling up on his knees to straddle her. \n\nStartled, Kimber looked up at Ken who was towering above her. His magnificent cock was fully erect and pointing at her, potent with a lust that would not be denied. She found herself drawing her legs up almost defensively, but at the same time opening them wider to him and showing Ken her creaming and dripping wet pussy. She watched Ken's chest expand with a long, slow, deep breath that ended with an involuntary shudder before he fell on her, pushing her legs wide apart as he buried his tongue into her wetness, lapping with an insistent hunger before turning his attention on Kimber's swollen clit, playing with it with the tip of his tongue then using his lips to suck it with a gentle pulsating motion.\n\nKimber moaned softly and writhed with pleasure as Ken's mouth brought her closer to still another orgasm. The sensation fueled her desire for the next level and she was near desperate to feel Ken's shaft stroking the inside of her pussy.\n\nAs though he could read her thoughts, Ken's mouth released Kimber's clit. He rose up to his knees and in an animal frenzy Ken pushed her shapely legs wide apart and plunged his cock balls deep inside her. Kimber heard herself shout \"yes!\" and was surprised by her uncharacteristic outburst. Ken, encouraged by her shout started pounding her pussy - hard and fast, his body releasing all the hunger, lust and passion for Kimber that he had long suppressed.\n\nKimber reveled in Ken's lust and passion. This was the man she had always wanted. For so long, she had fantasized about a man who could not control his passion for her. The knowledge of his lust drove her almost immediately to the edge of orgasm.\n\n\"Oh fuck!\" Kimber shouted even louder than before. \"Oh fuck! Oh fuck! Oh fuck!\" Taking her shouts as commands, Ken rammed her harder and harder, faster and faster. \"Oh fuck me!\" Kimber cried out as an orgasm, more intense than she had ever felt before seemed to first slam her into the bed and then lift her off the bed, out of the bedroom to someplace in space or time where there was just her pleasured cunt accepting over and over the powerful strokes of Ken's cock.\n\nKimber's shouts of \"Oh fuck me!\" got louder as a second orgasm, more powerful than the first continued to lift her. It was so intense that Kimber was not sure if what she was experiencing was pleasure or pain, but she cared little. She just wanted more.\n\nAs a third orgasm started to overtake Kimber, she felt Ken thrust deep and hard and felt his hot cum shooting deep inside her and a warm wave rolled over her. The multiple orgasms, the first of her life, had left Kimber nearly delirious and exhausted, and she could tell that Ken was spent as well. Not wanting to lose the connection she pulled Ken gently down on top of her, heart rates and breathing syncing in pattern, both of them shining with a light glean of sweat.\n\n\"Aren't I too heavy?\" Ken whispered.\n\nKimber shook her head in response, realizing then that with Ken it was different. Always before having a man's full weight on her had felt restrictive and oppressive, but Ken's weight just felt protective. When they had finally both come back to reality, Kimber heard Ken whistle softly.\n\n\"Are you always like that?\" he asked.\n\n\"Are you?\" Kimber shot back.\n\n\"Not ever that I can remember.\" Ken confessed.\n\n\"That was a first for me too.\" Kimber admitted as well. \"You are an amazing lover.\"\n\nKen shook his head. \"I think that it was all you.\"\n\n\"It must have been a sexual synergy - that we are better together than either one of us is alone,\" KImber suggested.\n\n\"Sexual synergy? Is that a scientific theory or something you are just studying on your own?\"\n\nKimber looked at Ken with one eyebrow raised and asked, \"Think it will work every time?\"\n\n\"Maybe- at least I hope so,\" said Ken grinning from ear to ear. \"I'm glad to see you have your sights on future experiments, but for now you'll have to give this old guy some serious recovery time before we begin any further research.\"\n\n\"I can wait,\" Kimber informed him, snuggling down into his chest for a moment. \"If we are going to start the recovery process, do you think we should actually get in the bed? Under the covers and everything?\" Kimber asked.\n\n\"Yes, definitely,\" Ken replied.\n\nOnce in the cool sheets, Kimber's head back on Ken's chest, their bodies intertwined, they each drifted to the place between slumber and consciousness, a sort of fugue state where dreams and reality mesh and the mind becomes uncertain which is the truth. Neither wanted to fall too deeply into the dream for fear the reality would not last.\n\nChapter 14\n\nThe morning crept up slowly on Ken. The tree covered lot had defused the morning light until only scattered rays managed to find the bedroom windows, none offering enough light to bring him to consciousness. It was Ken's sense of smell of which he was first aware this morning, the subconscious scent of sex followed next by the clean smell of soap wafting in from further off. Still semi-conscious, Ken reached over toward Kimber only to find that he was alone on the bed. As he opened his eyes Ken became aware that a running shower in the attached bath was the source of the faint scent of soap in the room. Tossing aside the sheet he rose and made his way to the bathroom.",
        "The large, remodeled bathroom was modern while still paying homage to the artistic heritage of the house. Steam was billowing from a large walk-in shower and Ken could hear Kimber singing something softly inside, the words and melody muffled by the sound of the water. Unable to resist, Ken slipped into the shower. Kimber stood in the middle of a large spa shower about six feet square. She was washing her hair under a large shower head while her body was being sprayed by multiple shower heads set in the walls.\n\nKen was taken aback by the sight of her. Kimber's slim body was perfection itself. Even with her thick mane of sable hair calmed by the water that made it a slick black sheet flowing back from her delicate face, she was breathtaking. The proportions of her body balanced perfectly - her slender neck and defined athletic shoulders over perky full \"B\" cups with nipples hard under the stimulation of the shower spray.\n\nThe spray caressed Kimber's curves, running down her flat stomach, over her tight bubble butt and sensuous hips. A steady stream of water funneled through her sexy, shaved pussy, down athletic legs to what in other times might have been called \"well turned\" ankles ending at the small feet with their perfectly manicured toes.\n\nThe whole of her literally took his breath away and Ken found himself in awe, feeling slightly like some voyeur stalker type as he stood silently watching her.\n\nKimber seemed to sense his presence and opened her eyes without the slightest alarm.\n\n\"Hi! I was hoping you would join me, but I didn't want to interrupt the recovery process\", Kimber joked playfully. Then noticing the effect on Ken's member from his silent observation of her, she added \"It looks like it is going really well\".\n\nKen almost blushed.\n\n\"Shall we shower together?\" she asked, handing him a bar of soap.\n\nKen nodded and took the offered soap, but instead of lathering his own body he started to soap Kimber's. Starting with her neck and shoulders, he worked his way down her body, reaching around to soap her breasts slowly and gently. Ken felt Kimber's body reacting with his every touch and the effect on him was powerful. The pretense of washing gave way to the growing passion and soon his soapy hands were roaming, exploring every curve and crevice of her yielding body.\n\nKimber was no longer aware of the spray of the water. Instead, all her senses could register were his hands stroking, caressing, and probing. Upon closing her eyes, the physical sensations gave way to the non-physical plane and his hands floating over her skin, sculpting her every curve and crevice.\n\nKen's hand slid down between her legs and a finger slid through the slick lips of her pussy. Instinctively, Kimber found herself raising one leg to allow his fingers better and deeper access.\n\nKen slid his right hand between her legs, his fingers probing her inner wetness before starting to play with her swelling clit. His left hand slid down her back, the fingers exploring her firm, round cheeks, sliding over her tight and tempting anus until, they too, found her succulent pussy, and began plunging in and out.\n\nKimber's gentle moans grew in intensity with the movement of Ken's hands, soon giving way to loud gasps and cries of desire. When she climaxed it was with such intensity that Kimber felt her eyes roll back in her head and only by clinging tightly to Ken was she able to remain standing up.\n\nKen swept Kimber up into his arms, kissing her passionately and insistently, sucking on her lips and tongue, trying to devour her, before sitting her down on the bench that ran the length of the shower while she regained her composure. Ken knelt down in front of her, continuing to kiss her tenderly and soon the passion overwhelmed them with a consuming hunger.\n\nKimber's slippery and soapy hands found Ken's cock she began to wash his manhood, loving how hard and long it was becoming with her touch. Turning Ken around towards the spray, Kimber rinsed the soap from his shaft before turning him back and taking him into her mouth, licking his cock, kissing and sucking on the head. Ken felt all the blood rushing from the head on his shoulders to the one between his legs. He looked down in wonder at the youth and beauty of the woman that was bringing him so much ecstasy, only to see Kimber's eyes fixed upward with the same look of wonderment.\n\nKimber had settled into a steady rhythm as she moved her mouth up and down his cock, swallowing him deeper with each stroke of her lips. She felt Ken's hips moving in rhythm with her and felt his hands gently grab the back of her head encouraging her to take him deeper and deeper. The feeling of Ken fucking her mouth was turning her on and she could feel the moisture building up between her legs. Kimber dropped one hand from Ken's cemented erection and started to rub her own mound vigorously.\n\nWatching his cock move in and out of Kimber's mouth was such an incredible turn on that Ken had to place one hand on the shower wall to keep his balance. He felt Kimber's speed increase as the hand between her legs brought her closer and closer to her own climax. Ken felt himself losing all control. \"I'm coming\", he gasped in warning - not sure if Kimber was willing to take his load in the mouth.\n\nKimber heard his announcement and sucked hard on Ken's member as his cum was pumped into her mouth in spurts. She swallowed once, pulling his cock further down her throat, and sucked on him again.\n\nKen was amazed at Kimber's skill - in his limited experience most women had sucked either too hard or not hard enough - Kimber's mouth was like the perfect pussy, just tight enough and able to provide breathtaking stimulation.\n\nKimber looked up at Ken, and as if she could read his thoughts she slid her mouth off his still pulsating cock. With the rest of Ken's sperm splashing on her face and dripping onto her breasts, she opened her mouth to show him the cum there, smiled and swallowed before she went back to sucking him dry.\n\nWhen the blood returned to his brain Ken lifted Kimber's face back to his and kissed her deeply under the shower. \n\n\"I think I owe you an orgasm\", Ken noted, reaching a hand toward her womanhood.\n\nKimber's hand stopped his, \"After last night I'm not sure you owe me one, and I think my kitty needs a rest\", she explained.\n\nThey continued to kiss under the spray of the shower, long tender kisses almost playful, until the water temperature started to drop - forcing them to turn off the shower and reach for towels.\n\nWhen Kimber finished toweling off she dropped her towel. Ken loved how comfortable she was being naked and dropped his towel as well and followed her back to the bedroom.\n\nKimber considered the unmade bed for a minute.\n\n\"As tempted as I am to just hop back in bed...\" Kimber began.\n\n\"...I, for one, would benefit from more recovery time\", Ken finished. \"Maybe we should make the bed to avoid the temptation\", Ken added.\n\nThe bed quickly made, they sat on each side facing one another.\n\n\"What now?\" Ken asked, a little concerned that their time together was coming to an end.\n\n\"Do you still keep your tennis bag in your trunk?\" Kimber asked.\n\n\"At all times\", Ken assured her.\n\n\"Then let's go get breakfast and play some tennis\", Kimber suggested. \"I have a membership at the downtown club. I'll drive\".\n\nChapter 15\n\nKimber's game had markedly improved since her high school years and Ken was happy that they were just hitting and not playing a competitive game because he didn't want the embarrassment of her beating him. Not that it would have been fair because there was no way that he could concentrate on the ball with her tight body in the form fitting tennis outfit and her perfect legs revealed under the short tennis skirt.\n\nAfter about twenty minutes a young man approached their court. He was tall, dark haired, attractive and fit - and pointedly ignored Ken as he spoke to Kimber.\n\n\"Up for some doubles, Kimber?\" He asked.\n\n\"Hello, Michael, I would like to introduce you to my close friend Ken Andrews\", Kimber responded.\n\n\"Hi\", Michael replied with no more than a glance in Ken's direction. \"A few of us are looking to play some doubles, are you in?\" The question was obviously directed to Kimber alone.\n\n\"What about it Ken? Do you think we should play?\" Kimber asked.\n\n\"I was hoping you would partner with me\" Michael interrupted.\n\n\"Ken is my doubles partner\" Kim said pointedly.\n\n\"Since when?\"\n\n\"Since he taught me to play. Want to show them how it's done Ken?\"\n\n\"Sure\" Ken replied with more confidence than he actually felt.\n\nKen soon discovered that he didn't have to worry, Kimber's court movement was a perfect complement to Ken's shot making ability and they managed to defeat all challenges, including Michael and the tall blonde tennis instructor that he found to play with.\n\n\"Are you always that good?\" Ken asked as they left the court.\n\nKimber laughed. \"Are you?\"\n\nKen's turn to laugh, \"So we have tennis synergy as well?\"\n\n\"I guess so!\" Kimber smiled and literally skipped ahead of him, her short skirt flipping up in back reminding Ken of the perfect ass it covered.\n\n\"How about lunch?\" Ken called ahead to her. \"My turn to buy\".\n\n\"Where?\"\n\n\"How about here? By the pool?\" Ken suggested.\n\n\"Sure. But I need to visit the restroom first\".\n\n\"Good idea,\" Ken responded as they headed to their respective locker rooms. Ken was wiping his hands as Michael entered the restroom. Michael eyed Ken for a minute, sizing him up, apparently not able to come up with a rational reason that Kimber would be with the unremarkable, older guy.\n\n\"So Kimber said the two of you were old friends,\" Michael probed.\n\n\"Yes,\" Ken returned simply, not about to offer an explanation.\n\n\"Well, if you are hoping to get some you are going to be disappointed. Kimber looks hot but she is pretty much a cold fish in bed.\"\n\n\"I've always thought that a gentleman doesn't kiss and tell,\" Ken suggested, starting to step around the younger man.\n\n\"Oh this isn't 'kissing and telling'. It can't be since Kimber doesn't like to kiss. Hey, I'm just giving you some friendly advice. Don't get your hopes up too high, and a bit of warning - don't try anything with that perfect ass. If you just touch her asshole it's 'game over', friend.\"\n\nKen slowly and deliberately turned his head to make eye contact with the younger man. \"Friends are made by choice,\" Ken replied with a tone that knocked the arrogance out of Michael's face immediately. \"I would never choose you as I have higher standards. Nothing personal.\"\n\n\"Friend or not, you should know that when it comes to men, Kimber has a short attention span. She will probably have a new 'doubles partner' next week!\" Michael squeaked back in return, his former bravado now lessened to nearly a whine.\n\n\"That's Kimber's business,\" Ken noted as he wadded up the paper towel still in his hand and tossed it to Michael then turned and exited the restroom.\n\nLunch was good; conversation was easy and unforced, and was never marked by an uncomfortable silence.\n\nKen noticed Michael watching them from across the pool. Michael was obviously still pissed off about their locker room conversation, and still curious about Kimber's relationship to Ken.\n\nKimber followed Ken's eyes to Michael, then pointedly reached across the table and took Ken's hand until Michael left the pool area.\n\n\"You haven't asked about Michael\". Kimber observed.\n\n\"It is none of my business\". Ken answered simply. Kimber nodded.\n\nAs the plates were taken, Kimber sipped her iced tea and sighed softly.\n\n\"If this was your club we could go for a massage right now\", Kimber noted.\n\n\"I actually give a pretty good massage\", Ken informed her.\n\n\"Sounds good to me!\" Kimber replied. Without further discussion, Kimber stood up, grabbed her bag and headed for the car as Ken scrambled to keep up with her.\n\nChapter 16\n\nIn spite of the brightness of the day outside the heavy tree cover kept Kimber's home dark and cool. Almost as soon as they were inside Kimber turned to Ken and asked, \"Where would you like to give me my massage?\"\n\n\"Well, unless you have a massage table, I guess the bed will do\".\n\n\"Okay, I'll be right back\", she informed him disappearing into her walk-in closet.\n\nKen turned the radio on, reduced the volume, and tuned it to a smooth jazz station. Noticing that there were a few candles in the room he looked briefly for matches, failing to locate them he called out through the closet door, \"Do you have matches for the candles?\"\n\n\"In the smallest drawer in the kitchen\", came her reply.\n\nSecuring the matches Ken lit the candles, which turned out to be lightly scented, and drew the blinds shut.\n\nJust as he finished setting the atmosphere, Kimber entered the bedroom wearing nothing but an open short silk robe, and carrying a clean white sheet and a bottle of massage oil that had never been opened.\n\n\"I knew I had this somewhere\", Kimber told him, indicating the bottle of oil.\n\nTogether they spread the sheet on the bed, Kimber handed Ken the oil, slipped off the robe and laid face down on the bed.\n\nKen removed his shoes and socks and started to crawl on the bed.\n\n\"Why stop there?\" Kimber asked. Ken immediately removed his shirts, shorts and underwear and climbed on the bed.\n\nWarming the vanilla scented oil in his hands as he went, Ken started at the back of her neck and, ever so slowly, moved down her body. Strong fingers working individual muscles loose, his wide hands spreading the relaxation across her shoulders, upper and lower back, down to her magnificent ass - where Ken lingered, in part because of its perfection, but mostly because it was obvious that she was enjoying his ministrations there.\n\nReluctantly he moved down again slowly working every residue of tension out of Kimber's thighs, calves, ankles, feet and toes.\n\nKimber felt herself melting into the bed with the expertise of Ken's touch. As her body relaxed so did Kimber's mind and she slipped into a semi-consciousness during which she had the illusion of floating.\n\nKen started slowly back up her body, pleased to find every trace of tension gone, her body yielding to his every touch, the oil on Kimber's body glistening in the candlelight. The outside world had slipped away and the two were present in a world of their own making, far and distant from the normal chaos known as 2 pm.\n\nAs Ken's hands kneaded Kimber's ass once again, a slight motion and almost inaudible moan of pleasure were his first indication that she was not completely unconscious.\n\nWith the encouragement of her moan Ken started to rub her ass more deeply with oily hands that allowed Kimber's skin to slide through his fingers more smoothly. Grasping one cheek firmly, he let a finger touched her anus, momentarily applying pressure there - and her, apparently involuntary, reaction was toward, rather than away from the pressure.\n\nEmboldened by Kimber's reaction, Ken increased the pressure of his finger on her tight hole. Kimber arched her back while lifting her ass off the bed, pressing against his hand and writhing in pleasure from the pressure of Ken's touch there.\n\nKen accepted her invitation and slowly pushed one finger inside her - just past the tight ring of her anus. Kimber's hips rotated in pleasure, so Ken pressed the well-oiled finger slowly into her tight hole, holding it there inside her.\n\nAfter a few moments Kimber's hips began to move again - this time to encourage Ken to finger fuck her tight ass hole. Ken could smell the juices that were almost flowing from her pussy. Each stroke of her hips increased in speed and length encouraging Ken to finger fuck her deeper. However, in her enthusiasm, Kimber caused Ken's finger to slip out of her all together.\n\n\"Please, don't stop\", she begged raising her ass even higher. \"Please, please...\"\n\nKen could see her creamy pussy and slid his fingers through out it until he touched her button and started to rub it.\n\nKimber's response was to continue to writhe under his hand, obviously trying to renew Ken's anal play, while she continued to moan, \"Please, please, please...\"\n\nKeeping his fingers working in Kimber's pussy and clit, Ken took the hint and pressed his thumb into her anus.\n\nKimber caught her breath and began to moan louder. \"Oh, Yes! Yes! Yes! Oh fuck yes!\" she cried out.\n\nKen's hand started to finger fuck both her pussy and her ass vigorously as Kimber shouted out her growing pleasure until her orgasm pounded into her like a tidal wave, robbing her of the ability to vocalize the intense pleasure, and left her trembling and spent on the bed.\n\nKen started to remove his hand.\n\n\"No, please don't\", she begged without moving a muscle, \"not yet. Please\".\n\nKen lay by her and waited. When Kimber finally let him remove his thumb from her anus, she whispered \"I want you to cum in my ass\".\n\n\"Really?\"\n\n\"Yes, I want you to be the first...\" Kimber whispered so softly he almost couldn't hear her.\n\n\"Okay. Are you sure?\" Ken asked uncertainly.\n\n\"Please\". She moaned louder.\n\n\"Now?\" Ken asked.\n\n\"Yes, now\". Kimber urged him moving around so that her ass was toward the edge of the bed. \"Please\".\n\nKen looked at the perfect, well-oiled ass with its tight anus and his cock did not need any further encouragement.\n\nOiling it up quickly, Ken placed his now rock hard cock at her virgin opening and pressed it very slowly.\n\n\"Oh, yes\", Kimber breathed out slowly. \"ohhhhh, yessss\".\n\nIt seemed to Ken that as his cock slowly slid deeper in her that Kimber became more and more relaxed.\n\nWhen Kimber finally felt Ken's hips against her ass, signaling that he was completely inside of her, she moaned again \"Yes, yes...\" and started slowly rotating her hips forward and backward until Ken took over, increasing the depth and speed, with Kimber's encouragement until he was fucking her with full pounding strokes.\n\n\"So incredible\", she whispered, \"so fucking incredible!\"\n\nAs Kimber's breaths became shorter and her hips started to pump, Ken reached her pussy with his right hand and rubbed it vigorously pushing her, and himself, closer and closer to the edge of climax. His left hand found her breast and grabbed it, squeezing it and pinching her nipple as he felt her cum on his hand and he finally slipped over the top and came himself, shooting semen into her ass.\n\nKen withdrew slowly out of her, laid down beside her and started to rub her back again. After a few minutes he leaned over her to gently kiss her cheek and tasted the salt of tears there.\n\n\"I've hurt you, I am sorry\", he whispered.\n\n\"No\", Kimber whispered, as she rolled over on her side to face him, revealing tear stained cheeks. \"These are not tears of pain\".\n\nKimber saw the questions in Ken's eyes, questions she was not ready to answer. She reached out with her left hand and brought his face to hers for a gentle kiss. \"Not tears of pain\", she repeated kissing him again. \"Please believe me\", she added, closing the subject.\n\nChapter 17\n\nKimber woke up alone on the bed, the candles had been extinguished and the deepening darkness let her know that the sun was setting outside. A rustling of activity somewhere outside the bedroom reassured Kimber that she was not alone. Finding her short silk robe where she had dropped it earlier, Kimber slipped it on and headed out of the bedroom.\n\n\"Any ideas about dinner?\" Kimber asked, walking into the kitchen.\n\nKen was standing in the kitchen, barefoot in a t-shirt and boxers. On the counter in front of him was a bowl in which Ken was assembling a salad.\n\n\"From the content of your fridge it seems that you like salad\", Ken explained. \"Hope you don't mind...\"\n\n\"I love it\", Kimber interrupted. \"My favorite meal is one that I don't have to make. You are welcome to make breakfast tomorrow as well\", she added as she stepped up to the counter and started to help him by tearing lettuce.",
        "Ken deftly sliced first an apple and then a pear into thin slices before adding them to the bowl. Kimber was impressed with Ken's cutlery skills.\n\nKen finished the salad with some chopped nuts and a raspberry vinaigrette he found in the fridge.\n\nKimber added a couple of glasses of good wine and they retired to the small table by the bay window looking out over the backyard.\n\nAs usual the conversation was lively and easy as they shared memories, observations, and values - from the profound to silly. Soon their facial muscles were both feeling deliciously tired from smiling too long and too broadly.\n\nWithout any direction or conversation between them, they cleared the table and did the dishes together. Again, by unspoken agreement they ended up cuddling on the couch.\n\n\"Should we see if anything good is on?\" Kimber asked brandishing the remote.\n\n\"Sure\", Ken replied.\n\nKimber clicked on the TV and found the guide channel. A steady stream of programs rolled by, sports channels, home and food channels, shopping channels, kids' channels, and movie channels.\n\nThen on one of the classic movie stations they saw \"The Philadelphia Story\" and they both reacted at once.\n\n\"That one!\" Ken exclaimed.\n\n\"Yes\", Kimber agreed, clicking on the channel. The opening credits were still rolling. \"I absolutely love this movie!\"\n\n\"You really are an old soul\", Ken observed.\n\nKimber nodded and then snuggled down into his arms, to watch the movie. Draping her right leg across Ken's lap, Kimber slid her right hand under his shirt, her fingers playing lightly with his chest hairs as Ken's left hand softly stroked the leg across his lap, matching Kimber's easy familiarity with his own.\n\nThey were soon lost together in the movie laughing at the same lines, speaking along with their favorite lines, which were often the same. Commercial breaks were spent with soft intimate kisses. When Dexter and Tracy were finally back on board the \"True Love\", and the final credits were rolling, Kimber gently kissed Ken on the neck.\n\n\"Interested in some dessert?\" she asked.\n\n\"Definitely!\" came his reply.\n\n\"What did you have in mind?\"\n\nA twinkle passed across Ken's eyes. \"You!\"\n\n\"That can be arranged\", Kimber replied with a laugh.\n\n\"But I want to warn you that I prefer to take my time and savor my desserts\", Ken stated suggestively.\n\n\"Mmmmmm, nice\". Kimber snuggled closer, sliding up on to Ken's lap as he enfolded her in his arms and kissed her unhurriedly yet very intimately.\n\nHolding onto each other lightly, they exchanged soft kisses that fell gently on lips, and cheeks, and eyes and ears, and necks and shoulders. Kisses that did not hurry because time might be short, kisses that did not push forward but instead lingered contentedly satisfied with their gentle intimacy.\n\nTheir hands softly teased each other's skin, playing across the curves and planes of each other's body, touching and enjoying each other without any hint of possessiveness.\n\nKimber gently pulled Ken's t-shirt over his head, leaned in close, her hard nipples brushing his chest. Kimber felt his hardening cock pressing against her, loving the fact that while he obviously wanted her, Ken was content with the gentle intimacy that they were sharing.\n\nTheir closeness was having its effect on Kimber's body as well. Her nipples were as hard as bullets and she could feel the growing wetness of her pussy, and she knew that Ken was well aware of her body's reactions even if he was not rushing to take advantage of it.\n\nThe desire continued to grow between her legs with Ken's ever increasing hardness until Kimber slipped off his lap, reluctantly breaking their kiss, took hold of the waistband of his boxers, and slid them off as Ken raised his hips to accommodate her.\n\nFreed of the boxers, Ken's member stood at attention, like a soldier ready for duty. Kimber noticed a small drop of pre come at the tip and couldn't resist the urge to taste it with a kiss before she coaxed his hips a little more forward on the couch.\n\nKimber stood and rejoined Ken on the couch this time she was on her knees straddling him, as she lightly stroked his cock while returning to kissing him softly.\n\nAfter a few moments Kimber raised up on her knees and, using the hand that was still stroking his manhood, guided him between the now creamy we lips of her pussy, slowly sliding down his shaft until it was fully inside of her.\n\nKimber loved the sensation of having Ken inside her, filling her pussy, stretching it, providing her with the most intimate of physical connection, a connection she was in no hurry to end as they continued to kiss almost playfully.\n\nThe effects of having Ken inside of her, even without movement, proved to be a major turn on for Kimber. She was so wet that Kimber was sure that Ken's lap had to be soaked and her pussy seemed to have taken on a life of its own as it was clamping tighter to his fully aroused cock. Kimber found herself gyrating her hips trying to rub her clit hard against him.\n\nKen slid a hand down between them and found Kimber's clit with his thumb, pressing against it as she ground it into his thumb harder and harder.\n\nThe climax that Kimber felt growing between her legs escalated her passion - her kisses becoming deeper and longer as her breath started to escape in rough gasps between kisses.\n\nFinally, Kimber could take no more and her grinding gave way to stroking as her pussy slid up and down his cock in strokes that got faster and faster and harder and harder. Their kisses growing in heat and passion as each stroke brought them closer to climax, like an ocean swell - lifting them higher and higher.\n\nThe wave broke for Kimber first, as she slammed her hips down hard and deep as if she was trying to fuse them into one body. Kimber's mouth took possession of Ken's tongue, sucking it deeply into her mouth, as deeply as she wanted his cock into her pussy. \n\nThe initial discomfort, as Kimber took his tongue and sucked on it so deeply, surprised Ken with its pain. But as Kimber continued to suck harder and more passionately, the sensation was as if her mouth was raping his tongue - an image that brought him to climax while Kimber was still being tossed around in the turbulence of her orgasm. Feeling Ken coming within her, his cock pulsing, sending jets of hot cum deep inside her, added to the intensity to what she was experiencing - making it an almost otherworldly experience.\n\nSlowly Kimber's climax subsided, the fervor of her kisses diminished as well until, at last, Kimber's head came to rest on Ken's shoulder, her body deliciously spent.\n\nThey sat like that for a long time, both content to be close, either wanting to break the bond, lost again in that mystical place between dreams and consciousness. Reluctantly they came back to cognizance and with gentle kisses Kimber moved off his lap, stood up, and extended her hand and led Ken into the bedroom and the bed where they continued to cuddle, spooning tenderly.\n\nChapter 18\n\n\"Well you have managed to make this a weekend that I never will forget\", Ken sighed softly in the dark.\n\n\"I had help\", Kimber noted with a smile in her voice.\n\n\"I am in no hurry to see it come to an end\", his voice was almost inaudible.\n\n\"Which one,\" Kimber asked, \"the weekend or us?\"\n\n\"Both\", Ken answered unconsciously detaching from her.\n\n\"Ken, I have something to tell you\", Kimber stated, haltingly.\n\nKen detached further.\n\n\"But you have to hold on tight to me as I tell you\". Kimber's voice was almost pleading.\n\nKen's arms went back around Kimber, pulling her close to him, enfolding her in his embrace.\n\n\"This is going to sound a little 'stalkerish' - but I have loved you for a dozen years. And even though we haven't seen each other for a decade, I never really lost touch with you. I became Facebook friends with Dane and Kari just to keep up on what was happening in your life. The truth is that I knew the answers to most of the questions I asked you at dinner\".\n\nKimber paused.\n\n\"Are you getting ready to run for the door?\" she asked cautiously.\n\n\"Not at all\". Ken assured her.\n\nKen felt Kimber take a deep breath and hold it for a moment before she continued.\n\n\"For all of these years you were the yardstick by which I measured all men. They all came up short. You were the only man I have ever wanted. All through high school I think I subconsciously saved myself for you. Even on prom night when my date, Nick Thompson, had reserved the honeymoon suite in the hotel where we held prom, I couldn't bring myself to even get in the elevator. Nick was so mad he went up without me. Luckily Dane and his date drove me home\".\n\n\"I know, Dane told me\", Ken whispered.\n\n\"I guess in college I gave up on the dream of being with you, but no relationship ever seemed 'right', I could never just surrender myself to a man, there was always a reserve, something within me that they were unable to touch - maybe something that I was unwilling to let them touch, I'm not sure, but with everyone else I never felt united or bonded.\"\n\nKimber paused as if contemplating whether to continue.\n\n\"Today you asked me about the tears\", she took another deep breath. \"I can assure you they were not tears of pain because I loved every second of it. When I say that there was part of me that no man had ever touched, I was speaking spiritually. I guess the physical representation of that spiritual connection, of being completely vulnerable to another, manifested in anal sex.\n\n\"Even though I was curious, and even somewhat turned on by the idea\", Kimber explained, \"if a man so much as touched my ass, I'd shut down. For some reason I couldn't let anybody go there\".\n\nKimber got very quiet; she almost seemed to be shrinking in Ken's arms.\n\n\"The tears today came when I realized that I was finally no longer holding back, that I had been able to give to be completely vulnerable, completely open and in that moment, when I finally let go, there was so much freedom\".\n\nKimber stopped; Ken could not even feel her breathing in his arms. He took a deep breath of his own.\n\n\"I love you, Kimber\". Ken was surprised by his own words, not because they were untrue, but because he realized that they were completely true - and that he had just realized it.\n\nHe knew now that a dozen years before, when he had been encouraging Dane to take notice of Kimber, it had been he, himself, that wanted her around. Recognition and understanding flowed through him and Ken pulled Kimber even closer. He felt her sink back into the welcome his arms provided.\n\n\"I guess then neither one of us has to worry about this weekend coming to an end\", Kimber observed, \"We have a whole lot of weekends still ahead of us\".\n\nChapter 19\n\nThe next weekend found them at Ken's place. A warm Saturday morning had coaxed them to eat breakfast by the pool, and the quiet solitude had enticed them to shed their clothes and slip into the hot tub where they exchanged kisses and fed each other from a tray of sliced fruit.\n\nThe backyard gate suddenly banged shut warning them that they were no longer alone.\n\n\"Hey Dad!\" Dane's voice called toward the pool area, \"I brought back your table saw, but I need your help to unload it\".\n\nComing into view of the hot tub Dane stopped, realizing that his father was not alone. Looking at the pretty young lady, her beautifully manicured hands covering her breasts as she tried to conceal herself, a wave of recognition crossed his face.\n\n\"Hi Kimber, good to see you\". Dane smiled, broadly. \"Are you going to give me a hand, Dad?\"\n\nKen regained his wits. \"Sure I'll be out there in a moment, go open the shop\".\n\nDane obediently retreated as Ken retrieved his clothes and followed him around the side of the house.\n\nAs soon as Ken caught up to his son on the side of the house, Dane turned to his father with a huge grin on his face. He leaned close to Ken and whispered, \"I told you that she wasn't into me!\"\n\nChapter 20\n\nWhen Ken returned to the pool area Kimber had also retrieved her robe and was waiting with a concerned look on her face.\n\n\"Well?\" She asked hesitantly.\n\n\"I think he knew before we did, he seemed pretty pleased with himself over it all\". Ken explained in relief.\n\n\"In that case...\" Kimber slipped the robe off her shoulders and slowly let it drift to the ground as she walked back into the hot tub.\n\nKen quickly shed his clothing as well and walked down into the hot tub and Kimber's waiting embrace."
    ],
    "authorname": "akaericajones",
    "tags": [
        "older man",
        "younger woman",
        "high school crush",
        "anal",
        "mature"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/all-grown-up-13"
}
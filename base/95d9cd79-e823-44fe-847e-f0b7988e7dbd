{
    "title": "Runaway Pt. 03",
    "pages": [
        "Authour's Note:\n\nThis is part three of Runaway, a story for the Highway Song event arranged by blackrandl1958. In the previous chapters, Lacey and Noah start heading back to Montreal after ending up on the wrong side of the country. Noah is alarmed to discover that Lacey is a virgin, but gives in to his feelings for her before trouble strikes in Toronto.\n\nChapters have been marked throughout the story and it will be posted in four parts.\n\nSpecial thanks to the team of people who beta-read and edited this story: BarryJames1952, Bebop3, blackrandl1958, norafares, OneAuthor, and Steve M. This story would not be possible without them. Any remaining errors\u2014factual, grammatical, or otherwise\u2014are my own.\n\n**\n\n<center>Chapter Seven</center>\n\nIs there anything quite so strange as knowing you're about to lose your virginity? \n\nI scrubbed myself clean in the shower, nervous and excited, eager and hesitant. I took the time to dry my hair, brush my teeth, stare at myself in the mirror and try to figure out if I'd look any different after. On one hand, I was rushing, trying to get out to Noah as quickly as I could. On the other, I knew the moment I opened the bathroom door, everything would change.\n\nSomething as simple as dressing after my shower took minutes to figure out. It seemed silly to put clothes on, knowing he was about to remove them. Walking out with nothing on, though, was beyond what my modesty would allow. I finally decided to compromise with one of the robes that hung in the bathroom, then reconsidered when the fabric felt rough against my sparkling clean skin and the length only came to the middle of my thigh. I finally managed to talk myself into wearing the robe and that the roughness of the fabric was just an incentive to take it off more quickly.\n\nI tried to ignore the part of me that was attempting to sabotage the whole thing. \n\nDeep inside, something taunted me, telling me Noah wouldn't be there when I opened the door. It's an even more elaborate prank, said the nasty little voice. He's fucking with you, just like Roger did. \n\nI told myself he wasn't. I wasn't the same gullible, naive girl who Roger had tricked. Noah wasn't the kind of person who would do that. I trusted Roger in spite of him abusing that trust again and again. I trusted Noah because I knew he wouldn't. \n\nThe voice changed to my father's. \n\nWhore.\n\nI shook my head. If God was going to judge me for this and not for the good that I did, then let Him. The God I had begun to believe in was one of love, forgiveness, and goodwill. He was not going to condemn me for something like this.\n\nA smile played across my face as I stared in the mirror. I wouldn't look different once I lost my virginity. I looked different already. The woman in the mirror was not the same girl who had left home a week ago.\n\nShe was better.\n\nOnce my hair was dry, the robe was on, and I had sufficiently stared at myself in the mirror, I took a deep breath and opened the door.\n\nNoah was sitting on the edge of the bed. His jean jacket lay across the chair in the corner of the room, but he still wore his plaid green shirt and dark jeans. When I stepped out of the bathroom, he stood up. His lips parted, but he didn't speak.\n\n\"I'm ready,\" I said softly. \n\nHe came to me and took my hand. \n\n\"You are in charge, okay? You want me to stop, say stop. You can change your mind at any time.\"\n\n\"I won't.\" \n\n\"I know, you're set on this. But if you do, if something isn't feeling right, promise me you'll tell me, okay?\"\n\n\"I promise.\"\n\nWe kissed and Noah let go of my hand, running it up the side of the robe to my shoulders. He pulled back and frowned.\n\n\"This robe is terrible.\"\n\nI burst out laughing. \"I know.\"\n\n\"Let me take it off you.\" \n\nSuch a simple statement, yet it was monumental. Noah had touched me in places no one else had. He'd removed my shirt on the train. He'd held me close, pressed tightly against him. This would be the first time he, or anyone else for that matter, would see me fully naked.\n\nI refused to let my nervousness control me. \n\nNoah's hands met mine on the knot of the robe belt. I started untying it; he finished, gently pulling the loop free and letting the robe hang open. I watched his face as he watched my body come into view, his eyes taking in my curves, my breasts, and my sex.\n\nHis hands pushed the robe from my shoulders, following its path down my arms until it fell to the ground. Once he reached my wrists, he crossed the bridge to my hips. His hands travelled back up my sides, grazing my breasts lightly before they reached my neck. Cupping my face with both hands, he brought me in for another kiss. \n\n\"You are enchanting. Come here. Lie on the bed.\" \n\nHe guided me onto the bed, fluffing the pillows around me so I was cradled in a nest of clouds, propped up so I wasn't quite lying flat on my back. When he was satisfied that I was comfortable, he stood at the end of the bed and shed his shirt and jeans, then joined me on the bed.\n\nAgain, he kissed me, and again I felt my limbs go weak as my mind went dizzy. Hovering over me, his head was a silhouette in the golden glow of the lamp in the corner. He looked every bit of the guardian angel I knew he was. \n\n\"What am I supposed to do?\" I asked.\n\n\"Relax and let me take care of you,\" he murmured.\n\nHis lips pressed against mine before I could respond. Then they pressed to my chin, a gentle caress before moving on to my neck. His hair fell to the side of his face, tickling my skin as he feathered his way to my collarbone, his lips worshiping each patch of skin they pressed against. The tip of his tongue traced paths from freckle to freckle, leaving a trail of goosebumps behind as he mapped out my skin.\n\nFingertips brushed against my breast, prodding lightly as he held one in his hand. The kisses journeyed on, marking my chest and the tops of my breasts until his face was nestled in my cleavage. Again, his tongue darted out, finding an especially sensitive spot between my breasts that made me tremble beneath him.\n\nThe mix of anticipation and apprehension was intoxicating. I wanted to lose myself under Noah's body, revelling in the feel of his lips against me, but the fear and excitement of what was to come clouded my mind. I told myself to relax, to enjoy what was happening, to embrace the new sensations and the way electricity seemed to spark at Noah's lips and travel through my body. Each time I tried, however, an insistent little worm of a thought would twist in my mind, telling me to be afraid, urging me to go back, admonishing the parts of me that liked what Noah was doing.\n\nThat little voice was wrong. It was ingrained in me from years of being told that anything enjoyable was sinful. I chose to ignore it, chose to believe that there was more to existence than resisting temptation. What better way to honour God than to bask in the delights He created, to love and appreciate the gifts He gave, to live and enjoy and simply be? \n\nNoah glanced up at me, aware of the tension running through me.\n\n\"Tell me what you're thinking.\" \n\nI bit my lip, not wanting to admit I was having a spiritual revelation as he had his face pressed into my breasts. \n\n\"Just a little nervous,\" I whispered. \n\n\"About what?\"\n\n\"What you're thinking.\"\n\nHe chuckled. \"I'm thinking that I'm nervous.\" \n\nI had not been expecting that.\n\n\"What? Why?\"\n\n\"Want to make sure I do this right.\" He pressed another kiss between my breasts. \"Don't want to ruin sex forever for you by making your first time shitty.\"\n\nHis statement broke some of the tension in me and we both chuckled. \n\n\"Also thinking you're fucking gorgeous,\" he said. \"Dunno what I did to make you like me, but whatever it was, I'm glad I did it.\" \n\nI was trying to think of what to say when his mouth closed over my nipple, and whatever was in my mind evaporated. The response Noah got was probably exactly what he was hoping for as I moaned. He sucked on my nipple, then flicked it with his tongue, and a jolt of that captivating electricity shot to my core. As the hot wetness of his mouth moved against me, I groaned again, my hand fluttering to his head.\n\nI hadn't expected it to feel so good. Sure, I had liked what he did to my nipples when we had messed around on the train. I knew men liked breasts: looking at them, playing with them, burying their faces in them. Even knowing that, I could have never imagined the amount of arousal that would course through my body from him feasting on my breasts. \n\nNoah spent quite a while there, my enjoyment of what his mouth was doing obvious. It wasn't until I squirmed beneath him, my pussy so wet I could hardly stand it, that he tore his heated attention away from my nipples and began kissing the underside of my breast. \n\nHe kissed my ribs, his tongue resuming its roaming from freckle to dotted freckle down my stomach. Both hands gripped my sides as he nuzzled against my belly button, then lowered to my hips as his lips moved an inch lower. He kissed that spot, and then an inch lower than that, and again until his lips reached the top of my mound.\n\nI watched, my lips parting in astonishment as his head moved between my legs. I was completely unprepared for what he was about to do. Sure, I had heard rumours of it, but in my naive little mind, I had thought it was just a joke, an urban legend, that people didn't actually do that. \n\nNot that I had a problem with it. It wasn't like it was any different than when Noah's cock had been in my mouth or when I had swallowed his cum. If I could do it to him, it wasn't unreasonable to think he could do it to me. After all, Noah was the one who had decided to do it. It wasn't like I had asked him, so if there was an issue with it being weird or not, you know, the usual way of doing things, that was on him. \n\nNot that I thought it was weird or that it was particularly\u2014\n\nThe whirling justifications that were spinning through my mind were cut off as Noah looked up at me, dark eyes glinting, and licked my pussy. \n\n\"Oh!\" was all that came out of my mouth, a breathless squeak of shock at the foreign feel of his tongue pressed against my inner lips. I felt Noah smile, saw his eyes practically sparkle just before he looked away and licked along my slit completely. \n\nIt was by far the strangest sensation that I had experienced, though not in a bad way. He explored my pussy thoroughly, his tongue tracing every curve and crevice and even dancing along my entrance. He kissed me everywhere, from the ticklish spot where my leg met the swell of my pussy to nearly the lowest edge of my slit, dangerously close to the Loophole hole. \n\nIt wasn't until his lips surrounded my clit and he sucked incredibly gently that I understood.\n\nMy eyes pinched shut as he began to focus his attention there. He alternated what he was doing, spending time licking it, circling it, sucking it, and stroking it. I gasped for breath, the chills that ran through my body almost exhausting to keep up with, and a steady stream of quiet groans found their way out of my mouth without even consulting my mind. \n\nHe shifted slightly at one point, bringing my legs over his shoulders. My thighs touched his ears, his hair tickling the inner spots that it brushed against as he lapped at me possessively, practically drinking the juices that were flooding my crease. I couldn't help but stare, watching as he ravished my pussy, entranced at the sight of him pleasuring me in a way I hadn't even known possible.\n\nThe overwhelming feeling of losing control had just begun to prick through me when Noah stuck a finger inside me. \n\nI hadn't noticed his hand move between my legs, just under his chin. He put his fingertip against my entrance, glancing up with a question in his eyes that had only one answer.\n\n\"Yes, please,\" I squeaked. \n\nAgain, that foreign feeling of a smile against my most private place. He pushed forward, his fingertip slipping inside me easily. Another strange sensation, an intensely satisfying one. It didn't hurt, not that I cared or even thought of that in the moment. Slowly, savouringly slowly, he inserted more of his finger.\n\nHe found a spot I didn't know was there, the pad of his finger pressing against it as he flattened his tongue against my clit. The ascent quickened, rushing me towards the edge where I knew I would fall again. My hands found Noah's head and I ran my fingers through his hair without thinking, instinctively desperate for something to hold on to. He didn't stop what he was doing as my legs tensed, didn't react when my wordless gasp turned to a muffled shriek, and didn't let go as I submitted to the lightning that consumed my body as I came. \n\nMy back arched and my thighs pressed harder against his head. My eyes weren't open, but all I saw was white light as my body shook, everything from my toes to my fingers going numb with an electric passion that burst through me. It could have been seconds or minutes or hours; I had no concept of anything but radiating euphoria for a stretch of time.\n\nWhen my body relaxed, it relaxed completely. My thighs fell away from Noah's head and my fingers unfurled, releasing the grip I had on his hair. He withdrew his finger from inside me and pressed a final kiss to the top of my mound before sitting up and grinning as he wiped his mouth.\n\nI tried to say something. I wasn't sure what, exactly, to say. I wanted to apologize for pulling his hair. I wanted to thank him and kiss him and tell him I would be his forever if he asked me. It was likely for the best that I couldn't speak, just opened and closed my mouth a few times before shutting my eyes and groaning.\n\nHe sidled up alongside me, taking me into his arms as I regained my breath.\n\n\"You okay?\" he asked.\n\n\"Mmm.\" \n\n\"You gonna recover or did I break you?\" \n\n\"Jury's still out on that.\"\n\nHe laughed. My mind began to function somewhat normally again and I had to ask.\n\n\"I didn't even know that was a thing. Doesn't it... I don't know, taste strange?\" \n\n\"Never got curious and tasted it yourself, Miss Lacey?\" \n\nMy face went red.\n\n\"Is that, um... Do people, uh, usually do that?\"\n\n\"Not weird to, if that's what you're asking.\" \n\n\"What does it... you know...\"\n\nHe loosened his embrace and moved slightly back so he was looking at me.\n\n\"Kiss me and find out.\" \n\nNoah waited patiently for me to lean forward and kiss him. I did so uncertainly at first, my lips brushing against his as my own scent filled my senses. His lips were warm, still slick from their devotion to my pleasure. As I tasted myself for the first time, I deepened the kiss, suddenly curious about the sweet, tarty flavour that lingered on him. It wasn't a bad taste at all, but more importantly, the memory of where that mouth of his had just been and where that taste came from excited me in a way I hadn't expected.\n\nThe kiss became about much more than finding out what I tasted like. Noah's arms tightened again, holding me close against his body. He still wore his boxers, but I could feel the thick stiffness of his cock pressed against me, scorching hot even through the fabric. \n\nHe had distracted me with his mouth, but I wanted the rest of him. I slid a hand between our bodies, reaching for his stiff arousal. As my hand closed around him, he took a sharp breath, his hips moving forward to meet my hand.\n\n\"Sorry,\" I whispered. \"Did I\u2014\"\n\n\"No, not...\" he trailed off, his head bowing forward. \"Fuck.\"\n\n\"What's wrong?\"\n\n\"Not wrong.\" Noah grimaced. \"I just really fucking want you, Lacey.\" \n\nI felt his words inside me. They wrapped around my nerves, making my body thirst for him. Throughout everything, Noah had seemed restrained, focused on me and me alone. Hearing him say those words, hearing him admit his own needs, did something to me that I couldn't explain. \n\nI wanted to say something sexy and smart in response. Maybe \"Then why don't you take me?\" or \"What are you waiting for?\" Instead, my brain shut down, still torn between desire and hesitancy, wanting to move forward but realizing that meant Noah would literally be sticking his cock inside me. Inside me. So instead of something cheeky or erotic, I responded with the only thing that popped into my head.\n\n\"Okay.\" \n\n\"Okay?\"\n\nI could already feel my hands starting to tremble. \"L-Let's... I want you, too.\" \n\nNoah unfolded his arms, touching my cheek lightly. \"Are you sure?\"\n\nI nodded, my jaw unwilling to cooperate with my mind.\n\n\"Lacey, if you're not\u2014\"\n\n\"I am.\" Finally, words. \"I am, Noah. I just... I can't help but be nervous. I want to. I really... really want to. Just, it's a little intimidating.\"\n\n\"What are you scared of?\" \n\nI bit my lip. \"It hurting. Being bad at it. N-Not liking it.\" \n\nNoah stroked my cheek lightly. \"Told you to relax and let me take care of you. That means not worrying about being bad at it.\" His lips found mine, reassuring in their confidence. \"Gonna do my best to make sure you like it. No guarantees, but I'll try.\"\n\nI smiled, his humour shining in his dark eyes.\n\n\"As for it hurting, well, I dunno if it will. Know you're ready because I just about drowned in your pussy.\" \n\nA sharp bark of laughter surprised us both as I reacted to his words. He laughed along with me and kissed me again.\n\n\"Gonna be gentle. You're gonna tell me if it hurts or what you need. Not that I, uh, make a habit of popping cherries or anything, but...\" He trailed off, his cheeks turning uncharacteristically pink. \"Well, I mean, you know I've been with other girls.\"\n\n\"I know,\" I said. \"It doesn't bother me.\" \n\n\"Asked a girl once. She said it didn't hurt, not even the first time. Only hurts if you're not ready. Dunno if that's true for everyone but... well, did it hurt when I had my finger there?\"\n\nI shook my head.\n\n\"Not quite the same size, but probably a good sign, don't you think?\"\n\nIt was an excellent point.\n\nHe kissed me softly. \"You're in control. You say stop, I stop.\"\n\n\"Okay,\" I whispered. \"What do I do?\" \n\nHe settled me on my back again, making sure I was comfortable before he slid to the other side of the bed and removed his boxers. I watched, entranced, as he took a box from the nearby nightstand and withdrew a condom, unrolling it onto his cock before moving between my legs.\n\nMy heart had to be loud enough that he could hear it. I felt almost cartoonish, as though it might jump from my skin and beat frantically outside my body. Noah moved himself forward, parting my legs further as he exposed my pussy, letting the backs of my thighs rest against the tops of his as he moved in closer to me.\n\nI stared down between our bodies. Just days earlier, his cock had been in my hands and mouth, but it suddenly seemed much more intimidating as it approached my virgin pussy. I remembered the feeling of him in my throat, the moments where I had choked on his tip, pulling back so I could breathe. And now, he was going to put it there? \n\nHe took hold of his cock, nestling it against me. His tip slid against my slit for a moment, then was positioned at the entrance to my body. Once it was there, he propped himself up over me, one hand still wrapped around his cock and his face just inches from mine.\n\n\"Ready?\"\n\nI could only nod.\n\n\"Relax.\"\n\nI tried, forcing my muscles to unclench one by one. \n\n\"Gonna put the tip in now, okay?\"\n\nAgain, I nodded.\n\nHis eyes didn't leave mine as he guided his cock forward. There was a moment of pressure, then a feeling of stretching as the thick head of his cock penetrated me.\n\nI couldn't help it: I tensed up. The muscles of my canal tightened around his tip, gripping it, making the alien feel of having something inside it all the more pronounced. My arms shook as my body stiffened, and Noah stopped moving.\n\n\"You gotta relax.\" ",
        "\"Trying,\" I whimpered. \n\nThe arm that was propping him up was near my shoulder and his hand found my hair, stroking it lightly.\n\n\"It'll be okay. I promise.\"\n\nI took a breath and closed my eyes.\n\nA gentle brush of a kiss was pressed against my mouth as he comforted me.\n\n\"Trust me.\"\n\nI felt the words more than I heard them. I did trust him, completely. If I didn't, the tip of his cock wouldn't be anywhere close to where it was at that moment. That thought alone was enough to let the tension drift from my body and I breathed deeply.\n\n\"Okay.\"\n\nNoah moved his arm from between us, letting go of his cock as he pushed slightly more inside of me. I kept my eyes closed, focusing on the sensation, the way my pussy was stretching to accommodate him and the feeling of his cock against my slick walls. There was a sense of discomfort, pressure, unfamiliarity as he paused again.\n\n\"Open your eyes. Look.\"\n\nI opened my eyes, meeting Noah's for a moment before glancing down between our bodies. His cock was about halfway inside me, my entrance encircling him tightly. It felt strange, almost unreal, and the sight of it was one of the hottest things I had ever seen.\n\nA small noise left my mouth as Noah pushed forward even more. I watched more of his cock disappear within me, felt myself filling up with his body. Soft pants left my lips as he sunk further and further inside me, until his skin was pressed against mine.\n\nIt was all in.\n\n\"Oh,\" I breathed, staring at our bodies joined together.\n\nNoah let me stare, waited as my body adjusted to being impaled on his cock. It didn't hurt, that much was true. It was unfamiliar and strange, a fullness I could hardly have expected or explained, but it didn't hurt. I wouldn't have said it felt good, exactly, but it wasn't painful. \n\nWhen I finally looked back up at his eyes, he spoke again.\n\n\"Gonna move now, okay?\"\n\n\"Yes.\" \n\nYet another new sensation followed: a sudden loss of that fullness. As Noah pulled his cock back out, my body relaxed even more, until just the tip of his cock was still nestled inside me. \n\nI took a breath, as did he.\n\n\"Still good?\"\n\n\"Yes.\" \n\nHe started pressing forward again. That time, it felt less strange. The fullness overtook me as he buried himself inside me again. Again, he paused once he was fully inside me, then pulled back out.\n\nThe discomfort disappeared on his third thrust. The pressure became pleasure on his fourth. The fifth time Noah buried his cock inside my pussy, I sighed, my head tilting back. He dipped his head forward and kissed me, his lips warm and comforting against me as he withdrew his cock again.\n\nI felt his weight shift as he began a slow rhythm. His arms were by my shoulders, supporting most of his weight, but I still felt the pressure of his body resting heavily against mine. He no longer paused when he was fully inside me, but moved consistently, treating my body as delicately as he would a butterfly. He kissed me, murmured soft words to me, told me I was beautiful, before he moved his head to the side and buried his face against my neck. \n\nGrowing more comfortable with the physical aspect of having a cock inside me had its downsides, however. It was strange to just lie there, but I wasn't sure what to do. Where were my hands supposed to go? Was I supposed to embrace him, touch him, stoke his back? Maybe I was supposed to grab his butt. I had no idea, but lying there just felt wrong. My legs were spread as wide as they could go, and there was a strange tightness in my hips because of it. I thought maybe shifting them to wrap around Noah's waist would help. As I embraced the feeling that at first had been so strange, I wrapped my legs around his hips.\n\nNoah groaned when I did. The sensation between my legs changed, his cock seemingly deeper inside me than it was before. His rhythm staggered a bit, a few shallows thrusts off-beat, before he held still for a moment.\n\n\"What's wrong?\" I asked.\n\n\"Nothing.\" His voice was hoarse, his eyes squeezing shut.\n\n\"Tell me.\"\n\nNoah groaned again. \"Not wrong. Just...\" \n\n\"Just what?\"\n\n\"Fuck.\" His voice nearly cracked, the strain evident in each word. \"You feel so good. You're so... so fucking tight. Just want to... it's just... hard going slow when I want you so fucking much.\" \n\nI didn't tell Noah I had no idea that it was supposed to be faster.\n\n\"Do it how you like it,\" I said.\n\n\"But you\u2014\"\n\n\"Show me. I'll tell you if it's too much.\" \n\nThe low growl that left his throat was almost animalistic. Noah's teeth grazed my neck as he started moving again. Even at that, I didn't think he let loose the way he wanted to, but his movements became faster, harder. A wave of intensity filled me as he did, making my skin prickle with delight. \n\nThat was the point where it went from feeling comfortable to feeling good. \n\nNoah's breath was hot against me as he thrust harder inside me. Small noises were pushed from my throat, tiny yelps as he took the pleasure he needed from my body. His chest moved against mine, my breasts bouncing slightly against him each time he buried himself inside me.\n\nIt wasn't like when he had used his mouth or fingered me. That feeling of ascent wasn't there, but it still felt amazing. The worry of what to do with my hands disappeared as I embraced him, my fingers trailing along his back as he finally took what he needed from me. \n\nHis breathing was heavy, hot against my skin. He pressed a kiss against my neck quickly before sitting up, my arms falling back to my sides and my legs untangling from behind him with the fluidity of his movement. Our eyes didn't meet until he had hooked his arm under my knee, pushing my leg up higher than I could on my own. \n\nI cried out, my head tilting back into the pillow as he penetrated me again, as deep as he ever had.\n\n\"Fuck,\" he grunted. \"Not gonna last...\"\n\nHis movements became more intense, slightly faster, his body slapping against mine as he tunneled inside me. The last few thrusts were deep enough that I felt like the air was being pushed out of my lungs. He cried out with each thrust until his body shuddered, his eyes squeezing shut and his face twisting in pleasure as he came. \n\nAs he finished, he released my leg, leaning forward again and burying his face against my neck. A muffled groan vibrated against me, sending a chill through my body that made me grin. \n\n\"Fuck,\" he murmured. \"Shit. I'm sorry.\"\n\nSorry? The grin fell from my lips.\n\n\"What?\"\n\nHis cock slid out of me as he shifted off me, rolling to the side. \"Said I'm sorry.\"\n\n\"For what?\"\n\nNoah looked upset as he wrapped his arms around me.\n\n\"Not making you come.\"\n\n\"But you did, earlier.\" \n\n\"I meant again.\"\n\n\"Wait, again? Like, more than once?\" \n\nNoah froze. \"Well... yeah. I mean, girls can sometimes have more than one.\" \n\nThe fact that my mind was completely blown must have showed on my face because he chuckled.\n\n\"Shit, maybe I shouldn't've told you. Let you think that was really good.\"\n\n\"It was really good.\" \n\n\"You don't have to\u2014\"\n\n\"It was, Noah. I swear.\" I looked at him earnestly. \"It felt... I don't know how to describe it. But I liked it.\" \n\nHe kissed me suddenly, unexpectedly. I melted against him as he held me to him, our bodies pressed together, his skin warm against mine. When we parted, he stroked my hair lightly.\n\n\"You should go to the bathroom.\"\n\nAlarmed, I glanced down. \"Did something\u2014\"\n\n\"No, no!\" he interrupted hurriedly. \"I dunno, some girl told me that girls should pee after sex. It helps make sure you don't get a bladder infection or something. Don't ask me, I don't know. Just... I mean, if you didn't know you could come more than once, I felt like you probably didn't know that.\" \n\nIt seemed like a good idea, so I untangled my body from his and slid from the bed. The robe was still sitting on the floor, discarded, and I entertained the idea of putting it on before stepping over it and walking to the bathroom naked. The idea of being modest around a man who had just had his cock inside me, whose face had been buried against my pussy, who had seen the most intimate parts of me closer than I ever had, seemed silly. \n\nI glanced in the bathroom mirror, because of course I did. Familiar brown eyes stared back at me, the only difference from before being the flush of pink along my chest and the messiness of my hair. I still looked like me, plain and freckled, big eyes set on a normal face. I didn't know what Noah saw that he thought was so beautiful, but I couldn't help but smile as I remembered how he looked losing control, trying so hard to remain gentle but struggling to contain himself. \n\nMaybe I was plain and boring, but I still made that happen. It bolstered my confidence enough that I didn't even consider dressing before walking back out of the bathroom.\n\nNoah was sitting on the edge of the bed and stood as I came back out. He pulled me close to him again.\n\n\"You okay?\"\n\n\"Yes.\"\n\n\"Promise?\"\n\n\"I promise.\" \n\nHe took his turn in the bathroom and I crawled into the bed, turning on the lamp on the nightstand before pulling the sheets up to my neck. When he came back out, I watched as he capped the candles in the room, the yellow glow of the lamp reflecting off the sheen that still covered his skin. He turned the lamp in the corner off last, the tattoos on his chest and arms playing like shadows across his muscles, and joined me in the bed.\n\n\"Have one more thing for you.\"\n\n\"What?\" A surge of guilt ran through me. \"You've already done so much.\"\n\nHe ignored me and reached across the nightstand, sliding something off it.\n\n\"Sit up and turn around.\"\n\nI did as he asked, facing away from him. His fingers brushed my hair off my shoulders gently, exposing my neck. Moments later, the cool snaking of a chain fell against my skin. I looked down as he fastened it, a silver cross resting on my freckled chest.\n\n\"Noah, I\u2014\"\n\n\"I said I was gonna get you a new one.\" \n\nHis fingers lingered against my skin for a moment. I turned back towards him as he moved his hands away.\n\n\"Sorry it's silver. I couldn't... well. I hope it's okay.\"\n\nI could only hope the kiss I pressed to his lips spoke for me because no words could have possibly said what I was feeling.\n\n**\n\n<center>Chapter Eight</center>\n\nI didn't think I would forget a single moment of my trip with Noah, but waking up the next morning was a memory that would be burned into my mind forever.\n\nIt wouldn't come as a shock to anyone that I had never slept naked before. Even sleeping in shorts and a tank top was risqu\u00e9 for me. With Noah, though, it just felt right. I fell asleep with his arms around me, my head resting on his chest as we dozed off after spending hours talking and laughing in bed together.\n\nSometime during the night, he had rolled onto his side. Like when we had awakened on the train, he was pressed against me, embracing me tightly as we slept. The only possible way we could have been closer was if he had been inside me again, and it sure felt like that was on the table when I woke up. \n\nI listened to him breathe, my eyes open but unwilling to pull myself away from him. His cock was erect, digging into my hip and driving me crazy. I wanted him all over again, wanted him inside me, wanted him to make me come with him buried in my pussy. \n\nA part of me wanted to slowly slide down his body, trying not to wake him, and take him into my mouth. I wanted to listen as he woke up, surprised, aroused, feeling my lips around him as he wondered if he was dreaming and quickly realized that he wasn't. Another part of me, a much stronger part, was far too scared to do anything like that, especially not knowing if Noah would like it or not.\n\nI settled for staring at the tattoos I could see from where he held me. I loved his tattoos, admired the skill that went into making his skin the masterpiece that it was. Yet another part of me wanted to stick my tongue out, to trace the lines and patterns on his chest, memorize the map of art that inked his skin. The scared part of me prevented that from happening, too. \n\nI wondered briefly what had me so worked up. Maybe losing my virginity had turned me into the kind of person who was obsessed with sex, who craved it like a fix. Maybe it was just the feel of Noah's body, warm against me, attracting me to him like a magnet. Or maybe it was just the fact that his cock was so hard, and it was right there, and I couldn't bring myself to do anything about it. \n\nWhen Noah finally woke up, I was uncomfortably wet from imagining all the things I wanted to do to him. Given my limited sexual experience, it was really just versions of the things Noah had done to me before, but it was enough. One particular thing kept playing in my mind: the way he had grabbed my leg the night before, the sound of his body slapping against mine as his gentleness had turned to passion. The way he had felt inside me when he loosened the tight grip he had on his control, relinquishing just the smallest amount. \n\nI wanted to know what would happen if Noah lost all control. \n\nHe didn't realize I was already awake, but unlike that night on the train, he didn't seem desperately embarrassed about waking up clutching me. He shifted his hips slightly, his hardness moving away from me, but pressed his lips against my hair.\n\n\"You up?\" he whispered.\n\n\"Yes. You are, too.\"\n\nHe chuckled. \"G'morning to you, too.\" \n\nI licked my lips. \"What would you have done if you'd woken up in my mouth?\"\n\nA startled bark of laughter left his mouth. \"Shit. Probably would've come the second I figured out what was happening.\" He kissed my head again, his fingers spreading as he ran his hands down my back. \"Was that your plan?\"\n\n\"I considered it. I didn't know if you'd like that.\"\n\nHe laughed again. \"Well, can't speak for any other man, but I'm probably never gonna say no to having that pretty mouth of yours around my cock.\"\n\n\"Even when you're sleeping?\"\n\nNoah groaned. \"Jesus, Lacey. You don't even know how fucking hot that would be.\" \n\n\"What other things don't I know?\" \n\n\"You asking me to show you?\" \n\n\"Maybe.\" \n\nHe hummed softly, almost sarcastically, and shifted on the bed to look behind him. \"We gotta catch a train at noon. I dunno if there's enough time to show you everything.\" \n\nOh, he wanted to play that game? Thinking quickly, I peeked over his shoulder. \n\n\"Hmm. You're right.\"\n\nIt shocked him when I threw the sheets off and got out of bed.\n\n\"Wait, what?\" \n\n\"Well, I need to shower and get ready.\" \n\n\"You... okay.\"\n\nI paused just before turning to go to the bathroom, looking over my shoulder at Noah. He was sitting on the bed, hair sticking out from one side of his head as he looked at me, trying to cover a comically shocked expression. \n\nThe night before, when he had told me he wanted me, I wanted to say something sexy but couldn't think fast enough. That morning, I wasn't about to make the same mistake.\n\n\"You can join me if you want.\"\n\nI smiled, hopefully in a coquettish way, and walked into the bathroom with my heart racing so fast I thought I might pass out. \n\nThere was just enough time for me to turn the water on before Noah barged into the bathroom. I pretended not to notice as he threw a condom onto the bathroom counter.\n\n\"Don't give me that innocent face,\" he murmured as I blinked up at him. His voice was a low growl, but his eyes sparkled playfully. \"When did you become such a tease?\"\n\n\"When I had to lie there with your\u2014\" the word nearly got stuck in my throat, proof that I wasn't nearly as sexually inclined as I was pretending to be \"\u2014c-cock pressed against me all morning and not be able to do anything about it.\" \n\nHe pretended not to notice my stammer, for which I was grateful, and stepped forward. I took a step back.\n\n\"So you laid there, thought about sucking my cock and waking me up, and decided not to? How's that my fault?\" \n\n\"I thought about a lot of things.\" \n\nAnother step forward. I licked my lips as I stepped back. \n\n\"Got yourself all hot, eh?\"\n\n\"Mm-hmm.\"\n\nThat time, my back hit the wall. \n\n\"Then why'd you run away?\"\n\nHis last step forward brought him directly in front of me. He towered over me, just inches away, ready to grab me.\n\n\"I believe you're the one who said we didn't have enough time.\"\n\nHis hands were on me the moment I finished speaking, grabbing my upper arms as he pulled me towards him.\n\n\"Not my fault you're an inexperienced little thing. Would take days to make a dent in the shit you don't know.\" \n\n\"Well, maybe pick one or two and show me now.\" \n\nHis lips caught mine fiercely. \"You are playing a dangerous fucking game,\" he mumbled.\n\n\"Good.\" \n\nHe groaned. \"Damn it, Lacey. I shouldn't\u2014\"\n\n\"Don't.\"\n\n\"You literally just\u2014\"\n\n\"Please?\"\n\n\"I don't want to hurt you.\"\n\n\"I trust you.\"\n\n\"Fuck!\"\n\nHis lips crushed against mine again as his fingers dug into my arms. My moan was muffled against his lips and he released one arm, his hand slipping between us and travelling directly to my pussy.\n\n\"You want to be fucked?\" he growled.\n\n\"Yes,\" I breathed.\n\n\"Say it.\" \n\nI froze as I stared up at Noah. His fingers were pressed against my slit as he stared back down at me, his eyes serious.\n\n\"Tell me what you want, Lacey. I need you to say it.\" \n\n\"I want... Noah, really?!\"\n\n\"You want it, you have to ask for it.\" \n\nIt had started off playful, but Noah wasn't joking around anymore. If I wanted him to play rough, he would, but he needed to know I meant it. \n\nAnd I did. I meant it.\n\n\"Please fuck me.\" \n\nHe growled again and shoved his hand against my pussy. I gasped and he let go of my arm, bringing his hand behind my head and pressing my lips to his with bruising force. His hand moved out from between my legs and up my stomach, leaving a trail of my own wetness against my skin before aggressively gripping my breast.\n\nI cried out softly, but before he could pull back and infuriate me with another question about my well-being, I wrapped my arms around his shoulders and nipped at his lip.\n\nHe groaned and his hand left my neck, travelling down my body and firmly grabbing my ass. His fingers dug in as he groped me, kneading my flesh beneath his palms. \n\n\"Know what I'm gonna do to you?\" His voice was hoarse, dripping with a ferocious desire. \n\n\"Tell me.\" \n\n\"Gonna bend you over that counter. Then I'm gonna fuck you from behind so I can watch your ass bounce.\"\n\nHis hand moved back to my pussy, where he barely paused before pushing a finger inside me. My knees buckled and I had to catch myself to keep from falling as Noah's teeth grazed my lip.\n\n\"Last chance to run away.\"\n\n\"Never.\" \n\nHe spun me towards the bathroom counter, pushing me down towards it. I caught myself on my palms as he grabbed the condom he'd brought in earlier, when he thought we were going to playfully and gently make love again. \n\nSeconds later, he was positioning his cock to enter me. He hadn't lied about the last chance; without saying anything, he shoved his cock inside me, his hands moving to my hips and pulled me back as he pushed forward. \n\nA long, low sound left my mouth as I felt my body accept his cock into it. Before I could even adjust to the feel of him inside me, he was pulling back out, and then he was fucking me. \n\nMy elbows hit the counter painfully as I adjusted myself, holding my chest off the counter. My breasts bounced with each thrust, swaying beneath me as his body pounded against mine. His cock was hitting places I didn't even know existed inside of me and I cried out, my eyes squeezing shut as instinct and pleasure overtook my senses.\n\nThe room was filling with steam from the shower that was still running behind us. Before the mirror fogged over completely, I glanced into it, and that was when I saw the difference.\n\nThe woman staring back at me wasn't a plain, boring, small-town girl with bug-eyes and freckles. She was something else, something desirable and erotic, a creature of passion. I saw the woman Noah saw, someone special, someone beautiful. Her lips were parted, pouty and swollen and lustful. No, not her lips. My lips. My eyes were half-closed, eyelashes tickling my cheeks as I blinked. My nipples were hard and swollen, my breasts shaking with the force of Noah's thrusts.",
        "And Noah.\n\nHis eyes met mine in the mirror, dark and yearning, watching my every expression as he took me. He towered over me, skin gleaming, his chest powerful and beautiful and in that moment, mine. I couldn't see the joining of our bodies, but I could feel it. The walls of my pussy embraced his cock as he stretched me open and his skin slapped against mine, hard and freeing and so, so right. A shudder of pleasure ran through my body as I submitted to Noah, to the way he made me feel, to what his body could do to mine, and I moaned as I abandoned any inhibitions I had left.\n\nGrey drops of fog broke our gaze as the mirror clouded. Noah thrust into me hard, his fingers digging into my hips, and then released me. His cock slid out and I was momentarily disappointed before he pulled me up from the counter and turned me around.\n\n\"I need to look at you.\" His voice was hoarse and grating, darker than his eyes and full of a need that made me tremble. He grabbed the back of my thighs, just below my ass, and lifted me onto the counter with a strength I hadn't seen before.\n\nI squeaked in astonishment and grabbed his shoulders to steady myself. Noah pushed my thighs apart brazenly and stepped between them, burrowing his cock back inside me in a single, swift motion. I cried out as another shudder ran through me and he kissed me, roughly nibbling at my lip.\n\n\"You see how fucking hot you are?\" he growled. \"You know how badly I've wanted to fuck you like this?\"\n\n\"Ungh,\" was all I could say as his lips mashed against mine. A hand moved beneath us, his fingers vigorously moving against my clit. He rubbed firmly, and between the sensations of his fingers and his cock, I could hardly think.\n\nHe kept talking as he fucked me, punctuating his words with hard, deep thrusts as he worked my clit. \"Perfect, beautiful, innocent little Miss Lacey.\" Another soft bite on my lips. \"You're so fucking tight. Fuck.\" \n\nMy entire body was shaking as he spoke, trembling in anticipation as a fire sparked in my stomach. It was too much and, at the same time, not enough. His teeth grazed my lips, one hand working my clit furiously while the other held me to him. His cock was so deep, impaling me again and again and driving me crazy. Around us, the air was thick not just with humidity but with a scent that muddled my mind, sweet and musky and it came from us. His words penetrated the foggy haze that enveloped my mind, echoing in my brain as the fire in my stomach caught, and then raged, and then I was lost.\n\nThe sound I made bounced off the walls of the bathroom, reverberating between us as I clung to Noah. My orgasm exploded through me, merciless in its consumption of my body. I knew Noah was speaking, but for the life of me, couldn't make out what his words were. His hand never stopped moving, just tormented my clit as my body clenched uncontrollably. \n\nHe came after I had regained the slightest bit of control, enough to realize my fingernails were digging into his back as his head buried itself against my shoulder. His last few thrusts were erratic, hard staccatos that were solely for him, not for me. He cried out against my neck; his arm constricted around me as he squeezed my body as close to his as he possibly could. \n\nLong after he finished, as we caught our breaths and regained our composure, Noah stayed inside me. He held me closely, his face still against my neck as his cock softened. His hand rubbed my back gently, comfortingly, though I wasn't sure whether the comfort was for me or for himself.\n\nWhen he finally pulled himself out of me and lifted his head, his forehead was furrowed with worry. Before he could say anything, I kissed him.\n\n\"You're okay?\" he mumbled against my mouth.\n\n\"Yes.\"\n\nHe moved back, his grip on me loosening. \"Shit, Lacey. That was...\" He trailed off, shaking his head as he wiped his face. \"You sure you're okay?\"\n\nI was more than okay. I was elated. I was glowing. I was reasonably certain that if I slid off the counter at that moment, my legs would give out from under me.\n\n\"I'm okay.\"\n\n\"I didn't hurt you?\"\n\n\"Not even a bit.\" \n\nHe smoothed my hair back off my face, dark eyes searching mine for any sign of untruth. Not finding it, his face relaxed and he kissed me again.\n\n\"So, Miss Lacey. You've had sex twice, two different ways. You like it better softer or a little rougher?\"\n\n\"Yes.\"\n\nHis laughter echoed off the bathroom walls as he helped me off the counter and into the shower.\n\n**\n\n\"...just left Cornwall. We should be there in about an hour.\"\n\n\"Perfect timing,\" said Sean. \"We'll pick you up at Gare Centrale. Now, listen carefully. It's a big station, really busy. We'll meet you by the Tim Horton's.\"\n\n\"Tim Horton's, got it.\"\n\nI heard someone speak indistinctly in the background before Sean spoke again. \"Right, there's two. We'll meet you at the Tim's inside the station, not the one outside.\" \n\n\"Who was that?\"\n\n\"Don't worry about it. Repeat that back to me, Lace.\"\n\nI rolled my eyes. \"Gare Centrale, big station, meet you at the Timmy's inside, not the one outside, don't worry about whoever reminded you of that.\"\n\n\"When did you get so snarky?\"\n\nHis words were teasing but good-natured, and I smiled. \n\n\"See you soon, Sean.\"\n\n\"Can't wait. Love you, sis.\" \n\nIt wasn't until I hung up the phone that it hit me. My smile faded slowly at first, then disappeared all at once.\n\n\"We're almost there.\"\n\nThe starkness of my voice made Noah look up from the battered novel he was reading. \n\n\"Yeah, we are.\"\n\nI couldn't read whatever emotion it was that flashed in his eyes. It may have been heartache. \n\nThough, it also may have been relief.\n\n\"I thought I'd feel happier.\" \n\nNoah's hand caught mine.\n\n\"What do you feel?\"\n\n\"Nervous. A bit sad.\" \n\nHe squeezed my fingers lightly. \"One adventure ends, another begins.\" \n\nI tried to smile as I nodded, but the question about whether that next adventure would include Noah was left unspoken.\n\nGreen fields passed by us as Ontario turned to Quebec. Noah's hand remained in mine as I stared out the window, not really seeing the landscape that pressed us ever closer to our destination. My thoughts were consumed as everything caught up to me. My father had really, truly disowned me. My childhood home, the only place I had ever lived aside from the dorm room he paid for while I was in college, was no longer my home.\n\nThe money I had in the bank seemed like so much a week earlier. Faced with the fact that I no longer had a home to go to, though, it seemed sparse. I had enough to get by for a little bit, but I also had nothing to my name except what was in my backpack, no job, and no prospects for one.\n\nI hadn't asked Sean how long I could stay with him, or even if he had room for me to crash for more than a couple of nights. I also hadn't seen Sean in years. What if we didn't get along anymore? What if he thought I had waited too long to find him? \n\nWhat if he didn't like me?\n\n\"Nickel for your thoughts?\"\n\nHis voice startled me. My hand fell from my neck, where I hadn't realized I was twisting the silver cross he'd bought for me. \n\n\"Don't you mean penny?\"\n\n\"Nah. They got rid of the pennies, remember?\" \n\nI snorted softly.\n\n\"Talk to me.\" \n\n\"I think I just realized I'm technically homeless.\" \n\n\"Don't think your brother's gonna take you in?\"\n\nI shrugged. \n\n\"It'll work out.\"\n\n\"How do you know?\"\n\n\"Don't. But worse comes to worst, we head back to Toronto and crash with Tom and Jenny for a while. Tom'll let me work with him. Probably help you find a job too, while you figure shit out.\" \n\nA shred of my nervousness disappeared. \"You'd come with me?\"\n\n\"'Course. You don't know where they live.\" \n\n\"I do. The Uber picked me up there.\" \n\n\"Shit. Looks like you don't need me after all.\"\n\n\"Yes I do.\" \n\nNoah went quiet, looking down at our hands. The shred of nervousness that disappeared came back, along with some of its friends.\n\n\"Are you... will you stay? With me, I mean?\"\n\n\"Lacey, I\u2014\"\n\nHe was cut off by an announcement on the intercom. I bit my lip, hoping he didn't notice how sweaty my palm had suddenly become. \n\nWhen the announcement stopped, Noah didn't speak right away. I stayed silent as well, willing myself not to ask any more of him than I already had. It nearly killed me, though, as every fibre of my being wanted to beg him not to leave me. \n\nHe squeezed my hand again when he was ready to talk.\n\n\"I'm gonna stay with you while we figure out what's next,\" he said softly. \"Can't promise more than that. We just don't know what's gonna happen with your brother. Let's get there, get you settled in. If he doesn't want me there, I can\u2014\"\n\n\"That's not an option,\" I interrupted.\n\n\"It's not up to you.\"\n\n\"If he doesn't want you there, I'm not going to stay there either.\"\n\n\"Don't say that. Anyway, I got friends in Montreal. Or somewhere near Montreal, at least. But I got places I can crash.\" \n\n\"Do you just have friends everywhere?\"\n\nHe laughed. \"Been around the country a couple times now. You meet people here and there.\" \n\nI nodded but didn't say anything. That unspoken question swirled around us, prodding to be asked. When the tension became too much, Noah cleared his throat.\n\n\"Do you want to talk about... this?\"\n\n\"What do you mean?\"\n\n\"This. You and me.\"\n\n\"Do you?\"\n\n\"Not really.\" He squeezed my hand softly. \"I don't want to think about it having a time limit.\" \n\n\"Good. Me neither.\" \n\nWe didn't talk about it. We sat on the train, holding hands until Noah wrapped an arm around my shoulders. I pulled my feet up on the seat, leaning against him as we looked out the window and watched fields turn to trees, trees turn to roads, and roads turn to buildings.\n\nThe shreds of nervousness turned to worry and the worry to fear as Montreal appeared on the other side of the window. When Noah finally kissed me on the top of the head and said we should get ready, I was paralyzed against him, tears welling up in my eyes.\n\n\"You can do this,\" he whispered when I didn't move.\n\n\"What if I can't?\"\n\n\"Came all this way just to pussy out?\"\n\n\"Maybe. I run away from everything that scares me.\"\n\n\"Know for a fact that isn't true.\" \n\nI twisted in my seat, turning to look at him.\n\n\"You've seen me do it multiple times.\" \n\nHe kissed me, comfortingly steady and reassuring.\n\n\"Also seen you naked and shaking in fear. Didn't run away then.\" \n\n\"That's different.\"\n\n\"How?\"\n\n\"I wanted that. I'm still a coward about everything else.\"\n\n\"Pretty sure a coward doesn't travel across the country by herself getting up to all the trouble you did.\" \n\n\"That was because I was running away.\"\n\n\"You called your dad. You hung up even though you knew what it meant.\"\n\n\"That was\u2014\"\n\n\"Was not something that a coward does.\" He kissed me again, his magical lips melting away some of my fear.\n\nThe train stopped and people began to bustle around us, heading for the doors.\n\n\"Come on. Let's go meet your brother.\" \n\nHe still had to urge me off the train, trying to prevent people from pushing against me as we stepped onto the platform. Maybe it was just because I knew it was our final destination, but the station itself seemed to be more massive than even Toronto. People walked in every direction, stepping around each other without missing a beat in an intricate dance that I had never learned. \n\nNoah taught me the steps as he took my arm, leading me through the throngs of people towards the main hall of the station. Once we were there, we stopped. Noah let go of my arm as I saw the familiar red letters of the Tim Horton's glowing brightly. \n\n\"See him yet?\"\n\nI searched the faces of the people waiting nearby, but didn't see one that belonged to my brother. Still we walked closer, and I was so focused on finding Sean that I almost didn't hear Noah's next comment.\n\n\"Holy shit, that lady over there looks just like you, Lacey.\" \n\n\"Lacey?\"\n\nTime seemed to move like syrup\u2014the thick, cheap, sickly sugary kind\u2014as I looked towards the voice that called my name. When I saw the woman Noah was talking about, I turned back to him, an incredulous look rivalling the one he'd given me when the beat-up old sedan pulled up in front of us in Hinton spreading across my face.\n\n\"Lacey!\"\n\nI turned back to her.\n\n\"Mom?\"\n\n**\n\n<center>Chapter Nine</center>\n\nNoah's arms stopped me from running.\n\nI had already taken two steps backward when he caught me, strong arms that rooted me to the floor. My eyes hadn't left her face, a reflection of mine, brown eyes wide on a freckled canvas that gave a hint of what my future held. Emotions coursed through me, betrayal and confusion and guilt. The instinct to greet her respectfully was strong. The instinct to run was even stronger.\n\n\"Goddamnit, I told you two this was a bad idea.\"\n\nA tall man with blazing red hair and chiselled features was standing just behind my mom, shaking his head as he grimaced. Beside him stood a man I hardly recognized, yet knew instantly. No longer the scrappy-looking teenager with curly hair that fell into his eyes, Sean's face was tensed into a worried frown. He stepped away from the red-haired man and past our mother, holding his hands up in surrender.\n\n\"Lace, just let me explain\u2014\"\n\n\"What the fuck, Sean?!\"\n\nThe words were out of my mouth before I knew what I was saying. I clapped a hand to my mouth, startled by my sudden outburst.\n\n\"Lacey Marie!\" Mom gasped. \n\n\"Come off it, Mom,\" Sean said. \"Lacey, look. There's a lot to explain, I know\u2014\"\n\n\"You tricked me.\" \n\n\"I didn't,\" he insisted. \"I swear to God. I just, we thought you might not come if you knew\u2014\"\n\n\"I'm not going back.\" My eyes focused back on my mom. A desperate, wild ferocity was pounding in time with my heartbeat. \"I'm never going back there.\" \n\n\"Neither am I.\"\n\nCould something have surprised me more than hearing her say that? Maybe. \n\nMaybe if the sky had turned green and the sun was replaced by two glowing hockey pucks. Maybe if Roger had appeared alongside her, repented, joined a seminary, and was devoting his life to helping spread the word of God on humanity's first manned mission to Alpha Centauri.\n\nIn terms of actual, realistic possibilities, nothing could have surprised me more.\n\nIt was only as I stared at her dumbfounded, Noah's arms still loosely gripping me as if I would sprint away at any second, that I saw the differences in her. Her eyes, so similar to mine, were rimmed with red, swollen against her freckled skin. Tense lines snaked away from the corners of her mouth, a strange mix of sadness and relief as she pressed her lips together. \n\nAnd her left hand, furled into a fist around the strap of her purse, was missing the plain gold ring my father had sworn an oath on so many years ago.\n\nNoah released me as my shoulders sagged.\n\n\"What...\"\n\n\"We have a lot to talk about, sweetie.\"\n\n\"Let's do that at our house,\" said Sean. \"Please, Lacey? Come with us, let us explain?\" \n\nI could only nod, still gazing at the naked spot on Mom's finger.\n\nThe red-haired man stepped forward. \"Well, now that we've gotten the initial drama out of the way, welcome to Montreal.\" He extended his hand. \"I'm Rick. I'm so glad to finally meet you.\"\n\nI blinked off the shock long enough to be polite. \"S-So nice to m-meet you. I'm Lacey and th-this is Noah.\"\n\nRick grinned at Noah as he shook his hand as well. \"Hell of a story you two must have.\" \n\nI pretended not to notice my mom's hand tighten on her purse as she took in the sight of Noah. Her eyes flitted to the long hair brushing the collar of his jean jacket, silently judging his worn clothing and beat-up shoes. He either didn't notice or pretended not to, as well, and nodded solemnly at Rick.\n\n\"It's been an adventure.\" \n\nSean hovered nervously behind Rick until I finally looked at him.\n\n\"You're shorter than I remember,\" I said.\n\nHe snorted. \"You're taller than I remember.\" \n\nBoth of us fought back tears. Neither of us were successful as I lurched forward to hug my brother for the first time in nearly ten years. \n\nWhen we parted, our hands mirrored each other as we hurriedly wiped our faces.\n\n\"Um, Sean. T-This is Noah. He\u2014\"\n\n\"Made sure my precious runaway sister didn't end up dead in a ditch somewhere.\" Sean forewent the handshake and hugged Noah tightly, much to Noah's obvious surprise. \"Thank you. I don't know what the hell happened this past week but thank you.\" \n\nNoah nodded stiffly as Sean released him. \"Uh, thanks. Good to finally be here.\"\n\nMom stepped forward, albeit hesitantly. \"Hello, I'm Barbara Stephens.\"\n\nNoah was taller than Sean, almost as tall as Rick, and yet he seemed to shrink as my mother sized him up.\n\n\"Nice to meet you, Mrs. Stephens.\" His voice was restrained, barely wavering but nowhere near as steady as it usually was.\n\n\"Just Barb, please.\" She extended her hand. \"I owe you some gratitude for taking care of Lacey.\" \n\n\"It was no problem.\" \n\nThe tension between the two of them was more than obvious and I shifted uncomfortably. Sean seemed to notice too, and thankfully stepped in.\n\n\"Well, let's all get going. We have a lot of catching up to do.\"\n\nMom looked at me. \"Does your new friend\u2014\"\n\n\"Noah is coming with us.\" \n\n\"Of course he is,\" Sean said quickly. \"It'll be a bit squishy in the car, but we'll all fit.\" \n\nMom nodded tersely and hesitantly touched my arm.\n\n\"I'm glad you're okay.\"\n\nI bit my lip and nodded, trying not to cry again.\n\n\"Thanks, Mom.\" \n\n**\n\nIt was the most uncomfortable car ride of my entire life. \n\nRick tried to gallantly insist that Mom sit in the front seat, but she shook her head pragmatically.\n\n\"There'll be no room for Lacey if we put both of you giants in the back seat.\" \n\nShe was unfortunately correct, and so I sat in the middle seat, squished between her and Noah. \n\nThey were both so tense and rigid that it was like sitting between two filing cabinets. I probably wasn't much better, but at least they each had a door on the other side that they could lean into. I had no choice but to press against Noah on one side and Mom on the other. \n\nPutting me in the middle seat was also likely a prevention method. There was a 50/50 chance that I would have opened the door and jumped out of the car somewhere in the middle of downtown Montreal, and I was fairly certain everyone else suspected that. \n\nI itched to grip Noah's hand as we drove, but they were clenched tightly in his lap. Instead, I took in the sights of the city that I had somehow missed while we were on the train.\n\nUnlike Toronto, Montreal wasn't all angles and corners and shining buildings. It was a whimsical mix of old and new, huge stone cathedrals on one corner and shining glass high-rises on another. None of the other cities we had been to had the same sort of historical feel, the sense of rich tradition and modern life twisting around each other like ribbons. \n\nAs we left downtown, we wound through streets lined with trees and houses on hills, beautiful places that looked like something from a storybook. Sunlight shone strongly, bathing the world in an early-evening glow, and I imagined it streaming through kitchen windows and onto patios as people sat down for dinner. \n\nWe turned into a quiet neighbourhood about a half hour later. The houses there were large, manicured lawns with cheerful flower gardens bordering the properties. I knew which house was Sean's before he pulled in. My mom's car was parked in the driveway, comically out of place in comparison to the other expensive cars parked along the block. As soon as we were parked, I scrambled out of the car behind Noah.\n\nSean's house was quaint in that it was small and had a cottage-like feel from the stonework on the outside, but it was clearly designed to look that way. The small yard was lush and green, shaded by a large, healthy tree that branched across his yard and the one next to it. ",
        "\"Come on in,\" Rick said. \"No sense standing out on the driveway.\" \n\nHe grabbed Noah's backpack from the trunk as Noah took mine, shaking his head as I reached for it. He slung mine over his shoulder and carried his own by the handle. \n\n\"Your house is beautiful,\" I said to Sean as we walked up.\n\n\"Nothing to do with me. Rick's the rich one, I'm more of a kept woman.\" Sean laughed flamboyantly as Rick rolled his eyes.\n\n\"Don't listen to him. I'm a glorified servant. He's damn good at what he does.\"\n\nNoah saved me from having to ask an awkward question to my own brother.\n\n\"What do you do, Sean?\"\n\n\"Architecture. I draw houses, people build them.\"\n\n\"Give yourself some credit,\" Rick urged. \"He designs custom homes for people with far too much money. Designed this one, too.\" \n\nI could see every bit of Sean's personality in the home as we entered it, though he insisted it was Rick who had made most of the decisions. Once inside and away from the other homes in the neighbourhood, it didn't seem that small, and every touch, from the colour of the floors to the art on the walls, was meticulously perfect.\n\nWhat surprised me most were the small details that I didn't expect. A rosary hung from the edge of a mirror in the front hall. In the kitchen, a cross was prominently displayed over the window. I wouldn't have expected Sean to keep any sort of religion in his life after how our father treated him, but small things here and there showed he had. \n\nThe most surprising detail of all was a small portrait that hung on the fridge. \n\nI remembered the photo being taken. We had gone into Winnipeg for some reason as a family, and my mom insisted on going to Sears to have a \"real family photo done, just the four of us.\" I was maybe six or seven at the time. She begged and begged for all of us to smile, and we did... for the first ten or so times. On the last one, Sean had whispered in my ear to make a silly face. When Mom saw the photo, she had nearly cried laughing at my crossed eyes and stuck-out tongue and Sean's teeth poking out over his upper lip. She bought one or two of the nice family photos, but the rest of them were of that last picture, much to my father's dismay.\n\nA smile crossed my face as I looked at the photo. Sean and I were wearing matching sweaters, knitted monstrosities that I recalled being incredibly itchy. Mom was in her nicest Sunday dress. I couldn't remember what my father had worn, and it didn't matter. The magnet that held it to the fridge was covering him almost entirely.\n\n\"Remember how pissed Dad got?\" Sean asked, coming up behind me.\n\n\"'You spent good money on this?! What kind of family will people think we are?!'\" I said, rolling my eyes. \"I think you've improved the photo with the magnet, to be honest.\"\n\n\"Couldn't cut him out without losing part of your head,\" he explained. \"Figured it was the next best thing.\" \n\n\"It's great.\"\n\n\"Hey, you see this, Noah? Come here.\" Rick waved Noah across the kitchen. \"I almost didn't recognize Lacey in the train station. This is the only photo I've ever seen of her.\" \n\nI laughed as Noah came up and snorted at the photo.\n\n\"You haven't changed a bit.\" He nudged me softly and I mimicked the face at him, sticking my tongue out as far as it would go. \n\n\"I cannot wait to hear all the stories you have about her, Noah,\" Sean said. \n\nI tried very, very hard not to blush as I thought about some of the stories Noah had about me. I doubted very much that Sean would want to hear all the stories Noah had.\n\n\"Maybe Noah could wait in the living room while we have a quick talk,\" Mom said from behind us.\n\nThe laughter in the kitchen faded and I felt my shoulders tense. \n\n\"You know, I was going to fire up the grill and make some steaks for dinner,\" Rick said hurriedly. \"Noah, you drink? Grab a couple beers and you can help me on the patio.\" \n\n\"Oh no, Rick, you can\u2014\"\n\n\"That's a great idea,\" interrupted Sean as he glared at Mom. \n\nNoah awkwardly helped as Rick pulled ingredients and steaks from the fridge, shyly asking for just a bottle of water instead of the beer before carrying as much as he could out the back door. I mouthed an apology at him when he caught my eye and he nodded, a tight smile on his lips.\n\nOnce they were gone, I sat at the kitchen table.\n\n\"Beer or wine, Lacey?\" Sean asked. \n\n\"Wine.\"\n\nHe got a glass for each of us and sat beside Mom, across from me. She looked slightly scandalized at the glass in front of me, and even more when I took a large sip. \n\nWe were all quiet for a moment, no one sure of where to start.\n\n\"Have you talked to your father?\" Mom finally asked.\n\n\"He disowned me.\"\n\nShe recoiled as though I had slapped her in the face. \n\n\"When did you talk to him?\"\n\n\"Two nights ago.\"\n\n\"He actually said that?\" Sean asked. \"Like, he said\u2014\"\n\n\"Well, he said I was dead to him for being a whore and if I hung up on him, I could never come back.\" I shrugged. \"So I hung up on him.\"\n\nSean muffled a snort as Mom pressed her lips together. \n\n\"Lacey, I'm so... I can't believe...\" She stopped, her voice catching. \"Your father is... he... that... that jerk!\"\n\nI couldn't help it. I burst out laughing, unable to contain my emotions any longer. Sean joined in next, and Mom followed shortly after, until the three of us were howling at the kitchen table.\n\nIt was ridiculous. Ridiculous and hilarious and heartbreaking, the three of us sitting around his table and laughing at the fact that my father, my brother's father, my mom's husband, had broken our family so it could reform in the iteration it was at that moment.\n\nMy hands found my head as tears started to fall. I didn't know when, exactly, the laughter turned to sobs, but suddenly Mom was beside me with her arm around my shoulders and I was reaching for her, crying on her shoulder like a child as she comforted me. \n\n\"It's okay,\" she murmured. \"It's all right. We're here, together.\" \n\nI sniffed and nodded, pulling back from her. \"I'm okay. I'm fine.\" \n\n\"Lacey...\" She hesitated, then tentatively touched the silver cross Noah had gotten for me. \"Where... what happened to Nana's necklace?\" \n\nMy face burned. \"It's, um... it's a long story.\" \n\n\"Maybe we should get the stories out in the open,\" Sean said. \"Get us all on the same page.\"\n\n\"Yes,\" Mom shuffled back to her chair, wiping her own face as she sat back down. \"What happened, Lacey? When you left for Winnipeg?\" \n\nI started from the very beginning, that day that seemed so long ago but in actuality was just barely a week gone. I told them how Roger had tricked me, how terrified I was to go back home and face my failure. The moment Sean had popped into my head and how certain I was that he would be in Vancouver, and how little planning I'd done before getting on the train headed west.\n\nI didn't tell them about the drugged drink. When Sean asked how I met Noah, I glossed over the part in the dining car and said I'd told him what I was doing and he said he'd look out for me.\n\nWe didn't tell the story in turns. It evolved, starting with one person and moving to the next as the tales entwined. Mom picked up the story when I mentioned the phone call in Edmonton.\n\n\"Your father and I were bringing coffee to the senior's center. When we pulled out of the Timmy's, Dennis commented that he was sure he had just seen Roger's truck pull into the parking lot. I said it must have just been a similar one, but he was certain that it had that horrible window sticker on it.\"\n\n\"Calvin pissing on Ford,\" I said.\n\nSean laughed as Mom rolled her eyes.\n\n\"Yes, that one. When we got home, he was about to call you when the doorbell rang. Kristen was there and she told me how she had seen Roger the day before, what she had heard, but that she had never heard back from you and she was worried. I told her we'd let her know when we heard back and Dennis called right away.\"\n\n\"And I didn't tell you anything useful,\" I said. \"Daddy was so mad and I just\u2014\"\n\n\"He heard Noah in the background and he lost it.\" Mom shook her head. \"He tried calling back as soon as you hung up but\u2014\"\n\n\"I was bawling. Noah was there for me, he... I would have gotten into trouble without him.\" \n\nShe continued on. My father kept trying to call while she tried to figure out where I was going. They had fought the entire day as she told him to calm down, sure I would call back. When they woke up the next morning and I still hadn't called, he had lost his mind. She had suggested filling out a missing persons report, but he had screamed at her that he didn't want the embarrassment. Desperate, Mom had told my father she was going to ask Kristen some more questions, drove three blocks down the street, parked, and called Sean.\n\n\"I thought you had died,\" Sean said, not a trace of humour on his face. \"Mom called and just kept mumbling 'she's gone, she's gone' and I thought you...\" He shook his head, shivering. \"She finally got the whole story out. We both thought she was grasping at straws, thinking you'd reach out to me, but I promised her I'd try to get a hold of you. Rick was ready to ask his boss to lend him money to get a private investigator.\"\n\n\"I was considering getting one to find you,\" I mumbled. \"You're not online anywhere.\"\n\n\"I don't go by that name anymore,\" Sean said. \"I guess you wouldn't know that. But I changed it after I left. It's Sean Lemieux now.\" \n\n\"Lemieux? Like Mario Lemieux?\"\n\nHe burst out laughing. \"Yeah, exactly.\" \n\n\"I should've known. He was your favourite player.\"\n\n\"Only because I thought he was hot. Closest I'd get to being Mrs. Lemieux.\" \n\nI giggled as Mom smiled tensely. \n\n\"Well, anyway, I kept trying and when you finally answered I nearly shit myself. And then when you told me you thought I was in Vancouver, I nearly had a heart attack. As soon as I got off the phone with you, I called Mom and said you were scared to call home because of Dad, but that you were with Noah. Which, of course, she nearly had a heart attack over because she had no idea who Noah was.\" \n\n\"I asked everyone,\" Mom said. \"Kristen had never heard of him. A couple from church have a son named Noah, but he works at the grocery store and I had seen him that day. When I called Sean back later to see if he'd heard from you, I... well...\"\n\nHer face changed, grief and sorrow and anger mixing up in her eyes as she cast them down at the table.\n\nSean touched her hand softly.\n\n\"It's okay, Mom.\"\n\nShe took a breath. \"I thought your father had gone out. I shouldn't have called Sean from the house, but I wasn't thinking straight. I told him what I found out, talked to him for a while and asked him to tell me if he heard from you again, and when I turned around...\"\n\nSean picked up the story, summarizing quietly. My father had heard enough of Mom's conversation to figure out who she was talking to, and he was livid. He screamed at her, berated her, and when she screamed back that he had pushed both her children away, he had grabbed her and pushed her into the wall hard enough that she saw stars.\n\nHer scream had been loud enough that the neighbours heard. When they pounded on the door, my father had taken a breath, straightened his shirt, and went out the back door to his car. Mom didn't move until she heard him drive down the road. She gathered herself and went to the door to tell the neighbours that everything was fine. Then she went upstairs, packed up as many of her belongings and mine as she could, and gotten in her car.\n\n\"Sean told me to leave. For years.\" Her voice was raggedly quiet. \"I... I never could. Somehow, knowing I had two children who were strong enough to run away from that man made me realize I could, too.\" \n\nHer statement made me angry rather than relieved. The sudden change in emotion confused me and I frowned, trying to determine what my instincts were trying to tell me. \n\n\"She called from the road,\" Sean continued. \"That drive is a full 24 hours if you don't stop. You made it in, what, 26?\"\n\n\"Something like that.\" Mom shook her head. \"It was very stupid and dangerous of me. I slept on the side of the road for a couple hours and kept driving.\" \n\n\"We didn't know if we should tell you or not.\" There was pain on Sean's face as he spoke. \"You're my baby sister and I always have and always will love you, but I haven't seen you in ten years. I didn't know if you'd take the news well.\"\n\n\"And I felt like I didn't know you at all,\" Mom said. I bit my lip hard as I tried not to tear up again, torrents of guilt rushing through me as she spoke. \"I don't mean that in a bad way, sweetie. It was just so unlike you, and I felt like I had failed, like my daughter was running from me as much as she was running from Dennis. I was so scared and so worried... and so proud.\" \n\n\"Once Mom got here, we decided we'd wait until you were in Montreal to bring it all up. It just... it felt like the safe choice.\" Sean's eyes were nervous. \"We didn't intend to trick you or lie to you, Lace. The intent was\u2014\"\n\n\"The intent was to take my opinion out of the decision.\" My voice was harsher than I intended and Mom visibly winced. \n\n\"No, it was...\" Sean stopped and took a breath. \"I can see how that was a consequence of what we did. I'm sorry.\" \n\n\"It's fine.\"\n\nIt wasn't, but there was nothing to be done now. I had been on a train, learning and growing and changing with Noah, losing my virginity and going on dates and fucking around while my family had fallen apart. My leaving had been the catalyst; if anyone was to blame for the mess, it was me, and if there was anyone to be blamed for not being involved in the clean-up, it was also me. I ran away. It was stupid to expect they would wait for my opinion when they didn't even know where I was.\n\n\"If you say so,\" said Sean. \"So, that's how Mom ended up here. She got in a couple days ago and we've just been trying to sort things out while waiting for you.\" \n\nI thought perhaps I wouldn't have to share the rest of my story, since the major drama had been resolved, but Mom wasn't having it.\n\n\"So when Sean called you, you were driving? What happened to the train?\"\n\n\"It broke down in Jasper,\" I replied. \"We... well, Noah had some... friends. In Hinton. They lent us their car.\"\n\n\"They lent you a whole car?\" Sean's eyebrows were raised. \"And were okay with him driving it all the way to Vancouver?\"\n\nI shifted uncomfortably. Lying did not come easy to me, and I wasn't sure how to gloss over the rougher parts of the story with their attention laser-focused on me. \n\n\"It was a strange situation,\" I said. \"When we got the call from Sean\u2014\"\n\n\"Wait, you didn't answer my question,\" Sean said.\n\n\"It's not important.\"\n\n\"It sounds important.\"\n\n\"Why would it sound important?\"\n\n\"Because you're avoiding the question, which makes me think it was important.\"\n\nMy knee bounced as I glared at Sean. \n\n\"This conversation only works if we're all being honest,\" Mom said softly. \n\n\"You already don't like Noah,\" I said quietly. \"I feel like you'll judge him without understanding everything.\" \n\n\"It's not that I don't like Noah\u2014\"\n\n\"Mom.\" I looked at her, suddenly very tired. \"You literally just said that this only works if we're all being honest.\" \n\n\"I understand you met him in some very unique circumstances. That doesn't mean he's not a good person, it just means that... well, maybe there are some things about him that you've overlooked.\"\n\nI opened my mouth to respond, but Sean cut me off.\n\n\"How'd you guys get the car, Lacey?\"\n\n\"His friend lent it to him.\" I sighed and closed my eyes. \"Just, he maybe didn't tell them we intended to go all the way to Vancouver.\" \n\nMom's lips pressed together tightly.\n\n\"See, you\u2014\"\n\n\"It's an understandable concern,\" Sean said quickly, cutting me off. \"But just because it was a questionable decision doesn't mean he's a bad person. It's... let's just leave it there, okay?\"\n\nMom and I both nodded.\n\n\"And your necklace?\" she asked stiffly. \"Nana's cross?\"\n\nMy hand fluttered to the silver replacement Noah had got me. \n\n\"I gave it to his friends.\"\n\n\"Lacey!\"\n\n\"It was to make up for the car.\"\n\n\"So you lost your grandmother's antique necklace to make up for his decision to steal a car?!\"\n\n\"I chose to do it,\" I said fiercely. \"Noah helped me more than he had to with everything.\"\n\n\"Like what?\"\n\nI stiffened and took a sip of wine, composing myself. \n\n\"Look, I'm not ready to talk about all of this.\" I stood up to leave as Sean protested. \n\n\"Wait, just wait.\" He held his hands out as if it would stop time. \"Look. Let's... okay. Mom, Lacey's been through a rough week. She's right, we need to respect that. Lace, we just... it's hard to understand what Noah did for you if you don't tell us.\"\n\nI looked at him closely, realization dawning on me. \"You don't like him either.\" \n\n\"That's not\u2014\"\n\n\"Why can't you just trust that he's a good person? Why can't you just take my word for it?\"\n\n\"I haven't talked to you for ten years!\" Sean's eyes were glistening, his face twisting as he tried to maintain his cool. \"I don't know you. I want to, but... it's hard to take your word when I don't know what your word means anymore.\" \n\n\"Noah was the one there for me when I was scared. He kept me out of trouble. He was the one hugging me when I cried, talking me through panic attacks when I was on the wrong side of the country, and making sure I was safe.\" I fought back my own tears, mirroring Sean's expression. \"If that's not enough, then I'm sorry. But I can't tell you more right now.\"\n\n\"Okay.\" Mom's voice was soft. \"You're right. We haven't been giving you the right support to feel like you can share those details without our judgement. I'm sorry.\"\n\nSean nodded, taking a calming breath. \"Please stay, Lacey.\" \n\nHesitantly, I sat back down. I tried to keep the anger and iciness from my voice, but the rest of my story came out flat and cold.\n\n\"We returned the car. Then took the bus to Edmonton so we didn't have to wait in Hinton for two days. Caught the train there, got an upgrade so we had a bed... beds... to sleep in. They said tickets would be cheaper if we bought them in Toronto and that was true, but the train was sold out. Noah had friends in Toronto that we stayed with.\"\n\nBoth of them caught my slip-up about the bed on the train, but neither said anything as I sipped my wine.\n\n\"I called Daddy when we were in Toronto. He didn't tell me that Mom wasn't there, even though I asked to talk to her. I told him I didn't want to come home and he said he didn't know where he went wrong, since Sean was...\"\n\n\"Let me guess. He called me a faggot.\"\n\nI nodded. \"And called me a whore. He said if I hung up, I would be dead to him. I told him... I said I forgave him. And then I hung up.\" \n\n\"You forgave him?\" Mom said quietly.\n\n\"I forgave him for me, not for him.\" I looked at her, my expression cold but softening as I saw the look on her face. \"I didn't know about what happened to you. He didn't even tell me you had left.\" \n\nShe nodded, not speaking.\n\n\"Then we came here.\" I finished my glass of wine. \"That's it.\" \n\n\"That's it for the story, or you need more wine?\" Sean joked awkwardly.\n\n\"Both,\" I replied, not really joking. It was enough of a break in the tension that we all laughed, however.\n\n\"I'll take a glass, too,\" Mom said. \"I think... I think we all need more wine.\" \n\nThat was the understatement of the year.\n\n**\n\nOf everyone aside from myself, it was Rick who got along best with Noah. \n\nAfter refilling our wine and chatting about menial, unimportant details, Sean went to the patio to see how dinner was coming along. As he opened the door, we were greeted with a gale of laughter coming from outside.\n\n\"Yeesh, it sounds way more fun out here,\" Sean said as he stepped out of the kitchen. \"I should've joined this party instead!\"\n\nI agreed with him completely.\n\n\"It'll still be a while,\" I heard Rick say from outside. \"Potatoes are taking longer than I thought.\" ",
        "\"Well, why don't you come in, Noah? We can show you to your room, let you guys get cleaned up a bit. Must've been a long day.\" \n\nThe tension and anger that had consumed me throughout the conversation with Mom and Sean melted as Noah stepped back in through the door. Just the sight of him gave me a sense of relief and contentment that I couldn't explain. He still smiled tensely, but seemed to have gotten a bit more comfortable.\n\nThat little shred of comfort disappeared from his eyes when my mom looked at him with a harrowingly stiff stare.\n\n\"Sean, why don't you put Lacey in the room I'm in? Noah can take the basement room and I'll sleep on the sofa.\" \n\nShe didn't have to spell out her expectations. Noah and I were not to share a room. \n\nI bit back what I wanted to say, which was that the sleeping arrangements were not up to her, in an attempt to keep the fragile peace we had just established.\n\n\"Of course not. I'll take the couch,\" I said. \n\nNoah shook his head. \"It's fine. I'm good with couches.\" \n\n\"No one is sleeping on the couch,\" Sean insisted. \"My office has a futon.\"\n\n\"Perfect. I'll take the futon,\" I said.\n\n\"Well, the downstairs room has Lacey's things in it,\" Mom said. \n\n\"My things?\" I asked before remembering what she had said about packing some of my belongings up. \"Oh! Well, I'll just bring them upstairs.\"\n\nShe nodded tersely.\n\nSo that was how Noah ended up in the basement guest room while Mom ended up on one side of the upper floor, and I ended up in the room next to Sean and Rick's. \n\nSean pointed out the office I'd be sleeping in before showing Noah and I down to the guest room. \n\n\"Sorry,\" he said quietly. \"I mean, I probably should have asked if you were okay in the same room. I assumed\u2014\"\n\n\"Can we not right now?\" I asked, blushing.\n\nHe stifled a laugh. \"Jesus, Lacey. Fine. Anyway, I forgot Mom might have an issue with it. Sorry.\" \n\nI forgot all awkwardness as soon as he opened the guest room door and I caught sight of the stack of boxes my mom had brought.\n\nI had expected a bag or two with some essentials, maybe some mementos that couldn't be replaced. The boxes that were there looked like they held most of what I owned, likely more things than what my mom had brought herself, given the limited space in her car. \n\nNearly crying, I rushed to the boxes and opened the first one.\n\nClothes. Clean clothes. And underwear. Actual, real, fresh panties that hadn't been washed in the bathroom sink of a moving train. \n\nNoah and Sean both laughed as I clutched an armful of fabric to my chest.\n\n\"You can leave whatever you want down here,\" Sean said. \"We almost never use this guest room. Till you've got everything sorted out and you're settled, I'll store whatever you need, okay?\" \n\n\"You're not staying here?\" Noah asked, confused.\n\n\"Oh, she can!\" Sean shifted awkwardly. \"I mean, of course, our door is always open. Mom's staying here while she gets back on her feet. We just weren't sure what the next step was for you, Lacey.\"\n\n\"I don't really know either,\" I mumbled. \n\n\"We'll figure it out tomorrow. No rush.\" Sean stepped back out of the room. \"Anyway, you saw where the bathrooms are. Dinner should be about a half hour. Rick always forgets potatoes take longer than he thinks they will.\" \n\nFor the first time since we got off the train, Noah and I were thankfully and gloriously alone.\n\n\"You okay?\" he asked immediately. \n\nI nodded.\n\n\"You've been crying. Your eyes are red.\" \n\nI sighed miserably, abandoning the boxes to sit on the edge of the bed.\n\n\"They don't like me, eh?\" \n\n\"They don't know you.\" \n\nHe smiled tightly. \"What'd'ja tell them about me?\"\n\n\"That you helped me and took care of me. They know about th-the car in Hinton. Not about... your friends or what happened. Just that it w-was... borrowed. Mom noticed I didn't have my necklace.\" \n\nHe sat next to me on the bed. \"Don't lie to them for my sake.\" \n\n\"I didn't lie. I said I didn't want to talk about it, and I don't.\" \n\n\"I'm making things worse by being here.\"\n\n\"No.\" I grabbed his hand roughly. \"Don't leave me here.\" I swallowed hard, willing myself not to tear up again. \"Please.\"\n\nHis lips found my cheek, warm and comforting against the dried tears. \n\n\"You want me here, I'm here. We'll figure it out tomorrow.\" \n\nI turned my head, catching his lips with my own. For a moment, we just stayed like that, innocent and chaste in our contact, comforted and revived by our closeness.\n\nWhen we parted, I told him about the conversation with Mom and Sean. Noah listened quietly as I explained everything, tiredly reliving the emotions and frustrations and sadness. When I finished, he didn't say anything, just wrapped his arms around me and held me close.\n\nWe only moved away from each other when the sound of footsteps coming downstairs echoed through the basement.\n\n\"Lacey?\" my mom called. \"Noah. Dinner is just about ready.\" \n\nI kissed Noah quickly and grabbed the armful of clothes I had pulled out of the box before exiting the room. Mom stood at the bottom of the stairs, warily disapproving as I exited.\n\n\"What were you\u2014\"\n\nI dropped the clothes and cut her off with a tight hug that shocked her.\n\n\"Thank you,\" I said. \"For my stuff.\" \n\nI pretended not to notice the tears in her eyes when we parted.\n\n\"Of course, sweetie. Any time.\" \n\n**"
    ],
    "authorname": "MsCherylTerra",
    "tags": [
        "canada",
        "female first time",
        "first date",
        "highway song story",
        "hotel room",
        "losing virginity",
        "oral sex",
        "passion",
        "romantic"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/runaway-pt-03"
}
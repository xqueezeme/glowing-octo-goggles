{
    "title": "CvsN 17: Sisters and Friends",
    "pages": [
        "CvsN 17 - Sisters and Friends\n\n================\n\nWorking out some house issues, and putting the teenagers through the paces. With a little mid-week boss thrown in for good measure.\n\n================\n\nThe bedroom wasn't the scene of ultimate debauchery I might have imagined. Joe appeared to be passed out between Debbie and Cathy. They were all naked, laying atop the covers, and Cathy rolled over with a groan when I opened the door. \n\nDebbie appeared to be wide awake, and was looking right at us as we entered. She opened her arms to me, beckoning. \n\nThe bed looked a little crowded, but I was helpless to turn down my beautiful roommate. Debbie loves the intimacy of face-to-face, so I crawled between her legs and stretched out over her. I was still sporting most of the hard-on Amie had been so kind to bestow on me before heading out, and as I lowered myself onto her, I felt Beth's intervention, as she held my cock and rubbed the head up and down Debbie's sticky slit, before guiding me home.\n\n\"I knew you'd come for me, though you took along enough,\" Debbie scolded before allowing me to kiss her and press my way home.\n\n\"Sounded like you had things under control.\" I looked over to see Beth disappearing into the bathroom. I couldn't help but wonder how we were all going to fit in here.\n\nDebbie raised her extended finger to her lips, shushing me. \"Shh, Later.\" She gave me a wink and mischievous grin which lead me to believe she had a story for me.\n\nI slowly ground into my dream woman, just taking it easy, luxuriating in the feeling of being sheathed within her, looking down on her perfect features and amazing body. God, I was one lucky man.\n\nI kissed her again, and just after our lips separated she whispered, \"And Karen?\"\n\n\"Share and share alike,\" I confirmed.\n\n\"Wow. You ARE my hero. You deserve something special if you managed to pull that one off.\" Her teasing grin was devastating.\n\n\"Please. What could be more special then this, right here, right now?\" \n\nShe laughed out loud, almost squeezing me out. \"A little more room, a little less company, a little more energy, and I sure could use a bath.\"\n\nI heard Cathy mumble, \"A little less bed-shaking, and a little more quiet would be nice.\"\n\nDebbie and I were working hard to hold back a giggle-fit, when Joe rolled over on to his side, blinking sleepily. I watched a huge grin envelope his face, before he leaned over and gave Debbie a kiss on the cheek. \"Thank you. You were amazing.\"\n\nShe smiled for him, easily. \"It's the company I keep.\"\n\nJoe leaned in and kissed her again, on the lips. Then he rolled off and started tugging his recalcitrant wife off the bed. \"Ok, you, time for us to move on.\"\n\n\"No.\"\n\n\"C'mon, we can't stay here all night. The dogs haven't been out, the kids have to be ready by 8:00. Time to be a wife and mommy again. No more wild-thing.\"\n\nCathy slowly rolled over with a devilish smile. \"I was a wild thing, wasn't I?\"\n\nJoe kissed his wife hard. \"Just like old times.\"\n\nShe looked over at me and pointed accusingly. \"And you missed out! Don't you tell him anything Deb. If he wants to know, well, next time he can show up and find out for himself.\"\n\nDebbie mimed locking her lips and throwing away the key.\n\n\"Good.\" Cathy was slowly retrieving her clothing and making a mildly humorous effort at getting dressed. She was still out of it. With Joe's help the two of them did somehow manage to pull it together.\n\nIncontrovertible sex-fiend that I am, I continued to give it to Debbie, slowly and easily while our guests got ready and prepared to leave. I was going to just wave them goodbye, but my partner in crime pushed me away. \"Get up and say goodbye; I'm not going anywhere.\"\n\nThat was a mistake.\n\nCathy insisted on showing me a little of what I missed, and dropped to her knees, sucking me aggressively. She pulled back harshly, standing up and turning around, then yanking her shorts to the ground. She never had managed to get her panties on. \"I need just a taste,\" she said in mid-turn, \"come on and give it to me, big guy.\" She was still slurring her words, a combination of the wine and the tiredness. She reached back and held herself open for me.\n\nI felt a little awkward, strangely enough. I was hesitating, and Joe took a seat on the chair. \"Go on, or we'll never get out of here.\"\n\nFive minutes later, after a rough bit of upright fucking, Cathy groaned out \"Enough,\" and pulled away. \"God I'm sore,\" she mumbled, pulling her shorts back up, before giving me a kiss, first between my legs, then up a little higher. \"Next time...\" she started, then waved as she walked away, her husband in tow.\n\nBeth was already giggling. \"Damn, looks like we missed out on a pretty wild party.\"\n\nDebbie was pulling out new sheets from the closet. \"We keep this stuff up, we're going to be needing plastic sheets.\"\n\nBeth and I worked with her to get the bed stripped and remade. We were pretty experienced at it, and the truth was we all confessed to a love of slipping between fresh clean sheets. \n\n\"So spill already,\" I teased my platinum blonde goddess.\n\n\"No way. I gave my promise. You'll just have to find out on your own. I bet you could figure out a way to get her to tell you,\" Debbie teased.\n\n\"Don't encourage him,\" Beth warned. \"He's bad enough as it is.\"\n\n\"When he's good, he's very, very good. But when he's bad he's better,\" Debbie answered, sliding between the sheets and beckoning me.\n\n\"Damn Deb! Like he needs his ego fed anymore.\"\n\nMy hard-on was off, but I knew that being on top of Debbie would likely restore me to my glory. I climbed above her, entering the embrace of her slender legs. \"Believe me, Beth. Every night I spend with you two is about as ego boosting as it gets. Face it, being with either one of you is the ultimate male fantasy. But the two of you? Jesus, I'm not worthy.\"\n\nBeth was cuddling up to Debbie, while I leaned down and kissed first one, and then the other. The verbal teasing had stopped, and the girls turned toward each other, bringing their mouths closer and closer together as I continued my alternate kissing. After a couple of minutes we were in an amazing three way kiss, and the steel had definitely returned to my rod. Debbie reached between us and guided me home, and once again I thrust into her, buried. I stayed there, unmoving, as our intense three way kiss continued. When I backed away, the girls continued without me and I watched them while I started sliding in and out of the fabulous Debbie. I watched her close her eyes and relinquish herself to our attention. She relaxed her mouth, submissively, while Beth kissed her harder and deeper, sliding closer, moving over her face. It was more then I was used to seeing from them.\n\nI held Debbie's leg tightly, lifted it up over my shoulder and used the leverage to fuck her deeper, still taking care to not jostle her too much. I didn't want to interrupt the girl play. My other hand caressed our teen bedmate, fondling her delicious butt which I'd recently become so much more intimate with, and teasing her between her legs.\n\nBeth slowly moved back to her side, her hands caressing Debbie, while she watched us. \"Damn, she's so pretty, and so damned sexy.\" She touched where Debbie and I were joined, her fingers soft and gentle.\n\nI peered down at my sweet Beth. \"Look who's talking. Our own teenage walking Viagra.\"\n\n\"You are so full of shit,\" she said, but I saw the smile.\n\nBeing inside of Debbie was having its usual effect, and I was getting close. So was she, breathing harder. When Beth directed her hand to a more concerted effort, Debbie gasped and we both had the opportunity to watch her come for us. I loved that feeling. When she relaxed once more, I was ready to fulfill my own needs, pounding her hard. \n\nAfter just a few seconds of that, though, Debbie was pushing me away, guiding me between her and Beth. Gasping, I lay back and once more enjoyed the feeling of her climbing under the sheets and using her talented mouth to finish me. Beth was cuddling close, her head on my shoulder, drifting off. With a groan I finished for Debbie, and after a bit of after-play, she slid back up the bed, and mirrored Beth's position. \n\nWho could blame me for falling asleep with a smile on my face?\n\n---\n\nHalf the household had to work the following day, leaving Debbie, Robin and Jim working on our new addition. I felt kind of weird leaving them like that, but after the trip to Spain, there was a lot to be done at work if we were supposed to have a functional prototype ready to take on-site in four weeks. \n\nI did my best to play it cool around my boss, and thought I pulled it off pretty well. I really did have to be careful. Karen could sniff out stuff like we'd been up to a mile away, and she was not known to be good at keeping secrets.\n\nKaren and I had carpooled, as we often did. Neither of us were morning people, and the drive in was pretty quiet, especially for her. The same could not be said for the ride home.\n\nShe was all chatty about our little party the night before, particularly the part in her bedroom. \"You must be rubbing off on Jim. He insisted on having us both again after you left. And you know? It wasn't bad.\"\n\n\"That's great. How about this morning?\"\n\n\"I felt kind of odd, leaving the two of them in bed together, after last night, but I got him to promise not to go all the way without me there. I thought I'd get some resistance but Robin swore she'd wait for me. I never expected that.\"\n\n\"I'm glad. You think that's going to make things a little better for now?\"\n\n\"I guess,\" she said. Then she leaned back and I saw an odd little smirk flit across her lips. \"You know Jack, the house that lust built is a pretty fucked up house.\"\n\n\"Not the most conventional, I'll admit. But with you for an architect, I didn't expect any different.\"\n\n\"I thought Robin was the architect?\" she countered.\n\n\"Just of the addition.\" I reached over and placed my hand on her thigh, giving her a squeeze. \"You having regrets?\"\n\nShe was quiet a while, as if thinking. \"Oddly enough, no. As a matter of fact, I haven't been happier in a long, long time. Like centuries.\"\n\n\"You and Jim are good for each other. And working things out with Robin, that's priceless. Family is what it is.\"\n\n\"I know I have you to thank for a lot of it. You're always so good to me, taking care of me. I just have to remember that. Even when it seems you're being bad, usually it's the right thing for me in the end.\"\n\n\"And a very sweet end, I might add.\"\n\n\"Jesus, Jack. You are so bad!\"\n\n\"And you are so good. Jim is a lucky guy.\"\n\nShe smiled settling back in her seat before reaching her hand across the console and stroking the lump in my pants. \"Yes he is, isn't he?\"\n\n---\n\nThe week was pretty quiet, which was a nice change of pace. Not completely uneventful, but compared to my recent past, almost dull.\n\nFor instance, Wednesday, I found myself entering my boss Chris's office, and closing the door behind me. \n\n\"Can I help you?\" she asked, as if I was a door-to-door salesman.\n\n\"Hi. I just wanted to talk a second, if you don't mind,\" I told her.\n\n\"Do we have to? I thought we'd agreed...\"\n\n\"People are talking Chris.\" I told her.\n\n\"Talking?\" She looked nervous, and was fiddling with the pencils on her desk.\n\n\"They think we had some kind of fight over there. You hardly speak to me in public. We were always friendly, but now you're acting like I'm some kind of pariah.\" I walked around her desk, and sat on the edge of it. It gave me a nice view down her shirt. Shame on me.\n\n\"I just don't know what to do,\" she said softly. \"I'm afraid I'll show how I feel if I say more than a few words to you.\"\n\n\"I know. It's probably partially my fault as well. I'm having a hard time not letting my feelings show as well. But we can't be acting like strangers out there.\" \n\n\"I know, I know.\" She turned her chair a bit, facing me a bit more directly. \"But every time I look at you, I can't help but think about our last night there.\"\n\nI smiled, reached out and touched her cheek. \"I know. It's hard to not think about it. I've been acting a standoffish myself, but it's an act. I loved every moment I spent with you over there. Every time I look at you now, I get hard just thinking about it.\"\n\n\"Please. An old married woman like me getting you excited? Remember, I know what you're going home to.\"\n\nI took her hand and placed it on my crotch. She didn't resist. \"Every time I see you.\"\n\n\"Jesus, Jack!\" She gasped, but her hand squeezed me.\n\nI reached out and lifted her chin so I could lean down and kiss her. She responded nicely, her hand still grasping my hard-on. I pulled away and opened my pants. Chris helped, and I didn't complain. When her lips closed around my cock, I sighed and sat back, letting her do what she did so well. And she did it awfully well. \n\nIt only took her about 5 minutes, and she sucked me dry, not losing a drop. She looked like she was going to try to get me hard again, but she pulled away suddenly. \"What are we doing? Oh God, I knew this was going to happen.\"\n\nI pulled my pants up, and then kneeled beside her. \"That was amazing. And it's still our little secret. We just have to act natural for a few weeks, Ok?\"\n\n\"Alright,\" she said, \"but do me a favor. If you have to come in here, don't close the door.\"\n\n\"It's a deal, if you'll do me a small favor.\"\n\n\"What kind of small favor?\"\n\n\"Just button one more button. Or maybe you could even wear something a little less exciting.\"\n\n\"Less exciting? This is hardly exciting clothing. What would you have me wear?\"\n\nI finished buckling my belt. \"A burlap sack maybe?\"\n\nShe missed me with the pencil she threw. \n\n---\n\nSee what I mean? Almost dull. No new women, nobody walking in on anybody, nothing weird, perverse or seriously out of the ordinary. No threesomes, foursomes or moresomes.\n\nThen there was Friday. All week Jim had been working on the house with Robin and Debbie helping where they could. Each evening after work I'd put in a couple of hours as well. I'll hand it to Jim, he's a workhorse, and he was doing wonders both on the house and on adapting the garage into a daycare center.\n\nFriday, he encouraged me to come home early if possible. Eric had the afternoon off and would be coming over to help again. \n\nI headed home at lunch and got there just in time for sandwiches. With Eric working with us we made great progress putting up the drywall. The girls turned out to be even more help than I might have imagined, especially when it came time to put the sheetrock up overhead. When Debbie and Amie showed up, after a long day of herding preschoolers, things went even faster.\n\nEric and Amie seemed to be starting up just where they'd left off the previous weekend. Mischievous Beth was right in the mix, teasing and encouraging the potential couple.\n\nThe evening was warm; half t-shirts and short-shorts were de rigueur. Amie had shown up in her day-care clothing and when Robin offered to loan her some work clothes I knew I should have stepped in. She walked out with a t-shirt that was torn and barely covered her breasts. In small letters across the front it advertised, \"If you can read this, you're probably going to get laid tonight.\" That Robin was a bad influence. Of course her outfit wasn't much better reading \"TGIF\" in huge letters, with an explanation below \"(Tongue Goes in First)\".\n\nThe girls were amazing to look at, and Eric was in danger of getting whiplash. \n\nWe split up into teams so we could work on the garage-to-daycare conversion. I ended up with Jim, Robin and Karen working on the addition, while Eric, Beth and Amie worked on the garage and Debbie started dinner. As Eric and the teenagers headed to the backyard, I watched the girls slide their arms around his waist then down onto his butt, before I lost sight of them. I suspected that group was up to no good. I didn't expect a lot of progress out of them. At least not on the day-care space.\n\nI should have been giving consideration to my own teammates. \n\nRobin sidled up to me while we were taping the drywall. \"We could use your help again.\"\n\n\"How's that?\" I asked.\n\nShe looked around and leaned in close, \"She's hogging the boy-toy again. No love for the baby sister.\" She slid her arm around me, \"Of course, there's more than one way to solve that little problem.\"\n\nI let her know I'd look into it, and after a while, when our work brought Karen and me together, I kept my word. \"How's the new sharing thing going?\"\n\nKaren turned red. \"Pretty good.\"\n\n\"Pretty good for everyone? Or just for you.\"\n\n\"Damn it Jack. It's hard.\"\n\nI pulled her close, turned her so she was backed against the wall and pinned her there. \"I know it is. Robin has a bad history with you, and it's hard to trust her.\" I leaned in and gave her a small kiss. \"If it's not going to work out, if she's up to her old tricks, just say so. I'll kick her out.\"\n\nHer hand moved between us and was rubbing against my burgeoning hardness. \"No, it's not that. She's really being good about it. It's just that whenever we get into a situation it's hard for me to let go.\"\n\nWe'd all but finished what we were working on. \"Debbie!\" I called out across the house, \"How much longer 'til dinner?\"\n\nShe peeked her head out from the kitchen. \"Less than 30 minutes. You might want to clean up pretty soon.\"\n\n\"Jim, you and the girls clean up in here then clean yourselves up.\" He gave me a nod. I leaned over to Karen. \"I'll meet you upstairs in a few minutes. Just enough time for a quickie.\"\n\nHer eyes blazed, then she smiled and went about cleaning up in a frenzy. I, on the other hand, headed out back to give our other team the dinner update.\n\nEric was cornered, with two beautiful topless teenagers all over him, kissing him wildly and rubbing up against him. Nobody noticed me walk up until I was just behind them. I reached around Beth from behind, taking her tits in my hands and squeezing a moan out of her. \"Dinner is in less than 30 minutes. You might want to clean up in here. Afterward y'all can use our shower to clean yourselves up.\" Eric eyes were wide and he looked startled. Amie looked like the cat that had swallowed the canary. She gave me a wink, and a teasing lick of her lips. I reached out, turned both of the girls faces back toward Eric, and departed with a pat to both of their remarkable rears. \"Don't let me interrupt. I just wanted to give you the 411.\"\n\nI passed Debbie on the way back into the house, and let her know that the garage team knew the schedule. She asked me to send the kids down so they could eat first, with such a crowd.\n\nI hustled the tykes downstairs then let myself into Karen's room. Jim and Robin were just slipping out of the shower, drying off, and Karen was waiting her turn. \"Just too crowded in there for three,\" she remarked, \"and the bigger the crowd the longer it takes.\" Jim was looking a bit confused but not enough to lose his erection, and Robin was looking hopeful. While I undressed, I leaned in and whispered to Karen, \"What do you think they should do while waiting?\" \n\nKaren paused and looked up at me. She closed her eyes and sighed. As she peeled off her panties she spoke up, \"Jim? Do me a favor and take care of my little sister, while I'm busy here.\" As I joined her under the falling water, she stuck her head back out. \"And if you find you need to finish, don't wait for me.\"\n\nIt didn't take me 10 seconds to bury my cock in her. \"That was nice.\" I told her. I had her leg lifted up over my arm and was fucking up into her deliciously.\n\n\"Can we quick clean up?\" she asked me, gasping. \"I want to see them.\"\n\nI pulled out of her and turned her around under the water. \"Two minute shower. Get to it,\" I told her rubbing her back down, making sure to get her ass and legs. Then we switched positions while she did my back and I did my front. It was a shame, I very rarely got to shower with Karen, and here we were, done and drying off faster than I could have even gotten decently worked up. My face must have shown my disappointment.",
        "\"Don't worry baby, you'll get yours.\"\n\nJim was going at Robin doggy-style, and looked to be having a good time of it. Karen drew me to the bed, and I was a bit surprised when she positioned me in front of her sister's face. Robin was less surprised, or responded to it better, and sucked my cock down like a pro. At least like the very talented amateur she was.\n\nAfter just a minute or so, Karen got on her hands and knees beside her sister, facing the opposite direction. Under her direction Jim and I scooted over and plugged her at both ends, while Robin teased her sister's big jugs. I was fucking her pretty hard, when she pulled off Jim, giving him a squeeze. \"Hold on just a bit longer baby,\" she told him, while I continued my pummeling. \"Robin, back the way you were.\" Robin acquiesced gracefully, and Jim quickly stuck his cock back into her. I started to pull out, but Karen kept me working on her. \"Not yet. Let's not distract her. I'm so close,\" she gasped.\n\nWithin seconds Jim, red-faced and gasping, was emptying his seed into Robin, while I fucked Karen hard enough to get her off. With Jim done, and Karen momentarily sated, Robin turned around offering me her tail. I didn't stop to think I shouldn't be doing it, I just leaned forward and filled her, grabbing her slender hips and fucking the shit out of her. It wasn't long before she was moaning continuously. I moved higher over her, fucking downward, working my cock across her G-spot, and got the reaction I was looking for. The little sister came hard, spouting profanities, and gasping before collapsing on the bed. I put her on her side, lifted a leg, and went at her again, fucking the brazen little tease hard, giving her a bit of what she'd been begging for. She was getting closer to coming again, when Jim knelt beside her and fed her his hardening cock. He was rough, fucking her face pretty thoroughly, while I made her come, getting off on being filled so thoroughly at both ends.\n\nI knew I was about to lose it myself, so I summoned Karen beside me, on her hands and knees, pussy at the ready. When I knew I couldn't hold back any longer, I pulled out of Robin, to her cries of \"No!\" and slammed my cock into Karen. I just barely made it, filling her with my cream on the first stroke.\n\n\"Oh FUCK, that's wild,\" Karen gasped, while I continued to pump her full.\n\nI looked over at the clock beside the bed. \"And still 4 minutes early. Almost enough time to go again,\" I teased.\n\n\"Almost,\" Karen warned me, pulling away from my cock. She leaned down and pulled on her panties. \"We'll see how good a job that does. I expect I'll feel your hot cum leaking out of me all night, Jack.\" She smiled. \"Thanks.\"\n\nDownstairs, Beth was helping Debbie with the table, and Robin and Karen joined in. I scooped up Beth and held her in my arms, making her squeal. I gave her a kiss, which she responded to amazingly. \"Where are the other two?\" I asked softly.\n\n\"I thought I'd give them a few minutes alone now that he's properly warmed up. He's not a very quick mover, and he's almost as slow at taking hints. Hopefully he'll figure out that a naked shower is a big green light.\"\n\n\"Sorry to be out here with the old crowd?\" I leaned down and nuzzled at her breasts while she tried to stop me, laughing out loud. That got a giggle from the ankle-biters, reminding me we were not alone. All naughtiness should be contained behind closed doors.\n\n\"No. The teasing and play is fun, but I doubt the actual culmination would be all that remarkable. I mean, why eat bologna, when prime rib's available?\" She struggled out of my arms, leaving me with two young girls clamoring for attention. I took one in each arm, swinging them around and blowing raspberries on their bellies, once more goofing off when everyone else was pitching in. \n\nWell, not everyone. Amie and Eric came out of our bedroom at the end of the wildness. I was in the living room, playing airplane with the kids, when the door opened. Amie saw me standing there, and gave me a huge smile, then licked her lips wickedly. Eric was blushing hard, but he had his hand around her waist. I guess he was getting the message. And a little bit more.\n\nDinner was nice, and a relatively quiet event with the little ones watching TV in the living room. We cleaned up afterwards, many hands making light work, and Karen put the kids to bed, but not before everyone got hugs goodnight. When Robin and Jim excused themselves to join her upstairs, I was ready to call it a night. It wasn't even 9:00, but I was hoping for a little Debbie love, and a lot of shut-eye.\n\nDebbie joined me willingly enough, but Beth decided to stay with Amie and Eric a while. \n\n\"She's a bad one, our little Beth is,\" Debbie advised me, before heading to the bathroom for a quick bath. While the rest of us had all cleaned up, she'd been stuck with dinner duty. \n\nI decided to check in on our visitors and my teenage bed-warmer. A bottle of water for the evening seemed like the perfect excuse. As if I needed one.\n\nIt hadn't taken the living room crowd long to get going. Amie had her head in Eric's lap, while topless Beth had her tits wrapped around his face. She looked over at me, and quickly lifted a finger to her lips, asking for silence. I snagged the water bottles and paused to watch them a moment before heading back to the bedroom. Beth reached down and tapped Amie on the shoulder. Amie looked up and saw me. She smiled, pulled off of Eric's angry red cock, and put on a little show for me, looking up at me while she sucked him off. She had her glasses back on, and it looked like a scene right out of a schoolteacher porno. Beth was still feeding Eric her nipples, and they all appeared to be having a grand ol' time. I blew Amie a kiss goodnight, and went back to my bedroom, disrobing, finishing only moments before Debbie came out of the bathroom. I put my water bottle on my bedstand, then opened hers and offered it to her. She took it gratefully, taking a large swallow. \n\n\"Pot Roast. Always makes me thirsty, I should use less salt.\" \n\nI placed my lips over hers, kissing her warmly. \"It's perfect. Just like the cook.\"\n\nShe gave me a push, \"You're embarrassing me. I know I'm far from perfect.\"\n\nI stood straight, took her bottle from her, capped it and placed it on the bedstand. Then I reached out and peeled her towel off her, instantly putting the lie to her words. \"Perfect. I swear by God, if that's not perfection, it's as close as we're ever likely to see.\"\n\n\"Right,\" she answered cynically, pushing me away.\n\nMoving quickly, I scooped her up and laid her across my lap, swatting her ass sharply, drawing a surprised yelp out of her.\n\n\"You are perfect.\" I smacked her bottom again, not too hard, but with an open hand that sounded worse than it was. \"The most beautiful,\" SMACK, \"most loving,\" SMACK, \"most giving\" SMACK \"woman I've ever known.\" I rubbed her cheeks for a second while she wiggled in my lap. I stopped the wiggling with another firm loud blow that caught her attention.\n\n\"You keep an immaculate house,\" I spanking her again, firmly, \"cook like a master chef,\" another hard blow, \"and have raised the perfect little girl.\" Her cheeks were pink and she was begging me to stop.\n\n\"Tell me you're perfect,\" I told her rubbing her bottom. When she stayed quiet, I whacked her a good one, setting her squirming again. \n\n\"Say it, tell me your perfect, or I'll blister your perfect ass.\" \n\n\"I can't,\" she argued adamantly, earning another hard blow.\n\nI stopped and rubbed her ass, feeling the warmth. \"Say you're perfect for me. You know it's the truth. Tell me.\" \n\nShe looked up at me, her eyes moist, her face flushed. She smiled for me. \"Ok,\" she pulled herself out of my grip, giving a wry grin as she reached down and stroked my hardness. \"That thing was hurting my side.\" \n\nBeautiful Debbie pushed me back and straddled me, sinking down slowly on my hard rod. She leaned forward, her face just above mine. \"You're perfect for me.\" She kissed me hard, fucking herself. When she pulled away she was smiling. \"There. I said it.\"\n\n\"No you didn't, you brat. You know what I meant.\" I held her hips while I fucked up into her. She normally liked to be on bottom, but she seemed to be having a good time, riding me hard.\n\n\"I know what you said. And you were right. You ARE perfect for me.\" She slowly lifted up and looked down to where we were joined. \"Just look at that. You fit me perfectly.\" She slowly lowered herself down, filling herself. \"Any longer, any wider, and it would be too much. You are just right. You are perfect. I never believed a cock could be such a gift of pleasure.\"\n\nI pulled her down and held her close, while my hips kept moving, exploring her depths. \"You are perfect, you know. And perfect for me.\"\n\nShe sighed, kissing my neck. \"We can be perfect for each other,\" she grudgingly admitted. Then she pulled out of my arms, sat up straight and proceeded to fuck me like a mad woman. Within a couple of minutes I was cumming for her, bringing her with me, making her cry out. I gasped while she ground her hips down on me. She was wearing the most amazing grin.\n\n\"What?\"\n\n\"It sounded like they were closing up shop out there, and I wanted this one just for us.\" She leaned down and gave me a big kiss. \"And it was PERFECT.\"\n\nShe rolled off of me, still grinning, \"I hope you ate your Wheaties.\"\n\n\"Hunh?\" \n\n\"I think we have company.\"\n\nNo sooner were the words out of her mouth, then two topless teenagers came tumbling into our room, giggling like schoolgirls. Beth looked at the state of my waist. \"Hey, you started without us!\"\n\n\"Us?\" Debbie asked.\n\nI think Beth suddenly realized the gaff she'd made. \"I mean, well, Amie and I are all worked up, and Eric is gone. I thought, if it was Ok that is, that maybe she could join us for a bit. Only if it's Ok with you of course. It's just for a bit of fun, until we work out the whole Eric thing.\"\n\nAmie was leaning into Beth, her arm around the diminutive instigator. \"I'll be good, I promise. I'll do whatever you say. Whatever you want.\"\n\nDebbie yielded an exasperated sigh. \"Alright already. Get in here; just let's not plan on making a regular thing out of this.\"\n\n\"How about like Karen? Just for fun?\" Beth asked guiding her friend's face down to my sticky, semi-hard cock. Amie clearly wasn't too fastidious. She went straight to work.\n\n\"How about like Cathy?\" Debbie countered, \"Just on the rare occasions.\"\n\nWhile Amie sucked me back to hardness, Beth showed off how hard core a negotiator she was. She climbed over Debbie's body, pushing me roughly to the side. She lowered her face and kissed Debbie's lips softly. She pulled away, reached down and astonished me when she dragged Amie by the hair and pulled her over, pushing the pretty girl's face down into Debbie's recently used pussy.\n\n\"How about if she takes turns pleasing each of us?\" She said, giving Debbie's tit a squeeze. \"She's not just for Jack.\"\n\nBeth slid off the bed then leaned in and sucked on Debbie's fantastic tits, while Amie did her best to remove any evidence that I'd recently unloaded in my dream girl. \n\nDebbie looked at me, and I could still see some hesitation there. It had seemed she'd been becoming more secure about having sex, but she was always the giver, the object to be used. Now we were talking a different story. \n\n\"It's up to you,\" I told her, kissing her, and caressing her one available breast. \"Just enjoy it.\" I think it had something to do with why she preferred missionary. It was like she wasn't the one performing when she was in that position. And we could be so close, and open. Intimate, talking to each other, just enjoying what we were up to. I recalled that in the times she was with Joe, she didn't do it that way. It was a minor revelation.\n\nI leaned in closer and she kissed me desperately. \"It's Ok. Let us all pleasure you, just for a while. Nothing wild and kinky, just let us love you a bit.\"\n\nI snuggled up close and watched while Beth and Amie paid homage to Debbie's fabulous body. I whispered in her ear, talking to her gently, telling her how beautiful she was, what a pleasure she was, how much I loved being with her, around her, sleeping beside her, being inside her. \n\nWhile I talked to her, I felt the girls change things up. They moved Debbie onto her side, and I felt Amie guiding my cock back into my perfect girl from behind. Debbie's leg was lifted high and out of the way, while Amie's eager mouth resumed her play, working wonders where Debbie and I were joined. Debbie was in a sandwich now, Beth lying facing her, their breasts pushed together. She was kissing Debbie's face all over, occasionally even offering her lips to me for a quick kiss. We both told Debbie how wonderful she was until she came for us, in a series of easy, uplifting orgasms. \n\nAmie slid away and cuddled up behind me. I heard a tiny whisper, \"Damn, my tongue is worn out.\"\n\nDebbie and Beth were hugging. \"Ok, like Karen, I guess,\" Debbie finally agreed to Beth's and Amie's excited squeals. Then she was pushing Beth away. \"If you two have any more energy, use it up on each other or on Jack, but leave me out of it this time. I'm worn out. It's tiring being made love to like that!\" \n\nBeth leaned in and gave the platinum tressed goddess another quick kiss on her lips. \"Thanks, lover. I think it's time that poor Jack pulled his own weight.\"\n\nPulling my weight apparently meant letting Amie mount me for a while. My previous times with her were sitting on the couch, and under time constraints. This time I just let her ride me to her heart's content.\n\nAmie was breathing hard, ten minutes later, her legs tiring from squatting over my cock and pounding up and down. She finally settled down, having come twice, and just eased her hips back and forth. \n\n\"What's the deal? How long does he stay hard?\" Amie asked Beth who was cuddled up next to me.\n\nBeth kissed my shoulder, \"How many times you come tonight, baby?\"\n\n\"Just two,\" I told her.\n\nBeth smiled. \"He's probably good for a while more, how about giving me a turn?\" \n\nThe girls switched places, and Debbie gave us grief for moving so much and being too noisy. Beth tried to keep the movement down but Debbie still reached over and poked us when Beth came the first time. My voluptuous sex-pot started giggling, then slid off of me and dragged me to the floor with her. Beth leaned over the chair, presenting her rear and I plowed her for bit, before I had to put a pillow on the floor under my knees, and then pounded her with Amie leaning over me. I felt myself getting worked up, squeezing Beth's ass cheeks, making her squeal for me, biting down on her arm to keep the noise down. I was driving into her, hard and deep, and Amie kissed my shoulder, stroking Beth's back. \n\n\"Any more for me?\" she asked sheepishly.\n\n\"Absolutely,\" I assured her, gasping as I unloaded into sweet Beth.\n\nBeth moaned, slid off the chair and rolled onto her back. \"God, I needed that.\"\n\nI laid down next to her, and Amie wasted no time going down on me, licking me clean. She spun around and straddled my face and I found she had the sweetest, tastiest pussy. I fingered her, opening her up while I sucked on her lips and nibbled on her clit. She ground her pussy into my face and after a minute or two I realized I was nearly hard. Amie was sucking me deep when I felt Beth's head resting on my leg, and I heard her egging her on. \n\n\"That's it, take all of it bitch,\" she teased.\n\nAmie was willing enough and more then talented enough. I could feel her lips at the base of my cock, and the pressure each time I entered her throat. In turn, I had a finger in her ass, all the way to the second knuckle, while I saw how deep my tongue could reach. I thought I could get her to come for me from the reaction I was getting, but she pulled off and mounted me backward, facing my feet and getting to work again. Beth crawled over to me resting her head on my shoulder while we watched Amie. \n\n\"I want her to go down on me, is that Ok with you?\" \n\n\"Of course,\" I whispered to her. I reached for Amie, pulling her back on top of me, and fucking up into her for a few more seconds before I rolled her off of me, right into Beth's lap. Beth was taking control, guiding Amie's face to where she wanted her. I pulled Amie up onto her knees, and entered her from behind again, enjoying her tightness, spreading her legs wide and playing with her ass. With two fingers in her butt, I was contemplating switching out for a more substantial member.\n\nBoth the girls were getting off on the action, and I was enjoying the hell out of it. I pulled Amie off of Beth and rolled her onto her back, changing things up, and Beth climbed up and straddled Amie's face. Beth and I kissed, using her little friend easily, burying her beneath us. \n\nThat was the beginning of what seemed like an endless fuck fest. I took turns on the girls, one after the other, wearing myself out and both of my teenage temptresses. It got to the point where I was lying on my side, sliding my cock in and out of Amie from behind, only stopping long enough to roll over and face Beth, who'd lift her leg over my waist and slide me home so I could work her over a while. Amie started crawling over to the bed, but I grabbed her leg, and pulled her back to me. I pulled her on top of me and fucked her a while longer. The girls were crawling all over me, giggling half the time, moaning the rest. It was like I'd invaded a 9th grade slumber party, except for the amazing endless sex. And if either tried to escape, I'd drag her back and find a way to bury my cock again. Mouths and pussies, a seemingly endless assortment of places to envelope my staff. \n\nDuring one of the exchanges, I pushed into Amie, and found increased resistance.\n\n\"Ow! Gentle Jack. That's a lot of meat you're trying to cram up my little butt-hole.\" I was instantly aroused, and spent several minutes slowly working my way into her ass. She encouraged me, speaking softly, telling me how big I felt in her ass, stretching her. It was slow going, and I was only about halfway there, but she wasn't complaining.\n\nThat got Beth's attention, \"Are you in her ass, you bastard?\" She crawled over to the bedstand and returned with lube. She pushed on my chest, making me pull mostly out, and squeezed a line of the clear slippery stuff the length of my cock. She reached down and stroked me, getting me thoroughly coated. \n\n\"Now, fuck her,\" Beth growled, and we had to shush her for being too loud.\n\nThe going was easier, and it only took a few strokes before I bottomed out in her. \"That's it, Amie. You took it all.\"\n\n\"Do you like that, Jack? Stretching my ass out? God you feel big. Now fuck my ass for real. Cum in my ass.\"\n\nThat was all the encouragement I needed. I fucked her up that ridiculously tight butt, while Beth wiggled down and put her mouth to good use. Her hair tickled my balls, and whatever she was doing got Amie off in a big way. After she came she seemed completely spent and begged off any more, but I was so close to finally coming I had to finish in her. \n\n\"Jesus, Jack. It's after one. We gotta get up in a few hours,\" Amie moaned while I grasped her ass cheeks and squeezed them, spreading them wider, driving as deeply as possible.\n\n\"Tomorrow's Saturday, you can sleep in,\" I reminded her. I fucked her harder, long full strokes, bottoming out in her virgin butt, to an endless array of moans. I was finally ready. \"Here it comes,\" I warned her, shoving my cock as deep as I could, and thoroughly coating her insides with my seed.\n\nHaving come, I still didn't want this to end. Beth started crawling onto the bed, and seeing her sweet ass hanging over the side, I rolled away from Amie and grabbed Beth's hips before she could get away. I planted my mouth on her sweet, abused pussy, and she groaned, \"Jack, it's too much. Too much.\"",
        "I looked over and Amie looked like she was sleeping on her side. I released Beth, kissed her sweet ass, and let her climb into our bed. Going back to Amie, I picked her up to put her on the bed too.\n\n\"I'm so sore,\" Amie mumbled, half asleep. \n\n\"I know, go to sleep now.\" I stretched her out beside Beth, taking a last taste of her perky little tits. I made a quick trip to the bathroom to clean up a bit, and returned to my room. There was no space left on my bed, and I made for the door, figuring I could use the bed upstairs. I didn't make it far. \n\nDebbie caught me at the door and dragged me back to bed. We spooned together, and I whispered \"Sorry if we woke you up.\"\n\n\"You know I can't sleep without you at my side.\" She giggled, \"You got what you deserved, trying to keep up with two teenage horn-dogs.\"\n\n\"I got what I deserved. I'm holding my favorite person in the world. I love you Debbie.\"\n\n\"Me too, now go to sleep, and stop poking me with that thing.\"\n\n----\n\nI hope you enjoyed this chapter. Things take an interesting change in the next one, when some more family members take an interest in the goings on at the house that lust built. And as always, if you enjoyed the story, please vote. "
    ],
    "authorname": "Tx Tall Tales",
    "tags": [
        "threesome",
        "anal",
        "sisters",
        "blowjob",
        "mmf",
        "ffm",
        "topless"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/cvsn-17-sisters-and-friends"
}
{
    "title": "CvsN 23: Travel Benefits",
    "pages": [
        "---\n\nA new workout program, back with the Boss, and a memorable flight\n\n---\n\nThursday I rolled out of bed, even ahead of Debbie, our early morning riser. I put on some shorts and a shirt and my running shoes. I wasn't looking forward to it, but I knew it needed doing. Amie was in the kitchen, drinking some water.\n\n\"I thought I heard you moving around, slow poke,\" she teased. \"Five more minutes and you would have run alone.\"\n\n\"Good morning to you too, wild thing.\"\n\n\"Where's the best place to run?\" she asked, stretching.\n\nI drank close to a quart of water, before I answered. \"The side street outside goes into a closed neighborhood. Nice sidewalks and pretty sparsely populated, with big yards and a small park. I imagine it's a couple of miles around, so it should be a decent run.\"\n\n\"Let's get going then!\" Amie giggled, giving me a push. \n\nI hate morning people.\n\nIt was a horrible idea. I was straining after just a few hundred yards, and kept slowing down to little more than a light jog. Amie was literally running circles around me, egging me on. By the time we'd finished most of the neighborhood, and a loop around the park, I could barely breathe. I kept hoping for my second wind to kick in, but realized I never even had a first wind. Damn, I was out of shape! I used to be able to run 3 miles in well under 20 minutes, but after 30 minutes I was ready to lay down and die.\n\nGetting back to the main street, Amie reminded me of 'the game'. \n\n\"Think you can catch me, Jack? If you do, you can have me, right there, wherever you catch me. I know you can do it.\" She took off at an easy pace, and I sprinted after her. As I got within a few yards, she kicked it in and left me in her dust. \n\nHer faith in me was misplaced. I was gasping when I finally made it to the house. \"I guess I was wrong. No nookie for Jack this morning.\" She was barely breathing hard.\n\n\"I'm out of practice,\" I whined, \"give me a few weeks and you'll see.\"\n\n\"God, I hope so. I had fantasies last night of being leaned over that railing in back and having my brains fucked out,\" she teased.\n\nWe went inside and Beth was just about to head out. \"A little morning exercise, Jack?\" she gave me a dainty kiss, avoiding my sweaty body. \"Maybe you should join me for a swim.\"\n\n\"I'd drown,\" I confessed. \"Amie almost killed me.\"\n\n\"Did you catch her?\" Beth asked.\n\n\"Are you kidding me? I barely made it home. Give me some time. It's my first time running in months.\"\n\nAmie seemed less fastidious and gave me a hug. \"We'll whip you back into shape, and we'll all benefit from it, I'm sure.\" \n\nWhip me back into shape? I thought I was in pretty good shape. Ok, so the run was hard. I just needed to watch the diet for a couple of weeks, and throw in a little exercise. Ok, maybe a lot of exercise.\n\nI limited myself to one helping of breakfast, and when I came home for funch with Debbie, I ate my sandwich dry, and left the sodas alone all day. Funny, how the pain of exercise can make you think twice about feeding your face. I was equating everything I ate to the number of hours of running torture it would take to burn it off.\n\nFriday morning was worse, if possible. I was still sore from the first run, and had a small blister I was trying to take care of. But I did manage to complete the distance without walking, although I spent the last half mile watching Amie's tight rear-end, without a hope in the world of catching up to it.\n\nWork went well, pulling together the last of our effort for our trip to Spain, including the updated software system, and directives for the team to be available for support and fixes while Chris and I were on-site. Chris was nervous as hell around me, but she finally relaxed toward the end of the day. We agreed to meet at the office Sunday afternoon at 6:00. We'd drive to the airport together and catch our 8:30 flight. We wouldn't get to Spain until the next morning and were meeting the customer around noon. It was going to be a murderous first day.\n\nFriday night was fun. We made a movie night of it, with both the little ones staying over with Karen, Aunt Robin and 'Uncle Jim'. It was an ego trip to go to the movies with my gorgeous threesome, hitting The Cheesecake Factory before the movie, and watching the movie parked between Beth and Debbie. I know we turned quite a few heads, particularly when I had both girls leaning in to me, my arms around them. I was the envy of every man with a pulse. The girls looked great, what a surprise, and I'm sure quite a few guys got in trouble for not keeping their eye on their dates, but who could really blame them?\n\nI'm sure Amie felt like a fourth wheel at times, but she'd slip up next to me every time one of my two main squeezes left breathing room. She had the good sense not to get between Debbie and me too often, but Beth was definitely in a sharing mood, and didn't seem to mind, even when she returned from the bathroom during the movie to find Amie parked in her space. She just took the open space, and let Amie continue to tease me, the little troublemaker.\n\nBy the time we got home, well fed and entertained, we were ready to relax with a nice bottle of wine, and some music on the stereo. We all dressed down, me in my boxers, and the girls in t-shirts and panties. With the house empty, we were bad, lounging around the living room, and when the mood turned amorous, using our new living room furniture for purposes unintended.\n\nIt was a blast, taking my turns in the girls, everyone getting lots of play time, while we joked around, and talked about the excitement of opening up the day-care soon. Before we even popped the second wine cork, the panties were all gone, as were my boxers. We'd all cuddle, and when I would move one of the girls to get access to her goodies, everyone just made room, and I'd have the joy of screwing one of the lovely ladies until I was ready for a small break and a change of pace. The casualness of our intimacy, and leisurely nature of our fucking had the evening running on and on, with everyone getting a little more horny, and equally drunker.\n\nAnytime I wasn't trying to stick my dick inside one of the girls, one or more mouths would casually ensure that I was ready whenever the feeling hit me. They were careful not to get me too excited, ensuring that anytime I was ready to pop, it was deep inside the accommodating pussies of one of my three lovely playmates.\n\nBy the time midnight rolled around, and we had just started our third bottle of wine, which might have been too ambitious of us, things were getting wilder. The girls were taking care of each other as much as I was poking them, with Amie on a personal mission to take care of whoever I wasn't with at any time. She clearly had a thing for cleaning up after me. Whenever I'd drop a load inside of Debbie or Beth, she'd follow me, climbing between the lucky lady's legs, and making sure they were clean as a whistle before getting anymore of my attention. It helped keep the furniture clean.\n\nI used up my last hard-on of the evening putting Debbie through her paces, finally bending her over the end of the couch, and fucking her raw. It was a great finish.\n\nBy the time we made it to the bedroom, just the three of us, Amie slipped off to her own room, I was too exhausted for anything more than a good night's sleep.\n\n* * *\n\nI was planning on sleeping in, but evil Amie was dragging me out of bed before I knew it. I was thinking very bad things about her, when I caught sight of the clock. Almost 9:30 am. I had slept in, and the bed was empty. I tried to pull Amie into bed with me, hoping for an alternate form of exercise, but she fought me off, and before I knew it, I was back beating the pavement.\n\nIt was rough, but not horrible. Still no chance of catching the fleet teenager ahead of me, but once again I managed to run pretty much the whole way. I was still gasping when I finished, but we'd made it in just over 27 minutes. After my shower, Debbie was waiting for me, and she gave me a nice rubdown, encouraging me on my new exercise routine, and giving me another much nicer workout. Except she did most of the work.\n\nAmie walked in on us, berating Debbie for spoiling me, saying I hadn't earned it yet. \n\n\"He has run three days in a row. We have to encourage good behavior,\" Debbie told our new house-mate, from her perch upon my raging hard-on.\n\n\"I guess you're right. We already cut five minutes off the first day. How about if you provide him the encouragement, and I give him a goal?\" Amie asked.\n\nThat sounded interesting.\n\n\"What's the goal?\" Debbie asked, riding me while we talked to the pretty teenager.\n\n\"We're running just under three miles, I clocked it. When Jack can complete the run in under 20 minutes, he can tie me down and use me however he wants, wherever he wants, for as long as he wants. And he can share me with whoever he wants.\"\n\nThat seemed like a hell of an offer. I don't care what she said, she WAS a wild thing.\n\n\"Share? Even with a stranger?\" Debbie asked, curious. \n\n\"If he wants. I'm hoping it'll at least be people I know, but it's his reward. He can make the choice,\" Amie said blushing.\n\n\"I was trying to figure out a way to reward the project team for a job well done,\" I teased. \"But there are eight of us.\"\n\nAmie sat beside me, watching Debbie take care of me. \"If that's what you want Jack. But you still have to do the run in 20 minutes.\"\n\nI reached out for her. \"I'm just kidding, Ames.\"\n\n\"I'm not. However, wherever, whoever. Just don't hurt me,\" she said.\n\nI pulled her down for a kiss. \"I would never hurt you, beautiful.\"\n\n\"So it's a deal?\" she asked cautiously.\n\n\"A deal. The nice thing is it'll probably take me several weeks. Plenty of time for planning,\" I told her, the idea, combined with sexy Debbie's actions working to get me overly excited.\n\n\"Plenty of time to stock up on toys and lube. Can't you just imagine what Beth could do to her with a strap-on?\" Debbie said, graphically describing the possibility.\n\nYes I could, and that was the final bit of encouragement I needed to finish inside my loveliest of roommates. \n\nDebbie left me for a bath, and sweet Amie stayed behind to clean up, getting me hard enough for a gentle ride of her own. \"One rule, Ok?\" she asked timidly.\n\n\"Kind of late for rules isn't it?\" I asked.\n\n\"You don't have to agree. I'm just asking,\" she said, lying on top of me and kissing me, while I thrust up into her.\n\n\"The rule?\" I asked.\n\n\"Don't let my Dad fuck me, Ok?\" she asked.\n\n\"I think that's fair enough,\" I told her, giving her a deep kiss.\n\n\"You probably shouldn't leave him alone with me, tied up,\" she said softly, \"I'm not sure he could help himself.\"\n\n\"I'll take care of you, baby. Trust me on that one.\"\n\n\"Of course I trust you. How could I make an offer like this one if I didn't?\"\n\nI hoped I was worthy of her trust.\n\n* * *\n\nWe had a full house all day, but by evening, we were pretty much back to normal, and I made it to the bedroom with just my two girls. I had laid down the law with Amie; there would be no running on Sundays, especially not on travel days.\n\nI had a nice, long leisurely goodbye with each of my girls, starting with one of my favorite things in the world, a Debbie and Beth dual BJ, and ending between the legs of my platinum haired bedroom goddess. \n\nI slept in the following morning, legs aching, and pondering the 'deal' with Amie. I was alone in the bed, and had nobody to use the results of my half-asleep fantasizing on, so I just let it subside, taking a shower. Robin would have killed me, letting a perfectly good erection go to waste.\n\nIt was a casual day around the place, and I did a little yard-work, since I'd be gone for a week. I didn't see much of Beth or Amie, as they worked on the Day-care preparations. I did ask Debbie to help me pack, which led to exactly what I was hoping for, and one last love session before I was going to head out. God, I was going to miss her.\n\nWe had an early dinner, and I said my goodbyes afterwards, hauling my bags out to the car. Amie ran up to me, before I was finished.\n\n\"Just wanted to say goodbye,\" she said softly, coming to me and giving me a big hug. \"And thanks for welcoming me into your home and your life so easily. I know you didn't have to. You can't imagine how wonderful it is for me.\"\n\n\"I'm glad too. You're good for us,\" I told her hugging her back and giving her a kiss.\n\n\"Train while you over there, and don't eat too badly. I want you to win your prize,\" she reminded me.\n\n\"I will. And I'm looking forward to the payoff,\" I told her.\n\n\"Good. I'll make it incredible for you.\"\n\nI smiled, stealing one last kiss. \"I'm sure you will.\"\n\nI drove away with a raging hard-on. But I figured Chris would be able to help me with that before too long.\n\nBut I'd wait until we were at least in the air. 100 mile rule. Once you're away from home, it's not really cheating, is it?\n\n* * *\n\nCompany policy allowed us to fly business class overseas, with 14 days travel notice, and it was nice to be able to stretch out. Flying coach for over 8 hours was hard enough, but cramped in the space the airlines called coach was tantamount to torture.\n\nThe drive to the airport had been a little awkward. Chris and I both knew what was ahead, but neither of us broached the subject. We talked about our project, reviewing all of our materials, and going over the training information for the forty minutes or so the drive took. Then it was back to the hassles of checking in, going through security, and making our way to the international section, where we could finally relax for a little while.\n\nWe were both dressed very casually, comfort being the watchword when you were traveling for a dozen or more hours. For me that meant sweatpants and t-shirt. For Chris it was similar, a nice coordinated sweat-suit, with a sleeveless tee underneath. She looked good in the outfit, and I wondered what kind of underthings she had on underneath.\n\nThe plane was huge, and in our section there were 7 seats across, divided 2, 3, and 2, by the aisles. We were directly behind First Class, in what was almost a mini-cabin, with the bulk of business class well behind us, past the galley. Chris was by the window, and I had the aisle. We were a little behind the middle seats next to us, with the first class closet ahead of us, and another closet behind. I'd never been seated in similar seats and really enjoyed the quiet, the extensive leg room, and the privacy. \n\n\"I think we're going to knock their socks off,\" she told me as we were settling into our soft, padded seats.\n\n\"I hope so, it's been a big effort, completed in breakneck time,\" I told her, getting comfortable, pulling out a notebook and paperback and placing it in the padded pocked in front of me, before storing my carry-on. \n\n\"You did a great job on this. It's all the talk upstairs. I think you're going to come out of this whole thing smelling like roses,\" she told me.\n\n\"Hell. It's just code. You've done a great job pulling it all together. Now we'll just have to see if it flies with the client.\"\n\nWe each took a drink from the stewardess, a cute brunette I couldn't help but try flirting with. I knew that they were pretty immune to the efforts, getting hit on constantly, but I couldn't help myself. I did get her smiling, and she returned before too long to refresh our drinks before takeoff. She seemed to have the whole front cabin to attend to, about 10 seats in all.\n\n\"Jesus, Jack,\" Chris laughed. \"I bet you got laid before you left your house, and already you're picking out your next conquest.\"\n\n\"I'll have you know I've been celibate since just after lunch, and I'm not looking for a conquest, I'm just flirting.\" I told my sexy little boss.\n\n\"Celibate since lunch? Poor thing. Try making that two weeks. You'd be ready to blow a gasket.\"\n\n\"Two weeks? Before my current situation I was quite single, you know. I went months in between, sometimes. Not that I'd ever want to do that again.\"\n\nWe had to quiet down during the spiel about safety, and seatbelts. At the end I waved the stewardess over.\n\n\"I don't think I've got my seatbelt right. Could you check it?\" I asked, wearing my most innocent of smiles.\n\nShe gave me a long, hard look, and I was ready for the big shoot down, when she smiled and leaned over. She was stacked on top, and her nametag was almost in my face when she ran her hands slowly along the seatbelt, giving it a gentle tug, and then patting the belt buckle in place. Her little act had my cock hardening. She had to have noticed, but she let it pass.\n\n\"It looks like everything is in order, Mr...\"\n\n\"Jack. And thanks, Leanne.\" \n\n\"Of course, Jack. We're here to help.\" Her hand lingered on my shoulder longer than necessary as she walked by, collecting any glasses from the other travelers.\n\n\"Christ.\" Chris whispered, \"Now I've seen it all.\" \n\n\"Yes you have, and you'll be seeing a lot more, soon enough,\" I reminded her, still teasing, reaching over and giving her thigh a squeeze.\n\nAfter takeoff, my attentive stew stopped by to check on our drinks.\n\nI asked Chris if she needed a refill, and she passed. I asked for another Tanqueray and tonic, and when Leanne returned, she brought me two of the small Tanqueray bottles, and a bottle of tonic.\n\nI was brazen, caressing her hand as she passed them to me. \"Two? Are you trying to get me drunk, Leanne? I'll have you know I have a high tolerance for alcohol.\"\n\nShe smiled and leaned in close. \"It is a very long flight.\" She smiled and walked away tending to the other passengers. Her tight blue skirt looked very good on her. Very good. Business class wasn't full, which surprised me. There were at least three empty seats in our section, including the two on the opposite side of the plane from ours. I guess somebody missed their flight.\n\n\"Oh my God, she's as bad as you,\" Chris said, exasperated.\n\n\"Oh, come on, Chris. Let loose. It's a long flight. A little teasing and flirting just helps the time to fly. I imagine her job can get to be a little boring, catering to the whims of her pampered passengers. A little teasing and joking is good for the soul,\" I reminded her.\n\nShe just rolled her eyes at me. I think she wanted to be mad about it, but she finally just chuckled. \"Being around you is an education. I'll say that much.\"\n\n\"Being around you is painful,\" I told her.\n\nShe looked hurt. \"Painful?\"\n\nI took her hand and placed it on my hard cock. All the teasing was working wonders on me. She jerked her hand back, looking around to see if anybody had been watching. Of course, where we were seated somebody would have to be standing beside us to see anything.\n\n\"Painfully hard. And it'll probably be tomorrow night before I can do anything about it.\"\n\n\"You are such a reprobate,\" she hissed, yet allowing me to place her hand on my thigh.\n\nShe was quiet while I prepared my drink, using one bottle, and half the tonic. I gave it a sip. Delicious.\n\n\"There's already talk about repackaging what we're doing, generalizing it, and offering it to the Swiss and the Malaysians. This could be big.\"\n\nI reached over and put my hand on hers, where it rested on my thigh. She seemed to hesitate, then turned her hand over, entwining her fingers with mine.\n\n\"Why generalize it? We could fully customize it for each customer, and probably get twice the money out of them without doing much more than swapping out the screens, and adding a few fields to the database,\" I told her, my mind instantly reviewing the changes that would be needed.\n\n\"But the Swiss planes are outfitted completely differently, and we don't have the issues with tying into the manufacturing database we had with the Spanish.\"\n\nI reached over, pulled out my pad, and started listing the parts of the system that would require refactoring, and the layout of the different display systems that would be required. We talked about a few options, and within 30 minutes, had the whole process mapped out.",
        "I explained it to Chris, answering all of her question, and pointed out the differences between a solution for the Swiss and Malaysians. \n\n\"That's good. Really good. I better call Dale when we get in tomorrow morning, and put the brakes on any discussions they have about repackaging. This would be a lot better.\"\n\nI was beaming, stupidly happy with myself. I thought back to something Ron had said, about being as happy with my work as he was with his. At times like this, I was. \n\nI put up the pad. \"I'll email Wenli and have him put together some estimates, time wise, so we can price it.\"\n\nShe was looking at me with something akin to awe. \"I can't believe you worked all that out, and so quickly. You're pretty amazing.\"\n\n\"I could easily say the same for you,\" I told her, running my hand down her thigh.\n\n\"No. Really. I mean it. That was amazing.\" She looked to be thinking. \"This could be dangerous for you. You keep hitting these home-runs, their going to want to move you to LA, where the action is.\"\n\n\"I'm not going anywhere,\" I reminded her. \"I'm more than happy just where I am. I expect you to take care of me, and we'll do this together.\"\n\n\"Oh, don't worry about me. I know a good thing when I see it. I'm going to ride you as long as I can. You're on the fast track.\" \n\n\"Mmm. I'll let you ride me as long as you want. I promise,\" I teased.\n\nShe blushed, \"I didn't mean...\"\n\nI hushed her, smiling. \"I know exactly what you meant. And I meant exactly what I said, double-entendre fully intended.\"\n\nWe'd been at it for a while, and the cabin lights had dimmed. It was quiet up front. I leaned toward her, reached over and pulled her closer. The wide armrest between us made it difficult, but I managed to pull her close enough for our lips to meet, kissing her tenderly, feeling her relax, and go with it.\n\nWhen I pulled away, Leanne was standing beside me. \"I hope this man isn't bothering you, miss,\" she said with a teasing smile.\n\nChris looked embarrassed and pulled away. \"Oh, no. Not at all. We were just discussing work.\"\n\nLeanne squatted down, so our eyes were level. \"Nice work. I can see I'm in the wrong field.\" She had one hand on my shoulder, and the other on my leg, and I was feeling warm all over from the attention. \"I just came by to see if I could bring you anything. Nearly everyone else up here is asleep. So I guess you guys get all my attention.\"\n\nMy glass was empty, but I did have another bottle unopened. \"I could use a fresh glass of ice, but there's no hurry,\" I told her. \"How about you?\" I asked my boss.\n\nShe seemed a little nervous still, and asked for a glass of wine.\n\n\"Red or White?\" Leanne asked. Her hand was still on my leg, and moving slightly, reminding me of its presence.\n\n\"White, please,\" Chris answered.\n\nOur lovely helper departed, returning moments later. The galley WAS only about 5 feet away. She gave us our drinks, still very touchy-feely. \"I'll be seated over there,\" she said with a nod toward the empty seats on the opposite side of the plane. \"So if you need me for anything, anything at all, just stop by. I won't be up and around much, trying to let everybody rest.\" The way she squeezed my thigh when she said 'anything at all' had my imagination working overtime.\n\nWe reclined our seats, almost fully, and I leaned across the divider, getting closer to my traveling companion. Before I could try anything, Leanne was back.\n\n\"I brought you a couple of blankets, in case you're going to relax,\" she said. \"It can get cold in here.\"\n\nShe passed one over to Chris, then opened mine, placing it across my lap, and patting it in place, saucily rubbing between my legs for just a moment. God this woman was a tease!\n\n\"Remember, if you need me for anything, I'll be right over there.\"\n\n\"Jeez, I thought she was going to climb under your blanket and give you a blow-job right here,\" Chris said. \"She's as bad as you!\"\n\n\"She's just doing her job, being helpful,\" I told her.\n\n\"Right.\" She pulled her blanket around her, settling in. I leaned across the divider again, sliding my arm under her blanket, and caressed her breast.\n\n\"Jack, don't be bad,\" she whispered.\n\n\"I won't be, I promise,\" I told her, while my wandering hand unzipped her top, and reached in to feel her through her shirt.\n\n\"What am I going to do with you?\" she whispered.\n\n\"Don't worry, I have lots of ideas,\" I told her, reaching down and pulling her shirt up over her breasts, under the cover of the blankets.\n\n\"God, you're like a kid,\" she hissed, but I felt her hand over mine, and suddenly her bra was open, her breasts completely unfettered.\n\n\"Thank you,\" I whispered, turning in my seat, and bringing my other hand into play.\n\n\"Don't be too obvious,\" she warned.\n\nOf course nobody could see us, so I wasn't too worried about it. I pulled her closer to kiss her, then massaged her tits, feeling her nipples harden. She leaned back from me, sighing. \n\nIt seemed like an invitation. I slid my hand down her stomach and into her sweat pants. Her panties were low on her hips, and when I reached into them, she stretched out, opening her legs to me. My hand slid between her legs, a little awkwardly inside her pants and undies, and I slid a finger into her. She was wet.\n\n\"God, I want you so bad.\" I told her softly. \n\nShe smiled, \"That's good. Because you're going to get me. All week long.\" I felt the pressure on the back of my hand disappear, and found she'd pushed her pants and underwear down over her hips, and they slid down to her ankles. She spread her legs wide, allowing me full access.\n\nI stroked her and played with her, taking my time, enjoying myself. It took a while, but eventually I was pumping her with two fingers, and had her breathing heavily. I watched her pretty face as she got closer and closer to her release, then reached down with my free hand, almost brushing her blanket aside, and massaged her clit, making her come for me. It was beautiful to watch.\n\n\"Shit, I needed that,\" she moaned, then reached down and pulled her panties up, followed by her sweat pants. \"I can't believe I let you do that to me, here, around all these people.\"\n\n\"I'm glad you did,\" I told her, pulling her to me for another kiss. She settled back into the seat, her blanket falling around her waist, exposing her tits to me. I pull her shirt back down, and closed her top a little, before pulling the blanket up.\n\n\"God, you're beautiful,\" I told her.\n\nShe smiled, leaning back and resting.\n\nI got up to hit the head, and looking across the plane I saw Leanne looking at us, witness to what we had done. I shrugged my shoulders, a little embarrassed, but she just smiled. \n\nWhen I got out of the bathroom, she was waiting in the galley. Busted.\n\nShe was standing in the entrance, and I'd have to squeeze by to get past her. As I got close she reached her hand out and put it on my chest. \"Alex, can I ask you a personal question?\"\n\nI nodded mutely.\n\n\"Are you planning on joining the mile-high club this trip?\"\n\nI felt my face turning red. Still, I was willing to play along. I leaned closer to her. \"Is that an invitation?\"\n\nI saw her blush. \"I wish. I'd get fired. But if you two are, I think I could win a bet with Jeanne.\"\n\n\"I imagine that would be frowned upon, and a little obvious if we did.\" I told her, still enchanted by the idea.\n\n\"Officially, of course, we're supposed to stop people from going into the lavatories in pairs. Unofficially, our preferred passengers are given a little more leeway.\" She said softly.\n\nWe were standing in the aisle, and still could be seen by most of business class. If anyone was awake and watching. I moved away from her, into the main area of the galley, away from prying eyes. She followed me, standing opposite, leaning back against the table behind her.\n\nI moved close to her, our bodies almost touching. \"Am I a preferred passenger?\"\n\nShe smiled, turning her chin up, her pretty red lips beckoning. \"What do you think?\"\n\nI leaned in and kissed her. Her mouth opened, and she kissed me hard. I inched forward, pressing my body against hers, letting her feel my hardness, as I pushed it against her belly.\n\nThe kiss went on, and I moved my hands up her body, caressing her. I felt her palm pressing against my hard-on, exploring.\n\nShe finally pushed me away, gasping. \"God, I've never done anything like this.\"\n\n\"Me either.\" I assured her, \"But I'm glad I did.\"\n\nShe looked at me and smiled. \"So, do you think you're going to?\"\n\n\"Mile-high?\"\n\n\"Yes,\" she said, her hand moving to my side, and caressing me.\n\n\"When would be a good time?\" \n\n\"About an hour from now would probably be best. How about if I let you know?\"\n\n\"I'd love to. You're sure that you're not available?\" I asked her.\n\n\"Not while in the air,\" she answered, pouting.\n\nI gave her another soft kiss. \"Let me know when it's Ok,\" I told her then returned to my seat. \n\nI closed my eyes and almost jumped when I felt a tapping on my shoulder. I must have dozed off.\n\nLeanne leaned in and whispered in my ear. \"Coast is clear. Use the one on my side of the plane.\" Then she kissed me on the cheek, and was gone.\n\nI reached over and woke up my pretty boss. She was slow to come around, so I played with her tits a bit to get her attention.\n\n\"Jack?\" she asked softly.\n\n\"You need to use the restroom. The one on the other side of the plane.\"\n\n\"Not really,\" she murmured, shifting in her seat.\n\n\"Yes you do. And I do too. Go there now, and don't lock the door.\"\n\nShe sat up a bit, opening her eyes. \"You're kidding right?\"\n\n\"Everybody's asleep. The lights are down. It's the middle of the night. And I can't wait any longer.\" \n\nShe sat up, adjusting her clothing. \"This is crazy,\" she said softly.\n\n\"Yes, it is.\" \n\nShe looked at me then smiled. \"I guess they can't kick us off the plane, can they?\"\n\n\"Not only that, but I've been told that it's not that uncommon.\"\n\n\"Our stewardess?\" She asked, raising one eyebrow. Cute trick.\n\n\"Leanne. Yes, and she's assured me the coast is clear. So get going.\"\n\nShe stood up and squeezed past me. \"I can't believe I'm doing this.\" Then she was gone.\n\nI waited a minute, then followed her. The plane was dead. I saw the 'open' sign was still on for her bathroom, and opened the door cautiously. She was sitting in there, waiting.\n\nI closed the door behind me, locking it. She started to stand up, but I put my hand on her shoulder, stopping her. I lowered my sweats and boxers, standing in front of her with the same hard-on I'd had for the last couple of hours. She took the hint and leaned forward, engulfing me. I relaxed, resting my hands on the wall behind her, and let her do her magic.\n\nShe was as good as I remember, sucking me deeply, using her tongue to tease me, her hands stroking me. I considered using some restraint, but knew I would be able to get it up again for her, so I let her suck me to completion, warning her before I filled her talented mouth.\n\nShe didn't let up, swallowing my load, and continuing to stroke and suck me, until I was hard for her, then she pushed me away.\n\nI leaned back against the door, stroking my cock, while she took off her pants and panties. \"How?\" She asked.\n\n\"We'll have to improvise,\" I told her. \"My first time too.\"\n\nShe turned around and placed a knee on the toilet seat, looking around for somewhere to put her other one. I helped her, lifting her leg and placing it on the sink, opening her wide. She shuddered when I entered her. \n\nThe space was awkward, but her position was good for me, giving me plenty of room to move around. I place one leg outside of hers on the seat, and held her raised leg while I thrust into her. She was almost silent, barely moaning, as I thrust into her continuously, enjoying the feeling of fucking her in such a dangerous place. After several minutes, she was moving her leg underneath me. \"My knee hurts,\" she finally whispered.\n\nI pulled out, folded my pants and put them on the edge of the sink, then lifted her up to sit on them, tilting her hips forward. She leaned back against the mirror, bracing her hands on the door and the back of our cramped quarters. Once I was in her, she stretched her legs out and placed her feet on the wall behind me. \n\nThe height was perfect, and I was able to screw her comfortably, playing with the pace and depth, enjoying her. I grabbed her by the ass and lifted her, fucking her hard, and watching her finally start to come for me. I wasn't holding back, wanting to fill her with my cum, and pounded her harder. She was raising her hips up and fucking back at me, and my explosion set her off. She leaned her head back and groaned, while I emptied my balls deep inside of her. Then I lifted her up and held her close, her legs wrapped around my body. \n\n\"God, that was good,\" she whispered.\n\n\"Amazing,\" I told her, letting her down gently. \n\nI stood back and let her dress, then switched places with her. \"Go ahead, I'll be there in a minute.\"\n\nI put on my pants, and realized my left pant-leg was wet down around the calf. I guess she really had enjoyed that. When I was done dressing, I availed myself of the toilet, as long as I was there. Then I opened the door and let myself out.\n\nLeanne was waiting for me again. This was starting to become a habit. She had a wicked smile on her face, and backed into the center of the galley, away from prying eyes.\n\n\"Twenty-two minutes,\" she said softly. \"I was starting to get worried.\"\n\n\"We were in a hurry,\" I told her with a wink. \"No time for thirds.\"\n\nShe grinned. \"You are a bad one. Thanks, I picked up an extra sixty bucks. Why don't you go over there and wave to Jeanne and Alice?\"\n\nI peaked out in the aisle to the two stewardesses sitting in the front row. I gave them a little wave, and returned to my new favorite air attendant.\n\n\"Thank you. I never would have had the guts to do that, without your encouragement.\" I leaned closer to her, but she just smiled.\n\n\"I sincerely doubt that.\"\n\nI eased closer, our bodies touching. Then I leaned down and kissed her again. When she let me, I reached up and massaged her breasts. She pulled me closer and tried to devour my face. I grabbed her hips and ground my hips against her, feeling that wonderful feeling of hardening for her. She pulled her lips away, leaning back, and grinding her hips against mine. \"You're driving me crazy,\" she whispered.\n\n\"Ditto,\" I said, reaching up for her full tits again. Uncovered, I bet she would have given Karen a run for her money.\n\nShe reached between us, grasping my cock. \"Is your invitation still open?\" she asked softly.\n\n\"Invitation?\"\n\n\"Thirty minutes. Wait until you see me head down to first class. The lavatory there is bigger, and more private.\"\n\nI gave her a quick kiss, and pulled away. \"Thirty minutes.\"\n\nI headed back to my seat, my head spinning. This was turning out to be one helluva flight.\n\nBack at my seat, Chris was already bundled up and half asleep. \"Took you long enough,\" she said softly.\n\n\"Thanks, beautiful, I needed that,\" I told her, avoiding any explanations. \n\n\"Good. I hope that tides you over until tomorrow night,\" she said softly before settling back into dreamland.\n\nTomorrow night. Or thirty minutes, if my luck held out.\n\nI turned on my reading light, and got out my book, not wanting to chance falling asleep. Every few minutes I would check my watch, then peek over to see if Leanne was still there. \n\nFinally I saw her get up and quietly make her way up front. I waited a minute, then headed forward. The first class seats were almost complete enclosed, and I passed 6 sleeping passengers, lying on full beds, before I made it to the forward space. It was empty, but I saw the two bathroom doors, both with open signs. I peeked in the first one, and found it empty. Moving to the second one, I found my lovely stewardess in there waiting. I slid in and closed the door, locking it. Occupied.\n\nThe first class space was similar, but a little larger, and finished in wood paneling, with real towels and washcloths. Not only was it wider, but there was enough room for two to stand, as I found out when Leanne stood and came into my arms.\n\n\"I can't believe I'm doing this,\" she said softly, kissing my face.\n\n\"I can't tell you how glad I am that you are,\" I whispered.\n\nShe started taking her skirt off, but I was damned if I wasn't going to see those tits. I reached forward and unbuttoned her jacket. She stopped, looked up at me, and smiled. \"Might as well go for the whole show, huh?\" She took off her jacket and passed it to me to hang on the hook behind the door. Then she removed her shirt, displaying an enormous amount of cleavage, barely contained by her straining bra. She reached behind and unsnapped the bra, pulling it off and placing it beside the sink, on her shirt. \"Is that better?\" \n\n\"Incredible.\" I told her, rapidly pulling off my pants and t-shirt. When I looked up, she was naked, waiting for me. I took her in my arms and kissed her, running my hands over her naked body. She was soft and sexy, all curves. Curvier than any of my house-mates, but in a good way. \n\nShe pulled away from me and sat on the seat pulling me forward by the cock. \"Nice,\" she told me, while she stroked it. \"Looks like I hit the jackpot.\" She leaned forward and licked me, then took the head in her mouth and sucked softly. Damn, it looked good.\n\nI let her play to her heart's content, knowing that after two times in a row, it would probably take a while before this one was done. She sucked me strongly, her hands working my cock. \"Let me know before I go too far,\" she said softly.\n\n\"You can't go too far. And don't worry; as pretty and talented as your mouth is, that's not where I'm finishing.\"\n\nShe didn't answer, just went back to town on my cock, sucking me like there was no tomorrow. When she finally came up for air, I backed up, giving her some room. \"I think it's time for the real deal,\" I told her. \n\nShe reached for her blazer, turning away from me, and turned around holding a back of condoms. She ripped one open with her teeth, placed the condom inside over the head of my cock, and used her mouth to slowly roll it down over me. When she'd done as well as she could with that technique, she pulled back and carefully rolled it the rest of the way down, leaving about an inch of my length uncovered.\n\nShe gave me a quirky little smile, then turned around, spreading her legs as wide as the cabin would allow. I moved in behind her, rubbing my cock against her little pink opening. I wanted to make sure she was ready for me, so I took a minute to play with her, rubbing between her lips, poking the head in just a bit, then rubbing up and down her slit, until the wetness was audible. I then pushed into her, slowly filling her. On the third stroke I was buried, balls deep, and she moaned for me. That sound was an aphrodisiac, getting me harder and hornier. \n\nI contemplated the fact that it was my first time using a condom in ages, and in a way I was glad. I knew that, sensibly, if I was using a rubber with anyone, it probably should be with wild Robin. Fucking her was probably the equivalent of fucking an entire small town. And yet it had never entered my mind. I noted that very little feeling was lost, and I ignored the thin sheath, and tested her depths.\n\nI fucked my little stew, giving her long full strokes, backing almost completely out with each long movement. I squeezed her delicious ass cheeks and upped the speed a bit, fucking her harder.\n\nIf I listened carefully, I could hear her hissing, \"Yes, yes\" just below a whisper.\n\nIt was wonderful, but her legs were too short for me, and I had to bend down to do her. It was starting to tell on my thighs, so I pulled out, letting her turn around. I took one of the towels off the shelf, and put it on the sink edge, more careful of my pants this time, and lifted her up to sit her there. With the added space in this bathroom, I was able to spread her legs wide, and leaned down for a taste, just a couple of minute's worth, before I renewed my assault. I fucked her on that sink for an eternity, moving her legs around, holding them wide, then lifting them up onto my shoulders. It felt so incredible I never wanted it to end. She hadn't come yet, and I didn't want her to miss out on that, so I spread her legs wide again, and played with her clit while I pumped her. I bent my knees a bit, thrusting up into her tight pussy, slowing the pace, and pulling almost out to the opening, fucking her with just the first few inches, targeting her elusive g-spot. ",
        "I knew when I found it, wrenching a moan out of her. With the target in sight, I worked her there, my cock head pounding against her pleasure center, while my thumb massaged her clit within its protective hood. I watched her reach out suddenly and grasp a wash cloth, pulling it into her mouth and biting down on it. I kept the same exact motion going, not wanting to break her rhythm, and watched in joy as she came for me hard. She cried out through the cloth she was biting, her eyes squeezed shut, and I eased up on her clit, but continued my assault on the top of her pussy. \n\nThe little tease was multi-orgasmic, and once I got her off, every couple of minutes she would explode again. After a while it didn't matter how I fucked her, as long as I filled her with my cock, she'd eventually shatter for me. I loved the feeling. She was gasping heavily when I finally felt my own finish approaching. I lifted her legs up to my shoulders again, grabbed her hips and fucked her as fast and hard as I could. After a few seconds she was coming continuously, and I doubt she even felt it when I exploded inside her. I eased her legs apart, and finished with a series of easy strokes, enjoying the last of my hard-on, contemplating the possibility of getting hard for her again. She had been one of the most responsive fucks I'd ever had, and I was going to be sorry to finish.\n\nShe released her death bite on the poor wash cloth, and tossed it aside. \"God, that was worth it. So worth it,\" she gasped, wiggling her poor ass, which probably had a permanent dent in it from the sink edge.\n\nI pulled out, drew her close, and kissed her softly. It was sweet and tender, so unlike our fucking.\n\nI backed away, and took her washcloth to clean up a bit. We'd been messy. She almost came again, just from my wiping her clean. \n\nI reached down and pulled off my rubber, the end stretched with a sizable load. My cock softening made it easy, and I dropped the little fellow, who had played his role so well, into the toilet, and gave it a flush.\n\nI helped her to her wobbly feet, and held her a second while she regained her balance. Then I reached down and passed her the panties and pantyhose lying at her feet. Once she had her skirt on, I stopped her, and leaned in to kiss her tits, sucking on her nipples, tasting her skin, just for a bit. It wouldn't have been right to leave those completely untended. They were too perfect.\n\nWhile she finished dressing, I pulled on my clothes, and waited for her. She looked at her watch. \"Oh my God, we've been in here nearly an hour. Shit.\"\n\n\"Sorry, I couldn't help myself. You are the most amazing woman. I've never had anyone come for me like that.\"\n\nShe smiled, in spite of her anxiety. \"It was a first for me too, handsome. I think you've ruined me.\"\n\n\"I doubt that. You are too perfect. I'd be fiend to ruin a work of art like you.\"\n\nShe pulled me away from the door, then turned and gave me a quick desperately hard kiss. \"Thanks, Fiend. Give me a minute, Ok?\"\n\n\"Got it. And thank you.\"\n\nShe didn't answer, opening the door and sliding out quickly. \n\nI cleaned up the bathroom a bit, wiping up our mess from the sink and floor, and tossing the towel and washcloth into the marked bins. Then I opened the door, and headed back to my seat. \n\nI still had half the flight to go.\n\n---\n\nI woke with Leanne rubbing my shoulder. \"We'll be landing in about thirty minutes. Would you like some breakfast?\"\n\nI looked over and saw Chris was still fast asleep.\n\n\"Everything Ok?\" I asked her.\n\n\"Right as rain. Thank God.\" Then she leaned in and gave me a quick kiss. \"And thank you.\"\n\n\"Mmm. My pleasure. Can I just have some juice? Orange would be good.\"\n\n\"Mimosa?\" she asked.\n\n\"No, I think just the orange juice.\"\n\nWhen she left, I patted Chris's leg. \"Thirty minutes until touch down. Want any breakfast?\"\n\n\"Just wake me when we're on the ground,\" she mumbled, rolling away from me.\n\nLeanne returned with my juice, and handed me a card. \"I do this trip twice a week. I'm based in D.C. Here's my number. I hope I can see you again.\"\n\nI didn't tell her we lived in the same area. \"I'd love to. I'll give you a call.\"\n\n\"Do. Don't be a stranger.\" She leaned in and gave me another soft kiss, then pulled away. \"God, you're going to get me fired yet.\"\n\nWhen we disembarked in Madrid, I imagined her 'Bye' at the door had a little more regret to it than normal.\n\n======= \n\nThe city of Madrid awaits, patient reader. Follow in the footsteps of Hemingway, and young Jack. And don't forget to vote, if you enjoyed the story, and generous Leanne! "
    ],
    "authorname": "Tx Tall Tales",
    "tags": [
        "exercise",
        "mile-high",
        "stewardess",
        "boss",
        "airplane",
        "flight attendant"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/cvsn-23-travel-benefits"
}
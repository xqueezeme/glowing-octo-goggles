{
    "title": "Journey of a Submissive",
    "pages": [
        "Summary: A young woman is seduced into a world of complete submission \n\nNote 1: Thanks to Robert, goamz86, Sophia and Wayne for editing this lengthy tale. \n\nNote 2: Dedicated to the real LILY!! I hope you enjoy this. \n\nJourney of a Submissive \n\nI have been told I'm an enigma. \n\nI look so sweet and innocent on the outside, but am hot and naughty underneath. \n\nI have a sexy, dazzling smile, with adorable pouty lips and hypnotic green eyes \n\nI have multiple sides I can show depending on my mood and who I am around. \n\n1. To my grandmother, I am the sweetest granddaughter ever. \n\n2. To my mother, I am a loyal daughter who will do anything to make sure she is happy. \n\n3. To my siblings, I am the big sister who will support them at all times. \n\n4. To my co-workers, I am a hard working team player. \n\n5. To my friends, I am someone who will listen, someone who will be loyal and also someone who can party hard. \n\n6. To the different men in my life, I was always a caring, supportive girlfriend who was an eager and submissive lover in the bedroom. \n\nYet, frustratingly, men are oblivious, and none were able to catch on to my many obvious hints that in the bedroom I wanted to be not a cute, sweet girlfriend, but a dirty, submissive fuck-toy. \n\nI wanted to be used like a slut...not made love to, yet saying such things to someone, no matter how many hints I gave, was challenging and they never caught on and I could never come out and say it. \n\nI had even begun chatting and role playing online where another sexual curiosity was triggered...being a submissive to another woman...preferably an older woman. \n\nThe more I chatted with other women, the more I role played, the more curious I got. \n\nThen...over a few weeks...all my fantasies became a reality when I met an older couple. \n\n... \n\nI was working the Friday night shift at an upscale restaurant when I met the couple for the first time. \n\nLike most things in life, you never know when a big moment is about to transpire. \n\nIt was a busy Friday and we were understaffed when I was given a table in a section that usually wasn't mine. I definitely have some repeat customers who always sit in my area for a variety of reasons (I'm sweet, I'm polite, I make sure my customers are looked after and, of course, I dress to tease...not slutty, but sexy enough to showcase my great legs, my firm ass and my small breasts (that the right push-up bra can make deceivably a lot bigger). \n\nThis particular couple was incredibly friendly and very touchy with to each other, which I thought was sweet for a couple in their early forties. My parents still loved each other I assumed, but they never showed even a remote interest in each other as being in love in front of us kids. \n\nThe woman was pretty, not gorgeous, in a natural, I'm-forty-and-fine-with-it way. She had long brunette hair, voluptuous looking breasts (double my size) and was dressed very professionally, as if she was a lawyer or something (I would later learn she is a teacher). Also, unlike most women of society today, she was wearing nylons (which intrigued me, especially when I noticed just the glimpse of lace top stocking when she got up to go to the washroom). \n\nThe man was a little older, I would guess, with brown hair and goatee with the tinge of grey that I found made older men look distinguished and hot (he looked like a professor in my mind, but I would later learn that ironically he was a lawyer), And although I didn't have any evidence to prove my theory, he just seemed like a guy that looked nice on the outside, but knew exactly how to treat a submissive woman like me. \n\nWe chatted ever-so-briefly that first Friday, but nothing substantial and nothing that would remotely hint at what lay ahead. \n\n... \n\nThe following Friday they were again at the same booth, but the regular server of that area, Emily, was there and served them. \n\nI didn't think much about it, although I noticed she was again in nylons and I was curious to know if they were thigh highs again. \n\nWhen they were leaving, the woman came up to me and said, taking my hand, \"We were disappointed to not have you as our server.\" \n\nThe way she stressed the word 'server' was odd, yet I smiled warmly, \"That is usually not my section.\" I then pointed to my usual area and added, \"This is my home base.\" \n\n\"That,\" she said, still holding my hand, \"is good to know.\" \n\nShe then gave my hand just the softest of squeezes and headed back to her husband. I watched her walk away, finding her intriguing and sexy...the type of woman I would love to submit to given the chance. \n\nShe said something to him and he looked at me and...winked. \n\nA chill went down my spine and directly to my pussy, my overactive imagination and my current sexual dry spell impacting me. \n\nI was curious if they would be back again and if they would sit in my section. \n\n... \n\nThe following Friday I ended up taking off to go to a concert, so I had to wait two weeks to get the answer to my question. \n\nI saw them come in and get seated in my section. \n\nI walked over to the table and she said, \"We missed you last week.\" \n\nI smiled, \"I went to a Blake Shelton concert.\" \n\n\"You seem like a honey bee,\" she smiled, quoting a Blake Shelton song. \n\nI replied with a playful tone, \"I'm told I'm all sugar and spice.\" \n\n\"I bet you're a lot more than that,\" she smiled, her tone ominous. \n\nI felt my face go red, even though the words were rather harmless. \n\nI took their drink orders and got back to work. \n\nAll night she asked me chit chat questions and I learned her name was Jasmine, and his was Michael. To my surprise, she was a teacher and he a lawyer...the exact opposite of how I had originally labelled them. \n\nAs they were leaving, she came up to me and asked, \"So I noticed you always wear nylons.\" \n\nI nodded, \"Yes, I do.\" \n\n\"Me too,\" she nodded. \"It's been depressing to see how few women today do.\" \n\n\"Agreed,\" I nodded. \n\nShe leaned in, her hot breath on my ear, and whispered, \"I expect you in thigh highs next week.\" \n\nI whimpered, as she walked away not allowing me to respond. \n\nI, like most women, had contemplated being with a woman. I made out with a few at bars and even felt up a couple (and was felt up in return) and masturbated fantasizing about what tasting a pussy would be like, yet I had never actually been with one. \n\nYet, I felt as if she could see through my sweet innocent exterior and see the submissive me dying to be drawn out. \n\nThe whole next seven days I questioned my sexuality even more. \n\nMen were exhausting, men were insensitive and men were oblivious. \n\nSuddenly, women were intriguing, women were sensual and women were in touch with the needs of other women. \n\nWould I go home with her if given the opportunity? What role did her usually silent husband play in this? Could it be a threesome? Would I want to be part of a threesome? \n\nThese questions and many more bounced in my head as I bought some new thigh highs and indeed wore them under my skirt. A skirt that was a little longer than my usual attire...to hide the lace top of the thigh highs. \n\nI went to work on Friday giddy with a mixture of excitement and trepidation...truly not sure what I wanted. \n\nThey arrived at seven as usual and she asked, her tone implying disappointment, \"What's with the church outfit?\" \n\nWhat I was wearing I didn't think was a church outfit, but I answered, wanting to please her, \"I had to wear something that hid the stockings you instructed me to wear.\" \n\n\"Let me see,\" she ordered. \n\n\"Here?\" I asked. \n\n\"Yes,\" she nodded. \n\nI looked around, thankful it wasn't busy yet, and quickly lifted up my skirt to reveal that I had, indeed, obeyed her order. \n\n\"Good girl,\" she nodded. \n\nI quickly dropped my skirt back down. \n\n\"Why did you obey?\" she asked. \n\n\"I don't know,\" I answered, which was partially true, although my submissive nature was definitely part of the answer. \n\n\"Come back to us with our usual drinks my dear, and a real answer to my question,\" she ordered, before turning away from me and towards her husband. \n\n\"Yes, ma'am,\" I nodded, again showing my natural submissive nature. \n\nI walked away feeling so many emotions, but the most powerful one was my desire to get her acceptance, to please her. Yet, I also had to focus on my job. \n\nI got their drinks and returned to their table. \n\n\"And?\" she asked, looking up at me with expectation. \n\n\"I'm submissive,\" I admitted. \n\n\"And what does that mean to you?\" she asked. \n\n\"I like to make people happy,\" I explained, \n\n\"I know you do,\" she smiled. \n\nAnd that was it. I took their orders and then the place got busy and I ran around frantically like I usually do. \n\nIt wasn't until I returned to their table to hand back their credit card that I was shocked to see a pair of panties on the table. She smiled and said, \"This is your tip for tonight.\" \n\nI looked at her in shock. \n\n\"Take them,\" she ordered. \n\nMy hand trembling, I obeyed, even as I felt my cheeks burn red. \n\n\"Feel free to use them tonight in whatever way you wish,\" she smiled as she stood up. \n\nI scrunched them tightly in my hand and scurried to the back room and put them in my purse. \n\nWhen I returned again, they were gone. Disappointment coursed through me as I had hoped for another order. \n\nI was cleaning up a couple of tables, half an hour later, when I heard her say, \"Excuse me, my dear.\" \n\nI turned around and asked, \"Yes, ma'am?\" \n\n\"I was thinking it was rather unfair to give you such a gift and not get one in return,\" she said. \n\n\"Excuse me?\" I questioned, unsure what she meant. \n\n\"Give me your panties,\" she ordered. \n\n\"Pardon?\" I asked, even though I had heard her. \n\n\"Go somewhere private, take off your panties and bring them to me,\" she ordered. \n\n\"Um, I,\" I began, this being rather unorthodox. \n\n\"Now!\" she ordered firmly. \n\n\"Yes, ma'am,\" I nodded, feeling I must obey, even as I dampened my panties with excitement. \n\nI went to my other hostess and said, \"Can you watch my tables for a couple of minutes? I really need to go the washroom.\" \n\n\"Sure,\" she nodded. \n\nI quickly went to the washroom, went directly to a stall and tugged down my panties. \n\nI couldn't believe I was obeying her, nor could I believe just how wet obeying her was making me. I wanted to get myself off, but refused the temptation knowing she was waiting and I was working. \n\nI stood up, concealed my wet panties as best as I could and left the stall just as she walked in. \n\nShe smiled, looking at me, \"Hi, my pet.\" \n\n\"H-h-hi,\" I stammered, a chill going up my spine at being called her pet. \n\nShe opened her hand and I handed her my panties. \n\n\"Mmmmmm, they are very wet,\" she noticed. \n\nMy face flushed an even darker shade of red. \n\n\"My panties were wet too, my pet,\" she said, \"I fingered myself to orgasm at the table just for you.\" \n\nI was speechless, both flattered and uncomfortable at the same time. \n\n\"You like being told what to do, don't you, my pet?\" she asked. \n\n\"Yes,\" I nodded, after a moment. \n\n\"And you like obeying, don't you, my pet?\" she continued. \n\n\"Yes,\" I again agreed, completely overwhelmed by this powerful woman and her ability to see the real me, something no man had ever been able to do. \n\n\"And your pussy is wet from obedience, isn't it, my pet?\" she asked, even though she obviously knew the answer. \n\n\"Yes, ma'am,\" I admitted, adding the term of respect as well. \n\n\"What time do you get off tomorrow?\" she asked. \n\n\"Eleven,\" I answered. \n\n\"Good to know,\" she replied, then turned and walked out...leaving me confused and horny. \n\nI finished my shift, distracted for many reasons: My cunt was on fire, my head was contemplating so many scenarios, and I felt strangely naked without underwear on. \n\nThat night, as soon as I got home, I got out of all my clothes except for my thigh highs, somehow thinking she would want me to leave them on, and masturbated while sniffing her panties. Imagining her making me be her pet got me off in a couple of minutes as I put her panties on my head, her wet crotch on my face as I sucked her faint juices from the fabric while inhaling her exotic scent. \n\nAs I fell asleep, I wondered if she was planning to return tomorrow. \n\n... \n\nSaturday night I wore a different pair and colour of thigh high stockings, a shorter skirt that would, if I bent over too much, reveal my sexy nylon choice, in hopes they would show up. \n\nAll night, I kept checking the door in eager anticipation that they would show up. \n\nUnfortunately, they didn't. I was walking to my car when I was startled by a horn from a parked car. \n\nI froze. \n\nI looked at the car and saw both of them. \n\nI walked over to the driver's side where she was, leaned down and smiled, \"Hi, Jasmine,\" before I noticed that her husband had his dick out and she was stroking it slowly. \n\n\"Hi, my pet,\" she said, \"did you enjoy my panties?\" \n\nI felt my face flush red as it always seemed to do when she asked me questions, \"Yes,\" I admitted. \n\n\"What did you do with them?\" she asked. \n\n\"It's rather embarrassing,\" I replied, unable to not watch her stroke his big cock. \n\n\"Answer my questions when I ask them,\" she ordered, her tone implying clear annoyance. \n\n\"I put them on my head while I masturbated,\" I admitted. \n\n\"Did you suck my cunt cum from them?\" she bluntly asked. \n\n\"Yes,\" I whispered, looking down ashamed. \n\nShe pulled out her phone, typed something down and ordered, as she handed it to me, \"Type in your cell number for me.\" \n\nI took the phone, saw she had listed me as 'Pet Lily' and typed my digits in for her. \n\nI handed her the phone back and she said, \"I expect you to respond immediately to any text I send you, is that clear, my pet?\" \n\n\"Yes, ma'am,\" I nodded. \n\n\"Do you want to taste my cunt?\" she questioned. \n\n\"Yes, ma'am\" I admitted. \n\n\"Walk around to the other side of the car,\" she ordered. \n\nI did, completely intoxicated with her powerful persona and expectations. \n\nHer husband, whose name I couldn't remember, rolled down the window. \n\nI bent down by his window and she said, \"I just rode his cock and came all over it. If you want to taste my cunt, just lean down and clean my juices off my husband's cock.\" \n\nAlthough I was shocked, I was completely captivated by her words and his cock and the slight sample I got from her panties last night. \n\nSo I leaned forward, oblivious to the reality that anyone could see me in such a compromising position, and took his cock in my mouth. \n\n\"Get all my pussy juice,\" she ordered, as she put her hand on the back of my head and guided me to deep throat her husband's cock. \n\nMy cunt was burning and her taste was even stronger off his dick. \n\nIt lasted only about thirty seconds before she said, \"That's all for tonight, my pet.\" \n\nI reluctantly moved back up and she smiled, \"Have a good night, my pet.\" \n\n\"You too, ma'am,\" and I watched as she drove away. \n\nAs I headed to my car, I wondered what exactly I was getting myself into. \n\nThat night, I used my shower head to get myself off as I imagined so many different scenarios: \n\nMe between her legs. \n\nMe sucking his cock and swallowing his load. \n\nMe sucking his cock and taking a facial. \n\nHim fucking me while I ate her pussy. \n\nMe being their full service sex-toy. \n\nMy orgasm came hard and fast as I pondered the many exciting possibilities...my trepidation gone as I focused on the sexual thrill that obedience to her brought. \n\n... \n\nEvery day I hoped she would show up, but every day she didn't. \n\nOn Friday, I was incredibly disappointed when they didn't show up. \n\nEventually, I assumed the charade of teasing was over when she showed up by herself the following Friday near the end of my shift. \n\nI asked, \"Where's your husband?\" \n\n\"At a bachelor's party,\" she smiled. \n\n\"So you're all alone?\" I asked, flirting excessively as I tried to subtly offer myself as company. \n\n\"I hope not,\" she nodded. \"Are you off at eleven?\" \n\n\"I am,\" I nodded, my pussy getting damp with possibility. \n\n\"Any plans?\" she asked. \n\n\"I think some may be developing at this very moment,\" I replied. \n\n\"You understand I don't want a lover,\" she explained. \n\n\"W-w-what do you want?\" I asked. \n\n\"An obedient pet,\" she replied. \n\n\"Oh,\" I nodded, another gush of wetness at her forwardness. \n\n\"Do you want to be my pet?\" she asked. \n\n\"Yes,\" I nodded shyly. \n\nShe looked around the mostly empty restaurant, took her phone out of her purse and dropped it under the table. \n\n\"Could you please get that for me?\" she requested. \n\n\"I, um, I,\" I struggled to agree, considering I was at work. \n\n\"Now, Lily,\" she ordered, her playful voice gone. \n\nI quickly looked around, made sure no one was watching, thankful it was near the end of my shift and the restaurant was relatively empty, wordlessly dropped to my knees, crawled under the table and although the lighting was dim, her legs were spread open and her completely shaved pussy was staring at me. \n\n\"One lick,\" she ordered, \"that's all you get.\" \n\nI had no hesitation for three reasons: \n\n1. I desperately wanted to obey her. \n\n2. I desperately wanted to taste her. \n\n3. I didn't want to get caught in a compromising situation that could get me fired. \n\nI quickly crawled between her legs, gave her one long lick from bottom to top lick and crawled back out, even though I wished immediately I could have had more. Her taste was exotic and enticing and I was instantly addicted. \n\nStanding back up, I realized I hadn't grabbed her phone. \n\nShe smiled, \"Did you enjoy the sample?\" \n\n\"Yes,\" I nodded, feeling my face burn red with shame and excitement. \n\n\"Would you like another taste?\" she asked. \n\nI nodded, knowing that if she asked me to go back under the table I would, her delicious taste just lingering on my lips and worth getting fired over. \n\n\"Meet me in my car when you are off work,\" she ordered. \n\n\"Yes, ma'am,\" I nodded, somehow wanting to show my submissive nature even more, in case it wasn't already obvious. \n\n\"Good girl,\" she smiled, as I turned and walked away to deal with a couple other customers who thankfully hadn't seen what I had just done. \n\nThe next half an hour ticked by at a snail's pace, but once off work, I went outside and saw her car idling just down the street. Part of me was like 'What are you doing? She could be a serial killer,' yet a bigger part of me was in control and eager to submit to her sexually. \n\nI reached her car and got in the passenger side. \n\nShe asked, \"Ready to really begin your journey?\" \n\n\"Yes, ma'am,\" I nodded, curious what she had in mind as she began to drive. \n\n\"Take off your blouse,\" she ordered. \n\n\"R-r-really?\" I stammered, surprised by her words. \n\n\"I don't like repeating myself,\" she said, not looking at me at all, but with a tone that dripped with impatience. \n\n\"Yes, ma'am,\" I replied, immediately feeling guilty for annoying her. So although nervous at the task given, I began to unbutton my blouse. \n\n\"Good girl,\" she purred, her tone quickly returning to soft and sweet. \n\n\"Thank you, ma'am,\" I absurdly replied, somehow feeling the need to obey her and simultaneously make her happy. \n\nShe stopped at a red light just as my last button was undone. \n\nShe looked at me and complimented, \"Cute bra.\" \n\nI admitted, which was true, \"I wore it in hopes that you would see it.\" \n\n\"I know you did,\" she smiled, before adding, \"now take off your blouse.\" \n\nAs we started driving, she added, \"and the bra.\" \n\nI obeyed the task with trepidation, first taking off my blouse. I hesitated briefly, but then unclasped my bra and, after a deep breath, allowed my tits to be free. \n\n\"Nice perky tits, my pet,\" she complimented. ",
        "\"I've always thought they were too small,\" I admitted, which was true. \n\n\"Trust me, they are perfect. Not too big, not too small,\" she complimented, reaching over and cupping one. \n\n\"Thank you, ma'am,\" I said, trembling at her cold hands. \n\n\"Ready for a test?\" she asked. \n\n\"This wasn't a test?\" I asked with a giggle. \n\n\"It's a multi-layered task,\" she replied. \n\n\"I'm your pet,\" I answered, eager to give myself to her completely...obeying her giving me an adrenaline rush and triggering a gush of wetness in my panties. \n\n\"Good answer,\" she said, putting her hand on my leg. After a moment, she said, \"We are about to drive by a club. As we do, I want you to put your upper body out of the window and flash your titties to all the lucky people outside having a smoke.\"  \n\n\"Okaaaaay,\" I said, clearly showing my uncomfortableness with the task. \n\n\"My pet, your Mistress always knows what is best for you,\" she said, her hand sliding under my skirt. \n\nHearing her use the term 'Mistress' sent another gush to my panties, as did her hand moving ever so slowly to my burning cunt. \n\n\"Yes, ma'am, I mean Mistress,\" I nodded, willing to do something so out of character to please this relative stranger. \n\n\"It's after this next light,\" she said. \n\n\"Okay,\" I nodded, my nipples erect because of my excitement and the chill as she rolled down the window, \n\nAfter a few seconds she counted down, \"Three, two, one and flash.\" \n\nI didn't have time to hesitate, the countdown making it clear I was to obey immediately. My brain on obey, I quickly pulled myself out the window as she slowed down to a snail's pace and I held my hands in the air and flashed my tits to about twenty strangers. \n\nSo caught up in the act as they all stared at me, I yelled out, \"Take a picture, it will last longer.\" \n\nThe cell phones came out quick as we pulled away and I slid back into the car. \n\nShe quipped, \"Apparently you enjoyed that.\" \n\n\"What a rush,\" I said, feeling a rush of adrenaline at completing the very freeing, naughty task. \n\n\"I knew you would,\" she smiled, as she added, \"You may put your blouse back on, but leave it unbuttoned and leave the bra off.\" \n\n\"Yes, Mistress,\" I nodded, as she surprised me once again by pulling into a McDonald's drive-through. \n\n\"Hungry?\" she asked. \n\n\"I was hoping for more of what I got a sample of under the table,\" I replied flirtatiously. \n\n\"Which was?\" she asked, as she pulled up behind two cars. \n\n\"To taste your pussy,\" I answered, feeling both giddy and awkward at saying such a blunt thing. I mean I had many dark, twisted fantasies, just like this, but the shift from fantasy to reality was both exhilarating and mind-wracking. \n\n\"Mmmmmmmm,\" she nodded, \"You really are an eager little submissive aren't you?\" \n\n\"Yes, Mistress,\" I nodded, my mouth salivating with possibility. \n\n\"Good,\" she nodded. \"Do you want anything other than cunt to eat?\" \n\n\"No, Mistress,\" I shook my head, never eating fast food. \n\nShe rolled up and placed her order. \n\nOnce done, she slid her finger under her dress and seemingly fingered herself. \n\nPulling her wet finger out, she offered, \"For being such a good pet.\" \n\nI didn't hesitate as I took her finger into my mouth as if it was a cock and sucked off all her wetness. \n\n\"Such an obedient pet,\" she purred, as she rolled forward. \n\nI kept swirling my tongue around, trying to get all her wetness, wishing only I could get the full taste instead of these teasing samples. \n\n\"You want more, don't you?\" she asked. \n\n\"Very much so, Mistress,\" I nodded, willing to bury my head in her crotch in this vehicle in the drive through of a McDonald's if she would allow me. I had on more than one occasion given a guy head in a vehicle even once while he paid a toll booth on the interstate...knowing a complete stranger could see a head bobbing up and down turned me on, of course. \n\nReading my mind, she smiled, \"You'd bury your pretty face in my pussy right here, right now, wouldn't you, my pet?\" \n\n\"In a heartbeat, Mistress,\" I nodded, praying she was going to allow me to do just that. \n\n\"Unfortunately, it's not as easy in a dress as it would be if I had a cock,\" she said, rolling up to being next in line to pay. \n\n\"True,\" I nodded, a rush of disappointment coursing through me. \n\n\"Don't worry, my pet,\" she smiled, looking me directly in my eyes, \"I'm not stingy with my pussy, but I expect my pets to earn it.\" \n\n\"I'll do anything, Mistress,\" I quickly offered, meaning it. \n\n\"I know you will,\" she nodded, as she rolled into the drive-thru till. Looking at me, she smiled, \"A college boy, perfect.\" \n\nI already knew what she was going to make me do next and I was ready and willing when the order was given, my blouse already open and just barely covering my breasts and very hard nipples. \n\n\"That will be $6.43,\" the nerdy looking college boy said, as he looked into the vehicle. His face looked bored as if the job was as mundane as I assumed it was, but his eyes came to life when he glanced over and saw my open blouse. \n\nJasmine asked, as she shuffled in her purse, \"How is your day today?\" \n\n\"G-g-good,\" he stammered. \n\n\"Do you want it to be great?\" she asked a moment later, as she handed him a ten. \n\n\"Pardon?\" he asked, taking the money. but not moving away. \n\n\"Go get my food, sexy, and I'll give you a very sweet tip,\" she purred, her tone dripping with sexual innuendo. \n\n\"O-o-okay,\" he stammered, moving away. \n\n\"Ready to make the nerd's day?\" she asked. \n\n\"Of course,\" I smiled. \"Is his surprise me buried in-between your legs or flashing my tits?\" \n\n\"You really are fixated with my cunt, aren't you, my pet?\" she asked smiling. \n\n\"Obsessed,\" I giggled. \n\n\"All in good time,\" she promised, as the boy returned with money. \n\n\"Thanks sweetie,\" Jasmine said, taking her change. \n\n\"Your food will be up in a minute,\" he said, clearly nervous and excited. \n\n\"Okay,\" she nodded. \n\nThe boy left and we both laughed and she joked, \"I think he is a little excited.\" \n\n\"His dick is probably about to erupt in his pants,\" I predicted. \n\n\"You slut,\" she teased. \n\n\"Your slut,\" I replied, continuing to show just how willing I was to obey her completely. \n\n\"Oh my pet,\" she said, her tone suddenly serious, \"your journey is just beginning.\" \n\nBefore I could respond, the boy returned and handed her a small bag and a drink. \n\nJasmine asked, \"Do you want your tip?\" \n\n\"Please,\" he nodded, clearly excited and expecting. \n\n\"Flash him, my slut,\" she ordered, calling me a 'slut' for the first time. \n\n\"Yes, Mistress,\" I nodded, as I turned towards him, pulled my blouse open and smiled as I flashed my tits to the college boy. \n\n\"Like?\" Jasmine asked. \n\n\"Y-y-yes,\" he stammered, staring. \n\n\"Have a good night, stud,\" Jasmine said, as she began driving away. \n\nI laughed, \"Did you see the look on his face?\" \n\n\"I think he probably just came in his pants,\" Jasmine chuckled, as she began driving again. \n\n\"I hope so,\" I nodded, always loving when I could get a guy turned on. \n\n\"You may button your blouse back up,\" she said. \n\n\"Yes, Mistress,\" I nodded, and buttoned my blouse, noticing she didn't say anything about putting my bra back on. \n\nAs she drove, I realized she was driving towards the vicinity of where I lived. I asked, \"Do you live in this area too?\" \n\n\"No, my pet,\" she said, eating a fry, \"I'm dropping you off.\" \n\n\"Oh,\" I said, not even trying to hide my disappointment. \n\n\"It's very important that we don't rush this, Lily,\" she said, using my name instead of the term 'pet'. \n\n\"I'm ready and willing,\" I said. \n\n\"I know you think you are,\" she nodded, \"and you are definitely willing to be my complete sex slave tonight, but that is not what I want. I want a complete, full-time, live-in submissive that will please both my husband and I whenever we wish.\" \n\nHer full expectations laid out, a sudden rush of confusion hit me. \n\nShe said, seeing my confusion, \"You need time to really consider what you want in life, Lily. I expect 100% obedience, as does my husband and we have long searched for the perfect little submissive to move in with us and share our bedroom and life.\" \n\nMy head was spinning. I was willing to obey whatever sexual order she had in mind, but actually moving in with them...well that was more extreme. \n\n\"My husband and I will be back in the restaurant tomorrow to give you your next task,\" she continued, \"each task will push different boundaries in your mind and body, pushing your limits. If after the next six more days of a variety of tasks you are still willing and eager, we will discuss your moving in with us.\" \n\n\"Okay,\" I nodded, unsure if I was ready for all she expected. \n\nPulling up to my house, she added, \"I understand you will need some time to consider all I have told you, and in a couple of days if still interested, I will give you a list of full expectations.\" \n\n\"Okay,\" I nodded, as I watched her move her hand under her dress again. \n\n\"Just one more sample to keep you hungry for more,\" she said, \n\n\"I'm definitely hungry for more,\" I replied, wishing at the very least, she would let me eat her out. \n\n\"I know,\" she moaned, as she fingered herself, \"but all good things come to those who wait.\" \n\n\"I'm not sure I can wait much longer,\" I replied, wanting to dive between her legs right then and there, regardless of who may walk by. \n\nShe pulled her two fingers out, both shiny with wetness and offered, \"A generous sampling until tomorrow.\" \n\nI again leaned forward and sucked on both her very wet fingers. Her taste was so delicious, that I wondered what it would taste like directly from the source. \n\nShe promised, \"I'll let you dine between my legs every day, Lily, often two or three times a day, if you decide to commit fully as our live-in slave, but I don't want your decision to be made hastily.\" \n\nI continued bobbing on her fingers like they were a cock, retrieving every last remnant of her cunt juice. \n\nPulling her fingers out of my mouth, she said, \"I'll see you tomorrow, my pet.\" \n\n\"Yes, Mistress,\" I nodded, as I began to get out of the car. \n\n\"Are you planning on masturbating once you get inside?\" she asked. \n\n\"Definitely,\" I nodded. \n\n\"Do you have a cucumber in your fridge?\" she asked. \n\n\"I think so,\" I nodded. \n\n\"You will fuck yourself to orgasm using it,\" she ordered. \n\nThe task was strange, but I nodded, \"Of course, Mistress.\" \n\n\"Good night,\" she said, implying the conversation was done. \n\n\"Good night, Mistress,\" I replied, as I reluctantly got out of the car and headed to my house. \n\nShe drove away and I went into my home, went directly to my fridge, grabbed my cucumber and directly to my bedroom. I didn't even get out of my clothes as I collapsed on the bed, pulled off my soaking wet panties and began rubbing the cucumber up and down my burning pussy lips. \n\nAfter teasing myself just briefly, as I replayed the strange night of voyeuristic obedience, I slid the green vegetable cock inside my burning inferno. \n\nFrustration at not being allowed to taste her, exhilaration at flashing complete strangers, humiliation at the reality I was now fucking myself with a cucumber, and confusion at all she expected from me stirred inside me creating a unique urgency that literally overwhelmed me. \n\nI came in less than a minute, my orgasm more intense than any I could recall. My whole body was completely spent, I pulled the makeshift fuck toy out of my leaking cunt and just lay there. Eventually, I was so exhausted from the work day and my time with Mistress Jasmine that I fell asleep in my clothes. \n\n... \n\nIt didn't occur to me until the next morning that I had never told Jasmine where I lived. \n\nAll the next day I pondered her extreme expectations of me, unsure if I could possibly become a live-in slave. The idea of being an unconditionally obedient slave turned me on and I was willing and able to do that, but moving in with them and giving up my apartment and current life (no matter how pathetically dull it was) seemed extreme. Plus, what would I tell my family? 'Hi, Mom, I moved in with a married couple so I could eat cunt and suck cock'. \n\nI went to work with more questions than answers. It was a Saturday and crazy busy and I wasn't surprised when they didn't show up for supper, but rather they showed up near the end of my shift for cocktails and dessert. \n\nI greeted them, \"Was beginning to wonder if you were going to show.\" \n\n\"Oh, you will see me one way or another every day this week,\" Jasmine smiled. \n\nMichael added, \"You look very nice today.\" \n\n\"Thank you, Master,\" I whispered, quiet enough so no one else would hear, even though they had their regular booth table by itself. \n\nHe smiled, \"I see the training is going well, Jasmine.\" \n\n\"So far, so good,\" she nodded, before she said, \"Please get us our usual drinks and a strawberry cheesecake.\" \n\nI nodded and headed to get their order, while checking on two more tables. \n\nWhen I returned, she ordered, surprising me, \"Take off your heels and hand them to me.\" \n\n\"Here?\" I asked, again surprised and then quickly scolding myself for questioning her. \n\n\"Now, slut,\" Jasmine ordered, her usual immediate annoyance in her tone. \n\nI did, and she took them and moved them under the table where I noticed that Michael was making an odd face and I immediately realized I was watching Jasmine jerking him off under the table. Intrigued, and also realizing what they were about to do to my heels, I watched, in my stocking-clad feet as my own pussy got wet with the naughty act. \n\nMichael grunted a few seconds later and I assumed he was coming in my shoes. \n\nAfter another thirty seconds or so, long enough for me to begin to feel awkward standing in my stocking feet, Jasmine returned my shoes. \"Put them on.\" \n\nI quickly did, seeing the white creamy goo that was in both of my shoes. \n\n\"You will take a picture of the soles of your feet when you get home and text it to me. Is that clear?\" she asked. \n\n\"Yes, Mistress,\" I nodded, my cheeks going ruby red again. \n\n\"Good girl,\" she nodded, handing me a piece of paper with what was likely her phone number. \"Oh, and you are not allowed to come again until I give you permission.\" \n\n\"Okay,\" I nodded, not liking the order, but willing to obey. I masturbated almost daily, with a couple different toys or my fingers and going more than a day was generally a drought. With the advancement of toy technology, a man wasn't really necessary for pure pleasure. \n\nI dealt with my other customers, the feeling of cum under my feet a strange sensation that was both a reminder of what I was becoming and also incredibly hot...if not also a bit uncomfortable. \n\nI glanced over at their table a couple of times, but they seemed oblivious to my situation and immersed in their own conversation. \n\nWhen I returned with dessert for one other table, I was surprised to see Jasmine and Michael were gone. I went to their table and was disappointed to see just money. \n\nThat night, when I got home, I took off my heels, and took a look at the bottom of my soles. \n\nEvery task, every act of obedience, sent a rush of adrenaline through me and a gush of wetness to my panties. \n\nI loved her twisted mind and couldn't wait for whatever she planned next. \n\nOddly, I felt a sense of worry that I wouldn't see her on Sunday as the restaurant wasn't open that day. \n\nI texted her the photo and told her that I wasn't working again until Tuesday (Sunday and Monday my usual days off). \n\nI waited ten minutes for a response, before going to bed...ignoring the wetness in my pussy. \n\n... \n\nI woke Sunday around lunch, always sleeping in after working five straight days. My phone was flashing and I checked my messages. \n\nOne was from my Mom, two from my sister and the last one from Jasmine. I ignored the first three and went directly to the one from Jasmine \n\nMy Pet \n\nStill interested? \n\nIf yes, text me back ASAP. \n\nMistress J \n\nI looked at the time. The text came almost an hour ago. \n\nI quickly texted back: \n\nMistress J \n\nYes, I'm still interested...although nervous of your full scope. Sorry for the delay in returning, but I slept through my phone messages...as I often do on Sundays. \n\nPet Lily \n\nI stared at the phone waiting for a response before quickly going and having a shower. \n\nWhen I got out there was another message from her. \n\nFirst my pet, don't ever abbreviate my name. \n\nSecond, what toys do you have? \n\nMistress J \n\nI owned very little...just a couple of vibrators. \n\nI responded: \n\nMistress Jasmine \n\nI'm so sorry, Mistress, I won't do that again. \n\nAll I have is two vibrators. \n\nPet Lily \n\nHer response came much quicker this time, while I was walking down the stairs for an afternoon breakfast. \n\nTask 3...toy purchases. \n\nGo to an adult store and purchase more thigh high stockings, nipple clamps, clit stimulator and a pinwheel. \n\nMistress J \n\nThese items seemed rather unorthodox. Nipple clamps were a strange suggestion, I had no idea what a pinwheel was and could only assume what a clit stimulator was but I responded: \n\nMistress Jasmine \n\nI will go as soon as I finish eating. \n\nPet Lily \n\nI finished eating and looked up pictures and definitions of the items she ordered I purchase. I learned a pinwheel is a metal spinner with a handle and small spikes to tease the body. A clit simulator was simply a small vibrator that was to focus on the clit. \n\nShe responded just as I was leaving: \n\nGood pet. \n\nI drove to an adult store across town and went in. I was surprised by the massive toy selection and ended up having to ask where each item was, which was slightly confusing as they were not just typical pleasure toys. \n\nI bought all the items that were ordered as well as a new vibrator, and then went and purchased a couple new outfits and a few new undergarments for the fateful day I would finally submit to her. Ironically, even though I hadn't accepted that I would accept her extreme expectations, my body had. \n\nI sent her a picture of the items and then had my normal Sunday relax day...catching up on my PVR of my favorite television shows, making a nice supper for myself and calling my family (well the calling family thing wasn't always relaxing actually, but it had to be done). \n\n... \n\nOn Monday, I got another text. \n\nMy pet, \n\nSince you seem to still be intrigued in becoming OUR slave. I will be sending you our expectations in a few minutes. \n\nMistress J \n\nI didn't respond, instead waiting for the list of expectations with a mixture of anticipation and dread. \n\nIt came about fifteen minutes later: \n\nExpectations for our Slave \n\n<ol> <li> Slave will move in with us and have her own room. \n\n</li>\n\n<li> Slave will quit her job as being a slave will be her full time job. (PS: You will be paid generously, with your money going into a special account). \n\n</li>\n\n<li> Slave will never wear PANTIES or a BRA unless instructed to by one of her owners. \n\n</li>\n\n<li> Slave will always wear THIGH HIGH STOCKINGS (unless in bath) \n\n</li>\n\n<li> Slave will always refer to owners with proper respect...MISTRESS or MASTER \n\n</li>\n\n<li> Slave will always be completely shaved \n\n</li>\n\n<li> Slave ONLY comes when given permission by owners. ",
        "</li>\n\n<li> Slave will OBEY without HESITATION every order given by her owners. \n\n</li> </ol>\n\nMy cunt was dripping wet as I read the expectations, surprised there were not more. I was quite willing to do 3-7 without hesitation, yet moving to their home and quitting my job (even though I didn't love being a waitress...it did pay well with tips) meant a complete ending of my current life. Although I loved the idea of giving myself sexually mind and body, I mean really loved it (Jasmine seemed to understand exactly what I needed), giving my soul and life was a more complex matter. \n\nAnother twenty minutes later another text: \n\nMy pet: \n\nCan you live with these expectations? \n\nMistress J \n\nI pondered my answer to this question. I really wanted to give myself to her, to them; yet, I still wasn't sure if I could really just give up my current life...even if it was rather bland and unfulfilling. \n\nI replied: \n\nMistress Jasmine \n\nI would love to, although to be honest, expectations 1 and 2 are a little extreme. \n\nPet Lily \n\nAfter sending it, I felt a rush of guilt. I didn't want this exciting time in my life to end so quickly. I pondered a second email as my own feelings were so conflicted. \n\nI got no response back for almost an hour, anxiety riddling me as I wondered if I made the wrong choice. \n\nFinally, she responded: \n\nMy silly pet, \n\nLily I know what you need. You also know what you need even if you are struggling to accept it. Are you regretting your email at the moment? I bet you are. Is your cunt wet? I bet it is. What are you willing to do to satisfy your complex sexual desires that no one but me understands? Or are you willing to continue to live this mundane unfulfilling life? \n\nMistress J \n\nI stared at her words knowing they were true. She saw the real me...the me I wished I could be. I had never felt more alive, more excited, than I had these past few weeks. Yet... \n\nAs I pondered this a second text came. \n\nIf you wish and are willing to obey the other six expectations COMPLETELY, we could do a one month trial where you live with us, but keep your job. (We would pay your rent during this time). \n\nA rush of excitement coursed through me at the new offer. I could try this temporally and see if I really liked this...if giving myself 100 percent to her and to him was really what I wanted. \n\nSuddenly, before I even had time to respond, a third text came. \n\nI should note that WE are not completely sure you are right for us either; this one month trial would give each of us the opportunity of a test run. \n\nOddly, I felt like I was punched in the stomach. I had never once considered she may not be interested in me. Suddenly I felt even more determined to accept the one month trial. \n\nI responded: \n\nMistress Jasmine \n\nI would love to try the one month option. \n\nYour eager pet Lily \n\nShe responded: \n\nMy pet submissive, \n\nI want you to take a picture of yourself with the pinwheel teasing your stomach and between your tits. \n\nMistress J \n\nEven though I had done naughtier things, there was no photographic evidence of my naughty behaviours. This, though, would be different. A new level of trust was being challenged. \n\nUnderstanding that complete obedience was expected, I replied: \n\nYes, Mistress Jasmine \n\nI will do it ASAP. \n\nObedient pet Lily \n\nI went upstairs, grabbed the pinwheel, took off my t-shirt and bra (I hadn't yet begun to obey the newly revealed expectations) and began slowly moving the strange contraption between my breasts. \n\nI took a few pictures. Some came out blurry as I tried selfies. In the end, after a few poor pictures, I set up my phone on timer and posed. \n\nEventually, I got a good picture that I quickly, before having time to consider my actions, sent to Jasmine. \n\nMistress Jasmine \n\nHere is the picture as requested. \n\nI must admit the strange contraption does indeed create quite a teasing. \n\nNaked Pet Lily \n\nI waited for a response, but none came. \n\nWhile waiting I took off my panties and put on thigh highs which seemed strange to be wearing while lounging about at home. Even going commando felt strange as I wasn't one to do such a thing. \n\nEventually, even though quite horny, I ignored the burning in my loins, since I was forbidden to come, and tried to do my usual; Monday routine which included laundry and cleaning. \n\nAfter supper, she finally replied: \n\nNice picture my pet. \n\nI assume you didn't come like the little slut you are. \n\nTomorrow's task will be texted to you in the morning. \n\nGood night, my pet, Michael is about to fuck me now. \n\nMistress Jasmine \n\nI wasn't sure if I was supposed to reply, but thinking better safe than sorry I did. \n\nMistress Jasmine \n\nI took off my bra and panties. I put on thigh highs and I didn't come...even though I wanted to. \n\nThat said, am I allowed to wear a bra at work, Mistress? \n\nPet Lily \n\nShe didn't respond back that night, and I eventually had a relaxed night, my pussy continually asking for attention which I wasn't allowed to give. \n\n... \n\nTuesday afternoon I received the next text: \n\nMy pet, \n\nToday you will wear the nipple clamps to work. \n\nAnd, of course, no bra at work. \n\nSlaves don't wear bras or panties as their private parts are to be easily accessible at ALL times. \n\nIS THAT CLEAR? \n\nMistress J \n\nAlthough not comfortable with going to work with nipple clamps and no bra, I knew I was going to obey. So I responded: \n\nMistress Jasmine \n\nYour SLAVE will obey and understands. \n\nSorry for being such an insipid dummy. \n\nBimbo Slave Lily \n\nSomehow, calling myself names turned me on. \n\nShe replied, ignoring my last response, but giving me some advice: \n\nBy the way, my pet, if you have never used nipple clamps before, I suggest you grab an ice cube and get your nipples extremely stiff and hard. \n\nI went to the kitchen, opened the freezer, grabbed an ice cube, put it in a bowl, and went to my bedroom. I took off my t-shirt and grabbed the ice cube. I moved it directly to my nipple and shivered at the sudden cold, even as my nipple immediately got stiff. I did the same thing to my other nipple, getting both very erect and wet. \n\nEven though I loved having my nipples sucked on and bitten, I had never tried such a thing. \n\nI put the first clamp on my left nipple and yelped, the clamp pinching much more than I anticipated. Then, even as my one nipple was burning, I put the second clamp on, creating another yelp and an intense pain. I sure hoped whoever said 'no pleasure, no pain,' knew what the fuck they were talking about, as all I felt was pain. \n\nAfter half an hour of getting used to them, I put on a black blouse that would hide the reality that I was not wearing a bra and headed to work. \n\nEventually, I got used to the air going to my naked cunt and almost forgot that I was wearing nipple-clamps while bringing food to moms and dads with their kids, couples on a date, a family of eight celebrating their nana's 90<sup>th</sup> birthday. To them I just looked like a cute, polite waitress, and not the sexual deviant I really am. \n\nJasmine walked in around ten at night and pointed towards the washroom. \n\nI asked Mary to cover my couple of tables, the Tuesday rush over, and headed to meet Jasmine in the washroom...as usual trepidation coursing through me. \n\nIn the washroom, Jasmine was looking in the mirror and smiled, looking at me through the reflection, \"How was your day, my pet?\" \n\n\"Numbing,\" I joked. \n\n\"I imagine so,\" she smiled, before adding, \"no one else is in here.\" \n\n\"Okay,\" I nodded. \n\n\"Go in the stall and take off your blouse,\" she ordered. \n\n\"Okay,\" I nodded, not liking the risk, but being the obedient she expected. I went to the last stall, closed it and quickly unbuttoned my blouse. \n\nShe asked, \"Ready?\" \n\n\"Yes, Mistress,\" I answered, as I shivered, topless and with my nipples aching. \n\nShe walked in and smiled, \"Good girl.\" \n\n\"Thank you, Mistress,\" I nodded, as she stared at me. \n\n\"You deserve a reward,\" she smiled, closing the door and ordering, \"knees.\" \n\nI immediately obeyed, not considering being caught, or even complete obedience, but the possibility of tasting her. \n\nShe lifted up her skirt, revealing thigh highs and sans panties, she offered, \"Go ahead, my pet, get a quick taste directly from the source.\" \n\nI didn't hesitate. The offer given, I leaned up and began licking her shaved pussy. I lapped as if I had been in the desert for weeks and had just found water; I lapped as if my life depended on it; I lapped like I was a complete lesbian. I lapped with insatiable hunger. \n\nIt was likely only thirty seconds, but it seemed like I was transported to a different place as I lapped the exotic perfection that I had only had brief samplings. \n\nShe moved away and said, \"Oh my, you really are an eager cunt licker.\" \n\n\"Can I get you off?\" I asked, eager and wanting to taste her full flood of cum. \n\n\"Soon,\" she smiled, leaning down and kissing me on the lips. \"Soon.\" \n\nShe walked out and I, realizing I was still at work, quickly stood up, put my blouse back on and went to wash my face. I licked my lips, her wetness lingering on my lips. \n\n'Soon,' she said...soon wasn't going to be soon enough. \n\nAn hour later I got another text that I could take off the nipple clamps, which I immediately did, my nipples very thankful for the reprieve... even though a sudden sharp pain first hit me as I took them off. At home, I iced them for a while before going to bed, my head spinning with whatever crazy task she was going to have me do tomorrow. \n\n... \n\nI got a text just before lunch that surprised me. \n\nMy pet slut, \n\nMichael will be coming to your home any minute now to fuck your face and then shoot his load all over it. \n\nYou will then go out in public, and purchase something with cum on your face. \n\nMistress J \n\nThe first thing I pondered, strangely, was what if I wasn't home. \n\nThe idea of sucking cock excited me, I hadn't had a cock in me other than my vibrator in a couple of months. \n\nThe idea of walking around like a complete slut with cum in my hair also excited me...I loved being her slut and public exhibitionism was clearly something she liked to do and each time I did it I ended up loving it. That said, walking around with cum on my face was a lot more public. Although not more so than when I crawled under the table and licked her pussy, albeit very, very briefly. \n\nI was still in my pajamas so I quickly got dressed in something a little sexier and waited for him to arrive. \n\nI was watching The View when the knock came, I went to it and he greeted, \"Good afternoon, Lily.\" \n\n\"Good afternoon, Master,\" I greeted. \n\n\"Knees, now,\" he ordered, being much more authoritarian without his wife present. \n\nI quickly obeyed, dropping to my knees in my front lobby. \n\n\"Get my cock out,\" he ordered. \n\nI again obeyed. \n\nI fished his dick out of his trousers, loving how thick it was. I loved thick cocks that widened my cunt, girth being more important than length (in my opinion). I took his semi-erect cock in my mouth and allowed it to grow, a sensation that always turned me on...a sense of power that it was me, my mouth, which was getting him hard. \n\n\"That's it, get it nice and hard for you,\" he groaned. \n\nI began taking more of his six plus inch cock in my mouth, knowing I would soon be able to take it all in...and I did. \n\n\"That's it, take it all in that pretty mouth of yours,\" he groaned, as I began bobbing like a hungry cock sucking slut. \n\nI sensed he wasn't going to last long based on his groans, but was surprised when he suddenly grabbed my head and began roughly fucking my face, his balls bouncing off my chin with each hard forward thrust. \n\nBeing used so roughly turned me on greatly and I focused on not gagging. \n\nAfter a minute or so of getting my face fucked, he pulled out and immediately coated my face with cum. The hot spray enhanced my submissive slut desires as my entire face seemed to be coated. \n\nOnce spent, he said, \"Shit, I think we have found our slave.\" \n\n\"I hope so,\" I nodded, the idea of regular cock very appealing. \n\n\"Just be a good girl for Jasmine, Lily,\" he instructed, as he put his cock away. \n\n\"Yes, Master,\" I nodded, remaining on my knees. \n\n\"Now go and showcase your facial,\" he ordered, as he walked out the door. \n\nI got up, went to the mirror to see what I looked like. I laughed softly at just how much cum was on my face. There was no way I could walk in public and not have people know exactly what was on my face. Oddly, I felt no sense of fear or insecurity, only a focus on finishing the task required. \n\nI was pondering where to go when I got a text. \n\nCum slut Lily \n\nMeet me in fifteen minutes at the Starbucks on 9<sup>th</sup>. \n\nMistress J \n\nMy decision made, I looked at the clock and knew it would take me at least fifteen minutes to get there. \n\nI drove directly there and ended up two minutes late. She was already at a table and gave me a look of dismay that I was late. I went directly to her and apologized, \"Sorry, traffic was nuts.\" \n\n\"Go get your coffee,\" she ordered, her tone flat. \n\n\"Yes, Mistress,\" I nodded, loud enough for people nearby to hear me. \n\nI walked to the line and waited, acting oblivious to the cum that was still all over my face. When I reached the till, I smiled, \"A large mocha please.\" \n\nThe woman, in her thirties, gave a startled look as she looked at me, and I shrugged, \"It's a dare.\" \n\n\"Okay,\" she nodded, trying to hide her disgust, but not really doing a good job. \n\nWhen she handed me my drink I couldn't help but respond to her judgemental attitude, \"It's also great for the complexion, maybe you should try it.\" \n\nI immediately turned around and walked back to Mistress Jasmine. \n\nShe said, although her tone and look was still cold, \"I'm impressed.\" \n\n\"About?\" I asked. \n\n\"You don't care what others think,\" she said. \n\n\"I only care what my Mistress thinks,\" I answered. \n\n\"Good answer,\" she smiled, before adding, \"after work tomorrow you will be coming home with me.\" \n\n\"Really?\" I asked, like a giddy school girl. \n\n\"Yes, you will start your month long trial, which I am very confident will be a permanent thing,\" she said, putting her foot on my leg. \"Massage my foot.\" \n\n\"Yes, Mistress,\" I nodded, taking her nylon-clad foot in my hands. \n\n\"You will not need any clothes from home as we will dress you,\" she explained. \n\n\"Yes, Mistress,\" I nodded again, feeling like I was her very own live Barbie doll. \n\n\"Are you sure you are ready to be a complete submissive slave?\" she asked. \n\n\"Without a doubt,\" I nodded, lifting her foot up and kissing her toes as a sign of submission. \n\n\"You'd crawl under this table and eat my cunt if I ordered you, wouldn't you?\" she asked. \n\n\"In a heartbeat,\" I agreed, although I prayed she wouldn't make such an order. \n\n\"Don't worry,\" she smiled and laughed for the first time today, \"I don't want either of us to go in jail.\" \n\n\"Pffffew,\" I joked. \n\n\"Plus, you would be the prison bitch in a heartbeat,\" she joked. \n\n\"I'd rather just be your bitch,\" I countered. \n\n\"My live-in slave?\" she questioned. \n\nI smiled, \"For at least a month.\" \n\n\"Oh, we both know once you get a taste of sexual slavery you will be hooked,\" she said, switching feet even as we got the occasional odd look from others. \n\n\"You may be right,\" I nodded, already looking forward to whatever she had in store for me tomorrow night and every day and night after that. \n\n\"You do understand you won't only be eating my cunt and sucking and fucking my husband?\" she questioned. \n\n\"I understand that for the next 30 days my body and mind are yours,\" I nodded, not even a hint of trepidation about what may transpire. \n\n\"All three holes?\" she asked. \n\n\"Although I've never done anal, Mistress,\" I admitted, something that had never appealed to me, yet I added, \"I really have no choice if you or Master decides that I'm a three hole cum slut.\" \n\n\"Fuck you have me horny,\" she said. \n\nI responded, \"You have had me horny and ready to erupt all week.\" \n\n\"But you've obeyed,\" she questioned. \n\n\"Of course, Mistress,\" I nodded, before adding, \"although it hasn't been easy.\" \n\n\"I need to come,\" she said rather bluntly. \n\n\"I can help you with that,\" I bluntly responded back. \n\n\"You really are determined to taste my cunt,\" she smiled. \n\n\"Yes, Mistress, there is nothing I want more,\" I admitted, and it was true. \n\n\"No, I'll just go to Michael's office and have him fuck me bent over his desk,\" she shrugged. \"Since he already came all over your pretty face, he will last twice as long.\" \n\n\"Happy to be of service,\" I joked. \n\n\"Oh, I know you are,\" she said, moving her foot away. \n\nShe stood up and said, \"I have one more last surprise for you tomorrow. And remember you won't be going home after your shift.\" \n\n\"Yes, Mistress,\" I nodded. \n\n\"Actually, you will be going home after your shift,\" she corrected herself, \"your new home.\" \n\nShe leaned down and kissed me, and whispered, \"I'm going to fuck you so hard tomorrow you will be coming for weeks.\" \n\n\"God, yes,\" I whimpered, as she walked away. \n\nI remained seated for a couple of minutes before heading out and returning to my car, ignoring the burning fire between my legs. \n\n... \n\nI woke up Thursday excited about the journey I was about to begin. I had appetizing tastes of what was to come, but I was ready to go all in and immerse myself in the submissive sexual slave world. \n\nI had a long bubble bath, cleaned my house (I had no idea when I would be back) and was just pondering what to wear when I got a text. \n\nPet Slave, \n\nToday is the day. \n\nThe last task is a simple one. \n\nObey every order of the woman about to come to your house. \n\nMistress J \n\nI stared at the text. A stranger was coming here? When? Who? What was I expected to do? As these questions lingered in my head, I heard my doorbell ring. \n\nI shook my head. Mistress Jasmine was a woman full of surprises. \n\nI went downstairs in only thigh highs and a robe, and opened the door. \n\nI gasped. \n\nThe woman in front of me was a high school girl. \n\nI stammered, hoping this wasn't the woman I was to obey, \"H-h-hi.\" \n\n\"Are you Pet Lily?\" she asked, looking me over. \n\n\"Yes,\" I nodded, looking at the blonde in a plaid skirt and thigh high stockings that were not hidden by the short skirt. \n\n\"Yes, what?\" she questioned, as she invited herself into my home. \n\n\"Yes, Miss,\" I said, unsure what to call her. \n\n\"That's Mistress,\" she said, \"I assumed pet Jasmine had done a better job of training you.\" \n\n\"P-p-pet Jasmine?\" I stammered. \n\n\"Yes, the slut made it clear that you were a completely obedient slave,\" the blonde said, sounding annoyed. \n\n\"I-I-I am, Mistress,\" I stammered, still in shock...Jasmine was a submissive to a teenager? \"I'm just, well, I wasn't expecting someone so young.\" ",
        "She smiled for the first time. \"I'm nineteen, in case you are curious, although I know I look younger.\" \n\n\"Oh,\" I nodded, thankful she was of legal age, although I would have guessed she was a couple years younger. \n\n\"Pet Jasmine was my teacher last year and became my pet,\" she explained, as she snapped her fingers and pointed to the carpet. \n\nI dropped to the carpet. \n\n\"I see you are wearing nylons as instructed,\" she nodded, \"are you also sans panties and bra?\" \n\nI undid my robe and revealed I had indeed obeyed that order too. \n\n\"Maybe pet Jasmine was right,\" she nodded, looking me over. \n\n\"I'm very obedient,\" I answered, before adding, \"I'm sorry, I was just a little taken aback at first by how young you look.\" \n\n\"Don't let my age be deceiving,\" she said, as she tugged her skirt down, revealing a delicious looking shaved pussy. \n\n\"Understood, Mistress,\" I nodded, intrigued by this very sweet looking dominant. She looked exactly like the sweet girl next door would look...yet as often was the case, like me, looks can be deceiving. \n\n\"My name is Sarah, by the way,\" she said, as she walked the few feet to me, her pussy now directly in front of me. \n\n\"I'm Lily,\" I offered, staring at her enticing cunt. \n\n\"No,\" she corrected, \"you are pet Lily or slut Lily or just slut, pet, or slave.\" \n\n\"Yes, Mistress Sarah,\" I nodded, each nasty name sending twitches of pleasure to my wanton box. \n\n\"Hungry?\" she asked, looking down at me. \n\n\"Famished, Mistress Sarah,\" I answered, hoping she would allow me to lick her to orgasm, something that Mistress Jasmine had refused so many times. \n\n\"Beg, like a puppy,\" she ordered. \n\nThe order was strange, the order was meant to humiliate, yet as usual I did as ordered. \n\nI wasn't sure exactly how to do it, or what I looked like when I did, but I lifted my arms up and made my hands look like paws as if begging for a treat, which I suppose was exactly what I was doing. I also gave a puppy dog pout look, a look I had often used to get my way with my dad when I was a kid. \n\n\"You are really as adorable, cute and submissive as pet Jasmine said you are,\" she smiled down at me, as she grabbed my head and pulled me in between her legs and to her pussy. \n\nI immediately began licking, my hunger to taste pussy triggered by Mistress Jasmine. \n\n\"That's it, slut, lick my cunt,\" she moaned. \n\nAnd I did. \n\nShe said, \"You see my pet, I've been training pet Jasmine to be a switch...a woman who can be both a submissive obedient pet, but also a strong-willed dominant Mistress and you, my cunt-licking slave, are the guinea pig.\" \n\nI kept licking as she told me the entire story of how Jasmine became her teacher pet (you can read that story in JASMINE FANTASIES: PET TEACHER). \n\nI was as enthralled with the story as I was with her pussy taste, distinctively different from Mistress Jasmine's and yet with a clear similarity as well. \n\nSarah explained, \"All Mistresses, myself included, need to have served someone at some point. A Mistress needs to understand the needs and desires of their submissives.\" \n\nI was in awe of all this nineteen year old knew and also curious who her Mistress was, as I pondered her theory, while simultaneously licking her heavenly cunt. \n\nHer hands went through my hair and as her moans got louder, she pulled my head deep inside her now very wet pussy, \"Now get me off, cunt licker.\" \n\nI took her clit between my lips and her legs buckled slightly. I focused on clit pressure and in a few seconds she began grinding her cunt on my face until she came, flooding my face with wetness. It felt like a pail of warm water had been thrown on my face as gush after gush coated my face and landed in my eager mouth. \n\nWhen she finally let go, she ordered, \"Now go to your bedroom.\" \n\nI began to get up when she said firmly, as if I was stupid, \"Pets walk on four legs.\" \n\nI took off my robe, returned to my knees and then onto all fours and began crawling to my room in only thigh highs as she went to her backpack. \n\nOnce in my room, I waited on all fours. \n\nShe walked in a moment later and ordered, \"On the bed.\" \n\nI obeyed. \n\nWhen I looked at her, she ordered, \"On your stomach and have your legs spread eagled.\" \n\nI again obeyed, hoping the Mistress of my Mistress could overrule the no orgasm rule and get me off. \n\nShe moved onto the bed and asked, \"What is your fantasy, my submissive?\" \n\n\"I think I'm living it,\" I answered, my cunt leaking with anticipation. \n\nHer hand went to my ass, so soft and gentle, her hand so close to my fevered, neglected cunt. \n\n\"Want to come?\" she asked. \n\n\"Desperately,\" I answered, as her fingers moved ever so close to my needy box. I then added, wanting to make sure it was clear, \"Mistress Jasmine said I couldn't come without permission.\" \n\n\"Hmmmmm,\" she pondered, \"orgasm control.\" \n\nI had never considered it that, but I guess that is exactly what had been happening this past week. \n\n\"Well, let's see just how well you can control yourself,\" she said, moving off the bed, and going to my dresser drawer. She found my vibrator, apparently I should try to hide my sex toys better, and she returned to the bed. \n\nShe put the toy just touching my pussy, and turned on the vibrator. \n\nI immediately moaned. \n\n\"Don't you dare get off,\" she ordered, as she moved the vibrator slightly. \n\n\"Okaaaaaay,\" I moaned, not sure how long I would be able to last with just teasing. \n\nShe got off the bed and said, \"I have class pretty soon. I'll be back in two hours.\" \n\n\"Pardon?\" I gasped. \n\n\"I think I was pretty clear,\" she quipped. \"And if you come, you will be punished.\" \n\n\"Oh God,\" I whined, the tip of the vibrator just between my pussy lips, the slightest of a tease. \n\n\"See you in two,\" she said, all sing-song. \n\n\"Bye,\" I said, trying to figure out how I was going to stay here in this position for two hours. \n\nAnd thus it began. Two hours of constant teasing. Just the very tip of the toy was actually touching my pussy lips, not enough to really get me going, but enough to tease me relentlessly. \n\nBy the time she returned, I was no longer horny, but sore. I had leg cramps, my breasts felt numb and I was thirsty as hell. The batteries also died half way through the teasing. \n\nWhen the door opened I was thankful, desperate to move. \n\nWhen she reached my room, she laughed, \"You're still in the exact same spot.\" \n\n\"Yes, Mistress,\" I answered. \n\n\"You really are the perfect sub,\" she chuckled, before she added, \"Roll onto your back.\" \n\n\"Thank God,\" I joked, \"my body is stiff and sore.\" \n\n\"But you didn't get off, did you?\" she asked. \n\n\"Not even close,\" I admitted. \n\n\"Well, time for me to come again,\" she shrugged, now naked from the waist down as she got on the bed and straddled me. \n\nThirsty as hell, I licked her cunt like it was water, purifying water. \n\n\"Mmmmmm,\" she moaned, \"you're such an eager pet.\" \n\nAnd I was. I lapped hungrily out of insatiable hunger, but equally out of obedience and the desire to please. \n\nShe leaned forward, which made me lean forward to continue licking. \n\nJust as I buried my face back in her pussy, I moaned as she shoved the vibrator deep inside me. \"Aaaaaaaaaaaah.\" \n\nShe pumped the toy in and out of my cunt, which quickly rekindled the fire in my loins. \"Don't come, my pet.\" \n\n\"Oh God,\" I moaned into her cunt. \n\n\"Keep licking,\" she ordered, returning to sitting on my face, the toy lodged deep inside me. \n\nI lapped and lapped until she began grinding on my face before I was rewarded with her second orgasm on my lips. \n\nI kept lapping up her excess juices until she finally moved off me. \n\nShe pulled the toy out of my needy cunt and said, \"You should probably stand up and stretch.\" \n\n\"I couldn't agree more,\" I nodded, standing up and stretching. \n\nShe smiled, \"Thanks for the orgasms, and have fun with Jasmine.\" \n\n\"I hope so,\" I nodded. \n\nShe walked out and I pondered...this was only the beginning of a crazy day. \n\n... \n\nAfter a shower, I was getting ready for work when I got a text from Jasmine: \n\nPet Lily, \n\nI want you wearing something sexy underneath your outfit today. \n\nToday you can wear something sexy for me. Surprise me with something just for me! \n\nMistress J \n\nAll night at work I was giddy with the promises that lay ahead. \n\nI constantly kept looking for Jasmine to arrive, with or without Michael, each hour giving me more and more anxiety. \n\nWhat if she changed her mind? \n\nWhat if she decided I wasn't worthy? \n\nAlthough the thoughts were silly considering all that I had done for her, not to mention her text a few hours ago. \n\nIt was closing time when I received a text. I usually didn't keep my phone on me during work hours, but today I did just in case she texted me. \n\nPet Lily \n\nThe time has CUM. \n\nI am waiting outside when u r done. \n\nMistress J \n\nI finished my shift quickly, grabbed my small travel bag with the necessities for life, and headed to begin a month, maybe a lifetime, of submission. \n\nI walked to her car, not a hint of trepidation, and got in. \n\n\"Hi, slut, ready for your new life?\" she asked. \n\n\"Yes, Mistress,\" I nodded, never wanting anything more in my life. \n\nShe leaned forward and kissed me. I melted into her. \n\nWhen she broke the kiss, she asked, \"Ready for your first present?\" \n\n\"Yes, Mistress,\" I nodded. \n\nShe went in her purse, pulled out something and put it over my head and on my mouth. She smiled, \"It's a ball gag. It will help when Michael takes that ass of yours tomorrow.\" \n\nI nodded, unable to talk. Both excited that the first night was just going to be me and her, and a bit nervous about the implication that I was going to get ass fucked tomorrow. \n\nShe pulled into a 7-11, handed me a five dollar bill and ordered, \"Go buy a bag of ice.\" \n\nMy eyes went wide, but I took the bill and headed into the convenience store with a ball gag covering my mouth. \n\nAs soon as I entered, a couple of male teenagers were staring at me. I quickly grabbed the ice from the back and went directly to the till. The cashier didn't even blink an eye, as if he usually dealt with customers with a ball gag in their mouth. \n\nI returned to the car and she smiled, \"Enjoy yourself?\" \n\nI nodded, the rush of doing something kinky and public turning me on...just as it had when flashing my tits, tasting her in the washroom or walking around with cum on my face. \n\n\"I can't wait to show my new pet to my friends,\" she purred, as she pulled back onto the road. \n\nI wondered if she meant now, or at some other point in time. I kept looking at her. She was so beautiful, so seductive and so intriguing. I was still in awe that she was a pet to one of her ex-students and yet showed not even the vaguest of hints she was submissive in front of me. \n\nAs she pulled up to a very average house, she ordered, \"Come on in and see your new home.\" \n\nI nodded. \n\nI followed her inside with the ice. \n\nI'm not sure what I expected her house to look like, but it was rather normal. She took the ice and ordered, \"On your knees. Pets are always on all fours, unless of course they are sucking cock, eating pussy or getting fucked in their slut holes.\" \n\nI nodded as I dropped to my knees. \n\nShe walked into the kitchen and I remained on my knees awaiting further instructions, my sexy panties already damp with anticipation for the unknown. \n\nWhen she returned with a glass of wine, she said, \"Silly me, take off your dress, let's see what you have chosen to wear underneath that adorably cute exterior.\" \n\nI nodded, stood up and began taking off my dress, not feeling at all shy about soon being in only lingerie in front of her. Actually, it was the opposite...I was excited for her to see the real me without any of society's expectations...because this was the real me: obedient, sexy, eager, slutty, submissive. \n\nI, without instructions, returned to being on all fours once I was only in my lingerie. \n\nShe laughed, \"Good girl, but I want to look you over. Please stand up.\" \n\nI did. \n\nShe walked around me as if she was assessing my entire body. Her hands cupped my breasts from behind, cupped my ass and then she moved back in front of me. \n\n\"Take off your shoes,\" she ordered. \n\nI did. \n\n\"Perfectly manicured feet,\" she approved, looking down at me. \n\nI again nodded, not able to thank her with a ball gag in my mouth. \n\n\"Fuck, such cute, perky breasts,\" she nodded, cupping my breasts again. \n\nI moaned into the ball gag. \n\nMy body trembled at her touch and the light chill in her home. \n\nShe then leaned forward and sucked my left nipple. \n\nI again moaned into the ball gag. \n\nShe then surprised me by biting hard on my nipple. \n\nI yelped, but my sound was muffled by the ball gag. \n\nShe then moved to my right nipple while simultaneously pinching and twisting my left. \n\nThe pleasure and pain mixture sent a wave of pleasure down to my very needy, desperate cunt. \n\nAfter a couple minutes of intense nipple teasing, she moved away and said, \"Knees, my pet.\" \n\nI obeyed. \n\nI looked up at her as she unzipped the dress she was wearing to reveal she was wearing a garter belt and stockings and nothing else. \n\nMy mouth instantly watered at the thought that maybe I could finally lick her to orgasm. \n\n\"You're dying to munch on my cunt again, aren't you?\" she smiled, looking down at me. \n\nI nodded eagerly. \n\n\"Did you enjoy my surprise today?\" Jasmine asked, walking directly in front of me \n\nI again nodded. \n\n\"Did she tell you that she is my Mistress?\" Jasmine asked. \n\nI nodded. \n\nShe bent down and took the ball gag out. She tossed it into her couch before asking, \"Were you surprised?\" \n\n\"I was, Mistress,\" I answered. \n\n\"She is utterly irresistible,\" she explained. \n\n\"That she is,\" I nodded. \n\n\"And heaven to taste,\" Jasmine added. \n\n\"I must concur,\" I nodded, before adding, \"although I have very little experience to compare it to.\" \n\nShe smiled down at me, \"Don't worry, over time you will get a wide variety of pussy to sample.\" \n\n\"I can't wait,\" I admitted, which was true. If I was going to submit for a month, I was going all in. \n\n\"Well, let's finish what you've started a few times,\" she smiled, sitting down on her couch. \n\nI crawled to her as she opened her legs. \n\n\"Go ahead, my pet, taste your Mistress's cunt,\" she purred. \n\nAnd I did. \n\nI moved between her nylon-clad legs, up to her glistening pussy and paused (like Indiana Jones did when he finally found the Holy Grail) admiring the pussy perfection. Then I leaned forward, extended my tongue and began licking. \n\nI slowly lapped her pussy. My tongue moving up and down like a paint brush. I parted her wet pussy lips and began to try and fuck her cunt with my tongue. \n\nShe moaned, \"I think you are a natural born pussy pleaser.\" \n\nI smiled as I moved to her clit and flicked it three times. \n\n\"Aaaaaaaah,\" she flinched. \n\nI kept exploring, trying to make sure I pleasured every inch of her pussy. \n\n\"You've been dreaming of this, haven't you?\" she questioned. \n\n\"God, yes,\" I nodded, without losing a beat between licks. \n\n\"Slide a finger inside me, my pet,\" she ordered. \n\nI obeyed, sliding a finger inside her pussy while continuing to lick. \n\n\"That's it, now finger fuck me,\" she demanded, grabbing my head and holding my face on her clit. \n\nI licked and fingered her and wasn't surprised when my face was coated with wetness. \n\nI lapped up her heavenly taste, finally getting the full meal deal after a couple tantalizing appetizers. \n\nWhen she let go, I kept lapping and she pushed me away saying, \"You keep licking me I'm going to pee on you.\" \n\nSo enthralled in the act of submission, I offered, \"I'm your slut, Mistress.\" \n\n\"Hmmmmmm,\" she smiled, before standing up and adding, \"Something to add to your training.\" \n\nShe walked away and I licked my lips, trying to get even more of my Mistress's nectar. \n\nWhen she returned a couple of minutes later, she ordered, \"Follow me, my pet.\" \n\nI did as she grabbed the bag of ice, which I had forgotten about, and headed to a bedroom. \n\n\"Get on the bed and lie on your back,\" she ordered. \n\nI obeyed. \n\nI watched as she grabbed some rope from the closet and returned. \"Ever been tied up?\" she asked. \n\n\"No, Mistress,\" I answered, a chill going down my back. I had a bit of a phobia with being confined and this was, to me, scarier than all the tasks I had already committed. In those, I was in control, I had the final say...this would be taken away completely. \n\n\"You're nervous,\" she noticed. \n\n\"I've never liked being confined,\" I admitted, \"even on airplanes I have to take an anxiety pill.\" \n\n\"Well, the best way to overcome fear is to deal with it head on,\" she shrugged, as she moved to the bed. \n\n\"Yes, Mistress,\" I nodded, as she pulled my panties off and added, \"What a nice ripe cunt you have.\" \n\n\"Thank you, Mistress,\" I replied, feeling flattered by such a compliment. \n\nShe began to tie me to the bed even as I trembled with nervous excitement. \n\nSoon I was bound, my body feeling restricted, as she moved away and then returned with ice. She put an ice cube on each nipple, making a literal chill course my body. \n\nShe whispered, \"Is your cunt on fire, my pet?\" \n\n\"It's an inferno,\" I moaned, praying she was going to finally allow my long rejected orgasm to be released. \n\nSuddenly I felt her hand go to my burning cunt and then a stunning cold as she shoved an ice cube inside me. \n\nI screamed in shock at the reality and the incredibly bizarre, completely unexplainable sensation of having an ice cube in my cunt. \n\nShe smiled, looking down at me, \"Expect the unexpected.\" \n\n\"Isn't that a big brother saying?\" I asked, having watched every season of the show. \n\n\"And you are my lone houseguest,\" she quipped, getting off the bed. \n\n\"That means I win,\" I joked. \n\n\"Oh, that you do,\" she agreed, as she walked out of the room. \n\nMy pussy was burning and freezing, an oxymoron where the impossible became possible. \n\nI desperately wanted to play with myself, yet I couldn't in my restricted state. Plus, I didn't have permission. \n\nFrustratingly, she didn't return for what seemed like an eternity, even though I heard her laugh a couple of times. \n\nWas she watching television? \n\nWas she really going to leave me bound all night? \n\nBeing teased was beginning to really drive me crazy. \n\nWhen she did return, she confirmed my thoughts, \"Sorry, I wanted you to cool down and I wanted to catch up on the Big Bang Theory I PVR'd last night.\" \n\n\"Oh,\" I said, feeling annoyed at being ignored for a TV show. \n\n\"Don't worry, my pet,\" she said, sensing my frustration, \"my very own personal big bang theory is about to be tested on you.\" \n\n\"Okay,\" I said, curious what she meant by that. \n\nShe undid the rope and ordered, \"On all fours, my pet.\" \n\n\"Yes, Mistress,\" I obeyed, happy to be in a different position. \n\nShe then rebound my hands and walked away again. \n\nI tried to turn around to see her, but in my bound position it was awkward. \n\nWhen she returned a minute later, she joined me on the bed and asked, \"When was the last time you were fucked, my pet?\" \n\n\"A few months ago if you don't count my vibrator,\" I admitted. \n\n\"Time to change that answer,\" she added. \n\n\"I agree,\" I nodded, feeling her cold hands on my hips and something poking my leg. \n\n\"Ready to get fucked?\" she asked. \n\n\"Is my cunt wet?\" I replied, asking a rhetorical question. \n\n\"Dripping,\" she answered, as, without warning, she slammed her plastic dick in me. \n\n\"Yesssssss,\" I screamed, as my cunt was finally filled. \n\n\"You like that?\" she asked. \n\n\"Fuck yes, Mistress, I love your cock,\" I replied, as she began fucking me hard. ",
        "\"Beg, bitch,\" she ordered a few strokes later, stopping with the surprisingly big cock filling my cunt. \n\n\"Oh please, Mistress, make your live-in slave orgasm,\" I answered. \n\n\"For just a month or forever?\" she questioned. \n\nIn the heat of the moment, I couldn't fathom it not being forever and declared, \"Forever, Mistress. I want to be your live-in submissive pet pussy licking, cock sucking, cum slut forever.\" \n\n\"Good answer,\" she purred, as she resumed fucking me. \n\nI don't know if it was the hard fucking, the big plastic cock, the submissive situation or the week long orgasm withdrawal, but in only a couple of minutes I was already close to orgasm. I begged, \"May I come, Mistress?\" \n\n\"Already?\" she asked, although her tone implied she wasn't surprised. \n\n\"You're an amazing fuck and this orgasm denial has had me going crazy all week,\" I admitted, while moaning. \n\n\"You may come whenever you wish,\" she said, the most magical words I'd ever heard. \"But you fuck yourself to orgasm.\" \n\nShe stopped fucking me and I immediately began bouncing back on her plastic cock. \n\n\"Ohhhhhh, thank you, Mistress,\" I moaned, as I bounced on her cock like the desperate, horny slut I was. \n\n\"Come the second I tell you to, is that clear, my slut?\" she asked. \n\n\"Yes, Mistress,\" I agreed, as I continued riding her cock, my orgasm imminent. \n\n\"Nnnnnnn-not yet,\" she teased. \n\n\"Ohhhhhh, fuck,\" I moaned, so fucking close. \n\n\"Nnnn-nope,\" she continued, enjoying driving me crazy, as she grabbed my hair and held on to it hard. \n\n\"Oh yes, pull on your slut's hair,\" I moaned, always liking it rough. \n\n\"Now,\" she said, a couple seconds later and permission granted, the flood gates were open and my orgasm hit with the power of a million suns. \n\n\"Yesssssssss,\" I screamed, my quaking like a ten on the Richter scale, easily the biggest, most explosive orgasm of my life. \n\nAs she kept fucking me, she explained, \"The longer you are denied an orgasm the more intense the inevitable orgasm.\" \n\n\"Kkkkkkk,\" I agreed, just enjoying the euphoria that swarmed my entire existence. \n\n\"But the best part,\" she continued, \"is when you get the second and third wave.\" \n\nI wasn't sure what she meant, but as she kept fucking me from behind, I finally caught on. \n\nI could feel a second orgasm building, even as the first hadn't finished its lengthy journey through me. \n\n\"Oh, God...Mistress,\" I moaned, \"never...felt...so...good.\" \n\n\"My pet will always be rewarded for true obedience,\" she said, continuing to slam into me, her body crashing into mine. \n\n\"Thank...y-y-y-you,\" I struggled to get out as my head got light as the pleasure continued to bring me joy I didn't know existed. \n\n\"I'm going to keep fucking you, my pet, until you have multiple orgasms,\" she revealed. \n\n\"Shit,\" I whimpered, feeling so light headed that I thought I may pass out. \n\n\"Tell me what you are,\" she demanded. \n\n\"Your slut,\" I answered. \n\n\"More,\" she ordered, slapping my ass and stopping fucking me with the cock buried deep in me. \n\n\"Your complete three hole slut, your live-in, full service maid, your mindless, completely obedient without hesitation pet,\" I listed, wanting to degrade myself and impress her. \n\nHer finger poked my ass as she said, \"I want you to get off again, this time while my finger is buried in your ass.\" \n\n\"Kkkk,\" I whimpered, as her finger penetrated my virgin ass. It wasn't so much a pain, but a slight discomfort. \n\n\"Now, ride yourself to orgasm you double penetration whore,\" she ordered, slapping my ass again. \n\n\"Yes, Mistress,\" I obeyed, moving back and forth. Feeling both my holes get fucked, even if it was by a thin finger, was a surprisingly amazing turn-on. \n\n\"Tomorrow it will be Master's cock in that ass of yours,\" she promised. \n\n\"I can't wait,\" I replied, as I fucked myself, a mixture of excitement and trepidation at having Master's much bigger cock take my anal virginity. \n\n\"I know, my slut,\" she said. \n\nAs I got used to her finger, I finally got into a rhythm and reached my second orgasm after a few more minutes of unique double penetration. \n\nAs I collapsed forward, she pulled out and flipped me onto my side. She got off the bed, returned a minute later and said, as I felt warm liquid between my ass cheeks, \"Fuck it, I want to take your anal virginity.\" \n\nMy eyes went big as I felt the cockhead of her dick poke my rosebud. I remained silent and nervous as she cupped my breast and began slowly sodomizing me. \n\nUnlike the finger, the cock being much wider, I felt an instant burn in my rectum, yet it was countered by the orgasm that was still coursing through me. \n\n\"So tight,\" she whispered, as she kissed the back of my neck. \n\n\"I hope so,\" I joked, trying to focus on the orgasm rather than the anal intrusion. \n\n\"You understand, Lily, you are moving in for good,\" she clarified. \n\n\"Yes,\" I nodded, as the pain seared slightly more as the cock went deeper than her finger ever did. The reality was I had never enjoyed sex more than I had tonight and I was, as absurd as it sounds, in complete love with this woman. Hard to explain, but the truth. \n\n\"Good girl,\" she purred, as our bodies met, the cock all the way in. \"I want to take you places you have only imagined.\" \n\n\"You already have,\" I admitted. \n\n\"Oh, Lily, my beautiful pet,\" she said, \"we have barely touched the surface of your complete submission.\" \n\nThe words 'complete submission' intrigued me, but I was willing and able and ready for the journey. \"I'm yours completely, Mistress Jasmine. Mind, body, heart and soul.\" \n\nI wanted to kiss her, but the situation was awkward and instead I asked, \"Will you ream my asshole now?\" \n\nShe laughed, \"I'd love to.\" \n\nUsing my small breasts for grip, she began slowly fucking my ass. \n\nI moaned, even as the pain continued, \"Pound my ass, Mistress, use me as the dirty fuck toy you have always envisioned.\" \n\nAnd she did. \n\nAfter a few minutes of hard ass fucking, she ordered, \"Now rub your clit, slut, I want you to get off from getting ass reamed.\" \n\n\"Yessss, Mistress,\" I nodded, as I immediately moved my hand to my pussy and began frantically rubbing. \n\nEventually, a third, much weaker, orgasm hit me and she pulled out, took off her strap-on, rolled me onto my back and straddled my face. \n\nI licked her to a second orgasm, this time taking my time as I leisurely lapped her pussy perfection. \n\nAfter she coated my face with her second orgasm, she got off me and said, \"For this one night you can sleep with me, but after that you will sleep in your own room.\" \n\n\"Thank you, Mistress,\" I nodded, completely exhausted as I licked my lips for any remaining pussy cum. \n\nI crashed wrapped in her arms, feeling exhilaration at the decision I had made. \n\n... \n\nNext morning, I woke up and walked to the kitchen, my body aching. \n\nShe looked at me and said, clearly annoyed, \"What are you doing on two feet?\" \n\nI immediately dropped to my knees, realizing that last night's intimacy was just that, last night. \n\nShe put a bowl/plate on the floor under the kitchen table and said, \"Your breakfast is ready.\" \n\nI gasped. \n\nYet, understanding my role as a pet, apparently both literally and physically, I crawled under the table. \n\nFamished after last night's calorie burning marathon, I began eating the porridge. \n\nAfter breakfast, where she didn't talk to me as she read the newspaper, she snapped her fingers and wiggled her foot as she began chatting with her mother. \n\nI moved closer to her and rubbed her stocking-clad feet, although she was already dressed and showered and in new clothing. \n\nShe chatted with her mother for a good twenty minutes before hanging up and saying, \"Go shower. Your clothes for today are already waiting for you.\" \n\n\"Yes, Mistress,\" I nodded, before crawling the entire way to the bathroom. \n\nOnce showered, I saw what she had laid out for me: a plaid skirt, black thigh highs, a blouse and surprisingly a thong (although no bra). \n\nI got dressed and looked in the mirror. She called out from wherever she was, \"And put your hair in pigtails.\" \n\n\"Yes, Mistress,\" I replied, realizing she was trying to make me look like I was in high school. \n\nOnce my hair was done, I looked in the mirror, indeed looking like a very cute, sexy, school girl. A rush of excitement coursed through me as I wondered what she had in store for me this afternoon. \n\nThe afternoon was a shopping spree. She took me to hip little shops that catered to teenagers and I bought a lot of sexy, slightly slutty, clothing. \n\nI got tons of looks, as my thigh highs were completely visible with the short plaid skirt and it turned me on. I loved having men and women stare at me; I loved that they thought I was just a slut...which I am. \n\nWe then went to an adult store where Mistress purchased a collar and leash for me as she explained to the saleswoman, a woman in her fifties, \"My pet is still in training.\" \n\nThe saleswoman, not finding it strange, nodded, \"A good pet takes a year to completely train.\" \n\nIt was surreal to listen to them talk about me as if I wasn't there, yet equally a turn on...which could be attested to by my very wet panties. \n\nMistress also bought me a vibrating egg and shocked me by putting it inside me right in front of the saleswoman. \n\nWhen she was done, I said, \"Thank you, Mistress,\" wanting, for some reason, to impress this stranger. \n\n\"You're welcome, slut,\" Mistress said, before going to the till to purchase the items. \n\nWe were walking out of the store and to the food court when I felt my cunt began to vibrate. \n\nI looked to Mistress, who was smiling with a small remote control in her hands. \"This is fun.\" \n\n\"You don't know that half of iiiiiit,\" I replied, as she increased the speed. \n\n\"You are going to have an orgasm in the mall in front of all these people,\" she informed me. \n\n\"Realllllly?\" I asked, surprised by the task. \n\n\"Realllllly!\" she mocked. \n\n\"It won't take lonnng,\" I said, the vibrations giving me great pleasure. \n\nWe walked for a minute and stopped at a music store when I heard someone say, \"Lily, is that you?\" \n\nI froze. \n\nThe voice behind me was undeniably recognizable. \n\nIt was my boss. \n\nI turned around, the egg turned even higher as Mistress smiled, and greeted, \"Hi, Mrs. Pilson.\" \n\nShe gave me a strange look and said, \"Quite the outfit, is it a dare or something?\" \n\nI wasn't sure what to say, but decided to just tell the truth, \"It's what Mistress Jasmine put out for me to wearrrrr.\" \n\n\"Mistress Jasmine?\" my boss questioned, looking as confused as she should. \n\n\"Yes, Mistress Jasmine,\" Mistress repeated from behind me. \n\n\"Oh,\" Mrs. Pilson said, seeming to put two and two together. \n\n\"She is just in her early training,\" Jasmine explained. \n\nLooking Jasmine over, Mrs. Pilson said, \"Well, that explains what you were doing under the table that one night.\" \n\nMy face burned red. \n\n\"Yes, that was in the very early testing to see if she was worthy,\" Mistress Jasmine said. \n\nMrs. Pilson, surprising me, said, \"If I would have known you were submissive, Lily, Jake and I could have had a lot of fun with you this year.\" \n\nI stammered, \"W-w-what?\" \n\n\"Oh honey, you really are naive,\" she said, shaking her head. \"If you ever are willing to share your pet, please let me know.\" \n\nMistress Jasmine nodded, \"Oh, that I will.\" \n\n\"Great seeing this side of you, Lily,\" Mrs. Pilson said, leaning in and kissing me on the lips. \n\nI stood there paralyzed in shock, Even after all that had transpired, I never fathomed my over sixty year old Greek boss would be kinky. \n\nJasmine laughed, once she was gone, \"Well, that was enlightening.\" \n\nMy orgasm was building as she turned the vibrator on what must have been its highest level. \"Aaaaaaah,\" I whimpered. \n\n\"Do you want to let your bosses fuck you, my slut?\" she whispered. \n\n\"If you want me tooooooo,\" I moaned, trying not to make it look obvious I was about to orgasm in the middle of a music shop. \n\n\"Go ahead, my slut, come right here, right now,\" she whispered, as the vibrations in my cunt continued. \n\nClosing my eyes, I just let go and allowed the orgasm to hit and did it ever. \"Holy fuck,\" I said, loud enough to get the attention of all those in the store when my orgasm hit a few moments later. \n\nWhen I opened my eyes, I realized Jasmine was gone and I had a dozen people staring at me. \n\nFeeling suddenly mortified, I put my head down, even as my orgasm flooded my panties, and walked out of the store. When I looked up, I saw Jasmine smiling while she sat at a table in the food court. \n\nI walked to her, sat down and she asked, \"How was that?\" \n\n\"Exhilaratingly mortifying,\" I answered, knowing it was a strange oxymoron, as the vibrating stopped. \n\nShe laughed, \"Nice oxymoron.\" \n\nWe had an early dinner, while a few people stared at me (both because of my attire and the few who had seen me have my orgasm in a public place). It was, as I said, exhilaratingly mortifying...I was indeed becoming the complete obedient slut she wanted to be. \n\n... \n\nWhen we finished eating and doing a little more shopping, we headed back to her house. She turned the egg back on and let me be teased on low the whole drive home. \n\nOnce inside, my pussy begging for attention again, I immediately fell to my knees in my subservient position and awaited instructions. \n\nShe smiled, \"You are already getting the grasp of your role, my pet.\" \n\n\"I've always been told I'm a quick learner,\" I smiled back. \n\n\"Take off your heels and wait by the door on your knees, Master should be home soon and would likely enjoy a welcome home blow job from his new pet,\" she ordered. \n\n\"Yes, Mistress,\" I obeyed, curious to see how Michael fit into this unique new arrangement. \n\nI waited for about ten minutes when the front door opened and he smiled, \"Well, hi.\" \n\nI looked up at him and asked, \"May I suck your cock, Master?\" \n\n\"Well, what a great way to be welcomed.\" He chuckled. \n\n\"I'll take that as a yes, Master,\" I smiled, quickly fishing his cock out and eagerly taking it in my mouth. \n\n\"Shit,\" he groaned, \"this is the best welcome home ever.\" \n\nJasmine, appearing out of nowhere, said, \"I think I've given you lots of good welcome's home.\" \n\nHe laughed, making his cock vibrate in my mouth slightly, \"Never when I walked in the door.\" \n\nJasmine moved in and kissed him, while another woman, me, sucked his cock. \n\n\"She is yours all night,\" Jasmine said, \"although I did promise her you would fuck her ass.\" \n\n\"If I have to,\" he joked. \n\n\"She has three holes, use them as you wish,\" she replied. \n\nShe walked away and he groaned, \"Shit, you really are a great cock sucker.\" \n\nI moaned on his cock in response, the egg still vibrating on low. \n\nAs his groans got louder, he grabbed my pigtails and began fucking my face. \n\nBeing used so roughly greatly turned me on. I was just a vessel for his pleasure. \n\nA couple of minutes later, his balls bouncing off my chin, as slobbering sounds echoed, he deposited a load down my throat. \n\nPulling out, he apologized, \"Sorry, I couldn't resist the pigtails.\" \n\n\"My face is yours to fuck however you wish,\" I replied. \n\n\"This is crazy,\" he said. \n\n\"That I must concur\" I nodded. \n\nHe smiled and asked with a look of concern, \"You sure about this?\" \n\n\"I've never been more certain about anything in my life,\" I answered, licking a drop of cum that was about to drip to the floor. \n\n\"Well, I'm not going to protest,\" he said. \"But I need to have a shower.\" \n\n\"Yes, Master,\" I nodded, as he walked away, just as the egg shut off. \n\nI waited a few minutes before crawling into my room. Feeling fatigued, I crawled onto my bed and crashed almost instantly. \n\n... \n\nI was woken up by Jasmine who ordered, \"Go to the bathroom if you need to and then meet us in our room.\" \n\n\"Yes, Mistress,\" I nodded, trying to regain my surroundings. \n\nI went to the washroom, then crawled to the bedroom where I was first sodomized last night. \n\nEntering the room, I crawled in to find Jasmine slowly sucking her husband's cock. \n\nMichael said, \"Come join us, our pet.\" \n\n\"Yes, Master,\" I nodded, crawling to them and then onto the bed. \n\nJasmine looked up and asked, \"Ready to get ass fucked?\" \n\n\"Nervous but ready,\" I answered honestly. \n\n\"Well, we're going to make this an evening you will never forget,\" she smiled, getting off the bed. \"Oh, get undressed, my pet.\" \n\n\"But keep the thigh highs?\" I asked, although I knew the answer. \n\n\"Of course,\" she laughed, \"you do know your Mistress.\" \n\nI began undressing as Michael watched me. I decided to make it sexy for him. Once my shirt was off, I tossed it playfully at him. \n\n\"You're ridiculously sexy,\" Michael said, staring at my tits. \n\n\"Be careful what you say,\" Jasmine called from the closet, although she was clearly teasing him. \n\nI then lay on my back and pulled my skirt down and asked, \"Want to finish taking this off for me, Master?\" \n\n\"Sure,\" he laughed, pulling it off my nylon legs. \n\nHe tossed it aside and then moved over me and slid my very soiled panties down too. \n\nI asked, \"Can I take the egg out?\" \n\n\"I forgot it was in there,\" Mistress laughed, as she returned, again wearing her strap-on. \n\n\"Is that a yes, Mistress?\" I asked. \n\n\"Michael can,\" she replied. \n\n\"If I have to,\" Michael sighed dramatically and, of course, playfully. \n\nHe moved his fingers to my wet pussy and slid a couple in. I moaned as he struggled to grab the egg and pull it out. \n\nJasmine quipped, \"He's never been really good exploring inside a pussy.\" \n\n\"Hey, it's not my fault the g-spot is a myth,\" he protested, as he finally got it out. \n\nHe got off the bed and put the very wet egg on the dresser. \n\nMistress said, \"Stay on your back, my pet. But put your legs up in the air and spread them wide for me.\" \n\n\"Of course, Mistress,\" I obeyed, looking forward to getting fucked. \n\nMistress Jasmine got on the bed and asked, \"Michael, do you want to watch me fuck our pet?\" \n\n\"God, yes,\" he nodded, stroking his hard cock. \n\nShe moved between my legs and rubbed her fake dick on my cunt. \"Ready for a good hard fucking?\" \n\n\"I'm always ready for a good hard fucking,\" I smiled back. \n\n\"That I imagine is true,\" she smiled, as she slid the cock deep inside me. \n\n\"Yesssss,\" I screamed, loving the feeling of a cock in me, real or not. \n\nI cupped my breasts and just enjoyed the hard fucking as my orgasm began rising. \n\n\"Don't you dare orgasm,\" she ordered, as she slammed into me, making my whole body bounce with each forward thrust. \n\n\"Okay,\" I whined, not wanting another orgasm denial. \n\n\"This is fucking hot,\" Michael said, as he moved back onto the bed. \n\n\"Ready to be double penetrated?\" Jasmine asked. \n\n\"I'm ready for anything and everything,\" I answered. \n\n\"Good answer,\" she smiled, as she pulled out, laid on her back and ordered, \"Straddle my cock, my dp slut.\" \n\nI rolled off my back and straddled her cock. \n\nMichael moved behind me, just as I engulfed the fake cock. He poured some lube down my ass crack and ordered, \"Bend over a bit more, my pet.\" \n\n\"Yes, Master,\" I obeyed, leaning forward more and cupping both Jasmine's firm tits. \n\nI closed my eyes, as I felt his cock slowly penetrate my ass. I was instantly thankful for yesterday's breaking in at the hands of Mistress Jasmine as the pain, although there, wasn't as extreme as last time. \n\n\"So fucking tight,\" Michael groaned, as he slowly slid inside my ass. \n\n\"So fucking big,\" I moaned back, as his cock filled me. \n\nJasmine added, \"Such a fucking slut.\" \n\n\"And slave,\" I moaned, as both my holes were suddenly completely filled. The feeling was utterly strange. A euphoria that was both intense and liberating. \n\nYet, I wasn't sure what to do next. \n\nThen he began slowly fucking me, creating a new sensation. ",
        "\"Just let him fuck that ass of yours,\" she ordered. \n\nI laughed, \"As if I have a choice.\" \n\n\"Touch\u00e9,\" she smiled. \n\nMy hands were still on her tits as her husband slowly fucked me. \n\nAfter a couple of minutes, Jasmine ordered, \"Now, it's your turn. Ride both cocks.\" \n\n\"Okay\" I nodded, coordination not my greatest strength. I began moving slowly, struggling to get into any sort of rhythm. \n\nAlthough it took a while, I finally began to get in a flow, although mostly I was fucking Michael, while Jasmine's plastic cock stayed buried in my cunt. \n\nSoon I was moaning, and Mistress asked, \"Do you want to come, my ass slut?\" \n\n\"Yessss,\" I moaned, my orgasm building quickly. \n\n\"And...come,\" she demanded a moment later as she bucked her ass up, creating a new pleasure and I instantly erupted. \n\n\"Fuuuuuuuck,\" I screamed, collapsing onto her. \n\n\"On your back, slut,\" Michael ordered. \n\nI rolled awkwardly onto my back, my orgasm still flooding out of me. \n\nHe grabbed my ankles, moved my feet to his cock and began pumping his cock in the soles of my feet. \n\nThis was new. \n\n\"My hubby loves stocking-clad feet,\" Jasmine said. \n\n\"Explains a lot,\" I smiled, as I was giving a foot massage without actually doing anything. \n\n\"This is the way he gets off the best,\" she added, just as he groaned, moved my feet down to his cock and coated my stocking-clad feet with cum. \n\n\"He also loves coming on nylon-clad feet,\" she added. \n\n\"Apparently,\" I giggled, as I stared at my cum covered feet. \n\n\"Eat his cum,\" she ordered. \n\nI moved my foot to my mouth and licked the cum off my foot. \n\nOnce I had retrieved all the cum, I replicated the cum retrieval on the other foot before I ended up having Mistress straddle my face. \n\nThe night ended with Michael shooting one more load in me, doing it the old fashioned way, filling my cunt with his cum. \n\nAs he did, Jasmine quipped, \"By the way, my pet, Michael would love to have one more child.\" \n\nTHE END...except for the epilogue. \n\n... \n\n... \n\n... \n\nEPILOGUE: \n\nOf course, I quit my job. \n\nOf course, I sold my home. \n\nOf course, I got pregnant. \n\nA year later, I was the mother of a baby girl named Sarah, in honor of Jasmine's Mistress. \n\nA year later, I was a completely trained slave. \n\nA year later, I was the main attraction at Sarah's sorority house for an evening. \n\nI crawled into a room full of sorority sisters in my collar and leash, nipple clamps on my tits, and wearing only the obligatory thigh high stockings. \n\nThat night, I serviced dozens of sorority girls' sweet cunts, I was double penetrated by strap-on cocks, and I was fisted until I actually passed out, out of pleasure. \n\nWhen I woke up, Sarah, who had a freshman sorority sister buried between her legs, said, \"Ready to go to the Le Chateau Club?\" \n\n\"Of course, Mistress,\" I nodded, always enjoying the infamous lesbian club where anything went. Even though it was midnight, even though I had pleasured and got off over two dozen girls already, my mouth instantly watered at the thought that I could soon be eating more pussy...particularly the heavenly cunt of Big Rosie. \n\nBut that...is...a whole different story. \n\nTHE END...for sure this time."
    ],
    "authorname": "silkstockingslover",
    "tags": [
        "anal",
        "stockings",
        "threesome",
        "slut",
        "lesbian",
        "submissive",
        "teacher",
        "voyeuristic",
        "strap-on",
        "curious"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/journey-of-a-submissive"
}
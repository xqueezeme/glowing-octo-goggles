{
    "title": "Secret Smiles and Three Little Words Pt. 33",
    "pages": [
        "Chapter 39 \n\n\"Good afternoon,\" the desk clerk said to them as they approached. \"Welcome to the 2 inn 1, Kinsington.\" \n\n\"Good afternoon,\" Gavin smiled weakly. The trek through the brush had exhausted them. Their bodies demanded two things. A hot shower and a soft bed. And they were barking for them right now. \n\n\"Dr. Gavin Steward,\" Gavin told the man wearily. \n\n\"You look exhausted,\" the clerk told them as he punched in the name. \"Long flight?\" \n\n\"Not yet,\" Alex smiled. \"Long road from Tanzania.\" \n\n\"Wow!\" the man marveled. \"Missionaries?\" \n\n\"Doctors,\" Gavin told him. \"Working part time with Doctors without Borders.\" \n\n\"Much needed up there,\" the clerk nodded as he pulled the electronic room key to program it. \n\n\"Absolutely,\" Alex agreed looking at the fine amenities of the hotel. \n\nIt was a stark contrast of what they just had for the last two weeks. For two weeks they had the bare minimum. The necessities, and not the necessities most people would think of. Hot showers, hot foot, clean rooms. Those were a luxury in the hell they just came from. \n\nNecessities included, water, food and a place to sleep. The bed they had was a luxury as well, but even it wasn't as comfortable as the mattress they had at home, or even the mattress they were sure to get in this opulent hotel. \n\nThis hotel promised to return them to what they were used to, the lobby alone was luxurious, inviting and cool. The air conditioning making the difference from outside heat to cool comfort inside. \n\n\"Your room is ready,\" the clerk told them with a smile. \"If there is anything you need, just let us know.\" \n\n\"Thank you,\" Gavin nodded. \n\nThey found their room which was more like a bungalow than a hotel room. They dropped their bags on the sofa and looked out the back terrace. The pool had a soft glimmer of sunlight reflecting off of it. It looked really inviting. \n\n\"Perhaps a shower first?\" Gavin suggested as the two of them looked at the water in a exhausted state. Alex nodded. \n\n\"When is our flight?\" Alex asked him. \n\n\"A couple of days,\" Gavin frowned. \"I figured we would need a day to recoup from the drive, then I thought we would take another day to see some of the sights.\" \n\n\"Always thinking ahead,\" Alex admired. \"You want to shower first?\" \n\n\"Kinda thought we would shower together, sort of a, you wash my back, I'll wash yours?\" Gavin grinned. \"If you are up for it that is, I would understand if you just want to shower and hit the bed for a good night's sleep of not worrying about refugees, shots or bugs!\" \n\n\"No,\" she shook her head. \"I definitely need some help in the shower!\" she grinned. \n\nTurning on the hot water the steam rolled out of the top of the stall. The shower was a stand-alone type, with tile walls and was large enough for both of them to enjoy. There was a small seat in the corner of it and she smiled as the hot water hit her body. \n\nIt was the first hot water to hit her body in over two weeks. Showers at the camp were from water poured into a makeshift shower consisting of just a curtain and a big bag that held water. You would have to hold the nozzle open to wet your body. Then soap up without water, then rinse again holding the nozzle open. The water warmed by the African sun so it was never really hot, just lukewarm. Unless you showered in the morning, then it was ice cold it seemed. \n\nNow it was scalding hot, but she didn't care. She had two weeks of grime that the makeshift shower couldn't clean. This shower had the water needed to get her back to human! She closed her eyes and let the water cascade down her naked body, starting with her head as she dropped it back and let it hang there. \n\nShe felt his hands on her but she didn't jump. They were soft and gentle. She lifted her head and looked to him. Draping her arms on his shoulder as they stood there in the hot water. Her head on his chest listening to his heart beat against her ear. The hot water running over them. \n\n\"I missed this,\" she admitted. \"Hot water.\" \n\n\"Yeah,\" he agreed. \"It's amazing how the creature comforts stand out after you lived without them for a while!\" \n\n\"Agreed,\" she smiled as he began to massage shampoo in her hair. She let him pamper her with her eyes closed. \n\nHis lips on her chin caused her mouth to smile. He nibbled gently while he worked her hair, the soap foaming and running gently down her back with the water from the shower. He tilted her head back with his lips and let the water rinse her hair as he gently nibble on her throat. \n\nThe conditioner was next, while he gently worked her hair, she let her hands wander his body. His firm muscles flexing under her fingers while he massaged her scalp and hair with his hands. Her eyes fluttering open for a few brief seconds only to close them in the gentleness of his touch. \n\nHe began to wash her body, starting at her neck and working down. Her body responding to his touch as he went. Her nipples hardening when his fingers brushed them as he lathered her up. Cupping her firm breasts, then using is thumb to rub around her taut nipples. \n\nHe sat on the corner step while he began to wash her stomach, his hands gently massaging her skin on her hips then her upper thighs. Her legs opening willingly letting his hands soap up her sex then her inner thighs causing her to sigh blissfully at his gentle touch. \n\nDown her legs to her calves, lifting one foot then the other. Lathering as he went. He produced a razor and spread shaving cream on her legs. This was something she didn't do very well in the bush. Now she watched him gently shave her legs lovingly. His hands steady and loving. Making sure he shaved them completely. \n\nHe gently turned her, beginning to work her from the back. His hands lingering on her ass made her smile. \n\n\"What are your thinking?\" she teased as he began to kiss and nibble on her firm cheeks. His hands pulling them apart so he could gently stick his tongue into her taboo, making her gasp. He continued to wiggle his tongue in her causing her body to warm and shudder slightly. \n\nHe pulled his tongue out and she whimpered at his exit. She wanted him to continue, but he moved on, soaping her ass before massaging and washing her back at the same time. Soon he had her fully lathered and he was standing again. His hardened cock pressing tightly against the crack of her ass, teasing her with thoughts of her birthday. \n\nHe turned her and rinsed her back off, tilting her head to rinse out the conditioner in her hair. For the first time in two weeks, she was clean. Really clean. Squeaky clean as her hair was completely washed and conditioned. Her body was steam cleaned with the nearly scalding hot water that lasted forever. Her legs properly shaved as she liked them. \n\nShe draped her arms around his neck, her eyes catching a glimpse of her ring which made her smile. It seemed to captivate her anytime it caught her eye and it did often, especially when the light would hit it. It was just the most perfect ring she could imagine. \n\nIt's bright square stone, surrounded by smaller stones. Giving it a halo look. The silver band was shiny and bright. The stones casting off sparkles anytime she moved it. It covered at least half her finger, knuckle to knuckle. It was much larger than she was comfortable with, but she wasn't about to complain! \n\n\"I can't believe I'm going to be your wife,\" she said softly. \"I'm going to be Mrs. Gavin Steward!\" \n\n\"Why?\" he smiled. \n\n\"Things like this...I'm just not used to them! Ever since you came into my life it has been one fantastic dream after another!\" she raved. \n\n\"You...are the dream,\" he countered. \"A dream I hope I never wake from.\" \n\n\"I have a couple of requests,\" she whispered. \"Sir.\" \n\n\"And they are?\" he smiled. \n\n\"I would like to go off my birth control,\" she told him. \"I want to have your baby.\" \n\nHe stroked the side of her face as he smiled down on her. He hoped she wanted a baby soon. He did. \n\n\"A month before the wedding,\" he conditioned. \"I don't want anybody to accuse us of having to marry because of anything other than the love we have for one another.\" Alex frowned and turned her head. He hooked his finger under her chin and turned her back to look at him. \n\n\"What?\" he asked her. \n\n\"My gynecologist said that it could take months for the birth control to clear out of my body,\" she said softly. \"Longer sometimes depending on how long I have been taking them.\" \n\n\"I understand,\" he nodded. \n\n\"That means it could be years before we have a baby,\" she pointed out. \"I don't want to wait that long.\" \n\n\"What happens if you get pregnant right away?\" he asked her. \"Before the wedding?\" \n\n\"Then we fly to Vegas,\" she grinned. \"Nothing is more important to me right now than pleasing you in a way no one else has. That is giving you a child. I don't give a damn what anybody thinks of why we got married. We have the truth, and that is we are hopelessly in love with one another.\" \n\nHe stared into her eyes as he thought about it. \n\n\"Please?\" she begged softly. He smiled and shook his head, she was just too perfect to deny. \n\n\"As you wish,\" he agreed. \n\n\"Thank you Sir!\" she said happily. Nearly tapping her feet in excitement in having the honor of his child. A child they would raise together, showering it with love. \n\n\"Your second request?\" he asked shaking his head as he recognized her excitement. \n\n\"In a few minutes,\" she told him. \"Let me bathe you.\" \n\nShe took her time, slowly lathering his hard body with soap, her fingers running along his muscles. His body responding to her fingers. Her hands meeting to take his cock in them, tugging on it gently as her soapy hands pulled on him bringing him to a full erection in the shower. Her hands drifting under him to massage and clean his balls. \n\nToweling one another off had their bodies disregarding the pleas from their brains to sleep. They would sleep after they had satisfied the one primal need that wouldn't be denied at this time. That need for one another. \n\nShe left him and went to her bag and retrieved something and went to the bed. Kneeling in front of him she lowered her head and held out the flogger. He smiled. \n\n\"I angered you, by forcing my way with you to the village,\" she told him with her head down. \"I would prefer your hand, as I desire to have your hands on me, but I understand you may not wish to make this pleasurable.\" \n\n\"I want to make everything pleasurable,\" he told her taking the flogger out of her open palms. \"So how about both? Ten with my hands, ten with the flogger.\" \n\n\"Twenty sir?\" she asked him. She was thinking ten. \n\n\"What you did was a repeat offense,\" he pointed out. \"Punishable by twenty.\" He said sternly. \"And now another twenty for a second offense of questioning me.\" \n\nFuck, she thought to herself. Way to go! \n\n\"I'll start off with twenty for right now,\" he told her. \"Then another twenty tomorrow. Rise and assume the position.\" \n\n\"Yes Sir,\" she said softly standing and putting her hands on the bed. She shifted her feet to give her a firm base and prepared herself. \n\nThe crackle of the flogger on her skin had her flinching and hissing. \n\n\"One,\" she said firmly. Again the crackle of leather on her skin which caused a sizzle of her flesh. \n\n\"Two,\" \n\n\"Three,\" \n\n\"Four,\" she continued to count them out. \n\nHer fingers clutched the covers tightly as the pain began to build from the center of her cheeks outward, like a small brush fire catching and exploding. After ten he abandoned the flogger and moved along side of her and sat. \n\n\"On my lap,\" he commanded. She released the covers that were clutched in her hand and stood. The sharpness of the sting in her cheeks had her hissing slightly. She stretched out onto him, her body laying over his thighs, her ass tilted slightly up. Her face on the bed. \n\nHis hands gently moved across her cheeks, feeling the heat radiate off them. He let his fingers dip between her legs and felt her sex. It was hot and moist. She blushed slightly as he felt how excited she was to be spanked. \n\nHis hand lifting off her skin let her know he was about to strike. The loud clap of his hand striking her backside filled the room and had her jumping as the heat doubled in the one strike. \n\n\"Eleven,\" she whispered. \n\n\"Louder,\" he commanded. \n\n\"Twelve!\" she said louder after his hand caused her ass to sting with a prickly feel of needles. \n\n\"Thirteen!\" she gasped after the next strike. She felt a small trickle down the inside of her thigh. \n\n\"Fourteen!\" \n\n\"Fifteen,\" \n\n\"Sixteen!\" \n\nHe finished his twentieth with a firm clap. Harder than the previous nine with his hand causing her to yell out in surprise. It also let her know, he was taking it easy on her. Her cheeks were now a bright rosy pink. Nearly a dark red. \n\n\"Sir,\" she whispered as he rubbed her backside gently with his hand. \"Will you take a picture and show my how my butt looks?\" She lifted off him and then returned to the position of palms on the bed. He took a couple of pics with the camera and showed them to her. \n\n\"I know I shouldn't be happy,\" she told him with a wicked smile. \"But that turns me on to see my ass like that!\" \n\nShe took the flogger back to her suitcase and returned it to the pouch. She then pulled something else out and returned to the bed. She crawled on the bed, leaving her ass to him. He admired her from behind. \n\nShe handed him the lube she had kept in her bag. \n\n\"Sir,\" she smiled seductively at him. \"Will you please, fuck my ass?\" He looked at her with a sinister smile crawling across his face. \"Please?\" she begged softly. \n\n\"You are just so incredibly sexy when you beg like that!\" he told her. \"I have concerns.\" \n\n\"I do not,\" she countered. \"Last time I know you were happy, but now I want you to fuck my ass. I want the wolf to be fully satisfied, not holding back. I want to feel you the entire flight back! \n\n\"Lay on the bed,\" he told her. She flicked her brow wondering what he was going to do but did as she was told. \n\nHe crawled in behind her and rolled her to her side so he could 'spoon' her from behind. He began to slowly nibble on her neck and shoulder as he lay there. He took some of the lube in his hand and gently rubbing it into the valley of her ass. His finger rubbing the outside of her anus slowly before gently putting pressure on it and feeling her ass accept his finger, her anal ring collapsing around his digit. \n\nShe tensed ever so slightly so he didn't move his finger for a few moments, allowing her orifice to adjust to his intrusion there. He began to slide his finger slowly in and out of her causing her to moan slightly. The subtle burning moving to the side after a bit as her body adjusted. \n\nAfter a minute or so of his finger there, he pulled it out and poured lube into his palm and copiously lubed his rock hard shaft. He guided it to her anal ring and held it there for a few moments watching her. \n\n\"Are you sure?\" he asked one last time. His voice breaking slightly with the desire he had for this. \n\n\"I'm ready for you,\" she smiled over her shoulder. \"Fuck my ass please, Sir.\" He nodded and pressed his hips forward forcing his cock to press against the anal ring, meeting the resistance. He continued to apply pressure, watching her carefully. \n\nThe slight 'pop' feel of her ring giving in to his invasion caused her to gasp then hiss as her ass exploded in fire. Her hands squeezing the bed covers as the pain rippled through her body. He stayed motionless allowing her body time to adjust to his size. He continued to nuzzle her gently with his lips. \n\nShe still couldn't believe that even after all the preparation, she was still feeling this burning pain. She hoped it would fade into oblivion like all of her other fears but this one was still affecting her. \n\n\"Are you ok?\" he asked her. \n\n\"I can't believe even with all the anal plugs and everything, this still feels like this,\" she hesitated to say pain as that may stop him completely and she didn't want that. She wanted to feel him again. To watch the pleasure of his desire wash across his face, then out of him and into her. \n\n\"Do you want me to stop?\" he asked her. \n\n\"No,\" she said firmly. \"I want this, I'm just surprised.\" \n\n\"Little One,\" he said softy. \"This may always hurt a little, your anus was not designed for sex. It may always be uncomfortable for you.\" \n\n\"I know,\" she smiled. \"But you love it so much.\" \n\n\"I love you so much,\" he said kissing her. \"Do you want me to stop?\" \n\n\"No,\" she said firmly. \"I'm just going to ask the wolf for a little mercy?\" She looked over at him and he shook his head with a smile. \n\n\"I am always going to have your safety and pleasure in mind,\" he told her. \"So, yes, I'm going to take it easy, but I do appreciate the desire you have to please me!\" He kissed her lips and began slowly thrusting into her, causing her to hiss. He tilted the bottle of lube to pour some more on her and that seemed to help. He began a steady thrust into her, watching her expression. \n\nAs he began a steady rhythm she began to realize, this session was not as painful as the last. Perhaps she was getting used to it. Then she remembered he warned her there were more comfortable positions than the one she used that night she tied him to the bed. Perhaps that was a factor. \n\nLaying here spooned up, his cock in her ass in a slow steady rhythm, his lips biting her shoulder gently. She was relishing in the thought that he was going to cum hard again. She was going to please him, more than she normally did. Perhaps that wasn't true, but she imagined it was. He was an ass man after all. \n\nHe slid his hand up her body to her breasts and began to tug on her nipples. Pinching them sharply causing her to gasp as he held his fingers pinched, she winced and looked down at his thumb and forefinger pinching her nipple. Squishing it in between. First one, then the other. Holding it tightly for a few seconds before going to the other. \n\nHis hips began to drive farther and faster into her causing to yelp, his hand on her throat had her eyes fluttering closed. His grip began to squeeze around her. The sides mainly, only slight pressure on the front of her throat. \n\nShe began to gasp audibly as his cock reached deeply into her, all the while his hand held her throat causing her to shudder in pleasure. His pressure on her throat, increased anytime the speed of his hips did. \n\nThe sharp burning in her anus never subsiding, but she adjusted to the constant fire there. She turned her eyes as best she could to look at him, but his hand on her throat kept her from turning her head to look at him. His mouth was locked on her upper shoulder, this teeth sharply digging into her sweet flesh. His mouth filling with her soapy taste. \n\nHer hands dug into the covers on the bed, the pain radiating outward from her anus to her entire ass. His body slapping against her cheeks let her know he was fucking her ass pretty hard, but not as hard as he had Elizabeth that night, but harder than she was able to fuck herself on her birthday. \n\nShe reveled in the look in his eyes as he squeezed tightly around her throat, his hips driving hard then suddenly stopping as he drove to his maximum depth, she turned her eyes as far as she could, but his hand kept her from looking fully. She saw enough of the expression to make her smile as his cock bucked against her tight lining as he filled her with his cum. His growl letting her know he was immensely please to deposit his seed in her ass. \n\nYes it hurt, not as bad as the last time, but it still hurt. His expertise obviously helped, the lube for sure, and the way he positioned her. All helped to make this anal experience better. While she didn't get to cum, she reveled in the knowledge that he fucked her ass. That he came hard. That he was fully satisfied. \n",
        "He gently released her throat and she could take a full breath. She didn't realize how much he had restricted her from breathing until he let go. She held onto his hair as he suckled on her neck in his emotional discharge. His breathing coming back to him from his excitement. \n\nHe slipped from her causing her to hiss, she watched his sinister smile slither across his face as she did. So he did take some pleasure in her pain. She knew he was only slightly sadistic he said. Her ass was now on fire from his cock, but she loved the way his eyes sparkled in satisfaction. It made it all worthwhile. \n\nHe returned with a towel and gently cleaned her up with a warm wash rag and the towel. She grimaced as he wiped her clean of lube and cum that had leaked out of her. She held the rag to her backside and excused herself to the restroom. \n\nShe had to empty herself, her body was demanding it. Not that she was going to be able to go fully for a day or two but as she sat there she realized all she had been through, and how happy she was. She was now able to please him in every fashion. This had her smiling, and emotionally she was content. Now her body was demanding sleep. \n\nShe crawled up next to him and he wrapped his arms around her and pulled her tight to his body. \n\n\"Are you ok?\" he asked her. \n\n\"I'm better than ok,\" she assured him. \"I'm so far in the clouds of happiness I have lost myself completely.\" He kissed her neck, they were both asleep in a matter of minutes. She wrapped within his arms. He wrapped within her love. Both content.  \n\n*** \n\nChapter 40 \n\nShe stared at it on the plane, her head nestled softly on his shoulder. She was still in awe. Not only the ring, but the mere fact he asked! She hadn't even started thinking about marriage. Baby yes, but not marriage. She thought about how twisted that was! She was completely content with what they had. Now she sat in first class, looking at the largest stone she had ever seen. \n\n\"What kind of ceremony do you want?\" she asked him softly. \n\n\"I'll be quite honest with you,\" he said kissing her head and leaving his lips there. \"I kind of figured you had this figured out. I thought all girls dream of their wedding day, plan it out multiple times.\" \n\n\"We daydream about it, sure!\" she admitted. \"But this has caught me totally off guard!\" \n\n\"Well,\" he smiled. \"I'm doing my job then, I'm keeping you guessing.\" \n\n\"Mission accomplished!\" She said turning her eyes to him. He kissed her nose. \"So you don't have any preferences?\" He shrugged. \n\n\"Look,\" he frowned. \"I really don't have any family to invite or anything like that, I have a couple aunts and uncles, a few cousins but we aren't a close knit family. We mainly exchange cards on holidays and birthdays. In truth all I have is Madelyn and Pavy...and you. So this really isn't about me. This is your special day. This is what you want. As long as I'm waiting there for you, I'll be just fine.\" \n\nAlex thought about it as she stared at the light reflecting off the stone. This man she was with was a simple man. Simple in the things he desired anyway. He liked things to be simple. He liked things to be quiet. Subtle. \n\n\"Why don't we do a little quiet wedding,\" she suggested. \"You know, one of those little vineyard weddings you see?\" \n\n\"I want you to be happy,\" he stressed. \"Don't be worrying about my comfort level and liking things quiet and simple.\" \n\n\"Damn Jedi,\" she smiled with a shake of her head. \n\n\"If you want something,\" he told her. \"It's yours. We are only going to do this once, so let's do it right.\" \n\n\"I really don't want anything to ostentatious,\" she admitted. \"Family, a few friends...I like small.\" \n\n\"Don't want a church wedding?\" he asked her. \n\n\"No,\" she said with a shake of her head. \"Not really religious, I think I would like a little vineyard wedding.\" \n\n\"Sounds nice,\" he said pressing his lips to her head. \n\n\"When do you want to have it?\" she asked. \n\n\"Whenever you want to have it,\" he laughed. \n\n\"I want Pavy there, so we will have to work it so that when he is back in the States,\" she said firmly. \n\n\"That could be a monumental task,\" Gavin pointed out. \n\n\"I'm thinking Nora as a flower girl,\" Alex told him not responding to the difficult task of scheduling a wedding when Pavy could make it. \"Have Lena up with me.\" \n\n\"Sounds nice,\" he smiled letting her plan. \n\n\"My father giving me away,\" Alex smiled. She pictured the look of pride on his face, and the tears he would shed as he walked her down the aisle. \n\n\"Are you going to have Pavy up with you, or Madelyn?\" she asked. \n\n\"Pavy,\" he said softly. \n\n\"So Pavy with you, Lena with me,\" Alex continued. \"A little vineyard with a Justice of the Peace. Simple. Cozy.\" \n\n\"Sounds fantastic,\" Gavin admitted. \n\nHe also knew that this little plan she was coming up with would probably change a couple of hundred times. So letting her plan it out now and not interrupting was the best choice. It would change when she told her family. It would change when she started to look at wedding locations. So what she was planning now would not be the actual wedding. Still he was comforted with listening to her voice as she planned it. \n\nFor the first time in a long time, for as long as he could remember, he was content. Content with his life. Content with the girl by his side. Content with who he was. The short stint in Africa had him realizing that he was capable of doing good. Alex had talked of coming back a couple weeks a year. Perhaps that was possible. That way he could keep his practice and do the good he wanted to do when he first started wanting to be a doctor. This woman nestled into his arm was making all that possible. Giving him the strength to live again. \n\n*** \n\n\"Wow! Look at you!\" Lena gasped as Alex walked into the apartment. \"So dark!\" Lena pointed out Alex's deep dark tan. \n\n\"I know!\" Alex laughed taking her friend into a welcome home hug. \n\n\"So, tell me all about it!\" Lena begged, pulling her towards the living room for the 'therapy' position. \n\n\"I have one thing to tell you,\" Alex smiled. Lena looked to her. \n\n\"I'm going to need a Maid of Honor!\" Alex smiled showing Lena her new piece of jewelry. \n\n\"Holy shit!\" Lena screamed and took Alex into her arms happily. \"I'm so happy for you! And super jealous!\" \n\n\"I'm super happy too!\" Alex smiled as she watched her friend examine the ring. Lena shook her head in a marvel of the large ring. \"So, will you be my Maid of Honor?\" \n\n\"Hell yes!\" Lena assured pulling her back into a hug. \"So come in here and tell me all about your trip!\" \n\nSitting on the couch Alex laughed when Lena pulled her head into her lap. This was the usual position for their conversations that included relationships. Usually that dealt with relationship failures. This was not about a failure. This was about the summit of success. The culmination of love and happiness. Still they used it. It meant no details are to be left out. \n\n\"Well,\" Alex shrugged. \"What do you want to hear first?\" \n\n\"Start at the beginning,\" Lena smiled. \"And don't stop until I hear it all!\" \n\n\"Well, when we first got there we almost had a gun fight with the Nairobi military!\" Alex laughed. This caused Lena's eyes to bug out at the thought of the danger her friend was in. \"But U.N. troops arrived and squashed that. Pavy's dad made sure we were safe.\" Lena nodded. \n\n\"I earned a new name over there,\" Alex said looking up at her. \"The villages started calling me Pipi Malaika, which means 'Candy Angel'.\" \n\n\"Oh my God that sounds absolutely fantastic!\" Lena gushed happily. \n\nAlex went through all the things they went through at the camp. The wounded, the children. She detailed the little safari they went on and showed her the pictures they took. She told of all the shots she gave and how she became pretty adept at working with the skeptical mothers. \n\n\"So,\" Lena smiled. \"When, where and how did he propose?\" \n\n\"We were leaving, we came home through Cape Town as we couldn't go back the way we came because of fighting. It was a two day drive, we stopped at Victoria Falls...he proposed at the base there in the park,\" she said proudly. \n\n\"He was so romantic about it! I was talking about wondering how it would feel at the bottom as all the water was falling, he said he knew how it felt...because he felt it every time he looked at me!\" \n\n\"Go ahead, keep rubbing it in, you little bitch!\" Lena growled. \n\n\"Oh don't worry...I fully intend to!\" Alex smiled. \n\n\"So, we talking a big wedding then?\" Lena asked. Alex shook her head. \n\n\"No, I'm thinking one of those little vineyard weddings,\" Alex told her. \"You with me, Pavy with Gavin. Nora as the flower girl, my dad giving me away.\" \n\n\"When?\" Lena asked. \n\n\"I have to get in touch with Pavy and find out when he is coming back here,\" Alex said twisting her lips. \"Then I will schedule it when he is back in country.\" \n\n\"That actually sounds really nice!\" Lena complimented. \"Simple, I know your man will like that!\" \n\n\"He said I could have anything I wanted,\" Alex told her. \"He said we are only doing this once!\" \n\n\"No, this sounds like you guys,\" Lena said with a shrug. \"You guys are simple and elegant...this matches you.\" \n\n\"I think so too!\" Alex agreed. \n\n\"So when do we go dress shopping?\" Lena asked with a wiggle of her eyebrows. \n\n\"Right now, I'm so tired from the trip,\" Alex frowned. \"Let's shoot for the weekend, that way I get back on a normal sleeping schedule and rest a bit. We are both just totally exhausted!\" \n\n\"I bet!\" Lena agreed. \"When are you going to tell the family?\" \n\n\"I'm going back next week,\" Alex frowned. \"Livy has her divorce hearing, I want to be there for her during that.\" \n\n\"Gavin going with you?\" Lena asked. \n\n\"No,\" Alex shook her head. \"He should stay here and work, he already feels guilty for all the time he is spending away. With my birthday, and Christmas and then Africa! He has spent more time away with me this year than his entire career before!\"  \n\n\"Hey,\" Lena smiled getting Alex to look at her. \"I'm so happy for you, and I love you!\" \n\n\"Thanks sweetie!\" Alex smiled. \"I love you too!\" \n\n*** \n\nAlex finally was home, after telling Lena, then the Mike at the front desk, she was looking forward to spending the next couple of days just enjoying the condo. When there was a knock at the door she frowned because that meant getting up from the couch and she didn't even want to do that! \n\nShe opened the door and found Madelyn standing there. She smiled broadly at Alex letting her know she already knew the good news. \n\n\"Hello baby!\" Madelyn said taking Alex into her arms. \"Congratulations!\" \n\n\"Thank you!\" Alex said with a broad smile. She showed Madelyn the ring and the woman gushed over it. \n\n\"He did good!\" Madelyn complimented. \n\n\"He did,\" Alex said proudly looking at the ring. \n\n\"I'm not talking about the ring!\" Madelyn laughed. Alex tilted her head at the compliment when Madelyn winked at her, letting her know she was the 'good'. \"So have you started planning?\" \n\nAlex guided the woman into the condo had had her sit on the couch with her. Madelyn held her hand the entire way until they were sitting side by side on the couch. \n\n\"Yeah, it's already done,\" Alex admitted with a coy smile. \"We are going to do something simple. Vineyard wedding, just a few family and friends. \n\n\"Really?\" Madelyn said losing part of her smile. \n\n\"Gavin likes simple, you know that,\" Alex pointed out noting the loss of her smile. \n\n\"This is your special day,\" Madelyn pointed out. \n\n\"This is our special day,\" Alex told her. \"I'm just happy he is going to be there, so I don't want to make him too uncomfortable.\" \n\n\"Screw him!\" Madelyn barked. \"You deserve to have a big wedding!\" \n\n\"I don't really have that many people to invite,\" Alex explained. \"Just family, a few friends.\" \n\n\"Sweetheart,\" Madelyn frowned. \"This is going to be a big deal in our world, there will be a lot of important people that will want to be there!\" \n\n\"I don't know any important people besides you!\" Alex corrected. \n\n\"Gavin works with a lot of important people,\" Madelyn said firmly. \n\n\"Well,\" Alex shrugged softly. \"Gavin didn't say anything about his patients.\" \n\nMadelyn looked to the floor and shook her head. Alex could feel her disappointment. She could also see the wheels turning in the woman's head. \n\n\"Baby,\" Madelyn said slowly. \"I'm calling in your marker.\" Madelyn said lifting her head. \n\n\"What?\" Alex gasped. \n\n\"You owe me,\" Madelyn reminded. \n\n\"I know,\" Alex swallowed hard. \"What do you want from me?\" \n\n\"I want the wedding at my house,\" Madelyn said without hesitation. \n\n\"Ok,\" Alex frowned. \n\n\"I want elaborate,\" Madelyn continued. \n\n\"Mistress,\" Alex began to protest. \n\n\"You owe me,\" Madelyn said again. \"I didn't expect to have to call it in so quickly, but Gavin surprised even me on this one!\" \n\n\"Mistress,\" Alex began again. \"Gavin won't like this!\" \n\n\"I'm sorry honey,\" Madelyn said softly. \"But that is not my problem...it is yours!\" \n\nAlex sat back into the couch with a flop. Gavin was not going to like this at all! He was such a simplistic person that something elaborate was going to anger him. She thought of all the elaborate parties that Madelyn threw. That brought up another problem, Madelyn's parties involved the lifestyle, would this wedding be similar? \n\n\"My parents don't know about my lifestyle choice,\" Alex pointed out thinking her wedding was the last place she wanted to announce to the family she was a submissive. \n\n\"This has nothing to do with the lifestyle,\" Madelyn said standing up. \"This is about the man I consider my son getting married to the most fantastic girl I have ever encountered. I'm an old woman and this is something I have dreamt about for years.\" \n\n\"There is no way I can convince you to reconsider?\" Alex asked. \n\n\"None,\" Madelyn said firmly. Alex knew that was going to be the answer but she was hoping against hope. Alex closed her eyes and nodded. How was she going to explain this to Gavin? \n\nGavin came in a couple hours after Madelyn left. Alex was still sitting on the couch staring at the ceiling. He looked to her as he turned the corner. \n\n\"What's up?\" he asked her. \n\n\"Madelyn was here,\" Alex whispered. \n\n\"Ok,\" \n\n\"She called in her marker,\" Alex told him with closed eyes. \n\n\"What does she want?\" he asked as he came to her and stood next to the couch. \n\n\"She has shanghaied the wedding,\" Alex told him. \n\n\"What?\" he asked angrily. \n\n\"She wants the wedding at her mansion,\" Alex said turning her head to him without lifting it. \"She wants elaborate!\" \n\n\"Tell her she can't have that,\" Gavin said firmly. \"This is your day.\" \n\n\"This is our day,\" Alex corrected. \"And this is her favor, her marker.\" \n\n\"Jesus Christ!\" Gavin growled. \n\n\"I'm sorry,\" Alex told him. \"I won't renege on my promise.\" \n\n\"This is what happens when you make deals with Satan!\" Gavin grumped. He shook his head and walked into his office without another word. \n\n\"Fuck,\" she hissed when he slammed the door. \n\n*** \n\nShe listened at the door of Gavin's office after she heard him arguing. He was arguing with Madelyn. She closed her eyes and shook her head. He was barking that she couldn't take over the wedding. Alex closed her eyes and walked in without knocking. \n\nShe took the phone gently from his fingers and smiled at him lovingly. She tilted her head in apology to him and he knew what that meant. \n\n\"Mistress,\" Alex interrupted the vehement conversation from that end. Madelyn stopped talking when she heard Alex's voice. \n\n\"I'll be over when I get back from Pennsylvania,\" Alex said looking at Gavin. \"We can start going over ideas for what we want.\" \n\n\"I'm sorry to put you in this position,\" Madelyn said back softly. \n\n\"No,\" she smiled. \"You are family, I owe you so much.\" \n\n\"Honey,\" Madelyn said sadly. \"Maybe I should just butt out? I don't want to blackmail you for the favor I did for you and Pavy.\" \n\n\"No, Mistress,\" Alex said firmly. \"I owe you from way before that. It was you who solidified my position with Gavin that night at your party. It was you who kept counsel with him that I was a good thing.\" \n\n\"Are you sure?\" Madelyn asked her, the happiness in her voice coming through which made Alex happy. \n\n\"I'm positive,\" she said firmly. \"When I get back, I'll bring Lena out and we will exchange ideas, go through some bridal magazines.\" \n\n\"I love you, Dearie,\" Madelyn said gleefully. The excitement in her voice had Alex smiling. \"See you soon!\" \n\n\"I love you too,\" Alex said hanging up the phone after Madelyn did. She looked to Gavin who waited for an explanation. \n\n\"You said I could have whatever I wanted,\" she said firmly. He nodded. \n\n\"You said you wanted simple,\" he pointed out. \n\n\"I've changed my mind,\" Alex told him. \"We are going to have a big wedding. It makes Madelyn happy to have it there. If it wasn't for Madelyn...I don't think I would have you. So I owe her my life. If this makes her happy, then it makes me happy to please her. Which I know, in the end, will please you.\" \n\nGavin let out a slow deep exhale as he looked to the desk. \n\n\"I'm sorry my Love,\" Alex said to him. \"But don't worry, you will only have to do this once, and then, I will spend the rest of my life showing you not only can I be a great sub, but a fantastic wife and mother.\" \n\n*** \n\nChapter 41 \n\nIt was a bright Monday morning. Alex still didn't have her legs under her from her trip to Africa. She wanted to stay at the condo and have Gavin spoil her like he had done all weekend, with foot massages and loving comments to de-stress her. \n\nThe first excursion into the bridal dress world was absolutely draining. Store after store, dress after dress. Nothing seemed perfect. That's what she wanted, perfect. Was that so hard? Madelyn and Lena were patient, but when she told them she wanted elegant yet sexy they rolled their eyes. \n\nIt seemed she could have one or the other, but not both! She wanted a dress that people would awe over, but a dress that would make Gavin drool and think about all he was getting. An elegant and beautiful but sexy and desirable wife. \n\nMadelyn, even though she had basically blackmailed her way into the wedding, wasn't as problematic as Alex had feared. She didn't want to keep Alex from her special day, she just wanted to have it on a grander scale. She was patient with Alex and the only argument that was had was between Madelyn and Gavin, on who was going to pay for the wedding. Madelyn won, as usual. \n\nNow she was standing in front of her sister's new apartment in Averin. Coffee in hand, energy level on low and her body begging for her to go to bed. \n\n\"Holy cow,\" Livy smiled looking her younger sister over. \"You look terrible!\" She teased. \n\n\"Thank you,\" Alex smiled half-heartedly. \"It matches the way I feel!\" \n\n\"You didn't have to come!\" Livy told her standing to the side and letting her in. \n\n\"And let you fend off the wolves by yourself?\" Alex scoffed. \"No, I'm here to give Mother something else to bitch about besides you!\" \n\n\"You have done that too much already,\" Livy told her leading her to the kitchen and pointing to a chair for her to sit in. Alex collapsed into it and Livy shook her head. \n\n\"Sorry,\" Alex frowned. \"I'm still not right from my trip.\" \n\n\"Which is why you should have stayed in Chicago...What is that?\" Livy beamed looking at Alex's hand. Fuck, Alex kicked herself, she meant to take it off before she got here. \n\n\"That,\" Alex smiled, \"is an engagement ring!\" \n\n\"Oh my God that is soooo great!\" Livy jumped up and threw her into a hug and Alex could do nothing but hug her sister back. \n\n\"Sorry,\" Alex said releasing her. \"I meant to take it off...I mean here you are about to go through the hardest thing ever, the last thing you need is this reminder.\" ",
        "\"You're wrong,\" Livy said pulling her hand to her to inspect the ring more carefully. \"I need this to remind me that I deserve better, and better is out there!\" Alex tilted her head at the change in attitude Livy was displaying. \n\nAt Christmas she seemed a mess, a destroyed woman. Now her happy smile was back, her mood chipper. \n\n\"Are you getting laid?\" Alex asked her dubiously. \n\n\"What?\" Livy gasped. \n\n\"You seem pretty chipper!\" Alex pointed out. \n\n\"No,\" Livy shook her head. \"Men are totally off limits for a while, unless I find a man like your Gavin.\" \n\n\"Good luck with that,\" Alex groaned. \"I think I got the last one! They don't make them like my Gavin anymore! I was single for a long time, so I know.\" \n\n\"Now you are killing my mood! Thanks!\" Livy joked. \n\n\"You really ok?\" Alex asked her. Livy shrugged. \n\n\"As good as I can be right now,\" Livy told her. \n\n\"How's my favorite niece?\" Alex asked her. \n\n\"Totally not talking to me since I sent her to school today instead of letting her stay home to see you!\" Livy growled. \"That girl is more like you than I like!\" \n\n\"You mean stunningly beautiful, with a personality to match?\" Alex asked with a blush. \n\n\"No,\" Livy said with twisted lips. \"A stubborn, strong willed little pain in the butt! With a temper to match!\" \n\n\"So catch me up,\" Alex said rolling her hand to Livy to start the talking. \n\n\"Judith, my lawyer,\" Livy said getting up and pulling the coffee pot towards her and refilling Alex's cup. \"Is the most amazing woman I have ever met! She is absolutely ruthless!\" \n\n\"What do you mean?\" Alex asked. \n\n\"Well,\" Livy looked to the ceiling. \"The very first meeting, Don's lawyer tried to bully us.\" Alex lifted her eyes. \"Yeah, that went over like a turd in the punch bowl! Judith just looks at him and shakes her head, all confident like, and starts putting her stuff back in the briefcase. She then lets out this deep exhale and says, 'let me catch you up on everything...your client is the one that cheated, multiple times. Your client is the one that impregnated another woman. Your client is the complete asshole here.\" \n\n\" 'My client is telling me that she wants nothing but child support...now if you want to play bully with me, I'm going to cut my client out of this completely and rip you to shreds. By that I mean, alimony, child support, the house, the cars, the savings account, half the 401k and then I'm going to sue that little whore of girlfriend of his for spousal alienation, which means she is also going to pay my client for spreading her little legs for your client!.'\" Alex sat there slacked jawed. \n\n\"Judith got up, looked to me, and I got up and we left the room,\" Livy laughed. \"I looked to her in the elevator and she just sat there with this little smug look.\" Livy shook her head. \n\n\"I finally had to ask her what was going on,\" Livy giggled. \"She tells me 'I'm lawyering, this just let them know that what you want is less than what I can get'!\" \n\n\"The next meeting went a lot smoother!\" Livy said proudly. \"Everything is figured out, today's court appearance is just to have the Judge ok everything. Judith says it's a formality.\" \n\n\"You act like you are ok with this,\" Alex agreed. \"But, it may be a bit different later. So I hope you don't mind if I stick around?\" \n\n\"Not at all! Nora is expecting you to pick her up in the Mercedes, with the top down!\" Livy smiled, and reminded Alex that Nora wanted the top down at Christmas. \n\n\"How is she doing with all this?\" Alex asked her. \n\n\"About as well as you can imagine,\" Livy shrugged. \"Don still doesn't want her around the 'other woman', so he picks her up and takes her to McDonald's from time to time. She is trying to be so much like you...so strong, but I can see the pain.\" \n\n\"What are you going to do about that?\" Alex asked, the anger tinting her words. \n\n\"He has a right to her,\" Livy pointed out. \n\n\"It looks like he doesn't want it,\" Alex countered. \n\n\"True,\" Livy frowned. \"But I'm still hoping that the old Don wakes up and finds out that his little girlfriend is making him make mistakes he might not recover from.\" \n\n\"In the end,\" Livy said firmly. \"I will protect Nora with everything I have. I will protect her like you would. I will become the bitch nobody thought I could be!\" \n\n*** \n\nAlex sat at the front of the courtroom, right behind Livy. Their dad showed up and hugged Alex warmly then hugged Livy. Alex wasn't surprised when the others didn't come. Livy seemed surprised, and a bit hurt when her mother and older sisters didn't come in. She looked to Alex who tried to give a reassuring smile. \n\nDon showed up with his lawyer, and new girlfriend. She was already sporting a little engagement ring on her hand. Livy saw it and rolled her eyes at Alex who smiled. \n\n\"You should go over and show her what a real engagement ring looks like!\" Livy teased. \n\n\"I go over there, she will be unconscious,\" Alex growled, staring at the little just out of her teens, homewrecker down. \n\n\"What engagement ring?\" Al asked looking at his two daughters. \n\n\"Oh shoot!\" Livy gasped. \"Sorry!\" Alex shook her head and smiled. \n\nShe showed her father the ring and he engulfed her into his arms and squeezed her tightly, so tightly she thought he was trying to squeeze the stuffing out of her. \n\n\"That's fantastic!\" Al gushed looking at it. \"Oh I am so proud of you!\" Alex blushed at all the attention she was getting. She didn't want that, this was supposed to be support for Livy, not her engagement. \n\nThe judge came in and they all sat down, Al holding Alex's hand happily. \n\n\"Good morning,\" the black cloaked man said shuffling papers and putting his glasses on. \"From what I understand, all the particulars have been agreed on?\" The stately man asked looking over his glasses. \n\n\"They have Your Honor,\" Judith said handing the divorce papers to the bailiff to take to the Judge. \n\n\"We have a counter,\" Don's lawyer said handing a second set of papers to the bailiff. \n\n\"Counter?\" Judith asked in a snarl. \"Are you sure?\" The look on Judith's face said it all. Daring them to proceed with their little surprise counter. \n\n\"Yes,\" the lawyer said with a nod. \"My client has thought over everything and has changed his mind on a couple things.\" \n\n\"Mistake,\" was all Judith said as she sat down shaking her head. \n\n\"What is different?\" the Judge asked. \n\n\"My client wants the house, as Ms. Lasko has abandoned it,\" the lawyer began. \"Seeing how he still lives there, he feels that he should be able to keep it.\" \n\n\"Anything else?\" the Judge asked writing something down. \n\n\"He wants half custody and therefore, no child support,\" the lawyer said looking to Judith who chuckled slightly in disbelief. \n\n\"What?\" Livy barked out standing up and turning to face her soon to be ex-husband. \n\nAll the work they had done to keep this peaceable was flying out the window now. \n\n\"What is she supposed to do? Spend half the year with me in Averin, then change schools to spend the other half with you? How is that what's best for Nora?\" Don didn't look at her instead he stared at the table as the judge tapped his gavel gently. A soft reminder of where Livy was barking. \n\n\"You said you just wanted what was best for Nora!\" Livy reminded Don. He said nothing, nor did he look over at her. She shook her head when he wouldn't even look at her. \n\n\"Your Honor,\" the lawyer continued. \"We wish to offer a compromise.\" \n\n\"I'm all ears,\" the Judge frowned. \n\nLivy shook her head angrily but Judith patted her hand. Livy leaned into her. \n\n\"Whatever you want,\" Livy growled. \"He wants it messy, make it messy! MY little girl doesn't deserve to be treated like a pawn!\" \n\n\"If Ms. Lasko is willing to forgo her claim on half the house,\" the lawyer began looking at Livy. \"Mr. Codeen is willing to drop the half custody.\" \n\n\"That's what this is all about?\" Livy growled. Judith put her hand on her to keep her from standing up. \"The house? Is that what your little girlfriend wants? A place for her little baby?\" \n\n\"Ms. Lasko,\" the Judge reprimanded. \n\nAlex looked to her father at Livy's outburst, the demure sister she grew up with was fulfilling her threat. She could be a bitch if need be. Al shrugged in surprise as well. This was a side of Livy neither had ever seen. \n\n\"I'm sorry Your Honor,\" Livy said sitting down, wiping the tear that escaped from her face. \n\n\"I understand,\" the Judge said sympathetically. \"But please, let your lawyer do her job.\" \n\n\"Yes Sir,\" Livy shook her head in disbelief. \n\nJudith looked to Livy and smiled. She then shrugged, she knew Livy didn't care about the house, her only concern was Nora, and this was a perfect way to make sure the one concern Livy had was taken care of. \n\n\"Your Honor,\" Judith said standing up. \"My client is willing to agree to the house, but, she wants complete custody of the Nora. There is no way she would agree to half, and right now, I don't even want Mr. Codeen to have visitation rights!\" \n\n\"So, he wants the house,\" Judith continued confidently, looking at Don. \"Ms. Lasko wants Nora. Complete control. Mr. Codeen must relinquish his paternal rights to her.\" \n\n\"Mr. Codeen,\" the Judge frowned. \"You will want to speak to your attorney.\" \n\nInstead of looking at his attorney he looked to his pregnant girlfriend who intimated with her head bob to take the deal. Don frowned and looked to his lawyer and nodded his consent. \n\n\"We accept that,\" the lawyer said with a shake of his head. The Judge looked at both men at the table disapprovingly. \n\n\"You are going to regret that,\" the Judge warned as he shook his head. \"Is there any more surprises?\" He chastised the lawyer in open court. \n\n\"No Sir,\" the lawyer frowned. \"We still hold to no child support.\" \n\n\"You have got to be out of your mind!\" Judith laughed. \n\n\"I agree,\" the judge said firmly, pointing out that no child support wasn't going to happen unless Livy didn't want it. \n\nHe looked to the original papers and turned them until he found the amount agreed upon before the hearing. Before this little bombshell. \n\n\"The original amount agreed upon seems to be low as well. My suggestion, agree to that.\" This surprised everyone in the courtroom. The Judge not being so neutral. \n\nDon nodded that he agreed and the lawyer said so verbally. \n\n\"Mr. Codeen,\" the Judge began slowly signing off on the agreement. \"I hope this doesn't come back to haunt you later.\" With that he cracked his gavel and left the courtroom. \n\n*** \n\nLivy sat on a bench outside the courthouse as Alex rubbed her back sympathetically. She could feel the mixture of anger and sadness. Anger at what Don had tried to do. Sadness at the fact, her marriage was officially over. She was now a divorcee.  \n\n\"Alex,\" Livy said after a few minutes of silence. \"You need to go if you are going to pick up Nora. She is expecting you.\" \n\n\"Are you sure?\" Alex asked her. \"We could pick her up together...run into Pittsburg from some retail therapy?\" \n\n\"No,\" Livy said firmly. \"I need some time before Nora sees me. So, if you would, take her out and entertain her a bit. Give me a couple hours to gather myself?\" \n\n\"Of course,\" Alex agreed. \"Dad, will you give her a ride?\" \n\n\"Absolutely,\" Al agreed. \"Why don't you bring Nora to dinner tonight at the house, I'll grill out and the family will all be there. It doesn't happen very often and it seems you might want to let everyone else know about your little surprise!\" \n\n\"I think that should happen later,\" Alex said looking at Livy. \n\n\"No,\" Livy disagreed. \"You need to brag on your man, you need to show everybody what a healthy relationship looks like.\" Alex shook her head. \n\n\"C'mon Dad,\" Livy said standing up. \"Take me to lunch, I need it.\" \n\n\"Let's go baby girl,\" Al said putting his arm around Livy and guiding her towards his pick-up truck. \"See you later Alex, say about five?\" \n\n\"Ok,\" Alex agreed as she watched them walk away. Livy's head on her father's outer arm. \n\nShe pulled up her cell after Livy and her father were out of sight. She started walking towards her car. \n\n\"Hey beautiful,\" Gavin's voice came across strong. \n\n\"Hello, Sir,\" Alex smiled. \n\nIt was comforting to hear his voice. It reminded her of all the good in her life. She was wallowing in the sadness Livy was having to endure, despite the fa\u00e7ade Livy was putting on for Alex. \n\n\"How did it go?\" Gavin asked her. \n\n\"The man is a complete asshole!\" Alex barked. \"He tried some bullshit move to take custody away from Livy!\" \n\n\"What did Judith do?\" Gavin asked. \n\n\"Less than she could have, I'm sure!\" Alex said shaking her head climbing into her car. Al honked his horn as he drove by. \n\n\"Tell Gavin hello and congratulations!\" Livy called out from the window. \n\n\"Did you hear Livy?\" Alex smiled. \n\n\"I did,\" Gavin told her. \"I thought we were going to wait to tell them?\" \n\n\"I forgot to take the ring off...she saw it,\" Alex said with a huff. \"She is really happy, so was Dad.\" \n\n\"Well,\" Gavin said with a half laugh. \"It sounds like the cat is out of the bag.\" \n\n\"It is, if not, it will be. Dad wants me to come over and have dinner with the family,\" Alex told him as she pulled away from the curb. \"Right now I'm headed to pick up Nora, she wants a ride with the top down!\" \n\n\"You girls have fun,\" Gavin laughed. \"Be careful, it's supposed to be chilly there this evening.\" \n\n\"What did you do? Check the weather?\" Alex asked. \n\n\"Yes,\" he said with an incredulous chuckle. \"Just because you aren't here, doesn't mean I don't think about you.\" \n\n\"Yes Sir,\" Alex felt the love across the phone. \"I'll see you in a couple of days.\" \n\n\"Love you,\" Gavin said. \n\n\"Love you more,\" Alex said back. \n\n*** \n\n\"AUNT ALEX!\" Nora screamed as she ran from the school doors. \n\nAlex was leaning against the car, she had already dropped the top on the convertible. Nora leapt into her arms and Alex blew into the side of her neck lovingly. She then put her in the seat and buckled her in. \n\nPulling away carefully she looked over at Nora as she held her hand up and over the top of the windshield as the wind whipped over the car. The smile couldn't be contained on the little girl. After a few minutes Nora pulled her hand down and looked to Alex. \n\n\"How did court go today?\" she asked knocking the air out of Alex. \n\n\"Wha...what?\" Alex regrouped. \n\n\"I know mom is supposed to be in court today,\" Nora told her firmly. \"I've been letting her lie to me...that's why you are here, right?\" \n\n\"No, I'm here to see you,\" Alex tried. \n\n\"Please Aunt Alex,\" Nora begged closing her eyes. \"Don't be like everybody else and lie to me. Not you!\" \n\nAlex pulled the car into a store parking lot and put the car in park. She looked to Nora and let out a slow breath. \n\n\"Court went as expected,\" Alex told her taking her small hand in hers. \"Your dad tried some stupid things, but the judge didn't go for it.\" \n\n\"Will I spend half my time here and half with him?\" Nora asked her. \"I don't want to spend half with that mean girl!\" \n\n\"How do you know this stuff?\" Alex asked her. Livy had told her she only talked about the divorce when Nora was in school. \n\n\"Dad,\" Nora shrugged. \"I heard him and his girlfriend arguing one day. At least mom never argued in front of me!\" \n\n\"I'm sorry baby,\" Alex said kissing her cheek and pulling her into her arms. \"No, you will be spending you time with your mommy here in Averin. Your father thinks that is what's best for you.\" \n\n\"So he gets the house?\" Nora said slamming what felt like a sucker punch into Alex. \n\n\"Oh honey!\" Alex gasped. The things this little girl knew that she shouldn't have known! To know that your father was using you like a chess piece. How does an adult handle that let alone a seven year old? \n\n\"It's ok,\" Nora assured her. \"They need a place for the baby.\" \n\n\"It's not ok!\" Alex growled. \"You deserve so much better than that!\" \n\n\"I'm with Mommy, which is all I want,\" Nora said firmly. \"Me and Mommy.\" \n\n\"Well,\" Alex smiled. \"You won't have to worry about that at all!\" \n\n*** \n\n\"How did court go today?\" Father Wells asked as his favorite parishioner as she sat in her normal spot. \n\n\"The bastard tried to take Nora from me!\" Livy barked. \n\nThe priest sat down next to her and put his arm around her. \n\n\"I'm sorry,\" Jack said as she turned into him and cried. \"What happened?\" \n\n\"The selfish little prick wanted the house,\" Livy raged. \"He didn't give a damn about Nora! He just used her to get the house, threatened to take her from me, but then said if I would sign off on giving him the house, he would grant me full custody!\" \n\n\"Well,\" Jack shrugged. \"It sounds like you got what you wanted. The house is just a pile of wood and bricks. You have the gift of life, of love.\" \n\n\"I do,\" Livy smiled. She took the offered hanky. \n\n\"So?\" Jack asked with his eyebrows. \n\n\"I don't feel any different,\" Livy shrugged, knowing what the priest was asking about. Her worry about how she would feel after the divorce. She worried she would feel less human, less like a person. Less of a Christian. \n\n\"Told you,\" Jack smiled. \"All that worry that you would feel like shit...wasted time. All that worry that God would punish you for it...more wasted time.\" \n\n\"You know my mother believes that,\" Livy countered. \n\n\"And I have told you that I doubt your mother is within the fold of God's love,\" Jack countered. \n\n\"You have,\" Livy chuckled. \"But why is she so sure?\" \n\n\"Because those who believe they are closest to God, are usually the farthest,\" Jack said with a sigh. \"And those the farthest from God are the ones that Satan tempts the most. Sometimes he impersonates the Heavenly Father to trick them into belief.\" \n\n\"How can I save them then?\" Livy asked him. \n\n\"By living in the way God wants you to live,\" Jack told her. \"To lead by example is what He expects. He doesn't want you to convert the world. He wants you to be a ray of light in the darkness. To show with God's love, all is possible, and that you are undefeatable regardless of what this shitty life throws at you!\" \n\n\"So I'm not damned for this?\" she asked again. \n\n\"Not in the least,\" Jack assured her. \"Soon, you will know this as I do. God has spoken to me, He told me this is your path.\" Jack stood up and began to move away as another parishioner moved into the confessional. \n\n\"God has spoken to you?\" Livy asked with a disbelieving smile. \n\n\"You don't think I speak to myself in the yard, like some sort of town idiot do you?\" Jack laughed. \"No, I speak to Him, He speaks to my heart. He loves you. That much is sure. When you thought you could go no further, He carried you to His doorstep...and invited you in.\" Jack said reminding her of their first meeting. \n\n\"You have been speaking to Him about me?\" Livy asked surprised. \n\n\"Every night,\" Jack said firmly. \n\n\"Why?\" \n\n\"Because you needed Him, more than anyone else,\" Jack told her. \"And I know your faith is tarnished by all of this, but soon, you will turn to where you are supposed to be.\" \n\n\"And where is that?\" Livy smiled. \n\n\"One more pew up,\" Jack laughed pointing to the first row. \"Well within the arms of our Father's love.\" Livy nodded as he looked at her one last time at the confessional booth. He winked at her and entered. \n\n\"Thank you Heavenly Father,\" Livy prayed. \"For your Angel of love, please bless Father Jack and forgive his language in Your house!\" She snickered as she looked to the confessional. Father Jack Wells, not your typical priest. Then again, he warned her of that that first day they met. \n\n*** \n\nAlex pulled Nora from the seat and turned her loose to run to her mother. The two hugged warmly and Nora went on a speed talk of all that Alex and she had done. From driving fast with the top down, to which Alex shook her head in denial, but Livy could tell by the guilty smile that Alex was lying despite her hand being raise to swear an oath. To the ice cream they had at Dairy Queen. ",
        "\"Sounds like Aunt Alex is spoiling you!\" Livy said happily. \n\nAlex watched Judith come out of the apartment door and a shot of panic ran through her as Livy and Nora went inside. Judith winked at her as she came to her own Mercedes. \n\n\"Nice car,\" Judith teased. \n\n\"Back at you!\" Alex smiled. \"Is everything alright?\" \n\n\"Of course!\" Judith assured. \"Just some last minute details Livy needed to go through. Changing her will, at my suggestion, and what not. Sign the official decree of divorce so that can be filed with the state. Just crossing the 'T's' and dotting the 'I's'.\" \n\n\"So it's official then?\" Alex asked her. \n\n\"It will be in a couple of weeks,\" Judith said with a shrug putting her briefcase in her car. \"Goes to Mr. Codeen, then to the Judge. Then it's filed with the circuit clerk who makes it official.\" \n\n\"Thank you for all you have done!\" Alex said extending her hand. \n\n\"I wish your sister would have let me do more!\" Judith complained. \"I could have taken him to the cleaners! But she didn't want that.\" \n\n\"I know,\" Alex frowned. \n\n\"I did sneak one thing by her,\" Judith smiled like a child who had gotten away with peaking at Christmas gifts. \n\n\"Oh?\" Alex smiled. \n\n\"She is getting alimony, whether she likes it or not!\" Judith wiggled her eyebrows. \"At least until she has her own career going, and is making equal to what he makes!\" \n\n\"Livy didn't want alimony?\" Alex asked. \n\n\"No, your sister just wanted Nora taken care of,\" Judith frowned. \"I'm telling you, if she would have just turned me loose, she never would have worked again! But no, your sister is much too kind!\" \n\n\"She got the one thing that mattered to her,\" Alex said as Nora called out to her. \n\n\"I guess she did,\" Judith shrugged. \"Tell Gavin I said hello!\" \n\n\"I will,\" Alex nodded. \n\n*** \n\nPulling up to her parent's house they could see the smoke billowing from the back yard. \n\n\"What's he trying to do?\" Livy gasped. \"Set the neighborhood on fire?\" \n\n\"Looks like it!\" Alex agreed. \n\nThey walked around the house and found Al waving the smoke from the grill. He coughed a couple of times as the smoke wafted out and surround him. \n\n\"Somebody call the fire department!\" Livy called out in tease. \n\n\"Keep it up,\" Al threatened. \"And you will go to bed hungry tonight!\" \n\n\"Better than burnt!\" Alex came in to help Livy tease their father. \n\n\"Alex,\" Marylyn called out bringing out the tray of meat for the grill. \"I didn't know you were in town!\" \n\n\"I, unlike some, came to support Livy,\" Alex said angrily. Pointing out that her mother didn't do the same. \n\n\"Well,\" Marylyn said sharply. \"If she is going to go against God, I can't say I can support it!\" \n\n\"Go against God?\" Alex rolled her eyes. \"That is the biggest pile of horse shit I could possible believe could come out of your mouth!\" \n\n\"Alex,\" Livy tried. \n\n\"Sorry Squirt,\" Alex said to Nora who was listening. \"Cover your ears, I'm just getting warmed up!\" Nora did as she was told. \n\n\"You know, in all of your lectures about what God wants, I have never heard you say anything about how God feels about that son of a bitch cheating on Livy. Knocking up another member of your precious little church! Where is your outrage on that?\" Alex fumed as her sisters came out. \"What does you precious church feel about the sin that is permeating from within?\" \n\n\"The church is praying for all of them,\" Marylyn told her. Her eyes narrowing on her youngest daughter and her vocal challenge. \"If Livy hadn't followed your lead, she would have a church to help her through these difficult times!\" \n\n\"What?\" Alex growled. \n\n\"Oh, you didn't know?\" Marylyn laughed. \"Livy has left the church, she has left God! Just...like...you! Next she will be living in sin like you I'm sure! She has lost her faith!\" \n\n\"You left the church?\" Alex asked Livy. Livy nodded with a frown. \n\n\"I haven't lost my faith in God, just your church,\" Livy said firmly to her mother. \"My faith in God is just fine!\" \n\n\"Are we going to eat or argue?\" Al asked them from the grill. \n\n\"I don't know,\" Livy teased. \"I'm pretty sure my baby sister could do both!\" Livy hugged Alex for her defense. \n\nGathering around the table, Al led them in prayer. He shook his head as his wife glared at him. \n\n\"So,\" Al began, hoping to change the mood. \"Tell us about your trip!\" \n\n\"What trip?\" Krista asked. \n\n\"Gavin and I went to Africa to help a med school friend,\" Alex said shortly. She was still stewing from her abbreviated argument with her mother. That was left hanging, it needed to be finished, but she didn't want to ruin her father's hope of a happy family dinner. \n\nHer mood was dour and she didn't want to talk about it. She wanted to rip on her mother some more. To finally have it out with her but her father's look said he wanted no part of that. \n\n\"You went to Africa?\" Ken asked her in shock. \n\n\"I did,\" Alex told him, making eye contact with him and avoiding the looks of the rest of her family. \"Pavy, that's Gavin's friend, he works for Doctors without Borders. He had his med supplies hijacked by the warlords, Gavin and I had to make sure he got the resupply that Gavin arranged.\" Alex shrugged like it was no big deal. \n\n\"Keep going,\" Livy demanded. \n\n\"We spent just over two weeks there, Gavin working on the refugees,\" Alex said with a shake of her head. \n\n\"And?\" Livy continued to cajole. She wanted her baby sister to brag on her accomplishments. To rub in the fact that she was successful despite what her mother and older sisters claimed. \n\n\"I wound up giving inoculations to the kids from the villages nearby,\" Alex told them at the table looking to Livy who smiled and nodded that, yes, she was doing this on purpose. \n\n\"And they gave her a name,\" Livy said proudly. \"Pipi Malaika, which means Candy Angel!\" Livy gave Alex a gentle shove of tease. \"Our little sister is known the world over!\" \n\n\"That's a stretch!\" Alex gasped. \"A small part of Africa that has probably already forgotten me as they struggle to stay alive!\" \n\n\"That's amazing!\" Ken raved. \"Pipi Malaika!\" \n\n\"Stop,\" Alex begged. \n\n\"You should be proud of those things honey!\" Al told her. \"You are making a difference!\" \n\n\"No, Gavin was saving lives,\" Alex argued. \"I was just giving shots.\" \n\n\"Shots that would save lives,\" Livy countered proudly. \n\n\"Did you have any chance to spread the word of God?\" Marylyn asked, taking the good mood that was building and crushing it with one caustic sounding sentence. \n\n\"No,\" Alex shrugged with a roll of her eyes. Noting what she did wasn't good enough for her mother apparently. \"I did have a witch doctor's daughter cast a spell on me...so I guess that means I'm not only going to Hell, I'm taking the express train!\" She smiled nonchalantly as Livy giggled by her side. Knowing full well that was a shot at their mother. \n\nNothing surprised Livy anymore with the way Alex stood up to their mother. It had gone unnoticed by Livy while Marylyn ruled her life. Now that Livy was bucking her mother's wishes, she realized all that Alex had to endure. Sometimes willingly, sometimes not. Either way, Alex came out on top on most occasions. And she was learning that Alex had it right. Live for yourself, let those who love you, love you. Those who judge you, judge you. But in the end, you only needed to be happy with yourself. \n\n\"I don't think that is funny at all!\" Marylyn pointed out. \"Letting some demonic woman use the powers of Satan on you!\" \n\n\"Oh Mother,\" Alex shook her head. \"The Devil has no power on me.\" \n\n\"I think he does!\" Marylyn countered. \"You live in a den of heathens in Chicago. You don't go to church. You live in sin as an unmarried woman!\" \n\n\"Something she is about to remedy,\" Al said proudly. \n\n\"What?\" the rest of the table asked at once. It made Livy bark out a laugh and cover her smile. \n\n\"Gavin and I are engaged,\" Alex said, the smile creeping across her face as she produced the ring. \n\n\"Why were you hiding it?\" Krista demanded. \n\n\"I came up here, not to talk about my engagement, but to lend Livy my support in the hardest time of her life. Something others in the room should remember if they ever need help!\" Alex said looking at her sisters Brandy and Krista. \"She needed our support!\" \n\n\"We have been trying to talk her out of it!\" Brandy tried. \n\n\"Why?\" Livy charged in. \"Oh, that's right, I'm embarrassing you in front of your precious little church. Tough, deal with it because it's done!\" \n\n\"That doesn't mean we should be happy about it!\" Krista snapped. \n\n\"Nora, honey,\" Alex smiled pleasantly. \"Cover your ears, Aunt Alex is about to say something not very nice.\" Nora did what was asked. \n\n\"Go fuck yourself!\" Alex growled. \"Family should always come first, soon you won't have anybody but your church as it casts its nasty and wrong beliefs on the rest of us! Next up, walking along with the likes of the Westboro Baptist Church and their inbred clan! Congratulations, if you get any further from God's teaching, the witch doctor's daughter may be the only one that can save you!\" \n\n\"Enough,\" Al warned. \"This is MY table. Enough.\" He shook his head and flexed his arm angrily digging into his food. \n\n\"I'm sorry, Dad,\" Alex said. She looked to Nora and mouthed something wordlessly with a smile. \n\n\"What?\" Nora asked loudly with her hands still over her ears. \n\n\"I asked if you wanted a hundred dollars...guess not!\" Alex teased stealing one of her dad's old jokes. Which caused Al to smile somewhat. \n\n\"What?\" Nora asked again as Livy laughed at her daughter. She pulled her daughter's hands down. \n\nThe meal went on, Alex answering questions about Africa. She looked to her mother from time to time only to see the steam rising from her mother's ears. She knew the woman was livid. Not only for Alex's stance and Livy's divorce, but for the way her father was ending arguments now. Bringing up the Bible's teaching about the man being in charge. She couldn't go against that and still purport herself a Christian. It was really bugging her and it was obvious to Alex. \n\n\"So,\" Marylyn began slowly. \"I'm assuming you are going to go to a local church for marriage classes?\" \n\n\"No,\" Alex shook her head. \"We are not getting married in a church.\" Marylyn looked to Al who warned her silently with his eyes. \"I'm afraid I would not support us paying for a wedding not held in a church!\" \n\n\"That's ok,\" Alex said with a disbelieving roll of her eyes. \"You aren't paying for it anyway!\" \n\n\"We have paid for every daughter's wedding,\" Al pointed out. \"We will pay for yours, it is tradition.\" \n\n\"That...you will have to take up with Madelyn,\" Alex smiled and laughed as she thought about that. Her father and Madelyn going at it. Madelyn backed down from no one. \"I dare you! No, I double dog dare you!\" \n\n\"Madelyn?\" Livy asked. \n\n\"Queen Madelyn!\" Nora blurted. \"Are we going to be at the castle?\" \n\n\"I'm afraid so,\" Alex winked at her. \n\n\"Will Sir Charles be there?\" Nora asked bouncing in her seat. \n\n\"Of course,\" Alex laughed at her excitement. \n\n\"Who is Queen Madelyn?\" Al asked. \n\n\"Madelyn is the one Gavin had to leave for, remember?\" Alex asked him. Reminding him of the conversation at the table after Christmas. \n\n\"Oh,\" Al nodded. \"The woman Gavin looks to as a mother now?\" \n\n\"Exactly,\" Alex nodded. \"What Madelyn wants, Madelyn usually winds up getting!\" Alex laughed. \"And she had made her demands pretty clear. She wants the wedding at her house, and she wants a huge elaborate deal. Gavin and her have already argued about it for hours now, she won't budge.\" \n\n\"Sounds like a strong woman!\" Ken pointed out. \n\n\"Oh, you have no idea,\" Alex said with a shake of her head. \"This woman, makes Congressmen beg. She is a heavy hitter in politics and in Chicago. She is the one that pulled strings to get the U.S. State Department off their ass and into the game to help us get the medical supplies to Pavy.\" \n\n\"I spent four hours waiting to talk to someone,\" Alex groaned reliving her State Department visit with Ken. \"She walks in and in five minutes, no less than five minutes, we were talking to the director of the State Department in Chicago. I ask her how, and she nonchalantly tells me she knows the Chairman of the Armed Services Committee who arranged for our little meeting.\" \n\n\"You mean Senator...what's his name...from Texas?\" Ken asked as he couldn't think of the name. \n\n\"That's him,\" Alex agreed. \n\n\"They say he might run for President,\" Ken told her. \"He would be a good man to know if so!\" \n\n\"Madelyn has a lot of political contacts,\" Alex told him with a shake of her head. \"As does Gavin, I guess.\" \n\n\"So it's going to be at her place?\" Al asked. \n\n\"Yes,\" Alex nodded. \"She is inviting everybody I guess, I saw her invitation list. It was several pages long!\" \n\n\"Are we on that list?\" Al asked with a laugh. \n\n\"I'll have to ask!\" Alex told him. \"You keep it up with that little attitude and I might just forget!\" \n\n\"We'd crash,\" Al warned her jokingly. \"I'd dress up in a straw hat and overalls, put on some buck teeth and come in whooping and hollering, talking cement ponds and fishing poles. Big wad of chew in my mouth...you know, the stuff that would make you proud to call me Dad!\" \n\n\"Oh God! I don't doubt it!\" Alex laughed shaking her head. \"If I let you walk me down the aisle will you leave the straw hat at home?\" \n\nShe knew this would get his attention as when the other sisters had their wedding, her mother had planned them out. She wanted her father there with her in the pew of the church not with some duty to perform. Deep down she knew her father didn't like that, so she made sure to tell herself if she ever got married. Her father would walk her down the aisle. \n\nAl looked at her in shock. His eyes watering slightly. \n\n\"You will walk me down the aisle, right?\" Alex asked with a smirk. \n\n\"Of course!\" Al gushed happily. \n\n\"So, it's the straw hat rule that is causing you to pause?\" Alex teased. \n\n\"To walk you down the aisle? I will wear whatever that woman wants!\" Al said, the smile beaming. \n\n\"Don't let her hear that! Making a deal with Madelyn, is like making a deal with the Devil! I have learned that!\" Alex told him. \"And I mean that in the most loving way possible!\" Alex said to her mother knowing what she would say about that comment. \n\n\"Can I do something?\" Nora begged. \n\n\"I'm sure I will need you somehow!\" Alex assured her with a wink. \n\n\"Yay! Aunt Alex is finally going to get married!\" Nora screamed. \n\n\"What's with this 'finally' stuff?\" Alex asked her with a playful scowl. \n\n\"Well,\" Livy shrugged. \"We were starting to wonder if anybody was going to bite the bullet and live with that little attitude of yours!\" Livy teased causing Nora and Al to laugh at the face of shock Alex gave them. \n\n*** \n\n\"How was dinner?\" Gavin asked her. \n\n\"Typical,\" Alex grumped. She was stroking her wet hair as she stared at her computer. She was Skyping with Gavin. \"I thought Dad was going to cry when I asked him to walk me down the aisle!\" \n\n\"He didn't do that with your sisters?\" Gavin asked her. \n\n\"No,\" Alex shook her head. \"Mom planned them, and she didn't want Dad to do that!\" \n\n\"That's bullshit!\" Gavin told her firmly. \"If we have a girl, I'm walking her down the damn aisle!\" \n\n\"Or we aren't showing up!\" Alex agreed. \n\n\"That will show the little ungrateful bitch!\" Gavin laughed as they complained about a daughter they didn't even have. \n\n\"How was your day?\" Alex asked him. \n\n\"Pretty boring,\" Gavin admitted looking at the beauty that was about to become his wife. \"And lonely.\" \n\n\"I know,\" Alex smiled. \"I wish you were here.\" \n\n\"Me too,\" Gavin nodded. \"You back at that rat hole of a hotel?\" \n\n\"Hey!\" Alex barked. \"No, I'm at the Super 8 in Averin!\" \n\n\"Ooooh,\" Gain teased. \"The Super 8!\" \n\n\"Hey, it's better than that tent in Africa!\" Alex defended. \n\n\"Barely,\" Gavin frowned. \"I miss you.\" \n\n\"I miss you,\" Alex said with a slight quivering of her lip. She watched Gavin's eyes light up as an idea ran through his mind. She could see it long before he brought it up. \n\n\"Take your clothes off,\" Gavin demanded. \n\n\"What?\" Alex asked with a bashful smile. \n\n\"That's twenty,\" Gavin pointed out with a smile. \"Take your clothes off.\" \n\nAlex knelt on her knees and tilted the camera on the computer up so he could see her fully. She slowly undid the top of her pajamas and pulled it from her body to reveal her breasts in the soft glow of the computer screen. She looked at Gavin who was smiling his secret smile. She slowly pulled her shorts down, revealing herself to him as she maneuvered to pull them off her legs. \n\nShe now knelt in the submissive position on the bed...naked. \n\n\"Your hands are now my hands,\" Gavin told her. \"You will do exactly what I say, when I say it.\" \n\n\"Yes Sir,\" she said breathily. \n\nThe excitement was already beginning to build in her. Her stomach butterflying and her sex warming just at the idea Gavin was controlling her from hundreds of miles away. \n\n\"Take your left hand,\" he instructed. \"And gently rub your breasts.\" \n\nAlex slowly lifted her hand and ran her hand up her stomach to her chest. She encircled one breast then the other. Rubbing her palm gently on her nipples causing them to spring to attention. Her breathing began to shudder with excitement as she watched the twinkle in Gavin's eyes and knew he was pleased. \n\n\"Now, take your other hand and play with your nipples at the same time,\" Gavin instructed. \n\nAlex let her other hand come into play, taking her nipples gently into her fingers. She rolled them with her tips as he watched his screen. Watching her body respond to her manipulations. \n\n\"Wet your fingers,\" he commanded. \n\nShe brought her hand to her lips and sucked erotically on her fingers before pulling them out slowly to show they were wet. \n\n\"Use them to wet your nipples,\" he told her. \n\nShe dropped it to her nipples and looked down as her fingers wetted her nipples slightly. \n\n\"Now,\" he said interrupting her. \"I want you to pinch them tightly, as I would, if I were there, and don't let go until I tell you to!\" \n\n\"Yes Sir!\" she said hoarsely. \n\nShe gripped her already hardened nipples tightly between her thumb and forefinger. Squeezing them tightly, pushing them flat in between her fingers. She hissed and held her breath as he watched. Her nipples barking at her for their release. \n\n\"Not yet,\" he warned her what her eyes were begging for. \n\nShe nodded. She tilted her head up as the pain shot through her, her nipples screaming in heat. Her sex watering, begging for some attention. She dropped her head to look at him on her screen. He was smiling pleasantly at her as he watched from Chicago. \n\n\"Ok,\" he smiled. \"You can let go.\" \n\nShe released them with a pleasured sigh. \n\n\"Now touch them ever so gently,\" he told her. She let her hands barley brush her sensitive skin and it caused her to 'yip' which brought out his smile bigger now. \n\n\"Take your right hand,\" he said drawing her eyes down to him, and slide your middle finger into that delicious pussy!\" She slid her hand down and was surprised at the heat she had already generated with this little scene. \n\nHer finger slid in to the palm easily. \n\n\"Oh Sir!\" she gasped. \n\n\"Tell me what you feel,\" he ordered. \n\n\"It feels like my pussy is on fire!\" she told him. \n\n\"NO,\" he said firmly. \"That is MY pussy, just because it's between your legs that doesn't make it yours. It's mine!' \n\n\"Yes Sir!\" Alex gasped. \"Your pussy is so wet!\" \n\n\"I like it when it's wet,\" Gavin hummed from his side of the screen. \"I like the feel of it when it grabs my finger, or my cock, when you are excited and pulls me in.\" \n\n\"Oh how I wish I had your cock here now!\" Alex smiled as she pulled her finger out. \n\n\"I didn't say stop,\" Gavin reminded. \n\n\"No, Sir,\" she smiled. \"I just wanted to show you how wet I was!\" She held her finger close to the camera and he could see it glisten slightly. ",
        "\"Taste it,\" he said firmly. \n\nShe quickly put her finger in her mouth and slowly pulled it out. Her secret smile coming out as she thought about how far she had come in the time she had been with Gavin. From somewhat prudish, to sexual fiend who was about to masturbate in front of her boyfriend on the computer. No her fianc\u00e9e, she corrected with a smile. A fianc\u00e9e who controlled her regardless of the distance. \n\n\"I'm jealous,\" he told her. \"I want to taste you!\" \n\n\"I'm delicious,\" she smiled devilishly. \n\n\"Put it back in my pussy,\" he commanded. \n\nShe did so quickly. \n\n\"Fuck yourself,\" he commanded. \n\nShe began to slide her finger in and out of her, the soft sounds of her wetness she could hear, but she wondered if he could. She hoped he could. \n\n\"Put a second finger in,\" he told her. \"Fuck my pussy harder.\" She obeyed as she bit her bottom lip. \n\nSoon her stomach muscles were flexing in the low light. She began to lift slightly off the bed as her thighs began to tense up as her orgasm built. Her hand hammered at her, her palm inadvertently slapping her clit causing her to 'yip' in sexual pleasure. \n\nShe looked down at the screen and saw him with his hands clasped together, watching the show intently. His chin sitting on his interlaced fingers. She smiled as she increased the speed of her fingers as her orgasm approached. \n\nShe let her head fall back, her mouth open as it built, her legs flexing even more as she dug her fingers angrily into her sex. The liquid of her pussy coating her fingers making them slide in and out easily. \n\n\"May I cum Sir,\" she asked still with her head back. \n\n\"No,\" he said firmly. Her head snapped up, her eyes crazed as she wasn't prepared for that, her hand stopping immediately. \"I didn't say stop.\" He pointed out angrily. She began to move her fingers again. \n\n\"I'm sorry Sir,\" she gasped under heavy breath. \"I was about to cum!\" \n\n\"I did not give you permission,\" he told her. She nodded as her fingers were bringing her back to the edge of madness. \n\nHer eyes begged him but he slowly shook his head in denial. She whimpered. She wondered if she could sneak it by him, then she knew that would be a big mistake, if she didn't sneak it by him, there would be consequences. \n\n\"I see it on your face,\" he said with a cryptic smile. \"I would advise against it!\" \n\n\"Damn Jedi!\" she said, her breathing forcing the words to come out in gasps. Her smile letting him know she was pleased. \n\n\"Please Sir!\" she begged. \"I'll give you anything you want! Please let me cum!\" \n\n\"I have everything I want,\" he said folding his hands back and returning his chin to its perch. \"I have you.\" \n\nHer smile broadened although that was replaced with the grimace as she tried to hold her orgasm at bay. Back to the baseball scores, but with spring training just now starting, there were less scores to recall. Meaning, less to distract her from her pleasurable misery! \n\nHer fingers tried to slow but he warned her with an \"eh, eh, eh!\" Which meant continue at the full speed. She bit her lip in hopes to divert the pleasure, but that didn't work. \n\n\"Use your other hand to pull on your nipples,\" he commanded. \n\nWith a shaking hand she took hold of one of her nipples, causing the pleasure 'yip' to escape. \n\n\"Please Sir!\" she begged. \n\n\"No, not just yet,\" he said softly marveling over her. \n\n\"Holy fuck! You can be sooo mean sometimes,\" she smiled. \n\n\"If I was going to be mean,\" he said firmly. \"I would tell you to stop, and go to bed...without cumming.\" He pointed out. \n\nThis had her snapping her head to the screen to see if that was going to happen. She shook her head pleadingly, knowing that was a wasted effort but she wanted it on the record. \n\n\"Please Sir,\" she said, her voice raising with her excitement. \n\nAs did her hips, which were plotting against her as they began to thrust into her fingers. She didn't even realize it until she looked down at her hand, which was now like the little Dutch boy with his fingers in the Dam, trying to plug the leaks. Her hand was coated with her sex juice. She hoped he didn't think she came, that was about to happen anyway as she couldn't stop looking at how erotic it looked to finger herself with Gavin watching. \n\n\"Please!\" she gasped as her entire body shook. \"Sir!\" \n\n\"Ok little one,\" he smiled. \"Cum for me!\" \n\nHer head dropped back and her open mouth scream was silent as her orgasm took hold of her body and her voice and forced it into rigor mortis. The locking of her joints made fingering herself difficult but her orgasm hung there on the precipice, not releasing the way her head begged for it. It seemed even her orgasm was conspiring against her to drive her mad. \n\n\"Don't stop fingering yourself,\" he warned her. \n\nShe nodded because her voice was gone! What he didn't understand was, so was her muscle control. Her orgasm was being mean and not releasing her. \n\nWhen it did, it gushed from her, her voice unclogging in her throat as she let out a breathy scream of pleasure, it echoed off the empty room she was in, bringing a smile from him. \n\n\"Don't stop,\" he reminded as her cum squirted from her, shooting out onto her hand like she was peeing there. Her smile permanently plastered on her face as her fingers made gush after gush exit from her body, coating her hand first, then it leaked to the bed coating the bed sheets. \n\n\"HOLY FFFUUUUCCCKKK!\" she let out as she continued to pummel her clit with her fingers. Watching as shot after shot sprang from her. When her body stopped squirting, she nearly collapsed, her body becoming limp. \n\nShe looked to the screen and saw Gavin wink at her. \n\n\"Oh my God!\" she said in interrupted gasps. \"I thought it was only you who could make me do that!\" she said her chest heaving, the words coming out broken like she had just run a marathon. \n\n\"I am,\" he said firmly. \"Tonight I just used your hands to do it.\" She looked at her hand and it was completely soaked. As if she had put her hand in water up to her wrist. \n\n\"Set the computer on the stand next to the bed,\" he told her. \"I want to watch you sleep.\" \n\n\"Yes Sir,\" she gasped as her breath slowly came to her. \n\nShe moved the computer to the night stand. \n\n\"Goodnight, my love,\" she told him. Exhaustion coming to her quickly now. \n\n\"Goodnight, Beautiful,\" he said back. \n\nShe fell asleep with him watching, she woke some time later. She didn't know how long she had slipped into the land of Nod. But he was still watching her. \n\n\"You're still watching me?\" she asked him sleepily. \n\n\"How can I possibly sleep when I have opened a window to heaven?\" he said shaking his head as it rested on the pillow. \"Not possible, not with you there, and me here. No I'll be watching you until forever.\" \n\nShe smiled and kissed her fingers and pushed it to the screen. \n\n\"I love you,\" she whispered. \n\n\"I love you more,\" he winked back."
    ],
    "authorname": "CJT",
    "tags": [
        "anal",
        "showering",
        "webcam",
        "masterbation"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/secret-smiles-and-three-little-words-pt-33"
}
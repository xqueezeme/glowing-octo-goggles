{
    "title": "The Big Tits Club Ch. 37-38",
    "pages": [
        "-- CHAPTER 37: Square One --\n\n****\n\nThis sucked.\n\nThis really, really sucked.\n\nMore to the point, my dick WASN'T getting sucked, nor was it getting fucked, neither.\n\nNo hand jobs. No blowjobs. No titfucks. No pussy. And definitely no anal.\n\nNothing.\n\nThey wouldn't even KISS me.\n\nIf Naimh couldn't do it, neither would they.\n\nSeriously, it hadn't even been seventy-two hours since the BTC's proclamation of female solidarity, and already I was on the verge of cracking. The idea of staring off into the abyss of celibacy after an incredible few months of ramming my dick into the holes of six outrageously beautiful busty bisexual cumsluts with a thing for slurping my creampies out of each other's bodies was almost more than I could bear. And that Little Mermaid plastic VHS clamshell case was looking more and more enticing.\n\nI mean yeah, part of me figured I should just let bygones be bygones, invite Naimh over to my house and plow my dick right up her ass to end the whole fucking thing. But the reality is that she meant so much more to me than just a collection of holes to be used. I really did care about her and care about our relationship, and perhaps hearing her scream her ex-boyfriend's name had actually fucked me up a little more than I realized. I wasn't ready to just jump back in the sack and pretend that nothing had ever happened.\n\nZofi and Sam came over on Wednesday afternoon to study and do homework, and by that they actually meant doing homework, the way we used to do before the Holly incident. But just being around each other knowing we couldn't get jiggy with it around drove all three of us to distraction. Nobody could get any work done.\n\nZofi was horny and got in her head that even if she wasn't allowed to mess around with me, The Rule shouldn't stop her from having sex with Sam, right? Sam was kind enough to point out that while Zofi was technically correct, it would be ridiculously unfair for them to hook up with each other in MY house and prevent me from joining in. So in the end, the two girls packed up their books, each gave me a kiss on the cheek just to remind me they still cared, and left, abandoning me to my imagination of what they'd be doing to each other at Sam's house.\n\nI didn't get much studying done after that.\n\nThat first day I was too proud to masturbate. I had this egotistical idea in my head that the girls had each individually become addicted to my cock and that after a day or two of going through withdrawal, they'd scrap the stupid \"no sex\" idea and we'd all end up in a massive orgy together with me spraying gallons of cum all over their nubile bodies.\n\nThe thing is: Sam turned out to be right. Despite initially being against the idea of enforced abstinence, Naimh felt truly supported and cherished by the BTC taking such drastic action on her behalf. She went out of her way to thank the girls for making her feel special and wanted, which made the girls feel proud of their action and even more determined to see it through. And as soon as I saw them banding together in the bonds of sisterhood, I knew the moment would come that I'd have to resort to my own right hand.\n\nEspecially since Sam and Zofi had already proven that they wouldn't need to go celibate.\n\nThat moment came this morning (Friday) when I woke up with a hard-on that wouldn't go away. I needed to piss, but I also needed to cum, and poor me hadn't ejaculated since Tuesday night with Belle yelling \"You understand me?\" in my face. So in the end, I stood over the toilet bowl, closed my eyes, and jerked off to a medley of spank bank memories of all six of my beloved BTC girls. After squirting great globs of spunk into the bowl, I braced my hand against the wall in front of me, fought the urge to whine, and eventually my dick deflated enough for me to pee.\n\nBelle commented that I looked like shit when we met up to drive to school. Alice repeated that I looked like shit when she met us at the parking lot and gave me a fist bump instead of a ferocious kiss. I went about my day in a zombie state, unsure of how to think or feel. And while the girls took note of my mood, they pretty much just left me alone with my thoughts.\n\nStill, it was a Friday, a day that used to be the happiest day of each week. Seeking a sense of normalcy, the girls still planned to all come hang out at my house, I'd grill up dinner, and we'd cuddle up on the couch to watch a movie together.\n\nJust like old times. Right?\n\nBut they say you can't uncross a bridge. Likewise, you can't unfuck a girl. We'd already crossed all those lines, and returning to a semi-platonic state of \"look but don't touch\" with the BTC was NOT going to cut it. I needed to feel SOMETHING, and with that in mind, early in the afternoon I went over to the loveseat, patted the cushion beside me, and asked, \"Who wants a backrub?\"\n\nImmediately, five girls all turned to stare straight at Sam as if asking for permission.\n\nRaising her eyebrows, Sam cocked her head to the side and asked, \"You gonna give Neevie a backrub, too?\"\n\n\"Totally,\" replied without hesitation. \"She can even go first.\"\n\nAlice's hand shot up. \"I call 'next'!\"\n\nNaimh waved the Korean girl her over to me. \"You can go first. I want a backrub too, but I need a minute, alright?\"\n\nI shrugged like it was no big deal either way. Alice was quick to hop over, but rather than take the seat beside me, she gestured for me to back up and spread my legs, and then she sat down right in front of me. A moment later, she whipped her t-shirt over her head and reached back to unclasp her bra.\n\n\"Alice...\" Sam intoned reproachfully.\n\nAlice shrugged. \"What? It's not like he's never seen my tits before.\"\n\nSam looked at me. \"You gonna be cool if Neevie takes her bra off?\"\n\nI swallowed thickly. \"Uh, I'd probably try to fuck her brains out.\"\n\nNaimh lit up. \"Well in THAT case...\"\n\nI sighed and tapped Alice. \"You can unhook it, but keep the cups on. Like in the old days.\"\n\nAlice pursed her lips but nodded reluctantly. She held her hands over her chest, keeping the bra cups covering her breasts while allowing the shoulder straps slide down her upper arms.\n\nI stretched my arms a bit and cracked my knuckles. Less than a minute later, Alice was slumped forward before me, her chin against her chest and her spine going limp as she moaned and groaned rapturously.\n\nMari glanced over at us and stopped her conversation with Belle. Evaluating the ecstatic pleasure on Alice's face, she announced, \"I call 'next'.\"\n\n\"Get in line, bitch!\" Zofi hollered from across the room. That made everyone laugh, and for a little while I started to relax. Zofi walked up to me and Alice, set two bottles of beer on the coffee table, and then sauntered away.\n\nI actually had to focus to remember my routine. I'd been making the girls relax and sigh in contentment using... ah... a different part of my anatomy, and a few times I caught myself missing a step here or there. Not that Alice seemed to mind or notice. Her head was lolling and she never really stopped groaning.\n\nCompleting the final set of firm moves, I let up on the pressure and gave pretty much every square inch of Alice's bare-naked back a gentle caress. I trailed my fingertips downward, ever so gently ticklish to make her quiver. And I finished up by bending over and giving her a teasing kiss on the back of her neck, my signal to the girl that I was all done.\n\nAlice remained hunched over, eyes closed and breathing deeply as if in a trance. I waited patiently, giving her space to come back down to earth from her higher plane of existence.\n\nEventually, Alice inhaled deeply and sat up. She turned around, forgetting about her bra, and as it slipped away from her big boobies my eyes dropped down to her exposed nipples. She looked ready to fall into my arms and kiss me, but while I'd sent her off to Dreamland, I hadn't forgotten The Rule myself. So I held up a hand between us so that she ended up kissing my fingers, and when that happened, she suddenly remembered herself and collected her bra back against her chest.\n\n\"Sorry,\" Alice mumbled in a bit of a daze.\n\n\"No apologies necessary.\" I looked up. Naimh sat on the couch nearby, patiently waiting her turn. I'd lost track of where she'd gone when I had started on Alice, but she'd obviously returned. \"You ready?\"\n\nNaimh's emerald-green eyes were intense. \"Yeah,\" she replied thickly as she stood up and extended a hand out to me. \"Let's go.\"\n\n\"Go? Where?\"\n\nShe nodded upstairs. \"To your bedroom.\"\n\n****\n\nAt first I was confused. Wasn't the whole point of doing this to keep things 'in balance'? On the other hand, perhaps the point was to get me to cave and fuck Naimh so that everything could just go back to normal. Not just for the two of us, but for all of the BTC.\n\n\"Relax,\" Naimh said casually. \"I'm not gonna seduce you. I just want to talk in private while we're doing this.\"\n\nI didn't quite trust her. Hell, I didn't trust myself. I wasn't lying to Sam when I'd said Naimh and I had never had a long, truly emotional conversation since the urge to rip each other's clothes off kept getting in the way. Even her confession about Conor during Valentine's kept getting interrupted with Naimh having to repeat to herself, 'Valentine's. Friends. Don't ruin the plan.'\n\nBut I knew we needed to have these conversations if we were ever to truly put the past behind us. So I took her hand and let her help me up.\n\nGod help me, I stared at Naimh's ass the entire way up the stairs. I mean seriously, guys went seventy-two hours without having sex around the world ALL the fucking time, and it had really only been about sixty-five or sixty-six hours for me. But I had just gotten so spoiled having a bevy of willing beauties ready to bend over for me at the drop of a hat that being celibate for two days was making me jumpy. I was like a crack cocaine addict trying to quit cold turkey, ESPECIALLY because I had such fond (and plentiful) memories of the times I'd had this view of the gorgeous Irish redhead's ass, usually with my dick plunging in and out of it.\n\nPart of me wanted to just say, 'Fuckit. The girls want me to nail her, she wants me to nail her, Imma gonna nail her'. I was certainly horny enough to want to go through with it. But there was a reason I'd held myself back. I knew that caving right now - just bending her over and shoving myself in -- before we'd established the parameters of our new relationship, would basically be giving tacit acceptance of the parameters of our OLD relationship, making promises to Naimh of love and dedication that I wasn't prepared to fulfill. And when I inevitably fell short of those promises, it could ruin us forever.\n\nWe had to figure that stuff out first. If all went well, maybe we could even get all this stuff worked out right here and now and start fucking right away. The possibility of imminent sex was certainly motivation to put the past behind us and get things worked out sooner than later. So I took deep breaths and focused on what was important here: my emotional relationship with a girl who I cared a great deal about, who was very important to me, and who... if I fucked things up... could very well lead to the destruction of the BTC.\n\nIn a nutshell, that train of thought summarized everything I needed to know to confirm I was making the right decision by breaking up with her. I cared about Naimh, and still loved her in a way, but our physical relationship had turned out to be far more important to me than our emotional one. And when push came to shove, the BTC was more important to me than her. My goal in this conversation was to make sure the club remained intact. Saving my boyfriend/girlfriend relationship with her was a far distant second place to saving my relationship with the group.\n\n\"The bed okay?\" she asked as soon as we went into my room.\n\nI closed the door behind us and nodded, replying verbally, \"Yeah, that's fine.\"\n\nThe redhead went to the foot of my bed and started to disrobe. She'd worn only a loose peasant blouse with a wide neckline that presently hung off her right shoulder, and quickly took that off while brushing her long copper-red hair to one side of her neck and down her chest. Then, she lay face down across my mattress before reaching back to unhook her bra.\n\nI climbed onto the bed and straddled her butt. I'd gotten an erection massaging Alice, the same as I always did when putting my hands so intimately on one of the girls, and although it had flagged somewhat it revitalized itself as I stared down at my ex-girlfriend's freckled skin. Taking a deep breath, I leaned forward to start rubbing her neck and shoulders. And with a sigh, she closed her eyes and let me work her over.\n\nDespite inviting me up here to talk, she didn't say anything for a long time, just enjoying the feel of my hands as I massaged her. It was almost criminal how few backrubs or other massages I'd given her during our brief relationship. It just seemed that we always ended up getting naked and fucking each other's brains out instead. I decided to make up for that by giving her a longer massage than my usual routine, which had been designed for efficiency to allow me to conserve enough strength to get through six girls in one afternoon. I didn't hold myself back this time and focused on really soothing every one of Naimh's sore muscles.\n\nShe was REALLY stiff, and after all, I knew that was mostly my fault.\n\nAfter doing her neck, shoulders, and back, I slid further down the bed and started peeling back the redhead's pants. They were a little tight, but not as stiff as jeans would have been, and with a little bit of work I was able to slide them off, leaving her in just her panties and the unhooked bra. Her legs remained slightly parted, and I could see the way her dampness visibly darkened her panties in the crotch. But despite the temptation to whip out my cock, shove the strap of her panties aside and bury myself to the root, I took a deep breath and started working her legs.\n\nI was massaging her feet when Naimh finally sighed and spoke. Her first words were, \"I don't deserve you.\"\n\n\"Hmm?\" I asked distractedly. She'd been silent for so long and I'd been so focused on stretching her toes that I didn't really register her words at first.\n\n\"I said I don't deserve you,\" she repeated even more quietly than the first time, although this time I was actually paying attention. \"Any other ex-boyfriend wouldn't have anything to do with me right now. And yet here you are... massaging my feet.\"\n\n\"The BTC must remain 'in balance',\" I stated evenly.\n\n\"You didn't give Alice a full-body massage.\"\n\nI shrugged. \"I might've if she'd come up here with me. I'd give any of the girls a full-body massage, you know that.\"\n\n\"None of the other girls screamed their ex-boyfriend's name during sex.\"\n\nI stopped massaging for a moment. \"You know what? I think that should be the very last time either one of us mentions that ever again. You apologized and said that was a one-time accident. I accepted your apology and forgave you. As far as I'm concerned, it's water under the bridge and you and I are back at square one.\"\n\n\"Square one?\" She pivoted slightly onto her right shoulder and looked back at me. With her bra remaining on the mattress, the position gave me a tantalizing glimpse of side boob.\n\nI tried not to look and said, \"Start over. Start fresh. You have to understand that I have no interest in punishing you for an accidental slip of the tongue. I don't hate you, don't resent you. At the very, very least, you're back to being just 'one of the girls', and that's the worst case scenario here. After that, it's just building back up to where you and I need to be.\"\n\n\"Any chance of building all the way back up to being boyfriend and girlfriend again?\"\n\nI sighed. \"Perhaps. But not today.\"\n\nShe pursed her lips and nodded, setting her cheek back down on the mattress. I went back to massaging her feet. And after a while, she glanced back at me again. \"Thank you, by the way, for forgiving me. That's very generous of you.\"\n\nI waved her off momentarily and went back to massaging. \"I told you: it's done.\"\n\nShe nodded, but furrowed her eyebrows and looked back at me. \"Is that what YOU want though? To get back to being boyfriend and girlfriend again? I've already made my answer to that question pretty clear.\"\n\n\"Yes, you have. But at the same time, I'm not entirely sure why.\" I finished up with her legs and walked around the side of the bed. Taking hold of her left arm, I started working on her shoulder and upper arm. Naimh moaned and closed her eyes as the pleasurable sensations trickled into her brain. \"In plain and simple fact, if all you want is for me to ram my dick up your 'arse' every other day, we can do that without being boyfriend/girlfriend. So is it the title you really want? The position of priority it gives you? The right to override all the other girls and say, 'He's mine!'?\"\n\n\"What? No.\" Naimh opened her eyes and looked up at me again. \"I LOVE you, Matty!\"\n\n\"Do you?\"\n\n\"Yes... Very much...\"\n\nI sighed. \"I want to believe that. And yet, as far as I can tell, our relationship was entirely physical. We spent months lusting after each other, and once we finally had permission to act on that lust we dove in headfirst and never looked back. Good fucking lord you're so gorgeous and sexy and just looking at you right now makes me wanna... Mmmph.\" I had to let go of her arm, bite down on my own fist, and get off the bed to turn around and walk away for a moment.\n\nNaimh giggled behind me. \"You say that like me being so gorgeous is a bad thing.\"\n\n\"Of course it's not a bad thing, but even you said on Valentine's Day that we're so sexually compatible that all we ever do is fuck.\"\n\nShe sighed. \"I did. Don't get me wrong, I wanted to start this relationship because I've wanted to fuck your brains out since the first day I met you. But I ALSO wanted all the sweet romantic stuff people dream about when they write poems about true love. We never really got to have that. I mean, you took Zofi out on that incredible Audrey Hepburn day and I admit: I got super jealous of her.\"\n\nI frowned. \"Did you not enjoy the Napa Day with the mud baths and everything?\"\n\n\"Of course I LOVED it, and I want more days like that. I want those days with YOU. And now that I've put my foot down and gotten my dad to realize that he's not gonna lose his baby bird just because I'm in love... Don't you see? Now we FINALLY have a chance to have the relationship we always wanted.\"\n\nI took a deep breath and sighed. \"The problem right now is: I don't know if I love YOU that much.\"\n\nNaimh frowned. \"What?\"\n\nI took another deep breath and exhaled, this time letting the air out slowly in a long, drawn out stream. I went back to massaging her arm, but this time Naimh pulled it away from me and turned onto her side. The movement exposed her big Double-D tits, and my eyes automatically gravitated to them. But she caught my gaze and covered herself with an arm before slipping her bra back on and fastening it behind herself.\n\nI waited until she collected herself and sat up straight. Her cleavage was still incredibly distracting, and with a laugh Naimh reached out to grab her peasant shirt and pull that on as well.\n\nOnce she was finally dressed, I turned to face directly outward from my bed. Hanging my head, I took one more deep breath and finally admitted what I hadn't wanted to admit for a while. It explained everything about my recent behavior, and it explained why even though Naimh's screaming her ex-boyfriend's name had hurt me, it hadn't hurt me that badly.\n\n\"I don't really love you, Neevie,\" I said quietly as I turned back to face her, being sure to look into her eyes with open honesty as I said it. \"I mean, I love you, but I love you like I love all the BTC girls. That's not to say you aren't special, because you are. And that's not to say you aren't unique, because you are. You're still the most gorgeous thing I've ever seen, and even in the midst of all this turmoil, I want nothing more than to tear your clothes off and fuck you within an inch of your life. But boyfriend/girlfriend? Romantic love? We took a shot at that. We discovered how we truly feel about each other. And even though things didn't really end naturally, it still came to an end, and now we have our answers.\"",
        "\"I LOVE you, Matty. I'm IN love with you.\"\n\n\"I don't have those same feelings for you.\"\n\n\"You never got a chance to develop them.\"\n\n\"We had a chance. We became boyfriend/girlfriend. We just spent all our time fucking instead of developing those feelings.\"\n\n\"Because of circumstances. Because of my dad's stupid lockdown. Yes, we carried the title, but you said it yourself. We never got to watch a sunset on the beach. We had a grand total of two dates and only what, six or seven weeks together? Give us TIME. Give us a chance.\"\n\n\"I don't think you're hearing me. We HAD time to connect if we'd really wanted to. We HAD a chance, but instead it was always hot and sweaty monkey sex. I couldn't even term it 'making love'. Now maybe we didn't have a lot of opportunities to watch romantic sunsets together, but we could have at least cuddled and asked each other what was on the other's mind. Instead, we always opted to squeeze in Round 2 in whatever time we had left.\"\n\n\"Well maybe if you weren't so good at getting hard for me again within minutes we would've cuddled instead of going for Round 2.\"\n\n\"Well maybe if you were a little less busty and beautiful I'd have taken longer to get it back up. I lusted for you. I STILL lust for you. You are ridonkulously gorgeous to me, and sexy, and oh my freaking lord your asshole is exquisite. But I do NOT want to lead you on into thinking we're going to last forever. I don't want to hurt you like that. We were having a lot of fun together, I'll readily admit that. But once your dad showed up banging on my door and I stopped to REALLY think about my true feelings for you, I realized that I don't have the same depth of feeling you really need.\"\n\n\"That's not true,\" Naimh insisted, moisture clear in her eyes.\n\n\"I'm sorry.\"\n\n\"You love me, I know you do,\" she blubbered, and the tears began to flow.\n\n\"Neevie, I never wanted to hurt you.\"\n\nHer eyes narrowed, and she inhaled sharply. Jabbing a finger at the doorway, she practically hissed. \"Who is it? Which one of them do you love more than me?\"\n\nMy head snapped back at the abrupt mood shift. \"Huh? What?\"\n\n\"It's Belle, isn't it? You were fucking my arse every day but really it was Belle you wanted to be with. Only SHE wouldn't give you the relationship you wanted so you settled for me instead.\"\n\n\"What? No. Seriously.\" I grabbed Naimh's hands and squeezed them tight. \"Look me in the eyes. I'm telling you plainly, it's not Belle. I'm not in love with Belle. Not like that.\"\n\n\"You're lying.\"\n\nI held her gaze and stated clearly, \"I've never lied to you before and I'm not lying now. It's not Belle, it's not Sam, it's not any of them. I love all six of you, but the more I stop to think about it, I'm not in love with any of you. Please believe me: I am NOT refusing to become your boyfriend again because I'd rather be with one of them instead, alright?\"\n\nShe doubted me. She wanted to continue doubting me. Perhaps it would have been easier for her to believe I was rejecting her because I'd rather be with Belle, rather than admit that there was some fault or flaw in herself that made her unworthy of my true love.\n\nI sighed. \"That night when you came to spend that first overnight with me, when Belle talked us into at least trying a relationship, you said you didn't want to regret never trying. You didn't want to always wonder if you'd missed out on the greatest love of your life out of fear and married someone else regretting the one that got away.\"\n\nThrough tears, she nodded. \"I remember.\"\n\n\"We took the chance. We wanted to find out if we could become something truly special. For me, at least, the answer was no. The sex was amazing, yes. The emotional connection? I'm sorry.\"\n\n\"We didn't have the chance to find out.\"\n\nI squeezed her hands and said, \"Perhaps. Maybe you're right and I'm being too dismissive of a time period when after one incredible weekend your parents locked you down and hampered any chance we had to develop into something more.\"\n\n\"Yes. Exactly. You ARE being too dismissive.\"\n\nI exhaled. \"Then we're back to square one. You're still one of the BTC. I still care about you, and if fighting for me, fighting for your love for me, is something you still want to do, I...\"\n\nAs my voice trailed off, she leaned forward eagerly, sensing that at least there was still a chance.\n\n\"This is the best I can do: I won't stop you from pursuing me. I won't stop you from trying to prove you love me the way you say you do. But I'm not going to just jump right back into our old relationship, either. It wouldn't be fair for me to dedicate that time to you and prioritize you over the others, and it would be false on my part to pretend to be in love with you when... at least for now... I'm not.\"\n\n\"I get it,\" she said with a smile and a nod.\n\nHer smile was a little too hopeful. \"Please, Neevie. I don't want to lead you on.\"\n\n\"You're not leading me on. You've said you don't love me like that, and it's up to me to prove to you otherwise.\"\n\nI blinked, not a hundred percent sure I'd said those words in quite that way. She also looked three seconds away from jumping me, so I held up my hands. \"No sex. Not right now. As much as it sucks and as much as I want to just lay back and let you go for a ride on top of me, you have to realize that having too much sex is what brought us to this point in the first place.\"\n\n\"Maaatttyyy...\" she whined.\n\n\"Our previous relationship was based entirely on sex. If all you want to prove is that we are sexually super-compatible, then there's nothing left to prove. Our sex is AMAZING; I already know that. If you're trying to prove that emotionally we should be a romantic couple... there's a lot of work to do on that.\"\n\nHer shoulders sagged, and she thought about that. Nodding slowly, she took a deep breath and exhaled. And when she looked back up at me, the brightness in her emerald-green eyes had dimmed somewhat.\n\nShe no longer looked on the verge of jumping me.\n\n\"I get it,\" Naimh stated evenly, and she thrust forward a hand, proffered for me to shake. \"And I say: challenge accepted.\"\n\nI arched an eyebrow, but with a chuckle, I reached up and shook her hand.\n\n\"We belong together. I'm going to prove it to you,\" she stated firmly.\n\nI smiled at her confidence. \"I sincerely hope you do.\"\n\n****\n\nThe other girls still wanted backrubs when Naimh and I returned downstairs. With the \"no sex\" moratorium still in place, it was the closest we could get.\n\nZofi had indeed called dibs before Mari, hence her \"get in line\" comment earlier, so I turned her into a limp puddle before declaring I needed a break and downed half my beer. Five minutes later, I returned to the loveseat and Mari crawled into my lap. She hugged me firmly, gave me a quick kiss, and finally turned around so I could start my backrub. She wasn't very good about keeping her bra cups over her tig ol' bitties, and I wound up getting a lot of side boob while rubbing her. But Naimh was talking to Sam and nobody seemed inclined to stop us.\n\nI did notice that Alice and Zofi were missing. When I asked Belle where they'd gone, the strawberry-blonde girl sighed and gestured up the stairs. \"They're fucking each other in your bedroom.\"\n\nI blinked. \"Excuse me?\"\n\nShe shrugged. \"What? The Rule says we can't mess around with you. It doesn't say anything about us not messing around with each other. Otherwise Sam and Zofi are in a LOT of trouble!\"\n\nBelle's voice had crescendoed toward the end of that, and Sam glanced over at us, asking, \"What?\"\n\nMari giggled and Belle waved her off. \"Nevermind.\"\n\nWell, I did mind a little. I held my hands out to Sam asking, \"What happened to it being unfair for the girls to bang each other in my house without me?\"\n\nSam shrugged, got up, and sauntered over to join us. \"You're welcome to complain to Alice.\"\n\nI just sighed and went back to work on Mari.\n\nAfter Mari, Sam set down her beer and came over to sit down in front of me and get her backrub. After she was done, I cracked my knuckles and invited Belle to come over, but she shook her head. \"I still get to stay overnight because that's a special Belle rule. You can give me my massage then.\"\n\nSam hadn't walked away yet, still putting her shirt back on, and she pursed her lips and frowned. I gathered that the discussion of whether or not Belle would continue her overnights had either never been discussed or was still a matter of some debate. But rather than contradict her, Sam just sighed and walked away.\n\nBelle gave me a little smirk before downing the rest of her beer.\n\nIn the end, the seven of us played card games, ate dinner, and then gathered together to watch a movie. I sat in one corner with Mari as my single cuddle partner and Alice beside her. Sam and Zofi were on the loveseat. Naimh was on the armchair, and Belle had grabbed a barstool from the kitchen and sat behind us.\n\nNaimh and I were much more relaxed around each other throughout the rest of the evening, and although the \"no sex\" moratorium had not yet been lifted, at least it was clear that our conversation had resolved much of the initial awkwardness and everyone had the sense that things would return to normal soon. At this point, it was really a matter of finding the appropriate time for Naimh and I to resume the physical part of our relationship (and subsequently resume with the rest of them as well).\n\nAnd then Alice started taking bets on when I'd cave. Mari and Zofi thought it made the most sense for us to resume our \"Neevie Mondays\". Sam insisted that betting on the outcome or even discussing such a bet would be an impediment to Naimh and me finding a natural solution that felt right to both of us. Alice muttered, \"Whatever,\" and then proclaimed her belief that we'd find a way to hook up tomorrow so everything could go back to normal right away. Naimh laughed and said that was just because Alice herself was super-horny and wanted things to go back to normal right away. Belle had no comment on the matter.\n\nAt the end of the night, Belle and I said our goodnights to everyone. Once the door was closed, she immediately turned to me, wrapped her arms around the back of my neck, and pulled me down for a ferocious kiss.\n\nPleasure exploded in my brain and felt like drinking from a cool, clear oasis after years of wandering out in the desert (cough seventy hours). She tightened her grip, which nearly pulled me down, so instead I reached down to scoop her up into my arms and she wrapped her legs around my waist, holding onto me like a koala bear until I planted her back against the door and started to really kiss her.\n\nA moment later, I realized what we were doing and pulled back. \"Waitaminute. We're not supposed to be doing this.\"\n\n\"I'm already sleeping with you overnight. Nobody's gonna freak about us kissing a bit, as long as it's not around them making them all jealous.\"\n\nThat made a certain kind of sense, so I shrugged and went back to making out with her. Of course, I may have been fooling myself for selfish reasons, but the point is that I accepted her reasoning at the time. Eventually though, we had to pause to breathe, and after setting her forehead against mine, Belle murmured seductively, \"I'd like that massage now.\"\n\nI grinned and carried her upstairs.\n\nOnce in my room, I gently lay my little lover face-down across my mattress. She let me disrobe her, starting with her shirt, and then her bra, and finally her jeans. I left her panties on, same as I had for Naimh, and then I went to work.\n\nAt first, it was a normal full-body massage. I worked her neck, shoulders, and back. Then, sliding further down the bed, I started rubbing Belle's buttcheeks on the way down to her legs when I noticed that they didn't really squish the way I expected them to. It almost felt like there was some obstruction preventing the buttflesh from coming together in the middle, and with a sudden realization, I peeled down the back of her waistband and gasped at the sight of a silver disc surrounding a flat blue crystal.\n\nIt's the big butt plug.\n\nThat information zapped my brain like a lightning bolt, and my eyes flew open. Belle was panting softly after moaning and groaning while I worked her body over. And she waggled her ass at me invitingly.\n\n\"I need you in my ass, Matty,\" she crooned.\n\nWe had only ever done this twice: once the morning after Valentine's when I first took her anal virginity, and then once more at the following Friday BTC group orgy. Anal with Belle had become that rarest of 5-star restaurant desserts, reserved for only special, special occasions, and my adrenaline surged at the idea of buggering the diminutive babe.\n\nEspecially after having gone nearly seventy-two hours without sex.\n\nAnd yet... I knew it was wrong. Making out with her downstairs had probably been wrong. Sleeping overnight with her was probably gonna piss somebody off too. I mean, maybe the girls would be okay with it, so long as we didn't have sex. If we were really rewinding things back to the way they were before blowjobs and hand jobs and titfucks, Belle and I had still been close back then and she could've slept overnight with me at any time.\n\nWho the fuck was I kidding? Belle and I hadn't spent the night together since we were seven before all this started happening, and I never should've agreed to let her stay tonight, either. Even if none of the other girls voiced any objections to Belle spending the night with me, I was certain there would be one or two of them lying in bed tonight wondering... fearing?... that something like this was happening right now. And then what? I'd have to either come clean that Belle and I broke The Rule and had sex and deal with that fallout, or stop this right now and tell them we'd cuddled overnight but abstained from hooking up.\n\nContinuing to not have sex would suck, but having to tell the other girls I'd banged Belle would end up being worse. I knew that.\n\n\"We can't do this,\" I stated quietly.\n\n\"Yes we can,\" she replied huskily. Her butt was up in the air a bit with her knees parted to the sides. It gave her plenty of room to reach a hand between her thighs and rub her pink pussy quite provocatively. She twisted her torso to look back at me, exposing her bare left boob. Its puffy nipple was rosy pink and protruding, just begging to be sucked. \"Come fuck me, Matty. I need you in me.\"\n\n\"The girls made an agreement. I can't do this with you until I get things with Neevie sorted.\"\n\n\"The girls made an agreement, but I never agreed to it. So much shit we do is just because Sam thinks its best and everybody goes along with her. I never once said, 'I agree.' I never once promised to keep my hands off you.\"\n\nI pursed my lips. \"That's a technicality and you know it.\"\n\n\"The world is full of technicalities.\"\n\n\"You know that doing this would piss the girls off.\"\n\n\"Fuck 'em.\"\n\n\"'Fuck 'em'? Can you hear yourself? These are your best friends!\"\n\n\"Don't need 'em as long as I have you.\"\n\n\"What the fuck is WRONG with you?\" I sat up, and despite the petite pretty girl continuing to wag her plugged-up ass at me while fingering her own pussy, I felt my cock deflate. \"The Belle I knew would NEVER betray the BTC.\"\n\n\"Well what if the BTC has already betrayed me? Huh? You're supposed to be MINE, Matty. And they're all taking you away from me!\"\n\n\"What are you TALKING about?\"\n\nOnly now did Belle finally stop masturbating. She sat up and turned around, making my eyes briefly yo-yo down to her beautiful bosom before I forced myself to focus on her face.\n\nHer livid, angry, opposite-of-sexy face.\n\n\"Those fucking bitches are taking away my dream!\" she yelled.\n\n\"What dream?\"\n\nIt was the wrong thing to say. I'd thought she was livid before, but now Belle lost it. \"What dream? WHAT DREAM?!?\" she balled her fists, raised them in the air, and started hammering me with them while I blocked with my forearms. \"OUR DREAM YOU FUCKING MORON!!! YOU! ME! TOGETHER FOREVER!\"\n\n\"Belle! Belle! Stop! Ah, fuckit.\" Surging forward, I grabbed both of her wrists and propelled her backward so that she flopped across my mattress. My superior weight pinned her arms down beside her head, and while she tried to raise her feet to kick me, I scooted up and sat down on her upper thighs as well. \"What the fuck is wrong with you? Are you on drugs or something?\"\n\nAll fight fled her, and she went limp beneath me. Turning her head to the side, she started bawling. Between Tuesday night's 'You understand me?' howling and this, I was seriously starting to wonder if she was bipolar.\n\n\"You were supposed to be mine forever,\" she whimpered.\n\n\"Didn't you tell Mari that you and I would NEVER get married?\"\n\n\"I said I needed to convince myself we'd never get married otherwise I'd never be able to leave you.\"\n\n\"Didn't you say I wouldn't be your one and only for the rest of your life?\"\n\n\"I told you to forget I ever said that and that you WOULD be my one and only for the rest of my life.\"\n\n\"And now you're hating on all 'those bitches' for taking me away from you when you've insisted to me all along that you're happy to share, that Matty's Little Cumslut is a voyeur who gets off watching me fill their wrecked bodies with hot jizz. I feel like I'm getting a TON of mixed messages here.\"\n\n\"They ARE bitches who are taking you away from me. I'm happy to share you, but only when I know I'm your Number One.\"\n\n\"Number One?\" I frowned. \"Is THAT why you've been asking Sam for help with deep-throating? Some kind of Sam competitive need to try and be my favorite?\"\n\n\"What? No. I want to be able to deep-throat you just because I want to be able to give that to you. But your favorite? I already thought I was.\" She stared up at me, a world of hurt in her eyes. \"I thought I'd ALWAYS been your favorite, even when you were dating Neevie. What you shared with her was just sex, but you shared EVERYTHING with me. I never had to try and convince you to make me your favorite because I always was.\"\n\nShe started crying, and I released her wrists, although I didn't get off her legs just yet.\n\nShaking her head, Belle sobbed and added, \"Until everything changed.\"\n\n\"What are you talking about? Nothing's changed. I still spend a lot more time with you than everyone else. I still have sex with you more than any of the others. I still share everything with you. I love you. I'll always love you.\" I arched an eyebrow. \"You understand me?\"\n\n\"Yutkmefrgntd,\" she mumbled, avoiding eye contact.\n\n\"Wait, what?\"\n\nShe turned her head to stare up at me again. The pain was evident in her eyes, and she took care to slowly enunciate every syllable as she accused, \"You take me for granted.\"\n\nI frowned. \"What makes you feel like I take you for granted?\"\n\n\"Because you do. You assume I'll always be there for you. At first, I liked it. It showed how much you depend on me. But after a while, I started to realize how much you ignored me. You're always more excited to fuck one of the others instead of me. On Fridays you're always so careful to satisfy the other five and don't pay any attention to me because you know I'm staying overnight and by then you're already wiped out. I'm the boring housewife waiting up in bed while my studly husband pounds his secretary up the ass at work. I'm expected to have dinner on the table and the floors neatly vacuumed by the time you return.\"\n\nI blinked. \"Where in the world did you come up with THAT?\"\n\n\"I'm the old and boring. Been there, done that. Like there was that week or so when Zofi was all you could think about. You talked to me every day about her and it was always Zofi this and Zofi that. You literally left me alone in your bed so you could go take her on that incredible Audrey Hepburn date. I had to wake up extra early just so we could have sex before you abandoned me unfucked.\"\n\nI rubbed my forehead. First Naimh and now Belle. If I'd known Zofi's date would get me into so much trouble, I wouldn't have done it.",
        "Well, no, that's not true. It was one of the highlights of my life. But still.\n\n\"Even this thing lately with taking Alice's virginity. That Kama Sutra shit she pulled got you SO worked up and excited. It made sex with me seem so... vanilla.\"\n\n\"Belle...\"\n\n\"You wax poetic about Mari and her 'body built for sex'.\"\n\n\"Belle...\"\n\n\"And you've made CLEAR that I can't measure up to Neevie in the bedroom department, so it makes sense how you were always more excited to fuck her instead of fuck me. I'm the microwaved meatloaf leftovers from the fridge. She's the grade A prime rib from the steakhouse.\"\n\n\"Then why did you push for her and me to get together? Seriously, YOU were the catalyst for our relationship.\"\n\n\"You're right. I WANTED you to start dating Neevie. It had always been clear your attraction was more physical than emotional. I needed you to date her, get her out of your system, and realize that beyond white hot sexual chemistry there was nothing else there. As long as you were still fixated on her, you could never truly be with me.\"\n\n\"You WANTED us to fail? That's kind of messed up.\"\n\nShe shrugged like it was no big deal. \"I was right, wasn't I?\"\n\nI scowled and pursed my lips.\n\n\"And then out of nowhere there was Sam.\" Belle exhaled slowly. \"She has been super nice to me with the butt plugs and the Matty-sized dildo I still can't quite get down my throat no matter how much I keep practicing. I feel guilty for resenting her because she can be so selfless, always thinking of the needs of everyone else before hers. You think SHE wants to abstain from fucking you? Hell no. But keeping the BTC in balance is important to her and she'll sacrifice her wants and desires to keep Neevie in the group. I know she's super in love with you, that she dreams of marrying you and having your mom for a mother-in-law, even when she tells herself not to think that stuff. You're a distraction from her career goals. And yet...\"\n\nBelle's voice trailed off, and she bit her lip and shook her head rather angrily. \"You have NO idea how much it fucking pissed me off to come sneak into your room intent on comforting you after the whole thing with Neevie and her parents went down only to find HER naked in bed with you already. I'M the one you're supposed to find solace in. -I- was the one who was going to nurse you back to health in the aftermath. ME. Your Annabelle. Your One True Love.\"\n\n\"Then why have you always insisted that we NOT start dating or anything?\"\n\nShe stared up at me, a world of hurt in her eyes. \"Because I'm scared.\"\n\nShe said nothing further. After all those rambles about the housewife analogy, about Zofi and the Audrey Hepburn date, about Naimh and physical chemistry, about Sam and the dildo and the mother-in-law, it was a bit of a surprise for her to say nothing other than, 'I'm scared.'\n\nLooking down at her now, pinned beneath my weight, sobbing and now holding her hands over her face while she cried her poor little heart out, I was reminded that in the end she was just a teenager dealing with all the intense emotions of young love.\n\nSo was I, for that matter.\n\nMy first impulse was to comfort the small crying girl beneath me, to care for and protect my \"little sister\" and reassure her that everything would be alright.\n\nBut everything WOULDN'T be alright. Not if Belle continued on this path leading from sweet \"I'll love you forever\" down to psychotic \"You are MINE forever whether you like it or not\".\n\nI took a deep breath and gently pried her hands away from her face. I got off her lap and pulled on her arms so that she sat upright beside me. I found her shirt, tossed it to her, and with a stern look, I stated in a humorless tone, \"Okay, we need to TALK.\"\n\nShe looked at me like I was crazy. \"We've BEEN talking.\"\n\n\"No, you've been bitching and I've been listening. But now we're gonna talk about where this is going. And it starts with this: I need you to give me my house key back.\"\n\nBelle blinked. \"What?\"\n\n\"My house key. The one Mother gave you. You're going to give it back to me.\"\n\n\"Why?\"\n\n\"Because I can't trust you right now. I can't trust that if I'm sleeping overnight with one of the other girls you won't sneak in around midnight and smother her in her sleep.\"\n\n\"That's insane.\"\n\n\"So is hanging out all day with our friends with a giant butt plug in your ass just waiting to say, 'Fuck you bitches!' That's not a lapse in judgment. That's preparation, intent, and malice.\" I held my hands out and gave her a look that pretty much said, 'I rest my case.'\n\n\"I didn't mean...\"\n\n\"Oh, you meant it alright.\"\n\nShe shook her head. \"You're casting everything in the worst possible light.\"\n\n\"I'm casting it in LIGHT, period. If I'd succumbed to the temptation of your ass and helped you burn down the BTC, I would never have forgiven myself. We're at a critical point, and we're gonna stop the overnights until you and I get this shit figured out.\"\n\n\"Why are you doing this to me?\" she whimpered, still clutching her shirt to her chest.\n\n\"Put the damn shirt on, and give me my key. We're not continuing this conversation until you do.\"\n\nOnly now did Belle seem to realize how far she was in deep shit and started crying. But after swallowing thickly, she put on her bra, pulled on the shirt, and then went to her purse to retrieve her keys. She removed a familiar one with a red plastic loop around the key head and handed it to me. I made a mental note to add it to my own key ring for safekeeping.\n\n\"There, happy?\" she muttered through tears, her eyes already turning red.\n\nI took a deep breath, exhaled, and forced myself to relax. Taking the key back gave me something concrete to hold onto, and now that we'd taken that step, a lot of my anger started to melt away. \"Look, you said 'I'm scared.' I'm gonna assume that means you're scared of losing me.\"\n\nShe nodded silently but inhaled in shuddering breaths, still trying to regain her composure.\n\n\"You're scared I'll end up falling in love with one of the other girls and marry her instead of you?\"\n\nShe nodded again, still quivering a little.\n\n\"We're eighteen, B. Neither of us is getting married for a long time to come.\"\n\nShe gulped and shrugged and gave me that scared look again.\n\n\"And right now, you are FAR more in danger of losing me because I'm gonna kick you out of my house and swear to never see or talk to you ever again than because of me falling in love with someone else. I still can't believe you'd betray the others by seducing me. What were you thinking?\"\n\n\"I was thinking I had a chance to make you happy after three days of going without because I LOVE you.\"\n\n\"I KNOW you do! And I love you! I've always loved you. And I will continue to always love you. But if you keep turning into this psychotic stalker sneaking into my bedroom to watch me sleep I am going to STOP fucking loving you right now!\"\n\n\"I'm not psychotic.\"\n\n\"Well you coulda fooled me!\"\n\nBelle clasped both hands over her face, took several deep breaths, and visibly focused on composing herself.\n\nI shook my head, stood up, and paced away from the bed.\n\n\"Okay...\" she began after a minute or so. \"I'll admit that I didn't really think through all the consequences of seducing you tonight.\"\n\nI frowned. \"On Tuesday you said you'd fucking burn down anyone and anything that ever tries to get between us.\"\n\nBelle grimaced and covered her face with her hands again. \"Okay fine, that sounds pretty psychotic.\"\n\n\"Damn straight it does.\"\n\n\"I just... Showing up here with a butt plug is not in the same category of burning down everything. I didn't threaten to kidnap you, throw you in the trunk of my dad's car, and drive us to Mexico.\"\n\nI blinked. \"The fact that you have such a detailed plan isn't very reassuring.\"\n\n\"I'm not psychotic!\"\n\nI held out both hands palms-up and looked skeptical.\n\n\"I was just gonna seduce you! That's all! I'm horny and you're horny! Sam can have her fucking Rule but I thought, 'You know what? That rule doesn't apply to us. And to be fair, I didn't really think through all the consequences of giving you a blowjob after the Halloween party, or to keep blowing you in secret for two weeks after that, and I think things still turned out pretty well, didn't they? I thought maybe we could still keep each other satisfied while you work through your issues with Neevie. I genuinely didn't think of it in terms of 'betraying' the BTC. 'Betray' is such a strong word. I mean, they already know I'm spending the night. I'm sure half of them already assume I'm seducing you right now.\"\n\n\"And resenting you for it. This is the kind of shit that will fracture the BTC and you know it!\"\n\nShe put her face in her hands and shook her head. \"I guess... I guess I thought we could get away with it. I don't REALLY want to upset them all. I...\" She sighed and took a deep breath. \"You wanna know what I was thinking? I was thinking of YOU. I was thinking about how much you already look like shit after not getting laid for three whole fucking days. Nevermind that all the rest of us haven't gotten laid for three days and we're managing to not fall apart at the seams.\"\n\n\"I'm not falling apart at the seams,\" I muttered defensively.\n\nShe just gave me skeptical look. Then she sighed and shook her head. \"I've always been the one you talk with to feel better. I thought this was my big chance to really make a difference with my body. I already know I don't stack up with the other girls physically. I'm the only little shorty in the club. My boobs aren't big enough to give you a proper tittyfuck. No matter how much we try, you'll never just be able to slam your dick into my teeny little asshole unlubed like you can with some of the others. I'll never be able to just slam fuck my face all the way down to the base of your cock the way Mari does. But this? I thought I could do this. I thought I could make you feel better. That's what a girl in love DOES, you know? To show her love. To show how important someone is to her. Even when she's feeling taken for granted.\"\n\nHer tears were flowing again, even as she fought them off.\n\nI sighed. \"Look, B... If I've made you feel neglected or taken for granted, I'm sorry. That was never my intent. And I'm going to make a concerted effort in the future to make clear how important you are to me.\"\n\nStill wiping away tears, she nodded her agreement.\n\n\"But we need to change the dynamic of how we communicate a bit. I'm an open book with you, always telling you how I really feel, whether it's my infatuation with Neevie or my excitement to take Zofi out on a date. Now maybe it's unfair for me to talk in such glowing terms about other girls. It's only natural for you to feel jealous, and maybe it's better if I keep those thoughts to myself.\"\n\n\"What? No! I love that you share that stuff with me.\"\n\nI shook my head. \"I can't anymore. You've just proven that me telling you how I feel about the other girls fuels your jealousy. I know me being open like that makes you feel special, but it's pretty obvious that you can't actually handle the truth.\"\n\n\"But... that kind of open honesty is what makes us... US.\"\n\n\"Be that as it may, I can't and won't be so wide open telling you my feelings about the other girls. Not anymore. I won't be the frog boiling to death in the pot because he's too fucking stupid to realize it's getting too hot.\"\n\n\"What?\"\n\n\"Nevermind,\" I muttered with a sigh. Then, I took a deep breath and tried to give her a reassuring smile. \"Look, I promise I'll continue to be honest and open about how I feel about you. But that needs to go both ways. How you feel, and especially how you feel about ME... I need to know that. Your mood swings have been going from hot to cold to passionate to clingy and all over the fucking map lately. It feels like you've been keeping this jealousy bottled up for months now, and after leaking out in spurts, the fucking sewer line burst tonight. And maybe this is my fault for not probing more, for letting myself get distracted by the other girls instead of sitting you down and hashing this out weeks ago when I realized you were always deflecting me, but you have GOT to be more open with me so I can tell I'm about to step in a big pile of Belle shit before I actually do, alright?\"\n\n\"Alright.\"\n\n\"Look, I'm at a really weird point in my life. This break-up with Neevie has me reevaluating how I feel about all six of you, and it's really fucking with my head. If this were simple, I'd have just said 'fuckit' already and nailed Neevie by now, but it's not. I mean seriously: I'm horny and she's willing, and yet I'm still choosing abstinence. ME! But despite all that, I KNOW I love you, and will always love you, alright? I don't yet know if that's going to end up being romantic love. The Matty you grew up with will always be 'in love' with his Annabelle, but we're eighteen now and I still need to figure that stuff out. I...\" I took a deep breath. \"Right now at least, I'm not 'yours'. I'm not anybody else's either, but I'm definitely not 'yours', and I need you to recognize that.\"\n\n\"But you're supposed to be mine,\" she whimpered, grimacing as if I was stabbing her in the heart.\n\n\"Someday. Maybe. I dreamed that future a lot myself. But you and I are NOT going to ride off into the sunset in a pumpkin carriage just because of a dream.\"\n\nAgain, she grimaced and clenched her eyes like I'd stabbed her in the heart.\n\n\"Belle, we're not even dating, let alone on a path to Happily Ever After. I'm not your boyfriend, and honestly, I'm gonna tell you the exact same thing I told Neevie this afternoon.\"\n\nThat piqued her interest, and she looked up at me with a frown. \"What's that?\"\n\n\"If you really think we belong together romantically, I won't stop you from pursuing me. I won't stop you from trying to prove you love me the way you say you do. But I'm not going to just stop being with the others because you say so, and I'm not going to pretend to want a romantic relationship with you right now when... at least for now... I don't. I love you as my Annabelle. But I am NOT in the right head space to be 'yours' or anybody else's.\"\n\nBelle gave me a curious look. \"You really told that to Neevie?\"\n\nI blinked. \"Yeah, why.\"\n\nBelle snorted. \"Good lord you're in for it now.\"\n\n\"What did I do?\"\n\nShaking her head, Belle sighed. \"You dared Neevie to prove that she loves you. You thought that girl was all over you before? You have NO idea how crazy she's gonna get now.\"\n\n\"Well, I did tell her she had to prove it emotionally. Physically, she's already convinced me. Proving it emotionally is gonna be different.\"\n\n\"Well at least there's that.\" After taking a deep breath, she seemed to have been calmed down by thinking about something other than her own wounded feelings for me. But a moment later, she pursed her lips and narrowed her eyes. \"So what it sounds like you're saying is: Now I'm just one of the BTC girls to you. All six of us... equal... And if any one of us wants to escalate a romance to the next level, we'll have to convince you it's the right choice, that about cover it?\"\n\nI heard the venom in her tone and thought about my response. Clearly, the thought of being only equal to the other five did NOT sit well with her. \"Well, you're not just one of the BTC girls to me. You're still my Annabelle. The bottom baseline for us is you ending up my 'little sister' who I'll always love until the day I die. I just... I wouldn't abandon the entire BTC for you anymore. The others... they're too important to me now. Does that make sense?\"\n\nShe made a stink face, quite obviously not thrilled with that change in attitude. But a moment later she sighed and nodded, saying, \"That actually makes sense.\"\n\nI looked into her eyes. \"I'm serious. I need you to open up to me and not bury these feelings of jealousy anymore. Hot as it was at the time, having you screaming 'You understand me?' in my face while fucking the shit out of me was pretty scary. And if you start getting unhinged like that again, you're never getting this house key back.\"\n\n\"I'm SORRY, okay? I never meant to... It's just... This whole abstinence thing is KILLING me. I should've fought back when Sam suggested it in the first place. To be this close to you and not be able to hold you. Not be able to clutch your body against mine and feel your thickness filling me up from deep inside.\"\n\nI groaned and closed my eyes as well. \"I know. It kills me too.\"\n\n\"I love you, Matty.\"\n\n\"I know that.\"\n\n\"I want to be with you. Forever.\"\n\n\"I know that. But not tonight. And not any other night until this whole thing gets resolved.\"\n\nShe shuddered and hung her head forward.\n\nI was about to tell her to go home, but she looked so small and sad that just before the words left my lips, I felt my heart crack and couldn't bring myself to kick her out. Instead, I took a deep breath and said, \"Look, I'm going to take a shower... Alone... But...\"\n\nShe picked her head up, eyes brightening a little by the 'but'.\n\nI told myself I was going to regret this, but I went ahead and added, \"But we can still cuddle tonight if you like.\"\n\nAt first, Belle grinned eagerly. But a moment later she closed her eyes, made a stink face again, and sighed. After taking a deep breath, she opened her eyes and said in resignation, \"Actually... I think I'm going to go home.\"\n\nI blinked. \"Really?\"\n\n\"You're right. I've... I've lost control. I don't blame you for not trusting me right now. I don't really trust myself. If I stay here, I'm liable to mount you in your sleep.\"\n\n\"If you stay here, I'm liable to push it into you in your sleep.\"\n\nThere was a glimmer of my impish pixie in her eyes when she looked up. \"Sounds like a plan to me.\"\n\n\"No, no, I agree. It's probably best if you go home.\"\n\n\"Yeah... I mean, even if none of the girls said anything, deep down they're already resenting me for being here. But if we can tell them honestly that we had a big conversation and I went home to sleep in my own bed, they'll all be pretty relieved.\"\n\nMy heart sank a bit as I realized this was really happening. \"I'm going to miss you tonight.\"\n\nShe nodded. \"Me, too. But we both know it's for the best.\"\n\nI nodded as well, took a deep breath, and started heading for the bathroom.\n\n\"Hey Matty?\" Belle called after me.\n\nI turned to glance back at her.\n\n\"I'm really sorry about tonight. Actually, I'm sorry about Tuesday night too. I'm sorry about my behavior these last few weeks. You're right... I was getting a little unhinged. I let my jealousy fuel all these negative emotions, and I think I lost myself for a bit there.\"\n\nI walked back to her, held her head, and gave her a sweet kiss. \"It's already forgotten.\"\n\nHer eyes were still moist, but she managed to smile. \"Thank you for that. Not everyone would be so forgiving.\"\n\n\"I'm me. And you're my Annabelle.\"\n\nShe pulled me to her and kissed me again, this time with a lot more heat. It almost felt like she was going to try seducing me again, but just before she got that far, she broke the kiss and panted while staring into my eyes. \"Do something for me?\"\n\n\"What?\"\n\nBelle smirked. \"Hurry up and fuck the shit outta Neevie. I need you deep inside me again... and SOON.\"\n\nI chuckled. \"Maybe you should've taken Alice's bet.\"\n\n****\n\nBelle left, and I went to take a shower. I'd still gotten no relief, and while shampooing my hair I started remembering the sight of Belle's perky asscheeks split by that silver disc with the blue crystal in it, and before I could even open my eyes a new erection popped up. I automatically fisted it and gave myself a few half-hearted strokes before stopping. I was sick of this sex boycott and a little angry at Sam for starting it in the first place.\n\nAs far as I was concerned, the point about sisterhood solidarity had been made, and nothing further was to be gained by everyone continuing to hold out on each other. Resetting everyone back to platonic relationships was not only driving ME nuts, but most likely everyone else as well. Like I said, you can't unfuck a girl, and you can't uncross a bridge that's already been crossed. Staying 'in balance' wasn't possible anymore, as my feelings for each of the girls was on its own path now whether or not we individually had sex.",
        "Plus, this whole bit about pressuring me into resuming my sexual activities with Naimh when I didn't feel like it was the right thing for our relationship yet was just plain WRONG. If the roles were reversed and I was using group dynamics to coerce one of the girls into having sex with me before she was ready... I mean... that's what I'd spent the last several years trying not to do, right? That's why they felt safe around me. Because they knew I'd never push them like that.\n\nAnd now they were pushing me.\n\nI was done with this, and not just for the sake of getting laid. Dealing with Belle's near-betrayal tonight on top of all the other sexual frustration I'd been going through for the past seventy-odd hours had put me in a mood no longer conducive to putting up with all this bullshit. And it was with that thought squarely in my mind that I exited the shower, spent the bare minimum of time drying off, and went straight to the phone on my nightstand.\n\nI dialed quickly, got her mom, and apologized for the lateness of the hour. Two minutes later, she answered the phone, asking, \"Matty? Hey, what's up?\"\n\nI took a deep breath, set my jaw, and practically growled, \"We need to talk.\"\n\n****\n\n-- CHAPTER 38: All For One --\n\n****\n\n\"Wow, you still look like shit,\" Alice greeted when I opened the door Saturday morning.\n\nI rolled my eyes and took a step back, gesturing for Alice to come on in without really paying attention to her outfit. She was dressed in what I was starting to describe as her version of \"sexy geek chic\" attire, experimenting with different looks to see what felt comfortable for her and what got particular reactions from me, although in this case the effect was ruined by her comment about me looking like shit.\n\nI paid more attention when she walked in and turned around to face me while I closed the door behind us. Today she wore chunky black plastic glasses without lenses and an outfit that on the top half looked like it came from a school uniform, with a crisp white blouse with a red bowtie that matched her cherry red lipstick and a black cardigan. For the bottom half, however, she wore a super-short black miniskirt with a red belt that left her long, athletic legs exposed down to her black basketball shoes. With a bit of a smirk, she started unbuttoning the blouse starting with the buttons right over her cleavage, eventually parting the shirt open to reveal a diamond of exposed skin marginally covered by a lacy strapless red bra that enhanced her cleavage.\n\nI blinked, gawked at her tits, and moaned a bit under my breath.\n\nShe stared straight down at my crotch and the tent in my shorts. Snickering, Alice shook her head and started buttoning her shirt back up. \"Well that answers that.\" She turned and headed for the family room.\n\nI frowned and followed after her, asking, \"Answers what?\"\n\n\"Whether or not Belle seduced you last night. Clearly, the answer is 'no', otherwise you wouldn't have reacted so strongly for such a small amount of skin,\" she replied over her shoulder. She glanced back at me for just a moment but continued walking. \"I'm admittedly surprised. Pleased, but surprised. She looked like she had sex on the brain when we all went home last night.\"\n\nI shrugged. \"We had a conversation and ultimately decided it would be best for her to go home.\"\n\nAlice stopped behind the big couch and turned to face me. \"Surprisingly mature for the two of you. I'm not sure I would've been able to walk away.\"\n\nI arched an eyebrow. \"You gonna try seducing me today?\"\n\nThe beautiful Korean babe shook her head. \"Much as I'd like to, no. I mean... maybe if Belle had already cracked you, I might've considered it. But I care too much about Neevie to mess this up. Speaking of, I need to use your phone. I'm supposed to call her after confirming whether or not you and Belle broke The Rule.\"\n\nI sighed. \"Seriously?\"\n\nShe nodded. \"I should also let you know we're not gonna have a whole lot of time to play video games today.\"\n\nMy shoulders sagged. First the girls had decided to boycott my penis. Now they were taking away my video game time? How much worse was this gonna get? With a groan, I asked, \"Why not?\"\n\nAlice grinned. \"You'll see.\"\n\n****\n\n\"Ohhh... myyy... fucking... GAWD!\" I groaned gutturally while clenching the couch cushions to either side of me.\n\nNaimh looked up at me, her emerald eyes brilliant in the morning light coming through the big sliding door out to the backyard. That soft reflected light also illuminated her face, letting me see every freckle on her gorgeous face as she somehow managed to smile at me despite taking every last inch of my super long schlong down her throat.\n\nShe held the position for a while, breathing shallowly through her nose while continuing to watch the rapturous expressions crossing my face. But when she couldn't hold herself down any longer, she slowly withdrew all the way up and off my cock, gasping for breath.\n\nNodding slowly at the semi-circle of girls, she gestured toward my dick with her right hand. And eagerly, all five of them closed in.\n\nI'm getting ahead of myself again, aren't I?\n\nSo whatever else I may have been expecting when Alice told me we weren't going to have much time to play video games, getting a blowjob while all six of the BTC girls' faces closed in beneath my waving dick was not it.\n\nAlice's phone call with Naimh had been extremely cryptic, nothing but yes or no answers to what I assumed was a pre-programmed set of questions. There was, however, a time when Alice replied, \"Really? Everyone? He did?\" A moment later, she turned to me and queried, \"You talked to Sam last night?\"\n\nI blinked. \"Uh, yeah. Why?\"\n\n\"Nevermind.\" Alice turned back to the phone. After several confused \"uh-huh\" and \"okay\" responses, Alice finally replied, \"That's fine... Uh-huh...\" and hit the button to end the call. And then she sauntered into the family room to fire up the gaming consoles without even looking at me.\n\nI knew better than to try asking what all that was about.\n\nWe actually had about an hour to play, which was more than I was expecting. The doorbell ringing took me by surprise, but Alice gave me a mysteriously smug smile and immediately switched off the console mid-race. Obviously she was expecting it, and just as obviously she wasn't about to explain, so I didn't question her. I just sighed and leaned against the backrest.\n\nAlice got up and went to the door. A minute later, she returned to the family room followed by all five of the other BTC girls. It was highly unusual for them to be here on a Saturday morning. After all, the girls had families and friends and other things going on in their lives that didn't revolve around me. Yet here they all were, although Belle, Mari, and Zofi all looked a little confused as to why.\n\nI wasn't confused anymore myself, except perhaps by the timing. I looked straight at Sam as the six of them came into the family room and started taking seats, except for Sam herself. She stood in front of the TV, and I arched an eyebrow at her, remarking, \"I thought we agreed last night on the phone to table this until Monday.\"\n\n\"We did.\" Sam shrugged as if arriving unexpectedly two days early was no big deal. \"But then Neevie called me this morning. Seeing as you both apparently want the same thing, she and I started making phone calls and got everyone to show up.\"\n\n\"Why, exactly, are we showing up?\" Belle asked from the loveseat next to Mari while raising her hand. Clearly, she didn't particularly like being out of the loop.\n\nI frowned. \"They didn't tell you?\"\n\n\"Belle was explicitly excluded from being told what was going on,\" Sam explained. \"At least until Alice was able to verify you two didn't break The Rule. If you two had, all bets were off.\"\n\nI shot Belle a look that said wordlessly, See. We would've totally gotten into trouble.\n\n\"Wait, you don't know what's going on either?\" Mari asked me. \"Sam said you and Neevie would explain when we arrived.\"\n\n\"I didn't even know you all were coming here today, and Neevie and I are supposed to explain?\" I wasn't aware of any conversation during which my ex-girlfriend and I had come to any agreement on how to move forward, and I glanced at the redhead for a moment.\n\nSam sighed and stated, \"Matty wants to end the sex boycott.\"\n\nAlice snorted from the seat on my left. \"Obviously.\"\n\n\"Not just because I want to get laid,\" I insisted. \"You all made your point about solidarity with Neevie, but this is messing with all of our individual relationships while at the same time pimping ME to have sex with Neevie just to get back the intimacy I already earned with each of you.\"\n\nSam rubbed her right temple. \"Yeah, uh, I didn't really think through that aspect of it. I'm sorry.\" She gave me a contrite look.\n\nNaimh spoke up from the armchair, \"And I want to end the sex boycott too, mostly for the same reasons I originally opposed it. I'm thankful you all demonstrated your loyalty and friendship, but Matty's right in that the point has been made. I didn't like seeing everyone else suffer on my behalf. But that's not the only reason I wanted us all to meet up.\"\n\nZofi leaned forward from the seat on my right. \"Why else?\"\n\n\"Well... Matty gave me a bit of a challenge yesterday,\" Naimh explained, her eyes bright. \"I thought about it a lot last night, and when I woke up this morning I came up with a solution I think every girl here will appreciate.\"\n\nZofi looked even more intrigued. \"Matty gave you a challenge?\"\n\nNaimh and Sam shared a look before Naimh explained, \"My previous relationship with Matty was based entirely on sex. He said there was nothing left to prove that we were sexually super-compatible, but if I truly wanted to rebuild our romantic relationship, I would need to prove that we belong together emotionally.\"\n\nZofi frowned and looked over at Sam. Sam shrugged and gestured back at Naimh. Alice, Belle, and Mari similarly exchanged confused looks. Nobody seemed to have any idea what Naimh's solution would be.\n\n\"So...\" the redhead continued, \"I ran my idea by Sam, and she agreed it's worth a shot. But first I want to make utterly clear that I think the world of all of you. You are each wonderful, special human beings who all deserve love. So in a way, the silver lining in Matty and me breaking up is that each of you have this opportunity to try something we wouldn't have been able to try had he and I stayed together.\"\n\n\"WHAT is going on?\" Zofi finally exclaimed, a little exasperated. \"What is this silver lining?\"\n\nNaimh blushed, perhaps having forgotten she didn't actually explain that part. \"Each girl gets to be Matty's girlfriend for one week. No more 'Neevie Mondays' or 'Alice Tuesdays', at least while we're in this experimental phase. You can take it as far as you two are comfortable with or don't do anything out of the ordinary; it's entirely up to you. You can share him with the other girls if you want or keep him all to yourself for just a little bit. For a week at least, you get to be his primary. On Fridays, we can still hang out and mess around together as a group, and Matty doesn't have to touch me if he doesn't feel comfortable doing so. But at least I can play around with the other girls and maybe watch him pounding the shit out of some of you.\"\n\nI raised my eyebrows. \"Do I get any say in this?\"\n\n\"Of course you do. This is just an idea,\" Naimh insisted before turning beet red and looking embarrassed. She managed to mutter, \"We're not... uh... pimping you.\"\n\nSam stepped forward. \"Just... think about it before you make up your mind one way or another. And the same goes for everyone else. Neevie and I have already agreed to give this a try.\"\n\n\"Me, too!\" Alice shot up her hand. \"I wanna be Matty's girlfriend for a week!\"\n\nMy eyes bugged out at my best friend who had long emphasized that she had NO romantic feelings for me whatsoever. \"Really?\"\n\nShe grinned. \"It'll be like a vacation. Nothing serious, we mess around, I get to be primary for a few days, maybe order some hot chicks to eat me out while you're fucking me, that sorta thing. But there's a time limit and then in the end we go back to normal.\" Alice held up a fist, and shaking my head, I bumped it.\n\n\"How, exactly, does this solve your problem of proving you two belong together emotionally?\" Belle queried, looking confused.\n\n\"Well first of all, I go last,\" Naimh explained. \"I'll spend five weeks rebuilding my friendship with Matty, working on regaining his trust. He'll be speed-dating the rest of you, in a sense, which will help him discover what he wants from any girlfriend emotionally and also... quite frankly... find some comparisons to his relationship with me. So by the time it's my turn at the very end, he'll have a better understanding of what he wants, and I'm hoping that he'll communicate enough to each of you that you can share that information with me and help me learn how to be a better girlfriend for him.\"\n\nZofi looked skeptical. \"Am I the only one that sees the potential for disaster here? You're literally suggesting that Matty spend quality intimate time with each one of us... for a week... banking on the expectation that (A) none of us will fall in love with him and (B) he won't fall in love with any of us.\"\n\nBelle chimed in with a grumpy tone, \"It almost sounds as if you expect none of us to measure up to you, so after five weeks of putting up with the rest of us, he'll be dying to fall into your arms again.\"\n\n\"Sam brought up the exact same things you both said,\" Naimh immediately replied with a negative shake of her head. \"So let me tackle them one-by-one.\"\n\nThe girls all glanced around each other, wondering how she was gonna pull this off. I was pretty curious myself, since I'd also been thinking the same thing.\n\n\"First,\" Naimh began, \"I'm not banking on the expectation that none of you will fall in love with him, or vice versa. Like I said: this is the silver lining. Had Matty and I stayed together, none of you would have ever gotten the chance to explore a potential relationship with him at all. This way, you all at least have a chance. If any of you have been in love with him all along but were burying it out of respect for me and our friendship, well now's your chance to change his mind. A week should hopefully be long enough to find out if there's something there or not, and just because we've decided something today does not make it binding forever. If Sam and Matty went first, fell madly in love, and decided to call the whole thing off, I would support them and wish them the best. I had my chance, a chance you all gave me even if I screwed it up. The very least I can do is be happy for one of my best friends finding HER happiness.\"\n\nSam, arms folded across her chest, raised her right hand while keeping both arms crossed. \"That's just an example, by the way. I'm definitely not going first.\"\n\nNaimh smiled and nodded. \"Second, I tried to head off this objection by pointing out how much I respect you all. I really DON'T expect you to 'not measure up to me' and have Matty be dying to fall into my arms at the end. My decision to go at the end is for two reasons: the fact that I already had my chance, and to prove myself emotionally to him first. I won't lie to you: My end goal after all this is to be Matty's girlfriend. Giving him the chance to experience this with each of you, learning from what I can observe, and hopefully listening to some of you share your experiences with me: those are the things I think I'll get from this plan. And if at the end of all that, after being emotionally intimate with all five of you, Matty chooses to come back to me, then...\"\n\nNaimh's voice trailed off as she started to choke up, smiling through the tears streaming down her cheeks.\n\nSam was quietly staring off into the middle distance as she finished, \"Then Neevie will know for sure that he really loves her too.\"\n\n****\n\nWell I already gave away that things ended up with Naimh giving me a blowjob, so you know her idea didn't blow up in her face and get everyone all pissed off (Okay, well maybe gobs of my cum were about to blow up in her face, but you know what I mean). Quite the contrary, Alice's notion of having a weeklong \"vacation\" playacting at being my girlfriend and then everything going back to normal gained a lot of traction.\n\nWhile the girls were enthusiastic from the get go, I needed to take a quick walk outside in the backyard to clear my head. On the surface, my ex-girlfriend's suggestion was a teenaged boy's wet dream come true: Six hot babes taking turns being his girlfriend was the ultimate scheme to maximize variety and minimize consequences.\n\nAt least, it seemed like that on the surface until my paranoid mind set in and started to consider the consequences. If there was anything that my one and only romantic relationship had taught me, it was that being in a relationship amplifies those consequences, for both good and bad. If I annoyed a fuck buddy like Alice? No big deal, we'd forget about it soon enough. If I annoyed my ex-girlfriend Naimh, she'd feel hurt and neglected and start questioning whether or not I really loved her.\n\nActually, that was the crux of the matter: not the romantic relationship itself, but the idea of love. Love still confused the hell out of me, and made me question whether or not I even knew the difference between love, infatuation, and just plain horniness. I \"loved\" a girl more and felt supremely connected to her while spurting great wads of cum deep into the furthest recesses of her body. In hindsight, I was pretty sure that wasn't real \"love\". I \"loved\" a girl when I spooned up behind her in bed, just feeling the warmth and connection of her body against mine. Or maybe that was just comfort. I \"loved\" a girl when she went away, missed her presence in my life and yearned for her to come back sooner than later. But wasn't that like textbook infatuation?\n\nKeeping things casual within the BTC had tempered those feelings of love. Sure, all six of them had told me at one point or another that they loved me, and I'd told them likewise as well. We tried to qualify our statements as \"loving\" someone versus \"being IN love\", but the more we all said the words the more convinced I was that NONE of us knew what love really meant. We were all having fun. We were all fucking the shit out of each other. And the only time any of us ever got really hurt was when Naimh and I had actually made the boyfriend/commitment, started talking about real romantic love, and then promptly got burned by it.\n\nPart of me believed I should say, \"Fuck this shitty idea and don't mess with the status quo. We're better off as a collection of seven friends, and as long as I can get Neevie to understand that we'll never be more than friends-with-benefits, I can get onboard with fucking her brains out as often as she wants. No more boycott, everyone has some good orgasms, and we can go to college our separate ways in August with a lot of fond memories and no serious regrets.\"\n\nPerfect, right?\n\nSo why did only PART of me believe I should say that?\n\nWell, I was still wondering about love.\n\nI think humans are pre-programmed in our DNA to have this desire, this craving to be in love. At the same time, our DNA is pretty stupid if it can't likewise program us to know what love is. Or maybe it's true that you'll know love when you know it, and I simply hadn't known it yet. In the meantime, I felt like a headless chicken running around the yard with no idea where to go.\n\nThe point is: I WANTED to be in love. I'd wanted to be in love with Naimh, but in the end, it seemed to me that I'd never felt more than extreme lust.\n\nI'd wanted to be in love with Belle, but the more I thought about our relationship, the more I realized that she was still my 'little sister' and what I felt for her was more familial \"I want you to be in my life forever\". She'd even said it once before herself, that as siblings-with-benefits we could be eternal.",
        "Zofi was gay. Not happening.\n\nAlice had made clear I was her fuck-buddy without romance, and even a vacation playing boyfriend/girlfriend just to try it on for size wasn't seriously going to change that.\n\nSo that left Mari and Sam. I felt like I'd never given Mari a fair chance. She was so sweet and lovable, and I seriously did not take enough advantage of her body built for sex. Maybe she didn't have quite as high a sex drive as Naimh, but if she ever wanted to she could probably outfuck them all. But even putting aside incredible sex, she was an even more incredible human being. Yeah, she said she was on Team Belle, but she'd also confessed in Tahoe that she loved me. Could there be more in there?\n\nNaimh had said that if any of the girls had been in love with me all along but was burying her feelings out of respect for her friends, well now was her chance to change my mind. If that statement applied to anyone, it was Mari. And even though she hadn't said much in the time before I got up to leave, I could see the light in her eyes at the idea of spending a week being my girlfriend.\n\nSam... Sam confused the hell out of me, especially with the way she'd taken such good care of me in the aftermath of my breakup and then promptly disappeared out of my life again. She wore the mask all day every day, and when it slipped I caught glimpses of the true face beneath. It seemed to me like there were two different Sams: the young woman who dreamed of being Aphrodite and fought so competitively to be Matty's \"favorite\", and the career-driven workaholic who didn't want to be distracted by \"love\". Everyone could see it: Even Belle had said just last night that Sam was super in love with me and wanted my mom for a mother-in-law even while telling herself not to think about it.\n\nWhat would happen if we spent a week together as boyfriend/girlfriend? Would she let me see her true face, get to know the young woman inside who may or may not be in love with me, and give me the chance to find out if I might love her in return?\n\nI suddenly found myself VERY interested in finding out.\n\nBut would she even TAKE a week together with me as boyfriend/girlfriend or just dismiss the whole idea, tell me to maintain status quo, and perhaps even point me in the direction of Naimh and give me a good kick in the butt to go back to her?\n\nThat actually seemed a lot more likely. Naimh had made clear that nobody would be forced to do anything they didn't want to do, and I could easily see a future where four of the girls each took their turn and Sam blew me off instead.\n\nUnless... I was like... in some kind of emotional turmoil and her maternal instinct kicked in to Florence Nightingale me back to health. I could maybe even invent something.\n\n'Now you're talking crazy. Get your shit together, dude,' I told myself.\n\nI lost track of how many times I'd circled the yard. I was on the far side of the empty swimming pool when I realized for sure that I was going to go ahead and try Naimh's plan. At the very least, I welcomed the opportunity to get to know each of the girls better. I always spent so much time trying to keep all of them 'in balance', and seeing to the needs of six beautiful young girls WITHOUT making any of them feel neglected was exhausting. Being able to focus on one at a time, even if the rest of them were around, seemed like it would be so... easy.\n\n'Dude, you did not just jinx yourself by calling this 'easy', did you?'\n\nShaking that thought from my head, I finished my loop around the backyard, opened the sliding door, and returned to the family room. The girls were still chatting, but their conversations went silent when I came in.\n\n\"So?\" Naimh asked expectantly. \"Are you in or out?\"\n\nI took a deep breath, nodded, and replied, \"I'm in.\"\n\n****\n\nThere was a lot of nervous energy in the room that got released when I announced that I was \"in\". All six of the girls conspicuously exhaled at the same time, everybody noticed, and everybody started chuckling or giggling or otherwise relaxed quite considerably.\n\nSam had joined Zofi and Alice on the big couch, so I walked over and stood in front of the TV. When everyone settled, I remarked, \"So I gather that the rest of you already decided to go with Neevie's plan?\"\n\nSam nodded. \"Of course, none of that would've mattered if you were out. So there was a lot of discussion about what we'd do if you said 'no'.\"\n\n\"Well if I know you girls at all, and I'd like to think that I do, some of you would've been fine with it, and others would claim to be fine with it but simultaneously be a little hurt that I shut down an opportunity to at least try.\"\n\nThere was a little more nervous laughter as the girls exchanged looks.\n\n\"But at the end of the day,\" I continued, \"I'm 'in' not because I'm trying to avoid hurt feelings, but because I want to experience this with all of you as much as you want to experience it with me. For years it felt like The Rule was specifically designed to stop me from developing feelings for any one of you over the others. Now after all that time of getting to know each other as friends, I'm being given permission to let those feelings flow, to explore what love means to each of us. Becoming boyfriend/girlfriend is the next stage of evolution for each of our relationships, and in normal circumstances would be impossible to do with all six of you.\"\n\nMari said quietly, \"I would've never gotten this chance otherwise.\"\n\nBelle was already misty-eyed and she wrapped up her bestie in a fierce hug, mumbling, \"I would never have stopped you.\"\n\nMari gave her a shy smile and patted her BFF's forearm. \"Team Belle.\"\n\n\"Just... please...\" I hedged, taking a deep breath. \"Please remember that I'm not perfect. I've already proven I can screw things up just as much as anyone, and feelings can get hurt even if we're only doing this a week at a time. I don't want to hurt anyone, and I'm still terrified the seven of us doing this is going to result in some serious jealousy between you.\"\n\n\"We talked about that too,\" Alice chimed in. \"We obviously can't make promises there won't be any hard feelings, but we're at least going into this with eyes open. Ultimately, we're running out of time before we all go to college, so it's now or never anyway.\"\n\nThe girls nodded collectively.\n\n\"So with all that said,\" I began, holding up my hands, \"how is this gonna work? Are you ro-sham-boing for an order or something?\"\n\nSam shook her head. \"We're doing this volunteer order, and we're not setting the whole order out in advance. Feelings change. Each of us can opt out if we want. Maybe this whole thing will blow up three days from now. I don't want to set up long-term expectations we won't be able to live up to. So we're doing this one week at a time with whoever wants to go next. If there's a tie, we can ro-sham-bo or something.\"\n\nI nodded and looked around all of them. \"So have you already decided who's going first?\"\n\n\"Not yet.\"\n\nMari's hand shop up immediately. At the same time, Alice chirped, \"I'll go first!\"\n\nSam smirked and glanced at Belle and Zofi. \"Either of you wanna jump in?\"\n\nBoth Belle and Zofi shook their heads in the negative.\n\nSam shrugged and said, \"Looks like it's a ro-sham-bo.\"\n\n\"Wait,\" I put in. \"I'd rather hear why they each want to go first.\"\n\n\"Oh well that's easy,\" Alice said. \"I just lost my virginity and I'm super horny all the time. These last few days have SUCKED DONKEY BALLS. Matty's Girlfriend of the Week gets priority, right? Imma gonna get LAID.\"\n\nEveryone laughed at that. But as the laughter died down, Mari mumbled quietly, \"I've just been dreaming about being Matty's girlfriend for years. Like Sam said, this whole thing could blow up three days from now. I might never get another chance.\"\n\nThe room went quiet. Belle started hugging Mari again, and a moment later, Alice spoke up to say, \"Mari can go first. I can keep my panties on for another few days. Besides, I just realized Mari's the only one who didn't get him after the whole thing with Neevie went down, so she's overdue.\"\n\n\"Really?\" The relief on Mari's face was evident.\n\n\"Yeah, totally,\" Alice confirmed. \"I'm your friend and you need this more than I do.\"\n\n\"Thank you,\" Mari said warmly, and she teared up. Alice got off the couch and went to hug her as well, and then Sam joined, and Zofi and Naimh as well. Lastly, I put my long arms around the group.\n\nEventually, though, the group hug disengaged. First I and then the girls backed off one at a time, like peeling layers of an onion, until only Belle and Mari remained. Mari wiped away the tears from her eyes and looked over at Alice. With a smile, she said, \"I can't visit on Tuesday anyway, so you can still have an Alice Tuesday with him.\"\n\nAlice grinned. \"Works for me.\"\n\n\"Why wait for Tuesday?\" Naimh finally spoke up. \"Both Matty and I agreed to end the sex boycott. I think it makes the most sense for Mari's week to start like... tomorrow. We can have these weeks run from Sunday afternoon until the following Sunday morning. That way Mari can have a 'sleepover' next Saturday night to cap things off.\"\n\nAlice's eyes glittered. \"So in the meantime...\"\n\nSam shrugged and commented, \"Don't you normally spend Saturday mornings having Matty give you a bunch of orgasms?\"\n\nThe pretty Korean girl was practically dancing in her seat, eyes on fire. \"Can I? Right now?\"\n\nSam glanced around. \"Any objections?\"\n\nAlice didn't wait around for answers. She'd already gotten off the couch and took a running start. I had to brace myself for impact otherwise she would have knocked me into the TV. As it was, I wound up holding a horny Asian babe in my arms with her long bare legs wrapped around my waist while she crammed her tongue into the back of my mouth.\n\nAnd we were only just beginning.\n\n****\n\nTechnically, Mari's time as my new \"girlfriend\" for a week didn't start until tomorrow. Still, nobody objected when she wound up being the first to get my dick in her pussy, nor when she got my first cumload of the day less than two minutes later.\n\nIt was an accident, really. I hadn't had sex since Tuesday night with Belle (about eighty-four hours, not that I was counting), and hadn't ejaculated since Friday morning's pitiful morning wood masturbation. So it really shouldn't have been a surprise that I turned out to be on a hair trigger.\n\nSam and Zofi had gotten out of the way when I carried Alice over to the big couch and sat down with her legs still wrapped around my waist. The horny Korean girl made out with me furiously while tugging up my shirt to slide her hands around my bare chest and squeeze my pectoral muscles. Mari came over next to us and parked herself on the cushion to my left, panting eagerly. Alice was quick to turn my head and let me make out with my luscious Latina angel, and in the meantime, Alice slipped off my lap and started tugging down my shorts.\n\nI groaned into Mari's mouth the moment Alice started sucking on my schlong. I then pulled my head away and took a look around. Belle had one hand in her pants, masturbating and moaning while watching Mari and Alice work on me. Naimh was still in the armchair, biting her lip and looking oh-so-sexy. I was still conflicted about resuming the sexual part of my relationship with the gorgeous redhead while the emotional part was still very much up in the air. Luckily for me, I didn't have to worry about her being taken care of, because Zofi closed in on Naimh and started making out with her instead.\n\nSam, for her part, hung back at first, just sort of staring down at the back of Alice's head with an odd expression on her face. The mask had fallen away, but her true face was that of a confused young woman. A moment later she noticed me staring at her, the mask came right back up, and she stood up straight. She first glanced over at Naimh and Zofi, who were pawing at each other's bodies by now. Then she looked over at Belle masturbating by herself on the loveseat, and she moved over to join the little pixie instead.\n\nTo my surprise, though, Sam and Belle didn't start making out or anything. Sam leaned down to whisper something into the other girl's ear, Belle nodded, and the two of them got up and left the room. I fantasized that they'd strip each other's clothes off and make sweet Sapphic love, but from the expressions on both their faces I gathered they were more inclined to talk instead of fuck.\n\nWatching and wondering all that kept me distracted enough to not fill Alice's stomach with sperm right away. It also helped that she seemed more inclined to play with me than really hoover my dick for hot cum. I'd been nibbling on Mari's neck and playing with her boobs beneath her sweater as well, but now I focused on my luscious Latina and started taking her clothes off. Moments later, I got her bra out of the way and fastened my lips around a big swollen nipple while she moaned and clutched my head to her bosom. But I only got to mash my face into her marvelous melons for about a minute before she slipped off the couch and started removing her pants as well.\n\nAlice noticed me watching Mari strip, and once the other girl got naked she finally popped off my prick. \"Hop on him,\" she said. \"You've gone the longest without him.\"\n\nMoving aside, Alice started unbuttoning her white blouse from the center buttons again, giving me tantalizing glimpses of her creamy white titflesh in the lacy red bra. Mari meanwhile settled her knees on either side of my legs, centered herself over my dick, and sank down onto me.\n\n\"Ohhh... yeahhh...\" I couldn't help but groan as a warm, wet, inviting pussy surrounded my shaft for the first time in four days. Granted, that's far from an eternity, but it had certainly felt like one to me. Having Mari's lush body built for sex mounted on my dick felt as relieving as cannonballing into a cool, clear oasis after wandering for forty years through the Sahara Desert. My body went spineless and I sagged against the backrest, a goofy grin on my face.\n\nMari giggled at my expression. \"Feeling good?\"\n\n\"Feeling amazing,\" I breathed before reaching up to cradle Mari's cheeks in my hands. Just before I brought her to me for a sweet kiss, I murmured, \"Thank you, Angel.\"\n\nWe kissed for a little while, but mid-kiss, Mari started to undulate her body. She had incredible pussy control, milking my shaft with her inner muscles in a way that sent lightning bolts of pleasure up into my brain. I broke the kiss to gasp from overwhelming pleasure, and after less than a minute I started whimpering, \"Mari! Mari! Slow down! You're gonna make me cum!\"\n\nShe wasn't even humping me very fast, just clenching me and gyrating a bit. But when I started whining about cumming, she sped up instead of slowing down. With a wicked gleam in her dark eyes, she stared straight into mine while crushing her massive melons against my cheeks, trapping my face in her titflesh.\n\n\"Mari... Angel... Please...\" I groaned. \"I'm gonna... I'm gonna...HHHHNNNGGGGGHHH!!!\"\n\nAfter feeling her hammer her body up and down my prick and slam her plush buttocks down against my thighs, I gripped Mari's shoulders from behind, pinning her down and preventing her from humping me any further while I grunted, clenched my eyes, and came. Her eyes glittered and her smile widened while feeling me fountain off deep inside her. And all the while she kept milking me with her inner muscles, drawing out my ejaculation for so long that I genuinely think I kept cumming for a longer duration than we'd been fucking.\n\nAt last, I gasped and let my head loll back. I was dizzy from the force of my eruption, and I blinked several times in shock before realizing just how incredibly fast I'd popped off. Panting for oxygen, I forced myself to focus on Mari's pretty face, and I apologized, \"Sorry... Sorry... I couldn't... hold it...\"\n\nMari grinned rather proudly and winked. \"No worries. You seemed like you really needed that. I'm just happy I was able to help you.\"\n\n\"Oh yeah... Really needed that...\" I wheezed.\n\n\"Up! Up!\" Alice exclaimed before reaching down and slapping Mari's plush buttocks. \"I want the creampie!\"\n\nMari glanced at Alice with a grin. She blushed and actually looked a little embarrassed at the idea of the Korean babe eating her out. But she dismounted my dick and flipped around to sit beside me. And as soon as Mari slouched against the backrest, parked her heels on the edge of the couch cushion, and spread apart her thighs, Alice ducked her head into the Latina girl's crotch and started audibly slurping out my cum.\n\nMoments later, Naimh started squealing in orgasm, a sound well-familiar to me. I tore my gaze away from Alice and Mari to find the gorgeous redhead in almost the exact same pose as Mari, heels up on the armchair cushion and thighs spread while Zofi furiously ate her out. Zofi was fully-clothed and Naimh was only naked below the waist, but otherwise the four girls were near mirror images of each other.\n\nMy ex-girlfriend stared hungrily at my still-upright dick and licked her lips. I could see the fantasy in her eyes as she imagined impaling herself upon my manhood, and her orgasm crested while she pressed Zofi's head even tighter between her legs. But as much as she may have wanted to approach me and I may have wanted to go to her, both of us had just climaxed, relieving a ton of that sexual pressure. And now that both of us were done cumming, the urgent craving to fuck each other's brains out had been temporarily sated.\n\nInstead, as soon as Naimh came down from her orgasmic high, she pulled Zofi's face out of her crotch and said, \"Go to Matty.\"\n\nThe lissome brunette first crawled up to give the redhead a tender kiss, and then a moment later she sauntered over to me. Zofi took the time to take off her sweater and then reach back to unclasp her bra, murmuring, \"I missed you, darling.\" And the now topless model-esque beauty shook her bare boobies in my face before leaning down to give me a fervent kiss.\n\nI could taste Naimh's pussy on Zofi's lips, which stirred me more than I had been expecting. I suddenly felt a burst of energy and grabbed Zofi's head to keep it in place so I could lick her entire face, hungrily going after the redhead's unique flavor. Zofi giggled as soon as she realized what I was doing, and when I finally stopped she leaned in to whisper into my ear, \"You can go get more straight from the source.\"\n\nBut I sighed reluctantly and shook my head fractionally. And with an understanding nod, Zofi sank down to her knees and slurped my half-hard cock into her mouth.\n\n\"Hey, that's mine next!\" Alice complained when she pulled her face out of Mari's crotch and wiped her mouth with the back of her hand. \"Get in line, bitch!\"\n\nZofi laughed without removing her face from my dick, not an easy thing to do. She flipped Alice the bird, which got Alice to reach back and spank Zofi's ass. Only then did Zofi pull off my swiftly re-hardening prick and mutter, \"Fine, fine. I'll trade you.\"\n\n\"Actually,\" Mari said with a blissful sigh of contentment. Apparently, even though I hadn't brought Mari to orgasm, my best friend Alice had taken care of that for me. So Mari sat up and grinned, finishing, \"I'm gonna go see what Neevie tastes like.\"\n\nI blinked in surprise, watching shy Mari expanding her sexual horizons in terms of sampling the other girls in the BTC. I could still remember her tentatively sharing these experiences with Belle while still nervous about girl-on-girl action. But the busty Latina wound up squatting in front of Naimh's red-trimmed beaver and just dove in without hesitation.\n\nMeanwhile, Zofi and Alice were picking up right where they'd left off on Tuesday, one of them blowing me while the other licked my balls. Alice had stripped herself... sort of. She actually still wore the button-down shirt, red bowtie, cardigan, and black miniskirt. But she'd removed the strapless red bra and her panties beneath. So when Alice climbed up into my lap reverse cowgirl so Zofi could eat her out at the same time, I was able to reach around and play with her big boobies to my heart's content.",
        "After Alice came, Zofi stripped naked and switched places with Alice. The self-proclaimed lesbian had a screaming orgasm with my dick in her cunt and Alice's tongue on her clit, and then she sagged back against my chest while I reached around and played with her big boobies as well.\n\nAnd that's when Naimh's eyes met mine. She and Mari had wound up naked and tribbing on the floor, mashing each other's mouths and grinding each other's clit until they howled in unholy ecstasy. But by the time Zofi climaxed they were already winding down, just sort of casually making out and fondling each other in the aftermath. I gathered that my ex-girlfriend had been watching the three of us on the couch going at it, and now that we'd come to a pause, she stared at me with a rather obvious question in her eyes: 'Can I go next?'\n\nI'd now fucked Mari, Alice, and Zofi. Naimh was the only one in the room left, and her desire for me was quite clear.\n\nBut I hesitated. It's not that I didn't want to fuck her. A huge part of me wanted to bang the gorgeous and willing nymphomaniac redhead ASAP, and yet something held me back. I couldn't even fully explain why, even to myself. Things still just felt... unresolved. I didn't know how to feel about her. Did I love her? Had I ever loved her? Could I love her again? Would fucking her make me love her again? Would abstaining from each other give me time to heal? Did I even have a serious wound to heal from?\n\nWhatever else was going on, I just didn't feel... settled. Not yet. And the anxiety I felt inside was reflected through my eyes.\n\nI could pinpoint the exact moment when Naimh recognized my lack of readiness. She swallowed, and the light in her eyes dimmed just a bit. She took a deep breath, gently pulled herself away from Mari, and got up.\n\nGood freaking heavens she was still the most gorgeous thing I'd ever seen. With her naked skin still flushed post-orgasm, freckles going all the way down, mouth-watering tits, taut waist, flared hips, and pink labia puffy and open invitingly, I REALLY wanted nothing more than to slam myself into the willing nymphomaniac redhead. And she sauntered over towards us with a gently seductive sway of her hips.\n\nPanting in the aftermath of her orgasm, it took Zofi a moment to recognize Naimh's approach. But once she became alert, she stiffened up just a bit and almost hurriedly climbed off my dick to get herself out of the way. I let her go, sized up the horny redhead, and pondered how I'd react if Naimh tried to mount me.\n\nI'd probably let her and worry about how I felt later, honestly. Damn she was so eminently fuckable, and I already knew how spectacular we could be together. But she didn't try to mount me. Instead, she knelt down before, bent forward, and took a long lick of my dick from balls to tip, staring straight at me with those brilliant emerald eyes the whole time, almost daring me to stop her.\n\nI didn't stop her. I also didn't feel particularly conflicted. We weren't \"having sexual relations\", at least by the definition our President would use. But even beyond semantics, there was a distinct difference in intimacy between getting a blowjob and making love.\n\nNaimh herself summed it up perfectly a moment later. She ran her tongue around the circumference of my mushroom head, teasing me before popping off. She started stroking my shaft in her hand, and with a warm smile she said, \"When you're ready, I want us to have a 'first time' again, and I want us to be alone. I can see the anxiety in your eyes when I'm near you like this. You're wondering whether or not I'm going to just walk over and hop on you. I want you to relax about that. I won't. I promise. The next time we make love, you'll know it's coming. It'll be our 'first time for the second time', or something.\" She giggled cutely.\n\nI nodded and did relax quite a bit, replying, \"I look forward to it.\"\n\nMy ex-girlfriend grinned at me and got ready to plunge her face down around my cock, but just then Sam and Belle returned to the room. I had no idea where they'd gone off to, but from their perfect hair and unrumpled clothing, I assumed I was right about them having gone somewhere for a private conversation and not sex. Naimh saw my attention shift and looked over as well.\n\nIf either Sam or Belle was surprised to see a naked Naimh with her hand around my dick, neither of them showed it. Sam smiled and looked visibly relieved. Belle's expression was a little more unreadable, but when she felt my gaze, she gave me a little nod. I then returned my focus to the redhead with her mouth over my dick.\n\nNaimh's emerald eyes sizzled, perhaps energized now that the full BTC was present and accounted for. It was clear she wanted to put on a show for our audience, and a moment later she did.\n\nIt was an amazing blowjob. Strangely enough, I'd gotten very few blowjobs from Naimh, all things considering. I mean, once we started having sex, we ALWAYS wanted to have sex. Blowjobs were either foreplay warmup or a revival tool between rounds. Sure, I came in her mouth plenty of times, but that was usually after pulling out of her pussy (and even sometimes out of her ass). A start-to-finish blowjob from Naimh had become a rare thing, not that I'd ever minded.\n\nBut just because she didn't do it very often anymore didn't mean she wasn't CAPABLE. The girl was a sexual dynamo, in every way. She had a deeper bag of tricks than the other girls and she was tapping into them. And within two minutes she had me shaking and shuddering and clutching the couch cushions to either side of me while clenching my Kegels in a desperate bid to keep my imminent explosion at bay.\n\nNot that she'd let me cum so soon. My ex-girlfriend played me like a musical instrument, always striking the right notes, knowing exactly when to increase the tempo and when to pause for the dramatic effect of sudden silence.\n\nEventually, I was a panting, gasping, sweaty shell of a man. I quivered on the couch, held on the verge of climax for what felt like hours even though it could only have been ten minutes, max. During a rest period I realized that Sam and Belle had stripped down, with Belle sitting in Sam's lap on the loveseat with the platinum-blonde nibbling on the strawberry-blonde's neck while reaching around to play with the smaller girl's clit. The sight of them nearly made me spurt, but Naimh sensed the motion and clamped down around my shaft while yanking down my balls almost painfully with her left hand. She caught my line of sight and glanced back. And a moment later, she popped off my prick, looked around at all the girls, and instructed, \"Gather around me.\"\n\nSpellbound by the Irish redhead's performance, all five of the other girls closed in wordlessly. I wound up staring down at six kneeling teenage girls in various stages of undress, although all of them had their tits out. Mari, Zofi, Belle, and Naimh were all completely naked, Sam was topless, and Alice had only lost her underwear. I had a sudden vision of blasting my cum over all of them, and from the look in my ex-girlfriend's eyes, she seemed to be on the same wavelength.\n\nSlowly, ever so slowly, the gorgeous redhead bent forward and took me all the way into her throat for the first time since we'd broken up. I mean, this entire time she'd teased and titillated my cock, stirred my senses, and brought me to the brink and back without ever actually deep-throating me. But this time she did, lowering and lowering and lowering until at last she had taken every inch.\n\nNaimh looked up at me, her emerald eyes brilliant in the morning light coming through the big sliding door out to the backyard. That soft reflected light also illuminated her face, letting me see every freckle on her gorgeous face as she somehow managed to smile up at me despite taking every last inch of my super long schlong down her throat.\n\nShe held the position for a while, breathing shallowly through her nose while continuing to watch the rapturous expressions crossing my face. But when she couldn't hold herself down any longer, she slowly withdrew all the way up and off my cock, gasping for breath.\n\nNodding slowly at the semi-circle of girls, she gestured toward my dick with her right hand. And eagerly, all five of them closed in.\n\nBelle pounced first, planting her hands on my thighs and hoovering me into her mouth. She probed her gag reflex, forcing herself lower and lower but still had at least an inch further to go. She practically choked herself but backed off before things got that far. Instead, she wrapped both little hands around my trunk and twisted in opposite directions while nursing on my swollen knob at the top.\n\nAlice went next, not even attempting to deep-throat me but rather more interested in just slurping away at my shaft like a lollipop. Then Mari went, slam-fucking her face all the way down, taking me into her throat with aplomb over and over and over again as easily as if she were taking a stroll down the sidewalk. Zofi went next, gently stroking my rod with her left hand and nibbling daintily on the head. I was so backed up by now, and on such a hair trigger, that I nearly popped when she started sucking on me, and Belle had to warn her that she was about to make me blow.\n\nZofi stopped her suction just in time, but after holding my dick a few inches away and wincing as if expecting an imminent explosion all over her face, I finally gasped and stopped clenching. Disaster averted. And Zofi went back to licking my mushroom head for a bit before passing me off to Sam.\n\nSam deep-throated me at first, holding the position long enough to snake her tongue out and lick my balls. But a moment later she backed away, jacked my shaft, and handed me back to Naimh far sooner than I would have expected.\n\nNot that Naimh minded. Now that everyone had gotten a turn, she didn't hold back. She deep-throated me right from the get go, held herself at full depth and looked up at me with her brilliant eyes, maintaining the position and breathing shallowly, really just showing off at this point. I kept expecting her to back up, but she didn't, not only keeping me lodged in her throat but swallowing over and over again, really milking my dick, intent on making me cum.\n\nShe was about to get her wish. I started shuddering, on the verge of climax, and Naimh quickly popped her mouth off me and said hurriedly, \"Stand up, Matty. Stand up!\"\n\nSuiting action to her words, Naimh yanked on my hips until I finally got the message and stood up. With a hand gesture twirling her finger in a circle, she got the other five girls to close in tighter, with Belle actually crawling between my legs and looking upwards. I saw six beautiful faces crammed into a confined space, say the expected blast radius of an ejaculation, give or take a few inches. Naimh gaped her mouth open and reached up with one hand to continue stroking my shaft. And when I started groaning and felt my butt muscles clench involuntarily, she tilted my dick and aimed it right next to her at Alice's pretty face.\n\n\"FUCK! FUCK! FUCK!\" I grunted and fired away.\n\n\"EEEP!\" The Korean girl squealed as I shot a ribbon of cum that painted her from forehead to chin. Naimh directed me counterclockwise and splashed a string across Mari and then another onto Belle right beneath me. Zofi's and Sam's faces got little spurts in sequence, and then Belle's tits, and then Mari's tits, and back to Sam's tits, and by then I lost power and Naimh had to lean forward to press my cockhead against her own forehead to squeeze out whatever I had left that way. Even though the pressure had been relieved and I wasn't getting distance anymore, there was actually a decent amount of volume remaining, backed up as I was. And the redhead wound up with several little waterfalls of creamy jism dripping down across her nose and eyebrows.\n\nBelle tackled Mari next to her, going after everything her tongue could reach, and then Alice soon after. Naimh was slurping up sperm from Sam and Zofi. The two biggest cumsluts in the BTC ultimately went after each other, the pixie strawberry-blonde's hair tangling with the copper redhead as they rolled around the floor sucking on each other's tongue.\n\nIn the end, Naimh leaned back on her elbows, sweaty, sticky, and satisfied. Belle rolled off her and flopped onto her back, panting for breath while still licking her lips.\n\n\"All for one,\" Naimh muttered with good cheer, bending forward to lick an extra glob of cum from her own right boob and then grinning at me. Finally, she winked at me, finishing, \"and one for all.\""
    ],
    "authorname": "bluedragonauthor",
    "tags": [
        "big tits",
        "big breasts",
        "harem",
        "mff",
        "high school",
        "18-year-old",
        "blowjob",
        "facial",
        "facials",
        "cumsluts"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/the-big-tits-club-ch-37-38"
}
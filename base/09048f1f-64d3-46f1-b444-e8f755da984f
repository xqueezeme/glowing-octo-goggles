{
    "title": "What You Wish For Pt. 06",
    "pages": [
        "Introduction\n\nWell, here it is. The last part. Before I say more, I want to take the opportunity to thank all of you who have read this and taken time to comment on it. These stories are the only practice I get writing anything other than appellate briefs and legal pleadings, and it's nice to know how I'm doing. So to all of you, readers and commenters alike, thanks.\n\nNow you're all going to find out what happens to our intrepid hero. Will it be reconciliation? Maybe hook up with Marisa? Sure, Natalie's out of the picture now that you all know she's thirty years older than Tyler, but what about Susan? Or Allysin, for that matter? Hopefully, someone's still reading this by the time this is posted and even gives a shit.\n\nYou will remember that I wrote this to concentrate on writing believable female characters. All of the potential female leads were really interesting, at least in my opinion. I'd really, really like you to take a moment to share your thoughts on how I did in developing these characters. I mean, come on, I spent dozens of hours developing and writing it. The least you can do is take two or three minutes to let me know if my female leads were compelling, believable, quirky, bitchy, whatever. Did I (at least partially) redeem Kristin? Did Marisa's actions make sense given her background and emotional make up? Were any of them too cliche? (Say this, none of them betrayed their man and went off on a gangbang tear for big baloney rides!)\n\nSo please, take a moment to comment. And either way, thanks a ton for reading this.\n\nCHAPTER SIXTEEN\n\n\"You seem different,\" Kristin said, sitting on the back porch with me while we watched Dad pushing Ben on a tree swing.\n\nI'd gotten home from Marisa's a few hours before, spent some time with Mom doing her exercises, and now we were all outside enjoying the last of the fifty degree weather before winter set in.\n\n\"How so?\"\n\n\"Like you've met someone,\" she said, her eyes avoiding mine. \"Someone that . . . well, you're excited about.\"\n\nI was silent, not sure how to answer her.\n\n\"Did you sleep with her?\"\n\n\"What difference does that make?\" I said, amazed at her boldness. \"I've slept with a dozen or so women since you left. What's one more?\"\n\n\"Because you care about this one,\" she replied, looking down into her lap before turning to me. \"Other than Allie--and I'm not so sure how much you cared for her; I mean really, really cared--other than her, you really haven't fallen for someone since . . . .\"\n\n\"Since you left me,\" I said. \"You can say it: 'I haven't really fallen for someone since you left me.'\"\n\n\"Since I left you,\" she whispered.\n\n\"You're wrong,\" I said. \"I did fall for someone. Just before I had to come back here. Someone who would've been . . . I don't know. But it was more than just sex, I can tell you that. And if this hadn't happened with Mom, then who knows. I'd probably be with her.\"\n\nKristin was silent, seemingly stunned at the realization I'd formed an attachment to someone other than her. Even though she'd left me for Randy and a life back in Grant City, she was nourishing this infantile fantasy about her being my one true love, the only person I could ever be with.\n\n\"What's the big deal?\" I said, angry at her reaction.\n\n\"Just watching my dreams shatter.\"\n\nWe were silent for a few minutes, both of us staring at Ben.\n\n\"Listen,\" I said, for some silly ass reason trying to cheer her up, \"I don't really know how serious this is gonna be.\"\n\n\"What do you mean?\"\n\n\"I mean she's afraid. To get involved and all.\"\n\n\"Why?\"\n\n\"Because she's been hurt.\"\n\nKristin mulled it over, then placed her hand on mine.\n\n\"But you want her to say yes, don't you?\"\n\n\"I think so,\" I agreed. \"I want her to at least try.\"\n\n\"Do I know her?\"\n\nI laughed. \"Yeah, you've seen her.\"\n\n\"She from here?\"\n\n\"My editor,\" I said. \"The girl I was at dinner with that night. The one who told me about Ben.\"\n\nKristin's eyes widened. \"But she's-- \"\n\n\"A wonderful person,\" I challenged. \"Smart, kind, pretty. All around wonderful. Maybe a bit difficult to get to know, but from what I've come to know . . . .\"\n\nKristin bit her tongue. To her credit, she left my description unchallenged.\n\n\"So you think maybe you're in love with her?\" she asked.\n\n\"Dunno.\"\n\n\"But you want to find out?\"\n\n\"Uh huh.\"\n\n\"Without really . . . without trying? On us?\"\n\nI looked at her, not sure what to say.\n\n\"We'll see how it plays out,\" I said, then laughed. \"Hell, if she--if Marisa--has her way, it's not going anywhere anyway, okay?\"\n\nKristin nodded, then tried to smile. But she was afraid, like she was finally getting the point that there may never again be a Tyler and Kristin. That our ship had sailed, and she'd been on deck and left me ashore.\n\nOn a shore with other women out there I could fall in love with and who could love me in return.\n\nThen Kristin's hand squeezed mine.\n\n\"No matter what,\" she said, her jaw set with determination, \"I want you to be happy. I really mean that. And if you can't be happy with me anymore, then I want you to find someone and be happy with them. You deserve it.\"\n\nI nodded. \"You, too,\" I said, meaning it. \"You, too.\"\n\nShe gave a lopsided grin and kissed me on the cheek.\n\n\"Thanks.\"\n\n* * * * *\n\nI was going to give Marisa five days, then call her to push for a dinner commitment. On day three, she called me.\n\n\"You really serious about wanting to get to know me?\" she started, her voice timid.\n\n\"Never more serious about anything in my life,\" I confirmed.\n\n\"And about me getting to choose where we go?\"\n\n\"Deal's a deal.\"\n\nI heard her draw a breath, then she spoke in a flurry of words. \"Tomorrow night. Pick me up at five thirty. Greek Islands in Greektown.\"\n\n\"See you then,\" I promised.\n\n* * * * *\n\nWhen I picked her up, she was dressed as always. Think black. Her face challenged me, daring me to say something.\n\n\"You look hot,\" I said, smiling as I pushed her hand away from the door handle and opened it for her.\n\n\"You don't have to do that,\" she said.\n\n\"What?\"\n\n\"Open my door. This isn't the nineteen fifties. I can get it myself.\"\n\nI smiled and shut the door behind her, then went around, got in the car, and put it in drive.\n\n\"I'm not asking you to change,\" I said, paying attention to the street signs as I made my way toward Halsted. \"Don't bother asking me, okay? We're doing this to see if we can get along. Deal with each other the way we are instead of try to mold each other into our own visions of the perfect mate.\"\n\nShe said nothing.\n\n\"Okay?\" I prompted.\n\n\"Fair enough,\" she said.\n\n\"And I was serious before,\" I said. \"You really do look hot.\"\n\n\"That's just because you know what's underneath.\"\n\n\"True,\" I agreed, then grinned.\n\n\"What?\"\n\n\"The tattoo,\" I said, looking at her briefly before turning left onto Halsted.\n\n\"What about it?\"\n\n\"It's fucking smokin'.\"\n\nA faint smile turned her lips. \"You really like it?\"\n\n\"Love it.\"\n\nShe seemed pleased with that. After a minute, her hand snaked across the front seat and came to rest on my thigh. We drove the rest of the way in silence, just enjoying the silent company.\n\n* * * * *\n\nAlmost an hour and a half later, Marisa pushed away her half eaten plate of baklava.\n\n\"I give,\" she said, patting her tummy.\n\n\"You're kiddin', right?\"\n\n\"What? You think I'm a pig?\"\n\nI smiled. \"That's the first time--fifteen or so times we've been out together--it's the first time you've ever left so much as a crumb on your plate.\"\n\nJust then a waiter hustled to our table, some Greek guy in his mid-forties, full head of black hair slicked back and a five o'clock shadow on his face. He looked at the plate, then at Marisa, then back to her plate. His face turned into a great, broad smile.\n\n\"What?\" she said. \"You, too?\"\n\n\"The cooks,\" he said. \"I had a bet with them. Fifty bucks. No way you could eat it, I told them. They bet me you could.\"\n\n\"Then you win,\" she said, her lips curving into a smile.\n\n\"Fifty bucks,\" he said, then tapped his temple. \"I knew, you see. 'She slowing down,' I told them. They laughed and said it didn't matter.\"\n\n\"Great,\" she said, pushing herself away from the table. \"Now everyone thinks I'm a pig.\"\n\n\"Not a pig,\" he said, placing a hand on her shoulder. \"Active. High metabolism. Good appetite. But not a pig. Oh no, definitely not a pig.\"\n\nHe ogled her, the look on his face making it clear he'd like to rut with her, pig or not.\n\n\"I think we're ready for the check,\" I said, interrupting his stare.\n\nHe tore it off and slid it to me. I slid a hundred under the ticket. His eyes lit up at that.\n\n\"Change?\" he said, knowing my answer.\n\n\"We're square,\" I confirmed.\n\nHis face lit up.\n\n\"Thank you,\" he said, sliding the check and the bill off the table before hustling away.\n\n\"Thanks,\" Marisa said, placing her hand atop mine.\n\n\"My pleasure.\"\n\n\"So what now?\"\n\nI patted my stomach. \"I don't know about you, but I could use a walk.\"\n\nShe groaned at the prospect, rubbing her distended belly.\n\n\"C'mon,\" I said. \"It'll do you good.\"\n\nSo that's what we did. For the next hour, we strolled over the bridge across the interstate and into the Loop, commenting on our favorite buildings and the people scurrying home late from the office. We guessed which ones were lawyers, brokers, traders, and the like.\n\n* * * * *\n\nAn hour and a half after dinner, we pulled into an open parking spot a half block down from her apartment.\n\n\"You coming in?\" she said.\n\nI shook my head. \"I was serious before. No more of that until we know--both of us--where this is going.\"\n\n\"But I want you to come in,\" she said, taking my hand and squeezing. \"Really.\"\n\n\"And you'll behave?\"\n\n\"If that's what you want,\" she said. \"If it's not . . . .\"\n\nShe raised her eyebrow at the suggestion left lingering with her words.\n\n\"It's not what I want,\" I said. \"I think it's best, though.\"\n\n\"Whatever,\" she said, opening the door. \"So you coming in?\"\n\nI shut off the engine and joined her.\n\nOnce inside her apartment--just as spotlessly neat as the last time I'd been there; I think she was a touch obsessive-compulsive--we sat on the sofa and listened to more jazz, sipped wine, and talked about books. What was good, what was bad, why, how they did it, and what could've made the good ones even better.\n\nThen we talked about our childhoods, families, friends, and everything else under the sun. She was becoming easier to talk with as we became more comfortable with each other, and she seemed to be letting her guard down more and more as our conversation went along.\n\n\"I could get used to this,\" I said, sipping the last of my wine.\n\n\"What? Me?\"\n\n\"The jazz,\" I said. \"And you.\"\n\nShe smiled, then reached for the bottle of wine to pour me some more.\n\n\"No,\" I said, pulling my cup away. \"I've been here almost two hours, and I've got a long drive.\"\n\n\"Spend the night,\" she said, neither suggestive nor demanding. Just that. Just, like, spend the night.\n\n\"Where will I sleep?\"\n\n\"In the bed, of course.\"\n\n\"Oh,\" I said, leaning back and looking at her. \"And you'll behave yourself?\"\n\n\"Will you?\" A smile was playing over her lips. It lit her whole face up in a way I haven't yet described. Especially this smile, which had a certain little girl innocence to it.\n\n\"I'll try.\"\n\n\"Then so will I,\" she said. \"Try, that is.\"\n\n\"Think you'll succeed?\"\n\n\"Depends on how much more of this we drink.\"\n\n\"Then let's have just one more, then we'll turn in. I wouldn't want you to rape me or anything.\"\n\nShe leaned in close. \"You sure about that? Sounds kinda kinky. Maybe it's just up your alley.\"\n\nIt was my fault. I knew it then and there, but it was her easy, flirty demeanor. I just broke down and leaned in and kissed her. Just a light peck on the lips, but then she was back seeking more. And before I knew it, we were in a full blown makeout session on her couch. My hands were stroking her face, arms, and back. She was holding my head to keep my lips where she wanted them.\n\nAfter I don't know how long of this pure heaven, I broke away. Taking a deep breath, then adjusting the raging hardon in my pants, I looked at her and smiled.\n\n\"Okay,\" I said, \"time for that bed now.\"\n\nShe pouted, but her face showed something more. Something like she was glad I'd held off.\n\nI wasn't glad, though. I was now fully revved.\n\nA couple of times during the night, I found myself reaching toward her sleeping body. But I stopped every time, frustration riddling my hormones.\n\nAnd the next morning I was rewarded for my restraint while putting on my jacket to leave back for Grant City and let Marisa get her studying done before class.\n\n\"So when's the next date?\" she said.\n\n\"When do you want?\"\n\n\"Tonight? And tomorrow?\"\n\nI smiled. \"Could be a bit tough. With your school and all and me trying to get another book written.\"\n\n\"So when?\"\n\n\"Friday?\"\n\n\"Time?\"\n\nI shrugged. \"Depends on what you want to do.\"\n\nMarisa paused, biting her lip and looking at the ceiling. Then she turned to me, her face a combination of challenge and trepidation.\n\n\"I want to meet your friends,\" she said.\n\n\"My friends?\"\n\n\"Those people you went to school with. The ones you went and partied with that one Friday. You said they meet most Fridays.\"\n\nI hesitated. There was a strong chance that Allie or Kristen or both would be at the get together this Friday. It was at Chumly McWhorter's place, and they were both close with Chumly's wife Darla.\n\n\"Is there a reason you're not saying yes?\" she said. The trepidation was now gone, her face all challenge.\n\nI sighed, recognizing her tactics. My anger at the endless challenges--the \"See? You are embarrassed of me\" attitude--was quelled by the sudden realization of her underlying motivation, though. She was afraid. I saw that. It was in the initial trepidation. She was afraid of where we were going together. And afraid I'd just be another one to throw her away.\n\nI smiled, a broad grin.\n\n\"So you're coming back to Grant City?\"\n\n\"Only if we go to the party,\" she said, a smirk now on her face.\n\n\"When's your last class on Friday?\"\n\n\"Don't avoid answering me,\" she said. \"I'll cut class if I have to. That's no reason either way. Just yes or no.\"\n\n\"Well,\" I continued, \"I was just hoping you could come in early. I'd really like you to take a look at where I am on the new one. The sequel.\"\n\nHer look told me she thought I was weaseling out on answering her.\n\n\"If you think I'm gonna be deterred by your book, spend all night-- \"\n\n\"Oh no,\" I interrupted. \"It's just that the party starts at seven. Since you're coming out and all, I just wanted to make sure you'd have a couple of hours to at least scan over it and see if you spot anything major before I finish it.\"\n\nHer eyes narrowed, trying to spot a trick in my answer.\n\n\"If it helps,\" I said, \"I can e-mail you the work in progress. Then you could have a few days to peruse it at your leisure and we can just go over any problems when you get there. That way we'll definitely get to the party on time.\"\n\n\"So you'll . . . .\"\n\n\"Take you to the party? Of course. Why wouldn't I? Hell, you're gonna have to meet them all sooner or later anyway. Might as well be sooner, right?\"\n\n\"I guess so,\" she said, suddenly not so sure of herself.\n\n\"Good,\" I said. \"Then I'll e-mail you the attachments and, if you've got the time, look at as much of it as you can. Bill the account, of course, so you can get paid. This isn't a favor you know. Just call or e-mail me when you'll be in town so I'm ready for you.\"\n\nShe nodded blankly, her mind wandering.\n\n\"Think I can get a kiss before I go?\"\n\nShe walked like a zombie toward me, leaned in, and pecked my cheek.\n\n\"I'll see you Friday,\" I said.\n\nShe was standing at the doorway as I left, watching me but not seeing me.\n\nTouche.\n\nThen I shuddered. What would Kristin and Allie do?\n\n* * * * *\n\nMarisa didn't go out of her way either way on Friday. She was the same. Black goth clothes and makeup. The only real change was the long, black trench coat to allow for the chilly weather.\n\nMom, who had never met her, was initially taken aback at her appearance. She quickly settled down, though, when Marisa sat with her for fifteen minutes or so and patiently asked for updates on her recovery and--better yet, you'll know if you try it with any grandmother--her time with little Ben.\n\nDad, who was by now used to Marisa's appearance and, if not comfortable, at least no longer shocked, just listened to them and smiled, only occasionally interjecting a comment or a question.\n\nI sat on the couch next to Marisa and watched them all.\n\nThen we disappeared upstairs for an hour and a half, where Marisa proceeded to point out a few major plot holes, character inconsistencies, and problems with the flow of the new book.\n\n\"Don't get me wrong,\" she said halfway through the savaging of my hard work, \"it's really very good. Probably better than the first one. And I'm sure you'd have caught most of this in the initial editing and revision process. So at least I've saved you some time, right?\"\n\n\"Right,\" I said, knowing I wouldn't have caught half the mistakes she'd found in only three days.\n\nBy seven fifteen, we were pulling into the Chumly and Darla McWhorter residence, the last in a long line of cars in the packed driveway. Kristin's car was parked right in front of us.\n\nMarisa must've seen my hesitation. Or the narrowing in my eyes. Or, most likely, the way my knuckles turned white as my grip on the steering wheel tightened.\n\n\"Problem?\" she said, more than just a hint of sarcasm in her voice.\n\n\"Just so you're prepared,\" I said, turning to her, \"that's my ex-wife's car there.\"\n\n\"You knew she'd be here?\" Marisa said, her eyes going wide.\n\nI nodded. \"She's really good friends with Darla.\"\n\n\"And you didn't say anything?\"\n\nI turned back to the car in front of us. \"You wouldn't have believed me.\"\n\nShe fidgeted, embarrassed I was onto the game she'd played.\n\n\"Besides,\" I said, relaxing, \"this had to happen sooner or later, right? And with everyone here--pretty much both of our friends, Kristin's and mine--I don't really think she'll do anything.\"\n\n\"Maybe this isn't such a good idea,\" Marisa said.\n\nI shook my head. \"You're not backing out now.\"\n\n\"We could go back to your place,\" she said. \"Just watch a movie or something.\"\n\n\"Nope.\"\n\nI got out and went around and opened Marisa's door. Marisa, forever quick to open her own door before I had a chance to do it for her, just sat there.\n\n\"Come on,\" I said, holding my hand out to her.\n\nShe didn't move, so I reached down and took her hand, gently pulling her from the car.\n\n\"Will you relax?\" I prodded. \"It'll be fine.\"\n\nWhen Darla answered the front door, her smile at seeing me turned to confusion at seeing Marisa.\n\n\"Hello, sweetie,\" I said, leaning in and pecking Darla on her plump cheek. \"This is Marisa.\"\n\n\"Hey, Tyler,\" she said, slack jawed. \"Marisa.\"\n\nMarisa tried to smile and nod her head in greeting, but she was just as frozen as Darla.\n\n\"Where do we put this?\" I said, holding out a platter of venison sausage, cheese, and crackers balanced atop a twelve-pack of Lite.\n\nDarla snapped out of it, now smiling brightly and taking my arm.\n\n\"Back here, handsome,\" she said, leading me through the crowd in the living room and into the kitchen.\n\nI felt two things on that long journey of only twenty-five feet: Footsteps and stares. Marisa's footsteps only inches behind mine and the silent eyes of my classmates and their significant others on me and my new girl. I managed to smile and nod at all of them on my way to the table covered in appetizers.\n\n\"Beer or wine?\" I said to Marisa once the platter was snuggled between a plate of crudites and a pot of barbecued meatballs and the beer on the porch to stay cold.\n\nMarisa's head turned from the crowd, most of whom were now back to chatting with each other, and her eyes met mine. She looked like a deer in the headlights, her eyes unseeing.",
        "\"Beer or wine?\" I repeated.\n\nShe shook her head.\n\n\"How about a beer?\" Allie said, appearing behind me and holding a bottle of Lite out to each of us. \"Hey, Marisa.\"\n\nMarisa took the beer, nodding at Allie as she did so. \"Thanks.\"\n\n\"Haven't seen you in months,\" Allie said, to her credit trying to relax Marisa.\n\nI've gotta say, I didn't see this one coming. If anything, I was more afraid of Allie's reaction than of Kristin's.\n\nStill Marisa was silent.\n\n\"So does this mean Tyler's almost done with another book?\"\n\n\"Almost.\"\n\n\"Good.\"\n\nAllie hooked Marisa's arm, then turned to me. \"I'm gonna go introduce her around, okay?\"\n\n\"Sure, Allie,\" I said, my eyes on Marisa.\n\n\"Come on, hon,\" Allie said, pulling Marisa toward a group of women--Kristin included--talking in the corner.\n\n\"She's hot,\" Denny Koss said, sidling up behind me and sipping his beer.\n\n\"Kinda strange lookin',\" Chumly McWhorter agreed to my side. \"In a real neat kinda way, though. Yep, I'd do her.\"\n\n\"You'd fuck a rattlesnake,\" I said to both of them.\n\nThey didn't argue with my assessment.\n\n\"So she's a vampire or somethin'?\" Chumly asked. Marisa was clearly outside his zone. And everyone else's, for that matter.\n\n\"Goth,\" I explained. \"They call it Goth.\"\n\nOver in the corner, Kristin was eying Marisa warily, and the rest of the ladies were unsure what to do. Allie was taking the lead, though, prodding all of them into talking.\n\n\"She got any of them strange piercings?\" Chumly said.\n\n\"Most of them chicks on the internet's got 'em,\" Denny agreed, then winced at the notion. \"They must hurt, y'know?\"\n\nI turned and looked at both of them, but their eyes were glued to Marisa.\n\n\"Jesus, fellas, simmer down.\"\n\n\"You didn't answer me,\" Chumly pressed. \"Any piercings?\"\n\nChumly's a plumber, by the way, who must spend his down time surfing internet porn. He'd always been something of a pervert.\n\n\"Now how would I know something like that?\"\n\nThey both looked at me like they didn't believe a word out of my mouth. I just smiled.\n\n\"Jesus, Tyler,\" Allen Wilkinson whispered as he joined us, sweeping his long brown hair back over his head and out of his eyes, \"you sure do keep life interesting, huh?\"\n\n\"What d'ya mean?\" I said.\n\n\"First you shag the hottest chick in our class, convince her to marry you, take off to Florida and make a fortune or something,\" he said, his eyes locked on Marisa.\n\n\"Then you go off and write a book and all,\" Denny added. \"Probably bangin' half the hottest beach bunnies in Florida.\"\n\n\"And now you're back here,\" Chumly said, \"taking all the interestin' ones before we've had a shot at 'em ourselves.\"\n\n\"Dude,\" Allen said, his voice a reverential whisper, \"you got a ten-inch pecker or something?\"\n\nI just laughed.\n\nAnd across the room, Marisa laughed at the same time. At something Kristin was saying to her. Then all the ladies turned and looked at me, Allie said something, and they all laughed again. Just like that, they were all chatting easily, laughing occasionally, and I saw the dark cloud disappear as Marisa's body relaxed and resumed its loose, gangly demeanor.\n\nI smiled.\n\nCouldn't have planned it better if I'd tried.\n\n* * * * *\n\n\"So what were you all chatting about and laughing about?\" I asked Marisa on the car ride home.\n\nShe was in a bouncy mood, and I knew the night had somehow been a success.\n\n\"Things,\" she said, giggling--swear to God giggling--as she answered.\n\n\"What things?\"\n\n\"You know, Tyler.\"\n\n\"No, I don't. That's why I'm asking.\"\n\nShe turned and looked at me while I drove, then burst out in peals of laughter.\n\n\"Was Kristin talking out of turn?\"\n\n\"What makes you think it was Kristin?\" she teased.\n\n\"Allie, too?\" I said. \"Both of them?\"\n\n\"And Darla and Christy and Nancy and-- \"\n\n\"Okay, okay. I get the point.\"\n\n\"Don't be angry, sweetie,\" she said, brushing my cheek with her fingertips. \"It was fun. They're nice.\"\n\nI smiled, not sure whether to kill my ex-wife and the rest of them or to buy them all roses for not turning on Marisa like a bunch of sharks.\n\n\"Besides,\" she said, \"now I know some of your predilections.\"\n\n\"Predilections?\"\n\n\"Predilections,\" Marisa confirmed, then started snorting as she held back her laughter. \"You know. Like bondage maybe?\"\n\n\"Aw, Jesus,\" I moaned. \"It's not a predilection.\"\n\n\"Not according to Allie.\"\n\n\"It was just that once.\"\n\n\"And it rocked her world, superstud.\"\n\n\"Anything else?\" I demanded.\n\n\"Oh yeah,\" she said. \"A lot else.\"\n\n\"Kristin?\"\n\n\"And Allie.\"\n\n\"For Chrissake,\" I muttered.\n\n\"Hey Tyler?\" she said, her fingertips now caressing my thigh and creeping toward my package.\n\n\"Yeah?\"\n\n\"We maybe close enough now--maybe know each other well enough--that maybe you'd take me to a hotel now and, you know, try some of these things with me?\"\n\nThen she burst out laughing as she gave my pecker a quick squeeze.\n\n\"Tease,\" I said, now vowing vengeance on all gossipy, kiss-and-tell women.\n\nShe just laughed louder. \"I can't wait to call Susan tomorrow.\"\n\nStopped at an intersection, I turned to her.\n\n\"Enjoy your little laugh, young lady. You'll maybe find out about my fondness for spankings.\"\n\n\"Giving or receiving?\" she laughed. \"They didn't really get that far into your past.\"\n\nI couldn't help it. Her laughter was infectious and I just laughed right along with her. Okay, mine was more of a chuckle, but I'll admit she just took my breath away at that moment. So unguarded. So happy. I felt good, pleased I had some part in her glee no matter how small and if only as the butt of the joke.\n\nAnd that's when I knew.\n\nI was in love with this girl.\n\nMe. A soon-to-be (maybe, if the experts were correct, but what do they know anyway) successful author in love with this weird, wacky, silent, brilliant, incredible-amount-of-food-consuming, Goth chick. This lovely young lady with a brilliant smile and an infectious laugh.\n\nWe had nothing in common except our love of writing and good books.\n\nNothing.\n\nDoes love really work like this? It sure as hell wasn't like any love I'd ever dreamed of.\n\nAnd would it strike her, too? Would she fall in love with me?\n\nThat last one that scared me, because now I realized more than ever that I really wanted her to love me.\n\nNo just like me, even if it did include hot sex.\n\nI needed Marisa to love me.\n\nCHAPTER SEVENTEEN\n\n\"Problem,\" Marisa said when I answered the phone three days later.\n\n\"What?\"\n\n\"The party,\" she said. \"It's next Saturday.\"\n\n\"Yeah,\" I confirmed. \"We're flying out Friday morning. We'll spend Friday afternoon and the following day in Manhattan, go to the party, fly back Sunday afternoon. What's the problem?\"\n\n\"I can't make it,\" she said.\n\n\"You what?\"\n\n\"Can't make it.\"\n\n\"Why?\"\n\nShe was silent.\n\n\"C'mon, Marisa,\" I said. \"What's the problem?\"\n\n\"Something's come up is all.\"\n\n\"What?\"\n\n\"Just something. Something I can't get out of.\"\n\nI took a deep breath. Since we'd parted Saturday at midday, I'd been looking forward to the upcoming mini-vacation with Marisa in the worst way.\n\n\"Then can I at least see you before I go?\"\n\n\"Sorry,\" she said, barely a whisper.\n\n\"Marisa, what's wrong? Did I do something?\"\n\n\"It's not you. It's just that . . . well . . . something's come up.\"\n\n\"Can we talk about it?\"\n\nShe was silent.\n\n\"Marisa?\"\n\n\"I'm sorry, Tyler.\"\n\nAnd she hung up.\n\nWhen I tried calling her back, it went to voice mail. I left her a message. Then another message an hour later. Six messages on Tuesday also went unreturned.\n\n* * * * *\n\nBy late Wednesday morning, I was frantic.\n\n\"Why don't you get off your ass and go to her,\" Dad told me. \"Jesus, you walk around hangdog all goddamned day. Just go to her. Find out what's the matter.\"\n\nI looked at him, then at Mom, who nodded in agreement. So I listened to them.\n\nI sat on the stoop outside Marisa's apartment for three hours before one of her neighbors came home and saw me there.\n\n\"She's not here,\" the heavyset woman said. \"Took off early yesterday mornin'. Suitcase in hand. Caught a taxi.\"\n\n\"Did she say where she was going?\"\n\n\"Sorry,\" she said, and her face told me she meant it.\n\n* * * * *\n\nI was on the interstate back home, cell phone to ear, when she picked up.\n\n\"Hello?\"\n\n\"Susan? It's Tyler.\"\n\nShe paused, then spoke slowly. \"How are you?\"\n\n\"Susan, have you heard from Marisa? She's canceled out on going to New York, won't take my calls, and now I've been to her apartment and-- \"\n\n\"She's with me,\" Susan said, sadness in her voice.\n\n\"What's wrong? Did I do something?\"\n\n\"It's not you, Tyler.\"\n\n\"Then what is it?\"\n\nSusan sighed. \"I can't really talk about it.\"\n\n\"Well can I speak with her? Talk to her? At least say hello?\"\n\n\"That's probably not a good idea right now.\"\n\n\"Why?\"\n\n\"She doesn't want to talk to you. I don't think it would be a good idea to force her, okay?\"\n\n\"Can you tell me anything?\"\n\n\"Not now.\" She paused. \"Tyler, I'm really sorry. I was afraid you felt this way. I will tell you she's not sure how you feel, but I warned her you probably cared for her. I'll tell her that now, okay? Maybe it will make a difference.\"\n\n\"Goddamnit, Susan,\" I said, \"let me tell her myself. Please.\"\n\n\"Good bye, Tyler. I'll call you when I can tell you more. I promise.\"\n\nShe disconnected.\n\nThat's when I got pulled over for doing eighty in a sixty-five. He was an older cop, though, one who'd so obviously been there before and recognized the look on my face.\n\n\"Woman problems?\"\n\nI just nodded, staring straight ahead in a daze.\n\n\"Well getting your ass killed--and probably killing someone else--sure as hell ain't gonna solve 'em now, is it?\"\n\nI shook my head.\n\n\"Sorry.\"\n\n\"Don't be sorry. Slow the hell down.\"\n\nHe walked back to his car muttering.\n\nThen a thought struck me, and I spent the rest of the drive home hoping Kristin would be there.\n\n* * * * *\n\n\"What did you guys talk about with Marisa?\" I asked when we were in my room.\n\nKristin smiled, then grinned broadly.\n\n\"This isn't funny,\" I said, trying to keep my anger in check. \"She's taken off. Won't speak to me.\"\n\nBy the look of horror on Kristin's face, I knew with a sinking feeling that it wasn't anything she'd intentionally done.\n\n\"We didn't . . . everybody was . . . just stories, Tyler. Really. You saw us. She was laughing.\"\n\nI nodded. \"What kind of stories?\"\n\nKristin dropped her eyes, fidgeting.\n\n\"What kind of stories, Kristin?\" I insisted.\n\n\"You know. Maybe some racy stuff. And some funny stories. From when we were together and when you were growing up and stuff.\"\n\n\"I know about the racy stuff,\" I said. \"What about the growing up stuff.\"\n\n\"Just, like, some of the things we all used to do. You know. The first time you smoked dope and spraypainted a mural in your Dad's workshop. Stuff like that.\"\n\nI nodded. \"Nothing about . . . well-- \"\n\n\"We were nice to her, Tyler,\" she said, sadness in her face. \"You saw us. I wouldn't do that to you. I could see how you watched her.\"\n\n\"And how was that?\"\n\n\"Like you cared for her.\"\n\n\"So it was in your own best interest to get something in to maybe put up a little roadblock, right?\"\n\n\"I didn't. Swear to God I didn't. I wouldn't do that.\" Her face was frantic, her tone pleading with me to believe her.\n\nI just stared at her. Hard.\n\n\"You have to believe me. Sure, I want you to give us another chance. But do you really think I'm going to go around sabotaging every relationship you have for that chance?\"\n\n\"Why wouldn't you?\"\n\n\"Because then you'll never give me another chance,\" she said. \"I know you. You'd hate me even more.\"\n\n\"I don't hate you,\" I said.\n\n\"But you don't love me. At least not enough to give us another chance.\"\n\n\"We've been over this. It's not-- \"\n\n\"I know,\" she interrupted. \"But let me tell you what else I know. If you really care about her and I do something--anything, no matter how small--if I do something to get in the way of that, you'll never talk to me again. At least not like you are now.\" \n\nShe was right, of course.\n\n\"We've got Ben now,\" she continued, her voice softening. \"You think I'm going to mess up what we've got right now with Ben? Knowing it'll hurt him? You really think I'd risk that? So yeah, I want you back. But I wasn't lying, Tyler. I fucked up; I know that; and I really only want you to be happy. If I can make you happy--and I swear to God I'll try for the rest of my life like never before--well then I want that chance. But I know if I get in the way, you'll resent me for the rest of your life. And I don't want that. I don't want Ben to see his parents hating each other, even a little bit. Not if I can help it\"\n\nI nodded. She was right: It wasn't anything she or any of the other women had said or done on Friday night.\n\nThen what the fuck was it?\n\n\"I can tell you something, though,\" Kristin said.\n\n\"What?\"\n\n\"There was something in the way she looked at you--sometimes at us while we were talking.\"\n\n\"What?\" I pressed.\n\n\"She's scared. She looked at you with fondness almost bordering on puppy love devotion. But there was something more. Like she was scared of that. Of her own feelings for you.\"\n\nTime to quit lying to myself. I'd suspected since talking to Susan, and now Kristin confirmed it.\n\nMarisa still didn't trust me. Trust us. She'd been shit on so many times, she was scared of giving it a chance.\n\nHer terror of being rejected or hurt was overwhelming any feelings she may have for me.\n\nSo what do I do now?\n\n* * * * *\n\nI was packing Thursday evening, getting ready to get up at four the next morning and get to O'Hare for my flight to Manhattan.\n\nLost in my thoughts, I didn't hear the scraping at first. When I heard the thud, though, I went out to investigate. Mom was laying sprawled on the stairway, trying without success to pull herself up by the bannister.\n\n\"Mom,\" I said, rushing down to help her up. \"Jesus, what're you doing? Where's Dad?\"\n\n\"We need to talk,\" she said. Her speech was almost back to normal. The words were clearly enunciated, and most of the pause between words was gone.\n\n\"I'll come downstairs,\" I said, holding her frail body to mine.\n\n\"No.\" Her voice was firm, and her expression told me she wanted to get the rest of the way up the stairs.\n\n\"Okay,\" I said, and helped her the rest of the way with her weak arm around my shoulder.\n\nOnce in my room, she sat in the chair at my desk and turned to face me.\n\n\"You're hurting,\" she said.\n\nI nodded.\n\n\"Is it Kristin?\"\n\n\"No, Mom. It's not Kristin.\"\n\n\"So you've decided then. You're not going back to her.\"\n\nI sighed. \"Pretty much. Yeah, that's over.\"\n\nShe paused, her face upset at first. Gradually, a sense of steely determination set in.\n\n\"Why?\"\n\n\"Because, Mom,\" I explained, trying to find words for my feelings and failing. \"Because she left me. Because she married someone else.\"\n\n\"But you love her?\"\n\nI thought about it before answering.\n\n\"Sure. I love her. Always have.\"\n\n\"Then why won't you try?\"\n\n\"Because, Mom, my love wasn't enough. Mine or her's. It wasn't enough to keep it together.\"\n\n\"I've seen marriages get past worse.\"\n\n\"Yeah, but for how long? Have you seen them get past worse and last? Were they happy? Or as happy as they were before?\"\n\nShe gave a brief shake of her head. \"No. No, they weren't.\"\n\n\"I've thought about it, Mom. Really I have. But it's two things. First, she left me. No explanation, no nothing. Just left. And got remarried to someone she was . . . she was sleeping with while we were still together. I mean, that's pretty major.\"\n\n\"And you can't forgive that?\"\n\nI shook my head. \"The problem is that I loved her so much. Really. With every breath I took, I worshiped the ground she walked on. That just makes it way worse, you know? It's so hard to take when you love them so much that you can't even picture them acting like this. And when she did, it just dropped my whole bottom out from under me. Maybe if I didn't love her as much it wouldn't have been so bad. I could forgive the betrayal and all. But I can't. It's like she didn't love me nearly as much.\" \n\nMom nodded, her face sympathetic and understanding. \"I think she'd try now, though. I think she realizes that, and she's doing everything to prove to you she'll love you more than ever before.\"\n\n\"But I can't trust that. What if we get back together? Will she get bored again? I mean, if she really loved me--loved me as much as I loved her--then she'd have never gotten bored with me. Did I mess up? Sure. A lot. I'm not saying it was just her fault. Still, she's the one that left. Without a word of warning or explanation. And she's the one that moved on. And to be honest, I think the only reason she's willing to even try now is because we're both back here and Randy's divorcing her. Back with her family and friends and everything, and no Randy anymore.\"\n\nMom nodded. \"You said there were two reasons.\"\n\n\"Ben,\" I said. \"Right now Ben's growing up in a one-parent household. He gets to see all of us, but he's used to the way things are. He doesn't really know any better, and by the time he's older he'll have forgotten all about Randy and everything and it will be all he knows. If I get back with Kristin and it doesn't work out . . . well, I just can't put Ben through that kind of pain.\"\n\n\"And you're not willing to take the chance,\" Mom said, a statement and not a question.\n\n\"No, I'm not.\"\n\n\"You think it's better for him to grow up in a single-parent household than in a normal household?\"\n\n\"That's not what I think,\" I said. \"I just think that the 'normal household,' as you put it, wouldn't last. And I don't want Ben to have to go through that. Kristin and I get along now, and I don't want him to have to go through a divorce and the whole mess associated with it.\"\n\nWe sat silent for a few moments.\n\n\"Then it's Marisa, isn't it?\"\n\n\"Yeah, Mom, it's Marisa.\"\n\n\"You really care for her,\" she said. \"It shows. You're . . . I don't know. Protective, I guess. And you always seem to be leaning toward her.\"\n\n\"I think I love her.\"\n\nShe nodded, her somber face brightening into a smile. Though only half of her lips curled into the smile, she was the mother I'd grown up with. I no longer saw the stroke she'd suffered. She was my mom again.\n\n\"I can see how you would. Not at first, I suppose. But in just those few minutes, I was with her, I saw something. A kindness that's pretty rare.\"\n\nI nodded, not sure how to put my feelings into words.\n\n\"Have you told her?\" Mom said. \"That you love her?\"\n\n\"No. Never really got the chance.\"\n\n\"Bullshit, Tyler.\"\n\nMy jaw dropped. Mom never swore. Well, almost never. But her profanity wasn't in anger.\n\n\"You've had plenty of chances.\"\n\n\"She's gone,\" I started to explain. \"She's-- \"\n\n\"Then find her. Find her and tell her.\"\n\n\"I know where she is. With her sister. In Florida. But she won't see me.\"\n\n\"Then figure out a way to get the message to her. Through her sister or something.\"\n\n\"But how?\"\n\nMom pushed herself out of her chair, clutching her cane and staring down at me.\n\n\"If you really love her, you'll figure out a way.\" She slowly covered the few feet to me on the bed. \"Now kiss your mother for making it all better and help me down the stairs before I break my neck.\"\n\n* * * * *\n\nAround eight o'clock that night, I sat at my desk writing my nearly-finished second novel. For whatever reason, and don't ask me to explain, I figured out the only way I could get word to Marisa. The only way Susan would have to tell her how I felt.\n\n\"Tyler,\" a sleepy Susan said on answering the phone, \"do you know what time I have to get up in the morning?\"\n\n\"Tell her I love her, Susan. Don't tell her I care for her. You tell her I love her.\"\n\nSusan paused.\n\n\"Tell her,\" I insisted. \"And you tell her, too, that if she's not there Saturday night--if she's not at that party--then I'm leaving. This isn't just my book. This is our book. Your's, Marisa's, and mine. And I want all of us to be there to get the credit.\"",
        "\"But Tyler,\" Susan started arguing, fully awake now.\n\n\"But Tyler nothing. I'm not going to have the biggest night of my life without the woman I love at my side. So I don't care how you do it or what you do, but you make damned sure Marisa's there. Even if only to tell me to fuck off and get out of her life, she'd better be there or I won't be.\"\n\n\"But you can't do that,\" Susan argued. \"You're contractually bound to-- \"\n\n\"I know what the contract says. But I don't care. Fuck the contract. Let 'em sue.\"\n\n\"What if I can't-- \"\n\n\"Figure out a way, Susan. I'm serious. She'd better be in Manhattan by Saturday morning, and she'd better be at that party.\"\n\n\"But this is . . . well, it's blackmail.\"\n\n\"No, Susan,\" I said, my voice lowering. \"This is the only way I can figure to tell the woman I love how I feel. And to let her know just how serious I am about it. Mark my words, because I mean every damned one of them.\"\n\nSusan sighed.\n\n\"I'll see what I can do.\"\n\n\"Thanks,\" I said, but she disconnected without saying goodbye.\n\nCHAPTER EIGHTEEN\n\nThe flight was uneventful, and the meetings I was stuck in with publishers, editors, lawyers, and graphic designers were boring beyond belief. Friday night dinner was good, though.\n\nThings became somewhat brighter about halfway through dinner when Natalie left the table to take a call.\n\nFive minutes later she was back, a smile plastered across her face.\n\n\"She'll be here,\" she said to me.\n\n\"Marisa?\"\n\n\"Of course Marisa. Who else?\"\n\n\"When?\"\n\n\"Tomorrow morning. Flight gets in at ten.\"\n\n\"What gate?\" I said, eager to be there.\n\nNatalie shook her head. \"No way, buster. You've got more meetings in the morning. And you need to rest up in the afternoon.\"\n\nMy eyes narrowed. \"You're not lying?\"\n\n\"What good would that do? I'm lying, you'll just leave.\" She leaned over and patted my hand. \"You just settle down now, okay? Try to enjoy yourself. Maybe pay a little better attention at the meetings tomorrow. Get a nap in the afternoon. You'll see her at the party.\"\n\n\"You're not lying,\" I said again, more of a statement this time, like I was trying to convince myself.\n\n\"Ahem,\" the short little gray-haired fellow at our table said.\n\n\"Yes, Riley,\" Natalie said to the publisher.\n\n\"This Marisa you're speaking of,\" he said, his voice higher pitched than you'd think. \"She isn't, by any chance, the young lady who edited this? Actually found it and got it to you?\"\n\n\"That's the one,\" I said.\n\n\"And she's going to be here?\" he said, looking both surprised and pleased at the notion.\n\n\"She'd better be here,\" I said.\n\n\"What do you mean, Tyler?\" he said.\n\n\"If she's not,\" I started.\n\n\"What he's trying to say, Riley,\" Natalie cut in, her hand clamped on, and squeezing the hell out of, my forearm. \"What he's trying to say is that he feels she deserves the lion's share of the credit.\"\n\n\"Oh, I don't know,\" Riley said, smiling at me easily. \"She didn't write it. You did. So credit, to be sure, but probably not the lion's share, eh?\"\n\n\"The lion's share,\" I said. \"If it wasn't for her, you'd have never seen it. And you've read the final draft I had before she helped with the edit.\"\n\nHe nodded. \"Yes, I will admit it's even better than we expected. And your own final version was already superb.\"\n\n\"But her's is better, right?\"\n\nHe nodded. \"Noticeably.\"\n\n\"So the lion's share,\" I reiterated.\n\n\"Then I'll look forward to meeting her,\" he concluded, diving back into the duck breast on his plate.\n\nI smiled, wondering if he'd still think that when he actually saw her in person.\n\nI thought back to the first time I saw her, wondering how I'd ever come to fall in love with that apparition on my doorstep.\n\n* * * * *\n\nThe party started at eight on Saturday night, and I was there five minutes early. It was in a ballroom at the Waldorf Astoria, and there were giant placards with my picture and with the cover of the book scattered throughout the room. There were also several hundred courtesy copies of the book for the press, critics, and the various literati and celebrities that were expected to attend. I'd spent an hour and a half autographing each and every book.\n\nThere were already a few dozen people there, mostly milling at the bar or at one of the several tables laden with canapes. I didn't recognize any of them.\n\nAnd I didn't see Marisa.\n\nI felt a squeeze on my arm and turned.\n\n\"Susan,\" I said, leaning over and giving her a peck on the cheek.\n\n\"Congratulations, Tyler,\" she said, looking around the room then back at me. \"You should be proud of yourself.\"\n\n\"Thanks,\" I said, seeing that she was with someone. A thirty-something like me with a square jaw and short-cut light brown hair. No Marisa.\n\n\"Where's-- \"\n\n\"I'd like you to meet Todd Mueller,\" she said. \"He's my . . . we're . . . .\"\n\n\"Dating,\" Todd said, smiling and extending his hand to me. \"You can say it, babe. Really.\"\n\n\"We're dating,\" she said, smiling at him.\n\n\"Tyler Collins,\" I said, returning the firm handshake. \"Thanks for coming. And congratulations, too. Susan's a very special lady.\"\n\nHe beamed at her, and she returned his look with a warm, easy smile.\n\n\"Don't I know it,\" he said. \"We met during a trial a few years ago. She dusted my ass. And then I run into her at the grocery store. A Cuban grocery, no less. Little hole in the wall tucked away in the alley.\"\n\nShe patted his forearm. \"You don't have to tell him the whole story.\"\n\nHe shrugged, grinning at her. \"I just did. Except that we had a drink. Papaya something. And one thing led to another and-- \"\n\n\"And here we are,\" Susan said, pecking his cheek.\n\n\"I'm happy for you,\" I said. \"You deserve it.\"\n\nShe gave me a warm smile. \"And you're the one who kicked me in the ass to give it a shot.\"\n\nI nodded, still looking over their shoulders and around the room, trying to spot Marisa.\n\n\"She'll be here soon,\" Susan promised. \"You know how it is. Make up and traffic and everything.\"\n\nI searched her face for any signs of deception, but she seemed honest and earnest.\n\n\"Tyler,\" I heard a voice call out. \"Come over here a moment, will you?\"\n\nI went toward the entrance and saw Riley McMasters standing next to two men I'd seen a million times before in pictures and on the screen.\n\n\"Tyler,\" he said, \"I'd like to introduce you to Clint Eastwood and Stephen King.\"\n\n\"It's an honor,\" I said, shaking both of their hands in awe.\n\n\"Thanks,\" Eastwood rasped in that familiar voice.\n\n\"Good to meet you, Tyler,\" King said as I shook his hand. \"An excellent book. Really very well done and all.\"\n\n\"Yeah,\" Eastwood agreed.\n\n\"Thanks. Really. Coming from you two, I mean, that's really high praise, right?\"\n\nEastwood chuckled. \"You don't know why I'm here, right?\"\n\n\"For the party?\" I guessed. \"Or someone's going to be here you want to see?\"\n\n\"He has no clue,\" King said.\n\nEastwood chuckled. \"I'm the leading partner in TriCorner.\"\n\n\"TriCorner?\"\n\nNow they both chuckled, shaking their heads in disbelief.\n\n\"TriCorner bought the movie option,\" Natalie chimed in from behind me. \"Hello Clint. Stephen.\"\n\nThey both gave her a hug and a peck on the cheek.\n\n\"Natalie, you old battle axe,\" King said. \"Still finding the hot up-and-comers, aren't you?\"\n\n\"When're you gonna come to my agency?\" she said to him.\n\nThey all grinned, bantering back and forth. My mind, though, was elsewhere.\n\nBy nine thirty, my jittery nerves were being run ragged. Susan, when confronted, continued preaching patience, but my patience was running thin.\n\nI'd talked with nearly every one of the two hundred or so people in the banquet room by then, and I was back with Eastwood and King, now joined by Carl Hiaasen, an incredibly talented Florida mystery writer who was one of my favorites.\n\n\"So you're saying this girl,\" Hiaasen said, disbelief all over his face, \"this Marisa. She's the one who read it and got Natalie to contact you?\"\n\n\"And edited it,\" I confirmed.\n\n\"Really,\" King said. \"And she's a student?\"\n\n\"Working on her doctorate in English. Creative writing, too.\"\n\n\"And Natalie listened to her?\" Hiaasen said.\n\nI nodded. \"She's really good.\"\n\n\"At the editing, too?\" King asked. \"I mean, was it just spelling here and a phrase or something there?\"\n\n\"No. It was the whole ball of wax.\"\n\n\"Does she write, too?\" Eastwood asked, his first words in five minutes.\n\n\"Some, I guess,\" I answered. \"She wants to. I know that. But she's waiting for some more experience. Life experiences, she says.\"\n\n\"How is she with dialogue,\" Eastwood asked. \"Writing dialogue. How is she?\"\n\n\"Did you read the book?\"\n\nAll three nodded their heads.\n\n\"Like the dialogue?\"\n\nThe nods continued.\n\n\"She helped me re-work a lot of it. Not totally. Mostly a word here and an inflection there. But it really made a big difference, that's for sure.\"\n\nHiaasen gave a low whistle, King nodded in thought, and Eastwood just tightened his lips and narrowed his eyes.\n\n\"Holy shit,\" Hiaasen whispered, coming out of his reverie.\n\n\"What?\" I said, seeing Eastwood's eyes narrow to smaller slits and King's mouth open in awe.\n\n\"My God,\" Eastwood croaked, \"I wish I was thirty years younger.\"\n\n\"No shit,\" King agreed.\n\nI turned to watch a tall, elegant woman in a simple sleeveless green dress enter the room and look around shyly. Her hair was cut short and parted on one side, the part nearly covering her left eye. A small, matching green handbag was held against her ribs, the only adornment beside the dress and a simple pair of high heeled shoes.\n\n\"Marisa,\" I whispered, amazed at the transformation.\n\n\"You know her?\" King said.\n\n\"That's her?\" Hiaasen asked. \"The editor?\"\n\n\"You got to work with that?\" Eastwood said reverentially.\n\n\"Excuse me,\" I mumbled, walking to her without looking back.\n\nShe saw me approaching when I was still twenty feet away. Her body tensed, the nervous, searching look now replaced by embarrassment or shame something like it. Her eyes dropped, to the floor, then rose again to meet me.\n\n\"You came,\" I said in relief.\n\nShe nodded.\n\n\"You . . . . I didn't recognize you,\" I said. \"When you walked in. I had to look a second time.\"\n\n\"I look okay?\"\n\n\"Yeah,\" I said, reaching for her hand. \"You look okay. Maybe even a little better than okay.\"\n\n\"Really?\" she said. \"Because I feel like a Barbie doll.\"\n\n\"Barbie dolls never gave me a hard on before,\" I whispered in her ear.\n\nShe smiled, or at least tried to. She was a ball of nerves, though, and her eyes kept shooting to and focusing on the floor.\n\n\"Can we get some fresh air?\" I said.\n\nShe nodded, taking my hand and following me to the balcony.\n\n\"Here,\" I said, draping my suit coat over her shoulders to hold off the breeze on the balcony.\n\n\"Did you mean it?\" she said, her eyes searching my face as I spoke. \"What you told Susan to tell me. Did you mean it?\"\n\n\"That I love you?\" I said. She nodded. \"You're damned right I meant it. More than anything in the whole world. I've never been so serious in my whole life.\"\n\nShe didn't smile. Instead, her eyes bore into mine and held me there, her face searching for any trace of a lie.\n\nI sighed. \"I'll tell you when I knew it. The second night. Well, not really, but the next day when I was driving home.\"\n\n\"The second night we spent together? When you wouldn't . . . you know.\"\n\n\"The first night was great, don't get me wrong,\" I explained. \"But the second night was magical. And the drive home was pure torture because I knew I wouldn't see you again for a couple of days. I realized I didn't want to wait a couple of days. Not even a couple of minutes.\"\n\n\"But I called you first,\" she protested.\n\n\"I was afraid to push you. You made it clear you were . . . what, reluctant? Not sure?\"\n\n\"That could just be infatuation,\" she said. \"You're describing infatuation.\"\n\nI shook my head. \"Thought about that already. But it's not. It's like it was when Kristin and I were first together, only stronger. Way stronger. I remember that. I loved her with every breath, but I could still put it aside for other things when I wasn't with her. With you, though, I can't even really think. The book's gone nowhere since that second night. Maybe ten, twelve pages, and they're all shit. I know I'm gonna have to re-write the whole lot of it.\"\n\n\"Then say it,\" she said. \"Say it again. Convince me.\"\n\n\"I love you, Marisa Key,\" I said, stepping close and holding her face in my hands, staring into her deep brown eyes as I spoke. \"I swear to God. This isn't puppy love. This isn't lust or infatuation or any of that. I know. Been there done that, and that's not what this is.\"\n\nShe tightened her lips.\n\n\"Don't try to make yourself believe it,\" I said. \"Just believe it. It's a fact. And you need to deal with it. You can't run away just because I want to spend the rest of my life proving to you--proving every minute of every day of every year--that I love you.\"\n\nHer eyes were welling up again in tears and still she was silent.\n\n\"I love Ben, too,\" I said. \"But you know that. Not more, not less. In a different way, the way a father loves his son. And my folks, too. I love them, too. But you?\"\n\nShe was nodding now, encouraging me to finish.\n\n\"You,\" I continued, a gentle smile on my lips, \"you I love the way they write books about. The books we both mock. The sappy romance shit. Only it's stronger, more real. I love Ben, but I want his ass out of the house by the time he's out of college if not sooner. And my folks? Well, I'm already looking for a new place now that Mom's pretty much mended and all.\"\n\nI kissed her, just a light brushing on her tear-soaked lips. I tasted salt and the scent of mint.\n\n\"And me?\" she whispered.\n\n\"I don't ever want you out of the house. Not unless I'm with you. I could spend every waking moment of every day from here to eternity and never get enough of you.\"\n\n\"You're sure?\"\n\n\"Damned right I'm sure.\"\n\n\"And in five years? Are you still going to feel that way in five years?\"\n\n\"If we play our cards right, it'll only be stronger.\"\n\n\"Is that a proposal, Natalie?\" I heard from behind me.\n\n\"Riley,\" Natalie gasped. \"You're ruining it. You . . . you . . . . Men!\"\n\nMarisa ignored them, instead hugging me close and burying her face in my shoulder.\n\n\"I love you, too,\" she said. \"More than anything. But I'm scared.\"\n\n\"Is that an acceptance?\" Riley said.\n\n\"Shush,\" Natalie hissed. \"What's wrong with you?\"\n\n\"If I get you a ring will you accept it?\" I whispered into her ear. \"And will that convince you that I mean it?\"\n\n\"But I ran away,\" she said, sniffling.\n\n\"I know,\" I replied. \"But I know why you did it. You were afraid. You weren't leaving because of . . . I don't know. I just know it's not like Kristin. Not like when she left.\"\n\n\"But still,\" she said.\n\n\"I've been abandoned,\" I said. \"You didn't abandon me. You were scared, so you ran. But you won't do it again, will you?\"\n\nI felt her head shaking in my shoulder.\n\n\"And you really do love me, right?\"\n\n\"Yes.\"\n\n\"And now you know that I love you, right? And I mean really know. You know I'm telling the truth.\"\n\n\"I know,\" she confirmed.\n\n\"So let me say it again, maybe a little more formally this time. Should I get a proper ring and drop to my knees, or do you just wanna elope and get married somewhere? Or am I too soon on all of this?\"\n\n\"Do I have to wait for the ring before you . . . you know,\" she said, pulling back and looking at me. The tears were shining in her eyes, but a joyous and playful smile was curling her lips.\n\n\"You little horn dog,\" I accused.\n\n\"I think that was an acceptance,\" Natalie confirmed for Riley.\n\n* * * * *\n\nHours later, entangled on the bed in a knot of naked limbs, Marisa spoke.\n\n\"Can you really believe it? Clint Eastwood wants me to write the script.\"\n\n\"Help me and him write the script,\" I corrected her. \"And only if they actually end up making a movie out of it.\"\n\n\"Still,\" she said. \"Clint Eastwood.\"\n\n\"And Stephen King still wants you to edit a book for him.\"\n\n\"I don't know if I want to do that now,\" she said.\n\n\"Why?\"\n\n\"Well, I mean, what can I really do? Jesus, Tyler, he's Stephen King.\"\n\n\"You'll break his heart if you refuse now,\" I said.\n\nShe was silent for a moment.\n\n\"Whatcha thinkin'?\"\n\n\"Just wondering is all.\"\n\n\"About what?\" I asked.\n\n\"If any of them would've even given me a second look if I'd . . . well . . . you know.\"\n\n\"No,\" I said, genuinely confused, \"I don't know. What d'ya mean?\"\n\n\"If I'd shown up as Marisa. Marisa the young, angry, dressed in black chick you described for them.\"\n\n\"I don't think anything would've been different,\" I said. \"That's the Marisa I fell in love with. The one I still love, really. That's the Marisa that snagged me, so I'm sure it would've snagged them, too.\"\n\n\"So this new Marisa,\" she said, shivering as my fingertip traced the lines of her tattoo. \"You love her, too?\"\n\n\"Is she the real Marisa?\" I said.\n\n\"Maybe.\"\n\nI rolled over, propping my head in my hand, and stared at her.\n\n\"Why? Why did you do it? I mean, you look fantastic, but I'm gonna love you no matter how you dress or what color makeup you wear.\"\n\n\"For you,\" she said. \"I didn't want to embarrass you.\"\n\nI looked at her. \"I was never embarrassed. Not once.\"\n\nShe smiled. \"I know. That's why I love you. And why I know--I mean really know--that you love me, too. But this was your night. I wanted it to be about you, not about the fucking nut job editor you were so madly in love with.\"\n\nI smiled. \"Well it's nice.\"\n\n\"The new look?\"\n\n\"Oh, that too. But no. I was thinking how nice it was that Clint Eastwood lusts after my chick. Think about it: He's a Hollywood star, Dirty Harry for Chrissake, and he wants my woman.\"\n\nShe laughed. \"And how do you know I don't lust after him, too?\"\n\n\"Because you're in my suite. In my bed. Naked as a jaybird.\"\n\n\"And horny again,\" she said, twisting toward me. \"Did I ever tell you about the three things I haven't done yet?\"\n\n\"What three things?\"\n\n\"Sexually,\" she said, her face now above mine, her hands pinning my shoulders to the mattress. \"Since the day I lost my virginity, I've been saving three things for my husband. Three things I've always refused to do so I could save them for the one man I was meant for. You know, like those three things were for just me and him and no one else, and we'd always know that.\"\n\n\"What are they?\"\n\nShe reached back between her legs and guided ole Thurman to her wet entrance, leaning over as she did so.\n\n\"Tell me,\" I gasped, savoring the feeling as she slowly sank onto me.\n\n\"You'll only find out when we're married. When you peel the wedding dress off on the first night of the honeymoon.\"\n\n\"What if I try . . . Oh God, yes . . .what if I try one of them before we're married?\"\n\n\"I'll shoot you down,\" she said, leaning her head back and groaning.\n\n\"But I'll like 'em? These three things?\"\n\n\"You'll . . . oh yeah, just like that . . . you'll fucking love them,\" she promised through her ecstasy.\n\nOh shit! I thought, almost getting off thinking about the possibilities twirling through my head and the warm, wet vice gripping me below.\n\nHow the hell was I going to concentrate on the rest of my second novel until after the honeymoon?\n\nThe End"
    ],
    "authorname": "Rehnquist",
    "tags": [
        "drama",
        "divorce",
        "one on one"
    ],
    "category": "Loving Wives",
    "url": "https://www.literotica.com/s/what-you-wish-for-pt-6"
}
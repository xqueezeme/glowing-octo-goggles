{
    "title": "Three Square Meals Ch. 069",
    "pages": [
        "Sakura was somewhat surprised when her friends burst into peals of laughter. She padded over to them on bare feet, and had a bemused smile on her face as she wondered what it was she'd said that they found so amusing. \n\nJohn pulled her in for a hug, and grinned as he said, \"Yeah, a few things happened while you were asleep. Don't worry, we'll bring you up to speed.\" She was only wearing one of his formal shirts, and he could feel her slim young body through the soft cotton as he held her. \n\nAlyssa glided around behind Sakura, and unbuttoned one of the shirt buttons so she could slip her hand between the gap. She began to caress the Asian girl's trim stomach with her nimble fingers, gently stroking her smooth skin in a suggestive manner that sent Sakura's pulse racing. \n\n\"Explanations can wait,\" Alyssa said with a coy smile. \"This little one needs a full tummy again.\"\n\nCalara chuckled, then said to John affectionately, \"Meet me down there when you're done. Mateo will want to thank you, I'm sure.\"\n\n\"I'll be with you soon,\" he replied with a grin. Turning to look at the other girls, he added, \"Can you coordinate the handover of the Thor to Terran Federation troops? We need Lynton's crew taken into custody as soon as possible.\"\n\n\"They know what to do, don't worry,\" Alyssa said, pulling him and Sakura towards the Ready Room.\n\nThe girls all laughed, and Irillith gave him a reassuring smile as she said, \"I'll re-enter the cyber realm and monitor everything that's happening on the dreadnought. There won't be any trouble.\"\n\n\"I'll contact the Terran fleet and arrange the handover,\" Jade offered immediately. She had a shy smile on her face as she added, \"They seem to really like me for some reason.\"\n\nRachel and Dana exchanged glances, holding an unspoken conversation for a second, and the brunette said, \"We'll go down to the Cargo Bay and check on our guests. I'd like to give the worst of the injured a check-up to confirm Faye's observations.\" She glanced at the purple AI, and continued, \"No offence, I just want to satisfy my professional curiosity.\"\n\nFaye shrugged and gave her a broad smile as she said, \"None taken! My boys made good nurses. There haven't been too many complaints!\"\n\nDana laughed and said, \"We'd better get down there before there's a riot.\" She looked thoughtful for a moment, and continued, \"Maybe there's something I can do to help perk everyone up...\"\n\nJohn glanced over his shoulder, as the raven-haired girl and the blonde pulled him towards the door, and said, \"Sounds good ladies. We'll deal with the aftermath of the battle, then we need to sit down for a debrief.\"\n\nSakura and Alyssa led him into the Ready Room, and over to one of the sofas. Alyssa gave him an enthusiastic smile as she started unbuckling his belt, while Sakura knelt down in front of one of the comfortable chairs.\n\n\"I really should contact the Admiralty...\" John protested half-heartedly, as he watched Sakura lick her lips to make sure they were moist and ready for him.\n\nAlyssa shook her head, and purred, \"Those stuffy old Admirals can wait. The most important thing is keeping this beautiful girl packed full of your cum, so she can grow strong like the rest of us.\"\n\nThe horny blonde helped him step out of his trousers and guided him into the chair, stroking his shaft with her soft hands. He was hard already as he stared into Sakura's lustful brown eyes, and she gave him a shy smile before she parted her full lips, and enveloped the pulsing red head of his shaft. Her mouth felt warm, snug, and wet, and he sighed rapturously when she swirled her tongue around him, the sensation feeling like she was French kissing an ardent lover.\n\n\"There, that's better isn't it?\" Alyssa crooned in his ear, giving him goose bumps. She'd moved around behind the sofa, and was leaning over his shoulder so she could alternate between watching, and planting soft kisses on his pointed ear as she spoke to him. \"A beautiful girl on her knees, eager to help you empty your balls.\"\n\n\"Much better,\" he groaned with delight, as he brushed a stray lock of jet-black hair away from Sakura's lovely face. They locked eyes as she bobbed on him, and he caught a hint of a smile playing around her widely stretched mouth. \n\nAlyssa closed her eyes, savouring his emotions over their bond, and said with a happiness born of profound satisfaction, \"That's right, just enjoy her like she's enjoying you. No need for guilt or self-recriminations, just pleasure for both of you.\"\n\nJohn turned to look at her, tearing his eyes away from Sakura for a moment, and said, *I wondered what you were up to. You helped her make the case for joining us so compelling, so I wouldn't end up feeling guilty about it?*\n\nThe beautiful blonde leaned in and gave him a loving kiss, staring into his eyes as she replied, *Is that so bad? Sakura really does want this, and in my heart of hearts, I know she'll be happy with us. Is it so wrong that I want you to enjoy her too? To try and stop you feeling guilty over doing the best thing for her?*\n\nHe paused for a second as he mulled it over, then chuckled and shook his head. *Thank you. It does feel like we're doing the right thing,* he replied, studying Alyssa's bright blue eyes up close.\n\n*You definitely are,* she agreed. A wicked smile lit up her face then as she added, *Now concentrate on the poor girl, you're being rude!*\n\nJohn looked abashed as he glanced down at Sakura again, and said, \"Sorry beautiful, I didn't mean to get distracted.\"\n\nSakura encircled the base of his cock with her delicate fingers, then eased his pulsating crown from her mouth, giving him a tender kiss when he cleared her lips. Looking up at him then, she had a wicked smile on her face as she replied, \"It feels naughty actually, going down on you while you chat to your girlfriend.\"\n\nAlyssa flashed a sparkling smile at her, and sashayed around the sofa, her hips swaying with each seductive step. She sank to her knees behind Sakura in an admirable display of poise, especially for a girl wearing such high heels.\n\n\"You're his girlfriend too, sexy,\" she said, brushing long waves of silky black hair out the way so she could kiss her neck. In between kisses, she breathed, \"just like the rest of us.\"\n\nSakura turned and gave her an intimate kiss, her flushed lips pressing against Alyssa's, soft and swollen with arousal. Watching the two girls kissing was tremendously exciting, and he enjoyed the contrast between their fair and dark complexions as they explored each other's lips. His burgeoning shaft throbbed in Sakura's warm hand, and her touch was gentle as her soft fingers caressed him. Turning her attention back to John, she gazed into his eyes and slid his cock down her throat in one long smooth motion, not pausing for one moment.\n\nAlyssa glanced at John over the Asian girl's shoulder, and said, \"We were just discussing what a good girl you are, and how he's so happy you joined us. Isn't that right John?\"\n\nHe stared under half-closed lids into Sakura's almond eyes, and managed to reply, \"She's right, you're a wonderful girl.\"\n\nSakura tried to sigh with happiness, but it was tricky with a wide-girthed cock sunk down her throat. Her muffled sigh turned into a stifled squeak as Alyssa slid questing fingers around Sakura's svelte, tanned stomach, and into her moist pussy.\n\n*Just making sure you cum nice and hard,* Alyssa's telepathic voice whispered lovingly as it drifted through Sakura's mind. Now her fingers were nice and wet, she pulled back and began grazing them over the petite girl's clit, as she continued, *You've been fantastic with him. It's amazing to see John just enjoying being with a new girl, and not plagued with guilt about it. He's not the only one who thinks you're wonderful.*\n\nThe Asian girl's gasps and muffled cries grew louder, as the adept blonde teased her throbbing clit like a maestro. The sultry rhythm Sakura was using to massage John's cock grew erratic, and while she did her best to concentrate on keeping it steady, Alyssa was very good at helping girls to cum.\n\n*That's right, you're nearly there, aren't you, gorgeous?* Alyssa asked Sakura playfully. Her practiced digits glided in tantalising movements as she continued, *He loves pumping you full of spunk. I love swallowing his loads too. It's like he's marking his territory when I'm carrying a belly full of his cum. You know what I'm talking about, don't you, sexy?*\n\nUnder a combination of blurring fingers, and Alyssa's telepathic voice whispering naughty things into her mind, Sakura soon exploded into climax. She sank all the way down John's length so she wouldn't accidentally jerk free, and kept his shaft ensconced within her body. Her eyes rolled back, and her body trembled as Alyssa pushed her over the edge into a delicious release.\n\nWatching Sakura climax, while feeling every orgasmic cry in her vibrating throat, was more than enough stimulation for John. His hips bucked forward, sheathing himself fully inside her, and he came long and hard. Alyssa immersed herself in the ecstasy they were feeling, surrendering to the waves of pleasure surging over her connections to them both, and she echoed their release with a blissful cry.\n\nSakura recovered before John had finished his orgasm, and she let out a low moan as she felt his cock pulsing on her tongue. She could feel the long blasts of semen rocketing out of his cock as he jerked deep in her throat, and she sucked him as best as she could, while swallowing to milk his length. When he was finally spent, she slid smoothly off his cock, then gave him a wanton smile as she rested in Alyssa's loving arms.\n\n\"Damn that was hot,\" John said with a happy sigh, relaxing back in the chair as two pairs of lusty eyes looked up at him.\n\n\"That's better, isn't it baby?\" Alyssa asked Sakura, as she ran her hands over her hugely rounded tummy. \"Can you feel John looking after you, making you grow strong?\"\n\nNodding, Sakura met John's eyes and replied quietly, \"It feels incredible. It's almost like I can see...\" her voice trailed off, and she blushed, figuring she was letting her imagination run away with her.\n\n\"What can you see?\" Alyssa asked distractedly, enjoying the feel of Sakura's curved abdomen under her gliding fingers, and knowing what was contained within.\n\nSakura took a breath, then replied hesitantly, \"There's a faint column of light connecting us together.\"\n\nJohn was snapped out of his post-orgasmic haze, and shared a startled glance with Alyssa before he leaned forward to ask Sakura, \"Wait... what did you just say?\"\n\nShe gave him an embarrassed smile and said, \"It's probably just my imagination going wild.\" She glanced at the blonde who was cradling her in her arms, and added, \"I think you melted my brain with that orgasm.\"\n\nGiving her an apologetic smile, John said, \"Sorry, I didn't mean it to come out like that, you just caught me by surprise. What you're seeing is real, it's the psychic link between us.\"\n\nAlyssa sounded shocked as she chimed in, \"We've previously only been able to pick that up using the psi-scanner Dana built for us.\" She looked at John and added, \"I wonder if it's because you're getting stronger? While you're enhancing her, she's actually able to see how you two are linked together?\"\n\nJohn shrugged, and said with mild exasperation, \"I've no idea. Sounds like another question for Athena.\" \n\nShe nodded, and replied, \"If anyone's got a clue about what's happening, it'll be her.\"\n\nHe stood up then, and quickly got dressed, before offering a hand to the two kneeling girls. They accepted then rose to their feet gracefully, and Sakura even managed to look elegant despite carrying the heavy weight around her waist. They both leaned into him, and he gave them a hug, sharing tender kisses with each beautiful young woman.\n\n\"We'd better get down to the Cargo Bay and meet with Calara, she'll be wondering where we are,\" John said with a rueful smile. Casting a somewhat dubious eye towards Sakura's hugely swollen belly, he then added, \"Actually, maybe we should postpone introducing you to Mateo for the moment?\"\n\nAlyssa's melodic laughter filled the Ready Room, and she grinned at him as she said, \"I think that's very wise. We're bound to see Mateo again, and he'd end up asking all sorts of tricky questions if he sees her in this state!\" Putting her arm around the Asian girl, she continued, \"Don't worry, I'll stay right here and have a cuddle with Sakura. I'll fill her in on everything that happened while she was asleep.\"\n\nSakura smiled at him indulgently, and said, \"Go ahead, be there for Calara. Alyssa will take good care of me.\"\n\nOnce they had confirmed he looked presentable again, he gave them each a swift kiss goodbye, and left them to snuggle up together on the sofa. He glanced over his shoulder one last time before he left, and saw Alyssa sitting lengthways along the long comfortable seat with Sakura lying back against her, her head nestled against the taller girl's breasts. They had their hands intertwined over Sakura's hugely rounded tummy that was tenting one of his formal shirts, a look he was growing increasingly fond of.\n\nStrolling onto the Bridge again, Jade greeted him with a cheery wave, and looking as pleased to see him as always, she asked, \"Did you have fun?\"\n\nHe smiled at her as he walked her way, and said, \"Of course. You girls always show me a good time.\" He glanced over at Irillith, who was still spirit walking, and added, \"How's everything going with Lynton's crew on the Thor? Any problems?\"\n\nJade shook her head as she replied, \"No, none at all. A Terran troop transport has docked with the dreadnought and is taking prisoners. Irillith's keeping it all nice and controlled.\" She pointed at the viewscreen above them, and he blinked in surprise when he saw the Maliri girl's image watching him in amusement.\n\nIrillith greeted him with a smile, and said, \"This was the best way of keeping Jade in the loop, as Alyssa was a bit pre-occupied. Jade summed up the situation well: Terran Marines have boarded the Thor and are currently taking the crew into custody. I've spoken to the Marine Commander, and a new flight crew will be sent over to take control. When they're here, I'll exit the ship.\"\n\n\"Sounds like you're doing a great job,\" he said appreciatively. He glanced at her body in its trance-like state, and then added, \"Won't it be a strain staying in there for that amount of time?\" \n\nShe shook her head as she replied, \"No, I'll be fine. I'm not in any danger here, and just loitering in the Thor's digital network doesn't take much effort.\" Her angular violet eyes sparkled as she continued, \"Actually, I did a bit of snooping around, and I've found some -very- interesting things. I'll share what I've found during the debrief.\"\n\n\"Really? Like what?\" he asked her, his curiosity piqued.\n\nWagging a slender chastising finger, she grinned at him as she replied, \"Ah-ah, not yet! I wouldn't want to ruin the surprise.\"\n\nHe laughed, and rolled his eyes as he said good-naturedly, \"Alright, keep your secrets. I'll look forward to hearing all about them later.\"\n\nShe blew him a kiss then waved him goodbye, and he turned his attention back to Jade again. \n\n\"Go on, we'll catch up later,\" the Nymph said, as she started to wave him goodbye too. Changing her mind all of a sudden, she sprung from the Pilot's chair and flung herself into his arms, giving him a fierce hug. \n\nStartled by the passionate embrace, his eyes narrowed in suspicion as he asked, \"When I go down to the Hangar Bay, am I going to find the Raptor in a mangled mess like last time? Is that why you're being so affectionate?\"\n\nGrinning then, the Nymph shook her head as she laughed, \"Actually, quite the opposite. The Raptor didn't take a scratch!\" She looked a bit shifty though, and her cat-like eyes only met his briefly before she leaned in to squeeze him again.\n\n\"Jaaaade,\" he said, his tone firm. He lifted her chin so she had to look him in the eyes, and asked, \"What aren't you telling me?\"\n\nShe only lasted a second under his probing gaze, before she confessed, \"Alright, you win! Maybe I took a few more risks than you'd be happy with...\" When he frowned at her, she quickly added, \"But I saved a lot of Terran bomber crews! As soon as I lost my shields, I high-tailed it out of combat! I promise!\"\n\n\"Well you're safe, that's all that matters,\" he said, giving her a reassuring smile. Looking at her with a puzzled expression, he added, \"Why the big hug though? Did you get scared during the battle?\"\n\nJade shook her head, and replied, \"No, that wasn't a 'reassurance' hug, it was a 'thank you' hug.\"\n\n\"What are you thanking me for?\" he asked, as he stroked her back.\n\nShe let out a sigh of satisfaction as she explained, \"For letting me fight in the Raptor again. The last time we fought in the Dragon March was pretty terrifying, when I was hunted by Kintark fighters as I tried to stop their bombers. Today it was my turn to be the hunter, and it felt fantastic!\"\n\nJohn laughed, and said, \"There's a lot more cat in you than meets the eye, isn't there?\"\n\nThe Nymph shimmered in his arms, her body shrinking as she change into her natural cat form, and she purred, \"There certainly is, Master. Just let me know whenever you want to claim your rights as head of our pride. I'll always submit to whatever you desire...\"\n\nDespite the pleasant tingle in his quad from being drained dry only minutes beforehand, Jade's look of total adoration caused a stirring in his trousers. John smiled at her as he met her bewitching emerald gaze, and said, \"Such a good little Nymph. I might have to take you up on that offer soon.\"\n\nJade's eyes glinted as they caught the light, but she shifted back into her normal Nymph shape, and said, \"I've held you up enough, go and see Calara.\"\n\nThey shared a brief kiss before she let him go, then leaned against the back of her chair as she watched him walk up the ramp past the Command Podium. Faye was sitting demurely on his Command Console, and when he glanced her way, she shooed him along.\n\n\"I've got another avatar down in the Cargo Bay, I'll speak to you down there!\" she said with a sparkling smile.\n\nHe nodded as he made his way to the grav-tubes, then paused a moment, and stared at the Command Podium again. With a sigh he turned around, and climbed up the illuminated steps before sinking into his Command Chair.\n\nWhen he saw the bewildered green, blue, and purple faces staring at him, he explained, \"I should get in contact with the Admiralty, I can't keep putting them off forever. I might as well get it over with.\"\n\n*Tread carefully, John,* Edraele warned him, a heavy note of caution pervading her tone. *After everything that just happened, this conversation could go all sorts of ways, and some of those could be very dire indeed.*\n\n*Hello, Edraele!* John greeted her, delighted to speak to his Maliri Matriarch, and relieved to find an excuse for putting off the potentially difficult conversation for longer. He paused for a second, then noted playfully, *You were very quiet during the battle. I was starting to wonder if you'd fallen asleep or something?*\n\n*Fleet battles aren't really my area of expertise,* she explained, pleased by how happy he was to hear from her. *I think I mentioned before that I try not to distract you with chatter when you're in danger. I heard all your thoughts of course, and I'm very relieved it's all over with.*\n\nHe relaxed in his chair as he enjoyed listening to her voice, but something she'd said earlier made him ask, *What did you mean before, about the conversation with the Admiralty going all sorts of ways? I'm just assuming they'll be badgering me for tech again?*\n\n*I can guarantee you they won't have missed the technology you revealed with the Invictus, and they'll greatly covet it, make no mistake about that,* she replied, her tone taking a sombre note. *If the Terran Federation were to acquire the tech from your ship, they'd be able to expand at will throughout the galaxy, crushing all before them. It's an incredibly tempting opportunity, and might lure them into making... rash... decisions.*",
        "*That sounds ominous. What are you thinking?* he asked, her concern proving infectious.\n\n*When you turn down their request to share this technology, which I'm fairly sure you will, you need to be prepared for the chance that they might strike at you out of fear. They saw you destroy a fully shielded battleship with one shot, John. That must have been fairly terrifying,* she paused to let that sink in for a moment, listening to his thoughts as he pondered her words.\n\n*You think we might be in danger right now?* he asked, suddenly wary.\n\nEdraele's sad sigh echoed through his mind as she replied, *If the old Edraele was in their situation, she would have stopped at nothing to acquire the upgrades in your possession. She would have used the Interdiction beacons to keep you in-system, then thrown every ship in the fleet at you to take you down. All would be considered sacrificial pawns to achieve that goal. Before she initiated an assault, she would have prepared infiltration teams to attempt an assassination, whilst simultaneously hitting you with a massive cyber assault. Every asset at her disposal, John, all of it would be used to acquire that technology. It's that much of a game changer.*\n\nHe was focused and alert now as he said, *I didn't think the repercussions would be that severe. Are you sure they'll attack?*\n\n*Nothing is guaranteed. I doubt they'll be as obsessively driven as my old personality would have been, but you can't take that for granted. Imagine a fleet of ships like the Invictus under their command, which is exactly what they'll be fantasising about. They'd be able to annihilate the Kintark, the Trankarans, the Ashanath, the Kirrix, the Drakkar, even the Maliri, and then annex whole sectors at will. The Terran Federation would be able to dominate and expand in whatever direction they chose. That kind of unrivalled power is a potent incentive,* she explained, her deceptively pleasant voice painting a bleak picture of the future.\n\n*I see. Do you have any other advice?* he asked her, growing more alarmed by the second.\n\n*Three more things in fact,* Edraele stated, her manner both calm and collected. *Firstly, I'd try and get out of the Regulus system as quickly as you can. The Terran Federation has amassed a huge fleet here, and as the old adage goes, there's strength in numbers. The more powerful they perceive they are in comparison to you, the greater the likelihood they'll be emboldened to attack.*\n\nHe nodded to himself as he replied, *Alright, that makes sense. There's something I want to take care of before I leave, though.*\n\n*I know, I understand,* she said, her voice softening affectionately. *Just make sure you hold off with the handover of the Thor, and by extension the Interdiction beacons, until you're ready to leave. In fact, it might be sensible to have my daughter simply take care of the threat posed by the Interdiction beacons, before you hand over their control to the Terrans.*\n\n*Irillith's on it,* Alyssa thought to him a split-second after he'd considered Edraele's words.\n\nHe felt some of the tension in his shoulders ease a little, and he replied to both of them, *It's a wise precaution. We should have the speed to escape if they try anything.* He directed his thoughts at Edraele next, and continued, *You said 'firstly', what else did you have on your mind?*\n\nShe responded immediately in her clear, well spoken voice, *It's possible the Terran Admiralty witnessed the Progenitor's vessel intervening in this system. After killing Gabrielle Lynton, they might have seen him use what you believe is a wormhole generator to jump out of the system. If they did notice his ship, they might be even more determined to keep you in Terran Space, as a potential deterrent or counter to the Progenitor threat. You own one of the most potent ships in our corner of the galaxy, they'd have to assume the Progenitor's ship is at least as powerful.*\n\n*Alright, I'll be especially cautious if they bring him up as well,* John agreed. *What was the last thing?*\n\nWhen Edraele replied this time, her voice throbbed with concern, as she said, *I would strongly advise concealing the part Calara had to play in this battle. Admiral Devereux knows about her analytical skills, and that she also mans the Invictus' guns. However, I doubt she knows just how accurate her gunnery skills are, which Calara just showcased to a spectacular degree against the Kintark fighters. More importantly, her tactical acumen would be hugely valuable to the Terran Federation, or at the very least they might want to neutralise her as an effective asset.*\n\n*Neutralise her how?* John asked darkly, his temper starting to flare. *We're taking steps to reduce the threat of assassination, but we haven't had a chance to implement anything new yet.*\n\n*She has a family, John,* Edraele explained patiently. *A family you've vowed to help her protect. That's a weakness that could be exploited to apply leverage on her, and on you by extension.*\n\n*Fuck!* he swore, realising just how complicated and dangerous this situation had become. He laughed grimly, and then added, *Can't I just threaten to kill anyone that crosses me or my crew?*\n\n*You could, but I'm not sure that would be the wisest course,* she replied with a wry smile, understanding that he was joking. Mostly.\n\nJohn blew out his breath, calming himself as he thought over all her advice. He sounded profoundly grateful when he spoke to her a minute later, and said, *Thank you, Edraele. That was invaluable advice and I really appreciate it.*\n\n*It's what I'm here for, to support you however I can,* she replied, overjoyed to hear the sincere gratitude in his voice.\n\n*No, you're worth far more to me than that,* he said, earnestly. He chuckled then and added, *I'm not sure how I'm going to be able to repay you for all your help, though. I am running up quite a tab!*\n\nShe laughed then, and shared the lovely sound via their telepathic bond, before she said in a teasing voice, *I'm sure we'll be able to work something out...*\n\nHe smiled at that, then looked around the Bridge at the bewildered girls, who'd been watching his rapid changes of facial expression and wondering what was going on. \"Edraele's just been offering me lots of invaluable advice about our current situation,\" he explained to them, with Jade and Faye nodding their understanding a moment later. \n\nIrillith had already been asked to find a way of disabling the Interdiction beacons, so she had a pretty good idea of what had him so worried. She gave him a reassuring smile as she said, \"I sent a power spike into the Interdiction beacons, frying their circuitry. It wasn't enough to make them explode, so the Terran forces will be none the wiser, but they'll require some extensive repairs before they can be brought online again.\"\n\n\"Great stuff! Thanks honey,\" he told her, feeling a surge of relief. Looking down at his Nymph pilot, he added, \"Now we can run from the Regulus System if it comes to it. Let's just hope it doesn't, but I want you to be ready for that if we have to.\"\n\nJade nodded and gave him a warm smile, pleased to see him looking more relaxed. \"Do you want me to contact the Zeus for you? I assume you still want to speak to the Admiralty?\" she asked, not sure if there was a change of plan she wasn't aware of.\n\n\"Thank you, yes. I'm long overdue a chat with the Fleet Admiral,\" he replied, settling comfortably in his chair. \n\nHe'd been carrying his white peaked cap with him, and toyed with it in his hands for a moment as he mused over whether he should wear it for this conversation. The hat seemed to represent so much more now, hinting at a conformity to the Terran Federation command structure, and therefore a sense of deference to their higher rank. Should he wear it to put them at ease? Or would that only encourage them to make bolder demands for his technology, which he knew he'd have to refuse. Such a refusal could further escalate tensions in what might already be a fraught situation. By not wearing it, was he making a bold statement setting himself apart from the Terran forces? Would that encourage them to attack, seeing him as some kind of alien threat?\n\nThen again, perhaps he was overthinking things, and sometimes a hat is just a hat. He smiled and placed it atop his console. He'd never really been a hat-wearing man, unless the occasion demanded it.\n\n\"I have Fleet Admiral Vincent Buckingham for you,\" Jade said, breaking him out of his whirring thoughts.\n\n\"Put him through,\" John replied, looking up at the viewscreen.\n\nThe image on the screen coalesced into the familiar face of Vincent Buckingham, standing smartly in full dress uniform, his grey moustache twitching into a smile. John was suddenly struck by a disturbing realisation. Their future within Terran Space entirely depended on the way this conversation went, and how he handled the man standing before him.\n\n\"Ah, John!\" Buckingham greeted him with a friendly smile. \"I'm so glad you contacted me, we were just talking about your timely, and rather dramatic intervention! You certainly helped us out of quite the nasty pickle.\"\n\nAlthough the Fleet Admiral's tone was warm, the smile didn't quite reach his eyes, and ended up setting John's nerves on edge. Buckingham glanced to his right, and the camera panned to the gathering of Terran Admirals seated in the wingback chairs placed in the centre of his office. After the loss of Santini, there were only three Admirals sitting in the chairs, with Edwin Caldwell, Carl Weber, and Jayanti Mishra each nodding to John respectfully. There was an odd cast to their expressions though, though, which he couldn't quite place, having never seen anything quite like it before.\n\n*They respect and fear you in equal measure,* Edraele explained, her quiet tone speaking of decades of familiarity with similarly conflicted associates. She couldn't see the faces of the Admirals of course, but she was quite sure of her assertion.\n\nIt was a disturbing thought. To think that these senior officers within the upper echelons of the Terran Federation were actually afraid of him, was more than a little surreal. Just as Jack's reaction to his growing fame had saddened him, he felt a similar surge of regret that they would react in such a way.\n\nDeciding to try and keep things light to put them at ease, John replied to Buckingham, \"I'm just glad we made it back to the Dragon March in time to assist.\" He smiled then, and continued, \"Sorry we couldn't get here sooner, we took quite the jaunt into Kintark Space, but we managed to rescue a few people from the Xen-Nuchek Mines.\"\n\nThe camera panned back to Vincent, whose smiled twisted wryly as he asked, \"Why do I suspect there's more than just a few?\"\n\nJohn nodded, and admitted, \"We evacuated all the Terran Federation personnel we could find. We've brought back just over six-hundred people with us.\"\n\nBuckingham walked back to join the others, the camera following him. He glanced at his fellow Admirals and said, \"It seems we owe John our thanks once again.\"\n\nJayanti gave John a hesitant smile and said, \"Morale amongst the troops should see another big boost with that news.\"\n\nAlthough Admiral Caldwell smiled as well, making an effort to look pleased, bizarrely he appeared even more unsettled. \"The Lion saves the day once again,\" he murmured, while deep in thought.\n\nNot enjoying this conversation in the slightest, John decided to try and get it over with as quickly as possible. He looked at Buckingham and said, \"I thought we better discuss the offer of clemency I made to the traitor forces. I hope I wasn't out of line there, but we badly needed their support against the Kintark.\"\n\n\"You can leave the clemency discussions with us, John,\" Buckingham said with a note of finality. \"Rest assured, their assistance against the Kintark will be taken into account.\" \n\nJohn nodded, and asked, \"Would you like to hear my advice regarding sentencing?\"\n\n\"Of course,\" Buckingham replied, looking at him curiously.\n\n\"I'd advise leniency. Terran Federation forces need the personnel at the moment, so perhaps demotion for the senior officers, but still allow them to serve. Joining us when they did saved a lot of loyal Terran lives,\" John explained, watching the Federation Admirals to see how they'd react.\n\n\"We could use the manpower, Vincent,\" Jayanti said, nodding as she thought it over. \"We can make an example of Lynton's crew aboard the Thor.\"\n\n\"It was Admiral Lynton's ship that destroyed Santini's dreadnought,\" John agreed. \"I took her crew into custody to await judgement for treason.\"\n\nJohn's affable tone had put them at their ease, and he could see the four officers relax as they spoke with him. While Caldwell still appeared lost in thought, and Mishra watched John quietly, both Weber and Buckingham grew bolder, no longer feeling quite so intimidated by his presence. \n\nWeber's eyes narrowed shrewdly, and he leaned forward as he asked, \"How did you manage to take over the Thor like that? I've consulted with my Intelligence Operations officer, and he said that such a thing should be impossible. The Thor is equipped with state-of-the-art hacking defences, but you managed to hijack the ship in moments.\"\n\nBuckingham nodded, and said, \"We all saw you shut Lynton down in the blink of an eye. I've also received disturbing reports from the forces taking the Thor's crew into custody. Apparently there's some kind of AI presence aboard the Invictus. Do you have some kind of unshackled AI working for you, John?\"\n\nJohn tried to stop himself from grimacing, and he replied, \"I've got a talented crew. They stepped up, and helped neutralise the threat from Lynton.\"\n\n\"Very talented indeed...\" Weber noted, sharing pointed looks with his colleagues. \"I remember you mentioning you had your 'sources'. Was it the same source who hacked the Artemis' comms records?\"\n\nBuckingham smiled wolfishly at John, and said, \"Perhaps we could arrange for a debriefing with your crew? It seems like we could learn a lot from them, your hacker and strategist in particular.\"\n\nJohn bristled at their predatory tone, and replied somewhat stiffly, \"I'm afraid not, Vincent. Most of them are civilians, and don't fall within the Terran Federation chain of command.\"\n\n\"Not all of them, though,\" Weber said, giving John a sly look. \"We'd be intrigued to know who was in command of your battle group against the Kintark. Was it Commander Fernandez by any chance? Whoever it was had quite the tactical flair.\"\n\nJohn met his challenging stare, and replied, \"I must have missed my vocation as a naval officer. Thanks for the compliment, though.\"\n\nWeber looked sceptical, but declined to push him further.\n\nBuckingham broke the somewhat stony silence by saying airily, \"You're in command of quite a ship there, John. You mentioned you'd bought some upgrades from a number of alien sources, but we had no idea just how potent the Invictus had become.\"\n\nJohn was on his guard now, and he replied, \"Yes, it's a formidable ship.\"\n\nThree of the four Terran officers were watching him like hawks, with the exception of Caldwell who was clearly uncomfortable with this line of questioning. Buckingham leaned forward as he said, \"You must understand how much you could aid humanity by sharing that technology, John. The firepower you unleashed on the Kratos was quite astonishing to behold.\"\n\nShaking his head, John replied, \"I've made deals with the species I acquired those upgrades from. Sharing the schematics would violate those agreements.\"\n\n\"Come on now, be reasonable,\" Weber protested. \"It's your duty as a Terran Federation officer to hand over that technology.\"\n\nJohn fixed him with a steely glare, and replied, \"No, I'm afraid not. You forget, I'm retired.\"\n\nWeber ground his teeth in frustration and was about to reply, when Buckingham held him back with a cautionary hand. Buckingham then said to John in an authoritative tone, \"Perhaps it would be better if you were to come aboard the Zeus, where we could discuss this in person, Rear Admiral? There's no need for this to get unpleasant. We all want what's best for the Terran Federation.\"\n\nMishra shared a nervous glance with Caldwell, joining the other Admiral in his growing disquiet with the way this meeting was unfolding. Their looks of apprehension gave John the distinct impression that accepting Buckingham's offer would be a extremely bad idea. \n\nHe wasn't sure if these Admirals would be bold enough to spring some kind of attack, but now that Irillith had disabled the Interdiction beacons, at least he was certain they could escape. However the last thing he wanted was to risk getting into a violent confrontation with Terran Federation forces. The repercussions for Calara and her family made such a course of action something that he wanted to avoid at all costs. He felt like his choices were closing off rapidly though, and was starting to feel trapped.\n\n*Use me as an excuse!* Edraele blurted out, interrupting his thoughts. \n\nJohn had no idea what she was talking about, so he replied, *What do you mean?*\n\n*They know nothing about the Maliri. Exploit that!* she explained in a rush.\n\nSuddenly grasping her meaning, John relaxed in his chair, then smiled confidently at the four Terran officers as he said, \"I'd love to continue this meeting, but unfortunately we'll need to wrap it up soon. I need to return to Maliri Space, as I've got pressing business with Edraele Valaden, leader of the highest ranked Maliri Noble House. It's a long trip to her homeworld.\"\n\nKarl Weber looked extremely dubious as he asked, \"You've been into Maliri Space?\"\n\n\"A couple of times now,\" John replied with an air of indifference. \n\n\"Preposterous,\" Weber scoffed. \"The Maliri don't let anyone past their trading posts!\"\n\n\"I made quite the impression on Edraele,\" John said with a calculating smile. \"Where else do you think I got all the guns from?\"\n\nAll the Admirals stared at him in shock, recognising the blunt and obvious truth to his words. They hadn't even considered that the Invictus was equipped with Maliri weapons, but from that realisation came an even more frightening one. This revelation meant that there was a whole empire on their doorstep, already wielding the kind of monstrous firepower that John possessed on his ship.\n\nHe could see their stunned reactions written plainly across their faces, and he decided to follow it up with the knock-out punch. Fixing his disapproving eyes on Fleet Admiral Buckingham, he said, \"I'm not particularly happy with the direction or tone of this conversation, Vincent. Can I be bluntly honest with you?\"\n\nBuckingham nodded hesitantly, suddenly having trouble meeting John's unblinking stare.\n\nJohn glanced at each of them in turn, and said, \"If I hadn't intervened today, this whole battle would have had a very different, and far more unpleasant outcome. Don't bother to deny it, you're all skilled enough tacticians to know I'm right.\"\n\nThe four Terran Federation officers didn't object, each of them knowing that in all likelihood, the Kintark should have been the ones sweeping the field with their bombers. The Terran Federation forces would have been crushed, their capital ships now little more than burning wreckage, and the Kintark Empire would have won a spectacular victory. The admirals squirmed under his penetrating gaze, reluctant to make eye contact, but powerless to turn away either.\n\nLeaning forward in his chair, John frowned as he said, \"I didn't expect you to be falling over yourselves with gratitude, but I definitely don't appreciate these attempts to intimidate me. I'm an ally of the Terran Federation, but you shouldn't make the mistake of thinking I don't have other options. My primary concern is stopping the Progenitor behind all this chaos, and there's a bigger game at play here than you realise.\"\n",
        "Buckingham looked suitably chastised, and he said, \"Please accept our apology, John. We do greatly appreciate your assistance against the Kintark.\"\n\nJohn nodded slowly, but he wasn't completely mollified, not yet. His tone grew colder as he said, \"One final thing I need to make absolutely clear. I won't tolerate any kind of threats, veiled or otherwise, towards my crew. I'm very protective towards them, and I'll be forced to take steps if I feel they, or their families are in any kind of danger.\n\nYou know the identities of some of my girls, and that they have family here in the Terran Federation. Just in case the thought of using them as leverage crosses your mind, I want you to think about what I did to the Armoured Cobras; they hurt one of my crew, so I wiped them out. You've seen what my ship can do, and with the alliances I've made, I could unleash retribution on a truly terrifying scale. Let's not go down a path that all of us will regret.\"\n\nAdmiral Weber flushed, and looked away guiltily, no longer able to meet John's unrelenting stare. \n\nJayanti Mishra gave him a tentative smile, and said, \"We're sorry, John, truly. Of course you don't have anything to worry about regarding the safety of your crew's relatives. Why would you? You're our valued ally, and we'll be going out of our way to look after them.\"\n\n\"That's very reassuring to hear... thank you,\" he said, nodding his approval. When no further comments were forthcoming, he straightened in his seat, and added, \"I think we've covered everything we needed to, but I'm sure we'll speak again in the near future. Good luck to you all, and congratulations on your stunning victory over the Kintark Empire.\"\n\nHe leaned forward, and pressed a button on his console ending the call. Jade, Irillith, and Faye were watching him quietly, an appreciative twinkle in their eyes.\n\nClearing his throat, John rose from his chair, and said self-consciously, \"Ah, I better go and see Calara. She'll be worrying what's keeping me.\"\n\nThey gave him a wave goodbye, and he jogged down the steps from the Command Podium, before stepping into the red glow of the grav-tube. \n\n*I thought we agreed that making threats wasn't the wisest course of action?* Edraele asked him archly.\n\nJohn flushed with embarrassment, and replied, *Yeah, well they started pushing too hard about Irillith and Calara. I wanted to nip that shit in the bud before they got any funny ideas.*\n\nShe sent him a fond telepathic smile, and said, *I love how protective you are over your girls, especially when one of them is my daughter.* Her voice was soothing as she added, *I'd be astonished if they tried anything, not after that performance. I think it went relatively well, and at least you avoided any real disasters.*\n\n*Thanks, I guess,* he said wryly at her faint praise. *I get about a C+ for effort, then?*\n\nHer light hearted laughter surged through his mind, making him smile, and she replied, *We'll make a diplomat of you yet.*\n\nThe grav-tube had reached Deck Nine, and he stepped out into the corridor that led to the Cargo Bay and Hangar Bay. He started walking down the corridor, but paused for a moment as he said earnestly, *All joking aside, I really appreciate your advice and support there, Edraele. That could have turned nasty, and it was a huge relief having you here to help prepare me for it. Thank you.*\n\nShe sent him a loving telepathic smile as she replied, *Your diplomatic relations with the Terran Federation might be going through a bit of a rough patch, but you're doing an excellent job of raising your standing with the Maliri of House Valaden. Who knows what gifts they'll lavish on you, the next time you honour them with your presence?*\n\nEdraele's seductive tone left him in little doubt that he'd very much enjoy his next visit to Maliri Space. His mind raced with all the things he'd love to do to the alluring Maliri Matriarch, and he had to take a deep breath to get himself under control. \n\nWhile Edraele sighed with delight, Alyssa said heatedly, *I so want to be there when you do all that to her!*\n\nJohn chuckled, and said, *You'll have to ask Edraele very nicely, but I'm sure she wouldn't mind.*\n\nAlyssa went quiet for a moment, before she said in an uncharacteristically serious voice, *Thank you for looking out for Calara. You care about her as much as I do, but I still wanted to say it anyway.*\n\n*You're quite welcome. You know how much I love you both,* John replied, when he reached the two sets of double doors half way down the corridor. \n\nHe was about to hit the button to open the door into the Cargo Bay, but he turned at the last second, and strode across the corridor to open the Hangar instead. The heavy reinforced doors swished open to reveal the glossy white hull of the Raptor, which was parked securely in the centre of the huge room. As he walked into the room, he cast an appraising eye over the sparkling white crystal Alyssium plating, but he couldn't see even the hint of a plasma burn on its pristine surface.\n\n*Ye of little faith,* Alyssa thought to him playfully. *Jade's a good girl, and she absolutely adores you. She'd never dream of lying to you about anything.*\n\nJohn suddenly felt guilty for not trusting Jade's word, and finishing his circuit of the gunship, he headed for the exit, walking underneath the twin-linked Pulse Cannons in the Raptor's chin-turret. He strode briskly from the room as he closed the double doors behind him, but still felt relieved that the Nymph hadn't put herself in grave danger. He pressed the button to open the doors to the Cargo Bay, and was suddenly presented with a bustling mass of humanity.\n\nThere were hundreds of Terran Federation personnel here, who'd been sleeping on comfortable make-shift cots in the enormous room. Between the cleaning bots and Faye's maintenance bots, the Cargo Bay seemed to be in remarkably good shape, kept neat and tidying while the robots tended to the needs of their guests. The rescued prisoners looked far more healthy today, having shrugged off the effects of Tamolith's draconic pheromones, they now appeared bright-eyed and alert.\n\nHe glanced around the room as he looked for his girls, and spotted Faye's shimmering wings poking up above a throng of admirers. They were gathered around one of her maintenance robots, and Faye tittered at something one of the engineers said. Her wings fluttered enticingly as she laughed, and he smiled as he realised she was quite happy, obviously enjoying the attention.\n\nThere was another group of personnel eagerly queuing for a chance to be examined by Rachel and her helpful nurse, Dana. The two girls stood out amongst the grey uniforms in their pristine white outfits, and while Rachel cut a respectable figure in her tailored doctor's coat, he wasn't sure Dana's ensemble was designed with respectability in mind. \n\nHer tight fitting top revealed ample amounts of cleavage, while her short skirt showed plenty of tanned thigh, up to the white leather boots that ended above the knee. Her voluminous auburn tresses hung loose around her shoulders, while a coquettish nurse's hat completed the ensemble. Alyssa must have said something to her, as Dana turned to look his way, winking as she blew him a seductive kiss. He chuckled and she gave him a sparkling smile, clearly relishing all the admiring glances and flirtatious comments she was receiving.\n\nUnfortunately, Dana's kiss started whispers of \"The Lion!\" racing around the room, as the men in the queue turned to see who was lucky enough to receive this stunning girl's attention.\n\nAn awed hush quickly descended, as six-hundred-and-forty-five Terran personnel turned to look his way, staring at him with wide eyes. Wearing his white dress uniform jacket, with the roaring golden lion emblazoned across his chest, he was immediately identifiable to anyone who'd heard of him. That meant everybody in the room knew who he was at a glance. \n\nHe grinned at them, and raising his voice he shouted, \"Welcome back to Terran Space! We'll have you home before you know it!\"\n\nWhat started out as spontaneous applause quickly developed into rousing cheers, and John found himself receiving earnest thanks from all the people around him. He'd seen that profound relief in people's eyes before, having rescued his share of prisoners of war during his military service for the Terran Federation. It was the look of a man who thought they'd never live to see freedom again, and it was difficult not to be moved in the face of such overwhelming gratitude.\n\nHe spent a good twenty minutes shaking hands, and being magnanimous with the sometimes tearful prisoners, before he felt a gentle tap on the shoulder. This was unusual amongst the hearty backslapping from the jubilant crowd, so he turned to see who it was. Calara was standing there with her brother, the soft smile on her lips matching the tender look in her eyes. Mateo looked in a far better state now, with his goatee neatly trimmed, and his hair carefully styled once more. He'd undergone quite the transformation from the dishevelled figure they had rescued from Xen-Nuchek.\n\nQuickly turning to the rest of the prisoners waiting to speak to him, John said, \"Sorry everyone, I need to leave for a little while.\" When that declaration was met with a collective disappointed groan, he added, \"We'll be taking you to Port Medea shortly, and I promise I'll be there when you disembark.\"\n\nWith that the crowd reluctantly let him depart, and he turned to face Calara and Mateo again. \"Sorry about th-,\" he tried to say, before Mateo pulled him into a tight hug.\n\n\"Thank you so much for coming to get me!\" Mateo blurted out, hugging him tighter. \"I thought I was done for!\"\n\nJohn clapped him on the shoulder, and gave Calara an embarrassed smile as he said, \"I owed you, remember? You lent me that sparring gear...\"\n\nMateo stared at him incredulously for a moment, then released John from the hug as he doubled over with laughter. There was a slightly hysterical edge to it, and John could see just how shaken Calara's brother had been by the whole experience.\n\n\"Come on, let's get you out of here,\" John said gently. \"We're in the same system as the Damocles, so I thought you might like to see your dad.\"\n\nMateo looked like he was going to hug John again, but Calara stepped in and ran her arm around him instead, saying, \"I want to see Dad too, big brother. No more hanging around, let's go!\"\n\nThey headed back through the double doors into the corridor, and John pressed the button to open the Hangar Bay again. As he did so, he thought to Alyssa, *Can you send Jade down to fly us over to the Damocles, please?*\n\n*Sure, but why not let Faye do it?* she replied curiously. *Jade's currently keeping an eye on things up on the Bridge, and I haven't got to the good bits of the story with Sakura yet.*\n\nJohn shook his head as he strolled towards the Raptor, and replied, *I keep forgetting about Faye's new avatars. Forget I said anything* He pressed a button on his watch communicator and contacting the Bridge, he continued, \"Hi Faye, would you mind flying us over to the Damocles please? I could do it myself, but I'd like someone to keep an eye on the Raptor while we're speaking to Jack.\"\n\nFaye was sitting on his Command Console, and she looked at him quizzically, as she replied, \"Sure, I'd love to! Why are you bothering to call the Bridge, though? I can hear and see you anywhere on the ship!\"\n\nHe blinked in surprise, and said, \"Oh! I didn't realise you could do that.\"\n\nShe nodded, and gave him an enthusiastic grin as she replied, \"As long as one of my avatars is dedicated to monitoring the cam feeds, I can always see what's going on!\"\n\nThe loading ramp at the front of the gunship began to lower, and it settled on the deck of the hangar as they arrived, John smiled at Mateo and Calara and waved them ahead. They strode into the Raptor, and he noticed that Faye had already begun to open the hangar doors so that they could depart. He hit the button on the wall to begin raising the ramp, then followed the Fernandez siblings into the corridor. \n\nMateo paused in front of the grav-tubes, and asked, \"What happened to the lift?\"\n\n\"This is much more fun, and a lot less annoying,\" Calara said with a grin. \n\nShe kept her arm looped around him, and coaxed Mateo into the soft blue glow on one side of the grav-tube. He looked astonished when he started lifting off the ground in the anti-gravity field, then started to laugh in amazement.\n\nJohn followed after them, and said, \"Dana invented them. Do you remember her? The redhead?\"\n\n\"That gorgeous nurse built this?!\" Mateo gaped at him in surprise.\n\n\"She's actually our Chief Engineer, but I'm not sure what she's up to with the nurse's uniform,\" John replied with a chuckle.\n\nCalara grinned at them both, and said, \"She was trying to 'raise morale' apparently, or at least I think that's what she claimed she was trying to raise...\"\n\nMateo looked shocked at her innuendo, and said, \"What happened to my innocent little sister?\"\n\nShe laughed then with a throaty chuckle, and said, \"Come on Mateo, I'm not in pigtails any more! I've been in active service for over 6 months; I've heard far worse, believe me.\"\n\nThey settled into the chairs at the back of the cockpit, and Mateo smiled as he said, \"Sorry Callie, I forget you're all grown up now. That last visit was so surreal, I guess I kinda suppressed it.\"\n\nCalara leaned in and hugged him affectionately as she said, \"I must have kicked your ass harder than I thought if I've given you amnesia!\"\n\nFaye suddenly materialised in the cockpit, and gave everyone a friendly wave. \"Hey guys!\" she said, in her cheerful, breezy tone. \"Just relax, and we'll be on our way in moments!\"\n\n\"Thanks, Faye,\" John said with a grateful smile, relieved that she'd decided to keep wearing the dress she'd designed for herself a few hours earlier.\n\nMateo was watching her in fascination, and he asked tentatively, \"Is she...?\"\n\n\"A fairy?\" Calara asked him with a giggle.\n\nHe laughed at that, and replied, \"No, you little monster. Is Faye some kind of AI?\"\n\n\"That's right!\" Faye replied, giving him a radiant smile over her shoulder as she sat down in the Pilot's chair. \"You must be as smart as your sister!\"\n\nWhen Faye focused on the flight controls, Mateo glanced at John, and asked quietly, \"Aren't you worried about...\"\n\nJohn shook his head, and said with conviction, \"No, not at all. The reason Terran AI kept going rogue is a long story, but Faye's totally dependable.\"\n\nMateo seemed relieved to hear that, then looked across the cockpit at John, studying him for a long moment before he asked, \"Was Calara pulling my leg, or did you really fight that dragon to free us?\"\n\nJohn shook his head, and replied, \"Not the one you saw. That was Tamolith, and we let her go.\"\n\n\"Hah! I knew you were spinning me a yarn,\" Mateo said, nudging Calara with an elbow.\n\nCalara smiled then as she said, \"John let her live, but he had to fight her mate. Kindralax was an awful lot bigger!\"\n\nShaking his head, Mateo blurted out, \"God, I can't even imagine anything bigger than that beast! It must have been terrifying.\" He sat back, running both hands through his thick hair as he did so, before crossing them behind his head as he stared off into the distance.\n\n\"Sorry if you've been through this with Calara already, but do you remember much of what happened?\" John asked him hesitantly.\n\n\"Everything in the Kintark mine, or before that?\" Mateo asked in return, his expression grim.\n\nJohn gave him a sympathetic smile, and said, \"I meant from when Admiral Norwood's men turned on you, but we can drop it if it's too painful to talk about.\"\n\nMateo shook his head, and replied, \"Hell, after everything you've been through to rescue me, a little information is the least I can do!\" He grimaced as he continued, \"I'm afraid I can't tell you much though. It came as a complete shock when they betrayed the Federation, I didn't have a clue what was going on.\" Letting out a dark chuckle, he added, \"They knew I'd never join them, so the bastards just arrested me and threw me in the brig. They didn't even bother asking if I was interested in their rebellion!\"\n\n\"I never doubted you for a minute!\" Calara said passionately, leaning in and hugging him again.\n\nMateo brushed his hands through her long hair, and looking down at his sister, he said, \"Thanks Callie, that means a lot.\" He looked at John again after that, and continued, \"I spent nearly a day in the Brig, then they transferred me to a shuttle with the rest of the loyal personnel. Commodore Wheeler handed us over to the Kintark on Xen-Nuchek, and then that dragon turned up, the Consort... After that, it's all a blur really.\"\n\nCalara looked up at him, and said fiercely, \"Don't worry, Wheeler got what was coming to him! All the traitors did!\"\n\nHer brother smiled at her, and said, \"I heard there was a big fleet battle in the Regulus system. Faye explained what was happening during the fight to some of the men, but I didn't catch much of the details. Did the traitor forces try and help the Kintark in the battle?\"\n\nJohn shook his head, and replied, \"No, not the ones that turned on you. Your sister wiped them out to a man in Kintark Space.\"\n\nHis brown eyes widened with shock as Mateo blurted out, \"The traitor fleet was huge! One of the guards in the Brig claimed nearly three-quarters of Norwood's battle group had turned. There's no way a single ship could take on that many vessels, I don't care how many upgrades you've got!\"\n\n\"We've got a new crewmember you haven't met yet,\" John explained carefully. \"Irillith's a hacker, and she got the traitor fleet shooting at their Kintark escort. Both sides just about wiped each other out, and Calara cleaned up what was left over.\"\n\nMateo chuckled then, and his eyes flashed as he said, \"I guess there's a nice sense of irony in that, but I just wish I could've been there to see it. Those smug bastards laughed at us when we got dumped off at Xen-Nuchek.\" He smiled then as he added, \"I think I owe this new girl a drink. I-rill-ith you said? That's an unusual name.\"\n\nJohn nodded, and replied, \"When things have calmed down, we'll all meet up at your parent's house again. I'll introduce you to her then.\"\n\n\"She's a Maliri girl,\" Calara whispered to him secretively, her brown eyes twinkling. \"Stunningly beautiful with flawless blue skin and long white hair.\"\n\nMateo laughed, and rolling his eyes he said, \"Yeah right, you'll be telling me you've got a Yeti on the crew next!\"\n\nCalara laughed, and replied, \"You'll just have to wait to meet her if you don't believe me.\"\n\nThey heard the dull metallic clang of docking clamps being attached to the Raptor's hull, and Faye rose from her chair as she said, \"Sorry to interrupt, but we've just docked with the Damocles!\"\n\nMateo and Calara rose to their feet, both looking equally excited to see their father. \"Does Dad know I'm here?\" Mateo asked his sister.\n\nShe looked at John, who shook his head as he replied, \"I thought it'd be a nice surprise.\"\n\nThey both grinned at him in delight, and they headed towards the door out of the cockpit. Mateo turned before he left, and said, \"It was nice to meet you Faye, and thanks for looking after me.\"\n\n\"It was my pleasure!\" the purple sylph said to him, giving him a sparkling smile.\n\nMateo shook his head in wonder, and remarked to John, \"Even the AI is beautiful on your ship! If you ever need a Navigator, let me know, alright? I'd transfer in a heartbeat!\"\n\nJohn smiled at him, and replied, \"You'll have to convince Alyssa I'm afraid. She's my XO and is quite possessive about her recruitment responsibilities.\"\n\nCalara nudged him with her shoulder and said, \"She's also the ship's Navigator, so you'll have your work cut out trying to convince her!\"\n\nHer brother groaned good-naturedly, and let Calara guide him into the red glow of the grav-tube. Once they'd floated gently to the lower level, they walked through to the rear loading area, which housed the airlocks on both sides of the Raptor. Faye had docked on their starboard side, so they walked over to the corresponding airlock, and stepped through the inner airlock door. John then raised his hand towards the DNA reader to open the outer airlock.",
        "\"Wait!\" Mateo blurted out, a second before John touched the panel. \n\nJohn turned around in surprise, and asked, \"What's the matter?\"\n\nWalking up to him then, Mateo extended his hand, and said, \"Thank you, John, for what you did for me. I'll never forget it.\"\n\nJohn shook his hand in a firm handshake, and replied, \"I didn't just rescue you for Calara. You're a good man, Mateo, I'd never have left you to rot in a Kintark prison.\"\n\nMateo pulled him in for a hug, having difficulty finding the right words to say. He coughed when he stepped back, brushing his hands across his eyes. \"Must be the after effects of that Dragon's mind control pheromones,\" he chuckled with a self-conscious grin.\n\n\"Yeah, Rachel said that could be a problem,\" John agreed, smiling at the man indulgently.\n\nThey waited for a moment to let Mateo compose himself, and when he'd settled down again, he smiled at John and gave him a nod. John placed his hand on the DNA reader, which swiped across with a green light, then gave a soft beep as it recognised his genetic code. The airlock door slid open, and John looked through to see the familiar face of Jack Fernandez, who was waiting for them a few metres down the corridor.\n\nMateo had stepped back out of line of sight, so Jack only saw John and Calara when the airlock door opened. He looked delighted to see his daughter, and she ran into his open arms with a huge beaming smile on her face. \n\n\"Calara! It's so wonderful to see you!\" he exclaimed, lifting her off the deck and hugging her tightly. He smiled at her as he added, \"I hoped you were coming too, but I wasn't sure if you were.\"\n\nShe hugged him back just as hard and grinned as she said, \"Oh, Dad! I'm not going to miss a chance to see you.\"\n\nHe frowned then, and replied, \"You shot off from Delta-Draconis without so much as a hello.\"\n\nCalara's face fell, and she gave him an apologetic smile as she said, \"I'm really sorry about that, Dad. I'd just heard about Mateo, and was having trouble keeping it together. I knew if I spoke to you, I'd have fallen apart.\"\n\n\"I understand, Callie. It's alright,\" Jack murmured, his happy expression plunging into one of despair for his lost son.\n\nShe glanced up at his grief-stricken face and then said brightly, \"So John and I went to rescue Mateo instead!\"\n\nMateo stepped through the airlock, striding down the corridor to wrap his astonished father in a hug. \n\n\"My boy!\" Jack croaked, overcome with emotion as he hugged the son he'd given up for dead. \n\nJohn smiled as he watched the touching reunion, Jack fiercely hugging his eldest son and only daughter to him as though never wanting to let them go. In a whimsical moment, he wondered if there was actually something to Mateo's pheromone after-effects story, as he blinked his eyes and mused that perhaps he was suffering from mild exposure too.\n\n*You old softie,* Alyssa thought to him, her words playful, but the undercurrent of emotion in her voice throbbing with heartfelt affection. *Calara's thoughts and feelings are so lovely, I wish you could hear them too.*\n\nCalara broke away from the hug with her father and brother, then walked up to John, and pressed her lips to his cheek in a tender kiss. \"Thank you, for everything,\" she murmured, her dark-brown eyes big and round as she gazed up at him.\n\n\"Any time, honey,\" he said, giving her a loving smile as he put his arm around her shoulders.\n\nJack and Mateo pulled apart from their hug, and Jack's eyes shifted to John. His eyes widened for a moment, having forgotten all about him being there he'd been so distracted by seeing Calara and then by the return of Mateo. He stepped over to John with his hand outstretched, which John clasped with his right hand, shaking it in a firm grip.\n\n\"I don't know how you did it!\" Jack exclaimed, a joyful yet disbelieving smile on his face.\n\nJohn smiled at him, and said, \"Let's go grab that beer, and we'll fill you in on the details.\"\n\n***\n\nRachel ran her medi-scanner over her current patient, nodding with satisfaction as she studied the results. \"You're responding well to the treatment, Antony,\" she said to the lean, dark haired young man standing before her. She smiled at him as she continued, \"You'll find your breathing will get easier over the next week or so, and by the end of the month, you'll feel as good as new.\"\n\n\"You're a miracle worker, Doctor!\" he replied brightly, then let loose a hacking cough.\n\nWhen he'd recovered, Dana glided over and handed him a dark-red lozenge as she purred, \"This'll sooth your throat, and make it all better.\"\n\nLieutenant Antony Rossi gazed at her in awe, nodding slightly as he popped the medication into his mouth. Dana helped lead him away to his cot, making way for the next person in line, who stepped forward to be examined. Just like all the other patients she'd treated, Rachel recognised the woman immediately, recalling her complete medical history in an abrupt burst of knowledge. Lieutenant Commander Anna Kuznetzov was one of the personnel suffering the most trauma to her lungs, having been captured by the Kintark nearly two months prior to her rescue.\n\nGiving the woman a reassuring smile, Rachel said, \"Hello again, Anna. You probably don't remember me treating you before, do you?\"\n\nThe brunette shook her head, and between rattling breaths, she replied in a raspy voice, \"Sorry Doctor... I've been... pretty groggy... for weeks.\"\n\nRachel nodded, and said in a calm, reassuring voice, \"Don't worry, that was only temporary. Now you're away from the Consort on Xen-Nuchek, you'll be fine.\" She raised her medi-scanner and added, \"This won't hurt a bit, I promise.\"\n\nAs Rachel continued her scans, the tall, middle-aged man standing beside her shook his head, as he leaned over to glance at the results. Like other serving Terran medical personnel, he had the Caduceus on his jacket, the twin snakes coiled around a winged staff signifying he was from the Medical corps. \n\n\"This is incredible!\" he balked, staring at her in amazement. \"Where did you find this treatment? Is it from one of the alien races? I've never seen anything like it!\"\n\n\"No, Commander Larson,\" Rachel replied, as she examined her patient's lungs, studying the damage the woman had received from extended sulphur dioxide exposure. \"As I explained before, it's a stem-cell therapy I developed, which I tailored as an inhalant to improve its efficacy.\"\n\n\"But you're just a young girl!\" the medical officer protested, his mind refusing to believe what she was telling him. \"You must be fresh out of medical college!\"\n\nRachel glanced his way, and smiled wryly as she said, \"Yes, I graduated just a few months ago. I've been quite busy since then.\" Turning to her patient, she continued, \"Results are very promising, Anna. At this rate of cellular regeneration, your voice should be back to normal in a couple of weeks, and your breathing will get much easier too. I estimate you'll see a full recovery in a little over five weeks time.\"\n\nAnna stepped forward and wrapped her arms around Rachel, hugging her as she trembled with relief. Between ragged breaths, she gasped, \"Thank you... so... much!\"\n\nStroking her back soothingly, Rachel replied, \"You're quite welcome.\"\n\nAnna collected herself and gave the young doctor a look of profound gratitude, before Nurse Dana gave her a throat lozenge and guided her away. Rachel watched them leave for a second, then she turned to a muscular, dark-skinned man who was next in line, and smiled at him as she beckoned him forwards.\n\n\"I'm sure you know the drill, Hiran,\" she said to her next patient, recognising him from the group of most severely injured prisoners she'd treated. \"I'm just checking to see how well your lungs are recovering.\"\n\n\"Go ahead... Doctor...\" he wheezed, returning her smile. \n\nCommander Larson leaned forward and whispered to Rachel, \"I was only on that godforsaken planet for a few hours, but your last patient must have been there for at least a month! After that level of sulphur dioxide exposure, she should only have a few weeks to live at most!\"\n\nRachel glanced at him out of the corner of her eye, and nodded as she said, \"Yes, I'm delighted with the results. Recovery rates are nearly three percent better than my most optimistic projections.\"\n\n\"Projections?\" he asked her with a puzzled frown. \"How effective were the clinical trials?\"\n\nShe smiled as she replied, \"I only came up with the idea yesterday. Trials weren't necessary though, as the science behind this was fairly elementary. Besides, it was important to start healing these people immediately.\"\n\n\"B-b-but, you can't do that!\" Commander Larson stammered. \"Radical new treatments like this need to be validated by the appropriate Clinical Advisory Board! Once they've passed that, then they have to be cleared for general application by the Terran Federation Medical Oversight Committee!\"\n\nDana sauntered up to them, getting ready to lead the next patient away once Rachel had given him the all clear. She'd overheard the tail-end of the conversation, and the redhead grinned at the stunned Doctor, as she said, \"Rachel's really fucking smart! If she knew it would work, then it would. Anyway, all that bullshit doesn't apply to her, she's one of the Lionesses.\"\n\nRachel looked up from the medi-scanner, and she smiled at her patient as she said, \"Another four weeks and you'll be able to hit the gym again, Hiran. Give your lungs the time they need to recover first though, please?\"\n\n\"You got it... Doc!\" he replied between deep breaths, giving her a huge grin.\n\nAs Dana led him away, Rachel turned to look at Commander Larson with a disapproving frown, and said, \"I'm fully conversant with how the Terran Federation bureaucracy operates, Doctor. Unfortunately, some of these people didn't have six months to wait for the requisite clearances, so I chose to let them live instead.\" \n\n\"You can't just circumvent processes like that!\" Doctor Larson protested indignantly. \"I understand you wanted to help these people, but arbitrary life and death decisions aren't yours to make. You're not God!\" \n\nRachel looked away into the distance, lost in thought as she murmured, \"No, he hasn't been around for over ten thousand years. I'd be fascinated to know how he did it though...\"\n\n\"Did what?!\" Doctor Larson asked her, completely bemused.\n\n\"Created life,\" Rachel replied distractedly.\n\n***\n\nJohn did his best to relax, as he sat on one of the comfortable sofas in the Captain's Ready Room aboard the Damocles. He took a sip from the chilled bottle of beer clutched in his right hand, and listened to Calara's dulcet tones as she walked her audience through the battle in the Regulus system. She had just finished explaining how she'd taken command of the remnants of Santini's and Lynton's battle groups, then unleashed them on the pursuing Kintark fleet.\n\n\"Those orders came from you?!\" Jack asked her in bewilderment. He glanced at John, and said, \"I thought you were the one pulling the strings in that battle!\"\n\nCalara gave him a shy smile as she nodded in confirmation.\n\n\"Well I'll be damned!\" Jack exclaimed, shaking his head in amazement.\n\nJohn smiled at her affectionately, and said, \"Your daughter's a gifted tactician, Jack. Far better than me in fact, and I'm a strong believer in using the best man for the job. Or woman in this case.\"\n\nMateo laughed as he shook his head, and said, \"All those Captains and Commodores taking fleet orders from a first Lieutenant. I'm sure they'd have a fit if they found out!\"\n\nJohn chuckled as he said, \"Actually, Calara isn't a First Lieutenant any more, are you honey?\"\n\nCalara blushed, and replied, \"I've been promoted to Commander.\"\n\n\"You outrank me now!\" Mateo gasped in shock.\n\nShe smiled at him, and replied, \"Don't worry Lieutenant Commander, I won't pull rank too often.\"\n\nThis came as no surprise to Jack, who'd found out about her promotion during the battle itself. He smiled at his daughter, his brown eyes full of fatherly pride as he said, \"Congratulations, Callie. From everything I've seen on TFNN and in that battle, you definitely earned it.\"\n\nShe turned his way, and when they made eye contact she could see the strength of his feelings written as plain as day across his face. Her answering smile was gloriously happy, and John was delighted for the young woman, knowing full well how much her father's approval meant to her.\n\nA polite knock on the door drew their attention that way, and Jack said in a loud voice, \"Come in, Lieutenant.\"\n\nThe door swished open, and an attractive blonde in her early twenties glided through the door. She saluted Jack respectfully, and said, \"You requested I escort one of your guests to Medical, Sir?\"\n\nJack smiled at her, and said, \"That's right Lieutenant Campbell, thank you.\" He rose from his chair, and gesturing to Mateo, he continued, \"Please can you take my son, Mateo, to meet with Doctor Leandros. I'd like her to give him a full check-up.\"\n\nMateo looked like he was about to protest, but a glance from Jack silenced any objections. He rose to his feet, and smiled flirtatiously at the blonde medical intern as he said, \"Mateo Fernandez at your service, Lieutenant Campbell.\"\n\nShe returned his smile, and after studying the handsome Latino with an appraising eye, she replied, \"Follow me please, Mateo, and you can call me Emily.\"\n\nThe young woman turned to lead Mateo from the room, but as she did so, her eyes were drawn to the well-built man in the white uniform still seated in the room. She gasped when she saw the golden lion on his chest, then snapped sharply to attention, and said, \"It's an honour to meet you, Sir!\"\n\nJohn had been watching the two with amusement, and had come to the conclusion that it wasn't just Calara that had inherited Jack's penchant for blondes. He put down his drink, then smiled at the young woman as he rose to his feet, and said, \"Nice to meet you too, Emily.\" Turning to Calara next, he felt a twinge of guilt as he added, \"Would you like to keep Mateo company? We'll have to leave fairly shortly, so it might be the last chance you two get to chat for a while.\"\n\nCalara nodded, realising John wanted to speak to her father alone about something, so she grinned at Mateo, and said, \"Come on, big brother, let's make sure you get a clean bill of health.\"\n\n*I know you need Calara out of the way, but cockblocking Mateo? John, that's harsh,* Alyssa teased him playfully. \n\nHe managed to stifle his laughter as the three young officers walked out of the room, and John overhead Lieutenant Campbell say to Mateo and Calara in a hushed voice, \"How do you two know the Lion?!\"\n\nMateo laughed, and said, \"He's dating my sister!\"\n\nThe door slid closed, cutting off further conversation even from John's enhanced hearing. He turned to look at Jack, who was standing there in silence, studying him appraisingly. The look was a familiar one, and reminded him of the look Calara's father had given him after their sparring match at the Fernandez family home on Jericho.\n\nHe gave Jack a nervous smile, and said, \"I'm glad we got a chance to talk alone.\"\n\nJack's mouth twitched into the hint of a smile, and he asked, \"Care for another drink? You looked like you were nursing that beer a bit. Something stronger perhaps?\"\n\nAs much as John would have enjoyed downing a whiskey right now, or several in fact, he shook his head, wanting to keep himself focused. \"I'm fine thanks, Jack. I'll need to keep a clear head until we're on our way,\" he replied politely.\n\nJack watched him for a long moment, before saying, \"You look like you've got something on your mind, John. In my experience, it's better to just come right out and say whatever it is.\"\n\nJohn fought down the butterflies in his stomach, and he met Jack's probing gaze as he said, \"There is actually, something very important.\" He took a deep breath, then continued, \"I know I haven't known Calara for all that long, and that there's quite an age gap between us, but I'm deeply in love with her. So much so in fact, that I'd like her to be part of my life forever. I plan to propose to her, and it would mean a great deal to me if you were to give us your blessing.\"\n\nHe braced himself for an outraged reaction, just in case her protective father decided to launch himself on the attack.\n\nJack had been listening attentively, and the hint of a smile playing on his lips broke into a wide grin as he said, \"Of course, John. I'd be delighted!\" \n\nThe two men shook hands, and John blew out his breath in a relieved sigh, then grinned and said, \"I wasn't sure which way that was going to go. I'm so happy you agreed!\"\n\nLaughing now, Jack said, \"Maria warned me months ago that you two would end up together. I've had quite a bit of time to get used to the idea.\"\n\nJohn chuckled and said, \"You're wife's incredibly perceptive. I was actually going to give her a call after this, and ask her the same question.\"\n\n\"She'd love that, and would really appreciate the gesture,\" Jack said with a fond smile as he thought about his wife. He looked at John questioningly, and added, \"Are you sure about that drink? Something to celebrate?\"\n\nNodding this time, John said, \"A whiskey would be great if you've got one.\"\n\nJack strolled over to his desk and opened the bottom drawer, before lifting out a square bottle of a rich amber looking liquid, along with a couple of tumblers. He poured some of the whiskey into each glass, then handed one over to John.\n\n\"I suspected that's why you wanted to speak to me today,\" Jack said, after taking a sip. \"It came as a hell of shock when Mateo suddenly appeared with you too. A wonderful one of course, but still.\"\n\n\"Sorry about that,\" John apologised. \"Everything was so hectic in the lead up to the battle, I didn't really have much of a chance to inform you beforehand.\"\n\nStill hardly daring to believe it was true, Jack replied soberly, \"I knew he'd never betray the Terran Federation, but I thought he'd either been murdered by traitors, or handed over to the Kintark. That would have been a death sentence too, as no one comes back from their prisons.\" He let out a troubled sigh as he said, \"I thought I'd lost him, John. I pray you never have to experience that kind of pain.\"\n\nGiving him a reassuring smile, John said, \"My doctor's superb, and she already checked Mateo over. He'll be absolutely fine now.\"\n\n\"Thanks to you,\" Jack said, the raw earnest gratitude on his face offering a rare insight into the man's private emotions.\n\nJohn gave him a nod of acknowledgement, then smiled as he said, \"We'll probably have a big wedding, so I knew we'd need Mateo as the third groomsman.\"\n\nJack laughed and shook his head in amusement as he said, \"I know you said Calara's the real tactician, but you're not shy of stacking the odds in your favour when you can. Asking a father for his daughter's hand in marriage is nerve racking stuff, but you didn't need to save Mateo's life and my own to convince me to say yes!\"\n\n\"I didn't want to take any chances,\" John said with a smile, taking another sip from his drink.\n\nChuckling to himself, Jack sipped his own whiskey, then glanced out of the long window that ran the length of his Ready Room, and asked, \"What are your plans now?\"\n\nJohn followed the other man's gaze, then stood there for a moment, staring out at the battlefield as he watched the ships drift by. A Terran Search and Rescue corvette was gliding through the charred remnants of Terran and Kintark vessels looking for survivors. The small vessel came to a halt with the orange flare of retrothrusters, then began to use its tractor beam to snare an escape pod. It drew the tiny, grey, egg-shaped craft through an open hatchway on the starboard side of its hull, where John knew recovery crews would be there waiting to free the inhabitant.\n\nScores of Federation cruisers had docked with Kintark vessels, each Terran ship's complement of marines taking the Lizardmen prisoner, while small prize crews seized control of the alien vessels. The scale of the cleanup operation was vast, and he knew they'd be able to do some good if he asked the girls to assist. Thoughts of his ship and crew drew his eyes to the Invictus, standing out amongst the hundreds of matte coloured spacecraft like a shimmering beacon with its glossy white hull. Both Terran and Kintark ships were giving the assault cruiser a wide berth, out of reverence and fear respectively.",
        "\"I'd like to assist, but it's not wise for me to stay here,\" John admitted, glancing at his drinking companion. \"The Admiralty are... intrigued, about the tech on my ship, and I don't want to escalate tensions by leaving the Invictus there as a temptation.\"\n\nJack looked at him in surprise, and said, \"You honestly think they'd try and seize your ship from you?!\"\n\nJohn nodded grimly, and replied, \"You've seen what the Invictus can do. They don't realise that half of its effectiveness is down to Calara, but it's still a prize they'd give their left arm for.\"\n\nLaughing then, Jack shook his head as he said, \"No, you misunderstand me. Of course they'd love to get their hands on the Invictus, but who are they going to order to take it from you? I'm about as loyal as it gets, but if they ordered me to attack the Lion, I'd tell them to go fuck themselves!\" He winked then, and added, \"Even if he wasn't about to become my son-in-law.\"\n\nBlinking in surprise, John replied, \"Yeah, but you knew me personally before all this 'Lion of the Federation' nonsense. I'd like to think I made a decent enough impression on you that you'd be a bit biased anyway.\"\n\nShrugging, Jack said, \"That's true enough, and as I said back on Jericho, I think you're a nice guy.\" He turned then, gesturing towards the hundreds of Terran ships cleaning up the battle of Regulus, and continued, \"But, your intervention just saved all our lives, John. You've served in the military, I don't have to tell you what something like that means to a man. There's over half a million Terran Federation personnel out there who're feeling that right now. They know they're only alive today, because the Lion sailed in here and handed the Kintark their ass.\"\n\nJohn turned to stare out the window, looking at the hundreds of ships with fresh eyes. It was an astonishing and humbling thought, and the realisation that Jack was absolutely right lifted a heavy burden of worry from his mind.\n\nJack put a comforting hand on his shoulder, and said, \"We all saw what you did for Terra. For the last few days, there's been wall-to-wall coverage from TFNN and all the other networks, of the Invictus shooting down the rogue AI ship that was attacking the Sol System. The 'Lion of the Federation' might have started out as some PR bullshit from the Admiralty, but it's grown far beyond that now.\" He smiled as he added, \"I'm not saying to let your guard down, far from it, but you're not as vulnerable as you think.\"\n\n*I-... I might have been very wrong,* Edraele faltered, and he could feel how shocked she was over their telepathic link. She seemed to collect herself then, but she sounded sad as she continued, *My experiences are drawn from ruling through fear, terrorising my subjects into obedience, and expecting betrayal at every turn. This legendary reputation that's developing around 'the Lion of the Federation' is far beyond anything I've ever witnessed before.*\n\n*It's alright, Edraele,* John replied, his tone soothing. He sent her a warm smile as he added, *This is all new to me too.*\n\n*Still, I'm so sorry I worried you unnecessarily,* she apologised, and he could feel how badly she felt for her overly pessimistic advice.\n\nJohn's tone was firm as he replied, *Plan for the worst and hope for the best. Your advice was perfect, and I won't hear another word otherwise. Imagining the darkest betrayals possible and keeping me prepared for that eventuality is the greatest service you could do for me, alright?*\n\n*I'll always be there to watch your back,* she told him vehemently.\n\nThe conversation with Edraele had only taken a couple of seconds, but John didn't want Jack to feel anything was amiss, so he turned to face him and said, \"Thank you for telling me that, Jack, I really appreciate it. I've been so caught up in recent events, I haven't had a chance to just stop and get my bearings.\"\n\n\"No problem and I'm glad I could help,\" he said with a genuinely happy smile.\n\nWith a sigh of regret, John said, \"I probably should get going. I've got over six-hundred freed prisoners on the Invictus, and I promised I'd get them safely to Port Medea.\" He smiled warmly as he added, \"It's been a huge relief chatting with you though, for a number of reasons.\"\n\nJack grinned at him, and asked, \"When are you thinking of popping the question?\"\n\n\"Soon, I'll just need to find the right time,\" John replied. \n\nGiving him a friendly wink, Jack said, \"I think I know what Calara's answer will be. I doubt you have much to worry about on that front.\"\n\n\"I hope you're right!\" John said with a smile, and the two men shook hands again before they parted ways.\n\n***\n\nCalara waved at her dad and brother one final time, before they closed the airlock on the Damocles. She let out a happy sigh, then pressed her hand to the DNA reader next to the Raptor's airlock to close the door. \n\n\"Unauthorised Access,\" the computer announced in its bland, emotionless voice.\n\nShe frowned, and placed her hand on the panel again, but it stubbornly repeated the same phrase. \"Unauthorised Access,\" it declared, with what sounded like a hint of smugness.\n\nWhirling around to stare at John in astonishment, Calara said, \"Not this again! I thought my DNA had stabilised after I'd been through the Change?\"\n\nHe held up his hands, and said, \"It's not something I've done intentionally. Maybe the DNA reader is broken?\" He reached around behind her, and pressed his hand on the panel. The light flashed across the scanner, then beeped quietly as it matched his genetic code to the record it had in its system, and the airlock door slid closed with a secure sounding \"Thunk\".\n\n\"I'll have to ask Rachel to check me over again, and see what's changed,\" Calara said thoughtfully.\n\n*She's pretty busy at the moment, I'm afraid,* Alyssa thought to John, and by the look on Calara's face, he knew she'd just been sent the same message. *Come up to the Bridge and I'll explain.*\n\nJohn and Calara raced through to the grav-tube, then stepped inside and floated up to the upper deck. They strode into the cockpit, where Faye greeted them with a warm smile. \"Alyssa wanted to speak to you,\" she said, turning to glance towards the holographic viewscreen floating between the Pilot and Co-Pilot's chairs.\n\n\"Hey guys,\" the beautiful blonde said, greeting her lovers with one of her glorious smiles. \"I'd ask if you enjoyed your trip to the Damocles, but I know it went well.\" Her eyes flicked to look at John, and she added, *We'll talk about that later, handsome.*\n\n\"What's got Rachel occupied? Are the prisoners going through some kind of relapse of something?\" John asked, with concern.\n\nAlyssa shook her head, and replied, \"No, it's nothing like that, all the people we rescued from the Kintark are fine.\"\n\nCalara breathed a sigh of relief, then looked at her curiously as she asked, \"What's the problem then?\"\n\nAlyssa's sparkling smile turned into a sombre frown as she said, \"We were contacted by a Commodore Michael Dawson, who was in command of the battleship Hyperion before it got burnt out by plasma fire. The medical facilities in the fleet are getting overwhelmed, and he's asked if we can evacuate the severely wounded to Port Medea. We've taken on over eight-hundred injured personnel from several ships, and we've split them between the Medical Bay, the Crew Quarters on Deck Four, and the Hangar Bay.\"\n\n\"So we can't land the Raptor,\" John said, nodding his understanding. \"You did the right thing. Well done, honey.\"\n\nShe smiled at him, and said, \"I've plotted us a course from here to Iota-Leonis, and I've sent it to Faye in the Raptor. It'll take us two and half hours to fly there.\"\n\nJohn glanced at the purple sprite, who gave him an eager grin, and said, \"Course plotted and ready to go!\"\n\n\"Let's get moving then,\" he said with a smile.\n\nAlyssa blew him a kiss before closing the comm channel, and Faye hummed a happy tune to herself as she disengaged the docking clamps from the Damocles. The Raptor pulled away from the grey-hulled cruiser, the Terran Federation ship's fearsome batteries of Heavy Cannon and Beam Lasers currently hidden behind smooth Titanium plating. As quick as the Invictus was, the gunship was even faster, so Faye pulled alongside the white assault cruiser as they flew clear from the system's gravity wells.\n\nJohn glanced at Faye, and asked, \"Will your remote connection be able to handle us flying at hyper-warp?\"\n\nShe nodded enthusiastically, and replied, \"Dana already planned for that when she set up the remote link. She says it won't be a problem!\"\n\nHe watched quietly after that as the Invictus was swathed in blue particles and leapt into hyper-warp a few seconds later. Faye had activated the Raptor's Tachyon drive a moment afterwards, and soon their gunship was racing towards the Iota-Leonis system as it followed Alyssa's weaving path between the stars.\n\nJohn felt a presence close behind him, and Calara stood on tiptoe as she leaned over his shoulder and kissed him on the tip of his ear. When he turned to face her, she had a tender expression on her face as she said, \"I had a good idea how we could pass the time until we reached Port Medea...\"\n\nShe slipped her hand through his, intertwining their fingers, then pulled him gently towards the door leading from the cockpit through to the cabin. He shared a brief smile with Faye before following after Calara as she sashayed alluringly from the cockpit.\n\n***\n\nDana frowned as she stared at the slowly rotating holograph, trying to figure out what on Terra she was looking at. The colourful three-dimensional image was floating in the clear space in front of the Engineering Podium, but the bewildering array of chemical components had her completely lost as to its purpose. With all the carbon molecules it looked organic in nature, but she had no real idea what she was looking at. Fortunately she knew a girl who did.\n\n\"Hey babes, whatcha lookin' at?\" she drawled, as she wrapped her arms around Rachel's waist and rested her chin on her lover's shoulder.\n\nRachel had been lost in thought as she gazed at the holographic image, and she jumped in surprise at the sudden physical contact. The brunette turned to look at the redhead, smiling as she said, \"Sorry, I was miles away there. Did you just ask me something?\"\n\nDana gave her a peck on the cheek, and said, \"I should be the one saying sorry, I didn't mean to scare you.\" She nodded towards the staggeringly complex formula, and asked, \"What's that you're working on?\"\n\nRachel's eyes sparkled with excitement as she replied, \"It's a synthetic enzyme that will act as a catalyst for cellular regeneration. Given the correct personalised stimulus, this should be able to reverse catastrophic cell necrosis on both the dermis and epidermis!\"\n\nScrewing her beautiful face up in a comedic depiction of confusion, Dana said, \"I was with you all the way up to 'It's a synthetic...'. That means you made it, right?\"\n\nThe brunette twisted in Dana's affectionate embrace until she was facing her, and smiled as she asked, \"Do you want the layman's version?\"\n\n\"I'm ready to be wowed!\" Dana replied, her brow furrowing with concentration as she listened attentively.\n\nRachel glanced at the holograph, and said, \"It's for the plasma burn victims we took on board. I just need to take a blood sample from each patient, then I can customise this enzyme for them. We can apply it to the burned areas of their body, and It'll help them re-grow damaged skin without leaving any scarring.\" She looked a bit forlorn as she admitted, \"Unfortunately It can't regenerate muscles or sinews, so it won't be able to help the really severely injured.\"\n\nDana blinked at her in shock, lifting her hand self-consciously to touch the side of her face, which had once been horribly scarred. She'd been involved in a terrible accident as a child, when a generator she'd tried to repair had exploded in front of her, leaving her with gruesome burns across her face, arm, and chest.\n\n\"Would it have worked on me?\" she asked quietly.\n\nBrushing her fingers across Dana's beautiful face, Rachel nodded as she replied, \"You were my inspiration. When John healed your scars, he helped you blossom into the wonderful girl you are today... but he can't help everyone like that. I didn't want anyone else to suffer the way you did.\"\n\nLetting out a low cry, Dana wrapped her arms tightly around Rachel, and as tears ran down her face, she sobbed, \"What you've done for those people... it means so much!\"\n\nRachel hugged her overwhelmed friend, her full lips curving into a contented smile.\n\n***\n\nJohn finished getting dressed, then leaned over to pull the covers up around Calara's shoulders, leaving the slumbering girl tucked up snugly in bed. She had a serene expression on her lovely face as she slept, and he honestly couldn't remember seeing her look more beautiful. He crept quietly out of the room, then shut the door to the cabin behind him, wincing as it closed with a soft click. He stopped and listened for a moment, but Calara's deep, rhythmic breathing hadn't been interrupted. \n\nSatisfied that she was still fast asleep, he walked down the corridor towards the cockpit, then smiled at Faye as she turned in her chair and greeted him with a wave. After closing the door behind him, he relaxed, feeling as though he could speak normally now, and he asked, \"How's it going, Faye? Any trouble?\"\n\n\"None whatsoever!\" she replied exuberantly. Her cute purple face twisted in confusion as she added, \"You could have stayed in bed if you wanted to. We won't arrive at Port Medea for another twenty minutes.\"\n\n\"I know, but I had something I wanted to do while Calara was asleep,\" John replied cryptically.\n\n\"Really? Is it a surprise for her?!\" Faye asked, turning to kneel on the Pilot's chair, and staring at him in delight over the headrest.\n\nHe nodded, smiling as he replied, \"Yes, and I hope she likes it.\" He leaned forward, and added in a conspiratorial whisper, \"I'm going to ask her to marry me, but I'm calling her mother first to ask for her blessing.\"\n\nFaye swooned as she gazed at him, biting her lip in excitement. She had a sudden thought, and announced considerately, \"I'll give you some privacy for the call. I won't get in the way.\"\n\n\"You can watch the call from inside the Raptor's digital network if you'd like?\" he asked her with a smile.\n\n\"Thank you so much!\" Faye gasped, then disappeared in a purple flash.\n\nJohn walked around the Pilot's Chair, then sank down into the comfortable seat. He tapped a button on the unfamiliar console in front of him, and with a quiet hum, the holographic comms interface appeared before him. He suddenly realised with a hint of embarrassment, that in all this time, he'd never actually flown the Raptor. \n\n*We're definitely spoiling you, Mister 'I'm-too-good-to-fly-my-own-spaceship',* Alyssa said in wry amusement, although she sounded a little more subdued than normal.\n\n*I've got other far more important duties to attend to,* he replied imperiously. He smiled then as he continued, *Like keeping my beautiful girls happy.*\n\n*She's going to be thrilled,* Alyssa said with a wistful, ambivalent sigh. \n\nHe could feel just how delighted she was for Calara over their empathic bond, but her happiness was also tinged with a profound sense of sadness and loss. It only took him a second to realise why she was feeling so conflicted.\n\n*I could really use a hug,* she said quietly as she listened to his thoughts.\n\n*It's alright, I understand,* John replied. His voice was soothing as he added, *I'll be back soon, beautiful.*\n\n*I love you,* she replied quietly, and her voice suddenly went silent.\n\nHe felt a curious absence from his mind then, as though she had deliberately pulled back her consciousness so she wasn't tuning into his inner voice any longer. He wasn't alarmed though, as her actions were perfectly understandable considering the circumstances.\n\nHe searched down the list of contacts on the comms interface until he found \"Maria Fernandez - Jericho\", and swiping his hand across her name, the call started to go through. \n\nHe didn't have to wait long until an attractive olive-skinned woman answered his call. The family resemblance between Maria and her daughter was striking, and although he knew she was a few years older than himself, he wouldn't have put her a day over thirty. Maria was an elegant, refined woman, possessed of a gentle self-assuredness which he found quite fascinating. It therefore came as quite a surprise to see her looking so flustered, her beautiful face reflecting how overcome she was with emotion.\n\n\"Hello, Maria, It's lovely to see you again,\" John said, as he greeted her with a warm smile.\n\n\"Oh, John! I'll never be able to thank you enough for saving my baby!\" she exclaimed, and he couldn't help but be moved by the level of heartfelt relief and gratitude he saw in her dark-brown eyes. She choked up as she added, \"Mateo was with Jack when they called me...\"\n\n\"It was my pleasure, Maria,\" John said sincerely. \"I love Calara very much, and I've grown quite fond of her family too. I'd never let anything happen to any of you if I can help it.\"\n\n\"Thank you John, you've done so much for us already. Calara, Mateo, Jack, I just don't have the words...\" she replied, her voice trembling with emotion.\n\nHe smiled at her as he said light-heartedly, \"I just hope that you, Dylan, and Eduardo keep out of trouble. I'd rather not make it a full house!\"\n\nShe laughed at that, relaxing as she did so, with a broad smile lighting up her face. After a long moment's pause, she bit her lip nervously, and then blurted out, \"Was there anything else you wanted to speak to me about?\" \n\nShaking his head in amusement, he chuckled as he replied, \"I can't believe Jack told you.\" \n\nMaria blushed with embarrassment, and said, \"Don't be upset with Jack, it wasn't his fault. I know him far too well, and when he called to tell me about Mateo, I realised immediately.\" \n\nJohn smiled at her as he said, \"He mentioned you'd predicted this months ago. Thanks for laying the groundwork for me, I'm sure it made the conversation -much- easier!\" \n\n\"You're very welcome,\" she said, the hint of a smile teasing her lips.\n\nHe studied her face for a moment, and seeing the anticipation burning in her eyes, he asked, \"It's not a surprise any longer, but would you still like to hear the speech I'd prepared?\"\n\nHer expression softened then, and she replied quietly, \"Please do, I'd love to hear what you were going to say.\"\n\nJohn took a deep breath and met her intense gaze. His voice was firm and full of conviction as he said, \"Your daughter is the kindest, loveliest girl I've ever met, and I've fallen hopelessly in love with her. I never thought I'd be lucky enough to find someone so special, let alone have the incredible good fortune for her to actually like me too. I can't imagine Calara not being in my life, and I want to be with her forever. Before I propose to her, would you do me the incredible honour of giving me your blessing?\"\n\nMaria gave him a muffled squeak in affirmation as she nodded her head, her cheeks wet with happy tears. John missed that though, his attention drawn to the shocked gasp from the doorway behind him. He whirled in his chair, and saw Calara with the bedsheet gathered around her and held to her chest, staring at him in amazement. He realised at once that he'd been so wrapped up with speaking to Maria, he hadn't heard Calara's quiet, inopportune arrival. \n\nHe rose from his chair, crossing the floor to her in a several long strides, then sank to one knee as he asked, \"Will you marry me, Calara? I love you with all my heart.\"\n\nThrough eyes filled with tears, she nodded as she stared at him, and managed to gasp, \"Oh, I will!\"\n\nJohn rose to his feet with a wild grin on his face, then swept her into his arms, leaning her back as he kissed her. She returned the ardent kiss passionately, moaning into his mouth as he pulled her closer. He could feel her rounded tummy pressing against him, where she carried the huge load she'd coaxed from his quad into her willing womb. Fortunately his back was to the cockpit camera, so between the gathered sheets and his body blocking line of sight, Maria was oblivious to her daughter's hugely swollen belly. ",
        "He looked over his shoulder at Maria, and grinned at her as he asked, \"Would you mind if we called you back a bit later?\"\n\nMaria managed to choke out a laugh between her sobs of joy, pure delight written across her face at having actually seen the moment when John proposed to her daughter. She shook her head vigorously in answer to his question, then closed the comm channel a second later.\n\nTurning back to look down at Calara, he gave her a wry smile as he said, \"I'm sorry I couldn't find a more romantic location to propose than the cockpit of a Raptor gunship.\"\n\nShe giggled as she hugged him fiercely, and exclaimed, \"It was perfect!\" \n\nFaye suddenly popped into existence in a purple swirl, and she had her hands pressed over her mouth as she squealed with excitement, \"Congratulations! I'm so happy for you both!\" \n\nJohn turned to look at the newly arrived AI, and he grinned as he said, \"Thanks, Faye. I'm glad you got to see it.\"\n\nClapping her hands with glee, the digital construct gasped, \"I recorded the whole thing! Everyone can watch it and share the experience with you too!\"\n\nCalara's joyful laughter filled the cockpit, and she exclaimed, \"I must have looked absolutely stunned! I had no idea!\"\n\nStroking her back, John asked, \"I thought you'd inherited your mother's perceptiveness?\"\n\n\"I must have a bit of a blind-spot when it comes to you,\" she admitted, then stood up on tiptoes to give him a tender kiss. A sudden thought crossed her mind, and tilting her head back to stare at him, she added, \"That's why you wanted to see my dad! To ask his permission before you proposed!\"\n\n\"Too old fashioned?\" he asked her with a self-conscious smile.\n\nShe shook her head vehemently, and replied, \"It was a lovely gesture! Dad is a traditionalist so he would've appreciated it, but asking my mother too was so thoughtful.\" Laughing then, she continued, \"I was going to say you probably earned some serious brownie points, but you already saved my life, Mateo's, and my father's too. I think it's fair to say they're ecstatic to have you as a son-in-law.\"\n\n\"I wasn't going to take any chances,\" he said, as he brushed the backs of his fingers against her cheek, savouring the feel of her wonderfully smooth skin.\n\nCalara gazed at him with huge round eyes, and sighed softly as he caressed her, before she murmured, \"I can't wait to tell the others.\" She looked thoughtful as she considered the other girls, and studying his face intently, she continued, \"Who else are you engaged to?\"\n\nFor a couple in a more conventional relationship, a question like that would be the prelude to a furious row. However, rather than feeling a shiver of panic at the question, John could see by her expression that Calara wasn't upset with him, she was simply curious to see which of her adoptive sisters she could share this news with.\n\n\"Alyssa and Dana were first,\" he replied, smiling as he recalled the marriage discussion in the shower, after they'd had fun role-playing at being his secretaries. \"I intended to ask you next, but your family situation complicated matters a bit. I didn't want to risk causing you any trouble.\"\n\n\"That was very considerate, thank you. I loved you asking my parents for their blessing,\" she replied, touched by his concern for her family. She smiled at him then and asked, \"Anyone else?\"\n\n\"Jade too,\" he said, then chuckled as he added, \"Although she took some convincing!\"\n\nCalara blinked in surprise, and asked, \"Really? I would've thought she'd be overjoyed by the idea.\"\n\n\"It was a Nymph-thing I think. She's been genetically programmed to serve and obey, so the idea of being treated as an equal to you girls was a bit overwhelming. I managed to talk her through it, letting her know how much I loved seeing her personality grow and develop. Once I'd convinced her how important she was to me, she agreed,\" he explained with a smile of satisfaction.\n\n\"I can't wait to speak to them all,\" she gushed, as delighted for the other girls as she was about her own engagement. She grinned at him then, and her brown eyes sparkled as she added, \"Who are you going down on bended knee for next?\"\n\n***\n\nRachel nodded to Commander Larson, and said, \"Thank you for your assistance, Doctor. If you could ask your staff to assist with the disembarkation of the patients in the hangar, I'll co-ordinate the transfer of the critical personnel from my Medical Bay.\" \n\n\"Of course, Doctor Voss,\" he replied with a curt but respectful nod. \"We'll begin immediately.\"\n\nCommander Larson had been the Chief Medical Officer aboard the Phobos, and he'd earned the respect of his staff as both a skilled surgeon and for his fair-minded approach to leadership. When the rest of the personnel aboard the battleship had rebelled, his entire staff had followed his lead, and stayed loyal to the Terran Federation. This had earned them a one-way ticket to the Xen-Nuchek mines, but considering the eventual fate of their shipmates several hours later, not one of them regretted that decision.\n\nDespite Erik Larson's protestations at Rachel's flagrant disregard for Terran Federation medical protocols, he couldn't deny the miraculous results she'd achieved with her patients. He'd watched in amazement as one terminal case after another had been reversed, her treatment not only saving their lives, but offering them a full recovery in an astonishingly short timeframe. When the Invictus had taken on the wounded personnel from the battle of Regulus, he'd been more than happy to help, putting his team of junior medical staff to good use attending the injured troops. \n\nRachel watched him depart, then turned her attention back to the horribly burned man lying sedated on the hovering gurney. There was a slight shimmering in the air in a graceful arc over the stretcher, where a translucent force field kept him in a completely sterile environment. Her mind whirred as she studied his scorched and shattered body, cataloguing and evaluating his numerous injuries. \n\n\"Patient seven-four-nine, Lieutenant Oliver Clarke: Loss of left leg below the knee, third degree burns to left quadriceps, broken left femur, second degree burns to both hands,\" she thought to herself, then glanced at the holographic screen displaying his medical notes at the end of the floating stretcher.\n\nOne of Doctor Larson's medics had already examined this patient, and she checked off the injuries that the other doctor had identified. Sure enough their lists matched, detailing the aftermath of the burning support strut that had fallen on Lieutenant Clark's leg, and the burns to his hands he'd sustained attempting to push the flaming wreckage from his battered limb. The most significant difference between their diagnostic techniques, was that the previous doctor had taken five minutes to detail all the injuries, whereas Rachel identified them all in just under three seconds. Lieutenant Clark was the last of hundreds of patients she'd glanced over, only having to correct mis-diagnoses in four cases. \n\nThe man groaned in his sedated state, shifting where he lay on the gurney in his discomfort. Noting a slight spike in his pain levels, she adjusted the strength of the neural blockers by a couple of increments, and the Lieutenant sighed as he visibly relaxed.\n\n\"Don't worry, Oliver. I'll take good care of you,\" she whispered to him with a look of sympathy on her beautiful face.\n\nThe massive doors in the ship's hull started to slide open, and she looked up from the medical notes when she heard the familiar sound of huge hydraulics at work. A statuesque blonde stood by the door controls on the other side of the hangar, watching the frenzied activity in the vast room. Rachel walked briskly across the Hangar Bay to join Alyssa, and as she approached her friend, she glanced through the widening gap below the hangar door. The enormous docking bay they had landed in was teeming with Terran Medical personnel, who were clearly waiting to receive the flood of patients.\n\n\"Hey, gorgeous,\" Alyssa said, giving her a soft smile in greeting.\n\nRachel smiled back at her, and was about to give her a quick status update, when she paused and studied the other young woman closely. Although Alyssa was doing her best to hide it, Rachel knew her well enough to see the pain hidden behind her carefully prepared facade. \n\nStriding up to her, Rachel asked, \"What's wrong? You look upset!\"\n\n\"Just bad psychic energy from all the wounded,\" Alyssa replied off-handedly, trying to soothe her worries.\n\nRachel tilted her head to one side, frowning as she looked into the other girl's bright blue eyes, and asked perceptively, \"Are you sure?\" She opened her arms in invitation, giving the troubled blonde a sympathetic smile. \n\nGladly accepting the hug and realising her friend wasn't so easily dissuaded, Alyssa leaned into the brunette as she replied quietly, \"Bad memories from a tragic past...\" They embraced for a long moment, until she let out a mournful sigh, then straightened and brushed her lips against Rachel's cheek. Smiling at her, Alyssa added, \"Thanks for the hug, that was lovely. Don't worry about me, you've got lots to organise with all these wounded people.\"\n\n\"I'm always here for you if you need to talk,\" Rachel said with concern, stroking her arm. \n\nAlyssa nodded, and a relieved smile spread across her face as she replied, \"I'll be alright, John's here now.\"\n\nTurning her head to look out across the docking bay, Rachel saw the unmistakeable sight of John in his white uniform striding across the huge room. The huge crowds of awed Terran personnel seemed to part before him like shoals of fish before a great white shark, as he made his way towards the Invictus. She was amazed that Alyssa had spotted him though, having not even glanced his way before she'd announced his imminent arrival. \n\n*A matriarch has her ways,* Alyssa said with a playful wink, her telepathic voice sweeping through Rachel's subconscious.\n\nSmiling at her supportively, Rachel replied, *Go be with him, he'll make everything better.*\n\nThey parted ways, with Alyssa loping gracefully down the loading ramp and into John's waiting arms. Rachel watched them for a moment, enjoying seeing the look of delight on Alyssa's face as she was reunited with her man. Knowing the blonde was in capable hands now, she gazed out over the horde of Medical Personnel, looking for the ranking officer. \n\nShe spotted a cluster of medical officers gathered around a man who seemed to exude authority. His insignia and epaulets denoted his rank as Commodore, and he had the Caduceus on his jacket like the other medics who were vying for his attention. Rachel threaded her way through the crowded dock, and strode towards the group of doctors, but they were all so focused on the Commodore in their midst, they managed to studiously ignore her. \n\nAfter waiting politely for a few long moments, she announced loudly, \"I'm the attending physician. Would anyone be interested in my clinical assessment of these patients?\"\n\nThe group of fawning medical personnel turned around to see who had spoken, then stared at her in surprise. Their looks turned to disdain when they realised they were being addressed by a teenager, and considering her age, they immediately assumed she was a medical intern. Or a model playing dress-up.\n\n\"Run along and fetch the Chief Medical Officer, dear,\" a haughty middle-aged woman said, her dismissive tone one she obviously saved for young medics beginning their residency. She peered over her horn-rimmed glasses, giving Rachel a disapproving glare when she didn't immediately leap to obey her orders.\n\nRachel arched an eyebrow at the woman's rudeness, but was unruffled as she replied in a firm but respectful tone, \"My name's Second Lieutenant Rachel Voss, and I'm the Chief Medical Officer on the Invictus. However, I won't release the one-thousand-four-hundred-and-seventy-one patients in my care unless I'm confident the medical staff in this facility are competent enough to treat them.\"\n\nThe older woman had turned back to face the Commodore, but she whirled around, and snapped, \"Don't be absurd! Your little joke has gone far enou-.\"\n\n\"Be quiet, Doctor Herridge,\" the Commodore said cutting her off, his voice stern and authoritative. He studied the beautiful young brunette standing before him, then continued, \"My name's Commodore Hochberg, and I command the medical facilities at Port Medea. Forgive my doubts, but aren't you a little young to be in such a senior position?\"\n\nRachel nodded, and lacking any trace of conceit, she replied in a matter of fact manner, \"Absolutely, Commodore. However the Lion chooses his staff based on competence rather than age, and we're all exceptional in our fields.\"\n\n\"Yeah, but exceptional at what?\" one of the men muttered under his breath to a colleague, who sniggered along with his friend.\n\nThe Commodore turned to glare at the man, and barked, \"Apologise at once, Doctor Carstairs, or I'll have you on a disciplinary!\" \n\nThe rude Doctor looked shocked at being loudly upbraided like this in front of the hundreds of personnel in the docking bay. When he saw that scores of people were staring at him now, he blushed bright scarlet with embarrassment. \"Sorry Doctor Voss,\" he mumbled, looking mortified.\n\n\"Now you're dismissed. Get out of my sight,\" Commodore Hochberg said in disgust, sending the obnoxious doctor scurrying on his way. After scowling at Carstairs' quaking friend, he turned back to Rachel, and smiled at her as he added, \"Please accept my apologies for my staff, I won't tolerate rudeness.\"\n\n\"Apology accepted, Commodore,\" Rachel said, trying to suppress her growing impatience. She met the senior officer's curious gaze, and asked, \"Shall I begin my clinical assessment?\"\n\n\"By all means, Doctor,\" Hochberg replied with a half-smile, watching her with amused interest.\n\nShe nodded, and then took a deep breath before continuing in her clear, professional voice, \"The Lion rescued six-hundred-and-forty-five personnel from the Kintark sulphur mines at Xen-Nuchek. One disembarked to the cruiser Damocles, but the rest I will be transferring to your care. Of those, two-hundred-and-thirty-two are medically fit for duty, while the rest suffered varying degrees of acidosis from sulphur dioxide poisoning. I've developed a cure, and treated all personnel who sustained any pulmonary trauma. All can now be monitored as outpatients, as the cellular regeneration process will require no further assistance.\"\n\nThe medical staff, including the Commodore, gaped at her in stunned disbelief, all rendered speechless by this astonishing young woman.\n\nRachel took advantage of their silence to continue relentlessly, \"After the battle at Alpha-Leonis, the Medical facilities in Fleet Admiral Buckingham's task force were overwhelmed with wounded personnel. They asked us to transfer eight-hundred-and-twenty-seven patients to Port Medea, in an effort to alleviate some of the burden on their medical staff. These patients sustained a wide variety of injuries during the battle in the Regulus system, and a significant number served on the battleship Hyperion, which was destroyed by plasma fire.\"\n\n\"We're already treating thousands of burn victims here,\" Hochberg exclaimed, his tone grim as he finally regained his voice. \"If there's been a major engagement, I'm not sure we'll have the capacity to be able to offer them much assistance.\"\n\n\"Seventy-eight percent of the wounded on the Invictus are suffering from varying degrees of plasma burns, so I developed an enzyme that will fully regenerate skin damage,\" Rachel explained, completely unperturbed. \"I'll provide you with the formula and protocol for this treatment, so you'll be able to begin replication and application immediately. By the time Buckingham's Fleet arrive, I'd estimate that you should be able to administer it to at least a thousand patients. The regeneration process will take several weeks to complete, but anyone suffering from second or third degree burns will be viable candidates for outpatient classification after the initial round of treatment.\"\n\nHochberg exchanged startled glances with his shell-shocked staff, and a small crowd of medics began to gather around them as they listened to Rachel in amazement. She felt relieved that they appeared to be taking her seriously, and she smiled as she heard a familiar voice behind her.\n\n\"Is everything alright here, Doctor Voss?\" John asked, as he strolled up to join them. His arrival drew the attention of everyone gathered there, and they stared at him mouths agape.\n\nRachel glanced at him and gave him a welcoming smile, before she replied, \"I believe so, Rear Admiral.\" Turning to Commodore Hochberg, she added, \"Do you foresee an issue with my proposals, Commodore?\"\n\nHochberg laughed then, shaking his head in wonder as he replied, \"None whatsoever, Doctor.\" Turning to look at John, he saluted him respectfully, and added, \"It seems Doctor Voss wasn't being immodest when she said you only recruit the exceptional.\"\n\nJohn smiled at him as returned the salute, and said, \"I feel I must apologise, Commodore. Rachel would have been part of your staff here on Port Medea, but I pulled some strings to bring her onto my team.\"\n\nNodding solemnly, Hochberg's face showed that he dearly wished Rachel was still working at the Terran Federation space station. He smiled at her then, and said, \"Tell me more about your work, Doctor, I can't wait to hear all about it.\"\n\nJohn patted her on the shoulder, and she gave him a grateful smile, before launching into a detailed explanation of the bio-chemistry behind her invention. He stepped back and watched her for a moment, admiring the beautiful young woman as she held the rapt attention of scores of senior medical personal. Their looks of bewilderment turned to intense professional curiosity as she detailed her work, and soon she had the throng of medics abuzz with excitement at the potential of her skin regeneration enzyme.  \n\nRachel seemed to be handling the situation magnificently, so he turned to watch the orderlies pushing the floating gurneys out of the Invictus, and guide them through the docking bay. The disembarkation of the wounded was well ordered and professional, providing a useful insight into the organisational skills of the Commodore in charge of this operation. \n\nHe spotted three of his girls standing together by the Invictus' airlock, the stunningly attractive young women drawing attention from all who passed them by. Alyssa spoke briefly to Jade and Sakura, before the Nymph led the Asian girl through the docking bay. He was relieved to see that the newest addition to their team had decided to dress demurely as they left the ship, temporarily departing from her fetching attire of a formal shirt. They waved him goodbye as they strolled past, and Jade gave him a glorious smile, while Sakura blushed endearingly.\n\n\"Where are you off to?\" he asked them curiously.\n\n\"I'm taking Sakura out for lunch,\" Jade explained with a playful grin. \"I heard there's a lovely restaurant nearby called Calara's. She serves the most delicious treats apparently.\"\n\nSakura's blush deepened considerably, but she fought off her embarrassment and met his amused gaze, licking her lips suggestively. John chuckled heartily at that, and she grinned at him over her shoulder as the Nymph led her by the hand out of the room. He watched them head towards the adjacent docking bay, where Faye had landed the Raptor, and Calara was relaxing in bed with her womb stuffed full of his cum. Although he was in half a mind to follow after the departing girls, he had some other pressing business to take care of.\n\nStriding over to the airlock, he smiled at Alyssa apologetically, and said, \"I promised I'd be there for the rescued prisoners when they departed.\"\n\n*I know. It's not a problem, we'll talk afterwards,* she replied, her tone understanding.",
        "They walked through the open airlock, then through the double doors into the Cargo Bay, where the personnel quartered there were getting ready to disembark. John was easy to spot in his white uniform, and soon a big crowd assembled, as people who hadn't had a chance to personally thank him took the opportunity to do so. He gave each sailor or marine his undivided attention and a firm handshake, speaking to them each individually, albeit only briefly. While he was waylaid by grateful personnel, Alyssa hit the button that opened the enormous door in the Invictus' hull, and the door began to retract into the ceiling.\n\nUpon hearing from Rachel that these personnel didn't require immediate medical care, Commodore Hochberg had allocated several squads of Terran Federation marines to guide them from the ship. People began to trickle out of the Cargo Bay in a steady stream, most of them turning to thank Alyssa as they departed. She smiled at them warmly and wished them well, a gracious host to the end, as the marines led them away to temporary accommodation in the vast space station.\n\nIt took another half-an-hour before the Cargo Bay was clear of their guests, and Alyssa closed the hull door after she waved the last one goodbye. John slipped his arms around her from behind, and kissed her on the cheek as he said, \"Let's head up to my Ready Room to talk.\"\n\nShe nodded, then took his hand as they walked from the Cargo Bay. The maintenance robots had already started dismantling the cots, and there was a parade of cleaning bots streaming out of the room, piled high with bedding. John and Alyssa waited for them to rush past, the bots wobbling slightly on their quiet tracked wheels as they balanced the huge loads of linen in the hampers on their backs. Faye was the ringmaster of this mechanical circus, and she gave them an enthusiastic wave and a sunny smile as they left her to organise the cleanup operation.\n\nAlyssa seemed uncharacteristically subdued as John walked with her to the grav-tube, then through the Bridge and into his Ready Room. He led her over to the sofas, then took a seat, and pulled her onto his lap.\n\n\"That must have been really hard for you,\" he said sympathetically. \"Feeling Calara's happiness, and wanting to enjoy it with her, but missing your own parents.\"\n\nShe let out a mournful sigh, and replied, \"I know exactly what Sparks meant a while back, about loving Calara, but being envious of her too. Then you were so sweet, getting all nervous about speaking to Jack, and what you said...\" She looked up into his eyes, and faltered as she added, \"I just wish things had been different, with my own parents. I'm sorry I shut you out, but I just couldn't listen to Maria too.\"\n\n\"It's okay, I understand,\" he replied, as he stroked her back comfortingly. \"I'm here for you now. You don't have to be strong for anyone.\" \n\nHer face crumpled, and no longer having to maintain a brave facade, she buried her head in his shoulder as she trembled in his arms. He could hear her weeping quietly for her lost mother and father, and he knew she dearly wished with all her heart, that they could've been there to give them their blessing. Sadly, there were some things he just couldn't fix, no matter how much it meant to her. He held her tightly in his protective embrace, as she grieved for her mother who'd died in childbirth, and her father who'd been killed in a mining accident when she was only six years old.\n\nAlyssa was a resilient girl, having grown up in the Karron slums, and she recovered quickly, just needing those few minutes of emotional release to clear her head. She cuddled with him as her tears dried up, letting out a soft sigh of regret before straddling him and looking into his eyes.\n\n\"Thanks for looking after me,\" she said to him earnestly. \"We get so wrapped up in things, I forget to just say thank you for giving me a lovely home, and providing for me and the rest of our family. I love my life here, and wouldn't change any of it for an instant.\"\n\nHe gave her a loving smile, and said, \"Honey, before you came along, I was stuck in a battered old freighter living like a recluse. I should be the one thanking you... profusely, every day!\"\n\nShe grinned at him then, and said, \"Let's just agree we're good for each other, alright? You're probably getting tired of people thanking you anyway.\"\n\nJohn laughed at that, then showed her his right hand, and replied, \"Sounds good to me, I don't think I've ever shaken so many hands in one day!\"\n\nLaughing along with him, Alyssa eventually leaned in to give him a tender kiss, before she pulled back and climbed gracefully off his lap. \"Just going to freshen up,\" she explained as she glided towards the bathroom. \n\nHe watched the enchanting roll of her hips until she disappeared from view, then he rose from the sofa, and wandered over to the long window flanking the room. From up here, his view of the docking bay floor was partially obscured by the Invictus' topdeck. However this was one of the biggest docking bays in Port Medea, and he had a clear view of the double doors leading to the spaceport itself, where he could see the last few patients being pushed away on floating gurneys. \n\n*Rachel's just wrapping things up down there,* Alyssa thought to him, reading his train of thoughts. *They've evacuated the last of the wounded, and she'll come up with Dana in a couple of minutes.*\n\n*Irillith and Faye?* He asked, then corrected himself, as he continued, *Actually, Faye's busy with a dozen different things, but I'm sure one of her avatars will be waiting for us. What about Irillith?*\n\n*She's preparing the Briefing Room for our post-battle debrief,* she replied, then laughed as she agreed, *And you're right, Faye's all over the place.*\n\n*Calara, Jade, and Sakura?* he asked, smiling at the thought of the Asian girl enjoying her fine-dining experience with the Latina.\n\n*Yeah, that was fucking hot. Jade gave me a blow-by-blow account as Sakura ate her first pussy,* Alyssa purred, her raunchy side immediately coming to the fore. She giggled then and added, *Or maybe that should be a 'lick-by-suck' account? Anyway, I wanted to watch too, but there'll be lots more opportunities to see her in action. Sakura acts all shy and demure, but she's a sexy little firecracker given the right encouragement.*\n\n*That's good,* John replied sardonically. *Because the rest of you girls are so sexually repressed.*\n\nHe could hear her musical laughter through the bathroom door, and it opened a few seconds later as Alyssa emerged, looking resplendent once more. She'd been beautiful before of course, even with her flushed face, and her cheeks wet with tears. It was a very different, natural kind of beauty though, her raw emotions giving her an unusual air of vulnerability that made him want to protect her and keep her safe.\n\nShe smiled as she walked towards him, and said, \"It looks like we've found your weakness. Girl's tears seem to be your Achilles heel.\"\n\nNodding, he gathered her in his arms as he admitted, \"My secret's out, I hate seeing you get upset. Are you feeling better now, though?\"\n\n\"Much, thank you. I still wish my parents were here of course, but we can't undo the past,\" she replied, planting a soft kiss on his cheek. She hugged him back as she continued, \"I'll just have to help Calara have the best wedding possible, and live vicariously through her instead. I'll get to feel everything she's feeling, and hear her every thought, so it's nearly the same.\"\n\nJohn knew it wasn't, but he admired her positive spin on what must have been a very painful subject for her. Once again, he was impressed by her thoughtfulness for her friends, and her selfless nature made him love her just that little bit more.\n\nAlyssa pouted then, and protested, \"I just freshened myself up! If you keep going like that, I'll start blubbing again!\" She gazed into his eyes for a moment, before adding quietly, \"I can't really deal with you being kind and loving at the moment. Can you be horny, naughty John instead please?\"\n\n\"Alright my sexy little vixen. Let's get through the debrief, then I'll give you and the girls a solid pounding to celebrate. I'll need to see plenty of girl-on-girl action, especially when I stuff you full of cum and have the others eat it out of you...\" he replied, with a salacious grin. He arched an eyebrow as he asked, \"How's that for a plan? Suitably crude enough to change the tone?\"\n\nShe nodded enthusiastically, and her cerulean eyes sparkled with delight as she replied, \"A victory orgy with loads of really fucking hot girls. I like the way you think, Mr Blake!\"\n\n\"I've been corrupted by the best, Miss Marant,\" he replied, while tipping an imaginary hat.\n\nHer laughter was free and unrestrained, and he was delighted to see the shadow of sadness lift from her eyes. Her melodic laughter proved infectious, and the two of them were chuckling together as they left the Ready Room hand-in-hand.\n\nFaye was waiting for them when they arrived, and her face lit up when she saw John and Alyssa looking so happy. She sprang from the Commander's Console, then fluttered down to join them in a shimmer of translucent wings, and said, \"Hi you two! What's so funny?\"\n\n\"I thought you saw everything on the ship?\" John asked her with a puzzled frown.\n\nThe purple sylph nodded hesitantly, then glanced at Alyssa, and replied, \"You looked really sad, so I gave you your privacy. I didn't want to intrude.\"\n\n\"You're a sweetheart. Thank you, Faye,\" Alyssa replied, reaching out to brush her holographic cheek. She'd remembered that the AI had no physical presence, but knew the digital construct would appreciate the gesture of affection.\n\nWhen John saw that Faye was still looking at him expectantly, he smiled at her as he explained, \"It was just an old running joke between us. We were just being silly to lighten the mood.\"\n\nFaye nodded thoughtfully, then brightened as she said, \"All the wounded have disembarked, so we can leave Port Medea whenever you're ready.\" Looking straight at John next, she added, \"You also had a missed call, from a TFNN news reporter, she didn't leave her name, but said she'd try calling back later.\"\n\n\"Let me guess...\" Alyssa said with a playful grin. \"Dusky brown skin, smoky eyes, and a fantastic rack?\"\n\n\"Do you know her?\" Faye asked curiously.\n\n\"Jehanna Elani,\" John said, sharing a smile with Alyssa. He looked thoughtful then as he added, \"I wonder if she wants to set up another interview?\"\n\nAlyssa grimaced and replied, \"Remote calls are rubbish.\" Her tone turned sultry as she continued, \"You should arrange to meet, then she can interview you in the flesh, so to speak.\"\n\nHe chuckled at her blatant innuendo, then said, \"I'll talk to her later. For now, we should get moving.\"\n\nAlyssa nodded, and said, \"Jade brought the Raptor back, so I just need to plot us a course, and we'll be ready to go. We're heading to Underworld next, right John?\"\n\n\"That's right,\" he replied. \"It's well past time to go and rescue Irillith's sister.\"\n\nShe ascended the steps to the Command Podium, then sat in the Executive Officer's chair as she began to plot their flight path. The holographic sector map sprang into view, and John watched as a blue line began to weave through the star systems, displaying her intended course towards the nefarious stronghold known as the Underworld. Their flight path looped around the edge of Maliri Space, through the borders of the Ashanath Collective, across a stretch of Drakkar territory before plunging into the Unclaimed Wastes. The tag against the glowing line showed an estimated arrival time of thirteen days, eight hours.\n\n*You don't need to take a huge detour around Maliri Space,* Edraele suddenly announced with satisfaction. *Alyssa can plot a direct course to the Underworld.*\n\n*I saw the map my Progenitor-side drew up of Maliri Space, and we'll be a long way from Valaden territory if we take that route,* John said cautiously. *We'd be trespassing through House Ghilwen and House Loraleth territory won't we?*\n\n*I'm impressed John, you have a good memory,* she replied, surprised by his accurate recollections of the star systems held by those Maliri Houses. However, Edraele sounded confident as she continued, *I've come to an... accommodation... with the Matriarchs of those Noble Houses. You'll be able to pass through their territory unopposed.*\n\nHe shrugged to himself, and replied, *Sounds good. Thank you Edraele, that'll shave a few days off our travel time.*\n\n*You're quite welcome,* she replied, sounding delighted that she'd been able to help him. \n\nJohn walked up the Command Podium's illuminated steps, and said to Alyssa, \"I've just had an update from Edraele. Apparently we've been given the green light to sail straight through Maliri Space, there's no need for the detour.\"\n\nAlyssa glanced up at him with a frown, and said, \"I thought all the Matriarchs hated each other's guts? We'll be travelling through Ghilwen and Loraleth space if we take that route, and Ghilwen forces tried to ambush us the first time we left Valaden.\"\n\nHe looked at her in surprise, and said, \"I take it you had a good look at those conquest maps too then?\"\n\n\"Of course,\" she replied with a sly wink.\n\n\"Well, Edraele seems convinced it's safe, and I trust her implicitly. Let's take the short cut,\" he said, putting his faith in his Maliri Matriarch.\n\nAlyssa bowed her head obediently, and said with a teasing edge, \"Whatever my Progenitor Lord decrees.\"\n\nShe adjusted the flight path so that they were now ploughing directly through Maliri Space. The new course took them a long way from the safety of House Valaden territory, and through the completely unknown systems belonging to two other Maliri Houses. When she'd finished making the correction, the new flight time was listed as ten days, two hours. \n\n\"Irillith should be pleased,\" John noted with satisfaction. \"She was an invaluable help in the Dragon March, so It'll be nice helping her rescue Tashana that little bit faster.\"\n\nAlyssa looked up at him, and said innocently, \"Yes, it'll be lovely to see them reunited. I can see why you're looking forward to helping Irillith rescue her -twin- sister...\"\n\nJohn saw the twitch of a mischievous smile on her lips, and he laughed as he said, \"Come on you, that's quite enough sullying of my motives.\"\n\n\"I can take us out of here if you'd like?\" Faye offered as she skipped up the steps to join them.\n\n\"Really? You know how to do that?\" John asked her in surprise.\n\nThe purple construct nodded enthusiastically, and replied, \"Absolutely! I've been studying the Invictus' flight characteristics so I could help out if you needed me to.\"\n\nAlyssa smiled at her, and said, \"The helm is yours, Trainee Pilot Faye. Show us what you can do.\"\n\nThey watched as Faye contacted the Port Medea traffic controller, who finally granted her permission to depart after he'd got over his initial surprise at seeing the cute purple girl in command of the Invictus. She took great care as she eased the assault cruiser off the deck of the docking bay with the light touch of retro-thrusters, and once they were clear of the starport, Faye rotated the Invictus until they were pointing towards the Nav Beacon. It was a textbook example of a precise takeoff and departure, and she drifted away from Port Medea while being careful to stay under port speed.\n\n\"Very nice,\" John said with an approving nod. \"What do you think, XO?\"\n\n\"You did a great job, Faye, well done!\" Alyssa gushed, smiling at the petite digital girl.\n\nFaye clapped her hands together in glee, her gossamer wings a blur as she lifted lightly off the ground with her happiness. At least one of her avatars was still paying attention though, as they arrived at the Nav Beacon after a couple of minutes, and were immediately surrounded in tachyon particles before jumping to hyper-warp.\n\nBefore they could pass further comment, the door to the Briefing Room swished open, and Dana walked through. She had her hands on her hour-glass hips, and she said impatiently, \"Hurry up you two! You're taking ages, and Irillith won't tell me anything about the new tech she's swiped!\"\n\n\"I didn't steal it, I requisitioned it!\" Irillith called out from behind her.\n\nJohn and Alyssa joined the others in their laughter as they walked down the ramp, then followed Dana back into the room. Everyone was gathered there already, sitting in their familiar places, and John pulled out the chair at his right side for Alyssa to sit down. She gave him a grateful smile as she took her seat, and he squeezed her shoulder before he moved to sit at his place at the head of the table. \n\nSakura was waiting for him, standing beside his chair, and when he sat down he held out his arms for her to sit across his lap. She'd changed back into one of his shirts now, and the white material clung to her rounded tummy.\n\n\"How was lunch?\" he asked her as he stroked the taut sphere, drawing a contented sigh from the Asian beauty.\n\nHe saw her eyes flash to Calara, and the two exchanged coy smiles before Sakura replied, \"Jade was right. The food was delicious, and the service was exemplary.\" She glanced around at the other girls, and said, \"There's plenty of other Terran dishes I'd like to sample, and I've heard Maliri and Lenarran are to die for.\" \n\n\"We'll have to see what we can arrange,\" he replied with a grin, accompanied by titters of excited laughter from the girls. \n\nDana had skipped over to her seat, and was now fidgeting as she waited, looking at John expectantly. \"Alyssa said you're going to fuck us all later, can we save the flirting till then?\" she asked, trying to hurry up proceedings.\n\nHe rolled his eyes, and replied, \"Can't a guy just enjoy some lewd banter with his girls for a moment?\"\n\nShe shook her head, and looked pained as she replied, \"I've been really good, but I don't think I can wait much longer!\"\n\n\"Alright, you have been very patient,\" he agreed.\n\nDana's sky-blue eyes shone with excitement as she spun in her seat to look at Irillith, and exclaimed, \"You can start now!\"\n\nJohn glanced at Faye sitting cross-legged at the end of the long desk, and he held up a hand to Irillith gesturing wait for a moment longer. This drew a groan of frustration from the redhead. \n\nHe smiled at the purple sylph with some amusement, and said, \"I think you're big enough to warrant your own seat now, if you want it?\"\n\nShe gave him a winsome grin, and replied, \"I quite like being up here, as long as you don't mind?\"\n\n\"That can be your spot then,\" he replied kindly. Turning back to look at the girls, he said, \"Irillith can reveal what she found out in a few minutes, I just wanted to cover a few other things first.\"\n\nDana grinned at him, as she replied, \"Yeah, we know; everyone was awesome!\"\n\nAll the girls laughed at that, getting used to receiving one of John's proud victory speeches after a big battle. He chuckled too, and said, \"It looks like I'm getting a bit predictable.\"\n\nJade nodded, then smiled as she said, \"I don't mind it one bit.\"\n\nThere were murmurs of agreement, so John smiled as he said, \"Sparks is right, all of you did a phenomenal job. We saved hundreds of thousands of Terran lives with our actions today, and we probably helped bring a quick end to this war, saving millions of lives on both sides in the process. The Terran forces took a beating, but the Kintark lost so many ships, they're bound to try and broker a peace treaty.\"\n\n\"Losing over two hundred cruiser-class or larger vessels is a massive loss to the Kintark,\" Calara agreed. \"If the Terran Federation had suffered such a catastrophic defeat, they'd have to seriously consider surrendering, what with the attrition they've already suffered in the Dragon March.\"\n\nJohn nodded, and said, \"The Kintark fared better in the lead up to the Battle of Regulus, but that was a hell of a defeat.\" He looked around at each of them, and continued, \"I won't go over everything you each did during and after the battle, but you continue to amaze me. Well done, girls, well done indeed.\"",
        "There was a chorus of happy sighs and beaming smiles at his warm praise, and they looked delighted by his impromptu speech. \n\n\"Yeah, that never gets old,\" Dana said as she gazed at him with a dreamy expression.\n\nSakura looked a bit forlorn, knowing full-well that she'd slept through the entire battle and hadn't been able to contribute anything. Alyssa felt her disappointment over their empathic bond, and she glanced at her and said telepathically, *You'll get your time to shine, don't worry.*\n\nThe Asian girl nodded, then gave her an appreciative smile for her kind words.\n\nAlyssa turned to look at John next, and arched an eyebrow as she said, \"You weren't too bad yourself, with your little Nova Lance intimidation stunt. I'm amazed that worked.\"\n\nCalara looked relieved as she said, \"If it hadn't we'd have been in big trouble. Caught between the traitors and that Kintark fleet, the Damocles and the rest of my dad's battle group wouldn't have stood a chance.\" \n\nJohn grimaced as he said, \"Yeah, but I wish the Progenitor hadn't seen that. He must have watched the whole battle, starting with Calara cutting the Kintark strike craft to pieces, right up to one-shotting that battleship.\"\n\n\"I can't believe he'd just vaporise Gabrielle Lynton like that,\" Rachel said quietly. \"I know Edraele said that Progenitors don't care about their thralls, but that was awful!\"\n\nCalara looked grim as she said, \"Not only that, but the power spike when the black ship opened fire was frightening. It was total overkill against Lynton's shuttle, but I dread to think just how much damage a beam like that would do to a big ship like the Invictus.\"\n\n\"Shit! That power spike!\" Dana blurted out, her eyes going wide. \"I forgot in all the excitement, but we -did- see what that kind of beam can do! The Progenitor must have fucked up Santini's dreadnought! I saw exactly the same kind of off-the-scale energy surge just before the Sword of Sif lost its shields!\"\n\n\"The same kind of power as a Nova Lance?\" John asked, looking worried.\n\nCalara nodded, and replied grimly, \"At least. The shield banks on a dreadnought are much more powerful that a battleships, but if Dana's right, the Progenitor knocked them out in a single shot. Not only that, but they still had enough power to destroy the Sif's Singularity drivers as well.\"\n\nAt the mention of those fearsome weapons, the acquisitive gleam had returned to Dana's eyes, and she pleaded, \"Come on! I've been good, put me out of my misery, please!\"\n\nJohn chuckled, and glancing at Irillith, he said, \"I think we've made her wait long enough. So what did you discover aboard the Thor?\"\n\nIrillith rose from her seat, then walked over to retrieve the remote for the holographic projector. She paused when Faye said brightly, \"Hey, I can do that for you!\"\n\nThe projector sprang to life, then quickly coalesced into the first of the schematics that Irillith had acquired while foraging around the Thor. This clearly wasn't the blueprints for the singularity drivers, but proved just as interesting, as the full technical readout of the dreadnought class vessel began to rotate above the desk.\n\nBoth Dana and Calara leaned forward, studying it in fascination. \n\n\"Wow, they've built five monster power cores into that bad boy!\" Dana blurted out, as she examined the vast amount of power relays supplying energy to the massive spacecraft.\n\n\"I'm not surprised, just look how many weapon batteries they've built into that ship,\" Calara remarked, pointing with a slender finger at the bristling topdeck. \"Beam Lasers, Heavy Cannons, Laser Cannons, Gauss Cannons, Missiles, the firepower the dreadnoughts can bring to bear is incredible.\"\n\n\"Why didn't they use all that in the battle?\" Jade asked, her brow furrowed in confusion. \"They just seemed to hang back and use the Singularity drivers.\"\n\n\"They were acting as command vessels,\" Calara explained distractedly, as she continued studying the schematics. She was looking at them with a more critical eye now, and with an altogether darker purpose, as she searched for vulnerabilities in the dreadnought's design.\n\nStill looking confused, Jade asked, \"Couldn't they command, as well as hit the Kintark with all those guns?\"\n\nCalara tore her eyes away from the slowly rotating image, and then gave Jade her full attention as she replied, \"The Singularity drivers have double the range of Beam Lasers or Plasma Cannons, so they could sit back and pick off exposed ships, without exposing themselves to return fire. If things had turned really nasty they would have engaged fully, but a ship that big with so many guns would have drawn a huge amount of incoming firepower. \n\nA command vessel shouldn't be intentionally putting themselves in that position unless in a dire emergency, as the impact to the battlegroup as a whole if they'd been destroyed would have been disastrous. You probably saw how ineffective Santini's and Lynton's battlegroups were, until we stepped in and took control.\"\n\n\"Until -you- did,\" John said proudly.\n\nShe gave him a slight smile in acknowledgement, but seemed unwilling to want to steal the limelight from the other girls. Instead, she glanced at the slowly turning image of the dreadnought, and said, \"The Terran Federation lost two of these behemoths in a couple of days. I think you're right about them wanting to seek a peace deal, or at least a truce to consolidate their losses.\"\n\n\"Two?\", Jade asked curiously. \"Only the Sword of Sif was destroyed.\"\n\n\"Admiral Norwood defected and took his dreadnought over to the Kintark,\" Calara reminded her. She glanced at Irillith then, and said, \"Handing over the Thor to the Terran Federation will make a huge difference. They've still got three dreadnoughts and the Zeus, but losing another would have been a crippling blow.\"\n\nJohn grunted as he said, \"The Admiralty weren't particularly appreciative when I spoke to them, they were more interested in trying to get the tech from the Invictus. I'm sure they'll come round, when they take a minute to think about what we did for them.\"\n\nRachel looked at him with concern, and asked, \"Should we be concerned about how they'll react? Will they make a move against my father to try and coerce you into handing over technology?\"\n\nAlyssa smiled as she interjected, \"No, I don't think you or Calara have anything to worry about on that front. John gave them a good talking to about it.\"\n\nBoth girls murmured a quiet but grateful thank you to him, and he smiled as he said, \"Actually Jack had some very interesting things to say about that. It seems our growing reputation would make it extremely difficult for the Admiralty to try anything against us. We should still keep our guard up, but I think we should be safe from any attempts to take the Invictus from us by force.\"\n\nIrillith frowned as she added, \"I'll have to work on improving our digital network to make it completely impervious to Terran intrusion. I doubt they'd be able to try anything, as we've already upgraded our defences significantly, but we can always do more.\"\n\n\"I've come up with a bunch of ideas for that!\" Faye chipped in. She smiled at Sakura as she continued, \"Plus I thought of a few ways we could prevent unwanted intruders!\"\n\n\"We'll have to get together to talk about it,\" Sakura said, nodding enthusiastically.\n\n\"We've got a bit of a journey ahead of us, so there'll be plenty of time for training and upgrades,\" John said, looking around the table at the girls. \n\nEach beautiful woman looked thoughtful, as they mused over various research projects and training that they'd had to put on hold with all the recent fighting. He had plenty to keep himself busy too, and he was eager to start training Sakura, as well as practice his own growing abilities.\n\nDana cleared her throat, and said, \"Yeah, I've got a shitload of stuff I need to do. Anyway, let's see the new guns!\"\n\nIrillith glanced at Faye, and the purple sylph blinked her eyes, changing the holographic image before them. The dreadnought faded from view, only to be replaced by what looked like a huge, heavy calibre cannon, which they all recognised from the Terran ships they'd seen in action.\n\n\"I found the schematics for the Terran Heavy Cannons,\" Irillith explained, when she saw Dana's momentary look of confusion. \"They aren't much use for us as they are, but you might be able to adapt the design somehow.\"\n\nDana nodded, but she had a resigned expression on her face as she said, \"Yeah, I could buff the everloving crap out of them, definitely enough to make them useful, but our problem is weapon hardpoints. There's a limit to how many guns I can slap on the Invictus.\"\n\nThe Maliri girl nodded, and replied, \"I understand, but I'd be letting you down if I didn't 'requisition' everything I could get my hands on.\" She smiled as she waved her slender blue fingers in the air.\n\n\"Good policy,\" Alyssa agreed with a grin. \"Steal everything that isn't nailed down, right John?\"\n\nHe arched an eyebrow at her, and replied, \"I wouldn't have phrased it quite like that, but we more than earned it. Besides, the more powerful we become, the better chance we have of stopping the Progenitor, which helps the Terran Federation in the long run.\"\n\n\"I was thinking about that actually,\" Calara said soberly. \n\nJohn glanced at her, and asked, \"What's on your mind?\"\n\n\"Let's go through the rest of the tech, and we can discuss it afterwards,\" she said, meeting his curious gaze for a moment. He could see the look of worry in her eyes, which left him with a sense of foreboding.\n\nTurning to look at Irillith, he said, \"Go ahead, honey. Did you find anything else?\"\n\nShe smiled at him, then nodded as she gestured to Faye. The image changed once again, to a much smaller weapon about the size of a Terran Laser Cannon, the scale on the holograph revealing it to be ten metres long.\n\n\"Oh, cool! Gauss Cannons,\" Dana remarked, studying them with interest.\n\n\"Anything useful there?\" Irillith asked with a hopeful smile.\n\nThe redhead nodded, a look of razor-sharp focus on her face as her eyes darted back and forth over the weapon schematic. She seemed totally absorbed in her analysis, but her voice was clear as she replied, \"It's a similar idea to the railguns I built, using magnetic fields to accelerate a projectile towards a target, but the application is a little different. The Punisher railguns use a magnetic rail, like the Mass Drivers I based them on. A gauss weapon uses electromagnetic coils along the barrel that are activated in sequence to accelerate an object along its length. The Terran Federation design is a bit limited, but the ideas behind it are interesting.\"\n\nFaye waited until Dana glanced away, giving her an eager smile of anticipation. \"Yeah, we've teased her long enough,\" Irillith said to the helpful AI when she looked her way for permission to proceed.\n\nThe Gauss Cannon schematics faded away to be replaced by those for the Singularity Driver. It was a massive weapon, measuring nearly half a kilometre in length, and requiring the vast bulk of the Dreadnought they were mounted on to absorb the tremendous recoil. Dana squealed with excitement, then half stood from her seat so she could take a closer look. Her eyes flashed back and forth, almost seeming to glow in the reflected light of the hologram as she committed it to memory. She sat back down then with a happy sigh, closing her eyes as she pictured it in her mind, and examined every facet of the design.\n\n\"Now this is fucking awesome!\" she exclaimed, a look of delight on her face.\n\nJohn glanced at Calara, leaving Dana to enjoy herself for the moment, and asked, \"What do you make of the Singularity Drivers, Commander?\"\n\nShe smiled at him, then replied, \"A direct upgrade to the Mass Drivers, Rear Admiral. Essentially the Singularity Drivers are a rapid firing, longer range, more potent improvement.\" Her smile faded though, as she added, \"Unfortunately they're nearly as big as the Invictus, at just under five-hundred-metres in length. The Mass Drivers are 'only' two-hundred-metres long, so if we didn't have Dana, I'd tell you they were impossible to fit on our ship.\"\n\nEveryone turned to look at the redhead, who had a slight frown on her face as she mumbled, \"Yeah, I'll have to give this some thought.\" Dana opened her eyes, then looked at John as she continued, \"Even if I can miniaturise the tech enough to make use of the Mass Drivers' hard points, we'll be stuck in drydock for several weeks. The Invictus is built around those guns, and stripping them out and replacing them would be a right bitch!\"\n\nHe nodded, and replied, \"Alright, we'll just have to see if we can fit the time in somewhere. I'm planning on returning to Valaden with Tashana, then staying for a few weeks anyway, as we have to upgrade the Power Core and Tachyon Drive. We can always extend our stay if we need more time.\"\n\n\"I'll try and have something figured out for you by then,\" she said, with a confident grin on her face.\n\nJohn looked at Irillith and said, \"Excellent work acquiring those blueprints, you showed great initiative finding them. I'm not sure the Admiralty would've been quite so keen to hand them over.\"\n\n\"Well, they can go fuck themselves,\" Alyssa said, her eyes narrowing with annoyance. \"We bailed them out of deep shit, and the way they spoke to you was totally out of line. It's a good job you're the one in charge, not me!\"\n\nHe could feel the anger over their bond, and he guessed that she wasn't just seething about the way they'd spoken to him, but also by the veiled threats they'd made towards Calara and her family. Her fierce, passionate expression was strangely exciting, and he was reminded by that old adage about anger and arousal being closely linked.\n\n*You look beautiful when you're angry,* he told her, meeting her intense gaze.\n\nIt was like a switch had been flipped in Alyssa, and her expression abruptly changed to one of lust. Her bright blue eyes sparkled with excitement, and he could feel how turned on she was as she said, *We need to wrap this up!* \n\n*Soon, beautiful, soon,* he said to her in a soothing voice, and she nodded slightly, giving him a smouldering look.\n\nTurning to look at Calara next, he asked, \"You wanted to discuss fighting the Progenitor?\"\n\nThe Latina nodded, and leaning back in her chair, she replied, \"I've been thinking about the Progenitor, his ship, and the Drakkar. Or more specifically, him giving them the Onyxium armour plating.\"\n\nJohn remembered those black armour clad Drakkar ships well, and how close the battles they'd fought with them had been. He looked at her questioningly, and asked, \"Alright, you've got my undivided attention. What's on your mind?\"\n\nShe turned in her chair, watching the stars of the Terran Federation drifting by as they raced through hyper-warp. Not meeting his gaze, she said, \"You consider the Terran Federation an ally don't you?\"\n\nHe nodded as he replied, \"They're probably the closest allies we have at the moment, except for Edraele's House Valaden forces, although I'm not sure how a Maliri fleet would feel about aiding us. I'm not sure how much we can trust the Ashanath to help us in a sticky fight.\"\n\n*You won't have a problem with regard to my forces,* Edraele told him. Her tone was regretful rather than proud when she added, *They know better than to even think about disobeying an order from Edraele Valaden.*\n\nCalara was oblivious to his telepathic conversation with the Maliri Matriarch, so she continued speaking as she stared out of the window, \"As close an ally as the Terran Federation are, you're still reluctant to give them access to any tech.\" \n\n\"We've been over this, honey,\" he said in a gentle voice. \"As much as I'd like to help them out, I'm worried they might still be a threat to us. At the very least from other easily corrupted traitors like Lynton.\"\n\nShe spun the chair around to look at him again, and smiled as she said, \"It's okay, I understand. That's not the point I'm making.\" Staring into his eyes, she continued, \"Now, remember how you feel about sharing your tech, and then think about this Progenitor giving the reflective armour to the Drakkar...\"\n\nJohn's eyes widened as he saw where she was going with this line of reasoning, and said, \"He only gave them a poor imitation of the tech he has available!\"\n\nCalara nodded, and replied, \"We have to work on the assumption his ship is immune to laser fire.\"\n\n\"Fuck!\" Dana blurted out.\n\n\"Yes, exactly,\" Calara said, glancing her way. \"The Invictus has gone through a huge firepower upgrade recently, but it's ALL laser based weaponry. If we got in a fight with the Progenitor, we might be able to strip off his shields, but we'd only have the Mass Drivers to actually hurt him.\"\n\nDana gave Irillith a grateful smile, and said, \"The Heavy Cannon and Gauss Cannon schematics might be a lot more useful than I thought. I'll have a good look at improving them too.\"\n\n\"It looks like we'd best try and avoid any direct confrontations with the Progenitor until we know what we're up against and can develop some effective counters,\" John mused thoughtfully. He looked around at the sober faces around the table, and with a wry smile he added, \"On that happy note, does anyone else have anything they want to discuss?\"\n\nRachel made eye contact with him, and replied, \"I gave the formula for the stem cell inhalant I developed to Commodore Hochberg, as well as the formula for the skin regeneration enzyme. I realise we could have sold them for a huge profit to one of the pharmaceutical companies though, so I hope that was okay?\"\n\nHe smiled at her as he stared into her apprehensive grey eyes, and said, \"Don't worry, you made exactly the right call. Those people needed that treatment immediately, and besides, it's not like we need the money. You helped a lot of people today, Doctor, I hope you know how proud of you I am.\"\n\nShe looked relieved, and smiled at him happily as she basked in his praise. Dana nudged her with a playful elbow, and the two shared a warm grin.\n\nJohn looked around at each of the girls, and seeing that no one else wanted to raise anything, he said, \"I think that about wraps it up, and I'd like to suggest an evening of celebrating in bed. Any takers?\"\n\nThe girls all stood immediately, and began moving towards the door, giving him lusty glances as they did so. He helped Sakura off his chair, her stomach nearly flat again as her body fed hungrily off the rich meal she'd enjoyed at lunchtime. \n\nAlyssa took her hand, and having read his mind, she purred, \"We'll get started without you.\"\n\nJohn turned his chair to look for Calara, who was standing waiting for him on his left, having been forewarned by the telepathic blonde. She smiled as she asked, \"You wanted to talk to me?\"\n\nHe rose from his chair, and walked over to take her hand. The door to the Briefing Room slid quietly closed a moment after Alyssa and Sakura walked through, leaving John alone with the gorgeous Latina.\n\n\"Yes, I wanted to be honest with you about something,\" he said, his voice troubled.\n\nShe froze in alarm, and asked, \"What's the matter? Is it something to do with my family?!\"\n\nHe shook his head, and replied, \"It's nothing like that, don't worry.\"\n\nCalara relaxed straight away, trusting him implicitly, but she looked curious as she asked, \"What is it then?\"\n\nHe leaned back against the desk, pulling her with him, and said, \"You know I spoke to the Admiralty?\" When she nodded, he continued, \"Before I talked to them, I had a disturbing chat with Edraele. She warned me that they might be very interested in your gunnery skills, and even more so in your tactical command of the Terran fleet against the Kintark. Just as she predicted, Admiral Weber started asking me who was commanding those ships, and wanting to 'debrief' you.\"\n\n\"What did you say?\" she asked him, her dark brown eyes big and round as she stared up at him.",
        "He gave her a guilty look as he replied, \"I told them I was in command.\" He hurriedly added, \"I wasn't trying to steal your accolades or anything like that, I was worried they'd start taking an even greater interest in you.\" Pausing then, he said, \"Wait, that didn't come out right...\"\n\nCalara gave him an affectionate smile as she stood up on tiptoe and silenced him with a kiss. He enjoyed her soft lips moving against his, her tongue coaxing his into her hot little mouth. She left him breathless when they finally parted, and she had a tender expression on her face as she said, \"You were worried about my family, and that Terran High Command might try to use them to compromise my loyalty to you. I'd then be left in a terrible position being forced to choose between you both.\"\n\nHe chuckled with relief as he saw she understood, and nodded as he replied, \"Yes, that's it exactly.\"\n\nShe gazed lovingly into his eyes, and her tone was solemn as she said, \"That battle was the pinnacle of my career, but seeing the admiration and respect from you and my father was all the reward I needed.\" She sighed happily as she continued, \"You don't know how much I dreamed of doing something that my father would be truly proud of, and besides today's battle, we saved Terra from destruction.\"\n\n\"He mentioned that when I spoke to him,\" John said with a wry smile. \"He said that after everything we've done, if the Admiralty ordered him to attack me, he'd tell them to go fuck themselves. That's not even including the fact that I'll soon be his son-in-law.\"\n\nCalara giggled at that, shaking her head in amazement. When she looked at him again, she also had a wry smile on her face, but for quite different reasons. \"You warned me this moment might come,\" she said quietly.\n\n\"What moment's that?\" he asked her, intrigued.\n\n\"When I might have to choose between you and the Terran Federation. It's nice that I get to make the choice though, and I'm not being forced into it by circumstance,\" she said, her tone earnest.\n\n\"And do I have to start looking for a new Tactical Officer, Commander?\" he asked her with a teasing grin.\n\nShe shook her head vehemently, and her brown eyes burned with a fiery intensity as she replied, \"I'm with you all the way, Rear Admiral.\"\n\nHe pulled her into a tight embrace, and they kissed passionately, Calara moaning with arousal as she wrapped herself around him. John was half-tempted to just take her right there on the desk, and by the look of burning lust she gave him, he knew she'd be a extremely willing participant. In an act of herculean willpower he managed to restrain himself, and when he pulled away from her, he panted, \"To the bedroom, Commander. Your mission is to get the other girls as turned on as you are now.\"\n\n\"You're a dead man...\" she promised him, biting his lower lip, and tugging gently.\n\nShe peeled herself off him, then prowled from the room, giving him a sultry look as she departed. \n\nFaye popped into existence a moment later, and she looked at him in fascination as she asked, \"John, would you mind if I asked you a personal question? I'm trying to understand human sexuality, and it would really help!\"\n\nHe smiled at her as he got his breathing under control, and replied, \"Sure, go ahead.\"\n\n\"Why didn't you, and please pardon the vernacular... -fuck the hell out of her?-\" she asked him politely. When he doubled over in laughter, she frowned, and said, \"Sorry, did I use the expression incorrectly? It was something I overhead Dana say a while ago.\"\n\nHe grinned as he replied, \"It's a good question, and don't worry, you used the expression correctly.\" He thought it over for a moment, then continued, \"Firstly, the anticipation will drive her even wilder, which should be even more fun. Secondly, she'll turn all the other girls on when she tells them how I nearly bent her over the Briefing Room table. Then finally, I actually have a call to make before I go and join them. It's important to do this now, and I'm bound to forget if I spend all evening in bed.\"\n\nFaye nodded thoughtfully, and her expression brightened as she exclaimed, \"Ah, the reporter with the 'fantastic rack'?\"\n\n\"Clever girl, got it in one,\" he replied with a smile, as he strolled over to the door, and out onto the Bridge. \n\nThe door to his Ready Room was already open, and he caught the flash of a bronzed calf disappearing inside. He glanced at Faye, who gave him a mischievous grin, obviously knowing who this nude interloper was. She zipped her lips closed with a purple finger, then fluttered up to the Command Podium as she waved him goodbye. When John strolled into his Ready Room, there was no one in sight, but he did spot a plate with a thick sandwich and a chilled beer sitting on his desk.\n\n*You need to keep your strength up,* Alyssa purred to him. Her crooning voice trembled then as she lost concentration, and she blurted out, *What did you do to Calara?! Oh my God!*\n\nHe did his best to tune out her cries of pleasure as he took a delicious swig of his chilled beer, feeling the icy cold liquid slide down his throat. Taking a big bite of the ploughman's sandwich next, he walked around the desk and slumped in his chair with a happy sigh.\n\n\"Zzzzip\" went his trousers, as deft hands pulled down the zip.\n\nHe jumped in surprise, and heard a delighted giggle from under the desk. When he peered below, he caught a flash of dark red hair, instantly giving away the identity of the mystery girl. \n\n\"I thought I was in heaven with the beer and a sandwich!\" he exclaimed, catching the hint of gold in the blue eyes staring up at him.\n\nDana grinned at him as she said, \"I thought it might be fun to blow you as you had your lunch.\"\n\nJohn helped her pull off his trousers, and he groaned with delight as the redhead wasted no time in opening wide, and letting him slip down her throat. He drank some more of his beer as he stroked her lustrous hair with his free hand, and he could see the sparkle of amusement in her eyes as she glided up and down his length.\n\n\"Is it wrong that this feels so fucking amazing?\" he asked Dana as he put down his beer, and took another big bite of his sandwich.\n\n*Dana says, 'It's just what a slutty secretary is there for', and she's hoping that you'll be giving her a nice big lunch,* Alyssa managed to tell him, although he could tell she was greatly distracted by whatever Calara was doing to her.\n\n\"Sorry, sexy, you'll have to share lunch with your sisters,\" John apologised as he brushed a few stray locks from her eyes. He gave her a wicked grin as he added, \"But this is hot as hell. When it's just you getting topped up for two weeks, we'll definitely have to meet for lunch like this every chance we get!\"\n\nShe did her best to nod, and started sucking him eagerly to show him how much she liked the idea. He could have easily let her milk him dry, but he reminded himself he needed to do his bit for the propaganda war. \n\nQuickly finishing off his beer and sandwich he looked down at the girl bobbing his lap, and said, \"Lunch was amazing, but I need to call that TFNN reporter now. Are you going back to join the others?\" \n\nDana slowly shook her head, locking eyes with him as she swirled her tongue under the base of his shaft. \n\nHe chuckled, and asked her, \"You want to blow me while I speak to Jehanna? OK, but not a peep, alright?\"\n\nThe redhead tried to laugh, but it was tricky with her throat stretched wide open. She contented herself with sliding up and down his shaft, swallowing to massage him when he was buried up to the balls in her mouth.\n\nJohn took a deep breath to help him try and keep up an image of calm, professional composure. He tapped the console on his desk, then brought up the comms interface, which listed all the names he'd recorded in his personal contacts list. Cycling through to the J's, he found Jehanna Elani, and then swiped his finger across to speak with her. He only had to wait about ten second for her to reply, and she looked deliriously happy when her holographic image appeared in front of him. \n\n\"Oh, thank you for calling me back!\" she gasped, her dark-brown eyes flashing with excitement, as she flicked her black hair away from her face. \"When Admiral Devereux told me what you did, I had to call you immediately!\" Her pleasant presenter's voice dropped a few octaves and throbbed with gratitude as she added, \"I was at TFNN Central on Terra when that AI ship attacked the moon... You saved my life!\"\n\n\"Now I'm even happier we managed to stop it in time,\" John replied, giving her a warm smile, before inexplicably closing his eyes for a brief moment. \n\nJehanna hesitated a moment, then blurted out, \"I was hoping we could meet in person for an interview? Let the viewers find out more about the real you... the man behind the legend!\"\n\nAlyssa let out a lusty groan, but managed to keep herself under control enough to tell him, *Sparks says, 'That reporter's practically begging for it!'.* He could hear how excited she was as she added, *Just imagine if it was Jehanna blowing you instead, with me getting her nice and wet for your huge cock!* Her voice trailed off as some unknown girl brought her off to a mind-melting climax.\n\nHe did his best to try and block out Alyssa's raucous cries of pleasure, and gave Jehanna an apologetic smile as he replied, \"I'd be more than happy to do that, but I'm leaving Terran Space for a few weeks.\" He cleared his throat to mask a happy sigh, then continued, \"How about a rain check? I promise I won't talk to any other reporters, so it'll be another Jehanna Elani exclusive.\"\n\nShe beamed at him in delight, her disappointment that he'd delayed their meeting more than tempered by John agreeing to her request. The fact that he'd promised to give her another exclusive was the delicious icing on a mouth-watering cake.\n\n\"That would be incredible! I'd love that! Er, I mean my viewers would love that!\" the dusky-skinned beauty gushed, looking positively giddy with excitement.\n\nDana sucked harder, and he could hear her stifling her laughter. His balls were tingling with the redheads focused attention, and it was getting harder not to just give her exactly what she wanted.\n\n\"Sorry, I'm making you wait. I can make it up to you though,\" he managed to say with an easy-going smile, finding it increasingly difficult to keep his composure. \"I can give you the scoop on a massive fleet battle in the Regulus system. It was a huge victory for the Terran Federation.\"\n\n\"Were you there?!\" she asked him in astonishment.\n\nHe managed to look modest as he replied, \"The girls and I might have played a part in it, yes.\"\n\n\"Tell me everything!\" Jehanna pleaded, her lips parting slightly as she waited with breathless anticipation.\n\nAs Dana slurped hungrily on his shaft, John knew he'd made a terrible mistake agreeing to let her tease him like this. He did his best to be stoic as he met Jehanna's eager stare, and taking a deep breath, he said, \"It all started when we broke out six hundred prisoners from the Xen-Nuchek mines...\" \n\n***\n\nAlyssa gently pushed Irillith away from between her thighs, and gasped, \"I can't cum any more, let me get my breath back, please!\"\n\nThe Maliri girl had taken over from Calara, who was now busy ravaging Rachel, and she crawled up the bed with a look of satisfaction on her azure face. \"I'm glad you enjoyed that. I owed you for helping me get past my little... phobia,\" she said, with a sparkle in her angular violet eyes. \n\n\"Oh, that was my pleasure, literally!\" Alyssa panted, while grinning at the beautiful exotic woman. \"Feeling you cum your brains out with John's cock buried up your ass was reward enough.\"\n\nLying back on the bed, Irillith smiled at her fondly and opened her arms as she said, \"Come here for a cuddle.\"\n\nAlyssa gratefully let Irillith take the lead, and snuggled in against her, nuzzling up against her big firm breasts. She trailed her fingers over the Maliri's smooth blue flesh, enjoying the lovely contrast between their skin colours. She sought out a dark-blue nipple, and began to gently caress it, causing the sensitive area to stiffen as it reacted to her touch.\n\n\"Mmm, that feels wonderful,\" Irillith murmured, brushing her hands through Alyssa's hair.\n\nThe blonde Matriarch took the other dark blue nipple in her mouth, and began to suckle lazily, enjoying hearing the little intake's of breath from her lover, as Irillith responded to her loving attention. The ravishing Maliri girl's spirits had lifted tremendously, now that their business in the Dragon March was done, and they were finally on a mission to rescue her sister. As much as Alyssa teased and tormented John about reuniting the twins, she dearly wished that they'd be able to find and rescue Tashana. She could feel how much this meant to Irillith, and she hoped with all her heart that this ended well.\n\nRelaxed now, and having recovered her breath again, she listened in delight to John and Dana, as he fucked the redhead senseless over his desk. She'd teased and tormented him for half an hour, while he'd struggled to give the interview to Jehanna. Somehow he'd been able to stay coherent throughout, but the moment the call ended, he'd hauled Dana out from under the desk, bent her over it and rammed her pussy full of cock. \n\n*Nggh! Fuck me harder you big cocked stud!* Dana grunted, as he repeatedly pounded her womb.\n\nAlyssa grinned as she got nothing coherent out of John. Her poor man had been driven into a frenzy by Dana's lashing tongue, and was now focused entirely on pumping every ounce of cum from his blue balls into the beautiful girl beneath him. She sensed that the redhead was hanging on for dear life as John pounded into her rounded cheeks, his cock moving in a blur into her plundered pussy. The two of them suddenly came at the same time, flooding her empathic bonds with pleasure. \n\nGlancing across the bed, she watched Rachel and Calara lapping away at each other hungrily, both brunettes intent on bringing the other off. Rachel was on top, grinding away at Calara's face while the Latina fucked her with her tongue. One of the advantages of sharing the same stunningly athletic physique, was that they all knew each other's body just like their own. It meant that working together in a sixty-nine became a quickly escalating crescendo of pleasure, as they just copied whatever felt good from their eager lover. Alyssa felt both girls reach their peak, and shivered as she shared the delicious sensations she was receiving from each of them.\n\nJade was intertwined with Sakura, both girls writhing with a sensual rhythm. Jade was instructing the receptive Asian girl on the finer arts of Sapphic erotica, and Sakura turned out to be a very willing pupil. Their undulating pace kicked up a gear, as both of them enjoyed the ascending waves of ecstasy they were coaxing from their partner. Just like Rachel and Calara, the Nymph and her prot\u00e9g\u00e9 simply copied each other, as they used slippery fingers and hot tongues to draw a spectacular orgasm from their lover.\n\nClosing her eyes for a moment, she tasted their ecstasy like a connoisseur. It was always an incredible sensation to share the feelings of the girls she cared about, and as she crested the waves of pleasure, Alyssa examined the metaphysical portrait of each girl in her mind. The results were fascinating to see, and she reminded herself to discuss it with John when he was coherent again, preferably during a roughly domineering XO catch-up meeting. Her body tingled with lust at the thought, and she released Irillith's nipple from her mouth with a loud pop.\n\n\"Ready for another round?\" she purred, as she let her hands trail lower over the Maliri's blue tummy. \"As much fun as it was watching you go down on me, I want a taste of that azure pussy!\"\n\nIrillith smirked at her, and nodded as she replied, \"Who's on top?\"\n\nAlyssa didn't get a chance to answer, as John strolled into the bedroom with an unconscious Dana cradled protectively in his arms. Both were completely nude, and he walked straight over to the bed, then carefully placed the redhead on the covers. Her belly was hugely swollen, packed full of the gigantic load she'd coaxed his quad to prepare.\n\n\"Sorry I'm late,\" he apologised with a smile, his eyes darting over the magnificent bounty of nubile flesh on display. Then he grinned as he added, \"To make up for it, I brought lunch!\"\n\nThe girls sat up, flushed and excited after their extended foreplay. Rachel and Calara parted Dana's toned thighs, while Jade guided Sakura over to let her eat first. The Asian girl disappeared from sight behind Dana's enormously rounded tummy, and the debauched sounds of her hungrily sucking out cum filled Alyssa's ears. \n\nJohn nodded with satisfaction, as he said, \"You'll all need the top-up. We'll be spending the rest of the day in bed, and I want you to have lots of energy.\"\n\nAlyssa felt a delightful thrill run down her spine as he took control, and he could see the other girls all looking equally excited. She watched him as he filled a big glass with icy water from the dispenser in the corner of the room, then walked over to the big leather chair where Faye was sitting. He whispered something to her, and she grinned as she fluttered over to the bed, where she could get a better view of the action.\n\nLifting the now vacant leather chair with one hand, John walked around to the side of the bed, before setting it down in a good vantage point. He beckoned Jade over as he sat down, and she rushed over to join him, sinking eagerly to her knees. She took his softened cock into her loving mouth, and he stroked his hand through her hair as she nursed him back to attention, while casting his lustful eyes over the bed.\n\n\"It's time for a game, ladies. You can put on a show for me while you wait your turn for lunch. Blondes versus brunettes; I'm curious who can make each other cum the fastest,\" he told them, glancing at Alyssa, Irillith, Calara, and Rachel in turn.\n\nIrillith grinned at Alyssa, and said, \"I'm going to make you sing for me, you exquisite little Terran!\"\n\n\"You go on top!\" Alyssa blurted out in a rush, moving down the bed to make room for the Maliri. \"And get ready for the ride of your life!\"\n\nAs Irillith swung a supple thigh over her body, Alyssa tilted her head right back so she could see John. He met her gaze and grinned as he winked at her.\n\n*I'm rooting for you, beautiful. Make me proud,* he said, his lusty telepathic voice coursing through her mind, and making her tremble with excitement.\n\n*I won't let you down!* she promised him, as she focused on the delicate blue pussy that was lowering towards Alyssa's flushed lips. \n\nShe found the Maliri girl's clit and gently sucked it into her mouth, while Irillith did the same to her. Soft and teasing quickly turned into fast and insistent, and Alyssa could hear little gasps and moans from the blue alien girl above her. Similar erotic sounds were drifting over to her from her brunette competitors, as they also stepped up the pace.\n\n*Oh my God, I love my life!* Calara groaned in ecstasy as she writhed on Rachel's tongue.\n\n*I know exactly what you mean, my love,* Alyssa replied, letting out a sigh of delight that made Irillith squirm, while blowing Calara a tender telepathic kiss."
    ],
    "authorname": "Tefler",
    "tags": [
        "group sex",
        "teenager",
        "swallow",
        "sixty nine",
        "cum inflation",
        "orgy",
        "blowjob",
        "deep throat",
        "submission",
        "dominance"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/three-square-meals-ch-69"
}
{
    "title": "A Game of Basketball Pt. 09",
    "pages": [
        "Hello everyone! I know you've all been waiting for the next installment of A Game of Basketball which I will rename to Rivals, so here it is. Like always, all participants in sexual activities are above the age of 18. I hope you enjoy. Feel free to leave any feedback or questions in the comment section below and also you can always message me through my profile if you want to chat. \n\n*****\n\nSunday\n\nMy eyes shoot open after the morning light broke through the curtain of my bedroom window. Nicole's head is comfortably nestled in my chest. \n\nI let her rest while I watch her beautiful face sleep so innocently. I can see my best friend in her face, but the person I knew as Kevin is long gone. This gorgeous girl named Nicole took his place. If we're being honest, Nicole was the person who was always there. I just couldn't see it. \n\nCarefully, I slide her head down so it's resting on my arm while I scoot down, bringing my face close to hers. \n\nEver so gently, I slide my free hand up and slowly caress her cheek. As if on instinct, she places her hand over mine as her eyes flutter open revealing two bright purple eyes. Holy shit, her eyes! I've never seen them purple before. \"Good morning, beautiful.\"\n\nShe smiles like a divine angel. \"Morning.\"\n\nI lean in and slowly place my lips upon hers. \n\nHer hand slides down my arm. \n\nOur kiss sends us to our own little world. A world where I'm lost in her touch. Where my only religion is her love. I could stay here forever because this is my definition of heaven.\n\nI feel such a strong passion when were together. It makes me feel so complete.\n\nAfter the moment finally passes she looks up at me with those purple orbs. \"How did you sleep,\" I ask.\n\n\"Great! I had the most amazing dream.\"\n\n\"Yeah?\"\n\n\"It was like we were together, but we were on a different planet or something. It's hard to explain, but I was in your arms laying in a field full of flowers. We both had blue skin. My dreams get kind of weird,\" she says. \n\n\"I know how you feel.\" \n\n\"Did you get a weird dream,\" she asks. \n\n\"Not last night, but I normally do.\" \n\n\"What are they like?\" \n\n\"They're more like nightmares than dreams. Filled with demons and ghosts.\" \n\n\"How awful. So... What do you want to do today?\" she asks. \n\n\"Hmmm. Lying here with you sounds good to me. We could probably fuck a few times in various different positions. How does that sound?\" \n\nShe laughs. \"As good as that sounds, I told my mother you were coming over and she also wanted you to stay for dinner.\"\n\n\"That sounds good too.\" \n\n\"I was thinking, we still haven't gone on a first date. Maybe sometime this week would you like to go on our very first date?\" \n\n\"Yes! I would love that.\" \n\n\"Good, then it's settled. How about a movie and a dinner next weekend?\"\n\n\"Yeah! Did you see that the Aratheon movie is coming out on Friday! We should see it on our date!\" She's so excited over it.\n\n\"I thought you weren't into the whole fantasy stuff.\"\n\n\"I only said that so Brett wouldn't make fun of me.\" \n\n\"Fair enough. I would love to see it with you.\"\n\n\"It's settled then! Next Sunday, we'll hit the 4 o'clock showing and then get dinner after.\"\n\n\"Isn't it normally dinner and then a movie?\" she asks. \n\n\"That just doesn't make sense. Wouldn't you want to watch the movie first? That way you have something to talk about during dinner.\"\n\n\"Yeah, you do make a good point. Either way works for me.\" \n\n\"Great, it's settled then. Movie and a dinner next Sunday.\"\n\nShe laughs. \"Now the only thing we have to figure out is who's going to be the bottom bitch this time and get fucked. If we're taking turns, it's your turn to take my dick!\" She reaches down and grabs my ass. \n\nI lean over and kiss her. \"If that's what you want, then how do you want me?\" \n\n\"Ass up, face down. After the romantic lovemaking we had last night, I just really want to fuck you.\" Without hesitation, I crawl up on my knees, put my ass in the air and bury my face in the pillow. \n\nShe gives my ass a slap as she climbs up behind me. She spits on my fuck hole and spreads it around with her finger before doing the same with her dick. \n\nWithout warning, she plunges her dick several inches up my ass. \"Arrggghh!\" I scream out into my pillow as I bite down on it. \n\nHer hands slide down my spine as she leans on my back with her elbows. \"That's it, Dave. Take my dick.\" \n\nIt's funny how things start out so casual and before I know it, I'm on all fours taking a fat cock in my ass. What can I expect when I'm in love with a girl like Nicole. Her arms slink down underneath my torso and pulls me tight against her. The feeling of her breasts against my back is titillating, especially when her cock is at least 5 inches deep in my ass and she's still trying to push it deeper. \n\nShe kisses my shoulder while her hips slam into my ass. The power of her thrust makes my body quake. She grabs both of my arms and twists them behind my back as she humps that big dick in and out of me. \n\nShe leans down and whispers in my ear. \"Will you always be mine?\"\n\n\"Yes!\" I moan out. \"I'm yours, Nicole. Fuck me. Urggh...\"\n\nShe slams her big dick to the hilt inside me and continues her anal assault. Stroke after stroke of that meaty cock, milking my prostate with every thrust. My own pecker's as hard as a steel hammer. She leaves kisses down my back as she continues to plow her hips into me. Her hands still have my wrists in a vice grip.\n\nI can feel that dick push the walls of my ass out of the way as it makes itself a home deep in my rectum. Fuck, I feel so completely full. She takes both of my wrists in one hand as she racks her nails down my back before giving my ass a hard slap. \n\nThe sensations of her dominance sends me into overdrive as she continues to claim my ass. \n\nShe pushes her wait down on me, laying me flat on the bed as all of her cock gets lodged deep inside my ass. Then she gently bites down on my shoulder before whispering once more in my ear. \"I've always wanted to make you mine, Dave. Now you belong to me.\" \n\nShe starts fucking me hard and all I can hear is the sound skin clapping onto skin as her hips smash into my ass over and over again. \n\nMy dick is straining against the sheets, if my prostate takes any more blows, I'll... \"Fuck! I'm cumming!\" \n\nMy cock erupts, soaking my stomach and sheets in cum. On reflex, my ass clamps down on her dick making her moan so loud, my neighbors probably heard her. \n\nSuddenly her dick expands before exploding her hot spunk inside me. The feeling of her steamy hot seed filling up my bowels is pleasure beyond words. As she drains her balls in me, my cock empties out my own load all over the bed. \n\nShe kisses my shoulder as she digs her arms under my chest. \"I love you so much, Dave.\" \n\n\"I love you too, Nicole.\" \n\n\"Let's just stay like this for a little while longer.\" \n\n\"Ooooh Kaay.\" I breathe so heavy, as her dick softens up inside my ass. \n\nWhen she's finally ready to get on with the day, she pulls her sleeping python out of my ass and we get cleaned up. \n\nWalking out to the living room, Emily and my mother on the couch sipping coffee. \"Sounds like someone had a fun night last night and a good morning.\" \n\n\"Morning, Emily... Mom.\" \n\n\"How are you both doing this morning?\" Emily asks. \n\n\"Great! And you Miss Crandell?\" Nicole asks. \n\n\"Never better.\" \n\n\"Well, we're going over to Nicole's. I won't be home for dinner,\" I tell them. \n\n\"Okay, have fun. Remember it's a school night. I want you home at a decent time!\" my mom yells as we make our way out the door. \n\n\"I know, mom,\" I howler on our way out. \n\nMcDonald's\n\nAs we hop into Nicole's car I feel my stomach lurch. \"I don't know about you, but I'm starving.\" \n\n\"Yeah, sex does work up an appetite.\" \n\n\"Fast food?\"\n\n\"You read my mind!\" We stop at McDonald's on our way over. We eat inside and I feast on a McGriddle, a Mcmuffin, one of those breakfast burritos and a hash brown. \n\n\"Aren't we a couple of pigs,\" Nicole laughs as she downs her second McMuffin. \n\n\"We're athletes, we have high metabolisms. Might as well enjoy it while it lasts.\" \n\n\"Ha, true.\" \n\n\"Ughhh, I'm stuffed.\" \n\n\"Well, you did just consume, like, 4000 calories,\" Nicole points out.\n\n\"You know, I know a great workout to burn these calories off. But... it involves two people and no clothes.\" \n\n\"Is that so?\" she laughs.\n\n\"Look, there's the fucking tranny that's going to cost the boys' basketball team their state championship. They've lost 3 games in a row because of her.\" We overhear someone say. Nicole's hand clenches into a fist. I can tell she felt the sting of their words.\n\nI look over at a couple of old men a few booths behind Nicole, talking amongst themselves as they glare at us. \"Do you guys have a problem?\" I ask. \n\nNicole grabs my arm. \"Let's just let it go.\" \n\n\"No! I'm not going to just let it go. If you guys have something say, say it.\"\n\nThe big guy stands up. \"Yeah, I do have something to say. Why the hell is the school even humoring that faggot. He's the reason we've been losing. It's bad enough we have a woman coaching the boys' team, but now we have to put up with some fucking sissy boy ruining our shot at a state title!\"\n\nI jump to my feet and I'm two breaths away from beating this asshole to a bloody pulp, but before I can Nicole gets in front of me. \"Don't waste your time with them. That's what they want. Let's just go.\" \n\nShe puts her hand on my chest and I look down into those purple eyes of her. The world melts away and I'll focus on is her. We grab our trays and take care of them as I follow her out.\n\n\"That's right... Go back to the freakshow you came from!\"\n\n\"That's it, I'm going to...\"\n\n\"Dave! Don't listen, come on, let's just go back to my place.\" The sound of her voice has a calming effect. I let her lead me back to her car. \n\nOnce we're in I turn to her. \"How can you just let those assholes get away with it?\"\n\n\"What's the alternative, Dave? Kick their ass? Then what? Yeah, sure we could have taken them. Then we'd get into trouble. And guess what... \"Trannies\" don't do well in juvie.\" She pulls her gaze away from me as a tear streams down her cheek. \"Ever since I started my transition, I've had to deal with a lot of assholes like that on a daily basis. It's not easy, but that's life. It's the cost I have to pay to be who I am.\" \n\n\"You shouldn't have to put up with that.\" \n\nShe laughs. \"Yeah, you're telling me, but this is the world we live in.\" \n\n\"I just wish I could do something.\" \n\nShe looks back up at me. \"You are doing something. You've chosen to love me when everyone else would rather hate me. You're the one who's here by my side.\" She takes my hand in hers. \"You don't know how much that means to me.\" \n\nI bring her hand up and press my lips against her soft caramel skin. \"I just wish I could do more.\" \n\n\"Well, now that you mention it. You remember Tom, my oldest brother?\" she asks. \n\n\"I didn't really see a whole lot of him when we were kids, but yeah, I remember him.\"\n\n\"Well, he's getting married in a couple of weeks. I could really use a date for his wedding.\" \n\n\"You don't even need to ask, I'd love to go to your brother's wedding with you.\" \n\nShe gives my hand a squeeze. \"Thanks, it means a lot to me.\" \n\nNicole's House\n\nShe pulls out of McDonald's and before I know it, we're at her house. I still can't believe this is her house. It's like two houses put together. \n\n\"I'm still blown away you live here.\" \n\n\"Well, that's what happens when your mom is the head surgeon at the hospital and your step-dad is on the board. You know, my mom is pretty much your mom's boss.\" \n\n\"Rub it in,\" I laugh. \n\nWe walk into her home and into her living room where her mom and stepdad are sitting on the couch talking. \"Oh, hey honey.\"\n\nAfter she sees me, she gets up and walks over to me. \"Hi, Dave. It's nice to see you. How is your mom holding up?\" she asks as she pulls me into a hug. \n\n\"She's doing better. A lot better.\" \n\n\"That's good to hear, I've been worried about her ever since I heard the news. You've met my husband Keith, right? Keith this is Nicole's closet friend, Dave Graceson. You've met his mother Abby, she's one of the best nurses we have at the hospital.\" \n\nKeith gets up and shakes my hand. \"It's nice to finally meet you, Dave. I've been to all your games and the way you play is quite impressive. It's sad what happened back in Santa Barbara, but I know how it is. I've got a brother of my own.\"\n\n\"Thanks. I've only got to sit out for two more games.\" \n\n\"We're going up to my room,\" Nicole says before either of us can get another word in. \n\n\"There's still some breakfast from this morning if you're hungry,\" Elizabeth says. \n\n\"It's fine mom, we already ate,\" Nicole says as she grabs my arm and drags me behind her. \n\n\"It was nice to meet you, Keith.\"\n\n\"Yeah, you too, Dave.\"\n\nAs we make our way upstairs, a girl a little younger than Nicole walks out of a room wearing shorts and a t-shirt. Her blonde hair cascades down to her shoulders. She looks up at me and her face lights up. \"Hi, Dave Marshall. It's nice to see you, Dave Marshall.\"\n\n\"Ashley? Wow, you've grown up.\" I can't remember the last time I saw Nicole's younger sister. She's really come a long way. If I didn't know, I would've never guessed she had autism. \n\n\"You've remembered my name, Dave Marshall!\" She practically jumps with giddiness. \"I made a spreadsheet of the stats for all your games this year, Dave Marshall. Can I show it to you?\" \n\n\"Not now, Ashley. Dave and I are going to my room,\" Nicole says pretty bluntly.\n\n\"How about later, Ashley?\" I assure her. \n\n\"Okay, Dave Marshall,\" she says, looking a little disappointed. \"Bye, Dave Marshall.\"\n\n\"I'll see ya later, Ashley.\" \n\n\"Kevin, mom says you have to take me to take me to the store later today,\" she says. I almost cringe hearing that name, I can't imagine how Nicole feels.\n\n\"For the last time, Ashley, stop calling me that name! Why can't Isaac take you?\" \n\n\"Because Isaac and Liz went down to LA yesterday and won't be home until later tonight.\" \n\n\"What for?\" \n\n\"I believe they went to a Lakers game.\" \n\n\"I thought Isaac was in deep shit after the whole brownie thing. Why is mom letting him go to a Lakers game?\" \n\n\"I don't know, she just said you have to take me to the bookstore. The new Aratheon book came out and I would like to read it.\"\n\n\"It did? Since when?\" \n\n\"Since, today.\"\n\n\"Why don't you just buy the ebook?\"\n\n\"I don't want the ebook, I want the real book!\" Ashley says. \n\n\"Then order it online!\" \n\n\"No! The bookstore next to the mall is where I buy my books.\" \n\n\"Why do you have to be so complicated!\" \n\n\"I am not being complicated!\" \n\n\"Nicole, it's fine. Don't you want to read that book, as well? What's a trip to the bookstore?\" \n\n\"Fine! We're going. Are you ready, Ashley?\" Nicole snaps. \n\n\"Yes, thank you!\" \n\nWe head back out to the car and Ashley hops into the front seat. \"What the hell are you doing?\" Nicole asks.\n\nShe looks up at Nicole with such a confused look. \"I thought we were going to the store?\" \n\n\"Yeah, but you're sitting in the back! Dave's got shotgun.\"\n\n\"It's fine, Nicole. I don't mind sitting in the back.\" \n\nShe lets out a long exaggerated sigh as I hop in the back. \n\nThe Bookstore\n\nIt doesn't take us long before we arrive at the bookstore next to the mall. I can't believe these still exist when you can buy everything online and get it the same day. \n\nAs we head into the small little shop, it's kind of dead. \n\nI intertwined my hand with Nicole's as we made our way through the bookstore. \"I'm surprised these things are still around.\"\n\nShe looks at me with that beautiful grin. \"Didn't you hear, bookstores are making a comeback.\"\n\n\"Really?\"\n\n\"Fuck if I know,\" she laughs. \n\nWe follow Ashley as she darts to the fantasy section. We browse through the shelves as Ashley scans through the book. \n\nThe store itself is kind of old. Not kind of, it's really old. Some of these books look ancient. \n\nAs I scan through the books, my eyes land on one particular cover with a demon on it. \n\nAn explosion of red flames tore through reality, opening a doorway for them to ascend through. Demons poured through the portal with no end.\n\n\"Zoroth, no!\" My brother with his sword burning with blue flames, surged forward, slicing through them. Soon, we'd be overrun, and if we don't warn the others, all hope would be lost. But I couldn't leave him here.\n\nAnd then he walked through the portal. His horns ablaze with demonic flames. His eyes burn with death. A howl of terror roars through his sharp blood-drenched fangs. Asmodeus, the son of Hell arrives. \n\nZoroth looks back at me. \"Go! Warn the others, Azer... Arrrggghhhh\" Before he could even finish speaking my name, Asmodeus's demon blade pierces through him. \"You're not going to kill me that easy, demon.\"\n\nA surge of blue energy erupts from him.\n\n\"Hello? Earth to Dave. You there?\" \n\nI look over at Nicole's bright purple eyes. \"What?\"\n\n\"You kind of spaced out there for a second.\" \n\n\"Oh... right. What were you saying?\" \n\n\"You look like you just seen a ghost.\" \n\n\"It's nothing.\" \n\n\"Are you sure? Remember, we said no secrets.\" \n\n\"Can we talk about it later?\" \n\n\"Sure...\"\n\n\"I've got it!\" Ashley says as she walks up to us with a book in her hands. \n\n\"You know, malls are one thing, but bookstores? I would have thought with the success of eBooks and everything, bookstores would have gone out of business.\"\n\n\"They have, well most of them.\" I turn to see a rather elderly lady walk up to us. \"Is there anything I can help you with, my dears?\"\n\n\"No, we've found what we're looking for, thank you,\" Nicole says. \n\n\"How has this store stayed open when the rest have closed?\" I ask the lady. \n\n\"We're a special bookstore, with books you won't find anywhere else,\" she says. \n\nI'm getting a weird vibe from the lady. \n\nShe locks her hands together as if she was going to prey and rests them against her cheek. \"Ahhh, you both remind me of a story of two eternal lovers. Two old souls living many different lives, forever bound to each other.\"\n\n\"I think we're ready to check out,\" Nicole says rather bluntly.\n\nAshley follows the old lady up to the checkout and rings her up. \"Thank you, Ingrid Ulrich. I'm going to read it as soon as we get home.\"\n\n\"You're very welcome, my dear Ashley. I hope you enjoy it. With every story comes a powerful message.\"\n\n\"Let's go, Ashley. We've got things to do.\" \n\nI take one last look at the old lady and she stares right at me as if she's looking into my soul. \"It's good to see you again, my dear. Come back soon.\"\n\nHave we met before? So weird...\n\nWe leave the bookstore and I run into a stranger. I look up at the man in rags with a hood covering his face. \"Mmmmhmm, delicious you look.\" \n\n\"Are you lost, sir?\" Ashley asks. \n\n\"Ashley, let's go,\" Nicole yells at her. \n\nI grab Nicole's hand and we push past him. \"What a creeper,\" Nicole says. \n\n\"Yeah, let's get out here.\" \n\nBack at Nicole's House with Dave's Half-Sister\n\nThe entire thing was strange. Was that some kind of vision I had? I've never had a dream like that in the daytime while I'm awake. Why does the name Zoroth sound so familiar? And that demon... Asmodeus. It was the same demon that has appeared in the last few dreams. Who is he?\n\nWhat was the name Zoroth was trying to say? Azer...\n\n\"Dave?\" I look up at Nicole. Wow... I really must've zoned out, I don't even remember the car ride or walking up to Nicole's room. \"Want to tell me what's going on inside that head of yours?\"\n\n\"I honestly don't know myself. It was so weird. When we were in that bookstore, it was like I had one of my dreams... With the demons and whatnot.\"\n\n\"The whole bookstore was strange. That old lady, she was so weird,\" Nicole says. \"What was your dream about?\" ",
        "\"Honestly, I didn't really understand it.\" \n\n\"Huhh... Hey, I think Bridget's back from my sister's. Want to see her?\" \n\n\"Yeah! That would be awesome.\"\n\nShe takes my hand and leads me out of her room. We head downstairs and into the living room where a little girl's playing with her dolls on the floor. \"Hey, Bridget. Someone's here to see you.\"\n\nShe looks up at us. She can't be more than 4 years old. It was 4 years ago when mom and I left. \n\n\"Hi, my name is Dave.\" \n\n\"Hi, Davve. I'm Brridgjet with a B.\" \n\n\"It's very nice to meet you Bridget with a B.\" \n\n\"Are you Nicole'sh hushband?\" she asks. I almost die laughing. She's got the most adorable lisp. \n\n\"Not yet,\" I tell her. \n\n\"This is Sharah, sshe's my friend.\" She holds up her doll.\n\n\"It's nice to meet you, Sarah.\" \n\n\"Would you be my friend?\" she asks. \n\n\"I would love to be your friend, Bridget.\" \n\n\"Yay! I havve a new friend.\" Her eyes... She has my dad's eyes. Just thinking of him makes a tear fall from my eye.\n\n\"Are yous shad?\" \n\n\"No, Bridget. I'm not sad. I'm really happy to get the chance to meet you.\"\n\n\"I'm happy too! I have a new friend today!\" \n\nWe sit there for a little bit and play dolls with Bridget. It's easy to get lost in moments like these. If there was one good thing that came from all the pain, this little girl was it. The sad part is, she'll never get to meet her dad or her older brother Zach...\n\nIt's still hard to think about them. But I can't help see them in her. She's so full of joy, just like Zach. \n\nI wish he was here...\n\nZach would've been the best older brother. A better brother than Brett or I could ever be. \n\nWe played a little longer with Bridget. In life, you tend to forget what's really important. I was so consumed with winning a state championship in basketball, I thought it would solve my problems. But in fact, it made me blind to the things that actually matter. The people that are close to me, they're what matters most. \n\nNicole's mom made us sandwiches for lunch. Afterward, we went up to her room for a bit. The walls of her room were painted like a mural of a sunny day in a valley full of flowers. A butterfly breaking from its cocoon was painted on the wall behind her bed. I forgot she was an artist, I can remember when we were kids, she'd always be drawing in class. Her notebooks were full of art, or doodles as our teachers would call them. \"Did you do this?\" I ask. \n\nMost of them were of superheroes or monsters. I remember one time she made sort of a flipbook of an alien invasion outside our classroom window at the bottom of her notes. \n\n\"Yeah, I had a lot of time this summer after I got my breast implants.\" \n\n\"It's almost as beautiful as you.\" \n\nHer face turns a bright shade of pink. \"Thanks.\"\n\nI walk around her room while she sits down and watches me. Her closet that's not exactly full. Besides her normal shirts, she's got a few dresses. She's got a dresser in the corner with a huge flat screen and her rooms big enough for a couch on the opposite wall. That's when I see a lightsaber sitting on her dresser. Picking it up, my mind flashes back to the time before I knew she was my best friend when she was in my room and found my lightsaber. I look back at her and laugh. \"You kept yours too.\"\n\n\"Of course,\" she says. \n\nI whip it open the purple plastic blade. \"Just out of curiosity, why did you pick the purple blade?\" \n\n\"Because I liked the color.\" \n\n\"Ha, this whole time I thought it was because you liked Mace Windu.\" \n\n\"Don't get me wrong, he is a badass. I've always liked the color purple.\" \n\nI set her lightsaber down and take a seat next to her. My hands travel up her neck and I pull her to me as my lips press against hers. \n\nMy thumb does circles around the soft skin of her cheek as our tongues duel inside her mouth. \"Kevin, you won't believe what happens in the new Aratheon book!\" \n\n\"How many times do I have to tell you to stop calling me that!\" Nicole growls at Ashley.\n\n\"I'm sorry... I...\"\n\n\"Just go away!\" \n\nAshley walks out with her head down. \n\n\"You really shouldn't give her such a hard time.\"\n\n\"Don't tell me you're taking her side. I've told her a million times to stop calling me by my dead name.\"\n\n\"She's known you her whole life by that name and now you expect her to just mentally make the switch. Have you explained to her why it's important to you?\"\n\n\"Well... No, I mean come on, she's not stupid.\"\n\n\"Right, but does she understand that you're not Kevin anymore? I mean, for me it's easy because I've known you as Nicole since September before I knew you were my best friend. But she's never really known you as Nicole without thinking of you as Kev... your dead name.\"\n\n\"Since when have you been so insightful?\" she asks as she looks up at me with those purple eyes. \n\n\"Only recently... haha.\" \n\nOnce again her lips are on mine. She pushes me down on the bed and climbs on top of me as she pushes her tongue in my mouth. After a long passionate kiss, I break off. \"We probably shouldn't, I really want to get back into your mom's good graces.\"\n\n\"Ha, my mom doesn't care. Besides, you've always been in my mom's good graces. She practically loves you more than her own kids.\"\n\n\"We can wait for a better opportunity.\"\n\n\"Huh, fine. What do you want to do now? Want to go out to the hot tub?\"\n\n\"It's like 55 degrees outside!\" \n\n\"So, we'd be in a hot tub.\"\n\n\"Ehhhh.\"\n\n\"How about a movie?\"\n\n'Yeah, that sounds fine.\" \n\n\"Anything in particular?\"\n\n\"Doesn't the Aratheon books have a movie out?\" \n\n\"Yeah... I thought you weren't into that?\"\n\n\"I'm into whatever you're into. You can explain it to me while we watch.\"\n\nA smile grows on her face. \"Okay, yeah that sounds fun.\"\n\nAfter she puts on the movie, we cuddle up on the couch and she goes over the world of Aratheon. About how the humans warred with the elves for so long before teaming up with the dwarves. The dwarves were at war with the orcs and the elves. The orcs started a war with the humans after they teamed up with the dwarves. She goes on about her favorite character Eloimaya and how awesome it was that the author who created the character made her transgender. \n\nShe's really into it. And I love watching her get so excited over it. I could listen to her talk about it for the rest of my life. The way her purple eyes light up when she explains to me how much of a badass this Eloimaya is. The way she'd lead the armies of the Elves against the humans. How powerful she is in battle. She's never been defeated, apparently. \"She kind of reminds me of you.\" \n\nThe way her cheeks flush into a hue of pink is something I've only ever see when the sun sets just right where it paints the clouds like a canvas that could make the blind even see the beauty of it all. \n\n\"If that were true, then we wouldn't have lost our last few games.\"\n\n\"That wasn't your fault. It was mine. I should have held my cool with Brett.\" \n\n\"Dave, we shouldn't need you to win. No offense.\"\n\n\"Right... Teams win games, not players.\"\n\n\"If ever play like a team, we'd start winning again.\"\n\n\"Ha, no kidding.\"\n\nAfter we finished the movie, we sat and chilled before Nicole's mom told us dinner was ready. \n\nThe table was set and Ashley was already sitting down, still reading her book. Keith was helping Elizabeth in the kitchen. Nicole and I take a seat across from Ashley at the table big enough for 10 people, when a guy a little older than me with his hair almost as perfect as Nicole's. Are they having a competition to see who can have the better hair? Nicole would definitely win, hands down. But I'm also a little bias. \n\nThe guy who could only be Isaac, the youngest of Nicole's older brothers. He's changed since I've seen him last. Not by a lot, but he's gotten bigger. And when I say bigger, I mean completely shredded. His girlfriend is hot as hell. Not as beautiful as Nicole, but she's hot. Blonde hair, blue eyes, big tits and an ass to boot. \n\n\"Hey, loser!\" Nicole says. \"How was the Lakers game?\" \n\n\"Great! That lead singer chick you love so much from the blades was sitting courtside with her younger brother or something.\"\n\n\"No fucking way!\"\n\n\"That's a dollar in the swear jar!\" I hear her mother yell from the kitchen.\n\n\"Did you get a picture?\" Nicole asks, completely ignoring her mother. \n\n\"Yeah.\" He turns to his girlfriend. \"Can you send her that pic.\"\n\n\"Yeah sure, babe.\" \n\nNicole turns to me. \"Dave, you remember my brother, Isaac, right?\"\n\n\"Yeah, it's been a while though.\" \n\n\"Yeah, that's for sure,\" Isaac says. \"By the way, you've got game, bro.\"\n\n\"Thanks. It's nice to have someone like Nicole to pass to.\"\n\n\"Anyways, this is Liz, Isaac's girlfriend.\" \n\n\"Nice to meet you.\"\n\n\"You too,\" she says as she plays around with her phone. \"Kay sent the picture.\"\n\n\"Awesome! Thanks.\" \n\nFinally, Keith and Elizabeth bring the food over and we all dish up our plates. She made an alfredo pasta that smells absolutely delicious. I can practically taste the mixture of chicken and broccoli combined with that alfredo scent. \"Where's Erika and Bridget?\" \n\n\"Erika and Bridget are upstairs,\" Ashley says, pulling herself away from her book.\n\n\"Would you be a dear, Ashley and go get them?\" Elizabeth.\n\n\"Yes, mother...\" Ashley bookmarks her spot and closes her book as she runs upstairs. \n\n\"So Dave, how many games left do you have to sit out for?\" Keith asks.\n\n\"2 more.\" \n\n\"There's two more loses,\" Isaac mutters under his breath just loud enough for everyone to hear.\n\n\"Well, if the rest of the team can put away their petty issues and actually pass the ball to Nicole, they might have a shot,\" I tell them. \n\n\"I just don't understand what the issue is,\" Elizabeth says.\n\n\"It's just high school bull shit,\" Nicole says.\n\n\"That's two dollars,\" Elizabeth says. \n\n\"Why don't we fucking make it 3 dollars,\" Nicole mutters.\n\n\"Excuse me?\" her mother asks. \n\nI place my hand on her thigh and give it a gentle squeeze. I don't want her to get into trouble with her parents. \n\n\"Sorry, mother.\" \n\nShe places her hand on mine and our fingers lock in together as I turn my hand over.\n\nAshley comes down with what must be Erika behind her carrying Bridget in her arms. \n\nBefore we dig in, Keith says a little prayer. \n\nJust as he finishes, attack the food on the table like wolves. \"Isaac... Nicole, save some for the rest of us,\" Elizabeth says. \n\nKeith dishes up Bridget and Erika's dish, while Ashley continues to read her book. Elizabeth dishes up Ashley's plate and her own. \n\nNicole finally takes a break from her pasta and looks up to her mother. \"Mom, I've invited Dave to Tom's wedding. I've already texted Tom and he's alright with it.\" \n\n\"Okay, then. That's great, honey.\" She turns to me. \"The wedding is in 2 weeks from this upcoming Saturday. It's in LA, luckily you guys have a Thursday game that week and none on Friday, so we'll be driving down on Friday morning, so you'll have to talk to your mother about missing school, but we'd love to have you.\"\n\n\"I would love to come,\" I say. \n\n\"Then it's settled,\" she says. \"Now, do you have a suit? If not, I'm sure one of my boys has a suit that'll fit you. Isaac, don't you have a spare?\"\n\n\"Yeam, I'vve, gottch aa couuple.\"\n\n\"Honey, don't speak with your mouth full,\" she says with a sigh. She looks back at me. \"We'll have something for you to wear. I'll send your mother the details.\"\n\n\"Okay, sounds good. By the way, this alfredo is delicious! The chicken has such a smokey flavor!\" \n\n\"Why thank you, Dave. Keith actually smoked the chicken,\" she says with a blush. \"The sauce, on the other hand, I made from scratch.\"\n\n\"I could tell because no store-bought sauce could ever taste this good,\" I say. \n\n\"Kiss ass,\" Nicole mutters under her breath.\n\n\"I heard that young lady. That'll be another dollar in the swear jar.\" \n\n\"Nicole's going to need to a job just to pay back all the dollars she owes for the swear jar,\" Erika says.\n\n\"Ha, I think McDonald's is hiring,\" Isaac says. \n\nNicole gives me a side look as if to tell me not to mention earlier. \n\nAfter dinner, I help Nicole do the dishes and she takes me back home. \n\nDave's House\n\n\"So, still want to do that quickie?\" she asks, raising an eyebrow.\n\n\"If I recall, isn't it my turn to be on top?\" \n\n\"If that's what you really want...\"\n\n\"I was on the fence, but given the opportunity, I might as well take advantage of it.\" \n\n\"Huhh, okay.\" We walk into the house to find it empty. My mom and Emily must've gone out.\n\n\"Want to do it here?\" I ask her.\n\n\"In the kitchen? What if your mom comes home?\" \n\n\"Isn't a quickie supposed to be quick?\"\n\n\"Ha, right...\" She walks up to the counter in such a sultry manner as she looks over her shoulder at me while she bends over. \n\nI walk up to her, placing my hands on her hips while I grind slowly grind my crotch up and down the crack of her ass. \n\nShe wiggles her butt for me.\n\nMy fingers journey down her rear as I squeeze and knead the cheeks of her ass. Eventually, my eagerness gets the better of me. Grabbing her pants, I slowly slide them down her juicy, ripe ass, dragging her panties with them. She kicks them off.\n\nThat brown eye of hers gives me a wink as I dive in between those pillowy cheeks and go to town. My tongue licks up and down her taint, from her balls up to her lower back and down again. Once I reach that starfish of hers, my tongue circles it like a shark ready to pounce on its prey.\n\nGrabbing onto her hips, I tongue punch her brown eye, pushing my taste muscle into her juicy tight rectum. It tastes so fucking good. \n\nMy hand runs circles on her phat ass before giving it a rather hard slap. Hearing her scream out makes my dick spring to life. I spit one last time on her tied up balloon hole and then I spit on my hand and get my dick all wet. Spreading her ass wide, my python hungrily starts to plug her asshole. \n\nShe grunts out as I penetrate her ass. I grab onto her cheeks and push a little deeper inside her while she grabs onto the counter for support. The demon inside me bursts out as I grab her shoulder and start plowing my cock inside her while I spank that ass of hers. \n\n\"Urgh... Uuuurrgh. Aaaah!\" she groans and moans with every thrust. I've lost all control and the passion takes over. The wound of my pelvis slamming into her butt along with her groans fills my mind. \n\nI pull out and spin her around to pick her up and lay her on the counter. I bring her legs up on my shoulders as I plunge my dick back into the depths of her bowels. She looks up at me with half-lidded purple eyes as she cries out in pleasure as I continue my conquest. My hand slips down the inside of her thigh and wraps around her stiff cock. I start jerking her off as I pound her asshole. \n\nShe's practically screaming at this point as I can feel my orgasm on its way. Her ass clenches down on my dick making me spasm. Cum shoots out of her cock like a fire hose just as the door opens up and my mother and Emily walk in. I can't stop as I plummet my dick deep inside her ass and explode, firing off a load of cum inside her.\n\nMy mom gasps as she sees what's going on. Emily snorts as she bursts into laughter as Nicole and I continue to jizz uncontrollably. My mom and Emily turn away.\n\nFinally, both of our climaxes subside as I quickly pull out of her ass and pull my pants up. Nicole jumps off of the counter and scrambles to get her clothes, before bolting into the bathroom.\n\n\"Hey... didn't expect you both back so soon.\"\n\n\"Clearly...\" my mother says as she and Emily walk into the kitchen. \"Maybe next time you have sex, you can spare the kitchen. That's very unsanitary.\"\n\n\"I'll clean it up.\" \n\n\"Obviously,\" she says rather bluntly. \"Use plenty of disinfectant.\" \n\nNicole finally comes out of the bathroom, fully dressed. \"I'm so sorry about that Ms. Graceson. I should get going.\"\n\n\"For the last time, Nicole, call me Abby. And it's no big deal. Teenagers will be teenagers... Just next time don't have sex where food is prepared... And maybe somewhere a little more private.\" \n\n\"Yes, Ms... Abby.\" \n\nShe turns to me, but I get the first word in. \"I'll walk you out.\" \n\nShe smiles and I follow her outside. \"That was...\"\n\n\"Intense?\" I say. \n\n\"I was going to say embarrassing, but yeah... The sex was intense. Didn't know you were such an animal.\"\n\n\"That's because you're always the one on top.\"\n\n\"Right...\"\n\n\"Also, I may have lost control just a little bit. Easy to do when I'm around you.\"\n\n\"I know how that is. I feel the same way.\"\n\n\"So...\" I look up at those sparkling purple eyes that seem to glow in the moonlight. She takes a step towards me and places her hand on my abs. Without hesitation, I pull her into a kiss. When our lips touch, everything makes sense again. My whole reason for being is clear. I was put on this earth to be with her. \n\nThe feel of her lips against mine makes me feel like she's the part of my soul I've been missing and I'll I want to do is merge us back together.\n\nWhen our lips finally part, the world continues to spin. \"I'll see you tomorrow,\" she whispers. \n\n\"I love you, Nicole.\" \n\n\"I love you too, Dave.\" She gives me one last kiss before getting in her car and driving off.\n\nBack inside, my mom and Emily are relaxing on the sofa. \"Looks like someone had a good night,\" Emily says.\n\n\"Yeah... I did.\"\n\n\"You and Nicole are the most adorable couple,\" she says. \n\n\"Thank you.\"\n\nI look over at my mother. \"I finally got to meet Bridget. She's... She's every bit of dad's child.\"\n\nMy mom looks up at me with a stare I couldn't really comprehend. \n\nShe swallows her expression. \"I'm glad you got to meet your half-sister. You should be a part of her life.\" \n\nI nod and tell them good night as I head off to bed. Nicole texts me as I'm about to nod off asking if I want a ride in the morning. Of course, I say yes. \n\nI hope you enjoyed, please feel free to give it your honest rating and leave any feedback you have in the comment section below. Also do be afraid to reach out to me and send me a message."
    ],
    "authorname": "phoenixcinders",
    "tags": [
        "best friends",
        "dominant",
        "kissing",
        "orgasm",
        "passion",
        "passionate",
        "romance",
        "transgender"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/a-game-of-basketball-pt-09"
}
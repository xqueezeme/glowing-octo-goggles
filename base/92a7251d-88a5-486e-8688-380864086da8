{
    "title": "Two Hundred Dollars Ch. 17",
    "pages": [
        "132 Dollars \n\nLaura slipped into her bedroom just after ten o'clock, her teeth brushed and her flannel pyjamas on. \n\n\"Good night, mom,\" she called out. \"Good night, dad.\" \n\n\"'night sweetie,\" her mom called back. \"We're at the soup kitchen tomorrow, remember.\" \n\n\"Of course,\" she replied softly, closing the door and turning off the lights. \n\nI paid my debt, she comforted herself, paid it ahead of time. I even took a shot at cleansing Bailey of her sins. I've done my duty. \n\nThe pyjamas, besides consisting of soft, freshly laundered flannel, also had a nice, stiff centre seam and a little extra hard nub where that met the inseam. Pressed over top of a standard issue pair of underwear, Laura knew it would work almost perfectly. \n\nThe rounded, wooden arm of her sofa chair still felt a bit too hard, even with all that in the way. Once her eyes adjusted to the faint light from her old digital clock, she compensated, as she always did, by folding a t-shirt over itself several times and laying it over the wood. \n\nFinally, with the stage set, she put her right knee up on the chair, her left foot on the ground, and settled just enough of her weight on her crotch that the crotch point of her pyjamas nudged gently against her clitoris. \n\nCan't go too hard, too early, she reminded herself as she braced herself with her hands on the back of the chair arm. \n\nInstead, she gently slid her hips forward, running the hard length of the chair arm between her lips. \n\nThe sensation didn't match exactly with how Kent had felt when she'd sat in his lap, but it still felt good. \n\nI wonder if I could sit on Kent like this? Would he let me straddle him, rub against him? \n\nShe waited a moment for the little preacher in her head to pipe in some fire and brimstone, but he remained silent. \n\nI took my punishment and he knows it, Laura reminded herself. \n\nAs she stroked the chair with her body, the image of Bailey's bare cheeks came unbidden to the fore of her mind. \n\nYes, I spanked her, Laura let out a sigh of half regret, it's what I had to do, wasn't it? It wasn't my plan, but it probably worked. \n\nBailey had sounded a lot friendlier on the walk home and Laura had forced herself to accept that the most preposterous outcome of her friend's rationalization really had fixed their friendship. \n\nLaura felt anew the anger that had flowed through her from the irritating Preacher in her head. She admitted that the pretentious little man had a purpose after all. \n\nYou make me feel bad and angry, she told him, and sometimes that's just perfect. \n\nThe silence from the mental version of her old pastor allowed her to move past the memory of Bailey-over-her-lap to something better. \n\nAh, yes, she let herself sink into a more arousing recollection, the sensation of Kent gripping her breast in his hand. The right breast, always the right because he has to stand on my left side and reach across and underneath. \n\nThe nature of the game with Bailey and Kent meant a lot of spanking, and Laura counted that acceptable, delightful and sinful all at the same time. To spank her, he had to use his right hand. To use his right hand, he must stand on her left. And this evening, she'd made sure his left hand formed a nice cup for her breast. \n\nLaura moaned softly, feeling again the sensation when Kent had softly pinched her nipple through her sweater. \n\nNormally, when pleasuring herself, she kept both hands on the chair to support herself, insurance again jamming the hard wooden arm into her crotch if her legs started to wobble as she neared orgasm. \n\nThis night, though, she kept her right arm on the chair and drew her left arm up to push against her breast, flattening it against her chest without curving her fingers. \n\nOh, I can't, she whined in her head, I can't touch myself. \n\nSo there is a shame too deep, is there? \n\nShe cursed her inner demons and forced her left hand into a cup, holding her breast against her body a bit more tenderly. \n\nThat's how Kent did it, she remembered, still rolling her hips back and forth, just held me in his grip the first time. \n\nTry as she might, Laura couldn't play with her nipple, not the way Kent had done. With her breast in her hand, she could tell herself it was just a hug, just a thing people did when they felt cold. It felt good without going too far. \n\nOnly a matter of time, harlot, unless you choose a different path. \n\nI'm kinda locked on this path, now. \n\nSqueezing her breast in one hand, supported herself with the other, Laura began madly humping away at the chair, letting the seam of her pyjamas dig past her lips and grind more directly into her clitoris. \n\nImpulsively, the right hand abandoned the chair, too, swinging around her back to grip at the lowest, sorest part of her right cheek, the place Kent had spanked her when she'd been over his arm. \n\nLetting out a groan, Laura squeezed herself, remembering the sharp crack of Kent's hand against her rear. \n\nOh, god! \n\nHer orgasm crashed across her, weakening her knees and dropping too much of her weight onto her genitals. Involuntarily, her hands left her body and she braced herself against the chair. The excessive force had not stopped her orgasmic twitching, but had diminished it somewhat. \n\nOw. \n\nLaura waited the last pulses out before gingerly extricating herself from the chair. She let out a sigh as she discarded the t-shirt onto the surface of her dresser. \n\nA little too warm now, she realized, and undid the buttons of her flannel top. \n\nThe room had just enough light that she could see herself, eerily underlit, in the mirror over her dresser. \n\nI wonder if Kent wants to see me nakeder, she thought, eyeing her cleavage through the gap in her pyjamas. I could probably make him a deal. \n\nShe grimaced as she rubbed her pubic bone. \n\nCame down a bit too hard, didn't we? Laura rubbed gentle circles over the sore spot. Erections aren't that hard, are they? I mean, they call it \"wood\", but it's not really that hard, right? Can't be. I'm sure it would be fine. \n\n============================= \n\nKent woke up late on Saturday morning, contentment flowing through him as it never had, knowing his ease would overwhelm any desire he had to accomplish anything school related until some time past lunch. \n\nHe knew the girls hadn't kept him up all that long on Friday. In the general scheme of things, getting to bed around eleven o'clock shouldn't have hampered him. But once Bailey and Laura had thrown in all that sexual tension, plus the anticipation of Bailey's return and their eventual climactic ending, his body had felt thoroughly used up, his soul in a state of bliss. Throw in a nice hot shower after all that, and he'd slept well and deeply. \n\nTen o'clock rolled around and he hadn't quite mustered the energy or the will to lift his head. Instead, he lay on his left side, gazing languidly at the door, watching the sunlight from the high window above and behind his head move across its surface. \n\nThe door, no one having closed it, never mind locked it, glided silently open. Bailey stepped through and shut it behind her. Their eyes met, sleepily, and his gaze slid down the long beige night coat she had wrapped tightly about her narrow frame. \n\n\"Hey,\" she murmured, her eyes softly narrowing as she carefully walked the floor. \n\nKent noted that he'd fallen asleep well back from the edge of the bed, which meant he didn't need to move to make room for Bailey. She untied her robe and slipped it off, revealing a long, loose t-shirt that covered her just past her cheeks. From Kent's point of view, he saw only long pale thighs. \n\n\"Cold,\" she pouted plaintively. \n\nDon't think I didn't notice, Kent got a glimpse of the tips of her nipples pressing against her shirt before she slipped under his bed sheets and backed into him. \n\nHe summoned enough energy to arrange his arms, one under her neck, one around her waist, and Bailey completed her self-envelopment in his embrace. \n\n\"Warmer now?\" he muttered, maintaining a hard edge of sarcasm. \n\n\"Soon.\" \n\n\"Hm.\" \n\nKent listened to her breathing, felt the soft rise and fall of her belly under his hand, the restful pace of someone at peace with herself. \n\nSo that really solved her problems? Getting spanking by Laura fixed her? \n\nNight time events often seemed absurd once the sunlight shone on them, and Kent had learned much earlier in life not to judge midnight by the standards of the high noon. Even taking into account all of the skew he had learned to apply, he still had trouble believing that Laura had spanked Bailey last night in exactly the same place she lay tucked against his body twelve hours later. \n\nHe had nothing else beside that to talk about, however, and it seemed Bailey had nothing to contribute either. So they lay in what he took for mutual, contented silence, and he listened to her breathe, felt her heart beat, and held her under his warm blanket. \n\nBailey shifted her upper body, sharp shoulder blades pushing against his chest, her bare legs moving slightly against his, making every little hair on his legs stand on end. As she rotated her body against his, turning to face him, her shirt twisted and drew upward, her bare cheeks brushed against his thighs briefly before they rotated away underneath her body. \n\nKent lifted his chin so Bailey could nestle her nose against his throat, then adjusted his embrace to hold her as they interlocked their legs. \n\n\"Better?\" he asked. \n\n\"Mm-hm.\" \n\nNo matter how exhausted the rest of his body might feel, and never mind the contentment in his mind, his penis had its own motivations, and Kent felt an erection growing. Still pointed downwards, it pushed against his shorts and into Bailey's trim little triangle. \n\nShe murmured in appreciation and gently pushed back, stroking herself against him. \n\nKent felt a little nip as her teeth caught a bit of the flesh over his throat. Her nibbles travelled their gradual way up to his chin, her head arcing away from his as her teeth did their work. \n\nTheir eyes met for a moment and closed. Their heads turned so their noses wouldn't meet. \n\nKent felt Bailey's lips lightly brush against his. \n\nThat wasn't a kiss, though, was it? Kent noted. More like a... a... pre-kiss. It's the thing you do when you're ready to kiss and then you really get into it. \n\nBailey's lips slid sideways across his to his cheek, then back again. \n\nAny second now, Kent waited anxiously. It'll kick in right... about... now? \n\nHer lips brushed past his again, mysteriously vacant of passion. \n\nAm I doing this wrong? I've kissed girls before. I know how it works. Why isn't this working? Why can't I kiss her? \n\nBailey tucked her head down under his chin again. \n\n============================= \n\nWhat the fuck is wrong with me? Bailey wondered, her panic-widened eyes hidden in the hollow of Kent's neck. Why can't I kiss him? \n\nShe closed her eyes and pushed her hips into him. \n\nThat part works just fine. \n\nBailey noted the awkwardness she had created by pushing her body into his erection, trapping it while it still pointed downward. His growing stiffness tried to elevate his penis, but it only pushed again the lower part of her lips. \n\nIt pushes hard, though, and I like that. \n\nKent's right hand reached around her and grabbed her cheek, knowing exactly how hard and where she liked to be squeezed, almost pinching the sorest parts. \n\nHe nailed that, she realized with an appreciative moan, but we can't manage a kiss? \n\nShe knew, instinctively, the problem had to lie with her. Somehow, her insecurities about her body prevented her from pushing her relationship with Kent any further. Bailey's decided her problem must live inside her somewhere. \n\nPulling away from Kent, she reached down to pull his shorts away from his body, letting his erection spring upward. Immediately slamming their bodies together again, she felt pressure in all the right places. \n\n\"On top, on top,\" she urged, rolling onto her back and pulling Kent after her. \n\nWe'll just skip out on kissing. I don't care. I don't care. I don't care. \n\nKent slid into place between her legs, pushing his erection against her bare lips. \n\n\"No panties,\" Kent breathed into her ear, his shoulder and chest looming over her face. \n\n\"Yeah,\" she answered, spreading her legs and locking them around his back. \n\nWhy haven't we done this before? she wondered. So... open. Wide... open. \n\nKent did some good work, softly twisting away at her, delving in with the length of his shaft to find all the good spots. Occasionally, she lifted her hips upwards, telling him she wanted it a little harder, but mostly she moaned in his ear to let him know when he found something good. \n\nClever, too, she thought. He knows the good spots, but he doesn't just grind away at them. \n\nBailey looked down her body, past her night shirt, whose hem had lifted above her navel when they'd rolled. \n\nShe considered just lifting her shirt up, letting him see her, all of her. The arithmetic came into her head without prodding. Naked, it took less than four hundred spankings to clear her debt. Fully clothed, over a thousand. \n\nHe's seen everything else. I've seen - Oh! \n\nDown below her belly, the head up his erection poked over the waistband of his shorts every time he thrust against her, a clear drop of fluid shining on the tip. \n\nI've seen all of him. Why can't I show him all of me? \n\nEven while her hips moved against him, though, her hands couldn't move to the hem of her shirt. \n\nCan't, can't, can't. \n\nBailey couldn't even imagine it. She couldn't envision Kent's reaction. That whole side of her mental fantasy just stopped between her neck and the bottom of her rib cage. She imagined it like one of those pirate maps from old movies, \"Here there be dragons.\" \n\nI'm a blank slate, flat and boring. \n\nIf Kent sensed any of the mental battle inside her, he didn't show it. Instead, he bit her neck and she felt her body go limp as her vision blurred. An insensate moan issued involuntarily from somewhere deep in her soul as she gave herself over to the coming orgasm. \n\nKent knew he'd done something right and he bit harder. \n\nHe's leaving a mark, some part of Bailey noted in helpless dismay, everyone will know... they'll know... \n\nSome other person, inside her body, let out a screech. Her body went from limp doll into some kind of frightened, drowning animal, her arms and legs desperately clinging to Kent to save her from the impending tidal wave. \n\nNo! she wanted to shout, the built-up tension inside her reaching levels normally reserved for pain. \n\nKent pushed down, hard enough that she felt abrasion on the sore parts of her cheeks, rubbing against the bed sheets. \n\nHer throat seized up as orgasm crashed across her, a distant part of her glad that some force had come along to prevent her from screaming, since her willpower alone wouldn't have managed. Kent didn't stop driving, though. Did he know he had her in the middle of an orgasm? Did he understand the over-sensitivity she felt then, even as he made it worse? Bailey thought he did, and pushed her anyway, because that's how the two of them had always worked. \n\nThe spasms faded and Bailey gasped for breath. \n\n\"You?\" she asked. \"You now?\" \n\n\"Okay,\" he grunted. \"Okay.\" \n\n\"Come on,\" Bailey humped her hips up against him. \n\nShe thought she might try to bite him, return the favour and give him something to explain to his friends, but he moved away to line himself up differently against her, changing the angles for his own needs. \n\nThis is where he needs it? she noted. I feel like I should remember. \n\nLooking down, Bailey saw his tip poking up in the air at about a forty five degree angle against her pussy. She knew enough physics to make a stark realization. \n\nThat's going to create the optimal trajectory for a projectile, assuming we can ignore air resistance. \n\nBailey decided it safe to ignore air resistance. \n\n\"That's it, that's it,\" she encouraged softly. \n\nKent's eyes met hers, just for a moment, and his body seized up, forcing his eyes closed. He grunted just as she looked down, so she caught his first volley launching over her body, landing a wet line from her right shoulder, down over her covered breast to the hem of her shirt. \n\nA second grunt fired semen over her breast bone, and a third played out as a strafing shot across her lower rib cage, decorating both her flesh and the gathered up hem of her shirt. \n\nThis would be easier to clean up if it were all on my skin, Bailey kept her frown internal, using her hips to milk out the last of Kent's orgasm over her belly in a small puddle. \n\nGingerly, with a wince, Kent rolled off her and lay on his side, friction and gradual shrinkage withdrawing his former erection into his shorts. \n\n\"Hoo,\" he sighed. \n\n\"Yeah,\" Bailey agreed with his sentiment and examined the front of her body. \n\nHe'd laid three distinct streaks on her thin body, two lengthwise and one across. Where it touched her skin, especially the puddle extending from her navel down to to the upper edge of her pubic hair, she grew cold. \n\n\"You, uh, have a shirt I can borrow?\" she asked. \n\n\"Oh, sure,\" Kent jolted, starting to rise, \"The second drawer-\" \n\nBailey quickly braced his shoulder with her closest hand. \"No, it's alright, I'll get it.\" \n\nShe carefully rose up and sat on the edge of the bed, facing away from him. Removing her shirt, while keeping it away from her body, she pulled it over her head and used it to wipe up the semen threatening to drip down into her pubic hair. Bailey didn't want to have to scrub that out later. \n\nI'm naked now, she noted. Naked, in a room with Kent. If I turned around now, he'd see me. See my little breasts. What would he think? Would he say anything? \n\nBut she didn't turn around, deciding that she wanted Kent as horny as possible the first time he saw her naked chest. \n\nThese little bumps need all the help they can get. \n\n\"Just throw it in with my laundry,\" Kent offered, \"I'll take care of it later.\" \n\nNodding, she dropped the rolled up bundle of shirt in the hamper at the end of his bed and stood up. \n\nStill naked, still with Kent. \n\nShe felt a certain delicious thrill, feeling his eyes on the back of her body, tracing over the red and pink spots on her cheeks from the night before. Leaning over just a little, she opened the second drawer of his dresser and leafed through the stack of neatly folded shirts. \n\nHe can see me, she thought happily. And I know he likes my butt. He's willing to give up a couple of spankings to see it. It's my breasts I'm not so sure about. \n\nShe selected the longest shirt she could find, a simple white number with a Laurentian University logo on it. \n\nShimmying into it and feeling it fall comfortably down far enough to cover her crotch, she turned to look at Kent. \n\n\"Who went to Laurentian?\" she asked. \n\n\"Cousin,\" he answered. \"Pretty proud of himself. I guess he wanted me to go up there with him.\" \n\nBailey crawled back into his bed and pulled the covers up, keeping her head below the level of his. \n\n\"That's a long way north for you,\" she observed quietly. \n\n\"Yeah,\" Kent pulled her into the warmth of his embrace, as they fell into a contented silence and, eventually, slept. ",
        "As she drifted off, Bailey made one final mental note. \n\nWe couldn't kiss, but we managed to come without any spanking. \n\n============================= \n\nAfter slipping out of his room sometime after noon, Bailey returned to her own, planning to shower. \n\nShe called up a calendar on her computer and counted the days until Christmas. \n\nOne hundred thirty two dollars, Bailey counted, and about fifty days left in the semester. Figure that I'll lose four to my period, that means I just need to do three dollars a day. \n\nWith a deep breath, she absorbed a new goal, cemented it in her mind and restated it. \n\nI can finish this up before Christmas if I can do three dollars every day. \n\nInside her, a fountain of emotion welled up. In one way, the debt she owed Kent had turned a knob inside her all the way to eleven. A spine-tingling thrill chilled her body every time she turned her back on him. On the other hand, she also felt the debt as a strange kind of barrier. Initially, she put this down to her own natural instinct to avoid ever having debt. Bailey worked hard during her non-school terms to keep her student loans small, for instance, and she assumed the same paranoia motivated her now. \n\nI'll need Laura's help, probably, she decided, I'm not sure my poor cheeks can take all of that themselves. \n\nShe stood up and turned her back on the mirror, still leaned against the wall, and lifted the back of Kent's shirt. With a twist of her lips, she knew she had to steer herself towards maximum efficiency with her available resources. \n\nOne possibility lay in doing all of the spankings over her jeans. With an inspection, that meant twenty eight spankings every day. She might manage that, letting the jeans protect her from the most numerous possible spankings. \n\nOne hundred thirty two dollars, she calculated, divided by three. That's forty-four nights of spanking, or - she punched it into a calculator - one thousand, two hundred thirty two spankings over top of my jeans. \n\nThat sounded like too many, and she considered going in completely the other direction. \n\nIf I get completely naked, Bailey shivered at the thought, it's just nine spankings at a time on bare skin. \n\nShe knew that doing anything else, leaving any article of clothing in place, just meant taking more spankings on bare skin or the limited protection of underwear. \n\nI have to show him my breasts. At some point, I just do. Then I can get past all of this debt. \n\nHer hatred of debt pushed her right up against her insecurities about her body, and she felt that stress twisting inside her gut. \n\nThere's Laura, too, Bailey took some comfort in her friend's willingness to help out, and she can make this go easier for me. But I still have to take care of most of this myself. \n\n============================= \n\nKent sat as his desk late into the evening, hammering away at a lab report, when he heard someone walk past his door and then up the stairs to the exit. A second pair of footsteps, softly flitting along in stocking feet followed and he heard the door locking. Bailey appeared at his door just moments later. \n\n\"Hey,\" she said, her voice quiet. \n\nHe turned as she slipped into his room, closing the door behind her, holding her bathrobe tightly around her body. Kent felt his breath catch in his chest as he wondered what lay beneath the robe. \n\n\"Hey?\" he asked, turning in his chair to face her. \n\nBailey gulped, looking at the floor between them. \"A proposal?\" \n\n\"I'm listening,\" he folded his hands in his lap. \n\n\"It's five with pants down, right?\" \n\n\"That makes one dollar, yes.\" \n\n\"And four with my panties off.\" \n\n\"Still agreeing,\" Kent tried to keep his voice casual. \n\n\"And three naked.\" \n\nKent found it hard to breathe at all, suddenly. \"I did make that offer. And so it stands.\" \n\n\"Okay,\" Bailey's eyes roamed everywhere around the room, anything to avoid making eye contact with Kent, \"How about this?\" \n\nKent waited patiently. \n\n\"What if I took off my shirt, but kept the panties on?\" \n\n\"So, underneath this robe, you're wearing...\" \n\nBailey opened the robe just a little, enough to let Kent see a thin line of flesh from her neck, down past the middle of her bra, down to her transparent panties. \n\n\"Just the gifts you bought me,\" she whispered and finally met his eyes, a shivering hope forcing a trembling in her lips. \n\nKent gulped, \"So, you're not naked, so it can't be three.\" \n\n\"But it's not five,\" she pointed out, \"because I'm not wearing a shirt - and the bra is transparent.\" \n\nHe flashed back to the time she'd come into the shower with him and he'd wondered, very briefly, why she'd kept her shirt on. \n\nShe's got an issue, I guess, he thought as he pondered what he ought to do. And she's trying to get past it. Alright. \n\n\"Okay,\" he said, looking in her in the eye, \"So if you're in a bra and panties, you figure it's only four spankings for a dollar?\" \n\n\"Right,\" Bailey started to smile. \n\n\"A couple of stipulations,\" he held up a finger. \n\nShe peered at him carefully, maintaining her bathrobe in its slightly revealing position. \n\nGotta play this just right, Kent put a smirk on his face, if I don't demand something, she'll be upset. If I demand a little, in the right way... \n\n\"One,\" he said, \"Whenever you want to use this, you're wearing the bra I bought you.\" \n\nBailey nodded, \"See-through bra? Got it.\" \n\nKent tilted his head in acknowledgement. If she had another transparent bra, or acquired such, that would suffice. \n\n\"What else?\" \n\nHere goes, he thought with a deep breath, I think this is what she needs. \n\n\"However many dollars you pay off,\" Kent said. \"At least one of them is done so I can see... the front of your body.\" \n\nShould I have just said 'breasts'? I feel like I should have been specific. But that might have been too much. Yes, Bai, I want to see your tits, but I don't want to break you to get there. \n\nHe tried not wince, tried to role-play the part of the demanding lender, the hardened loan shark out to get the most for his money. \n\nBailey gulped, meeting his eyes, and her cheeks reddened a little. \n\n\"So while you're spanking me,\" she said, \"you can see...\" \n\n\"Your breasts,\" he specified, immediately wishing he'd said 'tits' just because it sounded cruder. \n\nHer eyes went to ceiling thoughtfully. \"So, in a mirror would be okay?\" \n\n\"Sure,\" he agreed, watching her eyes as he amended, \"So I can see your breasts or reflections of them.\" \n\nDid we get this right, Bai? \n\n\"Or sitting on you,\" she added, looking thoughtfully at the ceiling, her mind clearly going through which of the different ways she'd offered her cheeks to him would obey his rule. \"Or... oh, right.\" \n\n\"Deal?\" Kent asked. \n\n\"Deal,\" she agreed curtly. \"We'll have to be quick, though, before Carson gets back.\" \n\nKent waved a hand at her, generally indicating her state of dress. \n\n\"Right,\" Bailey raised her eyebrows as her eyes went wide. \n\nShe slipped the robe off her shoulders and caught it at her waist, standing for a moment in transparent underwear glory. Kent only had a moment to take in the darkness of her nipples through the fabric of the bra before she advanced past him with the bundle of clothing folding over her arm in front of her. Bailey tossed the robe on his bed and braced her hands on the surface of the mattress. \n\n\"Four like this?\" she offered. \n\n\"You need to make your marks,\" Kent pointed at the white board. \n\nIt meant walking across the room again in front of him. He saw her breath catch again as she turned her body and quickly moved past him. \n\n\"Right,\" she acknowledged as she thumped three marks down on his white board. \n\nShe rotated again, turning away from him as she walked past, and braced herself on the bed once more. \n\nBai doesn't have a problem with her ass, Kent noticed, look at how nice she's arching her back and sticking her hips out. She's even got her feet pretty wide - more than shoulder width so I can see her underneath - and her tits pushed all the way down to the bed. \n\nHe had trouble believing it, but this pose clearly counted as her comfort zone. Kent shook his head at the thought. The phrase \"comfort zone\" had taken on a completely different meaning in the last two months. \n\nStepping up to her, he reached a hand out to cup her left cheek. \n\n\"Ready?\" \n\n\"Yeah, get on with it,\" Bailey's comfort level came with a certain amount of sarcasm. \"We don't have all night.\" \n\nThe last word had scarcely left her mouth before he slapped her left cheek, hard and dead centre. \n\n\"Ho!\" she shouted. \"Bastard. One.\" \n\nThe next one came hard, right in the middle of her right cheek. \n\n\"Mm,\" Bailey grunted. \"Two.\" \n\n\"We're in a hurry, aren't we?\" he clarified. \n\n\"Yes,\" she hissed back. \n\n\"Good.\" \n\nHe gave her two more hard slaps in the centres of the transparent green panels of her panties, left and right. \n\n\"Three, four,\" she counted back and stood up straight up. \n\nShe's going for it now, Kent observed the way she steeled herself with a breath. \n\nWith an unsteadiness born from a timidness he wouldn't have believed in any other situation, Bailey turned to face him, her eyes cast nervously downward, and sat on the edge of the bed, giving him his first real look at her breasts through the dark green transparent bra. \n\nYeah, Bai, your tits are small, but they're still pretty nice, firm and the cold air is doing wonders for your little nipples. \n\nHe noted how the bra provided some lift, too, pushing her little mound upwards and keeping them firmer than even nature could provide for such small, tight breasts. Her nipples, with their tiny, dark areola, poked at the fragile fabric covering them. \n\nIf we weren't in the middle of a transaction, I'd show you what I think of your breasts. But we are, and this is about money right now. \n\n\"Nice,\" he observed, keeping his voice soft. \n\nBailey let out a half smile and shivered, still not meeting his eyes. Instead, she rolled on her back and pulled her legs up by grabbing her ankles. Her whole body shook feverishly as Kent moved to the left and sat down beside her, giving him a good place from which to use his right hand. \n\n\"Nice?\" she stammered, rolling her eyes as she tried to regain her composure. \"Good for you?\" \n\n\"Beautiful,\" he remarked, laying a gentle hand on her cheek. \n\nBailey snorted, her self deprecation evident, \"Fuck off.\" \n\nKent laughed and took her right hand, as it was closest to him, off of her ankle. This move had two purposes. First of all, the extended arm had blocked his view of the transparent bra and her breasts within. Exposing her a little more drew a hint of panic from her, and her eyes briefly met his. \n\nKent took her hand and laid it in his lap, over his erection. Wearing only a pair of sweat pants, he knew she'd be able to feel his hardness with little interference. \n\n\"Do you believe that?\" he asked. \n\nClosing her eyes, Bailey jerked a nod and Kent released her hand, letting her know he'd done it more as an object lesson, and wasn't attaching anything else. Her hand remained there, though, resting gently over his manhood. She took a deep breath and thrust her chest out, arching her back and straining her breasts against the transparent fabric. \n\nOh, wow, he gasped slightly and felt his cock twitch against Bailey's hand. \n\nA slight, mischievous smile turned up the corners of her lips and she removed her hand from his lap. \n\n\"I'm going to spank you now,\" he warned her. \n\n\"Get on with it,\" she stammered back, recollecting her wits. \n\nHe got back up, one knee on the bed, one foot on the floor, and rested his hand across her cheeks. \n\n\"Right in the middle?\" she asked. \n\nKent shrugged, \"Maybe I can get both at once.\" \n\n\"Mm,\" she squeezed her cheeks together under his hand. \n\nHe struck hard and low, snapping his hand off the lowest part of both cheeks at once. \n\n\"Hoo,\" she whined. \"Five.\" \n\nKent slapped her in the same spot again. \n\n\"Six.\" \n\nNot getting quite the reaction he wanted, he moved over and struck her right cheek, nice and low, where she'd already gone red from previous days. \n\n\"Seven.\" \n\nNext came the left, hard and low to match. \n\n\"Eight,\" she spoke through clenched teeth. \"You always have to go for my seat like that.\" \n\nKent tilted his head to examine her cheeks. \"I feel like I'm not doing it right if you're completely comfortable sitting down the next day.\" \n\n\"Ri-ight,\" Bailey drawled. \"Asshole.\" \n\nShe kept her legs together and rolled toward him to lie on her right side, curling her body up with a ninety degree angle at her hips, presenting her left cheek prominent. \n\n\"Is it good like this?\" she asked. \n\n\"The position is always up to you,\" Kent reminded her. \n\n\"I mean,\" she rolled her eyes, \"can you see me? Would this count?\" \n\n\"I can see your tits just fine,\" he agreed. \n\nIf he'd spoken too crudely, she didn't show it by flinching. \n\n\"Finish me up, then,\" she sniffed at the air and turned her face away from him. \n\nKent placed his hand on her left cheek, nice and high, preparing to savour the last round. \n\nUp the stairs, they heard someone fiddling with the lock. \n\n\"Quick!\" Bailey urged, her body tensing. \n\nKent laid into her then, striking her left cheek high and hard, four times in rapid succession, giving Bailey no time to recover between slaps - never mind to count. \n\n\"Whoa!\" she cried out half way through, then sucked in a long breath through her teeth. \"Nine, ten, eleven and goddamn fucking twelve! Son of a bitch.\" \n\nUpstairs, Carson got through the door and started coming down the stairs. \n\n\"Do you think he heard?\" Bailey wondered out loud as she sat up, now completely unaware of her exposure. \n\n\"The spanking, or the cursing?\" \n\n\"Shut up,\" Bailey whispered, her head turned so her left ear pointed toward the door. \n\nShe listened quietly as Carson walked past the door, plastic grocery bags swishing against his body and went around the corner to the kitchen. Bailey crept up to the door and leaned her left ear against it. Carson came back moments later and they heard the bathroom door close. \n\nWhen Bailey turned back to him, she found Kent staring at her from his bed. \n\n\"Nice,\" he observed again, nodding at the bent over, knees bent pose she'd adopted. \n\nKent tossed her her robe, which she swung around her body immediately. \n\n\"Jackass,\" she hissed as she unlocked his bedroom door and slipped out. \n\nWell, Kent thought, at least we got over that hurdle."
    ],
    "authorname": "xtorch",
    "tags": [
        "transparent",
        "bra",
        "spank",
        "spanking",
        "counting",
        "masturbation",
        "messy",
        "semen",
        "debt",
        "gift"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/two-hundred-dollars-ch-17"
}
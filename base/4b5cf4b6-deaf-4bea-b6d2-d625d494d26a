{
    "title": "The Human Condition Ch. 07",
    "pages": [
        "I went over to the triple-sized shower stall and turned on the dual jets. Okay, I admit it-this was the real reason we'd bought this house. The architect apparently had a water fetish. \n\nNot only was the shower huge, it had a built-in bench and enough hoses and gadgets to fulfill any fantasies our vivid imaginations could think up. And the shower wasn't the only thing the designer had added. The master bath also had a 6 by 6 foot Jacuzzi and a sauna. The first time Joe had seen these toys, his eyes had lit up and I'd known that it didn't matter if the kitchen tiles were turquoise and the taps gold. We had found our home.\n\nI stepped into the shower for the second time that morning. The hot water beat down on my shoulders and I sighed from the feeling as clouds of steam rose up to envelope me in a blanket of warmth. I reached for the shampoo as Joe stepped into the enclosure. He took the shampoo out of my hand and poured a big dollop of it into his palm.\n\n\"I thought you were all done?\" I said, eying him suspiciously.\n\nHe grinned. \"Yeah, but you had to take two, so I thought fair was fair.\" \n\nJoe pushed me gently until my head was under the jets. I waited while the water did its job, then stepped back. He reached up and massaged the shampoo into my scalp. \n\n\"Mmmm, that feels good,\" I murmured as his strong hands worked their magic.\n\nIf Joe had any kind of fetish, this was it: he loved to shampoo my hair. Well... actually anybody's hair, if I was honest about it. But now, I was the lucky one who reaped the benefits of his little hobby.\n\nIt was Betsy who'd turned him on to the pleasure. That long, curly hair of hers had been gorgeous, but those tresses were a time-consuming, royal pain in the ass. Joe'd told me that he'd spent so much time waiting for her to get out of the bathroom, that he finally decided it was a \"if you can't beat 'em, join 'em\" situation, and he'd started to help her with the chore. It wasn't long before this shampoo ritual was one of the high points of their relationship. After they broke up, he'd continued the tradition with all his girlfriends... and eventually with me.\n\nJoe had been nervous, almost embarrassed, when he'd first admitted this to me, but I told him it didn't matter. It was the truth. I didn't mind that I wasn't the first lover he'd played this game with-as long as I stayed the last.\n\n\"Do you remember the first time I did this?\" Joe could still read my mind.\n\n\"With Betsy?\" I asked, my eyes still closed.\n\n\"No,\" he said, still gently massaging my scalp. \"With you.\"\n\nOkay, so he wasn't perfect at it. Still, it was close.\n\n\"Yeah,\" I chuckled softly. \"I'll never forget it. Jesus, I was so scared.\"\n\n\"You were scared?\" He massaged harder and I bit back a groan of contentment. \"Think of me! I didn't know what the fuck was happening.\"\n\nI opened my eyes, then looked over my shoulder at him and raised my eyebrows. \n\nHe grinned back sheepishly. \"Okay, I knew, I just wasn't ready to admit it.\" He kissed me lightly on the mouth, his hands still tangled in my soapy hair. \"But I'm real glad you...\"\n\n\"...and Betsy.\" I couldn't help it; I had to add that.\n\n\"...and Betsy,\" Joe sighed and agreed, \"pointed out the error of my ways.\"\n\nSo was I, I thought, though at the time, I wasn't sure at all...\n\n\nFebruary 15, 1989\n\nI never heard the details about exactly what happened on that Saturday morning. Lucy, Beau, Kevin and some of the others who were involved told me bits and pieces, but the only one who knew the whole story was Joe, and to this day, he refuses to talk about it. All he's ever said was that the minute he walked into my apartment, he felt there was something terribly wrong.\n\nIn the end, though, it was Kevin who finally put all the pieces together and figured out where I was. Joe called him first, after he'd gotten to my empty apartment around 2AM. He didn't know Cam's number and he was hoping Kevin had it. \n\nKevin - being no fool - could tell from the tone in Joe's voice that it wouldn't be a good idea at all to let him talk to Cam. Even if I was there and fine, Kevin had this feeling things could get ugly. Like I said, Kevin was smart, and he'd already noticed things about Joe's behavior that I'd completely missed. But I'm getting ahead of myself.\n\nKevin told Joe that he'd call Cam and get back to him. He had a little bit of trouble convincing him to go for this, but he finally managed by suggesting that Joe check with Lucy and see if she knew anything. They could kill two birds with one stone. Joe reluctantly agreed, and Kevin hung up and called Cam. \n\nHe wasn't exactly worried at that point. Kevin figured I'd maybe overslept or something. But when Cam answered and curtly told him he didn't know and didn't care where I was, alarm bells went off. \n\nHe figured there was no way he should pass that message on to Joe. Cam hadn't been exactly forthcoming on the phone, but Kevin thought he might be able to do better if he saw him in person. Of all my friends, Kevin got along with Cam best. Cam respected his work at the center, and had even volunteered some time down there to help with the legal problems that always follow runaways. Kevin was grateful to him and they'd struck up a cordial, if not close, acquaintance. So if anybody was going to get Cam to come clean about the last night's events, it was Kevin.\n\nHe showed up at Cam's door ten minutes later. Cam was a little belligerent, but he didn't refuse to talk to Kevin. He did, however, make it clear that he thought the whole thing was an utter waste of time. \n\nSo Cam told him what he knew, but that seemed to lead nowhere. When Kevin insisted, Cam had dug around until he found Randall's phone number, who in turn gave them Elliot's. But Elliot wasn't home when they tried him, and the boy, Andrew, had vanished. \n\nApparently, Cam hadn't taken advantage of his part of the boyfriend exchange. Once he'd gotten Andrew in the car, he'd told him it was nothing personal, but he wasn't in the mood. He asked him if he wanted Cam to take him home, but Andrew had said no and asked to be dropped off at a friend's. \n\nCam didn't know the friend's name, and the apartment complex he lived in was huge. Cam wasn't sure which building Andrew had gone into, since they all looked alike to him. Kevin tried to pin him down, but the only thing he could remember was the building faced a clubhouse and one of the windows had a block \"M\" blanket in it instead of a curtain. Not exactly a great clue; half the students at the U of M used school memorabilia like that as decorations.\n\nKevin thanked Cam anyway and asked to use his phone. He knew that Joe was probably chomping at the bit by now and only hoped that Lucy had been able to keep him from going completely crazy. The phone was picked up on the first ring. Joe answered and Kevin explained briefly that Cam and I had parted ways fairly early the night before. Then, he told him about Andrew and Elliot, going into as little detail as possible.\n\nJoe exploded. In between threats about what he was going to do to Cam if he ever saw him again, he told Kevin he was going to go look for Andrew. Kev tried to explain how impossible that would be, but Joe insisted. Kevin agreed to meet Joe at the complex. He couldn't let him do it alone, no matter how hopeless he personally thought it would be. \n\nThey started knocking on doors. Eventually, even Joe realized how long this would take. It didn't mean he was ready to give up though. He called Beau and Abdul and Kevin did the same with some other friends, and eventually they collected a posse to help. \n\nNow it was both Joe and Kevin who were being labeled as alarmists, but as the hours evaporated and there was still no sign of me, everybody caught the panic bug. Betsy had a friend at the hospital check admissions and Kevin got a hold of a police detective he knew from his work at the kid's center. The cop was sympathetic and said he'd put out some feelers, but there was nothing he could do officially because I hadn't been missing long enough for the police to become involved. \n\nIt was Beau who finally knocked on the right door in the apartment complex. A young man named Charles opened it and reluctantly admitted that Andrew had spent the night with him. Beau called down the hall to Abdul to find Joe and then he stepped inside the apartment.\n\nAt first, Andrew didn't want to talk to him. As the room filled up with my friends, he grew increasingly frightened and hostile. Kevin showed up and ordered everybody else out. Then he took Andrew into the bedroom and started to plead with him. Fifteen minutes later he walked out of the apartment with a white face and a slip of paper with an address on it.\n\nJoe would have gone himself by then, but Kevin convinced him to wait until he could get his cop buddy to meet him. It was decided that Beau and Abdul would also go along. Size and numbers might be necessary. The rest of the group said they'd wait to hear from the other four. They said their goodbyes, leaving Joe and the rest of the group to wait in the apartment complex's parking lot for Kevin's pet detective, Bob Hoyle.\n\nAs I said though, I didn't know any of this at the time. To be truthful, there wasn't much I was aware of by then, including what was being done to my body. The pain had become too great to distinguish individual sources. Elliot had been very efficient in dealing it out. Even so, he hadn't succeeded in breaking me. \n\nHey, don't get the idea I was Rambo. I cried, I screamed, and I tried to reason with him. But I never pretended I liked it, never begged him for more, nor would I admit that he had bested me, even though somewhere in my head I knew that would've probably make it easier.\n\nBecause that was what he wanted. It wasn't enough for him to just do what he did to me; he needed me to approve of it, too. And that I couldn't do. I'm afraid this only made him more determined, and he used all his resources to make me change my mind. Strangely, in the end, it wasn't me who lost control, but Elliot.\n\nThrough swollen lids, I'd watched the man I'd labeled as mild, turn into a monster. I'd unleashed his demons by my refusal to give in to him. Maybe if I'd been smarter about it, I would have pretended for a while, and maybe I'd have been able to get away with a beating and a little rough sex. Now, I had the feeling that we'd traveled too far down this road. He could never release me. Not only was I an example of his failure, but I was dangerous. I knew what he was capable of, and I couldn't be trusted to keep my mouth shut.\n\nHe turned his back on me and I saw his shoulders were shaking. He was grappling with a decision. I thought dully that I knew what it was going to be. I was almost out of time. Elliot turned around again and I glimpsed what was in his hands. It was blurry, but even through my dulled vision, I could see a sharp metallic edge that glinted as it came towards me.\n\n\"Oh, Jesus, Joe,\" I thought or even may have said out loud, \"you have to come now.\"\n\nHe did. They all did. There was the splinter of wood and the crash of breaking glass. Shouts sounded in the house and there was another bang as the door of the dungeon imploded under Abdul's weight. I sagged against the chains that held me and waited. \n\n\"Put it down!\" a voice I didn't recognized ordered.\n\nI opened my eyes just as Elliot backed into a corner and started to babble. \"Get out of here! This is private property! I'll call the police! I'll have you arrested!\" He screamed like a man possessed, waving his arms wildly.\n\n\"I am the police.\" The voice again and now I saw it was connected to a curly-haired blonde who looked more like a little kid than an avenging angel. Then I saw the expression on his face and changed my mind.\n\n\"Oh, Jesus Christ, Jesus Christ!\" Abdul, who never swore, repeated over and over.\n\nThe room was crowded now. Abdul had been first, then the man who said he was a cop. I saw Beau and Kevin frozen in shock as they took in the contents of the room. But where was Joe?\n\nI felt hands gently slide around my torso, lifting me up, taking away the terrible strain on my shoulders. I groaned in relief and pain as cramps seized my stretched muscles.\n\n\"Shh, Mike.\" Joe said softly. \"It's okay, buddy, it's okay now. I'm here. He won't hurt you anymore.\"\n\nHe barked at Kevin to find the keys, and together they got me down off of the rack. I was naked and bloody and Joe held onto me like he would never let go. When I was finally released, he half-carried/half-dragged me to the bed where he sat and cradled me in his arms.\n\nHe never stopped talking to me, soothing me, telling me it was over. He held my head to his chest and I could feel his heart. For the first time I started to sob. My chest convulsed as my lungs, starved for hours by the constricted position I'd been in, tried to take in too much air at once. I could barely move my arms, but my fingers clutched at Joe, making sure he was real and not some hallucination.\n\nThe rest of the room faded as I tried to concentrate on the man who was holding me. Over and over he repeated his mantra: I was safe, he wouldn't leave, I wasn't alone. \n\nNeither of us saw the look that Kevin gave Beau or the nod that answered him. Neither of us saw the way the other men in the room avoided looking at us, giving us time together that they were sure we needed. \n\nThere was a scuffle in the corner of the room. Elliot, in a burst of desperation, tried to use the knife he'd been holding when my friends had entered the room. It gave Abdul the opportunity he'd wanted. His huge fist shot out and in one blow he shattered Elliot's jaw. He would have finished the job, but the cop put his hand on his arm.\n\n\"Thanks, but I think you got him.\" \n\n\"I don't know about that,\" Ab argued, \"he still looks dangerous to me.\" \n\nBoth men looked down at Elliot who was cowering on the floor. The detective looked sideways at Abdul who shrugged and reluctantly moved away, out of the range of temptation.\n\nBeau took over as guard while Bob the cop went in search of a phone. A few minutes later Bob was back. He said the police were on their way along with an ambulance.\n\n\"I want to get Mike out of this room.\" Joe spoke to the others for the first time since he'd seen me. \n\nAbdul and Kevin came over to help him, but he shrugged them away. He held me tightly in his arms, and carried me out of the room. Somewhere in my scrambled brain, a memory stirred.\n\n\"I'm sorry,\" I croaked into his ear.\n\n\"This wasn't your fault,\" Joe responded fiercely.\n\n\"No, not about that.\" I started to laugh and then shuddered as the pain hit me again. \"You were right-I didn't think you could do it. Carry me, that is.\"\n\nJoe looked down at me, puzzled. Then his own memory kicked in, and he knew I was talking about the first night we met. He smiled tightly and gripped me harder.\n\nHe made it to the living room and sat down on the couch with me still draped on his lap. There was an afghan and he put it around me. He pulled me closer and I felt the heat from him start to seep into my bones. Suddenly I felt exhausted, as if I'd been up for days.\n\n\"I knew you'd come,\" I whispered. \n\nI felt him tense up. My hair, tangled and damp with sweat, had fallen over my face. I felt Joe's hand reach up and smooth it behind my ear.\n\n\"When are you going to break down and cut this mess?\" His voice was gruff, but his hand continued to stroke my head that was resting on his shoulder.\n\nNeither of us said anymore. I drifted in and out of consciousness. I heard distant voices and sirens, and then someone was trying to separate me from Joe. I resisted until he whispered it was okay, I was safe now, and that he wouldn't leave me. It was only the last part that convinced me to finally relax my grip. \n\nI was loaded onto a gurney and taken out to the waiting ambulance. Joe walked beside me, talking to me the whole time. When he jumped into the back of the van with me, someone started to protest, but I heard Kevin's voice and the objections ended. Joe sat beside me and told me to hold his hand and squeeze tight when the bumps in the road got too much for me.\n\nThe ride seemed to take forever, and I drifted in and out of consciousness. When we got to the hospital, Joe finally had to stay back. I saw him looking after me as they whisked me into the emergency room. As I watched, Betsy ran up to him and grabbed his arm. I tried to lift my hand, but there was something wrong with my shoulders and I didn't quite manage it. \n\nIn spite of my pain and exhaustion, I couldn't help but recognize the deja vu quality of this whole scenario. It had been a little over three years since Joe and I had acted this out before. Then, it had brought about the beginning of our friendship; now, I had a feeling as I thought of him with Betsy, it might well mark the end of it. Not good thoughts.\n\nFunny, but the whole time I was in that room with Elliot, I'd seemed to have forgotten Joe's telling me he'd be leaving. Now it came back to me with a rush of pain that had nothing to do with what I'd just gone through. Tears leaked out of the corners of my eyes and the young intern who was examining me misunderstood and ordered some pain medication. He didn't realize where I hurt couldn't be numbed by a narcotic. \n\nThe next couple hours are something I'd rather forget, so I'm not going to tell you the details of the further indignities that were inflicted on me. It's enough to say that it hurt like hell and was incredibly humiliating to boot. When they were finally done, poking, prodding, x-raying and stitching me, they admitted me to a room.\n\nIt was a private, which sort of surprised me, but I was in no condition, nor was I inclined, to question it. Although I was full of painkillers, I hadn't slept since I'd been on that couch in Joe's arms. I was exhausted, but I wasn't sure I wanted to chance sleep. The possibilities of what awaited me in my dreams scared the Hell out of me. \n\nI closed my eyes and tried to relax. I heard the door swing open, but I didn't have the energy to look and see who it was. A hand reached down and grabbed mine. I squeezed reflexively. \n\n\"Hey Mike,\" Kevin said. \"How're you doing?\"\n\nI opened my eyes and saw him smiling down at me. Joe stood beside him. He was trying to smile too, but he wasn't as successful as Kevin. \n\n\"I've been better,\" I croaked.\n\n\"I believe that,\" Kevin grimaced.  He looked around and found a chair and pulled it up next to me. \n\nJoe just stood there. He was taking in the contraption they had me in and all the tubes and bandages I was sporting. He swallowed hard like he was trying to get enough saliva in his mouth to speak.\n\n\"Hi,\" was all he finally managed.\n\n\"Hi, yourself,\" I whispered.\n\n\"They, uh... have you in a Stryker,\" he continued.\n\n\"Is that what it's called?\"\n\nJoe nodded. \"That's what you're lying on anyway. The frame is a circle bed. They use this a lot with patients with pressure spots-that's bed sores to you-or for orthopedic cases. That's why there's a hole cut out in the mattress and the circle can turn so they can flip you onto another one without pulling on you.\"\n\nThe nurses had already explained all this to me and why I was in this strange bed. Elliot's first slash on my ass had been a lulu: it had taken a couple hundred stitches and had been a complicated closure because the cut was incredibly deep.  It was a miracle he hadn't severed more nerves and muscles than he had.  Apparently it had something to do with the angle of his swing, something I guess I had to be grateful for.  Even so, the wound would have been excruciating to lie on, plus that could have hindered the healing process. But I couldn't lie on my stomach, either, because one of Elliot's little toys, or maybe his fists, had bruised the hell out of my testicles. This bed had been their only option.\n\nStill, I let Joe explain it all to me again. It seemed to put him at ease; talking about the medical equipment was something he was familiar with doing from his orderly days. He finally finished, looked around, found another chair and pulled it up on the right, the opposite side from Kevin. He sat back and relaxed, but stiffened at Kevin's next sentence.",
        "\"Do you want to talk about it?\"\n\nI twisted my head to look at Kevin. He raised his eyebrows and cocked his head. I thought he was going to make a very good therapist. \n\n\"You don't have to if you don't want to,\" Joe protested, and I could hear the tension in his voice.\n\n\"What happened to Elliot?\" I decided to take the middle road.\n\n\"After they wired his jaw, he was admitted into the forensic unit at Ypsillanti.\" Kevin offered. \"They'll arraign him this afternoon.\"\n\nI barely took in what he was saying. I was too busy watching Joe as he stood abruptly and went to the window and stared at the view of that parking lot as if it had all the appeal of the Grand Canyon. It was obvious he wanted to be anywhere but in this room, talking about this subject.\n\n\"Mike,\" Kevin squeezed my hand, bringing me back to the conversation, \"there's something you should know...\"\n\n\"Oh, Jesus!\"  Joe hissed. \"Do you think he has to know about this now?\"  He didn't turn around, but I noticed his hands griping the window sash, the knuckles white from the effort. \n\nI turned and looked at Kevin's face. He'd stopped talking, but his eyes asked me if he should go on and I nodded. However bad the news was, I had to know.\n\nKevin took a deep breath. \"The police did a search of the cabin. They found... well, some things. Apparently you weren't Elliot's first victim. It looks like he had a habit of picking up guys and bringing them back there. Then, he'd beat the shit out of them. A few times it was consensual, but most of the time it looks as if the men had no idea what they were getting into.\"\n\nJoe made a choking noise at the window. Kevin looked up at him, his eyes narrowing as he thought for a minute. It was as apparent to him as it was to me that Joe was ready to explode. Kevin looked back down at me.\n\n\"Get him out of here,\" he mouthed silently.\n\nHe was right, Joe needed to leave, but it took my sluggish brain a little time to process why Kevin didn't tell him to get out. Then it hit me. If Kevin did that, Joe would just get pissed.\n\n\"Joe,\" I croaked. \"I'm really dry. Could you go get me a Coke or something?\"\n\nThat should get him out of the room for a couple of minutes at least. He'd have to find a nurse to get him a can.\n\n\"That sounds good,\" Kevin agreed. \"Get me one too, okay?\"\n\nThat was even better, since the sodas at the nurse's stations were for patients only. He'd have to go to the visitor's center on the second floor for Kevin's pop.\n\nJoe turned and looked at us with raised eyebrows. It was obvious he figured out our little ruse, but he didn't say anything, just shrugged and made his way to the door. There he turned and looked back at us.\n\n\"I'm going to make some phone calls while I'm out. I'll be back in about twenty minutes, okay?\"\n\n\"Great,\" Kevin said.\n\nHe left and Kevin sat back in his chair with a sigh of relief. I didn't realize until that moment how much tension Joe had brought into the room. \n\n\"Do you want the scoop, or are you just going to stare at that door until Joe comes back?\" \n\nI jerked my eyes back in Kevin's direction. If he saw the red rushing to my cheeks, he ignored it. I quickly realized that I was going to have to be more careful in the future if I didn't want him, or any of my other perceptive friends, to figure out how I really felt about Joe.\n\n\"So how are you really feeling?\" he asked gently.\n\nI winced. \"Like I had a softball bat rammed up my ass.\"\n\n\"Pretty close to what happened,\" Kevin agreed.\n\n\"And then it feels like he took the damn thing and beat me with it.\"\n\n\"Yeah, well...\" He smiled sympathetically.\n\n\"The doctors told me I was lucky,\" I tried, but I couldn't keep the irony out of my voice. \"My left shoulder is separated, and I have a couple hundred stitches on the left side of my butt and a couple of small anal tears, but other than that I'm okay.\"\n\n\"I know. The doctor came and talked with us.\"\n\nKevin leaned forward in his chair and grabbed my hand again. His face was serious and I knew whatever he was going to say next was not going to be pleasant.\n\n\"You are lucky, Mike. That's what I wanted to tell you. You're gonna find out anyway. Elliot made some tapes. Some of the other guys, well... The police don't think they were so lucky.\"\n\nI thought about that for a minute. I had no problem believing him though; I'd seen the look in Elliot's eyes when he'd been holding that knife.\n\nI shook the memory away with a shudder. \"He was going to kill me, Kevin. If you guys had gotten there 5 minutes later, I'd be dead.\"\n\n\"He's a sick fuck.\"\n\n\"Yeah, I know that now. I just don't know why I didn't figure it out in the first place,\" I said, shaking my head.\n\n\"Oh, do not go there!\" Kevin tightened his grip on my hand, making me wince. \"You are not at fault! Elliot is. He's the asshole-remember that. Nobody else.\"\n\n\"But if I hadn't gone with him,\" I argued, \"If I hadn't been pissed off at Cam and acted like a spoiled brat, none of this would've happened! You weren't there. I didn't just lead Elliot on-I told him I'd fuck him!\"\n\nKevin rolled his eyes. \"That's irrelevant and you know it.\"\n\nMost of me knew he was right. I had changed my mind about having sex with Elliot. At worst, that should have earned me a couple of sarcastic remarks and a long, cold night of hitchhiking. Instead, I'd been tied up; beaten and-I forced myself to form the word in my mind-raped. There was no way I'd deserved any of that, and I fought desperately to hold onto that thought.\n\n\"Mike, you're going to have to deal with this, but I don't think now is the time. You need to get some rest, bud. We can talk later. I'll stay until Joe gets back, and then he'll be here until you wake up.\"\n\nI nodded. My body was humming with exhaustion, and now that Kevin and Joe were here, I wasn't as worried about facing my dreams. The resources I'd called on to keep awake were all used up. I closed my eyes and started to drift.\n\n\"I never told you thank you,\" I murmured, already half-asleep.\n\nKevin grinned. \"Hey, you owe me ten bucks, I had to make sure you were going to be around for me to collect.\"\n\n\"I knew you guys would come. I knew Joe would figure out something was wrong,\" my words sounded distant and slightly slurred. I wasn't even sure if I spoke or just thought the words until Kevin answered me.\n\n\"You know, I didn't believe Joe at first. Nobody did,\" he said. \"He was like this madman, insisting you were in trouble. I think that's why we all helped at first, to appease him. I don't know what he'd have done if we hadn't found you. I always wondered, but today was the first day I realized...\"\n\nHis voice faded as I slipped into sleep.\n\n\nI was more or less unconscious for the next twenty-four hours. There were times when I heard voices, others when I functioned in a semi-conscious state, just long enough to drink some water or pee, but mainly I slept. It was deep and dark and still, and whatever I dreamed, I'd forgotten it all by the time I woke up.  \nAnd when that happened, Joe was there, as Kevin had promised. \n\nHe was sitting in a chair next to the bed and he was reading. He didn't notice I was awake and I watched him. A small frown had settled around his mouth. It was a look I was well familiar with, and I knew it meant that he was concentrating. I looked at the title of the book. It was Nabokov's 'Lolita'.\n\n\"Pervert,\" my mouth was so dry the word sounded like rust.\n\n\"You're awake,\" he said, as he put the book down and smiled.\n\nHe walked over to the bed and took the cup on the stand and fit the straw to my lips. I sipped and felt the cool water sinking into the dry tissue in my mouth. After a couple small sips he moved it back. \n\n\"How're you feeling?\"\n\nI thought about that for a minute before answering. There was only one word to describe it. \"Sore.\"\n\n\"Yeah. That's pretty much how you're going to feel, too, for the next couple of days.\"\n\nHe put the straw to my mouth again, and this time I sucked on it greedily. His hand had to hold it still, and in doing so it rested on my chin.\n\n\"You could use a shave,\" he said, rubbing his fingers on my stubble.\n\n\"No doubt, but I don't think I'm up to it.\"\n\nWhich was true. Even though technically there wasn't much wrong with my right shoulder, it still hurt too much for me to move my arm. The left was completely out of commission, as it was strapped securely to my chest.\n\nI grinned at Joe and waited for a smart-ass comeback. I waited for him to take his hand from my face. But he was silent, and his hand stayed where it was. \n\nI know that most of you will think I'm an idiot when I tell you that it still didn't dawn on me what was happening. I have a good excuse: for three years I'd trained myself to think of Joe as completely off-limits. Hell, I don't think I'd even taken a good look at the guy since we were sophomores. \n\nOh, I could describe every inch of him-the shape of his hands, his ears, the curve of his collar bone and ass-but I'd learned these in glimpses, my eyes sucking in the details, memorizing them in brief seconds of study. That was all I'd allow myself. I justified it at the time as my way of not making a straight boy feel uncomfortable around me. Later, I knew that was a rationalization, just another way of convincing myself that all I felt for Joe was friendship. \n\nSo when Joe continued to brush my chin with his thumb and when his fingers uncurled to stroke my cheek, it never occurred to me to wonder why he was doing that. Besides, I was too concerned about what his touch was doing to me to take the next logical step and wonder why the hell he was doing it in the first place. \n\nThe minute I felt the warmth of his hand, I was acutely aware of an answering warmth of my own. Neither drugs nor painful injuries were enough to override the pleasure that shot through my system. I could feel my cock throb and spring to life, and it was all I could do not to look down to see if my arousal showed through the thin blue hospital blanket. \n\nOh, Jesus, I thought. If this was how it was going to be, how I'd react every time I was with him, then maybe it really was for the best that he and Betsy would be leaving town after their marriage. \n\nI could feel my cheeks flush and I was trying to look anywhere but at Joe.  And that isn't easy when you're flat on your back and strapped to a board.\n\n\"Mike.\" Joe's hand stilled, but he didn't remove it and it was all I could do to keep myself from nuzzling it. \"There's something...\"\n\nSuddenly, the door slammed open and one of the nurses, a black woman with bright yellow hair, came stomping in. Joe jumped back like he'd been hit with a cattle prod, spilling what was left of the water all down my chest. \n\nThat was enough for the nurse to order him out of the room. Joe didn't take a lot of convincing, either. He was out of there before I'd had a chance to say goodbye or wonder what it was he'd been about to say.\n\nWhatever it was, I wasn't going to hear it anytime soon either. The next couple of days were spent in non-stop rounds of annoying tests, painful therapy, and exhausted sleep. In between, I was visited by a never-ending stream of friends. It seemed my room was always full, and that meant that Joe and I had no chance to be alone.\n\nWhich was just as well with me. I needed time to think about how I was going to deal with him, now that I realized how I really felt. But that meant being alone, and as I've already said, I wasn't getting much of that.\n\nIn fact, there were only a few times when I only had one guest. The first time was Kevin, and it was pretty apparent that he was alone by design and not chance. He was in full therapist mode, and I was shown just exactly how good he was at his chosen profession. \n\nHe managed to get me to tell him most of what I remembered about my night with Elliot. Then he sat there and held me as I cried after the words dried up and choked me, making it difficult to breathe. When I was quiet again, he pulled a card out of his pocket and gave it to me. \n\nHe told me it was the name of therapist; a woman, Alice Wanamaker, who had worked with a number of rape victims, and that some of them were men. When he saw my expression, he agreed that I was probably fine, but he hoped I'd indulge him and call her. Like I said, he was-and still is-a very good therapist.\n\nThe second visitor that I managed to have a t\u00eate-\u00e0-t\u00eate with was Betsy, and this happened more than once over the three additional days I spent in the hospital. It wasn't really surprising, since she worked in the ER on a rotating shift schedule. At that time she was on evenings, so she would come up on her break after all the regular visitors had been sent home. \n\nAs I said before, I liked Betsy the more I got to know her, and she was always welcome, though I must admit, I had a hard time looking at the ring on her left hand; a new addition since I'd seen her before. The first time she came in, she noticed my staring and she stretched out her arm so I could get a better look.\n\n\"It's beautiful,\" I said sincerely, though the words didn't come easily to me.\n\nShe smiled. \"Thanks.\"\n\n\"So, have you two set a date?\" \n\nI'd tried to ask Joe this a few times already, but he always blew me off, saying we'd talk about him after I was better. He didn't seem to realize I desperately wanted to know how long he was going to be around, and I didn't have the courage to push it. I loved Joe. That knowledge was huge in my mind. I was sure anything I said or did would make it obvious. \n\nSo in three years, our friendship had come full circle. I was once again silent because I was afraid to let him know about an integral part of my being. There was a difference though: this time, Joe was just as silent. Stupidly, I was sure he was having trouble dealing with what had happened to me. \n\n\"May 20th,\" Betsy's voice penetrated my thoughts.\n\n\"What?\" I'd been drifting thinking of the ring and picturing Joe's lean, long fingers slipping it on Betsy's.\n\n\"The wedding date. That's what you asked me.\"\n\n\"Oh, right. Sorry, it's the drugs,\" it was a convenient excuse. I was going to miss it when it was no longer applicable.\n\n\"I would've waited,\" Betsy continued. \"But Joe doesn't want to.\"\n\n\"I know, he told me. It makes sense when you consider the move and all. It'll give you time to settle in.\"\n\nBetsy looked at me with like she didn't know what I was talking about.  \"Well sure, I guess,\" her tone told me she was humoring me. \"But it's not really that big a deal. I mean it's not like we're making a big change. He still has half his stuff at my place, even though he moved back to the house.\"\n\nNow it was my turn to look puzzled. \"You're keeping your place?\" I said incredulously, as what she was saying finally started to sink in.\n\n\"Well sure,\" she nodded, oblivious to what this news meant to me. \"We both like it well enough, and it's convenient for both of us.\"\n\n\"But what about California?\" I had to make sure I understood her correctly.\n\nShe looked at me curiously. \"California?\"\n\n\"I thought Joe said something about moving to California?\"\n\n\"Yeah, I was thinking about moving back, but of course, that's changed now. There's no way I could convince Joe into leaving Ann Arbor for medical school. Maybe I can talk him into a residency out west. We'll see.\"\n\nShe left a few minutes later, so I don't think she noticed how much her revelation had stunned me.\n\nJoe wasn't leaving. \n\nFor some reason he'd decided against it, he hadn't even mentioned the possibility to Betsy. Maybe, I thought, that's what he'd been going to tell me when we'd been interrupted.\n\nIntellectually, I knew this could make no difference to the hopelessness of my feelings about him. But that didn't stop me from grinning like a fool, every time I thought about it.\n\nBetsy did one more late night visit before I went home. I was actually dozing when she came in. She didn't try and wake me; instead, she sat down quietly in the chair by my bed and closed her own eyes. \n\nGradually I gained consciousness and realized she was sitting there. I looked at the glowing face of my watch. It was after 1 AM. I looked at Betsy surprised she was still at the hospital. Her shift ended at 11. She looked tired. She had those dark blue circles under her eyes that a child gets when they've stayed up too long past their bedtime. Her lovely hair was matted from being jammed into a surgical cap, and she looked like she lost some weight she didn't need to lose. \n\nShe had told me several days earlier that the ER was chronically understaffed, and I knew how hard she and the other staff had to work to make up for that. Betsy was an excellent nurse. Not that I was any judge, but I'd heard that from enough people who were to know it was true. Even my own doctor had said something about it when he'd come in once when she was visiting with Joe. \n\nBut the really important thing, as far as I was concerned, was that she was even a better person. She'd lost so much this last year, her whole family, in one way or another. Most people would have whined over the injustice or become bitter, but I knew when Betsy opened those big gray eyes she would smile, and unless you knew her very well, you'd miss the pain that was hidden behind their depths.\n\nIt suddenly occurred to me how courageous she was. No wonder Joe loved her so much. I couldn't blame him. I was half in love with her myself, and I did feel as close to her as I was to my own sister.  Maybe even more so because Sarah was still so young, but Betsy was my equal in every way.\n\nSo, no matter what my own feelings were, I couldn't be jealous of Betsy for what she had with Joe. And as lucky as she was to have him, I thought he was even luckier to have found her.\n\n\"What are you grinning at?\"\n\nI hadn't realized she was awake and looking at me. There was the expected smile, and the sight of it made me blurt out what I was thinking.\n\n\"I really love you-you know that, don't you?\" I said, laughing.\n\n\"Now he tells me, after I'm already taken,\" she said to the ceiling.\n\nWe laughed together. \"I was just thinking how great it was that my best friend and my best girl were getting married,\" I said.\n\nThis wasn't lip service, I meant it, but Betsy didn't have the reaction to my words that I expected. She dropped her eyes and looked down at her lap, fascinated suddenly by her hands.\n\n\"Yeah, well...\"\n\nShe jerked her head up and looked back at me. I was surprised at the unhappiness I saw there.\n\n\"Mike, has Joe said anything to you? I mean, has he ever said why he wants to get married right away?\"\n\n\"He's in love and he wants to get married. Makes sense to me,\" I tried to shrug, but it was a bad idea, and the pain that shot through my shoulders made me wince. \n\n\"Look,\" said Betsy, noticing my discomfort. \"This is the wrong time to be bugging you. Forget I asked.\"\n\n\"No sweetie, it's okay-really,\" I thought for a minute about what I wanted to tell her. \"Joe's always had this vision,\" I began. \"He has this whole scenario planned out in his head: the wife, the kids, the house in the suburbs. I think he watched The Brady Bunch way too much when he was little.\"\n\nBetsy didn't laugh.\n\n\"Anyway,\" I continued. \"He talks about it a lot-always has, this year especially. I think graduating has made it seem like he should be getting on with it.\"\n\n\"So, you think him picking me was just a matter of being at the right place at the right time,\" the bitterness in Betsy's voice was unmistakable.\n\n\"No, of course not!\" I protested. \"Joe loves you. You must know that.\"\n\n\"I'm not so sure...\"\n\n\"Betsy...\"\n\nShe raised her hand in protest. \"Hear me out, Mike. Okay-I'll give you that he loves me. I'm just not sure that he's in love with me. \nIt's a big difference.\"\n\nOn impulse I stretched out my hand, and she grabbed it, holding on, looking down at it as if it were a lifeline.\n\n\"You want to know the really awful thing?\" She whispered. \"I'm not sure I'm in love with Joe, either.\"",
        "\"Oh, Betsy...\"\n\nA thousand things went through my head that I could have said to reassure her. I opened my mouth to speak, but the words stuck in my throat. Betsy seemed oblivious and after a moment she went on.\n\n\"We get along so well, it's as if we've always known each other. We never fight-did you know that? It's like we've already been married for twenty years -- so comfortable and safe. It's almost eerie. I mean, it would be great if it had really had been that long, but shouldn't there be more? Shouldn't that be the end of the journey and not the beginning?\"\n\nI squeezed her hand and she smiled. I noticed the tears in her eyes and she laughed embarrassedly, then brushed them away with her free hand.\n\n\"Damn,\" she said. \"What a bitch I am. Complaining about not having fights-it's pathetic. Don't mind me.\"\n\n\"Hey, don't apologize,\" I said. \"You know I'm here for you.\"\n\n\"Even when I don't make sense?\"\n\n\"Especially then.\" \n\nWe both laughed and Betsy got up to leave. I made a protesting noise, but she ignored it.\n\n\"Well, now that I've made a total fool of myself,\" she said as she walked by my bed, \"I need to get going; Joe's waiting at my place. We have to go register at Hudson's tomorrow.\"\n\n\"God, he's waiting? He must be going nuts, it's almost 2 AM.\"\n\n\"I called him and told him I was working late and that I was going to stop up here after and check up on you. He said he was just going to bed.\"\n\n\"Well,\" I smiled. \"Then I certainly don't want to keep you.\"\nBetsy gave me a funny look I couldn't read. \n\n\"Trust me, I don't think he minds,\" she muttered.\n\nBefore I could think of a response, she leaned down and kissed me goodbye. Then she gave me an extra hug.\n\n\"'Night, Mike,\" she turned on her heel and walked to the door and turned. She was smiling again. \"Did I ever tell you I think it's a damn waste that you're gay?\" \n\n\"That all depends on your point of view,\" I responded and listened to her laugh all the way down the hall as the door closed behind her. \n\nIt's always hard to sleep in a hospital. That's probably why they wake you up in the middle of the night to give you a sleeping pill. They've learned from bitter experience that an unmedicated patient can't sleep through the bells and the whispers and dull thuds that are a hospital's version of crickets and nightingales.\nThis was my last night. I was to be discharged in the morning and I'd refused the obligatory pill that had been offered soon after Betsy left. My excuse had been that I wanted to be alert the next day. That wasn't the real reason; I needed to think. \n\nIf Betsy was telling the truth, and I had no reason to believe otherwise, then why had Joe proposed? It wasn't like him to settle for something less than the best. For three years now, he'd been lecturing me against doing that very thing. He was one of the last great romantics; why was he willing to play it safe now?\n\nI tried to concentrate, but, sleeping pill or not, I was starting to drift. As I felt the darkness descend on my mind, a little thought burst out of my subconscious and tried to worm its way to the front of my brain. I opened my eyes wide as the idea grew. No. I shook my head. It was too ridiculous. I was getting punchy. I closed my eyes again, but now, I wasn't sleepy and it was hours before I lost consciousness.\n\nThe doctor didn't get around to discharging me until after 11. By that time, I was fully dressed and gingerly sitting in a wheelchair with Lucy and Betsy. Joe was waiting for us in the car, but I knew it was only a matter of time before he gave up and came in to find out what the hold up was. I was right: five minutes before I was released, he appeared. I found myself suddenly shy, and I couldn't meet his eyes. \n\nWe finally got the go-ahead and left the room. Joe ran ahead to get the car. Lucy hauled all the junk I'd accumulated in the last four days, and Betsy wheeled me out to the elevator, which we rode to the lobby. She'd just cleared the wheels of the door when she stopped. I twisted around to look at her and found she was staring at something to our right. I turned and there stood Cam.\n\nI hadn't heard from him since I'd been admitted. I wasn't sure how I felt about that.\n\n\"Could-could I talk to you?\" He said in that deep voice that used to melt my bones. \"Alone?\"\n\nMy bones were pretty sturdy now. I nodded and Betsy and Lucy moved away from me; far enough to give us some privacy; but close enough for protection. \n\n\"I called every day,\" he said. \n\n\"How considerate,\" I was trying to be cool, but I felt anger welling up inside of me. If he had called, I'd never heard about it.\n\n\"I know you said you didn't want to see me, but when the nurses told me you were being discharged today, I took a chance.\"\n\nThis confused me. I'd never said I didn't want to see Cam. I was about to tell him that when he started to speak again.\n\n\"God, Mike,\" his voice choked. \"I'm so sorry. Can you ever forgive me?\"\n\n\"It wasn't your fault,\" I said, though a part of me believed he was right.\n\n\"I should have never let you go. I should have made you leave with me.\"\n\nI shook my head. \"That's bullshit, Cam. I made my own choice.\"\n\n\"But I should have stopped you.\"\n\n\"And how were you going to do that?\"\n\nWe stared at each other for a long minute and it was Cam who finally dropped his eyes. \"I guess that was always been our problem wasn't it?\"\n\nHe was right and in saying so he gave the eulogy to our relationship. For a moment I almost wished we could try again. The moment passed. \n\n\"I've talked to the other partners,\" Cam changed the subject. \n\"Take as much time as you need; your job will be waiting for you.\"\n\n\"Thanks.\"\n\n\"And we agreed that if you want us to represent you in this, we'll be happy to do anything we can-pro bono, of course. You don't,\" he cleared his voice. \"You don't have to worry. I won't be involved, you can pick any lawyer you want.\"\n\n\"That's very generous, but I don't know if I'll need it. The police are handling this as a criminal case. Ever since they found the bodies...\"\n\nWe both had nothing to add to that one. Yesterday it had been all over the news, the police had found at least two bodies buried in shallow graves deep in the woods around Elliot's cottage. I had been very lucky indeed.\n\n\"I know, but in case it doesn't work out or you want to pursue it through a tort. Jesus, Mike, you must know that this could maybe get a small fortune if you sued his ass for violating your civil rights.\"\n\n\"Cam, we both know that it'd take at least five years to get this into court. I don't think I can face that idea right now. I'd just as soon put this whole thing behind me.\"\n\n\"I understand and I'm not pushing you to make a decision now; I just want you to think about it.\"\n\nI nodded, but really, I wasn't interested. My only hope was that they'd find a nice dark cell for Elliot and forget he was in there. Not an impossibility in a state that commonly uses the \"guilty but insane\" verdict, and likes to give 150-year sentences as a matter of course.\n\n\"What the hell is he doing here?!\"\n\nBoth Cam and I swiveled our heads to look at Joe. He was rigid with fury and his hands clenched and unclenched at his sides.\n\n\"It's okay,\" I said, and realized I meant it. I no longer cared enough about Cam to have his presence upset me.\n\n\"No, it's not! He's not even supposed to be here. After what he's done, he doesn't deserve to be around you!\" Joe started to walk towards Cam and only Lucy's tiny hand on his arm stopped him. But she couldn't stop his mouth.\n\n\"This is your goddamn fault, Montgomery! Mike may think differently, but you and I know better.\"\n\nBy this time, Cam was just as rigid as Joe. Two spots of color showed on his cheeks and his mouth had settled into a grim line. But he couldn't be goaded and he remained silent as Joe continued to tell him exactly what he thought of him. Several passers-by in the hallway eyed us curiously. I finally couldn't take it anymore.\n\n\"Joe, shut up,\" I ordered. \"Go out to the car, all of you. I'll be out in a minute.\"\n\nLucy tugged on Joe's sleeve and managed to get him turned around and heading for the door. Betsy stood there for a minute, then followed reluctantly.\n\n\"I'm sorry about that,\" I said to Cam.\n\n\"I deserved it,\" he shrugged and then smiled sadly when he saw the look on my face. \"I know you don't think very much of me, Mike. I wish... Well, I wish a lot of things, but you can't turn back the clock, can you?\"\n\nNo, I thought wearily, you can't. I suddenly wanted this meeting to be over. Cam was a part of my past. I didn't want to think about him anymore. \n\nHe wheeled me out to the waiting Bronco. Joe was out of the car like a flash. Cam held his ground though and leaned down until we were at face level.\n\n\"Whatever else you think, Mike, believe this: I hope that you'll be okay, and that someday you find the happiness I know you deserve.\" He leaned over and kissed me gently on the cheek. Then he turned and he was gone.\n\n\"The same to you, Cam,\" I called after him and I was surprised at how much I meant it. \n\nThe trip home was made in stony silence. Joe was still steamed over Cam's surprise visit. Lucy and Betsy didn't seem to be inclined to say anything either. I thought I should ask Joe why he'd decided - on his own - to ban Cam from any contact with me. But the truth was, I didn't care. The lack of sleep was catching up to me, and I was having a hard time staying awake.\n\nIt had been decided that I would spend the next few days with Lucy. I'd made token protests at this arrangement, but really I was more than willing to capitulate. I wasn't ready to be alone. There were still a few dark shadows in my nights that I'd rather not face by myself. I just needed some time, I told myself. What had happened had been a fluke, and I was determined it wasn't going to effect my life.\n\nWe pulled into the driveway and Joe helped me into the house. I'd been walking for a couple of days, but I was stiff and sore all over, and the stitches in my ass pulled with every move I made. I was relieved when we finally got upstairs to the bedroom Lucy had prepared. Joe unbuttoned my shirt, but I insisted I could do the rest myself and he left me to it. I was almost immediately sorry I'd been so independent. By the time I finished getting out of my clothes I was soaked in sweat, and it was all I could do to crawl into bed, where I fell asleep instantly.\n\nIt was late afternoon by the time I awoke. The sun was in my eyes and I squinted and groaned.\n\n\"He lives!\" Lucy was sitting in a chair by the window, but now she got up and grabbed some pills off the nightstand.\n\n\"What are they?\" I asked warily. I didn't want another pain pill; it'd just make me sleep more, and then I'd be up all night.\n\n\"Antibiotics,\" she said, thrusting them at me. \"Swallow.\"\n\nI obeyed and she continued to talk. \"Do you want to rest more or do you want to eat?\"\n\nI was famished. \"Eat.\" \n\n\"Good,\" she sounded pleased. \"I'll go fix you something. What would you like?\"\n\n\"Surprise me.\"\n\nShe zipped off and I dozed again while she was gone. I assume it was just a few minutes later when she came back with a big bowl of cottage cheese, another of apple sauce, two cups of steaming mushroom soup, and a large glass of Vernor's Ginger Ale, a taste she knew I'd acquired since moving to Michigan. \n\nThe Vernor's was welcome but the rest looked bland and uninteresting. Then I remembered how even bland food hurt like hell when it worked it's way out of my sore bum and I thought better of complaining. Lucy helped herself to a mug of soup and sat at the foot of my bed.\n\n\"Soft foods for a week,\" she said shortly.\n\n\"Mmmm-looks great, but I can't eat all this,\" I said, then I dug in and made a liar out of myself as gobbled it all down.\n\n\"You're a mess.\"\n\n\"Thank you,\" I responded ironically.\n\n\"You need a wash and a shave, and your hair is dirty.\"\n\nI sighed sarcastically. \"I'm afraid I'm not exactly in a position to take care of that right now.\"\n\nShe nodded. \"Joe's coming back. Maybe he can help.\"\n\n\"Couldn't this wait until tomorrow?\" I was almost whining. I didn't feel up to a beauty treatment. \"I'm sure by then I'll feel better...\"\n\n\"You'll feel better when you're clean.\"\n\nI gave up. Occasionally Lucy would let me win one when we bickered, but I didn't think this was going to be one of those times. \n\nShe took my silence for capitulation and gathered up the dishes and left. I drifted again until I felt Joe gently shaking me.\n\n\"Wake up sleepyhead. Time to get gorgeous.\"\n\n\"Fuck off,\" I said, yawning.\n\n\"Is that anyway to talk to Mr. Joseph, your own personal guide to a better you? \nCome on, get your ass out of bed.\"\n\nI pissed and moaned for a while, but finally obeyed. Joe grabbed my bathrobe, which had somehow materialized and was lying at the foot of the bed. Lucy must have raided my apartment for things she thought I'd need. He wrapped the robe around me awkwardly, since my arm was still strapped to my chest, then led my tottering body down the hall to the huge, old-fashioned bathroom.\n\nIt was the first time I'd ever been in Lucy's upstairs john, and I looked around in awe. Old-fashioned it might be, but that didn't mean it didn't have just about everything you could ever want in a bathroom.\n\nThe toilet was elevated like a throne, and directly beside it was a bidet. The sink was a single, but the bowl was almost big enough to take a bath in - not that you'd ever need to. There was a huge marble tub completely surrounded by mahogany paneling. The thing must have been 8 feet long and at least 4 or 5 feet wide. There was no shower, but the tub did have one of those old-fashioned metal hose thingies with a brass nozzle that looked like a phone.\n\nJoe whistled softly as he looked around. Then he walked over to the tub and turned on the water. It let loose with a roar. No water pressure problems there. He turned it on and off a few times just to make sure, then he shut it off and turned to me with a big grin on his face.\n\n\"This is great! I could live in this room,\" he enthused, then he turned to me. \"Okay, dude-strip.\"\n\nUh-oh. For the first time it occurred to my sleep soaked brain, that Joe was actually planning on washing me. All of me. \n\nI shook my head. \"Look, you don't have to help. I can do this myself.\"\n\n\"Yeah, right,\" he said, frowning. He wasn't buying it.\n\"No, really, it's okay,\" I smiled and swiveled my hips to show how limber I was, \nthen bit my lip to keep from groaning at the pain.\n\nHe raised an eyebrow. \"I don't believe you.\"\n\nI didn't care what he believed, I only knew there was no way I was going to give him the opportunity to see how much I really liked him. Already my treacherous cock was waking up to the possibilities. No way was I going to stand nude in front of Joe with a hard-on. I looked up to see him staring down at the bulge that was starting to form through the terrycloth robe. Shit.\n\n\"Okay, listen,\" Joe was talking to the wall behind me, his face red. \"Why don't you go ahead and do whatever you can and I'll come back in later when you need me.\"\n\n\"Sounds good,\" I muttered and felt my cheeks flame, too.\n\nI won't say he ran from the room, but it was close. The idea that had kept me awake the night before tried to take over my mind again, but I beat it back. I walked to the sink and picked up the clean washcloth that Lucy had laid out for me. I couldn't even cheat and soak the dirt off in the tub. I couldn't get my stitches wet. Oh well, might as well get it over with. I wet the cloth and started to scrub. \n\nIt worked, sort of. At least the pain made my dick think twice about waking up. I struggled to reach all my cracks and crevices; no easy task, but I was determined. The more I washed, the less that was left for Joe. Finally, though, I had to admit to one defeat: there was no way I could raise my hand to wash my hair. \n\nSomehow, I got my robe back around me and stuck my head out the door. Joe was sitting on the floor in the hall. He appeared mesmerized by a spot on the far wall.\n\n\"Mr. Joseph,\" I said softly and watched as he jumped at the sound of my voice.\n\n\"Whatcha need?\"\n\n\"My hair washed.\"\n\nHe grinned. \"Ah-the house specialty.\"\n\nHe got up and walked into the bathroom with me. It took a few minutes to work up a strategy, but we finally settled on me on my knees leaning over the tub, with Joe beside me. He reached over my tipped head and grabbed the hose. \n\n\"We're going to have to do something about the robe,\" he said softly. \"It'll get wet otherwise.\"\n\n\"Uh, okay,\" I said. Actually, it wasn't okay at all, but I didn't see where I had any choice. \n\nI felt him pull the robe down and then helped him slip my good arm out of the sleeve. He bunched the material at my waist. I almost sighed in relief. My fantasies might have included a scene or two with me pointing my bare ass in Joe's direction, but not like this.\n\n\"Here we go.\" \n\nJoe gently pushed my head farther down and leaned over me to rinse my hair. His body felt warm and hard, and I had to resist arching back into it.\n\n\"Oh, shit!\" He muttered.\n\n\"What?\" I turned my head to look at him.\n\n\"I'm getting all wet,\" he answered, and I relaxed. \"Here, just a minute.\"\n\nJoe dropped the sprayer and sat back on his heels. I turned my head and watched as he stripped off his sweatshirt and the shirt beneath it. My heart did a little flip of glee as I saw his muscular torso come into view. Joe spent a lot of time in the weight room, and it showed. He wasn't ready for the Mr. Universe Pageant, but he definitely had a solid, defined body. I'd seen it before, of course, but not since I'd faced my true feelings about the guy. It certainly put a different perspective on my viewing.\n\n\"Lean over the tub,\" he said quietly.\n\nHe grabbed the nozzle again and started to wet my hair. At least I supposed he did; I wasn't paying much attention. All I could think about was the hot skin that was rubbing against my back. Joe had reached across me so that his hands were straddling my head. In order to do that, he practically had to lay across me. I could feel hard nipples rake my back and the pounding of his heart as reached he for the shampoo. My cock stood at attention under the folds of the robe, and I wondered if it was wishful thinking that made me believe there was an answering bulge that occasionally seemed to brush against my hip.\n\n\"Turn around,\" Joe's voice was husky and low.\n\nI turned and sat back on my heels. He reached towards me and poured a big slurp of shampoo on my head. We faced each other as he started to massage the lather into my scalp. We were both breathing like we'd just been through some huge physical ordeal-which, in a way, was true, if I was honest about it.\n\nPart of me still wanted to deny what was happening. It may not be a great feeling to be involved in unrequited love, but at had the appeal of familiarity. The possibility that Joe wasn't as immune to my charms as I'd thought was mind-boggling. I had no idea what was going to happen next, and I wasn't even sure what I was hoping for.\n\nJoe's hands stilled and he drew away from me a little. I continued to look down at the floor between us.\n\n\"Are you okay?\" Joe broke the silence.\n\nI looked at him. There was compassion in his gaze and caring. There might have been more, but I dropped my eyes. Oh God, who'd have thought a shampoo, could be so dangerous to your health?\n\n\"I mean... with what happened?\" he continued.\n\nThis wasn't exactly what I'd been expecting, but I was kind of glad for the diversion. I nodded and then realized he expected a verbal response.\n\n\"Yeah, I'm fine. I barely think about it.\"\n\nIt was the truth. I was amazingly calm about my encounter with Elliot. It was almost like it had happened to someone else; like it was a bad movie I'd only seen and not actually starred in. The physical pain was my only reminder, and I could brush that off for the most part. It wasn't, after all, like I was going to have any permanent damage. All in all, I was pretty pleased with myself.",
        "Even the session with Kevin's therapist friend had gone pretty well. Oh, she'd said we should probably meet again, but I didn't think I needed it. If I was okay, then why did I need to keep raking it up? Besides, the one sore point in the session had been her insistence that I tell my family. No way-why upset them? There was nothing they could do, and I was eager to just forget about the whole thing. So I wasn't anxious to go back to Ms. Doctor Not if she was going to keep bringing this up.\n\n\"Are you sure?\" Joe's question brought me back to the present.\n\nI nodded. \"Absolutely. I'm fine. Really.\"\n\n\"That's good, then. Real good.\"\n\nHe started to knead my scalp and I couldn't help but murmur in contentment as my body swayed in time to his movements.\n\n\"Your hair is really thick. I didn't realize that.\"\n\n\"Mmmmm,\" I closed my eyes and wallowed.\n\n\"You know...\" he cleared his throat. \"You know, when I saw you that day, hanging there, your hair covering your face. I... I thought you were dead.\"\n\n\"Oh Joe...\"\n\n\"Let me finish. I need to say this. I thought I'd lost you,\" He hesitated, then went on softly. \"I wanted to kill Elliot.\"\n\nI opened my eyes and looked at him. He was dead serious. There was no mistaking the commitment on his face. It was there in the set of his jaw and the pulse on the side of his neck.\n\n\"I would have, too,\" he said, confirming what I believed. \"There would have been no way anyone could have stopped me.\"\n\nI started to speak, then thought better of it and let him continue.\n\n\"Even when you moved and I knew you were still alive, part of me wanted to go over to him and make him hurt as bad as he'd done you.\"\n\n\"Abdul beat you to it,\" I whispered.\n\n\"No. I chose to go to you. Helping you was more important than hurting him. You are more important than...\" He trailed off and we stared at one another. \n\nHis hands were quiet again, but they were warm on my head as they rested in the cool lather. My mouth was dry and I licked my lips and I watched as Joe took in the movement with hot eyes. When he started to speak again his voice was so low I could barely hear him. But the words burned into my brain.\n\n\"I didn't say anything to Betsy about moving.\"\n\nI nodded. \"I figured that out when she told me you were planning on living here.\"\n\n\"I couldn't go through with it. I wanted to, but I couldn't.\"\n\nThe time had come. For three years I had loved Joe with all my heart, and now I needed to know how he felt about me. Maybe I was reading this all wrong, maybe not, but I needed to know. \n\nI looked him right in the eye. \"Why?\" I asked.\n\nOne word held our future. Joe looked at me and froze. I wondered if I looked as scared as he did. There was no sound in the room except a steady drip from the tap in the sink that I hadn't had the strength to close tightly. I barely heard it over the pounding of my heart.\n\nJoe finally moved his hand. Down it slid to my cheek leaving a trail of suds that probably tickled as it slid down my neck. I didn't notice. He cupped my jaw with his strong warm fingers. They were trembling. I twisted my head until I could reach his palm with my lips. When I kissed him there, he sighed.\n\n\"OH GOD!\"\n\nJoe and I sprang apart, my sore muscles clamping down at the sudden movement. Joe was staring behind me, his face looking wild and horrified. I didn't have to turn to know who he was looking at, but I did anyway.\n\nBetsy stood rigid in the doorway, her hands clenched into two tight fists. Her eyes were on Joe, the shock in them easy to see. When she realized I was looking at her, the expression changed to hatred.\n\n\"It all makes sense,\" she hissed. \"Finally, it all makes sense.\"\n\n\"Betsy, it's not...\" Joe started, but she wasn't about to let him finish.\n\n\"Oh, Jesus, Joe! Of course it is! Give me a little credit, for God's sake!\" She wasn't yelling, but the venom made her words distinct and penetrating. \"How long? How long have you two been playing at this little game?\"\n\n\"Please, Betsy, if you'll just listen...\" I began, since it was my turn to try and get her to stop.\n\n\"You shut up!\" She pointed at me. \"I thought you were my friend.\"\n\nThe words stung, and not just because her voice was icy; I had forgotten about Betsy, forgotten that there was another person, another heart that was on the line in this confusing dance that Joe and I had started. Now I could add shame to the feelings I was having. \n\nShe was shaking now. \"So how was this supposed to work, guys? Were you going to keep this a secret forever, or maybe you had a plan. Was that it? Were we all going to move in together? How were you planning on working this out, Joe? Were you going to fuck me on me on Tuesdays, and the rest of the week was for Mike? Once a week is all I get now - if I'm lucky, so I can't see that changing. Or maybe you thought we'd go for a three-way! Yeah, that would be more efficient.\"\n\n\"Stop it.\" Joe's voice was deadly.\n\n\"Not a problem,\" Betsy pulled off her engagement ring and threw it at Joe, hitting him on the chest. He didn't flinch. Betsy gave a short, hard sob and turned on her heel. We could hear her running down the steps and few moments later a distant door slammed. \n\nI looked at Joe. He looked small. I raised my good arm and put it on his shoulder. He flinched and shook it off.\n\n\"Don't! Just... don't!\" He stood.\n\n\"Joe, I'm sorry,\" I said in a low voice.\n\nHe looked down at me and for a moment I thought I saw the same hatred I'd seen in Betsy's face a minute before. Then it melted and all that was left was despair.\n\n\"I can't do this,\" he whispered. \"I'm not like you. I can't be! Oh Jesus Christ, why is this happening to me?\"\n\nI watched as he stumbled out of the room. I didn't even have time to crawl to the toilet. I leaned over the tub and vomited.\n\nI don't know how long I sat there. The lather on my neck and shoulders had dried into white itchy flakes by the time Lucy found me.\n\n\"Michael, what's wrong?\" Lucy didn't panic very easily, but you could hear it in her voice as she crossed the room to me.\n\nI was beyond words. I sat there and shivered as she ran for a towel to throw over my shoulders. She rubbed my skin until I was rosy and then she rinsed out the tub. With as few directions as possible, Lucy ordered me to lean over it again and she rinsed out what was left of the shampoo. More scrubbing with a towel followed and then she dragged me to my feet. I was surprised how strong she was; her tiny frame must have been made of steel. It wasn't until she got me back in my room that she demanded to know what had happened. With halting words, I told her.\n\nIf I expected her to be shocked, I was mistaken. Lucy nodded understandably through the first part and only winced when I came to Betsy's surprise visit.\n\n\"Poor girl,\" she murmured, and now it was my turn to grimace. \"But it was bound to happen sooner or later. At least they hadn't married yet.\"\n\n\"I don't understand.\"\n\"Of course you do-you just don't want to admit it,\" Lucy looked at me with cool, but kind eyes. \"Michael, I've always known about how you feel about Joe. And more to the point, how he feels about you.\"\n\nI was dumbstruck. \"You never said anything.\"\n\n\"What was I supposed to say? And would you have listened if I did?\"\n\nShe had me there. We sat quietly together as the late afternoon sun dimmed and finally settled into darkness. Lucy left for a while and came back carrying a tray with our dinners on it. Food was the last thing on my mind, but she bullied me into it.\n\nI didn't know what to do. I was in no shape to chase after either Betsy or Joe, though I desperately wanted to talk to both of them. Just as well, I supposed, I had no idea how I could ever make any of this right. Still, I thought about phoning anyway. At least it would show I cared if nothing else.\n\nMy hand had stretched to the receiver when we heard the doorbell. I must have jumped because Lucy covered my hand with hers and squeezed. Again, I noticed her strength, but this time not the muscle and bone kind. She rose and went downstairs. I could hear murmuring and then footsteps on the steps. My heart twisted, I knew from their sound, that the feet were not Joe's.\nBeau knocked and then walked into the room. Lucy had not followed him. I swallowed hard.\n\n\"Hi,\" I said.\n\n\"Hi, Mike.\"\n\nThe room was almost pitch-dark except for a glint of moonlight through the window. I couldn't see his face clearly. I didn't need to. His posture told me this wasn't a social call, and the news he brought wasn't good. He walked towards me and his face came into focus. No, definitely not good.\n\nHe took a deep breath. \"I saw Joe.\"\n\n\"Did he tell you what happened?\" \n\n\"Some of it. Most of it I guessed.\" He saw my face and smiled unhappily. \"Shit, Mike. It weren't no secret-not to me anyways.\" As always in times of great stress or charm, his down-home Southern accent thickened. \"Ya'll might've done a good job foolin' yourselves, but my momma didn't raise no fools. I figured it was just a matter of time before ya'll figured it out yourselves.\" \n\n\"I don't know what to say about that.\" I was suddenly embarrassed and ashamed at the thought that all our friends had probably guessed my little secret.\n\n\"Don't need to say nothin'. Don't matter to me one way or t'other, if you want the truth. I just wish it had turned out a little easier.\"\n\nI sat up. \"How is he? Is he okay?\"\n\nBeau sighed and sat down on the edge of the bed. He picked at the coverlet for a minute before finally answering me.\n\n\"Mike... I'm sorry. He's gone.\"\n\nMy stomach churned and I wished I hadn't let Lucy talk me into eating. Joe had left. He'd decided he couldn't face me again, not even to say goodbye.\n\n\"Here,\" Beau said, as he reached into his back pocket and pulled out an envelope. \"He asked me to give you this.\"\n\nI took it like it was a letter bomb. There was nothing on the envelope except my name. For such a potentially lethal weapon, it looked harmless enough.\n\n\"Do ya'll want me to stay while you open it?\"\n\nI shook my head. I couldn't stop staring at the envelope. I felt like a snake charmer holding a python.\n\n\"Okay. I'll run along then,\" Beau stood and then stopped and looked down at me. \n\n\"Listen, Mike, I'm really sorry it turned out like this.\" He patted me on the shoulder awkwardly, then turned and left. \n\nI sat there and tried to get up the courage to read Joe's words. Slowly I tapped the end of it on my leg then raised it so I could tear it with my teeth. I turned it over and shook it. At first the letter stuck, but then it started to slide out in a soft, whispery whish. The white paper fell open to my lap. The envelope fell out of my fingers as I stared at the letter.\n\nIt was long - a couple of pages. I could see that well enough, but the words were small and blurred in the shadows of the room. I struggled to reach the bedside light. I finally succeeded and it flicked on with a click. The room came into sharp focus, the letter along with it. I picked it up, took a breath to steady myself and started to read.\n\n\n\nDear Mike, \n\nBy the time Beau gives you this, I'll be on my way to Italy. Remember, I told you my brother Josh is studying there for the next six months. It'll be good to see him, almost like old times.\n\nI don't know what to say to you. I guess the first thing is not to blame yourself for what happened between me and Betsy. Whatever she thinks, I know it's my fault, not yours. Someday, maybe I'll be able to convince her of that.\nI'm not going to say I didn't know what was happening today between us. I did, and I won't lie and deny that a part of me wanted it. But Mike, that was only a part. There are a few places inside of me that hate how I feel about you. The rest are just confused as hell. \n\nIt's the confused parts I have to deal with now. I need some time to think about where I'm headed and what I really want out of life. Maybe I can find some of those answers in Italy.\n\nOh God, I sound like such a selfish prick. Here you are just out of the hospital and I dump all this shit on you and run away. Hell, for all I know, you were appalled by what happened and are thrilled to see my sorry ass gone. But I don't think so.\n\nI wish I had the courage to stay and see this through, but I don't. Whatever else, I hope that someday you can forgive me and remember again all the good times we had together. Oh shit, this sounds like goodbye, but it isn't, I promise. Whatever I decide, I promise I'll let you know. I'm not that big an asshole. At least I hope not.\n\nI'm so sorry,\n\nJoe\n\n\n\nBy the time I was done reading, tears ran down my face. They didn't stop for a long, long time. \n\n\n... To be continued \n"
    ],
    "authorname": "jfinn",
    "tags": [
        "jesus joe",
        "couple small",
        "feeling thought",
        "betsy stood",
        "joe he'd",
        "poured big",
        "he'd decided",
        "kevin joe",
        "mike joe",
        "joe stepped"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/the-human-condition-ch-07"
}
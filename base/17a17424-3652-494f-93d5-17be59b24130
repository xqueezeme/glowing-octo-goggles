{
    "title": "Mind Games Ch. 04",
    "pages": [
        "\"So, how are you not going to be fucking that shotgun in five seconds?\" \n\nIf Tracy knew that I and Jules had fucked while I had been making my anti-telepath collar, she didn't show it. Instead, all of her attention was on me, my shotgun, and my soon to be coming hideous death. I imagined what it'd be like to have the barrel of the gun entering me...there...and shuddered, making a face. My collar started to vibrate softly against me - a gathering buzz, as if a storm was coming. \n\n\"Don't...\" I glared at Tracy. \"Don't give it ideas!\" I sighed, then tapped the collar - my finger touching a small green button next to my throat. \"And this is going to keep me from being controlled. I hope.\" \n\n\"What is it exactly?\" Amanda sounded like she was starting to come out of her fuge. \n\n\"Quite clever, actually,\" Jules said - trying to sound cheery and not guilty. In the end, he merely sounded guilty. I knew, faintly, that he was married. And I knew that it was a bad thing to fuck a married man. But at the moment, the only thing I could think of was the fact that if I was going to die, at the very least I wasn't going to die a virgin. Yes, I know, I had probably had sex before i had been put into cryo. But that... \n\nDid it count, if you didn't remember it? \n\nI shook my head as Jules walked around to the side, pointing at my collar. \"The collar puts a burst of electrical energy through Beatrice if she doesn't touch the button every, uh, sixty seconds.\" \n\nThe collar started to vibrate again. I tapped the button again. \n\n\"So, if the telepath controls me,\" I said. \"I won't touch the button, and then it shocks me. That seems to disrupt the telapath's puppetry.\" \n\nTracy didn't look convinced. \n\n\"So, we're going to stay here?\" Amanda asked. \n\nI nodded to her, then checked the shotgun. The glowing ammo cell within shimmered at me. I looked at Jules as he whistled softly. His eyes were locked on that glow. \n\n\"Well, son of a bitch,\" he said. \"Where the hell did you get that?\" \n\n\"Found it,\" I said, biting my lip. \"Why? What is it?\" My eyes flicked down to my shotgun, back to him. \n\n\"It's a Tesc power core,\" he said, then shook his head. \"I'll tell you more later. Once the telepath is dead.\" \n\nI nodded. \"Right. It's safe, right?\" I asked - feeling goosebumps crawling along my skin at the thought of using a Tesc power core for anything. The fact it was going to be the primary way I was going to not get my skin peeled off my by own fingernails didn't help either. Jules nodded and I turned to face the boarded up door leading out of the game shop. My finger tapped the collar - the motion already becoming second nature. Then, I started out into the mall once more. The thick stench of death still hung in the air...but my nose, by this point, had started to filter it out, in the same way my mind filtered out the need to tap the button again. And again. And again. But it gave me a wonderful sense of time as I padded to the suicide pool. \n\nIt took me two minutes - two pushes. \n\nAnd when I arrived, my eyes saw something, something that looked off. But what was it? \n\nIt clicked. \n\nFive corpses were missing. They had been slotted there, there, there. The absences were as clear as a missing tooth in a smile. I started to wrack my brain, trying to remember which corpses they had been as I looked around - checking the entrances to the open part of the mall, checking the floor. The shoes were gone too. They had quietly gotten up and put their fucking shoes back on. Why did that make it ten thousand times worse? \n\n\"Lass?\" \n\nMy heart exploded and I dropped dead of shock. Or, at least, that was how it felt. I almost fired my shotgun off into the ceiling and sagged against the wall, panting. \n\n\"L-Lucas!?\" I asked. \"What. The. Fuck. Where the fuck have you been?\" \n\n\"Hacking into the computer systems of the most private part of the station, lassie,\" he said, sounding annoyed. \"You wanted the security footage, I've been getting at the security cameras. There's some seriously mean stuff on the computers here. Things that would fry out my hardware. The last thing I want is to be trapped in a metal box without a computer...\" \n\nI frowned. \"You could have warned...\" I sighed. \"Do you have it?\" \n\n\"Aye, I have it. And it's not nice shite to wat-\" \n\n\"Who grabbed the corpses from here,\" I said. \"The suicide pool.\" I added, in case he wasn't watching me directly. \n\nThere was a longish pause. \n\n\"It was Maria, wasn't it?\" I asked. \n\n\"Nay,\" he said, quietly. \"Though she has arrived. Bet you wish you had kakked her now. Now, something, it wasn't in any of the cameras, it came by and the corpses just stood up and headed for the adult section.\" \n\nI frowned. Great. \n\n### \n\nThe adult section of the mall was colored darker, richer hues than the rest of it. There was also a set of double doors that had been designed to keep children out via a combination of foreboding designs and a pair of gates that were swung shut against smaller individuals, but opened automatically when someone tall walked up to them. That automaticness of them was likely why they hadn't been torn to pieces by monsters at any point - and as they swung open, I saw that I was actually following a trail, of sorts. \n\nBecause someone had left behind a shirt. The icon on the shirt danced and cavorted before me, and I could almost hear the jingle that was supposed to go with it. Fruity oaty bars my aching ass. I scowled down at it, then muttered under my breath. How was it that being in cryogenic storage had wiped out all knowledge of my name, my past, everything about me, but I could still remember a fucking jingle for snack food? \n\n\"Lucas, you ever think that we gave corporations too much autonomy?\" \n\n\"No,\" he said, his voice so dry that it was hard to tell if he had the worlds best poker face or was utterly oblivious. \"Why do you ask?\" \n\nA skittering sound jerked my head up. I saw the shiny, smooth dome of a Brood, peeking around the corner at the far end of the alleyway leading towards the adult section of the mall. My heart stopped for a moment and I knew exactly which corpses had been taken, and why. Women. Women that could birth the Brood, dead or alive. The Brood jerked back just before I snapped my shotgun up. I tapped my collar by jerking my shoulder up against the button, hurrying forward. \n\nThe main lobby of the adult section made it quite clear why this was adult. I saw two TempleSoft robobrothels on the first level alone. I could hear the faint sound of whirring and gasps of pleasure coming from the one on the left, the male voice husky and deep and slightly artifical. The Brood, though? No sign. The upper levels sold what seemed to be porn, but there was also an upscale restaurant place called The Safari, which had a robotic fusion of a human and a lion, sculpted to look utterly gorgeous. The marquee proclaimed: DISNEY NIGHT. \n\nMy brow furrowed. \"Disney...where have I heard that?\" \n\n\"Dead corp, their IP is up for grabs,\" Lucas said. \"Half the cameras here are smashed. The other half are linked right to the TempleSoft blackbox folder for future blackmail in case an employee selfterms.\" \n\n\"Whazawhat?\" I asked, stepping slowly forward towards the robobrothel that had noise coming from it, shotgun aimed right at the door. \n\n\"Quits,\" Lucas clarified. \n\nThe door hissed open and I saw that the main lobby of the robobrothel was tastelessness personified. Breasts and cocks were on display in gaudy, flashy terminals that were designed to draw the eye with quiet, purring voices that spoke up the instant the computers detected anyone looking at them. My eyes settled on what looked like a near perfect replica of Jules' cock and a voice purred in my ear via some trick of speakers and shaped rooms: \"Take Lance for a ride you won't forget - fully programmed for three eras. Indulge yourself on a slave's member in the 18th century, or maybe swing with a brotha from the 1970s...\" \n\nI jerked my eyes away. \"Gah!\" I made a face. \n\n\"Hey!\" Lucas sounded aggrieved. \n\nI heard that male voice again. \"Oh baby...\" \n\nThen, next to it, a hiss. I recognized that hiss. It was a member of the Brood. I stepped up to the corridor leading deeper into the roborbothel. A pair of men who looked like they had been pinned to the floor, their thighs spread, their anuses still dripping with pale white liquid, their dead eyes filled with bliss, spread out between me and the only door that was open and had light coming from it. A shadow cast by that light showed a woman's form, her breasts bouncing, her moans soft and restrained and...somehow desperate. \n\nI hurried forward, stepping over the corpses, biting my lip hard enough that I almost bled. \n\nThe room inside was the end of something horrifying - and yet I couldn't look away as I peeked around the corner. The woman was clearly held there by the telepath. I recognized the tightness of her muscles, the expression of confusion and eagerness alike on her face. She was poised over 'Lance', his massive black body writhing underneath her, his cock plunging into her again and again. His eyes were closed and...I had to admit...ah...it was a very...detailed and accurate robot. His cock plunged into the woman's sex, spreading the pussy lips wide. Seed dripped around the member and from the way she trembled and whimpered, I knew she had to be there for a while... \n\nBut standing to either side of her were the Brood. One of them was the type I had seen before - sleek and segmented and hideously beautiful. The other was subtly different. Smoother. Longer head. And rather than a member like the first one, a tentacle emerged from between almost vaginal lips between its chitinous hips. That tentacle spread outwards at the tip, fanning out into an almost conical shape as it caressed the woman's face. Her lips were skinned back in a rictus grin and her eyes were filled with terror and pleasure alike. \n\nI gaped - unable to move, my body locked into place. The only movement I made was the automatic gesture - tapping my collar. \n\nThe tentacle pressed to her face. It sealed around her nose, her mouth, her jaw. Filaments spread outwards from the contact points, working into her skin, forming a growing spread of grey veins underneath her skin, growing towards her eyes, which rolled backwards into her head. Her back arched and I saw her muscles growing slack. The telepath had loosed its control over her. Her throat bulged and gulped, gulped, gulped. The...the Brood was feeding her something. \n\nAs I watched, her skin tuned the same sleet gray as Maria had. Her breasts firmed and grew larger as her fingers pressed to 'Lance', then molded into him. The robot continued to fuck her, his hips moving less and less like a human's would. Her skin and his robotic facsimile started to merge, flowing together and mixing like chocolate ice cream mixed with vanilla. Her fingers vanished into his pecks as if he was a puddle of mud, her arms rooting into place as she started to writhe happily, her eyes closing. Her mouth was covered by the tentacle, but... \n\nBut she sounded joyous. \n\nHer hair grew longer and braided together, sliding along her back into dreadlocks made of metal and glowing blue lines. Her skin grew segments along the shoulders and elbows and she rolled her shoulders as ports on her back opened and Lance...rattled. Pieces inside of him shifted, and then started to come out of her shoulders. A pair of mechanical manipulators, long and spindly and spider like stretched free, making her croon happily as Lance's arms twisted, clicked and pushed against the ground. He thrust upwards and...and... \n\nThere was no woman. \n\nNo robot. \n\nThere was just one thing. A centaur creature, with the black android forming the legs, his hands and feet pressing to the ground as if he was a contorted spider. His cock merged with her sex, and started to slide up and down like a piston, her thighs and his merging together so smoothly that I couldn't tell one from the other, their skin tone matching - not quite as dark as Lance, not quite as pale as she had been. Her breasts were left exposed, hanging as she was hunched over him ever so slightly, her human arms merged with his chest. HIs head rolled backwards and a massive, black tentacle-tongue thrust from between his jaws. \n\nFrom her posture...and from the way that his arms and legs twitched, that tentacle was their new cock. \n\nThe Brood who had brought this transformation about slipped the tentacle away from the woman's face, leaving her with a beautific smile, white dripping from her grey lips. From the shadows, Maria emerged. She caressed the new hybrid's face, her voice a quiet croon. \n\n\"How do you like it?\" \n\nThe hybrid flexed all four of her legs - what had once been elbow joints twisted with quiet creaks. She giggled, her voice high and cheery. \n\n\"I understand now,\" she whispered. \"I love it. Thank you. Why did I struggle, again?\" \n\n\"We were all fools,\" Maria said, caressing her chin. \"Welcome to the rest of eternity, sister.\" \n\nThen, gingerly, like a woman kissing her lover for the first time in centuries, Maria leaned forward and locked lips with the new hybrid. I watched, my stomach roiling, my cunt soaked, my nipples hard enough to cut glass, and a sick, wanting need. I wanted to be that complete. But...it was... \n\nMy collar went off. Electrical current surged through my body and the confused desire that I had been feeling buzzed away from my brain, clearing out the musk and leaving me with only fury. I slapped my palm against my collar and snarled as I stepped around the corner, leveling my shotgun at Maria and her new convert. The new convert hissed, drawing backwards - her tentacle-cock withdrawing into her second head, which glared at me. Upside down. From between her...thighs...what would be her thighs if they weren't some robot's arms. \n\n\"Hello again, Beatrice,\" Maria said. \n\nMy brow furrowed. \"How do you know my name?\" \n\n\"I know a lot of things,\" Maria said, grinning. \"Hows David doing?\" \n\n\"Who the fuck are you talking about?\" I asked - the name crawling through the back of my mind. It meant something. I knew a David. The two Brood hissed. The 'normal' Brood had longer claws, so I decided to call him a Warrior Brood. The one who had transformed the woman from human being to fucking monstrosity...well...I figured if they could do that the only good name would be a Worker Brood. His claws did seem to be smaller. \n\n\"Lucas knows,\" Maria purred. \"Though, I have a question for you...\" \n\nI resisted the urge to cock the shotgun. I had already cocked it. \n\n\"How many bullets does your pistol have?\" Maria asked, her tongue elongating as she licked her lips - sliding down to lick each of her hard nipples, leaving them glistening. \n\nI smirked, slightly. \"Enough.\" \n\nThe Warrior Brood leaped at me. I shot it in the head. The head painted the wall with bits of brain and blood and the Worker Brood hopped onto his creation's back, like she was a horse. The hybrid snarled at me, then drove forward. Her body smashed into the wall separating this brothel room from another and the wall exploded inwards, metal screeching, sparks spraying from the torn and ripped cabling that had once provided power between the rooms. The next room over had five corpses, each one of them laid in a circle. \n\nEach one had fucked the other to death. Literally. Five men, each with their cock in another man's eye, their bodies forming a perfect circle - disturbed only by the hybrid running away from me. The Worker on the back looked back at me. But before I could draw a bead, Maria leaped onto me. Her hand closed around my throat, touching my collar. Her finger pressed the button curiously. I had once spared her. \n\nBut that was while she had been asleep. Knocked out cold. Helpless. \n\nThere was trying to stay human. \n\nThen there was being a fucking idiot. \n\nThe shotgun pressed to her belly and I growled. \"Bye Maria,\" I hissed. \n\nTHe shotgun blast took her and threw her against the wall, her hand releasing my neck. I hit the ground and gasped as Maria started to push herself to her feet, blood dribbling from a dozen puncture wounds in her belly. She shirked. \n\n\"Nooo!\" She clutched at her belly. \"My baby!\" \n\n\"Eh,\" I said, leveling the shotgun as I aimed it at her head. \"Take it up with the telapth.\" \n\nI pulled the trigger and blew Maria's head off. \n\nI staggered back against the wall, panting heavily. Her corpse sprawled on the ground and I felt a curious mixture of detached relief and...deep sorrow. \n\n\"Fuck,\" I hissed. \"I wanted to save her.\" \n\nMy eyes blurred. \n\n\"There t'aint much left to save,\" Lucas said. \n\nTick tick tick. \n\nI frowned. Over the sparking, over the distant clatter of the hybrid. Over my own pounding heart and aching soul. I could hear that tick tick tick. That sound of the telepath drawing closer. I tapped my collar and started towards the hole. I paused, for a moment, Maria's words buzzing in my brain. My hand went to my backpack...and I shook my head. Not the time. \n\nThen I felt it. The control slid into my body like a wave of ice. My muscles locked and my eyes went unfocused as the telepath made me drop the shotgun to the ground. It clattered and clunked and my legs moved mechanically. I started counting the seconds in my head as I walked out and into the opening. The Worker Breed and the hybrid it had created were standing in the open plaza. The ticking sound that I heard came from above me. I didn't try to fight - and so felt light as a breeze as I was puppeteered towards the two. \n\n\"Y-You killed her,\" the new hybrid hissed. \n\nMy mouth opened and I dropped my backpack. My motions were slack and jerky - the telepath working sloppily. I wondered if it was scared of getting shocked again, or if it was upset too. The thought made me feel a buzzing sense of joy. Yeah. Suffer. Suffer you fuckers. Suffer for what you did to Maria. TO this girl. She had been on that robot for how long? Weeks? She had been raped and broken...then raped again. \n\nMy backpack hit the ground. \n\nMy hand pulled out the pistol. \n\n\"Make her explain,\" the woman snarled. \"Don't you know...don't you know what you are?\" \n\nThe control on my mouth slackened and I looked at her with pity. \"I'm here to stop you.\" \n\nThen the collar went off. Pain lanced through my body, but I ignored it, spinning around and seeing the telepath. It was a hideous mash-up of skull-like faces and bulbous tissue, clommed together into a mass not unlike a tumor given tendrils and clicking spider-legs. Each leg was tipped with a curved blade. That was made that tick tick tick noise. My pistol leveled on it and it wailed in fear and confusion as I felt its control probing at me through the pain. I put three bullets through its body, painting the wall with blood. I spun around and fired another five shots into the Brood. As it fell, the hybrid reared backwards and the tentacle-cock emerged from the second head. \n\nIt shot towards my throat, the hybrid screeching in fury. \n\nI caught it with my off hand and sent every jolt of electrical power I could through her. Her backs arched and she screamed from both mouths, then toppled to the side, smoking softly. As she sprawled there, I let go of the tentacle, panting. \n\n\"I failed Maria...\" I whispered. \"I'm not fucking failing you.\" \n\nI took the collar and set the timer to an hour. Since, well, I didn't know when I'd run into another telepath. Then I knelt down, grabbed the hybrid, and started to drag her along the ground - swearing every step of the way as she clattered, thumped and clunked. ",
        "### \n\n\"Oh god...\" Tracy whispered, her voice ragged. \"It's Danielle.\" \n\nJules and Marisa were working together to drag the corpses from the suicide pool to the morgue. Apparently, there was one on every level. That said a lot about TempleSoft. Nothing good. I sighed as I checked the restraints keeping the hybrid trussed up in case she woke up, looking up at Tracy. \n\n\"Did you use to work with her?\" \n\n\"Yeah,\" Tracy said. \"We both worked in corporate, handling the orbital transfers between the corporate resorts.\" Her voice took on the faint monotone of someone who was just talking to be heard. \"We had one or two every few days. Big people. Rich people. They show up, they want to get here with minimum fuss and bother. You'd think that'd be a flip and burn, just straight there and there. But no, see, most of these pleasure yachts didn't have major thrusters. Why ever accelerate harder than 0.1G? Cheaper and leaves more room for the fuckslaves.\" \n\n\"Did you meet me?\" I asked, looking at her. \n\nTracy blinked. \"I...don't...\" She paused. \"Wait, you said your name was Beatrice?\" \n\nI nodded. \n\n\"No, but Danielle did,\" she said, looking down at the hybrid. \n\n\"That was why she said she knew who I was, huh?\" I asked, frowning. \n\nJules came back, puffing softly. \"They're being recycled,\" he said at my questioning look. \"But Marisa and I heard...well...Brood.\" He frowned. \"Not the big ones, the smaller ones. They're definitely congregating in the gardens.\" \n\nI groaned. \"That means Warriors are going to be coming out soon.\" I rubbed my face and then stood up, pulling out my pistol. \"Before I go, tell me about the Tesc power source. I want to know if it's going to crap out on me before I go throw myself at five Broodmothers.\" \n\n\"Well, uh, quick version?\" Jules asked, looking nervous. \"The Tesc don't have time. That is, when we sent the probe into their dimension, it read that it was detecting temperatures at absolute zero and five thousand million degrees over the point where quarks stop being able to form. The Tesc don't have a tomorrow or a yesterday. Everything happens at the same time, constantly. Our artifacts sent into their dimension drag time with them - small amounts in the case of the probe. Large amounts when it comes to us.\" He sighed. \"So, when-\" \n\n\"Seven bullets,\" I said, frowning. \n\n\"So, when...what?\" he asked. \n\n\"This pistol has seven bullets,\" I said, frowning. \"It had seven bullets when I pulled it out of the locker. It had seven bullets after I fought Maria for the first time. It has seven bullets right now.\" I looked at him, my jaw tightening slightly. \"You said things, not people, have less time?\" \n\n\"What...what...what?\" Jules asked, rubbing his nose. \n\nI held up the gun and then fired a bullet into the ceiling. It thudded home. I fired another bullet into the wall. The others gaped at me, and Jules jerked away from the report of the gunshot. Then I discharged the magazine, holding it up. Seven bullets. I turned, and hurled the magazine as far away as I could. It hit the ground and skittered around the corner. Then, turning back at Jules, I held up the gun, then aimed it at the wall and pulled the trigger. Another bang. \n\n\"I-Its semi-automatic,\" he stammered, trying, groping desperately for an answer that wasn't what I knew it was. \n\nI pulled the trigger again. Another bullet. \n\nThe magazine was back in the pistol. It had never left. It could never leave. The gun had no time - it merely was, stuck forever at the point that it had been in when it...and everything else on the fucking station was dragged into the Tesseract. \n\nI hadn't been looking at Earth at all. \n\nI had been looking at their homeworld. \n\n\"What do we do?\" Tracy asked. \n\n\"Lucas?\" I asked. \n\n\"We're fucked, lass,\" he said - causing the rest of the group to jerk in surprise. \n\n\"Lucas, you son of a bitch!\" Jules exclaimed. \"You're alive!?\" \n\n\"I'm stuck in a closet down in storage, but aye, I'm alive, Jules,\" he said, sounding distracted. \"Listen, all my readings say we're around Earth. But I think that they're just detecting leftover...I don't know...shite that was dragged in with us? Or the computers are fucked? Either way, if we're in the Tesc dimension, we're fucked.\" \n\n\"No we're not,\" Jules said, his voice firm. \"We have the portal generators down in Physics Labs! And we have a fucking Tesc right here!\" He kicked the hybrid, which grunted softly - her eyes were open and glittering. \"We can open a portal, target it right at Earth, and waltz out and leave this station behind to rot.\" \n\nI nodded - and heard hissing. The sounds of clattering feet echoing down the corridors approaching our area. I frowned. \"Everyone, get the hybrid to the elevator!\" I said, snapping up my shotgun - my timeless ammo at the ready. \"I'll hold them off.\" \n\n\"How, you're just ONE fucking girl!\" Tracy howled - fear making her voice screech. I fired the shotgun into the side of the fountain. Water poured over the chunk I took out of the lip, scudding across the floor, rushing towards the corridor leading from one lobby to this. Five Warriors came rushing out, screeching as they sprinted at us. I lashed out with my left palm and lightning slammed into the lead figure - then sparked along the water. Each one stood, their backs arching, their mouths wide in pain as lightning crackled along the water, surging and buzzing through their bodies. They all collapsed at nearly the same moment, a pile of corpses. \n\nI turned back to Tracy. \n\n\"That's fucking how!\" I snarled. \n\nThe four others gaped at me. Then they turned and ran, grabbing up the hybrid who howled at me. \n\n\"You're gonna fucking die, you bitch!\" \n\n\"Yeah,\" I said. \"I heard that before.\" \n\nThen the Brood were in the room. They skirted around the puddle of water - fifteen of them, maybe twenty. And as I glared at them, I felt a slow, shuddering rage burn through me. They had abused women's corpses, perverted them in the most grotesque way, just to breed more monsters to break and hurt and ruin and maim and kill. I trembled and snarled and felt my heart thunder faster and faster. Before I knew it, I was among the Brood. I leaped away from some slashing claws, grabbed one of their heads, and smashed it into the hard pavement that ringed the fountain. Their skull crumpled and I turned, then blasted one with lightning from my palm. \n\nI didn't get tired anymore, not with the lightning. \n\nThe surge smashed into two of the creatures, sending them sprawling backwards. Then I felt claws slash along my back. I rolled with the impact, skidded between a pair of legs, and let the nanites slick themselves against the water. I fired once, twice, three times, pumping the shotgun mechanically as I blew Brood in half - from the crotch to the head. As they hit the ground, I kicked out with one leg, sending a Brood sprawling to the ground. I put the shotgun into his mouth and pulled the trigger. The kickback skidded me back against the wall. \n\nA Brood lashed at my face. I ducked and metal shavings flew out into the air. I shoulder checked it as I stood, sending it sprawling into three of its fellows. I pumped and fired into the mass, the thump of pellets tearing through flesh giving me an aching feeling between my thighs. I pumped and fired again, then smashed jaws apart with the butt of my shotgun. Blood dripped from my face as I laughed, exhalting in their deaths. There was no moral gray area here. \n\nThere was just ripping. \n\nTearing. \n\nSnapping. \n\nI stepped onto a half-dead Brood, my heel driving its head almost a hundred and eighty degrees, then ducked under another one's slash. I didn't know how I was this fast. But since I was standing on a corpse, I leaped upwards and fired a lightning blast right down. It hit the corpse, surged through the water, and electrocuted another half dozen of the fuckers. AS they spasmed, I landed and felt the buzz of the remaining electrical currents, fading quickly. \n\nThree Brood were left. \n\nI let the shotgun rest on my shoulder. \n\n\"Run,\" I said, my voice flat. \n\nThe Brood turned and ran off, as quickly as they could scamper, leaving behind piles of corpses and smoking bodies and severed arms. I shivered and stepped off the body I had been on, breathing slowly out. \n\nI looked around. \n\nAnd not since I had been roundly fucked by Jules had I wanted to smoke a cigar quite so bad - the need tingling through me, a half remembered thing that I was fairly sure Beatrice did quite often. \n\n\"Damn,\" I purred. \"Damn I'm good.\" \n\n### \n\nThe elevator doors opened. \n\nThe other four gaped at me as I stood there, blood dripping from my face. I reached up and casually flicked a chunk of chiten from my shoulder. \n\nJules shook his head slowly. \"W-What are you, Beatrice?\" \n\nI looked back at where I had left the pile of dead Brood, then back at him. I smirked. \"Their worst nightmare, I think. Come on. Lets get you guys to Physics.\" \n\n\"Us?\" Tracy asked - her voice tremulous. \n\n\"Yeah,\" I said, stepping into the elevator, then tapped the button for physics. As the elevator started to rattle down, I leaned against the wall and tried to not notice how scared of me Jules looked. Then he forced that expression down and smiled wryly at me. \n\n\"Where are you going?\" he asked. \n\n\"Corporate,\" I said. \"Tracy said that one of her coworkers helped get me - or Beatrice, or whatever - on the station. The computer says that I was here to wait for my brothers to die of old age to get the fortune. But I'm starting to doubt that story for some reason.\" \n\n\"Fair enough, lassie,\" Lucas said. \"A-And, ah, maybe while you're down there, you can get me out of this closet and get me to the portal too?\" \n\nI nodded. \"Can you get to the security cameras for physics?\" \n\n\"Sure can.\" \n\n### \n\nThe elevator ride passed in uncomfortable silence. Once the doors rattled open, though, we had something to take that silence and make it worse. For the doors opened into a corridor from hell. The walls were splattered with blood and the stink of rot was even more intense here. Firearms and spent shell casings lay on the floor, while dozens - hundreds? - of dead Brood were mixed with the Templesoft security and their drones. I walked slowly forward, shaking my head quietly. \n\n\"This is what Lucas told us to expect,\" I whispered. BUt it was one thing to be told 'it's a right mess in there' and another thing to see it. \n\n\"This must have been where the first incrusion started,\" Jules said. \"If it wasn't my off shift...\" He choked himself off. Amanda was quietly sick, vomiting in the elevator. The hybrid, who had been set down near the dried blood, slid her tongue against the floor with a slow, eager lick, her eyes glinting with malice. \n\n\"Come on,\" I said. \n\nWe made a queer band as we walked through the carnage and past the work spaces and labs that had been smashed and ripped and torn to shreds. It was clear that this place was less hard nosed than Engineering. There were no actual prototypes here. Just computers, all of them designed to run simulations of physics problems. There were a few labs for doing actual experiments, but those had been smashed up the worst of all. But while the security forces had wheeled out the heavy weapons here, the Brood had hit back with...stranger things... \n\nWe walked past a bulbous gun-like biomechanical throne, one that had been fused to a quartet of Brood, turning them into a kind of legged wheel for the thing. They were canted to the side, the weapon split almost completely in half by an equally slagged artillery laser that some enterprising security officer had fired off before being raped to death, his eye sockets still bubbling with Tesc cum. \n\n\"The amount of this battlefield that is basically an orgy is really fucking creeping me out,\" I whispered. \n\nThe others nodded. \n\nThen we came to the central lab and I whistled quietly. \n\nThe portal that had been used to open the hole to the Tesc dimension didn't look scientific in the least. It looked, rather, like the collar of my nanite suit, ballooned to a size large enough to make the runic inscriptions on the inside easily seen, rather than faint impressions. Its cyclopean size combined with those runes made it seem like some ancient artifact, one that should be steeped in blood and sacrifice, not in scientific equipment. Corpses had been heaped around it. Most of them wore scientific gear and bore faintly shocked expressions, even as their bodies peutrified. \n\nI breathed out, trying to breath shallowly and through my mouth. \"Okay,\" i said, turning to face the others. \"What do we need to get this to work?\" \n\nJules - his eyes hardened, his shock worn away by endless horrors - pursed his lips. \n\n\"The powers off,\" Tracy said, quietly. \n\n\"The computers are slagged,\" Jules said, nodding. \n\n\"So, we need power and a new computer rig,\" I said, nodding. \"And a Tesc's biological matter. Which we got.\" I kicked the hybrid. The hybrid snarled at me. \"Don't snarl at me, Danielle. We're going to fucking fix you if I have to drag you into the Templesoft lobby and start shooting people until they get fucking doctors.\" \n\n\"I'm touched,\" she purred - her eyes flaring with hatred. \"I'm sure they'll listen to you immediately, you fucking sleeve.\" \n\nI ignored her, looking at the others. \"There should be computers in Corporate, right?\" \n\nTracy nodded. \"Not as strong, but...we don't need a full supercomputer for this, you have the basic calculations, right Jules?\" \n\nJules nodded as well. \n\n\"B-But how do we stay safe?\" Marisa asked. \n\n\"I got an answer to that, lassie,\" Lucas cut in. \n\n\"For fuck's sake, my name is Beatrice!\" I shouted at the ceiling. \n\n\"Sure about tha?\" Lucas asked, his soft accent somehow making those words feel and sound even worse. I shuddered and closed my eyes, trying to not break down at the thought. I shook my head. \n\n\"Call me Bea,\" I hissed. \"Okay. So, what's the solution?\" \n\nLucas led us to them while Marisa and Amanda started to clear out bodies. Jules, Tracy and I all whistled in almost the exact same tone as we found what Lucas had spotted with the cameras. A pile of Brood had piled up around a corner. There, four automated turrets had been set up by a terrified looking engineer. With the corpses piled before him, he had quietly taken out his pistol, shoved it against his temple, and pulled the trigger. His corpse laid there, sprawled. But his turrets continued to tick from side to side, whirring so softly that we hadn't heard them till we got close. \n\n\"They used all their ammo!\" Tracy said. \n\nI stepped over the wall of bodies, grunting as I hopped down. I grabbed onto the ammo container, then popped it open. \n\nThousand of fresh rounds gleamed within. I slapped the container closed again as the turret whirred left, then right, then left. I looked at Tracy and smirked. \n\n\"Hey,\" I said. \"There's a silver lining in every cloud.\" \n\nTO BE CONTINUED"
    ],
    "authorname": "DragonCobolt",
    "tags": [
        "erotic horror",
        451,
        "body horror",
        "body transformation",
        "mind break",
        "mind control"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/mind-games-ch-04"
}
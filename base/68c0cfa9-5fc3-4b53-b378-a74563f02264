{
    "title": "At Long Last: Gwen Ch. 05",
    "pages": [
        "Chapter 4 concluded with Will warning Derek not to lay a finger on Barb. \n\n-------------------------------\n\nIt was May already and Gwen and I had accomplished a few things and Gwen had accomplished some major ones including conducting a brilliant job interview and refurbishing our house. Her next tasks were to get her medical and dental records to where we were living and this entailed finding competent doctors and dentists. In a university that has a medical and dental school, this is not a difficult task and Gwen handled this easily.\n\nI contacted a contractor who came to the house and I discussed with him an addition that I could use primarily as a golf room with a hitting net and putting green. It was feasible, but costly and I nixed the idea given that I could always go to the golf course and practice.\n\nI had three consulting trips looming and Gwen said she had decided not to go with me to save money for our Hawaii trip. I convinced her to come with me on one trip and she chose the Texas one over the Delaware or Michigan trips. \n\nAs she indicated she would, Gwen contacted my minister to inquire about his availability and that of the church and she ran into a brick wall. While both the church and he were available in early or mid-June, he adamantly refused to discuss a wedding with Gwen on the grounds that I had to have been duped in some way into marrying Gwen.\n\nGwen was both shocked and hurt and she came to me fighting back tears of frustration over the treatment she had received from my minister. I phoned the minister and arranged an appointment for Gwen and me to visit him.\n\nWe met with the minister on a Tuesday morning and we really dressed for the occasion. I had on a dark suit and dark red tie and Gwen wore a white frilly blouse with a dark blue suit. Harold, my minister of ten years greeted me warmly and Gwen not nearly so warmly.\n\nI summarized my understanding of what Harold had told Gwen and he agreed that she had provided a faithful rendering of his words to her.\n\nI then said, \"Harold, why would you say to Gwen that I am not a candidate for marriage to her.\"\n\nHarold nodded and said, \"Will, I've known you for ten years and I believe you've been in a pew every Sunday you've been in town for those ten years. During these ten years you've been a generous benefactor of our ministry here, but you have not, to my knowledge, attended one men's breakfast, one work detail, or one reception, and I've seen at least a dozen women practically throw themselves at you and you've politely walked away from everyone and every activity in this church. You are not a social person in any sense of the word. Were you, you would have kept company with at least one of those dozen women, some of whom were quite intelligent and quite engaging. Now, suddenly, you appear with a considerably younger woman, quite a beautiful woman at that, and say you want to be married. If you feel the same way in a year, come back and we'll talk.\"\n\n\"Is that it?\" I asked. \"Is there room here for discussion?\"\n\n\"Yes, there is, Will. In a year if you feel the same way, come back and we'll talk. Will, I'm trying, as your minister, to protect you from yourself and this woman, whom I fear has designs on your status, connections, and money.\"\n\nOn a 'stun scale' of one to ten, Harold had just delivered a ten. I sat very still for the longest time and then looked at Gwen and asked, \"Is there anything you'd like to say to Harold?\"\n\nGwen said, \"Yes, I would.\"\n\nShe then stood up, leaned on Harold's desk and said in a controlled voice dripping with venom, \"Fuck you and the horse you rode in on, you pompous asshole.\"\n\nOn a 'stun scale' of one to ten, Harold's comment had just dropped to a five and was replaced by Gwen's newly assigned ten.\n\nWe were all seemingly frozen in some kind of odd tableau with Harold and I shocked into speechlessness while Gwen glared at Harold.\n\nI have no idea why, but I suddenly started laughing and said, \"That's my Princess,\" and I stood and took her by the hand and led her out of Harold's office. As we exited, I turned slightly and said, \"Thanks for your time, Harold.\"\n\nHarold had nothing to say, but not because he lacked manners. He was simply too shocked to say anything.\n\nAs we walked out of the church, hand-in-hand, Gwen was very upset at her outburst and said, \"I'm sorry. That was a terrible thing to say.\"\n\nI laughed again and said, \"Let it go, this time. It may have been terrible, but it may well have been warranted.\"\n\n\"Oh Will, I'm so sorry. I was just so angry at the way he treated you. He thinks you're a sixteen year old throbbing hormone, or a doddering old fool.\"\n\nI noted, \"Add to that he alluded to you as a gold-digging young woman. I think he did a pretty good job of insulting us.\"\n\nWe had reached the car and Gwen said, \"I do admire the fact that he was so forthright, though. There's nothing namby-pamby about him.\"\n\n\"You, either,\" I added.\n\nGwen laughed and I added, \"He was holding four aces and you had a Colt .45. I think you won that hand.\"\n\nGwen suggested that it was a hollow victory because she wanted a church wedding and we had no options at this time. I thought a moment and suggested, \"We could try Campus Ministries.\"\n\nGwen said, \"Of course! Why didn't I think of that?\"\n\n\"Shall we?\" I asked.\n\n\"Sure,\" Gwen responded. \"Let's go there now.\"\n\nWe drove to Campus Ministries and parked and walked to the building and read the directory that listed various Protestant denominations, as well as Islam, Hillel, Buddhist, etc.\n\nI asked Gwen what she thought and she said, \"Let's try the Methodists. I'm up-to-here right now with Presbyterians.\"\n\nWe found the Methodist's office and walked in and a young man asked, \"May I help you?\" \n\nThen he looked carefully at me and said, \"Professor David?\"\n\nI was startled and said, \"Yes.\"\n\nHe grinned and said, \"I'm Harry Mikeluk and I had you for statistics maybe ten or twelve years ago.\"\n\n\"You did? Which course?\"\n\nHarry responded, \"Intro.\"\n\nMy response was, \"Oh Lord.\"\n\nHarry nodded affirmatively, \"You were really at a loss about how to teach sophomores.\"\n\nGwen burst out laughing and said to me, \"You taught Intro?\"\n\nI looked at Gwen and said, \"Well, you know, the old rotation thing where every so often everyone has to teach the Intro course.\"\n\nHarry burst out laughing and said to Gwen, \"He was awful. But, oh my gosh, did he pound the Gaussian Curve into our heads. I think I still view the world through the prism of the Curve.\" \n\nThen Harry stuck out his hand to Gwen and asked, \"Who are you?\" Gwen smiled at Harry and said, \"I'm Gwen Davis. I'm this old fossil's fianc\u00e9.\"\n\n\"I'm happy to meet you. What brings you here today?\"\n\nGwen said, \"We want to be married and we want a church wedding and we're looking for a minister who will marry us.\"\n\n\"Well, here I am,\" Harry said. \"Let's talk.\"\n\n\"Wait a second,\" I injected. \"You're the minister?\"\n\n\"Yes, of course,\" Harry responded.\n\n\"Are you old enough to be a minister?\" I asked.\n\nI heard Gwen say, \"Oh, you idiot.\"\n\n\"Yes, Professor, I'm old enough. I've been out of seminary six years now.\"\n\n\"Oh,\" was about all I could muster.\n\nHarry grinned and asked, \"Refresh my memory. What was the other distribution you taught us that I never understood?\"\n\nI thought for a second and said, \"I think you're referring to the Pareto distribution.\"\n\n\"That's it,\" Harry exclaimed.\n\nGwen looked at me and rolled her eyes and said, \"You idiot, that's not Intro material.\"\n\nI looked at Gwen and said, \"Intro material is what the professor teaching the course deems it to be.\"\n\nGwen stuck her tongue out at me.\n\nHarry asked, \"Are you sure you two aren't already married?\"\n\nGwen said, \"Oh, we're sure. We're not married yet.\"\n\nHarry asked, \"Have you been living together for a while?\"\n\nGwen responded, \"We met nearly six months ago and within twenty-four hours we knew we were destined for each other. We've not been apart since except for the week it took him to move from here to my place in Virginia.\"\n\n\"Wow!\" Harry responded.\n\nI asked, \"Why did you say, 'Wow?'\"\n\nGwen injected, \"Don't answer that question, Harry. Will understands people about as well as you understand the Pareto distribution. Just let it be.\"\n\nHarry gave a long pause and said, \"Look, this is interesting. In the last minute and one-half, Gwen has called you, Professor, an 'idiot' twice and she just told me not to answer a question you asked. Does that upset you?\"\n\n\"Upset me? No.\"\n\n\"Why does that not upset you?\" Harry asked.\n\n\"I'm not sure why I should be upset. She certainly doesn't mean I'm literally an idiot or she'd have nothing to do with me.\"\n\nHarry nodded and said, \"OK, and what about Gwen instructing me not to answer your question?\"\n\n\"Oh, she means that you would answer the question and I wouldn't understand the answer and then I'd ask more questions and become more confused and we'd waste all our time on something that is actually irrelevant to the task at hand.\"\n\n\"What do you think of the Professor's answers, Gwen?\"\n\nGwen laughed and said, \"He's precisely correct.\"\n\nHarry mused, \"Fascinating.\"\n\n\"Do you two make major decisions together?\" Harry asked.\n\nGwen responded, \"Absolutely. I bring up any and all topics to Will for discussion.\"\n\n\"Would you agree with Gwen, Professor?\" Harry asked me.\n\n\"I don't know...\" and I turned to Gwen and asked, \"What major decisions have we made?\"\n\nI knew from the look on Gwen's face that she was almost beside herself trying not to laugh out loud. Finally, she said, \"Let's start with, I want to teach and not follow a traditional tenure track, and then we'll think about whether you should take the acting chair position, and there was our decision to move to Alabama, and our discussions about Charles and then our decision about Barb living with us and how we dealt with my crazy chairperson, and redoing your house, and things like that.\"\n\nI looked to Harry and said, \"Yes, I agree with Gwen.\"\n\nHarry responded, \"Do you, Professor, bring up major issues with Gwen?\"\n\n\"I don't know. Ask Gwen.\"\n\nGwen erupted into laughter and turned to Harry and said, \"Harry: do you get the picture? Will is in the world, but he is not of the world. His mind is on issues, on problems, on his reading, his writing, his teaching, his golf game, and so forth. I deal with the domestic agenda and we discuss issues as they arise.\" \n\n\"Fascinating,\" said Harry.\n\nHarry continued, \"Do you have any major differences on issues of finance?\"\n\nGwen laughed again, and said, \"I don't know of any.\"\n\n\"Professor?\"\n\n\"No, no differences.\"\n\n\"What kind of spiritual life do you share?\" Harry asked.\n\nGwen responded, \"We've attended church regularly and I pray and thank God for my blessings and I know Will does and I see him reading portions of the Bible and Koran pretty frequently.\"\n\nHarry asked, \"Professor, how would you answer that question?\"\n\nI said, \"Gwen answered it adequately.\"\n\n\"You say you've attended church regularly, but you're here at Campus Ministries looking to be married in the Campus Chapel by a clergy man or woman. Why have you not approached the clergy at the church you attend?\"\n\nGwen looked to me and I nodded to her so she said, \"Will has lived here for 30 years. I'm new here so we went to see his Presbyterian minister whom he has known for ten years and the minister treated me like a gold digger and Will like a kid in the candy store or an old fool. He told us to come back in a year if we were still serious.\"\n\nHarry was frowning and clearly thinking about Gwen's response. After a lengthy pause, Harry asked, \"What reason or reasons did he give to think you, Gwen, were out to take Harry to the cleaners or you, Professor, were being deluded by Gwen?\"\n\nGwen looked to me and I said, \"It would be best if you spoke to him if it's important. I don't' want to try to interpret his reasoning.\"\n\nGwen asked, \"May I speak to Harry's question, Will?\"\n\n\"Surely,\" I responded.\n\nGwen turned back to Harry and said, \"The minister seemed to be saying that Will is so remote from people that he's not the marrying kind. Additionally, the minister pointed out that in the last ten years a number of attractive women have tried to interest Will and he's not been interested. Suddenly Will shows up with me in hand and the minister seemed to think Will had lost his mind and I was out to take Will for everything he had.\"\n\n\"I see,\" Harry said.\n\nHarry must have been thinking because he was silent, as were we.\n\nAfter a few minutes of silence Harry looked up and said, \"Watching the dynamic between you two is just fascinating. If you had not told me differently, I would have thought the two of you had been married for years. I'll be pleased to marry you. When would you like the ceremony?\"\n\nGwen smiled and reached her hand for mine and I took it. Gwen asked, \"Is the Chapel available on a Saturday in a few weeks?\"\n\nHarry got up and checked a handwritten calendar and said, \"No, but it is available in three weeks.\" \n\nGwen asked, \"Is it available at 1:30 p.m.?\"\n\nHarry shook his head negatively and said, \"Both 12:30 p.m. and 2:30 p.m. are open, though.\"\n\nGwen looked at me and I shrugged so she said, \"12:30 p.m.\"\n\nHarry noted it on the calendar and Gwen asked, \"What's next?\"\n\nHarry asked, \"Do you have time now or should we schedule another session?\"\n\nGwen looked at me and I shrugged so she said, \"Whatever it is, let's do it now.\"\n\nHarry said, \"C'mon, let's go get a Coke or a cup of coffee and we'll look at another few issues related to marriage.\"\n\n\"Just a second, Harry,\" I injected.\n\n\"Yes, Sir,\" Harry responded.\n\n\"Are you married, Harry?\"\n\n\"Gwen gave me one of her looks and Harry began laughing and said, \"Yes, five years.\"\n\nI nodded 'OK' to Harry.\n\nGwen remarked, \"Ever the pragmatist,\" to Harry who again laughed.\n\nGwen suggested that I call Walt and confirm with him the change of venue and change of time so I phoned Walt and Gwen signaled for me to activate the speaker feature on my phone.\n\nWalt picked up as the three of us strolled across campus towards the Student Union.\n\n\"Walt, it's me, Will. How are you?\"\n\n\"Fine, Will, and you?\"\n\n\"Good, Walt. We getting married here in Alabama instead of Virginia and the date is June 14.\n\nWalt said, \"Alabama?\"\n\nI responded, \"Yes, that's what I said.\"\n\nWalt reiterated, \"Alabama? Does Alabama have electricity yet?\"\n\n\"Yes,\" I responded, \"for four hours a day everywhere and Birmingham has it six hours a day.\"\n\n\"Isn't that wonderful?\" Walt mused.\n\n\"How\" Walt asked, \"does one get to Alabama? Are the roads passable?\"\n\nI looked at Gwen who held out her hand for the phone and she took it from me and said, \"Walt, this is Gwen.\"\n\n\"Hi, Gwen,\" was Walt's cheery response.\n\n\"Walt: stop being so provincial. Boston has ruined you. Be a little cosmopolitan and take a plane to Birmingham, rent a car, and we live an hour away.\"\n\nHarry appeared greatly amused by all this.\n\nWalt continued, \"Alabama has a bunch of rednecks who are still fighting the Civil War.\"\n\nGwen sounded a bit exasperated when she said, \"Knock it off, Walt.\"\n\nI signaled for the phone and Gwen said, \"Here's Will, Argue with him.\"\n\n\"Walt: Alabama has never fought a Civil War. Get your facts straight.\"\n\nWalt almost screamed, \"Alabama never fought a Civil War! What was going on between 1861 and 1865?\"\n\nI responded, \"Walt, you ignorant history student, that was The War of Northern Aggression and I don't need a best man. Good bye!\"\n\nAnd, I clicked off the phone.\n\nGwen and Harry both had big eyes. I smiled and said, \"Give him a minute.\"\n\nIn less than a minute my phone rang and I answered. Walt was yelling, \"For crying out loud, Will, I was only teasing.\"\n\n\"Walt: If you come down south with that snotty, know-it-all, superior Yankee attitude, you'll go home with your head in your carry-on bag.\"\n\n\"Fine, fine, Will. Yes, I'll be your best man and I won't poke fun at the Johnny Rebs.\"\n\n\"Hey Walt...\"\n\n\"Hey what, Will?\"\n\n\"Go read the Declaration of Independence.\"\n\n\"Why?\"\n\nGo see what Jefferson wrote about a people's right to disband an oppressive government and form a new one and put that into the context of the Confederacy.\"\n\n\"Oh, my God, Will. I do remember that introduction to the Declaration.\"\n\n\"Good. Now you know why we call it The War of Northern Aggression and not the Civil War. There was nothing civil about that war. We weren't on the right side morally, but we did have Jefferson on our side.\"\n\n\"I'll do that, Will. I'll see you on the thirteenth of June. Send me directions to your house from the airport.\"\n\n\"Will do, Walt. Thanks!\"\n\nI logged off the phone and looked at Gwen and said, \"I know. You have to pee. We're on our way to the Union right now.\"\n\nGwen stuck out her tongue at me and Harry split his sides laughing and said, \"Promise me that you two aren't already married.\"\n\n\"We aren't, Harry, but as I said, I knew twenty-four hours after meeting Will that we would be.\"\n\n\"Really! That's fascinating.\"\n\nI noted, \"Harry, you're easily fascinated.\"\n\nHarry grinned and said, \"Couples like you don't just show up very often. You really are quite fascinating.\"\n\nWe arrived at the Student Union and Gwen headed for the bathroom and I got Gwen a Diet Coke and a cup of coffee for Harry and me. When Gwen returned, Harry noted that the two issues that are most disruptive to most married couples were money and sex.\n\nHarry wanted to know how we handled finances. Gwen said, \"Will makes it and I spend it.\"\n\nHarry shook his head and asked, \"Would you agree with that statement, Professor?\"\n\n\"That seems about right,\" was my response.\n\n\"Does that seem equitable to you, Professor?\"\n\n\"Yes, I told Gwen to invest and bank her money and spend mine.\"\n\n\"Fascinating,\" Harry murmured.\n\n\"You know, Harry, if you were one of my grad students, I'd have you buried in the library for six months until you learned to stop using that word. We are not exotic animals in the zoo.\"\n\n\"Sorry, Professor. I'll try and watch that.\"\n\n\"Don't try. Do it.\"\n\nGwen injected, \"Will, Harry is not one of your grad students. Stop bossing him around.\"\n\nI looked at Gwen and she gave me her, \"I'm going to kill you\" look.\n\nHarry watched us and said; \"Really, quite fascinating,\" and then he clapped his hand over his mouth and said, \"Sorry, Professor.\"\n\nGwen turned to Harry and said, \"Really, you better drop that word. The pot is beginning to boil over here,\" and she nodded in my direction.\"\n\nHarry thought for a minutes and then said, \"You know, I don't think we even have to discuss sex with you two unless you have a question, but I do have to ask you, Professor, why did you tell Gwen to bank her money and spend yours.\"\n\nI looked at Harry and said, \"Unless something catastrophic happens to Gwen, she's going to outlive me by twenty years.\"\n\nHarry nodded and said, \"Boy oh boy, are you two marriage material. Give me your address and phone numbers and I'll be in touch.\"\n\nWe parted ways with Harry for the time being and Gwen very gratefully thanked him for his time, effort and interest in us. Harry said it really was his pleasure.\n\nGwen took my hand and said, \"Shall we go?\" \n\n\"Do you have to go potty, first? I asked.\n\nGwen punched me in the tummy as a response.\n\n\"Fascinating,\" was my reaction. \"Professor, how did you feel when Gwen punched you in the stomach?\"\n\nGwen cracked up and laughed so hard she had to sit down. When her bout with mirth ended she looked up and said, \"Damn! Now I do have to pee!\" and she stormed off to the bathroom.\n\nWhen she returned she gave me one of her looks and said, \"Not one word!\"\n\nMy response was, \"Fascinating. Professor, how did you feel when Gwen just threatened you.\"\n\n\"Stop it, you idiot!\" Gwen shouted and a number of people looked up in surprise at us. She grabbed my hand and pulled me towards the door leading out of the cafeteria.",
        "We drove home quite relieved to have a wedding date and Gwen gaily announced that we had to go shopping for wedding rings.\n\n\"Good grief! When do these arrangements end?\"\n\n\"We're almost there, Old Man. Hang on.\"\n\n\"Why did you say, 'we' have to go shopping for wedding rings?\"\n\nGwen responded, \"Will, I do expect you to wear your wedding ring so I want you to accompany me so we can pick out matching rings we both like.\"\n\n\"OK, when do we have to do this?\" I asked.\n\n\"We'll do the rings tomorrow and I promise it won't take a long time.\"\n\n\"We can't do this on the web?\" I asked.\n\n\"No, Old Man, we can't. It's a question of sizing. I'm sure you have no idea what ring size you wear?\"\n\n\"Oh, that's right. They come in sizes, don't they?\"\n\n\"You're such an idiot, Old Man.\"\n\nGwen also said that we would have to visit the non-denominational chapel on campus so we had a good idea of the size and layout for our wedding.\n\nWe arrived home and Gwen called a caterer to arrange for a small reception after the wedding ceremony at our house.\n\nWhen she hung up the phone, it immediately rang again and it was Harold, my minister, who identified himself to Gwen and asked to speak with me. Wordlessly, Gwen handed me the phone and I said, \"Will David.\"\n\nHarold identified himself and he said, \"Will, those words that Gwen said to me, really stung, and they really made me rethink how I handled our meeting this morning. Could we set up another meeting and let's try that again?\"\n\n\"No,\" Harold. \"You made it abundantly clear that you think I'm a deluded old fool and Gwen is a conniving, evil woman who is going to clean me out and leave me destitute. That's your opinion and it's yours to express in this wonderful country of ours. We, on the other hand, don't have to listen to your opinion. End of story.\"\n\n\"I'm so sorry, Will. I hope you'll continue to grace us with your participation in worship.\"\n\n\"I don't think, Harold, that Gwen and I will darken your doorway.\"\n\n\"Again, I'm terribly sorry, Will. Let me wish you good fortune and good health in the future.\"\n\n\"Thank you, Harold. Good-bye.\"\n\nI hung up and Gwen just shook her head.\n\n\"Gwen asked me the name of our departmental secretary and I thought a minute and replied, \"Marybeth.\"\n\nGwen nodded and said, \"Oh, that's right.\" \n\nGwen called Marybeth and identified herself and asked Marybeth to put out a departmental memo indicating that everyone was invited to attend our wedding ceremony at the Campus Chapel on the 14th at 12:30 p.m. and to call us at home and tell us if they'd like to come to the house afterwards for a small, informal reception. Gwen emphasized, \"No gifts\" and specified that we had to hear from them by June 7 if they were coming to the reception so the caterer knew how much food to prepare.\n\nMarybeth asked if this invitation was extended to faculty only or did it include staff? \"Both\" Gwen replied.\n\nMarybeth made Gwen laugh when she said, \"I can't wait to meet you. You must be something to corral that old bachelor.\"\n\nWhen she hung up the phone, Gwen sighed and said, \"There simply are too many details attendant to a wedding.\"\n\nShe stood for moment thinking and said, \"Let's call my dad and get him here the week before so we can get him fit for a suit.\"\n\nI simply grunted and asked, \"Can we put him in a motel?\"\n\n\"No, you idiot, we can't put him in a motel.\"\n\n\"How does he live anyway?\" I asked. \"What's his source of income?\"\n\nGwen said, \"He has Social Security and I send him money every month.\"\n\nI nodded and said, \"OK, that's how he makes it.\"\n\nGwen called her dad who answered on the first ring. Gwen greeted him and said, \"Dad, it's Gwen.\"\n\n\"Hello, Sweetness and Light,\" her dad responded.\n\n\"Dad, I'm going to send you an airplane ticket so you can fly here on June 9.\"\n\n\"OK, Sweetheart. Where am I flying?\"\n\n\"You are flying to Birmingham and we'll meet you in baggage claim and then we'll bring you here and we're going to get you a new suit for the wedding.\"\n\n\"You're still going to marry that liberal sonofabitch, Will David?\"\n\n\"I'm not marrying anyone else but Will David, Dad.\"\n\n\"OK, he's a liberal, but he's a nice guy. I guess it's OK.\"\n\n\"Thank you, Dad. I'll talk to you again between now and then, OK?\"\n\n\"OK, but tell Will to stop parking his pickle between now and the wedding.\"\n\n\"I'll be sure and do that, Dad.\"\n\n\"OK, Sweetheart. Thank you. I love you.\"\n\n\"Wait!\" I injected.\n\nGwen said, \"Wait a second, Dad.\"\n\n\"I want to talk to him,\" I said.\n\n\"Will wants to talk to you, Dad. I'm going to give the phone to him.\"\n\nI took the phone from Gwen and said, \"Pops?\"\n\n\"Yeah, Will.\"\n\n\"The most patriotic people in the country live down here in the south.\"\n\n\"That's good, Will, that's good.\"\n\n\"Pops, if you come down here and call someone a Communist, I don't care how old you are, they are going to kick your ass between your shoulder blades and you're going to be pooping out of your neck.\"\n\n\"Really?\"\n\n\"Yes, really. Don't do it.\"\n\n\"OK, I'll remember. But, listen, you limp-wristed liberal, me and my buddies at the Senior Center have a few questions for you and your liberal friends and these questions are going to make you straighten your wrists.\"\n\n\"OK\u00b8 Pops, don't forget to bring them with you.\"\n\n\"Don't worry about that, Will.\"\n\n\"All right, I'm giving the phone back to Gwen now.\n\nGwen took the phone from me and said, \"Love you, Dad...OK, bye-bye.\"\n\nGwen hung up the phone and said, \"Whew! I'm glad you told him that. Oh, and he said to tell you that you have to stop parking the pickle between now and the wedding.\"\n\n\"OK.\"\n\n\"And, if you do, there's going to be hell to pay,\" Gwen grinned.\n\n\"Do you want some lunch?\" Gwen asked.\n\n\"Not yet,\" I responded.\n\nGwen said, \"OK, let's go lie down and catch our breath.\"\n\nWe went to our bedroom and got out of our dress clothes and I reached for some shorts and Gwen said, 'Nay, nay, naked.\"\n\nI undressed completely and got in bed and Gwen followed me and laid on top of me. \"Play with my bottom, please,\" Gwen asked.\n\nI massaged and kneaded her tush and Gwen sighed, \"Stress relief.\"\n\nI asked, \"Are you satisfied with everything regarding the wedding.\"\n\n\"Yes, I think so,\" Gwen said. \"There are just too many details, but I got a kick out of Harry and I think the Campus Chapel will probably be very nice.\"\n\nWe heard a commotion outside the bedroom and then heard Derek ask, \"Where are Will and Gwen?\"\n\nNext we heard Barb say, \"See the closed bedroom door?\"\n\n\"Yes,\" Derek said.\n\n\"They're in there. They screw like rabbits. It's disgusting.\"\n\nNext we heard, \"I can't imagine Will having sex. It's simply incongruous with the rest of his demeanor.\"\n\n\"Hah,\" Barb exclaimed, \"try picturing your mother doing the deed sometime.\"\n\n\"Eeeuuwwww!\" was Derek's response.\n\nBarb and Derek drifted off to the kitchen and we heard nothing more. I was laughing quietly at their impressions of us and Gwen was frowning. \"What's the matter?\" I asked.\n\n\"I'm vacillating between laughing and going out there and kicking her in the butt,\" was Gwen's response to my question.\n\n\"Rabbits don't kick people in the butt,\" I noted.\n\n\"True,\" Gwen laughed. Then she said, \"Nap.\" She rolled off me and I pulled the covers over us and she snuggled into me and I know I dozed off.\n\nI was awakened about forty-five minutes later by a gentle licking and tugging on my cock. I yawned and said, \"Ah, the little rabbit is nibbling lettuce again.\"\n\nGwen's response was, \"Hey Old Man, this isn't any lettuce. This is protein.\"\n\n\"May I ask why you are making slurping sounds and yanking my organ?\"\n\n\"You may,\" was Gwen's response.\n\n\"Do tell,\" I requested.\n\nGwen explained, \"I'm making big, dumb, Ivan hard so he can squeeze into Anastasia and make Anastasia very happy.\"\n\n\"I see. It is important that Anastasia is happy.\"\n\n\"You bet your bony ass it is,\" was Gwen's retort.\n\nThe Princess continued sucking me and I responded to her satisfaction.\n\nIn fact she said, \"How very satisfactory.\"\n\nThen she made some kind of acrobatic move that I presume only a tiny person can make and she backed in a spoon fashion against my groin. She reached behind and grasped Ivan and slid him into a wet and hot Anastasia.\n\n\"My, aren't we wet?\" I remarked.\n\n\"Aren't we,\" Gwen remarked,\n\n\"What is it the Princess requires this afternoon?\" I inquired.\n\n\"The Princess....Oooooohhhh, that feels good...requires a long, slow, screw this...Oooohhhh...afternoon.\"\n\n\"Thusly?\" as I thrust slowly into the little volcano.\n\n\"Ooooooooh, that's so good, Old Man.\"\n\nI maintained a slow, thrusting rhythm and The Princess expressed her satisfaction although after a few minutes she groaned, \"The ta-tas, Old Man.\"\n\nI wrapped my hands around her beauties and rolled her nipples back and forth and she gasped.\n\nWe maintained a constant thrusting motion and the Princess complained, \"Sometimes I wish you weren't so tall so I could turn around and kiss you while you're doing this.\"\n\nI speeded up my thrusting and asked, \"Why am I always too tall and you're never too short.\"\n\n\"You forget,\" Gwen began to respond, but her thought was interrupted by her groan and a moaning, \"Ohhhhh, that's so good.\"\n\n\"I love this Princess,\" I said.\n\nGwen managed to gasp, \"Love you, Old Man.\" Then she gasped, \"Faster!\"\n\nI accelerated my thrusts and Gwen began panting, \"Huh, huh, huh, huh\" and then her hips were moving as she thrust backwards to meet my forward thrusts.\n\nHer gasps intensified as did the pace of her thrusts and she arched backwards against me and groaned once, but loudly, stiffened, and I felt her gush against me.\n\nI held her tightly as she shuddered and then relaxed. She mumbled, \"On top,\" which I took to mean she wanted to be on top of me so I rolled her onto me on her back and held her for a few moments before she reached down and removed Ivan from her pussy. She rolled off me onto her stomach and then climbed back on me and commenced kissing me. I massaged her beautiful bottom and she almost purred.\n\nEventually, the Princess stopped kissing me and looked at me with a big grin and said, \"Let's go back and see Harry and ask him what he wanted to ask us about our sex life.\"\n\nFor the life of me I was struggling to recall who Harry was and the Princess read, I guess, my facial expression, and yelled, \"The minister, you idiot.\"\n\n\"Yes, of course, the minister. I was struggling for his last name.\"\n\n\"Liar! You can't fool me, Old Man. You had already forgotten who Harry was.\"\n\n\"Yes, Harry the minister. Let's not go see him. I don't want to be told that we're fascinating.\"\n\n\"OK,\" Gwen said. Then she asked, \"Are you hungry now?\"\n\n\"I think I am.\"\n\n\"C'mon,\" Gwen said. \"I'll fix you something.\"\n\nWe had lunch and Gwen said she had lots of details to review and double check and urged me to go to the golf course or read. I indicated, instead, that I would go to the department and check my mail and talk with the chairperson if he was in this afternoon.\n\nGwen stopped what she was doing and showed how very perceptive she was by asking, \"Old Man, you just finished with Derek. Are you going to take a new grad student?\"\n\nI gave Gwen a smile and asked, \"Do you mean am I going to take another grad student at my age?\"\n\nGwen nodded, and said, \"Yes, that's what I mean. My question really is, 'Do you want to retire in a few years or do you plan to keep working?'\"\n\n\"I'm undecided in some ways, but I think I might like to retire. I also think I'd like to keep going, but not full-time.\"\n\n\"What do you want to discuss with your Chair?\" Gwen asked.\n\n\"I want to hear from him what the department needs in the next few years. Can they live with me hanging around just teaching and writing and not helping with grad students and not being a productive researcher or do they need my position to find a younger person who can go full bore with teaching, research, and service.\"\n\nGwen said, \"Old Man, you've earned the right to do whatever you want to do in your department. And, don't forget, you're a real mucky-muck in the association and in AAUP.\"\n\n\"Yes, but I'm tired of being a mucky-muck and I have you now. I'm much more interested in things close to home, now.\"\n\n\"Awww, that was sweet,\" Gwen said and she climbed on my lap.\n\nI said, \"I was going to ask you, after I talked to the chair, what you thought I ought to do. But, we're on the topic, so tell me what you think I should do and why.\"\n\n\"Go talk to your chair, first. Then, we'll get naked and do our serious talking.\" Then Gwen kissed me long and hard.\n\n\"OK, I'll do that and I also have to call my editor and find out why I haven't heard anything about the book.\"\n\nGwen's eyes shot open and she let forth with an anguished \"Oh!\" \n\nI looked at her strangely and she blurted, \"Your editor called and I'm so scatter-brained right now I forgot to tell you she called.\"\n\n\"Oh, OK, well, don't worry about it. What did she say?\"\n\n\"I'm so sorry, Will! Please forgive me?\"\n\n\"Princess, forget about it. What did she say?\"\n\n\"The book is fine, Old Man. She thought it was wonderful and she had three outside analysts read it and you have enthusiastic reviews forthcoming and they're going to market the book hard.\"\n\n\"Outstanding,\" was my assessment of the situation.\n\nGwen said, \"You know, you wrote the book on systems analysis and I don't know anything about that and I don't understand how you ever learned anything about it, either.\"\n\n\"Oh, geez, it's a long story. You don't want to hear about it.\"\n\n\"Yes, I do!\" Gwen said.\n\n\"No, you don't,\" I persisted.\n\nI should have expected it. The Princess stamped her foot and said, \"I do.\"\n\n\"OK, when do you want to hear about it?\" I asked.\n\n\"This evening.\"\n\n\"Good, you'll forget all about by this evening.\"\n\nGwen stuck out her tongue at me and said, \"Will not.\"\n\nI kissed the little Princess goodbye and drove to campus and upon walking into my departmental building, I found Derek moving boxes of books into a faculty office. I stopped and asked him, \"What are you doing?\"\n\nDerek gave me a big smile and said, \"I took the opportunity you gave me to be a visitor this year and I'm moving into Professor Corrigan's office while he's gone for the year.\"\n\nDerek added, \"I'll be covering his classes this year.\"\n\nWarning bells started clanging in my head saying something wasn't right with this picture. I thought about this for a moment and asked, \"Derek, what about the California and the Pennsylvania interviews?\"\n\nDerek grinned, \"I cancelled them because this offer was too good to leave on the table.\"\n\nI literally growled at Derek, \"Those were tenure track jobs. This is a nothing appointment for a year designed to give you a safety net. You're wasting a year!\"\n\n\"Oh, I don't think so, Will.\"\n\nI walked off in a very confused state and went to the departmental office and collected my mail and went to my own office to look at it. My brain, however, was still trying to decode Derek's behavior. It finally hit me and I left my office and went to Corrigan's where Derek was merrily putting books onto shelves.\n\nI walked into Derek's temporary office and he smiled at me and asked, \"What's up?\" One look at my face and the smile disappeared on his.\n\nI asked, in very measured tones, \"Are you getting laid for the first time in your sorry life?\"\n\nDerek's face went pink and then red and then scarlet and then a deeper scarlet.\n\nThat was all the answer I needed and I returned to my office and called Gwen at home. She answered and said, \"Hey, Old Man.\"\n\nI told Gwen, \"This may be hard to believe, but Derek and Barb are having sex. Is she on birth control?\"\n\nGwen went ballistic. I heard her give one yell of \"Barbara Gwendolyn Davis!\"\n\nI faintly heard Barb say, \"What?\" and Gwen said, \"Are you screwing that damn Derek?\" and the line went dead. Gwen had hung up the phone.\n\nI hung up the phone and locked my office and sprinted, as well as I could, to my car and drove home.\n\nI walked into the house with aching knees from my modified sprint thinking, \"I'm getting old...\" and I found Barb on the couch barely able to contain her laughter.\n\nGwen was pacing the floor and occasionally stamping her foot.\n\nI said, \"Hey, Princess.\"\n\nThat was the wrong thing to say. Gwen yelled, \"Don't you Princess me, you evil man. You taught that damn Derek everything he knows.\"\n\n\"Whoa!\" I yelled. \"I did not teach him that Tab A goes into Slot B.\"\n\nThat made Gwen laugh and she shot me one of her glances and said, \"You idiot!\" \n\nWhile Gwen continued to work herself into a further frenzy, I turned to Barb and asked, \"Are you on birth control?\"\n\nBarb answered simply, \"Yes, I have been for two years because my menstrual cycle was all messed up.\"\n\nGwen yelled, \"Who else have you been screwing?\"\n\nBarb responded, \"Both Derek and I were virgins. He's the only man I've ever been with.\"\n\n\"Inconceivable,\" I muttered.\n\nBarb asked me, \"What's inconceivable?\"\n\nI looked at Barb and said, \"It's inconceivable to me that Derek even knew what to do.\"\n\nBarb said, \"Trust me, he didn't. I thought I was na\u00efve. He was beyond na\u00efve.\"\n\n\"That figures,\" I responded.\n\nGwen screamed at me, \"How can you be so calm about this?\"\n\n\"Well, honestly, I don't know what else to be. Barb is 22 and Derek is 26 or 27 and these things happen when men and women get together. My concern was birth control.\"\n\nGwen just glared at me.\n\nI asked, \"May I ask a question?\"\n\n\"What?\" Gwen snapped.\n\n\"If Barb is on birth control and if Barb is 22 years old, why are you so upset?\"\n\nGwen yelled, \"She's my baby. I don't want her playing with men and having them do disgusting things to her. She's just a baby.\"\n\n\"How old were you when you had Charles?\" I asked.\n\n\"You be quiet, you idiot. You're the cause of all this.\"\n\nI burst out laughing and walked up to Gwen who started throwing punches at me and I waded through the punches and picked her up and she wrapped her arms around me and started laughing.\n\nWhen she stopped laughing Gwen added, \"And she's only known Derek for a month!\"\n\n\"A month? And how long did you know me before we were naked?\"\n\nGwen, still in my arms, yelled, \"You be quiet or I'm going to kill you this time and you can't talk me out of it.\"\n\n\"Ok, you do that.\"\n\nI turned to Barb and said, \"Go see Derek. He's at the department in Corrigan's office and I think he's probably still shaking in his boots.\"\n\nBarb said, \"OK,\" and beat a hasty path out to her car.\n\nI lowered Gwen to the floor and she commenced punching me in the stomach muttering \"Big dumbass, Sasquatch.\"\n\nWhen she tired of punching me she asked, \"How did you find out the two of them were screwing each other?\"\n\nI relayed the story of Derek's cancellation of two job interviews to stay here and Gwen shook her head.\n\nShe leaned into me and said, \"I hope he has a big one.\"\n\nI laughed so hard I had to sit down on the floor. Gwen looked at me and said, \"It's not funny.\"\n\nWhen I stopped laughing I indicated that I had to return to campus and deal with my mail and the chairperson if I could find him.\n\n\"OK,\" Gwen said, \"and if you see Derek, scare him for me.\"\n\n\"OK,\" and I kissed the Princess and returned to campus.\n\nWalking into the building I encountered none other than my chairperson of whom I asked if he had a few minutes. He indicated that he did and suggested a walk across campus and a cup of coffee.\n\nWe settled into the Union cafeteria with a cup of coffee each and my chair, Thomas Fitzgerald, asked me what was on my mind.\n\nMy response was, \"My age.\"\n\nTom nodded and said, \"OK.\"\n\nI gave Tom a quick synopsis of where I was including getting Derek graduated, finishing my book, and not being eager to apply for more grants or take on more grad students and essentially winding down my research career and easing out of professional responsibilities with our professional organization and AAUP. My question is, \"What can the department tolerate out of me for the next few years without becoming a liability?\"",
        "Tom gave a long, low whistle and shook his head. He thought a long time and said, \"Let me give you two facts to consider. First, the department needs you to teach a course or two per semester for the next few years. We don't need you as an active researcher, because we've got the young guns in line.\"\n\n\"Second, the University (and you can't repeat this) is preparing to elevate you to Distinguished Professor this year and that imposes some real responsibilities on you.\"\n\nI gave a snort of disgust and said, \"The University should have thought of that five years ago. Tell the powers that be that I'm not interested.\"\n\nI continued, \"As for your assessment that I can teach for the next few years, let me jump at that. I think I have one more book in me and that kind of teaching load will let me do the book.\"\n\nTom put us his hand and said, \"Think about the Distinguished Professor thing for a few days and let me know. Don't throw that away today.\"\n\n\"I don't have to think about it, Tom. Thinking about it will just make me angry. If that was to happen, it should have happened five years ago.\"\n\n\"Will, are you sure?\"\n\n\"I am.\"\n\n\"OK,\" Tom concluded.\n\n\"Thanks for the briefing, Tom. It's much appreciated.\"\n\n\"Sure. I'm heading back to the office.\"\n\n\"So am I, Tom. I have some mail to look over.\"\n\nWe walked back to the department together and parted and I looked at my mail and found nothing earth shattering so I headed home.\n\nI drove home and found the cats sprawling all over the front yard and only Gwen inside. \"Where's Barb?\" I asked. \"She's usually home by now.\"\n\nGwen smiled and said, \"Oh, I imagine she off screwing Derek right now.\"\n\nI smiled and said, \"You think?\"\n\n\"Yes, I think!\" Gwen snapped.\n\nWho came walking in the door at that moment but Barb. \n\n\"Where's Derek?\" Gwen asked.\n\nBarb smiled, and said, \"He's out in the car. He's afraid to come inside because he thinks Will is going to dismember him.\"\n\nGwen said, \"Tell Derek that Will is certainly not going to dismember him, but if I find some shears I may emasculate him.\"\n\n\"MOM!!!!\"\n\nGwen laughed and said, \"Tell Derek to come inside. No one is going to say anything to embarrass him.\"\n\nI was in no mood for Derek so I wandered back to the bedroom and lay down and stared at the ceiling and frankly fulminated at the stupid University and their belated idea to award me the title of 'Distinguished'.\n\nAn hour later the Princess walked into the bedroom and lay down beside me and asked, \"What's wrong?\"\n\nI responded, \"Nothing is really wrong, I'm just fuming about something Tom told me this afternoon.\"\n\n\"Can you share it?\" Gwen asked.\n\n\"If it goes no further than you, I can.\"\n\n\"Sure,\" Gwen said.\n\n\"While talking with Tom today and asking if I could slow down and just teach and write, he said the department could handle that, but I needed to factor in the variable that the University was going to promote me, this year, to the rank of Distinguished Professor.\"\n\nGwen sat up and said, \"Wow!\" The she added, \"But...\"\n\n\"I told Tom to tell the powers that be to forget the promotion because that should have happened five years ago.\"\n\nThe Princess was frowning and she asked, \"Why turn it down at all?\"\n\nI explained, \"Most universities promote their people to the distinguished rank when it's merited. Ours waits until the man or woman is over the age of sixty and makes it clear that the rank carries with it a lot of expectations as well as power and prestige. It's a little trick the administration uses to keep high-profile people active long after many of them don't want to be that active.\"\n\n\"So,\" Gwen added, \"you really are serious about slowing down.\"\n\n\"Yes, I'm firm on that now. I'll continue to teach each semester and I think I have one more book in me and then we'll see where we are.\"\n\n\"Old Man, are you doing this because of me?\"\n\n\"You're darn right I am. I want to be with you and not running around the country or spending all my time directing research assistants and guiding grad students.\"\n\nTo my complete surprise, tears began running down Gwen's face and she climbed on top of me and hugged me fiercely.\n\n\"Uh, Princess, what's this about?\"\n\n\"Oh, Old Man, I'm just so struck by the contrast of being married to Charles and to you. With him I was the trophy wife and everything revolved around him. With you, you're reordering your life for me!\"\n\n\"Well, not really,\" I said with a smile.\n\n\"What do you mean by that?\" Gwen asked guardedly.\n\n\"It's just that you wear me out sexually so I don't have any energy left for academics.\"\n\nThe Princess emerged instantaneously and began beating on my chest yelling 'You idiot.\"\n\nThen she leaped up and ripped off her clothes and said, \"When you said, a minute ago, 'I want to be with you' it was like an electric charge to my pussy.\"\n\nShe jumped on top of me and shimmied her way up my body and sat her face directly in front of me and pulled open the outer lips of her pussy and yelled, \"Lick!\"\n\n\"Hey,\" I said, \"I have on a shirt. You're going to leak all over it.\"\n\nGwen said, \"I'll wash the damn shirt. Now lick!\"\n\nI grabbed her by her hips and began a long, leisurely, licking of the Princess' pussy. She expressed her delight with a series of sighs and moans. Shortly she asked me to go higher and faster and I addressed her clitoral hood and the signs turned to moans. \n\nAfter a few minutes her clit appeared and I licked it and the Princess started panting as she gripped my head and began thrusting herself into my face.\n\nIt couldn't be but a few minutes later than Gwen moaned, \"Oh, I'm cumming,\" and she squealed and slumped forward against the headboard.\n\nI left her alone for a minute to regain some normalcy and then I asked her to lie on me. She scooted down my chest and then leaned forward and collapsed onto my chest.\n\nGwen lay silently for a while and then said, \"Oh, I wish the world would go away so I could just stay in bed with you.\"\n\nI kissed her and Gwen passionately returned my kiss. When we stopped, Gwen said, \"I have something really touching to tell you.\"\n\n\"OK,\" was my response.\n\nI took a few minutes to talk to Barb while you were back here and I asked her to go slowly with Derek and not find herself getting married too soon.\n\nShe said, \"I'll try, but he's the closest thing to Will I can find.\"\n\nI think I gulped a few times and couldn't really say anything.\n\nAfter a minute I asked, \"What did you say in response to that.\"\n\n\"I told her, then, to be very careful because there was a streak of pure steel in you that I didn't think was in Derek.\"\n\n\"I'm deeply humbled that you would say that.\"\n\nGwen kissed me, I think, for nearly forever.\n\nWhen she broke the kiss, she asked, \"So, you'll be teaching for the next few years?\"\n\n\"Yes, I think so.\"\n\n\"Be happy doing it, Old Man.\"\n\n\"I'll try.\"\n\nGwen nodded and asked me to shower with her.\n\nAfter the shower, I indicated that I had something for her and a puzzled Gwen asked me, \"What?\"\n\nI reached into my bedside table drawer and retrieved my mother's engagement ring and gave it to her.\n\nGwen looked at the ring and at me and back to the ring and at me and was simply speechless.\n\nI urged her: \"Put it on.\"\n\nNot surprisingly, it was too big for Gwen, but the act of putting the ring on her finger loosened her tongue and she said, \"This is beautiful! Is this really for me?\"\n\n\"Of course it is,\" I responded.\n\n\"Tell me about it,\" Gwen asked.\n\n\"It was my mother's and she gave it to me and said she hoped that someday I'd find a lovely woman to whom I would want to give it. Honestly, I'd forgotten about it in the safety deposit box, but Barb asked me the other day to get you an engagement ring and she explained the engagement ring protocol and I remembered that I had this one.\"\n\nGwen then went on about a \"solitaire\" setting and gushed about the beauty of the ring and said that we'd get it sized and talked about carets and simply got excited. I was happy!\n\n//\n\nThe next morning we left the YMCA for downtown and a jewelry store Gwen fancied. A pleasant young lady waited on us and we looked at rings although Gwen and the clerk kept referring to them as 'wedding bands.'\n\nAfter exhausting their supply of rings Gwen asked me which style I favored and I considered the lot and said \"This one.\"\n\nGwen nodded and said, \"Oh, the ugly one? No, we won't get that one, Old Man.\"\n\nThe clerk made a funny gurgling noise and walked away because she had a coughing fit.\n\nI looked at the Princess and asked, \"So why did you ask me which style I favored?\"\n\n\"Well, I certainly didn't think you'd choose the one you did. It might look good on a Sasquatch, but on me it would like I was trying to wear a bracelet on my finger.\"\n\nGwen then isolated two different rings and said, \"Choose.\"\n\n\"Is this a test?\"\n\nGwen said, \"No, this is not a test. These are both nice looking rings that will look good on you, with your big hand, and on me, with my small hand.\"\n\n\"Oh, I see. Either one is fine with me.\"\n\n\"All right, then, we'll take this one.\"\n\nThe young lady who was waiting on us had recovered from her coughing fit and said, \"Let's get your respective sizes,\" and she started sliding skinny rings on our fingers.\n\nGwen was size 5 and I said, \"Oh, the same as your bladder size,\" and the Princess punched me in the gut. \n\nI was a size 13 and Gwen said, \"Yes, Sasquatch-size.\" \n\nI asked the Princess if I could punch her in the gut and she said I could not. Life is not always fair.\n\nAnyway, the rings, we were told, would be available for pick-up in two days along with the engagement ring and I paid the young lady and we drove off to visit the Campus Chapel.\n\nWe parked and walked into the open chapel and discovered a few students were in the pews reading or thinking or praying so we very quietly walked around and explored the chapel proper and some rooms off to the side and Gwen nodded and we departed.\n\nGwen noted that the Chapel did not currently have any religious symbolism in evidence and she wondered if each religion or denomination brought their own symbolic trappings to the Chapel as needed. I said that I guessed that was the case or, perhaps, the trappings were stored somewhere in the Chapel in a location we hadn't uncovered. \n\nGwen said she would call Campus Ministries and ask.\n\n\"What else do you have to do, today?\" Gwen asked.\n\nI indicated that I had some e-mails from Dubai already that I had to consider and I also had a troubling e-mail from the chemical company in Texas who had developed a very potent new liquid fertilizer and they were worried about quality control of the production process and wanted to know how frequently they needed to conduct quality control tests to assure a one-hundred percent safe product.\n\nGwen frowned and said, of the Texas firm, \"It sounds like they have an engineering problem more than a quality control issue.\"\n\n\"You're absolutely correct, Princess,\" I said, \"and the chemists see it that way and are asking me to come down on their side, but the finance and marketing guys are trying to bypass the real problem and get me to tell them how often to sample the product to make sure it meets the chemists' standards without the time and expense of developing a new back-end process that assures quality control.\"\n\n\"How really interesting,\" Gwen said.\n\n\"I suppose it is, Princess. But, when you get the technical guys lined up against the finance guys and the marketing group, the technical people always lose.\"\n\n\"Why?\" Gwen asked.\n\n\"Money. The faster you get the product to market with as little overhead as possible, the more money the company makes and the happier the stock holders are.\"\n\nThe Princess nodded her comprehension and asked, \"So what are you going to do?\"\n\nI said, \"I'm going to try to get more information. I think I'm playing with one-half of a deck of cards with this company.\"\n\nI went home and Gwen went on to campus to do some course planning and I reminded her before she left that she had, in fact, forgotten to ask me about the systems analysis book and I stuck my tongue out at her. She archly informed me that she had not forgotten, but she was simply excited about the engagement ring.\n\nLater that week we picked up the engagement ring and wedding bands and Gwen wore the former and put the latter in the bedroom so we would remember to take them to the ceremony.\n\nThe remainder of the week seemed calm enough although Gwen pitched a hissy fit the evening Barb called home to say she was spending the night at Derek's.\n\nLater when we went to bed, Gwen wondered what Barb and Derek were doing 'now.' I thought I'd have a little fun with Gwen and said, \"She's playing with his pee-pee right now.\"\n\nIn retrospect, I probably shouldn't have said that. I took at least ten punches to the gut and was called an idiot, a dumbass, a moron, an imbecile, and a pervert and she even tried to push me out of bed.\n\nWhen that failed, she yelled, \"Don't you dare touch me tonight!\"\n\nThat started me laughing and, as we know, it is not a good idea to laugh at the Princess. She erupted into another yelling outburst at me and then she yelled, \"Good night!\" and turned her back to me.\n\nMaybe five minutes elapsed and Gwen rolled over and said, \"I'm upset. You have to hold me.\"\n\n\"OK, Princess. Might I suck your nipples while I hold you?\"\n\n\"No! I'm mad at you! Well, maybe a little.\"\n\n\"I'll just suck a little and you tell me when to stop,\" I suggested.\n\n\"OK,\" the Princess agreed.\n\nI began flicking Gwen's left nipple slowly and then rapidly and then slowly again and she said, \"You said you were going to suck.\"\n\n\"Oh, I did, didn't I,\" and I sucked hard and Gwen expressed a long, low moan. \n\nI stopped sucking and asked for her other nipple which she thrust into my mouth. I sucked lightly and then strongly and I felt Gwen grab my hand and pull it between her legs.\n\nI continued sucking and Gwen began breathing hard and rubbing her pussy against my hand that she had pinned against her.\n\nI alternated sucking one and then the other nipple and Gwen was gasping and writhing about. She asked me to stop and she dove under the covers, located my cock, and commenced performing an amazing job of sucking me to hardness. She then stroked me slowly and then released me and emerged from under the covers.\n\nThe Princess announced, \"You on top and I don't' want to hear any dumbass comments about any pee-pees.\"\n\n\"No, Your Highness, I promise.\"\n\nGwen scrambled beneath me and positioned myself above her. She guided my cock into her pussy and I gradually insinuated myself into her. Once I was firmly inside Gwen wrapped her legs around me and her arms around my neck and I commenced thrusting. \n\n\"Oh, slowly, Old Man. Make it last.\"\n\nI slowed my thrusts a bit and smiled at the Princess who mouthed the words, \"I love you,\" at me.\n\nThe Princess was soaking wet and her pussy was hot. We fell into an easy rhythm that lasted for minutes until Gwen shuddered and said, \"Faster.\"\n\nI quickened the pace of my thrusts and Gwen began to thrust against me and she exhibited the early signs of her orgasm and she began to gasp. Eventually, she blurted, \"Let me cum first and then I want you to cum in my mouth.\"\n\nI quickened my pace yet again and it triggered Gwen's orgasm. She moaned loudly, stiffened, and then collapsed. I slowed my thrusts considerably and when she had recovered her sanity, she said, \"Put Ivan in my mouth.\"\n\nI pulled out of her pussy and presented Gwen my cock which she engulfed in her mouth. She stroked me rapidly for only a minute and I groaned and released everything I had. Gwen swallowed and kept sucking me and eventually sucked me dry.\n\nWhen she released me she very sleepily said, \"I've finally figured you out, Old Man.\"\n\n\"Oh?\" was my response.\n\n\"Yes, Gwen added, \"you're an idiot savant. You screw like a genius and you're a complete idiot the rest of the time.\"\n\nI found that pretty funny and enjoyed a good laugh.\n\nThe Princess stuck out her tongue at me and said, \"Hold me.\"\n\nI think she was asleep in two minutes.\n\nThe next day Barb escaped some carnage by coming home apparently while Gwen and I were at the YMCA and she was apparently forgiven by the end of the day when we next saw Barb.\n\nGwen was busy the remainder of the week with course planning and double-checking every detail of the wedding and reception.\n\nI was engaged for a surprising amount of time with Dubai and the Texas company. I was at wit's end with Dubai and had to call Sheik Abdullah to ask him to get the politics out of the equation because some of his underlings were using the statistics curriculum issue to jockey for political position. The Sheik assured me he would break a few heads and let me get on with the question.\n\nThe weekend was calm. I guess it was the calm before the storm because Gwen's dad was arriving Monday \n\nBarb had been working part-time in Sociology for the past week and today, Monday, she started full-time so only Gwen and I made the trip to the Birmingham Airport.\n\nWe arrived in time for Gwen to sip a Coke and I had a cup of coffee and when we checked the schedule board we learned that Pop's flight was on the ground so we went to baggage claim and waited. We waited. We waited. Gwen called Pop's house to see if he had missed the flight. She got no answer.\n\nWhen we were about to launch an all-points bulletin for him we heard over the loudspeaker, \"Gwendolyn Davis: Report to the Southwest Airline Ticket Counter and claim your father.\"\n\nNeither Gwen nor I said a word. She took me by my hand and we walked off to the Main Terminal and ticketing. We found Pops being virtually guarded by an old skycap who had probably seen it all during his day. Gwen rushed to her dad and I nodded to the skycap to join me which he did.\n\nI asked the skycap, \"Is there anything we need to know?\"\n\nThe skycap was a bit edgy and he replied, \"Yes, send that crazy old coot back where he came from.\"\n\n\"Give me a few details, please,\" I asked.\n\nThe older fellow said, \"Look around. Everywhere you look you see black faces. Most of the employees in this airport are black. It's Birmingham, Alabama for God's sake. This old coot asked me what all the black people were doing here. I told him they were working.\"\n\nHe actually said to me, a black man, \"I was told all blacks are on welfare.\"\n\nThe skycap continued, \"I don't whether to hug the poor dumb sonofabitch or hit him!\"\n\n\"Thanks for not hitting him,\" I said.\n\nWe were interrupted by Gwen who handed the skycap a twenty dollar bill and said, \"Thank you very much. That can't have been easy for you.\"\n\nThe skycap expressed his appreciation and said to both of us, \"That old coot had the nerve to ask me if there were any Communists lurking around because Commies like to recruit poor, uneducated people like blacks.\"\n\nGwen was pretty upset at this revelation and I said to the skycap, \"Take me to your leader. I want him or her to know about the work you did today above and beyond the call of duty.\"\n\nWe went to his supervisor's office and I gave the old guy a glowing recommendation and the supervisor asked me my name and address in case the company wanted to confirm with me what I had said about their employee. \n\nI provided that information and the old skycap cocked his head and looked at me and asked, \"Are you the Will David who played with all the brothers at Ole Miss back in the 70s?\"\n\nI laughed and said, \"Yes.\"\n\nHe said, \"Man, you had some moves even the brothers couldn't defend.\"\n\nI added, \"And they all had moves I couldn't defend.\"\n\nThat tickled him no end and with a handshake we parted company.\n\nI returned to Gwen and her dad and I deduced that Gwen had given him hell once or twice about his behavior, because he was quiet and withdrawn.\n\nPops perked up once we were in the car and back on I-20 and he pulled out a sheet of paper and announced that he had some questions for me that he and his buddies at the Senior Center had devised.",
        "\"OK, fire away,\" was my response.\n\n\"Number One: Why do all you academic people always defend the rights of women, gays, lesbians, and blacks?\"\n\n\"OK, Pops, I'll answer that if you'll tell me why you want to deny those people their rights under the Constitution.\"\n\n\"What?\"\n\nI repeated my answer.\n\nWe heard no more from Pops until we reached home and Pops asked where Barb was. Gwen explained that Barb was working and he would see her this evening.\n\nPops then asked if we still had all our cats and Gwen said we did and she told him the cats were eager to see him. That cheered the old guy considerably.\n\nThat evening we sent Pops out with Barb and Derek to find Pops a suit that could be altered by Friday.\n\nThey returned rather quickly and Barb repeated that Belks had come through nicely and someone could pick up Pops new suit on Thursday.\n\nThe rest of the week when Gwen or I had to visit campus we'd take Gwen's Dad with us and turn him loose. He found the football stadium and the basketball arena and he thought the Student Union was the \"neatest thing\" he'd ever seen. We always let him loose with twenty dollars so he could buy a meal and go bowling and we learned that some of the undergraduates had adopted him at the bowling alley. He had the time of his life and even bought a sweatshirt and cap with the University's logs on them.\n\nHe loved the cats and they returned his affection in droves by sitting with him and sleeping with him.\n\nAmazingly, he never insulted a soul or at least we heard no complaints about him.\n\nThe longer the week went on, the less cantankerous he became and Gwen and I talked about the advisability of moving him to an apartment near us because he was a different person once he got away from the seemingly poisoned atmosphere of his home and haunts.\n\nHe did fuss at Gwen and me about Barb keeping company with Derek. Derek was someone beyond Pops' range of experience. He found Derek quiet to a fault and he could not comprehend someone who could not discuss football or basketball or baseball with him. He also expressed considerable alarm over the fact that Derek might be parking his pickle in Barb. Gwen and I never even responded to his concerns about Barb and Derek's pickle.\n\nPops looked really great in his new suit, shirt and tie and he was a perfect gentleman at the Chapel at what Harry called a wedding rehearsal and I called a 'walk through' on Friday night.\n\nBy Thursday night Gwen asked her dad if he had considered moving to live near us. Pops said he had, but the whole atmosphere was too 'academic' for him and he indicated that he was more comfortable back home among his many friends. We didn't push it, but we told him that if he ever wanted to discuss re-locating with us, we were happy to discuss it with him.\n\nOn Thursday night we went to bed and Gwen was amazing. She told me it was her next to last night as a wanton woman and she was going to enjoy it. Boy did she ever. We screwed in so many positions I decided that she had been reading the Kama Sutra. We were unable to pull off the doggy style however. Gwen bent over the bed and presented me her tush, but I couldn't, with my knees, get low enough to enter her. Undaunted, we lay on our sides and I entered her from behind. I think she had three orgasms and slept the sleep of the dead that night.\n\nWalt arrived on Friday and Gwen and I both enjoyed his company immensely and he and I managed to get in nine holes of golf. Walt could still putt like a professional.\n\nWe had a motel room for Walt and he departed for it after the rehearsal and a meal with Barb, Derek, Pops, Gwen and me.\n\nI awoke the morning of the wedding and made some coffee and returned to bed where Gwen was still sleeping. After a few minutes Gwen stirred and said, \"I smell coffee. Some Old Man must be in my bed.\"\n\nI said, \"Not just any old man, an old man who is going to get married today.\"\n\nGwen smiled and said, \"Oh, that's right. That is today. I had forgotten.\"\n\n\"Of course you had,\" I responded.\n\n\"That coffee smells good, Old Man. Please make me a cup.\"\n\nI got up and made Gwen a cup of coffee and brought it to her and she sipped and said, \"Do you want to know the schedule for the day?\"\n\n\"Schedule? What kind of schedule? We get in the car at 12:10 p.m. and drive to campus and park and go get married.\"\n\n\"That is not the schedule, Old Man.\"\n\n\"OK. Well, what is the schedule today?\"\n\n\"You and Walt have to be out of here by 11:00 a.m. so I can get dressed and you can't see me at the church until I process down the aisle with my Dad.\"\n\n\"What kind of nonsense is this?\" I asked.\n\n\"Tradition, Old Man. The groom never sees his bride in her wedding dress until the ceremony.\"\n\n\"That's silly. I've seen you get dressed for months. Half the time, I'm the one zipping your dress.\"\n\n\"Not today, Old Man. Tradition must be served.\"\n\n\"What is it Walt and I do between 11:00 a.m. and 12:30 p.m.?\"\n\n\"You don't get dirt on yourselves. You don't get grease on yourselves. You don't spill coffee on yourselves. You don't go to the golf course. And, Walt has you tucked away in the little room beside the alter by 12:15 p.m. so that you can't see me and Barb and my Dad arrive. And, each of you make sure your fly is zipped.\"\n\n\"This is silly,\" I said.\n\n\"I know,\" Gwen said, \"but I want you to be surprised when you see me.\"\n\nI looked very quizzically at the Princess and she smiled and said, \"Wait until 12:30 p.m.\"\n\nI smiled and shrugged and said, \"Whatever makes you happy.\"\n\nWe were interrupted by a pounding on our bedroom door and heard Gwen's dad yelling, \"Are you two parking the pickle in there?\"\n\nI just shook my head and Gwen said, \"Go in the kitchen, Dad, and I'll be right out and make you some breakfast.\"\n\n\"OK!\" Gwen's dad yelled, \"but no pickle parking.\"\n\n\"You know,\" I said, \"I'd like to pickle him.\"\n\nGwen shot me an amused look and said, \"You should have been raised by him. I was eight years old before I ever heard him say a word that wasn't a shout.\"\n\nGwen got up and threw on some clothes and cooked some breakfast for all of us. Barb and I joined Gwen and her Dad and it was apparent that Gwen's Dad was really keyed up for his big role today. Barb did a good job of keeping him from jumping out of his own skin.\n\nThen Walt and Derek showed up and Gwen's dad explained his role in the proceedings to them. They never batted an eye and told Pops that, yes, they'd seen him at the rehearsal last evening. Pops' response was, \"Oh, were you there?\" They assured him that they were.\n\nGwen explained the schedule for the morning one more time for everyone. We all had another cup of coffee and Walt and Derek departed to get ready.\n\nBarb was a little nervous as the morning wore, but Gwen was relaxed and cheerful.\n\nWalt appeared a few minutes before 11:00 a.m. and I gave him Gwen's wedding ring and he pocketed it. I gave Gwen a big hug and kiss and Walt and I headed for Starbucks and an hour of conversation. We left Starbucks around Noon and headed for the chapel and were safely ensconced in the little room to the right of the chapel.\n\nHarry showed up, bedecked in his clerical robes, and he looked very ministerial and he ran through his checklist of items with us and, convinced that we were ready, he departed to check on Gwen and Barb.\n\nAt 12:30 p.m. Harry stuck his head in the door to our room and told us to come into the chapel and take our place. I led and Walt followed and we positioned ourselves precisely as we had practiced the night before.\n\nThe recorded music began playing and Barb walked down the aisle dressed in Gwen's yellow dress and she looked simply spectacular. The folks in the pews expressed their pleasure with how Barb looked and with her poise with a number of smiles and I heard a few comments about how nice she looked. She took her position opposite us.\n\nThen everything just went to hell. And, there is no denying the truth that I precipitated the whole thing.\n\nThe music for Gwen's entrance began to play just as Walt asked me a question. I turned to answer him and before I could answer him I heard a chorus of \"Ooohhhhhhhhhhhhhs\" and \"Ahhhhhhhhhhhhhhs\" and even some applause. I turned to see what could have caused the reaction among the folks in the pews and it was Gwen.\n\nShe had started down the aisle with her arm hooked around her dad's arm and she was wearing the purple dress she had worn to the dinner at the national conference.\n\nI have no idea what seized me, but I took one look at her and I was simply propelled down the center aisle towards her. Gwen was initially startled and she then broke into a huge grin and disengaged herself from her dad's arm and she came running to me and I heard her, above the commotion, say \"UP!\"\n\nI certainly picked her up and she said, \"I love you\" and gave me a kiss that nearly melted the pane glass windows. The place simply erupted into laughter and applause.\n\nShe broke the kiss and laughingly said, \"Go back and stand by Walt. I have to finish walking to you.\"\n\nI nodded and deposited her gently on the floor and the laughter was deafening. Over the laughter, I heard, \"Way to go, Will!\" and \"Youda man!\" and I don't know how many other phrases.\n\nAs I turned, one sound stood out above all the pandemonium and that was Tariq Maloof laughing. He was laughing uncontrollably and when a six foot, seven inch, three hundred and fifty pound man laughs, the ground trembles.\n\nI can't explain why I walked down the aisle, and Tariq can't explain why he found my behavior so funny, but he was doubled over laughing uncontrollably until he realized he couldn't catch his breath. He stood up with his eyes bulging while gesticulating wildly and next to him was five foot seven inch Doug Gottlieb pounding Tariq on the back trying to get him to breathe.\n\nI looked to Gwen expecting to find her in tears, but she was laughing along with everyone else. In fact, I looked around the chapel and the only three people not out of control were Derek, Gwen's dad, and Harry who looked like the wrath of God.\n\nWhen I looked back at Maloof, he had just achieved a modicum of composure and was catching his breath while Doug was still frantically beating on Tariq's back.\n\nMaloof took a great gulp of air and bellowed at Doug, \"Desist you illegitimate son of a fig merchant!\"\n\nThat was nearly the end of the ceremony right there as the place erupted into laughter. People were alternately bent over laughing, some were seated, some were barely standing some were weaving around barely able to stand and it was just pandemonium.\n\nI turned to Gwen to try to apologize and Gwen was laughing harder than anyone. When she had calmed herself sufficiently she said, \"Oh, Old Man, this is just perfect. I knew, somehow, you'd mess it up and I was prepared for it. But, the way you messed it up by striding down the aisle to me thrilled me beyond words and it will be remembered and passed along for generations to come from the people here.\"\n\nBy the time Gwen had spoken to me, no one was standing. Exhausted, everyone had seated themselves with an occasional bark of laughter.\n\nAt this point a really angry Harry asserted himself. He began by saying \"That's enough. I want quiet and I want to inform you that this not how a wedding ceremony is conducted. Now, this wedding is cancelled unless we have some decorum.\"\n\nEveryone became serious and when it became absolutely silent, Harry said, \"Everyone return to your starting place and we'll begin the wedding ceremony again and we'll do it right.\"\n\nEveryone dutifully obeyed Harry and the ceremony went just as rehearsed and Gwen's dad delivered his line clearly without shouting. I even said, \"I do\" on cue and Walt produced the ring on cue and we concluded the ceremony with the newlywed kiss. Of course I picked up Gwen and carried her out of the Chapel and into the bright sunlight outside before putting her down on her own feet.\n\nOnce on her feet, Gwen beckoned to the photographer and asked if he had captured the shots she specified and he said, \"Yes, the second time. The first time I was laughing so hard I couldn't keep the camera steady. Gwen was satisfied and said, \"Join us at the house.\"\n\nThe reception was amazing. Everyone from the department came and everyone was at ease. I was pleased to see almost no alcohol consumed despite the fact that the caterer had provided a bar.\n\nThe first major highlight of the reception consisted of Harry's arrival. He got out of his car, walked into the back yard and confronted and me and said, \"Professor, I want you to know that Gwen is correct. You are an idiot.\"\n\nThis elicited gales of laughter from everyone and an apology from me.\n\nThe second highlight consisted of my being asked to explain my behavior and I indicated that I really couldn't, but I suspected it had something to do with the dress Gwen had worn and the symbolic significance of it.\n\nThat prompted requests to tell the story of the dress and Gwen nodded 'OK' and asked me to tell the story. I declined saying I'd done more than enough that day, but Gwen could tell it if she wished.\n\nGwen told the real story starting at 11:00 a.m. on a Sunday at the national conference. She omitted the bedroom details, of course, but she did emphasize that we knew that we were destined for each other no later than twenty-four hours after we laid eyes on each other and she told how I'd spent a small fortune on her simply so we could attend the dinner together.\n\nDear old Madeline spoke up and asked, \"Have you been apart since the national convention?\"\n\nGwen answered Madeline's question and made Madeline feel very good by telling Madeline what she had said after the dinner at the national convention.\n\nBarb interrupted and asked if she could say something and Gwen nodded her approval. Barb told of the many times she had worn her Mom's clothes and she recalled the time she had asked Gwen if she could wear the purple dress. Gwen's response, according to Barb, was, \"You may not even touch that dress. That is the single most significant garment of my life.\"\n\nBarb said, \"I'm so happy to know now why you said that, Mom.\"\n\nI swear; there wasn't a dry eye on the property after Barb related her story.\n\nSomeone asked if we would take a honeymoon trip and Gwen laughed and said, \"Every day is a honeymoon around here, but yes we're going to Maui for a week next month.\"\n\nThe party went on until 6:00 p.m. when everyone left and we told Derek and Walt to be at the house by 7:30 a.m. the next morning for breakfast.\n\nAfter we went into the house Gwen's Dad tearfully told Gwen that he was so honored to be invited to the wedding and to have the opportunity to interact with all the 'academic people.' He said, \"I can't talk to them people, but I sure could listen to them and they are the nicest people I've ever met.\"\n\nGwen hugged her dad fiercely and he shed a tear or two and then said, \"I'm going to tell my friends at home that they are all full of shit. I seen black people working. I met nice Jewish people and I even met 'Islams' and enjoyed them. My friends back home don't know nothing.\"\n\nGwen smiled and nodded and Barb said, \"You tell 'em Grandpa.\"\n\nSo, we were married, and the next few weeks were a blur leading up the Hawaii trip. The Texas chemical company demanded that I sign a non-disclosure document saying I would be forever silent about their new fertilizer and I would not sign it and the company threatened me with all kinds of potential action and I simply said, \"I'll see you in court as an expert witness for the plaintiff when you get sued for ruining an NFL or MLB stadium.\" They paid me off and fired me.\n\nThe other two consulting trips went well and I got both firms to express interest in interviewing Doug Gottlieb as my replacement.\n\nThe Dubai effort was difficult because it was a long distance affair, but we got the project done and the Sheik paid well and even threw in a bonus as a way of thanking me for helping him identify a couple of trouble makers in his Ministry.\n\nOur honeymoon to Maui was simply spectacular and we did it up right. There is one story about the Maui trip I have to tell simply because it demonstrates Gwen's resourcefulness and pluck.\n\nOne afternoon we were at our hotel's pool simply lounging and reading and Gwen asked me to go back to the room for something she had forgotten. I departed and was gone only a few minutes and, upon my return, I could see, from the lobby, that Gwen was on her lounge chair and she was flanked by two muscle bound body builders and another one was standing in front of her.\n\nWhat I did not know was that these three were troublemakers and were known to all the hotel employees in the hotels along Kaanapali Beach. I later learned that as I was seeing the three body builders for the first time, the hotel concierge was dialing the police to have the three thrown off the property.\n\nAs I crossed the pool area to Gwen, the body builder standing in front of Gwen lowered his swim trunks and was waving his cock around and asking Gwen if she's like some of what he was offering.\n\nGwen's response to him was, \"It's too small to be a penis. What in the world is that?\"\n\nThe guy was simply speechless until I tapped him on the shoulder from behind. He whirled and snarled, \"What do you want, Grandpa?\" \n\nI threw just one hard jab, with my knuckles leading, into his Adam's apple. The guy made the most fascinating sound that I cannot duplicate. I can only say it resembled something like, \"Ghhhaawww.\" He grabbed his throat and staggered around and eventually fell over.\n\nThe fellow to Gwen's right and to my left yelled, \"HEY!\" and stood up and started for me and I jabbed him in both eyes with my index and middles fingers respectively. The sound he made I can duplicate. It was, \"Owwwwwwwwwwwwww!\" Temporarily blinded, he staggered around and toppled, screaming, into the pool.\n\nThe third body builder, to Gwen's left and my right, shot out of the lounge chair in which he'd been seated and he started to charge me. I had lost all the advantage of surprise by now and I knew I was in trouble. What I had not counted on, however, was Gwen sticking out her leg and tripping the guy as he charged me. He tripped and plunged headfirst into the concrete. If you've ever heard the sound made when a watermelon splits open you have an idea of what his forehead sounded like when it met the concrete. \n\nAll three were down and I looked to Gwen who was rubbing her leg where she had tripped the guy, but she was grinning at me and saying, \"This is fun. Do you come here often, Sailor?\"\n\nTwo policemen appeared at this point and marveled at the carnage. They did, however, call for ambulances. The funniest line of the day had to be the policeman's who asked, \"What in hell is that guy who is turning blue doing with his dick hanging out?\"\n\nThe wonderful week in Hawaii did end, of course, and Will and Gwen did return to the reality of their lives, but the honeymoon for the old bachelor and his princess never really did end.\n\n-------------------------------------------\n\nPlease accept my thanks for the wonderful feedback and comments you readers provided as I wrote the story of Will and Gwen.  "
    ],
    "authorname": "Bedu",
    "tags": [
        "will",
        "gwen",
        "professors",
        "academic",
        "old bachelor"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/at-long-last-gwen-ch-05"
}
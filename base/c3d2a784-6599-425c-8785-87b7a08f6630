{
    "title": "My Little Ventrue Pt. 08 Ch. 05",
    "pages": [
        "~~Natasha~~\n\nWhen dawn came, she knew everyone else was getting involved in the search for Jack. For the first time, she wasn't concerned to learn he was missing, though. Jack, new Jack, cursed Jack, was as strong as the elders if he let loose, from what Damien told her. He might throw the Masquerade to the wind, but no one was killing that kid without napalm or a nuke.\n\nThe concern, when it came to Jack, was what would happen if he went rogue and decided to do whatever the fuck he wanted. He'd be another Viktor or Tony, except worse.\n\nBut, for tonight, she had a different concern.\n\n\"Noah and Caleb are with J-Jessy?\" she said. The three of them, her and her boyfriends, were on a rooftop between the North Side and South Side, standing around and looking up at the light-washed sky.\n\n\"Yeah. They wanted to talk with Eric, according to Avery. But then Damien called about Jack, asking for some help running his trail.\" Art checked a message on his new phone, clearly had trouble pressing buttons on a touch screen, and put the phone away. Poor guy still wasn't used to technology, but it was high time he, and all the other Uratha learned what a touchscreen was.\n\nNatasha nodded. The Prince was going to ask her to do it, no doubt, but she already had a mission. Investigate the tears. Antoinette knew how important that was, and she knew that Jack was strong enough to take care of himself in any circumstance now.\n\nTash dared not think about how Antoinette might react if she turned out to be wrong.\n\n\"You trust those t-two?\" she asked.\n\nMatthew, eyes locked on the sky, didn't respond. Not ignoring her, and not choosing to remain silent, either. He just liked looking at the sky. It wasn't exactly a pretty sky, not with Dolareido's unending nightlife washing it out with a million lights, but he watched the blackness above anyway, as if looking for stars bright enough to poke through Dolareido's light curtain.\n\n\"'Course, yeah,\" Art said. \"Caleb can be a bit of a hothead, or a hotshot, depending on how successful his impulsiveness is. But Noah is a bedrock.\"\n\nShe smiled at that. \"Caleb. Jessy says he and Eric, umm... really t-tore up a chunk of North Side.\"\n\n\"Ha. Like I said, hothead. Caleb's a smart guy, but a bit overconfident. He told us about that fight too, by the way, and how Eric lost control.\"\n\n\"Uh oh...\"\n\n\"Lost control, but somehow managed to not go on a rampage and start ripping everyone apart.\" Shrugging, Art walked over to her and set a kiss on her forehead. \"He's a weird breed, Eric. Must be Dolareido.\"\n\nDolareido, changing people to the point they could have sex in any circumstance. Yeah, that sounded right.\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\"You know the drill Natasha,\" Avery said from the couch. \"But we're splitting up this time. No hunts. Avoid talking to anyone.\"\n\n\"Yes ma'am,\" everyone said together. Natasha didn't, but she nodded to Avery, enough to let her know she was listening and planned to follow her lead.\n\nWith a snort, Avery got up and started hand talking, using her hands to make sweeping gestures to emphasize her commands. It was cute. The Kindred elders in Dolareido preferred to stand like monolith statues.\n\n\"Me, Flow, and Carter are going to North Side, and we'll check out some previous activity. The rest of you, check out South Side, and scout out trails that lead to the Cathedral. Natasha, take the boys and check out near the Grand Cathedral directly.\"\n\n\"There? D-Directly? Why?\"\n\n\"Because you know Maria. If she's up to something, something involving spirits, there's a good chance you can find evidence there. Plus, you're sneaky. You and Art can stealth around, and Matthew will be your enforcer. So keep an eye open for those tears, and if you see something that points a finger at Maria, you know the drill. Recon only.\"\n\nThe three of them nodded, and Natasha looked down as she started planning. She also looked down because she didn't want Avery to see the expression on her face. From the way Avery had worded the command, it sounded like she figured Natasha would agree to spy on her old boss without issue. Maybe the boys gave Avery the impression Tash didn't like Maria?\n\nWell, she didn't like Maria, that was true. But she didn't hate her, not anymore. The woman had shown a softer side too, since Lucas's death, and if anything, Natasha found herself wanting Maria to find a little happiness. Maybe in the future, she might even learn to like her, if they hung out more. If Avery turned out to be right, and Maria was up to something sinister, she wasn't sure how she'd respond. Ideally, she'd talk to her old boss, but that might be difficult with Matt and Art with her.\n\n\"And Clara?\" Matt said.\n\n\"She'll be fine,\" Avery said. \"And if she's not, Noah and Caleb can find her. Having ten noses on that trail wouldn't help much more than two. And they've got Eric, and they've got that Damien fellow, who's going to bring his monster girlfriend. You know, the one that can open portals into the Hisil, Gurihal, the Dream Realm, and whothefuck knows where else?\" She stomped over to the huge man, glared up at him, and poked him a couple times in the chest. \"So unless you can think of some other way we might find her, other than by doing exactly what we're doing, feel free to suggest something.\"\n\n\"Got nothing, boss,\" he said, small smile turning the tense situation into a happy one. They were friends and family, not military. Arguments rolled off them like they were in a sitcom.\n\n\"Alright then, let's go.\"\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThere wasn't much ceremony this time. It wasn't Tash's first trip into the Hisil, and everyone had orders. Without Eric to be an X factor that needed guidance and monitoring, Avery didn't feel the need to be extra careful. To her, Natasha was harmless. Natasha wasn't harmless, but she didn't want to make any waves either.\n\nBut, if Maria came into the picture, she didn't know. Maybe waves would happen. After having been chased by the werewolves through the tunnels, the first time Natasha met them, and seeing first hand how strong, fast, and destructive they could be, she was confident she could adapt. She'd been working on it. She had her silver knife, and tonight, she brought a second pistol, a small one, with silver bullets. Not because she thought she'd have to fight the werewolves; they might even be right about Maria. But, she didn't live as long as she had without preparing, when considering possibilities. If the werewolves and Maria got into a fight, better to have options ready.\n\nFlow was waiting for them, and while the rest of the pack acknowledged her, er, it, with nods, waves, a few hellos, and otherwise perfectly casual greetings, Natasha stared up at the beautiful goddess of water. So gorgeous and angelic. So awesome, in the original sense of the word. And also clearly female, or at least feminine.\n\n\"Flowing Sanctuary,\" Natasha said, voice wavering. \"Um, d-do you know, if, uh, a spirit named Safe of Grey Street is... okay?\"\n\nThe swirling goddess looked down at her, crystal glowing eyes staring down with the strange impassion of an alien entity who thought of her with as much interest as humans did ants.\n\n\"Safe of Grey Street and its choir do well, in the... rural areas, of Dolareido, where they stay.\"\n\n\"Sh--it does?\" So damn hard to remember spirits didn't have genders. They embodied things, and sometimes embodied things often identified with a gender, but they themselves didn't have them. The exception being Black Blood, that insisted it did. Strange.\n\n\"Yes. It avoids South Side, and the turmoils caused by Black Blood, Street-Tail King, and Red Tide. Do not worry.\" Flow nodded from atop its spinning vortex of water, and without preamble, followed after Avery.\n\nNatasha smiled, managed a tiny finger wave at the colossal creature, and followed after the boys.\n\nThe night was young, and it was important they didn't overstep themselves, so they walked. Without traffic, pedestrian or otherwise, it wouldn't take long, walking at a brisk pace, and it let them keep their eyes and ears open for nearby disturbances. It was a recon mission, after all. Once they were within a mile of the Cathedral, they could get stealthy.\n\nCrows with glowing eyes flew overhead. More rat-like blobs disappeared around the corners of twisted, leaning buildings, through the holes in strangely dark manhole covers, and some disappeared through minuscule cracks in building foundations. A few flying eels came around, spotted them, and flew away. Some creatures the size of dogs, made of concrete and wheels, drove by. All in all, it was a lot quieter than the entertainment district of South Side would be, if the route they were was going there. But, from the Carthian half of South Side to the Grand Cathedral was a quiet route, both in and out of the spirit world apparently.\n\n\"I... I hope it's not M-Maria,\" she said. \"If it's another Minerva situation, it'd be p-pretty horrible, right?\"\n\n\"Yeah, it would be,\" Matt said. \"Avery would insist on stopping her, and something tells me Maria wouldn't listen.\"\n\n\"D-Do you think you could take her?\" she said.\n\nArt shrugged. \"Maybe. You saw what happened when Matt and I tried to take on Jacob.\"\n\nShe shivered. That had been a horrible night. Jacob, like all Nosferatu, had ludicrous amounts of strength, but she'd never expected him to be able to thrash two werewolves like they were children. The only reason Matt and Art survived the encounter and didn't have permanent injuries to show for it, was their Gauru forms' ridiculous healing ability, and Jacob's mercy.\n\nAnd Maria was Nosferatu, supposedly with the strongest Nightmare Discipline in the city. Seeing Matt succumb to Jacob's Nightmare had been scary enough. Seeing either of them succumb to hers, would be worse.\n\n\"Why?\" she said.\n\n\"Why what?\" they said together.\n\n\"Why w-would Avery insist on stopping Maria?\"\n\nArt shrugged. \"The tears--\"\n\n\"What if the tears aren't a result of whatever M-Maria is d-d-doing?\" Assumptions were bad. It was important they dot the Is and cross the Ts, before someone died who didn't need to die. The devil was in the details.\n\nThe two men looked at each other, as if never having considered the suggestion before.\n\n\"The red wraiths are hanging out around the tears,\" Matt said. \"And we know the red wraiths are talking to Maria somehow. We know the red wraiths have some kind of deal with Black Blood. That's--\"\n\n\"N-Not enough evidence.\" She frowned, stomped her foot once, and folded her arms across her chest. \"We need to learn more.\"\n\nArt smiled down at her. For a moment, she thought it might be a condescending smile, but it wasn't.\n\n\"That's why we brought you, to be the smart one. Matt and I? Hell, the whole pack? Dumb, dumber, and dumbest.\"\n\nShe beamed, for a second, but quickly suppressed the smile. He may have been right about his pack, though she suspected Noah and Art were both a lot smarter than they let on.\n\n\"Alright, so, follow m-my lead tonight, ok?\"\n\nBoth men simultaneously saluted with strict military posture. \"Yes ma'am.\"\n\nOh good grief.\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n~~Beatrice~~\n\nThere were two ways to communicate with Black Blood. Perform a communication ritual, which seemed to be a pretty loose ritual involving burning some candles, and having a shit load of occult symbols drawn on the walls and floor and shit. The cave already had that, so, all she had to do, was put some vitae into the effort, like beckoning a bird with a bird call. Except, big dangerous bird.\n\nThe other way was with a sacrifice. That was required if Black Blood was to directly act on physical matter in a casual way, according to Jacob. Also required, if someone didn't know all the symbols and shit that Black Blood liked. If Antoinette or Maria or whoever else wanted to speak with the big bastard attempted to summon him, they'd have to sacrifice someone. Jacob could talk to him without that step.\n\nAnd, Beatrice wanted to see if she could talk to him without that step as well, using the tools Jacob had given her. Deep as this pit she'd dug herself was, slaughtering kine was not fun.\n\nShe and Jennifer lit the candles. So fucking creepy how Elen hung in the center of the small occult cave, with much less room for the two vampires to back off and not be too close. In the other cave, they had plenty of room to walk around, without having to be within touching distance of the bowl in the center. It added weight to their actions, being so close to Elen. If she'd been a normal person, groaning or crying, Triss doubted she'd have been able to enact what was doubtlessly going to be act of torture.\n\nShe held up her hands, out to her sides like a big Y, looked up, and forced vitae through her limbs. Vitae was empowering. It was life energy, stolen from prey and used to fuel physical and magical abilities. Kindred could manipulate it to do any number of things. Tonight, the goal was simple: use the environment around her, a giant summoning room, to beckon a god of death to her. Fucking. Metal.\n\nIt was sort of like a Cr\u00faac ritual. With Cr\u00faac, she had to infuse her vitae into the act, usually by sacrificing some of her blood, but not always. It was a strange feeling, but like riding a bike or playing an instrument, it was something attached to her, something she could use, like flexing a muscle, a strange muscle inside her. And like learning to ride a bike or playing an instrument, it was a skill that could be learned, to use vitae to reach out for the strange forces that permeated the fucking universe.\n\nShe'd learned. Now, all she could do was hope the thing she was trying to contact, was listening, and willing to come.\n\nFirst, the cold came, the unnatural, piercing cold that wasn't a temperature, but an aura. It hit the skin and the bones at the same time, and Beatrice couldn't suppress the shiver that worked up her spine, inviting hard muscle clenches, as if she'd jumped into a pool of ice water. Black ooze began to trickle from the walls, thick, as if the Earth could bleed onyx. The symbols that covered the walls, floor, and fucking ceiling, oozed bits of blood as well, always black. The skulls underneath the iron bowl in the center cried tears of obsidian, and some of those tears went up, against gravity, and splashed into the ceiling.\n\nShe was used to Black Blood's presence now; as used to the presence of absolute death someone could get, anyway. But this time, Jacob wasn't around. It was just her, Jennifer, and Black Blood, a spirit creature entity thing that everyone was terrified of. If she said something wrong or did something to piss it--him off, she could easily end up a stain on the floor, along with Jennifer.\n\n\"I spy, with my little eye,\" the darkness said in a Southern drawl, \"a young witch and her companion, looking to beckon the likes of me.\"\n\nWell, that was easy. Too easy.\n\n\"Yes, Black Blood,\" Beatrice said. \"I... I uh...\"\n\n\"Y'all don't need to be so stiff. I ain't gonna hurt you, unless you do something to rightly deserve it.\"\n\nA god of death telling her to not be stiff, would have been hilariously weird in most situations. But she'd met the creature several times, and his personality remained consistent. He seemed like a happy guy from the South, except, with a strange obsession with flesh and death. Similar to Jacob, in his own strange way.\n\n\"Uh, thanks. Let me know if I'm approaching that line, k? Cause, yeah.\" Cause Jacob wasn't there, and she really didn't want to fuck up and die.\n\n\"Reckon I will.\"\n\nTriss nodded, and glanced over to see how her friend was doing. Jen was beside her, a step to the side and a step back, away from the bowl. But Black Blood wasn't summoned to the bowl. The spirit filled the room around them, having no body to possess, and not bothering to 'manifest' itself; apparently that took a lot of effort. Without a direct body to avoid, Jen slowly turned in circles, eyes scanning, hints of fear in her gaze. She stayed close to Triss. Triss stayed close to her.\n\n\"Black Blood, I summoned you to request your--\"\n\n\"Aren't you precious? I said don't be such a stick in the mud, little witch. Speak freely.\"\n\nDon't be stiff, he said, right. Ok, talk to the closest thing to the god of death she imagined she'd ever see, like she'd talk to Jacob. Except, hopefully without the insults.\n\n\"Know why I called you?\" she said.\n\n\"Malachi informed me. Said you were fixin' to break this woman? Get her to use her flesh magics, in ways I can't.\"\n\nThat made her pause. \"In ways you can't? You can manipulate flesh?\"\n\n\"Of the dead.\"\n\nBlack Blood, weird spirit that grew with Dolareido, that seemed to embody death, or at least an artistic side of it, was capable of manipulating the flesh of the dead. It would explain why he needed, or wanted, a body if he was going to interact directly with the physical world. Somehow, she got the impression that was mostly just to make things easier for him. Or maybe, he just really got off on it.\n\n\"And... how did you come to possess an ability like that?\"\n\nThe oozing darkness laughed, and hints of the deep, alien bass underneath the voice rumbled the walls. \"I am what I am. Has Malachi not educated you?\"\n\n\"He's told me some things about you, yeah. But I still don't know what you are, Black Blood, where you came from, how you came to be, all that shit.\"\n\nMore laughter, but quieter, as if the thing was thinking. Could a spirit think? It didn't have a brain. Questions for a dragon, she supposed, not a witch.\n\n\"Powerful secrets, vampire. Ain't no reason for me to share them with you. Maybe in a few hundred years, when you got the strength to be useful to me, we can trade for 'em.\"\n\nSpirits had banes and bans, according to Jacob. Things that could hurt them, and ways to control them, rules they had to follow. What she knew about Black Blood told her he was some sort of spirit of death, and apparently dead flesh. The name Black Blood started to have a lot more meaning than just something creepy, and a good indicator of what the spirit looked like. Maybe the spirit thing was a literal incarnation of death in the sense of flesh. Surprising he didn't smell like rot, like Mark did.\n\n\"So, you won't give me anything for free? Gonna have to trade for everything?\"\n\n\"Slicker than a fox, ain't ya? Yes, that's how things work, little witch. You do me a favor, and I do you one.\"\n\n\"Alright.\" She took a deep breath, and glanced over at Jennifer. Jen didn't like what she was hearing, but she stayed quiet. \"What favor would you want from me, if I asked you to poke around inside Elen? I need her to--\"\n\n\"To create and twist flesh, yes? To craft a vessel?\"\n\n\"Yes. Jacob's filled you in on what I want to do, right? I want to... to... resurrect Julias.\" She was tempted to say 'resurrect someone' but there was no point in lying, not to this thing. It knew everything, either because Jacob told it everything, or the damn thing eavesdropped with a thousand ears.\n\n\"And you know chances of success are low? Damn low. Even if this shell of a woman could do what you wanted, finding your man's soul in the great beyond is probably a lost cause?\"\n\n\"Fuck, if you're convinced that--\"\n\n\"Now now, hold your horses. I said chances are low, not impossible. Malachi took a stab at it, after Minerva was killed, but we ran into a couple problems.\"\n\n\"Getting a body, and getting the soul.\"\n\n\"Exactly. Now, I can craft me a fine body with the flesh of the dead, but it will be dead, and not like a vampire. The curse--\"\n\n\"Curse?\"\n\n\"Not that thing inside the kid, Jack. The normal curse that infects every single last one of you varmints. It latches onto your soul, and turns your body into a dead thing, half alive on the blood of victims. It's special, and not something I can just create.\"\n\nShe nodded, and slowly paced the bowl with Elen. The old woman's eyes were closed. Sleeping maybe? Or comatose? She looked like hell, but she would not die, no matter how long they left her up there.",
        "\"So, what about creating a zombie corpse version of Minerva, and jamming her soul in there?\"\n\nThe darkness chuckled. \"A walking corpse is not a vampire. Many would consider it a fate worse than death.\"\n\nThat, was a point worth considering. What would someone think, or feel, if they suddenly woke up a zombie corpse? Vampires were undead, true, but like the spirit said, they weren't anything like zombies. Hell, all it took was a fresh meal to have a vampire's body basically running like it weren't dead at all. In reality, vampires were half-dead. If Black Blood somehow managed to give a corpse the ability to walk around under a soul's influence, how the fuck would that work? They might rot standing, for all Triss knew.\n\n\"And, of course, getting the soul,\" she said.\n\n\"The bigger problem, without a doubt. We killed dozens of people at the height of the experiment, and only managed the tiniest glimpse to the other side.\"\n\n\"That... that problem can wait. Let's just see if we can get Elen to craft us a living body.\"\n\n\"I'm fixing to, as long as you agree to my terms.\"\n\nTime to dance with the devil.\n\n\"Alright. What's the deal?\"\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n~~Jack~~\n\nIt didn't take long to update Sabrina on Dolareido. She'd learned from more recent ghosts, and hadn't died all that long ago. His smartphone really impressed her though, but predictably, he had no signal, of any kind.\n\n\"The Harlington building was re-purposed into a casino.\"\n\n\"Aw, that's a shame,\" the ghost said. \"I liked the food there. Very fancy.\"\n\n\"And... and that's everything, really. That's all I know about Dolareido. Sorry, I never did watch the news much.\"\n\nSabrina laughed, a harsh and shrill sound, but it faded before any of them started to cringe. \"I guess. But... you still haven't explained about you.\"\n\nHe sighed, looked around at the subway platform, at Clara and S\u00e1ndor, and then back to the ghost. \"I was kinda hoping I wouldn't have to.\"\n\nSabrina frowned, and he flinched. Careful, Jack.\n\n\"You're not human. Neither is she. Neither is he.\" She hovered up and around, slowly drifting over them, mist leaking out of her and falling on them and the subway alike. More of that death cold crept into his system. If he'd been alive like his two companions, it would have bothered him more; he could feel the cold leaching at his bones. But, he was already dead, and being cold meant nothing to him. Clara would be uncomfortable, but fine, for now. S\u00e1ndor he wasn't sure about. The guy was healing, and quickly, but he hadn't eaten or drank anything, and while Clara could probably go a couple more days before dehydration became a problem, he doubted S\u00e1ndor had that long. They both had something inhuman in them to fight that sorta stuff off, but he had no idea how long they could subsist on it. The trouble with a living body.\n\n\"Vampires... exist,\" he said with a shrug. \"I don't know if that should be really surprising though? You're a ghost.\"\n\nShe laughed at that, a sharp, short-lived laugh. \"True.\"\n\n\"Right, so vampires exist, and so do most paranormal creatures you might think of. The usual stuff anyway. Vampires, werewolves, nightmare monsters, ghosts, uh... probably other things.\"\n\n\"Ooh, scary.\" The ghost nodded, taking it all in stride. \"I can see that you're not human, and that you're all different, but not much more. Like you're all half human.\"\n\n\"Vampire,\" Jack said with raised hand. \"Clara's a werewolf. My injured friend there S\u00e1ndor is a nightmare monster. And, we really need to find a way out of here and back to the rea--physical world, to get him treatment.\" Or at least some water.\n\n\"Wait here. I'll see if the coast is clear. Could take a bit to give the area a once-over though. Gimme a bit.\" With that, Sabrina flew away, body going horizontal like a bird as she disappeared down the tunnel.\n\n\"Clara,\" Jack whispered, \"keep your senses open, for her specifically.\"\n\n\"Why? She's helping us out.\"\n\n\"She's Sabrina Douville.\"\n\nClara raised a brow. \"How do you know her last name?\"\n\n\"High school project, to look into some of the history of Dolareido. We had to present stuff, with pictures. I did some stuff about the colonials, nothing specific. But one girl in the class, one of those types that really likes crime dramas, you know? She did her project on Sabrina Douville.\"\n\n\"Why... don't I like where this story is going?\" She looked past him to the tunnel where Sabrina had disappeared, squinting, and scanning. Now she was scared.\n\n\"Sabrina Douville was a serial killer.\"\n\n\"Of course she was, because why wouldn't she be?\" She threw her hands up, voice a whisper despite the anger in it. \"Cause things would be too god damn easy if she was a saint.\"\n\n\"Tell me about it.\" They both chuckled. Dismay chuckles were a classic defense mechanism. \"She killed half a dozen people.\"\n\n\"How?\"\n\n\"Stabbed them to death. No rhyme or reason to the kills. Four men, two women, spread out over a few years.\" Unlike paranormal creatures, humans had to be pretty damn careful about killing. Their trails were too easy to trace back to them. Sabrina had been very careful to kill that many people in only a few years, and not get caught until the end. \"Cops found her.\"\n\n\"Suicide?\"\n\n\"Nope. She tried to stab them. They shot her.\"\n\nClara shivered and rubbed her arms. \"No wonder she's interested in Dolareido. It was her killing ground.\"\n\n\"Will she harm us?\" S\u00e1ndor said. No waver in his voice, that was good.\n\n\"How would I know? I barely know how to deal with my sister.\" And it was very much a problem he was avoiding. Saying goodbye to her had been heart wrenching, and saying goodbye to her a second time was going to be even worse, cause his mom was going to be there to see it, once he figured out how to send her on her way. \"You're better off asking Clara.\"\n\n\"Ha, the fuck do I know about ghosts? Werewolves deal with spirits.\"\n\n\"Ghosts are--\"\n\n\"Not spirits. Made of the same stuff, but very different. If anyone knows how to deal with ghosts, it's hunters.\"\n\nOh, that was not a bad idea actually. He nodded as he put his fingers on his chin, and started pacing again.\n\n\"I'll talk to Harcourt when we get back.\"\n\n\"If he's still got a brain left. Isabella looked like she wanted to do some serious shit to him.\"\n\nHe shook his head. \"She knows that'd be crossing a line. Those three are the Prince's prisoners. They're in a gilded cage, but they are prisoners, and if someone else fucks with them, Antoinette will deal with them.\"\n\nNodding, Clara reached down for S\u00e1ndor, and helped him to his feet again. \"Alright, well, a killer ghost has tricked us into come into her lair. I vote we leave.\"\n\n\"Yeah, agreed. But, I'm not sure she's a threat. She probably is, but she is a ghost now. That's changed her. Not to mention thirty years of hanging around a bunch of ghosts. I mean, she didn't attack you while I was asleep, right?\"\n\nClara looked at him, deadpan. \"Jack, come on. You really think that a serial killer who's become a ghost, will become less dangerous over the years?\"\n\nYeah, no. Sighing, he stopped pacing, got under S\u00e1ndor's arm, and helped Clara walk the man to the edge so they could get down onto the tracks.\n\n\"Whatcha thinking S\u00e1ndor?\" Clara said. \"Try and get back to the tear? Or get you somewhere where you think you can tunnel us out of here?\"\n\nAfter a few seconds of silence, S\u00e1ndor spoke up. \"Let's check the tear first. Those spiders may have sealed it, but maybe not.\"\n\n\"That reminds me,\" Jack said, \"what sort of ways are Begotten able to travel between realms? I hear talk of tunneling and pathways, but then, what Fiona did with a tear we found was very different, I think?\"\n\n\"Begotten can create pathways between any realm and our lair. They overlap at the point of contact.\"\n\n\"Right, I've seen that.\"\n\n\"Begotten can also open any pathway we find created by other... things.\"\n\n\"What the fuck? Something else out there is creating interdimensional pathways?\" Clara asked.\n\nS\u00e1ndor managed a small shrug with his good shoulder. \"There's a lot of things out there. Some of them would terrify you, or make you doubt your religion... or your atheism. Some of these things can create pathways between realms, and many are permanent, and ancient. Begotten can only create temporary pathways to our lairs, or from our lairs.\"\n\nThings to doubt religion, or atheism. Well, that was a weird statement. Then again, cosmic horrors probably had that effect.\n\n\"And,\" he continued, \"if necessary, we can use a human's mind, bestow a nightmare on them, and slip into our lairs.\"\n\n\"How's that work?\" Jack asked.\n\n\"I'd need access to a sleeping human.\"\n\n\"Sleeping human? How does--right, right, dream monster.\" He was so used to dealing with flesh and blood, even when dealing with things very much not made of flesh and blood, that it was easy to forget that Begotten very much weren't. Ghosts and spirits were made of ephemera, and could possess people and shit. Begottens' Horrors were made of dream, or nightmare, or whatever the fuck that was, and they could quite literally go into people's dreams, and do supernatural shit with them. S\u00e1ndor had done that to Eric, before kidnapping him.\n\n\"You fuckers really are like Pennywise, aren't ya?\" Clara said. S\u00e1ndor grunted, not happy with the comparison, but he didn't deny it either. \"Sorry, that was mean.\"\n\nThey fell into silence as they went. Spotting hiding ghosts wouldn't be easy. Apparently they had a habit of glowing green when in the Underworld, but they didn't have to. Sabrina had snuck up on them once already without it, and being that she was a ghost, who the fuck knew what sort of tricks she had besides going invisible. You didn't need much better than going invisible.\n\n\"If the tear is closed, then I will attempt to create a pathway to my lair.\"\n\n\"And how's that work exactly?\" Jack asked. He'd heard some things, but better to be thorough. \"Sorry. Know we're asking a lot of questions, but Azamel hasn't exactly been forthcoming with answers. Athalia and Mark don't answer questions at all, and Fiona's pretty new to her new life.\"\n\nAfter a small stumble, S\u00e1ndor nodded. \"To connect two different points, they must resonate with each other, be similar to each other. I can travel to my castle easily if we're in a dark hallway filled with rooms.\"\n\n\"Right, because of the hallways in the castle.\"\n\n\"The more similar the two places, both in physical but also in atmosphere, the easier they are to connect. If they are not similar, it is... extremely difficult and draining. No Begotten alive could connect the haunted village and forest of my lair, to a sunny daycare center.\"\n\n\"I suppose that's why so many monsters hide in closets and under beds?\" Clara said. \"I mean, assuming they do.\"\n\n\"Yes,\" S\u00e1ndor said, nodding. \"The Eshmaki, like Fiona and Athalia, will always have an easier time moving to their lair from darkness, or into darkness from their lair.\"\n\nJack nodded. So many questions he wanted to ask about the details about how all that worked, but he refrained. It was obvious S\u00e1ndor didn't like talking this much, and was either doing it to keep his mind off the pain, or because he felt he owed Jack and Clara. Jack would ask him some more questions later, but for now, better to stop abusing the man's kindness.\n\nThe tunnels raised into a slope, eventually brought them up onto a surface, and Jack stared at the surrounding insanity.\n\n\"I... I've seen this before,\" he said. In an old video game specifically, but he kept that part to himself. And just like in the video game, it struck a chord with him, one that got under his skin. Metal, wheels, tracks, rust, dead or dying lampposts, falling radio towers, and half destroyed warehouses. Oh fuck.\n\nHe was staring at one very large train graveyard, and given the fog everywhere and endless silence, it could have been a new chamber for a Begotten's lair if it wasn't already in the fucking Underworld. He very much did not want to go through the train graveyard, but Clara and S\u00e1ndor walked toward it, so, they must have come through it with his body when he was sleeping. Safe to sneak through, then? Fuck no.\n\nBut they went anyway. They were going to check out the tear first, and apparently, they had to cut through a scene from his childhood nightmares to do it. And, true to form, there'd probably be ghosts hiding inside the chilling environment that awaited him.\n\n\"You, uh, know the way through here?\" he said.\n\n\"Yea. Why, scared?\" Clara said, grinning at him.\n\nHe nodded. \"Yeap.\"\n\n\"Jack, you're now one of the strongest vampires, probably in the whole damn world. How the fuck can you be scared of some dirty old trains and cargo crates?\"\n\nA quiet, wavering chuckle crept out through the air, and it took Jack a second to realize it was him. Nervous, fearful chuckles.\n\n\"It's, uh, just a thing, I guess. We all have our quirks, right?\"\n\n\"Well, don't worry. I carried both your asses through here, and nothing attacked us.\"\n\nS\u00e1ndor, bless his nightmare soul, said nothing, and gave no expression. With neutral eyes, he looked over the overturned train carts, the dozens of train tracks, many on giant turntables, and many of them with a cart or two. None of the trains had the oldschool steam engine look or anything like that. Instead, each train was obviously meant for a subway, with lots of windows, a back door, a front door for a driver, and colorful paint jobs.\n\nThe paint was timeworn and tattered. The metal rusted, bent, and glass windows shattered or stained near black with soot and dirt. Instead of graffiti, he could see aged splatters of red; given his luck, they were probably old blood splatters. They weren't in a tunnel anymore, and if there was a ceiling to the Underworld cave they were in, he couldn't see it. Old lampposts stood, a few of them flickering with light from old, dying light bulbs. Plenty of power cables connected various tall, wooden posts, some swaying slightly with the gentle, cold breeze. Creeaak. Creeeak.\n\nThey walked forward, and every nerve in Jack's body lit up to eleven as they stepped past various wooden gates, covered with chain-link fence, lined with tattered metal bars, and crowned with barbed wire. Several cargo crates, some of them on their side, sat in their path, and they had to weave around them. All of it was rusted to brown, and the brown was half faded to gray in the relentless fog of the ghost realm. The concrete floor of the tunnel was gone, and now they were walking on dirt and rock.\n\nSubtle flickers of green light moved along one of the windows of a distant cart, before disappearing, and once again the train graveyard drowned in the ugly darkness of the Underworld, with only the weak, flickering lights of the lamp posts to fight against it. The lights were failing, doing very little against the endless dark gray fog. How the fuck were the lamps working at all? Ghost electricity?\n\nHe looked back at the tunnel they'd come from. From this angle, it looked like a descent into a maw of death, a hole in the ground at the bottom of the Earth. It looked inviting, compared going through a big train graveyard, with its sad history, obvious ghost presence, and oh, ten gazillion vantage points.\n\n\"Ok, uh... pretty sure if I wasn't a vampire, I'd be dead from a stopped heart,\" he said, rubbing his arms.\n\nRolling her eyes, Clara gestured ahead with her free arm, the other still holding S\u00e1ndor. \"Seriously, Jack, you have a ghost for a sister, and you're super strong because of the curse. You--\"\n\n\"Fine! Fine.\"\n\n\"Really, a phobia of trains?\"\n\n\"It's not a phobia! And, it's not the trains themselves. Just, a creepy scene from something I once saw, when I was really young, left an impression, you know?\" He gestured around him, sighed, and stepped ahead. \"Fine, just tell me where to go.\"\n\n\"Past that greenish train, take a left.\"\n\nAfter a few more shudders, he followed her directions, and withdrew his silver knife. Clara stopped when she spotted it, and waited for a few seconds before following again, now ten feet behind him. He didn't blame her. If she'd been ahead, waving a torch, he'd have steered clear.\n\nThe train graveyard was deadly quiet, and as the three of them moved, his ears adjusted to the sounds of his companions; he could hear their hearts beat. He snapped his head to the side as another subtle green glow drifted by in a distant window, but sighed shaky relief as it moved on. There was a warehouse, another old school thing, huge, with thin walls of wavy metal. It was all rusted, with some holes torn into the corners of the metal sheets, showing darkness inside.\n\n\"Not that way,\" Clara whispered.\n\n\"Thank god.\" He looked away from the warehouse and continued along the path Clara pointed out.\n\nHe really didn't need to be so afraid. It was just trains. Sure, he was a vampire now, an undead creature. Sure, they were in some sort of underworld, or maybe the Underworld itself, with ghosts and shit, but that was just another realm to check off his bucket list. Sure, he was now imbued with the power of some sort of ancient Strix curse, which amplified his Kindred abilities to ancient elder level. Sure, he'd been through some pretty insane shit the past few years, shit that would give many people PTSD.\n\nBut there was something about a childhood fear coming to life in front of his eyes that managed to bypass all that growth, and remind him there was a very human chunk of him in his guts, young and scared.\n\nHe shook his head, hard, scratched his scalp several dozen times, and looked for the switch in his brain. It was there, buried under the rising tingles of fear, and sparks of panic, he just had to find it. Taking a deep breath was useless, but he did it anyway. Emotions, fear included, were useful tools to inform you about a situation. But the moment they started to control you, they were a liability. Useful in a pinch, when reflexes were needed. Useless when it came to planning, and higher thinking.\n\nHe found the switch, lost in a sea of strange childhood memories, flipped it, and pressed on. Ignore the memories. They were childhood nightmares, exaggerated and meaningless. Focus on what's ahead.\n\nClara chuckled as she watched him, and after a while, spoke up. \"You looked like you were meditating.\"\n\n\"Just calming myself down.\"\n\n\"You do look calmer.\"\n\n\"Thanks.\"\n\n\"Uratha, we never do that,\" she whispered. \"If we're angry, we ride the anger. If we're afraid, we ride it, use it, turn the adrenaline into heightened reflexes, you know?\"\n\nNodding, he peeked around the corner of a cargo crate, found nothing but more dirt, metal, and a path littered by broken metal bars. At Clara's word, he went down it, scanning left and right with each step.\n\n\"Gangrels do that, just, with the Beast instead of adrenaline.\"\n\n\"Ah,\" she said. \"That makes sense. Every Gangrel we've ever dealt with has acted like that, like they had adrenaline pumping through them.\"\n\n\"You two talk too much,\" S\u00e1ndor whispered, then groaned and rubbed his wound with his good hand.\n\nClara chuckled, but she did pipe down. They'd been whispering, but even that wasn't a good idea. None of them were stealth experts, and while Jack didn't think being stealthy would help very much -- any ghost within half a mile probably knew exactly where they were -- it did make sense to minimize their chances of an encounter.\n\nHe looked back at Clara, and mouthed very slowly: how much further?\n\nShe mouthed: five minutes. Ok, five minutes to get out of the train graveyard. No problem. He nodded, and--\n\nAnd threw himself back as the cargo crate they'd passed swung open. In the dead silence, the sound of screeching metal, and then the bang of the metal door colliding with its own body, was deafening, an explosion of sound that had Jack's ears ringing. He turned around to face it, but as he did, a glowing green light flooded the fog now behind him. He turned again, only to hear the grunt of S\u00e1ndor as the man fell. Clara yelled a battle cry, and before Jack could say anything, she began to transform.",
        "But he didn't have time to watch. In front of him was a ghost, and it wasn't Sabrina. A man looking like he walked out of a Great Depression movie came at him, wearing trousers, a tattered and worn shirt underneath with patches on it, and half of his face looked collapsed. Mist poured out from around his knees, but Jack could barely see the bent and dirty work boots. Easy to tell how this guy died: something fell on him and crushed his head. Safety regulations weren't exactly a big deal back then.\n\nThe man had a sledgehammer in his hand. Like the ghost, it was partly see-through, gray, and lit by the green that glowed from within the ghost. That confirmed it then, the ghosts didn't have to glow green if they didn't want to. Must have been a thing they chose to do, because they were underground? Or Underworld, or whatever.\n\nWithout thinking, Jack raised his arm, and infused vitae into it. The sledgehammer hit him, and it actually hit him. No thunk from metal hitting bone, but something closer to a splat or squashing sound. But it still hurt like hell, stronger than any kine could have done, and Jack fell back onto his ass as he glanced to his arm. Still in one piece, but from the sensation, he knew that it would have broken his arm a year ago.\n\nThe ghost, gargling and mumbling, swung at him again, and Jack rolled in, using his small size to get under the swing, and then behind the tall, heavy ghost. He swung his knife as he went past, and smiled as he felt the blade hit something. He smiled more when he heard the ghost roar in fury and pain. Ok, he could fight back!\n\nHe turned around and grinned at the man, but his grin faded quickly. There was a chunk of ghost missing where the blade had hit, but the chunk filled in with an ooze-like fog that rippled as the gap healed.\n\nThat, was not dissimilar to how Black Blood's ooze behaved.\n\nNow that he was standing on the other side of the ghost, he caught a glimpse of Clara. Already transformed, the werewolf threw herself at another ghost, a man similar to the one Jack was dealing with. She wasn't as fast as she'd been before, and he winced as she had a hard time dodging the oncoming hammer. Unlike him, she'd been up for at least twenty-four hours, and unlike him, she needed food and water.\n\nAt least they were ignoring S\u00e1ndor. Probably cause the man held still where he sat against a cargo crate.\n\n\"Back off!\" Jack said. \"We're just passing through.\"\n\nThe ghost grumbled some more, and did exactly that. He backed off, and faded away, becoming the mist and fog, disappearing into it the same way Mary did.\n\nBefore Jack could run to join Clara, the ghost reappeared, underneath his feet. A hand snapped up from the dirt and mist, wrapped his ankle, and Jack fell onto his hands. But, lesson learned from his previous fights, he kept his grip on the knife, and slashed behind him with a half spin. Knife met ghostly flesh on the asshole's shoulder, and again the ghost roared in frustration before he melted away into the mist.\n\nAnother scream of pain. Jack looked behind him in time to see Clara get her claws on her attacker, and split the man in half. Literally, in half. Her claws had a lot more grip on ghostly flesh than his knife did, and he stared in awe at the strange sight. Ghost... goo, went everywhere. It split apart, showed the literal innards of the ghost, the intestines and other organs, before they turned into goop as they splashed around, spreading the mist aside. A moment later, they faded into more of the gray fog that surrounded them.\n\n\"The fuck are they attacking us for?\" he said.\n\nClara shrugged, backed up, and crouched down by S\u00e1ndor, one clawed hand to the floor, one hand ready to slash out at whatever came next. In the fog, it was easy to think she was just a big, walking wolf. Next to S\u00e1ndor though, the proximity made it obvious just how big she was compared to him. It was nothing compared to the size difference of S\u00e1ndor when he was transformed, but still.\n\n\"Sabrina said ghosts angry,\" Clara barked. \"Angry at the living.\" Jack struggled to keep from chuckling at her broken English.\n\n\"They can't make an exception for me? Hello, vampire!\" A smile forced its way onto his lips. The human part of him may have been oddly scared of creepy old train yards, but that part was shut away, mostly. Now, he was running on a combat high, and the Beast was getting to play. These ghosts couldn't do shit to him.\n\n\"That ghost,\" S\u00e1ndor said, gesturing to the place where Clara had ripped one in half. \"Is it destroyed?\"\n\nThe werewolf shrugged. \"Maybe.\"\n\nJack threw up his arms. \"Maybe? Are you shitting me?\"\n\n\"Ghost. Not spirit. Different rules.\"\n\n\"Fuck me, wish I had some holy water, or a fucking cross.\"\n\nClara chuckled, but stopped short as more glowing green lights stepped out from around cargo crates. A lot of them.\n\nAn image of the past formed in Jack's mind. There were nasty injuries on these guys, all men, and all with huge dents in their flesh. Something had happened to these guys, and considering the clothing they were wearing, it happened to them all in the same vocation. Maybe they were miners, or chemical workers for the train company or something, Jack didn't know, but as a seventh, and eighth, and ninth man emerged from the fog, each turning on their green glows as they grew closer, Jack couldn't help but think of how many men died in industrial accidents back then. A hundred years ago, those kinds of accidents were common; so was screwing over the worker so they had to work all day, six days a week, just to put bread on the table.\n\nThose were the kinds of environments and circumstances that led to mass deaths, revolts, violent strikes, and murder. A hundred years ago or more, did Dolareido have a place like that? Well, Dolareido had a lot of tunnels underneath it, most abandoned, and miles and miles of railway. Something happened in the city's past, something that got a bunch of these workers killed, a death that left them royally pissed, so angry that they didn't pass on to the afterlife.\n\nOne of the closer ghosts ran at them, a man without a jaw and a chunk of his shoulder missing, or maybe it was crunched into his chest like a beer can. A stampede followed, and the ghost men roared as they fell upon them.\n\nOr they tried. Maybe they didn't get it. Maybe they didn't care. How often did these ghosts come across anyone alive, to be able to consider that maybe Jack, S\u00e1ndor, and the big wolf walking on two legs, weren't entirely human? Did they even have the mental capacity to understand anything more than three people had trespassed on their train yard? What sick, tragic tail led these men to become the mindless husks of ephemera and anger that they were?\n\n\"And it's go, boys, go,\" he mumbled, \"they'll time your every breath. And every day you're in this place, you're two days nearer death. But you go...\"\n\nSix of the ghosts ran at the werewolf, but instead of sitting around and waiting for them to come to her, Clara pounced at them, catching them off guard. She put a lot of strength into the pounce, and the mist swirled around in her wake as she bowled over the men. Some dropped their hammers, and the heavy things fell with a thud before dispersing. Others recovered quick and ran at her, full body, each intending to swing into her with all their weight and the full length of their hammers.\n\nJack didn't get to see if they were successful. He heard roars, and he heard the strange sound of claws on ghost flesh, but the three other ghosts were on him a second later. As hammers swung for him, he managed a quick glance at S\u00e1ndor. The man was down and out of the way, and the ghosts' attention was firmly on him and Clara. Good, sorta.\n\nJack reached out with his mind as he scanned the ghosts' eyes, but their empty eye sockets gave him nothing, nothing for his Dominate to latch onto. And with no animal of flesh for a hundred miles in any direction, he couldn't use Animalism either. But, Ventrue were resilient, and could summon vitae to protect themselves easily. It took a moment, but when it was done, they were damn well impervious to shit like sledgehammers.\n\nHe stood his ground, knife in hand, and infused the vitae into his limbs. The curse easily turned a moderate amount of vitae into something grand, something powerful and overwhelming, and he shivered as he felt the mythical energy infuse his skin. Some of it, he channeled into speed, and some he channeled into strength, but neither were his natural talent. Resilience, on the other hand, came naturally, and with the curse to increase everything he did to absurd levels, the dark blood coursing through his limbs felt like steel.\n\nHe raised his arm, and blocked the oncoming hammer of the leading ghost. Thunk. The ghost material, manifested so the ghost could get physical, collided and bounced off his arm. The impact forced Jack's arm down, but pain was minimal, and his flesh didn't dent. The other two ghosts came up around the leader, and each took a swing at him, horizontal and aimed for his chest. They cracked against his ribs, and he slammed back against the cargo crate behind him. No more pain than a mild slap, and no damage, no wounds, nothing. Bit disorienting getting tossed like that, though.\n\n\"Well, a process man am I, and I'm telling you no lie.\" Quiet words slipped out of his mouth without him telling them to, all a whisper. \"I work and breathe among the fumes that trail across the sky.\" He liked the song, the covers of the song, and had memorized the lyrics long ago. And as a vampire, he didn't need to breathe. He could sing all he fucking wanted. He kept it quiet, mumbles and nothing more, but, sing he did. \"There's thunder all around me\"--he swung his knife for the man on his right, and got him in the throat--\"and there's poison in the air.\" As he stepped forward, he drew his pistol, and shot the ghost on the left in the forehead. They went down, heavy and limp, but from the reaction, he could tell they weren't hurt bad. \"There's a lousy smell that smacks of hell, and dust all in me hair.\" Before the leader could react, clearly confused by Jack surviving three direct blows from big sledgehammers, Jack pointed his pistol at him, shot him twice in the gut, and stabbed the ghost in the head when he leaned forward.\n\nThe three ghosts melted away, groaning in pain, when two of them should have died nearly instantly. Ok, ghosts didn't die normally. If anything, they weren't dying at all. Much as he could see them spilling their guts and blood, it was all the same gray that surrounded them already, and it reformed on their wounds like ooze. It was good money that the ghosts could heal damage, probably completely disconnected from where the wound actually was. Head shot? Same as a foot shot, if they were all made of ephemera or whatnot.\n\nAnd, he could see it on the ghosts when he shot them and stabbed them, that his weapons weren't hitting as hard as they should have been. Knife to the head, or even the foot, should have got a bigger reaction, but the ghost just hollered in half pain, half anger, and melted away. And--\n\nAnd came back. Hands reached up from the mist, three pairs, and they clutched at his ankles, and holy fuck, that was solid grip.\n\n\"White-livered wrinkler.\"\n\n\"Greedy guts.\"\n\n\"Scamp!\"\n\n\"Yellow belly bastard!\"\n\nJack stared down at the rising faces, and froze. They weren't strong enough to hurt him, not with the curse imbuing him with absurd resilience, but that didn't mean the sight of their agonized faces, seeping up from the dirt and rock around his feet, wasn't terrifying; the switch he'd flipped flipped back with a vengeance. Tears of black lined their faces. Their voices were raspy, dry, cracking like snapping wood, and all he could hear as he listened, was Mary.\n\nRattling drew his eyes, and he ducked as an enormous piece of sheet metal soared past. More rattling, violent shaking from some metal beams, and he leaned to the side as it flew it at him. It crashed into the cargo crate behind him, fell back down onto him, and knocked him to one knee.\n\nAs he got up, a fourth set of hands reached out from the cargo crate through its wall, grabbed Jack around his head, and yanked it against the crate. It was the ghost Jack had beat earlier, and in the last seconds before some fingers covered his eyes, Jack saw the man's knife wound had healed completely, before he disappeared behind the crate with only his hands and wrists sticking through the metal. And then the four men tightened their grip on him, pulling at him, their hands solid but the rest of them incorporeal, so their bodies were hidden inside the ground and crate.\n\nYeap, this was a problem. The ghosts were manifesting themselves, otherwise he doubted they'd be able to interact with him physically. It allowed them to hit him, and for him to hit them, but they weren't able to do much damage to him, or vice versa. Clara though, maybe she could do something, if she fought spirits on a regular basis.\n\nHe managed a peek between some of the ghostly fingers trying -- and failing -- to crush his skull into the metal. One of them almost got his eye, and he yelled in frustration as he twisted his head to keep it from getting finger stabbed. Clara was fighting off ghosts, but there were more than six now, and while she was easily destroying one, several more were on her. Three of them had ghostly knives, and they jammed them down against her hide, sinking through the thick fur and skin, and earning blood and roars from the beast.\n\n\"Clara!\" Again, Jack twisted as much as he could. More, he needed more vitae, more strength, pump it through his undead veins until he was a juggernaut. But before he could do anything, S\u00e1ndor got up, clutching his shoulder, and started to walk toward the werewolf. \"S\u00e1ndor, don't fuck--\" The ghost behind Jack got some of his fingers around his mouth, and Jack did the only reasonable thing he could do: opened his mouth, and bit down. Ghost flesh tore apart, and the disgusting ooze flooded Jack's mouth, unnaturally cold. For a second, he was terrified digesting it might do something to him, but the strange stuff faded into mist inside him. It was enough to get him a few more seconds of vocal freedom. \"S\u00e1ndor, sit the fuck down, and stay out of the way!\"\n\nS\u00e1ndor continued to walk toward Clara, ignored by the ghosts. A glance back from the man to Jack showed a look of pain in his eyes Jack didn't understand. Hunched forward, swaying with exhaustion, clearly still fucked up, the man was going to get himself killed.\n\nThe ghost behind Jack, the one hidden inside the cargo crate, and pinning his head to it with his arms reaching through the metal, screamed. Not the weak groans of pain Jack managed to stir in the ghosts with his earlier attacks. The sound of someone dying, really dying, a painful and horrible death, erupted from the cargo crate, and filled the whole train yard. The sound had power, a horrific sound that everyone knew instinctively, and it was enough to bring the battle to a halt.\n\n\"W-What the...\"\n\nThe ghosts holding down Jack's feet and legs flew up and away from him, their bodies becoming more translucent as they did. Once they had twenty feet between them and him, they turned, each glaring down at him with their empty eye sockets, fear and rage on their faces.\n\nJack managed half a step forward, and then froze. Slowly, a knife came out through the cargo metal behind him and into view on his right. So damn slow, it didn't trigger a defensive reflex, but he did turn to look at it. No, not a knife, a letter opener. A sharpened letter opener.\n\nHe froze over again as ice filled his guts, like when that ghost's fingers had fallen apart in his mouth, except a million times worse. His eyes went wide, and he struggled to turn his neck enough to look ahead again to Clara and S\u00e1ndor. Both of them stared at him, and at the ghost coming through the cargo crate behind him. The serial killer flowed forward, through him, and as her mouth passed through his head, he heard her chuckle, literally chuckle inside his skull, before it erupted into an outrageous laugh when her lips passed his face.\n\n\"Hahaha! Old geezers, you just refuse to move on. Either disperse or go deeper, but there's nothing left for fossils like you.\" Sabrina licked her letter opener, and slowly hovered toward the fleeing ghosts that'd been holding Jack down. But, once she had a few feet on her, her laughter redoubled, and she launched herself up, then arced down toward Clara.\n\nShe was fast. The mist swirled, and S\u00e1ndor only barely managed to duck as Sabrina divebombed past his head, and into Clara. Into, and through her. But as she passed through the werewolf, earning a howling yelp of surprise from the giant beast, she held out her ghostly knife, and got to cutting. One of the men screamed, and the horrific sound of agony and death gushed out over the train yard until it deafened Jack.\n\nThe ghost died. It wasn't like when Jack had shot and stabbed the other ghosts. And it wasn't even like when Clara had torn ghosts apart, using her weird magic claws to do serious damage. Whatever it was Sabrina was doing, was a thousand times worse than Jack or Clara could do to these ghosts, and all she had was a letter opener. A sharp, ghostly letter opener.\n\nOne of the men on Clara's back stopped stabbing, and threw himself at Sabrina, but she swam forward and got him in the guts, shoulder against his chest, both hands around her weapon so the blade went directly into the man's stomach. Collision between the ghosts was far meatier than it had been with Jack. Whatever it was that made the ghosts fluctuate between corporeal and incorporeal, it didn't mean shit to other ghosts.\n\nThe one stabbed in the gut fell, clutched at their stomach, and writhed, screaming and shrieking like someone had poured molten lead into their belly. After a few seconds, their screams died away, and they melted, collapsing into goo, and dispersing into the mist. And it didn't fade. It didn't take a ghost expert to tell what Jack and Clara had been doing was only hurting the ghosts. What Sabrina was doing was killing them.\n\nThe mist was made up of dead ghosts.\n\nSeeing another of their buddies die was apparently enough to break the resolve of the ghosts. They turned, and fled. Some of them disappeared into the ground, and some others darted away, hovering into some of the train carts. One flew up and into the warehouse, and another disappeared into a crate, slamming the heavy metal doors behind him without so much as glancing back. The metal ringed with impact, but as the sound faded, it left only silence.\n\nChuckling, Sabrina lifted the knife to her mouth, and licked the blade again. \"You should have stayed where I put you! It was safe there.\"\n\nJack gulped down on his dry throat as he watched the crazy woman hover there. She made no attempt to attack them, and if anything, she looked like she was ready to dance to some rave music; no feet to do that, but still. Her green glow, hidden before when she'd sneak attacked, was in full bloom again, and she chuckled a few times as she tossed the letter opener up and down in her hand. It half rotated with each flip.\n\n\"S-Sorry,\" Jack said. \"We couldn't wait. We need to leave before my friends start to suffer.\"\n\n\"Suffer?\"\n\n\"Food, water, that sorta stuff.\" He gestured to Clara, who stepped back and stood beside him, still in her werewolf form. She didn't trust Sabrina. Blood oozed from the wounds in her back, and Jack glanced back at them, sighing. They were closing, but he'd seen werewolves take harsher punishment and heal faster. He doubted a wound inflicted by a ghost was as easy to heal from as a normal blade. Plus, she was getting weak, and transforming all the time was probably doing a number on her stamina.\n\n\"But vampires don't need to eat,\" Sabrina said, nodding. \"So you're fine, until your vitae runs out, right?\"",
        "\"Right, my...\" He blinked at the ghost, glanced between the werewolf on his left, and the hunched man on his right. They hadn't noticed it, but, they were both standing and ready to fight, sort of. Now was as good a time as any to risk a confrontation.\n\n\"What?\" the ghost asked, confused.\n\n\"Sabrina... I never said anything about vitae. Never even said the word.\"\n\nClara stood up straighter, and let out a low rumble, deep in her chest, before lowering herself into a semi crouch, ready to pounce. S\u00e1ndor took a step back, almost falling as he did, but he caught his balance, and took a couple more, away from Sabrina.\n\n\"Oh, damn. I screwed up.\" Sabrina shrugged, and hovered around in a small circle. \"I was a pretty good actor though, right? You didn't know I knew, right?\"\n\n\"You're right. We didn't.\" He eyed her, blade still in hand. He'd dropped his pistol when the ghosts had caught him, but still, holding onto one weapon during a scuffle was a personal best. \"Who are you?\" He felt around in the mist behind him with his foot until it found metal, and he slid the pistol over to him, without ever taking his eyes off the woman.\n\n\"I was hoping for some more details about Dolareido! But, you dodged any questions I had about vampires. Crafty boy.\" Shrugging, she hovered closer to them, and as she did, she waved her right hand at her side, like tossing away a ball. Her weapon disappeared into a puff of mist that got sucked into her gray skin and clothes. It was never really a weapon, but an extension of her, same as those sledgehammers had been for those men.\n\n\"I uh, guess I am pretty crafty.\" He kept his eyes on the ghost, but doing so kept the memory of her passing through his body, cold and so very not alive, fresh in his mind. It'd felt like being buried alive. \"Wanna tell me who you are?\" Sabrina, Mrs. Serial Killer, but he didn't say it. Better to let her say it, and be happier for the reveal.\n\n\"Sabrina, like I said. But I suppose if the cat's out of the bag, I can say more.\" She hovered over head, and circled around, looking left and right. \"Quid pro quo?\"\n\nHe couldn't help but smile. She was smarter than he'd originally thought.\n\n\"Alright. You ask first.\"\n\n\"How is Antoinette? Still the Prince?\"\n\nJack rubbed his buzzed head. \"Yes, alive and well.\"\n\nShe frowned at that. \"Your turn.\"\n\n\"Were you a vampire?\"\n\n\"No.\" Well, strike on that connection. \"How do you know the Prince?\"\n\n\"I was Julias's childe, and--\"\n\n\"Julias's childe?\" She tilted her head, and swam toward him, eyes wide. If she'd had a brain in there, he'd have been able to see it.\n\nHe took a step back, surprised, but she didn't tackle him or anything. He grinned subtly once he calmed down. That'd been a hint. \"How do you know Julias?\"\n\nShe frowned more, realizing he copied her question. \"I met him at one of the Invictus balls.\" Getting somewhere. \"If you're Julias's childe, then, how is Viktor?\"\n\nHe winced as he looked down. The picture was becoming more and more clear as they spoke. A woman this ruthless and crazy, both in life and death, have been to an Invictus ball, not be a vampire, and be concerned with Viktor? Only one possibility.\n\n\"Viktor's dead. I... I'm sorry.\"\n\nThe sad, ruined expression on her face said it all. She'd been one of his ghouls, someone bound by the Vinculum, and also infused with their master's vitae.\n\n\"He's... dead?\" She grabbed her head and looked down, spinning in place. \"Master's dead?\"\n\nHe winced again. \"Yes. You were his ghoul?\"\n\n\"Yes!\" She threw her hands at him, and he stepped back, half expecting them to either detach from her body and come at him, or for her to pounce him and start shredding. They didn't, and she didn't. \"Died in a stupid turf war with the Carthians.\"\n\n\"The news said you died when some cops shot you.\"\n\nShe slowly let go of her head, and stared at him, eyes wide, empty sockets cutting straight through his soul. \"So you knew about that?\"\n\nHe forced himself to keep eye contact, and nodded. \"Yes... Sabrina Douville.\"\n\nSaying her full name managed to make her smile, but it vanished quick in her despair.\n\n\"Viktor set it up so I could fake my death. It'd take more than a few gunshots to the guts to kill a ghoul. I survived, and worked with my master for five glorious years.\" She sobbed, a raspy, ghostly sound that almost chilled his insides as much as touching her did. \"Who killed the master?\"\n\nThe quid quo pro game had fallen apart, but he didn't mind.\n\n\"Tony did,\" he said. She hissed, and Jack put up his hands. \"He died killing Viktor, him and Rebecca. He got them.\"\n\nAfter a heavy, long sigh, she nodded, and hovered a little closer. \"So, you're the master's grandchilde?\"\n\n\"Yes, I am.\"\n\n\"And Julias?\"\n\n\"Dead, hunters. Now they're dead, too.\"\n\nThe ghost nodded, satisfied, but the expression on her face kept changing rapidly, as did the noises she made. One moment she smiled, happy with his words, the next she wailed, and the whole Underworld echoed with the shrieking sound.\n\n\"Sabrina,\" he said. \"I don't know if you were waiting for Viktor, but he died well over two years ago. If he's not here, then he didn't do the ghost thing.\"\n\nShe sniffled, twitched her head around several times, before settling and looking at the ground, defeated. \"You're right.\"\n\n\"I don't suppose you could help us get back to the tear we came through in?\"\n\nAfter a few seconds of quiet whines and whimpers, she raised her head, and her gaze softened. Still fucking gross as all hell, a couple of empty eye sockets looking at him, but the expression did a lot to ease his worries.\n\n\"I... I was going to keep you around, for a little while. I wanted to learn more about Dolareido, and about my master. But, I forgot about the... the need for people to eat.\" Laughing, a little maniacally and randomly, she shrugged. \"And, if you're Viktor's grandchilde, then I should... I should help you.\" And back to morose and mourning, wails included.\n\n\"Ok, uh... thank you, Sabrina. Did you want anything in return?\"\n\nHer eyes opened like a kid on Christmas. \"Maybe if someone could visit, once in a while? It gets lonely down here, and getting back to the surface is hard.\"\n\nHe almost asked why she couldn't just come with them. Stupid reflex he hadn't quite suppressed yet, the desire to ask questions honestly. If the serial killer ghost was trapped in the Great Below, or under the impression that she was, all the better. If ghosts needed something, like time or energy or emotions, to punch through to the surface, he was damn happy that he couldn't manually escort her out of the Underworld.\n\n\"I'll see what I can do.\"\n\n\"Yay!\" Back to happy in an instant, she hovered past him and started down a path.\n\nAfter a low growl, Clara returned to her human form. Jack watched her, and despite her attempts to hide it, he noticed her stagger and sway. She was exhausted, but still, she grabbed S\u00e1ndor's good arm, hooked it over her shoulder, and started walking.\n\nRolling his eyes, he came over to them, pushed Clara out from under S\u00e1ndor's arm, and got under it instead. He was shorter than either of them, but still tall enough to at least give the man support.\n\nClara grunted, but gave in when she almost fell over. \"Alright, fine.\" Jack smirked at her, and the three of them started walking. \"Jack, were you... singing?\"\n\n\"Ah, shit, yeah. Seeing those worker dudes really got me remembering a song I've always liked.\"\n\nS\u00e1ndor coughed, shaking his head. \"An old song.\"\n\n\"Yeah. And, uh, singing can help me stay calm.\"\n\n\"Still scared of trains?\" Clara said, laughing quietly, smiling.\n\n\"Not scared of trains! Scared of train graveyards, ok? Huge difference. Like, I'm sure there are plenty of adults nowadays, that would shit their pants if they were suddenly in an elephant graveyard, and you can thank Disney for that.\"\n\nS\u00e1ndor laughed, a sound Jack bet the man rarely made, but he regretted it a second later, wincing and groaning in pain. \"Keep an eye open for anything that would look similar to my castle, the haunted village, or the haunted hospital. The more similar they are, the easier it will be for me to create a pathway home.\"\n\n\"Don't suppose you can cut across the Gauntlet from here and just walk us out of here, Clara?\"\n\nShe shook her head. \"I thought about that, but I don't have a loci. So unless we find an item of spiritual power, I can't Reach across the Gauntlet. An Irakka could go, but--\"\n\nThe three of them froze as the sound of metal bashing against metal resonated. Sabrina rejoined them quickly, ghost knife in her hand in an instant, and they all looked up as one of the cargo crates went sailing overhead, and then another. When they landed, the sound shook the whole fucking Underworld. A moment later, one of the train carts, many tons of metal, went sliding on its side past them, sparks showering the area. It crashed into another, derailing it, and the sheer mass caused the first one to continue sliding, the friction of metal and ground not enough to bring it to a stop yet.\n\nWeird click and rasp sounds announced who it was. It was the fucking azlu monster, the Host.\n\n\"Run, run! I can't fight that,\" Sabrina said. As she did, the green glow of her body vanished, and she lowered herself closer to the ground. \"It's weird, and it hurts.\"\n\nWeird, and hurts. Yeah, not horrific and gigantic and insanely strong and capable of flipping cars and shoving train carriages or anything. Nope, just weird, and hurts.\n\nClara took a step toward the noise, but Jack reached out, grabbed her shirt with his free hand, and pulled her back. Literally. Her weight collapsed, ass hit the ground, and he dragged her away from the sound.\n\n\"It's going to find us,\" Clara said, groaning, and glaring up at him over her shoulder. \"We have to go on the offensive. We--\"\n\nJack yanked up on her shirt hard enough to get her up on her feet, nudged himself under her closer arm, and started running. Sure, he was a short guy, and had a small frame. In a biological sense, even the great shape he'd gotten himself into wouldn't have been enough to carry two people. But a young vampire, even a Ventrue, could carry a person without trouble. And for him, after a moment to pump vitae through his system, carrying the two of them was easy.\n\nExcept, two problems. The more he fought and did things, the more he drained his vitae, and the hungrier he got. And, running with two people, two taller people, draped over his shoulders, just wasn't working. Legs, arms, it all got in the way, and the best he could manage was jogging leaps.\n\nSabrina stayed beside him, hovering, and when he weaved around some metal fences and a couple train carts, she didn't dodge around them, she went through them. The only reason she stayed with him was because she felt like she had to help him, since he was her master's grandchilde, and he wasn't about to do anything to throw that help away. Maybe she could serve as a distraction?\n\n\"Sabrina, slow it down! Don't get hurt, but distract it for a second while we try and hide.\"\n\nThe ghost woman nodded, and faded through layers of metal as she darted off in the direction of the sound. Might as well have been a dinosaur rampaging through a theme park with its power down.\n\n\"Jack, just--\"\n\n\"Shut up.\" After everything that happened last month, he was not going to put up with some stupid self-sacrificing shit now.\n\nHe weaved through the dense maze of metal, until he found a train cart. Surrounded on all sides by cargo crates, some apparently full of bricks, and with some huge train carts sitting on their sides around it, it wouldn't be easy for anyone bigger than a person to get to it. It wouldn't stop a giant spider monster, but it would slow it down.\n\nHe dragged his companions through the narrow pathways, forced open the door of the train, and pushed S\u00e1ndor in, and then Clara. They got the hint quick, and both started to crawl. Without electricity, its insides were dark as fuck, and train carriages weren't small, even if the azlu was strong enough to push them. They were massive, meant to hold fuckloads of cargo, or in this case, people. Rows and rows of chairs meant the two of them had plenty of places to hide, and despite how massive the spider monster was, it wouldn't have an easy time getting at anyone hiding inside.\n\n\"Stay here,\" he said.\n\n\"Jack, you can't--\"\n\n\"Clara, seriously, now's not the time, ok? Just shut up, hide, and take the opportunity to get out of here when you can.\"\n\n\"Sacrificing yourself?\"\n\n\"What? Fuck no. I'm no werewolf, I'm a fucking vampire. I want you and S\u00e1ndor to find help, then come rescue my ass.\"\n\nShe fought off a smile until she managed to force a frown at him over her shoulder. \"Assuming you're still alive.\"\n\n\"I won't let it kill me. The curse won't let it kill me. But I might end up stuck here, and that'll kill you and S\u00e1ndor. Worst that happens to me, I find a hole in the ground, and go into a deep torpor. Ok? See, no self-destructive reflex here, just a smart plan.\" He nodded, and before she could protest, he forced the folding door closed.\n\nAnd he ran. A shriek from Sabrina, and an alien, beastly shriek from the spider, both came from the direction they'd come from. His plan was to pull the spider away from Clara and S\u00e1ndor by running perpendicular to its path to them, get its attention, and then somehow lose the spider using his small size.\n\nOr let me out to play. I could take it in a fight.\n\nCan you? This thing is as big as S\u00e1ndor's Horror, is just as strong, and unlike the gargoyle, it has scythes for arms and eight very long, sharp legs.\n\nWe spoke with it. It's afraid of us.\n\nExcept we can't mind meld with it. So you're stuck using this body, and--\n\nStop thinking in terms of terms of flesh, Jack. You think of vitae like it's energy, like gasoline or electricity, running through an undead body of bone and sinew. Vitae is the essence of life, you stupid asswipe. And our body is just a conduit for it. The stronger your Beast grows, the less vitae it needs to unleash its true abilities of blood and soul. It--\n\nI get it, I get it, jackass. And you think you can handle this thing in a fight?\n\nYeap. You could too, if you could handle yourself better. But me? Easily.\n\nThis thing fought off half a pack of werewolves on its own.\n\nPussies.\n\nJack rolled his eyes as he ran through the train yard. Ugh, fucking train yards, dead train yards, with rust and empty carriages and steel beams and cargo crate doors half open and knocked over fences and even the god damn warehouse. At least the curse didn't care to ask about the strange childhood fear.\n\nWe're not on a kill mission, curse. We just need to scare this thing off, and then we get Sabrina to take us in the direction of the tear.\n\nFine.\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nHe smiled, looked down at his hands, and smiled some more. It felt good to be in control. It felt really good.\n\nStop wasting time. Summon your power, and scare the creature off.\n\nYeah, sure. And after that, we get back to Dolareido, and what, Elaine kills me?\n\nWhat?\n\nYou heard me. I'm always listening, you know that. You think I'm just going to let you kill me?\n\nYou're not even alive. The fuck do you care if I remove you.\n\nI care. I damn well fucking care. I'm a part of this vessel, and I refuse to removed like a cancerous limb.\n\nYou can't seriously expect me to feel sorry for you, or hell, even believe you.\n\nFuck you. You'd be dead without me. You're weak. I'm not.\n\nAnd then he stopped listening. The old Jack didn't know control his mind and focus his thoughts. New Jack did. New Jack had the focus of a predator. New Jack was so much better than Old Jack.\n\nBut Old Jack was still pretty damn smart. Even with the curse, Jack was still a Ventrue, without the insane strength of the Daeva and Nosferatu, without the stealth of the Mekhet and Nosferatu, and without the speed of Daeva or Mekhet. But Ventrue, and those stupid Gangrels, could become fucking invincible, and still have enough strength and speed to get the job done. And he could do more; it's how he kicked S\u00e1ndor's Horror's ass, after all. Old Jack didn't know how to juggle his abilities, to stack and manage his Disciplines, to invoke the powers of the ancient blood with but a drop of essence. New Jack did.\n\nA cargo crate went flying overhead, and another train cart slammed into a metal fence. It was chaos, sparks and loud booms and absurd levels of destruction. It was the sort of scene that made Jack wish he was a Gangrel sometimes, so he could transform his shell and unleash destruction with a form as crazy as the azlu spider monster had. A monster-on-monster fight would be wicked fun. Ah well, he could get things done with his fists and feet just fine; blade too, if it came to that.\n\nHe jumped up onto a train carriage, easily a twelve-foot jump he managed without issue, and he landed with a grin on his face as he spotted the spider monster in the distance. Sabrina hovered overhead, circling, knife in hand and an angry expression on her face. Whatever the spider had done to her had hurt, because the right side of her body was torn up and oozing. The azlu wasn't a biological entity, not completely, and its claws probably hurt things of ephemera just like Clara's did. And if those scythe arms nailed him, well, Old Jack would have been split in half like a bitch.\n\nNew Jack would laugh, and walk it off."
    ],
    "authorname": "NovusAnimus",
    "tags": [
        "slow",
        "violent",
        "suspense",
        "monsters",
        "vampires",
        "werewolves",
        "paranormal romance",
        "romantic"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/my-little-ventrue-pt-08-ch-05"
}
{
    "title": "Hypnosissy 01: Becoming a Cocksucker",
    "pages": [
        "Summary: Straight guy watches porn tapes that are not what they seem. \n\nNote 1: Thanks to hfernandez1983 for the story idea and the intriguing revelation that hypno sissy videos exist in the first place. \n\nNote 2: Of course, all participants are at least 18-years-old. \n\nNote 3: Thanks to goamz86, Robert, DomMasterJim and Wayne for editing. \n\nCategory: \n\nThis was tough to choose. It has gay male (a guy sucks a cock), interracial (a guy sucks a black cock), and it has mind control (with the hypnosis pieces throughout the story). Yet, in the end it is a quirky, unique, fetish story and thus I put it in the fetish category. \n\nWARNING PLEASE READ: \n\n-This is a hypnosis story with potential influential subliminal messages within it. \n\n-The story has over a dozen hypnosis video scenes within it. \n\n-Also, the story is about a high school senior's unknowing journey into being hypnotized and turned into a willing cocksucker. It is long on plot, video training and descriptive video scenes and is over 20,000 words long. \n\nThat said, hopefully the payoff is worth it. \n\nI hope you enjoy something relatively new from me. \n\n... \n\n... \n\n... \n\n \n\nHypno Sissy: Becoming a Cocksucker \n\nAs I took the sixth load down my throat, four more already deposited in my ass and I still had a line of at least six waiting their turn to deposit their load inside one of my two cum deposits, I couldn't help but recall when I was a man and not a sissy bitch whose only purpose was to be a cum bucket for big dicked men. \n\nThree months earlier... \n\n... \n\n... \n\n... \n\nI had it all. \n\nGirls lining up to get fucked by me. \n\nIn the High School movies it's always the quarterback who is the star of the school, dating the stereotypical blonde haired, blue eyed captain of the cheerleaders. \n\nWell, in my school, I'd already fucked the captain of the cheerleaders, actually I'd fucked all but two of the cheerleaders, and I assume I would have bagged them too if they were not dykes. \n\nEvery party I attended, I hooked up with a new slut eager to become popular. They all seemed to want to have one night of big Brian. \n\nI'd fucked, besides almost the entire cheerleading team, the school vice-president, the leader of Glee club, all three nerds in debate club (all during the same evening... but that is a story for another time), another couple dozen girls from almost every clique in the school, three bitches from our rival school (including their head cheerleader), one of my friend's moms, a few other MILF's (including one of my ex-girlfriend's mothers) and even a teacher. \n\nLike, I said, I had it all... on top of that I also had dozens of scholarships from colleges all over the country. \n\nI wasn't the quarterback, or wide receiver or running back who usually got all the media attention and glory when we won... no, I was a linebacker... which meant I was the one who hammered the quarterback for a sack, clobbered a wide receiver as he went to make a catch or drilled the running back as he tried to find an open hole to run through. \n\nI can't explain it, but when it came to football I could almost always read the play the opponent was going to run. \n\nThus, like I said, SEC schools were offering me ridiculous scholarships, including some perks that were not in writing. \n\nLike I said, I had it all. \n\nI was the man. \n\nAnd I fucking loved it. \n\nIt was at a Friday night party in January that things got even more interesting. \n\nI was invited to a party at the college in my town, which was desperate to have me in the fall, although I had no interest in going there... I was going to go to one of the Big Ten, one that would pave my way to the NFL and the big fucking money. \n\nAnd although I was a High School senior, I looked a lot older. \n\nAlso, not trying to be pretentious but I'm very good looking and have an impressive seven plus inch dick. \n\nThus, women seemed to come onto me. \n\nTonight was no different. \n\nA half dozen college beauties were all over me... yet it was a hot redhead that seemed to be ignoring me that drew my interest. \n\nI loved redheads. \n\nThey were always wild in bed. \n\nAfter a few drinks, I sauntered over to her and introduced myself. \n\nShe shocked me when she said, \"I don't fuck High School boys.\" \n\nI laughed, \"Trust me, one time with me and you would.\" \n\nShe laughed, moving her hand to my crotch, \"Because of this?\" \n\n\"Of course,\" I nodded, women usually being very impressed with my package. \n\n\"I've had bigger, much bigger,\" she said, rubbing my cock through my jeans even as her friends watched amused. \n\n\"Well, they say it isn't the size, it's how you use it,\" I countered, not one to back down from a challenge. \n\n\"Only small dicked boys say size doesn't matter,\" she countered. \"Does size matter ladies?\" \n\n\"Fuck yes,\" one said. \n\n\"And girth,\" another said. \n\n\"Bigger the better,\" the last one chipped in. \n\n\"Well, I've never had any complains before,\" I said, still trying to remain confident even though I was slightly rattled by this redheaded Goddess. Usually, girls just swooned when I walked into the room... I seldom had to work hard for pussy. \n\n\"What? From High School girls?\" she scoffed. \"That is the minor leagues. This,\" she paused, as she looked around the party, \"is the big leagues.\" \n\n\"And I want a starting position,\" I smoothly said. \n\n\"You are determined,\" she smiled, for the first time. \n\n\"It's one of my endearing traits,\" I said suavely. \n\n\"Do you have more than one?\" she asked, quite the ball buster... her hand still on my dick. \n\n\"I have a couple more,\" I smiled. \n\n\"Ladies, do you think Professor Walker would consider this the charity work she was talking about the other day?\" she asked, a wicked smile now on her face. \n\nI was going to fuck the hell out of her. \n\n\"You may get bonus credit,\" one girl joked. \n\n\"Come with me,\" the redhead said, grabbing my hand and leading me out of the party. \n\nI smiled to myself... excited I had won again. \n\nTen minutes later we were in her dorm room and she ordered, as she dropped to her bed and hiked up her skirt, \"Let's see if one of your endearing traits is licking pussy.\" \n\nOddly, I had only licked pussy twice. Both times it didn't appeal to me, the scent pungent and the taste fishy... and I hated fish. \n\nI said, \"I'm more a get right to the fucking type of guy.\" \n\n\"Then bye,\" she sighed, pulling her skirt back down. \n\n\"Wait, not so fast,\" I quickly said, not willing to lose out because of a technicality. \n\n\"Either get on your fucking knees and bury that pretty face in my box or get out,\" she said, not seeming to care which choice I made. \n\nI didn't hesitate, really turned on by this strong-willed woman. Usually, the girls I fucked were eager, submissive and willing to do almost anything I asked. I'd shot my load on dozens of faces, had girls eat each other out for me, and had, I think, eighteen girls give up their ass for me. \n\nNever, had I met a girl who was this demanding. \n\nOddly, it turned me on. \n\nShe lifted up her ass and I pulled her panties down for her. \n\nShe then spread her legs, revealing a completely shaved pussy, something I had only seen a couple of times with all the cunt I'd fucked. She ordered, \"Get licking, High School boy.\" \n\nAnd I did. \n\nHer taste wasn't any better than the other two I tasted, although there was almost no scent. \n\nI licked and licked and she moaned and talked dirty to me. \"That's it, my little High School pussy pleaser, lick my cunt.\" \n\nHearing a girl call her pussy a 'cunt' was also surprising as almost all girls, even some of the nastiest sluts I had banged, resented the 'c' word... it was almost as bad as the 'n' word for blacks. \n\n\"I think we finally found a place where you belong, on your knees,\" she continued. And \"This is how a man really pleases a woman,\" and \"You obviously need more practice if you are ever going to make a girl really come.\" \n\n'I have made tons of girls come,' I thought to myself, even as my cock was hard and begging for release from this strange, unorthodox treatment. \n\n\"My clit, suck on my fucking clit,\" she demanded, which only turned me on more. I found nothing hotter than a girl with a nasty tongue. \n\nThe hottest ever was the mom of an ex of mine who would only let me fuck her in the ass, because, in her own words, anal sex wasn't cheating. She was from England and she had the nastiest foul mouth I'd ever heard. As I fucked her ass, she talked so nasty, \"That's it, pound my shit hole,\" and \"Ream my arse with that big fucking dick,\" and \"Fuck my tight arse hole,\" and finally \"Fill my fucking arse deposit with your hot cum.\" \n\nSuddenly, the redhead, whose name I realized I still didn't know, grabbed the back of my head and began grinding her pussy up and down my face. \n\nI couldn't believe it. Sure, I had face-fucked quite a few girls and really fucked the shit out of some... literally... but being on the receiving end of such aggressiveness had me confused. \n\nI just extended my tongue and allowed my face to be used for another's pleasure... after a couple minutes of rough grinding on my face... she came. \n\nAnd holy crap... she was a squirter, as my entire face was drenched with wetness. I tried licking as she came, her cum actually tasting sweet. \n\nA moment later, she pushed me away and I stood up and began to unbuckle my belt. \n\nShe asked, \"What are you doing?\" \n\n\"Letting you return the favour,\" I said, surprised by her question. \n\n\"Um, that isn't going to happen,\" she said, as she stood up and allowed her skirt to fall back down. \n\n\"You're serious?\" I asked, not used to rejection. \n\n\"I don't suck or fuck on the first date,\" she smiled, leaning in and kissing me... her hand going to my pulsing cock. \n\nAs she kissed me, she frantically rubbed my cock through my jeans and in less than thirty seconds I creamed my jeans... moaning into her mouth. \n\nBreaking the kiss, she pulled out her phone from her purse, typed briefly and said, \"Enter your number.\" \n\nI took her phone, flattered she wanted it and confused by this whole strange sexual encounter. As I did I saw my name was 'High School cunt muncher'. I entered my number as I said, \"By the way, my name is Brian.\" \n\n\"I like 'High School cunt muncher' better,\" she smiled. \n\n\"Do you have a name?\" I asked, giving back her phone. \n\n\"Yes,\" she nodded, as she kissed me again and said, \"I'll be in touch when I want my cunt munched.\" \n\n\"Um, okay,\" I said, watching as she walked out of her own dorm room, leaving me alone in it. \n\nBewildered, I walked out and she was nowhere to be found. \n\nI sighed and headed home, feeling gross with cum dripping all over my underwear. \n\nFor the next two weeks, I waited for her to call. \n\nFor two weeks, I couldn't really get excited by other girls. Sure I fucked a few, including the new exchange student from Sweden, but all the time I was thinking about the unnamed redhead. \n\nThen I got the text: \n\nHungry? \n\nIf so, meet me in room 412 of the Health Sciences Building at 3:00. \n\nThis is a ONE TIME offer High School cunt muncher. \n\nMy cock instantly hardened. \n\nYet, was all she going to use me for was a quick cunt munching? \n\nAnd if that was the case, was I okay with that? \n\nShe completely intrigued me as she treated me like she was the man and me, the girl. Now, I'm not gay or even remotely feminine, but somehow not being the one in charge turned me on. \n\nI have no idea why. In all my other sexual encounters it is always about me, my pleasure, my dick... yet, with her, I don't know. \n\nI was intoxicated by her and had to see her again. \n\nI texted back: \n\nI'll be there. \n\nI left school before my final class, Chemistry, and drove to the college, getting there five minutes late (which was a good ten minutes early for me... I learned early to always keep the women waiting). \n\nAlthough when I reached room 412, I was surprised to say the least... it was the girl's washroom. \n\nI texted: \n\nI'm here... but room 412 is the girl's washroom! \n\nI received a text right back: \n\nYou're fucking late. \n\nGet your ass in here right fucking now. \n\nI'm in the last stall. \n\nI couldn't believe it. She wanted me to go into a public girl's bathroom. \n\nI looked every way, a couple guys were walking towards me so I just leaned against the opposite wall as if I was waiting for my girlfriend to finish freshening up... or whatever the fuck girls do in the bathroom. \n\nAnother text: \n\nNow or fucking never, cunt muncher!! \n\nI had to see her again, so I took a deep breath, looked each way quickly, and then entered the forbidden room... a place every guy wonders about... the girl's washroom. \n\n\"Hurry up,\" she called out, the moment I entered. \n\nI quickly scurried to the end stall and entered. She was already on the toilet, skirt hiked up and legs spread. \n\nShe ordered, \"Knees, now.\" \n\nI wanted to talk to her, to get to know her (something I never wanted to do with the plethora of girls I fucked), but startled by her dominant and perturbed tone, I did as she ordered. \n\n\"Don't just kneel there like a fucking dimwit, get licking,\" she demanded. \n\nAgain, I obeyed, even though I couldn't believe I was obeying. Girls came to me when I wanted a booty call, I didn't go to them... especially to eat pussy... yet, that was exactly what I was doing. \n\nI leaned forward and began licking, her scent slightly stronger this time. \n\nShe ordered, \"Don't make love to my fucking cunt, eat it.\" \n\nI was in such awe of this college girl. She was treating me like a slut which was completely surreal and, yet again, had my cock hard as steel and begging for attention. \n\nAfter a couple more minutes of licking her cunt she asked, \"Are you hard?\" \n\n\"Like a rock,\" I answered. \n\n\"Pull out your cock,\" she ordered. \n\n'Yes', I thought to myself. I was going to get to fuck this hot redhead. \n\nI began to stand up and she ordered firmly, \"Stay on your knees, just fish out your cock.\" \n\nI was again surprised, but obeyed. Although I was a little annoyed, as I wanted her to see my cock up close and personal... confident that would impress her... plus, of course, I desperately wanted to fuck her... more than I had ever wanted to fuck a girl before. \n\nOnce I had it out, she said, not seeming at all interested in seeing it, \"Now you can jerk off while you eat my box.\" \n\nI was again stunned, but my cock dying for attention, I began stroking my cock as I leaned forward and resumed eating her, as she called it, box. \n\nAs I licked and jerked off at the same time, she moaned, \"Oh yes, such a good boy.\" \n\nSurreal words, and yet they flattered me... knowing I was making her happy. \n\n\"I want you to come for me, High School boy,\" she ordered, a couple of minutes later. \"Come while eating me out.\" \n\nAnd somehow those words were all I needed to erupt, having been close for a while, and I spewed my load all over the front of the toilet. \n\n\"Ohhhhh, yes, come for me,\" she moaned. \n\nThose were more like the words I was used to hearing, as rope after rope shot out of me. \n\nShe came a couple of minutes later, again coating my face with an abundance of pussy juice. \n\nA moment later, she said, \"I'll be in touch.\" \n\n\"Um, okay,\" I nodded, still on my knees, cock out. \n\n\"Well go,\" she said, shooing me out. \n\n\"Okay,\" I nodded, again feeling cheap and used... and confused. \n\nI walked out of the bathroom, thankful that no one was around to see me leaving the girl's washroom. \n\nI headed home trying to understand this strange relationship I have with the beautiful redheaded girl whose name I still didn't know. \n\nThe next afternoon, once school was done, now having her cell number, I texted her: \n\nCan I take you out for dinner? \n\nThis was a huge shift for me. I didn't date... I fucked. \n\nYet, I wanted this girl more than I had any girl ever. And... as strange as it was, especially considering how she was treating me, I wanted more than just sex, I wanted to date her. \n\nAn hour later, she responded: \n\nIf you want to EAT in, be at my dorm room at 7. \n\nThis wasn't what I asked, but wanting to spend time with her, I wasn't going to squabble over semantics or location, I texted back I would be there. \n\nWhen I arrived a few minutes early, I was surprised to see another guy open the door. He was tall, 6'6 at least, and towered over me, something I wasn't used to. \n\nHe didn't say anything as he walked out, just as she called out, \"Come in, High School.\" \n\nMy name was now simply 'High School'. \n\nI walked in, closed the door and reminded her, even as I wondered why that guy had been there (did they just fuck?), \"My name is Brian.\" \n\nShe was on her couch, in a skirt and blouse, her cheeks were red, the red they get when someone was just fucked, and her hair was slightly disheveled. \n\nNo doubt, she had just had sex. \n\nI was furious. \n\nJealous. \n\nAnd yet, even though I should have left, I didn't. I asked \"So, can I take you out for dinner?\" \n\n\"Actually I just had a nice snack,\" she said, implying the obvious, she had swallowed the tall guy's load, \"but I do have an essay to write and wouldn't mind some oral stimulation.\" \n\nSo I crawled under her desk and for the next hour I licked her pussy... slowly... while she wrote an essay, I think, and chatted with her mother on the phone for a good twenty minutes. I stopped when I realized she was on the phone with her mother, but she slapped the back of my head. \n\nOnce off the phone, she grabbed the back of my head and again used my face to get off. \n\nOnce she was done coming, she asked, rolling her chair back to look down at me, \"Hard?\" \n\n\"Yes,\" I admitted. \n\n\"Let me reward you for being such a good boy,\" she said. \"Stand up and fish out that cock.\" \n\nI quickly obeyed, happy to get off my knees, and praying this time those luscious lips were going to wrap around my cock. \n\nOnce it was out, she nodded, \"Nice cock.\" \n\n\"Thank you,\" I said, as she moved and took it in her hand. \n\n\"Do you want to come on my face?\" she asked. \n\n\"I'd love to do more than that,\" I said, trying to regain some of the usual swagger I had when with women. \n\n\"I bet you would,\" she purred, as she slowly stroked my cock. \"I plan to fuck the hell out of you one day, my High School cunt muncher, but not until I believe you are ready.\" \n\n\"Oh, I'm ready,\" I said, my balls about to burst. \n\n\"Oh, I know you think you are,\" she said, moving her hand faster, \"but men, real men, don't come in seconds from just being stroked.\" \n\n\"Ahhhh, fuck,\" I groaned, as she was somehow a mind reader, as literally a couple seconds later I couldn't hold back any longer and I shot my load all over her face. \n\n\"Bad boy,\" she smirked, even as she kept stroking me and my cum kept splattering against her face. \"I don't recall giving you permission to come.\" \n\n\"Sorry,\" I apologized, even as I realized what she had said. \n\n\"Obviously,\" she said, scooping some cum off her face and putting it in her mouth, \"you need some discipline training.\" \n\n\"What does that mean?\" I asked, as she slowed down her jerking motion. \n\n\"You need to be able to control your orgasm,\" she explained, as she stood up. \"Real women like men who can fuck all night.\" \n\n\"Trust me, I can fuck all night,\" I said. \n\nShe moved her hand and put a finger in my mouth, which I realized was coated in my cum. \n\nI gagged. \n\n\"What, have you never tasted yourself?\" \n\n\"What? God, no, that's gay,\" I replied, once she pulled her finger out. ",
        "\"You need to always know what you taste like,\" she continued. \"Especially if you expect women to swallow your load.\" \n\n\"I guess,\" I said, non-committal. \n\nShe walked away, then returned with a USB drive. She handed it to me and asked, \"Do you want to be with me?\" \n\n\"God, yes,\" I nodded. \n\n\"I'm a complete bitch,\" she warned. \n\n\"You're the hottest woman I've ever met,\" I countered. \n\n\"Okay, I'm a hot bitch,\" she shrugged, without a smile. \"But I'm a demanding, hot bitch.\" \n\n\"I'm ready for whatever you want to dish out at me,\" I said. \n\n\"Remember those words,\" she said, again serious as Al Gore talking about climate change. \n\n\"Okay,\" I nodded. \n\n\"Each night for the next few days you will watch one chapter of the video I am giving you. You will not go to next chapter until the next day. Although you can repeat the chapter as many times as you wish.\" \n\n\"What am I watching?\" I asked. \n\n\"Videos on how to please me by being able to control your orgasm,\" she said. \n\n\"Oh,\" I nodded. \n\n\"So, as of now you are not to be with anyone else and you will last as long as you possibly can without coming while you watch these videos... is that clear?\" \n\n\"Yes,\" I nodded, thinking I hadn't gone three days without a mouth or pussy or ass to fuck in at least 18 months. \n\n\"Be a good boy and I will change your life,\" she said, leaning in and kissing me. \n\nI felt fireworks. I already knew there was something about her, but one kiss and I knew she was the one I could actually date... actually fall in love with. \n\nBreaking the kiss, she smiled for the first time during this strange conversation, \"By the way, my name is Rose.\" \n\nI couldn't help but laugh, \"Of course it is.\" \n\n\"Now go, High School, I need to get some work done,\" she said, dismissing me. \n\n\"Okay, bye,\" I nodded, not wanting to leave. \n\nAs I left, she reminded me, \"Only one clip a day!\" \n\n\"I promise,\" I nodded, curious to see it. So curious, I asked, \"Can I watch the first part tonight?\" \n\n\"Eager are we?\" she asked. \n\n\"For you I am,\" I said, trying at every turn to show the swagger that seemed to disappear when her strong persona took control. \n\n\"Sure, High School,\" she nodded. \"The sooner we get your training started, the sooner I can rock your world.\" \n\n\"Great,\" I nodded, leaving and feeling giddy with excitement. \n\nI was falling for a girl who I hadn't yet fucked or even gotten a blow job from. \n\nLove, it is a crazy thing. \n\n... \n\nOn my way home, she texted: \n\nHigh School \n\nWear headphones while watching it!! \n\nTrust me! \n\nAnd remember last as long as you can. \n\nOdd, but as soon as I got home I went to my room, plugged the USB into the port and saw a dozen files creatively numbered (One - ten, plus two that were named: Q1 and Q2) video files pop up. \n\nEven more curious, I grabbed my headphones, plugged them into my computer, and clicked on the video marked: 'One'. \n\nI gasped. \n\nIt was porn. \n\nIn retrospect, that made sense based on her words and text, yet still... no girl had ever purposely given me porn. \n\nEven weirder is it wasn't a porn movie, or even a porn scene... but excessive quick three to five second shots of girls sucking cock. \n\nEven weirder than that was the words that popped up on the screen every five seconds or so. \n\n-You love cum in your mouth (a cute girl with her mouth wide open with a load of cum in her mouth) \n\n-Nothing feels better than being his cock whore (a black haired girl with braces playing with cum that is all over her face) \n\n-Take his dick (a hot white girl leaning forward and taking a massive black cock in her mouth) \n\n-Be a good little cocksucker (a cute sweet innocent girl slowly bobbing on a cock that stretched her mouth to ridiculous lengths) \n\n-Please your man (a girl on her knees. With huge tits, looking up with hunger, stroking a big dick and saying, \"God, I love your big fucking dick\") \n\n-You want his cum all over your face (a black girl getting a massive load of cum splattered on her face... the white cum contrasted severely on her black face) \n\n-Let him do whatever he wants to you (a girl with glasses getting roughly face-fucked, the guy's balls bouncing off her chin) \n\n-You're a cum guzzler (a girl in a ponytail catching a shot of cum in her open mouth) \n\n-This is how to make your man moan (a Asian girl swirling her tongue around a thick mushroom top) \n\n- Milk his big dick (a black girl furiously pumping a huge black dick) \n\nIn less than a minute, my cock was hard as hell and begging for attention... but I ignored it... understanding already how this was a test. \n\n-You want cum (a girl in a school girl's outfit on her knees begging 'Give me your load, I want your cum exploding down my throat) \n\n-Take his fucking load (a brunette with crystal blue eyes sucking cock as cum leaks out of her mouth) \n\nThen for thirty seconds straight there was picture after picture of girls sucking cock. Each hotter than the next. All the while the same words kept popping up in different fonts, different colours: \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nThen it returned to messages every few seconds: \n\n-Let him use you (an older woman, a really hot older woman, stroking a big cock while sucking on just the mushroom top) \n\n-Wank his massive pecker and take his huge creamy load (a blonde pumping a huge dick while it splattered her face) \n\n-Look at him when you service his glorious member (a girl with a mouthful of cock, her blues eyes looking up longingly) \n\n-You want to swallow his cum (a redhead, fuck I love redheads, clearly swallowing a load) \n\n-Tell him how much you want his dick (a hot blonde begging, \"Please give me that big cock of yours. Fuck my face with that huge fuck stick\") \n\n-Let him make you his bitch (a chubby, but eager brunette, deep throating a long, thick cock) \n\n-Worship his balls, cocksucker (a hot as hell blonde was on her back sucking on a huge sack) \n\n-You know you love it (a petite girl in a ballerina outfit stroking two cocks while sucking another) \n\n-Let him use you so he can get off (a teacher on her knees sucking the big cock of a guy sitting on her desk) \n\n-Your sole purpose is to make him happy (a cheerleader with her head held against a cock lodged deep in her throat) \n\n-Your sole purpose is to suck cock (a MILF sucking the cock of a guy who was young enough to be her son) \n\n-Your sole purpose is to swallow cum (a pretty brunette with her mouth open as cum rocketed in her mouth) \n\nThen, again, for thirty seconds straight there were the same pictures of girls sucking cock. Again with the same two words: \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nGod, I wanted to come, as I slowly, mindlessly, rubbed my cock through my jeans, completely turned on by the nasty video. \n\n-Open wide and take that big fuck stick in between those cocksucker lips (a tiny raven haired beauty had her mouth open wide as a huge thick cock moved towards her) \n\n-Beg for cock (a pretty older woman begged a much younger man, \"Please shove that massive cock in my mouth and face fuck me\") \n\n-You were born to suck (a cute girl in pigtails sucked in slow motion on a thick dick) \n\n-You get pleasure from sucking cock (a huge breasted girl with dyed purple hair cupping her breasts as she sucked cock) \n\n-Let him use you, it's what he wants (a pretty woman, wedding ring on her finger, with a man holding her head and fucking her roughly) \n\n-You love getting hot with warm cum all over your pretty face (a lawyer in a courtroom getting a facial from her heavily tattooed client) \n\n-Satisfy him, make him happy, your purpose is to serve (a girl, dressed as a nun, was on her knees sucking cock) \n\n-You love being his suck toy (an older woman was being face fucked and then cummed on) \n\n-Swallow the entire yummy load (a blonde, with red streaks, showed a mouthful of cum and then swallowed it while looking directly at the camera) \n\n-You get horny from sucking big dicks (a sexy girl in lingerie was on her back rubbing herself while a cock slid in and out of her mouth) \n\n-This is who you really are, a cocksucker (three girls sucking three cocks simultaneously) \n\n-Now you're his whore! Take his fucking load (a girl getting a facial over and over again) \n\nThen, again, the same pictures of girls sucking cock. Again with the same two words: \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nSUCK COCK \n\nI was now furiously pumping my cock, which I had pulled out a minute earlier while words flashed furiously over and over as girl after girl got a full face of cum. \n\nFUCK \n\nJERK \n\nSQUIRT \n\nCUM \n\nCUM \n\nCUM \n\nEAT IT \n\nSLURP IT \n\nPUMP IT \n\nBEAT IT \n\nSUCK IT \n\nGULP IT \n\nSWALLOW IT \n\nJIZZ \n\nJIZZ \n\nJIZZ \n\nGARGLE CUM \n\nSWALLOW \n\nGOBBLE CUM \n\nSWALLOW \n\nSLUT \n\nCOCK SLUT \n\nCUM SLUT \n\nCUM \n\nCUM \n\nCUM \n\nCUM \n\nCUM \n\nCUM NOW \n\nNOW \n\nRIGHT FUCKING NOW \n\nCOCKSUCKER \n\nAnd I did... on command... my cum rocketing out of me like a missile headed for space as the final words stayed on the screen. \n\nENJOY COCKSUCKER \n\nI couldn't believe how hot that video was, somehow way more stimulating than a normal porn movie or scene. \n\nI also couldn't believe that Rose would give me such a video to watch. \n\nFeeling compelled to tell her the truth, I texted: \n\nLasted until the very end of the first video. \n\nShe texted back a few minutes later, after I had cleaned myself and my blanket. \n\nDid you come when you were told to? \n\nI replied back, realizing that was indeed when I came: \n\nYes, when the words ordered me to. \n\nShe replied: \n\nGood boy. \n\nAnd although the words were condescending, they somehow felt right. \n\nI replied: \n\nThank you. \n\nShe texted back: \n\nYou may watch the second video tomorrow. No more than one a day, although you can watch it over and over again if you wish. \n\nI replied: \n\nI can't believe you gave me such a nasty video to watch. \n\nShe replied: \n\nDid you see me in the video? \n\nI gasped. \n\nI hadn't at all. \n\nI asked: \n\nAre you in there? \n\nShe responded: \n\nYep. I LOVE sucking cock. \n\nI replied, my cock, which had just begun to go into slumber waking back up: \n\nWell, I'm always available. \n\nShe replied: \n\nBe a good boy and I will give you pleasure you couldn't even begin to imagine. \n\nAnd my cock was hard again. \n\nAnother text: \n\nNow don't text me until you have finished the next video tomorrow. Sweet cum dreams. \n\nI wasn't sure if I was supposed to text her to respond or obey her very words... but not wanting to look even more clingy and pathetic than I already did, I resisted responding. \n\nInstead I watched the video again, looking for her. \n\nAnd again. \n\nAnd again. \n\nAnd during the fourth viewing I came again, the video too hot to resist. \n\nThen, finally, on the fifth viewing I saw her. She was one of the very quick picture changes during the end of the film (a load of cum dripping off her face)... ironically when the words 'CUM NOW' popped on the screen. Ironic because I even obeyed her subconsciously. \n\nAs I got ready for bed, suddenly exhausted, I began to wonder if I wasn't getting in over my head. \n\nThis girl was obviously crazy. \n\nYet, I was undoubtedly crazy for her. \n\n... \n\nAll day at school, I kept thinking of Rose. \n\nI kept thinking of the video. \n\nI kept thinking about the second video. \n\nSo much so that I came home at lunch and went right to my room, got undressed, put on my headphones, and clicked on video two. \n\nThis time I wasn't surprised to see it was porn. \n\nThis time though, a sexy, sultry, feminine voice said the words when they popped up onto the screen... this made the video even hotter. \n\nThis time the pictures were all video and didn't line up as perfectly to the words on the screen... it was just random videos of girls sucking dick, getting fucked, playing with themselves, stroking cocks and taking it in the ass. \n\nThe words, though, seemed to have a slightly more logical transition. \n\nYou're a slut \n\nA cock slut \n\nAnd what does a cock slut do? \n\nSucks big... hard... cocks \n\nYogurt Slingers \n\nMeat sticks \n\nDicks \n\nPeckers \n\nRods \n\nStiff Popsicles \n\nSledgehammers \n\nDongs \n\nBig Willies \n\nDaggers \n\nCocks \n\nNow get on your knees and suck that cock \n\nSuck it like you're his bitch \n\nYOU ARE HIS BITCH \n\nLike you're his cum bucket \n\nYOU ARE HIS CUM BUCKET \n\nSuck it like a cheap cock hungry bimbo \n\nYOU ARE A CHEAP COCK HUNGRY BIMBO \n\nSo lick his long hard shaft \n\nSuck on his big full balls \n\nDeep throat his thick dick \n\nNow be his fucking whore \n\nGive your man what he needs \n\nHis personal cocksucker \n\nHis personal cum deposit \n\nBob like a slut \n\nTake all his stiff erection in your mouth \n\nDeep throat like a whore \n\nTake his entire missile in the back of your throat \n\nOpen wide \n\nYou want to taste his cum \n\nYou love cum \n\nCum \n\nCum \n\nCum \n\nCum on your tongue \n\nCum down your throat \n\nCum in your belly \n\nCum all over your face \n\nCum \n\nCum \n\nCum \n\nTake his full load \n\nThat is what you were born to do \n\nSuck cock \n\nEat cum \n\nLet him use you as his cum whore \n\nThat's what you are \n\nA cum whore \n\nSay it \n\nI'm a cum whore! \n\nSay it dammit \n\nI'm a cum whore! \n\nSay it now you fucking slut \n\nI'm a cum whore! \n\nSo intoxicated by the video, so drawn in, I heard myself say, \"I'm a cum whore.\" \n\nLet him empty his balls \n\nInside you \n\nAll over you \n\nMake him happy like this \n\nDrink the cum from his dick \n\nThat yummy gooey cum \n\nCum tastes so good \n\nCum \n\nJizz \n\nSemen \n\nCum \n\nJizz \n\nSemen \n\nAlways swallow \n\nSwallow \n\nSwallow \n\nSwallow \n\nCum now, slut \n\nCum from pleasing your man \n\nFrom servicing cock \n\nCum for me \n\nShoot that big load all over my face \n\nCum for me \n\nShow me how much you love me \n\nCum for me \n\nCum for me \n\nCummmmmmmmmmmmmmm \n\nAnd I did. \n\nMy balls again erupting with the intensity of a rocket launch as I furiously stroked my cock. \n\n\"Brian!\" a shocked voice said, even as I kept stroking my cock. \n\n\"Brian!\" the voice repeated, this time bringing me back to reality. \n\nI opened my eyes and gasped. \n\nMy mother was staring at me with a shocked and disgusted look on her face. \n\nAs I pulled off my headphones, she said tersely, \"You are late for school.\" \n\nI stammered, even as cum dripped off the end of my dick, \"I'm s-s-sorry.\" \n\nShe shook her head, \"We will talk about this later,\" and thankfully left. \n\nMortified, I closed the computer and got dressed. I couldn't believe Mom just caught me jerking off. \n\nFuck! \n\nThankfully, she wasn't home when I came downstairs a couple minutes later and I headed back to school. \n\nI texted Rose: \n\nThe second video was amazing. \n\nNot so amazing, my Mom walked in on me at lunch just as I shot my load. \n\nShe didn't respond all afternoon, which made me feel like the girl in the relationship as I kept checking my cell for a response. \n\nWhen I wasn't checking my cell phone for a message from Rose, I was trying to decide how the hell I was going to explain why I was home at lunch and why I was doing what I was doing. \n\nAs the school day ended, Rose texted me back. \n\nToo funny! \n\nBut a mother must know that her son masturbates. \n\nDid you enjoy the video? \n\nDid you refrain from coming? \n\nShit! I didn't refrain from coming. \n\nI was so intoxicated by the video that I forgot all about the purpose of the video. I did realize I came when told to though. \n\nSo I texted her back: \n\nI came \n\nWhen I was told to. \n\nShe texted back: \n\nYou are a good obedient boy. \n\nDo you want a treat? \n\nI quickly texted back without even thinking that all she probably wanted me for was to eat her out... I just wanted to see her: \n\nYes!! \n\nHer response: \n\nMeet me at the Lodge Mall, ASAP. \n\nI'll be in the Victoria's Secret. \n\nI responded that I was on my way. I quickly got into my car, already hard, and drove the fifteen minutes to the mall... not even considering how I was going to get my treat. ",
        "I got there and she was chatting with a pretty, short brunette who had a stunning resemblance to Mila Kunis. \n\nI walked up to them and greeted, \"Hey, baby.\" \n\nRose looked at me and asked, \"Hungry?\" \n\nI responded, \"Starving.\" \n\n\"Even after Mommy caught you spanking your monkey?\" she asked, right in front of a complete stranger. \n\nI stammered, surprised by her frankness, although based on our few encounters I shouldn't have been, \"Y-y-yes.\" \n\n\"Don't worry, High School, Simone and I tell each other everything,\" she said. \n\n\"Um, okay,\" I nodded, feeling awkward. \n\nSimone added, \"I hear you are a pretty good cunt muncher.\" \n\n\"That I am,\" I nodded, trying to be suave. \n\n\"Let's find out,\" Simone said, grabbing my hand. \n\nI looked at Rose who shrugged, \"We also share everything, so be a good boy and make her happy.\" \n\nMy head was spinning, even as I followed the hot brunette down a hallway and into a back room. \n\nOnce inside, she lifted up her skirt and ordered, \"Get licking.\" \n\nAlthough surprised, I dropped to my knees and stared at her perfectly shaved pussy. \n\n\"Hurry up, I only have a fifteen minute break,\" she ordered, as she grabbed my head and pulled me into her wetness. \n\nI began licking, still trying to understand what kind of relationship I was in with Rose. \n\n\"That's it, get that tongue up my snatch,\" Simone demanded. \n\nI obeyed, even though I thought I was already doing that. \n\nHer scent was stronger, as was her taste... not gross, but not heavenly either. \n\nThe entire time I licked, I tried to understand Rose. \n\nShe was an enigma. \n\nWere we dating? Clearly not. \n\nCould we be dating? Maybe. \n\nWould I do anything to win her over? Yes. \n\nWhich was why I was licking a complete stranger's pussy in the back room of a Victoria's Secret. \n\nAfter a few minutes, where my neck was getting sore because of the odd angle I was positioned in, she came... unlike the excessive splashing of Rose, Simone's cum was subtle and seemed to just flow slowly out of her and into my open mouth. \n\nOnce done, she nodded, as she dropped her skirt back down, \"Rose was right.\" \n\n\"Um, thanks,\" I said. \n\n\"I may beckon you again,\" she said, before adding, \"now go away.\" \n\n\"Um, okay,\" I nodded, getting up and leaving. Walking out to the store, I couldn't find Rose anywhere. \n\nI texted: \n\nWhere are you? \n\nShe replied: \n\nHeading back to the dorm. \n\nI hope you enjoyed your treat. \n\nI replied: \n\nI was hoping for a different treat. \n\nShe replied: \n\nGood things CUM to those who wait. \n\nAnd since you are progressing so well, I expect you to watch the third video tonight. \n\nAnd try to last until at least the second viewing. \n\nI sighed at the reality she was gone, but got excited about a third video, although it would have to wait until later as tonight was paintball night with the guys. \n\nI went home, talked to Mom, more confident after realizing Rose was right... I was a guy and guys jerked off. \n\nMom was more concerned about me missing class, but I told her I hadn't missed any as I had left after my morning class and had study hall after lunch. \n\nShe then joked, \"Lock the door!\" \n\nI agreed that was a very good idea. \n\nSo at eleven, tired and sore from paintball, but super excited to watch the third video, I locked the door, got my laptop ready, put my headphones on and started watching video number three. \n\nThis one was all girls at a glory hole. A place I had never been to in my life, although I knew there was one just a few blocks from our school at a seedy adult shop. \n\nLike the first two, words popped up on the screen, this time always big and in red, which dominated the screen for the couple seconds they were there, as girls sucked cock after cock. \n\nThe words were: \n\nYou're hungry! \n\nFor cock \n\nBig hard juicy cock \n\nYour hunger for cock brought you here \n\nFor cock \n\nThick stiff dick \n\nThe Gloryhole \n\nYou're a slut for cum \n\nGobs of yummy cum \n\nCum in your mouth \n\nCum down your throat \n\nCum all over your face \n\nYou needed a snack \n\nOr snacks \n\nOf cock \n\nOf cum \n\nDelicious cum \n\nYou can suck as much cock as you want here \n\nMen line up to give you what you hunger \n\nMen waiting to fill your mouth \n\nIt's time to get your daily cum fix \n\nIt's time to satisfy your hunger \n\nIt's time to feed your insatiable craving \n\nIt's time to get on your knees \n\nSUCK \n\nSERVE \n\nFEED \n\nSTROKE \n\nTASTE \n\nSWALLOW \n\nBIG COCK \n\nYUMMY CUM \n\nCOCK \n\nCUM \n\nCOCK \n\nCUM \n\nCOCK \n\nCUM \n\nHow much cum can you eat? \n\nHow much cum do you need? \n\nJust keep sucking \n\nJust keep tasting \n\nSuck every cock \n\nSwallow every drop \n\nYou never want to stop \n\nIt just feels so good \n\nA hard cock in your mouth \n\nA warm load gliding down your throat \n\nPulsing cocks flooding your mouth \n\nThick cum filling your belly \n\nCock after cock sliding into your mouth \n\nEach one squirting warm cum into you \n\nAs I resisted touching my raging hard-on, the pictures shifted to big cocks shooting cum as the words 'SUCK COCK' and 'EAT CUM' repeated after each ejaculation. \n\nSUCK COCK \n\nEAT CUM \n\nSUCK COCK \n\nEAT CUM \n\nSUCK COCK \n\nEAT CUM \n\nSUCK COCK \n\nEAT CUM \n\nSUCK COCK \n\nEAT CUM \n\nThose words were repeated for a couple of minutes, almost until I oddly felt the words were speaking to me. \n\nThen load after load splattered girl's faces as a variety of words for cum flashed on the screen. \n\nJIZZ \n\nGOO \n\nFACE CREAM \n\nMAN YOGURT \n\nSEMEN \n\nCREAM OF SUM YUNG GUY \n\nLOVE POTION \n\nDICK SAUCE \n\nPROTEIN SHAKE \n\nCOCK CREAM \n\nCUM \n\nCUM \n\nCUM \n\nCUM \n\nCUM \n\nI couldn't explain it, but my mouth watered as I stared at cock after cock shooting load after load. \n\nEven as my cock ached. \n\nI shook my head as the video ended with the words: \n\nGOOD GIRL \n\nPart of me was proud, I had resisted touching myself... barely, but I had done it. \n\nThe other part of me was confused by the brief moment of being excited about staring at cock. \n\nI wasn't gay. \n\nI had no interest in men. \n\nI had no desire to suck a cock. \n\nAnd I definitely had no interest in swallowing cum. \n\nYet, fuck, was I ready to bust a nut. \n\nSo, I pressed play again and furiously pumped my cock... coming before the video hit the one minute mark. \n\nAfter I cleaned up, I texted Rose: \n\nFinished video three. \n\nLasted to a second viewing... barely. \n\nI don't know what you're doing to me, but God they turn me on. \n\nShe didn't respond. \n\nAnd I crashed hard. \n\nThat night, I kept having the cocks shooting their loads over and over replay in my dream. \n\nI woke up a dozen times and yet every time I drifted back to sleep the cocks returned. \n\nBy the time the alarm went off, I was still exhausted and wished it was Friday... alas, it was only Thursday. \n\nI was like a zombie through the morning until I got a text from Rose. \n\nHigh School \n\nGo home RIGHT now and watch the fourth video. \n\nI want you ready for this weekend!! \n\nMy eyes went wide. \n\nMy cock got hard. \n\nThis weekend!! \n\nIt was almost lunch, so I told my teacher that I had an appointment with a counsellor and headed home for an early lunch. \n\nAnother text: \n\nDon't you come the first time you watch it!! \n\nThen call me once you have watched it once. \n\nIs that clear? \n\nIt was weird to be given orders by a girl and yet I didn't even hesitate as I replied: \n\nAs you wish! \n\nShe responded, just as I got to my car: \n\nGood boy! \n\nI drove home quickly, trying not to speed, but speeding nonetheless. \n\nAs soon as I got home, I hurried upstairs and got the fourth clip ready. The headphones on, I pressed play. \n\nIt started slower, with a girl putting on a pair of stockings with a sultry female voice saying the words as they popped onto the screen. \n\nWhores dress up for cock \n\nThen a different girl putting lipstick on her perfect lips. \n\nGet your pretty lips ready for cock \n\nThen a bunch of girls' pictures flashing by as they puckered their lips. \n\nGet ready for a nice big cock. \n\nThen a dozen scenes of girls sucking cock with the sultry voice saying a brief, nasty sentence every few seconds. \n\nYou love having a big juicy COCK fucking your COCK sucking mouth \n\nYou're such a dirty COCK whore \n\nYou love COCK \n\nBig hard COCKS \n\nThick hard COCKS \n\nWhite COCKS, black COCKS, any COCK you can get your mouth on \n\nYou're a dirty COCK sucking machine \n\nYou were born to suck COCK \n\nFeel that COCK pulse in your slut mouth \n\nBeg for that COCK to use your face for his pleasure \n\nYou're a COCK slut \n\nA submissive COCK slut \n\nCOCK \n\nCOCK \n\nCOCK \n\nCOCK \n\nSUCK THAT COCK \n\nThen the pictures changed to girls swallowing cum and getting facials and the key bold word changed from COCK to CUM. \n\nThe sultry voice made the video even hotter and it was taking all my will power to not touch my cock, which had created an impressive tent in my pants. \n\nYou want a big gooey load of CUM \n\nCUM makes you happy \n\nCUM splattering your face turns you on \n\nYou are a CUM guzzling whore \n\nFeel that hot load of CUM slide down your throat \n\nCatch that CUM rocketing out of that glorious cannon \n\nGood girls swallow every last drop of their dominant man's CUM \n\nYou crave load after load of CUM on your face, down your throat and in your belly. \n\nNothing feels better than being coated with warm, sticky CUM \n\nDrink CUM every day for breakfast, for lunch, for dinner \n\nYou were born to eat CUM \n\nYour reward for being a good cocksucker is CUM \n\nCUM \n\nCUM \n\nCUM \n\nCUM \n\nEAT THAT CUM \n\nDRINK THAT CUM \n\nWEAR THAT CUM \n\nSWALLOW THAT CUM \n\nCUM \n\nCUM \n\nCUM \n\nCUM \n\nCUM \n\nHearing the sexy porn star voice repeating the word 'cum' over and over again had me ready to erupt. \n\nMore pictures of hot, hot girls sucking cock. \n\nWrap your mouth around the COCK \n\nIt's good to be a COCK slut \n\nCock is so fucking beautiful \n\nBig, hard, juicy COCK \n\nCOCK makes you horny, so fucking horny \n\nYOU Love the taste of COCK \n\nCOCK \n\nCOCK \n\nCOCK \n\nYou crave COCK \n\nYou adore COCK \n\nYou COCK whore \n\nThen it was pictures of big cocks shooting their loads on girl's faces, but this time the focus was on the cocks. \n\nGod, I wanted to come... but I wanted to still have my full load when I called Rose. \n\nTake all the CUM from your man's dick \n\nYou want CUM so fucking bad \n\nYou need CUM \n\nYou crave CUM \n\nDrink CUM everyday \n\nWear CUM everyday \n\nCUM \n\nCUM \n\nCUM \n\nYour mouth is a CUM deposit \n\nYour face is a CUM canvas \n\nYour belly is a CUM bucket \n\nThen it switched to a girl licking a thick juicy mushroom top like it was a lollipop or the end of an ice cream cone as the words scrolled up the screen for a good fifteen seconds. \n\nThis is what you were born for \n\nTo suck COCK \n\nWhen you were young you sucked on your Mommy's nipples \n\nWhen you got older you sucked on your soother \n\nWhen you got even older you sucked on popsicles and lollipops \n\nAnd now \n\nNow you are ready to suck what you were born to suck \n\nCOCK \n\nBig hard COCK \n\nIt then switched to, for the first time, girls getting fucked in-between girls sucking cock. \n\nNot touching my cock was the hardest thing to do. \n\nIt's sooooo good to be a COCK slut \n\nThose pretty lips were made to suck COCK \n\nBig juicy COCK \n\nYou want to have that COCK fuck your face \n\nYou want to have that COCK pound your cunt \n\nYou want to have that COCK erupt inside you \n\nYou're a good COCKsucker \n\nYou're going to keep that COCK in your mouth for as long as you can \n\nFeel that cock tickling the back of your throat \n\nOh God, you want his CUM, don't you slut \n\nYou want his CUM sliding down your throat, don't you cocksucker \n\nYou want his CUM erupting onto your face, don't you bitch \n\nYou want a full load of his warm fresh cum, don't you cocksucker \n\nYou want to catch that yummy load of CUM as it explodes out of him, don't you CUM bucket \n\nYou want his CUM so bad \n\nSay it, slut \n\nSay it, NOW \n\nSay you want his CUM \n\nHer sultry voice was so demanding that I felt compelled to obey and said, \"Yes, yes, I want his cum.\" \n\nAs soon as I said it I gasped. \n\nGood girl \n\nSlap your face with his COCK \n\nLook while you suck his COCK \n\nBeg him to have his COCK in your mouth \n\nSucking COCK is a privilege \n\nSucking COCK is an honour \n\nThank him for his COCK \n\nThank him for his CUM \n\nAs a girl, her face coated in a few loads of cum, smiled into the camera and said, \"You're a good girl.\" \n\nThen a cock appeared and erupted right into the camera followed by the words: \n\nEnjoy your snack, COCKsucker \n\nThen it faded to black with the final words: \n\nGood girl \n\nYou are now an official CUM slut \n\nI couldn't believe how horny I was. My balls were ready to erupt without me even touching myself. \n\nI quickly called Rose and she asked, \"Did you make it?\" \n\n\"Barely,\" I answered. \n\n\"Ready to come?\" she asked. \n\n\"God, yes,\" I said. \n\n\"Is your cock out?\" \n\n\"No.\" \n\n\"Pull it out.\" \n\n\"Okay.\" \n\n\"Now I want you to turn the volume up so I can hear it.\" \n\n\"What if my Mom comes home?\" \n\n\"Then she will hear you coming.\" \n\n\"Okay, okay,\" I said, too far gone to worry about getting caught... again. \n\n\"Now I want you to click on Q1 and stroke your cock while watching it. When you come, I want you to catch it all in your hand,\" she said. \n\n\"Why?\" I asked. \n\n\"Don't ask the Mistress her trade secrets,\" she scolded. \n\n'Mistress' I pondered. Is that what this was turning in to? \n\n\"Okay,\" I agreed, my desire to come, to obey her, overriding the alarm bells that were ringing in my head. \n\n\"Put me on speakerphone and start watching.\" She ordered. \n\n\"Okay.\" \n\nI unplugged the headphones, turned the volume up, put the phone close to the laptop, got on my knees so I could jerk off and apparently catch my own cum and pressed play. \n\nThe clip instantly started with rough face fucking and words appearing every couple of seconds as a different girl was face fucked. \n\nOn your knees, slut \n\nSuck that cock \n\nSavour that sweet taste \n\nLet him fill your mouth \n\nSwallow his full load \n\nMake him happy \n\nCock makes you happy \n\nSuck as many as you can \n\nYou're just another cock sucking slut \n\nLet him ram it down your throat \n\nLet him fuck that slut mouth of yours \n\nBeg for his cock \n\nBeg for his cum \n\n\"Beg to come,\" Rose ordered, startling me. \n\nI was desperately close and didn't hesitate as I begged, \"Please let me come.\" \n\n\"Please let me come, what?\" she asked. \n\n\"Mistress,\" I quickly added, completely intoxicated by her. \"Please let me come, Mistress.\" \n\n\"And you'll be my good boy?\" she asked. \n\n\"Yessssss, Mistress,\" I moaned, holding back form coming. \n\n\"My obedient, good boy?\" \n\n\"Yes, Mistress,\" I weakly said. \n\n\"Come in your hand now, you fucking slut,\" she ordered. \n\nAnd I did... instantly... grunting and shooting a big load into my hand. \n\n\"That's it, slut, come for me, come like a little bitch,\" she continued. \n\nThe name calling was demeaning and yet, in the heat of the moment, it only added to the intense pleasure I was currently experiencing. \n\n\"Yessss, Mistress,\" I weakly groaned, as I kept coming into my hand. \n\n\"Good boy,\" she purred, shifting seamlessly from dominant to tender. \n\n\"Fuck, that was intense,\" I said, as I looked at the full load in my hand. \n\n\"Now, eat your cum,\" she said, completely catching me off guard. \n\n\"Excuse me?\" I asked, praying I hadn't heard her right. \n\n\"Eat your cum,\" she repeated. \n\n\"But I...\" I began, but was cut off. \n\n\"Do you want me to suck your cock and swallow your load?\" she asked. \n\n\"That would be awesome,\" I said. \n\n\"Well, I don't do anything that my partner won't do,\" she explained. \n\nI thought to myself that eating my own cum would only be half the task, as when she sucked me she would be doing something I hadn't done, but I chose not to mention that. \n\nInstead I asked, \"Isn't that kind of gay?\" \n\n\"I've tasted myself, does that make me a lesbian?\" she asked. \n\n\"I guess not,\" I replied, although somehow a guy eating his own cum seemed a lot gayer than a girl tasting her pussy from her fingers. \n\n\"And if you expect a girl to swallow your cum, shouldn't you know what it tastes like?\" she asked. \n\nThat oddly made sense. \"I suppose.\" \n\n\"No, I know. Now eat your cum,\" she ordered, \"I have to get to class.\" \n\nI considered just pretending to and yet I felt both compelled to obey and a strange sense of curiosity. All those girls seemed to like the taste of cum... how bad could it be. ",
        "\"Okay,\" I said, and slowly moved the big load of white goo to my mouth. \n\nI paused. \n\nI couldn't do it. \n\n\"Now, slut,\" Rose ordered. \"Eat that big, juicy load of cum.\" \n\nBeing called a slut and having the vivid description of cum pushed me past the invisible line of no return as I quickly moved my hand to my mouth and sucked my cum into my mouth. \n\nTo my surprise it wasn't gross at all. \n\nIf anything it was kind of good... salty and sweet. \n\n\"Good boy,\" she purred, before adding, \"lick your entire hand clean. Never waste a drop of cum.\" \n\nI again obeyed as I licked the rest of my cum off my hand. \n\n\"I got to go, but I expect you to watch video five tonight and when you come I expect you to eat it again,\" she ordered. \n\n\"Okay,\" I said, not sure I actually would do it. \n\n\"Be a good boy, obey and Saturday night I am going to rock your world... literally,\" she said. \n\n\"Is that a promise?\" I asked, the idea of finally having her sucking my cock or, better yet, getting to fuck her instantly exciting. \n\n\"Trust me, after Saturday night you will be a changed man,\" she said. \"But I got to go, love ya, Brian,\" \n\nThen she hung up. \n\nMy head was spinning. \n\nSaturday night... rock my world... love ya... she even actually used my name. \n\nThis girl was an enigma... a puzzle with a lot of pieces still missing... a crossword puzzle with a lot of complex clues. \n\nAnd I was completely in LUST with her. \n\n... \n\nThat night, the door locked, the headphones on, I clicked on video five. \n\nThis one had a title scroll across it. \n\nGood Girl vs Bad Girl: To suck cock or not to suck cock \n\nThis video, like the others, had tons of amazingly beautiful girls sucking cock, but this time there were two voices... one firm, dominant and yet sexy, the other sweet and sultry. \n\nThis one also seemed to have more close-ups of the cock. Besides the video and pictures of girls sucking big cocks, the two voices seeming to battle each other (in the most twisted version of the Devil Went Down in Georgia ever), words popped up on the screen every ten seconds or so... less than the past videos. \n\nVoice 1: Worship cock \n\nVoice 2: Don't worship it \n\nPut it all in your cute little mouth \n\nDon't be a bad girl, you're a good girl \n\nText: Big juicy cock \n\nTake that cock deeper and deeper \n\nYou're not getting aroused by this \n\nFocus only on his big hard cock and how much you love it in your mouth \n\nYou don't want that snake invading your innocent mouth \n\nLove to suck hard man meat \n\nSuck it all the way into your mouth \n\nYou don't want to be a cock slut \n\nEnjoy that cock sliding in and out of your mouth \n\nDon't enjoy it, you're a good girl \n\nNothing is better than a warm load of cum heating up your belly \n\nFeel it pulsing and throbbing in your mouth \n\nDon't... don't let it pulse in your mouth \n\nFeel the veins as the blood rushes to the tip of the cock \n\nDon't touch yourself... don't allow yourself to get excited \n\nBig fat thick cock \n\nDeeper in your mouth, get it nice and hard \n\nDon't let it get hard in your mouth \n\nFeel the balls bouncing off your chin as he fucks your face \n\nDon't allow him to face fuck your pretty face, you're a sweet girl \n\nCocks are yummy \n\nYou feel great pleasure on your knees with a cock in your mouth \n\nDon't allow yourself to get aroused \n\nBe a good little cocksucker \n\nControl yourself, resist the temptation \n\nYou crave cum \n\nCome on you little cock sucking whore \n\nTake that big cock in your mouth \n\nDon't do it, don't become a cocksucker \n\nYou crave the taste of cock \n\nYou crave the taste of cock \n\nYou crave the taste of cock \n\nYou enjoy worshipping it \n\nResist the growing temptation, you're a good girl, such a good girl \n\nYou love big hard dicks \n\nWorship it \n\nEnjoy it \n\nFeels so good \n\nFeels so right \n\nSo natural \n\nThis is where you were meant to be \n\nOn your knees \n\nOn your knees \n\nOn your knees \n\nFight it! \n\nGood sluts live on their knees \n\nMake him cum in your mouth \n\nDown that slutty throat \n\nMake him shoot his load in your mouth \n\nAnd warm your belly \n\nOpen your mouth wide \n\nResist with everything you have, you're not a cum whore \n\nAt the count of ten he is going to come in your mouth and you are going to come too \n\nYou're going to feel his semen, his hot semen \n\nDon't let him or you'll be aroused forever when you see a big juicy dick \n\nBig juicy dick \n\nYou're going to feel semen fill your mouth \n\nCatch his semen in your mouth \n\nSavour the sweet taste \n\nHot, hot, hot, semen \n\nDon't let him cum in your mouth, you're a good girl and good girls don't suck cock, they don't eat cum \n\nWhen he comes, you're going to come \n\nBecause cocksuckers get the most pleasure from making others come \n\nCocksuckers were born to please \n\nTo serve \n\nTo suck \n\nTo swallow \n\nCocksucker \n\nCocksucker \n\nCocksucker \n\nYOU'RE A COCKSUCKER!! \n\nSo much arousal, \n\nWhen he comes you're going to feel so much pleasure \n\nPleasure unlike any you have ever experienced in your life \n\nAs you understand your purpose in life \n\nIt's so fun to be a bad girl \n\nA very good bad girl \n\nA very good cocksucker \n\nCocksucker \n\nCocksucker \n\nCocksucker \n\nDon't come, don't let him come in your mouth \n\nYOU'RE A COCKSUCKER!! \n\nTen: Suck it! Worship it! Adore it! \n\nResist it \n\nNine: Take it deep in your fucking throat \n\nResist it \n\nEight: Imagine that semen flowing out of his cock and into your eager mouth \n\nResist \n\nSeven: The hot seed that only can be produced in the balls of a man \n\nResist \n\nSix: Suck that hard juicy cock \n\nDamn it feels so good... shit! \n\nFive: Feel the hardness that you caused with that cock sucking mouth of yours \n\nFight it, fight it, fight it, fight it, fight it \n\nFour: Keep sucking it, your only purpose is to please a cock \n\nNo, no, no \n\nThree: Come on, cocksucker, you want nothing more than to be on your knees, sucking cock after cock after cock after cock after cock \n\nOh fuck, resist \n\nTwo: You want his cum, don't you? You want to be the perfect cocksucker \n\nOh God, say no, fight, fight, fight \n\nOne: You can literally feel the anticipation as his cock pulses in your mouth ready to ejaculate and give you the greatest present a man can give you... his cum \n\nResiiiiiiiist \n\nZero: He's coming all over your face, he's filling your mouth \n\nIt's too late \n\nSwallow that cum, swallow \n\nYou have to swallow \n\nSwallow \n\nSwallow \n\nSwallow \n\nSwallow every drop \n\nSwallow every drop of that cum \n\nThat sweet addicting cum \n\nThat delicious man made desert \n\nYou're a whore now, there is no going back, you're a bad girl \n\nIt feels sooooo good to be bad \n\nFeel it sliding down your throat \n\nFlowing down your body and filling your tummy \n\nYou feel sooooo complete now \n\nSucking cock makes you happy \n\nAfter you cum, keep watching... this is what you were meant to do \n\nTo worship cock \n\nTo suck dick \n\nTo swallow cum \n\nTo be a cocksucker \n\nA cocksucker \n\nA cocksucker \n\nTo be owned \n\nTo be controlled \n\nBy a beautiful penis \n\nA delicious hard cock \n\nA throbbing exploding dick \n\nIt's so strong \n\nSo powerful \n\nSo mystical \n\nA cock \n\nA dick \n\nYou were born to suck cock \n\nSucking cock feels good \n\nSucking cock makes you happy \n\nSluts are happy \n\nSluts are obedient \n\nSluts are born to please \n\nYou're a slut! \n\nAnd the video fades... \n\nAs soon as the video ended, I pressed play again and began stroking my cock. \n\nI went slow, wanting to make this last as long as possible. \n\nI watched the video again. \n\nI listened to the two girls play angel vs devil on my shoulder, trying to convince me each was right. \n\nI watched girls suck cock after cock. \n\nBig, hard, juicy cocks. \n\nFuck what was I saying? \n\nYet, I couldn't take my eyes off the big cocks, the hot girls, the huge loads of cum. \n\nI lasted almost half the video before coming, again catching my load in my hand. \n\nI couldn't explain it... I'm not gay... but I was craving my cum again. \n\nAnd as soon as I was done, I moved my hand up to my mouth and lapped up my cum. \n\nGod, I tasted good. \n\nNo wonder girls loved sucking my cock and swallowing my load. \n\nAs soon as I thought that, I wanted to slap myself. \n\nWhat the fuck was I saying? \n\nI stopped the video, shut down my laptop and lay in bed trying to figure out how this day had progressed. \n\nI now had a Mistress, I think. \n\nI had now eaten two loads of my own cum and found it tasty. \n\nI needed to get to Saturday and fuck the hell out of Rose. I needed to reclaim my manhood. \n\nThat night I had a crazy dream where I was on my knees eating Rose's pussy, but then just as she was about to come... it changed into a cock and she sprayed my face with her cum. \n\n... \n\nYet, the next morning, instead of reclaiming my manhood, I pressed play on number 6, my cock already hard. \n\nThis time the words were on a black screen for a few seconds by themselves spoken by another sexy, sultry voice... a voice so soothing it was as if she was talking directly to me, which was ludicrous but that was what it felt like. And then there would be one picture at a time of a nice hard cock spraying his load all over a girl. \n\nI'm here to make your dreams CUM true \n\nYour dream of having a hard throbbing cock in your mouth \n\nYou dream of a massive load exploding on your face \n\nYou want to feel milky cum sliding down your throat \n\nYou want to taste the sweet salty seed \n\nYou little fucking cum whore \n\nYou love cock \n\nYou love cum \n\nYou're a cock slut \n\nObey \n\nYou're a cock slut \n\nAccept \n\nYou're a cock slut \n\nMindless \n\nYou're a cock slut, \n\nAccept \n\nThe voice, the slow pacing, the massive cum shots all had my cock ready and revving to go... but I resisted... I wanted to see the whole video. \n\nYou want to give him what he wants \n\nYou want to be the cum bucket of his dreams \n\nYou want to get him off like no other slut ever has \n\nYou want to feel his hard cock sliding in and out of your mouth \n\nYou want to swallow his massive load \n\nYou want to feel his warm cum coating your pretty face \n\nYou're a hungry little cum slut, \n\nRelax \n\nYou're a hungry little cum slut, \n\nAccept \n\nYou're a hungry little cum slut, \n\nSubmissive \n\nYou're a hungry little cum slut, \n\nAccept. \n\nThen the video changed. A guy stroking his cock by himself was all there was as words came on the screen and the hot woman kept speaking, her words echoing as she spoke them. \n\nYou love a dick in your mouth \n\nWorship cock \n\nText: Taste it \n\nYou love that beautiful cock \n\nWorship cock \n\nThat cock is throbbing for you \n\nFeel it throb in your mouth \n\nWorship cock \n\nImagine his hands on your head guiding you to your natural place \n\nFeel his cock pulse in your mouth \n\nWorship cock \n\nRemember you are his good girl \n\nHe can do whatever he wants to you \n\nWorship cock \n\nSuck cock \n\nStroke cock \n\nSwallow cock \n\nLick cock \n\nWorship \n\nCock \n\nCock \n\nCock \n\nThen the words on the screen matched the girl's voice as the guy stroked faster. I couldn't explain it... I'm not gay... but I wanted to see him shoot his load. \n\nGet ready \n\nYou've had nothing to eat all day \n\nAnd you know what you want \n\nSay it \n\nCUM \n\nYou want his cum \n\nBeg for it \n\nYou want his cum \n\nSay it, slut \n\nYou're happy to eat cum \n\nYou're happy to dine on his cock \n\nYou're happy to be a cocksucker \n\nRepeat after me \n\nAnd as bizarre as it sounds... I repeated every word she said as I watched the guy stroke his huge, perfect cock. \n\nI want that big hard cock in my mouth \n\n\"I want that big hard cock in my mouth,\" I repeated, completely transfixed by the cock staring at me and her hypnotic words. \n\n\"I am a cocksucker born to suck big dicks.\" \n\nI again repeated, even though I found the words bizarre as they flowed out of my mouth, even as I stared at the perfectly smooth cock, \"I am a cocksucker born to suck big hard juicy dicks.\" \n\nI didn't realize until after I said it I had added 'hard juicy' in my response. \n\nI want nothing more than to be on my knees serving cocks \n\nCompletely intoxicated by the words, the dick, I was no longer in control of my mind, as I repeated verbatim as I was told, \"I want nothing more than to be on my knees serving cocks.\" \n\nOddly, I got onto my knees and started stroking my raging hard-on. \n\nI love cum. Sweet gooey cum. I want to swallow a big load of man cum \n\nMy mouth watered as I thought about my own cum which I could be eating soon. I couldn't help but wonder what it would feel like to have my cock in my mouth so I could swallow it directly from the source as I repeated like a bimbo, \"I love cum. Sweet gooey cum. I want to swallow a big load of man cum.\" \n\nI'm a slut for cock \n\n\"I'm a slut for cock.\" \n\nFor big, hard, thick, stiff, juicy cock \n\n\"For big, hard, thick, stiff, juicy cock.\" \n\nFor a full load of sweet, salty cum \n\n\"For a full load of sweet, salty cum.\" \n\nI need a cock fucking my face soooooo bad \n\n\"I need a cock fucking my face soooooo bad,\" I repeated, my mouth watering and my mind spinning with a lust I couldn't explain as I kept staring at that cock as he pumped faster and faster. \n\nShoot that load all over my face \n\n\"Shoot that load all over my face,\" I demanded, as he suddenly shot his massive load in the air. \n\nI tried catching it, briefly forgetting I was watching a video, that I was straight, just as I shot my own load all over my black comforter. \n\nThe orgasm was so intense as lust and shame cascaded through my body and I realized in an instant that I had just come at the idea of sucking cock. \n\nYet, I just kept coming and coming. \n\nOnce finished, I didn't even hesitate as I bent down and licked that big load of mine off my comforter, feeling an insatiable desire to eat my cum, a mental reaction that I shouldn't waste precious cum, but also a physical reaction as well as my body just guided me to the yummy goo. \n\nI licked it all up, satisfying my cum hunger before a light bulb went on in my head. \n\nWhat the fuck was I doing? \n\nWhy was I getting turned on by cock? \n\nWhy was I craving cum? \n\nWhy did Rose want me to watch these videos? \n\nI closed my laptop, disgusted with myself. \n\nI was no cocksucker. \n\nI sure as hell wasn't some faggot. \n\nI was done with these videos and done with Rose. \n\nI went and had a cold shower, needing desperately to cool down. \n\nI needed to fuck some hot slut... now. \n\nI needed to regain my manhood. \n\nOnce out of the shower, I texted one of my MILF sluts. \n\nI'm on my way over! \n\nAs expected she replied back: \n\nI'll be waiting. \n\nI had often gone over there in the mornings, after her husband was gone to work to deposit a morning load in either her mouth, pussy or ass... I had learned that lonely housewives are the biggest sluts... but also the most eager... the most submissive... and the most experienced. \n\nMrs. Parker was no exception... actually she was the poster child for housewife sluts. \n\nI got to her house and walked right in. \n\nI hadn't actually gone over to her house in over a month, but this was around my twentieth visit and, as expected, she was ready for me in a nightie and nothing else... her big, slightly sagging tits, barely held in by the black lace lingerie. \n\n\"Where have you been?\" she asked, as she moved to me and dropped to her knees. \n\n\"Fucking high school sluts,\" I answered. \n\nAs she fished out my cock, she sighed, \"Why do you waste your time on those inexperienced bimbos when you can have me whenever you want?\" \n\n\"I like variety,\" I shrugged, as she took my limp dick in her mouth. \n\nShe was a great cocksucker and took her time as I hardened in her mouth. \n\nShe purred, after a couple of minutes, \"God, I love your cock.\" \n\nAs she said that, my mind betrayed me, as visions of the past few videos I watched flashed in my head. \n\nTrying to be manly, I ordered, \"And I like dirty MILF ass whores. Now bend over the couch, I'm going to ream that asshole of yours.\" \n\n\"Mmmmmm, we're horny today,\" she purred, quickly deep throating me, before she stood up and got in the position ordered. She was a very submissive, obedient little slut. \n\nUsually, I enjoy a lengthy blow job first, but today I needed a rough fuck and no one enjoyed one like Mrs. Parker, who could take my cock roughly in her mouth, pussy and ass. \n\nToday I was going to destroy her ass. \n\nI agreed, \"Today I'm going to fuck the living shit out of you.\" \n\n\"Literally,\" she laughed, as I moved behind her and slid into her ass. I loved that she lubed her ass before I came over. Like I said, she was that big of a slut. \"Oh yes, God your cock is so fucking perfect.\" \n\nWanting to reclaim my manhood, I fucked her... hard. So hard the couch began sliding forward. \n\n\"Oh, God,\" she moaned, \"Ream my asshole, you nasty mother fucker.\" \n\nAnd I did. \n\nAnd it felt so good... to be back in charge. \n\nHaving shot my load less than an hour ago, I was in for a long, reclamation fuck. \n\nIt felt great to feel like my old self... to be back in charge. \n\n\"Oh fuck, this is the best fuck ever,\" Mrs. Parker moaned loudly, as her one hand frantically rubbed her clit. \n\n\"You going to come from getting ass fucked?\" I asked, knowing she was... she had many times before. \n\n\"God, yes,\" she whimpered, \"you make me a complete come slut.\" \n\n\"I know I do,\" I smiled, feeling like a man. \n\nI fucked her ass for at least fifteen minutes and through two orgasms for the nasty ass slut before I finally found my balls boiling. I pulled out and ordered, \"Knees, slut.\" \n\nEven though I had never shoved my dick in a girl's mouth after poking her ass, I was in a zone and wanting to prove my manhood to myself. \n\nShe obeyed, like the submissive slut she was, and I slid my pulsing cock in her mouth. I fucked her face hard, my balls bouncing off her chin, the sounds of slobbering echoing through the room until I deposited my load down her throat. ",
        "Once done, I pulled out and she said, \"Wow, that was unexpected.\" \n\nI shrugged, \"I knew that was what you wanted.\" \n\n\"You know me so well,\" she said, leaning forward and taking my cock back in her mouth. \n\n\"I'm late for school,\" I said, as I began to get dressed. \n\n\"Well, I'm always here for some physical education,\" she said. \n\nI laughed, \"You are quite the workout.\" \n\n\"And it burns a lot of calories.\" \n\n\"And the protein shake at the end is good for you.\" \n\n\"I couldn't agree more.\" \n\nI headed out, went to school and had a great day until last class. Gym. \n\nIn the change room, for the first time ever, I couldn't help but check out other guy's cocks. \n\nMy buddy Mike had a short one, but thick. \n\nMy other buddy in my class, Eddie, had a long one, but thin. \n\nI tried to be sly, but I looked at almost all my classmates. \n\nThe black cock theory was pretty true as all three black classmates had impressive cocks... all bigger than mine. \n\nBut the biggest cock, was the biggest surprise... Eugene. It was fucking huge... like a third leg. \n\nI couldn't help it, but I stared at it... too long. \n\nWorse... I felt my own cock getting hard. \n\nMortified, I quickly went to a stall to hide my growing cock. \n\nI jerked off, quickly, to get rid of my erection, knowing that the videos I was watching were definitely having an influence on me. \n\nI was even more determined to end this thing with Rose... pussy wasn't worth it. \n\nAfter school, I got a text from Rose: \n\nWhat number have you watched to? \n\nThis was my chance. This was my opportunity to break the hold she seemed to have over me. \n\nI replied: \n\nI watched six this morning, but I'm not watching anymore. \n\nShe replied: \n\nYou sure. \n\nOnly four more. \n\nAnd the last one, we will watch together. \n\nTomorrow night. \n\nAre you ditching me? \n\nFuck! \n\nGod, I wanted her. \n\nI wanted to find a way to break her spell over me. \n\nI replied: \n\nI'm not ditching you. \n\nI just don't want to watch the videos. \n\nShe replied: \n\nWatch videos 7-9 in a row tonight and don't come until you're done. \n\nThen be at my dorm room at exactly six. \n\nOr don't. \n\nThen watch Q2 in the morning. \n\nObey! \n\nAnd I will give you what you really want!! \n\nI sighed. Read the word 'Obey;'... and recalled the word used more than once in the videos. \n\nI texted back, a couple of minutes later: \n\nI'm not sure. \n\nBut, she never responded back. \n\nThat night, at a party I got drunk. \n\nI flirted. \n\nI made out with three different girls. \n\nAnd I was closing in on a cute blonde from the rival school. \n\nYet, every time I kissed a girl it was Rose that popped into my head. \n\nIn the end, I knew I had to see her again. \n\nI'd watch the videos, control myself and then... \n\nI left the party early, rejected a sexy blonde who was more than willing to fuck me, and headed home. \n\nOnce home, I got into bed, got back up and locked the door, got back into bed, turned on my laptop, put my headphones on and clicked on video 7. \n\nThis one was shorter. Under five minutes and mostly in slow motion. \n\nA young redhead on her back with the words LIE BACK crossed the screen. \n\nA brunette with a blindfold... a cock tracing her lips with the word RELAX. \n\nA blue eyed blonde with a cock sliding in and out of her mouth and the words JUST BREATHE. \n\nA blonde with a ponytail on her knees sucking cock with the word OBEY. \n\nA chubby girl with huge tits swaying on all fours with the words EMPTY YOUR MIND. \n\nAn older MILF with a few loads all over her face with the word ACCEPT. \n\nAn Asian stroking two cocks while sucking another with the words JUST BOB. \n\nA big bootied Latina getting fucked by one big cock while she sucked another with the word OBEY. \n\nA teacher on her chair with a big dick in front of her on her desk with the words OBEDIENCE IS PLEASURE. \n\nA blonde cheerleader, still in uniform, holding pom poms, as a cock tapped her lips and she kept trying to get it in her mouth with the word MINDLESS. \n\nA MILF with three loads spraying into her mouth simultaneously with the words JUST SWALLOW. \n\nA nurse sucking a well hung man while a woman was asleep in the bed with the word OBEY. \n\nA pretty blonde with purple streaks in her hair, on her knees getting dp'd while taking two loads of cum all over her face with the words THIS IS YOUR NEW REALITY. \n\nA white woman in a maid's outfit getting dp'd by two black cocks while sucking on another with the word SLAVE. \n\nA black girl furiously sucking on a white cock, deep throating it completely with every bob with the words JUST SUCK. \n\nA brunette with pigtails, in a church confessional, sucking a cock through a glory hole again with the word OBEY. \n\nThis is why God created you. \n\nTo suck cock. \n\nOBEY This is your purpose in life. \n\nTo swallow cum. \n\nOBEY \n\nThis is what you were born to do. \n\nOBEY \n\nOBEY \n\nOBEY \n\nAs it ended, I couldn't help but notice how many times the word obey was used. Coincidence or purposeful, based on the last texts from Rose. \n\nYet, I had to admit it, I felt compelled to obey. \n\nI texted her: \n\nI watched seven, moving on to eight. \n\nI clicked on the eighth video, another short one, my cock rock hard, curious what this video would be about. \n\nUnlike most of the videos, this one had no words crossing the screen, just a sexy voice talking over videos of girls sucking cock. \n\nThe first few videos were again in slow motion as the woman spoke in a slow, relaxing way. \n\nJust look at that cock \n\nThe cock created just for you \n\nYou want that dick \n\nThat big hard dick \n\nIn your mouth. \n\nJust stare at the cock \n\nThe cock God created for you to serve \n\nOn your knees \n\nEager to please \n\nWith your mouth. \n\nYou want to suck it \n\nYou want it in your mouth \n\nYou need it between your lips. \n\nEveryone has a desire to suck \n\nAn insatiable lust to suck \n\nA burning desire to suck. \n\nYou crave that cock \n\nAccept that this is who you are. \n\nA cocksucker. \n\nLean forward and take it in your mouth \n\nSlowly \n\nEver so slowly \n\nBegin bobbing on that cock \n\nThat big hard cock. \n\nFeel its strength in your mouth \n\nIts pulsations \n\nThis is what you were born to do \n\nSuck cock \n\nBig hard cock. \n\nGet used to it in your mouth \n\nThen go faster \n\nShow him how much you love pleasing him \n\nSucking his cock \n\nHis big hard cock. \n\nSuddenly I got a text. \n\nGood boy. \n\nPause the video and call me now. \n\nI instantly did, dying to hear her voice. \n\n\"Hey, sexy,\" she purred, sounding as sultry as the voice on the video. \n\n\"Hey, baby,\" I responded back. \n\n\"Enjoying the videos?\" she asked. \n\n\"They are interesting,\" I answered. \n\n\"They are supposed to help you understand what it is like to be a girl,\" she explained. \n\n\"Oh,\" I said, finally getting it. \"That makes sense.\" \n\n\"I want a man who is comfortable with his sexuality,\" she continued. \"A man who can give and receive.\" \n\nI wasn't sure what receive meant, but agreed, wanting her so badly, \"I can be whatever you want me to be.\" \n\n\"That's what I want to hear,\" she said, with a moan. \"Now finish watching the video, sexy.\" \n\nI resumed watching, the voice really drawing me in. So much that the girls sucking cock were in the background. I saw them, but I saw the cocks so much more. \n\nI know it was weird... but I couldn't stop. \n\nI had to admit... the idea of sucking cock was beginning to intrigue me. \n\nFeel that cock sliding in and out of your mouth \n\nDoesn't it feel soooo good? \n\nIt's so natural to have a cock in your mouth. \n\nAnd now you want his cum \n\nHis thick load of cum \n\nSliding down your throat \n\nOr exploding all over your face. \n\nBecause you are a cock slut \n\nA cock slut for him \n\nA cum slut for him. \n\nSay it after me \n\nI love cock. \n\nSay it! \n\nI love cock. \n\n\"Say it, sexy,\" Rose said. \n\n\"I love cock,\" I said, feeling completely at her will. \n\nI crave cum \n\nThick creamy cum. \n\n\"I crave cum, thick juicy cum,\" I repeated, my mouth watering as I watched load after load shoot into girl's open mouths. \n\nI was born to suck cock \n\nBig, thick, juicy, hard cock. \n\nI again repeated, as Rose did at the same time, \"I was born to suck cock. Big, thick, juicy, hard cock.\" \n\nYou're now a cocksucker. \n\nAnd the video faded to black. \n\nI shook my head, realizing what I said, \"That was a bit strange.\" \n\n\"It was fucking hot,\" Rose said. \n\n\"I guess.\" \n\n\"Are you hard?\" \n\n\"Yes,\" I admitted. \n\n\"Why?\" she asked. \n\n\"I don't know,\" I answered, before adding, \"I just watched ten minutes of girls sucking dick.\" \n\n\"Exactly,\" she said, not expanding her thought. She then said, \"Let's watch number nine together.\" \n\n\"Okay,\" I said. \n\n\"Press play in three, two one, go,\" she ordered. \n\nI did. \n\nThe video started with a gorgeous girl on her knees, looking hungrily at a big cock she was stroking. \n\nThe words that came on the screen: You have an intense craving for cock \n\nAnother girl slid her tongue up the hard shaft: \n\nYou have an uncontrollable urge to eat cum \n\nA close-up of a huge black cock slamming into the mouth of a petite young girl: \n\nYour purpose is to taste and swallow fresh cum from a big hard dick \n\n\"Fuck, that is a gorgeous cock,\" Rose chirped in as I watched the black cock furiously face fuck the girl. \n\n\"It's pretty impressive,\" I agreed, wishing my cock was that thick and big. \n\nA girl's face coated in tons of cum as another load splattered her face: \n\nYou were born to eat multiple loads of cum every day \n\nA girl licking a big puddle of cum on the floor: \n\nYour role in life is to feed on thick gooey cum \n\n\"I've witnessed cocksuckers doing that,\" Rose said. \n\n\"Really?\" I asked, the idea hot, but not something I had ever seen. \n\n\"Oh yeah, real cock sucking sluts will do anything for cum,\" she explained. \n\n\"I can't imagine,\" I said. \n\n\"Can't you?\" she questioned. \n\nI didn't answer as I wasn't sure what to say. Instead I resumed watching the video. \n\nA chubby girl on her knees furiously bobbing on a thick cock: \n\nYour most natural position is on your knees worshipping cock after cock \n\nA girl surrounded by six cocks, stroking two while sucking one: \n\nNothing is better than being surrounded by big, hard, juicy, cream shooting cocks \n\n\"Have you ever been part of a bukkake?\" she asked. \n\n\"No,\" I admitted, as I watched another load splatter the girl's face. \n\n\"It's super fucking hot,\" she said, moaning again softly. \n\n\"Does bukkake turn you on?\" I asked. \n\n\"Oh yeah,\" she moaned again. \n\nA teacher on the floor in her classroom with four students all pumping their cocks and aiming at her: \n\nAlways keep your mouth open wide \n\n\"Look how eager she is,\" Rose pointed out. \n\n\"I wish my teachers were that hot,\" I said. \n\nAnother girl with her mouth wide open, in a library, which somehow made it even hotter, three guys furiously pumping their stiff missiles: \n\nYou're eagerly and impatiently waiting for that sweet man made cream \n\nA girl with her tongue extended and catching a thick white load: \n\nStick out your tongue to catch all that yummy, yummy, cum \n\nA nerdy girl in glasses catching a full load in her mouth, showing it to the camera and then swallowing: \n\nTaste that tantalizing load of salty warm cum \n\n\"Mmmmmm, that is so hot,\" Rose purred. \n\nA blonde girl wearing a ball cap backwards in a change room swallowing one load and then going to a second cock: \n\nOne load is never enough for a cocksucker like you \n\nA girl on her back in a bed getting multiple loads in her mouth and on her face: \n\nYou're starving for cum... load after load of cum \n\nAnother girl taking multiple loads, this time on a beach: \n\nEach full load you swallow makes you crave cum even more \n\nA girl coated in cum licking a plate full of cum: \n\nCum is a food group for a cocksucker like you \n\nA hot woman in a wedding dress, on her knees with four cocks all aimed at her face: \n\nNothing is better than cocks aimed straight at your open mouth \n\n\"I'd like to have been at that wedding,\" Rose said. \n\n\"Me too,\" I laughed. \n\nA super-hot redhead drinking a cup of cum: \n\nYou are now a cum addict \n\n\"This part gets wild,\" Rose informed me as the style changed. \n\nWords flashed on the screen every couple of seconds with tons of pictures of girls getting coated in cum. \n\nDo it! \n\nFeed on hard cock \n\nYou \n\nLove the taste \n\nCum \n\nCock every day \n\nWorship \n\nCum \n\nFlowing down your throat \n\nYOU'RE A COCKSUCKER \n\nYou can't get enough \n\nBig hard cock \n\nYou were born to suck cock \n\nEat cum \n\nOpen up wide \n\nMore loads \n\nMore cock \n\nSquirting in your cock sucking mouth \n\nYou moan like a slut as he comes in your mouth \n\nYOU'RE A COCKSUCKER \n\nSalty \n\nSweet \n\nDelicious \n\nThe unique texture \n\nThick \n\nSlippery \n\nCreamy \n\nOnce one cock finishes in your mouth \n\nAnother cock replaces it \n\nYOU'RE A COCKSUCKER \n\nPushing straight down your throat \n\nThis feels so right \n\nCum on your face \n\nCum in your mouth \n\nCum in your belly \n\nYOU'RE A COCKSUCKER \n\nThis is your destiny \n\nCum slut \n\nDevote your life to your addiction \n\nCum slut \n\nCum junky \n\nEat semen \n\nSwallow cum \n\nYOU'RE A COCKSUCKER \n\nYou are doing what you were born to do \n\nYou are on your knees in the position you are meant to be \n\nEveryone has an innate urge to suck \n\nTo bob \n\nTo swallow \n\nSweet cum \n\nGooey cum \n\nSalty cum \n\nYOU'RE A COCKSUCKER \n\nWorship the greatest gift God created \n\nFor you \n\nCock \n\nBig cock \n\nHard cock \n\nThick cock \n\nJuicy cock \n\nIt's so natural \n\nYOU'RE A COCKSUCKER \n\nI was stroking my cock slowly, my balls boiling. \n\nRose said, \"This part is really hot.\" \n\nThe video changed to a brunette sucking a big cock. \n\nYou are her \n\nImagine that is you on your knees \n\nSucking that juicy cock \n\nYou are her \n\nYou need cock \n\nYou need to become a cock worshipping cum slut \n\nYou are her \n\nYou are in love with cock \n\nYou are in love with cum sliding down your throat \n\nYou are her \n\nCraving that big hard juicy cock \n\nCraving the seed only a man can give you \n\nYou are her \n\nYour mouth exists \n\nOnly \n\nTo please cock \n\nTo eat cum \n\nTo serve \n\nYOU'RE A COCKSUCKER \n\n\"Pause it,\" Rose ordered. \n\nI did. \n\n\"Ready to come with me, baby?\" Rose asked. \n\n\"God, yes,\" I answered, never wanting to come more than I did at this moment. \n\n\"Don't come until the video tells you,\" she ordered. \n\n\"Okay,\" I agreed, \"but that won't be easy.\" \n\n\"There are only a couple of minutes, maybe less, left, baby,\" she purred. \"And I want you to come with me. Can you do that, baby?\" \n\nHer sexy voice, her constant use of 'baby' had me so horny. I agreed, \"Yes.\" \n\n\"Press play on the video and get ready to erupt,\" Rose said. \n\nI pressed play and the video again changed to short quick phrases with every video being a girl with an open mouth with cum being deposited in it. \n\nEat cum \n\nBeg for more \n\nGag on cock \n\nCum addiction \n\nTease \n\nLick \n\nSuck \n\nSwallow \n\nCum \n\nStroke \n\nFacial \n\nKnees \n\nCrave \n\nGaze \n\nSperm \n\nSissy \n\nFeed \n\nSavor \n\nSalty \n\nFate \n\nSlave \n\nGirly \n\nCock \n\nJunky \n\nWhore \n\nObey \n\nSwallow \n\nTrain \n\nShaft \n\nPump \n\nSlut \n\nFacial \n\nCOME NOW \n\nCOCKSUCKER \n\nC \n\nO \n\nC \n\nK \n\nS \n\nU \n\nC \n\nK \n\nE \n\nR \n\n\"Come now, baby, come into your hand for me,\" she moaned. \n\n\"Yes,\" I grunted, permission given I pumped my cock furiously and immediately shot my load into my open hand. \n\n\"I'm coming,\" Rose screamed, simultaneously with my orgasm. \n\nOn the video a girl was taking load after load on her face as the final words lingered on the screen: \n\nYOU ARE A COCK SUCKING CUM SLUT \n\n\"Is your cum in your hand, baby?\" she asked. \n\n\"Yes,\" I admitted, looking at the yummy load in my hand. \n",
        "\"Will you do something for me?\" she asked. \n\n\"Anything,\" I replied, so completely intoxicated with her. \n\n\"Wipe that cum all over your face,\" she ordered. \n\n\"Really?\" I asked, surprised by what she had requested. \n\n\"Yes, baby,\" she moaned. \"Wipe that yummy load all over your face, just like you can do to me tomorrow night.\" \n\nSomehow I felt compelled to obey; plus, I was curious what cum felt like on my face like the girl frozen at the end of the video with a few loads on her. \n\n\"Okay,\" I said, taking my hand full of cum and moving it to my face. \n\nI rubbed the cum all over my face, feeling strange and yet intrigued. \n\n\"Oh yes, baby, take that facial,\" she purred. \n\nAnd I suppose that was what I was doing in a strange way. \n\n\"Send me a picture,\" she said. \n\n\"I'm not sure I can do that,\" I said. \n\n\"Oh baby, please, I'll make it worth your while,\" she promised, her tone dripping with sexy naughtiness. \n\n\"I guess,\" I said. \n\n\"And I'll send you a picture of the cheerleading slut that is between my legs right now in return,\" she added. \n\n\"There is a girl there?\" I asked, the idea both shocking and yet hot. \n\n\"Yes, now send the picture, baby,\" she demanded. \"I want to see my man being so vulnerable.\" \n\n\"Okay,\" I said. I put my camera on, put it to selfie and looked at my face. My face was glistening. I took the picture and sent it before I could change my mind, the idea of seeing a picture of a girl between her legs the motivation I needed. \n\n\"Hmmmm, yummy,\" she purred. \"Here is one in return.\" \n\nI received a text with a picture of a cheerleader, a cheerleader I knew, Camry, with her tongue extended. \n\n\"Wow!\" I said. \n\n\"Yes, she is a very eager beaver,\" she said. \n\n\"So I see,\" I chuckled. \n\n\"I need to go and fuck her with a strap-on, so I'll see you tomorrow at six. Don't be late,\" she said. \n\n\"That I would like to see,\" I said. \n\n\"Me in a strap-on?\" she teased. \n\n\"Yes.\" \n\n\"Good to know,\" she said, before hanging up. \n\nI went and washed my cum off my face and went to bed looking forward to finally fucking Rose tomorrow. \n\nThere was also a text from her: \n\nRe-watch your favourite video tomorrow at four exactly, then Watch Q2 and do exactly as it says. \n\n... \n\nSo at four, I obeyed. \n\nI chose the original good girl vs bad girl one, because I loved the two competing voices going head to head (which I realize is an amazing pun). \n\nMy cock was dying for attention by the time it ended. \n\nI then started the final clip on the USB... Q2. \n\nIt was slow motion pictures of cocks shooting their loads onto girl's faces. The slow motion made the cock look majestic: like a magical cannon. The white gobs came out in a variety of ways: each unique and enchanting. The girl's face getting splattered was sexy and thrilling... all the while a girl's voice I recognized... undeniably Rose's, spoke as words came on the screen. \n\nLook at that wonderful cock \n\nLook at it \n\nIsn't it beautiful? \n\nLook at the long hard shaft \n\nLook at it \n\nDon't you want it in-between your lips? \n\nLook at the thick mushroom top \n\nLook at it \n\nDon't you want to feel it stretch your mouth? \n\nLook at the cum rocket out of that majestic phallus \n\nLook at it \n\nIsn't it beautiful? \n\nLook at the cum flying in mid-air \n\nLook at it \n\nDon't you want to catch it? \n\nLook at the thick, white, and appetizing cum \n\nLook at it \n\nDon't you want that in your mouth, in your belly? \n\nLook at that girl on her knees \n\nLook at her \n\nDon't you wish that was you? \n\nLook at that girl with her mouth wide open \n\nLook at her \n\nDon't you want to replace her? \n\nLook at that girl coated in delicious cum \n\nLook at her \n\nDon't you want to feel the hot semen painting your face? \n\nNow stroke that cock of yours \n\nIt's hard isn't it? \n\nStroke it as you imagine being on your knees \n\nSucking that cock \n\nCatching that cum \n\nBecoming the cocksucker you were born to be. \n\nNow repeat after me as you focus on the big, juicy, hard, enticing, addicting cock. \n\nI heard the words, I understood the transformation that was happening, and I knew I should resist... yet, at the moment I was so completely mesmerized by Rose's words and by the big cocks, that I just obeyed mindlessly. \n\nI want to suck cock. \n\n\"I want to suck cock,\" I declared, staring at the current black cock shooting a load in the air and towards a pretty girl's open mouth in utter slow motion. \n\nI want to suck cock after cock. \n\nAnd as a girl servicing multiple cocks showed up on screen, I repeated, \"I want to suck cock after cock after cock.\" I didn't even realize I had added an extra 'after cock' as I imagined being the girl on her knees. \n\nI want to swallow loads of creamy... salty... sweet... cum. \n\nMy mouth watered, as dozens of pictures of girls getting cum sprayed directly in their mouths flashed across the screen. I repeated, like a bimbo, \"I want to swallow loads of creamy, salty, sweet cum.\" \n\nI want a warm, sticky load of cum splattered all over my pretty face. \n\nWatching girls get coated in an abundance of cum, I couldn't help but be curious what it would be like to get a facial or facials. I declared, \"I want a warm, sticky load of cum splattered all over my pretty face.\" \n\nI want to be a submissive, obedient, cock craving cum slut. \n\nAnd as I watched girl after girl suck cock and get splattered in cum, I wanted to be that girl. I declared, \"I want to be a submissive, obedient, cock craving cum slut.\" \n\nAre you ready to come, cocksucker? \n\n\"Fuck, yes,\" I said to Rose's voice. \n\nWant hot creamy cum all over your face? \n\n\"Yes,\" I mindlessly said, willing to agree to anything she had to say... and, truth be told, I was curious what a facial would feel like. \n\nThen get in this position. \n\nI stared at the photo. It was a guy with three pillows lifting his ass up, his head bent forward, so his cock was aimed directly at his face. \n\nI wasn't sure I could do that, flexibility wasn't my strongest suit. \n\nAre you in position yet? \n\nIf not, pause the video until you are. \n\n \n\nWe both know you want a nice warm load of jizz on that face of yours. \n\nAnd as strange as it was, I did. \n\nI liked the taste of my own cum... much to my surprise. \n\nI liked the feel of cum on my face when I rubbed it all over myself... again, much to my surprise. \n\nI would likely enjoy a fresh warm load shot directly at me. So, I got into the position, which was indeed awkward. \n\nAnd with some impressive contortion, I had my cock just inches from my mouth. \n\nI wondered if flexible guys could suck their own cock. That would be super cool. \n\nThen I pressed play, as I resumed stroking my hard cock. \n\nSuddenly a pretty blonde looked directly in the camera and spoke, although the voice speaking was Rose. \n\nPump that cock. \n\nGet it ready for eruption. \n\nKeep that mouth wide open. \n\nTell me you want that cum. \n\n\"I want my cum so badly,\" I declared, furiously stroking my cock. \n\nTell me that you're just a slut for man cum. \n\nI didn't hesitate even though the words sounded so gay. \"I'm a cum hungry slut for creamy man cum.\" \n\nCome for me now, cocksucker. \n\nCome all over that pretty face. \n\nTaste that creamy man made cum. \n\nMade just for you. \n\nCome and taste the sweet salty seed. \n\nCome now, faggot. \n\n\"Fuck,\" I groaned, my balls erupting and a massive rocket of cum shooting out of my cock and hitting me directly in the eye and forehead, even as I heard her call me the most derogatory name one can call a man. \n\nI couldn't believe how warm the cum was as it hit me. \n\nCome now, cum bucket. \n\nThe second rope hit me right in the nose and upper lip. \n\nCome now, cum deposit. \n\nThe third rope went directly in my mouth and I eagerly swallowed the warm, gooey, salty, and strangely textured cum. A taste that was even better directly from the source and I instantly wished I could have caught my entire load... as I wanted more. \n\nThat's it, swallow your cum you fucking cum slut. \n\nThe last rope landed on my chin and chest, my intense orgasm finally finishing its lengthy journey. \n\nMy head collapsed back onto the bed as she purred. \n\nSuch a good boy. \n\nSuch a good cocksucker. \n\nI lay there, completely spent for a good five minutes, my body still enjoying the afterglow of pleasure. \n\nMy mind, though, was spinning with the reality that I had just given myself a facial, that I had come exactly when I was called a 'faggot' and that my eye was suddenly stinging. \n\nI learned, the hard way, that getting cum in your eye stings like hell. \n\nI got up, got dressed, wiped the cum off my face and chest with a t-shirt and went to the bathroom. \n\nMy left eye looked like I had pink eye. \n\nI sighed as I washed my face thoroughly, especially my eye. \n\nThe stinging faded, but the rash, or whatever it was, was still there. \n\nLooking at the clock, I realized I was going to be late. \n\nI texted: \n\nOn my way. \n\nI quickly changed into a nice pair of jeans and a blue t-shirt that showed my very impressive six pack and headed over. \n\nI drove over, excitement and confusion coursing through me. \n\nI had now eaten my cum, declared myself a cocksucker and given myself a facial... it had been a weird past few days. \n\nBut... it would all be worth it... if I got to fuck Rose. \n\nI got there, my cock already hard with anticipation, and knocked on the door. \n\nRose yelled, \"Come in.\" \n\nI entered and my already hard cock flinched in my pants when I saw that Rose was in lingerie. A black nightie, with a garter belt and matching black stockings and high heels. \n\nShe saw my eye and laughed softly as she asked, \"Didn't close your eye?\" \n\n\"No,\" I admitted. \n\n\"It will go away in a few hours usually,\" she explained. \n\n\"Good, to know,\" I nodded, the conversation already surreal and odd. \n\nShe smiled, \"Did you enjoy the last video?\" \n\nI nodded, feeling my cheeks burn with shame, \"It was different.\" \n\n\"Did you obey the commands I gave?\" she asked, walking to me in the fucking sexiest way ever. \n\nI put my head down. \n\n\"Don't be ashamed, baby,\" she said, as she reached me and put her hand on my throbbing cock. \"I find men sexy only when they are willing to explore every aspect of their sexuality.\" \n\n\"Really?\" I groaned, her touch sending sparks through my very being. \n\n\"Yes,\" she purred, as she dropped to her knees and fished out my cock. \n\nI couldn't believe it was finally happening. \n\nI watched her lean forward and take my cock in her mouth. \n\n\"Oh God,\" I groaned, the velvet warmth of her mouth sending waves through me. \n\nAnd although I had had many blow jobs in the past, many amazing blow jobs in the past, this one was the best yet. \n\nMaybe because the past few days had been so surreal and intense. \n\nMaybe because I had been anticipating this for the past week. \n\nOr maybe she was just an amazing cocksucker. \n\nI was thankful I had come just an hour ago or I would have shot my load in seconds. \n\nAfter a couple of minutes, she quit. \n\nShe stood back up and said, \"Ready for the final video?\" \n\n\"I watched them all,\" I said. \n\n\"Oh, that was only USB one,\" she said, leaning in and kissing me. \n\nHer lips created their own electricity. \n\nWhen she broke the kiss, I asked, curious, having been somewhat disappointed that I had watched all the videos from the USB she gave me (each one like a new present to unwap), \"How many USB's are there?\" \n\n\"Four training USB's,\" she revealed, \"although I have many other videos that are just for fun,\" she continued, kissing me again before finishing, \"like tonight.\" \n\n\"Oh,\" I said. \n\n\"So did you do exactly what the last video ordered?\" she asked. \n\nI nodded, \"Yes.\" \n\n\"How did it feel?\" \n\n\"Weird.\" \n\n\"And?\" \n\n\"Kind of cool,\" I admitted. \n\n\"Good,\" she nodded. \"Becoming one with your sexuality means being vulnerable, being a risk taker, and willing to just let go and explore who you are.\" \n\n\"I think I've explored a lot of my sexuality this week,\" I said. \n\n\"Oh, that is just a start,\" she smiled. \n\n\"I can't imagine what else there is,\" I said. \n\n\"Oh, if you trust me, I will take you to places you didn't even know existed inside your conscience,\" she said, as she took my cock and led me to the couch. \n\n\"Get undressed,\" she ordered, as she went to her computer, which I learned was hooked up to her television. \n\nI got undressed, anticipating an amazing night. \n\nOnce naked, I sat down and she sat beside me. \n\nShe asked, \"Ready?\" \n\n\"I was born ready,\" I joked. \n\n\"You were born for something,\" she quipped back, as she pressed play on the video and reached over and stroked my cock. \n\nThe title came on. \n\nGood Girl vs Bad Girl (Alternate Version) \n\nLike the one I had watched twice, most recently less than two hours ago, it had the dual voices, competing against the temptation of cock sucking. \n\n\"I just watched this one,\" I revealed. \n\n\"It's one of the best,\" she nodded, her finger just rolling around my mushroom top. Sometimes the words seemed to be the same, or similar, and other times it was new. \n\nVoice 1: On your knees, cocksucker \n\nVoice 2: Don't be a bad girl, you're a good girl \n\nLook up at that big juicy cock \n\nDon't get drawn in by the majestic penis \n\nText: This is your true purpose in life \n\nReach up and stroke the hard man meat \n\nDon't allow your hunger to control you \n\nFeel its amazing strength in your hand \n\nDon't allow him to steal your sweet innocence \n\nYou were born to worship cock \n\nRose paused the video. \n\n\"I love the slow pacing of the video,\" Rose said, her hand ever so gently stroking my cock. \n\n\"I love the dual voices,\" I said, before adding, \"they both drip with naughtiness.\" \n\n\"I know, they both sound like phone sex operators,\" she said. \n\n\"You know this how?\" \n\n\"I just know,\" she smiled, pressing play and bending down to lick the shaft of my cock. \n\nI groaned as her tongue slithered up and down my cock. \n\nLean forward and take that mushroom head in your mouth \n\nYou're not a cocksucker \n\nEnjoy that cock slowly going in your eager mouth \n\nDon't enjoy it, you're a good girl \n\nYour mouth waters at the sight of a juicy cock \n\nRose's tongue meandered so randomly, up my shaft, down my shaft, swirling around my cock head... driving me wild. \n\nFeel it harden in your mouth because of you \n\nDon't let it get hard in your mouth \n\nFeel the manhood become a fuck stick \n\nDon't let it stiffen in-between your sweet pretty lips \n\nYou were put on this earth to be a cum deposit \n\nFeel it pulsing and throbbing in your mouth \n\nDon't... don't let it pulse in your mouth \n\nFeel the veins as the blood rushes to the tip of the cock \n\nDon't ... don't allow yourself to give in to the temptation \n\nYou are exactly where the great Lord planned you to be \n\nRose took my cock in her mouth and deep throated me... something very few women had been able to do. \n\nNow start bobbing on that big juicy stiff cock \n\nDon't allow yourself to get aroused \n\nTake that entire man stick in that cock sucking mouth \n\nControl yourself, resist the temptation \n\nYour body craves the sweet taste of cum \n\nCome on you little cock sucking whore \n\nTake that big cock in your mouth \n\nDon't do it, don't become a cocksucker \n\nYou crave the taste of cock \n\nYou crave the taste of cock \n\nYou crave the taste of cock \n\nYou enjoy worshipping it \n\nResist the growing temptation, you're a good girl, such a good girl \n\nYou must suck big hard dicks \n\nRose sat back up and paused the video. \n\nShe asked, \"Ready?\" \n\n\"Is your lingerie black?\" I joked. \n\n\"Funny you should say black,\" she smiled, as she reached for the phone and texted somebody. \n\nI was confused, but she resumed play and ordered, \"Now focus on the video.\" \n\n\"I'd rather focus on you.\" \n\n\"Just watch,\" she said, as she moved her hand back to my throbbing cock... fuck, she was a tease. \n\nWorship it \n\nEnjoy it \n\nFeels so good \n\nFeels so right \n\nSo natural \n\nThis is where you were meant to be \n\nOn your knees \n\nOn your knees \n\nOn your knees \n\nFight it! \n\nGood sluts live on their knees \n\nMake him cum in your mouth \n\nDown that slutty throat \n\nMake him shoot his load in your mouth \n\nAnd warm your belly \n\nOpen your mouth wide \n\nResist with everything you have, you're not a cum whore \n\nAt the count of ten he is going to come in your mouth and you are going to come too \n\nYou're going to feel his semen, his hot semen \n\nDon't let him or you'll be aroused forever when you see a big juicy dick \n\nNothing matters but pleasuring the cock before you \n\nYou're going to feel semen fill your mouth \n\nCatch his jizz on your tongue \n\nSavour the sweet taste \n\nSwallow that hot, hot, hot, cum \n\nDon't let him cum in your mouth, you're a good girl and good girls don't suck cock, they don't eat cum \n\nWhen he comes, you're going to come \n\nBecause cocksuckers get the most pleasure from making others come \n\nCocksuckers were born to please \n\nTo serve \n\nTo suck \n\nTo swallow \n\nCocksucker \n\nCocksucker \n\nCocksucker \n\nYOU'RE A COCKSUCKER!! \n\nSo much arousal, \n\nWhen he comes you're going to feel so much pleasure \n\nPleasure unlike any you have ever experienced in your life \n\nAs you understand your purpose in life \n\nIt's so fun to be a bad girl \n\nA very good bad girl \n\nA very good cocksucker \n\nCocksucker \n\nCocksucker \n\nCocksucker \n\nDon't come, don't let him come in your mouth \n\nYOU'RE A COCKSUCKER!! \n\n\"Are you ready to begin your real journey to sexual liberation, baby?\" Rose asked as she paused the video right before the volcanic countdown. \n\n\"Yes,\" I whimpered, my cock ready to erupt at any time. \n\n\"James, come here,\" Rose said. \n\nTo my surprise, I turned to my right and a very built, black man was just a few feet away from me... and naked. I don't know why, but the first thing I did was glance down to his crotch area and gasp as I saw a huge black snake.., and it wasn't even hard. ",
        "\"Hey, baby,\" he said, his voice so deep, as he walked over to us. \n\nWhen he was in front of us, Rose took the massive cock and said, \"What do you think?\" \n\nI joked, \"That would destroy most girls.\" \n\nJames roared, \"I like him already.\" \n\n\"Go ahead,\" Rose offered, \"touch it.\" \n\n\"I-um-well,\" I struggled, completely intoxicated by the massive beautiful cock in front of me. \n\n\"Go ahead, baby,\" she purred, taking my hand and guiding me to it. \n\nI didn't resist as I felt that this was where I was meant to be. \n\nI took it in my hand and was just in awe of its sheer girth, already imagining how much bigger it would be once hard. \n\nAfter a minute, even as my mouth betrayed me by watering, Rose said, \"James, stand beside him and let him stroke your cock while he watches the rest of the video. \n\n\"Sure,\" James nodded, moving beside me. \n\n\"Stroke his cock while you watch the rest of the video baby,\" Rose ordered. \n\nAnd I did, even as I wondered what it would feel like to have it in my mouth. \n\nTen: Suck it! Worship it! Adore it! \n\nResist it \n\nNine: Take it deep in your fucking throat \n\nDon't become a cocksucker \n\nEight: Imagine that semen flowing out of his cock and into your eager mouth \n\nResist, resist, resist \n\nSeven: The hot seed that only can be produced in the balls of a man \n\nShit, the cock looks so good \n\nI couldn't help it, but I glanced over to the big black cock I was stroking... a cock that was becoming indeed hard to resist. \n\nSix: Suck that hard juicy cock, worship the sheer perfection in front of you. \n\nDamn it, I can't take my eyes off it \n\nAnd I did again look at the massive cock that was getting harder in my hand. \n\nFive: Feel the hardness that you caused with that cock sucking mouth of yours \n\nFight it, fight it, fight it, fight it, fight it \n\nFour: Keep sucking it, your only purpose is to please a cock \n\nDon't be a faggot, don't be a faggot, don't be a faggot, don't be a faggot, don't be a little fucking cocksucker, resist \n\nEven as I was told not to be a faggot, the term that triggered my intense orgasm earlier today, I quit watching the video and turned to admire the cock before me. A cock I desperately wanted in my mouth. \n\nBut I didn't want to be a cocksucker. \n\nI didn't want to be a faggot. \n\nBut I did want to feel his cock in-between my lips. \n\nI did want to feel it harden in my mouth. \n\nMy mind and body were fighting internally... knowing that once I crossed the line there was no going back. \n\nThree: Come on, little cocksucker, you want nothing more than to be on your knees, sucking that beautiful cock \n\nOh fuck, you're going to become a cocksucker, aren't you? \n\nRose whispered, her hand back on my cock, her hot breath on my ear, \"Go ahead, baby, do what comes naturally.\" \n\nTwo: You want his cum, don't you? You want to be the perfect cocksucker \n\nDon't be a faggot, don't be a little cock sucking cum bucket, resist, don't be a faggot \n\nI couldn't resist any more. I leaned forward and took the semi-erect black cock in my mouth. \n\nInstantly, a wave of relief coursed through me as an instant reality set in... this was what I was born for. \n\nOne: You can literally feel the anticipation as his cock pulses in your mouth ready to ejaculate and give you the greatest present a man can give you... his cum \n\nResiiiiiiiist \n\nAnd God did I want to feel his cum rocket in my mouth as I ignored the good girl inside me and became the bad girl I was conditioned to be. \n\n\"That's so hot, baby,\" Rose purred, as she kissed the back of my neck. \n\nZero: He's coming all over your face, he's filling your mouth \n\nIt's too late, you're a fucking cock sucking faggot \n\nI was in awe of the sudden hardening of his cock in my mouth... it felt like I was a magician. I felt pride rush through me as it became a fully erect chocolate stick. \n\n\"That's it,\" Rose purred, \"let it harden in your mouth, baby.\" \n\nI no longer heard the sounds of the two women, just the soft moans from James and the whispers of Rose. \n\nThe cock was so thick that it really stretched my mouth. Yet, I wanted to be a good cocksucker as absurd as that sounds. \n\nOnce hard, I began to slowly bob back and forth, only taking a couple of inches at first as I tried to get used to having a cock in my mouth. \n\nIt felt completely natural. \n\nYet, it took time to get accustomed to a cock, especially such a huge thick cock, in my mouth. \n\n\"Take your time,\" Rose purred, just before I felt her mouth on my cock. \n\nThis only added to the incredible sexual sensation I was feeling. I was sucking one cock while having mine sucked. \n\n\"Deeper,\" James ordered, speaking for the first time. \n\nI obeyed, as with each forward bob I attempted to take more and more of his thick cock in my mouth. \n\nRose moved down and sucked my balls in her mouth, something I had only had done a couple of times. \n\nShe was edging me like crazy. \n\nJames ordered, \"Suck my balls, cocksucker.\" \n\nBeing called it on video was one thing, being called it in person was another. Yet, at the moment I was a cocksucker... and maybe I would be for the rest of my life. \n\nI obeyed, taking him out of my mouth and sliding my tongue down his shaft like I had seen in many of the videos. \n\nReaching his balls, his big balls full of man juice, his entire cock region completely shaved, I sucked the bag into my mouth and found a big ball. \n\nI tried to replicate what Rose was doing to me. \n\n\"Oh yes, suck on my balls, cocksucker,\" James groaned. \n\nHearing him groan made me excited, my cock flinching. \n\nI moved back and forth between both balls for a couple of minutes, and when Rose began moving back up my shaft, I did too. \n\nI took his cock back in my mouth and resumed sucking as Rose purred, \"You look so hot with a cock in your mouth.\" \n\nThat should have offended me. \n\nYet, instead it made me want to be an even better cocksucker. \n\nShe whispered, \"You want his cock sliding in and out of your mouth.\" \n\nAnd I did. \n\nJames took that as a cue and began slowly fucking my face. \n\nThis was a very different feeling than being the one doing the sucking. I felt sluttier, as if I was just his cum bucket. \n\nThat again made my cock flinch. \n\n\"You want his cum, don't you Brian?\" Rose whispered. \n\nI moaned on his cock in response. \n\n\"Because you're a natural little cocksucker. Be his little slut and take his big black cock. Make him shoot his jizz wherever he wants: down that eager throat of yours or all over that pretty face,\" she whispered, sounding like a voice in any one of the videos she had made me watch. Each sentence only enhanced my desire to be the perfect cocksucker. \n\nAs he began to go faster in my mouth, I gagged a bit. \n\nShe whispered, \"Just relax, Brian. A good cocksucker can take any cock that is provided to her.\" \n\nBeing called a'her' was new and yet at the moment all I cared about was getting this big black guy off. \n\nAfter a moment, Rose continued the nasty talking, \"Get him off and swallow his cum, Brian. This cum will taste delicious and you will want more and more. You'll crave cock. You'll be addicted to man cream. You love being his little slut, don't you?\" she continued, as she resumed stroking my cock. \n\nJames pulled out and I quickly replied, wanting that cock back in my mouth, \"Yes, yes, I want to be his cock sucking cum slut.\" \n\nJames slid his cock back into my mouth, going faster and deeper, again making me gag a bit. \n\nShe continued, \"Take it all, bitch. Do it how he likes. Just relax and let him fuck those cute puckered lips. Suck dick. Swallow cum. Be the mindless cum bucket you were born to be.\" \n\nGod, her words were driving me mad with lust and acceptance. \n\n\"Serve him, swallow his creamy load of cum, feel it slide down your throat. This is what you need: to serve big cock.\" \n\nAnd I couldn't agree more. \n\nJames's breathing was getting more stunted and I assumed that meant he was close. \n\nWas he going to cum down my throat? \n\nWas he going to shoot his load on my face? \n\nI wanted both. \n\nI wanted to feel his cum shooting in my mouth, gliding down my throat and filling my belly. \n\nI also wanted to feel his warm thick load splatter on my face. \n\nSuddenly, I heard the two voices from the video again. \n\nSwallow \n\nIt's too late, you have to swallow it all cocksucker \n\nSwallow \n\nYou're a faggot forever. \n\nSwallow \n\nYou're a cum guzzling queer now and forever \n\nAnd then James grunted and I felt his cock pulse, followed by his cum pouring into my mouth. \n\nSwallow \n\nThere is no going back \n\nAnd I knew there wasn't. This was exactly what I was born to do. \n\nPlease. \n\nSuck. \n\nSwallow. \n\nObey. \n\nServe. \n\nI was a cocksucker. \n\nMaybe even a faggot. \n\nAs cum exploded into my mouth, Rose took my twitching cock back in her mouth and bobbed furiously. \n\nJames kept coming and coming and I kept swallowing and swallowing... like I was conditioned to do. \n\nFeel it sliding down your throat \n\nI tried to warn you cocksucker \n\nFeel it filling your belly \n\nYou're a complete faggot now \n\nAnd as I grunted and shot my load into Rose's mouth, I knew I was hers forever. I would do anything to feel this completely surreal, intense pleasure again. \n\nYou are finally complete now \n\nYou're a faggot \n\nYour life makes sense now \n\nYou're a fucking faggot \n\nOnly sucking cock makes you happy \n\nBecause you're a cock sucking, cum addicted faggot \n\nJames pulled out once his complete deposit was made and Rose moved up, grabbed my face and kissed me. As her tongue slid into my mouth, I felt my cum transferred from her mouth into mine. \n\nIt was the hottest moment yet. \n\nCock controls you now \n\nYou'll want it every day \n\nAnd as I swallowed my own cum, again, I knew it was true. \n\nThere would be no going back. \n\nThey say once you go black, you never go back. \n\nAnd that may be true. \n\nBut for me, I knew that once you drop to your knees, you'll forever need to please. \n\n... \n\n... \n\n... \n\nThe end of: \n\nHypno Sissy: Becoming a Cocksucker \n\n... \n\n... \n\n... \n\n... \n\n... \n\nPossibly coming someday if this story is liked by enough people: \n\nHypno Sissy2: Craving Cock \n\nAfter swallowing his first load Brian craves more and goes looking for them."
    ],
    "authorname": "silkstockingslover",
    "tags": [
        "stockings",
        "gay first time",
        "hypnosis",
        "mind control",
        "submissive",
        "sissy",
        "oral",
        "18-year-old",
        "cum",
        "gay"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/hypnosissy-becoming-a-cocksucker"
}
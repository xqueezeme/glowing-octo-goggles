{
    "title": "Wanda, the Starliner, and Me Pt. 02",
    "pages": [
        "Chapter 3: When I Was in the Army\n\nWhen I was in the Army, I never dug a trench,\nI used to bust my knuckles on a monkey wrench\nI'd go to town to drink,\nAnd give the girls a pinch,\nI don't think they ever even noticed me.\n\nJohn Prine, Fish & Whistle\n\nMy Daddy was too old 'n' too valuable to the town to get into the Army when the war came about in 1941. He'd already served in the Great War, so he'd done his bit to save America. I was twenty when them Japs bombed Pearl Harbor an' got us all in that mess for the next four years. I signed up for the Army 'cuz that's what Daddy did, an' got sent off to Camp Hood, Texas, for my trainin'.\n\nNow I'd heard tell that the Army wasn't too smart about usin' the talents a feller might have. You know, sendin' him to jump school when he was scared of heights, or makin' cooks outta guys what didn't have no taste buds. But lo 'n' behold, I got attached to the 8th Engineering Battalion, Mechanized Division. They was goin' to make me a real bona fide mechanic. \n\nFor the next three years, I learned everythin' there was to know about fixin' anythin' that moved; from jeeps to tanks. On top of that, I learned how to read a shop manual, so's I could see how things were put together an' such. That came in right handy when Daddy 'n' I started workin' on automatic transmissions, them new-fangled air conditioners, an' such. \n\nI didn't get to see any close-up fightin', but I got to see plenty of where it had been. We landed in France just after D-Day, an' I'll tell you, I ain't never seen a mess like that ... an' I don't never want to see another one neither. There was dead bodies everywhere, an' just about every buildin' was blowed up or shot full o' holes. \n\nI didn't get too much time to be thinkin' about it, however. There was wrecked equipment everywhere we looked, an' we had to get goin' an' get as much of it back on the road as we could. We started with the tanks 'n' ambulances 'n' two-an'-a-half tons to get things movin' again. We was robbin' parts 'n' pieces off other wrecks just to make do, but we got 'er done. I think that was the first time I ever worked more than three days without stoppin' since we left Oklahoma. \n\nAfter all that time sittin' on our butts, waitin' for somethin' to happen, it took a bit of gettin' used to. On top of that, we was livin' in tents, or bombed out houses, or any kind of shelter we could find as we moved from place to place. It was goin' to be like that for the next year.\n\nWhile we was sittin' around in England before the big invasion, we got to know some of the girls in the little towns. We got to know them real good, if you know what I mean. They was lonely, I could tell, but we tried to keep them company whenever we could. When we got to France, why them French ladies was so glad to see us get rid them Germans, that they nearly loved us to death. That was where a couple of real fine mademoiselles taught me the extra things I needed to know about pleasin' the ladies. \n\nI didn't get to see it all. I got myself a \"Hollywood Wound\" when a German 88 blew the hell out of our shack an' peppered my back, butt, 'n' legs with pieces of rock 'n' metal. I was lucky it wasn't worse. Three of my buddies were killed, an' two more were hurt bad. I had some muscle damage in my legs, an' some rock fragments in my back near my backbone, so I was goin' back to England, then back to the USA to heal up. By the time I was mobile ag'in, it was all over but the shoutin'.\n\nI got a purple heart, a honorable discharge, an' a bus ticket to Busted Branch. I also got a real good education about bein' a mechanic. Fact was, I'd be teachin' Daddy some new tricks when the time came. When I got off the bus, Ma 'n' Daddy were right there with Tucker Winslow an' Sheriff Dooley. I got a big ole kiss from Ma, an' some real hearty handshakes from Daddy, Tucker an' the Sheriff. Seems like I was some kind of hero, but I never knew why.\n\nChapter 4: Back Home Again\n\nIt took a couple of days for things to settle down, but soon enough, Daddy 'n' I was back to runnin' the garage. Now while I was away, Tucker had bought another garage up in Fort Sumner, on Highway 60. It was a real good place for a station, an' he got it cheap, he said. We was on Highway 20, near the junction of 285, so it was a good place to be as well. My legs weren't all healed up yet, so I had to set a spell now 'n' then. But most times, I could get work done timely like. \n\nI found out later that Tucker bought that station 'cause he didn't figure there'd be enough work for us all right off. With all the rationin' an' shortages, people wasn't travellin' as much, so we didn't have as many customers. He was right, an' I came to realize Tucker was darn near as smart as Daddy. He still owned half the station, so we'd see him regular like, but he had some work to do to get the new station back up 'n' runnin' good.\n\nTucker was a few years older than Daddy, but you'd never know it. He was wire thin, jackrabbit quick, an' movin' every minute of the day. Daddy said he was the best man he ever seen with financin' an' other money matters. More than once he helped Daddy with his taxes to make sure he weren't payin' too much. He told Daddy about all them loopholes he said that Daddy should use. Well, accordin' to Daddy, he saved a whole mess of taxes thanks to Tucker.\n\nIt took a couple of years before things got back to bein' where they were before the war. After that, they just got better 'n' better. They were makin' an' sellin' new cars again. Gas was plentiful 'n' cheap. Best of all, we found a feller sellin' old Army vehicles. We got ourselves a four-ton wrecker dirt cheap. Now we could handle them big new highway trucks that was showin' up. We always had a spare battery, a couple of jerry cans of gas, an' a heavy duty winch on the front to look after most emergencies.\n\nMy love life weren't nothin' to talk about, though. Busted Branch was a small town, an' the pickin's were mighty slim. I had some good memories of my days in England 'n' France, but that was years ago now, an' I'd been gettin' a little tired of this dry spell. Besides, I was already thirty years old. Time to be gettin' on with things.\n\nNow, like I said before, there weren't nobody who didn't know who Wanda at the Sip 'n Bite was. Sam Turner was the owner 'n' cook. Six days a week, breakfast 'n' lunch, Sam was back in the kitchen, fixin' the food. He was darn good at it too. He could whip up a mess of eggs, ham, hash browns, 'n' toast in no time at all. Everybody said his chicken-fried steak was the best in the county. \n\nBut Sam never had it so good 'till Wanda answered the advertisement for a waitress in the front window of the cafe. Wanda had been a waitress before Wally showed up, so she knew what to do. Sam hired her right on the spot, supposin' she didn't know what the hell to do. He could see she was goin' to bring in customers by the carload, at least for a spell. When it turned out she was a darn good waitress to boot, well ... he just knew he was goin' to do fine.\n\nWhen Wally took off, Sam was worried Wanda might leave too. But it didn't happen. He gave her a nice raise, an' she was grateful, an' she was stayin' for now. For the next two years, Wanda turned down more dates than the Army has boots. I was goin' in regular for breakfast now. Ma 'n' Daddy had bought the old McAlister place just on the edge of town an' moved in there. I decided to stay in the apartment above the garage. It just made sense, I figured.\n\nI couldn't help but notice Wanda when she served me every mornin'. We got to talkin' now 'n' then, an' she was a nice lady with a hard luck story. Wally had taken every dime she had when he took off, an' that's when I figured he weren't never comin' back. I didn't say so to Wanda. I didn't want t' hurt her feelin's. Over time, we got to bein' friendly with each other, but nothin' more than that. She was still holdin' out for Wally, an' I was too scared to ask her out or anythin'. Then, like I already told you, everythin' changed."
    ],
    "authorname": "coaster2",
    "tags": [
        "army"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/wanda-the-starliner-and-me-pt-02"
}
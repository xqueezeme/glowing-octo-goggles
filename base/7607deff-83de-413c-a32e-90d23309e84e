{
    "title": "Raven Walks Ch. 06",
    "pages": [
        " Chapter Six: Abigail\n\nRaven returned to the coven with roses for Sonja. He felt somewhat vindicated that he didn't drink from her at all, and neither did Constantine, but he still wanted to acknowledge their passionate tryst. She was a strong woman to handle two vampires at once, especially two vampires such as himself and Constantine. That she made it through without a scratch was a testament to that strength.\n\nShe needed to be treated with the respect and admiration she had earned.\n\nWho knew, he thought to himself as he caressed the silken rose petals. Perhaps she was the one. Quiet, unassuming, yet a woman of indeterminable strength and grace. He found himself wanting to see her again -- to touch her blacker than black hair and stare into those cat-like eyes. He throbbed with the memory of her all around him. He had never really gone back for seconds with a human before, but she certainly had been worth the attempt.\n\nHe actually could thank Constantine for that. That was the biggest shocker of all. He'd intervened to spare her life -- and she might have saved his.\n\nHe wore a rare smile as he entered the club and headed purposefully toward the bar. He was surprised to find another bartender there -- a male -- with spiked blue/black hair, a pierced ear and dark Gothic makeup.\n\n\"Hey, man,\" the new bartender said. \"What's your pleasure?\"\n\n\"Where's Sonja?\" Raven asked immediately.\n\nHe just shrugged as he cleaned out a glass. \"Dunno. She never came back to work last night. Didn't call in tonight either. Surprised the hell outta me. You could set your watch by that girl.\"\n\n\"She never came back,\" Raven echoed. \n\n\"Yep. Abandoned her shift. We figured something must have come up but she never called. Sebastian finally broke down and called the police this evening when she didn't show up for her next shift.\"\n\n\"The police?\" he echoed again. Raven was shocked. Sebastian Crane, owner of their little hangout and a vampire even older than himself, was not one to rely on the aid of humans. \n\nThe new bartender nodded. \"Normally he wouldn't have. You know how it is around here. People come, people go. It comes with the territory, especially with the help. But she'd been here a long time. Sebastian thought for sure she'd never get lost. Add to that some guy looking for his wife. Some woman named Tracy, I think.\"\n\nRaven sank onto the barstool. Married? She'd been married? He felt sick. \n\n\"Tracy Lynn Macer,\" a female voice confirmed. Raven turned to see Abigail standing next to him, dressed normally, complete with a notepad. \"Disappeared two days ago, leaving behind a husband and three small children.\"\n\n\"Kids?\" It came out as a hoarse whisper.\n\n\"Three,\" she confirmed as she leveled her green eyes on him. \"And if I remember correctly, you were last seen fucking her in the hallway.\" \n\nHis jaw clenched, but he remained silent. She indicated to his flowers. \"Nice roses.\" Again he did not respond. Finally, \"Is there somewhere we can go and talk?\"\n\nHe placed the flowers on the bar and stood. He motioned with his hand and led her back into the back part of the bar. \n\n\"Can I trust you to take me back here?\" she asked as she raced to keep up. \"Seems like when girls come back here with you they don't come back.\"\n\n\"You tell me,\" he bit out. \"You know what I am. You know what I want. Yet you're still here.\"\n\n\"I'm not afraid,\" she told him with all the confidence she could muster. \n\nHe just smiled as he pushed open a door to a darkened room. \"Famous last words,\" he said in a soft, low voice. \n\nShe gulped but kept her head high. He lit a huge candelabra. He motioned to the big bed. \"Make yourself at home.\"\n\nShe darted a look his direction. \"No, thanks.\"\n\nHe grinned. \"Suit yourself.\" \n\nHe took off his coat and loosened his shirt before plopping down on the middle of the bed. She stood off to the side, and opened her notepad. \"What do you remember about the last time you saw Sonja?\"\n\n\"Let me think. Oh yes. I was making her come all over my cock.\" With smug satisfaction he watched her eyes widen. \"Try putting that in print.\"\n\n\"I'm being serious.\"\n\n\"You're being nosy. That's a dangerous vocation around a place like this.\"\n\n\"So they keep telling me.\" \n\nRaven leaned back with his hands behind his head. \"And yet you keep coming back. What does that say about you?\"\n\nHer eyebrow arched. \"That I don't intimidate easily.\"\n\nHe chuckled. \"Or that you're easy to tempt,\" he countered. His eyes locked in with hers and instantly she could feel his mouth on hers, slow open mouthed kisses to tantalize, to drive her crazy. She cleared her throat and shook the images away. \n\n\"Not as easy as you might think,\" she managed, but her voice cracked. \n\n\"No?\" he asked, and then sent thoughts of his hand on her breast as he thrust his tongue into her mouth in a deep, passionate kiss that managed to make him as weak kneed as it did her.\n\nShe crossed her arms across her chest and backed up. \"Where would you be without all your mystical powers, I wonder.\"\n\n\"In a grave,\" he answered as he sprang to his feet. \"I prefer this.\"\n\nHe came to stand next to her, keeping her rooted to the spot with his eyes. \n\n\"Is that why you murdered Tracy Lynn and Sonja?\"\n\n\"I murdered no one,\" he told her firmly, but softly. \n\n\"Isn't that part of your mystique? To turn mere mortals into vampires like yourself?\"\n\nHe reached up to touch her hair. \"What answer would reward me a kiss?\"\n\n\"There's nothing you could say,\" she told him, but even as she said it sounded like a bluff. \n\n\"No?\" he asked softly as he stepped closer. His head tilted toward hers and his hot breath danced along her slightly parted lips. She saw his desire to kiss her in his dark and clouded eyes, and as much as she didn't want to admit it, the thought excited her. \n\n\"No,\" she told him firmly, willing herself to be strong. \n\nHe moved away. \"That's a shame.\"\n\n\"Sex is your weapon, isn't it?\" she queried, both relieved and frustrated he walked away. \"How you bait victims into your lair?\"\n\nHe laughed out loud. \"A lair? You give me far too much credit.\" He turned back to face her. \"I'm the wind, Abigail. Nothing can contain me. I take what is freely given and I move on to the next donor. It's really quite harmless.\"\n\n\"You call sucking someone's blood harmless?\"\n\n\"It can be,\" he replied. \"You just have to know where to stop.\"\n\nIt was her turn to laugh. \"You're the ultimate hedonist. Like you would know when to stop.\"\n\nHis eyes turned cold. \"I know exactly when to stop,\" he told her. He grabbed his coat and headed toward the door. She wanted to call out to him but she fought it. He wanted her to follow, and she knew if she did she no longer had any power.\n\nShe could imagine nothing worse. \n\nAlmost nothing, she amended as she watched him disappear down the hallway.\n\nShe waited for a long time before she re-emerged from the mysterious back rooms back into the club. Her eyes scanned the crowd, desperate to see him again. Finally she spotted him, sharing a close dance with a young Gothic girl, whose jet black hair was striped with bright red. She wore a leather and chained halter top, short skirt, fishnet stockings and leather boots. She was plastered against him like a second skin. \n\nAbigail tipped her head in defiance as she leaned against the bar. Raven responded by sliding his hands down his dance partner's back and over the soft curve of her ass, lifting her up to grind against him to the thundering, erotic beat of the music. His eyes remained on Abigail as he began to kiss his way along the young girl's neck, his fangs noticeably growing. \n\nHe then kissed his new date, making sure Abigail saw the exchange of their tongues and the prowess of his kiss. Abigail's heart began to race, and she was sure that he could hear her heart beat thunder from across the room, because she was sure she heard his moan in her ear. \n\nShe was tempted to grab a nearby man to dance with as erotically as possible to punish him in the same way he was punishing her. But that came with its own complications -- such as finding herself in the arms of another vampire who could be far more dangerous.\n\nSo she opted to stand off to the side, head held high, making him wish it were her instead.\n\nAnd he did. \n\nHe felt the other girl in his arms, her body responding to his, everything she had his to possess at his will -- but it was Abigail he wanted. She, who had denied him her kiss. She, who had insulted him and doubted him.\n\nShe, who had come to haunt his dreams despite his better intentions.\n\nIf he were a different person, her consent would not have been necessary. But because he wanted something from her he could never take by force, he would wait.\n\nShe'd be in control. For now.\n\nBut there was no sense wasting a perfectly good erection. \n\nWalking backward he pulled the young girl into a dark booth. Abigail watched as he pulled his date across his lap. She ground against him and Abigail could tell that their sex act was no longer simulated. His passion was too raw on his face, her cries were too authentic. Abi knew he had penetrated her.\n\nHer own pussy responded to the thought of his being buried deep inside. It was a hunger foreign to her. Especially when he bared his fangs and she wondered what it would feel like to have them sink into the soft hollow of her neck.\n\nThe girl on his lap didn't have to wonder. She jumped as he bit into her, but slumped against him as he drank from her. Abi was so thrown by her body's response to the erotic nature of his feeding off of another human that she had to wrench herself from his gaze and bolt for the door. \n\nOutside Abi gulped big mouthfuls of fresh air. What was happening to her? It was a story, she reminded herself. It was a story about dangerous individuals and a deadly fascination. As compelling as Raven Crowe was, she knew she had to resist him no matter what.\n\nWhen she felt a little more steady she began to make her way down the dark alley. Her shoes clattered against the cobblestone. The moon filtered through the buildings while the wind whistled through the trees. \n\nRaven had watched her run away with a frustrated groan. He felt his partner come all around his engorged cock, but he lost his will to feed and to fuck, even though he was on the brink of his own orgasm.\n\nThat had never happened before. As he felt himself wilt inside the other girl, he knew that even imagining Abi impaled on him to force him to come wasn't want he wanted. He wanted to follow her -- even though he knew by doing so he was giving himself to a human in a way he never before had.\n\nAs if he watched from outside himself, he disengaged from his quivering delirious fuck partner as politely as possible. Thankfully for him, vampires weren't known for their chivalry. \n\nHe rushed for the door to follow Abi.\n\nAs she moved away from the club Abigail felt more in control. It was a good feeling, one she had relied upon most of her life. No one would own her. No one would possess her. She alone would decide her destiny.\n\nShe was starting to gain her confidence when a shadowy figure swooped from overhead. A scream locked in her throat as she covered herself. She glanced down both ways of the isolated alley. There was nothing but her shadow. \n\n\"Who's there?\" she asked, summoning her strongest voice. \n\nHer question was met with a peel of cackling laughter. She ducked down again as the figure returned, flying down on her like a demented bird.\n\nShe dropped her purse and her notepad as she broke out into a run down the alley, chased by the wind and maniacal laughter. \n\nShe tripped and fell face first onto the ground. She felt a powerful force hoist her up and flatten her against the wall. She stared into the demonic face of a vampire who had lost all of its humanity -- it was a creature made of gangs, bone, paper thin skin, and evil.\n\nShe tried to scream but the creature's hand grabbed her by the throat. Its laugh bounced across walls as its clawed hand snatched the front of her shirt and tore the material away, exposing her breasts. His long, forked tongue licked what was left of its lips and she began to fight against him with everything she had. She kicked, she screamed, she flailed. But the creature was too strong. \n\nJust as she started to black out she saw a figure fly towards her captor. In a blur, she dropped to the ground and she watched as the two dark figures battled it out. The two combatants came into view and she could clearly see Raven battling on her behalf.\n\n\"Raven!\" she cried before she threw herself into the mix. The Creature flung her backward against the wall, which enraged Raven. He sent all his power through his hands and projected the Creature backward, a good fifty feet away. \n\nThe Creature laughed as it crawled to a standing position. \"You think it's over,\" it growled. \"It'll never be over.\"\n\nAnd with that, the large imposing figure flew at both of them, and right as reached where they were, vanished into a puff of black smoke. \n\nRaven knelt to where Abi lay on the ground, pulling her shirt closed. \"Are you okay?\"\n\nShe nodded, but it was evident she wasn't. \"You saved me,\" she stated unnecessarily. \n\n\"Come on,\" he said as he tucked her into his arms and led her to safety.\n\nAnd though he was of the same species of the Creature who had just assaulted her, somehow she felt safer knowing he was there.\n\nThough it made no logical sense, she knew it was in her best interest to follow where Raven walks. "
    ],
    "authorname": "StarrLust69",
    "tags": [
        "vampires",
        "vampire threesome",
        "vampire novella"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/raven-walks-ch-06"
}
{
    "title": "April Fool's Games",
    "pages": [
        "This one is for the April Fools Day Story Contest, as well as being my 100<sup>th</sup> submission. So, your votes and feedback would be much appreciated. Hope you enjoy this fun little tale.\n\nApril is one of those months that makes you feel like you can never make any plans, since the weather could be anywhere from freezing your ass off cold, to boiling your nuts in oil, hot.\n\nLooking outside, today looked like it was one big horrible April Fool's day joke on the entire city.\n\nThough winter was officially supposed to be over more than a week ago, the first of April showed up with a rude surprise for anyone hoping to get anywhere. The streets were covered in a thick coating of ice, making driving or even walking virtually impossible. Looking out up and down the street, from the living room window, it seemed like no one dared to even venture out their front door. It was kind of eerie to see the streets so deserted.\n\nSeeing as it was still coming down hard and coating everything in a heavy layer of freezing rain, I knew my roommate and I would be together for at least the rest of the day, which I didn't mind one little bit, since my temporary roomie was an absolute babe.\n\nSince landing a new tech management position in Montreal, I had been staying at a friend of my younger sister, Joslyn's place for a few weeks, while I worked on finding a place of my own. Once she knew I was coming, she'd been kind enough to insist that she had plenty of room and said I could stay with her, so there was no need for me to stay in a hotel, or look for a short-term rental.\n\nOnly problem was, I'd been hot to get with her since the day I'd first met her, seven years ago when she was just eighteen and I was twenty. She was my sister Jill's best friend all through university, who often spent time with my family. And I don't think I'd been able to spend two minutes with her, without imagining how good it would feel to kiss her pretty mouth, run my hands through her long golden brown hair, or strip her naked and let her know just what she did to me.\n\nLast night I did my best to shelve my feelings for her, while we stayed in and made Chinese food together. Turns out Joslyn, in addition to be gorgeous and sexy as hell, really knew her way around a kitchen. What she whipped up was amazing; beef and broccoli, fluffy white rice along with stir-fried tofu and veggies with crunchy almonds and mouth-watering spicy shrimp.\n\nI helped wherever I could, of course brushing against her nice tight ass every chance I got, making her laugh while I worked around her, cleaning up and handing her whatever she needed.\n\nJust to be fair, I kept us in booze and always picked up groceries, figuring it was the least I could do since she wouldn't let me help with any other expenses. Exceptionally bright, I knew she had a good paying job in biotech, but I didn't like to take advantage of her generous nature. So, at least we always had plenty to eat and drink, while she did most of the cooking.\n\nOnce the meal was ready, the wine flowed as we ate, and I noticed her coly grinning at me all through dinner, like she might be fantasizing about what she'd like to do with me, too.\n\nNot too surprising, since I was only wearing a thin pair of shorts, having shed my T-shirt, my well-muscled chest was bare. Women seemed to like my thick, dark hair, and big brown eyes, and the fact I was lean and tall and pretty well hung, too.\n\nSitting across from me, sexy Joslyn was nearly naked in just a pair of silky mauve boy shorts and matching little belly-baring tank top, with no bra. That of course had me hard all through dinner as I stared mesmerized at the sight of her rock hard nipples poking at the fabric, imagining how incredible it would feel to slip my tongue around each one, and get them even harder.\n\nThough I'd seen women wearing a lot less at the beach, seeing Joslyn so scantily clad had to be the hottest thing I'd ever seen.\n\nAfter dinner, we sat together in the living room, the tall room aglow in candlelight, listening to an old Stevie Wonder album. Both of us smiling at the words to the sultry Ribbon in the Sky, it felt so romantic. When Stevie sang, 'May I touch your hand,' I reached for her hand and gently stroked it, and she in turn stroked her thumb over mine. Both of us quietly smiling as freezing rain pelted steadily the windows, it was a perfect way to spend the night, warm and close when the weather outside was frightful.\n\nI really enjoyed staying at her place, and not just because I got to spend so much time with the woman who'd been haunting my dreams for as long as I could remember. But the apartment itself was amazing, and really spacious, the main floor of a classic red brick Victorian with ginger-bread detailing at the peak. With incredible twelve foot ceilings, and a lot of the old features maintained, like the high base boards, and super long windows that let it lots of natural light. I couldn't believe she'd been lucky enough to score a place like this, fully furnished, right in the heart of the city, and could understand why she fell in love with it on sight.\n\nOnly problem was, in winter, her landlord Mr. Dubois, who lived right above us, and had to be somewhere in his late eighties, kept the place hot enough to fry a monkey's ass. So, we'd both ended up over the course of dinner, nearly stripping ourselves naked to avoid sweating balls while we ate.\n\nI remember the first day I'd arrived, I wondered if she was dressing sexy just for me, clad in just a tiny pair of cut offs and a tank top when she answered the door, I soon realized that clothes were pretty much optional living in her hot as hades digs.\n\nSo, now in the morning, I found myself standing in just my black silk boxers staring at the ice covered streetscape and wondering what the two of us might get up to, trapped together with hardly any clothes on.\n\nJoslyn came in carrying two big mugs of coffee, and I gotta say, I grinned, loving the sight of her barefoot in just a soft pink bra top and tiny silky pink shorts, leaving almost nothing to my imagination. I could feel my dick growing hard, imagining what it would feel like to strip off those two little scraps of fabric and get at her warm soft body beneath.\n\nI willed my erection to go down when she came and stood close beside me to take a look outside. \"Wow. Looks like Mother Nature's wrath, was really unleashed on us overnight, wasn't it?\"\n\nI nodded, as I took a sip of coffee. \"And it's still coming down, too. It's like a skating rink out there, though it does look kind of pretty with everything shimmering in a coating of ice.\" The sun made everything glisten like diamonds; the trees and bushes, the cars, even the sidewalks.\n\nJoslyn agreed, \"It really does.\" Then she shrugged. \"Well, how about a games day then, since I doubt either of us will be going anywhere today.\"\n\nWhen I nodded and said, \"Sure,\" she set down her coffee mug on an end table and opened a cupboard door in the hallway. And inside, was a lot bigger than it looked, filled with shelves of books, and loads of games.\n\nShe tipped her head, after choosing one of the board games. \"How about Scrabble? Would you be up for that?\"\n\n\"Okay. But I should warn you, I haven't played in years, so I might be a little rusty.\"\n\nGrinning slyly, she carried the box out of the cupboard. \"But what's even more fun is dirty Scrabble. It's got to be one of the best games ever. And I think you'll like it.\"\n\nI was already nodding. Though I hadn't played before, I knew I'd love it, especially playing with her.\n\nShe set the board down on the coffee table, and we both got settled on the couch with our coffee cups in hand.\n\nAfter we'd chosen seven letter tiles each, I groaned at the mess I'd picked. Then I shrugged and started with a measly four letter word, ANAL, giving her the side-eye as I set the word down on the board, hoping it wasn't too dirty and I hadn't shocked her.\n\nBut it seemed she was cool with it. When without batting an eyelash, instead of using one of my letters to put a word vertically on the board, like I thought she might, Joslyn's smile was wicked as she added to my word, with ANALFUCKERY.\n\nI barked out a laugh and patted her on the back, though my eyes nearly bugged out of my head when I first saw what she'd put down. \"Wow, and you used all your letters, too,\" I said, trying my best not to choke on my coffee. \"Don't you get something extra for that?\"\n\n\"Yep, fifty extra points for using every letter. Lucky pick for me, huh?\" she said, jotting down our scores, like it was nothing.\n\n\"No kidding.\" I picked four more tiles and smiled when I saw I could use a blank tile to put down the word COCK, feeling pretty proud of myself.\n\nOf course Joslyn quickly used another blank tile for an extra C, and turned it into COCKSUCKER. And I realized she knew this game like the back of her hand, plus it was pretty damned arousing to see her choice of words.\n\nWhen I drew a few more tiles, I thought I had a perfect word and used the Y already on the board to create PUSSY, which of course naughty Joslyn quickly turned into PUSSYEATER.\n\nWe laughed as we played for the next hour and a half, amused by the outrageous words we were choosing. I soon decided she was right, and dirty Scrabble was a lot more fun than the traditional game. Though it was challenging too, since we had to not only figure out a way to utilize the letters we'd picked, but also think of a filthy way to use them.\n\nNext pick I got nothing but a bunch of vowels, so after rolling my eyes, I threw my tiles back into the bag and lost my turn. Then Joslyn quickly used the R in COCKSUCKER to go crosswise to make ORGASM.\n\n\"Nice,\" I said, admiring her dirty handiwork. Then using the A in ANAL, I put down ASSREAM, getting a thumbs up from Joslyn, who I noticed was now smirking at me like crazy. I guess deciding I wasn't a total computer nerd after all.\n\nNo surprise, a second later, quick with a comeback, she added to that with an E and an R for ASSREAMER.\n\nTalk about a kinky game, my cock was not only twitching but getting thicker and harder with every dirty thing we put down, as I imagined how hot it would be to do some of this sexy shit with her.\n\nWhen I used an S already on the board and put down the word SHOOT, Joslyn gave me a high five, but then we stopped when she got to her feet and said, \"Be right back.\"\n\nAnd when she came back she had a platter full of pretty delectable looking munchies; cheese, dips, veggies, grapes and crackers along with a big bottle of red wine and two glasses, that I quickly relieved her of and set on the table.\n\nSo, it looked like the game was going to get a little wilder now that we were going to start drinking. But that was okay with me.\n\nThough I nearly chocked on my wine when on her next turn, she put down the word, FISTING. Fuck, this game was getting hot.\n\nThe fun went on for a while with words like BONER, TITS, THRUST, POUND and SLAM, till we'd pretty well run out of letters and both of us were looking pretty flushed, chuckling at how kinky our dirty Scrabble board looked.\n\nOnce she'd put it away, we just sat and ate for a bit, listening to some bluesy jazz, enjoying some more wine, and grinning at each other, now that we'd crossed a line in the sand as far as dirty game playing was concerned.\n\nSuddenly looking inspired, Joslyn held up her finger and said, \"Hey, I just remembered, I've got another fun game.\" Then she dug into the closet again, coming out with an X-rated version of Truth or Dare, that she explained was left here by the last tenant.\n\nBut in this one, the stakes were pretty high, since both the questions and what you were dared to do were pretty erotic.\n\nWearing a naughty grin, fearless Joslyn started the game. \"Okay so what do you pick, Ted, Truth or Dare?\"\n\n\"Truth,\" I said, and waited to see just how kinky this game would get.\n\nWith a playful waggle of her eyebrows, she picked up and read from the top card, \"What's the least amount of time you've known someone before you've had sex with them?\"\n\nNever having shared this little naughty tidbit from my past with anyone before, I shrugged and decided to tell her the truth. \"About ten minutes; I met a flight attendant when we got snowed in together at an airport bar, and we hooked up in the bathroom.\" But what I didn't tell her was that the little blonde sexpot dropped to her knees and blew me the second the men's room door closed behind us, which was really fucking hot, considering I was only twenty-one at the time and had only been sucked off like twice before, and never so well. I remembered after I'd shot down her throat that my legs shook for a full hour after experiencing something as crazy hot as that, especially since I'd only just met her.\n\nJoslyn's eyes flared in surprise and she gave me a high-five for sharing that with her. \"Oh, wow, ten minutes. Way to go, stud.\"\n\nI smiled back and asked her, \"Okay, Truth or Dare?\"\n\nShe grinned, and wiggled excitedly in her seat. \"Oh, definitely Dare.\"\n\nThough I smiled, I tried not to groan when I read the card. \"Okay, then I dare you to suck on my finger and pretend you're performing oral sex on me.\"\n\nShe bit into her lip, looking a little unsure at first, but finally she snatched hold of my wrist, and drew my hand over to her mouth. Then keeping her gaze locked on mine, her eyes shimmering with amusement, yet still pretty dark with arousal, I noticed, she slowly licked all around my index finger before sliding it into the heat of her mouth, where she showed me just how hard she could suck. Fuck me, I could feel sweat beading on my forehead, and the blow job wasn't even real. I don't think I'd ever witnessed anything as hot as watching her eyes drift shut and hearing her softly moaning as she got off on the sensation of sucking off my finger. I swear I almost came where I sat.\n\nI couldn't believe it, but it actually felt even crazier to watch gorgeous Joslyn pretending to suck off my index finger, than when the flight attendant dropped to her knees and actually blew me in the bathroom. No, surprise, when I looked down at my black silk boxers, my dick was not only fully erect, but making a pretty impressive tent by the time Joslyn finally gave me a smug little smile and let go of my finger with an audible pop.\n\nHoly shit, who knew a day of game playing, could be so arousing?\n\nAfter wiping a drip of saliva from her chin, with the back of her hand, she said, \"Okay, stud, your turn, Truth or Dare?\"\n\nFeeling brave, and insanely aroused after that, I blew out a breath and said, \"Dare.\"\n\nShe picked up a card, read it and then nodded, looking pretty delighted about what naughty thing she was about to do next. \"Okay, then while I lick your lips, I dare you to resist touching me or kissing me back.\" She grinned. \"Think you can do that?\"\n\nRight now, I wondered if my throbbing cock would reach out to try and grab her from my boxers, if she started toying with my lips like that. But I just nodded and said, \"Sure, let's go for it.\" Because, wow, having Joslyn lick my lips was like a wet dream come true.\n\nI watched as she got up on her knees, then she smiled into my eyes as she took hold of me by the chin. Then she lashed out her hot little tongue and started to slowly trace a path around my bottom lip, softly moaning as she trailed it along my upper lip, too. And Jesus, did I ever want to grab her and pull her into my lap, just to show her how much I wanted to sink my tongue into her mouth and really plant one on her.\n\nI could feel my cock getting sticky in my boxers by the time she finished, and no way could she miss the flag pole I was sporting, she'd gotten me so fucking hard, just from that playful bit of licking. I knew if we kept up the game, I'd either be tossing her on her back, and ravaging her pretty hard soon, or I'd be losing my freaking mind, if I didn't get some relief before I lost it and shot my boxers full of cum.\n\nMy hand felt a little shaky as I reached for another card and said, \"Okay, Joslyn, Truth or Dare?\"\n\n\"Truth,\" she said, and waited.\n\n\"Okay,\" I said, and read from the card, \"How old do you think is too old for someone to still be a virgin?\"\n\nHer gaze shot to the floor, and I noticed it took her a moment to answer. Finally she looked at me and shrugged. \"I don't know if there is an age. Sadly some people go their whole lives without ever making love.\"\n\nNow she had me intrigued, since I wondered when she'd first had sex. Part of me was jealous of the other jerks she'd been with, though I knew this was just supposed to be a game, and we weren't really supposed to be digging too deep into our pasts. Still, she had me curious...\n\nShe brought me back to where I was, when she heaved a breath, picked up a card and said, \"Okay, Ted, your turn, Truth or Dare.\"\n\n\"Dare,\" I said, looking her straight in the eye, doing my best to remember to breathe with my poor dick twitching like crazy as I imagined what it would feel like to strip her bare and make love with her.\n\nShe smirked as she read the card. \"Wow. This should be fun. But I have to put a blindfold on you for this one.\"\n\n\"Okaaay?\" Now she had every nerve in my body tingling with anticipation, wondering what other kinky things she had in store for me.\n\nShe grabbed the black blindfold from the game box, got up on her knees and slipped it over my head, covering my eyes. Then she said, \"Now, while I've got you blindfolded, you have to put your hands behind your back and I'm going to put some part of my body against your lips. And I dare you not to touch me with anything but your mouth. Then you have to guess what part of me you've just kissed.\"\n\nHoly shit! This game was really starting to heat up, and I could feel I was starting to sweat, and not only because the room was hot enough to cook eggs on the damn heat vents. I actually wondered if the temperature inside had gone up another few degrees, or if it was just me.\n\nSecretly, though, I hoped she'd be pressing her pussy against my mouth so I could slide my lips over the softness of her hot wet folds, but unfortunately I had my doubts, even with her naughty sense of fun, that she'd be willing to go that far.\n\nI could hear her giggle as she took hold of the back of the couch probably to keep her balance, and then she pressed some incredibly soft, warm flesh against my lips. When I puckered up and slowly traced my lips against her skin, I started to smile, since I knew I had to be kissing her backside. I asked, \"Is it your ass?\"\n\nShe laughed out loud when I gave her a playful nip, but then sadly, put herself back together before she slipped the blindfold off me. She was smiling from ear to ear as she said, \"Bet you never thought when you woke up this morning, that you'd wind up kissing my ass today, did you?\"\n\nChuckling, I agreed, \"You're right, that was one thing I didn't imagine I'd be doing.\" Though I wished she'd have let me use my tongue on her too, then I could have traced a path along her ass crack all the way down to her hot little pussy where I could have shown her just how intimate a kiss could be.\n\nI noticed her cheeks were flushed to a very pretty shade of pink and her nipples were so hard, I swore I could almost taste them after getting that intimate with each other.\n\n\"Okay, Truth or Dare?\" I asked, smiling expectantly into her eyes, hoping the next one would be as hot.\n\n\"Dare,\" she said, narrowing her eyes on me, starting to look a little anxious.\n\nMy smile was pretty big as I grabbed the next card and read out, \"I dare you to put something sweet on a body part that you want me to lick off, and then describe it.\"\n\nHer eyes went big and she swallowed hard, while I just grinned and looked her over, imagining how hot it would be to finally get a chance to run my tongue over her soft, warm skin. Finally she said, \"Um, I think I'll need you blindfolded for what I have in mind this time, too, Ted.\"",
        "Once she had the blindfold over my eyes again, I could hear her rushing out of the room, then padding barefoot down the hallway toward the kitchen. Then I heard the fridge door slamming, and Joslyn was back a few moments later, sounding pretty breathless. \"You all set?\" I asked her.\n\nShe nodded, \"Yeah, but you can't peek, and remember you can only touch me with your tongue.\"\n\n\"No problem, just put whatever you want licked up against my mouth, and I'll be happy to lick it clean.\" Ecstatic even, to finally be able to get my tongue on her, and at this point, she'd got me so stoked with all the kinky fun and games, I really didn't care what she wanted me to tongue. Though, again, I really hoped it would be her pussy, knowing how much both my throbbing cock and I would get off on that.\n\nI heard her blow out a shaky breath, and then she had both hands on my head, and I could hardly believe it when she touched a protruding nipple to my lips and murmured, \"It's whipped cream and there's lots of it, so you'll need to give me a really good tongue lashing to get it all off, so you'll know what you're licking off.\"\n\nHoly fuck, was this even for real? I'd been lusting after this gorgeous sexy woman for so long, and now because we were stranded in an April ice storm, I was finally getting a taste of her big beautiful tits?\n\nEven though I was blindfolded, I still closed my eyes and groaned as I lapped at one of her hard- as-fuck nipples, feeling my dick lunge just from knowing I was tonguing her naked breast. And the little whimpers coming out of her, had me stoked enough to open my mouth and close it around her, lashing my tongue all around her tight hard peak. \"Joslyn, you're so damn sweet,\" I murmured as I feasted on the bounty of her luscious mound. When I switched to the other breast, I noticed she'd loaded that one up with whipped cream, too. And man, I don't think I'd ever been more aroused in my life than I was right now. Blindfolded and sinking her voluptuous breasts into my mouth, knowing I was expected to suck them both clean, had to be the hottest fantasy I'd ever had, especially since I was lucky enough to actually be acting it out.\n\n\"Oh, god, Ted, that feels sooo good,\" she murmured, digging her fingers into my hair and directing me right where she needed me most, while I kept sucking hard on both of her delectable tits.\n\n\"And you feel good too; so soft, and warm, you're breasts are amazing,\" I murmured while I hungrily lapped around each nipple.\n\n\"Okay, then...\" She took a deep breath, before she whispered breathlessly against my ear, \"I dare you to take me to your room and make love to me.\"\n\nFor an instant I froze, wondering if I'd heard her right.\n\nBut when she pulled back, and waited for my reaction, I was relieved beyond belief to hear the games were finally over, so the real fun could begin. Realizing it was actually going to happen, I tore the blindfold off my head, cupped her face in my hands, sunk my tongue into her mouth and kissed her till we were both fighting to breathe.\n\nOnce I finally lifted her into my arms, I didn't waste any time getting to my bedroom, racing down the hallway like a madman with her tight to my chest and our lips still locked together, hoping I didn't trip and ruin the moment. Keeping my eyes on hers, I set her on her feet by the bed and drew her against me, till we were chest to chest, clutching her ass in my hands, to let her have a feel of how hard she'd gotten me. I needed inside her so badly by now, I wondered if I'd pass out from the all blood in my body pooling in my throbbing dick.\n\n\"You sure about this?\" I felt I had to ask her, gazing into her big beautiful blue eyes, just to be certain that she wanted me as much as I wanted her.\n\nShe nodded, gazing up at me wide-eyed, suddenly looking so innocent as she softly murmured, \"Yes, I've wanted this for a long time, but just never knew how to make it happen.\"\n\nI blinked, hardly able to believe my ears. All this time I'd been lusting after her, not realizing that she'd wanted to get with me, too.\n\nI picked her up and gently placed her in the middle of the big old creaky brass bed. Then I took hold of her silky shorts by the waist and slid them down over her hips, her thighs, her legs and finally her feet, tracing the same journey with my lips, savoring every inch of her silky soft flesh as I took in the beauty of her naked form. Good god, she was gorgeous, and I quietly whispered that to her, too.\n\nAs I trailed a path back up along her legs with my tongue, I loved the way she was biting into her lip and shivering, knowing that my ultimate destination was her hot little pussy.\n\nThe moment I touched her silken flesh with my tongue, I groaned and almost climaxed just from the feel of her sliding over my tongue. It just felt so good to finally be right where I'd always wanted to be, with my face buried between gorgeous Joslyn's legs, inhaling her delectable scent as I savored the sweetness of her.\n\nAs I lashed my tongue slowly over her folds, she spread her legs wider for me, giving me access to every delectable inch of her. But I couldn't believe how tight she was when I slipped a finger inside her, and I just knew that she'd be tightest I'd ever had.\n\nI worked her pussy, till I had her shivering, squirming and tossing her head from side to side on the pillow. Once I started to suckle her clit, she finally lost it and cried out, \"Oh, my god, Ted, that feels so good, everything I own feels like it's electrified.\" I just smiled happy to have gotten her off that hard.\n\nWhile pressing kisses to her mound, I fumbled around for my wallet on the nightstand, knowing I needed to get a condom or I'd be embarrassing myself big time if I lost it before I even got inside her.\n\nOnce I tore open the wrapper, Joslyn watched me, looking intrigued as I rolled the condom down over my erection; that actually thrust into my hand as I smoothed it down, the little bastard was so eager to finally see some action after what felt like hours of agonizing foreplay.\n\n\"Wow, you're a big one,\" she murmured, staring wide-eyed as I fisted my steely cock in my hand.\n\nNot sure how to respond, I promised her, \"No worries, we'll take it nice and slow, okay?\"\n\nHeaving a shaky breath, she nodded as I crawled up her body, claimed her mouth and kissed her lingering over her mouth, hoping to get her to relax. Since I'd already gotten her nice and juicy with my tongue, I held my cock at her entrance and thrust till I could feel my cockhead pushing inside her. But holy fuck, was she ever tight.\n\nKnowing I'd never felt anything better in my life, I still could barely wrap my head around the fact we were about to make love for the very first time.\n\nI brushed my lips across her forehead, and then the tip of her cute little nose, before I sank my tongue into her mouth, at the same moment I flexed my hips and sank deeper into her body.\n\nI was right about her being tight. She fit me like a glove, a warm, wet, unbelievably tight glove. Already I had feeling I was right where I wanted to be for the rest of my life, buried in gorgeous, funny, brilliant, captivating Joslyn.\n\nWhen I noticed her wince, I stilled, looked into her eyes and asked, \"Too much?\"\n\n\"Just take it nice and slow, okay?\" she said, sounding slightly pained.\n\nI studied the uncomfortable look on her face and then a lightbulb went off in my head. \"Wait. This isn't your first time, is it?\"\n\nClenching her eyes shut, she nodded. \"Um, yeah, going all the way, it is,\" she quietly murmured, like she didn't want to look at me when she said it.\n\nI was so shocked, I could actually feel my eyes pop. \"How is that even possible? You're so beautiful and so sexy. I'd have thought you'd have guys lined up to get with you.\" When she turned her head away and wouldn't look at me, probably feeling mortified, I touched a finger to her chin and turned her face back so I could meet her eyes.\n\nHeaving a sigh she told me, \"Don't laugh when I tell you this, but I've kind of been holding out.\"\n\n\"You mean until after you're married?\"\n\nShe shook her head. \"No.\" She gave me a cute little smile and finally looked into my eyes. \"I've been holding out, waiting for you. I've always had a thing for you, Ted. But I just never thought you'd be interested in me.\"\n\nHoly crow. I tried not to laugh, because the whole thing was insane. I'd been crazy about her for about as long as I could remember, and by sounds of it, she'd been just as crazy about me. Talk about a kick in the head. We could have hooked up years ago, and we might even be married by now.\n\nMarried? Whoa. I blinked a few times as that thought filtered through my brain, knowing it was something that never crossed my mind before -- at least until her. But truth was, we just meshed. And after living with her for a few weeks, I realized she was just so easy to be with -- no drama, no silly outbursts, like so many other women I'd known. We both laughed at the same things, enjoyed the same type of music, had fun cooking and even cleaning together, that I just couldn't imagine not having her in my life.\n\nI ran my finger along her jaw, smiling into her eyes, seeing her a little differently now, I decided it was time to tell her the truth. \"If we're going be honest with each other, I think I should tell you that the first time I laid eyes on you, I was pretty much hooked. I couldn't believe how pretty you were and whenever you'd laugh that adorable laugh of yours, you made me want to laugh, too. But since you're my sister's best friend, I thought you never really saw me as anything more than Jill's older brother, the computer geek.\"\n\nShe shook her head and finally began to laugh, tracing a finger over my lips, and I was just glad to see her back to herself.\n\nI wrapped her in my arms, looking into her eyes, and just stroked her hair for a while, brushing kisses to her lips, happy just to hold her and still be inside her. But when she wiggled her butt, and squeezed my ass in her hands, and even thrust her hips up, I chuckled, knowing she wanted more.\n\nI slipped her legs around my hips, pulled back, and eased into her nice and slow. And the way she was softly starting to moan, I was glad to hear she was enjoying me sliding into her as much as I was, making her mine.\n\nIt just felt so good to be with her like this, after wanting her for what felt like forever.\n\nWhen I reached between us and started to massage her little love button, she threw back her head and murmured, \"Oh, wow that feels soo good.\"\n\n\"So do you, like you were made for me.\"\n\nSlowly I picked up my pace, and the way her chest was heaving and she was starting to quiver, I knew we were both almost there. I kissed her as I felt her body start to detonate at the same moment I threw back my head and growled as my cock exploded inside her. Sure I'd never felt anything as good as making love to her, I knew she was it for me.\n\nI kissed her lips and whispered, \"I love you.\"\n\nAnd I felt like I had everything I'd ever need when she smiled and whispered back, \"And I love you, too.\"\n\nMeanwhile a floor above, the old romantic Monsieur Valentin Dubois, bent his head over the heat vent and chuckled at the unmistakeable sound of the bedsprings creaking in a unmistakeable rhythm from the bedroom below his. He reached for his cane, smiling as he wandered over to the thermostat, and lowered the heat a few degrees, muttering, \"Works like a charm every time. I knew if I got them hot enough, those two would wind up together.\"\n\nIt seems Mother Nature wasn't the only one playing April Fool's jokes. Little did they know, Monsieur Dubois had been renting out his main floor apartment to lonely young women for years, and with one trick or another, he always managed to find a way for them meet their match.\n\nLuckily for Ted and Joslyn, his magic had worked on them.\n\nDownstairs, snuggled close in bed, Joslyn circled her finger around Ted's mouth and told him, \"You don't really have to move out, do you?\"\n\nI shook my head, deciding it was time I fessed up. \"Two days after I moved in here with you, the rental agent found me a perfect place that she swore I'd love, but I told her I was happy where I was and she could stop looking.\"\n\nShe grinned. \"Really?\"\n\n\"Yeah, I was kind of hoping this would happen, and eventually we'd get together as a couple.\"\n\nJoslyn hugged me tight to her chest and laughed. \"Me, too. I've been drooling over you walking around in your underwear from the moment you moved in here.\"\n\nI tugged her nipple and laughed. \"Right back atcha, little Miss Sexy.\"\n\nThen I looked into her eyes and said, \"Actually I don't know if I'll ever want to leave, now that I know how good we are together.\"\n\nShe grinned, and squeezed my ass. \"Then don't.\"\n\nAs I pressed a long slow lingering kiss to her lips, I knew that soon I'd be out looking for a ring, and we'd be telling our families that we'd finally realized that we were crazy about each other.\n\nI was so glad now for the ice storm that kept us inside forcing us to realize what we felt for each other. Now I wondered what she'd think of us getting married next April Fool's Day, since it would be one day I knew neither of us would ever forget, the day she gave herself to me and the two of us became one..."
    ],
    "authorname": "Smuttyandfun",
    "tags": [
        "playful licking",
        "blow job",
        "making love",
        "suck off"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/april-fools-games"
}
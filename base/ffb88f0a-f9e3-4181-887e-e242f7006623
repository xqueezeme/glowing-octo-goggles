{
    "title": "There and Back Again Ch. 097-098",
    "pages": [
        "Chapter Ninety-Seven: *Bad Acting \n\nWe left a camp with the Dalish and Circle emissaries just south of Denerim; Dariel stayed with them, having barely spoken to any of us since we'd returned from Orzammar. I gathered he was to become Keeper Lanaya's First, and it seemed he'd already found himself a mate, based on the single tent shared between him and Mithra. We arranged runners to come to the gates of Denerim daily at noon, where we could meet with them if we needed to each day. \n\nThe rest of the trip to Denerim was uneventful. Before we were visible from the gates, we stopped to pull ourselves together. Theron dismounted, donning an old, dented full helm, and Alistair took his place on the horse, beside Teagan; I wondered if he'd take after his father and fall off, but it didn't happen. Theron walked at his side as a bodyguard. Blake walked with me near the front with the Grey Wardens. \n\nI had decided that Alistair and I should pretend not to be together while in Denerim - I wanted Theron to see the full depth that Anora was willing to sink to in order to keep her throne, and part of that was Alistair seeming to be 'available.' I knew it was a good idea, despite Alistair's misgivings, but turning to wave at him one last time before walking through the gates, I was starting to doubt the wisdom of the idea. We'd been separated by a few hundred feet for less than an hour, and I already missed him. He'd tried changing my mind with puppy eyes; I'd promised to try to sneak into his room later. \n\nThe gates into Denerim were actually manned, for a change; Aedan recognised some of the guards as being Kylon's new recruits. They winked at Aedan and let us pass, saluting Teagan and Alistair -those they assumed to be nobility - formally. One of them broke off from the gate to walk beside Aedan, ostensibly 'escorting' us to Eamon's estate. He seemed to be giving Aedan a report of what had been going on; I looked forward to hearing it later. \n\nGorim took his leave, promising to come to Eamon's estate after checking in on his wife at their little house in the Market District. I rather hoped the reunion would go well and we wouldn't see him for a few days. \n\nEamon's estate was one of the few buildings that was the same size in real life as it was in the game. There weren't even close to enough bedrooms for everyone, so while Teagan, Aedan, and Alistair got rooms of their own, the rest of the men were put up in the barracks with Eamon's soldiers. The women ended up sharing guest rooms - I shared with Solona, while Leli shared with Wynne. Morrigan preferred to spend her nights as a bird, outside, alone. It amused me to think of Theron in the Barracks, while Alistair slept in a lavish guest room, but surprisingly, Theron appeared to be the less uncomfortable of the two at the arrangement. \n\nIsolde immediately swept off to the room she shared with Eamon, Connor and his entourage following behind; I hoped I'd seen the last of her for a while. Eamon had implied he planned to put them both on a boat to the Free Marches within the week; I'd have wondered if he was trying to allow Connor to escape, but he'd apparently made a deal with the mage and templar who had been teaching Connor to accompany them. \n\nWe weren't greeted by Loghain, Howe, and Cauthrien upon arrival; I learned why later when we met for supper and Aedan told everyone what the guard had reported to him. \n\n\"Loghain's holed up in the Palace; no one's so much as seen him in weeks. After we left, there was some rioting, even amongst the nobles; Loghain pulled back to the Palace and Howe to his estate. They didn't have enough men even to hold the noble's district; Leonas Bryland and Alfstanna Eremon have openly declared against Loghain, and nobles are flocking to their banner.\" \n\nAedan turned to Eamon. \"That should make it easier on us, then. Have you been in contact with either of them?\" \n\n\"I sent messengers, but have not received responses yet. Not that I expected to - the messengers would have gone to Waking Sea and South Reach first. I told them I was coming to Denerim; I imagine they'd wait to talk here.\" \n\nAedan hummed in thought. \"Well, from what I hear, neither Loghain nor Howe will be travelling much without a legion of soldiers. We need to talk to Alfstanna and Leonas.\" \n\n\"I expect we will get a different opportunity soon,\" I reminded everyone. We decided to give it a day or two, and then move forward if nothing presented itself. \n\nI snuck into Alistair's room the first night in the estate; fortunately, my room was right across the hall, and I was able to watch through my own open door until I had an opportunity to get in unseen. Solona laughed at me and pulled our door shut behind me. \n\nI got there before Alistair had managed to untangle himself from Eamon, so I spent a few minutes unpacking his things. A servant had turned his bed down, so when I ran out of things to do, I stripped and climbed into his bed naked, falling asleep almost instantly. \n\nI woke when a cold draft hit me, opening my eyes to see Alistair in nothing but his loose linen pyjama bottoms, staring at my naked form with darkening eyes. He stripped out of the pants frantically, crawling into the bed and pulling the covers up over us both. He kissed me, initially soft and sweet, but quickly deepening. His tongue swept into my mouth aggressively, and I gasped. \n\n\"Just what do you think you're doing, serrah?\" \n\nHe snorted, weaving his fingers into my hair to tilt my head and attack my neck. \"Well, since someone obviously bought me such a beautiful gift, I couldn't possibly turn it down...\" He nipped my neck, making me squirm. \n\n\"Oh you think I'm some sort of possession to be bought, some prize do you?\" I gasped again as he nibbled the opposite side of my neck. \n\n\"Well, you must be - what else would you be doing in my bed, naked?\" \n\nThen his head disappeared under the blanket, and I felt him slide downwards pressing kisses to my neck, then my collarbones, then finally taking a nipple into his warm mouth. I groaned, biting my lip to stifle any noise, pulling him closer and arching into him. I could feel I was already wet and needy, but he took his time, teasing me with his stubble, little sucks and nibbles inflaming my skin, driving me mad. \n\nHe was kneeling between my thighs, his leg pressing up against me, and I tried to grind down against him, wanting more stimulation. I could feel his breath ghost across my abdomen as he chuckled and moved his leg away; I whined, stuffing the side of my hand in my mouth - my lip was starting to bleed, and I still needed to avoid the noise I knew I'd be making in a moment. \n\nNot shouting his name when I felt his tongue tease at my lower lips took every ounce of willpower I had; not murdering him when he refused to do more than tantalise was even worse. He lapped at the moisture, not enough pressure to even dip into my slit, and I bucked, unsuccessfully. A few more moments and I reached down, grabbing a handful of short hair and tugging. \n\nI got one merciful swipe of his tongue over my firm little nub, and then he stopped. Just stopped. I almost cried in frustration. He slid back up beside me, stroking my belly in soothing motions while I panted. \n\n\"Dare I ask what I'm being punished for?\" I asked, voice hoarse with restrained lust. \n\n\"For insisting we pretend not to be married. For making us sleep apart.\" \n\nI opened one eye to glance at him, trying to evaluate the seriousness of his complaint. His expression was a mask that I couldn't read, and I grunted and rolled to face him. \"Alistair-\" \n\n\"Don't you 'Alistair' me.\" He exaggerated the last syllable of his name like I did, not saying 'Alister' like most Fereldans. \"You say it's necessary, but I'm going to lose my mind, having to pretend to be a king, to act like I want this...and now I don't even have you with me.\" \n\n\"You listen to me, husband. It doesn't matter whether I am holding your hand, whether I'm ten feet away or a thousand, I am always with you. Always.\" I slid on top of him, wrapping my arms around his shoulders and pressing my face into his neck, desperately trying to assuage my feelings of guilt. \"I love you, Alistair Theirin.\" \n\nHe sighed and pulled me closer, the calluses on his hands making me shiver as they stroked my back. \"I know. I love you too. I just hate this, after everything...\" \n\nI kissed him then, twining my tongue around his, letting him taste the blood on my lower lip. He groaned and squeezed me tighter, one hand sliding down to cup my ass, the other holding my head, massaging my scalp lightly. \n\n\"Let me make it up to you,\" I whispered, spreading my legs to straddle his hips, sliding back and sitting up until I had him sheathed snugly inside me. I put his hands on my hips, encouraging him to set the tempo by lifting and plunging me back down, while I gave him a little show, cupping my breasts, tweaking the nipples. He groaned, voice thick, and it was so sexy I shuddered. Soon I was rocking frantically, one finger rubbing my clit, my head thrown back in ecstasy. I'd stopped worrying about being quiet, and my gasps echoed slightly in the large room. I'll just have to hope this room is mostly sound-proof. \n\nMy orgasm crashed over me unexpectedly, the frantic pace he set combined with the pent-up frustration of him teasing me earlier combining to undo me, and I collapsed against his chest with a sob. He let me lay there, stroking my hair as I recovered, and then I found myself being rolled over onto my back. He was still hard, still buried inside me, and I gasped in surprise. \n\n\"I'm not done with you yet, little minx,\" he whispered as he began thrusting into me, slowly, grinding against me with every stroke. \n\nI shuddered as my over-wrought nerves responded to his insistence, his assertiveness as arousing as I always found it; I looked up at his beautiful face, forehead pressed against mine, eyes closed in blissful concentration. \"Once more for me, love; I want to hear you scream.\" \n\nEntirely distracted by the fire crawling through my veins, I tried to demur, \"I can't - no one can hear-\" \n\nHe chuckled and picked up the pace, rubbing against my neck with his stubble. \"Not my idea, remember? Personally, I don't care if everyone hears.\" He ground against me again and nipped the irritated skin of my neck with his sharp teeth. \"Come for me, darlin'. One more time, I want to see you come apart at the seams.\" His Starkhaven accent was back, and I moaned as he continued to talk dirty in my ear. \n\nHis pace picked up again, and I couldn't take it anymore; I felt my pelvic muscles clamp down, and in a panic I bit into his shoulder to stop the wail from escaping my throat as I came. His rhythm suffered as he spilled himself inside me, letting out a muffled roar of completion, and then he collapsed on top of me heavily. \n\nWhen he finally rolled off, I looked ruefully at his shoulder where I'd left visible tooth marks, though fortunately I hadn't drawn blood. I blushed and he smirked at me. His fingers brushed over my swollen lip, not bleeding anymore but still tender. \n\n\"We're going to need to get you a muzzle if we keep this up,\" he teased. \n\n\"Since when are you such a pervert?\" I groused, trying unsuccessfully to hide a smile. I curled up languorously in his arms, listening to his hammering heartbeat slowly relent. \"I don't want to be apart, you know that, right?\" \n\n\"I know.\" He kissed my hair. \"It was a good excuse to tease you, though. Seeing you like that - flushed and desperate...\" \n\n\"I've created a monster,\" I sighed, and he laughed. \n\n\"Maybe tomorrow I'll set up our tent in here.\" \n\nWe shared grins, and fell asleep still smiling. \n\nI woke to darkspawn nightmares, sitting straight up with a strangled gasp. Alistair was still sleeping, looking so vulnerable, so beautiful in the dim light. I pressed a kiss to his forehead before finding my clothes and dressing quietly. \n\nI snuck across the hall in the early morning, before the servants were up for the day, cursing my stubborn need to show Anora off in the worst possible light. I stumbled into my own room to steal a few more minutes of sleep, as well as to mess up the bed so no one would notice I hadn't slept there. Solona was sleeping on her stomach, one arm falling off the edge of the bed, her mouth open and snoring softly; without waking her, I crawled onto the other side of the large bed and fell deeply asleep.  \n\nAedan knocking on the door woke both Solona and I some time later; we dressed quickly and headed into the estate's dining room to find Duncan, Alistair, Zevran, and Aedan gathered before us with Teagan and Eamon. A quick glance around found a fully armoured, helmeted Theron 'guarding' the door. Alistair gave me a big smile that he hastily hid with a large mouthful of some sort of pastry. Aedan told Solona she was welcome to have breakfast in the barracks with the men, and she hurriedly excused herself to do so. There was a new face seated near Eamon, an elf who could only have been Erlina. \n\nHer accent wasn't quite as irritating as Isolde's, but her voice held none of Leli's sweet lilt either. She was a thin, nervous-looking woman who kept wringing her hands in an overly-dramatic display that left me comparing her to bad B-movie actors on Earth. \n\nShe was in the middle of a conversation with Aedan and Eamon, to which Duncan was simply listening, expression inscrutable. The discussion resumed where it left off as I sat down and began filling a plate. I half-listened, knowing what she was going to say, but realised that Aedan had totally ambushed her and left her reeling. I struggled not to laugh. \n\n\"Oh, but Warden, my Lady! She is in danger, and-\" \n\n\"Yes, yes, she's been taken by Arl Howe, we know. What I'd like to know is what makes you think we have any interest in freeing her?\" I saw Theron twitch, but fortunately he managed to keep his mouth shut. \n\n\"She is the Queen! You will need her support...you will be held accountable if she comes to harm and you could-\" \n\n\"What, you think the Landsmeet will hang us for not risking our lives to cross Howe? If you had any sense, you'd have gone to some of those other nobles and asked for help, and I'll bet they've said no. I'm not saying we won't rescue her, but you have to admit this is the most preposterous way of asking for a favour, especially one that isn't really beneficial to us in any way,\" \n\n\"Warden...\" Eamon began. \n\nAedan waved him off. \"Like I said, I haven't decided we won't rescue her. But what I will say is that we aren't going to be requesting your help to do so. Thank you for notifying us of her Majesty's situation; we will take it from here. You are excused.\" His firm tone would brook no argument, and so with one last imploring glance sent Eamon's way, she stood and meekly crept out of the room. \n\nEamon gestured and the other servants filed out behind her; Theron closed and locked the door and turned, pulling of his helmet. \n\n\"Aedan,\" his tone was a mix of anger, shock, and disappointment, \"what in the void was that about? You don't want to free my wife?\" \n\n\"Theron, think about it for a moment. We know from Sierra that when we go in there, Cauthrien will be waiting with overwhelming force to capture us. I don't know who or how, but someone finds out what Erlina's plan is, and spills it to Cauthrien. Maybe it's Anora - we've all already admitted that's a possibility. But what if it's Erlina? Howe could have turned her, threatened her. Maybe she was never that loyal to Anora. We will find your wife, but no one can know when or how we'll do it.\" \n\nTheron sank into a chair and ran a shaky hand through his golden locks. \"Erlina has been with Anora since before we were married. I'd hate to think...\" \n\n\"She could be being blackmailed. Maybe she has family they've threatened. We can't be sure. And if it isn't her, she can't accidentally tell anyone else what she doesn't know, including Anora, either.\" \n\nTheron nodded, stuffed a piece of bacon in his mouth, grimaced, and put his helmet back on. \"I hate this thing.\" Alistair nodded sympathetically, and I winced thinking about the lice incident. Helmets weren't my favourite thing either. Theron stood, unlocked the door, and then turned back. \"I don't want to know your plan either. I think I'll go train with the soldiers, perhaps.\" He left, pulling the door shut behind him. \n\nThere was silence for a few moments after the door closed, and then Aedan sighed. \"That could have gone better.\" \n\nI shook my head. \"Chould have gone much, much worse. He's growing up.\" \n\nAlistair grinned at me, and even Eamon smiled. \n\nDuncan cleared his throat. \"Anyone have any brilliant ideas?\" \n\nZevran sat forward, all pretense at languid lounging gone. \"What we need, my friends, is a distraction, no? Something that will draw Loghain - and this Cauthrien - out. Something that won't give them enough time to call Howe away from his dungeon. If they are busy, they cannot capture our dear Warden, or anyone else.\" \n\n\"What would you suggest?\" Aedan gave Zevran an approving smile, and the assassin actually blushed slightly. \n\n\"As awesome as I am, I'm afraid I don't have any good ideas in that regard. Everything I can think of could involve someone getting hurt, which knowing you, you'd like to avoid.\" \n\n\"I have an idea, actually,\" Eamon stated, surprising me. \"With the right support, I think we could draw their attention with a staged protest. If the right people - me, Alistair, Teagan, maybe Alfstanna or Leonas - go to the Palace gates with enough support to ensure our safety, we could demand to talk to Loghain. If we make a big enough fuss, Loghain will have Cauthrien doing gate security. During that time, Warden, you could sneak in to the Arl of Denerim's estate and rescue Anora.\" \n\nDuncan appeared thoughtful. \"I may be able to improve the chances of Cauthrien being there by showing myself. By now Loghain must be aware that I am alive - I'm sure that messenger outside Orzammar sent word - and he will send her to arrest me. If we travel with enough support, they won't be able to do so, but it will definitely gain their attention.\" \n\nAll of us immediately started loudly protesting, except Eamon, whose expression was carefully blank. I narrowed my eyes in suspicion, wondering if he was somehow hoping to get rid of Duncan to gain more control over Alistair or even Theron. Aedan noticed my gaze and cut off all the arguing with a gesture to Eamon to speak. \n\n\"What would you like me to say?\" the nobleman asked. \"Duncan is right. It will definitely draw the attention we're hoping for. But there's no doubt it's dangerous - if they have more forces than we believe they do in the Palace, they could be successful in arresting him, possibly even anyone who supports us. But the choice is Duncan's to make, is it not?\" \n\nI stared at him, wishing for some form of ESP, trying to see signs of deceit in his expression; there was nothing. Aedan and I exchanged glances, and he shrugged slightly. \n\n\"It's worth the risk,\" Duncan declared. \"If the worst happens and I am killed or captured, you can go on to end the Blight without me.\" \n\n\"Duncan...\" Alistair protested, with no convincing argument but still not happy about the concept. \n\n\"It will be alright, Alistair. Peace.\" He put his hand on my husband's shoulder, and I saw Alistair squeeze his eyes shut, trying to block out the worry. \"Besides, you'll be coming with me. I won't be alone.\" He turned to Aedan. \"If you're going to try to sneak in, you're going to need a small team talented at hiding in the shadows. I'd suggest that you take three non-Wardens with you, and the rest of our group can come with me.\" \n\nAedan nodded, thinking. \"We need to do some reconnaissance, find a way in. I think I'll bring Zev, Leli, and Wulf, if he'll agree. And Anders, if that's alright; we'll need a healer. We also need a rescue plan in place in case I am taken, in spite of our precautions.\" ",
        "With that, it was decided that Zev and Leli would be sent to scope out the estate, while Aedan, Alistair, and Eamon would drop in on some of the other nobles currently in Denerim and try to convince them to march on the Palace in a few days. Duncan wanted to sneak into the Warden compound; the rest of us would either stay at Eamon's, or serve as security walking around Denerim. \n\nAedan asked me to stay behind and keep an eye on Theron, who for all his recent maturity, was still a bit impulsive; Zevran left to grab Leliana and head quietly out into Denerim, and Alistair and Aedan got dressed, while most of our companions escorted them, Eamon, and Teagan to the Gnawed Noble. \n\nI availed myself of a bathtub, not missing the evident relief when I explained to the servants that they didn't need to bring me hot water; I showered, using Sereda's gift, then dressed warmly and went out to find Theron. \n\nHe'd spent the morning training, and asked to borrow my shower; he cleaned up out in the barracks - currently largely empty as most of the soldiers were either guarding the estate or escorting Eamon - and met me in the library, a similar room to the one in Redcliffe Castle. He wore his helmet through the estate, only taking it off after locking the door behind himself. \n\n\"I hope you don't mind? I hate this helmet, and I have to wear it constantly here.\" \n\n\"Of course not. I appreciate the company - I hate being left behind.\" I curled up in a chair, legs under me. \n\n\"Now you know how I feel,\" he grumbled, and I winced. \"I know, it's for the best, but it doesn't make it any easier. My brother is at risk because Loghain may try to assassinate him like he tried with me.\" \n\n\"Alistair will be fine. Loghain's not stupid enough to believe he could get away with that twice. And things have changed; he doesn't have the power, nor probably the manpower, to do it.\" \n\n\"I still wish to know why. Why he left us. Did he truly believe it was for the best?\" Theron looked sad. \n\n\"I don't know, Theron. There were a lot of darkspawn, and I'm not sure you could have been victorious even if he charged. Your father once made him promise never to risk the entire army to save just one man. But I still believe it was more personal than that.\" \n\n\"How so?\" \n\n\"Well, let me think.\" I scratched at my nose thoughtfully. \"For starters, can I tell you how I expect the conversation with him went when you informed him you'd be fighting in the vanguard with the Wardens? Tell me if I'm wrong.\" He nodded assent. \"Right. I expect he explained his strategy to you, and I'm betting he didn't assign you a place, or if he did, it was somewhere in the back, like with the squires.\" \n\n\"The servants, actually.\" \n\n\"Of course.\" I rolled my eyes. \"So you were offended and declared you would fight with the Wardens. And he went off on a rant about what a foolish child you were, and how you were so na\u00efve to trust the Wardens, and how the glory of battle was not meant for you. He told you to do your duty, and made some comment comparing you unfavourably to your father. And then you told him he couldn't make you follow orders, and you placed yourself in the Vanguard. Am I right?\" \n\n\"More or less, yes. There was considerably more shouting and disparaging my intelligence, but otherwise you are correct.\" \n\n\"And that's why I think it was personal. Because, Theron...anyone who knows you would realise that he chose the worst possible strategy for making you comply. You're many things, but you do not lack conviction. You don't see yourself as a coward or stupid, and you will struggle against any odds to prove someone wrong, especially Loghain, if challenged. The worst way to get you to do something is try to force you to do it, to make it a battle of wills.\" \n\nHe nodded, looking confused. \n\nI sighed. \"Do you know what I would have said, in his place?\" He shrugged. \"I would have chosen a place - perhaps on the bridge over the battlefield, or somewhere else - where you were prominent, you could be seen, but you could also see the entire battle. I'd have a group of messengers, a few soldiers, and a mage standing with you. And I'd have made you the commander. It would be for you to decide when to light the beacon, when Loghain would charge; when to retreat, if it didn't go well. And do you know what I'd have said to convince you?\" \n\nHe looked intrigued, which I took as a good sign. \n\n\"Do you play chess? Does chess exist here?\" \n\n\"Yes. It's an Orlesian game - not many Fereldans play, but I learned. I used to play with my father, and sometimes Anora or even Loghain.\" \n\n\"And when you play chess...when a piece, say a knight or a castle, when they checkmate the opposing king, and win the game, is it the piece we celebrate? Do we take it for drinks, toast its skill, keep portraits of it on the wall? Is it the piece that gets the glory? Or is it the hand that moved it, the mind making the tough decisions that we admire? Soldiers, even Grey Wardens...they are chess pieces. To be used strategically when necessary, by a superior intelligence watching the big picture and choosing the battles. You were not meant to be a pawn, or even a knight; you were meant to be the mastermind, watching the battle and moving the pieces. You needed to be somewhere you could see and control the flow of the battle, even if that meant a retreat when defeat was obvious. Standing in the vanguard, all you could be is a pawn.\" \n\nI stopped and let him think for a few moments. I could almost see the wheels spinning. \n\n\"If Loghain had said that, had told you that the glory goes to the best Commander, not the best chess piece, what would you have done?\" \n\n\"I'd have been the Commander.\" He smiled ruefully. \"You're saying he manipulated me into being somewhere I would get killed.\" \n\n\"Only if the battle went poorly, of course; he couldn't justify his withdrawal afterwards otherwise. But I think he suspected the battle was a losing proposition with the forces you had at your disposal, and he used the opportunity to get rid of you. After so many years, practically raising you since childhood, he knew what to say to make you sacrifice yourself. If he'd wanted you to survive, he could have convinced you not to be in the vanguard. For that matter, he could have knocked you over the head and put you on a horse. But once your mind was made up, neither Duncan nor anyone else could change it. The loss of the army, the Grey Wardens...that may have been inevitable. But with you, it was personal.\" \n\nHe scowled. \"So that's it? I'm so stupid I couldn't even see through his manipulations, couldn't make my own decisions? Maybe he was right and I shouldn't be king.\" \n\n\"Cailan...no.\" Calling him by his proper name seemed to anchor him somehow, calm the rage bursting from him. \"He was wrong, about a great many things. You aren't stupid. A little too trusting, perhaps, but how could you have known your father's best friend, the man who practically raised you, would lose his mind? Your father left a long shadow, and you never felt like you could do anything to prove your worth, while you were standing in it. And those who knew you, who were supposed to protect you, used that to try to destroy you. That is not your fault. All you can do now is learn from it. Listen to the counsel of those around you, but make your own decisions about what's best. At least then, if you make a mistake, you have no one to blame but yourself, instead of knowing that the mistake was someone else's, but you will be left to pay for it anyway.\" \n\nHe stood abruptly, and paced across the room silently a couple of times. His hair had almost grown out again, the last vestiges of the brown dye long gone, and he combed his fingers through the golden strands roughly as he walked. Suddenly he stopped, turned and bowed to me, to my absolute surprise. \n\n\"Thank you. For being the only person to treat me as a person, not a king, or a foolish boy. I have much to think about, and I bid you goodnight.\" He squashed his helmet back on his head, spun on his heel, and left. \n\nI sat, openmouthed as he walked away. Well, that could have gone worse, I suppose... \n\nChapter Ninety-Eight: Insecurity \n\nDuncan arrived back at the estate first, carrying sacks full of armour and weaponry, not anything special but serviceable enough. When he'd been there last, the stash had been raided, presumably by Loghain, but while any documents as well as the Joining supplies had been removed, the gear had been left behind. To the horror of a couple of passing servants, I helped him sort it out into piles in the foyer, and then repack it in a more useful form - I was that bored. We stored it all in the armoury, out in the barracks; Theron was beating the stuffing out of a sparring dummy, and we both left him alone. \n\nWe ended up eating supper with a small group that included Anders, Jowan, and Solona, as well as Duncan and I; Theron declined to come in from the barracks, and no one else had returned from the Gnawed Noble. Wulf was a topic of conversation; Duncan listened silently while the rest of us discussed the former werewolf openly. \n\n\"He told me werewolves age differently than people. He has no idea how old he is; I thought he might be eighteen, but he tells me he's probably over thirty.\" Anders was fascinated by the physiology of his transformation. \n\n\"But he might as well be younger than me, for all the cultural knowledge he has,\" Solona added. \"I've watched him with the elven servants; he has no idea how to interact with them.\" \n\n\"His restraint is admirable, though,\" Jowan opined. \"I saw one of the soldiers - who apparently didn't realise he wasn't one of the servants - try to order him around; he didn't even react until the soldier called him a knife-ear, and then all he did was draw his dagger and start flashing it around like Zevran does, looking all menacing. The soldier apologised and backed away slowly.\" \n\nI laughed. \"He certainly has that menacing thing down pat. Have you heard him growl? I never want to be on his bad side.\" \n\nAlmost as one, everyone turned and looked expectantly at Duncan; he deliberately shoveled a large forkful of food into his mouth and chewed slowly, not making eye contact with any of us. Anders sighed, and we all went back to eating as well. I wonder if he's made any decisions? \n\nIt was late when the group at the Gnawed Noble finally returned; it was a good thing Eamon, Teagan, and Aedan had stayed sober, because it was immediately obvious when he stumbled through the front door that Alistair had definitely not. \n\nMy husband was practically cross-eyed, one arm slung over Aedan's shoulders, the other being held by a rather irritated-looking Faren, who was dressed like a common soldier. And Alistair, along with an equally smashed Oghren, was singing. Loudly.  \n\nEamon and Teagan bowed out, leaving the enthusiastic drunks to us. I shot their retreating backs dirty looks, then turned to Aedan. \n\n\"What in the Void...?\" \n\nAedan shrugged sheepishly. \"As, erm, distasteful as this is, it's actually a good sign. The tavern was full of nobles who are sick of Loghain - the lies, the civil war, his apparent inability to even keep Denerim safe - they kept toasting Alistair, and he really didn't have any choice but to drink. Turns out even a sip at a time can be a little overwhelming after a while.\" \n\nI rolled my eyes. \"Well, I'm not carrying him. Think you can get him back to his room?\" \n\n\"'M right here, you know,\" Alistair grumbled. \"Could talk to me, not about me.\" \n\n\"And you won't even remember it tomorrow. Just don't pass out until we get to your room,\" Faren grumbled. \n\n\"Hey, where's Zevran?\" I wondered, doing a brief head count. \n\nAedan's eyebrows climbed. \"I thought he'd be here.\" \n\n\"Nope. Huh.\" \n\nFaren and Aedan maneuvered Alistair to his room, and dropped him unceremoniously on the bed. Aedan excused himself to go find Zevran, and Faren turned and left without a word. They left me there with Alistair, who was looking at me with a goofy grin. I grabbed a pair of his cotton sleeping trousers from the armoire, and approached my husband with the armful of cloth. \n\nHe made a grab for me as soon as I came into reach, missing and having to correct his aim before managing to get his arms around my waist. He pulled me closer and pressed his face into my belly, nuzzling against me. He smelled like ale and smoke, and I wrinkled my nose. \"Did you actually have to drink this much?\" \n\n\"Yup!\" he declared cheerfully, pulling me into his lap. \"Aedan said so.\" He took the trousers from my hand and tossed them to the floor behind me. \"Don't need those. 'M gonna sleep naked. With you!\" \n\nI giggled; drunk Alistair, for the moment, was cute, if pungent. I wondered if the...performance problems in bed that I'd heard rumours of on Earth applied to a Grey Warden; in any case, it didn't really matter, because I wasn't sleeping with him until he smelled better. \n\n\"You stink, love. Let's get you undressed, and you can go sleep it off.\" \n\n\"But...but...\" He seemed to be trying to make a point of some sort, but he couldn't keep his thoughts straight. He pulled me tighter to him instead. \"Stay?\" \n\nDamn puppy-dog eyes are going to be the death of me! I sighed. \"Fine. But no funny business.\" He pouted, and I just laughed. \"Not my fault you're drunk as a skunk!\" \n\nI helped him remove his tunic, and pushed him back on the bed; I hadn't even had time to kneel down to help him with his boots and pants before I heard snoring. Looking at his gorgeous, relaxed, sleeping face, I couldn't stay annoyed. It's a good thing he's cute. I groaned and set to work getting him the rest of the way undressed. Fighting with his pants took far too long, and in disgust I left his smallclothes in place. I lifted his legs into the bed, covered him with a blanket, undressed myself, and crawled in on the other side of the bed. I curled up as far from the smell as I could get and promptly fell asleep. \n\nI snuck back into my own room in the early morning; Alistair didn't even stir as I left. When I got up for breakfast, Alistair was there, looking pale and wan; he tried to smile at me, but just looked like he was going to be sick. I sat far from him, just in case. Aedan, Zev, and Leli were there; Eamon, Teagan, and Theron were conspicuously absent. They asked me to lock the door, which I did, before sitting down and filling a plate. Alistair chewed listlessly on a bun, looking green every time someone offered him anything more. \n\nZevran filled us in on what he and Leliana had found, watching the Arl of Denerim's estate. \"There's a side entrance we could access, but it goes through the kitchens. We'd be seen, even as awesome as we are.\" \n\n\"That was Erlina's plan,\" I explained. \"She was going to give you all guard uniforms, and distract the outside guard.\" \n\n\"That's out for a few reasons, then.\" Aedan looked at Zevran. \"Anything else?\" \n\n\"The ramparts,\" Leli cut in. \"It will take some work to get up there, yes? But it can be done. There's only one or two guards up there at any given point. We'll need another day to map out the guard's schedules.\" \n\n\"Very well. I'll tell Eamon to organise his distraction for tomorrow. Alfstanna and Leonas were at the Gnawed Noble last night toasting Alistair.\" Alistair groaned and rubbed his forehead ruefully, and Aedan smirked. \"I don't think it will be hard to get them to agree to confront Loghain, especially if we don't tell them why. That being the case, I'd like to go check out a few things in the city today. Sierra, can you stick around here and play bodyguard? I want Alistair to stay close to Eamon today while he sends out messages. I'll meet everyone else in the barracks.\" \n\nAlistair went off to have a bath drawn up; Wynne popped in with a potion to help with his hangover, much to his relief. Wynne decided to stay with us as we watched Eamon, and Aedan, Zev, and Leli disappeared to the barracks. I put on my armour and met a much-better smelling Alistair in the hallway outside Eamon's study. Wynne and I stayed in the hallway while Alistair braved the scowl on the older man's face and went in. \n\nThe day was boring, mostly consisting of sitting around and doing nothing. We did go on a brief walk, stopping by Bann Alfstanna's estate and Arl Bryland's. Wynne and I stayed with the small group of soldiers escorting Eamon and Alistair; Teagan chose to stay behind and keep an eye on Erlina, who'd been reported by some of the servants as asking a lot of inappropriate questions about Aedan, Alistair, Duncan, and the rest of us. \n\nAt the estates, we were left standing around while Alistair and Eamon spoke with the nobles; I did get a glimpse of Alfstanna when she greeted us. In game, she had seemed quite practical; I liked her immediately upon seeing her. She wore casual trousers and a shirt around her home, and I recalled she wore nothing but armour outside of it. She was pretty, with smooth, lustrous brown hair and a kind smile; her mouth was a bit too wide, her eyes a little too large, to qualify as truly beautiful. She looked sort of average, which was refreshing, and actually stopped to offer those of us who weren't allowed into the meeting refreshments while she spoke with Eamon and Alistair. \n\nWe left there and headed to Leonas Bryland's estate. I couldn't recall his appearance from the game, but I knew he was the father to Habren, the obnoxious teenager who I was only too happy to steal from in game. I didn't get a chance to find out; Eamon and Alistair were shown in by a servant, and the rest of us were left bored in the foyer. \n\nBoth meetings were short; Eamon deigned to inform us that both nobles had agreed to support our 'protest' the following day. We went back to the estate, and I spent the rest of the afternoon playing footsy with Alistair under a table as we played cards. I taught him gin rummy, since I was terrible at bluffing. I still didn't win, so apparently Alistair was just better at cards than me. I'd have thought he was cheating if he was anyone else. \n\nA group consisting of Bel, Oghren, Wulf, Solona, Jowan, and Duncan came back after having cleaned out the orphanage in the Alienage at the request of the blind templar, Ser Otto. I'd forgotten about that quest, and wished they'd asked me before they had gone; Ser Otto died, which I could have warned them about, maybe prevented. I didn't say anything; I felt guilty enough, and didn't want them feeling bad. \n\nI was surprised that Duncan had agreed to the quest; it was entirely unrelated to the Blight or the Civil War. When I asked him, he merely shrugged, but his eyes strayed to Wulf's retreating back, and I guessed it had been a test - of skill, or perhaps temperament? - for the would-be Warden. I wonder if he passed. \n\nDuncan reassured me that no elves were being sold by Tevinters in the Alienage. He had learned that, using some of the coin and supplies Aedan had given them, many of the elves had secretly armed themselves; in addition, with the supplies they'd been able to buy, the plague had not spread through the Alienage. As a result, a group of healthy, angry, well-armed elves had chased the slavers out of the Alienage before they'd even been able to get established. The group had checked out the back alley and the tenement with the secret tunnel just in case, and found it empty. \n\nValendrian and Duncan had spoken for a while, both men urging calm and avoidance of violence. I wondered what the result would be of arming the elves, accidental though it may have been. The bigotry in Thedas didn't strike me as the kind of thing that bloodshed would improve, and I worried that a bunch of hotheaded, oppressed teenaged elves with weapons could lead to little else. Not much we can do about it now...though perhaps Theron could put them to use in the army, like Sereda did with the Casteless. ",
        "The group went to get cleaned up, and Alistair and I went back to playing cards. We were interrupted again by the return of a group including Aedan, Prince, Anders, Morrigan, Sten, and Faren. Aedan refused to tell me what they'd been planning to do, but they returned practically dripping blood, with several barely-healed injuries among the lot, and Anders' and Morrigan's mana reserves entirely depleted. Wynne came running over to check on everyone, and after helping them heal up, all of them except Aedan were ushered into beds to recover. \n\nAedan, refusing to bow to injuries or fatigue, met with Alistair, Duncan, and I in the library. He limped slightly, and I hurried to his side, putting my arm around his waist and allowing him to lean against me. He kissed my forehead and wrapped his arm around my shoulders gratefully. \n\n\"Aedan, seriously, what were you up to? You weren't that badly injured. All of that blood couldn't have been yours.\" \n\n\"Doesn't matter about that.\" He shook his head. \"We ran into the Crow sent to kill Zevran.\" \n\n\"Taliesen,\" I whispered, suddenly worried. \"Where's Zevran?\" \n\n\"He said he needed some time.\" Aedan's expression was dark. \"I hope he's back with Leliana watching Howe's estate.\" \n\n\"He's not,\" came the lilting Orlesian accent of the red-head. \"We followed Taliesen to you, and when I returned to Howe's, he took off on his own. Said he had things to think about.\" \n\n\"But Taliesen's dead, right?\" I looked between Leli and Aedan anxiously. \"He didn't convince Zevran to try to leave with him, did he?\" \n\n\"Of course not.\" Aedan looked offended. \"Zev's...he's free now.\" \n\nI examined my brother's face; there was something I was missing, but I was afraid of finding out what. \"Aedan, tell me exactly what happened.\" \n\nHe started describing the details of the fight, and I interrupted him. \"No, no, after. You killed Taliesen and the other Crows, and then...?\" \n\n\"We talked.\" Aedan scowled, and I got a sick feeling in the pit of my stomach. \n\n\"What about?\" \n\nHe looked away, refusing to meet my eyes. \"He...he asked me if I would hold him to his obligation. Said that, now that Taliesen is dead, he's free, and asked if I'd let him go.\" \n\n\"And you said...?\" \n\n\"I told him of course he was free to go.\" \n\nThe sick feeling coalesced into a strong feeling of dread. \"But not just like that, right? You said he could go if he wanted, but that you hoped he'd stay. That you wanted him with you. Right?\" \n\n\"He knows that.\" Aedan's cheeks had flushed defensively. Leliana gasped and covered her mouth with her hand, and Alistair shifted uncomfortably. \n\n\"But you didn't tell him. You just told him he was free to go.\" He nodded, and I just about cried. \"Aedan, you are the biggest Maker-damned fool I've ever met. Let me guess - you've never even told him you love him.\" \n\n\"He knows that!\" he repeated, sulking. \n\nI groaned. \"No, he doesn't. He doesn't trust his own judgement when it comes to love. And instead of reassuring him when he was seeking confirmation, you told him to go.\" \n\nAedan looked away petulantly. \"It's not like he's ever said it either.\" \n\nBefore my mind caught up with my actions, I reached out and slapped Aedan's cheek. Not hard, but the shock of it had him looking up at me, his expression clearly showing betrayal, his hand over the spot I'd slapped. Before he could speak, I began ranting. \"Did it never occur to you to ask him to translate any of the things he said to you in Antivan? Not even once? Tell me, brother, what is his nickname for you? He calls me 'cara mia', or 'mia sorella'. \"My dear' or 'my sister'. What does he call you?\" \n\n\"Amore mio. So?\" \n\nI looked at Leli, whose face had gone white. \"You speak any Antivan, Leli?\" \n\n\"Enough for that,\" she whispered, horrified. \"It means 'my love'. Didn't you know?\" \n\nAedan blanched. \"He knows I don't speak Antivan!\" \n\nI sighed. \"Yes, but he also knows that at least two of us in the group could translate that sentence. I imagine he thinks you know, maybe thought that you cared enough to ask someone else for a translation.\" \n\n\"But I...I didn't...why did he say he wanted to leave now that Taliesen is dead?\" \n\n\"He didn't, dimwit. He asked if you wanted him to. Listen, did he ever tell you about his last mission, the one before he came to Ferelden?\" \n\nAedan shook his head, confused by my change of topic. \n\n\"Okay, I'm not going to tell you. That's up to him. You're going to stay here and think about what you've done. I'm going to go find him. And when I bring him back, you had better fix this, brother, or so help me...\" \n\nI stood, glad I still wore my armour. Leliana and Alistair stood with me. \n\n\"I'm coming.\" \n\nI nodded at Alistair, thankful for the backup. \n\n\"Me as well,\" Leliana offered. \"I'll help you look.\" \n\nAedan looked at the three of us, unshed tears glistening in his eyes. \"Find him? Please? I didn't...I didn't know. You have to find him.\" \n\nI nodded and pointed; Aedan limped off to his room slowly, shoulders slumped. I turned to Alistair and Leli. \"I'm hoping we won't have to look that hard. I think I know exactly where to start.\" \n\nLeliana nodded. \"The Pearl.\" \n\n\"Exactly. Let's just hope we find him before he does something really stupid.\" \n\n\"Like...with a whore?\" Alistair whispered in horror. \n\n\"No, worse. Like getting on Isabela's boat and convincing her to cast off.\" \n\nThe trip to the Pearl didn't take long, but it felt a lot longer; we walked in grim silence, each of us knowing that if we didn't find him, and soon, Aedan would fall apart. I guessed Aedan, in response to Zevran leaving, had thrown his group into some sort of suicidal fight unprepared - probably killed Gaxkang the Unbound, or some stupid thing - and it would only get worse if we couldn't find the assassin before Aedan got everyone killed. \n\nI couldn't believe my brother's stupidity. How could he not have seen Zevran's insecurity? It was obvious even to Alistair, who was not the most insightful man when it came to others' feelings. In many ways, what he'd done would be no better than how Alistair had reacted after finding out my character had romanced his in the game. Zevran would take it as a sign that he'd never been loved, that Aedan only considered him a temporary way to work off some physical arousal. I worried that we wouldn't be able to bring him around. \n\nWalking into the Pearl was awkward, as always; wearing armour made it slightly more bearable, but it didn't completely stop the lascivious looks from drunken patrons. We made our way across the main room to find Sanga. She didn't even have to ask; she pointed out a room down the back hall silently and handed me a key. I gave her a grateful nod and a pouch of coin to compensate her for...whatever Zevran had gotten himself into before we arrived. \n\nWe crept down the hall, and I listened at the door before opening it with the key. I had no intention of walking in on Zevran in flagrante. I couldn't hear much, and wasn't sure if the door was just thicker than I'd assumed, or if there was nothing to hear. Closing my eyes, I mouthed a quick prayer to anyone who would listen that Zevran would have pants on, and then unlocked the door. \n\nThe scene I discovered was not at all what I would have imagined. The first thing I saw was a dishevelled Zevran sitting at a table, shirt unbuttoned and hanging open, but still wearing pants. His hair was a mess, and his eyes blinked blearily at us; he hiccoughed and brought a mug to his lips, taking a drink and dribbling a bit down his chest. Across from him, on the bed, were two female whores, wearing nothing but crotchless lingerie, kissing and groping each other suggestively. They moaned and groaned like the stock audio track for a porn film, every action and sound exaggerated for effect. When I gasped out Zevran's name, the two stopped what they were doing and scrambled for covers, swearing at me for interrupting. \n\nI tossed a bag of coin onto the bed. \"Take a night off on me, girls.\" \n\nI didn't wait to see their response before I turned to Alistair, who very carefully kept his eyes averted from the large amount of female flesh on display; he leaned down and hauled Zevran out of the chair, and I grabbed the elf's other arm. He protested weakly, but together we manhandled him out of the room; Leliana ran ahead and must have bargained with Sanga for the use of a nearby room, because she came back with a key. We went into the empty room and dropped the dramatically inebriated Zevran onto the edge of the bed. Leli closed the door behind us, standing in the hallway with Alistair, and I sank onto a rickety wooden chair. \n\n\"Zevran,\" I began, and he winced. \n\n\"I do not wish to hear your lecture, bella donna, unless the three of you are here for a new experience?\" He tried to look seductive; in his current state he just looked pathetic. \n\nI sighed. \"I'm not going to lecture you, Zevran. Aedan already got my lecture; I'm here to make sure you're okay.\" \n\n\"Why would he need a lecture? Surely everyone is happier now that the perverted assassin is gone from his life, no?\" \n\nI switched from the chair to sit beside him on the bed, putting an arm around his slim shoulders. \"Do you really think so little of me, mio fratello? Just because Aedan's too stupid to admit how he feels doesn't mean I care about you any less.\" \n\nHe rested his head on my shoulder heavily; I wondered briefly just how much alcohol it took to get the Antivan this drunk. \"He doesn't...there's not...\" \n\nI'd never heard Zevran at a loss for words before, and it made me sad. \"He loves you, Zevran. More than anything. He's just...as insecure as you are, and stupid, to boot.\" \n\n\"I realise I have been the stupid one, cara mia. I believed there was something where there isn't.\" He sniffed and gestured out towards the hallway. \"I didn't...I tried, hoped I could make myself forget, but...I couldn't. The more outrageous the things they tried, the less it worked. That's never happened before.\" \n\nHe looked absolutely vulnerable in that moment, and I hugged him to me. Admitting to impotence? It's even worse than I thought. \n\nI kissed Zevran's forehead, nose wrinkling at the smell of ale. He curled into my shoulder, for the first time ever not even trying anything inappropriate, and I felt a tear drop onto my hand. A couple of tears of sympathy escaped from my eyes as well, and I hugged him closer, stroking his hair. \n\nI cleared my throat and tried to lighten the mood with a bit of humour. \"Don't worry. Your secret is safe with me. Your reputation will remain untarnished.\" \n\nHe choked out a laugh that was half-sob, pulling away and wiping his face with the sleeve of his shirt. \"Why did you come, Sierra, if not to lecture me?\" \n\n\"To bring you back, Zevran. Aedan has a lot of apologising to do, and maybe you won't forgive him, but we want you to stay, if you're willing. All of us. Please, Zev, come home?\" \n\nHe examined my face for a moment. \"Does he know you're here?\" \n\n\"Not here, specifically...but he knows we're looking for you. He begged me to bring you back. Zev...he needs you. And so do I. I could never have made it this far without you. And you're Aedan's other half, his perfect compliment. I'm sorry it took my brother's idiocy for me to tell you how much I love you.\" \n\nThe door to the room opened, and Leli and Alistair entered. The bard sat on Zevran's other side, and Alistair leaned back against the wall in front of him. \n\n\"The whole group relies on you, Zevran. We need your blades as well as your humour, yes? You are important to all of us.\" Leli gave the assassin a hug, and I smiled gratefully at her. \n\nAlistair cleared his throat. \"I admit I wouldn't have let you live if not for Sierra, but...I'd have been wrong, Zevran. You're one of us, and we need you. Please? Come home.\" He held his hand out to Zev, and the elf looked up at him skeptically. Alistair sighed and left his hand extended, and slowly, as though expecting a prank, Zevran gripped it with his own. \n\n\"I did leave my things back at the estate...it would be a shame to leave them behind.\" Zevran looked down at himself and grimaced. \"Especially as it would appear that I need a change of clothes.\" \n\n\"And a bath.\" I giggled, and the assassin shot me a small smile. \n\nLeliana reached into a small pack I hadn't noticed and handed Zevran a small healing potion. \"It won't prevent the hangover, but it might get you back to the estate on your own two feet, at least.\" \n\nHe nodded thankfully and drank; his eyes cleared a little and he sat up a bit straighter. \"You're... sure?\" \n\nIt hurt to see him so uncertain. I nodded decisively. \"I am. Even if I didn't think Aedan loved you, your place is with us, Zevran. Come home.\" \n\n\"Home? What a strange concept.\" He rubbed his face, then began buttoning up his shirt. \"Home, then.\""
    ],
    "authorname": "ElyssaCousland",
    "tags": [
        "fantasy",
        "fanfiction",
        "dragon age",
        "modern girl in thedas",
        "romance"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/there-and-back-again-ch-97-98"
}
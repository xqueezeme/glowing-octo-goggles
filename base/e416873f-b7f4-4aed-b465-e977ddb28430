{
    "title": "Hearts of Warriors Ch. 02",
    "pages": [
        " My thanks to mikothebaby for giving up her time to edit for me once more :-)\n\nEnjoy! \n\n*\n\nMackenzie watched the woman step forward, his dark gaze analysing the way she appeared to flow across the ground. Toned muscles rippled with strength, her movements fluid and graceful. He felt need claw at his gut, hard and relentless as he imagined other situations a body that tantalising could move in. It was unwelcome and irritating because Ruminskey still had that almost-smile on her face, as if she were reading his mind.\n\nHe felt his irritation ratchet up and fought to contain it. He was a firm believer that fighting in anger led to a man's downfall, particularly when you were simply training. In a fight, you need to stay clear-headed at all times, to analyse your opponent's weaknesses and strike at them. Allowing emotions to get in the way led to mistakes that caused serious injuries, maybe even death.\n\nSo he pushed down his irritation and watched the brunette carefully, trying to work out if there were any little tell tale signs he could exploit while they sparred. He wasn't expecting to see much until they began sparring, but he'd be a fool not to begin his assessment immediately.\n\nHe turned away from her and let his gaze travel over the others. \"Confidence in your abilities is commendable,\" he informed them, his voice low and cold. \"Overconfidence is a death sentence. You've made it this far but you still have two hurdles to get through. The first will be hand-to-hand combat with me. The second will come after I am satisfied you're worthy to be here.\"\n\nHis gaze turned back to Ruminskey who was standing at attention, her deep brown eyes riveted to his face. There was a question in her gaze as if she itched to ask what the second thing was. He had no intention of telling any of them what their last hurdle would be before they became Praetorians. Some of them may fail this stage and secrecy was paramount.\n\n\"Follow me,\" he said, turning on his heel and striding around the large house towards the back.\n\nLily had to bite down the urge to sigh with pleasure as she watched Mac walk away. Her expression appeared impassive but her body was humming with excitement. Her greedy gaze took in his strong back and narrow waist, but it was his thick thighs and taut ass which caused her the most pain. Lord, could a man look any hotter? The urge to sink her teeth into his delectable flesh was almost overpowering.\n\n'Concentrate, Lily,\" she mentally shook herself. If she became distracted by thoughts of hot sweaty bodies writhing together she was seriously going to get her ass kicked by Mac and destroy any hope of joining the Praetorians. She had to contain her lustful thoughts until the time was more appropriate.\n\nAs if she had the first clue about what to do with him anyway. Oh, she knew the whole concept about sex and mating; hell, growing up in a Were compound was an eye-opening experience. Wolves were very sensual creatures and she'd gotten many an eyeful of some very interesting things once she was older. \n\nShe knew all about lust and how wild and untamed it was between mates. She just didn't have any first-hand experience because her father had kept all men at bay from the moment she was old enough to be interested in the opposite sex.\n\nNot that she'd wanted any of her pack mates. Not after she'd seen Mac in the forest all those years ago. From that moment onwards he'd been all she'd thought about, her every fantasy. And she'd had lots of fantasies! \n\nDespite her lack of experience, Lily was confident in her own abilities. She was half Were and half vampire. Both species were incredibly sensual creatures in their own right. Combined they had to be spectacular and she had no doubts she'd be a very fast learner in the bedroom.\n\n\"Whenever you're ready, Ruminskey!\"\n\nMac's sharp words brought her out of her reverie and she realised she was still rooted to the spot ogling his backside like a teenager. She hid the flush which threatened to cross her cheeks and headed off after him, beginning one of her many mental exercises to focus her attention on what was to come. \n\nBehind the large house, the trees had been felled to create a huge open area. The ground was rough and hard and it was clear this was where a lot of fighting occurred. Some tree trunks had been placed together to the side, creating a natural seating area. The others had followed the two of them and one of Mac's men signalled to the other candidates to sit. \n\nThe Praetorians placed themselves strategically close to the house and the candidates. They appeared relaxed but Lily wasn't fooled. These vampires were lethal. One wrong move by any of the new recruits and they would act without mercy.\n\nMackenzie stopped and turned to watch Ruminskey come to a halt a few feet in front of him. He was in control of his emotions once more, ignoring her womanly curves completely and sizing her up for her fighting abilities. The reports he'd had about her said she was fast. That point had been stressed, so he knew to be extra vigilant.\n\n\"We train in weapons as well as our natural abilities,\" he informed the entire group, although his gaze was locked with his opponent's. \"You can use anything in that chest over there at any time.\"\n\nLily's gaze flicked to the chest that was being opened, having just been carried from the house by one of the Praetorians. She tried not to show her excitement. The V\u00e2rcolac had claws rather than the wicked talons vampires could produce. With that in mind, Gard had made sure they'd all been trained with knives and swords to protect themselves and keep vampires at arm's length. She excelled in both and she knew Mac would assume she would be a novice in that area like any typical vampire.\n\nA blur of movement out of the corner of her eye was the only warning she received as she was distracted by the chest. She moved instinctively, dropping down rather than stepping to either side. She knew she didn't have time to avoid him completely and he would most likely expect her to back away.\n\nShe used Mac's forward momentum against him, punching up hard into his solar plexus and sending him flying over her head. She came up and spun around, her eyes never leaving him as he twisted agilely in the air and landed facing her, instantly at the ready.\n\nA muscle twitched at the side of his mouth, the only indication he was impressed with the speed of her defensive move. \"Never become distracted when facing an opponent,\" he said, giving her fellow recruits a running commentary as he began to circle to the left. \n\n\"Distraction means not only failing to protect your charges but also your impending death. You must always know where your enemy is as all times.\" \n\nHe nodded slightly at Lily and she felt a rush of pleasure wash through her. She'd impressed him, her mate, and it made her wolf howl with glee that their male respected their abilities. Another blur and a hand slammed painfully into her breast bone, sending her flying backwards.\n\n\"Fuck!\" she hissed through clenched teeth, landing on her back but rolling instantly to the right and coming back up before Mac could launch himself at her again. She was furious with herself for being caught napping like that.\n\n\"Try helping me rather than rolling over on your back in submission,\" she derided her wolf, her eyes flashing with annoyance. Her wolf growled and crouched down low, eyeing their male with irritation. He was a sneaky one but they were sneakier. He didn't know just what was about to hit him.\n\nMac's lips curled in a slight smile, watching the irritation in Ruminskey's eyes as he landed a blow. She really didn't like that at all. He'd been surprised when she'd countered his first attack so easily, sure she was distracted enough that he'd land his first blow. \n\nHe wondered what she'd been thinking of that allowed his second blow to connect. He'd naturally pulled his punch. Breaking her sternum wasn't the goal today but he'd packed enough of his strength into it to ensure it hurt -- a lot. \n\nHe watched the irritation fade from her eyes to be replaced by calm thoughtfulness. He was impressed by how quickly she regrouped. Perhaps she was as good as his men reported her to be. He was instantly on alert. \n\nWhen she moved, she was so fast, so graceful that for a fraction of a second he could only stare at her in amazement. He braced for her attack, watching alertly to gauge where she was going to try and catch him off guard. She was almost on him when she suddenly veered away, catching him by surprise.\n\nThat split second of inattention was all Lily needed. Her gaze locked with Mac's and she saw the almost imperceptible widening of his eyes. She blurred as if moving left, watched his head tilt in that direction to track her. Her fist slammed down hard as she immediately countered her movement, catching him on the side of his face. Her other fist hit him in the sternum in the exact place he'd caught her a moment before.\n\nShe was over his head, flying gracefully through the air and out of arm's reach a nanosecond after her blows had landed.\n\nA startled gasp resounded from the spectators as Mac slowly shook his head and turned around to face the woman who had just done the impossible. No one had ever sucker punched the head of the Praetorians in that manner. Sure, he took the odd hit now and then when sparring, but Ruminskey had just made him look like a clumsy novice.\n\nWhile he could acknowledge that she lived up to her impressive file, there was no way he'd let her get away with making him look foolish, even if that's how he'd behaved. His attraction to her had knocked him off balance and he'd tempered his initial blow because she was female. He was furious with himself for making such a rookie mistake.\n\n\"Never underestimate your opponent.\" His tone was factual, calm, and steady. It masked the lethal anger he was battling deep down. \"And always learn from your mistakes.\"\n\nLily read the intent in his eyes but managed to keep her expression impassive. He was pissed and that meant this sparring match was about to get ugly. She would have to be at full strength to avoid being hurt, but she couldn't do that without Mac realising there was something different about her. An Elder at her supposed age simply could not beat someone as old as Mac.\n\n\"Crap, this is going to hurt, girl,\" she told her wolf with a sigh. \"You need to follow my lead. Don't get pissed and try to shift.\" She took a deep breath and felt for her animal's agreement. \n\nShe could hold her other half by sheer force of personality but she liked sharing equally with her wolf. She believed that was what made her so good when it came to fighting, her respect for her wolf and acceptance of her duality.\n\nMac attacked before she got her animal's full agreement and she hissed as she was suddenly overcome by a thing of sheer beauty. Even as she dodged away from the vampire he was flowing through the air, all sleek muscles, deadly speed, and bone-crushing accuracy. Talons raked down her left cheek, slicing into her neck and hitting her collarbone.\n\n\"Sweet Jesus!\" she groaned not even trying to counterattack, deciding to use her speed to get away from him before he could touch her again. Her face and neck ached and she could feel her blood flowing under her top and over the curve of her breast. \n\n\"You concentrate on keeping our scent masked while I work on healing,\" she told her wolf. She usually healed as quickly as vampires did but she wanted to make sure that nothing gave her away, so she split her concentration to ensure the wounds closed as quickly as they should. \n\nHer eyes glittered as she kept her gaze locked on Mac's face. His expression was impassive but she could have sworn she saw his nostrils flare slightly, as if the scent of her blood was a weakness to him. Pity she couldn't let it flow longer and keep him off balance. Still, it would dry on her skin and hopefully tease him mercilessly.\n\nSo the gloves were off? Fire raced through her, adrenaline making her body coil with expectation. He'd drawn first blood but he would not get away with it. She would have the scent of his before their sparring session was over. \n\nShe smiled a slow, lazy smile full of respect and also a hint of amusement. She already knew Mac didn't like it when she smiled. He'd be pissed that she was amused by his little nail session on her skin.\n\n\"Have we finished pissing about?\" she asked tauntingly. \"Let's do it then, Mackenzie. I was starting to get bored with your little love taps.\" She crooked a finger at him insultingly. \"Come and get me.\"\n\nIt had the desired effect. It shouldn't have. Mackenzie was too old and experienced to fall for a ploy as blatant as that but her quiet laughter, her deliberate taunting appeared to infuriate him. He came at her with talons out and fangs elongated. Lily suddenly had to use every single trick Gard had ever taught her to keep him at bay.\n\nThey spun, slashed, and danced around each other in a flurry of strength and speed. Mac managed to land blows but nothing as hard as his last hit, just as her own blows glanced harmlessly off him as she attacked and then spun away.\n\nHer male was lethal, poetry in motion as he parried and struck, twirling at superhuman speed to try and get under her guard. She danced towards him and then away, waiting for the moment when she could be close enough to draw his blood and be so quick about it that no one would notice her wolf claws coming out. \n\nIt was exhilarating, sheer joy to spar with her mate, to see and feel his strength flowing around her. She was strong and fast and she needed a mate who could keep up with her, who could earn her respect enough that she'd be willing to submit to him. Mac was proving to be everything she could need and more.\n\nLily finally got her opportunity, finally managed to slip under his defences while his huge body blocked her from the others. Her subtle shift was instantaneous, her wolf alert for it, sharp claw breaking through her fingertips. They imbedded deep into Mac's right side, punching hard and ripping down. Blood flowed, the rich, heady scent of it filling her nostrils and making her head swim.\n\nShe saw shock in his gaze, his lips tightening against the pain, then his black eyes turned feral and her heart thumped painfully hard in her chest. Agony like nothing she'd ever experienced ripped through her. Mac's talons tore through her shoulder as they stood locked together.\n\n\"Does that hurt, sugar?\" he whispered, gritting his teeth as her claws flexed inside him, curling instinctively against the pain she was experiencing. \"You don't know what real pain is, little girl.\"\n\nLily screamed hoarsely, white light exploded in her head as he ruthlessly dislocated her shoulder from within her body. Her claws retracted, her hand coming up to grip his wrist and pull him away. But Mac was already moving, releasing her as soon as she released him, backing up to watch her with cold, expressionless eyes.\n\nThe pain was excruciating and not something which would easily heal without some intervention on her part. He would expect the wound to right itself in the manner of vampires and that wasn't going to happen. She turned and blurred out of the clearing, vanishing into the surrounding trees. \n\nShe shadowed herself the moment she was sure she was alone, using the V\u00e2rcolac's unique skill of appearing invisible, unseen by the eye, their scent completely masked. Picking a spot, she stood silently so as not to give away her position. \n\nHer shoulder was throbbing; her blood had stopped flowing but she needed to knock her shoulder back into place to complete the healing process and that was going to hurt. She also knew Mac was going to come looking for her.\n\nMac stood in the clearing trying to fathom just what had happened. Sparring could be tough at times and pain was a necessary teaching tool, but what had just occurred crossed the line, even for his tough standards. \n\nHe'd become frustrated with Ruminskey as they'd sparred even as he'd been impressed by how good she was, how she managed to block his attacks with such skill and precision. She'd been exquisite and deadly in her movements, catching his interest as both a fighter and a man, which was how she'd managed to pierce his side. He'd become distracted by her and left himself open to attack.\n\nThat had infuriated him and he'd lashed out to counteract her blow. Something dark and dangerous has passed through him as she'd clawed inside him. Her actions had enraged him. Inside his head he could hear a word chanting over and over again. Wrong. It was wrong for her to hurt him. He couldn't explain it but he had reacted to it.\n\nHer resulting scream had pierced his soul. Somewhere deep inside him pain had blossomed and it had nothing to do with her talons clawing at him. It had felt wrong for her to hurt him but that was nothing compared to what it felt like returning the favour. It wasn't just wrong for him to hurt her; it was unforgivable.\n\nHe'd released her at the same time she'd released him, trying to conceal his stunned shock. Her eyes were clouded with pain, her shoulder at the wrong angle. The scent of her blood was in the air, his hand red and slick. \n\nBefore he could say or do anything, she turned and vanished into the trees. Her retreat confused him and he could only stare at her as she disappeared. Then he took off after her, ignoring everyone else as he hunted down his prey. For the first time in a long time he had no idea what he was going to do with someone once he caught up with them, and he didn't like that one bit. \n\nAndrea Ruminskey was messing with his head and he had no idea why he was letting her.\n\nLily held her breath as Mac streaked past her. She followed his scent, waiting until he was far enough away before pressing her lips tightly together and ramming her shoulder into the large tree trunk beside her. More agony raced through her but she managed to contain her scream this time. She leaned on the strength of her wolf as colours pulsed behind her closed eyes and tears slipped down her face.\n\nAfter a few moments, the pain receded and she flexed her shoulder carefully to check the injury. There wasn't even a twinge now that her healing abilities could complete the process. As she wiped at her wet face, her wolf growled in fury, livid with their mate for causing so painful a wound.\n\n\"It hurt like a bitch but we scored against him too,\" Lily soothed her beast. \"He is lethal though, isn't he? An excellent match for us. I think he's almost as good as Dad and that's saying something.\"\n\nShe wanted to be pissed at Mackenzie for hurting her but she had to concede that he'd won that battle. True, she had been hiding some of her more enhanced abilities and he probably wouldn't have caught her off guard so easily if she'd been at full strength, but his skills had been impressive. Even she could admit to that.\n\nShe slipped through the trees carefully and returned to the clearing. All eyes were watching the tree line, waiting for the combatants to come back. The Praetorians appeared surprised that she sauntered in on her own. She opened up her abilities and tested their emotions. Interesting! Shock, concern, surprise, and also respect. Something told her the recent sparring session had not turned out as most sessions usually did.\n\nWalking casually over to the open chest, she inspected the many weapons contained within. Was her test over or would Mac expect to continue when he returned? She pulled out a short sword, balancing it on her palm. Would fighting him with weapons be a smart move? The man was lethal enough with his talons; things might get out of hand if they moved on to swords and knives.\n\nShe felt Mac approach and turned to watch him stride back into the clearing. His expression was neutral, his black eyes devoid of emotion as a slight breeze rippled through his inky locks. He looked like an avenging fallen angel, all dark menace and evil intent as he came to stand before her.",
        "\"I think you're lethal enough without any knives being involved,\" he remarked dryly. There was a hint of respect in his voice and she preened inside at the compliment.\n\n\"I was thinking the exact same thing about you,\" she answered, her own tone respectful as she placed the short sword back inside the chest.\n\nHe nodded once in her direction and then turned to the others. \"Sparring is essential for honing our skills. Pain is used as a teaching tool so you learn how to ignore it to achieve the goal of protecting our charges. Emotions should not come into play when sparring. Loss of control can lead to the death of your fellow soldier. Control is everything. Remember that at all times.\"\n\nLily had the distinct feeling there was something more to Mac's teaching words. Was he indirectly apologising for hurting her? She'd wondered if brutality was part of sparring in the Praetorians but the shock she'd sensed from the others appeared to negate that.\n\nMackenzie had crossed the line and he was warning the others not to cross that same line. She was just as guilty and she took his words to heart. She wouldn't apologise for her actions without an apology from him first, but she would heed his words and ensure they do not reach this point again.\n\nAfter a brief pause, he signalled one of the other recruits to come forward. Lily sat down to watch the rest of her team match wits with the leader of the Praetorians. She watched eagerly, admiring the sheer animal beauty of her mate, holding in a pleased sigh as he went through the motions with each of them.\n\nHer male was glorious; total perfection all wrapped up in the most sensually pleasing package. He was strong enough to tame her wild spirit but most importantly he was strong enough to stand up to her father. The male she chose as her life's mate would have to be strong to combat Andrei's objections. She had no doubt her father would object most strenuously to the idea of her mating. \n\nIt wasn't going to be easy claiming Mackenzie as hers. First she had to get him to realise that he did belong to her, and then he had to convince her father that he had the right to claim her as his. She had no doubt her mate would walk through fire to secure her. She couldn't imagine Mac allowing anyone to take what he considered his and she was most definitely his.\n\n* * * *\n\nThe four remaining candidates passed Mac's rigid testing and he was hot and sweaty by the time he'd put the last of them through their paces. The entire time he'd worked with the others, he'd felt Ruminskey's eyes on him following his every move. It had been a little distracting being so conscious of her appraisal, but not enough to make him reckless with the others. \n\nA dull pulsing anger still burned within him because of his lack of control when sparring with her. She'd managed to elude him in the forest too which was another irritation. He was the most skilled tracker among the Praetorians; hell, he was probably one of the most skilled among their species. How had she managed to elude him? \n\nHe turned to Karn, his second-in-command. \"Assign them rooms and get them fed.\" He turned and walked away without a backward glance, feeling eyes tracking his movements. He didn't need to look back to know who it was; his body's heated reaction to her told him all he needed to know.\n\nHe cursed under his breath as he headed inside and took the stairs two at a time, stripping off his top and wiping his face on a clean section as he reached the attic floor which was solely his. The scent of Ruminskey's blood saturated the top making his body clench hard.\n\nWhat the hell was it about the damned woman that made him think of sex every five seconds? So she was beautiful. He'd seen many beautiful women in his lifetime and hadn't felt the need to bend them over the first thing he could find and pound mercilessly into their hot sheathes. Beauty wasn't the be all and end all so why he was reacting to hers was a complete mystery. \n\nAnd why the fuck had he felt concern and guilt at having injured her? She was nothing to him, just another Praetorian candidate being put through her paces. Why was she under his skin, and how the fuck had she managed to do it? He wasn't a man who allowed people to slip past his barriers. \n\nAndrea Ruminskey was an enigma and something told him he would be a fool to keep her around. But she was the best of the five he'd just recruited and he'd be just as foolish to let his personal feelings get in the way of his assigned task.\n\nWith that thought firmly in place he picked up his cell phone from his coffee table and considered sinking down into his favourite plush, black leather armchair. He needed a shower though so opted to do that first. Hitting the first speed dial he waited for the call to be answered, stretching his back muscles to work out a couple of kinks.\n\n\"Mac, how lovely to hear from you.\" \n\nThe soft, musical voice caressed his ears and he found himself relaxing as he always did when he heard his queen speak. When Demetri had told him they had a queen, it had merely been words to him, a new cause to fight for. Then he'd met her and had known instantly he would serve the petite redhead until his dying day.\n\nHe smiled and breathed out softly. \"It is always a joy to speak with you, Annie. I have five new candidates to be vetted. Can one of you attend either today or tomorrow?\"\n\n\"I will come,\" she answered and he knew she was smiling as she spoke. \"It's been too long since I've seen you, and Caleb is busy at the moment with his Ancient work. Gard is still acting as if he's on honeymoon with his mate. You would think after twenty-five years they would have worked that out of their systems.\"\n\nMac laughed loudly. \"Just as you and Caleb have worked it out of your systems?\" he teased. Her soft laughter was all the answer she gave him.\n\n\"Will ten o'clock be okay, Mac? I'm heading over to the pack for a visit so I'll be in the area then.\"\n\n\"Ten is perfect, Annie. I look forward to seeing you.\"\n\nShe said goodbye and he placed the cell back on the coffee table. One last hurdle and he would know if choosing Ruminskey to join his team was the correct thing to do. He was suddenly anxious that she pass the triumvirate's test. Because if she failed, if their queen detected deception in the woman, Andrea Ruminskey would die and he would be the one to carry out her execution. \n\nOnce the triumvirate were involved and the candidates became aware of that involvement, there was no discreet way to handle the situation. Rhianna Armand was under the impression she was powerful enough to slip into vampire minds and erase their memories. Caleb and Gard had appeared to share her confidence so Mac hadn't questioned it.\n\nUntil Caleb had returned the night after they accepted their first recruits and they'd had a private conversation. Although all the recruits had passed the final test, Caleb wasn't one to leave any eventuality uncovered. His instructions had been blunt and ruthless. In the event a spy was unearthed and Annie's safety was jeopardised, death was the only recourse.\n\nMac had agreed wholeheartedly. Mercy towards enemies was suicidal. He'd learned that young and had lived by that code ever since. Their queen would most definitely object to it but the other three males wouldn't allow her kind heart to sway them. They'd take her fury, endure her wrath because keeping her safe was more important and worth any disappointment she may feel.\n\nPushing the weight of his responsibilities away for a short time, he headed into his bedroom and walked straight through without glancing around. He was sweaty and his body was hard and aching with need. Ruminskey's blood still lingered on his skin and his clothes, her scent seeping into his every pore and making his head spin. \n\nHe had to wash the woman off him before he did something stupid, like look for her and fuck her senseless until she screamed his name in ecstasy as he lost himself inside her delectable body. He wasn't sure he'd be able to kill her after taking her, and he didn't want to put himself in that position. \n\nEven now just the thought of hurting her in any way felt wrong. He didn't know if he had it in him to kill her. And that concerned him immensely.\n\nMac turned the shower on and looked at the top in his hands. It was washable but he was inclined just to throw it away. It wasn't as if he was short on clothes. He paused at the bin raising the cloth to his nose so he could scent the female's blood that was making his head spin. His body hardened further, his irritation spiralling almost out of control.\n\nMac tossed the offending garment in the bin and stripped off the rest of his clothes. No way was he going to allow a woman to mess with his head. He didn't care how beautiful or intoxicating she was.\n\n* * * *\n\nLily followed Karn into the house via the back door, straight into a huge kitchen/dining room. The sandy-haired vampire jerked his head towards an enormous stainless steel refrigerator. \n\n\"Bottled blood's in there. You drink one daily when training. I don't give a fuck what you get up to on your downtime but while you're here you stay off the vein completely. I catch any of you indulging, you deal with Mac personally.\" His pale blue eyes shifted to Lily. \"As you will no doubt have noticed, pissing Mac off isn't a smart move.\"\n\nShe took the intended rebuke with a toss of her ponytail over her shoulder. She might have gained some respect for holding her own against Karn's fearless leader, but he was quick to ensure that none of them had better challenge Mac so openly again.\n\nIt took everything in her power not to shudder as she pulled open the fridge and plucked out a bottle of blood. She could exist on blood alone for a prolonged period of time but she didn't particularly enjoy it. She preferred a nice juicy steak with all the trimmings, real food to soothe her wolf. She wasn't sure how long she'd be required to stay here. She might have to work out a way to sneak out and find some real food.\n\nAs far as she could uncover, the Praetorians only trained at the house, sleeping there when they were on duty. They returned to their own homes when they took their downtime. How long would Mac expect them to stay here before he was confident enough in their loyalty to let them go home?\n\nAnd where was he anyway? She scented the air unobtrusively under the guise of drinking down her nourishment. She sensed him at the top of the house, the farthest point away from her. Was he hiding? Had she rattled him enough that he instinctively sought to protect himself?\n\nHer wolf rumbled her disapproval at the thought of their male running away from them. \"He can run all his wants, girl, but he won't get far,\" Lily reassured her animal as she swallowed down the last of the cold blood and dropped the empty bottle into a waiting trashcan.\n\n\"Where's my room?\" she called to Karn as she headed out of the kitchen.\n\n\"Pick one on the second floor,\" he called back. \"They're all the same.\"\n\nWithout a word, she grabbed her pack which had been tossed into the hallway of the main house with all the others. Her gaze quickly slipped over the entryway. It was dark and bleak, wood dominating the area. Her Alpha's house also contained a lot of wood but it also oozed warmth and welcome. The Praetorians' house was the complete opposite.\n\nFighting down a sigh, Lily bounded up the first flight of stairs then headed up the next one. A glance upwards told her there was only one further flight, which would take her up to Mac's quarters. She chose the door directly in front of the stairs, the one closest to him. She would hear him as he came and went. She wondered if he'd try and figure out which room she was in. Would he understand the significance of her choice? \n\nHe wasn't a stupid male. He would immediately understand the signals she was sending out. Whether or not he acted on them was a different matter. She headed inside after one last glance up the stairs and closed the door behind her.\n\n\"I could so get sick of the sight of wood.\" Her wolf growled her agreement as they looked around the spartan interior. \n\nThe room felt small even though it was quite a decent size. There were no adornments on the walls, just relentless dark wood panels. The floor had the same panels, and the wardrobe and chest of drawers appeared to be built from the same material. The only relief from the starkness was the large king-sized bed with its crisp white bedding.\n\nDropping her pack, Lily headed over to the door closest to the bed and peeked inside. The bathroom was modern, starkly white and completely depressing. She couldn't help longing for her girlie rooms at home. She might like to kick ass but she adored her creature comforts too.\n\nHer wolf urged her to do something about it but she resisted the temptation. How the hell would she explain redecorating her room? She'd maybe get away with a couple of small knickknacks but covering the walls would be a bit of challenge to explain.\n\nLily's conjuration skills were top notch, surpassing even Rayne's in some regards despite her friend being three thousand years older. Every V\u00e2rcolac could create clothes for themselves by using their minds. Lily was the only one who could create things which didn't relate to clothing. \n\nGranted they had to be small things. She couldn't suddenly magic up a car or a house and she couldn't create food, but she could create jewellery, other feminine essentials like makeup and hair ties. If she really wanted to, she could probably conjure up tins of paint and a brush to pretty up her new bedroom though she hadn't tried anything like that before. She just felt an enormous wealth of potential deep within her which she hadn't tapped yet.\n\nBut experimenting with it here was most definitely not the right thing to do. She retrieved her pack and quickly emptied it, settling her few clothes into the drawers. They were practical clothes, cargo pants, jeans, tank tops, all the things a soldier would be expected to carry around with them. \n\nThere was one feminine blouse and one short skirt with a complementary pair of slinky heels. A girl had to be prepared just in case she might be called on to dress up for an occasion. And then there was the sexy lingerie too.\n\nShe'd gotten her addiction for delicate lingerie from her favourite aunt. Cedar was so elegant and refined all the time and she put it down to always having the sexiest undergarments on no matter what she was wearing. Lily had to concur with that. She felt feminine even in her cargo pants when she had sheer lace panties hugging her hips.\n\nThe thought of lace and sex made her think of Mac and she pushed down a strangled groan as her body reacted. Time for a shower! There was no way she could throw herself at him this soon into her tenure under him. A nice cold shower would wash away the day's training activities and also cool her blood.\n\nA knock at her door an hour later had her springing from the bed in an instant. She'd showered and changed into dark blue hip hugging jeans and a deep red tank top which gave tantalising glimpses of her bare midriff as she moved. She opened the door to find Karn standing outside.\n\n\"Mac wants you.\"\n\nLily blinked in surprise. She hadn't expected him to come looking for her so soon. \"He does? Where am I supposed to meet him?\"\n\n\"Downstairs. Study next to the sitting room.\" The vampire turned and walked away.\n\nLily smiled, amusement crossing her face. \"Hey, Karn, do you ever do warm and fuzzy? Enquiring minds want to know if you know the meaning of the word charm.\" \n\nHe shot her the finger and kept walking, her laughter following him as he disappeared into a room on the first floor. \n\nLily closed her door and headed downstairs. She liked Karn. His little speech in the kitchen earlier had been the most she'd heard him speak in one go. Usually he just grunted words. As long as he got his point across he was happy. If he had to repeat himself he wasn't averse to using his fists to make sure his point was made the second time. \n\nThat was what she liked about him. You always knew where you stood with Karn. He was blunt, rough around the edges, but fiercely loyal. If he considered you worth the effort then he gave you his entire attention. She'd been two weeks into her initiation as a Praetorian when he'd judged her worthy enough. He'd been tough on her but he'd helped shape her until she was the top of her group. She had a lot of time for the anti-social vampire.\n\nShe gave herself a mental shake when she reached the study door. Her knock was sharp and quick, Mac's voice urging her to enter before her hand was back at her side. Squaring her shoulders she turned the doorknob and entered.\n\n\"More wood!\" she groaned internally her eyes quickly flicking around the stark room. There was a large desk against one wall, a deep mahogany colour. A black leather chair was behind the desk, an open laptop the only thing on the dark surface. Two smaller black chairs faced the desk and there was a dark brown leather sofa taking up most of the wall underneath the window. \n\nSurprisingly there were no bookcases to be seen, though there was a large open fireplace on the wall directly opposite the door. Mackenzie was standing with his back to the fire, his black gaze intent on her.\n\nHe'd obviously showered, having changed into tight-fitting black jeans with a matching silk shirt. His thick black locks were loose around his shoulders, his expression unreadable. \n\nThe man had to be Satan given form. No mere male could be so gorgeous, so intimidating. Lily could feel liquid heat running through her body as she met his hard gaze, tilting her chin up in challenge. She had no idea she looked a lot like her mother when she adopted that pose. She had her father's volatile personality and just assumed she was more like him.\n\n\"The room isn't to your liking?\" Mac had noted a slight tightening around her mouth as she'd surveyed the room. He'd been watching her keenly since she'd entered, determined to discover what it was about her that seeped under his skin.\n\nHe hadn't stopped thinking about her for the last hour. He'd finally decided to confront the woman, talk to her, try and get inside her head so he could work out this uncomfortable obsession he appeared to be developing for her.\n\nThe moment she'd stepped into the room his breath had halted, his throat constricting as his eyes travelled over her exquisite face, down over the obscenely short red top that hugged her breasts like a second skin. A golden strip of bare flesh teased him and something shiny in her navel attracted his attention.\n\nHis body had hardened in an instant, the shiny pink jewel in her navel capturing his attention completely. He'd almost groaned out loud. Delicate little piercings turned him on immensely. He couldn't help wondering if she had more on her body. \n\nShe didn't strike him as the type to have her nipples pierced; he didn't see any evidence of it either under her top. It had been an effort to tear his gaze away from her body. Thankfully she'd been too busy wrinkling her nose at his study to notice his reaction.\n\n\"It's not exactly homey,\" she said with a hint of amusement in her voice, and it took him a moment to realise she was answering the question he'd just posed to her.\n\n\"It's not meant to be,\" he countered. \"This is a training camp, not a sorority house. If you want frills and lace then fuck off home and decorate your house the way you want it.\"\n\nLily raised an eyebrow in surprise, fighting the urge to smile. Mac actually seemed offended that she didn't like his house. His reaction had been a little over the top and from the way the muscle in the side of his jaw ticked, he appeared to realise it himself.\n\n\"So you wanted to see me so we could argue about interior d\u00e9cor?\" she asked coolly, keeping her expression as neutral as possible. \"You asked me what I thought. If you don't like the answer then maybe you shouldn't ask the question.\"",
        "He scowled then, a hint of anger crossing his face before he smoothed out his expression. \"A fair point,\" he finally conceded. \"I asked you here because we need to get something straight before things go any further.\"\n\nLily was immediately alert, taking a chance and moving across the room to stand in front of him. She invaded his space but stopped short of touching him. She saw his nostrils flare and heard him suck in a deep breath. She smiled. He was not immune to her charms and in the relative privacy of the study he was allowing his reactions to be noticeable.\n\n\"Things?\" she repeated softly, feeling a tad braver after his reaction. \"Define things, Mac?\" \n\nShe was tempting the devil, prodding a sleeping tiger. Those lines may be tired old clich\u00e9s, but pushing him set her heart racing. Heat ran through her body as she stood so close to her mate, his scent invading her senses. Her body practically hummed for him and her tongue snaked out to wet her lips in anticipation.\n\n\"Andrea.\" It was a growled warning. Mac could feel her body heat, scent her growing arousal, and his own body was reacting predictably. He hadn't summoned her for this. Yes, he wanted her to know exactly where they stood but he hadn't counted on her acting so aggressively, testing the very limits of his self-control.\n\nHe stepped around her and walked behind his desk, forcing his muscles to obey his brain. \"There is one more test to pass before you are fully accepted into the Praetorians,\" he bit out, swallowing hard before he turned around to face her.\n\n\"If you pass that test you will be sworn into this life and you will never be free of it. I know you're attracted to me. I won't insult you by denying I feel the same attraction. But I don't fuck members of my team, Ruminskey. There will be no sex between us. Accept that and you'll move on to the last test. Refuse to accept it and you can pack your bags and fuck off right this instant.\"\n\nOkay, that was so not what she wanted to hear, and she had to take a moment to think it over. Her mate admitted to wanting her, and that was certainly something to be happy about. To keep his attention, she had to join the Praetorians. But if she joined them, he'd keep her firmly away from him. How was she going to get around that?\n\n\"Why not?\" she finally asked, and he frowned at her.\n\n\"Why not what?\"\n\n\"Why don't you fuck the females on your team? It can't be that they're not strong enough to cope with your sexual demands. Is it because they're too butch? The couple of the females I've seen have been quite manly in appearance.\"\n\nMac's mouth actually dropped open at her question. Was she for real? She was seriously questioning his reasoning for not having sex with his female team members? \"I don't have to justify my reasoning to you,\" he bit out. \"The no sex rule stands. Agree to it or get out, those are your options.\" \n\nLily licked her dry lips and tried not to let his thunderous expression intimidate her. She glanced down at her body, doubt suddenly creeping in. He'd admitted he was attracted to her but maybe attraction wasn't enough. \n\nWas there something wrong with her body? Was she possibly not his ideal woman? Mates where supposed to want each other, they were supposed to be ravenous for the taste and touch of each other's bodies.\n\nShe looked back at him unable to hide her uncertainty. \"Am I too butch?\" Her voice sounded small even to her own ears. \"I've tried to maintain my femininity despite my speed and strength. I thought I'd managed it quite well but I may have gotten it wrong.\" Her lower lip trembled as she let her words trail off. This was so embarrassing. How could she have gotten it so wrong?\n\nMac was dumbfounded as he stared at her. The tough, sensual woman who had all but undressed him with her eyes had suddenly vanished and in her place was a shy, uncertain girl whose eyes were suddenly moist and whose bottom lip trembled as if she was on the brink of tears.\n\nWhat was equally astounding was his reaction to this new Andrea. He was overcome with the urge to pull her into his arms. Not because he wanted to taste every inch of her sun-kissed skin which he did, but because he wanted to soothe the uncertainty from her expression, to convince her she was an extremely beautiful, desirable young woman.\n\nHis reaction stunned him as did her sudden transformation. \"I do not have sex with my team because we need to work as a unit, Andrea,\" he answered gruffly. \n\n\"Our mission is paramount. There can be no distractions from that mission. Becoming involved with someone on the team could lead to one of my charges being endangered. If I was forced to choose between her and one of my charges, I could hesitate just long enough for someone to be killed. That is unacceptable.\"\n\nLily blinked slowly, almost sighing with relief that no tears fell. Mac's expression almost looked apologetic and her little moment of insecurity evaporated instantly. His speech was impressive, his commitment to his duty commendable. \n\nShe smiled. \"Is that all? That won't be a problem then.\"\n\nMac was oddly disappointed by her instant agreement. The devil inside him wanted her to argue more, to push at his iron self-control just enough that he could blame her when it broke and he crushed her soft lips against his.\n\n\"I'm glad we've cleared this up.\" He kept his tone formal, hiding his disappointment.\n\nLily's smile widened and she moved to sit on the edge of his desk. \"I am too, Mac. Now that you've seen my skills in action, you can see how silly it is to be concerned about me while we're on the job. I'm more than capable of taking care of myself. Your charges would never be compromised just because we were sleeping together.\"\n\nEvery muscle in his body went taut with strain as she swung her legs around and draped them on either side of his body. She leaned back on her arms and tilted her head back, her long glossy ponytail brushing the desk behind her. Her pose pushed her breasts up, the heat from between her thighs tantalisingly close to his legs. She was like a voluptuous goddess offering her body to use at his will.\n\n\"I've just told you...\" Her eyes connected with his, dark chocolate pools with flecks of gold flashing through them. He couldn't continue with his rejection. He literally couldn't breathe. Against his will, his hand rose and circled her slender neck. He was bending his head to her parted lips before he could stop himself.\n\nNeed gripped him, hot and hard, so powerful it was a wrench to his gut. His nostrils flared as her scent engulfed him and rational thought fled from his mind. He had to taste her, had to slake his hunger for her even if it was just a kiss. Surely there was no harm in one kiss?\n\nLily sighed softly, her heart careening wildly in her chest as Mac's dark head bent down to her. He was going to kiss her! Finally, she would receive her first real kiss and from her mate too. The hunger on his face took her breath away. She knew his kiss would be the most intoxicating thing to happen to her. She closed her eyes, a soft moan escaping as she felt his breath against her lips.\n\n\"Oh dear, am I interrupting?\" A very feminine voice broke through the spell wrapped around them.\n\nMac immediately released Andrea, straightening up and working to conceal his shock and disappointment at the interruption. He'd been so lost in the woman sitting on his desk he hadn't even been aware of the additional presence in the room.\n\nLily's entire body went rigid in denial, panic crossing her face as the scent of lavender and jasmine hit her, confirming the identity of the woman who had entered the room. \n\nNo way! It couldn't be! She'd masked every bond she had with everyone. There was no way anyone could have tracked her. Her head turned slowly and she looked over her shoulder, directly into a pair of amused lavender eyes.\n\n\"Oh fuck!\" she groaned inside her head as she met Annie's gaze.\n\n\"I don't think you've quite reached that stage, Lily darling,\" her Alpha's sister answered her privately, laughter echoing down her mental touch as well as love and reassurance. \"You've created quite a stir, little one. We'll talk privately later. For now let me see what Mac has to say for himself.\" \n\nTo be continued... "
    ],
    "authorname": "JazCullen",
    "tags": [
        "vampires",
        "love",
        "werewolves",
        "hybrids",
        "paranormal romance",
        "mating"
    ],
    "category": "NonHuman",
    "url": "https://www.literotica.com/s/hearts-of-warriors-ch-02"
}
{
    "title": "Unexpected Anal Office Tryst Ch. 02",
    "pages": [
        "Chapter 2 will make more sense if you read Chapter 1, which was posted last week. Thanks to everyone who voted and favorite-d the inaugural chapter. I hope you enjoy this one just as much.\n\n...\n\nThe following week passed as if nothing had happened. I carried on at home as I always did, playing with the kids, making dinner, making love to my wife. At work, Kathryn and I only saw each other twice - in meetings - and acted naturally. It all returned to normal so quickly that I began to wonder if I had dreamed up our anal encounter. \n\nBut no, I had the panties to prove it tucked away in the bottom drawer of my desk. I inspected them several times a day, despite the fact that they caused a noticeable bulge in my pants that needed to be abated before I arose. The flimsy thong had a slight stain between the legs, a permanent reminder of how wet Kathryn had been just before she begged me to fuck her ass. I often found myself straying from my work to iron every detail of our tryst into my permanent memory.\n\nThe only wrinkle in the routine occurred on Friday. It by no means betrayed what had happened between Kathryn and I a week prior, but it definitely caused a stir in the office. Kathryn, who notoriously stuck to a strict wardrobe of pant suits - with the exception of pants and a polo shirt on casual Fridays - showed up in a skirt. It was about as unsexy as a skirt could be: knee-lengthy, tan, and corduroy, but on Kathryn, it just worked. Her calves were covered in sheer, white pantyhose, robbing the guys in the office of a chance to see some skin. But the watercooler chatter nonetheless revolved around the noticeable change in routine.\n\nJust after 4pm, I received an intra-office instant message from Kathryn. It popped on my screen as I was in the middle of fantasizing about her again.\n\n\"You there?\"\n\n\"Always, it seems.\"\n\n\"It seems I caused quite a stir with my outfit today.\"\n\n\"It's safe to say you did. Heard some guys talking about you over lunch.\"\n\n\"What did you think about it?\"\n\n\"I'm hesitant to put what I thought about it in writing.\"\n\nShe responded with an eye roll emoji, followed by, \"Maybe you can tell me in person? After all, I wore it for you.\"\n\nMy heart started racing. Was she proposing another encounter?\n\n\"That can be arranged. What did you have in mind?\"\n\n\"Come by my office at 5:30pm. Everyone should be gone by then, so no one will overhear you telling me what you think of my outfit.\"\n\nWell, fuck. Our last rendezvous started at 6:30pm, so I had an extra hour to get home. I debated sending my wife a text to let her know I might be late, but decided against it. So long as I was home by 7pm, there was no reason for her to be \n\nsuspicious. \n\nThe next hour went by painfully slow. My cock was semi-erect and begging to be touched, but I managed to show restraint. My officemates slowly and steadily filed out between 4:45-5:15pm, with the last one being my boss. He expressed gratitude that I was working late on a Friday, but the reality was I had barely accomplished anything all day.\n\nAt 5:30pm, I went downstairs to Kathryn's floor, and found it as deserted as mine. The light was on in Kathryn's office, the door open. I approached quietly and prepared to knock on the doorframe, and was crestfallen to see her standing by her desk in a trench coat, as if she was preparing to leave. Her back was turned as she fiddled with her phone.\n\nI knocked.\n\n\"Now a good time?\" I asked.\n\n\"As good as any. Would you shut the door behind you, please?\"\n\nI did as instructed, then, at her encouragement, sat in the guest chair. \n\n\"You look like you're headed out,\" I commented, trying to figure out her intentions.\n\n\"Why, what did you think was going to happen?\" she teased. \"I told you last week was a one-time thing.\"\n\n\"I remember that, and was prepared to accept it, but after you invited me here, I thought you might have changed your mind.\"\n\n\"Sorry, Henry. I thought I had made it clear I just wanted your opinion of my outfit.\"\n\nThere was an awkward pause. This is not at all what I had envisioned. I considered myself fortunate that Kathryn had chosen me for her insalubrious affair, but I didn't want to be lead on and flirted with if there would be no future payoff.\n\nI broke the silence.\n\n\"You mean the outfit that turned all the heads today? The guys at the watercooler were infatuated with you.\"\n\n\"Actually, no. Not that outfit. This one.\"\n\nAt that, Kathryn untied the belt on her trench coat and pulled it open. It revealed a set of white lingerie that would make any man blush. Her white pantyhose were still on, connected to a lacy, floral garter belt that hugged her toned midsection closely. A sheer bra with matching floral pattern pressed her b-cups together and upward, showing off as much cleavage as could be expected, given their size. The set was rounded out with panties that matched the sheer, floral motif. Roses, I believe.\n\nKathryn let the let the coat fall from her shoulders, and she turned away from me to kick it to the wall. This revealed that the panties were in fact a thong, perfectly framing her adorable butt.\n\nI did my best to stay cool.\n\n\"So you're really going to stand like that three feet away from me just to ask my opinion of it?\" I smirked.\n\n\"Actually, this outfit isn't for you. It's for Jeremy. I picked it out for our wedding night. After last week, I know that I can trust you, and I was hoping to get a male's perspective on it. The woman at Victoria's Secret said I looked amazing, but of course she would.\n\nKathryn continued to surprise. And I felt so bad for Jeremy. He was being cucked and didn't even know it. How many straight men get to offer their thoughts on a co-workers wedding night lingerie? And how many men get to see it modeled by the bride before her husband?\n\n\"Well, she was right,\" I said. \"But come closer. I think you might have put it on wrong,\" I goaded.\n\nKathryn looked down at herself. \"Where? What's wrong?\" She took two steps closer, so that her knees were almost touching mine.\n\n\"Here, look,\" I said, running my hand up the front of her leg. \"You still trust me, right?\"\n\nShe nodded, suddenly shy. \n\nI slid my finger under the straps connecting her pantyhose to the garter belt and pulled them gently. \"You've put these on over your panties. That doesn't make sense.\"\n\n\"I'm pretty sure that's how the saleswoman said it should be,\" she retorted.\n\n\"Kathryn, think about. You look good enough to eat. Jeremy is going to see you like this and want to get straight to business. You should put the panties on last so they can be removed first. Otherwise, he'd have to remove all this in order to get to his prize.\"\n\nI let my hands linger on her thighs. Her breath deepened. \n\n\"I'm not sure,\" she said. \"What if he wants to take his time with it?\"\n\n\"Then he can take his time. Doing it my way allows him the option, at least. Here, look.\"\n\nI unclipped the straps from her stockings, letting them dangle by her sides. Then, looking up to her for permission, I pulled the thong down to her knees. Her glistening juices twinkled in the subdued office light, her scent gently wafting towards me. Her neatly trimmed thatch of pubes was shaved into a triangle, pointing at her ultimate prize.\n\nWith the panties by her knees, I reattached the straps and slid myself back to inspect.\n\n\"Fuck, Kathryn. I can't tell you how good you look just like that. It's even hotter without the panties at all. Let's try.\"\n\nKathryn's smile suggested that she was in on a one-woman inside joke. She closed her legs and let the panties fall to the floor. \n\n\"Do you want me to take a picture for you, so you can see how good you look?\" I asked, pulling my cell phone out of my pocket.\n\n\"No pictures!\" she startled. \"Absolutely not!\"\n\n\"OK, OK, I was just joking. Here, come closer.\"\n\nKathryn came close and put her hand on my head, interlacing her fingers with hair. \n\nIt was almost in a loving manner, but I suspected a carnal intent. I resumed my clutch on the straps of her lingerie. It was firm enough to keep her in place, but lax enough for her to back away if she really wanted to.\n\n\"I have to ask, Kathryn. And I apologize in advance for being so blunt, but he goes down on you, right?\"\n\nKathryn turned beet red. \"Henry! How dare you ask that?\"\n\n\"I'm just saying, it would be a god damned shame if he doesn't. This is the prettiest pussy I've ever seen. I bet you taste delicious.\"\n\n\"Is that an offer, Henry? Because no, he doesn't.\"\n\nFrom that point on, we were fully in sync. I shifted my chair towards the desk as she made a little space and sat her pert butt up on the ledge. She raised her left leg up and planted her foot on the desk, while her right foot braced itself on the arm of my chair.\n\nI made quick work of the foreplay, kissing my way from the inside of her knee to her liquid center. I teased her clit with my nose first, just getting an inkling of her scent and preparing myself to dive in. She gasped an encouraging sound, inviting me to proceed.\n\nI've always loved eating pussy, and I like to think I've been good at it since I was a teenager, when I read some excellent advice in Playboy Magazine. In response to a reader asking for help, they suggested spelling out the alphabet with your tongue. It's a good way to make sure you touch everything, while being somewhat random and spontaneous. You can mix it up by spelling different words or phrases or, my personal favorite, the name of the woman you're pleasuring.\n\nI began my tried and true approach.\n\nK: an excellent letter to start with, as it covers a wide area, albeit with haphazard strokes. Up and down the left side, with diagonals up and down to the right.\n\nA: Up towards the clit, lingering there for a second, then back down the other side, tracing her labia, followed by a quick dash across the middle.\n\nT: always a fun letter. I traced up from her hole to her clit, followed by a long, back-and-forth across her clit twice. At this point, Kathryn's legs started shaking, so I crossed that T one more time, driving the point home.\n\nH: The ultimate teasing letter. It traces almost the entirety of the vagina, omitting only her clit and her hole. Her legs started to stabilize with the lack of focus on her clit.\n\nR: for the sake of this exercise, I used a lower case \"r,\" a quick stroke up and across the middle. \n\nY: another up-down motion, followed by delving deep towards the hole. At this point, I penetrated her for the first time, as deep as my tongue could get. She put her hand on the back of my head and pulled me tight. I was definitely going to need to pick up some mouthwash on the way home.\n\nN: A bit of an anticlimactic letter, as it doesn't hit any of the right spots for a climax. As I finished this letter, I moved my hand under her butt so that my forefinger wedged between her cheeks and my thumb nestled ominously at the entrance to her vagina.\n\nWanting to be respectful, I asked for permission before entering her. I lifted my mouth away briefly.\n\n\"Is it OK if --\" I was cutoff as Kathryn pulled my hair tight and yanked me back into her pussy. I took that as a yes.\n\nMy thumb slid in easily, a result of the excellent working-over I'd provided so far. She was close to orgasm, but I hadn't executed my best move yet.\n\nIn the event that a name doesn't end on a great letter, I spell out \"I LOVE YOU.\" It's appropriate, I think, in that for any woman I've gone down on, I've felt something at least approaching love. Plus, the O's are so much fun, circling all the way around and hitting the clit twice, if you start on top.\n\nKathryn was moaning uncontrollably as I got to \"YOU.\" Her grip on my scalp was borderline painful. I'm sure she had pulled out some hair, but I always loved that. It meant I was doing things right. Her hips were actively - dare I say, violently - rocking up off the edge of the desk, humping my face with abandon as she got closer. \n\nU was always my favorite finisher. I traced a long loop around the entire area, then formed my mouth into the sound it makes when you say \"U\" and sucked her clit inside. \n\n\"Oh my god!\" she screamed. Her fingers released their grasp as she lost control of her basic motor skills, but I kept my lips glued to hers. My thumb continued pumping as deep as it could go, pushing and pulling against the slick suction of Kathryn's spasming cunt. \n\nThen, in an instant, my mouth was flooded. I backed off, but replaced my lips with my left hand, which vigorously rubbed her clit through the duration of her orgasm. Her squirt shot all over the floor between us, but also splattered my pants and dripped off my chin. Not going to lie. It was one of the prouder moments of my life. \n\nI stood and unzipped my pants. \"Kathryn, you have to let me fuck you,\" I said, pulling out my cock.\n\nShe nodded breathlessly, opening her legs wider for me. Her breasts heaved in the lace bra she had reserved for her wedding night. Her nipples stuck out like two solid marbles, begging to be touched. Between her legs, it was like she had spilled a beverage on her desk. It was grotesque and ribald in the most beautiful way possible.\n\n\"Go ahead, do it,\" she finally got out, as if I was awaiting verbal permission. I found her pussy to be warm and welcoming, a stark contrast to the air conditioned room. My thumb and tongue had loosened her up well enough for me to slide in to the hilt on my first thrust. \n\n\"Oh...fuck,\" she grunted as my cock invaded her depths. Her pussy felt as good as it tasted, latching on to every vein, tantalizing every inch. I love my wife, but after three kids, she's not as tight as she used to be. Fucking Kathryn was like fucking an eighteen year old. \n\nShe began moving her own body up and down the desk ever so slightly, matching my thrusts and quickening the pace. She mewed like a porn star, offering constant encouragement for me to go faster or harder. I pulled her legs up so that her calves were resting on my shoulders, then went up on my toes to drive down into her.\n\nIt seemed to be working. Kathryn kept one hand on the edge of the desk to keep her in place, but the other one popped a breast out of her bra and started pinching at a nipple. I wrapped my right arm around her legs and pulled them together and tight against my chest, while my left arm repeated her efforts on her left breast. I pulled down the lacy cup and started massaging her bud between my thumb and forefinger. \n\n\"Please, it's so good. I'm almost there,\" she moaned.\n\nI upped the pace just a little, and pushed Kathryn to the precipice. She released her breast to clench onto my forearm, holding herself in place as I pumped her through her orgasm. Her calves grazed against the sides of my neck. Her ass nuzzled against my thighs. Her pussy held my dick tight, trying to coax the cum out of my balls. She looked like she was in a trance.\n\n\"You OK?\" I asked.\n\nShe nodded again. \"You're incredible. I've never experienced anything like this before.\"\n\n\"I think you're pretty great too, Kathryn. But I have to know something.\"\n\nShe came out of her trance to meet my eyes.\n\n\"Can I fuck you in the ass again?\"\n\nShe smiled as if she had been expecting it.\n\n\"I was wondering if you'd ask that. Yes, you can. I cleaned myself out after everyone left.\"\n\nThis hit me like a ton of bricks. She had planned this all along.\n\n\"You lying little minx!\" I said. \"I just want to know what you think of my outfit,\" I said, imitating the timbre of her voice.\n\n\"At some point in the last week, I decided if I can trust you once, I can trust you twice. But those first two orgasms took a lot out of me. This next one will probably be the last.\"\n\n\"I'm not sure how much longer I can last either, to be honest. That last one almost took it all out of me.\"\n\nI slowly pulled out of her pussy, and was presented with a lovely sight. Her hole gaped slightly, and only for a second or two, before it started clenching at mid-air, missing the feeling of being full. No doubt the contrast of our warm connection was in stark contrast to the temperature in the room, and that, too, caused it to flinch a little.\n\nI lowered my aim an inch and found Kathryn's anus. As with the last time, her enema had done a nice job, and she was relatively loose. It was still a bit of a challenge getting in, though. Her sphincter offered tepid resistance as my insistent cock pushed forward. It was such an amazing image, watching it give way and quickly close around my head. \n\n\"Oooohhhh,\" Kathryn emitted. Her hand came up and pressed against my midsection, apparently trying to slow my speed. I removed them.\n\n\"I'll go slowly, but I want you to play with yourself as I fuck your ass.\"\n\nI would have thought it difficult to make a girl blush while you're dick is buried in her asshole, but Kathryn turned red at this suggestion. It's amazing how sweet she was generally, and with everyone else, while she could be such a wanton slut with me.\n\nI encouraged her by moving her hand to her pussy, then guided her fingers over her clit. I matched the pace of her strokes with my own, pushing deeper inside her each time. \n\n\"Is that good, Kathryn? Do you like the feeling of my cock in your asshole?\"\n\n\"God, yes! I can't believe how much I like it, but I love it!\" Her voice was staggered with intermittent sharp breaths, which arose with each thrust I gave her ass. \n\nI definitely wasn't going to last long. She was so tight, and the taboo nature of it all only added to my stimulation. I found the backs of her knees and pushed them towards her chest, further exposing her pussy and ass to me, and changing the angle of my thrust. I was determined dot find her g-spot from the backside.\n\nThat shift seemed to do the trick. Kathryn's moans got louder and louder, mounting towards her ultimate climax. I, too, was on the verge, and needed only to decide when to dump my load. \n\n\"I'm almost there, Kathryn. Where do you want it?\"\n\nKathryn could barely get a word out. Her mouth hung slack as I rocked her through her third and final orgasm of the night. It looked like she was trying to say a word that started with W.\n\n\"What?\" I asked.\n\n\"W...w...WHEREVER YOU WANT!\" she screamed, overcome with lust. \n\n\"Are you on the pill?\"\n\nKathryn didn't even try to speak this time. She simply nodded eagerly. \n\nI pulled out of her ass, and Kathryn responded with a disappointed growl. I had temporarily stalled her progress towards orgasm, but I was only delaying the inevitable I guided my thick erection back into her pussy and started going at it hard.\n\n\"I'm going to cum inside you, Kathryn.\"\n\nShe groaned, apparently welcoming the dissolution of yet another barrier. Her pussy welcomed me openly and immediately sucked the cum right out of my balls. I felt like a firehose spraying inside a burning house, so hot and wet the entire situation was. I held Kathryn in place by grasping her left shoulder, my elbow collapsing on top of her chest. It matched, and perhaps exceeded, the experience from last Friday.\n\nWe both remained like that, silent and unmoving or a minute or so. It took that long to catch our breath. Once I had recovered, I sat back in my chair, my cock oozing out of her with an audible squish. As I moved back, Kathryn grabbed my tie and used it as leverage to raise herself. She then collapsed onto my lap, sitting side-saddle on my knee. She draped her arm around my neck and planted her lips directly on mine. \n\nWe engaged in a passionate kiss for who knows how long. Our tongues tickled one another. Our lips and teeth sucked and nibbled. My hands explored her breasts over her bra. We were both drained from what had just occurred, but wanted to squeeze every drop from this lemon. Only after my lips started to feel raw did I break it off.\n\n\"What is happening here, Henry?\" she asked.\n\n\"I'm not really sure how to explain it,\" I answered. \"It feels magical, right? But you're asking if we're both going to upend our lives to pursue it?\"",
        "She paused, then offered, \"Basically, yes. Is that what you want?\"\n\n\"Please don't take this the wrong way, Kathryn, but no, I don't. If you'd asked me to grade my life up until last Thursday, I'd have said an A, easily. I love my wife, and I would never leave her, even if it was just for the stability we provide our kids. That said, the last week has definitely raised that score to an A-plus. But I don't want to risk the A to pursue the A-plus, if that makes sense.\"\n\n\"Thank God. I feel the same way,\" she answered. \"I love Jeremy, and I don't want that to end. And I definitely don't want the reputation of the 'other woman,' especially with an officemate. Whatever happiness we would try to find would be marred by that. But I can't disagree that this last week has been amazing.\"\n\n\"So I guess the question is: do we try to keep this going on the side?\"\n\n\"I don't know. What do you want?\"\n\n\"Honestly, in this moment, with you on my lap and the mess we made all over the floor...and my suit!...no, I don't want this to end. I want to have my cake and eat it, too. Do you think that's possible?\"\n\nKathryn let her hand fall to my chest and rubbed it softly. \"That's what I want, too. I know it never works. I know many have tried and failed. But maybe we don't hear about the successes because they're good at keeping it secret. I don't know how long I want this to last, and whatever decision I make I do with the utmost respect for you, but I do know that I don't want this to be the last time.\"\n\nMy hand was exploring her soft hips, stroking her in a comforting manner. My other hand came up and grabbed her shoulder, holding her in a half hug. \n\n\"OK, I agree. Let's go for it. Maybe next week we can lay out some ground rules to prevent it from blowing up in our faces.\"\n\n\"You know I'm good at coming up with a plan,\" she said, referring to her reputation in the office. \"I'll think about it this weekend, and we can meet next week to bring our ideas to the table.\"\n\n\"OK,\" I said. I let her go, insinuating that it was time to get up. She took the hint, and rose to her feet. \n\nI admired her body once more. Utter perfection. Smooth, lithe, and taut, honed from years of yoga. I was lucky to have had this opportunity, even if it risked my future. She looked around for her panties, but I was once again too quick for her.\n\n\"Uh, uh, uh,\" I said, shaking my head. \"I promise he'll prefer the look without these.\" I stuffed them into my pocket with a mischievous grin. Kathryn relented immediately, knowing she wasn't going to win this one. \n\n\"Looks like you're the one who needs to hide a mess tonight,\" she said, gesturing towards my pants. Indeed, her squirt had drenched my slacks from my knees to my thighs. There was noticeable wrinkling in my shirt where she had clutched me earlier, and I'm sure my hair was a mess.\n\n\"I'll take care of the hair in the car, and I'll just keep my jacket buttoned until I get upstairs. For the pants, though? Might have to pick up a Big Gulp on the way home and claim that I spilled it in the car.\"\n\nKathryn laughed. \"Quick thinking.\"\n\n\"Want me to help you clean up here?\" I asked.\n\n\"No. Maybe better if we leave separately this time. It's a bit earlier than last Friday, and there could be a couple randos still around. Don't want to arouse suspicion.\"\n\n\"Suspicion is the only thing you can't arouse,\" I said.\n\n\"OK, if we're at the point of you making sexual dad jokes, it's definitely time for you to go. \n\nI zipped myself back up and stood. Kathryn gave me a long, sensual kiss, then pushed me away. I headed for the door, wondering how I would ever be able to make this work."
    ],
    "authorname": "abob1",
    "tags": [
        "affair",
        "anal",
        "cheating",
        "cmnf",
        "office",
        "pussy eating",
        "tryst"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/unexpected-anal-office-tryst-ch-02"
}
{
    "title": "Tucker's Studio Ch. 26",
    "pages": [
        "All people and places are fictional. All characters are over eighteen.\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nTwo Girlfriends\n\nIt didn't take long for Liz to become a big part of Tucker and Marsha's lives. Tucker had thought Marsha's idea of him having two girlfriends was just a little role playing fun, but she was serious, and Liz was happy with the idea too. It was an equal opportunity situation \u2014 Liz and Marsha were as much a couple as either girl was with Tucker. The whole thing had happened very organically, and two weeks down the road it felt almost normal.\n\nTucker's queen size bed was traded in on a king size model, and Liz's condo was often empty. Tucker's next door neighbor Doris, a sweet eighty-three-year-old widow who had her nose in most of the buildings business, had a pretty good idea things had gotten a bit free-wheeling between her younger neighbors. She never said anything though, just some knowing looks and odd smiles to go along with her quickly swiveling head and darting eyes as she kept an eye on things.\n\nLiz got a kick out of it. The first week felt a bit odd, like an out of body experience, but week number two found her settling in to her new situation, enjoying the nonconformist nature of it. She felt like a happy teenager again when Doris said hello in the hall, in that \"I know what you're up to\" way.\n\nEven more fun was spending time at the studio. Tucker and Marsha were used to it, but for Liz it was full of dream-like memories of her time there with Kylie. Running into Mitch and Dave again, and realizing that the sex they'd all shared was just work to them, fun work but work none-the-less, was strangely liberating. Liz had let it become a powerful thing in her mind, too powerful, so seeing them again and coming to grips with the casualness of the situation was good for her. She was starting to understand the porn world.\n\nLiz had fucked a third man that day with Kylie, but he was a different kettle of fish. Ryan. Young, perfect college athlete Ryan. It wasn't that she didn't find Mitch and Dave attractive \u2014 she did, very much so. But Ryan, twenty years her junior in age, was just so...\n\nWhen Liz was a teenager, before she joined the Navy at age nineteen, she knew a boy like Ryan. The perfect-bodied athlete, with the long hair and the mesmerizing smile. She always dreamt he had a perfect cock too, but dreaming was as close as she ever got to it. All tangled up in The Kylie Orgy, as Liz likes to think of that afternoon, with Ryan fucking her deep with the most perfect cock she'd ever seen \u2014 well, it was about as good as it gets, and she let herself go in front of the cameras in a way that surprised her. A big reason why was that boy from her past, and the fantasies she'd had of him in her teenage years. They finally came true over twenty years later, when Ryan fucked her deep from behind.\n\nLiz stopped by the studio on a sunny Tuesday. She'd made it seem like she was just dropping in to say hi, but there was more to it that day. She knew Ryan was scheduled to shoot a scene with an older amateur, and she was dying to see him again. She was nervous about it though. Mitch and Dave had been nothing but nice and relaxed about everything, but she wondered if Ryan would be. She was twenty years older than him after all, and her mind went to places it shouldn't go, wondering if Ryan thought of the older women he had to work with as desperate old skanks. And now that she was in a long-term threeway relationship with Tucker and Marsha, something everyone at the studio knew about, she wondered if Ryan would think she was a gold-digging desperate old skank.\n\n\"Oh, hi!\" Ryan said, his smile beaming brightly.\n\n\"Hi Ryan,\" Liz said quietly. His smile let her know her nerves were for naught. She smiled too, and hugged him.\n\n\"It's so cool that you're back!\" the young man said. \"You and your friend were so much fun. One of the weird things about this job is never seeing people again, after...you know.\"\n\n\"Yeah, that must be weird. So how are you?\"\n\n\"Great!\" Ryan said. \"You look really good. It's so cool that you and Tucker and Marsha are hangin' out. I love that.\"\n\n\"Yeah?\" Marsha asked. \"I always wonder what people think.\"\n\n\"No, it's cool! So you gonna watch today?\"\n\n\"Oh, I, uh...no, I just stopped by to say hello.\"\n\n\"You should stay,\" Ryan said, with a twinkle in his eye. \n\nHe wanted to tell Liz it would help to have her watch him \u2014 the woman that was there to do the scene wasn't exactly a looker, and Liz would help keep him horny, but he didn't say it. Liz sort of knew what he meant though, from the look on his face, although she was sure she was reading him wrong. He couldn't possibly want me to watch him, could he, she wondered? Just then, Tucker walked by.\n\n\"Hey Tucker? Is it all right if Liz watches?\" Ryan asked.\n\n\"Oh. Yeah, sure,\" Tucker said, with a quizzical little smile. He could sense the spark between Liz and Ryan, and he liked it.\n\nThe day's scene was pretty basic \u2014 Ryan with an older woman. She was a forty-something divorcee who lived in a trailer park sixty miles from the city, living out a fantasy from her bucket list. That fantasy was being fucked by her son, who, according to the woman, looked a lot like Ryan. Ryan was less turned on by the idea, mainly because of the woman's huge bush of untrimmed pubes, and her beer-belly stomach that threw her all out of proportion. \n\nTucker knew the guys sometimes used Marsha as fantasy material, locking eyes with her as they fucked women that they didn't find attractive, so he wasn't surprised and didn't mind at all when Ryan's eyes locked with Liz's as he fucked the shit out of the trailer park mama.\n\n\"Fuck!...God damn!...Yeeeeaahhh!\" The pot-bellied woman screamed. \"You're fuckin ruinin' me!...No cock'll ever be enough!...Ohhhh Fuuuuck!\"\n\nRyan was giving her everything he had, slapping hard into her cottage-cheesy ass. The wildly orgasmic woman struggled to stay on her hands and knees, desperate to keep the moment going as long as she could. \n\nLiz was right in Ryan's line of sight. She was surprised how turned on she was, and she was wishing she'd worn loser, cooler clothing for her visit to the studio that day. Truth be told, she had hoped to stay and watch Ryan in action, but she didn't expect the intense, lusty eye contact with him. It was wild and crazy, and out-of-this-world exciting. She was snapped out of it by a hand squeezing her ass.\n\n\"You have an admirer,\" Marsha whispered in Liz's ear. \"He's fucking you right now. You know that, right?\"\n\nLiz's body tensed at the thought. Her mind blurred for a few moments, but she snapped out of it just in time to see Ryan's big cock pull out of the woman's slippery hole and plaster her ass with cum. The woman was beside herself, lost in a spasming, orgasmic dream.\n\n\"Cut! Great work everybody,\" Tucker said.\n\n\u2014\n\nTucker took Marsha and Liz out to dinner that night. He liked to celebrate after filming a scene, nothing fancy, just a nice dinner and a little wine to toast the career gods for giving him a fun one. Liz and Tucker had a nice moment of eye contact over a sip of Shiraz. \n\n\"How's it feel to be a handsome porn star's muse?\" he said. Liz's face flushed with heat. She hoped it wasn't visible.\n\n\"A what?\" she whimpered.\n\nTucker smiled. He knew she knew what he meant, and she looked cute trying to deny it to herself. Marsha giggled.\n\n\"The poor boy won't be able to perform without you,\" Marsha smiled. \"That big, long cock'll go all soft.\" \n\n\"Get out!\" Liz said, blushing profusely. \"You guys are...can we change the subject?\"\n\n\"No. You're not gettin' off that easy,\" Marsha said, \"but Ryan sure got off when he looked at you.\"\n\nTucker and Marsha laughed, and Liz squirmed uncomfortably.\n\n\"Here's another handsome twenty-year-old,\" Marsha said as the waiter approached. \"Why don't you try your powers on him?\"\n\n\"I will not!\" Liz exclaimed softly. \"I don't have any powers!\"\n\n\"I don't know,\" Tucker said. \"You made me hard as a rock earlier, and you were lookin' at another guy! That's some kind of magic right there.\"\n\nLiz was horrified that Tucker was saying those things while the waiter was putting the food on the table. She took a deep breath and hoped her red face wasn't too bright. She never looked at the waiter.\n\n\"Okay sweetie, we'll lay off,\" Marsha said as she picked up her fork and cut into her lasagna. \"You gotta admit that was hot though. I had no idea you and Ryan had connected like that.\"\n\nLiz loosened up with two big gulps of wine, and the flush finally left her body. She told the story of the boy she'd met right before the Navy, and the powerful fantasies she'd had about him.\n\n\"That's the best thing about getting older,\" Marsha said. \"When old fantasies finally come to life, it's so much better than if it'd happened back then.\"\n\n\"Absolutely,\" Tucker said. \"Lizzy, you got nothin' to be ashamed of. Embrace it. It's all good.\"\n\n\"I never thought I'd have a boyfriend who wanted me to think about other guys,\" Liz said.\n\n\"We want you to do more than think about it Lizzy, right Tucker?\" Marsha said. She winked at him.\n\n\"Absolutely,\" he said. \"We're not all tied in some old-fashioned relationship here. I know this is new for all of us, but let's keep things open and fun.\"\n\n\"In other words,\" Marsha said, \"if you wanna invite Ryan over sometime, or corner him in the storage room...\"\n\nLiz's face flushed red again, not quite as deep a shade as the wine, but close.\n\n\"This might be a good time to admit something,\" Marsha said. \"A few months ago, Kelsey was helping me unpack some new toys. Remember that day you had the meeting with the city about the neighborhood improvements?\"\n\n\"Yeah, I remember,\" Tucker said.\n\n\"There were handcuffs, and some other things. There was nobody around. She...kinda got me...tied up, on the brass bed.\"\n\n\"Really! Oh my God, she's such a sexy little thing, isn't she?\" Liz said, happy the conversation had shifted away from Ryan. \"I guess I'm not surprised, after what you guys told me about Vegas, and Kelsey's parents.\"\n\n\"Yeah. Nothin' surprises me about her,\" Tucker said.\n\n\"Well this part might. First of all, I wanna tell you absolutely nothing was planned. Kelsey was just as surprised as I was. So, we're like goin' at it with a double dildo, with me all tied up, and...Billy shows up. It was right after you gave him the key, remember? He stopped in for his paycheck.\"\n\n\"Holy shit,\" Tucker said, stopping his forkful of food right before it reached his mouth.\n\n\"I know you think a lot of him, and maybe I shouldn't be telling you this, but...\"\n\n\"Hey, I wouldn't have been able to resist you either,\" Tucker said. \"Wow. I'm just trying to picture this. So the three of you...\"\n\n\"Yeah,\" Marsha said. \"It was kinda big. I've felt bad that we kept it from you.\"\n\n\"No, that's cool,\" Tucker said. \"I mean it was before you moved in and we got really close. But no more secrets, okay. All of us. Open and fun, but the key is the open part. We tell each other everything.\"\n\n\"Deal,\" Marsha said. She held her glass up for Liz to clink.\n\n\"Deal,\" Liz said.\n\nTucker joined the threeway glass clink and they all took a sip of the red liquid. Their smiling faces told the rest of the story. Liz looked around, wondering if anybody else at the restaurant had such a life, and how, at age forty, she'd fallen in with so many magical people. It was truly a mystery, after the last few boring years. She wasn't complaining.\n\nOver the course of the next few weeks she gradually met everyone at the studio, from Dante's massive bulk to Kelsey's petite perfection. She found, much to her surprise, that she had a thing for the youngsters. She was old enough to be their mother, and it bothered her at first, but the fantasies wouldn't stop coming. It all started with Ryan, of course, but Kelsey and Billy and Josh all made her head spin. She decided it must be a mid-life crisis, and she and Marsha laughed about it.\n\n\"Hey, I'm never gonna judge you about that,\" Marsha said, pouring some wine one evening with Liz and Tucker at the condo. \"I've been with Kelsey and her friend Raymond, and Billy, so...\"\n\n\"Yeah, but they're only ten years younger than you,\" Liz said. \"I'm ten years older than you two. I've got twenty years on those kids!\"\n\n\"Who cares?\" Tucker said. \"They obviously don't. They're all sex crazy, and good sex is good sex.\"\n\n\"Easy for you to say,\" Liz said. \"I'm new at this, remember?\"\n\n\"So, fuck 'em all, and then you won't be,\" Tucker smirked. Liz nearly choked on her wine.\n\n\"Sounds like an excellent plan,\" Marsha said.\n\n\"God,\" Liz quietly exclaimed. \"Is this my life? What's happened to me?\"\n\n\"You're learning to have fun sweetheart,\" Marsha said, giving her a wine flavored kiss, \"and I am too.\"\n\n\u2014\n\nMarsha knew Kelsey was the right girl for the job she had in mind, so she texted her the next day...\n\n- Don't tell her I told you this, but Liz needs lots of young cock. Can you help?\n\n- Fun!!! Yes I can help!!! Me and Hannah were just talking about having a party. Wanna cum???\n\n- Count us in.\n\n- OMG!!! My friends will love it!!! I'm stoked!!!\n\nThe plans came together quickly. College kids love their theme parties \u2014 togas, bubble wrap, body paint \u2014 but Kelsey wanted something more appropriate for her more mature guests of honor. Marsha though it'd be fun to get Liz into her Navy uniform, so they decided on a uniform-themed costume party. Most of the kids would be improvising, but Kelsey thought it would be fun.\n\n\"You're crazy!\" Liz said, when Marsha told her where they'd be going that night. \"I'm way to old for that, and I'd never wear my uniform.\"\n\n\"You're not, and you will,\" Marsha said. \"Kelsey's really excited about this. She'll be crushed if we don't go.\"\n\n\"Well I'm not going,\" Tucker said. \"An old guy at a party like that is just creepy. Two women your age is just plain hot. You guys have fun. I envy the guys in the room when they see you walk in in your uniform. Whites or blues? With a skirt, I'm guessing?\"\n\n\"No,\" Liz said, her eyes darting nervously. \"I can't.\"\n\n\"You have to,\" Marsha said. \"I went and bought a waitress uniform, and I'm not going without you. Josh is gonna be there. Ryan too I think.\"\n\nLiz's eyes grew when she heard the names, but she quickly tried to hide her interest.\n\n\"No,\" she said. \"It's crazy.\"\n\nHer words weren't nearly as forceful as before. It was pretty clear her defenses were breaking down.\n\n\"You'll at least put it on for me, right?\" Marsha asked in her most seductive voice. \"Let's go to your place and try things on.\"\n\n\"God,\" Liz muttered under her breath. She could feel the horny girl inside her starting to stir. Marsha gathered up the new waitress dress and a few other things and led Liz by the hand out the door and down the hall.\n\n\"This is wrong on so many levels,\" Liz said as they entered her condo. \"We're too old for a college party, especially one with...sex. And I shouldn't use my uniform for something...like that.\"\n\n\"Oh, come on! It'll be a hoot! Tell me you don't wanna get with Ryan again, and Josh with those dimples. Picture that dimpled face licking you.\"\n\nMarsha lured Liz into the bathroom, and then into the shower.\n\n\"Help me shave my legs,\" she said. Liz couldn't resist that, and hoped Marsha would give up on the party idea if they played on their own under the warm water. Leg shaving led to pussy shaving, and warm, wet, smoothly shaved pussies just have to be eaten. Marsha was a wily manipulator though, more so than Liz had realized. She left Liz hanging, unsatisfied, with the first of what she'd hoped would be many orgasms still bottled up inside.\n\n\"Wouldn't Ryan's long cock feel heavenly right about now?\" Marsha said, on her knees under the cascading water, teasing Liz's clit with her tongue. \"He knows you're invited you know. He'll be so disappointed if you're not there.\"\n\nHalf-an-hour later the girls returned to Tucker's condo, Marsha in a tight little waitress dress, tan with brown detailing and a brown belt, and Liz in her Navy dress blues \u2014 knee length skirt, white blouse, dark-blue jacket with gold buttons and five gold slashes on the arms, all of it topped with a white cap with a gold anchor insignia. Marsha had talked her into wearing high heels that the Navy would never approve of.\n\n\"Chief Petty Officer Elizabeth Marksmith, reporting for duty sir,\" Liz said. Her smirking mouth was tight, trying to hold back a chuckle. It was a lost cause and both the girls burst out laughing.\n\n\"Holy fuck!\" Tucker said, looking the two of them over. \"You guys look awesome! You gotta wear those for me next time! Shit!\"\n\nMarsha pulled up her dress to show off the black garter belt holding up her stockings.\n\n\"It's not too much?\" she asked.\n\n\"Are you kidding?\" Tucker said. \"Those fuckin' boys are in for the time of their lives!\"\n\n\"And you? What do you get outta this?\" Marsha asked with a raised eyebrow.\n\n\"That, my dear, remains to be seen,\" he said. \"But I'll tell you all about it when it happens.\"\n\n\"Hmmm,\" Marsha squinted. \"This is so weird. I'm not sure I like it.\"\n\n\"See if you still feel that way after the party,\" Tucker said, confident in Kelsey's ability to conjure up sexual magic.\n\n\"We don't have to do this you know,\" Liz said to Marsha.\n\n\"Oh yes we do,\" Marsha said, suddenly feeling a horny tingle deep in her gut. \"Look at me. I'm fully slutified for the night. We're not chickening out.\"\n\n\"I know you don't know Kelsey very well yet,\" Tucker said to Liz, \"but trust me, you'll have fun. She doesn't allow life to be anything but awesome.\"\n\n\"I can't believe I'm doing this,\" Liz grumbled. \"We better go before I run away and hide.\"\n\n\"You're too cute,\" Marsha said. She brushed her fingertips across the colorful ribbon bar on Liz's chest. \"What's all this for?\"\n\n\"Service ribbons and awards. They're like medals.\"\n\n\"Really!\" Marsha said, her fingertips transitioning into a full squeeze of Liz's nice tit. \"So sexy!\"\n\n\"I've never felt sexy in my uniform before.\"\n\n\"Oh my gosh you are! Tucker's right, those boys that are waiting for us are gonna go nuts. I am too,\" Marsha said, still gently fondling, and ending things with a quick, open mouthed kiss. \"Let's go.\"\n\n\u2014\n\n\"You guys!\" Kelsey hollered from her front porch. \"Oh my God! You look awesome!\"\n\nLiz and Marsha were walking down the sidewalk after parking their car, Marsha ahead with Liz following, both of them glad the tightly packed old neighborhood street wasn't better lit on that dark night.\n\nThe apartment Kelsey shared with Hannah was in a tired old house that looked like it had been off-campus student housing forever, a three-story box with a mansard roof, pealing paint and stacked front porches, one for each of the three apartments. Kelsey's was on the second floor, and she was leaning on the railing as she yelled down her greeting. Marsha giggled when she saw her, her perfect little body stuffed into a red, one-piece bathing suit.\n\n\"Let me guess, you're the lifeguard who's gonna save us,\" Marsha yelled up to her.\n\nLiz wasn't happy about all the loud chatter. There were student age folks walking the sidewalks and she just wanted to get inside, as quickly and quietly as possible. She was glad she'd worn her Navy blues instead of the dress whites, but she still felt like she stood out like a sore thumb. Marsha giggled again when Liz gently pushed her toward the steps.\n\nThe beat up front door looked like something a salvage yard would reject, and inside the entryway things didn't improve much. The stale air had a faint whiff of vomit, and two bare bulbs cast stark shadows. Dark wood was everywhere \u2014 paneled wainscoting that a carpenter a hundred years ago had lovingly crafted was nearly black with age from decades of neglect. The walls above were painted with the kind of flat, un-shiny black you see on old hot-rods and plastered with notices about parties, requests for rides, and handbills for bands and art shows, all of it haphazardly tacked or taped up. The bits of wall that didn't have something attached to them were riddled with tiny holes from thousands of pushpins.",
        "The staircase was dark wood too, the treads worn bare, eroded into smooth hollows. The bannister was a massive thing with a beautifully turned newel post and twisting, spiral-like balusters. Marsha's hand slid along the sturdy handrail as she ascended the creaking steps.\n\n\"This is crazy,\" Liz said quietly as she followed. Marsha giggled again.\n\nIt was a nervous giggle. Marsha had come to the too-late decision that what she and Liz were doing was in fact crazy \u2014 two middle-aged women going to a college orgy at what appeared to be either Animal House or The Bates Motel. It was too late to turn back though \u2014 Liz was counting on her confidence, and Kelsey had seen them arrive.\n\n\"You guys! I cannot believe how hot you look!\" Kelsey said. She was standing in her open doorway at the second floor landing. There was young chatter and laughter coming from inside, and the low throb of some not-too-loud music. Hip hop, or dance, or maybe rap. The two women didn't have a clue which was which.\n\n\"Fuck!\" Kelsey said, still looking them over. \"You got underwear under those?\"\n\nMarsha giggled nervously again, and flashed her garter belt and panties. She made sure she was standing off to the side of the door, where only Kelsey could see.\n\n\"Fuck,\" Kelsey said under her breath. \"And you!\" she said to Liz. \"Marsha told me you were in the Navy but oh my God!\"\n\n\"Show her,\" Marsha said to Liz. \n\nLiz didn't know why she did it, but her hands went to the sides of her dark-blue skirt and she pulled it up, the knee-length hem sliding up past the tops of her thigh-high nylons, just enough to give Kelsey a peek at the white of her panties before her nervousness finally overrode things. She covered up quickly and smoothed her skirt.\n\n\"Okay, this is fuckin' awesome,\" Kelsey said matter-of-factly. \"Hannah!\" she yelled into the party. A stunning, exotic looking young girl quickly appeared.\n\n\"This is Hannah?\" Marsha gasped when she saw the girl.\n\n\"Isn't she hot!\" Kelsey said, thrilled that her sexy roommate had rendered Marsha nearly speechless.\n\n\"Hi,\" Hannah said, extending her hand politely.\n\n\"Hi, I'm Marsha. This is my friend Liz.\"\n\nMarsha's eyes twinkled with fascination, unable to look away from Hannah's remarkably beautiful face. If she had been able to, she might have zeroed in on the girls tits, soft and jiggly under hospital scrubs, with nipples just hard enough to bump out the thin fabric. Or she might have zeroed in on Hannah's flat belly and sexy navel, out in the fresh air beneath the scissored-off scrub shirt, or the tight scrub pants that had been cut off into short shorts.\n\n\"She's an operating room nurse!\" Kelsey said excitedly.\n\n\"Yes,\" Marsha said dreamily. \"I'd like to be sick there.\"\n\nLiz was quite taken with the girl too. Her years onboard aircraft carriers had taken her to many Asian ports, but she was having trouble deciphering Hannah's ancestry. She'd find out later that Hannah's father is an African-American who married her Vietnamese mother when he was doing Christian missionary work back in the early '90s.\n\n\"Come on in and meet everybody,\" Kelsey said. As she said it the front door opened down below. Kelsey bent over the railing and looked down at two college boys bounding up the stairs. \"Hi guys!\" she said.\n\nOne of them was really tall, wearing a cardboard crown from McDonald's on his head and numerous plastic gold-beaded necklaces around his neck. Liz assumed he was dressed as a King, although the everyday t-shirt and jeans didn't further the look much. She also had a feeling he was a member of the University's basketball team, but she didn't really follow the sport and couldn't be sure. The other boy was dressed all in white \u2014 t-shirt, jeans and Gilligan style sailor hat.\n\n\"Hey, you guys are in the Navy together!\" Kelsey said happily. \"Watch out Jacob, she's got all those stripes on her arms, that means she can order you to do stuff.\"\n\nLiz's throat tightened and she felt a blush tint her face. She hoped the light was bad enough that one would notice.\n\nKelsey shuffled all the new arrivals into her apartment. Liz and Marsha were happy to see it was brighter inside \u2014 the walls were a nondescript dirty gray, but the girls had decorated with bright colors. The couch was slip-covered with a yellow bed sheet, a pair of old wood-framed chairs had light green cushions, and the walls were adorned with multi-color tie-dyed hangings and posters. Marsha couldn't help comparing it to Kelsey's childhood room at her parents house \u2014 both looked young to Marsha's thirty-year-old eyes, but the apartment was definitely hipper. \n\nThe brightness was limited to the decorating, however, as the lighting was decidedly dim. Liz and Marsha were both happy about that, because both of them suddenly felt as old as the hills. College kids are young!\n\n\"These are my friends from work everybody,\" Kelsey announced. \n\nThat was the extent of the formalities. Hannah talked with Liz and Marsha while Kelsey flitted around, her bright red one-piece bathing suit making her easy to find. There was another lifeguard costumed bathing suited attendee, a boy that reminded Marsha of Billy Carpenter. Tall, with a narrow waist and broad, muscled shoulders, he looked every bit the swimmer. His suit was skin-tight, with short legs that hugged his strong thighs. His young ass was perfectly defined by the suit, like the thin spandex had been shrink-wrapped onto him, and Marsha was more than a little curious to see what the front of him looked like.\n\n\"Who's the swimmer?\" she asked Hannah. \n\n\"That's Justin,\" Hannah said, smiling in a way Marsha recognized.\n\n\"So tell me, is it just one wild party after another around here?\" Marsha asked.\n\n\"No, a lot of the time it's just Kelsey and me,\" Hannah said. She tried to fight that same telling smile, but she couldn't.\n\n\"So, yes, in other words,\" Marsha smiled. Hannah giggled.\n\nThree new girls arrived and joined the quietly simmering festivities, walking in through the open door. Liz wondered if the door would be shut when things...got going. She hoped so. She also wondered if she could ditch some of her uniform, so she wouldn't feel so conspicuous. She asked Kelsey when she breezed by.\n\n\"Oh, can't you leave it on a little while?\" Kelsey said, sounding disappointed. \"The boys'd love to fuck you while you're wearing it.\"\n\nLiz's throat tightened up again. She knew what she was there for, obviously, but to hear it said so blatantly took her breath away for a moment.\n\n\"How can you say no to that?\" Marsha giggled. \"So, my gorgeous little friend,\" she said to Kelsey, \"How does all this fucking start?\"\n\n\"Hey everybody,\" Kelsey announced to the room, \"my friends can't stay out late 'cause they're old. Let's get this party started!\"\n\nShe smiled a devious smile at Marsha, flipped the straps off her shoulders and shimmied out of the red bathing suit. The room whooped their approval.\n\n\"You little shit!\" Marsha said, smiling and shaking her head.\n\n\"So there!\" Kelsey said. She walked her smiling, naked self behind Marsha and reached for the zipper on the waitress dress. \"Show me what else is under here.\"\n\nMarsha's adrenaline level shot through the roof. The whole room was watching. Her instinct was to stop Kelsey and slow things down, but she took a deep breath and went with it. Before she could think too much her dress was in a pile on the floor around her ankles. The partiers whooped again as she stood there in her sexiest black lingerie set. Kelsey, in all her naked glory, moved around to the front and slowly squatted, her warm lips and hands gliding down Marsha's body, coming to a stop with an open-mouthed, toothy bite of Marsha's panty covered mound. It was the best porn star move anybody had seen in real life, and the gang loved it.\n\nLiz was terrified. She knew it was going to be wild, but she didn't want to be the center of attention the way Marsha was. She felt faint and sat in the nearest spot, the old couch. The boy in the white jeans and the sailor hat suddenly plopped down next to her.\n\n\"Reporting for duty Ma'am,\" he said with a smile.\n\n\"Get me a drink,\" Liz said. \n\nHer mind was in a fog, but a drink seemed like a good start. While Sailor Boy was gone she looked around \u2014 two couples were kissing, one girl was on her knees sucking a half-hard cock, and three other girls were whisking off their tops. One of them was Hannah, and her soft tits were the picture of perfection. Medium-big and natural, they hung on her body like works of art.\n\n\"Rum and Coke,\" Sailor Boy said, handing Liz a red plastic cup. \"Any other orders for me?\" he smiled.\n\nLiz's body tightened again. This was it. It was all happening and she was in the middle of it.\n\n\"Take off your shirt.\"\n\n\"Yes ma'am!\" Sailor Boy said, with an even bigger smile. His hat got swallowed up by his t-shirt as his young flesh came into view.\n\n\"Put the hat back on and drop and give me twenty,\" Liz said.\n\n\"Yes Ma'am,\" he said. A moment later he was down on the floor doing pushups.\n\n\"Make him do 'em naked!\" Kelsey suggested.\n\n\"Strip, and give me twenty more,\" Liz said. The humor of the situation relaxed her a bit.\n\n\"Any orders for me?\" Justin asked from the other side of the room.\n\n\"Kiss the woman in the black lingerie,\" Liz said. Her adrenaline was pumping something fierce.\n\nMarsha giggled nervously. She was still standing, with Kelsey's head in her hands as the little redhead licked her pussy. Her eyes met Justin's as he turned and she got her first glimpse of the bulge in his skin-tight bathing suit. It was huge, nearly fully engorged from watching topless girls and the blowjob happening next to him.\n\n\"Take off your bathing suit first,\" Liz said as he walked toward Marsha.\n\n\"Yes...Ma'am,\" he replied. He stopped, wiggled out of the tight little garment and tossed it aside. Holding his hard cock down as best he could, he walked to Marsha and kissed her.\n\n\"You guys play,\" Kelsey said, rising to her feet. \"I'm gonna see who's coming.\" She skittered out the door, big tits jiggling, and leaned over the railing. \"Hi you guys!\" she yelled to the new arrivals. \"Hey Marsha, Ryan and Joshy are here!\"\n\nThe two boys hugged the naked little sprite out on the landing, and she led them in by the hand.\n\n\"You know everybody, right?\" she asked them.\n\n\"Yeah. Tucker's not here?\" Ryan asked.\n\n\"Nope. He turned his girls loose tonight,\" Kelsey said.\n\n\"Wow. He's cool with that?\" Ryan asked.\n\n\"Yup,\" Marsha said, one hand around Justin's waist, the other stroking his cock. \"He told us to have fun. We're gonna owe him big-time though.\"\n\n\"Cool,\" Ryan said to her. \"You look...really nice.\"\n\nHe hadn't been with Marsha yet, but had heard all the stories. His eyes glanced around the room and he saw Liz, decked out in Navy dress blues.\n\n\"How 'bout that,\" Marsha said when she saw where his gaze had stopped. \"Better watch out, she's giving orders to you boys.\"\n\n\"Cool!\" he said as he was drawn closer to her. \"Liz, you look awesome!\n\n\"Thanks Ryan,\" she said, suddenly turning shy. She'd been dreaming about having his long cock again ever since that afternoon with Kylie. It was finally going to happen. And Josh, who she'd watched on the website and met at the studio, was right there too.\n\n\"You need a drink or anything?\" Josh asked.\n\nShe guzzled the one Sailor Boy had made for her and handed the empty cup to Josh.\n\n\"Rum and Coke,\" she said.\n\nWhen Josh brought it to her Ryan was siting next to her and sailor Boy was still doing pushups. He'd done way more than twenty and was just showing off. \n\n\"Save some of that energy Sailor,\" she said to him. \"I'm gonna want it later.\"\n\n\"Yes Ma'am!\" he said with a knowing smile. He stood at some semblance of attention in front of her, his cock hanging soft but chubby. \"Anything else Ma'am?\"\n\n\"At ease Sailor,\" she smirked. \"Get yourself a drink.\"\n\nThe sound of fucking rose above the not-too-loud music. It was the couple that had started with the blowjob. He was down on the floor in just a t-shirt and she was riding him, her gray Burger King shirt and visor giving away her part-time job.\n\n\"Yeah, do it!\" Kelsey yelled. \"Somebody fuck me, I'm horny as fuck!\"\n\nThe super-tall King shed his clothes in a hurry, leaving the cardboard crown on his head. He was at least a foot-and-a-half taller than Kelsey, so she stood on one of the wood-framed chairs and bent over. Tall Boy knelt on the floor and his mouth met Kelsey's pretty pussy. She groaned loud as he lapped up through her juicy gap and his tongue tickled her asshole.\n\n\"Fuck,\" she gasped. \"Stick that big fuckin' cock in me.\"\n\nHe stood and Kelsey bent her knees a little, allowing him to slip in. Marsha was astonished at the size of the boy's shlong, although proportionally it was about right-sized for his six-foot-nine-inch frame. She was almost positive he was the basketball player she'd seen on the local sports news, one of the stars from that year's team.\n\nMarsha was super wet and horny too, and ready to be fucked.\n\n\"Wanna make me cum honey?\" she asked Justin. \n\nShe was surprised at her brazenness, after all the nerves she'd felt earlier. Watching and listening to porn stars for all those years had rubbed off on her she guessed. She took her panties off, put her hands on the nearest wall and thrust her sweet, round ass out at the boy.\n\n\"Fuuuck,\" Ryan said quietly as he watched her from the couch. It was his first look at that much of her, after over a year of fantasizing.\n\n\"Oh no you don't,\" Liz said. \"Me first.\"\n\n\"Oh, sorry,\" Ryan said. \n\n\"Hey, that's all right,\" Liz said. \"I think she's hot too.\"\n\nHer open mouth met Ryan's just as Marsha cried out. Both Liz and Ryan wanted to watch the up-against-the-wall action, so they did. It was a sweet sight when Marsha's hips got into it and Justin's body slapped rhythmically into her ass, making her soft flesh quake. He unhooked her bra and let her curvy tits hang loose. With her arms up and her hands against the wall, they swung differently and looked super sexy. In her black garter belt and stockings every inch of her looked sexy.\n\n\"Yeah Marsh!\" Kelsey yelled, in the midst of absorbing Tall Boy's huge cock. \"You look so fuckin' hot!\"\n\nMarsha couldn't muster the giggle that she wanted to, because an orgasm was already building. She kinda loved being watched, the situation was as powerfully erotic as any she'd ever been in, and a big one was brewing.\n\nAs Marsha was nearing the first summit of what was to be an epic, hours-long trek, Liz had Ryan's hard cock in her hand. His pants were pushed mid-way down his thighs and she was stroking the long thing smooth and gentle \u2014 the classic, under appreciated hand job.\n\nShe felt a little odd, truth be told, the only female in the room left fully clothed, in her uniform no less. Not to mention the fact that she was old enough to be mother to everyone in the room except Marsha. The oddness was even odder though \u2014 the combination of giving orders earlier, her formal, gold-trimmed clothing and her age gave her the odd sensation of being the Queen of the Orgy, the Mother Superior. It was nothing she would have guessed earlier in the evening, when she was so nervous. She and Ryan and Josh were all on the couch, and Sailor Boy was nearby. She caught all their eyes right after Marsha's big orgasm.\n\n\"You three'll fuck me now,\" she said, the words rolling of her tongue like she wasn't in control of them.\n\nShe lifted her ass off the couch cushion and pulled up her skirt, way up, so she could take off her white lace panties and spread her legs. She was astonished how easily it was happening \u2014 baring the most intimate part of herself in front of strangers. \n\nRyan remembered her pussy, and was the first soldier on his knees. The sensation that hit Liz's brain was extraordinary \u2014 an out-of-this-world head-rush that was an inch away from an orgasm. Ryan's mouth was pure magic, and the sights and noisy sex sounds around the room amplified it. After a short while Sailor Boy nudged Ryan aside and took over, his firm tongue giving Liz a different jolt of energy. Ryan and Josh both stripped as Liz watched, their young, smooth, muscular flesh nearly overwhelming her darting eyes. Two girls in the room had quietly screaming orgasms. Liz was in full sensory overload.\n\nJosh wanted in. When her eyes met his he nudged Sailor Boy aside and took a long, slow lick, from her ticklish asshole to her wildly sensitive clit. The third noticeably different tongue was almost too much for her.\n\n\"Fuck me,\" she sighed.\n\nJosh was hard and ready. He pulled her ass to the edge of the cushion and folded her legs up, opening her pussy wide. On his knees his cock lined up perfectly, and Liz's body swallowed it whole.\n\n\"Ohhh Jesus!\" she whispered, grunting hot breath.\n\n\"Fuck!\" Josh groaned.\n\nThe sight of his cock disappearing into a fully uniformed Navy woman was almost too much for him, but he held on. The back cushion of the couch had knocked Liz's white hat askew, but she left it there, her lusty eyes peeking out from under the gold-trimmed black brim.\n\nRyan sat next to her and held one of her thighs against his naked body to keep her wide open. Liz loved the feeling \u2014 it was the first time she'd ever felt restrained while someone fucked her.\n\n\"Hold my other leg,\" she said to Sailor Boy, the breathy words once again flowing with a mind of their own.\n\nSailor Boy knew what she wanted. He sat on the other side of her, hooked his arm around the inside of her knee and pulled her leg tight against him. She was as blatantly spread as she had ever been, pinned between two strong, naked boys, while a third fucked her deep. God help me, she thought to herself, I love this shit! \n\n\"Oh my God that's so hot!\" Kelsey said when she got a look at what was happening. \"Marsh, look. Liz knows how to do it.\"\n\nLiz's hands were on her restrainer's hard cocks, holding tight as her body disengaged from her mind.\n\n\"Come on everybody, this is good,\" Kelsey said, alerting the partying throng to the building excitement on the couch. She had extricated herself from Tall Boy's long cock to be closer to Liz during her big moment. Kelsey took the crooked Navy hat off Liz's head and put it on Josh, who was doing a bang up job with the fucking. Seeing him wearing her hat triggered something in Liz and she came with a grunt, her body locked up tight for a moment as the energy cooked her brain. She faintly heard a female voice say \"Switch,\" and then Tall Boy was there, his cock stretching her and plunging deeper. Liz could barely breath. Her body was still locked in mid-orgasm, her mouth open wide like her wild eyes. Tall Boy reached for her tits as he fucked her, but they were buried under layers of government issued clothing.\n\nKelsey went around the back of the couch and leaned over to unbutton the dark-blue jacket, her big tits almost in Liz's face.\n\n\"This is so hot,\" Kelsey said. \"These are medals you guys,\" she said, fingering the multi-colored decorations on the jacket's breast.\n\nShe opened the jacket and felt with her fingers to see how to undo the ribbon-like necktie around Liz's neck. Kelsey unhooked it and started to unbutton the crisp white shirt.\n\n\"Ooo, sexy!\" Kelsey said when the lacy white bra came into view.\n\nKelsey enlisted the two leg-holding boys to help, holding Liz up just enough to remove the garments and unhook the bra, leaving just the skirt around her waist. The troops all did their jobs and Liz was back as she had been \u2014 pinned and restrained by strong arms, but now there was more flesh in play, and Kelsey's hands were full of Liz's tits. \n\n\"Ryan's turn,\" Kelsey announced.\n\nRyan jumped up and switched places with Tall Boy. Liz was surprised \u2014 you'd think a cock would feel like a cock \u2014 but when Ryan sunk his nice one into her it felt just like the first time, when he'd fucked the shit out of her that day with Kylie. She would have known the feeling anywhere, even with her eyes closed. Her groaning sighs were starting to take on another character, guttural and devilish.",
        "\"Oh yeah, she's right there now,\" Kelsey said. \"You're in the zone now, right Liz?\" Liz wasn't able to communicate, but everyone knew she was.\n\nThe boys kept switching until everyone in the room had fucked her. When they couldn't contain themselves they splattered their cum on her. At least one came inside her. Kelsey cleaned the sloppy, gooey pussy with her tongue, moaning at the taste of it all. No one knew how many orgasms Liz had had, because they all seemed to flow together.\n\n\"Let her rest you guys,\" Kelsey said as she took one last lick.\n\nIt took a few minutes for reality to register, but gradually Liz heard the orgy sounds from around the room. She'd been lost in the hallucinogenic gang-bang for so long she'd forgotten what was happening. It struck her at first like a dream \u2014 lovely, sweet moans coming from lovely, sweet girls. It reminded her of a slumber party she went to when she was eleven, when her friend's mother brought out a big tray of homemade pastries and rich, dark-chocolate ice cream. She and her friends all moaned and groaned as their taste buds were satiated, filling the room with soft, beautiful sound. \n\nAs Liz's mind focused a little, she realized she wasn't eleven, and the sweet moans didn't have anything to do with pastry cream. There was cream involved, but it was gushing out of young men and another flavor entirely. Some of the very stuff was dripping down the side of her face as she came out of her foggy trance. Kelsey had decided to leave her all messy, so she could clean it off of herself, as Kelsey liked to do. The gooey stuff was cool at that point \u2014 the warmth of the boys who had spewed it had dissipated, but Liz still wanted to taste it, so she willed her exhausted body to move and scooped up a finger full and spread it on her mouth like lip gloss. She pressed her lips together and pushed her tongue through, tasting the boy. But who was it? Which boy? How strange to not know, she thought to herself. \n\nShe gathered her wits a bit more and looked herself over. Gobs of slippery were splattered all over her, but her Navy Dress Blue skirt, still bunched at her waist, was covered in the stuff. Stringy and sticky, it was an unholy mess. She slipped off the skirt, used the dry side of it to wipe off her face and chest, and tossed it to the floor. Memories of how she'd be thrown in the brink for using her uniform like that briefly flashed in her mind.\n\n\"You okay honey?\" Marsha said, snapping her back to reality. \"That was pretty wild.\"\n\nIt was a deliberate understatement from Marsha. She was astonished at what Liz had done, and wanted to say so, but she didn't want to embarrass her.\n\n\"I'm good,\" Liz said dreamily. \"How was the swimmer?\"\n\n\"You don't remember?\" Marsha asked.\n\n\"Oh,\" Liz said softly, remembering that she'd had him too. \"You looked so good...over there,\" she said, gesturing to the wall Marsha had had her hands against. \"I've never done that...standing up like that.\"\n\n\"Well I've never been fucked by a roomful of boys, so I guess we're even?\" Marsha said. She left it hanging like a question, and it struck both of them funny. They sat and watched young people screw as their giggles continued.\n\n\"Marsh, you wanna gang-bang too?\" Kelsey asked from across the room.\n\n\"No honey,\" Marsha said, surveying the smooth flesh of all the boys. \"Maybe next time.\"\n\nShe did get with Ryan and Josh, two boys she'd watched work at the studio many times. She took Ryan's hand first, and then found Josh, leading them both to a bedroom that had just been vacated. It was thrilling having them both for the first time, and especially decadent having them all to herself in the dimly lit bedroom with the orgy raging outside the open door. It was the highlight of the night for Marsha. \n\n\"Tell Tucker I'm mad at him,\" Kelsey said when most everyone had left and Marsha and Liz were gathering their clothes. \"Hannah was hoping for an older guy.\"\n\n\"Really!\" Marsha said. The wheels turned in her head as she thought things over. \"You know, Lizzy and I owe him something really nice for...well, for this,\" she said, taking the cum covered skirt from Liz's hands and holding it up. \"How 'bout if if you and Hannah surprise him at the condo sometime when we're not there. Would you wanna do that?\"\n\n\"Sure!\" Kelsey said excitedly. Hannah looked like she liked the idea too.\n\n\"That okay Lizzy?\" Marsha asked. \n\n\"Yeah,\" she said. \"I guess I'm starting to get used to this, huh?\"\n\n\"You and me both,\" Marsha said, the corners of her mouth curling up into the smile everybody loved as she slipped on her waitress dress.\n\n\"Lizzy, you want somethin' to wear?\" Kelsey asked when she saw Liz looking at the sticky mess on her skirt. \"You won't fit in my stuff...Hannah, how 'bout that sarong?\"\n\n\"Oh, yeah!\" Hannah said. She ran off to get it.\n\nThe big piece of fabric was as thin as a breath of air, brightly colored in yellow, orange and lime-green. As the girls started to wrap Liz in it it was clear that her lacy white bra and panties would show through, but Liz didn't mind. She felt supremely sexy, still in the Queen of the Orgy frame of mind that had felt so odd earlier. She liked the feeling, and the bright sarong made her feel like a tropical Queen, the matriarch of an island where sex was the currency and women were free to spend it as they wished.\n\n\"God you look so hot!\" Kelsey said when Hannah finished the fancy wrapping technique, tied at the shoulders and at side of the waist, leaving a sexy peek-a-boo all down one side. \n\n\"You good with that?\" Marsha asked, wondering if her often shy girlfriend would venture outside looking that way.\n\n\"Yeah,\" Liz said, smiling and feeling good about life. \"Maybe we should go to a bar or something.\"\n\n\"Lizzy, your hair's full of cum you know,\" Marsha said.\n\n\"I know,\" she said.\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nThe girls skipped the bar, and took a hot shower together when they got home. They slipped quietly into bed, one on each side of Tucker. He was sound asleep. Liz thought she might lie awake re-running all the craziness in her mind, but she was asleep even before Marsha. Marsha nestled her head against Tucker's chest and wondered how she'd ended up in such a dreamy situation, with a boyfriend she loved and a girlfriend she was falling in love with. It had to be fate, she decided. Fate, and a big dollop of Kelsey's magic. "
    ],
    "authorname": "riverboy",
    "tags": [
        "gangbang",
        "older woman",
        "younger man",
        "orgy",
        "coed",
        "college",
        "party",
        "uniform",
        "navy"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/tuckers-studio-ch-26"
}
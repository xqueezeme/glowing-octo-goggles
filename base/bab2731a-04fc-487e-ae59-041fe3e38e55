{
    "title": "Tell Me What To Do",
    "pages": [
        "My boyfriend and I were bored. Bored of the same old sex that we had been having for years. I loved him, and I loved his cock, but I needed something more. He needed something more. We needed something new and something that would excite us.\n\nHe brought up that tonight was the night that he wanted to try something new.\n\nI was the one to offer the idea. I knew this was something I had wanted since long before I had met him. Although, it was never something I thought would be possible with a partner. I remember being a teenager, tucked in my room, plugging my headphones into my phone, and listening to men on the internet telling me how to touch myself.\n\nI told him what I wanted. I wanted him to watch me play with myself. I wanted him to watch me and tell me how to touch myself. He had complete control over what I did. I wanted him to be in control of when I was allowed to come. I didn't want control over it. I wanted him to be in charge. He could let me come, or he couldn't.\n\nIt was his choice.\n\nHe had always been a dominant man. He liked to be the one in control, he liked me to submit to him, and I knew he would like what I wanted to try. I just wasn't sure if he was convinced that he would like it.\n\nNonetheless, that is how I found myself being led inside our bedroom, his hand in mine as he pulled me behind him.\n\nHe dropped my hand in the doorway and I didn't move. I stood there and just watched him. I watched as he pulled the armchair from the corner of the bedroom and positioned it at the bottom of the bed, his arms flexing as he lifted the chair. I watched as he took a seat in the armchair, his legs spread, arms rested on the side, and his back against the chair.\n\nHe looked over to me, a glint in his eye. \"Strip,\" he said. No, he ordered.\n\nI did as he said. I grasped the bottom of my top, pulling the thin fabric over my head. I hadn't been wearing a bra and the cool air made my nipples stand to attention. I undid the bow of elastic at the front of my shorts, hooked my fingers inside, and pushed them down my legs. His eyes travelled every inch of my body as I moved.\n\nI felt heat rush to my pussy.\n\nI pushed my fingers underneath the strings of my panties before he spoke again.\n\n\"Leave them on.\"\n\nHe hadn't touched me, I hadn't touched myself, but I could feel myself growing wetter as he looked at me.\n\nI didn't move as he surveyed me, waiting for his next instruction.\n\n\"Sit on the bed, back against the headboard,\" he said, nodding his head towards the bed for me to move.\n\nMy bare feet padded against our wooden floor, sticking slightly as they went. I crawled atop our bed, assuring that he had a view of my ass whilst I moved. I purposefully swayed my ass, crawling towards the headboard, before turning around and sitting on the bed with my knees shut. I was directly in front of him. His eyes were dark.\n\n\"Don't be a tease,\" he said, referring to my earlier display whilst crawling, \"Teases aren't allowed to come.\"\n\nGod, I could've came from that sentence alone.\n\n\"Sorry,\" I whispered.\n\n\"What was that?\" He put his hand to his ear mockingly.\n\n\"I said, sorry,\" I spoke louder.\n\n\"Good girl.\"\n\nHe didn't speak for a moment. His eyes simply surveyed my entire body. They travelled up and down every single inch, finding solace in each dip and curve of my skin. I let out a small whimper as he looked me over, I couldn't help the way he looked at me turning my bones into mush.\n\nI was completely his.\n\n\"Circle your nipples,\" he instructed, \"Don't touch them yet, though.\"\n\nI followed his instructions. My fingers trailed up my body, leaving goose bumps in their wake, before I reached the soft skin of my breasts. I moved the tips of my middle fingers in small circles around my nipples. Choppy breaths escaped my lips as I felt my skin pebble underneath my own touch, my nipples growing harder as each second passed.\n\nI kept my eyes on his as I moved my fingers torturously close to my nipples. My eyebrows were furrowed, and a pleading look was plastered on my face. My breaths had morphed into tiny moans.\n\n\"Do you want more?\" He asked me. His eyebrows were raised, and a smirk played at his lips.\n\nI nodded quickly. \"Yes, please.\" The words came out as more of a moan.\n\n\"Not yet.\"\n\nI mewled quietly. I continued my movements around my nipples, the motions only adding to the wetness growing inside my panties. I knew there would be a small wet patch visible by now. I was desperate to touch myself.\n\n\"Play with your nipples for me, baby,\" he finally spoke after a few tantalising minutes of only circling my nipples.\n\nI immediately let my fingers pinch the hard buds. A moan left me as I pinched and rolled my nipples in between my thumb and my fore finger. I couldn't stop my body from squirming on the bed whilst I played with my nipples. As I squirmed, my panties rubbed against my clit, giving me the smallest bit of friction, I so desperately needed.\n\nHe noticed the squirming and quickly halted me.\n\nHe chuckled lowly, \"Are you really that desperate you need to squirm just to feel the fabric over your pretty little clit?\"\n\nI watched as he leaned forward in his chair, resting his forearms against his thighs, and clasping his hands together in front of himself.\n\n\"Yes, I am, please can I touch myself? Please?\" My words were fast and breathy. I was surprised he understood what I was saying.\n\n\"No,\" he said plainly, \"Stop squirming and spread your legs wide.\"\n\nAgain, I did as he said. My fingers never rested from toying with my nipples as I slowed my squirming. I spread my legs open on the bed, the cool air hitting the inside of my thighs and edges of my panties.\n\nThe smirk that was once tugging at his lips immediately took over his face as his eyes dropped to in between my legs. I didn't know just how wet my panties were, but I could feel their wetness rubbing against me. My cheeks reddened slightly as he stared.\n\nHe shifted in his seat slightly and my eyes dropped to the growing bulge in his trousers.\n\n\"Okay,\" he spoke, resuming his relaxed position in the chair, \"You can touch yourself. Over your panties. Just graze your fingers up and down.\"\n\nMy left hand dropped to my side and my right hand travelled down my body, over my breasts, over my stomach, trailing past my belly button and over the top of my panties. I resisted the urge to squirm when my fingertip grazed over my clothed clit. I moaned when my fingertips felt the wetness bursting through the fabric of my panties.\n\nI lazily moved my fingers up and down my panties, feeling the contours of my pussy as they moved. Whimpers tumbled from me easily and my eyes never left him. His eyes were trained on my fingers, though.\n\n\"Keep playing with your nipples with the other hand,\" he said.\n\nImmediately, my left hand moved back to my nipple. I grasped it in between my fingers and pinched and pulled roughly. My fingers kept their slow pace, following exactly what he told me to do. I could feel the wetness on my panties growing as I touched, and the scent of my arousal filled the air in our small bedroom.\n\nI heard the soft sound of a zip and my eyes flashed to him unzipping his jeans slowly. He pushed his jeans down his thighs, followed my his underwear, and let them rest on his thighs. His semi-hard cock sprung from the confines of his underwear which elicited a loud moan from me. He chuckled.\n\nHis eyes locked with mine. He raised his right hand to his mouth and roughly spat into the palm of his hand, licking his lips afterwards. He moved his hand down to his cock and wrapped tightly around it, beginning to pump up and down as he watched me.\n\n\"Take your panties off,\" he ordered, his voice had become deeper.\n\nI swiftly moved my fingers from the outside of my panties and let my hand drop from my nipple. I hurriedly moved to rid myself of my panties.\n\n\"Slowly.\"\n\nI resisted the urge to groan. I slowed my movements. My hands trailed over my body, down the curve of my hips, before I hooked my fingers underneath the fabric. I lifted my body off the bed and pulled them over my ass. My knees closed and feet raised off the bed as I pushed the fabric down my thighs, over my knees and eventually let them fall off my feet.\n\nI let my panties fall to the side of the bed and instantly resumed my previous position. I spread my legs wide atop the bed, the cool air now hitting my exposed pussy. I could feel the wetness had spread to my lips. I didn't move my hands.\n\n\"Put them in your mouth.\"\n\nHis hand idly stroked his cock as I looked at him with slight disbelief. I didn't question him for too long, though. I tentatively picked up the fabric from beside me, scrunching it inside my hand before I opened my mouth and pushed it inside. I attempted to close my mouth but some of the fabric spilled over.\n\nMy tongue absentmindedly moved over the fabric, and I tasted myself on it. I let out a little moan.\n\nHe breathed out a long breath. \"So pretty.\"\n\nMy cheeks flushed at the compliment and my pussy throbbed.\n\n\"Play with your clit, baby, slowly\" he said as his head fell back against the back of the armchair. His lips parted slightly as he continued to play with his cock.\n\nMy hands found their way to my clit. I gasped into my panties when the tip of my middle finger landed directly atop my clit. I let my fingers travel downwards, becoming slick from my entrance before dragging them back up to my clit. I couldn't stop the whimpers and moans coming from me as I played with myself.\n\nI moved my fingers in slow circles. They easily glided over and around my sensitive clit. I bit down slightly on the panties in my mouth to ensure they didn't fall out at any point from the moans and expletives I was fighting to not come from my mouth.\n\nI heard his movements speed up while he watched me. His hand moved effortlessly up and down his now rock-hard cock and his other hand gripped the arm of the chair. His eyes were locked on my pussy.\n\nWithout realising, my movements had sped up to match his own. He let out a low laugh.\n\n\"I didn't say you could speed up, yet.\"\n\nI instantly slowed my movements back down, resuming the agonisingly slow circles I had started with. My other hand returned to my breasts. I gripped onto the supple skin, pinching my nipple between fingers as I aggressively massaged my breast. I groaned from the stimulation.\n\nI whimpered, but it came out as more of a sob, as I was desperate for another instruction. Just something to move my fingers that little bit faster. I needed more.\n\nHe noticed my whining and smirked.\n\n\"If you want something, you can ask for it,\" he said, knowing the panties shoved in my mouth inebriated my ability to talk.\n\nNonetheless, I swallowed the saliva that was threatening to spill from my mouth and attempted to speak.\n\n\"Faster, please,\" I mumbled through my panties.\n\nHe laughed loudly at my incomprehensible sentence. He knew exactly what I had said even if he couldn't understand it, but he wanted to humiliate me. Yet, the humiliation was travelling straight to my pussy, and it felt so good.\n\n\"Okay, you can go a little bit faster,\" he obliged.\n\nI took that instruction and ran with it. My fingers sped up on my clit, rubbing faster and smaller circles, matching the rhythm he had on his cock. I moaned over and over again into my panties, not caring when I felt saliva fall from the side of my lips. My other hand moved to my nipple, stopping the massage it had previously been doing, and focusing on pulling at the sensitive nipple.\n\nHis breathing became laboured as my moans became louder.\n\nI could feel my orgasm building up inside of me. The intense pressure building in my stomach, my pussy clenching and unclenching as I kept rubbing circles at the same pace around my clit. I felt myself getting closer to the edge with each circle.\n\n\"Slow down again,\" he said as if he sensed my pleasure growing, \"Slow circles again, baby.\"\n\nAlthough he told me to slow my movements, his didn't falter. He kept the fast pace on his own cock. I could only watch his pleasure build as I slowed my fingers to the previous pace they held.\n\nI whined as I felt the orgasm, that was once building inside me, float away slowly. I started to squirm again. The given and then removed pleasure removing my ability to keep my body still. I needed something. I was desperately squirming atop the bed, small circles worked on my clit, and my eyes on him playing with himself as he pleased.\n\n\"Fuck yourself for me,\" he said abruptly, \"Use your other hand.\"\n\nI nodded. I tried to mumble a yes, but it only came out as a groan.\n\nMy fingers dropped my nipple, leaving the bud used and overly sensitive, and they moved down to my pussy. I kept the slow circles on my clit and my other hand toyed at my entrance. I spread my legs wider, lifting my feet off the bed to give myself more access, and slowly pushed my middle finger inside myself.\n\nA loud moan came from my lips as my finger found it's home inside my pussy. I pulled it back out before pushing it quickly back inside. I moaned with each thrust. Matched with the rhythm on my clit, I couldn't stop the sounds coming from me.\n\nI easily added another finger inside myself, speeding up the thrusts to meld with the circles on my clit. I fucked myself with one hand and the other worked wonders on my clit. The air in the room was filled with our moans and the sound of my wetness sliding in and out of my pussy.\n\n\"Faster, baby,\" he said, his voice much lower now and his hand moving much quicker. I could tell he was getting close.\n\nI swiftly began to fuck myself faster. My fingers sliding in and out of my pussy, curving upwards to try and reach the spot that he never had any issue with reaching. My other hand sped up around my clit. I mewled at the contact. I couldn't stay quiet with my fingers inside me.\n\nOnce again, I felt the release growing inside me. The pressure built in my stomach and my pussy clenched around my fingers. I felt more saliva drop from the sides of my mouth, wetting my panties even more as it slipped out. My back arched off the headboard of the bed slightly.\n\nHe narrowed his eyes at me.\n\n\"You won't come without permission, will you?\" He asked evilly.\n\nI shook my head, unable to speak.\n\n\"Good, because I'm not ready to yet,\" he said, \"You come with me, or not at all.\"\n\nI kept playing with myself and I knew I wouldn't last much longer. My fingers had found the perfect spot inside of me, hitting it repeatedly and driving me crazy. I could feel my orgasm teetering on the edge of release. I didn't slow the pace of my fingers down, trying to control my breathing and hold off the inevitable orgasm.\n\nIt proved hard to control my breathing when I couldn't stop the moans from leaving my lips every second.\n\nI watched as his eyes flicked to my chest, my breasts bouncing as I fucked myself with both hands. Then, his eyes flicked to my pussy. He watched as my fingers moved in and out of myself, slicked in my own arousal, and my other hand ran tight, quick circles around my swollen clit. Lastly, his eyes flicked back up to my face. My eyebrows were furrowed, my eyes spilling with lust and need as I stared at him. My lips were parted with my panties stuffed inside my mouth as moans reverberated around the room.\n\nI saw his eyes darken.\n\n\"As fast as you can now, baby, I'm almost there,\" he groaned out.\n\nWith those words I had been waiting for, my hands sped up to exactly where I needed them. I kept the tight circles around my clit but my fingers moved much faster, pressing more pressure onto my clit. I fucked myself harder and faster, the sound of my fingers sliding in and out was melodic as it merged with the moans from both of us.\n\n\"Are you going to come for me, baby?\" His voice was a moan.\n\nI nodded quickly, mumbling a yes through the panties in my mouth. I needed it. My orgasm was right there. It was on the edge, I could feel it in the pit of my stomach and on the edge of my clit.\n\n\"Yeah? Like a good little girl, you're going to come with me?\" He spoke again.\n\nI let out an incredibly loud moan in acknowledgement. I watched his hand stroke his cock, his hand gripping the arm of the chair had tightened so his knuckles had turned white. I was internally begging for him to let go.\n\nMy entire body clenched every muscle to not let my orgasm slip over the edge. I couldn't come without him, he told me not to. I didn't slow down my hands as I tried to hold back my orgasm. I fucked myself and he stroked himself and neither of us looked away from the other for a second.\n\n\"Oh, fuck, I'm going to come,\" he groaned loudly, his hand speeding up on his cock, \"Come with me, baby, come, now.\"\n\nWith those words, I let my body give up. My fingers kept moving inside and outside my pussy, my panties stayed locked inside my mouth as my own saliva dripped down my chin, and my back arched off the headboard as I stopped fighting the orgasm that was begging to be released.\n\n\"I'm coming, oh, fuck, baby, come for me.\"\n\nI watched as his cock twitched in his hand, his fist gripping the chair and louder groans spilling from his lips. His orgasm took over his body at the same moment mine did. His cock spilled over himself, landing stains on his shirt that he failed to remove. He groaned repeatedly and his hand continued to stroke his cock through his orgasm.\n\nMy fingers kept the same pace as I finally let the orgasm take over my body. My arched back abruptly jerked as my orgasm ripped through me. I didn't stop my fingers whilst my body jerked and spluttered all over the bed. I moaned loudly, whimpering, and writhing as I rode my orgasm out until the very last drop. My face contorted but I kept my eyes open to keep looking at him as I came.\n\nI couldn't control my breathing as my orgasm slowed throughout my body. My breathing was ragged as a few aftershocks came from my fingers still lazily rubbing over my clit and pumping inside myself. My back fell against the headboard once more. I continued to moan and whimper as my fingers kept moving slowly around my pussy, my orgasm coming down.\n\nHis cheeks were flushed from his orgasm, his hand still lazily stroking over his cock. He eventually let his cock drop from his hands, sitting forward and pulling the stained top over his head and ridding it on the floor.\n\nI finally pulled my fingers out of my pussy, letting my right hand still casually stroke over my clit, sending short waves of shock through my body. I jerked from each shock.\n\n\"Come here,\" he said as he motioned for me to come near him.\n\nI let my hand fall from my clit. I pushed myself onto my knees, my legs unstable as I wobbled to keep myself upright, and I crawled along the bed to where he was sat. I perched on my knees at the end of the bed, staring at him longingly.\n\nHe reached out and grabbed my hand that had been inside myself moments ago.\n\n\"Let me taste.\"\n\nHe pulled my hand up to his mouth. He let his lips linger over my fingers for a moment before he parted his lips and pushed my fingers inside. I felt his tongue lap around my fingers, licking off any taste of me that he could. His eyes watched me as he held my fingers in his mouth.\n\nHe sucked them clean, pulling them out with a satisfying pop.\n\n\"God, you taste amazing,\" he said.\n\nHe reached his hand up to me once again and pulled my panties out of my mouth. He dropped the soaked panties to the floor and let his hand rest against my cheek, smoothing small circles into my skin.\n\n\"I'd happily do that again sometime,\" he laughed, looking at me with love in his eyes.\n\nI nodded. \"Definitely.\""
    ],
    "authorname": "spacedusts",
    "tags": [
        "instructional",
        "guided masturbation",
        "dominant",
        "edging",
        "panties in mouth",
        "mutual orgasm",
        "mutual masturbation"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/tell-me-what-to-do-1"
}
{
    "title": "There and Back Again Ch. 111-112",
    "pages": [
        "Chapter One Hundred Eleven: Overload\n\nMy nose started pouring blood as I picked up the mana of the fourth emissary. My vision went blurry, my balance was off, and I started to sway unsteadily on my feet. One more, Sierra. Just one more. Not that I had any idea what I'd do with the general once the emissaries were subdued, but I could only take it a step at a time.\n\nI spent a moment trying to adjust to the flood of mana, removing my helmet and gripping my nose to stem the bleeding, before reaching out once again. I was so distracted by my headache as I stripped the last emissary that I didn't feel the change, didn't notice what was happening with the darkspawn around me. I was completely oblivious to the approach of the general, who'd clearly been watching the horde move around me and had deduced my location.\n\nI looked up just in time to see an axe descending towards me, with not enough time to dodge, and I closed my eyes in resignation. I'm going to die on this God-forsaken hill. I'm sorry, Alistair. But the blow never came, and I opened my eyes again as a sword deflected the axe away from me. \n\nI was roughly shoved aside by an armoured figure, and fell on my ass \u2013 between the pressure in my head and the push, I completely lost my balance. When I managed to regain my equilibrium, I looked up to see Duncan standing over me, engaging the now-enraged general. And then the rest of the noise from the battlefield filtered in to my awareness, and I looked around in a daze to see Riordan beheading one of the emissaries whose mana I held, while Conrad and Loghain stood back to back fighting a group of hurlocks. Further away, a group of soldiers fought their way through the horde to reach Cailan, and I breathed a sigh of relief.\n\nThe battalion had arrived, and brought a group of Wardens with it.\n\nI scrambled to my feet, finding the daggers which I'd dropped in my fall, the pressure in my head now more bearable as the emissaries were slowly eliminated; I pivoted back and grabbed the mana from the darkspawn-from-hell Duncan was fighting just in time to see the Warden Commander freeze as the general shouted in his face, something unintelligible and unspeakably dark. \n\nHe just stood there, looking confused, as the general's axe was embedded deeply in his side.\n\nI shouted, my voice lost in the clashing of swords and the battle cries around me; it felt like slow motion, like something out of a cheesy action movie, as Duncan slowly crumpled to his knees, then began tipping backwards to the ground. \n\nI felt the pressure in my head flow out around me before I knew what I was doing, and the remaining three emissaries and the general were knocked off their feet by a powerful blast wave that completely missed Riordan, Loghain, and the rest of the people around me. The emissaries landed in pools of their own blood, none of them rising again, but the general rolled over, clearly dazed but alive. He was bleeding from the mouth and one eye was badly damaged, the socket deformed, the eyeball drooping, but he slowly struggled up to his knees, trying to stand.\n\nI screeched angrily, gripping my daggers and preparing to lunge at it, when a great sword descended in my peripheral vision and the general's head flew a couple of feet, bouncing a little ways down the hill; arterial spray of darkspawn blood arced out and covered me as I looked over to see Cailan standing, chest heaving with exertion, leaning on his blade for support.\n\nI turned back and dropped to my knees at Duncan's side; Cailan did the same, and helped me roll him over to rest against my lap. I wasn't surprised to see his vacant stare, blood trickling out of his slack mouth, but I had hoped he could have survived. I cried and wrapped my arms around his ruined torso as Cailan pulled the heavy axe out of his wound and dropped it. With shaky hands, I closed the eyes of the man I wished had been my father, then buried my face against his shoulder and broke down completely.\n\nI sobbed for what could have been only a minute, or might have been an hour \u2013 I couldn't honestly say one way or the other \u2013 until finally Cailan and Riordan approached me. Cailan pulled me into his arms as Riordan gently, reverently shifted the body I held back to the ground. The Warden pulled off his own cloak and threw it over the corpse, before setting the two swords Duncan had fought with across his chest.\n\nCailan lifted me to my feet, and without letting go, half-dragged, half-carried me towards the camp behind us. The army that had arrived had mopped up the rest of the darkspawn that ambushed us, and the dead were being painstakingly laid out for later cremation; I didn't really register any of it as Cailan lowered me to the ground in what I realised had been set up as a makeshift infirmary. All around me, warriors screamed or moaned in pain from horrific injuries, while the remaining mages, Irving and a couple of others, did their best to tend the wounds. \n\nIrving came over immediately, kneeling in front of me and asking me something; the question didn't even penetrate the haze I was surrounded by. All I could think of was that Duncan had died because of me. And now someone else would have to die to slay the Archdemon, someone who could have been saved, maybe my brother, or my husband, or one of the others I'd come to love like family over the last year, and it was my fault.\n\nI twitched, startled, when Irving's magic aura swelled and he ran healing magic over me; it didn't last long before the exhausted-looking mage stood and spoke briefly with Cailan. The words 'shock' and 'comfort' penetrated the mist around me, and then Irving was gone. I felt Cailan settle to the ground behind me, pulling me back into his arms, as he started whispering comforting nonsense in my ear.\n\nI finally stirred when Riordan knelt in front of me again, offering me the daggers I had dropped when I had seen Duncan fall.\n\n\"I'm sorry,\" I whispered.\n\nRiordan had to lean in to hear me over the noise around us. \"Pardon?\"\n\n\"It's my fault,\" I elaborated. \"I'm sorry.\"\n\n\"Sierra-\" Cailan began, but Riordan silenced him with a gesture.\n\nI continued sadly, \"I got him killed, and now you're going to die.\"\n\nRiordan sighed and took my hand. \"It's no one's fault but the darkspawn's, and the one to blame is dead. You are not responsible for his death, any more than you will be responsible for mine. And, my Lady, I was always going to die in this fight. I do not wish to return to Orlais to await my Calling, and we both know I don't have much time. As for Duncan...you thought of him as a father, and he thought of you as a daughter. I cannot imagine any way he would rather die than to protect his little girl. I know he is at the Maker's side, and I guarantee he does not harbour any regrets about how he died.\" His voice cracked and wavered on the last words.\n\nSurrounded by screaming, injured men, my brother-in-law and my honourary father's brother-at-arms held me while I cried, mourning the bravest, best man I'd ever known.\n\nFinally Cailan was called away, and it forced me to start pulling myself together. Riordan, looking as depressed as I felt, offered me a scrap of cloth to dry my eyes and blow my nose, then gave me a hand up.\n\nSomething occurred to me as I looked at his sympathetic face. \"Wait, what are you guys doing here? You're supposed to be taking down the Archdemon.\"\n\nRiordan nodded. \"So far, it hasn't come close enough for the mages or bolas to get a hit. We wondered if it might wait until the generals were both dead to come nearer. We were wandering more-or-less aimlessly, killing ogres and the like, looking for the general, until we heard you'd been attacked. Duncan,\" he swallowed, his voice cracking slightly, \"immediately knew it would take the intelligence of a general to pull off such a feint. And we were the closest Wardens, so we came to ensure the general was killed.\"\n\nMy head snapped up, glancing around at the other Wardens where they were aiding the injured to reach the infirmary. \"Then you need to get back out there!\" I hissed. \"What if the Archdemon lands while you're here? Don't wait for me. I'll be fine. Go, go, go!\"\n\nI made a shooing gesture, and Riordan tried to chuckle, almost succeeding. \"Going, your Highness. Right away.\"\n\nI didn't waste any time herding the four of them together. They spent a few moments checking their light packs for supplies, and I ran to get them a few extra potions from the camp. As they were all shouldering their bags, I felt a foreboding, sickening presence, and looked up in time to see the Archdemon fly over. Its scales reflected almost blood-red in the torchlight; it let out an ear-shattering roar, presumably angry that its general had been killed, and I shuddered. It circled once, then winged off in the direction of the main body of the horde.\n\n\"Hurry!\" I demanded; Loghain began muttering at me in irritation, even as the three Orlesians laughed at my antics. I began ushering them down the hill, when a voice rang out behind me.\n\n\"Hold!\"\n\nI sighed and turned; the Wardens all bowed to Cailan, while I just scowled at the delay. His news made my mood even worse.\n\nCailan ignored my glare. \"Riordan, the surviving nobles and this battalion will accompany you to the rest of the army. You're going to need all the help you can get, and we need a new command post \u2013 we're too exposed on this hill. Please be ready to march in ten minutes.\"\n\nRiordan nodded as Cailan turned to walk away, and I heard Loghain rumble some sort of complaint, quickly quashed by the senior Warden. I followed the blond monarch as he headed back up the hill. \n\n\"Cailan...\"\n\nHe turned. \"I know, Sierra. But they're not going to make it to the Archdemon, as it stands. We've had news of another group breaking off from the main body of the horde and heading towards us. We need to engage them before they can over-run the encampment \u2013 we need to protect the injured and get the Wardens where they need to go. They'll never make it through with that group between them and the Archdemon.\"\n\n\"If they down the Archdemon before Riordan gets there...\"\n\n\"It'll be fine. There are almost a dozen more Wardens down there somewhere.\"\n\nI shot him a horrified look, and then realised from his confused frown that Duncan hadn't been as honest as he had implied. Not that he ever fully said, he just let me assume... I struggled to stifle the irritation that flared. Don't speak ill of the dead.\n\n\"Cailan, the Warden who kills the Archdemon...he dies. Alistair is down there. Aedan is down there! If Riordan doesn't get there in time...\"\n\nCailan's puzzled look morphed to one of pure horror. \"Why didn't you tell me?\"\n\n\"I thought Duncan had!\" Stupid Grey Warden secrets. \"Cailan \u2013 we need to hurry.\"\n\nHe nodded and raced off towards the milling nobles, shouting orders and demanding greater speed. I grabbed my own pack from the camp, my Earth items tucked in the bottom, rations and potions on top for ease of use. I realised I'd left my daggers somewhere, and headed back to the infirmary to find them lying amidst the injured.\n\nThe infirmary had gotten worse, since I'd walked away; there were men with missing limbs, head wounds, blood and guts spilling from ruined bodies, and I almost threw up as I retrieved my daggers and hurried away with alacrity. Greagoir approached me as I rushed, and I took a deep breath, hoping not to throw up on his boots.\n\n\"I saw what you did, with those emissaries.\"\n\nI sighed. \"I lost the men you left with me. I had to do something.\"\n\n\"Impressive work. One day I hope you will consent to teaching us that tactic.\"\n\n\"Honestly, and I'm not trying to be rude, but I doubt it will work. I'm pretty sure I almost died trying to hold that much mana. Anyone with even slightly lesser resistance...well, it either wouldn't have worked, or they'd have gone down in a blaze of glory.\"\n\nHe nodded, disappointed. \"Well, anyway, well done.\"\n\n\"Tell me Cullen survived?\"\n\nHe glanced over at a group of identical, helmeted templars in matching armour; I wasn't sure anyone would be able to tell them apart, but Greagoir nodded. \"He's fine.\"\n\n\"Good. Don't forget Kirkwall.\"\n\nHe nodded again, and I excused myself to go back and sit beside Riordan, who was slumped on the hill, just waiting.\n\n\"Hey, where's Morrigan, anyway?\"\n\n\"Flying around somewhere. We wanted her to locate the Archdemon when it got close so she could direct us to it.\"\n\n\"Ah.\" I considered. \"But...does she know you're over here?\"\n\n\"I do.\"\n\nI jumped and swivelled to see the raven-haired witch smirking at me from behind. \n\n\"The beast has made two passes over parts of the army. There have been some burns, but none severe. I believe the bola launchers and Circle sheep are moving into position now. I suggest we move, immediately, if you still wish to arrive before it is downed.\"\n\n\"We have to wait for the King,\" I whined.\n\nShe scoffed. \"He does not command the Grey Wardens, last I checked.\"\n\n\"No,\" Riordan responded before Loghain's red-face could turn into an angry outburst, \"but we have agreed to work together as a cohesive force. And especially now, without our Commander, we really don't have much choice.\"\n\n\"He's not going to listen to a bunch of Orlesian Wardens,\" Conrad opined, \"never mind Loghain. And if the horde has moved as he says, he's not wrong. We need him to have a hope of getting there.\"\n\nShe sniffed, but I was surprised by the lack of response. She turned to me, taking in my tear-stained face. \"Duncan perished?\"\n\nI just nodded, still too miserable, too guilty to talk about it. \n\n\"I am sorry.\" She hesitated, clearly uncomfortable. \"I shall go check on Aedan and Alistair.\"\n\nRiordan agreed, and she shifted back into a blackbird, taking off to sail effortlessly over the horde. I knew that checking on the others was her way of helping me in my grief, and I truly appreciated it. I briefly wished I'd had the presence of mind to give her one last hug, but I knew she wouldn't want it anyway.\n\nFinally, Cailan had the battalion ready to move. He put me in the middle with the other Wardens and himself, directing those at the front to move as quickly as possible to engage the horde, and hopefully allow the four Wardens to slip through in the chaos.\n\nI'd never done a forced march; it was much different than the rather casual walking through the Bannorn I had become accustomed to over the previous year, and I was grateful for all the training and travelling we had done. Earth Sierra could never have kept up. We caught sight of the forerunners of the horde before long, and then we came across a last hill before the plain on which the rest of the army fought. Cailan halted us at the top of the hill, hoping to use the geography to our advantage, and even Loghain mumbled reluctant praise at the idea. The battalion got into formation, the single mage not left with the infirmary wagons began casting glyphs down the hill in front of us, and the soldiers drew their weapons, waiting expectantly. It took only a few minutes before we were fighting again.\n\nThese darkspawn fought with much less cohesion than the previous group we'd faced, proof that the generals were what provided the organization, and the battle wore on with fewer casualties than we had experienced earlier. The Wardens engaged an ogre and took it down, and then I lost track of them for a while.\n\nWe'd evidently thinned the ranks of emissaries, and I came across only two; I stole their mana, and wasn't attacked. The hunting was apparently over, for now.\n\nWe finally killed the last of the offshoot from the horde; the Wardens were ahead of us, moving fast towards the rest of the army. The battalion, moving as quickly as possible, followed in their wake, leaving the less wounded men to tend to those who needed aid.\n\nWe marched across ground that had already been fought for, and it squelched under my feet with each step, human and darkspawn blood mingling into a reddish-black ooze. There was no breeze, and the metallic tang of blood in the air was so strong that I could almost taste it. I wonder if anything will ever grow here again. With a brief glance at the battalion's remaining mages, I wondered how thin the veil had become with all the violence and bloodshed.\n\nI felt the Archdemon before I saw it, spinning in place to see it flying low, looking to do a strafing run over the entire battalion. I screamed out an order to run and hide, which was echoed by the four Grey Wardens; I had to give the troops credit \u2013 they followed orders. The men scattered, some dodging into the trees, others ducking behind rocks. Those that couldn't get out completely dove to the ground, hoping to roll out of the way, or cowered under raised shields.\n\nI took one quick look behind me to see Cailan being hustled away by one of his advisors before throwing myself down behind a small boulder with a handful of others. I heard screaming, as the Archdemon flew over \u2013 clearly not everyone had gotten to safety. I held my arm over my face as the wind whipped around me, stirred by the powerful flapping of the dragon's wings, then ran out to help once the beast was out of range.\n\nOnly a dozen or so soldiers had been injured, most of those with non-life-threatening burns only. A few would have significant scarring \u2013 they screamed, trying not to touch the skin where it had been melted by spirit fire, or whatever those purple flames were. Again, the less injured helped the more severe back towards the makeshift infirmary. I hoped Irving was good with burns.\n\nAbandoning formation, Cailan demanded that the remaining members of the battalion separate and make their way to the ongoing battle in smaller groups, hoping to avoid repeat performances; the Archdemon flew overhead once, then I lost it in the dim pre-dawn sky. The battalion edged forward through trees and uneven terrain, sliding down the hill the darkspawn had just climbed.\n\nAs we reached the plain, we heard the Archdemon roar over the distant army, and then a horrific screech. Squinting in the dim light, I saw one of the beast's wings stiffen as it flew, and it faltered briefly before managing to catch itself mid-fall and rise again. The mages! A glancing blow, but they're ready for it. The next time it tried to strafe the army, the co-ordination was better. Both wings slowed and one again froze, I assumed due to the mages' combined frost spells, and then something impacted on the damaged wing. The bolas worked even better than I thought! The beast screamed, part of the wing shattered, and we all watched in disbelief as the Archdemon crashed heavily to the ground.\n\nRiordan and the other Grey Wardens with him took off at a run, me and Cailan close at their heels with the rest of the battalion following along. We encountered a few darkspawn still fighting remnants of the army, and the Grey Wardens cut through them like a hot knife through butter. The survivors who weren't too badly injured joined us as we ran, and the battalion's numbers swelled again the closer we got. \n\nAs we finally approached, I could hear the Archdemon still roaring, followed by the crackle of flames; magic sizzled and swelled, mostly Circle magic from the feel, and I guessed the group of mages who'd helped ground the dragon were now trying to weaken it for the Grey Wardens who were hopefully fighting it. I could feel other magic, though, as well \u2013 darkspawn magic, not like the general, but I guessed there were at least a handful of emissaries casting. I put on a burst of speed, hoping to get close enough to interrupt them in whatever they were working on; I thought I could replicate what I'd done after the general had slain Duncan, now that I'd seen myself doing it again with more understanding under my belt.\n\nFinally getting close enough to see, it was clear that the tactics we'd drilled for two months had been very effective. Each battalion was a cohesive unit, fighting groups of darkspawn that streamed towards the Archdemon. The mages split their time between slowing and damaging the ogres and the larger clumps of darkspawn, and throwing spells to weaken the Archdemon. The archers rained down death on the remnants of the horde, while a handful with more powerful crossbows took aim at the Archdemon itself. And distantly, I could see tiny figures swarming around the feet of the dragon, dodging teeth and claws, scrambling away when it started breathing fire.",
        "I raced towards the emissaries with the Grey Wardens pacing me, but just as I came into range to disrupt their spellcasting, the ground underneath my feet began to rumble. I was knocked over, my feet flying out from under me, and landed awkwardly on my face and one shoulder with a scream. I could hear the crunching and moaning of armoured figures hitting the ground around me, and guessed that all of us were down. \n\nWhen the earth finally quit heaving, I slowly climbed to my feet, only to gape in shock. We'd made it to within a couple hundred feet of the Archdemon, but between us and it, a massive ravine had opened up, splitting the ground in front of us. There was a canyon, at least twenty feet deep and fifteen feet wide, with sheer walls and sharp rubble at the bottom, dividing us from the rest of the army.\n\nCailan immediately began shouting for the soldiers to form up, sending scouts out, half south and half north, to find a way around; Riordan paced beside the cleft, and I wondered if he was trying to decide if he could jump it, or climb. A few dwarves raced back to the woods we'd left behind, talking about cutting trees and building bridges.\n\nI stayed where I was, reaching out angrily to seize the mana of the five emissaries who had cut us off from where my brother and my husband were fighting for their lives. I managed to control the shockwave, letting out the pressure quickly enough that I didn't feel like my head would explode, and all of the darkspawn mages crumpled to the ground.\n\nAnd then, nothing left to do, I watched helplessly. I was close enough to see them, now \u2013 both Aedan's and Alistair's groups were there, trying to take the beast down. It was injured, black ichor oozing out of its shattered wing, one leg deformed \u2013 from the crash landing, I assumed \u2013 and multiple wounds were sluggishly bleeding. The warriors took turns drawing its attention, the mages weakening, freezing, or electrocuting it, the rogues darting underneath or behind to bleed it further. Even Prince was there, tearing into a hind leg with his teeth. It was a war of attrition, and it looked like the Grey Wardens were winning.\n\nTo my surprise, despite its injuries, the Archdemon, receiving the first rays of morning sun, reared back, flapping its one good wing, blowing most of the Grey Wardens back a dozen feet, and sending the few it missed scrambling for cover with an enormous torrent of flames. Aedan went ass over teakettle as he'd dodged a flailing leg just as the wind kicked up, and they all regrouped with him, wearily eyeing the enraged dragon.\n\nThe mages and archers in the army, fighting against a renewed assault by the darkspawn, took a moment to switch from their attackers, sending a last volley of spells and arrows at the failing beast. A massive frost spell of some sort paralysed its good wing, while the arrows filled it full of holes, and some sort of lightning explosion impacted against its raised chin, rocking it solidly.\n\nThe beast fell, head crashing down to the ground, neck muscles too weak or too damaged to hold it up anymore, and it was clear despite the last gust of flame that the fight was all-but-over. One more significant hit to the neck or head would be the end of it, and the dragon's position left those important parts vulnerable.\n\nIt was time for a killing blow, and Riordan, Dougal, Conrad and Loghain were on the wrong side of a chasm they could not cross.\n\nI saw Aedan square his shoulders, and turn a sorrowful eye on Zevran. I couldn't hear what was said, of course, but if I knew my brother, he was saying something stupid like 'go on without me' or 'take care of my sister.' Zev nodded, a strange, jerky head bob; I started to scream, only to see Aedan's own mabari jump up and tackle him, take a mouthful of the back of Aedan's armour and drag him down to the ground. Before anyone else could do anything about it, the Antivan was sprinting towards the now quiescent dragon.\n\nI watched, horrified, clinging to Riordan, who groaned softly, as the love of Aedan's life raised his sword, and as I had seen in the game, thrust it firmly into the back of the neck of the vulnerable, tainted creature.\n\nA blast wave travelled out from the site of the assassin's sacrifice, and we barely kept to our feet as it swept past us. A few of the soldiers closer to the beast fell, the darkspawn taking momentary advantage, until the brilliant light burst out from the corpse. I had to look away, the intensity agonising, so I couldn't have said what happened to Zevran. I blinked quickly, only to see the nearest darkspawn actually incinerated by the explosion while the soldiers were left unharmed.\n\nAfter that, it was a complete rout. Dazed darkspawn were slaughtered without a fight, while others turned tail and tried to flee, and the archers shot them in the back as they ran. On our side of the chasm, all we could do was stand and watch as the army mopped up the stragglers who weren't successful at escaping. A couple dozen dwarves finally returned dragging two large tree trunks, which were stripped of their branches, lashed together, and dropped over the ravine.\n\nRiordan and the other Wardens were the first to cross, followed by me, Cailan, and the other nobles. The battalion behind me had been instructed to begin gathering more wood for pyres, setting up a larger infirmary, and preparing for the dead and wounded, while the rest of the fighters \u2013 warriors and rogues, humans, dwarves and elves, mages and templars, sank to the ground where they stood, exhausted and shaky from the remains of their battle highs.\n\nI found my brother, who was barely being restrained by the combined efforts of Sten and Alistair, as he attempted to break free and go to Zevran. Prince whined pitifully, Alistair tried murmuring reassuring nonsense, while Sten tried appealing to his logic.\n\n\"You cannot approach yet, Warden. It helps no one if you perish too.\"\n\nI didn't think either would be successful, given the wracking sobs shaking his frame; I got in front of him and wrapped my arms around his neck, just holding tight until he slumped into my arms and we both sank to the ground, Prince burying his muzzle in the small space between our bellies. I suppressed sobs of my own, trying to be strong for my brother. Trying not to break down demanding forgiveness.\n\nI looked around, catching Alistair's eye and exchanging a meaningful glance I couldn't have explained if I tried, but it was full of sadness, regret, but also hope and relief.  I'm so lucky. Thank you, Maker, for sparing him. I broke the gaze to check everyone else out while Aedan cried on my shoulder. Nothing like feeling guilty for being relieved.\n\n\"Where is Duncan?\" someone finally asked, and I just shook my head in sorrow as Riordan hurried to tell everyone he hadn't made it and that we could discuss the details later.\n\nI caught a last glimpse of Morrigan, who smiled sadly, raised one hand in an unexpected wave, and then shapeshifted into a bird and flew off. Sten had backed off and stood stoically cleaning his blade. The mages huddled together, Anders and Solona clinging to each other, the healer looking positively grey, while Jowan hovered awkwardly. I think they're all out of mana, if their skin colour is anything to go by. Faren and Bel were bandaging up superficial wounds on each other, then started making the rounds to see who else needed it.\n\nLeliana and Mornwulf spoke quietly, the bard's eyes suspiciously bright. Oghren stood, holding his hammer sadly, staring at the place where the elf had disappeared.\n\n\"Never thought the nug-humper had it in him,\" he muttered. \"Sod it, this wasn't supposed to be how it happened.\"\n\n\"He planned it, I think,\" Alistair wondered aloud. \"He said something in Antivan to Prince just before he tackled Aedan.\" He came over to where I held my brother and offered me a hand; I clung to it, needing the reassurance of contact with my husband.\n\nI nodded, sniffling. \"Why else do you think he Joined?\" I sighed. \"Do you think we can go look for... um...\" I didn't want to say the words 'body' or 'corpse', though I had no other terms that were more acceptable. \n\nI glanced at Riordan, who had signalled a group of mages before staring at the Archdemon speculatively. \"I think it will be safe.\" He lowered his voice, speaking to Alistair and me alone. \"I'll make arrangements for the blood to be collected. Why don't you go look?\"\n\nAlistair helped me hoist Aedan, but I still held my brother's hand as we shuffled towards the dragon's corpse. I heard clomping behind me, and guessed the other Wardens had come to help look, and pay their respects.\n\nIt was several long minutes before we found Zevran, his slight frame crumpled up against the beast's neck where it couldn't initially be seen. It took all of us to shift the dragon's head so we could reach him, and Aedan dropped to his knees beside the assassin without touching him. \n\n\"It should have been me,\" he moaned, renewed tears streaking down his face. \"Why am I always the one left behind?\"\n\nI knelt to pull him into my arms again, letting him sob against my neck; Leliana patted my shoulder as she stepped past us, bending down to straighten out the body. Zevran looked unscathed, I noticed vaguely; his face was covered in dirt and darkspawn blood, but he was otherwise unmarked. Leliana eased him into a supine position, crossing his arms across his chest. She went to close his eyes, and then twitched, startled, as she realised they weren't open. I'd seen enough death to know that was unusual \u2013 very few people who died in battle did so with closed eyes. The bard brushed her fingers against his temple, smearing some of the dirt and fondly smoothing back a lock of his hair, when a voice I never thought I would hear again croaked out softly.\n\n\"If you wanted to run your hands through my hair, my dear Leliana, you had only to ask, yes?\"\n\nChapter One Hundred Twelve: *No Regrets\n\n\"If you wanted to run your hands through my hair, my dear Leliana, you had only to ask, yes?\"\n\nLeliana sprang away from the blond elf like someone had hit her with a taser. It might have been hilarious, if it hadn't been so shocking and serious and horrific a moment before. As it was, not one of us didn't gasp, twitch, jump, fall over, scream, or otherwise express horror, which rapidly transmuted into humour, as the reality of Zevran's survival sank in.\n\nAedan leapt out of my arms, lunging towards the supine elf; oblivious and uncaring who was watching, he showered kisses on the former Crow's face before burying his own face in Zev's neck and sobbing unrestrainedly. Zev reached up awkwardly to rub his back, murmuring endearments in Antivan.\n\nAlistair, behind me, barked out a semi-hysterical laugh, and that broke the ice for everyone else; the entire group began talking and laughing, too happy to even speculate on the strange events that had brought us to this point.\n\nAs for me, I froze, kneeling where Aedan had left me moments before, staring open-mouthed at the assassin in shock, mind reeling. How? It isn't possible, unless... Something occurred to me, and I narrowed my eyes, turning my head to examine my companions who were all celebrating in obvious relief. So Morrigan sticking around wasn't for my benefit, after all, as she'd claimed. Who? Someone did that damned ritual, but who?\n\nZevran blinked at me over Aedan's head, confused as well. \"I rather thought I'd wake up dead...or not at all, as the case may be.\"\n\nI frowned. \"You've used that line already.\" He's genuinely surprised to be alive...strike Zevran and Aedan off the list of suspects. Aedan was far too afraid he'd died to be the one. I looked around some more.\n\nAlistair wasn't on the list in the first place \u2013 I knew where he'd slept every night since we'd gotten back together, and it wasn't with Morrigan. Anders was deep in an embrace with Solona, a blissful look on his face as he held her like he'd never let go, and I crossed him off my mental list as well. A quick look at Jowan, Wulf, and the dwarves showed obvious shock, and I decided none of them were likely suspects either. Sten looked pissed off, and I wondered if he regretted his hasty decision to become a Warden and submit himself to a magical ritual given that it looked like no one had had to die to end the Blight in the end. Loghain also looked angry, but I ascribed other reasons for his anger \u2013 probably just pissed off he'll have to go to Orlais after all. I didn't think he would have agreed to the ritual to save his own life, much less the rest of us, without serious convincing \u2013 and Aedan, likely the only one possibly capable of it, obviously hadn't even tried.\n\nRiordan looked weary, but also alarmed, and the look on Dougal's face mirrored that almost exactly; it was clear they were both concerned that somehow the Blight hadn't been ended, and the Archdemon was going to reform. I pondered the idea, briefly; it was, I supposed, just possible that Avernus' altered Joining potion was somehow ineffective, didn't render quite the right sort of taint to effectively kill an Archdemon, and Zevran \u2013 and the rest of us who'd recently Joined \u2013 weren't technically Grey Wardens.\n\nBut then my gaze fell on Conrad. The normally confidant redhead stood, looking around and avoiding eye contact, neither obviously shocked nor worried, and his usually pale face was flushed red as he rubbed nervously at one wrist with the other hand. My eyes narrowed further as I stared at him, noticing for the first time how his shoulders slumped as though he carried the weight of the world on them \u2013 or was really, inexplicably sad. Son of a...\n\nI stood on shaky legs, and Alistair held out one arm, clearly expecting me to leap at him. I reached out and squeezed his hand, quickly, before slipping around him to walk up to Conrad. I stared at him for a moment, considering the unhappiness that was apparent.\n\n\"You,\" I began, and he winced. \"You did the ritual. With Morrigan.\"\n\nHe took a deep breath, squared his shoulders, and then, finally, met my eyes. \"Yes.\"\n\nI was stunned at the sheer despair on his face, and I threw myself at him, wrapping my arms around his waist and resting my head on his shoulder.\n\n\"Thank you. You saved him. Thank you.\" I babbled a few more thanks as he slowly, awkwardly, put his arms around me to pat my back. I could feel him shudder, and I went up on tiptoes to whisper in his ear. \"Do you love her?\"\n\nHe didn't answer out loud, but I could feel the tremulous bob that indicated he'd nodded. \n\n\"You'll see her again, I promise. And your son will be fine. I will help you find her, I swear.\"\n\nHe nodded again, and his arms tightened once before releasing me. I stepped back and eased backwards into Alistair's embrace to find Riordan, Dougal, and Loghain watching me with varying degrees of skepticism and concern. I almost laughed \u2013 they were giving me the look they should be levelling at Conrad \u2013 but managed to refrain. The other Grey Wardens, newer to the Order as they were, seemed to be missing the seriousness of what was happening, and for Conrad's sake, I was relieved.\n\nI tilted my head, and Alistair and I stepped sideways slightly, the three worried Wardens following us and Conrad reluctantly accompanying them. Riordan looked almost angry, and I sighed. \"Look, there was a ritual, okay? One that meant the Warden who killed the Archdemon wouldn't die. Duncan knew about it and had decided against allowing it. I thought he'd told you, told everyone...\" Their unimpressed expressions made it clear that wasn't true. \"But obviously not. Apparently Conrad didn't ask permission.\" I noticed Conrad playing with a wooden ring on his finger and smiled softly.\n\nTheir unconvinced expressions spurred Alistair to defend me. \"It's true. Aedan, Duncan, and I all knew. Duncan forbade us from going through with it. I assume either he thought no one else would do it without permission, or he spoke with Morrigan and believed she'd accepted his refusal on everyone's behalf.\"\n\n\"And just what are the consequences of this ritual, young lady?\"\n\nDougal took his age way too seriously, I decided, and I suppressed a giggle. \"Nothing you need to worry about, old man.\" He looked startled, but even Riordan twitched a smile. Loghain glared at me as though he'd be able to divine why they were asking me by burning a hole through my forehead with his gaze alone.\n\n\"No, seriously. I trust Morrigan. I don't know what exactly she plans, but I know the Blight is over, the Archdemon is truly dead, and she intends nothing bad for Ferelden or Thedas as a whole. Honestly, it will be okay.\" I purposely avoided mentioning a baby. I want Conrad to be the one to find her, not one of the others.\n\nConrad agreed with me, confirming what I'd said, also not mentioning the child, I noticed. Apparently satisfied, Riordan finally allowed us to return to the celebration with the others. Someone had helped Zevran up, and while his arm remained over Aedan's shoulder for support, he looked remarkably hale for a dead man. I kissed my brother's cheek, and squeezed Zevran gently with murmured thanks for keeping Aedan safe. I exchanged hugs with everyone, more than slightly relieved that the little family I had come to care about were safe \u2013 with one exception, whose absence made my heart ache. \n\nI finally got the opportunity to curl myself into Alistair's arms \u2013 he threw off his gauntlets, lifted me up and kissed me aggressively, plundering my mouth and making me fervently wish we were somewhere more appropriate, and cleaner. When he released me, I buried my face in his neck. \"I'm sorry.\"\n\n\"What?\"\n\n\"Duncan died saving me. I'm sorry.\"\n\nHe pulled away from me slightly, and I looked away, reluctant to see the pain or censure I expected in his eyes. He lifted my chin with one hand, forcing me to meet his gaze. \"Duncan was never coming back, Sierra. Not after this. He would have been devastated to survive this battle. There is nothing to apologise for \u2013 not to me, or anyone else. He would have been happy to die to save your life, and I'm nothing but grateful that not only did he succeed, he won't have to go die in the Deep Roads alone.\"\n\n\"So...I did him a favour?\" I sniffled, caught between relief the battle was over, and remorse that Duncan hadn't survived somehow against all odds. \n\nAlistair chuckled. \"I suppose so, yes. That's how he'd see it, anyway.\" He kissed my forehead softly. \"I love you. And it isn't your fault he died. Knowing you, you were off trying to save the world, or something, when he saved you.\"\n\n\"I...\" I blushed. \"In other news, I did learn how to control that crazy smite that kills mages, more or less. The one I used at Ostagar.\"\n\n\"I'd like to see that!\"\n\n\"You find me a handful of mages you want dead, and I'd be happy to show you.\"\n\n\"Think you could teach me?\" He looked sort of...enthused.\n\n\"Honestly, no.\" He frowned, and I hurried to explain. \"Nothing personal. I just don't think your magic resistance is high enough. I'm pretty sure mine is barely high enough. I was holding five emissaries' mana at the time. Pretty sure my brain was trying to drip out my nose, actually. It was awful.\"\n\nHe touched my face gently. \"That explains the blood then. We should have Wynne or Anders check you out, just in case.\"\n\nI nodded. \"Once the injured are taken care of, I promise.\"\n\nBy this time, I saw a group of mages and a bunch of the Tranquil, supervised by Irving, approach Riordan. After some discussion, a subdued Conrad, Sten, and Jowan were left with them as they began the laborious process of draining and preserving the Archdemon's blood; once that was done, Sten had already started talking about how we could get the most scale and bone from the beast. A Warden had to do most of the work, given the risk of becoming tainted during handling, and Sten looked positively enthusiastic about the prospect.",
        "The rest of us escorted a limping Zevran to the infirmary area, where Wynne was already bossing around a group of mages and a handful of others who were helping bandage, distribute potions and poultices, and generally aiding their efforts. She did a brief once-over on Zevran, healed an ankle he'd apparently sprained in his sprint to the Archdemon, and declared him healthy. She checked me over as well, clucking at the dried blood on my face, but found nothing of concern. Anders' mana was too depleted to aid much, and he'd apparently already taken almost a toxic dose of Lyrium while trying to save a soldier who'd lost an arm to an ogre, so he stayed with us as we all sought out Cailan and the rest of the command structure.\n\nWe found the King near the infirmary, shouting orders and making arrangements to have camps set, guards patrolling to watch for any lingering darkspawn, the infirmary moved to cleaner, drier ground, and had already arranged with Irving to have the mages begin scouring the ground saturated with darkspawn blood with the hottest fire they could manage. Sereda had some dwarves with some sort of medieval flamethrowers aiding them; I wasn't sure it would work, given the sheer quantity of taint I could still feel around us, but figured it was better than doing nothing.\n\nWe left Cailan there, after assurances were given on both sides that everyone was fine; Cailan hugged both Alistair and I, and my husband flushed, embarrassed but also pleased by the acknowledgement in front of the nobles gathered nearby. All of the Wardens, and our one remaining non-Warden companion, Leliana, finally headed to the new camp, assembling in the tent that would eventually be Cailan's. Our gear had been brought with his tent, so we had all our packs available when we arrived. We shed our armour and most of us collapsed in a rough circle on the ground, exhausted; despite how tired we were, though, I felt a bit wired and restless, and it seemed the rest of the group felt the same.\n\nWe spent a while sharing stories from the battle; apparently Alistair's group had taken down the first general, while Aedan's group spent their time killing ogres as they searched the battlefield for the second. I told them about the ambush from the north, the emissary hunting party, and the general who'd come after me, as well as Duncan's heroic end. \n\nThe group was quiet after that, contemplating the brave, selfless man we'd known as a commander and a friend. Alistair just held me, his sorrow muted by foreknowledge and his desire not to increase my guilt. No matter how many reassurances I received, no matter that no one else blamed me, I knew I'd never stop feeling guilty for Duncan's death. It might not have made sense, given that his survival, in many ways, would have been a worse outcome, but I doubted that when I closed my eyes, I'd ever stop seeing his sightless gaze and the pool of blood spreading around us, as I held his lifeless body in my arms.\n\nAedan, however, was more concerned about other details. \"They were really hunting you?\"\n\nI nodded. \"I'm guessing they had several groups, or maybe the Archdemon could just pay attention to any group that started having unexplained losses? But it was like they figured out what was going on, and so any time I stole mana or killed an emissary, the rest were just waiting to attack the space they assumed I must be standing in.\"\n\n\"Why in the void would the Archdemon care to hunt a particular noblewoman, templar or not, out of every other soldier on the field?\" Loghain's brows furrowed in confusion, and I sighed as those all around me burst out in defense of my skill and value as a target for the darkspawn. \n\nAedan halted it with a gesture. \"A story for another time. For now, I'd suggest we rest.\"\n\nWe all agreed, and finally scattered to our own tents. The battle had taken a full twenty-four hours, and I felt every one of those hours as a separate clump of grit in my eyes, which were struggling to stay open. It was warm, with the spring sunshine pouring down on the camp, and we didn't even unpack our bedrolls, not wanting to contaminate them, instead laying out some blankets and collapsing on top fully clothed. Alistair kissed me sleepily, and then we both passed out.\n\nI woke some time later, after the most dreamless sleep I'd had since becoming a Grey Warden. Alistair was curled up around me like a protective mabari, and I grinned to myself at the image. I had no desire to get up \u2013 cleaning my armour could wait, and I didn't want to see anyone else, really. With the possible exception of my brother, but given the earlier events, I didn't imagine anyone except Zev would be seeing him anytime soon.\n\nSo I laid in a tiny space, surrounded by the man I loved, and tried to come to terms with everything that had happened.\n\nThe Archdemon was dead.\n\nSo was Duncan.\n\nZevran had survived.\n\nMorrigan was pregnant, and in a relationship with Conrad, of all people.\n\nI was married, a princess, and lived in Thedas. I hadn't been back on Earth in months, and had no intention of going back again, ever, if I could manage it.\n\nIn a little over a year, my life had changed drastically, but almost all of it was for the better, and I spent a few minutes just being thankful for my life. I snuggled up closer to Alistair, and my movement must have woken him; I felt his arm snake around my waist, pulling me closer to him, and a sleepy, confused kiss was pressed to the back of my head.\n\n\"Eugh,\" Alistair complained, voice hoarse with sleep. \n\n\"Yeah, I wouldn't kiss me until we manage a bath, if I were you.\"\n\nHe pulled me, rolling me onto my back and, leaning over me, pressed a soft kiss to my lips, drawing it out and leaving me chasing after him for more as he pulled away. \"We need to have that bath soon, then.\" I giggled, and he rested his forehead against mine with a smile. \"You okay?\"\n\nI nodded and smiled back. \"I will be.\"\n\nWe spent the early evening helping with organization \u2013 carrying the wounded, retrieving bodies for the pyres, chopping wood \u2013 whatever was needed. The feeling of the taint around us was heavy, but I could sense no darkspawn, and the mages had already begun incinerating the darkspawn corpses left after the battle and scouring the ground with fire. The Dalish had already withdrawn, promising to search both the Brecilian forest and some of the Korcari Wilds for pockets of darkspawn in their travels. Apparently while I'd been sleeping, Cailan granted Lanaya permission to establish an elvish settlement near Ostagar in any untainted land they could find. They had agreed to take in any of their city brethren who managed to make their way there, also.\n\nI was proud and impressed \u2013 perhaps, for once, Thedas would have a true leader determined to at least try to change the fates of the elves, because Maker knew, neither Maric, nor Anora, nor Loghain, nor any of the other nations had even made gestures towards that end. The settlement also meant we had a reliable meeting place should the Grey Wardens need to speak to the elves, and I wondered if Aedan would consider establishing an outpost there as well. The Dalish took their dead and wounded with them, and I knew their Keepers would be as capable as the army's healers in keeping their wounded alive.\n\nThe dwarves had also gathered \u2013 they hadn't yet left, but they were planning to march as soon as the worst of their wounded had been stabilized. They promised to scout the countryside to our southwest for darkspawn remnants as they travelled, as well. Gorim had already bid Sereda goodbye; from what I'd seen, the Queen had a former casteless, now military caste man at her side, and I wondered whether he was her second, or her future husband. She'd kept a professional distance from Gorim, and he'd returned the favour; it was sad, but it seemed they'd both come to terms with their separation. \n\nI received another small shipment of sovereigns from Dallard, and a letter admitting he was able to charge far more for the bola launchers than he'd initially thought, and thus felt obligated to share the extra proceeds. I was impressed with his honesty, and hoped I'd get the chance to thank him in person sometime.\n\nOur mages were put to work in the infirmary, Anders and Wynne working on the most severely wounded with a couple of other Circle mages, while Jowan and Solona spent their time healing more minor wounds and lending mana when the others needed help for something particularly difficult. Sten and Conrad had assisted Irving and the handful of Tranquil in storing and preserving the Archdemon blood; they had placed it into individual glass bottles, which apparently Duncan had arranged to be brought, and packed into crates. We had a dozen of the small wooden boxes full, each holding enough Archdemon blood for an entire nation for the next several hundred years. Apparently Aedan intended to ship half of it to Weisshaupt \u2013 we expected a delegation from the First Warden in Denerim before long, given Duncan's declaration of independence \u2013 and keep the other six in Ferelden.\n\n\"Not that we won't share it if they run out,\" he'd assured Riordan, \"but to use as leverage against backlash for splitting off from them.\"\n\nSten had begun the delicate process of stripping the scales and hide from the carcass. I was surprised again by his skill \u2013 he'd done the same to the Living Andraste, but I couldn't imagine why a warrior of his skill was also trained in such a craft. He explained that, in Seheron, the children assigned to become warriors initially learned to fight while hunting \u2013 wild cats, bears, wolves, some large reptiles he didn't have a word in the common tongue for \u2013 and that bringing home their skins was a sign of their prowess, allowing them to advance in the ranks.\n\nRiordan informed us that, as the hide would need to be tanned and cured immediately if we didn't want it to rot, it was expected that the entirety of it would be used for armour and weapons for local Grey Wardens. I briefly wondered if Paider could be convinced to create me another set of armour out of Archdemon leather. Probably not.\n\nLate that night we all gathered again from whatever tasks we'd been doing, settling around the fire at our camp. Leliana was off somewhere, which left everyone present a Grey Warden, and Aedan and Riordan took the opportunity to discuss some things with the group of us.\n\n\"We will tell everyone that Duncan perished while killing the Archdemon.\" Riordan levelled a glare at Conrad. \"We know that isn't true, however the means by which Zevran survived, as happy as we are about the outcome, will have unfortunate consequences should the Order become aware of them. As it is, I expect the First Warden to rage and shout about you leaving the Order, but nothing will come of it. Should they learn that Zevran survived killing an Archdemon, I fully expect they would call on any alliances necessary to grant them the forces required to come and apprehend him for 'testing', whether they had his Majesty's permission to enter the country or not.\"\n\nZevran smirked. \"Let them come.\"\n\nAedan smacked his arm. \"Let's not start a war, shall we, love? Besides, aren't you supposed to be laying low?\" I was pleased to see the two rogues had not left each other's sides since Zevran had slain the dragon, constantly touching and sharing glances that conveyed their relief and gratitude. I smiled and snuggled into Alistair's arms, feeling pleasantly warm despite the cool air of the spring night.\n\n\"Not to mention what they may do to Conrad for agreeing to the ritual, and Morrigan, should they ever find her. As I was saying, the official story will be that Duncan killed the Archdemon. King Cailan has agreed to back this story; very few outside of ourselves know it to be untrue, and those we are aware of have already been contacted and agreed to maintain our secrecy to prevent a civil war within the Grey Wardens.\"\n\n\"They're going to figure it out,\" Anders complained. \"Someone will have noticed, someone we didn't realise. They're not stupid, and rumours will get out.\"\n\n\"They may question what happened,\" Dougal allowed, \"however with several senior Wardens and King Cailan telling the same story, they will have no proof. They cannot march against what will become a hostile nation based on rumour.\"\n\n\"They're not stupid,\" Riordan agreed, \"but they are also confidant in their knowledge. They know that a Grey Warden must die to end the Blight, and may not question it if they know Duncan was the only Warden to perish.\"\n\nI was nervous about the plan, but given how much else we were going to be hiding from Weisshaupt \u2013 my Joining, my unusual knowledge of the Blight, my invisibility against the darkspawn \u2013 it was just one more thing to add to the list.\n\n\"They're going to want his body,\" Dougal informed us.\n\n\"Absolutely not.\" Alistair didn't even hesitate. \"He was a Fereldan Warden, a hero, and he's the one who separated us from Weisshaupt.\"\n\n\"He'd be entombed with the others who ended Blights, like Garahel. Are you sure?\"\n\n\"We are.\" Aedan jumped in to back Alistair. \"While I don't disagree that he was a hero worthy of that honour, we neither need them testing his body and somehow determining he didn't actually kill the Archdemon, nor do we want them claiming him in some way. We ended this Blight without them, and the victory should remain ours. Sending him back is just opening the door to submitting to their authority again.\"\n\n\"He was born in Highever,\" Alistair added. \"I think it would be nice if we built some sort of monument there, and sprinkled his ashes.\"\n\nRiordan nodded. \"Fine. I believe that is all-\"\n\n\"One more thing.\" Conrad finally spoke, though he wilted slightly under Dougal's disapproving stare. \"I would like to formally request that I remain assigned to Ferelden, now that the Blight is over.\"\n\nEveryone stopped and gaped at him except me; I knew he wanted to remain nearby in case I could actually come through with helping him see Morrigan again.\n\n\"Are you certain?\" Dougal looked concerned. \"This split from Weisshaupt...you may not ever be able to return to Jader.\"\n\n\"I will miss a few friends there, it's true, but I have no real reason to stay. No family, no life outside the Wardens. I think the split is the right thing to do; I'm more than a little sick of Weisshaupt's politics. I'm proud of what we accomplished here, and I'd like to help continue to rebuild.\"\n\nAedan examined his face critically for a few moments, then turned to Alistair with a raised eyebrow. My husband shrugged and nodded. \"Can you accept less senior Wardens as your Commanders? Aedan and I were left in charge by Duncan, and we need to know you'd accept our authority.\" \n\n\"I have no trouble with that. I'm not looking for advancement within the Order; I'm perfectly happy not having to manage reams of paperwork and dealing with reluctant recruits.\" He grinned.\n\nAedan chuckled. \"Welcome to the Fereldan Grey Wardens, Conrad.\"\n\nThe meeting broke up after that; I still hadn't seen hide nor hair of Leliana, but assumed she was helping Wynne in the infirmary or something similar. Pyres for those who'd perished were planned for the following day, most of the soldiers finally able to rest since the bodies had been collected and the wood chopped; in our camp, which was at the centre of the army's larger encampment, it was finally completely quiet.\n\nI stepped into Alistair's arms when we got into our tent, turning my face up for a kiss, before looking unhappily at the blankets spread on the ground, the bedrolls still off to the side. \"This sucks.\" \n\n\"I like our tent,\" he objected.\n\n\"Not that. I want to be clean. I want to be able to use our bedrolls and not worry about getting them tainted or covered in blood. I want to be able to touch you!\"\n\n\"I have something to show you.\" He grinned, leaning down to pick up a bag I'd never seen before, then dragged me out of our tent and across the camp to the command tent. Fumbling about inside, he thumbed on a glow lamp Cailan had borrowed from the Circle, and ushered me inside.\n\n\"What's all this about?\" I stopped, confused. In the centre of the pavilion was a camp stool, surrounded on three sides by blankets hung from the crossbeams of the large structure.\n\n\"A shower.\" Alistair looked immensely pleased with himself. \"With the blankets, nothing else will get wet, and no one will be able to see from outside. As long as we're quick, the water will soak into the ground and no one will even know we were here by morning. Though if we're kind, we might want to lend it to everyone else \u2013 I'm sure they feel the same.\" He wiggled the showerhead at me before placing it on the little stool.\n\n\"You made me a shower? When did you even have time to do that?\"\n\n\"I'm good at sneaking out of chores. Raised by the Chantry, remember? I snuck away from the clean-up when no one was looking.\"\n\nI laughed at his impish grin and pressed up against him with a smile. \"Remind me to reward your bad behaviour when we're done here.\"\n\nHis eyes darkened as he leaned down to kiss me, but I slipped away, pulling the tunic I'd been wearing since we'd shed our armour earlier over my head. \"Last one clean loses.\"\n\nI quickly shucked the rest of my clothes and bolted for the little makeshift shower stall as Alistair sputtered and began peeling himself out of his clothes. \"No fair!\" he whined, and I laughed as I began the first wash of several I planned for my thoroughly filthy hair.\n\nHe joined me before long, and we spent half an hour splashing and washing, giggling like maniacs as we finally got clean. Even before fighting the Archdemon, it had been difficult with armies around us, and while we'd washed up as best we could, our sex lives had suffered drastically from my need to wash before getting intimate. Not that Alistair was complaining \u2013 I was sure he didn't want to touch me, either, when I was covered in equal parts mud, sweat, and darkspawn blood.\n\nHe had me sit on the little stool and helped me wash my hair for the third time before carefully combing some conditioner through my unruly curls with his fingers, and then I let him sit and returned the favour. He was so gorgeous, sitting at my feet, head back, eyes closed in contentment, water streaking down his incredible body, that I just couldn't wait anymore. I rinsed the soap out of his hair, then turned off the water and sat down to straddle his lap, my breasts pressing up against his chest, and kissed him passionately.\n\nIt took only a moment of shock before his arms were around me, holding my slippery wet body to his, plundering my mouth with demanding kisses, and I could feel the evidence of his sudden arousal between my thighs. I adjusted slightly until I could feel him at my entrance, hard and hot, and I slowly slid down his length with a moan.\n\nHis hands went to my hips and he lifted me back up, only to drop me back down as he thrust his hips, burying himself inside me with a groan. \"I love you, Sierra. Oh, Maker, this feels so good.\"\n\nI dragged my lips down his neck, scratching my chin against his stubble as I sucked on his tender skin. He gasped, as I nipped at his pulse point, and drove himself into me again, and then I felt his finger on my pearl, gentle but insistent. I was already close, my relief, exhaustion, love and arousal all mixing into a heady combination, and I cried out; he pulled my face forward until my mouth pressed against his shoulder with a hissed warning, and I took the hint and bit him, stifling any further noise.\n\nIt took maybe three more thrusts until I was shuddering in completion, trying not to bite hard enough to draw blood as pleasure sizzled down every nerve ending, and Alistair followed me over the precipice a moment later as my muscles massaged his length inside me. His fingers dug into my hips as he thrust erratically, groaning softly in my ear.",
        "I felt him soften and slip out of me as I sat collapsed against his chest, catching my breath. When I could breathe normally again, I pressed a soft kiss to the bite mark I'd left on his shoulder, and his breath hitched.\n\n\"I'm sorry.\"\n\nHe chuckled. \"You need to stop apologising for things that aren't your fault.\" He rubbed the sore spot ruefully. \"Though I'm going to milk this for all it's worth, just so you know.\"\n\nI laughed and swatted him, then groaned as I climbed to my feet, my hips sore. \"In private, I should hope.\"\n\n\"Well, yeah \u2013 it would be a shame to survive the battle with the Archdemon only to be killed by your brother for discussing our sex life where he could overhear.\"\n\nI raised one eyebrow in mock irritation. \"Never mind that - it would be a shame not to have a sex life to discuss, if your wife was displeased by your public bragging.\"\n\nHe paled. \"You wouldn't.\"\n\n\"I might.\"\n\nHis frown morphed into a mischievous grin. \"Then I guess I had better show you why you don't want to do that.\"\n\nI threw a linen dress over my head without smalls, and sauntered past him as I collected my things. \"Then you'd better hurry, unless you want me to start without you.\"\n\nI shrieked in laughter as he made a grab for me, and then darted, laughing, out of the tent, leaving him to get dressed and follow; instead of running back to our own tent, however, I ran smack-dab into my brother. He looked at me, confused; his expression cleared up to a mixture of amusement and disgust as I tossed him the shower head.\n\n\"Your turn!\""
    ],
    "authorname": "ElyssaCousland",
    "tags": [
        "fantasy",
        "fanfiction",
        "dragon age",
        "modern girl in thedas",
        "romance"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/there-and-back-again-ch-111-112"
}
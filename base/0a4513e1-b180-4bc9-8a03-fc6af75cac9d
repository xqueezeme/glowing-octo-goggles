{
    "title": "Iron Girders and Steel Springs",
    "pages": [
        "Marshall O'Neil waved down the minibus as it pulled into the quiet car park next to the picturesque little railway station. It was the first vehicle he'd seen since getting off the train ten minutes ago. First people, even. Altnabreac was a real out-of-the-way place. Marshall had been the only passenger left on the train and there was no one else about when he'd stepped out onto the platform and then followed the exit signs to this empty little car park.\n\n\"Are you heading up to G\u00e0rradh-Sionnach?\" he asked the driver.\n\n\"Och aye,\" the driver replied. \"Are you O'Neil?\"\n\n\"Yes,\" Marshall nodded in reply.\n\n\"I was told to expect you here,\" the driver said. \"Welcome to bonnie Scotland.\"\n\nHe got out and helped Marshall place his heavy rucksack with the other luggage piled up on the front row of seats. Marshall saw the man was wearing a kilt and a real honest-to-god Tam o'Shanter. It was traditional, Marshall supposed, but it was about as expected as seeing gentlemen walking around London in top hat and tails.\n\n\"Don't mind the getup,\" the driver said with a fox-like grin. \"It's for the Yanks. All they know about Scotland is Groundskeeper Willie from The Simpsons.\"\n\nMarshall thought the driver meant the cluster of men sitting up in the back of the bus, but then he heard them speak and realised they had to be Londoners from their accents. There were five of them. They were dressed in expensive suits and spoke in loud, braying tones.\n\nThere was a sixth man, but he didn't appear to be a member of their party. He was skinny, wore spectacles and his face had a pinched look to it with thin, almost bloodless lips. He was dressed casually, but expensively. He sat on the other side of the bus and looked as though he didn't want to have anything to do with the other men. He was an American, Marshall learned later, an IT Systems Analyst all the way over from Washington State.\n\n\"That's the last pickup,\" the bus driver called out as he climbed back into his seat. \"Next stop G\u00e0rradh-Sionnach.\"\n\nThe men in suits whooped. They sounded glad to be free of the confines of their city jobs. Marshall took the open seat in front of the thin man.\n\n\"Have you visited G\u00e0rradh-Sionnach before?\" Marshall asked one of the Londoners, a chubby man with a wide face and thick lips. He looked the eldest of the group.\n\n\"Nah, first time,\" he replied. \"You?\"\n\n\"Nope, first time too,\" Marshall replied. \"I'm Marshall.\" He offered his hand.\n\n\"Tom,\" the man replied. \"Tom Figg. Where you from, Marshall? Manchester?\"\n\n\"Not far,\" Marshall replied \"Altrincham.\"\n\n\"We all work in the Square Mile,\" Figg said, nodding back to his companions. They were comparing pictures on iPads and laughing loudly. \"So what is it, City or United?\" he asked. \"Would have to be City. No one within half an hour's drive of Manchester city centre supports the scum.\"\n\n\"Sale Sharks,\" Marshall said with a smile.\n\n\"Oh, a rugger bugger,\" Figg said. \"I played a bit at university. Prop,\" he added. \"Buggered up my shoulder.\" He rotated his left shoulder and grimaced.\n\n\"Lock,\" Marshall said. \"I've lost a bit of weight since then,\" he added at Figg's surprised expression.\n\n\"A bit,\" Figg laughed. \"A winger'd bring you down with a tap now, and they're all girls. What do you do in Altrincham then, Marshall?\"\n\n\"Firefighter,\" Marshall replied. \"Okay, former firefighter. I sit behind a desk and do the paperwork nowadays. Occasionally they let me out to teach safety classes to the local kids.\"\n\n\"Firefighter,\" Figg said, his eyes twinkling. \"Hey, we've got a proper public servant here.\"\n\nThe other city types gave a loud boozy cheer.\n\n\"We're all parasites, if you believe the newspapers and BBC,\" Figg said with a sour expression. \"Bankers,\" he elaborated.\n\n\"Fucking fat filthy-stinking-rich parasites,\" one of the group said with a laugh.\n\n\"They're happy enough to spend our taxes,\" Figg said. \"I don't hear them complain about our money when they're pissing half of it up the wall in the public sector...\n\n\"Not you,\" Figg hastily amended. \"You've got a proper job. I don't mind paying out for the boys in the fire service, and the boys in blue, and the boys out in the Middle East, and the doctors and nurses. It's the other bollocks I can't stand. Bereavement councillors for depressed lesbians, million-pound mansions so's fat breeders can have room to pop out another sprog or ten, fuck that shit.\n\n\"Not you. You boys are all right by us. Although I am a little worried where my hard-earned cash is going if a public sector bloke can afford to come up to G\u00e0rradh-Sionnach,\" Figg chuckled.\n\n\"Afford?\" Marshall wasn't sure what he meant.\n\n\"G\u00e0rradh-Sionnach isn't cheap,\" Figg said. \"But you must know that.\"\n\n\"No,\" Marshall said, \"my therapist arranged it all. Said it would help me out.\"\n\nFigg looked stunned. \"Therapist? Blimey, he's an open-minded chappie.\"\n\n\"She,\" Marshall corrected. \"And yeah, I know, she has some very strange ideas. Seems to know her stuff though.\"\n\n\"Wait, she arranged for you to come up here to G\u00e0rradh-Sionnach?\"\n\n\"Yes,\" Marshall replied. \"I've got some self-confidence problems with my body image. She thought it would do me some good to spend a few days in the company of nudists.\"\n\n* * * *\n\nMarshall gripped the bottom of his pullover. All he had to do was lift it up.\n\nEasy.\n\nHe willed his hands to lift up his top and reveal his naked flesh underneath. They didn't move.\n\nCome on. Easy.\n\nHis therapist, Ms Inari Kitson, watched him dispassionately. It didn't help she was a fine-looking woman, an absolute fox. She could have been a model back in her youth, still could. She had an elegant, almost aristocratic face with high, finely-defined cheekbones. Long silky-smooth platinum-blonde hair flowed down onto her shoulders. She seemed neither embarrassed nor conceited about her beauty. It just was.\n\nMarshall wished he could be so unconcerned about his appearance.\n\nHe took his hands away from the bottom of his pullover and looked down at the floor.\n\n\"Oh dear,\" Inari said. \"I see the problem. I think what we need to do is place you in an environment where nakedness is more natural. Mmm, leave it with me.\"\n\n* * * *\n\n\"Hang about,\" Figg said. \"You do know what G\u00e0rradh-Sionnach is, right?\"\n\n\"Yes,\" Marshall said, puzzled by where the conversation was heading. \"It's a nudist resort, located up in a remote part of Scotland.\"\n\nFigg looked at Marshall with an incredulous expression on his face. His face cracked up. He started to splutter with laughter. The laughter grew louder and louder until it seemed as though the wide man might cough up his own lung.\n\n\"Priceless,\" he spluttered with a smile on his face. \"Absolutely priceless. Hey Chris, pass me your iPad.\" He turned back to Marshall. \"I think your therapist is 'aving a laugh, or she needs a therapist herself.\"\n\nHe passed the iPad over to Marshall. The touch screen was displaying a web page. The logo at the top was for G\u00e0rradh-Sionnach, the pictures appeared to show somewhere located in the wilds of Scotland, and the people in the pictures were not wearing any clothes.\n\nThe people in the pictures were not what Marshall expected of a nudist colony. In his dreams maybe, but real life...no way. They were all tall, busty girls of Russian or East European extraction. They looked to be in their early twenties and were all\u2014without exception\u2014extremely gorgeous. Marshall navigated the site and saw each had their own profile page. He flicked through many many pictures of naked beauties lounging by the pool, leaning against the trees, standing in front of a pristine loch, supping cocktails in a night-time bar.\n\n\"Oh my,\" Marshall said.\n\n\"It's a sex resort,\" Figg said. \"They fly the girls, model types, in from Russia, Latvia, Ukraine, those kinds of places. For a couple of grand one of them is yours for the weekend.\"\n\nChris, the owner of the iPad, looked over Marshall's shoulder. The browser was currently showing the profile of an amazonian blue-eyed blonde with an incredible pair of large round breasts. Were those even real? Marshall thought as he stared at the pictures. They couldn't be real.\n\n\"Ah Vasya, lovely Vasya,\" Chris said. \"You can be mine for the weekend.\"\n\n\"She's not available,\" the prim man at the back said, revealing an American accent. \"She's already booked.\"\n\nChris shrugged. \"A man that plans ahead. Fair play.\"\n\nHe took the tablet back off Marshall and started leafing through the other profiles.\n\n\"I take it your therapist neglected to mention this aspect of G\u00e0rradh-Sionnach,\" Figg said.\n\n\"I think she might have made a mistake,\" Marshall said.\n\n\"Oh well, you might as well enjoy it,\" Figg said. \"I won't tell your missus if you don't tell mine,\" he guffawed with a wink.\n\nMarshall sat back in his chair and looked out of the window as the bus trundled up into hills carpeted with dense firs. He was supposed to be going to a nudist camp not an international knocking shop. Inari must have cocked up somewhere. That seemed so unlike her.\n\nThe Londoners grew increasingly raucous and boastful as the journey continued. In contrast, the American sat quietly at the back, so pinched and tightly wound it seemed like the slightest knock would cause him to come apart with his body parts spronging in all directions.\n\nThe bus came over a slight rise and a breathtaking landscape came into view. A beautiful loch, the waters blue and as placid as a mirror, stretched out before them. Wild, tree-lined slopes ran along each side of the valley. Beneath them the road wound down to a picturesque collection of wooden huts on the shores of the loch.\n\nThe driver took the bus down, pulled up to a halt outside the largest building\u2014a building Marshall recognised as the main bar from the website\u2014and tooted the horn. There was a sudden flurry of activity as naked girls dashed out into the open space between the huts. Giggling and laughing, they formed a line. Their pink and exposed bits jiggled beneath the warm summer sun.\n\nMarshall stared out of the window and gulped. He didn't think he'd ever seen a more beautiful collection of girls\u2014in the flesh\u2014in his life. They were mostly tall blue-eyed blonde sex goddesses.\n\nAnd completely naked. All of them.\n\nEven the bankers were briefly shushed.\n\n\"Welcome to G\u00e0rradh-Sionnach on this glorious bonnie day,\" the driver said.\n\nHe left his seat, walked around the front and slid open the side door. The Londoners gave a loud cheer and charged out like boys arriving at summer camp.\n\nMarshall stayed back. What now?\n\n\"There's been some kind of mistake,\" he said to the driver as the driver unloaded the bags from the front row of seats.\n\nThe driver was a slight man, little more than sinew and bone, yet he lifted the monstrous suitcases out of the bus with barely any effort. He looked up at Marshall and smiled that fox-like grin. There was a bit of feral wildness about the man\u2014like the woods around them.\n\n\"There's no mistake,\" the man said. \"Inari Kitson sent you.\"\n\nMarshall lowered his voice.\n\n\"But isn't this place a...brothel,\" Marshall said.\n\n\"Aye, and a fine one at that,\" the driver said as he continued to unload the bus.\n\n\"I don't think I have enough on me,\" Marshall said. \"Money.\"\n\n\"No need to worry about that,\" the driver said. \"Knowing Ms Kitson, she'll have sorted it out already.\"\n\nThe driver stopped what he was doing and glanced down at Marshall's hands.\n\n\"Are you married?\"\n\n\"No,\" Marshall replied.\n\n\"Girlfriend?\"\n\n\"No.\"\n\n\"Then what's your problem?\" the driver laughed. He walked behind Marshall and steered his protesting form in the direction of the line of girls. \"Go and have some fun.\"\n\nIt wasn't girls plural anymore. The other men were already walking off with a girl\u2014in some cases two\u2014on their arm. Marshall saw the thin American had his arm around Vasya, the model with the amazonian figure Marshall had seen pictures of on Chris's iPad. She was nearly a full head taller than the man walking next to her.\n\nOne girl remained. In contrast to the other leggy blonde bombshells she was short, maybe not more than five-two or five-three. Her ginger hair stood up in spikes. She was also ginger below, Marshall noticed with a flash of embarrassment. Unlike her wild hair, her muff was short and neatly trimmed. While not as amply endowed as the other girls, her figure was still slender and attractive in a more naturally proportioned way. She seemed nervous. She fidgeted\u2014crossing and uncrossing her legs\u2014as she stared at the floor. As Marshall approached she looked up and\u2014\n\nWow! Those were the biggest, greenest eyes Marshall had ever seen.\n\n\"Hi, welcome to G\u00e0rradh-Sionnach,\" she said in a lilting Scottish accent.\n\n\"Hi,\" Marshall replied.\n\nIf she was Russian she'd spent a very long time up in the Highlands.\n\n\"If I'm not what you're after, I can arrange something with the other girls. They're not supposed to take a second girl until everyone has had a pick,\" she said, motioning to the men walking away to the cabins.\n\n\"Well, actually, there's been a misunderstanding. My therapist sent me up here because she thought G\u00e0rradh-Sionnach was a nudist camp.\"\n\n\"Oh!\" the girl suddenly brightened up. \"You must be O'Neil. Inari said to look out for you.\"\n\n\"Inari knows what this place is?\"\n\n\"Oh aye,\" the girl said. \"She comes up to visit two or three times a year. She likes hunting in the forests around the loch.\"\n\n\"Inari likes hunting?\"\n\nThat was a surprise to Marshall. In the office Inari seemed so...imperious. What interest could blood sports hold to a sophisticated woman like her? Marshall realised he didn't know his therapist as well as he thought he knew her.\n\n\"I'm Kath,\" the girl said. \"Let me show you to your room.\"\n\nShe led him to one of the plain little wooden cabins.\n\n\"She doesn't entirely approve of our other activities, of course,\" Kath said.\n\nShe opened the door and Marshall's mouth dropped open. From the outside it might have looked like a plain little wooden hut, but on the inside it looked like a room from a luxurious five-star hotel. A massive double bed with fluffed up pillows and snug-looking duvet stood in the centre of a spacious bedroom. The walls were adorned with suggestive pieces of art and the lamps were dimmed to give the room an intimate level of illumination.\n\n\"I can't afford this,\" Marshall said.\n\nKath shrugged. \"It's already covered,\" she said.\n\n\"I can't afford my therapist's bill for this,\" Marshall amended.\n\nKath laughed. \"Inari and G\u00e0rradh-Sionnach go way back. You get the special rate.\"\n\nMarshall stepped into the room and looked around. This was certainly a lot better than his poky little bedroom down in Altrincham. What was Inari playing at?\n\n\"Relax,\" Kath said. \"I'm sure Inari had a really good reason for sending you up here. She's good at spotting what people need.\"\n\nOr, like Figg had said, she was in need of a therapist of her own, Marshall thought. He started to shrug off his backpack.\n\n\"Here, let me help you with that.\"\n\n\"Hey wait, it's...heavy.\"\n\nDespite her slight figure, Kath didn't seem bothered by the weight at all. She caught his surprised look.\n\n\"I'm a proper Highland lass,\" she said, \"they make us out of iron girders and steel springs up here.\"\n\nShe put his bag down next to the bed.\n\n\"Well...\" she said.\n\nShe mimed gripping a top and pulling it up over her head. Marshall understood what she meant. She wanted him to take off his clothes so he was naked like her. Marshall gripped the bottom of his hooded top.\n\nKath smiled and nodded. She really had the loveliest eyes.\n\nMarshall couldn't do it. His knuckles went white as he clenched the bottom of his top, but his hands refused to obey his instructions to move upwards. His top might as well have been welded to his flesh. He gave Kath an apologetic smile and took his hands away.\n\n\"Maybe later,\" he said. \"Got to build my confidence up first.\"\n\nKath cocked her head and gave him a questioning glance. Then a light binged in her eyes and understanding dawned.\n\n\"You dinnae have to worry about that at all,\" she said. \"G\u00e0rradh-Sionnach is for your pleasure. It's a lovely afternoon, how about some drinks by the loch?\"\n\nSounded good.\n\nMarshall nodded.\n\nKath took his arm and led him, still fully clothed, out of the luxurious cabin.\n\n\"I'll have you out of those clothes by the end of the weekend,\" Kath said to him.\n\nThey walked past another cabin and Marshall heard loud sighs and grunts coming from within. He blushed. A couple were having noisy, uninhibited sex.\n\n\"They didn't waste any time,\" Kath said.\n\n\"I guess not,\" Marshall said.\n\nInari, what have you gotten me into?\n\n\"That'll be Ludmila,\" Kath said. \"He'll be regretting his choice come the end of the weekend, mark my words. She's totally insatiable. Most of the laddies can barely walk after a few days with her.\"\n\n\"I don't understand how this place can exist,\" Marshall said. \"I thought...\" he wanted to say brothel \"...these kinds of places were illegal in Britain.\"\n\n\"They are, technically,\" Kath said. \"The local authorities turn a blind eye. None of the girls here are abused, coerced or trafficked. They're here out of their own choice and we're far enough out of the way not to bother anyone. The local church over in Caraid-Faol wasn't so happy about us, but then we paid to have the church building repaired after it was damaged in a storm. Folks in these parts are pragmatic. As long as we're contributing to the community and not disturbing the normal folk, they're happy to let us carry on doing what we do.\"\n\n\"Sounds sensible enough,\" Marshall said. \"What people get up to behind closed doors is no one's business but their own.\"\n\n\"Oh good. So you'll have no objection to me fucking your brains out later then.\"\n\nMarshall flared bright red.\n\nKath slapped him playfully on the ass.\n\n\"I'm only winding you up,\" she said. \"I know Inari has sprung this on you out of the blue. You don't have to do anything you don't want to. Think of it as a relaxing weekend in picturesque surroundings...\"\n\nPicturesque was right. It was beautiful. They turned the corner around the main building and Marshall thought he'd stepped right into a picture postcard. The clear waters of the loch stretched off into the distance. Dark green fir trees covered the slopes leading up on each side of the lake. The view was completely unspoilt\u2014no sign of any kind of human taint, not even a solitary telegraph pole.\n\n\"...but I will have those clothes off you before the weekend is done,\" Kath said with a playful twinkle in her bright green eyes.\n\nThey stepped onto a stretch of pine decking that led to the water's edge. Sun loungers were laid on the wooden planks and gave a perfect view over the crystal waters. A sun lounger was not a piece of furniture Marshall would have normally associated with Scotland, but on a day like this it was perfect.\n\n\"What do you want to drink?\" Kath asked.\n\n\"A beer is fine,\" Marshall replied.\n\nHe settled into one of the chairs. What a fabulous view, he thought.\n\nThe close-up scenery was pretty damn fine as well, Marshall thought as he looked at the perfectly sculpted and completely naked bodies of the other girls as they lounged in the sun or played in the water. The view was spoilt a little by the naked bodies of the other men. A couple of the bankers looked in reasonable shape\u2014they had the hard compact bodies of men that trained regularly at the gym\u2014but they were the exception and still nowhere near being in the same league as the girls. That was kind of the point, Marshall supposed.\n\nFigg was corpulent, pasty-white and very hairy. The American looked like he'd been wired together out of stressed bones and taut sinews\u2014gaunt and overwrought. If they could expose their unflattering bodies to the world, why couldn't he? Marshall thought.\n\nHe felt hot breath on his ear. Moist lips closed around his ear lobe and sucked. He thought it was Kath coming back until the girl spoke in a husky Russian accent.",
        "\"I didn't see you come off the bus.\"\n\nThe girl's hands gripped his shoulders and began to knead the flesh underneath. The soft flesh of her breasts pressed against the back of his head. There felt like an awful lot of it. Her hands rubbed down his front, searching for the bottom of his hooded top.\n\n\"It's not fair keeping yourself all wrapped up like this. It's a beautiful day.\"\n\nMarshall pushed her arms off and jumped up out of the seat, surprising the girl behind him. She didn't take too kindly to it. Marshall turned and saw a gorgeous platinum blonde with a face and figure Marshall didn't think existed outside of the airbrushed pages of glamour magazines. Shock and anger flared in her blue eyes and her face wrinkled up with contempt.\n\nKath returned with two bottles of beer. The blonde turned and spat something at her in what Marshall presumed was Russian. He was even more surprised when Kath replied in the same language. Russian sounded very odd when spoken with a broad Scottish accent.\n\nThe blonde's face softened. She asked Kath something. Kath nodded. The blonde nodded back. She turned back to Marshall, all smiles now.\n\n\"I'm sorry, I didn't realise you were one of Miss Kitson's,\" she said. \"I'm Maruska.\"\n\n\"I think it's my fault. I didn't mean to jump up and startle you like that,\" Marshall said. \"I'm a little self-conscious about exposing my body. It's why Miss Kitson sent me up here. I think.\"\n\n\"Och aye,\" Kath said. He needs to let the Highland wildness soak into him and flush out some of those inhibitions.\"\n\n\"I'd like very much to help with flushing out...those inhibitions,\" Maruska said with a highly suggestive gleam in her eyes.\n\nMarshall blushed. The girls were very direct in these parts.\n\nKath noisily cleared her throat. \"Mine,\" she said.\n\n\"Don't be so territorial, Kisa,\" Maruska said. \"That's his choice. Why should he restrict himself to playing with the runt of the litter, especially when we have so much more for him to play with?\"\n\nMarshall's Adam's apple bobbed up and down as Maruska cupped her hands under her breasts and smooshed them together. It was involuntary. Her boobs were natural and very large.\n\nKath sniffed. \"I have my own talents. Some of us can get by just fine without having a pair of zeppelins attached to our chest.\"\n\n\"Ooh, she's so catty sometimes,\" Maruska said to Marshall with a wink.\n\n\"Shouldn't you be somewhere else,\" Kath said. \"Like catering to the needs of your guest.\"\n\n\"My sister is keeping him occupied,\" Maruska said. \"I doubt he's even noticed I'm not there.\"\n\nThe man was occupied, Marshall saw. He was lying on a sun lounger with a girl that was almost a carbon copy of Maruska lying on top of him. Even if Maruska was still with him, he wouldn't be able to see her as his face was currently buried deep in the equally generous cleavage of her sister.\n\nSomeone called out Kath's name. Marshall saw it was the tall girl with amazonian proportions, Vasya.\n\n\"Two vodka cranberries,\" she ordered.\n\n\"Right away,\" Kath said, placing the beers on a small table before rushing back to the bar.\n\nMarshall was left alone with Maruska.\n\n\"You're lucky,\" Maruska said. \"Most men are too stupid to give her a second glance,\" she glanced over to where Kath had disappeared in the direction of the bar. She leant forward and whispered in Marshall's ear. \"She's a real wildcat in bed.\"\n\nMarshall's blushed deepened.\n\nMaruska's expression suddenly changed, became serious. \"Stay close to her,\" she warned.\n\nIt was an odd moment\u2014a strange bubble of gravity on an otherwise frivolous summer afternoon. Marshall felt like a cloud had passed in front of the sun, causing a sudden drop in temperature. The trees around the lake seemed to loom. No longer picturesque, it felt like he was alone, isolated; stranded in a wilderness far far away from any kind of human comfort.\n\nThen it passed as quickly as a summer cloud scudding out from in front of the sun. Only there weren't any clouds, just a deep blue expanse stretching right up into the calm heavens. Marshall shivered. Where had that come from?\n\nHe watched as Maruska, all giggles now, rejoined her sister.\n\n\"Sorry about that,\" Kath said as she returned from her errand for Vasya. \"I normally end up being the one who has to fetch all the drinks.\"\n\n\"How did you end up here?\" Marshall asked. \"You don't seem like the others.\n\n\"You're not Russian,\" he added hastily. He didn't want her to think he was disparaging her appearance. Which he wasn't. Couldn't. She might not have the big busts, silky blonde hair and long legs of the others, but she was beautiful in her own, different way.\n\nThat face for starters. So expressive. And her eyes. Marshall had never seen anything like them before.\n\n\"I turned up on the doorstep one day and they took me in,\" Kath answered. \"A stray, that's me.\"\n\n\"Seems like an odd place to end up,\" Marshall said.\n\n\"Suits me perfectly,\" Kath said. \"You don't need to worry about whether I enjoy the work or not. I'm a rabid nymphomaniac. If you don't defrost I'll be jumping the bones of one of the other men before the weekend is out.\"\n\n\"Nymphomaniac?\"\n\nKath stared back at him with her big green eyes.\n\n\"Classic,\" she said.\n\nMarshall laughed. \"If you have an uncontrollable urge for sex I suppose it makes sense to get paid for it,\" he said.\n\n\"Of course,\" Kath said. \"Like I said, we're a practical sort up here.\"\n\nShe clinked her bottle against Marshall's.\n\n\"Na zdorovje.\"\n\nMarshall took a swallow. Good stuff. Rich. Strong flavour. He looked at the label and saw the picture of a medieval abbey.\n\n\"Belgian Trappist monks,\" Kath said. \"No finer brewers on God's green earth.\"\n\n\"Amen to that,\" Marshall said, clinking his bottle back against hers.\n\nThey lay on the sun loungers and watched the other men and women splash around in the clear waters of the loch.\n\n\"Not interested in taking a dip? You'd have to take that off first,\" Kath said, referring to his hooded top.\n\nStrip off here? In front of everyone? Not a chance, Marshall thought.\n\n\"Maybe later,\" he said.\n\n\"Don't blame you,\" Kath said. \"I can't stand water. More beer?\"\n\nKath came back with more beer. She told him stories of her youth in an out-of-the-way Highland village. She'd always been a wild child, she'd said, but once she hit puberty her sex drive went through the ceiling. Then had followed a whole series of misadventures\u2014some funny, some not so funny\u2014involving sex and boys. In return Marshall told her stories about some of his escapades while he'd been an active member of the fire service. Talking to her was easy. It didn't feel professional, even though he knew it was. It was like having a pleasant conversation with a nice girl down at his local pub, a girl\u2014in Kath's case\u2014who also happened to have an extremely saucy sense of humour.\n\nMarshall had been here before. It always went well...until he took off his top.\n\nWhich was why, apologetic, he left her at the door of his cabin when he retired for the night. Nymphomaniac or not, Kath didn't seem to take any offense.\n\n\"Don't worry. I'll have you out of those clothes before the weekend is out,\" she said, giving him a little wave and then padding off into the night.\n\nSmiling, Marshall shook his head and closed the door behind him.\n\nInari, Inari, he thought as he looked around the room. What have you got me into? He took in all the luxurious fixtures. Oh well, he might as well enjoy it now he was here. He was unlikely to find himself in surroundings as opulent as this ever again in his lifetime. Heaven knows how Inari had wrangled it.\n\nHe was in the middle of undressing when he heard a soft bump from above him. It sounded like something was on the roof. Must be his imagination, or the wood settling. He slipped into the large and extremely comfortable bed and thought nothing more of it.\n\nSometime in the night he dreamt he heard a wolf howl.\n\n* * * *\n\nMarshall was coming out of the shower the next morning when a tap on the small bathroom window made him jump. He hurriedly covered himself up with a bathrobe.\n\n\"Sorry, didn't mean to make you jump,\" Kath said, her face framed with her hands as she attempted to peer through the fogged up glass. \"It's a beautiful morning. Do you want to join me for a walk up in the hills?\"\n\n\"Sure. Let me get some clothes on first.\"\n\n\"Oh, you don't need those,\" Kath called out as he headed back to the main bedroom.\n\n\"Yes, I do,\" Marshall called back.\n\nA few moments later, Marshall left the cabin and walked out into a lovely summer morning. Kath was waiting for him, naked of course. Without the other girls around, it was easier to notice what a good figure Kath had\u2014athletic and well-proportioned rather than sluttily curvaceous. Her face, with its big green eyes and irrepressible smile, was what attracted Marshall most to her. The Russian blondes might have figures right out of the pages of Playboy or Penthouse, but Kath was the girl you turned to for a fun night on the town.\n\nHe noticed her nakedness extended to her feet. She wasn't wearing any footwear.\n\n\"Is that all right?\" he asked, looking at her feet. \"I thought we were off on a hike up in the hills.\"\n\n\"Oh, aye,\" Kath said. \"Iron girders and steel springs, remember.\"\n\nMarshall shook his head. Crazy girl.\n\nThey walked past the neighbouring cabin and again Marshall heard loud moans and sighs emanating from inside.\n\nKath shook her head.\n\n\"Insatiable, I told you,\" she said. \"That's going to be one sore laddie by the end of the weekend.\"\n\nShe mimed a John Wayne bow-legged walk and Marshall laughed.\n\nThey left the camp and followed a path up through the trees and out onto a wide expanse of heath. The view was breath-taking. Marshall saw green hills dusted with pink clouds of heather rolling away into the distance. Below them, through the trees, lay the glittering waters of the loch, sparkling with reflected sunlight like the discarded mirror of some ancient Highland deity. Marshall couldn't see a single sign of human habitation. Even G\u00e0rradh-Sionnach was hidden from view by the trees.\n\n\"Caraid-Faol is over there, somewhere,\" Kath said, pointing in the direction of the horizon.\n\n\"Isolated,\" Marshall said.\n\n\"That's how we like it,\" Kath said. \"We don't bother anyone and they don't bother us. Really convenient considering our business requires regularly throwing some truly depraved parties.\"\n\n\"You can't annoy the neighbours if there aren't any,\" Marshall said. He thought back to his little box of a home, on a street packed with other similar boxes, and felt pangs of envy.\n\nThey stopped by a small tor of grey stone. Kath plucked a sprig of pink heather from one of the nearby bushes and ran it under her nose. She sighed.\n\n\"You need to join me for a frolic in the heather,\" she said, her green eyes glinting mischievously.\n\nMarshall glanced over the lush vegetation carpeting the hills.\n\n\"Would that be a euphemism for something else?\" he asked.\n\nKath smiled. \"No trip to G\u00e0rradh-Sionnach is complete without a good frolic in the heather. But\u2014\" she held up a finger \"\u2014frolicking is not permitted unless both parties are completely naked.\"\n\n\"Is that right,\" Marshall said, a wry smile on his lips.\n\n\"That's the rule,\" Kath said, putting on an expression of mock seriousness.\n\nShe cocked her head and glanced behind her at the open expanse of lush heath.\n\n\"So?\" she said.\n\nFuck it, Marshall thought. Why not. He was single. She was attractive and\u2014most importantly\u2014he really liked her.\n\n\"Sure.\"\n\nHe reached down and gripped the bottom of his top. All he had to do was pull it up. Easy.\n\nHe looked at Kath's smiling face. He pictured it twisting up in an expression of pity and revulsion.\n\nNo, no, dammit!\n\nHis hands stopped moving.\n\nHe willed them to keep going, to grip the fabric and lift it up over his head. They disobeyed him. The top might as well have been bonded to his skin, as part of him as the shell of a tortoise, stuck to him forever and ever until he died, rotted and even then it would remain part of him, fused irresistibly to his mouldering bones. The fabric could have been weaved from iron and weighed a ton. His trembling hands couldn't move it at all.\n\nCrestfallen, he looked at Kath.\n\nShe came up next to him, put an arm around him and rested her head against his chest. Marshall stood there, his ineffectual hands still clutched around the base of his top. He watched crows wheel through the upper branches of conifers lining the loch.\n\n\"Sorry,\" he said.\n\nKath gave him a tender squeeze.\n\n\"Tomorrow?\" she said.\n\n\"Tomorrow,\" Marshall confirmed.\n\n\"Promise?\"\n\n\"Promise.\"\n\nKath looked up at him, her green eyes flecked with steely resolve.\n\n\"I mean it,\" she said. \"Even if I have to get you really drunk and I really hate getting the laddies really drunk as you wouldn't believe how difficult that makes my job.\"\n\n\"Promise,\" Marshall laughed.\n\nInstinctively, he picked her up and started to carry her back down the path. A relic from his old days. He regretted it immediately and had to put her back down after a few paces. His breath dried up to short gasps.\n\n\"Are you okay there?\" Kath asked.\n\n\"Yeah,\" Marshall waved her away as he doubled over to get his breath back.\n\n\"I should be carrying you,\" Kath laughed.\n\nMarshall laughed with her.\n\nOnce he'd got his breath back they resumed their walk back down to the camp. In the middle of the woods Marshall was startled as an orange streak dashed across the path in front of them.\n\n\"Hey Tom, what are you so skittish about?\" Kath called out.\n\nShe crouched down and held out her hand.\n\n\"Get over here, you silly old moggy.\"\n\nAn orange face with green eyes popped up out of the undergrowth on the side of the path. It stepped back onto the path and Marshall saw the face belonged to a big ginger tomcat. The cat was a little larger than the average house cat and looked lean and wiry. It came up to Kath and, purring, rubbed its head up against her hand.\n\n\"You don't see many of them around nowadays,\" Kath said. \"They normally like to keep away from folks.\"\n\nMarshall was confused. \"It's a cat.\"\n\n\"Scottish wildcat,\" Kath corrected. \"They're a different species. The scientists think they're endangered\u2014too much interbreeding with the domesticated cat. Misses the point. Real animals don't care what fancy Latin name they are. As long as they're fucking and making babies, they're winning.\"\n\nShe rubbed under the cat's chin.\n\n\"The scientists worry about the wildcat being replaced by the domesticated cat. I see it the other way around. It's putting a bit of wild back into the domestic.\"\n\nThe extra meaning wasn't lost on Marshall.\n\n\"You really have a one track mind,\" he smiled.\n\nKath winked. \"I did tell you I was a nymphomaniac.\"\n\nThey left Tom to his secretive pursuits and walked back down to the camp.\n\n* * * *\n\n\"Still fully clothed, eh?\" Figg said to Marshall as they sat out on one of the tables by the loch, drinking beer and enjoying the afternoon sunshine.\n\n\"I don't think I'm cut out for this nudism lark,\" Marshall said.\n\nFigg shrugged. \"You should let yourself relax and enjoy the view.\"\n\nThe fat banker leered at the naked girls splashing around in the clear waters of the loch in front of them.\n\n\"What a place,\" he said. \"What girls.\"\n\nThe banker continued to ogle the naked girls. So did Marshall. He'd have needed to be gay, or castrated, not to.\n\n\"Hey, you don't have to spend the whole weekend with the waitress,\" Figg said. \"You can borrow one of mine for a night if you want.\"\n\n\"Uh, thanks, but I'm okay.\" Marshall turned him down politely.\n\n\"Really? You'd be doing me a favour. They're insatiable in bed. Complete animals. I'm not even sure my heart will make it through the next two nights.\" He followed up with a deep belly laugh.\n\n\"That's what too many vindaloos and expensive German beer will do to you,\" Chris, sitting across the table from them, said.\n\nA hush descended on the side of the loch. Vasya had arrived. She padded out across the boards like a queen, moving gracefully on long, rangy legs. The American followed on her heels like a faithful toy poodle.\n\nChris was entranced.\n\n\"You're not still thinking about that amazonian totty?\" Figg said.\n\n\"Have you ever seen a body like that?\" Chris whistled.\n\n\"Shame that Yank has already snaffled her up. Man who thinks ahead.\"\n\nChris looked at the skinny American.\n\n\"He's just a computer nerd,\" he said disdainfully. \"I bet he barely breaks six figures.\"\n\nChris's lips turned up and his eyes went crafty.\n\n\"You know, I reckon she might be amenable to a trade-up. I think it's about time our American friend was introduced to the ancient English tradition of gazumping.\"\n\n* * * *\n\nLater that afternoon Marshall saw Chris sitting in the Jacuzzi with his arm around Vasya. A broad smile was on his face. He looked like a big fat cat with the world's biggest bowl of cream. The American was lying on a sun lounger on the other side of the decking. He pointedly refused to look anywhere near the direction of the Jacuzzi.\n\n\"Oh dear,\" Kath said. \"I think someone isn't too happy about losing the alpha. Never mind, I'm sure Yekaterina will help to take his mind off her.\"\n\nMarshall wasn't so sure about that. Most men of the American's appearance would be overjoyed to find themselves lying next to the statuesque brunette he was, but not the American. His thin lips were twisted up in a scowl that indicated he wasn't accustomed to coming second in anything and didn't like it at all.\n\nMarshall was happy enough to spend time in Kath's company. She was beautiful, sexy, fun and great to be around. He couldn't ask for more, not at all. As the sun set over the loch they shared more stories of past adventures and misdemeanours. Marshall had plenty of stories from his time on the fire service and it sounded like Kath had a cut a swathe of sexual impropriety across the whole of Scotland.\n\nAs they returned to his cabin, Marshall toyed again with asking her in. He wanted to, he really wanted to...\n\nKath stood there patiently and didn't attempt to force his decision either way.\n\n...but he couldn't.\n\n\"Sorry,\" he said.\n\n\"That's fine,\" Kath said, \"But\u2014\" that finger came up again \"\u2014tomorrow is the last night. If you don't ask me in, I may be forced to break the door down.\"\n\nMarshall looked at her pint-sized body.\n\n\"Iron girders,\" Kath said, flexing a bicep.\n\n\"Okay, okay,\" Marshall laughed. \"Tomorrow.\"\n\n\"Just so we're clear,\" she said, wagging her finger.\n\n\"Perfectly.\"\n\nSatisfied, Kath padded off into the night.\n\nIdiot, Marshall thought as he walked into his cabin, alone. He looked at the luxurious bed and shook his head. Poor Inari, he really wasn't making best use of what had to be an extremely expensive weekend. He took off his clothes and climbed into bed. He ran his hand over the empty space next to him. He wished Kath was there. He wished he had the courage to ask her. He wished he had the courage to let her see this. He ran his hand over the rough skin of his side.\n\nWhat a mess you are, Marshall thought as he drifted off to sleep.\n\nSometime in the night he thought he was woken by strange animal cries, but by morning he'd put it down to a dream.\n\n* * * *\n\nMarshall surfaced a little after noon on the next day. There was a strange air in the camp\u2014a kind of eager, furtive anticipation. The others weren't even attempting to be discreet anymore. They fucked right in the open, heedless of who might be watching. There was a frenzied quality to the coupling Marshall witnessed, as if they knew this was the last day and they were determined to extract the maximum value from it. Marshall wasn't a prude by any means, but even he found the scenes of wanton abandon a little off-putting.\n\n\"Still fully dressed,\" Figg observed as Marshall sat down for breakfast at a table overlooking the loch.",
        "\"Yep,\" Marshall replied.\n\nOver in the Jacuzzi Vasya thrashed her body against a largely passive Chris. Both grunted their pleasure.\n\n\"I never thought there could be a thing as too much sex,\" Figg said to Marshall. \"Those girls might be the death of me. You sure you don't want to take one off my hands for the afternoon?\"\n\n\"Nah.\" Marshall shook his head.\n\n\"Your loss,\" Figg said.\n\nFigg's girls, Maruska and her sister, came over and, giggling, took Figg by the arms and led him over to a large inflatable mattress lying on the decking. The middle-aged banker lay down on his back while Maruska straddled his groin and her sister sat on his face. It didn't take long for both sisters to be bouncing up and down in unison, their loud moans rolling over the pristine waters of the loch.\n\nMarshall left his plate and went to look for Kath. The camp was starting to resemble the set of a porno movie. Marshall didn't mind porno's, it was just a little weird to find himself in the middle of one. He felt far more comfortable once he and Kath had walked up through the woods and to the flat rocks overlooking the mirrored surface of the loch.\n\nThey talked some more about their pasts. He made her laugh as he told her of some of the more unorthodox jobs a fireman was expected to do.\n\n\"These stories all sound like they belong to a big strapping boulder of a laddie.\" Kath's green eyes were suddenly serious. \"What happened, if you don't mind me asking?\"\n\nMarshall grimaced. He'd known this question would come, it always did.\n\n\"There was an accident,\" he said. \"A warehouse fire. We shouldn't have gone in, the structure wasn't safe, but we'd been told there were some children inside. They'd snuck into the old building to play and were trapped on the second floor.\n\n\"The structure wasn't safe. A floor gave out underneath me. I crashed out of a side window and impaled myself on some iron railings below. I thrashed around on those for a while, the fire slowly roasting the left side of my body.\"\n\nKath gave a sharp intake of breath.\n\n\"The burns were bad but not fatal, and they managed to cut me down before I bled to death. Unfortunately one of the railings had punctured my intestines and spread fecal matter through my body cavity. I was laid up on a hospital bed while peritonitis ate me alive from the inside. I was lucky I was a big strapping lad. There was so much of me the bugs couldn't eat all of it before the doctors finally flushed them out of my system.\"\n\nMarshall gave Kath a sardonic smile.\n\n\"They left behind the slimline version of me you see today. That which doesn't kill you does not always make you stronger.\"\n\n\"The children?\"\n\nMarshall looked at the floor. \"Dead. Smoke inhalation. Probably long before we even reached the building. Not all sacrifices are heroic. Some are pointless wastes.\"\n\n\"Don't be silly. You couldn't have known. It's the intent that matters. That makes you a hero.\"\n\n\"Or an idiot.\"\n\n\"They're kind of the same.\"\n\nKath looked at him with bright green eyes.\n\n\"So that's why you won't take that top off. Show me.\"\n\n\"I thought you'd brought me up here to have sex,\" Marshall said. \"It really isn't going to help the mood. I picked up third degree burns all down my left side and had several inches of iron rammed through my guts. It's not a pretty sight.\"\n\nHe put his hands on the bottom of his top, but made no move to lift it.\n\nKath rolled her eyes. \"Look, if I scream or pull a funny face you have permission to toss me into the loch, and you know how much I hate water.\"\n\n\"I'll hold you to that,\" Marshall said.\n\nHe lifted up his hooded top and the T-shirt underneath and rolled both up over his head.\n\nKath didn't pull a funny face. Neither did she scream or gasp. She also didn't stare at him with pity, for which Marshall was grateful. He hated the pity more than anything.\n\nShe leaned forward and traced a finger along the twisted scar tissue running across his abdomen. Her hand glided up the rough surface of his left side and up onto his shoulder, where his flesh resembled wax that had melted and solidified back into a twisted facsimile of the original form.\n\n\"You know, some people might see all this as a massive turn on,\" Kath said.\n\nMarshall raised his eyebrows.\n\n\"Really,\" Kath said.\n\nShe looked down at his crotch.\n\n\"Now you've shown me the worst of it, there's no excuse to keep those trousers on, unless you have a pathological aversion to showing your naughty bits to members of the opposite sex.\"\n\n\"It's fine,\" Marshall laughed.\n\nHe pulled down his trousers and the underpants beneath. Finally, after two days and nights, Marshall was nude in a nudist camp.\n\n\"What now?\"\n\n\"Now...\" Kath started. \"You chase me through the heather,\" she said in a breathless rush as she sprang off the rocks and dived into the waist-high heather.\n\nLaughing, Marshall jumped off and gave chase. He felt as exhilarated as an eager sixteen-year-old as he charged after her, if not quite as mobile. He doubted he'd have caught her in his prime. She was as fast and as agile as a cat.\n\nIn the end she caught him\u2014crouching down to hide and then pouncing on him as he blundered by. Together they rolled through the undergrowth and Marshall's nostrils were filled with the fresh scents of new growth. They gambolled like giddy teenagers until Marshall noticed the sun dropping below the horizon.\n\n\"Shouldn't we head back?\"\n\nMarshall was concerned about navigating the path back through the woods in the dark.\n\n\"There's no rush,\" Kath said. \"If you check the picnic hamper you'll see I packed a torch for this very purpose. And some other things...\" she added with a wicked smile.\n\n\"You plan ahead,\" Marshall said.\n\n\"I did say you weren't leaving until I'd jumped your bones,\" Kath said, tickling his nose with a sprig of heather. \"You might as well surrender to your fate.\"\n\n\"I don't think I have any choice in the matter.\"\n\nKath looked up at the sky. A strange expression swam across her face, but it was gone as quickly as it had appeared.\n\n\"Oooh. How inconvenient.\" She stood up. \"Excuse me for a moment. I have a call of nature to attend to. I'll be right back.\" She held up a wagging forefinger. \"Don't you be going anywhere.\"\n\nMarshall had no intention of going anywhere. Smiling, he lay back in the heather and watched as the sun dipped below the horizon. The moon came out\u2014big and full\u2014and bathed the hills in silvery light.\n\nHe'd invite Kath back to his room tonight, he decided.\n\nA cry from the woods below jerked him upright. Not Kath. Too deep. More a bellow. One of the Londoners, possibly. Maybe they'd wandered into the woods and\u2014in the gloom\u2014lost their footing and fallen into a hollow.\n\nThe cry came again. Pain and fear. A bloodcurdling scream.\n\nFallen and hurt themselves. Badly.\n\nMarshall felt a sympathetic twitch along the wounds in his abdomen. He knew all too well how easily the human body came apart, and how much it hurt when it did.\n\nHe rushed to the basket Kath had left on top of the rocks. She'd said there was a torch in there. Under the ghostly light of the moon, Marshall fumbled around the basket until his hand closed around something long and cylindrical. He found a switch and turned it on. Something glinted at the bottom of the basket. Marshall realised it was the foil wrappers of condoms, maybe ten or more...\n\nGood Lord, Kath, Marshall thought with a smile. What do you think I am?\n\nUsing the torch to light the way, Marshall rushed back down the path as fast as he felt safe enough to manage. Reflexively, he went for his phone and then remembered he'd left it in his room. G\u00e0rradh-Sionnach was so remote it was little more than an alarm clock up here anyway.\n\nIsolated, poor communications; this was a bad place to have an accident.\n\nMarshall paused on entering the woods. He tried to pinpoint where the cries had come from.\n\nThis direction.\n\nHe stepped off the path and onto a carpet of pine needles. He was thankful his nudity hadn't extended to taking his trainers off. Not everyone was made out of iron girders and steel springs.\n\nHe made his way over the ground carefully. No sense twisting his ankle over a hidden root while rushing to the rescue.\n\nHe nearly did so anyway. His foot went through a thin carpet of discarded pine needles and into a root hollow. He stumbled and placed a hand against the nearest tree trunk to steady himself. His fingers brushed against something wet and sticky.\n\nHe brought his hand back and checked his fingers in the light of the torch. Red.\n\nBlood?\n\nHe shone his light on the trunk and saw a glistening stain.\n\nLarge. Fresh.\n\nHad the man tripped and banged his head against the trunk? The ground was uneven.\n\nMarshall didn't think so. It was a large stain. A man tripping and banging his head could have made it, but he wouldn't have been able to cry out, not twice. He'd have been knocked cold.\n\nHairs rose up all over Marshall's body. His heart thudded in his chest.\n\nThere was a thick tang in the air. Marshall had smelt it before, when it had felt like gallons of blood were pouring out of his punctured body as he'd thrashed on those iron railings like a speared fish, and had hoped never to smell it again.\n\nWhat had happened here? Was the American unbalanced enough to decide to settle his grievances in a more violent manner? Marshall thought he looked the kind of man that didn't like settling for second place, but surely he wouldn't have gone this far.\n\nCautiously, Marshall made his way down into a small pine needle-laden clearing. He swung his torch beam from left to right. There were more dark patches\u2014blood spatters\u2014on the carpet of green needles. Marshall's unease grew.\n\nLow sounds disturbed the silence beneath the dark trees. Grackly, crunching sounds; like the sounds a dog might make while chewing on a bone.\n\nMarshall's shoulders lost some tenseness. A dog or dogs must have brought down a wild animal. Probably a deer from the size of it.\n\nThose cries had sounded so humanlike.\n\nScotland didn't have any wolves, did it? No accidental escapees?\n\nThe noises stopped. On Marshall's left, just outside the cone of light thrown out by his torch, a dark shape rose up out of the undergrowth. Marshall saw two yellow eyes, glowing in the darkness like gold coins. He would have thought them the eyes of a cat, but they were too large, too far apart. The shape growled\u2014a low, deep rumble.\n\nIn his haste to move backwards Marshall tripped over an exposed root and fell heavily against the base of a tree. He managed to keep hold of the torch and revealed in the light was...\n\n...revealed in the light was...\n\nOh God, what was it?\n\nThe beast was tall\u2014maybe six and a half feet\u2014and stood upright like a man. Initially Marshall even thought it was a man, a wild man wearing the pelts of wolves.\n\nIt had the head of a wolf.\n\nNot a mask, not the lifeless head of a pelt, but an actual breathing, growling head of a wolf. A real wolf. No special effect was this good. The creature bared long canines. Its snout and teeth were stained red with blood.\n\nIt was a werewolf. An actual, real-life, honest-to-goodness werewolf.\n\nHe was about to be killed by a werewolf. In Scotland.\n\nA female werewolf, he realised with shock. Her front was largely free of fur. It/She had a pair of large round breasts surrounded by short, downy grey fur. Good enough for Page 3, was Marshall's detached thought. Below her breasts there was another, circular, patch of naked skin around her navel. Below that her sex was highlighted with a triangle of thick, greyish-blonde fur. Perversely, the folds of her vagina glistened in the torchlight as if she was aroused or had recently had sex.\n\nAs a firefighter, Marshall had rushed into many dangerous situations with scarcely a second thought, but he'd never experienced fear like this before. It was primal and ancient. It felt like a cold hand had erupted from the hard wood behind him and grasped the lower regions of his brain in a clammy fist.\n\nThe monster roared as it stepped into the clearing.\n\nA hissing ball of orange fur fell out of the night sky and landed in the centre of the clearing. Spitting and growling, it positioned itself between Marshall and the werewolf. It looked like a cat, albeit a very large one. Its back was arched and its fur stood up as if it had been electrocuted.\n\nIt also looked strangely familiar, as did the werewolf.\n\nThe werewolf growled\u2014low and menacing. The cat, or the thing that resembled a cat, hissed and raised a claw-tipped paw. Even with all the hairs of its tail sticking out like a brush, the cat was maybe only half the size of the monster. Still, it refused to be cowed.\n\nThe wolf growled\u2014roared\u2014again.\n\nThe cat hissed back. It waved its paw in warning. Marshall saw the muscles flex in the cat's back legs\u2014legs that looked almost human\u2014as it shifted position, preparing to pounce. Fangs bared and painted silver by the moonlight, the two beasts faced each and attempted to stare the other down. Marshall was nothing more than a helpless observer.\n\nThis shouldn't be a contest. The size difference was too great. The wolf was enormous, big enough to swat the other away with ease, but the cat refused to acknowledge the gulf in mass and made up for it in fury. Hissing and spitting, it kept its body between the wolf and Marshall, a claw-tipped paw held out before it like a fencing sword.\n\nIt shouldn't be a contest, but it was the wolf that backed down. It glanced down to the floor and\u2014just like that\u2014the stand-off was resolved. The werewolf dropped down on all fours and padded off into the darkness between the trees, leaving the clearing\u2014and Marshall\u2014to the wildcat.\n\nThe remaining beast turned to face its 'spoils' and Marshall looked on a face that belonged to neither cat nor human and was instead a strange blend of the two. Like the wolf, the cat was naked and possessed a pair of small pink breasts on a front largely free of the ginger fur covering the rest of her body. Somewhere beneath the whiskers, furs and fangs Marshall thought he saw Kath. He didn't think she saw him.\n\nThe cat smiled.\n\nWait, maybe she did\u2014\n\nThe cat pounced.\n\nMarshall screamed as a bundle of ginger fur and claws crashed into him. Her claws were on top of him. Her weight was on top of him. Her teeth were at his throat. Marshall cried out in terror.\n\n\"Oh shut up, you big Jessie.\"\n\nThe voice was unmistakable, right down to the broad Scottish accent. The cat, Kath, nipped him playfully on the ear.\n\nMarshall stopped yelling and thrashing around. He was lying on his back in a clearing covered with pine needles. He looked up and saw...Kath?...astride him.\n\nIt was Kath. Behind the whiskers, the fur, the glowing green eyes; it was her. Her body was covered in soft downy fur. A fluffy ginger tail swished behind her. Beyond her, high above in the clear night sky, Marshall saw the bright silver disk of a full moon.\n\n\"Last night,\" Kath said. Her voice was a little hoarser, had more of an edge, but was still recognisably hers. \"I said I'd jump your bones.\"\n\nShe rubbed her body against Marshall. Despite the strangeness of the circumstances he felt a little erotic shiver run through his body.\n\n\"You're...um...different,\" Marshall said.\n\nThis couldn't be real. He had to be in the middle of a strange, vivid dream.\n\nKath shrugged. \"That time of the month.\"\n\nShe hugged him tightly. Her warm\u2014furry\u2014body squirmed against his. He felt her whiskers brush against his face as she rubbed her cheek against his. The whole time she purred like a...well...cat.\n\nMarshall was startled as he felt a paw cup his balls and give them a naughty little squeeze. She pressed a palm against his crotch and rubbed his penis.\n\n\"Tsk, stupid big-titted Russian bitch,\" Kath said. \"She's gone and near scared it all the way back inside you. We'll have to sort that out.\"\n\nShe shifted position on top of him, turning around until she was sitting on his chest. Her tail\u2014thick and fluffy\u2014swished across his face. She giggled as she used it to tickle Marshall's nose. There was a strong, musky scent in the air. Marshall couldn't identify it, but it had an arousing effect on him. His blood quickened through his veins. In defiance of all the weirdness happening around him, he felt his dick start to harden.\n\n\"Better,\" Kath purred.\n\nShe helped his hard-on along by rubbing it with a paw and waving her ass in front of his face. In between tail swishes Marshall glimpsed the naked folds of her vagina between her legs. The clamshell folds were inviting and surrounded by downy ginger fur. The musky odour thickened and Marshall's quickening heart pumped more blood to his crotch.\n\nKath bobbed down and took his erection between her lips.\n\nWhoa. Her tongue was rough. He felt it pull against his foreskin as she licked up his shaft. The sensation was strange, but also weirdly kinky. Kath wrapped her lips around him and sucked. Marshall's hips, responding to a more primal part of his brain, twitched.\n\nKath released his penis and gave a satisfied purr. She pushed her ass up Marshall's body until her pussy was right in his face. The musky odour was overpowering. Her tail curled around his head like a fluffy boa. Playfully, she batted at his erection like it was a mouse. She bobbed down and gave his glans another lick with her tongue.\n\nKath turned back and smiled. \"I've been waiting all weekend to do this.\"\n\nShe shifted position, moving around to face him. Her green eyes shone with feral delight as she straddled him. She steered his erection between her legs, pressed her hips down and\u2014just like that\u2014Marshall was inside her.\n\nGirlfriends\u2014and sex\u2014had been in short supply since his accident. He'd nearly forgotten how good this could feel. Kath was tighter than the other girls he remembered sleeping with.\n\nAnd a lot more energetic.\n\nShe put paws on his shoulders and braced against him as she bounced up and down. She hadn't been joking when she'd said she was made of steel springs. On and on she bounced up and down on him, sending pulses of pleasure running through Marshall as his dick slid in and out of her tight, moist sheath.\n\nKath panted and yowled as she rode him under the silvery moon. Marshall thought her claws might have sunk into the meat of his shoulder at one point, but his attention was focused on other matters. His body was waking up. Long dormant urges were coming up to the surface. He started to thrust his hips back against her. He bared his own teeth as he bounced her wiry body up and down on him. The velvet folds of her vagina rode up almost past the helmet of his cock with each bounce, before coming back down to engulf his whole length in a warm, silken tunnel.\n\nKath bared her teeth back at him. Her canines were long and formed formidable, pointed fangs. She shifted her paws to his biceps and pinned him to the pine-needle-carpeted ground as she thrust her hips up and down. Marshall's teeth snapped back and he met her hips with powerful thrusts of his own.\n\n\"I knew there was still some wildness left in you,\" Kath growled. \"It needed waking up, that's all.\"\n\nShe rolled and pulled Marshall on top of her. Something\u2014alive, vital\u2014was roaring inside him. He felt it padding through his bones and springing through long-neglected muscles. He thrust into her, driving his hard cock into the soft burrow of her sex. Kath writhed and squirmed beneath him. Her head thrashed as she yowled. A furry leg hooked around his buttocks as she pushed her hips back at him.\n\nHe'd missed this\u2014adrenaline, risk, vigour, life! The exhilaration roared through him and reminded him of his younger self, a man he'd thought had been left behind\u2014skewered\u2014on the railings outside a burning warehouse. It all came back\u2014the energy, the fearlessness, the sheer delight in living for the moment.\n\nToo long behind a desk. Too long drowning in the pitying stares of others.",
        "Her claws raked his back, drawing blood and jolting him deeper into the tight pull of her sex. The pain reinforced his feelings of returning vitality. Uncaring, he howled into the night sky, a beast wearing human skin.\n\nA trembling sensation announced his imminence. Marshall thrust deep into her. Kath wrapped her arms and legs around him and hugged him close. Her vagina quivered around him in ferocious orgasm even as he boiled over and poured his semen into her. As one they howled, their cries racing through the silver-lit trees lining the slopes of the sheltered loch.\n\n* * * *\n\nMarshall woke up and blinked. The sun was shining through the cabin windows and into his eyes. The height of the sun indicated he'd slept through most of the morning.\n\nWhat an odd\u2014extraordinary\u2014dream, Marshall thought.\n\nHe was not alone on the bed. Kath lay next to him, her spiky ginger hair resting on a pillow.\n\nMarshall's head throbbed. Whew, he really must have hit the beers last night, and maybe a few spirits as well. Had they? They must have. She said she'd jump his bones and it had been the last night.\n\nThe last night. Marshall felt a small twinge of regret.\n\nHe flipped back the sheets, got out of bed and padded across to the bathroom. He felt a few twinges of pain all down his back. After relieving himself he walked back into the bedroom and checked himself in the full-length mirror on the wardrobe door. Livid red scratches were drawn down his pale skin.\n\n\"What time is it?\" Kath murmured sleepily from the bed.\n\n\"What did you do to me?\" Marshall asked, looking at the angry red lines on his back.\n\n\"Oh, um, sorry,\" Kath giggled. \"Nymphomaniac. We go a little wild in bed.\"\n\n\"I see.\" Marshall said. He laughed.\n\n\"So we did it?\" he asked.\n\n\"Like beasts,\" Kath said. She bared her teeth and her green eyes flashed.\n\n\"My head feels like I've just gone ten rounds with the Klitschko brothers. My memories are all scrambled. I think I remember, but it's all mixed up with this crazy dream.\"\n\nKath glanced away and smiled.\n\n\"That'll be the Russian vodka,\" she said. \"We get the proper stuff here, not the wussy stuff they let everyone else have.\"\n\n\"Packs a punch.\"\n\nThere was a knock at the door. Still naked, Marshall padded over and opened it. The tall, blonde and extremely busty Vasya was standing in the doorway. Marshall felt an old blast of fear, like an icy wind rushing through him, though he had no idea why. It was only Vasya, and while Marshall had thought her a little aloof and imposing at first, she seemed more subservient and demure this morning. She carried a tray with two plates piled high with eggs, sausage and bacon.\n\n\"The kitchen is closing,\" she said in accented English. \"I thought you might like some breakfast.\"\n\nMarshall was surprised to find he felt ravenous. Normally a big pile of greasy food was the last thing he wanted after a night of heavy drinking, but he devoured the contents of his plate with gusto.\n\nVasya said something to Kath in Russian. Kath shook her head and replied in her Scots-accented Russian that sounded so charming to Marshall. Vasya said some more words. Marshall couldn't understand what they were saying, but it seemed like the taller girl was apologising for something.\n\nMarshall shrugged and tucked into another fried egg. They must have been really active last night, he thought wryly. Steel springs indeed.\n\n\"McCurdy will be here shortly with the bus,\" Vasya said. \"I hope you've enjoyed your time at G\u00e0rradh-Sionnach.\"\n\n\"I have, very much,\" Marshall replied. \"Thank you.\"\n\n\"Typical,\" Kath said with a laugh. \"I finally get you walking around with no clothes on and it's time to leave.\"\n\nMarshall finished his breakfast and packed his things together. Kath put an arm around his waist and they left the cabin. Marshall blinked in the bright sunlight. What a beautiful day.\n\nThey walked to the main building and he finally got to see the occupant of the neighbouring cabin. She was a striking brunette with long wavy hair and a lithe figure. Marshall saw she was bringing out the laundry\u2014a big pile of sheets wrapped up in black bin liners. She looked up and gave him a friendly wave.\n\nMarshall wondered where the London bankers and the American were. They must already be waiting at the bus.\n\nThey passed Maruska. She was scrubbing away at a patch on the stone paving slabs, a bucket of sudsy water standing next to her. Marshall was surprised to see her engaged in such a mundane activity, but then he hadn't seen any cleaners during his time here either. She looked up from her work and gave them a friendly greeting as they walked by.\n\nThey reached the car park. The minibus was already waiting.\n\n\"I'd like to see you again,\" Marshall said. He knew what she was and what she did here, but it didn't matter to him at all.\n\n\"Oh you never know,\" Kath said. \"I'm a stray. One day I might just show up on your doorstep.\"\n\n\"I'd like that.\"\n\n\"No, you wouldn't,\" Kath laughed. \"I'm insatiable. I'd be working my way through all your friends before you knew it, pissing off their wives and girlfriends.\"\n\n\"That's fine,\" Marshall said. \"Just so long as you bring Maruska down with you,\" he added with a mischievous glint in his eyes.\n\n\"Ooh, you.\" Kath slapped him playfully on the ass.\n\nThey shared a final kiss and Marshall lingered over watching as Kath walked away.\n\nMcCurdy was leaning against the side of the bus. The driver was wearing the same traditional tartan regalia and Tam o'Shanter Marshall had seen him in when he'd picked Marshall up at the train station a couple of days ago. The fox-faced man was currently chewing on a cocktail stick. He took Marshall's bag and put it into the back of the bus.\n\nMarshall looked around.\n\n\"Where are the others?\"\n\nMcCurdy gave Marshall a vulpine smile. He used the cocktail stick to pick at a piece of flesh caught between two teeth.\n\n\"They weren't sent here by Inari Kitson.\""
    ],
    "authorname": "manyeyedhydra",
    "tags": [
        "werewolf",
        "werecat",
        "nudist",
        "sex camp",
        "brothel",
        "scars",
        "full moon",
        "furry",
        "scotland",
        "inari kitson"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/iron-girders-and-steel-springs"
}
{
    "title": "Kelsey's World Ch. 37",
    "pages": [
        "New York City comes alive in the springtime. In the evenings, in Central Park, walkers and joggers breathe in the perfumed scent of flowering trees. On morning streets the smell of freshly washed pavement dampens the dawn. Winter is just a gray memory.\n\nMost animals breed in the spring, and humans are no different. After a long cold winter it feels so good to shed those extra layers of clothing. Something as simple as walking down the street becomes an exhibitionist activity, and the voyeurs in a city of eight and a half million are legion. Kelsey and the girls noticed it as soon as they got off the train and climbed Penn Station's steps to 8th Avenue.\n\n\"Damn, girl!\" a young man on the street said, when he saw Kelsey's bra-less tits bobbling under her thin shirt. \"Can I show you and your friends the sights tonight?\"\n\n\"We already got plans, Honey,\" Kelsey said. \"We got three computer geeks to fuck the shit out of.\"\n\n\"You from upstate?\"\n\n\"Yeah.\"\n\n\"You should move here,\" the young man said as he walked away. \"You fit right in.\"\n\nTen minutes of people watching on the street was fun, but the girls started to wonder if Raymond would show up to meet them as expected. A few texts let them know what was happening. \n\n\"You guys, he's stuck at work,\" Kelsey said to the girls. \"He gave me the address and said to meet him at his apartment in a couple hours. He said he'll pay for the cab.\"\n\n\"A couple hours?\" Brie said. \"We could shop, but I don't see anything good around here.\"\n\n\"We could get a drink and ask the bartender,\" Charity said.\n\n\"Let's ask that cute guy in the suit,\" Kelsey said, gesturing at a handsome older man trying to hail a cab. \"He'll know where good stores are.\"\n\nThe four-way at the man's apartment was short, but epic. It was a quick cab ride to get there, and Kelsey was naked moments after arriving. \n\n\"You live alone, Honey?\" she asked, walking casually to the big windows overlooking another building.\n\nHe didn't answer. Kelsey smiled at the stunned look on his face. Brie and Charity tossed the last of their clothes on the pile.\n\n\"Whats your name, Honey,\" Kelsey asked.\n\n\"Will.\"\n\n\"Think you can make three girls cum, Will?\" Kelsey asked. \"I'll give you a hint. It won't be too difficult.\"\n\n\"You're not gonna charge me a thousand dollars when we're done, are you?\" Will asked.\n\n\"No, Honey!\" Kelsey said. \"Is that what the girls do down here? Don't they fuck 'cause they like to?\"\n\n\"Sometimes. But I mean, this isn't what normally happens to me.\"\n\n\"So that's cool then,\" Kelsey said. \"Just enjoy it, Honey.\"\n\nCharity unzipped his expensive suit pants. She had a sexy little smile on her face. Brie smiled, too, when a nice, erect, upturned cock came into view.\n\n\"You're hard as fuck, Will!\" Kelsey smiled. \"This'll be fun! You know guys your age aren't supposed to be as hard as teenagers, right?\"\n\n\"You know guys my age aren't supposed to be in situations like this, right?\"\n\nCharity took the honors of the first mouthful. Will groaned like the luckiest man in the city.\n\n\"Your apartment's super nice,\" Kelsey said, standing casually at the window again. \"Do all the neighbors watch each other?\"\n\nWill looked up from the beautiful sight of Charity's blowjob, amazed that Kelsey was standing naked for all to see. \"I hope they're watching right now,\" he said.\n\n\"We'll give 'em somethin' to talk about, right Will?\" Kelsey said.\n\n\"I...guess so.\" \n\nHe groaned again when Charity swallowed him whole, the first time a woman had done that to him. He watched in disbelief as Brie joined Kelsey at the window, kissing and fondling like lovers who knew every inch of each other. Kelsey assumed a fuck-me position, with her hands on the cool glass, her back arched and her sweet little ass sticking out. She widened her stance and Brie's hand slid through the dirty parts, already slippery and wet with arousal. Will nearly lost it in Charity's mouth when Brie squatted and planted her face between Kelsey's ass cheeks. He could see Brie's tongue lapping at the pink pussy.\n\n\"Fuck yeah!\" Kelsey said, looking out at all the nearby windows. \"This is so hot! You're gonna fuck all three of us right here, Will, so everyone can see. You know that, right?\"\n\nWill's heart raced. Charity took him into her throat again. He was spurting warm white cum when she pulled off.\n\n\"Fuck yeah,\" she said calmly. \"I like this cock.\"\n\nAs he softened in Charity's mouth, Will wondered if he'd get hard again. Three girls? How on earth am I going to satisfy three sexy girls?\n\n\"Bring him over, Char,\" Kelsey said, breathless from Brie's tongue lashing. \"I want him to stick his tongue in me.\"\n\nThey were like magic words. Will's cock stopped deflating and started hardening. Charity helped him out of his clothes and led him by the hand to the window.\n\n\"Lick me, Honey,\" Kelsey said, \"and then fuck me nice.\"\n\nWill's brain went on autopilot. The window and all it's prying eyes blurred to nothingness. He tasted Kelsey's womanly nectar, rose to his feet and fucked her. She was the most perfect female he'd ever seen, let alone had his hands on.\n\n\"Fuck yeah!\" Kelsey purred. \"These fuckin' windows make me wanna move down here! I love this shit!\"\n\nShe revved up quickly into a fuck machine, meeting Will's energetic thrusts with flesh-slapping gusto.\n\n\"Fuck!\" she gasped, as Will's upturned cock tickled her insides. \"Line up everybody. Let him do us all.\"\n\nBrie and Charity giggled as they assumed the same position, one on either side of Kelsey, hands on glass, backs arched low, sweet asses out and ready. Will groaned when he saw the sight, his body thrusting smoothly like a man half his age.\n\n\"Fuck us all, Honey,\" Kelsey said, even more breathless. \"Show us what New York City's all about.\"\n\nWill watched his slippery cock as he pulled it out of Kelsey's perfect pussy, and he stepped behind Brie. She was his type, reminding him a little of his ex-wife when she was young.\n\n\"Oh, shit!\" Brie yelped, surprised at how Kelsey's lube job eased his entry. They were up to speed immediately. \"Oh, fuck! Yeah, that's it!\"\n\n\"Fuckin' hot, right?\" Kelsey said, holding her position. \"I can see people watching.\"\n\nBrie's breathy moans rose to the singing tones Kelsey loved. Will loved it, too. When Brie spotted some of the voyeurs she let herself go, orgasming in soft waves of blurry heat.\n\n\"Yeah, Honey,\" Kelsey said, encouraging Will's energetic thrusting. \"Doesn't she cum nice?\"\n\nBrie's head dropped between her arms and her body slowed and softened. Will pulled out, watching again as Brie's pussy reluctantly let go of him.\n\n\"Charity's waitin' for you, Honey,\" Kelsey said. \"Stick it in me first, on your way.\"\n\nWill felt super-human when he slipped inside Kelsey again. He didn't know why such a crazy thing was happening to him, but he didn't care. His cock was hard and he was doing it. He was fucking three unbelievable hotties in the daylight, in his living room. Charity, she with the ass of asses, she with the throat of throats...she was next.\n\n\"You ready for sweet Charity, Honey?\" Kelsey said, looking over her shoulder at Will's blissful face as he fucked on. \"She's so tight she'll make you hallucinate.\"\n\nCharity giggled.\n\n\"Our audience is growing,\" Brie said, holding her fuckable position with her hands on the window.\n\nWill grunted quietly when he pulled out of Kelsey. He dropped to his knees and licked the slippery cream off her pink pussy.\n\n\"Fuck yeah,\" she purred.\n\nBrie knew Kelsey needed to cum, so she took over for Will, on her knees behind her old friend. Kelsey giggled happily at the smooth hand-off.\n\nWill shifted over to Charity, still on his knees, kissing the perfect curve of her ass, smelling the lovely scent that rose from her two openings. And what openings! Will's mouth went to Charity's beautiful, puffy pussy lips, his tongue cleaving through the slippery wetness, his taste buds erupting with her flavor.\n\nCharity moaned. She watched three men in what looked like an office, not too far away. They were riveted to the action, with occasional comments to each other. She wondered what they were saying.\n\n\"Fuck me,\" she said to Will. \"Fuck me fuckin' hard.\"\n\nWill stood and pressed his way into the tightest pussy he'd ever felt, groaning all the way in.\n\n\"Did I tell ya?\" Kelsey said, breathless again from Brie's tongue.\n\n\"Fffuucck!\" Will moaned, thrusting slow and deep.\n\n\"You heard what she wants, Honey,\" Kelsey said. \"Fuck her hard.\"\n\nCharity's head dropped as she put every muscle in her body to work absorbing Will's pounding thrusts. Her gasping cries of love rang out in the nicely decorated room. Will's dream-like vision focused on Charity's hands, fingers spread wide on the glass. It didn't take her long to get where she wanted to be, soaring on the edge of an orgasm. Kelsey was there, too, with one of her own, egging Brie on with urgent commands. Will's focus shifted outward, to the men watching in the window across the way. His cock felt like magic, burning with sparks inside Charity's squeezing pussy, melting down in a shower of feminine screams.\n\n\u2014\n\n\"Oh my God, I'm so happy you're here!\" Raymond said, hugging Kelsey first and then the other girls. \"What do you think of the city so far?\"\n\n\"We met the nicest guy,\" Kelsey smiled. \"Oh my God, your apartment is so cool!\"\n\n\"Come on in,\" Raymond said. \"These are my roommates, Tsuneo and George. Normally we'd stay at work later but, well, you guys were coming, so...\"\n\nKelsey, Brie and Charity went right to the stunned looking young men, introducing themselves and hugging them both. They were still in their work clothes \u2014 rumpled plaid button-down oxford shirts, George's unbuttoned at the neck and Tsuneo's buttoned high with a thin brown tie. George looked a bit more rumpled in his soft, well worn chinos. Tsuneo sported dark selvedge denim jeans on his shorter legs, with turned-up cuffs that didn't make him look any taller but added to his stylish nerd vibe.\n\n\"Where are you guys from?\" Kelsey asked.\n\n\"San Fransisco,\" Tsuneo said.\n\n\"Philadelphia,\" George said, his voice almost a whisper.\n\n\"Tsuneo's parents are from Japan,\" Raymond said, helping out his nervous looking roommates. \"We all ended up at the company the same way; they recruit right out of the good computer tech schools.\"\n\n\"Cool!\" Kelsey said. \"We all went to college, too. I went to art school, and my girls here are both teachers.\"\n\nTsuneo and George nodded, like they already knew. They knew about Kelsey's porn career, too, and both were trying to soak in the visuals of her in-the-flesh body without being too blatant about it. Their hearts were pounding and they both felt a little dizzy. Having an honest to God porn star and her two sexy friends in their apartment was the highlight of their lives up to that point. When Raymond had told them about the upcoming visit, and that the girls would be staying right there at the apartment, Tsuneo and George couldn't quite wrap their heads around the concept. Standing stiffly and awkwardly at their first meeting, it was clear they were still trying to process things.\n\n\"Raymond, did you tell them all about us?\" Kelsey asked.\n\n\"Not really,\" Raymond said, thinking about their naturist ways and all the orgies.\n\n\"You guys have degrees in computer science, right?\"\n\nTsuneo and George nodded.\n\n\"So, you're scientists,\" Kelsey said. \"You like to learn stuff and talk about stuff you know.\"\n\nTsuneo and George nodded again.\n\n\"What do you know about human anatomy? You ever study girls?\"\n\nThe two young men smiled nervously. One nodded and one shook his head.\n\n\"Want a crash course?\" Kelsey asked. \"Like, all weekend long?\"\n\nTsuneo and George didn't answer. They both looked a bit stunned.\n\n\"Here's the deal,\" she continued. \"Raymond forgot to tell you, but us girls, we kinda hate wearin' clothes, so we're not gonna wear any when we're here at the apartment if you guys don't mind. You guys can try it too if you want. We can all study each other and learn and stuff. It'll be like science.\"\n\nCharity and Brie smiled at their friend, marveling at how she always got right to the point in a way that fit the situation. Charity was still plenty horny from the wildly erotic hour at Will's apartment, so she took the lead and started unbuttoning her shirt.\n\n\"It's not, like, rocket science or anything,\" she said as her lacy bra came into view. \"It's just so much more comfortable. You guys don't mind, do you?\"\n\nRaymond was trying to fight off a smile. Tsuneo and George didn't move a muscle as they watched the three sexy girls unveil their perfect bodies. There was so much to look at all of the sudden, both of their hyper-intelligent brains nearly overloaded. George actually got dizzy and weak in the knees. He hadn't eaten much that day, but still, the situation at hand was mind-boggling to him.\n\n\"So what do you guys normally do after work?\" Kelsey asked, walking nonchalantly to the window in nothing but little ankle socks. Charity and Brie kept their little socks on, too.\n\n\"We usually stay there until eight, nine, ten o'clock,\" Raymond said. \"There's not a lot of downtime. There's an awesome cafeteria with a chef who's really cool, and ping-pong tables and a gym room and stuff. It gets to be like home after a while.\"\n\n\"Yeah, but you couldn't do this, right?\" she said, turning to show her full-frontal nudity again, to make her point. \"Sound's like you should take advantage of the privacy you've got here.\"\n\nRaymond smiled. \"What do you think, guys?\" he asked his roommates. \"You need a drink first?\"\n\n\"It wouldn't hurt,\" Tsuneo said, breaking his stunned silence. \"So it's going to be like this...all weekend?\"\n\n\"Naked, you mean?\" Kelsey said. \"Yeah, Honey. It's okay, right? I mean, you're not, like, Muslim or somethin' are ya?\"\n\n\"Kel, he's Japanese,\" Raymond said, smiling a little.\n\n\"I know, but, I didn't wanna offend him or anything. Sometimes I get carried away.\"\n\n\"I can assure you I'm not offended,\" Tsuneo said. His face was straight, but his eyes were twinkling.\n\n\"So, Japanese, that's probably Buddhist, right?\" Charity asked. \"What do they think about sex?\"\n\n\"To be honest, I've never studied it,\" Tsuneo said, trying his best to keep his eyes up on Charity's face. \"I could call my mom and ask her.\"\n\nKelsey was glad to see the little smile light up his eyes even more. \"Tell her you've got three insatiable naked girls in your room,\" she said. \"Ask her what Buddha would do.\"\n\n\"He was a guy, right?\" Charity said.\n\n\"I don't think we should be talking about this,\" Tsuneo said.\n\n\"Charity's a big-time Christian,\" Kelsey said. \"Studied it in Bible school and stuff.\"\n\n\"Really?\" Tsuneo said. \"Divinity school, you mean?\"\n\n\"No!\" Charity said. \"K thru twelve. Just Bible school.\"\n\n\"I sorta did that,\" George said, breaking his nervous silence. \"Just for high school, though. Catholic.\"\n\n\"Nice!\" Kelsey said. \"So we got all kinds of religion represented here. I fuckin' love that.\"\n\n\"Why?\" Raymond asked, looking bemused.\n\n\"Cause I love blowin' that shit outta the water with a good orgy. Life's too short, you know?\"\n\n\"Is that what this is?\" Tsuneo asked. \"An...orgy?\"\n\n\"Not 'till you guys get your boners out in the open,\" Kelsey said. \"Where's those drinks Raymond? I'll help you.\"\n\n\"I bought some beer for the guys,\" Raymond said, as he walked with Kelsey to the tiny kitchen. \"They don't really drink hardly at all. I got this local bourbon for you guys. The guy at the store said there's a lot of distilleries in Brooklyn. He likes this one best.\"\n\n\"Cool!\" Kelsey said. She picked up the bottle, looked it over, opened it and gave it a sniff. \"Ooo, that smells wicked, Honey. Jeeze, you got enough for a huge party. Wanna invite the neighbors over?\"\n\n\"You probably would,\" Raymond said. \"They're mostly guys for some reason.\"\n\n\"We got nice even numbers for tonight,\" Kelsey said, \"but how 'bout for tomorrow we invite Ashley and those two girls from work you mentioned at Christmas? Think Tsunie and Georgie can handle it?\"\n\n\"Ha!\" Raymond chuckled. \"I have no idea.\"\n\n\"You may have to take us all on yourself,\" Kelsey said as she finished pouring the bourbon into mismatched glasses. She pressed her naked body against Raymond and wrapped her arms around him. \"You hard yet, Loverboy? I've missed you. We all have. It sucks that you don't live closer.\"\n\nRaymond hugged Kelsey tight, feeling the warmth of her skin, remembering...everything.\n\n\"When you make your first million,\" Kelsey said softly, \"you'll buy a second home up near us, right? So we can all be together again? A private one with a nice pool in the back,\" she said, still hugging tight. \"Just like our first time. Remember, Raymond? Remember our first time, when I pulled down your swimsuit and filled my mouth with you?\"\n\nKelsey slithered downward to a sexy squat. Raymond was hard and ready for her when she unfastened his pants, pulling them down the same way she'd pulled down the swimsuit, freeing the big cock that had so surprised her all those years ago.\n\n\"God I love your cock, Honey,\" she purred, letting her hand caress warm balls before gathering up the hardness. \"I dream about it sometimes, you and me...\"\n\nRaymond groaned when his throbbing shaft slipped into the familiar wet heat of Kelsey's skilled mouth. \"Me too,\" he said on a breathy whisper. \"Me too...\"\n\n\"Shit, you guys,\" Charity said, when she entered the kitchen. \"Nothin' like startin' without us.\"\n\n\"I don't know what you're waitin' for, Honey,\" Kelsey said to her, stroking Raymond's wet shaft next to her cheek. \"We gotta get the work stress outta these boys.\"\n\n\"Pants off, guys,\" Charity commanded, drinks in hand as she returned to the little living room. \"We're only here for a couple days you know.\"\n\nTsuneo burst into sudden action and George followed his lead. Clothes where coming off at a rapid pace. Charity and Brie giggled as they moved in on the two young men, and both of the newbies groaned deep, masculine moans when soft, warm, feminine hands caressed their sweaty hardness.\n\nThe drinks sat untouched on the cocktail table in the middle of the room as the little orgy got up to speed. Neither Tsuneo nor George could quite believe their eyes when Kelsey the porn star came to vivid life, riding them both on the floor, one right after the other. They both fucked Charity doggy style because the sight of her ass demanded it. Brie was feeling frisky, jumping from boy to boy with girlish abandon, making Raymond smile with memories of her at her first swinger party at Kelsey's parents house, out by their pool, sampling the myriad pleasures of all the older men in attendance.\n\n\"Easy, Brie,\" Raymond giggled as she bounced wildly on George's bright-red cock. \"You'll break my friends.\"\n\n\"If they don't fuck me harder,\" she grunted through clenched teeth, \"I'll break you, too!\"\n\nAll watched as she drove herself to the crescendo of the first evening's playtime, letting out a feminine wail that curled everyone's toes.\n\n\"Fuck yeah!\" she screamed, and then her eyes rolled back in her head, and she was a bouncing, gurgling ragdoll.\n\n\"Keep fuckin' her, Georgie!\" Kelsey yelled. \"Do it!...Do it!\"\n\nGeorge was on stunned autopilot, thrusting up hard and fast into the sweetest, sexiest girl he'd ever seen, nearly levitating her wildly orgasmic body.\n\n\"Fuck yeah!\" Kelsey cheered. \"Woo, hoooo! We partyin' now!\"\n\n\u2014\n\nThe next morning, for the first time in their lives, Tsuneo and George both woke with a naked girl in their bed. Tsuneo looked at Charity, sprawled on her back with her lovely tits moving slowly as she breathed, and couldn't quite believe his eyes. He touched her arm softly, just to be sure. Yes, there was a naked girl in his bed, and he'd fucked her so many times and so many ways it boggled his mind.\n\nGeorge had a similar first few moments of wakefulness, and then his mind went to pregnancy as he scanned Brie's beautiful, sleeping face. Three men's cum is inside all of the girls, he thought to himself as he re-lived some of the wild night in his mind. Can you really do that? Can they really do that?",
        "Kelsey was the first of the girls to wake, in Raymond's bed. She smiled at the sight of her childhood friend, still sleeping soundly. She nudged his shoulder to rouse him...\n\n\"Wake up sleepy head,\" she said.\n\nRaymond's dry eyes opened a little. The first sight of the new day was Kelsey's big tits, just inches from his face. His hand found one of the perfect, fleshy globes, and he just let it rest there, soaking in some of Kelsey's soft warmth.\n\n\"I was just lyin' here thinkin' about Las Vegas,\" Kelsey said. \"Remember fuckin' Marsha for the first time, with all those awesome city lights makin' us all glow? Tucker had me out on the balcony. We got our 'older' groove on that night, didn't we?\"\n\n\"Yeah we did,\" Raymond said. \"How is Marsha? Do you talk to her?\"\n\n\"Yeah, now and then. Tucker's still got the harem thing goin' with Marsh and Liz both livin' with him. They're super happy I think.\"\n\n\"Good. I thought maybe they'd be at you mom and dad's Christmas party.\"\n\n\"Yeah, they couldn't make it. It was cool that Jamar and Latanya where there.\"\n\n\"Yeah, she's fun,\" Raymond said. \"I never really got it straight, though. Is she one of the studio girls?\"\n\n\"Latanya? No, Honey, she's just Jamar's girlfriend. She's never done any porn.\"\n\n\"She should. She'd be good.\"\n\n\"I know, right?\" Kelsey said. She fingered Raymond's bed-head hair into place. \"I like your hair like this. You look really New Yorkie. Tsunie and Georgie are cute, too. I love that they're super nerdy.\"\n\n\"I told you. I can't believe how crazy they went last night with you guys. Well, I guess I can.\"\n\n\"Tonight'll be even better. With Ashley, and...we're gettin' those girls here, right? The ones from your work?\"\n\n\"I don't know, Kel,\" Raymond said, letting his hand slide off her breast as he sat up a little. \"That might...it might change stuff at work, more than we should.\"\n\n\"I call bull crap on that,\" Kelsey said. \"You're just scared. What's wrong with havin' fuck buddies you work with? It'll just make it more fun. And if those girls are as nerdy as you say, they need this. Big cities can be super lonely, you know. Do you know how to get ahold of them?\"\n\n\"Yeah, I've got Emberly's text number. She's...I don't know Kel. I think you guys might blow there minds. And not in the good way.\"\n\n\"When have you ever known me to not handle things good? And be honest with me, Raymond, you can't tell me you haven't thought of fuckin' at least one of them.\"\n\nKelsey's hand drifted down under the sheet to where Raymond's cock was. It was firming up rapidly, and she was pretty sure she knew why. A few soft strokes with her small hand and it was fully hard.\n\n\"Emberly, huh? Cute name for a nerdy girl. What's her friend's name?\"\n\n\"Leela.\"\n\n\"Fuck, Ray, you wanna fuck the shit outta them both, don't you! You're fuckin' hard as a rock! Text her right now, Honey. Let's set this up.\" Kelsey reached over and picked up Raymond's phone from his bed-side table, holding on to his hard cock all the while. \"Ashley's comin', right?\"\n\nYup,\" Raymond said. She's got a day thing but she said she'd be here around seven.\" \n\n\"Good. Tell Emberly the same. Make sure she knows it's a party, so they dress for it. How do nerdy girls dress, anyway?\"\n\n\"I don't know. Lots of layers I guess. They both try and dress cool, but sometimes...\"\n\n\"Not much skin? What's the sexiest thing they ever wore to work?\"\n\n\"I don't know. I can't really think of anything.\"\n\n\"If you guys all fuck I bet they'll start dressing sexier. All it takes for some girls is knowin' that a guy's thinkin' about her that way.\"\n\n\"Maybe.\"\n\n\"Send it, Honey,\" Kelsey said, reading the text Raymond was procrastinating with.\n\n\"George is gonna kill me,\" Raymond said. He tapped send and the deed was done.\n\n\"Hey, it's your apartment, too, right? If he doesn't wanna party with us...\"\n\n\"Kel, why do you always think everything's so simple?\"\n\n\"Sorry, Honey. I just thought it'd be nice for you guys to get to know the girls at work better.\"\n\n\"There's a big difference between getting to know them better and luring them to an orgy.\"\n\n\"Here's the deal,\" Kelsey said, as she rolled on top of Raymond's warm body. \"I promise to be good. Nothin' naked until we're sure they're interested, okay? Now fuck me, Honey. I've missed you...\"\n\n\u2014\n\nRaymond and the boys took Kelsey, Brie and Charity on a whirlwind sightseeing tour of the city. George had seen some of the sights when his parents visited, but for the rest of them it was all new and exciting. The Empire State Building was first, followed by fried fish sandwiches from a streetside lunch cart near Times Square. George had told them that Times Square wasn't much to see, but Kelsey and the girls were curious.\n\n\"Don't you watch New Year's on TV, Georgie?\" she asked him. \"Have you guys been here for that?\"\n\n\"No!\" he said, sounding like it was a crazy idea. \n\nThey all looked amazed as they walked into the heart of the action, with the massive theater billboards, electronic signs and wildly diverse people on the street giving everything a night on the town vibe in the middle of the day.\n\n\"This is so cool!\" Kelsey said. She looked around and up, craning her neck to see where the ball dropped every New Year's Eve.\n\n\"Shit, look at that!\" Tsuneo said.\n\nAn informal protest was taking shape in the heart of the square. A rag-tag group of women, young and old, were baring their breasts and starting a chant...\n\n\"If men can do it, we can too! Equal rights are over due!\"\n\nA few had body paint on to camouflage things a bit, but others were simply topless, and a few adventurous onlookers were joining in. A few men took of their shirts and joined in with the women, chanting along with them. The Square's usual police officers made themselves known, but didn't intervene. The protest had the feel of business as usual.\n\n\"No shit!\" Kelsey said, smiling widely at Charity and Brie. \"We're in, right?\"\n\nRaymond's eyes grew wide. None of the topless women had bodies like Kelsey and the girls. He had visions of the police stepping in when Playboy worthy bodies joined in, arresting everyone, including him. How would he explain that to his boss, or to his mother? By the time the thoughts started to clarify in his mind it was too late \u2014 Kelsey's shirt was off, Brie and Charity's were on their way off, and all were chanting.\n\n\"If men can do it, we can too! Equal rights are over due!\"\n\n\"Are we in?\" he asked his roommates sheepishly.\n\nGeorge shrugged his shoulders. When he saw Kelsey's smiling face, her crazy hot porn star tits, and her arm waving him over, he left Raymond and Tsuneo without a word, taking off his shirt as he joined in.\n\n\"I guess we're in,\" Raymond said.\n\nSoon the little protest had grown to thirty or forty people, more than half of them women, some of them veterans of previous protests and some baring their breasts in public for the first time. Kelsey asked an older woman in body paint about it all.\n\n\"Are the cops gonna do anything?\"\n\n\"No, were good,\" the woman said as the chant went on. \"As long as it doesn't get to big, and we knock it off in five minutes or so. It's technically legal, you know. A woman can bare her breasts in New York State. But it's still misunderstood, and the law need to be clarified and expanded. Are you from here?\"\n\n\"Not from the city, no. Upstate.\"\n\n\"Oh, okay,\" the woman said. \"Talk to your state legislators when you get home. Spread the word.\"\n\n\"If men can do it, we can too! Equal rights are over due!\"\n\n\"All right everybody,\" a police officer said a few minute later. \"Let's break it up.\"\n\n\"Holy fuck!\" Kelsey said when the group was dispersing. \"This is so awesome!\" She was still topless, twirling around with her arms in the air, looking up at all the buildings and neon signs. \n\n\"Clothes on ladies,\" another cop said, looking like he wished he didn't have to say it.\n\n\"So is it legal, or isn't it?\" Kelsey asked him.\n\nThe older woman with the body paint, now fully dressed, rushed to her side. \"You'll get arrested for something else. Disorderly conduct, or causing an accident. Especially with tits like those.\"\n\nRaymond picked up Kelsey's t-shirt from the sidewalk and handed it to her.\n\n\"God, this is so fun,\" she said, looking around at all the attention she was getting as she pulled it over her head and adjusted her big, loose tits underneath. \"We gotta look into this when we get home.\"\n\n\"You're gonna try and do this at home?\" Brie asked. \"Char and I can't. I'm pretty sure the school board wouldn't approve.\"\n\n\"Oh, yeah,\" Kelsey said. \"Well, we'll make it legal then. It'll just be normal. You'll see.\"\n\nBrie shook her head and smiled. She had a feeling Kelsey was on a mission.\n\n\"We better get going if we're gonna do the Statue Of Liberty and get back to the apartment by seven,\" Raymond said. \"We wouldn't want to miss Emberly and Leela.\"\n\nHe smiled at the sudden look of terror on Tsuneo and George's faces. He'd already told them the girls from work were coming, but they hadn't even begun to get used to the idea.\n\n\u2014\n\n\"Ash!\" Kelsey shrieked. \"Oh my God, you look awesome!\"\n\n\"I lost eighteen more pounds since Christmas. Thanks to this one, mostly,\" Ashley said, gesturing toward Raymond. \"He's my personal trainer.\"\n\n\"Fuck yeah! Train that girl, Ray!\" Kelsey smiled. \"Tsunie and Georgie, do you guys hear 'em when they're workin' out?\"\n\nNeither young man answered, embarrassed that the answer was yes. Not only did they hear, the neighbors probably did, too. Ashley had some really big orgasms.\n\nAshley blushed at the looks on their faces. She'd grown to like Tsuneo and George, but she was always a little embarrassed if they were home when she was playing fuck buddy with Raymond. The first few times were the most awkward, but it got a little easier as the months went by.\n\n\"We drinkin', Girlie?\" Kelsey asked her. \"You're not gonna puke all over us, are ya?\"\n\n\"What?\" Raymond asked, looking surprised.\n\n\"Her first time with us,\" Kelsey said, \"at the house. She had one too many, on an empty stomach probably.\"\n\n\"I didn't puke on you! I made it to the bathroom. Do we have to talk about this?\"\n\n\"I'm just bustin' your balls, Honey,\" Kelsey said, leading her away from the boys to the tiny kitchen. \"We had the most awesome day today. I wish you coulda come with us. We found this topless rally thing in Times Square. We all got our tits out and stuff. It was like bein' in a movie or somethin'. So cool.\"\n\nWhile Kelsey filled Ashley in on the whirlwind tour of the city, Emberly and Leela arrived. Raymond introduced them to Brie and Charity. The new girls looked wary of the cute Upstaters, especially because Brie and Charity were quite obviously bra-less, with sexy, pointy nipples poking out the fronts of their thin shirts.\n\nEmberly and Leela were more thoroughly dressed, to the point that they felt overdressed. Skinny jeans and high healed shoes anchored both of the girl's outfits. Emberly sported a low-cut white t-shirt under a form-fitting black blazer, and Leela wore a long, faded denim shirt, buttoned up to the neck, with a skinny tie tied like a scarf. They both looked a lot different than they did at work, but their nervous faces and shy eyes were the same.\n\n\"Hi you guys! I'm Kelsey.\"\n\n\"Hi,\" Emberly said, surprised that the tiny, gorgeous redhead was hugging her.\n\n\"I grew up with Raymond,\" Kelsey said, hugging Leela, too. \"As soon as he told me about you guys I knew we should have a party. Do you hang out with other people from work?\"\n\n\"No,\" Leela said. \"I mean, we work so many hours. I guess we're hanging out all the time.\"\n\n\"Yeah, but you can't really party there,\" Kelsey said, casually sizing up the girls. \"Maybe someday. Did you know you can take your tits out at Times Square?\"\n\n\"Kel!\" Raymond chuckled.\n\n\"What? We're all adults. We all joined in a rally today, so women can bare their breasts in public. It felt so good!\"\n\n\"You guys all did it?\" Emberly asked, wide eyed.\n\n\"Fuck yeah!\" Kelsey smiled. \"Well, Ash didn't. She wasn't with us, but you would have, right, Ash?\"\n\n\"Yeah, I think so,\" Ashley said. \"A few months ago I would have said no.\"\n\n\"How 'bout you guys?\" Kelsey asked the new girls. \"Are you joiners?\" \n\n\"You mean...topless?\" Leela asked, smirking a little. \"Were the guys with you?\" She glanced at the boys, but looked away quickly when they made eye contact.\n\n\"Yeah, they took off their shirts, too. There were a bunch of guys.\"\n\nNeither Emberly nor Leela knew what to say, so they didn't say anything.\n\nKelsey took note of the fact that they didn't say no. They were difficult to read. Obviously intelligent, showing an I wanna be sexy but I don't know how vibe with their clothes, and definitely hiding something behind their awkward shyness. Maybe hiding a lot.\n\n\"So what's it like livin' in the city? Kelsey asked.\n\n\"I wish I had more time to see it all,\" Leela said, taking one of the bottles of beer that George was handing out. \"I'd like to see some Broadway shows. It's funny, I've finally got the money to do things like that, but...\"\n\n\"No time, or no guy?\" Kelsey asked.\n\n\"Both.\"\n\n\"You guys all need to hook up,\" Kelsey said. \"Seriously, why is it always so hard? Everybody's always locked into this perfect guy thing. Why can't it just be more casual?\"\n\n\"Like what?\" Emberly asked. \n\n\"Friends with bennies, Honey,\" Kelsey said. \"We call 'em fuck buddies at home. Somebody you can call up and have fun with. Get your rocks off with fun sex, go to a show, go out for dinner, whatever. It's super easy, it's just a frame of mind.\"\n\nEmberly and Leela were both smiling nervously. Kelsey could tell they were interested.\n\n\"Take Raymond here,\" Kelsey said, putting her arm around him. \"He's super sexy. I don't know if you woulda thought that. And Tsunie and Georgie. I mean, they're all sittin' around here at night, and you guys, what do you do on your nights off? You got a boyfriend Emberly?\"\n\n\"Nope. Since I moved here it's been all work. It's like I put my head down and...I don't know, I've been so focused I...I guess I haven't tried.\"\n\n\"Yeah. I'm not judgin' you or anything,\" Kelsey said. \"I get it. But why not make it better if it's easy to do? You guys listenin'?\" she ask the boys. \"They're cute, right?\"\n\nTsuneo and George nodded. Raymond smiled. He loved seeing Kelsey at work again.\n\n\"So we could fuck around with strip poker, but it's boring as fuck,\" Kelsey said. \"I hate cards. How 'bout if we just loosen up a little and see how it feels. I mean, shit, if we can have our tits out in the middle of Times Square we should be able to get comfortable in this cool apartment, right? This is gonna sound really high school, but lets dance in our undies. Tsunie, Honey, put on some music, will ya?\"\n\n\"This is the weirdest party I've ever been to,\" Emberly said. She took a big gulp of her beer.\n\n\"It's Brooklyn, Baby!\" Kelsey said. \"I've been readin' about it. It's supposed to be weird.\"\n\nTsuneo played a Chainsmokers mix through his bluetooth speakers, and the whole vibe in the small room changed. Kelsey didn't have a bra on, so she stripped off her pants and started dancing seductively in her t-shirt and tiny thong. The way it looked, she may as well have been naked from the waist down.\n\nCharity and Brie took the cue, stripping their bottom halves down to their thongs, Brie moving especially sensually to the slinky beat.\n\n\"This is not what I expected,\" Leela said quietly.\n\nRaymond heard her. \"Sorry. Kelsey's sort of...got her own way.\"\n\n\"No, I'm not...unhappy,\" Leela said. She glanced at Raymond's penetrating eyes and looked away. \"Another beer?\" she said. \"Got any shots or anything?\"\n\n\"I've got bourbon. That's not really a shots thing, is it?\"\n\n\"Yeah,\" Leela said, nodding her head. \"I'll help you.\"\n\nEmberly gave her a dirty look when she walked away, and followed them into the tiny kitchen.\n\n\"So when did you get so interesting, Raymond?\" Leela asked.\n\n\"You can blame Kelsey. I'm sorry you guys. I had a feeling you'd be...\"\n\n\"What? Be boring?\" Leela said. \"We had a feeling we would be, too.\"\n\n\"No. Not that,\" Raymond said. \"I thought maybe Kelsey would...she's not for everybody.\"\n\n\"She's kinda awesome,\" Emberly said, looking out through the kitchen doorway at Kelsey dancing like a stripper with George. \"I always wished I had a friend like her.\"\n\nLeela nodded in agreement. All three of them downed a shot of local bourbon. Raymond poured another round.\n\n\"It seems weird to not be talking about work,\" Raymond said.\n\n\"Not to me,\" Emberly said. \"This is so nice. It's like work's gone for a while.\"\n\n\"Yup,\" Leela agreed. \"Gone.\"\n\nShe downed another shot, giggling at the burn. She was clearly not a big drinker, and Raymond didn't want her to get drunk and puke like Ashley had done.\n\n\"I can not believe I'm seeing George dancing,\" Leela said. \"Tsuneo I can sort of believe, but even that's a stretch.\"\n\n\"Your friends are really sexy, Raymond,\" Emberly said. \"I don't even know what to think about you anymore.\"\n\n\"Good or bad?\" Raymond asked.\n\n\"Good, silly!\" \n\nHe downed another shot, and the girls did, too. \"You know,\" he said, \"Kelsey won't let you out of here until you've followed her ways. She's like a cult or something.\"\n\n\"A cult?\" Emberly chuckled, watching Kelsey though the doorway. \"Is that why I feel like taking off my pants and dancing?\"\n\n\"Yup,\" Raymond smiled. \"I'll do it if you do it.\"\n\n\"Raymond!\" Emberly exclaimed, her eyes wide and smiling. The rushing bourbon buzz was reaching full force. \"You naughty boy! I love this side of you!\"\n\n\"Is that a yes?\" he smiled.\n\nEmberly started laughing. \"Raymond's a seducer!\" she said to Leela.\n\nLeela giggled. She was right in the middle of a beautiful bourbon buzz herself. \"This is crazy,\" she smiled.\n\n\"We don't have to go in there yet. We can start here,\" Raymond said. \"That is...if you're wearing underwear.\"\n\n\"Are you?\" Emberly smirked. Her eyes widened with surprise when Raymond unzipped his pants and pushed them down. Tight baby-blue boxer briefs with a big lump in the front were suddenly the only thing in focus in Emberly's mind. \"Holy shit!\" she exclaimed.\n\nRaymond extended his hand. \"You said you wanted to take off your pants and dance, right?\"\n\nEmberly tried to think, but her intelligence was misfiring a bit. She looked at Leela and the two of them seemed to be communicating with their eyes. Emberly shrugged, and then she unzipped her skinny jeans. She gave Raymond an odd look and pushed them down, wiggling her way out of them after taking off her high heeled shoes. \n\n\"Put the shoes back on,\" Raymond said.\n\nEmberly's eyes smiled at him, but looked different. More confident. Sexier. Leela looked on, amazed.\n\n\"Supposed to be just underwear,\" Raymond said, taking of his shirt as the girls watched. \"They don't have bras on,\" he said, glancing out at Kelsey and the girls. \"So...\"\n\n\"So?\" Emberly giggled. \"I guess...\"\n\nLeela was shocked to see Emberly take off her blazer, and then her t-shirt, stripping down to nothing but her bra, her panties and her high heels. She started to wonder if Raymond had put something in their drinks.\n\nEmberly and Raymond started dancing. They eased into it for a few moments, smiling shyly as the movement went from tentative to full-body. Within a minute or two Leela felt left out. She thought about drinking another shot, but worried that it might make her do something she didn't want to do. Instead, she took off her tie and unbuttoned her shirt. It felt dreamlike. So odd. The bra she wore wasn't for show, but it wasn't bad. She glanced down at her cleavage, and the shirt slipped down her arms.\n\nEmberly gathered her into the dance. It was intimate, just the three of them in the tiny kitchen, with barely enough room to move with the music. ",
        "\"Yeah you guys!\" Kelsey yelled, looking at them though the doorway. \"Awesome!\"\n\nLeela stopped breathing when she saw Kelsey's big, bare tits wobble out from under the t-shirt she was tossing aside. It was one of those oh my God moments. Emberly noticed the look on Leela's face and turned to look. Not only was Kelsey nearly naked in her almost invisible thong, Brie and Charity were shedding their shirts, too. Ashley was smiling at all the flesh, dancing up a storm.\n\n\"Fuck!\" Emberly said.\n\n\"Want me to talk to them?\" Raymond asked.\n\n\"No,\" Emberly said. \"It's not that. God, Raymond, she's...\"\n\n\"Kelsey? Yeah, I know,\" he said.\n\nEmberly and Leela both stared out through the doorway at the little redheaded porn star. Kelsey had a big smile on her face, as usual, and was dancing in her usual sensual way, her perfect body looking like pure sex. When Ashley's bra came off and her less than perfect body danced just as sexily, Emberly's mind let lose of it's tension. \n\n\"Em!\" Leela gasped when Emberly was suddenly topless. \"Oh my God!\"\n\nEmberly's face showed the newfound freedom she was feeling, as the deep groove of the music swept her dancing body away. She rocked her tits back and forth, giggling as she reveled in the sensation. She bit her bottom lip when she looked at Raymond, looking away just as quickly, letting her body move in ways she'd never done outside of the privacy of her own bedroom.\n\nRaymond's cock responded. He didn't want it too, but there it was, lumping out the front of his boxer briefs even more, the contours of it and it's swollen head clearly delineated, to the point of obscenity.\n\n\"You guys rockin' in here?\" Kelsey asked as she danced her way in to the tight confines of the kitchen, with her arms up and her tits bobbling back and forth to the beat. \"Yeah, you got Raymond heated up. You all hard, Ray Baby?\"\n\nKelsey danced right up to him, holding his arms out to the sides as she danced her thong-covered pussy against his hardness. Leela was stunned at the blatantness of it.\n\n\"Come here, Emberly, Honey,\" Kelsey said. \"Dance with Raymond. He's not hard for me, he's hard for you.\"\n\nEmberly let the moment sweep her away. She was only two steps away, so it was easy to do. Two steps that happened like nothing. But Raymond's warm flesh against her, that wasn't nothing. And his rock hard lump against her panties, that wasn't nothing either. Instinct wrapped her arms around him, and Raymond embraced her, too. They were kissing, without anyone knowing how it happened. Everything was flowing like warm water \u2014 the music, the fleshy warmth, the horny instincts that drowned out any rational thought.\n\nKelsey danced up against Leela, nearly smothering her in big, soft tits. Leela stopped breathing again, and then Kelsey kissed her. It was shocking, and wonderful. Leela wished it wasn't happening in public, but when Kelsey's arms held her tight those thoughts drifted away. Their tongues played together in the smoldering kiss. Leela knew it was crazy, but she was powerless.\n\nA masculine groan drifted in from the other room. Emberly and Leela opened their eyes, trying to refocus from the dream they'd drifted into. Tsuneo and George were both standing still, and both had girl's mouths their cocks. Tsuneo's underwear was nowhere to be seen, and George's tighty-whities were pulled down to his knees. He groaned again when Charity took him deeper in her throat, just as his eye's landed on Leela's.\n\nShe was still lost in her first feminine kiss and the strangely relaxing comfort of Kelsey's body's fleshy warmth, but her eyes were open, taking in the unbelievable sight. She liked George, but at work he'd always seemed the consummate nerdy geek, shirts always buttoned at the neck, fingers never far from laptop keys, eyes never giving away an interest in girls. But there he was, naked but for a bit of his knees, with his surprisingly big erection being propelled by his slowly moving hips, thrusting deep in Charity's throat. It was the sexiest thing Leela had ever seen.\n\nKelsey didn't know Leela was transfixed by the goings on in the other room, but she could tell the hook was set. Leela's little noises and her body language were that of a girl relaxing into her blossoming horniness. Kelsey knew the signs well, and she loved it.\n\nShe took advantage of the embrace by unhooking Leela's bra. \"I wanna feel your tits on mine,\" Kelsey whispered seductively, when the long kiss ended. Leela looked powerless, and the sparkle in her eyes told Kelsey all was well. \n\nThe bra hit the floor, tits pressed against tits and the kiss resumed, wetter, with even more heat behind it. It was Emberly's turn to be shocked, watching her friend as she danced. Ever since meeting Leela at work almost a year ago she'd felt twinges of energy between them, odd little tingles that seemed to come from odd little looks in Leela's eyes. Emberly had always brushed it off, thinking it was their continuing lack of male companionship leaking into everyday thoughts. But maybe it wasn't. Leela likes girls? Who knew!\n\nLeela didn't know. Or maybe she kept herself from knowing, on purpose, to keep the scary at bay. It was tough enough growing up a nerdy geek girl, anything more would have been too exhausting. But Emberly, sweet, nerdy Emberly, meeting her when she started at the company was different. They clicked on a different level, almost sisterly, but there were those twinges every once in a while. Leela wasn't exactly ready for it, but Kelsey's monumental kisses and her fleshy, x-rated warmth were suddenly clarifying things. I like girls! But wait...I like boys, too! What the...!\n\nKelsey's all seeing eyes caught Emberly's furtive, horny glances at Raymond's big, hard bulge. \"Emmie,\" Kelsey said. \"That boy's about to bust right through those shorts. Pull em down. No need to waste time anymore, right?\"\n\nEmberly giggled, but she knew Kelsey was right. A quick glance into the other room showed her the future, and the instant flush of hot adrenaline told her she liked it. Charity was bent over the back of the couch and George was fucking her. It was a sight Emberly never dreamed she'd see. A moment later, the crazy big size and crazy hot heat of Raymond's throbbing cock in her hand was something she never dreamed, either. Well, maybe she did, but those dreams never included a sex party. She wanted to ask, \"What's happening?\", but instead she put her mouth on Raymond's cock and nearly melted when she heard his moan.\n\nLeela's instinct was to call out her friend's recklessness and yell, \"Em!\", but she didn't. The Chainsmokers hypnotic dance beat, Kelsey's hypnotic everything, and the dreamlike sight of sex breaking out everywhere hit her like a drug. The four shots of bourbon didn't hurt, either.\n\n\"You're the last one not in your underwear, Honey,\" Kelsey purred, putting just enough distance between her big tits and Leela's to look down at the skinny jeans still in place on Leela's slender legs. \"You'll need help with those. You look hot in 'em.\"\n\n\"Do I?\" Leela asked.\n\n\"Fuck yeah,\" Kelsey said. \"Now I know why the boys were actin' all funny about you two. I had a feeling you'd all make good fuck buddies.\"\n\nLeela's eyes widened with surprise. \"Fuck buddies?\"\n\n\"Yeah. I don't know what you call 'em where you're from. Friend's with benefits? Don't worry, it was my idea. They don't even know.\"\n\nKelsey unfastened the stunned girl's pants and squatted in front her, pulling down the tight, stretchy jeans. Leela let it happen. She felt powerless again, and it was okay. It felt like the universe was telling her something. Something new, but, strangely, something good. The next thing she knew Kelsey's mouth was on her pussy, and everything melted into awesomeness.\n\n\"Fuck buddies?\" Emberly said to Raymond, looking up at him with bedroom eyes as she stroked his wet cock. \"Looks like you guys already have some. Want another?\"\n\nRaymond pulled her up onto her feet. She held his cock tight while they kissed. It was a burning hot kiss, wet and fiery. Raymond reached down, hooked his hand under her thigh and lifted it high. He bent his knees, guided his cock to her pussy, pushed her panties aside and thrusted upward. Gasping moans broke through the steamy kiss. Raymond kept up the thrusts, each one taking Emberly's breath away, until he was deeper than anyone had been.\n\n\"Fuck!...Raymond!\" she cried, her dark, wild eyes staring into his. \"Fuck me!\"\n\nLeela staggered backward, landing against the refrigerator. Kelsey had her tight in her entangling grasp, arms hooked around thighs, holding tight, spreading Leela's trembling legs as much as she could while her mouth worked its well practiced magic. Leela's panties had been discarded. Her crotch was hairy, dark but not thick. Kelsey liked it as much as she liked the soft, smooth, hairless ones. She loved variety, and she especially loved a brand new pussy that she hadn't tasted before.\n\n\"Fuck! Lee, Honey!\" Kelsey said, thrilled at the response to her probing tongue \"Haven't you got any in a while?\"\n\nLeela shook her head, looking down at Kelsey's short red hair. So cute. So sexy. She took Kelsey's head in her hands and pressed it hard against her wildly electrified pussy. \"Ohhh yeahhh!\" she said, the words breathy and pure. \"Ohhh, fuck yeahhhh!\"\n\nKelsey's skilled tongue had her at the orgasmic state just a minute later. Leela had never been there before, not for real anyway. She rode the new feeling for the most delicious, addicting minute of her life, slapping her hand against the refrigerator, and again against the wall next to her, trying to hold on for dear life, but in the end she was glad she couldn't. Better to float away on the feeling, lost to reality, making sounds that lifted everyone in the apartment to new heights of their own. For the second night in a row, there was a full-on orgy at the apartment, and it was shaping up to be a good one.\n\n\"What happens at work Monday?\" Leela asked Emberly. They were back in the kitchen, reviving themselves with orange juice after being passed around from hard cock to hard cock for over an hour. \"Are we the office sluts now?\"\n\nEmberly's eyes widened and she smiled. \"God, can you imagine? Us?\"\n\n\"What...you like the idea?\"\n\n\"Leela, we've been wishing for sexy excitement for a year. Don't get all pessimistic about it now that it's happening.\"\n\n\"I know, but...this is crazy. We're naked and I've got...stuff dripping out of me. And we all work together. What if they talk about us?\"\n\n\"We won't,\" Raymond said, walking into the kitchen with his flaccid cock swinging between his legs, plump and reddened from an hour of going at it full-bore. \"You guys are awesome, we're not gonna screw this up. That's how fuck buddies work. Everybody's cool about it and doesn't talk about it except with each other. Kelsey taught us all that. It's like that Vegas thing. What happens here stays here. Tsunie and George get it, I think, and I'll make sure they do before Monday. They're not gonna want to do anything to mess this up.\"\n\nEmberly smiled. \"So this...is a thing?\" she asked. \"We're the cool kids now? Just like that?\"\n\n\"I know,\" Raymond said. \"I couldn't believe it either, when Kelsey got me involved. There's nothing expected, you know. That's what's so cool about it. Whatever you guys wanna do, you know? Text us, see who's around. Ash might be here. She and I have been hangin' out since Christmas. Now she's been with the other guys too, so...\"\n\n\"So if I want three guys all to myself I can just come over?\" Emberly asked.\n\n\"Em!\" Leela said. \"Slut much?\"\n\n\"Hey, it's just fun, right?\" Raymond said. \n\n\"I'm not going to want to work fourteen hours a day anymore,\" Emberly said. Raymond smiled and left, wandering back to the music filled living room. \n\n\"I'm not sure this is a good idea,\" Leela said, as she watched his naked ass disappear around the corner.\n\nEmberly gave her a confused look. \"And how many orgasms did you have tonight, screaming for somebody named God? Come on Leela, this is the best idea ever. You know how things have been for us. Why the fuck wouldn't you want to have great sex once in a while? Or more than once in a while?\"\n\nGeorge's voice drifted in from the other room. \"Leela...come back to me...\"\n\n\"See?\" Emberly said. \"You're so tight you've got a nice guy begging for you.\"\n\n\"How do you know I'm...\"\n\n\"That was me behind you with the dildo, remember?\"\n\n\"Oh,\" Leela said. \"Was that...your...mouth?\"\n\n\"Nope. That was Charity. But we can...try that...if you want too.\"\n\nA big hit of adrenaline surged through Leela's veins, and a nice pink blush brightened up her skin.\n\nEmberly smiled. \"First you better wipe all that jizz off your thighs and go take care of George. Did you ever dream he was so big?\"\n\nKelsey wandered in, clued in by Raymond that Leela was having doubts. \"Super fun tonight, huh?\" she smiled. \"You guys cool? You look like you're havin' a meeting.\"\n\n\"Yeah,\" Emberly said. \"It's a little overwhelming. Guys from work, you know?\"\n\nKelsey moved in closer and spoke quietly. \"I gotcha, Honey. But that's what makes it super hot, too, right? Now you got this super awesome secret, and you'll all feel the energy when you're at work.\"\n\n\"Leela's worried it won't stay a secret,\" Emberly said.\n\n\"Oh, Honey, these guys aren't gonna blow a good thing like this. You sure as hell don't have to worry about Raymond, and after what happened this weekend he's the alfa dog here now. Tsunie and Georgie'll be cool. I can almost guarantee it.\"\n\nLeela looked unconvinced. Kelsey's voice dropped down near a whisper.\n\n\"Listen, Honey, when it comes to guys and sex, we got the power. Don't ever let the guys know you think that because things can go bad, but it's true. You could walk in here Monday after work and have all these guys to yourself. At your beck and call. Of course you can play it any way you want. You could be the Dom and line them all up and tie their wrists and have your way with them, or you could roll play and make 'em be your dad's friends or somethin', or if you're into it you could let 'em tie you up and gangbang you. You can do all that because you got the power.\"\n\nLeela and Emberly hung on Kelsey's every word. Emberly suddenly realized she wanted to try the gangbang thing, and Leela was intrigued by the thought of roll playing with three willing boys.\n\n\"As far as the work thing,\" Kelsey said quietly, \"I'll have a talk with them in the morning before I go. I think they're great guys though, and they're sure as heck smart. They'll play it cool. I can tell. And Raymond, he'll be on top of it.\"\n\nLeela nodded a little. She wouldn't be sure of anything until a week or two went by, but she was relieved to hear everything Kelsey and Raymond had said.\n\n\"Fuck, I can't believe how early it is,\" Kelsey said, looking up at the clock on the wall. \"Things'll settle a little bit now. You'll see. It'll be like heaven for the rest of the night.\"\n\nLeela looked surprised. \"You mean...it's not over?\"\n\n\"It's never over, Honey. It's just life.\"\n\nLeela looked down at herself and felt even more naked than she was. Tits that were nowhere near as nice as Kelsey's, a little spread in her midsection that made her wish she'd been using the gym equipment at work, and sticky semen starting to cake on her inner thighs, a blend of all three boys.\n\n\"Now's the time to start using that power, Honey,\" Kelsey said. \"Ask Georgie to clean you up and give you a nice massage.\"\n\nLeela's eyes seemed to sparkle as the idea blossomed in her mind. She looked at Emberly for guidance and got a nice smile. Leela took a deep breath and walked toward the music in the living room. George was sitting on the couch, sipping on a beer, watching Brie and Tsuneo sixty-nining on the floor. Walking up to a naked man and extending her hand for him made Leela's heart pound. \"Wash me?\" she said softly.\n\nGeorge leapt to his feet and she led him to the bathroom. She thought about a shower but the bathtub looked reasonably clean. Use your power, she said to herself. Use your power.\n\n\"Fill the tub. Nice and hot. Do you have any fresh towels?\"\n\nGeorge took action, nearly tripping over himself. Leela smiled. In one crazy night, her life had changed.\n\nAn hour later, she and George walked back into the living room, with warm, clean skin and rejuvenated spirits. The sight of seven naked bodies tangled up in various sex acts took Leela's breath away.\n\n\"There they are,\" Kelsey smiled. \"Leela, come here, Honey. I've been givin' Emberly pussy lickin' lessons. I think she wants to try it out on you.\"\n\nLeela's head swiveled toward Emberly. Their eyes met and locked together, reading each other's thoughts the way good friends do. After some shy smiles and giggles, Leela was on the rug with her legs spread, her body propped up on her elbows so she could watch. Emberly got into position, on her stomach between Leela's legs, close enough to smell the soapy warmth emanating from her best friend's freshly scrubbed crotch.\n\n\"See how her pussy's different than mine?\" Kelsey said. \"It's super cute, isn't it? It's gonna taste super sweet 'cause she just had a bath.\"\n\nEmberly smiled shyly again and took a little taste with her tongue, just a quick lick. Her eyes grew big with excitement when Leela trembled a little. \n\n\"See that?\" Kelsey said. \"You got the power, girl.\"\n\nEmberly giggled. She liked the power. Her tongue extended for another lick, a more thorough, deeper one, while her big, pretty eyes watched Leela start to squirm. Oh yeah, she liked the power, a lot.\n\nShe liked the taste, too. Both tastes, actually. Kelsey tasted like pure sex \u2014 rich and raw, slippery with boy's cum. It was a taste that had surprised Emberly, a wake-up to her taste buds that was brand new. A savory wallop of earthy femininity. But Leela, fresh from her warm bath, she tasted light and fresh. The freshness emphasized the softness, and Emberly got lost in it, using all the tricks Kelsey had shown her.\n\nLeela moaned so deep she sounded like a different person. The muscles in her core contracted, over and over again, forcing out the guttural sounds. She lay back, flat on the floor, and let the surprising feelings build. As the coupling gathered a head of steam the ceiling blurred and seemed to move. All around her, in her dreamlike peripheral vision, naked bodies were having sex, boys fucking girls and girls fucking boys. The sounds were loud and getting louder. Raymond's big cock was just a few feet away, plunging Brie's depths doggie style, and the sloppy squish squish squish noise rose in Leela's ears. It all felt like a sexual explosion, happening in slow motion, and she was the epicenter.\n\nKelsey loved seeing the brand new sexuality between the good friends, but she couldn't resist guiding things to an even higher level. \"Georgie,\" she said, \"let Leela suck on your cock. Tsunie, Honey, lift up Emmie's hips and fuck her while she makes Leela cum.\"\n\nThe boys dropped what they were doing and everyone watched as Emberly and Leela's first fuck became a fourway. The two girl's eyes were wide when the unbelievable became real \u2014 dual full-body assaults that showed them what sex really was, and simultaneous explosive orgasms that were just the beginning of what lay ahead. \n\n\"Yeah, baby!\" Kelsey cheered. \"We partyin' now!\"\n\n\u2014\n\nThe next day the boys took Kelsey, Brie and Charity to the train station. They rode the subway, and were there faster than any of them wanted.\n\n\"You'll come back?\" Raymond asked, hugging Kelsey tight. \"I may be here a while.\"\n\n\"Sure, Honey,\" Kelsey said. \"New York City's awesome. Maybe we can get some others to come down with us. Maybe my mom and dad would wanna come.\"\n\nTsuneo and George looked confused.\n\n\"Don't worry, you guys,\" Kelsey said, her pretty face breaking into a big smile. My mom'll fuck the livin' shit outta both of you.\"",
        "Raymond smiled, too. \"She's wicked hot,\" he explained.\n\nThe look on the boys faces was priceless. Kelsey and the girls had changed their lives. \n\n\"Don't forget what we talked about, you guys,\" Kelsey said to them. \"Emmie and Leela are countin' on you to be cool at work. Keep it in your pants while you're there and you guys'll be golden. They're super fun girls.\"\n\n\"Yeah they are,\" Tsuneo said.\n\nKelsey, Brie and Charity worked their way down the line of boys, kissing them all, deep and sexy. Tsuneo and George were both hard when they watched the girls board the train, with hands in pockets to hide the lumps in their pants.\n\nRaymond turned to his roommates when the girls were gone. \"I didn't tell you,\" he said. \"Emmie and Leela invited us to their apartment for lunch.\" His face broke into a happy smile. \"You guys hungry?\""
    ],
    "authorname": "riverboy",
    "tags": [
        "three girls",
        "orgy",
        "swingers",
        "friends with benefits",
        "fuck buddys",
        "new york city",
        "brooklyn",
        "worksmates",
        "geek",
        "nerd"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/kelseys-world-ch-37"
}
{
    "title": "Ashley Finds Out",
    "pages": [
        "Lilac's brow furrowed and her hand slowed to a gentle rubbing, just to keep up the rhythm more than anything. Nothing was really doing it for her tonight - no new content in the usual places (or at least no new content that was good), and the old stuff she just knew too well. Ashley was still off at a week-long convention with some friends and wouldn't be back for days, so she had to take care of this mood on her own somehow. She scrolled bitterly through all the tabs she'd opened trying to find something that would work for her, but all it did was remind her that she'd been at this for nearly two hours.\n\nShe gave up on the half-hearted stimulation and pulled her hand away, staring at the moisture collected on it. This kind of material made her wetter than anything else, and was usually a surefire ticket to relief, but not today, it seemed. She wiped her fingers off on a tissue and tossed it in the trash, then closed the laptop lid and glanced around the apartment's living room guiltily. She'd promised Ashley that she wouldn't let it get too messy, a promise that had lasted only a few hours after she left before Lilac had decided she'd just clean it all up in a panic right before her girlfriend got home.\n\nShe looked down at herself, acknowledging for the first time that it was well past noon and she was still in her underwear. Ugh, and she hadn't showered either, she thought, fingering her long brown hair. More evidence that living in the same apartment as another human being was the only thing keeping her from descending into pure filth. She threw her head back and groaned; at least Ashley wasn't here to see her abandoning civilization. She wouldn't have to face the music for this mess until--\n\nThe front door's lock clicked and it was shoved open roughly by a tall, slim woman with short reddish-brown hair dragging a suitcase behind her. \"Hey Lilac! Sorry, I know I said I'd be back by three, but the buses were packed with people leaving and--\" She paused, looking at the state of the apartment and her confused girlfriend hanging out in her underwear. \"Um, what?\"\n\nLilac stared back at her, baffled. \"Wait, you're...I thought...don't you still have three more days?\"\n\nAshley shrugged, rolling her suitcase in. \"The convention got canceled, there was a bomb scare and they had to close it down.\" She delicately pushed a pizza box out of the way with her foot. \"Didn't you get my texts?\"\n\nLilac tried to picture where she'd left her phone. \"Ummm...I must have missed them.\" Her brain finally kicked back into gear and she got up. \"Sorry, let me clean some of this--\"\n\nA soda can found its way under her foot and she went up in the air, banging her shoulder into the table on the way down. Ashley was next to her in a flash, helping her up. \"Whoah! You okay there, Ly?\"\n\n\"Ugh, yeah, I...ouch!\" She winced, putting a hand to her shoulder where it had hit the table, surprised when it came back bloody. \"Shit, sorry. I should go take care of this. I'll...help you clean up once I get some disinfectant on this and bandage it.\" She looked down at herself. \"And, uh, get dressed.\"\n\nAshley looked the cut over. \"Yeah, doesn't look too bad. You just hit a sharp edge.\" She patted her on the head. \"You go clean yourself up, I'll start on the apartment. Gone a day and a half and you turn into a filth goblin!\" She walked off towards the kitchen to grab a trash bag and Lilac made her way to the bathroom.\n\nShe grabbed the first aid kit off its wall perch and turned to get a good angle in the mirror. Ashley was right, it wasn't that bad of a cut. It didn't take her long to disinfect and bandage it, and then she wandered into the bedroom to grab an I-gave-up-today outfit while trying to craft some kind of reasonable excuse for letting the apartment get this bad in under 36 hours.\n\n\"I'm sorry about the mess, Ash, I know I promised I'd--\" she began as she walked back into the living room. She saw Ashley jump at her voice and slam the laptop shut. Lilac's heart skipped a beat. She'd never told Ashley about her interest in hypnosis; she knew it was creepy and would probably seem like she was turned on by rape. She had planned to tell her eventually, but that stopped being a believable lie by the time they'd moved in together. Her mind was racing. She'd had dozens of tabs of porn open on that laptop from her desperate hunt. Had she closed the window? Did she move another one on top? Maybe Ashley hadn't actually looked at any of them? Her girlfriend's face was a mask. She couldn't tell.\n\n\"I-I, the, uh...\" Lilac began. \"Y-You see, there...I didn't know you'd...the mess, it was just, I was going to clean it up, but...I...I-I slept in today, that's why I called in sick...\" She could tell she was starting to hyperventilate, but she couldn't stop. Ashley was staring at her with concern now, and Lilac felt her vision start to tunnel. Ashley had definitely seen the tabs. There was no way she hadn't. What was the last one that had been open? Was it something awful?\n\nLilac couldn't stop talking. \"I can explain! It's, um, that was just research! I-I lost a bet, and, and I have to write some gross, creepy...\" She was standing next to the couch now but had no memory of having walked there. \"...shitty, filthy, rapey...\" Now she was sitting down and Ashley was hugging her tightly, which didn't make sense. \"...gross, ugly, creepy...\" Now she was just repeating herself! Why was she still talking?\n\nShe willed herself as hard as she could to shut up and buried her face in Ashley's shoulder, hugging her tightly. She could do nothing but let the panic attack run its course, enduring visions of her girlfriend leaving her with a look of impossible disgust. She wasn't sure if she was still talking or not, but it was beyond her control at this point. She pressed herself as close to Ashley's body as she could, convinced this was the last time she'd ever be able to.\n\nAfter what felt like an eternity she felt herself stabilizing. She slowly pulled herself away from Ashley, dismayed to notice a prominent damp spot on her shirt. She reached up to her face to confirm it was her fault. That was when she noticed how sore her arms were - she must've been squeezing Ashley as hard as she could. \"Sorry, I...\" she began, starting to turn away, unable to look Ashley in the face, trying to escape her hug.\n\n\"What was that all about, Ly?\" Ashley asked, and the genuine concern in her voice made Lilac stop. She felt a pang of guilt through the fear. Ashley knew more about her than anyone else in the world; why should she assume this was going to end things between them?\n\nLilac took a deep breath and wiped her eyes, then turned back to face Ashley. \"You, um...you saw the tabs, didn't you?\" She tried to meet Ashley's eyes but couldn't quite manage it, and settled for staring at the wet spot she'd made on her shirt.\n\n\"Yeah. I'm sorry for prying, I really didn't mean to! My phone logged me out of my PayPal, and I couldn't remember the password, and I just wanted to check if my ticket had been refunded and there were all those...\" She paused and leaned down, forcing Lilac to meet her gaze and see that she was smiling. \"So. Hypnosis, eh?\"\n\nLilac held her breath, save for a soft \"mhm.\"\n\n\"Wanna tell me about it, once you're feeling better?\"\n\nLilac exhaled slowly, then shakily nodded and pulled her girlfriend in for another hug. \"Uh huh.\" They stayed like that for a while, Ashley rubbing her back, the messy room forgotten for the time being.\n\n<hr size=\"2\" align=\"center\" style=\"width:100%\" >\n\nAshley smiled down at the zoned out girl in her lap. She was getting better at putting Lilac into a light trance now, but it wasn't deep enough for a lot of the stuff on her list. They'd been working at it for a couple of weeks now and things were going well; despite Lilac's initial concerns, she had turned out to be pretty susceptible to trance. They'd tried several places and positions, but head-in-lap seemed to work best for Lilac, which Ashley decided was proof that she had pillowy thighs. Hopefully not too pillowy, though; Lilac had actually fallen asleep when they'd tried having her lie down on their bed.\n\nAfter their initial talk and Lilac's anxious explanation about her fetish, Ashley had asked for some examples, and Lilac had sent her a folder called \"Favorites\". She'd looked at the images and skimmed through the stories, doing her best to write down what seemed to be common items between them. Then she did some research and tried to figure out what was doable and what wasn't, and sat down with Lilac to go over it and make sure she was okay with all of them. By the third or fourth item she'd started blushing furiously and covering her face, which Ashley knew from experience meant she was on the right track.\n\n\"Drift even deeper into trance as you listen to my words,\" Ashley continued, watching Lilac breathe softly, her eyes just barely shut. She wasn't entirely sure where Lilac's dramatic fears about how her fetish would be viewed had come from, but Ashley was used to her girlfriend working things up in her head until they became monsters. Lilac needed gentle reassurances about herself and her fetish right now. Whatever reason she had for her dramatic reaction to having it discovered was probably complicated and personal; whether that should be addressed was something she had to decide for herself, and pressing her on it would likely only make her more anxious.\n\nAshley paused, looking at the next section in her notes. She wasn't too sure this hypnosis stuff even worked, but it seemed real enough to Lilac, and she'd been responding pretty positively to it. Ashley still wasn't entirely sure Lilac believed her when she said she didn't think she was a creep because of her fetish, but there had been a certain new spring in her step that seemed to indicate a weight had been lifted off her shoulders. And the sex, well...the thought of what the future had in store seemed to be giving Lilac a boost there, too.\n\nWhen she'd talked with Lilac about limits and boundaries, she hadn't even been entirely sure how many of them would come up. They'd done bondage before, and even tried some harder stuff, but you could actually get hurt with those. This was basically just...guided meditation, right? It was hard to imagine consent coming into play, especially since Lilac had explained several times that hypnosis wasn't the perfect mind control usually seen in media. Not that Ashley could even remember the last time she'd seen it in something, but Lilac definitely seemed to feel it was everpresent.\n\nShe watched Lilac's chest rise and fall, her hands interlaced across her stomach. She seemed so at ease right now that Ashley was almost a little jealous. It was a far cry from the sobbing mess she'd been earlier this week. \"Why are you always so hard on yourself, Ly?\" she whispered softly.\n\nTo her surprise, Lilac responded, albeit sluggishly and quietly. \"Not...always...\" Ashley remembered what Lilac had warned her about - that hypnosis was a state of suggestibility, and that she would probably be less inhibited while under it. Ashley hadn't realized that might extend to how honest she was willing to be.\n\nShe paused. Maybe this wasn't something she should pry about, but she wanted to know when Lilac felt she was easier on herself. In Ashley's experience, those moments were rare and fleeting. \"When are you not?\" she asked.\n\nThe answer this time took so long that Ashley began to wonder if she'd just imagined the first one. \"When I'm...with you...\" Lilac finally said, her face serene. Ashley felt something tighten in her chest.\n\n<hr size=\"2\" align=\"center\" style=\"width:100%\" >\n\nLilac made her way across the room to where Ashley was sitting on the couch. Ashley had a funny smile on her face, which usually meant she was up to something, but Lilac didn't really care this time - she'd had a long day and needed a nap, and Ashley's lap looked like the perfect place to rest. She worked herself up onto the couch from the floor and then crawled into Ashley's lap. It was more difficult than she felt it should have been, and after trying to curl up in it for a bit she just settled for resting her head on it and splaying the rest of herself across the couch. Ashley was snickering about something that only seemed to be getting funnier by the second, and Lilac lifted her head up to bump into one of her hands. That seemed to do the trick, and soon Ashley was petting her gently as she drifted off into a warm sleep.\n\n\"Oh my god, Ly,\" Ashley said softly, stroking her hair.\n\n\"Meoooow...\" Lilac replied, rolling her head slightly so Ashley would hit the right spots. She was really good at this, but she was also really bad at this. Why was she talking? Lilac didn't care about that! All she needed to do was pet her head, juuuuust like that...\n\nAshley turned on the TV, but Lilac tuned it out and let herself doze, emitting soft sounds of happiness now and then. She drifted in and out of consciousness, repositioning herself whenever stiffness threatened to ruin her peace, until she was lying on her back with her head tucked into her human's lap, tilted away from the distracting TV.\n\nSuddenly she felt a hand gliding across her side and settling on her tummy. She wouldn't dare! Lilac thought huffily, and opened her eyes. Ashley was grinning and looking down at her as she gently rubbed her tummy. She needed to be reminded who was in charge here! Lilac grabbed at her hand and nipped it playfully.\n\n\"Augh! Haha! Noooo! Okay, that's enough! Lilac, you're a bad kitty!\" Ashley said, still giggling, and Lilac's awareness slowly began to grow. She released her teeth - it really had been just a nip, honest! - and stared down at Ashley's hand in confusion. She'd left some red marks, but thankfully hadn't broken the skin. She looked herself up and down next; she was still clothed, which was a surprise to her. It wasn't even skimpy stuff, just what she'd worn to work today. Wait, did that mean that...\n\n\"Ash, you...how long was I a cat!?\" she demanded haughtily, turning to her girlfriend to see her grinning like an idiot. She knew her cheeks were beet red - she must have looked ridiculous.\n\n\"You didn't even make it an hour before you tried to bite me! You're such a bad kitty, Lilac!\" Ashley laughed. \"It's not even six yet. Watching you walk in the door and then drop on all fours and meow at me was surreal.\"\n\nWith a sigh of feigned exasperation to hide her own secret glee, Lilac dropped her head back on Ashley's lap. \"Well, I hope you had fun, because you're making dinner tonight after that stunt.\" She looked up to see a mischievous smile.\n\n\"You bit me, and I have to go make dinner?\" Ashley laughed. \"That doesn't seem right. I've got a better idea.\"\n\nLilac's eyes widened. \"Wait, what do you--\"\n\n\"Dream deep, Lilac.\"\n\nAnd she felt her consciousness fade away.\n\n<hr size=\"2\" align=\"center\" style=\"width:100%\" >\n\nLilac bustled in the kitchen, carefully preparing shrimp scampi for her mistress. She had to make sure it was perfect so she could make up for her earlier affront. Imagine - insisting her mistress should make a meal for her! She couldn't understand why she had thought to say that. Thankfully her mistress had simply laughed at the notion and Lilac had come back to her senses and hurried off, first to the bedroom to change into a more proper outfit, and then to the kitchen.\n\nShe delicately placed the cooked shrimp on top of the pasta before layering more on, adding sprinkles of garnish, trying to make the dish more visually appealing. Finally, she placed it on a tray and walked it to the living room, where Mistress Ashley had been patiently waiting. \"Your meal, mistress,\" she announced, laying it on the table in front of her and backing off with a curtsy, waiting to be dismissed.\n\nMistress Ashley smiled at her. \"Thanks, Lilac. Now, don't forget your own meal.\"\n\nLilac brought her hands to her mouth in shock. \"Why, I could never eat at the same table as you, mistress! It would be quite improper!\"\n\nHer mistress laughed - such a delightful noise! - and gestured below her waist. \"No, Lilac, I mean this.\"\n\nAt those words Lilac felt something rearrange itself inside her head and her worldview shifted ever so slightly. She curtsied again. \"Ah, of course, mistress! Please forgive me, I do not know what I was thinking.\" She pushed the table back a bit so she could kneel down between Mistress Ashley's legs. \"Thank you for the meal, mistress,\" she said, lifting up her mistress's skirt and pushing her head underneath.\n\nLilac worked her way up her mistress's lovely thighs slowly, planting soft kisses as she went, until she reached her panties. She slid them down reverently, relishing in the sight and smell of her mistress's pussy. She closed her eyes and opened her mouth, pressing her head forward to begin relishing her taste as well. This was a part of her mistress that only she, her most trusted maid, was granted access to, and she cherished it.\n\nShe started her work in earnest, listening carefully to the noises her mistress made, letting them guide her. She knew Mistress Ashley very well down here, and her tongue knew where to go almost on its own. She started small, with soft, slow licks, and waited until she could feel the heat building before moving onto more direct stimulation. It was a careful dance to avoid overdoing it, as her mistress could be a tad on the sensitive side, but it was one she performed effortlessly.\n\nShe quickly lost track of time and simply existed between her mistress's legs, tending to her needs. It could have been minutes or hours, but eventually she felt the movements above her quicken and a hand press lightly on her head. Mistress Ashley's legs squeezed gently together, and Lilac happily pushed herself forward, burying herself in her muff. Her mistress's hips began to gyrate forward, and a moment later Lilac felt her tense and squeeze around her tongue. She rode the orgasm out proudly, waiting until her mistress had exhausted herself before wiping her mouth and pulling herself back from underneath the skirt. She took the discarded panties from where they were on the floor and placed them on the table, folding them carefully. Then she did another curtsy before backing away towards the kitchen. \"Thank you for your time, Mistress Ashley. I will return to my duties now, if you do not require me any longer?\"\n\nMistress Ashley raised a hand while she caught her breath, and Lilac dutifully waited. \"Hang on Lilac, just a second,\" she said, panting slightly. \"That's enough. Your services are no longer required.\"\n\nAgain Lilac's worldview began to shift and resettle. Mistress Ashley turned into...just Ashley. Her girlfriend, not her employer. And her mouth was...yeah, that taste was still there, that was definitely real. She looked down at herself - the proper maid attire she'd thought she was wearing was apparently a white skirt combined with a black blouse. She felt her cheeks start to heat up and her hands flew to cover her face without even thinking. \"O-Oh,\" she stammered. \"Oh, okay. That was...whoah, okay. I was the...and you...\"\n\nAshley patted the couch next to her, and Lilac came to sit down, still a little shellshocked. \"What was it like?\" Ashley asked curiously. \"I wasn't expecting you to go change and then make me dinner. You didn't even seem to be thinking about sex until I reminded you about it!\"\n\nLilac couldn't stop blushing as she tried to recall how she'd been feeling. \"It's...it's so strange. I can remember what I was thinking, and I can even remember why I was thinking it, and it all made sense at the time. I was the maid, a maid cooks and cleans!\" She peeked at Ashley from between her fingers. \"And then I remember when you t-told me to eat you out, and I guess I thought...well, my...\" She fished for any word that wasn't the actual one, which she was finding herself unable to say.",
        "\"Your mistress, right?\" Ashley continued for her, snickering. \"I'll admit, it was pretty nice to hear you call me that. I might have to do something more with that later.\"\n\nLilac squeaked excitedly. \"Yes, um, I guess I thought my...my mistress couldn't be wrong. So when you told me something that didn't seem right...I rewrote my own views to match it.\"\n\n\"Wait, rewrote them? Just like that? That...seems a bit dangerous,\" Ashley said, frowning.\n\nLilac pulled her hands down from her face and put them in her lap, staring at them. She was smiling now. \"It's okay, Ash. I felt safe.\" She snuggled into Ashley's side. \"Because it was you, you know? You'd never hurt me. I trust you. Besides, it undid itself when you brought me back up anyway.\"\n\nThe teasing had disappeared from Ashley's voice, replaced with a more serious edge. \"I dunno, Ly. I did that without really thinking about it because I thought you were interested at the time. It bothers me a little to know that wasn't the case.\" Lilac's warm afterglow started to fade. She suddenly didn't like the way this conversation was going. \"Knowing that you weren't interested in it but went along with it just because I told you to, well...it feels a little...\" She broke off, trying to find the right words.\n\nLilac's fears jumped right back to the front of her mind and she felt herself withdrawing. She knew what Ashley was trying to say. It was obvious to her, now that she wasn't drunk on her own excitement. \"It makes you feel like you raped me,\" she said quietly. \"You're trying to phrase it nicely, but that's what it is, isn't it?\" She felt movement to her side as Ashley tried to shift to face her, but she wrapped her arms around Ashley's and stared adamantly at the floor. They sat silently like that for several seconds. Lilac felt upsettingly vulnerable.\n\nWhen Ashley spoke, her voice was delicate and measured. \"I don't feel like I raped you, Lilac,\" she said carefully. \"I'm worried that when you're in an altered state of mind, I could make you do something you don't want to do. It was okay this time, but I didn't even realize it was happening. It worries me how easy it is for me to not even notice.\"\n\n\"It's--\" Lilac cut herself off, choking back an automatic defensive response. She took a deep breath and tried to remind herself that Ashley's concerns were valid and not the kneejerk reactions she was always afraid of when it came to talking about her fetish. Ashley was just trying to make sure they were both safe and comfortable, and getting into an argument here wouldn't help anything. \"It's not that I didn't want to do it,\" she continued, trying to sort through her own complicated and conflicting memories. \"It's just that...when you suggested I eat you out, the scenario shifted a bit in my head. It's like...if I were wearing something sexy, and I was going to eat you out in it, but you suggested I take it off first. It's not that I didn't want to. I just hadn't thought of it as part of the scenario until you said it.\"\n\n\"But you're extremely suggestible under hypnosis. You warned me about that!\" Ashley objected. \"How can I be sure you're going along with something because you want to, and not just because I suggested it to you?\"\n\nLilac finally raised her eyes up to look at Ashley. Her girlfriend looked more than just concerned, she looked scared. She felt a wave of anxiety welling up within her, but she willed it to wait just a little longer. \"A big part of what I want is to be hypnotized and told what to do, Ash. I think I enjoyed eating you out even more than I normally do because you made me want to do it. Feeling my desires be molded and my will be bent, but in a safe environment with someone I trust...that's part of my fantasy too, Ashley!\" She struggled to maintain eye contact and lost, and her gaze dropped back to the floor. She knew Ashley would feel guilty about how upset she was, but she was too anxious to remember how to hide it. Ashley never called her out on it, but she knew it was manipulative of her, and she knew that she did it more often than not when she got stressed. She felt even grosser than normal. With one final push, she forced herself to get the most important words out before her anxiety stole them from her entirely. \"B-But your concerns are valid, too. If this is too much for you...then it stops here.\"\n\nWhy had she phrased it like an ultimatum? That was even worse! Ashley didn't deserve that! At least she'd tried it before getting creeped out. LIlac had gotten to live some of her fantasies out, at least for a little while. She closed her eyes and leaned into Ashley again. She suddenly felt exhausted and wanted nothing more than to just drift off into a dreamless sleep. It took more effort than she expected to rouse herself when Ashley finally said something.\n\n\"Did the cat thing turn you on as much as the maid thing?\" she asked.\n\nLilac thought about it for a moment, her mind sluggish and unwilling to put forth the effort. \"It's not about how turned on I am,\" she murmured at last. \"It's about giving up control to someone I love and trust. I enjoyed them both equally.\" She couldn't find the courage to add what she was really thinking, though. That what had turned her on the most was realizing just how easily Ashley could toy with her mind.\n\nThey sat together quietly for several minutes. Lilac couldn't think of anything to say that didn't seem like it would make things worse, and it was taking all she had to keep her rising panic from turning into a full on attack. Finally, Ashley spoke up. \"You remember when we were trying bondage, and I tied you up poorly and you got a rope burn?\" she said carefully. \"And I freaked out and you were insisting it was fine, that you were alright? It's kind of like that.\" She paused, considering. \"Well, I guess in this case it's more like I saw that you might get a rope burn. The point is, this morning I didn't think that was possible, and I got scared when it happened. But I don't want to stop. I just need some time to...I dunno. Do some research. Think about things a bit. Prepare myself so that I know how to do that on purpose and not by accident. But we're not done.\" Lilac felt Ashley's face press against the top of her head. \"I love you, and this is still something I want to share with you.\"\n\nLilac smiled softly, the panic finally relinquishing some of its grip on her.\n\n\"So,\" Ashley continued. \"That food is probably pretty cold now, huh.\"\n\n\"And I didn't make any for myself,\" Lilac added, giggling. \"I was too focused on my mistress.\" She wiggled herself underneath Ashley's arm and laid her head in her lap. \"Want me to go heat it up for you, m'lady?\"\n\n\"Wow, how dare you,\" Ashley retorted, grinning. \"No, I'm gonna go do it myself. It looks too good to waste. If you want it you can have it, or you can scrounge up some leftovers.\"\n\nLilac made exaggerated whining noises as Ashley pushed her off and got up to take the plate to the kitchen. \"Noooooo, I already aaaate thouuuuugh!\"\n\n\"Well you're eating again!\" Ashley called back from the kitchen door. \"Now get in here and figure out what you're having before I make you!\"\n\nLilac's face flushed and she scrambled up. \"O-Okay, okay, I'm coming!\" She hurried off to the kitchen. Ashley's panties stayed where they were, folded delicately on the table.\n\n<hr size=\"2\" align=\"center\" style=\"width:100%\" >\n\nAshley scrolled through Twitter on her phone, waiting for Lilac to finish making dinner so they could settle in for a movie. Her girlfriend had been on fire lately when it came to cooking; normally they switched off, but she'd recently gotten her hands on a cookbook and was working her way through it (mostly successfully!). Ashley had asked where she had even been keeping it, and she confessed that she'd bought it online and paid for overnight shipping after the \"maid episode\", as she called it. She'd also admitted to ordering an actual maid outfit; she said that if she was going to be one again in the future, she wanted to at least be able to actually look the part. Ashley still hadn't found a proper solution for her own worries, so for now she was just doing her best to be more careful with what she said when Lilac was in a suggestible state.\n\nLilac had said tonight was chicken alfredo, which didn't seem like a very fancy cookbook dish, but Ashley had let her pick the meal since she was doing the cooking. It was just nice to see her girlfriend in such high spirits so much more of the time than usual. Lilac was still pretty shy about being happy, but Ashley could tell that she was relieved to have finally gotten this out in the open. And it felt nice to be let in on the secret, too; she could tell Lilac still felt bad about not telling her for so long, but if anything she only regretted not being able to fill this particular niche for her until now. Messing with her head was turning out to be surprisingly fun.\n\nA clatter and thud noise from the kitchen drew her attention, and when it wasn't followed by the usual \"I'm okay!\" Ashley got up and rushed in to check on Lilac. She found her girlfriend doubled over the countertop, arms crossed on the counter with her face buried in them, legs pressed together and trembling all over. \"Lilac! What's wrong?\" Ashley asked, but her only response was a shaky thumbs-up.\n\nNow that she knew Lilac was okay, Ashley took a closer look around. Lilac's laptop was playing some video about weird cat groomers, and looked fortunately undamaged. The clatter had probably been the cheese grater being knocked across the countertop, and the thud would've been Lilac collapsing. Lilac was still shaking and panting heavily; Ashley could see a glazed look in her eyes and reddened cheeks now that she'd rolled her head to the side.\n\nThe laptop was still running. \"And this is my Isabella!\" the woman said, hoisting up a very grumpy looking blue persian. \"She's the pride of her pedigree, and she's also a very good girl.\" Lilac moaned loudly and started trembling again, rubbing her legs together and pressing her face back into her arms for a few seconds before breaking into heavy pants.\n\nAshley paused the video with one hand, the other slowly raising to her mouth. \"Oh,\" she said with quiet amusement as realization dawned on her. \"I guess you found out, huh?\" She leaned in close and whispered right into Lilac's ear. \"That you like being called a good girl.\" Lilac moaned again, much more loudly this time, sagging against the countertop as her legs buckled. Ashley caught her as she fell - she was shaking like a leaf! - and helped support her, walking her over to the next room and helping her lie down on the couch. Her face was as red as Ashley had ever seen it and she was panting with exertion; three mind-shattering orgasms (or near enough to count) in a row had clearly taken their toll. \"You're so damn cute,\" Ashley said, patting her on the head.\n\n\"N...Nuh...\" Lilac stammered breathlessly, struggling to crack her eyes. Her arm unfolded itself and she pointed a trembling hand in the direction of the kitchen, trying to form words.\n\nAshley kissed her on the forehead. \"I'll take care of dinner. You rest.\" She paused, looking at her girlfriend's ragged breathing and fluttering eyes, a sudden mental debate raging within her. Seeing Lilac's heaving chest and flushed face settled it for her. \"Good girl,\" she said softly, once more.\n\nLilac's eyes went wide and her back arched up as she made a choked groaning noise, her waist trying to hump the air above her. Her arms pressed back down into the couch to support her, hands scrabbling against the sofa cover for purchase. She tried to say something, but all that made it out was \"Ah...ah! AH!\" Spasms rocked her body and her thrusts slowed, until finally she was settled back on the couch. Ashley had thought she looked spent before; she looked utterly drained now. Her head lolled to the side and her breath was coming out in pants and gasps like she'd just run a marathon. Her mouth was moving as if she were trying to speak, but no words came out. All the motion had caused her shirt to slide up her torso a bit; Ashley kissed her exposed belly, eliciting a whimper.\n\nShe took a blanket from the back of the couch and draped it gently over her quivering girlfriend. \"Good job,\" she said, relishing the way Lilac's body tensed at the first word and relaxed after the second. \"You rest up. I'll finish dinner.\" She kissed Lilac on the forehead and left her to slowly collect herself, panting and gazing into the distance with glassy eyes.\n\n<hr size=\"2\" align=\"center\" style=\"width:100%\" >\n\n\"I had a thought, Lilac,\" Ashley said, leaning against the doorframe of the living room.\n\nLilac looked up from her laptop. \"Uh huh?\" she said, a bit of excitement showing on her face.\n\n\"No, it was...it's about my concerns about hypnosis.\" Ashley put her hands up quickly as she saw her girlfriend's face fall. \"No, no! It's a good one. I think I know how to put my worries aside.\"\n\nLilac tilted her head a little, her hair cascading down her shoulders. \"Okay. Lay it on me.\"\n\nAshley couldn't tell if she was worried or not, so she decided to just push ahead. \"I want to give you a safeword. And...I want to program you so that you'll use it automatically if you need to.\"\n\nLilac's eyes darted around the room briefly and she visibly swallowed. \"I...I think that's a good idea. Do you think the normal one is good enough?\"\n\nAshley breathed a sigh of relief and walked across the room, sitting on the couch. She hadn't thought Lilac would object, but this was still unknown territory for her, so there had still been a chance. \"Yeah, I think so. Alright, this should only take a few minutes, so let's just go ahead and get it done.\" She patted her lap, enjoying seeing Lilac's cheeks flush as she realized what Ashley was telling her to do.\n\n\"O-Oh! Yeah, of course! Sure!\" Lilac put her laptop aside and laid herself out on the couch, putting her head in Ashley's lap. Her eyes looked up at Ashley as she waited for the magic words.\n\n\"Dream deep, Lilac,\" Ashley said gently, and her girlfriend's eyelids shut and the slack left her body. Her breathing slowed and her mouth curled up in a soft smile. Ashley found herself smiling too; she was going to feel a lot safer once she knew Lilac could object if she ever crossed a line.\n\n\"Can you hear me, Lilac?\" she asked, the same way she did every time. \"Good. Okay, I'm going to install that safeword now, okay? Do you remember the one we use normally?\" Lilac nodded again. \"Good. Tell me what it is.\"\n\n\"Stoplight...\" she murmured softly.\n\n\"Good! Now, if I ever make you uncomfortable or upset while you're under hypnosis, or if something I do with hypnosis makes you uncomfortable or upset, and you want to stop it, you will say your safeword, stoplight.\" Ashley looked at her girlfriend's dopey half-smile. \"This is very important. You will say it, even if you're worried it will make me disappointed. Do you understand?\" Lilac hesitated, her brow furrowing, but after a moment she nodded. \"Repeat the instructions back to me.\"\n\n\"If you ever make me...uncomfortable or upset while I'm under hypnosis, or if you do anything with hypnosis that makes me uncomfortable or upset, then I will say stoplight. E-Even if I think it will disappoint you.\"\n\nLilac's hesitation bothered Ashley. She didn't like feeling like she was forcing this on her, but this was the best way to be safe. Even if Lilac didn't think this was necessary, this wouldn't hurt anything - it could only help. Her girlfriend could be a bit impulsive sometimes, and a failsafe was always a good idea. Besides, it was a weight off her shoulders knowing that she didn't have to carefully watch everything she said while Lilac was under hypnosis.\n\nLilac would probably be more okay with it when she woke up and realized that wasn't all Ashley was doing while she was under, either.\n\n<hr size=\"2\" align=\"center\" style=\"width:100%\" >\n\n\"...and awake.\"\n\nAshley smiled at Lilac as her eyes slowly opened, blinking a few times to clear the torpor. She rubbed at them as she sat up. \"So that's it, then? The safeword's in?\" she asked.\n\n\"It's in,\" Ashley confirmed, nodding. \"I also took the time to put a couple of other things in while I had you under. I hid some of them from you, though.\" She loved the way Lilac's cheeks flushed at that. Now that she'd put in the safeword instructions, she was willing to try some of her more daring ideas. It caught her off guard how excited she'd found herself while she was programming Lilac - she may have started this to satisfy her girlfriend, but she found herself liking it more and more as she went.\n\nLilac wriggled a little, her hands fidgeting. \"Y-Yeah, I remember...you let me remember the, um, command phrase.\" She blushed furiously, unable to meet Ashley's gaze. \"Orders are orders.\"\n\n\"And then you do whatever I say after that. You like it, right? That gimmick was in a bunch of your stories,\" Ashley teased. She glanced over to where Lilac's clothes were lying in a rough stack on the table - looks like that one had been successfully hidden, then. Lilac squirming like that while buck naked was incredibly cute. Her girlfriend had a lot of misgivings about her own body, but Ashley couldn't think of a single part she'd change. There was something she still had to check, though.\n\nAshley reached her hand forward and laid it on Lilac's breast. Lilac didn't acknowledge the touch and continued fidgeting shyly; it had worked! \"Why don't you find something to put on and let's just cuddle for a bit?\" Ashley said innocently, handing Lilac the remote. They both got up and Lilac started sorting through Netflix while Ashley opened up the pull-out couch. It wasn't as nice as the bed, but the TV was in the living room, and this made for a better cuddling surface if they wanted to do more than just lean on each other's shoulders.\n\nLilac picked something non-committal and they both stretched out on the sheets, angled slightly towards each other. One of Ashley's arms went around Lilac's shoulders and draped down onto her chest, finding a breast to gently fondle. Lilac snuggled into her, not commenting on the heavy petting, but Ashley could see a slight blush forming on her cheeks. Her expression remained unchanged, however.\n\nAshley sat back and enjoyed the movie, kneading and rolling Lilac's breasts throughout. They weren't very big, but there was enough to grip and squeeze, and she enjoyed toying with them. Although Lilac commented normally on the movie and was able to hold conversations, her body was definitely reacting to the stimulation. About halfway through, Ashley decided to ramp things up a little, and reached down to play with Lilac's pussy while her girlfriend was in mid-sentence complaining about some of the CGI. Aside from opening her legs slightly to allow Ashley easier access, Lilac didn't acknowledge the questing fingers, although her voice did hitch slightly for a moment as they brushed across her lips. She was already wet, which wasn't a surprise; it usually didn't take long to get Lilac in the mood, and she'd been being teased for over half an hour at this point.\n\nAlthough Ashley knew how to work Lilac into a frenzy quickly, she took her time playing with the girl. They still had the rest of the movie to get through, and it was amusing to watch Lilac grow increasingly red in the face while still not noticing what was going on. She was starting to get out of breath, which only made her ongoing remarks about the movie harder to understand. Normally by this point she'd have been begging Ashley to stop toying with her and let her cum, but since she wasn't even aware of her own arousal right now she could request no such reprieve. She really shouldn't have picked such a long movie, Ashley mused.",
        "When the credits finally rolled, Ashley decided to take pity on the poor girl and stop edging her. Lilac started trying to discuss how the film did, but most of what she said was a garbled, breathless mess; she must've thought she was speaking clearly, but she'd obviously lost any ability to focus a while ago. Her legs were twitching and squeezing around Ashley's hand while she talked; even if she didn't consciously know what was going on, her body was begging for release.\n\nAshley patiently waited for Lilac to come to a stop in whatever point she was making about the movie and look at her expectantly, as if expecting some kind of answer to the nonsense she'd been spouting for the last couple of minutes. \"You can notice what you're wearing now,\" Ashley said instead.\n\nLilac's face went through multiple stages as her awareness returned. Ashley saw confusion first (Lilac was probably wondering what kind of answer that was), quickly followed by panicked excitement as she realized she could feel the sheets and Ashley's clothes and hands on her bare skin. Next came a brief flash of realization as it dawned on her what was happening, but it was quickly taken over entirely by raw lust as her conscious mind finally processed the burning need to cum she'd been unable to acknowledge for at least the last hour and a half. Her head rolled back a little and her eyes fluttered. Ashley quickly leaned in to whisper in her ear.\n\n\"Orders are orders, Lilac. You can't cum without my permission.\" A frustrated whine made its way out of Lilac's throat at the command, but Ashley wasn't sure if she'd actually realized what she was in for. Ashley quickly ramped up her gentle teasing, doing her best to get Lilac off; she wanted to see if the order worked.\n\nIn the state Lilac was in right now, she'd normally have cum within seconds, but instead she just moaned in frustration as the torture went on and on. \"Please, Ashley...\" she begged, writhing. \"Please!\"\n\n\"Please what?\" Ashley asked innocently, plugging away at Lilac's pussy, enjoying every moment of her girlfriend's frantic squirming as she tried to force the fingers deeper into herself.\n\n\"PLEASE!\" Lilac yelled. \"Please let me cum! Oh, Ash, please, please! I need it so badly!\" Her eyes were screwed shut and her breath was ragged. She bucked her hips into Ashley's hand desperately.\n\nAshley considered it for a moment while she continued to play with the girl. \"Hmmm...well, since you asked so nicely...sure. Lilac, you--\"\n\nShe didn't have a chance to finish the sentence. The moment she said \"sure\", Lilac's eyes shot open and she arched her back into Ashley's hand. Ashley felt Lilac clamp down around it as she came, hard. It went on and on until finally Lilac fell back down, panting and drenched in sweat, eyes closed. \"T-Thanks, Ash...\" she mumbled, leaning limply into her.\n\n\"Alright, let's get you dressed,\" Ashley said, smiling. She moved to get up and Lilac grabbed her arm, a sly smile on her face.\n\n\"No, I'm...good like this. Let's watch something else! You pick while I go use the bathroom.\" She let go of Ashley's arm and started getting up herself, then yelped and pulled her hand away from where she'd put it down. They both looked down at the massive wet patch on the sheets right where Lilac's crotch had been for the last couple of hours.\n\n\"...while I use the bathroom and then put the sheets in the laundry,\" Lilac corrected herself quietly, blushing. Ashley just nodded in amazement, still staring at the puddle.\n\n<hr size=\"2\" align=\"center\" style=\"width:100%\" >\n\n\"Goodnight, Cassie!\" Ashley called, closing the bedroom door. She turned around and found herself staring at a lingerie-clad Lilac. Her eyes wandered over the lacy, see-through outfit and Lilac's soft curves for a moment before her senses caught up. \"Wh-- Ly, we have a guest!\" she whispered, looking back towards the door, as if expecting it to burst open.\n\nLilac sauntered over to her and began pulling her towards the bed. \"I knoooooow, but it's been a week since our little movie night and we haven't done anything because of Cass!\"\n\n\"Well it's not her fault her hotel fell through! She needed a place to stay!\" Ashley retorted, although she only put up a token resistance to Lilac's insistent dragging. \"Her flight leaves tomorrow, we can play afterwards,\" she added teasingly.\n\nLilac pouted. \"Yeah, tomorrow at eleven pm! We're gonna be so tired there won't be time for anything!\" She traced a finger around Ashley's breast before nuzzling into her, fluttering her eyes. \"And I wanna play nooooow!\"\n\nAshley glanced between her girlfriend and the door a few times. \"Well...\" Lilac looked up at her innocently, slowly dragging Ashley's hand towards her crotch. \"...okay, but you have to be quiet.\" A gleeful smile spread across Lilac's face and she stretched up for a kiss. After their lips parted, Ashley whispered, \"Orders are orders, Lilac. You can't make any noise.\"\n\nLilac opened her mouth to protest, but no sound came out. Her hands flew up to cover it as the realization set in. Ashley grinned and spun her around, gently laying her out on the bed as a furious blush crept into her cheeks. Her face became fuzzy as Ashley ducked underneath the gauzy dress and peeled back Lilac's undergarments. Her girlfriend wasn't naturally very hairy, but even so she always shaved when she was planning on sex. Ashley thought it looked cute either way, so she had no objections; if she was able to surprise Lilac, she'd get to see a little bush, and if Lilac surprised her, it'd be clean shaven, like it was tonight.\n\nWhen Lilac went down on Ashley, it was usually at the pace that Ashley wanted it to be at. She liked directing Lilac in that way. But when she went down on Lilac, it was at her pace, and she directed Lilac in a different way. Taking such direct control of her girlfriend's pleasure was an experience she relished. She wrapped her arms around Lilac's legs to limit their movements, putting her hands on top of her thighs as if she were flexing; normally that elicited a squeak of excitement, but it seemed Lilac was well and truly mute for the time being, and instead Ashley only felt her tense in anticipation.\n\nAs much as she wanted to take her time, Ashley couldn't help but think of Cassie in the next room. She didn't want to spend too much time on this and risk causing an embarrassing incident. Fortunately, she knew how to play Lilac expertly at this point, and so she began working her into a writhing, noiseless mess. It really was incredible that she was managing to stay quiet - normally she'd be gasping and moaning nonstop by this point. Ashley started to speed up, quickly working to make Lilac cum.\n\nBut she didn't.\n\nAshley started to feel that something was wrong. Lilac was responding just how she expected, except that she wasn't cumming. And she wasn't begging, obviously, but that was intentional. She was definitely enjoying it - even if Ashley couldn't hear the usual audio cues, she could feel Lilac bucking into her mouth and taste her flowing juices.\n\nShe decided to see if anything was wrong and withdrew her mouth, replacing it with her fingers. With the see-through fabric out of her way, she could see that Lilac was exactly how she'd expected. She was clutching at the bedsheets, eyes screwed tightly shut, face beet red, and mouthing voiceless pleas. She definitely wasn't trying to hold out.\n\nAshley bent over her. \"Orders are orders, Lilac. You can talk in a whisper now.\"\n\n\"--ease please please Ashley please let me cum please I need it so badly I--\"\n\nAshley connected the dots with a shock. \"Oh, right! Okay, orders are orders, Lilac, no more speaking.\" Lilac's voice disappeared again instantly; she didn't even seem to be aware that it had come back at all, however briefly. \"And you no longer need my permission to cum.\"\n\nLilac instantly impaled herself on Ashley's hand, twitching and squeezing around it, her legs tightening on Ashley's arm as she bucked and shook. Ashley watched her babble silently with a certain sense of pride; knowing Lilac, there were probably a few \"thank yous\" in there, but it was impossible to tell. She snuggled in next to Lilac and waited for her breathing to return to normal and her legs to stop shaking.\n\nLilac tilted her head and opened her mouth to say something, but no words came out. She stuck out her tongue and made a face, then smiled and kissed Ashley before getting up, heading for the bathroom. Ashley yawned and wiggled under the blankets; it was late and she was tired, and she just wanted to close her eyes for a few minutes while Lilac finished up in the bathroom...\n\nThe next thing she knew, Lilac was shaking her awake frantically. She blinked a few times, groggy, and slowly acknowledged the sound of knocking on their bedroom door. \"Wake up, sleepyheads!\" came Cassie's voice from behind it. \"I've got breakfast ready, get it while it's hot!\"\n\nAshley groaned and rolled over, squeezing her eyes shut and waving her arms sleepily at Lilac. \"I'll be there in a minute, I'll be there in a minute...\" But Lilac kept shaking her, and so Ashley opened her eyes and looked up at her grumpily.\n\nLilac pointed at her mouth, a wry smile on her lips. \"Whoops,\" Ashley said, remembering the previous night. \"Orders are orders, Lilac. You may speak freely again.\"\n\n\"Ahhhhh, much better,\" she said, breathing a sigh of relief and turning towards the door. \"We'll be right out, Cassie!\" She turned back to Ashley and prepared to drag her out of bed towards the smell of bacon. \"Let's go, Ash. Those pancakes aren't gonna eat themselves.\"\n\nBut Ashley had already rolled back over and fallen back asleep.\n\n<hr size=\"2\" align=\"center\" style=\"width:100%\" >\n\nLilac dropped herself on the bed with a tired whine. She and Ashley had had a fun, but exhausting, date night out, and she was ready to collapse. They'd both taken time off so they could celebrate their four year anniversary and they'd spent the day walking the entire botanical gardens, lost in a haze of romance. But now that they were back home, Lilac could finally feel how sore her legs and feet were; she was a sedentary creature by nature, and her body was throwing a fit about the unexpected fitness. The general lack of sleep she'd gotten due to her recent overtime wasn't helping matters, either. She wanted nothing more than to change and head straight for bed.\n\nAshley seemed to have different plans, though. She looked energized from all the activity, and sauntered over to the bed while slowly unbuttoning her shirt. She bent down and crawled along the sheets towards Lilac, angling for a down-the-shirt shot that showed off her cleavage. \"What's the matter, Ly?\" she asked seductively, putting on her best bedroom eyes. \"Don't you want to have a little more fun before we turn in?\"\n\nLilac tried to rouse herself, but exhaustion was clouding her mind and her legs were begging to remain right where they were. \"I'd love to, Ash, but I'm just so tired,\" she began, but Ashley put a finger to her lips to cut her off as she stood back up.\n\n\"Shhhh. I can help with that,\" she said. \"Orders are orders, Lilac. Watch my striptease, and become more and more aroused as I take my clothes off. Oh, and you can't masturbate tonight!\"\n\nLilac found her eyes suddenly locked onto Ashley's form and felt a sudden rush of excitement building in her at the sight of Ashley's unbuttoned shirt. Ashley's hands moved up and slowly undid more and more buttons, and Lilac felt her heart start to beat faster with each one. Visions of what she could do to Ashley's breasts began to flow into her mind as Ashley pulled her shirt off entirely. Lilac had always thought she would wind up with someone with massive breasts, but Ashley's turned out to be more than enough; they were nearly twice as large as her own smaller assets, and she was forever jealous of the cleavage they offered.\n\nAshley turned around and swayed her hips side to side as she unzipped her pants and slid them down gently, looking back over her shoulder with a sly smirk. Lilac felt heat building inside her and a dampness between her legs. She tried her best to push past her tiredness and enjoy the growing sensations; this was their four year anniversary, and Ashley deserved some fun. She was even incorporating hypnosis into it! That would've been unthinkable just half a year ago.\n\nAshley continued to sway her hips as her hands worked to unhook her bra and drop it to the floor. Lilac moaned involuntarily as she felt a surge of arousal run through her, cutting through her exhaustion for a moment. She squeezed her legs together to try to combat the urge to tend to the growing need in her crotch; Ashley's orders prevented her from even considering using her hands.\n\nAshley cupped her hands over her breasts before turning around, a grin growing on her lips as she saw Lilac squirming and red in the face. Lilac recognized that look; Ashley was getting an idea. \"Orders are orders, Lilac,\" Ashley said, slowly sliding her hands across her breasts. \"The next time you see my nipples, you're going to cum. Hard.\"\n\nLilac's eyes widened as she looked from Ashley's face down towards her breasts in time to see her hands slip away, revealing her nipples. Then her vision blurred as she felt her body responding to the command; something inside her clenched and a burst of pleasure ballooned outwards from her pussy as she came. Hard. She could feel her already sore legs squeezing together, and she automatically pressed her hips upwards, arching her back. She felt a delicious shock of delight as she realized once again how easily both her mind and body could be bent to Ashley's will.\n\nLilac wasn't sure how long her orgasm lasted, but when it finished and her senses creeped back in, Ashley was lying in bed next to her, a smug look on her face. It was a little ridiculous to see her looking so smug in only her panties, but Lilac didn't have much time to consider it before she felt her exhaustion flooding back in. Her head felt fuzzy and she could barely think. \"I'm exhausted, Ash,\" she said. \"I think I just want to turn in.\"\n\nAshley pouted back at her. \"Aw, but I'm not done yet! Just a little more.\" She leaned in and whispered in Lilac's ear. \"Orders are orders, Lilac. You can go another round, and you want to make me cum.\"\n\nLilac groaned a little as her sluggish mind grappled with a new burning desire. Ashley was right to want to get off too; it was only fair. Lilac rolled towards Ashley and reached a hand down, stroking at her panties. There was a distinct damp patch - was the hypnosis really turning Ashley on this much? Lilac felt a pang of guilt; her girlfriend was actually getting really into this, and all Lilac was focused on was how tired she was. She struggled to fight her increasing need to sleep and focus on Ashley.\n\nSlowly, delicately, Lilac lowered her head towards Ashley's bare breasts, picking the nearest one. She blew on the nipple and licked around it, trying to dredge her girlfriend's preferences out of her fatigued mind. She shifted the hand rubbing Ashley's panties, sliding it inside them to elicit a tender \"mmm...\" Lilac looked up, her eyes struggling to hold focus; even through a sleepy haze, Ashley's face when she was lost in pleasure was beautiful.\n\n\"Stoplight,\" Lilac said quietly, before moving her mouth to cover Ashley's nipple and start sucking and nibbling at it. Tired as she was, she barely even registered she'd said it; what little focus she had was entirely set on making Ashley cum, as ordered. Lilac's finger was plugging away at Ashley's pussy, gentle rubbings forgotten as the need to force an orgasm took over.\n\n\"Whoah, whoah,\" Ashley said, worry in her voice. \"Orders are orders, Lilac, scratch that last command.\" The moment she said it, Lilac's forced concentration collapsed and her head dropped from sucking at Ashley's breast to resting on it. She was struggling to keep her eyes open and her vision felt fuzzy. She clumsily pulled her hand out of Ashley's panties and laid it next to her.\n\n\"Sorry, Ash,\" Lilac murmured. \"I'm just so tired...\" She lost the fight to keep her eyes open, and she felt herself drifting off with Ashley cradling her against her bare breast. \"Sorry to use the safeword. Maybe tomorrow, okay?\"\n\n\"That's what it's there for,\" Ashley replied, kissing the top of her head softly. She reached down and pulled a blanket over the two of them. \"Sorry for pushing you. Sleep well. We'll play more tomorrow.\"\n\nLilac snuggled into her, fading quickly in the soft warmth, mustering just enough effort to tilt her head up and find Ashley's lips to draw her into a tender kiss. \"Happy anniversary, Ashley. I love you.\"\n\nAshley pressed Lilac gently in against her sternum and put her chin on her head. \"Happy anniversary, Lilac. I love you too.\"\n\nIt only took moments for Lilac to fall into a deep, dreamless sleep."
    ],
    "authorname": "PickYerPoison",
    "tags": [
        "lesbian",
        "ff",
        "cunnilingus",
        "hypnosis",
        "fingering",
        "pussy eating",
        "orgasm control",
        "orgasm command",
        "consensual"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/ashley-finds-out"
}
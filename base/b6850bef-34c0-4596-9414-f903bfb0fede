{
    "title": "Sis-in-law Incentives Ch. 09",
    "pages": [
        "Hot tub for five, no holes barred. Plus a late surprise\n\n======================\n\nJT and I pulled up to my house, parking out front. We didn't want to announce our presence quite yet. We could see Dawn's suburban, and Holly's van parked in the driveway, which was a pretty good indication the girls were back from their fun. \n\nEntering from the front of the house, we made our way to the Master Bedroom, and peeked out the window, without turning on any lights. Sure enough, the spa heater was on and at temperature, and there were three women reclining in the hot tub. \n\n\"Shall we check in on them?\" I asked.\n\n\"Got a beer?\" \n\n\"We'll go to the garage, hit the beer fridge, and see how they're doing.\" I told him.\n\n\"Now that sounds like a plan,\" JT answered with a smile. On our way into the garage he pulled out a little yellow pill. \"Want one?\"\n\n\"What is it?\"\n\n\"Cialis. If you're going to party like a rock-star, why not use the same pharmaceuticals.\" He passed the pill to me, and passed me a beer. After cracking his own, we toasted and downed our little helpers.\n\nWe walked out to the back yard, brew in hand, and approached the raucous threesome.\n\n\"So what do we have here?\" I asked.\n\n\"Just your wildest dreams come true,\" Dawn laughed. \"Three beautiful naked drunk horny women in your hot-tub.\"\n\n\"So did y'all have a wild time tonight?\" JT asked, one foot up on the edge of the spa, looking down into the dark spa, trying to see the forbidden.\n\n\"Nuh-uh.\" Holly interjected. \"We're not talking until you boys are in here with us.\"\n\n\"Naked,\" Dawn added for effect.\n\nI laughed, and looked at Beth to see if she was a party to this madness. \"What do you think?\" I asked her.\n\n\"Naked,\" she said with a salacious grin.\n\nI wasn't about to argue and stripped down, folding my clothes and leaving them on a nearby table. I left my boxers on until I got back to the hot-tub, then took them off, and slid into the hot water. JT was already ahead of me.\n\n\"Is that better?\" He asked.\n\n\"Much,\" Holly admitted, with a silly grin.\n\n\"So how was your evening?\" I asked again.\n\nAll the girls started to speak, but Dawn gained the floor. \"It was the wildest time. We had a contest going to see who could get four phone-numbers first.\" She had sidled up next to me, at the far end of the line. Beth was between JT and I, and Holly was on the far side of JT. It was cozy.\n\nHolly added her two cents. \"Dawn was out of control, she was just walking up to strangers and asking for their phone numbers, it didn't take a genius to figure out that this contest wasn't going to last long.\"\n\n\"Yeah,\" Beth chirped in, \"but then Holly went over to a table of business men and returned with 5 phone numbers in like 1 minute.\"\n\n\"She cheated!\" Dawn fumed, \"Go ahead, tell them.\"\n\n\"I just said it was a contest, and that if they gave me their numbers, once I had four I'd show 'em my tits.\" Holly admitted.\n\n\"And...\" JT had to ask.\n\n\"Well, of course I did, but only for a second.\" \n\n\"And Beth may have only gotten one number, but that guy picked up our whole tab, and then put us on his.\" Misty laughed, \"She saved y'all a lot of money, cause we're not cheap drunks.\"\n\n\"So what was the contest for?\" I had to ask. \n\nThe girls looked at each other and finally quiet Beth took up the challenge. \"Well, you see, Holly and Dawn kind of explained that they expected you two to show up tonight, and that things might get a little wild. They asked if I minded and would I stay. So I thought, well, Hell Yeah! and told them they couldn't make me leave. Then we were stuck with an odd number of us, like two men and three of us, so the contest was who got to choose who would get the one-on-one attention, and who would have to share.\"\n\n\"So I won,\" Holly announced cuddling up to JT.\n\n\"And you have to share us,\" Dawn explained.\n\nWow, now that was some contest!\n\n\"Do you girls need more drinks?\" I asked, a little stunned by the whole way things had played out.\n\n\"Just wine now,\" Beth said, \"I've got a nice buzz now, but don't want to ruin things.\"\n\n\"Let's move to the pool,\" Dawn said, \"It's too warm out to take too much of this spa thing.\" She stood, her entire naked body inches away, and stepped out of the hot-tub, walked to the steps and down into the pool. \n\nBeth followed suit, and I jumped up to follow as well. I gave one last look back at my wife and friend. Holly looked up, gave me a wave then whispered in JT's ear.\n\nThe pool was well lit, and when I moved to where the girls were, I could see their bodies clearly through the crystal clear water. I walked with them toward the deeper end, a little over 5 feet deep. I could stand easily enough, but it was over their heads, and they had to cling to me to keep from sinking or drifting off.\n\n\"I've gotta tell you both, I wasn't really expecting this,\" I told them. \n\n\"Shut up and kiss us,\" Dawn said, so I did, exchanging kisses with both of them, holding their incredible bodies against mine, their arms around my neck and each other. The each had one leg wrapped around me, clinging tight. I was hard as a rock within moments, and it didn't take Dawn long to notice.\n\n\"Look Beth, I think he likes us,\" she teased.\n\nBeth, to my shock and delight, reached down and grasped my hard cock with her small hand. \"Oh! I think you're right! At least he likes one of us.\" \n\n\"I'm crazy about both of you; I just can't believe this.\" I confessed. \n\n\"So what are you going to do with us,\" Dawn asked coquettishly.\n\n\"Do?\" I answered a little slowly.\n\n\"Do. As in do with us whatever you want,\" Dawn explained.\n\nI looked over to Beth, who blushed, nodded, and then kissed me.\n\nDawn slid sideways, moving behind me, and Beth followed, moving in front of me. I reached down and grabbed her ass cheek and lifted her higher in the water. With my other hand, I cupped her breast and lifted it to my lips. I sucked on her hard little nipple. \"Is this Ok?\" I asked.\n\n\"More than Ok,\" she answered softly. \n\n\"What are the limits?\" I asked her softly.\n\n\"Just your imagination,\" she told me, then she let go, slid down my body, and sucked on my cock underwater for just a second, to make sure I understood.\n\nAs if they had rehearsed, she slid behind me, and Dawn moved to my front. \"Fuck me, here now, just for a moment.\" She told me clinging to me tightly and whispering in my ear. Her legs were wrapped around my waist, her arms around my neck. \"I need to feel you in me.\"\n\nI held her ass cheeks and lifted her to the head of my cock. She reached down in the water and opened herself for me, bouncing down until she managed to get my cock lodged in her tight slit. It took a little negotiating, and some careful nudging and pushing but after a few seconds, she was seated on my cock, floating in the water. I had full access to her full breasts, while her legs wrapped around my ass, kept her lodged on my pole.\n\n\"Now that's naughty,\" Beth said hanging on to me, and watching the action. She whispered in my ear, \"You're going to fuck me too, aren't you?\"\n\n\"God, you know it,\" I told her, turning and kissing her while I reached down and screwed Dawn with short little strokes.\n\nDawn leaned upright, arms around my neck. \"Let's move this inside. Can you walk with me like this? That would be so wild.\"\n\n\"I don't see a problem with that.\" She probably weighed barely 100 lbs. It was only about 20 feet or so once we left the pool. So I walked with her to the steps, and climbed out of the pool carefully. My only fear was slipping, and once we got out of the pool, it was a short trip. Each step jolted her a little, bouncing her body on my stiff cock. Beth held the door open for us, and even threw a towel down on the bed, which I placed Dawn on. Then I tilted her legs back and pumped her for a minute or so, while Beth dried herself off, then me, and finally Dawn. Beth climbed onto the bed, and asked for a bit of attention. \"I'm getting lonely,\" she said.\n\n\"I'd hate to hear that,\" I told her, and eased out of Dawn, who seemed Ok with it. \"What did you have in mind?\" I asked her.\n\n\"Make me come again?\" She asked almost plaintively, blushing, her hands placed suggestively between her legs.\n\nI crawled between her legs, which she opened for me, and I once again licked and sucked her. She smelled like chlorine again, I was wondering if I'd think about her tight pink pussy every time I smelled chlorine. I loved licking her, and fingering her, but after a couple of minutes Dawn interjected. \n\n\"This is a waste,\" she said.\n\nHuh? \n\nShe pulled me away from Beth and told me to roll over, I started to see where this was going. \"Go ahead Beth, sit on his face.\" Dawn explained, while she proceeded to go down on me, restoring my cock to its full hardness. \n\nBeth didn't need any more encouragement, and offered her pussy to me again. I had a little less control now, but did my best to nibble away at her. Just as I finally got her going, Dawn changed things up again by climbing aboard and riding my cock. I wasn't going to let that distract me and forged ahead, finally hearing the squeal I'd been hoping for as my pretty little Beth came for me.\n\nBeth rolled off, and we both watched while Dawn rode me. \"I love your fat cock,\" Dawn told me, as she rocked back and forth.\n\nShe looked over at Beth, and slowed down. \"God, I'm hogging him, aren't I?\" she said, then she got off of me and moved next to Beth. \n\nI moved between Beth's legs, and she asked softly, \"How do you want me?\"\n\n\"Just like this,\" I told her, lifting her legs high, and placing my cock at the entrance to her inviting pussy. Dawn, ever the helper, got up on her knees, and helped guide me into her best friend. It was just amazing.\n\nI tilted Beth's legs back and fucked her at a nice leisurely pace for a couple of minutes. I just loved being inside her, loved seeing her body responding to my thrusts, loved watching the emotions playing across her face. I let go of her legs and leaned over her, my face over hers, and then kissed her deeply while I stroked in and out. She kissed me wildly, then turned her face away.\n\n\"Oh god, oh god, I'm going to come, I'm going to come again.\" She moaned.\n\nIt was all the encouragement I needed and I stroked her firmly and rapidly, pounding her, until she cried out, throwing her arms around me and clinging to me fiercely.\n\nWhen I eased off her body, Dawn was waiting eagerly. \"That's two for her, and none for me.\" She reminded me, \"You owe me.\"\n\nI put her on her hands and knees and went back after her hot hole with my mouth and tongue. I spread her wide, diddling both her holes, while I nibbled on her clit. With a little work I went from a using a finger on each hole to two at once, and eventually two fingers in each hole at the same time. The image of Spock's vulcan greeting came to mind as I sawed my hand back and forth aggressively in her two clutching holes. It took a while, but eventually I had her crying out. Just as she came, I climbed behind her and buried my cock in that warm slit, fucking her for all I was worth. She was losing it and started to fall to the side, but I wasn't allowing any of that. I followed her down, pushing her top leg over, and fucked her on her side. I slowly shifted her onto her back, maneuvering her legs at my pleasure, until I placed her flat on her back, and bent her in half, calves against her ears, while I pounded her like a piece of cheap meat. I was getting closer and closer and I told her so.\n\n\"You're going to make me come, Dawn, I'm going to come for you. All over you, you are so fucking hot, Dawn.\" I gasped it out between strokes.\n\n\"Make me come again, do it, pound my pussy, make me come for you,\" Dawn moaned. \n\nBeth surprised me by intervening then, leaning in from the side and tweaking Dawn's breasts. Her friend lurched on the bed, groaning and pulled away from Beth's relentless grasping fingers. It was useless, she wasn't going anywhere and Beth sat up and put both hands to work, grasping, squeezing and teasing Dawns huge, store bought fun-bags.\n\nI did my best to hold out long enough to get her off again, and just as I couldn't stretch it out any longer she screamed out for me. I sprayed her insides with my cum, and she came explosively, crying out as I finished coming by spraying her down with a half dozen ropes, reaching almost to her chin. Then I was back inside her, easy fucking her with what was left of my erection.\n\nNaughty Beth was scooping up the cum from Dawn's body and feeding it to her, putting two and three fingers deep inside her mouth. Again, I had to recalibrate my ideas about this one. She may have spent her entire life with one a-hole, but clearly she was not the innocent little church-mouse she displayed on a day-to-day basis.\n\nWhen she'd done what she could to feed my seed to her well-fucked friend, Beth finished up by using her tongue to cleanse any last traces of my effort off of Dawn's delicious body. She worked her way down from Dawn's face and upper chest, down her breasts and abs, and in one of the hottest things I'd ever seen licked all around Dawn's almost bare pussy, where I was pushing in and out of her, with my emerging hard-on. Beth looked up at me and opened her mouth in invitation, while her cheek rested on Dawn's crotch. I slid my sticky cock out and fed it to her. She sucked me clean, and back to semi-hardness.\n\n\"Damn, I love making you hard, feeling you change in my mouth, feeling that soft tube thicken and harden, completely filling and stretching my mouth.\" Beth told me, sitting back to look down at the results of her oral exploits.\n\nDawn moaned from underneath us. \"Jesus, that was incredible. I feel like I've died and gone to heaven.\"\n\n\"Pool break?\" Beth asked.\n\n\"Sounds like a plan to me.\" I laughed. I figured my hard-on wasn't going to go to waste with these two MILFs around.\n\n* * * \n\nWe jumped in the pool for a second, and then I pulled myself out of the pool, and peeked into the hot-tub. JT and Holly were tangled but looking pretty pleased with themselves.\n\n\"Intermission?\" I asked.\n\n\"Just a short timeout,\" JT laughed.\n\nThe other two were right behind me, and slid into the warm waters. \n\n\"How's it going?\" Holly asked her friends.\n\n\"Amazing\", \"Incredible\" was the answering chorus.\n\n\"I hope you took your vitamins, Alex,\" my darling wife teased.\n\n\"I'm thinking he's taking something,\" Dawn laughed.\n\n\"I know; it's the work out supplements. As soon as I start taking that Nitric Oxide, and those protein shakes and supplements, I get harder, stay harder, and come a ton. I'm not sure what it is, but I have no doubt it's something in those damn supplements.\" I explained. It was true as far as it went. The only question was how the Cialis was going to add to the mixture.\n\n\"Blessed supplements, I think you mean,\" Beth corrected me, reaching down and giving me a rub.\n\nJT got up and refilled refreshments all around, and we cranked up the bubbles in the hot-tub. I was personally waiting to see if JT and Holly wanted to take advantage of the bedroom a bit. If not, I was willing enough to take my two back in there for another go. With the bubbles hiding the action, Dawn and Beth were naughtily playing with me, and had me hard once again. Or maybe I should say, still.\n\nDawn couldn't bare the idea of my hard cock staying uncovered for very long, and without an ounce of shame in her hot little body, she straddled me, and eased my hard shaft home in her delightfully tight twat. Once settled down, she offered me her delightful tits for play. Of course I accepted.\n\nBeth was cuddled up next to me, and teasing her friend. \"Fine, it's yours for now, but don't you dare make him come until I get a turn.\"\n\nJT and Holly were teasing Dawn as well when the backyard gate opened and Jenny appeared in a bikini and a towel.\n\nA hush fell over the spa, as we all wondered how to address this new twist.\n\n\"Wow, a full house,\" Jenny laughed as she approached the spa. As she got close enough I think she finally realized that she was overdressed. \"Ohmigod! Are you ALL naked?\"\n\nLeave it to Jenny.\n\nDawn answered for us. \"Completely. No Bathing suits allowed.\" She had stopped moving but was still obviously sitting in my lap, straddling me, naked as the day she was born. Her full breasts were only inches from my face.\n\nThe bubbles may have hidden what was happening under the water, but what was showing above the waterline was as incriminating as hell. Holly was sitting sideways in JT's lap, her hands out of sight between them.\n\n\"Sis?\" Jenny asked.\n\nHolly just gave a little smile, and then blurted, \"Ok, you caught us.\"\n\nThings got quiet for a second, and then JT answered her. \"We, uh-mm, kind of left our inhibitions with our clothing.\"\n\nDawn leaned over my shoulder toward Jenny and whispered, \"C'mon in. It's incredible.\" Coincidentally, that put her breast in my mouth, where it stayed while I nibbled her hard nipple.\n\nJenny looked around a bit, then dropped her bikini top and slid into the hot tub, near her sister, between JT and me. A few moments later she had tossed her bikini bottoms out of the spa.\n\n\"Oh my God! Who would ever have thought that my big sister, the always behaved, always obedient, disgustingly honest, would be the wild one!\" Jenny eased off the seat and stood up, then reached out to the side controller and turned off the bubbles, and turned on the spa light. Suddenly, there were no more secrets in the hot-tub.\n\n\"But you're married!\" Jenny said, looking around between Holly and I, then realizing the full extent of it, looked at JT and Dawn. \"Oh my God! Is this an orgy?\"\n\nBeth giggled. \"I hadn't thought about it, but I guess you can call it that.\"\n\nJenny moved just a little closer to her sister, and reached out to rub JT's arm, then asked hesitantly, \"Can I play?\"\n\nHolly seemed slow to react, which I could understand. This was a pretty big step for her, one it seems like she hadn't considered when planning for this evening. \n\nJenny didn't push it. She just waited on her big sister's decision.\n\nHolly finally just gave a strange little laugh. \"What the fuck. Why not?\"\n\nJenny gave a cry of delight, jumped forward and planted a huge kiss on her sister.\n\n\"Damn, Jen! Him, not me!\" Holly cried out, getting a laugh out of all of us.\n\nJen got on her knees and kissed JT instead, who responded eagerly.\n\nDawn was back at work on my submerged missile, sliding up and down its length. \"God, he's getting so spoiled, I don't know how I'll put up with him after this,\" she sighed, watching my wife and sister-in-law both using their hands on her husband.\n\nThat love trio didn't look overly interested in making the move to the bedroom, so I encouraged my own two lovelies to move our party back to the bed, and they came along easily enough.\n\nFive minutes later, I was leisurely enjoying an indescribable duel blow-job, when the other threesome made their way into the room. We moved around a bit and were grateful we had a California King, with a padded chest at the foot of it. Six of us on that bed was awfully crowded, but a beautiful thing to see. JT seemed to like what he was seeing, and parked himself next to me. A little close for normal circumstances, but then again, these circumstances were anything but normal. Jenny and her sister gave him the same sort of attention I was receiving.\n\nJT and I looked at each other and smiled. He put his hand up for a high five, and I had to smack it. \"God, does it get any better than this?\" he asked.\n\nI looked down at the sea of fabulous feminine flesh working diligently to pleasure us. To my right was Dawn, then Beth between my legs. Jenny was between JT's legs, and Holly was to his left. Their mouths were taking turns engulfing us, but they all were sharing beautifully.\n\nHolly broke me out of my reverie, when she slid off the bed. \"Girls, everyone shift over one.\" Then she walked around the bed and waited for Dawn to crawl between my legs. JT was now being service by Beth and Jenny, and Beth seemed determined to put on a show for him. I realized this was probably the first time she'd touched him. Good for her.",
        "As for me, I was experiencing a bit of deja-vu, while Holly and Dawn took turns sucking and licking me. I noticed Holly looking over, several times to see what Beth and her sister were up to. \n\n\"Switch,\" I heard her announce, and was hoping for just a few seconds respite. This was too exciting too endure for too much longer.\n\nAfter the shift I was treated to a vision I had never really dared to hope for. Holly and her sister were sharing my cock. Jenny was a bit hesitant, perfectly understandable considering the situation.\n\n\"Jesus, Jen, is that the best you can do for the man who puts a roof over your head, gives you his car to drive, and puts food on the table?\" Holly told her sister, then I watched as she grabbed the back of her sister's head and pushed her face down onto my cock. \"Come ON! Suck him like you mean it.\"\n\nJenny didn't need any more prodding after that, and sucked me with complete abandon.\n\nHolly smiled up at me. \"God, you are SO going to owe me after tonight.\"\n\n\"Absolutely. Anything. Hell, you can have my first born child.\" I gasped, while Jen did her best to finish me off. I was getting close.\n\n\"Do you want to come in my little sister's mouth? Is that what you want? Do you want to make her drink your hot cum?\" Holly asked, her hand resting on her sister's head, following the aggressive motion as she worked her hands and mouth on me.\n\n\"I'd love to fill little Jenny's mouth,\" I groaned after a few seconds, not knowing if that was the right thing to say, but helpless to deny it.\n\n\"Fuck her mouth, Alex,\" she told me, drawing my hands to her sister's head. \"Fuck her sweet little face and empty your balls in her nasty little mouth.\"\n\nI held Jenny's head, and started moving her up and down on my cock, forcing myself deeper down her mouth, banging against the back of her throat.\n\n\"FUCK!\" I heard JT cry out, and looked over to see Beth taking his load in her mouth, while Dawn had her hands buried in her friend's hair, holding her face hard against his meat.\n\n\"God,\" I groaned and felt my own cum bursting forth. \n\nJenny stopped her motion, and used her hand to coax all of my seed out of my shaft and into her warm, welcoming mouth. I gladly delivered all I could, and laid back on the bed, gasping in delighted pleasure.\n\n\"That was just fucking incredible.\" I said. \n\nAfter a bit of shifting around, I found myself lying back, still pressed against JT, with Beth at my side. I had my arm around her, and she was relaxing with her head on my shoulder. I stroked her back and side, and let my hand wander down and rub her incredible butt, while Dawn took a leisurely approach to restoring the lead to my pencil.\n\nNext to me, JT had Jenny at his side, with Holly between his legs.\n\n\"So what do you think, bub? Don't our wives look beautiful with their mouth's full?\" he laughed.\n\n\"Incredible. I thought I'd feel jealous, but after the first shock of seeing her on your lap in the hot-tub, I don't know. I just love the way she looks, going down on you.\" I reached across his body, and tilted her head up to watch her while she sucked my friend. \"I don't know. Maybe I'm broken. But at this moment, I'm not jealous at all. I mean, shit, that's like the sexiest thing I've ever seen.\"\n\nMy harlot of a wife opened her mouth wide, pulled off his cock, then after a long slow lick of his entire length, she went back down on him, taking it all. \n\n\"Ditto, man. I thought I'd shit when you walked out of the pool with her lodged on your dick, but DAMN she's never been sexier than tonight.\"\n\nI was pretty firm by now, and I watched as the wicked little Dawn put on a show for her husband, slowly sucking me all the way to the root, while her eyes were locked on her man the whole time. Damn, it was hot.\n\nI heard Beth's tentative little voice from beside me. \"Dawn?\"\n\n\"MmmmHmmm,\" she moaned, her mouth too full to speak.\n\n\"I have to leave in like 20 minutes. Would it be OK, if I...if I did... if I was with JT before I went?\"\n\nDawn popped up off my rod, and leaned over and kissed Beth's thigh, the part of her she was closest too. \"You poor thing. The rest of us all get a sleepover, and you've got to go home to Dickless.\" She caressed Beth's leg. \"I think we should let the boys have their way with you while the rest of us take a short break. What do you think, Holly?\"\n\nHolly drew herself away from JT's long cock which she'd been working on so sweetly. \"Amen to that. My jaw is getting tired. I could use a pee-break, a nice drink, and a short rest before I ravage that man of yours.\"\n\n* * *\n\nAnd that was how JT and I found ourselves fucking the living daylights out of Beth with our wives and my sister-in-law in the next room over, sipping on wine. At first we took turns just screwing her straight up. Seeing her laying there and getting used so nicely, I couldn't help but move up the bed and feed her my hard-on. She was a little too distracted to give me her best, but it was still cool as shit to slide in and out of her slack mouth, while she gasped at getting rammed so thoroughly. At the next switch JT and I just switched positions, while I filled her puss and JT probed her tonsils. Somehow, that lead to her on her hands and knees getting skewered at both ends. That's when she first started coming for us. Nasty little thing, getting off on getting used hard like that. She felt wonderful to plow from behind, and I played with her tight little butt-hole, getting a very, very naughty idea.\n\n\"Let her ride you, JT,\" I urged him.\n\n\"Sounds like a fantastic idea to me,\" he laughed, pushing her face off of his cock, and laying down in the middle of the bed. She climbed aboard and rode him beautifully. I went over to the bedside table, and pulled out a bottle of lube which I used to slick up my cock. JT saw what I was doing and he pulled Beth down to his chest, kissing her and holding her firmly. His hips were still nudging in and out of her, when I squirted the lube on her ass, and used my thumb to rub it in.\n\n\"Oh God, Alex! What are you going to do?\" she moaned, as if she didn't know.\n\n\"You and Dawn said no limits, right?\" I reminded her of the pool conversation which now seemed so long ago.\n\n\"No limits,\" she gasped, tucking her head in and reaching back with her own hands to open her cheeks up. \n\nI put the lubed head of my cock up against her ass, and pushed, sinking about two inches inside of her. \n\n\"Jesus!\" she cried out, then JT was holding her head in his hands and kissing her on the mouth, shutting her up. Amazingly, she was still holding her ass open for me.\n\nI slowly worked the rest of my cock into her tight hole. \"That's all of it.\" I finally announced, and Beth shuddered, letting go of her own cheeks. She'd been gripping tightly, and the finger marks lingered against her porcelain flesh.\n\n\"Fuck, that feels so weird, Alex.\" Beth groaned, but her body slowly squirmed underneath us.\n\nI began slowly, easing in and out of her rear chute, looking down at the sexy site of stretching her ass. It never was difficult or painful, at least on my end, and I picked up the pace a bit, pushing a little harder on each 'in' stroke, feeling her whole body shift below me. I started fucking her harder, letting the motion draw her up and down on JT's cock simultaneously. After only a minute or two of this, she was moaning continuously, and I screwed that tight little ass without mercy. \n\nWhen she came, she came explosively, grunting and crying, and the more I screwed her, the harder she came. No doubt about it, she was getting off on having her ass invaded. When I pulled out of her she cried out \"No!\" but I was just changing positions. I laid back on the bed, and encouraged her to lower her ass over my cock once more, taking me to the very root. She faced away from me, and I pulled her thighs open wide. JT moved in front of her. \n\n\"Oh my God,\" she hissed, \"you two are going to kill me.\" \n\nJT leaned over and went down on her for a bit, which was great for me. She was wiggling all over the place, and her tight butt-hole was clamped onto me like a fist. When he got up and eased his cock into her, she immediately came, thoroughly impaled on his shaft. He started banging her like he wanted to push both of us through the bed. I clung to Beth, my hands gripping her tits tightly, squeezing her nipples, my teeth caressing her shoulder, as her body was shoved up and down my cock. \n\nBeth came again, screaming this time, \"FUCK ME!\"\n\nOur other house guests couldn't resist their curiosity and came into the room to watch Beth get her brains fucked out. \n\nDawn, laughed, \"The little slut! I didn't think she had it in her!\"\n\nHolly seemed almost in shock. \"She sure as shit has it in her now.\"\n\nJenny heard the commotion and peaked in as well. \"Holy Shit!\" she cried out, then squeezed around her sister to get a closer look. \n\nJT was fucking like a jackhammer; I don't know where he got the stamina. Beth was crying now, her whole body spasming. \"Fuck, fuck, ooooh, I can't stop cumming, FUCK!\"\n\nMy arms were wrapped around her torso, sliding her up and down my body, my cock slowly grinding in and out of her butt, while JT became the human vibrator. His hips were almost a blur as he pounded her with short fast, almost vicious, strokes. She cried out continuously as her body reacted within my grasp.\n\nJT finally came in her with a groan, and she laid back on me, gasping. If she thought that was the end of it though, she had another thing coming. \n\nI pushed her forward onto her hands and knees, and fucked her tight brown butt-hole fast and hard. The lube was holding up nicely and it wasn't any more difficult than fucking her normally, it just felt a little tighter. \n\nThe rest of the women were taking up positions around the bed, commenting on the action. I couldn't believe that I was going to fuck every one of them before the night was out. It was just too much stimulation.\n\n\"I'm about to cum,\" I warned her.\n\n\"Do it, fill my ass,\" she gasped, her arms spread wide, her hands gripping the bed spread tightly.\n\nBeautiful words. I grabbed her hips and slammed into her, emptying my balls deep in her ass. I collapsed on the bed after giving that sweet, round butt a smack on the cheek. \"God you have a great ass, Beth.\"\n\nShe slowly crawled up next to me, and clung to me tightly. Her lips pressed against my ear. \"Don't say anything, but that was my first time back there.\"\n\n\"Amazing,\" was all I could say.\n\n\"Fuck! You're telling me?\" She giggled then got up, stretching. \n\n\"God, I feel used and abused. I'm going to take a quick dip in the pool before I go. Damn, I'm jealous of y'all who get to stay.\"\n\nJenny laughed. \"You? Jealous? After that? Fuck, bitch, you're my hero!\"\n\nThat started a round of the giggles, which couldn't hide the underlying current of what was going to happen very shortly.\n\nRound Two. (Or would that be round four? Thank you, big pharma!)\n\n======\n\nThis party isn't done yet - stick around and see. And thanks for taking the time out to read all 9 chapters of this little work. I hope you're enjoying it. All the votes are greatly appreciated."
    ],
    "authorname": "Tx Tall Tales",
    "tags": [
        "hot tub",
        "sis-in-law",
        "blow-job",
        "threesome",
        "anal",
        "double penetration",
        "mmf",
        "ffm",
        "orgy"
    ],
    "category": "Loving Wives",
    "url": "https://www.literotica.com/s/sis-in-law-incentives-ch-09"
}
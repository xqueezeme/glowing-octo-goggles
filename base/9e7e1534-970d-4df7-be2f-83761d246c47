{
    "title": "Boss Nanny Ch. 16",
    "pages": [
        "Matt moved through the lobby of Seamus's building with a little extra pep. The remix of early 2000 pop songs was a definite plus. Imagine Vanessa Carlton at a poetry reading where everyone's on ecstasy.\n\nThe lobby clerk laughed as Matt shuffled his way across.\n\nWhat could he say? It had been a good week. Scratch that, a good month.\n\nHe didn't care how geeky it made him look; he was having so much fun learning the ropes from Roberta. Matt was incredibly nervous the first day. The fear of sounding dumb had stopped him from giving input. Roberta noticed almost immediately and put a stop to it. She was encouraging and gracious and everything a mentor should be. She let Matt shine and allowed him room to prove just how intuitive he was.\n\nMatt set his stuff by the front door. Aidan was playing in the living room while Seamus sat at the table with his laptop. That wouldn't do.\n\n\"By all means,\" Seamus smirked as Matt pushed the laptop out of reach and straddled his lap. Once Matt was comfortable, Seamus rested his hands on Matt's hips and leaned back in the chair. \"You're happy.\"\n\n\"It was a good day.\"\n\n\"Class was good?\"\n\n\"Yeah.\"\n\n\"Work was good?\"\n\n\"Definitely.\"\n\nSeamus grinned and his eyes gave away just how happy he was that Matt was enjoying the job.\n\nThe two men enjoyed a private moment at the kitchen table, smiling and kissing. Matt wrapped his arms around his boyfriend's neck and shifted his hip just, so Seamus knew exactly what would be happening later when Matt was hit in the back by a certain spiky, brown-haired baby raged toddler.\n\n\"Ow!\" Matt threw his hands up. \"Oh, c'mon! You need to get over this.\" To prove he was an adult and could do what he wanted, Matt kissed Seamus again.\n\nMatt's little stunt didn't go unpunished. Aidan grabbed a fist of Matt's side flesh and squeezed. Those little fingers packed some serious PSI. It was the equivalent of a baby alligator bite.\n\n\"No,\" Matt gently slapped his hand away. \"That's owie.\"\n\nThe brothers stared at each other. When neither backed down, Seamus hefted Aidan with one arm until he was at eye level with the adults.\n\n\"Do you want to go to Grandpa's house tomorrow? For a long weekend?\"\n\nThe jealous, demon-possessed kid vanished, and the cute blue-eyed boy returned. He was all smiley and wiggly at the mention of his favorite grandpa.\n\nAs much as Matt wanted to boot Aidan and his jealous ways to the curb, Seamus should've asked him first. What if his dad was busy?\n\n\"I should call Dad before we get Aidan's hopes up. Or my hopes for that matter,\" He whispered.\n\n\"I already talked to Brad. We're dropping Potato-for-brains off on the way to the airport.\"\n\nAidan giggled when Seamus peppered his cheek with kisses.\n\nMatt leaned back and eyed Seamus. \"Airport?\"\n\n\"For the playoff game. Brad said he would take Monday and Tuesday off so we could make a weekend out of it.\"\n\n\"What about school? Work?\"\n\n\"You don't have class on Monday and we'll make it back in time for your Tuesday class. Your boss is fine with you taking a few days off,\" Seamus winked. He was his boss.\n\n\"And Denise?\"\n\n\"She loves you. You were off the schedule before we finished talking.\"\n\nMatt rolled with it. He hadn't had a real getaway since he started at the university. A weekend away was the most exciting thing to happen in over a year.\n\n\"What game is it anyway? What are they playing off for?\"\n\n\"Where is Jay when you need him?\" Seamus looked around the room and laughed. \"It's the game that determines if the Seahawks make it to the Superbowl.\"\n\nEven Matt knew what the Superbowl was, and he knew that was a big game. \"I thought those tickets were hard to get?\"\n\n\"Not when your best friend is Jay Petermeyer.\"\n\nMatt grabbed his phone and texted Kase right away. As he was texting, Seamus stole one more kiss, inciting an ugly sound from Aidan.\n\n\"Hey there,\" he soothed. \"I give you kisses too, see?\" Seamus kissed Aidan, then Matt, then Aidan, again. \"We share kisses.\"\n\nMatt had to admit that this was a far better tactic than provoking Aidan, so Matt joined in. He went back and forth a few times, kissing Seamus then Aidan until Aidan was nothing but smiles.\n\n\"I can't wait until this jealous phase is over,\" Matt mumbled under his breath as he got off Seamus's lap.\n\n* * * * *\n\nKase was good and jealous. Hilary, too. Pretty much everyone was green with envy. Kase was even a little upset. How could Matt, the one person who didn't care about football, score tickets to a semi big game?\n\nMatt almost felt bad about it, but, nah. Jay was his friend by proxy and Matt wanted to support him. Or make fun of him. Both options worked.\n\nMatt had never met a famous person, but Jay broke every stereotype. He was hilarious, down to earth, and genuinely humble. Even when he pretended otherwise.\n\nWhen they dropped Aidan off at Brad's, it was Matt who was feeling anxious about the separation. His anxiousness didn't go unnoticed and Matt glared at Seamus when he caught him smirking. How rude.\n\n\"What?\"\n\n\"You're pouting. You never pout when we drop Aidan off.\"\n\n\"Well, you always pout when we drop him off so I guess we're even.\"\n\n\"I didn't say it was a bad thing. It's cute.\"\n\n\"Why aren't you freaking out more?\" Matt asked. \"You always get weird when you're away from Aidan.\"\n\n\"He's in good hands.\"\n\n\"He's always in good hands.\"\n\n\"I know.\"\n\n\"So, what gives?\"\n\nSeamus looked over at Matt and gave him a gentle smile. \"The days aren't numbered anymore.\"\n\n\"What does that mean?\"\n\n\"Just my own bullshit. I was always worried things might be temporary. That you and Aidan would leave.\"\n\n\"You're not worried anymore?\"\n\nSeamus looked at the road. \"Nah. You and I are going to spend the weekend together, we're going to have a great time, we're going to grab Aidan on the way home, and life will pick up where we left off.\"\n\n\"And Aidan and I won't disappear?\"\n\nSeamus intertwined their fingers and shot Matt a look\u2014it would be in their best interest if they didn't disappear.\n\n\"Fine.\" Matt tried to pout but the corner of his lip curled, giving him away. \"We'll stick around.\" His heart beat a little faster.\n\n* * * * *\n\nJay had offered to fly them private but the flight was only two hours and it seemed like a waste, so they flew commercial instead. It was Matt's first time. He'd only ever driven. You'd think he'd be more excited or maybe nervous, but it wasn't that big of a deal. Seamus helped him navigate airport, security, and the terminals. By the time they finished and called for a cab, Matt was ready to do it again.\n\nWhen they got to the small private motel conversion Jay had booked for everyone, Jay was waiting outside like an unsocialized puppy. He was quick to greet his friends with big, welcoming hugs.\n\n\"Excited about making it to the Rose Bowl?\" Matt asked.\n\nJay glared at an overly innocent looking Seamus. \"You coached him.\"\n\n\"What? Psff. No.\"\n\n\"I don't think your boyfriend knows what the Rose Bowl is. I can't help but think this is a coup against my ego.\"\n\nMatt's mouth opened. He was offended. \"I happen to know lots about football games. There's the Tangerine Bowl, Rayon Bowl, La Hacienda Bowl, Aspartame Bowl\u2014\"\n\n\"Aspartame Bowl?\" Jay groaned. \"I know you're pulling my leg now. Try Orange, Cotton, Fiesta, and Sugar. Those are college bowls, anyway. Good God, I need to get out of here.\"\n\nAs punishment for trying to knock Jay down a few pegs, the athlete grabbed one of their bags and tossed it out of reach as he stormed off.\n\nSeamus and Matt laughed then grabbed their bags and checked in. The room was nice. It was very California boho, if that was a thing. Either that or the designer was on some serious psychedelics during the remodel. Once they settled, they headed downstairs.\n\nEveryone in a large gathering room. There were fifteen people including them. Jay was quick with the introductions. There were the board members\u2014Will, Scott, and Trevor. A few of Jay's teammates\u2014the famous \"Sack Pack\", and the guys they met at a bar back in Seattle. Matt quickly gathered that the sole purpose of the ladder group's attendance was in hopes to lure Jay's crush.\n\nMatt was so far out of his league. There were caterers, for christ's sake. This was so not Matt's life. Social and economic statuses aside, he had to admit; it was pretty cool being part of the elite affair. He didn't know any of the players so he was far from starstruck, but they seemed nice. A lot like Jay.\n\nThe more Matt hung around Jay, the more he liked him. He was a seriously cool guy. Pretty funny, too. He had the entire room cracking up. But as dinner drew nearer, his easy demeanor changed slightly. Jay was watching the time more often and glancing at the door. His was still the life of the party but there was another, more subtle, look in his eyes.\n\nAfter dinner when Matt had Jay alone, he called him out. \"What's going on? Are you on drugs or something?\"\n\nJay was stunned. \"What? No. Why would you ask that?\"\n\n\"You're acting weird and fidgety.\"\n\nThe blonde tried to release tension by shaking his hands and rolling his neck. When he was good and calm, he pulled Matt to the side. \"Loren is coming. I didn't expect him to, but he did.\"\n\n\"And that's the guy you like, right?\"\n\n\"Yeah, a lot.\"\n\n\"Have you talked to him yet? Does he know who you are?\"\n\n\"Yes. He knows who I am. In fact, he knows where I stand.\"\n\n\"So, what's the problem?\"\n\n\"I don't know where he stands.\"\n\n\"Have you asked him?\"\n\n\"Very directly.\"\n\n\"And?\" Matt pressed.\n\n\"I have no answers. He's a very complex man.\"\n\nMatt was about to respond when someone mentioned that Loren's car had arrived. Corey was heading toward the door to greet his best friend. He never stood a chance against Jay, a guy who spent his life chasing men on a professional level.\n\nEverything happened in slow motion. Jay was off. His feelings were the football, Loe was the end field, and everyone in the room were his enemies. He darted left, faked right, then spun around some guy who had no clue what was happening, and sprinted to the door. Just as Corey was about to exit, Jay slipped in front of him, vicariously beating him out the door.\n\nLoren's best friend stood frozen. He slowly turned and smirked at his friends, who were quick to laugh. Jay's action hadn't phased them. If anything, they'd been waiting for it.\n\nMatt made his way to Seamus as he watched Jay make his way across the room in a very over-the-top manner. \"What just happened?\"\n\n\"I don't know.\" Seamus laughed. \"I've never seen him act like that before. Don't get me wrong, Jay's outgoing and goes after what he wants, but not like that.\"\n\n\"You've never done anything like that to me,\" Matt frowned playfully as Seamus rolled his eyes and wrapped his arms around Matt.\n\n\"No, I can't say I went Heisman on a room full of people but I did drop everything to be your nanny. I think that counts for something.\"\n\nMatt bit his lip and smiled. Yeah, that counted for something.\n\nThey were still wrapped up in each other when Loren walked in with Jay trailing behind, a bag in each hand. Matt's jaw dropped. Jay hadn't talked about Loren much but he'd left out one enormous piece of information.\n\nHis crush was Loren Patrick. As in, livingtheloelife's Loren Patrick. One of the few social media influencers that he actually followed.\n\nGood for Jay. He really knew how to pick 'em. Loe was hot on social media. In fact, he had a couple of black and white photos that could boil blood. Between filters and preferable angles, real life never held up. Wasn't that the point of social media? Making life seem better than it really was?\n\nExcept in Loren's case. He hotter in person, like, tenfold.\n\nHe was also shorter. Matt had assumed he was at least six-foot when actually he was maybe five-seven. Regardless, the guy was a work of art. He was everything Matt expected and more.\n\nMatt shamelessly but discreetly snapped a photo and shot it off to his friends. They would never believe it.\n\n'Seriously? First Jay and now livingtheloelive? You undeserving prick.' Kase responded.\n\n'That man is fine as hell. Send shirtless pic. Please and thank you'.\n\n'Nooooo, I see enough shirtless men online!' Kase cried. 'Get him to make you a drink or better yet, name a drink after you!'\n\n'yasssssssssss'\n\nBetween those two, his phone was blowing up all night. Despite their nonstop messaging, Matt ignored them during dinner. Mostly because he got seated next to the mega manfluencer himself. He didn't try. He sat down next to Seamus and bam, Loren sat down on his other side.\n\nMatt was nervous the whole time and struggled to come out of his shell. Everyone was older and had their life together. He was in a room of professional athletes, business owners, and influencers. It was hard not to compare. Food could cure all. He didn't know what he was eating, but it was delicious. By the time his belly was full, he was talking and laughing with everyone like they were old friends.\n\nThe whole evening Seamus kept one hand on Matt; his knee, his thigh, his back. It was incredibly comforting. Every time Matt looked at Seamus, he was greeted with the kindest, most admiring smile in return. It was the first time Matt had ever been to a party with a boyfriend and not felt insecure. Seamus made Matt feel so loved.\n\nYou'd think being in a room with famous players and hunky men, Matt would've been distracted. He wasn't. Seamus was far and beyond the hottest guy in the room, not to mention the humblest. Catching Seamus looking at him\u2014the way he slyly smiled when no one was looking and how he pulled Matt away from Corey and his crew because he was tired of sharing\u2014those little things made his chest swell.\n\nThey stood in the bathroom, brushing their teeth. The night had been a total success and Matt could barely contain his smile.\n\n\"Did you have fun?\"\n\nMatt looked at Seamus through the reflection in the mirror. \"I sat by Loren Patrick at dinner. Yeah, I had a great time.\"\n\n\"You know who else you sat by at dinner? Me. But I guess that's not nearly as exciting.\"\n\nMatt grabbed Seamus's hand and pressed it to his crotch. \"I find you plenty exciting.\"\n\n\"Prove it.\"\n\nHe did. Twice.\n\n* * * * *\n\nAs cute as the hotel was, the walls were thin. Matt and Seamus woke as the players got ready for the day. They had to leave early for practice or meeting or something. Sport routines were foreign to Matt. Who knew or cared what they did?\n\nOnce they left, it was quiet again. It wasn't until they headed for breakfast that they heard chatter. Seamus's friends were sitting at a large round table, waiting patiently, whispering amongst themselves.\n\nNever in a million years would Matt's friends back home have waited. They would've been on their second helping. Hell, they wouldn't have waited for the Queen herself.\n\nThe guys even stood when Matt and Seamus neared and greeted them as if they hadn't spent the entire evening together.\n\nAt best, Matt's friends would've given a nod as they stuffed their face.\n\nIt was a glaring contrast of community, respect, and maturity. It said a lot about closeness Seamus and his friends had and why they were so well respected. When you radiate respect, you earn respect. It's an Alpha thing. It was hard not to be jealous about the endearingly wholesome connection. Matt would probably never have this with his friends back home. Maybe Kase and Hilary, but not with his friends from high school.\n\n\"Fuck.\" Will grabbed a plate for breakfast. \"Did you guys sleep as good last night or what? Those mattresses are something else.\"\n\nSeamus nodded. \"Best night sleep in a while. Helps when you don't have a toddler coming in at all hours.\"\n\n\"Isn't that what cribs are for?\"\n\n\"Not when your kid is Houdini.\"\n\nEveryone laughed and slapped his back with sympathy. Matt's chest felt tightened as Seamus so effortlessly claimed Aidan as his own. Seamus loved that kid, no two ways about it. Matt knew it and so did everyone else.\n\nThey finished loading their plates and made their way back to the table just as Loe and his friends came in and claimed the table next to theirs. Conversation stretched between the two groups. Every single one of them was out going, even Seamus was louder and more vocal than normal.\n\nSomewhere between conversations, Will looked at Matt and his face softened. \"We never congratulated you for your badassary.\"\n\n\"For what?\"\n\n\"For being all Super Spy Accountant.\"\n\nMatt blushed. \"Well, it wasn't that big of a deal.\"\n\nThe group scoffed. They'd known for a while that Seamus suspected something was going down. They'd pushed him to investigate time and time again and argued when Seamus continued to do nothing.\n\nThey were also glad to see the issue coming to head and they praised Matt for his part. The other table joined in. In fact, Loe offered to make some celebratory drinks.\n\nThere really wasn't a way to play it cool but Matt thought he managed well enough. One of Loe's friends filmed the whole thing. Matt was content. It was nuts. They made Matt stand there while Loren talked about the drink, a chocolate chip oatmeal cookie mocha. Matt was drooling. How could he have known it would be Matt's favorite?\n\nThey had to do a couple of takes because Matt wasn't 'camera friendly'. Which was code for awkward. They wanted him to interact more and stand like a statue less. After the fifth coaching run, Matt felt like he was getting the hang of it. He was nowhere near as comfortable in front of the camera as some of the others, but he wasn't a scared rabbit anymore. Heck, maybe he had a future in the biz.\n\nNah.\n\nHe almost texted his friends but decided against it. Having them find out on their own would be far more satisfying.\n\nHaving livingtheloelife make him a drink that would be shared with millions of followers wasn't even the best part of the day. After breakfast they hung out by the pool until Jay and the other players got back.\n\nThere wasn't anything particularly special about the day, it was just, good. The best part, of course, was Seamus.\n\nThe man totally shined with his friends. They brought out a different\u2014and absolutely wonderful side that Matt wished he saw more of.\n\nSeamus was outgoing; singing, joking, dancing with his friends around the pool. Seamus even had his phone out and was taking pictures and videos then uploading it on his Instagram. Heck, he even willingly let himself get roped into doing some Tik Tok videos.\n\nMatt sat on the lawn chair and watched with tears rolling down his face as Seamus tried\u2014and failed miserably\u2014to follow the dance montage. Everyone teased him relentlessly but Seamus took it in stride. He just laughed and tried again.\n\nWell, the literal best part was when Matt got up from the lawn chair, casually strolled across the pool to where they were struggling with the dance routine, and nailed it on the first try. He left the group stunned.\n\nBut seriously, watching Seamus in his element made Matt warm and mushy inside\u2014and a little hard on the outside.\n\nAs they went to bed that night, Seamus had a new energy. Matt promised himself that he'd do whatever it took to make sure his boyfriend had that energy, that spark, more often.\n\nA lot more often.\n\n* * * * *\n\nThe next day was the big game.\n\nMatt expected Jay and his friends to be gone before they got up. It seemed logical that they needed to be at the field before dawn to get ready. That wasn't the case. Jay and the Sack Pack stayed at the hotel until an hour and a half before the game.\n\nThey spent the morning together. Matt was getting to know everyone and genuinely enjoying their company. Loe made coffees for everyone. Once again filming. He had the players on camera this time. They did a better job than Matt did. They knew how to interact with Loe and make it a fun segment. They really hammed it up on camera, especially Jay\u2014who flirted a little without being too obvious. Both were open about their sexuality and the speculation would probably drive-up viewership. How Loe felt about the flirting would forever be unknown. He showed no reaction whatsoever.",
        "The lack of interest didn't go unnoticed. Jay walked it off the best he could, but he was a bit sullen the rest of the day.\n\nThey lounged around and bullshited until the players left, then got ready themselves. It was Seahawk merch from head to toe. Matt wore whatever he was given, courtesy of Jay. Then they took a car service to the stadium, also courtesy of Jay. No tailgating for them, but who needed that when you were bunking with the players? The whole weekend was better than tailgating. Matt assumed.\n\nWalking through the halls of the stadium was like trying to claw your way out of a sardine can. It was packed. The energy was so alive the walls were vibrating. Matt never experienced anything like it.\n\nThey had a block of seating. Matt started out sitting between Seamus and Will but that didn't last long as people mingled around. After the halftime show, which left Matt smiling, Loe plopped down next to him.\n\nNeither of them was diehard sport fans, so they easily shared their common disinterest.\n\n\"What's the story with you and him,\" Loe pointed at Seamus. \"Who, by the way, is really fucking hot. Did I mention before how cute he was?\"\n\nMatt smiled proudly. Loe wasn't wrong, Seamus was damn hot. But at the game? Whoa. He was hotter than ever with his football jersey and backwards hat that covered his little-too-long hair that curled under the bottom\u2014he was a walking jock wet dream if Matt ever had one. The only thing that looked better on the guy than the jock look was being happy. And damn was he happy.\n\n\"When my mom and her boyfriend died unexpectedly, I ended up with my three-month-old brother. I was drowning trying to raise him, going to school full time, and working. Seamus kind of swooped in and saved the day. He was my super nanny.\"\n\n\"Where the hell did you find a nanny like that? Nanny.com? Because damn, he can nanny for me anytime.\"\n\nMatt laughed. \"God, no. He's actually my boss. Well, my boss's boss. He owns the cafe I work at. My friend, Kase, dubbed him Boss Nanny.\" Matt looked at Seamus in the distance with pure affection. \"I didn't like him much when we first met, but I was desperate for help so I let it slide when he stole Aidan while I was working. Then he was just, there, all the time, watching Aidan so I could work and study and whatever else I needed to get done.\"\n\n\"How'd you get from that to dating?\"\n\nMatt thought back. \"It was all Seamus. I had a crush on him. I mean, duh. But he was so far out of my league that it never crossed my mind that he might be interested. Looking back, there were signs. I mean, he watched Aidan all the time and even asked us to move in. My rational brain couldn't see it, though. Seamus got tired of beating around the bush and told me what was up.\" Matt laughed as he recalled the memory. \"He came to the club I was at and dragged me back to the loft.\"\n\nLoe tossed his head back and laughed. \"Oh man, I believe it. He's got this super possessive way about him when he watches you. It's not the crazy-psycho look some guys have, it's sweeter, but terrifying nonetheless. He's had me inching away from you more than once.\"\n\nMatt's jaw dropped as he looked at Loe like he was crazy. \"Seamus? No way. I've seen him look at me. He's definitely sweet on me but not possessive.\"\n\n\"That's because when you look at him, he gets this dopey-melty look, like he's staring at a winning lottery ticket.\"\n\nMatt laughed again. Loe was being absurd. Completely ridiculous. Matt reached across the table and took the beer from his hand. \"I think you've had enough. You're seeing things that aren't there.\"\n\nLoe snatched his beer back. \"I'm not saying it's a bad thing. I'd kill for someone to look at me the way he looks at you, both possessively and like the winning lottery ticket.\"\n\nJay did nothing but look and act like Loe was his lottery ticket. He waited on the guy hand and foot and almost never took his eyes off him. Loe was a smart guy. There was no way Loe didn't know.\n\n\"Seriously?\"\n\nThe manfluencer sipped his beer. Behind his non-existent interest in the game, there was a sliver of longing. Barely noticeable, but there. He shrugged. \"Maybe one day.\"\n\n\"What about Jay?\n\nLoe's eyes flickered. \"What about Jay?\"\n\n\"Oh,\" Matt rolled his eyes. \"Don't play stupid. He likes you. He waits on you and looks at you like you're the winning lottery ticket you so desperately want to be.\"\n\nLoe glanced at the jumbotron just as Jay's play was being highlighted in the replay. \"He wants someone who can dedicate more time to him. I'm too busy. I can't drop my life for him.\"\n\n\"He said he wants someone who is willing to dedicate all their time to him?\" Matt was confused, this didn't sound like Jay at all.\n\n\"No, but someone of his magnitude needs someone like that and I'm not that person.\"\n\n\"By that logic, I wouldn't be with Seamus. I get where you're coming from, though. I felt that way about Seamus. I convinced myself I knew what he wanted or what was best for him. I have a list of reasons why it would never be. A word of advice? Don't be me.\"\n\nLoe smiled and sipped his beer but didn't say anything else. The game passed in a blink of beers and cheers.\n\nThey were still sitting there, talking about high school and how their similar experiences when they noticed everyone was packing up. Matt looked at Seamus, making the hot jock chuckle at his total cluelessness. \"Hawks won,\" Seamus teased.\n\n\"Oh cool.\"\n\nScott and Will burst into laughter. \"Please, please say it just like that to Jay. And make sure we're there to watch it,\" Scott mocked Matt's unimpressed tone. \"You won the playoff game and now you're off to the Superbowl? Oh cool.\"\n\nThe teasing never relented. Not when they packed their stuff, or when they were shuffled like cattle out of the stadium, not even in the car.\n\nAll the while, Matt sat in the back, smiling.\n\n* * * * *\n\nThe after party was at a local sports bar. It was a tight fit and Jay and his friends weren't even there yet.\n\nWhen they arrived, it was the entrance of kings. The four guys came in with their hands in the air as the bar roared. The noise was deafening yet exhilarating. Matt loved it. They didn't have the hometown advantage but they still got nothing but love. At the end of the day, it was about the sport and they were surrounded by good old fashion fans who were excited to be in the same place as the team heading for the Superbowl.\n\nAs a non-sports fan, Matt's only exposure to post game parties were the tabloid covers he saw near the check-out line. He expected the night to be a total circus but it turned out that famous people had parties that didn't involve lines of paparazzi or fans throwing themselves at them. They were just normal people celebrating a job well done.\n\nMatt drank a little but not enough to make a foolery of himself. He watched with fascination as fans congratulated the players and got pictures. Some were even bold enough to stay for a drink.\n\nAfter Loe's comment about wanting to be looked at the way Seamus looked at Matt, Matt paid extra close attention. Poor Jay. Discreet wasn't in his nature. He was bold in his affections and wasn't shy about making himself known. Still, Loren pretended not to notice. Matt watched the dejection build as the night wore on. Jay made sure Loren always had a drink, food, whatever he wanted. Still, nothing.\n\nAs the night wore on, Jay gave Loe the space he seemed to want and sulked off.\n\nMatt knew differently and catching Loe as he watched Jay laugh with a couple of fans only confirmed it. After spending the entire weekend ignoring Jay, Loren was jealous.\n\nMatt slipped out from under Seamus's arm and pointed at Mr. Brooding. \"I'm just going to see what he's up to. I'll be back.\"\n\nLoe was sitting at a pub table, alone. Matt slipped in and waited. Loe frowned. \"What?\"\n\n\"What's your deal?\"\n\n\"My deal?\"\n\n\"Jay.\"\n\nLoe straightened and tried hard not to glance at said person. \"What about Jay?\" he asked innocently.\n\nMatt scoffed. \"Let's skip the bullshit and tell me why you're still playing games. You spent all night ignoring him and now you look like a beaten puppy because he gave up.\"\n\nThey looked across the bar. Jay was with two guys, both sporting lime green and blue jerseys and were happy as hell to have Jay's attention. There were definite vibes happening. The two guys were interested in more than just an autograph.\n\n\"Looks like he moved on just fine.\"\n\nIt was a lie. The vibes were mostly from the two fans. But Matt played along.\n\n\"Isn't that what you wanted?\"\n\nLoe said nothing, just sipped his beer and tried not to watch Jay. Matt sighed. When the dust settled, Loe was just a normal guy fighting the same demons as any other person. He was just as prone to making stupid, self-sabotaging choices.\n\n\"You don't get to sit here and pout. He won a big game tonight and was thirsty for a little acknowledgement. All you had to do was congratulate him and tell him he played well. Instead, those two cleat chasers are doing it.\"\n\nLoe looked absently ahead as he slowly spun his glass around in his hand. \"There will be cleat chasers at every single game.\"\n\nMatt nodded. Yeah, there probably would be. \"That doesn't mean anything.\"\n\n\"I know what goes on behind the scenes. I've heard enough stories to know that being in a relationship doesn't mean anything.\"\n\n\"Then they're in the wrong relationships.\"\n\n\"Maybe...\"\n\nMatt waited for more but it was clear Loe was done talking. After a while, he snapped out of his mood and was laughing freely. Matt leaned across the table, showing Loe the scar he'd gotten on his wrist when he was twelve. He'd twisted a rope around his wrist and propelled off the roof of the house.\n\nLoe turned Matt's wrist over and looked at the damage. \"That's impressive. Besides a scar, how'd it end?\"\n\nMatt rotated his wrists. \"Good. I mean, the goal was to land on the ground, and that's where I ended.\"\n\nLoe laughed, then something caught his eye and his smile faded. He dropped Matt's arm like a hot potato and leaned back in his chair. \"I'm too young to die.\"\n\n\"What?\"\n\n\"Your boyfriend. You should move away, like, across the room.\"\n\nSeamus was watching them. He didn't look angry, if anything, his eyes were heated. Matt was getting lucky tonight.\n\nLoren threw his hands in the air. \"Oh sure, the second you look at him he gets all gooey eyed. I swear he was just shooting daggers at me.\"\n\nMatt held Seamus's eye for a moment longer. He saw nothing but love. \"I think you're seeing things. He's not like that.\"\n\nOh. He was like that. Loe decided to prove it by closing the distance once again. A minute later Seamus was there, pulling him away.\n\nThey stopped in the middle of the crowded dance floor and Seamus pressed his chest to Matt's.\n\nIt wasn't club music, just everyday stuff from the radio, but it was perfect. When Seamus looked at him with those deep brown eyes, it didn't matter that they were in some random bar filled to the brim with people they didn't know.\n\nMatt shifted his hips.\n\n\"What are you doing?\"\n\n\"Dancing,\" he teased.\n\nSeamus reacted by tightening his arm so Matt felt every inch of him.\n\nMatt stared at Seamus. \"You're kind of hot tonight. The jersey. The hat. You got this varsity jock thing happening.\"\n\n\"Yeah?\"\n\nMatt pressed his hips against Seamus. \"Hell yeah.\"\n\nMatt ordered a car from his phone and they left without looking back. The hotel wasn't far but it was completely empty.\n\nSeamus was a few paces ahead of Matt and sporting a new swagger. When the door shut behind them, Seamus stalked Matt like a predator does prey; slow and knowingly.\n\nBeing hunted was kind of fun.\n\nSeamus stalked him like a jock in his jersey and backwards cap. When he had Matt backed against the bed, he ran the back of his fingers across his jaw and over his lips\u2014parting his mouth. Seamus leaned in like he was going to kiss him but continued to his ear instead. \"You're going to suck my dick, aren't you?\"\n\nHell yes he was, it was all Matt could think about. He dropped to his knees. Seamus towered over him as he unbuttoned his pants. His cock was hard.\n\n\"Open those pretty lips.\"\n\nLicking his lips, Matt did as was asked and Seamus guided his cock across Matt's tongue.\n\nPrecum exploded against his taste buds and made him want so much more. He let Seamus tease for a while, then he took over. This was his feast. The only thing that mattered, that existed in that moment, was rocking Seamus's world.\n\nSeamus was close. It was in his taut muscles and the way his dick twitched. He could feel the cum boiling, ready to explode. Matt pulled off because he wanted more than a blow job. He didn't bottom often; he had a feeling tonight would be different.\n\nIt was. Seamus hauled him up and tossed him on the bed. Matt got flipped on his stomach and his pants ripped from his body. Fuck, Matt's heart was beating out of his chest.\n\nSeamus was on him, breathing against his ear, lubed fingers pressed between his ass; telling him exactly what was to happen.\n\n\"Do you want this?\"\n\nMatt gripped the sheets. \"Fuck. Yes.\"\n\nSeamus sucked on his ear and breached him. First with one finger, then two, then who knows. Matt wasn't counting.\n\n\"I'm going to fuck you so hard.\"\n\n\"Yesss,\" Matt moaned.\n\nSeamus shoved his pants down enough to free himself, then mounted Matt. He couldn't wait another second. He slowly pressed forward, then backed out, then forward again. He barely gave Matt time to adjust before he slid all the way in.\n\nMatt was close to ripping a hole in the sheets, he was so horny. Seamus was lighting his fire. He couldn't get enough. \"Harder,\" he begged. \"I want it.\"\n\n\"Like this?\" Seamus fucked him so hard he pushed him across the bed but hit all the right spots. Fuck Seamus. How dare he be greedy? Matt wanted to feel like this more.\n\nSeamus leaned down. \"You need to touch yourself, now.\"\n\nMatt braced himself on one elbow and used the other hand to touch himself. A few tugs and he felt the pulling of his balls. \"I'm close,\" he told Seamus. \"Keep going just like that. Yeah, fuck.\"\n\nMatt arched his back and let the simulation drive him over the edge. It came in an intense flood that made him scream like a dying man. Seamus collapsed on the bed, pressing Matt into the mattress, his dick still lodged in Matt's ass.\n\n\"Holy shit,\" Matt said.\n\n\"Intense.\"\n\nOnce their breathing slowed, Matt shoved Seamus off him. Matt looked at Seamus, who was still fully dressed, and laughed.\n\nSeamus's smile was lazy and sated. \"I got my dick out. That's all that matters.\"\n\nHe reached out and ran his fingers over the hat. \"This is hot. I love that you fucked me with your hat on.\"\n\nSeamus grabbed Matt's hand. \"I love you.\"\n\nWarmth bloomed in Matt's chest but before he could return the sentiment. Then he felt it and bounced off the bed and ran to the bathroom. He hadn't planned on taking Seamus, so there had been no prep. Matt let his body do its thing, then cleaned up and went back to bed. Seamus was naked and barely awake.\n\n\"Better?\" he asked.\n\n\"A heads up would've been helpful. I could've saved myself a mess.\"\n\n\"Couldn't have known,\" Seamus mumbled.\n\nMatt watched Seamus fall out of consciousness. He never met no one like him. He definitely never dated anyone like him. No one could convince Matt that Seamus wasn't out of his league. No way. Facts were facts. The cards were on the table. But if Seamus couldn't see it, then who was Matt to argue?\n\nMatt held the ace of spades.\n\n* * * * *\n\nHe woke to a pair of soft brown eyes and those eyes definitely deserved a kiss.\n\n\"Fuck,\" he moaned as he tried to move. His ass was sore as hell. \"How do you do this all the time?\"\n\nSeamus chuckled. \"It's not that bad. You're being dramatic.\"\n\nHe wasn't. He'd been railed last night and there was no walking to breakfast without the entire room knowing. \"I'm paralyzed.\"\n\nSeamus laughed louder and gripped Matt's morning wood. \"Does that mean there's no round two this morning?\"\n\n\"You're delusional if you think you're getting anywhere near my ass this morning.\"\n\nSeamus rolled on top of Matt and straddled his hips. \"What about the other way around? Or are you too sore for that?\"\n\nMatt did a practice thrust and could feel every movement in his ass. \"Maybe if you do all the work.\"\n\nThat wouldn't be a problem.\n\n* * * * *\n\nMatt still walked into breakfast like a cowboy after a long ride. Besides Jay and Loe, who gave him knowing looks, no one else noticed. Straight guys never picked up on these tells. Plus, most of the guys drank too much the night before and were trying to regain some semblance of life before flying out that evening.\n\nThere were no videos, no dancing, no Tik Tok videos. Just lounging, light laughing, and storytelling.\n\nAfter lunch, Matt and Seamus packed their bags and left with little fanfare. Now that he knew everyone, he was bummed he wasn't flying on a private plane with everyone else.\n\nMostly, he wanted to get to Aidan.\n\n* * * * *\n\nAidan was at the windowsill with both hands against the glass. His smile went as big as Texas when he spotted them. Even from a distance you could tell he was bursting with joyish energy. Aidan climbed down from the window and was stomping around in excitement when they came through the door. Seamus was there first to swoop him up, but Matt was quick to steal him away.\n\nAidan had a lot to say as they loaded him into the car.\n\nSeamus looked across the console and smiled. It was a this-is-better-than-any-vacation smile and Matt couldn't help but agree."
    ],
    "authorname": "Mrsgnomie",
    "tags": [
        "oral sex",
        "gay blowjob",
        "love story",
        "gay romance",
        "gay anal"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/boss-nanny-ch-16"
}
{
    "title": "The Assassin's Bride Ch. 08",
    "pages": [
        "It is a bit weird writing a bunch of different themes, but I love it! Thanks Rumpole, for nagging me to get it done.\n\nAs always, voting and comments appreciated. \n\n~I write for pleasure, I post for joy~\n\n********\n\nWith a soft, grey blanket about her shoulders, Carina sat quietly while Carlos poured her water. Dressed in a red cotton t-shirt and black jeans, he was just as she remembered him. Tall and bulky, with his black hair cut short, his features were drawn and there were dark circles under his eyes. But he was still attractive in a stoic, roughened way. He still looked so much like his dead brother.\n\n\"So, he took you from Eduardo's apartment?\" he asked.\n\nBriskly wiping tears from her cheeks, Carina nodded. Sensing a critical moment, her mind struggled to keep a sharp line of thought. There was a lingering shock that she hadn't recognised the yacht. Perhaps Michael wasn't the only one losing his marbles.\n\n\"Did he rape you?\"\n\nCarina listlessly nodded.\n\n\"I'll cut off his dick, before I kill him.\"\n\nChoosing not to argue, Carina lifted her gaze to see Carlos carefully watching her. Only then did she realise he was scrutinizing her reaction, watching for some sign to suggest she was anything other than Michael's prisoner. But Carlos seemed satisfied that she was more a victim than co-conspirator.\n\n\"Who is the other man?\"\n\n\"Michael's enemy,\" Carina immediately answered. Knowing Carlos, it would be foolish to disclose a first-name basis with Gavin.\n\nIf she could get Gavin above board, he could possibly save them all. Whatever his grievances with Michael, Gavin would not condone his torture and murder. From the little Carina had seen, Gavin was quite resourceful and cunning. Most importantly, he was level-headed in emergencies.\n\n\"Paulie said he had a knife to your neck.\"\n\n\"It was a bluff to trick Michael.\"\n\n\"Mm.\" Carlos sat beside Carina, and firmly took her hand. \"Carina, the last time I saw you... I am so sorry for what happened,\" he murmured, his thumb drew a smooth circle in the centre of her palm.\n\n\"It's weighed so heavily on my mind when you disappeared. The possibility I might never get to make amends. But now I hope to make you happy where my brother could not.\"\n\n\"What?\" Carina frowned, feeling bewildered. What was he talking about?\n\n\"I mean I cannot let you get tangled in another scrape with the wrong man,\" Carlos elaborated, his dark eyes determined. \"I will take care of you. It is the least I could do for Eduardo. He would want me to ensure your safety.\"\n\n\"B-But Carlos!\" Carina exclaimed, trying to pull her hand away.\n\n\"I will not touch you against your wishes,\" Carlos said tersely. \"You are family to me. I will never lay a hand on you again, unless you ask me to. This is difficult for me. I...\" he hesitated.\n\n\"I always wanted you. I would never have acted on it while you belonged to my brother. And I won't act on it now, without your permission. I had a drinking problem, and when Eduardo died, it defeated me. I am ashamed that my feelings surfaced in such an ugly way. But it will never happen again.\"\n\nCarina nodded. Inside, she was not nodding at all, but she knew Carlos' nature. He was not an amorous, flirtatious man. He did not express his feelings openly or often. It didn't matter how much he desired her, Carina knew he wouldn't lay a finger on her without encouragement. Carlos never made the same mistake twice. As a man of his word, it also meant he would not release her. She was again, a kept prisoner.\n\nIt was almost a shame that an honourable, steadfast character like Carlos was embroiled in underhand dealings and capable of terrible acts of violence. Carina still resented the fact Carlos' disclosure perfectly matched Michael's speculation. Carlos was in love with her.\n\n\"I have to admit, seeing you again has brought back some happiness,\" Carlos confessed. \"It reminded me of him. Our past life.\"\n\nCarina bleakly opened her mouth to respond, but Carlos gestured for her to wait. Carina curiously watched him leave her side and open a small black case. When he lifted the item out and turned to her, Carina's eyes widened.\n\nMoments later, Carlos gently clasped a weighty, diamond-sapphire necklace around Carina's neck. The stones were heavy, and delicately scattered down her throat to collectively rest along her collarbone.\n\nWhere Carina would have been thrilled by such a gift in the past, the stone and metal assemblage made her feel suffocatingly imprisoned. It ironically aligned with their current topic of conversation; she felt like Carlos had just collared her.\n\n\"This was meant for your birthday. Eduardo wanted...\" Carlos choked and cleared his throat. \"He was right. It does you justice. You look stunning, Carina.\"\n\nCarina suddenly burst into tears. She didn't know precisely why; what particular aspect of a multitude of traumatic events broke her. She couldn't tell whether it was the trauma of the past, or fear of the future, or both. But in that moment, everything seemed wrong.\n\n\"Shh, Carina.\" Carlos quickly drew her into a fierce hug. \"It's over. You're going to be ok.\"\n\n\"W-what about the other man?\"\n\n\"I will speak with him, and decide what to do.\"\n\n\"And Michael?\"\n\nCarlos' arms tensed about her. \"His time will come. I have waited long enough to get my hands on him. By the time we are finished, our closure will be complete.\"\n\nCarina hiccupped and nodded against his neck, wondering how the fuck they were going to get out of this alive.\n\n********\n\nLocked at the base of the yacht, Michael and Gavin sat on opposite sides of a small room, both with their hands and ankles cable tied.\n\n\"If you'd listened to me, you wouldn't be caught up in this,\" Michael said harshly.\n\nBlood seeping from the cut on his cheek, Gavin rolled his eyes at his companion's smouldering glare. Well, one-eyed glare, considering the nasty punch he'd dealt Michael.\n\n\"I've been in worse fixes,\" he sighed.\n\n\"True.\"\n\n\"You do look a little worse for wear, Ethan,\" Gavin cheerfully observed, surveying the damage to Michael's face. Though Michael's swollen eye wasn't as bad as it first appeared, and Gavin predicted it would reduce to an ugly bruise within 24 hours.\n\n\"Thanks for that,\" Michael curtly replied.\n\n\"My pleasure. Really, it was.\"\n\nThey looked to the steel door as it clicked and opened. The two men who entered were familiar to Michael. One stared with a speechless hatred, the younger one looked more dismayed than angered by the sight of Michael, his hazel eyes glittered with the hurt of Michael's betrayal.\n\nWithout warning, Michael threw himself forward and looped his tied hands around Gavin's neck. Pulling the restraint brutally tight against Gavin's throat, he hauled him close until his lips met Gavin's ear.\n\n\"There are spares at the rear of this vessel. Get her out of here.\"\n\nBefore he could say more, the older visitor seized Michael by his hair, skilfully unlooped the tie from Gavin's neck and dragged Michael back.\n\n\"You're lucky Carlos wants to play with you first,\" he snarled. Turning to the young man, he pointed at Gavin. \"Free his feet and take him to Carlos.\"\n\nThe younger one immediately obliged, and led Gavin from the room whilst his older companion stared, unable to drag his eyes from Michael.\n\n\"It's like seeing a ghost, huh?\" he said distantly, cracking his knuckles. \"And when I think I took orders from you...\" He viciously spat on the ground between them.\n\n\"Yes, I remember you were my little bitch,\" Michael swiftly agreed with a taunting smile.\n\nThe other man's eyes flashed, but he had himself under control.\n\n\"Oh, no, Michael,\" he said with soft venom. \"I am not going to get on Carlos' bad side by further marring your pretty face. You know what happens to people on his bad side. I don't envy you.\"\n\nAfraid of losing his temper, the man quickly left the room and securely locked it behind him.\n\n******\n\nGavin was led to an austere dining room, and as the door opened he was confronted by the sight of Carina firmly encased in the leader's arms. There was a very hefty piece of jewellery glittering at Carina's throat, and she seemed hardly pleased by it. She looked miserably exhausted.\n\nFinally released, Carina looked relieved when she was led from the room. She gave Gavin a furtive glance as they passed whilst unconsciously fiddling with the back of the necklace, searching for the release clasp. Gavin completely ignored her, his eyes centred on Carlos.\n\n\"Untie his hands,\" Carlos ordered.\n\nGavin's wrists were cut free, and he was directed to take the seat opposite the brooding stranger.\n\n\"I am Carlos. What is your name?\"\n\n\"Gavin.\"\n\n\"Carina said you are Michael's enemy?\"\n\nDeciding to conceal Michael's true identity, Gavin pursed his lips thoughtfully, and nodded.\n\nCarlos poured him a glass of water. \"Will you tell me why you were out on the ocean with Carina?\"\n\nGavin's eyebrows slightly lifted, as Carlos' tone suggested answering wasn't quite optional. \"I rescued her.\"\n\n\"Why?\"\n\n\"Because she was a prisoner.\"\n\nWith his elbows on the table, Carlos rested his chin on his fists. \"Not because she is very beautiful? Not because you wanted her, for yourself?\"\n\nGavin looked bored. \"Carina is attractive, granted. But I'm sure she never said my intentions were untoward,\" he said blankly, praying Carina hadn't disclosed their connection bordered on intimate.\n\n\"Very well,\" Carlos said, allowing Gavin's ambiguity. \"We have been through a lot, she and I. Michael murdered someone very dear to both of us. I am not a very trusting man, or a forgiving one.\"\n\nGavin nodded, acknowledging the thinly-veiled threat. Carlos took a moment to let his words sink in, before continuing.\n\n\"I will be upfront with you, Gavin. I am going to find out what I can about you. Until anything upsetting surfaces, you are my guest. I am very grateful you brought Carina to me.\"\n\nGavin's pale-blue eyes turned cold at the suggestion he was a mere transport officer for an imprisoned woman. He had seen enough of Carina to tell she was more despondent than relieved by their being discovered.\n\n\"So Michael will stay downstairs?\" Gavin asked, drumming his fingers on the table.\n\n\"Of course. He is on death row, and dangerous. A lethal combination.\"\n\nGavin nodded. \"Makes sense. He should be fed.\"\n\n\"You object to his conditions?\" Carlos stated, suddenly deadpan.\n\n\"Well, he has caused both of us trauma-\"\n\n\"And Carina,\" Carlos harshly interjected. Gavin tilted his head in concession.\n\n\"Your yacht has stalled. You're not in a hurry.\" Gavin gave Carlos a meaningful look.\n\n\"What point do you make, Gavin?\"\n\n\"You might want to keep Michael in a better condition if you want the torture to last. Unless you plan to starve him to death? That would be anti-climactic. I suppose it comes down to the damage done-\"\n\n\"Do not presume to understand the extent of my loss, Gavin,\" Carlos stonily interrupted.\n\nIt was true, his violence was normally swift and brutal. But in this case, he was planning a very prolonged death for Michael. It was his only chance to counter the grief with satisfying revenge, and he did not want it to be fleeting.\n\n\"How has Michael wronged you?\" Carlos questioned.\n\nGavin's jaw tensed with real emotion. \"He was involved in an incident that killed someone dear to me.\"\n\n\"We have that in common. Well, I will see Michael gets his vitamins,\" Carlos said with mild sarcasm. \"Again, I am grateful for your interference.\"\n\n\"My pleasure,\" Gavin politely answered.\n\n\"However, speaking of treatment...\" Carlo's dark eyes took on a curious gleam. \"You've done quite a job on Michael yourself. And I know Michael is no pushover. You must be a skilled fighter.\"\n\n\"I am, thank you,\" Gavin said smoothly, choosing to accept Carlos' statement as a compliment, rather than a query. He was also careful not to deny the observation.\n\nCarlos gave Gavin a hard stare, then got to his feet.\n\n\"Hydrate yourself. The water is not poisoned,\" he said with a rare smile at Gavin's justified paranoia. Then he looked to the man hovering by the door. \"Take Gavin to a guest room, and see to that cut-\"\n\n\"A medical kit is all I need, I can attend myself,\" Gavin calmly interjected.\n\nCarlos paused a heartbeat, then continued as though Gavin never spoke. \"Ensure he is comfortable.\"\n\nTossing back the glass of cool water, Gavin wanted to roll his eyes. Carlos may as well have told the guard to 'watch him'.\n\n*********\n\nCarina's suite appeared strangely sterile compared to Michael's comfortable prison. She sat up on the bed, staring ahead at her tired reflection. The discarded necklace lay beside her on the dark-violet bedspread.\n\nCarina wondered if Carlos had reserved this suite for her, as there were definite feminine touches throughout. It was just like their old days, when he arranged everything for her. What was once luxuriously convenient was suddenly bleak and stifling.\n\nDiscarding her dirty white tracksuit and stepping into a hot shower, she sighed as the water soothed away some of her anxiety. When she finished up and checked the cupboard for a robe, Carina froze for a full minute as an array of familiar colours filled her vision.\n\nCarlos must have taken her clothes from Eduardo's apartment; the ones Michael left behind, anyway. Carlos must have been confident of finding her. Blinking away her unsettling surprise, Carina put on some black track pants and a soft grey jumper and tried to forget the memories that came with the outfit.\n\nAs she methodically plaited her hair, her mind elsewhere, someone knocked.\n\n\"Come in,\" Carina called hoarsely, shocked by the way her voice deteriorated, realising it had been several hours since she consumed anything. She'd been too distraught to drink the water Carlos poured her.\n\nGavin casually walked in, flanked by two men. The men discreetly stood against the wall while Gavin joined Carina on the bed.\n\n\"How are you doing?\" he asked quietly, keeping at least half a metre of space between them.\n\n\"Better,\" Carina answered honestly. Gavin's presence was very reassuring. She'd been petrified that Carlos would ultimately decide Gavin belonged with Michael.\n\nLooking mildly concerned, Gaven reached for a bottle of water from a nearby table, and twisted the lid. \"Here, you're parched.\"\n\nCarina gratefully chugged the water, unable to stop her eyes darting to their silent supervisors.\n\nGavin sighed, looking at the discarded jewellery on the bed. \"Well, Michael is safely imprisoned, and we are liberated,\" he said cheerfully.\n\n\"That's good to know,\" she stiltedly answered.\n\nGavin pursed his lips, wishing she were more apt at the art of pretense. Then again, she was just a pretty girl in the custody of criminals.\n\n\"Well, I just came to see how you were,\" he smiled, and got up from the bed with an almost indiscernible shake of his head when Carina opened her mouth to protest. \"I guess I'll see you at dinner.\"\n\nGavin's tall figure left without a backward glance, Carina sadly watched her last source of comfort abandon her. Whether in Michael's captivity or under Carlos' guard, Gavin had become something of a symbol of freedom, and a tantalizing one.\n\nBut she understood Gavin's indifference; how important it was that he didn't appear a threat. The man was gorgeous, and one inappropriate move toward her, and Carlos would likely fill Gavin with bullets and throw him overboard. It wouldn't be the first time.\n\n*******\n\nWithin the hour, Carina was summoned to Carlos' suite. It was the largest on board, and Carina tried to forget the sinful things she did with Eduardo all over it.\n\nWhen she was ushered in, Carlos lowered the papers in front of him with a welcoming smile. \"Sit, Carina.\"\n\nAs she nervously settled in a large armchair beside the couch, Carlos gave her a searching look. \"These last hours have been overwhelming, and I've neglected you. Do you need a doctor?\"\n\nCarina began to shake her head, but paused.\n\n\"Go on,\" Carlos encouraged, leaning forward. \"What do you need, Carina?\"\n\nShe flinched, afraid her request might rouse an irrepressible anger in Carlos and lead to sudden, regretful events. But he already knew she'd been raped.\n\n\"I could be pregnant,\" she murmured, her eyes glimmering apprehensively. Carlos' jaw clenched.\n\n\"I am afraid I don't have those kinds of medical supplies,\" he said grimly, his hands balled into fists. \"I will procure what you need as soon as I can. But Carina, we are a long way from shore.\"\n\nShe looked confused, and after a brief moment's hesitation Carlos decided to explain, his eyes serious. \"I am all for prevention. But if it is too late, I cannot condone a termination.\"\n\nCarina's jaw went slack with horror. It wasn't necessarily that she'd choose that road, it was more the disturbing reality that she might be forced to raise Michael's child with her dead lover's brother, after brutally murdering the child's father. That Carlos, the man who killed without flinching, who had no qualms about murdering children, would insist she carry their enemy's child to full-term? It made no sense.\n\n\"That makes no sense,\" she blankly stated her thoughts. Carlos looked bitter.\n\n\"You could be pregnant. My brother cherished you, and that child would be a part of you. And I could never hurt you, Carina.\"\n\n\"That makes no sense!\" she repeated with growing panic. \"You would force me to have a traitor's child? A child who would look like Michael? Carlos, you kill children!\"\n\n\"Do not talk to me about work, Carina,\" Carlos said sharply. \"I know you loved my brother; that your feelings for me are different. I hold no hope or expectation that you would consider accepting me as a lover or bearing my children.\"\n\nBile rose in Carina's throat. Perhaps she'd taken Michael's arrangement for granted.\n\n\"I'm upsetting you, I know,\" Carlos said soothingly, reaching for her hand. \"Carina-\"\n\n\"I would rather accept you, than be forced through that!\" she blurted, pulling away. \"I understand your limits, Carlos, but there is still time...and the yacht is not moving!\"\n\nThere was a terrible suspicion in her mind that Carlos hoped she was pregnant, and would deliberately wait until it was too late to procure an after-pill. Though admittedly, the time-frame was almost up, and he wasn't exactly hurtling toward shore.\n\nIt was somehow more frustrating than her arguments with Michael, because at least Michael conceded her points even if he denied her wishes. Carlos would not brook argument, and even if he listened, he wouldn't understand.\n\nBut she could get blind-drunk every night, just in case. She could vigorously exercise every day until she passed out. She could ask Gavin to punch her in the abdomen, though she already knew he would never consider it. Carina started, so preoccupied with emergency strategizing that she forgot Carlos was opposite her.\n\n\"You speak from desperation, Carina,\" he said dryly, leaning back on the couch. \"But we'll see.\" There was a definite glimmer of interest in his eyes as he picked up his iPad and flipped open the leather cover. \"There is very little to learn of your friend, Gavin. Much like Michael.\"\n\n\"How did you find us?\"\n\nCarlos laughed roughly. \"I didn't. If you weren't on the water...I was ready to turn back, to be honest. I used all my resources to track Michael's journey. I tapped countless CCTV. I had to wring a few necks to find the car rental company. He paid cash, but there is always a trail. It led to the docks, and that is where he lost me.\" He looked to her, simmering grief in his expression.\n\n\"The idea that you might have been involved cut me, like a knife.\" He pressed a hand to his heart. \"I already felt horrible about what I did to you; about Eduardo being gone. I had to find you, Carina. It was my responsibility to keep you safe, or to make you pay for an unspeakable betrayal.\" He threw his head back to stare at the ceiling. \"But part of me knew it couldn't be true. You really loved my brother, though he didn't deserve you.\"",
        "Carina warily cleared her throat, uneasily recalling the last time they had this conversation. \"Well, I am glad you know now.\"\n\n\"Me, too,\" he sighed. \"I had that room prepared for you, hoping to bring you home. But part of me never believed I would. I even put some of your clothes in the cupboard. Well,\" he smiled, gesturing to her outfit and Carina found herself blushing.\n\nThinking on his last comment, Carina's lip curled slightly as she remembered Michael also stocked a cupboard of her things. There were disturbing parallels between her situation with Carlos and captivity with Michael that were beginning to bother her.\n\nWithout a love-hazed, hedonistic relationship with Eduardo, it became clear she was always a well-kept prisoner. Gavin's relaxed manner brought out the reality of her circumstances. By comparison, he was quite a feminist. He never pressured her for his desires, he encouraged her to make her own decisions.\n\n\"I want to see Michael,\" Carina demanded, surprising herself.\n\n\"Absolutely not.\"\n\n\"Why?\"\n\nCarlos pursed his lips. \"Because you might seize a gun and shoot him. Because he could say things to upset you. There are too many reasons why.\"\n\nAt the idea of Michael setting eyes on Carina again, Carlos' face darkened and he arched an eyebrow. \"Have you not spent enough time with him?\"\n\nCarina looked disgusted. \"So unlike you to mock me.\"\n\n\"I'm sorry, Carina,\" Carlos said quickly. \"That was a horrible thing to say. The truth is, I hate that he had you at all. I don't want another minute of your time wasted on him, until we have our revenge.\"\n\n\"I'm tired,\" Carina muttered, restlessly smoothing her hands down her pants, and Carlos smiled affectionately.\n\n\"Very well. I'll see you at dinner.\"\n\nBefore she reached the door her heart leapt as he called her back.\n\n\"Is there anything about Gavin that I need to know?\"\n\n\"I don't know,\" Carina lied, careful to look Carlos in the eye. \"I am not close to him, but he saved me, so I trust him.\"\n\nIt was a good answer. Too much faith in a stranger would rouse suspicion, but Carlos still scrutinised her.\n\n\"I sense he has an affection for you, Carina,\" he said bluntly. \"Just a hunch.\"\n\n\"He's a man.\" Carina rolled her eyes with a derisive sound, much like her old style.\n\nCarlos chuckled and reached for the papers. \"I have missed your conceited nature. Go rest, Carina.\"\n\nShe didn't need to be told twice.\n\n*********\n\nOn the way back to her room, Gavin happened to be passing down the same narrow corridor, with a man following at a respectful six metres.\n\nGavin smiled politely as they awkwardly shimmied past each other.\n\nCarina continued her way until she reached her room. Wistfully stretching her arms over her head, she felt something foreign caught under her bra strap. With a gasp she extracted a balled up piece of toilet paper. Gavin was good.\n\nFrom past experience she knew there were few cameras on board, but still she kept the piece clenched in her fist and went straight to the bathroom. Carefully unfolding the soft material with eager anticipation, she read the penned message and her heart sank.\n\n'He needs distraction. Seduce him.'\n\nCarina paled, and quickly flushed the toilet paper. Gavin wanted her to seduce Carlos. Remembering Gavin was a one-woman man, and seemed taken with her, Carina felt mildly hurt by the instruction.\n\nSuddenly feeling dirty enough for a second shower, Carina angrily shed her clothing and stepped into the stall. The cascading, warm water again soothed her agitation as she cried bitter, exhausted tears. Soon enough, reality kicked in.\n\nYour lives are on the line, stupid girl. \n\nMichael would shortly be tortured and murdered, Gavin was on thin ice, and she was descending into a life of loveless captivity. Gavin's message was motivated by pure survival, a circumstance he had likely experienced often, where she was an amateur. He'd risked his life giving her that message, and she was crying about hurt feelings.\n\nWhether Carlos chose to release or kill Gavin made little difference to her outcome. Once Michael and Gavin were out of her life, there would be no way out. There were only two choices -- help with an uphill battle, or accept indefinite captivity. Once reburied in Carlos' world, there would be no second chances.\n\n******\n\n\"And here she is.\"\n\nWhen Carina was ushered into the dining room, Carlos and Gavin appeared to be having a pleasant conversation. It was hardly animated; the kind of polite chatter you would have if trapped in an elevator with a complete stranger. Gavin seemed relaxed, with the cut on his cheek patched up, he looked ruggedly handsome.\n\nGavin was strikingly Nordic-looking, with very blonde hair and bright blue eyes. Carlos, a swarthy, black-haired Spaniard, tended to favour his own race above all others and was unmoved by Gavin's easy charisma. To Carlos, charisma was dangerous; a mask that concealed a man's true agenda. It was the very same element that slipped Michael into Eduardo's inner circle. Eduardo had been a fan of fun banter. Carlos more favoured actions above words.\n\nCarina knew better than to sit anywhere other than beside Carlos. As always, he gently kissed her cheek in greeting. \"Well-rested?\"\n\n\"Yes, thank you,\" Carina smiled engagingly. She'd chosen a slinky, blue-back dress that dipped down her cleavage in a low V-neck, and pricey red heels that Carlos had gifted her before Eduardo's murder. With her long, dark hair arranged in a pretty side plait, she couldn't bring herself to wear the glittering necklace.\n\nStaring into her captivating eyes, Carlos felt a familiar longing from the old days. At least now, his feelings were no longer a shameful secret. He signalled, and a man disappeared for the kitchen.\n\nGavin was drinking whisky, Carlos a tall glass of water with fresh mint and lime, and Carina happily accepted a cocktail prepared at the small bar in a corner of the room.\n\n\"My favourite,\" she sighed, and gleefully wrapped her pink lips around the straw resting in her mojito.\n\nObserving the display, Gavin looked slightly cynical at her good mood, but Carlos' eyes were very warm.\n\nThe evening passed quite pleasantly, despite the elephant in the room. Neither Gavin or Carina dared raise the subject of Michael. Gavin was carefully nonchalant about the future of his former associate, and Carina similarly avoided expressing concerns for Michael's welfare. Though she'd love to beat Michael with a bat, she didn't want to bring forward his demise on her account.\n\nSo the topics were leisure, not business. Whatever was said, Gavin and Carina were careful not to contradict each other. Carina opted for the ignorance stance, and she knew Gavin approved. Besides, it was quite true that she knew little of her rescuer, so it was with genuine interest she closely listened to his answers to Carlos' light probing, wondering which was truth or fiction. In a room filled with observers, not once did Gavin look at her meaningfully or attempt to convey some message.\n\nToward the end of dinner, Carina was startled when she caught Carlos' expression as he watched Gavin. It quickly disappeared beneath a calm demeanour, but Carina knew that look. It was a very sharp look reserved for men Carlos did not trust.\n\nAfter dessert, Gavin declined coffee and left them alone. Carlos' eyes carefully followed his exit, with a warning stare at the man shadowing Gavin.\n\n\"Hey,\" Carina tipsily pinched Carlos' bicep. \"You're scowling.\"\n\n\"I am not sure how much I like this Gavin.\"\n\nCarina shrugged dismissively. \"You don't have to. Without him, I would not be here with you.\"\n\n\"That does not mean I should trust him.\"\n\n\"Well, Carlos, he's the hero who rescued me,\" Carina sullenly muttered, fighting to keep her tone civil. Even if she had been blissfully happy to be back in Carlos' power, which she wasn't, his attitude would irk her. \"I would have thought you'd be grateful.\"\n\n\"Singing his high praises?\"\n\n\"Ugh, you sound like Eduardo,\" she pouted, loudly slurping up the remainder of her third drink. She knew her task would be much easier if she was drunk.\n\n\"Another,\" she demanded, and Carlos frowned disapprovingly.\n\n\"Carina-\"\n\n\"I haven't had a real drink since I can remember!\" she wriggled angrily in her seat in a childish way that neither Eduardo or Carlos could resist.\n\nWith a heavy sigh, Carlos ordered another potent cocktail.\n\n\"Why is everyone staring at me!\" Carina snapped into her empty glass as the surrounding men quickly looked elsewhere.\n\n\"Because you were gone, and now you're back,\" Carlos impatiently answered.\n\nCarina loosely shrugged. She wasn't particularly close to the henchmen; they knew better than to be friendly with her. It was the scandal with Michael that attracted their curiosity. And clearly this, the aftermath, was heavily anticipated.\n\n\"Send them away,\" she complained, looking slightly mollified as a fresh cocktail arrived.\n\n\"I think it's time you went to bed, Carina.\"\n\n\"I have a drink to finish,\" she said petulantly, fixing her mouth around the straw and smiling dreamily as sweet alcohol flowed across her tongue.\n\n\"You can finish it in your room.\"\n\n\"Maybe you should go to your room!\"\n\nCarlos rubbed his temples and glared around at their captive audience. \"Leave us,\" he snapped, perfectly aware the watching men were enjoying the spectacle. No one spoke back to Carlos.\n\nOblivious to the men vacating the room, Carina threw her cocktail straw to the ground. Carlos seized her wrist as she raised the glass to her lips. \"Enough, Carina.\"\n\n\"Ow, Carlos! You said you'd never hurt me!\" she whined, leaning on him. Wresting her arm free of his grip, she grinned as some of her drink lightly spilled down the front of his shirt. \"Oops!\"\n\n\"You know damn well that I am not hurting you. Now, come on, enough nonsense. I shouldn't have let you have that last drink.\"\n\n\"Fine, fine.\" Carina turned sideways to slide the glass in front of him, her breasts innocently pressed around his bicep. \"I'll go to bed if you finish it.\"\n\nCarlos hesitated, unaware Carina knew his dire history with alcoholism. His last indulgence after Eduardo's murder had disastrous consequences.\n\n\"Finish it now, and go to your room,\" he sourly relented.\n\n\"But I'm bored!\"\n\n\"And I have things to do.\"\n\n\"No you don't,\" Carina cheekily contradicted him.\n\nStraightening in her seat, she maintained their proximity. Her face was inches away from his, and she deliberately let her mouth fall into a natural, partially-open pout. Though Carlos seemed unmoved, she could see his pulse rapidly beating, and his face was unusually flushed.\n\nCarina rested her chin on his shoulder and stared dolefully into his eyes. \"You have Michael in the basement, and me sitting beside you. Wasn't that the goal?\" she slurred.\n\n\"Carina-\"\n\n\"See? I am right, again!\" she cheered, throwing herself back into her seat.\n\nThe movement was deliberately excessive, and she would have hit the floor with her chair, but Carlos' arm was about her waist in a flash. Carina pushed forward as he pulled her against him. As a result, he collapsed back into his seat with Carina in his lap.\n\n\"I haven't been here since that New Year's party,\" Carina giggled, unfazed by her sporadic behaviour.\n\nCarlos' expression darkened as he unwillingly remembered the party she referred to. He'd been forced to intervene rather than let her have an open spat with Eduardo in front of prospective clients. On that rare occasion he'd trapped her on his knee, soothed her with a number of promises, and once he was finally alone in his hotel room, spent a good part of the early morning furiously jerking off to the memory.\n\n\"Hey!\" Carina lazily wrapped her arms about his neck.\n\nShe really was quite drunk, and Carlos was familiar with her antics. But it was usually up to Eduardo or Michael to handle her. Carina never realised, because Carlos seemed so strict and parental, how easily she could wrap him around her finger. It never occurred to her to try.\n\n\"W-what?\" Carlos ground out, sitting frozen with her in his arms, as though afraid to move.\n\nCarina twisted restlessly. \"Stop ignoring me.\"\n\n\"You're going to bed. Now,\" Carlos said, more savagely than he intended. Rising to his feet, he easily lifted her. \"And do not dream we won't discuss this in the morning!\"\n\n\"In the morning?\" Carina echoed. \"Are you coming to bed with me?\"\n\nCarlos groaned. \"I'll never let you drink again.\"\n\n\"Pffft,\" Carina retorted and playfully reached down, but Carlos hauled her higher before she could seize her glass.\n\n\"Carlos!\" she whined, lightly slapping his broad chest as she was briskly carried from the room. \"Carlos! I don't want to go to bed!\"\n\n\"Well, you are!\" he said through grit teeth.\n\nWhen he first saw Carina after their time apart, she was meek and apprehensive. He was almost suspicious of her, but once his doubts were alleviated, he felt heartbroken that the feisty girl he loved could be reduced to a broken shell of what she once was. But within hours, after rest and enough alcohol, she fell back into her personality. He had seen her in this state a hundred times. The key difference was, she now leaned on him to fill Eduardo's role.\n\nAfter all, Carlos did commit to take that part in her life -- but he considered it a protective role. And if he would be honest with himself, he'd admit that he'd missed the spoiled side of her. But right now, there was another part of him that felt sorely, unfairly tested.\n\nThe man outside Carina's room didn't dare show emotion as Carlos carried the squirming, drunk girl toward him, his face dark with heated frustration.\n\n\"Leave!\" Carlos snarled, and the guard abruptly fled the opposite direction at a run.\n\nStriding into the room, Carlos dropped Carina onto the bed, and lightly pushed her back when she clumsily tried to get up again.\n\n\"Carlos!\" she whined, then her mouth dropped open with outrage as he made a beeline for her mini-fridge and began to empty it of alcohol. \"Carlos, that's greedy! Get your own!\" she shouted, lunging at him.\n\n\"Carina!\" Carlos dropped the small bottles to seize her shoulders and walk her back, forcing her to the bed. She weakly struggled in a way that inched the skirt of her dress precariously high up her thighs. Carlos kneeled forward on the mattress and held her down.\n\n\"How the fuck did Eduardo control you?\" he exclaimed with exasperation, feeling both indignant and uncomfortably aroused.\n\n\"He spanked me,\" Carina innocently answered, barely managing to supress a grin as she saw the havoc her words wreaked on Carlos' control.\n\nCarlos seemed to undergo some kind of inner-spasm before he felt able to respond to the very provocative reply.\n\n\"Well, I am not going to do that!\" he raged, briskly releasing her to angrily fix his hands to his hips.\n\n\"Then what are you going to do?\" Carina cocked her head with wide eyes as he froze, poised on the mattress above her.\n\nNoting Carlos' stark resemblance to Eduardo, Carina's heart ached. Carlos was stockier, more dangerous, and roughly attractive as opposed to classically handsome like his younger brother.\n\nCarina vaguely concluded she was drunk and consumed with enough survival adrenaline to fuck him. Consciously it still felt wrong, and possibly bizarre. But she was ready to do it. A tiny, foreboding part of her wondered if she'd like it.\n\nAt her suggestive question, Carlos staggered back from the bed. As he vacated her personal space, Carina let her legs fall open and gave him a full view of her panties. They had shifted when he carried her, and Carlos stared directly at one side of her exposed, pink pussy.\n\nIt looked soft, and more delicious than he imagined in all his fantasies. He ached to taste her, to touch that smooth, silken flesh with his tongue and fingertips. Somehow, the lacey red gusset bordering one side made the sight obscenely erotic. As he continued to take in the shocking sight, Carina's long, slender legs edged invitingly wider.\n\nCarlos swore, raked both hands over his head and left the room, roughly slamming the door behind him.\n\nWith a big exhale, Carina let her head fall back to the bed, dizzily satisfied that she gave it her best shot. Carlos was one of the most controlled, fearless men she knew. Strangely tonight, for the second time since she'd known him, he seemed afraid. The only other time was when he realised Eduardo was dead. It was a different kind of fear.\n\nCarina knew she was playing with fire. But she was already in a furnace.\n\nTiredly rolling onto her front, Carina buried her face into the soft pillow, her drunken emotions running high. She was afraid, anxious and now very conscious of another development that filled her with grief and self-loathing. Even in her state, the truth rang clear through her mind as though she were sober. No amount of alcohol could stifle the undeniable fact that she was now the traitor.\n\nGroaning angrily, she sat up and pressed the heels of her palms to her eyes. As a thought struck her, Carina's hands dropped from her face and she scampered to the door. Squinting through the peephole, she realised the man guarding the room had not returned. Carlos, in his flustered state, probably forgot to reassign him.\n\n\"Are you ready, Carina?\" she asked herself, with a tone of challenge.\n\nSquaring her shoulders, she kicked off her heels and quietly opened the door.\n\n******\n\nGavin lay on his bed, still fully clothed and staring at the ceiling. From what he'd deciphered from his innocent strolls, not much of the yacht was under surveillance, which explained why he was constantly tailed.\n\nThere were no signs of bugs, but he couldn't risk speaking directly to Carina. He had counted six men so far, including Carlos, though there could be more. There was kitchen and maintenance staff. Carlos was definitely unsure about him, and Gavin determined over dinner that the brusque man would be impossible to win over.\n\nWith escort, he'd wandered about the yacht, except for forbidden areas he'd been politely diverted from. Without suspicion, quite easily managed to pinpoint the spare boats Michael mentioned. All in all, Gavin's work was certainly cut out for him, but it wasn't an impossible challenge. Just almost impossible. He needed to somehow extract Michael from the basement, retrieve Carina, and escape, without being murdered along the way.\n\nGavin's thoughtful gaze on the ceiling became frustrated.\n\nMichael had to be released, but restrained. Carina had to be plucked from a very watchful group of armed men. Carlos had to be pacified, somehow. Thus far, the only weak point Gavin could discern in Carlos' character was his fondness for Carina.\n\nGavin grimaced at the big job ahead, and the fact he had to handle it alone. It was the sort of job he would have recruited Tate and Michael's help for. But Tate was dead, and Michael was the reason he was there. Carina had a lot to do with it, but inadvertently. If there was a true victim in all of this, it was Carina.\n\nRemembering the way she looked at dinner, he sighed. The girl was sex on legs, and he quickly concealed how taken aback he was that Carina's natural beauty could be canvas to such a sultry contrast. Though the sight of her dolled-up to perfection took his breath away, it was the fresh-faced, mischievous girl that he wanted to take to bed.\n\nGavin's blue eyes burned with jealous anger when he remembered Carina could be fucking Carlos at that very minute. Gavin wasn't a possessive guy, but he hated giving Carina that message. Watching her charm Carlos at dinner convinced him she received it. Although he considered the note a necessity, part of Gavin hoped she'd fail. It was a dangerous line of thought, and out of character.\n\nBiting his lip, Gavin squashed his unhelpful musing and accepted the inevitable. A seamless escape from the boat was implausible. Even if they managed this difficult feat, he couldn't trust Michael. On top of that, they would be avidly pursued.",
        "But he had knowingly embroiled himself in another's drama and he was determined to get out of it in one piece. It left only one viable option that he wasn't sure Carina would agree with, and he needed her help to succeed. It was the only way he could control Michael, and cart the three of them to a safer destination.\n\nHe had to kill everyone else on board, and sink the boat.\n\n******\n\nCongratulating herself on being able to walk in a straight line, Carina carefully listened for voices or movement. The yacht was quiet, the hour was late.\n\nBy now she had discerned the corridors were not under surveillance. Wandering barefoot, she'd fake tripped, and in one instance, genuinely toppled over, and waited long enough to realise no one would come to her aid.\n\nPondering it, the lack of security made sense to Carina. Carlos hoped to capture Michael and retrieve her, or detain both of them as traitors. He wouldn't anticipate dealing with an enigma like Gavin. Gavin, whose room she'd rather go to. But he was sending her to another man.\n\nAngrily shaking her head, she began to undo her loose plait and padded toward Carlos' suite. It wouldn't matter now if she was intercepted by chance, she found out what she needed to know. There was only one thing left on her agenda, and she wanted to get it over with, and not with a clear mind.\n\nCarlos looked the very picture of fury when he wrenched his suite door open. Registering the visitor, he blinked. Then his eyes widened and his mouth fell ajar.\n\nCarina smiled dizzily up at him and leaned against the frame, her shining, sexily ruffled long hair framed her pretty face. \"You didn't say 'goodnight',\" she coyly admonished.\n\nCarlos warningly seized her shoulder when she tried to enter. \"Why are you alone?\" he snapped, peering into the hall behind her. Remembering the man he sent away, he growled at the ceiling.\n\nTaking advantage of his distraction, Carina aptly shrugged his restraining hand away and boldly walked into the suite. \"Close the door, Carlos,\" she demanded.\n\n\"You are very bossy tonight, Carina,\" he said grimly. Watching the door slowly click shut in a very surreal moment, he wondered what the night held in store.\n\nThen he turned and was surprised by Carina standing right behind him. Seeming breathless, she cupped his face and eagerly stood on her toes. After an uncertain pause, Carlos gave in and bent so their lips could meet.\n\nAs Carlos kissed her with increasing ardency, Carina slid her hands from his face to his toned arms as they closed around her. Without breaking the kiss, Carlos lifted and carried her to bed.\n\nBefore Carina could gauge her bearings, Carlos feverishly kissed down her body, and his head disappeared up her skirt. Panting, she gazed at the ceiling as his fingers tentatively edged her gusset aside. It was weird that she was aroused, because the whole thing was so backward from everything she'd known. Just like when Michael first turned on her.\n\n'Except you agree to this. You're not being forced this time,' a snide voice in her mind commented.\n\nConflicted, Carina genuinely wasn't sure if her consent made it better or worse. Carlos' muffled groan emitted from between her legs, then he began to lick her.\n\n\"Oh!\" Carina gasped, as her late boyfriend's brother expertly ate her out.\n\nCarlos muttered softly to himself in Spanish. Carina couldn't hear, but felt every elated word heatedly reverberate against her intimately. \"Carlos-!\"\n\nBefore she could stop him, two fingers slid into her pussy, his tongue continued to work on her. Writhing pleasurably on the bed, Carina couldn't shake a strange sensation. It was the disconcerting awareness of what she was doing, and the realisation that regardless of how things heated up, she would always be conscious of it. Being drunk was a mistake. It was the opposite of distracting - she couldn't control her thoughts.\n\n\"Carlos,\" she said faintly, weakly pushing his broad shoulders. \"Oh...Carlos, wait!\"\n\n\"What?\" With his fingers still inside her, Carlos lifted his head, all trace of his controlled demeanour gone. Panting, his eyes flashed with wild passion. \"What is wrong, Carina?\"\n\n\"I...I don't know if I can do this,\" she faltered, feeling terrible as his face darkened from the rejection.\n\nWithout another word, Carlos abruptly retreated and sat at the other end of the bed. Still breathing heavily, he stared at the wall ahead as his mind sparred with his libido. Shakily exhaling, he covered his face with his hands. \"You're driving me crazy, Carina.\"\n\n\"I'm sorry,\" she tearfully whispered, and she meant it.\n\nThough confident at first, the task proved too difficult. Flirting was one thing, but such a deeply manipulative betrayal was too much. She couldn't be callous like Michael. She cared for Carlos, and knew he'd sacrifice his own life to protect her. And the man she truly wanted was in another room.\n\nRecovering, Carlos shook his head. \"Don't be sorry. None of this is your fault.\" He ruefully glanced down at his cock fighting the barrier of his pants. \"It's too early. I can be patient.\"\n\nCarina gratefully nodded acknowledgement, watching Carlos get up to turn the lights out. As darkness encompassed them, Carina slightly shrank back when Carlos returned to the bed.\n\nBut as she curled up nervously, his arm merely wrapped about her waist to draw them close together.\n\n\"You tasted so good,\" Carlos breathed.\n\nSpooning Carina, he kissed her neck, then a warm blanket covered them. Carina's teasing words after dinner came back to respectively haunt her.\n\nYou're in Carlos' bed. Wasn't that the goal?\n\nCarina eventually managed to fall asleep, uneasily aware of Carlos' erection restlessly nudging her.\n\n********\n\nThe bland sandwich and bottle of water sat untouched on the floor, and Michael's dark hair adhered to his perspiring forehead as he determinedly persisted with his task. Lip curled with contempt, his eyes were scornful as his bruised wrist worked against the bind. There was superficial bleeding, but Michael was oblivious to it as he continued to twist and pull.\n\n\"No wonder you are so easily infiltrated, fucking idiots,\" he muttered. Taking a deep breath, he closed his eyes and braced to free his hand in one forceful tug."
    ],
    "authorname": "Bellie444",
    "tags": [
        "cloak and dagger",
        "espionage",
        "intrigue",
        "noncon",
        "trapped",
        "yacht",
        "prisoner",
        "romance",
        "obsession",
        "drama"
    ],
    "category": "NonConsent/Reluctance",
    "url": "https://www.literotica.com/s/the-assassins-bride-ch-08"
}
{
    "title": "Mary and Alvin Ch. 36",
    "pages": [
        "Bogart and Bacall\n\nIt was still dark in the room when Alvin got out of bed. Looking out the window, he saw a magenta glow on the horizon. He went to the bathroom, then pulled on his robe and made his way slowly down the stairs. One step at a time, he thought, ain't that a pisser? \n\nHe started the coffee maker, although he didn't enjoy his morning cup as much as he once had. Decaf was better than it used to be, but it still wasn't the real thing. As he waited for the coffee to brew he heard a rooster crow and looked out the window. A tall shadowy figure moved across the dooryard. It was Omar, out to gather the morning's eggs. He thought about how much he'd love a big plate of bacon and eggs, but Mary would give him hell for that too.\n\nWhen the coffee was done, he poured a cup and took it out to the front porch. Omar came out of the chicken coop, waved to him and crossed the yard.\n\n\"Good morning,\" he said in a hushed voice, \"You are up early.\"\n\n\"I didn't sleep well,\" Alvin replied, \"Don't know why, just didn't.\"\n\nOmar nodded sympathetically. \"So what do think? Rain will come today?\" he asked. He had an almost superstitious faith in Alvin's ability to predict the weather.\n\nAlvin raised his face and breathed in deeply. \"I expect so. Probably not till later, though.\"\n\n\"Good, I am worried for the tomatoes if they do not get a good soak.\"\n\n\"Oh, there'll be fat and red soon,\" Alvin said.\n\nOmar waved and went back to his work. Alvin stood on the porch a few minutes longer, enjoying the quietude of the morning, until the rooster disturbed it again. \n\n\"Sun won't come up if you don't crow, will it?\" he muttered, and turned to go inside. As he went through the door, he bumped his shoulder against the jamb, sloshing some of his coffee on the floor. What happened there, he thought, feeling suddenly light headed. He went toward the sink, thinking he would get a towel to clean up the spilled coffee, but before he got there, he began to have trouble breathing. He tried to set his cup down on the counter, but he missed and it clattered into the sink.\n\n\"Mary,\" he called, but all that came out was a weak wheeze. He staggered toward the stairs, but realized he did not have the strength to climb them, so he turned into the living room and fell on the couch, knocking the lamp off the end table and sending it to the floor, where it shattered with a loud crash.\n\nMary sat upright at the sound of the lamp breaking. \"Alvin!\" she shouted as she threw back the covers. Hearing no answer, she rushed to the stairway. Pieces of ceramic littered the floor at the bottom of the steps. She called for Alvin again as she rushed downstairs, but there was still no answer.\n\nShe saw him slumped on the couch. A memory flashed through her mind, of Alvin's description of finding Bonnie lying in her garden. She rushed to him, kneeling on the floor before the couch.\n\n\"Wake up, baby,\" she said, her voice on the verge of cracking. She took him by his hands and attempted to pull him upright, but he slid further down on the couch cushions.\n\nCPR, she thought, you have to do CPR. She had taken a course years before, but she could not focus on remembering what to do. Danni will know, she thought. She shouted for help.\n\nAnother memory came to her. She was in the hospital, looking up at him.\n\n\"Alvin did you save my life?\"\n\n\"I don't think so.\"\n\n\"I think you did.\"\n\nShe raised her arm and brought her fist down hard on the center of his chest. He may have stirred, but she could not be sure. She did it again, hitting him harder, and he drew in a great, gasping breath.\n\nAlvin opened his eyes and saw Mary looking down him, tears streaking her cheeks.\n\nHe took another deep breath, then on the exhale, said, in a barely audible voice, \"Baby, don't cry.\"\n\nMary heard a voice behind her, and turned to see Omar standing in the entrance to the hall. He had a phone in his hand and was speaking with the 911 operator.\n\n\"Help me sit up,\" Alvin said, raising his arms. Omar stepped around Mary and pulled him into a sitting position.\n\n\"That's better,\" Alvin said, \"Easier to breathe.\"\n\n\"Help is on the way,\" Omar said. \"I will call Jennifer and Hannah.\"\n\nMary climbed on to the couch and knelt beside Alvin, cradling his head in her arms.\n\n\"Jeezum, I broke the lamp,\" he said.\n\n\"I don't care about the lamp.\"\n\n\"Gotta clean it up.\"\n\n\"You don't have to do it.\"\n\nDanni burst through the door, with Jennifer close behind her.\n\n\"Daddy, what happened?\" Jennifer panted.\n\nDanni leaned down in front of Alvin, took his chin in her hand and looked into his eyes.\n\n\"Jen,\" she said, \"Go to the bathroom and bring back aspirin and a glass of water.\" Turning back to Alvin she asked \"Are you in any pain? Pressure in your chest?\"\n\n\"Feels like someone punched me,\" he said, rubbing his solar plexus.\n\n\"That was me,\" Mary said softly.\n\nAlvin looked at her. \"Jeezum, Mary, you pack a wallop.\"\n\n\"Are you having trouble breathing?\" Danni asked.\n\n\"No, I just feel sort of weak.\"\n\nJennifer returned from the bathroom. Danni shook three aspirins out of the bottle and gave them to Alvin, \"Chew these, don't just swallow,\" she instructed him. When he had done so, she gave him the water.\n\nOmar tapped Danni on the shoulder. \"Where did the blood come from?\"\n\nShe glanced around and saw smears of blood on the hallway floor and the living room rug. She looked at Alvin and frowned, then looked at Mary.\n\n\"Sweetie, your feet are cut.\"\n\nJennifer sat down on the coffee table and lifted Mary's feet into her lap. Omar went to the kitchen and returned with a damp towel.\n\n\"It's from the lamp, I guess,\" Mary said, \"I didn't even notice.\"\n\n\"It's just a few cuts,\" Jennifer said, washing away the blood. There was still a shard of ceramic in Mary's heel and she deftly plucked it out. Omar went upstairs and fetched the first aid kit from the bathroom, then handed it to Jennifer, who bandaged Mary's feet.\n\nOmar got a broom and dust pan from the closet and cleaned up the broken lamp. As he was dumping it in the track can under the sink, he looked out the kitchen window. \"They are here,\" he said.\n\nThe ambulance pulled near the house. Jennifer met the paramedics on the porch and let them into the house. Danni knew both of them from her duties with the sheriff's department. She greeted them and explained the situation.\n\n\"He passed out at some point. We don't know how long he wasn't breathing. His wife pounded on him and he came around. Says he's not in any pain.\"\n\nOne of the paramedics knelt in front of Alvin. \"How are you feeling, sir?\" he asked. \"Can you tell me what happened?\"\n\nAlvin shrugged. \"I got up, made some coffee. Spoke a moment with Omar there, then come back in the house and couldn't breath. Then, it all went to black.\"\n\n\"Did you have any pain?\"\n\n\"No, just felt woozy.\"\n\n\"Okay. Well, we are going to take you to the hospital and have them check you out.\"\n\n\"Well, alright then.\" Alvin tried to stand.\n\n\"Let's get you on a gurney, sir, just to be on the safe side.\"\n\n\"I can walk,\" Alvin insisted. \"Danni can help me. And Omar.\"\n\nDanni nodded to the paramedic and he stepped back. She took Alvins right arm, and Omar took his left. They carefully walked out to the porch. The gurney had been set up at the bottom of the steps, set at knee level.\n\nHannah drove into the yard as Alvin was lowering himself on to the gurney. She parked her car, then ran to him. \n\n\"Papa, are you alright?\" she called as she approached. Alvin reached out toward her.\n\n\"No, honey, let them get him in the ambulance,\" Danni said.\n\nHannah stopped and watched helplessly as the paramedics raised the gurney and pushed it to the ambulance.\n\n\"Mary, come with me,\" Alvin called.\n\n\"I'm sorry, sir, that's not a good idea,\" the paramedic said.\n\n\"I wasn't asking, bub,\" Alvin said.\n\nMary touched the paramedic's arm. In a low voice, she told him, \"His mother died in an ambulance on the way to the hospital, so...\"\n\nThe paramedic looked at her, then slowly nodded. \"You ride up in the front, in case, you know, if I have to work on him.\"\n\n\"Thank you.\"\n\nAs they loaded Alvin on the ambulance, Omar helped Mary up into the front seat. When she was seated, he closed the door and turned to Jennifer. \n\n\"There is still work to do,\" he said, I \"have not fed all the animals. I will stay and take care of things.\"\n\n\"Okay,\" she said, \"Thanks.\"\n\nHannah hugged him. \"I left the kids with Jessica,\" she said, \"I'll call you later.\" She turned to Jennifer. \"Jen, you want to ride to the hospital with me?\" \n\n\"Okay.\"\n\n\"I'll meet you guys there,\" Danni said.\n\nThe ambulance pulled out of the yard, and Hannah and Jennifer followed it.\n\n\"Why did you not go with them?\" Omar asked Danni.\n\n\"Because I have the tough job,\" she said, shrugging, \"I've got to go tell Bonita.\" \n\n***\n\nThe ambulance arrived at the hospital without incident, and Mary followed Alvin into the emergency room, where he was scanned, x-rayed, hooked to monitors and oxygen and IV lines. They checked his pulse and drew his blood and handed him clipboard after clipboard of forms to sign, all of which Mary took from him and signed herself.\n\nFinally, the cardiologist came around. Mary held Alvin's hand while the doctor flipped through a stack of charts.\n\n\"Well,\" he said, finally looking up at them, \"It seems you had a heart attack this morning, Mr. Faulkner.\"\n\n\"Jeezum crow,\" Alvin muttered. Mary squeezed his hand tighter.\n\n\"We have you stabilized for now, but we are going to send you up to Bangor. Likely, they will be inserting a stent.\"\n\nHe looked through the charts again. \"You had no pain in your chest? Maybe in your shoulders or your jaw? Your back?\"\n\n\"As I think about it,\" Alvin said, \"My back was bothering me all night.\"\n\nThe doctor nodded. \"Well, the Life Flight helicopter will be here soon. I'll check in again when they arrive.\"\n\nWhen he had left, Alvin looked up at Mary. \"I drank the decaf, honey,\" he said.\n\n\"I know, baby. There's no fault to it. It runs in your family.\"\n\nHe nodded. \"True, my Mom. Her dad. Harry.\"\n\n\"It's a miracle Harry lived as long as he did.\"\n\n\"That's so.\" He looked around the room. \"Did the girls come with us?\"\n\n\"I rode up with Jen and Hannah. Danni went to pick up Nita.\"\n\n\"Go tell them I'm just fine.\"\n\nShe smiled at him and went to the waiting room. Jennifer and Hannah were sitting side by side, holding hands. They both jumped up when they saw her approach, and bombarded her with questions.\n\nMary held up her hands and hushed them. Trying to speak calmly and sound reassuring, she told them that Alvin had suffered a heart attack, was stable and would be transported to Bangor.\n\n\"They are going to probably put in a stent,\" she explained.\n\n\"So, that's heart surgery?\" Jennifer asked.\n\n\"No, not really,\" Hannah told her, \"They go in through a tube, they don't have to cut him open.\"\n\n\"I guess that's good.\"\n\nThe emergency room door burst open and Bonita charged in. \"Where's Papa?\" she shouted, \"I want to see him.\"\n\nDanni followed her in, helplessly raising her hands.\n\n\"They are getting him ready to go to Bangor, sweetie,\" Mary said, \"You can't see him now.\"\n\n\"Okay,\"Bonita said, sighing deeply, \"I get it, I'm sorry, it's just...\"\n\n\"I know, Nita. You love him so much.\"\n\nHannah hugged Bonita. \"We all do,\" she said.\n\n\"So, what should we do?\" Jennifer asked, \"Go up to Bangor?\"\n\nEveryone looked at Danni. \n\n\"What? I'm the expert?\" she asked.\n\n\"Well, you probably know what people do,\" Bonita said.\n\n\"I need to stay here until they take him,\" Mary said.\n\n\"Okay, then,\" Danni said, \"I'll stay here and come up with Mary, you guys go ahead and we will meet you there.\"\n\n\"Sounds like a plan,\" Jennifer said.\n\nMary realized they had forgotten something. \"Did anyone call Charlotte?\" she asked.\n\n\"Oh shit,\" Jennifer said, \"I'll call her on the way to Bangor.\"\n\nAfter a round of hugs and kisses, Mary returned to Alvin's bedside.\n\n\"Nurse said the chopper would be here in a few minutes,\" he said.\n\n\"Chopper?\" Mary couldn't help grinning. \"You sound like you're having a good time.\"\n\n\"Might as well make the most of it. Never rode in a helicopter.\"\n\n\"You get freaked out in airplanes.\"\n\nAlvin chuckled. \"I'd never have gotten in one if I hadn't fallen for a California girl.\"\n\nThe Life Flight crew arrived. Mary had to step away while they pushed a gurney next to the bed and transferred Alvin to it.\n\n\"I'll see you in Bangor,\" Alvin said as they maneuvered out of the room.\n\n\"Yes, you will my love,\" Mary replied, holding her hands over her heart.\n\nNo matter what, Alvin thought as he was wheeled into the corridor, I will see you again.\n\nHe squinted in the bright sunlight as they passed through the hospital doors to the helipad. He sniffed the air and thought it still seemed likely that it would rain later.\n\nThe crew loaded the gurney into the helicopter and fastened it down. One of the paramedics handed Alvin a buzzer.\n\n\"Any pain, any shortness of breath, any problems at all, press this. I won't be able to hear you speak once we are in the air.\"\n\nAlvin nodded his understanding, and the man fitted him with a pair of heavy ear protectors. The helicopter door slammed shut, the rotors began to whirr, and in another minute, he felt his weight shift as they rose from the ground.\n\nTurning his head, he could see out the side window, but the ear protectors prevented him from looking down. He watched the tree tops slip from view, then a sudden lurch as the helicopter turned and set off toward its destination.\n\nHe looked out at the blue sky and thought about his first time on an airplane, flying to California to meet Mary's family, and remembered looking out at a blue sky then, and imagining himself soaring through the air, holding Mary in his arms. He wasn't afraid of flying, although he didn't like it much. But he let Mary go on thinking he was, because it gave her a chance to coddle him. Jeezum, he thought, if I'm laid up long, she might be coddling me for a good while.\n\nThe helicopter bounced and shook, but it felt no rougher than sailing choppy seas on a windy day. As they descended into Bangor, Alvin saw church steeples and then green hills in the distance. The walls of the hospital rose and blocked his view, and then they were on the ground.\n\nThings seemed to happen so fast that they were a blur to Alvin. He was unloaded from the helicopter, wheeled into the hospital, rushed down a corridor into the catheter lab and hoisted on to the table in what seemed like a minute. \n\nA bearded face loomed above his. \"Hello, I am Dr. Patel,\" it said. \"How are you feeling, Mr. Faulkner?\"\n\n\"Been better,\" Alvin said.\n\n\"I would imagine so. Are you in any pain?\"\n\nAlvin shook his head.\n\n\"Good. Well, I will tell you what we are going to do. Nurse Chau, here,\" he gestured to a young nurse at his side, \"is going to prep you for the procedure...\"\n\n\"You going to cut me open?\" \n\n\"Oh no, Mr. Faulkner. We are going to poke a hole in your groin and insert a tube into your aorta and take a look around your heart. You will feel no pain, just a bit of pressure where we make the insertion.\"\n\n\"So, you aren't knocking me out?\"\n\n\"No need for it.\" He patted Alvin's shoulder and turned away. Alvin looked down and watched, feeling a bit embarrassed, as Nurse Chau raised his gown above his waist. \n\nShe saw him watching and said, \"I've seen hundreds of them, Mr. Faulkner.\" With quick efficiency, she shaved the right side of his groin, then painted it with a bright red liquid.\n\n\"What's that?\" he asked.\n\n\"It's a topical anesthetic, so you won't feel the insertion.\" \n\nShe was right. When Dr. Patel made the insertion all Alvin felt was a few seconds of pressure. He did not know what to expect next, and was surprised when the doctor stepped behind a bank of computer monitors.\n\n\"Just relax and breathe normally,\" he said.\n\nAlvin thought it was silly to tell him to relax. What else could he do? He laid on the table, expectantly. Every now and then Patel and his assistant would say something to each other in low voices. He was just about to ask them when they were going to get going on whatever it was they were doing, when Dr. Patel came around and patted his shoulder again.\n\n\"You're all set, Mr. Faulkner. We found the blockage and put in a stent. We are going to want to keep you here for a few days to assess what damage there is to your heart muscle, but you are stable and can go to the recovery room.\"\n\n\"Jeezum,\" Alvin said, \"That was quick.\"\n\nThe nurses moved him back to the gurney, and within minutes, he was in the recovery room.\n\n\"You have to lay still for the next couple of hours,\" one of them told him. \"If there is anything you need, just ring us.\"\n\nHe thanked them, and they left him to rest. He closed his eyes, thinking that all he needed was to see Mary's face when he opened them.\n\n***\n\n\"Do you want to grab a coffee or something on the way?\" Danni asked Mary as they got into the car.\n\n\"Not unless you do.\"\n\n\"No, I'm good.\"\n\nThey rode in silence until they had crossed the bridge out of Londonderry, and were on their way to Bangor.\n\nAfter they had driven a few miles, Mary turned to Danni and asked, \"Is there something you want to say to me?\"\n\n\"No, I don't think so.\"\n\n\"Seems like there is. You've been sort of hovering, looking like you are holding something back.\"\n\n\"I'm just concerned, that's all.\"\n\n\"About Alvin, or about me?\"\n\nDanni was silent for a moment. \n\n\"Both.\"\n\nMary looked out the window. \"You think that if...when...he goes, I'm going to lose it.\"\n\n\"No, I just...\"\n\n\"Like when I miscarried. You're afraid that I'm going to sink into depression.\"\n\nDanni hesitated, then said, \"Yeah.\"\n\nSeveral miles rolled by before Mary spoke. \"Once, before we were married, we talked about our age difference. It was the day I told my mother about it, and she was not happy. So, I asked him if it bothered him at all. And he said that age didn't matter, whether we were Romeo and Juliet or Bogart and Bacall.\"\n\nDanni chuckled. \"Yeah, that sounds like him.\"\n\n\"I said that Romeo and Juliet died at the end of the story. I have never forgotten what he said then.\"\n\n\"What?\"\n\n\"He said, so did Bogart and Bacall, and so will we.\"\n\n\"So, you're saying you're prepared for it?\"\n\n\"No,\" Mary shook her head, \"I am saying that I always knew it was likely that I'd lose him, and I married him knowing that the time we would have together would be worth the heartbreak.\"\n\nThey held hands and rode in silence the rest of the way to Bangor. \n\nDanni knew her way around the hospital, and led Mary to the Intensive Care Unit. As they entered, they saw Bonita in the family lounge, slouched in a seat with her feet up on the coffee table. She was staring up at a wall mounted television, absentmindedly flipping the channels on a remote control.\n\n\"You're sitting here alone?\" Danni asked as they entered the lounge.\n\n\"There was some dubber in here, but he got pissed because I turned off his shitty news show,\" she said with a shrug.\n\n\"I meant, where are Jen and Hannah?\"\n\n\"In with Papa. They said only two at a time.\"\n\n\"So, you haven't seen him?\" Mary asked.\n\n\"Nope. I figured, you know, they outrank me.\"\n\nMary kissed the top of Bonita's head, \"Baby, nobody outranks you with your Papa.\"\n\n\"You do.\"\n\n\"Well, okay, but no one else.\"\n\nDanni texted Jennifer. \"They'll be out in a minute. Honey, you can go in with Mama Mary.\"\n\nBonita's face brightened. \"You sure?\"\n\n\"I can wait, honey.\"\n\nHannah and Jennifer came into the lounge.\n\n\"How's he look?\" Danni asked.\n\nJennifer shrugged. \"Not bad,I guess,\" Hannah said, \"He sure liked his helicopter ride.\"\n\nBonita tugged on Mary's hand.\n\nMary looked at her and thought her face looked the same as it had when she was a little girl and her grandfather had gone off on a sail without her. \"Okay, sweetheart, we'll go see Papa,\" she said, squeezing Bonita's hand.",
        "Alvin had dozed off, and Mary and Bonita sat quietly by his bedside. He awoke after a few minutes and looked around the room in confusion. After glancing at the tangle of tubes and wires that ensnared him, he remembered that he was in the hospital. He looked around the room and saw Bonita sitting at the foot of his bed, and Mary by his side.\n\n\"Hello, baby, I'm still here,\" he said.\n\n\"Of course you are, my love,\" she replied.\n\n\"I was dreaming that we were flying, you and me. I was holding you tight so that you wouldn't fall, and we were flying in and out of the clouds.\" He gestured to Bonita. \"Nita, baby, can you raise me up?\"\n\nBonita touched the bed's control screen and it rose under Alvin's back, bringing him to a sitting position. \n\n\"Do you want some water, honey?\" Mary asked.\n\nHe nodded and she handed him his cup. He took a long sip from the straw and handed it back to her.\n\n\"Did anyone talk to Charlotte?\" he asked.\n\n\"Mama Jen did,\" Bonita told him, \"She said she'd be here as soon as she could.\"\n\nAlvin waved his hand. \"She shouldn't. I'm alright.\"\n\n\"Do you think there is something we could say that might keep her away?\" Mary asked.\n\n\"I don't guess there is,\" he said, chuckling. He looked at Bonita. \"I was wondering where you were before.\"\n\n\"They said only two visitors at a time, so I waited while Hannah and Mama Jen came in. I mean, they are your daughters and all.\"\n\nAlvin looked pained. \"Nita,\" he said, \"I think of you as my daughter every bit as much as them.\"\n\nMary could see from Bonita's face that she was refusing to cry.\n\n\"Papa...\"\n\n\"Yes, baby?\"\n\n\"My whole life, the one thing that mattered the most to me was wanting you to be proud of me.\"\n\nAlvin grinned at her. \"Well, I guess it worked out pretty good for you, then.\"\n\n\"I love you, Papa.\"\n\n\"I love you too, baby.\" She rose and went to him. They shared a long hug, then Alvin said, \"Honey, let me have a few minutes to talk to Mama Mary alone, alright?\"\n\n\"Sure, Papa.\" She kissed him and left the room. He watched her go, then asked Mary, \"They tell you anything about when I can go home?\"\n\n\"They want to keep an eye on you for a few days.\"\n\nAlvin frowned. \"You know I hate being in the hospital.\"\n\n\"Yes, love, but you just have to man up and deal with it.\"\n\n\"Oh, I know, I'm just bellyachin'. But honey...\"\n\n\"What is it, Alvin?\"\n\n\"I don't like the idea of dying here.\"\n\n\"Then don't.\"\n\nAlvin laughed. \"I bet there's a lot of folks in the graveyard wished they'd thought of that.\"\n\n\"Sweetheart, you know I am with you, no matter what you want to do.\"\n\n\"I think right now I just want to sleep.\"\n\n\"We will be here when you wake up, my love.\"\n\nAlvin slept for the rest of the afternoon, while Mary and his daughters took turns sitting with him.\n\nThe light was fading when a nurse came in and told Mary that she needed to take Alvin to the lab for some tests. He woke up while they were talking.\n\n\"I'm feeling a bit peckish,\" he said.\n\n\"That's good,\" the nurse replied, \"We will get you supper after your tests.\" She turned to Mary. \"He'll probably sleep some more after that. You look like you could use some rest yourself, dear.\"\n\n\"Have you eaten anything today?\" Alvin asked.\n\nMary shook her head.\n\n\"Well, Jeezum crow, go get some supper and some sleep.\"\n\n\"I will, love.\" She bent down and kissed him. Her phone buzzed and she looked at it, frowning.\n\n\"What is it?\" Alvin asked.\n\n\"Hannah just texted me. She says that she talked to Omar and he wanted to tell you that it's raining.\"\n\n\"I told him it would,\" Alvin said with a grin.\n\n***\n\n\"How's he doing?\" Jennifer asked as Mary entered the lounge.\n\n\"He seems okay.\"\n\n\"We booked a room next door at the Riverside Inn,\" Hannah said, \"so we don't have to drive back to Londonderry tonight.\"\n\n\"That's a great idea. And I need to eat something. I haven't had a bite all day.\"\n\n\"There's that good Thai place on Union Street. I can go pick it up,\" Danni said.\n\nThey all murmured in agreement and began to shuffle out of the lounge. Mary noticed that Bonita was still sitting, and asked her, \"You coming, sweetie?\"\n\n\"Nope.\"\n\n\"What are you going to do, stay here all night?\" Danni asked.\n\n\"Yep.\"\n\n\"You going to sleep in that chair?\"\n\n\"Slept on boats in nor'easters, I can sleep in a friggin' chair.\"\n\n\"Alright,\" Danni said. \"I'll bring you by some food.\"\n\n\"And a fork, alright? I don't use them chopsticks.\"\n\nAs the others filed through the door, Mary lingered. She made eye contact with Bonita, and knew exactly what she was thinking. If it had been her, or any of them, Alvin would spend the night in that chair. Mary nodded, and Bonita nodded back, then picked up the TV remote and returned to flipping through the channels.\n\n***\n\nMary slept fitfully. It had been years she had spent a night apart from Alvin. She looked at the hotel alarm clock. It read 1:59. She stared at it until it changed to 2:00, then, as quietly as she could, swung her legs off the bed and sat up.\n\nThe room was awash in moonlight. She looked over her shoulder at Hannah, asleep beside her. Our baby, she thought, his and mine. Danni and Jennifer lay spooned together in the other bed. Careful not to wake them, she stood and stepped carefully around them and went to the window.\n\nThe rapids of the Penobscot River glittered below her. She recalled Alvin telling her that this stretch of rough water marked the end of navigation on the river.\n\nThe moon hung low over the dark hills. It was waning gibbous, just a day or two short of full. She'd never known the phases of the moon until he had taught her. She thought back to another night, when she had sat and looked at the moon. \n\nIt was a balmy spring night. She was four months pregnant with Hannah. Alvin had sailed a boat down east, to Machiasport to delivery it to its owner after overhauling its engine. She had driven up to meet him and drive home with him.\n\nThere was nothing special about the trip, or the night, except that they were together, and the moon was shining and their baby was growing within her. So many nights, she thought, when nothing was special, and yet, everything was.\n\nShe was startled from her memories by the buzz of her phone. She looked around the dark room. Before she could find it, hiding among the food containers and empty cups on the dresser, she heard another phone ringing, and Jennifer answering it in a sleepy voice.\n\n\"Hello? Char? What? Slow down,\" Jennifer said into the phone. \n\nMary found hers, but it had stopped ringing, and another began. Hannah sat up and turned on the lamp between the beds. She picked up her phone and answered it.\n\n\"Okay, yeah,\" Jennifer was saying, \"As soon as we can. Bye.\"\n\n\"What is it?\" Danni asked.\n\nJennifer looked at Mary, tears streaming down her cheeks. \"Daddy had another heart attack while he was sleeping.\"\n\nThe next few seconds were the longest of Mary's life. Not like this, she thought, please not like this. At least I got to be there with my father.\n\nHannah lowered her phone and said, \"Nita says that he's awake, but kind of out of it.\"\n\n\"He's alive?\" Mary asked, then burst into tears.\n\nJennifer wrapped her arms around her and they sobbed on each others shoulders. Danni had Jennifer's phone and was still talking to Charlotte. Hannah was already getting dressed.\n\nDanni put her hand on Jennifer's back and handed her the phone. \"Let's get ready and go over there,\" she said.\n\nMary and Jennifer both nodded and they all quickly dressed and gathered their things.\n\n\"When did Charlotte get here?\" Mary asked, as they left the room.\n\n\"Just a little while ago,\" Hannah replied. \"She said they got off the elevator and the first thing they heard was Bonita yelling at the nurses, demanding to know where they had taken her grandfather.\"\n\nMary could not help grinning at the image.\n\n\"Where did they take him? Jennifer asked.\n\n\"I guess once they stabilized him, they took him down to the catheter lab to see what happened or how bad it was or something.\"\n\nBonita and Alvy were sitting side by side, clutching each others hands when they arrived back at the ICU. They both jumped up, and Mary hugged Alvy. \n\n\"Thank you for coming, sweetheart. You must be exhausted.\"\n\n\"No, it was easy with three of us sharing the driving. My mom and dad are in with Grandpa now.\"\n\nMary released him and turned to Bonita. She kissed her on the cheek and squeezed her shoulder. \"Are you okay, honey?\" she asked.\n\n\"Sure, don't worry about me,\" Bonita said.\n\n\"Alright, darling. Hang in there, we don't need anyone punching the barn.\" \n\nShe turned and went into the patient area. Bonita looked at her mothers. \"What does that mean, don't punch the barn?\" she asked.\n\n\"We'll tell you about it later,\" Danni said.\n\nAlvin was lying flat on his back when Mary entered the room. Charlotte and Seth stood on opposite sides of the bed. When Seth saw her, he moved aside, put his hand on her back and whispered, \"I'll step out.\"\n\nCharlotte reached across the bed and Mary took her hand. She looked down at Alvin. He appeared more gaunt and frail than he had just a few hours earlier.\n\n\"How do you feel, love?\" Mary asked him.\n\n\"Well, getting shocked full of electricity ain't my favorite way to wake up, I can tell you that.\"\n\n\"Did they tell you anything?\"\n\n\"Yeah, they did.\"\n\n\"You want to share?\"\n\nAlvin glanced at Charlotte. \"I ought to let you guys talk,\" she said.\n\n\"No, please,\" Mary said, \"Stay with us.\" She was afraid that she might need someone there to hold her up.\n\n\"I guess I stove up my heart wicked bad that time,\" he said. He gestured over his shoulder at the stack of medical equipment in the corner. \"Seems like this beeping bastard is the only thing keeping my heart beating proper.\"\n\nMary felt a rush of lightheadedness. She was thankful for the pressure of Charlotte squeezing her hand. It seems like the only thing that kept her from blowing away.\n\n\"Mary? Look at me, honey.\"\n\nShe looked into her husband's eyes.\n\n\"It's alright, Mary. I can take what comes, so long as I have you with me.\"\n\n\"Always, my love.\"\n\nHe turned his head and looked up at Charlotte. \"You're gonna be a grandma soon,\" he said, with a little bit of a laugh.\n\n\"I am,\" she smiled.\n\n\"I'm sorry that I'll miss seeing that.\"\n\n\"You might get to meet him yet.\"\n\n\"Maybe.\" He closed his eyes. \"I'm wicked tired,\" he said. \"Think I'll nap a while.\"\n\nCharlotte leaned down and kissed his forehead. \"I love you, Daddy,\" she whispered. Alvin smiled as he drifted off to sleep.\n\n***\n\nAlvin woke up and saw Hannah and Bonita sitting side by side next to his bed. He raised his hand and slowly waved his finger back and forth. When they lifted their eyes to look at him, in a throaty voice he sang, \"Come Mister Tallyman, tally me bananas.\"\n\nHannah let out a sob, but Bonita replied, in a whisper, \"Daylight come and me want to go home.\"\n\nAlvin gestured for her to come closer.\n\n\"What is it, Papa?\"\n\n\"Nita, go get that nurse.\"\n\nBonita looked alarmed. \"Are you okay, Papa?\"\n\nAlvin nodded. \"I'm fine. Go out there and tell them that I am going to go home.\"\n\nBonita stared at him for a moment, then patted his arm. \"Okay, Papa.\"\n\n\"Wait,\" Hannah said, \"No, Papa. You need to stay here.\"\n\nBonita stood up. Hannah seized her hand. \"Nita, don't do it.\"\n\n\"Let go, Hannah,\" Bonita said. Her voice was tender, but firm. \"You know that if that's what Papa wants me to do, I'm going to do it.\"\n\nThey stared into each others eyes for a long moment. Without looking away, Hannah said, \"Papa, are you sure?\"\n\n\"I'm sure,\" he said.\n\n\"Okay.\" She let go of Bonita's hand. Bonita stepped around her and left the room.\n\nAlvin beckoned for Hannah to come closer. He held up his hand and she took hold of it. \n\n\"Papa. I'm scared,\" she whispered.\n\n\"Don't be, sweetheart. I'm not.\" He squeezed her hand. \"I spent my whole life pretty much doing the things I love. I married two wonderful women, and had three beautiful daughters, and they gave me beautiful grandchildren. Why should I be scared?\"\n\nHannah nodded and kissed her father's hand.\n\n\"Now, do me a favor, sweetheart,\" he said, \"Go find your mother for me.\"\n\n\"Okay, Papa.\" \n\nHannah left the room and Alvin was alone with his thoughts. He was sure of his decision, but he was not entirely at peace with it. The problem was, he did not believe he could achieve peace while being poked and prodded. How was a man supposed to get his thoughts in order with all the dinging and beeping and someone coming to poke a needle in you every friggin' time you turned around?\n\nHe had been thinking about his father. I've lived more than twice as long as he did, he thought. He remembered standing on the dock in Key West, a young man then, only eighteen years old. He had just learned that his father was dead, and as he stood against the rail, looking out at the green Gulf water, he made the most important decision of his life. His place was at home. It still was.\n\nMary came into the room, with Hannah close behind. She turned and said, \"Sweetheart, let me talk to Papa alone, please.\"\n\nHannah nodded and backed out of the room. Mary closed the door, then stood at the foot of Alvin's bed.\n\n\"You had Bonita tell the hospital that you want to go home?\"\n\n\"I did.\"\n\n\"You think maybe you could have told me you had decided?\"\n\n\"You're right. I'm sorry.\"\n\n\"You sent Bonita because you knew she wouldn't try to talk you out of it. You thought I might.\"\n\nAlvin looked away for a minute, then made eye contact with her. \"No,\" he said, \"I sent her because I thought that it would be an easier weight for her to carry than it would be for you.\"\n\n\"That should have been for me to decide.\"\n\n\"Alright. I won't do it again.\"\n\nMary sighed and sat next to him, took his hand in hers and kissed it. \"If it's what you want to do, I am with you. You know that.\"\n\n\"Well, it ain't what I want, but it's the option I hate the least.\"\n\nThey looked into each others eyes. After what felt like a long time, Mary nodded, and said \"Let's go home, my love.\"\n\n***\n\nThe old farmhouse looked pretty much the same as it had when he was a kid. Everything around it had changed. There were fields of corn and pastures filled with livestock where he had once played with his brother and sister among weeds and wildflowers. The house by the pond that he had helped Jennifer and Danni build had stood there for more than thirty years, but he still thought of it as new. So much still seemed new to him, the alpaca barn, the smokehouse, the farm stand by the road. He looked at the pigpens and the rows of beehives and the tall riggings of hops vines, and he shook his head in wonder.\n\nBefore they reached the dooryard, he asked Mary to stop the car. \n\n\"Are you okay, sweetheart?\" she asked.\n\n\"Yes,\" he said, \"Just give me a minute.\"\n\nHe was looking at the front porch. Everyone was there; Tim and Molly, Theo and his new girlfriend, Lucille or Loretta, or whatever her name was. Charlotte and Seth and Alvy, Jennifer and Danni, Hannah and Omar with their children, Bonita and Jamie, Andy and Jessica and Rachel. Alvin breathed deeply and fought back tears.\n\n\"They love you, baby,\" Mary whispered, \"We all love you.\"\n\nAlvin sighed and nodded. Mary pulled the car as close as she could to the front steps. Bonita opened the passenger door and held out her hand. Alvin took it and she helped him to his feet. He looked at each face, but could not think of words to say. \n\nJamie and Alvy each took one of Alvin's arms and draped it over their shoulders. Stepping slowly, they helped him walk up the stairs and into the house.\n\n\"Do you want to go upstairs or stay down here, Grandpa?\" Alvy asked.\n\n\"Best take me to the bedroom, I reckon,\" Alvin replied. They half guided, half carried him up the stairs and into the bedroom and lowered him on to the bed. Mary followed them in and helped Alvin find a comfortable position sitting up against the headboard, while Alvy and Jamie slipped out of the room.\n\nShe stroked his hair and kissed his forehead. \"How much are you feeling up for?\" she asked.\n\n\"Well, if you are talking about sex, I'm afraid I may disappoint you, honey.\"\n\nMary laughed. \"I was not, but thank you for the consideration. I meant about having visitors.\"\n\n\"I'm wicked tired, Mary, maybe if it's only a minute or two each.\"\n\n\"That makes sense, my love.\" She kissed him and turned to leave the room. At the door she stopped and looked back at him. \"Honey,\" she said, \"I've never been disappointed.\"\n\nTim was the first to come into the bedroom. The two brothers sat together in silence for a few minutes, then Tim said, \"I can't be no head of the family, you know that, right?\"\n\nAlvin chuckled. \"I suppose not.\"\n\n\"I think that's going to have to be Mary.\"\n\n\"Ain't she already?\"\n\nThey gripped hands until it hurt, then Tim got up and quickly left the room. Alvin pretended to not hear his brother's sobs.\n\nThe family trooped through, singly or in small groups, each person dealing with the situation in their own way. Bonita was stoic and reassured her grandfather that all was well down at the wharf, and Alvy apologized for Jasmin's absence.\n\n\"She can't fly right now, Grandpa, the baby is due in two weeks.\"\n\nAlvin patted his arm. \"You'll be a good father, Alvy.\"\n\nAlvy shrugged. \"I've got a name to uphold.\"\n\nHannah and Omar brought in the children. Jeannie told Alvin that she hoped he would get well soon, but the look on Joey's face made it apparent that he knew better. \n\n\"Am I doing the right thing?\" Alvin asked Jennifer and Danni.\n\nJennifer thought for a minute. \"I don't know if it's the right thing, Daddy, but it's what I would do.\"\n\n\"What about you, Danni?\" \n\n\"You know, I have thought about it a lot. About how I want to go.\"\n\nAlvin nodded. \"You're in a dangerous line of work.\"\n\n\"Well, that's just it,\" she said, \"I think if I had the choice, I'd die in the line of duty.\"\n\n\"I think I understand that,\" Alvin said.\n\n\"I wish I did,\" Jennifer muttered.\n\nCharlotte was last to enter the room. \n\n\"Something I wanted to ask you,\" Alvin said.\n\n\"What, Daddy?\"\n\n\"Do you still go talk to your mother's grave?\"\n\n\"I don't talk to her grave. I talk to her. Whether she can hear or not, who knows? But, yes, I go there every time I am in town.\"\n\n\"I'm not going into the ground. Mary knows. I want to go in the ocean.\"\n\n\"Of course you do.\"\n\n\"I guess if you ever want to talk to me you can just go down the shore.\"\n\n\"I will, Daddy.\"\n\n\"Charlotte, I want to say thank you.\"\n\n\"What for, Daddy?\"\n\nAlvin was quiet for a minute, and Charlotte thought he might have dozed off. But then, he spoke.\n\n\"When I was young, I didn't think much about family. I guess I thought of it more like a duty, an obligation. But, then you come along. The prettiest little baby. And from the first time I looked at your face, family has been the most important thing in the world to me. Thank you for teaching me that.\"\n\nCharlotte stayed by his side as he drifted off to sleep.\n\nAlvin dreamed. He was standing on the town landing, the old one, before they raised it and built the new harbormaster's office. There was a tremendous yacht against the dock, the biggest one he had ever seen. He walked to the rail and saw that the deck was crowded with people. There were men dressed in formal wear and women, all beautiful, some in evening gowns, others in bikinis. One of the women waved to him, beckoning him to come aboard. He took a step toward the gangplank, but then turned and looked up the hill, toward town. Night was falling and the buildings were dark silhouettes against the sky. There was only one lit window. He thought it might be above the hardware store.\n\nHe looked back to the dock, but the yacht was gone. Where it had been berthed, Sea Jay bobbed on the incoming tide. He noticed, though, that the boats's name was not spelled out, in its place were three letters, C and J and H.",
        "Someone was approaching him in the gathering gloom. He turned to face them.\n\nJack Faulkner stopped a few feet away and stood with his hands on his hips.\n\n\"I missed you, Dad,\" Alvin said. He hesitated. \"I should never have left, maybe if I'd been here...\"\n\n\"You had to leave, son. If you didn't leave, you couldn't have come back.The coming back was the important part.\"\n\nThey walked together to the other side of the landing, where they could look across at Faulkner's Wharf. There was a schooner tied to the dock and a small figure was climbing its rigging.\n\n\"That girl's a pisser, ain't she?\" Jack asked.\n\n\"Not a little girl no more,\" Alvin said.\n\n\"You know that she'll take care of everything after you're gone, right?\"\n\n\"She's been running the wharf a while now.\"\n\n\"Not the wharf...everything. That little acorn grew up a mighty oak. You've known that since the day she fished that boy out of the ocean.\" He threw his head back and laughed. \"And then she made him her man. The girl's a corker, all right.\"\n\nAlvin watched Bonita work the rigging for minute, then turned to his father. \"So, how did I do, Dad?\"\n\nJack grinned. \"You done a good bit better than alright, son.\"\n\nAlvin came awake. The room was dark, except for the soft light of the bedside lamp. Hannah was sitting by the bed reading, and leaned forward when she saw his eyes open.\n\n\"How are you feeling, Papa?\" she asked.\n\n\"Tired. But alright, I guess. What are you reading, pumpkin?\"\n\nHannah showed him the book and he laughed.\n\n\"The Princess and the Sailor. How many times have you read that?\"\n\n\"I lost count a long time ago.\"\n\nHannah turned to the beginning of the book and began to read aloud. She read to her father for more than an hour.\n\nMary came into the bedroom in her nightgown and robe. \"Let's let Papa get some sleep now, sweetie,\" she said to Hannah.\n\nHannah nodded and stood up. \"I love you, Papa,\" she said, kissing his cheek.\n\n\"I love you too, honey.\"\n\nHannah left and Mary came to the bedside. She leaned down and tucked the blankets up around Alvin's shoulders. She kissed him and said, \"Don't forget you have your buzzer if you need anything.\"\n\n\"Wait a minute,\" he said, struggling to sit up, \"Where are you going?\"\n\n\"To sleep on the couch.\"\n\n\"The hell you are. I come home to sleep in my own bed, with my wife.\"\n\n\"Are you sure?\" she asked.\n\nAlvin raised the covers. \"You ever known me to not want you in bed next to me?\"\n\n\"Okay, baby,\" she said, smiling. She slipped off her robe and turned out the lamp.\n\nAlvin held out his arms and she snuggled into them. They laid together, side by side. Mary stroked his face. \"You know how much I love you?\" she asked.\n\n\"If it's anything like how much I love you, it's a wicked big portion.\" He pulled her body closer to his. \"Kiss me,\" he said.\n\nShe gave him a kiss and leaned back.\n\n\"Not like that,\" he said, \"I want to kiss like we kissed when we first met.\"\n\nMary touched her lips to his and he parted them with his tongue. They kissed with a lifetime's depth of passion.\n\nMary sighed and rested her head on his shoulder. \"I still love how you touch me, sweetheart.\"\n\n\"Have I kept my promise?\" he asked her.\n\n\"What promise is that?\"\n\n\"The one I gave you in Acadia.\"\n\nIt took Mary a moment to realize that that he was referring to his promise that if she married him, they would have a long life together. She kissed his cheek and said, \"Baby, you have given me a hundred lifetimes worth of love and joy.\"\n\nAlvin nodded and laid his head on the pillow. In a few moments he was asleep. \n\nHe dreamed of snow. It was swirling all around him as he stood in darkness. In the distance, he saw a spot of light and walked toward it. As he drew closer, he saw that it came from an old fashioned street lamp. There was someone beneath it, their back to him. They were leaning on a rail, looking out over a stretch of water, where the light danced on gentle waves.\n\nThey turned as he approached and he saw a pretty young woman with long, flowing blonde hair.\n\n\"Hello, Alvin,\" she said, \"It's been a long time.\"\n\n\"Bonnie...\" \n\nHe stepped forward to embrace her, but something stopped him. There was an invisible barrier between them.\n\n\"I've missed you,\" he told her.\n\n\"I know, honey, but things turned out alright, didn't they?\"\n\nHe nodded. \"Bonnie, I think it's almost time...\"\n\n\"I know, Alvin, don't be afraid.\"\n\n\"I'm not, not really. But I have to tell you...\"\n\n\"I know, honey.\"\n\n\"I can't go with you.\"\n\nShe looked out over the water, and then back at him. \"There are a million billion worlds, Alvin. In some you go with me, in some you go with her, in some you go alone. There were lives we spent together for all our days, and lives where we never met. You got lucky in this one, sweetheart. We had our time together, and then you found her. No one says you can only have one angel.\"\n\nShe raised her eyes to the sky. A single snowflake was drifting down. She looked back at Alvin and smiled. \"You did a good job with the girls,\" she said, \"Tell them I love them. And tell Charlotte that I listened to every word.\"\n\nThe snowflake hovered in front of her face. She stuck out her tongue. The snowflake landed on it, and she vanished.\n\nEarly morning light was creeping into the room when Alvin woke up. Mary was sleeping on her back beside him. In the dim illumination, the small lines around the corners of her mouth and under her eyes were invisible. Her face looked exactly as it had when they first met. She stirred, but did not awaken. He watched her sleep, hoping that she would open her eyes, just so he could look into them again. Eventually, he fell asleep again himself.\n\nMary woke to the sound of the rooster crowing. From downstairs she smelled coffee and heard a soft murmur of voices. She sat up and looked down at Alvin. He was so still that she laid her hand on his chest to see if he was breathing.\n\nHe stirred and opened his eyes. He saw a silver haired woman sitting next to him and for a moment, wondered who she was. She turned and he looked into the eyes that had enchanted him for so long.\n\n\"Mary...\" he said in a voice that was little more than a breath.\n\nShe leaned down, resting her head against his. \"I'm here, my love.\"\n\n\"I dreamed...\"\n\nShe raised her head and looked into his eyes. \"What did you dream, love?\"\n\n\"I dreamed I saw a beautiful girl on a bicycle. Most beautiful girl I ever saw.\"\n\n\"It wasn't a dream. You did see her, sweetheart.\"\n\n\"Yes, I did. I saw her.\"\n\n\"And you took her sailing and before she even got off the boat she was in love with you.\"\n\n\"And I loved her.\"\n\n\"Yes, sweetheart. And you took her to the top of Cadillac Mountain and you asked her to marry you, and she said yes.\"\n\n\"She said yes. I remember. I thought she was an angel.\"\n\n\"And she still loves you, and she will love you forever.\"\n\nHe looked into her eyes and squeezed her hand. The corners of his mouth turned up in a grin. \"Well, alright then,\" he said. He closed his eyes, took a long ragged breath, and was still.\n\nEPILOGUE Sail On, Silvergirl\n\nMary Winslow went for a bicycle ride.\n\nSeptembers were warmer than they used to be, but she buttoned on a cardigan before she left the house. She was prone to chills lately. \n\nShe stopped at the shelf by the door and touched the carved wooden box that held the spoonful of ash. Every time she left the house in the last twenty years she had stopped, laid her hand on the box and told him how much she loved him. Each time, a memory came to her; the way he looked when he stood at the wheel of his boat, the way his hand felt on her flesh, the way the corners of his eyes wrinkled when he laughed. \n\nToday, for some reason, she was thinking of his funeral as she stepped out on to the porch. \n\nThe grove had been packed with mourners. It seemed like most of the town was there. There were relatives from his mother's family whom Mary had never met, some all the way from Canada. Sandy Pierce came up from Massachusetts. Robbie and Carmella flew in from California.\n\nThe ceremony was simple. Theo and Omar had assembled the small stage on which she and Alvin were married. Danni stood and thanked everyone for coming, and then Hannah took the stage and gave a beautiful eulogy. Mary was so proud of her, wondering at the courage and fortitude it must have taken for her to stand and speak of the love she had for her father, the love she shared with everyone there. When Jennifer tried to follow her, she could not speak, and sat back down in tears.\n\nRachel read from John Masefield's poem Sea Fever.\n\nI must down to the seas again, for the call of the running tide\n\nIs a wild call and a clear call that may not be denied\n\nCharlotte and Alvy carried their guitars to the stage, and sang a heartbreaking duet of Bridge Over Troubled Water, and then Danni thanked everyone again.\n\n\"There is a saying in the Jewish community,\" she told them, \"When someone speaks of the dead, we respond with the phrase, 'May their memory be a blessing'. May Alvin's memory be a blessing to us all, for the rest of our days.\"\n\nWhen the crowd had cleared, a smaller group made the short trip to the wharf. Mary boarded SeaJay, along with Bonita and Jamie, Jennifer and Danni, Charlotte and Seth, Hannah and Omar, and Tim and Theo. It was standing room only on the deck, but Mary sat at the stern, cradling Alvin's urn in her lap. Bonita started the engine and took them slowly through the harbor and out into the bay. \n\nShe let out the main sail and caught a wind. They glided along in silence, the only sound the flapping of the sail. When the land had shrunk to a dark line in the distance, Bonita turned the wheel and the sail drooped. They were soon becalmed, rocking gently on the quietly lapping waves.\n\nMary raised her head and saw that everyone was looking at her.\n\n\"I have given a lot of thought to what I should say,\" she said quietly, \"But all I want to do is tell him that I love him.\"\n\n\"Tell him for all of us,\" Hannah said.\n\nMary nodded and turned to face the water. She uncapped the urn and held it up near her face. \"We love you, Alvin, forever and ever.\" She held the urn at arm's length and slowly poured the ashes on the waves, then handed it to Jamie. She reached behind her neck and unfastened the chain that held the green pendant Alvin had made from the sea glass she had found on Lincolnville Beach so many years ago. She dropped it into the water and said, \"Take my heart with you.\"\n\nHer memories were interrupted by a cheerful voice, calling, \"Morning, Grandma!\"\n\nShe looked up and saw Jeannie poking her head out of the loft window.\n\n\"Good morning, sweet girl. Aren't you going to work today?\"\n\n\"No,\" Jeannie said, \"I don't have any face to face meetings, so I'm going to work from home.\"\n\n\"Okay. Well, I'm going to ride into town. Your mom and I are meeting for lunch.\"\n\n\"Don't push yourself too hard, Grandma.\"\n\n\"If I get tired, I'll turn on the battery.\"\n\n\"Okay. Have a good time, Grandma. I love you.\"\n\n\"I love you too, darling.\"\n\nMary mounted her bike and pedaled into the driveway. She saw Jennifer and Omar leaning on the fence of the alpaca pasture. She waved to them and they waved back. At the bottom of the drive she waited as a line of cars went by. There was so much more traffic now, since they built those apartment buildings down the road. When it was clear, she crossed the road and began to ride along the shoulder.\n\nShe passed the spot where she had seen the fox, so many years ago, on the day she helped Jennifer and Danni paint their new house. It had been more than fifty years, and though she knew the creature was long dead, every time she walked or rode past that spot, some small part of her hoped she might see it again.\n\nHer route into town was nearly all downhill, and it was easy biking, gliding more than pedaling. Still, she knew it was likely to wear her out.\n\nTourist season seemed to last longer every year, and the traffic grew heavy as she got nearer to town. She rode past condominiums where there had once been fields of wildflowers, and new houses were going up where stands of pine had lined the road. As she approached the waterfront, though, there was a comfortable familiarity to the scenery. The weathered sheds, the boats standing on spindly jacks, the piles of lobster traps and buoys all looked as they had when she'd first seen them. Even the High Tide looked the same, at least from the outside. She had never gone back without Alvin.\n\nFaulkner's Wharf hadn't changed much either. The little diner wore a fresh coat of paint, and there was a nice new sign, but as Mary turned into the sloping driveway, it could have been that first time, all over again.\n\nBonita's pickup truck was parked in front of the boathouse. Her two newfies, Venus and Mars, were sleeping in the bed. She loves those big dogs, Mary thought. She smiled remembering the day Alvin brought Buster and Moosie home for the girls.\n\nThe dogs woke up and watched her as she braked her bike and dismounted, but they did not bark. Mary leaned the bike next to the office door and went inside.\n\nBonita was sitting at what Mary would always think of as Alvin's desk. She imagined that Bonita probably thought of it that way herself. She looked up and smiled when Mary entered.\n\n\"Hey, I was going to call you later. How are you this morning? You look kind of tired.\"\n\n\"No, I'm fine,\" Mary said, sitting at the other desk. \"Maybe a little winded from my ride.\"\n\n\"Well, if you want, I can toss your bike in the back of the truck and drive you home when you're ready.\"\n\n\"Maybe. Hannah is going to meet me here for lunch.\" \n\nShe noticed that Bonita was holding Danni's badge, unconsciously rubbing her thumb across it. The badge had become a talisman for her, Mary noticed that she always held it when she had a decision to make or needed to discuss a serious subject.\n\nIn all the years since Alvin had died, there was only one moment when Mary had been glad that he was not beside her, and that was on that dreary November day when she had gotten the news about Danni. As strong as he was, it might have broken him.\n\nShe had only been retired from the sheriff's department for a few months. Although she was no longer on active duty, she continued to work for the department part time, transporting prisoners or running other errands.\n\nShe had made a trip to Skowhegan to deliver a box of evidence. It had been drizzling all day. The temperature was just above freezing, and the pavement was icy in patches. A car had stalled trying to climb the winding road up Dixmont Mountain. Danni was driving downhill, on her way home, when she saw it. She stopped and pulled over to help. There was an elderly couple in the car, on their way to a doctor's appointment in Bangor. The husband got out to talk to Danni. As she walked toward him, a logging truck came over the top of the hill, hit black ice and slowly slid sideways as it came down the slope. It flipped on its side and sent its load of massive logs rolling down the roadbed. The wife, though terribly injured, survived. \"The deputy stood there,\" she told the accident investigators, \"and held up her hands like she was protecting us, like she thought she could stop them.\" Like she was guarding the basketball net, Mary thought. She still remembered what Sheriff Ramirez said at the memorial service; that \"it took a dozen trees to knock her down.\"\n\nJennifer slept in Mary's bed that night, crying herself to sleep in her arms. The next night, she dragged the mattress from the guest room into her old bedroom. She never slept in the little house by the pond again. It sat empty for nearly a year, until Bonita and Jamie moved into it.\n\nMary watched Bonita handling her mother's badge. Dear Danielle, she thought, so strong, yet so tender. May her memory be a blessing.\n\n\"So, was there something you wanted to talk about?\" she asked Bonita.\n\n\"Yeah. Christopher.\"\n\nCharlotte and Seth's son had spent each of the past five summers in Maine, working at the wharf. This year, he had brought his boyfriend, Duncan, with him. They had returned to college in Pennsylvania a week earlier.\n\n\"What about him?\" Mary asked.\n\nBonita swiveled in her chair and sat with her elbows on her knees. \"Well, me and him had a talk before he left.\"\n\n\"And?\"\n\n\"He's wicked smart and good with a boat. And Duncan is even better. I told them that I would talk to you about hiring them to help manage the wharf when they finish school.\"\n\n\"Have you discussed this with the other partners?\"\n\n\"I already asked Andy, and Theo would stick his dick in a wasp's nest if you said it was a good idea.\"\n\nMary chuckled. \"I don't think I'll tell him that, but point taken. You seem very concerned about this though. It's still a couple of years away.\"\n\nBonita shrugged. \"I want to make sure I'm not the last Faulkner to run this wharf.\"\n\nMary nodded sympathetically. Alvin had said virtually those same words when he told her that he was handing management of the family business to Bonita.\n\n\"I suspect you'll still be running the wharf for a long, long time, but it sounds like a good idea,\" she said, rising from her chair. \"I'm going to go sit on his bench. Do you want me to call Hannah and ask her to bring you something for lunch?\"\n\n\"No thanks, Jamie is hauling a boat down to Rockland. He's going to bring back Taco Bell.\"\n\n\"Alright, honey.\" She walked to the door, then turned back.\n\n\"Bonita, he'd be very proud of you right now. And Mama Danni would too.\"\n\n\"Thanks. I hope so.\"\n\nMary opened the door, then stopped. \"I'm very proud of you.\"\n\n\"I love you, Mama Mary.\"\n\nMary smiled. Bonita did not know that years earlier, with the approval of Alvin's three daughters, she had written her will, and bequeathed all of what had been Alvin's interest in the wharf to her. Nor did she know that she had also obtained codicils from Andy and Theo, granting Bonita sole authority in managing it. The wharf would be hers. She had earned it many times over.\n\nMary stopped at the back of the truck and spent a few minutes petting the dogs, then walked along the wharf past where SeaJay was tied in her berth, slowly bobbing with the tide. For a brief instant, Mary was sure that she saw Alvin standing on the deck, smiling, beckoning her. The image faded and she walked to the end of the wharf. \n\nHannah and Bonita had bought a granite bench and installed it there, facing out across the harbor toward the open bay. On its back was carved a single word. \n\nPapa. \n\nShe sat down, feeling slightly out of breath. The cool stone felt soothing beneath her. She closed her eyes and breathed in deeply. The salty scent of the sea air brought back a vivid memory. She was standing on the deck of SeaJay, under a sky that seemed overcrowded with stars. Alvin stood before her and held out his hands. She took them, as soft country music began to play.\n\n Could I have this dance for the rest of my life? \n\n\"Mom? Are you okay?\"\n\nMary came out of her reverie and looked up. Hannah was standing in front of her, holding a brown paper bag.\n\n\"I'm fine, honey, just daydreaming.\"\n\nHannah sat down next to her mother. \"You always do when you sit here.\"\n\n\"It's his bench, I can't help thinking about him.\"\n\nHannah looked out across the water. \"I know. I can't either.\"\n\nShe opened the bag and took out two trays of sushi and two bottles of iced tea. Mary took the lid from her tray while Hannah found two sets of chopsticks in her purse.\n\n\"I talked to Charlotte this morning,\" Hannah said as they ate their lunch.\n\n\"Where are they today?\"\n\n\"Malta.\"\n\nMary smiled. \"Its funny that your father could never get her on a boat, and now they take cruises all over the world.\"\n\n\"I asked her once about the cruises and she said something that I couldn't make sense of. She said she had to go see the world because she is a white duck.\"",
        "\"What does that mean?\"\n\n\"I don't know. I guess it's a private joke or something.\"\n\n\"How is Joey?\"\n\n\"Yusef, Mom, he wants us to call him Yusef. Anyway, he likes the new job. He likes New York.\"\n\n\"You did a good job, honey. You're a great mom.\"\n\n\"Mom, go easy on that wasabi, you know it gave you terrible heart burn last time.\"\n\n\"You forget that I'm a California girl.\"\n\n\"Actually, I've been thinking about that a lot since my own child moved out of state.\"\n\n\"You'll always be close, honey.\"\n\nThey finished eating and Hannah gathered up the empty containers. \n\n\"Well, I have a whole classroom of little ones to get back to...\" She stood and kissed her mother's cheek.\n\n\"Hannah,\" Mary called as her daughter walked away. Hannah turned.\n\n\"What is it, Mom?\"\n\n\"I just want to look at you for a minute.\" Their little baby was an adult woman with grown children of her own. It seemed hard to believe some times. \"You know, everyone always told me that you look like me, but I see your father in you.\"\n\nHannah smiled. \"I love you, Mom.\"\n\n\"I love you too, sweet girl.\"\n\nShe watched as Hannah drove away and a truck, hauling a clattering boat trailer, turned in. It rolled to a stop near the boathouse and Jamie climbed out of the drivers seat. She waved to him and he waved back. Bonita stepped out of the boathouse and the two of them sat down on a bench near the door to eat their lunch.\n\nMary heard gulls screeching above her, and looked up. She watched them circling for a minute, then looked across the water and saw two towering stacks of clouds on the horizon. They almost seemed to be giants rising from the ocean. \n\nWhen she lowered her eyes she experienced a rush of vertigo. She dropped her tea bottle and it rolled to the edge of the wharf and fell into the water. She heard her name being called, and in the corner of her eye, saw Bonita and Jamie running across the yard toward her.\n\nShe felt herself falling, but sensed a pair of hands gripping her shoulders, steadying her. She turned her face back to the sky and then she was rising, moving forward across the face of the water. Strong arms took hold of her as she soared above the harbor, weaving between the masts of sailboats toward the open bay. As she skimmed above the whitecaps, a pod of dolphins breeched in front of her and darted away. She banked and followed them. \n\nShe felt no fear, somehow sensing that she was safe. The wind rippled her hair and when it fluttered in front of her face she saw it was no longer silver, but a rich auburn. A line of rocky breakers passed beneath her and then she was over land, a vast forest that changed as she flew by, first the deepest green she had ever seen and then bursting into fireworks of color; scarlet and amber and orange. The land climbed below her, and she realized that she was circling the base of a majestic mountain that rose from the sea. She rose higher, but still, she felt no fear. \n\nThere were figures on the granite slopes, hundreds, perhaps thousands of people, all of whom seemed familiar. As she rose toward the crest of the mountain, she thought she recognized some of the faces that were watching her pass by. She thought she saw Tim and Diana, Stanley and Laura. There was a dark skinned couple that might be Yusef and Jamilla. Surely the woman who raised her hand and waved was Kelly Martin, and was that Wyatt who turned his head up and smiled at her?\n\nThe sea of faces thinned, but she saw two men who might be her brothers, Steve and Dan, and near them her mother and father, standing hand in hand. Closest to the peak, a tall dark haired woman raised her hands and blew her a two handed kiss.\n\nWhen she reached the mountain's peak the towers of cloud rose before her and seemed to grow wings.The angels of cloud parted, opening a bright blue sky between them. As she rose toward it, she drew in one last deep breath of sea air and it tasted of Alvin's skin. The arms that held her safe tightened their grip. She leaned her head on his shoulder and felt his cheek against hers. His voice whispered her name, and together, they sailed away.\n\nMelissa B.\n\nOctober 2017-September 2020\n\nAuthor's Note\n\nFor the last three years, I have spent at least a part of every day with my two angels, Mary and Alvin, and their family and friends. I began writing their story from a simple premise, one that I had Rachel state explicitly for me, that \"every loving relationship is its own epic tale\" and that \"love is the most incredible miracle in the world, but it surrounds us every moment of our lives.\"\n\nWhen I began the story, that notion was a recent revelation for me, and I wanted to explore it. And so were born lovely but insecure Mary, and Alvin, so strong to the world, but so wounded by grief inside. As their romance grew, so did their world, and their circle of family and friends.\n\nI could not have written this story without the love and support in my own life. I owe a great debt of gratitude to my family, in particular to my wonderful husband, whose wisdom and patience were invaluable, and to my grandmother, without whose advice and counsel I could never have written the later chapters.\n\nThere is a third main character as well, my home state of Maine, the land of dilly beans and whoopie pies, where on any given day you might see a moose in the puckerbrush or a porcupine in the treetops or even a spider made of ice, where you might stand atop a mountain by the sea and proclaim your love.\n\nWill I ever return to more stories of Mary and Alvin, or any of the other members of the family? Hard tellin', not knowin'. But for now, there are other casts of characters waiting for their tales to be told.\n\nI extend my deepest thanks to everyone who has come along on this journey, whether you were with me from the beginning, or stopped in for a visit. I am humbled by the kind support I have received from my readers. \n\nI hope you will join me on the next adventure.\n\nWell, alright then.\n\nMelissa "
    ],
    "authorname": "MelissaBaby",
    "tags": [],
    "category": "Romance",
    "url": "https://www.literotica.com/s/mary-and-alvin-ch-36"
}
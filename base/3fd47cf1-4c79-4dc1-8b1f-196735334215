{
    "title": "Vampires on a Train",
    "pages": [
        "He noticed her as he stood smoking between the cars and scanning the crowd, waiting for the train to leave the station. It was the hat that did it, a broad-brimmed, low-crowned black felt hat that cast her face in shadow. If it was supposed to be a disguise, it didn't work at all. The hat and black cloak only set off the mass of golden blonde curls that fell to her shoulders and positively glowed in the grimy light of the station.\n\nThere was a girl with her, shorter, younger, and apparently human, to judge from the pink glow of her complexion. He hadn't known she'd have a companion, but it didn't surprise him. Women of her kind often picked up hangers-on, young people mostly, fascinated by the romantic legends and the promise of eternal life. No doubt they were sexually engaged. The girl might even have begun her transformation.\n\nHe watched them board a coach three cars down, then threw his cigarette onto the track just as the conductor gave his last call and hopped onto the train, pulling the boarding steps up after him. The engine whistled three times and then the big wheels started to turn. Door slammed and locked the length of the train and the car lurched heavily under his feet as they started to move. They were under way, and the for the next fourteen hours the train would be their own little hermetically sealed prison, traveling through the world but not of it.\n\nHe walked back to his compartment now, squeezing past the other passengers, smiling politely and begging their pardon, but his eyes couldn't help but scan them up and down as they passed, looking for that supernatural perfection that meant they might not be what they seemed. He couldn't help it; it came automatically to him now, after so many years, and he was sick of it. This would be his last hunt. When this one was over, no more. He'd have to find something else to fill his time.\n\nOnce in his compartment he locked the door and fell into his seat, sitting backwards so he could see where he'd been rather than where he were going. The combination of melancholy and excitement inherent in the beginning of a journey was familiar to him, but sharper this time as the train left the outskirts of the city and entered the autumnal countryside. The sun was just dipping behind the clouds on the horizon, lighting the tops of the poplars with reddish gold as the train rushed past, fading as watched and leaving the purplish glow of October twilight.\n\nAs was his habit, he chose to eat an early dinner in order to avoid the crowds and be finished by the time darkness settled in, so he washed in his little sink, dried his face and hands and straightened his tie, then made his way to the dining car. \n\nIt was quite empty, the white tablecloths and silver cutlery looking quite handsome against the indigo blue of the autumn dusk; empty except for the blonde woman and her companion seated at the far end.\n\nHe made no show of alarm, but took a seat at a table on the near end, and looked innocently out the window. The waiter brought him a menu, and he pretended to study it as he looked over the top and watched the women.\n\nThe blonde was without her hat and sitting with her back to him; the girl across from her so he could see her face. It was a pretty face, young and fresh and framed by caramel-colored hair cut in a bob. Whereas the blonde was still dressed in black, the girl was in white, a curiously antique gown as far as he could tell, and hardly suited to train travel. \n\nThe girl raised her eyes over her menu, looked directly at him and smiled\u2014a warm smile, one of invitation.\n\nHe quickly hid behind his menu and then the waiter was there, and he busied himself with ordering, a complicated process, it turned out, as the kitchen was not yet up to speed at this early hour and not everything was available. By the time he'd settled for the roast beef, rare, the blonde was gone and the girl was walking towards him, her smile tinged now with social awkwardness. He composed himself. These were strangers, he told himself. He didn't know them\n\n\"Excuse me,\" she said softly. \"I don't want to disturb you...\"\n\nHe looked up into her green eyes. She had a cat's face, the similarity charmingly disrupted by a rather full and sensuous mouth, her lips a glistening pink. The black velvet choker around her neck picked up the black accents on her gown, and added to the similarity, like a pet's collar.\n\n\"No, that's quite all right.\" \n\nThe girl looked uneasily down the length of the empty car. \"It just seemed silly for there to be only two of us in the whole car, sitting at opposite ends like we had the plague. I wonder if it would alright if I...?\"\n\n\"Joined me? Certainly. By all means,\" he lied. \"Really. I was thinking the same thing, but I didn't want to disturb you and your friend.\" He looked down the length of the car and pretended to notice that the woman in black had vanished. \"Oh\u2014 She's gone?\"\n\n\"Who? Marissa? Yes. She wasn't hungry and went back to our compartment. I hope you don't think I'm being too forward?\"\n\nHe smiled dismissively. \"No, really. I'm happy for the company. Here, sit.\" He got up and gallantly held her chair for her. \"I've just ordered. Let me get you a drink. Sherry? An aperitif?\"\n\n\"Thank you. My name is Sarah Blaine. A glass of wine would be lovely, thank you.\"\n\n\"Ted Gregory,\" he said. \"I'm delighted to meet you.\"\n\nHe reached over the snow-white tablecloth and shook her hand. Her handshake was firm and refreshingly confident, and her eyes met his in a way that was just this side of bold. She was a bit of a seductress, he decided, which might make things conside4rably easier. \n\nHaving just cleared off the other place setting, the waiter now returned with it and handed Sarah another menu, and Ted used the opportunity to order them a bottle of wine. She didn't object. When she ordered the fish, Ted apologized and offered to exchange their red wine for white, but she wouldn't hear of it. \n\nThe waiter left, and Sarah looked out the window at the shadowy landscape rushing by. The sun had completely disappeared and the first stars were gleaming coldly in the west. \n\nShe was a very attractive young woman and obviously well bred, not the kind of person he associated with creatures like Marissa. Her dress interested him. It was white, strange enough for this time of the year, and of some satiny material, either quite old or cut to look that way, with a rather low, straight neckline. She obviously wore a corset or other foundation garment that compressed her breasts and presented them most invitingly in a way that kept claiming his attention. The peaks of her young nipples were visible where the fabric stretched tight over them\u2014a tart's trick, and one that was most effective. He found himself considerably aroused.\n\nShe turned back from the window to find him staring, and she smiled.\n\n\"Forgive me, \" he said. \"That's an unusual dress.\"\n\n\"Isn't it?\" She smiled at him, as if she knew some joke. \"It's appropriate though, don't you think?\"\n\nHe raised his eyebrows in confusion.\n\n\"Halloween?\" she asked, waiting for him to catch on. \"Today's the thirty-first? All Hallow's Eve?\"\n\n\"Oh! Of course! You mean you're traveling in costume?\"\n\nShe shrugged. \"Why not? It seemed like fun. Marissa and I are going south for the winter. She goes down every winter, but it's my first time.\"\n\n\"Traveling in costume! How ingenious. That must be fun.\" He raised his glass to her. \"Well, here's to a good trip, Sarah.\" \n\nShe raised her glass with a smile and touched it to his. \"To a good trip. And new friends.\"\n\nShe closed her eyes when she drank and her lashes were long and delicate. The sight of her parted lips on the glass awaiting the taste of the wine was stirring\n\n\"And you?\" she asked. \"Is this trip business or pleasure?\"\n\n\"Oh, business, I'm afraid.\"\n\n\"And you're alone?\" She asked it without a trace of embarrassment or hesitancy\n\nHe laughed. \"Alone. Quite alone. So I'm grateful for your company.\"\n\nShe smiled at him and then very casually said, \"Marissa and I are lovers, you know.\" She looked at him. \"Do you find that shocking?\"\n\nHe laughed a bit uneasily. \"Would you like me to?\"\n\n\"Most people do. But then, I don't care for what most people think, do you?\"\n\nThey both swayed as the train clattered over a switch. \"I find very little shocking in this day and age, I'm afraid. It's a very wide world.\"\n\nShe looked at him approvingly. \"Yes it is. And all sorts of things go on in it. I do miss a man's company, though, so you mustn't think I'm one of [I]those[/I] women, the kind that only likes other women. Marissa's the same way. She likes men too, I mean, though she's too stubborn to admit it. Have you seen her? The woman I'm with?\"\n\nTed filled her glass again, using the pause to think. It was fairly obvious the way these two worked now, and he suspected he knew where this was going. Sarah was the bait, fully human and very attractive. She was very good at what she did.\n\n\"Yes. The lady in black?\" He tried to sound innocent. \"Yes. She's hard to miss. Forgive my frankness, but she's quite a beautiful woman. You two make a very striking couple.\"\n\n\"Thank you,\" Sarah smiled and raised her glass in a little mock toast to his perceptiveness, then leaned forward conspiratorially. \"And my, can she fuck!\"\n\nShe tossed the wine back, obviously enjoying his discomfiture, and this time he couldn't hide his surprise. He stared at her a moment, speechless.\n\nThere was a brief jolt as the train left the tangle of switches and gathered speed on the mainline again. Ted poured them more wine to hide his consternation and Sarah turned again to the window, her satisfaction with the way this game was proceeding obvious in her little smile.\n\n\"An overnight train!\" she sighed, her last statement forgotten. \"Is there anything more romantic? Isn't it breathtaking?\"\n\nHe admitted that it was. It was night now and totally dark, and the countryside was invisible beyond the reach of the lighted windows of the car. Occasionally a village or town swept by, or the bell of a crossing sounded a mournful doppler, but as far as he could tell they were well into the woods now, an even darker dark beneath the starry sky. The wheel clicked reassuringly on the track \n\nThe waiter brought their food: roast beef for him, poached fish for her. Sarah put her napkin in her lap and gazed longingly at his meal for a moment.\n\n\"I'm sorry,\" he said. \"You're not happy with your fish? Would you like some of my beef?\" It was a terribly bold thing to suggest, but he hardly expected it would be remarked by a girl who was so at ease with four-letter words.\n\n\"Oh, no, no.\" She shook her head and picked up her knife and fork. \"Marissa just keeps close watch on me. She won't let me have red meat except on very rare occasions. It's the one thing I miss. That and men, of course.\"\n\nThe food gave him time to think. His original plan had been to find them in their compartment during the day and take care of things then and there. That was the way he'd always operated, and a vampire in his coffin was a pitiful thing, hardly more than a hollow husk, and easily dispatched. But these two were involved in some seductive game that fascinated him.\n\nSarah was entirely human as far as he could tell, one of those sad, misguided souls who were attracted to what they saw as the romance of the vampire. Marissa herself couldn't be very old as far as vampires went. She was still far too human, without that dry, insect-like vacuity that came to all vampires with age, to the point where they lost all capacity for feeling or emotion and became the dry, lifeless husks that existed for nothing but to feed. These were the ones he usually dealt with: easy to loathe, a pleasure to kill.\n\nBut this was intriguing. Sarah was young, beautiful, and seductive, and he was drawn to her. He had gone too long without any real human contact. That he should now find it with the companion of a vampire was an irony that wasn't lost on him. When she openly suggested that they meet after dinner in the privacy of his compartment, looking directly into his eyes and subtly licking the rim of her glass, he wasn't surprised. \n\nHe met her gaze, but inwardly he was trembling. \"You're joking,\" he said, pretending to be shocked. He hated to disappoint her.\n\nShe smiled at him, a smile more overtly sexual than any he'd received so far. \"No, Ted. I wouldn't want you to get the wrong impression of me, but in this case, why not? We're both adults. We know what we want, and attractive, liberal-minded men such as yourself are in such short supply. Why shouldn't we?\"\n\nHe felt the thrill of danger and the lure of attraction in equal measures. \"I can't think of a single reason.\"\n\nSarah smiled and returned to her meal, and the conversation drifted on to other, more innocent things, but all the while Ted's mind was racing over plans and stratagems. He was surprised to find that he wanted her, wanted her badly. It was a feeling he hadn't experienced in months.\n\nThe meal over, Sarah sat back with a contented sigh and finished her wine. \"There is one thing I should mention,\" she said. \"I have to clear it with Marissa first, but I know she won't mind. She might even want to join us, or at least watch. Is that all right?\"\n\nHe'd expected that and he smiled. \"You are a strange couple, aren't you?\"\n\n\"Yes,\" she said, pleased to be scandalizing him. She leaned forward to give him a good view of the deep cleavage between her ripe young breasts. \"I told you. We're not like those other women. Then you've no objections?\"\n\n\"No,\" he said, though this complicated matters.\n\n\"Good, then I'll just\u2014 Oh, no need. Here's Marissa now. Perfect timing.\"\n\nHe turned just in time to catch the swirl of black as the other woman approached their table. From a distance, she had appeared rather severe, an effect no doubt enhanced by the round blue lenses that covered her eyes, but now, gazing down at the remains of their meal and the empty bottle, her face was open and friendly. She was smiling, and she was devastatingly beautiful\u2014her face pure and angelic.\n\n\"Well, how was the meal, Sarah? Fish was it?\"\n\nTed stood, rather too quickly. The train lurched and he almost lost his balance, causing the women to laugh.\n\n\"Marissa, this is Ted\u2014 Gregory, was it? Yes. Ted Gregory, and Ted, this is Marissa Boros, my teacher and lover.\"\n\nHe smiled, trying to keep his composure while acting suitably shocked at Sarah's words. \n\nMarissa took his hand. Hers was cool and smooth. He detected nothing of the mature vampire's leathery strength.\n\n\"Forgive me the dark glasses, Mr. Gregory. A touch of conjunctivitis, I'm afraid.\"\n\n\"Oh, I'm so sorry. But think nothing of it. Sarah's been telling me all about you. Please, sit. Should I order another bottle? Would you like something to eat?\"\n\nMarissa smiled and gestured for him to sit as she took a chair. \"Thank you, no. I'm on a rather strict fast.\" She settled into her chair and resumed the conversation. \"So she's been talking about me? Naughty girl. She loves to talk, this one. All lies, no doubt. Just what did she say?\"\n\nBefore Ted could answer, Sarah chimed in. \"I was just telling Ted I wanted to take him to bed. Would that be all right?\"\n\nMarissa didn't bat an eye. She studied Ted out of the sides of her glasses. \"She's an excitable girl, but we're really quite open with our sexuality. I hope she didn't embarrass you?\" \n\nTed shook his head vigorously and Marissa smiled. She turned to Sarah. \"I think it would depend on how Mr. Gregory feels about it.\"\n\n\"Ted, please.\" He corrected. \"As for me, yes, it would be fine. It would be more than fine. Wonderful is more like it! And may I add how terribly refreshing it is to find two such fetching women who take such a sensible and refreshing view of such matters.\"\n\nThey laughed again, companionably. The waiter came by and slid the check to Ted. The car was starting to fill up with regular diners now, and the waiter, unusually solicitous, asked Marissa once more if she was sure she wouldn't dine, but again she begged off. \n\nTed took the opportunity to study her. She was more mature and womanly than Sarah, but that was more a matter of temperament than one of years, and her sense of sophistication was all the more attractive for being set off by a face that was both girlish and classically beautiful, with fine, regular features and a strikingly clear complexion, although unusually pale. And there was something else\u2014a haunting sadness, some hidden sorrow he had never heard of in one of her kind, usually devoid of any emotion.\n\nShe was a shape-shifter of course, and could appear as whatever she liked, but even so the form she chose to show the world said much about her inner nature. Marissa chose to present herself as a woman of almost ethereal beauty, of a kind that nearly transcended the sexual. It was terribly clever, to hide such evil behind such an angelic face.\n\nHe looked at her nails and saw that the moons didn't show, the beds were white, and it struck him that she was starving. He'd seen it before in vampires deprived of food. She should be feeding well on Sarah's blood\u2014he assumed that was what the girl's choker was for, to hide the marks\u2014but for some reason she was not availing herself of the blood available, but intentionally starving herself. That would explain the slow grace with which she moved as well. She was weak, even dying perhaps. Strangely he felt his heart going out to her.\n\n\"Sarah tell me you're her teacher,\" he said, once the waiter had left. \n\n\"Oh yes,\" Marissa said proudly. \"I've taught her almost everything she knows. She's a very good student, too. Shall I show you?\" \n\nWithout awaiting an answer, she plucked a grape from Sarah's plate. \"Sarah?\" she asked, as one speaks to a pet about to perform a clever trick. \"Open,\" and when the girl opened her mouth, Marissa placed the grape on her tongue.\n\n\"Watch,\" Marissa said. \"She has a truly exquisite mouth.\"\n\nSarah sat with eyes closed, her mouth working behind her closed lips. In a moment she opened her mouth and extended her tongue, and there sat the grape, glistening and gelid, neatly and completely peeled.\n\n\"Wonderful, isn't she? Can you imagine what else that mouth can do?\" Marissa took the grape in her fingers and showed it to him. Her nails were long and exquisitely manicured, but still, there was that paleness beneath then. \n\n\"You can have her,\" Marissa said, \"But only if I can watch.\"\n\nHe looked at Sarah, but now that Marissa had joined them, she was silent, her eyes on the tablecloth in front of her, a child in the presence of her elders. \n\nHe cleared his throat uneasily. \"You want to watch?\"\n\nHe could see the glitter of her eyes even behind her glasses. \"If you're good, I might join in. And you look like you'll be rather good. Is that satisfactory?\"\n\nHe nodded.\n\n\"Good. What's your compartment number?\"\n\nFor a moment, he couldn't think. Marissa was terribly beautiful, more beautiful than he'd expected, even after he'd seen her board the train. \n\n\"Seventeen,\" he managed at last.\n\nShe stood up. \"Very well. Give us some time to refresh ourselves, and we'll meet you there. Sarah? Up.\"\n\nTed stood up as Sarah rose and smiled demurely at him. It was all too bizarre, too perfect. His heart was thudding in his chest as he caught the scent of Marissa's perfume, wild and sensuous. He'd never known a vampire to wear scent.\n\n\"See you soon,\" Marissa said, and then she turned and walked back through the dining car, Sarah following in her wake without so much as a glance back.\n\nTed signed the check, his hands shaking. He left a generous tip, and then made his way quickly back to his compartment. He didn't have much time.\n\nOnce inside, he took down his black valise from the luggage rack, laid it on the old-fashioned bench seat, and opened the locks. He rummaged around inside, pushing aside the mirrors and crucifixes and vials of holy water till he found the stakes. The simple one made of Linden wood would do for Sarah if it came to that, but he didn't think it would. She wasn't one of them yet, and simple force would do for her. Still, why take chances? He took out the stake and held it under his arm. ",
        "Marissa was another story. He found the silver stake, the one he had smelted and poured in his own kitchen years ago but never had occasion to use. It wasn't very big, but it was anointed with holy water and consecrated to St. Giles and was the most powerful weapon in his arsenal. This would be the one to use. His prey was rare now; there was no need to save it. He took that one out and, just to be sure, he selected another stake made of hazel-wood as back up, thicker and more substantial. \n\nThe question now was where to hide them. The compartment had two bench seats that folded down into beds. He was sure that they'd sit against the forward wall so that when they looked out the window, they would see where they'd been and not where they were going. Vampires had an instinctive aversion to the future. It was one of the ways in which they differed from humans. \n\nHe stuffed the linden-wood stake down between the seat and the backrest, then pushed the other two down at end of the seat, between the cushion and the car wall. the silver one on top. On impulse, he selected a gold crucifix and put it around his neck. Religious symbols didn't have much effect anymore, especially on the younger vampires, but the cold weight of the metal against his chest was some reassurance.\n\nHe checked that he could reach the stakes without much trouble, then stood up again. He was taking a terrible chance. His victims had always been the aged, coffin-bound and defenseless, and Marissa, though weak, was still young and potentially dangerous. He'd heard the legends of the vampires' sexual prowess, but he knew it only existed in the young, before they grew dry and desiccated and all feeling left their bodies. It was terribly rash to put himself in harm's way like this,. but still, something drew him on. His hands shook with excitement.\n\nThe train roared past some night-darkened town, the crossing gate bell clanging with urgency as he checked to see that nothing was visible. The time to get them would be after the sex, or perhaps during. That's when they'd be the weakest. He'd cross that bridge when he came to it.\n\nHe locked the valise and returned it to the luggage rack, smoothed his hair back and looked at himself in the mirror. He didn't look nervous.\n\nOr so he thought, for when he heard the soft knock and opened the door, he wasn't quite prepared for the two women who walked in. Marissa still wore her blue glasses and a black wool cape, but beneath it was something very tight and black and made of sturdy leather that covered her from toes to fingertips, adorned with laces and buckles and shiny silver fasteners, a kind of leather armor that no doubt protected her from the bites and scratches of struggling victims. The thought filled him with salacious excitement. Sarah on the other hand looked totally unprotected. She wore a long cloth coat and a black leather collar around her neck fastened with a tiny silver padlock. There was a leash attached, and Marissa held the other end casually in one hand, a leather riding crop in the other as she led the girl into the compartment.\n\n\"Happy Halloween,\" she joked.\n\n\"And to you too, I'm sure.\" He closed the door behind them and locked it.\n\nMarissa waited till she had his attention, then turned around and gave a little tug on Sarah's leash. \"Show,\" she said.\n\nSarah shrugged off the coat let it fall to the floor. She stood revealed in a gauzy white night dress, the traditional garb of the female vampire. Her magnificent breasts were plainly visible through the thin fabric, as was her slim waist and the luxurious swell of her hips. It was obvious that she wore nothing beneath the gown. She was freshly made up to devastating effect, looking both beautiful and dangerous, and very unlike the silly girl he'd just had dinner with.\n\nThe train roared through another crossing with a loud clattering as Marissa sat down on the bench seat by the window, facing backwards. She glanced at Ted. \"Acceptable?\" \n\nHis mouth was dry. \"Yes. Quite,\" he said nervously.\n\n\"Good.\" She handed him leash.\n\nHe held it uncertainly as Sarah stood there, looking at him from beneath her lowered lashes. Marissa lounged on the seat, eyeing them both.\n\nTed laughed nervously. \"I hardly know how to begin.\"\n\n\"Get the lights,\" Marissa said. \"The dark is much more soothing.\"\n\nHe hit the switch and the compartment filled with darkness, save for the red exit signs. Marissa sighed and at last took off her glasses, shook her long blonde curls out and folded them and put them on the windowsill. As he'd expected, she had no sort of conjunctivitis. As far as he could see, her eyes were lovely\u2014hypnotic in the dark.\n\n\"Sarah?\" Marissa spoke as to a child. \"Don't be rude. You know what to do.\"\n\nThe girl stepped up to Ted and put her arms around his neck. Her warm, firm breasts pillowed against his chest as she pulled his head down for a lingering kiss, filled with sexual urgency. Her mouth was sweet, and her body as warm as a long summer day. She was a wonderful kisser, her tongue teasing him shyly until he pursued, and then retreating in feminine modesty, her lips melting beseechingly against his as his masculine desire asserted itself. She knew just how to provoke, and then retreat so as to draw him in. There was nothing supernatural about the surge of desire he felt\u2014hot, urgent, and full of blood.\n\nMarissa smiled and tapped the end of her crop against her lower lip. \"She warms up quickly, don't you find?\"\n\n\"My God,\" he breathed, stepping away. His heart was pounding. \n\nSarah was breathing faster too, and her breasts rose and fell as she reached up and pulled down the bodice of her gown, letting them surge over the hem, round and ripe, the nipples already erect and reaching for him with urgency. He could sense Marissa smiling, but he couldn't resist as Sarah reached up and tenderly pulled his head down to her breast. He smelled her perfume, her girlish freshness and the milky warm scent of her skin, closed his eyes and felt the stiff yet velvety skin of her nipple against his lips. He sucked it inside and felt her shudder and heard her sudden sharp intake of breath. Instinctively, he sucked it deeper, an infant again with an infant's pleasures. Sarah rose up on her toes to give him access and whimpered, proud to be the source of his pleasure. She ran her fingers lightly through his hair, comforting him, clinging to the back of his neck for support.\n\nMarissa tapped him on the leg with the crop. \"Do you know how to use this?\"\n\nHe looked at her in confusion, reluctant to let Sarah's breast out of his mouth, but Marissa held it out to him insistently.\n\n\"Go ahead. She loves it, the little whore. Watch.\"\n\nMarissa used the crop to separate them, then, without even bothering to stand, she brought the end down smartly against the very nipple he'd just been sucking. Sarah gasped and brought her shoulders up protectively, but quickly recovered and forced her elbows back, presenting herself for another blow. She looked at Ted with fire in her eyes, inviting him to try his hand.\n\n\"I couldn't,\" he said helplessly.\n\n\"Not to your taste, [I[Ted[/I]?\" Marissa mocked. \"No matter. Here, sit down next to me. Sarah, on your knees.\"\n\nSarah pushed him gently, and despite her small size, he let himself be guided back onto the bench. The wheels clicked steadily over the track and the coach rocked as he sat down and Sarah came and leaned over him, her hands on his knees. He could see her big jugs hanging pendulously beneath her, swaying with the train's gentle motion. \n\nSarah got down on her knees and leaned forward, her hands on his thighs, put her mouth over the bulge in his trousers, and for a moment he got a glimpse of the animal she might be, predatory and hungry. She opened her mouth and closed her even white teeth gently on his stiff shaft, and he felt the hot steam of her breath through the fabric of his trousers. \n\nHe stared down at her, eyes bulging as her skilled fingers found the tab on his zipper and lowered it. She delicately opened the fly of his shorts and extracted his thick cock, gently, as if she were performing surgery, then let it spring up, hard and rampant and gleaming in the blood red light of the swaying coach. The tension in the car was as thick as the darkness, the occasional trackside light sweeping over them like the beam of a lighthouse.\n\n\"Do it,\" Marissa whispered. \"Suck his prick.\"\n\nSarah ducked her head and touched her tongue to his balls, and Ted looked down to see that beautiful, girlish face half hidden by the shadow of his thick, menacing shaft. The contrast of her childlike beauty with the fleshy brutality of his meat made the blood pound in his veins, and he was filled with sudden thoughts of violence, rape and carnage. Sarah looked up at Marissa with slavish eagerness, and the blonde nodded her head. Sarah closed her eyes and opened her mouth and dropped her face into his lap. his cock sliding into the open gorge of her mouth..\n\n\"Oh Christ!\" he wailed. She took it all, an impossible length. His stomach jerked with a sudden paroxysm of pleasure. \n\nHer mouth was hot and deep and sweet, and she had the passively aggressive nature of the natural-born cock-sucker, deriving sensual pleasure from the feel of a man's heavy prick lying on her tongue, controlling him through her own urge to be penetrated. She pressed her face into his pubic hair, sucking him in, and he felt the head of his tool slide against the ridged roof of her mouth as her wet, velvety tongue caressing him from beneath. Deeper, deeper, and his glans bumped against the sticky tissue of her soft pallet. He felt her throat spasm and then open up around him, and a surge of pure sensory overload made him jerk in her mouth as his cock passed her epiglottis. His head snapped back against the seat as if he'd received an electric shock\n\nMarissa smiled and pressed herself against his shoulder, her hand reaching out to squeeze the inside of his thigh. \"Good, isn't she?\"\n\nSarah lived up to her cat-like image now as she pounced on his prick and began bobbing her head over him, as if he were prey she would swallow. He was dimly aware that she'd gathered her dress up around her hips and was playing between her thighs, and the realization that she was masturbating only added fuel to his raging fire. These women would stop at nothing. They simply had no shame. There was no telling what they'd do for him.\n\n\"Oh fuck!\" he moaned, the sound of the forbidden obscenity on his lips only heightening his excitement. His fingers dug into the soft cushion of the seat and he arched his back, pressing his head against the backrest, thrusting his hips into the sucking warmth of Sarah's young mouth. He felt Marissa shift beside him, and then seemingly overwhelmed by the salacious scene in front of her, her lips came down on his, and for the first time he felt the forbidden heat of the vampire's kiss.\n\nHer lips were hard, all-consuming and as enveloping as the grave. Her kiss was hunger, and yet sweeter and more feminine than anything he'd ever felt, promising comfort and darkness. She held her hair out of the way and her tongue licked insidiously at his teeth, promising pleasures more obscene than he could possibly imagine if he just let her inside, and he couldn't refuse. The lips that had tasted blood now tasted his, and with the same greed and carnivorous hunger. Her long tongue was in his mouth and she breathed her breath into his throat, breath that was hot with female sexuality and a predatory neediness that enveloped his soul like a tight, wet, cunt.\n\n\"Oh!\" he moaned into her mouth, \"Oh God!\" He hadn't expected this. He knew the legends, but he hadn't expected it from a kiss, and now, with his cock in Sarah's mouth and his throat being fucked by Marissa's tongue, he feared he might already be lost, drowning in a sweet sea of need.\n\nThe stakes! The stakes! He didn't dare reach over Marissa, so he pushed his hand down behind him, groveling between the cushions and searching for the smooth, hard wood of the stake, but all he found was Marissa's leather-clad hand already there, already holding the sharpened pole.\n\nHis blood ran cold. \n\nAnother train roared past, going the opposite way, the faces and windows a long meaningless smear of light, temporarily blinding and deafening. When the train passed, Marissa was holding the stake before his eyes.\n\n\"Really, Todor,\" she said. \"I expected better from you. Ted Gregory? Do you really think we're so stupid?\"\n\nHe searched frantically for a way out. Sarah had lifted her mouth from his prick and was looking at him curiously, obviously baffled.\n\n\"Sarah? Continue what you were doing,\" Marissa said. \"I'd like to introduce you to Professor Doctor Todor Gyarmathy, vampire hunter, late of Krakow University and the University of Prague. I believe we were next on his list, weren't we, Doctor? A rather short list too, due to his efforts. He thinks he followed us onto this train to do away with us, Sarah. He doesn't know that he was lured here, that the hunter has become the prey. Well, I expect he knows now.\"\n\nHis pants were around his ankles and his cock in the maddening suction of the girl's mouth, but Ted tried to scramble up from the seat, only to be thrown back easily by Marissa's hand on his chest\u2014that weirdly thrilling sensation of the vampire's inhuman strength, as if her muscles in her thin arms were made of steel cables. She might be sick, she might even be dying, but she was still dangerous. She threw the stake across the car, then reached down beside her and pulled out the other two.\n\n\"Real silver,\" she said approvingly. \"I'm flattered.\" \n\nShe tossed them with the other and pressed him back into his seat with her one hand.\n\n\"I must say I'm surprised at you, Doctor. I had no idea you were so sexually vulnerable.\"\n\n\"You know who I am!\"\n\n\"Of course I do, Todor. Do you think I'm one of those mindless mummies who sleep in a coffin all day? Do you think I can't read the papers and the penny press, that I don't know who my enemies are and where, and what they're doing?\"\n\nShe removed her hand from his chest and sat back. \" I heard about your fianc\u00e9e, Professor, and I extend my most sincere condolences. You must have loved her very much. You know we had nothing to do with it, don't you? We don't work that way. Cancer, was it?\"\n\nThe thought of virginal Magda shamed him\u2014if she could see him now, what would she think? \"Leukemia,\" he said. \"But I'll thank you not to pollute her name by speaking it.\"\n\n\"My sympathy is genuine, Professor. I'm not yet without feelings. I remember what it is to lose someone.\"\n\nHer sincerity shamed him again, and he looked away.\n\n\"You're a young and vigorous man, Professor,\" she said. \"You must feel her loss deeply. Perhaps that's why you've become so careless, or foolish. Death doesn't seem to frighten you as much, does it? I daresay it even has some attraction for you. Is that why you invited us back to your car at night? A little roll in the hay with death?\"\n\n\"You're not dead,\" he said. \"You're worse than that.\"\n\nThe train roared by a trackside switch house, the white light from outside sweeping across the compartment, lighting up Sarah as she knelt between his legs and began sucking him again, losing interest in what was happening above her.\n\nEasy, bitch,\" Marissa said to Sarah, slapping her lightly with the crop. \"Just keep him idling.\" Then, turning again to Ted, she said, \"I warn you, she can make you feel so good you'll snap your spine in pleasure, or she can bite it off at the root if I tell her to.\"\n\nSatisfied, she sat back. \"Worse than dead, am I?\" She reached out and ran her hand over his chest, and he was forced to look into her eyes, deep and predatory. \"And yet you came here looking to get fucked, knowing what we were. You wanted to fuck the vampires. That's playing with fire, isn't it, Todor? Rather dangerous? Just what is it you were looking for? Just a quick piece of ass?\"\n\nHe groaned as Sarah took him deep, moaning in her throat as her head worked slowly over him.\n\nMarissa stared down her nose at the girl. \"Look at her. She comes from a good family, but she's so stupid she doesn't even know what she has. She wants to be like me, wants me to make her of my kind. And look how much pleasure she gets from this. How much pleasure you both get from this. The little cunt has no idea how lucky she is, how lucky you both are.\"\n\nTodor groaned again. \"What are you going to do to me?\" \n\nMarissa got up on her knees and faced him. She unbuttoned his shirt and threw it open, watching his eyes for his reaction. \n\n\"Don't worry,\" she said. \"I'm not going to hurt you. Not tonight. Maybe never. That's not what I want. I've been watching you for years, Todor, watching you as you hunted down and killed my kind. I've been watching you and wanting you.\"\n\nHer hand brushed against the gold crucifix and she smiled. \"A little hypocritical, aren't we Ted? Or have you suddenly gotten religion?\" \n\nShe closed her fist on the cross and ripped it easily from around his neck, threw it across the car and went back to rubbing her hand over the thick muscles of his chest as Sarah's warm, wet mouth continued to slide up and down his pole.\n\nMarissa watched her for a while, admiring her slave's skill and the effect it had on him. She seemed to draw strength from the two humans' sexual pleasure, vicariously feeding on it, her excitement tinged with bitter envy\n\n\"Admit it,\" she said. \"You must feel the same attraction for me, don't you, Todor? We're predator and prey you and I, locked in this together. But who's whom tonight? Can you tell me that?\"\n\n\"What do you want from me?\" he asked.\n\n\"What indeed?\" she whispered. She breathed into his ear and the heat of her breath gave him chills. Her tongue came out and she licked him like a cat. \"I don't want your blood tonight, Todor, though I'm sure it's delicious, rich and full of strength. I'm no longer interested in blood.\" \n\nHer tongue dipped into his ear and he felt her shuddering breath. The even edges of her white teeth pressed teasingly into his ear lobe then released him. \"I want your come. I want to feel your human cock inside me and the gush of your hot seed. I want you to fuck me.\"\n\nHe drew back instinctively, but something leaped inside him. The face that loomed above him was more beautiful than any face he had ever seen, and the fear he felt was overwhelmed by something dark and eager that rose from within. \n\nShe caressed his face with her gloved hand, examining him, then used her thumb to gently smooth his eyebrow like a concerned wife. She looked into his eyes\u2014deep, deeper, deeper than anyone had ever gone, down into a place where he himself never went, and whatever it was she saw there seemed to please her.\n\nShe pulled back, satisfied. She held his eyes and whispered down to Sarah. \"Suck him good now, bitch. Get him nice and hard for me!\"\n\nSarah plunged back down on his cock and Ted groaned, his hips automatically thrusting up, reaching his prick back into her throat. Marissa threw her cape over her shoulders and pushed her hair back from her face, lowered her head and kissed him. She put one arm around his shoulders and slid the other hand inside his shirt to caress his nipples, and stifled his moaning with her lips, sucking him, nipping him, feeding on his hot breath.\n\n\"Yes,\" she murmured into his slack mouth. \"Yes, that's what I want. Your passion, your desire. You don't know what it's like for us, do you? You think it's like in your books and the stories you hear, where we go where we will, fucking and sucking the blood of whomever we want. Well it's not like that for us, Todor. It's not like that at all.\n\n\"We live like rats, scurrying in the gutters, seeking out the weak, the old, the mentally imbalanced. When we fuck, we fuck a half-dead victim whose cock is limp and flaccid, whose life-force is all but spent. We fuck our food after we've eaten it, after it's garbage. Do you think that excites us? Do you think that gives us pleasure?\"",
        "Watching Sarah suck his cock, knowing the two of them were sharing human sexual pleasures no longer available to her made Marissa wild with jealous lust, and her hand went to the bodice of her cat suit where her breasts bulged behind the cleverly designed leather cups, cups that attached with silver snaps so that with a brief tug she was able to pull one free and expose her perfect breast. She dropped the useless piece of leather and pressed her ruby-red nipple to his lips.\n\n\"Show me, Todor!\" she commanded. \"Show me how you hate me. Bite it off if it pleases you!\"\n\nTodor moaned. Without conscious thought, he opened his mouth and sucked her nipple inside. It was warm and soft, but hardened rapidly in his mouth till it was as firm and turgid as any woman's. He could hear her heart, feel her heart beat in his lips\u2014the vampire's heart. He knew she was a monster, but his body knew otherwise, and without thinking he bit down softly on it and Marissa hissed with pleasure. \n\n\"This our curse, did you know that? We vampires can't feel. We don't know pain, and so we can't feel pleasure. We don't feel fear, and so we don't know passion. No. We can't feel unless we're in danger, and that's why I sought you out, Todor, because you can make me afraid. You with your stakes and your silver and your silly crucifixes. Do you understand?\"\n\nShe looked into his eyes, but all she saw there was the raw pleasure Sarah's sucking mouth was causing him. Again, jealousy and envy raged in her breast\n\n\"Enough!\" she cried, and she lifted her foot, placed the spike-heeled boot against the kneeling girl's shoulder and pushed her away, knocking her on her rump. Sarah looked around in hazy confusion, her lips wet with saliva. For a moment her eyes flared with frustrated rage, but she quickly regained her composure.\n\n\"Little cunt!\" Marissa spat. \"That's enough! Get his pants off. If you knew anything, you'd know how good you had it now, being able to do this whenever you want. But you don't. You don't know anything. Get his pants and his jacket off him and get over in the corner and play with yourself like the whore you are. Bring me your fingers when they're full of your come, meanwhile, leave him to me.\"\n\nSarah crawled back to the seat and pulled his shoes and socks off, then tugged his pants and shorts down his legs as Todor sat there passively, sucking hungrily on Marissa's exposed breast, lost in some erotic spell he could no longer overcome. His cock was enormous, so hard it bent back on itself in a straining curve and pulsed with each beat of his heart. \n\nHe should escape now, while Sarah was pulling at his clothes. He should make his move, but he had no desire to get away. He was on fire with lust and sexual need. \n\nSarah pulled his jacket off, stripping it down his arms like he was a helpless child. She removed his tie and unbuttoned his shirt, but then Marissa gestured her away. The blonde got up on her knees next to him, reached between her thighs and unsnapped the black leather crotch piece, revealing the flushed pink lips of her sex beneath a cloud of golden-yellow pubic curls. She grabbed Todor's hand and pushed it up between her legs. \n\n\"They say vampires are cold, don't they, Todor? Tell me, what do you think?\"\n\nHer flesh was fiery hot and wet, very wet, slick with her arousal. Her labia were a deep, livid pink, the portals to another world, and he couldn't tear his eyes from her, from the lewd contrast between her pink sex and her alabaster skin, the shiny black of the tight leather corset. She threw her leg over him as if she were getting into a saddle, straddled him so that her sex was just above his straining cock. She leaned forward and licked his face like a dog.\n\n\"Put your fingers inside me, Todor,\" she said. She spread her knees and pressed his hand to her burning sex. \"Touch me like you touch a real girl, one of the living.\"\n\nHer hand went to the other cup of her suit and pulled it off so that both her breasts were exposed, as white and perfect as polished marble. The train sounded its whistle as they roared through yet another town, the car lights flickering as they clattered over a bank of switches. Marissa was poised above him, her hands on his shoulders, her pussy inches above the head of his cock, moisture dripping from her matted pubic hair as if she were salivating. \n\nShe leaned her forehead against his, her eyes staring into his. \"I want you to fuck me now. I want you to put your cock into the grave, into the undead. Can you do it, Todor? Will you do it??\"\n\nHe licked his dry lips. Out of the corner of his eye he could see Sarah sitting with her knees up, both hands between her legs, watching them with predatory interest.\n\n\"Yes,\" he said.\n\n\"Then listen to me,\" She put her hands on the sides of his head and held him steady so she could look into his eyes, and spoke very low, so that Sarah wouldn't hear. \n\n\"I'm a virgin, Todor, a virgin. I was taken before I ever knew a man, and that hasn't changed. I have never forced myself upon my victims. I couldn't. How could I? A virgin? So I'm a virgin still. Do you understand?\"\n\nHe looked at her and saw the hurt in her eyes, the vulnerability. It touched him. \"Yes. I understand.\"\n\n\"I'm dying, Todor. I'm killing myself. I know what happens to us as we age, as we lose feeling and emotion and become nothing but feeding machines, sick, repulsive things, like leeches, like locusts, those things you kill in their coffins. I won't have that happen to me. I won't. I'll starve myself and die before that ever happens to me. But I have to know before I die. I have to know what it's like, what it's like to have a man inside me. Do you see? Do you understand?\"\n\n\"Yes. What must I do?\"\n\nMarissa dropped her head, unable to look at him. She struggled to go on. \"It can only be done by a mortal man, and he must want to do it. A mortal man, unchanged, and one whose blood I have never tasted, nor he mine. He must know me for what I am, and yet he must want me anyway.\"\n\nShe raised her head and looked at him, her eyes suddenly full of fear and uncertainty and very unlike a vampire's. \"You have to want me, Todor,\" she whispered. \"As a man wants a woman. You must know what I am and want me despite that, without hope of reward or fear of death. Can you do that, Todor? Do you understand?\"\n\n\"Yes,\" he said.\n\nShe pulled her face back and looked at him. Her eyes were soft now, glowing with tears. \"I can't thank you Todor. That would be a reward and that would ruin it. Do you understand that as well?\"\n\n\"Yes.\"\n\nShe relaxed her grip on his head, and looked away, unwilling to meet his eyes. As she relaxed, the soft lips of her sex touched the head of his straining cock and she gasped in surprise.\n\n\"It will hurt,\" she whispered. \"It's like a stake in the heart, so I've heard. It will hurt even more if I orgasm. It's like the rays of the sun on your insides, they say, but I want it. I want it all, Todor. Don't hate me if I scream?\"\n\n\"No.\"\n\n\"Good. Now\u2014\"\n\nOnce again the lips of her heat touched the soft, oily head of his hungry cock, and though she was trying to go slow, her touch set him off and he punched up into her in a savage paroxysm, ripping into her as he felt her tear, impaling her on the hard rod of his meat just as the whistle shrieked again and the last house shot past and vanished into the roaring darkness. On the floor, Sarah whimpered, not understanding what was happening but wincing in sympathetic pain.\n\n\"Ahh! It hurts! It hurts!\" Marissa gasped, arching her back as she felt his cock sink into the darkness of her belly. \"Thank you, Todor! Thank you!\" \n\nHis eyes were wide as he watched her blood seep around the base of his member. He saw her stomach tremble with repressed pain as she instinctively bore down on his invading cock, some vampiric reflex trying to eject his living flesh from her body, but to no avail. He could tell from the wild twitching that he was hurting her, but her face was a mask of stubborn, rapturous pleasure and triumph, almost more than he could bear to look at. Beneath that pain there was a terrible incandescent pleasure, and Marissa was determined to have it\n\nHe tore his eyes away and over to the corner where Sarah sat on the floor, her knees up and her gown pulled high, her big tits crowded together as she shoved both hands down into her crotch, two fingers into her pussy and the other pressed and revolving against her clit. Her eyes were locked with lust and naked envy on the sight of Todor's big log disappearing into Marissa's tight ring of muscle, and he realized that Marissa was right: Sarah was nothing but a little fool, willing to throw away the terrible joy of human sex. There was nothing like this feeling. \n\nMarissa was fighting for control but it was a losing battle, and she couldn't hide the overwhelming pleasure she was feeling. She was too weak to hold him now, and all she could do was rest her forearms on his broad shoulders and tremble. The tight leather of her suit creaked as he began to fuck up into her, bringing the muscles of his thighs and belly into play, jarring her up off the seat as her breath hissed raggedly through her teeth.\n\nJust as Marissa's strength seemed to fade, Todor's returned. His head cleared and the languid heaviness that had crippled his arms and legs began to disappear. He felt himself swell with strength: the power of raw lust and sexual conquest. He looked into her face and saw her eyes, no longer commanding but beseeching him, begging him for something that went beyond mere blood or the curse of eternal life.\n\n\"Fuck me,\" she whispered. \"Do it to me, Todor! Take me!\"\n\nThat was all he needed. He grabbed hold of her ass, and with a burst of male strength he picked her up, lifting them both off the seat, holding her up with his hands on her bottom and his big cock stuffed inside, and Marissa clung to him, almost weightless in his hands, a soft and clinging thing within her leather armor. He turned them around and put her lengthwise on the seat, never losing contact with her, and plunged back into her, deep into the yielding softness of her body.\n\n\"Fuck her!\" Sarah snarled from the corner. \"Fuck her hard!\"\n\nMarissa groaned\u2014with pain or pleasure, he couldn't tell. He could feel the vampire fighting with the woman within, her dark instinct to fight him off battling with her urge to succumb to this sexual pleasure, a pleasure she'd never known. She reached for him as if to claw his face, but he grabbed her wrists and pushed them down, claiming her and taking control. Her passion made her weak. The touch of a human had made her weak, and he held her wrists easily. He lifted himself up from her, arching his back to thrust himself deeper into the hot clutch of her cunt. \n\nHe looked in her eyes, and Marissa looked back, and he saw it: the woman trapped in the vampire's body, trying to free herself, trying to reach him, pleading with him, like the eyes of a person underwater, trapped and drowning, clawing for the surface .\n\n\"Don't stop,\" she begged. \"Don't stop.\"\n\n\"I'm hurting you.\" \n\n\"No, no!\" she cried. \"I want it, Todor!. You're going to make me come. I want it!\"\n\n\"God, I don't know if I can!\"\"\n\nMarissa turned her face to Sarah. \"Get up, slut,\" she barked. \"Get the stake. The silver one. Give it to me. Hurry!\"\n\nSarah scrambled over to the other seat and to do her mistress's bidding. Todor held himself rigid above Marissa's trembling body as Sarah handed her the silver stake. Marissa took it in a gloved hand, turned it around, and pressed the point right under her left breast, over her heart. In the red light, he could see the point denting her soft, pale skin. She grabbed his hand and put it on the end of the metal rod and covered it with her own.\n\n\"Now do it,\" she hissed at Todor. \"Fuck me and make me come, and when I do, [I]do it![I]\"\n\n\"Marissa...\"\n\n\"The Magdeberg tunnel is just ahead. I can smell it. It will give me strength. Do it then, Todor! Make me come!\"\n\n\"I can't,\" he said. \"I can't.\"\n\nShe was gripping him inside, pulling on him, drawing on him like no living woman ever had, as if she needed him to live. He was close to losing it. Already he could feel the spasms in the big muscles of his legs and ass, his body getting ready to explode. Flames licked at him. Life insisted. Marissa reached around him, grabbed his ass in her gloved hand and pulled him into her, raising her knees, the heels of her boots digging into his flanks like a rider's spurs.\n\n\"Oh fuck!\" he cried.\n\nThe train roared into the blackness of the tunnel, whistle shrieking. The exit signs went out, flickered and went out, leaving nothing but a thundering darkness and furious cacophony of noise. He could see nothing and no eyes to see it with anyhow as he felt her grip him inside with greedy insistence, deep spasms in her pussy trying to milk the come from his stubborn cock. He felt her scream of orgasmic release\u2014felt it rather than heard it\u2014felt it on his face as all sound was drowned by the howling whistle and roaring of the iron wheels one the iron track. He felt her lithe body jerk up towards him as his own orgasm began\u2014deep, strong jets of living seed blasted into the darkness of her body as Marissa howled and clung to him. Her hand left his and he dropped the stake, overwhelmed by his own gushing release.\n\n\"Don't look at me! Don't look at me!\" she screamed, but he couldn't help it, and in the flashes of light from the sparking wheels he saw he in all her vampiric glory, her teeth extended into fangs, her eyes on fire, helpless and lost in her blazing orgasm \n\nHe reached beneath her and grabbed her and crushed her against him, holding her with all his strength as he continued to shoot his seed into her, more than he ever imagined he possessed. He shot it into her, into the fantastic creature, this dying vampire, and looked and saw her impaled on his spurting cock, her body arched in a rictus of paralyzing pleasure, her mouth open, teeth extended into the fangs of her kind.\n\n\"No!\" she cried, \"Don't, Todor!\"\n\nBut he didn't listen. With a strangled cry he grabbed her hair and turned his head to the side, then brought his exposed throat down on the twin spikes of her teeth He heard her sob and felt the hot gush of his blood spurt into her famished mouth, almost choking her in its bounty. She enclosed him fiercely in her arms and legs and began instinctively to drink, sobbing as his blood poured into her mouth, and Todor felt a pleasure like he'd never known: dark, black, and deeply orgasmic. And then the darkness enveloped him.\n\n~ ~ ~\n\nHe awoke as dawn was just streaking the sky. The ground racing past the window was covered in white sand and lonely grasses\u2014they were near the sea. He was asleep between clean sheets in the pull-down bed in his coach, Sarah asleep next to him, looking very young and pink and innocent. Marissa, fully dressed and wearing her wool cape, stood looking down at him. She looked well and strong and terribly beautiful, glowing with a kind of inner light she'd never had before. She held her finger to her lips to signal silence.\n\n\"Where are we?\" he asked. \"How did I get in bed.\"\n\n\"Coming in to Sur-le-Mar,\" she said. \"I put you into bed. You were very tired. Exhausted.\"\n\nHe sat up on one elbow and looked about. His neck was very sore and he felt rather weak. Marissa's strength was obviously back. More than that, she was smiling, a dark, secret smile that made her look even more beautiful.\n\nHe glanced over at Sarah. \"What shall I do with her.\"\n\n\"Send her back to her parents,\" Marissa said. \"She's only a silly child. I never touched her.\"\n\n\"And you? Will I see you again?\"\n\nShe sat down on the bed and ran her hand over his chest..\n\n\"Yes, Todor. Not now. Not in the daytime, not yet. But yes. I left you my address. Come see me tonight?\"\n\n\"Yes,\" he said. \"Yes.\" \n\nHe opened his mouth to say more but she put her fingers over his lips.\n\n\"You saved me, Todor. In more ways than you know. I'm alive again.\"\n\nShe stood up and opened the window and the compartment was filled with rushing air and the smell of cold sand and the sea, fresh and clean.\n\n\"And now, farewell. Tonight then.\"\n\nShe grabbed the sill and before he could speak she launched herself out the window and into the rushing dawn. Todor scrambled from the bed and stuck his head out, looking for her. He saw a winged shape, dark and formless like a piece of cloth in the wind, black against the gray of the sand. It kept close to the earth as the train rushed away, and then he lost sight of it altogether.\n\nHe stood at the window a long time, his heart filled with a strange longing, until the train began to slow and the outskirts of town showed bright in the rising sun.\n\nThe scene was beautiful, but the light hurt his eyes. He found Marissa's blue glasses on the sill where she'd left them, and he put them on.\n\nThat was better. "
    ],
    "authorname": "dr_mabeuse",
    "tags": [],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/vampires-on-a-train"
}
{
    "title": "\"Wonder Woman\" Takes it in the Ass",
    "pages": [
        "The Usual Disclaimer: This is a work of fantasy. All characters featured in sexual situations are over 18. The characters in these stories are fictional. Any resemblance to actual persons living, dead or undead is purely coincidental. Do not try this at home.\n\nI sat down and jotted the first scene I had in mind for this story, and immediately became concerned. It just felt too much like I was \"ripping off\" desurtdawg's marvelous story, My Sister Eva Started it All. I sent him an e-mail voicing my concerns, but did not hear back from him. I let the rest of the story take shape in my mind over the following day, and realized that the story I had in mind didn't really have anything else in common with his Literotica classic, other than that one scene.\n\nStill, I would be remiss if I did not recognize how his story inspired mine. I hope you are well, sir.\n\n* * * * * \n\nMy name is Robert, but I was always \"Bobby\" growing up. Our dad was \"Big Bob\" so I suppose it could have been a lot worse; I could have been \"Bob junior\" or \"Little Bob\" or something like that. Dad was an offensive lineman in high school and college, so the name fit. I've seen pictures of him from back then; he was an imposing figure. He's still tall and very strong, but he has slimmed down a lot since his playing days. Our mother is more than a foot shorter than me and Dad, but both of them keep in really great shape.\n\nMy older sister is named Karen, and we have always been fairly close. She is two years older than me, but she is rather petite like our mother is. I was taller than her once I reached junior high, and I was always protective of her. She never seemed to mind. Despite my taller stature, I have always looked up to my sister. She was always there to offer me advice if I asked, and she occasionally let me know when I was doing something particularly stupid without being mean about it.\n\nIt's not like we were a particularly \"touchy-feely\" family, but our parents gave us hugs pretty regularly, I was comfortable hugging my sister, and she enjoyed it when we sat on the couch and I reached over to scratch her back for her. I wasn't as keen to have her scratch my back\u2014I was too ticklish to enjoy it.\n\nWe grew up in a fairly small Midwestern town. Both of our parents worked, but they were home almost every evening. Our folks raised us to be respectful members of the community. We went to church every Sunday, I was a Boy Scout, I played football and baseball for our school, and I dated in high school. There was nothing about my life that really stood out\u2014at least to me. I considered my life completely normal...except for one little thing.\n\nI was obsessed with anal sex.\n\nI can trace the origin of my fixation easily enough. My senior year of high school our old computer died and I needed a new one for my school work. Karen was already away at college and both of our parents were busy at the time. During their weekly phone call, they mentioned the computer to my sister and she recommended the laptop she had purchased for her college classes. Karen sent them a link, and my mom made the purchase online. They had me pick up the laptop from the store the following evening.\n\nNo big deal, right? Except, for once, I had my computer before my parents could lay hands on it. Our old computer had draconic parental controls installed. They had installed those when I was twelve. There had never been porn in our house, and that had been the case for so long that it completely escaped my parents' attention that they had not bothered to put those same parental controls into place on my new laptop.\n\nI had porn!!\n\nHowever, I was so busy with school at the time that I didn't think about it for two weeks. I was dating a girl named Betty at the time, and we were in the middle of our football season. Betty and I got together and made out a few times, but never had enough time or privacy to actually have sex like we wanted to. She was gorgeous, with curly black hair and an incredibly stacked, petite body. I was lying in my bed late one night, idly stroking my hard dick and thinking about Betty's fantastic tits, when it suddenly hit me.\n\nI had porn!!\n\nI sat bolt upright in my bed and my body shook with excitement when I stealthily locked my bedroom door and opened my laptop computer on my desk. Sure enough, I had unfettered access to all the porn the internet had to offer. I jacked off seven times that night, watching a smorgasbord of varied sex acts.\n\nThat was the first time I saw anal sex. I'd never even thought about it before that night, honestly. After I watched that first clip, I stared at the screen with my mouth hanging open. I don't know why it turned me on so much, but it made me harder than I had ever been before. Naturally enough, that video had dozens more linked to it that featured sexy women taking hard cocks in their asses.\n\nI watched two straight hours of anal sex clips and jacked off three more times before I realized how long I had been at it. Then I shut down my laptop and retreated back to bed on shaking legs. I lay awake for another hour feeling like my head was spinning as a montage of butt-fucking clips played in my mind.\n\nIn the morning, I awoke with my usual morning erection, but I found myself thinking about sticking that hard dick into some woman's wet, welcoming asshole. At the time, it bothered me. I had enjoyed the pleasure of having sex with girls I dated in high school, and had never once even considered putting my dick in a girl's ass. The way I had been raised, it felt like there was something wrong about doing something like that; like it was just perverted and dirty.\n\nAfter that first night, I watched a lot more internet porn. I might go two or three days without looking at anal sex clips, but invariably found myself drawn back to watching more of them. Those always got me harder than anything else I watched, and got me off quicker as well. By the time Betty and I finally got to spend an afternoon together while my parents were still at work, I found myself staring at her sexy ass as she stripped in my bedroom.\n\nThe thing was, Betty had really nice, big tits\u2014especially for an 18-year-old high school girl. Up until I started watching all those anal sex clips, I had practically drooled at the thought of seeing, fondling, and sucking Betty's incredible tits. When I finally got to see them in all their naked glory, I really wanted to flip her back over onto her knees so I could feast my eyes on her asshole while I fucked her.\n\nThat didn't happen, and I really did enjoy sucking her hard nipples and squeezing her breasts while we fucked on my bed. Her wet, tight pussy felt sensational, and I came hard inside her after she told me it was okay. It was incredible, really. But...damn, I wanted to play with her ass.\n\nBetty and I hooked up another four times, and she was really very sexy. The thing was that I really wanted to do something with her sexy backside. Well, not necessarily her sexy backside. At that point I was contemplating the tight teenage butts of many girls in my school. I wanted to try anal sex with any woman who might be interested. That woman wouldn't be Betty. When I tried to broach the subject of anal sex with her, she looked really angry.\n\n\"I don't know what kind of dirty slut you think I am, Bobby, but there's no fucking way...\" she started.\n\nI held up both hands defensively and did my best to act like I wasn't actually interested in trying it.\n\n\"Whoa!\" I said. \"I just saw it on the internet for the first time, Betty. It wasn't something I ever even thought about. Seriously! It was just one of those things, you know? I saw it and it made me curious. Like, I wondered if girls liked that sort of thing.\"\n\nShe sneered, making it clear what her opinion was of women who \"liked that sort of thing.\" I was more careful for the remainder of high school and the following summer, but it was obvious to me that I was obsessing over women's sexy butts. I know I wasn't as careful as I thought I was. I have to wonder now how often I was caught staring at the sexy asses of every girl in our school, as well as some of the younger teachers, without ever realizing I had been caught.\n\nOnce I even caught myself staring at my own mother's shapely butt! That was when I really became concerned, but it wasn't like I had anyone I could talk to about my fixation. For three days after that happened, I refused to look at any internet porn. Then I was right back to watching anal sex clips and jacking off like mad. I just hoped I would eventually get over it.\n\n* * *\n\nMy sister came home for a month that summer. She had a part-time job near the campus, but the place basically shut down with all the students gone. Karen and I had always gotten along well growing up, but we weren't so close that I could discuss my sex life with her. I knew that she had dated since she'd started college, but she wasn't in a serious relationship. Twice, my parents had taken me along when they went up to visit her at school the previous year.\n\nI had applied to go to the same state college, and got my acceptance letter while Karen was home. She looked surprisingly happy about it. I had harbored some concern that she would resent me for following her to the same college, but she was all smiles and looked genuinely excited that I would be going to the same school.\n\nOur baseball season wrapped up the following weekend. We'd had a winning record, but failed to win our district so we did not advance to the state playoffs. In a small town like ours, it wasn't like athletic scholarship offers were pouring in for anyone. It was my grades that had secured a small scholarship that would pay for my dorm room and books. So, I wasn't some world-class athlete. What I failed to take into account was that I was in really good shape compared to a lot of the guys my sister and her friends knew.\n\nHell, that's not accurate. Next to those guys, I looked like a superhero. It took me a while to figure that out, though.\n\nI was just shy of six-foot-three, and a little over 200 pounds, but I was extremely \"ripped\" and \"buff\" following my senior year. It was just that most of my friends were also athletes and I didn't think I was that extraordinary because I was comparing myself to those guys. For example, there was a black guy named James who had huge tree trunks for legs. My legs were muscular, but not in that league. Likewise, my friends Chuck and Gordon spent hours on end hitting the weights in the gym\u2014far more time than I had, unfortunately. Their arm and chest muscles were absolutely huge and made them look like a wrestling tag-team.\n\nI knew I looked good, but I didn't think I was amazing. Still, I got my share of female attention and never questioned my good fortune. My sister had a couple of photos of me without a shirt on from our spring break. I didn't know she had even taken them. Those pictures had circulated among her friends, and those girls were far more impressed than I would have imagined.\n\nKaren was excited because she knew her friends would be.\n\nNow, I knew that my sister had an apartment near the campus and that she had a roommate named Sherry. I'd never met Sherry, but I overheard my sister talking about Sherry's boyfriend. It was clear that Sherry was in a serious relationship with this guy, and that my sister didn't like him much. My sister really did like her roommate, though. That was why she didn't like the guy Sherry was dating.\n\n\"She could do so much better,\" I heard my sister sigh into her phone. \"That guy is such a tool.\"\n\nI just shook my head at the time and kept walking past the couch where she was sitting. None of this would have mattered at all, but it became a factor at the end of that month. My sister needed to head back to her apartment because she had to get back to work two weeks before the campus re-opened for the fall, and I would be going with her.\n\nLike most major college campuses around the country, parking was an absolute nightmare. Karen had her own car, but she had brought it home and left it for me to use just three weeks into her freshman year.\n\n\"Honestly, Bobby,\" she reassured me at the time, \"You'll be doing me a favor. The car nearly got towed twice while I was in class, just because I parked in the wrong spot. Even at our apartment complex, I had trouble finding a parking place after I got off work. Everything is in walking distance anyway. I really don't need the car.\"\n\nThe next time we'd visited I had witnessed the parking nightmare firsthand. It was mind-boggling just how bad it was. So, when it was time for her to return to campus, my parents figured they should take both of us up there along with all of our stuff. We wouldn't want to be burdened with having a car while we were there. I know that sounds crazy, but it was true. Neither of us wanted to have to deal with having a car while we were in college.\n\nThe campus was like a ghost town when we arrived, and I would not even be able to move into the dorms until everything opened almost two weeks later. I worried that it would be an imposition, but Karen was happy to let me stay at her apartment until the dorms opened and I could get settled in there. I wound up crashing on her couch, and still did not meet her roommate that first night.\n\nMy sister pulled a face when she explained that Sherry had been staying with her boyfriend, Darren. She seemed apologetic that she couldn't offer to let me stay in Sherry's room, but I understood that would be an invasion of her roommate's privacy. I just smiled and rubbed her shoulders reassuringly.\n\n\"It's fine, Karen, really,\" I said. \"Honestly, I'm just happy to have a place to crash without having to stay in the hotel with Mom and Dad. Staying here with you makes me feel like a real grown-up, if that makes any sense.\"\n\nShe gave me a dazzling smile in reply. I've never lusted after my own sister, but she is one attractive woman. When she turned away I had to suppress a groan. My sister has got a gorgeous, heart-shaped ass, and she was wearing snug shorts...\n\nWhat the fuck is wrong with me?\n\n* * *\n\nThe next evening my sister brought up the costume party that would change my life forever. Sorry, that's \"cosplay party.\" My sister and her friends were into dressing up in these costumes. A lot of guys were into it as well, but it wasn't something I'd ever been interested in. When she asked me if I wanted to dress up in a costume and go to the party with her, I looked at her and shook my head.\n\n\"It's not even Halloween!\" I objected. \"Why would you have a costume party?\"\n\n\"That's just it,\" she countered, \"Why wait for Halloween and only have one party a year? We have one or two of these every month, and they're a blast! Seriously, Bobby, you need to go to this party.\"\n\nI shook my head again. I really didn't want to go, but it was obvious my sister really wanted me to.\n\n\"Where would I even get a costume?\" I asked. \"The party is this evening, right?\"\n\n\"Oh, there's a costume shop here in town. We can rent you something cool. You'll love it, Bobby!\"\n\nI think I would have objected and tried to talk my way out of going, but Karen showed me some of the costumes she had hanging in her closet. There were a lot of skimpy-looking outfits, with lace panels, plunging necklines, and high-cut bottoms. She had an assortment of stockings and garter belts hanging on the inside of her closet door, and I had to gulp repeatedly as I stared at those costumes and imagined some of her friends wearing them.\n\nI wasn't imagining my sister dressed like that, of course. No, really! I wasn't imagining my sister; it was two of her friends I had met on a previous campus visit that I envisioned wearing those lacy stockings.\n\nSo I let her talk me into it, and when our folks showed up with the minivan the four of us drove down to the costume shop. Karen was so bubbly and enthusiastic that I didn't want to dampen her mood, but I was embarrassed to have our parents along.\n\nWhen I saw the costumes they had for rent, I was even more dubious. There were very few in my size, and I could not have told you who 90% of those characters were supposed to be. I wound up getting a Captain America costume, but not a cool one. It was the dorky one from the movie, where Cap was selling war bonds. You know, the one with the bright blue mask that had white wings on the sides? I thought it looked stupid, but my sister looked me over and clapped.\n\n\"Perfect!\" she announced.\n\nI rolled my eyes briefly, but then gave her a weak smile. I love my sister and didn't want to ruin this for her by being a jerk.\n\nMy parents also got costumes, and that was when I realized there was no way this was going to be as cool as my sister thought. Dad was in a Zorro costume while my mother was in some medieval gown with a ridiculous amount of cleavage showing. I think she was supposed to be Marie Antoinette, but I'm not sure. What those costumes told me was that my parents would be going to this party with us, and that meant they would make sure I did not have a good time.\n\nIt's not like my parents are bad people, you understand. They have always been caring, loving and supportive. They also seemed to think I was a virgin and needed to stay that way. There was no way I would be able to meet college girls and have any chance with them while my parents were watching me. I tried to give them a smile and tell them they looked great\u2014and to be fair I thought their costumes were cooler than mine was\u2014but inside I was certain this evening would be a disaster for me.\n\nA little over an hour later we were at my sister's apartment when she got a phone call. It was her job, calling her in at the last minute because someone else had called in sick. I was relieved, thinking this would get us out of attending what I was thinking of as \"this dorky party.\" I was also relieved because my sister looked far too sexy in the skimpy, mostly transparent fairy princess costume she was wearing.\n\nMy sister had other ideas.\n\n\"I'll run you guys over to the party and make sure you get in before I change for work,\" she insisted.\n\n* * *\n\nThat was how it happened. I was at this party in a big house not far from my sister's apartment. There were some very attractive women there, and some of them were dressed in very sexy costumes. That just made it more embarrassing to be standing next to my parents and my sister before she left, and of course I felt like a dork in that rental costume. Three different gorgeous college girls came up and talked to me. Well, they tried to, but my Mom or Dad butted in before I could utter a word.\n\nOn the bright side, there was beer. My Dad actually joined me in grabbing a big plastic cup of beer there in the kitchen while my mother talked the ear off of some poor girl who had come up to me ten minutes earlier. I shot the girl an apologetic look, but felt like there was nothing I could do without coming off as extremely rude to my mother.\n\nAfter that, I just sipped beer and talked with my parents for fifteen minutes. It felt like the safe move; it would spare any other girls having to go through what that one...I think she was supposed to be some anime character? Maybe it was from a video game instead. Anyway, she looked relieved to make her escape when I drew my mother into a different conversation.\n\nAfter fifteen minutes and a second beer, though, I started looking around for a bathroom. I spied a fellow coming out of a room down the hall, and he had a disgusted look on his face. I stifled a chuckle, and was worried what sort of smell I would be walking into. I excused myself and walked over to that door, and took a big breath before opening it. I was still holding that breath when I stepped into the room and pulled the door closed behind me.\n\nInside, I froze before my hand reached the light switch.",
        "This wasn't a bathroom. It was a bedroom. And someone was here!\n\nThe room was dimly lit by a night light, and I recognized the boots and skirt of the Wonder Woman costume immediately. I thought that I had seen this girl earlier out in the living room but wasn't sure. None of that mattered at that moment, though. What mattered was that the skirt was pushed up over her back, completely exposing her naked, sexy ass!\n\nShe was moaning softly as she reached back and spread her ass cheeks, and my eyes were glued to the slick ring of her asshole as it opened slightly right in front of me. Her pussy was also spread open, but I couldn't take my eyes off of her asshole. It was obviously lubricated. I felt like I was in a dream or some kind of trance as I stepped forward and pulled my dick out of those costume pants. My body felt like it moved on its own, without any conscious control from me.\n\nI barely dared to breathe as I watched the throbbing head of my dick closing in on her asshole, and then it was pressing its way inside. In that instant, I spied the metallic gleam of a butt plug sitting on the bed to her right. It was coated with lube, and I just knew that this girl wanted to be fucked in the ass. I was impossibly turned on, and could not possibly have stopped myself.\n\nNow, if she had screamed or objected, I think I would have stopped immediately. Instead, though, she just seemed a little surprised.\n\n\"What...what are you doing?\" she groaned groggily.\n\nI licked my lips and stared as the tight rubbery ring of her asshole spread around the head of my cock. It looked so fucking hot! I still could scarcely believe this was really happening. It felt like this had been my ultimate fantasy for so long. It had cost me, that last semester of high school. At least two gorgeous girlfriends had dumped me when they suspected I wanted to fuck them in the ass.\n\nNow it was finally happening! My dick was sliding into a woman's sexy, tight asshole, and it felt absolutely incredible!\n\n\"Ohhh! Oh God, you're in my ass!\" she groaned.\n\nShe didn't stop me, though. Nor did she protest as I started slowly thrusting in and out. She just grunted with each thrust, and it was music to my ears. Here was a woman who knew how to take a cock in the ass! I knew there had to be such women in the world, of course. It had just been my misfortune to grow up in a small town where none of them lived.\n\nThen it only got better\u2014she moaned and pushed that sexy ass back toward me, forcing me balls-deep inside her. My eyes rolled up in my skull and I had to take a slow, careful breath. This was a woman who actually wanted my cock in her ass! The very idea almost made me come prematurely. I stared down at the tight globes of her perfect, sexy bottom and shook my head as I slowly pulled my slick cock back and prepared to push back in.\n\n\"Where have you been all my life?\" I murmured as I grabbed her tight cheeks and started to fuck her.\n\n\"Oh, yeah,\" she panted. \"That's so perfect. It's just what I needed tonight, baby. Oh! Oh yeah! Fuck, you're so hard!\"\n\nI grinned when I heard that last bit and savored fucking this college chick in her tight ass. She probably had a boyfriend, and thought I was that guy. I shook my head again as I watched my dick piston in and out of her horny asshole.\n\nWhoever that guy is, he is one lucky bastard\u2014getting to enjoy this perfect ass all the time, I thought.\n\nThen I realized her boyfriend was probably the guy I had seen walking out of the room minutes earlier, and that he might come looking for his girlfriend. That could not possibly end well if he found us like this. I picked up the pace and let myself go, pounding her sweet back door fast and deep. In just a couple of minutes I felt my orgasm rapidly approaching, but this dream girl actually beat me to the punch, so to speak.\n\n\"Oh God, I'm coming!\" she cried out.\n\nHer body shook and looked even sexier, and her asshole squeezed my shaft delightfully. It pushed me right over the edge.\n\n\"Me too,\" I gasped. I was as turned on as I had ever been when I added, \"I'm going to come in your ass!\"\n\nWe gasped and shook together as I unloaded deep inside her, and I leaned down to kiss her exposed shoulder and reached around to fill my hands with her tits. I got another shock when I did that\u2014her tits were huge! My hands were both completely full as I palmed her thick, hard nipples, and there was far more tit flesh than I could possibly hold overfilling both of my hands.\n\nI love big tits, and feeling hers made my dick lurch inside her. Hell, I was already coming like a fire hose inside her perfect ass but it felt like I got even harder!\n\nThen I felt a pang of regret. This would be a one-time thing. My perfect mystery woman was taken, and I had fucked her in the ass without even asking. I didn't even dare risk taking a peek at those magnificent breasts of hers for fear of being caught.\n\nWith that thought firmly in mind, I pulled my spent cock out of her and tucked it into my underpants before carefully pulling up my costume pants. I quickly checked to make sure I hadn't left some obvious sign that I had been having sex. I really doubted my sister or my parents would appreciate it any more than the people at the costume rental place would have. \"Wonder Woman\" slumped forward onto the bed with a happy-sounding moan, and I managed to scurry out of the room before she rolled over and saw me.\n\nI was still terribly paranoid as I made my way out of that bedroom. I eventually located the bathroom, but I had to wait several minutes before I got in and relieved my bladder. After washing my hands and carefully checking my reflection, I made my way out to the kitchen once again. The entire time, I was wondering over and over, Did anyone see me go into that bedroom?\n\nA sudden realization had me in a cold sweat: I was the only one wearing a Captain America costume, and my sister knew I was the guy wearing it. My sense of anonymity had been a complete delusion. If anyone tried to figure out who had taken advantage of the busty Wonder Woman in that darkened bedroom, it wouldn't take long for them to narrow it down to me. Images of me in that costume, standing in a police line-up immediately flashed through my mind.\n\nShit! I needed to get out of there!\n\nOnce I made that decision, I went looking for my parents. They were still in the living room, but I stopped dead in my tracks when I saw they were talking to Wonder Woman. Now that I could see her clearly in the well-lit room, I realized that the costume was rather conservative. The skirt was longer than I thought, coming down almost to her knees, so there was only a tiny gap of skin before those long boots took over. The top did a masterful job of concealing her massive breasts, now that it was pulled up properly, but it did display a creamy expanse of cleavage. The biggest difference between the costume and the movie version of Wonder Woman was the mask; it was a stylized Greek helmet that completely hid her face and it evidently had a wig built in to it.\n\nI had no idea what her actual hair color was. It was hidden beneath the thick black curls of the wig.\n\nMy eyes took all of that detail in an instant, and then I panicked and fled the house entirely. Halfway back to my sister's apartment, I finally calmed down and figured I needed to let my parents know where I was. After some thought, it seemed like a good, safe idea to send them a text. My phone was still at Karen's apartment, and I snagged it and texted as soon as I got there.\n\nAfter I had done that, I quickly stripped out of the costume and checked it carefully. I let out a huge sigh of relief when I saw that I hadn't gotten any cum stains on it. I hung it back on the hanger and then got dressed in shorts and a t-shirt. When my folks arrived two hours later, I was chilling on my sister's couch watching television.\n\n* * *\n\n\"You could have at least tried to enjoy the party,\" my father grumped as soon as he was in the front door.\n\n\"Oh, no, Dad, it wasn't like that at all,\" I replied, shaking my head and giving them what I hoped was a rueful smile. \"I just...I should have gone to the bathroom before we left. I really had to go, and someone was in the bathroom there. I just couldn't wait any longer, if you know what I mean.\"\n\nI'd had time to come up with that lie while I waited for their return. They chuckled and shook their heads, but they bought my story. They took turns in the bathroom getting changed, and then we watched television together for the next hour or so until my sister returned from work.\n\nMy parents had stuck around so that they could hug her and say goodbye before they hit the road. Karen and I stood out front and waved as they drove away, and then headed back inside. As soon as we closed the door behind us, my sister fixed me with a penetrating look.\n\n\"So, how was the party, really?\" she asked.\n\n\"It was fine, really,\" I replied. \"I would have enjoyed it a lot more if Mom and Dad hadn't been there, though.\"\n\nKaren snickered. Then she pulled out her cell phone and I could see a series of text messages.\n\n\"I knew you'd be popular with my friends,\" she said with a grin. \"By the time I finished my shift and checked my phone, I had eight different girls all begging me to give them your number.\"\n\nI cocked my head and looked at her in disbelief. I really thought she was messing with me, and could not figure out why she would do such a thing. Then my eyes drifted down to the phone in her hand and I read, \"OMG!! You weren't kidding! You have to set me up!\" After that was an emoji I didn't recognize. I only got a glimpse, and then the phone rang and she pulled it back around to look at it.\n\nI smiled when I heard the ring tone. It was from the intro to Depeche Mode's Sea of Sin--one of my favorite songs of all time, and one not too many people were familiar with. It was from the B-side of the extended version of their hit single World in My Eyes, but even that song wasn't one most Americans would know. At least, nobody our age.\n\n\"It's Sherry,\" my sister explained before answering the phone.\n\nMy eyebrows rose at that revelation, and Karen grinned and nodded at my reaction. The phone call was brief, and my sister sighed as she hung up.\n\n\"Sherry's coming home tonight,\" she said. \"It's such a shame she's dating Darren. You two would be perfect together.\"\n\nI laughed softly and shook my head again.\n\n\"I'm not even here a week and you're already pimping me out to your friends,\" I accused playfully.\n\nNot that I would mind, of course. The handful of her friends I had met had been very attractive. She laughed a little harder than I had. For just a moment, she looked like she was going to say something, but then she changed her mind and licked her lips as she gazed thoughtfully at the wall. Before she could figure out what she wanted to say, we heard the key in the front door and we both turned to face the door.\n\nI damned near fell back into the couch when Sherry walked in the front door. She was wearing a long trench coat, but it was open in front and revealed the Wonder Woman costume she had worn to the party. She held the helmet under her left arm, and her smile took my breath away. She was blonde, with slightly lighter hair than my sister's. My sister bit her lip when she saw my face, and then she shook her head and turned back to her roommate.\n\n\"Sherry, this is my brother, Bobby,\" she said. \"Maybe you two already met at the party this evening?\"\n\nOnce again, I felt like I was in a trance as I walked up to Sherry and held out my hand. We shook hands slowly as she looked up at me.\n\n\"I don't think we were introduced,\" she said.\n\n\"I think I saw you talking with our parents as I was leaving,\" I managed to say.\n\nMy voice sounded far calmer than I felt in that moment. As soon as I said it, though, I realized I had messed up. Admitting I had seen her then meant that I had still been there when she had surrendered her asshole to a guy she had never even met. My parents had been under the impression I had left some time earlier.\n\nSherry smiled and released my hand. \"Sorry, but I need to change out of this costume and shower.\"\n\nAs soon as her bedroom door closed behind her, my sister looked thoughtful again, but she wasn't looking at me. She was looking at Sherry's bedroom door after it closed and she seemed preoccupied. I was just grateful she wasn't looking at me. I can't imagine what my expression was in that moment, but I can tell you what I was thinking.\n\nHoly fucking hell! I just met my dream girl and fucked her in the ass\u2014and she's my sister's roommate!!\n\nI plopped my butt down on the couch once again, and turned on the television. I have no idea what was on. My eyes were on the television screen, but my focus was on the conversation my sister and her roommate were having behind me. They were keeping their voices down, but I had no problem hearing every word clearly.\n\nSherry let out a surprised gasp when she went from her bedroom to the bathroom and saw the costumes hanging up in there.\n\n\"Oh! Bobby was Captain America?\" she blurted.\n\n\"Mmm-hmm,\" my sister replied.\n\n\"Shit! You weren't kidding,\" Sherry said softly.\n\n\"If you ever get tired of Darren...\" my sister started.\n\n\"Not after tonight,\" Sherry replied dreamily. \"He finally gave me what I wanted, thanks to that Wonder Woman costume.\"\n\n\"Really?\" my sister gasped. \"I thought that was never going to happen.\"\n\n\"I was completely surprised when it happened,\" Sherry whispered. \"But, oh God, it was absolutely perfect.\"\n\nI stared dully at the screen in front of me, stunned. Then I had to wonder if I was mistaken; maybe they were talking about something else? I didn't dare look in their direction. Once again I was certain my expression would give me away. I damned near jumped up out of my seat when my sister plopped down next to me on the couch.\n\n\"Mind if I check the weather?\" she asked, reaching for the remote.\n\n\"Go right ahead,\" I replied automatically.\n\nShe looked at me after she had changed the channel, and I hesitated before meeting her gaze.\n\n\"Looks like it will be a nice day tomorrow,\" I said, echoing the statement of the woman on screen.\n\nKaren nodded, looking from my face to the television and back. She looked like she wanted to ask me something, but thought better of it. After a couple of minutes she changed the channel again. It took me a while to figure out that it was a movie we both liked since I was so preoccupied with my thoughts. I was trying to figure out what Sherry had actually been talking about.\n\nMy anal-sex-obsessed mind had automatically wanted to think she was talking about when I had fucked her in the ass in that dark bedroom, but that just seemed too unlikely to be true. The problem was, I couldn't think of anything else that made sense. I figured it had to be something I just didn't know about Sherry and Darren's relationship\u2014something my sister was aware of, from her comments.\n\nMaybe he had proposed, or given her a ring or something? My heart sank when I pictured that scene, knowing how incredible Sherry was. Immediately my mind replayed that unforgettable moment of my cock pressing into her tight little welcoming asshole, and I knew that was never going to happen again. By the time I cleared all those thoughts from my mind, Sherry had finished her shower and gone back into her bedroom.\n\nI blew out a long, slow breath and focused on the movie. Right at that moment one of our favorite scenes played out on the screen, and I joined my sister in a heartfelt laugh. We looked at each other and shared a smile before turning back to the television. In that moment I felt like I was going to be alright, and that my life would be better now that I was here with my sister.\n\nThen Sherry plopped down on the other side of me and I had to struggle not to stare at her. She was wearing a white undershirt without a bra, and her huge tits were impossible to ignore. I glanced at my sister, but she seemed oblivious to the show her roommate was giving me. I realized then that my sister wasn't wearing a bra either, and her perky nips were just as obvious through her snug red tank top.\n\nI had seen her wearing that tank top before, at home. This was the first time I'd seen her wear it without the obvious bra showing through. It was surprising how large and firm her breasts actually were. I guess I'd always assumed her bras made them look bigger and firmer than they were, but I think the opposite was true. Her bras had squashed her breasts, rather than showing them off. I realized they probably dressed like this all the time when it was warm, and then I felt a pang of guilt for checking out my sister's tits.\n\nJust a few minutes later, Sherry's phone rang on the kitchen counter and she gave me one hell of a show as she popped up from the couch and bound over to grab it. Not only were her huge tits bouncing like crazy as she moved, but her shirt rode up and displayed her perfect bottom encased in tight, soft shorts as she leaned over to pick up her phone.\n\n\"Hey, Darren,\" she gushed. \"Thank you so much, baby. That was exactly what I needed tonight.\"\n\nI couldn't help but stare at the way she wiggled her bottom when she talked to him, and then I was surprised that we could hear his voice so clearly when he replied. Darren's voice immediately set my teeth on edge. A glance to my left showed it wasn't just me; my sister grimaced when she heard him.\n\n\"Well, I'm glad you could hang out with your friends and have a good time after I had to leave,\" he replied. His tone made it sound like he wasn't glad at all. This guy sounded like a condescending prick.\n\nSherry turned, and I watched the loving, happy smile melt from her face. I felt bad for her.\n\n\"That wasn't what I was talking about...\" she started, but Darren cut her off.\n\n\"Oh, and you really need to get rid of that tacky costume,\" he huffed. \"Honestly, it was embarrassing to see you flouncing around like that. I'm just glad my parents didn't see you dressed like that.\"\n\n\"But...but you...\" Sherry mumbled, clearly hurt and at a loss for words.\n\n\"I'm going to sleep now,\" Darren continued, and we could hear him stretch and yawn. \"I have an important meeting in the morning, and I'll be driving back to my parents' house after that. I'll call you when I get there.\"\n\n\"O-okay,\" Sherry muttered. \"Sweet dreams.\"\n\nDarren hung up with an audible click. Sherry stared at her phone for a long moment before setting it on the counter and wandering back over to the couch to sit next to me again.\n\nOnce again, I could not help myself. I reached over and started rubbing her back and shoulder the way I would have if she was my sister. Sherry looked hurt and I wanted to comfort her. I also wanted to punch her boyfriend in the nose at that moment, but I wouldn't have actually done it. Probably.\n\n\"Are you okay?\" I asked softly.\n\nShe licked her lips and swallowed before looking up at my face and giving me a weak smile. Even though I was doing my absolute best not to stare, I saw her nipples harden as she looked into my eyes.\n\n\"Yeah, I'm fine,\" she replied. She didn't sound fine, though.\n\nThen she glanced down and saw how hard her nipples were. She leaned forward quickly to hide them by pressing her breasts against the tops of her thighs, and she sighed again before turning her head to look at my face. I was still scratching her back lightly, but wasn't sure I was free to touch her like that until she spoke.\n\n\"That feels nice,\" she murmured. \"Please keep going.\"\n\n\"Me too!\" my sister said with a chuckle, drawing my gaze in her direction.\n\nI smiled at her and reached over with my left hand to rub and lightly scratch her back as I did the same to Sherry on my right. They sighed happily and often as I worked them over and we watched the movie. We laughed together at all the funny scenes, even though we had all seen the movie several times. I probably spent a little over an hour scratching their backs and lightly massaging the muscles around their shoulders and upper backs. The way they were both leaning forward while I did it hid their breasts from my view, but I could tell that they both wore thongs beneath their soft shorts.",
        "It was already pretty late when we started, so I wasn't surprised that they were both ready for bed after the movie ended. What did surprise me was the way my sister pulled me to my feet and gave me a tight hug, holding my body against hers for a long moment.\n\nThen she shocked me by kissing me softly on the lips\u2014we had never kissed like that before.\n\n\"Thanks, Bobby,\" she murmured afterward. \"That was really nice. Sweet dreams.\"\n\n\"Sweet dreams, Karen,\" I replied. I didn't know what else to say.\n\nMy sister slipped from me and her left hand turned me to face Sherry as she stood up from the couch. Then Sherry was in my arms, looking surprised as we hugged for the first time. I was equally surprised, and I was embarrassed to realize I was hard and she had to be able to feel it. I pulled my hips back self-consciously, but that put my face closer to hers and then we were kissing.\n\nNo tongues or anything, but it was nice to feel her soft lips against mine. We both murmured a soft \"sorry\" after we broke off the kiss, and then we shared a guilty smile. I felt like I needed to say something to her, but I could have chosen my words better.\n\n\"I thought you looked amazing in that costume,\" I blurted.\n\nAs soon as I said it, I felt my face get hot with embarrassment, but she just laughed softly and kissed me again.\n\n\"Thanks,\" she replied. She chuckled and added, \"Maybe I should wear it for you.\"\n\nI was too tongue-tied to reply, but my sister stepped in at that point and saved me from embarrassing myself further. She cleared her throat and we both looked over at her.\n\n\"Sherry, mind if I talk to you for a minute?\" she asked.\n\n\"Sure!\" Sherry replied with a smile.\n\nThey walked around the couch and into my sister's room, and Karen turned to grace me with another smile.\n\n\"Good night, Bobby,\" she said.\n\n\"Good night,\" I replied, but they had already pushed the door closed.\n\nWell, most of the way closed. I sat down and shook my head, and tried to figure out what to do. I was far too keyed up to fall asleep, and a glance down at my lap made me groan. Jesus, I was pitching a tent in those shorts! I wondered how they could have missed it, but what I should have realized was that they hadn't. It was me who had missed it when they had seen my dick bulging out the front of my shorts obscenely halfway through the movie.\n\nI pushed my dick down the left leg of my shorts and started flipping through channels. I didn't feel like watching television, really, but I figured I would see what was on. I turned the volume all the way down so I didn't have to listen to the commercials as I flipped through channel after channel. Then I stopped and turned my head, straining to hear their conversation after I caught one little bit.\n\n\"I thought you said he gave you what you wanted?\" my sister asked.\n\n\"I thought so too!\" Sherry replied. \"I'm so confused right now.\"\n\n\"Wait,\" my sister said, so softly I could barely hear her, \"We are talking about the same thing, right?\"\n\n\"Yes. I did exactly what you said. I wasn't wearing panties, and I had lubed up ahead of time. I had that butt plug you gave me...\"\n\nMy eyes shot open at that revelation, and I swallowed heavily, so I missed the rest of what Sherry said. What had my mind reeling was that my sister even owned a butt plug. For a fleeting moment my mind insisted on going there\u2014picturing my sister with a horny expression as she reached back to insert that slick metal plug into her shapely ass. I shook my head, feeling guilty for even thinking such a thing. It took another minute for me to manage to hear my sister gasp.\n\n\"Jesus! You know what? I think it wasn't Darren! I think someone else came in there, found you like that, and just\u2014\"\n\n\"Oh God no!\" Sherry groaned. I could easily picture her clapping her hands over her mouth in horror. \"That's so fucked up! Don't even say that, Karen!\"\n\n\"Well, you've got to admit; it makes more sense than Darren leaving and then coming back to take you like that. Jesus, that's hot. I wonder who it could have been?\"\n\n\"Oh, dear God, do you think it was Mark?\"\n\n\"No. He wasn't there, remember? He and Allison had that thing at her parents' house.\"\n\nI heard Sherry blow out a relieved breath, and then they quietly discussed several other guys they knew. Some of them had been at the party, but they tentatively ruled out most of them over the next fifteen minutes. When I heard my sister suck in a sharp breath, I had a sinking feeling in my stomach. Somehow I just knew she had figured out that it was me.\n\nI know, it's immature as all hell, but I turned off the television and quickly spread the blanket over my body. I wanted to act like I was asleep in case they came charging out to confront me. I don't know why, but it felt like I would seem more innocent if I were somehow sleeping when they figured it out. I closed my eyes and tried to breathe slowly and evenly.\n\nAfter that, I could feel how tight the muscles in my shoulders and neck were and made an effort to relax them. If it looked like I was flexing in my sleep, they weren't going to buy it. Once I managed to relax my shoulders, several other muscle groups in my neck, back, and legs gradually uncoiled and let me breathe easier. I thought I heard soft footsteps approaching, and hoped they would buy my act.\n\nI managed not to flinch when I felt warm breath on my cheek. My sister gave me a soft peck on the cheek, and whispered, \"Sweet dreams, Bobby.\" Then she padded away, and I heard her door close. After that, I heard their soft voices continuing their conversation for several more minutes but I could no longer make out their words.\n\n* * *\n\nIt shocked me that I had fallen asleep, but I had done such a great job of systematically relaxing all my muscles that I had drifted off. When I woke up in the morning, there was already bright sunshine streaming into the room. After a minute of my eyes fluttering open and taking in my surroundings, I sat bolt upright on the couch and looked around in alarm.\n\nBoth bedroom doors were closed. I glanced down at my arms, like I was looking for stab wounds, and I recall thinking, Well, at least they didn't kill me in my sleep. As I reviewed last night's events in my mind, I wasn't entirely sure that was a good thing. Maybe I would have been better off if they'd killed me in my sleep.\n\nI had a horrible sense of foreboding, like I was doomed to pay a heavy price for what I had done.\n\nMy sister had figured it out. I was certain of it. What I didn't know now was whether she had told Sherry or not. I figured she had to be mad at me for taking advantage of her roommate and friend that way. As I worked through it in my mind, though, I realized it could have been a lot worse. If Karen had revealed to Sherry what I had done, and she'd been outraged enough to call the police, I would not have gotten the chance to sleep through the night. I would already be in jail.\n\nI figured I was at least a little ahead in the ballgame, so to speak, as I made my way into the bathroom to start my morning routine. I was still brushing my teeth when Sherry came stumbling in. It was evident she'd sweated slightly in her sleep from the way that white undershirt was plastered to her massive tits. I could see her nipples and areoles clearly, and she immediately noticed me staring.\n\n\"Oh!\" she breathed, covering her breasts with her left forearm. \"I totally forgot you were here. Mind if I use the bathroom real quick?\"\n\nI spat out my toothpaste and quickly rinsed out my mouth. \"No problem,\" I replied.\n\nWe both shivered as I tried to sidestep past her. My \"morning wood\" had brushed right across her pubic mound. I closed the bathroom door as soon as I stepped out, and I retreated to the couch so I could cover my obvious boner with the blanket. After a dozen seconds of slow breathing I knew I wasn't going soft anytime soon. I just couldn't stop picturing Sherry's incredible body.\n\nI figured it would be a smart idea to put on some snug underpants beneath my shorts, and maybe to find some heavier shorts that would do a better job of concealing the blatant erections I kept getting around Sherry\u2014and my sister! I reminded myself. I got up and shook my head as I pulled my overnight bag onto the couch and selected cargo shorts, boxer-briefs and a fresh t-shirt. I had already put on deodorant before I brushed my teeth, so I figured I could go ahead and change my t-shirt.\n\nNaturally, Sherry emerged from the bathroom just after I had whipped off the shirt I had slept in. I heard her gasp, \"Oh!\" and looked over to see her feasting her eyes on me. All I had on were those thin, gray workout shorts, and they did nothing to hide my completely hard dick. I contained a groan, but realized it wasn't my crotch that held her attention at that moment; she was looking up and down my chest and abdomen and practically panting. Her eyes widened even further when she finally noticed the tent in the front of my shorts.\n\nI watched her breasts heave with arousal, and that only made me harder. Her nipples were completely hard and pushed out more than half an inch against the tightly-clinging fabric of her white undershirt. I was a little embarrassed to be caught this scantily clad and with such an obvious boner, but I couldn't take my eyes off of Sherry or think clearly enough to put that shirt on.\n\nWe stood and stared at each other for several seconds until our eyes met, and then we both blushed and smiled. I finally managed to pull my t-shirt on over my head, and Sherry turned and let out a soft gasp when she noticed how obvious her nipples were. She covered her chest again and scampered into her bedroom. As soon as I had pushed my head through the neck opening of my shirt, my eyes automatically settled on the tight globes of Sherry's ass.\n\nThey were only partially covered by her undershirt, and she was wearing that tiny pink thong I had caught glimpses of the night before. Only now she was no longer wearing shorts over it. That tiny wisp of cloth disappeared between her shapely cheeks, and it gave me an amazing view.\n\nI was mortified to hear the lusty groan that came out of my throat, but I couldn't help it. Damn, her ass looked incredible! Sherry turned her head and looked over her shoulder at me, and she saw where I was looking. She also couldn't miss the way my hard dick lurched up in my shorts. I watched her shiver as she swallowed heavily, and she hesitated a long moment before she reached over and pushed her bedroom door closed behind her.\n\nI was shaking as I made my way back into the bathroom. I pulled that t-shirt off again and washed my face in the sink, splashing cold water over my face three times to try to calm down. After I dried my face and changed into the boxer-briefs, t-shirt and cargo shorts, I was relieved to see that my dick was far less obvious. Just as I prepared to leave, there was a soft tapping at the door.\n\nI opened the door and gave my sister a grin as I slid past her and let her in. I returned to the couch and put away my overnight bag, and then I put the shorts and shirt I had worn to sleep in into a plastic shopping bag along with my other dirty clothes. After clearing that stuff out of the way, I folded up the blanket I had been using and laid it across the back of the couch before sitting down and turning on the television.\n\nThe kitchen was just past Sherry's bedroom door. When I walked out there to look for something to eat, I couldn't help but stop just outside her door. She was moaning, and that was what initially drew my attention. I swallowed hard when I heard rapid, rhythmic, wet sounds accompanying those moans. I couldn't help but picture her pushing her fingers in and out of her wet pussy and squeezing her hard nipples. I wanted so badly to push open that bedroom door and walk in there!\n\nInstead, I forced myself to keep walking into the kitchen, and I blew out a big, long breath as I opened the refrigerator. A soft intake of breath behind me drew my attention back toward Sherry's bedroom door. This time it was my sister who had stopped when she heard the obvious sounds of her roommate masturbating. I grinned at her and she shook her head.\n\nKaren blushed slightly and bit her lip, and I was surprised to see her nipples were hard and protruding noticeably through her tank top. I only glanced there for a second, but I'm pretty sure she noticed. I did my best to play it off by turning back to the fridge and pulling out the milk. When I stood upright and closed the refrigerator door, I was surprised to feel my sister hug me from behind. I could distinctly feel the hard points of her nipples against my back.\n\n\"I'm so glad you're here,\" she murmured into my shoulder blade.\n\nI looked over my shoulder at her and grinned. \"Thanks for having me,\" I replied.\n\nShe sighed and released me, and we sat down at the little round dining room table to have breakfast together. Sherry was still flushed when she joined us a few minutes later, but we just smiled and acted like we hadn't heard her moaning and getting herself off in there. It helped that she had changed into a longer, thicker and darker t-shirt. Well, it helped me anyway. I managed not to stare at her tits while we ate our cereal and then cleaned up afterward.\n\nOf course, what gave me the most relief was the way my sister was smiling happily at me. I was still pretty sure she had figured out what had really happened at the cosplay party, but she wasn't upset with me. If anything, she seemed happy. That didn't add up in my mind, but I wasn't about to question my good fortune. I was just enormously relieved that the two of them hadn't confronted me angrily about the incident.\n\n* * *\n\nAfter breakfast, I excused myself to go out for a jog. It was something I was used to doing every day, and I felt like the girls wanted some privacy to talk. I wound up going much further than I had planned. I jogged onto the campus and found my way to one of the tracks around a training field. There were four other students running laps, but we were pretty well spaced out and I really didn't try to engage any of them. I just ran and thought.\n\nAs soon as I had gotten up to speed, about a block from my sister's apartment, my erection had finally subsided enough for me to think straight again. I managed not to get hard as I thought about that party again. This time, I was focused more on the rest of the people at the party. There had been about thirty women there and seventeen or eighteen guys. It bothered me now that so many of those college girls had been watching me closely, because I was pretty sure at least one of them had to have seen me go into that bedroom where Sherry was waiting for me.\n\nWell, that wasn't entirely accurate\u2014she hadn't been waiting for me\u2014but it was how I thought of it.\n\nThe more I went over it in my mind, though, the more I was certain nobody was looking in my direction when I came out of that bedroom. I had been so fucking paranoid, looking all around, that I would have noticed anyone looking my way. So, I had probably gotten away with it. Except... \n\nI frowned as I thought about my sister's words from last night. I was still pretty sure she knew what I had done. The way she had hugged me at breakfast, and smiled at me while we ate, made it pretty clear she wasn't mad at me. I shook my head as I thought about her happy face at the breakfast table. I really didn't know what to make of that. Was she happy that I had fucked her friend in the ass? That just seemed too ludicrous for me to believe it.\n\nThen I thought about Sherry's boyfriend, Darren. I hadn't met the guy, but thought I had gotten a glimpse of him leaving that bedroom. Just from hearing him talk on the phone I already didn't like him. Maybe that was just my sister's opinion influencing my own. I knew she couldn't stand the guy.\n\nWhen I tried to picture him from that brief moment at the party, I couldn't really recall any significant details. If he jogged right up next to me on that track, I wouldn't have known it was him. He'd been wearing some kind of hat and a loose, flowing costume. It might have been a robe or cloak, or perhaps at that angle it was a cape. All I could recall clearly was that look of disgust on his face. My eyes shot open when I realized what must have happened.\n\nSherry had presented her boyfriend with her sexy, lubricated asshole, and he had marched right out of the room in disgust. I stumbled a bit and had to take a moment to regain my stride. I looked around but nobody had been watching me. Then I shook my head again as I analyzed that scene again and again. It made perfect sense, but I struggled to accept Darren's reaction. Mine would have been the exact opposite, of course. If sweet, sexy Sherry had been offering me her ass like that...I had to stifle that thought so I wouldn't immediately have a full-blown erection.\n\nIt's really difficult to jog like that.\n\nMy sister's words ran through my mind again, and I knew she had said, \"You two would be perfect for each other,\" or something close to that, several times. Putting aside the undeniable physical attraction I felt for Sherry, I knew that I really liked her already. It had felt like the most natural thing in the world when I had hugged her to me the night before, and she had been the one to kiss me that second time. I reminded myself that was still technically \"physical attraction\" when I had touched her, when we hugged, and when we kissed.\n\nI smiled then as I recalled laughing along with her and Karen while we watched the movie. Our conversation at breakfast had been just as fun. Sherry seemed like someone I would really enjoy spending time with, even if we weren't having sex. Then I shivered as I recalled the way she had looked at me. It would be tough to spend time around her and not have sex...\n\nThere was a couple who had been jogging around the track a little slower and talking. I had passed them three times, and I noticed that they were leaving. A quick glance around me showed that there was only one other guy still puffing along on the other side of the track, and I looked down at my watch. Wow. I'd been jogging along at a pretty good clip for more than half an hour already. I slowed my pace to an easy, loping jog for my \"cool-down lap,\" but as soon as I did that I heard the unmistakable sounds of weights being lifted and set onto metal supports.\n\nMy ears pricked up at that familiar sound.\n\nI turned and headed in the direction of the sound, and found a small gym that was open just across the street from the practice field. There were only a handful of guys in there working out, and three of them were athletes I recognized. They were in amazing shape, and played for the school's football team. Those guys were surprisingly nice, and welcomed me to join them. I spent the next hour lifting weights and talking with them. It felt like I was making friends, and I managed to forget my concerns about my sister and her roommate.\n\n* * *\n\nWhen I returned to the apartment, I was drenched with sweat. I hadn't tried to push more weight than I could handle\u2014hadn't tried to show off in front of guys who were in such obvious great shape\u2014but I had gotten a really intense workout. They had pushed me to work a little harder and put in more reps than I would have otherwise. Of course, just having a spotter allowed me to push a lot more weight.\n\nI blew out a big breath when I walked in the door of the apartment, feeling the cool air inside blowing over me. Out of habit, I pulled my sweat-soaked t-shirt over my head and headed toward the bathroom. Out of the corner of my eye I caught the bulging eyes of Karen and Sherry as they stared at me open-mouthed. It was a nice little ego boost, but I had my heart set on a shower.\n\nThere's just something magical about a hot shower after a good workout. It feels like you are being cleansed in spirit as well as body. The hot water felt like it was sinking into my aching muscles, soothing them to the core as I lathered up and scrubbed myself. Of course, I hadn't bothered to bring clean clothes into the bathroom with me, so I emerged from the bathroom just wrapped in that bath towel.",
        "It wasn't a particularly big bath towel. This time I couldn't help but notice the way Sherry and my sister stared at me. They were practically panting and drooling! It really made me feel awesome, but I also felt like I needed to say something so they wouldn't think I was just parading around in a towel to tease them.\n\n\"I managed to find a gym on campus that was open,\" I said, giving them a smile. \"Those guys were really cool, letting me work out with them.\"\n\n\"Uh-huh,\" my sister said absently, nodding her head. Her eyes never left my midsection.\n\nI tried to act nonchalant as I once again opened my overnight bag on the couch and pulled out clean underpants, jogging shorts, and a tank top. I avoided looking over at the two women while I selected my clothes, and thought of a \"safe\" question to ask them. It was easy when I realized I had no idea what we would be doing for the rest of the day. I finally turned, giving them a grin.\n\n\"Did you two have plans this afternoon?\" I asked.\n\nDamn, they were still staring at me! It was more than a little off-putting to see my sister looking at me like that. She looked like she wanted to eat me up. I guess it should have bothered me that Sherry was looking at me the same way. After all, she had a steady boyfriend.\n\nAt that moment, though, I just didn't care. I felt really good after that workout and shower. I had also felt like I fit in with guys who were going to be professional, world-class athletes. Plus, let's face it; those were two very attractive women admiring my body. It made me feel awesome, even if one of them was my sister.\n\n\"Umm...\" Karen finally managed, \"Oh, yeah, I guess we should do some shopping today. We need to get some groceries.\"\n\nI nodded. The grocery store was diagonally across the street from the apartment complex, and I had passed it on my way to the campus.\n\n\"Cool,\" I said, pulling that tank top over my head. I thought for a second and stopped before I headed back into the bathroom to finish getting dressed. \"Oh! You had mentioned some of your friends wanting you to set them up with me. Should I call one of them today?\" Sherry and Karen exchanged a look, and didn't immediately answer. \"Is there one of them in particular that you think I should date?\" I added.\n\nThey exchanged another long look, and Sherry got a slightly pained expression. \"I told you, I can't just dump Darren,\" she said weakly.\n\n\"Oh,\" my sister replied. Then she gave Sherry a grin. \"I guess I should set him up with Patty, then.\"\n\nThe way Sherry's eyes shot open and she shook her head made me think Patty wasn't her favorite person. Then she narrowed her eyes, and I knew my sister was messing with her. I continued toward the bathroom.\n\n\"Just let me know,\" I said.\n\n* * *\n\nThey didn't mention Patty again\u2014or any of their other friends, for that matter\u2014as we went shopping together for the first time. One thing that really stuck out to me was the way Sherry looked at me when I snagged a can of ripe black olives. She looked like she wanted to kiss me on the spot. Karen noticed and laughed.\n\n\"I told you,\" she chuckled, \"You two are perfect for each other.\"\n\nLater, I noticed a display of Nair products and turned to ask Karen, \"Do we need to get any Veet?\"\n\n\"Oh, yeah,\" she replied, nodding. \"If I'm not out, I'm close.\"\n\nWe might not discuss our sex life, but I knew my sister shared my preference for keeping her pubic area smooth. In high school we had both used the stuff. Sherry's mouth fell open slightly and she let out a brief, involuntary moan. Afterward she muttered, \"Sorry,\" and we moved along, but it was clear the idea turned her on.\n\nI was certain Darren didn't bother to \"manscape\" for her.\n\nI gave my sister cash to cover my share of the groceries when we reached the check-out counter. Then I carried most of the bags and led the way back to the apartment. The girls were a little too quiet, so I looked back and saw both of them staring at my butt!\n\n\"Ahem!\" I cleared my throat, and they looked up guiltily. I gave them a mocking, offended look. \"That's so unfair! When we get into the apartment, I think I should get to stare at Sherry's ass for at least five minutes!\"\n\nMy sister burst out laughing, but Sherry damned near tripped and fell. She looked from me to my sister, and then laughed weakly. Her stiff nipples let me know the idea turned her on.\n\nI helped put away the food, and then we shared a light lunch. I finished before they did and rinsed my dishes before returning to the couch. I turned on the television but kept the volume low while they whispered and finished their food. When they came over to join me, Karen surprised me again by sliding into my lap and draping her right arm around my neck. I looked up at her face questioningly, and she responded with a subtle nod of her head in Sherry's direction.\n\nAh. So she wanted to make it seem like no big deal for Sherry to sit in my lap later. I gave her a nod in response.\n\nFool that I was, I didn't realize that my sister was using her roommate as an excuse. She wanted to take that liberty of sitting in my lap. I responded by scratching my sister's back, and she cooed appreciatively. Neither of us could miss the way Sherry looked over at us longingly. \n\nKaren smiled at her and said, \"You should take your turn next. My brother gives the best back scratches.\" Then her grin widened and she added, \"But not until I'm done!\"\n\nI had to wonder why she said that. After all, I had spent an hour scratching Sherry's back the night before. She knew exactly how it felt. Was she teasing Sherry? I didn't dwell on it too long. Karen's butt felt soft and warm in my lap, and I was embarrassed to feel myself hardening beneath her. She moaned happily, and I assumed it was just from the way I scratched her back. My mind shied away from thinking about my sister getting turned on from sitting on my hard dick.\n\nKaren had never sat in my lap like that before. Heck, I couldn't recall any woman sitting in my lap like that. I felt like I should apologize for the way my dick was poking her, but couldn't think of a way to do it that wouldn't just be more awkward. Then she smiled at me and shook her head softly. When she bit her lip, I noticed the faint flush at her neck and finally took note of her hard nipples. My eyes widened as I looked at her face, and I knew she was getting turned on\u2014maybe even more than I was.\n\nI simply did not know what to do, so I just rubbed her shoulder on autopilot as my mind raced and my dick throbbed. She gave me a soft kiss on my cheek a couple minutes later. \"Thanks, Bobby,\" she murmured before sliding out of my lap. Then she leaned forward to look around me at Sherry. \"Are you ready for your turn?\" she asked.\n\nSherry had been watching the television more than she had been paying attention to us, and she glanced at my sister and nodded before looking up at my face. Our eyes were locked as she slid into my lap, and then her eyes went wide when she felt the head of my hard dick settle into the crease of her pussy. We had the layers of our shorts and my underwear between us, but we both knew my dick would have slid right up into her if those clothes hadn't been in the way.\n\n\"Sorry,\" I murmured as I began scratching her back.\n\nShe nodded in response, swallowing heavily and still staring into my eyes. For a moment I thought she would slide out of my lap, but she seemed unable to make up her mind.\n\nI turned my eyes to the television screen and after a moment so did Sherry. Even though I didn't look right at her, I could not miss how her erratic breathing gave away her arousal. Her crotch felt incredibly hot pressed on top of my throbbing boner the way it was. I did my best to breathe normally and scratch her back for her, but neither of us really relaxed. When the show ended, Sherry's long, sexy legs shook visibly when she stood up from my lap.\n\nI licked my lips and stared, unable to help myself. The soft, light pink shorts Sherry was wearing were pushed up tightly into the crack of her ass and I could clearly make out the outline of her puffy pussy lips and even the plump little ring of her asshole! She was obviously not wearing underwear beneath those snug, soft shorts. I wanted to peel them off of her and take her on the spot.\n\nMy sister shoved my shoulder playfully, and I shook my head and blinked before looking over at her. I was embarrassed to realize she had totally busted me feasting my eyes on Sherry's ass.\n\n\"Stop staring at Sherry's ass!\" she said with an impish grin.\n\n\"Hey! It's only fair,\" I grumped. \"You two were staring at my ass earlier.\" I felt my face flushing with embarrassment, but I couldn't stop myself. I looked up at Sherry's blushing face and added, \"Plus, Sherry's got such a sexy ass.\"\n\nSherry gasped and reached back to pull the bottom of her t-shirt down to cover her bottom, and we all laughed. It was forced, though. I think we were all more turned on than amused.\n\nI stood up and stretched, once again feeling the need to reach out and touch Sherry. I put my hand on her shoulder and leaned close to murmur, \"I'm sorry, Sherry. I didn't mean to embarrass you.\"\n\n\"That's okay,\" she replied quickly.\n\nI knew both of them could see my throbbing erection as I slipped past Sherry to retreat into the bathroom. It was all I could do not to reach down and cover my crotch with both hands. I was too hard to pee, so I stood at the sink and dropped my shorts and underwear so I could run cold water over my dick until it softened. Then I managed to relieve my bladder. I was only half-hard when I returned to the couch. My sister was still in the same spot, but Sherry was nowhere to be seen. I figured from her closed bedroom door that was where she had gone.\n\nKaren leaned over and whispered, \"She was embarrassed but totally turned on. She felt like she needed to change clothes while you were in the bathroom.\"\n\n\"Oh, okay,\" I replied.\n\nMy sister licked her lips and nodded in the direction of Sherry's bedroom. \"You should go check on her,\" she whispered.\n\nOur eyes locked. I suspected that either I would embarrass Sherry again, or I would fuck her if I went to her bedroom door to \"check on her\" the way my sister suggested. The look in Karen's eyes told me she thought the same thing. When I stood up that time, I could not miss the way my sister's eyes locked on my dick and the way she stared at it hungrily and licked her lips.\n\nOnce again I felt guilty, but I couldn't help picturing my sister sucking my dick. I blew out a breath and walked up to Sherry's bedroom door, reaching out to knock softly.\n\n\"Sherry, are you alright in there?\" I asked quietly.\n\nI heard her bedsprings creak as she moved on the other side of that door.\n\n\"Just a minute!\" she replied shakily.\n\nHer face was flushed when she opened her door. She only opened it a little bit, enough for me to see her face and her heaving chest in that same oversized dark blue t-shirt. Her hair was a little disheveled, and I could picture her lying back on her bed and thrashing her head from side to side. I smiled and leaned closer, and she tilted her head back and welcomed my lips as they met hers. She also let the door drift open further as she panted through her nose and kissed me.\n\nI broke off the kiss softly and smiled again, just inches from her face.\n\n\"I just wanted to apologize again,\" I whispered. \"I know I embarrassed you, and that wasn't what I was trying to do.\"\n\n\"Oh, it's okay,\" she murmured, but she blushed slightly.\n\n\"Karen said you felt like you needed to change clothes because I'm here,\" I said. \"Is that true?\"\n\nI had a half-formed speech in mind; I wanted to tell her that I felt bad about making her self-conscious in her own apartment. Then I was planning to say something like, \"You should be able to wear whatever you want. I promise I'll be good,\" or something like that. I never got the chance to say any of it.\n\nSherry looked over my shoulder in the direction of the couch, and that allowed the door to open another six inches. I could see her long, sexy legs beneath that shirt and licked my lips. I just knew she wasn't wearing anything under that shirt now.\n\nShe caught my eyes lingering on her legs, and she shuddered and took a step back. I didn't realize I had stepped forward into her room until my arms wrapped around her. There was never any conscious thought on my part. Sherry looked like she needed to be held in that moment, and my body just reacted.\n\n\"I\u2014I have a boyfriend,\" she whimpered weakly into my chest.\n\n\"I know,\" I sighed into her hair.\n\nI simply stood there and held her in my arms. She let out a soft gasp and I knew she was reacting to the way my hard dick was pressing insistently against her belly. I started to pull my hips back from her, but her hands abruptly wrapped around my lower back and pulled me to her. This time when she kissed me her lips opened and her tongue sought mine.\n\nAs we kissed we started moving toward her bed. She gasped into my mouth when her hands slid down to cup the cheeks of my ass. I was looking right into her eyes when she did it, and I was impossibly turned on to see that horny, helpless look in her wide-open eyes. I pushed my tongue into her mouth and she moaned as my tongue swirled around hers twice. Then her eyes rolled up slightly when my hands slid down to find her naked bottom beneath the edge of her shirt.\n\nShe gasped again when I gave those firm cheeks a squeeze and her eyes once again focused on mine. We both sucked in a breath when she pulled her mouth back from mine.\n\n\"Do you really think my ass is sexy?\" she panted.\n\nI gave her another squeeze. \"It feels incredible,\" I whispered into her lips. \"May I see it?\"\n\nHer eyes were still locked onto mine with that helpless expression as she slowly shook her head. \"I have a boyfriend,\" she whispered again, sounding almost sad about it. \"I\u2014I really shouldn't...\"\n\nI took a step back and sighed, and she bit her lip as she continued to slowly shake her head. Then she turned and her voice was soft and weak when she whimpered, \"Just for a minute, okay?\"\n\n\"Okay,\" I croaked.\n\nWe exchanged a shy, guilty little smile and then she turned and crawled up onto her bed. Just doing that gave me an amazing view of her glistening pussy and the backs of her thighs. A slight movement on the bed next to her drew my attention, and I saw a slick vibrator rolling toward her knee. Then I had to suck in a breath when she lifted her shirt up over her lower back, baring her sexy ass in all its naked glory.\n\nHer asshole was soaked, and it pulsed open and closed as I stared at it.\n\n\"Oh my God, that is so hot,\" I whispered. \"You were playing with your asshole, weren't you?\"\n\n\"Yes,\" she whimpered.\n\n\"Were you thinking about me when you were doing it?\" I asked. \n\nMy fingers were already at my waistband, untying the drawstring of my shorts. Her puckered little ring throbbed open and closed as she looked over her shoulder at me guiltily.\n\n\"Yes,\" she whispered. Her eyes widened when she saw me step closer.\n\nI shook my head and couldn't help myself. I had to reach out, had to touch her sexy bottom. She let out the sexiest fucking moan when I squeezed those perfect globes and then spread them open. I was actually a little surprised to see my hard cock closing in on her ass\u2014I didn't recall stepping out of my shorts and underwear. I swallowed heavily and then looked up at her face again.\n\n\"Oh, damn, Sherry,\" I groaned softly, shaking my head. \"Your ass is so sexy. It's...it's irresistible.\"\n\n\"Oh,\" she sighed. Then her eyes shot open. \"Oh!\" she gasped.\n\nThe head of my cock was pressed against her wet little puckered hole, and my hips pushed forward, slowly forcing it inside her. Our eyes were still locked as my thick cock head once again stretched open her horny asshole. Sherry could see my helpless expression, and understood that I had meant it literally when I had said \"irresistible.\" I could not resist taking her sexy ass, even though she had a boyfriend, even though we had agreed I would look \"just for a minute.\"\n\nHer mouth fell open, and she shook her head weakly from side to side once. Then she bit her lip and closed her eyes as she felt the fat mushroom head slip inside her snug sphincter. I was inside her now. We were going to fuck. There was no way we could stop, now.\n\nSherry's eyes and mouth shot open again and she looked right into my eyes as I pushed my throbbing shaft into her tight asshole. \"Oh, God, oh, God,\" she moaned as her sexy butt pushed back toward me.\n\nShe was forcing the rest of my dick inside her, and I was reminded that the same thing had happened at the cosplay party the night before. It gave me a sense of relief\u2014I felt like I hadn't forced myself onto her against her will then or now. We both wanted this to happen; wanted it so desperately that we could not stop ourselves.\n\nEven though we'd left the door open and my sister was watching.\n\nI didn't realize that was the case until I heard her erratic breathing behind me. Instinctively, I wanted to turn around and object, but I could not tear my eyes away from my shaft pistoning in and out of the slick ring of Sherry's perfect little asshole. Sherry was pumping her hips back to meet my thrusts, grunting each time my thick shaft was sheathed fully inside of her.\n\nWe had a nice, steady pace going and it felt absolutely incredible.\n\nI realized, though, that my sister could probably see Sherry's pussy from that angle. The way Sherry had her knees spread to open herself up for me left her lower than me on the bed. I was pumping into her at a slight downward angle, but that meant my sister had to have an incredible view from behind us.\n\nThere was no way she could miss it. I was fucking her friend in the ass again, and this time she got to watch as I did it. It's not like I'm an exhibitionist, but I found I was turned on knowing my sister was watching. It was a guilty turn-on, though. I felt like I should say something, to make her stop watching. I was her little brother, after all. She shouldn't be watching me do something like this.\n\nShe really shouldn't be staring at my ass and panting like that while I fucked her roommate's tight ass.\n\nMy eyes flicked back up to Sherry's face. I had worried that she might realize Karen was in the room and freak out. Instead, her eyes were closed and she had a blissful expression as she grunted and took my cock in her ass. Parts of their conversation replayed in my head, and I reminded myself that she thought it was \"perfect\" the way I had fucked her sweet, horny asshole the night before.\n\nIt was like a perfect replay when I felt my orgasm coming on and heard her moan, \"Oh God I'm coming!\"\n\n\"Me too!\" I panted. Her eyes shot open when I added, \"I'm going to come in your ass!\"\n\n\"Oh my God!\" she screamed, and her asshole clamped down on me hard.\n\nAs we stared into each others' eyes and my cock erupted inside her, I realized she had just figured it out. She knew it had been me the night before.\n\n\"You...you...\" she stammered, shaking her head as she continued to shiver through her orgasm.\n\nThen her eyes closed and she shook even harder as my third and fourth spurts of cock juice sprayed out inside her ass. She shook her head again and panted five more times as my orgasm gradually slowed and my dick softened slightly inside her. When her eyes opened again, she managed a weak smile.\n\n\"You really can't resist my ass, can you?\" she whispered.\n\n\"No,\" I replied, shaking my head and returning her soft, guilty smile. \"No I can't.\"\n\nShe rose up, craning her neck so she could kiss me. After that searing kiss, she sighed, \"Good.\"\n\n* * *\n\nMy sister managed to retreat from Sherry's doorway before Sherry noticed, but told her later that she had watched. Rather than being embarrassed or surprised, Sherry just sighed.\n\n\"I guess I need to break up with Darren now,\" she said sadly.",
        "Karen bit her lip, holding in whatever negative comments she had about the guy, and simply nodded instead.\n\nWhen Sherry called him an hour later, she made it sound like she had come to the realization that she would never be good enough for him. That pompous asshole just accepted it at face value, never suspecting that she might have found someone better than him. It did illustrate for me and my sister why she had wanted to be with him, though.\n\n\"I thought I was ready for the kind of mature relationship I knew we'd have together,\" Sherry said, sighing sadly. \"I just guess I'm not really ready for that kind of relationship yet.\"\n\n\"Oh, well,\" Darren replied breezily. \"Maybe you'll get there eventually.\"\n\nThere was no sadness in his voice, no sense of loss. Darren sounded certain that he would have no trouble replacing Sherry with someone \"better.\" I just stared at the most incredible woman I would ever meet, my heart pounding in my chest as I met her gaze. She would be mine after this phone call ended.\n\nAfter she hung up, Sherry looked at the phone in her hand and her eyebrows knitted in consternation for a moment. \"Wow, what an asshole,\" she muttered.\n\nMy sister had been sitting next to me on the couch as we witnessed that phone call. She busted up laughing, and Sherry and I both turned to look at her. I jumped reflexively when she poked me in the ribs, but Karen was grinning at Sherry.\n\n\"That's what he said about you!\" she laughed.\n\nWe had to think for a second before we got it, and neither of us laughed as hard as my sister had.\n\n\"You're so bad, Karen,\" I chuckled, shaking my head.\n\nShe sighed theatrically, but then grinned again when Sherry came over to slide into my lap and kiss me. I was kissing Sherry back hungrily, but my eyes were still on my sister's face, smiling next to us on the couch. She waited for us to finish that first long kiss before she spoke.\n\n\"I knew it the second day after Sherry moved in,\" she informed us. \"I never met anybody in my life who was so perfectly matched for my little brother. Then I went home for spring break and it only\u2014\"\n\nShe stopped abruptly, and her mouth snapped shut audibly. When we saw that blush creep up her neck, Sherry and I were both insatiably curious.\n\n\"What happened?\" Sherry blurted before I could.\n\nMy sister looked at us and shook her head slowly for a long moment. She was still blushing when she reached over onto the coffee table and picked up her laptop.\n\n\"This is my laptop,\" she said slowly.\n\nSherry and I nodded. The way my sister was looking at my face, she expected me to figure it out just from that clue. I shook my head, letting her know I wasn't as sharp as she thought I was. Karen sighed.\n\n\"Bobby's laptop is identical to mine,\" she started, and then my eyes shot open and I got it.\n\n\"I grabbed your laptop by mistake?\" I asked.\n\n\"Mmm-hmm,\" she replied. \"I noticed it was missing, and went looking for it. I found it in your room.\" She looked up toward the ceiling thoughtfully. \"Actually, you may not have borrowed mine, now that I think about it. I assumed that was what happened, but I may have seen your laptop and thought it was mine. At any rate, when I opened it up and went online I was shocked at the 'suggested sites' that popped up when I started to type in my normal homepage.\"\n\n\"Oh, damn,\" I groaned.\n\nSherry looked at my face and cocked hers. \"Why? What did she find?\"\n\nI sighed and squeezed her, hoping my new girlfriend wouldn't be disgusted. \"I was looking at a lot of anal porn,\" I admitted, shaking my head in embarrassment. \"None of the girls I dated would even consider doing that with me, and it had started to become something of an obsession. I hope that doesn't disgust you.\"\n\nIt surprised me the way both of them giggled. They seemed every bit as embarrassed as I felt. Sherry turned to look at my sister.\n\n\"That was, what? A week after you borrowed my laptop?\"\n\nKaren nodded, still blushing. \"You two really need to get into the habit of clearing your browser history,\" she chuckled. \"What was insane was that both of you had the same exact video clips as your top four favorites.\"\n\nI was startled to hear it, and my head jerked to face Sherry's blushing face once again. My dick hardened in my lap, and she groaned to feel it. My favorite video was of this gorgeous, big-titted blonde lying on her back as a thick cock plundered her asshole. Sherry was thinking the exact same thing.\n\nI don't think we even excused ourselves, but my sister didn't seem to mind. Minutes later we were back in Sherry's bedroom, living out our favorite porn clip. It was the first time I got to see her naked body in all its glory, and the first time I sucked her hard nipples. Her long legs wrapped around me and encouraged me to fuck her harder and faster once she had accommodated my even harder cock.\n\nI was surprised when Sherry gasped and I followed her gaze to the doorway. I thought we had closed the door that time, but my sister was leaning against the doorframe, panting as she thrashed her pussy with her right hand shoved down her shorts and her left hand squeezed the nipple of her completely exposed breast. I shook my head, once, and turned back to Sherry's waiting breasts.\n\nThat image was seared into my brain, though, and it was never going to leave completely. My sister had looked impossibly sexy and wanton as she had watched me fucking Sherry's horny asshole. Sherry looked up at me and licked her lips before giving me a wicked grin.\n\n\"Oh, God, Bobby!\" she groaned. \"Did you just get harder inside my ass from looking at your sister?!?\"\n\nI stared at her. At first, I wanted to protest\u2014to say something to defend myself. Then I tried not to laugh when I heard my sister moaning, \"Oh my God!\" from behind me. The frantic, wet sounds she was making inside her shorts let me know\u2014let us know\u2014that the very idea was getting her off.\n\nI released Sherry's wet nipple and leaned up to whisper into her ear. \"You're so bad,\" I chided her.\n\nShe grinned for a second, but then gasped when she felt my cock swelling inside her ass. My lips were touching her ear as my dick started spewing my cum into her ass. At that moment, I groaned, \"Now you've got me thinking about my sister while I'm coming in your ass!\"\n\n\"OH FUCK!\" she screamed, and then her pussy exploded, showering me with her first ever gushing climax.\n\n* * *\n\nAfter my sister staggered away, I got up and closed the bedroom door securely. Then I used my shorts to wipe up most of the copious pussy juice that was all over Sherry's body as well as mine. Before we took a break to take a much-needed shower, though, there was that second video we needed to re-enact. When I rolled her onto her side and slid up into the bed to kneel behind her, Sherry looked up into my eyes again and nodded eagerly.\n\nBy the time we cuddled up together in her bed late that night, we had enjoyed every one of the positions and angles I had ever watched and wanted to try. We had also showered together three times in between those marathon ass-fucking sessions. Karen had left us alone so we could enjoy the rest of that night in privacy. The only time she'd interfered was when she knocked softly on the door at around eight o'clock.\n\n\"Do you two want to take a break to eat something?\" she asked.\n\n\"No!\" Sherry gasped. She was coming hard at that point, with my dick buried completely in her ass, and she was staring at it in the mirror.\n\n\"Maybe a little later,\" I groaned.\n\nHowever, a little later we were still going at it, and then we were showering, and then going at it in the shower, and then we were back in the bed...\n\nI reached around her and found Sherry's hand in the darkness, giving it a squeeze. She sighed happily and returned that squeeze.\n\n\"Would you like me to get you something to eat?\" I murmured into the back of her neck.\n\n\"Not right now,\" she replied breathily. \"I really want to fall asleep like this, with you still in my ass.\"\n\nSo that was what we did.\n\n* * *\n\nI don't know which of us woke up first. With me and Sherry, it was possible we awoke at the exact same time. We were just that in sync. When I woke up, we were already fucking again. I was completely hard and thrusting in and out of her tight, pulsating asshole. Sherry was moaning and humping her hips back to meet every one of my strokes.\n\nI was spooned up behind her, savoring the wonderful sensations, when she turned her head and our eyes met. I pushed myself up with my right arm so I could lean over and kiss her without stopping our lovely morning ass-fuck.\n\n\"Good morning,\" I groaned into her lips afterward.\n\n\"Mmm. Good morning!\" she replied happily.\n\nI shook my head and smiled, punctuating each delectable thrust into her horny asshole with my words. \"You...are just...so...irresistible,\" I groaned.\n\nShe looked deliriously happy to take every one of those thrusts. I stopped thrusting and we both looked toward the doorway when we heard my sister's voice.\n\n\"Damn, are you two still at it?\" she asked, shaking her head in disbelief.\n\nSherry was only partially covered by the sheet, and I knew my sister could see everything when I grinned at her and took three more long, deliberate strokes into Sherry's tight asshole. Sherry was watching my sister's face when I did it, and she was blushing when she turned to look at me.\n\n\"Do you two normally watch each other having sex?\" she asked softly.\n\n\"No,\" Karen and I replied immediately. I was shaking my head, and so was my sister. \"In fact,\" I added, \"I don't think I even let her see me naked until just now.\"\n\nI frowned then, and pulled the sheet over to cover both of us. After shaking my head and thinking for a few seconds, I muttered, \"Honestly, I don't know why I didn't do that as soon as I realized she was here. I used to be a fairly shy guy.\"\n\n\"Yeah, but you always liked teasing me,\" my sister said softly.\n\nAgain Sherry and I turned to look at her standing just inside the doorway. She was shaking her head and smiling as she looked at us.\n\n\"Oh, you were never mean about it, and you were quick to apologize if you hurt my feelings, but you were always a tease, Bobby.\"\n\nSherry let out a snort of laughter. I shivered as she pushed her hips back toward me insistently. I had stopped thrusting into her, but she took over and slowly worked my dick in and out of her horny asshole.\n\n\"Oh, you're one to talk, Karen,\" she chuckled. Her voice quavered as she continued to work me in and out of her. \"You've been teasing me for months, telling me how hot your little brother is, how much he would love to fuck my ass for me.\"\n\nMy eyes shot open when I heard that, and I automatically turned to stare at my sister. She was wearing her own snug little white undershirt then, and her heaving breasts and hard nipples were impossible to ignore. The shirt was also short enough that it failed to cover her tiny g-string panties. The way she was blushing, I knew Sherry was telling the truth. My sister had said those things about me.\n\nSherry's voice took on a sing-song quality as she continued speaking while fucking her ass with my hard cock.\n\n\"We should probably take a break\u2014oh!\u2014after this, and take a shower. Umm! Maybe get some breakfast. As much as I would love it\u2014unh!\u2014we can't spend every minute with your big, hard dick in my ass.\"\n\nShe bit her lip and closed her eyes then, looking blissful and unbelievably gorgeous as she came. When her eyes opened afterward, she smiled and leaned up to kiss me. She giggled after Karen moaned and staggered out the door.\n\n\"Come on, let's go get that shower,\" she murmured, kissing me again. \"I loved every second of last night, but I am starving.\"\n\nMy stomach grumbled, but not so loud that she could hear it. I just kissed her back and nodded, and we got out of bed. Sherry pulled a robe around her body and tied it at the waist, and I looked around for my shorts. They had gotten kicked under the edge of the bed. I pulled them on and followed her into the bathroom.\n\nI still had to shake my head when I joined Sherry in the shower. She just looked too impossibly sexy for me to believe this moment was real. She smiled beautifully when she saw the way I looked at her. We kissed again, but did not have sex. We were both too hungry for food.\n\nAfter drying off, I pulled on a big, oversized sweat shirt that came down to the middle of my thighs. It was almost funny to see my sister's expression after I put that shirt on. Disappointment warred with relief on her face, and it was as clear to Sherry as it was to me. Sherry leaned over and laid a hand softly on Karen's shoulder.\n\n\"He is your brother,\" she reminded her softly.\n\nKaren looked up and nodded, but didn't look happy about it.\n\n* * *\n\nI figured that would be the end of the uncomfortable episode with my sister. After that, I would be careful to wear baggy clothes, and I would close and lock the bedroom door before Sherry and I had sex.\n\nI did that right after breakfast, and Sherry cocked an eyebrow and looked at me when I did it. I merely shrugged. We both knew why I had done it. Then I opened Sherry's robe and she sighed happily as I kissed my way down her body. It was time for me to taste her wet pussy for the first time. Damn, I love the way she tastes! After her third shuddering orgasm, I looked up at her sexy, flushed face and heaving breasts and shook my head.\n\n\"I could do this all day,\" I murmured into her drenched folds.\n\n\"Oh, no you can't,\" she panted. \"I need you inside me, now!\"\n\n\"Mmm! Yes ma'am!\" I replied.\n\nI think we were both surprised just how good it felt when my dick slid into her wet, horny pussy for that first time. We had both been so obsessed with the desire for a good, hard ass-fuck for so long that it was all we had done prior to that morning. When my hard cock slid into the velvety perfection of her welcoming pussy, we exchanged a startled look.\n\n\"Wow, that's incredible,\" she whispered up at me in astonishment.\n\nI nodded, and I'm sure I looked just as shocked and pleased in that moment. Then we were fucking, and it only got better. There was something about sharing that orgasm that felt more intimate and loving than all those times we had come from anal sex. Afterward, we held each other and kissed softly, running our hands over each others' bodies and staring into each others' eyes.\n\nSherry chuckled and gave me a brief smooch, then. She grinned and said, \"Okay, that was incredible, but now you need to roll me over and fuck me in the ass!\"\n\nThat was also incredible. After all, it is our absolute favorite thing to do.\n\n \n"
    ],
    "authorname": "LexxRuthless",
    "tags": [
        "costume",
        "first time anal",
        "huge tits",
        "party",
        "roommate"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/wonder-woman-takes-it-in-the-ass"
}
{
    "title": "More than Friends Pt. 01",
    "pages": [
        "Mark and Alex had grown up together. They lived right down the street from one another, and as soon as Mark had moved into the cul-de-sac and their families had met at a \"Welcome to the Neighborhood\" cook-out that Alex's family had generously hosted, the two had been inseparable. Alex was an only child, and Mark's sister Mary was 6 years older (meaning they weren't too close) so the 2 boys grew up as brothers.\n\nAs soon as they were old enough to have some sense of what gender and sexuality were (not an understanding, mind you, but a vague idea), Mark had assumed that Alex was gay. He dressed in girly colors, spoke soft and high, and liked watching the same shows as Mary. This was never acknowledged, because honestly Mark couldn't have cared less. They were best friends, and that seemed like it was definitely Alex's business. Nothing about Alex being gay interfered with them talking, playing video games, and going for adventurous bike rides into town in the slightest, and their friendship continued unabated.\n\nMark was there for Alex when he started to question his identity in the 3rd grade. One night, at around 3:00AM, there was a soft tapping at Mark's window. Opening it up, he found his best friend standing there crying. \"Holy crap Alex! What's wrong?!\"\n\n\"Mark! I... I hate this. I hate myself...\"\n\nThat had not been allowed to stand, and Mark had immediately leapt from his window and started them on a walk around the woods. They walked for hours, and by the time the first hints of sunrise were poking through the trees Mark had managed to get his best friend to stop crying. They had talked through everything, and all of it made sense now.\n\n\"Thank you so much, Mark! I'm so glad we're best friends... We still can be, right?\" The timid tone of voice, with the slight quaver of uncertainty, broke Mark's heart.\n\n\"Shut the fuck up, Lexi!\" Her lower lip started to tremble, and tears began to well in her eyes. Was Mark about to totally reject her true self as a friend? Suddenly, Mark pulled her into a tight hug. \"Don't you ever doubt us being friends, okay? We've always been brothers; now you're like the sister I never had!\" Both cracked up at that, on account of Mary very much being a real person and the sister Mark had very much always had. But Lexi understood what he meant: They had always been the closest of friends, and much to her relief nothing was changing in that regard.\n\nBoth sets of their parents were fully supportive of Lexi's revelation. Her parents took her out shopping for new clothes (Alex's \"girly\" wardrobe was nonetheless a boy's \"girly\" wardrobe, and now Lexi needed actual girl's clothing) and Mark's parents acted like nothing had changed, in a good way. There was no confusion of names; it was like Lexi had always been coming to their house, and nobody made a big deal out of it. Mark's mom and sister even took to routinely complimenting her on her clothing, hair, etc. and Mary at one point made a big deal of teaching \"her little sister\" (close enough) how to put on makeup.\n\nThe two best friends kept up all their old traditions. This included brutally open conversations while laying on their respective sleeping bags, and they shared everything going on in their lives. When puberty started to hit Mark, he was worried for his best friend.\n\n\"Hey, Lexi?\" he asked while both were on their way to sleep.\n\n\"What's up, Mark?\" she asked quietly. They were supposed to be asleep, and a parent hearing them could ruin their whole system of staying up playing video games for future sleepovers!\n\n\"I... Uh... Fuck it. I've started growing... Hairs, like 'the movie' said we would...\"\n\n\"Hey! Congrats, man!\" Lexi happily exclaimed.\n\n\"Thanks... But I just was thinking, won't that... Like... I know you have dysphoria already sometimes...\"\n\n\"Oh! Oh Mark, that's so sweet!\" Lexi remarked, and flicked on her bedside lamp to reveal her beaming face. \"Don't worry, man. I've been taking puberty blockers for like 2 years, and I am going to start taking hormones soon. I was actually trying to figure out how to bring that up with you...\"\n\n\"What?\" Mark asked, not sure what the issue was. They always shared everything!\n\n\"Well... So I'm starting them next month and, well... I'm going to get pretty bitchy sometimes,\" she laughed, relieved that they seemed to be on the same page with respect to this major step in her transition.\n\n\"Oh... So nothing's going to change?\" Mark teased, and Lexi responded by giggling and throwing a pillow at his head.\n\n\"Goodnight, Mark,\" she sighed, sinking back to her sleeping bag.\n\n\"Goodnight, Lexi.\"\n\nThe next few years were awesome for both of the friends. Lexi really came into her own, thanks in part to the hormone replacement therapy, and flourished in middle and high school as a cute, attractive, athletic young woman. Mark thrived, becoming the star quarterback of the high school football team without any real competition. Lexi was at every game (which made sense, as she was a cheerleader) all the way up to Mark leading his team to a decisive victory in the state championships during their senior year.\n\nWhile other teammates of his went to and made out with their girlfriends from the cheer squad, Mark happily ran to his best friend. \"Way to go, man!\" Lexi exclaimed, punching him on the arm and smiling. \"You did it! And with only minor brain trauma!\"\n\nMark pushed her playfully, and both broke out laughing. Mark was always skittish in the pocket, and his coach had him well-protected to the point that he basically never took a hit. His arm was valuable, but his brain was what really won them games, and everyone knew that.\n\nOne of his linemen was throwing a huge party for his team and the cheerleaders, and Mark and Lexi were happy to ride together in Mark's car (an old, vintage Mustang his dad had bought him as a gift for winning their division the year before).\n\nAt the party, however, things really went sideways.\n\nAs per usual, Mark was flirting it up with half the cheerleaders there, and they were falling all over him. Each of them wanted to be the next one to find herself in his bed (as several of them had already, each experiencing what the rest of the squad had been told was \"the best night of my life\"), and he was having fun getting riled up with them. He was in the middle of making out with two of the hottest blondes his high school had to offer when he heard Lexi's voice call out \"stop!\"\n\nHe was up in a second, and running to the sound of her strained voice. When he got there, he found Lexi splayed back on a bed, with one of his receivers standing over her, glowering with rage. \"What's the problem here?\" Mark demanded, staring right at his teammate.\n\n\"This asshole fucking hit me!\" Lexi cried, and Mark could see a bruise forming on her angelic face.\n\n\"This fucking trap bitch -\" the football player started to retort, but was silenced by the vicious uppercut that knocked him to the floor, out cold.\n\n\"Well, that was interesting,\" Mark commented wryly, and looked over at Lexi to see her staring at shock, mouth agape. \"So, what actually happened?\" he asked.\n\n\"Holy shit, Mark! Is he... dead?\" she asked, sounding terrified.\n\n\"No, just sleeping,\" Mark laughed, and Lexi joined in when she realized the absurdity of her question. When their laughter died down, her face dead-panned and she started telling him the whole story.\n\n\"So we were all celebrating, right? Well, I decided that maybe it was my turn to finally get some,\" she giggled, and Mark pushed her shoulder playfully, \"and Devon here had been eying me all season, so we came up here to see what would happen, right?\" Mark nodded, and gestured for her to continue. \"Well, I forgot that he moved to town in the 7th grade, so he never met Alex, and even though everyone else seems pretty cool with me being... Well... Trans... apparently finding that out with his cock in my mouth wasn't something he was ready for...\"\n\n\"Oh, Lexi, shit!\" Mark remarked in a sympathetic tone. \"You're so used to being you that you just didn't even think of needing to tell this fucking neanderthal?\" She nodded, blushing pretty hard.\n\n\"Apparently discovering that his sexy fellatrix had a boner was quite the shock,\" she laughed, smiling when Mark kicked his teammate, causing him to groan and start to wake up.\n\n\"Moron,\" Mark scoffed, and Lexi smiled at him. \"But wait, did you say 'finally get some' or something?\" he asked, incredulous.\n\n\"Well... Yeah, I thought it could be fun...\" she mused wistfully, grimacing at her would-be lover on the floor.\n\n\"Chose the wrong guy, though, huh?\" Mark teased, and made fun of her for still being a virgin this close to graduation.\n\n\"It's not my fault all of these high school jocks are idiots,\" she joked, \"I've been on a few dates, with some guys who were really understanding, but one look at my hard cock and they suddenly forget how perfect my tits and ass are!\" Mark faked a gagging noise, not wanting to hear about his best friend's sexual anatomy, and the two went to re-join the party.\n\nMark made a big deal of reminding everybody that Lexi was his best friend, and made a point of marching Devon over at lunch to apologize in front of everybody. \"I'm a big, stupid ape and I should never have hit you,\" he mumbled, causing Mark to elbow him to continue more loudly. \"It was just a lot for me, and my stupid pea-brain couldn't handle it,\" he almost yelled his scripted line. Lexi beamed, got up, and kissed him sweetly on the cheek.\n\n\"Next time you want to get knocked out cold, you should probably wait until after the blowjob is over,\" she teased loudly, causing Devon to gulp and the entire cafeteria to burst into laughter at his embarrassment.\n\nThe rest of high school passed quickly, and before long Mark and Lexi were loading up their shared U-Haul with everything they would need for college. They were both attending Winston University, the prestigious school about 2 hours away, and had gotten special dispensation from the university to live together, off-campus, because of Lexi's \"special circumstances.\" Basically, she didn't want to deal with the drama of communal bathrooms when she had a dick, and Mark was more than happy to live with and support her.\n\n\"Hey Lexi!\" Mark called out, standing by the door, \"I'm going out with Jennifer tonight, but I'll be back for cookie time!\" he promised. Since moving into their apartment, they had sessions every other night where they baked cookies and sat around the kitchen talking about everything, just like they used to at their sleepovers.\n\n\"Tell your skank I say 'hi'!\" Lexi teased, rolling her eyes as he smirked. They were almost through orientation, and Mark was about a quarter of the way through the college's cheer squad. Those vapid whores had been all over the new starting quarterback from the very first practice with all the freshmen, and Lexi had heard a few of them scream themselves hoarse in Mark's room over the past few days.\n\nShe didn't mind the unintentional exhibitionism, but it was a bit insensitive to the still-virgin Lexi, who was too nervous because of her prior experiences to act as slutty as she would have wanted during orientation. She hadn't been on a single date, mostly due to not knowing how to let their new school know that she had been born a boy. They didn't teach that communication skill in school!\n\nMark kissed Lexi on the cheek as he departed and went off excitedly to go get laid.\n\nAlone in their apartment, Lexi sighed to herself. Why was this shit so hard? She was a beautiful young lady, she knew that! Why was it such a big deal that she had a penis? She just wanted to finally lose her V-card! But telling some guy about her... Situation when they were already intimate was too risky, and she hadn't worked up the courage yet to come out all over again at college. For now, she was somewhat content being the hottest new cheerleader at school, and not dropping to her knees in front of every guy that smiled at her lent an air of mystery and perceived value in the eyes of her would-be suitors.\n\nThe more she thought about her dilemma, the more she realized how pent-up she was. A bubble bath was just the thing for her! She happily scampered to the bathroom and started the water running. In a few minutes, she had the bathroom all set, with candles and soft music and scented bubble bath. She stood in front of the full-length mirror in her trim bathrobe, admiring her figure through the fabric. Coyly, she began to take off the robe, and moaned when she saw how her nipples stood at attention from her perky, C-cup breasts. Her narrow waist and flaring hips drew attention to her throbbing, 8 inch cock, and she giggled. So it was going to be that kind of bath, huh?\n\nWhen she sank into the water, she allowed her mind to totally clear. She smiled, running her hands over her sexy body, and drifted away in sexy thoughts. Soon, however, she grimaced when she thought of Mark fucking her teammate as hard as he could, pounding her to multiple, extremely vocal orgasms. She shook her head and started thinking about having a cock in her mouth, only to realize with a start that the imagined cock was Mark's. What was wrong with her? She thought about it for a few minutes, disappointedly stroking her now-flaccid cock, and started to cry. She wanted to be one of those girls who Mark took to heaven on his shaft! She had never thought that consciously before, but started to think about it and realized she had been jealous for quite some time of the girls Mark brought to bed. Fuck! Did she have feelings for her best friend? That would complicate things unbearably! She started to cry, and before long was sobbing in the bathtub. She was wailing so loudly she didn't hear her roommate get home, but he heard her.\n\nAs soon as Mark got inside of their apartment, he heard broken sobbing coming from up the stairs. What the hell was happening?! He completely forgot about his date (Jennifer had started her period over dinner, and regretfully ended their date with a chaste kiss goodnight) in his rush to see what was wrong with his friend, and sprinted to the bathroom. When he barged through the door, not sure what to expect, he froze immediately.\n\nIn front of him was an incredibly sensuous scene. The bathtub was full of pink, rose-scented water. Soft, spa-like music played on the Bluetooth speakers. An opened box of chocolates rested on the edge of the jacuzzi tub. And there, in the tub, bawling her eyes out, was the sexiest woman he had ever seen.\n\nNow, Mark knew Lexi was hot. She wasn't shy, often flaunting her perfect ass and her bountiful chest (the surgeons had done an incredible job giving her almost-perfect, natural-looking tits) in skimpy clothing. But since they started to develop differently all those years ago, he had never seen his best friend naked. Their sleepovers were entirely about bonding as friends, but he made sure to give her privacy. He knew she suffered from dysphoria, and respected the boundaries she implicitly put up. So Mark knew his best friend was a smoke show, but nothing could have prepared him for this. Instantly, he felt his cock twitch, taking in the gorgeous view in front of him.\n\n\"Oh my god!\" he exclaimed, turning away in a hurry.\n\n\"Fuck! Mark?!\" Lexi gasped between sobs.\n\n\"I'm so sorry! I didn't mean to... Well, I'm sorry! I just heard crying and ran up here to help!\" he explained lamely. \"I didn't...\"\n\n\"Mark! Stop it, Mark, it's okay. It's sweet that you ran up here to check on me,\" she sighed, feeling her heart break. \"You've always been so sweet to me.\" It's too bad he would never feel about her the way she did about him...\n\n\"Yeah, until I perved on you!\" he said forcefully, furious with himself for intruding on his friend's sanctuary.\n\n\"You didn't mean to... Wait, what?\" Lexi asked, not sure what he meant exactly. \"You mean walking in on me when I'm not made up all girly, and seeing the real me?\"\n\n\"Huh?\" Mark asked, genuinely confused.\n\n\"My... Well, my penis,\" she explained softly, lowering her face in shame at her most hated body part.\n\n\"Shut the fuck up, Lexi!\" he angrily snapped.\n\nShe was totally taken aback. \"I'm sorry, but what are you all mad about?\" she asked, it being her turn to be confused.\n\n\"Don't ever say 'the real you' again like that!\" he demanded, and Lexi felt a new kind of tear tickle her eye. He was mad at the dysphoria! \"You're the sweetest, most amazing, sexiest girl I know!\" he stammered rapidly, his feelings just coming out before he could phrase them more diplomatically.\n\n\"You don't need to say that, Mark,\" she sighed, hanging her head. Was he just pitying her, trying to make her feel better?\n\n\"Seriously, Lexi? Ugh, fine!\" he exclaimed. He was going to show her once and for all how \"real\" of a woman she was, what she had done to him. He spun around, taking the sight of her in again, and felt his cock throb.\n\n\"Mark... What... Really?\" she asked in a breathy voice. The bulge in his pants was obvious, and she saw it throb as he raked his eyes over her glistening body.\n\n\"Yeah, really,\" he almost snarled. \"You know how often I have to jerk off in my room, after seeing you walking back from the bathroom in your towel? Or hugging me and pressing your big, sexy tits against my chest?\" He closed his eyes, ashamed at sexualizing his best friend, certain she would be furious. Maybe he would have to move out? This certainly didn't feel like a safe space for her anymore!\n\n\"Mark... I... I had no idea,\" she whispered, utterly fixated on his bulge. \"You... You think of me like that?\" she couldn't keep the joy from her voice, and beamed a radiant smile at him.\n\n\"Of course I do, idiot!\" he snapped, almost laughing at her for not realizing. \"You've always been, like, every wet dream I had growing up...\" He blushed, and she giggled sweetly.\n\n\"Mark?\" she asked softly.\n\n\"Yeah?\" he answered, not sure where to draw the line with his honesty.\n\n\"I've always... Well, ever since I transitioned, I've wanted to... Fuck it! I've wanted to do this,\" she said in a breathy hurry, standing from the tub and approaching him. Her gorgeous, sexy body sparkled in the candlelight, and rivulets of water ran down her heaving breasts and dripped from her nipples. Her cock swayed, growing hard with excitement, and Mark gasped at the sheer eroticism of her motions.\n\nMark gulped, not sure if his friend was messing with him or if he was dreaming. \"Lexi... Are you... Really?\" he asked, his questions dying on his lips when she pressed her mouth to his. Both of them melted into the kiss, feeling their bodies pressed together and luxuriating in the feeling of a soul-melting kiss two decades in the making.\n\n\"I love you, Mark...\" she moaned softly, pulling away about an inch and looking into his soul with her big, beautiful eyes sparkling.\n\n\"I... I love you too, Lexi!\" he almost shouted, and wrapped his arms around her, pulling her into another deliriously-happy kiss.\n\n\"Really?\" she breathed, looking terrified that this might all slip away.\n\n\"Yes, really!\" he assured her. \"And we need to talk about everything ASAP, but first... Well...\" He blushed, and grimaced at his own stupidity.\n\n\"What?\" Lexi almost purred, having some idea where this was going. Her fantasy might be about to come true! \"You want me to be the second cheerleader slut you claim tonight?\" she teased, bating her breath as she waited for him to answer.\n\n\"I didn't fuck Jennifer,\" he laughed, \"and I think there's only one cheerleader I want to be with ever again!\"\n\n\"Well let's not be hasty,\" she giggled, pouting sexily. \"Some of those girls are fucking hot, and I've heard sharing can bring partners closer together...\"\n\nMark's eyes widened, and he started to sputter while Lexi dropped demurely to her knees in front of him. \"Now, I've heard like 20 girls scream and moan and gag around this thing. So, as your best friend and new... girlfriend?\" she paused, looking up at him and saw him nod vigorously with a giant smile on his face, \"I think it's my turn to taste you.\"",
        "Mark breathed in delightedly, and felt her undo the button and zipper on his jeans. She slid his pants and boxers down to his ankles hastily and gasped. She paused, and he felt her breath hot in the head of his cock, but then she froze.\n\nWorried something had gone wrong, he looked down and saw her staring raptly at his excited, eager shaft. \"Is everything okay?\" he asked her nervously.\n\n\"Absolutely, baby,\" she breathed. \"It's just... Promise you won't be weirded out?\" she asked timidly.\n\n\"I promise! What's up?\" he asked, his mind clearing and entering supportive-friend mode from about-to-get-a-blowjob mode.\n\n\"It's just.. Your cock... It looks so much like mine!\" she whispered, blushing fiercely and looking away in embarrassment.\n\n\"Lexi... Lexi, look at me?\" he asked gently, and she raised her eyes to meet his. He smiled hugely, and stroked his fingers through her hair. \"Is it arrogant that I think that's super hot?\" he asked playfully, and she burst out in maniacal laughter.\n\n\"Oh my god, Mark!\" she panted, catching her breath after about 20 seconds of all-consuming laughter.\n\n\"So... I take it I was being a bit arrogant?\" he teased, smiling down at his best friend, not resting back on her ankles and gasping for breath.\n\n\"Yeah... Pretty fucking cocky,\" she grinned, causing Mark to roll his eyes and groan. His mocking retort died on his tongue, however, when she took the head of his cock into her lips.\n\n\"Fuck! Oh, Lexi, that's amazing!\" he cried out, knees almost buckling with pleasure as she made love to his head with her tongue. After a few seconds of this, she pulled off and looked lovingly up at him.\n\n\"I know it might be a little weird being with a trans girl,\" she began, and cut off his objection with a gesture, \"stop, it is unusual at least, no sense in denying that!\" He shrugged grudging assent, and she continued in a seductive purr, \"but one upside is that I know exactly how to make this beautiful cock feel amazing!\" And with that, she descended fully onto his cock, taking the head into her throat and humming at feeling her mouth blissfully full.\n\nMark was in heaven, fully consumed by the exquisite feeling of his best friend's soft, warm mouth, and the vision of her beautiful face looking up at him. He could tell from her eyes that she was incomparably happy, and he was too. \"I really do love you, Lexi...\" he moaned, almost overcome with delight.\n\n\"I love you, too, Mark,\" she whispered, pulling back to catch her breath. \"And I want to show you how much I love your cock, too!\" He smiled dumbly, loving where this was going. \"So, baby... Where do you want to cum the first time?\" she asked sweetly, batting her eyelashes at him.\n\n\"Fuck, you're so hot!\" he called out, shaking his head to clear it for what seemed like the most monumentally important decision of his life. \"Um... I dunno! Where do you want it?\" he asked sheepishly.\n\n\"Hmm... Well... I was thinking that I could swallow your cum, that would be really nice, but if you wanted you could paint my pretty, slutty face or cover my big, perky tits?\" she asked, willing to accommodate any of his desires.\n\n\"I want you to be happiest,\" he encouraged, \"especially with this amazing blowjob, I'll do anything you want!\"\n\n\"Well then, stud... I want to take your jizz in my throat and swallow it all down. How's that sound?\" she asked in a sexy moan, imagining the feeling of his cum pouring into her belly.\n\nMark didn't answer verbally, instead reaching down and using his hand in her hair to guide her back to his eager cock.\n\nIt didn't take long after that, but when Mark started to get really close they both realized he was about to collapse onto the tile floor and broke apart, laughing. A quick trip to Lexi's bed ended in Mark sitting on the edge with his goddess of a girlfriend kneeling between his legs, slurping excitedly on his throbbing shaft.\n\n\"Oh, baby! I'm about to...\" he trailed off, wanting to give her warning but unable to form more words.\n\n\"Uuuum errrr eeee\" she moaned around his shaft, taking him deeply into her throat and feeling him throb, growing bigger in anticipation of his release.\n\n\"Fuck! Oh my god YES!\" Mark almost howled, shooting jet after jet of hot cum into his lover's throat. His eyes fluttered, and he was lost in sublime happiness. When his balls were depleted, he sank back onto the bed, and before he could process what was happening he was lightly asleep.\n\nHe woke up a few minutes later with a gigantic smile on his face, and Lexi's gorgeous body pressed into his. Her big, soft tits conformed to the shape of his arm, and her head rested lightly on his chest. \"Wow...\" He sighed, stroking her hair while she hummed contentedly.\n\n\"So... That was okay?\" she teased, smiling up at him. She wanted to be a good cock-sucker!\n\n\"That was... Wow...\"\" he said, almost lost in a trance. \"I love you, Lexi!\"\n\n\"I love you, too, baby...\" she breathed, and smiled hugely at him. But then her face twinged slightly, and Mark became aware of something hard pressed against his leg.\n\n\"Oh! I'm so sorry!\" he gasped. \"I can't believe how selfish I was!\" he apologized, in awe of how thoroughly she had sucked his brain out through his cock.\n\n\"Shut up, honey,\" she playfully punched his arm, \"I wanted to do that for you! I wanted to please you. Besides, I don't have a pussy and I didn't want to take the time to get my ass ready for you...\" She trailed off suggestively, indicating that sometime soon he would be taking her ass, if she had any say in the matter.\n\n\"That was so amazing, Lexi!\" he assured her, showing with his smile that he harbored no guilt for the blowjob. If she wanted to give him that much uncut joy, he wasn't going to fight it! \"But I came down your throat and you didn't get to finish!\"\n\n\"Oh...\" Lexi flushed and grimaced, realizing her hard cock was pretty obvious between them. \"About that... I'm sorry. You don't ever have to... Like... Touch me down there, okay? I can suck you off and you can fuck my ass and if I really need, I can go and finish myself off in my room alone, okay? I don't want you to see that...\"\n\n\"Honey? Shut up,\" Mark laughed. \"You have nothing to be embarrassed about! You're the sexiest women I've ever seen, and nothing is going to change that. Besides, you're right, we are basically the same size and I have to imagine that the knowing-how-to-pleasure-a-cock thing works both ways!\"\n\nLexi looked at him uncertainly. \"But... You're straight...?\" She trailed off, and Mark nodded. She didn't want her cock to ruin this night, the way she had always feared it would.\n\n\"Yup, and you're the finest woman I've ever been with. And I want to make you feel good! Now... I don't think I ever want you to fuck me...\"\n\nShe shook her head quickly, indicating that she didn't want that. \"Maybe sometimes we can find another girl to share, but I always want you to be the one fucking me,\" she assured him, happy that this was working out.\n\n\"And I'm not sure I'm ready to try... You know... that\" he motioned to indicate the blowjob she had just given him, causing her to once more shake her head in agreement. \"But, well, what you had said about cumming on your tits sounded super hot, and I definitely wanted to shoot down your throat first, but seeing your chest covered in sticky cum does sound so fucking hot!\"\n\nLexi beamed, for the first time thinking of her spurting cock not as a horrible curse reminding her how she had been born with the wrong body, but as a fun toy she could enjoy playing with with her lover.\n\n\"I love you so much, Mark...\" she moaned, and rolled over onto her back next to him.\n\n\"I love you too, Lexi! Now, start touching yourself for me...\" he encouraged, and she tentatively slid her hand down to grip her throbbing shaft.\n\n\"You really don't hate that I have a penis?\" she asked. She could tell that he didn't, but she needed to hear it again.\n\n\"I love you, Lexi, and I wouldn't change anything about you,\" he stated firmly, and pushed her hand out of the way, gripping her shaft tight and jacking her off at the pace he knew he enjoyed during his jerk-off sessions.\n\n\"Oh, Mark! I'm so close already, baby. Sucking you off and swallowing your cum was soooo hot, I'm almost there!\" Mark leaned in, kissed her quickly, and then lowered his mouth to her chest to let her pant and moan unobstructed. When he took one of her rigid nipples into his mouth and sucked, she pushed his head out of the way and bucked her hips.\n\n\"Yes, Lexi, cum for me!\" Mark encouraged, moving his hand quickly and being sure to aim her cock directly at her heaving tits. The first jet of cum rocketed out, and Mark noticed it was clear and runny, as opposed to white and sticky.\n\n\"FUCK!\" she screamed, painting her own breasts with cum over and over again. She writhed and contorted, her legs trembling as her own cum splattered across her chest.\n\nWhen her orgasm subsided and she lay catching her breath, Mark stared at her boobs in fascination. \"Looking at my tits, or my cum?\" Lexi eventually asked playfully, still somewhat breathless from the most powerful orgasm of her entire life. Apparently accepting her body the way it was and being comfortable sharing it helped increase pleasure! Who knew?!\n\n\"Your tits are fucking perfect, you know that,\" Mark admitted happily, \"but your cum is so... Clear!\"\n\n\"Hormones, man,\" she laughed. \"I never went through male puberty, so my balls don't produce sperm. If you're ever curious, it actually tastes kinda sweet,\" she laughed, breaking off into a rapturous moan when Mark sucked a cum-covered nipple into his mouth and flicked it with his tongue.\n\n\"You're fucking delicious,\" he told her happily. \"I don't know if I ever want to suck your cock, but I have no problem tasting you! Especially off your amazing body...\"\n\n\"I didn't think you'd actually take a taste!\" she admitted. \"Now, I believe we were getting that tension out of the way before we had a talk?\"\n\nMark laughed as Lexi giggled, and both smiled hugely. \"I mean, I don't know what we really need to talk about,\" Mark explained, \"I love you, you love me, our parents will be thrilled, Mary can be your maid of honor...\"\n\nLexi burst into a huge, radiant smile and hugged him tight, her sweet cum squishing between them. \"Don't you think that's moving a little fast?\" she teased.\n\n\"I've been falling for you for like 20 years, babe,\" he laughed, \"this is a marathon of a courtship!\"\n\n\"Well, before we start telling people, I do want to do one thing...\" Mark looked at her expectantly, and she went on. \"I told you it would take a while, but we don't have class tomorrow and I definitely think I can take the time to get myself ready...\" Mark kissed her passionately, which she returned with just as much excitement, and before long Lexi scurried off to get her asshole ready for her new boyfriend.\n\nAs per usual at their sleepovers, they didn't fall asleep until early in the morning.\n\nChapter 2\n\n\"Oh my god, Mark! Fuck, that feels so good!\" panted Lexi, staring over her shoulder with wild eyes at her boyfriend, who was busy pounding away at her tight asshole.\n\n\"Lexi, baby! I'm gettin close,\" he warned her, smiling as he smacked her ass with a loud clapping sound. Her perfect body really never failed to delight him!\n\n\"Oh baby, please, yes!\" she begged, \"Fill my tight little ass with your thick, creamy cum!\"\n\n\"Oh baby, here it comes,\" he told her while speeding up in his final thrusts. \"FUCK! Oh yes, baby, take it in your ass!\" he moaned, cock spasming in her asshole and flooding her ass with his cum. Several powerful spurts, followed by a few weaker ones, left his seed dripping from her rear entrance as he withdrew slowly.\n\n\"Thank you, baby,\" purred Lexi after the two had cuddled for about 10 minutes, batting her eyes at him the way she knew he liked. \"So anyways, what were you saying before, well... That?\" she teased, smirking at him. She knew he could never resist her, especially when she offered him her tight asshole.\n\n\"What? Oh, right...\" he struggled to remember anything other than the sensation of nailing his girlfriend. \"Oh! Yeah, so are you really for real about what you said about this weekend?\" he asked nervously. Her suggestion had been pretty out there!\n\n\"Oh, that? Yeah!\" she smiled and assured him enthusiastically. \"Carla is easily the second hottest girl on the cheer squad - behind yours truly, of course - and I think she's definitely got the hots for my stud boyfriend!\" Mark blushed, sure she was exaggerating things.\n\n\"Suuuuure, babe,\" Mark said humbly. \"But, well... What about you?\" he asked uncertainly, not sure how to ask what he meant.\n\n\"You mean does she know the plan would be to spit-roast her?\" Lexi asked innocently, loving how her dirty mind made Mark blush. He nodded, and she continued, \"well, she knows the idea is to share her and I warned her about a DP...\" she trailed off. She flushed a little bit from guilt at deceiving her boyfriend; her teammate didn't actually know about this plan, but she would bring it up soon, if Mark was on board!\n\n\"Baby! We need to warn her beforehand,\" Mark admonished, nervous for her sake. Her secret was a lot to reveal!\n\n\"Ugh, fine! How about you do that? Like ask her out to lunch or something, flirt with her, and if you think she's worth it then you let her know!\" Mark rolled his eyes and nodded, relenting. It was her secret, after all, so how to reveal it was her call in the end. He was happy to help do so in the most comfortable way possible for her.\n\n\"Okay, sure, I'll ask her out... Tomorrow?\" he asked, and smiled when she nodded. \"After the game?\" She broke into a huge grin, knowing her slutty teammate would agree to anything their school's star quarterback asked her coming off of a win.\n\n\"Glad that's sorted!\" she told him truthfully. \"Now, you emptied your balls into my ass, so... Do you think you could help me out?\" she asked sweetly, looking up from where her head rested on his chest.\n\n\"Of course, sweetheart!\" he answered immediately, and reached down to grasp her hard cock. \"Do you want to spray your cum on your face or your tits today?\" he offered playfully.\n\n\"Ooh! My tits, for sure,\" she responded with enthusiasm. \"And you can lick it off again?\" He nodded happily; he loved the taste of her hormonally-changed cum, especially off of her perky nipples. \"And when we fuck Carla, you can eat it out of her pussy!\" she exclaimed, before her moaning took over her vocal capacity as Mark brought her right to the edge. Soon, she was screaming and writhing on the bed, begging him not to stop, until she had drained her sweet cum onto her own chest. Mark eagerly licked it up, driving her to another, smaller orgasm.\n\nAfter Mark lovingly, sensuously cleaned all of the thin, sweet cum off of his girlfriend's spectacular tits, the two fell asleep cuddled together, as they did every night, dreaming of the other and their future.\n\nMark and Lexi had grown up together, being best friends since they were incredibly young, back when Lexi had been Alex, a young boy Mark's age. She had come out to him as trans, and his support had helped her accept who she really was. A few weeks ago, they had finally admitted how in love they were with each other, and started dating. It wasn't all passionate fucking, but that was how many of their evenings were spent!\n\nRecently, Lexi had been more aggressive about her idea of inviting one of her fellow cheerleaders into their bed. \"I'd never want to fuck you, baby, because that's not our relationship,\" she explained, \"I love how you take me and penetrate me and... Fuck! I'm getting so hot!\" she explained eagerly. \"Anyways,\" she went on, playfully fanning herself to exaggerate her horniness (though it wasn't far from the truth), you're the one who does the fucking here, but I do want to try getting my cock wet...\" she trailed off, sensually stroking her shaft while looking her boyfriend in the eyes. \"And that's where Carla could come in... Just imagine it: Me pounding away at her pussy; my big, perky tits bouncing like crazy while I thrust; your hard cock in her mouth; that crazy slut going wild between us. Doesn't that sound amazing?!\" she demanded. Mark nodded slowly. It did sound incredible, and he would never want to deprive Lexi of that experience... Fine! He agreed, and the two got to planning.\n\n\"Wow! They were really on fire tonight!\" Carla exclaimed, leaning into Lexi for a big hug as the cheer squad jogged, skipped, and cartwheeled off the field after the resounding win Winston University's football team had just wracked up.\n\n\"They really were!\" Lexi agreed, beaming, \"especially my Mark!\"\n\n\"Oh sweety, he was amazing!\" Carla told her earnestly, \"you got anything special planned to... Y'know... Reward him tonight?\" she winked, imagining that the incomparably sexual freshman cheerleader would be giving her man quite the congratulations in the privacy of their apartment later on.\n\nLexi blushed, smiled, and pulled Carla close. \"Between you and me?\" she asked, and her teammate immediately nodded her agreement. \"Well, I already let him have my ass whenever he feels like it, and I blow him almost daily, so... I might be out of tricks!\"\n\nCarla pulled away and giggled naughtily, not sure what to say in answer. \"In fact...\" Lexi went on, \"I was thinking you could help me reward him tonight?\" The latina cheerleader just stared at Lexi in shock. She was kidding, right?!\n\n\"Uh... Ha ha, okay, yeah, sure...\" she trailed off, but the earnest look on Lexi's face made her pause and consider if she was really being serious. \"Wait... Like... What do you...?\"\n\n\"It's not some big deal, really,\" the energetic cheer goddess assured her, \"I just may or may not have told him that you were interested in joining us...\" Carla flushed immediately.\n\n\"Lexi! I... I never...\" she stammered.\n\n\"I know, babe, you would never tell me that you want to fuck my boyfriend, right?\" Carla nodded, unsure if she was in trouble; if Lexi had somehow realized that she masturbated to thoughts of Mark after most of their games.\n\n\"He's so obviously so happy with you!\" she told her friend, scared of ruining their friendship.\n\n\"I know, Carla. Believe me, I know I keep my man happy!\" Lexi said confidently. \"It's just that, well... Fine, I'll be honest: I have always really wanted to try pussy, and I know Mark would go crazy watching me with another girl!\"\n\nCarla froze. What?! \"Um... Wait, so you...?\"\n\n\"Ugh fine! I was trying to be all coy and flirty, but yeah, here we go: Carla, will you have sex with me while Mark watches and participates?\" Lexi asked sweetly, loving how her friend blushed with this direct question.\n\n\"Uh... I... Well...\" Carla started, heart beating a mile a minute. Then she paused and thought about it. She had always wanted to try being with another girl, and she had been fantasizing about Mark since the first time she saw him at practice (plus, a good number of her fellow cheerleaders had been quite vocal about their appreciation of Mark's... talents, before Lexi had finally sealed the deal and claimed him as her own), so... Why not?\n\n\"You can think about it if you need?\" Lexi offered sadly, disappointed that her plan seemed to not be working.\n\n\"I'd love to,\" muttered Carla, shaking her head to psyche herself up.\n\n\"What?\" Lexi asked, not sure what exactly she meant.\n\n\"I'd love to have sex with you both!\" he clarified, smiling shyly at her teammate. \"I've never been with a girl either, and Mark's like the hottest guy on campus, so... Fuck it, right?\"\n\n\"Oh perfect! This is going to be so much fun!\" Lexi enthused, thrilled that everything seemed to be working out. Now there was just the minor task of letting Carla know that she, the model-gorgeous young woman whose body was the envy of every coed girl on campus, had a cock. Not just that, but a big, hard, beautiful cock that she wanted to make her friend scream with. That revelation was going to be interesting...",
        "When Mark and some of the other players on his team started to leave their locker room, they noticed a group of cheerleaders waiting for them by the entrance. The loud joking around quieted down as the sexual tension increased, seeing the beautiful ladies watching them with hungry expressions. Those who were in relationships with the guys on the team went to them and seductively led them away, back to whoever's dorm was closer, while the single cheerleaders just looking to fuck to celebrate the win started flirting and trying to win the attention of their chosen targets. Of course, the horny college boys, still high on the adrenaline rush of their win, were trying even more desperately to woo one of the hottest pieces of ass on campus, and so the usual jockeying for position and attention began immediately in full swing.\n\nAll of the girls on the squad knew better than to attempt anything with Mark. He was the most devoted, madly-in-love guy they had ever seen, and they knew they couldn't hope to compete with Lexi. That girl's body was like something out of a Playboy magazine, and they knew from her stories that they had quite the fulfilled sex life, as well as one of the most heart-warming love stories of all time.\n\nMark, for his part, looked around in search of his girl. The game had been incredible, and he knew how horny it made her to watch him lead his team to a resounding victory, so he was almost definitely getting lucky tonight. Just the thought of her on her knees before him caused his dick to swell in his pants, and if everyone else around him hadn't been actively trying to get laid he might have been embarrassed. Not that he had anything to be embarrassed about, with 8 hard inches of cock that a quarter of the women here had enjoyed quite thoroughly. But now, he had eyes only for his lifelong best friend, and his fantasies of what they would be doing shortly caused him to totally forget what her plan had been.\n\n\"Hey, Mark!\" Carla said from the side, causing Mark to snap his attention to her. She looked amazing in her tight, form-fitting cheer uniform, and he thought he could detect the absence of a bra from the sway and bounce of her breasts, and suddenly Lexi's plan came back to him. He froze in his tracks, and she sidled up to him, rubbing her body against his arm.\n\n\"Hey, Carla...\" Mark said uncertainly, not sure what he was supposed to say.\n\nThankfully, Carla relieved him of that pressure by leaning into him, mashing her tits into his side, and whispering in his ear, \"Lexi went home to get some stuff ready, you know, for tonight... She said we should take a walk around campus and join her once she texts us.\" Her tone left very little mystery about what she thought would be happening back at the apartment.\n\nMark gulped and smiled shyly. He hadn't flirted with anyone else since professing his love for his girlfriend! Seeing him being bashful, Carla smiled encouragingly and took his hand, leading him away and starting their walk.\n\nOn their way around the small lake on campus, they talked about the game, and school, and their lives before college, and his relationship with Lexi. He told her the story of how their friendship had become more (leaving out the choice details of Lexi's big, hard, 8 inch secret) and Carla could not stop fawning over how adorable the two were together. \"I'm just so happy for you both!\" she sighed. Mark smiled; he was happy for himself, too.\n\n\"Well, so... I'm supposed to talk to you about something,\" he began, and Carla moved closer with an eager expression on her face.\n\n\"You can tell me anything, Mark!\" she assured him, and her smile made him trust her. He told her everything, from a quick version of Alex's realization to Lexi's transition to their first time together. She stared, slack-jawed, in rapt attention at him while he related his girlfriend's big secret. When all the background had been laid over about 10 minutes, he ended with a heartfelt plea to her.\n\n\"So... She's the love of my life, and I love fucking her, but with our relationship being the way it is and my own preferences she doesn't exactly get to fuck if you know what I mean. She wants that experience, and I want her to have it. She wants to be with you because she says you're the second-hottest girl on the squad,\" Carla giggled at that, flattered, \"and I hope you say yes! But no matter what, please please please do not tell the rest of the girls. Please, promise me you'll keep Lexi's secret?\"\n\nThe latina took less than a second to think about it, then moved closer to Mark and pressed her by-now-clearly-braless tits against him. \"I can promise you 2 things, Mark,\" she breathed seductively. \"First, I would never betray my friend's trust like that. Not ever. And second, since apparently Lexi hasn't laid claim to this title, I am going to be the tightest, hottest pussy you've ever fucked! That's true for both of you, of course,\" she moaned seductively. \"Just the thought of both of you fucking me at the same time, 2 hard cocks pushing into me and making me scream and beg and cum... Fuck!\" she gasped, feeling her pussy gush down her legs. She hadn't worn panties for obvious reasons, and the scent of her arousal was heaven to Mark's sensitive nose.\n\nMark took out his phone and texted Lexi, just a winky-face emoji that told her a whole wealth of information, and Carla looked a bit confused. \"I thought she was texting us when she was ready?\" she asked.\n\nMark laughed and shook his head. \"She didn't really need more than 10 minutes, and we've been talking for like half an hour. She told me to take my time, get to know you, and make sure I was okay sharing you with her. Well, I am, so let's go!\"\n\nThey almost jogged back to Lexi and Mark's apartment off campus, and when they stepped inside they were greeted by the scent of candles burning. \"Honey, I'm home!\" he called out playfully, smiling at Carla like it was an inside joke.\n\n\"And he brought pussy!\" the cheerleader called out, giggling at her own flirtation.\n\n\"Ooh, perfect!\" came Lexi's answer as she stepped out of the kitchen into the entryway hall. \"I'm so in the mood to try some!\"\n\nLexi looked flawless. Her toned body, with its narrow waist, broad hips, and flat tummy was mostly visible through a sheer negligee. Her big, firm tits strained against the fabric, causing her nipples to show through basically unobstructed. And last but certainly not least, the bulge of her hardening cock swelled at the front of her lace panties, stretching the seams and revealing the full rigidity of her package.\n\n\"Holy shit...\" muttered Carla, unable to tear her eyes away from the bulging cock almost visible before her. After a few seconds, she raked her eyes all over her teammate's body, and her jaw dropped further. \"You look...\"\n\n\"Delicious?\" Lexi asked playfully, and Carla nodded. \"I know, and trust me there's plenty of time to taste,\" she teased, \"but first shall we adjourn to the bedroom?\" The two new arrivals nodded wordlessly, removed their shoes, and followed Lexi's swaying hips and ass up the stairs to the boudoir.\n\nWhen they entered the room, they noticed the flickering candles, the bed strewn with rose petals, and the collection of lubes and sex toys arranged on the night stands. \"As you can see, I wanted this to be perfect,\" Lexi breathed, suddenly nervous.\n\n\"It is, babe!\" Mark told her enthusiastically, noting her anxiousness and wanting her to feel confident in what they were doing.\n\n\"This is amazing...\" Carla whispered, stepping close to her teammate and wrapping an arm around her thin waist. \"Before we really get started...\" she purred, pulling Lexi in for a kiss.\n\nLexi's eyes went wide for a moment, before she closed them and blissfully kissed her friend. They melted into each other, bodies entwining as their tongues tangled and both women moaned through the kiss. Watching the sapphic display made Mark's cock throb, but he just watched as his girlfriend experienced her first lesbian kiss.\n\nFinally, after a few minutes of passionately making out, Lexi pulled away and turned with flushed cheeks to her boyfriend. \"Feeling left out?\" she teased. Mark just shook his head, and she laughed.\n\n\"I bet he could watch us kiss all night!\" Carla exclaimed, loving the effect she was having on the young couple. She could see Mark's hard cock through his pants, and feel Lexi's through her lingerie. This was going to be fun!\n\n\"I'm sure he could,\" agreed Lexi. \"Hey babe,\" she directed at Mark, \"before we involve you, do you think Carla and I could 69?\" Mark's cock throbbed through his pants, which was plenty of answer for her question!\n\n\"Ooh!\" Carla giggled excitedly, \"I've never sucked a girl-cock before!\"\n\n\"She has a nice cock,\" Mark told her honestly.\n\n\"He's just saying that because it looks almost exactly like his,\" teased Lexi, smiling at her boyfriend and agreeing with him. Their dicks were beautiful!\n\n\"Well I want a taste!\" Carla demanded, pushing her teammate onto the bed and practically diving between her legs.\n\n\"If you see it all the way to the end, her cum is delicious,\" Mark informed the latina, who looked confused.\n\n\"I thought...\" she trailed off, uncertain about the image of Lexi's boyfriend sucking her cock.\n\n\"Oh, he doesn't blow me,\" laughed Lexi. \"No, my man is the only one who gets his dick sucked when we're alone. But my cum is actually tasty, because of all the hormones, and we both like it when I shoot all over my own tits for him to clean up...\"\n\n\"Fuck, that's hot...\" Carla moaned, her pussy gushing at the thought. \"So you've never cum in anybody's mouth before?\" she asked sweetly. Lexi shook her head, excited where this was going, and the cheerleader slowly pulled her thong down, causing her rock-hard cock to spring free. \"Well, my slutty throat is honored...\" Carla breathed, and then liked Lexi's shaft from base to tip, eliciting a high-pitched moan from the girl lying on the bed.\n\n\"Carla, oh fuck yes!\" Mark exclaimed, watching his girlfriend be expertly fellated by this latina minx. \"That is so hot! Can you deepthroat her cock, baby?\" he asked, trying to make sure Lexi got the best experience possible. In answer, Carla slid her lips all the way down Lexi's shaft until they pressed against her hairless pelvis, and looked up at Mark. She gave a sly wink, and then retreated back up the shaft slowly, lathing all over as she went.\n\n\"That answer your question?\" she asked sweetly, and Mark just stared slack-jawed at her. \"Now, do you want your dick sucked, too?\" she offered, licking her lips as she eyed the bulge in his pants.\n\n\"No!\" Lexi interrupted, sitting upright. \"First you have to sit on my face, Carla! And then we can suck his cock together. How does that sound?\"\n\nCarla shivered in arousal at the thought. She quickly climbed onto the bed and straddled Lexi's face, lowering her dripping slit to her friend's mouth, where it was greeted by her eager tongue.\n\n\"Mmmmm...\" Carla moaned, grinding her clit against Lexi's lips and savoring the sensation before lowering her head to again suck the throbbing girl-cock back into her mouth.\n\n\"Now, she's never had her cock sucked before,\" Mark explained with barely-restrained enthusiasm, \"so she might go off pretty quick... If she does, I promise I'll take over and make you cum, Carla.\"\n\n\"Oh uucck eesss\" the latina mumbled around Lexi's shaft, and Mark saw how excited she was by the whole situation.\n\n\"Oh fuck!\" Lexi called out, pulling her mouth an inch from Carla's pussy to shout her joy to the room. \"Fuck, baby, yes! Oh, I'm close! I'm gonna... I'm about to... YES!\" she screamed, and Mark saw her cock throb and her balls clench while she blasted a huge amount of delicious, sweet cum into Carla's mouth.\n\n\"Lick her!\" Mark encouraged, and Lexi immediately raised her lips again to flick across Carla's clit with fierce determination.\n\n\"MMMMMM!\" Carla moaned, swallowing as rapidly as rapidly as she could. The combined sensations of the thin, delicious cum in her mouth and throat and the frantic movements on her clit set her off, and her legs tensed around Lexi's face while she bucked in a powerful, uncontrollable orgasm. Mark just watched, awe-struck, while his soulmate and their lover for the night experienced mind-bending climaxes.\n\nAfter a few minutes of panting, shaking, and experiencing light aftershocks, the two girls pulled away, with Carla rolling to the side and turning so their heads were together. \"Fuck, Lexi...\" Carla muttered, completely flabbergasted at how amazing their mutual pleasure had been. \"That was really your first time eating pussy?\" she laughed, unable to believe it.\n\n\"Yup!\" Lexi yipped, beaming at her, \"though Mark did give me some helpful advice.\"\n\nMark laughed and smiled, happy to be given some credit for Carla's rapturous pleasure. \"I've had... Practice,\" he laughed, and both girls blushed. \"But hey, Carla, so what did you think?!\"\n\n\"You mean how did I like sucking her gorgeous cock, how did I like cumming so hard I think I squirted all over your girlfriend's face, or how did I like the delicious treat she gave me at the end there?\" Carla giggled.\n\n\"Well really, I meant how would you feel about sharing...?\" Mark asked seductively. Carla moaned and shivered as she experienced another small orgasm, and gestured him over to have their first kiss. Lexi's sweet cum passed between their mouths and both moaned with the intensity of their impromptu make-out session.\n\n\"Damn, that's hot...\" Lexi breathed, still recovering from the strength of her orgasm. \"So... I can usually go again after like 10 minutes...\" she suggested quietly, and her two lovers stopped kissing to smile at her.\n\n\"It seems like Carla would be happy to have us both fuck her, right?\" Mark asked playfully, and Carla's exaggerated nod made it quite apparent she was looking forward to it.\n\n\"But in the meantime...\" she started, \"Lexi, how would you feel about introducing me to Mark's cock?\" she asked sweetly.\n\n\"Oh, I would love to!\" Lexi almost shrieked with excitement, and practically dove towards her boyfriend. She began unbuttoning his pants as fast as she could, and then pulled a cock very much like her own. \"As you can see, we're quite similarly equipped...\" she purred, sensuously rubbing her face along his shaft and looking up at him.\n\n\"Fuck, this is gonna feel GOOD, huh?\" Carla laughed, almost unable to wait to be plowed by both 8 inch cocks at the same time.\n\n\"Fuck yeah it is!\" Lexi told her, and then had an idea. \"How about while I recover, before I'm ready to fuck your gorgeous pussy, you let Mark sample the goods?\" she asked generously. She had already planned on letting Carla suck Mark off, but if the two were less serious about each other she would have been insecure about letting him fuck a pussy. The way things were, though, she knew it would be fine, and if anything she wanted to take notes on how he used his cock to pleasure the latina; he was somewhat of an expert at fucking young women, and she was an absolute novice!\n\n\"Hell yes!\" Carla exclaimed, her pussy dribbling a bit of her own juices mixed with Lexi's saliva when she tensed up in anticipation. She had heard her teammates talk about his legendary fucking, and now it was her turn!\n\nFor his part, Mark worriedly looked at his girlfriend, making sure that she was cool with this. Her huge smile told him to proceed, so he confidently moved between Carla's legs and lined up his shaft.\n\n\"Fuck her, babe!\" Lexi encouraged, and craned her neck to kiss her teammate, making all of them that much more excited.\n\n\"HOLY SHIT!\" the young cheerleader screamed at the top of her lungs, feeling like Mark's penetration was tearing her in half.\n\n\"It's big, right?\" Lexi teased, turning her head to watch the mating taking place.\n\n\"So fucking big!\" Carla whined, closing her eyes and wincing while Mark held still, just the first few inches of his shaft inside of her, letting her get sued to his size.\n\n\"And just think...\" Lexi whispered conspiratorially, \"I take that in my ass...\"\n\n\"You WHAT?!\" Carla demanded, looking to be in utter disbelief before the naughtiness of the thought and the pleasure of being stretched so wide pushed her to an incredible orgasm. \"OH MY GOD! Yes! Yes! Si! Si! Dios mio!\" she panted, the feeling so powerful she reverted to Spanish.\n\n\"I think she's having fun,\" Lexi smirked at her boyfriend, loving that they got to share this - share her.\n\n\"I'd say so,\" Mark chuckled, watching Carla's breasts heave while she gasped for air. After about a minute, when she had calmed down a bit, she looked up into his eyes with a pleading expression. \"Please...\" she rattled, desperation evident in her voice, \"please... fuck my pussy!\"\n\nThat was plenty of encouragement for Mark, and he began slowly sliding in and out of her, making her moan as he gradually increased the depth of his penetration. \"I wonder if she'll love my cock that much...\" mused Lexi, and the thought prompted yet another orgasm from the petite cheerleader, this one including a very pronounced gush of fluids all over the invading member.\n\n\"I know she will!\" Mark said happily, loving the feeling of Carla's tight, wet, orgasming pussy and the intimacy he was sharing with his girlfriend. \"Do you think you're almost ready?\"\n\n\"Hmm... I think so!\" Lexi told them, gripping her once-again rock-hard cock in her hand. \"Okay, so Carla you're gonna want to flip over, and Mark you come kneel by her head while I go where you are...\" she strategized. After a bit of maneuvering, Carla was on her hands and knees, eagerly looking between the two rigid, almost-identical cocks about to enter her.\n\n\"Oh my god, this is so hot...\" she breathed, barely able to believe how amazing this whole experience was.\n\n\"Are you both ready to lose your girl-cock virginity?\" Mark teased, and both women shuddered in anticipation. \"Great, well here we go...\" he said calmly, moving the head of his cock to rest against Carla's lips.\n\nShe sucked him in and was about to start licking him, but just then Lexi pushed into her slick pussy and she lost all thought. \"YES!!!\" she screamed out, feeling almost the exact same physical pleasure as when Mark had entered her, but now combined with the naughtiness of the cock being attached to a sexy, feminine cheerleader and having that cheerleader's boyfriend's cock in her mouth. She shook and trembled through her first spit-roasted orgasm, and Lexi couldn't keep the massive grin from her face.\n\n\"I did it! I made her cum!\" she bragged, smiling at Mark.\n\n\"You really did, babe!\" he congratulated her. \"Now, to make it extra intense for her, start to move just a little...\" She did, and the latina's moans increased.\n\n\"This is so fucking hot,\" Lexi gasped, remembering to breathe and staring with amazement at the point where she was joined with ehr teammate.\n\nThey fucked Carla together for several more minutes (and a bunch more orgasms) before Lexi had an idea. \"How about one of us fuck ehr ass?\" she suggested coyly.\n\nCarla spluttered as she jerked her head away from Mark's cock. \"No! Nope! Nuh-uh!\" she objected, shaking her head wildly. \"You'd tear me in half!\"\n\n\"But come on,\" Lexi giggled, \"I take him back there all the time...\"\n\n\"Yeah, because you're a fucking sex goddess!\" Carla stated firmly. \"Maybe next time he can fuck your ass while you fuck me or something, but my poor little butthole isn't close to ready for that!\"\n\n\"Next time?\" Mark interjected curiously.\n\n\"Oh fuck yeah!\" Carla answered, smiling at the young couple. \"Pleeeeease?\" she asked cutely.\n\n\"Absolutely!\" Lexi promised her friend, and then started fucking her again. \"Come on, babe, I'm getting close and I think we should all cum at the same time...\" she told Mark, who started thrusting rapidly into the latina's mouth to catch up.\n\nAfter about a minute, Lexi was barely holding back her cum, and Mark had gotten himself ready to fill Carla's mouth. \"I'm right there...\" Lexi warned, and the prospect of being filled from both ends set Carla off. She started bucking and squirming and moaning around Mark's cock, and her clutching pussy and vibrating mouth set off the 2 cocks in her at the same time. Lexi and Mark locked eyes as they emptied their balls into their new girlfriend (or fuck buddy?) simultaneously.",
        "Everybody twitched, moaned, and shook through their orgasm, and then they all collapsed together onto the bed. They lay there, painting, for several minutes before Mark hungrily moved to Carla's pussy to eat his girlfriend's cum from her beautiful snatch.\n\nHe drove Carls to a couple more orgasms while the two women made out tenderly, caressing each other's tits and smiling at their shared joy.\n\nWhen she was finally empty of tasty cum, Mark slid up the bed so that both girls could rest their heads on his chest. \"That was...\" he began, unsure of how to finish the sentence.\n\n\"Unbelievable...\" Lexi breathed, her head in the stars from the experience of losing her virginity as the penetrator.\n\n\"Absolutely fucking amazing!\" Carla said with joy evident on her face. \"Wait until the rest of the squad hears about this!\" she excitedly fantasized out loud, so happy she got to be the couple's first.\n\n\"No!\" Mark cut in, panicking, \"you promised!\"\n\n\"Oh, duh!\" Carla said apologetically. \"No, like the secret is yours of course, I just mean that I know none of those girls would have any problem, and if you're interested, I know they'd be down to play...\"\n\nLexi thought about it for a moment before breaking into a huge grin. \"Hmm... How about we see if Heather, and Monique, and Charlotte want to celebrate the next win together?\"\n\nChapter 3\n\nComing off of the field to wait for the football team by their locker room door, the cheerleaders split into 3 groups: Those who had boyfriends on the team and would be leaving with them, those on \"Team Mark\" who would be escorting the star quarterback home to his off-campus apartment, and \"Team Lexi,\" who would be accompanying his girlfriend.\n\nIt was almost the end of the regular season, and for a couple of months now the cheerleaders not already in committed relationships had been taking it in turns to be fucked by Mark or by his girlfriend, both of whom had thick, hard, 8 inch cocks. Nobody was really able to decide which cock was better, and their sexual styles were pretty different (with Lexi tenderly making love to them and pressing all of their buttons, setting off indescribably perfect, full-body orgasms; while Mark pounded them into submission and made them cum so hard they often forgot their own names), so the girls had formed the habit of rotating to keep things fresh and exciting for everybody.\n\nAfter every post-game orgy, though, Mark invariably ate his girlfriend's sweet, hormonally-altered cum out of whichever lucky pussy (or off of whichever excited pair of tits) had been lucky enough to receive it, before starting a round of passionate kissing that they all enjoyed thoroughly, sharing her seedless ejaculate.\n\nEverybody was super happy with this arrangement, and of course combined with the steady supply of anal sex and blowjobs for Mark that the couple enjoyed together almost daily, their own intimate relationship had only grown stronger and more secure.\n\nWhen the rest of the girls left, exhausted and sore, a couple of hours later, Lexi and Mark lay cuddled up in bed. \"I love you so much,\" they each whispered at the same time, laughing lightly, smiling, and gazing into the other's eyes as they fell asleep.\n\nThey had become absolutely devoted to one another, and already planned on their long and happy future. They were thinking of possibly asking one of their mutual lovers to be a surrogate in a few years, but that's a story for another time!"
    ],
    "authorname": "ClarasBestFriend",
    "tags": [
        "transsexual",
        "transgender",
        "tgirl",
        "best friends",
        "friends",
        "college",
        "girlcock",
        "tasty cum",
        "soulmates",
        "anal"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/more-than-friends-pt-01"
}
{
    "title": "Dawn's Anal Awakening Ch. 07",
    "pages": [
        "Dawn helps a bullied older student.\n\n8======D ( ) ; ( )\n\nDawn Simmons, anal slut extraordinaire, sighed as she tapped her pen against her lips. She was sitting at the varsity's coffee corner, waiting for her tutor to arrive. \n\nIt was the second semester of her first year in Wheaton, and she was having a little trouble with the statistics class. She was great with algebra. Statistics? Not so much. Which was why she had sought out the help of Greg Brenner, a supposed math whiz. \n\nHe was supposed to meet her in the cafe at 2 pm, but it was already 2:30 pm. Had he ghosted her? Dawn folded her arms across her 32C chest, wishing she was back in her room, sliding her slutty asshole up and down the dildo that Eric had sent her. Kennedy was away for some TA thing and had been away for three days now. She was only coming home on Saturday, another two days of sexual unfulfillment.\n\nEver since their mutual confession of love, Dawn Simmons and Kennedy Harper had officially become girlfriends. \n\nIt felt like everything had changed, and yet nothing had changed. Dawn was officially attached and usually that came with monogamy. But Kennedy was very concerned about fulfilling Dawn's anal needs, one of which was getting her slutty rear filled with jizz on a regular basis, and that meant that she agreed that Dawn was allowed to fuck men that Kennedy had personally vetted. Right now, Kennedy only trusted the twins with Dawn's ass. While they were indeed, great guys with impeccable butt-fucking skills, they weren't always available. And Dawn couldn't spend all of her time at their place getting plowed. She had a duty to her schoolwork as well!\n\nDawn sighed, looking at her phone again. 2:45 pm. She should just leave and try another day, or another tutor!\n\n\"So sorry I'm late!\" \n\nDawn looked up as a tall skinny young man slid into the seat in front of her. His ginger hair was all mussed up and his glasses on his face were askew. It looked as if he had ran across campus to make it there!\n\n\"Sorry, sorry. I got, uh... got uh... caught up,\" he said, his pale freckled cheeks flushing with embarrassment. \n\nDawn just sighed. As much as she wanted to get angry, she needed his help to ace statistics! There was no way Dawn was settling for a B!\n\n\"It's fine, Greg. Can we get started?\" She cracked open her textbook to the concepts she couldn't solve. \n\nGreg scooted his chair close to take a look.\n\n\"So I don't get where I went wrong here,\" Dawn said, showing him the working.\n\n\"You're applying the formula for two factors. This is a trick question, this particular value is not considered in this situation,\" Greg pointed out. \n\nDawn reread the question and smacked her forehead. Of course! Higher education level questions wouldn't be as straightforward as high school level questions! \n\n\"Try this one,\" Greg said, pulling her paper over and scribbling down the formula off the top of his head. Dawn was a little jealous of how easily it came to him. Then again, everyone had things that they excelled at. Greg's happened to be statistical analysis, Dawn's was getting dicked in the rear!\n\nThey worked together for a little while when suddenly a shadow loomed over them, blocking the light from overhead.\n\n\"Hey, Brennerrrrrrr,\" the giant hulk of a young man said. He was wearing the varsity jacket, which looked good on him.\n\nGreg flinched, huddling in on himself. \n\n\"H... hey Johnson,\" he stuttered, pushing his glasses up and trying not to meet the larger man's eyes.\n\n\"I'm sorry about earlier, you know I was just teasing, right?\" Biceps Johnson - they were very yummy looking biceps - said, shuffling in place. He ran his hand through his blonde locks and flashed the both of them a big grin. Dawn smiled back. She absent mindedly wondered if Biceps Johnson had been one of the men who fucked her in the ass during the anal train. \n\nGreg didn't look like he thought it was a decent joke, but nodded.\n\n\"Got you some coffee to apologize. Call it even?\" Johnson continued, setting down a large coffee cup \"Made just the way you like it, double shot mocha, extra milk.\"\n\nGreg looked up in surprise, and nodded.\n\n\"Not sure how you know that, but yeah, we're even.\" He took the coffee and smiled. \n\nBiceps Johnson, flashed them another grin, inclined his head at the two of them and then sauntered away, high-fiving a bunch of other young men in varsity jackets.\n\n\"That's weird,\" Greg mumbled.\n\n\"What is?\" Dawn asked, curious. Their interaction had her wondering if there was something deeper going on. After all, Greg didn't look too happy with Johnson.\n\n\"He's usually a bit of a jerk. He poured oatmeal down my shirt earlier and I had to go change, which was why I was late...\" Greg trailed off. He shrugged, a smile stealing across his face \"I'm glad to know he can be nice though,\" he added, taking a huge sip of the coffee.\n\n\"People do change,\" Dawn said, thinking of how she went from unsatisfied teen to anal slut extraordinare. People discovered new things about themselves all the time, right? Maybe Biceps Johnson was just learning how to be a better man. \n\n\"Now tell me, am I doing this right?\" she slid the latest problem over to him. Greg looked it over, taking large gulps of his coffee as he pointed out where Dawn was going wrong. \n\n\"I think you have most of the concepts flipped. You know the formula, just not where to apply it,\" Greg said, using his pencil to circle keywords in the lecturer's examples. \n\n\"See, these two variables are independent but if you use this equation, that means that X is depending on Y, but it isn't. So therefore, you have to use this one...\"\n\nDawn squinted at it, wishing that Kennedy was around. Dawn tended to think better after a good anal fucking. Sometimes, it felt like thoughts and concepts got rattled into place while someone was pounding away at her rear end. \n\n\"I see, so if that's the case, then I'm supposed to use this for question 36 as well!\" \n\n\"Yup!\" Greg said. He wiped his brow and shifted in his seat.\n\nThe afternoon sun was indeed a little hotter than expected. Dawn also shifted around. She unbuttoned another button of her top, exposing the tops of her creamy, white breasts. She was amused when Greg promptly turned his head away and blushed again. Dawn didn't really mind when people looked, as long as they didn't keep staring when they were talking to her. \n\n\"It's getting really hot,\" he squeaked. A bead of sweat rolled down his cheek and then dripped off his chin. \n\nDawn frowned. It was hot, but definitely not that hot! And though she knew she had a sort of effect on many men (and sometimes women), it wasn't that strong, was it?\n\n\"I feel weird,\" Greg said faintly, \"I'm sorry, I think I have to go!\" he squeaked again, grabbing his bag and pulling it over his crotch.\n\nDawn gaped as he tried to get up while concealing his very obvious boner. \n\n\"Are you getting off on statistics?\" she demanded as quietly as she could, shocked that he would spring such a thing on her in the middle of their tutoring session. She was flattered, of course, but in the middle of the coffee corner?!\n\n\"No... no! I just suddenly-\" Greg stuttered. He squeezed his eyes shut, and flapped his hand at her weakly.\n\nDawn looked around wildly to see if anyone else noticed. It was then she spotted Biceps Johnson sniggering with a bunch of other guys, pointing at Greg and slapping their knees. She put two and two together.\n\n\"They spiked the coffee!\" she hissed to Greg. Judging by Greg's sudden boner, she could make a pretty good guess on what the guys put in it! She grabbed at his cup, hoping that he hadn't drunk too much.\n\nBut alas, Greg evidently loved his coffee because it was already two-thirds empty. Dawn didn't know how many pills the dumbasses had put inside the coffee, but if the size of the tent in Greg's pants was anything to go by, they must have used a lot!\n\n\"I'm going to go back and uh...\" Greg said. His face was as red as his hair. He looked so utterly miserable that Dawn didn't feel right letting him just go off on his own. Especially not when he had been so helpful.\n\n\"C'mon, let's go,\" she said, shoving her books into her bag and helping him pack up his things as well. Dawn hauled him out of his chair and angled herself so that she could help obscure his boner from the rest of the cafe's patrons.\n\n\"Wait, you don't have to-\" Greg started. Dawn shushed him.\n\n\"What those jerks did was unacceptable,\" she said empathically, \"I'll walk you back,\" she added firmly. If she unbuttoned another button on her top, most people would be too busy ogling her cleavage to even think about Greg's crotch monster. Dawn did just that and then grabbed Greg by the elbow, dragging him away from the public. As she predicted, more people were distracted by her busty chest, popping out of her too small shirt, than the geeky looking ginger with a boner beside her. \n\nGreg followed her closely all the way until they reached his dorm room. He opened the door and ducked inside quickly. Dawn followed him in. There was dried oatmeal on the floor, probably because of the prank the young men had pulled earlier. Dawn didn't know Greg very well, but from her short time with him, he had been a very nice young man, if a bit shy. She didn't understand why the other guys would do this to him!\n\nThere was a pitiful moan from the bathroom.\n\n\"Thank you, Simmons, I'll just... stay in here,\" Greg said, his misery palpable even through the door. \n\n\"Greg, I...\"\n\nDawn bit her lip. She had been craving dick. \n\nAnd now there was one, rock hard and ready to go, but on the other hand, she was with Kennedy now... and usually Kennedy was the one who arranged for Dawn's anal escapades. \n\nDawn pulled out her phone and dialed Kennedy's number. Fortunately for her, the brunette picked up almost immediately.\n\n\"Heya babe, aren't you supposed to be getting tutored about now?\"\n\n\"Yeah, it didn't go so well.\"\n\n\"Huh? But Brenner's a Math Whiz and he's a pretty nice guy!\"\n\n\"Well, a meathead called Johnson spiked his coffee with Viagra. And now Greg's a little... well, not a little, indisposed...\"\n\nThere was a brief silence on the other end of the phone.\n\n\"Are you calling me to ask if you can ride his cock?\" Kennedy asked. \n\n\"... yes?\" Dawn ventured slowly.\n\nThere was a pregnant pause. Dawn bit her lip and squeezed her eyes shut. She hoped that Kennedy wasn't going to be mad. After all, it was for a good cause.\n\n\"Kennedy, he's really suffering you know,\" Dawn wheedled.\n\n\"I know, I know. Getting dosed with Viagra isn't fun if there's no outlet,\" Kennedy said \"I wish I vetted him properly before this. I don't know if he's any good. I just don't want you to end up unfulfilled, you know?\"\n\nEven so far away, Kennedy still had her sexual satisfaction in mind. Dawn felt her heart skip a beat. \n\n\"It's okay, I can deal with a few less than ideal cums if I can help him out,\" Dawn said \"I just wanted to ask if you were okay with it.\"\n\n\"I... I want pictures, alright? I want to see you riding his cock!\" Kennedy said, lust creeping into her voice. She liked watching Dawn get fucked, and fucked hard. It was a little sad that Dawn wouldn't be able to take a shithole pounding with her girlfriend cheering her on, but it was nice knowing that Kennedy only wanted to make her happy!\n\n\"I will! I'm going to fuck him now, alright?\" Dawn said breathlessly. \n\n\"Okay, have fun, babe!\" Kennedy chirped. \n\nDawn hung up and turned around, a grin splitting her face. She was going get an anal pounding! She knocked on the bathroom door. \n\nThe soft moans inside were bitten off quite quickly.\n\n\"Greg? You okay?\" Dawn asked.\n\n\"... yeah,\" he sounded so defeated.\n\n\"C'mon, let me help.\" \n\n\"What?!\" Greg exclaimed incredulously. \n\n\"Let me in! I wanna help!\" Dawn said again, pressing her shoulder against the door and knocking on it sharply.\n\n\"Did they put you up to this too?\" Greg asked, angry and sad at the same time.\n\n\"What? No! Why would you think that?\" Dawn asked. She wouldn't have pulled such a nasty prank on anyone! That was just too mean.\n\n\"There's no way a bombshell like you would fuck a nerd like me...\" Greg replied, sounding so defeated. \n\n\"That's where you're wrong, Greg,\" Dawn took a deep breath \"I'm an anal slut and I'd love for you to plow me in the ass right now!\"\n\nThere was a silence on the other end, followed by the turning of the knob, then Greg poking his head out of the bathroom, still trying to hide his crotch monster behind the door.\n\n\"I think I didn't hear you right,\" he said, brow furrowed in confusion.\n\nDawn shoved the door wide open, exposing Greg with his pants around his ankles, his angry red cock jutting upwards towards the ceiling.\n\n\"I said I'm an anal slut, and I want your cock in my ass now!\" Dawn declared.\n\nGreg boggled at her, his jaw falling open. \n\nIt was clear that he still didn't believe her! Dawn did the only thing she could do to prove herself. She dropped to her knees in front of nerdy Greg Brenner and sucked his massive rod into her pink wet mouth.\n\n\"Oh my gosh,\" Greg squeaked from above her. \n\nDawn didn't know if his ass-plowing skills were any good, but his dick was definitely one she wanted in her ass as soon as possible. His cock wasn't as thick as some of the things Dawn had stuffed into her ass in search of anal pleasure, but it was decently sized, veiny, and very very hard!\n\nSlurp, slorp, Dawn went, up and down Greg's cock. He had just showered before coming to see her and she could still smell the soap he had used to clean himself. She grabbed his hips and swallowed his cock as far down as she could, smiling up at him from her position at his feet. \n\nGreg was beet red, panting from the exertion of holding himself back.\n\n\"Oh no, oh gosh, oh gosh,\" he chanted as Dawn massaged his cock with her tongue. She could feel her panties getting wetter and wetter and wetter as she sucked. She needed him in her ass and she needed him now!\n\nDawn pulled herself off Greg's tasty dick and grinned up at him.\n\n\"C'mon Greg, this little anal slut needs a good hard pounding in her ass!\"\n\nGreg visibly struggled at the thought for a moment, then steeled himself and helped Dawn to her feet. He fumbled at the buttons of her shirt, freeing her tits from their confines.\n\n\"Gosh, you're so gorgeous Dawn,\" Greg panted out, his long fingers squeezing Dawn's supple tit flesh. \n\nDawn couldn't help but moan at the way he massaged her. Greg was clearly not very experienced, but he learned quickly at what made Dawn moan louder. He slipped one hand down to her skirt, unzipping it and letting it fall to the ground. Dawn stepped out of it and kicked it to the side. Greg reached for her panties, then paused.\n\n\"May I?\" he asked, breathless.\n\nDawn couldn't help but giggle. Even in his hour of great need, Greg was polite and a gentleman!\n\nShe grabbed his hand and stuck it down the front of her panties.\n\n\"That's how turned on I am,\" she cooed, feeling her pussy gush with slick at the thought of getting pounded in the ass.\n\n\"Oh my gosh,\" Greg gasped again. He tugged her panties down and buried his nose in Dawn's bald cunt. \n\n\"Oh oh oh!\" Dawn moaned as Greg used his long fingers and his tongue to lick and lap at her slick pussy. He drank her cunt juices like he was a man dying of thirst and she was the only source of water in the desert!\n\nHis fingers were twisting this way and that way, stroking the walls of her cunt here and there. Anything that made Dawn moan louder or longer, Greg would repeat several times until Dawn was nearly wailing with cunt pleasure! \n\n\"I wanna fuck you so bad, Dawn,\" Greg panted, pulling away from Dawn's cunt to gasp for breath. \n\nGreg's face was completely covered in Dawn's girl juices but he didn't seem to care. His pupils were blown wide with lust and desire. \n\n\"Then do it, Greg! Fuck me right in my teen asshole!\" Dawn goaded him.\n\nGreg growled, lurching to his feet. He grabbed Dawn by the waist and bent her over the sink to spread her asscheeks.\n\n\"Fuuuuuuuck!\" Greg groaned. There, winking at him in the light of the bathroom, was Dawn's bejewelled anal plug.\n\n\"You were wearing this the entire time I was tutoring you?\" Greg demanded. He grabbed the base of the plug and jiggled it. \n\nDawn gasped as her rectal walls were stimulated.\n\n\"Yes, I was wearing it! I wear it all the time! I told you, Greg. I love anal!\" She moaned.\n\nGreg twisted the plug this way and that way, and then teased Dawn by fucking her young shitter with the plug several times.\n\n\"You wear it all the time?\" Greg asked, breathless as he watched Dawn's slutty hole stretch around the steel toy.\n\n\"Yes, yes! All the time!\" Dawn whimpered. The anal plug was nice, but what would be nicer was Greg's hard cock filling her up!\n\n\"Can't believe that every time I've seen you walking around campus, this has been in your asshole.\" Greg punctuated each word with a hard jab of the plug into Dawn's anus. \n\nDawn moaned. After this, there would be one more person who knew that Dawn was an anal slut. One more person would know that she needed constal anal stimulation, anal fulfillment. \n\nGreg, tugged the plug out completely and deposited it into the sink. He wiped his palm over Dawn's creamy cunt, gathering up her pussy juices and using them to slick up his hard cock. \n\n\"May I?\" he asked one last time.\n\nDawn nodded, breathless with anticipation.\n\n\"Do it, Greg Brenner, fuck my slutty ass!\"\n\nGreg slammed his hips forward with a loud grunt.\n\nDawn's asshole opened up eagerly, swallowing the entire length in one go, taking all of Greg's hard rod in one fell swoop. She let out a sigh of relief and pleasure. Finally! Her asshole was being filled the way it was meant to be! Her rectal walls were being pushed apart, stretched in a way that a cum receptacle was supposed to be stretched, eager for a dose of hot, creamy jizz!\n\n\"Oh fuck, I'm in,\" Greg gasped. He held their hips together for a long moment, seemingly unable to believe that he was balls deep in Dawn's slutty shitter. Dawn reached back and spread her asscheeks wide apart, showing off her anal ring.\n\nShe looked back over her shoulder and squeezed her rectal muscles. \n\nGreg yelped at the sensation of his cock being milked by Dawn's velvet insides. His eyes were wide open with shock and disbelief. \n\n\"Like what you see?\" Dawn purred. She was grinning happily. \n\nShe loved when people admired the elasticity of her anal ring, and were amazed by how well it took cock. She loved when people finally realized that she was meant to be an anal slut, that her ass was meant for cock, meant to please others!\n\nGreg could only moan in reply. He started to thrust, his hips gaining a steady rhythm as he fucked Dawn up against the sink of his bathroom. \n\nDawn gasped and moaned as her rectal walls were stimulated even more. Greg's cock was large enough to tug at her insides, lighting up each of the nerves in her ass with pleasure!\n\nGreg was no casanova, that was for sure. Dawn chalked it up to inexperience. All the guys she had fucked up til now had some measure of experience in sex, but Greg seemed almost virginal.\n\n\"Is this your first time fucking a girl in the ass?\" Dawn panted as he continued to pound her shitter with steady strokes. \n\n\"Oh fuck, Dawn, this is my first time fucking a girl!\" Greg gasped.\n\nWait really? That explained a lot!\n\n\"Okay then, Greg. You gotta bend your knees a little more, I'm shorter than you. That way, you can get deeper!\" Dawn managed to get out between each thrust that filled her brain with an anal-pleasure induced haze.\n\nGreg obeyed immediately, bending his knees a little more to bring their hips into better alignment. \n\nThe next instroke was much deeper, better angled, and had Dawn whining with rectal joy. Her spine was tingling with all the stimulation. Greg was a fast learner for sure! Dawn moaned, pulling her asscheeks even further apart.",
        "\"Bed,\" Greg gasped, pulling his cock out. He dragged Dawn out of the bathroom and to his bed without giving her time to protest, then pushed her onto her back.\n\nDawn pulled her knees up to her ears immediately, baring both of her slutty, willing holes for Greg to see. Greg looked down at her bouncy tits, her bald cunt, and her puffy asshole with naked lust and desire. \n\n\"I can't believe I'm doing this,\" Greg muttered to himself. He slammed himself back into Dawn's ass with a rough and deep thrust that punched the breath from Dawn's chest. This was what she wanted! This was how she wanted her ass to be fucked!\n\n\"Ooooooh!\" Dawn moaned as her shithole was roughly used. Greg hooked his fingers into her cunts, stroking the spongy inner walls of her pussy as he drilled her ass long and deep, using her rear fuckport as nothing more than a mastubatory orifice!\n\nDawn clenched down, tightening up her shithole. Greg's next thrust had the both of them moaning together. Greg, because his cock was being milked by this incredibly hot, tight, and soft shithole. Dawn, because the slight burn of a cock forcing its way deep into her rectal passage made her feel more in tune with her true nature as an anal slut!\n\nShe wished Kennedy was here, she wanted her girlfriend to witness how Dawn submitted to her anal desires, but alas, Kennedy was miles away. \n\nDawn whimpered, clenching tighter. \n\n\"I'm an anal slut! Fuck this slutty hole, Greg! Fuck it hard!\" Dawn commanded. \n\nGreg obeyed, leaning forward and putting all his weight behind his cock, drilling it deeper and harder into Dawn's teen shitter.\n\nPleasure exploded inside her anal passage. It radiated out from where Greg was slamming his thick rod into her young hole, to her asscheeks, her quivering cunt, her hips, then the rest of her body. Dawn's chest heaved as her anal orgasm overcame her, her holes clenching and milking and fluttering with the incredible feelings being drilled into her rectum.\n\n\"You're cumming! You're cumming from anal!\" Greg exclaimed as he continued to pound her nubile body.\n\n\"Yes, I'm an anal slut! I love anal! I cum from anal!\" Dawn panted. By now, the words were like a mantra, a comfort blanket that she said to herself each time she was fucked through an anal orgasm to reassure herself that she was truly one with her anal desires!\n\nHearing the first girl he ever fucked declare this so openly, it was too much for Greg. He shoved his cock in deep and pumped his first load of cum into Dawn's shithole, groaning and moaning as Dawn's rectal muscles continued to milk him.\n\nDawn moaned as she felt his jizz warm the insides of her ass. It was soothing, almost peaceful, having her inner walls painted white by a man's cockjuice. She savoured the feeling. While Kennedy was good at drilling orgasm after orgasm after orgasm out of Dawn's young body, she couldn't give Dawn's holes a good dose of sperm.\n\n\"Dawn...\" Greg said as he came down from his orgasm. He looked utterly wrecked, ginger hair even messier than before, and his glasses hanging off one ear.\n\n\"What?\" Dawn asked, feeling blissed out from her powerful orgasm.\n\n\"I'm still hard,\" Greg whispered. He looked mortified and embarrassed. \n\nDawn only grinned up at him.\n\n\"I guess you'll just have to keep fucking my ass,\" she purred. She guided his hands to her tits and encouraged him to started kneading her breasts.\n\n\"Oh my gosh,\" Greg whispered. \n\nDawn could feel his hard cock twitch inside her sore hole. She grinned. No matter how sore her hole, Dawn Simmons, anal slut, would always be up for more rough ass fucking. It was what she was made for.\n\n\"I've got all day, and that's not going away any time soon,\" Dawn needled Greg. \n\nGreg looked down at where his cock was still buried inside Dawn's pert bottom. He swallowed hard. \n\n\"Yeah, okay. I see your point,\" he said, nodding seriously \"I can't go to class like this, after all.\"\n\n\"So you might as well put it to good use.\" Dawn nodded along. \n\nGreg smiled down at her.\n\n\"So I'm pretty new to all this,\" he said, letting her legs down and pulling his cock free of her ass \"Do you think you could teach me about the cowgirl and the reverse cowgirl position?\" He rubbed the back of his head shyly, then adjusted his glasses.\n\nDawn laughed, endeared by his shy disposition. Only he would still be so shy after pounding her through a decent anal orgasm.\n\n\"Well, I suppose it's only fair,\" Dawn said as she sat up. She pushed Greg onto his back and straddled him, lining up her asshole with his twitching cock \"After all you did tutor me in Statistics.\"\n\nDawn sank down onto Greg's cock with a loud, satisfied moan.\n\n\"Okay, let's start.\"\n\n8======D ( ) ; ( )\n\nA/N: Hello everyone! I hope you enjoyed this brief installation of Dawn's Anal Awakening. I'm not doing too well in this pandemic. Very busy with work. Nevertheless, I wanted to give the pornossieurs at home a little something something to pass the time.  \n\nStay healthy, stay on literotica, stay home ;)"
    ],
    "authorname": "kinkbugs",
    "tags": [
        "anal",
        "bullying",
        "multiple orgasms",
        "rough anal",
        "viagra",
        "anal sex"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/dawns-anal-awakening-ch-07"
}
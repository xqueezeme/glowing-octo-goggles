{
    "title": "The Web Ch. 07",
    "pages": [
        "Seventh part of an eight part series. I wrote this story to develop some themes more along the lines of \"mind-influence\" than \"mind-control.\" The most erotic time in a relationship is often spent exploring the boundaries of trust and sharing. If that turns you on, then this story will have many molten scenes. At the same time, as the writing progressed, the characters grew and influenced each other in interesting ways. Is it better to get what you want, or learn what you want? I still don't know who really was in control. Maybe you will.\n\n*\n\nFriday rolled around, and the two ladies arrived right at six. They both wore thin-strap tank tops, shorts, and sandals.\n\n\"Keep your tongue in you mouth, Brad,\" Kelly said as she swept by.\n\n\"Yeah, I don't want to get it stepped on,\" I replied. \"Now who wants a glass of wine?\"\n\nI got the ladies served and moved us out to the deck.\n\n\"I decided to keep it light tonight,\" I said. \"I've got a chilled soup to start, a dinner salad with salmon, some good bread, and of course, plenty of wine. Figured I could prepare it beforehand and kick back with you two this evening.\"\n\n\"Sounds wonderful,\" Cathy said. \"Beautiful evening out here.\"\n\nWe settled into conversation. Kelly betrayed nothing of her upcoming session with me, completely relaxed and playful with us. I brought out each course as the mood struck us, and we finished with some chocolate I had bought.\n\n\"I remember coming here a few weeks ago,\" Kelly stated. \"We all didn't know each other as well back then, and we were all a little unsure of what would happen. I'll have to say I didn't expect how far we would come.\"\n\n\"I didn't either,\" Cathy said, laughing. Kelly and I joined in.\n\n\"As you no doubt have guessed, I have a date with Kevin tomorrow. Cathy, while I can help you wrap up some things in your personal explorations, it's going to get more awkward for me to spend a lot of\u2014how shall we say\u2014intimate time together with you. At the same time, Brad, I've come to respect what you're doing. When we started, you teased about me doing this myself. Remember?\"\n\n\"I do, Kelly. I think you said something to the effect of 'In your dreams.'\"\n\nKelly laughed. \"At the time, I didn't think there was any need. However, I can change my mind in the face of new evidence. I learned that there were some avenues that pushed even my boundaries, especially with two people I like a lot. So that's why I wanted to do this.\"\n\n\"What do you have in mind?\" I said.\n\n\"To get any more, you'll have to get me on the couch,\" she said elusively. \"Just take me through the same exercise you do with Cathy, and let's see what happens. I'm a beach girl myself, so that technique should work well.\"\n\n\"One shrink session coming up!\" I said to giggles from the ladies. \"OK, let's clear up this table, and we'll get started.\"\n\nWhen we finished the table, I sent the ladies back to the bathroom and got a couple of towels ready, just in case.\n\n\"This is different,\" Kelly said as she sat on the couch with Cathy and I in the chairs opposite her. \"I feel a little nervous all of a sudden.\"\n\n\"Just know that I'm a little nervous, too,\" I replied. \"I always am when starting with someone new. So we can both learn to relax together. Now, let's find that beach. What does it look like to you?\"\n\n\"Cliffs coming down to beautiful sand. Warm surf rolling in. Nobody around for miles. We've hiked a long way to get here.\"\n\n\"Sounds really nice,\" I said, slipping into her setting. I led her through a relaxation progression and then introduced her to myself as a guide. We then started meeting her voices.\n\n\"Kelly, may I meet the Controller?\"\n\n\"This is the Controller speaking.\"\n\n\"Hello, Controller. How does your role for Kelly compare to that for Cathy?\"\n\n\"Yes, very similar. I work to keep Kelly from doing things that she will regret.\"\n\n\"What might she regret with the two of us?\"\n\n\"Well, clearly she doesn't want to mess up your relationship. She is a very close friend with Cathy, and she is becoming a close friend of yours, Brad, as well. I keep her from jeopardizing those friendships.\"\n\n\"Thank you for doing that, Controller. I value Kelly's friendship, and I wouldn't want anything to disrupt it.\" I went on a hunch, figuring the timing was right. \"Now, what else have you been working to control?\"\n\n\"I think you know that I've been working to get the two of you together. It's obvious that you two were made for each other, and I didn't want you to waste any more time.\"\n\n\"You've succeeded,\" I acknowledged. \"I've felt your influence all along.\"\n\n\"But I'm not sure I've been in control,\" Kelly said. \"You two have taken off on your own, far more than I could have planned. In fact, you turn Kelly on so much that I've had to hold her back.\"\n\n\"Is that what you're worried about: that the three of us will go somewhere you can't control\u2014somewhere that damages our relationship?\"\n\n\"Yes. Kelly would like to take you to some places you haven't been, but it's fraught with danger.\"\n\n\"Thank you for letting us know, Controller. Let's talk to some of those voices, and then we'll come back and discuss what to do. Does that make sense to you?\"\n\n\"Yes, it does.\"\n\n\"Good. Now, while we talk to some particular voices, will you help me by keeping the channel clear?\"\n\n\"Yes, I'd be happy to do that.\"\n\n\"Thank you, Controller. I appreciate the job you're doing.\"\n\n\"You're welcome.\"\n\n\"Now, may I meet the Protector?\"\n\n\"This is the Protector.\"\n\n\"Good to meet you. How do you view your role for Kelly?\"\n\n\"I've got to protect Kelly from herself. She likes to get into dangerous situations, so I have to step in. She could get hurt, or she might hurt others.\"\n\n\"What do you do?\"\n\n\"I make her give up on those ideas.\"\n\n\"That makes sense,\" I agreed. \"Now, if you are convinced that Kelly won't get hurt or hurt others, do you go ahead and let her do things?\"\n\n\"Oh, yes. Kelly thinks I hold her back too much, but I let her have a lot of connection and fun. I wish she would appreciate that.\"\n\n\"Maybe we can work to make Kelly more appreciative.\"\n\n\"That would be great, but I'm not holding my breath.\"\n\n\"OK, fair enough. Let's talk about protecting a little more. If you were convinced that nobody would be hurt, would you let Kelly try something that she wanted to?\"\n\n\"I probably would. I would have to see what it was.\"\n\n\"How about if Cathy and I talk to you after we've heard what she wants? You can watch us and hear whether we're concerned about what Kelly is wanting to do.\"\n\n\"Let's try that.\"\n\n\"Great. May I now speak to Joy, please?\"\n\nKelly's voice became stronger. \"This is Joy speaking.\"\n\n\"Joy, what do you think about things?\"\n\n\"I am thrilled that Kelly has gotten the two of you together. You can't imagine how good she feels about that. Plus, she loves being around you both. I'm very pleased that she is bringing such a level of exhilaration to you and herself.\"\n\n\"That's wonderful to hear, Joy.\"\n\n\"Now, Kelly has an opportunity to add some aspects to your relationship\u2014aspects that will pull you deeper together for years to come. However, it's a delicate line to walk, so you'll need to help her as well. She needs your support to bring you this gift.\"\n\n\"We are here for Kelly, aren't we Cathy?\"\n\n\"Anything,\" Cathy said simply.\n\n\"Thank you.\" Kelly smiled. \"I think it's time to talk to Desire.\"\n\n\"May I speak to Desire?\"\n\nKelly's smile widened. \"You are speaking to Desire.\"\n\n\"Thank you. How have things been going for you?\"\n\n\"Wonderful! Kelly has gotten so many things that I wanted for her. The two of you are together and are her friends. Cathy, she's seen you blossom into a sex goddess beyond what she could imagine. She's also seen the both of you make love in many different ways, and it's brought her great pleasure. She even has a promising date tomorrow. But of course, I want more for her.\"\n\n\"And what might that be?\"\n\n\"Brad, you've done a wonderful job introducing Cathy to many different forms of pleasure. But it's been fairly one-sided so far. Like last week, you were possessive of her. I would like to turn that around, where she teaches and possesses you. That would add a new dimension to your relationship, and it would further expand Cathy's confidence with her sexual self.\"\n\nMy cock hardened at the thought. \"That makes sense, Desire. If Cathy is taking the lead, I'm sure good things will follow.\"\n\n\"I'm not quite done,\" Kelly added quietly, \"and this is harder to say.\" She paused, came to a decision, and then continued in a stronger voice. \"Without getting between the two of you, I want Kelly to teach and possess you both.\"\n\nWow. Tingles started down my spine as my cock lurched upward. I looked over at Cathy, finding her eyes locked onto mine. They had that wild quality that meant she was really excited. Her head nodded just the smallest amount.\n\n\"Um, I think we would both love that, Desire.\"\n\n\"Really? You'll have to trust Kelly completely. What I want is to have you two do everything she says.\"\n\n\"We do trust her, and I think we both want this as much as you do. As you know, we agreed to talk to the Protector and Controller to make sure that they are OK with what is happening, so if you're ready, let's call them back.\"\n\n\"I'm ready. Which would you like?\"\n\n\"Let's start with the Protector.\"\n\n\"The Protector is speaking.\"\n\n\"I know you heard everything we talked about. What do you think?\"\n\n\"I worry that she'll do something that she'll regret. Something that would damage your relationship.\"\n\nI thought for a moment. \"How about this? You're main concern is that she'll hurt us. Could you carefully watch us to see if we're getting concerned? If one of us does, you can back Kelly off.\"\n\n\"That would help.\"\n\n\"Also, we'll establish a safe word for both Cathy and me. That way, even if you miss something, we can stop things from getting out of hand. With you protecting us, I think we can give Kelly what she wants. Will this work for you?\"\n\n\"Yes, and I can watch to make sure it stays that way.\"\n\n\"Great. Thank you, Protector, for helping Kelly this way. In fact, without you we probably couldn't do this at all. We need someone checking in on us.\"\n\n\"You're welcome.\"\n\n\"Now, may I speak to the Controller?\"\n\n\"The Controller is back.\"\n\n\"Thank you, Controller. After hearing how the Protector is watching us for signs of becoming uncomfortable, do you think you could work with the Protector to keep us from hurting each other?\"\n\n\"I probably can; yes, I know I can. I can definitely step in if the Protector warns me.\"\n\n\"Good. Also, can you help Kelly control the two of us. That's what she wants.\"\n\n\"Oh yes,\" the Controller answered as Kelly smiled. \"I'm good at that.\"\n\n\"I bet you are. Now, can you take us back to the beach?\"\n\n\"Here we are.\"\n\n\"Thank you very much, Controller. Kelly, after hearing Joy and Desire speak, do you want to do what they talked about?\"\n\n\"Yes, very much.\"\n\n\"OK, both Cathy and I will put ourselves in your hands.\"\n\n\"Let's get back from this beach!\"\n\nI took Kelly back into my living room.\n\n\"Wow, I feel great!\" she said, stretching.\n\n\"You've been deeply relaxed,\" I said. \"It's very refreshing.\"\n\n\"And arousing,\" she smiled, looking at me. \"Yes, I remember everything, and I think you two are now mine to command.\"\n\n\"Before you get carried away, let's review our safe word.\"\n\n\"Worried?\" she asked.\n\n\"Very,\" I laughed back. \"How about us using 'Uncle' again? That work for you, Cathy?\"\n\n\"What?\" Cathy looked up. \"Oh, yes, it does.\"\n\nKelly looked keenly at Cathy. \"You a little distracted, girlfriend?\"\n\n\"Maybe,\" Cathy answered, causing all of us to laugh.\n\n\"I think I can help you with your horniness. Brad, switch places with me.\"\n\n\"Yes Ma'am,\" I said.\n\nAs I settled down, Kelly looked over at Cathy. \"This time, I'd like you to be a little more possessive, as you like to say. Why don't you straddle Brad's hips and start making out with him?\"\n\nCathy swung over me, her eyes looking deeply into mine. She gently brought her fingertips to my face and caressed all around, lingering on my lips and behind my ears. The effect was electric on my skin.\n\n\"Good, very good, Cathy. I think Brad is liking this.\"\n\nCathy brought her lips to my face, kissing and nibbling my eyelids, ears, and neck. I felt her warm breath tingle my skin, and I shivered.\n\n\"This is so hot, Cathy. Keep seducing him\u2014he's coming under your spell,\" Kelly encouraged.\n\nCathy brought her lips to mine, gently and then more forcefully kissing me. She spread my lips apart with hers, plunging her tongue inside my mouth. I felt her body ripple with her growing excitement, and her breath came hot.\n\n\"That's it, Cathy. See how it turns you on? Now start undressing him when you're ready.\"\n\nCathy undid a couple of buttons on my shirt and reached inside, stroking my chest as she continued her kisses. My body responded, and I moaned into her mouth. She undid the rest of the buttons and reached around my back to lift the shirt from me. Then she explored my chest with her lips, circling and teasing my nipples. Cathy's aggression was driving me wild.\n\n\"Wow, Cathy, you should be giving lessons,\" Kelly approved. \"Let's get the rest of his clothes off with you standing behind him.\"\n\nCathy unfastened my pants and tugged at my zipper, all the time playing with my lips. She sunk down and quickly pulled my shoes off, then took my hand and stood us up. Slipping behind me, she kissed my back and neck and dropped my pants to the floor, then eased my boxers over my straining erection. She dropped down to get them over my feet, and moved my clothes out of the way.\n\nKelly issued her next instructions. \"Now you've got a naked man to play with, Cathy. Slide behind him and cup his body in all the right places.\"\n\nI heard a little purr of pleasure behind me, and then Cathy's hands gently slinked around my chest, pulling me back. I nestled into her, feeling soft breasts against my back, and her hips lightly grinding into my ass. It felt good, and I understood why she liked me behind her so much. Her hands roamed over my chest, sometimes lightly circling my nipples and sometimes dropping to tease just above my cock. I sighed, letting her hear my appreciation.\n\n\"Want to rub your naked body against him, Cathy? Why don't we both take our clothes off?\"\n\nCathy hummed her approval. She held her hand to my shoulder to indicate that I should stay still, then she slipped out of her clothes. In the corner of my eye, Kelly did the same.\n\n\"Oh, yeah,\" I breathed as Cathy molded herself behind me.\n\n\"Like that?\"\n\n\"Fuck, yes,\" I said, getting a kiss on the neck in return. Cathy's body felt fantastic, her nipples dragging across my back and her mons grinding into my ass. I surrendered myself to the sensations, leaning back into Cathy and letting her have her way. Her caresses intensified to show her approval.\n\n\"It feels fantastic to me, too,\" she breathed, now lightly humping my ass. We stayed this way for a while.\n\n\"Volcanic. Totally volcanic,\" Kelly said. \"I could watch this all night, but I want to up the ante. Brad, you had Cathy draped across your lap last time. Now I want you across hers\u2014and mine.\"\n\nMy breath caught in my throat as I wondered what scheme Kelly had in her wicked mind.\n\n\"Come here, Cathy, let's turn these chairs toward each other.\" They each took a chair, Kelly grabbing a towel and placing it beside her. \"Yeah, get them fairly close. Now, let's sit down across from each other. Perfect! OK, Brad, you can come in for a landing.\"\n\nBoth ladies looked at me, their alternating legs making a platform. I walked over and kneeled. A hand on each of my shoulders gently pushed me down, and I nestled between them, resting on their legs.\n\n\"Thank you, Brad,\" Kelly cooed. \"You act like a gentleman, but deep down, you've been a naughty, naughty boy, haven't you? Taking advantage of poor Cathy here. You've played her like a violin, taking her any way you felt like. Every part of her body had been used for your pleasure, and you've even whipped her ass when you felt like it. You've made her do all sorts of things that she never would do before.\" She caressed my ass. \"You tell yourself that it's her desires, but are you sure that's the whole story? I think it would help if you paid a little something back.\"\n\nI had a decent idea of what that meant. Kelly now directed her voice to Cathy.\n\n\"And you, Cathy, would you like to turn the tables a bit? I mean, he's just been fucking you silly every time you meet. Sure it feels good for you, but how lucky is Brad? When a mere mortal beds a goddess, he's gotta pay, right?\"\n\n\"Always risky to fool around with goddesses,\" Cathy replied. \"You always pay.\"\n\n\"Don't you. Why don't you join me in teaching Brad a lesson here?\"\n\nCrack! I jumped a bit as Kelly connected her palm to my ass. \"Your turn, Cathy.\"\n\nI felt another slap on my ass, this one lighter.\n\n\"Good girl!\" Kelly applauded. \"I know you'll spank harder as we go. Believe me, he can take it. Why don't you see how he's liking it?\"\n\nI felt a soft hand slither between my legs, sliding along my raging hard-on to find the pre-cum leaking out of the head.\n\n\"He likes it,\" Cathy giggled.\n\nSmack! Kelly gave me another. Smack! I felt Cathy nail me, and she let her palm linger on my ass, her fingertips brushing me as she lifted her hand away. I hung my head and sunk completely onto their legs.\n\n\"Yes, Brad, give in,\" Kelly cooed. My ass was warming up, and I could also sense the heat building in two ladies as they played with me. I grunted with each hit and finally turned my ass up to meet their hands. Cathy got more forceful when she saw this, finally hitting as hard as Kelly. It excited me to see Cathy turn more dominant.\n\nKelly stopped and leaned her head close to mine, sliding her hand over my burning ass. \"It feels good to just let us take over, doesn't it, Brad? We know your deepest desires, and letting a goddess have her way with you is one of them, isn't it?\"   \n\n\"Yes,\" I croaked out.\n\nKelly straightened back up. \"Remember what you learned here, Cathy. Now, why don't you give this poor mortal some relief while I continue his payback?\"\n\nI felt Cathy's hand slide back down to my cock, collecting the pre cum and sliding it over the head and shaft. Smack! Kelly's hand connected with my ass again, and I thrust into Cathy's hand.\n\nAs the heat in my ass started to merge with the pleasure in my cock, I braced my hands on the floor and spread my legs, turning my ass completely up for Kelly.\n\n\"Yes!\" she whispered as she cracked into me again. \"Give me everything.\"\n\nI started lightly pushing back to meet her slaps, grunting as each blow descended. Cathy's hand was doing wonderful things to my cock, and a crushing orgasm started pooling deep within me.\n\n\"Fuck!\" I muttered with the next slap. \"Fuck!\" I repeated as I rocked back again. I teetered on the edge between pain and pleasure, the balance point providing a focus for the pleasure to gather incredible force. I lost all track of my surroundings, and completely submerged myself into the sensations.\n\nMy orgasm erupted like a long-contained volcano, driving through Cathy's clutching fingers and spurting out in blasts of pure pleasure. I howled out my release, drawing lung fulls of air between the cries. Finally, I slumped into the legs under me, twitching with the aftershocks. Cathy expertly milked every last drop of pleasure from my cock.\n\nAfter a long rest, I sighed deeply. \"That was amazing,\" I said.\n\n\"It was for us, too,\" Kelly said. \"You've got two really horny ladies here. Think you can handle us?\"\n\n\"No, but I'd like to try,\" I said, getting a laugh from both of them.\n\n\"OK, funny-man, let's get up and get into your bedroom. I want Cathy to get you hard again and then ride you cowgirl style.\"\n\n\"Yee-haw!\" I said, getting another laugh.",
        "I raised myself from their legs, seeing the huge pool of cum that I blasted into the towel on the floor.\n\n\"Wow, Brad, you must have liked that,\" Kelly observed as she looked down. The two ladies looked at each other and laughed. Cathy reached down and rolled the towel up, placing it beside her chair.\n\nI got my legs under me and held out a hand to each of them. They untangled their legs, the scent of hot pussy intensifying as they moved, and then they stood with me. Kelly led the way to the bedroom, and Cathy reached a hand over to cup to my ass, guiding me to the bedroom as well.\n\n\"Lie down in the middle of the bed, Brad. Cathy, climb over him for a little sixty-nine to get you both warmed back up.\"\n\nI eased my still-smarting ass onto the bed and lied back, getting a pillow under my head. Cathy gracefully swung a leg over me and sunk down, bringing her steaming pussy into reach of my tongue. I also felt Kelly get onto the bed\u2014she hadn't done that before. My cock stirred at the idea.\n\nI reached up with my hands and caressed Cathy's ass as I gently ran my tongue up the length of her pussy. Cathy moaned her approval and started giving my cock gentle kisses.\n\nCathy was hot to trot and didn't give me a chance to tease her. She sunk down and started fucking my tongue as she took my cock into her warm mouth.\n\n\"Damn, girl, you're on fire. Go ahead and get off\u2014you need it,\" Kelly said from somewhere near Cathy's head.\n\nCathy hummed her appreciation around my cock and worked her pussy faster over my tongue. I slid one hand down and probed the wrinkled skin around her anus, feeling her gasp and hump me even harder.\n\nI flattened my tongue and let Cathy fuck my face. Her breath came in blasts through her nose, and she finally had to release my cock to pant, holding it against her cheek as the hot breath tickled my balls.\n\n\"Yes, baby!\" I heard Kelly whisper.\n\nCathy tensed up as I took her to the edge and beyond. She humped her clit hard against me, her body rigid.\n\n\"Uh, oh, uh, uh, ahhhhhhhhhh,\" she cried as the first spasm wracked her body. I felt her pussy throb around my tongue and her ass pulsate against my fingers as the waves crashed within her. I held on as she road out the twitching aftershocks, listening to her mewls of pleasure. My now rock hard cock felt the soft skin of her cheek rub against it.\n\nCathy sighed deeply and raised her hips up. I looked up to see the deep red of her pussy lips, engorged from her massive orgasm. It was a sight that turned me on even more.\n\n\"Thanks for letting me watch so closely, Cathy. You were lost, holding Brad's cock against your cheek and riding out a huge orgasm. I could see everything written on your face.\"\n\nI could feel the blush creep up Cathy's cheek as she continued to nestle my cock against it.\n\n\"That's why I love you, Cathy,\" Kelly said softly. \"You're a sex goddess and a blushing little girl all wrapped up into one. Don't ever change.\"\n\nThings went quiet for a while and I figured some sort of major girl bonding was going on. I relaxed and enjoyed the feel of Cathy nuzzling my cock.\n\n\"Ready for your cowgirl ride?\" Kelly finally asked.\n\n\"Yeah,\" Cathy answered, and she plunged her mouth down on my cock. I gasped and twitched, getting a giggle from both ladies.\n\nCathy lifted up and turned around, her mischievous eyes finding mine. Never breaking her gaze, she positioned my cock at her entrance and sunk down. We both sighed as I slid into her, but she was up to something\u2014I could feel it. Looking intently at me, she gestured to Kelly.\n\n\"Might be your last chance, Kelly,\" she said. \"Why don't you join me and find out how good his tongue feels.\"\n\nMy eyes widened in shock. Cathy's eyes positively danced back at me.\n\nMy cock twitched inside her when I felt bed rustle. Kelly positioned herself behind my head, Cathy looking into my eyes the entire time. Finally Cathy looked up and locked eyes with Kelly. Kelly shuffled forward and Cathy twisted above me to give Kelly's knees some room. My last sight was seeing their breasts only inches apart before Kelly's swollen pussy filled my vision.\n\nKelly's upright stance made it more difficult to reach her clit with my tongue. I still had one hand that hadn't played with Cathy's ass, so I brought that around to tease her nub as I took long licks up her hot pussy. I enjoyed comparing Kelly's tang to that of Cathy's only minutes before.\n\n\"Oh, God,\" I heard above me. Kelly settled down more firmly on my tongue. Cathy also started slowly rising and falling on my shaft. I could only imagine the sight: the two ladies inches apart, Cathy watching Kelly's face, Cathy slowly humping up and down\u2014drawing intense pleasure from the sight and the feeling.\n\nKelly twisted above me, sliding her pussy over my tongue. I stiffened it as I had with Cathy before, letting Kelly ride me as she wanted. My fingers continued to massage her clit, hard and protruding from its hood. I got a lot of approving moans as Kelly rode on.\n\nAfter a while, Kelly slid her pussy forward a little, and I was now licking the bottom of her steaming slit. My fingers moved in long strokes, lightly dragging across her clit.\n\n\"Ahhhh,\" Kelly purred, and I felt her hips slide forward a little more. It was difficult to reach her pussy. Wait! I knew what she wanted, and my cock lurched at the thought. Pulling my tongue back, I slithered it up to her puckered hole.\n\n\"Oh, fuck!\" Kelly exclaimed, and she arched her back, giving me full access to her ass. I stiffened my tongue and pressed deeply into her opening while she rutted above me. I started gently twisting her clit in my fingers, getting a hissed \"Yes!\" in reply. A light sheen of sweat broke out on her body as she started her climb to orgasm. I increased the pressure on her clit, driving her wild.\n\n\"Oh fuck, oh fuck, oh fuck...\" Kelly repeated in time to her thrusts. I felt her body go rigid, and she held her breath as I continued to ream her ass and twist her firm clit.\n\nKelly shuddered above me when her orgasm hit. Once again, I felt the contractions pulse deeply through her ass and pussy. Her moans thrummed through her body as the waves of pleasure continued to break. I felt Kelly slump forward, and Cathy immediately shifted to take her weight. Kelly twitched over me as she got her breath back.\n\n\"Oh, God, that felt good,\" she whispered. \"Thanks, Cath\u2014I needed that.\"\n\n\"You were spectacular, Kelly,\" Cathy answered. \"So deep into the moment.\"\n\n\"I think Brad was deep into me,\" Kelly chuckled. \"I guess I have to thank you, too, but don't get a big head.\"\n\nI gave her thigh a squeeze.\n\n\"OK, as much as I could rest here all night, my job isn't finished. I noticed that you kept yourself at a simmer, Cathy\u2014wanted to study me up close perhaps? I'm guessing that you're a little horny again, so let's see what we can do.\" Kelly straightened herself up and raised off my face. \"Uhhhhhh, I can barely move.\"\n\nI looked up into Cathy's eyes, dancing as always. She winked and smiled.\n\nKelly positioned herself to the side. \"Cathy, we're going to continue your 'possession' of Brad. Let's try a position where you get to hump him. Ready?\"\n\n\"You bet,\" Cathy replied. \"What do we do?\"\n\n\"You're going to end up on top, pounding your body into Brad's. To start, Brad, stay buried inside Cathy but move your legs to the outside of hers\u2014one at a time as she lifts up over you. Cathy, your legs will end up close together...Yeah, it's a little awkward...There you go! One down. Now the other...Perfect! This is a decent position by itself, but we're going further. Brad, pull your legs up and hook them under Cathy's shoulders, just like she would do with you on top.\"\n\nI pulled my legs back and got them under Cathy's chest. My cock pushed pleasantly against the front of her pussy. We both sighed\u2014this felt pretty good.\n\n\"Great. Now, Cathy, lean into his legs to bring his ass off the bed. That's it. This should feel good.\"\n\n\"It does!\" Cathy answered, clearly excited.\n\n\"Well, girl, let your hips find the right place, and you can just fuck him silly. He can't move, so he's all yours.\"\n\nCathy smiled and spread her legs around my bent hips, sinking deep onto my rod. \"He is, isn't he?\"\n\n\"Not a bad place to be,\" I wisecracked.\n\n\"Smart man,\" Cathy laughed. Then she got down to business, surprising me with her intensity. She leaned hard into my legs, her breasts flattening against my hamstrings. Then she brought her hips up and smashed them down, drawing a gasp from both of us. Clearly she had paid attention when she had been in my position before. She kept going, humping me hard.\n\nFortunately, I had already had one incredible orgasm, so I was able to last through Kelly's explosion and then enjoy some of the pummeling that Cathy was giving me.\n\nKelly piped in: \"Show Brad what it means to get fucked by a sex goddess, Cathy. This is the real you\u2014in charge and loving it.\"\n\n\"Oh, God,\" Cathy moaned and flipped her hair back, rocking us both hard. She looked down at where we were joined and watched her pussy engulf my cock. Then she looked back up at me, studying my face as she pounded into me. I just let her do it, thrilled to have her take charge. We rocked together for several minutes.\n\nEven after one ball-draining orgasm earlier, I could feel the pressure build again. My face showed the strain of holding it back.\n\n\"Come for me, Brad!...I'm right behind you,\" Cathy panted.\n\n\"Fuck me, Cathy.\" I panted back.\n\nCathy responded, speeding her motions. Her eyes narrowed as she ground her clit into me. I moaned out in pleasure from the sensations on the top side of my cock. Cathy shifted her legs back and stretched them out, lifting her knees off the bed. Her pussy tightened in this position, and she quivered her hips up and down, rapidly stroking the end of my cock. The effect was mind-blowing\u2014icy hot fire storming down the length of my rod.\n\n\"Oh my God!\" I breathed, twitching as almost painful levels of pleasure built up in the tip of my penis, tendrils radiating down my legs to curl my toes. My body shifted into a new gear, my orgasm finding a deeper source of power, totally dependent on Cathy's motions.\n\nHeat upon heat blasted within me, my face screwed tight in the effort to hold back the flood. With the few brain cells still functioning, I saw Cathy's face tense with her own effort, her breathing labored.\n\n\"Ahhhhhhhhhhhh!\" The dam burst and an incandescent jolt of cum spewed out of my cock. Cathy kept stroking, her pussy inflaming the tip of my cock white hot as the cum continued to erupt. I shuddered beneath her, thrashing my head and howling my release.\n\nSuddenly, I felt Cathy slam down and tremble above me, my hypersensitive dick feeling the tremors in her pussy as she cried out her orgasm. I watched her face as she rode it out, seeing the waves of bliss express themselves in her features. She looked beautiful, and I was drawn to her anew.\n\nAs Cathy came back from her high, her body relaxed into me. Her eyes opened and locked onto mine. Once again, some mysterious communication passed between us. I didn't understand it, but I knew it was good.\n\n\"Wow, Cathy. That...you...were incredible,\" I finally said.\n\n\"You trusted me and put yourself in my hands, Brad. Now you know why I like to be in your position. The pleasure is sweeter when you let your partner give it to you.\"\n\n\"Especially when she's a goddess,\" I replied.\n\n\"Especially when she's a goddess.\"\n\n\"Tell her, girl!\" Kelly interjected. \"If Brad knows what's good for him, he'll worship you always! Sometimes I'm in awe of you myself.\"\n\n\"The majestic Kelly in awe? I am pretty lucky,\" I shot back.\n\n\"You'd better fucking believe it, buster,\" Kelly softly answered, her eyes boring into mine.\n\n\"Ready to relax beside me, lucky boy?\" Cathy chirped above me.\n\nI nodded, laughing. Cathy eased herself off of me, both of us twitching as my cock popped free of her pussy. I straightened my legs, sighing as they relaxed.\n\n\"I just noticed how stiff I had become,\" I said. \"I guess I wasn't paying much attention before.\"\n\nCathy chuckled as she snuggled beside me. \"Neither one of us did. I'm pretty stiff from holding myself above you.\"\n\n\"Always a price to pay for fantastic sex,\" Kelly observed, getting a laugh from both of us. We then got quiet for a while, just enjoying each other's company.\n\nFinally, Kelly spoke again. \"Brad, Cathy. Thank you. You were both very good to me tonight.\"\n\n\"Happy to help you walk the line, although maybe I pushed it a little?\" Cathy replied.\n\n\"Maybe a little, but it felt pretty damn good!\" Kelly said, laughing. \"It just felt right when you asked me to join you.\"\n\n\"No complaints here,\" I added.\n\n\"Oh, really? I'm glad I could keep your tongue busy, Brad, and enjoy some peace from wisecracks for a change.\"\n\n\"I guess the big 'O' was icing on that cake, wasn't it?\"\n\n\"With a cherry on top.\"\n\nCathy snorted. \"It was worth it to me to have you both shut up for a while.\"\n\nKelly and I laughed deeply at that. \"I think you're right, Cath,\" Kelly added. \"Speaking of that, I'd better let you two get some sleep. You're probably worn out.\"\n\n\"You are too, Kelly, physically and emotionally\" I replied. \"Instead of trying to drive home tonight, why don't you just take the other bedroom? I can find you a toothbrush.\"\n\n\"I might just do that\u2014it sounds pretty good.\"\n\nI got up, washed up a bit, and found a toothbrush for Kelly. She stood in her doorway, still naked, and pecked me on the cheek. \"Thanks, Brad, for everything. Sweet dreams.\"\n\nI got back into bed and cuddled against Cathy. We both sighed, and I knew that she was close to sleep. I dropped off quickly, the memories slipping into dreams.\n\nI awoke to the sound of Kelly moving around the house.\n\n\"Damn! Where are those panties?\" I heard her say, and then felt Cathy laughing beside me.\n\n\"We didn't exactly fold our clothes up neatly,\" Cathy whispered to me.\n\n\"I remember\u2014last night was pretty intense. How about we get up and make breakfast for Kelly?\"\n\nCathy rolled over and looked at me. \"Don't want Kelly to run out after what happened? You care, don't you?\"\n\n\"Yeah. I don't want her night to end in some rushed way. We shared a lot with each other.\"\n\nCathy's lips fastened on mine. \"Thanks, Brad,\" she said when she pulled back.\n\nI got up and quickly washed, jumping into a shirt and shorts while Cathy went into the bathroom herself. I had gotten some hot water and coffee started in the kitchen when Kelly came out.\n\n\"Morning, Kelly. Can't let you leave without some breakfast.\"\n\n\"I was thinking about giving the two of you some time alone. I'd like you two to get to know each other without me around.\"\n\n\"Oh, I think that we'll have plenty of time for that,\" I said. \"Have a seat\u2014I'm cooking.\"\n\n\"I guess I can't pass that up, can I?\" Kelly sat down at the bar.\n\nI got some omelets started and poured Kelly a cup of coffee.\n\n\"Morning everyone!\" Cathy came out with a big smile for us.\n\nKelly laughed. \"Cathy, you have that well-fed, well-sexed, and well-slept look about you. You look pretty darn happy.\"\n\nCathy slid into my arms for a kiss. \"I'm very happy, Kelly. I've got a man making me breakfast.\"\n\n\"Har, har, har,\" I said. \"Why don't you perch yourself up at the bar so you don't distract the cook.\"\n\n\"Oh, I figure I can distract you there, too.\"\n\nI laughed. \"I think you've got me on that one. Now what kind of tea do you want? Maybe I can keep you busy drinking.\"\n\nWe all chatted as I worked in the kitchen, keeping the conversation light. I served us all at the bar.\n\n\"So what are you doing the rest of the weekend, Brad?\"\n\n\"I was thinking of finding out what Cathy's plans are,\" I replied. \"I've got a lot of free time this weekend.\"\n\n\"You do, do you?\" Cathy asked. \"Well, if I work creatively, I might be able to carve out an hour\u2014or maybe every hour?\"\n\n\"Let's plan on the higher number,\" I said, getting a big smile from Cathy.\"\n\n\"While we're speaking of plans, could I make some more?\" she asked. \"It turns out that my parents are coming in next weekend, and I would like them to meet you, Brad. They come Friday afternoon, so I would like to have you come over for dinner.\"\n\n\"I'd love to,\" I said.\n\n\"Good. Now, Kelly, I'm guessing you may be at risk of being busy in the evenings that weekend, so would you like to join us for lunch on Saturday? You, too, Brad\u2014if you're free.\"\n\n\"Thanks, Cathy. I'll plan on it,\" Kelly responded. I nodded.\n\n\"One more invitation?\" Cathy looked up at both of us. We both stopped, interested in what else she would say.\n\n\"Kelly, I know that your chaperone duties are drawing to a close. Thank you so much for last night\u2014it opened some doors for me, and I suspect Brad as well. But I like to complete things, and there's a final exam that I'd like to pass. I was wondering if you both would be free Thursday night for dinner and a chance to evaluate my progress.\"\n\n\"Sounds intriguing,\" Kelly said, looking evenly at Cathy. \"I'm in.\"\n\n\"Thank you, Kelly. Now Brad, I know how hard a final examination is to prepare, conduct, and evaluate, so I wanted to offer Friday for both of us to relax and then discuss the results. Would you be able to take the day off and join me? I need to warn you, however, that I'll probably ask you to help me, shall we say, do a final cleaning of the schoolhouse before my parents arrive? They don't necessarily know that I've been taking this course.\"\n\n\"Sounds perfect,\" I answered. \"But in any independent study course, it's always a good idea to discuss the mutual goals of student and instructor. What are you thinking in terms of demonstrating mastery of the course material?\"\n\nCathy looked down and then turned partway back, letting her hair partially obscure her face. \"In this subject, mastery should include a sense of mystery and adventure. Also, perhaps a bit of a challenge to your partner. So I'll just say that my final includes me on my elbows and knees. Can you develop a good evaluation around that?\"\n\nMy cock tingled and swelled at the idea. \"Yes, Cathy, I think I can develop a very focused and complete evaluation in that test environment.\"\n\n\"Good,\" she said, smiling. \"I'll study really hard.\"\n\nKelly laughed. \"Cathy, you're the best.\" She then looked over at me. \"I hope you know that you're never going to find another student like her.\"\n\n\"I do know, Kelly. I'm hoping to entice Cathy into some joint research in the field. She has developed remarkable quickly.\"\n\n\"I might be persuaded,\" Cathy answered. \"I have developed a passion for this area.\"\n\n\"Excellent!\" I replied. \"We can discuss a little of that as we review the results of your final.\"\n\n\"Make sure to keep me informed of your discoveries,\" Kelly deadpanned. \"I don't want to get left behind.\"\n\nWe all laughed and finished our breakfast. Kelly looked up at us again.\n\n\"Cathy, Brad, thank you both for a wonderful evening. I can see how the technique works, Brad, and I was happy to introduce Cathy and you to some new experiences. Cathy, you really surprised me at the end. Now, I'd better be going to get myself ready for my date tonight. If Kevin is able to charm himself into my bed someday, he's going to find a woman with some serious pent-up desires.\"\n\n\"He'd better watch out,\" Cathy laughed.\n\nKelly winked.\n\nWe cleared away the dishes and walked Kelly to the door. She turned to me and put her hands on my shoulders.\n\n\"Brad, I am so glad I took your offer and got on your couch. I had wanted to do that for you both, but didn't really know how to approach it. You gave me the opportunity. Thank you.\" She then pulled me into a close hug, whispering \"Nice tongue\" into my ear before releasing me.\n\nShe then held Cathy the same way, looking into her eyes. \"And you, Cathy, how can you be so innocent and yet get me into so much trouble? That's why you're my best friend ever.\"",
        "\"Thanks, Kell. I can't even begin to thank you.\" The two ladies hugged fiercely.\n\nKelly turned on her way out the door, \"Lovely day. Make sure you get outside a little, OK?\"\n\n\"They have beds out there?\" I asked, and she laughed, tossing her hair as she sauntered to her car.\n\n\"I guess I'll have to rely on you for my ride home,\" Cathy whispered in my ear. \"What will it cost me?\"\n\n\"You won't believe how expensive things have gotten,\" I replied, taking her hand. \"It's going to cost you all weekend.\"\n\n\"Oh, goody!\"\n\nWe went back to the bedroom and undressed each other between kisses, slipping into bed for the type of slow, languorous love that happens on a weekend morning. We gently rocked together, looking into each other's eyes between kisses, as we climbed gradually to climax. Cathy never hurried as the tension built in her face. The two climaxes of the night before helped me to pace along with her, and I watched her ride out a deep, prolonged orgasm. That pushed me over the edge, and she got to study me as I twisted and groaned above her.\n\n\"It's been a very nice morning so far,\" Cathy said as we lay together afterward. \"Any thoughts for the rest of the day?\"\n\n\"Maybe we should take Kelly's advice and get out a little. How about going for a hike or bike ride, and maybe you can pick something for this evening?\"\n\n\"Hiking sounds good. And there's a play I've been meaning to see. Interested?\"\n\n\"I'd love to. Let's get dinner as well.\"\n\n\"And make love after?\"\n\n\"I love the way you think, Cathy.\"\n\n\"Speaking of love, I wanted to thank you for playing along with Kelly and me last night. I know that it's probably not what you're used to.\"\n\n\"Are you kidding? You were a goddess, Cathy, who turned me on like crazy. I'll be happy to play with you that way anytime.\"\n\nCathy smiled. \"Just as long as you don't stop doing the same to me. I like being in charge, but I also like letting you 'possess' me\u2014a lot.\"\n\nI slid my hand down behind her and cupped her ass, getting a little whimper. \"Don't worry, Cathy, I won't stop. I like every role: me in charge, both of us as equals, and me worshiping the goddess.\"\n\nShe kissed me and curled her head into my chest. \"On Thursday, please take me,\" she whispered.\n\n\"Gladly,\" I said, holding her close.\n\nWe eventually got up and took a quick shower together. I put on some hiking clothes and laughed at Cathy in the sundress and sandals she had brought along.\n\n\"Of course, I look fantastic,\" she observed, \"but not so ready for a hike. I planned to tempt you to stay over when you took me home, but we already took care of that.\"\n\n\"As much as I'd like to follow you in that outfit, let's get you changed.\"\n\n\"Don't forget some evening clothes and something for the morning. I'm not letting you go easily.\"\n\n\"Yes, Ma'am. How can I pass up that offer?\"\n\nI packed some clothes, and we hopped in the car to stop by her place. We then drove out to a state park and picked a couple-of-hour loop with a nice view.\n\n\"I remember hiking this with you in a larger group,\" Cathy said as we walked along. \"Do you remember?\"\n\n\"I do, and like any man, I registered that you and Kelly were very attractive in hiking clothes, or any other time. I always enjoyed our friendship, but I didn't let my mind wander too far. That wouldn't have been a good idea at the time.\"\n\n\"Yes, you and Sarah were an item back them. I noticed you, too, but I kept that to myself for the same reasons. I think Kelly was the only one who suspected the attraction. She knows me too well.\"\n\n\"I've kind of wondered about her motives when she got the two of us working together,\" I said.\n\n\"Don't wonder. Of course she was up to something. If you think you play around with people's minds, you've got nothing on Kelly. She's always working some angle with me, especially when it comes to men.\"\n\nI laughed. \"Well, if we're pawns in her game, I'm enjoying it immensely. I think you turned the tables on her last night, however.\"\n\n\"Oh that?\" Cathy laughed breezily. \"Yes, I occasionally get a chance to play with her head. Looks like she enjoyed it. You, too,\" she said, looking back at me.\n\n\"I think I'm going to speak very carefully now,\" I responded.\n\nCathy laughed good-naturedly. \"Relax, Brad, I know she turns you on. As long as we work together, you can share your attractions and desires.\"\n\n\"OK,\" I said. \"I loved it. When do we get to do it again?\"\n\n\"Down, boy!\" she laughed. \"I have a feeling that Kelly will be busy for a while. That's part of the fun\u2014not knowing if or when something like that will happen again. I'll try to keep you satisfied in the meantime.\"\n\n\"I think that you'll be successful,\" I said, taking her hand. \"I like your rule about us working together. You've already been sharing your desires with me, but you can also share your attractions.\"\n\n\"Thanks, Brad. Sometimes I can't believe how much I've told you about myself, but you've used the knowledge well. I trust you.\"\n\nWe finished the hike and stopped for a bite to eat. I helped Cathy pick out a few things she needed for her parent's visit, and then we went back to Cathy's to clean up. We played and splashed as we cleaned each other, but saved our energies for the evening.\n\nWe both enjoyed the play immensely, talking about it over a late dinner. Back at Cathy's place, we both lit several candles before undressing each other. After kissing each other into heat, I worked my lips and tongue down over her sensitive nipples and then further down between her legs. I brought Cathy to one orgasm, and then surprised her by starting again. As she heated up again, I probed at her ass with my finger, getting an enthusiastic moan in response. Cathy drew her legs up and rested her feet on my shoulders, opening herself completely to me. The wetness from her steaming pussy flowed freely down, lubricating my finger enough to slide inside her. I felt her second orgasm ripple around my finger and my tongue as she thrashed below me.\n\nCathy recovered for a minute and then rolled over face-down on the bed. Raising her hips and arching her back, she turned her head to me. \"See anything you like?\"\n\nI quickly raised over her, lining up my cock with her red, hot, swollen pussy. As I slid in, she pushed back, flattening her ass against me on the first stroke. She bucked against me, maximizing my pleasure as I pounded into her. We smacked together, me holding back my release until I drove deep into her. My cum squeezed past her clutching pussy and spurted in waves of fire as I twitched above her.\n\nThe next morning I awoke to the feeling of soft lips encircling my cock. My morning wood hardened even more as Cathy plunged down my shaft. I lied back and let her pleasure me until I felt her lift my legs up. I smiled when I felt her place my feet on her shoulders. I then heard a soft snap, and a moment later a lubricated finger probed gently at my ass. I relaxed as it pressed deeper, and then it worked inside.\n\nCathy bobbed on my cock, her lips and tongue doing wonderful things. Below, a second finger joined the first, and I moaned my acceptance. A hot, stretchy, dirty, and really good feeling flowed through me as she reamed my butt in time to her ministrations on my cock. Cathy kept it up, the tension building until I howled my release, shooting forcefully as my ass convulsed around her fingers. Cathy vacuumed every drop, keeping me in her hot mouth until I relaxed back into the bed.\n\n\"Oh my God,\" I moaned as she gently removed her fingers.\n\n\"Nice way to wake up?\"\n\n\"If I wake up that way too often I might die from pleasure.\"\n\n\"But you're willing to take the risk?\"\n\n\"Oh, yeah,\" I replied, and we both laughed.\n\n\"I was thinking about sitting against the headboard and having you nestle against me. Sound good?\" I asked.\n\n\"Sounds wonderful.\"\n\nI got myself situated and patted the bed between my legs. \"Come here and let's see what trouble we can get into.\"\n\n\"I like your kind of trouble,\" Cathy said as she settled her warm body against me.\n\nI gently cupped the underside of her breasts, getting a soft sigh in response. Cathy leaned her head back against my shoulder as I worked my way up to her jutting nipples. The blowjob must have gotten her excited, because she thrust her chest out into my hands. I trailed my lips along her neck and cheek until she turned her head to kiss me deeply. The taste of myself in her mouth brought back how lucky I was to have this woman. Cathy loved sex, both the giving and the receiving, with a genuine happiness.\n\nI lightly twisted her nipples between my fingers, savoring their feel. Cathy's breath blew hot against my cheek as she settled back again. I twisted and pulled a little harder, and she responded, moaning deeply in encouragement. I alternated between pulling with my fingertips, sometimes grazing the tops, and pushing each nipple out from behind. Cathy pressed me along at each stage, responding to each increase in pressure. I watched in fascination as her nipples stretched out under my fingertips, pulling her breasts with them.\n\nLooking down, I saw her hips humping the air. Between them, her outer pussy lips had already engorged and opened, revealing the hood around her clit. I began to slide one hand down. \"Yesssss!\" she murmured. I teased between her legs as she pushed at my hand, circling around her pussy but keeping her frustrated. My other hand alternated between her nipples, building her desire. Cathy's entire body was in motion now as she sought release, her breath coming in hot gasps.\n\nSuddenly, I relented, and slid two fingers along her inner pussy lips, finding them hot and wet. \"Ohhhhhh,\" she moaned in response. I stroked my fingers up and down, lightly massaging her lips as she bucked against me. As the tension in her body grew, I concentrated on the juncture of her inner lips, gently massaging her clit through its hood. I knew what she wanted, but I wasn't ready to give it to her just yet. Cathy pushed, trying to get more pressure on her clit, but I rode along with her, keeping the pressure just under what she wanted.\n\nCathy was no longer relaxed against me. Her chest arched out, her legs tensed as she worked to thrust her hips, and her ass twisted between my legs. I finally relented and pressed my fingertips under her hood, finding the protruding knob of her clit. Cathy gasped and pushed hard, mashing it against my fingers. I stopped being gentle and pressed deeply, letting her clit roll between my fingers.\n\n\"Oh, yeah,\" Cathy moaned. I rubbed deeply as she bucked against me. Her breath came in gasps as she tensed, and then her body went rigid, straining against my hands at her breast and pussy.\n\n\"Ohhhh, ahhhhhhhhh,\" she cried as she came. I held on as she thrashed under my hands, whimpering her release. Finally, her body relaxed and settled against mine. I held my fingers steady against her pussy and breast while her breathing returned to normal.\n\n\"I like your hands wrapped around me like this, especially after they made me feel so good.\"\n\n\"Making you feel good is really...fun,\" I replied. \"I like touching you; I like making you happy; I like feeling you get excited.\"\n\n\"That's a good thing, Brad, because I want you to have a lot of fun that way.\" Cathy leaned back for a long kiss.\n\nWe finally got up, made some breakfast, and made plans for a walk and picnic. During the afternoon, we walked by the river holding hands.\n\n\"Cathy, I really enjoyed spending a weekend with just you. It's not that I don't enjoy our sessions\u2014I really do\u2014but it was nice to spend some time together.\"\n\nCathy squeezed my hand. \"I feel the same way, Brad. Even without the fantastic sex, I would be having a great time with you.\"\n\nI stopped and looked at her. \"You're pretty special, Cathy.\"\n\nHer eyes sparkled. \"You are too, Brad,\" and she leaned in for a deep kiss, hugging me tightly.\n\nAs we separated, she caught my eye. \"The fantastic sex is pretty nice, though.\"\n\n\"Really damn nice,\" I said, pulling her close again.\n\nAs evening approached, we returned to Cathy's, and I gathered my things to go home.\n\n\"Thanks for spending the weekend with me,\" Cathy said as she met me at the door.\n\n\"It was my pleasure, Cathy. The only problem was that it was too short.\" We kissed and held each other close.\n\nAs I walked out to the car, she called out \"I'm looking forward to Thursday, Brad!\"\n\n\"Me, too!\" I wondered what my mystery girlfriend had in store for me.\n\n*\n\nPlease take a moment to vote and offer any comments. They mean a lot.\n\nAdditional chapters linked below. "
    ],
    "authorname": "Antonio_y_Cleopatra",
    "tags": [
        "romance",
        "spanking",
        "friends",
        "shy",
        "f masturbation",
        "ffm"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/the-web-ch-07"
}
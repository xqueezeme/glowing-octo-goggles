{
    "title": "Kayla the Bull Ch. 04",
    "pages": [
        "Author's Note: Sorry for the wait on this one. Didn't have the motivation to work on it, plus I was going back and forth with the story because it just wasn't working for me.\n\nI've also been thinking about it and I want to do 3-part story arcs divided into 3 chapters. So we just finished the Madi Arc and we're starting a new arc starting with this chapter, with a new girl ;). Don't worry, I'm not leaving Madi or Jason behind, I just want Kayla to experience more so she can really own the name \"Bull\".\n\nAgain, if you guys have any suggestions, feel free to comment and let me know what you'd like to see or anything I can improve on, and I'll see what I can do.\n\nAlso, I'm gonna start adding character descriptions at the beginning of every story from now on. It won't be a lot, just the characters that are in the story.\n\n<p align=\"center\">*** Characters in this Story ***</p>\n\nKayla\n\nAge: 20\n\nHeight: 5ft 4in (162cm)\n\nGender: Trans Female\n\nCock Size: 11 inches (28cm)\n\nIRL Inspirations: Mix between Scarlett Dove, Domino Presley, and Rookie Stray\n\nAmber\n\nAge: 20\n\nHeight: 5ft 10in (178cm)\n\nGender: Female\n\nBoob Size: 32E\n\nIRL Inspiration: Pornstar Darcie Dolce\n\nMs. Davis\n\nAge: 44\n\nHeight: 5ft 7in (170cm)\n\nGender: Female\n\nBoob Size: 36E\n\nIRL Inspiration: Pornstars Diamond Jackson and Jada Fire.\n\n*****\n\nA ray of sunlight appeared on Kayla's face. Squinting at how bright it was, she groggily woke up and stretched out of bed. She looked at her phone and checked her messages. Madi sent her a picture of her legs spread out while she had a huge dildo half way inside her pussy.\n\nMadi: I miss your cock, this dildo isn't enough. Madi messaged.\n\nKayla: I miss your tight pussy, sorry our schedules didn't line up\n\nKayla had school today and Madi had a 10 hour shift. So both of them were pretty sad they couldn't have fun.\n\nMadi: Don't worry about it sweetie, we'll see each other during the weekend.\n\nKayla was excited, it had been a few days since they first met, but the weekend was so far away just thinking about it.\n\nMadi: I gotta go, my break's about to end, ttyl\n\nKayla: Keep that pussy wet for me ;)\n\nKayla let her arm fall to the bed and looked up at the ceiling. She had no interest in going to school today, but she already missed 2 days since she spent most of her time with Madi. To avoid getting her financial aid taken away, Kayla reluctantly got up and got ready for school.\n\nKayla turned on the shower and waited for it to get warm. As she waited for the steam to rise, she looked in the mirror and stared at her bare body. Her whole life she was always so worried that her body would be the downfall for any hope of a physical relationship. But her experience with Madi changed all that and gave her a surge of confidence. Although, still a little shy, Kayla felt even if she did get rejected, she would still have people like Madi. People that loved her huge cock.\n\nKayla saw that the mirror was foggy, so she entered the shower. The warmth of the water felt good, and she just let it run down her face and back. It was so soothing that her balls dropped all the way they could. She rubbed her hands throughout her body and felt a little dried up cum from the other night.\n\n\"Sweetie!\" A voice yelled outside the bathroom door.\n\n\"Yea, mom?\" Kayla replied as she scrubbed shampoo on her hair.\n\n\"I'm gonna head out, I left some breakfast on the table.\"\n\n\"Okay,\"\n\n\"Be safe till I get back on Monday.\"\n\n\"Yea, I know mom,\" Kayla said in annoyance.\n\n\"Mmmk, love you.\"\n\n\"Love you.\"\n\nKayla heard the front door close.\n\nKayla's mom comes by and lives with her every now and then. After the first semester of college, driving from her parents house to the campus wasn't the best use of money. So with the help of her parents, she got an apartment near the school, but her mom was only okay with it if she came by and slept over sometimes. Kayla was okay with it, since she didn't have a roommate or a committed relationship, having her mom live with her 2-3 times a week was okay. There really wasn't a schedule when her mom would come visit, other than a text message to let Kayla know, it was pretty random.\n\nAfter her shower, Kayla got out only wrapping her hair in a towel. Walking out of the bathroom naked, taking confident strides. She saw the food her mom left on the table and sat down. Her flaccid cock dangled off the chair and she felt the cold air hit her golf-ball sized balls. Eating her eggs and pancakes, she looked through the Cuckold subreddit.\n\nAs she saw some of the same old posts, she saw some bulls posting themselves for a good time. One of them said \"26 yo male, 8 inches hard, in the chicago area.\"\n\nKayla smirked at the size knowing she was way bigger than he was. She scrolled through the subreddit even more and found more guys around 7-9 inches, but she didn't really see anyone her size.\n\nEvery post showed guys smaller than her and making these women moan in ecstasy, like it was a type of pleasure that couldn't be felt before. Now thinking about it, Madi really did look like those girls in those hentai porn videos when she rammed all 11 inches in her.\n\nKayla sighed.\n\nShe missed Madi, but wasn't sure if it was because of her company or the sex. Kayla really did like being with Madi, but just talking to her and the sex kinda blended together. It really made this decision on escorting difficult for her. She asked herself, did she want a relationship, the sex, or both. Both sounded nice, but Kayla wondered how she would balance all that together. What if she found another girl while escorting and she became the new Madi. What then?\n\nKayla shook her head deep in thought and went to change.\n\nShe had 15 minutes before class started and it only took 20 minutes to get there from her apartment. In a bit of a rush, she slammed the door on her way out. The slam echoed throughout the hallway, resulting in the neighboring apartment door opening.\n\n\"The hell is happening?\"\n\nIt was Kayla's neighbor Ms. Davis.\n\n\"Sorry Ms. Davis, I'm kinda late for class and I slammed the door on accident,\" Kayla said apologetically.\n\n\"That's fine and all but sweetie, some of us have guests that are still sleeping',\" Ms. Davis whispered.\n\nKayla bowed her head, \"Sorry Ms. Davis, I'll be careful next time.\"\n\nMs. Davis slowly closed her door back inside. Kayla felt her head still a little warm, but it was starting to cool down.\n\nMs. Davis was living across the hall when Kayla moved in. She was a typical neighbor, friendly, but still stern when something bothered her. Usually when Kayla blasted music, Ms. Davis would ask her to turn it down a bit, but other than that it was a good relationship.\n\nMs. Davis looked to be in her 40's. Tall, dark, and long black hair. She looked like a young Angela Bassett, just with bigger boobs.\n\nAs for the guest she had today, it was not her first. Kayla noticed she would have several guests over different nights. Kayla had her suspicions since she saw mainly men leaving her apartment every morning.\n\nThe one theory Kayla always came back to was that Ms. Davis just brought home guys to fuck after a night of going out.\n\nShe always admired how confident Ms. Davis was. Always so care free of how she looked in public, and always bringing home someone new.\n\nKayla wasn't really the best at socializing. The only time she actually communicated was when she was behind a screen.\n\nKayla looked at her phone for the time as she walked down the stairs.\n\n10:50 A.M.\n\nShit.\n\n*****\n\nKayla rushed through the hallways to her classroom. She was about 10 minutes late, but it was only Art appreciation so not too bad.\n\nKayla walked in quietly, avoiding all eye contact and looked for a seat in the back.\n\n\"Welcome miss Scott,\" Kayla's professor said out loud.\n\nKayla faced her professor and walked to her seat.\n\n\"Sorry I'm late.\"\n\n\"It's fine, I was just going to say that you missed some information that I mentioned at the beginning of class.\"\n\nKayla tilted her head in confusion and worry.\n\n\"I'm assigning you all to group projects in pairs of two.\"\n\nKayla's face scrunched her eyebrows in sadness.\n\n\"I already paired everyone up, I'll tell you all when class ends.\"\n\nAs Kayla sat down, she was filled with despair and anxiety. She hated group projects. Everyone was always so difficult to meet up with and they were either always lazy, had a big ego, or just plain mean.\n\nSince it was a group of two, Kayla thought it was a little easier than a big group.\n\nShe looked around the class to see who she would be forced to work with. She hoped to God it wasn't Derick. He just gave fuckboy vibes with his stupid haircut and those stupid slip on slippers. It was like a bad copy of Justin Bieber and that wasn't a compliment.\n\nShe looked to her left and saw Samantha. A little less annoying, but Kayla noticed she never took notes. Kayla could already imagine the amount of stress and all nighters she'd have to pull if she worked with her.\n\nKayla sighed.\n\nWhoever she was going to work with, she just hoped they would be helpful.\n\n50 minutes later.\n\n\"Alright class, before you all go here is the list of pairs for the group projects. Find each other and talk about schedules. Remember, this is due in 1 month. It's 30% of your grade and there is no extra credit for this.\"\n\nKayla looked up at the projected screen and saw the excel sheet with everyone's names.\n\nShe frantically looked up and down the list and saw her name.\n\nKayla Scott/Amber Johnson\n\nExhaling in slight relief, Amber was an okay student. Kayla actually knew of Amber from her second high school, when she switched. She was kind of like a prep kid, but there were rumors floating around that she was sleeping with some of the football players. Never finding out if they were true or not, Kayla kinda forgot a lot of her high school experience.\n\nKayla looked around for Amber and saw her putting her books in her backpack.\n\n\"Hey,\" Kayla said softly.\n\n\"Kayla right?\" Amber asked with confidence.\n\n\"Yea\"\n\n\"I'm Amber,\" Amber held out her hand for a handshake.\n\n\"Hi,\" Kayla shook her hand.\n\n\"We went to Weatley together right?\"\n\n\"Uh, yea\"\n\n\"I didn't know you were in this class?\"\n\nKayla smirked with panic, \"I mean, I come early and sit in the back.\"\n\n\"Now that I think about it, I never saw you that much in high school either.\"\n\nAmber saw how uncomfortable Kayla started to look, \"So when do you wanna meet up for the project?\"\n\n\"I'm free right now,\" Kayla choked. \"We can just talk about what we wanna do it on and figure it out from there.\"\n\n\"Yea, that works for me,\" Amber nodded. \"My last class got canceled, so I'm free for the day.\"\n\n\"Cool, where do you wanna go? We can go to the library.\"\n\n\"Actually, can we go to my place? It's not too far from here. I had practice before class and I feel a little dirty.\"\n\nKayla raised her eyebrows. \"Uhhh, sure. Do you want me to come later after you shower or-\"\n\n\"Nah, it'll be quick. I just want to wash all the dried up sweat away.\"\n\n\"Uhh sure, okay.\"\n\n\"Cool, just follow me.\"\n\nKayla and Amber walked out of the campus. Both of them not saying anything yet, the silence hurt Kayla.\n\n\"S-so you had practice?\" Kayla said after building the courage to break the tension.\n\n\"Yea, we have a game next week.\"\n\n\"Basketball right?\"\n\n\"Volleyball\"\n\n\"Oh, my bad.\"\n\n\"It's cool, what about you?\"\n\n\"I'm not really into sports, unless it's swimming at the olympics.\"\n\n\"I don't blame you, it's really fun to watch.\"\n\nThey both continued walking in silence. The amount of tension and pain Kayla was feeling was unbearable. She kept waiting for Amber to say something, but she was quiet. Kayla couldn't take it, so she spoke again.\n\n\"Is college volleyball the same as high school or is it harder?\"\n\n\"It's a little different, everyone on the team is actually good and I don't feel as special anymore\"\n\n\"Oh, sorry about that.\"\n\nAmber chuckled, \"It was sarcastic Kayla.\"\n\nKayla smiled and looked around the street as they walked on the sidewalk.\n\n\"So how close do you live?\"\n\n\"It's like a 10 minute walk from campus.\"\n\n\"Wow,\" Kayla's eyes widened. \"I thought I lived close, but it takes me like 20 minutes.\"\n\n\"I could tell from your smooth entrance at class today.\"\n\nKayla turned red and looked away in embarrassment.\n\nAmber laughed, \"I'm fucking with you.\" Amber playfully shoved Kayla's shoulders. \"I get it, it happens to everyone.\"\n\nKayla smiled.\n\n\"So how's it been since high school?\" Amber asked.\n\n\"Oh, umm... it's been good I guess.\"\n\n\"Are you just doing school or are you doing other things?\"\n\nKayla slightly blushed thinking about her experience doing Madi.\n\n\"Uh, yea I'm just going to school.\"\n\n\"So what'd you do after senior year?\" Amber said as she kept pressing the walk button. \"Now that I think about it, I don't think I saw you at graduation.\"\n\n\"I didn't want to walk, I honestly wanted to be done with high school already.\"\n\n\"I get that, but high school for me was so much fun so I really wanted to spend it with everyone else.\"\n\nAmber saw how uncomfortable Kayla looked. Her head looking down with her eyebrows scrunched up, Amber saw the anxiety Kayla was going through coming up with an answer.\n\n\"Hey, it doesn't matter anymore. We're college girls now and we don't have to worry about high school anymore.\"\n\nAmber started walking a little faster as she pointed towards some apartments. \"This is us.\"\n\nKayla looked up and saw a pretty nice apartment complex. It looked similar to hers, but it didn't have a pool, instead it had a little park.\n\nKayla followed Amber as she guided her through the buildings that looked all the same.\n\n\"I'm right here,\" Amber pointed to a building that had a big E on it. \"I'm on the 2nd floor, so we're gonna have to go up the stairs.\"\n\nAmber walked the flight of stairs first. Kayla couldn't help but notice her ass swaying side to side. She wasn't wearing anything too revealing, but she could definitely see how round and plump it was.\n\nAs they reached the top of the 2nd floor, Amber pointed at a door right next to them. \"I'm right here,\" Amber looked at Kayla. \"I hope it's not too bad for you, I didn't get to wash the dishes from last night.\"\n\n\"It's fine, I don't mind,\" Kayla assured as she walked into Amber's apartment.\n\nLooking around, Kayla was shocked at how big the place was. She looked down the hall and saw that there were 3 rooms. She looked over and saw the pile of dishes in the kitchen sink.\n\n\"So do you live with anyone else?\"\n\n\"My ex and my ex best friend.\"\n\nKayla did a double take and turned back to Amber in confusion.\n\n\"Wait, you live with your ex? And did you say 'ex best friend'?\" Kayla questioned.\n\n\"Yea, it wasn't really much of a choice since we had a lease contract and I don't have much to find a new apartment.\"\n\n\"What happened?\" Kayla realized how personal that question was and immediately tried to take it back. \"I-I'm sorry, you don't have to answer that, it was a little personal.\"\n\nAmber unfazed, she took off her shoes, \"oh no, it's fine. He ended up cheating on me with her. Since we were all so close, we thought living together would be a good idea.\"\n\n\"I'm sorry. No one deserves that.\" Kayla said as he looked around the room.\n\n\"Don't worry about it, I got over it months ago.\" Amber undid her bra under her shirt, \"I just need to save a bit more and wait the lease out.\"\n\nKayla's eyes widened as she looked back and saw Amber taking off her shirt.\n\n\"Oh, sorry,\" Kayla turned away. \"I didn't know you wer-\"\n\nAmber was confused and stopped taking her clothes off as she thought why Kayla was so awkward.\n\n\"Ohhh, sorry Kayla,\" Amber picked up her shirt to cover herself. \"I'm just so used to changing with the team, I didn't think it'd make you uncomfortable.\"\n\n\"No, it's fine,\" Kayla turned back to Amber. \"I just didn't know you were doing it and I was surprised.\"\n\n\"You sure?\"\n\n\"Yea, I don't mind, plus it's your home.\"\n\n\"Mmmk, just let me know if you change your mind,\" Amber said as she removed her shirt showing her E cup tits.\n\nKayla starred as Amber finally took off her jeans with nothing but her pink laced panties.\n\n\"I'll be quick, I'm just gonna shower and then we can start on the project.\" Amber said as she walked to the bathroom.\n\nThe bathroom door was left a little open and Kayla could hear the shower faucet turn on.\n\n\"You can sit wherever, there's some water in the fridge if you want,\" Amber raised her voice over the shower head turning on.\n\n\"Kay, thanks,\" Kayla sat on the couch as she still had Amber's beautiful tits in her mind.\n\nThey weren't as big as Madi', but for her proportions, they looked perfect. The image kept playing back in Kayla's head to the point where she noticed her cock growing a little.\n\nShe could feel that she wasn't fully hard, she was about 30% hard. But that was already too much she could handle due to where she was right now. Kayla got a throw pillow from the couch and sat on the floor covering her crotch hoping the pressure would calm down her girlmeat.\n\nTrying to distract her mind, she took out the project paper of what they had to do. Reading through it, they had to create an abstract art piece with 3 colors. They had full freedom in what they could use, be it paint, pencils, or oils. The last requirement asked that the canvas they used would have to be 41 x 54 inches.That was pretty big, that was about 3 x 5 ft.\n\nKayla thought of different approaches to how they were to make this as a team. Paint would be the easiest since it was an abstract they could both do what they want and feel it out. Kayla googled different abstract pieces to see what would look best. She looked at different color combinations, different shapes they could use. All of it distracted her enough to the point where she lost her hardon and was focused at the project at hand\n\nA few minutes later, Kayla heard the shower stop and the curtains open.\n\n\"Hey, when do you think we'll finish the project?\" Amber said from the bathroom.\n\n\"Uh, it looks pretty simple, we just need to decide what we want to do.\"\n\nThe bathroom door opened and Amber came out with a towel wrapped around her. With her short hair wet, she used another towel to dry her head and neck, \"So what do we have to do?\"\n\nKayla stared at Amber's beauty. She felt pressure in her crotch area and started pushing the throw pillow to contain her cock.\n\n\"Umm, based on the requirements, we're supposed to make an abstract using whatever we want but the canvas has to be 3x5 feet.\"\n\n\"3 x 5 feet? Wow, all of our assignments so far have been small portraits or landscapes,\" Amber said as she sat next to Kayla.\n\nAs soon as Amber sat down, the air wafted towards Kayla's nose and smelled of some fruity scent. Kayla turned her head to Amber who was looking over the paper. Kayla looked at Amber's face but slowly drifted her eyes down to her neck and chest.\n\nKayla could see Amber's nipples poking through the towel. She could feel her cock getting hard.\n\n\"So what are you thinking?\" Amber's voice asked in a soft spoken voice.\n\nKayla had chills run down her back and her cock wanted out. It was probably at 70% hard right now. Fearing this getting worse Kayla quickly got up.\n\n\"Uhh, can I use your bathroom?\"\n\nShocked at the sudden jolt from Kayla, Amber points to the bathroom, \"Yea, it's right there.\"\n\nKayla walked and turned her body in a way where she could hide her bulge from Amber. Awkwardly walking with her legs squished together, she accidentally slammed the bathroom door.",
        "Kayla quickly took off her pants and saw a huge bulge stretching her underwear. Since her panties always tore and were uncomfortable for Kayla, she resorted to mens underwear. Even those seemed to be too small to contain the big problem she had right now.\n\n\"Shit,\" Kayla thought. \"Why here, why did I have to get hard here?\"\n\nKayla slid her underwear down and her cock plopped out with freedom. She felt a slight relief letting her girl cock breath. All 11 inches were present and she needed to get rid of it. If Amber found out, she would probably be disgusted and want to switch partners. If that happened, her professor would question both of them. This was a nightmare.\n\nWaiting for Kayla, Amber googled some pieces that they could use as inspiration.\n\n*BRRR*\n\nAmber turned to Kayla's phone vibrating on the table. Curious, she glanced at the screen and the lock screen showed a message that was sent to her.\n\nMadi: I miss ur cock sooo much ;)\n\nAmber's eyes widened as she reread that message again. No matter how many times she read it, this \"Madi\" claimed that Kayla had a huge cock.\n\nConfused, Amber tried to unlock the phone, but it was a pattern lock. So after 1 attempt she just left it alone. But the curiosity was still there, Kayla? With a cock? Immediately Amber assumed Kayla was trans. Amber had never met a trans person before. Especially Kayla who looked so feminime. A part of her felt embarrassed because that was her immediate thought process but Amber really couldn't tell Kayla was trans.\n\nAmber was determined to see for herself.\n\n\"Hey, someone messaged you,\" Amber yelled through the wall.\n\n\"What?!\" Kayla said with a panic.\n\n\"Do you want me to message them back?\"\n\n\"What?!?!\" Kayla blurted with desperation, \"NO!\"\n\nThe bathroom door quickly opened with Kayla rushing towards the living room floor. Sitting back down, Kayla opened her phone to check the message.\n\nAmber looked as she saw Kayla's face of worry and concern turn to one of a slight smile and relief. Seeing Kayla replying to the text, Amber looked down to Kayla's crotch to see if there was any bulge.\n\nAmber was in shock.\n\nKayla didn't just have a bulge, she was packing something huge. Usually when she accidentally looks at a guy's junk, she barely notices it. She could always tell there was something obviously there. Even with her ex, she could see a slight bump when he wore shorts or tight jeans. Kayla on the other hand, her bulge looked like she was hiding a baseball in her pants.\n\nThe sight of Kayla's crotch made Amber shiver with pleasure. She thought about all the memories when she was 18 and in her senior year, with all the guys she slept with. All the times she thought she had done all the cocks in school. Then after finally graduating, settling down with Brandon, her ex. But now she was faced with a cock from high school she missed. And it came from Kayla.\n\nKayla put her phone down with a smile and looked over to Amber who was staring at her crotch with her eyes wide open.\n\nAs her heart sank, Kayla grabbed the throw pillow and covered her bulge.\n\n\"Uhh, so what did you want to do... with the project?\"\n\nAmber wanted to do more than just see it, she wanted to touch it. Kayla looked embarrassed but Amber wanted to give her some confidence.\n\n\"So I was thinking we'd do basic abstract stuff, throwing paint and whatever.\"\n\n\"O-okay,\" Kayla said as she wrote in her notebook.\n\n\"I was also thinking we'd add some brush strokes, maybe some squares or something. Really paint in some hard strokes.\"\n\nThe soft voice of Amber made Kayla's eyes flutter with chills, \"Y-yea, s-sounds great.\"\n\n\"I'm getting a little hot, do you mind if I take off my towel?\"\n\n\"Uhh,\" Kayla looked deep into Amber's eyes and squeezed the throw pillow with anxiety. \"Sure, w-whatever makes you comfortable.\"\n\n\"Thanks,\" Amber said as she took off her towel exposing her decently sized tits.\n\nKayla gulped as she felt her shoot a little precum in her pants. Looking at Amber's tits up close, she noticed she had pretty large areolas, but they were pale enough to blend with her tits. They looked so perfect they could be fake, but they moved and bounced like they were real.\n\nAmber noticed how entranced Kayla was, as she scooted closer to her. \"You know, we could also try different techniques instead of brushes.\"\n\n\"L-like what?\"\n\n\"We could use our fingers, our hands, any part of our bodies if you want,\" Amber said seductively as she leaned in as placed her soft lips onto Kayla's.\n\nKayla couldn't believe what just happened. As they were making out she caught herself moaning with pleasure. Stopping herself from it getting worse, she broke the kiss.\n\n\"I'm sorry, what are we doing?\" Kayla said with confusion.\n\nAmber sighed.\n\n\"I'm sorry, you left your phone behind and I glanced at it when somebody sent you a text.\"\n\n\"Wait, what?\"\n\n\"Yea, some girl named Madi said she missed your... cock.\"\n\nKayla covered her face with the pillow with embarrassment.\n\n\"And after you came back from the bathroom, I saw your bulge and I wanted to see for myself.\" Amber admitted.\n\nKayla was mortified.\n\n\"B-but what about your ex and your friend? This isn't right, I don't want to cause any drama.\"\n\n\"Kayla, he's an ex for a reason, same as my so-called 'best friend'.\"\n\nKayla was in awe. What the fuck was going on with her luck the past month, first Madi now Amber? This was happening so fast.\n\n\"I-I\"m sorry Amber, but I'm starting to get a little anxious with all this.\"\n\n\"Oh,\" Amber felt a little horrible. Forcing this on Kayla probably wasn't the best idea. \"I'm so sorry. I got a little carried away. I completely forgot about this Madi girl you were messaging.\"\n\n\"M-Madi and I aren't going out, I just see her from time to time to... you know...\"\n\nAmber's eyebrows raised, \"Then... do you want to do this or am I just making things worse?\"\n\n\"I-I want to do this, but it was just happening so fast it felt overwhelming.\"\n\n\"Sorry...\" Amber looked down and then slowly got closer to Kayla. \"Then why don't we take this slow.\"\n\nKayla felt Amber's hand on her thighs as she gently caressed them. Feeling a little twitch from her cock, she removed the pillow and Amber got close to her lips.\n\n\"So your cock must be something if this Madi girl misses it so much.\"\n\nKayla nodded as the both of them made out.\n\n\"Can you show me?\" Amber whispered.\n\n\"O-okay.\"\n\nKayla got up and unbuttoned her jeans as Amber saw a huge bulge twitching in her underwear.\n\nKayla could feel Amber's breath near her crotch. She hadn't even taken her cock out yet and she felt like cumming already.\n\n\"Pull down my underwear,\" Kayla softly begged.\n\nAmber could see the shape of her cock start to form the past few minutes and she wondered what it would actually look like. She saw a rather big wet patch of precum at the center of Kayla's underwear. Building the roleplay, she put her lips on the underwear as she pulled them down.\n\n*Smack*\n\nKayla's hard, heavy cock made an audible smack onto Amber's face.\n\n\"Holy shit,\" Amber chuckled as she looked in awe at Kayla's massive girl cock.\n\n\"D-Do you... like it?\"\n\n\"You're hung,\" Amber said as she wrapped her right hand around it. \"It's so thick too.\"\n\n\"B-but, you don't mind it?\"\n\n\"Kayla, I've seen a lot of cocks... all of them aren't even close to your size.\" Amber placed her hands underneath her pussy. She lifted her hand and her pussy slime stretched from her pussy to her hand.\n\n\"Look how wet I am just looking at it. Even Brandon can't do that. He has to do a lot of foreplay to get me wet.\"\n\n\"Do you really mean that?\"\n\n\"Kayla, babe...\" Amber started slowly stroking her cock. \"You need to be more confident carrying something like this.\"\n\nKayla moaned with pleasure.\n\n\"Has no one ever told you your cock is amazing?\"\n\n\"I mean I've always kind of known I'm bigger than most guys because of porn, but I've only been with only one person sexually.\"\n\n\"This Madi right?\"\n\n\"Yea, she told me it was the best sex she ever had.\"\n\nAmber smiled as she proceeded to wrap her mouth on the tip of Kayla's cock, \"I'll have to be the judge of that, but I don't see you disappointing.\"\n\nKayla exhaled with pleasure. Looking down, Amber started sucking her head. Kayla was so surprised at how much warmer Amber's mouth was compared to Madi. Madi gave amazing blowjobs, but they were more wet and slobbery. Amber's mouth was basically a hot face towel wrapped on her cock.\n\n\"T-That feels so, uughhh... so good.\" Kayla tried to speak.\n\n\"You're so huge, just your head already gave my jaw a little trouble.\"\n\n\"Oh, uhh... do we need to stop?\"\n\nAmber smirked and began taking more of Kayla's cock.\n\n\"Fuck, that feels good... a-are you sure you dont need a-a break?\"\n\nAmber bent Kayla's cock to the side so she could see her face showing her eyes squint with sarcastic annoyance.\n\n\"Kayla, nothing is going to stop me from taking all of your massive cock. I want you to put all of it down my throat, all the way deep in my pussy, and if you want... all the way in my ass.\" Amber winked.\n\nAfter hearing Amber say that, Kayla got the same surge of confidence she felt when she was with Madi. She put her hands behind Amber's head and forced her to swallow more of her girlcock.\n\n\"Fuck, your mouth feels so fucking good.\"\n\nAmber tried to speak with Kayla's massive shemeat in her mouth, but all that came out was just her throat sloshing saliva from the beating it was getting.\n\nAfter a few minutes, Amber's throat relaxed and Kayla was able to thrust at a steady pace. Still only taking only about 5 inches, Amber was determined.\n\nKayla could hear more gagging from Amber as she loosened her throat more. Looking down, she could see her eyes start to water as she thrusted her thick cock deeper into her face. With each thrust, she could hear Amber's throat gulp and gasp for air.\n\nKayla moaned with pleasure as she felt Amber's throat get tighter like a pussy.\n\n\"Shit that's tight.\" Kayla whispered, \"You almost have all of me. Just a few more inches,\" Kayla petted Amber's head as she saw tears starting to fall down the corner of her eyes.\n\nAmber tried to speak, \"Ynnnnng ko iiig.\"\n\n\"Shhh, don't speak with your mouth full.\" Kayla naturally said as she gained more and more confidence.\n\nKayla tried to slow down her pace to let Amber have an easier time to swallow all of her cock.\n\n\"You're almost there Amber,\" Kayla whispered as she grabbed Amber's head with her hands and pushed her head slowly towards her mound. Then she felt it. She felt Amber's nose and her breathing heavily on her.\n\n\"That's so good,\" Kayla said in a sweet manner. \"You did it babe, you have all 11 inches of my girl cock down your throat.\"\n\nThe corner of Amber's mouth lifted and showed a slight smile, and her eyes squinted with joy at her accomplishment. She knew Kayla was big, but 11 inches!? The biggest cock she's had was 7, and he didn't even try to put all of it down her throat. He just wanted the blowjob to feel good. Even when it was in her pussy, he could only put 6 inches in. Hell, Brandon's only 6 inches too and he can barely hit her throat.\n\n\"Okay, my sweet Amber, time to pick up the pace. I wanna cum down your throat.\"\n\nAmber nodded.\n\nKayla moaned as she thrusted faster and felt Amber's throat tighten and loosen. But it wasn't enough, Kayla wanted to treat Amber's throat like any other pussy she would fuck.\n\n\"Can I go a little rougher?\"\n\n\"MMmm Hmmm,\" Amber hummed as she nodded yes.\n\nSmiling, Kayla grabbed Amber's head and forced it to swallow her massive cock faster. With each thrust she could hear Amber's throat try to cope with the size and add more saliva to her throat.\n\n\"Fuck you feel so good.\"\n\nKayla couldn't believe how good just her throat felt. She couldn't wait until she could thrust her huge cock in Amber's slut pussy.\n\n\"Shit, I'm gonna cum,\" Kayla grabbed Amber's hair tighter as she felt it coming.\n\nAmber started smiling and moaning as Kayla thrusted as fast as she could.\n\nWith one final thrust, Amber could feel a huge warmth hitting her throat as it slid down to her stomach. She could feel 6, no 8 spurts of cum.\n\n\"Fucking shit, that was amazing,\" Kayla exhaled as she pulled her cock out of Amber's mouth.\n\nAmber gasped as if she resurfaced for air after diving on the deep end.\n\n\"holy shit kayla,\" Amber's voice was raspy. \"No one's ever cummed that much in me from oral.\"\n\n\"Sorry,\" Kayla looked up to the ceiling as she tried to catch her breath. \"A-Are you okay? Is your jaw or mouth hurting?\"\n\n\"A little, but it's not too bad.\"\n\n\"Sorry I was rough, I-I don't know what got into me.\"\n\n\"Kayla, when it comes to sex, if both people are into you don't have to apologize for it. In the moment, all the pleasure I feel, all the adrenaline, it makes everything so much hotter. Something about being controlled but taken care of makes me so wet.\"\n\nKayla was confused.\n\n\"I loved it Kayla, someone dominating me makes my pussy shiver.\"\n\n\"I'm glad you liked it.\"\n\n\"It's sad tho, I kinda wanted you to fuck my pussy. Maybe another time.\"\n\n\"Oh... umm,\" Kayla turned her head away with slight embarrassment. \"I-I can still continue... if you want.\"\n\nAmber looked down to see Kayla's semi hard cock get harder again.\n\n\"Wait? What?\"\n\n\"I don't really have a refractory period. I mean I do, but it's like a minute or something.\"\n\nAmber smiled and placed her soft lips onto Kayla's.\n\n\"You're amazing you know, not one guy I've been with has lasted even a few minutes with me, and you fucked my throat for 10.\" Amber whispered as she kissed Kayla's mouth and stroked her cock.\n\n\"You just felt so good.\"\n\n\"Why don't you get hard for me and fuck my pussy\"\n\n\"B-But I don't have a condom.\"\n\n\"Don't worry, Brandon keeps his in the bathroom cabinet.\"\n\n\"O-Okay, I'll be back.\"\n\nKayla was worried. She had never used condoms before. When she did it with Madi, she was on birth control. Kayla didn't know if she'd be able to stay hard with condoms. Filled with anxiety, Kayla searched through the cabinet, and found Brandon's pack.\n\nComing back out with the condom, she stared at Amber awkwardly, \"I-I umm, this is actually my first time using a condom.\"\n\n\"Oh,\" Amber said softly. \"Do you want me to help you put it on?\"\n\n\"I-Is that weird?\"\n\n\"Kayla, babe, that's perfectly fine. I just thought with that thing between your legs, you'd already have the chance to use one.\"\n\n\"You're actually the second person I've been with.\"\n\n\"Wait, really?\"\n\n\"Yea, when I'm with Madi I don't have to worry about condoms cause she's on birth control.\"\n\n\"That must feel amazing, having that 11 inch cock raw.\"\n\n\"S-Sorry,\" Kayla looked down from embarrassment.\n\n\"Kayla, it's nothing to be sorry about. I mean I'm not on birth control so we do need the condom, but I'm happy to help. C'mon, get closer.\"\n\nAmber moved over as Kayla sat right next to her, \"So what you want to do is make sure the little bubble here is facing up. After that we just roll it down your cock. Do you want me to do it or can you?\"\n\n\"C-Can you?\"\n\nAmber chuckled, \"Of course.\"\n\nAs Amber rolled the condom onto Kayla's cock, Kayla felt some tightness from it. Visibly looking uncomfortable, Amber stopped. \"What's wrong? Is it too tight?\"\n\nKayla nodded.\n\n\"It's probably because this condom is too small for you.\"\n\n\"I-Im sorry.\"\n\n\"It's not your fault Brandon's small.\"\n\nKayla smiled at the joke, \"S-So what do we do?\"\n\n\"It's up to you, if you want to use this condom and fuck me or just... you know, wait till you can get magnums.\"\n\nKayla was sad, she didn't want to wait to fuck Amber's pussy. She wanted to know what she felt like compared to Madi. She wanted to see if she could satisfy her like Madi.\n\n\"I-I can try to use this one, if you want.\"\n\nAmber smiled, \"Okay, let me roll it down all the way then.\"\n\nAs Amber rolled the rest of the condom down, Kayla could see her cock overfilling the condom.\n\n\"Alright, all done. Do you feel okay?\"\n\nKayla looked at her cock and the condom didn't even cover her completely. Only about half of her was covered.\n\n\"Isn't it supposed to cover all of me?\"\n\n\"Yes, but it is for small dicks\"\n\n\"But is it going to be okay?\"\n\n\"Should be fine, just be careful it doesn't slip out. What about you? Does it feel too tight?\n\nKayla thought about it for a second. \"It's tight but I'm still hard so can we still try?\"\n\n\"No need to ask me, I want that thick girl cock in me.\" Excited, Amber layed on the couch with her legs spread open. \"Be slow about it though, I've never had a cock that big before.\"\n\nKayla nodded as she positioned the tip of her head at the entrance of Amber's pussy. She could see that she was already wet, but thought it would be better if she could have her drip like Madi. Maybe all that pussy juice could help slide her cock easier.\n\nGrabbing her cock, she started rubbing her head onto Amber's clit.\n\nAmber silently moaned as she bit her lip. Kayla was right, Amber was leaking pussy juice plus the condom was doing it's work. She could see some of her precum build and coat around her cock, keeping it from coming out. But she didn't really feel anything as she rubbed her cock on her clit.\n\nKayla was getting impatient now, \"I'm gonna put it in.\"\n\n\"Okay, just... go a little slow.\"\n\nKayla nodded as she slowly pushed her cock into Amber's pussy.\n\n\"Oh fuck, that's a lot.\" Amber was taken back by how filling Kayla's cock actually was.\n\n\"Does it hurt? Do you want me to stop?\"\n\n\"N-No, it's just... a little bigger than I thought.\" Amber scrunched her face as Kayla went deeper.\n\nKayla on the other hand, if she thought Madi was tight, Amber was basically a virgin.\n\n\"FFucking shit, that's a big cock.\"\n\nKayla continued slowly pushing forward. \"Y-You're so tight.\"\n\n\"I-It's not m-my fault I've never had a good e-enough cock.\"\n\nKayla looked down and saw that only 4 inches went in. \"You're almost halfway.\"\n\n\"Halfway? Ffucking hell, you're so fucking thick.\"\n\n\"Let me help you then.\" Kayla placed her thumb on Amber's clit and started rubbing.\n\n\"OOOhhh,\" Amber moaned loudly.\n\n\"Does that feel good?\"\n\n\"I-It feels amaaazing.\" Amber gritted her teeth.\n\nAs she rubbed her clit, Kayla started thrusting in and out slowly pushing deeper into Amber's tight pussy.\n\n\"You're doing better, you're pussy is getting used to my size.\"\n\nKayla picked up the pace and immediately saw that Amber's pussy was getting more and more wet, allowing her to push deeper.\n\n\"That's right... fuck... me... harder.\" Amber said after every thrust.\n\nAmber couldn't believe the amount of pleasure she was feeling right now. Kayla wasn't even all the way in and she was able to reach places no other guy had been before. She could hear and smell her pussy slosh and splat her juices out. She never knew sex could put her in ecstasy. She wanted more.\n\n\"I want... all of it. Shove your cock in me,\" Amber demanded.\n\n\"But you told me to go sl-\"\n\n\"I don't care, I want all of your massive girl cock inside my tight little pussy. Fuck me, fuck me Kayla.\"\n\nKayla listened and quickly pushed her cock all the way in.\n\n\"FUCK\" Amber yelled as she gasped for air.\n\nKayla felt her pussy tighten and her whole body shake. Amber looked like she just orgasmed.\n\n\"D-Did you just cum?\"\n\nAmber was silent, nodding while shaking. She never came like that before. Usually her orgasms were from guys rubbing her clit. It wasn't bad, but she never understood why some girls came from just a cock inside them. But with Kayla, it was different. She was able to hit every spot, go deeper than no other cock has gone before, that made her squirm with pleasure.\n\n\"Do you want me to keep going&gt;\"\n\n\"Yes,\" Amber begged.\n\nKayla grabbed Amber's spread legs and started shoving her closer with each thrust. At a fast steady pace, Kayla was fucking Amber like she had done with Madi. Similarly, Amber's tits bounced with every thrust.",
        "\"You like that? You like my girl cock?\"\n\nAmber tightened her pussy, \"y-yes... I love it so much. Please don't stop.\"\n\nKayla looked down as her 11 inch cock was completely hidden in Amber's pussy.\n\n\"You know,\" Kayla whispered. \"You have all 11 inches of my girl cock inside you. Have any of the guys you fucked had a cock like mine?\"\n\n\"nooOO, all of them had small dicks.\"\n\n\"Did they satisfy you?\"\n\n\"N-No, they only made me cum by rubbing my clit.\"\n\n\"How many guys have you been with?\"\n\n\"37\"\n\nKayla was shocked, 37 guys and the biggest she had was 7 inches. What even shocked her most was that she knew exactly how many dicks she's had.\n\n\"It's cute that you know how many dicks you've had. Did your slutty pussy keep searching for a big enough cock?\"\n\n\"It did, but none of them were enough.\"\n\n\"Whose cock do you love now?\"\n\n\"YOURS! YOUR COCK.\" Amber yelled with pleasure. \"You have the best cock I've ever had. It's so big and thick.\"\n\nKayla was addicted to seeing Amber in ecstasy. She loved making her behave that way, begging for more. It was like a goal she had when she was with Madi, and she wanted to do the same to Amber.\n\nKayla picked put the pace and started fucking her faster, \"Oh fuck, that feels good. Your tight pussy feels good.\"\n\n\"Yes, f-fuck me more. Give me that fucking hung cock.\"\n\nKayla suddenly felt more pleasure as she fucked her faster.\n\n\"Oh my fucking god, this feels fucking so good,\" Amber said as she wrapped her legs behind Kayla's ass, forcing her to thrust all the way.\n\nBoth of them couldn't believe the amount of pleasure that was happening. With every pump, Kayla saw her cock make a little bump on Amber's lower stomach. She grabbed Amber's hand and placed it on top.\n\n\"You feel that? That's my huge she cock hitting your stomach.\"\n\nAmber shook and came again. Kayla continued her steady pace and started to feel the need to cum.\n\n\"I think I'm gonna cum.\"\n\n\"Cum for me baby, cum on my tits.\"\n\nKayla pumped her cock faster and faster until she felt it. Immediately, she pulled out and noticed the condom was no longer on her. No wonder it suddenly felt better. but that didn't matter right now, she began shooting 5 long thick ropes of cum on Amber's tits.\n\nAmber felt the warm girl milk coat her tits. She was so shocked by how much Kayla was able to produce. Even Brandon couldn't cum that much. He would only be able to do one spurt and then a few tiny little beads.\n\n\"What the fuck,\" Amber chuckled and smiled. \"I've never seen so much cum come out before.\"\n\n\"Sorry, I tend to have a lot.\"\n\n\"Don't be,\" Amber said as she scooped the cum from her tits and put it in her mouth. \"Wow, you actually taste really good.\"\n\n\"Yea, I've been doing it cause of Madi. I've been drinking more juice to make it sweeter.\"\n\n\"I'm surprised, all the cum I've had before was always so bitter, but I actually like this.\"\n\nAmber continued to scrape Kayla's thick cum off her tits and ate it.\n\n\"Umm, the condom kinda came off in the middle of fucking. Do we have to worry about that?\"\n\n\"I mean you came on my tits, so I don't think so.\" Amber saw the worry and anxiety on Kayla's face. \"But if it makes you feel better, we can buy a Plan B? Wanna split it?\"\n\nKayla nodded as she fell on the couch.\n\nAmber laughed. \"Did I tire you out?\"\n\n\"No kidding,\" Kayla smiled back.\n\nAmber started touching her pussy and noticed a big gaping hole. \"Holy fuck, look at this.\" Amber spread her legs in front of Kayla. \"I don't think I can have another cock anymore. You better take responsibility.\" Amber said jokingly.\n\nExhaustively, Kayla sighed, \"Whenever you want, just let me know.\"\n\nThe two girls cuddled on the couch as they fell asleep.\n\n*****\n\nA few hours later.\n\n*Jingle, Jingle*\n\nAmber jutted up realizing someone was trying to come inside the apartment.\n\n\"Shit, it's Brandon.\"\n\nKayla was disoriented and confused.\n\n\"Quick, quick, put your clothes on.\"\n\nAs Kayla grabbed her clothes and quickly tried to put them on, the door opened.\n\n\"Brandon! I'm naked!\"\n\n\"Relax, it's me.\" It was a female voice.\n\n\"Fucking shit Em, don't look!\" Amber pleaded.\n\n\"What are you whining about, you don't care if I see you nake-\"\n\nAmber's ex friend Emma stared right at Kayla's half naked body. Slowly looking down, she saw the biggest cock she had ever seen.\n\nKayla was flushed with embarrassment and quickly put her pants back on, \"I'm gonna go, sorry.\"\n\nAs Kayla gathered her things and left for the door, Amber quickly added \"I'll text you... \"\n\nRealizing what she said, she paused, \"... about the project. So we can do the project.\"\n\nKayla nodded and left the apartment.\n\nAmber and Emma looked at each other with awkwardness and confusion.\n\n\"Who... who was that?\" Emma asked.\n\n\"That's Kayla, she's in my Art class. She came over so we can go over a project.\"\n\nEmma squinted her eyes in disbelief that Amber could think she didn't see what she walked into.\n\n\"Sure... a project.\"\n\n\"Shut up Em, what do you care? You're with Brandon now, can't I have fun anymore?\"\n\n\"Look, I really don't care. I just didn't know you were into trans girls.\"\n\nAmber picked up her clothes and slowly walked into her room. \"I didn't know I was into girls in general but you saw what she was packing.\" Amber poked her head out of her door...\n\n\"11 inches by the way,\" Amber winked.\n\n*****\n\nKayla got back home tired and embarrassed. Looking through her phone, she saw that Amber messaged her.\n\nAmber: Hey, sorry about that. I kinda lost track of time. Didn't think about my roommates coming in at all... my fault.\n\nKayla: It's fine\n\nAmber: Hey, I really did enjoy today. Madi was right, best sex I've ever had\n\nKayla: I really enjoyed it too\n\nAmber: Oh btw, I already bought the plan b, you don't have to pay me back. Consider the pounding you gave me payment ;)\n\nKayla: Are you sure? I can pay the other half. Are you on venmo?\n\nAmber: Don't worry about it. Just make sure to cum inside me next time... I'll get birth control so you can fill me up with your load.\n\nKayla: That sounds amazing.\n\nAmber: I'll text you when we can meet up next time?\n\nKayla: Sure, let me know when ur free\n\nAmber: Cool, cya.\n\nKayla: Cya.\n\nKayla layed on her bed exhausted. What a day.\n\n*BRRR*\n\nKayla got another text. It was Madi.\n\nMadi: Just got back from work, can't wait to see you tomorrow.\n\nAttached to the text was a picture of her naked.\n\nKayla started stroking her cock until it got hard. Still feeling a little sore from what happened today, she took a picture and sent it to Madi.\n\nKayla: Here's a little something to keep you excited until then...\n\nAmber sent the heart eyes emoji back.\n\nStill tired, Kayla let her cock get soft and took a long shower and fell asleep right after.\n\nTo be continued.\n\n*****\n\nThank you guys so much for the supportive comments you've been giving me. I honestly wrote this series because I didn't find many with a big cock trans bull cucking a couple. So thank you for the comments, I really do read them and consider all of your suggestions.\n\nAgain, sorry for this being late. It also kept getting sent back so I had to revise some minor things that I thought were obvious to the reader.\n\nAlso I'm constantly changing how I write to see what works and doesn't work. As you can see, I love to write dialogue a lot. So let me know what you like I don't like and what you'd like to see more of (writing wise.)"
    ],
    "authorname": "Phunta",
    "tags": [
        "transgendered",
        "trans on female",
        "trans on girl",
        "shemale",
        "shemale on female",
        "shemale on girl",
        "college"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/kayla-the-bull-ch-04"
}
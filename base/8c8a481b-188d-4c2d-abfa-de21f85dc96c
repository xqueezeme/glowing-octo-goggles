{
    "title": "Two Hundred Dollars Ch. 15",
    "pages": [
        "Laura's Day\n\n2 Dollars\n\nNovember 1\n\nIf you sit in a Comparative Religions class long enough, you start to realize that there's nothing particularly special about the religion to which your parents raised you. Every single religion out there teaches that it owns the only path to god, or heaven or nirvana or whatever.\n\nLaura had figured out this sometime in the previous year, and had chosen to continue studying religions, hoping the education would free her mind just a little more.\n\n\"Hey, Laura,\" a small voice called out to her as the class broke up.\n\nShe turned to see a tall, quiet girl approach her.\n\n\"Mel, how are you?\" she greeted her classmate.\n\nMelanie swept a few stray strands of black hair out of her face as she held her backpack tightly against her chest and closed with Laura.\n\n\"That party last night,\" Melanie said.\n\n\"Yeah, are you okay?\"\n\nMelanie nodded, \"I'd never met that guy before, but it seemed okay. I mean it was a party at Connor's, right?\"\n\n\"Connor's a good guy,\" Laura agreed. \"He said he didn't know how that Frankenstein guy got in. He didn't know him at all.\"\n\nWith a sniff, Melanie went on, \"That was really creepy. I've never had anyone... try that before.\"<br >\"Yeah, I'm glad Kent caught him,\" Laura said.\n\n\"Yeah!\" Melanie gasped out. \"You know... Kent?\"\n\nLaura nodded, \"I, uh, run into him. He's a friend of a friend.\"\n\nWell, Laura thought, I could probably just call Kent a 'friend' at this point and be done with it, but whatever.\n\n\"Could you tell him 'thanks' for me?\" Melanie said, then shivered. \"I can't imagine-\"\n\nLaura put a hand on Melanie's forearm, \"Don't imagine, okay, Mel? We look out for ourselves and we look out for each other, right?\"\n\n\"Right,\" Melanie agreed. \"Just... just thank him for me.\"\n\n\"No problem,\" Laura said.\n\nMelanie lowered her backpack long enough to embrace Laura and the two quickly parted ways.\n\nThat was rough, Laura thought, I really don't know what to say.\n\nHer parents had sheltered her like crazy since infancy, as per the teachings of their church.\n\nIt's not the worst part of the church's teaching, but I missed so much growing up...\n\nLaura walked home, knowing the turn that took her towards her house instead of the apartment where Bailey, Kent and... a completely different version of herself lived. Her heart skipped a beat just looking down the street that led towards their basement digs.\n\nThat's the park where he spanked her, right out in the open. Maybe I could get Kent to spank me like that, if it didn't upset Bailey too much.\n\nShe let out a sigh.\n\nIf only Bailey hadn't gotten so upset about my solo session with Kent. I'm sure he'd love to do it.\n\nHer breath shuddered.\n\nEven if there's no money at stake. But that would still run afoul of Bailey's feelings. And why shouldn't it?\n\nLaura couldn't quite bring herself to start calling Kent 'Bailey's boyfriend'. Their relationship didn't work the normal way, assuming 'normal' relationships even existed. Whatever Bailey felt for Kent, she wanted a certain, very specific level of exclusivity.\n\nYou don't try to steal your best friend's boyfriend. That's just not done.\n\nAnd since Bailey had confided in her that she and Kent had taken things a little further down the road toward a relationship, it got Laura thinking about Kent.\n\nHas Bailey actually, you know, seen him? Or is it top of the clothes stuff they're doing?\n\nSo many questions occurred to her that she should have asked that morning, but she'd wanted to tell Bailey about how Kent had groped her.\n\nDumb. Bailey's story was way more important. I should have let her have her moment.\n\nArriving at her house, she unlocked the door. While the lock made it very likely she'd beaten her parents home, she couldn't know for certain.\n\n\"Mom? Dad?\"\n\nSilence greeted her and she locked the door behind her. Prudent girls did that sort of thing and her parents had lent her a strong fear of strangers since childhood.\n\nAnd Frankenstein monsters aside, that makes sense doesn't it? Also, it gives me time alone.\n\nHer breath caught in her throat.\n\nTouching yourself is wrong.\n\nLaura shook her head.\n\nIt's a sin, a descent into hedonism and a path away from goodness. It's a sign of weakness.\n\nSeveral portraits of Caucasian Jesus beamed down at her beatifically.\n\nUgh, this is why there are no pictures in my room.\n\nLaura had told her parents she liked a spartan, simplistic feel for her bedroom; a simple lie.\n\nLying is a sin, too. Lying to your parents to avoid the gaze of the Saviour is even worse.\n\nShe shook her head, Only if you're into Kant and his Categorical Imperative. If I need to lie to make my life better, then I can lie. I only have to lie because my parents won't let me have this little bit of freedom.\n\nDeclaring a desire for blank walls meant that the lack of Jesus in her room didn't look too suspicious to her parents.\n\nThe longer I don't go to church, the less guilt I feel.\n\nLaura closed her bedroom door behind her and looked at her bed. In her mind, she visualized Connor's guest bedroom, with all its hanging fabrics and dark wood. In the corner of her room, she kept a little, cloth sofa chair with a lamp over it for reading. She'd discovered a more important purpose for it a few years ago. While fabric covered most of the surface of the chair, its arms had a rounded, smooth length of polished wood running their entire lengths. If she put a thin piece of clothing over the wood, like the folded t-shirt she laid over it now, and put one knee on the seat of the chair, as she did next, the hardness of the wood became perfect.\n\nWith one foot on the floor, Laura settled the weight of her upper body on her crotch, pushing against her lips and her vagina.\n\nI'm not touching myself, she said sharply, apologizing to someone non-specific, so it's okay. It doesn't feel wrong.\n\nBut it's wrong. You should do something else. Do your homework. Clean the house. Go get a snack. This is sin!\n\nBut it's fine, she told the stupid church elder in her head, I can do whatever I want.\n\nShe gently humped along the chair arm, sliding her body against its length, softly nudging her clitoris.\n\nA thumping came down the hallway and Laura heard the door lock shaking.\n\nDammit. Caught!\n\nShe stood up immediately, blood draining from her face.\n\nIt's fine. It's fine. You're not caught. Nothing is wrong.\n\nShe put the t-shirt back in her dresser and comported herself. Her mother would expect her to help with dinner soon.\n\n=============================\n\nLying in bed that night, Laura didn't consider getting up. A fine thing if her parents heard her humping the chair in the middle of the night!\n\nI can't touch myself. I can't touch myself.\n\nShe remembered Halloween, letting her thoughts drift for a moment, and saw the shocked look on Kent's face when she showed him Dakota's little toy. Oh, it had hurt, but the pain ranked as nothing next to the excitement it brought her, the pride in showing him something new.\n\nGod, why do I want him to do that so badly?\n\nIt's because you're a bad person.\n\nI'm not a bad person.\n\nYou're weak because you want this.\n\nIt's pleasure. What's wrong with it?\n\nYou didn't earn it. You don't deserve it.\n\nUgh. Shut up.\n\nMaybe, if things turned out well enough, she could find a way to include herself again on Friday. Or maybe just get a moment by herself with her chair.\n\nThat's what makes the spankings okay.\n\nBecause that's what your Mother and Father did when they caught you touching yourself?\n\nI didn't even know what masturbation was. I wasn't even at puberty.\n\nYou were old enough to know better. And they punished you.\n\nI didn't know better, and they punished me.\n\nShe sighed, trying to shut down the internal dialogue she constantly had with the little Mormon preacher she carried with her everywhere she went.\n\nThe spankings did feel good in a sense, because they came through a bit like punishment. So whatever guilt her orgasms gave her she could get Kent to wipe away. But getting spanked like that didn't feel solely like punishment.\n\nYou're enjoying it, too, so it doesn't count. You're not supposed to enjoy yourself.\n\nWhy not?\n\nThat enjoyment is only for marriage.\n\nNo, it isn't.\n\nYou're a sinner and a fraud. You're stealing pleasure from your Saviour.\n\nMy Saviour isn't here. Look at the walls.\n\nSilence, then, from the preacher.\n\nSome time later, she fell into a peaceful sleep.\n\n=============================\n\nNovember 2\n\nLaura warmed her hands over around her tea cup, glad that Bailey had time to come over. Friday nights ought to be spent at parties and such, but Wednesday had run so late, she didn't have a whole lot of \"party\" in her at the moment. Tea on a cold night, however, came through perfectly.\n\nBailey had kept quiet, though, and Laura wanted to prod her a little. She'd stolen Bailey's moment, really, with her little boob-groping interruption, and Bailey deserved a bit more time to talk about her encounter.\n\n\"So? What happened last night?\"\n\nIt turned out, however, that Kent and Bailey hadn't picked up where they'd left off. They'd just done what sounded like platonic spankings and talked.\n\nThey talked about me?\n\nLaura set Bailey straight, making sure to look her right in the eyes and make sure her friend understood that she'd never, ever felt forced to do anything with her and Kent.\n\n\"Was that all?\" Laura asked, because she sensed something else wrong with Bailey's attitude.\n\nBailey grumbled, sipped her tea and blew out an exasperated breath.\n\n\"I did thirty over top, okay?\"\n\n\"Okay.\"\n\nGo on, tell me the rest.\n\n\"Then I offered him, y'know, some free ones.\"\n\nThat's generous. You must be feeling some intangible level of debt over the bra and panty set. Have you even shown him the whole thing yet? I should ask, but maybe later.\n\n\"Free ones?\"\n\n\"Yeah, I pulled down my pants and everything.\"\n\n\"And then?\"\n\n\"He said 'no'. Just turned me down with my butt sticking out at him.\"\n\nThat sounds awful. Rejection is one thing, but rejection when you're basically naked, exposed emotionally and physically -- sexually even. That's the worst kind of hurt. You should be crying right now if you were the type to cry. But you never do, not even in front of me.\n\nSilence stretched between them.\n\nI should say something soothing, to let you know it's okay to cry.\n\nBut Bailey looked angry. Not 'anger that covers vulnerability' but some other kind of anger.\n\nFree ones.\n\nLaura peered at Bailey harder.\n\n\"How many 'free ones' did you offer him?\"\n\n\"Does it matter?\"\n\nOh, Jesus, Mary and Joseph, you know it matters, Bailey.\n\n\"How many?\"\n\n\"I guess I offered eight. You know, as a gift.\"\n\nIf you pulled your panties down, which I suspect you did, that works out to exactly two dollars.\n\n\"Eight.\"\n\n\"Eight,\" Bailey confirmed.\n\nI have to fix this. She's still angry about that day I stopped by. She's still trying to fix it on her own, and she can't. Kent won't even let her because he has his own rules. We have to talk this out, somehow, and make it better. I can't have my friend angry at me.\n\nYou see the trouble this is causing. Your masturbation led to this punishment. And that led to all this further debauchery. And the debauchery will ruin your friendships and your life.\n\nShut up, shut up, shut up. I can fix this.\n\nLaura walked past Bailey and called down the stairs to her mother.\n\n\"Bailey and I are going out for a walk. We'll be back in an hour or two,\" she called down the stairs.\n\n\"Where are we actually going?\" Bailey asked.\n\nYou want debauchery, stupid preacher man? I'll give you debauchery.\n\n\"L.C.B.O.,\" she told Bailey.\n\n=============================\n\nHaving procured a bottle of an Irish Cream not named after her friend, they left the liquor store with her ill-intended gains in a plain, brown paper bag.\n\nLaura unscrewed the top of the bottle and took a slug straight out of it.\n\nI'm going to need this to get through the next couple of hours.\n\nShe offered it to Bailey, who glared at her wide-eyed, appeared to start objecting, then took the bag and took a shot of her own.\n\n\"Good,\" Laura said. \"We need a plan.\"\n\n\"We do?\"\n\n\"We're going to your place, hoping that Kent is home.\"\n\n\"Oka-ay,\" Bailey looked worriedly at Laura.\n\n\"I have a proposal for the two of you,\" she explained.\n\n\"Do I get to hear it first?\"\n\nLaura nodded, \"I'm going to ask Kent if I can borrow twenty bucks.\"\n\nBailey coughed. \"What? Why?!\"\n\n\"Then I'll have my own debt and you won't get upset at me anymore,\" Laura said.\n\n\"Laura, c'mon,\" Bailey pleaded. \"That's silly. I don't have a problem with you joining in.\"\n\nYou're right it's stupid. What's dumber is the thing you're pretending to be angry about.\n\nOutwardly, Laura shook her head, \"But you're getting closer to him, and I'm going to start getting in the way.\"\n\n\"No, no,\" Bailey waved her hands and sighed, grabbing for the bottle.\n\nShe took another drink and handed it back to Laura.\n\n\"It's okay when you're there,\" Bailey said, \"And it's okay when you're not. Really.\"\n\nI don't know. I don't know if you mean it. You're still angry about me intruding on your debt. That can't just be because of the debt, or your rules, or any of that. It's about you... you and Kent.\n\n\"We still need a plan,\" Laura said. \"Right?\"\n\n\"Sure,\" Bailey agreed, probably believing that she had way-laid Laura's idea of self-imposed debt.\n\nYou haven't, though, do you know that, Bai? You haven't. I'm still going to try to fix this and make you see how dumb you're being.\n\n\"How many can your butt handle?\" Laura asked. \"You haven't had a break since Halloween and you did, what, thirty more last night?\"\n\n\"We could do two each,\" Bailey said, \"maybe we could add a third, but I'm not really sure.\"\n\n\"How?\"\n\n\"How?\" Bailey echoed.\n\n\"Pants down, panties off, what?\"\n\n\"Pants down for the first one,\" Bailey said. \"Then panties off for the second.\"\n\n\"That's good,\" Laura took another swig from her bottle. \"Ooh, should we undress each other? I think that really does it for Kent.\"\n\n\"Yeah, yeah,\" Bailey agreed with a smirk.\n\nThey continued quietly discussing their plans for the next two blocks.\n\n=============================\n\nBy the time they reached the apartment, Laura felt the alcohol and the two of them had to navigate the stairs with some care.\n\nA wave of fresh sobriety flowed through her the moment she saw Kent.\n\nI do not want to be too drunk to feel this. The spanking justifies the orgasms.\n\nFurther sins cannot make up for previous sins.\n\nI understand religion better than you do. Everyone internally decides their own justifications. The spankings work if I think they work.\n\nShe stumbled through the conversation with Kent about as well as she had managed the stairs, but became more aware when she heard Bailey speak.\n\n\"We know what we're doing,\" her friend said, \"And we decided ahead of time anyway.\"\n\n\"Mostly,\" Laura had to pipe up, honesty forcing the word from her lips.\n\n\"Mostly?\" Bailey questioned her.\n\nOops, shouldn't have said anything at all.\n\nShe suffered through the two Canadians making fun of her pronunciation of \"detail\", thinking that a bunch of people who pronounced it \"lef-tenant\" shouldn't mock anybody else.\n\nWatching Bailey sit in Kent's lap, she wished she'd gotten there first, wished he'd find a way to squeeze her breast like he'd done before.\n\nSee how you wish for sin? This isn't mortification of the flesh at all, but more debauchery.\n\nIf the spanking hurts a bit, it still counts.\n\n\"She's really looking forward to this,\" she heard Bailey issue a mocking whisper to Kent.\n\n\"Shut up!\"\n\n\"So you've resolved all your problems? I don't want to come between you.\"\n\nOh, I have a solution to Bailey's problem, and I can't ever be drunk enough to pull it off, but for the sake of our friendship, I'll try.\n\nShe giggled uncontrollably.\n\n\"Almost all our problems,\" she told Kent, \"But we can get to that later.\"\n\nBailey glared a mine shaft's worth of drilling through to the back of Laura's skull.\n\nFriend of mine, you can't stop me now.\n\nShe quizzed Kent and Bailey then, wanting to know what secret Bailey had kept from her the last time, on Halloween.\n\nThis inspection sounds brilliant. He'll look at me afterwards and tell me how red I am, tell me how hard he punished me. I'll have proof. It'll count for sure.\n\nYou are only delighting in your participation in the pushing of this man into further sin. This means nothing! Nothing!\n\nIt hadn't fit into the plans she and Bailey had made, but a quick conversation in the hallway straightened it out.\n\n\"We'll just do three, then,\" Laura whispered. \"You're okay with that.\"\n\n\"Yeah, sure, are you?\"\n\n\"Yeah!\" she said, a little too loudly. \"I wanna do this 'inspection' thing. Does he spank harder for it?\"\n\nBailey jogged her head, \"You can get him to, if you invite it.\"\n\nSo the more I push him, the harder he'll spank, the better I'll feel.\n\nThis will not straighten you out with your Saviour, harlot!\n\nOh, fie on you! Laura pushed the preacher from her mind.\n\nShe and Bailey posed for Kent and she heard Kent's assurance that her cheeks showed no signs of his Halloween spankings.\n\nSo everything I see in the mirror later will be fresh from today.\n\nWatching Bailey get her spanks, Laura kept her fisted hands in her lap, pushing down between her legs. Her knuckles didn't have the right shape or hardness, but they pressed tightly against her lips and she could feel the wetness inside.\n\nLater. I'll take care of myself later.\n\nWhen her turn came, she wanted to make sure Kent did her just as hard as Bailey did. She needed to get her cheeks up nice and high, but since she stood shorter than Bailey, she didn't see how. She looked around Kent's room, hoping to find a couple of textbooks or something she could stack.\n\nBut who buys textbooks anymore? Oh!\n\nHer eyes lit upon the stepping stool.\n\nPerfect!\n\nBent over, she wanted to make sure Kent understood the strength of her invitation.\n\n\"You'll really be able to see a difference?\" she asked him. \"When you inspect us?\"\n\nThat brought on the very best of Kent, and she taunted him whenever it looked like he might waver.\n\nShe counted the spankings, feeling the pain shaking through her body.\n\nAs you deserve, woman of sin!\n\nCleansing me of my guilt.\n\nShe closed her eyes, hearing the preacher curse her weakness, and counted through the numbers.\n\nHarlot! Woman of the Devil! Sinner! Repent!\n\nI'm taking my punishment. I'll be fine. I'm earning the next sin, too.\n\nThat is not how it works, vile creature!\n\nWhen the spankings stopped, the voice left her head and she stood up.",
        "She and Bailey then laid side by side, exposing their asses to Kent. She hadn't known how much groping the inspection included, but Bailey thought it all right, so Laura felt safe letting Kent squeeze and fondle her cheek. Besides, his hand felt nice and cool upon her heated flesh.\n\nLaura and Bailey took off each others' pants and got ready for round two.\n\nI know what I want this time and -- Oh god!\n\nThe realization suddenly struck her that she hadn't worn a bra. She just never wore one around the house and she'd felt so warm in her thick sweater that she hadn't even thought about it.\n\nThat's fine, isn't it?\n\nShe pushed Kent up against the dresser, making sure he couldn't get at her sore cheek by pushing it right against his thighs, and lowered her breast into his hand. He paused a bit, and then started really squeezing her breast. Maybe he'd shown shyness before, but not this time, not when she'd gone about it so obviously.\n\nBailey can see this time, though, see him milking me like this.\n\nThe spankings came then, squeezing and slapping her ass at the same time.\n\nFinally, he took a hold of her nipple, sending waves of absolutely sinful, tingling pleasure all over her body. She never wanted him to stop squeezing and twisting that little nub. But he released her and she let out a sigh.\n\nAt that moment, he delivered his last spanking, shocking her into crying out.\n\nBut Laura still remembered to count. \"Twenty-one!\"\n\nBailey took her turn, then, going through all the motions of making sure that Kent knew his job: striking hard as the reddest spot on her bony little butt.\n\nWhen Bailey counted out, \"Twenty-six\", Laura decided that the time had come to make her move.\n\nHere we go, she decided, and dropped into Kent's lap. Oh, god, he's poking right up through my panties into my-\n\n\"Oh!\"\n\nLaura wiggled her butt a bit so his erection pointed into her a bit less intrusively.\n\n\"Let's put that aside.\"\n\n\"Put what aside?\" Bailey asked.\n\nShe ground herself in Kent's lap, making him groan.\n\n\"That,\" she said. \"Now, Kent. Bailey has a problem\"\n\n\"Besides a debt of one hundred forty dollars?\"\n\nLaura started babbling, and she knew it, but she also knew she had to make Kent understand how fundamentally important her friendship with Bailey should rank amongst his priorities.\n\n\"I don't want this to somehow come between you.\"\n\n\"Exactly!\" she looked at Kent, happy he understood.\n\nShe hopped out of his lap and stood in front of the whiteboard, holding the marker in her hand, closed her eyes and waited for inspiration.\n\nIs this really what I want to do? Can I really solve this problem? What if it ruins everything?\n\n Laura stood there, listening to a Sade track rumble through the room.\n\nOh, god, what should I do?\n\nGod cannot help you here, foolish child.\n\nOh, shut up. I can do this myself.\n\nShe opened her eyes and drew a new box on the white board, filling it in with, \"$2\". Turning around, she looked at Bailey hopefully.\n\n\"What?\" Kent asked. \"You want me to give you money so you can have your own debt?\"\n\n\"No,\" Laura said, looking at Bailey. \"Not that.\"\n\n\"So...?\" Kent trailed off.\n\n\"The problem is that I came here once, alone, and you spanked me,\" Laura said. \"I thought I was doing Bai a favour, but it really upset her.\"\n\n\"Not that mu-\" Bailey started, but Laura cut her off.\n\n\"What did Bailey offer you yesterday, Kent?\"\n\n\"Laur,\" Bailey pleaded.\n\nSadly, Laura shook her head.\n\nKent nodded, \"She tried to give me a gift, but it was really those two dollars. I could tell.\"\n\n\"And you wouldn't take it?\" Laura asked.\n\nBailey frowned in memory.\n\n\"Of course not,\" Kent looked back and forth between them. \"Look, when Laura came in that day, it was part of the deal. She paid that part of the debt. I can't undo that. It wouldn't be right and it wouldn't be fair. I-\"\n\nHe looked back and forth between them.\n\n\"I'm sorry,\" he said earnestly. \"I am, really. I don't want this to come between you two, but I can't take two payments for the same debt. It just isn't right.\"\n\n\"It's just two bucks,\" Bailey held her hands out plaintively.\n\n\"All the same,\" Kent replied with a shrug. \"I'm not selling out for just two bucks.\"\n\n\"See?\" Laura said, pointing at the board. \"That's our problem.\"\n\nPlease see what I'm doing here.\n\n\"Bai,\" Kent said. \"If it bothers you that much, just give Laura two bucks, or a gift worth two dollars. Or anything.\"\n\nBailey's lips twisted in frustration and she pulled at her hair. \"It's too late for that.\"\n\n\"Too late?\" Kent asked.\n\nWay too late, Kent, don't you get it? If this could be solved with money, Bai and I would have fixed it a long, long time ago. Two shinygolden coins is nothing between friends.\n\n\"It's already been... been...\" Bailey stammered.\n\n\"Been what?\" Kent asked.\n\n\"Used!\" Bailey spat out. \"Used up. Turned from money into... into...\"\n\n\"Spankings,\" Laura put in softly. \"That's the problem, Kent. Can't you see?\"\n\n\"We decided spankings and money are interchangeable,\" Kent pointed out.\n\n\"And if we were in Econ, you'd win,\" Laura said. \"But actual life, where there are people and not commodities, is more like the humanities.\"\n\n\"Good thing we have you, then,\" Bailey rolled her eyes.\n\n\"It is,\" Laura pointed at the white board again.\n\nKent and Bailey looked at the board, perplexed.\n\n\"I see two dollars,\" Kent said.\n\n\"Yes,\" Laura said.\n\nPlease, for god's sake, figure this out on your own. Don't make me say it.\n\nGod is doing nothing for you in this, sinner and defiler of good people.\n\n\"It's the two dollars in spankings that I paid for Bailey,\" Laura said. \"Specifically, the two dollars she wishes she had paid.\"\n\nI know we're not completely sober, but come on, guys, get this. Figure out the absurdity here.\n\nKent locked on first. She could see the moment his body twitched and he realized what Laura had offered. His hands withdrew from the arms of his chair and folded across his stomach, the palms of his hands as shielded from the available targets as possible.\n\n\"Oh,\" he said, softly.\n\n\"Oh, what?\" Bailey asked, panicked now that everyone knew but she.\n\n\"Laura paid me two dollars in spankings,\" Kent said.\n\nGood, Laura thought, you explain it to her.\n\n\"Right.\"\n\n\"And I won't take them back,\" Kent went on.\n\n\"Because you're a jerk. Still with you.\"\n\n\"So if you want to fix this,\" Kent prodded, trailing off.\n\n\"Uh-huh?\"\n\n\"Your debt, Bai,\" Kent explained. \"It's not with me.\"\n\nHe bit his lips and leaned back in his chair, washing his hands of what came next.\n\nBailey stared at him, then at the whiteboard, and comprehension finally dawned on her.\n\n\"What?\" she cried out. \"No, I couldn't... that... there's... Laura?!\"\n\nLaura shrugged and held out her hands palms up.\n\nSee, best friend? See how stupid this is? Look where you end up.\n\n\"I don't see what else will make you happy,\" Laura put her fists on her hips and stared at Bailey. \"You're hurt because you feel like you owe me two dollars. And those two dollars are already turned into spankings. You won't turn them back so... here we are.\"\n\n\"You want,\" Bailey clarified, \"to spank me?\"\n\n\"I do not want to, Bai,\" Laura stuck her chin out. \"You're making me. Unless you can find another way out.\"\n\nThe girls stared at each other, Laura's features going soft while Bailey cycled through a variety of stunned, helpless expressions.\n\n\"Do you think that'll fix it, Bai?\" she asked her friend.\n\nBailey sat down on the bed, then turned to look at Kent. \"What do you think?\"\n\nKent, his hands still folded against his body, pulled his lips out of his teeth.\n\n\"You're fixated, Bai,\" he told her. \"Laura's right about that.\"\n\nSee, Bai? He thinks this you're crazy, too.\n\n\"This is nuts,\" Bailey replied.\n\n\"Yes,\" Kent agreed with a shrug. \"But so is all of this since the day you walked into my room and asked me if I wanted to spank you for your debt.\"\n\nBailey stammered, looking for words.\n\n=============================\n\nThis is crazy, what is Laura thinking? How can this be the only solution? Sure, she stole those spankings from me, but how can I do this? How can she want to do this?\n\nBailey looked at Laura, saw the care in her expression.\n\nShe's not faking this. Look at her face. She really wants to fix this and she's doing this because she cares.\n\nSparing a glance for Kent, it looked like he meant well. She'd seen that ninja move he'd pulled to save some girl he didn't know. He cared about people, too.\n\nOh, god, how can this be a thing?\n\nLike a piece of chess software, drawing out endless trees of moves, trying to find a way to checkmate, Bailey's half drunk brain began evaluating the events that had led to this point. The debt, the theft, and every move since ran through her brain. Bailey tried every other possible exit, every place she could go.\n\nIn the end, though, the map before her didn't look much more complicated than a tic-tac-toe board. The list of options and outcomes didn't run long.\n\nLaura had transferred, or purchased, really, some of the debt Bailey owed Kent. She'd held it for several weeks now and Bailey had felt from the moment she found out about it that, of all of the spankings Laura had taken for her, those two particular dollars' worth still sat in her liabilities column.\n\nThere's only one way to clear that debt.\n\n\"Okay,\" she looked up at Laura. \"Let's do it.\"\n\n=============================\n\nWhat in the god damn hell, Bai!?\n\nThat hadn't worked at all. Laura stared at her friend blankly.\n\nAre you lying to us just to save face? The reason you got upset was because you're attached to Kent and I horned in on it. Just admit it!\n\nLaura had never considered the possibility that Bailey had so heavily rationalized her belief that she'd keep on going with it. Bailey should have, at this point, realized the strength of her feelings for Kent, admitted to them, and they could have settled everything then.\n\nUnless... unless she really does feel this way? Is that even possible?\n\nArts and humanities students always joked about the weird, unfeeling weirdos in science and engineering, but Laura had never believed those stereotypes represented real people.\n\nLooking at Bailey's expression, however, Laura didn't see any guile or dishonesty. Bailey hid nothing from her.\n\nShe really, really means it. Christ, help us.\n\nHe cannot help you in this, this path of -\n\nDidn't I shut you up already?\n\n\"Okay,\" Bailey said to Kent. \"Tell me exactly how you did it?\"\n\n\"What?\"\n\n\"The day she came here,\" Bailey said. \"Exactly.\"\n\n\"Over his lap,\" Laura held back a whimper.\n\n\"Wearing what?\"\n\n\"She had a skirt on,\" Kent added, \"No panties underneath.\"\n\n\"So, eight?\" Bailey's expression had gone plain and pale. \"May as well do this all out then. Just a sec.\"\n\nShe unlocked the door and peeked out into the hallway. Seeing it safe, and despite her lack of pants, she disappeared.\n\n\"Are you nuts?\" Kent whispered the moment they heard Bailey's bedroom door closed. \"You sure this will help your friendship?\"\n\n\"I didn't think she'd take me. Up. On. It,\" Laura pleaded back.\n\n\"What?\" Kent spoke in a rushed whisper. \"Of course she did. I just hope this doesn't create something worse.\"\n\n\"What do you mean 'of course, she did'?\"\n\n\"This has been bugging her forever,\" he explained. \"Christ, she tried to get out of it just yesterday. And you laid it out with perfect logic. It was like a mathematical proof. There's no other way.\"\n\n\"Well, I thought this would make her admit her real problem,\" Laura answered, hands on her hips.\n\n\"But this is her real problem,\" Kent retorted. \"Ugh. What's it going to be like between the two of you after this?\"\n\nBailey's door opened, cutting off further whispers, and she quickly entered the room in a flair of emerald green skirt.\n\n\"Let's do this,\" she said as she walked past Laura.\n\nWith a helpless look on her face, Laura pleaded with Kent to do something. He only shrugged, opening his palms to her and waving her after Bailey.\n\nOh, Christ, this is not what I meant to happen.\n\nTruly, these are the wages of sin, you terrible child.\n\nWell, I'm in for it now. I hope I'm drunk enough for this.\n\nWith a gulp, Laura followed Bailey to the bed and sat down. Her hands went clammy as her eyes met Bailey's.\n\nCome on, Bai. You gotta see how dumb this is.\n\n\"Uh, Bai?\" Kent prodded.\n\n\"Yeah?\"\n\n\"You have to make the marks, right?\"\n\nBailey jumped at this and strode over to the white board. She made two tick marks under Laura's two dollars and promptly returned to the bed, resolution in her steps. She knelt on the bed next Laura, and laid herself over her friend's lap.\n\nLaura looked up imploringly at Kent, but he only managed to adjust his pants in response, trying to find a comfortable way to watch from his chair.\n\nDo something, you jackass!\n\nDon't expect help from him. You and your friend have thoroughly debauched him when you should have been steering him on a course to-\n\nShut up.\n\nTrembling, she watched Bailey lift her hips in the air and then slowly pull her skirt up, until her entire bare ass lay exposed to the air.\n\nCrap, crap, crap!\n\nLooking around the room furtively, Laura tried to find anything else she could do. No escapes presented themselves.\n\n\"Well?\" Bailey asked, an undeniable tremor in her voice. \"Let's do this. And no going easy.\"\n\nRight. Of course. It's not enough I have to spank you to save our friendship, I also have to spank you hard. Ugh.\n\nExperimentally, Laura laid her hand on the middle of Bailey's right cheek, knowing that she'd only satisfy Bailey's requirement for harshness if she struck the cheek farthest away where she'd have space to swing her arm. She remembered Kent mentioning this when she'd gone over his lap -- how she'd needed to lift her hips and angle them away so he could strike both.\n\nWell, Bailey is taking them all on the right today. But I'll be nice and only slap the parts that aren't already red.\n\nThat seemed like the sort of courtesy friends could show each other.\n\nGod, your butt is bony. How do you even take all these spankings?\n\nLaura shook herself and raised her hand in the air.\n\nHere goes noth-\n\n\"Wait,\" Kent said, causing both girls to twitch and stare at him.\n\n\"What?\" Laura squeaked in panic, halfway between cursing him for not letting her get it over with and hoping in vain he'd found some other solution.\n\n\"This,\" he waved at the two of them, \"isn't quite fair, is it?\"\n\n\"Why not?\" Bailey frowned at him.\n\n\"Well, think about it,\" he explained to her. \"You owe Laura some spankings, right?\"\n\n\"Yes.\"\n\n\"So I don't need to be here.\"\n\n\"Yes, you do!\" Laura pleaded. \"You really, really do.\"\n\nDon't you leave us!\n\n\"You know what I mean,\" Kent told her. \"I'm just saying that I'm getting something out of this, watching you.\"\n\n\"Oh,\" Laura and Bailey spoke at once.\n\n\"Let's say half a dollar for each set,\" he said. \"Sound fair?\"\n\n\"Part of my debt,\" Bailey peered at him, \"is now being paid by letting you watch Laura spank me?\"\n\n\"Yes.\"\n\nBailey inhaled pensively while staring at the floor between her and Kent.\n\n\"Fine,\" she said. \"Laura, let's get on with it.\"\n\nDammit, Kent.\n\n\"Here goes,\" Laura warned.\n\nShe'd watched Kent do this to Bailey dozens of times and knew exactly how it should look and the sound it should make. Kent's hands and arms had a lot more heft to them, though, which meant she'd have to work a little harder to make Bailey happy.\n\nBringing her hand down as fast as she could, she hesitated at the last moment, panicked and closed her eyes.\n\nA polite snap cracked around the room, followed by a pregnant silence.\n\nBailey, facing toward Kent, raised her naked butt up a little higher.\n\n\"Try again,\" her friend's voice rolled out thick with sarcasm.\n\nKent bit his lips in awkwardness, but his eyes smiled for a month of Christmas mornings.\n\nFine. You just touched her. You slapped her. You can do it properly.\n\nThe harlot deserves it as much as you do.\n\nYou have a point, preacher man.\n\nLaura reared back her hand again.\n\nIf Bailey were a tiny bit more honest with her feelings, I wouldn't have to do this. So, in a sense, she totally deserves this.\n\nNow we agree.\n\nUgh. Great.\n\nShe first gave Kent a look, a last pointless wish for some interference, and then gritted her teeth.\n\nHere goes.\n\nLaura's eyes went wide, just a taste of the frustration and anger she felt because of Bailey's intransigence, and she brought her hand down as hard as she could on her friend's cheek, though she still couldn't bring herself to actually watch her bare hand make contact.\n\n\"Ho!\" Bailey squeaked.\n\n\"It's right in the middle,\" Laura said defensively, pulling her hand back. \"Was that hard enough?\"\n\nThe deep thrumming of the bass line thrummed alone for a few seconds before Bailey responded.\n\n\"One,\" she said.\n\n\"Not twenty-seven?\" Kent wondered aloud.\n\n\"No,\" the girls said in unison.\n\nKent bit his tongue sat back in his chair, still smiling.\n\nThis is completely separate from the ones we're doing for you, bozo.\n\nYou did one! Punish this heathen!\n\nRight!\n\nOnce she'd gotten over touching her friend's butt, Laura realized she could do his.\n\nHer cheek feels nothing like mine. It's hard and tight, and she's flexing it to boot. Oh, god this is so weird.\n\nAgain!\n\nLaura swung her hand, aiming for a spot slightly lower on her friend's ass. Another loud, satisfying crack echoed through Kent's bedroom.\n\n\"Two,\" Bailey whispered, and put her forehead on her forearms for a moment.\n\nDon't let up!\n\nLaura moved her hand to the outside and swung at the side of Bailey's cheek.\n\n\"Ow!\" Bailey groaned into the bed, turning to glare at Kent then. \"Three.\"\n\n\"Is that harder than Kent does it?\" Laura asked tartly.\n\n\"No.\"\n\nShe raised her hand again and brought it down, dead centre.\n\n\"Four,\" Bailey sighed, adding \"I can't believe you wanted this.\"\n\n\"You're the one who needs it,\" Laura retorted.\n\nFinish her up already! Teach her the error of her ways!\n\nLaura didn't like when she agreed with the preacher in her head and always rushed to get past those moments in her life. With that in mind, she landed two more strikes in rapid succession, still refusing to look at Bailey's bare cheek.\n\n\"Five and six,\" Bailey shivered.\n\n\"Almost done,\" Laura promised.\n\n\"Good.\"\n\nFine. Be that way.\n\nLaura laid her hand on Bailey's right cheek, nice and low, the gentle reminder that Kent usually gave them to let them know where he planned to strike. Bailey tensed up, her head turning a bit to try to look over her shoulder.\n\nStrike where she's the reddest. Teach her a lesson!\n\nLaura brought her hand down, twice in a row, as hard as she could.\n\nMy hand may not be as strong as Kent's, but I can make up for it with enthusiasm.\n\n\"Seven, eight!\" Bailey announced, then sucked air through her teeth.\n\nA moment later, she got out of Laura's lap to kneel at her friend's side, the skirt falling around her lower body in a swirl of shimmering emerald.\n\nWell?\n\nBailey laid her hands on her knees, palms down, and kept her eyes downcast. Kent and Laura shared a worried glance and then turned to watched Bailey, waiting for some kind of reaction.",
        "Seconds ticked by, coming close to a minute, before Bailey finally looked up, staring at the wall. She took a deep breath and let out a contented sigh.\n\n\"You honestly feel better now?\" Laura knew her voice came loaded with disbelief.\n\n\"Yes,\" Bailey met her eyes. \"Now wipe the board.\"\n\nRolling her eyes, Laura stood up and walked over to the white board, suddenly conscious that everyone else wore more clothing than she did. She wiped Bailey's debt to her off the board.\n\n\"What did you think?\" she heard Bailey ask.\n\nBut when Laura turned to answer, she realized that Bailey had directed the question at Kent.\n\n\"Well worth my dollar,\" Kent maintained his slightly delirious smile.\n\nBailey harrumphed in reply and took up a more natural position, sitting cross-legged. Laura, experimentally, sat on the edge of the bed next to her, growing more self-conscious of her relative nudity by the second.\n\n\"I need another drink,\" Bailey announced.\n\nI bet.\n\nThis will only beget more debauchery, fool!\n\nThat's why we came here.\n\nClosest to the bottle, Kent poured out three more shots of the Irish Cream.\n\nWe're burning through my bottle pretty quickly, she thought, lamenting the money spent only a little. If this makes me good with Bai, though, it's money well spent.\n\nThey took their glasses and held them up.\n\n\"What are we drinking to?\" Kent asked.\n\n\"Friendship,\" Laura looked at Bailey.\n\n\"Friendship,\" Bailey agreed.\n\nKent chimed in as they clinked their glasses together and downed their shots.\n\nBailey closed her eyes and let out a long sigh before leaning backwards and getting her butt on the edge of the bed. Laura took a spot right next to her and Kent returned to his chair to slouch. With a little roll, he got the chair close enough to put his feet up on the bed between the girls. They, in turn, put their feet up on his chair while leaning back on the bed.\n\n\"So do you really feel better now?\" Kent asked. \"Both of you?\"\n\nI only feel better because, apparently, somehow or other, this helped Bailey. Right, Bai?\n\nBailey stared back at Laura and nodded.\n\n\"Yes, we do,\" Bailey responded on her behalf.\n\n\"Did she spank harder than I do?\" Kent asked, taking one of Bailey's feet in his hands rubbing her arch gently.\n\nBailey froze for a moment, her eyes locking on a spot in the air between Kent and Laura.\n\n\"Because it kind of sounded like it,\" Kent pointed out.\n\nI hadn't noticed, Laura thought with panic, I wasn't actually paying attention to her reaction, just trying to -- to -\n\nTo punish your friend with your own frustrations?\n\nAgh!\n\nLaura watched for Bailey's reaction.\n\n\"No, not harder,\" Bailey said. \"It's just different when you do it. Instead, I'm watching you watching me, right? It was weird.\"\n\nYou mean it's not the same kind of turn on, Laura pressed her lips together. I'm fine with not turning you on. Really, Bai.\n\n\"But it was still hard enough,\" Bailey assured them both. \"Don't get me wrong.\"\n\n\"We believe you, dear,\" Laura patted Bailey's thigh and felt Kent taking her foot in his hands. \"Mm, nice.\"\n\n\"Did it feel weird?\" Bailey turned to her to ask.\n\n\"What?\"\n\nBailey rolled her eyes, \"Spanking me.\"\n\n\"Very, very weird,\" Laura felt thankful for Kent's massage, which kept the tension out of her voice. \"Don't make me do it again.\"\n\n\"Don't put me in your debt again,\" Bailey chided, and Kent switched to her nearest foot again. \"Ah.\"\n\nThey let Bailey revel in the foot rub while the deep soothing thump of the music washed over them.\n\n\"Look,\" Kent said softly, \"If you're not feeling it for the rest of tonight, you can do the last two-\"\n\n\"No, no, no,\" Bailey cut in with a quiet, sharpness. \"No way am I ending the night over her lap. I'll do my last one yet.\"\n\n\"I'm not even offended by that,\" Laura let a touch of sarcasm enter her voice. \"I'll do mine, too.\"\n\n\"Alright,\" Kent said, switching back to Laura's foot.\n\n\"Also,\" Laura said, eyeing them both warily, \"I don't know if anyone else noticed, but I'm the only one in my underwear here.\"\n\nBailey snickered, a deeply evil sound in her semi-inebriated state. She unlatched the side of her skirt and slid it just over her hips. Carefully, she crossed her legs, then dropped the skirt to the floor and sat back on the bed, her left thigh crossed over her right so Kent couldn't see anything.\n\n\"Happy?\" she asked Laura.\n\nLaura's eyes went wide and, not really wanting to see that much of Bailey, she turned to look at Kent instead.\n\n\"How come he gets to keep his pants on?\" Laura narrowed her eyes.\n\nOh, god, how drunk am I?\n\nBailey took a turn to cough in surprise, giving Kent a chance to reply first.\n\n\"I don't owe anybody any money,\" he pointed out.\n\n\"Still,\" Bailey's eyes narrowed as well, causing Kent to back away slightly in his chair. She turned to Laura, \"You could take his pants off, I bet.\"\n\nOh, no. Oh, no. Oh, no.\n\n\"Yeah, didn't think so,\" Bailey smirked at her look of panic. \"Ready to finish up?\"\n\nYes, please. Change the subject.\n\n\"Sure.\"\n\nWe need to do something weird. I need to get rid of the feeling of spanking you. I need-\n\nThe image will punish you for ever! You will never forget the way you touched her!\n\nAgh!\n\nThe surrealistic image of spanking her friend, seeing those cheeks in front of her, feeling the flesh on the palm of her hand, forced Laura to close her eyes. But that only made the images come through more strongly.\n\nGah!\n\nLaura turned to Bailey and leaned over to whisper in her ear.\n\n=============================\n\nKent watched them converse in whispers, his eyes wandering up and down Bailey's long, thin thighs and back down over Laura's cheeks. She'd leaned over so far to speak into Bailey's ear that he could see the lacy back of her panties where the fabric dove between her legs.\n\nAt least they stopped talking about my pants.\n\nBailey giggled and whispered something back.\n\n\"We're doin' it,\" Laura insisted.\n\nBailey rolled her eyes in reply, \"We're doin' it.\"\n\nShe turned to look at Kent, her eyes wandering from his crotch up to his eyes.\n\n\"You,\" she said, \"Turn around for sec.\"\n\n\"What?\" Kent asked.\n\nLaura had already moved. While Bailey patiently kept her legs crossed, Laura pushed Kent's legs off the bed, then stood up and turned him around in his chair.\n\n\"Hey!\"\n\n\"Just wait,\" Laura chided behind him.\n\nKent listened carefully, trying to suss out what sort of decision they had made, but he could only hear the two of them rustling around on the bed.\n\n\"Alright,\" Laura called out a moment later.\n\nSomething landed on his head and left shoulder, making him twitch, but he discovered only a piece of white cloth when he snatched it away with his hand.\n\nLaura's lacy white panties.\n\nHe turned around to find both girls up on his bed, sitting on their heels, back to back. Bailey faced to his left, and Laura to his right.\n\n\"And how do I spank you?\" Kent wondered allowed.\n\n\"Ready?\" Bailey asked Laura, rolling her eyes.\n\nLaura nodded and leaned over at the same time Bailey did, both girls pressing their breasts and shoulders into the bed sheets, leaving their asses in the air, their cheeks still pressed against each other.\n\n\"This is so ridiculous,\" Bailey said.\n\n\"He loves it,\" Laura scolded her friend. \"Where were we? Twenty six?\"\n\n=============================\n\nOh, god, Laura thought, it was weird enough when my hand was touching Bailey's butt. Now our cheeks are touching? What was I thinking?\n\nShe felt her face go red but looked at Kent anyway, daring the shame to go deeper inside her.\n\nYou have reached your limit, spawn of Satan. There is no lower place to go.\n\nI seriously doubt that.\n\nLaura watched Kent approach, letting her eyes slide down his body to the obvious bulge in his pants.\n\nOh, I am not ready for that yet.\n\nKent touched her cheek first, probably because it lay closer to his right hand. She tensed up, expecting a slap, but he only stroked her in circles. She felt his hand wander over both cheeks, then slide away over to Bailey and back again. Bailey's thighs twitched against her own, the muscles under that thin flesh rippling and flowing at Kent stroked her. For a moment, the motion threatened to throw her off balance and she had to push back.\n\nThen, suddenly, everything steadied as Kent grabbed them both, his palms on the smalls of their backs, holding them steady.\n\n\"Ready?\" he asked.\n\n\"Obvi,\" Bailey called out. \"Four each.\"\n\nLaura had chosen this position for two simple reasons. Primarily, it kept the lower parts of their cheeks out of Kent's range.\n\nEach of us is guarding the other's sorest parts with her own ass, Laura realized. As long as we stay glued to each other like that, he has to slap us somewhere else.\n\nOn top of that, Laura had put Bailey on the left, which meant Kent would have the better striking angle on Bailey's ass instead of her own.\n\nUnless he uses the back of his hand on me, she worried.\n\nKent inhaled and Laura tensed. The hand sailed through the air and she braced herself for impact. A sharp crack sounded through the room, causing both girls to twitch against each other.\n\n\"Twenty seven,\" Bailey counted.\n\nNow it'll be my turn?\n\nThe next crack came down hard, but nice and high, on her right cheek.\n\n\"Twenty eight,\" Laura winced, realizing that Kent had plenty of extra strength and the angle hadn't diminished the force he used at all.\n\nIt makes sense. It's not like he would ever slap us with all of the power at his disposal.\n\nThe next two strikes came in rapid succession, one for Bailey and one for Laura, harder and faster than before.\n\n\"Twenty nine,\" Bailey called out, even as Laura grimaced through, \"Thirty.\"\n\nTwo more hard strikes.\n\nLaura assumed that Kent had chosen to pound only Bailey's left cheek on account of the fact he was striking only her right.\n\n\"Christ,\" Bailey cursed. \"Thirty one.\"\n\n\"Jesus can't help you now,\" Laura let the preacher speak with her voice. \"Thirty two.\"\n\n\"Last ones,\" Kent warned.\n\nShe and Bailey both wiggled their hips in anticipation. Kent's hand moved and struck, to everyone's surprise, only once.\n\n\"Yow!\" Laura yelped in surprise. He hadn't struck her any harder, but she'd expected to get hers second. Lunging forward in shock, she cried out, \"Thirty, uh, three.\"\n\nOh, no! I moved. I left Bailey...\n\nShe tried to shift her butt back into position, but the moment had passed. She caught sight of Kent's hand over her shoulder, slashing in to strike low at Bailey's left cheek.\n\nThat sharp snap echoed around the room.\n\n\"Thirty four,\" Bailey enunciated. \"Wow. Bastard.\"\n\nBailey stretched out on the bed on her stomach as Kent took a deep breath and fell back into his chair. Laura turned around -- while facing away from Kent -- and laid down on her stomach next to her friend.\n\n\"Sorry,\" she whispered to Bailey, \"he surprised me.\"\n\nBailey shook it off, \"No worries.\"\n\n\"Now what?\"\n\n\"You'll need to get your panties back from Kent, probably.\"\n\nLaura felt her eyes go wide and panic flush all the blood from her face as she looked over at Kent, holding the little lacy bundle in his hand.\n\nI can't let him see... me. Can I?"
    ],
    "authorname": "xtorch",
    "tags": [
        "spanking",
        "spank",
        "debt",
        "repayment",
        "naked",
        "stripping",
        "alcohol",
        "panties",
        "sin",
        "competition"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/two-hundred-dollars-ch-15"
}
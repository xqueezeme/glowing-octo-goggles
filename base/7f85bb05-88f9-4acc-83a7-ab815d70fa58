{
    "title": "No Time to Waste",
    "pages": [
        "I didn't really have time to be as turned on as I was, but the persistent hot ache between my thighs was relentless and obviously ignoring it was doing me no favors. I shifted in my seat again, trying to relieve the pressure that had been building since I woke up late from an incredibly hot dream. \n\nA should have been. A dream I wished was a memory about the guy who was sleeping on my couch. A dream that would have had me fucking myself into gasping bliss if it hadn't also had me sleeping through the three alarms I'd set and stumbling out the door in yesterday's hoodie and leggings, no bra and no time to spare. \n\nI made it to class, but I hadn't actually heard a single word of the lecture. I may as well have been back at home, naked in my bed and touching myself while thinking of him. \n\nHim. \n\nFuck. \n\nHe'd shown up last week. A beautiful stranger with thick wavy hair that made no sense and sparkling eyes sitting on my couch when I'd come home from this same class. His voice shot straight through me, settling between my legs with whiskey-warm fire as he'd sheepishly informed me that he was my roommate's brother and she was supposed to tell me about his impending arrival. She hadn't told me a damn thing, not even that we were out of toilet paper, before she'd fucked off on a ten day backpacking trip and apparently left me with a substitute roommate who looked like a greek god. \n\nI couldn't decide if the flare of heat that ran through me was desire, frustration or a confusing mix of both. \n\nA week later, I'd clearly decided on the latter if the incredibly erotic dreams I'd had of him every night since that first interaction were any clue. Daydreams now too, it seemed, as I sat in class with a growing awareness of the way my nipples brushed the inside of my hoodie, and how the seam of my leggings offered just the right friction if I crossed my legs just so. I'd just come last night, but I guess it was never enough now. Not with him around. I made it about halfway through class before I worried the wet spot on my leggings would be visible to passersbys, and it wasn't like I was paying any attention anyway. I stood up and booked it out of the classroom and across campus until I made it to my car, and then sped home. \n\nWhen I opened the door, I didn't see him. I breathed a sigh of relief at having the apartment to myself to try once and for all to rid myself of the persistent horniness that hadn't abated a bit since he arrived. I kicked off my shoes and dropped my bag by the door, rushing halfway up the stairs to my room when I heard it. \n\nThe wet, slick sound of skin on skin and a low growl. It was nearly animal and icy fear cooled the hot ache for a moment, worried there was something inside my apartment. \n\nBut that thought evaporates as quickly as it appeared when I heard a very human, very familiar voice say my name on a groan. A husky, lust-soaked groan.\n\nOh. \n\nOh my god. I leaned against the wall, the shock of what I'd stumbled on stealing my breath and balance and replacing them with a rush of heavy desire like a lightning bolt straight to my core. I waited there for a minute, considering my options. \n\nI could turn around and leave. Give him his privacy. But I didn't want to when I'd come home to do the very same thing and I was already so wet and my name sounded so good from his lips. \n\nOr I could stay. Watch him from the shadows, and try to get away with touching myself while he did. \n\nOr I could be brave- brave enough to walk into the room, to let him see me and hope he'd let me watch. Maybe he would let me touch him instead if I did that. \n\nWithout consciously deciding what I was going to do, my feet moved soundlessly into the hallway, carrying me into the open doorway of his room. I froze there, my mouth falling open as I drank in the sight of him. He laid in the center of the bed, black sweats and briefs tugged down below his hips and thick cock jutting out between splayed thighs. His chest was bare, shirtless, and the sweat on his skin shimmered with each of his heavy breaths. His grip was quick and confident, eyes closed and mouth open as small sounds of pleasure fell from him in a nearly continuous stream. \n\nI could barely process the sight in front of me, barely think beyond the hot pinpricks of desire that rushed over my skin and hardened my nipples. Desire that pooled between my legs until I was so wet I could feel it on my thighs that now pressed together in response to the incredibly erotic sight before me. \n\nA small sound escaped my mouth, a gasping moan so light I wasn't sure I'd made it until his eyes flew open, his fist freezing on his cock. His eyes, wild with pleasure and panic, settled on my face and grew wider, shock coloring his expression. \n\n\"Don't stop on my account,\" I heard myself whisper as I took one step toward him, then another until I was at the foot of the bed peering down at him, still frozen and staring up at me. I bit my lip and sat lightly on the edge of the bed, my eyes locked on his until he broke away to look down at my body. At my nipples clearly visible through my hoodie, at the curve of my exposed stomach between the end of said hoodie and the elastic of my leggings, at the curve of my ass where my legs folded under me. As he took me in, his grip tightened, stroking slowly up his rigid length once and then again before he stilled and brought his eyes back to my face. \n\n\"Take off your hoodie,\" he said gruffly, and when I began to lift the fabric over my head without hesitation, the lingering panic in his heavy lidded gaze gave way to a fresh flood of lust. I dropped the hoodie to the floor, bare now from the waist up, small breasts on display and my rosy nipples growing impossibly tighter in the chill of the room. He swore under his breath, biting back a groan as he stared at me and stroked himself, the pace steady but picking up again to more closely match where he'd been when I first saw him. \n\nI bit my lip in response, unable to look away from the incredible sight of him touching himself. The expert way his hand moved, twisting just so and gripping more or less as he went along was like a tonic to my libido and my own hand dropped to the crotch of my leggings, ghosting over the damp fabric until I ground the heel of my palm against myself. My eyes fluttered closed for just a moment, reveling in the first contact and this absolutely unreal turn of events. \n\nJust a half hour ago, I'd been daydreaming about fucking myself while thinking of him. Now I was sitting on his bed, watching him touch himself when he'd been thinking of me. I growled something impatient, and gripped my waistband as I stood, tugging off the leggings and pushing them to the ground. \n\nNow, I was naked before him as he worked his hard cock. He may be the reason I was soaking to the middle of my thighs, but I was the reason his cock leaked like a fucking faucet and his eyes glazed with heady lust as his gaze roved over every inch of my skin. I felt high on the power of it as I took a couple steps around the side of the bed until I was just out of his reach, and he had to turn his head to watch me. \n\nHis strokes slowed, brow furrowing as I repositioned myself until my hands drifted across my breasts, pinching and rolling my nipples, squeezing them until I had to bite my lip to quiet a cry. As one hand traveled down my stomach, toward my hip and lower still, he seemed to realize what I intended to do and it was his turn to gape at me, mouth wide open as my fingers spread my pussy lips and dipped into the soaking evidence of my desire. I held them up for him to see and he groaned, cock twitching in his hand as he watched my fingers stroke the length of my slit and swirl around my clit. \n\nThere wasn't much time for teasing. I'd been ready to come for hours, and this game wasn't going to last long. I hiked my foot up on the edge of the bed, opening myself for his appraisal as I pushed one finger, then two, inside my tight wet hole. I curled them against the sensitive soaked walls and used my thumb to apply more pressure on my swollen clit. It felt so fucking good I wanted to close my eyes, get lost in the feeling of my hands on my body, but those feelings were second to the desire to watch him so open they stayed, trained on the blur of his fist around his cock, and his other hand now groping and stretching his balls. His hips bucked, his eyes glued to my spread pussy and my hand working there with as much fervor as I watched him with. \n\nI pinched, rolled and squeezed my nipples, alternating breasts with one hand as I worked my clit and fucked myself with the other. A master of my own body, my own pleasure .. and by the looks of it, maybe his too. \n\n\"Fuck,\" he growled, gasping as he watched me finger myself just inches away from his face. I could come just from the richness of his voice, the way sex and want dripped from the single word. \n\nBut now more than I wanted to chase my own pleasure, I wanted to see him lose control. So, I impulsively withdrew my hand, bringing my fingers to my mouth and licking them clean in a slow, loud suck as I pursed my wet lips around them. His cock jerked again in his fist, now moving so rapidly I worried vaguely about rugburn. \n\nHe came, violently shooting jet after jet of hot milky liquid in arcs across his chest and stomach, as my hand found its way back to my clit and I rubbed a few furious circles, following him to orgasm. I arched my back, hips bucking into my hand and willed my eyes to remain open, to watch him, even as they closed and my mouth fell open in an unstoppable groan of pleasure. \n\nWhen we recovered from our orgasms, still inches of space between our exposed bodies and the evidence of what we'd just done splattered across his stomach, the silence was nearly deafening. I said nothing as I collected my clothes and walked toward the door of his room. \n\nBut just before I crossed the threshold, I heard him clear his throat. I stopped, glancing over my shoulder to see him staring at me with dancing amusement and curiosity. \n\nHe smiled at me, the lazy sated smile of a man who had just come, before he spoke.\n\n\"So, do you think maybe next time, I could just fuck you instead of watching you do it yourself? \" \n\nI shot him a devilish grin, \"How soon do you think you can be ready for next time?\" "
    ],
    "authorname": "Lemonletters",
    "tags": [
        "cumming",
        "female masturbation",
        "jerking off",
        "masturbation",
        "mutual masturbation",
        "voyeur",
        "watching"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/no-time-to-waste-1"
}
{
    "title": "Three Square Meals Ch. 076",
    "pages": [
        "*Wake up sleepyhead, it's time for lunch,* Alyssa whispered, her soft telepathic voice meandering through John's mind like a lover's caress as she roused him from his slumber.\n\nJohn felt a warm curvy body next to him and when he opened his eyes, he found himself lying next to Irillith's luscious azure figure. With a start, he suddenly remembered that this wasn't his alluring cyber-security expert he had his arms around, but her twin sister instead! He allowed himself a broad smile of satisfaction, as he remembered how happy Tashana had been after receiving his Gift.\n\n\"You did a really nice job,\" Alyssa murmured, brushing her hand over Tashana's cheek as she listened to his thoughts. \"You'd never be able to tell what she's been through - she looks so beautiful now.\"\n\n\"I'm just glad you managed to get through to her. It felt great being able to help heal everything,\" he replied, as he sat up. His nose twitched at the enticing aroma that pervaded the room and he cast an inquisitive glance at the plate by her side. His stomach rumbled at the sight of the thick steak sandwich and he asked speculatively, \"Is that for me?\"\n\n\"Yes, you need to keep your strength up,\" she replied, her expression caring. Handing over the plate with his lunch and a big glass of chilled water, she continued, \"We've got a few minutes until she wakes up, so I thought I'd bring you up to speed.\"\n\n*With what?* John asked telepathically as he took a big bite of the sandwich. He groaned at the delicious taste, and added, *God, that's amazing. One of Calara's?*\n\n\"Yeah, she loves playing the doting little fianc\u00e9e. She's firmly of the belief that the way to a man's heart is through his stomach,\" Alyssa replied with an affectionate smile. Her lips turned up into a wicked grin as she added, \"but it's not your own tummy you really enjoy filling, is it?\"\n\nShe reached out to stroke the rounded curve of Tashana's cum-swollen belly with one hand, while moving the other in teasing circles over her own toned abdomen. John chose not to comment, but he had trouble taking his eyes off Alyssa's bronzed fingers as they moved in gentle circles over Tashana's flawless blue skin.\n\nHe winked at her and swallowed his second bite of the sandwich, before he asked, \"So, what did you want to tell me about?\"\n\n\"The girls were busy while we slept,\" Alyssa explained, sitting back and smiling as she watched him eat. \"And I don't just mean making lunch.\"\n\n\"Really? What've they been up to?\" he asked, before gulping down the glass of water.\n\n\"Jade landed the Invictus in the drydock and we've got a swarm of eager Maliri engineers working on the last few rooms. Dana and Rachel think they should be finished in a day or so,\" she explained, as she took the glass and slid off the bed to get him a refill.\n\nAfter enjoying another big chomp of his sandwich, John replied affectionately, \"They're good girls, it's great to see them taking the initiative. I can't wait to get the kitchen on Deck Two up and running again, not to mention the dining table. I've really missed all of us eating together.\"\n\nReturning to the bed, Alyssa nodded, and said, \"I've missed the Officers' Lounge. It hasn't been the same without it.\"\n\nJohn glanced at the ship's chronometer and said, \"We haven't got long, just a minute or two to go until she wakes up.\"\n\n\"Can I stay? Or do you want to talk to her alone?\" she asked him, glancing down at Tashana.\n\n\"It's probably best if I talk to her on my own to start off with. She's bound to be a bit disorientated when she wakes up and I don't want to scare her,\" he replied as he thought how best to handle the situation.\n\n\"No problem. Just give me a call when you want to introduce me,\" she replied, then waited for him to finish his sandwich and the water before taking the plate and glass. Blowing him a kiss goodbye, she glided out of the room with a provocative strut, the heels on her strappy shoes clicking loudly with every step.\n\nJohn watched her leave, very much enjoying her teasing display, before turning his attention back to Tashana. Sure enough, she started to stir exactly four hours after she'd swallowed her second load. She stretched languidly and took a big lungful of air, which made a wistful smile appear on her lovely blue face.\n\n\"Hello again,\" John said, looking down at her from where he sat beside the drowsy girl.\n\nTashana started at the sound of his voice, her violet eyes flashing open and staring right at him. \"You're a Progenitor!\" she exclaimed, her mouth dropping open in wonder. A look of fear flashed across her face, which was quickly replaced by one of intense curiosity. She looked at him in fascination as she added, \"You helped me...\"\n\nJohn nodded and smiled at her as he said in a kind, soothing tone, \"You got into trouble going on a dig in the Unclaimed Wastes so Irillith asked me to come and rescue you.\"\n\nShe nodded soberly until she glanced down and was suddenly aware that he was as totally nude as she was. Tashana blushed furiously and scrambled to cover her pert chest with one hand, her hairless pussy with the other. \"We're both naked!\" she gasped, scandalised.\n\nHer hand brushed her rounded tummy and she stared at it with eyes as big as saucers.\n\nHe smiled at her patiently and his voice was soothing as he explained, \"Just think back to this morning. You were injured but I healed you. Do you remember?\"\n\nDistracted from her curvy predicament by the reassuring sound of his deep voice, she glanced up at him, then slowly relaxed as she replied, \"I left myself a message, standing in front of the mirrors.\" Tilting her head to one side, she intoned, \"Your name's John. You're a good Progenitor, who's trying to save the Maliri from an evil Progenitor. You know about my research into Mael'nerak and you asked for my help. Some very bad things happened to me but you healed them when I swallowed your...\"\n\nHer eyes flicked to his in shock then stared at her bloated abdomen. She cradled her swollen belly with both hands, remembering with a start exactly what was blowing her up like a balloon. He saw her tongue dart out and wet her lips, a smile appearing on her full lips.\n\n\"How are you feeling?\" he asked, studying her wistfully smiling face.\n\nShe sat up, moving a little awkwardly with the extra weight in her tummy, and kneeling beside him, she replied, \"I really loved what we did earlier.\" She blushed a deep blue at her own brazenness, as she added, \"Would you like to do that again?\" \n\nJohn studied her for a moment and his tone was gentle as he replied, \"You and Irillith react differently to my cum than any other Maliri I've been with. You've still got a full tummy, so it should be easier for you to ignore any cravings, but once your body finishes absorbing your breakfast, it's going to be much harder for you to concentrate. I want you to try to focus and not think about any distractions until we've had a chat.\"\n\nTashana listened attentively and he could see her visibly relax, before she asked, \"What did you want to talk about?\"\n\nHe reached out to take her hand and smiled at her as he replied, \"This is your last chance to change your mind about joining us. If I feed you again, you'll be psychically connected to me through Alyssa or Edraele, which will essentially mean you'll be spending the rest of your life with me.\"\n\nShe studied his face intently for a while, before a shy smile lifted her lips and she replied, \"You're very handsome. I don't think I'd mind that at all.\"\n\nHe returned her smile and said, \"And you're very beautiful, but I want you to make a fully-informed decision before you join me.\" Stroking her hand, he added, \"There's some additional things that you need to know before you make that choice.\"\n\nTashana glanced down at his hand caressing hers, then placed her other hand atop his and smiled at him as she asked, \"What do you mean?\"\n\n*You might as well come back in, honey,* John said to Alyssa, reaching out to her with his mind. *I think I'll need your help explaining everything.*\n\nAlyssa glided into the room a few seconds later, and when she saw his look of surprise, she replied, *I was waiting in Calara's room.*\n\nTashana glanced her way, then looked self-conscious at being naked in front of her.\n\n\"There's no need to be embarrassed,\" Alyssa said, her voice soft and soothing. \"You're absolutely gorgeous! You should be very proud of such a beautiful body.\"\n\nThe Maliri girl smiled bashfully, then sat up a bit straighter.\n\nJohn smiled at Tashana and said, \"You've met Alyssa before. Do you remember her?\"\n\n\"You were there... I mean, I met you last night when the three of us spoke,\" Tashana replied, her voice tentative at first then with more conviction.\n\n\"That's right,\" Alyssa said, as she kicked off her high heels, then climbed on the bed within arm's reach of both of them. She had a warm smile on her face as she added, \"Your mother and I are John's Matriarchs, but as you haven't been assigned to Edraele yet, I strongly suspect that I'll be looking after you if you join us.\"\n\n\"Do all Progenitors have more than one Matriarch?\" Tashana asked, her face lighting up with curiosity. \"Mael'nerak only had one, before he was forced to abandon her.\"\n\n\"We don't think so,\" John said, sounding uncertain. \"Alyssa was my Matriarch first but Edraele became my second by accident.\"\n\nShe nodded and said, \"I remember you explaining that last night. It was how Edraele's mind was erased and you rebuilt her a new personality.\" After pausing for a moment, she frowned before continuing, \"You did something similar with me, is that correct?\"\n\n\"That's right,\" John replied, watching her carefully. \"Can you remember what happened to you?\"\n\nClosing her angular eyes, Tashana's voice was quiet as she replied, \"It feels hazy... I remember an argument with Irillith in the palace, but I'm not sure what happened after that. The next thing I remember is speaking to both of you last night.\"\n\nAlyssa reached out to stroke the Maliri girl's arm and said, \"You were actually in the Unclaimed Wastes for thirteen years. A lot of very bad things happened to you, until we saved you and John healed all your injuries.\"\n\nJohn nodded and said, \"You wanted to forget all of it and start afresh, so I wiped out those memories for you. I've altered Irillith and Edraele's minds too, but they believe you went to the Trankaran Republic for years on an archaeological dig, before moving on to the Unclaimed Wastes and finally getting in trouble there. They asked me to rescue you and here you are.\"\n\nLooking confused, Tashana replied, \"Why would I go to the Unclaimed Wastes? Mael'nerak wouldn't have left anything there; he obliterated all the habitable planets in that part of the galaxy.\" \n\nJohn and Alyssa glanced at each other in surprise and John replied, \"He did?!\"\n\nTashana nodded eagerly and replied, \"Have either of you heard of the Achonin?\" When both of them shook their heads, she continued, \"All the evidence I uncovered from Thrall sites was fascinating! There used to be a thriving, technically advanced civilisation in that region of space called the Achonin. They spanned scores of worlds, until Mael'nerak arrived with his Thralls and went to war with them. He destroyed world after world with a massive, planet-destroying superweapon and killed billions of their people.\"\n\n\"We found you in an ancient refinery that's now called Underworld,\" John explained. \"Was that an Achonin facility?\"\n\n\"What did it look like?\" She asked, leaning forward and listening with interest.\n\n\"Tan-coloured, eight sides, pretty huge. It seemed to be some kind of orbital fuel refinery,\" he clarified for her.\n\nShe nodded, and replied sagely, \"That definitely sounds like an Achonin facility. Mael'nerak might have left a few Achonin survivors on outposts like that, but without any habitable worlds or viable numbers to rebuild their civilisation, they were doomed to extinction.\"\n\n\"How long ago did this happen?\" John asked, intrigued by her story.\n\n\"Nearly seventy-two thousand years ago!\" She exclaimed, violet eyes wide with wonder.\n\nAlyssa arched an eyebrow and asked, \"How can you be so sure?\"\n\n\"I found a real treasure-trove of artefacts and data on Epsilon Aquarii IV! When Mael'nerak was forced to flee the Maliri, his Matriarch built a secret repository of information about him. She hid it there to keep it safe, just in case another Progenitor should try to take control of the Maliri again,\" she explained, a broad grin on her face.\n\n\"If it was hidden, how did you find it?\" John asked the excited young woman.\n\n\"I only found it by fluke! The Palace on Valaden has been rebuilt a number of times over the millennia and I was exploring the deep catacombs beneath the foundations when I found a vault. There were documents there hinting at the location of a secret Thrall base!\" she clarified for him. Tashana smiled proudly as she continued, \"The clues were vague, but I managed to follow them and stumbled on the base. It was long-buried and partially destroyed by then, but that's where I found a projection device! Valada had used it to record personal logs and I gave it to Irillith to finally prove that I was right about Mael'nerak.\"\n\nJohn was about to ask another question but he hesitated, then said reluctantly, \"I'd love to hear about everything you've found out - it all sounds amazing - but we'd better save that conversation for later. We should probably focus on talking to you about joining us first, before you get too distracted.\"\n\nTashana blushed and said, \"Sorry, I got a bit carried away. It was just so nice to have someone take me seriously for once!\"\n\n\"No need to apologise; you're talking to the converted,\" John said, smiling at her indulgently. \"Everyone aboard the ship will be dying to hear about everything you've found out.\" \n\n\"Irillith too?\" Tashana asked, hardly able to believe it.\n\nJohn nodded and replied, \"She's not the same girl you remember. I think you'll be pleasantly surprised.\"\n\nTashana played nervously with a long white lock of hair, her expression tempered with caution, as if she didn't want to risk seeing her hopes dashed.\n\n\"We're getting sidetracked again,\" Alyssa said with a smile. She stroked Tashana's shoulder and continued, \"Let's just talk about the reality of joining the crew.\"\n\n\"Okay,\" Tashana readily agreed, watching her with breathless anticipation.\n\nRaising a hand, Alyssa ticked off fingers as she listed each point, and started by saying, \"Firstly, immortality. If you continue to swallow John's cum, you'll live forever.\"\n\nTashana's angular eyes grew huge as she gaped at the blonde in utter astonishment and blurted out, \"You can't be serious!\"\n\n\"Rachel figured it out, from studying changes to our DNA,\" Alyssa explained patiently. \"When a girl swallows enough Progenitor cum it resets her to a predefined template, undoing the effects of aging.\"\n\n\"So that's how Valada lived so long!\" Tashana gasped, amazed by this revelation. \"I never understood how she managed to live with Mael'nerak for thousands of years!\"\n\nJohn interrupted and said, \"Immortality isn't the same as invulnerability though. I can heal really severe injuries but if you get killed, I won't be able to save you. That's why I'll have to insist that you train rigorously so you can learn to keep yourself and the other girls safe. We lead a dangerous life and you'll definitely be involved in combat at some point.\"\n\n\"Okay, that sounds sensible,\" she said, nodding her agreement.\n\nTicking off another finger, Alyssa said, \"Secondly, you'll never grow sick and you won't physically age another day. You'll stay just as stunningly beautiful as you are today, forever.\"\n\nThe Maliri girl stared at John in awe and said, \"This feels like a dream. I can hardly believe you're real.\" She laughed then and added, \"Which is ironic, as I spent the better part of twenty years trying to convince Irillith exactly that about Progenitors!\"\n\n\"So we haven't scared you off then?\" Alyssa asked, her eyes twinkling in amusement.\n\nTashana glanced at the blonde and smiled as she said, \"Nothing you've said yet would make me think twice about joining.\"\n\nJohn stroked her hand again, then said, \"There's other things too, personality changes which I can't control, I'm afraid.\"\n\n\"What kind of changes do you mean?\" she asked, looking more nervous now.\n\nAlyssa gave her a reassuring smile and replied, \"Nothing too major, you already seem like a lovely girl.\" She studied her for a second before she added, \"How do you feel about other girls?\"\n\nTashana relaxed and said, \"Oh, I'm used to living amongst lots of women. All the Maliri men live on the border worlds, so the last Maliri man I saw was...\" Her voice faded away, and a look of profound sadness crossed her face.\n\n\"Your father?\" John asked, his tone sympathetic.\n\nShe nodded and her voice sounded anguished as she replied, \"It feels like it happened only yesterday... I still miss him so much.\"\n\n\"It's okay, we know what happened,\" John said, opening his arms to her for a hug.\n\nTashana looked surprised at the unfamiliar gesture then gladly accepted, pressing her firm breasts against his chest as she hugged him fiercely. He held her for a few minutes like that, feeling her trembling in his arms. Alyssa moved closer and stroked her back, while they waited patiently for her to deal with her feelings of grief.\n\nWhen she finally pulled away, she brushed the tears away from her eyes and looked embarrassed as she said, \"I'm so sorry about that. I barely know you and I'm pouring my heart out to you!\"\n\nAlyssa's answering smile was tender and caring as she said, \"If you choose to stay with us, you'll be able to turn to any of us for support. John and the girls are all good listeners so feel free to chat to any of us if you feel upset about anything.\"\n\nTashana laughed as she said, \"I still haven't heard anything remotely negative yet.\"\n\n\"I think you misunderstood what Alyssa was asking you earlier. She asked how do you feel about girls?\" John reminded her, watching her lovely young face.\n\nShe was about to reply in the same way, when her eyes went wide and she glanced at Alyssa in surprise. \n\nAlyssa fingers were gentle as they traced an intricate pattern on Tashana's back and she smiled at her as she explained, \"The crew consists of John, myself, and six other women. You've seen the videos so you know that we all swallow his cum, and that he's fucking all of us. Well, us girls all like to get together too. If you don't like girls already, that'll change if you keep filling your tummy with John's spunk.\"\n\nJohn squeezed her fingers then said apologetically, \"I can't do anything about it, I'm afraid. I was able to remove the need to obey from our psychic connection, so other than being openly bisexual, you'll still be yourself.\"\n\nTashana gave the Terran girl a shy smile, and said, \"That doesn't sound too bad either.\"\n\nAlyssa winked at her flirtatiously making Tashana blush a dark blue, before she said, \"Well, that's about it. You won't get jealous of any of us, which makes everything lovely and friendly. I have a telepathic link with all the girls on the crew, so I'll be able to check to make sure you're alright.\" \n\n\"The other girls assure me she isn't too annoying,\" John said, sharing a smile with Tashana. He rubbed his chin thoughtfully, then added, \"Other than that, I can't think of much else. We've told you about my imprisoned Progenitor-side, and that another Progenitor is stirring up trouble.\"\n\n\"There's one other thing,\" Alyssa replied, moving across the bed to kneel behind Tashana. She crawled forward and gently placed her hands on the Maliri girl's blue hips, before leaning in to place her warm hands on Tashana's rounded belly. Kissing the startled girl on the shoulder, she added, \"How do you feel about children? When we've defeated this other Progenitor, John plans to give each of us a baby.\"",
        "Tashana let out a low moan as Alyssa cradled her rounded tummy, closing her eyes as her prospective matriarch placed delicate kisses along her slender neck. Her eyelids fluttered at the unfamiliar sensations and when she finally opened them again, she gazed at John under long eyelashes. \n\n\"I always wanted to have children someday,\" she said, her voice soft and yearning. \"To bring them up in a loving home and make them feel cared for and loved.\"\n\n\"I know exactly what you mean,\" John agreed, leaning forward to kiss her. \n\nHe paused an inch away from her luscious, deliciously kissable lips and gazed into her sparkling violet eyes. They both knew that this kiss would seal the deal between them, confirming her decision to join him and the girls for eternity. He saw the decisive glimmer in her eyes and she leaned forward a fraction, just enough to brush his lips with her own. Pulling away then, she bit her lip and lowered her eyes demurely, at least until she let out a low moan, as Alyssa began to nibble on one of her sensitive earlobes. John leaned in to kiss Tashana fully this time and she whimpered with arousal as his tongue flickered against hers, their lips moving together.\n\n\"Why don't we get more comfortable?\" Alyssa suggested, planting more kisses on Tashana's pointed ear, making her shiver in delight. She unwrapped herself from around the Maliri girl then pulled off her clothes, before lying back on the bed. Beckoning Tashana over, she gave her a coy smile as she added, \"John's had a kiss; can I have one too?\"\n\nTashana crawled over to join her, staring at the naked girl's bronzed flesh with wide eyes as Alyssa gave her an enticing come-hither look. John watched in fascination as the Maliri girl overcame her nerves and moved between the teenager's splayed thighs, before carefully lying down on top of her. Alyssa cradled Tashana with her thighs as she wrapped her arms around her blue back, their breasts pressing together, the delectable flesh bulging alluringly.\n\n\"I'm not too heavy, lying on you like this?\" Tashana asked self-consciously, glancing down at her rounded tummy. \n\nShaking her head, Alyssa smiled at her and replied, \"No, you feel wonderful!\"\n\nThe two girls gazed into each other's eyes as Alyssa caressed her cheek with her slender fingers. Guiding the nervous Maliri girl down to her waiting lips, they kissed, slowly at first and then with more passion. It seemed that Tashana was more than a little interested in the fairer sex and with her anxiety forgotten, she was soon kissing Alyssa just as fervently. Excited feminine gasps filled the room and John's cock throbbed at the beautiful sight.\n\n\"Mmm, you're a good kisser,\" Alyssa purred when Tashana finally pulled back, panting breathlessly.\n\n\"So are you!\" the Maliri girl gasped, then blushed at her own eagerness.\n\nAlyssa gave her an affectionate smile and said, \"There's no need to be embarrassed, although it's very cute. Kissing other girls is exciting and we've got a ship-full of gorgeous babes for you to enjoy. They're looking forward to getting to know you much more intimately.\"\n\nTashana's eyes lit up at the thought and she smiled as she admitted, \"I was always fascinated by Terrans. I saw so many beautiful girls on holo-vids and it always amazed me how exotic and different you all were!\"\n\nJohn smiled at her, and said, \"I think you'll fit in just fine.\"\n\nThe two girls glanced his way, and Alyssa gave him a flirtatious wink, before turning to look at Tashana, and saying playfully, \"We've been naughty girls ignoring John. Are you ready to join us properly now?\"\n\nTashana hadn't stopped gazing into his eyes and she nodded decisively, as she replied, \"I'm ready.\"\n\n\"We better fill you up then!\" Alyssa said with an eager grin.\n\nAs John moved around the bed to face them both, Tashana glanced down at her curved belly and said with some trepidation, \"I'm not sure if I can hold any more.\"\n\n\"Don't worry, you'll be fine,\" John said, his calm voice steadying her nerves. \"After swallowing the first two loads, you'll stretch to carry it all, trust me.\"\n\n\"It won't even feel uncomfortable,\" Alyssa agreed, her cerulean eyes sparkling with excitement. \"It'll feel really amazing and you're going to look incredible... like you're pregnant with twins!\"\n\nThe blonde girl's enthusiasm was infectious and Tashana tilted her head back, opening her mouth into a wide inviting oval. Shuffling towards her, John aimed his wide cock between her parted lips, then groaned as she covered him with her mouth, lashing the underside of his shaft with her velvety tongue. He could feel Alyssa's tongue lapping at his taut quad as he reached out to run his fingers through Tashana's hair until he had her head in his hands. She relaxed her throat and slid forward, her eyes feverish with excitement as she stretched to take him.\n\nTashana felt a flicker of fear at having her throat stuffed like that, almost as if her body was reacting instinctively to some long-forgotten memory. However, there was no pain or discomfort and even though she could no longer breathe with the massive cock completely blocking her throat, she was surprised to find she wasn't choking for breath. Tashana fought down that rising, unsettling tide of panic, although she couldn't help tensing up.\n\n\"Just relax, it's okay,\" Alyssa murmured, planting gentle kisses on the cock-shaped bulge in Tashana's neck. \"Nobody's going to hurt you or make you do anything you don't want to.\"\n\nRealising Tashana's discomfort, John eased back out of her throat, being careful not to do so too abruptly. \"Sorry, I didn't mean to frighten you!\" he apologised, leaning forward to give her a kiss. \n\nShaking her head, the Maliri girl said, \"Don't worry, I'm alright. It wasn't anything you did, you were very gentle, I just got scared.\" She gave him a brave smile then added, \"I'm fine now, let's start again.\"\n\nHe nodded and gave her another kiss before sitting upright and bringing his cock to her lips again. John didn't push forward this time and he let her lap away at him, enjoying the feel of her eagerly sucking mouth. \n\n\"I don't need to go any deeper,\" he said, stroking her hair. \"You'll be able to taste my cum like this, rather than it going straight into your belly.\"\n\nMention of his cum sparked a hungry look of burning desire in Tashana's eyes and she sucked more insistently now, eager to feel his load filling her mouth. \n\nAlyssa tilted her chin up then began to lick along his shaft, making eye contact with him as she did so. *Her body must be reacting to what happened to her in the past,* she thought to him telepathically.\n\n*We'll just have to take things slowly with her, let her adapt,* John replied, giving Tashana a caring smile as she salivated on his cock. \n\nJohn knelt there in heaven as the two girls serviced him; their techniques were wildly different with Alyssa's relaxed, loving licks and Tashana's fierce suction. He managed to hold off his release for several minutes, but the dual action from both girls was relentless and impossible to resist for long. His four balls tensed up as he got ready to cum, helped along by Alyssa's long nails scraping softly over his quad. With a cry of relief, his first spurt rocketed up his shaft and into Tashana's waiting mouth as he cradled her head in his hands. She groaned in ecstasy as her mouth filled with cum and her eyes rolled back, fluttering as she swallowed the first mouthful.\n\nIt was a deliciously protracted climax as Tashana sucked him at a steady pace, savouring every last drop of spunk that bulged out her cheeks obscenely. It was only because her lips were clamped around him like a soft, hungry vice that she managed to hold it all, and her throat bobbed again and again as she swallowed his load. She managed to regain focus after a few moments and she gazed at John in adoration as she filled her belly with his sperm.\n\nWhen he was spent, he pulled himself free and plopped back on the bed, panting to regain his breath. \"God, that was intense!\" he said with a chuckle, as he sagged against the headboard.\n\nTashana's chest heaved as she sucked in a big lungful of air, but she had a blissful expression on her beautiful face as she murmured, \"The taste... it's so good...\"\n\nAlyssa tilted her head back and she looked gleeful as she exclaimed, \"She's absolutely stuffed! Look how big her belly is!\"\n\nTrue enough, Tashana's abdomen was stretched taut to handle his prodigious load, her stomach already half-full before they started. John helped move the dazed girl off Alyssa, freeing her from the weight of that gravid belly. \n\n\"I wish you could still load me up like this,\" Alyssa said, her tone wistful as she ran her fingers over the stretched blue skin. \n\nJohn smiled at her and said, \"Just wait until you're pregnant. You'll look like that every time I feed you.\"\n\nShe gave him a smouldering look as she said, \"I have a feeling I'll be getting lots of pregnancy cravings, but I'll be hankering after just one thing...\"\n\nThe two of them kissed, closing their eyes as they embraced. John instinctively checked the network of girls under his matriarchs and the bright white light led him straight to Tashana. Just as they'd suspected, she was linked to Alyssa, her full-body portrait nestled under the shining beacon that represented the beautiful teenager. He opened his eyes to tell Alyssa what he'd seen but faltered at the look of surprise on her face.\n\n*What is it?* he asked, wondering what had shocked the blonde so much.\n\n*Tashana's portrait in my mind... it's so different!* she gasped, as she stared at him. Seeing the bewildered look he gave her in return, Alyssa tried to explain what she'd seen. \n\nEach girl had her own metaphysical portrait that represented her in Alyssa's mind, and like Irillith, Tashana had appeared as a delicate blue rose. Her face was formed by the petals but the slender stem of her rose was smooth, and lacking any of her sister's sharp thorns. The thing that had so startled Alyssa, was that rather than appearing as a separate image, upon Tashana's arrival into her mind, the twin's portraits had merged. The stems of each blue rose were intertwined now, Irillith's few remaining thorns facing outwards, almost as if she were protecting her sister. Although Tashana's flower looked more delicate at first glance, there was an inner strength there, her rose rising skyward and lifting her sibling with her.\n\nJohn listened as Alyssa conveyed her thoughts, then looked bemused as he said, *What do you think that means?*\n\n*I've no idea,* Alyssa replied, glancing down at Tashana who was running her fingers in lazy, contented circles over her huge tummy. When she met his questioning gaze again she added, *I bet it's something significant though.*\n\nWith that, they flanked Tashana, cuddling her while they waited for her to rouse from her cum-drunk stupor. It took her quite some time to recover but when she finally did, Tashana let out a happy sigh and stretched contentedly before caressing her engorged abdomen once again. \n\nLooking at John with an appreciative smile, she said, \"Now that was amazing. I'm never going to get tired of the taste!\"\n\nJohn laughed and said, \"Well, I'm all yours for the next two weeks. You're not going to have to go through a radical physical change like the Terran girls did so you don't really need that much cum, but it's kind of a tradition around here.\"\n\nShe looked overjoyed, then glanced at Alyssa and said guiltily, \"I don't want to upset anyone! Are you sure no one will mind?\"\n\n\"As long as you're willing to share from time-to-time, there's lots of ways to make it fun for everyone,\" the blonde teen replied with a salacious wink.\n\n\"No regrets?\" John asked, running his hand over Tashana's impressive curves.\n\nPlacing her own hand atop his and interlacing their fingers, she replied, \"None. I know I made the right choice.\"\n\n\"You definitely did, gorgeous girl,\" Alyssa agreed. She glanced at the door then smiled as she continued, \"Are you ready for visitors? There's someone who's been dying to see you.\"\n\nTashana looked at the blonde with curiosity and she nodded as she quickly reached for the covers, then pulled them over herself to protect her modesty.\n\nThey all heard the clicking of heels a few seconds later and Irillith swept into the room, a look of nervous anticipation on her face. She took one look at Tashana's cum-stuffed belly tenting the bedsheet and her eyes widened at the sight. \"I can't believe you've joined us!\" she gasped in amazement.\n\nTashana nodded, a strange look on her face as she stared at Irillith. \"Is that okay? Do you mind?\" she asked, unsure if her temperamental sister was going to flare up at her in anger.\n\nRushing over to join her twin, Irillith's face lit up with joy as she said earnestly, \"I've never been happier, Tashana!\" \n\nTashana looked like she could hardly believe her eyes or ears, and she allowed herself a tentative smile. \"It's so good to see you again, Irillith. I've really missed you.\"\n\nIrillith bit her lip, her face suddenly shadowed with pain as she continued, \"I'm so sorry we fought! I was so horrible to you and you were right all along!\" Her eyes filled with tears and she gazed at her sister, adding, \"I was such a fool. Can you ever forgive me?\"\n\nTashana stifled a sob of relief and opening her arms, she burst out, \"I love you!\"\n\n\"I love you too!\" Irillith cried, eagerly accepting her sister's welcoming embrace. The twins hugged like they never wanted to let the other go, happy tears streaming down their identical blue faces.\n\nJohn shared a warm look with Alyssa and they rose silently from the bed, before disappearing into the walk-in wardrobe. They grabbed some fresh clothes and crept out of the bedroom, letting the twins have some privacy. After a quick shower in Calara's quarters, John and Alyssa dressed, then walked down the corridor towards the grav-tube. Sounds of construction reached their ears through the double doors at the end of the corridor and they grinned at each other as they heard the Officers' Lounge being rebuilt. \n\n\"I'll go and make sure they're following my plans,\" Alyssa said to him, when they stopped outside the grav-tube.\n\n\"I need to catch up with Edraele and the Matriarchs,\" John replied, feeling guilty for keeping them waiting. \n\nShe put her arms around his neck and said earnestly, \"Don't feel bad, the Matriarchs can wait a few hours. You did a really good thing back there.\" Her blue eyes went distant for a moment as she looked away. \"They're both so happy. I can't describe how wonderful it feels.\"\n\nHe smiled at her and said, \"Thanks for everything you did for Tashana. I'm so pleased we were able to help her.\"\n\n\"You're very welcome,\" she replied, giving him a tender kiss. When she pulled back, she looked into his eyes and her voice was sincere as she added, \"You've helped so many people, me included. If it wasn't for you, I'd be lying dead on a scrapheap somewhere in Karron. I love you so much.\"\n\nThey hugged each other fiercely, John wrapping his arms around the emotional girl and squeezing her tight. He cleared his throat and coughed as he growled, \"Damned dust from the refit... it's getting in my eyes.\"\n\nShe smiled when they finally separated then rubbed noses with him, a brilliant smile lighting up her beautiful face. \"I'll see you later. Have fun with the Matriarchs,\" she said playfully as she turned and walked away, her fingers lingering in his, before she opened the door to the Officers' Lounge and glided through.\n\nHe watched her leave, and waved her goodbye when she glanced over her shoulder at him, before walking into the red glow of the grav-tube. He'd only dropped down one level, before Edraele contacted him, her telepathic voice taut with emotion, *Oh, you wonderful man! My girls are so happy! I can't believe what you've done for all of us!*\n\nJohn sent her a caring telepathic smile as he said, *You don't have to thank me Edraele, I was just-*\n\nBefore he could finish the sentence, he felt Edraele do something to her empathic bond with him, almost as if she'd thrown a gate wide open. He felt a massive surge of emotion pouring through to him, which felt distinctly alien and very Maliri in its nature. The outpouring of sheer joy, relief, and gratitude could only be coming from Edreale, Irillith, and Tashana, and he staggered when he reached the bottom of the grav-tube, dropping to his knees as he gasped for breath. \n\nJade had been waiting patiently for him at the bottom of the grav-tube and rushing over to his side, she gasped, \"John! Are you alright?!\"\n\nHe leaned into her strong, supportive arms and rose unsteadily to his feet as he replied, \"Yeah, I'm fine. Edraele just surprised me with something.\"\n\nShe nodded, hooking an arm under his and easily supporting him as he leaned against her.\n\n*I appreciate the gesture but you could have warned me!* he said to Edraele, his gentle tone letting her know he wasn't really upset.\n\n*I just wanted to let you feel the huge impact you've made to all our lives,* she replied, her voice quiet and sincere.\n\nHe smiled as he thought to her, *I'm heading over to see you now. I'll definitely need a hug after that little surprise!*\n\n*I'll be in my quarters waiting for you,* she replied, sending him a loving smile. She hesitated a second then added, *You should probably hurry; the Matriarchs are becoming quarrelsome.*\n\nWith Jade's support, he left the Invictus, straightening as he recovered from the intense and abrupt burst of emotions. He walked hand-in-hand with the Nymph for the rest of the way to Edraele's suite, Jade clearly happy to just be keeping him company. The double doors to her room were in sight when he paused and pulled the cheerful green-skinned girl into his arms.\n\n\"Thanks for everything you've done here on Genthalas,\" he said to the Nymph, running his hand through her dark green hair. He looked at her regretfully as he added, \"I'm sorry you've had to be a proxy for feeding all these Maliri. I feel like I've been neglecting you.\"\n\nShe traced a finger along his jawline, and her joyful smile was quite genuine as she replied, \"I've adored spending so much time with you and you don't have anything to be sorry about! Don't get me wrong, I would have loved to have kept all that cum for myself but to feel you cumming inside me was incredible.\"\n\nStill frowning, John said, \"Yes, but for the last couple of weeks we changed all that. You've been filling yourself up from the girls instead.\"\n\n\"Making them climax is always very exciting,\" she replied, her emerald eyes twinkling as they caught the light. She leaned forward and brushed his lips with hers, before adding, \"They're your mates and my adoptive sisters. I love them all.\"\n\nHis smile finally matched hers and he gave her a tender kiss before saying, \"We'll spend some time together soon, just you and me. Would you like that?\"\n\n\"I'd love that,\" she replied, her cat-like pupils expanding at the thought.\n\nThey walked towards Edraele's quarters where the two blonde guards smiled and opened the doors for them to enter. Edraele was waiting for him in the Lounge and she glided towards him, her face a picture of deepest gratitude. Releasing Jade's hand, he wrapped the Maliri Matriarch in his arms and to his surprise, she only gave him the briefest of hugs before stepping away from him.\n\n\"I'll thank you properly later but I need you in the conference room now,\" she informed him with a look of regret on her beautiful face. \"The Matriarchs have become fractious without your calming presence.\"\n\n\"OK, let's go,\" he said, gesturing for her to proceed. \n\nShe wasted no time in heading for the door to the right of the lounge, glancing over her shoulder as she said, \"Most of the Matriarchs are around my age, at least a century-and-a-half and there's been too much suspicion and hostility built up over the decades.\" She brushed her long white hair back from her shoulder and added, \"They've stopped responding favourably to either my or the Young Matriarchs' appearance.\"",
        "John nodded then paused for a second and suddenly reaching an epiphany, he stated, \"You knew this would happen, didn't you? That's part of the reason why you assassinated the Matriarchs that you did.\"\n\nEdraele stopped by the door and gave him a rueful smile as she replied, \"Maliri respond well to my distinctive appearance, but the behavioural modification can only do so much. We'll need you to speak with them to avoid the situation getting out of hand.\"\n\nShe led him over to a closed door and he could hear raised female voices drifting through from inside. When Edraele opened the door, he knew he could have cut the tension in the room with a knife. Thirteen of the dark-haired Matriarchs either sat and glowered, or had stood and were shouting at the four girls seated opposite them around a long, polished table. The only exception was Tsarra who glanced between the two sides, a look of concern on her lovely face.\n\n\"This is a trap, I know it!\" an older Maliri woman hissed, pointing her finger at Kali Loraleth accusingly. \"You're as duplicitous as your triple-faced bitch of a mother!\"\n\nKali shrank back in her chair and shaking her head, she pleaded, \"It's not, I promise!\"\n\nAnother of the standing Matriarchs sneered and said, \"As if your promises meant a thing!\" She cocked her head to one side and added, \"Wait a moment! What's that I hear? I think your wet-nurse is calling for you...\" Glancing at the others, she continued with a sly smirk, \"I'm sure there's plenty for all of you, too.\"\n\nSeveral of the Matriarchs from the group of older women cackled maliciously at their colleague's jibe. \n\n\"That was uncalled for, Gaenna,\" Tsarra Perfaren said, frowning in disapproval. \"These women haven't done anything to deserve such scorn.\"\n\n\"Don't talk down to me,\" Gaenna Baelora snapped. \"I should never have listened to you or the crazed ravings from that Valaden whelp!\"\n\n\"Perhaps it would be best if we just calmed down,\" Valani Naestina said, smiling serenely at the women on the opposite side of the large table. Her voice was soothing as she continued, \"We just want to be friends with you and make an alliance. None of us bear you any ill will.\"\n\nAnother of the older women rolled her eyes and muttered condescendingly, \"Didn't your mother teach you anything, you vacant little cretin? Matriarchs don't have 'friends'.\"\n\nHaving heard quite enough, John strode into the room and declared in a loud voice, \"That's very unfortunate to hear - I was hoping to make some friends today.\"\n\nAll eyes in the room whirled around to look at him and while Tsarra and the Young Matriarchs' faces lit up with relief, the older women looked aghast. The Matriarch who had last spoken, sounded mortified as she blurted out, \"I'm so sorry! I never meant-\" \n\nHolding up his hand to cut her off, John said sternly, \"It was quite clear what you meant by that ugly display. I think you owe Valani an apology.\"\n\nLooking to be on the verge of tears, the older woman said, \"I'm so sorry, Valani.\"\n\nTaking pity on the House Holaris Matriarch, the white-haired girl smiled at her and said, \"That's alright, Emandra. I grew up being called far worse by my sisters.\"\n\nThe Matriarchs smiled at her joke and with their eyes fixed on John, they slowly sank back in their seats. Satisfied that order had been restored, John walked over to join them, sitting at the empty chair at the head of the ornately carved table. Edraele followed him into the room, then sat at his right side, with the Young Matriarchs seated beside her along that edge of the table. \n\nLooking around at all the women staring his way, John smiled at them and said, \"This is a momentous occasion, ladies. The nineteen of you represent every Maliri House and to all intents and purposes, you are the Maliri Regency. Now, have you ever met this way before?\"\n\nThey all shook their heads, with the dark-haired women looking at him with big eyes. \n\nEdraele spoke up for all of them in her clear, vibrant voice, \"There's been no meeting like this in living memory. I believe such a thing was unheard of even through the last several generations of Matriarchs.\"\n\nHe nodded and looking around at his attentive audience, he said, \"Yes, and it's a tragedy that the Maliri Regency has got itself into such a state. How can you work together to advance your people if you're at each other's throats killing one another?\"\n\n\"We can't,\" Tsarra replied, her voice sombre and quiet. \n\nJohn looked into her dark green eyes and smiled at her, making her heart flutter as he said, \"That's right, Tsarra. If things continue the way they have been, the Maliri will be dooming themselves to extinction.\" Looking at the rest of his audience, he added, \"I'm very fond of the Maliri and I don't want to see that happen. Do you?\"\n\nThey shook their heads, completely spellbound as they listened to his every word.\n\nTaking a deep breath, he continued, \"Edraele suggested that I become your King and rule over all of you as your Monarch. Do any of you doubt that I could seize power right here and now, if I chose to do so?\"\n\nThe repeated questions were helping them shrug off the effects of the behaviour modification, just as he'd intended. Tsarra stared at him for a moment and a look of apprehension crossed her pretty face as she admitted in a trembling voice, \"Tashana was right - we're powerless to resist you. You could do whatever you wanted, take whatever you wanted, and we wouldn't be able to even summon the willpower to oppose you.\"\n\nReaching out to stroke her hand, John said, \"That's true, but I'm no tyrant. Valani was correct earlier - I only wish to make friends and alliances with all of you. If you doubt my sincerity, you're free to leave and return to your own territory. I swear to you here and now that I'll make no move against you and you'll be left in peace as long as that effort is reciprocated.\" Looking around at his captivated audience, he continued, \"Would any of you like to leave? You may do so, with my blessing.\"\n\nHe saw a few looks of consternation from the older matriarchs, but no one made a move to even stand, let alone leave the room.\n\nNodding with satisfaction, he said, \"What I propose is this: I will adopt the role of 'Protector of the Maliri', but I'll simply be a figurehead, except in a few specific circumstances. All of you will continue to rule your Houses, but with several new ground rules that we must implement to secure a healthy future for each of your realms. Please be reassured that I have no wish to depose any Matriarch in this room. You have centuries of leadership experience between you, and I'd be a fool not to let you utilise your hard-earned skills.\" \n\n\"What are the 'specific circumstances' you mentioned?\" Gaenna Baelora asked him, the expression on her face a curious mix of fascination and wariness.\n\nHe leaned back in his chair and sounded sombre as he replied, \"There's another Progenitor out there, stirring up trouble in this part of the galaxy. If he should attack, I'd like you to grant me full control of the Maliri Regency's military might. That means you would cede every ship and soldier in your fleets to my command. We'll need to work together in a coordinated fashion if we're to stand any chance of fighting him off.\"\n\n\"So you'd only really be our leader in times of war?\" Tsarra asked, looking at him curiously.\n\nNodding, he smiled at her and replied, \"That's the plan. I'll be immune to coercion from this other Progenitor so I'm in a unique position to help hold him off.\" Glancing around the table at the women lost in thought, he continued, \"Please let me know if you have any concerns.\"\n\nTsarra blushed then said fervently, \"Whatever the other Matriarchs decide, I wish to ally House Perfaren with you, John Blake. You saved my life yesterday... I know in my heart what kind of a man you are and I believe you're telling me the truth.\"\n\nWith six of the top seven Houses now declared for him, all except for House Baelora at Rank Six, his forces now outnumbered those of the dark-haired Matriarchs that might oppose him. They knew it themselves, realising the extent of his unassailable position should hostilities be renewed. However, none of them wished to do so; they had all been swayed by his selfless intervention to save Tsarra at the cost of great personal injury to himself. One after the other they gazed into his eyes and made the same declarations of allegiance, until every Maliri House in the Regency was now united under his banner.\n\nJohn looked around the room and saw calm acceptance from not just the Young Matriarchs, but all of the dark-haired Maliri too. He smiled at them and said, \"Thank you for placing your trust in me. I promise I'll do everything in my power to keep you and all Maliri safe.\" After a telepathic prompt from Edraele, he arched an eyebrow and added, \"Now, are there any long-standing grievances between your Houses that any of you would like to address, before we move on with anything else?\"\n\nWith his calming presence, the forthcoming discussion was lengthy but reasonable, as they discussed centuries of betrayals and affronts. Somewhat unsurprisingly, each House had sinned against most of the others in some form or the other, from assassinations of Noble House members, right up to invasions and annexations of systems. In the overall balance of things, they were surprised to find that every House had suffered comparable losses at some point or the other. The two main exceptions were Valaden and Loraleth, the two biggest and largest Houses. However, Edraele and Kali astonished the other Matriarchs when they agreed to cede back systems to some of the weaker Houses that had been crippled by their depredations.\n\nAfter a couple of hours of these discussions, John smiled at them and said, \"This has been an extremely productive meeting. I'm proud of all of you for making an effort to work together to resolve your disputes.\" He looked around the table at the startled but pleasantly surprised women. \"Is there anything else that you would like to discuss today?\"\n\nEdraele raised her hand and her tone was fervent as she said, \"In the spirit of this newfound sense of cooperation between us, I believe we should go a step further regarding your Protector status. I propose we have you act as our Warleader for all external conflicts that involve the Maliri Regency. None of us, or our Fleet Commanders, have your tactical or strategic acumen - I think the battle simulation proved that without any shadow of a doubt.\"\n\nJohn didn't bother to correct her that Calara was the military genius behind the battle simulation, as it was a moot point as far as the Matriarchs were concerned. He expected the women around the table to be outraged at the thought of handing over command of their forces but they looked thoughtful instead, as they mulled it over. \n\nKali smiled at him as she said, \"Whatever the rest of these ladies decide, I'll give you full control of House Loralath's fleet assets.\"\n\nThe rest of the Young Matriarchs chorused their agreement and to everyone's surprise, their declarations were followed by Tsarra Perfaren, as she said to John, \"I will do the same. Aadya was hopelessly outmatched in the simulator battles. If we should go to war with a hostile empire, as much as I respect my Fleet Commander, I know you'd use my forces more wisely and effectively than she could.\"\n\n\"Thank you. I promise you won't regret that decision,\" he said, meeting her intense gaze and smiling at her in gratitude.\n\nEdraele's proposal was accepted unanimously, and just like that, he was now John Blake, Protector of the Maliri Regency.\n\nTurning to the fourteen dark-haired Matriarchs, John said, \"The last thing for us to do today is for you to link yourselves to me. Again, this is optional but if you choose to do so, I'll be able to restore your youth, adding another two-hundred years to your life expectancy and leave you looking as radiant as Edraele. Any woman you might have seen with white hair has accepted the same Gift although a few, like Edraele and the women sitting beside her, I've chosen for immortality. They'll sit at my side and help guide the Maliri towards a bright future over the course of millennia.\"\n\nThey gaped at him in awe, no one in the room doubting his sincerity for a moment. Unsurprisingly, everyone eagerly agreed to his offer.\n\nJohn smiled at Edraele and asked, \"Do you have a more comfortable room we could use?\"\n\nShe returned his smile and nodded, then with a quick glance in their direction, the Young Matriarchs left the room, ready to prepare Edraele's own bedroom with lots more pillows and cushions. Edraele led the rest of the Matriarchs out, leaving John alone with Jade. His faithful Nymph had been standing quietly in the corner, observing the whole momentous occasion in awe and she grinned at him when it was only the two of them in the room.\n\nJade walked over to him with an extra bounce in her step, her emerald eyes flashing with arousal and rubbing up against him, she purred, \"How do you wish to have me feed them, Master?\"\n\nPulling her into his arms, John reached down to grasp her pert cheeks before squeezing them roughly. The firm muscles yielded to his strong grip as he asked, \"Would you like to have fourteen Matriarchs sucking on those green tentacles of yours?\"\n\nThe Nymph thought about it for a moment, then nodded as she replied in all seriousness, \"I believe I would, Master.\"\n\nThey held hands as they left the large meeting room and walked out into the corridor beyond. Edraele was waiting for them outside her bedroom and she beckoned them along with an inviting smile. When they entered the bedroom, they found the Maliri waiting for them, eyes wide with arousal, now that the questions had ceased and the behavioural modification was back with a vengeance.\n\nThe Young Matriarchs were there too and they stripped off without a hint of modesty, standing before him in their glorious blue perfection. Taking their cue, the rest of the Maliri disrobed and despite nearly all of them being a century older that Leena, they were still slender, firm, and appealing in their physiques.\n\nAs John and Jade removed their clothes, Edraele glanced at a high-backed chair, then made a beckoning gesture towards it, lifting it through the air to land beside her. John smiled at her, then sat down in the chair, guiding Jade to him as he did so. The two of them moved with practiced familiarity, Jade settling down on his lap and sinking his rock-hard shaft into her clutching ass. Her normally-cool body felt warm against his chest as she settled back against him, resting her head against his shoulder, then turning to look at him in adoration.\n\nShe squeezed him rhythmically, tentacles snaking out from her body as she massaged his shaft with her internal muscles. \"Thank you for letting me help you, Master,\" she panted as she eased her tentacle-cocks between the parted lips of the fourteen now-kneeling Matriarchs. \n\nHe groaned at that exquisite sensation and at the same time, pairs of soft hands gently pushed his thighs wider apart. He looked down in surprise as he felt Kali and Nyrelle's soft tongues lapping his balls a few seconds later, while Jade moaned with delight as Leena and Valani each took a big verdant breast between them and sucked on the Nymph's dark green nipples.\n\n\"Does that feel good, My Lord?\" Edraele asked him, her tone respectful and submissive as her lips brushed against his ear. \n\nJohn shivered at the sensation of her lusty breath tickling his skin, her tongue flickering out to taste him as she kissed his sensitive earlobe. Just as he was getting used to that, he moaned as Jade dutifully replicated the sensation of her verdant tentacles pushing deeper into fourteen willing mouths. Driving up with his hips, he tried to impale himself deeper into the Nymph but her ring was already stretched tight around the base of his shaft. The pre-cum he was releasing had coated the Matriarchs throats, preparing them for deeper penetration and leaving them whimpering with need.\n\nHe reached around Jade to run his fingers through Leena and Valani's silky hair, holding their heads in place as they sucked harder on the Nymph's dark-green nipples. When he looked down, he saw all four of the Young Matriarchs gazing up at him, reverent expressions on their faces as they worshipped him and Jade with their tongues.\n\n*I spoke to the girls earlier,* Edraele informed him as she continued to nibble on his ear. He could hear her excitement as she added, *All four of them are eager to start rebuilding their Houses. Once you've shown them how wonderful making love can be, they can't wait for you to give each of them a baby.*\n\nJohn groaned at the thought, his cock throbbing in Jade's snug, clenching ass. He could see that knowing look in the four sets of youthful Maliri eyes gazing up at him and knew Edraele was relaying everything to them. *I can't hold out much longer if you keep this up,* he warned her, his body riding a tidal wave of sensation.\n\n*Why fight it?* she asked him, sounding confused. *The Matriarchs are all hungry for your cum and the girls love that you find the thought of getting them pregnant to be so exciting.*\n\nHe couldn't deny the truth in what she was saying and he bucked into Jade, his quad tense with anticipation of his imminent release. \n\n*I'll give you status updates every day until you return,* Edraele promised him, her soft lips kissing his cheek. *We'll be able to measure their growing tummies for you while we're all in bed together. Alyssa said that it's really important we sleep together every night, and learn to make each other cum, at least until you're back and filling us with your big hard cock.*\n\n*Jesus!* he snarled as he rammed his cock into Jade and let loose his cum with a mighty blast from his quad. \n\nHe could feel Kali and Nyrelle sucking on two of his balls, their tongues lapping at each flexing orb as he pumped cum up his shaft and into the gasping Nymph who writhed on top of him. Sometime during Edraele's teasing, Leena had been stroking Jade's clit, while Valani had eased two of her fingers into Jade's clenching pussy. Between the girls' soft lips and teasing digits, and John's jerking shaft up her ass, the overstimulated Nymph let out a keening wail and joined him in his climax.\n\nThe tentacles pulsed rhythmically as Jade funnelled his load into the Matriarchs' waiting bellies, their eyes glazing over as they swallowed his spunk. John could only groan in ecstasy as his quad was milked dry, until he sagged back in the chair with a broad grin on his face.\n\nEdraele leaned in to kiss him again and with a smile of profound satisfaction on her face, she whispered in his ear, \"Long live the King.\"\n\n***\n\nMany light years away, a House Valaden destroyer dropped out of hyper-warp, appearing on the outskirts of the Beta-Capricornus system in a cloud of blue tachyon particles. The ship had been dispatched from the closest fleet base - one of the facilities established long ago, which sent out patrols along the vital trade route to Genthalas Station. However, the destroyer wasn't out on patrol today; it had a far more vital mission to undertake.\n\nIgnoring the green jungle-world known as Quanthos, which was the only habitable planet in the system, the Maliri vessel zeroed in on the last known location of the satellite. The ship swept through the system, until its sensors found the forlorn remnants of the communication beacon, located in orbit around an amber gas giant. The sophisticated comms relay had been savaged by House Holaris laser fire, breaking a centuries-old covenant to leave the communications network undamaged, which ensured the Maliri could always respond to external threats.\n\nWith the realisation that the comms beacon was unsalvageable, the Captain of the destroyer gave the command and a new communications relay was launched without ceremony. Transmitting the activation codes took but a moment and lights on the side of the satellite flashed green as it surged into life, ready to route messages from the border stations back to the centre of Valaden Space. ",
        "***\n\n\"Would you like a drink, John?\" Leena asked, giving him a warm smile as she brought the tray of refreshments into Edraele's study. Her eyes flicked to the mauve-coloured drinks and she added, \"Nyrelle mentioned that you enjoyed Natalla berry juice.\"\n\nHe smiled at her in response. \"You're a mindreader! Thanks, Leena.\"\n\nShe smiled at him graciously and brought the tray over to the chaise-lounge, where he sat with Nyrelle and Kali cuddled up next to him. They took a glass when offered, smiling gratefully at the House Ghilwen Matriarch.\n\n\"How about you, Jade? Are you feeling thirsty?\" she inquired politely, turning to offer the Nymph a glass.\n\nWhatever Jade said was drowned out by a loud chime of alarm from the console built into Edraele's large desk. Edraele rose to her feet and managed to glide swiftly over to her desk, while still maintaining her elegant posture. \"An emergency communication,\" she explained, glancing at the comms interface. Her angular eyes widened in surprise as she added, \"It's from the Ashanath ambassador at Genkiri station!\"\n\nShe pressed a button on her desk and a holographic image appeared in the middle of her study, easily viewable by all in the room. The image of a grey-skinned, bulbous-headed humanoid filled that holographic projection, its huge black eyes staring straight ahead. Edraele activated the message and the Ashanath ambassador sprang to life, or at least as much as any Grey did with their inexpressive demeanour.\n\n\"My name is Ambassador Contarean. This emergency transmission is intended for JohnBlake,\" the creature announced in an eerie whisper. Blinking rapidly, it continued in its unemotional voice, \"I am contacting you on behalf of the High Council, JohnBlake. I must inform you that the Ashanath Collective is in need of your assistance once again. Drakkar Warbands have been attacking with greater frequency and severity for weeks and our losses have been... significant. If you receive this message, I would request that you travel to Ashana with all haste, as we urgently require your help.\"\n\nWith that, the emergency broadcast cut off abruptly, the Ashanath ambassador's message kept brief and unembellished.\n\n\"I've never seen Contarean react that way before,\" Edraele murmured. She glanced at John and added, \"He appeared to be terrified.\"\n\nJohn nodded, having noticed the Ambassador's blinking himself, quite uncharacteristic in such a normally impassive species. He finished his drink then rose to his feet and said ruefully, \"It looks like duty calls, ladies.\"\n\nHe was quite sure that his expression matched that on the faces of the nubile young women seated with him, their beautiful faces shadowed with disappointment. \n\n\"Do you really have to go?\" Kali asked him, her pretty face downcast as she gazed up at him.\n\n\"I made an alliance with them months ago,\" John explained, opening his arms for the upset young woman. As he hugged her, he whispered in her ear, \"Believe me, I was looking forward to tonight as much as you were!\"\n\nShe blushed a deep blue but he could see the look of yearning in her indigo eyes. The other three Young Matriarchs joined him for a hug then and he embraced each in turn, reiterating similar sentiments.\n\n*We're wrapping up the last of the refit,* Alyssa said, as she contacted him telepathically. *We've had to cut a few corners but we'll be done in two hours.*\n\n*Thanks beautiful, I'll be right there,* John replied to his blonde Matriarch, before glancing at Edraele's sad face over Valani's shoulder.\n\n*I wish you didn't have to leave,* Edraele said to him, stepping closer and hugging Valani from behind.\n\nHe gave her a reassuring smile as he said, *Don't worry, you've done a marvellous job of convincing me I should make my home here with you. I'll be back as soon as I can.*\n\nShe leaned over Valani to give him a kiss and as their lips met, her purple eyes gleaming as she replied, *I sincerely hope so. As well as your first time with the Young Matriarchs, you haven't finished 'breaking me in' yet, as Alyssa would say.*\n\nJohn's eyes widened when he realised what she was referring to and he replied with a grin, *I'll head straight back as soon as we're done!*\n\nEdraele smiled at him when she saw the arousal in his eyes and she kissed him passionately as she said, *While you're away, I promise I won't get upset if you sometimes think of me while you're fucking my daughters.*\n\nHis lusty groan even managed to startle Jade.\n\n***\n\n\"Well, that's everything,\" Irillith said, checking again to make sure the file transfer had copied across every file. Turning her chair towards her sister, who was leaning against the IntOps Console up on the Bridge, she continued, \"I've downloaded the entire contents of your research archive to the Invictus. You'll be able to browse it all to your heart's content.\"\n\n\"That's fantastic, thank you!\" Tashana replied, grinning at her twin. Her violet eyes sparkled with excitement as she added, \"I can't wait to show you everything I discovered!\"\n\nIrillith smiled at her indulgently, and said, \"We're all very eager to see what you found out, as I'm sure you can imagine.\"\n\nTashana laughed, shaking her head in wonder. \"I can't believe I've actually met a real-life Progenitor! I've had to pinch myself a few times to make sure I'm not dreaming!\"\n\n\"You've done more than just meet him,\" Irillith said with a sly grin, her eyes flicking down to her sibling's now-flat stomach. \n\nBlushing furiously, Tashana gave her a guilty look and said, \"Are you sure you don't mind? It feels like I'm trying to steal your boyfriend.\"\n\nIrillith rose from her chair and laughed as she said, \"We're all borrowing him from Alyssa, so no, I don't mind at all, I swear!\" Offering her sister her hand, she said, \"Come on, let's go take a look at the hacking deck.\"\n\n\"The projection device,\" Tashana corrected her, taking her twin's hand and following her to the grav-tube. She frowned as she added, \"I still don't understand how you missed Valada's message. I explained quite clearly how to initiate the playback and I left instructions too!\"\n\nIrillith paused before stepping into the grav-tube and her eyes were full of guilt as she confessed, \"I'm so sorry, Tashana. I was very different back then... I hadn't listened to a word you said when you told me how it worked and I just threw away your note without even looking at it. I found out how to create new AI just by randomly hitting buttons on the interface and after some experimentation, I assumed it was some form of hacking deck.\"\n\nRolling her eyes, Tashana laughed and said, \"At least you can finally see it now - my proof that I wasn't crazy.\"\n\n\"You were never crazy,\" Irillith said, her tone sombre and full of regret. \"I'm so sorry I made you feel that way.\"\n\nTashana put her arms around her sister and gave her a comforting hug as she murmured, \"That's all in the past now. Please don't get upset.\"\n\nHugging her back, Irillith replied earnestly, \"I don't deserve you as a twin, Tashana, I never have. I promise that from today, I'll be the best sister you could ever hope for.\"\n\n\"We're both getting a fresh start since we met John,\" Tashana replied, leaning back to look at her sibling's face. She smiled as she continued, \"We'll just have to make sure we make the most of it!\"\n\nIrillith looked thoughtful then nodded her agreement and they separated before turning and stepping into the red anti-gravity field. \"Speaking of making the most of it, you looked like you enjoyed yourself this morning,\" she teased her sibling, squeezing her hand to let her know she was only being playful.\n\n\"I've never tasted anything like it,\" Tashana sighed, giving her sister a furtive glance. She bit her lip, then added, \"It felt like...\"\n\n\"...you were alive for the very first time?\" Irillith finished for her, giving her twin a knowing look.\n\n\"Yes, exactly!\" Tashana agreed, her angular eyes widening at the memory.\n\nIrillith winked at her as they stepped out of the grav-tube on Deck Seven and whispered, \"I've been swallowing his cum for months and I still can't get enough of it!\"\n\nTashana grinned at her but her smile faded as she asked, \"What are we going to do about... You know... With both of us...\" Her voice faltered and she blushed, too embarrassed to finish the sentence.\n\n\"Fucking the same man?\" Irillith asked archly, grinning at her sister as she made Tashana blush even more. \n\nTashana giggled self-consciously then nodded, Irillith having succinctly summed up her cause for concern.\n\nIrillith stopped walking for a moment then turned to face her twin as she continued, \"There's no judgement or jealousy on this ship, not when it comes to John and our relationships with him.\" She smiled at Tashana and was encouraging as she added, \"So just relax, and go with the flow! We all sleep in the same bed with him and usually end up showering together, too. We're just going to have to get used to seeing each other nude, because it'll be too awkward and inconvenient to do otherwise.\"                         \n\nConsidering her sister's words carefully, Tashana finally nodded as she realised it was the only practical way forward. \"I'll do my best,\" she agreed, her eyes meeting Irillith's for a moment before they both blushed.\n\nThey were quiet as they walked along the rest of the corridor to the Engineering Bay and they shared an intimate smile before entering Dana's workshop.\n\n\"Whoa! I'll have to lay off boozing at lunchtime!\" Dana exclaimed, frowning at the Maliri sisters. \"I must be really wasted - I'm seeing double!\"\n\nThe twins couldn't help laughing at that and the redhead smiled at them as they walked across the large, well-lit room to join her at the Engineer's Podium. \n\n\"Dana, this is my twin sister, Tashana,\" Irillith introduced her, with a proud smile. Turning to her sibling, she continued, \"And this is Dana, our Chief Engineer.\"\n\nBounding down the steps to join them, Dana beamed at Tashana before pulling the surprised Maliri girl in for a friendly hug. She released her just as quickly, then winced as she said apologetically, \"Crap! I'm sorry, that must have been weird! You just look so like Irillith, it feels like I know you already!\"\n\nTashana smiled at her and her tone was kind as she said, \"There's nothing to apologise for. It's lovely to meet one of my sister's friends.\"\n\nDana glanced at Irillith and gave her an affectionate grin as she replied, \"I really wanted to kill her when we first met; she was a real fucking pain in the arse!\" Leaning closer to Tashana, she added in a theatrical whisper, \"She's actually pretty awesome now though, but don't tell her I said that, okay?\" Tashana giggled then replied, \"Okay, your secret's safe with me.\" She paused for a moment as she studied the exuberant teenager, then added in awe, \"Your hair is absolutely gorgeous! I saw Terran girls with red hair on the holo-vids but yours is so vibrant and beautiful... I've never seen anything like it before.\"\n\nRaising an eyebrow at Irillith, Dana asked playfully, \"I know you two look the same but is it wrong that I've picked a favourite?\"\n\nRolling her eyes, Irillith smiled as she said, \"Those are mighty brave words from the girl who wants me to make her secret project hack-proof.\"\n\nCoughing, the redhead replied, \"Don't worry, I picked you, obviously!\"\n\n\"Yeah, obviously,\" Irillith said with a smile.\n\n\"Secret project?\" Tashana asked, her face alight with curiosity. \"What are you working on?\"\n\nDana's eyes lit up with excitement and she said, \"John doesn't approve, but it's going to be a fucking beast when I'm finished with it! Do you want to see the new guns I've been working on?\"\n\nNot wanting to dampen the engineer's infectious enthusiasm, Tashana replied, \"Of course! I'd love to see them.\"\n\nBounding up the steps to the Engineering Podium, Dana's hands flew over the console, tapping buttons until a holographic projection of her design appeared before them. Although Tashana was no expert on weapons of that calibre, she had to admit she was impressed.\n\nIrillith's eyes widened and she exclaimed, \"The power requirements are ridiculous! There's no way that'll be viable!\"\n\nWinking at her, Dana tapped another button and the long multi-barrelled weapon was replaced by a compact, familiar-looking sphere. \"Miniaturised Progenitor reactor,\" she explained offhandedly. Her mouth lifted in a crooked grin as she added, \"With one of them installed, I'm planning on fitting four of those bad boys!\"\n\nIrillith shook her head in amazement. \"I can't wait to see it in action.\"\n\n\"Yeah, me too!\" Dana agreed, before stopping and studying the two girls. She arched an eyebrow and continued, \"Don't get me wrong, it's great to finally meet you, Tashana, but what brings you here? Is it just a social call?\"\n\n\"The hacking deck,\" Irillith explained, looking around the Engineering Bay for it. \"Have you got it at hand? Tashana said that there's an important message stored on it.\"\n\nDana groaned and gave her guests a look of profound regret, as she said, \"Shit! I'm really sorry, but It's been wiped.\" Jerking her thumb towards the Nexus server that now powered the gateway to the Invictus' cyber-realm, she continued, \"When we moved Faye to her own server the old hacking deck was fucked. She'd screwed up the AI boot sequence when she expanded her system memory and basically bricked the thing. I'm just using it as a backup for her Core Systems now.\"\n\nTashana looked crestfallen to hear the projection device had been cleansed of data, but her expression picked up as she spotted the hexagonal server when Dana pointed it out. Her eyes widened as she exclaimed, \"I've seen one of those before! It looked exactly the same!\"\n\n\"Where was that?!\" Irillith asked, sharing a startled look with Dana.\n\n\"On Epsilon Aquarii IV, where I found the projection device!\" Tashana replied, an excited grin on her face. Her smile died as she admitted, \"Unfortunately, the one I found was broken. The seismic activity that wrecked the base caused some of the roof to collapse, crushing part of the machine.\"\n\nIrillith looked glum as she said with a frown, \"That's a real shame. We might have been able to find out something really useful.\"\n\nTashana brightened considerably and added, \"I couldn't get it to work, but I salvaged everything that wasn't smashed to bits. All the components are in my secured vault in the palace.\"\n\n*You better move if you want to grab that before we go!* Alyssa warned them all. *John's on his way back and we're planning to leave as soon as we can.*\n\n\"We'll take the Raptor!\" Dana said, grinning at them as she ran for the door.\n\n***\n\nJohn walked out onto the Command Deck with Jade at his side before she sashayed down the ramps to her Pilot Station, flashing him a happy grin as she did so. Alyssa had spun her XO's chair around to watch his arrival and she rose from her seat to greet him when he jogged up the steps to the Command Podium. She let out a startled gasp as he took her in his arms and dipped her backwards for a soul-searing kiss, leaving the blonde positively breathless.\n\n\"You're in a good mood, especially considering you're being horribly cock-blocked by the Ashanath,\" she remarked, her bright blue eyes twinkling as she gazed at him. Her smile was genuinely sympathetic as she added, \"I know how much you were looking forward to taking Edraele's ass; and missing out on knocking up the Young Matriarchs, that's really harsh.\" \n\nHe laughed as he released her from his embrace, then sat down in the Command Chair and replied, \"True, I need to have stern words with the Ashanath High Council; their timing is atrocious!\"\n\n\"So why the high spirits then?\" Alyssa asked him with a curious smile. She winked as she added, \"Not that I'm ever going to complain about getting kissed like that.\"\n\n\"It feels good to be on our way again,\" he replied, shrugging unapologetically. \"I haven't stayed anywhere for this long, in well over a decade. I was starting to get itchy feet!\"\n\n\"Don't get me wrong, I'm happy to follow you anywhere, we all are. However, you'll probably have to keep your wanderlust in check if we're planning on settling down here,\" she replied, studying his face carefully. \"Especially if you're going to go ahead with your long-term plans for the Maliri.\"\n\n\"Nothing's changed. I've made a commitment to the Maliri and I plan to honour it,\" he replied, his mind made up. He smiled at her as he continued, \"I'm just enjoying being in the Invictus again, that's all. Until everything is finalised, this ship's still our home and I've been happy here.\"\n\nAlyssa's answering smile was glorious to behold. \"I know exactly what you mean.\"\n\nCalara, Rachel, and Sakura stepped onto the Bridge then, fanning out to take their respective stations. John shared a smile with each of them as they settled into their chairs and asked, \"How did you get on with the last of the refit? Is everything finished now?\"\n\nCalara and Sakura glanced at Rachel, letting her speak for them and the tawny-haired girl looked greatly relieved as she replied, \"It was a rush, but we got it all finished!\" She laughed as she added, \"We had so many engineers helping out, they were practically tripping over each other, but they all worked really hard to get everything done. I was proud of them.\"\n\n\"All of you did a brilliant job with the refit,\" he agreed with a nod. Frowning then, he added, \"I wanted to give a speech to thank the Maliri for all their hard work. It's a real shame we don't have time for that now.\"\n\n*Don't worry, you still can,* Edraele said to him, sounding pleased. *You can dictate whatever you want to say to me and I'll inform them all telepathically. It won't be quite the same, but I know they'll appreciate the gesture.*\n\n*That's a great idea, thanks honey,* he replied, smiling at the thought. *Give me a little while to come up with something suitable and we'll definitely do that.*\n\nHe could feel how happy she was to be able to assist and she said, *Just let me know whenever you're ready.*\n\nA naked Faye popped into existence on the Bridge then and hopped up onto his console, crossing her legs demurely as she got comfortable. \"We're all set, the last of the engineers has disembarked!\" she announced cheerfully, giving him a wide smile.\n\n\"What about Dana and the twins?\" John asked, darting a curious glance at Alyssa.\n\n\"They're still rifling through Tashana's vault under the palace. We'll bring the Invictus into low orbit around Valaden and dock with the Raptor there,\" she explained, listening to Dana and Irillith's excited thoughts and feeling Tashana's joyful emotions over their empathic bond.\n\n\"My secondary Avatar is piloting the Raptor at the moment!\" Faye chirped, her sparkling grin showing him her pristine white teeth.\n\nHe nodded then said to their Nymph pilot, \"Alright, Jade, take us out.\"\n\nThere was a flicker of light around the walls of the Bridge and the grey Titanium was replaced by a clear view out of the ship, giving him a spectacular view of the Invictus' glossy hull from their perch up on the Command Deck. John looked around in surprise, then said, \"This is new! Did you just install this now?\"\n\nRachel smiled at him and replied, \"We had the external camera feeds in place after completing the Combat Bridge. Dana hooked it up to the holo-projectors before she left.\"\n\n\"It's a hell of a view,\" John said, giving her an appreciative grin as he watched the ship lift off the drydock deck under Jade's expert control.\n\nThe Invictus slowly accelerated backwards, the battlecruiser's retro-thrusters flaring brightly. As soon as they were clear of Genthalas' superstructure, Jade dropped the nose of the ship then powered up the engines as she pointed them towards the verdant green planet below. Valaden grew larger as they drew closer, with its lush continents and aquamarine seas filling most of their front view, before they entered the upper atmosphere. It didn't take Jade long to assume a holding position above Melfalas, the planet's capital city, and they hung there motionless while they waited for their missing crew.",
        "\"There they are!\" Jade noted, pointing towards the Raptor as it broke clear of the cloud cover.\n\nNot possessing the Nymph's impressive eyesight, it took John a few seconds to spot the white-hulled gunship against the fluffy white cloud banks. Eventually, it became much easier to see as it raced towards them, swirling vapour trails left in its wake. The Raptor banked around gracefully on its final approach to the Invictus and Jade hit the button to open the hull doors for the Secondary Hangar.\n\n\"I've laid in the course for you, Jade,\" Alyssa announced, bringing up the Empire map which showed the snaking trail she'd plotted. \n\nThe Nymph turned to smile at her over her shoulder and asked, \"I'm not being demoted am I?\"\n\nShaking her head, Alyssa replied, \"Don't worry, sexy. I just wanted to get a bit of practice in.\"\n\nJohn studied the holographic map, which showed a glowing green flightpath that bounced from system to system, using the gravity wells to accelerate their hyper-warp speed. Alyssa's route would take them past Genkiri station on the most direct route to the Ashanath Collective.\n\n\"Only two days to the Terran Federation border?\" John marvelled, shaking his head in amazement as he read the ETA tagged against that milestone on their journey.\n\nAlyssa grinned at him as she replied, \"The new Tachyon Drive is crazy! We'll be zipping all over the galaxy with that installed.\" Pointing towards their final destination she added, \"Clearing the Terran Federation and crossing the Collective to Ashana will take another eleven hours. We should reach there at around seven in the evening.\"\n\nRachel turned her chair to look towards the Command Podium and stated, \"We'll be able to establish a comm channel with the Ashanath Collective as soon as we get in range of the Federation Comms Beacons. Going by our projected flightpath, that'll be in forty-five hours' time.\" \n\n*I've arranged for a prioritised comm channel to be dedicated to your ship,* Edraele informed him helpfully. *You'll be able to reach out to the Ashanath whenever you need to, and any emergency communications will be routed through to you.*\n\n*That's great news, thank you!* John replied, sharing a smile with Alyssa as she overheard the telepathic conversation. He turned to Rachel to ask her to contact the Ashanath, but he saw the light of understanding in her eyes before he'd uttered a word, Alyssa having informed her telepathically.\n\nHer grey eyes glinted at his look of surprise and she said, \"I'll establish the call. It may take a little while with the distances involved.\"\n\n\"Thanks honey,\" he said gratefully, before turning to watch the Raptor manoeuvring into the Hangar.\n\nAs soon as the gunship was safely aboard and locked into place, Jade closed the Hangar door, then tilted the nose of the Invictus upwards, filling their field of view with stars. She shoved the throttle forward and the Invictus leapt away, clearing the upper atmosphere in a roar, before falling silent as they entered the vacuum of space. As fast as their ship was, they raced past Genthalas and in just under a minute they had reached the Nav Beacon. Jade powered up the new Tachyon Drive and after a second to swathe the battlecruiser in tachyon particles, they surged into hyper-warp.\n\n\"I've got a Councillor Talari from the Ashanath High Council wanting to speak to you,\" Rachel announced, glancing at John.\n\n\"He's a friend, he helped us a lot on Ashana. Put him through, please,\" John said, nodding to her appreciatively.\n\nCouncillor Talari's grey face coalesced as a holographic image before them, appearing just the same to John as every other Ashanath he'd ever met. \n\n\"JohnBlake, thank goodness. It is so good to see you,\" Councillor Talari said, the relief robbed from his voice by the telepathic communication device that spoke for him. \n\n\"It's good to see you too,\" John replied, giving the expressionless alien a warm smile in greeting. \"We got the message from Ambassador Contarean. It sounds like the Drakkar are giving you trouble again?\"\n\n\"That is correct, JohnBlake,\" Talari replied, blinking a couple of times in his agitated state. \"We have been on the receiving end of unchecked aggression from Drakkar raiding parties for weeks. The High Council wish to formally request your aid as our ally against this deadly foe.\"\n\n\"Don't worry, we're already on our way,\" John replied, his tone calm and reassuring. \"We're scheduled to arrive in just under three days.\"\n\nTalari blinked once, his eyelids covering his huge black eyes in a single slow, measured motion, before he asked, \"You are deep within Maliri territory are you not? How could you reach us so quickly?\"\n\nNodding, John replied, \"That's right, but we've had a few upgrades since you and your people worked on the Invictus. We'll be with you as soon as we can.\"\n\nThe Ashanath Councillor stared at him for a few seconds before saying, \"That is excellent news, JohnBlake. We eagerly await your arrival.\"\n\nWith that he closed the comm channel, leaving the crew staring at static.\n\nJohn glanced at Alyssa and muttered, \"Was it just me or was he acting a bit weirder than normal? I've never seen a Grey do that kind of slow blink before.\"\n\nShe shrugged helplessly and replied, \"Without having a telepathic conversation with him, I've no idea what he's feeling. I'm as lost as you are, I'm afraid.\" \n\n\"I'm probably just being paranoid,\" John said, looking thoughtful. \n\nAlyssa tilted her head to one side then said, \"If the situation with the Drakkar is so bad that they're calling for help, they must be in dire straits. He's probably just worried.\"\n\n\"Yeah, that makes sense,\" John agreed. He paused for a second then turned to Rachel and added, \"Can you send a message to the High Council and ask for a summary of their encounters with the Drakkar. It'd be nice to know what we're up against.\"\n\n\"Of course, I'll send the message immediately,\" Rachel replied, opening up her comms interface and typing rapidly.\n\nCalara looked his way and offered, \"I'll review any data they send. Perhaps I'll be able to spot a bigger picture to the attacks.\"\n\n\"Excellent! Thank you, Commander,\" John replied, giving her a grateful smile.\n\n\"Dana and the twins are on their way up. Are you ready for a tour of the new facilities?\" Alyssa asked him with an eager grin.\n\nHe nodded, just as enthusiastic as she was and said, \"I can't wait to see what you've done with the ship!\" John glanced at Faye and added, \"Meet you there?\"\n\nShe nodded, giving him a wide smile as she replied, \"I've got Tertiary all ready and waiting!\"\n\nThey rose from their chairs and glided down the illuminated steps with the rest of the girls joining them at the grav-tube. When John stepped into the red glow of the anti-gravity field, he spotted the maintenance bots descending below them, floating down to Deck Nine.\n\n\"Where are they off to?\" he asked, curious to see the bots on the move.\n\n\"They're unloading all the artefacts Tashana retrieved from her vault,\" Alyssa explained, then waved to Dana and the two Maliri girls as they appeared in the blue field at the bottom of the shaft.\n\nJohn and the Bridge crew got out on Deck Two, then waited there for the brief time it took for the trio of girls to join them. He smiled at Tashana and asked, \"Did you find everything you were looking for?\"\n\nShe nodded, her violet eyes burning with excitement as she replied, \"We did! We also made an amazing discovery!\" Turning to the bouncing redhead beside her, she continued, \"Would you like to tell them?\"\n\nDana grinned with delight and said, \"She looted the data crystals from the fucked-up Progenitor server she found! They're intact, too! With a few minutes of recalibration, I'll be able to hook them up to our Gateway Server!\"\n\nTashana frowned and said, \"I'd prefer to think of it as a painstaking retrieval of ancient artefacts, which were previously lost to antiquity.\"\n\nAlyssa laughed and said, \"Yeah, John calls it requisitioning. It sounds like you two are kindred spirits.\"\n\nThe girls all laughed at that and seeing Tashana's confusion, John put his arm around her and said kindly, \"It's a long-standing joke at my expense. I'm sure Alyssa will delight in explaining it to you sometime.\" He turned to face the gathering of girls and said, \"I'm sorry we haven't had a chance to formally introduce all of you to Tashana yet. I know you'll all do a wonderful job of helping her settle in.\"\n\nDana slipped her hand around Tashana's waist and said with an affectionate smile, \"She might look just like Irillith, but Tashana's quite different. She didn't need several gallons of cum to make her into a lovely girl!\" Dana snaked her other arm around Irillith and hugged her too, as the Maliri girl laughed.\n\nJohn raised an eyebrow and said to Tashana, \"It looks like you've made a good impression on Dana already, and you already know Alyssa, and Irillith, obviously.\" He smiled at her, and continued, \"I'll let everyone introduce themselves, so you know their names. We're a close-knit family and you'll get to know everyone really well soon enough.\"\n\nWhen John's eyes darted to the Latina on his left, she stepped forward and said, \"It's so lovely to meet you at last, Tashana. My name's Calara, I'm the ship's Tactical Officer.\"\n\nThe two girls shared a brief but warm embrace, before Calara stepped back and glanced at the green-skinned Nymph to her left. \n\n\"Hello, my name's Jade,\" she said, a gentle smile on her face, as she opened her arms to hug Tashana. When she stepped back, she added, \"I'm the ship's Pilot, but I've also started assisting Dana with building her equipment.\"\n\n\"Yeah, she's been an amazing help with that,\" Dana agreed, nodding enthusiastically. A playful grin twitched on her lips as she added, \"Don't forget that you're our nurse, too!\"\n\nThe Nymph's cat like eyes met Tashana's and her voice was sincere as she said, \"That's very true, but let's hope you never need my help like that.\"\n\nRachel was next and she smiled as she said, \"I'd like to echo Jade's sentiments. My name's Rachel and I'm the ship's Doctor.\" She paused for a second then added, \"I'm also the ship's geneticist and I'm also fascinated by the Progenitors, although my research has been purely from a biological standpoint.\"\n\nShe embraced Tashana when she had finished introducing herself, then moved aside for the Asian girl to her left. \n\n\"We met the other day, but I'm sure you must have forgotten in all the excitement. My name's Sakura and I'm the Security Chief, so my job is to protect you while you're aboard the Invictus, as well as on any missions away from the ship,\" she explained, bowing her head in greeting. She smiled then and added sympathetically, \"Would you like a hug? Or are you feeling overwhelmed enough as it is?\" \n\nTashana smiled at her happily and opening her arms she replied, \"I was always a tactile person, so all this attention has been wonderful!\"\n\nThe two girls hugged and grinned at each other before parting. \n\nJohn looked at Irillith next and added, \"Does Tashana know your role on the ship?\"\n\nThe twins shared a smile and Irillith replied, \"Actually, no, we haven't discussed that yet. We've just been catching up and making up for lost time.\" She drew herself up and with a hint of pride in her voice, she continued, \"I'm the ship's Intelligence Officer and I'm essentially in charge of cyberwarfare and hacking.\"\n\n\"She's saved our skins loads of times already,\" Alyssa said, smiling at her affectionately.\n\nJohn glanced up at the nearest camera and said, \"Come and join us for a minute, Faye. You're as much a part of the crew as everyone else.\"\n\nThe elfin girl appeared in a purple flash and she said, \"Hey, Tashana! We met before but I'm not sure how much you remember, you were quite distracted at the time.\"\n\n\"You showed me lots of video footage,\" the Maliri replied hesitantly, frowning at the hazy memories. Her expression brightened as she remembered something distinct, adding, \"You told me you were in lo-\"\n\nFaye squeaked and cut her off. \"Yep, that was me!\"\n\nSmiling in bemusement at the flustered sprite, John said, \"Would you like to tell Tashana what you do aboard the ship?\"\n\nLooking greatly relieved at being able to change the subject, Faye nodded eagerly. \"I'm the Watch Commander so I keep an eye on the ship while everyone sleeps.\" \n\n\"You also man our Security Systems to prevent hostile infiltration and helped me design our new countermeasures,\" Sakura reminded her.\n\n\"Don't forget, you've been a big help with my research!\" Dana interjected, grinning at her petite friend.\n\n\"You've been a great assistance with mine, too,\" Rachel added gratefully.\n\nIrillith gave the purple girl a fond smile and said, \"You're basically in charge of the defences in the Invictus' digital network and you built most of it as well.\"\n\nFaye's darted wide-eyed glances from girl to girl as they listed her accomplishments, her mouth half open in surprise.\n\nAlyssa nodded and said, \"You also reprogram and operate the maintenance bots.\"\n\n\"You're our backup Raptor pilot, too,\" Jade offered thoughtfully. She smiled as she added, \"Which means I get to fly the Invictus instead.\"\n\n\"You assist me at Tactical by manning the Invictus' Pulse Cannons,\" Calara said, getting in on the act.\n\nJohn grinned at Faye and finished for them by declaring, \"And last but not least, you're also a lovely alarm clock, aren't you, my little siren?\"\n\nFaye blushed at all the effusive praise and she gave Tashana a bashful smile as she explained, \"After they upgraded me, I can run twelve avatars at once. It means I can help out a lot!\"\n\nShaking her head in amazement, Tashana said, \"It's astonishing that you originally came from the projection device I found.\" She studied the digital girl, and added, \"You certainly seem to have flourished here.\"\n\nFaye nodded exuberantly. \"Being here is wonderful! You're going to be so happy!\"\n\nThey all smiled at the cheerful sprite, until Alyssa shared a glance with John and said, \"I might as well explain my role too, while we're at it.\" \n\nHe nodded and said, \"Sure, go ahead.\"\n\nTurning to meet Tashana's curious gaze, Alyssa said, \"I'm the ship's Executive Officer, which basically means I'm John's second-in-command.\" She grinned at him as she added, \"Although, he did grant me full control over recruitment.\"\n\nLooking around at the gathering of girls, John said appreciatively, \"It was an uncharacteristic moment of wisdom on my behalf. I must say, she's done a spectacular job.\"\n\nWhen the laughter died out, Alyssa said, \"I'm also John's Matriarch, which means I'm psychically linked to all you girls, except Faye of course.\" She gave the purple sprite a sympathetic smile, then turned to stare into Tashana's violet gaze. \"That means I can act as a communications hub between everyone, as well as look out for you if you get sad or upset. You and I only share an empathic connection at the moment but eventually we'll be able to bond and upgrade that to a full telepathic one.\"\n\nTashana looked at her in fascination. \"So you'll be able to speak to me telepathically?\"\n\n*I can already do that, beautiful,* Alyssa replied, arching her eyebrow as she broadcast her thoughts to the Maliri girl's mind. She gave her a kind smile as she added, *I can feel your emotions, but I can't hear your thoughts. That'll come later, when we bond.\"\n\nWhen Rachel saw Tashana's shocked expression, she explained, \"We think that's the standard way Progenitors and Matriarchs operate. By having a telepathic connection with all the women linked to her, a Matriarch can pass on her Progenitor's commands to his Thralls.\"\n\n\"That's the kind of connection that Edraele has with all the Maliri linked to her,\" John explained, looking thoughtful. \"She can contact each of them telepathically but they can't reply to her.\"\n\nAlyssa grinned at him and said, \"Since the two of us bonded, we can contact each other's girls too.\"\n\nAs if on cue, Edraele's loving maternal voice popped into Tashana's mind, *Hello my darling. I'm so happy you've decided to join us.*\n\nTashana's eyes widened and she glanced at her sister, gripping Irillith's hand tighter in surprise. Her twin smiled back at her, having heard a similar warm message from their mother.\n\nJohn glanced at Alyssa, oblivious to the Valaden family conversation and said, \"We haven't been able to figure out how Alyssa's been able to upgrade those links into more powerful bonds, but it might be because she's so close to all the girls on the ship.\"\n\nAlyssa nodded. \"That's my guess. I love all these girls like they were my sisters but a Progenitor's Matriarch is never normally that close to his 'Thralls'. I've asked Edraele to work on building her relationships with a select group of girls, to see if they can bond too.\"\n\nRachel looked intrigued and said, \"I can't wait to find out if she's successful! If she isn't, there might be some other kind of contributing factor that's the catalyst, like the sheer volume of John's cum that we've each ingested. Alternatively, it could be because Alyssa is a Progenitor and therefore has more enhanced abilities.\"\n\nTashana gaped at the blonde teenager and blurted out, \"You're a Progenitor?! That can't be right!\"\n\nAlyssa gave John a loving smile. \"Not naturally, no, but John decided to give me an upgrade. I've got my very own psychic guide called Athena, who's been helping me learn my abilities.\"\n\nShaking her head in confusion, Tashana exclaimed, \"But that shouldn't be possible! Valada said that Progenitors are all male. They've been perfectly designed as a species to dominate hordes of women for use in their wars! There are NO Progenitor females.\"\n\nThey all looked around at each other in bewilderment, until all eyes eventually settled on John. He raised his hands in the air defensively and said, \"Don't look at me for answers, I've got no idea.\" He smiled at Tashana, adding, \"As our new Progenitor expert, I was hoping you might be able to fill in some of the blanks.\"\n\nTashana smiled at him shyly and said, \"I promise I'll tell you everything useful I can think of.\" Slipping her arm around Irillith's waist, she continued, \"We're going to work together to sift through all of my research, along with the data crystals I found, then put together a presentation for you. Does that sound alright?\"\n\n\"Perfect, thank you!\" he said gratefully, already looking forward to any answers she might have for him. \n\nEveryone was quiet for a moment until Alyssa asked, \"By the way, is there any reason why we're doing the introductions here? Instead of standing around in this corridor, we've got a lovely new Officers' Lounge to relax in.\"\n\nJohn laughed and looking around at the group, he asked, \"Shall we, ladies?\"\n\nThey nodded eagerly and Alyssa walked over to the double doors, pressing the button to open them. She grinned at her audience and said, \"Welcome to the new Officers' Lounge!\"\n\nThey wandered inside, making appreciative noises as they looked around at everything she had done. Instead of the dark and sombre decor, the Lounge was now a tasteful light grey with pale white-blue walls. The heavy furniture had been replaced by the Maliri equivalent which looked comfortable but was open-backed, adding to the feeling of spaciousness. Finally, numerous flowering shrubs and plants were now dotted around the room, giving the Lounge a more welcoming and less sterile feel.\n\nFaye was already waiting for them inside, her avatar in the corridor winking out in a purple flash as the group switched rooms. She gave them a cheerful wave, then fluttered over to join them.\n\nBeckoning everyone over to the cluster of sofas on the left, Alyssa began her tour by saying, \"This is the informal briefing area and we can view videos here too - Dana's installed holo-projectors all around the place.\"\n\nDana nudged Tashana with an elbow and said, \"We heard that you and Irillith are Asphalt Arena fans. You can watch the matches here.\"",
        "Tashana smiled as she asked her twin, \"Are you still following it? I haven't seen any duels in years!\"\n\nIrillith nodded eagerly, \"There was a twenty car Battle Royale four years ago; it was the craziest thing I'd ever seen! I'll definitely have to show you that one!\"\n\nThey giggled together as they remembered happy times watching it together in their youth, bright smiles spreading across both their faces.\n\nAlyssa waited patiently for everyone to turn to her again and leading them further into the Lounge, she said casually, \"As you can see, I got rid of the bar.\"\n\nJohn frowned and said, \"I quite enjoyed the occasional drink after dinner...\"\n\nShe smiled at him indulgently. \"We've got well-stocked booze cabinets at the far side of the Lounge, near the dining area. Don't worry, there's a wide variety of whiskey.\" \n\n\"Good girl!\" he said, grinning at her as he swept her into his arms for a hug.\n\nShe laughed in his embrace then gestured to the clusters of sofas that had replaced it. \"The bar was taking up too much space in the middle of the lounge and it was a bit pointless anyway. It was only really there so the officers could meet and hit on each other, but you only have to say the word and any of us will help you lighten the load.\"\n\nHe chuckled at that and said, \"Okay, you make a good point. So what's with the new sofas?\"\n\nGiving him a coy look, she led him over to the group on the left. \"Perhaps we should demonstrate.\"\n\nShe guided him to the middle chair then knelt down before him, running her manicured fingers over his thighs. Following her telepathic instructions, the rest of the crew fanned out to take their seats on the comfortable sofas, with Tashana looking a little startled at hearing the blonde girl's voice in her mind. There was plenty of room for everyone, with Calara and Sakura sitting beside him, Dana and Rachel to the right, then Irillith and Tashana to the left. Faye sat cross-legged on the table in the middle and a moment later, he felt Jade's fingers massaging his shoulders with an expert touch.\n\n\"Now, imagine the scene...\" Alyssa began, her fingertips tracing teasing circles. \"You've just saved the day once again and we've had a delicious meal. What better way for the lusty hero to unwind than with a loving blowjob and a massage from his ravishing harem?\"\n\n\"Yeah, I think I could live with that,\" John replied, grinning at her, then glancing over the back of his chair at Jade. He started to thank her but paused as he exclaimed, \"Where did that chair come from?!\"\n\n\"It's built into the floor,\" the smiling Nymph explained as she kneaded his muscles. \"You just press a button on the back of the sofa and it rises into place.\"\n\nHopping up to sit in his lap, Alyssa said, \"And when we're done watching the lucky girl get her after-dinner treat, we can all relax and look at the stars go by.\" \n\nShe reached across behind him to press a button on the back of the chair and the sofas to the side pivoted outwards, turning them so they could look out through the huge full-length window. The lights dimmed to a muted glow and the vast sprawl of stars before them seemed to come alive, appearing like precious jewels amongst the vibrant tapestry of nebulae that blanketed Maliri Space.\n\nJohn stared out of the window for a moment before turning to gaze at Alyssa. He studied her heart-shaped face, memorising every curve of her succulent lips and the slender, delicate nose that fit her face so perfectly. Raising his hand, he caressed her cheek, the back of his fingers brushing against the flawless tanned skin - so soft and smooth to the touch. Finally, he let himself be drawn in by those enchanting cerulean eyes which sparkled at him from behind long lashes.\n\n*It's a breathtakingly beautiful view,* he agreed, not taking his eyes from hers for one second.\n\nHe saw her glorious smile reach her eyes, the intensity of her gaze softening as she leaned in to give him a tender kiss. *You're supposed to be wooing our latest young maiden, not buttering me up,* she replied, although her playful tone told him that she hadn't minded his compliment in the slightest; far from it, in fact.\n\n*Sorry, I couldn't help myself, you're just that gorgeous,* John replied, hugging her closer. He eventually pulled away from her intoxicating lips and added, *I haven't thanked you yet for saving my life. I'm building up quite a tab.*\n\n*Your money's no good here,* she replied, smiling as she leaned in for a second kiss, before nodding towards Faye who turned up the lights.\n\nLike that, the spell was broken and the girls rose from their seats, blinking as their eyes adjusted to the brighter overhead lighting. Calara and Sakura gave John a knowing smile though, having been curled up next to him as they watched the kissing couple. \n\nAlyssa flounced away from them with a grin on her face. \"Okay, I'll show you the rest then we can settle down for dinner. I'm suddenly feeling very hungry for a filling meal, perhaps something with a rich, creamy sauce.\"\n\nHer none-too-subtle innuendo earned a few giggles and she led them over to the long table at the back of the lounge. The table was constructed from a lighter coloured wood but it seemed to shine with an earthy glow, the grain making beautiful patterns in the surface. \n\n\"I've never seen anything like it,\" John murmured, running his hand over the smooth tabletop.\n\n\"It was a present from Edraele,\" Alyssa explained, her fingers trailing over the exquisite grain in the table. She smiled as she added, \"It's fortunate it goes well with the colour schemes I'd chosen for the room, otherwise I'd have had to start all over again to accommodate this masterpiece.\"\n\nIrillith sounded surprised as she said, \"I think it's Lantaneak wood! It's very rare and worth a fortune.\" Glancing at John, she smiled as she added, \"I think you might have made a good impression on my mother.\"\n\n*A small token of my affection,* Edraele said, her voice gentle and loving as it teased his mind.\n\nThe table was more than big enough to seat all of them. A dozen chairs were set up around its length with the one at the end slightly larger and more ornate than the rest.\n\nHe sent a grateful telepathic smile to his Maliri Matriarch and said, *I love it! Thank you for the gift, that was very thoughtful.*\n\n*It was my pleasure,* she replied, overjoyed to feel how happy he was.\n\nJohn strolled over to the kitchen and took a quick peek inside. It had been largely untouched by Shinatobe's bomb so Alyssa hadn't made any changes. He glanced at Tashana. \"All the Maliri noblewomen I've met have been excellent cooks. I take it you didn't fancy being poisoned either?\"\n\nTashana smiled at her sister and slipping her hand into Irillith's, she replied, \"Fortunately, I don't think things ever got that bad between the two of us, but our House had plenty of enemies. I started preparing my own food from a very early age.\"\n\n\"I'll look forward to sampling anything if you get the urge to be creative in the kitchen,\" he said with a grin. \n\nTashana leaned in to her sister and exchanged a few whispers, before she smiled and said, \"We'd love to prepare dinner for all of you sometime. Just let us know when.\"\n\n\"Give yourself some time to settle in then by all means, the kitchen will be all yours,\" he said, looking forward to it.\n\n\"I think we've seen everything in here now!\" Dana blurted out, growing impatient. \"Let's go take a look at the new rooms on Deck Three!\"\n\nJohn nodded and they followed the redhead out of the room as she rushed for the door. He smiled at Alyssa and said, \"I love the new room. It's very relaxing and just what we needed.\"\n\nShe smiled at him then arched an eyebrow at Sakura and said in a gently teasing tone, \"I suppose we should be thanking Shinatobe for this. Without her dramatic remodelling, I probably wouldn't have bothered changing anything.\"\n\nSakura blushed, but she gave John a furtive glance then replied boldly, \"The casualties were just an unfortunate accident. Shinatobe was just desperate to do something about the drab decor.\"\n\nJohn smiled at Sakura as the girls laughed at her joke, delighted to see that she'd taken his words to heart and shaken off her sense of guilt for Shinatobe's actions. He put his arm around her as they walked through the Lounge and she grinned as she hugged him back. \n\nThey dropped down in the grav-tube to Deck Three, then stepped out into the long corridor. It stretched toward the back of the ship as it always had done, doors leading off it to the simulator rooms, the Training Dojo, and Faye's server room. However, the other end of the corridor had been opened up too and the serviceway that had once led into maintenance tunnels was now a fully-fledged corridor. It ended in a big set of double doors at the end and Dana was bouncing up and down with excitement as she waited by the door.\n\n\"Okay, let's see what you've been up to,\" John said, smiling at her as he gestured for her to proceed. \n\nShe didn't bother replying and just slapped her hand down on the button beside her, opening up the big doors with a swish of hydraulics. \n\n\"Oh, wow!\" Jade gasped, taking her first tentative steps inside the humid room. \n\nJohn's eyes widened as he looked around, seeing the results of their hard work for the first time - Dana's initial blueprints simply hadn't done it justice. The enormous room had been built around a huge swimming pool, designed to appear as if it was naturally occurring lagoon in a rocky jungle setting. Exotic tropical plants reached for the ceiling, and off to their left there was a pristine stretch of golden-white sand that formed a spectacular beach. \n\nThe path split in two, with the main one following a long bridge that arched over the pool, ending in another set of doors beyond. The second path snaked around to the left, dropping down a few metres as it led down to some white upholstered furniture that overlooked the tranquil scene.\n\n\"Bikinis will be mandatory in here, ladies,\" Alyssa said sternly to her female audience. She glanced at John and her eyes twinkled as she continued, \"At least until we've teased John to distraction.\"\n\nHe chuckled at that then looking curiously at Dana, he asked, \"You've done a spectacular job but won't all this water affect the ship's handling?\"\n\nShe shook her head. \"It's not as deep as it looks and we drained the tanks from the old pool when we repurposed the gym into the new brig. The artificial gravity will stop it from splashing around all over the place, so we shouldn't even notice any difference.\"\n\n\"I love it!\" Jade suddenly gasped, wrapping Dana in a big hug and lifting her off the floor. \"I can't wait to go for a swim!\"\n\nDana laughed at the Nymph's exuberance. \"It was John's idea! I just put it all together.\"\n\nJade's cat-like eyes flashed in the well-lit room, the warm glow from the ceiling lighting cleverly masquerading as bright sunlight. \"I'll make sure I thank you properly later,\" she purred and the look she gave him made him sure he was going to be in for a treat.\n\n\"Let's go take a look at the last room,\" Alyssa suggested, gliding out over the bridge, her heels clicking as she strutted away.\n\nThe tour group followed her to the next set of doors and she waved her hand towards the button, opening it up for them telekinetically as they approached. The room beyond was built in a long oval, with a lowered section in the middle that was filled with a comfortable-looking bed. \n\n\"Why don't we get comfortable,\" she prompted them, stepping out of her shoes, then walking down onto the bed. \n\nFollowing her lead, everyone joined her on the soft mattress, before sitting down and wondering what was going to happen next. Dana leaned over to press a button on a control panel set into one corner and there was movement above their heads. As they stared at the ceiling, the armour plating in the Invictus' Hull began to peel back, revealing a clear-crystal dome above them. The view was incredible, with a vast sprawl of stars filling the sky above them. \n\n\"This is just like the bedroom on Oceanus!\" Calara murmured, lying back on the bed with a lopsided smile on her face as she reminisced about the luxurious resort. \n\n\"I'm afraid we couldn't arrange another storm for you,\" Alyssa said with a grin, as she curled up next to her lover. \n\nDana, Rachel, and Jade all laughed at that, remembering Calara and John's electrifying coupling in the face of a tropical thunderstorm.\n\nJohn lay back on the bed, with Dana and Rachel cuddling up beside him. He put his arms around them both and said, \"You've done a phenomenal job getting these new rooms built so fast. I love what you've done with them; they should be lots of fun.\"\n\n\"We need to come up with some names,\" Dana said, rolling over on her tummy so she could look down at him. She gave him her most endearing smile as she asked, \"Can you help decide for us?\"\n\nRachel copied her, rolling over so she was facing him too, and added in a serious voice, \"We've had a few discussions and the popular consensus has been: 'The Alfresco Orgy Room' for this one, and 'Girls Get Wet and Wild' for the new pool area. We'd appreciate your thoughts, Admiral.\"\n\nJohn laughed at that and saw that the rest of the girls had gathered around to listen to his verdict. He thought it over for a moment, then said, \"I love the names, and I'm sure they'll be quite accurate, but they're a bit of a mouthful.\"\n\n\"I agree, but we're quite adept at handling tongue-tangling monsters,\" Rachel agreed, her mouth twitching in a smile.\n\nThere was more laughter from the girls and John was pleased to see Tashana joining in too. Their eyes met for a moment and he saw that burning desire igniting once more, her tongue wetting her lips in an instinctive gesture.\n\n\"How about we just call them 'The Observatory' and 'The Lagoon' for now,\" he suggested, turning his attention back to Dana and Rachel. \"They'll be easy to remember.\"\n\n\"Boo! They're boring names,\" Dana pouted. \n\nHe nodded and smiled at her as he replied, \"Yeah, but I'm sure what we'll get up to in them will be loads of fun.\"\n\n\"The mighty Progenitor has spoken,\" Rachel replied, her grey eyes twinkling like the stars behind her.\n\nAlyssa grinned at John and said, \"Alright, we better go get dinner ready.\" She glanced at Tashana and added airily, \"This lovely girl looks like she's ready for a big meal.\"\n\nTashana blushed a dark shade of blue, but John noticed she didn't protest in the slightest. He smiled at her and said, \"Now that gives me a wonderful idea. Would you like to christen the Observatory with me?\"\n\n\"I'd love to,\" she replied, one hand going to her stomach as she smiled back at him, her eyes shining with anticipation.\n\nThe girls started to get up and off the bed but John was surprised to see that Rachel and Dana made no attempt to move. \n\nRachel saw his questioning look and asked, \"If Tashana doesn't mind, I was wondering if she would share this load with Dana? I'm conducting an experiment at the moment and she's volunteered to be my test subject.\"\n\nTashana gave them a tentative smile. \"Of course. I wouldn't want to stand in the way of scientific progress.\"\n\n\"That's the spirit!\" Dana said with a wide grin as she pulled her shirt over her head. \"We're going to make you so happy you agreed!\"\n\nThe rest of the crew left them alone together and Rachel proved to be just as adept as Dana at quickly disrobing. Soon they were both completely nude and they approached Tashana who looked like a deer caught in the headlights - if describing two sets of big firm breasts that way wasn't a terrible injustice. John sat back and listened as the brunette and the redhead whispered to Tashana, their voices gentle and unthreatening as they reached out to touch the Maliri girl. Her violet eyes flicked to his and when he gave her an encouraging smile, she immediately relaxed then turned her attention back to the Terran teenagers.\n\nThey took their time peeling the long dress from Tashana, each taking one of her hands and placing them on their tanned bodies in an open invitation for her to explore. John watched in fascination as the trio got to know each other more intimately, their nubile forms moving at an unhurried pace that was as alluring as it was frustrating. Dana and Rachel each took a turn kissing Tashana, before lying down with her on the bed and beginning their gentle instruction in the art of Sapphic lovemaking. \n\nThe teenagers worked together with the experience and coordination of devoted lovers, teasing Tashana to her first climax before they had so much as put tongue to pussy. That was soon remedied as they took turns going down on her, while the other caressed her breasts, neck, lips, and a whole host of less-likely erogenous zones. By the time they were done, Tashana was left gasping for breath in post-orgasmic bliss, her eyes wild with a look of disbelief mixed with still-smouldering lust. \n\nDana and Rachel largely ignored John while they focused on the inexperienced girl between them, apart from giving him the occasional sultry glance, which reminded him the show was as much for his benefit as it was for Tashana's immediate pleasure. When they finally turned their attention to him, his cock was throbbing with need, his quad taut with excitement. Rachel lay on her back and beckoned him over, then helped him align his balls into the perfect position above her eager tongue. Dana and Tashana knelt in front of him, with the redhead simply opening her mouth in welcome invitation. He sank down her throat in one long thrust, groaning with the knowledge that his aching balls were about to get some well-deserved relief. \n\nHe pulled Tashana to him and smiled as he said, \"I need a kiss.\"\n\nShe pressed herself against his side, kissing him enthusiastically as Dana and Rachel sucked on his cock and balls. The smoky look of lust in the Maliri girl's eyes was intoxicating and he guided her hand to Dana's mane of red hair. Tashana followed his lead and ran her fingers through Dana's auburn tresses, revelling in the feeling of dominance as she stroked the submissive Terran girl.\n\n\"You feel it, don't you?\" John asked Tashana, as he held Dana's head in place and gently thrust against her plush lips. \n\nShe nodded, and replied in a breathless whisper, \"I feel so powerful like this.\" Turning to look at him, her angular eyes were wide open, as she added, \"Is this what you felt like with me, earlier?\"\n\nJohn nodded and met her gaze. \"It's the only time I let myself indulge my Progenitor nature.\" He looked down into Dana's smiling eyes and continued, \"They're good girls, they love playing their part.\"\n\n\"I never knew sex could be like this,\" Tashana murmured, a strange flicker crossing her face. She met Dana's gaze and added, \"They were so gentle with me. It felt so liberating, and... fun.\"\n\n\"I'll never make you do anything you don't want to,\" John said, lifting her chin and meeting her gaze. \n\nShe paused for a moment then nodded and said solemnly, \"I know. I feel safe with you.\"\n\nDana pulled herself off John's throbbing shaft and grinned as she said, \"Stop distracting him! I want some cum!\"\n\nJohn laughed and guided her eager mouth back onto his cock, sheathing himself down Dana's snug throat once more. He smiled at Tashana and said, \"She's right, no more talking.\"\n\nWith that he pulled the Maliri girl in for another kiss and they stared into each other's eyes as he thrust into Dana's plush lips. It didn't take long to bring him to climax, and Tashana stared at John in awe as his pupils flared and he started pumping his cum into Dana's hungry stomach. She greedily guzzled nearly two pints, before John groaned, \"Your turn!\"\n\nTashana ducked down in a hurry, just as the redhead slid back, so his pulsing head was filling her mouth with spunk instead of her throat. Timing it perfectly between blasts, they swapped hot mouths and then it was Tashana engulfing him, enthusiastically sucking out the contents of his balls. He watched her react to the taste, her body trembling with ecstasy as she swallowed the first mouthful. When her eyes had stopped rolling and she was able to focus again, Tashana gazed up at him and he saw her lips turn up in a smile as he stroked her soft white hair."
    ],
    "authorname": "Tefler",
    "tags": [
        "teenager",
        "blowjob",
        "swallow",
        "cum inflation",
        "group sex",
        "lesbian",
        "psychic",
        "alien11111",
        "maliri"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/three-square-meals-ch-76"
}
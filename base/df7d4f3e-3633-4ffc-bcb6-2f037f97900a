{
    "title": "A Handyman's Memoir Ch. 09",
    "pages": [
        "After an enjoyable drive back from Penny's place in the old Ferrari, we arrived in the village of Lake Placid. We made our way out the East side of town towards Whiteface, and after a while came to the end of Chrissy's long driveway. As soon as we turned onto it we saw a small car approaching, with a mountain bike on a roof rack. \n\n\"Oh my god it's Nicki!\" Chrissy said, with some panic in her voice. \"I completely forgot about her.\" \n\nA pretty young girl smiled and waved at us as she passed, and she turned her car around behind us and followed us back up the long driveway towards the house. Chrissy quickly explained. \n\n\"She's my neighbor's daughter back home. She started school up here at Paul Smith's College last fall, and her mother told me she decided to stay in an apartment with some of her classmates in Lake Placid for the summer to work. We told she could use our hiking trails any time, to help keep an eye on the place. Oh my God, what'll I say to her!\" \n\nWe quickly came to the garage and didn't have much time to come up with a story. \n\n\"Take a deep breath,\" I said. \"You'll think of something.\"\n\nChrissy and I got out of the Ferrari and Nicki was right behind us, already stepping out of her car. \n\n\"Hi Christine!\" she said. \"I saw your car when I got here, but there was no sign of you so I went for a ride on your trail and I was just heading home.\" She looked me over approvingly. \"Who's this?\" she asked with a slightly mischievous smile. \n\nChrissy was noticeably nervous, and she fumbled her words badly. \"This is my friend. He's . . . doing . . . some, some work here . . . on the house. He's . . .\"\n\nNicki spared her any more pain by cutting her off. \n\n\"Hi, I'm Nicki,\" she said to me, and she extended her hand out towards me with a big smile. \n\n\"Very nice to meet you Nicki. I'm Steve.\"\n\nShe turned to Chrissy, who was barefoot and braless, and had a few too many buttons opened at the top of her dress.\n\n\"He's cute,\" she said with a smile.\n\nChrissy actually looked a little relieved. I think she knew from the look on Nicki's face that the game was up. Small talk ensued between them about Nicki's school and job, and I had a chance to look Nicki over. I figured since she had just started college she must be 18 or 19, and she looked every bit that young. She had long wavy blonde hair, pulled back in a thick loose ponytail, and a tight little body with smallish tits. Very healthy and athletic looking, and every bit the mountain college girl type, I thought. She had on skin tight light yellow bicycle shorts, and a skin tight light grey top made out of some sort of high tech fabric. It looked like it was painted on, and her small pointy nipples were easy to make out. Her face was very cute, with a winning smile, and big blue eyes. A very nice package all around. \n\n\"You look beautiful,\" I heard her tell Chrissy. It was then that Chrissy realized her dress was unbuttoned too low and she was barefoot and looked way too sexy for the situation. She blushed and looked very nervous again. She fumbled with a button on her dress.\n\n\"Darn these things, they keep coming open,\" she mumbled.\n\nNicki laughed, and hugged Chrissy's arm.\n\n\"Don't worry, I'll keep your secret,\" she said. She paused and added, \"I always had a feeling you were more interesting than you let on.\"\n\n\"Oh Nicki,\" Chrissy said, looking relieved, \"I'm not usually like this. This is all new to me. Steve is . . . well . . .\" and her voice trailed off. \n\n\"I know he is,\" Nicki said, looking at me with a hint of young lust showing on her face. I felt flushed and hoped I wasn't blushing.\n\nNicki got a call on her cell phone and wandered over to her car and leaned on the side, facing away from us. It was my first good look at her tight little ass, and Chrissy caught me. \n\n\"What are you doing?\" she exclaimed quietly, \"How can you think about that?\" \n\n\"How can I not think about that after the last couple of days?\" I laughed. \n\n\"Do you think she can keep a secret?\" Chrissy asked me in a whispery voice. \n\n\"You know her a lot better than I do,\" I said. \"She holds all the cards at this point. You'd better be extra nice to her.\" \n\n\"She's a very nice girl, and her mother is too,\" Chrissy said. \"The three of us have spent quite a bit of time together at each others swimming pools and there's never any gossip. I think I feel like I can trust her. I guess I don't have any choice at this point.\"\n\nNicki got off the phone and walked over to us shaking her head. \n\n\"Drama at the apartment,\" she said. \"I've gotta get going, but I was hoping to talk to you about something Christine. Would it be all right if I come back a little later?\" \n\n\"Sure,\" Chrissy said. She thought for a moment and added, \"Why don't you come for dinner. Seven o'clock okay?\" \n\n\"It's perfect,\" Nicki said, and her eyes twinkled as she hugged Chrissy. She gave me a wordless hug and trotted to her car. \"See you later!\" she yelled out the window with a big smile, and drove off. \n\nI looked quizzically at Chrissy. \"What have you got in mind?\" I asked.\n\n\"I'll feel better if I have a nice long conversation with her before I go home,\" she said. \"I already feel better now though. I think I can trust her.\"\n\nI cleaned up the Ferrari and reluctantly put it away. While I was doing that Chrissy drove into town to get groceries and wine. She came back and we got ourselves cleaned up and then she prepared one of her amazing dinners. Promptly at seven Nicki knocked at the door. She was wearing a small cotton sundress, not unlike the type Chrissy wears, but younger looking. Her hair was down, she had on a hint of youthful makeup, mostly on the eyes, and she looked striking. As she came in she kicked off her flip-flops and went barefoot the rest of the evening. When Chrissy saw her she kicked of her sandals. I've always loved the look of a barefoot woman wearing a dress, and I was enjoying watching the two of them. We had a glass of wine and eventually made our way to the dining room and Chrissy served up the food.\n\n\"So what are you majoring in at school?\" I asked Nicki. \n\n\"Culinary arts and food service management,\" she said proudly. \"I want to open a restaurant in New York City and be rich and famous,\" she laughed. \"I'm working at a restaurant in the village this summer. It's lots of fun. You know Christine, you're the reason I got into cooking. The lunches you made for mom and me at your swimming pool were very inspiring when I was younger.\" \n\n\"Oh Nicki, that's so nice to hear,\" Chrissy said, smiling. \"Maybe we should have invited ourselves over to your place tonight so you could cook for us.\" \n\n\"I would love that!\" Nicki said. \"But it wouldn't be too great at my apartment. I swear it's like 'Animal House' over there half the time.\" We all laughed. \n\n\"Sounds like my kinda place,\" I said.\n\n\"Oh my roommates would love to get their hands on you,\" Nicki said mischievously.\n\nThere was a pause in the conversation while we enjoyed the food and wine and then Nicki, with her eyes twinkling, looked at Chrissy. \n\n\"So what's it like having a lover?\" she asked matter-of-factly.\n\nChrissy choked a little on her wine and blushed. \n\n\"I bet it's really hot...\" Nicki said, her voice trailing off. \n\nSurprise and nervousness showed on Chrissy's face as she searched for an answer.\n\n\"I'm still a virgin,\" Nicki said, looking down at her plate. Chrissy and I were both stunned to silence by the raw confession. \"All the attractive guys at school are taken. It's a small school. And here this summer, my roommates swoop in on anybody we meet out in the bars. They're all so over-sexed it's comical.\" She laughed as she said it, but there was sadness in her eyes.\n\n\"You haven't had a boyfriend at all?\" Chrissy asked, sounding like a loving mother. \n\n\"Yes, I had one,\" Nicki said, \"We just broke up a few weeks ago. I knew right from the beginning he wasn't the one, but we had some fun, did a few things, but never . . . you know.\" \n\n\"Be patient sweetheart,\" Chrissy said, \"you'll know when it's right.\" \n\nNicki looked down at her plate again. \"That's just the thing. I was hoping maybe you guys could help me. I felt so safe and sexy from the moment I saw you two today. I've never felt that way before.\"\n\nChrissy looked at me, her eyes huge. She looked back at Nicki.\n\n\"Nicki, I don't think that would be . . . I mean what if . . . What would your mother think if she found out.\" \n\n\"I thought about that earlier,\" Nicki said, \"and actually I think she would think it was a great idea. I mean what could be a safer situation for me than with you two? And I'm on the pill.\" \n\n\"Are you even old enough?\" Chrissy asked. \n\n\"I'm 19!\" Nicky exclaimed. \n\nChrissy looked back at me, eyes still huge and in shock, questioning me silently. I shrugged, but I'm sure my face gave away my interest in the idea. Chrissy just sat there for a moment looking lovingly at young Nicki.\n\n\"This is totally crazy . . . but I can't think of a reason to say no,\" Chrissy said. \"Help me out here Steve.\" \n\n\"Why would I do that?\" I said.\n\nNicki's nervousness broke and she laughed a little, her eyes locking to mine. We gazed deep into each other.\n\n\"Oh my god...\" Chrissy said.\n\n\"That's what she said,\" I said with a smile, and we all laughed nervously, Chrissy shaking her head in disbelief. \n\nNicki reached into a pocket on her sundress and pulled out a joint. \"I don't know if you guys smoke or not, but I thought it would help to relax me. My heart's just about jumping out of my chest right now.\" \n\n\"We just smoked a little last night. I think it was Chrissy's first time,\" I said.\n\n\"Yes,\" Chrissy said. \"It seems I'm rapidly descending into debauchery.\" We all laughed. \n\nI guess it was the first time Nicki had heard me call Chrissy by her 'new' name, and she looked at me with twinkling eyes.\n\n\"Chrissy! I've never heard her called anything but Christine. That's so sexy that you call her that!\" \n\nShe leaned over the table and lit the joint on a candle, took a deep drag, and passed it across to Chrissy. It wasn't as powerful as Johnny's weed, but we got plenty high by the time we'd finished it and another glass of wine, and we were all thoroughly buzzed and ready for anything. \n\n\"Come with me sweetheart,\" Chrissy said to Nicki. \"If we're gonna to do this I'm gonna get you ready. I've got some things you can try on.\" They left the room hand-in-hand and went upstairs. \n\nI cleaned up the dishes and thought about the sweet pleasures awaiting me, and after what seemed an eternity Chrissy came down to get me. \n\n\"I didn't have much that fit her,\" she said, \"but she looks amazing. You're in for a treat you lucky bastard. I'm still not sure if we're doing the right thing, but this whole situation's so hot I'm gonna fuck your brains out later.\" \n\nWe kissed each other passionately, and then she looked me over. I had on a white linen shirt and dark jeans that fit me well. She completely unbuttoned my shirt, exposing my firm stomach and chest, and stood back and looked.\n\n\"Yes,\" she said as her eyes danced all over me. \"Take off your shoes and socks.\" I did, and she said, \"Take off your underwear and put your jeans back on.\" \n\n\"Wow, you're really into this aren't you,\" I said with a laugh.\n\n\"I just want it to be perfect for her, to get her off on the right foot,\" she said as I was fulfilling her request. \"I know first hand how it can effect your life if it goes badly.\" \n\n\"Jeeze,\" I said, \"nothin' like putting pressure on a guy to perform.\" \n\n\"Don't sell yourself short.\" Chrissy said. \"The more I think about it the more I know you're the absolute perfect man for this. She's a lucky girl.\" \n\nShe stood back, gave me the once over, and kissed me again.\n\n\"Lets go,\" she said. \"She's probably nervous as hell up there.\"\n\nAs we climbed the last flight of stairs to the sleeping porch Chrissy whispered in my ear. \"Go slow, and be gentle.\" \n\n\"You're not joining us?\" I asked.\n\n\"No. I'm gonna wait right here,\" Chrissy whispered. She kissed me and sat down on the top step where she couldn't be seen. \n\nI walked into the room and there was Nicki, totally transformed into a young sex goddess. There were even more candles than before, 50 at least, fresh satin sheets on the bed, and Nicki sitting on the edge of it with her hands on her thighs. Her hair was brushed silky and flowed over one shoulder, and she was wearing nothing but a pure white garter belt and white silk stockings. When she saw me she straightened her back and stared into my eyes, looking nervous. \n\n\"My God Nicki, you look incredible!\" I said. \n\nShe exhaled loudly and relaxed a bit. I walked to her, took her head in my hands and kissed her deeply, our tongues dancing like we'd been doing it forever. I gently laid her back on the bed and kissed her nipples softly. They were already hard as pebbles when I walked in the room. Her breathing was getting loud and labored, and I could feel her heart pounding. \n\n\"Relax sweetheart,\" I said quietly.\n\nI slowly kissed my way to her belly button and down the wispy trail of blonde hair toward her lovely little pussy. She moaned deeply as my tongue traced a circle around it, and she opened herself up to me, spreading her thighs wide. I flicked my tongue around her tiny asshole and onto the smooth skin between it and her pussy.\n\n\"Shhiiiiitt!\" she said, the word floating out on a deep exhale. \n\nMy tongue entered her pussy at the bottom and slid through the tender folds slowly until I reached her clit. Her body quaked beneath my hands. \n\n\"Oh my God!\" she exclaimed in a breathless whisper. \n\nI kept at it, her quaking body stiffened as her moans got louder, and she came quick and hard with her back arched high.\n\n\"Oh Steeeve!\" she quietly cried in the sweetest little voice I'd ever heard. Her breathing was short, her eyes were wild, and she was primed and ready for the main event. \n\nNicki sat up and we kissed, her sweet pussy juice mingling between our tongues. I stood and slipped off my shirt. \n\n\"I didn't know it could be like that,\" she said. \n\n\"That's just the appetizer sweetheart,\" I smiled.\n\nFire was smoldering in her eyes and she was hungry for more. She unzipped my jeans and pulled them down and my cock sprung up in front of her, rock hard and ready for her.\n\n\"Holy shit!\" she said. \n\nShe just sat there with wide eyes looking at it for a moment, exhaling loudly through her nose with her nostrils flaring, and then she attacked it with her hands and mouth. Her fellatio skills were rudimentary but it didn't matter, it felt wonderful, and I moaned loudly in approval. Hearing my vocal pleasure seemed to give her more confidence, and she was really going at it. \n\nShe stopped to catch her breath and I pushed her back down on the bed and lifted her legs onto my shoulders. It was the moment of truth. I rubbed the head of my cock up and down through the folds of her flowery entrance, and back and forth over her clit. \n\n\"Oh God! Put it in me!\" she almost whispered. \n\nI gently tried to enter her small pussy, but couldn't make much headway. I didn't want to hurt her or scare her, so I took my time, but she got increasingly uncomfortable. I spit some saliva onto my hand and lubricated her pussy lips and my cock and tried again, with the same result. \n\n\"It's not gonna work, you're too big!\" she said, suddenly pulling away from me.\n\nHer emotions overtook her and she started crying. I was trying to console her when I noticed Chrissy come quickly into the room. She was down to her bra and panties, the latter with a noticeable wet spot, and she looked a bit disheveled. She got on the bed and looked Nicki in the eye.\n\n\"It's okay sweetheart, it happens to everybody. He is big, but trust me, it'll fit. And when he's inside you you'll love it even more because it's so big. Trust me sweetheart, trust me. All us girls have been through it. It's only the first minute or two that's so difficult.\" \n\nShe wiped away Nicki's tears and calmed her down. \n\n\"Don't worry Nicki, it's gonna be wonderful,\" I said, and I kissed her softly. \n\n\"I'll be right back,\" Chrissy said. \"I've got an idea.\" \n\nShe ran out and down the stairs. I cuddled Nicki and soon had her giggling and relaxed, with her hand on my cock. Chrissy ran back in, breathless from the three flights of stairs, with a bottle in her hand. It was olive oil.\n\n\"This is perfect,\" she said. \"Look at the label.\" \n\nEXTRA VIRGIN, it read, and we all laughed. \n\nShe handed it to me and started to leave. Nicki called after her.\n\n\"Stay with us.\" \n\n\"Are you sure Nicki?\" Chrissy asked.\n\nNicki reached out her hand to beckon her back to the bed. Nicki resumed her position at the edge of the bed, and Chrissy lay next to her and put her hand on Nicki's belly, circling her belly button. Nicki exhaled loudly when she felt the gentle touch, and her nostrils flared. I took the cue and dropped to my knees, repeating my oral exploration of Nicki's lovely little pussy and asshole. Chrissy's hand was slowly exploring Nicki's tits, and their eyes were locked together. I stood and drizzled olive oil on Nicki's sweet little pussy and gently rubbed it in. I drizzled some on Nicki's belly and tits, and Chrissy started to massage it all over her body. The heady aroma of olives was intoxicating. I poured some in my hand and rubbed it on my throbbing cock, and I lifted Nicki's legs up onto my shoulders once again. The lubrication worked wonders and I slid easily into her tight entry. \n\n\"Are you okay baby?\" I asked quietly.\n\nShe stared deep into my eyes and nodded, and with a quick thrust I was past her hymen. She let out a short scream, and then inhaled the words \"Oh God!\" as I pushed in my first four inches. She was unbelievably tight, and the sensation on my cock was intense. She grabbed for Chrissy's hand and squeezed it tight. Our eyes were still locked together, Nicki's as big as saucers and wild with desire. Ever so slowly I slid out a bit and then in, a half inch deeper each time, her eyes willing me in. I slowly fucked her, and her eyes rolled back in her head as I finally filled her with nearly the full length of me. She was totally silent, apparently holding her breath with her back arched off the bed. Finally she exhaled slow and deep, and then sharply inhaled and held her breath again. I've never felt such a vice-like pussy. She was so tight and the sensation was so intense I had to work hard to keep from cumming. I managed to hold on, but I needed Nicki to cum sooner rather than later. I had a feeling it wouldn't take much in her state, so I started gently massaging her clit with my thumb as I fucked her slowly. That was just what the doctor ordered. She got very vocal, moaning and squealing with abandon, and then she came in convulsing waves, her torso, back and shoulders arching in a rolling motion, over and over as the big orgasm swept through her. All through it she squeezed Chrissy's hand. Her deep orgasm contracted her pussy muscles even more and I felt like every nerve fiber in my body overloaded as I pulled out and shot my load on her belly, grunting so loud they must have heard me a mile away.\n\nI reached for Chrissy's other hand and we stayed that way for a few minutes in silence until Nicki opened her eyes. She turned her head slowly towards Chrissy. \n\n\"Now I understand,\" she said in a soft breathy voice. \n\nChrissy smiled lovingly at her and Nicki looked back at me. \n\n\"Thank you Steve. It was . . . everything . . .\" she said, and her voice trailed off as she closed her eyes again. \n\nAfter a few more quiet moments Nicki slowly propped herself up on her elbows and looked at Chrissy.\n\n\"You're so beautiful,\" she said as she reached out and gently touched Chrissy's bra covered tits. \"I'd like to see the rest of you.\" \n\nChrissy reached behind herself, unclasped the bra and slid it down her arms revealing her magnificent tits in all their glory.",
        "\"God those are...\" Nicki said softly, and her voice trailed off again. She sat up, still looking at Chrissy. \"Steve,\" she said, \"look at how beautiful she is.\" \n\n\"Yes she is, and so are you,\" I said as I sat down next to her. \n\nI took Nicki's face in my hands and kissed her lovingly. \"The two most beautiful women in the world I think.\" \n\n\"You gotta watch out for him, he's a sweet talker,\" Chrissy said, and the two girls giggled.\n\nBy that time it had started to rain lightly, and the sound of it on the metal roof over us was a soothing patter. There are wide roof overhangs so the room stayed dry, and the smell of summer rain mixed with candle smoke was intoxicating. \n\nNicki was soon ready for more and had her hand on my cock. It responded by doubling in size, and she was fascinated by it. \n\n\"He has a beautiful cock, doesn't he?\" Chrissy said. \n\nNicki looked like she was uncomfortable talking about it, so Chrissy encouraged her.\n\n\"Tell him what you think of it.\" \n\n\"It's a beautiful . . . cock,\" Nicki said, her eyes darting up and down between it and my eyes as she said it, and the corners of her mouth curled up mischievously. \n\n\"Thank you Nicki,\" I said softly, running my hands slowly over her. \"I think you have a beautiful sexy body. I love your tits, they feel so good in my hands. And your hard nipples are incredibly sexy. You pussy looks so perfect, and it tastes like honey.\" \n\nOur words seemed to be a revelation to her, and she glowed with the new-found freedom of language, and the knowledge that her young body was so sexually appealing to me.\n\n\"You know,\" she said to me, \"as soon as I saw you out in the driveway this afternoon I got tingly and my nipples got hard. I was a little embarrassed by it.\"\n\n\"Oh Nicki, I thought you looked incredibly sexy,\" I said. \"You should be proud of the way you look. You're a gorgeous woman.\"\n\nIt was beautiful to watch her new-found confidence building. She hugged me and kissed me softly, and then wrapped her small hand around my hard cock again.\n\n\"Would you like Steve to fuck you again?\" Chrissy said seductively. \n\nNicki visibly trembled as the words hit her. Her breathing got quick and loud, and her nostrils flared again.\n\n\"Yes, please fuck me Steven,\" she said softly.\n\nChrissy orchestrated it this time, and had me lie on my back. \"You need to get him ready,\" she said. \"Use your tongue and kiss your way up the inside of his legs and then put his cock in your mouth and get it slippery.\" \n\nNicki followed her instructions. \n\n\"Now use your hand on it while you suck his balls into your mouth. Gently, they're very sensitive. Use your tongue on them, and then take them in your mouth.\" \n\n\"Oh Nicki, that feels amazing,\" I said, moaning softly. \n\n\"Now suck on his cock some more, and then, when you want to, get up and straddle him on your knees and guide his cock into you.\" \n\nNicki was an A+ student, and soon I was at her tight entrance once again. This time we were able to work it in, a little at a time, without any extra lubrication. Nicki was no longer in need of the 'extra virgin' moniker, she was a woman now.\n\n\"Sit up and use your weight to help you down on it,\" Chrissy said. \n\n\"Oh my God it feels...so...Oh yeah! Fuck!\" she said softly as I started pumping very gently and slowly up into her. \n\nSoon I was all the way in and she lowered her upper body onto my chest, saying, \"yes . . . yes . . . yes\" with every slow thrust. Her mouth met mine and we kissed. She was moaning into my mouth with each thrust, and I was moaning into hers. Chrissy was behind her now, running her hands over Nicki's ass and arched back, and down around her sides onto her tits. She must have squeezed her nipples because Nicki reacted violently, breaking off our kiss with her head shooting back and her body tensing. I picked up the pace and gave her her first real fucking, and she came like gangbusters, screaming out as the wave of ecstasy rippled through her body. \n\nShe collapsed on top of me, both of us slick with sweat in the humid night air. Chrissy lay beside us and massaged her softly, all the way down her back to the crack of her ass, which made Nicki moan deeply. We lay like that for quite a while and eventually Nicki fell sound asleep on top of me. I gently rolled her off, she moaned softly, and Chrissy got up and got a blanket that she had folded up in the corner. \n\n\"We should blow out these candles,\" she said. \n\nChrissy pulled the blanket onto Nicki's sexy young body, and we worked our way around the room blowing them out, all except for two by the bed. \n\n\"You were wonderful with her,\" Chrissy said. \"I think it was perfect. What I wouldn't give to go back in time and have you be my first...\" \n\n\"I think the term 'it was my pleasure' was made for this situation,\" I said, and we laughed quietly. \n\nWe climbed quietly onto the bed, on top of the blanket, and Chrissy moved on top of me. We kissed for a while, and I started to get hard again. \n\n\"Aren't you worn out?\" she asked. \n\nI answered by pulling her panties aside and guiding my cock into her. I wasn't rock hard, so it was a slow entry, but it was very sexy and felt wonderful. We fucked slowly and silently next to Nicki as she slept. I brought Chrissy to a quiet but lovely climax, the first I had ever witnessed of hers that wasn't loud and earth shattering. \n\n\"That was beautiful,\" Nicki said quietly. She had been watching. \n\nChrissy and I got under the blanket, with Chrissy in the middle, and we all talked quietly for a while in the dim light. \n\n\"How come you never had children Christine?\" Nicki asked at one point.\n\nThere was a few moments of silence. \"I did have a child. A beautiful little girl,\" Chrissy said, and tears welled up in her eyes. \"She died when she was four. She'd be about your age now.\" \n\nTears were shed by all three of us as we comforted Chrissy, and we talked deep into the night. The girls eventually fell asleep, I blew out the candles at the bedside, and I drifted off to dreamland with my head on Chrissy's bosom, thinking about all the magic she had brought into my life."
    ],
    "authorname": "riverboy",
    "tags": [
        "virgin",
        "blowjob",
        "ffm"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/a-handymans-memoir-ch-09"
}
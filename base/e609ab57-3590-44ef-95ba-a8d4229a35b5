{
    "title": "14 Hours Pt. 13",
    "pages": [
        "-Kori-\n\nI haven't been home in nearly a decade. Pre-med at Harvard and then med school at John Hopkins has consumed my life. All of this time after I tested out in high school, I haven't been home this entire time. Ten years since I've been home. \n\nHeartbreak is really what drove me away, I'm not going to lie. I loved Will, before I really even understood what that meant. It broke my heart to leave, but I couldn't let his drama become my drama. \n\nSince then I've gotten engaged. Paul and I met in med school, and he proposed after we graduated. I had a few casual flings throughout college, but I was still counting them with one hand when I met Paul. I hate that I still think Will is better at sex, but sex isn't everything. \n\nPaul is tall and lean, kind of gangly actually, with short blond hair cropped and a beard so light it looks thin. I say I prefer him shaved, but he keeps assuring me it will grow in. Two years later it still hasn't. \n\nWe both received our residency at the hospital near my old home, which is now where I find myself. My parents are ecstatic to see me. They have visited me, but I've never come home. \n\n\"It's so great to see you home, your room hasn't changed at all,\" Mom says as I step through, Paul behind me. She hugs Paul as well, having meet him multiple times. Dad just shakes his hand. \n\nI drop my bags off in my room, where mom asks to see the ring, which I display with my hand extended out, fingers down. \n\n\"Damn, got some money behind that,\" Mom says.\n\n\"His parents let him dip into this trust fund, he can't touch it until he's thirty,\" I reply, mom laughing and looking at my ring. Won't bore you with the details, so I'll summarized. Big rock. \n\n\"I'm so happy for you. When do you start the residency?\" Mom asks.\n\n\"Next week. We bought a house, but it needs new cabinets, and a lot of other new stuff, so we're going furniture shopping,\" I say, Mom thinking.\n\n\"You should try this place in town, opened a few years ago. It's pretty pricy, but if you get it at the manufacturer, it's cheaper. Plus they do custom installs,\" Mom said, I agree to check it out and she tells me where it is. \n\nPaul and I drive to the location, which is a little off the highway at a large building with a metal sheeting roof and sides. It all looks very industrial. The sign at the entrance of the driveway read 'Custom Carpentry' below it saying 'Cabinets, furniture, and foundations'. There is a sign directing traffic employees to the right, and customers to the left, so Paul turns left and parks in the closest spot he can find, which takes several minutes longer than if he just parked.\n\nWe enter a reception room, which has chairs to the right against the wall, and a desk with a computer and a woman who looks up at us as we enter. Starting on the wall next to the door, there were pictures from floor to ceiling with employees taking pictures next to their completed works. This collage of completion wrapped around the corner into the next room.\n\n\"Welcome, how can I help you?\" She asks. If I had to guess, late teens. It's properly a summer job.\n\n\"We're hear to see what you have available for kitchen cabinets,\" Paul says. I was about to speak first, but he was faster. \n\n\"We have our brochures to see what would best suit your home. We also have an album of our custom jobs,\" She says, Paul asking for both and the receptionist leaning down and retrieving them from below her desk, \"We also tours of the work floor, if you want to see our process.\"\n\n\"That actually sounds interesting,\" I say, asking more about it. She hands me a pair of ear plugs and safety glasses, while Paul opts out and starts reading through the information in the waiting room. \n\nI'm led to the floor, where at least twenty men and women were sawing, sanding, cutting, or shaping wood to create several different products. Cabinets, chairs, tables, shelves, bookcases, and bed frames. I'm walking a very narrow line between two strips of red tape, forming the line that I'm allowed to walk. \n\nThere also seems to be a process that I noticed as well. Every employee was working on their own item. Apparently when complete, it was signed by that carpenter, guaranteeing quality as every person had to put their name on it. Then a picture was taken to be added to the wall, and attached to the item in an envelope. \n\nNear the end of the hall was the finishing room, where I had to put on a mask to protect me from the fumes. This room was more ventilated than the others with a loud fan that removed the fumes from the space. The wood was sealed and stained in this room, where I see a little boy and a man working together on a kitchen table. \n\nThe man was guiding the boys brushing, assuring even strokes in the same direction. After he completed one line across the table, the boy looked up to the man for approval, which he received with a pat on the back. \n\n\"Great job, now keep doing that, it'll be done in no time,\" the man shouted to speak over the fan, the boy shouting back and starting again. The man turned to face me, and our eyes lock.\n\n\"Will?\" I ask. ------\n\n-Will-\n\n\"Happy Birthday,\" is the first thing I hear when I wake up in the morning. Rolling over, I see Chloe laying on her side with her head propped up on her hand with her elbow on the bed. \n\n\"What's my present?\" I ask, Chloe smiling devilishly at me before sliding into the bed where I feel her hand and mouth on my dick. This isn't just because it's my birthday, I get plenty of morning blowjobs. Chloe just likes doing it for me from time to time. It's a fair trade, she wakes up the same way I just did just as often. \n\nWhen I'm good and firm, she climbs on top and drops herself down, my hands gripping her sides. After she climaxes I take over, wrapping my arms under her back. We kiss as I pull out and push in, until I unleash inside of her. We're trying for number three right now.\n\nSamantha and I didn't last a year, but that was a fun year. I'll never get another foursome in my life. Samantha, Lili, and that chick I was pretty sure was a lesbian from my trade school named Sarah. She absolutely was, until she wasn't. Samantha coaxed her into our bed, promising I'd only get to watch the three of them go at it. I went from watching, to touching, to fondling, to fingering, to licking, to fucking. Whole process took about an hour, but Samantha is all for the long game. \n\nBy the end of the night, she went from never been in bed with a man, to have been talked into sucking a dick, getting fucked by one, then getting a facial with her tongue out. After that, she wanted to try it again later that night. I rammed her in doggy until she screamed. I jerked myself onto her back, then she sucked my dick until I lost my erection.\n\nLast I knew Sarah was married with three kids. \n\nHonestly though, Samantha wasn't sustainable. After we broke up officially, it wasn't long until I was dating Chloe. \n\nDuring that time Lili had our daughter Alice. Between starting work as a framer and raising Alice, the first few years weren't bad at all. I was always exhausted, but I always found the energy for her. Her first word was 'boob', and I was there for that. I blame Lili for always talking about how being pregnant made her boobs better.\n\nLili has never asked me for anything other than just being there. I'm there every second I can be. I worked during the day, she worked at night, so we always had one of us with her. Weekends we both were. \n\nWithin six months Chloe and I were living together, and I could tell she was kind of jealous at first. All of my attention was for a different girl, but she understood. Chloe spent a lot of time with Alice and me together, and when Alice was two she could say aunt semi-coherently. When Alice was three, Chloe caught the baby bug. \n\n\"I think I want a baby,\" Chloe said randomly one day while we were watching television while I rubbed her feet.\n\n\"What?\" I asked.\n\nChloe still had a semester of college left. Not to mention her mother. Her mom is interesting to say the least.\n\nJoy, Chloe's mother was as a three-time divorced woman. Chloe's dad was husband number two. She had an inexplicable talent of scaring men away. When she was drunk once, she openly told Chloe she didn't want her and considered abortion. Instead she used sole custody to strong arm her ex for child support, while claiming to be a strong independent woman who don't need no man. \n\nI proposed to Chloe and we were trying for a baby when engaged. She was four months when we tied the knot. Her mother had a meltdown. She was wasting her life to be barefoot and pregnant, and constantly called me a piece of shit. \n\n\"You'll see. You'll have his babies then he'll leave you high and dry. You father was a worthless piece of shit too,\" Joy said.\n\n\"Sure mom, dad was the useless piece of shit who never missed a child support payment in eighteen years, while you bragged about being independent.\"\n\n\"He hasn't visited you in...\"\n\n\"Because you denied him even visitation rights because he was five minutes late dropping me off when I was six. You called the cops and had him arrested for kidnapping. Don't put this on him, and don't call my husband a piece of shit you crazy cunt!\" \n\n\"He won't stay around, just suck his dick like a good little wife...\"\n\n\"You know what mom, maybe a few more blowjobs would have kept your husbands around. Get another cat, and go fuck yourself.\" \n\nChloe had our son, and Joy was disappointed it was a boy. That's when Chloe cut her out her life entirely. Her dad Frank is cool though. I like Frank. \n\nAbout the same time Henry was born, I was locking down a few investors, and I started the company. It was just me and two guys making the stuff, Chloe on marketing from her office at home, and Samantha was in accounting. Go figure she was good with numbers. \n\nWe barely broke even the first two years, but we began to get into the black. Then we exploded. I have twenty carpenters now. When we were comfortable, we had Olivia almost immediately. \n\nHenry is my clone to put it simply. He's attached to Chloe at the hip, but we're trying to break that a little by having time with just him and I. That's when we knew he was very much a boy. Tearing things apart, putting them back together. At first he was sporadic, but by the time he was three, there was a purpose behind it. Thoughtful, meticulous, weirdly patient for a toddler. \n\nOlivia is an unusual little girl. Chloe loves to dress her in the cutest outfits she can find and braid her hair. Olivia hates it and immediately strips naked and runs through the house. Put her in jeans or overalls, she's content. When we go out we have to put her in her brother's hand-me-downs to avoid her doing it in public. I think this is why Chloe loves Alice so much. Alice is all for the cute stuff, and loves her aunt Chloe who likes to help her look pretty.\n\nEven though it's my birthday, it's still just another day at work. I make breakfast while Chloe gets the kids dressed, Olivia coming out in her overalls, presenting me a card Chloe helped her make. \n\n\"Thank you sweetie,\" I say, picking her up and kissing her cheeks. \n\nThe front door opens as we're eating, Alice sneaking up behind me and wrapping me in a hug. \n\n\"Happy Birthday daddy!\" Alice shouts, me leaving my chair to hug her. Her backpack is on her shoulders, so I'll assume she bugged Lili to stop by before school. \n\n\"Thank you shortcake,\" I say, because she looks like strawberry shortcake. The same skinny red head her mother is, but her red is more of an auburn. She's also tall for a ten year old, already a little short of five feet.\n\n\"I got school, but I'll be back later,\" Alice says, steals a strip of bacon from my plate, kisses my cheek to apologize, then exits the house. \n\n\"You taking in Henry today?\" Chloe asked. \n\n\"He's going to help me with staining.\"\n\n\"And I'm going to use the tools,\" Henry said with a grin. He knows he's not, but he says it to see if he can. \n\n\"You two have fun.\"\n\nI take Henry into work with me, our receptionist Jenny saying hello and talking for awhile before I equip him with some safety equipment and carry him across the work floor. Everyone says morning as we walk pass, most stopping to hello to Henry in particular. In the staining room, I have to talk louder to him because of the fan, but my instructions are not missed and he's a very patient kid. \n\nI give him a smaller brush so if he messes up I can still salvage it without having to go through extra work to fix it. That won't be necessary with him. His strokes are slow, but methodical and precise. His focus is intense, the same way it was when he was three and would get incredibly frustrated with himself when he would mark outside of the lines in his coloring books. \n\nWhen she was younger, I tried getting Alice into this kind of activity, but she's too much like her mother. Impulsive with a great interest in boys and being pretty by age six. I'm not looking forward to her teen years.\n\nHenry finishes the first edge, looking up at me for approval to continue the task. I pat his shoulder to assure him.\n\n\"Great job, now keep doing that, it'll be done in no time,\" I have to shout over the fan. At that moment, I feel eyes on us, that feeling you get when you just know someone is looking. I look over my shoulder and a woman is standing in the red boundary where customers can observe the work. Her hair is longer, now reaching to her earlobes, curling inward, but I recognize her almost instantly. It's Kori.\n\n\"Will?\" Kori asks\n\nI freeze for a second, but only a second. \"Hey.\"\n\nWe both try to talk over the fan, but it becomes very apparent that isn't going to work for long. Henry turns around and looks at her, then up at me and seems a little confused. I lean down, tell him we'll finish up in a bit and we walk out the door to the where the tour exit is and our administration offices.\n\n\"You look really good,\" Kori says to start off, coming in for a hug that I return. That could have been awkward, but I supposed we've both abandoned that. \n\n\"So do you,\" I say, then feel a tug at my shirt. \"Henry, this is Kori, she's an old friend of daddy's.\"\n\n\"Nice to meet you,\" Henry says, holding up his hand for a shake that I can tell melted her heart. He really is adorable, his manners just magnify it. \n\n\"It's lovely to know gentlemen still exist. Take it you didn't get it from him,\" Kori said, looking at me with a grin. A tease and a stab. \n\n\"How long have you been working here?\" Kori asks.\n\n\"Five years, and I don't just work here. I own it.\"\n\n\"Whoa,\" Kori says, looking back at everything she saw on her way in. \"Doing well I take it.\"\n\n\"We get by,\" I say modestly. Very modestly.\n\nKori is looking at Henry intently, but not in a way where he feels insecure about it. I know what she's doing. If he doesn't match the age of the kid I must of had, it means I had another, and she probably assumes with Lili. \n\n\"Let's stop by accounting for a minute,\" I say, gesturing to my right down a hall with a posted sign saying, 'employees only'. Henry knows which office we're about to go into, so starts running ahead of us. The door is open to the left and he runs straight in.\n\n\"My favorite little pimp!\" We hear a voice say from inside, me knocking as I come in. \"Happy birthday boss man.\"\n\n\"Samantha?\" Kori says from the door, Samantha's body tilting to look pass me and into the hall. \n\n\"Holy...\" Samantha begins, then looks at Henry. \"Snickers.\" \n\n\"Most restrained I've ever seen you,\" Kori said with a giggle.\n\n\"We got a protect to finish, but leave a number, we'll get together sometime,\" I say, Samantha looking at me like I was a dickhead who just pawned Kori off on her. Which I did, so gaze well deserved. ----\n\n-Samantha-\n\nAs quick as she left, Kori came back. Here one day, gone the next, back again. I see the rock on her hand, and I know she's moved on, even bagged a guy with some money if my guess is right. She'd shit herself if she saw the company's numbers. Will playing with his wood for all of those years really paid off. I'm the accountant, I know the numbers.\n\n\"Accountant?\" Kori asks, and I nod.\n\n\"Barely passed English, killed in math though,\" I say, Kori laughing, \"You a doctor yet?\"\n\n\"Starting my residency pretty soon,\" Kori replied, and I smile. She did what she said she'd do. I admire that. Nothing got in her way. But she threw some good stuff away too. \"Did he have a second kid with her, the first one would be nearly ten.\"\n\n\"Henry isn't Lili's, their daughter is named Alice,\" I say, Kori then pointing at me, \"Not mine. Will married Chloe Matson.\"\n\n\"Brace face?\" Kori asks, and I smile and nod, \"I didn't see a ring on him.\"\n\n\"Company policy, you don't wear jewelry on the floor, besides religious symbols under your shirt. Watch in a belt sander isn't pretty,\" I say, Kori agreeing that was probably the safe bet. \n\n\"Will owns this?\" Kori asks.\n\n\"He finished trade school, worked as a framer for a few years, while designing his own stuff on the side. He shopped for investors, got off the ground about five years ago. First two years sucked, but we got by, and now we're killing,\" I say, Kori whistling. \n\n\"What does killing mean?\"\n\n\"Eight million in sales last year,\" I replied.\n\n\"Holy snickers,\" Kori replied, making me laugh loudly. \n\n\"I run the numbers, Chloe runs the marketing mostly from home,\" I say, Kori looks around again. I can see it on her. She left him because he had no future and couldn't tough it out with him. Regret is on her face. \n\n\"You guys have done great,\" Kori says, and there is a long pause, \"You want to get coffee or something?\" \n\n\"Sure,\" I say, saving my spreadsheets and grabbing my coat to get something to drink.\n\n----\n\n-Chloe-\n\nWill comes back from work with Henry while I'm finishing up the birthday cake. Lili arrives a little later with Alice, who's excited to see her siblings and father. She has her own room upstairs, and is frequently over. Lili doesn't even ask for child support, it's generally peaceful and cooperative. This was one of my biggest concerns when we got married, but I was worried for nothing. Having a baby, literally made her less crazy. I've never seen them fight over her. \n\nAlice has her mother's red hair and skinny form, with Will's eyes. She's a darling too, and is all for the girly stuff. Dresses, dolls, looking cute. She's basically everything I'd like Olivia to be like. I have no little girl to dress up, which is why Alice loves her aunt Chloe who is more than happy to appease her dress style. \n\nSamantha arrives later than I thought, and she's followed by some people from the company and his parents. The adults drink a little, the kids play, and it's generally a fun night. We blow out the candles, and people start leaving at around nine, at the end only leaving Will, Samantha, Lili, and the kids. \n\nWhen I started dating Will, I was the only girl, and we were happy. Really happy too. I think what I liked about him the most, was the fact he was a father. He was great with Alice, and I underestimated what that does to a girl's maternal instinct. There is nothing more attractive than a good and attentive father. \n\nWill got more attractive for other reasons too. When we got the house two years ago, Will finally had the space to build what he always wanted to build; a home gym. He was always fairly fit, and very tone, but he's put on at least twenty pounds of muscle mass since he built the gym. It was gradual, but profound. From solid wood and a few bolts, he created a bench, squat rack, and only had to purchase a few items. We only sunk a few hundred dollars in the end, but I like the reward the investment has yielded.\n\nWhen he turned twenty one, the party ended and only Samantha and I were still there. Will and I were already living together at this point. I forgot how tricky she was. Samantha went though me to get to him, and it was fun. Too fun. I struggled with it for the entire year, but I got over it. After I let Will know how it made me feel, when she tried again on his next birthday, it was Will who shut it down flatly. ",
        "That is now so far behind us, I don't even have an issue with Samantha working with him. When she starts drinking at parties is where I get concerned. She still has her manipulative streak, and she still uses it on me when she's drunk. This chick literally talked a lesbian into fucking Will, her powers are incredible. \n\n\"It'd be fun,\" Samantha says, laughing the way she only does when she's buzzed. I can gauge her level of drunkenness by her laugh I know her so well.\n\n\"Samantha, no,\" Will says.\n\n\"You don't need to be there. How about I just take you wife to your room and disappear for awhile?\"\n\n\"When do we cut her off again? Is it when she starts striping?\" Lili asks, and we all nod. \n\n\"Come on guys. Our social circle seems to be just the people who have slept with Will. Shit even Kori's back,\" Samantha says, and I look at Will.\n\n\"What? Kori's back in town?\" I ask. \"When were you going to let me know your ex was at the shop?\"\n\n\"Just kind of slipped my mind,\" Will says noncommittally. \n\n\"I'm an ex, she's kind of an ex,\" Samantha says, Lili shrugging, not even offended. \"Will is the only person on this table who can count on one hand the number of people he's slept with.\" \n\n\"Will was my second,\" I retort.\n\n\"Either way, nothing to worry about with her. She's engaged, getting a house, she's getting her shit started.\"\n\n\"What was she doing there?\" I ask.\n\n\"Getting cabinets for her new house. Pure coincidence,\" Samantha says, and I believe it. She would have to go out of her way to know where he was, assuming she was ever looking for him to begin with. \n\n\"It's getting late, still have work tomorrow. Samantha, you're not driving, I already hid your keys,\" I say, Samantha opening her purse and frowning at me, but understanding. \"Lili you staying?\"\n\n\"Might as well,\" Lili says. \n\n\"Since Chloe is a dry well, want to share a bed, see what happens?\" Samantha asks Lili sarcastically.\n\n\"We can have Alice bunk with Olivia,\" I suggest, playing with her. Lili reaches into her pocket, but doesn't find what she was looking for. She asks the table for a coin, which Will provides her with a quarter. \n\n\"Call it,\" Lili says, Samantha saying heads before it lands in her palm and she slaps it to the back of her opposite hand. \"Heads it is.\"\n\nLili walked around the table, kissing Samantha who gave a teethy grin before they walked away and vanished with the sound of closing door following. \n\nI look over at Will, him chuckling a little. \n\nAre we boring now? We still have plenty of our own sex, but not like we used to. We're well passed threesomes, and I realize I miss the fun. That kind of relationship isn't sustainable though, I saw it implode with Samantha and Will before we started going out. It only escalates to keep feeding itself, desperately trying to be relevant and outdo the last time. I do need to acknowledge the first time we had sex, was a threesome with Samantha. It's basically in the DNA of our relationship, and he seems more content with removing it than I do. \n\nAm I bored, or am I worried he is?"
    ],
    "authorname": "CaffeineFetish",
    "tags": [
        "comedy",
        "roman",
        "marriage",
        "bored",
        "blow",
        "creampie"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/14-hours-pt-13"
}
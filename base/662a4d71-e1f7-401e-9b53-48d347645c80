{
    "title": "Two Hundred Dollars Ch. 16",
    "pages": [
        "Laura and Bailey lay on his bed, on their stomachs, naked from the waist down. Bailey still wore her skirt, but had left it gathered up just above her hips, a declaration of either her exhibitionism or her level of comfort.\n\nBailey appeared relaxed, her chin resting on her folded arms. On the other hand, Laura's face had turned to panic when she realized Kent held her panties across the room from her.\n\nKent saw Laura's expression and realized that, funny for Bailey or not, Laura wouldn't derive any enjoyment if forced to stand up in front of him to get her underwear back. Instead, she lay there on her stomach, bare ass to the ceiling, frozen in fear.\n\nThere's fun and games, and there's ruining the fun and games by pushing her too far.\n\nInstead of pushing, he laughed and flung the little handful of white lace at the bed. It expanded and floated down over Bailey's back, from which Laura instantly snatched it up. Secure in her ability to cloth herself, her body relaxed as she folded her arms in front of her and she leaned her chin on her forearm.\n\n\"That's seven bucks today,\" she pointed out to Bailey, a faint tremor still in her voice. \"Really moving along.\"\n\nBailey sighed in acknowledgement and closed her eyes.\n\n\"Remember, Bai?\" she prodded. \"You were worried at the beginning that you'd fallen behind.\"\n\n\"I remember,\" Bailey replied. \"I didn't imagine we could cover this much ground in one night.\"\n\nKent ignored their conversation and checked them out while they talked. He'd made the lowest parts of their cheeks the reddest, but every bit of flesh from waist to thigh hosted at least a touch of pink.\n\n\"Your butt can take a lot more than you thought?\" Laura offered.\n\n\"I guess so,\" Bailey said.\n\n\"Skinny, skinny butt,\" Laura sang out. \"It's actually impressive.\"\n\n\"Thanks,\" Bailey hissed back.\n\n\"And think!\" Laura pointed out, raising herself up on her elbows, \"tonight we found a new way to pay off your debt.\"\n\n\"We are not doing that again!\" Bailey insisted. \"Also, we need to sober you up or your mother'll notice.\"\n\nPanic set anew in Laura's expression.\n\n\"I still have an hour or so,\" Laura replied hopefully.\n\n\"Uh huh,\" Bailey acknowledged sarcastically. \"Sorry, Kent. I need to take care of her.\"\n\n\"No problem,\" Kent said.\n\nLaura then went through a series of awkward, ass-raising leg contortions in order to get her panties back on without showing the front of her body to anyone. Bailey, meanwhile, simply sat up on the edge of the bed and let the skirt flow down around her.\n\n\"My pants, my pants,\" Laura continued singing softly as she pulled them on and buckled them up.\n\n\"Orange juice!\" Bailey prescribed, directing her friend out the door with a pointed finger.\n\nWalking past Kent, she leaned over and kissed him gently on the forehead, whispering, \"It'll be a while, but I'll be back.\"\n\n\"I'll be here if you need me,\" he gave her a tilt of his head and turned his chair away as she left.\n\nShe intends to come back after taking care of Laura. I think she was telling me not to jerk off until then.\n\nKent shrugged, figuring he could afford to wait a while. He kept foremost in his mind his relief the girls had probably resolved the obstacle in their friendship.\n\nLaura meant to call Bailey's bluff. She intended to get Bailey to admit to something. But what? Bailey doesn't care about anything but paying off her debt. She gets horny, just like anybody else, but she's paying for it with a sore ass.\n\nWhat else does Bailey have to \"admit to\"?\n\nWell, at least Laura pulled it off. She delivered some serious spanking there, despite her own reticence, and that seems to have satisfied Bailey.\n\nHe shook his head, wondering how Laura had ever come up with such a ridiculous solution.\n\nYou can't just blame the alcohol. That girl's got some crazy shit going on in her head.\n\n=============================\n\n\"Drink the whole cup,\" Bailey said. \"At least it'll keep off the hangover.\"\n\n\"Okay, okay,\" Laura waved Bailey off as she sipped the juice. \"I'll be fine.\"\n\nYou'll be fine? Bailey stared at her friend, you just spanked me. How drunk did you need to be to do that?\n\nBailey locked the door and pushed Laura into her desk chair.\n\n\"Sit, drink,\" she instructed, then frowned.\n\nNow, I've got a problem.\n\nShe turned her back to the mirror she kept leaned against the wall and lifted up her skirt.\n\nThat's a lot of red along the bottom of the cheeks, and pink everywhere. The right side is much darker than the left. It's absolutely perfect and different from how I've ever looked before.\n\nBailey turned to look at Laura.\n\n\"I can't take you home like this,\" Bailey frowned and then sighed in resignation.\n\n\"Are you in a hurry?\" Laura's voice sounded hurt. \"You need to get back to Kent?\"\n\n\"No,\" Bailey waved her off. \"Not that, it's just...\"\n\nBailey, still holding her skirt up, turned her body side to side to get a better look in the mirror.\n\n\"Just what?\" Laura stood up and examined her friend's rear, clearly unsure of the point of the exercise.\n\n\"The real redness only lasts a little while,\" Bailey grimaced. \"It kind of goes away after that.\"\n\n\"You were still red from yesterday, though.\"\n\n\"Yes, a little,\" Bailey agreed, \"But it's reddest right after the spankings.\"\n\n\"So?\" Laura asked. \"This is the best time to admire your own butt?\"\n\nBailey rolled her eyes and looked at Laura.\n\n\"Hey, fine,\" Laura waved her hands defensively and unbuckled her pants. \"Me, too.\"\n\nA moment later, Laura had her underwear clad cheeks next to Bailey's.\n\n\"You are way redder than me,\" she agreed, \"especially on the right side.\"\n\n\"Well, Kent went after that side yesterday,\" Bailey pointed out pragmatically, \"And again today. Then you got me there.\"\n\n\"Sorry.\"\n\n\"No, it's fine,\" Bailey's spoke distantly, almost emotionless, like an art critic analyzing an old oil painting. \"Works out nice.\"\n\n\"I just have this little blotch low on the left side,\" Laura pointed out. \"Nothing nearly as exciting as yours.\"\n\nBailey inhaled through her nose and looked sideways at Laura.\n\n\"What?\"\n\n\"I've been...uh,\" Bailey pressed her lips together, willing the words to stay inside, but she couldn't pass up the opportunity she saw in the mirror. \"I've been recording things.\"\n\nLaura's eyebrows rose, then her eyes narrowed in confusion, \"Huh?\"\n\nBailey let the skirt fall back into place.\n\n\"With my phone.\"\n\n\"Pictures?\" Laura pulled her pants back up and stared at Bailey.\n\n\"Pictures,\" Bailey confirmed, her hands shaking with impatience. \"If I wait too long, the picture won't be as good.\"\n\n\"You're taking naked pictures of yourself, and keeping them on your phone?\" Laura's voice rose. \"Are you nuts? What if-?\"\n\nBailey cut her off with a slash of her hand, \"It's safe. I keep them in a folder that won't get to the cloud.\"\n\n\"That's still-\"\n\n\"And I make sure my face isn't in the picture,\" Bailey spoke with calm assurance.\n\nOkay, Laura knows now, Bailey felt a wave of relief, putting off the consequences of the revelation until later. So there's nothing stopping me from taking the picture.\n\nShe grabbed her phone off her desk, unlocked it and disabled its connections to the Internet.\n\n\"Alright,\" she handed the phone to Laura. \"As long as you're here.\"\n\n\"You want me to...?\" Laura trailed off, holding the phone with two fingers.\n\nBailey tilted her head with heavy sarcasm, \"You just spanked me. Don't pretend you're squeamish now.\"\n\n\"Trying not to think about it,\" Laura sang back and took a deep, theatrical breath.\n\nWith a quick glance around the room, Bailey made her decision and unlatched her skirt. She put her hands on her knees and turned her body so the light from the ceiling fixture lit her rear.\n\n\"How's that look?\" she asked Laura.\n\n\"Um, okay, I guess?\" Laura replied, gingerly holding the phone. \"You can't really see the bottom of your cheeks, though. It's too dark underneath.\"\n\n\"Oh,\" Bailey grimaced as she straightened. \"That is the reddest part.\"\n\nShe climbed up on her bed and went on her hands and knees.\n\n\"Whoa,\" Laura held up her hand. \"More of you than I needed to see.\"\n\n\"Yeah, yeah,\" Bailey waved her off. \"Just get a nice angle. Forty five degrees or so, so the camera's not right up my butt.\"\n\n\"Right,\" Laura sighed and moved off the to side.\n\nVisibly relieved, she found a reasonable angle.\n\n\"Does it show?\"\n\n\"Yes, Bai. It shows.\"\n\n\"Alright,\" Bailey urged her. \"Quick, quick.\"\n\nLaura snapped off two quick shots.\n\n\"Well?\" Bailey looked over her shoulder.\n\n\"Well, what?\"\n\n\"Am I in focus?\"\n\nLaura flipped to display mode and examined the pictures. \"Yeah, they're good. Look.\"\n\nBailey turned and sat on the edge of the bed, heedless of her nudity, and examined the pictures.\n\n\"Perfect, thanks,\" she complimented.\n\n\"You're not welcome,\" Laura replied, her heart not entirely in it.\n\n\"Oh, come on,\" Bailey prodded, pulling Laura in next to her on the bed.\n\nShe flipped the phone into selfie mode and pulled Laura into a hug, snapping a picture of their faces, side by side.\n\n\"Moments to remember,\" Laura smiled, then shook her head. \"This is the craziest night.\"\n\n\"Of your life?\" Bailey wondered. \"Crazier than Halloween?\"\n\nLaura paused a moment, her eyes glazing over, \"I think so.\"\n\n\"You had to think about it?\" Bailey stared into her fogged out eyes.\n\n\"Religious camps are pretty weird, too,\" Laura pointed out as she snapped back into focus. \"Gimme the rest of that orange juice.\"\n\n\"Really?\"\n\n\"Yeah,\" Laura sighed. She held her hands up in front of her face, palms touching but with the fingers of each hand bent away from the other hand's fingers at ninety degrees, \"But we're talking about two completely different kinds of crazy here. It's hard to compare crazies, okay?\"\n\n\"Drunken sexy crazy,\" she wiggled the fingers of her left hand, \"is nothing like preacher-shouting-at-you crazy,\" Laura wiggled the fingers of her right.\n\nBailey nodded, trying to understand her friend.\n\n\"Which crazy do you prefer?\"\n\nLaura inhaled deeply and sighed, \"Oh, hell. This one.\"\n\nStill on her feet, she unbuckled her pants and snatched the camera out of Bailey's hands, saying, \"Get up.\"\n\n\"What?\"\n\n\"Just get up,\" Laura ordered as her pants hit the floor.\n\nWith a shove of her hand on Bailey's hip, she got Bailey turned around and got her body positioned side by side, bare hip to bare hip, with her friend.\n\nWith the camera still in selfie mode, she held it out as far as she could and pointed it down at their cheeks.\n\n\"Oh,\" Bailey squeaked in surprise, \"if you keep your underwear on, it might be identifying.\"\n\n\"Ugh, fine,\" Laura said and slid off her panties. \"Okay, I think I have a good angle.\"\n\n\"Looks good,\" Bailey agreed.\n\n\"Crap,\" Laura said, unable to reach the spot on the phone that would force it to take a picture.\n\n\"It's alright,\" Bailey said, then called out, \"Smi-le.\"\n\nThe phone produced a clicking sound and the display froze with a picture of their four naked cheeks, redness and pinkness included.\n\n\"Here,\" Bailey said, as Laura pulled her panties back on.\n\nShe made quick work of cropping the pictures down to avoid any details that might indicate what room they'd been taken in, or any identifying edges of clothing. Next, she deleted the originals and moved the ones she wanted to keep well away from the backed up directories.\n\n\"Safe and sound,\" she pronounced and confidently turned her data connection back on.\n\n\"Better be,\" Laura buckled up her pants.\n\n=============================\n\nBailey and Laura had spent the better part of an hour hanging out in Bailey's room before they'd left. They'd said cheerful goodbyes when they'd headed out and Kent had quietly amused himself with a bit of online gaming while waiting for Bailey's return.\n\nHe spent the time trying to figure out what Laura had intended with her bluff.\n\nAnd 'bluff' is clearly the word, Kent realized, she had never intended to end up actually spanking Bailey. She was trying to get Bailey to admit to something.\n\nKent thought of himself as pretty intelligent, so he'd figured the 'something' in question had to do with Bailey's feelings for him.\n\nBut what 'feelings'? Bailey owes me money and I'm taking it out on her ass.\n\nHis heart chilled a moment when he made a small connection.\n\nIf Bailey and Laura 'plan' out these evenings, and they do, it means they talk about everything. That means they've probably talked about the other stuff Bailey and I have done together.\n\nAn image flashed into his mind: his semen spraying long, thick lines over Bailey's naked cheeks in the shower as she slapped his erection down on those cheeks.\n\nKent inhaled and controlled himself.\n\nBailey's coming back soon. Either she'll be horny or I'll have a load to blow on my own.\n\nThe fullness of his testicles aside, he focused on ferreting out Laura's purpose. She'd intended to make Bailey admit that the reason for her anger had nothing to do with the debt and her pride, but more about the relationship between Bailey and him.\n\nThis is complicated. Laura wants to be involved in this whole thing, but creating a relationship between me and Bailey -- where there isn't one -- might just mean she gets pushed aside. But she pushed Bailey -- tried to push Bailey -- into admitting it anyway.\n\nIt hadn't worked, and the failure of Laura's gambit hadn't surprised Kent. Bailey's reaction had matched perfectly with Kent understanding of Bailey and his place in relation to her. Faced with the inexorable logic of the transfer of spanking debt to Laura, Bailey had relented and paid off the debt.\n\nFor a humanities student, Laura has a chilling grasp of logic.\n\nKent would never, ever forget the tableaux of Laura taking Bailey over her lap and spanking her.\n\nShe went pretty hard, too, Kent recalled, the image of Dr. Frankenstein throwing a giant, double-poled switch came to mind, Something clicked over in Laura and she went after Bailey's ass with a vengeance.\n\nUpstairs, he heard someone unlocking the door, entering and then locking it again. Light footsteps came down the stairs and Bailey appeared at his door, flushed red from the cold. Standing in the doorway, she looked at him silently.\n\n\"You alright?\" he prodded gently.\n\nShe nodded wordlessly in response.\n\n\"And Laura?\"\n\n\"Good, too,\" Bailey breathed.\n\nShe's staring at my crotch, or maybe my hands, Kent noticed. Hard to tell, with my hands in my lap.\n\n\"You feel better about the whole thing?\" Kent asked, knowing Bailey must have sobered up a bit and had time to reconsider.\n\n\"It was the right thing to do,\" Bailey said. \"But it was weird anyway.\"\n\nKent smiled, \"It was weird.\"\n\nFinally, Bailey's flat expression faltered and she rolled her eyes, \"You loved it, you jackass.\"\n\n\"I did,\" Kent laughed. \"That's why I thought it fair to pay a dollar to watch.\"\n\nReally, I paid a dollar because I hope that makes you do it again, Kent admitted to himself, that's basic economics right there.\n\n\"Fuck,\" Bailey breathed out a sigh and slipped into the room, closing the door behind her. \"I can't believe she managed it.\"\n\n\"She looked pretty ferocious,\" Kent said. \"Really got into it.\"\n\n\"I know that,\" Bailey rubbed her cheek. \"It was my ass.\"\n\nShe moved forward and jumped into his lap, straddling him so she could feel his erection through two layers of denim. Kent felt all the air leave his lungs in surprise.\n\n\"Oh, good,\" she exhaled.\n\n\"Good?\"\n\n\"I was afraid you'd jerk off before I could get back,\" she explained.\n\n\"Oh,\" Kent put as much sarcasm as he could in his voice, reaching around her body and squeezing her cheeks. \"Maybe I did and I recovered. It's been half an hour.\"\n\n\"Like hell,\" Bailey retorted, then moaned as his fingers sunk in.\n\nShe let his fingers do the work of pushing her body into his, embracing him and pulling his head down into her throat. Kent nipped at the side of her neck, eliciting a gasp.\n\n\"Too much clothing,\" she murmured over his head, rotating her hips.\n\n\"Too bad you switched back to jeans,\" he replied.\n\n\"It's cold out,\" she retorted, jumping back off his chair.\n\nThe button on her jeans popped off and she stepped out of them, revealing the athletically curved blue panties she'd worn earlier in the evening.\n\nOkay, Bai, Kent thought, what's your plan tonight?\n\nOnce her jeans hit the floor, she started tugging on his.\n\nWell, I will be more comfortable without them.\n\nHe undid the buckle and stood up, letting her yank them to the floor. She pressed her body against his, her lips against his throat now, and nipped at him. Her right hand slipped between their bodies, cupping the lower part of his shaft, just above his testicles.\n\nKent groaned.\n\n\"What do you need tonight, Bai?\" he whispered over her head.\n\nShe moaned softly into neck, her breath slipping down his shirt and over his chest hair. \"I need you to spank me.\"\n\nAs she spoke, she squeezed him underneath and then stepped away.\n\n\"Just one dollar, though, right?\" she clarified.\n\n\"You make the mark,\" Kent spoke with his eyes closed.\n\n\"Right,\" Bailey breathed. \"Right.\"\n\nShe moved over to the board and made one tick mark, gratified to see Kent had already cleared everything else off and cut her debt down one hundred thirty three dollars.\n\n\"But here's the thing,\" she said as she pushed him onto his bed. \"I need... I need it. Okay?\"\n\n\"Okay,\" Kent watched her throw a leg over his body and straddle him.\n\n\"But I don't know when I'm gonna come.\"\n\nWhat's she getting at? Kent wondered.\n\n\"I don't... what do you want, Bai?\"\n\nBailey sighed, grinding into him, then fell forward so her body lay over his and her lips brushed his ear.\n\n\"I want to tell you when,\" she whispered. \"Don't use them up too soon, okay?\"\n\n\"O-oh,\" Kent blamed the slowness of his uptake on the diversion of blood from his brain. \"Are we making a deal?\"\n\nBailey lifted her hips and brought herself down hard on his erection, eliciting a nearly painful grunt from Kent.\n\n\"A deal?\" she asked. \"What do you want? Six instead of five?\"\n\nKent thought about it for a moment, but the desperate approach of his own orgasm cut sharply into his creativity.\n\n\"You say, 'please'.\"\n\n\"What?!\" she rose off his chest -- but not his groin -- and looked him in the eye.\n\n\"You can decide when,\" he explained, still under the ministrations of her hip motion, \"but you have to ask each time.\"\n\nBailey closed her eyes, issuing a whispered curse, \"Bastard!\"\n\n\"So?\"\n\n\"Fine!\" she rolled her eyes.\n\nKent gasped as Bailey lifted off his groin and turned her body around, presenting her underwear clad cheeks. She didn't mess around this time, centring herself on his erection and then pushing the head along her lips to her entrance.\n\n\"Oh,\" he gasped again, feeling that not-quiet-penetration.\n\nBoth of his hands clasped her cheeks, squeezing in time with the rotation of her hips.\n\n\"Oh, that's good,\" she replied, her hips a spinning top about to fall.\n\n\"Yeah,\" Kent agreed, his thumbs sliding under the edge of her panties.\n\n\"Spank me,\" Bailey said.\n\n\"Say 'please',\" he admonished.\n\nBailey took a deep breath and Kent imagined her rolling her eyes.\n\n\"Please,\" she spoke through gritted teeth. \"Please, spank me.\"\n\nHe could really only get at her right cheek with his right hand, and the way she kept their genitals grinding, he had no access to the lowest, reddest part. He did what he could, striking high and outside, the best part of his arm's arc leading there. A delicious crack echoed.",
        "\"One,\" she yelped. \"Please spank me.\"\n\nKent kept his left hand tight on her cheek while the right swung out and back again, cracking against the same part of her flesh.\n\n\"Two,\" Bailey replied in a lower pitch.\n\nShe kept moving, grinding, the two of them gasping and moaning as they approached their orgasms.\n\n\"Please spank me,\" she said again.\n\nHe took both hands off her and, even though he knew he couldn't spank as hard, used his left hand to swat at her left cheek.\n\n\"Oh!\" Bailey cried out, interrupting her rhythm in surprise. \"Three.\"\n\nShe got back into her gyration again, driving with much more fervour.\n\nHow far does she have to push the head of my cock inside her before we're having sex? Underwear or not, we're going pretty deep here.\n\n\"Please! Again!\" she called out, clearly having trouble forming words.\n\nHe slapped her right cheek, spurring her on.\n\n\"Four!\" she chirped, and her moan grew louder.\n\nThe squeaks coming from her throat rose in pitch as her hips put on a burst of maniacal speed.\n\n\"Plea-\" she gasped, and her body locked up, out of her control.\n\nKent felt it happening, knew what she'd meant to request and that her impending orgasm had interrupted her.\n\nHope this helps, Bai, he thought, and let her have one last hard crack on her right cheek before grabbing both of her cheeks tightly to maintain the pressure between their bodies.\n\n\"Ah!\" she screamed out, her body shaking uncontrollably before seizing up again.\n\nAfter several seconds of silent paralysis, Bailey's body relaxed.\n\n\"Fi-\" she gasped, then controlled herself, took a deep breath, and added, \"Five.\"\n\nBailey looked over her shoulder at Kent.\n\n=============================\n\n\"Did you come?\" she asked him.\n\nOh, my god, she wondered inside her head. What in the hell was that? I can't even remember my own name. He even knew to spank me when I couldn't speak.\n\n\"Not yet,\" Kent breathed back at her, his eyes wide with his own arousal.\n\nGotta do him. Gotta do him.\n\n\"Okay,\" she said. \"Okay.\"\n\nI wanna see him come. I wanna see his face when he comes.\n\nBailey turned herself around again and dropped back on him.\n\n\"Like this?\" she asked.\n\nHe nodded.\n\nWay too sensitive. Way too much. Can't handle this.\n\nThe sensations as she ground against him overloaded her, made her feel like drowning.\n\nKent put his hands on her hips, shifted her down a little, so her vagina met the lowest part of his erection.\n\n\"There?\"\n\n\"Yeah, there.\"\n\n\"Okay,\" she nodded and kept grinding him. \"Come for me.\"\n\n\"Uh-huh,\" he gasped, holding tight to her hips.\n\nI wanna see his face, wanna know what he looks like.\n\n\"Soon,\" he whispered.\n\n\"Kent?\"\n\n\"Yeah?\"\n\n\"Can you reach?\"\n\n\"Reach?\"\n\n\"My ass.\"\n\n\"Yea... yeah.\"\n\n\"One free one,\" she prodded him, feeling her own eyes light up as she glared at him. \"Right when you come.\"\n\n\"Oh, god,\" Kent's hand found her left cheek.\n\n\"Come on, come on,\" she urged him, knowing her genitals couldn't take the sensations much longer, but willing herself to survive until Kent reached his orgasm.\n\nA loud grunt came out of his throat and she felt his hand leave her cheek.\n\nOh, god, what was I thinking?\n\nHis face locked in a wide-eyed rictus of a man terrified of a great plunge over a waterfall. She felt his erection twitch first, the base of his shaft expelling semen into his shorts, and his hand came crashing down on her all-but-bare cheek, twice as hard as any of the other spankings today.\n\n\"Fuck!\" she screeched in surprise, but kept twisting her hips to milk him dry.\n\nHis cock surged against her, five or six solid twitches of ejaculation.\n\n\"Fuck,\" Kent sighed in agreement as his orgasm faded away.\n\nBailey disengaged the moment Kent seemed to be done, feeling a little sorry for her sore genitals. She fell sideways, her head landing on his shoulder.\n\n\"You okay?\" Kent whispered, a hint of apology.\n\n\"Yeah, it's fine,\" she assured him, only then remembering her full name. \"I'm fine.\"\n\n\"Good,\" he gasped again. \"I thought I might have been too hard.\"\n\nBailey smirked, \"If I couldn't handle it, I wouldn't have offered.\"\n\n\"Sure,\" Kent agreed. \"Wow. Alright.\"\n\nA contented silence lay over them for several minutes, both panting and recovering their breath.\n\n\"So,\" Kent started.\n\n\"So?\"\n\n\"Things are okay now? You and Laura?\"\n\n\"I guess so,\" Bailey offered. \"I can never be sure what she's thinking.\"\n\n\"But you're not angry anymore? About the two dollars?\"\n\nBailey nestled deeply into the crook his shoulder. \"I am definitely not angry anymore.\"\n\n\"Alright, then,\" Kent let out a breath of contentment. \"Then everyone is happy.\"\n\n\"Exactly.\"\n\nComfortably in his embrace, Bailey considered what she should tell him.\n\nHe deserves at least a little warning.\n\n\"You should, um, be careful with Laura,\" she ventured.\n\n\"I wasn't?\"\n\n\"Oh, you're doing fine,\" she assured Kent quickly. \"Just, in the future, you know?\"\n\nKent turned his head to look down at her and brushed her hair behind her ears, \"In the future?\"\n\n\"She's never had a boyfriend,\" Bailey tried to clarify. \"No one's ever... even... touched her. You know? Until you.\"\n\n\"Touched her? Like?\"\n\n\"Like anywhere,\" Bailey enunciated. \"Every place you touch her, you're the first one.\"\n\nGot it, buddy?\n\n\"Jesus,\" Kent cursed softly. \"Wait just a goddamn second.\"\n\n\"Yeah?\"\n\n\"She's never been touched, or kissed, or made out with anyone?\" he asked.\n\nBailey nodded against his chest.\n\n\"And then she came here and I spanked her? That's her first... thing?\"\n\nWhen you put it that way, it sounds bad.\n\n\"Well, yeah, I guess.\"\n\n\"Bai?\" Kent said. \"I... well, what's done is done.\"\n\n\"What's done is done,\" Bailey agreed reluctantly. \"I wonder how good a friend I'm being, though, now that you mention it.\"\n\nKent shrugged, \"That's between you and her, I guess. For me, what matters is that she chose it.\"\n\nKent has a point there, Bailey realized, I've told Laura about the boyfriends I had before I met her and she didn't seem nearly as interested. But we were drinking and I mentioned this... this thing with Kent, and then...\n\n\"She definitely did choose it,\" Bailey agreed. \"Enthusiastically.\"\n\nKent grunted.\n\nAfter a short pause, he added, \"I need a shower. You?\"\n\n\"I'm good,\" Bailey answered."
    ],
    "authorname": "xtorch",
    "tags": [
        "spank",
        "spanking",
        "please",
        "messy",
        "ejaculation",
        "orgasm",
        "counting",
        "pictures",
        "exhibition"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/two-hundred-dollars-ch-16"
}
{
    "title": "Hot Gay Masseur Seeking Role-Play",
    "pages": [
        "As far as role-play requests might go, this one seemed hard to pass up:\n\n\"Sorry, just had to hit your profile again and drool over your pics again,\" read the message from my new app buddy, HotMasseur4U. \"I own a massage studio over on Belmont. Would you have any interest in joining me there for some role play? Sunday around noon?\"\n\nWe'd chatted for a week or two, and already established that he liked my furry chest and ass, and I liked his fleshy cock and muscled legs and the panther tattoo that fiercely climbed the length of one thigh. We had a few friends in common, and we'd chatted enough for me to know he seemed nice, mischievous, funny, ready to get down.\n\n\"Hell yes, see you then and there,\" I reply, not quite knowing what to expect. He said the studio was closed on Sundays, so I imagined we'd be alone, but what exactly did he have in mind?\n\n\"A WARM WELCOME\"\n\nA few minutes before the scheduled hour, I show up to find the door to the spa locked, but he soon appears and lets me in, securing it behind us. Sexy, wearing a spaghetti strap tank, thin nylon gym shorts, more built than his pics suggested. \"Right on time for your appointment, follow me to the back and we'll fill out some forms.\" You know, businesslike.\n\nWe enter a room with a sturdy massage table set up and ready to go, the usual zen music and dim lighting and candles. He ushers me to one of two adjacent seats and picks up a clipboard with an official looking intake form, and a pen.\n\n\"Just a few questions before we start.\" How often do you get a massage? How long since your last one? Any particular area causing trouble today, that you'd like me to focus on? Are you looking for something light, or more deep tissue? Pretty routine stuff, and I'm thinking, this role play might end up being no more than a decent massage, maybe naked, but I guess that'd be fine.\n\nHe continues down the form. Then: \"Preference regarding condom use?\"\n\nNow that's something you don't hear every day from a masseur! I had to think quick, didn't want to act surprised or worried, and calmly replied: \"Your discretion.\" Damn, this is heading in a direction I like.\n\n\"That's about all I need. I'll head out for a minute so you can have some privacy while you take your clothes off. No need for underwear, if you prefer, since we're officially 'off-hours.' You can hang everything on that hook. Get comfortable on the table and I'll be back in a few.\"\n\nFuck! My dick starts to jump in my shorts. The door shuts and I race to peel my clothes off and hop on the table and settle in. Face down, I tuck my hardening cock between my legs, under my exposed hairy ass crack and heavy nuts, so it's the first thing he sees when he returns. My mind races, wondering how far he might take this?\n\n\"TEMPERATURE (AND COCKS) RISING\"\n\nHe returns, asks if the room is warm enough, am I comfortable. I can't see, but it sounds like he might be sliding off his shoes and peeling off his shirt. Then, I hear lotion being pumped onto hands, rubbing together to warm it up.\n\nHe starts to work it into my muscles, from calves on up. He spends a good deal of time with my glutes, and as he chats me up, I know (at least hope?) he's salivating over my furry ass. I relax and make no effort to conceal my exposed hole. \"Some of these muscles are a little tense, let me see what I can do to work this out.\" He kneeds my ass cheeks, over and over, strong but sensual, and his oiled hands casually brush the length of my now-throbbing boner, making me jump a bit. \"Sorry if that thing's in the way,\" I laugh into the face-towel, and he says, no problem, arousal is only natural, he runs into it all the time. One finger runs along the length of my crack, now beaded with sweat. Fuck!!\n\nThe strong hands, the warm oil, the deep rubs, all work their way up to my lower back, middle, and he moves around for better access to my upper back and shoulders. This is a nice, deep, firm massage and I'm enjoying it immensely. I'm face down in the toweled face rest, soon he's standing directly in front of my head. I focus on his bare feet and suddenly see his nylon shorts slide down his legs and hit the floor. Fuck! He steps out of them -- he knows I'm aware he's totally nude now, too. My cock is not only rock hard, but I can feel it leaking like a mofo. I'm a huge precumer, I love foreplay, and this is truly the hottest scenario I could imagine right now.\n\n\"I'm gonna spend a bit of time on your head and neck, people don't realize that's where we store a lot of our tension. I may guide your head slightly up and off the towel, just so you can benefit from some light movement and get a little circulation going ....\"\n\nWith that, he lifts my head up a few inches, and I'm greeted by the sight of his bushy, semihard 8-inch cock, directly in my face. He's completely and fucking beautifully nude. He looks down and smiles, and casually moves the swollen cockhead close to my mouth, and instinctively, I open, swallowing him whole. He massages the warm oil into my neck and scalp as I proceed to give him head. It all feels perfectly natural. He lightly moans, \"aaaah yes, relieve that tension\" and I feel his meat growing its way down my throat. I'm trying desperately not to gag, as he's got my head firmly in his hands. I'm not going anywhere! I relax my throat, moaning, and let him slide in and out as he cradles my head, lightly caressing my face, scalp, neck.\n\n\"GOING DEEPER AND DEEPER\"\n\n\"Very very nice, you're a very responsive client. Always validating for a therapist to know he's doing his job.\" After five minutes or so, he removes his dick from my mouth, cradles its length in his fist for me to admire, squeezes a little precum out of it and rubs it on my lips. I bury my face back in the cradle and sigh. I'm sad to see him pull out but eager to see what comes next.\n\n\"I think you might benefit from some alternative treatments I don't employ very often, let's see how you respond. Let me know if anything feels uncomfortable or painful in any way.\"\n\nWith that, he walks back around the table, returns to my legs and ass. He parts my legs slightly, and before I know it, I feel him climb up on the end of the table behind me. His hands are back on my butt, spreading my cheeks apart, and he fingers my hole. \"How's this? I find this is a great way to ease tension, a good exchange of male muscle energy. Is this OK?\" Goddamn, not only is it OK, it's the hottest fucking massage I've ever imagined! And holy hell, now his tongue's working its way up my crack? Lingering on my fucking hole, probing!? I'm going insane with lust and desire, and it feels like he's just getting started.\n\n\"Yeah,\" he says, coming up for air, \"something told me you needed a very customized massage like this.\" He returns to eating me out, rubbing his goatee deep in my hairy, sweaty, wet crack, and I'm loving it, all while his oiled hands continue to kneed my ass, glutes, hips. Jesus! I raise my hips slightly which I know from previous rim sessions with others, allows a buddy to get in even deeper, and I work his tongue further into my hole.\n\nHe lifts his torso and moves a bit further up the table, now pretty much on top of me, quickly shifting his hands back to my upper body, working my shoulders and neck again. Damn this dude's got some moves. \"So ... I want you to take a deep breath now, then exhale. Next up is kind of an advanced maneuver: to keep my balance, I need to root my cock inside you. I trust that's OK.\" Without hesitation, his cock head, dripping with precum, targets my now soaking wet hole, doesn't wait for my approval, just fucking pierces me. I wince just slightly but brace myself for what I know is coming next: the slow and fucking fantastic entry of his entire 8 inches. Fuuuuuck!\n\n\"Keep breathing. In and out. That's it. Just relax and don't tense up. There you go, perfect. Absolutely perfect.\" His raw cock is locked deep inside me, and I squeeze it with my ass muscle, which makes him moan. I squeeze again, surely drawing more of his precum. Softly, he sighs, \"fuuuuck ...\" but doesn't lose a beat working on my massage -- his hands expertly continue to work my upper back, my arms, my neck. With each movement his dick moves in and out, just slightly.\n\n\"See how that works? Once I'm grounded inside you, the session is more effective for both of us, and I can reach those hard to reach spots. How's this working for you, OK?\" Oh, hell yes, I answer, do this as long as you feel we need it.\n\n\"That's the idea, and that's one nice thing about having a client in during off-hours, no need to rush anything for the next person coming through the door. We can take our time and work on a treatment that suits you best, no matter how long it takes. Let me know if I've hit any areas where you need any extra attention.\"\n\nHis dick throbs, it seems on purpose, so I give his cock another tight squeeze with my ass muscle. \"Hehe, now that seems like a spot we both think deserves some extra attention!\" He picks up the pace, withdrawing his cock a few inches, burying it back in, we're headed fast into a full-on traditional fuck right now, and both loving it. I arch my lower back a bit, allowing him another inch or so entry, and he moans, dropping the provider-patient formality for once, \"this is suuuuch a sweet tight raw hole, dude. I'm fucking loving this!\" He continues to slowly, sensually penetrate me. His breathing picks up, a few beads of sweat drop from his brow to my back, and I can feel him shudder a bit, building. I know he's starting to cum!\n\n\"Fuck, dude, I can't take this anymore. Stay put and let me finish you off good!\" He quickly pulls out his raw meat, slick with precum, and I'm temporarily disappointed that he's not going to plant his nut in me. But he surprises me, splashes one thick spurt of cum directly on my hole -- says, \"damn, I love seeing that evidence before I finish off!\" -- and plunges back in, deep, confident, pinning me to the table and impregnating me with what must be seven, eight spurts of his intense hot seed. He trembles with pleasure, stays inside me and resumes massaging me, reaches down to lick my neck and ears, once again 100% attentive to my needs, and I maneuver around to kiss him.\n\n\"Duuuude, that was hot as fuck, thank you!\" he says, slowly removing the anchor of his spent cock from my wrecked ass. He leans down, parts my cheeks again to inspect his breeding, and gives me a couple of quick laps of his tongue, licking his juice out of my hole. He fingers me again, deep, says he can't believe how full of his cum I am, removes a fair bit of it and grabs my now aching, throbbing cock.\n\n\"Let me give you the proper finish a session like this deserves,\" and with my ass in the air, he pulls on my downward facing boner, starts edging me, adding some massage oil to his cum and quickly bringing me to the boiling point. Three strokes, two strokes, one final stroke does me in, I yell out -- briefly mindful and thankful the office is closed for the day! -- \"holy fuck, dude, I'm cumming!\" I shoot my hot first spurt of cum into his waiting fist, but before I know it, his mouth is wrapped around my cock head to swallow the remainder: five more spurts of my thick cum shoot down his throat! He won't release my cock head till he has every last drop, and I can sense him swallowing till I'm absolutely spent and panting on the table. He leisurely licks my cock clean, along with my sweaty nuts and ass crack. So fucking hot.\n\n\"Careful not to move just yet, you need to come down slowly after an intense session like that. I'm going to spend another five or ten minutes lightly caressing you, from head to toe, so you can decompress. Just relax and close your eyes and enjoy it.\" My body releases a final few post-ejaculation shivers, and I settle in to his closing services. This guy's insanely hot, definitely into providing pleasure, and I pray I get another session -- role play or not -- with him soon!"
    ],
    "authorname": "HairyChicagoOtter",
    "tags": [
        "massage",
        "nude",
        "bareback",
        "hairy",
        "male",
        "roleplay"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/hot-gay-masseur-seeking-role-play"
}
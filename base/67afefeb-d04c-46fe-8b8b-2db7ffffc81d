{
    "title": "Altered World Ch. 01",
    "pages": [
        "All characters are over 18 years of age. This is a work of pure fiction.\n\nThis is merely the beginning of what should be at least 5 more chapters, possibly more.\n\nAll the women in this story are fictional, but the player characters are characters that were created as they are, complete with clothing (or lack thereof) by women I have played tabletop games with in reality.\n\nSend me feedback if there is a gamer girl fantasy you'd like to see written. Please vote and let me know if you like it\n\n---------------------------------------------\n\nMike Powers was kind of bummed. He had wanted to go to the big Con going on in Atlanta, which all of his friends had gone to, but his boss at the hobby shop had decided HE was going this year. With Mike's friends. And Mike got to stay and mind the small shop and run the games for anybody who might show up. On a freaking Friday. Maybe he'd hit the bar after work.\n\nYay. All of the regulars were in Atlanta with his asshole boss who had previously told Mike he would be allowed to go. A full weekend of every tabletop game imaginable. Games that Mike could play, instead of having to run himself for the enjoyment of others.\n\nBrian, his dickhead boss, had joked that he would be getting all the gamer girl tail that Mike would miss out on. What a putz.\n\nSure, some of the women there might want to hook up with an overweight male chauvinist pig that smelt like sour milk and ass, but Mike really doubted it.\n\nAll of Mike's \"buddies\" shrugged and said \"hey, Brian's gonna cover the hotel, and he knows some strippers! See ya later, bro\" and just fucking left him. Nevermind that Mike was the one who had made all of their reservations, plans, and mapped the route to get there. Nevermind that Mike's connection with the Con organizers had scored them all free passes. Some friends. Fuckers.\n\nMike sighed. He missed Karynn. His childhood friend who had become his girlfriend when he came home on leave from the Navy the first time when he was 19. Everyone in their neighborhood had laughed at their \"surprise announcement\" that they were dating, with responses of \"fucking finally?\" and \"no more puppy dog pining from either of you?\"\n\nKarynn was his everything. Smart as all get out, pretty, with an athletic toned body that would send a thousand ships to war. She had hair black as a moonless midnight sky, deliciously perky breasts, just enough to fit his hands perfectly, a slim waist leading to slightly flared hips and a rock hard ass that absolutely popped.\n\nAnd she was a nerd like him. Whenever he played a new game, she was always right there to learn it and play with him. She gravitated towards whatever version of a wild elf the current game had, or something suitable elfin if the game was Sci Fi or urban fantasy.\n\nKarynn and Mike were supposed to drive up together before Brian's sudden announcement that Mike had to stay. She had said she was bringing her elf outfit to wear just for him. Fuck. Now he would be moping AND horny for the whole weekend.\n\nMike hadn't intended to try to pick any of the ladies up, obviously, as Karynn was at the Con, too. He just REALLY wanted a chance to PLAY instead of running the game. A job running role playing games for pay had sounded great at the time, but it soured quickly.\n\nHe also wanted a chance to play with and make love to Karynn for a full weekend without having to worry about Brian calling him in to cover or play an unannounced game for unappreciative jerks.\n\nWhen people had to pay for a game master, they expected everything to go exactly as they wanted, not as how the dice would normally determine. And some of the players were truly obnoxious. Like it was Mike's fault that Gary rolled a 1 and got Tom killed by goblins.\n\nMike really only kept this job because of Brian's brother, Derrick. Derrick was Brian's partner in the shop, and made sure Brian paid Mike good money, since Mike was the one who kept the shop in the black. Mike ran the wargames tournaments, ran the card game tournaments, and ran the RPG games for the customers. He handled restocking and ordering product from the distributors, and had good personal relations with all of their reps from the various companies.\n\nHell, recently, Mike had been getting feelers from some of the reps to see if he might be willing to either relocate to work for them, or run his own shop locally. They knew Brian, and really didn't like him, or his abrasive superior attitude.\n\nBrian played on his phone, looked at porn on the shop computer, and hit on every customer with tits that walked through the door. He drove customers away with his shitty attitude, and it felt to Mike like he was trying to keep his customer base as small as he could.\n\nBefore Mike had come along, the shop was kept open only by money from Brian and Derrick's dad, who was himself a business partner of Mike's girlfriend's dad. They ran a string of drug and alcohol rehab clinics with the main location just 3 miles from the shop.\n\nMike had recently found out some other stuff about Brian, stuff that could put him away in prison for a long time if it got out. Out of respect for Derrick, however, he kept quiet. Derrick knew his brother was a complete fuckup, but he had promised their Mom he would take care of his little brother just before she had passed away from cancer.\n\nMike was 23, with short sandy blond hair, and was decently built. He had decided when he got out of the Navy that he would at least continue to exercise and be able to socialize so he wouldn't be the stereotypical nerdy gamer. He WAS a nerdy gamer, just not every hour of the day. He had the build of a swimmer, stood 6'2 and weighed 175 lbs.\n\nHe went out regularly with his friends from the shop, and a lot of them had started bringing their girlfriends along, too, after the games finished. It lets them get their geek time in, then satisfy their girls with some standard socializing.\n\nAll of the guy's girlfriends had become friends, as they all lost their men to the games one or more nights a week, and they had started hanging out with each other on those nights, and formed their own circle.\n\nSome of them had tried to get involved in the regular game nights at the shop. Mike always did everything he could to make them feel welcome and tried to help them enjoy the game, and was usually the only one in the shop who wasn't trying to sniff their panties while they sat at the table.\n\nNot that he didn't appreciate each of them. They were all pretty in their individual ways. He liked to look, but never felt the need to hassle them when they were trying to have fun. He'd have treated any of these women 10 times better than the asshats they were with, but that was just his opinion.\n\nJan, 31, was a big woman. At exactly 6 feet tall and over 220lbs, she carried her weight well, had enormous breasts (bigger than Mike's head), and a big ass that never quit. Her face was very pretty, with blue eyes, and she always wore makeup that did well to highlight her natural beauty. Her hair was natural blond and always shone, as it hung down to her amazonian ass. She was the most boisterous of the women.\n\nMarcy was a skinny redhead, 21 years old, with freckles everywhere you could see skin. She was 5'5, and weighed 110 at most. Her small A cup breasts were never hidden by a bra, and she had a small, pert butt that was really only evident when she wore yoga pants. Sometimes described as plain looking, she was slight and willowy, with a hint of innocent mischief always visible in her green eyes.\n\nThere was exotic Leilani. She was a short woman of Hawaiian descent, 19 years old, standing at a towering 4'6. She was called chubby by the assholes in the group, but Mike preferred to think of her as voluptuous. At 115 lbs, she had C cup breasts that looked huge on her short body, and a cute little tummy bulge, with hips that flared out to a delicious firm ass you could roll dice on and not worry about them falling off. Her hair, like her eyes, was a deliciously dark chocolate color, tightly curly and always shiny. She loved to dance for everybody, and was really good at it.\n\nAlicia was a gorgeously athletic black woman, who could have easily been a cheerleader in college if she chose, but preferred her Marine Biology courses and a strict daily workout routine. She was 21, stood 5'7 and was 110lbs, with beautiful brown eyes. Her B cup breasts were always covered by a lacy black bra visible through the tight white shirts she always seemed to paint on, and had a big muscular ass she always displayed in her yoga pants. She kept her hair in 4 tight braids that twisted back across her scalp and hung off the back of her head.\n\nAnd lastly, there was Kim. She was 24, and had hair dyed a deep blue. She was 5'2 and 115lbs. And most of that was in her D cup tits and her big, pouty lips. She had a decent ass, a pretty face with eyes almost as blue as her hair, and always looked like she was fucking Mike with her eyes, but had a terrible stutter, and so would never really talk to him. She did all of her game communication through notes, which worked, as Whispersong the thief would hardly ever speak and ruin the mystery she had around herself.\n\nOf course, the other guys almost always ruined it when the women showed up to play. Either their man would try to assert his nerdy dominance over her and refuse to let her speak, or he would try to play her character for her, or the other guys would horndog her and try to impress her away from her boyfriend. It almost always wound up being a one night attempt on the woman's part.\n\nThe exception was Karynn. She showed up to every Wednesday night session, to play her wild elf archer, and she spent the whole night pointedly ignoring Brian whenever she played. She didn't like him, she told Mike. He had hit on her constantly since their dad's went into business together.\n\nMike was lamenting his lost weekend plans and considering locking up early, since he had seen one customer in the last five hours, and was generally trying to avoid having a pity party for himself, when the door chimed as it opened.\n\nIn walked Jan, Marcy, and Kim. Jan had a big grin on her face, while Marcy Dashed to the miniatures section and started pulling out an assortment of pre-painted minis. Kim smiled at Mike shyly before dropping her eyes and hugging herself.\n\n\"Hey, Mike! Busy night tonight, huh?\" Jan asked.\n\n\"Oh, yeah. One customer. Made a whopping $7. Today's electricity cost more. I don't know why Brian made me stay to keep the place open,\" Mike replied.\n\nKim mumbled something, but when Mike asked her to repeat it, she shook her head and blushed, refusing to speak more than a perfectly insult directed at Brian.\n\n\"H..h-h-he's an a-a-asshole\" she stuttered softly, then blushed.\n\n\"So...\" Jan started, \"if it's not a hotbed of sales right now, wanna shut down and come hang with us? We all chipped in and bought a new game tonight. Altered World. And we all bought new dice for it. Want to come run a game and have some beers with us? We'll even provide the beer!\"\n\n\"Ah, what the hell,\" Mike said, \"why not? It's boring as hell here, and I love hanging with y'all! Sure, let's go!\"\n\n\"Awesome! We'll all meet up at my place. Alicia and Leilani are getting the beer and food. Wanna ride with us?\" Jan was excited to play.\n\nShe had originally been part of the gaming group until she met her boyfriend and introduced him to the group. The rest of the guys quickly went from being Jan's buddies to treating her as just another girlfriend hanging around and keeping the guys from their game. She really missed throwing dice.\n\n\"Well, since my car is in the shop, and you live a bit far away to ride my bike,\" Mike replied, \"I'd love to ride with you ladies.\"\n\nHe brought his bike in and was in the process of locking up the store when Marcy came up with a double fistful of minis.\n\n\"Mike, can we use these for tonight? We'll bring them back, but it might help to have minis to use. There's one for each of the characters we have, and more for any NPCs or monsters we might need. Please?\" She asked.\n\nBrian would have a shit fit normally if they took anything out of the store for personal use. Even minis that cost less than $1 each. Fuck him.\n\n\"Sure, why not?\" He answered.\n\nMike also grabbed map boards and terrain pieces, all the stuff he normally used to set up games that his players always seemed to like. He didn't know yet what this new game was, but he figured he might as well be prepared.\n\nJen handed Mike the new rulebook to read over while they drove to her place. In the passenger seat, he was reading while Kim leaned up behind him from the backseat to read over his shoulder.\n\nThe scent of her shampoo and the feel of her breath against his neck meant Mike was having trouble focusing on the words in front of him.\n\nJust because he wouldn't cheat on Karynn didn't mean he couldn't be turned on by someone else's actions. He was just in control of himself enough to not do anything about it that would jeopardize his relationship.\n\n\"Welcome to The Altered World. Where players become powerful adventurers with the ability to alter realities to their whims. This book is compatible with any existing game system you might be familiar with, only adding 2 new game mechanics: Alter Perception, and Alter Reality. These are run as skills that can be used in almost any of the game's encounters, be it combat or roleplay.\n\n\"Prepare to see your world changed as The Altered World changes your gaming world, and who knows, possibly the living world, too, as your players see fit!\"\n\nMike chuckled. He'd seen some of the knockoff gaming products before, some small group of guys tossing something together to try to make a few bucks off the gaming community. Some were decent, others were crap. He'd give this one a try, and if it was fun enough, he'd see about ordering a copy for the shop.\n\nOddly enough, though the print quality and artwork were very good, there was no publisher information. Just a phone number to call for ordering information for other sourcebooks and accessories such as dice.\n\n\"Where did you say y'all bought this, Jan?\" Mike asked curiously.\n\n\"We found it at the weird corner booth at the flea market. You know, the old guy that leers at all the women and offers discounts if we show our tits? We all flashed him our tits and got the game and dice for each of us for $20, instead of $120\" Jan laughed.\n\n\"No. Sorry, I haven't been to the flea market in a couple of years. I might have to go check it out, even if I don't have any tits to flash for a discount,\" Mike laughed, thinking that was one lucky old man.\n\n\"He has all sorts of stuff. Tabletop games, dice, posters, even some old hot nudie paintings on velvet. He's weird, but he never goes further than asking to see our tits. It's a harmless way for us to get cheap gaming stuff, and unlike Brian, he won't actually try to make us fuck him for discounts,\" Marcy added.\n\n\"Wait, he fucking does that?\" Mike demanded.\n\nFucking Brian was going to be the death of his own store. He had all of the people skills of an over ripe Durian fruit, and was just as pleasant. He'd cost himself so many customers over the years.\n\nKicked people out or banned them because he thought they were gay, or he didn't like their shirt, or their cologne, or they wanted to play games he thought were lame. Exactly the opposite of someone who wanted to actually make money.\n\n\"Ugh! Yeah. He's tried to get each of us to fuck him at least once. We stopped coming in when you're not there because he likes to try to feel us up, too,\" Jan provided, \"he's even gotten our boyfriends to try and talk us into threesomes.\"\n\n\"Fuck. I knew he was garbage, but I didn't know he was THAT bad. I'm sorry, ladies. I'll talk to his brother and see if we can't have a family intervention to keep that shit from happening again,\" Mike offered.\n\n\"Don't bother, Mike. Nothing any of us, or Derrick, for that matter, says or threatens changes it,\" Marcy said,\"if there was another store with someone like you in it, we'd be there instead.\"\n\nKim nodded vigorously.\n\n\"Honestly, Mike, we only even show up to the bar with you guys because you're there and we can have good conversation. The last time we all tried without you, and just our boyfriends and Brian, the whole night was just them comparing our tits and asses, and trying to talk us into an orgy,\" Jan said angrily.\n\n\"Yeah, dude. So...how about we change topics for now, as we're just getting ourselves more and more pissed off,\" Marcy suggested.\n\n\"Alright,\" Mike nodded, \"what are we looking at group wise for characters?\"\n\nHe needed to know what people were playing to set up an adventure they would enjoy. He didn't have time to get a full campaign planned, but he could at least get a little prepared before he winged it for them tonight.\n\n\"We're just going to use characters we already have made up,\" Marcy said, \"Jan has her busty barbarian Gudrun, Kim has her elven thief Whispersong, Leilani is a halfling bard named Penny Pigtails, Alicia is a Dark Skinned demonling mage named Clarissana, and I'll be running my Human cleric of the goddess of love, Marciella.\"\n\n\"Alright,\" Mike said, beginning to get the beginnings of an adventure idea as he continued rifling through the book.\n\nHe figured he would give them a murder mystery in the large city of Sandalwood. There was already a small premade adventure for it in the back of the book. Depending on how the night went, he'd work up a full campaign for them.\n\nHe looked up the rules for the 2 new skills, Alter Reality and Alter Perception. Either could be used almost at will, but the rolls always required a flat roll of the 20 sided die and required at least a 17 to succeed. A roll of 1-3 would have the exact opposite effect of what was desired.\n\nAlter Reality could be used to change the physical world or affect it, and Alter Perception could be used to change what a person saw, believed, or thought.\n\nSo, they were powerful, but the high unmodified roll required made it unlikely that it could be used to completely screw the game at will. And it was so simple it really could fit into almost any existing game world of any genre.\n\nDespite coming close to being burned out from running so many games, Mike was looking forward to a group of all women. He was tired of trying to tell chubby geeky dudes it wasn't his job to fulfill their sexual fantasies in tabletop games. It was weird and awkward, and no matter how much he tried to steer the games back on course, the smelly fuckers always wanted to roll dice to try to fuck every female character in the game.\n\nAs they pulled up to Jan's house out in the suburbs, a ranch style on 5 acres of property her parents had left her, Kim leaned forward and put her mouth next to Mike's ear and whispered to him.\n\n\"Thank you, Mike. I've really wanted to play with you again for a while now!\" She said, whispering and singing were the two ways Kim could talk without her stutter severely hampering her speech.\n\nHer proximity, her scent, and her whispered breath in his ear made it so Mike needed to hold the gaming supplies in front of him to hide the tent that had almost instantly formed. Each of these ladies had a boyfriend. And even if he thought they weren't treated properly, Mike wasn't the type to pursue a woman who was attached, even IF he had been available right then.\n\nBut the ladies liked to flirt with him, and it was always harmless.\n\n\"It's my pleasure, Kim. I've wanted to be able to play with each of you, as your characters always have so much more flavor than any of the guys at the shop. I'm looking forward to a night of actual role playing instead of just one fight leading into the next,\" Mike replied earnestly, trying to get his dick under control.\n\n\"Oh, I'm sure we all have better...flavor...than our dumbass boyfriends,\" she whispered again, before blushing and looking to the ground.",
        "That did NOT help Mike get himself under control.\n\nJust then, Leilani and Alicia pulled into the driveway, honking the horn of Alicia's car. There was a load of beer, some large glass steins, and a whole back seat of various foods, some healthy for Alicia, and a ton of snack food for everybody else's game night snacking.\n\nThe group got all of their game night supplies unloaded into the house, and Mike took a few minutes to shower before the game started, since he had biked up to the shop and Brian had turned off the AC while he was out of town for the weekend, despite telling Mike he had to pull 10am to Midnight shifts at the shop for the 3 day weekend, and it being the beginning of summer.\n\nOnce Mike was out and in clean clothes, Jan made sure everybody had a big mug of beer. It was her house and she didn't mind Leilani drinking, as the ladies were all planning on a sleepover after the game, and the closest neighbor was half a mile away.\n\nMike got the game started, brought the characters together in Sandalwood, and set up the murder the group was to investigate. It was all going good. The ladies were MUCH better about staying on topic and playing the game. Everybody was having fun, especially Mike.\n\nThere were sexual jokes and tons of innuendo tossed about, but when it was done by five sexy smart ladies, it was 1000 times better than a room full of sweaty dudes breathing heavily because of sex jokes. Mike was thinking it was time to drop the usual losers and make this his main gaming group.\n\nHe DID notice that whenever one of the ladies rolled any dice, they always came up within 3 numbers of the max, or 2 numbers for the 6, and 1 number for the 4 sided dice. He went with it anyway, since this was about fun, and not being a rule monkey.\n\nThen his phone dinged with incoming messages. From Brian at the Con.\n\n\"Excuse me a moment, ladies. It's the asshole, so I gotta make sure it's nothing important\" Mike apologized as he checked his phone.\n\nBrian: Hey, loser! We're having a blast! Shame you couldn't make it!\n\nMike: Yeah, shame. I'll make it next time.\n\nBrian: Hey, guess who we ran into! And who REALLY likes gangbanging for a little nose candy!\n\nA movie file pinged into his incoming. It was Mike's girlfriend, Karynn. She was dressed in the elf costume Mike loved to fuck her in. The next couple of minutes shattered Mike's world.\n\nBrian must have been taking the video, because he was the only one not in it. She had a guy in each of her holes, and was jacking off one with each hand, and her eyes were glazed in a drug induced haze of lust.\n\nShe was moaning and shuddering with her eyes rolled back as Jan's boyfriend thrust his cock into her mouth. She had Leilani's and Marcy's boyfriend's cocks in each of her hands, jacking them furiously as they pumped her fists like they were pussies. Kim's boyfriend was underneath her buried to the hilt in her cunt while Alicia's man was behind her, thrusting rapidly into her ass. They all laughed and hi fived before each of the douchebags pulled out and came on her face, tits or ass.\n\nThe guys all joked that Mike was such a loser and had no idea they were banging his slut, or how many times they had done it while he was working, and that their dumb ass girlfriends had no idea what they were doing. They all bragged about tag teaming her every time Brian hooked her up with more coke, as that was the only way she could pay for her habit.\n\nShe was begging for them to come back and fill her holes again since she hadn't cum yet. Her voice pitched to a high needy whine as she begged for either more coke or more cock.\n\nA small mirror with a line of powder was pushed in front of her, and she greedily snorted it, before grabbing the nearest limp cock and wantonly attempting to suckstart it back to life.\n\nShe stopped long enough to look at the cameraman and say \"Thanks, Brian. You wanna be my daddy and fuck my little whore asshole again? You guys can fuck me all weekend, and I'll go home and make my loser boyfriend suck your stale cum out of my holes! Wanna help make him my little sissy cuck?\"\n\nAnother movie file was sent. Brian and Karynn, his now apparently ex girlfriend, laughing as she wiped powder from her nostril and inhaled it again. She turned and bent over and let Brian stick his cock in her ass. She laughed as she told him she'd given Mike the story about not being able to wait to spend the weekend in Atlanta. They were in his bed. Brian. Fucked. Mike's. Girl. In. Mike's. Bed.\n\nMike knew the day. Brian had listened to him talk about how excited he was to spend the weekend with her at the Con, then left to go get them lunch. He'd said he had gotten caught in traffic behind an accident.\n\nMike was livid. If Brian had been there, Mike likely would have choked him out, probably beyond unconscious. He seethed as Brian messaged him again.\n\nBrian: Man, your girlfriend is one hot fuck! She loves my cock! Dude, she blew me and let me fuck her ass before I gave her to the guys! I can't believe you're such a loser you let a hot cunt like this get away from you! She's a complete whore! We'll talk about your new sissy duties when I get back, bitch boy!\n\nMike: You do realize when you get home, I am going to beat you until your brother can't recognize you, right? I will make it my mission to destroy your life, and the lives of those fucking douchebags you're with. I hope nothing happens to your store while you're gone!\n\nBrian: Bitch, anything happens to my store and I'll fuck you up six ways from Sunday! My store better be pristine or I'll fuck your bitch's ass in front of you and make you suck my cum out before I make you suck me clean!\n\nMike: You need to take this to heart. If I ever see you again, I am going to fuck you up so bad you'll never walk again. Don't ever contact me again. I'll think about whether your shop would look good with a gasoline bath while you're gone.\n\nBrian: Fuck you, you sissy bitch! You run my store or I'll fuck you and your little bitch up so bad, neither of you will ever be able to sit again!\n\nThen Mike blocked the number, stood with his hands shaking for a moment, nostrils flaring. He felt destroyed inside. He wanted to die, right then, right there.\n\nHe screenshot the conversation and forwarded it to Derrick, along with the videos and a message that they needed to talk. It was late enough that he knew Derrick would be in bed, so he wouldn't get a response until morning.\n\nThen he messaged Karynn and told her to call him in the morning once she woke up. He mentioned nothing about the conversation or the video. We wanted to. He wanted to scream and cry and yell. He wanted to demand answers. But he needed to be calm when he spoke to her.\n\nOnly after the messages were sent did he allow his composure to slip. He didn't know how he kept it together that long.\n\n\"FUCK!\" Mike yelled, tossing his phone onto the table and walking away, tears in his eyes. Rage clouded his face, and his fists clenched in fury.\n\nThe ladies all jumped when he yelled, and looked at him in confusion and worry as he walked out of the room, then out of the house and screamed at the sky when he was outside.\n\nHe realized he'd left his phone inside and unlocked when Jan and Kim came out and hugged him from both left and right. Jan was crying, and Kim looked ready to axe murder someone.\n\n\"Mike, we saw the videos. We're so sorry,\" Jan said, sobbing into his shirt.\n\nNobody said anything else for a few minutes, they just hugged with Mike in the middle, all trying to make their hurt and anger go away.\n\nFinally, they pulled Mike back into the house. Leilani, Marcy and Alicia were all in various states of distress, or pure fury, in Alicia's case.\n\n\"Well,\" Jan said after a while, \"I guess we're all single, now.\"\n\n\"F...f...f-f-fuck! D..d..douche b-b-bags!\" Kim cried.\n\n\"I'm going to cut that cheating motherfucker's dick off and make him eat it!\" Alicia seethed.\n\nA chorus of \"yeah\" circled around the room, sniffling and crying still happening.\n\nMarcy picked up her 20 sided die, and with a sigh, rolled it.\n\n\"Alter Perception roll. None of us care about those useless fucking cuntbags\" she intoned emotionlessly. Like a die roll could help them not feel the hurt and betrayal.\n\nThe die stopped on 20.\n\nThe sniffles and crying stopped. Mike felt the anger and hurt drain from him like a glass being emptied into the sink. He really didn't care if the whore banged his boss and former friends. Well...he cared, but the ache was dull and muted.\n\nThe ladies each had the same look on their faces. None of them cared. He still did, but he had been with Karynn for four years. But it was over now.\n\nThen, shock.\n\n\"Holy shit!\" Mike said, \"did...did that role just...make us feel better? Did it...affect the real world?\"\n\nStunned, Marcy looked at her die, shaking her head.\n\n\"It doesn't work that way, does it?\" She asked, \"it's just a game! It can't affect the real world! Right?\"\n\n\"One way to test it,\" Leilani said, picking up her 20 sided die.\n\n\"Alter Perception roll: Kim doesn't stutter anymore,\" she said, rolling the die.\n\nIt came to a stop on 19.\n\n\"Kim? Say something,\" Jan said.\n\nBlushing, Kim opened her mouth to speak, stopped in fear, then tried again.\n\n\"I hope Mike can hear me talk without stuttering,\" she said, rushing, as the words came out clearly and perfectly.\n\nHer eyes opened wide, a gasp escaping her lips, as she cried out in relief and joy.\n\n\"Passionately pleasurable pulsating pussy pounding plump pink penis!\" She screamed out, a look of wild joy as she smiled. Apparently, she had a dirty mouth.\n\n\"What the hell?\" Alicia asked, \"is this really happening? What else can we do?\"\n\nShe picked up her own die and prepared to roll it.\n\n\"Alter reality roll: we all take on the forms of our characters for the night\" she said, and rolled the die.\n\n\"20!\", Exclaimed a black skinned woman with 2 curved horns and a prehensile leathery tail sticking 3 feet out of the back of her rather brief \"robes\". Lots of skin showed, and her hair had turned a dark shade of red that flowed down her back in a long braid. Her tongue was forked, and her legs ended in small cloven hooves.\n\nThe sides of her large, dark tits jutted from behind the abbreviated cloth halter top, and the bottoms were more robe themed loin cloth that only covered the crack of her ass and crotch, allowing plenty of supple cheek to show.\n\nShe had turned into her Demonling. She was even more exotically beautiful than she had been before the roll.\n\nArrayed before Mike was a bevy of exotic fantasy delight. Alicia as her Demonling. Beside her was a 6'3 vision of Nordic beauty and raw strength wearing an abbreviated set of fur lined leather halter top and bikini briefs must be Jan's barbarian, Gudrun. The halter did a poor job of containing what must have been at least G cup tits, as she was fondling and rubbing them in ecstatic delight.\n\nNext was the blue haired petite elf, standing 4'8, dressed in a leather corset, with diaphanous black silk sleeves and very tight black leather pants that appeared to be sprayed on to display a distinct camel toe and glorious ass. Her ears were long and pointed, and her blue eyes now had the quality of sapphires as she stared at Mike with smoky bedroom eyes. This was Kim as Whispersong.\n\nThere was a fiery haired beauty, freckled and busty, with a golden tiara in her hair, wearing a nearly see through pink housecoat as a robe, with no underwear. Quarter sized areola with firm pencil eraser nipples and a heart shaped short pubic patch clearly on display, her whole body made to be a sexual playground. This was Marcy as she envisioned Marciella.\n\nThen there was the last. She stood 3 feet tall, with an hourglass figure and black hair pulled into twin pigtails. She had pouty lips and firm tits with a tight ass. She was dressed like a 3 foot tall exotic dancer in a leather bikini. This was Leilani as Penny Pigtails, the exotic dancing halfling bard.\n\n\"Shit!\" Piped the halfling, \"I didn't realize how short 3 feet is! I should have chosen a taller race!\"\n\n\"I think you look like an adorably sexy snack,\" rumbled Gudrun, lustily, \"I could keep you in my bag and pull you out whenever I needed something to...munch on while we travel.\"\n\n\"So...\" Mike started, then paused, clearly adjusting the tent forming in his pants, \"do we keep on playing for the night?\"\n\n\"Oh, we're going to play,\" the elf said seductively, \"I'm just thinking we need to take tonight's game in a new direction!\"\n\n\"I agree!\" Jan said, \"my turn. Alter reality roll: Mike becomes whatever NPC we are interacting with tonight to fulfill whatever fantasy we have!\"\n\nShe picked up and rolled, another 20.\n\n\"Ok, I gotta ask,\" Mike said, \"how is it nobody has rolled under a 17 tonight?\"\n\n\"Simple,\" replied the halfling, \"we all bought loaded dice when we bought the game. Gotta say, too, I'm glad we did!\"\n\nThe smoky eyed elf who had been eye fucking every other person in the room picked up her die, kissing it, then holding it out with her other hand pointing at Mike.\n\n\"Alter Reality roll: Mike will have no limit to how often his cock gets hard, and can cum a full strength load with every orgasm! His cock is also 3 inches longer, and proportionately girthier, than he is now, and adds another 3 inches to the normal size of whatever form he is in!\" She grinned as she rolled, looking Mike right in the eye.\n\nShe had been thinking of her own boyfriend's lack of impressiveness in the package department, and made her roll before finding out the peritnent facts.\n\n\"Yay! Another 20!\" Boomed the giant tittied lusty barbarian they all knew as Gudrun.\n\n\"Oh, shit!\" Mike exclaimed, pulling his pants out to look into them at his package. He had already been a respectable 7 inches at the beginning of the night! Sure enough, he saw a sizable difference. He thought he could mug somebody with what was in his boxer briefs now.\n\nLeilani got a wicked look in her halfling eye as she prepared to make another roll.\n\n\"Alter Perception roll: Mike is no longer a one woman man. He is faithful to all 5 of us equally. None of us will feel any jealousy of the others as long as we all get time with Mike or each other,\" she declared, rolling the die before anyone could object.\n\nAnother fucking 20, Mike saw with sudden great joy. He looked forward to many great times pleasing each of these amazingly delightful women. He grinned happily at the thought. Odd. He knew he'd just been changed, but felt ok with it.\n\nAll 5 of the women cheered.\n\nAlicia grinned at Leilani, failing to look stern as she had initially intended.\n\n\"You do realize I think you just made me bisexual?\" She asked.\n\n\"Whoa. Fucking sweet! I've wanted to know what you taste like for a while now,\" Leilani answered.\n\nJan nodded, \"me, too!\"\n\n\"And lastly, for the moment,\" Marciella said softly, picking her die up, \"Alter reality roll: whenever one of our fantasies starts, the room changes to the matching scenery or terrain!\"\n\nA 17 came up on the die, everybody feeling instinctively that it was a successful roll.\n\n\"Oh, tonight is just going to be magical!\" Jan clapped with excitement, with each of the other ladies nodding their heads in enthusiastic agreement, as they watched her enormous jugs bounce heroically when she clapped. The leather halter did not come near to properly containing them.\n\n\"Before we start, I just HAVE to know what we're working with tonight!\" Kim purred, rubbing against Mike's crotch through his pants.\n\nOnce she felt substantial bulge, she quickly undid his belt, opened his pants, and pulled them and his boxer briefs down. A meaty fencepost almost smacked her in the cheek before she pulled back, eyes opened wide in disbelief.\n\n\"Oh. My. GOD! How big was it before?\" She asked, looking up at his eyes from the other side of that weapon of ass destruction.\n\n\"Well,\" Mike blushed, \"I WAS 7 inches...\"\n\n\"Shit. I was thinking of James and his widdle biddy 5 inch dingus. Well, I have no problems with going from one extreme to the other!\" She announced.\n\nShe had spoken more out loud since the die was rolled ending her stutter than Mike had heard her speak in the 7 months he had known her.\n\nWhispersong the elf looked like a mouse being hypnotized by a snake as Mike's new and improved combat gear bobbed up and down in time to his pulse. She licked her lips and seemed to be praying as she looked at it hungrily.\n\n\"Well, I guess we should start with the fantasies you ladies have been harboring. Will you roll initiatives to see who goes first?\" Mike asked, ready to put his new equipment to use.\n\n\"Since we all know Kim has been drooling over you since she first laid eyes on you, I vote she goes first,\" Leilani quipped.\n\nA chorus of agreement resounded from the other three as Kim, in her guise as Whispersong, nearly cried in thanks to them.\n\n\"Ok, Mike,\" she whispered to him, \"here we go.\"\n\n-------------------------------------------------\n\nMikael slowly came to. His head was foggy and he could feel a goose egg on the back of his head buried behind his long hair.\n\nHe checked himself for further wounds, his muscular arms checking his broad chest and thickly muscled legs felt fine. His stomach was rippled with muscle and seemed intact.\n\n\"Here, sit up,\" a feminine voice whispered softly, her voice more felt than heard.\n\n\"What happened,\" he asked, as the fog slowly dissipated from his head.\n\nThe beautiful elf in black leather and silk holding him seemed somehow familiar, but he couldn't figure out from whence he knew her. She had 2 wickedly curved long knives on her back, the handles protruding above her shoulders.\n\nThey were beyond the city walls, in the thickest part of the forest. He remembered he had been out hunting with his retinue and his harpy of a wife. Since he had been married, the ranger rarely got out into the wilds anymore, the harpy his parents had forced him to marry would shriek usually if he mentioned it.\n\nHe had felt the presence of two more of her men at arms in the woods behind him, and wondered if she had tired of him and was going to try to get to the inheritance his parents had left him by simply having him murdered. He was surprised it had taken her this long.\n\nHe had been prepared to spring into action, nock an arrow, and defend himself from the bloodthirsty cuckolding thugs when everything had gone black after his noble cunt of a wife started shrieking at something.\n\n\"What happened was I was out here, minding my own business, when this shrill shrew of a woman starts yelling at me, and calling me long ear, an almond eyed slut, and a skinny sexless waif,\" she whispered, a look of disgust in her eyes, \"and screamed that my presence would not upset her plans, and blah blah blah, something something bitchy.\"\n\n\"So, I looked and saw she was accompanied by what must be the prettiest man in the city, all long hair and hard muscle, and wearing a wedding band matching hers. I saw his raven black hair, his wife's peak. His strong jaw and cheekbones were delicious So I did what any self respecting thieving guild mistress would do, and stole him,\" she said, matter of factly.\n\n\"You...stole me...thieving guild mistress? You...you're Whispersong, aren't you? Mistress of The Cat's Cradle? What do you intend to do with me? I'm rather sure that the vile shrew you heard yelling would rather let me die than to pay a ransom. I'm actually pretty sure she was about to try to have me killed. You only give her the opportunity to rut with those thugs she called a retinue\" he said matter of factly.\n\n\"Ransom? My lovely man, why would I ever give back something I have stolen? I steal because I want what I take. I wanted you, thus, I stole you. Now, take off your clothes,\" she said casually.\n\n\"Take off my clothes?\" He asked.\n\nA knife was pointed at his throat before he could detect movement, as he found himself again on his back. Two passionate eyes stared at him from above.",
        "\"Take,\" snick went the first leather thong keeping his shirt closed with a flick of the razor sharp blade, \"off,\" snick, \"your clothes,\" snick went the last thong.\n\n\"Yes, yes! Alright!\" He said, suiting action to words as he took his clothes off in short order.\n\nHis manhood was becoming engorged in the presence of this beautiful elf in extraordinarily tight leather. Her voice was whispered promises of unknowable bliss, her scent inspiring great arousal. She was quite possibly the most beautiful woman, human or otherwise, he had ever seen.\n\n\"Might I ask...how does one steal a man? I assume it involved violence, as I woke up with quite the headache,\" he asked as he continued undressing before her critical eye.\n\n\"I beaned that hideous shrew in the head with a rock, then, to be safe, I beaned your horse, which bucked and threw you to the ground. You hit your head on a rock and passed out. Then, I bribed her guards with 50 gold coins I have buried further in the woods. They left to go get their money! I left her bereft of clothes deeper in the wood.\" She answered with a wicked smile.\n\n\"You have 50 gold coins?\" He asked, disbelieving. The local nobility did everything they could to keep gold out of the hands of the commoners.\n\nShe snorted, \"Gods, no! Why would I bury good money that could be spent on drink and pleasure boys and pleasure girls? I followed them, sneakily, of course, and when they spoke of killing you so they could all take turns shagging your wife, I grew disgusted and waited for them to split up. Once they did, they each got the knife. That's what they get for plotting to kill what I rightfully stole.\"\n\nHe laughed in delight. He liked this bold young elf. He was almost finished undressing, yet held off momentarily before revealing what she probably wanted most to see.\n\n\"Well, my young mistress, do you like what you have stolen so far?\" He asked, shorn of all but his underbeeches, his muscular chest, arms and legs on display.\n\nShe looked at him hungrily, a long knife poised to cut off the underbreeches if he took too much longer.\n\n\"So far, but if you don't hurry and show me your sword, I will remove it and take it with me!\" She said, impatiently.\n\n\"Alright, alright! Patience! Your kind are supposed to be renowned for long life and patience!\" He said, dragging down his underbreeches.\n\nShe gasped and dodged back as a huge cock the likes of which she had never imagined almost knocked her unconscious. It was enormous!\n\n\"Mike, what the fuck? That has to be 13 inches if it's a centimeter!\" She cried out, running a single finger up and down it's unbelievable length.\n\n\"Madam, my name is Mikael, not Mike. I would not dream of altering your name, please do me the same courtesy! And my sword has been this size since I was 14. It's the reason my wife ruts with the guards and servants. She is afraid of it, and refuses to let me sheathe it in her after her first attempt!\"\n\n\"You don't remember being Mike,\" she whispered, remembering the rolls from earlier...Mike BECOMES whatever NPC we are dealing with...and her own...Mike's cock will always be 3 inches longer than what is normal for who he is...\n\nGood gods, this was AWESOME!\n\n\"Can you use that weapon?\" She asked sharply, masking her excitement.\n\n\"Mistress, there are 3 weapons of which I am the supreme master. My cock, my tongue, and my bow. I came out today expecting to exercise my skill with one, and find instead I will be showing my mastery of the other two.\" He answered with confidence.\n\n\"Sweet Lady of Lust! This is amazing!\" She whispered, before sticking out her tongue and running it from the bottom of his coin purse and up the long, long route to the helmet.\n\nMikael gasped as she took his helmet into her mouth, and working his shaft with a spit lubed hand that could only reach about halfway around it. She was stretching her jaw almost as wide as she could to fit the plum sized head into her mouth.\n\nChrist on a pogo stick, this thing was almost as long as her forearm, and bigger around! She hummed in glee as she set about taking his first 4 inches into her mouth, all her skull could fit, but enough to leave her head buzzing like she'd smoked a joint. The taste of his precum was heavenly.\n\nOff in the woods nearby, 4 figures, a halfling, a demonling, a fiery redhead priestess and a blond barbarian, watched in stupefied horny jealousy as their elven friend dealt with a monstrous example of pussy destroying potential. The area around them smelled heavily of feminine arousal as each woman though of their own fantasies, impatient for their own turns.\n\n\"I'm gonna need to make an alteration to my character sheet,\" the halfling whispered as her hands explored her thoroughly soaked bikini bottoms, \"that man meat is almost half as long as I am tall, and I WILL take it all in me!\"\n\nWhispersong worked her tongue and wet kisses everywhere on the shaft that she could, before Mikael sat up and gently pushed her back. When she growled an animal warning deep in her throat, he held his hands up in a calming manner.\n\n\"Forgive me, mistress Whispersong, but one of us is a bit overdressed for the current activities! Kindly get naked so I might return the favor of an oral display.\" He said calmly, despite his monstrously engorged cock rocking back and forth like a batter at a baseball game taking practice swings.\n\nFrustrated with the lack of speed involved in removing her corset, silks and leather pants, Whispersong expedited the process by use of her long knife. She cut the strings on the corset, and sliced the belt on the pants, then tore the clothes off with speed and determination the likes of which Mikael had never seen. She was bare of any clothes within moments.\n\nShe dove back onto that deliciously humongous piece of womb wrecking equipment, desperate to taste more of the precum that was leaking from the tip like a dripping faucet. Her own cunt was dripping honey down her thighs at an incredible rate. She had never been this horny in her life.\n\nMikael grabbed her ankle, and pulled her astride himself so her delectable honeypot was above his face and they were in a 69. He grabbed her ass and pulled her dripping cunt down to his face and began to lap at her folds as she tried to choke herself on his meaty lance.\n\nWithin moments, his tongue had her writhing about on his face, grinding her wet cunt into him, and moaning and whining onto the shaft she had her face impaled upon. His tongue danced across her folds, dipped into her slit and scooped out her nectar. He circled her clit and pressed it from all sides before strumming it with this tongue.\n\nHe pulled her muscular cheeks apart and stared at her dainty rosebud as he plunged into her twat with his tongue. He briefly pulled out and ran it lightly over the little pucker, causing a squeal and Whispersong's back to buck wildly as she pushed her ass against his tongue.\n\nHe firmed it and pressed it into her ass, tasting the leather that had been tightly wrapped up between her cheeks, and he pressed 2 fingers into her cunt, sawing them in and out as he tongue fucked her rosebud.\n\nHer moans increased in strength as she picked up speed on her up and down movements over the portion of his cock she could fit in her mouth, until she shuddered and came, her ass constricting about his tongue and her cunt muscles tightening about his fingers, as her honeyed girl cum flowed out of her entrance and soaked his chin.\n\nHis own orgasm was imminent, he could feel it rising like leviathan from the depths. His hips began to thrust upwards, pushing more of his shaft into her mouth.\n\n\"I'm going to come, mistress Whispersong,\" he told her.\n\nWhen she made to pull off of his member to stroke him to completion, his hand reached down to hold her in place. She made a whimpering, worried sound, but he held firm.\n\n\"I'm sorry, young mistress, but I must insist that you take my seed into your mouth and swallow it. It is coming,\" he grunted, as he sprayed rope after rope after rope of cum into the back of her throat, allowing his cock to come out just to the head.\n\nThe pretty young elf swallowed as fast as she could, but never imagined one cock could cum so much in a single orgasm. There must have been 15 pulses of it. It seemed neverending. The taste was divine, but she had difficulty keeping up.\n\nThere were tears in her eyes, and some of his cum had escaped her mouth and ran down her chin. Gasping for breath, she pulled herself off of his cock and laid her head down beside it, staring up at it as it towered over her face like some ancient obelisk full of secret wisdom or power.\n\nShe knew she was falling under its power. She didn't think she was upset with that prospect. She shuddered through another orgasm as she thought about what would happen next.\n\nMikael lifted her petite body off of his own and sat her kneeling beside him. He scooped up the cum that had escaped her mouth and held it to her lips.\n\n\"Now, now, my dear. We can't waste any of it,\" as she opened her mouth and licked his fingers clean and swallowed the last of his sperm.\n\nGods, she was so wet!\n\nHe got up onto his knees, and pushed her over on to her own as he took up position behind her. She arched her back to present her hairless elven cunt to him, mewling with need.\n\n\"Put that monster in me! Fuck me now!\" She demanded.\n\n\"I'm afraid that's not how this is going to work,\" Mikael calmly responded.\n\n\"Fuck me now or I'll cut this cock off and use it on myself!\" She replied hotly, drawing a long knife and turning to menace him with it.\n\nHe casually caught her wrist and twisted, causing her hand to open and disarming her. He pushed her back around and down.\n\n\"No. This is how this will happen, young mistress Whispersong. If I push my cock into this needy twat, it belongs to me. I will ruin you for any other man, ever. I've been cuckolded, and will never again allow it. If you want my cock to grace your folds and fill you with my seed, I'm afraid you will have to...beg for it.\n\n\"You will acknowledge that you belong to me, body and soul. Your mouth. Your cunt. Your ass. All are mine. If that is acceptable, you may now beg. If not, you may take your clothes and begone from my presence. What will it be?\"\n\nShe glared at him balefully, yet filled with need. She was undeniably more aroused than she had ever been in her life, and deep inside, elated that her fantasy was becoming reality.\n\n\"I have one condition. I will do all you ask, but only if I may call you Mike. You may have my mouth, my cunt, and my ass at your leisure, but ONLY if I may call you Mike.\" She panted, obviously turned on beyond all experience.\n\nMikael thought about it. He disliked his name being changed, but this young elf was an absolute delight, and the prettiest woman he had ever encountered.\n\n\"I accede to your request. You, and you alone, may call me Mike, or Sir, at your discretion,\" he agreed.\n\n\"Then...please Mike...Fuck me! I need your cock in me! I beg you to fill me with your seed. Claim my cunt! Claim my ass! Mark me as yours forever so no man will ever tempt me away from you! Whatever you want, just please jam that fat fencepost in my needy cunt and make me yours!\" She begged wantonly.\n\n\"With great pleasure, my young beauty!\" Mikael said, grabbing Whispersong by the hips and slowly pushing his monstrous shaft into her needy wet depths. In one long, inexorable thrust, he slowly penetrated to her deepest depths, pushing aside her cervix at an angle and, feeling every decimeter of movement, eventually bottomed out in the petite elven beauty.\n\nHer eyes had gone crossed and she was uttering only disjointed syllables, \"my....uh....frig...bru...\"\n\nas she pushed back against him. Once his thighs touched her own, he stopped to ensure she was as able to get as adjusted to his size as she could.\n\nMikael started to slowly thrust in and out, to a constant whimpered moaning, Whispersong trying to find control of her voice as the man with a giant's cock attempted to split her in half like a piece of cordwood. In and out he sawed, his rod so thick it's every movement scraped across her g spot, making the elf shudder and utter more nonsense syllables.\n\nAfter her third shuddering orgasm he pushed her head down to the ground and kept it there, as he picked up the pace of his thrusts. Her groans become cries of passion, her vision darkening as bliss overrode her senses. Her whole existence became centered on the exquisite sensations in her dripping, spasming pussy, stretched wide and pounded by the largest object she had ever imagined could penetrate her.\n\nShe couldn't even form the thoughts to wish she could scream words, her most coherent thoughts being uttered out loud as \"guh...guh...guh...guh..\" as her eyes were rolled back in her head.\n\nIn the woods, Alicia giggled, \"my God, I think he just fucked another speech impediment into her!\" All 4 women had their hands down below, playing in their wetness, edging themselves, all trying to time their climaxes to those of the two they spied from a distance. Alicia was experimentally rubbing her demonling's tail across her clit, and debated seeing if she could use it to fuck herself.\n\nMikael pounded into Whispersong, sawing his 13 inches of weapons grade man meat into her depths at a rate a jackhammer would envy, his heavy balls slapping against her clit with enough force to make her squirt a small eruption of girl juice onto them that dripped down and soaked his thighs. Her entrance was drenched in frothed juices that foamed and fell onto the ground below them.\n\nAfter what felt like days, his pace began to quicken, his thrusts growing in power as he slammed even deeper, Whispersong sure she could feel him hitting her stomach. He grew into a frenzy of thrusts with gut churning urgency.\n\n\"Whispersong, I claim this cunt as my own, and ruined for any other man for as long as I live!\" He growled, as he blasted her insides with another unbelievable torrent of seed, filling her quickly before his thrusts began to pump the overflow of semen out in squelching spurts that coated both of their thighs and legs.\n\nShe screamed at the top of her lungs in the most powerful orgasm she had ever felt, the volume enough to wake the forest, sending flocks of birds squawking indignantly as they flew away. Small animals left the area as though pursued by predators, and she gasped and panted and knew she would be lucky to ever have a fully formed thought again.\n\nMikael slowly pulled his cum soaked giant cock from her stretched and drenched pussy with a sucking pop, as Whispersong collapsed onto the forest floor in front of him, desperately gulping down air.\n\nShe crawled slowly on her belly, all the movement she was currently capable of, and curled up into a fetal position at Mikael's side as he stretched out to unlink the muscles that had tightened during their coupling.\n\nHe fished in his pack for the wine skin and put the nipple into her mouth, letting her drink deeply to quench the thirst her constant cries had generated. Once she was done, he drank deeply himself.\n\nHe gave Whispersong a few minutes to collect herself before either of them moved the slightest bit more.\n\n\"Thank you, Sir! I belong to you and only you,now, Mike!\" She gasped when she could form words again.\n\n\"Not quite yet, my dear. You don't belong to me quite yet,\" he replied calmly.\n\nShe looked up at him questioningly, worriedly, wondering if she had done something wrong or displeased him, that he would not claim her.\n\n\"Why not, Mike? You just fucked me stupid and dumped about a gallon of seed in me! How can I not be yours?\" She demanded in a piteous tone.\n\n\"Relax, my beautiful Whispersong. Yes, I just claimed your beautiful twat, my dear. But I have not yet claimed your tight little bum. You can't be claimed until I have marked each of your perfect little holes, and so far, I have claimed but two,\" he said soothingly.\n\nHearing this brought a mixed feeling of joy and trepidation to her core. She wanted to belong to this wonderful man, and to Mike, who was playing host to this incredible fantastical panty ruining fuck session. But she feared what that turgid torpedo would do to her dainty back door.\n\n---------------------------------------\n\nIn the woods nearby, 4 exhausted, panting women lay in a cuddle puddle of intertwined arms and legs, every one of them having had a screaming intense orgasm when the dainty puddle of an elf a short distance away had tried to wake the dead with her own screaming orgasm.\n\nEyes had crossed. Pussies had gushed. Legs had gone weak, and then they were all gasping from the afterglow of shared orgasm during mutual masturbation as they observed the most energetic and erotic live porn show they had ever seen. To know it was literally the fantasy of one of their best friends made it even more special.\n\n-------------------------------------------\n\nIn the end, the need to belong to Mike, to fully submit, drove Whispersong to beg for Mikael to take her tight anus and make it his.\n\n\"Please, Mike,\" she pleaded, \"please take my ass! Stretch it out with that polearm and fill my ass with your cum! I want to be yours! I need to be yours!\"\n\n\"Don't worry, my sweet,\" he told her, \"I will claim it, and I will be as gentle as possible. At first. There is no need to fear.\"\n\nMikael rolled her to her back, and pulled her feet up to lay over his shoulders. He gathered some of the froth that was on her thighs and at her entrance, and worked it around and into her tight sphincter. She moaned as he worked a finger in as far as it would go, until his hand was against her ass. Then he worked in another, spreading the fingers as he worked them in and out and stretched out her rectum.\n\nHe leaned forward, and took a dainty, diamond hard nipple into his mouth, and bit it gently as she moaned in wanton need. Her chest thrust up at him even as she pushed her ass back against his invading fingers.\n\nHe scooped more fluids and worked in a third finger, stretching them in her rectum, as she writhed and moaned and pushed back against his hand with increased urgency. She clenched her ass and came, muscles grasping Mikael's fingers as she fought to bring in more air.\n\nWhen her climax had ended, and Mikael could freely move his fingers in her ass again, he withdrew them, and lined his cock up to her soaked cunt, driving in for three or four thrusts to coat himself in their juices, before pulling out and shifting his head down to her pucker.\n\nSlowly but firmly, he pushed against her back door. Her legs were held back, her feet now laying flat against his upper shoulders, she begged him to keep going. With a sigh from him and only a slight burst of a gasp from her, his plum sized head broke past the outer ring of her rectum, and he was inside her ass.\n\nIt was a slow process, feeding in his cock an inch, then waiting for her to adjust, then another inch. It took forever, but eventually his thighs met her ass, and he was buried to the hilt in her ass, as she shook through another orgasm at the end.\n\nHe gave her time to settle, then started to gently thrust in and out, her breathing quickly matching his pace. Gasp in when he pushed in, hard exhale when he withdrew. He kept that slow pace for a couple of minutes to ensure she had gotten used to the size.\n\nWhen she gave a nod that she was ready, his pace quickened. Her moans became a staccato of \"uh..uh..ah..ah..uh..uh!\"\n\nHer eyes went unfocused and stared at him, her brain again short circuited to prevent any more conscious thought than \"fuck fuck fuck fuck! Fuck me!\"\n\nHer hips thrust back at Mikael with urgency, her pussy leaking dew in a steady stream down her thighs and around their joining at her back door, slickening and further lubing his giant rod as it plumbed her depths.\n\nHis hands worked her tits, mashing them against her body and palming her nipples, grinding them in with the rest, as he leaned forward and devoured her mouth, tongue lashing out and catching hers, as she grunted into his mouth with each thrust, staring into his eyes with blind animal lust as she was taken hard and fast.",
        "He sat back up and reached to hold her legs near their base while he again quickened his pace, as her ass stretched further than she had ever dreamed, the ring holding tight about his shaft as he gave her long continuous thrusts.\n\n\"Fill...me...cum...claim...me....fuck...me...yours,\" she grunted with each thrust, \"yours...forever...\"\n\nShe then stopped, her eyes bulging before closing tightly as her whole body began to quake, an orgasm to match her screaming climax from before, as she let loose a broken voiced cry, gripping him with her ass and milking him.\n\nMikael could last no longer. He gave two more thrusts, as hard and deep as he could, and buried himself deep inside her bowels as he grunted and spewed forth the prodigious amount of seed that would now be his regular load.\n\n\"This ass is MINE!\" He yelled, pulling out and spraying his last few ropes onto Whispersong's stomach.\n\nThe elf had passed out during her climax, and he followed suit a moment later.\n\n-------------------------------------------\n\n\"Holy fuck! I can't believe how fucking hot that was!\" A very excited Leilani exclaimed, \"I'm so fucking hot! I can't wait for my turn!\"\n\nA chorus of agreements sounded as Mike opened his eyes. He remembered being Mikael. Dominating Kim. His eyes shot open wide as he got up, woozy and lightheaded for a moment, and stumbled to find her.\n\n\"Kim!\" He cried out when he saw her lying, leaking cum out of her ass and her pussy, eyes rolling, still, as she moaned.\n\n\"Kim, I'm sorry. I wasn't myself! Are you ok?\" He asked worriedly.\n\nShe smiled a dreamy, satisfied smile as she rolled to look at him. She was back to her normal appearance. She pulled herself over and kissed him with as much energy as she had left, which wasn't a lot.\n\n\"Mmmmmm. I'm perfect! That was exactly how I've fantasized it! And I'm yours now, Mike. Anywhere, any hole, any time! I gave myself to you! It was Mikael who took me, but it was you I gave myself to. That was incredible!\" She said softly into his ear, before slumping down and falling asleep.\n\n\"What do you mean it wasn't you?\" Marcy asked.\n\n\"I mean, I had no recollection of ever being ME. Mike. So far as I knew, I was and always had been Mikael. I still remember what it was like to be him. Most of the old memories have faded, but while I was Mikael, I had the memories of a man who had grown up and lived as a Ranger in a loveless cuckold marriage to a cunt of a noblewoman,\" he explained\n\n\"Before we do anything else,\" Alicia called attention to herself, still appearing as the ebony skinned Demonling, \"we need to take care of some revenge. A little payback for you to our former boyfriends.\"\n\n\"What did you have in mind?\" Jan asked, curious.\n\nShe knelt down on the floor in front of Mike and pulled his cock back out of his pants, flicking her long forked tongue out at him sexily.\n\n\"First, Make sure Kim doesn't fully pass out, yet. We're gonna blow Mike until he busts a huge nut all over Kim's face, then take a picture of her marked face with Mike's big ole' cock right there. We\"ll do that for each of us once we're back to normal. Then we'll send the pics to our useless has-beens to tell them we all have a new man,\" she outlined the start of our mutual revenge.\n\n\"I like it!\" Marcy stated definitely.\n\n\"Sounds delicious,\" piped up Leilani, still rubbing herself through her bikini bottom.\n\nJan only smiled a savage smile as she nodded.\n\n\"Mmmmhmmmmmmmmm,\" came a breathy moan from Kim's spot on the floor.\n\n\"Good,\" Jan said. \"But I want to make sure Brian gets payback, as well.\"\n\n\"I'll be handling that fucking shit stains payback myself,\" Mike said, \"only a complete fucking idiot fucks with a man who can get him out away for most of the rest of his life.\"\n\n\"What do you have in mind?\" Leilani asked\n\n\"I'll tell you lovely ladies tomorrow. Tonight is for us to fuck our silly brains out,\" he replied.\n\nJan helped Kim sit up as Alicia leaned forward and wrapped that incredibly soft forked tongue around Mike's shaft, as Leilani's short form appeared between his legs and she took to lapping at his balls and gently sucking each one into her mouth. Marcy appeared opposite Alicia and they all three worked on blowing him, while Jan pushed her leather briefs down and started to Jill herself to the show, licking her lusty lips as she eyed Mike like a hungry wolf.\n\nWith three determined cock wranglers, it wasn't a full two minutes before Mike felt his balls starting to tighten up. Jan scooted Kim over and took her now normal sized huge tits and pushed them together around Mike's cock. She used the drrol left behind by the ladies as lube as use used Kim's tits to titfuck Mike to completion.\n\nKim and Mike both moaned, the feeling new to each of them, two pairs of eyes rolled back and their moths hanging open, until Mike grunted he was about to cum. Jan pulled Kim's tits apart and let Mike's cock free, as she gave each of Kim's nipples a pinch and a light twist.\n\nAlicia grabbed and directed Mike's cock like a firehouse, and shortly Kim was absolutely covered in his Jizz. From the top of her face, with some in her hair, all the way down, with cum dripping from her chin and onto her tits.\n\nShe opened her cum drunk eyes and smiled dreamily with a peace sign as Mike's cock rested on top of her head, dangling down past her mouth, as she kissed the shaft for the photo.\n\nAlicia stepped back and took another picture, with Kim wrapped around Mike's naked leg like a fully pornographic Frank Frazetta poster, with her looking up and taking the tip of the beast into her mouth as she stared wantonly up at everybody's new man.\n\nShe took her phone and sent the pics to her loser ex boyfriend with a message as she smiled and then blocked hIs number.\n\nKim: Hey, you cheating fucker! 2 can play that game! I got myself a new man tonight. Say hello to Mike's dick, peewee! He fucked your name right out of my head!\n\nWithin a minute, Mike had notifications on his phone. A message from Kim's now ex boyfriend, James.\n\nJames: Motherfucker! You fucked my bitch? You touched my bitch's pussy! I'm gonna kick your sorry bitch ass as soon as we get home. Then I'm gonna fuck her up for cheating on me!\n\nMike: Actually, I fucked Kim's mouth, pussy, AND ass. And she fucking loved it! Something tells me she wasn't getting the dick she deserved, but I fixed that for you. Ok, I'm gonna be away from my phone for a bit. The ladies are deciding who I get to play 3 hole Monty with next. Later, fuckwit!\n\n\"That was....cathartic,\" Mike said to the ladies, \"Thank you for that wonderful idea, and the incredible blowjob. Now, who goes next?\"\n\nAs the ladies were talking, Mike downed about a quarter of the snack tray. He was ravenous. He wondered if changing shape and the change to his ability to cum as often as he got hard required more calories.\n\nAs he finished, he heard multiple dice rolling, and turned to see what was going on. Each lady had rolled a die, with Leilani looking triumphant.\n\n\"We rolled initiative!\" She said triumphantly, \"and since I have the highest prowess and improved initiative, I go first, then it's Jan, Alicia, and finally Marcy.\"\n\n\"Seems fair to me,\" I said.\n\n\"Great. One last thing before we get started,\" Leilani's shortened form stated definitively.\n\nShe picked up her die and rolled it around in her hand.\n\n\"Alter Reality roll: Penny Pigtails' character sheet lists a magic mouth, pussy, and asshole. They remain tight, but can fit any size cock, even shifting organs to accommodate it!\" She declared, rolling, adding, \"otherwise, your ginormous cock might kill me!\"\n\nThe roll came up 19.\n\n\"Thank the gods for loaded dice!\" She cackled.\n\n\"Alright, Studly Do-Right, you ready to bang the fuck out of a 3 foot tall hottie? I'm warning you before we start, I am one twisted little bitch!\" She cackled, rubbing her hands together, as Mike's head went dark. He wondered what he was going to be when he woke up.\n\n-----------------------------------------\n\nMore to cum soon!"
    ],
    "authorname": "Memomax1975",
    "tags": [
        "mind control",
        "facial",
        "scifi",
        "nonhuman"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/altered-world-ch-01"
}
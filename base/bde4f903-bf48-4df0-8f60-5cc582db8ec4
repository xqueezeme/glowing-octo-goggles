{
    "title": "Tom Billionaire Ch. 08",
    "pages": [
        "****\n\n-- CHAPTER 8: Massachusetts --\n\n****\n\n*-- AUGUST (FOUR WEEKS LATER), YOSEMITE VALLEY, CALIFORNIA --*\n\n\"Mmm... honey...\" Taylor crooned. \"If you can come back with more girls who eat pussy like Evie, I should send you to Europe more often.\" Her eyelids fluttered, long dark eyelashes beating like the wings of a hummingbird. She groaned as her head fell back onto the top of the sofa's backrest. And with her eyes closed, she spread her legs further to the sides and pushed Evania's head a little deeper into her crotch.\n\n\"Oui,\" Vivienne giggled, before adding in her sharp French accent, \"Evie iz zee best!\"\n\n\"The best?\" Cassandra sat back on her heels, glaring up at my girlfriend with mock indignation. With an overemphasized sly Aussie drawl, she then scolded, \"Thet's noht the niycest thing to sayh while ahm down heeyah.\"\n\nVivienne giggled and then patted the top of Cassandra's head, which was perched between the French girl's thighs. \"Je suis d\u00e9sol\u00e9. Please, you are *very* good.\"\n\n\"Uh-huh,\" Cassandra replied with a smirk. She ducked her head back down, but rather than resume licking Vivienne's snatch, she went lower and gave my balls a tongue bath.\n\n\"Ohhh...\" I groaned, feeling both pleasured and tickled at the same time. The end result was that my whole body quivered, including my dick which was spearing upwards into Vivienne's pussy while she reverse-straddled me on the couch. And I reached around to grab her big tits and bite down on her shoulder as my girlfriend's reflexively clenching cunt finally set me off.\n\n\"Oh, shit,\" I finished, grunting as my tickled balls began ejecting great plumes of jism through my shaft and up into Vivienne's quivering quim. My hands tightened their grip on Vivienne's tits, holding on as she continued to rise and fall, pumping me for more and more cum like an oil derrick. And I continued growling until I'd finished filling the dirty-blonde French babe full of my spending.\n\nTaylor wasn't far behind me. My wife now crossed her legs around Evania's head, suffocating the poor girl with her thighs and drumming her heels against the Greek brunette's back while her hips bucked up off the cushions. And after about thirty seconds of trying to hold it in by clamping her lips shut, Taylor's mouth jerked open as a scream tore its way out of her throat. \"AAAAAAUUUUGGGGHHH!\"\n\nThe sounds of hands slapping naked flesh soon followed, Evania not quite panicking but still urgently trying to pry Taylor's legs apart. Finally, my wife's body relaxed and Evania was able to yank her head out, gasping loudly for oxygen.\n\nCassandra had turned around at the sound of Taylor's scream. She, Vivienne, and I all cracked up with laughter at the sight of Taylor completely wiped out and limp on the other couch, with Evania hunched over her while heaving for air. Eventually, Taylor's eyes started fluttering and Evania caught her breath. And after another minute, both brunettes joined in on our amused laughter.\n\nBut then Vivienne lifted herself off my lap. Cassandra quickly turned around, shoving her face back into my girlfriend's crotch and extending her tongue out to lick up the trickle of cream oozing out between Vivienne's pink lips. And Taylor pulled Evania up to her so that she could kiss the Greek beauty in happy thanks.\n\nRight here, in this moment, I couldn't imagine being any more content. I was rich, I was healthy, and I had four spectacularly gorgeous women fully naked and taking turns fucking me.\n\nWell, that wasn't _entirely_ true: three of the girls were fully naked, but Cassandra wore a sheer pair of bikini-cut panties that covered the tampon plugging up her pussy. She'd stopped taking her birth control pills, and I'd gotten my RISUG injection reversed. But despite our best efforts over the past few weeks, my loyal assistant had not gotten knocked up. We weren't agonizing over the momentary delay; her OB-GYN even said it was safer to wait until after a normal period anyways. Pregnancy would happen when it happened, and we weren't stressing out about it. The statuesque blonde was out of commission for now, and we would try again later.\n\nBut menstruation aside, yes, the four of them had been taking turns fucking me at every possible opportunity over the past few weeks. Taylor was making up for lost time, her sexual appetite in overdrive after going months without, cold turkey. Cassandra similarly was making up for the time apart, although she was especially horny in the bloom of our new love and her recent openness to fully sharing her heart with me. Vivienne was her usual energetic nympho, although with an increased drive to maximize her time with me while getting used to sharing me. And of course, Evania was ready to service me at the drop of a hat.\n\nWith all four of them wanting attention, and with none of them having anything so mundane as a *job* or other obligations to occupy their time, I pretty much found myself in demand 24/7. I began eating ravenously just to keep up with the calories I was burning through extreme cardio exercise. And after a couple weeks of lounging around the Montauk mansion, getting myself settled back into familiar and comfortable surroundings, I realized I had to get OUT and get my girls distracted with other things lest they literally kill me through fucking.\n\nEven if they wouldn't go back to their jobs, my girls would have to find *hobbies*. That wasn't going to happen immediately; they were all too focused on me. So we did what we always did: we traveled.\n\nAfter a few days of no news, with me and my family staying behind locked gates, the paparazzi had given up on stalking me. The action was in Manhattan, not way out in the boonies of Montauk, a good two-and-a-half hour drive for a busy-busy media type behind the wheel. True, my extended family was a little more vulnerable. Cameramen were trying to track Ashlyn and Joey after they moved back to the 5th Avenue Penthouse. Similarly, there were the occasional harassing questions for my mom, and Cassandra's mother as well after the whole kidnapping thing. But even they were forgotten when the next Brangelina scandal hit the newsstands.\n\nSo we were free to get out and travel again. Yeah, the media might come snooping once I poked my head out, but that was just routine. And this time, I had a better plan.\n\nWe first flew out to Mount Rushmore. I felt a twinge of regret at Ashlyn not being present, but Taylor solved that problem by getting a photo of me having a threesome with her and Cassandra in an open field with the big granite heads in the background. We emailed it straight over to my ex-girlfriend with the caption: _Wish you were here._\n\n\"Maybe this'll get her to come back to us,\" Taylor had quipped while grinning evilly.\n\nI wasn't worried about any paparazzi following us. Even if they tracked the jet, how many tabloids have an office in South Dakota? And even if they did, we only spent a day and night there before getting back aboard and flying off to Idaho.\n\nYes, I said Idaho. Though she was surrendering some of her duties to Evania, Cassandra had decided to keep her official title of \"personal assistant\". It was easier than trying to become \"wife #2\" or something, and besides, Cassandra actually *liked* running my household. Taylor might have been the alpha female of the family, but Cassandra would continue being in charge of the staff. And there was simply no replacement for the knowledge she possessed of where to go and how to get it done, at least until she managed to teach Evania everything she knew.\n\nIn any case, it was Cassandra's idea to go whitewater rafting on the Middle Fork of the Salmon River in Idaho. Careful application of money had gotten us not only a private tour, but also a female guide with a promise to turn a blind eye to any of our sexual shenanigans.\n\nThat only half came true. We got our private 5-day tour. But Chrissy, our 25-year-old freckled hottie of a Midwestern farm girl tour guide, couldn't quite keep a blind eye to our sexual shenanigans.\n\nAs I'd hoped, spending most of the day paddling on the river wore down my girls enough that they couldn't devote all their energy into draining me of all sexual fluids. But there were still four of them, and only one of me, so we were still making our tent move and shake quite a bit in the night. And that's not to mention the times one girl or another (or two at once) dragged me off into the bushes during a break for a quickie.\n\nThe point is: listening to all that action (and voyeuristically watching, since my girls weren't really too careful about finding privacy) for three days was putting quite the itch in Chrissy's shorts. And though both Taylor and Vivienne independently offered to help her out, the girl swore up and down that she was 100% hetero and replied a polite \"no thank you\".\n\nSo by the third night, Chrissy was practically climbing up her walls with pent-up horniness, and we could hear her moaning in her own tent during a break in our own orgy. And the very next morning, after Cassandra mounted me on a blanket in broad daylight and fucked herself to exhaustion *without* quite getting me to spooge inside her, all it took was a minor nudge from Taylor to get the young Idaho redhead to pounce on my cock and start sucking for all she was worth.\n\nOf course, Chrissy couldn't stop there. The instant I pulled her head off my dick, the 25-year-old farm girl flopped onto her back, ripped her plaid shirt open and yanked down her shorts, begging me to fuck her. I did just that, sinking myself into her very tight twat and then banging away, giving the young girl the ride of her life.\n\nShe came twice before I pulled out and jizzed all over her tits. She was so lost to her pleasure that she didn't even notice Vivienne and Evania slurping my cum off her bare skin. And she was certainly beyond caring about her so-called 100% heterosexuality by the time Taylor stuck her nose into the redhead's crotch and tongued poor Chrissy to a *third* climax.\n\nThe 5-day tour turned out to last six days. We simply weren't covering very many river miles, what with the frequent breaks to stop and have sex and all. Taylor talked all five of the girls into going topless for the rest of the trip, Chrissy included. And although they wore life vests over their torsos, there were still lots of nipples becoming exposed and plenty of access for roaming hands beneath the protective foam pads.\n\nThe last night, Chrissy even got a taste of her first pussy, letting Taylor squat over her face with a full load of cum inside, shivering as the creamy goodness oozed out onto her tongue while Evania did the honors of eating Chrissy out at the same time.\n\nBut eventually we arrived at our destination and bid our cute river guide goodbye. And then it was off in the jet, flying to Fresno Yosemite International Airport and on by rented Suburban into Yosemite Valley itself.\n\nDinner was at the Ahwahnee Hotel Dining Room. After six days of roughing it on the river rafting trip, our meal felt like that of a Michelin Star-rated restaurant. We gorged ourselves and then retired to the penthouse Library Suite with a couple of bottles of wine. And after the wine, we all got naked and made love.\n\nEvania ate out Taylor. Vivienne reverse-straddled me until I spunked inside her. And Cassandra sucked it all out.\n\nRight here, in this moment, I couldn't imagine being any more content.\n\nOf course, I was proven wrong a second later. Cassandra got up to snowball my load back to Vivienne. Taylor came over, extending her wickedly long tongue to join in. And even Evania came over to make the three-way kiss a four-way.\n\nCum was shared and then eventually swallowed. The girls got to talking, and then a new plan was formed. Taylor, Vivienne, and Evania all got up and sashayed into the bedroom, Taylor gracefully gliding her hips left and right like a runway model, with Vivienne and Evania giggling as they copied her. Cassandra then took me by the hand, pulling me up to stand with her for a quick kiss. And then she led me after the others.\n\nIn a row, Taylor, Vivienne, and Evania knelt doggy-style on the bed, their asses pointed back at me and their knees spread to give me easy access to six holes with wet pussy lips already spread open in invitation. Cassandra stood me behind them, and then knelt at my feet. I looked down at my always loyal, always loving assistant, watching her watching me as she took my semi-hard cock into her mouth and began blowing me back to hardness.\n\nThen I looked up again at the three exquisitely beautiful women on the bed just waiting for me to ravage them, and I decided that *now* I couldn't imagine being any more content.\n\n****\n\nPanting softly as my heartbeat gradually slowed, I turned my other cheek against the pillow and blinked to get my eyes to focus on the digital clock on the nightstand. When the time registered in my brain, I sighed and commented, \"We'd better get up. Our rock-climbing appointment is in two hours at the base of El Capitan, and I want to have enough time to enjoy my breakfast.\"\n\nI felt Taylor's lips softly peck the back of my neck, followed by a murmur of contentment. She hugged me, tightening her hands behind my back. And then she sighed, \"If you want me to get up, you'll have to get *off* me first.\"\n\nI chuckled and did a push-up to lift my chest off of Taylor's firm tits. I kissed her lips and then bent to kiss the tops of her breasts, reassuring them, \"This is just goodbye for now; not goodbye forever.\"\n\nMy wife chuckled and let me pull back, my softening dick exiting with a noticeable 'squish'. She giggled and reached between her legs, coming back with a finger moistened by the remnants of our morning orgasms still inside her pussy. She popped it into her mouth and then got up to head for the bathroom.\n\nI then turned to look at the desk, where my big-titted blonde assistant was typing away at her laptop with thin-frame glasses perched on her nose and a bluetooth affixed to her right ear. \"That means you too, Cassandra,\" I sighed.\n\n\"Just a few more minutes, sir,\" she replied flatly without looking away from her screen.\n\n\"'Sir'?\" I queried, a little hurt.\n\nCassandra's fingers froze, and her face went blank for a moment. In addition to keeping her \"personal assistant\" title, she was keeping most of the job functions as well. Despite my suggestions that she let go of those responsibilities, especially in the wake of what happened in Marseille, she insisted that running my household and managing my business affairs were things that she truly enjoyed. And after a couple of weeks just relaxing, screwing, and traveling around the country, Cassandra had gotten the itch to get back into the game.\n\nRealizing what she'd said, her face softened and she turned to look at me. Her sky blue eyes sparkled and a little smile came to her face. \"My apologies... _sir_.\"\n\nIt's amazing how the same word in one tone can be so radically different from another tone. Cassandra's purr with that low rumble that made my pulse quicken. I'd spooged my wife not two minutes ago, but the mere sound of Cassandra's husking voice could stir me back toward hardness.\n\nI grinned. \"That's better.\"\n\nCassandra looked up at me and took off the bluetooth earpiece. She sighed and said, \"I was just checking in with George,\" she informed me, referring to George Karr, VP of Finance. \"Things are a bit of a mess with me being gone for the last few weeks. These sanctions still have us running really tight, and a lot can go wrong when no one is at the wheel for this long.\"\n\nI winced, realizing that she was right. But at the same time, I didn't want to dive back into the grind again. Over the past few months, leading two different lives, I'd learned that there was more to my existence than making more money.\n\nCassandra looked at me seriously. \"If you're not going to go back to JKE, you'll have to find a new President.\"\n\n\"I know,\" I replied, raising my eyebrows while staring at my assistant.\n\n\"_Other_ than me,\" Cassandra stated emphatically. \"I'm not accepting any job that's going to take me away from you.\"\n\n\"Fine, fine.\" I held my hands up, nodding my agreement. \"We'll work it out later. The company will survive for a few more hours. But for now, come get breakfast with me?\"\n\nShe smiled at the warmth in my voice. After a moment's hesitation, she closed her laptop and took off her glasses. \"With you? Anywhere.\" Cassandra took my extended hand, and together we joined Taylor in the bathroom.\n\nWhen the three of us finally emerged, Vivienne and Evania were already seated at the suite's dining table, eating room-serviced breakfast. Evania quickly bounced to her feet and came over to me. \"What would you like, sir?\"\n\nI grinned. \"Coffee, but I can get it myself. Finish your meal, Evie,\" I insisted. Then I turned and went behind Vivienne's chair, bending to kiss her cheek. \"Good morning, cheri.\"\n\n\"Bonjour, mi amour,\" she replied a little quietly. I noticed her looking up at Taylor and Cassandra, who were giggling about something as they filled their plates with food. But then she turned back to her cup of coffee, inhaling and pulling her heels up to perch them on the edge of her seat.\n\nI collected a plate of food myself and then sat down at the head of the table. I looked down its length, seeing the charming faces of my four favorite people in the world staring back at me. And I grinned. \"Today is gonna be a good day.\"\n\n****\n\nIt was a *very* good day.\n\nLike the whitewater rafting adventure, we'd gotten a private tour with guides who wouldn't hit on my girls. In this case, I was more worried about one of the guides hitting on *me*. Louise was an exceptionally experienced and deceptively strong 44-year-old female climber who'd been teaching in Yosemite for two decades. She had a weather-beaten face, with hard but patient eyes. And she had ZERO interest in flirting with me or anyone else. Gary, on the other hand, was 27, slim, wiry, and quite handsome. Gary was also quite flaming gay, and he got along famously with the girls, Taylor especially.\n\nSince none of us were experienced climbers, our guides spent most of the morning teaching us the basics and having us go up about twenty feet or so before coming back down to Mother Earth.\n\nI spent most of the morning watching my eye-candy instead of paying very much attention to the guides. I mean, it's not like I hadn't seen my wife both naked and in various states of undress a million times already. But watching her butt rising into the air, with those long, _loooong_ shapely legs flexing, was a little distracting. Not helping matters was that her khaki shorts were so brief that they didn't quite cover the bottoms of her buttcheeks. And her safety harness cinched that up even higher. I swore I could actually see the black strap of her thong if I looked carefully enough.\n\nThe rest of my girls were dressed the same way. For obvious reasons, no one was in a dress or skirt. Shorts and comfortable cotton tops were the uniform of the day, the skimpier the better. Vivienne wore the tiniest tee shirt that hugged her ample assets and left five inches of her flat belly bare. Taylor's was a similarly cropped belly-top, although her sleeves were three-quarter. Evania was in a tank top with a semi-plunging scoop neck. And Cassandra wore a powder blue polo shirt with a half-zipper that was dropped all the way down, ostensibly so that she could cool down in the August warmth.\n\nThe shirt might have cooled her, but the sight of my assistant's cleavage was heating me up. But then it was my turn, and all the blood rushed back up into my head so that I could focus on not making a complete fool of myself.\n\nEventually, we all felt confident enough to attempt an actual climb. Louise and Gary took us up The Footstool, taking us 120 feet into the air onto a ledge on El Capitan that afforded us some spectacular views across the valley. No, we didn't climb all the way to the top of the mammoth granite edifice, but it was high enough for us beginners to appreciate our accomplishment. Plus, we were able to hang out at the top for a long while, enjoying our lunch, before working our way back down.",
        "By the afternoon, we were all pretty tired from our climbing day. This, of course, was one of my goals in having such athletic adventures over the past week or so, to wear my girls out through exercise lest they kill me through excessive fucking.\n\nWe returned to our suite at the Ahwahnee and split up to start taking showers. The girls had organized a rotation of who got to shower with me, and it was Evania's turn. But while my sexy valet most happily served me by getting me squeaky clean and letting me fondle her fantastic body, sex was not part of the current plan. For one thing, she was exhausted, and she immediately returned to her room to take a nap.\n\n\"I'll go with you,\" Taylor said with a yawn when Evania announced her intentions. My wife glanced at me with a grin. \"We'll leave the other bedroom free in case someone wants to take care of that hard-on Evie gave you.\"\n\nI chuckled and glanced down at my crotch. Indeed, the shower play had given me a half-chubby, but I waved her off and went to make myself a cup of tea.\n\nI was alone for a few minutes as Evania and Taylor went into the second bedroom. Vivienne was showering in that room's bathroom while Cassandra was cleaning up in ours. I took the time to enjoy the sweet aroma of my tea while looking out the window at the spectacular beauty of the lush forest and soaring valley walls around me. And I got so lost in the view that I didn't even notice someone joining me in the room.\n\nAll of a sudden, I felt a pair of hands sliding around my chest, and a warm body dominated by two large breasts pressing against my back.\n\n\"I do not think I've been alone with you in two weeks,\" Vivienne sighed quietly, laying her cheek down on my shoulder.\n\nI set my drink down and then brought my hands up to cover hers on my chest, making no move to pull them away. \"Je suis d\u00e9sol\u00e9,\" I apologized. \"But we're alone now.\"\n\nMy girlfriend just continued to hug me, squeezing me tightly. I let her hold me for a moment, then turned around slowly and took her head in my hands. There was a touch of moisture in Vivienne's soft brown eyes, and a sadness I didn't understand. We'd had a great day, one that she'd enjoyed very much from what I could tell.\n\n\"What's wrong?\" I asked.\n\nShe blinked a few times, her mouth opening as if she were going to begin saying something. But no words came out, and instead she just shook her head and leaned into me for a kiss.\n\nI felt the tender touch of her lips, sweet affection more than fiery lust coming through. I inhaled sharply as sparkles went off in my brain, and I wrapped my arms around her while rotating us slightly to the side. Vivienne hummed and pressed herself against me, sliding her hands down my sides and eventually in front to my crotch. And after discovering what was waiting there, she pulled her mouth off mine and gasped with a sultry smile, \"Ooh la la...\"\n\nI chuckled. My chubby had gone down while I was staring outside. But I still had a lot of pent-up arousal after ogling my girls in their skimpy climbing outfits all day and then getting fondled by Evania in the shower. Making out with Vivienne was stoking the fire of my lust and putting new hardness into my cock, and I mentally thanked Taylor for having the foresight to leave our bedroom unoccupied for just this kind of opportunity.\n\nBut before either of us could make a move in that direction, we were startled by the sound of a door opening. I held no shame over French-kissing my girlfriend, and didn't react other than to look over. But Vivienne jerked away from me like she'd been caught making out with a boy by her mother, and she stared in mixed shock and fear at Cassandra, who was standing in the bedroom doorway wearing nothing but a towel.\n\n\"Oops, am I interrupting something?\" Cassandra asked with raised eyebrows.\n\nI chuckled and waved to the other bedroom. \"Taylor and Evania went to take a nap. Vivienne was just enjoying the brief opportunity to be alone with me.\"\n\nVivienne blushed, but started to relax.\n\nCassandra, meanwhile, just smiled and then asked the other girl rather delicately, \"Speaking of being alone... uh, would you mind if I stole Jonathan for a bit?\"\n\nVivienne blinked, not quite understanding the phrase. \"'Stole'?\"\n\nCassandra winced and then tried to explain. \"I need to speak with him, in private. It's... This is really important to me.\"\n\nAt first, Vivienne pouted. I knew I wasn't spending nearly enough time with her as she might have wanted, let alone what she'd become used to over the previous month. But at the same time, she understood just how important Cassandra was to me. \"Perhaps I could join you?\" she offered, running her hand up and down my side.\n\nCassandra blushed. \"Actually, not for this,\" she said apologetically. \"It's really... personal.\"\n\nVivienne bit her lip, clearly put out. On the one hand, she knew the pecking order, with Cassandra ranking above her. Even more, Cassandra imposing herself on me was an extremely rare occurrence. Although my assistant had made the decision to become a more emotionally intimate part of my life, she still kept to her previous behavior and comfort zone of staying aloof from the other girls, letting me play around with them as much as I wanted and waiting for me to return back to her in the end. This was probably the very first time Cassandra had ever \"cockblocked\" Vivienne.\n\nBut that didn't mean Vivienne wouldn't be upset. Any girl would, after starting something this intimate with her man and getting interrupted partway.\n\nI knew it, so wanting to prevent any ill will forming between my girls, I tried to compromise. \"How about this?\" I offered my girlfriend. \"I'll go with Cassandra now. I know she wouldn't be asking this if it wasn't important. But tonight will be all yours. You're right: we haven't had much time alone. So tonight we'll go out to dinner together, just you and me. The weather is perfect at night. We'll walk along the river, see the stars. And the whole evening will be just for you. Okay?\"\n\nVivienne still pouted, young enough to be really annoyed at having to delay her gratification. But as my offer sunk in, her spirits brightened. She looked up at me with big brown eyes and asked, \"You promise?\"\n\nI smiled and nodded, glancing at Cassandra. My assistant caught my gaze and nodded her understanding and acceptance as well. And then I returned back to my girlfriend and confirmed, \"I promise.\"\n\nVivienne smiled, already looking forward to the evening. \"Oui-oui.\" She stepped in, holding my cheeks and giving me a firm kiss. And then she backed away and turned me toward Cassandra. \"Je t'aime, mon amour.\"\n\nI didn't respond except to smile back at her, and then I joined my assistant.\n\n****\n\nCassandra's hair was still wet, and she went to sit down on the edge of the bed to continue brushing it out with her left hand. She bit her lower lip nervously as she stared blankly at the wall, clearly with something on her mind.\n\nI didn't say anything just yet. My mind was half in the other room, wondering what was going through Vivienne's mind at this moment. But then I forced myself to focus on the woman I was with, and I turned to look at my bodacious assistant.\n\nCassandra was ravishingly beautiful. Taylor herself had commented more than once that the statuesque Aussie had the face of a model and the body of a porn star. Despite the very domestic action of brushing out her hair, I couldn't help but be turned on by the mere sight of her state of dress. She still wore nothing but the white towel wrapped around her body, tied off around her breasts. The upper hemispheres of those large melons were uncovered, forming a deep valley of cleavage that somehow called to my aching cock. And on her six-foot frame, the towel wasn't long enough to extend all the way down to cover her hips.\n\nIndeed, I now saw that she was actually wearing a skimpy pair of powder blue panties, a subtle reminder that she had been on her period for the past couple of days. This hadn't prevented her from joining in on our lovemaking, as she still had a working mouth and very nimble fingers. But it did mean we had not been having coital intercourse, and I felt some of the stiffness in my erection flag as that piece of knowledge sunk in.\n\n\"What's going on?\" I asked gently. I already knew that whatever had prompted Cassandra to bring me in here was both serious and very important to her.\n\nShe didn't answer me at first, focusing on the mechanics of brushing out her hair. She looked over at me twice, asking for just a few more seconds to compose herself. And I happily granted them by pulling up a chair and sliding it next to the bed so that we could face each other.\n\nIt wasn't until I reached out and set my hand on Cassandra's thigh that she glanced up at me. Without a word, she dropped her brush to the floor and grabbed my head behind my right ear. And then she abruptly grabbed my left armpit in her other hand, yanking me up and out of my chair as she fell back across the bed, pulling me with her.\n\nOur mouths came together. We missed, slightly, at first, as our lips were slightly misaligned in our haste. But that was soon rectified and then I felt an incredible amount of emotion pouring out of her as she shoved her tongue into my throat and literally tried to devour me from the inside out.\n\n\"Mmph!\" I grunted, my eyes flying open in surprise at her sudden ferocity.\n\nBut Cassandra just held onto my head, pulling me down into the kiss even harder. And as the pleasure shot through my brain like lightning bolts, I let myself go and surrendered to the most intense passion I'd ever felt from a woman who had been with me for _years_.\n\nShe was a wild woman, thrashing beneath me. But then all of a sudden, I felt myself falling and I wailed in surprise. Turned out, I wasn't falling at all; Cassandra had just rolled us quite violently, her towel coming off in the process. In any case, I quickly found myself flat on my back as a naked Amazonian blonde loomed above me with a serious... _hunger_... in her eyes.\n\n\"I love you, Jonathan,\" she groaned animalistically before diving back down and kissing me so hard my lips started feeling sore.\n\n\"Ungh...\" I grunted at her sudden weight on my chest. Though slender, she was much denser, more powerfully built than wafer-thin models like Taylor and Ashlyn. But I managed to croak, \"I love you, too.\"\n\n\"I want you, Jonathan,\" she moaned. \"I want you.\"\n\nI wanted her, but I couldn't help but wince at the prospect of sex at this time of the month. Cassandra was right in the middle of her heavy flow days. And while I knew that her pussy was still her pussy at all times, the idea of sinking my cock into that vast pool of menstrual blood was NOT a turn on. Heck, even though I was so into anal, all of my girls knew to keep themselves clean back there.\n\nCassandra felt my unease. She whimpered before nodding, \"I know... I understand. It's just... these have been the first days I haven't been able to make love with you since Marseille. I thought I would have been able to handle it. I never had a problem skipping sex for a week out of every month before. But I've got a problem now. I want you... but I haven't been able to have you. And watching you fuck the living daylights out of the other three has been absolute *torture* for me.\"\n\n\"Ohhh... Cassandra...\" I said soothingly. \"I'm sorry. I never meant to rub it in your face or any-\"\n\n\"Oh, of course not,\" she cut me off. \"It's not your fault. And I wouldn't want to be left out for anything. Not anymore. I used to be able to stand aloof and watch you ravishing all sorts of different girls without feeling the least bit left out. You had your sex with others. I was your loyal assistant. I knew I would always be there for you when you needed me, when the others weren't around. And for years, that was perfect for me.\"\n\nShe was so exquisite, with such expressive blue eyes that I couldn't resist interrupting her for another kiss.\n\nShe hummed into our liplock, but eventually broke away and whimpered, \"But I want more now. Is that so wrong? My mom always told me to love you, but not like a wife. She told me not to let you get this deep into my heart, because she knew this would happen. Once I let myself go, I would leave myself vulnerable. And I AM vulnerable now. I don't like it!\"\n\nI frowned, my eyebrows furrowing. Despite her nudity, and the feel of her big naked tits against my chest, my attention was entirely on Cassandra's eyes. \"You... Are you regretting your decision?\" My chest was suddenly tight with the notion that she no longer wanted to be my wife, no longer wanted to bear my children.\n\nCassandra winced and gazed at me apologetically. \"No! Oh, dear heavens no. I love you, Jonathan. I've loved you forever, but for the first time, I love you with all my heart. And that's why it kills me that I can't please you. I want to love you, all the time, not holding anything back. You once said that Taylor was your Alpha, and I your Omega. Well you are BOTH to me. And for that... I want to give you everything!\"\n\n\"You do.\"\n\nShe shook her head, tears forming at the corners of her eyes. \"I don't.\"\n\nI frowned, not understanding.\n\n\"It's simple,\" she said with a distraught face. \"Right here... right now... I want to make love to you. I want to give you that ultimate pleasure. But I can't. I have to watch others doing it for you while I'm fucking bleeding from my insides.\"\n\nI shook my head. \"That's your menstrual cycle. Are you seriously trying to apologize to me for having a period?\"\n\nWith a stricken expression, Cassandra nodded.\n\nI didn't understand. \"That's ridiculous. It happens to all of you. Vivienne was on her period two weeks ago, and Taylor the week before that. It doesn't mean they love me any less.\"\n\nCassandra did start crying now, and she brushed the side of my face with her fingers. Her lower lip quivered, and she looked at me with a slightly fearful look. \"Because they *don't* love you any less. If anything, Taylor and Vivienne give you more during those times. They give you something I've never given you, something Bob Sharpley was going to take from me. So I want to give it to you first. And I'll never keep it from you again.\"\n\n\"What are you talking about?\"\n\nCassandra raised her eyebrows, then took my right hand and pulled it down her flank. Staring into my eyes, she directed my hand lower and beneath the back triangle of her panties, pushing my finger into the crack of her ass. And when I reached her rosebud, she grimaced and guided my fingertip inside.\n\nIt slipped in rather easily. Right away, I felt the unnatural slickness, a lubrication no human asshole provides on its own. And my eyebrows shot up. \"Seriously?\" I gasped in shock.\n\nCassandra's asshole was exit-only, and I'd known it for a long time. It wasn't like I hadn't tried to gain entry before. Early on in our relationship, my hands had gone wandering in that direction only to be slapped away. At other points that first year, I'd tried talking her into it. There had even been that one horrible day when I'd completely lost my marbles during the whole Brittany affair, and for a second I actually tried to force her. But it just wasn't Cassandra's thing. I knew it, and I respected it. And after all this time, I *never* thought we'd come to this.\n\nShe closed her eyes and shivered as my finger sunk in to the first knuckle, just enough to hold her sphincter open. Grimacing, she took shallow breaths to calm herself. And then her eyes opened up. There was a blue fire there I'd seen only rarely, and to be honest, it was a little unnerving.\n\n\"Cassandra...\" I ventured cautiously.\n\n\"He said I had a nice ass,\" she intoned, her voice sounding like it was coming from miles away. \"He said he was going to enjoy shoving his dick up it.\"\n\nHer eyes were still on fire, but they weren't focused on me. Her line of sight was pointed just fractionally away from me, but I didn't think she was looking there, either. Cassandra's mind was far away, in Marseille if I had to guess. She was back there, in that dumpy conference room with her wrists and ankles bound to the cheap conference table, with cotton sweats dangling from her exposed body and an evil man's hands upon her skin.\n\n\"Cassandra!\" I barked loudly, reaching up and grabbing the sides of her head.\n\nHer eyes suddenly jerked to me, and reflexively, she pushed me away. Since I was the one flat against the mattress, she really pushed herself back, scrambling off the bed and onto her feet. \"Jonathan?\" she asked, as if confused on how she got here.\n\n\"Oh, hell,\" I spat, realizing just how far out Cassandra's mind had gone. I quickly held my hands up, showing her that I wasn't a threat. At the same time, I sat up and moved off the bed to approach her. And as I came, she broke into big heaving sobs and opened her arms to meet my hug.\n\nQuickly, I wrapped her up and spun her around. She was crying, a flood of tears streaming down her cheeks. But at the same time, she raised a leg and wrapped it around my waist while grabbing my head and trying fiercely to kiss me.\n\nI was surprised. Despite her nudity, and despite all the horniness I'd built up over the entire morning, this was not a sexual situation for me. One of the great loves in my life was having a momentary breakdown over her rape of less than a month ago. And I felt inside my boxers that my cock was as limp as an overcooked spaghetti noodle.\n\nBut Cassandra wasn't having any of it. \"Take me, Jonathan,\" she whimpered in between kisses while pulling us back to the bed. \"Take me!\"\n\n\"Cassandra,\" I groaned. \"Wait a minute.\"\n\n\"No. I have to do this! Please?\"\n\nI was still in shock at the rapidly-shifting mood swings she was going through. Cassandra was naked, all big-titted supple-curved blonde bombshell, and rubbing herself against me. She wanted to have anal sex, but I was still so unnerved that I couldn't muster any enthusiasm.\n\n\"Please?\" she repeated, pulling away long enough to stare at me.\n\nAnd she WAS staring at me. For now, at least, she was *here*, not a million miles away. The blue fire was still in her eyes, but those eyes were locked onto me. And there was a plea behind them. \"I have to do this.\"\n\nShe grabbed my hand again, pulling it around to cup her ass. I felt the shiver run down her spine, and the goosebumps forming on her skin as her fear welled up in her again. And I knew right then and there that no matter what, it wasn't going to happen like this.\n\n\"Cassandra... no.\"\n\n\"Please...\"\n\n\"You don't want to,\" I stated knowingly.\n\n\"I _need_ to.\"\n\n\"But why?\"\n\n\"Because... I have to give you ALL of me.\"\n\n\"You already do.\"\n\n\"Not this.\"\n\n\"I'm not asking for that.\"\n\n\"It's not a question of asking for it. I love you. For the first time, I'm letting myself love you with all my heart. I love you with every fiber of my being. And now I want to love you with Every. Single. Square. Millimeter of my body.\"\n\nI felt my breath catch and my lower lip quiver at her words, spoken so powerfully and so seductively in her Aussie drawl. Cassandra had moved herself up against my chest, husking those words with her lips just two inches away from mine and her big blue eyes boring into the back of my skull.\n\nBefore I even thought about it, I reached up and grabbed her arms. And moving myself even closer, taking those two inches down to one, I intoned an imperative, \"_*No*._\" It was my command voice, and all of a sudden I was once again the employer and she my personal assistant.\n\nCassandra's lip quivered and fear was back in her eyes. She was scared, _petrified_ that she'd let me down. \"Why not? Don't... don't you love me anymore?\"\n\nI squeezed my eyes shut, tightening my grip on her arms at the same time. For years, Cassandra had known I loved her. I'd always loved her. I'd always wanted more from her, wanted the openness of her heart, wanted to tear down the wall separating employer from assistant. In many ways over the past few years, she was even closer to me than my own wife. There was only the self-imposed gulf that separated herself from me. But I'd ALWAYS loved her.",
        "\"I love you,\" I growled through gritted teeth. \"You KNOW that. And it's because I love you that I won't let you do this.\"\n\n\"I want to,\" she whimpered, blubbering as her tears were now overrunning her upper lip and into her mouth.\n\n\"No you don't. You're trying to force yourself into doing it for me. But I know you. I love you and I've always known you. And this is not the time. Maybe someday... when you're ready. But now is not the time. And it's because *I* love *you* that I won't let you do this.\"\n\n\"I need to please you...\" she whispered, as if her voice were deserting her. Cassandra had gone deathly still, her eyes losing their fire. And she stared at me with a rather haunted expression. \"I'm failing you now. I'm failing you again... And you're going to leave me...\"\n\nHer voice trailed off and I felt the strength leaving her bones. It was Cassandra's greatest fear: failing me. And in that, she wasn't a normal companion.\n\nTaylor loved me passionately. She had her faults and bad impulses. We had our fights and our disagreements. But Taylor's biggest fear was betraying me. Even through our open relationship, with Taylor seducing other men and me screwing half of her model friends, we trusted each other. She'd lost my trust when she first sold me out to the paparazzi to advance her career five years ago. She'd been building it back ever since, but there was always that fear of losing it again.\n\nCassandra, on the other hand, feared failure more than anything else. She had a job, a job she wouldn't relinquish even now. She believed herself responsible for many of the details in my life, from my financial portfolio to the way my household was run to the harmony of the women who shared my bed. She wasn't scared of making me angry, or making a decision that she thought I might disagree with. She downright did the opposite of what I wanted on several occasions, employer-relationship be damned. She did it because she thought she knew what was best for me, and she was stubborn enough to stick to her principles even if it meant pissing me off. Usually, she was right. And those end results justified her decisions. To have given into what *I* (the illogical, impulsive _male_) wanted would be to fail me.\n\nAnd she felt like she was failing me now. For whatever reason, Cassandra had gotten into her head that letting me buttfuck her was a requirement of her duty. For me to not do so would mean that *she* was letting *me* down. \n\n\"Cassandra, look at me,\" I insisted. Her eyes had dropped down in her misery as she threatened to collapse, and I struggled to hold her head up. \"*Look at me!*\" I commanded.\n\nInstantly, I felt a little strength come back to her legs. And her eyes were open wide and staring at me again.\n\n\"This is NOT about sex. Do you understand? If I just wanted to get off, there are three other women here who could do that just fine.\"\n\n\"See! You don't NEED me,\" she whimpered, starting to cry again.\n\n\"That's not true! I need you. I WANT you. But not like this! Don't you get it? I want to be *happy*, Cassandra. I don't just want to get laid.\"\n\n\"Fucking makes you sooo happy. Fucking ASSES makes you even happier.\"\n\n\"And seeing you in pain does the exact opposite!\"\n\nShe whimpered and collapsed. I'd stopped holding her up, and belatedly tried to catch her. Fortunately, we were close to the bed and ended up falling half onto it. After a second or two of panic, we both realized that we weren't falling any further, and she buried her face in my chest.\n\nI sighed as I wrapped Cassandra up in my arms and held her. Once again, it was so strange to feel her so vulnerable. Ice Queen intimidator aside, Cassandra had been my pillar of strength for five years. I NEVER had to comfort her; she was always there to comfort me. She was the most loyal and dependable personal assistant imaginable: steadfast, stubbornly resolute, and supremely confident at all times.\n\nAnd yeah, it didn't hurt that she was drop-dead gorgeous.\n\nFor years, I had been in awe of her. She was like a super-being, almost too perfect. She was intelligent, focused, and driven to accomplish her goals. She was a phenomenal lover, completely absent of jealousy, and asked for almost nothing in return. She was a fantasy.\n\nBut it turned out there was a human beneath that perfection. She kept her emotions tightly bottled up, but there WERE emotions in there. And for better or worse, there was no closing them up again.\n\nBob Sharpley had broken her. The four billion dollar theft was nothing. It had hurt her sense of protecting my family's financial future, but she'd simply worked that much harder to get it back, succeeding in the end. The loss of my son had focused her on keeping me sane, so that I could work on keeping Taylor sane. *I* had failed in that, but Cassandra had not failed me. Sure, I'd changed my name and jetted away to Europe, but she let me go. And even though she'd missed me terribly, though it had hurt her so much to be away from me, she'd deliberately 'not found' me, giving me time to heal.\n\nBut Bob Sharpley had broken her. She'd survived my three month absence. She'd survived my return to New York and subsequent departure to live in Manhattan as Tom Eriksen. But the woman who was kidnapped and taken to Marseille had not come home.\n\n\"You're hurt, Cassandra,\" I said quietly, still holding her head against my chest. \"You've denied it long enough. You've told yourself it never happened... but it did. You were raped, and you're hurting. But we're going to get through this.\"\n\nHer breathing slowed, and her sobbing moans faded away. She nuzzled her face deeper into my chest, firm enough and for long enough that I worried she was suffocating. But I simply stroked her back and held her tightly, trying to impart with my entire being that *I* would be *her* rock. \"I'll always be here for you.\"\n\n\"That's just it,\" she sniffled. She took a deep breath, and then in a quietly serious voice, she stated, \"It's not the rape. I can push that to the back of my mind. I can handle that.\"\n\nShe said it with such confidence that I couldn't doubt her. And not quite so sure of myself all of a sudden, I asked hesitantly, \"Then what is it?\"\n\nCassandra exhaled, hard enough for me to feel the heat through my shirt. \"I nearly lost you...\" she whimpered softly. \"I nearly lost you...\"\n\n\"When?\"\n\n\"I saw you gone. I KNEW you were gone. I saw him standing above you, holding the gun in your face. I closed my eyes; I couldn't bear to watch. But I did watch. I watched him pull the trigger. I watched you DIE.\" She pulled her face back and looked up at me, her lower lip quivering.\n\nI saw the absolute _*terror*_ in Cassandra's eyes. Even now, weeks after it had happened, she was reliving the moment. Urgently, I held her with one arm and stroked her face with my hand, brushing tears away from her cheeks. \"I'm right here,\" I insisted firmly. \"I'm right here!\"\n\n\"I can't lose you again, Jonathan...\" she whimpered, more tears flowing. \"I can't lose you.\"\n\n\"You won't lose me! You'll never lose me!\" I practically hissed, wrapping her up against me tightly and rocking our bodies back and forth on the bed.\n\nShe kept crying for a long few minutes. I kept repeating that I was right here, that I wasn't going anywhere, and that she wasn't going to lose me no matter what.\n\nI didn't know if I was getting through to her. She just kept crying and crying and crying. All I could do was keep reassuring her that we would be together forever. I'd already promised I would never leave her again. And I meant it.\n\nAt some point, the crying stopped. I kept rocking her for a while longer, making sure that she wasn't going to start up again. And when I finally peeked down at my chest, her eyes were closed in blissful sleep.\n\nEmotionally spent, I was more exhausted than if we'd climbed up and down the full height of El Capitan a dozen times. So exhaling a great sigh, I closed my own eyes and let myself drift away.\n\n****\n\nConsciousness seeped into my brain slowly. Through my still-closed eyelids I could see the red haze of morning light. And as various nerve endings awoke along my body, I felt a familiar sensation.\n\nSomeone was sucking on my dick.\n\nBefore the sandy crust would allow my eyelids to open, I smiled and reached up a hand to touch Cassandra's head. Under my fingers, I felt the silky smoothness of her hair cascading around her ears and down towards her shoulders.\n\nIn my slumber, I forgot about the drama just before our nap. As I cracked my eyelids open, all I could think of was how beautiful she looked, even more so because her mouth was stretched wide by my cock.\n\nBut then it all came back to me, and I know a pained expression spread across my face because she winced with her eyes and then pulled off me. Shaking her head, she quickly stated, \"I'm better now.\"\n\n\"Really?\"\n\nShe nodded and then sighed, still stroking my shaft with her left hand. \"Please... let me serve you.\"\n\nI grimaced, debating with myself whether to let her do it. It wasn't that I hadn't fantasized about cornholing the bosomy blonde bombshell. But to do so still felt inherently _wrong_ to me. \"You know how I feel about women doing something sexual for me because of 'obligation'.\"\n\n\"I want to please you.\"\n\n\"You please me just by being with me.\"\n\n\"But I can't do anything more than this for you right now.\" She frowned, still stroking my cock.\n\nJust then, a new idea popped into my head. I still remembered the sight of my busty assistant with her polo zipped all the way down during rock climbing. I still remembered her standing in the doorway wearing nothing but a towel, with her big tits standing up above the towel line and the deep valley of her cleavage calling to me. Cassandra was naked now, and I reached up for her shoulders. \"Sure you can,\" I replied with a grin. And then I delicately took hold of her and directed her body until I could bring her swaying tits down on top of my erection.\n\nCassandra looked down at my banana bent prick splitting her breasts, and then glanced up at me with a new light in her eyes. \"Is this what you want?\"\n\nI licked my lips, ogling those pendulous melons that were so big, ripe, and round that it really wasn't fair to the lingerie models of the world. \"_Oh, yeah,_\" I nodded wolfishly. \"I told you five years ago we could do this anytime you wanted.\"\n\nShe grinned, and then with a renewed energy, slid back off the bed and grabbed my ankles, pulling me to the edge of the mattress. Then, she had me sit up while she knelt on the floor. And taking hold of her own chunky breasts, she enveloped my meat and bent her head to lick at the crown. \"Fuck my tits... _sir_...\" she purred.\n\nI'd been pent up all morning, teased and flirted with and groped in the shower. Cassandra even retrieved a bottle of scented oil, rubbing her own boobs so that I had a smooth gliding tunnel of titflesh to rut in. Her hooters were big enough to completely envelop my cock, surrounding me in a wet warmth just like her pussy. Only this way, she also had a mouth waiting at the back end, with an agile tongue and sucking lips that simply could not be replicated by her loins.\n\n\"Fuck my tits...\" she kept humming. \"Take your pleasure from my body. Feel my massive mammaries cocooning you, welcoming you, embracing you. They're yours. They'll only ever be yours. And you can fuck them whenever you want.\"\n\n\"Oh, ggg-gawd, Cassandra,\" I groaned, already nearing my release.\n\n\"I'm so hot and horny for you, Jonathan. It's such a turn on to kneel before you, to suck your big dick into my mouth, and to feel your thick manhood rubbing my pliant breasts. Look at my nipples. See how thick and plump they are? I'm so turned on by this. I wish we could be fucking, I really do. But right now I'll settle for a big load all over my face. Can you give me that?\"\n\n\"Fuck! Fuck!\" I grunted, speeding up. Cassandra had never been a very vocal lover. She hummed and moaned with the best of them, but she wasn't usually a dirty talker. Was this a new side of her coming out? Was this the wanton sexpot who'd always been buried beneath my assistant's impenetrable armor? She was letting herself go, giving into her own emotions and urges. And I couldn't be more thrilled.\n\n\"Fuck my tits! That's it, squeeze my breasts for me! Feel how firm and yet supple they are! They're yours! Take them for your pleasure! I live to serve you... _sir_... And all I ask is that you give me a big, creamy, load of- AAAHHH!\"\n\nCassandra started howling as the first jet of spunk splattered against the underside of her chin. She arched her neck, throwing her head back while squeezing down on her own boobs and humping rapidly, trying to jack me as if her tits were hands. Another ribbon sprayed out from my tip, catching her right in the throat. She humped me with her breasts a few more times, and then pulled back to take me into her actual hands. And then bending her face down, my devoted personal assistant closed her eyes and pumped out the rest of my spunk right against her forehead so that trails of creamy jism began to trickle over her nose and eyelids.\n\nWhen I was done, all I could do was groan and collapse onto my back. Cassandra still held my dick in her hands, absentmindedly continuing to stroke it. But at last, she cracked her eyelids open and scraped away the globs of spunk trying to paint them shut.\n\n\"I love you, Jonathan,\" she said with full, heartfelt emotion, looking right into my eyes as soon as she was able. \"I want to be with you forever, and I'll do anything necessary to make sure of it.\"\n\nSomehow, she was even more intoxicating with my cum all over her face. \"I know,\" I replied confidently.\n\nShe winced briefly, then steeled herself and added, \"Someday, I'm even going to give you my ass. I'm not ready yet, I know it. But... I will. I love you, and because I do... I _will_ do it.\"\n\nI took a deep breath and then sat back up, moving myself close to her. I cupped her cheek, not caring if I got a little cum on my fingers. And I stared her right in her sky blue eyes. \"I love *you*, Cassandra. I want to be with *you* forever. And because I do...\" I reached back and patted her ass. \"You'll never have to.\"\n\n****\n\nEveryone was up by the time Cassandra and I emerged, fully dressed and cleaned up after our time alone. My assistant was beaming as we came out, grinning from ear to ear like a cat that got the canary. And her smile was so infectious that the other three girls couldn't help but smile with her.\n\nI decided right then and there that \"alone time\" was exactly what all of my girls needed. We'd been traveling for over a week now, spending all our time in a big group of five that reminded me of traipsing around the Mediterranean. Then, I'd been running to escape my life and keep myself distracted. And I'd also had precious little \"alone time\" with any of the girls until Vivienne started monopolizing me for herself.\n\nI'd also had precious little \"alone time\" on THIS trip. After the orgy at Mount Rushmore and then sharing the one big tent on the river rafting trip, I'd pretty much spent the past week and a half with a minimum of two women by my side at all times. Sure, it was fun to get the attention from multiple sides, but I wasn't getting the emotional connection with each of them that only happened when everyone else was out of the room.\n\nVivienne, of course, was overjoyed when I reminded her of my promise to spend the evening alone with her. And both Taylor and Evania were quite pleased when I told them that they'd be next. Evania tried to wave me off, saying that it was unnecessary for me to leave the others. But I could tell she was secretly looking forward to it anyways.\n\nFirst, however, I had my date night with Vivienne. Yosemite Valley was a little short on five-star restaurants, being a National Park and all. But neither of us minded as the hotel concierge arranged a picnic basket for us and the two of us walked hand in hand out into the open meadow just behind the hotel. As nightfall approached, the entire meadow was shrouded in shadow and empty of any other occupants. But Half Dome soared above us, the sun's final rays making the big flat surface light up with an amber glow. And after finding a good spot, I took off my backpack and started laying out the large picnic blankets that would keep us comfortable on our own private island, a clearing in the middle of the long grass.\n\n\"That's quite a sight, isn't it?\" I gestured up to the dome before bending over and fishing out the bottle of wine with two glasses.\n\n\"It's fantastic!\" Vivienne enthused, in awe of the vastness around us. \"There are some nice places in France. But I have NEVER seen anything like this!\" She stared upward, looking to the left at the Royal Arches and North Dome. I put the half-full wine glass into her hand, and she took it without looking back at me. She sipped at it absentmindedly, glancing away to the right towards Glacier Point. And only after another minute did she finally look back at me.\n\n\"Sorry...\" she blushed. \"I am finally alone with you, and I am looking at the rocks.\"\n\n\"Don't be,\" I chuckled. \"I was also enjoying the view.\"\n\nVivienne felt my eyes roaming up and down her body, and she laughed prettily. She was attired for a date, in a red dress that was loose around her legs to allow easy movement, but tight around her torso to emphasize her fantastic figure. No jackets were needed in the August humidity. And when she lay down on her side, propping up her head in her palm with her elbow on the blanket, I got a very nice view of her cleavage.\n\n\"You take me to the most amazing places,\" she sighed, her French accent making her statement even more full of wonder. \"I always wanted to see America. But all you hear about are New York and Miami and Hollywood. I never thought about going to South... ah... Dakota? Or to river raft in Idaho.\"\n\nShe giggled and shook her head. \"Or even golfing. I never thought I would go *golfing*. I was terrible!\"\n\nI chuckled. There was only so much to do around Mount Rushmore, so I'd dragged the girls into playing nine holes with me at the local course in Rapid City, South Dakota, for a couple of hours. It was NOT what one typically expected of a jet-setting billionaire playboy. \"You did okay.\"\n\nShe shook her head. \"I was *terrible*. It was fun, but so frustrating!\"\n\nI chuckled.\n\n\"And now here...\" She swept her hands across the sky. \"It's... it's not what I expected when you brought me to America.\"\n\nThere was an extra hitch in her voice when she said that, and I set down my wine glass and leaned forward. \"What *did* you expect?\"\n\nVivienne had also set her drink down, on a flat board between us meant to provide a stable surface so our drinks wouldn't spill. She traced the rim of the wine glass with her finger nervously and shook her head. \"Nothing, really.\"\n\n\"No, I mean it. What did you expect?\"\n\nShe looked up at me, a twinkle in her soft brown eyes. \"I expected the billionaire, I suppose, like you were in Greece: Expensive restaurants, luxurious hotels, discoth\u00e8ques and parties.\"\n\nI grinned. \"We've done some of that.\" I pointed back to the Ahwahnee. It wasn't the Bellagio, but it was still a very nice hotel and we had the most expensive suite available.\n\n\"Oh, I know, I know,\" she nodded. \"But we also camped in a tent for most of last week. And we have not actually been to a discoth\u00e8que since Mykonos.\"\n\n\"Are you saying you want to go dancing?\" I arched an eyebrow.\n\nShe shook her head. \"No, no... Please, I am not complaining. I am just saying it is different.\"\n\n\"Well what do you want to do? Tell you what: YOU pick our next destination, anywhere in the world! We've been hopping around the U.S. for a while, gradually moving westward. It's been a while since I got to see you in a bikini. Hawaii, maybe? And I haven't taken you to Asia yet. You have NOT tasted sushi until you've had it in Japan. Or maybe-\"",
        "\"Tohm, Tohm,\" Vivienne giggled, interrupting me. \"I just want to be with you.\"\n\n\"You are. Right here. Right by my side.\"\n\nShe gave me a puppy dog look, a *sad* puppy dog look. \"No, not right by your side. Taylor and Cassandra are always with you.\"\n\nMy eyebrows furrowed and I sighed. \"Vivienne, it's not-\"\n\n\"No, no,\" she cut me off. \"You don't have to explain. One is your wife and the other has been your assistant for years. It is what it is. And it is just as you told me in Athens.\"\n\n\"I'm sorry. I know you've been feeling a little neglected lately. That's why I'm trying to make it up to you. We're here, aren't we? Just you and me? I know you want more time with me, and I'm doing my best to give it to you.\"\n\n\"Tonight it is for me. But tomorrow it will be for Taylor, and for Evie. And I will be left behind again.\"\n\nI sighed in resignation. \"I'm sorry.\"\n\nShe pursed her lips, looking at me intently. She scanned my eyes as if she were looking for something. And I tried to just stare back at her with all the warmth and affection for this enchanting young woman I'd built up over the past couple of months.\n\nI suppose Vivienne saw what she was looking for, because after a moment, a smile spread across her face. She breathed a sigh of relief, then tilted her head and beamed even brighter. \"Je t'aime, Tohm,\" she said endearingly.\n\n\"Je t'aime, Vivienne,\" I replied just as warmly.\n\n\"I believe you.\"\n\n\"You should.\"\n\nShe nodded. \"I know we have only been together for a short time, and while we have become close, it is not the same as with the others. Such would just be impossible after only two months.\"\n\nI nodded, starting to feel relaxed as she was thinking quite reasonably. \"Feels like it's been forever. But you're right: it's only been a couple of months.\"\n\n\"Still, I have hope for the future that this will change. Today, I am only your girlfriend. But someday, I hope I can be more. Please, there is room in your heart for one more, no?\"\n\nI smiled and nodded. \"I think so, yes.\"\n\n\"Then I will dream of that future.\" Vivienne grinned and reached up to hold my head. \"But for today... please... Make love to me, Tohm.\"\n\nI arched an eyebrow and quickly scanned the open field we were sitting in. The sky was rapidly darkening as the sun disappeared behind the mountains, but there was still a lot of ambient light around us. \"Here? Evania promised to leave your bedroom empty tonight.\"\n\n\"Here, there, anywhere. I only have so much time alone with you.\" She sat up a bit and smiled. \"Perhaps we can do it once here, in this wonderful meadow. And after you have cum deep inside me, we will go back to the room and do it again.\"\n\nI smiled. \"Sounds like a plan.\"\n\n****\n\nJust a few weeks ago, while we were fucking in the Common Room of my own home, Vivienne had proclaimed that she would fuck me anywhere, in front of anyone. At L'Abreuvoir restaurant in Athens, Vivienne had given me a semi-public blowjob and not only insisted that she would suck my cock at any meal, _every_ meal, but she promised that she would strip naked and dance on top of the table at my slightest whim.\n\nSo I suppose I shouldn't have been surprised that she had no qualms about a little public sex with our meal here in the meadow. I wouldn't say it was a special turn-on for her or anything. She wasn't necessarily hotter or more aroused because of the risk of discovery. Whether or not someone saw us really didn't _matter_ to her, as long as she got to be with me.\n\nAt least the long grass hid our bodies once she bent over to dangle her tits in my face. We were a hundred feet away from the nearest trail, and someone would have to practically be on top of us to actually see anything. Even if they did, we were still sort of wearing our clothes. I still wore my shirt, but my shorts and boxers were around my ankles. Vivienne still wore her dress, though her skirt was bunched up around her waist and her shoulder straps had been pulled down to allow me access to those great, wonderful melons on her chest. On the other hand, Vivienne wasn't doing anything to muffle her ecstatic moans, and when she came, I was sure her screams carried for miles and echoed off the valley walls.\n\nFortunately, she wasn't screaming very often. Now Vivienne and I had engaged in some pretty wild sexual encounters in the past few months. She was an energizer bunny in the sack, and liked nothing more than to throw her body around and contort herself into whatever position would lead to the most pleasure for both of us. We'd certainly fucked each other into oblivion a few times since we'd met. But this time, Vivienne had asked me to \"make love\" to her, and that's exactly what we were doing.\n\nHer body movements were slow and languorous. While she was on top, she undulated herself up and down my pole, using every last millimeter, feeling the full length of my cock sliding out of her pussy until she almost came off before descending just as deliberately to the point that our loins could be pressed together no further.\n\nWhen I was on top, she hugged my chest to hers, gripping my shoulders like she never wanted to let go and hooking her feet around my ankles to feel my skin against hers along the full length of our sweaty bodies.\n\n\"Tohm...\" she breathed, staring deeply into my soul with big, liquid brown eyes. \"Mon amour...\" she cooed, her face filled with delight.\n\nI just smiled and gave her what she wanted to hear, cooing right back, \"Mon cheri...\"\n\nShe had her second climax just then, an orgasm that built like an ocean wave rolling up the beach. I felt her quiver in her loins, the tremors spreading to her thighs as she clamped them against mine. The undulations carried up into her midsection, and then higher still until she was writhing uncontrollably beneath me. Her breath came in shorter and shorter gasps, noiseless save for the air rapidly shooting in and out of her throat. And when that orgasmic wave finally crested over, she screamed out once, her body locking up along with her inner muscles that clenched at my cock like a vise.\n\nI was nearing my limit as well, although the feel of her orgasm beneath me wasn't quite enough to set me off. I reached both of my hands down to Vivienne's hips, holding onto them as I bore down and started driving myself a little harder into her body. And once she recovered from her climax, she helped me out by finally lifting her legs up around my waist and rolling her hips upwards to let me get even deeper.\n\nThis position also raised her ass off the blankets. My hands shifted a little lower, letting me fill my palms with her buttcheeks. I suddenly remembered the encounter I had with Cassandra a couple of hours earlier, when my devoted assistant had offered me her asshole only to have me turn it down because I recognized her fear.\n\nVivienne, on the other hand, was well-practiced at sodomy, willingly accepting me and enjoying it every time we did it. I felt a surge in my loins as I thought of buggering my gorgeous young French babe, and my fingers inched closer into her asscrack to begin probing that crinkled rosebud.\n\nBut Vivienne jerked and pulled her butt away. \"Please, Tohm. Not this time,\" she entreated quietly.\n\nI arched an eyebrow in surprise but kept pumping.\n\nShe took a shallow breath and canted her eyebrows to the side, giving me those puppy dog eyes again. \"Finish in me. I want to feel it in me. Please?\"\n\nHow could I say 'no' to that face? I smiled and nodded. There would be plenty of opportunity later for assfucking. My Vivienne had asked for me to make love to her, and now reminded, I intended to finish that way. I raised my hands back up, cupping the sides of her face as I tilted my head and kissed her. She moaned happily and extended her tongue out. And as our kiss built in passion, so did the pressure in my balls.\n\n\"Cum in me, mon amoureux...\" she moaned, cinching her arms and legs around me tighter. \"Fill me!\"\n\n\"Oh, Vivienne!\" I groaned, nearing my release. Her inner walls clamped down around me, squeezing and releasing, coaxing out my sperm.\n\n\"Cum in me!\" she moaned louder. \"Cum in me s'il vous plait!\"\n\nI felt the release a split-second before it actually came out. One moment, I was pumping madly, delighting in the exquisite friction of her clasping tunnel around my prick, as well as the slicker friction of her sweat soaked tits being crushed down by my chest. The next moment, I was gasping out, \"CUMMING!\" as I dropped all my weight down onto her, stopping my pumping entirely as I sank down until my cockhead was pointing at the very entrance of her womb.\n\nAnd then I blew. Like a nuclear bomb had gone off, the explosion of my loins made the world go suddenly silent around me. My eyes were filled with white light. And as if there were a sudden vacuum created at the very center of Vivienne's womb, my sperm madly rushed in to fill the void.\n\n\"UNGH!\" I grunted, my hips retracting and then jerking forward like they were spring-loaded, with another great burst flowing out of me.\n\n\"UNGH!\" I grunted again, blasting off another wad.\n\nVivienne giggled, clutching all four limbs around me. She rubbed my back, stroking my spine and gasping into my ear as I sprayed more and more spunk into her body. She shivered and moaned, things that only inspired me to flood her with even more cum. And she whispered something so softly in French that I didn't understand.\n\n\"Nggaaahhh...\" I finally sighed, sagging my forehead onto the blanket next to her head as the rest of my body collapsed like so much dead meat. I was gasping for air, surprisingly tired from the final sprint despite not having to exert much energy for the twenty minutes before. And my adoring girlfriend simply cuddled me, cooing more endearments in French that I could now clearly hear, even if my tired brain didn't want to attempt translation.\n\n\"Someday... maybe soon,\" she finally said in English. \"I will give you a reason to love me as much as you love them.\"\n\nInwardly, I groaned. The last thing I wanted was for Vivienne to continue comparing herself to Taylor and Cassandra. Still with my half-naked body pressed up against hers and my cock inside her pussy, I sighed and levered myself up onto my elbows. \"It's not a comparison.\"\n\nShe shrugged, as if my words didn't matter. \"Still... I hope that I can be the one to give you back the son you lost.\"\n\nThere was a quiet seriousness in Vivienne's voice, and an extra weight lent to the specific words she'd chosen. I didn't get it right away, but a moment later, my eyebrows rose.\n\n_Waaaait a minute. We've been together two months, and she's talking *kids*?_ My jaw dropped open and I looked down at my girlfriend. \"Vivienne, I think it's a little early for us to be talking about-\"\n\n\"You WANT more children. I know you do. That is why you had your medical procedure reversed. And you and Cassandra have been working hard at this, no?\"\n\nI raised my eyebrows. \"Well, yes. But-\"\n\n\"I told you,\" she interrupted. \"I know that today, I am only your girlfriend. But hopefully in the future, I can be a mother of your children. That is why I stopped taking my birth control pills.\"\n\nMy eyebrows were already raised sky high, but now my eyelids joined them. \"You _WHAT_?\"\n\nShe beamed at me happily, then clenched her pussy muscles, sloshing around the womb full of sperm she had inside. And giggling, she added, \"Maybe I am already pregnant now!\"\n\n****\n\nIn retrospect, I probably shouldn't have gone ballistic the way I did. But what would *you* do if your girlfriend of two-odd months ambushed you with the news that she'd gone off her birth control mere seconds after you filled her womb with all your sperm?\n\nI yanked myself out of her faster than if I'd stuck my prick into an electrical socket. I pulled my shorts up and stumbled to my feet while she lay there with her dress in disarray and my cum leaking out of her pussy, giving me an ashen look of heartbroken confusion. And she started crying when I yelled, \"HOW COULD YOU DO THIS TO ME?\"\n\nNightmares of Hal Reynolds marching into my old penthouse apartment with Kaitlyn's positive pregnancy test flashed before my eyes. All the paranoia from years of ensuring I didn't cum inside anyone not on \"The List\" created instant pressure against my brain. And I clawed at my own skull, turning around and pacing while squeezing my eyes shut so hard in a futile attempt to make the problem all go away.\n\nVivienne pregnant? Oh, I wasn't ready for this.\n\nSnapping my fingers, I stuck my hand down at her. \"Get up. We have to go.\"\n\n\"G-g-... go?\" she whimpered.\n\n\"Allez!\" I snapped, pointing back at the hotel and then sticking my hand out at her again.\n\nTerrified, she reached up and took my hand, allowing me to yank her up to her feet. I immediately bent and started packing up everything, just tossing them haphazardly into the picnic basket.\n\nVivienne glanced around the open meadow, now fully cognizant of her nudity. She hurriedly pulled the top of her dress up and fixed her skirt down. She didn't have time to grab her panties, as I had already bunched it up in the blankets and stuffed them into the backpack.\n\n\"Tohm, please...\" Vivienne whimpered.\n\n\"Not now,\" I barked, standing up and hoisting the pack over my shoulders. I grabbed up the picnic basket with one hand and grabbed hers with the other. And as if she were an insolent child, I half-dragged her back along the trail to the hotel.\n\nEvania met me at the door with a bright smile that disappeared the instant she saw the look on my face.\n\nI pushed the picnic basket into her hands and dropped the backpack on the floor. \"Deal with those,\" I ordered. And then I dragged a still-crying Vivienne over to her bedroom.\n\nOnce there, I pointed her at her bags and ordered, \"Find your pills.\"\n\n\"Tohm...\"\n\n\"FIND THEM.\"\n\nShaking like a leaf, Vivienne started rifling through her bag.\n\n\"When did you stop taking them?\" I growled. She didn't answer me right away, so I barked two seconds later, \"_*When?*_\"\n\n\"Deux semaines!\" she answered me, crying. \"Two weeks!\"\n\nBy now, Taylor and Cassandra appeared in the open doorway, curious as to what was going on. I pointed at Cassandra and snapped, \"How many pills does she need to take as emergency contraceptive?\"\n\nBoth my ladies' eyes went wide at that question. Cassandra stuttered before her mind locked in. \"Uh, depends on which brand.\"\n\nTaylor was thinking an extra step ahead. \"Let me just get a proper morning after pill.\" She turned and went for a phone.\n\nVivienne finally came up with her pills. She turned to me, rivers of tears streaming down her cheeks. \"Here they are.\"\n\n\"How many?\" I barked at Cassandra.\n\n\"Jonathan, just wait for Taylor to-\"\n\n\"Forget it,\" I interrupted and jabbed a finger in Vivienne's face. \"Take one. Now.\"\n\n\"Jonathan, that won't do any-\"\n\n\"NOW,\" I ordered.\n\nQuivering, Vivienne gave me an agonizing look. She was trembling, and in a very quiet voice, she whimpered, \"Please...\"\n\n*\"NOW!\"* I thundered.\n\nSqueezing her eyes shut, Vivienne went to the sink and poured a quick glass of water. While I watched her like a hawk, she downed her pill. And then she immediately collapsed to her knees, bracing herself against the cabinet, sobbing so hard that she rattled the drawers.\n\nI turned and walked away.\n\n****\n\nI don't know how Taylor knew where I was, but armed with only a flashlight, she found me anyways.\n\nI was sitting on a rock by the Merced riverbank, near to the now dry Royal Arch creek bed. A tree overhead hid me in the shadows from the moonlight, and yet there she was, my wife climbing onto the big rock beside me.\n\nThe first words out of my mouth were: \"Did she take the morning after pill?\"\n\n\"Yes,\" Taylor replied quietly, her eyes straight ahead.\n\nTogether, we stared out across the bubbling water for a few minutes. Nothing was said. She simply slipped her hand into mine and waited. And when I was ready, I took a deep breath and explained, \"It was a great date.\"\n\n\"Until...\" she led me.\n\n\"Until Vivienne told me she'd stopped taking her pills two weeks ago and was hoping she was pregnant.\"\n\nTaylor winced and looked at our joined hands. \"Still... you could have handled that better.\"\n\nI closed my eyes and hung my head, remembering how Vivienne looked huddled up against the cabinet, absolutely _shaking_. Without looking up, I asked, \"How is she?\"\n\nTaylor shook her head. \"I don't know. Evania and Cassandra stayed with her. I came looking for you.\"\n\n\"I should go back there.\"\n\n\"Yes, you should. But first, talk to me.\"\n\nI exhaled. \"Do we have to?\"\n\n\"Tell me what's bothering you so much?\"\n\n\"Bothering me? My girlfriend just told me, 'Surprise! I might get pregnant!' I'm not supposed to be bothered by that?\"\n\nMy wife shrugged. \"Don't you want more kids? Isn't that what we're trying for with Cassandra? She and I are already going through her ovulation calculations.\"\n\nI sighed. \"Of course I do. It's just... I want my children to be with you and her.\"\n\n\"But not Vivienne?\"\n\n\"No, of course not.\"\n\n\"Why not?\"\n\n\"It's not like that with her. You're my wife. Cassandra's... like a wife. C'mon, you don't really need me to try and come up with a definition for her, do you?\"\n\n\"So you're saying you ONLY want kids with me and her.\"\n\n\"Yes.\"\n\n\"What about Ashlyn?\"\n\nI took a deep breath and then exhaled slowly. \"That was a completely different situation. Joey was an accident. I don't regret having her, and right now I miss her.\"\n\n\"Her birthday party is in a week.\"\n\n\"I know.\" I sighed. \"But as much as I love her, I can honestly say I would never have *planned* her with Ashlyn.\"\n\n\"Perhaps. But you two were talking about having more. In Tahiti, remember?\"\n\nI closed my eyes again, remembering a simpler time. \"That was a long time ago. Ashlyn and I were different people back then.\"\n\n\"But if nothing had gone wrong, you would have had children with someone other than me and Cassandra. Specifically: with your *girlfriend*.\"\n\n\"Yes. But not Vivienne.\"\n\n\"Why not?\"\n\nI rolled my eyes. \"She's just a kid.\"\n\n\"She's 23. Lots of women her age have children.\"\n\nI shook my head. \"It's more than that. Ashlyn and I were discussing our plans together. Vivienne and I had no such discussion. She made a decision impulsively, without my input or consent.\"\n\n\"Birth control fails. You're consenting every time you fire away inside her, or anyone else for that matter.\"\n\n\"That's why we had 'The List', remember?\"\n\nTaylor sighed and nodded, looking away. \"I remember.\"\n\nThe both of us went quiet again. My anger had built up again while remembering how Vivienne had made such a monumental decision without asking my permission, and I had to cool down again. And when I had cooled, Taylor squeezed my hand and looked up at me. \"So the question now is: Does Vivienne make 'The List'?\"\n\nI blinked. \"Huh?\"\n\nTaylor stared right into my eyes, holding my gaze. \"You reversed the RISUG injection. You're firing live bullets again. I think we have to seriously talk about 'The List' again. It was a select group. Even as close as some of your girls have been: Kate, Kaitlyn, Rebecca, Mia... they weren't on it. The risk was too great.\"\n\nI grimaced, remembering that time and the paranoia that came with it, the price to pay for my frequent extra-marital liaisons.\n\n\"I know you feel strongly for Vivienne and Evania. But you have to ask yourself: Just how much do you trust them? And before you let your heart answer, think back to how your head reacted twenty minutes ago.\"\n\nHolding my forehead in my palm, I sighed and shook my head.\n\n****\n\nIt was a quiet drive back to Fresno Yosemite International Airport, and an even quieter flight back to New York. Fully cognizant that I was upset with her, Vivienne's mood was that of a doomed prisoner on death row. And her attitude cast a pall over everyone else around.\n\nMid-flight, Taylor pulled me into the private stateroom in the back of the plane. But rather than seduce me into a fresh Mile High experience, my wife ordered me under no uncertain terms to make up with my girlfriend so that we could all move on. Taylor then marched out and ordered Vivienne into the room with me, with instructions for neither of us to come out until we'd settled the matter.",
        "It took a while, but Vivienne and I eventually patched things up. I explained that while I did love her, our relationship had not progressed to the point yet where I was ready to have children with her. We'd known each other for less than three months, and more to the point, it was unfair of her to make such a life-altering decision without my input or approval.\n\nVivienne couldn't really disagree with that. She apologized, telling me that she'd made an impulsive decision, but one founded on her love for me. She truly believed that we would be together forever, and she wanted that \"forever\" to start right away.\n\nIn the end, we made up by making love right there on that flight. She cried when I told her I wouldn't cum inside of her. But she willingly opened her mouth when I pulled out. And she eagerly swallowed every drop down, willing me with her eyes to understand how much she loved me.\n\nEven so, there was no telling whether the morning after pill had worked. Vivienne had been off her birth control for nearly two weeks, and I'd filled her with sperm dozens of times in that period. For all we knew, it was already too late.\n\nAnd so with our immediate argument resolved, but the longer-term worry still in the back of my head, Vivienne and I returned to the main cabin. The mood wasn't exactly festive, but at least it wasn't as gloomy as before. I hoped that time would heal our wounds. I hoped that a few weeks would bring Vivienne's normal menstrual flow to confirm that she wasn't pregnant. And I hoped that things would eventually go back to the way they were before.\n\nReally, you'd think I would have learned by now.\n\n****\n\n*-- MANHATTAN, NEW YORK --*\n\n\"Happy Birthday!!!\"\n\nGirls whooped. Disposable kazoos were tooted. And everyone clapped. Surrounded by dozens of people, all clapping, Joey just beamed and started clapping as well.\n\n\"Now blow out your candles!\" Ashlyn encouraged, bending over and blowing lightly at the two upright wax sticks embedded in the cake.\n\nJoey probably didn't know exactly the words meant, but she still knew enough to mimic her mother. And she puckered up and blew cutely.\n\nThe candles went out. Everyone hollered even more. And Joey was having an absolute ball clapping her hands together. I could only wonder how much more excited my baby girl would get once it was time for her to open all the presents stacked on a nearby table.\n\nThe mass of bodies that had collected in the dining room began to disperse after that. The large cake was expertly cut up by Lucy, Ashlyn's housekeeper. Charlotte and Karl were helping her hand out the plates. And in general, everyone spread out to resume other conversations.\n\nJoey made a mess of her face with the cake frosting. My little girl was pretty good at using a fork by now, but she still liked using her hands. I knelt beside Joey's high chair and tried to help her put a piece of cake onto her toddler fork, but she promptly grabbed a piece of frosting and slathered it across my nose. My startled yelp only entertained her even more.\n\n\"Joey!\" Ashlyn scolded, but couldn't help grinning. My ex-girlfriend stepped up with a wet washcloth at the ready, immediately wiping down my face.\n\nI let her clean me up and then stood with a smile. \"No harm done.\"\n\n\"Of course not.\" But Ashlyn immediately knelt and stared her daughter in her eyes. \"Be a *good girl*, Joey. Food is for *eating*, not play.\"\n\nJoey tried to smother _Ashlyn's_ nose in frosting, but the knowing mother quickly pulled out of the way.\n\nEvelyn immediately swooped in and started clucking over the now 2-year-old toddler. Joey settled down and ate her cake a little more sedately, although with that much sugar, I expected she'd start bouncing off the walls pretty soon.\n\nAshlyn then retrieved a new plate with a slice of cake on it, handing it over to me along with a fork. I accepted gratefully, and gestured back to the table. \"Aren't you going to have one?\"\n\nThe supermodel just rolled her eyes and patted her flat belly. \"Yeah, right.\"\n\nI put a small bit on the end of my fork, topped with pink frosting, and then held it up right in front of Ashlyn's face. \"You _sure_?\"\n\nThe redhead went cross-eyed staring at the morsel of cake, a hungry expression on her face. She sighed and then looked over at me. \"We both know I can't.\"\n\nI shrugged, started putting the cake into my mouth, and then pulled it back, waggling the morsel in front of Ashlyn's face once more.\n\n\"You're evil, you know that?\" she sighed before grabbing my wrist and holding it steady so that she could glomp her mouth around the end of my fork, eating off the cake and then swallowing it with relish.\n\n\"There. Was that so bad?\"\n\n\"Yes,\" she groaned. \"What IS it with men? You all want us to stay pencil thin and yet every chance you get, you try to tempt us into eating more.\"\n\nThere was actual vehemence in her voice, and I mumbled, \"Huh?\"\n\nShe shook her head dismissively and waved me off. \"Nevermind.\"\n\n\"No, really.\"\n\nAshlyn sighed. \"Bad date.\"\n\nI arched an eyebrow. \"Fabrizio?\"\n\n\"So you remembered his name.\"\n\n\"Of course. What happened? I thought you said things were going well.\"\n\n\"They _were_,\" Ashlyn groaned. \"Up until Saturday night.\"\n\nI bristled, my fists clenching. \"What did he do to you?\"\n\n\"Johnny, Johnny,\" she quickly soothed, holding her hands up to calm me down. She then glanced around, spotting a quiet corner before taking my elbow and leading me to it so that we'd have a modicum of privacy. \"He didn't _do_ anything, not really. It's just not working out.\"\n\n\"I'm sorry,\" I stated, working hard to keep my face still.\n\nAshlyn gave me a funny look. \"You don't mean it.\"\n\nI blushed, caught. \"Sorry,\" I offered more seriously, although with a smile.\n\nThe redhead chuckled and shook her head. \"Typical ex-boyfriend. If you can't have me, no one can.\"\n\n\"Hey, I'm not doing anything to stop-\"\n\n\"I know, I know...\"\n\nI shrugged. \"Can't help the way I feel. I still care about you. About you both.\"\n\n\"I know. A part of me will always love you, too. But we know why we can't get back together. I won't settle,\" Ashlyn stated firmly.\n\n\"I'm not asking you to; it wouldn't be fair. Just know that I'll always be here for you. Think of me... like an older brother. Brothers can love you, and be a little protective of you, can't they?\"\n\nAshlyn shook her head but smiled. \"Uh, don't know that I can ever think that way about you. Every time I look at you I want to rip your clothes off and fuck you within an inch of your life... _brother_. But I get what you're trying to say.\"\n\nI just grinned and asked. \"So what's next? Or who?\"\n\n\"Time will tell. I'm not in a big rush. Relationships are a complicated thing.\" Musing on that, Ashlyn suddenly punched my shoulder lightly. \"What about you? How are things at home?\"\n\nI shrugged. \"Shouldn't you already know? I know you and Taylor spread gossip faster than Twitter.\"\n\n\"Yeah,\" she conceded. \"But I still want to hear it from your side. How are things with Vivienne?\"\n\nI sighed. \"Good and bad. Her period is due in two days. She's not sure whether to be hopeful or anxious. I'm not sure myself.\"\n\nAshlyn glanced over at Joey, who by now was running around the living room with some of her toddler friends. \"I can relate.\" She then picked her head up to look at me, but instead gazed past my shoulder. \"Speaking of whom...\"\n\nI turned to see Vivienne approaching. She smiled and immediately hugged me, pecking my cheek. But then to the surprise of both me and Ashlyn, my girlfriend turned to face the redhead. \"Bonjour, Ashlyn.\"\n\n\"Bonjour,\" Ashlyn replied with a smile. Although Vivienne had initially been paralyzed with celebrity awe upon meeting the famous supermodel, time had helped her get over it.\n\nVivienne touched my arm and smiled at me for a moment before asking something I never would have expected. \"Excuse me. But do you mind if I, ah... _steal_ her... for a moment?\"\n\nMy eyebrows rose in both amusement and surprise. I was amused at Vivienne's attempt to pick up the English slang. And of course I wondered what Vivienne wanted to talk to Ashlyn about. But I saw no harm in it, and willingly stepped aside. Ashlyn looked just as surprised as me, but she nodded as well.\n\nWith a smile, Vivienne took Ashlyn by the arm. And then she led the two of them down a hallway toward the private bedrooms.\n\nFor about half a second, I imagined the two gorgeous beauties stripping and attacking each other with an erotic passion. But then I just shook my head and chuckled to myself. My life was pretty crazy, but that was just a little too far-fetched.\n\n****\n\n*-- MONTAUK, NEW YORK --*\n\nThe sun was setting in the distant west as the helicopter buzzed eastward back to the mansion after Joey's birthday party. Taylor and Cassandra reclined against my chest from either side of me. Vivienne and Evania sat across us. There was a light conversation going around, momentarily interrupted when Evania's Blackberry beeped.\n\nShe quickly fished out the device, and glanced quickly at Vivienne before pressing the button to close the message. And then my valet looked up and gave me a big grin.\n\nI couldn't help but smile as well. \"The packages arrived?\" I asked.\n\nEvania nodded. \"Yes, sir.\"\n\n\"Right on time.\" I grinned even wider. I then looked over at Vivienne, but she was staring out the window. Actually, Vivienne had been staring out the window for most of the flight. She hadn't been participating much in the conversation, and Evania had to nudge her to get my girlfriend to notice that I wanted her attention.\n\nBut rather than get ready to listen to what I had to say, she immediately spoke up. \"Tohm, I need to talk to you when we land.\"\n\nI arched an eyebrow in surprise. \"About what?\"\n\nVivienne looked around at the other women, sighing, \"It's very private.\"\n\nI blinked and shrugged. \"Uh, okay. But it might have to wait.\"\n\nHer eyebrows furrowed. \"Why?\"\n\nI couldn't help but start grinning once again. \"Because I have a little surprise for you.\"\n\nTaylor now sat up straight. \"A surprise? Those packages Evania just mentioned?\"\n\n\"And how come I don't know about this?\" Cassandra frowned, looking put out.\n\nI chuckled and waved with my hands to get the girls to settle down. \"It's a _surprise_. And they're really for Vivienne, okay?\"\n\nThe girl in question was now squirming in her seat, brimming with anxious energy. \"But WHAT are they?\"\n\nI smiled wickedly. \"You'll see.\"\n\nThat was the most the girls could get out of me for the next five minutes. Belatedly, they then realized that Evania was in on the secret and started pestering her. Vivienne even resorted to tickle-tactics, and the cabin was soon filled with the sounds of squealing girls.\n\nBut then the helicopter began its descent to the family compound, and everyone started looking out the windows to see if there was anything new visible from the air. Perhaps they were expecting some twenty-foot box to be sitting on the lawn, wrapped up with a gigantic bow. But there was nothing below but the familiar sight of the mansion.\n\nStill, the girls were all atwitter as we landed and went through the rotor shutdown. When it was safe, a security officer came and opened the chopper door. And all four ladies poured out, heading straight for the mansion doors, oblivious to whether or not I was following. You'd think they would have realized they might need me to show them *where* the packages were placed in this cavernous house.\n\nI followed them pretty quickly anyways. In this case, I figured they would find the surprise soon enough. That was because the packages weren't actually packages; they were people.\n\n\"Vivienne!\" a French-accented voice squealed. Another at a slightly different pitch soon followed. And I had to clamp my hands over my ears against the deafening scream that came after.\n\nVivienne tore off down the hallway to the living room, at a full sprint before diving into the waiting arms of Aveline. The impact was enough to nearly knock the redhead over, but she managed to stay upright. And very quickly, Cecile piled on as well.\n\nWhat followed was a riot of French words as questions were asked and half-answered, only to be drowned out by another question. The three girls were talking and hugging and kissing and then talking some more, all going by so fast that I really didn't understand a thing.\n\nEvania stepped up, and was immediately pulled into the middle of the circle like an old friend. A few words in heavily-accented English followed. And in the meantime, Taylor and Cassandra hung back with me.\n\n\"This was a good idea,\" Taylor mused, surveying the babbling young ladies.\n\n\"Agreed,\" Cassandra nodded.\n\n\"Well, since I now have your _approval_,\" I drawled.\n\nThe two of them chuckled and turned to me. \"When did you come up with this?\" Taylor inquired.\n\n\"Last week. Vivienne was clearly depressed after we got back to New York. I thought this might cheer her up. She's talked about being homesick before.\"\n\nTaylor reached up and brushed my bangs back, staring up into my eyes. \"You really want her to be happy, don't you?\"\n\nI nodded. \"Of course.\"\n\nShe turned her eyes behind me to Cassandra. I saw something pass through them, but as usual, I was left out of the loop. \"What?\" I queried.\n\nTaylor just shook her head.\n\nCassandra then gestured toward the four girls. \"I'm assuming these are the other girls who were with you on the yacht? Not Vivienne's family or anything like that.\"\n\n\"Correct,\" I nodded.\n\nTaylor smirked and then looked at my assistant. \"Well then, care to spend the night with me, Cassie?\"\n\n\"Of course,\" Cassandra replied.\n\n\"Huh?\" I furrowed my eyebrows.\n\n\"Come now, honey. Don't tell me it hasn't crossed your mind that those four are going to drag you down to the guest wing tonight.\"\n\nI blinked in surprise, my mouth falling open. \"Actually... I hadn't. I really just wanted to bring Vivienne's friends over... for _her_.\"\n\nTaylor shrugged. \"Okay. But that doesn't make my prophecy any less true.\"\n\nCassandra smirked. \"Let's go take a shower. I'm sure Jonathan will know what to do from here.\" She then glanced at me and advised, \"Drink lots of fluids.\"\n\nTaylor swooped in and pecked my lips. \"See you in the morning, honey.\"\n\nAnd then they were gone.\n\nSure enough, four excited girls immediately surged over, surrounding me with high-pitched babbling and many, _many_ hugs. And right in front of me was Vivienne, her eyes absolutely afire.\n\n****\n\n\"Where is Lucette?\" I managed to ask, once the girls got done kissing me in greeting. As a group, we had retired to the Common Room to sit down and catch up.\n\nAveline sighed, \"She could not get away from work.\"\n\n\"She could not get away from her _boyfriend_,\" Cecile corrected.\n\nAveline explained. \"He was already suspicious enough when Lucette returned from Greece with the extra clothes and jewelry.\"\n\nI blinked and glanced over at Aveline. The busty, blue-eyed redhead preened as I ogled her, positioning her body for maximum seductiveness and batting her eyelashes suggestively. And I asked, \"What about *your* boyfriend?\"\n\n\"What boyfriend? I have no boyfriend.\"\n\n\"Not _anymore_,\" Cecile chirped. The petite blonde turned to me with a wry smile. \"Sebastien realized what happened when Aveline returned home,\" she added in thickly-accented English. I'd forgotten that she was the least comfortable with my language.\n\nI winced. \"I'm sorry.\"\n\n\"Don't be,\" Aveline said with a shrug. \"The relationship was over anyways.\"\n\nVivienne nodded, apparently familiar with her best friend's history.\n\n\"But we're not here to talk about us,\" Aveline said brightly, extending her arms toward me and Vivienne. \"We're here to talk about *you*!\"\n\n\"Je ne peux pas croire que vous soyez toutes les deux venues ici!\" Vivienne enthused happily, explaining her disbelief that her friends had come.\n\n\"Comment aurions-nous pu refuser?\" Aveline pouted. \"We missed you!\"\n\nThe girls hugged again, and Vivienne looked at me. \"But how?\"\n\nCecile spoke up again. \"Evania called us.\"\n\n\"It was Mr. Kwong's idea,\" Evania gestured to me.\n\n\"Au sujet de votre nom... So your real name is 'Jonathan Kwong'?\" Cecile inquired with raised eyebrows.\n\nI nodded.\n\nAveline and Cecile glanced at each other with knowing looks. \"You are quite famous, then.\"\n\nI smiled. \"In America, at least. Fortunately for me, I was not so famous in Europe.\"\n\n\"You are now,\" Aveline said seriously. \"There was a story about a kidnapping, in Marseille.\"\n\nI grimaced. \"Yes. But that's over now.\"\n\nThe three French girls looked at each other and made a few comments I didn't quite understand. But then Aveline moved forward and grabbed my head, turning it left and right as if looking for injuries.\n\nI chuckled and Vivienne moved forward, slapping her friend off me. \"No. He did NOT get shot,\" she stated in English.\n\nAveline started slapping right back, and soon the two girls were giggling as they playfully batted each other's hands away. For a second, I thought about throwing two pillows between them and then sitting back to watch what happened.\n\n\"Arr\u00eatez! Arr\u00eatez!\" Cecile interposed herself between them, smiling all the while.\n\nHer hair a little mussed, Vivienne brushed it back and then beamed, smiling the biggest I'd seen from her since Yosemite. \"How long can you stay?\"\n\nAveline sighed and gestured to Evania. \"Our flight back is...\"\n\n\"Sunday,\" Evania finished. \"After Mr. Kwong's birthday. But the plans are flexible if you choose to remain longer.\"\n\nVivienne smiled. \"That is almost a week.\"\n\n\"Just like Mykonos,\" Aveline said with a grin.\n\n\"So? What shall we do?\"\n\n****\n\nDespite Taylor's and Cassandra's insinuations that I would find myself dragged beneath a pile of naked Euroflesh until morning, it didn't quite turn out that way, not yet at least. Aveline and Cecile wanted a tour of the mansion, and they oohed and ahhed at everything in utter rapture. Actually, Aveline wanted to strip naked and dive into the indoor pool as soon as she saw it.\n\nAfter the tour, everyone assembled back together for dinner. The newcomers apologized profusely to Taylor and Cassandra for not introducing themselves earlier. My wife and assistant laughed off their concerns and welcomed the girls with open arms. Dorothy made a splendid meal, and we all ate, drank, and chatted for well over an hour.\n\nMuch of the conversation centered on the new girls. Vivienne wanted to know what had been going on back in Dijon, and the girls were filling her in on the latest hometown gossip. There were discussions about kooky neighbors and various old friends. There was small mention of Vivienne's parents, from whom my girlfriend seemed to already be estranged. And the girls all laughed over how heartbroken this one young grocery store clerk had been when he found out Vivienne wasn't coming back.\n\nVivienne also shared what she'd been up to these past couple of months. She focused on all the fun things, like the trip to DC, Nashville, and New Orleans, as well as the National Park hopping and river rafting excursion. She raved about French-Cajun food and told the story of the French owner hitting on her at Savann. And in general, Aveline and Cecile sighed dreamily over how lucky Vivienne was to have hooked up with me.\n\nIndeed, Aveline flashed me a teasing grin and asked in a flirty voice, \"Do you need any more girlfriends? I'm sure I could be persuaded to stay a little longer.\"\n\n\"She means 'forever',\" Cecile put in helpfully.\n\nVivienne just slapped her friend's shoulder.\n\nAfter dinner, Taylor and Cassandra went off on their own, believing that the girls would feel more comfortable without their presence. They were right, because once the European girls and I re-settled in the Common Room, there were no limits to what they could talk about.\n\nAveline promptly began asking questions about our sex life, and how that all worked. Vivienne blushed and protested that she could not, but only for a moment. Then she went ahead and gave rather graphic descriptions of the shenanigans we'd gotten into. She mentioned Virginie, the waitress in New Orleans, who reminded her of Aveline. She laughed about the whole group seducing Chrissy, the Idaho river guide. And she even gently ribbed Evania about Tommie Joe and his houseboat in Nashville.",
        "Cecile then asked with some curiosity about Taylor and Cassandra. Vivienne was a little more demure about them, although she admitted that both were fantastic lovers. She also mentioned Kaitlyn and Jeff. And she started describing this trick that Taylor had for twisting her tongue while inside another woman's vagina that _really_ hit the spot.\n\nAll this talk of sex started getting me hard, a fact not unnoticed by Evania, who was sitting quietly beside me. My valet rather discreetly started stroking me outside of my pants, and nobody else noticed for a good five minutes.\n\nBut then Cecile realized what was happening, and the petite blonde blushed prettily. And I also saw a twinkle in her eye, a sparkle of hungry lust that surged up into her gaze.\n\nCecile's look took me by surprise. That whole week sailing around the Mediterranean, she'd been the most hesitant to fall into bed with me. I was a stranger, a rich man seducing her friends one-by-one, and she had every reason to mistrust my intentions. Yeah, she'd ultimately succumbed and slept with me, just before the end. But even that had just been her \"casual affair\", a wild one-night stand of sorts just to prove to herself that she could do it.\n\nShe still didn't really know me now. Yes, we'd spent the better part of a week together, but that was two months ago. I was a different man now, with a different name, and a wife and devoted personal assistant right upstairs. And yet this beautiful young woman was both ready and willing to sleep with me at the drop of a hat.\n\nThis was my life. A lot of it had to do with the money and the luxury surrounding us. But whatever the reasons, my situation was such that I could have dozens of gorgeous women throwing themselves at me every day. Vivienne's storytelling of our exploits certainly seemed to support that assessment.\n\nBut despite all that, and even despite these four gorgeous European babes around me, I knew *exactly* where I wanted to be this very second: upstairs with Taylor and Cassandra.\n\nI knew they wouldn't mind me spending the night with the Eurobabes; Taylor had specifically said she would see me in the morning. But I couldn't help but shake a memory I had from long ago, back before Joey was born, even before Ashlyn officially became my girlfriend.\n\nAshlyn, actually, was the girl in question. She was moving into the house, after the horrible breakup with Dean. Taylor was setting the ground rules for my relationship with the stunning redheaded supermodel, not to mention my budding relationship with Kate. Back then, Taylor had specifically told me: \"I'm not jealous of you having sex with them.\"\n\nBut she'd also asked: \"At night, no matter how late it is, will you come to be with me?\"\n\nI wanted to go to bed with my wife tonight. Ever since she came back to me, I hadn't missed a single night with her. Sure, I'd spent a lot of time in other bedrooms with Evania, Vivienne, and even Cassandra. I'd even spent most of an evening somewhere else, with someone else. But ever since Marseille, Taylor and I had slept together each and every night, holding each other in our arms. And I wasn't breaking the streak now, not for anyone.\n\nI always said I wanted things to go back to the way they were. Cuddling overnight with my wife was part of that. And right now I wanted nothing more than to feel Taylor and Cassandra spooning themselves up against me, even more than to have all four of these girls strip and take turns fucking my brains out.\n\nSo I stood up. \"Well, I think it's time I went to bed.\"\n\nFrom my tone, Vivienne immediately knew I didn't mean going to _her_ bed. \"Now?\"\n\nI nodded.\n\n\"But Tohm...\" she pleaded and gestured to Aveline and Cecile. \"You know we would like to thank you for bringing us back together like this. And I'm sure they had a very special 'thank you' in mind.\"\n\nThe French girls nodded, grinning seductively. But I held my hand up. \"Tomorrow. I've already made plans. Evania, go ahead and tell them.\"\n\nMy valet nodded and stood up beside me. \"I have chartered a yacht, not unlike the one we had in Greece. This is not the Mediterranean, but we will spend the day sailing up the coastline and to the famous Cape Cod.\"\n\n\"It will be just like old times,\" I said with a grin.\n\nVivienne got up and came to me, pouting cutely. \"But tonight?\"\n\nI shook my head. \"Tonight I'm going to sleep in my own bed.\"\n\nVivienne's face fell. She had gone from so giddily happy at the arrival of her friends to such a look of sorrow that I almost changed my mind. But the draw of Taylor and Cassandra upstairs pulled at me too strongly. I stepped up to my girlfriend, wrapping her up in my arms and leaning in for a sweet kiss. \"In the morning, mon cheri. Tomorrow, all day will be for you.\"\n\nShe frowned, her lower lip jutting out in an adorable pout. \"It is not enough,\" she complained.\n\nI sighed, wondering if anything short of marrying her would be enough. \"It will have to be,\" I answered. And then I kissed her goodnight.\n\n****\n\nTaylor rolled off Cassandra in surprise when the door opened. Startled, she quickly dragged the blanket up to cover her nudity and stared wide-eyed at the door. \"Johnny!\" she hissed. \"You scared me!\"\n\nI chuckled and strode into the room, reaching down to pull off my shirt.\n\nCassandra sat up, her glorious tits bare and a little wet from Taylor's saliva. \"What are you doing here?\" she asked a little more calmly.\n\nI arched an eyebrow. \"It's my bedroom, isn't it?\"\n\n\"But we thought you were going to spend the night with the girls downstairs?\" Taylor queried, now dropping the blanket and revealing that she too was naked.\n\nI grinned, feeling my cock resurging. My hard-on from downstairs had softened as I left the European girls, but it was making a quick comeback. \"I'd rather be here, with you two.\"\n\n\"Really?\" Taylor sighed with a dreamy smile.\n\n\"Really-really,\" I replied, and then dropped my pants and shorts, which left me fully naked with my rigid dick leading the way. I then pointed to the bed, right between the two naked loves of my life. \"Besides, isn't Cassandra ovulating?\"\n\nTaylor just beamed and opened her arms. \"Come to your wives, honey.\"\n\n****\n\n*-- CAPE COD BAY, MASSACHUSETTS --*\n\nI reclined comfortably in a sculpted seat carved into the side-wall of the jacuzzi, with soft pads cushioning my ass and directed jets blowing bubbles against my spine. The warm water surrounded me up to my midsection. And the platform behind my back was at the perfect height to rest my outstretched arms to the sides.\n\nThe jacuzzi was built into the aft deck of a private yacht that slowly rose and fell with the waves, a gentle rocking motion that was as comfortable as a baby's bassinet. And perched right on top of my dick, enveloping my shaft with her snug vaginal canal, was a gorgeous redheaded French girl who similarly rose and fell in time with the waves.\n\nKneeling on the jacuzzi's submerged bench by my side was a dirty-blonde French girl, her 90DD breasts pushed up into my face so that my cheeks were surrounded by warm, wet titflesh. I had a big smile as I pushed my nose into her cleavage, smothering myself in her perfect mammary glands.\n\nAnd as I felt the ocean rocking my boat while Aveline and Vivienne were... uh... _rocking my boat_, I felt as if I'd been transported thousands and thousands of miles away, to a pristine harbor in the Greek Cyclades, where all my cares had gone away.\n\nThe trip was just like before. Evania arranged the boat and crew. We started off clothed, and then as the sun warmed their bodies, the girls stripped down to their bikinis and eventually removed their tops. And after moving from girl to girl, getting kisses and some heavy petting (and groping), we finally reached our destination and dropped the anchor.\n\nLunch was served, followed by a brief period of relaxing, sunbathing, and light conversation. Vivienne and Aveline dove off the boat and into the water, playfully splashing each other for a few minutes before declaring that the bay was a little too cold and then returning onto the deck, hair wet and slicked back with erect little nipples tight and perky.\n\nThe two went into the warm jacuzzi first, and it took little coaxing to get me to join them. One thing led to another, and I soon found my swimsuit pulled away as Aveline mounted me. And then Vivienne was similarly stripping away her bikini bottoms so that I could slide my fingers into her juicing slit while she smothered me in titflesh.\n\nThe three of us weren't the only ones getting hot and heavy. Evania and Cecile spent a lot of the trip chatting with each other. They'd gotten on very good terms during that week in the Mediterranean. Cecile had begun that trip a confirmed heterosexual, shocked to see her good friend Lucette even kiss a girl. But days later, the young blonde was just as eager to dive in and eat pussy as the rest of them. She was still inexperienced, but she was learning fast.\n\nAnd it looked like Cecile had continued her education in the past few months. Evania technically still wore her bikini bottoms as she was stretched out across a reclined lounger, but the dark green and yellow fabric was pulled aside as Cecile confidently lapped at my valet's pink pussy while sawing two fingers in and out of that moist channel. And from the way Evania moaned and clutched at her own heaving bosom, Cecile was doing a *very* good job.\n\n\"Nnnn...\" Aveline moaned, drawing my attention back within the jacuzzi. Her eyes were closed and her head hung limply to her right. Vivienne was nuzzling her friend's exposed neck, kissing it while her left hand roamed over the redhead's big tits. Vivienne's right hand was out of sight, but I saw her arm leading down into the depths of the tub. And then all of a sudden, Aveline's eyes flew open and I felt her entire pelvic region tighten up as she squirmed and started jerking faster on my cock.\n\n\"Vivi-_enne_!\" Aveline squeaked.\n\nThe girl in question just grinned evilly, tensing her arm as she evidently pushed her finger even deeper into Aveline's ass.\n\n\"Nnnnghh!\" the redhead groaned even louder, rapidly bucking up and down my shaft. I ducked my head to capture a heaving breast between my lips, and Vivienne slid her left hand lower to titillate her friend's clit. And together, we brought the French bombshell to a screaming climax.\n\n\"AAAAAAAAAAA-ulp!\"\n\nVivienne abruptly cut off her friend's cry with an open-mouthed kiss, probing her tongue right into the middle of the scream. With strong arms she held Aveline as the redhead thrashed about, sending the jacuzzi water splashing over the sides. And she continued kissing her best friend until Aveline finally went limp and the pair could separate to sigh rapturously.\n\nCecile suddenly popped her head up behind us, grinning. \"\u00c9tait-ce bien?\" she queried.\n\nTired, Aveline smirked goofily, nodding her head. \"Tr\u00e8s bien.\"\n\nCecile then raised her eyebrows to Vivienne. \"Mon tour?\"\n\nMy girlfriend chuckled and nodded her head. \"Oui-oui.\"\n\nNow her turn, Cecile clapped her hands like a kid in a candy store. Without bothering to climb in, the perky blonde grabbed my head and turned it to the side so that she could kiss me. And as Aveline and Vivienne moved away, she finally hopped over the side and straddled my lap while shoving her tongue into the back of my throat.\n\nI was already pretty revved up by Aveline's fuck. I hadn't cum, but I was much closer than when we'd begun, and I had a hankering to get off pretty soon. So spurred on by my own urgency, I quickly tired of simply making out with Cecile and decided to take charge.\n\nLifting her light body easily, especially with the buoyancy of the water, I quickly spun around and parked Cecile with her knees on the padded bench. She was just high enough for her ass to be out in the open air when bent over, so that she had to brace her hands on the platform surrounding the tub. And after swabbing my angry cockhead through her slick pussy lips a few times, I centered myself and pushed forward.\n\n\"Ungh...\" Cecile groaned as I penetrated her from behind. The slender young blonde gritted her teeth and focused on driving her own hips back to meet me.\n\nOnce we achieved full penetration, I reached my arms around to paw her modest breasts and squeeze them as I pulled back, ensuring that my dick was as far up into her body as it could possibly go. And after briefly bending over and nibbling on her shoulders, I asked if she was ready, whispering, \"Tu pr\u00eat?\"\n\nShivering as she felt my thick cock stretching her tight tunnel for the first time in months, Cecile took a deep breath and nodded. \"Oui.\"\n\nAnd then we were off.\n\nIt was a good thing we were in the tub for this. I'd been primed all day watching (and feeling up) the four topless babes as we cruised around the aft deck of the yacht. My next orgasm would be my first, and my body was screaming at me to achieve it as quickly as possible. But despite the urge to rapidly slam my dick in and out of Cecile's tight cunt as hard and as fast as possible, the water slowed me down just enough so that the somewhat less experienced girl could handle it.\n\nBut I was still fucking her pretty damn hard.\n\n\"Agh! Agh! Agh!\" Cecile chirped every time my pelvis slammed into her ass. The petite girl wasn't as curvaceous as her friends, and she had less butt padding to absorb the intensity of my strokes. Her whole body jerked every time I rammed into her. But from the way her cunt muscles clenched me and the specific note in her whimpers, I was sure she wouldn't have it any other way.\n\nMeanwhile, my original three 'V's were getting hot and heavy. They had dropped another lounger to recline completely flat. Vivienne was on her back, with Aveline doing her level best to return the orgasmic favor to her friend while Evania helped along. At present, Aveline's red head was burrowing between my girlfriend's thighs while my valet knelt behind Vivienne's head, reaching forward to massage the dirty-blonde's big tits while showering her with upside-down kisses.\n\nCecile came first, but Vivienne wasn't far behind. My petite blonde was hanging her head down, letting it sway with our rocking motions as she concentrated on simply holding herself up while I pounded away at her backside. I felt her inner muscles tensing just before she came. And as they did, her head came up to shriek in pleasurable agony as the powerful climax ripped its way from her loins and all the way up and out her throat.\n\n\"EEEYYYAAAAAAAHHHH!\" Cecile yelled.\n\n\"AAAIIIIIIII!\" Vivienne joined her.\n\n\"UNNGHH!\" I grunted two seconds later, as I yanked my cock out just in time to begin spraying ribbons of spunk that first arced up and onto Cecile's lower back before the streams lost power and began splattering down across her tight asscheeks.\n\nDespite having just cum, Vivienne bolted off her chair immediately. I was staggering back, struggling to maintain my balance as I stood upright in the middle of the tub, when Vivienne vaulted over the side and landed beside me. But her attention was on Cecile as the petite French girl let her arms collapse so that her head and chest lay on the jacuzzi's surrounding platform. And with the young blonde's ass upthrust into the air, Vivienne quickly grabbed onto her friend's hips and began lapping up my spending right off of Cecile's ass.\n\nEvania quickly joined her, the two slurping up the globs of jism before turning to each other and sharing them between their mouths. But Aveline came straight to me. The redhead took her time, gracefully sitting up on the jacuzzi platform and then kicking her legs over to slide down beside me. Taking hold of my hips, she sweetly asked me to sit up on the platform. I did as asked, and once my legs dangled into the water, she knelt on the submerged bench and brushed her hair back with her fingers. And then she bent over and inhaled my prick down to the root.\n\nI've said it before and I'll say it again: Aveline's wide mouth and bee-stung lips are just _made_ for sucking dick.\n\nSmiling, I leaned back and braced my hands on the back edge of the platform. I stared down, watching Aveline roll her pretty blue eyes up to stare at me while she lovingly worshipped my cock. And then I looked past her, to where Cecile was still wiped out from our aggressive fuck, and Evania and Vivienne were both hungrily looking at me in eager anticipation of their turns.\n\nJust like old times.\n\n****\n\nThings got quiet after dinner. The yacht rounded Shooter's Island and headed into Nantucket Sound, leisurely bringing us back home as the sun set over the Western horizon.\n\nAveline and Cecile were cuddled up together under a blanket on the forward bow, watching the world go by while chatting with Vivienne and Evania. I sat well behind them, staring at my girls more than the sea.\n\nBut presently, Vivienne got up and said something to the others. They nodded and she turned back to me. And without a word, my girlfriend took my hand, pulled me up, and led me inside to one of the comfortable staterooms belowdecks.\n\nOnce behind a closed door, Vivienne's soft but intensely passionate kiss left no doubt as to her intentions. I felt her nimble fingers working at the collar of my shirt. And soon enough, we fell semi-naked onto the bed.\n\nOur kisses were a harmony of contradictions: forceful yet yielding, firm yet soft, passionate yet intimate. We broke away several times just to look at each other. Her fingers traced my cheeks. My fingers traced her hairline. I stared into those light brown eyes, glowing with an inner golden glow as she stared right back at me. Neither of us made a move to initiate the sex or even grope at a sexual organ. Instead, we simply writhed together, feeling the sensual warmth of each other's body gliding against our own skin. And I also felt the damp heat emanating from her loins.\n\nMy cockhead notched into position of its own accord. One moment, we were sinuously dry humping each other while panting heavily and moaning softly. The next moment, both of us were holding our breath as my shaft sunk inch by inch into her welcoming channel. And only after we were fully enjoined did either of us stop to breathe.\n\n\"Je t'aime, mon amour,\" Vivienne breathed.\n\n\"Je t'aime, mon cheri,\" I replied in kind.\n\nShe started crying then, happy tears as she held my head in her hands and kissed me. She undulated her body beneath me, driving up with her hips, and we settled into the regular cadence of making love. And all the while, we felt the familiar rocking of the yacht accenting our own rhythmic thrusts, just like it had back in Greece.\n\nIt was almost perfect... almost.\n\n\"Cum in me, mon amoureux...\" she moaned, cinching her arms and legs around me tighter as I sped up on the final approach to climax. \"Fill me!\"\n\nImmediately, I groaned with a pained expression. I couldn't. She knew I couldn't. \"Vivienne...\"\n\n\"Please...\" Her inner walls clamped down around me, squeezing and releasing, coaxing out my sperm. \"Cum in me. Cum in me s'il vous plait!\"\n\n\"I can't,\" I whimpered pitifully, my hips speeding up as my balls prepared to fire away. \"You know why.\"\n\n\"Tonight doesn't matter. I am due tomorrow. If I am pregnant, this will not change things. If I am not pregnant, it is too late in my cycle anyways. Please... Please, Tohm! I have not felt you cum inside me in weeks. _Please_!\"\n\nI couldn't. Her logic made sense, but I simply couldn't. I wasn't ready to have children with Vivienne. My heart screamed 'Who cares?' My head couldn't come up with a logical response. But I just couldn't do it.\n\n\"I can't!\" I groaned. No matter. Vivienne wrapped her legs around my hips, holding me powerfully even as she squeezed with every inner muscle to draw out my ejaculation.\n\n\"Vivienne!\" I groaned again, this time physically prying her legs apart and then seizing her hips. I felt myself about to lose control, my cock about to blast away no matter where it was pointed. But just before I did, I managed to yank myself out of her exquisite pussy and simultaneously roll her onto her stomach."
    ],
    "authorname": "bluedragonauthor",
    "tags": [
        "billionaire",
        "orgy",
        "mff",
        "threesome",
        "pregnancy"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/tom-billionaire-ch-08"
}
{
    "title": "There and Back Again Ch. 136",
    "pages": [
        "Chapter One Hundred Thirty-Six: *Intervention \n\nThe day passed in a blur; I did some more paperwork, and arranged with Seneschal Varel for my letters to be sent by messenger -- to Denerim with some of his, then on to their destinations from there. I found my armour, and scavenged the armoury for replacement daggers, since mine hadn't been returned to me after I'd left them in a blood-soaked field. I visited Faren again, reluctant but dutiful; his condition was unchanged. I spoke briefly with Anders, who was in the library surrounded by books on healing and poisons -- I wouldn't have guessed such things could be found at the Vigil's library. The healer assured me he was making progress, and felt confident that Faren wouldn't die. More than that he wouldn't guarantee, but I was grateful never-the-less. I excused myself and escaped before he was able to start questioning me. \n\nI avoided my brother, my husband, Nate, Zevran, the other Wardens, and anyone else who knew me well. I knew I was hurting people just by acting so strangely, and I couldn't even explain why. My head was a complete mystery, even to me -- sure, I was upset, but why was I so angry? I did talk very briefly to Sigrun, who was slightly disappointed at being left behind, but had taken it as her duty to take care of Faren while we were gone. She was moving his arms and legs several times each day to keep him from stiffening up, and had taken over coaxing the thin gruel Anders recommended down his throat; I imagined some servant was quite relieved, as it was a horrible job. Too much and he'd choke, too little and he wouldn't swallow...it took forever, but she seemed determined to personally ensure he remained as strong as possible despite being unconscious. \n\nShe didn't try to engage me in any...awkward conversation, for which I was grateful. \n\nI finally found myself back on the ramparts at supper, again eating food I'd pilfered from the kitchen. From where I sat, I could see only the walls of the keep, a few blank windows, and the sky; it was peaceful, and I was drowsy after only a few minutes. I'd have fallen asleep there again, except that I was disturbed after a bit by Nathaniel. \n\nHe made small talk to which I barely responded, only grunting or nodding once in a while when it would have been unbearably rude to ignore him. I wanted him to leave, and hoped he'd get the hint from my reticence, but he blathered on for a while, apparently oblivious. It occurred to me that it was completely out of character for the nobleman; while not quite as taciturn as, say, Loghain, he was usually far from forthcoming. \n\nThe reason became obvious when he finally cleared his throat awkwardly and then sat beside me, stretching his long legs out in front of him. \n\n\"I know what you're going through, you know,\" he said softly. \n\nI scowled and remained silent. \n\n\"In fact, I might be the only person here who really gets it. I'm not sure you know, though.\" \n\n\"Oh really?\" I turned to him scornfully. \"You know me so well, do you, that you understand me better than I do?\" \n\nHe nodded calmly, unflappable, leaning back to examine the darkening sky. \"When Kallian helped me recover from my torture, and then I made up my mind to...\" he stumbled slightly over the words before clearing his throat and starting again, \"...kill her... Even though I was rescued, I was so, so angry. No longer could I convince myself I was a good person. I couldn't live in denial anymore. I'd been tested, and I'd failed. \n\n\"And you'd think I'd have been angry at my father, who put me in the situation, but I was far angrier at myself, at Kallian...even at Aedan, for not rescuing me a day sooner. If he'd been just one day sooner, I wouldn't have been tested. I could have slept at night, still believing I was a good man, that if it ever came down to it, I wouldn't hurt someone who'd done nothing wrong. I was furious! I wanted someone to blame me, to see the monster inside me and call me out for it. I'd have gone willingly to Fort Drakon. But Aedan made excuses for me, you welcomed me...even Kallian. She thanked me! Thanked me for almost killing her. And all of it just made me more outraged. I picked a fight with one of the soldiers in the barracks, destroyed a sparring dummy, but it wasn't enough. None of it touched my anger.\" \n\nHe turned to look at me then, reaching out to pat my arm gently. \"I started drinking. Heavily. Trying to drown it out, I think. Do you remember what you said to me? When you found me in the library, pickled in whisky?\" \n\nI shook my head silently; it felt like a lifetime had passed since that day. I wonder if he knows he'd been drugged? I'm not telling him. \n\n\"You told me that some fates are worse than death. I know, now, that Kallian was right -- staying alive only to be tortured and raped by my father's men would be the worst thing that could happen. But I hadn't been able to put myself in her shoes. Not until you said that. You told me that mercy sometimes requires a friend's help. \n\n\"Put yourself in Faren's shoes, Sierra. Say it was you who was tied to a chair, doomed to a short and painful life of being force-fed whatever grisly food the darkspawn could find, providing the blood that would allow the Architect to do Maker-knows-what sort of harm. Say it was you, watching Leliana slowly lose her mind as she tried, unsuccessfully, to keep you safe -- and you knew she could get out, could escape in a heartbeat, if it wasn't for you. \n\n\"Do you expect me to believe you wouldn't have jumped at the chance for a quick, painless death that allowed Leliana to get away? Really? You don't think you would have wanted her to kill you so she could escape?\" \n\nHe was quiet for a few moments, as I closed my eyes and imagined the scenario as he described it. It wasn't hard -- even just being in the cell next to Faren, I'd considered my options; he'd had none. I would have taken the pill, and gratefully. A few angry tears escaped and trickled down my cheek. \n\nNate nodded as he watched the emotions cross my face. \"Now you're angry -- at yourself, for somehow failing Faren; at Faren, for asking you to do the unthinkable; and at anyone else who tries to forgive you for it. You feel so guilty that it feels like anyone not blaming you doesn't care about Faren. Someone should be made to suffer for Faren being sick, right? And there's no one else but you to pay the piper.\" \n\nThe trickle became a flood as the tears multiplied. Pissed off at the sign of weakness, I wiped my nose on my sleeve irritably until I felt Nate press a handkerchief into my hand. \"Stop,\" I whispered, voice gravelly with emotion. \n\nHis gaze was compassionate but firm. \"Almost. Just one more thing, I promise.\" He moved his hand to my shoulder, whether for comfort or to keep me from fleeing I wasn't sure. \"I just have one question. Why are you punishing Alistair and Aedan for it?\" \n\nMy eyes widened as he finally cut to the chase. I hiccupped in shock, mind racing. \n\n\"Do you blame them? They took too long to find you.\" \n\n\"No! Of course not.\" \n\n\"They left you alone. Sent you to Soldier's Peak without them, so it's their fault you were captured.\" \n\n\"No. No!\" I sobbed once, hurt and incensed and completely offended that he would imply that anything that happened was anyone's fault but mine. \"They didn't do anything wrong.\" \n\nHe kept going, relentless. \"Then why? Why pull away? Why are you so angry? What did those monsters do?\" \n\n\"Nothing! They didn't do anything! It's me!\" I was crying so hard I couldn't see, shouting loud enough the soldiers in the sparring ring below could probably hear me. \"They keep saying it's not my fault, but it is. I'm the monster. I am! I don't deserve their comfort.\" I gasped for air, head spinning, voice tapering off to a hoarse whisper. \"None of them blame me like they should. They're all kind words and compassion and comfort, while Faren still lies there unconscious. I'm the monster. They shouldn't love me. I don't deserve it.\" I clapped my hands over my mouth, shocked and horrified by what I'd just admitted. Is that really why I've been such a bitch since I woke up? Able to examine the thought consciously, finally, even I knew it was stupid when I thought about it. \n\nI'd been able to admit that I would have done the same in Faren's place; I'd never blamed Nate for deciding to kill Kallian before they'd been rescued. I didn't blame Zevran for being an assassin, Leli for being a bard... \n\nPerhaps I could learn to forgive myself for doing as Faren asked. \n\nIt was a revelation. All of a sudden my anger made sense. Though it was unexpectedly, amazingly, almost gone; I still felt guilty, but somehow also better for getting the ridiculous truth out there. \n\nI was so caught up in my own sudden insight that I didn't hear the doors open or the footsteps, and before I knew what was happening, I was being lifted into familiar arms, settled into a comfortable lap, sandwiched between my husband, who was holding me like he'd die before letting go, and my brother, who was stroking my hair and pressing kisses to my forehead. \n\nBoth were smart enough not to say anything, almost like they knew that further reassurances -- that they loved me, that I hadn't done anything wrong -- were not going to be helpful. The only thing that's going to fix this is time. I'm not looking forward to explaining it, though. \n\nI finally looked up to see Zevran standing behind Aedan, one hand on my brother's shoulder and the other patting Nate on the back. The dark-haired nobleman stood beside us, smiling empathetically at me, before excusing himself to go back inside. Zevran reached out and squeezed my hand, rubbed Aedan's shoulder gently, and then followed the archer, leaving me with Aedan and Alistair. \n\nWe sat together quietly for a while, until the last light of sunset faded. Finally calm, I reached out and took one of each of their hands into mine. \n\n\"Sorry,\" I started, wondering how I was going to explain everything. \"I-\" \n\n\"Don't,\" Alistair interrupted. Aedan nodded. \"We knew -- maybe not what, exactly, but we knew something was going on. I was giving you space to figure it out, and then Nate mentioned he had an idea...\" \n\n\"An intervention?\" I looked from one too-innocent expression to the other; they were confused by my Earth terminology but far too understanding of things they shouldn't have known about, unless... \"Ah. You were listening.\" It felt like I should have been offended -- they'd ambushed me, like some reality television show on cable -- but I wasn't. I'd clearly needed an intervention, and the fact that they were listening at the door meant I wouldn't have to explain everything. \n\nI chuckled tiredly. \"Apparently I'm not terribly good at the whole 'self-awareness' thing.\" I leaned my head onto Alistair's shoulder. \"I don't even think I said thank you. So. Thank you for finding us, for saving me and keeping Faren alive. And for the intervention here and the understanding. I promise to try to stop pushing you away.\" \n\nAedan squeezed my hand, and Alistair kissed my crown softly. \"Welcome back, sis.\" My brother winked. \"Now if you'll excuse me, I need to go find that very clever man of mine and...\" He grinned at me. \"...get some rest before we march in the morning.\"  \n\n\"Rest. Riiight.\" Alistair teased. I giggled. \n\nAedan stuck out his tongue briefly. \"Be ready at seven bells, love birds.\" He slipped through the door, leaving Alistair and I curled together on the ramparts. \n\n\"I was awful to you,\" I whispered to my husband as he rubbed my back. \"I can't believe...\" \n\n\"No. You were hurting. I could tell, and I didn't take it personally. I'm still not sure I really understand -- and if Nate's right, I'm pretty happy with it staying like that -- but I knew you weren't angry with me. Not really. I think we've come far enough not to get insecure or run away at the first sign of trouble, don't you? I'm just glad Nate and Zev had some idea what to do. Honestly, the worst for me was feeling helpless.\" He kissed my forehead, and I snuggled into him. \n\n\"So this was Nate's idea?\" \n\n\"Well, he and Zev. They both have experiences with being...\" \n\n\"Captured? Tortured? Yeah.\" I shook my head. \"Not that I was tortured. I just couldn't risk going to sleep.\" I nuzzled into Alistair's neck, pressing kisses to his warm flesh, inhaling the masculine scent that meant I was home. \"I could go to bed now, though.\" \n\n\"Tired, Love?\" \n\nI grinned up at him lasciviously. \"Well, I didn't say that sleeping was what I had in mind...I do believe that a more...intimate apology might be in order.\" \n\nHe chuckled, creases at the corner of his eyes as he smiled. \"How could I say no to that?\" \n\nScrambling to our feet, the two of us held hands, giggling and touching as we raced to our room. Alistair fumbled the door open, and then I was being lifted, carried through bridal-style by my husband. I gasped, one arm clinging around his neck; I knew he wouldn't drop me but it never failed to freak me out a little. \n\nHe placed me carefully on the bed, reaching down to pull off my shoes; he stripped down to his smalls while I wiggled out of my dress. I sat up, eager to get at him, reaching to pull his hips closer so I could get my mouth on him as I tugged at his smalls, but he pushed me away gently. \n\n\"Not tonight,\" he whispered, climbing up on the bed next to me, pulling my naked body into his arms, our skin pressed together from shoulders to toes. \"I love you, Sierra.\" \n\nI groaned as he kissed me, overcome with relief and love, desperate to reconnect with him the way we did best. But his hands stroked me, soothing rather than inflaming, his kiss slow and deep and intimate. His strong arms held me captive, my tongue the only part of me free to move against him. \n\n\"Slow,\" he murmured, tilting my chin down to kiss my forehead, my eyelids, both cheeks. \"I want to cherish you.\" \n\nAnd he did, proceeding to lavish my face, neck, and chest with kisses. Initially impatient, I writhed against him, but eventually relaxed as his patience and stubbornness won out; finally he released my hands, and I stroked them into his hair, holding him to me as he nibbled at my throat. He shushed me when I gasped as he rolled onto me, his hips between my thighs, pressing me to the bed. I could just feel the hard length of him against my leg, but he went no further, choosing to return to my lips with a languid kiss. \n\n\"So beautiful,\" he murmured, his breath ghosting over my face softly. He pressed his forehead to mine, our noses touching. \"Look at me, Love.\" \n\nMy eyes, which I hadn't even realised had closed in sheer bliss as he pampered me, flew open, meeting his intense, hazel gaze. \"I love you,\" I blurted, and he kissed me again, this time keeping our eyes locked on each other. It was more intense like that, not as much sexual as hedonistically sensual; I felt like my soul lay bared to his gaze, and as self-conscious as I thought I should feel, I didn't. He was allowed see all of me, every hope, every flaw, every embarrassing detail. Everything I am is his, and I know he loves me, no matter how insecure I am. \n\nFinally he took me, shifting his hips until he was buried in my welcoming sheath, his eyes darkening as he fought to hold still, to relish the closeness without any urgency or drive for completion. He never broke eye contact, his intensity not allowing me to look away even though I felt too exposed, too vulnerable. But as he finally started to move, the emotional and the physical blended together until I couldn't tell where I stopped and he started, until both of our souls intertwined and mated together, so hopelessly comingled we would never be able to separate them again -- not that I would ever want to try. \n\nOur climaxes -- together, shattering, penetrating -- were almost an afterthought. I was crying, panting, and shuddering all at once as it went on and on, binding and irrevocable. Finally I fell insensate; Alistair rolled to the side, unbeknownst to me, and we slept. \n\n***** \n\nThe group forming up to march on the Dragonbone Wastes in the morning was impressive, even compared to the army we'd amassed to fight the Archdemon. There were almost a dozen Wardens, plus Nathaniel, his troops from the Vigil and Amaranthine, and a large chunk of the Fereldan Army that Cailan had stationed in and around Amaranthine after the battle with the Archdemon. We were on foot, to my relief; having nowhere near enough horses for the entire army, there was no point in a handful of us riding ahead. \n\nThe Wardens, plus Avanna, Velanna, and I got to be in the front of the long column leaving through the Vigil's gates, which was good, because the dust stirred up by an army on the march turned out to be incredible. We all carried some supplies with us, though there were supply carts that would follow behind and catch up at each stop. \n\nWe waved goodbye to Anders, Sigrun, and the Legion of the Dead, as well as the soldiers being left behind to guard the Vigil, and then we were underway. Low on sleep after an intense evening making up to Alistair, and still recovering from starvation and lack of sleep in the Architect's lair, I was initially worried I might not be able to keep up -- until I was reminded just how difficult it is to get several hundred people moving in any sort of efficient manner. \n\nWe may have intended to march at seven, but it took at least an hour longer to get organised than planned, and even once we'd left the column stretched out far behind us; I half suspected that when the front of the column arrived at the Mother's Nest, those at the back would still be standing in the Vigil's courtyard. \n\nWe travelled until it was truly too dark to carry on, trying to make up for lost time; the grumbling when the soldiers were told not to start fires and to eat cold rations was minimal, but we all wished for something more. Things moved a little faster the next day, and we were rewarded with a hot dinner. \n\nAlistair and I, Aedan and Zev, and Nate all rated fancy tents, more pavilion than the little canvas sheets we'd used during the Blight; I felt ridiculous, but I was outvoted. With Alistair sharing a tent with me, I figured Avanna could relax, but the soldier was taking her duty ridiculously seriously, and she slept right outside the tent flap. I sighed, knowing nothing I could say was going to change it. \n\nMy husband and I hadn't discussed our intense love-making since we'd left the Vigil; it didn't seem necessary. Both of us felt the change between us -- more in sync, part of a larger whole -- and we were both aware of the increased intimacy with every glance, every touch. It kept an amused half-smile on both our faces most of the time, earning us grins and teasing from those around us, not that either of us cared particularly. But it was sort of funny: we'd started finishing each other's sentences, accidentally speaking in tandem, and when we sparred together, it was like one person was guiding us both. I was instinctively aware of every movement of his, and from how often I caught him watching me, it was the same for him. \n\nThe fourth day had us entering the Dragonbone Wastes. The transition was surprisingly abrupt; we climbed a hill of green grass and trees covered in yellow and red fall foliage, only to drop into a valley that was as barren as a desert. Grass gave way to dirt, then to a dark, dusty sand-like covering over bare rock; the trees became sickly and twisted, devoid of leaves, some of them covered with malignant black fungus. The air grew warmer, which wasn't a terrible thing given the fall chill in most of Ferelden, but I imagined summer days were probably searing. There was no water for miles, which made the carts carrying vats of the precious liquid even more important. \n\nThe slope was rocky, massive boulders jutting into the sky on either side of the path; the path itself became bumpier and more twisted as it switch-backed down into the valley. The air was somewhat hazy, and the sheer cliffs on either side of us blocked the direct sunlight, so it got darker as we went down, limiting visibility. And then the dragon bones started to appear, at first off in the distance, but closer and closer to the path the further down we went. When I strained my eyes looking down the crevasse, I could see some truly enormous rib bones jutting up from the dry, dusty ground at the bottom. ",
        "It took most of an entire day to get the assembled forces down the hill and to a temporary camp at the bottom. There were no ruins we could see in the area surrounding us, and we avoided the spots with a higher concentration of dragon bones. The map showed a chasm to the north, and I knew that the Mother's Nest likely opened out into it. There were no darkspawn that we could sense, but we included Wardens in the watch rotation along with the sentries designated from among the army -- just in case. And we kept multiple torches burning all night, on the off chance of a dragon attack. \n\nThe night was uneventful; when the inevitable high dragon battle did happen, it was in the middle of the day as we all scouted, looking for ruins; groups of soldiers led by Wardens were scattered among the rocks, and two men had been snatched before anyone knew what was happening. When the cry went up -- along with the fetid stench of dragon breath and the massive wind stirred by flapping wings -- soldiers and Wardens scrambled together to mount a coordinated defense against the creature. \n\nAnd it was magnificent, a distracted part of my mind noticed as I ran for cover -- I knew my daggers wouldn't be sufficient to aid me in this fight, so I was better off getting out of the way and letting the heavier armoured fighters do their thing. It was larger than the risen Andraste -- older, I assumed -- and its scales were a gorgeous multicoloured patina, greens and blues mixed with red and purple. It had an enormous crest on its head instead of horns, and massive leathery wings that sent the dust flying. \n\nBut it was old; I'd seen two high dragons before, and this one moved much more slowly than either of the others. It more hopped and glided than flew, and I suspected it would take a lot of time and an enormous effort for the beast to get its massive bulk off the ground -- time the fighters weren't giving it, of course. It shot lightning instead of flames, to my astonishment, and its first attack killed a group of three soldiers, the electricity cooking them in their armour before anyone could stop it. \n\nBut quickly, Aedan and Alistair -- as the two most experienced with fighting dragons -- were shouting orders, the soldiers were spreading out to keep the lightning from chaining between them, and the dragon was slowly, systematically cut, bled, and disabled until it fell. In some ways it was easier than the dragon fights I'd witnessed in the past -- more fighters, more swords -- but it was also riskier, with less experienced dragon fighters getting in each other's way. But eventually the dragon fell. \n\nExhausted, we gave up on scouting for the day and the army returned to our previous camp to rest, heal the wounded, and have pyres for the five men lost. Without Anders -- our best healer, left behind because of Faren's illness -- Solona, Alim, and Velanna provided what healing they could, and we had to rely on potions for the rest. I tried, mostly successfully, not to feel responsible for the injuries and deaths...it didn't stop a few irritating guilty tears, which I managed to hide from everyone but Alistair. It helped that while a few soldiers would have to ride carts back to Amaranthine, most would recover. \n\nScouting the next day was fruitful, finding several promising ruins to the north; we moved camp to a more central, semi-permanent location, and began the thankless task of finding the Mother's Nest. It was something the game had always skipped over; there was only one ruin, one door that was interactable. In real life, there were dozens of doors, many of which were partially blocked, sealed, or broken and had to be painstakingly opened before we could rule them out. \n\nThere were several skirmishes with darkspawn inside the ruins; I wondered if many of the ruins connected through tunnels and secret entrances, but without days or months to spend, determining that was impractical. Instead, when a doorway was opened, a group of soldiers led by two Wardens would enter, take a brief look around, and then come back to report. Most of the entrances led to areas that were clearly too small or too damaged to house an army or a broodmother, but finally we'd managed to narrow the options down to three: three entrances that lead deep into the ruins, occupied by at least some darkspawn, heading toward the chasm. \n\nThe next day, after a rough night filled with darkspawn nightmares for all of the Wardens, we entered the first ruin. We'd left a large group of soldiers to defend the camp, and another to patrol the other two entrances; Seranni, whose fighting skills were still developing, stayed at camp to warn against any darkspawn attacks. The rest of the Wardens, plus Velanna, Nate, Avanna, and I led the way inside. \n\nIt was bleak work; the ruins were dark and grim, filled with dust, mummified darkspawn corpses, and living darkspawn. Each bit of progress required us to leave soldiers behind to guard the rear, and between the fighting and the organisation, it took hours to work our way through. We did find a Broodmother, the experience of which horrified our newest Wardens and the one recruit; I'd forgotten than Alim, Rolan, and Velanna had never seen one of the abominations, and all three were left shaken. \n\nRolan, Alistair, and I worked surprisingly well together dispatching emissaries, though a poorly placed smite by Rolan staggered both Solona and Alim without completely incapacitating them. Velanna helped them recover with rejuvenating spells after giving the former templar an incredibly dirty look. I've been avoiding him, not wanting to deal with it, but clearly I need to keep a closer eye on that Chantry zealot if Velanna's already aware of his bias. \n\nThe three mages learned to coordinate their spells and managed to take down the two ogres we ran across. While the soldiers and the rest of the Wardens kept the regular darkspawn at bay, Aedan, Zevran, and Wulf slipped into the shadows, making their way through the tentacles and small horde of darkspawn to destroy the Broodmother. It was a long, difficult fight, but we came away with only minor injuries: a few gashes, some bruises, and the odd acid burn from the Broodmother's caustic spit -- I noticed, rather smugly, that none of the mages offered to heal Rolan's acid burn. \n\nWe returned to camp after dark, victorious -- sort of -- but exhausted, and knowing we'd have to start again with a different entrance the next morning. Fortunately, supper was waiting for us, as was hot water for washing; afterwards we collapsed into our tents gratefully, and slept deeply."
    ],
    "authorname": "ElyssaCousland",
    "tags": [
        "fantasy",
        "fanfiction",
        "dragon age",
        "modern girl in thedas",
        "romance"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/there-and-back-again-ch-136"
}
{
    "title": "Lilith's Emporium: The Beast Within",
    "pages": [
        "Nessira was placing new items in the shelf to replace some of the things she had sold recently. She could feel someone coming as the shop had a way of luring people in so she could give them what they needed or what would be the most arousing and entertaining for her. She had a set of rules she had to follow but could sneak in the occasional curve ball. Lilith, Victoria, and Rick didn't really pay too much attention to what went in the store as long as they got what they needed. Rick and Victoria had the attitude of not wanting to know too much so it wouldn't weigh on their conscious.\n\nLilith had learned about the plant and the unfortunate death of Kevin who had purchased it but knew that was how forest Nymphs were born so let it slide for the most part and continued to let Nessira run the store the way she saw fit. It was hard for Nessira as she had to walk a fine line with her customers and leaving a trail of bodies would get he in trouble if she wasn't too careful.\n\nShe heard the door open and knew the woman she had been expecting had arrived. She sensed her coming a while ago and had something special planned for her. There was a beastly looking statue she had in the back that had a certain effect on people and she had been hoping to test it out and she was the perfect candidate. She saw the pretty young brunette standing by the door looking a little confused and Nessira headed her way.\n\n\"Hello and welcome to Lilith's Erotic Emporium, anything I can help you with today?\" She said as she looked her over. she was a very attractive woman but she seemed to try and hide it like she didn't want to show how sexy she could be.\n\n\"I um, I don't know what I'm doing here, I just felt compelled to stop in.\"\n\n\"That's okay, we are here to help everyone.\"\n\n\"What do you mean? What kind of store is this?\"\n\n\"Well, we deal in, lets say sexuality on a natural level.\"\n\n\"Really, that's... interesting.\"\n\n\"Why, are you in need of sexual help?\"\n\n\"I um...\"\n\n\"Please, you can tell me, by the way my name is Nessira, and I promise whatever the problem is we will have a solution here at the shop.\"\n\n\"Stacy, and well its, I'm having trouble, with um...\"\n\n\"Just say it, trust me I'm not here to judge.\"\n\n\"Well, I'm having trouble getting in the mood.\"\n\n\"Really, trouble with your man?\"\n\n\"No he's great, I love him so much and he... well let's just say he is very good at what he does, if you know what I mean.\"\n\n\"Oh I can imagine, so what is the problem then?\"\n\n\"I don't know, I just have this problem, It's a psychological thing, I should probably just see a therapist about it, but in the meantime I was wondering if you had some sort of pill or something that might just help me get there.\"\n\n\"Not at all, I've seen this before, let me guess, something bad happened when you were younger?\"\n\n\"Yeah, you could say that.\"\n\n\"Can you tell me about it, were you...?\"\n\n\"Oh no, no no nothing like that.\"\n\n\"Okay, so what is it then?\"\n\n\"It's just, I was kind of an odd duck back in college, even my old boyfriend would tell me I wasn't much to look at and, I don't know ever since all that I have just never been very confident and every time Tony and I are ready to... you know, I just think back to all of that and, It really affected me more than I thought.\n\n\"I see, well Stacy you are a beautiful woman, you are a goddess among men, and I will not let you leave until you feel that way about yourself. Trust me Troy will be quite happy when we are done with you.\"\n\n\"What do you mean, what are you going to do to me?\"\n\n\"Relax, I'm a professional.\"\n\n\"Proffesional what?\"\n\n\"Ha, lots of things, you will see. The question is how badly do you want to fix this problem?\"\n\n\"I love Troy and I really want to be in the mood when he's in the mood it's just hard sometimes, I don't know, I just want to get over this.\"\n\n\"Good.\"\n\n\"Sorry, I have no idea why I am telling you all of this.\"\n\n\"This place has a way of bringing it out of people, but its okay I have the perfect remedy.\"\n\n\"Really, is it simple?\"\n\n\"Very, tell me do you like natural or spiritual remedies?\"\n\n\"Sure, I guess.\"\n\n\"Great because I can do something for you that will greatly boost your sex drive, just come over here with me.\"\n\n\"Where are you taking me?\"\n\n\"Just back here in the corner.\" Nessira said leading her an area with a stone pedestal and a mat on the floor. \"Sit here please.\" She said inviting her to sit on the mat.\n\n\"What is this?\"\n\n\"We are going to awaken your inner sexual beast.\"\n\n\"My what?\n\n\"Everyone has an inner beast filled with lust that needs to be satisfied, we are going to awaken yours.\"\n\n\"Your joking right?\"\n\n\"Not at all, I am guessing whatever happened to you is what is causing your problem, someone took away your power, your sexual confidence, and I am going to give it back to you, please sit, get comfortable.\" Nessira said pointing to the mat. \"Now this may seem silly but I promise you when we are done you will feel like a new woman, I guarantee it.\"\n\n\"I don't know. I feel like this is a bit if a scam here, no offense.\"\n\n\"None taken, I know it seems weird but this has helped others and here at Lilith's we have a 100% satisfaction guarantee, if it doesn't work you get your money back no questions asked.\"\n\n\"Really?\"\n\n\"Really, just this little session and you will be good as new, only $12.50.\"\n\n\"That seems fair, oh all right, what have I got to lose.\" Stacy said giving her the money.\n\nStacy looked down at the mat and sat down on her legs and watched Nessira walk over and start lighting different Incense in a circle around her. She looked at the empty pedestal in the middle as Nessira walked into the back room. She wasn't sure what was going on as she sat there smelling the different scents burning around her. They were all pleasant but she wasn't sure what all of this had to do with what was going on or how it was going to help.\n\n\"Here we go!\" Nessira said walking back out carrying a strange statue of some sort of beast.\n\nIt resembled a wolf in a way but also humanoid as it stood in two legs. The more she looked at it the more it reminded her of a werewolf almost. It was a little frightening to look at but she placed it on the pedestal i the middle and walked over kneeling down behind her.\n\n\"What are you doing?\" Stacy asked.\n\n\"Just relax, I am a licensed masseuse.\"\n\n\"Wait, I didn't realize you were going to...\"\n\n\"Don't worry, I'm just going to rub your shoulders to help to relax, it's okay, and if it starts to get too uncomfortable for you just say so and I will stop.\"\n\nStacy was a little hesitant but a nice shoulder rub sounded good so she let Nessira begin. She placed her hands on her shoulders and began to gently massage some of the stress out of her. She had to admit it did feel good and she closed her eyes and breathed in the different scents around her.\n\n\"That's it, just relax, imagine you are in a field running, wild and free.\"\n\n\"Wild and free? Am I naked?\" She asked not sure how serious Nessira was.\n\n\"If you choose to be, just feel the wind on your face, the ground beneath your feet.\"\n\nStacy began to imagine all of this. She felt herself beginning to relax as Nessira rubbed her shoulders more which was starting to feel even better. She even let out a little moan as they went on hoping it was okay. She imagined herself running through a field but she began to see herself like she was running on four legs instead of two. She could feel herself breathing heavily and growling a little as well.\n\n\"That's it, let yourself free, free from the shackles of your past, free from responsibility, see the person who told you that you weren't beautiful years ago, feel yourself hunting him down, you have their scent, you hear their heart beating in fear as you pounce at him tearing their flesh from them and even tasting their blood.\"\n\nStacy was a little uncomfortable at first at what Nessira was saying as she did start to see it. She could imagine it all which was strange but it also felt a bit liberating. Nessira started to unbutton Stacy's shirt while her eye's were still closed. She was so lost in the visions she didn't realize was Nessira was doing as she began to rub her hands all over Stacy's skin even sliding them under her bra getting her body turned on.\n\n\"No, do you see Troy?\" Nessira asked as Stacy's visions began to change.\n\nShe could see Troy standing there and smiling at her as she began to feel a sort of excitement. \"I do, I see him.\"\n\n\"Good, do you want to harm him?\"\n\n\"No!\"\n\n\"Do you want to attack him and make him afraid for his life?\"\n\n\"No!\"\n\n\"What do you want to do to him?\" She said whispering in her ear as her hand slid down into Stacy's pants and she began to massage her clit.\n\n\"I... I want to...\"\n\n\"Go on, let it fill you, let it consume you, let the beast out!\"\n\n\"I want... I want to rip his clothes off!\"\n\n\"Good, what else?\"\n\n\"I want to Fuck him, I want to fuck him harder than any woman ever has, I want him to dream about my sex and beg for it!\"\n\n\"That's it, now when I count to three I want you to open your eyes and look at the statue I placed in the center.\"\n\n\"The statue?.\" Stacy said still enjoying her touch and her visions.\n\n\"Yes that statue, you are almost there, and he will assist you the rest of the way, are you ready?\"\n\n\"I... yes!\"\n\n\"One, two,\" Nessira said still massaging her between her legs trying not to give in to her own lust. \"And three.\"\n\nStacy opened her eyes and looked at the statue but something wasn't right. The eyes were glowing a bright red color which didn't seem natural but once her eyes were locked onto its she couldn't look away. She stared at the glowing orbs and began to feel very strange like she couldn't move and was not in control of herself anymore.\n\n\"That's it, let it awaken the beast within, the beast you have kept caged up for far too long.\"\n\nStacy could hear Nessiras words but could not look away. She felt something break inside her all of a sudden like something had awoken. She could hear a low animal growl as she lost herself in the two red light shining in her eyes. She felt the growl grow louder like it was coming from her before she bent down onto all fours and began to crawl towards the statue. Nessira backed away and watched Stacy as her eye's glowed red and she snarled and crawled towards the pedestal. She watched as Stacy's fingernails began to grow looking more like claws and she started to drool as she sprouted fangs. \n\n\"Um... okay that's more than I expected.\" Nessira said watching Stacy transform more than she should be. \"Oh shit!\"\n\n\"Ahhhhhh...ROOOOAAARR\" Stacy shouted out as she stood up letting the rest of her clothing rips apart as her muscles bulged and she started to grow a dark fur similar to her own hair color. Nessira saw a powerful beast that shook the building with its roar covered on fur looking like a wolf human hybrid ready to destroy her prey.\n\nNessira ran over close to her as she spun around and glared at her ready to attack as she said \"Cessabit\" and touched her forehead sending Stacy back before she collapsed to the floor and returned to normal.\n\nA little while later Stacy opened her eyes looking up at Nessira who was tending to her. Stacy was confused by what had just happened and felt a little dizzy but seemed alright for the most part. She looked over at the statue which was no long glowing at all before Nessira helped her to her feet.\n\n\"I um... sorry, what happened?.\" She said looking at the nice red dress she was suddenly wearing.\n\n\"Oh sorry about that, your clothing got massage oil on them so I gave you this from our stock, free of charge.\"\n\n\"Oh, okay, thank you I guess, that was so...\"\n\n\"How do you feel?\"\n\n\"Actually I feel really good!\" Stacy said standing up and looking at herself in the mirror wearing her new dress. \"I am beautiful!\"\n\n\"You see, I told you so, and now that your confidence is boosted I promise things will get better from here.\"\n\n\"I cant thank you enough Nessira!\" She said running over and hugging her which was a lottle bit of a shock to her but she enjoyed it.\n\n\"I will tell everyone about this store, you really helped me and I can never thank you enough for what you have done.\"\n\nNessira was a little shocked by what she was hearing. She heard the words thank you all the time from customers but this woman was actually very grateful for what she had done for her. It was a strange feeling for her but she also knew that Stacy didn't know about the side effects but wasn't too concerned.\n\n\"It was um... my pleasure.\"\n\n\"I will be sure to come back again, thank you so much, I have never felt so beautiful and confident in my life, thank you!\" Stacy said hugging her again before heading out the door.\n\n\"Well, that was interesting?\" Nessira said standing there a little confused but also a little worried. \"Nah, she'll be fine.\"\n\n----\n\nTroy had just gotten home from work and was heading up to his apartment. He was tired after the stressful day he had just gone through but was hoping to see Stacy later that night as he had something he wanted to ask her. The elevator door opened and he stepped into the hallway heading for his door. He slid the key in and opened it but his nose was hit with a scent of something that smelled delicious.\n\nTroy looked over st the table which had boxes of chinese food from his favorite place all set up ready for him. He looked over and saw Stacy walk out of the kitchen with a bottle of wine in her hand but he was a little blown away by how sexy she looked in the red dress she was wearing. It showed off her legs and the perfect amount of cleavage but she usually didn't dress like that but he was happy to see her like this.\n\n\"Hey, what's all this?\" Troy asked standing there confused.\n\n\"I wanted you to some home to your favorite meal and was hoping we could spend the evening together.\"\n\n\"Wow, yeah I love that plan.\" He said putting down his briefcase and giving her a kiss before he took his coat off. \"But you didn't have to go through all of this trouble.\"\n\n\"I wanted to, I love you and I know I can be a pain in the ass sometimes, especially lately.\"\n\n\"Stacy, it doesn't bother me, everyone has baggage but I love you, more than anything.\"\n\n\"I love you too, and I want to start making it up to you.\"\n\n\"Making what up to me?\"\n\nStacy walked over and pulled him down for another kiss this time was a passion he had never seen from her before. She wrapped her leg up around him pulling him close as she leaned back against the table as he wrapped her hands around her waist. She could tell he was getting hard and could even smell his arousal which was strange but she didn't really question it as she just wanted him.\n\n\"Unless you'd like to eat first?\" She asked breaking her kiss for a moment.\n\n\"Chinese food is better cold anyway!\" He said before he kissed her again and picked her up while she hooked her other leg around him and let him carry her to the bedroom.\n\nHe placed her gently down on the bed as his lips never left hers. Her hands reached for his belt and began to take it off before attacking his zipper. She wanted to feel his cock in her hands, in her mouth, and even between her legs. Whatever Nessira had done to her she was loving it as she felt confident, sexy and ready to duck Troy's brains out.\n\n\"You are so beautiful!\" Troy said breaking the kiss to look into her eyes.\n\n\"I feel beautiful, I talked to someone today who helped me see myself the way you do.\"\n\n\"Really, I'll have to thank this person because I've been saying it for years but you never listened to me.\"\n\n\"No more talking, I want you to fuck me!\" She said pushing him off of her and rolling him over to her side.\n\nShe pulled off his pants and saw his throbbing cock there ready for her as she grabbed it and wrapped her lips around him sucking him hard and he noticed how forceful she was. It was not a problem if anything he was enjoying it even more. She had always been a little bland in bed and he had always known she had confidence issues but he was liking this new side of her. Stacy was loving the taste of his cock as she sucked on it. She was never a big fan of oral sex but something today just made him taste amazing. The little bits of precum were salty and delicious as she lapped up every bit of it. She gently squeezed his balls with her hand listening to him moan which only turned her on even more.\n\nShe released his cock and looked up at him before she began to climb towards him. She slid her hands under his shirt before she ripped it open sending buttons flying everywhere bur he didn't seem to care as he wanted her just as much as she wanted him. There were red scratches along his chest from her fingernails. Not enough to make him bleed but noticeable anyway. She started to lift up the skirt if her dress and Troy noticed she was not wearing underwear before he helped slide it over her head.\n\n\"I want you so bad!\" Stacy said as she teased his cock with her dripping pussy.\n\n\"Oh yeah, I want you too.\" He said pulling himself up to kiss her as she impaled herself on his waiting cock.\n\nAs he slid inside her she bit his bottom a lip a little. \"Ouch!\" He said tasting his own blood.\n\n\"Too rough?\"\n\n\"No, its fine.\" He said before he kissed her again.\n\nShe shoved her tongue in his mouth like she was trying to lick the blood from his lips. He thought this was a bit strange but he was so turned on it didn't matter. She began to thrust her hips as her pussy tightened around his cock making him moan at the feeling. She began to kiss the side of his neck not realizing her eyes were filling with blood becoming red. As she sucked on his skin she felt something strange in her mouth as her teeth began to grow. She could feel a growling noise start to build from within her as the pleasure grew between her legs.\n\nStacy looked up and saw her reflection in the window seeing her eyes red and her fangs. She closed her eyes and hopes he wouldn't notice as she was freaked out but also wanted to enjoy every second of the pleasure she was getting from him. She wrapped her hands around his back as he began to moan louder and she could tell he was moments away from cumming. She was close herself and wanted to get this all finished so she could figure out what was wrong with her. The began to moan together as she felt her pussy ready to explode. She felt this primal urge start to build in her as she continued and she couldn't fight it much longer. She heard him shout out and felt his cock twitch right around the same time her pussy spasmed and they orgasmed at the same time. Troy yelled out as she went to but what came out of her was more of a primal roar as she dug her fingernails into his back making him bleed but he didn't seem to care as the pleasure was too intense.\n\nWhen it finally stopped she collapsed against him resting her head on his shoulder enjoying the after affects of the amazing sex they just had. She began to lick her teeth with her tongue and noticed her teeth felt normal again. She looked at the window and saw her eyes were back to their normal color as well.\n\n\"Ouch Baby, did you dig your claws into my back?\"\n\n\"Claws, what claws, I have regular fingernails see, see normal, what are you talking about?\"\n\n\"Woah, calm down, just when you don't cut them they feel like claws.\"\n\n\"Oh, yeah, right, sorry, was I too rough?\"\n\n\"What, no it was fucking amazing, I don't know what this person told you but remind me to send them a thank you card.\"\n\nHe laid down on the bed obviously tired as she laid down and rested her against him listening to his heart race. She was a bit freaked out by what had happened and was starting to wonder what exactly Nessira did to her.\n\n\"Oh hey, Stacy I forgot to tell you, I am going on a business trip for a few days so Ill be gone until Tuesday.\"\n\n\"Oh, okay.\"\n\n\"You can just stay here if you want, I love coming home and finding you here.\"",
        "\"Sure, maybe I'll do that.\"\n\n\"You alright?\"\n\n\"I'm... I'm fine.\" She said kissing him still tasting to bits of blood left in his mouth. \"Relax, Ill go put supper in the fridge and I'll be right back.\" She said grabbing a t-shirt and sliding it on before heading out to the dining room.\n\nShe took all the food and placed it in the refrigerator and got herself a drink. She stood there in the kitchen wondering what the hell had happened in there. It was the best sex she had ever had but she started to transform like she did in that vision she had at Lilith's. She was starting to question her own sanity as she didn't believe in the supernatural but something was definitely wrong.\n\n\"Stacy, is everything alright?\" She heard Troy call from the bedroom.\n\n\"Be right there.\" She said placing down the glass and heading back into the bedroom with him getting comfortable as he wrapped his arm around her. \n\nShe felt safe and comfortable with him but something inside her was different. She thought about her ex boyfriend from years ago because it had come up when she spoke to Nessira and how he would trash the way she looked and also the parts she didn't tell her. She began to feel a rage inside her that started to make her growl a little thinking about it. She could actually see herself attacking him but whenever she thought of Troy she felt a calm come over her.\n\nShe tried to get some sleep but she knew she had to get a handle on whatever was done to her before she did hurt someone or even worse Troy. That night she had a very vivid dream similar to the one she imagined at the shop. She saw her ex boyfriend Brandon and she was chasing him. It was through the woods and she could hear his footsteps and his breath. She could smell his scent and felt the ground beneath her feet as she ran on all fours chasing him. She pounced on him and growled as he coward in fear. She could smell the fear and see it in his eyes as she had him pinned to the ground ready to rip his throat out. She tasted the sweat as her tongue traced up his neck and along his face. She could hear his heart moving rapidly and she was enjoying him in his current state until she opened her large wolf like jaws and bit down hearing his screams until she realized it was her screaming as she shot awake from a sound sleep.\n\n\"Woah Baby, are you alright?\" Troy said waking up with her and putting his arm around her to comfort her.\n\nShe was covered in sweat and breathing heavily and he could see how shook up she was. He kissed her forehead and held her close as she calmed down in his arms. She felt safe and relaxed in his embrace and quickly calmed herself. She looked up at him and kissed him before they laid back down together.\n\n\"Are you okay?\" He asked once more.\n\n\"Yeah, just a bad dream is all.\"\n\n\"Oh okay, just worry about you, are you gonna be okay while I'm gone?\"\n\n\"I'll be fine. Troy, when you get back I want to talk to you about something though.\"\n\n\"Actually I wanted to talk to you about something as well.\"\n\n\"Okay, so Tuesday night, dinner?\"\n\n\"Sounds good, my flight gets in early.\"\n\n\"Then I'll take the day off and meet you at the airport.\"\n\n\"Okay, sounds good.\"\n\n\"Yeah, I love you Troy!\"\n\n\"Seriously, are you alright?\"\n\n\"I will be, I promise.\" She said kissing him and climbing on top of him grinding against him through the blankets.\n\n\"Damn, okay round two it is!\"\n\n----\n\nStacy Saw him out after another sexual round that left her feeling that something was definitely wrong. It didn't get as bad as the last time but still was enough to bother her a little so she got in her car and headed back to the shop. She pulled up to Lilith's Erotic Emporium looking for answers. She walked up to the door and saw it was locked and there was a sign on the door saying they would be closed until Wed of next week.\n\n\"Fuck!\" She said before she looked inside and banged on the glass seeing if anyone was in there. \n\nAfter five minutes or so of no one answering she gave up and got back in the car. She headed back to Troy's place and tried to relax which wasn't too difficult. A few days went by and she was starting to feel a little strange. She laid on the couch for most of the day and she found herself missing Troy a lot more than she thought she would. She began to fantasize about what she would do to him is he walked in. She saw herself jumping him and tearing off his clothes just to get his throbbing cock inside her. \n\nThe more she imagined this the more turned on she got. She was getting very horny and started to feel very weird as she noticed her teeth growing again becoming like fangs in her mouth. She looked down and saw her fingernails starting to grow and her vision start to change as well as she stood up starting to freak out a little by what was happening to her but she could not deny the extreme lust she was feeling at the same moment and wished Troy was there as if she knew fucking him would stop her transformation. Stacy didn't know what to do so she began to rub her clit and start fingering herself violently trying to get some sort of satisfaction or at least enough to stop this. She could feel her muscles expanding and heard her jeans rip open as her legs got thicker.\n\n\"Oh God, what is wrong with me?\" She said as she had no control over what was happening. \n\nShe fell to the floor and started to transform growing fur as a blood lust began to fill her. She wanted to eat flesh and fuck someone to death and could feel the creature inside her breaking out until it was done. Stacy was still aware but her perception of everything had changed. She ran for the door and everything got a little blurry after that. She remembered chasing someone down and alley and maybe even attacking him. There was a lot of running and growling she remembered and even some fucking but it was all unclear.\n\n----\n\nBack at the shop Nessira was putting out some new merchandise when she heard the door open. A little confused she walked around from behind a shelf and saw a blonde woman standing there with a stern look on her face staring at her.\n\n\"Um, hi Victoria, what brings you in here?\"\n\n\"Maybe you'd like to explain why people are claiming a man was killed bu a werewolf in New York last night?\"\n\n\"What?\"\n\nVictoria pulled out her phone showed Nessira a news report about a man who was found naked in an alley with his throat ripped out and apparently with traces of semen around him like he was fucked before he was killed.\n\n\"Um, okay I can explain this...\"\n\n\"Well?\"\n\n\"Okay, a woman came to me suffering from PTSD from a past relationship, she needed something to boost her sex drive so I awoke her inner sexual beast but I think I awoke too much.\"\n\n\"Nessira, I don't care if the occasional dick head dies but this is a problem don't you think?\"\n\n\"I know I know, I can fix this!\"\n\n\"Can you reverse what you did to her?\"\n\n\"Um, well no, but I know a way she can gain more control over it, I will fix this I promise.\"\n\n\"You better, I promised Lilith I would give you a chance so don't make me regret this.\"\n\n\"Calm down Blondie I got this.\"\n\n\"I will kill you Nessira, remember you work for me.\"\n\n\"Yes Victoria.\"\n\n----\n\nAs the sun came up she found herself in a small park sleeping in a bush. She looked herself over and saw she was naked and covered in dirt and blood. She began to panic a little not sure what happened last night and tried to cover herself. She suddenly felt a hand in her shoulder and a calming sensation wash over her as she looked and saw Nessira standing above her.\n\n\"You? YOU DID THIS TO ME!\" Stacy said trying to attack her starting to growl again but Nessira reached out and touched Stacy's forehead and said \"Cessabit\" to which Stacy fell to the floor and began to calm down and return to normal.\n\n\"What the... what did you do?\"\n\n\"It's a calming spell, you should be okay for now.\" Nessira said wrapping a blanket around her as they sat on a bench together.\n\n\"What the fuck did you do to me?\"\n\n\"Listen I am here to help you so please watch your tone!\"\n\n\"My tone? You turned me into the big bad horny wolf!\"\n\n\"I know, things got a bit out of hand?\"\n\n\"You think?\"\n\n\"The shop is a way for supernatural creatures to feed off sexual energy, people die sometimes, you were just another customer but... I can't reverse what was done to you but I can help.\"\n\n\"How, haven't you done enough?\"\n\n\"I deserve that, but look the beast feeds off of sex and passion so as Long as you and Troy have sex every couple of days you'll be fine.\"\n\n\"Well the times we've had sex so far I went a little feral, I don't want to scar him every time we fuck!\"\n\n\"Okay, there is a way to stop that or at least gain more control over it.\"\n\n\"How?\"\n\n\"You aren't going to like it.\"\n\n\"What is it?\"\n\n\"I think you know, you've been dreaming about it.\"\n\n\"Oh God, Brandon?\"\n\n\"Yeah.\"\n\n\"I have to kill him?\"\n\n\"He was the one who caged the beast, it won't be satisfied until it gets revenge.\"\n\n\"Is there any other way?\"\n\n\"I wish there was, but no.\"\n\n\"What the fuck! I should kill you, I should let my beast out and fuck you to death you redheaded bitch!\"\n\n\"Look, for starters that sounds really hot, but it wouldn't work, I am a Succubus!\"\n\n\"Of course you are.\"\n\n\"That doesn't shock you?\"\n\n\"You turned me in to a werewolf, I think my shocks are worn out!\"\n\n\"Fair enough.\"\n\n\"So I have to kill Brandon, then what?\"\n\n\"Then you will have more control, you may still experience some feral nature if you don't fuck every few days but worse case I may have some remedies for that back at the store.\"\n\n\"Why are you doing this, why are you helping me?\"\n\n\"I don't know, I feel a little bad that I let too much of your inner beast out, then you were on the news and then my boss yelled at me.\"\n\n\"I was on the news?\"\n\n\"Never mind, right now I am going to help you, in fact I will even kill Brandon for you if you want, if you see his death it may be enough for your beast to find peace.\"\n\n\"I don't know, this thing seems pretty violent.\"\n\n\"It wants revenge, it's all your sexual desires, once the rage has been extinguished it will focus on sex and lust.\"\n\nStacy started to think about killing Brandon and how she didn't want to. She was not s killer but the more she thought about it she began to feel a new type of lust start to fill her, a blood lust. She imagined herself chasing him down again like her dream before and sinking her teeth into his neck, tasting his blood. The thought of doing that got her very hot and turned on as she began to touch herself. Nessira watched a little confused by what was going on.\n\n\"Stacy, are you okay? Like I said I will kill him for you, it's the least I can do since..\"\n\n\"NO!\" Stacy said in a deep voice with a growl behind it. \"He is mine!\" She continued as her eyes turned black and started at her.\n\n\"Shit, well okay then.\" Nessira said a little shocked at her eyes being black instead of red but glad it was early and there wasn't anyone around to notice them. \"We'll have to find him first.\"\n\nStacy calmed down and let herself return to normal before taking a deep breath. \"I know where to find him, but first I need a shower.\"\n\n----\n\nA few miles outside the city not too far from Lilith's shop was a little dive bar where Stacy remembered Brandon spending most of his time. Stacy and Nessira were on their way there in Stacy's car which Nessira felt strange riding in as she usually flew but this was a different change of pace for her. \n\n\"What was his name?\" Stacy asked.\n\n\"Who?\"\n\n\"The man I killed last night?\"\n\n\"I don't know, but if it makes you feel any better his wife had nothing nice to say about him.\"\n\nStacy sat silent for a while like she wasn't sure what to say or how to feel.\n\n\"Okay I need to ask you something.\" Nessira said. \"What did he do to you?\"\n\n\"What do you mean?\"\n\n\"Brandon, what did he do?\"\n\n\"I told you, he used to make me feel like shit constantly.\"\n\n\"But there is more to it, the beast wants blood, you got angry when I offered to kill him for you like it wanted the pleasure itself.\"\n\n\"It's none of your business.\"\n\n\"Look Stacy, I am really trying to help you here and that's something I haven't done in a long time so could you please cut me some slack?\"\n\nStacy was silent for a moment before she finally said \"He hit me.\"\n\n\"What?\"\n\n\"He hit me a few times, I know I said he used to belittle me and that's why my confidence was shot but towards the end he started drinking and hitting me, a lot.\"\n\n\"Shit, I can see why you want to rip his throat out, but I kinda figured that was the case.\"\n\n\"Why?\"\n\n\"The man you killed hit his wife, apparently a lot, so you have a type apparently.\"\n\n\"Oh, that actually makes me feel a little better.\"\n\n\"What about Troy, what's he like?\"\n\n\"Troy is amazing, it was actually him who stopped Brandon before.\"\n\n\"Really, how?\"\n\n\"Brandon and I were out at a party and Troy was there, he was a friend of a friend or something, I didn't know him but Brandon was being a dick all night and then got drunk and slapped me when he didn't think anyone was looking, Troy saw it and decked him knocking him out.\"\n\n\"Wow, I like this Troy guy.\"\n\n\"I ended up leaving with him and... it was months before we started dating but he was so much nicer and kinder and just everything I wanted in a man. He helped me get all my stuff back from Brandon and was just there for me in every way Brandon wasn't.\"\n\n\"He sounds amazing, so when you came to my shop?\"\n\n\"I wanted to be there for him, not just as a girlfriend but sexually like he had been there for me in every other aspect of our relationship, and I had heard from a coworker about your store, she told me you could help me with my problem.\"\n\n\"Really, what was her name?\"\n\n\"Janice, it's weird she used to be kind if a bitch then she just sort of changed all of a sudden.\"\n\n\"Oh really, how so?\"\n\n\"Just all around, she started working things out with her husband, she actually fired the guy people suspected she was sleeping with during a party, then he was found dead later that night, I heard it was suicide but it was weird circumstances, anyway she told me to check out the shop because it helped her.\"\n\n\"Lizeth, you sexy little beast you.\" Nessira said under her breath.\n\n\"What was that?\"\n\n\"Nothing, is this the place?\"\n\n\"Yes it is.\" Stacy said with a growl.\n\nNessira looked at the bar as the car parked. She checked out the area before she turned back to Stacy but she was already gone. A little shocked by her speed she looked over and saw a car with 4 slashed tires but still couldn't see her.\n\n\"Damn she's fast!\"\n\nNessira watched this guy come strolling out of the bar with a drunken swagger. She wondered if it was Brandon until he walked over to the car with the busted tires and knew it was him. She watched him throw his hands in the air looking pissed off before he started walking down the street. It was a thickly wooded area so Nessira got excited knowing Stacy was hiding in the dark ready to pounce. Brandon walked down the street headed home to sleep off his current state. He was pissed that someone would slash his tires but figured he deal with it in the morning after a good night sleep. As he walked he suddenly heard something like he was being followed.\n\n\"Hello?\" He said looking around not seeing anything before he continued in.\n\nAbout a quarter mile later he heard some twigs snap and looked all around again. He didn't see anything at first but he started to hear a growling noise coming from the woods across the street. He felt the hair stand up on his neck when he saw to eyes in the dark glowing from the reflection of the nearby street lamp and could see the breath coming from it.\n\n\"Holy shit.\" He said backing slowly into the woods. \n\nHe knew it was dumb to go into the woods but he figured he'd have a better chance than out on an open road. He turned and ran as fast as he could hearing the creature following him which made him.panic a little. He did not look back and just ran as fast as he could until he tripped over a down tree and fell flat on his face getting a mouth full of leaves. He waited for the wolf to pounce on him but nothing happened. He waited and rolled over looking around and wiping the leaves off his face but he didn't see anything. He breathed a sigh of relief thinking maybe he had lost the wolf and started to brush himself off.\n\n\"Hello Brandon.\" A woman's voice said from the dark.\n\n\"Fuck shit! Who... who's there?\" He said looking all over.\n\n\"It's been a long time hasn't it.\" Stacy said stepping into the moonlight so he could see her.\n\n\"What the... Stacy? What are you... why are you naked?\"\n\n\"You think I'm sexy now don't you?\"\n\n\"Well yeah you look incredible but... what's going on here?\"\n\nShe suddenly straddled him pinning him to the ground a little quicker than he was expecting. \"You want me don't you?\"\n\n\"Holy shit, you look amazing but I thought you were with that asshole what's his name?\"\n\n\"Oh you mean Troy?\" She said leaning down on top of his chest. \"Don't you worry about him, this is about you and me.\"\n\n\"Hey, if you want to fuck on the ground in the middle of the woods for old times sake I'm down, but I think there is a wolf nearby.\"\n\n\"Don't worry about the wolf, she's already got you.\" She said licking his face as she grinded against him getting him hard.\n\n\"This is too weird, maybe I drank too much tonight.\"\n\n\"You always were a bit of a drinker, but don't you worry, when they find you the paper will read something like drunk attacked and killed by wolves\"\n\n\"What are you talking about?\"\n\nShe looked down at him with black eyes that reflected light like a wolf did and he started to panic. She began to growl as she got closer to his face and started to smell him. He was turned on and terrified at the same time not exactly sure what was going on or what had happened to Stacy.\n\n\"Look you, get off of me, this little game is over, don't make me... what the?\"\n\n----\n\nIn the dark Nessira had sprouted her wings and was trying to find where the both of them had run off to. She had heard footsteps but everything had gone quiet so she wasn't sure where to look but all that soon changed when she heard a blood curtailing scream of a man in the darkness and knew where to land. She landed a few yards away and saw a large beast in the darkness on top of someone. It was dark but she could see fur and hear a growling breath and what sounded like flesh tearing. She walked a few steps closer when the creature turned to her and she saw those eyes and a large jaw dripping with blood. Brandon was on the ground with most of his throat missing.\n\n\"Holy shit!\" Nessira said looking at the scene before her.\n\nStacy climbed off of Brandon and walked towards Nessira with a violent look in her eyes. Nessira was actually starting to get a little nervous as this was a very intimidating creature standing before her and even though she was powerful she didn't want a fight if she could avoid it. Stacy stopped and began to return to her human form shrinking down to normal size. Her fur disappeared and her claws retracted until she stood there naked with blood covering her from her mouth down to her stomach.\n\n\"So, feel better?\" Nessira asked.\n\n\"I want to go home.\" Stacy said as Nessira walked over and spread her wings wrapping them around her to keep her warm before she brought her back to the car leaving Brandons body in the woods.\n\n----\n\nStacy was in the shower letting the warm water hit her face and wash the blood and dirt from her skin. She felt different after the events that had happened that night and began to feel a calming peace wash over her. A part of her felt guilty for the men she had killed despite the fact that they were both horrible people but she was ready to put it all behind her and move on with her life with Tony while also trying to find a way to explain her change in sex drive.",
        "Troy's plane landed and he had not been able to get a hold of Stacy the whole time before and after his flight. He was starting to worry a little but he grabbed his bags and headed out to call a taxi if need be when he saw Stacy standing there by her car looking beautiful wearing a sundress with a big smile on her face. She ran over and jumped into his arms as he dropped his bag and held her as their lips locked together.\n\n\"I missed you.\" She said breaking the kiss. \n\n\"I missed you too, everything okay?\"\n\n\"Now that your back, yeah everything is great!\"\n\nThey got in the car and headed home as Troy asked \"so how was your weekend, I did not hear from you much?\"\n\n\"Yeah sorry, I had to take care of a few things.\"\n\n\"I see, hey wasn't there something you wanted to tell me?\"\n\n\"Oh, yeah well, The person I talked to about my issues, well it was a hypnotist.\" Stacy said after spending a lot of time over the weekend trying to figure out how to explain why she was extremely horny all of a sudden\n\n\"A hypnotists?\"\n\n\"Yeah, to get over my little problem?\"\n\n\"Oh, is that why you were super in the mood before I left?\"\n\n\"Yeah, I didn't think it would work as well as it did, but let's just say I really missed you this weekend.\"\n\n\"I see?\" He said looking at her.\n\n\"Oh no, I didn't cheat on you or anything?\"\n\n\"Of course, I'm just wondering where you're going with this, honestly I didn't think hypnosis worked that well.\"\n\n\"Neither did I, I tried to go back to see if they could dial back a little but would you believe the place was gone, just up and left overnight.\"\n\n\"Really, happens alot with places like that\"\n\n\"Yeah I guess so, it's just I may have this issue for a while.\"\n\n\"Issue, you mean?\"\n\n\"I need you, like once we get home I want you to fuck my brains out.\"\n\n\"Wow, you've never said that to me before.\"\n\n\"I'm sorry, I was trying to solve one problem and caused another.\"\n\n\"Don't be sorry, but you know you didn't have to do this, you know I love you right?\"\n\n\"I do but, I just wanted to show it, but I guess Brandon fucked me up more than I wanted to admit.\"\n\n\"I'll punch him again if you want.\"\n\n\"Funny you should mention that, apparently he got mauled to death by a wolf or something, they found him in the woods dead.\"\n\n\"Shit, well I hate to say this but he had it coming.\"\n\n\"Yeah, I guess he did.\"\n\nThey continued on home mostly quiet as he held her hand. Once they got home and got upstairs Troy placed his luggage in the bedroom while Stacy went to the restroom. He went through his bag and pulled out a small box and headed to the living room to wait for Stacy who was heading back when he got there.\n\n\"Before you jump my bones I have a question to ask you.\"\n\n\"Okay?\" She said with a worried look on her face. \n\nShe waited but then felt much more nervous when he dropped down to one knee and pulled a small black box out from behind his back. Stacy felt butterflies in her stomach as he opened the box and she saw a beautiful diamond ring staring at her sparkling in the light.\n\n\"Wow, so I guess I did a good job the other night?\"\n\n\"I've had this for over a month now, whatever I can get, even if have to fuck you every night for the rest of my life to keep you satisfied, I will do my best!\"\n\n\"Of course I'll marry you!\" She said jumping down on him knocking him to the floor.\n\n\"Well that was easier than I thought.\"\n\n\"You punched my asshole ex boyfriend in the face for me, yeah it would have always been a yes.\" She said kissing him as the lust began to build in her again.\n\n\"So you still want me to fuck your brains out?\"\n\n\"Here's a hint.\" She said before she started opening up his pants and leaning down close and whispering. \"I'm not wearing and underwear.\" She said with a giggle as she jumped to her feet and walked over to the table bending over and lifting up her skirt.\n\nTroy didn't take long before he stood up and walked over as she spread her legs giving him access. He took off his shirt and let his pants fall before he slid his throbbing cock up inside her hearing her moan out in pleasure as she leaned back. She slid down the top of her dress before he reached around a squeezed her breasts and sucked on the side of her neck sending chills down her spine. Her pussy was tight and squeezed his cock as he thrust himself repeatedly enjoying every second. Troy was actually quite happy with the new Stacy. Even though she lacked any sexual drive before he still wanted to marry her but now that she wanted it all the time it just made their relationship even better.\n\nStacy bit her lips as she felt him fuck her from behind. She could feel the animal lust inside her as she opened her eyes and looked across the table at the glass in the cabinet. She could see the black orbs where her natural green eyes were but she just smiled at her reflection and began to move her waist milking his cock as they both lost themselves in the moment of ecstasy. The Beast was there but it wasn't out for blood anymore, it wanted Troy to please it and Stacy was going to let him please them both for the rest of her life."
    ],
    "authorname": "maestro84",
    "tags": [
        "horror",
        "werewolf",
        "scratches",
        "wild sex",
        "female transformation",
        "beast",
        "blow job",
        "succubus",
        "hunting",
        "lesbian"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/liliths-emporium-the-beast-within"
}
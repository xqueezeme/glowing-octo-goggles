{
    "title": "Nice Work If You Can Get It",
    "pages": [
        "I had to admit that, besides being absolutely gorgeous, my new neighbor was punctual.\n\nEvery evening at exactly six o'clock she would trot out her front door and head down the street. Wearing an athletic bra that, at best, was making a futile attempt at containing her incredibly sensuous breasts. And running shorts that hid almost none of her exquisitely athletic legs. \n\nIt had just been a couple days since I'd moved into the house next to hers in the quiet Colorado suburb. I bought the house because it had a huge swimming pool in the backyard with a privacy fence surrounding it. And I loved to swim naked.\n\nAnyway, back to my neighbor. I'd hear her return to her house about an hour later just as I was finishing my 50th lap and getting ready to flop down on my back on an air mattresses floating in the pool, wearing only my sunglasses.\n\nBut then one evening I suddenly noticed a slight movement in the curtains of her upstairs window. Without being too obvious I looked up and saw her head peeking out with a pair of binoculars held up to her eyes. Knowing I was being watched by this exquisite creature immediately made my cock twitch momentarily. But I just stayed motionless, pretending to be sleeping.\n\nThe next evening she left her house again, exactly at six, and trotted down the street. \n\nBut I had a plan.\n\nInstead of swimming my usual 50 laps I only swam 20 laps, dropped down on my back on the air mattress and wrote my phone number with a permanent marker on the inside of my thigh. I made sure I was positioned so she could see it from her window and that the numbers were huge. Then I stretched my arms out and made sure the phone in my hand was obvious, too.\n\nAbout 25 minutes later it rang.\n\n\"I'm so embarrassed. Please for-forgive me,\" she stammered out. \"It's just that, well, my husband's out of town for a month and my kids are at camp and I guess I just had too much time on my hands and you were laying there naked on your back floating around in that great big pool on that weird air mattress and...\"\n\n\"I'll forgive you on one condition,\" I said with a sly smile on my face. \"You have to come down right now and join me, I'm going for a swim.\"\n\nI heard a click, rolled off the air mattress into the water and, three minutes later, she walked through the fence in the gate, wearing the most stunning white bikini I'd ever seen on a woman. Without saying a word, she simply jumped in the water and swam over to me. I was standing naked in about three or four feet of water but since I'm six and a half feet tall I could feel the small waves brushing gently against the bottom of my balls, sending little bolts of lightening through my already completely erect cock. When she was directly in front of me I saw her glance down at it and then quickly stand up in front of me.\n\n\"Hi, neighbor, I'm Mark,\" I said as I smiled down at her. Her nipples were completely erect and absolutely exquisite, poking out against the almost transparent fabric of her bikini.\n\n\"I'm Lacey,\" she said quietly, as she reached over and grabbed the air mattress floating beside her.  \"You're so lucky to have a pool, I love to swim, my husband and I kept staring over at this house and the pool while it was for sale but, with kids, it was out of my price range. Hey, what's with this funny shaped air mattresses, it looks like a capital letter Y.\"\n\n\"They were a gift from a company I worked with in Thailand,\" I said, as I reached over and positioned it behind her. \"They're sort of a sex toy over there. Here, lay down on it and I'll show you, that's right, your butt goes there and your legs rest on the outstretched arms. Now just bring your arms up over your head, close your eyes and relax, Lacey.\"\n\nSuddenly this exquisitely beautiful woman, who looked like she was 35 or 40 years old, was laying on her back in front of me with her legs spread apart. \n\n\"Hmmmm, this is very erotic, Mark,\" she whispered as I noticed her tighten and then relax all the muscles in her stomach and thighs. \"I can see why they use these for sex over there. What are the small ropes for near my ankles?\"\n\n\"That's so I can tie the air mattress to these hooks in the side of the pool, Lacey,\" I said as I gently slide her towards me across the water until her feet were almost touching the side of the pool and I was standing between her outstretched knees. Then I quickly tied the ropes to the hooks.\n\n\"Ohmygawd, this is so sensual, Mark,\" she gasped as I felt the inside of her thighs pressing against the outside of my hips. \"Very very erotic.\"\n\nThe wet fabric of her bikini was sticking to her like a second skin and I could see the lips of her pussy suddenly begin to swell up and turn crimson. \n\nFor the next twenty minutes we talked about Colorado, my house, her house, the neighborhood, where to shop, generally innocuous stuff. She told me she was a nurse and was always a little bit short of money at the end of the month. And then somehow the conversation gradually turned to sex. I'm not sure how we got there but suddenly she just blurted out that she was in a bad marriage and was really getting frustrated but that she had never cheated on her husband. To make things worse, she was discovering that, as she got older, she was even more aroused than when she was younger and it was driving her crazy. Anyway, after she finished, I told her about my experiences while I was in graduate school, working in an exclusive private racquet club, giving sensual massages to hundreds of women and I described the orgasms they would frequently have as I touched them. I noticed that, as the conversation got more erotic, she gradually moved her right hand down over her pussy and spread her legs slightly further apart on the air mattress. A few more minutes of our erotic conversation and she was massaging her pussy very delicately with her hand right in front of me. Eyes closed, listening to the sound of my voice. Almost like she was in a trance. Touching herself very slowly. \n\nThat's when the phone rang. \n\nShe gasped and jumped like she'd been hit with a stun gun, stared at my cock, pulled her hand out from between her legs and sat up on the air mattress. Blinking at me, slightly confused, as I spun around and answered the phone by the side of the pool. \n\n\"No, thank you, I'm very happy with my current long distance carrier,\" I finally muttered as I put the phone back down. \n\nBut she was already out of the water and walking towards the gate.\n\n\"Well, I'm glad I got to meet you, Mark,\" she said with a wink as she opened the gate. \"Anytime you need somebody to swim with you naked let me know.\"\n\n\"I'll expect you tomorrow at seven,\" I said as she closed the gate behind her and I felt my cock twitch. \"I might be a little late but feel free to let yourself in, Lacey.\n\nActually, I was a lot late. About thirty minutes late. \n\nWhen I walked out my back door she was already swimming in the pool. \n\nI walked over, dropped into the water and immediately noticed that she was naked. \n\nCompetely naked.\n\nTen minutes later I was standing in the same place I was the night before when she swam over, dragging the air mattress behind her. Without saying a word she positioned it so that I could tie the ropes to the side of the pool and then she let out this very small sexual groan and simply climbed up on the air mattress and laid down on her back. Spreading her legs apart, stretching her arms up over her head and closing her eyes, as she whispered, \"listening to you talk about all those women you touched when you were in graduate school and their reactions to your touch last night was very arousing, Mark. Too arousing. So...I figured as long as I have a new neighbor who gives sensual massages...\"\n\nThen her voice just trailed off. \n\n\"Have you ever had a sensual massage before, Lacey?\" I asked her as I reached back and grabbed a bottle of lubricant resting near the edge of the pool.\n\nShe just shook her head slightly from side to side and let out this very low moan as I poured some of the lubricant on the lower part of her stomach just a few inches above her clit. I dipped my thumbs in the lubricant and began to slide them slowly along the outer lips of her perfectly symmetrical pussy, watching it almost immediately begin to swell up and blossom like a flower.\n\n\"Hmmm, that feels wonderful, Mark. I've wanted to feel you touching me like that all day. I spent all night, tossing and turning in bed,\" she whispered as my fingers continued to trace an outline around her exquisitely aroused pussy, \"thinking about our conversation yesterday, thinking about sex...\"\n\nAs she was talking she reached down and wrapped her hands softly around my cock and whispered sensually, \"...thinking about what it would feel like to have you massaging me, touching me, arousing me...ohmygawd, you're so big...hmmmm, touching you like this is so erotic...feeling you grow, swell up in my hand...it gets me so hot...so aroused...so...\"\n\nAs her voice slipped away I felt her push down and position the head of my cock directly against the mouth of her vagina. Then she released me, put her arms up over her head and groaned very slowly as I felt the lips of her pussy squeezing against the head of my cock.\n\nI didn't move.\n\n\"Well, what did you think of it?\" I said twenty seconds later still without ever having moved my hips.\n\nShe opened up one eye and gave me a confused look.\n\n\"I said what did you think of it, was the sex as good for you as it was for me. I had five orgasms and I think you had twelve or thirteen, Lacey,\" I said with a slight grin. \"How do you feel, now that it's over?\"\n\nHer other eye opened up.\n\n\"Look, Lacey,\" I said as I remainded absolutely motionless, \"you told me yesterday that you've never fooled around on your husband. You're a wildly sensual and beautiful woman. And, if we would have just finished making love right now you'd feel horrible. You'd feel like you'd betrayed yourself. And your husband. And your family. And I don't want to do that to you.\"\n\nI could see her eyes starting to water up and she began to nod her head up and down slowly.\n\n\"But believe me, Lacey,\" I whispered as I pushed my hips forward and slowly slipped my cock completely up into her warm pussy. \"I didn't make love to you because you don't excite me. You're an incredibly exciting woman. Wildly passionate and I'm sure you'd be the best lover I've ever had.\"\n\n\"ohmygawd,\" she whispered, eyes wide open and staring at me, as the muscles in her vagina collapsed down around my cock. \"that's exactly what I thought it would feel like...I...\"\n\nBut, before she finished her sentence, I rocked my hips back and pulled my cock slowly out of her pussy. Then I reached down and put my arms around her waist, lifting her up off the air mattress until she was standing in the pool, pressed against my body with my cock trapped between her thighs and her arms wrapped around my neck. \n\nI could feel her rock hard nipples pressing in against my chest as we just stood there together for five minutes. Without moving. \n\nListening to the sound of our breathing.\n\nStaring into each other's eyes. \n\nFinally, she took a deep breath, brought her mouth up to the side of my face and kissed me as she whispered, \"thank you. You're right. I would have felt terrible. And by the way, it was 19 orgasms, not 12. You were an incredible lover. Now, ummm, I have to go back over to my place and, umm, well, take a nap.\"\n\nA minute later and she was shutting the gate in the fence behind her.\n\nFive minutes later I heard it. \n\nThe first gasp. Loud, low, long, coming from her upstairs bedroom window. Followed by more gasps, small screams. Wild sounds, animal sounds, grunts and long drawn out \"ohhhh, yesssss's\" and \"I'm cumming's...\" and \"oh...Mark's...\". \n\nFor almost an hour. \n\nAnd then everything was quiet.\n\nI figured I wouldn't see her again when she didn't show up the next evening. So I swam all my laps and plopped back down on my back on the air mattress with my eyes closed. \n\nI was half asleep, dreaming about her, dreaming about how incredibly sexual and erotic it had been for the few seconds I was inside her, dreaming about how warm she was, how wet she was, dreaming about that incredibly sensual body of hers when I suddenly felt something cool on my cock. \n\nI opened my eyes and saw her standing in the water between my legs, naked, with a big grin on her face. She was pouring some sort of lubricant on my cock with one hand while she held her other hand up to her mouth and, with one finger pointed in the sky in front of her lips, signaled me to be quiet.\n\nI figured I was still dreaming but I just dropped my head back down and groaned as she began sliding the palm of her hand slowly over the head of my cock, whispering, \"what you did yesterday, not making love to me, was so wonderfully unselfish that I couldn't just ignore it. Besides, I just love watching this thing get hard, Mark. It's incredibly exciting. It felt wonderful inside me. Even if it was for just a few seconds. You got me so horny that I masturbated for two hours straight last night, thinking about us, thinking about you, your cock, closing my eyes and remembering how it felt deep up inside me. And now, thanks to you, my vibrators are both broken so I guess I had to come play with something. Besides, I think I owe you this. Hmmm, your cock is so thick, I can feel the blood flowing through it.\"\n\nWhile she was talking she had wrapped both her hands, dripping with lubrication, around my cock and was sliding them over me slowly. Her touch was incredible. Wild and arousing. Three minutes after she started touching me, I could feel my balls tingling uncontrollably. Two minutes later I was so hard that it felt like all the blood in my body was in my cock. And then, when I suddenly felt her tongue flicking across the head of my cock, I gasped and tightened up all the muscles in my stomach and thighs and grunted out, \"ohgawd, Lacey...\" as I erupted violently, watching my own cum shoot in waves across her face and breasts. \n\nTwo minutes later, she was giggling as she washed herself off and then tossed handfuls of water up over my hips and whispered, \"wow, that was fun, let's do it again. I just love watching this thing get hard and then explode like a volcano. Especially since I was the one who made it erupt.\"\n\nHer mouth felt absolutely incredible around the head of my cock. Sucking, licking, sliding her lips around wildly. \n\nI was hard as a rock again in less than a minute. \n\nTen minutes later and she was splashing water up over my hips again, as she moaned, \"ohgawd, Mark, doing that to you, feeling you cum inside my mouth has me so aroused I'm gonna pass out, I don't know what the hell to do, we can't make love and my damn vibrators are broken...\"\n\n\"What color are they?\" I asked as she fondled my cock with her fingers, bending over randomly to lick the shaft of it with her tongue.\n\n\"Blue,\" she said, in between warm soft kisses on the head of my cock, \"and the other one's silver. Why?\"\n\n\"Hmmm, Blue Jelly and the Silver Bullet,\" I said, as I felt my cock starting to twitch again from her relentless caress. \n\n\"Hey, how did you know that? Have you been peeking through my bedroom window?\"\" she said, as she looked up at me and stared, still sliding her fingers up and down the shaft of my cock. \"Hmmm, you're already hard again. Gawd, you'd be an incredible lover. Oh, hell, I give up...I want you to bend me over so you can fuck me from behind like a wild animal.\" \n\n\"No, not until we know each other a little better, Lacey, but that sounds like fun. Actually I invented the Silver Bullet and was part of the team that came up with Blue Jelly,\" I said, rocking my hips slowly up and down as she began to squeeze my balls with her left hand. \"That's what I do for a living, I'm a mechanical engineer and I design and develop adult toys. C'mon, I'll show you my shop.\"\n\nShe just stared at me like I was the Pied Piper, took her mouth off my now completely erect cock even though I was only a few minutes away from cumming again and dragged me out of the pool, as she said excitedly, \"c'mon, show me, maybe you could, ummm, you know...oh well... just show me...quick...\"\n\nI walked quickly to the detached garage that I use as my workshop, opened the door, stepped inside with her and turned on the light.\n\n\"Ohmygawd,\" she said as her mouth dropped open and she turned her head slowly around. \"They're everywhere, Mark. C'mon, show me one you really really like...one that will drive me absolutely crazy...make me cum until I faint...ewwww, lookeee...a bed...a great big bed!!\"\n\nTen seconds later she was laying on her back on the bed with her legs spread apart, knees up in the air and her eyes closed, giggling to herself like a little girl who'd found her own secret hidden playground. \n\n\"You know, Lacey,\" I said with a smile as I watched her teasing her clit with one finger, \"if you're really serious there might be a way you could make a little money on the side and have some fun at the same time.\"\n\nApparently I hit a nerve.\n\nBecause she stopped touching herself, lifted her head up and stared at me through her outstretched legs.\n\n\"When I lived in California I worked with a woman who made quite a bit of money helping me test these things and write reviews,\" I said as I reached over and began to slowly massage her dripping wet pussy with the palm of my hand. \"But it has to be a controlled test otherwise the different companies won't pay for them. It has to be the same process everytime. You can't be wildly horny one time and half asleep the next time or it won't be a fair test of whatever I'm touching you with. You always have to start from the same emotional and sensual plateau. And since I'll have no idea how aroused you are when you walk in here on any given day it would work like this, you'd go running or swimming or anything for exercise and then you'd come in here. I'd give you an orgasm and then I'd massage your legs or your back or do whatever it took to relax you completely. Once you were calm we'd start the test. That way, you're always starting at the same level of arousal for every test. Does that make sense?\"\n\n\"Ohgawd, that feels good, Mark. Your touch is so gentle,\" she groaned, as she spread her legs further apart and began to rock her hips, pushing her pussy up harder against my hand.\n\n\"How much would I get paid? Hmmm, don't stop doing that, it feels so good to have you touching me like that, Mark. It makes me want to bite the side of your neck. Really really hard.\"\n\n\"About five hundred bucks a review,\" I said as I pulled my palm off her and begin to trace a path up and down the lips of her pussy with my fingers.\n\n\"Ohhh, ummm, Mark, you're gonna make me cum if you keep doing that...WHAT!!!? FIVE HUNDRED BUCKS!\" she suddenly shouted.  \"Five hundred bucks for each test. And I could do one test a day? Ohmygawd, I'd make more than I make as a nurse. We could buy a new...five hundred bucks a test...are you serious...oh, shit, yess, don't stop...ummm, don't stop...ohhhh, that's it...ah ah ah, ohhhhh, YESSSSS...SSSSS...\"\n\nWhile she was talking about the money I began slowly sliding my fingers back and forth across her clit. Pinching it softly between them. She was so aroused that it took less than thirty seconds to make her cum by doing this and, when she could breathe again, I said, \"now put this blindfold on, Lacey, that way you can't see what I'm touching you with.\"\n\nShe reached up and put the blindfold over her eyes as I massaged her legs and stomach gently. When she was breathing normally again I took my hands off her and picked up the new vibrator I was going to use on her, as I whispered, \"now just relax and bring your legs up and spread them apart, Lacey.\"\n\nAll she could do was grunt as the humming tip of the new vibrator I was testing slipped barely inside her slick wet pussy. It was dark green and had a vibrating clit stimulator and balls on the shaft. As the vibrator slid further up inside her, she started moaning softly. By the time the clit stimulator hit her she stretched her neck back and her butt came almost completely off the bed. ",
        "It took less than two minutes of this wildly intense stimulation before she came. It was a screaming, thrashing, all consuming orgasm with her hips rocking up and down furiously against the artificial lover inside her. She was pumping so much vaginal lubrication out of her pussy around the vibrator that it looked like a dam had broken somewhere up inside her. \n\nFive minutes later later she was stretched out on the bed, giggling and massaging her nipples softly with the tips of her fingers, as I wiped her swollen pussy off with a damp wash cloth.  \n\n\"Hmmm, that feels so cool. I just love your touch,\" she said seductively, rocking her shoulders back and forth sensually as she pulled off her blindfold. \"Okay, now for the review. I'd give that vibrator an 11 on a scale from one to ten. When I started to cum, it felt like my whole world was exploding around me. But maybe it was just knowing that you were the one touching me. I couldn't really tell. But that orgasm was twice as intense as anything I've ever had touching myself. Ohgawd, I can hardly move my legs and I can still feel the muscles in my pussy relaxing and contracting. Over and over. Yeah, that wan an eleven on the LOS...the Lacey Orgasm Scale...\"\n\n\"You liked it that much, huh?\" I said with a smile, as I opened a drawer beneath my workbench, pulled out $500 and handed it to her along with a spare key. \"Here's a key to the shop, Lacey, in case I'm late. Same time tomorrow night?\"\n\n\"Yeah, no shit, same time tomorrow night. Err...I mean, ummm, yes, I guess so, Mark, that would be fine,\" she said with a nonchalant flip of her naked butt as she climbed off the bed with the key and the money in her hand and walked out of the garage. \"See you at seven pm sharp. Hmmm, now let's see...what should I wear to work tomorrow at my new job testing vibrators...my new red dress, no, my scrubs, no, my new black panties, no...hey, I know, perfume and a smile. Wow. The perfect job.\"\n\nWhen I walked into my shop at 6:30 the next evening she was already there. Completely naked, laying on the bed on her back, spread eagle, with her eyes closed. Apparently all those orgasms from last night must have really relaxed her because she was snoring. \n\nDead asleep.\n\nI moved over towards her very quietly, bent down and picked up some Velcro straps that were fastened to the legs of the bed and secured them around her wrists and ankles and then slipped a blindfold over her head and smiled down at her. \n\nShe was an absolutely exquisite woman. \n\nSoft, curves everywhere, perfect nipples resting quietly on top of even more perfect breasts and a stomach that just begged you to smother it with an infinity of subtle kisses.\n\nActually, it almost took an unlimited number of kisses to wake her up.  On her stomach. And another minute or two on her clit before she completely realized what was happening to her. That she was tied down to a bed on her back, legs wide apart, blindfolded and some man was licking her clit very softly. \n\n\"Ohgawd, Mark, that feels so good,\" she gasped as I watched the muscles in her stomach tightening and releasing in unison with my touch. \"And being tied down like this is so erotic. You know, ummm, if you wanted to right now you could climb up on top of me and fuck me all night long while I'm tied down like this and I couldn't stop you. I even know what it would feel like. It would feel so good. You sliding your cock deep inside me as I pulled and bucked at the restraints holding me, begging you to stop. But you would just keep fucking me relentlessly no matter how loud I screamed or begged or...over and over, deep down inside me...ohgawd, Mark, I can feel you inside me now...oh oh ohhhh...yes, fuck me harder...harder...\"\n\nAll I was doing was gently caressing her clit with my tongue. \n\nShe was doing all the rest. \n\nLiterally talking herself into an orgasm. \n\nAnd when it hit her I thought she would pass out it was so intense. Her entire body tightened up and she screamed and I could feel her cum, soft and warm, shooting out of her pussy all over my mouth. \n\n\"Don't stop, do it again, ohgawd that felt good, don't stop, please, Mark,\" she whined, as she twisted slightly against the restraints holding her. \"Nobody's ever done that to me, made me cum so hard that I squirt...please, I want....ummmm, oh shit!...ohmygawdohmygawd...\"\n\nWhile she was talking I had untied her legs and, almost by instinct, she had brought them up, knees bent in anticipation of whatever touch was to follow. And gasped as I slipped the tip of the next toy we were going to test just barely against her asshole. And then poured lubrication all over her.\n\nShe immediately groaned and rocked her hips up as she brought her legs back until her knees were almost by the side of her head. \n\n\"Yessss,\" she gasped as I turned the vibrator on and pushed it slowly inside her, \"I want it inside me...make me cum over and over...ohmygawd, that feels sooooo good....\"\n\nOnce it was inside her she brought her legs back down, spread them apart and grunted, \"ohgawd, I've always wanted to feel this...it's so wild, so dirty...so sensual...now lick my clit and fuck me with another vibrator...or just pull that one out and fuck me in the ass, Mark, fuck me in the ass until I cum...slam that great big cock of yours deep inside me...ohhhhh...ohhhhhh....ohmygawd!!!!!! Unnnn, uhhhhh!!!\"\n\nThis woman was incredible. \n\nI was starting to think that she could talk herself into an orgasm if I was only blowing smoke on her nipples.\n\nI just sat there and watched as her body arched completely up like a bow and then slammed down against the bed as she pulled frantically at the restraints holding her wrists. Huge loud gasps and deep moans. Her legs shaking uncontrollably as her body was overwhelmed with an incredible orgasm.\n\nTwo minutes later, as I slipped the still humming vibrator out of her ass, she was giggling.\n\n\"You know I could do this all night long with you, Mark,\" she whispered, in between giggles, as I untied her wrists and she reached down quickly and immediately began to massage her clit wildly. \"Oh, that feels so good. I could cum and cum and cum and fuck and fuck and fuck. I could fuck you until you passed out. I could wrap my pussy around your cock and rock up and down until your balls exploded. I have an infinite capacity to fuck. Especially with you. Fuck, fuck, fuck. You make me so horny that I'll fuck you and I'll suck your cock until you can't cum anymore. And then I'll make you cum one more time after that. C'mon. Wanna fuck me? Right now. Wanna try...\"\n\nHmmmm.\n\nSuddenly I knew exactly how Roy felt two seconds before that tiger jumped on him and bit him in the side of his neck. Really really scared.\n\nAnd wondering why I decided not to be an accountant. "
    ],
    "authorname": "markyoni",
    "tags": [
        "restraints holding",
        "hmmm feels",
        "listening sound",
        "swam laps",
        "watching thing",
        "air mattresses",
        "fabric bikini",
        "swim naked",
        "muscles stomach",
        "back air"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/nice-work-if-you-can-get-it"
}
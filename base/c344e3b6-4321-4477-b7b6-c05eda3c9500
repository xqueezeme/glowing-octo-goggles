{
    "title": "Lessons from Days Gone By Ch. 02",
    "pages": [
        "I didn't hear from Laura for several days. I grew nervous thinking that she may have had second thoughts about fooling around with a guy my age. I tried to convince myself to be patient, as she'd continually reminded me. She was a busy lady and I was not the only thing in her life I reminded myself. I couldn't wait to see her again and not hearing from her increased my anxiety.\n\nMowing kept me busy and I spent most of my evenings with my friends since Mom was always working late. We spent a lot of time hanging out at my best friend Bryan's house, as he had a pool table and his dad didn't mind us helping ourselves to a beer or two, provided we weren't driving. We'd all known one another since middle school and spent a lot of time breaking one another's balls.\n\nI'd made the mistake on Wednesday night of telling them that Coach Williams from State had called asking me to reconsider his scholarship offer. He'd said they were lean at defensive end and said if I'd redshirt and put on some size, I'd be starting the following year. He said I had potential and could play on Sundays if I wanted it bad enough. It was the same pitch he'd delivered many times before. I told him I'd consider it and I'd let him know.\n\n\"I still can't fucking believe you,\" Bryan said. He'd been our high school quarterback and accepted the only scholarship offer he had from Ohio. \"You've got at least a dozen D1 schools dying for you to play for them, and you want to fucking study.\"\n\n\"Man, it's just not going to be the same as us playing in high school. I've got to get through school and I don't know if I can play ball and study engineering,\" I countered. It was the same argument I'd used for the last year with them. It hadn't swayed them, though.\n\n\"Fuck, I wish I'd been born with your physical abilities,\" D.J. said. He'd played alongside me as a defensive tackle since our sophomore year. He'd blew out his knee in our loss in the state semi-finals when the opposing team cut blocked him.\n\n\"Dude, think of all the pussy you're throwing away,\" Erick added to the shaming. \"I bet you could have a different chick every night if you were starting up there. Calculus and chemistry never got you in Clarice Jennings' panties.\"\n\n\"Neither did football,\" I laughed. I thought about what I what I'd gotten myself into this summer. I'd been smitten with Clarice for years, but she paled in comparison to Laura. I only wished I could tell my buddies it.\n\n\"Whatever,\" Bryan said. \"Dude, she was fucking gaga for you. I can't believe you never noticed.\"\n\n\"Oh, bullshit,\" I replied. \"She wouldn't give me the time of day.\"\n\n\"If you'd just asked her out, I bet you could have got more than the time of day,\" Erick chuckled.\n\n\"You should call her, man,\" D.J. added.\n\n\"I'll think about it,\" I said.\n\n\"Seriously, though. Why don't you take the scholarship? You're the only one of us that has a shot at the big time,\" D.J. continued.\n\n\"I told Coach Williams I'd think about it,\" I replied. There was no sense going through my reasoning again. They didn't understand my decision and probably never would.\n\nJust then Bryan's dad, Rick, walked into the pool room. He'd coached all of us in little league and had been one of my dad's best friends since they'd played ball in college together, along with Coach Williams.\n\n\"So, Billy's still after you,\" Rick asked.\n\n\"Yes sir, he is,\" I said.\n\n\"I think that's a sign of his desperation,\" Rick said.\n\n\"Yes sir, I know,\" I replied. \"But like I talked to you about, I'm not sure about playing.\" I'd talked to my Dad about my decision while he was in the hospital. He'd been accepting and supportive but he'd also been so doped up on morphine that I'd felt the need to get a second opinion. Rick explained that he was disappointed since few guys had the opportunity that I had, but that he understood and was behind me whatever I decided.\n\n\"Mikey, I understand. You've got to do what you think is right,\" Rick said. \"After you get to school though and realize you can do both, you should talk to Billy. He's eager to have you on the team. You would really make a difference for them.\" Coach Williams had been offended when I told him after my Dad passed away that I didn't think I'd play college ball. He was sure I was entertaining the offers I had from Cal and Stanford. While they were both attractive, I promised him that if was going to play it would be at State. True to his bulldog-like appearance and demeanor, he hadn't let up. I'd not read the NCAA rule book, but I was sure that Coach Williams and my prospective position coach broke every one of the contact rules as they called several times a week.\n\n\"Yes sir, I will,\" I said.\n\n\"Fair enough,\" Rick said, as he walked out of the room. The guys picked back up where they'd left off. I was trying to defend myself, but the three of them were merciless. I felt my pager vibrate in the pocket of my shorts. I pulled it out and saw that it was Laura's number. Hot damn, I thought.\n\n\"Hey man, can I borrow your phone,\" I asked Bryan.\n\n\"Sure, what's up? You got some chick on the line,\" he laughed.\n\n\"No, probably someone needing their yard mowed,\" I laughed back. The three heckled me about that, saying that seemed appropriate. I walked to Bryan's bedroom and picked up his phone.\n\n\"That was very quick,\" she answered.\n\n\"I can't make you wait,\" I replied.\n\n\"I like that. That's very considerate,\" she laughed.\n\n\"How have you been,\" I asked.\n\n\"Busy. And you,\" she replied.\n\n\"About the same,\" I said. I was excited to be talking to her and hopeful about the reason she'd paged me.\n\n\"Do you have plans tonight,\" she asked.\n\n\"I was hanging out with my buddies,\" I joked.\n\n\"Oh, I see,\" she laughed. \"That sounds like more fun than anything I could offer.\"\n\n\"I doubt that,\" I said.\n\n\"Why don't you come over and we'll see if we can entertain one another,\" she said.\n\n\"Okay, I will,\" I said.\n\n\"Hopefully, your friends won't be too disappointed,\" she purred.\n\n\"They'll get over it, I'm sure,\" I added.\n\n\"Good, see you soon,\" she said.\n\nI hung up the phone and walked back to the guys. I explained that I needed to go see the yard before it got dark. They gave me shit and I really wished I could tell them the real reason, but I knew I couldn't. I said my goodbyes and headed out.\n\nMy heart beat rapidly as I drove to her house. What was going to happen? Would we make love? Or would we still take things slow? I couldn't wait to find out. I rang the doorbell and she answered almost immediately. She wore a satiny, white blouse with a black skirt. Sexy Mary Jane style heels adorned her feet.\n\n\"You have a key, now,\" she reminded me.\n\n\"I know, I forgot,\" I replied.\n\n\"Mmmm, hi,\" she said, as I took her in my arms and kissed her. My hands roamed over her lower back and ass.\n\n\"You look spectacular,\" I said.\n\n\"You are such the charmer,\" she replied.\n\n\"You bring it out in me,\" I replied.\n\n\"Good,\" she said. \"Come with me, handsome.\" She took my hand and led me to the sitting area we'd been in the previous time. We sat on the couch and lapsed in a series of delicious kisses. My hands roamed over her breasts and down her sides. I was soon rubbing her nylon-covered legs. They felt amazing. It was so exciting to be there with her like that again. She was so sexy and I loved that she was sharing herself with me.\n\n\"Mmmm, you're certainly becoming an excellent kisser,\" Laura panted.\n\n\"Thanks,\" I replied before our tongues met again. Her hand teased and petted my throbbing erection. I was anxious for her to take it out and stroke it with her bare hand. Patience, I reminded myself once again. My hand found its way between her thighs, and I moved it back and forth along her silky nylons. Each time I moved my hand back up her thigh, I went a little further. I finally felt her bare skin above her stocking and she groaned.\n\n\"Oh, you're learning fast,\" she said. \"You're making me so hot.\"\n\n\"I am,\" I asked.\n\n\"Uh huh,\" she purred. \"I've needed the touch of a loving man, again.\" She leaned back against the couch and spread her thighs more. I took the opportunity to move my hand up even further. I reach the top and my hand encountered her satiny panties. She felt so warm to the touch and my cock throbbed as I caressed her.\n\nI kissed her graceful neck while continuing to rub her sex. She was very responsive to my kisses and her moans increased. She spread her legs still further, while she pulled her skirt up. Remembering her instructions from our previous encounter, I eased my hand inside her silky, white panties. My fingertips were greeted by her slick wetness. I explored her intimately, continuing to familiarize myself with her. I loved the way she felt, so soft and wet. I slipped my middle finger inside her and she groaned.\n\n\"Mmmm, that's it baby,\" she moaned. \"That feels so good.\"\n\n\"I'm glad,\" I said. \"Laura, I really want to eat you again. I've been thinking about that so much,\" I said honestly. I pulled my hand from her panties and licked my fingers clean.\n\n\"If you must,\" she smiled devilishly. She raised her hips from the couch and pulled her panties down, slow and seductively. Once off, she casually tossed them at me. I caught them and brought them to my face, smelling her arousal and her sweet perfume. Without thinking, I stuffed them in my pocket and knelt between her knees. She smiled deliciously at my actions, before shifting on the couch, positioning her sex at the edge of the seat. I leaned forward, inhaling her sweet aroma. I couldn't resist any longer and my tongue moved up through her wet folds.\n\n\"Ummm, that's it baby. Lap it up. Eat me like your last meal,\" she purred.\n\nI did my best to do just that. My tongue moved slowly and deliberately through her womanhood. I savored her delicious honey as I sought to pleasure her. I remembered what she said the first time, and I worked my way slowly to her clit. I circled it gently with my tongue. Her hands grabbed my head and held me close to her. I lightly flicked at it, building her excitement. I used my fingers to further stimulate her.\n\n\"Mmmm, baby. You're learning so fast,\" she purred. \"You're making me feel so good.\"\n\nThat made me smile as I continued circling her clit with my tongue. I wanted to learn to be a good lover. Most of all I wanted to learn to be a good lover for her. I felt that we could have something enjoyable going forward. I yearned to experience that.\n\n\"Oh, baby. Yes, right there. Don't stop, don't stop!! Oh, Michael,\" she moaned. I kept lightly flicking her clit with my tongue. Her grip on my head intensified and I knew that she was close. I increased the pressure I was using slightly and her hips pushed up from the couch. Her fingers pulled my hair during the height of her passion.\n\n\"Michael, yes, baby! Yes!! I'm cumming. I'm cumming!! Ngghhhh,\" she growled. She held my head tightly as her orgasm washed over her. Her grip eased and she lightly stroked my head as she calmed down. I loved doing that for her and hoped I got to do that to her again before the night was over.\n\n\"That was really quick. I think I was needing that,\" she said. I smiled at her as she looked down at me. \"What's that devilish, little smile about?\"\n\n\"Nothing in particular. I just enjoy doing that for you,\" I said.\n\n\"Good, because I love you doing it to me,\" she smiled. \"You can do that anytime you want.\"\n\n\"I might want to do it a lot,\" I said.\n\n\"That's what worries me,\" she laughed. \"You're a very impetuous, young man. We'll have to be careful.\"\n\n\"We will be,\" I assured her. \"You want to go upstairs?\"\n\n\"Yes, but we're going to do something special first,\" she said. She stood up and motioned for me to stand. Her small, soft hands swiftly unbuttoned my shorts and removed my t-shirt. \"Now, sit back down.\"\n\nI did as I was instructed and watched in awe as she seductively unbuttoned her blouse. She unzipped her skirt next and it fell to the floor before she stepped out of it. Finally, she unclasped her bra, releasing her beautiful breasts. I stared in awe as she stood there in front of me in just her garter belt, stockings, and heels.\n\n\"You look fucking amazing,\" I managed to mutter.\n\n\"So, do you, baby,\" she said as she straddled me. Her soft hands ran across my pecs, the gentle touching drove me even crazier with desire for her. Her fingers played with the soft, thin hair on my chest and abs.\n\n\"You have such an amazing body,\" she cooed. \"I can't wait until you completely fill out.\"\n\n\"Thanks Laura,\" I said. \"I've always loved working out, but I enjoy it even more now that I have someone that appreciates it.\"\n\n\"I'm sure I won't be the only one to ever appreciate this body, baby,\" she assured me. Her hands continued to roam across my chest and shoulders. \"You're like a sculpture.\"\n\nI smiled at her as my hands began to roam her luscious body as well. I focused first on her wonderful breasts. I enjoyed their warmth and softness as I lightly teased her hard nipples with my palms.\n\n\"That feels really good baby. You're not going to need much training,\" she smiled. \"You already get it, I think.\"\n\n\"Get what,\" I asked.\n\n\"Taking your time and savoring your woman, like a glass of wine. Make it about her,\" she replied.\n\n\"Yes,\" I answered.\n\n\"You already know how to do that, and that's perfect,\" she smiled again.\n\n\"I'm trying,\" I said. \"I'm just afraid of screwing things up with you.\"\n\n\"You won't my sweet baby,\" she said. Her hands had made their way to my cock. \"Just remember the one thing we talked about.\"\n\n\"I will,\" I assured her.\n\n\"I intended to wait a little longer for this, but it feels right tonight. Are you ready to make love with me, Michael?\"\n\n\"Yes,\" I nodded. I hoped that my nervousness didn't show on my face. I was worried that I'd be a disappointment. She leaned forward to kiss me and it helped ease some of the turmoil I was experiencing.\n\n\"I know you're probably nervous, baby,\" she said. \"But it's going to be all right, okay?\"\n\n\"Okay,\" I replied. Her hands cupped my cheeks and we kissed again. God, she was amazing I thought as our tongues twirled. How had I been so lucky to be in that situation? A sudden thought popped into my head.\n\n\"Laura, I wasn't thinking. I don't have any condoms,\" I blurted out.\n\nShe smiled at me in the sweetest way. \"Baby, you're right. You should always be safe with someone else, but I think we'll be fine. I know I'm healthy and you won't get me pregnant.\"\n\n\"Okay,\" I said. Like I wanted someone else, I thought to myself! She reached between us and I felt her take my cock in her hand. She adjusted her hips and her warm wetness enveloped me. Her mouth had felt amazing during our previous encounter, but it was nothing compared to this. I felt like my eyes were going to roll back in my head.\n\n\"Oh, my,\" she purred. \"You feel magnificent.\"\n\n\"God, so, do you,\" I gasped. She began to move her hips slowly and I wrapped my arms around her waist holding her close to me.\n\n\"Michael, let's just take our time. Just relax and enjoy, okay, baby? We'll make it last as long as we can. There will plenty of time for us to make love,\" she whispered in my ear.\n\n\"Yes,\" I answered. The sensations she was causing me made it difficult to relax. It felt even better than I'd imagined it would. My hands roamed over her supple body as she rode me slowly.\n\n\"Mmmm, yes. Touch me. Rub your hands all over me,\" she cooed. \"It makes me so hot.\"\n\nMy hands found her breasts and I teased her hard nipples. She looked down at me and smiled, before she leaned forward and rubbed her breasts across my face. I caught one of her nipples with my lips and began to suck it.\n\n\"Oh, yes,\" she said. \"I love having my nipples sucked. Almost as much as I love your big, hard cock.\"\n\n\"Oh god, it feels so good, Laura,\" I panted. \"Thank you so much.\"\n\n\"Baby, you don't have to thank me. I'm enjoying myself just as much as you are, trust me,\" she grinned. \"It feels amazing Michael. I've never enjoyed a nice, thick one like yours.\"\n\n\"Good, it's about time,\" I smiled. I was trying to be cute even though she had me at a point that I was ready to explode.\n\n\"You're doing good, baby. You're getting close, aren't you,\" she asked.\n\n\"I am. It feels so good and you're just so beautiful and sexy, Laura,\" I said.\n\n\"Thank you, you don't know how good that feels,\" she groaned. \"I've been doubting it.\"\n\n\"Don't. You're the most gorgeous woman I've ever met,\" I added. Telling her those things and seeing her reaction only added to my distress. I felt the pace of her hips increase, pushing me towards the edge that much quicker. I looked at her in panic.\n\n\"Just a little longer baby. I'm almost there,\" she moaned. I focused on keeping myself from losing control. I tried to think of football, mowing or anything besides what she was doing to me. My hands teased and rubbed her nipples. Her moans grew louder and louder.\n\n\"Oh, Michael. That's so good. Oh, I'm there, baby. I'm there,\" she gasped.\n\nShe tensed and grabbed my shoulders tightly with her hands, her fingernails dug into my skin.\n\n\"Oh, fuck,\" she moaned. \"I'm cumming.\"\n\nKnowing she'd orgasmed was all it took for me and I felt myself erupt inside her. Her hips continued to move, milking me of my cum. As my orgasm continued I pulled her to me, holding her tightly. It was such an amazing feeling and I'd finally experienced it with this beautiful woman. I gasped as I came down from my high. Our eyes met and we kissed hungrily. Finally, we parted.\n\n\"How was it,\" she asked.\n\n\"Something I'll never forget,\" I said.\n\n\"I'll take that,\" she said. \"You know, with a little more confidence, you're going to be a threat to women everywhere.\"\n\n\"We'll see about that,\" I said. \"I'm just happy to be sharing it with you.\"\n\n\"Me too,\" she said, standing up. \"Come on, take me to bed.\"\n\n\"It'll be my pleasure,\" I said. After I got to my feet, I quickly picked her up and held her cradle style.\n\n\"And just what do you think you're doing,\" she asked.\n\n\"Taking you to bed,\" I replied, as I walked towards the stair case.\n\n\"You didn't need to show me you're big and strong. I'd figured that out already,\" she laughed.\n\n\"I know, I just wanted to,\" I replied.\n\nShe rolled her eyes at me as we started up the stair case. When I entered her room, I laid her on the bed. She scooted over and patted the bed next to her. I joined her and she laid her head on my chest. I wrapped my arm around her and gently stroked her back. She resumed playing with the hair on my chest.\n\n\"Are you okay with all this,\" she asked quietly.\n\n\"Yeah, why,\" I replied.\n\n\"I just don't want you to think it's more than it is,\" she said.\n\n\"What are you worried about,\" I asked.\n\n\"I don't want you to get your feelings hurt, Michael,\" she said.\n\n\"What do you mean,\" I persisted.\n\n\"Baby, I want you to understand that this is just sex. After what happened downstairs, I know it's going to be amazing sex, but we can't have any attachments or feelings,\" she said.\n\n\"I understand. I feel really close to you, though, Laura. I mean, obviously I'm not just the guy that mows your yard anymore,\" I said. I was trying to make a joke and hopefully relieve some the sudden tension I felt in her.\n\n\"There's nothing wrong with that, but if it becomes more we need to stop,\" she insisted.\n\n\"Okay, Laura. I understand. I don't want it to stop,\" I said.\n\n\"Good. Neither do I,\" she said, finally smiling. She moved up and we kissed for several long minutes.\n\n\"So, how was I,\" I asked finally. I was dying to know.\n\n\"I'd say you were excellent,\" she smiled.\n\n\"Good. It was hard, though. The second I was inside you, I thought I was going to lose it,\" I said truthfully.\n\n\"You didn't though. That's the important thing. As you get more experience, it will get easier,\" she said. \"Besides, I'll be honest. I haven't had an orgasm in a long time that didn't require a battery. You're not going to have to work very hard for me just yet.\"",
        "Her joke made me laugh, before I became serious again. \"How long has it been for you?\"\n\n\"A long time,\" she said sadly. \"Steve lost interest in me, he quit even trying. I don't think we made love for a couple years before he left me.\"\n\n\"I still can't get over that,\" I said.\n\n\"It happens in life, honey,\" she explained. \"Making love with him became a chore. It was just about him. You've made me feel better in the two times we've been intimate than he ever did, and you still don't really know what you're doing.\"\n\n\"He must have been really bad,\" I laughed.\n\n\"No, it's not that. It's like I explained. You get it. You make it about me. Steve would have just got off earlier and left me to my vibrator. You did what you could and that made it special,\" she smiled.\n\n\"Thanks,\" I replied. \"I really didn't want to disappoint you.\"\n\n\"Oh, you,\" she said as she rolled on top of me and kissed me. \"You're too sweet for your own good, but I love it. I just hope you don't meet some black hearted wench that takes that out of you.\"\n\n\"I'm happy right where I'm at,\" I said.\n\n\"You better be,\" she said with a devilish grin. \"It's almost 9, I'm not keeping you too late, am I?\"\n\n\"Of course not,\" I said. \"I've got nowhere to be. I would have been with my friends until at least 11 anyway.\"\n\n\"In that case, why not get that handsome face between my thighs, again,\" she said devilishly.\n\n\"Certainly,\" I said. She rolled off me and adjusted herself on the bed where she was propped up on the pillows. She still had her sexy heels on and spread her stocking-clad legs invitingly. I moved between them and began kissing the soft nylon working my way up to her wet sex. She looked very wet and delicious. I paused briefly thinking that a lot of that wetness was my probably my own. I hesitated, but I knew that I wanted to make her happy. I ran my tongue through her slit and tasted the aftermath of our lovemaking. It was a unique flavor, not bad, but certainly different. She looked down at me as I continued to lick her.\n\n\"Are you okay down there,\" Laura asked.\n\n\"Yes,\" I nodded.\n\n\"I've never had a man go down on me afterwards,\" she said.\n\n\"No,\" I replied questioningly.\n\n\"Never. Granted, I've not had many men go down on me, period,\" she smiled.\n\n\"I love doing it,\" I smiled.\n\n\"Good. Eat me out, baby. Make me cum on your sexy face, again,\" she said.\n\nI resumed my licking and was rewarded by her encouraging words and compliments. Her hands reached for my head as I licked and sucked at her wet sex. I loved hearing her moan my name and call me baby.\n\n\"Mmmm, Michael. That's it baby. Just like that. Slow and easy,\" she cooed. \"You're getting so good at this.\"\n\nI smiled inwardly at her compliment, as I was so happy to be pleasuring her. My tongue lightly flicked her hard clit as it peeked out at me. I traced circles around it and felt her grip on my head increase. I was dying to make her cum again.\n\n\"Mmmm. Yes. My clit. Lick it like that, baby. Just take your time,\" she purred. \"You make me feel so good.\"\n\nHearing her say that sent shivers through my body. I was so new to all of this and her compliments drove me wild. I wanted to learn everything with her. I wanted to share everything with her.\n\n\"Uggghhh, that's it. Ohhhh, don't stop that right there,\" she continued. My tongue continued to circle her clit, occasionally swiping gently across it. Her hips moved with her pleasure, driving her sex into my face. It was amazing knowing that I was making her feel so good. I used my fingers to penetrate her. She was wetter than I'd previously felt her. I assumed that was a result of our earlier lovemaking. My fingers twirled inside her, exploring the unique textures that I felt. There was a small bump on the top, and for whatever reason my finger rubbed against it. She tensed and I heard her gasp loudly. Had my finger caused that, I wondered? I touched the spot again and she gasped once more. Crazy I thought to myself. I began to flick it slowly and her movement became more intense.\n\n\"Oh god, what are you doing down there,\" Laura shrieked. \"That's so intense!\"\n\nI thought briefly about answering, but I decided to continue what I was doing instead. My tongue teased her clit while my finger worked this special spot. I was not prepared for what happened next. I felt her convulse and a warm, almost sweet liquid gushed on my lips and chin. Laura's hips thrust upward against my face. Her movement was so forceful that she pushed my head backwards.\n\n\"Oh god,\" she screamed. \"That felt so good!\"\n\nMy tongue was still on her clit, but I looked up at her when her hips came back down. She had a confused and exasperated look on her face. She shook her in disbelief. She wasn't stopping me, so I continued what I'd been doing. Her moans picked back up and her hands held my head tightly. The bump inside her seemed to grow as I flicked it. Her hips pushed up again and she screamed as she gushed again. What was going on I wondered? I'd never heard of this.\n\n\"Baby, please. Come up here, I feel like I'm going to faint,\" she said. I looked down briefly at the bedspread. It was discolored from when she gushed. I licked my lips and could still taste that slight sweetness. I laid next to her and she rolled over against me.\n\n\"Are you okay, baby,\" she asked.\n\n\"Yes, I'm fine. Are you,\" I asked. \"What happened? You didn't do that the other night.\"\n\n\"I've never done that before, period,\" she said. \"I didn't know I could. I don't know a lot about it, but some women can do that. Steve was never interested in helping me explore myself, so I never got to experience it. It was really intense, though.\"\n\n\"Wow, that's crazy. I didn't know what was going on,\" I laughed. \"I was almost afraid I'd done something wrong.\"\n\n\"No, you did something very right,\" she smiled before kissing me. The shivers returned as I thought about giving this beautiful, older woman something that she'd never previously experienced. I felt like I was on top of the world.\n\n\"I'm glad. That's really special to me,\" I said.\n\n\"Why,\" she asked.\n\n\"It's something that only I've shared with you,\" I replied. \"It's special.\"\n\n\"Yes, it is that,\" she said. \"But we're going to share a lot of special moments, baby.\"\n\n\"I hope so,\" I said.\n\n\"So, tell me. Do you think you can get away next weekend,\" she asked.\n\n\"Get away? Seriously,\" I replied.\n\n\"Yes. Of course, I'm serious,\" she smiled. \"It's my birthday and I want to go someplace special.\"\n\n\"Like where? New York,\" I asked hopefully.\n\n\"I was thinking about Paris,\" she smiled.\n\n\"France?\"\n\n\"Yes, where else,\" she laughed.\n\n\"You seriously want me to go to France with you,\" I asked.\n\n\"Yes, I do. I want to go shopping and I need someone to carry my bags,\" she laughed. \"I can promise you, you'll be well compensated for your time.\" The look she gave me left little doubt as to what the \"compensation\" would consist of. \"Think about it baby. If you can do it, we will.\"\n\nShe slowly kissed her way down my chest and abs as I thought of going to Paris with her. Paris fucking France! I'd been out of the country twice with my parents. Once to Canada and once to Aruba. I thought of what I could tell my Mom. My train of thought was broken as I felt Laura's warm mouth engulf my hard cock.\n\n\"Oh god, that feels so good,\" I said. She simply moaned in reply.\n\nI watched her red lips move up and down my shaft, driving me wild with pleasure. She was so beautiful and the way she treated me was amazing.\n\n\"You're so gorgeous, Laura,\" I said. She looked up at me and winked, never slowing the movement of her mouth on my cock. I reached down and stroked her hair, still not believing that I was experiencing all of this.\n\nShe stopped sucking me and moved up towards me. \"I'm sorry, baby, but I have to feel you inside me again.\"\n\nI nodded and smiled, \"I'm not going to complain.\"\n\n\"Good,\" she said as she straddled my hips.\n\n\"Oh,\" I groaned as she slid down my shaft.\n\n\"Yes,\" she said. \"That feels so good.\" Her hips moved slowly and she groaned in pleasure. I reached up to take her breasts in my hands. I moved my palms over her hard nipples further stimulating her.\n\n\"Mmmm, that's it baby,\" she cooed. \"You make me feel so good when you do that.\"\n\nHer hands roamed over my pecs and shoulders, squeezing them lightly. I loved her touching me like that. Her fingers played with chest hair as she slowly rode.\n\n\"I've never been with a man like you, Michael,\" she purred. \"You don't know how wet I got watching you work in the yard. Thinking about these big, strong arms around me. I knew I had to have you.\"\n\n\"Oh, I'm glad, Laura. I wanted you so bad. I didn't think in a million years I'd have a chance to make love to you,\" I gasped, my pleasure growing with each stroke of her experienced hips.\n\n\"You've got your chance, baby. You're going to have lots of chances with me,\" she said. She kissed me more passionately than she'd kissed me before. I was surprised at first but I returned the favor. She pulled away and smiled at me. \"God, I wish I could have met a guy like you when I was 18.\"\n\n\"Me too,\" I groaned. \"I'm glad I met you when I did, though.\"\n\n\"I'm glad to hear that,\" she smiled. \"Your cock feels fucking amazing!!\"\n\n\"Good,\" I smiled at her. My confidence was growing as she continued to ride me. I realized I was laying there letting her do all the work of pleasuring us both. I began moving my hips up to meet hers. I saw her eyes widen and she smiled with delight.\n\n\"Mmmm,\" she purred. \"That's nice.\"\n\n\"Yes, very nice,\" I agreed.\n\n\"Oh god, that's really good. Oh, Mich....,\" she squealed. I felt a sudden gush of wetness between us. \"Unnnghh!\"\n\nShe'd done it again!! I almost lost control of myself at the thought I'd given this older goddess something she'd never know yet again. The look she gave me almost made me melt.\n\n\"Oh, you little devil,\" she cooed. \"That was even better than before.\"\n\n\"It was,\" I asked.\n\n\"Oh, yeah. Keep going and we'll really have to change the sheets,\" she said. I did my best and kept thrusting up to meet her. Our passion continued to grow and our bodies seemed to know what the other needed. I felt her hips moving faster. I sensed what was coming and looked into her eyes. She simply nodded.\n\n\"Michael, Oh Michael,\" she panted. \"Uggnnnhhh!!\" She bathed my loins with her wetness once again. That pushed me over the edge. I thrust up into her faster as she collapsed on top of me. I didn't last long and I felt myself start to cum inside her wet sex. I think it was even more intense than the first time given what I was feeling after what I'd helped her discover about herself.\n\n\"Oh, Laura,\" I moaned. God, the way she made me feel. I wrapped my arms around her and held her tightly as I finished orgasming. My breathing was heavy as I kissed the soft skin of her shoulder. We laid there quietly, enjoying the moment and the bliss of what we'd shared. Finally, she moved and laid next to me. I wrapped my arm around her as we began kissing.\n\n\"You were even better than the first time,\" she smiled.\n\n\"Thanks,\" I replied. \"You're teaching me a lot.\"\n\n\"I'm thinking you may not have much more to learn,\" Laura smiled.\n\n\"I just need more practice,\" I offered.\n\n\"Yes, practice,\" she laughed before she laid her head on my chest. I wrapped my arm around her and my hand stroked the smooth skin of her back. I still could not believe that I was sharing the moments I was with this beautiful, older woman. The longer I thought about it as I held her, the more it bothered me. Finally, I had to ask the obvious to my 18-year-old brain.\n\n\"Laura, why me?\"\n\n\"What do you mean, baby,\" she said.\n\n\"Of all the men you could be making love with, you chose me,\" I said.\n\n\"Honey. You don't need to worry about that,\" she said, raising up to look at me.\n\n\"I do, though,\" I replied.\n\n\"Why, baby,\" she asked.\n\n\"Because what we've shared means a lot to me,\" I said. \"I'm just wondering why.\"\n\n\"Baby. There are a lot of reasons. I don't expect you to understand them, I just hope you'll accept them and allow us to enjoy our time together,\" she said. I nodded before she continued.\n\n\"Michael, as I told you before, I grew up differently than most people. My sister and I were expected to look and act a certain way because of who we were. We didn't have the normal things like football games and prom. I hardly dated until I was in college. Daddy was sick for several years, so between school and helping look after him, I missed out. After he passed, I met Steve. He came from a good family and we seemed to be a match, so I married him,\" Laura said.\n\n\"I was na\u00efve, baby. I realized later that I felt I'd been cheated and missed out on a lot of things. Steve confided in me about the women he'd slept with. I never had that. After we split up I looked for something and realized that I wasn't going to find it. Then you came along. It's all crazy and again, I don't really expect you to understand. I feel young again with you. I'm getting to feel some of what I missed,\" she explained.\n\nI could only nod as I didn't fully understand it. I wanted to though. I wanted to understand and be what she needed.\n\nShe seemed to sense what I was thinking.\n\n\"Baby, are you okay with all of that nonsense,\" she asked.\n\n\"Yes, I think so. I can kind of understand. I mean most people would look at you and say she has everything. I can see how it would be different living it,\" I said.\n\n\"You don't need to feel sorry for me,\" she laughed. \"I'm almost 40 and making love to a man half my age is by far the craziest thing I've ever done.\"\n\n\"I'm glad to be that man,\" I smiled.\n\n\"So am I, baby. It's getting close to 11, do you need to go,\" she asked.\n\n\"I'd rather stay, but I do need to make sure Mom made it home,\" I said.\n\n\"Yes, you need to keep trying to help her,\" Laura suggested.\n\n\"I'm trying,\" I replied.\n\nLaura took my hand and led me downstairs. We kissed passionately as I tried to dress. I could not get enough of looking at her wearing just her garter belt, stockings and heels. When I was finally dressed, she wrapped her arms around my waist and we kissed.\n\n\"Baby, I was feeling a little crazy earlier when I asked you to go to Paris with me,\" she said. \"I don't want you to feel any pressure.\"\n\n\"No, I want to go with you,\" I replied.\n\n\"Okay, but promise me that you won't have any trouble at home,\" she insisted.\n\n\"It'll be fine. I'll be 'camping' with the guys,\" I smiled.\n\n\"Your mother is going to see right through that. You're not a very convincing liar I bet. It's just not in your nature,\" Laura laughed.\n\n\"Probably not,\" I grinned.\n\n\"Let me know by Monday, and I can probably arrange a surprise,\" she smiled.\n\n\"What,\" I asked instinctively.\n\n\"I can't say, otherwise it wouldn't be a surprise,\" she laughed.\n\n\"Okay,\" I laughed back. \"Can I see you again before next weekend?\"\n\n\"I'll see what I can arrange, I'm a very busy woman, you know,\" she said.\n\n\"I do know that. I'll try my best to make it worth your time,\" I smiled before I kissed her again.\n\n\"Mmmm,\" she purred. \"I think you'll do just fine. You better go, baby.\"\n\n\"Okay, I will. Kissing me like that doesn't make me want to leave,\" I said.\n\n\"I'll agree. It makes me want to throw you down on that sofa and ravage you again,\" she laughed.\n\n\"I wouldn't complain,\" I said.\n\n\"I know you wouldn't,\" Laura replied. \"Get going. Use your key to let yourself out.\"\n\n\"I will,\" I said as I turned to leave.\n\n\"Night baby,\" she called after me. \"This was just the beginning.\"\n\nI turned back to her. \"I hope so. Goodnight Laura.\"\n\nI let myself out, locking the door behind me. What an experience I thought as I got in my truck. I looked back briefly at the palatial home and thought of the experiences I'd had that night. I thought of Laura and what we'd shared. I just wished she was my age. Then everything would be perfect. She wasn't though and I hated it. I started the truck and pulled away from the curb.\n\nAs I drove through the darkness, I thought about what she'd said. She didn't want me to get my feelings hurt. We were just having sex. I'd never been in love before so I didn't know what it felt like. I did feel really close to Laura because of what we'd shared. I tried to remind myself of what she'd said. If it got to be more she'd end things. I couldn't stand the thought of that. I was still thinking about that when I pulled into the driveway. Mom's Cadillac was parked and I was thankful she was home. It had been almost midnight when she'd gotten home the night before.\n\nI went in through the garage and found her in the kitchen sipping a glass of wine.\n\n\"Michael, there you are,\" she said. \"Where have you been?\"\n\n\"I was over at Bryan's house. We were playing pool,\" I said.\n\n\"Oh, Okay. I was just having a glass of wine and then I'm going to bed. I had to prepare for my cross-examination in the morning,\" Mom said.\n\n\"I understand,\" I replied. \"The guys and I are thinking about a camping trip next weekend. Would you mind?\"\n\n\"A camping trip? No, honey. I wouldn't mind. Where are you thinking about going,\" Mom asked.\n\n\"Probably Robber's Bend,\" I replied.\n\n\"It's fine with me,\" Mom said. I could see from the expression on her face that she was completely indifferent. I could have probably told her I was going to Paris with a woman almost her age and got about the same reaction.\n\n\"Great, thanks. I'll tell the guys tomorrow,\" I said, trying to show some enthusiasm despite her indifference.\n\n\"You need to go have fun with your friends, honey. Everyone will be somewhere different next year,\" Mom said as she walked to her bedroom. \"Good night, Michael.\"\n\n\"Night Mom,\" I replied. I watched her disappear around the corner towards her room. I didn't know what I was going to do about her. Laura was right, I needed to continue to be there for Mom, but how could you help someone that didn't want to admit there was a problem? I poured myself a little glass of Mom's wine and walked to my bedroom. I sat on my bed sipping the wine thinking about Mom and Laura and everything else going in my life. I finished the wine and laid back on the bed. I thought about going to Paris with Laura. I'd taken French and Spanish since the 6<sup>th</sup> grade. I'd never been to place where I could speak either one. I was so excited.\n\nThe last thing I remember from that night was turning off my bedside lamp..."
    ],
    "authorname": "nosebone",
    "tags": [
        "first time",
        "his first time",
        "older woman",
        "younger man",
        "stockings",
        "squirting",
        "age difference"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/lessons-from-days-gone-by-ch-02"
}
{
    "title": "Adult Education",
    "pages": [
        "Can there be a fun, romantic, and relaxed way to push the sexual boundaries? Sure there can! You just need the right partner and a lot of time...\n\n*\n\n\"I bet he wants your ass, too. Men always think women want that, and they never do.\"\n\nI watched the other ladies in the group laugh or look down. That was Jennifer talking, and she was teasing Jackie about her boyfriend, whom Jackie described as \"pretty adventurous in bed.\"\n\n\"What do you think, Eric?\" Amy's eyes challenged mine as I snapped over to her.\n\n\"I think I'm smart enough to stay out of this conversation,\" I replied, to a couple of giggles from the ladies.\n\n\"Well that's the nice, safe, boring answer,\" Amy chided. \"You won't tell us what you think?\"\n\n\"OK, I'll take the bait. Like anything sexual, I think it depends on the woman. Some would never do it, some put up with it for their partners, and some really enjoy it.\"\n\n\"And I suppose you have the magic touch to make them enjoy it?\" Jennifer's sarcasm dripped out.\n\n\"I never said anything about me. Heck, you can read about this if you want. They've surveyed a lot of women about this, like everything else.\"\n\n\"So what about you?\" Amy again, her eyes sparkling.\n\n\"When did this become a discussion of my sex life?\"\n\n\"You've got a group of women here, talking about sex with you, and you're backing down? Hello? Is there any red blood in there?\"\n\n\"Yes!\" I blurted out\u2014Amy had got me. \"I know they can enjoy it from personal experience. I don't kiss and tell, so I'm not going to reveal who, but I absolutely know that at least one woman can have extremely powerful, soul-crashing orgasms that way.\"\n\n\"And you're so sure about that? And that she wanted it?\" Jennifer again.\n\n\"When she puts a bottle of lube in your lap and hooks her finger at you while she sashays to the bedroom, I think it's safe to say she wants it. As for the orgasm part, it's more the involuntary side that I picked up on. Tremors, spasms, and all that. She wasn't in control of herself.\"\n\n\"And you didn't marry her for life?\" Amy gave me a theatrical look of disbelief.\n\n\"Very funny,\" I said. \"It would be great if sex were the only aspect of a relationship. We were great in the sack, but there were other issues. It didn't work out in the long run.\"\n\n\"A guy admits that there's more to a relationship than sex?\" Jackie quipped. \"I didn't know that happened.\" The other ladies laughed while I rolled my eyes.\n\nI looked over at Amy. \"So I've spilled a bit, Lady. I'm not going to keep up a one-way conversation.\"\n\n\"Fair enough,\" she said, laughing. \"I'll just say that I haven't done it, but I try to keep an open mind on things sexual.\"\n\n\"Whoa. Maybe we've got another adventurous soul in the sack!\" Karen observed. Amy just stuck her tongue out.\n\n\"Speaking of relationships, you and Lisa have been split for several months now, right?\" Jennifer asked me, changing the subject. \"How come you aren't hooked up with some new babe?\"\n\n\"I try to avoid the rebound thing. That usually leads to regret. Why, you want to hook up? Probably enough time has passed for me.\" I wanted to get a barb in at Jennifer.\n\n\"In your dreams, stud,\" she said, rolling her eyes while the other ladies laughed.\n\nThey continued to a discussion of boyfriends and prospects, with a lot of laughs and catcalls. I joined in the fun.\n\nAfter another half hour or so, Jackie looked down. \"Look's like it's time for me to go. Got to get ready for tonight.\"\n\n\"I'll bet, with your adventurous boyfriend,\" Jennifer commented. \"Come on, girls. We should give Amy and Eric a chance to clean up. By the way, Eric, that's very nice of you to help Amy with this little afternoon party.\"\n\n\"I'm hoping you spread this story around with the ladies. I can start with a good reputation, and coast for a while in my usual lazy, self-centered way.\"\n\nThat got a few more laughs and teases as everyone picked up their things and said goodbye. Most of the other folks had left an hour or so ago. Amy had done a good job inviting a co-ed mixture, and the party had gone well. She was right\u2014an afternoon party got a lot more folks to come, since they could make evening plans as well.\n\n\"Ready to help with the dishes? By the way, thanks so much for co-hosting,\" Amy said.\n\n\"Anytime, Amy. Let's do it.\" Amy had been a good friend of my girlfriend Lisa, and we continued the friendship with each other after Lisa left. We both felt the loss when Lisa moved away, but the job opportunity had been perfect for her. Lisa and I both knew that we didn't have enough going for her to stay or for me to relocate with her. Lisa had told me that I should go after Amy, but it felt a little weird to hit up on a friend of my ex-girlfriend. Amy and I lived in the same condo building, so we saw each other a lot.\n\n\"Soul-crashing orgasms, huh?\"\n\nI noticed how close together we were at the sink. The dishes became a little harder to hold. \"Uh-oh. Not my sex life again,\" I replied, groping for something to say.\n\n\"Hey, maybe I'm trying to help,\" she said. \"I've got a friend who's mentioned that she wanted to try anal sex some day. Should I hook the two of you up?\"\n\nI shook my head. \"I know it sounds crazy that I'm not jumping at the chance to get some girl's ass, but you have to understand how I operate. I only have fun in the sack if the girl is having a great time herself.\"\n\n\"Who says she won't have fun?\"\n\n\"It's not as simple as just pushing inside and having her swoon with pleasure. That may be what porn movies show, but it doesn't work that way in real life. While she may endure it and eventually come to enjoy it, chances are it will just be a horrible experience. For me, anal sex is something that comes after a lot of trust and history have built up. Both partners need to be comfortable with many other forms of sex together, and the lady has to have learned how to relax and receive pleasure from that part of her body. Finally, she's sharing a very personal, private part of herself, so she needs to completely trust her partner. If all those ingredients come together, it can be pretty amazing, and she has a good chance of loving it. On the other hand, it's just not something to check off in a hook-up.\"\n\n\"Sounds like a very mature outlook, Eric. Or are you just looking for a package deal\u2014you know\u2014guaranteed sex for a while?\"\n\nI laughed. \"I think you got me there. I'm a package deal kind of guy. Now, if she's interested in that type of thing, maybe we should talk. I'm certainly not against it, and you generally have great friends. I'm not a big condom guy, so make sure you ask about getting tested, so she can rest her mind about that aspect of things. It's all about relaxing and having fun.\"\n\n\"Sounds right. I'll look into it,\" Amy said. \"You'll be a lucky man if she says yes.\"\n\n\"No doubt. Now, if you keep talking like this, I'm going to have to get an apron on.\"\n\nAmy laughed her deep, rich laugh. She enjoyed teasing and having fun with people. \"OK, I'll let you off the hook for a while. Let's get the chairs and everything off the deck.\"\n\nWe did that, chatting about other things. Amy didn't show any sign that we had been discussing intimate subjects just a few minutes before. She moved gracefully through her house, her blonde hair swishing between her shoulders. Many times, I had noticed her combination of tight body and curves in all the right places. With Lisa in the picture, I had been more discrete, but now I enjoyed having a friend so easy on the eyes. I fell silent while I admired her.\n\n\"What are you thinking?\" Busted. Amy always seemed to pick up on what I was thinking, and she loved putting me on the spot. For someone who had a reputation as a great friend and all-around nice person, Amy kept me on my toes.\n\n\"I think it might fall into the category of too much information. What are you thinking?\" I said, trying to turn the tables.\n\nAmy gave me a long look with her piercing blue eyes. \"I think it falls into the same category,\" she said. \"Let's fold up these tablecloths.\"\n\nWe got the last one folded. I put it on top of the others. Neither of us had said a thing.\n\n\"Eric.\"\n\nMy eyes snapped back to her. She stood there, beautiful. \"Yes?\"\n\n\"I didn't give you the full story before, with my friend. Yes, we have discussed her interest in back door sex. But I wasn't asking for her when I talked to you.\"\n\nSuddenly, a lightheaded feeling coursed through me. \"Uh, you weren't?\" I asked lamely.\n\nShe smiled, looking straight into my eyes. \"No, Eric. Your story sounded pretty good, and I was really asking for myself. If you're interested, let me know.\"\n\nTime stopped. I'm sure I looked stunned. Then my brain got back in gear. My heart was hammering.\n\n\"I'd love to!\" I blurted out. I was still trying to comprehend what was going on, but some part of me knew to answer with enthusiasm. \"I mean, whenever you would want to.\"\n\nAmy laughed. \"I'll take that for a yes, silly boy. So how should we get started?\"\n\n\"With a hug and a kiss,\" I whispered, moving close to her. I took her in my arms. \"Wow, Amy, you've left me speechless.\"\n\n\"You don't have to say anything,\" she whispered, catching my lips with hers.\n\nWhen our lips connected, something clicked inside, and I realized how much Amy had attracted me all along. I wanted to be more than friends, much more. I could feel the same waves coming off of her. Our kiss heated up. Finally, we separated, both a little breathless.\n\n\"Amy, you kiss fantastic.\"\n\n\"Thank you. I figured you were a good kisser, too, and I was right,\" she said. \"I think we'll work out together. Now, I like your idea about testing, even if it slows us down for a while. If we hurry today, we may still have time.\"\n\n\"Lead on, Lady,\" I said. \"Do you know a place?\"\n\n\"I think I've seen one, but I'm going to check online. Just a sec.\" Amy pulled out her phone, concentrating. After a minute or so, she made a call.\n\n\"We've got an hour before closing. Let's go\u2014I'll drive.\"\n\nMy mind was still in a whirl while we drove down there. A lot had happened since I woke up this morning.\n\n\"Eric, thanks for doing this,\" Amy casually remarked as she drove.\n\n\"Amy, I don't think you need to thank me.\"\n\n\"Any guy is lucky just to be with me, huh?\"\n\n\"Something like that.\"\n\nAmy laughed. \"So, you might be interested in dinner? Part of that 'getting to know each other' thing you were talking about?\"\n\n\"I'd love to, Amy.\"\n\n\"Good. Let's plan on it. Maybe we can walk down along the river and then look for something.\"\n\n\"Good idea. We can walk up an appetite.\"\n\nWe found the clinic and parked. As Amy walked in, I noticed some of the subtle looks she was getting. Both men and women checked her out, and I saw the admiration in their faces. She had a girl-next-door look of shirt, skirt, and sandals, but they fit her curves just right. They looked at me, too, and I caught their faint smiles as they realized what we were doing together at the clinic.\n\nWe finished and drove over to the river. I took her hand as we started walking. She squeezed back, a smile on her face.\n\n\"Glad the testing part is over,\" Amy said a few minutes later. \"But, Eric, I appreciate it. You're a great guy. It will be a long week.\"\n\n\"If we're creative, we might be able to work on getting a little closer without getting too intimate.\"\n\n\"What are you thinking?\" she asked, turning to me.\n\n\"Let's see how the evening plays out,\" I replied, \"and then we'll discuss it.\"\n\n\"A little mystery for me to think about?\"\n\n\"Exactly.\"\n\nAmy gave me another of her looks, shaking her head and smiling to herself. We walked on, just enjoying being together. I was walking on a cloud.\n\n\"Remember when we'd bike with Lisa?\" Amy said as she saw some bikes go by.\n\n\"Yeah, I miss that. You still interested?\"\n\n\"I am. I try to stay in shape, and it's fun to do things together. I run with my friends, but I enjoy biking, hiking, and other things, too.\"\n\n\"Let's plan on it.\" I said.\n\n\"How about tomorrow?\"\n\n\"Great.\"\n\nAmy squeezed my hand again. \"So what type of food do you like?\"\n\n\"As you mentioned in another context, I try to stay open-minded.\" That got a snort from Amy.\n\n\"Like to play with fire, huh?\" she challenged.\n\n\"Can't help it.\"\n\nAmy laughed again. \"I guess I can't blame you. I like to play myself.\"\n\n\"Now to answer your question, I like anything prepared well. So if you have a favorite, let's do it.\"\n\n\"I'm the same. Why don't we stroll around, check the menus, and see what catches our eye?\"\n\n\"Perfect. I'm having fun.\"\n\n\"Me, too, Eric.\" Amy squeezed my hand again.\n\nWe found a seafood place tucked around a corner with a nice outdoor area. I had been before and really liked it. We kicked back with a bottle of Chardonnay, talking about all kinds of things. I had always liked talking to Amy. She combined wit and humor with a playful, curious attitude.\n\n\"Excuse me, Eric. I'd like to wash up before the food comes.\"\n\n\"Of course.\" I got up and held her chair.\n\n\"Such a gentleman. Thank you.\"\n\nAmy left her phone and purse on the table, so I didn't go with her. I took the chance to check out her ass while she sauntered away from the table. It was everything I remembered\u2014rounded and tight. She suddenly turned her head, caught me looking, and smiled to herself before disappearing around the corner.\n\nIt was my turn to smile, thinking how Amy kept a wicked side carefully wrapped in her fresh, girl-next-door exterior.\n\nI got cleaned up myself and then we enjoyed a great meal of seafood, wine, some salad, and crusty bread. We both ordered somewhat light, not wanting to slow ourselves down.\n\n\"Fantastic dinner, Amy. Thanks for asking.\"\n\n\"My pleasure,\" she replied. \"Shall we head back?\"\n\n\"I think that's a great idea,\" I answered, as my cock started to swell.\n\nWe walked hand-in-hand back to Amy's car and then drove back to our building, continuing to talk about all sorts of things. As we were getting close, Amy turned to me.\n\n\"I don't know exactly what you have in mind, Eric, but if it involves us being together, perhaps you'd like to grab your toothbrush and spend the night?\"\n\n\"Great idea. I'd like that,\" I replied. I never liked having sex and then going to sleep alone. In a flash of insight, it suddenly hit me that Amy knew a lot about me. Lisa had liked the fact that I spent the night, and I'm sure she mentioned it to Amy. I wondered what else she had mentioned. I looked over at Amy as she seemed to study the road. It felt like she knew what I was thinking.\n\nAmy parked and took my hand as we walked to my place together. Amy had a little smile on her face as she put me on the spot again. She had managed to invite herself in without any preparation from me.\n\n\"Nice try, but I've got my place decent. Didn't know if anyone would stop by afterward.\"\n\nAmy looked up, all innocent. I laughed and got just the barest hint of a smile in return. She followed me into my place, pretending to stay close as she got to check out my drawers and cabinets. I grabbed a set of morning clothes and a few toiletries. When I went to the nightstand to get a bottle of massage oil, she briefly raised her eyebrows, but never said a word.\n\n\"I think I've got everything,\" I said as I moved to the door.\n\nAmy took my hand again. \"Sure?\"\n\n\"I've got you, and that's the main thing,\" I replied.\n\n\"You say such the prettiest things,\" she said as she batted her eyes. \"Let's go.\"\n\nWe walked over to her place and she let us in. Locking the door behind her, she leaned back against it, as if to say I've got you all to myself now.\n\n\"Why don't you put your things in the other bedroom,\" she directed. \"Then we can talk about what you have in mind.\"\n\n\"Got you wondering?\"\n\n\"Bedroom's around the corner, or don't you remember?\"\n\nI laughed and moved on. I heard Amy's sink running, so I took the opportunity to brush my teeth as well. When I walked out, she caught me in her arms. In the split second before we hugged close, I thought I caught a little more definition in her nipples.\n\n\"Yes\u2014wondering,\" she said simply, looking up at me.\n\n\"OK. Well, we can definitely kiss and hold each other. That felt really good before. But the fact that we can't touch each other in certain places doesn't mean we can't have an orgasm at some point, does it?\"\n\nI watched her take that in. Her eyes got wide. \"You are a wicked little boy, aren't you?\" she whispered.\n\n\"Definitely. You'll have to admit that we will know each other a lot better afterward.\"\n\n\"I'll say. I haven't played with myself for very many people.\"\n\nI wonder how many\u2014Amy's definitely my type, I thought to myself. \"After we kiss for a while, I was figuring we could move to your bed and I would give you a massage. When the time's right, you can touch yourself.\"\n\n\"While you get to watch everything.\"\n\n\"Yes. It's going to be totally hot,\" I replied.\n\n\"You think?\" Amy shot back. \"I get this. You're helping me share my secrets. Pretty clever.\"\n\nI nodded. \"Anything to help a friend.\"\n\n\"Right,\" Amy drawled. \"Thanks for being so considerate.\"\n\n\"You are so welcome,\" I answered. \"I may not last long when you return the favor.\"\n\n\"So I get to watch, too?\"\n\n\"Amy, we will do everything together. Part of building trust is that you will be getting to know my body as well.\"\n\n\"All of it?\"\n\n\"All of it.\"\n\n\"I can live with that. In fact, I like it a lot. OK, I'll go along with your little plan.\" Her eyes flashed. \"You're a lucky guy, Eric. Just remember that.\"\n\nI pulled her close. \"I won't forget.\" I caught her lips again.\n\nWe stood close and shared the gift of kissing. When we took a breath, she took my hand and led me to the sofa, kicking her sandals off and pulling me down beside her. Her hands wandered along my legs and chest, so I moved mine a little further. I teased her for a long time before I finally cupped a breast. She was nearly pushing her chest into my hands.\n\n\"Ohhhhhhhh. Finally. You are a tease,\" she whispered.\n\nI chuckled against her lips as I gently played with her chest. I liked what I felt under her shirt\u2014I guessed a nice, full B-cup. Exactly what would fit the rest of her athletic build. Her nipples stood out and brushed against my hands as her breath got hot.\n\n\"Let's try that massage,\" she said, a little impatient.\n\n\"Perfect,\" I answered.\n\nAmy got up and took my hand again. She led me into the other bedroom, grabbed the massage oil, and then led me into her room. She went to one side of the bed, and I helped her turn it down from the other side.\n\n\"A towel to lie on might help,\" I suggested.\n\n\"Good idea.\" Amy disappeared into her bathroom and came out with a bath towel. We arranged it on the bed, and then she moved to the end.\n\n\"Come here,\" she whispered, crooking a finger at me. We joined for another smoldering kiss, our hands wandering up and down each other's backs. As she heated up again, Amy moved her fingers to my front and started unbuttoning my shirt. She slid it off me and then raised her arms, inviting me to pull her top off. I slid it gently over her head, and then caught my breath.\n\n\"Wow, you are beautiful,\" I sighed. Her breasts stood firm, crowned with hard nipples just begging to be sucked.\n\nAmy smiled. \"Just wait for when I can really get you to myself. You are so lost, little boy.\"\n\nI smiled back. \"I can't wait.\"\n\n\"Now, are you just going to stand there with your tongue hanging out, or are you going to get my skirt off too?\"\n\n\"As you wish, madam.\" I found her zipper and carefully worked it down, sliding her skirt down her legs and off. Standing back up, I took in her figure, wearing only a sheer pair of pink panties.\n\n\"Your turn,\" she said, undoing my belt and sliding the zipper carefully around my straining cock. \"A little excited, huh?\"",
        "\"You could say that,\" I replied to a gentle chuckle from Amy. She got my shorts off, stood, and looked me up and down. She slowly closed the distance between us.\n\n\"You look as good as I imagined,\" she whispered, sliding into my arms. \"And I've been imagining this for a long time.\"\n\nI groaned as she pressed her nipples into my chest. We molded our bodies together as we kissed, my tented boxers pressed deeply into her junction.\n\nAmy reluctantly pulled back, sucking my lip before separating. \"I could do that all night, but let's get on the bed.\"\n\nI led her over to the bed, holding her hand as she arranged herself on the towel. She twisted slightly and pulled my hand to the hem of her panties. I slid my fingers under the material and slowly worked them down, assisted by Amy rocking side to side. I got them off her feet and then moved forward again.\n\n\"You are spectacular, Amy,\" I said, and she was. Her hips flared out into a curved, tight ass that begged to be played with. Amy looked good in a bikini, and it was easy to see why.\n\nI felt her hand find my leg and travel up, lightly pulling on the waist band of my boxers. She was a gifted tease, and I got the message, sliding to the side to release my jutting erection. Dropping my boxers over the side, I leaned over to the nightstand and grabbed the massage oil. I started with a light coating on my hands. Remembering massage sessions of my own, I lightly touched between her shoulder blades to center her, and then slid my full hands onto her back.\n\nThe touch was electric, with what felt like sparks flying between our skin. Amy sighed deeply as I lightly worked around her shoulders. I slowly increased the pressure, feeling her muscles relax under my fingers.\n\n\"You have magic hands,\" she murmured, settling fully into the bed.\n\n\"Enjoy,\" I answered. My hands worked slowly down, ranging over Amy's lower back. I kneaded deeper into her muscles, slowly unwinding them.\n\n\"Ummmm, that feels good,\" Amy sighed.\n\nI continued, then moved my hands to her calves one at a time\u2014not breaking the connection. I took one hand and added some more oil. Her firm muscles rippled under my touch, while a continuous stream of sighs told me that she was loving this. I kept my hands from wandering too high, however, to build the tension.\n\nMy cocked lurched when I thought I saw a slight grinding motion in Amy's hips. I wasn't sure since I was kneading her legs, but her motions became more obvious with time. Then the scent of her arousal hit me. It wouldn't be long before Amy had to reach down. My hands continued on her calves\u2014I was going to make her take the next step.\n\nAmy drew in a long breath and then sighed deeply. Her right hand pulled away from her head and slowly wandered down. When it reached her waist, she twisted slightly and I helped her pull a leg forward to give her room. As her hand reached underneath, my hands slid up onto her ass.\n\n\"Ohhhhhh, God,\" she whispered. Her ass pushed up into my hands.\n\nI kept the pressure light, drawing out the tension. Frustrated, Amy arched her back, shoving her ass upwards. I looked down and was rewarded with the sight of her swollen pussy coming into view, her greedy fingers sliding between her lips and shining with arousal. My cock hardened to almost painful levels\u2014this was fucking volcanic.\n\nNow that she had confessed her need, I allowed my fingers to knead deeply into the muscles of her ass. Amy continued to push into my hands. She had to know the show she was giving me, but it was clear she didn't care anymore. Her fingers worked more quickly between her pussy lips, and a continuous stream of sighs and moans issued from her throat.\n\nOn a hunch, I slid back a bit and lifted a knee to give her legs more freedom. Immediately, she drew her legs apart, and I moved between them.\n\n\"Uhhhh, fuck,\" she whispered while her ass hiked even further into my hands. Amy never cussed\u2014she had to be really turned on. I ground deep into her ass, squeezing and kneading the firm flesh while the pucker of her anus came into view. Looking lower, I saw the deep red of her inner lips slide around her fingers, and the knob of her clitoris mashing between her fingertips.\n\nThis girl is totally lost, I thought to myself, the erotic energy coursing through me. I teased around her anus, but never went deeper, even as she bucked and twisted beneath me, trying to draw my fingers inward.\n\nHer fingers pressed deeper and deeper into herself, and I studied her pattern, learning the secrets of her pleasure. My eye caught a movement, and I looked up to see her other hand drop to her chest. She twisted slightly and seized her nipple, pulling her entire breast with it. I couldn't believe how long and hard the nipple extended out as she rolled it savagely between her fingertips. I nearly blew at the sight.\n\n\"Uh...uh....uh,\" Amy grunted with each thrust. The muscles of her ass grew more and more tense under my hands. Her back heaved and arched.\n\n\"I'm gonna cum!\" she gasped. She hiked her hips off the bed, rigid with effort. Her anus and pussy faced right at me, hungry for orgasm. Her fingers dug deep into her inner lips, strumming her clit furiously.\n\n\"Oh, ah, oh, AHHHHHH!\" she wailed as she went over the edge. Her anus pulsed with the contractions, and my cock throbbed with her. Her fingers pressed deep, slowly moving around her clit to milk all the pleasure it could give her. Amy certainly knew how to make her body respond, and I drank in every detail.\n\nMy hands continued to caress her ass as she sighed and whimpered her way back to earth. She lowered her hips, but kept up the slow massage of her clit and nipple.\n\n\"That...was incredible,\" Amy finally said. \"Thank you.\"\n\n\"You're welcome,\" I replied. \"It was intense for me, too.\"\n\n\"Enjoy the view?\" she said, her body lightly shaking with laughter.\n\n\"Yeah, you could say that. My cock's about to explode.\"\n\n\"Poor baby. Should I help make the pain go away?\"\n\n\"I thought you'd never ask.\"\n\nAmy stretched languorously beneath me. Then she raised up, a smile playing about her lips as she glanced at my jutting cock. Kissing me, she pointed at the bed. \"Down,\" she mouthed.\n\nI laughed and stretched out beneath her, pulling a leg forward to give my straining erection some room.\n\n\"Nice view,\" Amy remarked as she spread oil on her hands.\n\nShe touched between my shoulder blades to center me, then she trailed her fingertips down either side of my back. I groaned involuntarily as the fire flowed from her fingers into my skin. She's got magic hands, I thought to myself.\n\nWith mercy for my raging cock, Amy skipped the back rub and trailed her fingers down to my legs, squeezing my muscles between her fingers. The mutual relaxation and arousal seeped into my skin. She ranged close to my ass, but waited for me to make the first move.\n\nI made it. Pulling my leg forward a little more, I felt Amy moved in between them to give me room. I reached down and closed my fingers around my cock. I heard Amy's breath catch, and a shiver raced down my spine to know this turned her on.\n\nInspired, I reached back to Amy and cupped my hand. A flow of oil into my palm told me that she got the message. I reached forward again and spread the oil around my cock, relishing the smoothness and warmth. At the same time, her hands ranged up to my ass, kneading and tracing over my skin. A tingling sensation spread through my limbs as I realized how deeply Amy was connected to me.\n\nI started pushing back into Amy's hands, and I felt her position herself further back between my legs. She wanted the view\u2014I just knew it. So I hiked up my hips and gave it to her. Her hands squeezed deeper, telling me she appreciated it.\n\nThe tension jolted up a notch as I shared so deeply with Amy. My hand smoothly pumped my cock\u2014orgasm was rushing to take me. I held off as long as I could, lightening the pressure to walk the knife-edge of pleasure. Amy's fingers continued their intense connection.\n\nFinally, I could hold the flood back no more, and I squeezed down. Cum surged up from my balls in bursts of fire as I howled out my release. I shot rope after rope into the towel below me and rode it out.\n\nFinally, I came back to earth. I pulled a corner of the towel over the mess below me and eased myself down to rest. Amy's hands left my ass, then moved to either side of me. I felt her weight shift, and then a very wet pussy touched the back of my leg. The pressure increased as she settled astride it.\n\n\"Ohhhhhh, yeah\" she breathed.\n\nMy cock stirred. Was this girl going to hump my leg?\n\nI got my answer as she started grinding her hips. She held her upper body off me, putting all the pressure between her legs. She squirmed back and forth, her juices soaking my skin. Her breathing changed to grunts as she worked herself hard. I just lay there, blown away by Amy's raw sexuality.\n\n\"This is sooo good,\" she gasped, grinding faster.\n\n\"You are incredibly hot, Amy. Go for it,\" I replied back.\n\n\"Uh, huh.\"\n\nIn a little bit, Amy went into overdrive, mashing her abused pussy on my leg. I felt the tremors start through her body as she whimpered and moaned above me. Then she screamed out her release and rode me through a marathon orgasm, her pussy flooding my leg with her essence. When her twitches subsided, she eased herself down onto my back and sighed contentedly.\n\n\"Oh, God, that was good,\" she breathed.\n\nI chuckled. \"It sure felt like it down here.\"\n\nI felt her laugh. \"I needed that after watching you. I had some serious pent-up desires.\"\n\n\"Keep 'em going. How did I get so lucky to meet a tigress like you?\"\n\n\"This tigress has been hunting her prey for a while, and it brings out the animal in her.\"\n\n\"We're going to be great together; you know that Amy?\"\n\nIn answer, I got a long kiss on my back.\n\nWhen we cooled off, we moved the towel out of the way, and Amy turned to spoon together. I put my arm around her, and she sighed and snuggled back against me.\n\n\"Thank you for a great day, Eric. I liked your little plan.\"\n\n\"It's been the best day ever. Amy, you really surprised me.\"\n\nShe chuckled. \"I think I surprised myself.\"\n\nI drifted off thinking that everything was right with the world. I had this beautiful woman in my arms, but she was something more. I couldn't wait to find out.\n\nI awoke to find her eyes looking into mine.\n\n\"Morning, sleepyhead,\" she said.\n\n\"Morning, beautiful,\" I said as I leaned forward to kiss her.\n\nHer face lit up as I pulled back. \"Still happy with the tigress memories from last night?\" she asked.\n\n\"Are you kidding? If I'd had any idea, I would have dragged you into my bed a long time ago.\"\n\n\"I guess you liked it,\" she said softly. \"I wanted to make sure that I wasn't too forward.\"\n\nI looked into her eyes. \"Amy, if you're worried that I'll feel threatened or something, put it to rest. That was the hottest thing I've ever experienced. I've always dreamed of a woman who's completely on fire, and last night, that dream became reality.\"\n\n\"Thank you,\" she breathed. \"Thank you for the freedom to let go.\" Then she kissed me, and we both held onto it. It heated up, both of us sucking each other's lips. My cock hardened into her leg.\n\n\"Oh, God, I can't wait until I can get all of you,\" she moaned.\n\nI answered by sliding my hands around until I cupped a breast. Amy sighed, then let out a shaky breath as my fingers closed over her hardening nipple. She kissed me fiercely, like she couldn't get enough. We intertwined together, heating up to boiling.\n\n\"If I roll over, do you think you can find a place to rub that lovely cock of yours?\" Amy spoke onto my lips.\n\n\"Yeah, I think I can do that,\" I breathed back.\n\n\"Good.\" Amy pulled away and then rolled face down on the bed. I watched her hand slide under her hips, and then she turned her flushed face to me.\n\n\"I want to feel your skin on mine,\" she whispered.\n\nI raised up and looked at the sight below me. Amy's ass undulated to the tune of her fingers seeking her folds. I slid my cock between her firm cheeks and settled down over her.\n\n\"Oh, yeah,\" I said. \"You feel fantastic.\"\n\n\"You have no idea,\" she answered. Her hips moved into a sexy grind that sent shivers down my cock. We pushed together, and\u2014a veteran now\u2014I watched Amy start her journey to another orgasm.\n\nAfter a few minutes, her breath became ragged, and her hips plunged into her waiting fingers. Her ass squeezed and milked my cock, and my excitement ranged right behind hers.\n\nWhen she came, I felt the shudders race through her body. Fueled by hers, my orgasm raced toward me. I buried my cock deep between her cheeks and twitched over her, shooting into her back. When the aftershocks subsided, I gently eased down and kissed along her neck.\n\n\"Ummmm, what a way to wake up,\" Amy said. \"Want to get a shower and then have a little breakfast before I let you go?\"\n\n\"Sounds perfect,\" I answered.\n\nAmy got the water warm, climbed under the spray, and beckoned me inside. \"I'll try to behave myself,\" she said.\n\n\"Yeah, I don't want to have to give you a spanking,\" I answered back.\n\n\"Haven't had enough of my ass yet?\" she teased.\n\n\"Haven't even started,\" I answered.\n\nAmy laughed. \"You know, I kind of outsmarted myself yesterday. I wanted to tease and get you worked up about my friend, but then I realized that I had done too good a job. I really wanted you for myself, so I had to act fast.\"\n\n\"I'm glad you did. It's hard to believe that we were just 'good friends' a few hours ago. Amazing how a few words change everything.\"\n\nAmy looked up at me. \"They do, don't they?\" She lifted up to kiss me softly, then pushed me away. \"Let's get this shower over before I attack you again.\"\n\nI laughed and grabbed the soap to start on her back. She kept up a stream of playful comments as I went to work on her, mixing compliments like \"You have the magic hands\" with warnings like \"Careful where those fingers are going.\"\n\nI got her finished, and then she went to work on me. With more playing and splashing, we finally got done.\n\n\"When you get your hands on this body, you gotta pay,\" Amy said in the kitchen. \"You get to clean this fruit for breakfast, while I get some eggs going.\"\n\nWe kept up a lively conversation while we ate. Amy and I had been friends for a while, and we both really enjoyed each other's company. We finished, and I helped her clean up.\n\n\"Weren't we doing this same thing yesterday?\" I said as I worked with her in the kitchen.\n\n\"Maybe it looked the same, but it sure didn't feel the same,\" Amy answered.\n\n\"Yeah, I didn't know I was going to get that sweet ass of yours,\" I drawled, jumping out of the way for Amy's snapping towel.\n\n\"Very funny,\" she said. \"But you're going to pay for it.\"\n\n\"Oh, I'm sure I will, but it will be sooo worth it,\" I teased.\n\n\"Well, your first payment is Friday,\" she said, all business-like. \"You're due here at 5pm, and you better be ready to put out all night. Just show up, and I'll take care of the rest.\"\n\n\"Yes, Ma'am,\" I replied, my cock stirring again.\n\n\"OK, well I guess I can let you go for now.\"\n\n\"Don't we have an exercise date later today?\" I asked, remembering our walk the day before.\n\nAmy got a big smile. \"We do, don't we? Thanks for remembering. What would you like to do?\"\n\n\"How about bicycling? We could leave from here around 2 if that works for you.\"\n\n\"Perfect.\"\n\nI reached out my arms to her. She glided into my embrace. \"Amy, that was a fantastic evening,\" I whispered into her ear.\n\n\"Thank you for sharing it with me,\" she whispered back. She reached up and kissed me again. \"Now go, before I jump you again.\"\n\nI laughed. \"My reputation would suffer if people knew I was walking out on a girl who wanted to jump my bones.\"\n\n\"Especially if they knew it was me,\" she added.\n\n\"See you at 2. Bye.\" I reluctantly walked out of her door.\n\nI got a few things done and met Amy for the ride. She looked good in her outfit and kept up a good pace. We finished, and I dropped her off at her door and settled in for the evening.\n\n\"Hello?\" she answered to my call that evening.\n\n\"What's that thing about how long it takes a boy to call after the first date? I wanted to let you know that I'm interested.\"\n\n\"Nice,\" she answered. \"You keep this up, and you may just get lucky.\"\n\n\"That's the plan,\" I answered. \"Now, how about a nice, chaste date on Tuesday or Wednesday? Could I take you to dinner?\"\n\n\"That would be lovely,\" she replied. \"Let's do Wednesday.\"\n\nI called Amy a couple of more times leading up to Wednesday. We chatted and laughed like we always did, and I looked forward to seeing her again. Finally, Wednesday evening arrived.\n\n\"So you said this was a 'chaste' date, huh?\" Amy asked as we were walking out.\n\n\"Yeah. I'm wondering why I did.\"\n\n\"I like it\u2014just getting to spend some time with you.\" Amy squeezed my hand. \"Also, it builds the tension for Friday. I can't wait to get my hands on you.\"\n\n\"I'm starting to worry.\"\n\n\"Oh, I'll pull you through\u2014never fear! I've got a lot of tricks up my sleeve.\"\n\n\"So I just have to lie there?\" I deadpanned.\n\n\"No, silly boy. You just have to follow my lead.\"\n\n\"Oh, I get it. If I do as you say, we'll both be happier.\"\n\nAmy rolled her eyes. \"Well of course, silly. I figured you'd know that by now.\"\n\n\"I'm a real slow learner on that type of thing.\"\n\n\"That's what I was afraid of. I'll just have to keep working on you, now won't I?\"\n\n\"You do that.\" We both laughed.\n\nWe shared a great meal of food and conversation. Amy sparkled throughout\u2014it was like she could feel my attraction, and that gave her the confidence to be even more herself.\n\n\"I had a wonderful time tonight,\" she said as we got back to her door.\n\n\"I did too. You're a lot of fun to be around, Amy.\"\n\n\"Even outside the bedroom?\"\n\n\"Even then. Although the bedroom certainly doesn't hurt,\" I added.\n\n\"That's where I'm at my best, that's for sure,\" Amy laughed. She leaned in and kissed me suddenly, then opened her door and stepped inside. \"Friday,\" she whispered and closed the door behind her. I smiled to myself\u2014Amy liked her mystery, and I had to admit that she was drawing me in.\n\nThe week dragged on, but Friday finally arrived. The clinic called with the results, and I realized that Amy and I were going to get a lot more intimate in the weeks ahead.\n\nI picked up some flowers and knocked on her door promptly at five. It immediately opened, and I took in Amy standing in a robe.\n\n\"How lovely,\" she exclaimed, taking them and inhaling deeply. \"Let's get these in a vase, shall we?\"\n\nI followed her in after she locked the door. She found a vase and arranged the flowers within it, setting it on the table. \"This will look great for dinner tonight,\" she said. \"Thank you. It's very thoughtful.\"\n\nThen she turned to me, her expression hungry. The robe slipped off her shoulders and pooled on the floor.\n\n\"You've played your cards right, Eric. This,\" she said, spreading her arms to offer her naked body, \"is all yours. And you,\" she added, drawing closer, \"are all mine.\"\n\nI took her in my arms for a deep kiss. My hands roamed the smooth skin of her back. Her breath blew hot in my mouth.\n\n\"Don't tease me tonight,\" she whispered. \"I've been waiting all week. Take me.\"\n\nIn answer, I crushed her to my chest. She whimpered in my mouth, and then she moaned when my hands squeezed her ass, kneading the firm flesh. I then spun her around and pulled her back to me, cupping her breasts while my lips sought hers again.\n\n\"Ohhhh, yes,\" she encouraged.\n\nMy fingers found her nipples, already erect and wanting. I pulled and rolled the hard points, feeling Amy arch her chest into my hands. Her ass pushed into my hips, searching for my hard cock.\n\n\"I need your skin next to mine,\" Amy breathed. She pulled away and reached for my shirt, pulling it over my head. She kneeled to pull my shoes and socks off, then undid my belt and dropped my pants. My boxers jutted with the force of my erection, and Amy eased the waistband over my length. I sighed as I sprang free, and my boxers joined the rest of my clothes.",
        "Amy took my cock into her hands and gave the head a deep kiss. \"Coming attraction,\" she murmured, before rising to kiss me again. \"Now, where were we? Oh, yes.\" She turned around and pulled my hands over her firm breasts, lining up her ass to nestle my cock in the crack.\n\n\"This feels so right, to hold you like this,\" I whispered in her ear.\n\n\"You belong here\u2014holding me,\" she breathed.\n\nI worked her breasts over, twisting her nipples harder as she heated up and moaned in my ear. Her ass danced around my cock, grinding exquisite pleasure into the base. I let a hand wander down, hearing her assent in her breathing.\n\n\"Oh, God,\" she whimpered when my hand found the soft mound above her pussy.\n\n\"Let's get to the bed,\" I commanded.\n\n\"Ummmm, hmmmm,\" she replied, taking my hand and leading me back. I found her bed turned down, with several candles burning. I kissed her and guided her back onto the bed, then opened her legs and nestled in between them. Her pussy opened to my gaze, hot with arousal. I lowered my lips and kissed around it, then zeroed in, heeding Amy's wish not to tease.\n\n\"Oh!\" she exclaimed when I made contact. I started lower, but Amy pushed her hips down, driving her hooded clit under my tongue. Taking the hint, I focused on the hood, hearing Amy thrash and moan around me. As I felt her clit emerge, I pulled the hood back and lashed the tiny pearl back and forth.\n\n\"Yes!\" Amy yelled. \"Don't stop!\"\n\nAmy arched her back, and I looked up to see her breasts tighten and heave into the air. I flattened my tongue and let her ram against it as she pushed herself to orgasm.\n\nAmy grabbed my shoulders and wailed as the spasms overtook her. Her pussy pulsed against my tongue, and I let her ride a long orgasm out. Finally, she relaxed into the bed, and threw her arm over her eyes.\n\n\"Oh. My. God. That was incredible.\"\n\n\"Glad you liked it.\"\n\n\"Liked it? I loved it,\" she replied. \"And there's something else I'll love. Lie down. I want you inside me.\"\n\nI stretched out on the bed and looked up to see Amy position herself over me, chewing her lip in concentration. She placed my cock at her entrance and looked into my eyes as she slowly sank down. I gasped as I felt the tight, liquid heat of her tunnel. She smiled at my reaction, continuing her descent until she bottomed out with a look of satisfaction.\n\n\"You feel amazing,\" I told her.\n\n\"You have no idea,\" she responded, leaning down to kiss me. Our tongues intertwined, letting each other know our appreciation. Amy then raised up, placing her hands on my chest and starting a slow rocking motion. I let my hands travel up her arms and move to her chest. Amy hummed her approval as I cupped her breasts, feeling their firm weight while she leaned into my hands.\n\nI looked up into Amy's eyes, seeing trust, happiness, and something deeper radiate back at me. I couldn't help but respond, not knowing exactly what I communicated, but seeing it was something good from the little smile that played at the corners of her mouth.\n\nAmy rocked a little faster, and then I felt one of her hands slide down between us to play at her clit. My cock jolted to know that\u2014once again\u2014Amy was unafraid to get what she wanted in bed. I winked at her, and she smiled wider.\n\nI tried to fix this moment in my mind and appreciate everything that was happening. I had a beautiful woman astride my hips, who was clearly happy to be there. Her pussy slid around my cock, driving a stream of fiery pleasure that flowed throughout my body. I could see the pleasure flow through her body as well, and I could feel the tension in her nipples as they moved under my fingers.\n\nI relaxed as much as I could to allow Amy catch up to me. However, her smile turned wicked as she picked up the pace on my cock, arching her back to grind deeply into me. I felt the signs of a one-way trip to orgasm, so I gave into the sensations. Amy's look changed to satisfaction as she saw that I was lost.\n\nMy skin tingled, my muscles tensed, and I clamped down to prolong the climb. Finally, the pressure was too much, and I crunched up, squeezing my eyes tight as my cock throbbed in sweet agony. Amy slammed down, adding even more pressure to the base of my rod.\n\n\"Oh, God,\" I moaned, and then I grunted with each blast of cum into Amy's clutching pussy. I forgot everything as I emptied into her.\n\nAfter a long while, I opened my eyes. Amy's eyes positively danced back at me\u2014she was immensely pleased with herself. She was also really turned on, and I felt her hips start up again and her fingers busy themselves on her clit. I rolled her nipples between my fingers, and she gasped in pleasure.\n\n\"Yessss,\" she breathed as I increased the pressure. I took the hint, pulling and twisting the hard nubs in time to Amy's motions above me. This time, I got to watch her climb to orgasm. Amy's eyes lost focus, and her fingers sped to a blur on her clit. A blush spread down her chest, and her muscles tensed. She hunkered down, held her breath, and then exploded.\n\n\"Ahhhhhh!\" she wailed, and she jerked and quivered through a powerful orgasm. Her face contorted in concentration as she tried to deal with the forces whirling within her. I watched\u2014fascinated. This girl responds to sex like no one I've ever known.\n\nAmy slowly regained control of herself.\n\n\"Whew,\" she said when she opened her eyes. \"That was really good.\"\n\n\"I think you could tell how good it was for me,\" I remarked back to her.\n\nShe smiled. \"I kind of picked up on that. Glad I could do that to you.\"\n\n\"You're amazing, Amy.\" I pulled her down, and we expressed our thanks to each other with our lips and tongues. I loved feeling Amy so close, and it was hard to let go. We kissed, and smiled, and laughed, and kissed some more.\n\n\"Ready, Eric?\" Amy finally said, looking down at me.\n\n\"I can't stay here forever?\"\n\nAmy laughed and slowly lifted herself off of me. I twitched as my sensitive cock pulled free of her pussy, then she stretched her legs and we collapsed together.\n\n\"I was thinking that we could take a quick shower, and then regain our strength with dinner and some conversation. I'm not quite through with you yet,\" Amy said to me.\n\n\"Sounds wonderful\u2014every bit of it,\" I replied. \"This date is going great so far.\"\n\n\"Yeah, getting laid first is perfect for you men. I'm surprised you're staying for the rest of it.\"\n\n\"Well, you did say I'm getting laid again, so I figure I can act interested in whatever you're talking about for a while at least.\"\n\n\"You better do a good job acting interested, buster.\"\n\n\"Watch me.\" We both laughed.\n\nAmy led me to the bathroom, and we laughed and teased our way through a shower. We got some clothes on, and moved on to the kitchen.\n\n\"Something smells great,\" I said.\n\n\"I guess you didn't notice before.\"\n\n\"Not with a gorgeous, naked woman in front of me. No, I can't say I did.\"\n\n\"Glad I can get your full attention, at least once in a while,\" she drawled. \"Now, would you see to the wine?\"\n\nAmy and I spent a lively evening around her table, laughing and discussing all manner of things. I had always enjoyed her company, but something added a spice this evening. We were more than friends, now. At some point, we got up to clear the table and put things away. We moved to her couch to finish the wine.\n\n\"What?\" Amy asked when she saw me looking at her. Our conversation had paused.\n\n\"I'm having a great time, Amy. You're a lot of fun to be around.\"\n\n\"I bet you say that to all the girls.\"\n\n\"Well, I do. But this time I mean it.\"\n\nAmy grinned, then looked back at me. \"Are you thinking what I'm thinking?\"\n\n\"I'm thinking that we're too far from your bed.\"\n\n\"Exactly,\" she said, getting up and taking my hand. \"Come here,\" she said, pulling me back into the bedroom. \"Why don't we get ready for bed? I have a feeling that we'll be falling asleep after we wear each other out this time.\"\n\n\"Great idea.\"\n\nI got ready and then waited beside her bed, pulling her into my arms. We remained standing, letting our hands roam as we got each other excited.\n\nAmy pulled back for a moment and looked up at me. \"Would you like to try a little sixty-nine, and then maybe finish by pushing into me from behind?\"\n\n\"Uh, I'd love to,\" I croaked, my cock pushing into her leg.\n\nAmy chuckled and pulled me down to the bed. She winked at me as she put a pillow under my head, licking her lips. I watched her athletic body drape across mine, and then I sighed when I felt her soft lips encircle the tip of my cock. I got busy and started kissing around her pussy, already tasting the musk of her arousal.\n\nAmy's skill in giving head matched everything else about her in the bedroom. I could tell that she enjoyed it, and she picked up on every cue that my body gave her. While keeping the pleasure flowing, she worked her magic, teasing and building the tension. I did the same back to her, not letting anything go for too long.\n\n\"You're a wicked man,\" she said, pulling back. \"I'll need you inside me to get any relief.\"\n\n\"That's the plan,\" I said, chuckling.\n\nAmy hopped up and kneeled down on the bed. \"Come and get it.\"\n\nI jumped up and lined myself up behind her. We both groaned when my cock found her entrance, and we pushed deeply into each other.\n\nWe pulled back and pushed again.\n\n\"Harder!\" Amy commanded, looking back at me. I put my hands on her hips and starting pulling her into me, getting a grunt of approval. Her hand snaked back between her legs, and she dropped her head down again to focus on the sensations surging through her body.\n\nHaving drained myself a few hours earlier, I was able to avoid blowing it as I looked down at the incredible woman pushing back into me. Amy stretched before me, her tight back sinuously leading to flaring hips and a perfect ass. I felt its firm contours with each stroke, and the contact rippled outward from my groin, adding to the pleasure radiating from my cock.\n\n\"Oh, yeah!\" Amy encouraged as we found a rhythm and bounced against each other.\n\n\"Amy, you feel incredible!\" I answered, then lost myself in the boundless pleasure of Amy's pussy.\n\nAmy whipped her hair over her back, and I saw that her face was flushed with arousal. Her fingertips tickled my balls as she worked her clit hard. Amy moaned with every thrust, and her passion pulled mine along with it.\n\nFrom deep within, I felt the spark of orgasm flare into a flame. At the same time, I felt Amy's greedy fingers speed into a frenzy. Her moans increased in pitch.\n\n\"I'm close, Eric. Harder!\" Amy rammed into me, and I slammed back in response, determined to give this girl what she wanted.\n\nSeveral crashes later, Amy dug her fingers deep into herself and held them, just pounding back into me.\n\n\"I'm coming!\" she wailed, and convulsed around my cock. I watched the sinews of her shoulders stand out while a deep flush encircled her neck. My excitement soared to watch her cry and thrash through her orgasm.\n\nSuddenly, I was hurled over the edge, hanging in space while an icy incandescence shot out through my limbs.\n\n\"Ahhhh!\" I wailed as my orgasm rushed up to claim me. I fell into sweet relief, blasting my release into Amy's clutching pussy while my body twitched behind her. She pushed back hard into me and held there, amping up the pleasure flowing from my cock.\n\nWe stayed joined together for a long time, occasionally rocking through a spike in the afterglow. I let my hands drift over Amy's legs, back, and ass, feeling the smooth skin as she purred beneath me.\n\nFinally, she spoke. \"Wow. That was fantastic.\"\n\n\"It was the same for me, Amy. You're amazing.\"\n\n\"Thank you, Eric. I really needed that.\"\n\n\"I was more than happy to help. Let me know anytime.\"\n\n\"Always ready to help a girl out?\"\n\nI laughed. \"Yeah, you've got me there.\"\n\n\"Good. I have a lot of needs. You'll be busy. Now, you ready for me to let go of you?\"\n\n\"Not really, but it will have to happened sometime.\"\n\n\"Poor baby. Here goes.\"\n\nI whimpered as my cock slipped free, hearing a chuckle in return. We both stretched out on our backs, sighing in relaxation. I rolled to my side and leaned over Amy.\n\n\"That was a fantastic evening, Amy. I'm glad I stayed for everything.\"\n\n\"So the dinner and conversation were a small price to pay for the great sex?\"\n\n\"No, they were a high price, but the sex was worth it.\"\n\nAmy rolled her eyes. \"Whatever, lover-boy.\"\n\nI leaned in to kiss her, pulling back and changing tone. \"The truth is, I would count myself lucky just to have dinner with you, Amy.\"\n\nHer eyes softened. \"Thanks, Eric.\" She kissed me again, slow and tender. \"I'll dream well tonight.\"\n\n\"Me, too. Good night.\"\n\nAmy turned, and I spooned behind her, drifting off with thoughts of how lucky I really was.\n\nMorning came, and I awoke to fine Amy's sparkling eyes looking into mine.\n\n\"Morning, lover-boy. I hope you didn't think you were done for the night.\"\n\n\"With horny, needy women, I'm never done,\" I answered, drawing her in for a kiss.\n\nI decided to focus on her pleasure this morning, heating her up and then tongue-lashing her pussy until she cried out in orgasm. Amy then pulled me up on top of her, and she locked her ankles over me as we gently rocked together, our tongues deeply twined. I came forcefully, moaning into Amy's mouth. We kissed our way back to earth.\n\n\"What a way to wake up,\" I offered.\n\n\"Pretty good, Eric. My compliments. You have a magic tongue.\"\n\n\"Comes in handy sometimes.\"\n\n\"Keeping needy ladies satisfied?\"\n\n\"Exactly.\"\n\n\"Well, it worked. By the way, I'm impressed.\" Amy's hand snaked around to my ass. \"You spent an entire night with me and never went for my ass. Just like you said in your little speech on the subject.\"\n\n\"You had any doubt?\" I laughed. \"Besides, I know I'm going to get there anyway. What's the rush?\"\n\n\"Pretty confident in yourself, aren't you?\"\n\n\"That's why I worked so hard to have a magic tongue,\" I replied. \"Got to keep you satisfied so I can get what I want.\"\n\n\"And what, pray tell, is that?\"\n\n\"Not so fast. I don't spill all my secrets so easily.\"\n\n\"Ooooh, I so love a challenge,\" Amy whipped back. \"We'll see how long you last.\"\n\nI just winked in reply.\n\nAmy and I got cleaned up and made breakfast together. We took a hike, with plans to meet up again for dinner. After a great dinner, we were walking up from the car. Amy put her hand in mine.\n\n\"Would you like to spend the night again?\"\n\n\"Love to,\" I replied.\n\n\"I think you'll enjoy what I've got planned,\" she said, winking. I figured I would. I was starting to appreciate Amy's bedroom manner. Sometimes she wanted to lead, sometimes she wanted to be led, and often she would respond to whatever waves were coming from me.\n\nAmy let me into her place and escorted me to her guest bathroom. \"You'll find a toothbrush and a few other things there,\" she said.\n\n\"A little advance planning?\" I teased.\n\n\"Never hurts,\" she said lightly. \"Oh, and dress for this evening is very casual. I'll meet you beside the bed?\"\n\n\"Sounds perfect,\" I replied.\n\nI got ready, hung my clothes in her guest closet, and moved to her bedroom. I wondered what she had in mind. My cock figured it was something good, because it jutted out, ready for action.\n\nI sucked in my breath as Amy's body came into view. Her eyes smoldered up at me through lowered brows. Her nipples jutted out on her firm breasts. Her legs gracefully brought her over to me.\n\n\"Glad to see you're excited for me,\" she said, lightly encircling my cock in her hand.\n\n\"How could I not be?\" I replied, drawing her in for a kiss.\n\nWe kissed long and hard, our breath heating up. Amy pulled me down on the bed and threw me a pillow, laughing as she straddled me. I used the pillow to prop up my head so I could reach Amy's pussy, already wet with desire. I felt her lips kiss my cock as I took the first pass with my tongue. After a bit, I let my hands roam and caress her ass.\n\n\"Uh, huh!\" Amy encouraged. She reached under my legs and did the same, as if to say I'll do it if you will.\n\nI grew a little more bold, eventually cupping my fingers over her valley, but not inside. Amy's sighs encouraged me, and she twisted under my hand, trying to get my fingers deeper. Amy had lifted my knees to get better access, and her fingers continued to mimic mine.\n\nFinally, I let a finger briefly drag across her rosebud. Amy jolted in excitement, moaning around my cock and shoving her ass into my hands. She was definitely OK with this. A second later, I felt her finger touch me in the same place. I roamed some more, then let another finger drag, getting another moan. This went on for a while, with Amy getting more and more worked up. She popped off my cock to breathe, and then just used a hand to hold on. I gave her mercy and slid my fingers directly over her ass, caressing the rougher skin.\n\n\"Yessss,\" Amy hissed. I lapped at the moisture flowing from her pussy, as I felt her fingertips lodge at my back door. Amy shifted, and her clit mashed into my tongue. Her breath blew ragged on my cock while her body tensed and trembled.\n\n\"Oh, God, don't stop!\" Amy exclaimed. I took her to the summit, and she jumped off with a wail of release. Her body shook all over me in a monster orgasm. I felt her ass pulse in time to the contractions racing through her pussy, each one accompanied by a groan of relief. I exulted in Amy's extended ride and kept my fingers possessively on her ass while she came back to earth.\n\n\"What happened?\" she said in a shaky voice. \"I came really hard.\"\n\n\"Let's talk later. I want to be inside you now.\"\n\n\"Good idea,\" Amy laughed. She flipped around and sank down onto my pole. \"This what you want?\"\n\n\"Yeah,\" I moaned back.\n\nAmy started grinding her hips over me, a smile on her face. \"Come for me, baby.\"\n\nI did just that, letting her ride me into a fantastic orgasm. Amy had primed me with her reaction to my fingers on her ass, and I came long and hard, letting Amy watch me writhe and moan under her. When I came back, I looked into her eyes.\n\n\"Turned on a bit, were you?\" she asked, her eyes dancing.\n\n\"You could say that. I just had this hot chick come hard all over my face.\"\n\nAmy blushed. \"I'm almost embarrassed by how much that turned me on.\"\n\n\"Well, we're getting closer to 'soul-crashing' territory.\"\n\nAmy laughed, her body setting little shocks along my cock. \"I don't know if I can handle any more. Wow.\"\n\n\"I think there's a little bit of the taboo, and letting yourself go. But a lot of it is just that it feels really good.\"\n\nAmy crouched down to kiss me. \"Really good. Thanks for that.\"\n\n\"Any time.\"\n\nAmy rolled her eyes. \"Duh. You'll be more than happy to get your hands on my ass any time?\"\n\n\"Exactly. You have one grade A, premium ass.\"\n\n\"Anything else grade A?\" Here eyes flashed a challenge.\n\n\"Everything, Amy. Everything.\"\n\n\"That's the right answer, Eric,\" she said softly. She leaned down to kiss me again.\n\nWe got out of bed to wash up and cuddle together for the night. The next morning, we laughed our way through a shower, ate a quick breakfast together, and then I went back to my place to get ready for work.\n\nTuesday evening, we were having dinner together.\n\n\"So, we're both invited to the big party Saturday,\" Amy observed.\n\n\"And you're wondering how we should introduce ourselves?\"\n\n\"Something like that,\" she said, her casual words at odds with the blazing intensity of her eyes.\n\n\"Perhaps we should introduce ourselves as boyfriend and girlfriend,\" I suggested. \"It would provide a cover for us being together so much. People will start to notice our package deal.\"\n\n\"That may make sense, Eric. Think you can play the part?\"\n\n\"It will be a cameo appearance for me, Amy. No problem.\"\n\n\"You say such the prettiest things,\" she replied, coming around to sit in my lap. She stayed there a while, and then we shared her bed.",
        "Saturday arrived, and I drove Amy over to the party. I took her hand as I helped her out of the door.\n\n\"Such the gentleman,\" Amy said, clearly pleased that I was publicly showing affection. I didn't release her hand as we strode to the door, and I kept a firm hold as we walked into the home. You could almost feel the reactions and recalculations as everyone took in our new relationship, telegraphed more forcefully than any statement. Amy positively beamed, and I was having a great time with such a striking creature beside me.\n\nJennifer gave us a long look, cocking an eye at each of us. \"Well, well, well. I can't say I'm surprised. Eric's wild ways appealing to you, Amy?\"\n\n\"He's a complete devil in the kitchen!\" Amy gushed theatrically. \"I'm learning so much!\"\n\n\"I...see,\" Jennifer deadpanned. \"Well, be sure to let me know the high points.\"\n\nI even laughed at that one. Jennifer winked, and then her face got friendly.\n\n\"I think it's great. I like you both, so I'm happy. You apparently even find time to spend with your friends, so it's all good.\"\n\nWe got similar ribbing from everyone else. People were happy for us, and said things like \"about time\" or \"glad you're admitting it.\" We stayed together for a while, and then circulated separately as the evening lengthened. After a while, I made my way back to Amy.\n\n\"Looking for a good time, baby?\"\n\n\"Yeah. Can you help me find one?\" she shot back, to laughs from her circle.\n\n\"I realize that legions of underperforming guys have made you jaded, but I can cure you from that,\" I answered back.\n\n\"Oooooh. I like the challenge in that,\" she said, sliding an arm around my waist. \"I'm sooo jaded,\" she added, rolling her eyes to her friends. There were a lot of giggles.\n\n\"I'll just wait until I don't need words anymore,\" I said, to more giggles from the group.\n\n\"Ladies,\" Amy said, sighing. \"I've got another guy to evaluate. I better get him started. Good night.\"\n\nWe left to a chorus of catcalls. \"Go easy on him!\" \"Grade hard.\" \"You've given so many F's. Cut him a break!\" On our way out the door, I stopped and pulled Amy close, nailing her with a deep kiss in front of everyone. She put her hands around my neck and nailed me back. We left in a blaze of clapping and cheers.\n\n\"So you certainly weren't embarrassed to admit being my boyfriend,\" Amy observed as we walked to the car.\n\n\"Chicks dig the public affection thing. Small price to get under their skirts,\" I answered, looking straight ahead.\n\nAmy snorted. \"Riiiight. But, it's working.\"\n\nI looked over and winked. Amy squeezed my hand.\n\nWe got to her place and Amy pulled me inside.\n\n\"You're doing all the right things, Eric,\" she said, molding her body to mine.\n\n\"I want this boyfriend/girlfriend thing to work,\" I answered, giving her a kiss.\n\nAmy nearly attacked me at that point, getting me rock hard with the waves coming off her body. She pulled back and looked me in the eyes.\n\n\"I really want it to work,\" she breathed.\n\nWe made intense, romantic love that night. Some sort of threshold had been crossed, and we both felt it. Our lips never left each other after she pulled me on top of her, and I felt her orgasm as my own. We slept tangled together, secure in our relationship.\n\n\"Wake up, sleepyhead,\" Amy said the next morning. \"We're going running, and we want to get out before it gets too hot.\"\n\n\"Can't we just make love and count the workout that way?\" I replied sleepily.\n\n\"No reason to make a choice, Eric,\" Amy said reasonably. \"We can do both. You get to dream of my ass on the run.\"\n\n\"That run is sounding better and better. What are you waiting for?\"\n\n\"Whatever, lover boy.\" Amy threw a pillow at me.\n\nWe got going and headed out the door. Amy did look good in her running outfit, and I made a point of \"following\" her whenever we needed to run single file. I heard a chuckle each time.\n\nAs we were cooling down at the end, Amy looked over.\n\n\"So, we definitely need a shower, and perhaps some breakfast. Anything else?\"\n\n\"Yeah,\" I replied. \"No doubt you need to recover after trying to keep up with me. How about a relaxing massage after breakfast?\"\n\n\"Recover your ass,\" Amy shot back. \"But the massage does sound nice. I'll take it.\"\n\n\"Good. Maybe it can be a little more intimate than last time.\"\n\n\"It better be,\" she replied, eyes dancing. \"Now let's get that shower.\"\n\nWe cleaned up and Amy pulled together a great breakfast.\n\n\"Fantastic, Amy,\" I complimented. \"Shall we clear the dishes and get the massage going?\"\n\n\"No,\" Amy answered, getting up. \"Let go straight to the fun part.\"\n\n\"I like your style,\" I laughed, taking her hand.\n\nI got Amy settled on a towel, and spread the oil over her back.\n\n\"Yeah, Eric, that feels great,\" she murmured in a relaxed, easy voice. \"Very nice after a workout.\"\n\n\"Keep relaxing, Amy.\"\n\nShe sank further into torpor as I worked over her back. I kept the pressure firm this time, interested in loosening her muscles from the run before bringing back the tension. Amy followed my lead, staying relaxed as I worked down her legs. I squeezed the vigorous muscles between my fingers, appreciating the effort she invested in her body.\n\nFinally, I moved to her ass, but again kept the pressure firm\u2014not wanting to excite her too quickly.\n\n\"Ummmm,\" she sighed, while I felt her muscles yielding to my hands. I kept this up for a while, then gradually reduced the pressure. She sighed at the change, lightly pushing her ass up into my hands.\n\nAs my touch lightened to a caress, Amy's body heated up, squirming and pushing beneath me. I felt her legs separate, and the first whiff of hot pussy reached my nostrils. I let the tension build until I could feel the frustration in her body. That's when I finally let a finger brush around her anus.\n\n\"Yessss,\" she hissed, hiking her ass up to invite me further. I responded, teasing around the sensitive spot until she was panting under me. Yielding, I brushed over her pucker.\n\n\"Oh, God,\" she moaned. I looked up so see her eyes tightly shut, blotting out everything else to concentrate on what my hands were doing to her.\n\nMy fingers spent more and more time over her most private place, until the point where they never left. Amy's body undulated to the sensations, accompanied by a steady stream of groans and sighs.\n\nMy other hand probed under her hip, and she immediately took the hint, rolling up just enough for me to slide under her. She let out a throaty moan as my fingers found her inflamed and slick pussy.\n\nMy cock lurched when she spread her legs and hiked her hips off the bed, balanced on her chest and knees. I was an ass man, after all, and Amy had her body in the most erotic position possible\u2014completely surrendered to wring the maximum possible pleasure out of my hands.\n\nAfter sawing through her pussy for a while, I slid my fingers up to squeeze and fondle her prominent clit. Amy went wild, pushing and panting her way to the brink of an explosive orgasm.\n\nFinally, her body went rigid, quivering in my hands. I clamped down on her clit, and her orgasm exploded, rippling through her pussy and ass as she sobbed into the sheets. After a long set of aftershocks, I gently slid my hand away from her ravaged clit when she settled on the bed. However, I kept my other fingers possessively on her anus, and she occasionally squirmed into them. After a while, she let out a long sigh.\n\n\"Very nice, Eric,\" she murmured. \"That was incredible, and it still feels safe and warm.\"\n\n\"Your body responds so well,\" I responded in admiration. \"I could play with you all day.\"\n\n\"My body could get used to that!\" she responded. \"At least I know that you're enjoying this too.\"\n\n\"You have no idea, Amy,\" I responded, looking down at my hand caressing her killer ass. \"This is the best.\"\n\nAmy talked to me a little while longer, recounting how my hands had made her cum hard. She didn't seem embarrassed at all about my hand remaining on her ass. On the contrary, she continued to gently rock under my fingers, clearly enjoying the play.\n\n\"As good as this feels, I'd like to return the favor,\" Amy eventually said. \"Why don't you lie down, Eric?\"\n\n\"Gladly,\" I answered.\n\n\"Face up this time,\" she directed. \"I have a plan.\"\n\n\"Uh-oh,\" I responded, getting a laugh as I stretched out beside her.\n\n\"I don't think you need to worry, Eric,\" Amy said as she settled beside me. \"Aren't my plans always good?\"\n\n\"Reminding me that I should just let you take charge?\"\n\n\"Isn't it always better that way?\" Amy said, leaning down to kiss me.\n\n\"It's hard to argue when I'm in bed with a beautiful woman,\" I said as she leaned away again.\n\n\"Especially when she's about to go down on you,\" she added. I groaned as her lips closed over my shaft.\n\nAmy gave an outstanding blowjob, sucking and teasing my cock until I was writhing under her. Her hand caressed my balls, and then travelled between my thighs to encourage me to open up. I did, and Amy slid deeper, massaging my perineum.\n\n\"Yessss,\" I whispered to encourage her. After a while, her hand travelled deeper, ranging closer and closer to my back door.\n\n\"Ahhhhh,\" I groaned as Amy found it. She worked back and forth between my ass and prostate, driving me into a frenzy.\n\n\"I'm going to cum!\" I said in a shaky voice, trying to warn Amy. She responded by sinking even further around me.\n\nI took the hint and just dropped into the moment\u2014Amy's fantastic lips sliding along my shaft along with her hands confidently probing along my ass. An icy heat prickled outward from my groin, and I held the floodgates back as long as possible, going rigid with the effort.\n\nAmy sucked hard, building the pressure until it was unstoppable. I exploded into her mouth, wailing sounds torn from my throat as I quivered beneath her. My orgasm rolled on in a long, satisfying set of blasts, draining the pent-up energy born from feeling Amy's body cum beneath me.\n\nAmy rode with me the entire time. Finally, I relaxed back into the bed, and she gently eased her lips off my cock and her fingers from around my ass.\n\n\"Oh, God, Amy, that was fantastic.\"\n\n\"Glad you liked it,\" she replied, kissing my chest and settling down beside me.\n\n\"You are amazing, you know that?\"\n\nAmy's face lit up. \"Of course, but it's nice to hear from you,\" she said as she leaned into kiss me.\n\nWe finally separated later that evening, and I got a few chores done. Amy was definitely making it harder to keep up with the mundane parts of life\u2014we just fit together so well that the time flew.\n\nNext Friday, Amy met me at the door naked again. I sure liked this girl's style. We kissed and felt each other up just inside the door, and she pulled me into her bedroom. I noticed a bottle of lube on her nightstand, and my cock jolted at the invitation. As Amy got my clothes off, I turned her around and pulled her against me.\n\nAmy groaned as my cock slid up between her cheeks, and she tilted her head back to fasten her lips on mine. My hands found her breasts, the nipples stiff and wanting. Amy's skin sizzled against mine.\n\n\"Damn, girl, you're on fire,\" I said as we caught our breath between kisses.\n\n\"Oh, yeah,\" Amy breathed, grinding her ass even harder into my rod.\n\nWe twined together for a long while, neither in a hurry to break our bond. Finally, Amy started slowly moving toward the bed, pulling me along with her. When she reached the side, she pulled away and arranged herself face-down on the bed, her arms pillowing her head. She reached out and grasped the lube, handing it back toward me.\n\n\"I think it's time to get a little more intimate,\" she stated in a throaty voice.\n\n\"One 'extended intimacy' coming up!\" I said.\n\nAmy's body shook with her laughter. \"Why am I putting up with you again?\" she wondered aloud.\n\n\"Because it feels so good,\" I replied, kneading my hands into the cheeks of her ass.\n\n\"Oh, yeah, that's right,\" she sighed. \"It does feel really good.\"\n\nAmy was already hot and bothered, so I quickly circled around to her anus, getting plenty of encouragement.\n\nI stroked around the puckered bud until Amy was squirming beneath me, her ass pushing into the air. I reached for the lube with my other hand.\n\n\"Thought you'd never get there,\" Amy murmured when she heard the snap of the lid.\n\n\"Everything in due time,\" I replied easily. \"We'll take this at your pace, so focus on the pleasure.\" I took my hand from her ass, watching her pucker grind into the air, and then trailed a stream of lube over my index finger.\n\n\"Ohhhh,\" Amy groaned as my slick finger found her anus again. She pushed impatiently, but I demurred, not wanting to rush this. I circled around, pressing deeper. Amy shifted and pushed her forearms forward, bracing herself to drive into my hand with more force.\n\n\"Feeling good?\" I asked her.\n\n\"Yes, Eric. I need more,\" she directed as her body writhed on the bed.\n\n\"OK, Lady,\" I answered. I pulled my finger away to drizzle a little more lube, then replaced it and gently pushed. Amy groaned in satisfaction. My finger eased into her pucker, and Amy twisted her ass back and forth, trying to get more inside herself. I watched my finger sink past the first knuckle, then I slowly dragged it back, just letting the tip remain inside her.\n\n\"Noooooooooo,\" Amy groaned in frustration, twisting her body even harder.\n\nWhere did this girl come from? I thought to myself. I pushed my finger deeper this time, feeling the hot walls of Amy's rectum. I let my finger follow them, getting a moan of approval. Amy figured out my pattern and didn't complain as I pulled back out again.\n\nWith each stroke, my finger buried itself further into her depths. Finally, I bottomed out.\n\n\"Ohhhhhhh, that feels good,\" Amy gasped, driving herself back to flatten my other fingers over her cheeks. As I pulled back slightly, she rocked forward, then she met my next inward stroke with a strong push into my hand.\n\nWe got into a rhythm, and my cock hardened to a bar of steel to see Amy drive herself into my hand with such abandon. Her body twisted and bucked under me, and her ass clutched around my finger.\n\nI reached under Amy with my other hand to find her clit.\n\n\"Oh, God, yes!\" she exclaimed as my fingers found her folds. Her essence ran freely from the furnace of her pussy. I framed her prominent clit and started lashing it without mercy. Amy went wild, her body wringing every bit of pleasure it could.\n\nWhen Amy started grunting with each thrust, I looked up to see her face pressed into the mattress. My finger continued to pump in and out of her ass, and I felt the tension build in her body. The grunts grew in pitch, and then she pushed back hard. I rammed my finger deep into her and felt her inner muscles begin to throb.\n\nAmy wailed into the mattress as her ass and pussy exploded in my hands. I thrilled to her sphincter pulsing wildly around my finger, matched by contractions in her pussy. There is nothing more beautiful than a woman in orgasm, and I got to watch a great one as Amy's body twitched and shuddered through countless spasms.\n\nWhen Amy started to come down, I slowly withdrew my fingers from her pussy and let her settle on the bed. Then I gently eased my finger out of her ass, getting a whimper as her sphincter closed behind it. Amy turned her head and looked at me.\n\n\"Wow,\" she said, \"that was intense. Maybe soul-crashing,\" she added shyly.\n\n\"It looked pretty damn good from here,\" I said. \"You were beautiful.\"\n\nAmy blushed. \"Beautiful, huh? I guess it makes sense, since you're an ass man.\"\n\n\"True enough. But I think I'm finding someone who's as fond of her ass as I am.\"\n\nAmy blushed even deeper this time. \"It's kind of embarrassing how much I liked that.\"\n\n\"You can always be yourself with me,\" I responded gently.\n\n\"Believe me, I wouldn't be this way with anyone else,\" she emphasized.\n\n\"That's why I'm a lucky guy.\"\n\n\"Better believe it,\" she shot back.\n\n\"Now, would it help to balance the score if you did the same to me?\"\n\nAmy smiled. \"Yeah. That just might.\"\n\n\"I'll be right back.\" I got up and washed my hands in the sink, then grabbed a towel and walked back into the bedroom. Amy was her old self, sitting on the bed with the lube in her hand and an expectant look on her face.\n\nShe guided me down, and proceeded to work my ass over with masterly strokes. When it was time, she mimicked my motions to ease her finger deeply into my ass, and then I twisted beneath her just as she had done. I rose up to give her other hand room, but she wasn't ready yet. After she had tortured me enough, she finally lubed her other hand and slid it around my cock, pumping me to an explosive orgasm. After riding out the aftermath, I settled down on the bed, and she neatly pulled the towel from under me. She took care easing her finger out of my ass.\n\n\"That was pretty hot, Eric. I could feel everything throbbing inside you.\"\n\n\"Yeah, I think it's an important part of a woman's sexual education.\"\n\n\"I see. And what else is important?\" she asked archly.\n\n\"Everything in its proper time,\" I said.\n\n\"What insolence, lecturing a love goddess like me about education. However, I'll let you get away with it, since you're so good in bed. But you better keep it up.\"\n\n\"Believe me, Amy, I intend to.\"\n\n\"Good. Now, I think I'll clean up a bit, and then we can figure out what to do with the rest of the evening.\"\n\nOf course, that was pretty easy. Good food, conversation, and wine, and then another round of fantastic sex. We woke up the next morning and went for a hike, laughing and bantering the whole time. We had always been good at trading wicked barbs, and we got back to Amy's place in a playful mood, laughing at the dust and sweat on our skin.\n\nAmy spun out of my hands when she closed the door and turned to face me. Her eyes danced.\n\n\"I'm feeling a little naughty and mischievous,\" she said. \"Got any ideas?\"\n\nMy cock jerked upward as a picture formed in my mind.\n\n\"Yeah. I think you'll like it.\"\n\n\"Oh, goody, I can't wait,\" she said. \"Am I naked?\"\n\n\"I think exposed may be a better word.\"\n\nHer face took on a wilder look. \"Then I'm starting now.\" She reach down to tug her shirt over her head. I stripped along with her, and soon we stood facing each other.\n\n\"Go get a spare sheet and bring it into your living room,\" I said. Amy arched an eyebrow, then nodded and padded off. I went into her bedroom to grab the lube and met her near the sliding glass doors to her balcony. I pulled the curtains aside, letting light pour into the room. Amy swallowed.\n\n\"Now, I don't think anyone can really see in here, but you never know for sure, do you?\"\n\nShe shook her head, then gasped as I dropped the lube on the floor to help her spread the sheet.\n\n\"Yes, Amy, I'm going to play with your ass. You're going to be on all fours, squirming around my thumb buried deep in your back door while my other fingers play with your pussy. My other hand will be clamping your nipples, and I'll be watching everything, and I mean everything.\"\n\nAmy pulled the sheet tight with me and then came over, crushing herself against my body.\n\n\"Oh, God, I want that,\" she said.\n\nI locked my lips to hers, then slid my hands around her back, ranging up and down her spine. My fingers found her ass, and she moaned her approval. I possessively cupped the firm flesh while Amy dragged her nipples across my chest. I pushed a leg forward, and she immediately straddled it, humping with need. When I felt the wetness of her arousal, I reached up and pushed her shoulders down. Amy didn't need to be told\u2014she sank to her knees and then to her forearms. Her ass stuck invitingly into the air, and I caressed the soft skin, feeling the dark current flow between us. I let my eyes roam over her body, seeing the pucker of her sphincter, the swollen pink of her pussy and her clitoral hood, and then looking over to see her nipples protruding from firm breasts. I finished by studying her face, seeing the lost expression of someone in deep arousal.",
        "My fingers ranged closer and closer to her anus, and Amy sighed when I brushed my thumb across it. My other hand found her breast, and I rolled the fat nipple between my fingers. Amy arched her chest down into my hand, and I increased the pressure, triggering a moan of approval while she pushed her ass into my other hand.\n\nMy thumb now hovered over her sphincter, rubbing and prodding the slightly rough flesh while Amy bucked beneath me. I let my fingers drift down over her slit, and they found her swollen and wet. Time to move this along.\n\nAmy opened her eyes as my fingers left her body, and a small smile played about her mouth as I drizzled lube along my thumb. When I replaced it on her ass, she wiggled her hips to try to get me inside her. I took it very slow, feeling her outer ring open to me. My thumb eased inside a bit and came to rest at her inner ring. I eased back and forth, teasing the ring to open, while my other hand tweaked her nipple again. I looked up at her face, and my cock jolted at the eroticism of seeing her eyes look into mine as I opened her ass.\n\nI took a good look, seeing a mixture of vulnerability, passion, anticipation, and elation flit across her features. I felt her push, and her inner ring relaxed, letting my thumb ease into her. I slowly worked back and forth, while Amy arched her ass into my hand. Still, she looked deeply into my eyes, seeking a window into my thoughts. Her eyes widened in surprise at something in mine, and then she closed them and buried her face into the sheet, purring happily to herself.\n\nMy thumb had worked in to the flare of the second knuckle, and I let my other fingers splay across her ass, giving her another sensation. Still, she kept rocking and pushing back into me, driving my thumb to the root. I watched as it slid in further, her ass stretching to accommodate the fleshy base.\n\n\"Yessss,\" she whispered when she felt my hand press deeply into her ass\u2014my thumb was buried to the hilt in her gut. I followed her motions, drawing partway out as she rocked forward and then driving deeply home when she pushed back. She gave a little grunt each time I bottomed out, clearly lost in the sensations. I watched her experience that for a while, her back arching and twisting beneath me, then I grabbed her nipple again, squeezing hard.\n\n\"Uhhhhhh,\" she moaned, pushing her breast into my hand. Her desire soared higher as I worked her body over, and I could feel her tension build. I watched her nipple stretch as I pulled and twisted.\n\n\"Oh God, oh God, oh God,\" she sobbed into the sheet, wracked by her dark need with no clear way for release. When I felt she couldn't take it anymore, I shifted my fingers to her quivering slit.\n\n\"Ohhhhhhhhh, God,\" she exhaled, her relief evident at finding some way out of her sweet agony.\n\nHer pussy ran freely, juices flowing down her legs. I exulted in how hot this girl had become and slid further behind her to get a better view.\n\nMy fingers massaged the outer lips, pulling away as she arched her back and shoved, trying to get them on her clit. Finally, I relented, sliding around the hard pearl, standing proud from its hood. I kept the pressure gentle at first, but Amy had other ideas, twisting her hips to mash her clit against my fingers. Her moans got shorter and higher in pitch, and I knew she was close to a massive orgasm. I clamped down on her clit, pinching it between my fingers, and she shrieked into the sheet. A few more bucks of her hips, and her body went rigid.\n\nFrom deep within her, I felt the detonation begin. Amy screamed as her pussy and ass clenched around my fingers, and her entire abdomen shook with the force of it. I even felt the waves reach her distended breast, her nipple pulsing in my fingers. Amy's body throbbed for a long spell, and she whimpered and groaned through it, her eyes tightly closed.\n\nEventually, her orgasm played out and her wracking sobs subsided. I slowly eased my thumb out of her ass, but kept it possessively at her entrance. She sighed with fulfillment.\n\n\"If you want my ass, it's yours,\" she said softly. My cock quivered with the assent in those words.\n\n\"Not quite time,\" I replied, \"but believe me, we'll get there. My cock is nearly bursting after watching you go through that. You okay with me pounding into you from behind? I won't last long.\"\n\n\"Please, grab my hips and take your pleasure, Eric,\" she responded.\n\nI lined up behind her and positioned my iron rod at her entrance. She slammed back, impaling herself. I grunted with the sensation of her tight sheath gripping my cock, and I took hold of her hips and drove myself into her, over and over again. Amy stayed right with me, pushing back each time until her ass flattened. Soon, I could feel the pressure build, and I held back as long as I could. When it became to much, I pulled her back tightly against me, smashing her mound against the underside of my cock. My cum surged past in white hot jets, shooting deep in to the depths of her pussy. I grunted with each blast, savoring my release from the tension of watching Amy's erotic display. When the fires died down, I eased out and collapsed on the sheet, pulling Amy down with me. We kissed deeply, then she nestled her head on my chest. We quickly feel asleep.\n\nWaking up after a refreshing nap, I felt like a million bucks. I could feel Amy's heart beating against me, and the world felt totally right.\n\nAmy stirred, and then she gently lifted her head to look into my open eyes. Hers were clear and content.\n\n\"That was...exactly what I needed,\" she said. \"You possessed me completely, yet I could feel how much you cared. Thank you.\"\n\n\"Amy, the thing I like about you best is when you give me a heartfelt thanks for doing something that I was dying to do anyway. You are so welcome.\"\n\nAmy smiled. \"If I'd had any idea what a wicked lover you were, I'd have kidnapped you from Lisa and never let you go. How did I get so lucky?\"\n\n\"I ask myself that every day.\"\n\nAmy's eyes latched on to mine and went deep again. She found what she wanted, for I saw a smile turn up the corners of her lips.\n\n\"You really do,\" she wondered. We looked into each other's eyes for a while longer. Finally, I broke her gaze and pulled her lips to mine for another kiss.\n\n\"Ready to get a shower?\" I asked. \"We're every kind of dirty.\"\n\nAmy laughed. \"You can say that again. Help me up?\"\n\nWe made it into the shower and traded washing duties. As Amy was soaping my backside, her hands wandered until she held my balls. She brought her lips close to my ear.\n\n\"So I have to ask, how were you able to keep from taking my ass when I offered it to you?\"\n\nI laughed. \"I would have come in two strokes if I had done that.\"\n\nAmy laughed back. \"I hadn't thought of that.\"\n\n\"Seriously, though, there's a time and place for that. As you're probably figuring out, a big part of anal sex is wanting it. When you're horribly frustrated, and you want it so bad that you'll do anything to get it, that's the right time. You know it won't hurt, and you know it will cure what ails you. We'll get there, and we'll look into each other's eyes again as you sink down and fill your ass with my cock. Believe me, I want this as much as you do.\"\n\n\"I'm getting horny listening to you. I can't wait,\" Amy said breathlessly. I felt her smile behind me. \"Looks like somebody else can't wait either.\"\n\nWe ended up making love in the shower, Amy pressing me against the wall and taking me inside her. I marveled at her eroticism\u2014vulnerable one instant and insistent the next.\n\nThat evening, we went to dinner with our gang of friends, and hung out at Jackie's house. We got back to Amy's late and went to bed,. I dreamed of Amy all night. The next morning, I woke up to find her looking at me.\n\n\"Penny for your thoughts, sleepyhead.\"\n\n\"You really want to know?\"\n\nHer eyes widened. \"Especially now.\"\n\nI sighed. \"Amy, do you have any idea how erotic that was yesterday? I mean, I know we're working on anal sex together. But, you are beyond volcanic. When you looked at me yesterday as I was playing with your ass, that was about the hottest thing I've ever seen. You tap into some dark current that's wild and untamed, yet vulnerable and intimate. If you told me that you were a sorceress, I'd believe you.\"\n\nAmy looked at me a long time, then smiled. \"But Eric, I am a sorceress.\"\n\n\"I believe you. You've got a magic combination of girl-next-door freshness, smarts, and something wicked. Then you wrap it all inside a package that's extremely easy on the eyes. I guess what I'm trying to say is that I'm under your spell, and I'm a very lucky guy.\"\n\nAmy's eyes held mine. I let her probe. Finally, she smiled again and spoke softly, her words contrasting with the blaze in her eyes. \"If you're trying to get into my pants this morning, you're doing great.\"\n\nI burst out laughing. \"I forgot to add the sense of humor.\"\n\n\"Isn't that what they say about a blind date?\"\n\n\"Yeah. So why don't you fuck me silly, Miss Blind Date?\"\n\nShe rolled her eyes. \"I always fall for the romantic ones,\" she said to herself. Then she jumped on top of me in a flash of intensity, pinning me to the bed and taking charge. I did nothing except respond as she warmed me up and proceeded to fuck the daylights out of me. I highly recommend it.\n\nWe recovered with her remaining on top of me, her disheveled hair cascading across my chest.\n\n\"Feel free to tell me how lucky you are anytime, Eric.\"\n\n\"Hmmmm, I think I've discovered a spell over you.\"\n\n\"Oh, yeah, and I'm helpless against it.\" I could feel her smile on my skin.\n\n****************************\n\nTuesday evening found us talking on the phone.\n\n\"Thursday is going to be a rough day,\" she told me. \"We have a review with a major client, who is very demanding. We've been preparing for a couple of weeks, but we expect to be put through the wringer. I'll be a stressed-out zombie when I get home.\"\n\n\"I've got an idea that will make you forget about silly things like what your client thinks. Interested?\"\n\n\"Let me guess. It involves me naked?\"\n\n\"Surprisingly enough, it does.\"\n\n\"Well of course I'm interested!\"\n\n\"When you get home, give me a call. Then hop in the shower and scrub your naughty bits really good. I'll let myself in with this handy key you gave me,\" I instructed.\n\n\"Thursday isn't sounding so bad, after all.\"\n\n\"That's the spirit! Now, get your sleep, and knock 'em dead.\"\n\nAfter work Thursday, my phone rang.\n\n\"It was brutal, but we made it through OK. And it really helped to have your little mystery to look forward to. I'm hopping in the shower now.\"\n\nI gave her a couple of minutes and let myself in, going to her bedroom and lighting several candles that I brought. I uncorked a bottle of wine and poured a couple of glasses, put a French country stew on her stove, got the salad in the fridge, then stripped down and wrapped a towel around my waist.\n\nSoon, I heard the water stop, and Amy emerged a little later, a towel wrapped around her.\n\n\"Oh my, I like,\" she said, as she took in the candles and the glass of wine I was handing her.\n\n\"Good. Now sit down beside me and tell me about your day.\"\n\nAmy really did have a hard day. As she finished her glass, I took it from her, then got behind her on the bed and started massaging her shoulders and neck as she continued her story. Eventually, I came around and stood her up.\n\n\"Keep talking,\" I instructed.\n\nI responded to her, but whenever I wasn't talking, I trailed kisses across her body. I started at the back of her neck, dipping down between her shoulders. I covered her arms, then gently eased the towel from around her and continued down her back.\n\n\"It's going to be hard to finish telling you this story,\" she said after a sigh.\n\n\"That's the idea. Keep going.\"\n\nI let my hands tease her nipples as I worked down her back. I kissed briefly down one cheek of her ass, then started working on the backs of her legs. In front, my hands mirrored what my lips were doing in back. I could feel Amy getting distracted. The sighs came more and more, and she shifted her weight between her legs. I moved up, kissing lightly across both ass cheeks.\n\n\"Ahhhh, that feels good. I think you've got the gist of the story,\" she said.\n\n\"Are you sure? I don't want to miss anything.\"\n\n\"Well, you're not missing anything so far,\" she said, wiggling her ass in my face.\n\n\"Tell me a little more. What happens the next time you meet this client?\"\n\nI smiled to myself as I listened to Amy trying to focus. My lips circled closer and closer to her rosebud. I heard little sighs mixed in with her narrative, and she gave a pretty short answer.\n\n\"Sounds like you're relaxing pretty well, but I want to be sure. Why don't you get up here on the bed?\" I helped her up and got her on all fours. \"Here's a pillow for your head.\"\n\n\"Such a gentleman,\" she laughed, resting her head and arching her back.\n\n\"Now,\" I continued, \"I'm trying to relax you, but knowing you, you may start getting hot and bothered. Please feel comfortable to take care of any little problems you may have in that regard.\"\n\n\"Don't worry.\"\n\n\"Great.\" I moved back behind her. \"Now, where were we? Oh, yes, kissing your wonderful ass.\"\n\nI started over, working slowly toward her center. Amy's breathing picked up, and the scent of her arousal reached me.\n\n\"Ohhh, God,\" she moaned when I first touch her anus with my tongue. Slowly, agonizingly, I touched it more often, watching as her ass started writhing in the air.\n\nFinally, I gave her what she wanted, lapping deeply across her pucker. I felt her hand slide between her legs to start playing with herself. I alternated deep strokes with lighter journeys around her rim.\n\nAmy started pushing into my face, and I flattened my tongue to let her find the pressure she wanted. Her hand moved faster and faster, and I could hear the wet sounds of her pussy getting pummeled.\n\nI felt the familiar tingle of her body tensing for a big orgasm. She twisted her ass into my tongue, completely given over to the pleasure coursing through her body.\n\nAmy's breath came in grunts and gasps, then she went rigid, shrieking into the pillow as the convulsions rippled through her pussy and ass. My tongue was treated to a front-row seat, and it picked up every tremor.\n\nI stayed with her as her orgasm died down. Then she whipped her head around.\n\n\"Inside me. Now!\" Amy commanded, her fingers guiding me. Her hands never left her clit as I stroked into her, and she came shortly after I blasted a very satisfying load inside her.\n\nWe finished coming back to earth, and I lay down beside her on the bed.\n\n\"Pretty kinky, Eric,\" she said. \"You definitely made me forget all about my day.\"\n\n\"It was my pleasure. Actually, I had a lot of fun. I love your ass.\"\n\n\"I can tell. I guess if I ever tell you to kiss my ass, you'll wonder what I mean.\"\n\n\"No I won't,\" I said.\n\nAmy laughed her rich laugh. \"No, I guess you won't.\" She turned to hug me. \"I loved it. I'm glad my ass turns you on.\"\n\n\"Big time. Now, shall we try out some dinner?\"\n\n\"I was hoping that I was smelling something good. I'll have to admit that I didn't notice until recently.\"\n\n\"Glad to hear it. Come on.\" I led her out of bed, and we got dressed and padded into the kitchen, bringing the bottle of wine with us.\n\nOnce again, I enjoyed a great dinner with Amy. As we were lingering over the last glass of wine, she fixed me with her eyes.\n\n\"Eric, I want to say how much I appreciate what you're doing for me. You're taking me to places I didn't know existed, and I'm loving what I'm finding there.\"\n\n\"Amy, I can't tell you how much fun I'm having taking you to those places.\"\n\n\"I can see it in your eyes. But there's something more. You know I've been a fan of yours for a while. What I didn't understand was how much the real thing surpasses my dream.\"\n\nIt's almost hard to accept a powerful compliment like that. I sat back, stunned. Then, I acted with my body when the words wouldn't come. I got up and took Amy's hand, then pulled her up for a long hug. When we separated, I got my tongue back into gear.\n\n\"Amy, that made me feel really good. I'm a really lucky guy.\"\n\n\"You bet your boots you are,\" she responded. \"But I'm a really lucky girl, too.\"\n\nAs you might guess, our mutual admiration society got us all hot and bothered. We made love again that evening, and I stumbled out of Amy's bed early the next morning to get back to my place and start my day.\n\nWe spent Friday out with friends, then went to dinner Saturday with a few more.\n\n\"Care to spend the night?\" Amy asked as I was driving us back.\n\n\"Hard to pass up that offer,\" I answered, my dick hardening in my pants.\n\n\"Would you be interested in letting me direct our recreational activities this evening?\"\n\n\"I could go for that,\" I answered, my dick getting even harder. \"What do you have planned?\"\n\n\"Uh, uh, naughty boy. That would ruin the fun, wouldn't it?\"\n\n\"Okay, Lady, I'll let you keep the mystery.\"\n\nWe got back to Amy's place and she led me inside.\n\n\"Do you trust me, Eric?\" she asked, a smile on her face that was right out of a second-grade playground.\n\n\"Yes, but answering a question like that always leaves me a little worried.\"\n\nAmy batted her eyes. \"Worried about sweet little me?\"\n\n\"Now I'm definitely worried!\" I answered, to a laugh from Amy. \"However, I'll trust you.\"\n\n\"Good, you won't regret it. Now, could I ask you to close your eyes?\"\n\nI closed them, my other senses instantly heightening. I strained to hear Amy move, but could pick up nothing. Finally, I hear the soft padding of feet away from me, then coming back behind me. I jumped when I felt the blindfold slide over my eyes. Amy tied it gently, then took my hand and led me down the hall. We entered a room, but it didn't feel like her bedroom. Amy's hands came around my front to unbutton my shirt, then gently ease it from my shoulders. My shoes and socks were removed, then Amy got my pants off. It took a little more work for her to guide the waistband of my boxers over my rampant erection. Her game was turning me on.\n\nAmy took my hand and guided me to the bed, arranging me on my back, with my head comfortably on a pillow. I felt a rustling to one side, and a soft material was looped over my right wrist. My cock strained even harder as I heard Amy walk around the bed and loop another band over my left. I remained still as I heard and felt her do the same to my ankles.\n\n\"Very good, Eric. You do really trust me, and I can't tell you how good that makes me feel. Why don't you try your bonds? Wouldn't want to spoil the fun if they aren't working right.\"\n\nI moved my arms and legs, finding I could move each a couple of inches.\n\n\"Hey!\" I yelped, as Amy's hands tickled me. I tried to roll away, or do anything, but it was useless.\n\n\"Now I'm satisfied,\" she said, relenting. \"Kind of fun to have you at my mercy.\"\n\n\"What was I saying about being worried?\"\n\n\"I like you a little worried,\" she said, giggling.\n\nI sensed Amy padding around the room to several destinations, and then I felt her climb onto the bed with me and reach forward. Surprisingly, I felt her pull the blindfold off, but I was even more shocked to discover that I couldn't see anything.\n\n\"Yes, Eric, it's pitch black in here. I wanted to see how our other senses were heightened when we couldn't use our eyes. Your senses will be especially heightened since you can't use your limbs. You've been leading me to some great places lately, but I'm the type of girl who likes to keep the score even. My turn to take you on a journey.\"\n\n\"Lead on, Amy,\" I said. \"I'm yours.\"\n\n\"That's why I like you,\" she whispered as I felt her leaning down.\n\nMy lips felt the softest touch imaginable. My nerve endings danced, straining for more, as she ever so lightly brushed her lips against mine. Then I felt her trail kisses over my face and neck, an electric buzz crackling off my skin wherever she touched.",
        "\"Oh, God,\" I groaned.\n\n\"You're trembling,\" she whispered.\n\n\"I can't believe what you're doing to me,\" I whispered back.\n\n\"Believe it,\" she answered, and then I felt her hands lightly brush along my arms. Thrills raced through my body as Amy traced over my bonds and then my hands. She worked her way back to my chest, and then I felt her lean down again.\n\n\"Fuck!\" I jerked against my restraints as her tongue touched my nipple. I felt Amy chuckle as she gently, agonizingly, worked her magic over both of them. I didn't know how much more of this exquisite torture I could take.\n\nIt was then that I felt her tongue descend down my abdomen. I twitched and shuddered under her attentions\u2014every inch of my skin crackled with anticipation. My cock strained like it would burst.\n\nFinally, Amy worked her way to my groin. She gently blew a breath at my cock, and I jumped to feel icy fire shoot out from my hypersensitive skin.\n\n\"Jesus, Amy!\" I gasped.\n\nShe ignored me, touching the tip of my cock with her tongue. I bucked and writhed at my restraints, even though I knew it was hopeless. She blew again, and I trembled from the chill at the tip of my cock.\n\nFor what seemed an eternity, Amy teased me mercilessly. She was everywhere, and she was nowhere. My superheated cock would have smoked if it could. Licks, breaths, kisses, and touches\u2014Amy kept me guessing.\n\nThen I felt her moving around on the bed, and I sensed that she was leaning over me. A hard nub just grazed my lips, and I got the hint, gently opening them to explore Amy's nipple. Without my other senses, it was a revelation. The skin was soft yet hard underneath, with little bumps and texture along the length of her nipple. I also felt the little bumps of her areola, and beneath, the tightness of her breast. I could hear Amy's gentle breath as she held herself still for me, helping me know her in a completely new way. I marveled at how much this woman could express with her body.\n\nAmy gave me a long time to play, and then I felt her nipple withdraw while she shifted again, the weight of her thighs settling on either side of my face. My nostrils were flooded with the scent of hot pussy, and I waited while she settled down. Like her nipple, her pussy lightly brushed my lips, and I gently explored the folds of her pussy with all the nerve endings at my disposal. I felt her outer lips, swollen and hot, quivering slightly as I touched along them. Next, I moved to the inner lips, softer and flushed with heat and moisture. I finally let my tongue explore, feeling everything anew. Satisfied for now, I licked with more force, turning from exploring to pleasuring. Amy's soft sighs told me I was doing it right, and I felt her teasing my cock again.\n\nAfter a while, Amy pulled away and pushed her hips back. I closed my mouth and once again felt a light touch at my lips. This time, it was her upper pussy, and I explored how the inner lips converged at a little hood. I could feel the tension in Amy's thighs as she held herself back\u2014no doubt she wanted to ram her clit down on my lips. I probed around the hood and then felt underneath. Amy gasped in spite of herself, and I thought I felt the little pearl of her clit, but it was hard to be sure. I kissed and nibbled in this spot, and Amy started to writhe above me. Finally getting my tongue involved, I gently swirled around her hood, patiently letting the tension build. Amy played along, never mashing herself against me.\n\nAmy's pleasure built higher and higher, and I could finally be sure that her clit was standing proud. I swirled around it with my tongue, gently lashing it from all sides.\n\n\"Oh, God,\" Amy moaned. My cock could feel her ragged breathing.\n\nHer pussy was a wet furnace, dripping onto my chin. My nose was flooded with the hot tang of her arousal. Her thighs quivered with the strain.\n\nSensing the time was right, I ever-so-gently sucked her clit between my lips.\n\n\"Ahhhhh!\" she gasped. I pursed my lips and let her drag the little pearl out between them. I opened them again, and she got the rhythm, driving her clit in again as I sucked.\n\nFrom Amy's incoherent grunts and gasps, I could tell that she had lost all conception of anything but the feeling of her clit dragging through my lips. Her pitch got higher, and I knew that she was bracing for a huge orgasm.\n\nSuddenly, she went rigid, just holding her pussy above me. I could hear the strain in the rapid whimpers coming from her throat. I sucked in her clit as deep as I could and held on.\n\nThe first spasm raced through her body, clenching all her muscles even harder than they already were. I heard her cry as the relaxation wave passed through, then the next contraction came even stronger. Her pussy and clit pulsed in time, and my sensitive lips captured it all. On and on it went, Amy screaming with pleasure so hot it was nearly pain.\n\nAs the contractions lessened in intensity, I gently relaxed my pressure on her clit, knowing it was hypersensitive. Amy was nearly sobbing above me. I involuntarily flailed against my bonds, wanting to hold her through the comedown.\n\nAs it was, I just gently massaged around her inner lips with my lips and tongue, keeping the good feelings rolling while she settled through the afterglow.\n\nFinally, I felt her pull a deep breath in and then exhale in a long sigh.\n\n\"I don't even know what happened there,\" she murmured. \"That was so intense, it was frightening.\"\n\nI just nodded under her, and she jumped, giggling at the contact.\n\nThen I jumped when she plunged her lips down over my cock. She laughed, back in control. Her hips quickly spun away, and felt their weight settle down astride mine.\n\nGentle fingers positioned my straining cock, and then I felt the head enter her slick tunnel. I waited for her to sink down around me.\n\nShe didn't. Instead, she gently rocked above me, bathing the head of my cock in liquid fire. I squirmed under her, trying to get more inside her. Even though I couldn't see anything, I could positively feel her smile radiating down at me. I knew she was loving this\u2014my pleasure depended completely on her.\n\nThen the bitch found my nipples with her fingers. Gently caressing, lightly rasping, she sent jolts of current out through my chest. Coupled with the sweet agony burning the head of my cock, she had me quivering under her.\n\n\"Amy!\" I croaked pathetically.\n\nShe ignored me. She was a wicked sorceress, playing my body like some demon musical instrument. Suddenly it hit me with icy clarity\u2014Amy was sharing her secret mysteries with me. Something primal and elemental flowed from her, a dark power that shot into my body.\n\nI gave myself to her, and let my body respond in kind. Something flowed from me back to her, a recognition of her dark side and the answering shout from mine.\n\nWe both gasped at the connection. To open yourself to another, and then to find what you've always dreamed of; well, that doesn't happen very often.\n\nAmy slammed down, engulfing my cock in her fiery tunnel. One hand went to my abdomen, tickling me to distract me from the exquisite pleasure radiating from my cock. I knew where the other hand was going.\n\nAmy rocked her hips hard, pumping my cock in liquid velvet. Her fingers strummed her clit, taking herself along with me. I thrashed and writhed under her, trying desperately to get away from her tickling fingers and trying desperately to stay with them. I didn't know where torture ended and pleasure began anymore. It didn't matter.\n\nIn that darkened room, my senses focused down to two things: Amy's touch everywhere on my body, and then a sixth sense of energy flowing between us. I plunged in, following that twisting, pulsing channel back to its source in the dark recesses of Amy's being.\n\nA sense of incandescence flowed through me. It was no longer my cock, but my entire body that burned under Amy's torch. I rose with it, and then a white-hot wave convulsed through me. I yelled out as another took me, a feeling of mindless rapture filling my entire being. Through our connection, I could feel something similar coursing through Amy.\n\nThen, I ceased to exist.\n\nLater, I was aware that waves of ecstatic pleasure had rolled through me, and that Amy had cried out with the same. At the time, there were no words for what happened, or for long it went on.\n\nI finally regained awareness of myself, and I felt the aftershocks quaking through me and the full weight of Amy's hips resting on mine. Then I felt it\u2014the connection was still there. Not as hot or bright as before, but still linking us\u2014smoldering and ready to leap to flame again.\n\nOther sensations came through to me: Amy's breathing, slow and steady as she recovered. Her hands, pressed deeply into my chest as she supported her weight. My cock, still secure inside her.\n\nWe stayed together like this for an extended time. Neither of us wanted to break the spell.\n\nFinally, Amy sighed deeply.\n\nI decided to speak first. \"Amy, I don't exactly know what happened, but I'll never be the same again.\"\n\n\"We'll never be the same again. It hit me, too, and it definitely hit us.\"\n\n\"Who are you?\" I wondered aloud. \"Good, friendly, and cute, but also dark, mysterious, and wicked. How did I get so lucky to meet you?\"\n\n\"I think you're meeting the person you've let me become,\" she answered. \"I've never even thought about letting anyone see that before.\"\n\n\"I hope I get to see it many more times,\" I said. \"I'm just in awe. You are a sorceress.\"\n\n\"And I cast my dark spell on you, Eric,\" she said, her voice clear and blazing. I felt our connection leap again.\n\nAmy let that linger, then she leaned down and crushed her lips to mine.\n\nFinally, I felt her ease her hips up and slowly let go of my cock. She paused at the head, and slowed even more, lessening the shock of her lips passing by. I still twitched, but I appreciated her thoughtfulness.\n\nShe moved off the bed, and I felt my restraints being released one by one. Then she came back, and nestled at my side. I rolled toward her and spooned into her back. She grabbed my arm and pressed it deep to her chest, sighing contentedly. Without sight, my other senses were still sharpened. I could feel her heart beating, slow and satisfied. I feel asleep with our connection still intact.\n\nWe woke after a restful night, still tangled together. Faint motes of light leaked through the dark covering that Amy had on the windows.\n\n\"Mmmmmmm,\" she purred, nestling further into me.\n\nI held her, feeling her contentment flow across to me.\n\n\"I could stay here forever,\" she said aloud.\n\n\"So could I,\" I answered. \"Do you feel it like I do?\"\n\n\"Yes,\" she said, \"But I want you to tell me what you feel.\"\n\n\"It's like I have a channel of spiritual energy connected to you, Amy. It's gentle right now, but it burned hot and bright while we were making love.\"\n\n\"That's it,\" she said. \"I think it's the connection that our secret sides made with each other.\"\n\n\"Yeah, you're right. It's like I know your true colors, Amy, and they go with mine.\"\n\n\"I've never dared to share them with anyone before,\" Amy said. \"I'm so happy I did with you.\"\n\n\"From sorceress to innocent little girl,\" I mused. \"You are all those things.\"\n\n\"And do you like it?\"\n\n\"No, I love it,\" I said and gave her a long squeeze.\n\n\"So do I,\" she breathed and snuggled back again.\n\nI nestled against her and let my hand roam over her legs and hips. It wasn't sexual this time\u2014we had burned that away for now. Instead we just existed, and let our skin express our connection.\n\nEventually, my stomach rumbled, and Amy giggled.\n\n\"I'm glad I didn't do that first,\" she said, laughing. \"I guess we'll have to get up and get something to eat.\"\n\n\"Let's do it.\"\n\nWe slowly got up, and Amy led me to the door. Before opening it, she took both of my hands.\n\n\"Remember what happened here,\" she commanded, her voice blazing again.\n\n\"I swear I will never forget,\" I said formally, the words ringing true between us.\n\n\"I release you,\" she finished, leaving me to wonder what was she releasing me from. It sure wasn't the dark spell she cast over me\u2014I could still feel that. I knew she wanted me to wonder.\n\nShe pulled the door slowly open to let our eyes adjust. Sunlight streamed through her place\u2014we had slept late.\n\nShe handed me a robe, taking one for herself. \"Let me get you some breakfast,\" she said.\n\n\"Those were strategically placed,\" I said. \"Had all this planned out?\"\n\nShe looked up, a grin on her face. \"Eric. What happened\u2014you don't plan that.\"\n\nI laughed, deep and long. \"No, I guess you don't. But some part of you did.\"\n\n\"Are you so sure it was me?\" she asked, her blue eyes flashing.\n\nShe spun around and was striding to the bathroom before I could answer. Her question hit me like a thunderbolt, throwing my mind into disarray. What had happened last night? What had she started, and what had I started? Would I ever know? I realized that there was a lot behind those blue eyes of Amy's.\n\nWe cooked and ate breakfast together, Amy steering the conversation away from the night before. We got dressed, and then she saw me to the door. She looked deeply into my eyes.\n\n\"Spend some time with your heart, Eric. I'm going to spend some time with mine.\" She kissed me, and gently pushed me out the door. \"Call me.\"\n\nI stumbled back to my place and got dressed for a long bike ride. Nothing like physical work to clear the head. I pushed out and took about thirty minutes to get into a rhythm, my muscles warmed up and the energy flowing.\n\nI then sank into my heart, sensing it pumping life through me. I opened myself to my feelings about Amy. The first was a wall of fear\u2014fear that I would lose myself in her and fear that I could be deeply hurt. I explored my fear, knowing that I had to honor it to move past it. Amy must mean a lot to me for me to be this worried, I thought to myself. I pushed past and explored deeper.\n\nThe next feeling was fear again\u2014fear that I was falling for Amy sexually, but not completely. I felt deeper into my heart and knew this wasn't true. I loved being around her for herself.\n\nAs I explored deeper, it hit me with force. I wanted to share my heart with Amy, and I couldn't live without her. I was already lost, and the only path was to double down and get closer to her. So much had happened so fast\u2014but it felt so right.\n\nI explored that for a while. Did I feel any doubt? Was there some hidden warning signal in my heart?\n\nNo, you idiot. She's the one for you.\n\n\"Thanks,\" I said aloud, chuckling at myself. \"Glad that's settled.\"\n\nAnd it was\u2014I could feel that deeply. I rode with that feeling for a while.\n\nWith such minor things settled as who I wanted to spend my life with, I could move on to other subjects, like what the hell happened last night. Clearly, Amy wanted to even the score a little. I had been the lead for most of our relationship, and she wanted to turn the tables and take me on a journey. Of course, she nearly lost control when I was lashing her clit. Funny how I was the one tied up, but I had her under my spell.\n\nUnder my spell. Maybe that's what she meant when she implied that I had started it last night. Maybe she was responding when she cast her spell on me. Whatever she was doing, she outdid herself.\n\nOn the other hand, as I searched my heart, I could feel that she had been working her spell on me for a long time\u2014at least since the day of our party together\u2014and probably much earlier. She had put a lot on the line to bare her soul to me last night. I could still feel the connection to her\u2014something I had never shared with anyone before.\n\nI stopped thinking and just rode home in a sea of feelings and emotions\u2014all good, but also frightening in their intensity.\n\nThat evening, I called her.\n\n\"Nice to hear your voice,\" Amy said. \"What did you do all afternoon?\"\n\n\"Exactly what you said. I took a long bike ride and spent some time with my heart.\"\n\n\"And did you learn anything?\"\n\n\"Yes. Quite a bit, in fact.\"\n\n\"Anything you'd care to share?\" Her voice was light and friendly, but I could sense her listening intently.\n\n\"It was pretty powerful stuff, Amy.\"\n\n\"Just so you know, I spent the afternoon with some powerful stuff of my own.\"\n\nI knew that she wanted\u2014no she needed\u2014for me to go first in this little game. And the stakes were high. Double down.\n\n\"The first thing I felt, Amy, was a wall of fear. Fear that I was losing myself, and that I could be deeply hurt.\"\n\nHer voice got very soft. \"We have to put great trust in those we care about. It means a lot that you're putting that trust in me.\"\n\n\"I do trust you, Amy. And I pushed past that fear. But the next thing was another form of fear. This time, about me. Could I be sure that I wasn't just falling for you sexually? I mean, I had to admit, the sexual part has been pretty awesome.\"\n\nAmy's lilting laugh came through the phone. \"That's an understatement, and I appreciate the underlying complement. What did your heart tell you?\"\n\n\"Not to worry. I was falling for the complete package, for all the right reasons.\"\n\n\"I...you...thanks.\" Amy's voice was thick with emotion.\n\n\"One more thing that I'll talk about tonight. I asked my heart if there was some doubt, some warning signal, that I should know about.\"\n\n\"And?\"\n\n\"Nothing.\"\n\n\"Eric.\" I could feel the quiver in her voice. The line got real quiet. \"Eric\u2014just so you know\u2014my heart is very happy right now.\"\n\nI could feel her holding back the sobs. \"Amy, why don't you share your heart next time? I think we've had a big day and it's probably time for some sleep.\"\n\n\"Thanks, Eric,\" she whispered. \"No...Thanks. Good night.\"\n\n\"Good night, Amy,\" I answered and cut the connection. She needed the time to herself.\n\nThe next morning, I had a message on my phone.\n\n\"Can I cook you dinner?\"\n\nEasy three-letter answer.\n\nI stopped by the florist and arrived at Amy's door with some flowers. She literally dragged me through the door and crushed me in an embrace. Her words came in a rush.\n\n\"Eric. You need to know. My heart feels exactly like yours. What you said\u2014it was so much more than anyone has ever said to me. Do you know how happy I am?\"\n\n\"It just felt right.\"\n\nAt that, she burst into sobs. My tears followed hers.\n\n\"I promised myself that I wouldn't cry,\" she wailed into my shoulder.\n\n\"Amy. You can always be yourself with me.\" I hugged her tight.\n\nWe eventually disentangled, shyly laughing at each other's red-rimmed eyes. Amy led me to a chair and served me a great dinner, her eyes sparkling each time I caught them. It didn't take much insight to see that she was floating on a cloud. I floated with her, barely aware of what we talked about.\n\nWhen we finished, I thanked her and then I rose to help her clear the plates.\n\n\"No,\" she commanded. \"I'm serving you tonight. Your job is to talk to me while I get this put away.\"\n\nAmy finished cleaning up and came back to me, offering me her hand. She lifted me up and kissed me, then pulled me down the hall and shooed me into the bathroom.\n\n\"Meet me in my bedroom in a few minutes. Don't wear too much,\" she directed. I cleaned up, taking my time, then undressed. I walked back to Amy's bedroom to find it lit with several candles. Amy stood by her bed and beckoned me over.\n\nShe slid into my arms. I felt the smooth skin of her back as she kissed me. We shared the pleasures of each other's lips, and then Amy gently pushed me back onto the bed. I lay back while she straddled me and led me through an evening of romantic lovemaking. My main memories were of her eyes, looking deeply into mine as she gently rocked above me, and the smile that played about her face. We never broke eye contact, even as we each twitched in orgasm.\n\nWe lay together and talked, then Amy started kissing me again. She eventually turned and straddled my face, leading us through a 69 session that got us both hot and bothered. This time, she lay back and pulled me atop her, and we kissed deeply while we slowly built to another satisfying climax.",
        "\"Thank you for spending the evening with me,\" Amy said as we recovered. \"I enjoyed getting to look into your eyes the first time, and then feeling your tongue in my mouth the second.\"\n\n\"Any time, Amy,\" I replied. \"I'll do it above, I'll do it below, I'll do it behind, and I'll do it real slow.\"\n\n\"And you'll do it in my house, and you'd probably do it with a mouse,\" Amy observed drily. \"I'd better get these candles out before I have to listen to much more comedy central.\"\n\nWhen she got back in bed, I pulled her close.\n\n\"Amy. Thank you so much for having me over. You're pretty special, and it's great that your heart is falling for a comedian.\"\n\n\"I wish I could help myself, but I can't,\" Amy said as she snuggled further into my arms.\n\nI gently stroked her back until she settled into sleep, and then I followed her.\n\nWe gave each other a few nights off after all the emotion that had spilled over the last several days. However, I had invited Amy to dinner with a group of friends Friday.\n\n\"Only if you agree to come back to my place for a nightcap,\" she had offered.\n\n\"I think I can do that,\" I said.\n\nJennifer, with her usual intuition, cornered us at the bar before dinner.\n\n\"You two look like you're on a cloud. Things must be going really well between you.\"\n\nAmy looked down, a blush creeping up her cheeks. I could feel my face getting warm.\n\n\"Now, you've told me everything,\" Jennifer said. \"I'll be merciful and leave you alone, Amy. And you, Eric, I trust you're taking care of her?\"\n\nAmy and I both laughed\u2014a bit nervously.\n\n\"Oh, my, you two are lost. I could ask more questions, but I think I already know the answers.\" Jennifer's face broke out into a smile. \"I can't tell you how happy I am for you both. Now, let's steer the conversation to safer subjects.\"\n\n\"Great idea,\" I croaked out. Jennifer winked.\n\nWe got through dinner without any more awkward moments. We walked up from the car with our fingers intertwined.\n\n\"Still want that nightcap?\" Amy asked.\n\n\"Anything at your place would be great,\" I answered.\n\n\"Anything?\"\n\n\"You bet, girlfriend.\"\n\nAmy rolled her eyes and pulled me through her door. She locked it behind her and turned to me.\n\n\"Can I be your nightcap?\"\n\n\"I'd love that, Amy.\"\n\nShe laughed and closed the distance between us. Her soft lips found mine, and we forgot our banter. Her body smoked in my arms, her breath hot and her lips insistent.\n\nFinally, Amy pulled back to look at me. She took each of my hands and drew them behind her to rest on her ass, which squirmed against them.\n\n\"Eric. What did you say about being terribly horny and frustrated? I'm feeling that now.\"\n\n\"You mean..?\"\n\n\"Yes, you know exactly what I mean.\"\n\n\"Let's take it slow,\" I said gingerly.\n\n\"But don't be too cautious,\" she said. \"I want this.\"\n\n\"Need it bad?\" I teased.\n\n\"You have no idea,\" she whispered. She closed the distance between our lips and kissed me fiercely. My cock stiffened to steel in my pants as she ground into me. My hands ranged up and down her back as she heated up. I only occasionally strayed down to her ass, teasing her mercilessly.\n\n\"I want out of these clothes,\" she breathed. I helped her undress everything, noticing the excitement in her taut nipples. She helped me undress, and then I pulled her back into my arms, continuing my gentle caressing of her back.\n\nI could feel the tension building in her body, so before she got too frustrated, I spun her around and pulled her back into me.\n\n\"God, yes!\" she moaned as my cock found the cleft between the cheeks of her ass. My hands rose to find her straining breasts as she shoved her ass back into me. Her head lolled back when I palmed her breasts, closing my fingers to pull and twist her nipples. I started a bit gentle, but increased the pressure in time to her whimpers of assent. Amy shoved her ass deeply into my cock, and I tweaked her nipples hard.\n\n\"Eric, I'm on fire! Pleasssse,\" she begged.\n\n\"Let's get to your bed,\" I directed.\n\nAmy grabbed my hand and literally dragged me to her bed. She snatched the covers and threw them back, heedless of where they landed. Still holding my hand, she opened her nightstand and pulled out a bottle of lube, handing it back to me. She let go and then stretched out face down on the bed, spreading her legs slightly and hiking her ass up into the air. I took a moment to drink in the sight: a beautiful woman, horny beyond belief, spread out before me, waiting expectantly for me to plunder her tight ass.\n\n\"You are beautiful, Amy,\" I whispered.\n\n\"Get your hands on this beautiful body,\" she commanded.\n\nI wasted no time and climbed beside her. Her ass squirmed beneath me, hungry for my touch. Finally, I gave it to her.\n\n\"Yessss,\" she purred.\n\nMy fingers tracked over the heaving skin of her ass, so soft yet so firm beneath. I was reminded of our first night together, when she desperately tried to get my fingers on her back door. This time, she didn't have to worry. I let my fingers dip over her private spot, then I went to massaging the ring of muscle. A continuous string of sighs and hums told me that I was doing the right things.\n\nWhen I felt her ring relax, I reached for the lube and flicked open the lid. Amy's breath caught in her throat, and her ass hiked up expectantly.\n\nI drizzled some lube on a finger, then placed it at her ass.\n\n\"Ummmmmm,\" she purred, and I felt her gently push out, relaxing her sphincter for me. My finger pushed inside, slowly, gently, gaining entrance to her most private space. I stopped at her second ring, and waited for it to relax fully before I pushed in. Then I gently withdrew, and slowly pushed in further.\n\n\"Ohhhh, God,\" Amy groaned with her face firmly pressed into the mattress. Her ass waved in the air, pushing back when I pushed inside, and withdrawing when I did the same. Soon, I had my finger buried to the root, and I began slowly taking long strokes in her ass.\n\n\"Yeahhhhh,\" she encouraged. As Amy got excited, she tilted her ass further up and drove back harder, signaling me to push harder myself. Soon, I was sawing my finger in deeply, pressing the rest of my hand firmly against the cheeks of her ass.\n\nAmy whimpered and moaned, her hair splayed around her buried face. All her attention was on the finger doing magic to her ass.\n\n\"Ready for a little more?\" I whispered.\n\n\"Pleasssse,\" she whispered back.\n\nI slowly withdrew my finger and joined it to another, drizzling lube over them both. Amy's ass humped in the air, missing the feeling inside her. She moaned when my fingers reconnected with her ass.\n\nI took this very slow, letting Amy adjust to the feeling of size. Again, her ass relaxed, and I felt the resistance fade and my fingers start to spread the ring of muscle. They slid forward, then waited at her second ring. It relaxed, and I ever-so-gently pushed inside. I let the ring open up, then slid my fingers out a bit, letting her rest. Then back in, and this time she relaxed fully, willing me into her body. She pushed with her hips, and my fingers slid to the second knuckle, accompanied by a lusty moan. I stopped there, and slowly pulled a little way out.\n\n\"Ahhhhh,\" she encouraged on the next push. I went just a bit further, then back out. Each time, a little further. Finally, I reached the end.\n\n\"So good,\" she murmured. Her hips tilted up again, and she offered me everything. Emboldened, I pushed harder, and slightly rotated with each stroke. Her back arched, and her ass rose to meet me. She was loving this.\n\nWe got into a rhythm, and I sawed more firmly. I started rotating my fingers all around, stretching her open, readying her if she wanted to go further with this. I needn't have wondered.\n\n\"Eric, I want you inside me. Now. I'm ready,\" Amy directed.\n\n\"I know you are,\" I answered. \"I'm going to sit back against your headboard, and you're going to lower yourself down on me.\"\n\n\"Fantastic.\"\n\nI crawled up beside her and settled back against the headboard, stretching my legs in front of me. Amy lifted herself from the bed and straddled my legs. I handed her the lube, and she drizzled another measure over my cock. I shivered as her hand expertly jacked my cock while she spread it around.\n\nStill holding my cock, Amy worked her knees forward until she loomed above me. I looked up into her smile and the wild edges around her eyes. Amy carefully positioned my cock at her back entrance. We both sighed when the head nestled at her outer ring. Her eyes never left mine as she slowly lowered her hips. Surprisingly, I didn't feel much resistance as she opened to receive me. I saw the same feeling in her eyes. When I hit the inner ring, I did feel resistance, but Amy slowed down and let herself adjust. Suddenly, her eyes went wide as her inner ring relaxed. We both knew that this was going to work.\n\nAmy's inner ring caressed the head of my cock in hot velvet, sliding open slowly but surely. She stopped, rose slightly, and sunk back down. Her ass opened up a little more, and on the next descent, the head slipped inside. My hands found her cheeks and caressed.\n\n\"Ohhhhhh,\" she breathed. Her eyes smiled down at mine while she continued to work me inside her. I let her see the arousal she created in me. Her ass was hot, smooth, and tight. Up and down she went.\n\n\"We're doing it,\" she wondered aloud.\n\n\"Yeah. Amy, you're incredible,\" I answered back.\n\n\"This is so hot.\" Amy's hands reached back and spread her cheeks apart. She arched her back and lowered herself down; I felt her cheeks brush my legs. Within a few more strokes, she rested her full weight, my cock driven all the way inside her.\n\nI tore myself away from the mind-blowing situation in front of me: a beautiful, horny, hot, woman astride my hips with my cock buried to the hilt in her ass. I needed to focus somewhere else before my cock erupted from the sheer eroticism of it all. Amy was an excellent place to focus, so I slid my hands around to her jutting breasts, cupping and squeezing the nipples.\n\n\"Yesssss,\" she hissed, sinking down so my cock impaled her ass. I tilted my head back, and Amy took the hint, lowering her lips down. She kissed me hungrily, pushing her tongue into a sweet duel with mine.\n\nAmy snaked above me, her body responding to the exquisite feelings coursing throughout. Her lips stayed glued to mine, and her breath came hot and hard.\n\nI made sure I remembered which hand had stayed out of her ass, and then I let it trail down her side. I felt the smile on her lips.\n\n\"Oh, yeah,\" she moaned into my mouth. My hand slowly worked between her legs.\n\n\"Uhhhhhh.\" Her swollen pussy pushed hard into my hand. It was soaked with arousal, and I spread my fingers, keeping the pressure indirect. Amy made it difficult, twisting and pushing her hips to drive her clit into me. I circled around it, concentrating hard to keep her frustrated and keep me from blowing my stack.\n\nAmy sped her motions, taking long drags up and down my pole. I could sense her shift from tentative motions to full on stroking, secure in the pleasure radiating from her ass. I relented and let my fingers converge on her engorged clit.\n\n\"Ahhhh,\" she sighed in relief. I curled my index finger and let her rut her clit against it. She mashed her pussy into me, her breath coming in short gasps. I continued to concentrate on her clit, thinking about anything but the goddess astride my hips.\n\n\"Oh, God, Eric, I'm going to cum,\" she announced, pulling away from me.\n\nI finally allowed myself to look back into her eyes. Our connection leapt to life, and I felt my shaft swell and harden to pure steel as I looked at the unalloyed lust radiating from Amy. I pinched her clit in my fingers, and by other hand did the same with her nipple, pulling hard. My own orgasm built down below, waiting to boil over. I squeezed back, holding off.\n\n\"Oh, fuck, oh fuck, oh fuck,\" she panted in time to her thrusts. Then, her body tensed as her orgasm gathered force. Her pants got higher in pitch, then she threw her head back and cried out as the first spasm ripped through her. I felt her pussy tense, then her breath caught and she screamed as her ass rebounded from my hard dick inside. I heard more incoherent cries tear from her throat, and then my own orgasm demanded its due. I howled out my release as the first blast jetted up through my cock, spraying deep into her convulsing bowels. Blast after blast continued, the pleasure from her clamping ass nearly unbearable. My balls just continued to empty into her.\n\nAfter I don't know how long, I felt her body slump against me. I released her nipple and lessened the pressure on her clit while we both whimpered and twitched through the aftershocks. We took our time.\n\nFinally, I opened my eyes again to see hers looking deeply into mine. I could sense the slight smile playing on her face.\n\n\"Wow. What happened?\" she wondered.\n\n\"That's called soul-crashing.\"\n\n\"Boy did it ever,\" she said and laughed. I laughed with her, both of us twitching with our most sensitive spots still connected. Amy calmed down and then bent down to kiss me.\n\n\"Thanks, Eric, for being so gentle with me. That was unbelievably good.\"\n\n\"You are so welcome, Amy. I can't think of anywhere I'd rather be.\"\n\nWe kissed deeply, thanking each other with our lips.\n\n\"Ready, Eric?\" Amy pulled back and asked, looking again into my eyes.\n\n\"Yes, Amy,\" I responded.\n\nStill connecting with her eyes, I felt Amy raise herself from me. She twitched as my head passed her rings, and then smiled at my whimper when her sphincter closed over the retreating head. I slid down and she lowered herself beside me.\n\n\"Ahhhhh. I didn't realize how stiff I was,\" she admitted, looking up at the ceiling.\n\n\"I think we were both a bit wrapped up in the moment,\" I answered, reaching down to gently massage her thighs.\n\n\"Feels good,\" she breathed.\n\nI continued to work my hands over her skin as her eyes closed. Feeling her drifting off, I pulled the covers over us, then rested my head on her shoulder and draped my arm over her. She snuggled into me and sighed, and I allowed slumber to overtake me.\n\nMy mind wandered in deep dreams, no doubt fueled by the powerful lovemaking of the night before. Finally, the fog lifted, and morning's light filtered through the curtains as I opened my eyes.\n\nI just rested and enjoyed the peace, Amy's breathing slow and steady beside me. Then it caught, and she drew in a deep breath as her eyes opened. They blinked and turned to find mine.\n\n\"Morning, Amy,\" I said gently, smiling into her eyes.\n\n\"Morning, Eric.\" Amy smiled back and leaned in to kiss me. We hugged tight.\n\n\"What a night,\" she said when she pulled back. \"I slept fantastic. How about you?\"\n\n\"Solid and deep,\" I answered. \"I didn't wake until a few minutes ago. Everything is right with the world.\"\n\n\"Let me guess. Great dinner, great companion, fantastic sex, deep sleep. Is that your formula for happiness?\"\n\n\"Pretty much,\" I laughed back. \"You have to admit: It's hard to beat.\"\n\n\"Well, the sex was fantastic. You finally took me there, Eric.\"\n\n\"And you were unbelievable, Amy. It took everything I had to keep from blowing it the second you lowered yourself onto me.\"\n\n\"I could see it in your eyes,\" she said, smiling. \"But then the tables turned when I came. I've never felt anything that intense.\"\n\n\"You were totally lost,\" I reminisced. \"Head thrown back; animal noises coming from your throat. It was the hottest thing I've ever seen.\"\n\nAmy blushed. \"It's a little embarrassing to admit how much I liked that.\"\n\nI smiled back. \"You were open and vulnerable. I loved it.\"\n\n\"You're the one guy I can open up with,\" she said.\n\n\"Don't ever change,\" I answered.\n\nAmy's arms slinked around me and pulled me in a tight hug, saying everything with her body.\n\n\"Ready for a shower?\" Amy asked when we eventually disentangled.\n\n\"Great idea,\" I answered. We helped each up and padded into the bathroom hand-in-hand.\n\nSoaping her back, I asked a question. \"Amy, were you okay with me touching you after my fingers had been in your back door?\"\n\nShe laughed. \"I don't think I even noticed, but yes, I'm fine. Your hands felt pretty good on my chest, and I know you take care where you put them. Keep it up.\"\n\n\"Keep it up, huh? So there's going to be a second time?\"\n\n\"Oh, yeah. There is definitely going to be a second time.\" I burst out laughing, and Amy joined me.\n\n\"Let's get finished, and I'll cook you breakfast. I'm ravenous,\" I said.\n\n\"Need to get your strength back after ravishing me?\"\n\n\"Exactly.\"\n\nWe finished up, and I found breakfast fixings in Amy's refrigerator. \"Expecting company?\" I asked.\n\n\"I figured that I'd have some horny guy over this weekend, and that he would need food after a night with me.\"\n\n\"You're not kidding,\" I agreed. I got busy while she sat at a barstool.\n\n\"Kind of fun to have someone else cook in my house,\" she observed.\n\n\"Just remember, not every horny guy treats you this well.\"\n\n\"No guy has ever treated me that well, in bed or out.\"\n\n\"No girl's ever treated me that well either,\" I answered, looking up from our omelets to see her dancing eyes. \"Not even close.\"\n\n\"Not even Lisa?\" she asked mischievously.\n\nShe caught me off guard, but I quickly recovered. \"Lisa and I were a good pair. But there is something about us, Amy, that goes beyond anything I've known.\"\n\n\"I know exactly what you mean,\" she laughed. \"But I still like to tease you.\"\n\n\"Yeah, I don't see that changing.\"\n\n\"You wouldn't want it to.\" I looked up and she winked. I laughed, knowing she was right.\n\nWe went bicycling, getting down to the river and having a snack for a break. On the way home, we pedaled by a park and took a break under a shade tree. We both lay down and looked up into the leaves.\n\n\"Eric, thanks again for last night. It was amazing. It didn't hurt, and you felt really, really good inside me.\"\n\n\"I'm a lucky guy to get thanked for what we did last night,\" I answered to a chuckle from Amy. \"But you're welcome. When two people take the time to build trust and experience with anal sex, it can be fantastic. You've learned to trust me, and more importantly, you've learned to trust yourself. When I gave what you call my 'little speech on the subject,' that's what I meant. I'm really glad that you enjoyed it.\"\n\nAmy took my hand and squeezed hard.\n\nWe spent the weekend mostly together, visiting friends and making love. I marveled again at how much fun Amy was to be around. I stumbled out of her bed Monday morning and got back to my place in time to get ready for work.\n\n\"Jennifer would like to meet you for a drink,\" Amy said later that week over the phone.\n\n\"Just me?\" Like any guy, I was playing this cautiously.\n\n\"Just you. I told her I'd ask. I think she has some things she wants to tell you. Probably about me, or about us. She's a good friend, so I trust her instincts. Interested in hearing what she has to say?\"\n\n\"You're not afraid she's going to share some deep, dark, secret or misgiving?\"\n\n\"You've seen her look at us, Eric. Does she look like she has any misgivings?\"\n\n\"No, she sure doesn't,\" I admitted. \"Yeah, I'd be happy to meet her. Maybe I can gain some leverage over you, anyway.\"\n\n\"Don't think you have enough already?\"\n\n\"Never hurts to have more, especially with a sorceress like you.\"\n\nAmy laughed. \"You're learning, Eric.\"\n\nSo that's how I found myself waiting Friday evening at place Jennifer suggested. Classy, with just enough noise to make private conversation possible. I didn't wait long before she appeared, decked out in a sundress. Fortunately, I had followed Amy's advice and dressed decently myself.\n\n\"You look stunning, Jennifer,\" I said. \"What can I get you?\"\n\n\"My, my, a compliment and a polite offer. Amy's doing well with you. Gin and tonic, thank you.\" Jennifer settled into the chair I offered, crossing her legs and displaying a lot of tanned thigh. Her brunette hair cascaded down her shoulders, framing an elegant face dominated by piercing green eyes. I carefully kept my eyes away from her chest, but I could sense that a hint of cleavage led the eye down to nicely swelling curves. Jennifer smiled at everything that crossed my mind.",
        "\"Such a gentleman,\" she purred. \"Feel a little naughty, meeting another woman while your girlfriend is at home?\"\n\n\"A little, yes. So I'm happy that the woman's such good company.\"\n\nJennifer laughed. \"Eric. You are the devil himself! You're passing this part of the test extremely well. Now, how is your mother? I still remember talking to her when she visited.\"\n\nI responded, knowing that Jennifer was seeking her opportunity to pounce. She took her time, and we both chatted about all manner of things.\n\n\"Like another?\" I asked when her glass was empty.\n\n\"Please.\"\n\nOur drinks came, and she picked hers up. I did the same, and just as I was about to sip, she hit me.\n\n\"Amy really likes you, you know.\"\n\nI played it as cool as I could, taking a sip and leaning back while I bought time. I'd always had trouble responding to that line, starting back in second grade.\n\n\"Probably not as much as I like her,\" I said, feeling pleased with an answer that didn't sound lame or arrogant.\n\nShe smiled. \"I'm not so sure about that. But I am sure that neither of you actually knows how deep it goes. How could you? You have a lifetime to find out.\"\n\n\"A lifetime, huh?\"\n\nJennifer didn't answer. She just looked at me.\n\n\"Anyway,\" she went on, \"I wanted to do you both a favor. You're both made for each other. But eventually, something Amy does will get under your skin. When that happens, you will remember this conversation, and how much you appreciate everything about Amy. What a great person and friend she is. How athletic and beautiful she is. How much fun she is. And most importantly, how wicked she is. She can be an innocent little girl, a quick-witted sparring partner, and every man's wet dream\u2014however she chooses. Do you know what I'm talking about?\"\n\n\"I think you know the answer to that, Jennifer.\"\n\n\"Tell me, Eric, so you'll remember. What is it about Amy that you appreciate most?\"\n\n\"She just a hell of a lot of fun to be around. She keeps me on my toes, in a good way.\"\n\n\"She's your equal, Eric. She's your partner in crime, now and forever. There aren't many that can make that cut.\"\n\n\"A little compliment for me? I don't think I've ever heard that from you, Jennifer. I'm flattered.\"\n\nShe smiled, a wide, genuine smile from deep inside. \"I always give my favorite people the most hell. If you'd tried your luck with me, Eric, you might be surprised where it would have led. But I'm happy you didn't. Amy is the girl for you, and you are definitely the boy for her. Make sure you cherish her. She's glowing so bright right now, I'll know when you're not treating her right.\"\n\nI laughed. \"You have a way of just knowing things, Jennifer.\"\n\n\"And even I get it wrong, sometimes,\" she pouted. Her green eyes fixed on mine. \"I have to retract a certain statement I made about what women want and don't want.\"\n\nI felt my cheeks get hot. \"I'll give you a pass on whatever it is you're thinking about.\"\n\nJennifer chuckled. \"Amy let me off the hook in much the same way. It was fun to make her squirm\u2014the chances don't come that often. You either.\"\n\nI smiled back at her.\n\n\"Sometimes silence makes the best answer, does it not?\" she said daintily.\n\n\"Indeed.\"\n\nJennifer burst out laughing. \"This little rendezvous is even more fun than I thought it would be.\"\n\n\"You have an interesting conception of the word 'fun,' but then, so do I.\"\n\n\"And so does Amy,\" Jennifer added. \"Now, I wouldn't be doing my job without extracting at least one more thing that you appreciate about her. Any ideas?\"\n\n\"Yeah,\" I said, looking into Jennifer's eyes. \"Amy goes deep\u2014way deep. There's a lot to explore, and I like exploring.\"\n\n\"Both your answers were about who Amy is on the inside, and that has staying power. Sure, she's gorgeous, but there are other gorgeous girls. Me, for instance.\"\n\nI dipped my head in acknowledgement.\n\n\"But there's no one quite like her, is there?\"\n\n\"That's what my heart tells me.\" Wow, I had said a lot.\n\nJennifer smiled. \"Thanks for sharing that, Eric. You let your guard down a bit, but your heart wanted to. I'll save that for a special time with Amy. She'll love you all the more for telling me.\"\n\nI bowed my head once more. Then I looked up. \"Thank you, Jennifer.\"\n\nThose green eyes fixed on me again. \"Say more.\"\n\n\"Meeting me; having this conversation. It shows you care about Amy\u2014a lot, and that you care about me. Also, I can feel something coming from Amy through you. You're glowing a bit too, for your friend.\"\n\n\"Very perceptive, Eric. You're welcome. Now, I'd best be going soon, before this rendezvous becomes more fun than it should. You'll remember what we talked about?\"\n\nI looked into her eyes. \"Yes. I will remember.\"\n\n\"Amy said she'd remember as well,\" she added, getting up. I got up with her. She leaned in and kissed me on the cheek. \"Lucky devil,\" she whispered before spinning around and walking off. I knew she wanted me to wonder who she meant. At least I got a chance to check her out as she waltzed out the door\u2014she knew she looked good.\n\n\"Nice lady,\" the bartender offered.\n\n\"Extremely,\" I agreed.\n\nI called Amy when I got to the car. Of course, she didn't answer.\n\nLater, she called.\n\n\"We both laughed when your call came in. We had a bet on how long it would take.\"\n\n\"Even I'm smart enough to call my girl after meeting one of her friends for a drink.\"\n\nAmy laughed. \"I'm taking you out tonight, Eric. Jennifer gave a very positive report on her little mission. Said that you were incredible\u2014that you did everything right. She had to string out the good parts\u2014too much to tell me in one day. You must have really turned on the charm.\"\n\n\"I'm buttering her up in case this doesn't work out.\"\n\nAmy's laugh got me laughing as well. \"Anyway, Mr. Comedian, get over here.\"\n\nAmy treated me to a great dinner, her sparkle heightening the good vibes. Driving back, she looked over.\n\n\"Jennifer told me about how she dressed to kill, and how you admired her yet kept your gaze carefully on her eyes. She definitely noticed that you wanted to pass her little test. Would you like to join me for another little test tonight? This time, it's about how much you can look at all of my body.\"\n\n\"I like that test.\"\n\n\"I figured you would.\"\n\nWe spent another great weekend together, featuring some great lovemaking, of course. We stayed in touch over the phone during the week, planning to meet Friday after work. Bedtime Thursday evening, my phone rang.\n\n\"Hello, Amy, how are you doing?\" I answered.\n\nHer voice was low and throaty. \"I need something really bad, and you're the only person who can give it to me.\"\n\nMy cock stirred\u2014this sounded interesting. \"Anything. How can I help?\"\n\n\"Anything? I'll have to think about that. But I know what I need right now. I'm lying naked on my bed, face down. There are candles everywhere. I need something from you, badly, deeply. Can you come over and help?\"\n\nMy cock was rock hard. \"I'll be right over.\"\n\n\"Leave your clothes by the door. Hurry.\"\n\nI did hurry, unlocking and easing her door open to see soft candlelight. I stepped in, locked the door behind me, and jumped out of my clothes. A trail of candles led back to her room. I followed them to the flickering light pouring from her open door.\n\n\"Amy...\" my breath caught in my throat.\n\n\"Eric. Thank you so much for coming.\" She was stretched out on the bed, candles everywhere, and a bottle of lubricant near her ass. My pulse leapt at least 30 beats.\n\n\"I am so worked up, so horny, so frustrated,\" she continued. \"Do you know what I need?\"\n\nI looked down to see her legs slightly spread, her knees pushed into the bed, and her ass thrusting into the air. Her hands were under her chest, playing with her nipples.\n\n\"I think I've got it figured out,\" I chuckled. \"And I can definitely help with your little problem.\" I stretched out on my side beside her. \"Would you like to snuggle back into me and let me play with you for a bit?\"\n\n\"Ohhhh, I'd love that,\" Amy replied, rolling back into me. Her ass found my cock and she squirmed until I was nestled securely between her cheeks. The she pushed back hard, moaning and grinding. I reached around to palm a breast, testing its weight and feeling the hard nub of her nipple jutting out. I gathered my fingers and squeezed the nipple, pulling it out and twisting.\n\n\"Yeesssss,\" she hissed, shoving her ass into my cock. I felt the slight roughness of her anus drag along the underside. Amy was on fire, and I let her build the heat higher. She rippled into me for several minutes, and her ass kept moving up until the head of my cock found her back door. She purred and twisted, trying to get me inside her. My precum had slicked everything back there, and Amy strained to use that as lubrication. I smiled to myself\u2014she wanted it bad. She was just where I wanted her.\n\n\"Okay, babe. Back on your tummy.\"\n\n\"Ummmmmm.\" She rolled over and spread her legs, hiking her ass up. I got the lubricant and drizzled some over a finger, then slid it down to tease her opening. She squirmed under me, fighting to get my finger deeper in her ass. Finally, I held my finger still to let her impale herself. With a long moan, she jacked her ass up, and my finger slid inside easily. Amy started rocking her hips, pumping my finger back and forth. I could feel how relaxed she was as I started twisting inside her. On one of her thrusts, I pushed as well.\n\n\"Ohhhh,\" she whispered when I bottomed out, the rest of my hand possessively palming her ass. I let her enjoy the sensation of giving over her ass for a while, then I slowly withdrew to the sound of her whimpering.\n\nI drizzled more lube on two fingers now and moved them back to her opening. More gently this time, I let her squirm against them and slowly draw them inside. Her outer ring opened easily, but I paused at her inner ring. Amy sighed, and I felt her relax and push out. My fingers moved inward, and I paused, backed out slightly, then let her draw them inside again. In a few cycles, I was buried anew to another sigh of satisfaction from Amy.\n\nAgain, I let Amy thrust into me while I gently twisted my fingers, relaxing the full circumference of her sphincter. I also tuned into Amy, feeling out her excitement level and her readiness for more. She was turned on but also deeply relaxed, fully enjoying what we were doing together. I could find no anxiety of what was to come. My eyes told me the same story. Amy's body writhed under me, her fingers still clamped to her nipples.\n\n\"You ready for me inside you?\"\n\n\"I thought you'd never ask,\" she responded from somewhere far away. Before I could say anything more, she drew her knees forward and lifted herself up, hiking her ass into the air with my fingers still buried inside. I saw her pull her arms in and raise her chest as well, resting on her elbows with her arms crossed under her, pulling at her hanging nipples. I didn't think it possible, but my cock hardened further at the sight. I let her get used to this new position, then I flipped the lid open on the lube and drizzled another portion onto my cock with my other hand.\n\nI shuffled forward and rested the head of my cock beside my fingers sawing in and out of her.\n\n\"Eric. Please.\"\n\nI relented and slowly withdrew my fingers to another gentle whimper from Amy. I got the head of my cock positioned at her entrance and let her set the pace. She sighed and slowly pushed herself back. I felt the head open up her outer sphincter, then I felt the pressure from the inner ring. Amy backed away a bit, then pushed back again. Her inner ring slowly expanded, feeling like a gentle wave riding along the head of my cock. It wasn't so much a sense of penetrating as it was a sense of her relaxing. Suddenly the pressure eased.\n\n\"Oh, God,\" she sighed. We both knew that I was in. Amy paused to adjust to the new sensations, then she started rocking her hips little by little, drawing me deeper and then pulling back. Her tunnel was a furnace, bathing my cock in liquid heat and pressure. I watched my cock progressively sink into her until her cheeks touched my groin.\n\n\"This feels so good,\" she breathed.\n\n\"This feels fantastic,\" I answered back. In fact, she felt so fantastic that I drew my focus completely onto her, delaying the volcano building inside me. I traced my fingers over her legs and back, feeling the sparks flow between us. Amy sinuously twisted her hips, exploring and drawing out all the sensations inside and around her ass. Her moans and whimpers attested to the raw pleasure coursing through her body. I slowly pushed and pulled, letting her control the pace and depth.\n\nThen I saw it\u2014the movement of one of her hands back between her legs. She dropped her head down to steady herself on the bed, and then she sighed as her fingers found her slippery folds.\n\nShe started slow, not wanting to rush to orgasm too quickly. I could tell: she was blending the new sensations coming from her ass with the familiar tingle of her pussy lips. I let her explore.\n\nSoon enough, her body shifted gear, and she moved from the tentative to the confident. Her ass pushed back hard, and I met her thrusts. She groaned, grinding her hips each time we bottomed out. Her fingers picked up speed on her pussy, occasionally tickling my balls. Amy was in the zone, ass full of cock and loving it.\n\nIs there anything better than this? A gorgeous woman, turned on beyond belief, dancing on the end of my cock. Better yet, she loved me, and if I was honest with myself, I loved her just as much.\n\nAmy's breath now came in grunts, timed with her rocking into me. We started to bounce into each other, and I grabbed her hips to pull her back with authority.\n\n\"Oh, fuck yes,\" she groaned. Her fingers gave her pussy a workout that I could feel in her ass. Enough playing around. She was pushing for an orgasm\u2014now.\n\n\"That's it, baby,\" I encouraged. \"Ride it hard.\" I squeezed down on the eruption threatening to blow inside me, hoping I could make it until Amy was ready.\n\n\"Oh, yeah. I'm gonna cum soon,\" she panted. Small pinpricks of sweat broke out on her skin. She pushed, and twisted, and gasped her way into pure lust. I could feel her muscles tense, and then I knew it: she was beyond the point of no return.\n\n\"I'm cumming!\" she yelled, and rammed into me. I met her and held on. Her voice dissolved into guttural grunts and moans as she came, hard. Her ass pulsed around my rod and then rebounded back, causing her to shriek in delight. Her orgasm ripped my own from deep within me, and I howled as my semen struggled and spurted past her clutching sphincter, doubling the pleasure.\n\nMy memory of the next several moments is hazy, occupied as I was by mindless ecstasy. However, I have a vision of Amy throwing her head back, gutting out an orgasm that was so powerful it was almost painful. She whimpered and moaned through the contractions, truly heedless of what she looked like.\n\nWe slowly came back to reality, twitching with the aftershocks as always. Amy cupped her pussy, and I stayed deep inside her, both of us drawing out the last remnants of our union.\n\n\"Oh. My. God.\" Amy finally exclaimed.\n\n\"Soul-crashing?\"\n\n\"Big time.\"\n\nI smiled. \"You were truly beautiful.\"\n\nAmy chuckled. \"So you think a girl screaming out in mindless ecstasy is beautiful, huh?\"\n\n\"Every time.\"\n\nWe eventually got disentangled and lay down next to each other for a rest.\n\n\"Like to share a shower before we go to sleep?\" Amy asked.\n\n\"Showering with a pretty girl? I'm always up for that.\"\n\n\"No doubt. Now go get the water started, funny guy.\"\n\nI stood and offered a hand out to her. She smiled and took it, looking radiant in her post-orgasmic glow. She shooed me into the bathroom to get the water started. While I was adjusting the spray, I sensed her coming in and putting something on the top of the shower enclosure.\n\nWhen I stepped back to let the water warm, she pulled me to her for a hug and kiss.\n\n\"Thank you, Eric. That was fantastic.\"\n\n\"Amy, like I said before. I don't think you need to be thanking me.\"\n\nShe laughed. \"Keep up the compliments, Eric. You'll get everywhere with them.\"\n\nShe tested the water and pulled me inside. We started soaping each other up, and I could sense something playful in her blue eyes. When I got to her breasts, she gasped and moaned.\n\n\"Get them really clean,\" she said a little breathlessly. My cock stirred. This girl continued to amaze me.\n\nAmy reached up and gave me a kiss. \"Maybe if I turn around, your hands will fit them better.\" With that, she spun around and nestled back against me. I brought my hands back to her breasts, and she maneuvered my cock between the cheeks of her ass.\n\n\"Yeah. Really, really, clean,\" she directed. When she tilted her head back for a kiss, my cock hardened. She moaned into my mouth and started grinding her ass back into me.\n\nShe was hot and wanting. Her nipples stiffened in my hand, and I took them in my fingers. Amy sighed her assent, and I started rolling the hard nubs. Her ass danced around my cock, and I took her moans as hints to squeeze and pull her nipples harder. Amy's tongue burned in my mouth.\n\nAmy broke our kiss to arch her back, and I felt her slight roughness of her anus drag along the underside of my cock.\n\n\"I could do it again\u2014if you want to,\" she said, looking back at me.\n\n\"Are you sure?\"\n\n\"Lube's up on the railing. That tell you how sure I am?\" she said breathlessly. If her words didn't convince me, I had her body grinding all over me for evidence of her passion.\n\nFor an answer, I dropped my hands onto her ass cheeks and pulled them apart, grinding my cock deep into her crack.\n\n\"Oh, God,\" she exclaimed, crushing her ass back against me. I got my hands back on her breasts and squeezed her nipples hard. Amy was in the mood to want it a little rougher.\n\n\"Yesssss,\" she hissed. I let her grind against me, peaking her passion level.\n\nAfter a spell, her ass shifted, and I knew she was seeking out the head of my cock. I dropped a hand to guide it to her pucker, and she moaned. I backed up to the wall and leaned against it, letting her dictate the pressure she wanted to apply.\n\nAmy took the hint, grinding back against me. She twisted and writhed her ass, trying to pull me inside with the copious pre-cum leaking out of my cock. The head had already disappeared into her welcoming outer ring. OK, she really wants it, I thought to myself. I reached up to get the lube, not wanting her zeal to push things too fast.\n\n\"Ummmmm,\" Amy purred when she heard the snap of the bottle. I considered letting her go straight with my cock, but saved that for another day. She might want a little pain in the future, but these first times should be relaxed and easy. I drizzled some lube over a finger and started the same gentle stretching routine I did before. Amy made it go faster this time\u2014she was hot to trot. When she was sawing easily on two fingers, I got my cock lubed and placed it at her entrance.\n\n\"Oh, yeah,\" she breathed, and she started pushing back into me. With me leaning against the wall, Amy was in complete control. She went a lot faster than I would have, and soon my head could feel the velvet caress of her inner ring opening up. Amy kept steady pressure on me, and I slid past.\n\nWe gasped together, lost in the sensations. Amy worked back and forth, driving me deep into her. When her cheeks touched my groin, she sighed in victory. On the next couple of strokes, she had her cheeks flattened against me.\n\n\"God, this is good,\" she exclaimed, reveling in the ability to do whatever she wanted. I could feel more and more of her weight pin me back as she pushed deeper than I would ever have done. I watched her hand slink down between her legs, and I got my own hands back on her swollen nipples, matching the pressure she was applying to me.",
        "Amy started twisting her ass with each stroke, getting lots of skin contact before flattening against me. Her fingers worked her pussy with firm strokes that I could feel through my cock.\n\nFortunately, I had emptied my balls into her once already this evening, so I was able to relax about blowing it too soon. I leaned back and enjoyed the sight of Amy's body writhing in pleasure, her hair hanging in wet strands down her back. This was all her, and she was completely loving working my cock deep into her bowels.\n\nAmy's fingers picked up the pace, and I felt them shift to concentrate on her clit. I let my body respond to hers, and she drew me along the road to climax. My cock pistoned smoothly in the hot, tight, caress of her back tunnel.\n\nHer gasps increased in pitch, and her fingers sped to a blur. My orgasm pooled in my balls, and the tension radiated out through my limbs. I looked down, and Amy's body was rigid, just rocking on her feet to slam into me.\n\n\"Oh, God, I'm cumming again!\" she cried, and then I felt the spasms rip through her ass. Amy lost it, shaking and grunting hoarsely through another incredible orgasm. Her climax launched my own, and I blew another load deep into her bowels. I had just enough brain cells functioning to grab Amy to keep her from falling over in the shower.\n\nJust like before, we both whimpered and twitched our way back to earth.\n\n\"Wow.\" I didn't know what else to say.\n\n\"Soul-crashing,\" she said and giggled. I twitched with my sensitive cock still in her ass causing her to giggle louder. We both ended up laughing, although my laughs were punctuated by gasps.\n\n\"Should I have mercy?\" she asked.\n\n\"Please.\"\n\nAmy gently pulled forward, and I slowly withdrew from her tunnel. Her sphincter closed over my head, and we both jumped a little as I pulled free. Amy stretched back upright and turned around. I looked into her eyes and pulled her close for a kiss.\n\n\"You're too good to be true,\" I sighed when we pulled back.\n\nAmy's blue eyes danced, and she pinned me to the wall for another long kiss.\n\nWe eventually disentangled and got cleaned up, this time without any further extracurricular activities. We dried each other off, and I held Amy's hand back to the bed. We climbed in and spooned together, thanking each other for the evening and both falling deeply asleep.\n\nThe alarm pulled us back from our slumber. We jumped in for another quick shower.\n\n\"Last time we were in here, you took advantage of me,\" Amy said playfully.\n\n\"Uh, right,\" I answered. \"I look at it more as helping a desperate woman get what she sorely needed.\"\n\n\"And you did it so well. Maybe I'll need you to do that again.\"\n\n\"I sure as hell hope so.\"\n\nAmy laughed and swatted my ass.\n\n\"So, tell me, Amy,\" I continued. \"What would you have done if I couldn't come over?\"\n\nAmy looked up at me, straight into my eyes. \"Let's see, Eric. I call you and offer a night with a perfect piece of ass. Somehow, I had a feeling that you'd accept. But if you hadn't been home, I guess I would have just fantasized about what would happen and take care of it myself. Know what I mean?\"\n\nI laughed. \"I do. And you're right. You have my number as far as your ass.\"\n\n\"By the way,\" she said looking up at me. \"It was fantastic. I'm glad I've done this little project your way. Like you said, when I'm that horny, I think only of the good feelings to come, and I'm totally relaxed about what we're doing.\"\n\n\"I'm glad you played along, Amy. You've been amazing.\"\n\n\"So are the orgasms. 'Soul-crashing' is right. I can't believe how intense they are.\"\n\n\"Your back door wants to contract during your orgasm, but my cock prevents that. Your ass then rebounds outward, greatly increasing the pleasure. So now you get it.\"\n\n\"I 'got it' alright!\" We both laughed and finished getting each other cleaned up. After another smoldering kiss, I quickly stopped my place to get some new clothes and get to work.\n\nWe spent another weekend together, and ended up Sunday evening at Amy's place. She made us dinner, and we sparred and laughed our way through another meal.\n\nI swirled the wine in my glass and looked over at Amy. \"I think it's time to discuss something.\"\n\n\"Yes?\" she answered, her face a bit more serious.\n\n\"As much as I've enjoyed it, I think we've fulfilled a narrow definition of our original package deal.\"\n\nA bit of color tinted her cheeks. \"I'll have to agree that you are correct. But you said 'narrow.' What might a broader definition include?\"\n\nI leaned back. \"A broader definition would be comprehensive in every sense of the word. It could take a long time\u2014a very long time\u2014to fulfill. It's probably something we'd want to think about before committing ourselves.\"\n\nAmy looked at me for a long time. Her eyes sparkled. \"I think you'll find me willing to discuss the particulars of a comprehensive deal anytime you're ready.\" She let that linger in the air. \"In the meantime, I'm more than happy to broaden the original deal one step at a time. It's been working quite well for me.\"\n\nWe eventually did commit to a \"comprehensive\" deal, and I realized that a lifetime was too short to understand everything about Amy\u2014goddess, mother, friend, lover. She remained \"horny and frustrated\" throughout, and I was more than happy to relieve her tensions and keep her back door satisfied. She still blushed a bit when the kids asked about how Mommy and Daddy met, but we got by with the story of us \"living in the same condo complex and running into each other all the time.\" Maybe someday we'll tell the kids a bit more of the truth.\n\n*\n\nAs authors, one of the greatest rewards is getting comments on our work--it's what drives us to write more. How did it make you feel? What does it make you think of? How did this story affect you? Please take a moment to vote and offer comments, or click the link to send me personal feedback\u2014I'll even respond! It means a lot.\n\nSpecial thanks to EditorKarl and DawnJ for their editorial assistance and encouragement!"
    ],
    "authorname": "Antonio_y_Cleopatra",
    "tags": [
        "romance novella",
        "anal",
        "masturbation",
        "playful",
        "friends"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/adult-education-2"
}
{
    "title": "A New Alexandra Ch. 12",
    "pages": [
        "Alexandra pulled the ski cap down, trying to block the icy air from the back of her neck. Damn pixie cut, she thought, smiling at the laws of unintended consequences. It had been three days since her dramatic haircut. She still had not tired of playing with the new style, enjoying every minute of it.\n\nAnd especially enjoying, she thought, the way Kira runs her hands through it when we kiss. \n\n \n\nIt was lunchtime, although the steel-gray sky and December gloom made \"midday\" seem like a misnomer. Alexandra had exited UChicago's brutalist monstrosity of a library, a morning full of exam cramming bursting from her ears, when her pocket vibrated.\n\nShe fumbled with the phone, extracting it from the coat just in time for the name MOM to vanish from the display.\n\nOh well. She'll leave a message, Alexandra thought. Then she stopped. She never calls me for anything good. Ever. Not even my birthday. That's an e-card and a mailed present.\n\n \n\nA young man behind her dodged frantically to avoid her figure parked in the middle of the sidewalk. On cue, the phone vibrated again. Alexandra stepped aside and removed a glove.\n\n\"Hello?\"\n\n\"Alexandra?\" There was tension in the high-pitched voice. Not a smile on the other end of the line.  She's not squeaky when she's happy.\n\n\"Hello, mother. Typically, I'm indeed the one to answer my phone, yes.\" Alexandra stepped aside, settling on one of four benches under a large, winter-bare tree.\n\n\"How are you?\"\n\n\"I'm fine, Mom. I just left the library to grab some lunch. What's up?\" Please tell me nobody's sick. Or dead.\n\n \n\n\"Oh, nothing.\" Then why are you calling me? \"I was just wondering if you'd seen today's edition of the Chicago Tribune.\"\n\n\"Um, no. I don't get the newspaper.\"\n\n\"Then you might want to pull up their website.\"\n\nAlexandra switched the phone to speaker. Wish I had some headphones about now.\n\n \n\n\"Um, do you read the Tribune every day?\" In other words, why do you read a newspaper from the city where I live and you don't?\n\n \n\n\"No, just most days. You see, it allows me to at least keep up with what's happening in Chicago in general. Because, let's face it, you aren't the best at keeping in touch.\"\n\n\"I'm sorry.\" Why am I apologizing?\n\n \n\n\"Did you pull up the page?\"\n\n\"Yes.\"\n\n\"Scroll down.\"\n\n\"How far?\" At least there's not much wind. Although maybe that would be better. I could get out of this conversation, whatever it is.\n\n\"Halfway to the bottom, at least on my screen.\"\n\nAlexandra scrolled, lump growing in her throat. \"What am I looking for?\"\n\n\"I suspect you'll know it when you see it,\" said her mother, voice still tight.\n\nInnocuous headline followed by bland column teaser rolled past. Ads filled much of the screen alongside a photo of the Blackhawks game, something about Shedd Aquarium, and a particularly unappetizing screen grab from a traffic camera.\n\nThen she stopped. Oh, shit. What I'm looking for is me. Me, ice skating on Saturday night. Nose-to-nose with Kira, her skating backwards, her arms around my waist. We're clearly about to kiss. \n\n \n\n\"Um,\" she managed, throat closing. That photographer, the woman with the professional-looking lens. An actual professional. \n\n\"Skaters enjoy Saturday late hours at the McCormick Tribune Ice Rink,\" read the caption.\n\n\"Alexandra, it comes as quite a surprise to see your photo on the website of a major newspaper. Congratulations,\" said her mother. The last word dripped with sarcasm.\n\n\"I...I didn't know someone had taken a picture of u- um, me,\" she said. I didn't swallow that \"us\" in time. Not that it matters.\n\n \n\n\"Alexandra.\"\n\n\"Yes?\"\n\n\"What the hell did you do to your hair, sweetie?\"\n\nAlexandra burst out laughing, relief surging through her. Seriously? Is that what this is about?\n\n\"I cut it. Well, obviously I didn't do it myself. You get the picture.\"\n\n\"I see.\" Her mother kept her thick hair long and straight even now, although the chestnut color became less and less plausible with each year that passed.\n\n\"Why did you do that?\"\n\n\"Because I'm an adult and I wanted a change. Not that my reasons matter, mother.\"\n\n\"Well, I must admit it doesn't look as unfortunate as I would have expected.\"\n\n\"I'll take that as a compliment.\" A young man had sat on the bench opposite her, sipping from a take-out coffee cup and texting.\n\n\"I have another question, Alexandra.\"\n\nShit. Please, no.\n\n \n\n\"Okay.\"\n\n\"Who is the other young lady in the photograph?\"\n\n\"Her name is Kira.\" Alexandra took the phone off speaker and held it to her ear. Her heart thundered in her chest. Sweat pricked at her pores.\n\n\"I know that. She's been in some recent photos on your Facebook. That's not what I'm asking.\"\n\nDeep breath, Alexandra. This had to happen sooner or later. She looked around her, at the bare tree and grey sky. At the figures zipping along the sidewalks, their minds on exams and coffee and Christmas and heaven knows what. One more deep breath. She exhaled.\n\n\"She's my girlfriend.\"\n\nSilence for a moment.\n\n\"Girlfriend or girl space friend?\"\n\n\"No space, mother. I'm gay. She's my girlfriend, my partner, my sweetheart, whatever label you want to put on it. We've been together a couple months now and she's absolutely wonderful. She's in law sch-\"\n\n\"Alexandra, I'm not interested in hearing about her right now.\" Whoa, fuck you, you and your bitchy-ass PTA-mom voice. Tears welled in her eyes. \"I'm sorry,\" her mother quickly added. \"I didn't mean that to come out that way. I...well, I should let you talk.\"\n\n\"There's not much more to say other than it really, really sucks to get outed by a photograph in a newspaper. I...\" Tears flowed freely now, hot down her frozen cheeks. \"I...I wanted to tell you earlier, but I was afraid...\"\n\n\"Don't be afraid,\" came the reply. Her mother's voice now was back in its normal register. More, well, maternal. \"This is a big shock to me and I haven't told your father, but I'm listening.\"\n\n\"How is he...going to handle it?\"\n\n\"Honestly, I expect pretty badly. But that's my problem, not yours. Not yet. He's my husband and you're my daughter. So I will make sure we all get through this.\"\n\nThat's a lot better than I expected. I expected \"Are you sure?\" Or some other phrase that trivializes what I just went through. But no. That was...almost supportive.\n\n\"I'm assuming from how you phrased it that you want me to tell him, rather than you?\"\n\n\"Yes.\" She sobbed again, brushing the tears away. Her head was bowed, almost between her knees.\n\n\"Alexandra. Breathe. This is all new to me, so can I just ask a basic question or two?\"\n\n\"Okay.\" The tears began to slow.\n\n\"When I talk about this with anyone who asks, how would you like me to describe your...um, sexual preference?\"\n\nAlexandra sucked in breath. \"Lesbian. I'm a lesbian. Gay is fine too, if you need to go for one syllable. And most people talk about orientation, not preference. It's not like I'm making some choice between Coke and Pepsi. It's not something I can change.\" Nor would I want to, in case you're gonna ask.\n\n \n\n\"I'm sorry. I'm...I promise I'll try to learn the right language.\"\n\n\"Mom. Stop.\" For a moment, anger swelled. You basically forced me to come out to you, and now you're fishing for pity. \"Like you said, I'm sure this is a shock. It is for me. I didn't want to have this conversation like this. I want to go now. I don't mean to be...\" The tears came again. \"I just wanted to have lunch.\"\n\n\"I'm sorry,\" her mother repeated. \"I should...I should let you go.\" She stopped. \"I'm sorry, I just had to know.\"\n\nOh, fuck you. Fuck your entitlement. \n\n \n\n\"Not the right way to end the conversation, mother. Good luck with the old man.\"\n\n\"Alexandra, I-\"\n\n\"Mom. I need to go. I'm outside, it's freezing, and I'm about to cry again. Bye.\"\n\nShe pressed the red X, then leaned back on the bench, staring at the bare tree limbs above her. The spindly arms branched out randomly across the monochrome sky. Alexandra put on her gloves, sliding her phone into a pocket.\n\n\"Hey,\" said a voice, not unkindly.\n\nShe looked forward. It was the guy from the other bench. Camel hair overcoat, clean-cut, dark hair.\n\n\"I'm sorry. I couldn't help but overhear that. If that was...um. He bit his lip. \"If that was what it sounded like, I just wanted to make sure you were alright. Do you need anything?\"\n\nAlexandra nodded, tears returning.\n\nThe stranger wrapped his arms around her. Held her for a long moment, then sat on the bench.\n\n\"I'm Jamie,\" he said. \"I'm a third-year. I came out to my parents last summer. You did great. It gets better from here.\"\n\n\"Thanks.\" She blinked away the sheen of tears.\n\n\"It does. And you nearly broke my heart with the part about getting outed. I'm so, so sorry.\"\n\n\"Me too.\" She held up the screen, showing him the picture. \"I'm Alexandra. I'm sorry.\"\n\n\"Don't be sorry.\" A smile crossed his face. \"You two look super-cute together. It really is a great photograph. It deserved to be on a major newspaper's website. It just sucks hardcore what it meant for you personally.\" He moved to the end of the bench, body turned towards her.\n\n\"I love her,\" she said.\n\n\"I know. And it's obvious from the picture that she loves you too.\" He exhaled a cloud of mist into the sky. \"And I'm sure your mother loves you as well. It takes time. For me, shit was really weird for like a month after I came out. Like my parents didn't know how to deal with this 'new' me, who was the same damn me that had always existed. But they got over it.\"\n\n\"That's good.\"\n\n\"Yes. Getting over the denial, my dad called it. Which is actually a good way to put it. I mean, when you're talking about gay people who haven't come out yet, who's really hiding from reality? The person in the closet, or the people who refuse to see what's often pretty obvious?\"\n\nAlexandra laughed. That feels good. \"Not sure it really matters. One person gets to carry the weight of the secret.\"\n\n\"And now you don't have to. That's one of the reasons it gets better.\"\n\n\"I hope so. That conversation sucked, to put it mildly.\"\n\n\"You got through it with fewer tears than I did with my parents.\" He stroked his cleft chin. \"Anyway, I didn't mean to barge in. I just, well...you know. One of my friends helped me a lot through the process of coming out. He just asked that I pay it forward and help someone else. I hope I did that, if only a little.\"\n\n\"You did. Thank you.\" She leaned over and embraced him, a tight squeeze. A pretty good hug for someone you've known all of five minutes. \"I'll pay it forward someday too. At least I hope so.\"\n\nHe stood. \"By the way, I don't know if you know or whatever, but a few of the LGBT student organizations are sponsoring a movie night on Thursday at Ida Noyes. If you don't have a final on Friday, stop by.\"\n\n\"I might.\" If this week doesn't kill me first. \n\n\"It's at eight. If you do come, please say hi. Oh, and bring a flask. That's just tradition. Anyway, I need to get back to the Reg,\" he said. The massive Regenstein Library's Brutalist fa\u00e7ade loomed overhead. \"It was good to meet you. And seriously. It gets easier now.\"\n\n\"I hope. See you Thursday, maybe.\"\n\n\"That I hope, new friend.\"\n\n\"Thank you.\" Alexandra's hands began to shake as the conversation wound down. \"Good luck studying.\"\n\n\"Thursday, Ida Noyes. Be there, lady.\"\n\n--\n\nAs soon as she closed the door, kitchen smells hit Alexandra's nose.\n\n\"Almost ready!\" Her girlfriend's voice was hurried. Pans and utensils clanged in the background.\n\nAlexandra hung up her coat and tossed her bag onto a chair. Kira's tall frame leaned out of the kitchen, blonde hair in a messy bun.\n\n\"Hey,\" she said. \"It's going to be salmon with carrots and mashed potatoes. A little bit of soy glaze on the salmon. That okay?\"\n\nAlexandra's stomach rumbled in response. \"I'm sorry I'm late. I went for a long run and an extra-long shower.\"\n\nKira gathered her in a tight hug. She stroked Alexandra's neck and kissed her forehead. \"Please. After a day like that, I think I can cut you a little slack. With vegetables.\"\n\n\"It smells great. Thank you so much.\"\n\n\"For what? I'm your partner. I make you dinner and support you. I'm sorry I wasn't around when you called earlier.\"\n\n\"You were in an exam. I think I can cut you a little slack for that. No vegetables, though.\"\n\nKira turned back to the sizzling pan. She turned the burner off and retrieved two plates.\n\n\"I actually was surprised you got here so soon,\" she said. Alexandra tried to grab glasses for water. \"Shoo, you little pest. I'm making dinner. Go have a seat.\"\n\nKira winked behind her tortoiseshell glasses. Grr. Eyelashes, Alexandra thought.\n\nAlexandra ignored the instruction. \"Well, it would have taken longer except my Uber driver was a former cabbie.\"\n\n\"Yeah?\" Mashed potatoes plopped promisingly alongside a beautifully crisp salmon fillet. And her ass in yoga pants? Yes, please. \n\n\"Yep. It was the full experience. He talked nonstop, drove like he'd never done it before, used the horn instead of turn signals.\"\n\n\"It's not a true Chicago taxi experience unless the car's absolute heap of shit,\" replied Kira. \"But I get how you got here fast.\"\n\n\"Speed limits? What are they?\" Alexandra grabbed a plate and turned for the dining area. \"Oh, and the car was in fact a heap of shit. I think it rattled when it was sitting still. Worst Uber I've ever seen. Five stars.\"\n\n\"I'm glad you have such high standards,\" said the blonde. She slid into position across from Alexandra. \"Drink?\"\n\n\"Just water, thanks. I think between the sweat and the tears today, I need some hydration.\"\n\n\"I have nothing to offer but blood, toil, tears, and sweat,\" replied Kira in a gravelly English accent, jaw locked.\n\n\"I'm sorry?\"\n\n\"Tsk, tsk, Alexandra. Winston Churchill. First speech to the House of Commons. 1940. 'Blood, toil, tears, and sweat.' You're at best at three of four today. See, it can't have been so bad?\"\n\nAlexandra shook her head, pinching the bridge of her nose as the laughter escaped. \"Seriously, honey, where do you come up with this stuff?\"\n\nA glass of water landed in front of her, perched atop a coaster. She cut into the salmon. The pink flesh flaked perfectly along the fork.\n\n\"I'll grant you that if I'm pulling out speeches from the darkest hours of World War II to make your day seem better, it probably wasn't the greatest. How's the fish?\"\n\nAlexandra chewed and swallowed. \"Good enough that I wanted to eat it, rather than spraying it all over the table while answering.\"\n\n\"No, seriously. I haven't made it in a while.\"\n\n\"Kira. Are you actually worried it's not good?\" The soy sauce smell lingered in the air, mixing with the mashed potatoes on her tongue.\n\nKira sighed. \"I'm still feeling guilty about not being there for you. And you get here early and I haven't finished dinner and I'm dressed all sloppy...\"\n\n\"Stop. The food is amazing. I'd happily pay for this at a restaurant, but you already know that. And my weird, crappy day is not your fault. If I can't tell your role in my life apart from my mother's, we've got some issues.\" She picked up another forkful. \"Also, if this is sloppy, I'd hate to see how hot you'd have looked if you put in more effort.\"\n\n\"Well, well. You're in much better spirits than I expected. Even if my sweater isn't quite as tight as you might like.\" She leaned back, relaxing. \"Do you want to talk about it more?\"\n\nAlexandra shook her head, swallowing again. \"It's over. I mean, I made the best of it. You saw the Facebook post too?\"\n\n\"Yeah, some chick tagged me in a photo and claimed she was my girlfriend. It even sent that little note about confirming I was in a relationship with her.\"\n\n\"Well, what did you do?\" It wasn't so easy to write that post while blinking away tears. Even if it's just the photo with four short sentences and a hashtag: \"So, the Tribune put a photo of me in the paper this morning! Yes, I cut my hair. Also, I'm a lesbian. Kira and I wish you all a Merry Christmas. #finallyout\" She'd slammed the laptop closed after posting and hadn't been online since.\n\n\"Oh. She was cute, so I accepted and posted something semi-flirty. I mean, wouldn't want to come on too strong, right?\" Another wink behind the thick-rimmed glasses.\n\n\"Of course not. I mean, that might result in you having to make me dinner or something.\"\n\n\"Like I don't make dinner most nights.\"\n\n \n\n\"That's a far better option than me cooking,\" said Alexandra. \"Unless you really, really like Hot Pockets.\"\n\n\"Depends. How drunk am I?\"\n\n \n\n\"How drunk are you usually at eight o'clock?\"\n\n\"Touch\u00e9, Henderson. Although, with our nightly happy hour thing we've been doing...\"\n\nOh, you tease. 'Happy hour' meaning our pre-dinner glass of wine while wearing lingerie. Which means we've been eating dinner pretty late recently.\n\n \n\n\"You're blushing,\" said Kira.\n\n\"Mind was wandering.\"\n\n\"Away from mashed potatoes and steamed carrots. Shame.\" The blonde paused, flicking a stray hair away from her glasses. \"You haven't checked your Facebook recently, have you?\"\n\nA chill passed through Alexandra. \"No, why?\"\n\n\"It seems we went a little viral. You got like, several hundred comments. Your friends, my friends. My brother. Hell, my mom said we looked cute. Apparently the photographer even saw it -- she said she wished she'd gotten our names last night.\"\n\n\"I wish she'd gotten permission before letting the paper run it,\" said Alexandra.\n\n\"Well, yes, there's that.\"\n\nThey ate in silence for a moment.\n\n\"Your friend Sam, the one you're bringing to the game Saturday. Is her name Reynolds?\"\n\n\"Yeah, why?\"\n\n\"One, she left an incredibly supportive comment. Two, she's the Sam, I'm assuming? The one you've hooked up with a couple times?\"\n\n\"She is.\"\n\n\"Alex, she's a total fucking cutie! Way to hide the damn ball on that one. What did you call her, a 'typical soccer player chick?'\"\n\n\"Sounds about right. Also, she doesn't really talk. So I'm kinda nervous about bringing her to a team that has semi-required social functions when we win. And let's face it, we pretty much always win.\"\n\n\"Uh, you're saying that like Luc\u00eda talks or comes to social events. Aside from getting hammered last time. Does Mette like social events? Sweetie, besides Meg and me, you're basically talking about a whole group of socially awkward jocks who need two drinks to act normal.\"\n\n\"Gee, thanks. Butt.\"\n\n\"Well, accurate or no?\" Kira stuck her tongue out.\n\n\"Accurate. Listen, I'm a nerdy jock lesbian. So that makes Sam Reynolds pretty much my tribe. I hope you and Megan the Sky Goddess can deal with that.\"\n\n\"I hope for everyone's sake that Meg Riis and her non-pilot wife don't take as much to Sam as they did to you. That might be dangerous for the young lady.\"\n\nVisions flooded Alexandra's head. Herself eating Mette in the living room; on her back in the bedroom, the Riis ladies and Kira combining to force thunderous orgasms from her wracked body; the glass-walled shower, where she and Meg switched places going down on Kira and Mette until the hot water ran out. Yes, it might be a little much for poor Sam to handle. ",
        "\"You're blushing again.\"\n\n\"Mind was wandering again.\"\n\n\"Can't imagine why. I won't lie, that was probably the hottest night of my life,\" said Kira.\n\n\"So your mind was wandering as well.\"\n\n\"Problem?\"\n\n\"Oh, none. I was just wondering if you have any exams tomorrow.\"\n\n\"I do not. Last one Friday morning, so plenty of time.\" Her eyes drifted over Alexandra's shoulder to the bedroom door.\n\n\"Yes, that's what I was thinking. Maybe I'd like that drink after all. Our usual happy hour, just a little later?\"\n\n\"Call it a digestif.\"\n\nOh, right. You speak French, you and that fancy accent. \n\n\"Whatever. I'll go change into the proverbial something more comfortable. Surprise me with the drink, mmkay?\"\n\n\"Less is more, honey,\" Kira teased.\n\nFine, thought Alexandra. You ask for that, you get it. \n\nIn the bedroom, she stripped, then searched the closet floor until she found her target: a pair of six-inch heels, cherry red. For special occasions only. And if you wear them outside the apartment, I'll die. \n\n \n\nAlexandra cinched the thin ankle strap. Yeah, she thought. You thought you'd die laughing, but maybe not. Now, for the rest.\n\n \n\nShe flicked through the lingerie sets hanging on her side of the closet. \"Black lace, black lace, fishnet, black satin, satin and lace...more fishnet,\" she mumbled to herself. \"You fucking slut.\" She stopped when her fingers danced across a lacy chemise, backless with mesh cutouts.\n\n \n\n\"Less is more,\" she said, sliding back into the chair. Two small, egg-shaped glasses sat on the table.\n\n \n\n\"Port,\" explained Kira. She slid past Alexandra, heading for the bedroom. \"Wait a moment.\"\n\n \n\nAlexandra sniffed the opaque red liquid. It smelled sweet but heavy on alcohol. She held the glass to her nose and closed her eyes, savoring the subtle aromas.\n\n \n\nSomething slid around her head. Mmmm. Blindfold. Hands deftly tied the silk, tightening and releasing as the knot settled into place.\n\n \n\n\"It's just a drink after all, isn't it?\" The voice in Alexandra's ear was close, breath hot on her neck.\n\n \n\n\"I take it you didn't change that quickly?\"\n\n \n\n\"Wouldn't you like to know, my gorgeous little lover? Perhaps I slipped on a bodystocking or something simple in that time. Perhaps I didn't change at all. Perhaps I'm completely naked except for shoes. In which case, missy, you're overdressed.\"\n\n \n\n\"Less is more,\" Alexandra repeated. I really can't see anything. She could be completely naked and I wouldn't know. I'd be missing all that tan skin, the shoulder muscles, that wonderful space right between her breasts. And I have no way of knowing. \n\n \n\n\"Is it comfortable?\" Kira's voice came from across the table now.\n\n \n\n\"Yes.\" With the blindfold on, every sound was heightened. Her own breath; the sound of Kira's heels scraping on the floor; the clink of another small glass on hers.\n\n \n\n\"To you, Alexandra. And don't respond with 'whatever.' I mean it. I'm sorry about how it happened, but I'm so proud of you for coming out and how you've handled it.\"\n\n \n\n\"Thank you.\" Alexandra sipped the wine. Flavors exploded in her mouth: sweet fruit, but then the singe of alcoholic aftertaste. \"This is really good.\"\n\n \n\n\"I got it in Portugal last summer. Been saving it for a while.\"\n\n \n\n\"Mmmm.\" Like a nice red wine but half as much liquid. Compact flavors. \"Tell me more.\"\n\n \n\n\"About Portugal, or the wine?\"\n\n \n\n\"Either.\"\n\n \n\n\"Well, I was only in Portugal for four days, so I'll pass on that. I liked it.\"\n\n \n\n\"Wanna go back?\" Shit. Too impulsive. She'll think I'm angling for something.\n\n \n\n\"Only if you come. I hope you have a serious case of the travel bug, honey. Really.\"\n\n \n\n\"With you? Hold my hand and I'll hold my passport.\"\n\n \n\n\"I like you, Henderson. Just a little bit.\"\n\n \n\n\"You too. Manning.\"\n\n \n\n\"So, the wine,\" Kira said. \"You've never had port before?\"\n\n \n\nAlexandra shook her head.\n\n \n\n\"First thing to know is it's strong. It's 20% alcohol. Therefore the small glasses. By law all wine sold as port is from Portugal, and yes, it's mostly from around Porto. Port, port, porrrrrt. This is a ruby port, which means it should be sweet but with a nice bite at the end.\"\n\n \n\n\"It certainly has that.\" \n\n\"So,\" said Kira. \"Last time I blindfolded you I told you that next time we'd do something new. Are you ready for that tonight?\"\n\n\"Always.\" The wine rushed to her head. A tingle spread across her exposed skin. \"Something new\" has invariably meant something kinky. And something I've loved. \n\n \n\n\"But not for a few minutes. For now, we have wine, and we talk about our upcoming date.\"\n\n\"Date?\"\n\n\"Yes,\" said Kira. \"On Friday, to celebrate surviving the semester. Details forthcoming, okay?\"\n\n\"More surprises,\" said Alexandra. The soft blindfold grazed her eyelashes. \"What's tonight's?\"\n\n\"Drink your wine, honey.\" Kira's voice had changed subtly. The way she sounds when she's about to close some handcuffs around my wrists and spank me until I beg to cum. \"And maybe tonight it's surprises, plural.\"\n\n\"Mmm.\"\n\n\"First one. I think it might be hot if a day that started with a photograph ended with some photographs.\" Her voice had dropped lower. The glass clinked softly onto the tabletop. \"What do you think?\"\n\nI think that if you'd asked me that question three months ago, I'd have told you that never in a thousand years would I allow a partner to photograph me in lingerie. Or naked. And now my body is practically twitching at the idea. \n\n \n\n\"I think that sounds like a plan.\"\n\n\"We'll do it with your phone, so the pictures are yours to use as you please. Wait.\"\n\nAs if I'm going somewhere, thought Alexandra. Sitting here blindfolded in six-inch heels with a glass of wine to keep me company. \n\n \n\n\"Smile,\" said Kira a moment later.\n\nAlexandra automatically smiled, then lifted the glass to her lips. The sweet liquid filled her mouth, final drops sliding onto her tongue.\n\n\"For security, Miss Henderson, it might be better not to use your birthdate as your passcode.\"\n\n\"Then you shouldn't do the same, Miss Manning.\"\n\nFingers arrived under her chin, lifting it slightly.\n\n\"You sneaky little bitch,\" said Kira. \"When did you steal my phone?\"\n\n\"You were in the shower. I was going to leave you a slutty little selfie on it, but then I chickened out. Thought it was an invasion of privacy or something.\"\n\nThe finger lifted her chin higher. Soft, full lips met Alexandra's, tasting of the same sweet wine.\n\n\"Well, great minds think alike,\" the husky voice said. \"These pictures are gonna be so sexy. You look like a perfect little slut, honey. Now, are you ready to act like one?\"\n\n\"Always.\"\n\n\"Good girl.\"\n\nAlexandra felt a shiver grip her body as Kira's hand gripped hers. She struggled to her feet, teetering slightly on her heels.\n\n\"You'll manage,\" said Kira, leading the way to the bedroom. \"Onto the bed.\"\n\nThe fingers dropped, forcing Alexandra to navigate by memory and touch. She slid perfectly onto the soft sheets, rolling onto her back. And I know better than to take the shoes off.\n\n\"Well done, slut. Almost like you've been there a few times.\" She paused. \"Yes, I'm taking more pictures.\"\n\nHer body slid atop Alexandra's, hands roaming the smaller woman's sides. Alexandra wrapped her arms around her lover, drawing her in for a lengthy kiss.\n\nHer hair is up, she catalogued. Shoulders bare too. Their tongues played aggressively, mouths locked tightly. Hm, something with a halter top, she thought as her hands met fabric on Kira's neck. Teeth bit her lower lip.\n\n\"Mmmmm,\" said Alexandra, her lip pulled slightly away.\n\nThe lips explored her jaw, then her neck. Whatever she's wearing covers her entire front, she thought. Lacy, thin. Maybe even sheer. I can feel her nipples stiffening through the fabric. Mine too. Smooth legs intertwined with her own. Kira's body pinned her into place, hands working lower, to the very bottom of the chemise.\n\n\"I think this needs to come off,\" Kira's voice whispered.\n\n\"Yes, please.\" God, I'm so turned on I can smell it. \n\n\"Hands up.\"\n\nAlexandra obeyed, and the lacy fabric floated free. Cold air teased her skin, followed by delicate fingers. Lips brushed her own, the lacy fabric on Kira's torso returning against Alexandra's breasts.\n\nThey kissed, Kira's hands holding Alexandra's arms straight above her.\n\n\"I love you,\" Kira whispered.\n\n\"You too.\" The kisses moved down her body, Kira's long arms still holding hers high.\n\n\"Here comes something new,\" said Kira. Her tongue slid down Alexandra's body, tracing her midsection. Alexandra moaned as it deviated to her hipbones, then abruptly stopped. \"Ready for a new set of cuffs, babe?\"\n\nYes, hell yes. Alexandra nodded.\n\n\"Good. Turn over.\"\n\nThe soft sheets brushed her as she turned over. Kira's heels clacked across the hardwood floor. Stilettos, Alexandra thought. Her chin settled onto the mattress.\n\nSomething cool tightened around her wrist.\n\n\"It's leather,\" said Kira. \"It'll warm up. One more.\"\n\nThe sound of a chain scraping through the slatted headboard was followed by the same cool feeling on her other wrist. She's right. It's already getting warmer.\n\n \n\n\"Comfortable?\"\n\nAlexandra nodded again.\n\n\"Good. It's been too long since I cuffed you, you little slut.\"\n\n\"Mmmhm, it has been.\" Meaning it's been more than three days. Same since she's spanked me.\n\n \n\n\"Ass up, please.\"\n\nAlexandra rose to her knees, sliding forward. The tension on her wrists eased.\n\n\"First, the before...\" She felt Kira shift to grab something from the bedside table. Oh. More pictures. \"Arch your back, slut.\"\n\nShe followed the instruction, aware of her ass protruding lewdly in the air.\n\n\"Oooh. You'll like those. Your ass looks so fucking juicy. Too bad I need to slap it, right?\"\n\n \n\nThe first slap landed on the right side. A rush of pain and exhilaration slammed through Alexandra, her adrenaline kicking into overdrive. The smack was followed by more, palm cracking against bare flesh.\n\n\"Ah! Yes, fuck! Pleeeeeeease, more...\" Alexandra paused for breath.\n\n\"More, you asked for?\"\n\n\"Yessss.\" Delicate fingertips traced the curve of her hip.\n\n\"And why should I do that?\"\n\n\"Because I...\"\n\n\"Smile, honey.\" Kira had moved again, her voice coming from above Alexandra's head. \"Yes, perfect. Your booty looks amazing now, so beautiful and red.\" And stinging. \"But anyway, because you what?\"\n\n\"Because I've been such a good girlfriend.\"\n\n\"Good girlfriend or good slut, honey?\"\n\n\"Both. You know it's both.\"\n\nAlexandra bit her bottom lip, expecting a hard smack. She wasn't disappointed. The jolt and accompanying sting forced a guttural moan from her throat.\n\n\"It is.\" Kira's fingers moved up her body, coming to rest on the buzzed hair on her nape. \"But don't think you don't need to be both.\"\n\n\"Of courssssse,\" Alexandra hissed, just as she was rewarded with two more smacks. If I weren't handcuffed, my hands would be between my legs right now. And this fucking flood of wetness could be put to better use. Her body ached with desire, muscles tensing in anticipation and pulse racing.\n\n \n\n\"That's enough for now, slut. Your booty's redder than a Target ad. Deep breath.\"\n\nWow. I was super lightheaded, Alexandra thought. The cool air filled her lungs, slowing her thundering heartbeat. Hands massaged her ass, kneading it and easing some of the sting.\n\n\"How are you feeling, my beautiful little whore?\"\n\nAlexandra's answer came out as a growl. Fuck you, Kira. You know exactly how I'm feeling.\n\n \n\n\"Words, slut.\" Nothing but a command. Fingertips delicately traced her skin. Bolts of pleasure shot through her body.\n\n\"God, Kira. Fucking horny. I feel fucking horny.\"\n\n\"Mmmm. Good girl. Well, perhaps we can do something about that, yes?\"\n\n\"Please.\" Alexandra wiggled her ass, feeling Kira's hands rake across both sides. She bit her lip. The pressure momentarily eased the desperate ache between her legs.\n\n\"Hold this,\" said Kira. The plastic casing of her phone pressed into Alexandra's palm. \"Screen is facing you and it's set to take pictures that direction.\" Kira adjusted her index finger, moving it just an inch. \"There. Just tap your finger right there if you want to take a selfie.\"\n\nA blindfolded selfie. Well, that's a first. She bit harder on her lip and tapped her finger. I hope it looks hot, she thought.\n\n \n\nAlexandra's train of thought derailed when the distinctive buzzing of the Hitachi wand began. Oh god, not more teasing. \n\n \n\n\"You're ready to cum, yes?\"\n\n\"God, yes, please.\"\n\n\"Too bad. Not quite yet.\" Kira touched the vibrator between Alexandra's legs, drawing forth a new rush of wetness. Then the fingers invaded her: two of them, gently probing inside her. Alexandra gasped as Kira withdrew them, knowing what would come next.\n\n\"One for me,\" said Kira, making loud slurping sounds. \"And one for you.\"\n\nAlexandra eagerly parted her lips. Her familiar taste and scent drove yet more hormones to the surface. She growled, raking her teeth gently down the slim finger. Every. Fucking. Time. Every fucking time she makes me taste myself is like the first. The huge rush of excitement, the emptiness when she pulls her finger back out.\n\n \n\nThen the Hitachi hit its mark. Her body contorted, back arching powerfully. This time Kira left it in place, massaging her smooth lips and soaking slit.\n\n\"Unnnnnhh...\" Alexandra groaned. The lubed-up head spread moisture all around her crotch, vibrating the now-sticky skin. Electricity shot through Alexandra's body. I'm in fucking hyperdrive, she thought. Blindfolded, cuffed, camera in hand. She pressed her index finger again, hoping blindly it was still on the shutter button.\n\nThe buzzing moved to her clit. Alexandra's body stiffened.\n\n\"Ahhhheeeeee! Unh!\" Her voice rose in pitch. A hand slapped her ass, turning the shriek into a grunt.\n\nAlexandra's arms collapsed, sending her face-first into the pillow. She remained there, shrieking into the cool fabric. Her body began to shake as the orgasm approached.\n\n\"Good girl,\" said Kira. \"You going to cum for me, slut?\"\n\n\"MmmmmmHMMMM!\" I'm biting my lip so fucking hard right now and still almost screaming. \n\n \n\nSoft wetness on her hole merged with the powerful buzzing on her clit. Oh god, that's her tongue. And her lips. I can picture her there, mouth between my legs. I'd want to see it, but...ugh. Her hands clenched around the sheets.\n\n\"Cloooo...CUMMING!\" Alexandra shrieked. Her core muscles crunched painfully together, body shaking wildly as Kira's mouth drove her over the precipice. \"FUCK! FUCK! KIRAAAAAAAA! YESSS!\"\n\nKira flicked the Hitachi across her clit, drawing out the orgasm. The cuffs felt tight on Alexandra's wrists as she pulled hard on the chain connecting them.\n\n\"MMMMM! UNH!\" Kira's hands pulled her hips backward, the Hitachi dropping away. She ground her pussy onto her lover's face, trying to smear her juices all over while she gasped for breath.\n\nFinally the wave of pleasure relaxed its grip on her and Alexandra collapsed onto the bed. She felt Kira pry the phone from her fingers. I'm a sweaty mess, she thought, and she's taking pictures. Well, I can delete them. It's my phone.\n\n \n\nSeconds later the cuffs released, followed by the blindfold. Alexandra rolled onto her back, body regaining its equilibrium.\n\nHer vision returned. The room was dark. Kira lay on her left side, kissing Alexandra slowly.\n\n\"Heck of a day,\" she whispered.\n\n\"You can say that again,\" Alexandra replied.\n\n\"Heck of --\" The backhand slap to Kira's midsection cut her off midsentence. \"Ouch! You violent harpy!\"\n\n\"Oh, don't act like you can't handle a slap given the way you hand them out.\"\n\nKira groaned. \"Did you intend that pun, or...\"\n\n\"Of course I intended it, you...violent harpy.\" Alexandra imagined what her face must look like: sweaty, probably still red, but crossed by a tremendous grin.\n\n\"I was afraid of that.\" Kira kissed her lightly on the lips. \"What am I ever going to do with you, Alexandra?\"\n\n\"Besides let me read my whodunit book and get some sleep without any further interference from some blonde chick whose lips taste mysteriously like my cunt?\"\n\n\"Yes, total mystery,\" said Kira, rolling over.\n\n\"Actually,\" said Alexandra, opening to her bookmark. \"I have a pretty good idea already. But we'll have to see how it ends.\"\n\n--\n\nAlexandra stared at the ceiling. Some twenty-five feet above, it was covered in intricate frescoes and golden linework. Columns lined each side of the long room.\n\nI could sit here all night like this, she thought. Massive golden candelabras softly lit the marble columns. She only occasionally checked the end of the large room for Kira's arrival. No surprise, given that I was twenty minutes early.\n\n \n\nAlexandra took a drink from the cider she'd ordered and glanced upward again. Even accounting for the fact that it was the main bar of a historic hotel, the setting was impressive. Glad I dressed up a bit, she thought, playing with a dangly earring.\n\nShe was unable to make out all the painted figures. Alexandra sighed. Too much screen time. She dug into a jacket pocket and removed her rarely-used glasses. Lucky I had them with me.\n\n \n\nThe lenses brought the frescoes into focus. Gods, goddesses, cherubs. And a lot of nudity. I wonder what the more prudish guests see. She eyed a backlit figure, blonde hair swirling away from naked breasts. Perhaps the prudes are also nearsighted. And don't put on their glasses. Nice tits, painted lady.\n\n \n\nThe cider went down smoothly despite its dryness. Alexandra checked her phone. 8:02. She's late.\n\nIt had been a stressful week. Too much classwork, too little relaxation, too little exercise. And then a movie night that another attendee sardonically dubbed \"a drinking night with a movie problem.\" Oh, and coming out.\n\n \n\nWhen she removed her gaze from the ceiling, there was another backlit blonde striding towards her. Nice tits, Kira. Talk to the woman on the ceiling. Have a contest, Alexandra thought.\n\n \n\nShe belatedly stood to wrap her girlfriend in a tight hug.",
        "\"Sorry I'm late,\" said Kira. She pulled Alexandra back in for a kiss. More, please. \"You look fabulous, honey. I thought I'd never get to see you in glasses.\"\n\nAnd there's a reason for that, Alexandra thought, whipping the frames off her face and sitting.\n\nKira frowned, taking a seat on her side of the small table. \"Something wrong?\"\n\n\"No. Just didn't intend for you to see the glasses. I'm kinda self-conscious in them.\"\n\n\"And yet you're sitting in an enormous room in a hotel wearing them,\" said Kira. She wasn't wearing her own glasses, Alexandra noticed.\n\n\"I just wanted to look at the ceiling.\"\n\n\"It's pretty impressive, isn't it?\"\n\n\"It's beautiful. By the way, you look fabulous, too.\" It was true: Kira wore skintight black pants with a white blouse and a black blazer over it. But the devil's in the details: the subtle texture in the jacket and the open buttons on the top of the blouse. \n\n \n\n\"I hadn't done my hair this way in a while,\" Kira said.\n\n\"You should do it that way more often.\" The long blonde strands were slicked back, almost like they were still wet. Combined with bold eye makeup it made for an intimidating package. \"Anyway, it's been a long week. I can imagine you need a drink.\"\n\n\"I do. Did you order at the bar?\"\n\nAlexandra shook her head. A well-timed waiter appeared.\n\n\"I'd like one of whatever she's having. And may we please have some brownies to start and a menu?\"\n\n\"Certainly, ma'am.\" The black-clad waiter flitted away as noiselessly as he'd appeared.\n\nKira turned back to Alexandra. \"Ma'am? I don't look that old, do I?\"\n\nAlexandra sipped on her cider. \"Well, he did call me 'miss,' so...\"\n\nKira rolled her eyes. \"So that's a yes, then. Great.\"\n\n\"Hey, I don't think you look a day over thirty, babe.\"\n\nHer girlfriend leaned her head back, ignoring Alexandra while pretending to study the ceiling. \"Now I know you're yanking my chain.\"\n\nAlexandra stuck out her tongue. \"And so what if I am, old lady?\"\n\n\"Twenty-nine is old now?\"\n\n\"Yes, an old lady who orders brownies in a bar. What's next, a glass of milk?\"\n\n\"Your sarcasm, Miss Henderson, is overtaken by the facts. It happens that the brownies you are about to have are the holotype of brownies.\"\n\n\"Holotype?\"\n\n\"Holotype,\" repeated Kira, running a hand over her slick coif. \"It's a word you might have learned if you paid attention in school. A holotype is a fossil specimen used to define the characteristics of a new species.\"\n\nAlexandra narrowed her eyes. \"You've lost me. I've had one drink and you're speaking gibberish. That suggests it's a you problem, not me.\" Again she stuck out her tongue.\n\n\"These brownies,\" said Kira as the waiter slid them onto the table, \"are the original recipe. The brownie was invented here at the Palmer House.\"\n\n\"I'm sorry, what?\"\n\nKira picked up a gooey brownie and cocked her head. \"You sure it's a 'me problem'? As I said, the brownie was invented here.\"\n\n\"I suppose it never occurred to me that the brownie was invented anywhere.\"\n\n\"I know,\" said Kira. \"Can you imagine the horror of living in a world before brownies? But such was the sad state of affairs until 1893, when Bertha Palmer -- yes, for whom the hotel is named -- asked a chef to come up with a small handheld confection for the World's Fair. The result is in front of us.\" She bit into the confection, closing her eyes as she did so.\n\nAlexandra picked up the other slice and cleared her throat. Kira had still not yet opened her eyes. \"I suppose you don't need to imagine that world. Are these the same as the 1893 version?\"\n\nThe green eyes stared back at her. \"You irritating little strumpet, ruining my enjoyment of dessert.\"\n\n\"We haven't even had dinner yet!\"\n\n\"Yeah,\" said Kira. \"True.\" She picked up the menu that had been left between them. \"Pretty literal minded, our waiter. I asked for 'a menu' and got exactly one menu. Anyway, we can have more brownies later. If you're nice.\" She eyed Alexandra over the menu, sipping her cider.\n\n\"You called me a strumpet. Seriously, that just proves you were there in 1893. It's the twenty-first century, Miss Manning, when women like me are called plain old sluts.\"\n\n\"Suit yourself, strumpet. I'll be having the duck.\" She passed the menu across. \"By the way, Taylor Swift called. She wants her makeup back.\"\n\n\"I got that classic, red-lipped...\"\n\n\"Jesus, Alex. I didn't want you to sing it. It's what, eight-fifteen and you're knocking back cider and singing Taylor Swift. That was a mighty quick comeback, though.\"\n\n\"I'm lightning on my feet...never miss a --\"\n\n\"Good lord. Please tell me you're ready to order.\"\n\n\"Lamb, please,\" said Alexandra to the waiter, who had appeared over Kira's shoulder. \"And a Manhattan. For when you're too sober for your date.\"\n\n\"Certainly, miss.\"\n\n \n\n--\n\nEight-fifteen became nine-fifteen, then nine-thirty. The lamb was succulent, the drink was strong, and the lighting remained low and beautiful.\n\n\"So, a second round of brownies?\"\n\n\"Please,\" Alexandra replied. \"And I won't make fun of you about them this time.\"\n\n \n\n\"You most certainly will not, since I'm ordering a glass of milk for you.\"\n\nAlexandra laughed, eliciting the same from Kira. There's something about her eyes when she laughs. They're just magical. \n\n \n\nHer phone buzzed in her pocket, and she reached to silence it.\n\n\"It's okay,\" said Kira. \"This is a date, but it's not a first date. I'm not going to dump you for checking your phone.\"\n\nYou better not, Alexandra thought. For any reason. I'm way too smitten with you to even contemplate that. \n\nShe glanced at the phone, raised her eyebrows, and turned the screen to Kira. Kira shrugged and pulled out her own phone.\n\n\"Well,\" she said \"it seems we're officially on equal friend terms with Mette and Meg, then.\"\n\nMette: Alexandra and that other chick who comes with her, you're invited to our place for New Year's Eve. Nine o'clock until whenever. Let us know!\n\n \n\nMeg: Oh, and the no shoes rule in our house is suspended. So New Girl better bring her shoe game, or I'll send both of you home.\n\nMette: Or I'll send my wife home with Other Chick/Blondie and keep the better one for myself.\n\nMeg: Ouch, counsel. New Girl, just a warning. Marriage is hell. Don't let Blondie talk you into it.\n\nMette: Yeah, she'll probably just handcuff you to the bed every night. We'd all hate that. Anyway, let us know!\n\n \n\nAlexandra looked up to see Kira tapping out a message.\n\nKira: So you mean if Alexandra's shoes suck, I get to spend NYE alone with Meg?\n\n \n\nAlexandra: Dirty soccer cleats it is, then :)\n\n \n\nAlexandra: Don't worry, Mette. I'll change into heels once they're gone.\n\nMeg responded instantly.\n\nMeg: Careful what you wish for, New Girl. You'd have to play hostess. Mette always goes off to chat up the woman with the best abs.\n\nAlexandra: In which case she'll be talking to me.\n\n \n\nMette: Truth.\n\nMeg: Wait, wait, how did this go from a polite invitation to a discussion of New Girl's abs?\n\nMette: Wifey dear, you're the one who brought up her abs.\n\nAlexandra: I've got some great fucking abs, Megan.\n\nKira: Truth.\n\nMeg: Fine then. Are those abs coming to our New Year's party?\n\nAlexandra and Kira exchanged glances.\n\nKira: They are. I might show up too.\n\nMette: Now, if you'll pardon us, I need to go teach my spouse some manners. Enjoy your night, ladies.\n\nBoth women put their phones aside.\n\n\"You know your relationship is on pretty solid terms when, in the middle of a date, you both whip out your phones and pile into the same group text,\" said Alexandra.\n\n\"Indeed.\"\n\nThe waiter appeared again.\n\n\"More brownies, please,\" said Alexandra.\n\n\"And another Manhattan for her,\" added Kira.\n\n\"But what about my abs, darling?\"\n\n\"Brownies and a Manhattan, miss.\" The waiter blushed deeply -- an impressive feat considering his olive complexion -- and again vanished.\n\n\"Your abs will survive one brownie and another drink. Whether Meg's booty will survive what she's about to get is another matter.\"\n\n\"Oh?\" Alexandra felt heat rise throughout her. Even the implied mention of my favorite kink can do that to me. Yikes.\n\n \n\nKira laughed. \"Oh, hell yes. It's fair to say that Mette and Meg are into quite a lot of the same things we are. Including that one.\"\n\n\"I have to ask, you know.\" So not only are Mette and Megan Riis willing to have delightful shower sex with both of us, they're also kinky. Well, on top of the group sex. \n\n\"Ask what, sweetie?\" Kira sipped her drink, licking her lips as she put down the glass.\n\n\"Have you...um...\"\n\nKira crossed her legs and leaned forward. \"Have I what?\"\n\nYou're teasing me. The warmth in Alexandra's core was spreading, turning into an ache right between her thighs.\n\n\"Have I ever spanked Meg? Is that what you wanted to ask?\"\n\nAlexandra nodded. Her face tingled as the blush took over her whole visage.\n\n\"Oh, bold question, Henderson. You sure you want to know the answer?\"\n\nShe nodded again.\n\n\"Well then.\" Kira winked. \"The answer is hell fucking yes. In fact, Megan Riis was the first woman to whom I ever doled out a spanking. And her booty gets oh so red, dear.\"\n\nThe returning waiter nearly dropped the plate.\n\n\"One, um, Manhattan. And, um, um, brownies. Ma'am,\" he said, staring wide-eyed at Kira, then hustling away.\n\n\"See, he called me 'ma'am' again!\"\n\n\"You're lucky he didn't run away, love. Don't ever chastise me for my manners. Or my jokes.\" She almost spilled the fresh drink from the laughter-induced shakes. \"Seriously, I deserve an apology for having to be seen in public with you. Especially when you go on dates and talk about spanking married women.\"\n\n\"They weren't married then,\" replied Kira.\n\n\"Ah, that makes it a much more civilized topic for public discussion.\"\n\n\"Whatever,\" said Kira, picking up a brownie. \"You liked hearing about it.\"\n\nI did. \n\n \n\n\"So enjoy the brownie and the drink, my beautiful little skank. I'm putting together my apology right now.\" Kira picked up her phone and began tapping and scrolling.\n\n\"What are you doing?\"\n\n\"Apologizing,\" said Kira. \"I know I typically do that with my mouth somewhere else, but perhaps my fingers will need to do for now.\"\n\nThe warmth between Alexandra's legs again made its presence known. Well, hurry up so we can go home and you can 'apologize' properly, then.\n\n \n\nKira was engrossed in her phone. Alexandra pivoted on her chair, relishing the dim lighting and the shadows cast over the room. Other couples leaned towards one another over tables; the bar had grown more crowded; the blurry figures on the ceiling remained in their supervisory position over all.\n\nIt would be strange being up there, she thought, taking a too-large sip of whiskey. Looking at the tops of people's heads all day. Alexandra reached for her glasses again, pondering the figures individually.\n\n \n\n\"There,\" said Kira. \"Apologized.\" She slid the phone into her purse. \"Now finish your drink. We've got places to be.\"\n\n\"Oh?\" She's got one of those sly grins on her face again.\n\n \n\n\"Oh. Don't worry, missy, it's not far. So if you're a little tipsy on those heels, just lean on me.\"\n\nInstead of waiting for the beleaguered waiter to return, Kira paid the tab at the U-shaped bar.\n\nWhat's not far? Alexandra pulled up a map on her phone. Oh, well the ice rink at the Bean is right nearby, but doesn't it close at 10? Another bar? Someplace she'd need to make a reservation? \n\n \n\n\"Ready?\" Kira had returned and tossed her coat over her arm.\n\nAlexandra stood. \"Where to?\"\n\n\"The front desk.\"\n\n\"Sorry?\"\n\n\"The front desk. How many times tonight do I need to repeat myself, honey?\"\n\n\"Until you start making sense. Ma'am.\"\n\n\"Good lord. Fine. We are going to the front desk because I booked us a room for the night.\"\n\n\"A hotel room. In a city we live in.\"\n\n\"Mhm. I wouldn't quite expect someone who is mystified by the origin of brownies to be quick on the uptake, but...Alexandra, it's not about the sleeping, dear.\"\n\nOh. Right.\n\n\"I figured hotel sex would be a nice apology. Yes?\"\n\nYes. \"Well...I mean, you're giving me so much crap you might just owe me a second apology then.\"\n\n\"Fine, fine. I can get you a room service brownie if you really insist.\"\n\nThey had exited the high-ceiling central hall and descended a staircase to the front desk. I'm managing much better in super-high heels, Alexandra thought, looking down at the black stilettos. And just as well we're staying here. Stilettos and Chicago in December equals slipping on black ice equals broken heel equals very sad Alexandra. \n\n\"Hey, uh, space cadet?\" Kira was looking at her with some concern. \"You okay there?\"\n\n\"Oh. Yes. I was just thinking about slipping on ice and breaking my heel.\"\n\n\"Ah, yes, completely normal,\" said the blonde, approaching a smiling desk clerk.\n\n\"Hi, welcome to the Palmer House Hilton. How can I help you?\"\n\nLexi, the woman's name tag read. Cute, too. Blonde ringlets, rosy cheeks, big eyes. \n\n \n\n\"Hi, I just made a reservation online,\" Alexandra cut in. \"Manning. Kira Manning.\"\n\nKira rolled her eyes, shaking her head.\n\n\"Welcome, Ms. Manning. Can I see a form of ID and a credit card?\"\n\nBusted.\n\n \n\nKira opened her own wallet and handed over her license and a card. \"I'm actually Kira. This lady here is drunk on brownies. And maybe a Manhattan or two.\"\n\nTo her credit, the desk clerk laughed.\n\n\"Ooh,\" she said. \"Lucky you. Seems you've been upgraded to a suite.\" She frowned. \"Um, I guess this is a little awkward to ask, but is one king bed okay?\"\n\n\"One king bed is more than okay,\" replied Kira.\n\nNow it was Alexandra's turn to roll her eyes while the clerk blushed. And she's giving Kira a full top-to-bottom -- well, top-to-waist -- inspection while she does it. The little tramp.\n\n \n\n\"As you can see, the actual Ms. Manning is also a bit drunk on brownies. And her own self-assessed awesomeness. Something like that?\"\n\nThe clerk ran a hand through her hair, giggling. \"Ladies, if you think you're the weirdest people I deal with in this job, you've got a lot of surprises coming.\" She slid two key cards across the smooth marble surface. \"Have a wonderful night. And if you need anything, call down here. Ask for Lexi, okay?\"\n\nJesus. She might as well have licked her lips with that last look at Kira. \n\n \n\n\"Lexi, eh?\" Kira pressed the elevator button for the sixteenth floor. \"Cute nickname for a familiar full name, yes?\"\n\n\"Oh, leave it alone. Little hussy stole my name. Next she wants to steal you, by the looks of it.\" She crossed her arms, pretending to pout.\n\n\"Hussy?\"\n\n\"You called me a strumpet, and you have a problem with 'hussy'?\"\n\n\"No, I just didn't realize we had gone back to the 1930s with our insults full-time.\"\n\n\"Whatever,\" said Alexandra, nestling into Kira's arms. \"Are we gonna like, start making out? We're halfway up to our floor.\"\n\n\"Strumpet,\" whispered Kira, dipping her head to kiss Alexandra. The taste of whisky on their lips mingled momentarily. Mmmm.\n\n \n\nThen the elevator door dinged.\n\n\"Ugh, which room?\"\n\n\"Tsk, tsk. What's the hurry? I thought you might wait until next week to finish that drink.\" Kira grabbed Alexandra's hand, guiding her down the lushly carpeted hallway.\n\n\"It tasted really good.\"\n\n\"Did it? Well, I might have some ideas for something that tastes even better.\"\n\n\"Oooh, did you order more brownies?\"\n\n\"Alexandra, I'm either going to marry you someday or fling you out the window this very evening. Your pick.\" She stopped in front of a door at the hallway's end.\n\n\"You can toss me, as long as I get a brownie first.\"\n\n\"Oh. My. God.\"\n\n\"Besides, I doubt the windows...\" Oh. She might not have been talking about my joke. The room had a full-size living/dining area, with a dining room table large enough for six chairs. A TV nearly the size of the windows hung from one wall. The bedroom opened off the sitting area.\n\n\"Dress off, Alexandra,\" said Kira, opening the curtains.\n\nOpening them? She pulled the dress over her head, piling it on top of her jacket.\n\n\"Good. Now, about that makeout?\"\n\n\"Yes, please.\"\n\nKira quickly enveloped her, pushing her against the large table, then down onto it.\n\n\"You don't get to tease me about those abs at dinner and then keep your dress on, do you?\"\n\nMmmm, no. I don't. Her girlfriend's full lips rapidly moved down her body, from her breastbone to just above the waistband of her lacy panties.\n\n\"Oh, right, a makeout,\" said Kira. She slid on top of Alexandra, pinning the slimmer woman against the shiny wooden surface. Their lips met, tongues probing each other's hungry mouths.\n\nAnother night of firsts. Making out on a table in a hotel suite, a curtain of blonde hair all around my face. Alexandra greedily kissed her partner, pulling at the fabric of Kira's blouse.\n\n\"It has buttons, honey.\" Kira popped one open, then rolled sideways so Alexandra could handle the rest. Her kisses moved to Alexandra's neck, her jawbone, then to her ear, where they transmuted to an aggressive nibble.\n\nYes, please. Alexandra's heart pounded. Kira placed a hand on each side of her torso, pinning her with her body. Fine. Gonna get that stupid shirt off you, then. \n\n\"Nice job, slut,\" growled Kira, tossing the white top aside. Alexandra immediately went to work behind her girlfriend's back, unclasping her bra. It fell onto Alexandra's chest. \"In a hurry, are we? Need the post-sex brownie?\"\n\n \n\nKira's hands roamed around Alexandra's torso, tracing the top and bottom of her bra before the fingers teased her flat stomach.\n\n\"Mmm, abs.\" Kira followed her girlfriend's centerline with the tip of her tongue, pulling the panties down an inch to tease the bare mound. \"And more.\"\n\nAlexandra's legs were wrenched apart. The cool tabletop on the backs of her thighs sent a shiver up her spine, contrasting sharply with the pulsing heat of the rest of her body. Kira's fingers rested delicately on the front of her panties, then pressed down into the soaking slit.\n\n\"Over here,\" said Kira, abruptly taking Alexandra by the hands and pulling her upright. Alexandra felt herself stumbling towards the wall. Four-inch heels; occupational hazard anywhere.\n\nAnother shiver went through her, this time from the frigid window pressed against her back. Kira's mouth and hands worked systematically across her body. She felt her bra fall away, softly landing on the carpet.\n\nAlexandra moaned. Her girlfriend's breasts pressed hard against her own, hands holding Alexandra's head in place. The kissing became fevered, desperate. And I'm against a window. People down there on the street can see us. ",
        " \n\nThe thought pushed Alexandra into a higher state of arousal. Butterflies fluttered in her stomach; her blood pumped harder and harder; a sheen of sweat began to form on her skin. Mmm. Mmm hmm hmm. \n\nAnd then it stopped. She opened her eyes. Blinked twice. Kira was already halfway across the room, then reaching for the light switch.\n\n\"Where are your glasses?\"\n\n\"My... um, in my coat pocket. Right side.\"\n\nShe looks like a fucking goddess now, tan skin in the dim light, her shadow on the wall. Alexandra stood still as her girlfriend unfolded the spectacles and placed them.\n\n\"There,\" said Kira. \"Now let's get you turned around, so you can watch the world out there. See if anyone sees what I'm doing to you.\"\n\nAlexandra's body spun around. Her palms slapped the cold glass, body naturally bending at the waist. Fingers traced the curve of her booty. The thin fabric around her waist began to move.\n\n\"Step out of them.\"\n\nAlexandra obeyed, feeling the sticky fabric cling to her as Kira slid the black underwear away.\n\nI'm naked in front of a large window, looking down on a busy city street. My nipples... she gasped as Kira pushed her torso forward and her nipples brushed the glass. Wow.\n\n \n\nArms wrapped around Alexandra, sending tiny jolts across her skin. Fingers traced her jaw; her collarbone; her breastbone, finally settling on her nipples. Alexandra gasped anew. She knows just the right amount of pressure to apply.\n\n \n\nWhen Kira's hand slipped down to Alexandra's waist, she became conscious of the urgent need between her legs.\n\n\"Please...\" she whispered.\n\n\"Please what?\"\n\n\"Please...finger me...\"\n\n\"Finger your what?\" Alexandra felt her nipple pinched hard.\n\n\"My pu-\"\n\nA harder pinch.\n\n\"My cunt,\" Alexandra stammered, blinking back the pain. Ugh, and it felt so fucking good, too.\n\n \n\n\"Good girl.\" Kira's hand arrived on Alexandra's smooth mound, pushing downwards into the slickness between her legs.\n\nIt triggered an instant wave of pleasure. I've needed her to touch me like that for hours, Alexandra thought. Her body squirmed under the attention, pressing ever-harder against the glass.\n\nThe city outside faded in and out of Alexandra's vision. A sea of lights, but anyone out there who looks at this window will see me. My tits on the glass, my hands spread wide, my writhing body. The big tits pressed into my back. No doubt what's going on.\n\n \n\nKira's hand landed, her palm pressing against Alexandra's clit as a finger curled inside her. She pressed her hips against the hand, itching for more. A second finger joined the first. They slid in and out, filling the tight, over-lubricated hole.\n\nThe sounds of vigorous finger-fucking were clearly audible. Alexandra began to moan, biting her lip while staring at the street below. If only someone looked up, she thought.\n\n\"Unnnnh, mmmmffff...\" The sounds that escaped her mouth barely qualified as voluntary: they were just her body's reaction to the fingers inside her and on her breast. Her hips went into overdrive, pushing her pelvis hard onto the slender digits.\n\n\"Ooooh, she likes it,\" whispered Kira. Directly in my ear. \"Fucking herself on my fingers like that.\"\n\nIt's so true, Alexandra thought.\n\n\"Well, go ahead. Fuck yourself like a good little slut.\"\n\nAlexandra growled. Her body took total control, desperate in its chase for the orgasm that was fast approaching. Her vision narrowed and the ever-louder sounds of pleasure seemed further away by the second.\n\n\"Ooooooh! Ooooohfuck! Fuckfuckfuck!\"\n\nHer legs felt like jelly as they trembled. More and more, her weight leaned on her hands, fingers spread wide across the glass.\n\n\"Gah unnnnh yeeeeeeeeeeeesssssss!\" The explosion of pleasure came from deep within her, gushing outward and overwhelming all her senses. She felt the cold of the window on her torso as her muscles contracted, body milking the fingers inside her for every ounce of pleasure they offered. Kira's hand moved from her nipple to her sternum, nails carving five paths across her skin.\n\n\"Eeeeeeeeaaaaaaahhhhhh!\" One final, hard contraction of her abs signaled the end of the release. Alexandra gasped for air as her spent body leaned against the glass. Gentle kisses covered her neck and upper back.\n\n\"I love it when you cum like that, sweetie,\" Kira said.\n\nAlexandra said nothing. Can't...talk. She slumped slowly downward until her body began to recover.\n\nSomewhere in the bedroom, she heard Kira speaking softly. The taller woman hung up the phone just as Alexandra entered and collapsed on the king bed.\n\n\"No fair,\" she muttered. \"You didn't even take off your pants.\"\n\n\"Well, you of all the archaic sexist insults, that can be changed in due course.\"\n\n\"Of course, harlot.\" She nestled into Kira's body, absorbing the warmth.\n\n\"Floozy.\"\n\n\"Trollop.\"\n\n\"Tart.\"\n\nAlexandra thought for a moment. \"Wench.\"\n\n\"Close enough,\" said Kira. \"Bawd.\"\n\n\"Bawd? For fuck's sake, lady. What the hell does that even mean?\"\n\n\"The same as the others. I went down that rabbit hole when I ran into a case in class in which someone was charged with 'keeping a bawdy place.' In other words, being a madam.\"\n\nAlexandra interlaced her fingers with her girlfriend's and sighed. \"Well, I suppose you win, in that event. Who were you calling?\"\n\n\"The front desk harlot. I wanted brownies. She said she'd bring them up herself.\"\n\n\"She what?\"\n\n\"You heard me. Little blonde Lexi is going to bring us some brownies. On the house, in her words.\"\n\nThere was a knock at the door.\n\n\"Well, well,\" said Kira, bouncing to her feet. \"Speak of the devil.\"\n\nThanks so much for reading. As always, I really appreciate feedback, whether that's via ratings, comments, or the actual \"feedback\" tab in my profile. I hope y'all are on the path to a better 2021. Hang in there, more to come! ~ BE\n\n \n"
    ],
    "authorname": "Blair_Erickson",
    "tags": [
        "blindfold",
        "college lesbian",
        "coming out",
        "handcuffs",
        "hotel sex",
        "lesbian",
        "lesbian bdsm",
        "lesbian spanking",
        "lingerie",
        "spanking"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/a-new-alexandra-ch-12"
}
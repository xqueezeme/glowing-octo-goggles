{
    "title": "Stray Cats Ch. 05",
    "pages": [
        "This is continuation of a reprint of a story that I posted in 2015 on this site. I was rereading it lately and correcting some of the typos (I'm sure I missed some) when it dawned on me that perhaps I should repost this story (in the original chapter format) for readers today. It's still relevant, well most of it is. I hope you enjoy it. \n\nOh, as a reminder, you might consider going back to read the opening chapters as much of who these characters and the new or subsequent characters who are introduced in this chapter, are better understood with that foundation. But, as always, it's your choice. \n\nPlease leave a comment when you've finished, feedback is the lifeblood of a writer. \n\n--Dreamweaver594 \n\nKismet and ER \n\n=ONE= \n\nAlex walked into Kim and Ray's new apartment. \"Hey, where do you want me to put this box? It's marked K-Bdm. Maybe Kim's bedroom?\" \n\nKim poked her head out of the bathroom door. \"That's my stuff. It belongs in the back bedroom. Can you put it along the far wall? Thanks Alex.\" \n\nAlex carried the box down the hall followed by Rachel and Amanda each carrying boxes and totes. The morning started when everyone showed up at Kim's old apartment. Ray and Kyle picked up the rental truck early in the morning and had already loaded what little he had into it before they arrived at Kim's. \n\nThe rest of the morning was filled with packing the last minute items in Kim's apartment, loading the rest of her stuff in the rental truck, and unloading it in the new place. By mid-day the bulk of the move was finished and Ray drove off with the rental truck and to pick up lunch. \n\nWendy finished folding and setting the linens into the hall closet. She walked into the kitchen to find Kim and Amanda filling the cabinets with dishes and bowls. \"This is a nice little apartment you two found. And the neighborhood is nice too; it's not to far from the condo complex where Kyle and I live. I've sold several condos around here and the people tell me that everyone is friendly and they watch out for one another.\" \n\n\"Thanks Wendy, I know we're going to love it once the dust settles.\" \n\nAlex and Rachel joined them in the kitchen. \"The bed is assembled.\" \n\n\"If you want we'd be happy to put on the sheets and duvet on the bed for you,\" Rachel added. \n\n\"Thanks guys, the linens are in the hall closet.\" \n\nWendy walked out into the hallway. \"I'll show you.\" She opened the closet door and pulled out a set of sheets and pillowcases. \"I think these all match.\" Then she giggled and passed them both to walk into the living room. Kyle was busy stuffing Ray's bookshelf with books and magazines. He was surrounded by empty boxes. \n\n\"Whew, moving students is almost as bad as moving lawyers.\" He chuckled as he stuffed another stack of folders in one of the shelves. \n\nWendy knelt down and wrapped her arms around his neck giving him a big hug and kiss. \"Thank you for doing this sweetheart, I know you're busy with work and all, but you've been such a big help.\" \n\nKim leaned around the corner into the living room and grinned. \"You both have been wonderful, thank you. Everyone, this move has been so easy with all of you.\" \n\nAbout then the apartment door flew open and Ray walked in with a stack of pizza boxes. \"Lunch break, everyone! Well, maybe a late lunch, there was a line at the check-in counter. Lord they move slow at rental companies.\" \n\nAmanda walked back into the living room. \"I think it's part of their training.\" \n\nRachel followed Alex into the living room. She was holding an extra set of pillows. \"Kim, do you want me to use these two for the pillow shams?\" \n\nRay dropped the pizza boxes on the coffee table. \"What are pillow shams?\" \n\nKyle chuckled still stuffing Ray's bookshelves. \"Oh, you have so much to learn, grasshopper.\" Ray grinned and Kim giggled. \n\nThe rest of the afternoon went by quickly; with everyone's help Ray and Kim's move went flawlessly. \n\nRay walked into the living room to find everyone drinking sodas and laughing about Tom Reilly's latest antics. \"Do you guys want to go out for dinner? I'm buying.\" \n\nRachel groaned. \"Thanks Ray but I can't, I have a late shift tonight at the club.\" \n\nAlex got up and picked up a few soda cans to take them to the recycling bin in the kitchen. \"Me too, I have an early shift at the convenience store otherwise I'd be happy to join you. Can I get a rain check?\" He tossed his keys to Rachel with a grin. \"You're driving as usual?\" \n\n\"Love to, thanks.\" \n\nRay was beginning to look a bit disappointed. \"It's okay, rain checks are no problem. Wendy? Kyle? Amanda?\" \n\nAmanda chirped up with a grin. \"I'm in, but somebody will have to give me a ride home.\" \n\n\"That sounds great, Ray. There's a little burger joint on the corner we've been to before, not too expensive either, just the thing for a student's budget. Kyle and I will meet you there.\" \n\n\"Great.\" \n\n=TWO= \n\nThe emergency room at St. Mary's Regional Hospital was strangely quiet at the moment. Triage was working efficiently to move the small amount of waiting patients through the screening process and there didn't seem to be many serious cases to deal with for a change. Some minor scrapes and bruises, a broken arm and a few cuts. It looked like it was going to be a quiet night. \n\nSuddenly, the radio dispatch crackled and hissed. Paramedics from engine house four were bringing in a stabbing victim. They shouted his vitals over the radio as the ambulance wove through traffic towards the hospital. Moments later a gurney burst through the outer doors of the emergency room as three paramedics shouted for help from the ER staff. \n\nIn a flash, Alex Wells was moved through a maze of corridors, up an elevator, and into operating room number three. Standing alone downstairs in the emergency room reception area, a frightened Rachel Thompson stood shaking and sobbing. An ER nurse ushered her to the couch in the waiting room. \n\nSeveral minutes later Amanda rushed through the outer doors. She found Rachel curled up and sobbing on a couch in the waiting room. \"Is he all right? Where is he?\" \n\n\"He's in an operating room right now I think, I don't know anything yet.\" \n\n\"What happened?\" \n\n\"We were at Moulin Rouge. I was working my usual shift. Alex got off earlier than I did so he took a cab over to meet me. We were just hanging out when a fight broke out across from the bar. I don't know who or what started it but it was getting ugly quick. A guy had one of the waitresses, Susan I think, by the neck and was threatening her with a knife. I shouted at him and he pushed Susan away and lunged at me. But before I could move Alex was between us. The bastard stabbed him three times before he ran off. Girls were screaming, people were scrambling out of the bar, there was blood everywhere. Sydney, the manager, called 911 then Susan and I did what we could to stop the bleeding. Oh God, Amanda, it was like I was watching him die and there was nothing I could do to stop it!\" \n\n\"Okay Sis, okay.\" She hugged Rachel and held her tight while Rachel sobbed onto her shoulder. \n\nEventually Rachel's tears began to slow and she lifted her head up to kiss Amanda on the cheek. \"Thank you, Sis.\" \n\n\"Let me go get some tissues, I'll be right back.\" Amanda left Rachel sitting on the couch and wiping her eyes as she walked briskly towards the triage desk. She grabbed a box of tissues then glanced at the nurse behind the counter. \"Hi, Alex Wells was brought in a while ago; he was stabbed in a club tonight. Can you tell me what's happening with him?\" \n\nA triage nurse looked up from her computer screen. \"He's in the operating room right now, ma'am. Are you in his family?\" \n\n\"Yes, I'm his sister.\" \n\n\"Here, I need you to fill out some consent forms. You can bring them back to me when you've finished.\" \n\nAmanda looked at the clipboard stuffed with medical release forms and sighed. She added the clipboard with the stack of consent forms to the box of tissues and walked back over to Rachel. She handed the tissue box to Rachel and sat down next to her. \"He's in the operating room, that's all she could tell me and then she handed me all this stupid paperwork.\" Amanda sighed again as she began to fill out the forms. \n\nRachel wiped her eyes and rested her head on Amanda's shoulder. She mumbled softly. \"He asked me to stop working there.\" \n\n\"What sweetie?\" \n\n\"Alex, he asked me to stop working at Moulin Rouge. On the way over in the ambulance, he held my hand and asked me to stop working at the club. He said it was too dangerous. Oh God, Amanda, it's all my fault.\" \n\n\"Now stop that right now, Rachel. If it's anybody's fault, it's that bastard who stabbed Alex.\" She leaned over and kissed Rachel on the forehead. \"But sweetheart, you really need to stop working there. It's getting way too dangerous.\" \n\n\"I was working there so that I could afford nice clothes and to help pay for all the HRT drugs I need daily to keep my body in check. My part-time job isn't enough. \n\n\"I'll buy you nice clothes sweetheart, and all the drugs you need. Just stop working there. I worry every night you go off to work...so does Alex. Why do you think he spends so much time there?\" \n\n\"I never realized...\" \n\n\"Rachel, my sweet lovely Rachel, you and Alex are the loves of my life, I don't ever want to lose either of you, ever.\" \n\nAt that moment, Wendy arrived with Kyle, followed closely by Kim and Ray; they all rushed through the waiting room doors. Wendy looked around frantically until she spotted Amanda and Rachel sitting at the far end of the waiting room. \"We just heard! How's he doing?\" \n\n\"He's still in surgery and they haven't told us anything else yet.\" \n\nWendy moved to sit beside Rachel and Amanda. \"I'm so very sorry, is there anything we can do?\" \n\nAmanda hugged her and kissed her cheek. \"Just pray it's not serious.\" \n\nThe rest of the family sat close and waited for the emergency team to do their work. An hour or so later, a doctor came through the emergency room doors. His nametag read Dr. Fred Willis. \"Amanda Simpson, Rachel Thompson?\" \n\nEveryone stood up and clustered around the doctor. \"I'm Amanda and this is Rachel.\" \n\n\"He's out of danger and recovering in the ICU. We can't let anyone see him until the anesthesia wears off and he regains consciousness. There was a large loss of blood and several knife wounds but only one was severe. It punctured his kidney on the left side. We'll have to do some tests to determine if the damage will be long term. He's young and strong so that will improve his chances.\" \n\nRachel smiled bleakly. \"How long before we can we see him?\" \n\n\"Not for a while yet, I'll send one of the IC nurses out once he's regained consciousness and moved to a room.\" The doctor looked at all the concerned faces then recognized a familiar one. \"Wendy, what are you doing here?\" \n\n\"Hi Fred, my good friend Alex is here, we're kind of family. How bad was it?\" \n\n\"Well, fortunately, the blade didn't do too much serious damage. He'll have a few scars to brag about I suppose. He's in stable condition but like I said, he'll be out of it for a while. After that, I would guess several weeks for full recovery. Wendy, I know you said you're family but do you know about him?\" \n\n\"What do you mean?\" \n\n\"About his physical condition, it looks like he's in the middle of a gender change. These scars may disfigure him if he wants to continue with that change.\" \n\n\"Thanks Fred, could you keep his physical condition private please, even with the medical staff. He's very sensitive about it.\" \n\n\"I understand. I'll speak to the duty nurse; she'll keep it under her thumb.\" \n\nRachel reached forward and shook the doctor's hand. \"Thank you Doctor Willis.\" Amanda and the rest of the family thanked him as well while Wendy walked over to the far side of the waiting area and made a phone call. \n\n\"Don? Hi, it's Wendy Bingham. Yes, thanks, sorry for calling so late. Look, I need to ask a favor. A friend of mine was just in a pretty severe accident and Fred Willis told me that the scars woud be rather disfiguring. Is there anyway you can come in and have a look? He's here at Saint Mary's Regional. Oh, thank you, I appreciate it. I'll call you tomorrow morning when we know more and I'll give you the rest of the details. There are a few things I will need to explain. Yes, the attending is Fred Willis. Okay, I'll ask him to call you. Thanks Don, I'll talk to you tomorrow morning. Say hello to Margaret for me, okay, good night.\" \n\nFor the next half hour Wendy was on her cell phone calling in favors, organizing a surgical team to handle Alex's situation. Amanda and Rachel were amazed at her connections. \n\nMeanwhile Kim was on her phone calling her father, a state's attorney. She told him that Alex's attacker was still at large and she wanted to make sure the cops didn't give it a low priority. All in all, the family was doing what they could to help Alex pull through. \n\nAn hour later the ER duty nurse came out into the waiting room and told them that they could see Alex now. \"He's on the fourth floor in room 4005. But only for a minute, he's still under the effects of the anesthesia and he'll be rather groggy.\" \n\nThey quietly filed into the elevator, each one holding the other's hands firmly, all with anxious looks on their faces. The elevator chime announced their arrival on the fourth floor. Alex's room was down the corridor and in a cluster of rooms that centered on a nurse's station. The family nodded to the nurses as they filed by to room 4005. \n\nIn the room, a variety of tubes and wires were strung from IV bags and monitors and attached all over Alex's body. A nurse was re-checking his IV to make sure it was secure. When she saw the family arrive she smiled and politely ducked out of the way and back to the nurse's station. \n\n\"Hey babe, how are you doing?\" Rachel gently touched his arm; her eyes were brimming with tears. \n\nAmanda moved to the other side and leaned forward to place a kiss on his cheek. \"Hey there sweetheart.\" \n\nThe rest of the family gathered around close and touched him gently as Alex's eyes fluttered open. \"Hi.\" His voice was raspy and soft. \"From the looks on your faces it looks like you're here for a funeral.\" \n\nRachel kissed his other cheek. \"That's not even funny, babe. You're going to be okay, the doctor said you'll be up and around in no time. But for now, no jokes, okay?\" He nodded as she kissed him again; her eyes were filled with tears. \n\nA few minutes later Dr. Willis reappeared and suggested that they all go home and get a good night sleep. \"We're going to give him a sedative to help him sleep so it'll be easier if he doesn't have any distractions.\" \n\nAfter Kim and Ray drove off, Wendy told Amanda and Rachel that a Dr. Donald Greeley was going to visit the day after tomorrow. She told them that he was going to do a preliminary examination on Alex. \n\n\"Why?\" \n\n\"He's a plastic surgeon, one of the best in the region. I asked him to take a look at Alex's wounds. Dr. Willis said that they would probably be disfiguring.\" \n\nAmanda looked a bit shocked. \"But our insurance only covers the basics.\" \n\n\"I'll handle it Amanda, it's what families do, right?\" \n\nRachel wrapped her arms around her and kissed her cheek. \"Thank you Wendy, you're wonderful.\" \n\nAmanda's eyes began to tear up again. \"Wendy, I-I don't know what to say.\" \n\n\"Amanda, sweetheart, you're welcome. Now let's go home and get some rest, things start early at St. Mary's and I know you want to be there when he wakes up.\" \n\nKyle and Wendy got into her car and drove off leaving Amanda and Rachel by Alex's car. \n\nRachel opened the passenger door and got in. \"How did his car get here?\" \n\n\"After you called, I called Kim and Ray then I called Wendy. I asked Ray to go to the club and bring his car here after he stopped by the apartment house and picked up the spare set of keys.\" \n\nAmanda slipped in behind the wheel and started the car. \n\n\"Can I stay with you tonight?\" \n\nAmanda looked at Rachel and smiled sweetly. \"I was going to ask you if you didn't ask me.\" \n\nRachel watched the blur of streetlights whiz by the passenger window as Amanda drove them back to the apartment house. Even though she was exhausted her mind continued to replay the events that led up to the stabbing. The blood, Alex's blood, was everywhere, the screaming, chairs and tables flying around the room. It was all like a horrible movie that continued to play over and over in her mind. Why didn't she realize that Alex was always there because he was worried about her? \n\n\"I'm so stupid,\" Rachel muttered. \"I thought he was there because he liked hanging out at the club.\" \n\n\"You are not stupid my love, you're simply in love like the rest of us. I blame myself for not saying something earlier, and I bet Alex blames himself for not being more direct about his feelings. We love you Rachel, dearly. The club was fun and we loved being there with you but lately it seems a different kind of group has started hanging out there. And the vibe from them is kind of scary. I know you tried to dismiss it but you felt it too, didn't you?\" \n\nRachel nodded, her eyes glistening. \n\n\"So it's settled? You're quitting the club?\" \n\n\"Yes, I'll call Sydney tomorrow.\" \n\n\"And I'm calling our insurance agent tomorrow. I'm going to change our policy to include long-term maintenance meds. That should handle your needs and whatever Alex needs to help him recover.\" \n\n\"Thank you Amanda, you're such a wonderful wife, I don't know what I would do without you.\" \n\n\"I feel the same way sweetheart.\" \n\n=THREE= \n\nIt was nearly six in the morning when Alex woke up and the first thing he saw were two beautiful faces smiling down on him. \n\n\"I must be in heaven for all I see are angels.\" He laughed and winced a little. \"That was corny wasn't it?\" \n\nRachel leaned forward and kissed him on his forehead. \"Total cornball my love.\" \n\nAmanda followed Rachel, \"yep totally sweetheart.\" \n\nRachel scooted a chair closer and took his hand. \"They almost refused to let us in here this morning because we're not your legal family.\" \n\nAmanda grumbled as she sat next to him near the bed. \"We're going to change that starting today. I'm going to ask Kyle to give me a reference for a good family lawyer.\" \n\nAlex smiled and took their hands. \"What name are you guys going to pick for us?\" \n\n\"You know, I haven't thought about that, what do you think Rachel?\" \n\nThey watched Rachel consider Amanda's question for a moment. She paused then a broad smile broke out. \"I've always been a traditional girl at heart and I've always dreamt of taking my husband's name.\" \n\n\"Me too!\" Amanda squealed, her eyes glistening. \"When I was a kid I would lay in bed at night and dream about it.\" \n\nRachel stood up and leaned over to kiss Alex and Amanda on the lips then she whispered to them both. \"Wells.\" \n\nA half hour later Dr. Willis knocked softly and entered to find all three of them laughing and giggling together. \"I didn't know there was a party going on or I'd have dropped in sooner.\" Dr. Willis was followed into the room by someone unfamiliar. Alex, immediately cautious, grabbed his sheets around him in an attempt to hide his body. \n\nAmanda and Rachel smiled brightly. \"Good Morning, Dr. Willis.\" \n\n\"Good Morning. This is Dr. Donald Greeley; he's a plastic surgeon and one of Wendy's friends. Alex, Dr. Greeley would like to examine your wounds if that would be okay?\" \n\nAlex looked from Dr. Greeley to Dr. Willis as Dr. Greeley stepped around Dr. Willis and offered to shake Alex's hand. \"Don't worry Alex, Wendy Bingham already filled me in. You have a very important friend there; she's been pulling in favors all night. Let's see what kind of damage has been done.\" \n\nThroughout the rest of the day Alex reacted very privately when anyone came into his room. It was obvious to Rachel that he was getting rather annoyed with the parade of nurses and aides coming and going for a variety of what appeared to be insignificant reasons; sometimes checking the same IV drip several times in a row. ",
        "Rachel noticed that the female nurses all acted a bit coquettish around Alex. She also noticed how they all seemed to be interested in his chest. It was obvious that Alex's unique condition was a curiosity. They should act like professionals not like a bunch of schoolgirls, she fumed as she stormed out of his room in search of the doctor. Eventually she found Doctor Willis and spoke to him about it. He placed Alex's room on restricted access. \n\nAs a result, there was a bit of a stink at the nurse's station. Rachel overheard the commotion outside Alex's door. But it settled down quickly when she walked out in the middle of all the tension to ask the duty nurse if she could have an extra pillow for her \"husband.\" \n\n\"You could hear a pin drop after I said that,\" she told him. \n\n\"Thank you.\" \n\nA minute later one of the night shift nurses, Tiffany, knocked softly and poked her head into the room. \"I'm sorry to bother you but I wanted to apologize for my staff's behavior. We weren't acting very professional. I'm sorry. I'm Tiffany Porter and I'm the duty nurse tonight. I wanted to let you know that we heard from Doctor Willis and we understand and will respect your privacy from now on. Again, I'm very sorry.\" \n\n\"Thank you Nurse Porter...\" \n\n\"Tiffany, please.\" \n\n\"Thank you, Tiffany.\" \n\n\"Can I ask you something?\" She came further into his room and softly closed the door. \n\n\"Sure.\" \n\n\"Your body, is it natural?\" \n\nAlex blushed slightly and pulled his sheets tighter around his neck. \"Yes, why?\" \n\n\"Because, I...I think I'm a little like you.\" \n\nAlex relaxed a bit as he looked at Tiffany with renewed interest. \"Really?\" \n\n\"Yeah, I heard some of the other nurses hint that there was something different about you and then Doctor Willis told us the room was on restricted access. I was curious so I asked him and he told me that you're intersexed and bothered by all the unnecessary attention. You see, I'm intersexed too, only a little bit different from you, I think. It's called AIS.\" \n\n\"Androgen Insensitivity Syndrome, I know of it.\" \n\n\"Well, I was wondering if we could talk. I don't know anyone else like us.\" \n\n\"Sure, ah, Tiffany, this is my wife Rachel. Would it be alright with you if Rachel stayed?\" \n\n\"Oh, yes, that would be fine. Are you intersexed too?\" \n\n\"No Tiffany, I'm a pre-op transsexual.\" \n\n\"You are? I had no idea, your hands are so small.\" \n\nRachel blushed slightly and nodded to Tiffany. \"Thank you, a gift from my mother, I suppose.\" \n\nTiffany sat down on a chair near Alex's bed and took a big breath. \"Have you ever heard of Dr. Leonard Brunner?\" \n\nAlex shook his head. \"No.\" \n\n\"He came to St. Mary's about five years ago, fresh out of a residency in Trenton, New Jersey. He's young but he's got a good head on his shoulders. Anyway, his research is focused on the intersex phenomenon. I'm one of his case studies.\" She blushed slightly then continued. \"The rest of his research is from all over the country. He wants to start an institute for the study of intersexed people here in Wilmington. Would you like to meet him?\" \n\nAlex glanced to Rachel, looking for some sort of a response but her expression was blank. He turned back to Tiffany and smiled. \"I don't know Tiffany, maybe, but not now. I need to think about it. I've been hiding this from the world for a very long time and it's going to take me some time to open up to a stranger. And the parade of curiosity seekers that has been in and out of my room today isn't any help.\" \n\n\"I truly am sorry about that.\" \n\n\"I know, and I understand why you can relate to my situation. So the best I can say is I'll think about it.\" \n\n\"Okay.\" Tiffany got up and walked over to the door then she turned and returned to Alex's bedside. She handed him a business card. \"Here's Dr. Brunner's contact information. Please give him a call when you think you're ready to meet him. I'm sure you'd like him. Thanks Alex. And if you ever just want to talk about stuff, you know 'stuff'?\" She glanced up at Rachel and smiled meekly. \"My number is on the back, please call.\" \n\nTiffany extended her hand to Rachel. \"It's nice to have met you; I hope I see you both in the future under better circumstances.\" \n\nRachel shook her hand. \"Thank you Tiffany, I hope so, too.\" \n\nThree days later, Alex went back into surgery with Dr. Greeley. It was finally time to address some of the scaring where the knife cut into him. After another two more days of convalescing, Alex was released into Amanda and Rachel's care. They wheeled a rather stiff Alex Wells out of the hospital and into a waiting cab to bring him home. \n\nFollowing another week or so of bed rest, Alex was up and about. He was becoming restless and was half way through getting dressed when Amanda and Rachel walked into his room. \n\nRachel stamped her foot and Amanda barred the door. \"Where do you think you're going?\" \n\n\"To work, where else?\" \n\nBoth girls looked at him sternly. \"No you're not. You're not going anywhere.\" \n\n\"But, I've got to go to work. If I don't I'm going to go crazy cooped up here all day. Besides, they need me there.\" \n\nAmanda pushed him gently to his bed. \"No they don't. Inez is covering your shifts and your manager said you have a one week paid vacation coming to you anyway.\" \n\n\"I'm part-time, how do I qualify for a vacation?\" \n\nRachel leaned over and kissed him on the lips with a mischievous grin. \"I called him and persuaded him to offer it to you.\" \n\n\"How did I ever get by without you two?\" \n\n\"I don't know.\" Rachel turned to Amanda with a mischievous grin. \"Well Amanda, isn't it time for our patient's daily sponge bath?\" \n\n\"I do believe you're right.\" Both girls began to strip him. \n\n\"Wait! No fair tickling!\" \n\n=FOUR= \n\n\"Knock, knock. Reception told me I might find Kyle Upton in here.\" \n\nKyle bumped his head under his desk. \"Ouch.\" He peeked over the top of his desk with a big grin. \"Hi beautiful, what brings you here?\" He ducked back under his desk. \n\nWendy giggled and sat down in one of Kyle's client chairs. \"I was in the neighborhood and thought I'd check out your office. Are you hiding from me?\" \n\n\"Huh? Oh, no, my keyboard cable came lose and I was trying to reattach it when you came in.\" He grinned as he stood up and walked around his desk planting a kiss on her head as he walked by her to close his office door. \n\nShe stood up and fell into his arms as he turned towards her. His kiss was tender and passionate. He wrapped his arms around her and hugged her tightly then leaned back. \"Hey, it's nearly lunch, you want to join me somewhere?\" \n\n\"Hmm, sounds like a great way to start the afternoon.\" She looked over his shoulder at a group of pictures on one of his bookshelves. \"Who are those people in the photographs?\" \n\nHe released her and followed her as she walked over to his bookshelf to get a closer look. Then he waved his hand across the photograph. \"Welcome to my family.\" He pointed to each person as he named them off. \"That's Grandma, Mom and Dad, Uncle Willie, his sons Willie junior, and Hank. That's my sister Annie, and her husband Tom, they live on a dairy farm near Lancaster. Over there is my brother Tommy and, in a rare appearance, my twin sister Candace. \n\n\"Rare appearance?\" \n\n\"Yeah, she's the one in the family with a severe case of wanderlust, every family has at least one I've been told, and Candace is our world traveler. That's why it's so rare to catch a glimpse of her standing still, she's always moving. Right now she's up in New York City, at the New School studying filmmaking. She's pretty good at it too. Her last film was a documentary on gender dysphonia. It won a couple of awards on the festival circuit.\" He laughed out loud. \"If you ever meet Grandma be prepared to sit through it at least once, with commentary.\" \n\n\"Gender issues?\" \n\n\"Yes, something close to her heart. She transitioned when we were twelve, she's my twin. We were identical, now were fraternal.\" He shrugged sheepishly and Wendy wrapped her arms around him and crushed him in a big hug. \n\n\"What was that for?\" \n\n\"Just for being you.\" \n\nKyle leaned in and kissed her. \"Then I should be 'me' more often.\" His stomach rumbled a little and Wendy giggled. \"Sorry, I guess it's lunch time.\" \n\n\"Come on, I'll drive. Rachel told me about this cute little Parisian restaurant on Elm Street, Madeline's I think she called it.\" \n\nTwenty minutes later Wendy pulled into the parking lot at Madeline's, and ten minutes later they were sitting at a table with a view of a small park nearby. \n\nKyle peeked over his menu. \"How's business? Is the real estate market going strong?\" \n\n\"Not bad, I think I've found a house for Rachel, Amanda, and Alex. It's not too far from here, we can swing by and take a look after lunch if you have time.\" \n\nKyle pulled out his cellphone and dialed his office. \"Hi Alice. Can you call Henderson and let him know I'll be a little late for my two o'clock? Thanks.\" He snapped his phone shut and slipped it back in his pocket. \"Sounds like I have time and I'd like to see it.\" He tapped his menu. \"Anything recommended?\" \n\n\"Alex said everything is great here. I'm going for the salad, a girl has to watch her figure, you know.\" \n\nKyle grinned and shook his head. \"Wendy Bingham, you must be doing a great job because your figure is stunning and I could watch it for you all day long.\" \n\nBlushing crimson, Wendy smiled demurely, then buried her head in the menu. \n\n\"Rachel called me yesterday, she was wondering if I had some time tomorrow to meet her for coffee.\" \n\nHer nose still buried behind her menu, Wendy tried to sound nonchalant. \"Where are you going to meet?\" \n\n\"I told her I had more time than she did so she suggested a coffee shop on 5th near where she works.\" \n\n\"I know that shop, the cappuccino is really good.\" She paused a moment and glanced at Kyle over the top of her menu. \"What time did she want to meet you?\" \n\n\"Around ten, why?\" \n\n\"No reason, I was hoping you would join me for lunch tomorrow, that's all. Maybe we can meet for dinner instead.\" \n\n\"I'd like that.\" \n\nAbout then a waitress arrived at their table with two glasses of water and they ordered lunch. \n\n\"Are you worried?\" \n\n\"About what?\" \n\n\"My meeting with Rachel. I know she's being a bit of a mother hen but with that run-in you had with your former boyfriend I can understand why she's being a little over-protective.\" \n\n\"I know, and I love her for it, but honestly, you're not like any man I've ever met.\" \n\nNow it was Kyle's turn to blush. \"Thank you.\" \n\n\"Tell me about your sister Candace. You told me the other day that your family was just scrapping by. How can they afford to send your sister to The New School, it's expensive isn't it?\" \n\n\"Very. Mostly she's there on scholarships, some they offered and some she found on her own. Plus I help her out whenever I can. I've always tried to look out for her when I could. She had a rough time of it after she decided to transition; the girls in high school were especially cruel. There for a while it seemed like I was in a fight every other day pushing off her bullies.\" \n\n\"I know, I lived through it too, but I wish I'd had a twin brother to help me.\" \n\n\"There was a boy she fell in love with in the twelfth grade. He was a jock and popular with all the girls. I told her not to try, but she was totally gaga for him.\" \n\n\"What happened?\" \n\nKyle poured some cream in his coffee and stirred it idly with his spoon. \"She decided to ask him out. She'd been working up the nerve for a couple of weeks. I snuck along without her knowing. If she had seen me before she asked him she would have beat me up for certain. But I stayed back far enough to not be seen but close enough to hear. The boy's name was Kurt Treadway, he was a real dick but she refused to see it.\" \n\n\"I can see where this is going.\" \n\n\"Yeah, well anyway, Kurt was hanging out with a couple of his buddies from the football team when Candace showed up. She was wearing one of her best dresses and some cute high heels. I mean, if she wasn't my sister I would have totally dated her, she was hot.\" \n\nWendy smirked and Kyle blushed a bit then continued. \"I couldn't hear everything in the conversation but I got the gist of it. Candace asked him out and he laughed at her. \n\nI heard him shout at her, \"I don't do chicks with dicks, freak.\" \n\nThey said a couple more things and then his friends were laughing. She snapped back, \"What? You're worried that mine might be bigger than yours?\" \n\n\"That's when he hit her. He knocked her on the ground and spat on her and I was on him in a flash. Kurt and his buddies proceeded to kick the shit out of me but I got in a few good punches before I blacked out. They must have left shortly after that because when I came to I was lying on a stretcher and being hauled into an ambulance. She stayed with me for the rest of that night telling me how sorry she was. I couldn't say a thing because my jaw was wired shut.\" \n\nWendy's eyes glistened as she turned to look out the window at some children playing in a park across the street. What was the big deal anyway? Why couldn't he have just said no? Why is it so hard to treat another human being with respect and kindness even if you're not interested in them? Would he have treated a genetic girl that way? Are they so afraid that being with a transsexual is contagious? Like it's some sort of deadly disease? \n\nShe sighed and used her napkin to dry her eyes. \n\n\"Hey, it's a beautiful day; let's talk about happy things okay? What about the house you found?\" \n\n\"It's a cute little bungalow. It has all the amenities they were looking for.\" \n\nKyle laughed. \"Even a bedroom large enough for a king-sized bed?\" \n\nWendy blushed and nodded. \"That too.\" \n\nThe waitress arrived with their lunch. Then half way through his sandwich, Kyle's office called. \"Hello? Oh, hi Richard. Uh-huh, I asked Henderson to meet me at two. As soon as I have the final figures from him I can get those estimates to you. Yes, okay, I'll be back shortly. Right, right, okay. Bye.\" Kyle rolled his eyes. \"Sorry, my boss is a poster child for ADHD.\" \n\n\"Do you need to go now?\" \n\n\"Ha, no. He'll be onto three other things as soon as he hangs up the phone. I'll get the numbers he needs by four when I promised him. He drives Alice, the division secretary, nuts but at least he's thoughtful and remembers her birthday, his only saving grace.\" \n\nThey finished their lunch and, holding hands, they walked out of the restaurant towards Wendy's car. He nudged her shoulder. \"I guess next time it will be my turn to visit your office.\" \n\n\"I can't wait.\" She was beginning to understand the depth of her feelings for him. That she was in love with Kyle not just in love with the idea of love like she was with her ex-boyfriend, Ted. \n\n\"We still have time, do you want to swing by that house you found for the family? At least we can see it from the curb.\" \n\n\"Sure.\" Then she smiled sweetly and kissed him on the lips. \"But you can't tell them anything, I want it to be a surprise.\" \n\n\"I promise.\" \n\n=FIVE= \n\nKyle walked into Robbie's coffee house on Fifth Street a few minutes after ten in the morning. He glanced around a moment looking for Rachel. The place was filled with customers, laughter and coffee. The hiss from the espresso machine filled the air with the rich aroma of a dark roasted Parisian blend. It smelled heavenly. \n\nRachel saw Kyle first and waved him towards a booth near the back. \"Hi, thanks for choosing this place so close to my work.\" \n\n\"Well, like I said, you have less time than I do and anyway, I like this place, Rob makes his own blend of coffee, it's not bitter like the name brand stuff.\" \n\n\"You know the owner?\" \n\n\"Sort of, we went to undergraduate school together. I left for law school and he went to South America in search of the perfect coffee bean.\" Kyle lifted his cup to his lips. \"I think he found it.\" \n\nRachel glanced at Kyle. \"Yes, he did. I suppose you know why I asked you to meet me?\" \n\n\"Hmmm. You want to know if I'm a rogue and a scoundrel and only after Wendy's vast fortune, is that it?\" \n\nRachel opened and closed her mouth then frowned and looked away. It was clear to anyone watching the couple interact that she was upset. Apparently Kyle's attempt at levity wasn't scoring him any points. \n\n\"Okay, ask me your questions, no more flippant responses, I promise.\" He crossed his heart and held up his right hand. \n\n\"You're a bit of a smart-ass aren't you?\" \n\n\"Only when I'm nervous, which is why I never was any good as a litigator, I couldn't deal with the nerves.\" Kyle glanced at Rachel's cup. \"Would you like some more coffee?\" \n\n\"No, I'm fine. Kyle, Wendy didn't want me to meet with you, she's afraid that I'll scare you off. But somehow, I don't think that's going to happen. Not just from that last remark you made but from the way you two are together. Still, I want you to understand that I really respect her and care for her. And I don't want anything to happen to her that would make her cry.\" \n\n\"Neither do I, although she came pretty close when Alex got stabbed.\" \n\n\"Yeah, that was a rough night for everybody.\" Rachel paused a moment and sipped her coffee. She glanced over at a couple sitting nearby and holding hands. \"Have you ever known a girl like Wendy before?\" \n\nKyle took a big breath and let it out slowly. \"I've mostly dated regular girls in the past, albeit not many of them because I've always been a bit awkward around them, sort of like I am around you now. And because my family is a bit eccentric for lack of a better description, that sort of put off my chances for dates in the past, too. They still live with grandma outside of Philadelphia, except for my sister Candace. She's studying filmmaking in New York at the New School.\" \n\n\"Do you come from a big family?\" \n\n\"Not really, a brother, a sister, and a twin. The rest are uncles, aunts, and cousins.\" \n\n\"You have a twin?\" \n\n\"Yeah, Candace, we used to be identical, now were fraternal.\" \n\n\"Huh?\" \n\n\"She was born a boy and she transitioned when we were twelve. My family has always been supportive, God bless them, but her school life sucked. She's tough though, we're all really proud of her.\" \n\nRachel paused a moment, Kyle continued to amaze her. \"I've heard of the New School, it's private isn't it?\" \n\n\"Yeah, and expensive too. My family has always been trying to make ends meet but they also wanted to help her with her dreams. When the scholarship came through, she worked doubly hard to find more financial aide. She pieced it all together and I help her out whenever I can but she's stubborn about it. She knows I have huge student loans to pay off as well.\" \n\nThe booth that Rachel and Kyle sat in had rather high backs which made it feel private but at the same time difficult to see the front of the store. It also made it difficult for Rachel to notice a cute brunette wearing huge sunglasses and a big floppy hat sit down in the booth next to them. The woman leaned back and quietly listened to the conversation going on in the next booth. \n\nKyle stirred the cream in his coffee slowly. \"It's been a blessing to know Wendy. There aren't a lot of people I know who would understand my twin sister like she does. Hopefully, she'll get to meet her sometime.\" \n\nRachel sighed and gazed out the window at people passing by the coffee shop on the sidewalk outside. \"Wendy is a lucky girl.\" \n\n\"So are you. The rest of us should be so lucky to find the deep love you have for Alex and Amanda.\" \n\n\"Is it that obvious?\" \n\n\"It only takes a glance, Rachel. I've only known you for what, a couple of weeks? And yet, the first day I met you I knew. Everybody knows if they take the time to look. And you also have this mother hen thing going but it's cool, I can tell you really care for Wendy and I'm fine with that.\" ",
        "Rachel blushed and looked away. Then she glanced sideways at him. \"Who are you Kyle Upton?\" \n\n\"Just a guy who has blissfully stumbled upon a group of friends who are kind to one another, and who care for and love one another. I think I'm the luckiest guy in the world. Oh, what time is it? I was supposed to text Wendy about this.\" He pulled out his cell phone and began to punch buttons. \n\n\"About what?\" \n\n\"About this meeting between you and me, she wanted to know how it's going.\" \n\nRachel looked askance at him. \"And, how do you think it's going?\" \n\nKyle grinned at her. \"And send. I think we had a bumpy start but right now I'd say we're doing great.\" \n\nIn the next booth the woman in the floppy hat and sunglasses frantically scrambled to find her cell phone before it beeped and gave her away. Too late, the distinctive chime rang out loud and clear. \n\nKyle looked at Rachel then smiled a knowing smile. He stood on his knees and peered around the booth to find his new girlfriend dumping the contents of her purse onto the table. \"Hi there.\" \n\nWendy looked up and grinned sheepishly. \"Hi.\" \n\n\"Do you want to join us? We were just talking about you.\" \n\n\"I know.\" She looked around the edge of the booth to see a frown on Rachel's face. \n\nWendy shoveled the pile of stuff on the table back into her purse and scooted out of the booth. As soon as she stood she saw Rachel giving her 'the look'. She quickly mouthed the word 'sorry' to her and then took a seat next to Kyle. \n\nRachel twisted her mouth into a wry grin. \"Hello Wendy.\" \n\n\"Hi.\" \n\n\"Excuse me ladies, I need to get a refill.\" Wendy stood up for Kyle and then she sat down next to Rachel. \n\nKyle slipped back out of the booth and disappeared around the corner. He suspected that they wanted to talk in private and getting a refill of coffee was a convenient reason to give them some privacy. \n\nRachel wore a stern expression. \"Wendy Bingham, I'm hurt that you don't trust me.\" \n\n\"I'm sorry Rachel, but I really like him, and...\" \n\nRachel pulled her into a hug. \"Oh, forget about it. I'd have done the same thing or worse if it was Alex.\" \n\n\"Speaking of Alex, how's he doing?\" \n\n\"Better, thank you. He went back to work last night and his last semester of classes start next week. But don't think changing the subject will get you off the hook.\" \n\n\"I did apologize.\" \n\n\"I know, so maybe buying us all dinner this weekend will set things right.\" \n\nWendy grinned and hugged Rachel as Kyle rounded the corner to slip back into the booth. \n\n\"What did I miss?\" \n\nWendy let go of Rachel and smiled sweetly at Kyle. \"An apology, and a promise to never doubt her again.\" \n\n\"Rachel, Wendy and I have a date tonight, you're more than welcome to chaperone.\" \n\n\"We do?\" \n\nRachel blushed brightly and swatted Kyle on the arm. \"And what would you say if I said yes?\" \n\n\"I'd say you'd get to drive because we'd be in the back seat, snuggling.\" \n\nRachel laughed. \"No thanks, I'm hanging up my mother hen wings, my little girl is all grown up and she's found a wonderful guy to be with.\" \n\n\"Thank you Rachel.\" Wendy turned to Kyle with a huge smile. \"Where are we going?\" \n\n\"The symphony, Brahms and Schubert tonight.\" \n\n\"Ooo.\" Wendy's eyes sparkled with delight. \n\n\"On second thought, maybe I do need to chaperone you two.\" Rachel winked at Kyle with a smirk. \n\nWendy turned surprised. \"Don't you have to work tonight?\" \n\n\"Nope, I'm through with Moulin Rouge, I promised Alex and Amanda.\" \n\n\"Good,\" Kyle and Wendy said in unison. \n\n=SIX= \n\nKyle and Wendy found their seats the third row back on the Mezzanine level of Orchestra Hall. After a moment, Wendy leaned over and whispered in his ear. \"How did you know I love the symphony?\" \n\nHe smirked. \"Lucky guess?\" \n\n\"Fat chance, spill it.\" \n\n\"Okay, I called your secretary and she told me you had season tickets last year.\" \n\n\"I'm going to have to speak to Rebecca about divulging all my secrets.\" \n\n\"Good luck, I paid her off in chocolates.\" \n\nThe concertmaster walked out on the stage to applause. He bowed to the audience, turned to the orchestra, and raised his violin for the final tuning. \n\nAn hour and a half later Wendy entwined her arm around Kyle's as they walked to his car in the parking lot. \"I simply love Brahms, especially his first symphony, it has such a sweet melody.\" \n\nAfter the symphony, Kyle drove them back to their condominiums. Wendy snuggled next to him and rested her head on his shoulder. \n\nAs he parked his car she leaned over and kissed him on the cheek. \"Would you like to come up to my place for a glass of wine?\" \n\nKyle's eyes shone with excitement. \"Yes, I'd like that very much.\" \n\nKyle followed Wendy down the corridor to her apartment. He waited while she opened her door and flipped on a few lights. She walked into the kitchen and pulled a bottle of pinot noir from the wine chiller under her counter and proceeded to open it up. Kyle walked up behind her and wrapped his arms around her waist then nuzzled his nose against the back of her neck. \n\n\"You should know that drives me wild, sweetheart.\" \n\nKyle continued to kiss her neck and nibble at her earlobe. \"Good, after the tranquility of Brahms I think a wild night might be fun.\" \n\nWendy left the half opened bottle of wine and turned to pull him into a passionate kiss. \"You like playing with fire, do you?\" \n\nKyle trailed kisses down her neck to the cleavage between her beautiful breasts. \"Yes, fireworks are always exciting.\" \n\n\"Oh my God, Kyle.\" Wendy grabbed his hand and pulled him out of the kitchen and down the hallway. \n\nNear her bedroom she squealed with delight as he swept her up into his arms and carried her into her bedroom. She wrapped her arms around his neck as he released her. Her feet barely touched the ground as she covered his face with kisses. \n\nHe reached behind her and lowered the zipper on her dress as she struggled to unbutton his shirt. She giggled as they tried to undress each other at the same time. \"I think we need to do this one at a time.\" \n\nKyle leaned forward and kissed her. \"I agree my love, ladies first.\" He finished with her zipper and her dress crumpled to the floor around her feet. Now she stood there in bra and panties with stay-up hose and heels. \n\nShe reached behind her back and undid her bra, allowing it to slowly reveal her ample breasts. They were full and pouty with dark brown areolas and nipples that stood out proudly, begging to be sucked. Kyle leaned forward to lick them and she wagged her finger in his face. \n\n\"Uh, uh, uh, not yet my sweet, next my hose and heels then it's my turn to undress you.\" She sat on the edge of the bed as Kyle grinned sheepishly then knelt to roll down her hose and remove her heels. He lifted each foot and kissed a dozen kisses up each leg as she moaned softly running her fingers through his hair. \n\nHe stood up slowly, his shirt hung off his slender frame half unbuttoned. She sat up from the sensuous assault on her legs and pulled open the buckle on his pants, slipping them off his hips to fall like her dress and crumple on the floor by his feet. His shirt quickly followed. She reached down to remove his socks and delicately moved her hands up his legs trailing her fingernails along his thighs. He shivered with excitement. \n\nShe hooked her fingers into the waistband of his boxers and, looking up into his seductive eyes, she slowly lowered them to fall like his pants at his feet. His cock sprung free from the confines of his boxers and stood rigid against his stomach. She leaned forward and nuzzled against it. Reaching out with her tongue she licked the underside of his shaft. She moved up to the mushroom head and planted a kiss on the tip. He moaned softly feeling the velvet touch of her tongue. \n\nHe looked down at her with a lusty smile. \"My turn,\" he whispered and he pushed her onto the bed and gently onto her back. He fell beside her and his mouth quickly sought her breasts, sucking and nibbling, he sent her soaring. Then he moved to her collarbone, then to the small of her elbow and then he moved to finish sucking gently on each fingertip. \n\nShe was writhing in pleasure as his tongue assaulted all the pleasure points on her body. He moved back to her shoulders while his fingers began to move gently over the soft wet folds of her pussy. He found her clitoris, swollen from passion, and began to gently rub it as he trailed kisses from her neck to her waist and below. He grabbed a bottle of lube on her nightstand and coated his fingers liberally. \n\nSoon his tongue found her clitoris. He nibbled and sucked the swollen nub as she her body undulated in submission to his tongue. His lubricated fingers slipped gently into her vagina. He moved them around searching for her g-spot. Suddenly he touched it and she was rocketing off into outer space screaming his name and wrapping her legs around him. \n\n\"NOW! God, oh God, NOW! I need you now!\" \n\nKyle opened the bottle of lube again and squirted some in her hands. She coated his cock with the lube and pulled him down to her vagina, urging him to enter. He slipped inside her, feeling every little muscle contract around his penis as he pushed deeper. \n\nShe spread her fingers across the cheeks of his ass and turned her nails to bite into his flesh, urging him to go deeper, to thrust harder, and faster. \n\nShe was soaring now, higher than she had ever flown before. He was like a magician; his touch was like an elixir for her soul. Each thrust brought her closer to the edge; each lunge brought her closer to oblivion. She felt him swell inside her and she knew he was close. His thrusts became stronger, more demanding. She wrapped her legs around him and locked her ankles as if she would never let him go. \n\nSuddenly he tensed and she could feel his seed coat her vagina. There was so much it began to spill back out and trail down her perineum to drip onto her ass. \n\nShe was in ecstasy. She hugged him tightly and held her breath, as if breathing now, or ever again, would break the spell of pure bliss. \n\nEventually she came back to earth. She rubbed and caressed his body, holding him tight as she covered his face with kisses. \"My God, I thought I knew what sex was like for a woman. You are amazing. Where did you learn to make love like that?\" \n\nKyle just beamed. \"It helps when you have such a beautiful and receptive partner.\" \n\nShe pulled him into another hug. \"Oooo, you make me feel wonderful!\" \n\nHe shifted his position so that she could feel that he was still rock hard against her stomach. \"Want to go again?\" She nodded enthusiastically. \n\nThis time they went slower. But with the slower pace she was able to soar even higher. She knew what sex was; she had slept many times with Ted her ex-fiance. But this wasn't just sex, this was making love. This was pure, unadulterated joy.\" \n\nLater, in the afterglow, Kyle asked Wendy about her transition. \"What was it like going from a male to a female completely?\" \n\nWendy sighed a bit then gently stroked his hair as he nuzzled her breasts. \"The operation felt like it lasted for weeks but that was the easy part.\" \n\n\"How do you mean?\" \n\nShe pointed to her head and her heart. \"It's what happens here and here that is the toughest part.\" \n\nHe looked at her earnestly, his eyes urging her to continue, to tell him everything. His fingers traced tiny circles around her breasts as he listened to her. \n\n\"It's funny, now, as I look back on it, what I thought was going to be the toughest part was the easiest. I remember standing in line at the DMV. It was six weeks after my final operation and I held a doctor's certificate that finally identified me as female. I was mortified thinking that all the clerks behind the counter would laugh and point but they didn't. They just stamped the form and issued me a driver's license with the letter 'F' under gender. You can't imagine how much joy that gave me. Finally, my body was correct; I was a woman, a complete woman. No one would ever take that from me again.\" \n\n\"And the hardest part?\" \n\n\"Telling my family. I expected that they wouldn't accept me, and they didn't. But I had to try to make them understand anyway. My father wouldn't even acknowledge my presence in the room. All my mother did was cry and the rest of them snickered and walked out. But then, I didn't expect that it would be any different than it was. I just hoped it would be less humiliating and it wasn't.\" \n\nKyle shifted his attention from her breasts to brushing back a lock of her hair behind her ears. \"So what other changes did you experience?\" \n\n\"Oh, changes still seem to be happening to me. Little things happened to my body over time.\" \n\nHe looked out the bedroom window as if he was lost in thought. Then he glanced back at her. \n\nShe could see that he was working through something. Even though she was afraid to ask, she knew she must. \"What are you thinking about, my love?\" \n\nHe leaned up and kissed her lightly on the lips. Then he took a big breath and slowly let it out. \"Have you ever thought about adoption? My Aunt Susan was adopted and I always thought it was like offering a child a gift of a lifetime.\" \n\nWendy squealed and threw her arms around Kyle's neck and hugged him tightly. \"Yes,\" she whispered, \"yes.\" \n\n=SEVEN= \n\n\"Knock, knock, anybody home?\" Wendy opened Rachel's apartment door and peeked her head in. Sitting around the kitchen counter, Alex, Rachel, and Amanda huddled over a fresh brewed cup of coffee. They responded with a groan. \"Well, I can see you three aren't morning people.\" \n\nAmanda pointed to Alex and grinned. \"We're not, but this one over here just got in this morning after he finished his two a.m. night shift at the convenience store.\" \n\nWendy gathered them into a big hug. \"Hmm, I love you guys!\" \n\nRachel looked sideways at Wendy. \"Okay, what happened?\" \n\n\"Nothing, I just had the most wonderful night of my life last night with Kyle.\" \n\nAmanda squealed glee. \"Oooo, details, details.\" \n\n\"Nope, not a word, but I will tell you that he knows exactly how to make a girl feel loved, over and over and over again.\". They all laughed and clapped for joy. \"But that's not why I'm here. Come on, get dressed, I have a surprise for you.\" \n\nAlex sat down his coffee cup. \"You've found us a house?\" \n\n\"Yes! It's a beautiful little bungalow in a quiet neighborhood. It's just perfect. Now come on, I can't wait to show you.\" Wendy was almost dancing, she was so excited. \n\nAlex and Amanda raced out of Rachel's apartment to get showers and get dressed as Rachel set a cup of coffee in front of Wendy and did the same. A half hour later they were all dressed and dancing with excitement in the apartment house foyer. \n\nWendy opened the front door with a flourish. \"Alex, you're going to have to drive, my car is a bit small to fit all of us.\" \n\nThey all crammed into Alex's car and twenty minutes later they were standing in front of a cute little home built in the craftsman style that looked out on a quiet street just a few blocks from where Kim and Ray got their apartment. \n\n\"It's a little on the high side of your price range but with some creative financing I think you can swing the mortgage.\" \n\nAlex snapped his head around. \"What? This isn't a rental?\" \n\nAmanda and Rachel's eyes sparkled with anticipation. \n\n\"No, I thought you told him Amanda.\" Wendy arched her eyebrow as she glanced at Amanda. \n\n\"I was going to, then the whole incident at the club and well...\" She walked over to hug Alex. \"I forgot sweetie, please forgive me but Rachel and I talked it over and we both thought if we could find a house we could afford we should just buy it rather than pay off somebody else's mortgage.\" \n\nAlex looked at her and then he turned to Rachel. Both girls smiled hopefully. Then he turned to Wendy. \"Well, let's at least take a look inside.\" \n\nAmanda and Rachel squealed and gave Alex a big hug. The three of them followed Wendy through every room and peeked into every closet and cupboard. Before the hour was up they were back standing on the front porch and looking out on the neighborhood. \n\nWendy put the key back into the lockbox then she turned to join them. \"Well, what do you think?\" \n\n\"The numbers you quoted, are they accurate?\" \n\n\"I think the market rates are falling Amanda, so my quote may be a bit higher than reality once you lock in your rates. But I think they're pretty close.\" \n\nAmanda looked at Rachel and Alex. \"What do you guys think?\" \n\nAlex wrapped his arms around both girls' shoulders. \"You two are better with numbers than I am but if you want my opinion, and if we can afford it, then I think we should hug our little sister Wendy for finding us such a great place to call home.\" \n\nA NOTE FROM THE AUTHOR: \n\nThe author copyrights Stray Cats and all of its parts. The reproduction of any part of Stray Cats without the written permission of the author is expressly prohibited. \n\nThis story is a work of fiction. All of the characters, their names and the places they visit, are purely from the imagination of the author. Any resemblance to persons, places, or things is not intentional and purely coincidental. \n\n\u00a9 2015/ Dreamweaver594"
    ],
    "authorname": "Dreamweaver594",
    "tags": [
        "menage e trois",
        "romance",
        "transsexual",
        "threesome",
        "threeway",
        "group",
        "romantic"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/stray-cats-ch-05"
}
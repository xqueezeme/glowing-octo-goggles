{
    "title": "There and Back Again Ch. 137",
    "pages": [
        "Chapter One Hundred Thirty-Seven: A Mother's Instinct\n\nThe next day began the same. The wounded were left at the camp, those who couldn't walk being cared for by those soldiers who were less hurt -- and Seranni, who we left behind again while the remaining uninjured troops accompanied us. A new ruin, this one even larger than the last, waited. As before, the Wardens led the way, followed by Nate and the soldiers who would not only aid us, but guard the way back out.\n\nIt was deep inside the Tevinter ruins where we first encountered some of the Children. Like the game, we first ran across grubs, the infant form of the Mother's vile offspring. They looked like human-sized maggots, their skin grey, slimy, and covered in pustules; one of the soldiers, stunned by disbelief, wandered too close and was bitten as the foul creature wiggled towards us on the ground. Despite being forewarned, everyone was in shock when it suddenly lurched up on spindly, insectile legs, darting towards the disabled, screaming man who was being dragged away by two other soldiers.\n\nAlistair leapt in front of the vulnerable trio, bashing the disgusting maggot down with his shield, and Aedan drove his sword through it from behind, nearly slicing it in half; black, thick blood gushed out of the wound, releasing a fetid odour that made everyone gag. It was a bit like a car wreck on the highway, it seemed -- it was so disgusting that I couldn't look away. I breathed a sigh of relief when someone stepped into my line of sight and I was released from my horrified shock.\n\n\"Right,\" Alistair winced, looking at the bitten man, whose breathing had become shallow and rapid as the skin around his wound blackened, \"don't let them bite you.\" He turned and reached out to squeeze my hand, though I could barely feel the pressure through my thick leather and his metal gauntlets; I still appreciated the gesture, squeezing back tightly.\n\nSolona and Velanna were both kneeling beside the man as someone else poured a healing potion down his throat; the two blonde mages whispered quietly to each other, exchanging sad glances, before Solona shook her head reluctantly at Nate. The nobleman's eyes closed briefly, and I wondered if he was uttering a prayer for the obviously dying man. When he opened them again, they sparked with pure determination; he knelt down, murmured an apology, and drove a dagger straight into the man's heart. One day, that will be me holding the dagger. I wanted to cry, but didn't.\n\nAfter securing the body near one of the soldiers guarding the way out, we all sadly continued to delve deeper into what I was becoming more and more certain was the Mother's nest. We cleared darkspawn and more Children from side rooms -- cautiously, so no one else was bitten -- before descending yet another steep set of steps. The room at the bottom was long and narrow, the only light provided by our torches; the ceiling was ridiculously high, stretching up into the darkness above. There were multiple closed doors off to each side, and a large set of double doors at the end; we paused to discuss our plan of attack.\n\nI was standing quietly listening to Aedan, Nate, and Alistair debate the merits of opening one door at a time versus splitting into smaller groups when I felt a familiar, foreboding presence from above and to my right; I didn't even think before I reached out with my templar skills and started wrestling for the massive pool of mana I could feel accompanying that aura. I must have cried out, because suddenly Aedan and Nate were staring at me, while Alistair stiffened beside me, looking up in the direction I knew the Architect must be. I realised quickly that I must have taken him by surprise the last time we'd met, because I was working much harder to get a hold on his magic than the previous time -- and I was losing. Alistair, seeming to sense my difficulty, carefully aimed a smite in the same direction, and the overwhelming sensation of his magic lessened, though I remained unable to retain my grip.\n\n\"It appears you were correct,\" came the ominous voice I hoped I'd never hear again. \"My need is unchanged, but this was a mistake.\"\n\nJerking back in surprise, everyone turned to face the direction the voice was coming from, and I felt Solona quickly cast a spell that sent a small ball of light upwards to illuminate a balcony above us, where the Architect, Utha, and three darkspawn stood looking down on us. The dimness made the mutant emissary look even more skeletal, dark shadows obscuring much of his face; Solona's light glinted off his ridiculous mask, making it appear like his eyes were glowing.\n\n\"Now there's a surprise,\" I muttered, rolling my eyes. \"You're an idiot.\" I made another unsuccessful attempt at seizing the Architect's mana, and he grunted with the effort of defying me.\n\nUtha stiffened and actually growled -- in my general direction, though she wasn't looking directly at me; the Architect calmed her with one hand on her shoulder. I scowled at them both.\n\n\"What do you want?\" Aedan called out, pulling their attention away from me as I struggled uselessly with my templar abilities.\n\n\"I wish to correct my mistake.\" The Architect half-bowed to Aedan, and I saw Alistair's jaw clench. \"I offer my aid in destroying the Mother. After that, I would like the chance to discuss an alliance that could-\"\n\n\"Stop the Blights forever, blah blah. Yeah, we know. I don't think so.\" I didn't think I'd ever heard my brother sound so angry. \"We don't need any more poorly-thought-out 'research' on darkspawn sentience, thanks.\"\n\n\"Stopping the Blight 'at any cost', is not that the Grey Warden goal? I too aim to prevent more conflict between my kind and yours.\"\n\n\"Right, and we're supposed to just be okay with that? Oh, wait...except for the part where you need more blood than every Grey Warden in Thedas has for your rituals? Or the part where you still want to be able to take women to make into Broodmothers to breed more of your enlightened darkspawn? Or the minor problem of how you will all survive without preying on people? You can't even prevent your supposed disciples from launching an all-out invasion instead of making peaceable contact, what makes you think you could control the darkspawn you free? Grey Wardens may be pragmatic, but we're not all stupid.\" Aedan shot a disgusted look at the former dwarf standing to the Architect's right.\n\nUtha stiffened again, but just crossed her arms, expression unreadable. I'd have given anything to be able to ask her what the hell she'd been thinking when she'd thrown her lot in with the Architect...but she could neither hear me, nor respond. It was pointless. So frustrating! But then I had a thought. I turned to Aedan urgently.\n\n\"Tell her...tell her Kell died to allow Duncan and Fiona to escape. Tell her he died knowing she was a traitor to the Grey Wardens, and that he couldn't even save Hafter. And tell her they'd both have had many more years together if the Architect hadn't advanced their taint. She supported him because of fear of the Calling -- but she wouldn't have experienced her Calling for years if not for the him.\" I wasn't sure why it mattered to me, but I wanted Utha to know everything the Architect had done. Maybe she's known all along, but I wouldn't have put it past him to keep the details from her. Not that it will make a difference now, but...\n\n\"Tell her that in the end, even Genevieve and Bregan knew that following the Architect was mad, that it was wrong and a betrayal of all the Order believed.\"\n\nI wanted her to know the truth -- before we have to kill her, at least.\n\nAedan repeated my words, and I watched the ghoul as she listened. At first she seemed unaffected, shadows hiding her eyes, but as he kept going, stumbling through what I'd told him, she turned her head to stare at the Architect, as if searching for confirmation. The creature said nothing; what could he say? He knows I can contradict him, that I know more about her lover's final moments than he does.\n\nWhen Aedan finished, she continued staring quietly at the Architect for a long moment, head tilted slightly. He turned to her, appearing to be murmuring something to her quietly -- denials, I assumed, or maybe pleas for her to ignore what we'd told her and focus on their goal. He could obviously understand her despite her inability to speak; we could hear him stop and start like hearing one half of a telephone conversation.\n\nFinally, despite him calling after her, she turned on her heel and left him standing there. Whether she would meet up with him later or leave him completely, I couldn't say. He turned back to us, visibly trying to gather himself, shoulders slumped. I made another attempt to seize his mana, but he repelled me again, finally straightening up and looking down at us imperiously.\n\n\"I cannot approach closely, but I will help you destroy the Mother.\" He gestured with one long skeletal arm. \"I have reactivated some of the Tevinter traps and wards to aid you. And afterwards, if you want to kill me...you may try.\" With that he disappeared into the darkness, presumably down a hallway behind him.\n\nI swore, and heard my sentiments echoed behind me by my husband and my brother. I couldn't see any way up to that ledge, and without being able to neutralise his mana, chasing after him was a bad idea anyway -- but I still wanted to. I wanted justice for Faren, for myself, for Utha and Kell and Duncan and Fiona...and I have to admit, I'm not against a little vengeance, either, at this point.\n\nI turned to Alistair and pressed against him; it wasn't much comfort given both of our bulky armour, but it was the best I could hope for under the circumstances. We weren't given much time, though, when several of the nearby doorways popped open, and darkspawn and Children spilled through. Everyone responded as professionally as we could expect, blocking doorways to bottleneck the creatures and slaughtering the darkspawn with impunity. The narrow space made it more difficult to manage the Childer grubs, which were best attacked from behind, but between the mages, Nate's arrows, and the rest of the fighters, the darkspawn were soon destroyed with only minor injuries.\n\nWe spent a few minutes checking the remaining doors, finding nothing but rubble, before approaching the set of large double doors at the end. They were locked, though the mechanism was flimsy enough even I could have broken through; Aedan popped it open with a long slender metal lock pick, and then Alistair stepped in front and slammed the door open, his shield held in front like a battering ram.\n\nA good thing, too. I gasped as three arrows thudded against the studded metal, and two more flew over our heads to clatter against the walls behind us. The room was massive, wider than it was deep, with several other doors along the same wall as the one we'd come through; in front of us were dozens of darkspawn, including hurlocks, Childer grubs, a handful of emissaries, and one heavily armoured ogre, as well as the archers who'd taken shots at us as we entered. Behind them, on a dais in front of a large opening out to the chasm beyond, was the strangest-looking Broodmother any of us had seen.\n\nI didn't have time to stare, however; the archers had reloaded as we pressed forward to make room for those behind us, and after the second set of arrows struck the shields of those in front, I ducked to one side, noticing Zevran moving the opposite direction. I reached out and seized the mana of three emissaries, feeling Alistair grab a fourth as I ran, streaking away from the soldiers spilling out through the double doors. I worked my way around the side of the horde of darkspawn, ending up behind a trio of archers who were about to loose again. I slit the first one's throat as I heard the shout and clash of Alistair meeting the ogre head on; refusing to stop and look, I took out the next two archers before heading for the last emissary, who was still casting.\n\nI tackled the creature to the ground, driving my daggers into its gut; I scrambled to my feet as it bled out with a sickening gurgle. Taking a moment to look around, I saw Alistair hacking at a partially frozen ogre, the other Wardens spread out, attacking Children and darkspawn. I couldn't see Zev or Aedan, but I felt one of the emissaries whose mana I held die, and noted that the rest of the archers had also been taken out. I saw tentacles sticking up overtop of the combat, and realised that the Mother had joined the fight as well.\n\nI heard a scream and saw a soldier fall; heading to where they'd been over-run, I started systematically backstabbing and disabling hurlocks. A tingle went through me -- reminding me of the feeling of putting my tongue on a nine-volt battery -- before a massive wave of energy passed through the group near me. One of the soldiers screeched in pain, but the darkspawn around me were suddenly immobile, and I easily slit their throats. Glancing back, I realised the Architect stood on another balcony -- really a gallery, like in a theatre -- holding up a glowing white crystal and watching me carefully.\n\nBastard tried to use the Tevinter ruins' defenses to disable me -- and failed, likely due to my natural resistance to magic. I shot him a dirty look, resisting the urge to stick out my tongue, and then went to help the soldier -- the one who'd been caught in the spell -- back through the doors. By the time he was safe, most of the darkspawn had been disabled, though there were a few isolated knots of fighting still ongoing. The Wardens were hacking at the Mother's tentacles, which blocked the way to where she sat.\n\nI spent a few precious moments dragging wounded soldiers to safety, knowing my little daggers wouldn't help against the massive appendages, but when a path to the Mother was finally cleared, I sprinted through with the rest of the Wardens. I stared in shock at the hideous creature that sat on the dais in front of us, screeching in an unholy voice.\n\nHer face was almost pure black, and I couldn't tell whether it was covered in something or if that was just the colour of her skin. She had long stringy black hair cascading down her shoulders, and the strange colouring of her skin made the milky-whiteness of her eyes even more striking. Black, talon-like claws protruded from long spindly arms, and insectile appendages stuck out behind her like spider legs. Like all Broodmothers, she had several sets of droopy, pendulous breasts and a large, slug-like immobile body, but despite that I couldn't get over how much more human she appeared than the other Broodmothers. I wondered if that was because of the Architect's perverse Joining ritual, or if there had been something unusual about her to start.\n\nAnd then I felt a massive, malignant mana signature not unlike the Architect's, and I realised that she was a mage. I wondered who she'd been before the darkspawn had taken her -- an apostate, hiding out the in the Dragonbone Wastes? A Circle escapee? -- and whether her magic was the reason for her differences from other Broodmothers. I had no doubt it was why the Architect had chosen her; it seemed the magic-wielding darkspawn were more intelligent than the others to begin with, and he'd probably thought that when she was freed from the call of the Old Gods, he'd be able to reason with her.\n\nI wondered if he'd captured her and made her into a Broodmother specifically for this purpose, or if she'd been trapped down here for years going mad listening to the 'music' before he'd cut her off from it. Neither option was pretty, and I could see either seriously damaging the mental health of the poor woman going through it.\n\nI reached out instinctively and seized her mana as she shrieked at Aedan, accusing him of working for the 'Father'; when she felt her mana being depleted, she tried to cast something, cutting her diatribe off with a scream that she clearly expected to send those nearest to her reeling -- but it didn't work. Startled by the ineffectiveness of her shout, she was taken completely by surprise when the Wardens around her began attacking.\n\nSeveral of us shortly had to turn and defend against a swarm of Children; after a minute of fighting, two of her thrashing tentacles had been severed, and she was bleeding from a number of small wounds and a large gash created by Oghren's axe. In response to her cries of pain, a bunch of grubs had streamed out from somewhere behind her. Unable to see me, the mutant darkspawn made easy targets, and I killed several as they tried to get close enough to bite the other fighters.\n\nWhile we were distracted, the Mother grabbed Conrad with a flailing tentacle; he screamed in pain, and I quickly shielded him in an attempt to limit the damage she would cause. Rolan and Wulf, the closest two Wardens, quickly began hacking at the base of the tentacle, and in response the Mother flung Conrad away. I sighed with relief as some unseen forced slowed the warrior's descent, and shot a grateful smile at Alim as the wounded but clearly still living Warden landed softly and was pulled out of the combat by some soldiers.\n\nOnce the Children had been slain, we turned back to the Mother. I almost felt sorry for her as tears streamed down her face when she looked at the corpses of her 'babies'. I saw -- without feeling the mana behind it -- a blast of fire hit the Broodmother in the chest, and turned in confusion only to see the Architect holding another glowing crystal up on the balcony behind us. At least he didn't try to hit me this time!\n\nAnother few of the Mother's tentacles were severed in the fighting, and it became clear she was flagging, her attempts at defense becoming less coordinated and sluggish. I heard a shout, and turned to see a berserking red-haired dwarf running towards the Mother at full tilt. In what must have been a practiced move, Alistair knelt and braced his shield as Oghren barrelled towards him; Alistair shoved and Oghren leaped, in a crazy stunt like something out of a superhero movie, and a flying dwarf buried his axe in the Mother's neck. He dropped to his feet and rolled away with surprising agility. She screamed one last time, her arms flailing at the weapon embedded in her flesh, a torrent of black blood flowing down her front...and then she slumped over, finally going still.\n\nA cheer went up from the soldiers behind us, who had apparently been attacked by another wave of grubs at some point, but I heard Nathaniel shouting and turned to see him loosing arrow after arrow off to the side in a seemingly random direction. When I looked, I saw a handful of darkspawn -- hurlocks and genlocks, wearing good quality armour that indicated they were likely the sentient type -- racing out of a side tunnel I hadn't noticed before. The one Nathaniel hit went down like a sack of potatoes, two arrows sticking out from his back and one in his leg, but the others disappeared into the darkness as the wall slid into place behind them, barring us from chasing after them.\n\nI ran to where the tunnel entrance had been, but could see no sign of the secret passage. Turning to shout back to Aedan and Zevran -- the two most likely to locate a hidden mechanism, I assumed -- I saw my brother staring up to the balcony, a disgusted look on his face. Following his gaze, I could see that it was deserted; the Architect had also escaped. Again.\n\n******\n\nDespite everyone's best efforts, it took the better part of an hour before Zevran found the trigger to opening the secret tunnel; it led to another part of the ruin, but the darkspawn were long gone. Scouts and Wardens were sent through the ruins to look for them and the Architect, but nothing was found. The darkspawn corpses and the Mother were incinerated by the mages, Conrad healed as much as possible with potions and the limited abilities of Solona and Alim, the wounded soldiers stabilized and transported back to camp, and the rest of the ruin explored. There were a few lingering darkspawn, but with no over-riding intelligence to guide them, they were easily destroyed. Even the one remaining Broodmother, found behind the third door our scouts had identified the day before, was killed relatively easily, as she had no supporting darkspawn to protect her. For the most part, the Dragonbone Wastes seemed to have been abandoned by the darkspawn.",
        "After one night of rest, Nathaniel, Alistair, and Aedan organised the army, the wounded, and the rest of the Wardens to pack up camp and begin the arduous process of returning to Amaranthine. The carts that had been full of food now carried injured soldiers, and with no rush, Aedan decided to allow the wagons to move out first with the army, while the Wardens would follow behind a bit later. They left us with one wagon for our things and a small group of soldiers to help out. We knew we could move much faster with our small numbers and Grey Warden stamina, so we'd catch up even with a bit of a delay.\n\nZevran and Aedan spent some time finding all the secret tunnels in the ruins, looking for signs of the Architect, to no avail; most of the others took the time to rest and recuperate after such a grueling fight.\n\nI spent my time in the ruin, trying to understand the crystals the Architect had used -- they had stopped glowing, appearing to be just plain rocks when I found the place in the gallery he'd abandoned them -- and staring thoughtfully out into the chasm, which never saw direct sunlight even in the middle of the day.\n\nI was standing out on a peninsula of land built out over the chasm behind where the Mother had sat when Alistair and Aedan found me.\n\n\"We're ready to go, love,\" Alistair murmured, wrapping his arms around me from behind. \"Are you alright?\"\n\nI leaned back into his embrace with a sigh. \"Fine. Just worried about the darkspawn that got away, and the Architect, of course.\"\n\n\"We'll get him,\" Alistair promised.\n\n\"Eventually,\" I agreed. \"But what will he do in the meantime?\" I yanked on my tangled hair in frustration.\n\nWith nothing he could say to that, he just quietly held me until Aedan cleared his throat.\n\n\"So, is now a good time to ask...what is that?\" Aedan asked.\n\nI turned to look where he was pointing with a small smile. It was a large structure, really, but so dwarfed by the size of the ruins around us that it didn't look out of place. There was a dais, made out of some sort of black, malignant-appearing stone, with steps of the same stone leading up. And at the top, flanked by statues made unidentifiable by time, was a smaller flat, grey metallic-looking panel that should have reflected our images back to us, but didn't.\n\n\"An eluvian.\" I grinned. \"Anyone seen Conrad? I have an idea.\""
    ],
    "authorname": "ElyssaCousland",
    "tags": [
        "fantasy",
        "fanfiction",
        "dragon age",
        "modern girl in thedas",
        "romance"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/there-and-back-again-ch-137"
}
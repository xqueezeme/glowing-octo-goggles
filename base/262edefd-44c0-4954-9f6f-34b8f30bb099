{
    "title": "Lucy",
    "pages": [
        "To the readers...\n\nThis is not really the kind of story I write, even if somewhere in my head there appears to be an area reserved for this sort of mood that comes out in weird flashes of fantasy. Mostly very brief flashes.\n\nI wrote this story in less than three days. It came to me while I was drunk and listening to a song. I don't even remember which song; I just remember a mood. This story came out fully formed from start to finish and flowed quite easily, vivid and seemingly tangible. It feels as though the words chose themselves, apart from a little editing done by me. Beyond that, there's not much to say about it, other than it feels weirdly quite personal to me.\n\nBut anyhow, I thought I'd share it and I hope you all enjoy it.\n\n--- --- --- --- --- --- --- --- --- ---\n\nI am 31 years old.\n\nI'm in this bed and the only thing happening in my mind right now is a long back and forth over my entire life to all of these different moments I didn't even realise were stored in my memory. More than I could have imagined. The thing is, these aren't just moments that are spread out over everything in my life. This isn't me looking at all the squares of a blanket of memory wrapped around my entire being. This is me looking at a long silken scarf wrapped around my hand and her hand, trailing a link between us. The threads are fine and undamaged. They glow brighter than the blanket.\n\nIf the long silk scarf was ever a blanket, then all the squares were her.\n\nI am thinking about this because I am 31 years old and I'm already close to death.\n\nI know it's warm outside because all of the windows are open and I feel the slight breeze now and then on my arm. My arm looks thinner than it was; the muscle I'd spent months building up, finally disappearing fast. I feel weak in general.\n\nThe bed is comfortable enough for me to want to stay still. I feel warm here and almost safe. I did feel completely safe around thirty minutes ago but then she walked into the room. It's not quite an invasion. I'm too glad to see her for it to be an invasion. I'm just surprised because it feels like the scarf is stronger than ever before. It's blinding bright. She's looking at me and there's just the touch of a smile on her face.\n\nI can't say anything after what she's just said to me and the reason for this is simple. I can't say anything because all of the memories of me and her that are streaming through my head right now would hijack my voice and start coursing through the air outside of me. She'd hear it all. She'd know how I felt too. I couldn't confirm that.\n\nThe trouble is, I've already been quiet so long by now that it's an answer in itself.\n\n\"It's okay,\" She says.\n\nI just stare at her. Then I look at her girlfriend, Dana, who's sitting next to her and she's got this neutral expression on her face. She's looking at me really carefully. I don't know what to say to her and I can't even imagine what she's thinking. But to my surprise she gives me this slow, kind of awkward smile. She gets up and she walks over to me. I'm frightened at first, but that smile is genuine. It's warm and it's affectionate. She looks sad too.\n\nShe leans over and hugs me tight. I'm a little too weak to hug her back with any real pressure, but I try anyway. I manage to get my left arm up and over, slowly. I have to strain to do it and it hurts but it's worth it. I've missed her hugs.\n\nI hear her whisper into my ear, \"I'm going to leave you two alone to talk this out. Okay?\"\n\nShe moves back and looks at me. It's all I need to know that she's not angry at me. She's still my friend. She'll be one of the people who'll miss me when I'm gone. I nod to her. She smiles and she leaves the room.\n\nThat leaves Lucy in the room with me. Lucy is sitting on the chair beside my bed and she's still looking at me. She looks as beautiful as ever. I try and think of the last time I saw her and it surprises me to know it's been four months. I suppose when you think about someone every day, it messes with your concept of time a little. Maybe that's all time is. It's just this flowing river we slow down by filling it full of stuff. Filling it with thoughts about people, about things. Filling it with memories; frozen snapshots of space-time getting distorted by all the things in it like black holes with their gravitational pulls.\n\nLucy has long, thick black hair and it's longer than I remember. Her eyes are a scary piercing green which make me think of cats because they're almost too bright to be human. Every time I see her eyes, I'm convinced she's looking past the face I present to the world. I told myself over and over that she couldn't see past it because I did absolutely everything I could to keep that part of myself hidden. But obviously I failed.\n\nShe's got pale skin and full lips. She's slim and she curves in some places. Most people might not look twice at her until she smiles. And then she's warm and inviting and she makes the air around her dull a little bit, just the right amount so that it's like she's tethered to the atmosphere around her and she's suddenly something a little more than she was before. Like she's more real, or something.\n\n\"Why didn't you ever tell me?\" She asks quietly. The smile is gone now. This is serious.\n\n\"Because it would have changed everything.\"\n\n\"You don't know that.\"\n\n\"Yeah, I do,\" I tell her. I try and put a bit of conviction into that. The truth is, I have no idea if it would've changed everything because despite the fact I've loved her for five years and known her even longer, she still manages to surprise me.\n\n\"No, you really don't.\"\n\nI look down at my hands and make a fist. It feels weak. If I tried to hit anything with those fists, my fingers would probably break. The skin would bruise, maybe even cut. I'd feel that sharp shock of pain radiating around my knuckles as it shoots through my fingers, into my hand and wrist and maybe even up to my elbows. I relax my fingers and I look at them carefully.\n\nIt's funny. I always wanted to lose weight. Now that I have, I'd love to have it back.\n\n\"So, it's true then?\" She asks. I sort of knew she'd do that. She needs me to say it to her so she knows it's coming from me.\n\nI don't know if I'm quite ready to give up at this point. The memories are streaming back stronger all of a sudden and I'm thinking about when I first met her.\n\n\"You remember when we first met?\" I ask.\n\nShe smiles. \"Yeah. Of course.\"\n\n\"What do you remember about it?\"\n\nShe frowns for a moment and then her eyes daze over for a few seconds while she thinks about it. She and I both know why she's taking her time. Memory is unreliable.\n\n\"We were learning about memory,\" She says.\n\nI nod.\n\n\"We were learning about how inaccurate it could be.\"\n\n\"Yeah.\"\n\n\"You barely made eye contact at first. I had to instigate every bout of conversation we had in those two hours. It was strange. I wasn't used to that.\"\n\n\"Yeah. I think I was still getting used to the idea that you just started talking to me out of nowhere. Especially when we were supposed to be doing work.\"\n\n\"We got it done! In the end.\"\n\n\"We did.\"\n\n\"It didn't take long anyway. Not with the two of us. Super geniuses we are, after all,\" She says with a grin.\n\nJust for a moment I feel like we're back in university together and she's trying to make a joke. Lucy seemed to be one of those people who only ever knew things we were supposed to learn for the classes until one day she decided to walk down with me to the main entrance and just to fill the silence, she started talking about all manner of things. The first time she walked with me, she decided to talk about that old question of whether a tree makes a sound if it falls in the woods and no one hears it.\n\nLucy wasn't trying to answer the question though. She was telling me about how pointless it was. Then she asked me what I thought. I told her that the tree made a sound. I remember her look at me at that point. She just shook her head and smiled and shrugged.\n\n\"Fine,\" She said. \"The tree made a sound. But it's still a pointless question.\"\n\n\"Yeah, but everything is pointless. That's why everyone's so afraid of living. If they live, they think it's for nothing in the end, deep down.\"\n\n\"You really believe that?\"\n\n\"I do.\"\n\n\"So you're a cynic.\"\n\n\"Maybe.\"\n\n\"How disappointing. There's so many cynics at uni. You'd think everyone here has already lived a lifetime.\"\n\n\"How long is a lifetime?\" I asked.\n\n\"As long as it needs to be.\"\n\nAs long as it needs to be. I'm thinking about those words now as she's looking at me, the smile fading again. I know this means she wants me to say it to her.\n\nSo, I think about it again. I'm 31 years old and I'm close to death. And I'm in love with Lucy; a woman I'll never have and the only woman I ever wanted.\n\n\"So, I guess that's why you started avoiding me, hmm?\" Lucy asks.\n\n\"Yeah, it is.\" It is an easy admission.\n\n\"I really missed you, you know?\" Lucy says.\n\n\"I missed you too.\"\n\n\"It hurts to see you like this.\" She always was honest.\n\nI don't know what to say to that. I could tell her it hurts to be like this but that might make it worse somehow. I'd rather just be frozen as an earlier memory, but even that's not really an option now. It's funny how when the person you love is in front of you, part of you still feels like you need to be this almost perfect being in their eyes, especially after they've seen all your failings and all the shit you carry around in your self. You want total acceptance. That's the perfect part. Acceptance is perfect; it's what makes us perfect.\n\nI feel tired. I want to close my eyes and sleep but at the time I just want her image burned into my brain so I have this picture of her as she is now. She looks beautiful.\n\n\"How long have you been in hospital?\"\n\n\"Nearly three months.\"\n\n\"About a month after we last saw each other then.\"\n\n\"Yeah.\"\n\n\"You could have rang me. Sent me an email. Something.\"\n\n\"I know.\"\n\nShe's quiet for a moment and I'm trying to figure out what she's thinking about. Just for a quick moment, her expression looks pained and she looks to the side at the floor like she's trying to hide it. But she makes it looks like a natural sort of fidget. It nearly works, too, but she's just not quick enough. She looks back at me, her face neutral again. I realise that she's hurting more than I thought.\n\nI think back to the words she said right before Dana decided to give us space; I know you're in love with me.\n\n\"So...\" She starts, but she goes quiet.\n\n\"Lucy...\"\n\n\"Hmm?\"\n\n\"I'm sorry I didn't tell you.\"\n\n\"It's okay. I know how hard it must have been for you.\"\n\nI don't know what she's referring to when she says that.\n\n\"How long... have you got?\" She asks slowly. That must have been what she wanted to say before.\n\n\"Not long.\"\n\nHer eyes fill with tears pretty quickly at that point, but they don't go down her cheeks. She nods, looking away just for a moment and then blinking, wiping her eyes with the back of her hands. I hate seeing this happen.\n\n\"Happens to everyone, right?\" I say. I don't know why I say this. It sounds inappropriate when it passes my lips.\n\nBut she simply looks at me and nods, wiping her eyes again and taking a deep breath to compose herself. She stands up and walks behind her chair and pushes it close to the bed so that it's nearly touching. Then she sits down again on the chair. Now she's much closer. Her knees are touching the bar right next to the mattress and her hands settle on the bed next to me. She leans forward a little.\n\nShe looks up at me and I'm seeing memories of a time when she was sitting next to me in the car while I drove her to get ice cream after she had a fight with her girl. She was so upset that day. In the memory I can see her looking out of the passenger side window with her hand against the window and her fingers making little patterns on the glass. In the memory her eyes are a bit red because she's been crying. In the memory, it's the first time she's called me up on the phone and stayed silent for a moment because she isn't sure what to say or how to say that she wants comfort and she wants it from me. In the memory, I can still hear the echoes of her voice asking if I can go and pick her up and take her for a drive. And I can still remember agreeing to do that because I wanted to see what she was like when she's sad. Isn't that a part of it? You want to see what someone's like in their entirety. You want to know if they're like what you imagined sometimes in the dark of the night, or if they're better or worse or totally different.\n\nLucy, when she's sad, is quiet and wistful. She looks into space and she's distracted by the tiniest of things and by the most fleeting of thoughts. She doesn't try to think her way out of being sad. She lets herself feel it because it's easier for her that way. It passes quicker. It makes her feel human.\n\nShe's looking at my hand now. I watch her hand reach out and tentatively grasp my fingers into a loose grip. I wonder if I feel cold to her. She certainly feels warm to my touch.\n\n\"So how long have you known?\" I have to ask.\n\nShe shrugs. \"I spoke about it to Dana. She kind of made me see it. Several weeks ago now, I guess.\"\n\n\"Oh.\" Maybe I hid it from her after all. But not from Dana.\n\n\"She's on the outside, after all. She saw things I wouldn't.\"\n\n\"Like what?\" I'm too curious not to ask.\n\nLucy looks me full in the eye. \"Like the way you'd look at me sometimes. You'd slip. She saw it and she didn't know whether to approach you or me. You're so fucking respectful that she just left it alone. You've never said or done anything inappropriate to me or her. She loves you for that, you know?\"\n\n\"I did everything I could to hide--\"\n\n\"I know. And she knows too. We don't care about that. Don't you get it? We care about this, right now. This; you being here.\"\n\nHer touch feels like it's warming me up. It makes my hand feel less weak.\n\n\"When you started saying things like you were busy, you had things to do, you couldn't meet up, you had to rush off somewhere, all of that, all the time; that's when she decided she had to say something. I didn't believe her at first, I guess. And we didn't know you were ill,\" She says. She pauses for a moment and shakes her head. \"You should have said. You should have.\"\n\n\"I wanted to.\"\n\n\"Why didn't you?\"\n\n\"I don't know,\" I tell her. That is the truth, more or less.\n\n\"Okay.\"\n\n\"Sorry.\"\n\n\"No. Don't be.\"\n\n\"Okay.\"\n\nThe conversation has just the slightest touch of awkwardness. For a moment, I hate myself. I know it's there because I've been hiding from her. Hiding from myself, in a way. She breathes deep and keeps looking at my hand. One of her fingers strokes over one of mine. I feel a bit of pressure from it and I watch her fingertip slide along one of my fingers, up and down, almost like she's trying to feel something in it. It takes me a moment to realise she's thinking about how thin it's looking.\n\n\"I had this whole thing planned out,\" She says.\n\n\"What thing?\"\n\n\"The things I was going to say if you confirmed it; how you feel about me. But you haven't said it yet. You haven't actually said it.\"\n\n\"If I say it, will you say the things you wanted to say?\"\n\n\"I don't know if they'll come out how I want them to,\" She says. \"Maybe it's better that way. I think when you want to say something to someone you really care about, maybe the best thing to do is not plan it so it comes out in a really honest way. What do you think?\" She asks, looking up at me. Her fingers stop moving on mine.\n\n\"I think your idea has merit.\"\n\nShe nods in a non committal sort of way.\n\nI know that once I say it, there's no taking it back. \"So, Lucy... I've been in love with you for around five years.\" My heart is hammering when the words come out. As soon as they leave me, I have to breathe deep to calm myself down a little. It's hard to do that with how weak I'm feeling.\n\nOf course, she notices all of this and her fingers grip mine tighter, as if she's trying to calm me.\n\n\"It's okay,\" She says. She said that before and I'm not sure now if she's saying it for me or herself. Maybe both.\n\nMy breathing is a bit better and my heartbeat is slowing down. My eyes close for a few seconds and I open them again when I feel her squeeze my hand.\n\n\"Hey, you okay?\"\n\nI nod at her. \"I'm just tired. Really tired.\"\n\n\"You need to rest?\"\n\n\"Kind of, I guess. I end up napping a bit a few times during the day.\"\n\n\"Okay.\"\n\nI don't want her to leave but I have no idea how to say this.\n\n\"Well, you get some rest. I'm going to go and find Dana,\" She says. I feel a pang of sadness at this but then she carries on. \"I'll get her to take a cab home and come back here.\" She pauses. \"That's if that's okay with you.\" She seems nervous when she asks that.\n\nI don't want to seem enthusiastic about the idea even when I feel it so strongly. I nod at her once. \"That's fine.\"\n\n\"You sure?\"\n\n\"Positive.\"\n\nShe doesn't say anything more than that as she stands up and walks to the door. Before she's even done closing it behind her, the world turns dark and I'm drifting...\n\nI wake suddenly. There's a flash of memory or dream that sparks me out of sleep. For a few moments I'm in a daze and I'm trying to figure out where I am and then everything comes back to me. I look to my right. Lucy is in an armchair that she obviously had someone bring in from the day room. She is curled up in it, her hair splayed out over her cheek as it runs down her shoulder. She's sleeping peacefully.\n\nFor a while I watch her, wondering why she's here and when she will wake. Then I look at the time and realise that the nurse is coming in soon to take a record of my status. I don't know whether to wake Lucy to warn her of this. It doesn't matter a moment later as she stirs and slowly opens her eyes and looks at me.\n\nIt occurs to me then that the last few hours have actually happened. She moves her hair out of her face and keeps her head tilted, leaning on her arm. She's still looking at me.\n\nI feel the urge to sit up and slowly I push my body up and forward. She gets up immediately and comes to my side, using her hands to steady me as I rise. She helps me.\n\n\"Hey,\" She says.\n\n\"Hi. I need to go to the bathroom.\"\n\n\"Oh. You need help?\"\n\n\"One of the nurses will be in here pretty soon to take my obs. She'll help.\"\n\n\"I can help.\"\n\n\"No.\"\n\nShe slows for a moment and then thinks nothing of it. I'm sitting up now and Lucy moves away, but she doesn't go back to sit down. She stands there with her hands on the bed. \"We need to talk, don't we?\"\n\nI guess that was always inevitable as soon as she walked into this room. All I can do is nod.\n\n\"Good.\"\n\nThe nurse comes in. She grins and moves around busily, equipment in her arms, greeting Lucy briefly and asking me how I'm doing. I tell her I'm as I always am. She nods and moves forward. She wraps my arm to take my blood pressure. Lucy moves back to remove herself from this scene between me and the nurse. She sits down on the armchair again and watches it all happen; a spectator.\n\nMy blood pressure is as expected. My oxygen levels are just about okay. I need to go to the bathroom, I tell the nurse. She says she'll send someone in to help me out within the next five minutes. I watch her leave the room and Lucy stands up again and comes to the bed.\n\n\"What do you want, Lucy?\" I ask.\n\nShe looks at me in surprise.\n\n\"It's not that I don't want you here,\" I try and explain. \"It's just that... I don't really know how to deal with this situation. I don't know what you want. I don't know what I want. I feel confused. I feel kind of lost. And I don't know what you want to say or do and I have no idea how to be here with you when I'm so aware of you knowing how I feel about you. I need guidance.\"\n\nLucy's about to say something to this but another nurse comes in. She moves out of the way for him and stays silent while he helps me up onto my feet. It hurts. I have to put my weight on him and he helps me hobble across to the door of the bathroom. It's awkward. He helps me sit down and then leaves. I know he's waiting right outside. I do what I need to do and I can hear him chatting to Lucy. I call out to let him know I'm done. I'm helped back to the bed and while I'm walking, while I'm climbing back into bed, I'm looking at Lucy and she's looking at me. The nurse leaves and Lucy comes to sit by my bed again. She looks at my legs and nearly reaches out to touch them.",
        "This woman is my best friend. No, this woman was my best friend. I started destroying that friendship and I have only myself to blame.\n\n\"You've lost so much weight,\" She says.\n\n\"Didn't even have to go to the gym to do it.\"\n\nShe smiles at the stupid joke. \"How can you make jokes at a time like this?\"\n\n\"That's all I have left,\" I tell her. \"A sense of humour.\"\n\n\"Not even dignity?\" She asks. It's supposed to be a joke.\n\nI shrug.\n\nHer smile disappears. I can tell she's feeling the strain maybe as much as me. She doesn't know what to say or do. This is unfamiliar and the discomfort is hard to see. I don't know any more whether I want her gone or to stay.\n\n\"Guidance,\" She says quietly. \"The truth is, I have no idea how to handle this either.\"\n\n\"That makes the two of us then.\"\n\n\"But I want to tell you what happened.\"\n\n\"What happened? When?\"\n\n\"Last three months or so. When you started getting busy. Busy,\" She adds with a sarcastic tone.\n\n\"Busy dying?\"\n\nShe frowns at me. \"Don't say it like that. I still feel a bit put off with you for not telling me.\"\n\n\"Sorry.\"\n\n\"Dana noticed first, you know? I think she's known for years.\"\n\nI feel awkward hearing this. It must show on my face because she shakes her head reassuringly.\n\n\"It's okay,\" She says. It feels like she keeps saying that. But it's not okay. Nothing is okay. \"She was fine with it.\"\n\n\"Yeah, you said that earlier too, I think.\"\n\n\"She hates this too; seeing you like this.\"\n\n\"Why are you telling me this?\"\n\nLucy is quiet for a few moments. Then she shrugs. \"Because I feel like I need to.\"\n\nI'm hit by a stream of memories again. This time she's sitting in the beanbag I used to have in my bedroom near the window. I'm at my desk and I've got music playing. I'm also very stoned and so is Lucy. It's the music that's the important part because all I can do is watch her. She's got her eyes closed and there's this small smile in the corner of her mouth and she's just swaying side to side, a real sway with rolling shoulders dipping rhythmically and her head turning side to side. There's something erotic about it.\n\nIn the memory she opens her eyes briefly and looks at me. She doesn't stop swaying to the music. I'm sitting dead still and all I can do is stare as she links her eye-line to mine before she closes her eyes again, smiling all the while. And because I'm so stoned and the music is there filling the air, it's like a trigger for a firestorm of emotion and thought inside my mind. In my memory, there are hallucinations and they're covered with vivid feeling and thought and they're so strong, I don't know where the hallucination ends and where the memory begins. In my memory of this hour, Lucy is swaying, but she's also looking at me and she's standing up and she's walking over to me and she isn't quite solid. She wavers and vibrates. The lines that give her definition against everything else, are moving in and out of frenzied vibrations like she's phasing in and out of my reality. That's the Lucy that I'm imagining and hallucinating. The real Lucy is still sitting and swaying with her eyes closed and the smile on her lips.\n\nIn my memory, my hallucination of Lucy is taking my hand and bringing it up to her face so that I can stroke her cheek and her jawline and let my fingertips trip a trail down her neck. And she's tilting her head back with her eyes closed, her mouth slightly open. The pulse is racing in her neck and her skin is warm and growing red. In my memory, my hallucination of Lucy is leaning forward to touch her forehead to mine and move her lips to touch mine. All of this is so slow and because its so slow, it's like there's enough time to flood with tons of emotions. Emotions with real weight that press down on me and her and light our lips on fire. Emotions with fields of energy of their own and my emotional field is extending beyond my physical body and touching her emotional field. In my memory, my hallucination of Lucy is giving me this sad smile after kissing me. A smile that says it isn't real and it will never be real.\n\nIn my memory, my hallucination of Lucy is suddenly no longer there because the song's ending and Lucy's swaying is slowly coming to an end. In that memory, I close my eyes so I can see nothing but darkness and it feels like I'm falling through space, down as far as I'll go and more.\n\nI open my eyes. Lucy is looking at me with a worried expression on her face.\n\n\"What is it?\" I ask.\n\n\"You fell asleep again. Or passed out. I don't know, but I called the nurse. She said you'd just fallen asleep. It just didn't feel like that to me.\"\n\n\"How long?\"\n\n\"Twenty minutes or so.\"\n\n\"Oh.\"\n\n\"Are you okay?\"\n\n\"Yes.\"\n\n\"You sure?\"\n\n\"Yeah. I was thinking about memories.\"\n\n\"What about them?\" Lucy asks, her voice now a bit calmer.\n\n\"Some of them are painful,\" I tell her. \"It's funny how some of the painful ones hurt because of things we never expected.\"\n\n\"What do you mean?\"\n\n\"Just that sometimes the pain comes from the way we think about a memory rather than what's in it.\" I don't even know if I'm explaining myself very well.\n\nBut Lucy ignores it and she asks again, for the second time today, \"How long have you got?\" This time her voice is stronger and she's got a slight frown. She's scared. And I know it's because of how I drifted away and fell asleep.\n\nThis time I'm straight with her. \"Three or four weeks at most.\"\n\nHer face takes on this expression I've rarely seen. She looks away from me, but only to look past me. She tightens her jaw and takes a really deep breath. I want to comfort her so badly but I don't want to touch her. Touching her will just make it all seem so much worse. Touching her will mean I have something to miss even more. Her eyes are wet with tears and this time they flow freely down her cheek and she doesn't even wipe them. She's still looking past me and I can only imagine that everything she's seeing is blurred.\n\n\"Lucy?\" I say, but I don't know what to say after that. I just like saying her name. The name itself was nothing to me until I met her. Now it's a name that has all manner of associations. I look at her face and now I can see she's angry at me.\n\nShe looks at me and wipes her tears, but more come out. She wipes those and starts to compose herself. I want to hold her but I have no idea how to say that or show it and it seems wholly inappropriate to even think it.\n\n\"Three or four weeks,\" She repeats.\n\n\"Yeah.\"\n\n\"You fuck. Were you ever going to tell me?\"\n\nI think about lying but there's nothing left and it makes lying seem pointless. \"No. I wasn't.\"\n\n\"I had to find this out from your mother, you know?\"\n\n\"I know.\"\n\n\"Why the fuck weren't you going to tell me?\"\n\n\"Because I couldn't handle it, Lucy.\"\n\n\"Handle what?\"\n\n\"The idea that your last few memories of me were going to be as I am now. Just this body wasting away by himself in this room.\"\n\nLucy's eyes soften.\n\n\"Lucy, I love you so much. And I feel like all I've done is effectively lie to you for the last few years. I've been a friend, fine, but knowing I felt so much more than that and hiding it from you? After a while it just... It's too much, you know? When I found out I was dying, I just thought, that maybe, maybe I could just cut everyone off. Especially you. That I'd just put myself here and die alone because that seemed so much easier than having people watch me die slowly, remembering every fucking little thing. Remembering that I couldn't even lift my own arms for long. That I can't even stay awake for long. And the memories! God, Lucy, the memories. So many of them. I didn't even realise someone could do that; someone could hold so many memories of one person. So many of them that just appear in the mind and move on and keep flowing and I just don't know how to stop it. So much that they make me feel...\"\n\nIt's an effort to speak and I have no idea what I was trying to say. I just need her to understand that this is me and I can't help how I feel. And I still don't know if I want her gone or if I want her here. Both. I want both. But you can't have both; you can only have both when it's a fantasy.\n\nShe moves forward and sits on the bed, just on the edge, next to me so that the side of her thigh is touching mine. She's looking down at me and her tears are still fresh on her cheek.\n\n\"I wish...\" She says. She goes quiet and wipes her eyes with the sleeve of her shirt until her tears are gone.\n\nI have this memory then, of her wiping her eyes in the same way. In the memory she's sitting on a bench in a park and I'm next to her. We're looking down the hill at the children in the nearby play area. We're both silent and she's more intent on them than I am and when I finally ask her if she's okay, she nods and smiles. When I ask her if she's sure, she quietly says that she can't have children. In the memory I'm silent because I have no idea what to say to that and she says nothing else but that doesn't matter so much because when she starts to cry, I move to her and put my arms around her. I try not to think about the weight of her head on my shoulder and the smell of her hair and the pressure of her arms around my body. When she finally lets go, she wipes her eyes with the sleeve of her shirt. She tells me she's barren. And she leaves it at that. I don't say anything.\n\nI remember another time suddenly where Dana is present and she's sitting between me and Lucy on a sofa at a party. Dana is smiling at me and asking if I'm okay because I've been so quiet for the last hour and I tell her I'm just tired. In the memory, Dana leans back. Lucy is looking at Dana and she's smiling and she moves back as well so she can put her head on Dana's shoulder and Dana puts her arm around Lucy.\n\nIn the memory they are in love, as they are now, as they have been since before I knew either of them. And just for one brief moment, I want to feel that love.\n\nDana knew first, Lucy told me. Dana knew how I felt about Lucy. I don't know how long she's known. I wonder, for a moment, if she knew at that party; if she sat between us because she knew. But those kind of thoughts are fruitless. Dana has never acted untoward; she's always been warm with me.\n\nI realise, as much as I am sorry for not telling Lucy I'm ill, it doesn't mean I want her there.\n\n\"I wish...\" Lucy says again. I'm away from those memories and I'm looking at her. She's looking at me as she speaks. \"I wish I could be the person you want me to be. I wish I could be the person who loves you in the same way you love me. I wish I could be the person who shows you that you don't have to be alone when you...\" And she trails off because she still can't bring herself to say it.\n\n\"You've already shown me so much, Lucy. You have no idea the difference you've made to my life.\"\n\n\"You've made a huge difference to mine too,\" Lucy says.\n\nShe doesn't really understand, I think. Until Lucy, I had never been in love.\n\nShe's almost about to say something else but the door opens and the nurse comes in. Lucy turns to look at her and the nurse says that visiting hours are over. Lucy has around five minutes to leave, if she can. Lucy nods and thanks her and when the nurse leaves, Lucy's looking at me again.\n\n\"You better go,\" I say.\n\n\"I'll come and see you tomorrow.\"\n\n\"No.\"\n\n\"What?\"\n\n\"Please, Lucy. Just don't.\"\n\n\"But--\"\n\n\"Just leave. I don't want to see you again.\"\n\nAs much it hurts to say those words, the effect on her is more painful. Her expression shows no traces of anger, just anguish. She shakes her head like this isn't happening. She stammers once as she stands up and turns away toward the door. She stops and turns back to me.\n\n\"You're just saying this because you're hurting. You don't mean it,\" She says.\n\n\"The least you could do, Lucy, is respect my wishes. Right?\" Respecting someone's wishes is a big thing for Lucy.\n\nIt's the longest few seconds of my life before she responds; it's strange how time fucks with you. She simply gives up. She doesn't even speak. She nods and then turns around and walks out of the room.\n\nFor the first time in years, I feel like crying but there aren't any tears left.\n\nIn the darkness of the night I wake a few times and I'm full of regret. But what's done is done; I wonder if that thought means I've let everything go. Deep down I know this is another lie. You don't let go of things like that; not that easily.\n\nI close my eyes. With my eyes closed I can see the full burning glow that is Lucy and that's when I know I've done something very wrong. And I fall asleep wondering if I can fix this...\n\nThe next morning my mother is there. She does her usual thing with straightening up the room a little and sits down by my bed and sighs.\n\n\"So what happened yesterday?\" She asks.\n\n\"Why did you tell her?\"\n\n\"Because she asked. I assumed she knew already. But when she said she hadn't seen you for so long, well, I had to tell her, didn't I?\"\n\n\"I didn't want her to know.\"\n\n\"Why? Because it means you feel alive for a little while before you finally go?\"\n\nI don't know what to say to that. I wonder if my mother is right. Is that one of the reasons?\n\n\"I think about her all the time,\" I say.\n\nShe sighs again and nods. \"Yeah, I know. That's natural. But, I'll tell you something else; if you ignore it, if you just decide you're going to pretend she doesn't exist, then you're leaving life in a horrible way. You're leaving it in denial, in regret, in anger at yourself. That's how I feel about that.\"\n\n\"Thanks for that, Mum.\"\n\nThen her expression is sad and she takes my hand. She says nothing for a few moments and shakes her head. \"Sorry. I didn't... God, I don't even know what to say. I didn't mean it like that. I'm just... I don't know. She's your best friend. I thought at least she'd give you some kind of comfort that none of us could. I don't know.\"\n\n\"I don't know either.\"\n\nShe squeezes my hand and moves forward to hug me. She leaves a couple of hours later after we watch a film. The nurse comes in and takes my blood pressure and checks my pulse and oxygen levels. Another nurse comes in and helps me with going to the bathroom. When I'm out, before he leaves, he turns and tells me he forgot to say someone is here to see me.\n\nI'm not expecting anyone. My visitor of the day has already been and gone. I tell him it's fine to send whoever it is into the room. I wonder if it's Lucy. But it isn't. Dana walks into my room, smiling. She sits on the chair next to the bed and says hello. I'm too surprised to say anything back at first.\n\n\"It's customary to greet someone when they greet you,\" Dana tells me.\n\n\"Hi.\"\n\n\"How you doing?\"\n\n\"The same.\"\n\n\"Yeah. I hope you don't mind me being here.\"\n\n\"I... What are you doing here?\"\n\n\"I came to see my friend. That and since you've forbidden Lucy to come and see you, she's been incredibly upset and she's being all honourable and stupidly forthright about respecting your wishes and so it falls to me to report to her everything that's going on with you.\"\n\nI always thought Dana was the more emotional one, but the way she's sitting there makes me realise maybe I had her slightly wrong. Her expression is completely calm. The smile hasn't gone from her face. She hasn't broken eye contact. Her tone of voice has been measured and level the entire time, except... except I'm sure there was just the touch of sarcasm. Or maybe it was steel.\n\n\"Here's the thing,\" She says. \"I love you nearly as much as she does and I'm not her. So you can tell me I'm not allowed to come and see you, but you can be certain I'm not going to listen. For your sake and mine. And Lucy's.\"\n\nDefinitely steel. I don't want to argue with her and truth be told, Dana's presence is comforting. I'm surprised at this. I'm surprised I don't feel awkward.\n\n\"How long have you known, Dana?\" I have to ask.\n\nHer eyes are suddenly softer and her tone of voice follows suit. \"Oh, I don't know. Three years? Something like that. It seemed obvious after a while.\"\n\n\"You never said anything.\"\n\n\"How could I? You could've denied it. It could've changed things. She's happy around you, you're happy around her and I'm happy around you. Maybe it wasn't the best thing to do, keeping quiet, but the alternative seemed much worse. And I suppose, I always thought you'd move on eventually.\"\n\n\"So did I.\" I hesitate. \"And I've always been happy around you too.\"\n\nDana nods. \"I have to admit, at first I was a little... I don't know. I was worried, I guess. About how you felt, but--\"\n\n\"I never said or did anything inappropriate.\"\n\nDana smiles. \"I guess Lucy already said.\"\n\n\"Thanks.\"\n\n\"For?\"\n\n\"For not being angry at me.\"\n\n\"How can I be angry at you for the way you feel? It's not like we can control it, can we?\"\n\n\"No.\"\n\n\"Though you're trying to do that, aren't you? By keeping Lucy away?\"\n\n\"... I suppose.\"\n\n\"I think if I was in your position, I might do the same.\"\n\n\"Really?\"\n\n\"Yeah, really. Except, eventually, I'd realise it was a stupid thing to do.\"\n\nI can't help but smile at this. Dana smiles back. I remember a time when me and Dana spent the day together. In the memory we're walking down a high street, window shopping, looking for a good place to buy Lucy's birthday present. It's a strange day. It's a strange feeling knowing she wants my help in choosing. But this is around the time when I'm starting to get to know her, so I haven't learnt yet how similar Dana and I when it comes to some things.\n\n\"I used to worry that you were hurting from seeing me and her together,\" She says quietly.\n\nI shake my head at this. It never hurt, exactly. It just made me see what I didn't have and what I'd never have. That's just how it is. I shake my head at this and I try and sit up, using my arms to push forward. Just like Lucy did, Dana stands up and grips my arm and helps me.\n\n\"Thanks.\"\n\n\"She's really hurting,\" Dana says. \"You mean a lot to her.\"\n\nI don't want to talk about this, but I get the feeling Dana won't leave it alone. \"Dana, what am I supposed to do?\"\n\n\"Tell her it's okay for her to see you.\"\n\nI say nothing. Maybe it is stubbornness. Maybe I'm more stupid than I've ever been in my life but the thought of spending time with Lucy just feels too far away to be possible now. I didn't think it was possible to be this confused about anything, ever. I stay silent in the hope that Dana will just leave it alone. She's sitting again and I'm giving my body time to get used to sitting up. I flex my arms and legs just a little bit, enough to feel like I'm getting a stretch. But I'm so weak, that after a couple of minutes, I fall back against the bed again. My body hurts a bit.\n\nDana hesitates for a moment after seeing me sink back. \"Your mum didn't really tell us what was going on with you.\"\n\n\"It's everywhere now.\"\n\n\"Really?\"\n\n\"Yeah. Started out in my neck, in my brain. Now it's spreading around my body.\"\n\nDana hesitates again. Then she says, \"It seems wholly inappropriate to just say I'm sorry.\"\n\n\"It's okay.\"\n\n\"Will you at least think about what I said?\"\n\nI nod. I can tell she wants me to say something more committed but I can't say anything. She leaves it alone. It's another hour or so before she leaves and I'm drifting in and out of sleep.\n\n... ... ... ... ...\n\nIt doesn't take another three or four weeks. Somewhere in the space of a week or so, I start thinking I am losing my mind. Dana visits every day. By the third day she stops asking about bringing Lucy in. I can't face Lucy. I hate myself for it, but I can't do it. By the fifth day my headaches are shorter but more frequent. My body aches. The world seems darker. I keep my eyes closed sometimes just because it's easier to live in my own head.\n\nBehind my closed eyes, there are entire storms; flashes of memories, deluges of thoughts, hurricanes of emotions just howling at me. It feels real. It feels solid. The storms flicker and rage and sometimes they quieten so much, I begin to wonder if I'm near the end. I begin to wonder if I've had my last thought or felt my last feeling.",
        "Occasionally the storms are strong enough that I have no choice but to open my eyes and stare. The ceiling is plain and white. The light that comes in sometimes through the window is dulled. Occasionally I realise that the room light is on. I get confused. I'm not sure where I am for a minute here or there. Sometimes I hear whispers and I turn my head but there's nothing there. I hear long lost whispers of memories and little regrets, but they're so faded that there's nothing really to hold onto.\n\nSometimes I look at my hands and make fists. I try and claw the bed just to feel like I'm on something solid. Like I'm not just on air.\n\nDana and my mother are here on the fifth day and they're silent. Dana is here on the sixth day and she's mostly silent. In the evening she speaks to me. I hear her words and I want to answer and when I do, I say little. I don't really know what I say. Darkness comes and goes and every time it goes, Dana is there, sitting by my side, her face slowly showing the wear and the exhaustion and the growing sadness. Sometimes I see her on the armchair and she's texting on her phone and I know she's telling Lucy how I am. I can already see the time coming where I'll wake one day and I might see Lucy's face instead of Dana. But how many days left?\n\nIt's the seventh day and Lucy is there.\n\nShe's standing by the window, looking at me. She's keeping her distance.\n\nI think I'm sweating but I don't know if it's because I'm hot or my body is just going haywire or because I'm nervous. I drift away. When I'm back, Dana is next to my bed and my mother is next to her. Lucy is still by the window, looking at me. It's like seeing a ghost at the end of the room except somehow, she's far more real than my mother and Dana. Lucy is solid where the air wavers and seems thin. Lucy is solid where other things in front of me might as well be intangible wisps of darkness trying to press down on me. Lucy is beautiful.\n\nThe light outside is red and a memory takes over and suddenly I'm somewhere else. In my memory I'm in a green field. The sky is an orange red. The red is almost the shade of rich blood because of the smog in the distance and the dark streaks of cloud high above. The colours are like layers of warm. Layers of rich blood and fire and the in-betweens.\n\nLucy is in the green fields with me. She's just taken a picture of a group of our friends under a colossal tree. They are laughing and joking and Dana is amongst them. They don't leave the tree straight away. Lucy is standing with me because that's how it always works out when there are groups of us out and about; she's either with me or Dana. In the memory, I watch them talk amongst each other, some of them touching the tree and attempting to climb it and some of them falling onto the grass, while some of them sit against the trunk. Lucy takes another picture of them. She takes her third picture of just Dana and shows me. Dana looks stunning. Her thick hair is cascading down one shoulder and her big brown eyes are prominent even at this distance.\n\nLucy whispers so that her whisper merges with the breeze and just for a brief moment I wonder if its carried to Dana. Lucy whispers, \"One day, I'm going to marry her.\"\n\nAnd my heart breaks even though I knew it was inevitable. It hammers and pulses like a rapid drum beat and I feel the pain inside it like tiny sparks tripping a wire. I force myself to smile at Lucy but she hasn't even looked at me. She's looking at Dana, who looks up at her and smiles back before turning to one of our friends.\n\nAnd the sun sets and everything is going dark. I'm confused because that was real and vivid and surely I was there and not back here in the hospital room. But I'm smiling now and the heart-break is nearly gone.\n\nMy mother and Dana are blurred and peripheral and at the end of the room, Lucy stands watching me. I know she's going to be fine. No matter what happens to me, I mean little in the end. Lucy will be fine and happy and Dana will be there with her. Lucy will spend the rest of her life being loving and loved and that's all I need to know.\n\nI'm smiling as I fall asleep again and in the dream that comes there's a figure but I don't know who it is. I wake sometime later. My mother and Dana are still there. Lucy is not in the room.\n\n\"We have to leave,\" My mother says. \"I want to stay though. They said I can stay if I want to.\"\n\nShe's asking for my permission. Do I want to be alone? No. I want Lucy, but I can't bring myself to say it.\n\n\"I'll be fine, Mum.\"\n\nShe frowns but nods and leans down to kiss my forehead. She waits by the door while Dana kisses my forehead and stops to look at me. She looks upset. She thinks this is it. My mother and Dana walk out together. For a moment I wonder where Lucy is and I want to see her standing by the window again. I turn my head to the side and before I know it, I've plunged into darkness again and that figure is there with her hand stretched out toward me. It makes me wonder if this is the comfort I've rejected in life. It makes me wonder if it's only to be found in my dreams. I don't know who this figure is but her hand looks familiar and I take it into my own. It's warm and soft. She holds my hand firmly and it feels like I'm being infused with a bit of life.\n\nThe figure squeezes my hand and I wake.\n\nIt's dark now. The soft glow of the bed lamp is the only source of light and my right hand is in someone's hand. The clock on the wall tells me it's after midnight. I feel weak. I breathe slow. My body hurts, all of it except my hand and head. The hand squeezes again, gently this time and I realise I haven't even looked up at her.\n\nLucy is standing by my bed with my hand in her hand. Lucy looks beautiful and sad. Lucy's going to marry Dana one day and they'll have children. Lucy's going to love them with the depths of the oceans just like she loves Dana with the fire of the sun. Lucy is going to live her life as full as she can. Lucy's going to teach her children what it means to be tolerant and what it means to love and what it means to take responsibility and accept that your actions have consequences. Lucy will teach them the power to say 'No;' the most powerful gift anyone could give someone. Lucy will be wise and fair. Lucy will age and wither and die, but that will be at the end of a long, long life.\n\nI am 31 years old and I am close to death.\n\nI am closer to death now than I have ever been and with each second that passes, time stretches and all I can do is lose myself in the sensation of being here, of feeling her hand, of feeling the air on me. All I can do is lose myself in knowing I breathe and my heart beats.\n\nI am close to death and I am alone here with Lucy. I am aware that months of evasion were for nothing. I am aware that the last week happened but Lucy experienced it too because Dana told her everything that went on. Everything. I can see that in her eyes.\n\n\"Hello,\" She says. \"You were breathing funny. I got worried.\"\n\nAnd this time there's only one thing I have to say. \"I'm so, so glad you're here.\" It comes out in a rasping whisper. My mouth is dry.\n\nLucy walks over to my other side and I watch her all the while. She takes hold of my body and pulls me to the left a little. It doesn't take her long; I am light. I help a little, unsure of why she's doing it, but willing to submit. I strain with my arms to help her move my upper body towards the left, across the bed. I strain with my legs too, when she takes hold of them. She walks back to my right.\n\n\"I told the nurses I wanted to stay the night. Your mother made sure I could,\" She tells me.\n\nShe sits on the bed on my right, where there is now space enough for another body. She leans down to take her shoes off. Then she gets onto the bed and lies down next to me. I have never imagined she would lie next to me. She turns on her side to face me. She puts her body up against mine. Her left hand takes my right hand and her right hand rests on my chest for a moment before she moves it up to brush against my neck.\n\nI swallow at the touch. My head is turned to look at her and I can't stop staring. I've never felt so awake in the last few months. Lucy stares at me and her fingers slowly stroke my neck. Lucy's eyes fill with tears and she blinks to get them out, momentarily wiping her face against my arm.\n\n\"I couldn't leave you alone,\" She says. \"I couldn't do that to my best friend. I'm sorry.\"\n\n\"It's okay. I want you here.\"\n\nShe nods once, moving her head forward a little so her chin is on my shoulder.\n\n\"I love you,\" I say.\n\n\"I love you too.\"\n\n\"I'm tired.\"\n\n\"I know.\"\n\nI'm close to death and I'm no longer the only one who knows it. Lucy will stay with me for every moment.\n\n\"I need to close my eyes,\" I tell her.\n\n\"I'm right here, I promise. I'm not going anywhere.\"\n\n\"Night, Lucy.\"\n\n\"Goodnight, darling.\"\n\nI close my eyes and it's dark. And Lucy's there and she's holding my hand and her hand is warm and we're standing in green fields and the sky is blood and warmth and her hand is warm..."
    ],
    "authorname": "clarkcrow",
    "tags": [
        "memories",
        "love",
        "dying",
        "sickness",
        "first person",
        "flashbacks",
        "unrequited"
    ],
    "category": "Non-Erotic",
    "url": "https://www.literotica.com/s/lucy-223"
}
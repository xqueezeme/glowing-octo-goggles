{
    "title": "Not My Type: Rhiannon Ch. 09",
    "pages": [
        "The plan was deviously simple. To be fair it was Violet's idea. We all knew without speaking it aloud that Joe would never forgive himself if his parents weren't present at our wedding. We also knew that they might not come even if invited. So really, as Vi pointed out, there was only one solution. Since there was no guarantee they'd come to the wedding, we had to bring the wedding to them.\n\nLuckily, goings-on at the Tanner farm functioned like clockwork. Joe's father usually returned for lunch at noon and that's when the bunch of us planned to show up, with Reverend Nate in tow. Joe and I would then get married on the Tanner's front porch. His parents could hardly ignore a ceremony in their own yard. It was brilliant really.\n\nSecretly, I'd wanted to get married on the beach in my own little cove, with our cottage in the background and the waves crashing onto the sand at our feet. But Violet's plan had merit and I agreed to it because I knew it was what Joe wanted most.\n\nI felt surprisingly calm as Adele, Lilly and I got ready at my old place in town. Both of them had chosen simple sundresses in line with my own. Out of nowhere Adele produced a bouquet of white hydrangeas for me to hold.\n\n\"Something new,\" she explained as she passed them to me. \"From my garden.\"\n\nLilly fussed with my hair until every wave lay perfectly. \"Your 'something old' can be your dress.\" She blushed a little then added, \"And 'something blue' is definitely what you have on underneath.\" \n\n\"So what's my 'something borrowed'?\" I teased when our eyes met in the mirror. Up until that moment, I'd forgotten all about that particular silly bridal tradition. \n\nLilly pursed her lips then a look of happy inspiration crossed her pretty face. She reached up around her neck to unfasten the gold necklace she'd worn countless times over the years. Her hands felt warm as she placed the delicate, antique piece around my own throat. \n\n\"This locket belonged to my Great-Grandma Tanner. It was her wedding gift from my great-grandfather. She was rumoured to have been quite a spunky lady. I was pretty young when she died, so I don't really remember her but Mum always said she was a hellion.\" Lilly smiled. \"In a good way, of course. There aren't enough hellions in the Tanner line.\"\n\n\"There is now,\" Adele murmured as she disappeared into the closet to dig out my shoes. \n\nMy fingers traced the patterns on the locket. I couldn't remember a time when I'd seen Lilly without it. \"Thanks, Lil,\" I managed to get out past the tightness in my throat. \n\nShe leaned down and wrapped her arms around my neck. Her Tanner-blue eyes sparkled as she pressed her cheek against my own. \"I've always been glad you and I were friends. I'm even more thankful now that we get to be sisters.\"\n\nI pushed back the tears which threatened to overflow and instead patted Lilly's freckled arm. \n\nLilly laughed in my ear and said, \"Let's go and get you hitched. I can't wait to see the look on Dad's face.\"\n\nI, on the other hand, dreaded the look on Gerard Tanner's face when he realized what was happening on his front porch. \n\n~*~\n\nThe ride out to the farm was pretty quiet. Adele seemed lost in her thoughts while she drove. I wondered if she was reliving her own wedding day. It had been a big Catholic wedding in Montreal with all the bells and whistles. Adele looked like a blonde angel, dressed in a fantastic, beaded winter-white sheath. That afternoon as she walked down the aisle, I'm sure she believed her marriage would last forever. It must hurt her now to remember the thrill of that day over four years ago.\n\nI wanted to say something to her, to reassure her that despite her own experience, and despite the broken marriages she saw every day in her work as a lawyer, that there were marriages that could work, marriages that did. Joe and Lilly's parents were a good example of that. Mrs. Nichol too had been happily married for fifty-five years before her husband passed away. Partnerships could work if both people involved were willing to make the effort. I was just starting to learn that for myself, I wanted her to know it too.\n\nBut I didn't say anything even though I knew I should. Mostly because Adele would probably resent my assuming I knew what she was thinking. She always tried to hide her sadness from Lilly and I, as if we couldn't understand. Adele never was one for discussing her problems. She always kept them to herself. I was acutely aware too of how ironic my giving love advice to anyone was seeing as I was hardly a paragon of healthy interactions with men.\n\nWith a small sigh of resignation I flipped down the passenger side sun visor to fuss with my hair in the mirror. In it I could see the reflection of Lilly in the backseat as she looked out the window with a dreamy smile. It was the expression she got when she thought of Adam. I could easily picture her as the stereotypical blushing bride with him as the handsome groom. I hoped he wouldn't make her wait too long to make the dream a reality. I imagined hers would be a simple yet elegant wedding, with the finest food and lots of Tanners to create their own brand of havoc despite Lilly's meticulous planning.\n\nFor my own part I should have been a nervous wreck but there was a strange, out-of-body sensation about the entire day. I never expected I'd ever get married yet the moment got closer and closer as we passed rolling fields of green and red. I stroked the curve of my stomach. My entire life had changed so fast that at times it felt surreal. Somehow it all felt right though, and the thought made me smile.\n\nThe one regret I had about the day was that Mrs. N. wouldn't be there. I'd gotten up early that morning to visit her in the hospital. She laughed herself hoarse when I told her the plan and deemed it 'damn brilliant'. Joe's brother Chuck came up with the idea to broadcast the ceremony over webcam so Mrs. N and her granddaughters could watch from her hospital room on my laptop. It wasn't quite the same as having her there, but it was close. \n\nThe others were waiting for us when we pulled into the top of the Tanner's lane. Lilly and Adele made a beeline for Adam and Nate, who stood talking and laughing. The contrast and similarities between the two best friends struck me again: sinner and saint, both tall, lean, and ridiculously handsome.\n\nBut Joe stood apart from the rest, stalwart and silent, his large arms crossed over his broad chest. His auburn hair shimmered in the late morning sunshine. He was clean-shaven and grinning but that wasn't what caught my attention. \n\nJoe-fucking-Tanner was wearing a suit!\n\nI walked towards him without realizing I'd even taken a step. I'd never seen Joe wear anything but work clothes or jeans and a t-shirt. My eyes flitted over every seam of the tailored charcoal grey suit. Joe looked fantastic, better than fantastic. His white shirt was pristine. Silver cufflinks glinted at his wrists above his tanned hands, and his sea-blue tie matched his eyes. He wore the suit like he belonged in it. I'd guiltily pictured him being uncomfortable in dress clothes, instead he'd surprised me yet again. \n\nLilly could keep her Adam with his rock-star good looks. Adele could have her blond, saintly Adonis in Reverend Nate. All I wanted today and every day after was Joe, so rugged and sweetly shy as his gaze met my own.\n\n\"You look beautiful, darlin',\" Joe murmured as we came face-to-face. He chuckled and his eyes lit up with recognition as he checked out the dress I'd chosen. He took hold of my hand, the one that didn't have a death grip on the bouquet of hydrangeas, and tucked it into the crook of his arm. The solid muscle beneath the layers of poplin shirt and wool suit was a comforting anchor.\n\nI stood stunned and silent as the others crowded around us to offer their congratulations.\n\nNate glanced at his watch. \"Twelve-fifteen\u2014it's show time, folks.\"\n\nWe made a motley crew as we proceeded down the length of the Tanner's lane towards the house. There was no music save the laughter of Joe's brothers and sisters, the keening cry of the gulls overhead, and the constant crash of the waves into the bluff beyond. \n\nJoe and I were the only two of the bunch who didn't make enough noise to be heard half-way to the city. We tromped up the front steps and took our places while Chuck set up his laptop and webcam in just the right place. A few clicks later, he gave us an enthusiastic thumbs-up before he slipped into his spot.\n\nJoe and I stood front and centre with Adele to my left and Matt, as best man, to the right. Behind him stood Chuck and Adam, both wearing huge grins. Lilly and Violet stood with Adele, their expressions were twin mirrors of nervousness. Nate flashed me a reassuring smile and raised his hand to knock on the front door.\n\nIt took a moment before the curtain in the living room window twitched. There was a little scuffle behind the door before it opened a crack, revealing a surprised looking Pat Tanner.\n\n\"Good afternoon, Mrs Tanner,\" Nate said brightly. \n\nShe took in the crowd of us circled around her front porch. Her blue eyes flickered over my bouquet and Joe's hand in my own, before alighting on Reverend Nate and his clerical collar. She gasped.\n\nI think we all held our breath. I felt the tension in Joe's hand as it clutched mine. I tried to reassure him that everything would be okay when I squeezed back. A strained silence stretched on before Joe's mother threw the door open wide.\n\n\"Gerard! You better get out here.\"\n\nThe clatter of dishes came from the back of the house followed by heavy, measured footsteps. \n\n\"What the hell?\" Joe's father mumbled as he turned the corner into the hall. He froze.\n\nJoe's face turned into an expressionless mask which I knew hid his fear. I was actually trembling. Matt looked amused, Chuck downright worried. I wanted to turn my head to see what the girls were thinking, but I didn't dare move an inch. My gaze met Joe's instead. He took a deep breath and gave me a tiny smile. I found myself smiling back.\n\n\"Dearly Beloved,\" Nate began in a solemn tone, as if this was a normal wedding, like the dozens of others he'd performed over the years. \"We are gathered here today to celebrate the joining of two very special people, of two very different hearts.\"\n\nMr Tanner's eyes widened and he stepped forward into the doorway, but stopped when Mrs Tanner laid a small hand on his arm. She looked up at him with tears in her eyes and shook her head.\n\nI didn't think I'd live to see the day when the giant force of nature called Gerard Tanner would be stilled by so gentle a touch. Lilly started to cry.\n\nThen Joe's mother did something else which was truly amazing. She turned to Joe and me and smiled. The mood instantly lightened almost as if the sun had come out from behind a bank of clouds. Her big, blue eyes shimmered with tears as she nodded at Nate to continue.\n\nThe Reverend spoke then about love. About the love we have for our families and for our friends and about the invisible bonds which hold together the people in our lives. His words were simple, honest, and sincere. When his discourse shifted to the love parents have for their children Mrs Tanner began to sob in earnest. But it wasn't her Nate was talking to, it was me and Joe. \n\nI felt the small ripple of agreement in my belly as Nate spoke of the instantaneous and deep love parents have for their child. Of the responsibility they feel towards their offspring, how their marriage vows to love and care for each other extend tenfold to the children they would have together.\n\n\"We often make mistakes in life, we're often faced with surprises,\" Nate said in his smooth, low voice. \"And in the outside world we are judged for those mistakes and for how we react to those surprises.\" \n\n\"It is only in our home, when we're surrounded by the people who love us most of all, that we are free from that judgement, that we are supported for those choices and reactions\u2014and in spite of them. Our family loves us for our faults as much as for our virtues, if not more, for our faults are what truly define us.\n\n\"Today we see a new family standing before us, and an unlikely one at that. There are probably not two people on this island more different from each other than Joe and Rhiannon, but that doesn't make them less as a couple. I believe in my heart it makes them more of one.\n\n\"They have already faced hardship and a decision which is bigger than the both of them. In light of all the difficulties, despite the surprises, they have stood firm and chosen to do what they know to be right.\"\n\n\"Love is a wondrous gift,\" Nate said as his gaze danced between me and Joe. \"We should not question who it chooses. That is why it gives me great pleasure to ask: Rhiannon Elizabeth Barnes will you take Joseph Gerard Tanner to be your lawfully wedded husband, in health and in sickness, in times of prosperity and in times of want, through joy and through sorrow, until death parts you?\"\n\nI'd been watching Nate, caught up in the magic of his words and his beatific smile but when he called Joe's name, my eyes flickered instantly to the man who stood beside me, holding my hand. He was so tall, so strong, and proud. He was the best man I'd ever met. He was the only man who ever saw more to me than just my reputation or my money. \n\nJoe loved me for me. \n\nHe'd grown to be the best part of my life and he always, always would be.\n\nAdele hand was at my back and while it felt good to have the support, I didn't need it. I knew what I was going to say before my mouth opened. \n\n\"I do.\"\n\nJoe had been holding his breath and he let it out in a mix between a dry chuckle and a sigh of relief. Behind him Matt, Chuck, and Adam laughed. A chorus of sniffles came from the girls. Adele pressed the cool weight of Joe's wedding band into my hand. We'd bought rings yesterday after leaving the hospital. I'd chosen a slim, delicate one for my own. Joe's was easily twice the width of mine, solid and strong, like the man himself. I slipped it onto his finger.\n\n\"With this ring I take you as my own; my helpmate, my protector, my husband.\"\n\nNate beamed at me when I got the words right then turned his attention to Joe, whose brilliant blue eyes never left my own.\n\n\"And will you Joseph Gerard Tanner take Rhiannon Barnes to be your lawfully wedded wife, in health and in sickness, in times of prosperity and in times of want, through joy and through sorrow, until death parts you?\"\n\nJoe reached up with his free hand and brushed away the tear that sat on my cheek. I hadn't even realized I'd shed it until his warm skin met mine. His answered smile wasn't just on his lips, it was in his eyes. \n\n\"Damn right!\" \n\nAdam hooted and Matt and Chuck's laughter were twin echoes of surprised enjoyment. Adele stayed silent but I felt her shaking with amusement behind me. Both Lilly and Violet were giggling through their tears.\n\n\"Joseph,,\" his mother chided in a whisper, \"do it properly.\"\n\nMy bear of an almost-husband actually had the nerve to look sheepish before he leaned down and rested his forehead against my own. \"I do,\" he whispered. He slid the slim wedding ring down my finger. \"With this ring I take you as my own; my helpmate, my treasure, my wife.\"\n\nNate clapped Joe on the back amidst the catcalls and shouts of congratulation. Adele squeezed my elbow so hard it was certain to be bruised while Lilly and Violet chattered on. Everything and everyone faded away except the steady gaze of Joe-fucking-Tanner. \n\n\"Well then,\" Nate continued with joy in his warm voice. \"There's nothing left for me but to say, very proudly, that by power vested in me by God, the church I serve in his name, and the laws of this good province, I now pronounce you husband and wife. Joe, you may kiss your bride.\"\n\nJoe didn't wait for the good Reverend to finish though\u2014we were kissing well before we were bidden to. His mouth was hot and slick, his kiss both sweet and possessive. I pressed myself against the wall of his chest, crushing my bouquet between us. Joe's hand met the back of my head as the kiss deepened.\n\n\"Lordy,\" Nate said under his breath before giving a low, good-natured whistle.\n\nThe sound brought Joe's head up with a snap. His cheeks were stained a deep pink as we both fought to get our breathing under control. For a moment we really had forgotten anyone else was there.\n\nJoe's father stepped forward into the sunshine which had crept onto the covered porch as the afternoon waned. As always, his face was stoic and composed. The cheerful chatter ceased as father and son stood face-to-face. \n\nHe raised his arm and for a brief moment I wondered if he would hit Joe. Another man would have flinched, but Joe stood tall and looked his father in the eye. Instead of a clenched fist though, Mr Tanner presented an open hand. Joe clasped it in a firm handshake.\n\n\"You ain't off the hook yet, boy,\" Mr Tanner said in a soft but reserved tone. \"But it's a start. I didn't actually think you'd marry her. We cultivate the south field first thing Monday. Don't go sleepin' in.\"\n\nJoe's mother bustled forward to pat both men on the upper arm, which was about as high as she could reach. \"There now,\" she cooed. \"Isn't that nice?\"\n\nI watched Joe in disbelief. He seemed a bit stunned himself. Matt and Chuck chuckled and Lilly's peal of laughter rang off the porch timbers.\n\n\"Welcome to the family dear,\" Mrs Tanner continued as she pushed her way between her husband and her oldest son to stand on tiptoe and plant a kiss on my cheek. \"I wish you'd warned me though, there's nothing to feed this lot except grilled cheese sandwiches.\"\n\nA sudden heat rushed to my face when I remembered the last time I prepared grilled cheese sandwiches\u2014or at least tried to. Joe let out a lusty chuckle under his breath as we shared a significant look. \n\nAdam swooped in though and took Mrs. Tanner by the arm. \"Never fear, Pat. I was up half the night cooking myself. There's a veritable feast down the cottage. Even a wedding cake and everything!\" He began the parade from the porch down the lane and back towards the little cottage in the cove. The rest of them trailed after, Lilly with her father, Violet skipped along beside Matt, Adele laughed lightly as Nate whispered in her ear.\n\nChuck moved to the little table where his laptop sat, still broadcasting the proceedings for Mrs. N. She appeared frail and colourless on the screen, but she was grinning. Her granddaughters surrounded her, each clutching tissues and sniffling.\n\n\"That was lovely, Rhiannon,\" Mrs. N said, her speech much clearer now. \"And more fun than one of my soap operas.\"\n\nJoe and I laughed. \"I'm glad you got to see it,\" I said. \"I wish you could be here though.\"\n\nMrs. N. waved a spindly hand. \"It's more comfortable here anyhow. You bring me a piece of cake though, and some for the girls too, when you come by tomorrow to talk about the store.\"\n\nI knew an order when I heard it. Stubborn old thing, she never stopped thinking about the store.\n\nI knelt down so I was close to the webcam and smiled at her. \"I'll do that,\" I promised. I blew Mrs. N. a kiss. \"I love you,\" I whispered, regretful that I hadn't told her sooner, glad that I had the opportunity before it was too late.\n\n\"I love you too, girl. Now go enjoy your wedding day. You kids have tired me out, I'm about ready for a nap,\" Mrs. N said with a chuckle. \n\nThe granddaughters scooped up the laptop to give me and Joe their best wishes and cheerful promises to have the store ready to reopen by Monday morning. Chuck took over after I thanked them. He closed the program and packed up his laptop. Then with a half-bow and a big smile, he hurried down the lane to catch up with the others.\n\nJoe and I lingered for a moment on his parents' porch. My gaze skimmed over the neat flower beds, the row of wind-swept trees, and the shaggy grass which carpeted the lawn until it met the edge of the bluff. It was all so dear and familiar I couldn't help but smile. I'd always felt at home here, now I truly was.",
        "\"Hungry?\" Joe enquired.\n\n\"Starving. I didn't have much of a stomach for food this morning.\"\n\nJoe rested a wide hand over the curve of my belly. The life within jumped beneath his touch. The baby wasn't large enough yet for him to feel, but I did and it made me happier than I could put into words.\n\nJoe knelt at my feet. His hands spread outwards over the smooth cotton fabric of my dress to cradle my hips. He rested his head against my abdomen. \"You look beautiful today, darlin'. More beautiful than you ever have before. I love this dress\u2014blue is my favourite colour. \" He dropped a kiss on my stomach. \"I love our baby.\" Another kiss. \"And I love you. I always have, I always will.\"\n\nThe lump in my throat was too big to speak past, but evidently Joe wasn't expecting a response because he rose to his feet, took my hand and led me down the lane towards our own home. He spoke softly about the fields as we passed, about his plans for the red earth he loved, about how the farm functioned, how the potato crop was planted, how it grew, how it was harvested. I'd never heard him speak of the farm quite that way before and his passion for it, coupled with his knowledge, made me see him in a way I never had.\n\nThe party was already in full swing down at the cottage. Joe and I paused where the stand of trees broke and opened out to the tiny vista of our cove. \n\nLaughter floated over us as Joe's mother shooed Matt and Chuck away from the food. Adele and Lilly had their heads together, one blonde, one auburn, as they conspired over cold drinks. Adam presided over the charcoal grill while he chatted with Mr Tanner as if it was the easiest thing in the world. Every table had been brought outside and loaded down with food to the breaking point. The men had shed their jackets and ties. Nate had even removed his clerical collar. He sat with his feet up, strumming on his guitar while Violet danced barefoot in the sand, her red hair like a flag in the wind.\n\n\"Welcome home, darlin',\" Joe said so only I could hear.\n\n~*~\n\nIt must have been the longest day of my life and I'd never been more exhausted. Only sheer force of will was holding me upright. I heard Joe trailing through the cottage, turning off lights, getting everything settled for the night as I slipped into our small bedroom. The last of the Tanner siblings had gone, packed off to their proper home up at the house. It was finally quiet for the first time in days. \n\nJoe came up behind me, wrapped his arms around my waist, and laid his chin on the top of my head.\n\n\"Alone at last,\" I joked, suddenly nervous. After a full afternoon and evening of Tanner family carousing, I should've welcomed the peace and quiet. So why did my insides turn to knots at the idea of being alone with my husband? Maybe it was because he was my husband.\n\n\"Mm-hmm,\" Joe murmured into my hair. He planted a kiss there, making me smile.\n\nThere had to be words for what was in my heart, but I didn't know how to make them come out. I felt as if there was so much I needed to say to Joe, so much I wanted him to know, but didn't know how to begin.\n\nThere was one thing I knew how to do though.\n\nI turned in Joe's arms until we faced each other. I snuggled under his chin and kissed his warm throat. He purred as my lips traveled upwards over the stubbled flesh of his cheek.\n\n\"You look absolutely fantastic in a suit,\" I whispered as I nibbled on his earlobe. \"I'm going to have to find a way to get you to wear one more often.\" \n\nI ran my hands up over the smooth poplin of his dress shirt. His beautiful blue tie had been removed hours earlier, but I was more interested in the tanned neck above his open collar anyway.\n\n\"All you have to do is ask, darlin',\" Joe said in a gruff tone. \n\nI teased the whorl of his ear with my tongue and Joe's wide hands drifted up to span my waist possessively. \n\n\"I didn't think we'd be doin' this tonight.\" He growled with pleasure. \"Ain't you tired?\"\n\n\"Not at all,\" I lied. Five minutes ago all I could think about was sleep, but that was before the spark of desire had been lit in my belly. Sleep could wait. It was my wedding night after all.\n\nMy mouth moved across Joe's rough cheek to brush lightly against his lips. He smiled and one hand moved from my waist to the small of my back to pin me against his body.\n\n\"My wife,\" he said slowly. \"My beautiful, beautiful wife.\"\n\nJoe reached up and gathered the heavy curtain of my hair to expose my neck.\n\n\"Go on,\" I prompted. My heart was beating so fast Joe had to feel it as he held me to him.\n\n\"My wonderfully stubborn wife.\" Joe chuckled as he bent to my neck to rain soft kisses on my skin. \"My tough-talkin', no-shit-takin', yet-somehow-still-bighearted wife.\" He slipped the strap of my sundress down, his mouth following the same path as his fingers. \"This family didn't know it, but they needed you. You're like a breath of fresh air in this place.\"\n\n\"Joe...\" I gasped as he kissed the inside of my wrist. His tongue flicked over the quick drumbeat of my pulse.\n\n\"I wanna make love to you until you fall asleep.\" Joe's voice rumbled deep and low. He was as turned on as I was. \"Then I'm gonna wake you up and make love to you again. Tonight, tomorrow, and every night 'til I'm ninety.\"\n\nI cocked an eyebrow. The old, sultry, flirtatious Rhiannon simmered beneath my skin. She hadn't disappeared after all, she just existed only in the space Joe and I had created together. She wasn't gone, she just belonged with one man now. Tonight, tomorrow, and every night 'til she's ninety.\n\n\"Every night Joe?\" I teased as he reached to slide the other strap of my dress down.\n\n\"Well\u2014\" He laughed a little sheepishly. \"Maybe not every night, but pretty near. And just 'cause we're not doin' it, doesn't mean I ain't thinkin' it.\"\n\nHis deft fingers found the zipper at the side of my dress. He drew it down with slow, deliberate ease, his calloused fingers deliciously rough yet gentle against my skin.\n\n\"What's under here for me today?\"\n\nHe peeled the blue floral fabric from my breasts. His eyes widened as sapphire lace was revealed. It wasn't the most comfortable bra I owned, especially since pregnancy had increased my bust line, but comfort wasn't what I had aimed for anyway. Soft, round flesh practically poured over bright blue lace. \n\nJoe traced the scalloped edge of the delicate fabric with a feather-light caress. When he looked up at me, his eyes had darkened to a stormy navy.\n\n\"I am the luckiest man ever,\" he groaned before he worked the rest of my dress down over my hips. \n\nThe bra matched the panties, as did the garter belt. Joe stared at me with hungry eyes then picked me up and deposited me on the bed with gentle care. He stripped off his own clothing before he stretched out beside me. \n\nHe ran a large, capable hand up my stocking-clad leg. The spark of want burned deep in my belly, as it had before with Joe, but now there was something more. This wasn't just lust, although there was plenty of that, but it was also love\u2014on Joe's part and, I was beginning to believe, on my own as well.\n\nFor the longest time he did nothing but touch me. The tender paths his fingers took seemed almost random to me, but obviously meant something to Joe. It was as if he planned to learn every inch of me by hand. I don't know if he intended it to be this sexual, but before long I was practically panting with want.\n\nJoe chuckled while I squirmed beneath his fingers. \"Somethin' wrong darlin'?\" \n\nI'd never trusted myself to be the passive partner before. I'd always taken the lead with men in the past, but with Joe it felt easy to lie back and let him do what he liked. Up to a certain point. There was a damp pool of need between my thighs and I desperately wanted more than just gentle exploration.\n\nI gasped as he touched my breast for the first time. Even through the lacy barrier, my nipple hardened instantly at the caress. \"Kiss me, dammit!\"\n\nJoe's laughter was a deep rumble I felt down to my toes. He didn't hurry to acquiesce though. Instead, he plucked at the elastic of my garters.\n\nI changed tactics and arched myself against him, pressing all my soft curves against his solid muscle. Through lowered lashes I looked into his deep blue eyes. \"Kiss me Joe? Please?\" I purred.\n\nI smiled to myself when he growled in the back of his throat. If Joe-fucking-Tanner wanted seduction, I'd be only too happy to oblige.\n\nJoe took my mouth then, with a greedy hunger that drove the air from my lungs. We kissed and kissed, as if we couldn't get enough of each other, as if each time we'd discovered something new. \n\nTime slowed to a crawl. The constant rhythms of the waves on beach outside and of the ticking of the alarm clock at the bedside fell into the distance. Nothing else in the world existed for me but Joe. My husband.\n\nHe gently removed my panties and my bra. Being released from the wire cage made me groan with pleasure. Joe kissed the red marks left behind by the ill-fitting brassiere. He teased at the edges of garter, his hands swooping over the transition between silky stocking and smooth skin. Every touch made me feel luxurious, like I was melting into a puddle on the mattress. I'd never been more relaxed. I'd never been more excited. I'd never been happier.\n\nWhen Joe slid into me it felt better than before. I was so slick and he was so hard, we both groaned in ecstatic unison. We moved together like we were made to, and when I finally found my release, tears dampened my cheeks. Joe cried my name when his turn came. He collapsed against me with his face buried in the damp curve of my neck.\n\nI only knew the sound of our harsh breathing as the stars behind my eyelids faded and my heart rate slowed to normal. Joe didn't move, but held me down with his solid weight.\n\nI'd never felt anything like this. There was such an intense rightness about it all, about him and about us, about our little home together, about how we were with each other. I couldn't pretend to understand what had brought us together, I didn't dare question why it was he loved me, how it was he'd chosen me. I only knew he did, and he had. \n\nJoe remained still for so long, I figured he'd fallen asleep. The temptation to drift off tugged at my own mind but I had to do something first. With a happy sigh, I reached up, pushed the soft hair from Joe's forehead and put a kiss there so he'd have sweet dreams.\n\n\"I love you Joe-fucking-Tanner,\" I whispered even though he couldn't hear me. Or maybe it was because he couldn't hear me. I'd never said it to any man before, maybe I felt I needed to test it out.\n\n\"I love you too, Rhiannon-fucking-Tanner.\"\n\n\"You're awake!\" \n\nHe chuckled, the sound deep and gravely. \"Damn right. But we ain't discussin' this now,\" he said in a sleepy voice. \"We'll talk about it in the mornin'.\"\n\nHe shifted his body and slid off from on top of me only to scoop me up in his arms and nestle me beneath his chin where it was warm. I wrapped my arm around his broad chest and squeezed. \n\n\"I thought you were going to make love to me until I fell asleep and then wake me up and make love to me again.\" \n\n\"You ain't asleep yet.\"\n\nHe was right, of course. I wasn't asleep yet but it felt like I was dreaming nonetheless. \n\n\"I love you,\" I whispered, testing it out again. \n\nMy husband nuzzled my hair and then with a contented sigh, slipped into sleep. Happily, I followed.\n\n~*~\n\nThank you all so much for loving Joe and Rhiannon as much as I do and for your continuing feedback. Thank you as well to R for the superb editing work -- you make my work better than I could ever imagine! And, as always, thank you C for being my Joe and for not complaining about dinner being late. Again."
    ],
    "authorname": "firstkiss",
    "tags": [],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/not-my-type-rhiannon-ch-09"
}
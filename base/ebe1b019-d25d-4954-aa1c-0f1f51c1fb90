{
    "title": "Str8 Sex to be near Gay Dream Ch. 05",
    "pages": [
        "This is based in fact. I've changed a few things, both to make it less clearly identifiable for all involved and also to smooth the story out a bit, since life is never as simple as we'd like.\n\n*\n\nIt's a good thing Debbie was so understanding. Okay, she was the reason I was here in the first place, but wow, what a turn things had taken!\n\nI never imagined \"straight\" breathtaking stud Todd would have any interest in another guy, especially me! But here we were. Not only had I lost my virginity this weekend, but Todd took the opportunity to have sex with me. Todd wanted me? I couldn't have been happier... or more confused!\n\nAfter that last round of fun, Deb made us get up and strip the bed. She threw the sheets in the wash\u2014her parents would kill her if they had any idea what we'd been doing\u2014and then we went to hit the shower again. It was cramped in there, but I didn't really care. We'd already had fun in there before, and I was up for whatever they wanted.\n\nAs we headed into the bathroom, Todd got into the shower and started the water. I heard him yell \"shit!\" as the cold water smacked right into him. He pushed the showerhead aside until the water started to warm up. Deb and I were waiting a sec outside the shower, but as the water apparently was warming up, I went to get in. She grabbed me: \"Oh no, gay boy, you're not getting to be in the middle! This is my party! I'll be in the middle!\"\n\n\"I was just going to...\"\n\nI didn't even get to finish the sentence. She laughed, pushed me back with a hand on my chest, and stepped into the shower.\n\nThen I added, \"would you stop calling me gay?\"\n\nShe laughed again. \"Whatever. It's just us. What do you want? Bi boy?\"\n\n\"How about Jess?\"\n\n\"Lighten up! Really, it's just us. I'm not telling anyone. You know what I want! Just keep giving it to me.\"\n\nWith that, she grabbed my cock, and I stepped into the shower with them. Todd was just watching us and smiling as he stroked his cock. I reached to close the glass door, as Debbie kept a good hold on my cock and then we started kissing. I'd about lost track of how much I'd cum already, but I was getting hard quickly as we kissed and she started stroking me. (How many times could I cum in a day? I was going to get friction burns on my dick at this rate!) And still, there was that pull in another direction. Seeing Todd, that beautiful man, the shower wetting his blond hair, as he smiled at me and looked... how do I describe the look on his face? It was mischievous, naughty, very horny...\n\nBut damn if Debbie's hand didn't feel good. So I closed my eyes, kept kissing her and enjoyed her hand on my cock as we kissed. I ran my hands over her tits, still liking the feel of them as I massaged them and then played with her nipples. Then I felt like I should do more for her and ran a hand down her body, finding my way to her pussy. I'd watched Todd when he played with her, and I tried to imitate that. I first rubbed up and down. Then I worked a finger into her just a bit. Then deeper, and she kissed me harder and actually stopped stroking me and just grabbed me really hard. I started moving my finger in and out of her. I could feel her heat on my finger, and I slipped a second on. She bit my lip and moaned, \"yeah, Jess, you're getting the idea. Fuck me with your fingers!\"\n\nI figured out how to make sure I was rubbing against her clit as I fingered her pussy, and she kissed me more. Our eyes were closed, as we continued making each other feel good. When my eyes were open, Todd still got most of my attention, but I couldn't deny all this straight sex felt damn good, too! As I kept working on her pussy, she moaned in my mouth as we kissed. Then we broke apart and she made these little gasps. That encouraged me to go faster, but then I slowed a bit. Natural sexual skill? Well, that or my fingers were cramping a little from being in one position, but I didn't need to tell her that. Then I went deeper and faster. Debbie was really getting off on this, and then she literally did. \"Keep going, Jess! Yes! Oh, that feels so good!!!\" And then she leaned hard into me and I held her tight with one arm around her back as she came on my fingers. Her whole body was heaving, and I could feel the heat coming off her as she shook in my arm.\n\nShe finally started to come down from what seemed like a long, intense orgasm (at least from my limited experience with female orgasms!), and then smiled. \"For a guy who just lost his virginity this week, you're a quick learner. That was great!\"\n\nI felt like such a stud! I really did. And then she reminded me that she hadn't let go of my cock through the whole thing by stroking me and saying, \"Can't let this go to waste!\" She put a leg up on the edge of the tub and pulled me closer. She started rubbing the head of my cock on her pussy, and we both moaned. Then she just held it right against her lips and said, in her very direct way, \"Well, Jesse James, how about you use your big gun on me?\" Jeez, I hated being called that. But this was one time that I wasn't going to say a thing about it.\n\nThe position was a little awkward, but I did my best to line up and... she yelled \"Oh my God!\" so loud I almost jumped back! I guess she was pretty keyed up still from having just cum. It took me a minute and a little maneuvering to get my position right, but then I was able to grab her at the waist and start a nice motion, fucking into her tight pussy. It felt awesome! She was squeezing me tight, and it felt like her hot walls were almost pulsing around my cock as I thrust all the way into her and then pulled back, almost coming all the way out. It was the simplest of stand-up fucks, and it was amazing! Deb moved her leg from the tub edge to wrapping around me\u2014I'm trying to remember, but I think she kind of got it sort of around my ass or upper thigh at that point. It still was a more difficult position than being in bed, but I was motivated!\n\nShe was panting that she was getting close again, and then she fell into me as I kept thrusting. \"Oh, oh, oh!\" and she was gasping, as her pussy grabbed me hard. Luckily, I had my staying power at its best then, probably because I'd cum so many times already with them, so I slowed down a little as she came, and then I started thrusting again.\n\nI'd pretty much forgotten about Todd. That alone says something. The man I wanted more than anyone in the world was standing naked in the shower maybe two feet from me, and I wasn't really paying attention to him. Then he said, \"you two are going to make me jealous!\"\n\nDebbie seemed like she could barely speak, but she said, \"Sorry, but you get plenty! And this is awesome!\"\n\nHe looked at me and said, \"You'd better save some for me, man! Some of you and some of her!\"\n\nI was feeling very confident and just said, \"plenty of us to go around!\"\n\nThen he got closer, as I kept fucking Deb. And she still was moaning as I thrust into her, while Todd reached under and was feeling my cock and her pussy. Then he started trying to finger her a bit. It seemed like he was trying to slip a finger in with my cock. Deb told him to knock it off in no uncertain terms! \"I'm not one of the tramps you like to watch in your porn! One big cock is all I need in me right now!\"\n\nThat actually worked out pretty well, because then he kept reaching under and cupped my balls in his hand. His warm fingers massaged my balls as I kept thrusting in his girlfriend!\n\nFucking while you're standing in the shower may be simple for some, but it took me some getting used to, so I could get the deepest thrusts while not falling on my ass! But once I did that, I managed to get a little more going. I had been holding Deb, then massaging her tits. Then I leaned in and started sucking her nipples, one then the other, and then some nibbling, too, and that seemed to send her over the edge again. Three times in one session, which she'd later tell me was a very big deal for her, and then I felt her pussy grabbing my cock again as I kept moving deep inside her. At the same time, Todd's hands had moved back to grab my ass as I was thrusting. At one point, he seemed to be moving his fingers around to get at my hole, but then he backed off for some reason. Not that it was a tragedy, since I already felt an incredibly deep orgasm starting to build. One of those whole-body, comes-from-deep-inside orgasms that you can't even believe is so intense.\n\nI felt tingling climbing my legs and a sensation starting deep in my core. I knew this would be intense. I'd lost track of how long I'd been inside her, but it was a while. She still was panting, and if we weren't in the shower, I'd bet her juices would have been flowing down my balls and my legs, but there was no way to tell in there! She said, \"Damn, how long can you fuck, babe? I'm not sure I can take much more!\" Not that she seemed to be in any distress, but it didn't matter, because I knew I'd be shooting soon!\n\nTodd still was holding my ass and seemed to be enjoying the whole scene, even if his poor cock wasn't getting any attention. He said, \"Yeah, fuck that pussy! Your ass feels awesome!\" (He'd tell me later that he meant that he loved how I was clenching with each thrust and he could feel that as he held me\u2014clenching asses was something I always appreciated in other guys, so I got that!) And somehow, as he grabbed my ass, he managed to find enough space under us to get in and lick around Deb's pussy. I also could feel some contact with my cock. I'd like to say that added a lot, but it didn't change the physical sensations much, since it was mostly her squeezing walls milking me to orgasm, but mentally, it was a thrill! And then he apparently stuck out his tongue and let my tightening balls run across it with each stroke in her. It was an odd sensation\u2014fun, but again, more psychologically thrilling than adding to the feelings.\n\nI was getting closer, but this orgasm was building slowly. It was weird. This fuck felt so intense, but it was taking time to reach the climax. I thrust harder and harder. There was going to be some bruising at this rate! I was getting as deep as I could, and I told her, \"I'm getting close!\"\n\nShe said, \"yeah, baby, let me feel that big load fill my pussy!\"\n\nIt was so hot when she talked that way! And I was going to be happy to cooperate. I did my best to keep my strokes long, since I knew she loved that (and so did I!), even as I was going faster and faster. Finally, as I felt myself going over the edge, I gasped, \"I'm gonna...\" and she grabbed my head and pulled me into a deep kiss. My thrusts got erratic, and I felt my cock start to shoot. Deep, long shots of cum. So much I could feel the flow of each shot filling my cock and spraying deep into her.\n\nI heard Todd say \"oh, wow!\" as I kept thrusting. Much slower now, but the feeling was beyond description. Then Debbie broke our kiss and moaned loudly.\n\n\"I can feel it! Yes, baby, fill me with your load! It feels so good! I can feel you spurting in me!\"\n\nI don't know how long I was shooting, but I kept moving as I did. Todd said, \"Man, that was amazing! I could actually see each spurt as your cock was pulsing. Fucking awesome, man!\"\n\nFinally, I came down off that intense sexual peak, my cock slowly slipping from her, as she gasped, \"best fuck ever!\"\n\nAnd Todd said\u2014I think in good humor\u2014\"Oh, yeah? We'll see!\" and positioned himself to slip into her with his throbbing cock. (Wow, that thing was beautiful!)\n\nBut Debbie said, \"I don't think so!\" I can't take one more stroke. I need a break!\n\n\"Oh, come on! I can't watch that with MY girlfriend and not get some!\"\n\nI was laughing at all this\u2014and honestly, feeling a little proud that I was so good at this with so little experience\u2014and kind of collapsed. I sat back at the end of the tub on the little lip it had around the edge. The shower was still spraying all of us in varying degrees, as I looked up at them verbally sparring.\n\nThen Debbie said, \"wow, this is awesome!\" And I noticed her run a hand down to her own pussy. She turned her head towards me and said, \"how much did you shoot in me?\" And she got some of my load on her fingers. It was thick and white and running out of her.\n\nTodd said, \"Let me look!\" And he got back down there and made like he was carefully inspecting things. Then he started licking her pussy and getting every drop of my cum. He ate all of it! At least all that I saw!\n\nAfter a minute, Deb said, \"okay, okay, stop! That's enough!\" and gave him a playful smack on the head!\n\n\"Hey!\" he mock-complained. And then he said, \"Well, what about me! You at least have to give me back my boyfriend's cum that you stole!\"\n\nI'm sorry. What did I just hear? Boyfriend?\n\nAt which point, Debbie said, \"Boyfriend? Make up your mind. You're such a mess! A little while ago, you complained about him nailing your girlfriend\u2014which he does quite well, I'll have you know\u2014but now you're back to going all gay on me, and he's your boyfriend?\"\n\nThen he said, \"Just kidding! But hey, I need to have some fun, too! Look at this!\" And he pointed to his cock.\n\n\"Yeah, it's a nice one,\" Deb said. \"But I need a break. Sorry! Here, let me get around you to shower off a bit.\" And she squeezed around him to get closer to the showerhead. Then, \"Hey, look at that. Isn't that your 'boyfriend' right in front of you know, eye level to your hard cock? Maybe he'd like to help!\"\n\nIf you'd asked me if I wanted more sex just 10 seconds before that, I probably would have said I needed a break, too! But despite the massive orgasm I'd just had, the sight of that man in front of me, and... well, I didn't even say anything. Todd moved towards me and smiled (*sigh*) and leaned down. He kissed me. Tenderly, at first. Then deeper, his hands on my head. I still couldn't believe a lot of this was happening. I had to keep my eyes open for all of this kissing!\n\nHis gorgeous blue eyes looked back at me, and I ran my hands over that body I'd idolized for so long. He was so solid, so gorgeous, so perfect. He eventually broke our kiss, and said, \"please help me out, babe. I need it so bad!\"\n\nI just nodded. He added in a quiet, sexy voice, \"you two were so hot together... I won't take long to cum!\"\n\nThen I found my voice: \"Take as long as you want!\"\n\nHe got a look of tenderness on his face at that point. It almost seemed out of place, but I realized later that this already was more than just sex. He gave me another short kiss, then he stood up, and I leaned in to take him in my mouth. He was so hard, and I could feel his pulse through his cock, as I at first just held it in my mouth. Then I started sucking and licking all around his shaft, as he moaned. He leaned into the wall above my head, and I took him out of my mouth long enough to say, \"Fuck my mouth, babe! Give it to me and let me swallow your load!\"\n\nHe didn't say anything then. I took him back in my mouth, gripping him around the base, and he just fucked into my mouth faster and faster. His hard shaft was leaking on my tongue, and his precum tasted great! I wanted every drop. He was moaning as he thrust faster in my mouth! I was glad I had a good grip on the base, or he might have choked me with those thrusts! I stopped him at one point and gave his balls a good tongue bath.\n\nHe moaned as I did that, and I asked him if he was getting close. \"Yeah,\" he said. And then I took him back in my mouth. He started thrusting again, fucking my mouth pretty hard and leaking even more. It took him just a few minutes, and then his breathing got erratic, that losing-control pre-orgasm breathing that was music to my ears. I was waiting for him to tell me he was going to cum, but he didn't say a thing. Instead, I heard a big moan from deep in his chest, and then his cock started jumping in my mouth. The flood of cum was huge! Spurt, spurt, spurt... again, I don't remember how many, but it was a gigantic flood of fluid filling my mouth. I swallowed as fast as I could, as he kept shooting more.\n\nI kept sucking and licking all around his cock, as he kept moaning and leaned hard into the wall, his head on his arm, as his thrusts slowed. Eventually, his thrusts stopped, but I kept licking and sucking until it seemed I'd gotten all there was, and he started to go soft in my mouth. Then I let him fall from my mouth, he backed up just a little to give me some room, and I stood up.\n\nWell, I tried to stand up, slowly. Between all the strain on my legs from fucking Debbie in what wasn't the most natural position for my muscles and then sitting like that on the tub edge, I was a little cramped up. (Hey, I wasn't the athlete in this group!) But Todd reached down and helped me get to my feet. After a moment, I had my balance back and was smiling back and forth at both of them.\n\nI looked over at Debbie. She said, \"I don't even care about any of this, you know. It's kind of hot, and as long as I get you two hotties fucking me, too, this is going to keep being awesome!\" She leaned in, and I leaned her way, too. I may not be straight, but after that fuck... well, I felt something then. Our lips met, and we both made soft noises. I think I even felt a stirring in my cock again, but with so many stimuli, who could really label the cause of that?\n\nI didn't know what to say then, but Todd said, \"I think I can live with that.\" Then he leaned a little past me, towards Debbie, like he was going to kiss her. Then as I was smiling at this, he pulled back at the last second and turned to me. He kissed me intensely, but just for a few seconds. When he pulled back, he was wearing a big shit-eating grin.\n\nDebbie looked at him, laughed and said, \"You bitch!\"\n\nWell, there we were! My life was turned upside down but in a way that made me the luckiest guy in town. I had no idea what was coming/cumming next, but I had no complaints! "
    ],
    "authorname": "nygayguy",
    "tags": [
        "bareback",
        "bi sex",
        "blowjob",
        "creampie",
        "felching",
        "first time",
        "gay sex",
        "high school",
        "raw",
        "teen"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/str8-sex-to-be-near-gay-dream-ch-05"
}
{
    "title": "A Highly Recommended Urologist Ch. 04",
    "pages": [
        "Editor's note: this story contains scenes of incest or incest content.\n\n*****\n\nRecap: My hot trans urologist has encouraged her femboy son Gabriel to join me, my girlfriend Ali and her nurse (also her son's girlfriend) Samantha in our little orgy of hot sex. Ali's strap-on has been getting Gabriel's ass ready for me to take his anal virginity.\n\nAs I approached Ali, her plastic dick still in the boy's ass, she leaned over and kissed me with as much passion as I've ever felt in our years together. She truly was loving this. I put my hand on her sweet little ass and helped her thrust into Gabriel as his mom whispered into his ear. I knew she was emotionally preparing him for the next part.\n\nDr. Warner moved over to us and gently pushed Ali's hips until she got the message and withdrew the strap-on dildo from Gabriel's smooth, girlish ass.\n\n\"Ali, remove your strap-on, get some wipes and clean my penis, please. Stephen, I will give you some extra lube so this is more comfortable for Gabriel's first time.\" \n\nI could see Samantha whispering her encouragement to her boyfriend and, free from Ali's cock, he was pounding her mercilessly in response. It was a nice show to watch, these two young androgynous hotties going to town, while Dr. Warner lubed up my cock. \n\nAli returned, completely naked now without her strap-on, and wiped the doc's cock lovingly. She looked me in the eye while she played with the meat, caressing and teasing the stiff pole. I smiled at her naughtiness, eager to see what happened next. \n\nI didn't have to wait long as the doctor positioned me behind her son and lined my slick cockhead up with his ass. She put one hand on his hairless butt to steady him and slow down his intense thrusting. When he was finally still, she put one hand on my well-used ass and slowly pushed me into him. \n\nI'm not much bigger than the strap-on Gabriel was just fucked by and I started sliding in very easily. But then I stopped. \n\nIt suddenly hit me that I was about to fuck a guy for the first time. Sure, from the back it was hard to tell with his slim body and long hair and soft little ass. But as of two weeks ago, I had never even considered the possibility of having sex with a man, even a 19-year-old boy. \n\nSure, I've watched gay porn once in a while out of curiosity. And I admit jerking off a couple times to it and feeling a little weird afterwards. But that was all my experience with male-on-male action and now I was on the verge of having a totally new and unexpected experience. Dr. Warner had this effect on me where things I'd never thought much about before could really turn me on just because she was in charge and wanted it. \n\nI looked over at her as she stared at me expectantly. She had that warm, gentle smile but her eyes were full of lust and demand. My own eyes tracked down the doctor's luscious body, her full breasts with dark nipples and her slim waist and wider hips. Below, Ali was also looking me in the eye as she took Dr Warner's cock in her mouth and nursed on the head while her hands played with her balls. \n\nAli winked at me and that was all I needed. I pushed hard into Gabriel's ass and kept going until I hit bottom. He grunted and let me lead the action as I started pounding his nineteen-year-old boy ass.\n\nI couldn't see Samantha from behind her boyfriend but I could tell they were making out. She seemed to want this as badly as his mom did and I'm sure it was making her very hot.\n\nIn a trance, I watched my cock sliding in and out of that perfect little ass. It actually reminded me of the view when I'm fucking Ali from behind except Gabriel's hair is longer. I started to vary my rhythm and tried to angle for his spot, pressing down to stimulate him from inside like a good lover. \n\nA weight shifted on the bed as I saw Ali thrown on to her stomach. It shocked me and I stopped for a second, worried. Then I saw Dr. Warner grab her hips and raise them before lining her cock up with Ali's sweet little pussy. She slid inside her and looked over at me, her shoulder almost touching mine. \n\n\"Ready?\"\n\nI smiled. \"Fuck yes.\"\n\nWe started fucking our respective partners as hard as we could. I could now compare the two asses side by side and they weren't that different. Ali's hips were a little wider but they had similar skin tone and softness. \n\nI leaned over to my left and touched my shoulder to the doctor's. My lips moved up to her ear. I could hear her panting as she fucked my girlfriend.\n\nI whispered, \"Let me know when you want to switch.\"\n\nThe doctor turned to look at me with surprise and fire in her eyes. I saw her smile devilishly for the first time as she licked her lips then leaned in for a kiss. How wild, I'm kissing the mom and fucking the son! I'm like an incest sandwich, hold the actual incest, for the second time in fifteen minutes.\n\nThe doctor and I made out for a minute but it was tough to focus on the fucking so we let our tongues say goodbye. The smooth, tight boy ass was open enough but still gripping me as I tried to angle again for Gabriel's prostate. I had to slow down to get it right but I could tell from his moans that he was feeling it.\n\nThe doctor was watching us while she nailed my girlfriend. She leaned over and said, \"You need to flip him to attain the correct stimulation.\"\n\nI looked over at her and Ali and replied, \"Actually, the same goes for you.\"\n\nDr. Warner nodded and raised her voice, \"Nurse Samantha. Can you help put Gabriel on his back and raise his knees?\" \n\nSamantha's head popped out from behind Gabriel and she said, \"Of course, doctor!\" \n\nSamantha crawled out from under her boyfriend, dislodging his cock for the first time in a while. I'd forgotten how cute her petite body was and how boyish she looked. I pulled out of Gabriel as she guided him on to his back. \n\nAs he got into position, I saw the doctor pull out of Ali and grab her thighs and roughly flip her on to her back. I knew Ali liked it rough and the doctor obviously could sense that as well. My girlfriend smiled up at Dr. Warner as she grabbed her cock and guided it back into Ali's pussy before sinking her body down. The sight of their breasts lining up as they kissed was pure magic. \n\nI looked in front only me to find this smooth boy eager to receive my cock again, his little girlfriend holding his legs apart. I leaned in and lined up against his asshole and plunged in, sliding my whole length in one go.\n\nFrom this position, there was no doubt I was fucking a boy. His hard cock bounced over his stomach and as I leaned in further I could feel his hardness against my body. He looked into my eyes and I saw his teenage innocence and longing. Samantha kissed his cheek and then pulled my head down for a kiss from her as well. Then she turned our faces toward each other.\n\nI'd never been to first base with a man but I figured I already hit a home run with him so why not do a victory lap? His lips were large and soft and felt very girlish as I closed my eyes and sank my tongue into his mouth.\n\nI pulled back and said, \"I don't think I'll last too long... your ass feels too good.\" \n\n\"Oh fuck, man... Don't stop. Fill me up!\"\n\nI couldn't believe how fast Gabriel had taken to gay sex. Of course, it was my first time too and I was enjoying the hell out of it so why not him? I didn't really want to blow my load again so soon but considering a week ago I was worried about getting it up at all, this was definitely a victory lap.\n\nDr. Warner looked over at me and demanded that I finish the job. \"Do not hesitate, Stephen! Ejaculate into my boy.\"\n\nThis was so perverted and I loved it. This must have been what was missing my whole life, this kind of \"anything goes\" sex where all you care about is the pleasure you get and give. \n\nBelow me, Gabriel was fucking up into me to try and get even more of my cock inside him. Next to me, my new urologist had her own cock balls deep in my girlfriend. Between us, her tiny nurse was playing with herself and taking turns kissing her boyfriend and my girlfriend.\n\nIt was all too much and I started blowing my load inside Gabriel, letting myself cry out as I emptied my semen into his ass. \n\n\"AHHHHH FUHHHHHHHHHCK YEAHHHHHH!!\" \n\nIt seemed like I was coming forever and my legs were almost numb from the release. Gabriel was watching my face intently, smiling that he'd make me shoot with his tight ass. For a second it felt like just him and me and I understood what it must be like to fuck guys all the time.\n\nBut seconds later the chemistry in my brain changed and I felt exhausted and done. It suddenly felt weird to be fucking a guy, even such a feminine-looking boy like Gabriel. I gave a weak smile and pulled myself out of him with Samantha helping to steady me. I had a head rush and must have looked like I was going to pass out. \n\n\"Easy there, sir. Let me help you to your feet...\" \n\nDr. Warner looked concerned. \"Ali, you'd better attend to Stephen while he recovers. You could both probably use some hydration.\" \n\nThe doctor stopped fucking Ali's pussy and pulled out of her, then offered her a hand to get up off the bed. Ali ran over to me and hugged me, helping to support me while my legs regained some feeling. Samantha got our clothes from the hangers we'd left them on and started to guide us towards the door. \n\nI saw the doctor embrace her son who was also in a bit of a daze like myself. She wrapped her arms around her boy, both of them naked and still hard. I heard Gabriel say in a low voice, \"Mommy, I still need to cum.\"\n\nAs she held him tight, Dr. Warner replied, \"Don't worry, mommy will take care of you...\" \n\nSamantha closed the door behind us and led us to one of the regular examination rooms. Once inside, she used wet wipes to clean us all over, being careful to get every nook including under my balls and the rim of my ass. It was really nice being taken care of by this naked little pixie girl but one thought kept nagging at me. \n\nI started to say, \"Samantha\u2014\"\n\n\"Call me Sam. The doc is the only one who uses my full name!\"\n\n\"Okay, Sam... is Gabriel okay? I mean, I know I almost fainted in there but he seemed pretty out of it, too.\"\n\nSam paused for a minute and thought. \"I'm sure he's okay... but let's check.\"\n\nShe went over to the counter and picked up a remote for the flatscreen monitor mounted on the front wall. She turned it on and then switched inputs until we had a view of the Orgy Room as I'll be calling it for the rest of my life when I tell this story. She was able to switch among multiple camera angles until she had a wide shot of the bed.\n\nAli was confused. \"Sam... does the doctor record everything that happens in that room?\" \n\n\"Oh no, only with permission from the clients. But I think she may want to keep this,\" she said, pointing at the monitor. \n\nOn the screen, Dr. Warner was laying propped up on pillows at the head of the bed with her arms wrapped around her son who lay with his back atop her chest. One of her hands was cupping his balls and massaging them. He was writhing in a daze, dying for more friction. \n\nThe doctor's hand moved up his shaft and gripped him firmly. She nibbled his neck as he closed his eyes, her hand now moving rapidly but gently over her son's cock. They were both so beautiful and the lighting in the room made it look like a professionally produced porno.\n\nI looked over at Sam and saw that Ali had the same idea. Between us, Sam was enthralled by the image of her boyfriend and her boss with their naked bodies rubbing in their incestuous lust. Sam clicked the remote again and found a closer angle where we could see Gabriel's cock being manipulated by an expert hand. \n\nSam's other hand drifted down to her almost-bald pussy and started playing with herself. Ali looked at me and nodded her head towards the adjustable exam table. Without a word, we each grabbed Sam by a shoulder and moved her back towards the table and helped her lay down on it. We each grabbed a leg and spread her so each calf was dangling off the table. \n\nI found the levers to adjust the table and tilted her up so she could watch the screen. Ali went to the wall by the door and turned off the lights so the only thing that we could see was the monitor and a dim light from the hallway. I could barely make out Sam's hand returning to her pussy and then suddenly Ali was on me, making out with me. \n\nOn the screen, the doctor was pulling her son higher up her body, positioning his ass above her pelvis. She returned her left hand to his cock and with her right grabbed her own, angling it towards his asshole. He was still slick from all the lube we'd applied earlier to make his first time bottoming easier and her tip popped inside with no resistance.\n\nSam was furiously massaging her pussy now and must have wanted to see more since she found a wider camera angle. Mother and son were now making out as she slid inside her teen boy. Sam's eyes were glazing over, an almost painful desire seemed to be overtaking her. \n\nAli and I stopped kissing so we could both watch the scene on the TV. My girlfriend's hand drifted down to my ass, playing with my cheeks. As her finger found my hole, she leaned her head on my shoulder. \n\n\"I bet you wish you had a mom that hot, huh?\" she whispered as she pushed her digit inside. My twice-spent cock twitched, a distant sign of life.\n\nI put my arm around Ali and slid my hand along her flat stomach and up to her breast. On the screen, Gabriel lifted himself up into a reverse cowgirl and started fucking himself down on to Dr. Warner's cock. His long hair fell over his face as he leaned forward to watch his balls land on hers. His mom started moving beneath him but he had all the leverage and took the hint. Gabriel rode up and down slowly, raising his pretty face up as his hair fell back.\n\nI tweaked Ali's nipple as we heard Sam moan deeply. I whispered back to her, \"I also wish we had a son like that...\"\n\nI felt her shudder and heard a whimper. \"Oh baby... me too. He and I would take turns fucking daddy before I let him fuck mommy while daddy breeds his ass.\"\n\nNow I was starting to feel the blood returning to my dick. I looked over at the tiny nurse as she rubbed her pussy, soaking the table underneath her.\n\nI whispered to Ali, \"What can we do for her? It might be a while before I'm ready for round... nine? Ten?\" \n\nAli turned to take in the lovely pale pixie bathed in the light of the monitor. She pulled her finger out of my butt and spanked me once sharply. \"Don't worry, daddy. I'll make sure our baby girl is taken care of.\"\n\nAli walked over to the table and kneeled down. She started licking the inside of Sam's thighs, working her tongue higher. When she got closer, she took hold of Sam's hand and pulled it away from her wet pussy. I watched Ali bury her face in between the nurse's slim legs as Sam grabbed the sides of the table and focused on the onscreen action.\n\nThe remote was dangling from one of her clenched hands so I gingerly claimed it before sitting down in a rolling chair to enjoy both the show in the room and the one on TV. Gabriel was still riding his mother and had taken over jerking his own cock until mom swatted his hand away. \n\nI knew what she was up to: she wanted to make him cum from inside him, hands-free. If anyone could do it, it was her. \n\nDr. Warner put one hand on his hip and with the other grabbed his hair, yanking his head back a bit. She did her best to take control and pound him hard but couldn't get the rhythm right from under him. In one quick move, she pushed his back down as she sat up and moved her legs up and under until they were in doggy-style and he rested his head and shoulders on the bed. \n\nNow the doctor was able to truly operate. She grabbed his hips with both hands and started fucking him hard. It was so sexy because on camera it looked like two regular women making love but I knew that they both had cocks. The fact that it was a mom fucking her son was even hotter.\n\nMy cock was rising to a semi as I turned my attention to the feminine bodies a few feet away. Sam had raised her legs and was squeezing Ali's head a bit with her thighs as she stared wide-eyed at her boyfriend getting nailed by his mom and her boss. I liked the look of Ali's brown skin against Sam's pale flesh as my eyes trailed down to my girlfriend's perfect little boyish ass. I knew that if I got hard again, I had to fuck her. \n\nSam noticed something on the screen and yelled, \"Volume!!\"\n\nI hadn't even realized there was sound but I found the volume buttons and raised it way up. We could hear the smacking of flesh on flesh and Gabriel moaning in time to his mom's thrusts. His sounds got louder. \n\n\"Oh. Ohhh. Ohhhhh. OHHHHHH!!\"\n\nGabriel rose up and his mom wrapped her strong arms around his skinny torso. His cock was standing free and I switched cameras closer so we could see how he was leaking milky seed from the tip. Suddenly his cum came flying out in jets until the pressure was gone and it seeped out in thick cream. \n\nWatching her boyfriend cum was all it took for Sam to be pushed over the edge. Her body shook as Ali held on for dear life with her hands wrapped around Sam's hips and her tongue buried deep inside. The little nurse's high voice let out a piercing scream that I'm sure her boyfriend could hear across the clinic.\n\nAs Sam's body settled down, Ali crawled up on the table on top of her, her face wet from the girl's orgasm. She kissed the nurse, sharing her juices as she slid her body up so that their nipples could touch. It was a beautiful sight and I was finally fully hard watching these lovelies make out. \n\nI couldn't wait any longer and stood, walked over to the foot of the table and lightly traced the lips of Ali's pussy with my finger. She was almost as wet as the nurse below her. I lined up my cock and slid all the way into my love easily. \n\nAli moaned but didn't even look back as she was passionately kissing the little girl under her. I started fucking her hot pussy, feeling her tight walls squeeze me as I aimed for her spot. I felt Sam's hands clutch as much of my hips as she could grasp. \n\nAfter a minute, Ali started to wriggle and used one hand to push me back. She reached back and took ahold of my cock and pointed it lower, towards Sam's pussy. \n\nShe looked me in the eye and said, \"You have to feel how wet she is.\" \n\nI didn't have to be told twice. I sank into the sweet young pussy for the first time since last week. Ali went back to kissing the girl. \n\nWith both pussies almost touching each other, I was able to easily pull out of the nurse and slide back into my girlfriend. I started taking turns with each of them, a couple of minutes at a time. I can't believe that in the last couple of hours I'd fucked four different people and been fucked by two.\n\nSeveral minutes of going back and forth had kept me focused on the girls and I'd forgotten about the TV behind me. I pulled out and turned to see that Gabriel was now on his back and had either never lost his hardon or had gotten it back. His knees were up and his mom was buried inside him. She was leaning over him, her long hair cloaking their faces but it seemed like they were kissing tenderly.\n\nI turned back to the ladies and slid back into Sam. I started a slow rhythm so that I could look back over my shoulder at the monitor. The next time I switched to fucking Ali, I turned back and saw that Dr. Warner had pulled out of her son's hole and was now laying on top and making out with him and grinding her hips into his, her cock rubbing alongside his. \n\nIf I could even cum again today, I wanted it to be inside Ali. I felt like I might be totally dry but I decided to give it a serious try. All of this back and forth, while an amazing fantasy finally realized, wasn't getting me closer to the elusive explosion. \n\nThe angle on Ali wasn't helping either so I pulled out and squatted down to look for a step or something. I found the table had a built-in step that extends for patients to rest their feet on. I set it in place, stepped up and saw that Ali was looking back at me.",
        "\"How's it going, stud?\" \n\n\"Good, baby. I'm going for 'third time's the charm' action.\"\n\n\"We are here to receive,\" Ali said and then winked at me. I slid my cock back inside her and leaned forward over her, finally getting into the groove. \n\nI started pounding my girl harder, aiming for the spot she liked the best. Her moans escalated but I still felt like I was running on a treadmill and getting no closer to the end. \n\n\"Okay, okay...\" came Sam's muffled voice. I forgot that I was pounding her at the same time and she now had the weight of two bodies above her. \n\nWe stopped and let the petite nurse crawl out from under my girlfriend. She stretched her legs a little and massaged her neck. \n\n\"Sorry, it was just getting a little intense under there,\" Sam said with a shy smile. \"But please continue! I wanna watch this...\"\n\nWe all laughed and I didn't want to lose any time trying to get these final rocks off. I flipped Ali over on to her back and was back inside her in a flash. I lifted her legs to improve the angle and started fucking her hard again.\n\nI looked into Ali's eyes and we were entirely focused on each other again, just like the best sex we'd had in the past. I leaned further down and kissed her deeply, slowing my rhythm to have a real moment with her. \n\nThat moment was interrupted by a cold feeling on my exposed ass. I jerked my head up and looked over my shoulder to see Sam's head behind my ass. \n\n\"Thorry,\" she lisped, her tongue in my ass. \"Conthinue...\"\n\nI smiled and turned back to Ali. I kept the rhythm steady to not knock over the tiny nurse with my buttcheeks. On every move back, she worked her tongue deeper but I couldn't keep the pace so slow. As I sped up, Sam couldn't get her tongue in fast enough on the back strokes. \n\nI felt her lubricated finger push into me next. She steadied me for a second as she slipped a second finger in and then slapped my ass with her free hand. I started fucking Ali hard again while the pixie behind me held on for dear life.\n\nI could feel my orgasm building but it seemed to be building faster for Ali. Her gaze went hazy and her eyes drifted to the ceiling as her breathing became heavier. Her little moans were so sweet and I knew it would only be a minute or two.\n\nStaring at my lovely girlfriend's unfocused doe eyes, I barely noticed when Sam's fingers slipped out of my ass. But when two strong hands gripped my hips and stopped me, I was more than a little frustrated until I felt a large object knocking at my backdoor. The head popped past my sphincter easily and slid deep into me, rubbing against my spot in a way that Sam's little fingers couldn't quite reach.\n\nAli noticed the pause in the fucking and looked up and over my shoulder as I tried to crane my head back. Gabriel's long, soft hair tickled my shoulder as he leaned forward to bite my neck. He started thrusting in and out, accelerating his pace.\n\nI think all it took were a few pumps into Ali, courtesy of the momentum from Gabriel fucking my ass, before she started to lose it. Also I'm pretty sure that the sight of the femme teen boy taking my ass is what really pushed her over the edge.\n\n\"Ohhhh yesssss ahhhhh AHHHHH AHHHHHHHH!!\"\n\nWatching my love cum so hard on my cock combined with the new friction from Gabriel's long, hard cock on my prostate made me blow my load seconds later. Sandwiched between these two slim, caramel hotties and finally getting my nut put a stupid grin across my face as I came.\n\n\"Hahhhhhh ahhhhhh AHHHHHH FUCK YESSSSS!!\"\n\nMy orgasm made me contract my ass muscles which must have given Gabriel's cock a sweet massage because he was next.\n\n\"OHHHHHHooohhhhOHHHHHHHARRRRRRGHH!!\"\n\nI fell completely on Ali and Gabriel slumped on me until his cock finally deflated and slipped out of my ass. I have to admit I felt empty and knew I'd need that cock again some day.\n\nSam was ready with wipes to clean us up and she took a few licks of my ass and Ali's pussy to get the excess into her mouth.\n\nDr. Warner appeared at the door and flicked on the light, the harsh phosphorescent glow making us squint. She was again fully dressed in her black scrubs.\n\n\"This was a very successful session, I believe. How do you feel, Mr. Johnson?\"\n\nMy stupid grin came back. \"Very good, doctor. Maybe cured?\"\n\n\"Well, that's great news,\" the doctor replied as she walked over to me. I rose off the table and stood unsteadily. \n\nThe doctor grabbed one of my arms firmly to aid my balance and checked the turgidity of my mostly spent cock with her other hand. Her expression was that of a medical doctor doing a professional examination. She spun me around and gave me a gentle push so I'd brace myself on the table.\n\nI felt a finger intrude into my ass again and that long finger found my spot in no time. She gripped my balls firmly and felt my cock twitch in response to her probing finger. Ali was sitting up on the table right next to me, also grinning in her post-orgasmic bliss. Gabriel and Sam were holding each other and kissing sweetly.\n\n\"You seem to have overcome your issues,\" Dr. Warner assessed. \"But of course I'd like to see you back in 3 months for a recheck. I'd like to see BOTH of you back here.\"\n\nAli's smile broadened. \"Of course, doctor. Whatever you say.\"\n\nThe End"
    ],
    "authorname": "jasperray",
    "tags": [
        "gay first time",
        "shemale",
        "doctor",
        "nurse",
        "anal sex",
        "transgender",
        "incest",
        "mother son",
        "teen"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/a-highly-recommended-urologist-ch-04"
}
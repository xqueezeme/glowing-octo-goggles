{
    "title": "The Case of the Sneaky Valentine",
    "pages": [
        "Welcome, dear reader, to my entry for the 2015 Valentine's Day Story Contest.\n\nBy way of a warning, I have to say that this is a long story - the competition rules do not permit splitting it into multiple parts, so please forgive me and I hope you find it worth reading all the way to the end. I would add that there is a long build up before any sex, so please be patient.\n\nAs this is a Contest entry, please take the trouble to cast your vote at the end. Feedback is also always very welcome.\n\nMy thanks to Winterreisser for his diligent editing, encouragement and support and to Kat in her role as \"Romance and Hotness Consultant\"\n\nThanks also to the Anonymous improver of my Spanish (who provided 'La Gata' in place of 'El Gato') and to Andie's inner editor for a very insightful suggestion that I have incorporated.\n\nI hope you enjoy the story.\n\n==================================================\n\nCHAPTER 1 -- Mystery\n\nTuesday 14 February\n\nI turn the card over, looking for any clues on the back but there is nothing there. I bite my lip, wondering. For the third year in a row, a Valentine's Day card has found its way into my handbag somewhere between leaving home and arriving at work. \n\nThe first year had been a surprise and I wondered if my partner, Roy, had unexpectedly and uncharacteristically decided to put some effort into our almost non-existent love. However, when he again came home late, very late from work with no flowers, chocolates or even a kind word, I decided that the card sender wasn't him. So, at thirty-two I had a secret admirer: how intriguing! At least, I hoped I had and that it wasn't a mistake and the card had been intended for someone else. The handwritten inscription read:\n\n<center>'To the darkly golden girlie<br> With the gorgeous dove grey eyes. <br> I see you each day early<br> But you do not know my sighs.'</center>\n\n'The darkly golden girlie with the gorgeous dove grey eyes' seemed to fit me; my eyes were grey and my once golden blonde hair had darkened considerably since the birth of my twin girls, Tina and Chloe, eight years earlier. Someone fancied me; what a thrill!\n\nLast year I had wondered whether the same might happen again. Okay, I'll be completely candid and honest: I hoped it would happen again. Things had really started to deteriorate between Roy and me, going from bad to worse and, while I had made some effort to maintain the relationship, I was getting to the point where I was beginning to feel it wasn't worth the effort and it was simply inertia keeping us living together; that and the iron chains of a shared mortgage. My parents had never particularly liked him, not since the day we moved in together. That my parents had provided the deposit on the house and stood as guarantors for the mortgage probably didn't help us form an equal partnership in that first year, particularly as my parents made sure Roy knew how much we were beholden to them.\n\nLetting myself become pregnant and the birth of our twin girls (not that twins were what I planned!) should have brought us closer, or so I'd thought, but the opposite had been true. I know many new parents fight: the combination of tiredness, stress and having your world turned upside down by one, or in our case, two tiny people taxes any relationship. By the time the girls were in school our lives had settled into routines, with Mum picking up the childcare at each end of the day. However, no matter how settled and safe the routines seemed, Roy and I gradually drifted further apart. Worse still, Roy had less and less to do with the girls: out too early and home too late to see them during the week, golf and football at the weekends... I was their only real parent, with the help of my own parents.\n\nSo on Valentine's Day last year I had resisted checking my handbag until I was in the office, my heart hammering as I opened the bag. Yes! A shiny red envelope, that had not been there when I left the house that morning, was tucked against one side where someone had slid it in. With trembling fingers I took it out and opened the flap, glancing around to be sure no one was watching me. The card was a typical bright red with a cute cartoon teddy holding a heart on the front. The handwritten inscription inside was... unexpectedly intense:\n\n<center>'I don't know<br> if you feel a spark, <br> but I feel FIREWORKS<br> whenever I see you!'</center>\n\nThe handwriting was the same as last year's I was certain; rounded and with only a few letters joined up, the dot on the letter 'i' was a tiny heart, also as last year. The effect was youthful and feminine, quite girlie actually, but it must be someone determined that the handwriting would give no clue as to their identity.\n\nAnd now this year as I shake my head partly in amazement and partly in frustration; I had been keeping an eye out this time, tracking every bloke that came close enough to try to put the card into my bag, but the sneaky bugger had still managed it. I suppose, given the crush on the train and the jostling on the platform, it wouldn't have been impossible despite my vigilance; I had deliberately carried my bag as normally as I could, not wanting to scare the guy off attempting the card delivery. I felt I needed the reassurance that I was still attractive after Roy had finally walked out at the beginning of January, having just managed to stick it out through Christmas and New Year \"for the girls' sakes\" apparently. They did miss him, a bit; I certainly didn't by then and in just six short weeks, even Tina and Chloe seemed to be reasonably happy with just their Mum and Granny and Granddad as their family.\n\nI look at the card once more. It is pink and red, unsurprisingly, with a Hello Kitty holding a heart on the front saying, 'Hey there Pretty Girl, Will you be my Valentine?' I open it and re-read the inscription inside for the twentieth time:\n\n<center>'My beautiful, curvaceous,<br> golden haired Ishtar,<br> Always so seductive <br> in the swaying railway car.<br> Each day you lift my spirit,<br> should you sit or stand;<br> Oh I wish that I could win<br> your love, your heart, your hand.'</center>\n\nI'd had to Google 'Ishtar' who, it turned out, was the Mesopotamian goddess of sexual love, fertility and, curiously, warfare. My admirer was certainly ramping up the intensity and passion and had also told me that he was a fellow rail commuter... and one who saw me regularly... hmmm.\n\nI always board the third carriage of the train on the basis that it is reasonably close to the front of the train, and hence the exit at the London Victoria terminus, but also gives the possibility of obtaining a seat two or three days out of five. I'm not the only creature of habit when it comes to the daily commute and there are a number of fellow travellers whom I have come to recognise over the years. We never speak, of course, save in the extremities of snow, gales, signal failures or industrial action that can trigger the traditional British 'Blitz Spirit' of bonhomie and comradery in the face of adversity. This means, naturally, that I know no names and instead these regular characters have acquired nicknames, at least in my head.\n\nThere is Makeup Woman, who spends the whole journey on the process; Loud iPod Guy; Mr Umbrella with his ridiculously outsize golfing umbrella, rain or shine; Body Odour Boy; Loud Tie Man; Aging Hippy with his CND badges and kipper ties; Dimple Girl; Mrs Knitting, clicking away with her needles; Sci-Fi Bookworm; Mr and Mrs Cycling, always sitting together chatting in their cycling Lycra, and Crossword Man. The names have changed from time to time: Loud Tie Man became Mr eReader when someone took his taste in neckwear in hand and, presumably, bought him an eReader instead of a tie for Christmas. The girl with the spiky pink hair and punk-style clothing was actually nicknamed Dimple Girl (named, obviously, for the cute dimples she showed when she occasionally smiled) but became Vanilla Dimple Girl after I stood next to her and found she used the most gorgeous-smelling vanilla perfume or body lotion. Anyway, these are my cast of suspects in 'The Case of the Sneaky Valentine' as I begin to think of it, after abandoning 'Mysterious Valentines on the 7:48 London Victoria semi-fast train' as being a silly name.\n\nSo, some seven or eight men as the most obvious potential culprits for the Valentine, and two of them I really hope aren't the sender! That leaves the question: what to do? All I can come up with is to watch and see who's paying me extra attention.\n\nThursday 16 February\n\nOkay, this is day two of the investigation into 'The Case of the Sneaky Valentine' and so far... zip, nada, nothing! None of the men seem to be staring at me, no blushes or hastily averted eyes when I look at them. The only man who seems to look at me at all is Loud iPod Guy but, watching him, he seems to stare at all females under forty more or less on a rota, his gaze jumping from one to the next till he cycles back round. \n\nI can see two possibilities. The first is that it actually is Loud iPod Guy and he gave Valentine's cards to lots of the women. This seems unlikely, given the work involved, but the only way to disprove it would be to ask one of the other women. Vanilla Dimple Girl is the obvious choice; with the way she looks she must have every man she knows sending her a card. However, how do you go up to an attractive woman in her early twenties and ask her if she received a Valentine's card without sounding either like a nutter or a lesbian stalker?\n\nThe second possibility is that I'm only looking at a few of all the men on the train on the basis that I know they travel every day with me. However, these are only the ones I've noticed, mainly because there is something distinctive enough about them to nickname. What about the others, the nondescript and unmemorable? They could have stood next to me last week and I wouldn't have given them more than a glance... It is time to expand my surveillance.\n\nFriday 17 February\n\nDay three and it's turned cold overnight, slicking the pavements with ice and turning the grass and bushes pale, dusting each leaf and blade with sugar crystals of frost; it makes my walk to the station unexpectedly beautiful, if a little treacherous in places. The train is particularly crowded this morning, making the air in the carriage a warm fug that is a stark contrast to the sharp, cold, dry air outside. I shuffle in and find that the carriage is so crowded that even Vanilla Dimple Girl hasn't managed to obtain a seat. I move past a man who's determined to stay close to the doors and shuffle down the narrow aisle between the seats. As the train pulls out of the station I begin scanning the guys once more; despite the crowded conditions I can see four regulars and two or three that I think I've seen before.\n\nAt the next station, the woman beside me squeezes past to alight and I find myself next to Vanilla Dimple Girl. She has the same lovely vanilla scent and, as she's three inches shorter than me, I can see over her head, with its short, spiky blonde hair and fuchsia-pink highlights, to continue my investigation. The carriage becomes even more crowded when the train stops at the next station, the last before the long run into London Victoria, and we are all packed closely. Commuting in London is definitely not for anyone with personal space issues.\n\nThere is a slight tap on my arm and I glance down to see Vanilla Dimple Girl looking at me. \"Um,\" she begins hesitantly, keeping her voice low, \"you do know that the way you keep staring at blokes is, er, a bit... weird?\" I feel the colour rising in my cheeks; it never occurred to me that what I was doing would be noticeable.\n\n\"Oh shit!\" I gasp in embarrassment. \"Look, I'm not checking them out or anything,\" I reply quietly and hesitate; how do I explain? \"This is going to sound odd but the thing is someone put a Valentine's card in my handbag last week and I'm sure it was someone on this train, one of the regulars...\"\n\n\"And you're trying to see if any of the guys are eying you up, yes?\"\n\n\"Erm, yes. You, er, you didn't get a card did you?\" I ask nervously.\n\n\"No!\" she smiles, and those dimples appear. \"I don't carry a handbag so maybe the mysterious card deliverer couldn't give one to me. Or maybe it's just that they think you're the most gorgeous woman on the train.\" \n\n\"Yeah, as if!\" I laugh and she grins. I'm tempted to add a comment to the effect that there are plenty of women more attractive than I am but I'm afraid it might seem that I'm fishing for a compliment or reassurance. Instead, I lower my head and whisper, \"There are definitely a few blokes I hope it isn't, like...\" I surreptitiously point towards Body Odour Boy.\n\n\"Oh god, Stinky Pete. That would be horrible!\" she says, keeping her voice down.\n\n\"Is his name Pete?\" I ask and she bursts out laughing.\n\n\"No! Well, it might be but I really have no idea. It's just what I call him in my head. You're going to think I'm bonkers but I look at people and give them names and try to make up stories about who they are... see, you're grinning at me like I'm crazy.\"\n\n\"No,\" I reassure her, \"I'm grinning because I do the same: I nickname those I see regularly too, though I don't make up stories. Stinky Pete I call Body Odour Boy, and over there is Makeup Woman sat next to Aging Hippy.\"\n\n\"Dare I ask if I have a nickname?\" she enquires gently and now I'm really blushing.\n\n\"Um... okay, but you've got to do the same and tell me your nickname for me... and the story, okay?\"\n\n\"Okay, deal. So what is it? It must be something embarrassing.\"\n\n\"It's...Vanilla Dimple Girl,\" I blurt out. \"When I first saw you it was just Dimple Girl but then I smelled your perfume.\"\n\n\"The Body Shop Vanilla Body Butter, actually,\" she smiles. \"That's a sweet nickname, thank you. I thought I was going to be 'Punk Girl' or 'Goth Chick' or something.\"\n\n\"Well it might have been but I, er, well I'm a bit of a sucker for dimples,\" I confess, surprising myself by my candour. \"Kate, my best friend at school, had dimples and since then I've always found them almost unbearably cute on, um...\" Shit, my mouth has run on too far and this is now officially embarrassing.\n\n\"What?\" she asks, intrigued.\n\n\"Um, well, I find them cute, especially on a girl or woman, if you must know. Anyway, now you really have to tell me your nickname for me... and the story you made up!\"\n\n\"Okay, you were Sally Single-Mum; you work as a secretary or PA in a big company, possibly to someone quite senior, you have children, er, probably girls, at home that you love and while you quite like your work you miss the kids. You're not married and I've only ever overheard you on the phone to your Mum, so no probably partner either. Oh, and something happened at Christmas: maybe you met someone, you know, like a new friend because you seemed a bit happier.\" She looks at me and gives a lopsided grin triggering a single dimple, \"How did I do?\"\n\n\"Well,\" I smile, \"it's Sarah, not Sally, Sarah James. I guess I am now a single mum since my useless and now ex-partner finally pissed off just after New Year, which did make me happier. The job and missing my twin girls were spot on, so well done you!\" I say, genuinely impressed. \"So you are? Unless you prefer the nickname I gave you, of course.\"\n\n\"Zoe, Zoe Fletcher. I have to confess, I did cheat a bit with your story, Sarah: the advertising firm I work for is on the top floor of the same office building that your insurance company is in. I've seen you ahead of me quite often in the morning, and I've followed you in the evening too sometimes, when we've left at the same time. You're happy enough going to work but always noticeably happier going home.\"\n\n\"Ah but, Zoe, how did you know that I had kids? They're too old for the tell-tale milk stains of babyhood.\"\n\n\"I saw their photo in your purse one day when you took your ticket out to get through the barrier at Victoria. They're identical twins, aren't they? They're very pretty and sweet looking.\"\n\n\"Yes, and I love them to bits!\" I suddenly remember that the two of us are stood in the middle of a crowded train but chatting as if we've met for coffee. Surprising as this is, it is nothing compared to the fact that, despite her spiky, pink hair, dark eyeliner and mascara, blood red lipstick and punk clothes, I actually think Zoe and I could become good friends as, underneath it all, she has a warm, friendly, fun and engaging personality. \"Zoe, do you know I've been doing this journey for the best part of five years and you're the first person I've spoken to apart from to share grumbles about delays or the weather.\"\n\n\"We're all too British, that's the problem,\" she laughs. \"Still, I'm glad we're talking; it means I've got a train buddy now.\"\n\n\"Yes, me too,\" I agree as we continue to chat.\n\nSunday 19 February\n\nFollowing Roy's note yesterday saying that, as he's no longer living with us he won't be paying into the mortgage account, it's been a rather depressing day with Mum and Dad. I can't cover the repayments on my own so I've had to ask them to help us. They were very good about it but it's frustrating to have to go cap in hand to them.\n\nDad was quite indignant about Roy not paying any maintenance payments for the girls. I know what he means, though part of me feels that, since he's not paying, I haven't any worries about him demanding access and visits to the girls; knowing him, he'd be late or simply not turn up at all, which would upset Tina and Chloe.\n\nStill, money is going to be a bit tighter, unfortunately. Perhaps I will have to insist on him paying; he ought to be able to pay a hundred or a hundred and twenty quid a month at least.\n\nMonday 20 February\n\nI have to admit to a new interest, perhaps even a little excitement, heading to the station this Monday morning: my new friend, Zoe. It's bloody annoying, therefore, to find that Zoe is sat towards the centre of the carriage but the press of people mean that I can get nowhere remotely close to her. Even when a few people leave the train at the next two stations I cannot get much closer so, in the end, I wait for her to alight on the platform at Victoria. \"Hi, Sarah!\" she says brightly. \"I really thought you'd get a seat this morning and then the station before yours the train really filled up.\"\n\n\"Oh, well, maybe tomorrow,\" I reply as we shuffle down the platform amid the pressing crowds towards the ticket barriers. \"So where's your station because you almost always get a seat?\"\n\n\"Ravensborough, two stops before yours, so not that far. You go first, Sarah,\" and Zoe ushers me ahead of her through the ticket barrier. Once through we resume chatting. \"So, any luck spotting your mystery card sender this morning?\" Zoe asks.\n\n\"No, though I must admit I wasn't really looking; your warning about how I was appearing has put me off a bit. Anyway, it was lovely to think that some guy fancies me. I haven't had someone tell me that they find me attractive in quite a while.\"\n\n\"That surprises me,\" Zoe tells me. I look at her, wondering if she's teasing but all I see is an open honesty and friendliness in her face.\n\nWednesday 22 February\n\n\"Hi Sarah,\" Zoe greets me as, for the first time, I get a seat next to her.\n\n\"Hello, Zoe. Mmm, the luxury of a seat!\" I sigh.\n\n\"Any luck with the Valentine's thing?\" she asks.\n\n\"You mean my investigation into 'The Case of the Sneaky Valentine'?\" I reply and Zoe laughs.\n\n\"That should have been followed by some dramatic music: dum, da dum dum, derrrm!\" she sings.",
        "\"Nothing so far; I'm obviously no Miss Marple or Sherlock Holmes.\"\n\n\"Certainly not; you're far too young to be the first and the wrong sex for the second!\" she points out. \n\n\"Shirley Holmes, then,\" I laugh. \"Still, I'm not getting anywhere working out who gave it to me.\"\n\n\"Perhaps you'll get another one next year,\" she suggests. \"You'll have to be on the alert next February!\"\n\n\"I, er, actually received a card last year and the year before,\" I confess bashfully. \"I was on the alert but the sneaky bugger still managed it!\"\n\n\"And they were all from the same person?\"\n\n\"It was all the same handwriting but this year's was a bit more, well, passionate. Nothing sexual or dirty just... yes, passionate.\" I conclude wistfully.\n\n\"It sounds like they moved you, quite a lot.\"\n\n\"They did. Would you like to see them? I could bring them to show you. From all you deduced about me, you're obviously much better at this sort of investigation than I am,\" I tell her.\n\n\"Yes, please. Hey, why don't we meet after work tomorrow for a drink? Unless, I guess you need to get home to your girls, don't you?\"\n\n\"God, I haven't had an evening out in months!\" I reply, \"But unfortunately I'm afraid it's Parents' Evening at the school tomorrow.\" I hesitate, feeling a little awkward, \"I could do Friday, unless you have a date already.\" She smiles sweetly at my words. \n\n\"No, no date and nothing planned so yes, let's meet Friday. Bring the cards then and we can go to a nice little tapas bar I know.\"\n\n\"That sounds lovely, but I'll need to ask Mum if she'll babysit.\"\n\nAfter arriving at Victoria we walk together to the building in which we both work. \"Don't forget our night out on Friday. See you on the train tomorrow,\" she adds as we enter the foyer where we say goodbye.\n\nFriday 24 February\n\nBeing able to get a seat next to Zoe turned out to be the high point of yesterday, as far as my working day was concerned. Patrick, my boss, was in a foul mood over a deal that fell through. He seemed determined to pin the blame on anyone but himself. He even tried to blame me, saying that I should have seen the problems whilst I was typing it all up!\n\nIt was a relief to hear praise for Tina and Chloe at Parents' Evening, the only complaint being their ongoing tendency to pretend to be each other sometimes. Their class teacher and assistants aren't fooled but teachers who don't know them well can't tell them apart. Their classmates think it's a brilliant game, apparently. Words were had when I got home and promises extracted.\n\nI was also able to speak to Mum and she is very happy to babysit the girls tonight. She was slightly disappointed that it was only a girls' night out but, as she said, \"At least sitting in a bar you might meet someone interested in getting to know you; you'll never meet a man just going to work and sitting at home every evening!\"\n\n\"Yes, Mum, I know, but it has only been a couple of months since Roy finally went. The, well not exactly peace and quiet as he was rarely here, but the... tranquillity, I suppose, has been quite nice, to be honest.\"\n\n\"Yes, dear, but you don't want to end up a lonely old spinster, do you?\" Thanks for that, Mum, I thought. She seems to ignore the fact that I've never had much luck with men over the years, even at university.\n\nPatrick is little better today and his foul mood seems to have poisoned the whole office, with everyone grumpy and bickering. Even Lisa, the normally bright and bubbly young admin assistant, snaps at me when I ask her if some photocopying is completed. \"Oh, so sorry, Sarah. I'll rush an' do it this instant,\" she replies sarcastically in her finest London accent. \"I mean, it's not like I ain't got ten other fings to be doin'!\"\n\n\"Lisa! What's the matter with you?\" I ask, shocked. She glares at me for a moment and then sags.\n\n\"Sorry, Sarah, it's just everyone seems to be on me case today; it's doin' me 'ead in. I thought it's normally 'appier 'ere on a Friday.\"\n\n\"I know. I think it's that lost order yesterday: Patrick's pissed off and he seems to be spreading it around. I'll be so glad when today's over!\" I tell her earnestly.\n\n\"Look, Sarah, some of us is going down the pub after work so, I know you don't like normally come out with us but, you know, after a day like today if you wanna come...\"\n\n\"Thanks for the offer but I'm already I'm meeting someone after work.\"\n\n\"Oh? Is it a date with a guy now what's 'is name... Roy 'as gone?\" she asks with sudden interest.\n\n\"No, it's with a woman friend for a drink after work. I'm looking forward to it.\"\n\n\"Hmm, you dark 'orse, you! Well, 'ave a good time and, look, I'll go and sort your photocopying now for you, okay?\"\n\n\"Thanks, Lisa,\" I reply, wondering what she meant by a dark horse.\n\nNow that five o'clock has finally arrived I find that I'm almost ridiculously happy and not just because this crappy day is over. This makes me realise that my social life has dwindled pretty well to nothing and that Mum might have a point: I do need to get out there if I'm to meet someone. It's just... I'm not sure I want another man in my life at the moment and I really don't want the emotional turmoil of starting a new relationship with a guy just now.\n\nAs I exit the lift I see Zoe standing by the plant and water feature to the left of the foyer. This is actually the first time I've really looked at Zoe from a distance. Her short stature gives her quite a curvaceous figure that shows even through her clothing. As usual, black is the predominant colour: black boots with silver clasps and buckles, ripped black leggings below a green tartan mini skirt; a dark tee shirt on which I can partially see what I recognise as a biohazard symbol in lime green underneath the black leather jacket that she seems habitually to wear. I almost can't believe that this is the woman I'm going out for a drink with but somehow the Zoe inside doesn't match the stereotype I'd expected from the image she projects.\n\nWhen she sees me she smiles, the dimples popping in her cheeks and I find myself a little jealous of how cutely attractive she is. As and when I decide to go out looking for a boyfriend, she could be a mixed blessing as a companion: she will certainly attract attention but, quite likely, all the attention, leaving me in the shade.\n\nI hurry across the foyer, low heels tapping rapidly on the marble floor. \"Hi, Zoe,\" I say as I reach her.\n\nShe places her hand on my arm and to my surprise quickly cranes up to kiss my cheek. \"Wotcha, Sarah, am I glad to see you.\"\n\n\"Really?\" I ask as we start walking out of the building and turn right.\n\n\"Of course,\" she replies, \"I've been looking forward to our girls' night anyway but after today I really need to unwind!\"\n\n\"Bad day for you too, huh? Join the club. What happened to you?\"\n\n\"One of the senior partners basically took the credit for three weeks of my hard work, claimed that all the important work, the concept and the like were all hers and that all I'd had to do was to, quote, 'colour in inside the lines!'\"\n\n\"What a bitch!\" I commiserate. \"I, er, assume you're not a 'Colouring-in Consultant', so what is your job, Zoe?\"\n\n\"No!\" she laughs. \"I'm an 'Art Director'... okay, that's a posh name for a designer, in my case a graphic designer. My 'colouring in' was a complete design on a new product range.\"\n\n\"A range of what products?\" I ask and I notice Zoe's cheeks colour slightly.\n\n\"I was hoping you wouldn't ask that,\" she smiles. \"Turn right here. It's, um, a range of sex toys, you know, dildos, vibrators and the like, called Lady Loves. Not exactly high street but, well, trying to make them more mainstream.\"\n\n\"Wow. Did you get any free samples?\" I ask without thinking, saying the first thing I think of to try and cover my shyness at talking about sex toys. Zoe's cheeks are now almost as pink as her highlights. \"I'll take that as a yes,\" I tease but I can feel my face colouring too.\n\n\"Okay, yes, maybe,\" she admits grudgingly before changing the subject. \"But enough about me; what do you do and why was your day so shitty?\"\n\n\"Well, you had it right in your story about me: I'm a PA to one of the senior account managers. My boss is being an arsehole over a contract the firm lost; apparently, it's everybody's fault but his, even though he is, or was, the account director on that contract. He even blamed me for typing what he wrote and not changing it to something better!\"\n\n\"Somebody save us from bosses who are wankers!\" she declares loudly and I cannot help the surprised look on my face. \"Er, sorry, I didn't offend you then did I?\" she asks as she touches my arm and indicates the door to the tapas bar, La Gata Rosa, and we enter, still talking, while I find myself hoping that this is not too expensive. \n\n\"No, not really; it's just not a word I'd normally use out loud. They are wankers, though!\" I laugh at my daring. The bar is quiet; the only other patrons are three women around a table and two guys at the bar. Of course, it's early, only a little after five o'clock after all, and Zoe leads the way to two stools at the far end of the bar.\n\n\"You know, you're not the sort of woman I'd normally go out with,\" Zoe confesses as we seat ourselves, \"you're...\"\n\n\"Boringly dull and ordinary?\" I suggest.\n\n\"Sarah, you are certainly not boring and very definitely not dull or ordinary,\" she chuckles. \"No, just a bit... mainstream, I guess.\"\n\n\"Well, I can certainly say the same; I've never had a punk friend before! Is 'mainstream' really bad?\" I ask.\n\n\"No, I think I need more mainstream in my life. What about you; do you need more Goth Punk in your life?\n\n\"I think there's certainly room for some. In fact, there's probably room for lots of new things in my life,\" I sigh. \"You know, I've organized meetings or booked tables and tickets for my boss and his guests in all sorts of places but never actually been myself. For example, this is my first time in a Tapas Bar. I've never tried sushi either, never been in a hot air balloon, not run a marathon, never been to a West End show... there's an extensive list of things that would be new for me.\"\n\n\"Well the next new thing will be a drink: what do you want?\"\n\n\"A red wi... no,\" I smile, \"you order me something, please.\"\n\n\"Do you drink beer?\" Zoe asks.\n\n\"No, I've never drunk it before,\" I reply, shaking my head.\n\n\"What, never?\" she asks incredulously.\n\n\"Well, okay, I tried a sip of Dad's beer when I was about seventeen and I thought it tasted horrible so thereafter I always chose cider and, later on, wine,\" I admit.\n\n\"Two beers it is then.\" She signals across to the barwoman.\n\n\"Hello, Zoe, what would you like; the usual?\" She has a slight accent that I cannot place\n\n\"Yes please Marta, two of them.\" She moves off and returns with two bottles of beer, Spanish by the name on the labels. \"Sarah, this is Marta,\" Zoe makes the introduction, \"and Marta, meet Sarah.\"\n\n\"So you are Zoe's new friend?\" Marta asks.\n\n\"Yes, I am,\" I reply, \"we get the same train to work each day and we started talking and... I don't know why I'm telling you this.\"\n\n\"Please, I like to know about my customers and when my customers have new friends, I am interested. Oh, if you want food it will have to be after six because Alex has gone out to buy things.\" I assume Alex is the chef but at that moment one of the women from the table comes to the bar and Marta moves off to serve her. I pick up the bottle of beer; the cold glass is slick with condensation. I'm about to ask for a glass when I see Zoe drink straight from the bottle so I do the same. The taste is very different from wine but, on this second tasting, I actually find it quite pleasant despite the slightly sour bitterness. I take another sip as Zoe looks at me quizzically.\n\n\"It's nice, much nicer than I remember,\" I tell her, \"and this is not only my first beer but also the first time I've drunk alcohol straight from a bottle... Mum and Dad always insisted on drinks being from cups or glasses when I was growing up, so this feels like I'm being naughty,\" I smile as I raise the bottle to her.\n\n\"Well, here's to seeing how many things we can tick off your 'never done' list this evening; cheers!\" Zoe clinks the neck of her bottle against mine in a toast. \"In the meantime, did you bring those Valentine's cards?\"\n\n\"Oh yes,\" I tell her and fish them out of my handbag and place them in order on the bar. \"There we are; exhibits A, B and C in 'The Case of the Sneaky Valentine'. Zoe studies each one, pointedly and carefully looking at the picture on the front before reading the inscription and examining the handwriting.\n\n\"Hmm, the sender seems to be getting ever more passionate, don't they? You know, the handwriting is very feminine, almost girlish,\" she says after a while.\n\n\"I thought that too... but it must be a guy disguising his handwriting, or maybe he got a girl to write it.\"\n\n\"Hmm, it's an odd choice of handwriting style for a man to pick, especially for a Valentine's card. I mean, why not just print in capitals? And if he needs to disguise his writing, then he must think you'd recognise his normal handwriting... On the other hand, perhaps it wasn't a man at all!\" she smiles mischievously.\n\n\"What, you reckon that I got a, a lesbian woman who fancies me?\" I don't know quite whether to laugh or be horrified at the idea so I end up with a nervous chuckle. \"I don't...\" Zoe grins at my expression.\n\n\"What, another first: the first time a woman's fancied you?\"\n\n\"Yes, absolutely! I mean, I know some women do, you know, fancy other women but... well, why would they fancy me since I'm not a lesbian?\" Zoe laughs at this.\n\n\"Sarah, you're an attractive woman so there's no reason why a man or woman wouldn't fancy you. And they wouldn't know whether you're gay or not; you might be or you could be bisexual or maybe just interested in experimenting with a woman... I bet that's on your list of 'never done' things!\"\n\n\"Too right, and not one I've ever wanted to tick off either.\" I suddenly realise that I've finished the beer. \"Same again?\" I ask and Zoe nods. I call Marta and order two more beers.\n\n\"So the idea of a woman card sender, a female 'Sneaky Valentine', upsets you whereas the thought that some bloke is getting close enough to you to put a card in your handbag doesn't worry you?\" she asks.\n\n\"Shit, I never thought of it like that,\" I reply, quite shocked. \"I was just so touched to receive the cards that I didn't consider other, more... well, sinister possibilities.\" Marta returns with the beers and I immediately take a swig. While Zoe's comments flustered me, I'm more concerned about how I responded and that she'll think me horribly narrow-minded and intolerant. \"Zoe, look, I'm not really homophobic; I don't have a problem with people being gay or lesbian or whatever. I know two gay men, one in the in the office and the other is a neighbour. I don't know any lesbians, though so the idea of a woman fancying me was, well, disconcerting, I guess.\"\n\n\"I bet you do know some gay women but you just don't know they're lesbians. You probably know more gay men than you realize too,\" she points out. \"Sorry for disconcerting you, though. Perhaps it's best to think of them as someone of indeterminate gender having a crush on you.\"\n\n\"Good idea; someone with a crush is much less threatening. I'm sorry if I sound awfully narrow-minded. I don't mind what consenting adults get up to, really I don't. I wish them more luck, or perhaps more wisdom, in finding a partner than I had with that useless wanker Roy!\"\n\n\"Hey, you said 'wanker' again; go Sarah!\" and we both laugh.\n\nA little while later, and on our third beers, Zoe orders tapas and we receive a large platter with a little of almost everything on the menu. \"Zoe said you had not tried tapas ever, so now you get to try much of it,\" Marta explains as she hands us cutlery. \"Enjoy!\"\n\nWe chat and eat and the bar becomes more and more crowded and noisy. I vaguely notice that women predominate amongst the clientele but this makes for a relaxed and hassle-free evening. The food is very good (as is a fourth bottle of beer) and I compliment Zoe on her choice of venue.\n\n\"Thank you, I'm glad you like it. As you probably gathered I'm a bit of a regular. Now, before you have to dash off to your beautiful girls, have you ever tried tequila?\"\n\n\"Nope,\" I reply, \"but I get the feeling that I'm going to.\"\n\n\"That's the spirit,\" and she waves Marta over. Marta gives Zoe a suspicious look when she hears the order for four tequilas.\n\n\"Be sure you don't have friend Sarah falling down drunk, Zoe,\" she warns but fetches the drinks anyway.\n\nZoe explains the process. Salt on the web of skin between thumb and forefinger, lime held between finger and thumb then, go: lick the salt, swig the tequila down in one and then suck the lime.\n\n\"Presumably, if you can't coordinate all of that then you know you're drunk!\" I laugh. I watch Zoe drink hers, memorizing the routine. \"Okay, here goes...\" To be fair, coordination is not the problem but the bitter taste and alcohol kick almost choke me so I'm spluttering as I try to suck the lime. Zoe puts her arm around me and pats my back. \"Wow, that's strong!\" I wheeze.\n\n\"Yeah, just a bit. What did you think?\"\n\n\"Well, next time I'll be ready for the kick so I'll give it one more try, but only after you drink your second one.\" Zoe again performs the ritual with grace and obvious enjoyment and then it's my turn once more. I take a few deep breaths to steady myself. Salt, tequila, lime. I bump the glass down on the bar and grin around the wedge of lime clamped between my teeth. I have not choked, but...\n\n\"Not bad for a second go,\" says Zoe, \"but your eyes are watering a little!\" I slap her arm playfully.\n\n\"Oi, you, I think I did very well. Right, what's the time?\" I take out my phone and manage on the third attempt to get it the right way up and the screen on. Okay, half nine so I need to be heading home,\" I tell her. \"Are you staying?\"\n\n\"Of course not; we're train buddies remember?\" So we settle the bill (rather more than perhaps I should have spent) and stand up to leave and I find the room sways gently.\n\n\"You know, I think I may be a little wobbly because of that tequila. How about you?\" I ask.\n\n\"You're just a lightweight!\" she teases. \"Come on, I'll make sure we get back to the station safely.\" She slips her arm through mine and steers me through the crowded bar. On the way, it seems some of the women recognise Zoe and there are a few smiles, nods and hellos and even a wink. They are certainly a friendly crowd I think through the alcohol buzzing in my brain.\n\nThe cold air outside revives me a little but we continue to walk arm in arm comfortably. At the station, however, we encounter surprisingly large crowds and find that there's been a derailment. We scan the departure boards but the news is not good. \"You'll be alright,\" Zoe says, pointing at one board. \"Look, fifteen minutes time from platform eight there's a train to Whiteton East; that's your town, surely.\" I peer up.\n\n\"Oh yes, that's the smaller station in the town on the stopping line; Whiteton Town is on the mainline.\" I continue looking and realise what's happened, \"It looks like it's the mainline that's affected so there're no trains for your station at the moment. Look, why don't we get the train on platform eight and see where we go from there.\"\n\n\"Good idea,\" agrees Zoe and we begin walking to the platform, \"maybe I can get a cab or something from the station.\"\n\n\"I'd offer you a lift but, well, two tequilas too many, at least,\" I tell her regretfully.\n\n\"That's very kind, Sarah, but a cab will be fine.\" We board the train and manage, amazingly, to find two seats. The journey is every bit as slow as we feared so I phone Mum and apologise that I'll be home late, explaining about the train problems.",
        "\"Not to worry, Sarah love; the girls are all tucked up in bed, so they are, and I'm sure I can find something to watch on the telly. Did you have a good evening?\" I tell her we did and briefly where we'd gone, before saying goodbye.\n\nThe journey is uneventful, if slow, and eventually, the train arrives at Whiteton East where we alight. It's a fair walk home and even further into the centre of the town to get a taxi. I point this out to Zoe and conclude by asking, \"Why don't you come home with me? You can either phone for a taxi from there or, well, there's a spare bed you can crash on and I'll drive you home tomorrow.\"\n\n\"That's very sweet of you, Sarah but if I can call a cab from your house then that will be enough. Of course, if you can make me a cup of tea while I wait then I'll love you forever.\"\n\n\"I don't know whether I should feel offend that my personality alone isn't worthy of your love or,\" I hesitate, trying to work out the end of the sentence through the alcohol befuddling me, \"or whether to call you a, a slut for giving eternal love just for a cup of tea,\" I laugh.\n\n\"Don't be offended, Sarah, but I am a complete whore when it comes to cups of tea being made for me,\" she joins in my laughter. \"You should see what I'll do for a cooked breakfast!\" I'm tempted to say, 'Stay the night and give me a chance to find out in the morning,' but suddenly this conversation has become rather uncomfortable. At first I don't understand why and then I realize: the first time a friend cooked me breakfast it was my then-boyfriend after I spent the night with him for the first time. Zoe couldn't possibly know this so she's not suggesting anything but I'm glad that in the dark the slight colouring of my cheeks won't be noticeable.\n\nI am reminded again of Zoe's idiosyncratic appearance when we arrive home; I don't think the look of surprise and alarm on Mum's face could have been any greater had I walked in holding the hand of a gorilla! Not that Zoe and I are holding hands, of course, but you get the idea. Zoe, however, is all smiles and charm and joins in thanking Mum for babysitting, even thanking her for letting her daughter out to play this evening. The three of us chat for a short while as I make two mugs of tea and I can see that when Zoe says that she a designer working in advertising, Mum relaxes a little; Zoe's appearance is obviously down to her being what Mum calls 'an arty type' and not, as she'd obviously been worrying, because Zoe is a born-again Satanist!\n\nWith Mum gone it's nearly half-past eleven and I dig out the cab firm's phone number and Zoe calls them. Her face falls. \"What's up?\" I ask and she puts her thumb over the phone's microphone.\n\n\"They're saying that they're very busy and it'll be an hour to an hour and a half wait for a cab. Do you mind me being here that long?\"\n\n\"That's ridiculous! Zoe, stay here tonight. Tell them that they're wankers and to stuff their cab!\"\n\n\"Thank you, but I think I'll make other arrangements,\" Zoe says into the phone, trying not to laugh, before hanging up. \"You know, you don't have to go from never saying 'wanker' to saying it at every opportunity,\" she tells me, still chuckling. \"Anyway, thanks Sarah, this really is good of you.\"\n\n\"It's no problem, really, and I think Tina and Chloe will be interested to meet you tomorrow morning. I'm afraid it won't be much of a lie in tomorrow as the girls tend to be up quite early. Come on, let's make up the spare bed, find you some nightwear and there must be a new toothbrush in the bathroom cabinet.\"\n\nSaturday 25 February\n\nThe girls are unexpectedly civilized as I wake naturally and open my eyes to see that it's gone eight thirty in the morning. Normally I would have been woken long before now by shrieks or by two hyperactive girls bouncing onto the bed but all is calm and peaceful. Worryingly calm and peaceful and the Mummy Node of my brain immediately cuts in, providing images of what two unsupervised ten-year-olds might be up to; images sufficiently scary to propel me instantly out of bed.\n\nOn the landing, I hear voices from downstairs and laughter. I descend the stairs and the sounds are coming from behind the closed living room door. I open the door quietly to see Tina and Chloe seated either side of Zoe, who is also sat cross-legged on the floor in her over-sized borrowed nightie, as the three of them play one of the Lego Harry Potter games on the PlayStation games console. The twins both laugh as Zoe's character is blasted into lots of Lego bits by a spell and Zoe laughs too, saying, \"Okay Chloe smarty-knickers, you show me how to get past him!\"\n\nAs I watch I feel a lump in my throat and tears welling in my eyes. I can't remember seeing Roy just sit and play games with the girls since, well, almost ever. Yet here is Zoe, a woman I've known for just a week and a stranger to them, in the midst of their play, knowing their names already and making them laugh. I swallow hard and wipe my eyes with the back of my hand, fighting back the incipient tears and take a deep, steadying breath. \"Well good morning, early birds,\" I say with a slightly forced brightness, \"you three girls certainly seem to be having fun.\"\n\nThree pairs of eyes swing round in surprise and three mischievous grins appear, the cheekiest of which is Zoe's. \"I bumped into Tina on the landing as I was coming back from the bathroom,\" Zoe tells me, \"I explained who I was and the next thing I knew I was being dragged down to play on the PlayStation.\"\n\n\"You said you were like an expert, Zoe, but Tina and me are miles better; you keep getting smashed!\" says Chloe.\n\n\"Yeah,\" agrees Tina, \"and you just had to ask Chloe how to get past Snape, and that's peasy!\"\n\n\"Okay girls, calm down,\" I tell them. \"Would you like a cup of tea Zoe? Okay. What about you two: do you both want hot chocolate?\" Tina and Chloe chorus \"Yes please, Mum!\" in harmony and Zoe shyly raises her hand.\n\n\"Can I have a hot chocolate too, please, Mummy Sarah?\" she asks in a little girl voice that makes Chloe, Tina and me laugh.\n\n\"Zoe, as someone who granted me an extra hour of sleep on a Saturday, you can have whatever you like,\" I promise her and head out to the kitchen.\n\nWhen I return the game has re-commenced, though Zoe still seems to be getting regularly blasted, much to the continuing enjoyment of the twins. She glances round at me and winks and, suddenly, her character becomes a superhero, leaping and spinning, dodging and casting spells. Tina and Chloe stare dumbfounded and I realize that she has just been pretending to be hopeless at the game. \n\n\"Well girls,\" I say to Chloe and Tina, \"it looks like you've taught Zoe to be a Harry Potter super wizard! Come on, here's your hot chocolate.\" I sit on the sofa and Zoe joins me while Tina and Chloe sit on the floor by the coffee table. \"So Zoe, anything you'd like to confess to Chloe and Tina?\"\n\n\"Yeah, um, Tina, Chloe, I, er, have played quite a lot of console games over the years. It's what happens when you have two older brothers, I guess, and I never wanted to let them beat me.\" Zoe grins at me and then smiles at the girls. \"I have a little sister too; she has blonde hair like you both.\" \n\n\"So you were like just pretending to be shi...\" Tina glances at me and I raise an eyebrow, \"to be rubbish at the game?\"\n\n\"Well, I was a bit rusty at first, so I wasn't pretending much then but, yes, I was later; it made you laugh, though, didn't it?\"\n\n\"I knew you couldn't really be so rubbish,\" Chloe insists, \"but I think you're fun, Zoe.\" And Tina nods in agreement.\n\n\"I think you've got a couple of young fans,\" I tell Zoe quietly as the twins head back to the PlayStation, \"and you are amazing with them; it's like you've known them for ages.\" I'm in danger of welling up again at the contrast between Zoe and the useless wanker Roy.\n\n\"I've several nephews and nieces so I've done quite a lot of babysitting. I enjoy being with kids and, oh Sarah, your girls are just lovely. I can't believe that... no, sorry, I mustn't.\"\n\n\"What? Roy?\" She nods reluctantly. \"Yeah, others have asked how he could leave them. But the truth is he left us long before he finally walked away. You've played more with Chloe and Tina this morning than he did in the last five or more years.\" I cannot help the tears in my eyes as I look at the girls playing.\n\n\"I'm so sorry: you and Tina and Chloe deserve so much better.\" Zoe's voice is quiet but earnest.\n\n\"Ah well, at least we've got each other... and my parents are very good with helping us,\" I turn to look at Zoe and give her a small smile, \"and we all have you as a friend as well now.\" Zoe smiles bashfully. \"Right, breakfast time; who wants a bacon sandwich?\" I ask and get takers all round.\n\nWith everyone fed, washed and dressed I drive Zoe home as promised. It's nearly half an hour's drive to Ravensborough and Zoe's flat. As she prepares to get out of the car she hugs and kisses each of us and there's a sadness to see her walk away and wave as she reaches the door to her building. As I put the car in gear, preparing to drive away, Tina asks, \"Mum, how did you get to have such a cool friend?\"\n\n\"Not just cool, waaay cool!\" clarifies Chloe.\n\n\"We just got talking on the train,\" I tell them, \"but yes, she is cool, isn't she?\"\n\nTuesday 28 February\n\nI had quite a few questions from Mum when I arrived home last night, all about Zoe. She seemed ridiculously concerned about my having her as a friend and, of course, the fact that she and Dad had been right about Roy was used to justify why I should listen to her. If she'd seen Zoe and the girls together on Saturday then she'd know that the concern was completely misplaced. I did apologise for being so late back, pointing out that I had left as planned at nine thirty and my late return was entirely down to the trains. I also assured her that I wasn't about to turn punk and get my hair dyed green or anything, though I didn't dare tell her that seeing Zoe's short hairstyle did have me wondering about trying something different myself. Like the girls I've always worn my hair long, usually tied back into a loose ponytail for convenience; maybe a short bob cut might make a change and it would certainly make it easier to care for.\n\nPerhaps Mum is worried that my having a close female friend will mean that I confide in her less. Zoe and I aren't on that heart-to-heart sharing level of friendship yet and may never be although, if I'm honest, I think it's only a matter of time as we do seem to get on very well together.\n\nSuch musings occupy my mind as I walk to the station and see, with a sinking feeling, that the platform is crowded. Sure enough, the ticket collector (are they still called that? They don't collect tickets anymore, now that it's all automatic barriers) confirms that the previous train was cancelled.\n\nBeing a regular does have one advantage: you know exactly where to stand on the platform so that when the train arrives, the doors are in front of you. As a result, and despite the extra passengers waiting, I am second onto the train. I can see immediately that there is no chance of a seat but, to my surprise, Zoe pops up beside me. \"I knew we wouldn't both be able to sit today so I decided to stand,\" she explains and we start chatting.\n\nThe carriage is crowded as the train pulls away and after the next station, it is completely packed to the doors, meaning that Zoe and I are squeezed together. Her shoulder presses against my boob and her hip against my thigh while behind me what feels like a handbag rests in the small of my back, pushing me forward. \"I'm sorry,\" I apologise to Zoe.\n\n\"Hey, no problem; it's not your fault and I can think of lots of people worse than my train buddy to have squashed against me,\" and we fall into discussing the perils of being pressed up against the regular passengers, starting with the obvious; Body Odour Boy, a.k.a. Stinky Pete, and the risk of suffocation. \n\n\"Loud iPod Guy,\" I suggest, \"and the chance of being deafened.\"\n\n\"The Makeup Woman,\" replies Zoe, \"and being splattered with foundation and mascara.\"\n\n\"Mrs Knitting, eye lost through knitting needle-related accident,\" I say, upping the silliness.\n\n\"Gordon the Golfer, impaled on his giant umbrella,\" is Zoe's next suggestion and I realize she means Mr Umbrella.\n\n\"Aging Hippy resulting in patchouli poisoning,\" I tell her.\n\n\"That's cheating, Sarah: he doesn't smell of patchouli and I don't think it's poisonous anyway,\" Zoe points out. \"Okay, Mr and Mrs Cycling and ending up as part of a threesome!\" She grins at her idea but even more at the shock she sees on my face. I can't help glancing round to see if we've been overheard but no one seems to have reacted.\n\n\"That's cheating too, Zoe: you couldn't have sex squashed together like this,\" I whisper and she looks at me, raising an eyebrow as if to say 'Really?' and I blush.\n\n\"You're so sweet and innocent, Sarah!\" and she tickles my ribs, making me flinch.\n\n\"Okay, maybe there are things you could do...\" I concede, trying to fight down the deepening blush flushing my cheeks. \"Perhaps I should have suggested Vanilla Dimple Girl and the risk of death by embarrassment!\" I tell her.\n\n\"You love me really,\" she retorts and I can't but smile at her. Just then the train sways sharply and I'm jabbed painfully by an elbow.\n\n\"I hope it's not like this on Thursday: I'll have the Tina and Chloe with me.\"\n\n\"Really? Why's that?\" Zoe asks with interest.\n\n\"It's 'Take Your Daughter, or Son, to Work Day' and their school is encouraging all the Year Six parents to take part. I don't know how I'm going to get any work done with both of them with me, but there we are.\"\n\n\"Um, Sarah, feel free to say no but, I, er, I could have one of them at work with me, if you'd like.\"\n\n\"Could you, I mean would you be happy to do that, really?\" I ask.\n\n\"I'd love to, really I would.\"\n\n\"The girls would love it, I'm sure; they think you're 'waaay cool', they told me. Um, you're not still working on the sex toy thing are you?\"\n\n\"No, it a range of cereal bars now,\" she laughs.\n\n\"Oh good, that's okay then. It would be brilliant if you would. The only problem will be that they'll both want to be with you rather than me,\" I tell her ruefully.\n\n\"Okay, well they can swap over at lunchtime: half a day with you and half a day with me. I doubt anyone will even notice the changeover.\" I feel so happy with her offer that I could hug her -- if only we weren't so crushed. Instead, I bend and kiss her cheek.\n\n\"Thanks, Zoe. I just wish you could be there when I tell them so you can see how excited they'll be.\"\n\n\"Just warn them that while it's advertising they won't see TV adverts or anything being made. Jake, one of the copywriters, brought his niece in last year and she complained about that the whole time she was in the office.\"\n\n\"Well, whatever it is they can see or do there, it has to be more exciting than insurance!\" I assure her. Just then the conductor announces that we're about to arrive at Victoria and I can feel the wave of relief passing through the carriage.\n\nWednesday 29 February\n\nI've always hated working on the 29 February: an extra day of work for no pay! However, this has just changed: the email I've just received confirms that I, along with my colleagues, will actually be getting a bonus this year. I look across to Maria, one of the other PAs and she smiles and gives me a thumbs-up, obviously looking at the same email. It won't be a fortune but I'll definitely be less strapped for cash; maybe I can stop feeling guilty about that evening out with Zoe.\n\nThursday 1 March\n\nOn the way to the station, I feel like one of those people you see in the park being dragged along by the dogs they are supposed to be walking. In my case, it's two excited ten-year-old girls doing the dragging and I think I must have set a new speed record for getting to the station. \n\nTickets bought, we stand on the platform in my usual spot and, fortunately, all the services seem to be running and on time. Boarding the train we find the carriage is surprisingly empty, so much so that Zoe has a seat free next to her and one across the aisle. Chloe and Tina pile into the seat by the window next to Zoe whilst I sit across the aisle, having checked that she is happy to have the girls squeezed in next to her.\n\n\"Yeah, no problem,\" she says before asking them, \"So, have you decided who's going to be with me this morning?\" and I laugh.\n\n\"Tina tried to claim the right as Chloe's big sister, she's the eldest by nineteen minutes, but Chloe wasn't having any of that so they said that you'd have to choose,\" I explain.\n\n\"Oh no, no, no, I'm not going there!\" Zoe replies smiling. \"You two can toss a coin for it...\" she pulls a purse from her jacket and takes out a ten pence piece. \"Right, Chloe heads and Tina tails; ready?\" They both nod and Zoe flips the coin, catches it and slaps it onto the back of her other hand. The girls stare expectantly as she lifts her hand. \"And iiiit's tails! So Tina: morning or afternoon?\"\n\n\"Morning please, Zoe,\" she says excitedly while Chloe looks sullen.\n\n\"Hey, Chloe, don't be a grumpy pants!\" says Zoe, \"You'll have just as much fun and you can look forwards to it when you're doing the boring,\" she catches my eye, \"I mean the very interesting and, er, important, work with your Mum in the morning.\"\n\n\"I am going to try and make it at least a bit interesting,\" I protest, poking Zoe's arm. \"It's not my fault if their Mum's mundane job as a PA can't compete with her friend's glamorous job in advertising.\"\n\n\"Sorry, Sarah\", \"Sorry Mum\", \"Soz Mum,\" all three of them apologise at the same time.\n\n\"You've got my mobile number on your phone in case there's any problem, haven't you?\" I check with Zoe and she nods. \"Can you just text me to let me know how they're doing mid-morning and mid-afternoon?\" I whisper.\n\n\"Of course I will but I'm sure they're going to be fine.\" She reaches over and squeezes my hand reassuringly.\n\n++++++++++++++++++++++++++++++++++\n\nIt's late afternoon as I look at my phone and re-read the text from Zoe:\n\n<blockquote>Chloe doing gr8. Yr girls are fab -- just<br> like their mum & we all deserve pizza 2nite! :-) <br> Z x</blockquote>\n\nThis time, however, I text her back:\n\n<blockquote>The girls think you're fab and I think they're<br> right. Pizza is a cracking idea. See you at 5 :-) <br> Sarah x</blockquote>\n\n\"Okay Tina, can you just put the last of those letters and tickets into the envelopes?\"\n\n\"Okay, Mum.\" She has her tongue tucked into the corner of her mouth as she carefully folds the letter twice to fit in the envelope and tucks the Twickenham Rugby ticket (England vs Scotland) in as well. \"Mum, why are you, like, sending tickets to a rugby match to people?\"\n\n\"It's called corporate hospitality Tina and companies like this invite important clients and customers as a way of thanking them for their custom in the past and to encourage them to keep using us in future. Do you understand?\"\n\n\"I think so; it's like Jenny Jones giving sweets to the other girls at school so they'll be her friend, isn't it?\"\n\n\"Yes, Tina, it's exactly like that,\" I laugh at how children cut through the euphemism and pretence to the truth of a situation, \"but you shouldn't say that to my boss Patrick, Mr O'Dowd; I think it might upset him!\" Tina smiles and nods; she obviously feels that she's been let in on a secret from the adult world. \"Have you enjoyed today?\" I ask.\n\n\"Yes, Mum, I really have and being with you wasn't boring,\" she says kindly, answering my underlying worry. Tina has always been the intuitive and empathic one of the pair, just as Chloe is the more adventurous, physical one.\n\n\"Was it as much fun as being with Zoe?\" I ask somewhat mischievously and Tina looks awkward. \"It's okay, love\" I relent and smile at her, \"I know that I can't compete for excitement with Zoe's job. I glad you weren't bored, though. All done? Right, let's tidy up and then we can go down and meet Chloe and Zoe.\" I smile at the rhyming of the names.",
        "We are first down, but only just, and a few minutes later we're heading to a pizza and pasta restaurant not far from Victoria Station. The girls bound along in front as Zoe and I walk and talk. Zoe is full of praise for the girls but also has a surprising piece of news. \"Karen's a photographer we regularly use and she was in the office today and saw Tina and Chloe and, well, at first she didn't realize they were twins but when she did she asked if they, or rather you, would ever consider letting them be models in adverts? Here, she gave me her card if you wanted to talk to her.\" She passes me the business card which I study.\n\n\"Well, that was unexpected! I don't quite know what to think. I know the girls are very pretty but modelling seems, well, kind of sleazy.\"\n\n\"It's really not that kind of modelling,\" Zoe reassures me. \"It was more, say, where you have someone in a picture with the product being advertised.\"\n\n\"That's a relief! Even so, I'll have to think about it. What would you do, Zoe?\"\n\n\"Well, I'm not their Mum, but if I were I would definitely consider it. It can be an interesting experience and it can pay quite well, though I'd probably put it aside for them for the future, to help with university perhaps.\"\n\nI look at her, surprised by her unexpectedly thoughtful and practical response. \"You're full of surprises, you are. You'd make a great mum, you know,\" I tell her.\n\n\"I think that's one of the nicest things anyone's ever said to me,\" she says, obviously touched. \"I'd love to be a mum one day; people I've told, even my parents, are surprised when I tell them.\"\n\n\"Well...\" I reply carefully, \"I suppose your style is a bit against you; you don't see many Goth-punk mummies. The girls think you're \u00fcber cool, so they'd think a Goth-punk mum would be brilliant, I expect.\"\n\n\"Well, you're nice and slim, and you've a lovely, youthful face so, yes: a bit of eyeliner and mascara; some black lipstick; cut, dye and highlight your hair and you could pull it off. We'd have to work on your wardrobe a bit, mind.\" I burst out laughing at the idea, though I do wonder what it would be like to walk into a room with Zoe dressed and made-up similarly; the image is unexpectedly exciting. \n\n\"My Mum would have a fit!\" I tell her. \"She already thinks that you're unsuitable for me as a friend; you'd think I was about fourteen sometimes, the way she talks.\"\n\n\"I'm not sure that parents ever fully accept that their children are grownups. Or maybe it's just overprotective love; you don't want your kids doing things you think are mistakes, however old they are.\"\n\n\"Well, I've made my share of mistakes, but at least they were my mistakes. Roy was definitely a mistake but then, without him, I wouldn't have the girls...\"\n\n\"And they are wonderful and absolutely not a mistake,\" Zoe concludes for me, and I feel an upsurge of real warmth and affection for this woman. \"Here we are. Tina, Chloe, come here and let your Mum and me go in first so we can get a table. Good girls.\" I'm impressed: Zoe seems to be a natural at parenting as, amazingly, the girls immediately do as they're told.\n\nThe restaurant is quiet at this time: too late for lunch and a little early for most office staff to dine. The girls are excited as we don't dine out often and they finally settle on sharing a large Quattro Stagioni pizza on the basis it has lots of different toppings. Zoe and I discover that we enjoy a shared love of spicy food as I opt for Penne al'arrabiata con pollo while Zoe selects a pizza with the ominous sounding name of il Vesuvio! The girls tease her about being careful not to erupt after eating it.\n\nAs we receive the starters, I take the girls' hands and they take Zoe's and she looks a little confused. \"As we share this meal we are happy that we are together and will always be there for each other,\" the three of us say together.\n\n\"That was very sweet,\" remarks Zoe afterwards, \"but what was it, a prayer?\"\n\n\"Sort of, I guess. I started it with the girls when they were younger and Roy not being there was upsetting them. It's become a sort of tradition now at our evening meals.\"\n\n\"And we're like super happy that you're with us, Zoe,\" Tina tells her, making her smile.\n\nAs we eat I notice Chloe showing Tina a piece of paper as they whisper together. \"What's that?\" I ask as I hear a soft sigh of 'Oh dear' from Zoe.\n\n\"Mum, did you know that Zoe is an archer, just like Katniss in 'The Hunger Games' and she's like really good! Zoe, show Mum that photo on your phone, go on!\" Chloe begs. Reluctantly Zoe takes out her phone and calls up a photo: it shows her smiling happily, giving a thumbs up and wearing some weird thing across her chest. She is standing next to what is obviously an archery target in which half a dozen identical arrows can be seen, all stuck into the yellow circle at the centre.\n\n\"Six arrows in the yellow bull's eye,\" I observe, \"and all shot by you I assume, Zoe. I guess that must be hard to do.\"\n\n\"Muuum,\" Chloe protests, \"Zoe fired those arrows from like seventy metres away! That's like, miles!\" \n\n\"Hang on, I'm trying to picture what seventy metres looks like... good grief, it's almost three times the length of the local swimming pool! Now I really am impressed,\" I tell Zoe.\n\n\"It's called a 'six gold end',\" Zoe explains with a mixture of pride and bashfulness. \"You shoot six arrows before going to score and collect them and that's called an 'end'.\"\n\n\"And it's not called a 'bull's eye' but a 'gold'!\" insists Chloe, and Zoe smiles.\n\n\"That's right, well remembered, but you don't 'fire' arrows, you shoot them. It's guns you fire,\" Zoe points out.\n\n\"I'm just amazed you can even see the target, let alone hit the centre six times in a row at that distance,\" I tell her.\n\n\"But Mum, look at this,\" Tina now passes the piece of paper across and I look to see it is a leaflet.\n\n<center>Ravensborough Archery Club\n\ninvite you to attend their annual\n\nHAVE A GO AT ARCHERY DAY\n\nSunday 10 March 10:00 am -- 4:00 pm\n\nOpen to ages 8 and upwards All children must be accompanied by an adult</center>\n\nI glance at Zoe. \"Sorry, but I designed the flyer and they needed some more copies printed off,\" she explains. \"Chloe saw them and asked if she could have one.\"\n\n\"Mum, could we like go and try fire... shooting some arrows, please?\" asks Chloe. I look at Tina who's nodding vigorously in agreement.\n\n\"I guess we could as you both seem so keen. It's not the whole six hours is it, Zoe?\"\n\n\"No,\" she smiles, \"it's just turn up whenever. You'll get a bit of teaching and most people have a few ends. If it's busy then we have to ask people to let others have a turn but often you can shoot as much as you want. I'd say an hour is about average but it can be longer. It'd be lovely to see you and Chloe and Tina there,\" she adds.\n\n\"And do you do the teaching?\" I find myself asking. \n\nShe looks me in the eye, and replies quietly, \"For you three, I'll make damn sure it's me!\" There's something about the intensity with which she says this... but at that moment I am distracted by the arrival of our main courses.\n\nThe meal is a happy one, with the twins talking about 'The Hunger Games' and how they're going to shoot like Katniss, the heroine. Zoe admits to having heard of the film but hasn't seen it or read the book. That's the cue for Tina and Chloe to agree that \"next time you sleep over we'll watch that in the morning instead of Playstation.\"\n\nOn the virtually empty train home, the girls are tired and almost dozing, worn out by a day of excitement and full of pizza. They gaze out of the window as Zoe and I chat quietly.\n\n\"The girls loved today, thank you ever so much,\" I tell her.\n\n\"Hey, it really was my pleasure. The both were lovely and so interested and appreciative. Sarah,\" she hesitates, \"I hope you weren't upset by my telling them what to do when we arrived at the restaurant. I mean, it wasn't my place really, with you being there; it just sort of slipped out...\"\n\n\"No, I'm not upset at all. You'd been with them all day and I'm glad they were happy to listen to you. They really like you, you know, more than just thinking you're cool. It's almost as if... oh shit,\" I swear softly.\n\n\"What? What is it, Sarah?\" Zoe's voice is full of concern.\n\n\"Zoe, they're almost treating you like another parent. I don't know how you feel about that... hell, I don't know how I feel about it! I know their Dad was crap, as a partner and as a dad too, and I've done my best to be all they need... God, I'm letting them down, aren't I? I should be out dating men so they can have a father figure in their lives but instead I'm being selfish and enjoying myself going out with you...\"\n\n\"Sarah, you're an amazing mum and you have a wonderful relationship with the two of them. I'm very flattered that the girls like me so much and I love being your friend.\" Zoe pauses. \"As to a father figure, well, that's something you need to decide. But, Sarah, don't date guys for that reason. You need to ask yourself whether you want a relationship with a guy.\" She looks at me. \"Do you?\"\n\n\"Honestly? No, not really, not at the moment, anyway. I've never been good at maintaining a relationship with men in my life. I fell pregnant with the girls a short while after Roy and I started dating. I say 'fell pregnant' but I knew what I was doing. I... I thought that'd be all that would be needed and, well, the girls kept us together for years.\" I hesitate, wondering if I can tell Zoe something that I've barely admitted to myself, let alone to another person. I look down and take a couple of deep breaths before continuing, very quietly \"I call him a useless wanker and not interested in us but, truthfully,\" I look at Zoe who is listening intently, \"I never showed him much interest either, certainly not for the last five or six years. Really, he was a hero for putting up with me for so long but in the end, it just wore him down, I think. So you see, Zoe, I have let the girls down by driving him away...\" Zoe holds my hand comfortingly.\n\n\"Sarah, you need to work out what, and who, you really want in your life. In the meantime, I'm happy to be here for you and the girls, if it helps.\"\n\n\"It does help, Zoe, thank you,\" and I kiss her cheek tenderly as her thumb caresses the back of my hand. \n\nWhiteton Town station and after some quick hugs the twins and I alight. The girls both wave at Zoe who is still sat in the carriage as the train pulls away and I raise my hand too. Part of me really wishes that she was here now, that we'd walk home together and put Tina and Chloe to bed and then sit and chat over a drink... \"Come on girls; let's get you home to bed.\"\n\n=====================================\n\n\u2003 CHAPTER 2 -- Developments\n\nSaturday 3 March\n\nI'm awake early and must write down the dream I've just had; I don't often remember my dreams so when I do I record them...\n\nI dreamed there were arms around me as I lay with my eyes closed. I felt warm and loved and safe and... that's it: cared for. My eyes open and filling my vision is the corner of a smiling mouth and a cheek with the cute pucker of a dimple in it. I am cuddling with my school friend Kate, I realize, as we did from time to time when one or other of us was down or stressed. I loved her holding me and holding her in return; it was always so safe and happy. I close my eyes again and relax.\n\nI feel the movement as she turns and dips her head slightly, to softly kiss my nose. I raise my chin at the tickle her kiss gives and, quite by chance, our lips brush... and hesitate, touching ever so gently. Imperceptibly, almost as if drawn by some gravity between us, our lips press harder. A subtle note of pleasure is added to the harmonious tune of our happiness and contentment.\n\nI realise that I am kissing my best friend but that is okay: I love her being my friend and she is kissing me for the same reason. I feel her lips part beneath mine. I have kissed boys and, if Kate were a boy, I know what would come next... and it does. Kate's tongue gently caresses my lip and I tremble; do I respond? Part of me wants to, desires that intimacy and sensuality of tongues entwining, but she is not a boy... SHE'S NOT A BOY: SHE IS A GIRL! In my dream my eyes fly open as I pull back and I see a flash of spiky blonde hair with fuchsia-pink highlights before I am sat bolt upright in my bed, breathing heavily and wide awake.\n\nI doubt that I will forget this dream anytime soon but, before the details of the dream fade, I reach over and turn on the bedside light, pick up my dairy and begin to write...\n\nWith the dream recorded there is no chance of me pretending to myself later that I didn't dream, that I didn't imagine... I lay back and try to relax. Okay. I dreamed I was cuddling and kissing not Kate from school, but Zoe. There, I've said it. Unfortunately, that's the easy part. The hard part is why did I dream it and does it matter?\n\nThere is another issue: the dream of kissing has left me more than a little turned on. As my hand slips down between my legs I realize that it is a lot more than a little. So now what do I do? Thanks to my church upbringing I often feel a little guilty when I masturbate, even though most of my belief is long gone. However, I now face the question of whether it's worse to frig myself after dreaming of kissing a girl? Does that make me gay? It seems that my subconscious is oblivious to such moral quandaries as I find that the fingers of my right hand are toying with my wet folds even as those on my left rub my nipple. Carnal desire wins: I spread my legs wide and pull my nightdress up to slip my fingers into my cunny. Oh, that feels so very good as my fingers slide in and out. I adjust my hand so that I can rub my clitty with my thumb at the same time, my favoured technique for pleasuring myself. \n\nI close my eyes, savouring the sensations as the pleasure and excitement build. I have kicked the covers off and I am displayed, wanton and aroused on the bed. I imagine how someone would see me now were they to walk in, my fingers pumping in and out of my squelching cunny, the wet lips embracing and sucking on the invading digits. My clitty is swollen and the tip pokes up, visible at the top of my love cleft when I move my thumb away.\n\nI can feel the orgasm close now, a trembling tightness inside me. I bite hard on my lip to stay quiet until there is that glorious, silent detonation that rips through my being, my back arching off the bed as first one then a second orgasmic wave engulf me in quick succession.\n\nI flop back, panting and satiated and hear a door opening and footsteps approach my bedroom. Two fingers of my right hand are dripping; in a panic and without thinking I stuff them into my mouth to clean them as my left hand pulls the duvet back over me. The taste of my sex explodes on my tongue. Bloody hell that was unexpected: so much for sugar and spice! I wonder why I've never been tempted to taste myself before because I'm certain I will again.\n\nThe sounds of footsteps pass by my door and I relax. My fingers caress my swollen wet lips and I cannot resist another taste. With my finger in my mouth, I hesitate. Am I gay? No, I can't be. You cannot help what you dream and it had been nearly a week since I last frigged myself, so it's not surprising I was feeling a bit randy. It was just coincidence that the two happened on the same morning.\n\nTuesday 6 March\n\nAccording to Chloe and Tina, their report on what they did on the 'Take Your Daughter to Work Day' made them the envy of Year Six. Even Miss Drake their teacher was impressed, particularly with Tina's explanation of Corporate Hospitality, apparently. I feed this back to Zoe when we meet on the train.\n\n\"Oh good, I'm so pleased,\" she says, seemingly relieved, though I don't know why she was worried.\n\nI hesitate. We are sat next to each other in a section of seats all facing forward, so it feels secluded and private. \"Zoe, I wanted to say something yesterday but there were too many people around. I just wanted to say thank you for what you said last Thursday, you know, about being happy to be with me and with the girls. You really are a wonderful friend.\" It occurs to me that, had she been a man, I'd have done my utmost to have her wake up on Friday morning in my bed! Oh well.\n\n\"It's my pleasure, Sarah,\" she replies but there's something like regret in her voice. No, regret is too strong a word for it; wistfulness, perhaps.\n\nWe chat on and I confirm that we'll be at the Have-a-Go day at the archery club. \"I think Chloe and Tina would drag me there whether I was willing or not!\" I tell her, only half joking.\n\n\"And do you want to be there?\" she asks.\n\n\"Well, I'm probably a bit old to take up a new sport, but I'm happy to go for the girls' sake... and it'll be nice to see you too,\" I admit.\n\n\"Aw shucks,\" she goes all mock-coy, \"it'll be nice to see you too, all three of you. And you're what, seven or eight years older than me; that's not old! Anyway, lots of people take up archery as adults when their kids try it.\" I concede the point before she continues, \"Um, we could have another evening with just the two of us on Friday, if you're up for it... and if your Mum will let you out to play again with the scary punk woman!\" she teases.\n\n\"I'd like that. Same place?\"\n\n\"If you're happy with that, Sarah.\"\n\n\"Sure, though either less beer or fewer tequilas this time; the journey took so long I sobered up a bit last time but I wouldn't want to roll home drunk. Would you... want to stay over again? Maybe come prepared this time? It would make Chloe and Tina happy.\"\n\n\"That would be lovely,\" she replies happily. \"So, it's a date.\"\n\nFriday 9 March\n\nThe day seems to have really dragged as I've waited impatiently for five o'clock. Mum didn't mind too much being called onto extended childcare duties. I think the girls have been telling her how lovely Zoe is and that she shouldn't be put off by Zoe's appearance. Anyway, I told her I would ask Zoe about her accompanying me to a nightclub to see if I can meet some men.\n\nThe walk to La Gata Rosa seems quicker this time, perhaps because I know the way now. When we enter, the tapas bar is only slightly busier than last time. It's curious that, once again, the clientele are almost exclusively female; last time obviously wasn't a one-off. On one hand, this is welcome, leaving Zoe and me uninterrupted but, of course, the downside is that there's little or no chance of meeting a guy. At the bar, Marta immediately comes over and greets us, \"Welcome Zoe and friend Sarah. So you are a regular now, no?\" she smiles. \"The usual: two beers? Unless you are going to be crazy with tequila again.\" She gives Zoe a grin.\n\n\"Two beers please, Marta,\" I reply and she quickly fetches them.\n\n\"I'm still planning to talk Sarah into some tequila later,\" Zoe confides when Marta returns.\n\n\"Sarah is a nice girl, I think. You don't go leading her too far astray,\" Marta warns.\n\n\"I think I can cope with a little bit of straying,\" I tell Marta.\n\n\"Well, as long as you're happy and enjoy it, I'm glad for you.\" This seems a slightly bizarre response to my being plied with tequila but I assume it's Marta's foreign idiom at play. \"You want some food now or maybe wait for later?\" she asks and we opt to wait but not too long.\n\n\"I meant what I said about not getting drunk,\" I warn Zoe. However, despite my intent, the first two drinks slip down all too easily before we think about eating. We order the mixed tapas selection again, mainly because I can barely remember what we had last time, much less what the different dishes were called. Another two beers arrive with the food.\n\nAs we eat I remember what I told Mum I would do, so ask Zoe, \"I know what you said about the importance of wanting a relationship for myself, and you're right, I know, but would you come to a nightclub with me? Men must fall for you all the time.\"",
        "A look of sorrow crosses Zoe's face. \"Sarah, I'm not the person you want to help you attract men. I'm even worse than you at relationships with guys: I'm completely hopeless and haven't had a boyfriend since I was a teenager!\"\n\n\"Are you happy, being on your own?\" I ask.\n\n\"Well, I'd love to, well, fall in love with someone, I really would. I guess I'm happier on my own than being with someone I didn't completely love and who didn't completely love me back. Anyway, I'm not on my own: I have friends, including special friends like you... your daughters too.\"\n\n\"Yeah, I guess I feel a bit like that too. The trouble is how do you find someone to love and to love you back? It's not likely that they're going to suddenly walk into your life, is it?\"\n\n\"They might do. Or you might find that's it's someone who's been in your life for a while but you've not noticed them or thought about them in that way.\"\n\n\"What, like a bloke you've known at work for years?\"\n\n\"Yeah, I guess it could be a bloke like that. Right, is it another beer or have we reached... tequila time?\" she asks, finishing in a high pitched, mock Spanish accent.\n\n\"Are you going to let me get away with not drinking tequila this evening?\"\n\n\"Um, let me think... NO!\" she declares loudly and laughing.\n\nI hold up my hands. \"Okay, then let tequila time begin -- but not go on too long, please?\"\n\nIn the end, I have four tequilas to Zoe's five, though she's still soberer than me and I am noticeably more unsteady than last week; so much so that I must lean on her for stability. My arm resting across her shoulder and hers wrapped around my waist feel very comfortable.\n\nThe journey home is uneventful and, as I feared, far too brief to allow any appreciable sobering up. Also as feared, Mum is more than a little disappointed with the state of her daughter and, despite the sterling work of Tina and Chloe in promoting her, Zoe also falls out of favour. Mum has a distinctly sour look on her face as she bids us goodnight.\n\nZoe and I flop on the sofa, my legs on her lap as she massages my feet. \"Mmm, that feels good, Zoe dear. Where did you learn to do that?\"\n\n\"Trial and error and what I think would feel good to me. It's a good principle in many pleasure-related things,\" she informs me suggestively.\n\n\"I shall have to bear that in mind the next time I have someone to pleasure!\" I reply smiling but then sigh. \"A pity there's no one to hand.\" It vaguely occurs to me that the alcohol has done away with my normal inhibitions in what I say.\n\n\"Yes, a real pity.\"\n\nWe chat for a while longer as I try to drink enough water to stave off a hangover in the morning. However, alcohol induced sleepiness is rapidly overcoming me and as I start to nod Zoe tells me that it's time for us to turn in.\n\nSaturday 10 March\n\nI awaken very late and with a sore head and a queasy stomach. \"God, I fuckin' hate tequila!\" I moan out loud as I try to sit up and fail. Eventually, I roll out of bed and stagger to the bathroom to pee, to check that I don't really need to throw up, to drink water and to take paracetamol.\n\nTen minutes later I push open the sitting room door to see Zoe once again sat between my daughters. As they had promised, they are watching the DVD of 'The Hunger Games'. I walk over and get Chloe to budge up so I can join them. I reach over and squeeze Zoe's shoulder. \"Morning,\" I say quietly, \"how's your head?\"\n\n\"Fine,\" she replies brightly and glances at me before grinning broadly, \"I can see that yours isn't!\"\n\n\"As I said when I woke up: I fuc... flipping hate tequila!\"\n\n\"Mum! You were going to say the 'F' word!\" Chloe declares, shocked.\n\n\"Maybe,\" I admit irritably, \"but I didn't, did I?\"\n\n\"Yeah, but you might as well have done,\" Chloe insists.\n\n\"Hey, Chloe, give your Mum a break,\" Zoe intervenes, placing her hand on Chloe's head. \"Let's pause this and I'll go and make some hot chocolate for you two and some tea for your Mum, okay?\" she looks at me.\n\n\"Thanks, Zoe, but I'll do it,\" I tell her.\n\n\"No, you stay here and give these girls a cuddle. I promise not to destroy your kitchen,\" she smiles. God, this woman is such a lovely, kind friend and I feel my mood lighten. By the time she comes back with a mug of tea and two big cups of hot chocolate the smell of bacon is emanating from the kitchen. \"When I opened the fridge the bacon practically begged me to start cooking it,\" she explains. Tina claps her hands as she and Chloe laugh.\n\nThe morning passes easily and increasingly happily as my hangover passes. In the afternoon I ask if Zoe wants me to take her home and she looks a little disappointed. \"Okay; I guess you want time with just the three of you,\" Zoe replies, looking down.\n\n\"Hey, Zoe, no!\" I slip my hand under her chin and raise her head as I would Tina or Chloe. \"I'd love you to stay but I didn't want you to feel, well, obliged or trapped here.\"\n\n\"Sarah, I'd never feel that with you. Why would I?\"\n\n\"I don't know; perhaps because you're a super cool Goth-punk girl while I'm a single mum in her mid-thirties with two ten-year-old girls!\"\n\n\"A single mum who's pretty cool too and who is my... my very good friend,\" she replies and there's something in the intensity with which she says this that makes me swallow hard and feel a little... strange.\n\n\"Really?\" I ask. \"I'm very glad you're my friend too,\" I smile at her as the strange feeling passes. \"So, is your bowling as good as your console gaming?\"\n\n\"Bowling?\" she asks, confused.\n\n\"Yes, you know, tenpin bowling?\" I say slowly, whilst miming bowling a ball.\n\n\"Yes, I know what it is! It was just an unexpected question, that's all. And my bowling's not bad; good enough to beat you, I bet!\" she reaches up and tweaks my nose. I hear a laugh from the doorway and turn to see Tina.\n\n\"Are we going bowling?\" she asks excitedly and I say yes. She skips over and puts her arms round both of us. \"I love you guys!\" she says and Zoe and I smile at each other. I'm going to enjoy the rest of the day, I know.\n\nI'm also going to do my damnedest to beat Zoe...\n\nSunday 11 March\n\nThe girls are awake at silly o'clock and I have to threaten them with not taking them to the Open Day to get them back into bed. I doubt that they sleep much but I manage to doze some more. I awake, feeling all tingly and sensual but don't do anything about it; the risk of one or both of the twins walking in on me is too great, unfortunately. I wonder if Zoe is awake and whether, being single too, she ever feels the same tingle. I immediately feel embarrassed for thinking about her like that.\n\nI get up and am instantly joined by the girls who've obviously been on a hair trigger waiting for Zoe or me to get up. I shush them and we go downstairs where I put the kettle on and start making toast for breakfast. It is not long however before Zoe wanders in. She is tousled from sleep and free of makeup; she looks at me and smiles, her dimples appearing. She is, quite simply, gorgeous: cute, beautiful, warm, friendly and lovely. And she's become my best and closest friend. There, I've admitted it.\n\nWe sit around munching toast and drinking tea or milk as Zoe tells us that she needs to be at the archery club at nine o'clock to help set up. \"I'll need to pop back to my flat to change and collect my bow and stuff so if you could then drop me at the club there's a coffee shop nearby.\"\n\n\"Okay. We could bring you a coffee when we come to the have-a-go, if you like.\"\n\n\"I'm glad you offered: it saves me from asking,\" she smiles. \"A skinny, double-shot cappuccino, please.\"\n\n++++++++++++++++++++++++++++++++++++\n\nThe day is dry, not too cold but overcast as we get out of the car at the Ravensborough Archery Club and look around. Now we're here, the girls have calmed down a bit but are still excited. There are a number of people around, mostly Club members by the look of it as I peer around, searching. Zoe sees us first and waves: over her Archery Club shirt she's wearing the peculiar chest thing that I saw in the picture of her six gold end. Seeing another woman Club member pulling on a bow I realize what it is: it's to protect her boob from the bow string.\n\nWe go over to a marquee they have set up and, after handing her the promised coffee, I have to fill in a series of forms for Tina, Chloe and myself; after that Zoe takes us to collect equipment.\n\n\"I definitely want one of those boob protectors you're wearing,\" I tell her and she smiles as the girls giggle. Why do kids always find adults saying slightly rude things so funny?\n\n\"It's called a chest guard, Sarah. Yeah, I can find you one, though the bows you'll be using are very low draw weight, so they can't hurt that much. However, you'll each need a bracer, that's an arm guard, and a tab,\" she hands us each an oddly shaped piece of leather with holes in it. \"This protects your fingers when you draw the string.\"\n\nSuitably kitted out, she takes us to collect bows and arrows. She claims that they're light to pull but the three of us find them a challenge until Zoe comes to help us. She stands behind me and corrects the way I stand, her hands pressing and pulling me gently. \"Now, when you draw the bow try to engage and use the trapezius muscles here,\" she runs her fingers down my back between my shoulder blades and spine. Her touch feels lovely and makes me shiver slightly, though the guidance also helps with my drawing the bow.\n\nWe shoot (not 'fire' I remember) and collect the arrows. Despite the targets being only ten metres away, most of the arrows miss completely. However, as we shoot more we do improve until we all manage to hit with all six arrows. Chloe proves particularly good at this but we all enjoy it. \n\nWe take a break, more for needing a rest than there being a long queue of people. Zoe shows us her bow, an impressively high-tech version of the bows that the twins and I are using with extra things sticking out and a sight for aiming. \"Wow, Zoe, that looks amazing!\" exclaims Chloe. Even I'm intrigued enough to want to pick it up.\n\n\"May I?\" I ask.\n\n\"Sure, but if you draw it don't release the string without an arrow as that can damage the bow, okay?\" I nod and try to remember how to stand correctly; once more it is Zoe's gentle but confident touch that corrects my posture. She is so close that her soft vanilla scent is perceptible even here in the outdoors. I try to pull the string and manage to haul it halfway before giving up.\n\n\"Good grief, you can't possibly be able to pull this thing!\" I complain to Zoe. She grins and winks at Chloe and Tina.\n\n\"Just watch me,\" she tells us before taking the bow and walking up to stand before a target. She fits an arrow on the string, raises the bow and, seemingly without effort, pulls the string all the way back to her chin and lets it go: the arrow slams into the gold, burying itself deeply into the target. She does this again and again until six arrows are clustered in a neat group. The girls clap in appreciation and Zoe turns to give a little bow.\n\nWhen it's time to collect the arrows the girls run over to hug her, telling her how amazing that was, before we walk to the target with her. Tempted as I am, I don't hug her but I do share my amazement, \"I can't believe how easy you made that look!\"\n\n\"It's just practice and developing the right muscles. My bow's not really that heavy to draw, not compared to some that the guys use.\" She lowers her voice slightly, \"Sarah, I think that Chloe and possibly Tina are going to ask about doing the Beginners' Course.\"\n\n\"Why am I'm not surprised? I suppose the relevant questions are: when is it, how long does it last and how much does it cost?\"\n\n\"And the answers are that it's on Saturday mornings for six weeks starting the week after next and it costs thirty pounds each, so ninety pounds for the three of you.\"\n\n\"Do I have to do it with them?\" I ask.\n\n\"No, Sarah, you don't. However, they'll need a parent here and three hours learning to shoot is much more fun than three hours standing around watching others learn to shoot.\"\n\n\"A good point and well made,\" I admit. \"That's quite a lot to spend so I need to make sure that they're really keen. Who does the teaching on the course?\"\n\n\"Myself, Martin and Chris, why?\"\n\n\"Oh, no reason... unless perhaps their complete hero worship of a certain Goth-punk archer might influence the desire of two ten-year-old twins to take part!\" I suggest and she laughs.\n\n\"Hmmm, you think? And what about their Mum?\"\n\n\"Oh, she's easily influenced by her daughters,\" Zoe looks a little disappointed, so I continue, \"but she also thinks that the Goth-punk archer with the dimples is pretty damn marvellous too, so, yes, if the girls want to learn I'd certainly like to be taught by you.\" Zoe's beaming smile tells me that's what she wanted to hear. \n\n\"Actually, Sarah, I should have told you that the first thing Chloe asked me was whether I ran the Beginners' Course,\" Zoe informs me.\n\nSure enough, after another bout of shooting, Chloe says to me, \"Muuum, you know how you're always saying that Tina and I should do, like, more sport?\"\n\n\"Am I?\" I ask, innocently and I can see Zoe smiling out of the corner of my eye. \"I know I tell you not to spend your lives sat on your bums in front of the telly or on the PlayStation; I'm not sure that means you should do more sport necessarily.\"\n\n\"Okay... but doing sport would get us off our bums, wouldn't it? You agree, don't you Zoe?\" Chloe looks to Zoe for support but Zoe just smiles and holds up her hands, not wanting to be included in the argument.\n\n\"Ah, so you want to join the Whiteton Running Club, do you?\" I tease.\n\n\"Mum! You know Chloe isn't talking about running!\" Tina is using her Little Miss Sensible voice and Zoe is trying not to laugh.\n\n\"Okay, so it's not running. What sport did you have in mind, Chloe?\" I ask.\n\n\"It's archery Mum, obviously!\" Chloe replies as if I'm a bit simple.\n\n\"Alright, I deserved that for teasing you. So do you both want to do the beginners' course and are you determined to see it through?\" I ask Tina and she nods.\n\n\"And I think you should do it too,\" Tina tells me, \"that way it'll be like a family thing,\" and she looks from me to Zoe. I nod.\n\n\"Then I'll book us up for the course starting in two weeks,\" I say and the girls hug me and then Zoe.\n\nSeveral hours later -- and ninety pounds from my bonus spent -- we are heading back to Zoe's flat where we find she has had a beef and ale casserole slow cooking all day for us. It is delicious and Zoe serves it with baked potatoes followed by ice cream. As night falls and much as I'd like to stay, a day in the open air followed by a wonderful meal has the girls nodding with tiredness. We take them down to the car and put them in, closing the car door. \n\nI turn and Zoe is standing very close. I feel her hands on my waist as she looks up at me. I bend forward and our lips brush... and hesitate, touching ever so gently. Imperceptibly, almost as if drawn by some force between us, our lips press harder. I feel her lips open slightly beneath mine... I pull back, shocked not only by what happened but also by how closely it echoed my dream of a week ago. \"No... I'm sorry Zoe, I don't know what came over me.\" I get in the car and drive, unable to look back.\n\nMonday 12 March\n\nI deliberately board another carriage for I cannot face Zoe this morning. I don't know why I kissed her like that and I'm so embarrassed. God only knows what she thinks of me.\n\nAs I sit on the train my phone rings: it is Zoe, but I bounce the call. A text follows shortly after: \n\n<blockquote>R U OK?</blockquote>\n\nI ignore that too.\n\nThere have been a couple more calls from Zoe during the day and another text, all ignored as I have no idea what to say to her, but it is in the evening that I make a mistake. I leave my phone on the hall table with my keys and start preparing dinner. When the phone rings, Tina answers it and comes into the kitchen holding the phone out to me and saying that Zoe wants to talk to me. I tell her that I'm busy cooking and to say I'll call back later. \n\nAs we sit eating, I can see the girls are anxious, Tina particularly so. \"Mum, are, are you okay? I mean, like, with Zoe?\" Oh shit! What do I say?\n\n\"Yes, why?\"\n\n\"It's just... Zoe seemed a bit sort of upset and worried on the phone,\" Tina explains.\n\n\"Was she upset with me?\" I ask.\n\n\"Um, no, not upset with you; it was more about you I think. She wanted to know if you were, like, okay. You will call her, won't you, Mum, like you said you would?\" That doesn't leave me much choice.\n\n\"Yes, Tina, I'll do it after dinner,\" I assure her.\n\nI take my phone to my room so I can talk without being overheard by the girls. This just leaves the question of what the hell I am going to say. 'Sorry I nearly tried to snog you last night' is the honest line but there's no way I can say that! As a result, the call is awkward, certainly at first since I have no idea what to say beyond, \"Hello, Zoe, it's Sarah.\"\n\n\"Oh god, Sarah, I've been so worried about you. Are you alright?\"\n\n\"Yeah, I'm fine, I guess.\" I hesitate before saying in a rush, \"Look, I'm sorry about last night...\"\n\n\"What? You kissed me goodnight, which was sweet, and then you seemed to get upset. You weren't upset you'd kissed me, were you?\"\n\n\"Um, yes I was, a bit... I didn't want you to think I, that is, um that I was trying to um...\"\n\n\"Sarah, were you worried that kissing me on the lips would upset me?\"\n\n\"Yes,\" I say in a small voice, \"I thought you'd think I was... er...\"\n\n\"Trying to snog me?\"\n\nI give another small \"Yes\" of agreement.\n\n\"Sarah, like I said, it was a sweet kiss from one close friend to another. Did you intend it to mean more?\"\n\n\"No!\" I practically shout into the phone. \"Sorry, no I didn't it was... I don't know... I guess I miss affection sometimes, like being held and cuddled... and kissed; do you understand.\"\n\n\"I understand completely, Sarah, really I do. I feel the same at times. Quite often, actually,\" she gives a little chuckle. \n\n\"It sounds like you need to find a man too,\" I tell her.\n\n\"No, I really don't. I'd love more closeness and affection in my life but I don't want all the extra stuff a guy would bring.\"\n\n\"Yeah, but there are some things you can only get from a guy,\" I laugh.\n\n\"If that's true then I'll do without those things!\" I can hear the smile in her voice. \"Look, perhaps we just need to set limits because I don't want you to get upset again thinking that you've done something wrong. So: are hugs okay?\"\n\n\"More than okay,\" I tell her.\n\n\"Good. What about cuddles?\"\n\n\"What's the difference between a hug and a cuddle?\" I ask, intrigued.\n\n\"Duh! A cuddle lasts longer, obviously!\"\n\n\"Okay, then yes to cuddles too. I guess it's kisses next?\"\n\n\"Yeah but I think we need to think about types of kisses: you don't seem to mind kisses on the cheek but it was the lips that upset you, wasn't it?\" she asks. I swallow as I try to think; was it the lips or the possibility that kissing the lips might have become more that upset me?\n\n\"I think a quick kiss on the lips is okay...\" I manage to say. God, this is such an uncomfortable conversation and Zoe seems to pick up on my discomfort.\n\n\"Sarah, listen; I won't kiss you on the lips but just remember that I won't be offended or upset if you kiss me like that. How does that sound?\"\n\n\"Yeah, that sounds good,\" I sag in relief. \"Zoe, I'm so sorry; I've been a total jerk today, haven't I?\"\n\n\"Well, maybe a bit but I'm prepared to forgive you. How are Tina and Chloe?\"\n\n\"They're both fine. Tina was worried that you and I had fallen out and I had to promise to return your call.\"\n\n\"Good for Tina! I owe her an extra big hug... maybe even a cuddle,\" she laughs.\n\n\"I'd better go and start getting the two of them off to bed. I'll see you tomorrow?\"",
        "\"Yup, see you there, train buddy.\"\n\nWednesday 14 March\n\nUnlike yesterday, I actually get to sit today and next to Zoe too. After a few minutes, I notice a man looking at me and he looks away each time I look towards him. I try to think if I have seen him before but I'm not sure. He is so ordinary that there is nothing to make him stand out or attract my attention, unless extreme blandness can be considered a distinguishing feature.\n\n\"Zoe,\" I whisper, \"don't look immediately but there's a guy over there in a grey suit who keeps staring at me.\" She manages a casual glance around the carriage as the train pulls into the next station.\n\n\"Ah, I guess you mean Mr Norman Dull of Blandford, a Civil Servant and six times winner of Britain's Most Boring Human Award.\" I had forgotten Zoe's penchant for not only naming fellow passengers but creating little life histories for them.\n\n\"Yes, that's him\" I giggle. \"He must be a regular then?\"\n\n\"I think he must be; I first saw him, um, a little after Christmas I think, though he's so... nondescript that it's easy not to notice him.\"\n\n\"Too right; this is the first time I've noticed him. Do think..?\"\n\n\"What, him as your Sneaky Valentine? Hmm, so it's Norman, by day a tediously dull man but by night an impassioned love poet and would-be Valentine? A bit of a mismatch, don't you think?\"\n\n\"More of a mismatch than, say, a Goth punk girl who, it turns out, is actually a kind, loving woman, who's fantastic with kids, a wonderful friend and a fantastic archer?\" I smile.\n\n\"Oh yes, definitely more of a mismatch than that!\" she laughs.\n\n\"I'm going to keep an eye on him anyway,\" I say and then add, \"Oh shit I hope it's not him. Life with Roy was boring enough and I've just started having some fun again.\" Zoe looks at me and gives a shy smile.\n\n\"Do you mean...\"\n\n\"Yes, I mean doing things with you, and when I'm not being a Muppet and overreacting to... things.\"\n\n\"At least we worked it out,\" she answers, contentedly.\n\nFriday 16 March\n\n\"As we share this meal we are happy that we are together and will always be there for each other,\" we all say, hand-in-hand, before tucking into sausages, mashed potatoes and baked beans; real comfort food on this cold evening. Almost immediately I know something's going on between Chloe and Tina; almost no one else would notice the subtle looks and nods but I do. Mum would too and I suspect that Zoe might as she seems very in tune with the pair of them.\n\n\"Okay, what is it?\" I finally ask. Embarrassed silence follows. \"Look, both of you, if you've done something wrong then it's much better...\"\n\n\"We've not done anything wrong!\" protests Chloe in an injured tone. \"Tina wants to ask you something.\" I see Tina look daggers at Chloe and guess that Chloe has just stitched Tina up. I try to make it easy for Tina.\n\n\"Tina, you can always ask me anything, even something that your sister's too cowardly to ask,\" I look at Chloe who looks indignant and is about to say something but decides better of it. I turn back to Tina with an encouraging look.\n\n\"Mum, um, we wanted to ask... are, like, many women lesbians?\" I hope the shock doesn't show on my face because all I can think is where the fuck did that question come from and, more importantly, why? I immediately worry that it's either something I've done (did they see me kiss Zoe on the lips?) or that they're about to tell me that they think they're both gay. Hang on, they're not yet eleven: they can't possibly know their sexuality, can they? Shit, shit, shit: I'm not ready for this.\n\n\"So, um, you know about lesbians then?\"\n\n\"Well, yes,\" says Tina, \"doesn't everyone? I mean there are like women pop stars and actors and, like, famous women who are gay and, anyway, Lucy Owens asked about people being like, gay when we were doing Sex Education at school.\"\n\n\"Oh, yes, I, I see,\" I stutter. My daughters haven't the shyness about sex that I had when I was a girl and that I still have to some degree. \"I, well I don't know, Tina. I've heard it said that one in ten people are gay but I don't know if that's accurate or true.\" I am pleased that I manage to keep my voice steady and my tone neutral. \"Why do you ask?\"\n\n\"Um, we like saw two women kissing in a car today as we arrived at school. You know, like, proper kissing, not just the friend kissing like you and Zoe do sometimes when we say goodbye.\" Well, that's a relief, I think to myself.\n\n\"Yeah,\" Chloe suddenly finds her voice, \"kissing like you see on films and telly when it's a man and a woman going to make love,\" she grins.\n\n\"Yes, I get the picture, Chloe,\" I tell her. \"Well, we could look it up on the Internet if you want a figure but you seem to know that some women love other women just as some men love men, so why do you want to know how common it is? Was it someone you recognised in the car?\" I ask on impulse. The matching blushes tell me that, as Zoe might say, I've hit the gold.\n\n\"Miss Drake,\" Tina murmurs.\n\n\"What, your teacher?\" I cannot keep the surprise out of my voice and both girls nod. \"And she was kissing her... girlfriend, in the school?\"\n\n\"No, Mum, of course not!\" Chloe replies. \"Tina said: she was in a car on the street like before we get to school. We saw them from behind but we're sure it was Miss Drake. She got out the car after but she didn't see us.\"\n\n\"Okay, I see,\" I tell them. \"Well, Miss Drake's relationships are really her business, aren't they? However, how do you feel about Miss Drake being gay and are you going to tell her what you saw?\"\n\n\"We don't mind about that, you know, her having like, a girlfriend. We did think about talking to her but... she might, like, think we were spying on her,\" complains Tina. \"Mum, I'm scared she might find out that we know and then be upset with us.\" I think for a minute. I'm not sure that Tina's worries are justified but then since when were ten-year-olds particularly logical? I'm sure I wasn't when I was ten... actually, being honest with myself, I'm still not, as I'm sure Zoe would agree.\n\n\"Okay then, how about I write Miss Drake a note and explain what you've told me?\" The girls drop into what I think of as twin-talk for a moment, that slightly weird twin communication mode or private language they have, where nods, gestures and odd words seem to carry whole sentences of meaning, and that they normally only use when the two of them are alone. At the end, they agree to my proposal.\n\n\"But you've got to say we weren't spying,\" insists Chloe.\n\n\"And that we're happy she's got a girlfriend,\" adds Tina.\n\n\"Okay, I'll do my best and, yes, you can read it before I seal it up. Okay?\" Happy smiles and relaxed girls, at last. \"Now, can we finish eating before the food goes completely cold?\"\n\nMonday 19 March\n\nI've just begun the walk home from the station when my phone rings. I look at the display and the number is unrecognised, which is unusual, but it also starts 07... that I think means that it is from another mobile phone, which is even more intriguing. I answer and the caller replies, \"Hello, Ms James? It's Penny Drake here, Chloe's and Tina's teacher. You, er, wrote a note to me this morning...\"\n\n\"Oh yes,\" I reply, \"I hope it didn't upset you, Miss Drake.\"\n\n\"I, er, think Penny will be fine in the circumstances. No, it didn't upset me; I'm more concerned about upsetting Tina and Chloe, Ms James. I'm annoyed with myself too for being so careless.\"\n\n\"Penny, I'm Sarah,\" I tell her, feeling that I have to match her informality. \"I don't think they were upset at all, more... interested and intrigued, I suppose: Tina's question, to begin with, was, 'How many women are lesbians?' I don't suppose you know the answer to that?\"\n\nI hear her laughing, \"I'm tempted to reply, 'Not enough!' Sorry, I don't mean to be flippant or offensive.\"\n\nThough her reply makes me blush slightly I cannot help a little laugh. \"No, I'm not offended; it's a good comeback,\" I tell her, envying the confidence she must have to give such a reply, \"although it's not an answer I'd tell the twins. As I said in my note, they didn't seem to mind you being gay; they were more concerned that you'd be upset that they had found out.\"\n\n\"It's not their fault, it's mine. I wouldn't normally have been kissing in a car at that time of day or so close to school, really I wouldn't. However, last Friday my car had broken down and Rachel, my partner, or girlfriend if you prefer, gave me a lift that morning and, well, we were just saying goodbye.\"\n\nI sigh; it has been a very long time since I had someone to kiss goodbye before going to work. \"I understand; when you're in love...\"\n\n\"You have to do these things!\" she finishes the sentence for me and then it's her turn to sigh. \"The trouble is, it does somewhat force the issue of saying something about Rachel and me at school and, oh dear, I was hoping for a bit more time. I only came out to my parents two weeks ago and, well...\"\n\n\"Not good?\" I hazard.\n\n\"No, it wasn't. Let's just say that rebuilding the relationship is a work in progress. I'm terribly sorry; here I am spilling out all my problems to you.\"\n\n\"Don't worry, I'm happy to listen,\" I reassure her, and I really am, perhaps because I recognise the simple need to open up to someone when things are difficult. \"Look, the girls have promised not to say anything and I'll tell them that we've chatted. Is there anything I should say to them?\"\n\n\"Tell them thank you from me and that they're very good girls for being so discreet; most kids wouldn't be. I'm going to talk to the head tomorrow morning to ask her how I should handle this, so they shouldn't have to keep this quiet for too much longer. Thank you, Sarah: for listening to me wittering on and if the girls bring you any more questions or if you're concerned at all then just give me a call, okay?\"\n\n\"Thank you, though listening to you was no problem,\" I tell her, \"and good luck with the meeting tomorrow.\"\n\n\"Thanks. I'd better go, bye.\"\n\n\"Goodbye,\" I reply and end the call. I wished her good luck but I cannot imagine how difficult saying to someone 'I'm a lesbian' must be: how do you cope if they recoil in fear or disgust and tell you that they cannot be your friend or, if it's your parents, being rejected and told that you're perverted? I know what one or two girls went through when I was at school, with the teasing and bullying and how hurt they were. Things might be a bit better now but there still seems to be so much judgement and condemnation. How does anyone dare to come out as gay? I decide that I might need to take up Penny's offer of being able to call her if the girls have more questions and save her number onto my phone just in case.\n\nTuesday 20 March\n\nNow that I've had a reply from Penny Drake and told Tina and Chloe how grateful Miss Drake was to them, I feel happy to tell Zoe about what happened. Zoe thinks her reply to 'How many women are lesbians?' was brilliantly funny.\n\n\"I think it's very sweet,\" Zoe tells me at the end of my story.\n\n\"What, Penny Drake having a girlfriend?\"\n\n\"Well, I'm always for people finding love in their life, but I was actually thinking of the way Tina and Chloe responded. It was very kind and thoughtful, not to mention accepting.\"\n\n\"You sound surprised,\" I reply quietly, my head close to hers. \"Is that because of the way I reacted to your suggestion of a woman being the Sneaky Valentine?\" I ask, smiling.\n\n\"Okay, maybe a bit,\" she smiles back. \"Are you still keeping an eye on Norman Dull?\"\n\n\"I've decided something, actually,\" I tell her and she looks at me questioningly. \"I've decided I don't care who it is; there's no bloke on this train that I want to fancy me. I just don't want the whole dating game thing, I want...\"\n\n\"Just want to have fun?\"\n\n\"Sounds good to me! Yeah, like the song, 'Girls just wanna have fun!'\"\n\n\"So what about Friday, wanna come out and have fun?\" she asks, but I hesitate.\n\n\"It's very tempting, Zoe, but it's the first day of the Archery course on Saturday and the girls are going to be manic with excitement. I really can't ask Mum to deal with that or I'll use up all my babysitting credits for the rest of the year. Sorry.\"\n\n\"Hey, it's fine; I understand... just a bit disappointed, that's all.\"\n\n\"Zoe, you're very welcome to come over for dinner, if you'd like,\" I say. \"Of course, that would mean putting up with the hyper-twins, but you seem to have coped so far. Actually, you seem to have been the cause of a fair amount of the over-excitement, now I come to think about it.\" She grins and those wonderfully cute dimples appear.\n\n\"Are you saying I'm a bad influence?\"\n\n\"Almost certainly yes,\" I tell her, \"But I honestly wouldn't change you for the world,\" I finish, too softly for her to hear.\n\nThursday 22 March\n\nI see Norman Dull is still staring at me when he thinks I can't see him. A few weeks ago that would have interested, intrigued, maybe even excited me to feel I might know who sent the Valentine's cards. Okay, in Norman's case probably 'excited' is the wrong word. However, now I just find it annoying and just a bit creepy. Zoe was right: I should have been more worried about a man getting close enough to put the cards in my handbag.\n\nSaturday 24 March\n\nOkay, so this isn't a new experience for me; I have been to Indian restaurants before but given that Zoe is insisting on ordering for us, I'm sure the dishes tonight will be new to me. For Chloe and Tina, of course, it is completely new.\n\n\"It's very good of you to take us all out,\" I tell her and the girls echo this sentiment.\n\n\"Hey, you fed me Friday night and I earn a very good salary, which is more than enough to be able to afford to treat my three favourite girls!\" she laughs. Just then the poppadums and chutneys arrive with our drinks and it is Zoe who reaches out to take my hand and Chloe's before Chloe and I take Tina's hands.\n\n\"As we share this meal we are happy that we are together and will always be there for each other,\" all four of us say quietly together as I look intently at Zoe. I am deeply touched by her joining in with our little ritual. However, a tiny part of me feels that I should object to her being part of the rite, that it comes from a time when it felt as if it was the twins and me against the world and she wasn't part of that. And yet... why object to her desire to be my friend and also Tina's and Chloe's friend, to her wanting to be part of our family? I squeeze her hand and see from the looks on their faces that the twins also noticed what she did.\n\nWe begin eating the poppadums, or 'giant crisps' as Chloe calls them. The girls like them together with the mango chutney, mint raita and onion salad but complain loudly about the spiciness of the lime pickle; I taste it too and it is as stupidly hot as I remember. Zoe turns and whispers to me, \"You don't mind me starting off and joining in with your little prayer do you?\"\n\n\"It um, was a bit strange having a fourth person. Zoe, I don't mind but those words have meant a lot to the three of us over the years so...\"\n\n\"So I shouldn't say them if I don't mean them?\" she asks and I nod. \"Then I'm okay then.\" I have to think for a moment then realize she's just told me that she does mean them. That's good, I think but then start to wonder what our little promise means between two adult, single women, particularly the 'always being there for each other'. Still, I'm very happy spending time with her.\n\n\"So, how are the three of you feeling after your first full lesson? Still enjoying archery so far?\"\n\n\"There's so much to remember,\" Tina complains, \"Holding the bow properly, using, like, the right muscles, pulling back properly... and my arrow kept like falling off the arrow rest!\"\n\n\"Zoe told you why that happens,\" Chloe tells her. \"Stop pinching like the arrow between your fingers on the string!\"\n\n\"That is right,\" says Zoe, \"I always just rest my top finger on the arrow and keep my middle finger low. Don't worry; I'll help you next time, Tina. And what about you, Mummy Sarah: did you enjoy it?\"\n\n\"Do you know I really did; I've not done any sport since I was at school so it made a real change. I was getting all my arrows on the target at the end too, which was even better.\" I tell her. \"Did you shoot this afternoon after we left?\" I ask Zoe.\n\n\"Yes, a Warwick round,\" she sees our bemused expressions. \"It's one of the set rounds in archery; we cover them towards the end of the course. A 'Warwick' round is one of the shortest rounds to shoot as it's only four dozen arrows in all, two dozen at sixty yards and two dozen at fifty yards.\"\n\n\"So it must be 'shortest' as in 'fewest arrows' because sixty yards is a long way,\" I say and Zoe nods. \"How did it go?\"\n\n\"Meh, okay but nothing like my best. That's where archery can be frustrating; you get some days when nothing quite works. Other days everything just clicks and you're hitting the gold almost every time, or so it seems. Ah, the starters are coming: onion bhajis, samosas and vegetable pakora. I didn't get us each one of every item or we'd be too full so we'll need to share if you want to try a bit of everything.\" Tasting, sharing and commenting make for a friendly, enjoyable meal, and Zoe continues the same principle for the main course where there are several dishes to try. At the end, we are all very full and Zoe and I have discovered that the girls have an unexpected liking for spicy Indian food.\n\n\"If I ever feel hungry again then I'd choose Indian!\" declares Chloe, suppressing a burp.\n\nAs we leave the restaurant and head back towards the car Zoe links her arm through mine and I feel Tina take my other hand, while a glance shows that Chloe has done the same with Zoe. I feel a warm upsurge of affection for the three of them, for us all as, well, a family almost. \"Come back with us tonight, Zoe,\" I say, moved by these feelings.\n\n\"Okay,\" she replied happily and at that moment I could have hugged her.\n\nTuesday 27 March\n\nWhen I arrive home Tina intercepts me before I've even had time to remove my coat. \"Granny's, like, pretty upset with you, Mum,\" she informs me, \"well, you and Zoe, really.\"\n\n\"Why, what have I done?\" I ask.\n\n\"I think she thinks...\"\n\n\"Ah, Sarah love, you're back,\" Mum walks out of the kitchen. \"Go on Tina, I'm sure you've some homework to finish,\" Mum says, sending Tina away.\n\n\"I need a cup of tea, would you like one too, Mum?\" I ask.\n\n\"Yes please, dear, but I really must talk with you, so I must.\" I enter the kitchen and start making two mugs of tea as I receive the talking to. \"Sarah, your father and I are very concerned with the amount of time you're spending with this Zoe woman. The girls talk about her all the time and how she's teaching you archery and taking you out for meals, or staying here almost every night... it's not right you know.\"\n\n\"Well, apart from the fact that she's hardly here 'almost every night', I have to ask why is it 'not right'? Zoe is my friend and we get on well and she's brilliant with the girls.\" I school myself to patience, knowing how much Mum does to help us.\n\n\"Yes, but don't you see, she's a woman...\"\n\n\"Yes, I had noticed,\" the flippant reply slips out.\n\n\"Don't you get sarcastic with me, Sarah. I'm sure you know what I mean.\"\n\n\"Yes, Mum, I fear that I do. Look, if you saw Zoe with the girls you'd understand a bit more: she really is fantastic with them. I know she's not a father figure but, frankly, given the last so-called father in their lives, that's no bad thing! Mum, seriously, she is not my secret lesbian lover just a wonderfully kind woman who is a very good friend. I know her looks are against her but you know from meeting her that she's not some psychopathic satanist.\"\n\n\"But look, why all this staying over? I have lots of friends, so I do, but I don't sleep at their houses. Can't you see how it must look to the neighbours?\""
    ],
    "authorname": "ScattySue",
    "tags": [
        "lesbian romance",
        "hesitant",
        "lesbian first time",
        "seduction",
        "valentine",
        "crush",
        "dildo",
        "masturbation"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/the-case-of-the-sneaky-valentine"
}
{
    "title": "Aunt Sandi Ch. 16",
    "pages": [
        "This story is part of a series, so if you haven't read the previous chapters you should click my username above. This chapter contains incest. All characters are 18 or older. Thank you for reading.\n\n<center>*  *  *</center>\n\n<center>Aunt Sandi - PART 16</center>\n\nAmy and I were frozen in the wake of Jill's bombshell question. We looked at each other and for several moments felt like if the world could end right now that it would suit us just fine.\n\nJill broke the silence and said calmly, \"What did I say? You two look like you saw a ghost.\"\n\nAmy cleared her throat and muttered, \"Why couldn't you have come home five minutes later?\"\n\nJill's smile faded and she said flatly, \"I said I was sorry about that. What more do you want?\"\n\nAmy breathed very deeply and said, \"I know, I know. But you weren't supposed to hear that. I'm...\" She looked at me and continued, \"We're not quite ready to tell you who she is.\"\n\nThe pleading was clear in Amy's expression when she added, \"Can you just forget about it? Please?\"\n\nJill's look of curiosity was unmistakable as she relaxed back into her chair, her expression changing to a serious one. \"Aims, when did we all of a sudden start keeping secrets from each other? You told me a long time ago that you liked women too. It's not a big deal at all. What kind of secret is this that you're begging me to just completely forget what I heard? What happened over the weekend?\"\n\nAmy looked at me and thought for a moment, finally saying softly, \"I'd rather not say.\"\n\nJill was taken aback. \"Why are you shutting me out like this? Being evasive is just making me want to know even more.\"\n\nAmy's tenseness was rising significantly as she said, \"Please, Jill. I just can't tell you right now. It's as simple as that and I'd like to stop talking about it now please.\"\n\nJill was unwilling to give up. \"Does your mom know who she is?\"\n\n\"No.\"\n\nJill sighed and was about to ask another question when Amy pleaded, \"If you really are my best friend and you love me like you say you do, you'll let this go.\"\n\nJill stood and walked to the stove and leaned against it with her back to us and sighed loudly. Amy and I followed her with our eyes as she stood there and shook her head. Finally, she stood up straight and turned to face us, eyeing us suspiciously. She asked very softly, \"Don't you trust me anymore?\"\n\nA single tear escaped from Amy's right eye as she said, \"I do. But I just can't share this with you. And that's final.\"\n\nJill was growing even more agitated. \"What?! What the hell? Did you do something illegal or something? Are we gonna have police showing up at our door, because let me tell you right now if I never have to see another police officer that won't do shit to help me it would be awesome.\"\n\nAmy's sobbing started to take hold as she said, \"Jill, please! I swear it was nothing illegal. Can you please just let it go?!\"\n\nJill decided to change her tactics. \"Will you ever tell me, or just not right now?\"\n\nAmy immediately grabbed the olive branch. \"Yes! I will tell you everything when I can. I promise.\"\n\nJill walked over to Amy and looked down at her. \"Alright, fine. I'll let it go for now. I promise not to mention this to anyone. But I won't just forget about it. Just promise me that whatever you did isn't going to somehow cause any trouble for us. I'm already worried out of my mind that Scott's going to start showing up here after all the crazy texts and voicemails he sent. Just... hold on, listen to this shit.\"\n\nJill walked over to her purse and pulled out her phone. She tapped the screen a few times and we all listened as Scott said loudly and angrily:\n\n\"You fucking cunt! If you think for one minute that we're through you have a real rude awakening coming. FUCK YOU BITCH!\"\n\nAmy gasped loudly and Jill tapped a few more times and this time Scott had this to say in an extremely pleading voice that sounded to be on the verge of tears:\n\n\"JJ please take me back! I didn't mean that shit I said earlier. I love you! I need you in my life! PLEASE DON'T DO THIS!\"\n\nI said, \"Holy shit.\"\n\nJill snorted and said curtly, \"Yeah, holy shit. I can really pick 'em, can't I?\"\n\nShe turned her phone around and showed us the screen. There was a little red number \"17\" above the phone icon and a \"96\" above the message icon. She said, \"He left all those voicemails and texts before I blocked him. I haven't even listened to them all yet because I'm too scared to. I'm keeping them as evidence in case I need to file a restraining order. It's like it's happening all over again!\"\n\nI made a mental reminder to ask Amy about Jill's Facebook stalker later. Her last comment and the earlier one about the police not helping her had to be related to that.\n\nAmy sniffled and said, \"I had no idea he was such a fucking psycho!\" She got up and embraced her friend and held her tightly. Now it was Jill's turn to begin sobbing.\n\nAmy said in a low voice, \"I promise that what happened this weekend won't cause any problems for us. There is nothing for you to worry about. And I will tell you when I can.\"\n\nJill nodded and they just held each other. Finally, she laughed and said, \"I guess we're not eating now.\"\n\nAmy giggled and said, \"Not the food.\" That caused Jill to laugh briefly and really start sobbing. Through her tears, she said, \"I'm so glad you're home.\" Amy nodded and held her.\n\nI stood there a few feet away not knowing what to do. I figured it was best to remain silent.\n\nAmy whispered, \"I guess you need protecting now.\" Jill nodded but said nothing, never opening her eyes.\n\nI walked around them and went into Amy's room and grabbed the box of tissues that was next to her makeup. I brought them back and pulled out several and whispered to her, \"JJ?\"\n\nJill looked at me very briefly, took the tissues and said, \"Thanks.\"\n\nShe wiped her face and nose and whispered to Amy, \"Why can't I find someone like him?\"\n\nAmy laughed slightly and said, \"Well at least that's what I wanted to talk about...\"\n\nJill laughed and wiped her face and said, \"I know. I'm sorry for screwing everything up again.\" She sighed deeply and broke her embrace with Amy and slouched down in her chair. \"Let's go ahead and get that over with.\" She sniffled and looked at me. I handed her the box of tissues and she smiled.\n\nAmy and I sat back down and she wiped her own face as well. Finally, she breathed deeply and blurted out, \"I don't know how to ask this so I'm just going to. Are you trying to steal Danny from me?\"\n\nJill gasped and it was her turn to be shocked into silence. She recovered a moment later and said, \"I guess I deserve that.\"\n\nJill leaned forward and took Amy's hands in hers. She said, \"I know I have no excuse for what I did. I was so tired of being treated like nothing but a fucking sex toy and along comes Mr. Perfect over here with his flowers and wonderful compliments and the dish washing and I guess I just went a little overboard. I admit it, OK? I haven't been able to stop thinking about him. I just wanted to finally be treated right for a change, and every word out of his mouth was perfect. It was a constant reminder of everything I wasn't getting.\" She looked down and started lightly sobbing again.\n\nAmy looked over at me and I asked, \"Should I leave?\"\n\nJill snapped her head up and said, \"No!\" She lowered her voice and continued, \"No. I want you to hear this. I want to say it all in front of you and try to get this all out of my system.\"\n\nI said, \"I think you have me built up as this perfect guy and I'm really not. Not at all. I have lots of flaws and I'm sure there's a million things about me you wouldn't like if you knew me better. You could find someone way better than me.\"\n\nJill said solemnly, \"I don't think so.\"\n\nAmy squeezed Jill's hands and said, \"It's true. You're so beautiful and you're such a nice person. There's no way you can't find a great guy that will treat you right. Do you know this bum over here hasn't even taken me out to a proper dinner yet?\" She giggled.\n\nJill smiled and said, \"Yeah, you guys seemed to go straight to sex pretty quick. I was wondering how that wound up happening.\"\n\n\"He sort of has a way with words.\"\n\nJill laughed heartily and said, \"You're telling me! Like the smooth way he told me I had beautiful breasts the other night. Isn't that right?\" She stared at me straight in the eyes.\n\nAmy giggled and said, \"Yeah, exactly like that.\"\n\nI felt a momentary surge of guilt and asked Amy, \"Oh, she told you about that?\"\n\nAmy nodded and said, \"Yep. I kept waiting for you to tell me and you seemed to conveniently leave that part out.\"\n\n\"I didn't want to tell you because you were already so upset. I was in enough trouble as it was without throwing gas on the fire,\" I said in my defense.\n\nThey both giggled now and Amy said, \"That was the right call. See, you're learning. Slowly. But learning.\"\n\nI sighed and rolled my eyes. As usual, everyone is smarter than me.\n\nAmy turned back to Jill and asked, \"So then you do have a crush on him?\"\n\nJill's eyes widened for a moment and said, \"You're starting to sound like him.\"\n\nShe looked back at me and asked, \"What was it you said, something like cutting through the bullshit philosophy or some pretentious crap like that?\" She giggled.\n\nI laughed and said, \"I guess.\"\n\nAmy didn't laugh and said, \"You didn't answer yet.\"\n\nJill looked down again and said, \"OK, yes. I guess I have a bit of a crush on him.\"\n\nAmy sighed deeply and said, \"Alright, thank you. Well, he's taken and you can't have him.\" Jill was still looking down and Amy turned to me and sarcastically rolled her eyes at me, which I took to mean, Yeah, taken by at least four other women. I just shrugged my shoulders in response.\n\n\"I realize that,\" Jill conceded.\n\nAmy looked back toward Jill and asked, \"So you'll stop it with all the flirting?\"\n\nJill looked up and shrugged slightly and said, \"Well... Honestly, I don't know. I'm a naturally flirty person. It would be super hard to just stop being me. I promise I won't try to seduce him though.\"\n\nShe giggled and added, \"Although now that I've almost seen him in action, it'll be hard.\" She paused and said, \"Er, difficult, I mean.\"\n\nAmy giggled and said, \"See now that's not helping me feel like you're gonna stop it with this shit.\"\n\nJill relaxed back in her chair and said, \"So there's no chance for a little three-way action?\" She looked at me and winked.\n\nAmy gasped and said loudly, \"No, Jill, there isn't! Why would you say something like that?\"\n\nJill said nervously, \"I just thought I'd put that out there since you guys did that already. I didn't want to miss my chance if there was one.\"\n\nWith rising anger, Amy said, \"If I said yes to that, it would never be the end of it, would it? It would start with just one time, and then somehow you'd talk me into a second, and boom, he's breaking up with me.\"\n\nI said, \"That wouldn't\u2014\"\n\nAmy shot me a fierce look so I stopped talking abruptly.\n\nJill said defensively, \"No! That is not how it would go. Don't you remember when Gina and Paul let me play with them a few times? I didn't wind up breaking them up. They're married now and have a baby! I even went to their wedding!\"\n\nAmy sighed deeply and said, \"Yeah... How could I forget? You couldn't stop talking about that for weeks.\"\n\nJill leaned forward and took Amy's hands again. She looked her in the eyes and said, \"Just think about it. I know it was probably wrong of me to ask, but then all of this Sandi business happened. Plus then I saw him naked and that didn't help matters at all.\" Jill glanced at me again quickly and smiled, causing Amy to sigh again.\n\nAmy snipped, \"Please don't remind me of that. I'm trying to block it out of my mind.\" She looked at me briefly and said, \"I already know what your answer is.\"\n\nI sat up straight in my chair and looked between them and said seriously to Amy, \"No, I don't think you do. I made a promise that I wouldn't do anything to mess things up between you and me, and having a threesome with Jill is out of the question.\"\n\nI turned to Jill and said, \"Jill, you are a beautiful woman and I would love to have sex with you, but I can't do it. I hope we can find a way to still be friends, but if you don't think you'll be able to get over the feelings you have, it would probably be best if we didn't see each other again. My life is already way too complicated to throw something like that into the mix.\"\n\nA deafening silence took over and both Amy's and Jill's mouths hung open in shock.\n\nThey looked at each other and then Amy looked at me and said softly, \"I love you.\"\n\nI grabbed her hand and squeezed it tightly. \"I love you too.\"\n\nJill shifted uncomfortably around in her chair and looked at Amy and nearly whispered, \"Wow I... I don't even know what to say.\" She looked at Amy and asked, \"And you told him? When did that happen?\"\n\nAmy said, \"Yesterday, and he said it first. I was waiting to tell you when the time was right, but I guess it's out there now.\"\n\nJill reached across the table with both of her hands and surrounded mine and Amy's with them. Finally, she breathed deeply and said, \"Alright. I'm really sorry for everything. I'm making a promise right now to both of you that from now on I'll be good. I'm going through a rough time right now and I guess it's affecting my judgment. I do love you Aims and I promise I'll never hurt you. If you can somehow find it in your heart to forgive me I'll do everything I can to rebuild the trust I've so stupidly lost.\"\n\nAmy sniffled back some tears and said, \"I just wish you would've told me everything about what was happening with you and Scott and how it was making you feel about Danny.\"\n\nJill looked teary-eyed again. \"I didn't want to upset you. You were so happy all last week. I didn't want to burden you with my shit. And there was no way I could tell you what I was thinking about him. It was just too embarrassing.\" Jill squeezed my hand and I put my other hand on top of hers and squeezed it as well before letting go again.\n\nAmy took in a huge breath and exhaled. \"Well, I think that's all I wanted to talk about.\"\n\nI glanced at the clock on the microwave and said, \"I need to make a quick call to work.\" I got up and went outside and spoke with Kayla briefly, explaining that I would be late coming back to work.\n\nI hung up with her and dialed Sandi's number. I never even heard a ring, just Sandi asking, \"Are you alright? How did it go?\"\n\n\"It's still going. But I think everything is pretty much resolved now. We did have an unfortunate thing happen though. She caught us in bed and overheard Amy say your name. That caused a few uncomfortable moments and Jill threw out the suggestion of having a threesome.\"\n\nSandi blurted out, \"She what?!\" She thought about it for a second and added, \"I have to admit that I'm impressed by just how brazen that was.\"\n\nI briefly explained the situation with her ex-boyfriend and she said, \"Ohhhhhh... I hope he calms down and leaves her alone. But her behavior actually makes a lot more sense now. I feel sorry for her; Poor girl... I guess I'm OK with you telling her that you're in an open relationship, but don't share any other details. We were really lucky with how accepting Amy was, but the more people that know who I am the more dangerous it becomes.\"\n\nI agreed and then told her about my little refusal speech. She said boastfully, \"Do you have any idea how proud of you I am right now? That is how a man behaves. Just wait until I tell Deanna.\"\n\nI smiled widely. \"I just didn't want to let you down and wanted to prove that I could do the right thing when it really mattered. I could never have done any of this if it weren't for you and everything you've taught me.\"\n\nSandi giggled and said, \"Oh stop it before you make me start blubbering like a two year old.\"\n\nWe talked for a few more minutes and ended the call. I felt invigorated and actually pumped my fist in the air before taking a deep breath and going back inside.\n\nWhen I got back to the kitchen, Jill had moved to my seat and was tightly embracing Amy. They weren't saying anything so I felt it was best to leave them alone.\n\nI decided to try to save the food before it went completely bad and began gathering it up and putting it back in the containers from the restaurant. I sealed everything up and rearranged some things in the fridge and stacked it all inside neatly.\n\nBehind me I heard some whispering and when I turned I found them both staring at me. Jill turned to Amy and said softly, \"How am I supposed to resist him if he keeps doing stuff like that?\"\n\nAmy giggled and said, \"I don't know. Frequent masturbation maybe?\"\n\nJill gasped loudly and looked at me and blushed. She looked back at Amy and said, \"You bitch! Now you're just rubbing it in.\"\n\nI couldn't help myself and quickly said, \"Actually, I think you'll be rubbing it in.\"\n\nThey both burst out laughing and Jill leaped up and charged me. She caught me off balance and rammed me into the fridge. She playfully punched me in the stomach and then hugged me. She said in a high-pitched voice, \"You're so mean!\"\n\nI looked at Amy and held my hands up. She shrugged and said, \"Oh, fuck it. Go ahead and hug the shit out of her.\"\n\nI laughed and wrapped my arms around her tightly and squeezed. I lifted her off the ground and pressed her into me, feeling the swell of her breasts pressing against my chest. The fragrance of her sweet shampoo invaded my senses and I felt my cock leap forward in my pants. I could feel her breath on my neck as she rested her head on my shoulder and let out a soft moan. I felt an immediate pang of guilt and slowly put her down.\n\nShe whispered in my ear, \"I can feel that you know!\"\n\nI sighed and closed my eyes. \"Well, I'm only human.\"\n\nWith my eyes still closed, Jill quickly snuck a kiss on the lips, causing me to gasp and jump back in surprise. Amy snapped, \"Don't push your luck, Jillian.\"\n\nJill went and sat back down and giggled. She said to Amy, \"Sorry about that. I was just getting you back for embarrassing me.\"\n\nAmy took a deep breath and stood. \"Yeah right. So I guess that's it.\" Jill stood back up and said, \"Yeah, I need to get back.\"\n\nThey embraced and Amy said, \"Before you go I want to show you something, and I have some news too.\"\n\nAs Amy left, Jill came over and held out her hand. I smiled and took it and said, \"I need to tell you something when Amy gets back.\"\n\nJill let go of my hand as Amy came back into view. She had her necklace on and was smiling. Jill instantly spotted it and gasped, putting her hand over her mouth.\n\nShe rushed over to her and said, \"Holy shit that is beautiful. What kind of stone is that?\"\n\nAmy said, \"It's a blue diamond.\"\n\nJill looked at me and shook her head in disbelief. She said to Amy, \"You deserve it.\" They embraced again.\n\nI came up behind them and said, \"JJ, I wanted to tell you that Sandi isn't just a random woman we found.\" Jill looked at me expectantly and Amy held onto her tightly.\n\nI went on. \"We're in an open relationship with her.\"\n\nJill inhaled sharply. \"You're WHAT?! God this just keeps getting better!\"\n\nJill turned to Amy. \"He has two girlfriends? And you're OK with that?\"\n\nAmy smiled and said, \"Yes, I'm OK with it. Jill, she's amazing and wonderful.\"\n\nJill shook her head in disbelief. She said softly, \"Well, it's clear that you're happy. I don't remember a time since I've known you that you seemed so... content.\"\n\nAmy nodded. \"But I need to let you know that for the next two weeks I'll be staying the night at Danny's house.\"\n\nJill said, \"Wow, two weeks? OK... Are you going to be home at all?\"\n\n\"Oh yeah, I'll be home during the day. I'll be able to have breakfast with you and Sammi every day.\"",
        "Jill smiled and asked, \"And will Danny be coming to breakfast?\"\n\n\"He might. So you better be on your best behavior.\"\n\nJill said, \"I just wanted to know how much bacon I'll need to be making.\" She giggled and I said, \"Oh yes, please make all the bacon.\"\n\nAmy smiled and elbowed me in the stomach. \"If you keep eating all that bacon you're gonna start getting fat.\"\n\nI doubled over in pretend-pain and said with a weakened voice, \"Ow! Maybe, but I'd be a very happy fat man.\"\n\nJill giggled and said, \"Well, at least that's one thing I can do for him since I'm assuming I'm not getting invited in on this open relationship thing. Right Aims?\" She smiled sweetly and made the cutest puppy dog face I've ever seen.\n\nAmy grabbed her face with both hands and said, \"Grrrr, what am I going to do with you?\" She softly shook Jill's face and then squished her cheeks together and they both giggled.\n\nAmy let go and Jill put her hand under her chin and said mysteriously, \"I have some ideas. Like this.\"\n\nJill grabbed Amy's head and quickly kissed her right on the lips. She kept her face about an inch away from Amy and smiled. Amy was surprised but didn't flinch or pull away.\n\nInstead, she just shook her head, sighed and said, \"You're really pushing it. You should go.\"\n\nJill gathered up her purse and keys and said to me, \"See ya tomorrow Danny. You will be here, won't you?\"\n\nI said, \"As long as you behave and make bacon, I'll be here.\"\n\nShe giggled and said, \"I kinda like the idea of being your little bacon slave. Will you still wash the dishes for me?\"\n\n\"That's the least I can do.\" I laughed.\n\nJill smiled widely and said, \"You're something else, Dishwasher Man. I'll see you guys later.\"\n\nAmy said, \"I'll call you when I get there tonight so you won't worry.\"\n\nJill nodded and finally she was on her way out the door.\n\nWhen we were finally alone, we both looked at each other and I asked, \"What was that about? She kissed you!\"\n\nAmy shook her head and said, \"Yeah, well, we've kissed a few times before. It was just something fun to do in front of guys at parties. I was more pissed off that she kissed you. Bitch.\"\n\n\"I wouldn't call it much of kiss. More like a sneak attack.\"\n\nAmy giggled and looked down at my crotch and said, \"Well it looks like that sneak attack had its intended effect.\" She squeezed my rock-hard cock through my pants and I closed my eyes and moaned softly.\n\nShe got close to me and whispered sexily, \"You'd love it if she sucked your hard cock right now, wouldn't you?\" She squeezed it harder and I gasped. \"Wouldn't you?\"\n\nAmy whispered, \"Let me hear you say it. Jill, suck my cock.\"\n\nI opened my eyes and looked into hers and said, \"Jill, suck my cock.\" She smiled and I felt her slither her way down, unsnapping and unzipping my pants and pulling them down. She pulled my underwear down and my cock sprang straight out from my body.\n\nAmy quickly engulfed my cock with her mouth and started sucking me enthusiastically. After a minute or so, she pulled away and continued jerking me off with her hand. She looked up at me and directed, \"Tell Jill you're gonna cum on her face!\"\n\nI hissed, \"Jill, I'm gonna cum on your face!\"\n\nAmy started sucking again and as soon as she knew I was about to blow she backed off and rapidly jerked me off. I moaned and shouted, \"Oh Jill!\"\n\nAmy leaned her head back and closed her eyes and opened her mouth as cum began flying out of my cock. The first rope shot completely over her head and onto the floor. The cum just came gushing out of me, spraying into her hair and onto her forehead until she repositioned herself to make sure the rest went into her mouth. She cried out, \"Oh my God!\" I snapped my eyes open and looked down and saw the unmistakable signs of her own orgasm and what could only be described as a sea of cum all over her head and face.\n\nIt was everywhere. It was dripping down her chin and onto her shirt and the floor. She quickly stood up and ran to grab some paper towels to wipe her eyes, leaving me standing there gulping down huge amounts of air. For a couple minutes, it seemed like my hearing stopped working at a hundred percent and I thought I might be close to passing out. I stumbled backwards and did my best to not fall and leaned against the closest wall.\n\nAmy came over and looked at me and asked, \"Are you still with me? You look like you're about to fall over.\"\n\nI nodded but didn't speak and she said, \"I think you just about drowned me in cum. Or I guess I should say you drowned Jill in cum. I have to see this.\"\n\nShe left me standing there and walked to her room to look in the mirror. From the distance she shouted, \"Holy shit, I look like a glazed donut!\" She laughed loudly and soon after that I heard the faucet in the bathroom turn on.\n\nShe came back with a wet washcloth and wiped me off. She looked at the floor and giggled. \"Oh my God, look! There's some way over here!\" She bent down and wiped the floor.\n\nI slumped down and slid down the wall until I was crouching on my knees. I heaved a sigh and said, \"I really needed that.\"\n\nAmy looked back at me and said, \"I could tell.\" She took the washcloth over to the kitchen sink and rinsed it out. She came back over and said, \"We should jump in the shower real quick. You shouldn't go back to work smelling like cum, and I need new clothes.\" She giggled and lifted her shirt, revealing little spots of cum all over her bra and wet skin on her chest.\n\nShe offered her hand and helped me to stand up. I kicked off my shoes and socks and we quickly got undressed and got into the shower. In a few minutes, we had rinsed off and gotten out.\n\nWe took our towels and dried off in her room and sat down on her bed. Amy looked at me and said, \"I guess there's no doubt left now.\"\n\n\"About what?\"\n\nShe said, \"That you want Jill.\"\n\n\"Oh.\"\n\nShe nodded and said calmly, \"So is me pretending to be her enough for you?\"\n\nI grabbed her hand and looked into her eyes. \"Don't do that. I don't want her over you. I want you. Just you, Amy. Do you hear me?\"\n\nAmy shook her head and said dejectedly, \"You never came like that for just me!\"\n\n\"What do you mean? Did you think I didn't know that was you the whole time? Come on, give me a little credit. The only reason I was so turned on is the way you were acting. You! The way you were, it was just so... wanton. I would have cum like that even if you hadn't pretended to be her. And for the record, I have cum like that before with you. More than once, actually. It was just inside you.\"\n\nAmy sighed and softly said, \"Oh.\"\n\nI said, \"Nothing and no one is going to come between me and you now. I am in this with you, understand? I know there will be bumps in the road like this Jill thing, but hopefully we'll get through everything as a team. I love you and there's nothing you can do about it. When we're 80 we'll look back on this day and laugh hysterically at how silly all this stuff is.\"\n\n\"You really think we'll be together that long?\"\n\n\"I sure hope we will.\"\n\nShe was quiet for a moment and then said softly, \"You should get back.\"\n\n\"But I don't want to leave you.\"\n\nShe squeezed me tightly and said, \"I know...\"\n\n<center>*  *  *</center>\n\nSandi seemed nervous. It was nearly time for Amy to arrive and she was pacing around the living room, glancing out the front window repeatedly watching for her car.\n\nFinally, I said, \"Come on, sit down. You're even making me nervous.\"\n\nShe didn't sit down and said, \"Shouldn't she be here yet? I'm getting worried.\"\n\n\"I'll see where she is.\" I pulled out my phone and started up the Find My Friends app and located her. Sandi came over and stared at the screen with me.\n\nI laughed and said, \"She's in the driveway.\"\n\nSandi ran to the door and opened it and waited expectantly.\n\nAmy came in and hugged Sandi. \"Sorry I'm late. I had to stop off at home to give Jill the money and I got stuck talking to her and Sammi. Here's my deposit slip.\"\n\nSandi looked at the slip briefly, handed it back and said, \"I was worried. This must be what parents feel when their kids don't get home when they're supposed to.\" She giggled.\n\nAmy frowned and said, \"I'm sorry, I should have called. I was just in such a hurry I didn't think about it.\"\n\nSandi sighed and said, \"I'm just glad you're here now and you're OK. Are you ready to get started? Do you want something to drink? Maybe a bit of red wine? I know I could use some.\"\n\n\"Oh... OK, sure.\" She laughed nervously.\n\nWe all sat down and had a couple glasses each and discussed what had happened earlier that day. When I mentioned that Jill had kissed Amy, Sandi took notice. She said, \"Maybe Danny's not the only one she has a crush on. Have you two fooled around before?\"\n\nAmy giggled and said, \"Not really. We've kissed a few times at parties for fun, but I think today she was just messing with me in front of Danny. It was probably mostly for his benefit.\"\n\nSandi let it go for now and completely changed the subject. \"Have you spoken to your mother today? What's her name, by the way?\"\n\n\"It's Lisa. My dad's name is Tom. I spoke to her when I was on break right after I talked to you.\"\n\nSandi asked, \"Good, so we're on for Danny to visit them the next two weekends?\"\n\nAmy smiled and said, \"Yep, all set. They're excited to finally meet him after how much I've talked about him all these months. I suppose that's going to take him away from being with all of you though.\"\n\n\"Well, yes, but that was the plan. I'll be going to Dee's house and spending the weekends there with them while you two are with your parents. But we'll talk every night on the iPads.\"\n\nI said, \"I did the directions and their house is only a little over a mile away from Mom's house. I guess if things go horribly wrong I can just walk over there.\" Everyone laughed.\n\nSandi said, \"I'm sure you'll be fine.\" Amy quickly followed with, \"Yep, they're nice. I'm sure we'll all get along fine.\"\n\nSandi said, \"Well, alright, let's get started with our first lesson.\"\n\nWe stayed up until midnight with Sandi coaching Amy on ways to boost her self-confidence and began to give her tips on how to be forthright and direct without coming across as confrontational or smug. She explained that remaining calm and focused in an argument is far more effective than becoming upset. The one thing that Sandi said that really resonated with me was that once you've lost control of your emotions, you have lost the argument.\n\nAs the night went on and the wine started to get me more than a little drunk, I looked over at Amy and finally worked up the courage to ask the questions that had been gnawing at me. \"What if I don't want you to have sex with your dad? Would you still go through with it?\"\n\nAmy blinked at me in confusion and said, \"What? I thought you were OK with this. It's what we discussed before.\"\n\nI said, \"Well nobody ever asked me if I was OK with it. What if I'm not OK with it?\" I felt like I was right at the edge of slurring my words.\n\nSandi looked at me and then back to Amy. \"Well, I guess he's right. We never did ask him.\" She looked back at me and asked, \"So you're not OK with it?\"\n\nI wasn't thinking very quickly and just said, \"Are you gonna leave us for them if it happens?\"\n\nAmy gasped and said, \"No, of course not! I think you've had too much to drink.\"\n\nI blurted out, \"I can't shtand the thought of Tom being on top of you fucking you. I'm shorry I just can't.\" The slurring had begun.\n\nSandi snapped, \"Daniel, close your mouth now before you regret it. You're acting like a spoiled brat!\"\n\nAmy said calmly, \"No, let him talk. I want the truth.\" To me she said, \"If you don't want me to do this, I won't, but we have to find some way to tell them that we're in a relationship with your aunt.\" For added measure she said with more than a hint of sarcasm and spite, \"And oh yeah you're also fucking your mother, sister, and grandmother.\"\n\nI could feel my face heating as anger surged within me. \"I don't want you to do it! We have to find shome other way. If I can't have shex with Jill, you can't have shex with him!\" I giggled and added, \"But I'd shure love watching you do shtuff with your mom! Hey maybe we could even have a little three-way action! Is she hot?\"\n\nAmy groaned loudly with disappointment as Sandi stood up and came and got right in my face. \"Quiet! Get control of yourself right now!\" She grabbed the wine glass from my hand and went and got a glass of water.\n\nShe handed me the water and said, \"Drink! And not one more word!\"\n\nWith my head spinning I drank down all the water. She refilled it and I drank another glass.\n\nDuring all this Amy was silent, lost in thought. While I was drinking she said, \"Maybe he's right. Maybe it's best if this is just left as a fantasy. I guess I never thought of how it would make him feel if I really did go through with having sex with my dad.\"\n\nI sat there and listened to the words she said and slowly but surely my brain started working again. I took a deep breath and said, \"I'm sh... sorry. I guess I went a little too far with the wine. I'm really not used to it.\" I felt my stomach lurch and said softly, \"Ugh, I don't feel so good.\"\n\nSandi looked at me with alarm and shouted, \"Up! Now!\" She leaped up and grabbed me by the hand and pulled me up.\n\nShe quickly ran me to the bathroom in the hall as my stomach began really churning. She grabbed the toilet seat and slapped it up just in time for me to collapse to my knees in front of it and unleash a huge torrent of vomit as my stomach violently expelled its contents.\n\nAfter a few minutes it tapered off and I sunk to the floor as the room slowly spun. Sandi flushed the toilet and I looked back and Amy was in the doorway with a glass of water. Sandi took it from her and looked at me and asked, \"Is there any more coming?\"\n\nI shook my head weakly and she said, \"Alright, sit up and drink this water. I feel so stupid for letting you drink that much wine. Dee's gonna be so pissed.\"\n\nI scooted over and leaned against a cabinet under the bathroom counter and looked up at Amy. I said, \"I'm really sorry. I didn't mean what I said. I do want you to be able to have your fantasy come true.\"\n\nShe came and sat down next to me. She said very evenly, \"I don't think you're being honest with me or yourself. I think what you said earlier was how you really feel. And while some of the things you said were completely crazy, like the watching me with my mom part, what you said about me being with Dad really made me reconsider. I think I should just let that go and try to find some other way to tell them about Sandi.\"\n\nFrom above us, Sandi said, \"I have to admit that I wasn't wild about that idea either. I think even I would feel pretty jealous if it really happened, and who knows, what Danny said about you leaving us might be true.\"\n\nI drew my knees up to my chest and leaned my head forward to try to slow down the spinning. Sandi sounded alarmed when she asked, \"Is more coming?\"\n\nI quickly looked up and shook my head. \"No, no, I'm OK now, but the room's spinning a little.\"\n\nSandi sighed and put the toilet seat and lid down and sat down on top of it. She said, \"OK well just warn me if you feel anything. Drink some more water please.\" I did as told.\n\nAmy said snarkily, \"So you'll let me be with Dad if I let you be with Jill, huh? It always comes back to her.\"\n\nI said, \"I'm really sorry. I feel like an idiot for saying that.\"\n\nAmy smiled and said, \"Yeah, you need to let the idea of being with her go. I mean, she just broke up with somebody and I'd really like to focus all my energy on this relationship.\"\n\nI nodded and she went on after a brief pause. \"So why didn't you speak up before if you didn't want me to do it? I mean, it seems like every other time you had no problem at all saying what you wanted to say even though it had to be really hard.\"\n\nI thought it over and finally said, \"I know. I had a lot of thoughts going through my mind about it. On one hand, I wanted more than anything to see you happy and get what you wanted. You've had this fantasy about him all these years and here we were talking about trying to make it happen, and I thought hey, if that happened you'd be able to have something you really wanted come true, just like I did.\"\n\nI took a short breath and went on. \"But then on the other hand, I knew that while it sounded really cool as an idea, if it actually happened there could be several downsides. For one, it might somehow damage your parents' marriage. How would your mom take it? Would she be OK with her daughter having sex with her husband? There was no way we could hide it from her and try to get him to cheat on her with you. That's just crazy. And to assume she would just go along with it and not get jealous or angry, even if those feelings didn't come out until sometime in the future... Real life doesn't work like it does in a fantasy. People can and do get their feelings hurt in ways that may not be immediately apparent. She could wind up hating you. It's always a worry for me that my dad will get tired of all this and hate me. And then there was the thought of him having sex with you. I know it's not fair for me to feel like this, but I would be really jealous that my girlfriend was somewhere having sex with some other guy. And maybe you would somehow fall in love with him and leave us.\"\n\nAs I was talking, I was looking into her eyes and she periodically nodded her understanding. When I got to the end, she said simply, \"I'm not going to stop loving you.\"\n\nI asked, \"How do you know that for sure?\" I sighed and added, \"Just the thought of it really happening fills me with fear and anxiety. So I just had to say something before it all got way out of control. I can't bear the thought of losing you.\"\n\nAmy hugged me close and said, \"I guess it turns out that you're human after all. You need to always tell me what you're thinking even if you think it'll make me unhappy.\"\n\nSandi softly said, \"Very well said, and I'd like to tell that to both of you too. I always want to know what you're thinking, even if you think it might hurt my feelings. We have to have trust if we're going to make this work.\"\n\nAmy said, \"I promise I will.\" I nodded and said, \"Me too.\"\n\nSandi's expression changed to one of nervousness. \"I suppose since we're here all alone and we're speaking honestly, I need to make a confession of sorts to you Amy.\"\n\nAmy looked up at her questioningly and Sandi went on. \"I... I want to share something about myself with you that very few other people know.\"\n\nShe sighed and appeared to be gathering her courage. She slid down to the floor and sat in front of Amy and held both of her hands. Amy looked at her expectantly and Sandi went on. \"A long time ago I figured out that I have a fetish. I...\"\n\nShe looked down and Amy glanced at me knowingly very briefly. I leaned forward and gently placed my hand on top of one of Sandi's in support. She looked up and smiled at me and then looked back at Amy. \"Have you ever heard of something called watersports?\"\n\nAmy sighed and smiled. \"Yes, I've heard of that.\"\n\nSandi looked confused and asked, \"Why are you smiling?\"\n\nAmy squeezed Sandi's hands and said, \"I had a short talk with Danny yesterday and he told me a few things.\"\n\nSandi looked back down and said softly, \"Oh.\" She looked at me and asked, \"What did you tell her?\"\n\nI was about to speak but Amy interrupted and said, \"I had my suspicions ever since you had me pee in front of everyone the way you did. And then you stayed in the bathroom with me while I pooped. Twice. I can't tell you how odd I thought that was. But I did it because I was trying to be comfortable with you since you didn't seem to have any problems doing anything in front of me. I think Danny realized what was happening so we had a short talk about it. He told me what you've done with him.\"",
        "Sandi sighed loudly and visibly relaxed. \"And? You're still here so I guess you weren't completely disgusted...\"\n\nAmy went on. \"Well, honestly it's not my thing, but that doesn't mean I'm just going to bail and run away. You're way too amazing for me to let something like this scare me off.\"\n\nSandi said, \"You're pretty amazing yourself.\"\n\nAmy smiled and Sandi asked hopefully, \"So... Do you think you'd ever... play with us when we did that sort of thing?\"\n\nAmy said thoughtfully, \"I guess it would depend on what was involved in playing...\"\n\nSandi smiled and said, \"Well... Do you think you might allow me to wipe you after you went?\"\n\nAmy giggled and said, \"So all I have to do is... nothing?\"\n\n\"Exactly.\"\n\nAmy said, \"I'm pretty sure I could handle that.\" She paused a moment and then said, \"Listen, I'm thinking I could probably handle doing any of that kind of thing just as long as I don't have to have it in my mouth or get poop on my hands. How's that for being direct?\"\n\nSandi sighed deeply and said, \"That's perfect. You told me exactly what I wanted to know. I guess tonight's lesson was a success.\" She giggled.\n\nSandi looked at me and said softly, \"I want you to know that I appreciate you telling her. But I wish you would've told me you did. You have no idea how much anxiety I've been feeling trying to find the courage to tell her.\"\n\nI said, \"I was going to tell you when I had a chance. I didn't realize you were going to tell her so soon. I just saw what you were doing and felt like it was better to be honest about why it was happening.\"\n\nSandi inhaled very deeply and said, \"OK, fine. You have no idea how much a relief it is to have everything out in the open.\"\n\nAmy asked, \"So, no more secrets now?\"\n\nSandi looked at her and said, \"That's it. You know everything now.\"\n\nAmy nodded and there was a long silence as everyone took a breath. Finally, Amy looked at me and said, \"Oh, and by the way my mom is pretty attractive. You asked earlier if she was hot. See for yourself.\" She reached into her pocket and pulled out her phone. She showed us about 10 different pictures of her parents. Lisa Patterson looked like an older version of Amy, plus about 15 more pounds. She wasn't nearly as thin as Amy but she still was in pretty good shape for being in her 40s. I noticed almost immediately that her breasts were at least D-cups whereas Amy's were only in the B range. Almost echoing my thoughts, Amy looked at me looking at the pictures and giggled, \"Yeah, her boobs are a lot bigger than mine. She always told me that mine would get bigger after I had babies.\"\n\nSandi looked as well and said, \"I think she's very pretty. Your dad's a handsome devil too. But you, my dear, are stunning. Don't worry that you don't have DD boobs. Trust me, having smaller ones means less sagging later in life. And I think your breasts are beautiful.\"\n\nI said, \"I think so too. You should be proud of them. They are perfect to me. They're totally proportional to the rest of your body.\"\n\nAmy leaned over and embraced me. She said, \"Thanks. I'm always self-conscious of having smaller breasts. I appreciate the kind words.\"\n\nI said, \"But your dad looks like a pretty scary dude. I sure wouldn't want to be on the other end of a fight with him.\"\n\nAmy laughed and said, \"Oh no you would not; He would kick your ass. He was big into wrestling in college and knows all kinds of ways to get you on the ground and then pound you into submission.\" I made a mental note to not piss off Tom Patterson if I could help it.\n\nAmy sighed and looked up at Sandi. \"But I've pretty much decided that the plan to try to seduce my parents is off. We'll have to come up with another way to tell them about you.\"\n\nSandi smiled and said, \"I'm very relieved to hear you say that sweetie. We'll brainstorm and come up with something else. If worse comes to worst we'll just keep it a secret. I don't mind being in the shadows to the public as long as you come home to me in private.\"\n\nAmy and I nodded in agreement, and in another 15 minutes or so, we got up and started getting ready for bed.\n\n<center>*  *  *</center>\n\nThe rest of the week proceeded pretty smoothly. The nightly coaching sessions went mostly according to plan and notably no more alcohol was served. Even though the plan to seduce Amy's parents had been abandoned, Sandi continued to work with Amy to be more forthright and to be unafraid to say the things that she really wanted to say. Each session ended with fantastic lovemaking or animalistic fucking depending on the general mood. And as promised, I went to Amy's apartment each morning and had breakfast with Jill and Sammi. It was pretty clear that the sexual tension with Jill was not going away as she continued to playfully flirt with me. Each morning was concluded with a very friendly hug and kiss on the cheek before I left to go to work. Thankfully she was true to her word and didn't try anything that Amy didn't OK in advance. By Thursday morning Sammi decided to get in on the hugging too and everything seemed great. Best of all, Scott had not been heard from again.\n\nThe worst thing about the week had been our general lack of sleep. We'd been staying up late having sex and then getting up extra early to have time to have breakfast with Jill and Sammi, so I was really looking forward to Saturday morning and sleeping in before having to meet Tom and Lisa Patterson.\n\nSometime around 8am I was awoken to moaning sounds coming from next to me. I opened my tired eyes and in the very dim light could barely see Sandi's head but not Amy's. I looked downward and made out the shape of Amy's body underneath the covers. I debated whether to join in or just go back to sleep when Sandi moaned loudly and said, \"Oh God yes!\"\n\nJust the tone of her voice made my cock stir and I moved over and started kissing her. Her hand wrapped itself around my cock and she whispered, \"I want you in my mouth baby.\"\n\nI extracted myself from the covers and slowly moved into position. Sandi made a long slow \"hmmmm\" sound as my cock entered her mouth. I very gently began moving myself in and out of her mouth as Amy continued the assault between her legs.\n\nAll at once the covers were pulled back and Amy twisted herself around and scrunched in behind me. I looked back to see what she was doing and she said softly, \"Put your finger in my butt.\"\n\nI paused my movements for a few seconds while I reached behind me and got my finger wet with Amy's juices. Amy began licking Sandi's clit again and I gently pressed my finger into Amy's tight asshole. Soon, we were all moving in rhythm together.\n\nAmy's hand reached back between her legs and grabbed my wrist, pulling on it. I got the message and pressed deeper into her. She momentarily lifted her face and just said, \"More!\"\n\nI pulled back out and got a second finger wet and slowly pushed two fingers in. This time, Amy moaned very loudly and pressed her ass back against my hand, urging me on. I pressed as hard as I could without hurting her when she stopped again and hissed, \"More!\"\n\nSo I added a third finger. She kept pressing back against me when suddenly I felt her tightly squeeze her muscles and moan loudly. Her powerful orgasm started a chain reaction and Sandi went over the edge too. In turn, I groaned and emptied my cum into Sandi's mouth.\n\nAmy pulled herself up and pushed me out of the way and came up and kissed Sandi passionately, sharing my cum between them. For several minutes, she lay on top of Sandi with me alongside of them.\n\nAmy looked down at me and said, \"Morning, sunshine. Sorry for waking you. I thought we could be quiet.\"\n\nI reached up and kissed her and said, \"I'm really glad you weren't quiet. That was amazing. My fingers didn't hurt you?\"\n\nShe giggled and said, \"Nope, not a bit. I guess I'm getting used to having things up there. I fucking love having my ass filled.\"\n\nSandi giggled and said, \"My God girl, you're something else. I bet you never would've said something like that a week ago.\"\n\n\"I feel like being able to talk this way is the most liberating thing that's ever happened to me. Thank you for all the great lessons.\"\n\nSandi said, \"Just don't go crazy. Don't forget that everyone else still has all of their same limits and will be shocked or even angered if you take it too far too quickly. The key is\u2014\"\n\nAmy interrupted her. \"Discretion, I know. I just can't wait to talk to my mom and prepare her to know all about you. You might be able to live with being a secret, but I really want them to know about you so I can go on and on about you too.\"\n\nSandi smiled and said, \"Well, remember, one step at a time. First Danny, and then we'll decide together when or if the time is right for them to meet me.\"\n\nAmy sighed and said, \"I know. I just want everything to happen right now. But I'll remember to use discretion.\"\n\n<center>*  *  *</center>\n\nBefore we knew it, it was time to go and we were driving to Amy's parents' house. I put on one of my favorite Spotify playlists and cranked it up. Amy and I sang together as we drove along, having a great time the entire way.\n\nBefore we knew it, we were pulling into the driveway of the Patterson home. I took in a deep breath and got out, popping the trunk in the process. I hauled out our two bags and followed Amy to the door. She knocked on the door and opened it.\n\nWe walked inside and we heard in the distance, \"Back here honey!\" I left the bags near the door and followed Amy to the kitchen. There was an overwhelming smell of something delicious cooking and my mouth began watering. We turned a corner and there was Lisa Patterson, standing at the stove stirring something vigorously.\n\nShe turned her head back to us and said, \"Sorry, kids, I can't stop stirring just yet or the sauce will be ruined.\"\n\nShe smiled at me brightly and said, \"Nice to finally meet you, Daniel. Well, you know, except for that night when you walked by our table at the restaurant. Come on now, get on over here.\"\n\nI smiled and walked over to her. She twisted herself slightly and, while continuing to stir, she hugged me. I said, \"It's nice to meet you too, Mrs. Patterson.\"\n\nShe scoffed and said, \"Oh please, Mrs. Patterson is my mother-in-law. It's just Lisa and I do insist.\"\n\n\"Of course, Lisa it is. That's a beautiful name, by the way. It's simple yet elegant.\"\n\nLisa looked back at Amy and giggled. \"Is he always this charming?\"\n\nAmy smiled and said, \"Oh yeah, he's a real charmer all right.\" She looked at me and rolled her eyes. I smiled innocently back at her and she quickly stuck her tongue out so I did too. Since Lisa had turned her attention back to the stirring, she didn't see any of our little exchange.\n\nI asked, \"So where's Tom?\"\n\nLisa said, \"Oh, well he got called out to a job site. Apparently some structural something or other with one of his houses. So it's just the three of us.\"\n\nSometime back Amy had told me that her dad was a general contractor and was in charge of crews that constructed houses. I had really looked forward to meeting him since we had an idea that he might be able to give us some help in finding our houses.\n\nFinally the stirring was over and Lisa said, \"There we go. The sauce is looking perfect. Would you like something to drink?\"\n\nI shrugged and said, \"Some water would be great. If you tell me where the glasses are, I'd be happy to get it myself.\"\n\nLisa looked slightly surprised. \"Well alright then. The glasses are in that second cabinet there, to the left of the fridge.\"\n\nAs calmly as I could, I walked over and opened the door and grabbed a glass. When I turned back, Lisa was sharing the oddest look with Amy. There was a smile combined with the look of surprise, and inwardly I smiled as it seemed like that was a good reaction. Lisa said, \"There's a water pitcher in the fridge. Help yourself, Daniel.\"\n\nI said, \"Please, everyone just calls me Danny. Usually I only get Daniel if someone's upset with me.\"\n\nShe laughed and said, \"Oh, so no one ever calls you Daniel then?\" She giggled sweetly.\n\nI laughed and said, \"Oh, I get called that more than you'd think.\" Everyone laughed.\n\nLisa put a lid on the pan she had been stirring and said, \"Alright, this can just simmer. Let's go out and have a chat in the living room, shall we?\"\n\nI said, \"Cool. Amy, can you show me where I should take our bags?\"\n\nAmy smiled and said, \"Well I'd be happy to, Daniel.\" Lisa giggled.\n\nI grinned and followed her up the stairs. When we were alone, I asked lightheartedly, \"What? Are you upset with me already?\"\n\nShe giggled and said, \"I was just joking around. She likes you. I can tell. So if you could go ahead and avoid trying to get into my mom's panties on the first night, that'd be great.\" Her piercing blue eyes locked with mine and I felt myself shudder slightly.\n\nI laughed and said, \"Well, you know I'm into older women. And she is pretty hot. Nice boobs too.\"\n\nAmy playfully punched me and said, \"Yeah, and she's also married to my dad who can and will whip your ass five ways to Sunday.\"\n\nI stroked my chin and said, \"You do make an excellent point. OK, I'll wait until tomorrow to really turn on the charm.\"\n\nAmy groaned loudly and kissed me. She said, \"You better not.\"\n\nAs we headed back through the door, I said, \"I can't help it; I'm naturally flirty.\"\n\nShe laughed loudly for a moment and covered her mouth. \"Yeah, whatever Jillian!\"\n\nI slapped her ass and she jumped as we descended back down the stairs to where Lisa was waiting.\n\nFor about a half hour we had a friendly visit. Lisa told me all about herself and Tom, and I told her about me and my family.\n\nAs we were talking, we heard a door open at the rear of the house and Lisa said, \"Oh, Tom must be back!\" She yelled, \"We're in here honey!\"\n\nTom came bustling into the room and Amy leaped up and into his arms. She said, \"Hi Daddy! I missed you!\" He hugged her tightly and lifted her off the floor. He said, \"I missed you too pumpkin.\"\n\nI stood behind them and waited. Tom caught my eye and quickly stuck out his hand. I shook it firmly and he said, \"Nice to finally meet you Daniel. Welcome to our home. Amy's told us a lot of good things.\"\n\n\"Nice to meet you too sir. And she's told me great things about you too.\"\n\nAlmost mirroring Lisa, he smiled and said, \"Call me Tom.\"\n\nI nodded and said, \"And Danny is good for me.\"\n\nTom nodded and said to Lisa, \"Well, I should go up and have a quick shower. I'm covered in drywall dust.\" He grinned at Amy and said, \"Sorry about that, girl.\"\n\nAmy giggled and started brushing herself off and said, \"Thanks a lot Daddy!\" Tom laughed loudly as he went up the stairs.\n\nDinner passed with little incident. There was a lot of friendly banter and I found that Tom Patterson was an incredibly personable and friendly guy. He told us several stories about when he was a wrestler in college and was easily one of the most engaging people I had ever met. I found myself really liking him right away and with his good looks I could see why Amy was attracted to him.\n\nWhen dinner was over, we all pitched in and had all the dishes loaded into the dishwasher and everything cleaned up in no time. There was a brief moment where I spotted Tom stealing a quick squeeze of Lisa's ass as she was reaching up to put something away on a high shelf. I smiled and shook my head. It was clear that these were incredibly nice people who loved each other.\n\nAfter dinner, Lisa suggested we watch a movie on Netflix. Tom and I tried to talk the girls into an action adventure movie while they both were trying to steer us into a romantic comedy. Finally, we settled on a drama and Lisa and Amy went out to the kitchen to microwave a few bags of popcorn.\n\nTom looked at me and said, \"So Danny, Amy tells us you have your own house that your aunt helped you purchase. Sounds like a pretty sweet deal.\"\n\nI took a deep breath and said, \"Yeah, she's pretty well off. I guess I'm her favorite nephew.\" I laughed, hopefully not as nervously as I felt.\n\nHe smiled and said, \"So I hear Amy's been spending a lot of time with you. She's really taken with you. You seem like a good guy. Much better than that little prick Tim.\"\n\n\"Thanks, yeah I've heard about the infamous Tim.\"\n\nHe grinned and said, \"Yeah, he was a real asshole. Now, listen up. I'm already well aware that you've been intimate with my daughter so we're going to let you share her room while you're here. You'll find that we're not that old-fashioned. She's told us she's in love with you so you must be something pretty special. You're not going to hurt my little girl, are you?\"\n\nI immediately said, \"Absolutely not. I wouldn't want to be on your bad side, Tom.\"\n\nHe nearly guffawed and said, \"You're fucking right you wouldn't. As long as you treat her right, we'll be fine. That necklace you got her was a nice move.\" I smiled and nodded, not sure what to say.\n\nIn another minute the ladies returned with the popcorn and drinks and we settled in to watch the movie.\n\nWhen the movie ended, I tried my best to help pick up the mess and generally be helpful.\n\nWhen it was time to head to bed, Lisa said to me, \"Amy will show you where everything is. Please make yourself at home. If you get hungry, feel free to anything we have.\"\n\nI said, \"Wow, thanks. I have to say I had a great evening. Dinner was delicious.\"\n\nShe said, \"Oh, thank you. You're such a sweetie.\" She looked at Amy and squeezed her cheek. \"You sure picked a good one hon.\"\n\nAmy embraced her mother and said, \"I think so too. I told you.\"\n\nLisa said, \"You sure did. Try to keep it down to a dull roar tonight, OK?\"\n\nAmy groaned and said, \"Mom!\" Lisa giggled and kissed Amy on the cheek. She said, \"Night night.\" Amy echoed back, \"Night night.\"\n\nOnce we got into the bedroom and closed the door, I pulled out my iPad and sent a text to Sandi. She almost immediately sent back and I started up the video chat app.\n\nAmy and I shared a pair of earbuds and told her all about our evening. Amy complained several times that I was being too flirty with Lisa but when I told Sandi what happened, she didn't think I had done anything all that wrong.\n\nSandi asked, \"He didn't touch her, did he?\" Amy sighed and said, \"No, but he couldn't seem to stop complimenting her about everything.\"\n\nSandi smiled and said, \"Yeah, he does that, but it's harmless. I'm sure he wouldn't do anything to get himself in trouble with your dad.\"\n\nAmy conceded, \"I guess... It just bothered me a little watching him put the moves on her.\"\n\nI said, \"I was not putting any moves on your mom. I think you're misinterpreting what I'm doing when to me it's just basic friendliness.\"\n\nAmy sighed again and finally said, \"I just can't get what you said about her out of my mind. I guess I'm just feeling jealous and second-guessing everything.\"\n\nSandi said, \"I'm sure that's all it is. Try to get past it as best you can, OK? This is just a friendly visit so they can get to know him and nothing more. But if you can see some way to introduce the question of what she thinks of open relationships, definitely ask her that. That's it. No incest questions of any sort, understand?\"\n\nWe both said, \"Yep.\"\n\nWe ended the call and got ready to go to sleep. We didn't have sex that night, mostly because I think both of us were tired and not in the mood. The next morning, however, was another story altogether.\n\nThat Sunday morning when I woke up, I had a raging erection. It was just before 7am and Amy was still sound asleep. I rolled over on my back and my cock pointed straight up and tented the covers. I breathed deeply and tried to relax, but it wasn't going away. I slowly moved my hand to Amy's side and softly caressed her. She awoke slowly and held my hand in hers.\n\nI turned back on my side and scooted up behind her and wrapped my arm around her and pulled her to me. I pressed my cock into her ass and heard a weak giggle. She said, \"Well hello there. Looks like somebody needs attention.\"",
        "She twisted herself around and faced me. She moved in and we began softly kissing in the darkness. Amy reached down between us and gripped my cock and slowly massaged it, sending waves of pleasure through me. I kissed her neck and ears and licked around her collarbones, causing her to moan slightly.\n\nI was really wanting to be inside her so I aggressively moved and got on top of her, never stopping the continuous kissing. I knew she probably wouldn't be wet already so I moved down beneath the covers and began lightly licking her clit. She moaned loudly and hissed, \"Oh God!\"\n\nI ran my tongue up and down the entire length of her pussy several times, sticking my tongue inside her each time I went back down. I went lower and licked her asshole lightly. Once she was ready, I came back up and rubbed my cock through her warm wetness, making sure to rub the head against her clit, and finally pushed my way deep inside her.\n\nIt felt like heaven. Amy used her powerful muscles and repeatedly squeezed me inside her, causing me to moan loudly. It could have all been over in a matter of minutes, but this morning there was nothing I wanted to do more than just fuck her forever.\n\nEach time I felt myself getting close, I pulled out and went down and sucked on her clit. After a while, I lost count of how many orgasms she'd had as I repeatedly teased her with my tongue between my lips. Over and over again, I would bring myself to the edge, so close to exploding but then at the last possible moment pull away again and return to lick her.\n\nSometimes, I would get myself back inside her and not move at all, just kissing her and sucking her tongue deep into my mouth. I would whisper to her, \"Give me your tits\" and she would push her breasts up toward my face so I could lick her nipples.\n\nOther times, I would crawl up and have her suck my cock or rub it between her tits as she held them together for me. But again, I would stop and relax before it was too late to hold back. The precum was dripping out of me like a faucet and finally Amy looked into my eyes and asked in a hissed whisper, \"How are you doing this?!\"\n\nI moaned and said, \"I want to fuck you forever. I never want this to end. Never.\"\n\nBut every good thing must come to an end, and this epic lovemaking session was no exception. Amy had had several powerful orgasms now and she begged, \"Danny please, please! I need you! Need it...\"\n\nI moved down for the last time and slowly pressed forward until I was fully inside her again. She wasn't even squeezing anymore and was just constantly moaning with tightly closed eyes. I increased my thrusting and she pulled her legs up and rested them on my shoulders and whispered loudly, \"Cum for me baby. Cum inside me! Cum!\"\n\nI closed my eyes tightly and bore down and came so hard it made me gasp and loudly say, \"Oh shit!\"\n\nAmy said, \"Shh!\" But the feeling was so overwhelmingly powerful that I couldn't contain myself and growled loudly. I continued to pound away at her until every last ounce of energy I had was expended. As my penis finally began shrinking, I lay on top of her and tried to hold myself up.\n\nAs I panted Amy said, \"Baby just let go and lie on top of me. I'll be OK.\"\n\nI looked at her and saw the tenderness in her eyes and just relaxed and rested my full weight on her. I had never done that with anyone and I don't remember ever feeling closer to another human being in my entire life. I whispered, \"I love you, I love you, I love you more than anything.\"\n\nBelow me, Amy held me tightly against her and said, \"I love you too baby. That was... I don't even know. How did you do that? Do you have any idea how long you went?\"\n\nI sucked in a deep breath and said, \"I don't know. Maybe 20 minutes?\"\n\nShe giggled and said, \"No, silly. We've been going for almost an hour and a half! AN HOUR AND A HALF!\"\n\nI looked down at her and looked confused. \"What? That's... that can't be. Can it?\"\n\nShe giggled and said, \"Yes, it can. It's coming up on 9 o'clock. I'm sure my parents are wondering why we're not up yet. We need to get up!\"\n\nI slowly rolled off of her and lay beside her. I looked up at the ceiling and noticed the bright sun coming through the blinds. Very slowly, I sat up and started to get my bearings. Amy sat up next and quietly said, \"Shit.\"\n\nI looked over and asked, \"What is it?\"\n\nShe said, \"We're going to have to change these sheets. They're completely covered in... mostly me.\" She sighed and stood up and I finally noticed the large dark wet spot.\n\nI stood too and helped her pull the sheets off the bed. She said dejectedly, \"What is my mom gonna think? Dammit.\"\n\nI looked at her and said, \"She'll think you're in love and this is what people in love do.\"\n\nShe sighed again and said, \"I know. I'm still struggling a bit with just flaunting the fact that I have sex right in their faces in their own house in the room I grew up in. You were so loud I bet they heard us. And look at me!\"\n\nAmy's thighs were completely covered in wetness. Semen was leaking down her legs and she squatted over the pile of sheets and pushed out even more. I said, \"Wow...\"\n\nShe picked up a dry part of the sheet and wiped herself off on it and sighed. She giggled and said, \"I just wanted to tell you that even though this is a huge mess, I... I loved every second. I've never felt so connected to another person in my entire life. It wasn't even like you were just inside me anymore. We became one.\"\n\nI walked around the bed and pulled her up and picked her right up off the floor. I said, \"I felt the exact same way. The feeling was like nothing I've ever felt before.\" I stood there for almost a minute and just held her tightly against me. And that was when the soft knocking came at the door.\n\nAmy gasped and we could hear Lisa's concerned voice. \"Amy honey, is everything OK?\"\n\nAmy tapped my shoulders expectantly and started wriggling, trying to get down. I dropped her quickly and she ran over to the door and opened it a crack. She said to her mother, \"Everything's fine. We... we'll be out in a bit.\"\n\nLisa said, \"Alright. When you get a minute, I'd like to speak to you in private.\"\n\nAmy said obediently, \"Yes, mother.\" She pushed the door closed and sighed loudly. She walked over to her closet and pulled a large robe out and put it on. She motioned to the pile of sheets and said, \"Just leave this stuff here for now. We should get showered and then we can worry about it.\"\n\nI pulled on my underwear that I had on from the previous night and we peeked out the door and found that the coast was clear. When we got into the shower, Amy's mood lightened somewhat and we playfully washed each other. When we were finished washing, we stood in the stream of warm water and kissed as we tightly embraced. Amy finally broke the kiss and giggled. \"You know, I actually feel a little sore right now.\"\n\nI laughed and squeezed her. \"You loved it.\" She squeezed me back and said simply, \"More please.\"\n\nWe got out the shower and got dressed and headed downstairs.\n\nWe found Lisa sitting at the dining room table staring into the screen of an iPad. She looked up at us and smiled. \"Well, good morning you two. I was starting to think your father and I were going to have to spend the day alone.\"\n\nAmy frowned and said, \"I'm sorry about that. We... uh, lost track of time.\"\n\nLisa giggled and looked directly at Amy. \"Mmm hmmm. So can you and I have that chat now?\"\n\nAmy nodded and Lisa stood and followed her out of the room. Just as they were leaving, Lisa turned and said, \"Help yourself to anything sweetie.\"\n\nI said, \"Thanks, Lisa.\" I hunted through a few cabinets and stumbled onto some cereal and found a bowl and a spoon and ate. Lisa's iPad was still sitting there on the table and was opened to the Google News page. I picked it up and scrolled up to the top of the page and skimmed through the article titles.\n\nWhen I didn't find anything interesting to click on, I sat it back down and concentrated on my cereal. A couple minutes went by and I heard giggling coming from the next room. Amy and Lisa came back in with wide smiles on their faces.\n\nLisa walked up behind me and put her hand on my shoulder and squeezed it. She said, \"Making yourself at home?\"\n\n\"Yes ma'am.\"\n\nLisa giggled and said, \"So formal.\" Before she let go, she rubbed her hand around my upper back and finally sat back down. She looked at her screen and asked, \"Oh, were you looking at this?\"\n\nI said, \"Oh, I just scrolled to the top and looked at the headlines. I'm sorry, I hope you don't mind.\"\n\nLisa smiled and said, \"Oh no, you're fine.\"\n\nAmy left the kitchen and a few moments later appeared with the sheets. Lisa said to her, \"Thanks honey. Just leave them there and I'll wash them later.\" She looked at me and smiled sweetly. She said, \"So I'm guessing you must have slept well?\"\n\nI sighed and said, \"I haven't slept so well all week long. I am so relaxed right now.\"\n\nLisa looked down and giggled and said, \"Oh I bet you are.\" She recovered quickly and said, \"Well that's good. But Tom's out on his weekly Home Depot run. He was going to ask you to go along, but you were..., um, occupied.\"\n\nI closed my eyes and could feel my face heating. \"I'm sorry about that.\"\n\nAmy returned just as Lisa put her hand on mine and said, \"It's fine, sweetie. I know how it is. I was young and in love once upon a time too.\"\n\nShe looked up at Amy and said, \"Just look at you. You are practically glowing. You're not pregnant are you?\"\n\nAmy frowned and said, \"Mom...\"\n\nLisa raised her hands and stood. \"I'm just making an observation.\" She hugged Amy and said softly, \"You look so happy. I love you.\"\n\nAmy hugged her back and said, \"I love you too.\"\n\nAmy joined me with her own bowl of cereal and before long I was done. Lisa said, \"Just leave the dishes on the counter. Dishwasher's clean.\"\n\nI said, \"Oh, well I can help you put things away.\" I walked over and put my dishes next to the sink and pulled open the dishwasher door.\n\nLisa said, \"Oh that's not necessary Danny. I can take care of it later.\"\n\n\"I insist. It's the least I can do for the hospitality and the great dinner last night. I can knock it out in five minutes. Just direct me where to go.\"\n\nLisa conceded and relaxed in her chair and as I picked things up she would tell me where they went. After a minute or so I pretty much got the lay of the land and she didn't even have to say anything anymore. True to my word, everything was put away and my dirty dishes were loaded in.\n\nJust as I got done, Amy finished up so I just kind of mindlessly collected her dishes too and rinsed them and loaded them too.\n\nI said, \"There we go.\" I smiled and sat back down. Lisa had this incredulous expression on her face and Amy looked at me and rolled her eyes. The resemblance to Bethany's patented move was astounding. I fought to hold back a smirk and just smiled back at her.\n\nI caught a glimpse of Lisa kicking Amy under the table to get her attention and Amy just blurted out using the most unenthusiastic voice ever, \"I know, isn't he something? He's so great. Blah, blah.\"\n\nLisa giggled and said, \"What? Why'd you say it like that? Do you know how many times your father has ever done something like that? If I had a nickel for every time I'd have... well I'd be broke, because it's never happened.\"\n\nAmy giggled too and looked directly at me while speaking to her mother, \"Well if he would stop doing that all the time, it would be awesome. It's starting to get annoying.\" Then she kicked me under the table and I laughed too.\n\nLisa ignored Amy's antics and said, \"Well, if he wants to come over every night and be annoying in my kitchen, I'd be a happy woman.\" She turned to me and put her hand over mine again and said, \"Don't listen to her. You just keep doing things like that. I am very impressed.\"\n\nI said, \"Really, it's nothing. If I can help you do anything else, just let me know. I see the grass out back is getting a little high. I'm pretty good with a lawnmower.\" I smiled and Amy groaned loudly.\n\nLisa laughed and said, \"Actually, we have a landscaping company do it. They missed this week for some reason. But thank you for the offer. You are something else, young man. Apparently you're pretty good at quite a few things.\" She looked back at Amy and Amy rolled her eyes again.\n\nI was enjoying the friendly banter and decided to take it up a notch. I leaned back in my chair and said airily, \"Well, yeah, I've gotten some pretty nice compliments from the ladies.\"\n\nLisa burst out laughing and shot up out of her chair. She said, \"Oh my dear you're hilarious!\" To Amy she said, \"Honey he's adorable.\"\n\nAmy said, \"Sometimes he's a little too adorable.\" She shot me a look that bordered somewhere between gunshot to the face and instant death.\n\nIgnoring that, I went for broke. I looked at Lisa and said, \"I'm guessing you must have overheard us this morning. I apologize if we disturbed you and Tom.\"\n\nLisa stood there leaning against the counter in silence and shook her head. She finally smiled and said, \"Wow... Well, yes Danny, we certainly did hear you. We heard you at 7 o'clock, and we could still hear you at 8 o'clock. And at 8:30 too. We were starting to think you were killing our daughter.\" She giggled.\n\n\"Sorry about that.\"\n\nLisa said, \"Don't be. Like I said, I know what it's like to be young and in love.\" She thought about it for a minute and said, \"But I have to say I don't quite know what that must have been like.\" She whistled appreciably and we both laughed.\n\nAmy's face was red and expressionless. She said in a determined voice, \"Can we please change the subject?\"\n\nLisa fanned her face with her hand and said, \"Yes, let's. Is it getting warm in here?\"\n\nAmy breathed in deeply and said, \"Thank you.\" She ignored her mother's other comment and said, \"But Mom, since we're speaking so... openly or whatever, I wanted to ask you something.\"\n\nLisa came back to the table and sat down. I happened to notice that Lisa's nipples were barely visible even though she was wearing a bra and wondered what she might be thinking about when she said, \"Ask away.\"\n\nAmy said, \"Well, actually I need to go grab Danny's iPad. I'll be right back.\"\n\nShe got up and bent over next to me and whispered, \"Down, boy.\"\n\nI smiled and raised my hands to let her know that I wasn't planning anything. She wasn't convinced and said out loud, \"Actually, could you go up and get it please?\"\n\nI smiled and said, \"Sure thing.\" I ran up the stairs and grabbed it and came back down and handed it to Amy.\n\nAmy said, \"Thank you honey.\" I sat back down and Amy clicked open an app. She said to Lisa, \"I want to show you a video.\"\n\nLisa looked confused and said, \"Well, OK...\" Amy clicked a button and the video began playing.\n\nI hadn't seen the video but it was a mainstream news piece about open relationships. I wasn't sure how Amy was going to explain why she was showing her this video and began to nervously shift in my seat. Amy saw my discomfort and smiled widely. She was obviously enjoying herself.\n\nWhen the video ended, Lisa looked at Amy with a confused expression. \"So... OK. What's the question?\"\n\nAmy took a breath and said, \"What are your thoughts on open relationships?\"\n\nLisa handed the iPad back to Amy and leaned back in her chair. I was basically ready to die at this point and just waited for the end to come.\n\nLisa looked at me and saw my discomfort. \"I... I don't know. I've never really thought about it. Why are you asking? Are you planning on opening your relationship?\" She looked back at Amy expectantly.\n\nAmy asked, \"Do you think it's possible to be in love with more than one person?\"\n\nLisa thought it over carefully and said, \"I guess it's possible. I know that a parent loves all their children equally. So, if I'm being honest, I would say I believe it's possible. Are you in love with someone other than Danny?\" Lisa leaned forward and took both of Amy's hands in hers.\n\nAmy smiled and said, \"Mom... If I said yes, how would that make you feel?\"\n\nLisa looked at me and then to Amy again. She tentatively said, \"I don't... Amy, what are you trying to tell me?\"\n\nAmy repeated her question. \"How would you feel?\"\n\nLisa sighed and said, \"I don't know. Don't you want to get married and have a family?\"\n\nAmy said, \"I do. Eventually. But please, tell me how you feel about it.\"\n\nLisa said, \"Are you happy?\"\n\nAmy smiled widely and said, \"Yes! I'm so happy I could scream!\"\n\nLisa laughed and said, \"Well, yeah, I heard you earlier.\" She paused and said, \"I'm happy as long as my sweet girl is happy. I've always told you that. Now you tell me right this instant what this is all about.\"\n\nAmy visibly relaxed and said, \"Well, there is a woman and her name is\u2014\"\n\nLisa interrupted, \"A woman! I thought that was just a phase...\"\n\nAmy shook her head and said, \"It wasn't a phase.\"\n\nLisa said, \"I never liked that Jenny. She was such a strange little thing...\"\n\n\"I know you didn't like her. But I loved her.\"\n\nLisa simply nodded and said, \"I know. So there's another woman. Will we be meeting her?\"\n\n\"Well, one step at a time. We need to tell Daddy.\"\n\nLisa took a deep breath and said quietly, \"I think I should tell him after you leave. I'm not sure how he'll take it. He wasn't a big Jenny supporter either you know.\"\n\nAmy sighed and looked down. \"I'm well aware. But this isn't Jenny.\"\n\n\"What's her name?\" Lisa asked.\n\n\"Sandi.\"\n\nLisa repeated, \"Sandi. Alright sweetie. For now, let's just keep Daddy out of it. I'll figure out a way to break it to him gently.\"\n\nAmy stood and Lisa did as well. They embraced tightly and Lisa said, \"I'm just grateful that you found happiness.\" She looked over at me and motioned with her finger.\n\nI popped up from my seat and joined in the hug. I whispered, \"I hope you're not too upset with me over all this.\"\n\nLisa shook her head and said, \"I'm not upset at all, young man. You've clearly made my daughter happy, and honestly that's all I care about. And you seem like a fine person.\"\n\n\"Thanks.\" I squeezed the two of them and then let go. They continued to embrace while I stood by and rubbed Amy's back.\n\nWhen they finally let go of each other, they both wiped away a few stray tears. Amy turned and hugged me and whispered, \"That seemed to go well.\" I nodded against her shoulder and kissed her cheek.\n\nA short while later, Tom returned from his Home Depot trip. He came in and spotted me and said, \"Hey Danny, could you lend me a hand for a minute?\"\n\n\"Yes sir, er, Tom.\" I smiled and headed out to the driveway. Tom said, \"We're doing some remodeling on the back patio and so I went and picked up some supplies. Can you help me out with some heavy lifting? Usually I get to do all this myself, but I figured with another guy we'd cut the time in half.\"\n\nI said, \"Absolutely.\" I grabbed a 50-pound sack of concrete mix and tossed it on my shoulder. \"Where to?\"\n\nTom smiled widely and grabbed a sack of his own and said, \"Follow me.\"\n\nIn about 15 minutes, all of the supplies were stacked neatly in the shed in the backyard. Tom said, \"Wow, you're a pretty strong kid. I've got a few guys in my crew that would've been whining like little pussies halfway through that, but you just pounded it out without a word. I have to say I'm impressed. You ever done any construction work?\"\n\nI laughed and said, \"No sir, but I lift weights every day. And... I'm sure it doesn't really count but when I was little I did my best to help my dad and grandpa build a workshop in our backyard. I mostly handed them stuff and tried to not get in the way, you know?\"\n\nTom laughed and said, \"Oh I totally know. I went on jobs with my dad all the time when I was a kid. He taught me everything I know about building houses. I wish he was still with us.\"\n\n\"Oh, I'm sorry to hear that.\"",
        "Tom leaned back and sighed. \"Yeah, it was pretty tough on me and my sister when he passed. But hey, listen... I don't mean to embarrass you or anything, but Lisa and I kind of... well, we overheard you and Amy this morning.\"\n\n\"I am really sorry about all that. We talked to Lisa about it too.\"\n\nTom smiled again and said, \"Oh, you did? OK, that's cool.\" He laughed heartily and said, \"I remember being a kid just like you. Full of endless energy. Hell, I could've gone all day and night if my girlfriend would've let me.\"\n\nHe turned introspective and said, \"But I have to say, hearing you in there with my little girl was... unsettling, shall we say. I want to ask you something.\"\n\n\"Do you love her?\" he asked after a short pause.\n\nI immediately nodded and said, \"Yes sir, I absolutely do.\"\n\n\"And are you going to take care of her the way she deserves?\" he asked.\n\n\"I'll do everything I can to make sure she's happy.\"\n\nTom held out his hand and I shook it firmly. He said, \"You seem like a good kid. As long as you make her happy, you're OK in my book.\"\n\n\"Thanks Tom. I'll try to not let you down.\"\n\n\"Cool. Let's head in and see how the womenfolk are holding up.\"\n\nThe remainder of the day at the Patterson home proceeded without incident. Amy and I did have sex again that night, but we made absolutely sure not to make any noise. We had a little fun and used the iPad to video chat with Sandi, Mom, and Bethany while we were doing it. They watched us and we watched them. It was a little weird watching them have sex with the volume almost all the way down on a small screen, but it was fun at the same time because we'd never done it before.\n\nOnce we were done, Amy talked to Sandi for nearly an hour about everything that had happened. Sandi was happy that Lisa hadn't reacted poorly over the revelation about the relationship but wasn't thrilled about how we'd made such a ruckus that morning.\n\nShe also didn't seem thrilled about how long we'd had sex and looked visibly disappointed. Amy noticed and said, \"Oh... I'm sorry. I don't know what came over him. He just kept stopping until he could go on a little longer. He was like a machine and I'm still a little sore!\" She giggled and elbowed me in the ribs.\n\nSandi smiled and said, \"Let's just hope I get the same treatment sometime.\"\n\nI said, \"You will.\"\n\n<center>*  *  *</center>\n\nThe next morning we gathered everything up and headed downstairs to say goodbye. Tom had already left to go to work at 5:30 that morning so we had said our goodbyes to him the previous night.\n\nLisa was waiting downstairs wearing a nightshirt and sweatpants. She was clearly not wearing a bra and her nipples were visible through the thin fabric, much to Amy's chagrin.\n\nShe embraced me tightly and said, \"It was so nice meeting you Danny. You're such a sweetheart.\" She leaned her head up and kissed me on the cheek lightly and I reciprocated. She said, \"Take good care of my girl.\"\n\nI said softly, \"I will.\"\n\nShe stepped back and said, \"So I guess we'll do this all over again next weekend, right?\" We nodded and she asked Amy, \"So when do I get to meet your lady-friend?\"\n\nAmy said, \"Well, let's find out how Daddy takes the news first.\"\n\nLisa nodded and said, \"He'll be fine. Let me worry about him. I'll call you to tell you how it went. I'm planning on telling him tonight as long as he's in a good mood.\"\n\nAmy said, \"Thanks for not freaking out. I love you so much.\"\n\nLisa embraced Amy tightly and said, \"I love you too. Send my love to Jill and Sammi. Be sure to tell Jill how well the sauce turned out. That girl is a genius.\"\n\nAmy giggled and said, \"Oh yeah, well she's something alright...\"\n\nOnce we made it out the door and took a couple steps, Amy swatted my ass hard and said, \"Stop looking at my mom like that!\"\n\nI jumped in surprise and said, \"Hey! Like what?\"\n\n\"You know what I mean.\"\n\nI got everything loaded into the trunk and heard her slam her door shut. I got in and said flatly, \"Amy, I don't want to have sex with your mother. I think she's very pretty, and looking at her breasts aroused me because I'm a normal guy and nothing more. There is no hidden agenda. End of discussion.\"\n\nAmy sighed and took a deep breath. She was about to launch into a tirade but she changed her mind and thought it over for a minute. Finally, she said, \"Fuck, alright. I'm sorry. I can see I'm overreacting again.\" She whispered to herself, \"So stupid. Let it go...\"\n\nTen minutes later when we were out on the Interstate, she asked, \"But you think she's pretty?\"\n\n\"Of course, she looks like you.\"\n\nAmy grabbed my hand and said, \"I don't know why I'm about to say this, but I just can't seem to get the fantasy out of my head of having my face between her legs and giving her amazing orgasms.\" She paused for a moment and said, \"And I would let you watch me do it.\"\n\nI made a combination groan and laugh. \"Jesus, why are you torturing me like this?!\"\n\nI heard a snap and then the sound of a zipper and looked over briefly at her. She looked back at me and smiled. \"Just drive.\"\n\nAmy put her hand down her pants and closed her eyes and began masturbating.\n\nI said, \"Well, don't just do that without telling me what you're thinking about. Come on, woman... Details!\"\n\nAmy giggled and said, \"OK, OK. Hold on.\" She shifted way forward in her seat and leaned back to get more comfortable and I grew fully and painfully erect in about 10 seconds. I had to reach down and adjust myself several times.\n\nAmy started describing her fantasy. \"OK, so you know how we were just standing there saying goodbye and Mom had her tits basically hanging out? Just think what might've happened if when she kissed me, I didn't stop kissing her and put my hands up and started squeezing those huge melons, teasing her nipples until they were really, really hard...\"\n\n\"First I would grab ahold of her nightshirt and slowly pull it over her head. I would wait until the last possible second to break the kiss and pull it all the way off, and then start kissing her again. I'd start pushing her over to the couch and just before I pushed her down I'd push down those sweats she had on. I wonder if she had on panties. Ohh God.\"\n\nAmy's fingers were working their magic and I said, \"Go on...\"\n\nShe moaned and said, \"Once I had her completely naked I'd start kissing her neck and shoulders and suck on those ginormous boobs. I'd bite those hard nipples and mmmm, then I'd slowly run my fingers down her stomach until I reached her clit. When I touched her there, her entire body would tremble. Then I would move down... ohhhh!\"\n\nI was breathing heavily now too. I said, \"And?\"\n\nAmy sighed and said in a faint voice, \"I would... lick her hard little clit. And... taste her... mmmm... I would finger her pussy with as many fingers as she could take and make her scream to give her more and more and... MORE!\"\n\nJust then Amy groaned loudly and came. She twisted away from me and squeezed her legs tightly together and screamed loudly. I whispered to myself, \"Oh God!\" I could feel the precum dripping out of me now and wondered if I would be able to make it all the way to the apartment in this state.\n\nAmy pulled her knees up to her chest and panted. She still had her eyes closed but in another moment she gave me her hand again. She whispered, \"That's what I would do.\"\n\nI moaned slightly and said, \"Wow... That was intense.\"\n\nShe giggled and relaxed her legs and said, \"I really needed that. Thanks for not thinking I'm a freak.\"\n\n\"You're not a freak. Now let me taste you...\" She giggled again and leaned over and offered her fingers to me. I sniffed them and sucked them into my mouth and nearly squeezed my muscles tight enough to cum right there in my pants. I had to breathe deeply to stave off the orgasm that was now a boiling cauldron within me.\n\nWhen we finally pulled into the apartment complex parking lot, the urge to cum had mostly subsided. Amy looked at me and asked, \"Are you OK to come inside? I don't want you attacking Jill or anything. I'll take care of you.\"\n\nI said salaciously, \"Let's fuck right in front of her.\"\n\nAmy laughed maniacally and said, \"Ha, you wish!\" My inner dialogue screamed, \"Yes, I do!\" And then I felt bad for thinking it.\n\nWe got to the door and rushed inside. Jill and Sammi were already sitting at the kitchen table as we bustled on by, saying a quick \"Hi\" along the way.\n\nOnce we got into Amy's room and closed the door, I immediately stripped my pants and underwear down and lay on my back on the bed.\n\nAmy crawled between my legs and in no time flat, I was cumming in her mouth, all the while being as quiet as possible.\n\nWhen it was over, I breathed deeply and said, \"You're gonna make me have indecent thoughts about your mother if you keep telling me about your fantasies.\"\n\nAmy giggled and said, \"Yeah right, like you didn't already...\" I shrugged and gave her my best innocent face and she laughed even more.\n\nAmy changed into fresh panties and we headed out to the kitchen. When Jill saw us she giggled and said, \"God, didn't you guys do it enough at your mom's house?\"\n\nSammi burst out laughing and Amy blushed slightly. I smiled widely and said, \"Don't blame me; It's her fault.\" I looked at Amy and she slapped me lightheartedly in the stomach with the back of her hand and giggled.\n\nEveryone laughed and Jill said, \"Well, OK. So who gets the first hug? I'm waiting over here...\"\n\nI looked at Amy and she motioned for me to go ahead. I headed over and embraced Jill. She put her mouth right up to my ear and breathlessly whispered in her best sexy voice, \"Was it good?\"\n\nI smiled and pulled back and said, \"Which time?\" She blew air out of her nose and said with a laugh, \"You're a worthy opponent, but I will get you one of these times, Dishwasher Man.\"\n\nAmy took my place with Jill and Sammi stood and took her turn hugging me and said, \"Hey you.\" She surprised me by kissing my cheek but quickly let go and then hugged Amy tightly and then sat back down.\n\nStill smiling, Jill said to Amy, \"Were you playing in the car? You know that's not very safe.\"\n\nAmy grinned and said, \"OK, whatever, Mom.\"\n\nWhen she said the word Mom it caused me to almost lose it and laugh loudly, but I held back through tightly closed eyes.\n\nJill looked offended and said, \"Well excuse me for caring about you.\" She smiled to let us know that she wasn't being serious.\n\nBreakfast was delicious as always, but before I wanted to leave it was time to go. I was really liking spending time with the girls when Amy prodded me. \"About time to go, isn't it?\"\n\nWhen I didn't immediately respond, Jill chipped in with, \"He just doesn't want to leave me yet, do you honey?\" At this point Amy had completely gotten used to Jill's flirty comments so she wasn't even fazed and didn't respond.\n\nI leaned back in my chair and sighed. \"I really do like spending time with you. All of you. I just wanted to say thanks for letting me come over like this every day.\"\n\nThere were smiled and nods around the table and I stood up to leave. Jill said, \"Come on, Sammi Boo, we need to get going too.\"\n\nSammi laughed and said, \"Whatever you say, Dr. Seuss.\" I was confused for a second and then realized that Jill had rhymed her words unintentionally. I smiled and shook my head as Amy and I walked to the door.\n\nWe stood at the doorway and shared a goodbye kiss. I whispered, \"After what happened in the car I'm not sure if you really want to abandon the plan.\"\n\nAmy quickly opened the door and we stepped outside. She whispered, \"Yeah, I... I can't stop thinking about it. About them. I'm just afraid of somehow messing things up with them or with you and Sandi. I really think I should let it go and leave it all in my head.\"\n\nI leaned down and whispered in her ear in the quietest possible voice, \"Daddy loves you, pumpkin.\"\n\nShe giggled and said, \"Yeah, maybe we could do more of that.\" She followed with a soft whisper, \"I love you too, Daddy.\"\n\nWe stood there and kissed briefly and then I headed to work. I couldn't wait to talk to Sandi and tell her about everything that had happened. I was really looking forward to the upcoming weekend at the Patterson house again.\n\nIn the back of my mind, I wondered if I might somehow get a peek at Lisa Patterson's best assets. Just a little peek couldn't hurt anything, could it?\n\n<center>To be continued...</center>"
    ],
    "authorname": "dan_kildall",
    "tags": [
        "aunt nephew incest",
        "aunt",
        "nephew"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/aunt-sandi-ch-16"
}
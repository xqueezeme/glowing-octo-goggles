{
    "title": "Pool Payments Ch. 09",
    "pages": [
        " Ch. 09: Lisa's Back Payment\n\nBy Tx Tall Tales (c)\n\n----------------------\nOops. Lisa missed a payment. She'll pay.\n----------------------\n\nFriday finally arrived, and by 11:00am I had a full house. Lisa had shown up on time with Kayla in tow, and the two youngest kids. Beth was only a few minutes behind them with her oldest. Including my daughter we had 4 kids in the pool, and 3 incredible MILFs wearing only the skimpiest of bikini's and catching the morning rays. \n\nWe hung out by the pool for a while, all of us aware of where the afternoon was headed. Once the kids were fed Beth gave us the green-light to head inside while she handled the kid-watch.\n\nAs soon as we were in the door Lisa was talking. \"I'm so pissed at Nicole, showing up with all her baggage and making me miss our appointment. I've needed this so badly. I'm so wet now my bottoms are soaked and I haven't even been in the pool. I hope you've been taking your vitamins.\"\n\nShe was headed toward the master bedroom, but I pointed her to the stairs and guided my two playthings up to the furthest guest bedroom. It had the king size bed, and I planned to use every inch of it. It also reduced the chance of getting caught by some ankle-biter running in the house for some forgotten plaything, or to use the can.\n\n\"What's the lesson today?\" Lisa asked, brazenly reaching out and fondling Kayla's bottom.\n\n\"I think we'll just see where it goes, you know?\" I told her, still keeping my true intentions under wraps. \n\nLisa had missed a week. Only by one day, but a deal's a deal. It was time to pay.\n\nAs soon as we were in the room, I pulled Lisa down to the bed, tugged her bikini top up enough to expose her huge rack and set about playing with my own personal fun bags. Kayla stood to the side watching us, hesitant.\n\nI waved the pretty girl over, sat up and took her top off. \"Take off your bottoms and join us on the bed.\" \n\nShe removed the rest of her bikini, then walked around the bed to lay down beside Lisa, raised up on one elbow, watching our play. Lisa had peeled her top off over her head and wiggled out of her bottoms, while I got Kayla situated. I continued enjoying Lisa's tits, getting her nipples to perk up for me, just playing, because I could.\n\n\"Mmmm,\" Lisa murmured, \"suck on those big titties. Show me how much you love your little slut's fat tits.\"\n\nI sat up a bit, \"Kayla, bring those tits over here,\" I commanded. \n\nShe leaned over, almost laying on top of Lisa, their nipples nearly touching, one breast hanging down almost resting on my face, while I suckled on Lisa's open nipple. Seeing the other two nipples so close to each other, I reached out with my hands squeezing the girl's tits, and drawing the nipples together. I rubbed them against each other, then brought my tongue into play, teasing them. I nibbled on both of them, sucked them deep, and reveled in the feel of two hard nipples in my mouth at the same time.\n\nI heard moaning and looked up to see that Lisa had drawn Kayla's face down to hers and they were kissing, their tongues visibly entwining. Lisa was almost growling as she held Kayla's face to hers, her hand behind the younger woman's neck. Kayla, on the other hand was whimpering. I pulled out from between them, letting Kayla slowly slide over on top of Lisa, under our dual guidance. Their legs were interlocked, and the girls were grinding against each other. It was beautiful and incredibly erotic.\n\nI ran my hands across Kayla's back down to her sweet round ass, while the girls continued getting to know each other better. As fun as it was to watch, there was lots more I wanted to do. Lots more I wanted them to do - to me.\n\nI scooted down the bed and reached between the girls' legs, fondling whatever was available. The responses from the two couldn't be more different. Whenever I'd touch Lisa, she'd push toward me, grind against my hand, and do her best to further the contact. Kayla would squirm against my touch, trembling. Which of course i considered an encouragement of sorts. She wriggled wonderfully with my fingers inside of her, twisting, thrusting, feeling her wetness. \n\nLisa rolled the two of them over, putting Kayla on her back. She leaned over her at an angle, still kissing the sweet blonde. I opened Kayla's legs, and slid between them licking and kissing her, teasing her, opening her up. She wiggled and twisted against me, responding deliciously. Kayla was moaning and gasping, and I looked up to see that Lisa had moved lower, and was toying with Kayla's breasts. Knowing that our youngest playmate had never had an orgasm until we'd all started playing together, every time I had her naked I wanted to give her yet another one. I felt it was my duty.\n\nI lifted Kayla's thighs over my shoulders, and gave it my best effort. I glued my mouth to her sweet pussy, licking and sucking. My fingers explored her, while I paid more attention to her sensitive clit, which she responded to powerfully. I heard Lisa whispering to her, encouraging her. \"Come for us baby,\" I heard clearly.\n\nKayla's legs were trembling, and I could feel her tight pussy clenching around my fingers. I pressed my tongue against her pleasure button, the tip vibrating against the little nub of flesh and nerves. She squealed, squeezing her legs together, and came hard.\n\nGod, I loved that feeling. Making a beautiful girl come for me.\n\nLisa giggled, \"That was different.\"\n\nI got up and sat in the middle of the bed, wedging my way between the girls, while Kayla was gasping. \"My turn,\" I said.\n\nLisa snorted. \"You are so spoiled,\" she said. \"C'mon Kayla, lesson's starting.\" She leaned down and took my cock in her mouth, sucking and pulling on me, while I thickened in her mouth. When Kayla had taken up position on the other side of me, she leaned in and ran her tongue across the base of my staff. Lisa pulled away and passed my cock to Kayla who took her turn restoring the stiffness to my rod.\n\nIt was a good lesson, with Lisa working hard to expand Kayla's oral skills, including a first introduction to taking me deep. Lisa had the skills, though she didn't use them often, but both girls made a nice effort. After a while, Lisa left Kayla to play, scooting up next to me. \"Having fun?\"\n\n\"No shit,\" I told her, pulling her close and kissing her. \"Watching you two together was fucking amazing.\"\n\nShe giggled, \"It's been a while, but I guess it's like riding a bike. She's fun to kiss and so soft and smooth to hold. And no beard stubble.\"\n\nWe both relaxed while we watched Kayla make love to my cock. It was obvious she enjoyed what she was doing.\n\nKayla was doing a wonderful job, and I could feel the need to come approaching. \"Kayla, I'm almost there,\" I warned her.\n\nShe kept at it, her hands working my shaft while her mouth demonstrated her new found experience. It was nice. More than nice enough. With a groan I came for her, and she continued sucking, stroking me, draining me. She sat up and showed Lisa her mouth full of cum. She waited several seconds, then swallowed. A smile slowly grew on her face, and she opened her mouth. Empty. Then she went back down on me, sucking me dry and cleaning me with her mouth.\n\n\"What was that all about?\" Lisa asked, curious.\n\n\"Her first time, Beth encouraged her to hold my cum in her mouth, to see if she'd be Ok with swallowing,\" I explained.\n\nLisa scooted down beside Kayla, and pulled her hair to the side. \"You don't have to hold it in your mouth every time, sweetie.\"\n\nKayla pulled back, passing my cock back to Lisa who took her turn on it. \"I like it. It's so naughty to have his cum in my mouth. I just like to feel it there, let it coat my mouth, run it over my teeth. Feel it under my tongue. God, it's so naughty.\"\n\nLisa pulled back and passed my hardening rod back to Kayla. \"You like it that much? Go to town, wild child.\"\n\nKayla was willing enough, and sucked me back to full hardness while Lisa leaned back and enjoyed the show. \"We're not going to be able to teach her much. The most important thing is to let the guy believe you really enjoy it. That's not going to be a problem for this one. All she's going to need is practice.\"\n\nShe stretched, showing off her nakedness. \"So, my turn now?\"\n\nI tapped Kayla on the side of her head, and she pulled away, reluctantly. \n\nI leaned over and lifted Lisa into my arms, turning her sideways on the bed, her butt near the edge. I climbed off the bed, opened her legs and stood between them, placing my cock at her entrance. Lisa was so skinny, so slender, her hips so narrow, it was hard to believe she'd already popped three kids out of that opening. I slid my cock inside of her, drawing a moan from her. It was fantastic. It always was. I gripped her legs and bent them back, crossing her ankles and pressing her knees down to her chest. With my cock inside of her, it looked like I was splitting her in half. I pounded her with the full length, watching my cock disappear repeatedly inside of the tiny woman. She was amazingly tight, as usual, and the feeling was incredible. Apparently it was for her as well. \n\nI could get a messianic complex screwing Lisa. Within seconds of being inside her, she'd start up with the gasping, and saying \"God,\" \"Oh my God\", \"Oh God,\" and several different varieties on the theme. She'd only change tune when she'd come for me, announcing the event for all of us. \n\nKayla watched, enthralled, reaching down to fondle where I was entering Lisa. I slowed the pace, using long full strokes on my little fuck toy, and gestured Kayla close. \"Let's try something new,\" I whispered to her.\n\n\"What?\" she asked softly.\n\n\"Straddle her face,\" I told her.\n\nShe looked at me stunned, not moving. \n\n\"Go ahead, it'll be nice,\" I told her, giving her a little push.\n\nI moved Lisa a little further up the bed, and pulled her legs up to my shoulders. Kayla daintily moved Lisa's hair and placed a knee on each side of her head, facing away from me. She widened her legs and lowered herself onto Lisa's face, then leaned over placing her hands on the bed. Her ass looked amazing, spread open, and I could just see where Lisa's mouth was connected to Kayla. \n\nI let go of Lisa's legs, leaned forward and squeezed her big tits, tugging at her hard nipples, while I plowed her.\n\nA voice from beyond the door almost made me jump. A soft knock was followed by the words \"It's me, Beth.\" The door opened and Beth entered, closing the door behind her, and locking it. \"Maybe we should get in the habit of locking the door. It might make someone suspicious to find a locked door, but that's better than having someone walk in and see a sight like this one.\"\n\n\"The kids?\" I asked.\n\n\"Jill's watching them. She suggested I could come in and see how things were going. She's trouble, that one.\"\n\nLisa was in no position to respond, and Kayla only groaned.\n\n\"Beautiful Beth. You're just in time.\" I told her.\n\n\"In time for what? I don't see me fitting in your little daisy chain anywhere,\" she said.\n\n\"Get comfy and give me a kiss, gorgeous.\"\n\nShe shook her head in disbelief, but quickly took off her bathing suit. Hard to believe, but I was in a room with three beautiful naked women who were both willing and able. Then her face was in front of me and I was kissing her while I ground into Lisa's sweet pussy.\n\nI whispered to her softly, \"There's a bottle of lube in the end table. Be a friend, and help get Lisa ready for a new type of fun.\" Beth went around the bed and came back with a bottle of lube. \n\n\"And what's this for?\" she asked. \n\n\"It would appear Lisa's got one more opening unused at the moment.\" \n\nBeth got the message, \"Oh my God! Are you serious?\"\n\n\"Absolutely.\" I took Lisa's legs and pushed them back to her chest, tilting her pussy up. And further exposing her little brown star. \"Kayla, turn around.\"\n\nKayla was gasping, but my words got through to her and she spun about. It took a little maneuvering but before long she was straddling Lisa again, her knees near our plaything's breasts, and she settled back onto Lisa's active mouth again.\n\n\"Now hold her legs,\" I told her, and she reached down holding Lisa's legs in place, keeping her bent in two.\n\nI pulled out of Lisa, and reached down and caressed her back door. Even through Kayla's legs, I could hear Lisa moan. My fingertips drew circles around my target, before I allowed my finger to ease into her, just a bit, making my intentions perfectly clear. \n\nI reached down and spread her ass cheeks even wider, and looked to Beth. Beth took the bottle of lube and squirted a bit on to her friend's little brown star, then pressed the spout of the lube into her ass and gave it another squirt. I reached down and slid a finger well into her, coating her with the lube. \"A little more?\" I asked Beth.\n\nShe squeezed a bit more on my finger, and I opened our plaything up, inserting another finger up to the second joint, making sure she was lubed up nicely. \n\n\"And me?\" I reminded Beth.\n\nShe squirted a blob on the head of my cock, dropped to her knees, her face inches from Lisa's openings, and got me good and slippery with both her hands, at the same time keeping me nice and hard.\n\nIt was time. \"Kayla, back off for a bit, Ok?\"\n\nKayla sighed and rose up off her friend, still holding Lisa's slender legs.\n\nLisa's eyes were glistening, as was most of he face. \"Jesus, Alex, be careful. That thing is huge in my pussy, I don't know how we can fit it back there.\"\n\n\"Let's find out,\" I told her.\n\nI pressed the cock-head against her hole and pushed, to no avail. She was too tight. I went back to opening her with my fingers, and with a little work was able to squeeze two, then three fingers inside her ass, twisting and tugging and slowly opening her up. Then her hands were down there beside mine, and I pulled out. She slid a couple of fingers from each hand into her butt-hole, and started to tug at herself, stretching herself open for me. Beth leaned in and applied a little more lube, right into her opening.\n\n\"I can't believe we're doing this,\" Beth said.\n\nLisa giggled, \"We?\" She let go and held her cheeks apart. \"Try it now.\"\n\nI put the head of my rock hard cock against her opening and gave a hard push. My cock-head slid in a good two inches deep.\n\n\"Oh my God,\" Lisa gasped, \"Stop, stop!\"\n\nI stopped abruptly, letting her get used to me. Beth was getting into it, and added more lube to my cock, just outside of Lisa's tight hole.\n\n\"Go slow, lover,\" Lisa finally sighed, holding her legs back for me. Kayla moved to the side to take in more of the show.\n\nI pushed a bit, but made no progress. Holding my cock in my hand, I drew back a bit, then pushed forward again. She was so fucking tight I started to doubt if this was going to be possible. Back and forth I worked it, pressing hard, but going slow.\n\n\"She's taking it,\" Kayla said, and we all realized that it had taken a while, but she had about half my length inside of her.\n\n\"This is crazy,\" Beth said, reaching down and gently caressing Lisa's red and swollen pussy. \n\nI kept working at it, and suddenly it felt like she'd opened up for me a bit, and most of my length slid inside of her.\n\n\"Oh God,\" Lisa groaned. \"Wait a bit, please.\"\n\nI stopped again, most of cock buried inside of her incredibly tight butt. Kayla was laying down beside her friend, holding her in her arms. She leaned in and kissed her. Lisa responded to the kiss and Kayla's hands went to Lisa's breasts. I could feel Lisa's ass pulsing against my cock. \n\nI slowly drew back and pushed back in. Lisa moaned into Kayla's mouth. The whole thing was so incredible, I knew I wouldn't last long inside of her, not after all the action leading up to this moment, particularly with the circumstances what they were.\n\nThe grip of her ass was definitely easing, and I found myself finally able to slide in and out of her without wondering if I was tearing her open. Beth was seated on the edge of the bed, her fingers sliding in and out of Lisa's tight pussy, while I reamed our skinny little friend.\n\n\"I can feel your cock,\" Beth said wondrously.\n\nLisa's body bucked, then I heard her gasp. \"YOU can feel his cock? How about me?\"\n\nI was sliding my full length in and out of her, really enjoying myself. \"You Ok?\"\n\nLisa smiled for me. Thankfully. \"More than Ok. Am I amazing or what? That whole thing is in my ass, isn't it?\"\n\n\"Every inch, over and over again. And yes, you are absolutely amazing.\"\n\n\"Fuck my ass, Alex. Fuck my ass for real and come inside me.\"\n\nThat was all I needed to hear. I started fucking her faster and harder, and although I got a couple of grimaces and groans out of her, her moans were more about pleasure than pain.\n\nThe girls were helping, with Kayla working on Lisa's tits and Beth still playing with her friend's pussy. I was screwing her hard, her entire body shaking. Her legs were trembling and she was talking continuously, back to the \"God,\" \"Oh, God,\" Oh my God,\" litany I loved so well.\n\n\"Your ass is incredible,\" I told her, my thrusts now finishing slamming against her ass, my balls slapping against her. \"You're going to make me come.\"\n\nBeth was watching, enthralled. \"Fuck her, Alex. Fuck her ass. Fuck the little slut. Fuck her raw.\"\n\nThen Lisa was squealing, \"God, I'm coming, I'm coming.\" She gasped, \"Fuck, I'm coming!\" Her legs were twitching, spasming, as she came continuously. It pushed me over the edge, and I slammed into her, exploding deep inside of her. \n\nI pressed hard and held myself deep inside of her, as I shot stream after stream of burning cum into her ass.\n\nMy own legs were trembling after spending such a long time standing at the edge of the bed, pounding at the waifish beauty, first her sweet pussy, and then her incredible ass.\n\nI pulled out, and my legs almost gave out. I turned and collapsed on the end of the bed, my heart beating a mile a minute.\n\nLisa rolled onto her side, gasping, leaning against me. \"That was incredible,\" she said.\n\n\"I'll second that,\" Beth said, returning from the bathroom with a couple of wet facecloths. She tossed me one, then pressed the other to Lisa's abused ass.\n\nKayla was cuddled up behind Lisa, holding her. \"Jesus. You guys are crazy.\"\n\nLisa sighed. \"I'm done. If you need to stick that thing anywhere, it's somebody else's turn.\"\n\nI laughed. \"The spirit's willing but I believe my little friend here is done for the day.\"\n\n\"Little friend?\" Lisa quipped. \"For once, I almost wish it was a little friend. Any cock that big is meant for front entry only. I'll be walking funny for a week!\"\n\nBeth was at my side, and she was using the facecloth to finish cleaning me up. She surprised me when she leaned over and took me in her mouth. She gave me a long suck, then pulled away. \"Clean as a whistle.\" Then she leaned back down and took me in her mouth, gently sucking. I was amazed to find myself responding a bit, slowly, very slowly, thickening and lengthening.\n\nLisa disappeared into the bathroom, while Beth worked a miracle. When she came back in the room she put her bikini back on, adjusted it, then came over and gave me a big kiss.\n\n\"I was thinking about letting you do that, and I'm glad we did. I don't know if I'll want to do that again anytime soon, but it was pretty wild, wasn't it?\"\n\n\"Unbelievable,\" I confessed, reaching down and stroking Beth's hair while she continued to devour me.\n\nLisa kissed me again while I reached over and caressed her ass cheeks. She pulled away and headed for the door. \"Lesson's done for the day.\"\n\nKayla got up and got dressed as well. \"I think I'll go down and keep her company. You don't need me anymore, do you?\"\n\nBeth answered. \"I've got it from here.\"\n\nThat left the two of us. \n\nBeth was licking my cock, just playing around. \"This thing should be registered as a lethal weapon. I thought you were going to kill her.\"\n\n\"It looked like she enjoyed it,\" I said.",
        "\"Just make sure I never miss two weeks in a row,\" Beth giggled. She held my new hard-on in her hand. \"What do you want to do with this?\"\n\n\"I've got a choice?\"\n\n\"Two openings only,\" she said with a smile.\n\n\"Ride me?\"\n\n\"With pleasure.\"\n\nI moved to the middle of the bed, and my favorite girl climbed aboard and took a nice long leisurely ride, that ended with me filling her sweet pussy, while holding her close.\n\nShe was purring afterward, laying on my chest, her delicious pussy still clinging to the remnants of my hard-on. \n\n\"Did you really like that? Screwing her in the butt?\"\n\n\"It's not the kind of thing I'd want to do all the time, but yeah, it was pretty hot.\"\n\n\"Hotter than this? She asked, grinding against me.\n\n\"Gentle, baby!\" I told her, my hands gripping her wonderful ass cheeks, giving them a squeeze. \"Nothing could be hotter than being with you.\"\n\n\"Not even that threesome scene I walked in on?\"\n\n\"Not close. But having you in the middle of it would be pretty amazing.\" I admitted.\n\n\"Hmm. I'll have to think about that one. You'd want me in Lisa's position, or Kayla's?\"\n\n\"Lisa's of course. If my cock isn't inside of you, we've lost half of the wonderfulness!\"\n\n\"That's sweet, but I've never done anything like that. I mean playing with boobs is fun and all, and kissing Kayla is nice, but I don't know about going beyond that.\"\n\n\"Maybe I'll just spin you around. I'll enjoy one of your amazing blow-jobs while one of our friends takes care of you at the other end.\" I told her.\n\n\"Are you getting hard again?\" she asked me.\n\n\"Maybe.\"\n\n\"Jesus. I guess you do like the idea! I'll think about it.\" Her pussy was clenching at my cock, ripples of pressure running the length of my buried cock.\n\n\"Stop that.\" I warned her. \"If you get me hard again, I'm afraid my poor cock will fall off before we're through.\"\n\nShe sat up, her hands on my chest, and worked up and down on my semi-hard cock, doing incredible things down there. \"God, you're so easy.\"\n\n\"Only for you,\" I reminded her.\n\n\"Oh yeah. Only for me. Tell that to Lisa's battered ass.\"\n\n\"I'd rather it was yours.\" I told her, the idea putting some steel back into my cock.\n\nAt that she leaped up off of me. \"Hell no! That one I'm not even considering. No way that would fit inside of me.\"\n\n\"Only one way to find out,\" I told her.\n\n\"No. N-O. You ever get that urge again, give Lisa a call.\" She started dressing, leaving my cock standing and waving in the breeze.\n\n\"Now look what you've done to me,\" I said, gesturing toward my red and worn out friend, who'd been thoroughly woken up. \"If you're going back downstairs, would you mind sending Kayla back up to take care of this.\" I gestured to the hard-on that Beth had inspired.\n\n\"Jesus, Alex! You are bad.\" She left me, headed back out the door.\n\nI cleaned up the room a bit and was headed back outside when Kayla showed up at the door. She came inside and locked the door behind her, dropping to her knees in front of me and tugging my bathing suit off. I was no longer hard, but that didn't stop her. \n\nIt took quite a while, but she was patient and gentle, and eventually she was able to bring me to one last orgasm. She was getting better, no doubt about it. And the practice was good for her.\n\n======\n\nHope you enjoyed the story. At least half as much at this crowd did! And remember, votes are appreciated!"
    ],
    "authorname": "Tx Tall Tales",
    "tags": [
        "ffm",
        "fffm",
        "anal",
        "blow-job",
        "oral",
        "training"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/pool-payments-ch-09"
}
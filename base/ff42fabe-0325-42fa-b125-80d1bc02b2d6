{
    "title": "Trapped in a Game Pt. 07",
    "pages": [
        "As we ran for a bit, Serra pulled up to a stop, taking a long look about us.\n\n\"What's wrong?\" I asked, as I joined her side.\n\n\"He should be here,\" she said, biting her lip, but just as I was about to ask who, a large black dog-like creature materialized next to us, and she lunged at the creature with delight.\n\n\"Cali!\" she cried, as the creature's tail wagged excitedly.\n\n\"Priest-human! I failed to detect your presence in this world. It was most distressing. I would rather not experience such a feeling again.\"\n\nI stared at the two with interest, and an image flashed before my eyes of Serra with Katie, and a little knot formed in my chest.\n\nI quickly pulled up my inventory, and fetched one of my signature roasted meat treats, and tossed it to Caliban, which he quickly ate.\n\n\"Josh-of-the-tasty-meats! Your presence was also missed,\" Caliban exclaimed, and Serra shot me a teasing smile.\n\n\"What?\" I asked.\n\n\"Oh nothing. Just, seems like he only missed your treats, while he actually missed me. I'm the clear favorite,\" she added, a smug looking smile on her face, and I snickered in response.\n\n*Bzz!\n\nI pulled up my character interface to see that I'd received a message from Kelly.\n\nWhere are you heading?\n\nTo the hut in the forest where you are. Why? I responded.\n\nMeet up at our camp instead.\n\nAttached to the message was a location, and I quickly relayed the message to Serra, who nodded.\n\n\"That's less than two minutes away. Let's go.\"\n\nI suddenly felt another pang of anxiety, though this time, for a different reason.\n\nKelly was less than two minutes away.\n\nI would finally see her again.\n\nWait... it wasn't that long since I'd last seen her, was it?\n\nWhy did I suddenly feel as if it'd been forever?\n\nI was still ruminating the issue when we came up to the camp, and there she was, in the flesh... or well, sort of.\n\n\"Hey, kiddo,\" I said, but as I wrapped my arms around her, and hugged her tightly, I felt a strange feeling of... disconnect, from her.\n\n\"Hey,\" she said, and I tilted my head, as there was definitely something off about her tone.\n\n\"What's wrong?\" I asked, and she cast a curious glance back at the others, who I now noticed also seemed to be on edge.\n\n\"Uh, can we talk? In the tent,\" she began.\n\n\"Can it wait?\" Serra cut in. \"We might have something pressing to handle right now.\"\n\n\"It can't,\" Karn replied, and Serra shot him a questioning look.\n\n\"We just need to confirm something,\" Kelly clarified, and Serra scoffed.\n\n\"Well confirm it,\" she said, her hand on her hip as she tapped her foot impatiently.\n\nKelly took a deep breath, before speaking.\n\n\"I, uh- need you to call Tracey,\" she stated, and my jaw dropped as I studied her.\n\n\"Who are you and what have you done to my sister?\" I asked, and she sighed.\n\n\"I wouldn't ask this if it weren't serious,\" she explained, and Serra laughed.\n\n\"If it was serious, then you wouldn't suggest talking to someone who's an actual joke!\" she shot back, as I continued to study Kelly.\n\n\"What's this about?\" I asked.\n\n\"We need to confirm something from outside of the game,\" Kelly answered, and I nodded, swallowing uncomfortably.\n\n\"Okay-\"\n\n\"No. Not okay,\" Serra cut in, raising a hand in front of me, protectively. \"Whatever they want to confirm, Tracey's just gonna give us a runaround and probably make this all about her. Besides, why can't you just call your mom?\"\n\n\"I'm on contact restriction until tomorrow.\"\n\n\"And this can't wait until tomorrow?\" Serra asked, and Kelly looked to the others, before shaking her head.\n\n\"Okay, just give us a sec,\" Serra continued, turning to me, as she pulled up her message feature on her character interface.\n\n\"You're contacting Dieter?\" I asked, and she nodded.\n\n\"He can probably lift the contact restriction.\"\n\nI studied her for a bit.\n\n\"When did I tell you all of those things about Tracey?\" I asked, and she shrugged.\n\n\"I don't remember exactly,\" she said, but something inside of me told me that she was lying, and I studied her carefully.\n\nSerra twitched, as if she'd just gotten a message, and she nodded, turning to Serra.\n\n\"Contact restriction lifted. Now call your mom,\" she said, gesturing toward the tent.\n\nKelly nodded, but as Serra followed me into the tent, she suddenly seemed a bit uncomfortable.\n\nShe seemed about to say something, when Serra shot her a glare which seemed to say 'deal with it', and Kelly decided to let it go.\n\n\"Mom?\" she said, as the call went through, \"no, I'm fine. I just need you to check on Josh for me.\"\n\nShe paused for a bit, then tilted her head in confusion.\n\n\"No. He's here, I just mean, check on him on the outside. Mom, just do it, okay?\"\n\nKelly sighed in frustration, and Serra rolled her eyes.\n\n\"Fucking Christ, could you just put her on speaker?\" Serra said, and Kelly swallowed uncomfortably, before doing as requested.\n\n\"Was that Serra?\" my mom's voice suddenly called.\n\n\"Yes mama,\" she answered.\n\n\"What did I tell you about your language?\" the woman said sternly, and Serra sighed.\n\n\"Sorry mama. One of your children is just giving me a headache.\"\n\nMy mouth fell open, and I turned to Kelly, who seemed equally surprised by the exchange.\n\n\"Wait, mom. That was you? In the simulation?\"\n\n\"Of course! What did you think, I was some kind of robot?\"\n\nMy mom scoffed, and I stared at Serra, as I tried to process the revelation.\n\n\"Kelly, honey, I'm standing right next to Josh. He's fine,\" my mom said, and Kelly sighed, then walked up to me and hugged me.\n\n\"I just had to be sure,\" she said.\n\nThere were tears in her eyes as I studied her, the confusion visible on my face.\n\n\"We can handle it from here, mama,\" Serra said.\n\n\"Okay, sweetie. Bring my babies home,\" she said, before adding, \"and feel free to discipline whichever one is misbehaving!\"\n\nSerra quickly flicked Kelly's ear as the call ended, and as she frowned, Serra shot her an apologetic glance.\n\n\"I'm sure there's a good reason for all of this, but we just wasted valuable time,\" Serra said, and not a second too soon, as Dana dashed into the tent.\n\n\"Something's wrong. We lost contact with Zephiel!\"\n\n\"Who's Zephiel?\" I asked, and Serra rolled her eyes.\n\n\"The guy in the black leather outfit with the two pet monsters,\" she said.\n\nWe quickly headed out of the tent, when a huge fiery explosion went off in the forest to our left.\n\n\"What the hell-?\" Karn began, when Serra shot me a quick look.\n\n\"Was that a deity level spell?\" I asked, and she shrugged.\n\n\"Can't tell from here.\"\n\n\"I'll let you know,\" Kelly said, as fire began to sprout from her back, eventually taking the form of wings, and she sped off.\n\nAs she left, I caught a party invite that she'd sent, and as I accepted it, I opened up a communication channel with her.\n\n\"What do you see?\" I asked, and as Serra shot me a quick look, I invited her to the channel.\n\n\"Zephiel and one of the girls. They're fighting something, but I can't tell what.\"\n\n\"Don't engage,\" Serra said.\n\n\"Wha- Why?\" Kelly asked, and Serra sighed again.\n\n\"Just, fucking listen, or I'll seriously tell your mother,\" Serra countered, and I stifled a chuckle as Kelly groaned in protest.\n\nSerra tapped my chest, and I looked up just as a figure emerged from the forest.\n\n\"Kelly. We're gonna need you here,\" Serra said, and I drew my rapier. \"Caliban?\"\n\n\"Yes, master,\" the dog said, as he appeared beside her.\n\n\"Disapparate until I call for you,\" she ordered, the creature bowed, before fading out of existence.\n\nI shot a glance at Karn, who was holding a hook like weapon, attached by a chain to heavy-looking metal slug.\n\n\"What's the plan?\" I asked, and she looked around.\n\n\"We don't have the numbers or any kind of advantage. I'm gonna contact Dieter. Just keep her busy,\" she said, and I nodded, moving toward the figure.\n\nShe appeared to be an ordinary looking woman, maybe in her thirties, but as she approached, I could feel the pores along my hand raise, as the hairs stood on end.\n\nChrist.\n\nFrightful Presence.\n\nIt was a monster skill, but on a level beyond anything I'd ever experienced.\n\nIn an instant, I felt like an ant standing in front of a God.\n\nMy hands began to shake, and I steadied my mind, trying to overcome it.\n\nI shot a quick look at Karn, who was also on one knee, struggling to stay up.\n\nMove, I told myself. Fucking... move!\n\nMy leg moved, and I shuddered as my body overcame the initial paralysis, but an incredible heaviness remained.\n\nIt felt as if I was trying to move in wet concrete that was drying solid all about me.\n\n\"Interesting,\" she said, studying me. \"By my estimation, less than two percent of the remaining players can break out of my presence; but your name does not seem to appear amongst their ranks.\"\n\nSheesh, I thought, it's not as if I care about my rank anyway...\n\n\"Focus Josh. Dieter didn't send us here to fight,\" Serra called, and I nodded at the reminder.\n\n\"Now you, I recognize. You're top ten. Or, at least you were,\" she added, studying Serra. \"And you've met Dieter too. Did that broken robot finally decide to act? This should be interesting.\"\n\nI blinked, and in that instant, the woman vanished, and I immediately sensed her presence just behind me.\n\nI turned, as I braced myself for whatever she was about to hit me with, when a burst of static erupted about me, slowing my movements down to a halt.\n\nSerra seemed to have gotten a light shield up just in time, but the shield quickly cracked, and began shattering, layer by layer.\n\n\"Mold... earth!\" I chanted, raising my hand towards her with great difficulty, and I created a little platform beneath her feet, and suspended from the ground, and the intensity of the field around her seemed to weaken.\n\nShe shot me a thankful nod, readying her hammer as she maintained her shield with one hand, before leaping straight at the woman.\n\n\"We're not. Here. To fight!\" she cried, in between each of the three strikes that she landed before her feet touched the ground, but as she landed, she cried out as the static field coursed through her body, forcing her onto one knee.\n\nThe attack was meant to break the woman's concentration on static field, but apparently, it wasn't enough.\n\nI was about to try another spell when a pillar of flame appeared in front of me, along with five more, forming a hexagon, and Serra placed her hands on the floor, bringing up an elemental shield just as the area between the pillars exploded into flame.\n\nI counted eight explosions before the fire died down, leaving behind a cloud of dust and smoke, and I breathed a sigh of relief as the electricity about me dissipated.\n\nBut the fight had only just begun!\n\n\"Dodge!\" Serra cried out, and as Kelly hovered over us, she quickly dived, spiraling and weaving as she did, and not a second late, as a wicked stream of lightning shot out from somewhere in front of me.\n\nSeveral more bursts came from the spot, and Serra wasted no time, lunging forward with her hammer.\n\n\"Smite!\" she chanted, and a yellow wave of energy pulsed out as her blow connected with something.\n\nI couldn't see the target, as she was still shrouded in the cloud of dust, but maybe that was something I could use to my advantage.\n\n\"Earth bind!\" I chanted, focusing on the cloud of dust itself, and dust began to swirl as it molded around the target within.\n\n\"Light shackles!\" Serra chanted, binding her further, and as Kelly landed on the other side, she summoned her own vortex of lightning.\n\n\"Three concentration spells just to bind me. Now what?\" she scoffed, shooting a questioning look between us.\n\n\"We just wanna talk,\" Serra said, and the woman laughed.\n\n\"How about you give me back my husband, and then we'll talk.\"\n\n\"He's not your husband,\" I cut in, and she glared at me. \"The woman you're trying to be. You aren't her. You know you aren't.\"\n\n\"I might as well be. I know everything about her... every memory, from her birth to her death. I even remember things she never could.\"\n\nI bit my lip.\n\n\"A simulation based on her memories is still different from the real thing. She was more than what you imagine her to be.\"\n\n\"Please. You have no idea what you're talking about,\" she replied.\n\nAs we spoke, a man wearing an all-black leather outfit appeared on the hill in the distance, and he began to approach us, a fiery look in his eyes.\n\n\"You! What did you do to Maia?\" he asked, advancing on the woman.\n\n\"Oh, I just showed her the truth,\" she answered, \"about how you abducted her from her real father.\"\n\n\"He was a mindless fucking NPC,\" he shot back, and she scoffed.\n\n\"Not to her, he wasn't.\"\n\nThe man paused, studying her, before suddenly leaping aside just as a huge burst erupted from the earth where he'd only just stood.\n\nI followed his gaze to the top of the hill, where one of the little girl NPCs now stood, a murderous look in her eyes.\n\nShe began casting another spell, when suddenly a wolf leapt onto her, and the two rolled away, down the hill, in a wicked struggle.\n\n\"Make them stop,\" he yelled at the woman, and she laughed.\n\n\"Stop them yourself... or maybe I should tell her sister what you did, so they could get their vengeance together.\"\n\nHe sighed, then headed off to join the fight between the two.\n\n\"Fuck. There's no way we can fight her, and one of those little monsters,\" Serra said, speaking through our communication channel.\n\n\"What do we do?\"\n\n\"I'm not sure. We're in trouble here,\" she conceded.\n\nI wracked my brain, trying to come up with a plan.\n\nIf only there was a way to get through to her...\n\nI quietly looked through my spell list, trying to think of what might be useful, when a spell suddenly stood out to me.\n\nEmpathy.\n\nWhen I first read the spell's description, I thought it was laughable that it had even been included in the game, but as I thought of it now, it seemed like something I could make use of.\n\nToo bad I never learned it.\n\nI sighed.\n\nMaybe there was a way I could still cast it?\n\n\"Empathy,\" I chanted, under my breath, but nothing happened.\n\nNo... I needed to do it without a chant.\n\nEven marking never worked when using an unlisted type of target unless you concentrated the casting without verbal component.\n\nI tried again, this time, focusing on the woman, and trying to convey, though my thoughts, what I wanted to accomplish.\n\nShe turned towards me, studying me, and the earth bind spell began to weaken.\n\nI had to relinquish concentration on it if I really wanted to cast this, didn't I?\n\nIt was risky, but we were just playing a waiting game right now that we were destined to lose anyway.\n\nI took a deep breath, then released the spell, but as the woman immediately broke free of her restrictions, and advanced on me, I focused all of my concentration into the casting of empathy, and she paused, studying me curiously as the spell actually took effect.\n\nHelp me understand, I thought, and she smirked, relaxing her posture a bit.\n\n\"You really wanna know, huh?\" she asked, and I nodded. \"Fine. Then let me show you!\"\n\nShe leapt forward suddenly, placing a hand on my face, and I felt that now increasingly familiar sensation of my mind being pulled from my body.\n\n...\n\nWhere was I?\n\nI looked around, and suddenly found myself in the midst of... an orgy?\n\nSeriously? I thought.\n\n\"It's not what you think. Just watch,\" the woman said, speaking directly into my mind, so I obeyed.\n\nI looked down at my own naked but unfamiliar body, as my hand, seemingly moving on its own, began to stroke my cock to its fully erect length.\n\nThere was a woman in front of me, on her stomach and lying prostrate, her legs spread apart and her sex on display invitingly, but as I placed a hand on her hip, and moved to enter her, I felt... a strange feeling of trepidation.\n\nWhy was I really here?\n\nThe thought appeared in my mind, not as my own feeling, but the feeling of the person whose body I was now in.\n\nI felt lost.\n\nOut of place.\n\nBut as I knelt there, my cock at this woman's entrance, I spotted her.\n\nIt was the woman.\n\nShe was stark naked, and younger... much younger.\n\nBut as our eyes met, she smiled, and I marveled at the peculiarity of the situation.\n\nHer legs were spread wide, and she was massaging one of her breasts, and biting her lip as the woman I was about to enter was busily eating her out.\n\nShe gestured towards the girl's rear, and I nodded, entering her finally, but even as the pleasure of that initial penetration flowed through me, my eyes went back to her, and she smiled again.\n\n\"Stephanie,\" she offered, holding out her hand.\n\n\"Paul,\" I answered, but as I reached forward to accept her hand, my length shifted against the insides of the girl between us, and I let out a little gasp as the movement stimulated me pleasurably, and she snickered in response.\n\n\"You're new at this,\" she said, more of a statement than a question, and as I nodded, she smiled. \"Figures. You can really give it to her, you know. She won't mind.\"\n\nI nodded again, as I started to really move, and Stephanie's eyes remained locked onto me.\n\nThe woman between us, paused in her licking to let out a pleasurable moan of her own, and Stephanie directed her mouth to her own clit.\n\nThe woman stuck her tongue out, and as she began to flick the nub, my own thrusting added a new layer of stimulation to her oral onslaught, and Stephanie shot me a thankful look.\n\n\"I'm getting close, Paul. Do you think you can do me a favor?\"\n\n\"Sure,\" I replied, as she bit her lip, provocatively.\n\n\"Really fuck her brains out,\" she commanded, and I felt a little pleasurable twitch of my own at the statement.\n\nI began to slam into the young woman between us, and as Stephanie's moans quickly escalated to high pitched shrieks, I studied her, seemingly utterly captivated.\n\nHer orgasm seemed imminent, but as she cried out, her eyes remained on me, and as she came, I pulled my cock from the young woman, and began to unload my own contents on all over her.\n\nStephanie leaned down, then gave the girl a little kiss on the lips as an appreciative gesture, before crawling past her toward me.\n\n\"May I?\" she said, gesturing toward my cock, and as I nodded, she leaned forward, her gaze fixed firmly on me, as she took the head of my softening cock into her mouth, and cooed as she tasted me, making sure that I knew that the remnants of my seed was what she was after.\n\n\"Not bad for a first timer,\" she said, and I rubbed the back of my head, a little nervously. \"Fancy joining me for a smoke?\" she added, nodding toward the corridor to the right, and as I agreed, she led me to a little area that was unoccupied.\n\nShe fetched a smoke out of one of the drawers from a nearby table, and as she lit the cigarette, she took a deep draw, then let out the smoke in a long, exhaling sigh.\n\n\"So, what brings you to this neck of the woods, first timer?\"\n\nI snickered.\n\n\"You want the real answer, or the bullshit answer?\"\n\n\"Well when you phrase it like that, there's only one choice, really.\"\n\nAs I sighed, chuckling a little nervously, she moved toward me.\n\n\"You can give me the bullshit answer for now, if you think it'll be easier. But I'll be honest with ya. I plan on getting the real reason out of you, and a whole lot more, long before you leave this place.\"\n\nI studied her, and something about her expression made me suddenly feel relaxed.\n\n\"Fine. I'm just a sad, lonely fuck who probably can't get laid on his own; so, I came here out of sheer desperation,\" I offered, and she laughed.\n\n\"Oh? Is that all it is, honey? You, and half of the men here.\"\n\nI stole a quick look around, and she scoffed.",
        "\"Half these losers can't fuck for love nor money. That's why my girl Abby over there is such a godsend.\"\n\nI stole a quick glance back at 'Abby,' who was on all fours as some other man fucked her from behind.\n\n\"So, what's your deal?\" she probed, as she blew out another whiff of smoke.\n\n\"My deal?\"\n\n\"Yeah. You're not that old, and not half bad-looking. Fella like you won't be drowning in pussy, but you should do alright. So, what's the deal? You into some kinda, weird fucking shit?\"\n\nI shook my head, and sighed.\n\n\"Truth?\" I asked.\n\n\"Truth!\" she said, nodding.\n\n\"I got married when I was real young to a girl who, turns out, didn't much like me, and now I'm finding I have no idea how to be single.\"\n\n\"Shit. She still around?\" Stephanie asked, and I shook my head. \"Separated? Or divorced?\"\n\n\"Divorced. Six years now,\" I answered.\n\n\"Six years? And you're still tryna 'catch your footing'? Are you sure you're not still on this girl?\"\n\nI shook my head.\n\n\"She has two kids and lives with my uncle,\" I said, sighing, and she frowned.\n\n\"Poor thing,\" she sympathized. \"So, you're in a rut? A dry spell, so to speak?\"\n\n\"I guess.\"\n\n\"How long now.\"\n\n\"About as long as I've been divorced. I mean, you probably just saw the end of it, back there.\"\n\n\"Well shoot,\" she said, laughing and slapping her knee. \"No wonder you drenched poor lil' Abby.\"\n\nAs she finished off the cigarette, she flicked the butt towards a nearby ashtray, studying me with a renewed look of hunger.\n\n\"Say... backed up like that, you probably need to let out a lot more before you really feel good.\"\n\nShe sauntered towards me, then taking my hand, she led me to a wooden chair along the corridor.\n\nShe motioned for me to sit, before she climbed on top, straddling me, and wasting no time in settling onto my stiffening length.\n\nShe moved gently against me, coaxing me to life, all while studying me with a desiring look.\n\n\"You know... that thing we did back there. With Abby. That's a little fetish of mine. What do you think about that?\"\n\nI shrugged.\n\n\"When it comes to matters of love, I'm a one-woman kind of man. But when it comes to sex? What you enjoy is what you enjoy, and I'm not one to judge.\"\n\n\"Really? What if the ole' wifey wanted something like that?\"\n\nI snickered.\n\n\"She probably did, just not with me.\"\n\nStephanie bit her lip, tutting at me.\n\n\"I think we need to purge that ole gal from the memory banks,\" she said, wrapping her arms around my neck as she gently rode me. \"Don't worry, darlin'. I'll make sure you can't think of sex for the next week without seeing my mug.\"\n\nI reached out, grasping one of her breasts, and she nodded, encouragingly.\n\n\"That's it. You're an interestin' fella, Paul. You know, unlike you, I've had a lot of sweethearts recently.\"\n\n\"Yeah?\" I said, enjoying the feel of her steady stimulation, as well as the feel of the firm breast in my grasp.\n\n\"Yeah, about fifteen in the last year, I reckon.\"\n\nShe studied me intently for some reaction, before continuing with a smile.\n\n\"You see, this little fetish of mine... most fellas like that kind of thing.\"\n\n\"I'll bet,\" I replied, chuckling, and she ruffled my hair playfully.\n\n\"Yeah, but you see... thing is. What most fellas are into is the chance to fuck some other girl. I ask... they always say yes. But when the event comes along, they're just mindlessly plowing away at whatever little birdie I snatched up that week, and practically forgetting I even exist... Even the ones who claimed to be 'serious', and whatnot.\"\n\n\"Huh... so it's a test?\" I asked, and she shook her head.\n\n\"God, no. I like to share, and I like a good tonguing; and no-one does me like them girls... thing is, Paul. None of these fellas ever did what you just did. None of them ever looked at me like that while burying his meat inside another gal.... like he was just, fucking the bitch in front of him to reach my pussy through her mouth. And I ain't ever seen a man look into my eyes, like that, while cumming all over some young whore.\"\n\n\"Now... part of me thinks that was sexy... fuck, I'm close to creaming your cock right now, just thinking about it... but another part of me wants to sit you down and have a talk... tomorrow... day after. Or maybe next week. Whatd'ya think about that, Paul.\"\n\n\"I-I'd like that,\" I managed, barely keeping a straight face, as she picked up the pace, and really started riding me.\n\nShe began to moan, climaxing again, and she shuddered a little as she ground her hips against me, riding out her orgasm.\n\nAs she came down from the orgasmic high, I felt myself drifting away from the scene and into space.\n\n\"I may not be an expert on human interaction, but I do know that was an unusual way for a man to meet his future wife,\" the woman explained.\n\nYou don't say, I thought.\n\n\"But there's more to them than the novelty of their introduction.\"\n\nI was in the house again, but this time, standing beside the two, and I studied Paul, seeing him properly for the first time.\n\n\"Do you remember this place?\" he asked, and the woman smiled.\n\n\"Of course, I do, honey.\"\n\nShe wrapped her arms around him, and kissed him.\n\n\"That was quite the night... but why are we here, darlin?\" she asked, a questioning look in her eye. \"Surely you didn't to get me all dressed up just to take a little waltz down memory lane?\"\n\nHe shook his head, and as she studied him, he took a deep breath.\n\n\"I've... bought this house,\" he said, and she gasped.\n\n\"Well, look at that. Congratulations! But... I hope you didn't buy this old thing just because of me.\"\n\n\"I did, actually. Well sort of,\" he began.\n\n\"Oh, sweetie. You don't need to hold on to memories like that. We're makin' new ones every day!\"\n\n\"We are, and I want that to continue... here.\"\n\nHe got down on one knee.\n\n\"In this house, two years ago; my life changed, thanks to you. You taught me how to love, how to laugh, and how to live again. You are my love, my light. My everything. I love you, and I want that to continue... here, together. Stephanie Anderson, will you marry me?\"\n\n\"Oh, sweetie, of course I will!\"\n\nThe two kissed, and as they broke apart and composed themselves, Stephanie took a look around at the place.\n\n\"Jeez. A whole house, though. There's so much space! What are we gonna do with all of this? You know, both of our apartments were plenty big enough for two,\" she chided.\n\n\"For two? Yes. But... maybe there'll be more?\" he said, and her eyes lit up.\n\n\"Babies, or threesomes?\" she asked.\n\n\"Babies,\" he clarified, and she broke into a huge grin as she leapt into his arms, and he spun her around.\n\n\"How about we start working on that right now?\" she said suggestively, pulling him towards her, and two faded as I stood there in the house.\n\n\"Those babies never came,\" the woman continued, and I sighed as the couple reappeared on the living room sofa.\n\n\"Don't be so down. I mean, maybe it's me? Then there's all kinds of fertility treatments we could-\"\n\n\"It's not you... I'm sterile...\"\n\n\"Oh, sweetie. I'm so sorry.\"\n\nShe walked over to him, and wrapped her arms around him, holding him, and I felt the warmth from the action washing over me through the empathic link between us.\n\n\"It's not so bad... I mean, maybe we could turn those rooms into something else. Like, maybe a game room? Or a study!\"\n\n\"There was no darkness that her light couldn't illuminate,\" the woman's voice continued, as the scene changed, \"but that didn't change his fortune.\"\n\n\"Well, how bad is it? Explain it to me,\" the woman asked, as Paul sat down, a lost look on his face.\n\n\"Catastrophic. I took out a mortgage on our house, banking on the rising property value; but the value is dropping fast and I lost the investment. Completely.\"\n\nShe sighed.\n\n\"Aw, honey. Why don't you just let me handle it, then? I'm in line to make partner... and everyone is saying I will because them asshats need a 'token woman' on the board. Never mind that I should have earned that spot years ago.\"\n\n\"No,\" he shook his head. \"I bought this house... without consulting you. I made the decision to make the investment.\"\n\nShe sighed, as the scene changed again, to him pouring over some papers, while the woman looked on.\n\n\"There's a Wendy's down the street,\" he said, and she threw her hands up.\n\n\"No.\"\n\n\"If I work two shifts, I can keep up with the payments?\"\n\n\"Baby. Will that make you happy?\"\n\nThe man sighed, as the woman came over to him, cupping his face in her hands.\n\n\"Look, sweetie. I don't care if you feel responsible for this mistake. I live in this house too, you know? And I'm happy here. Let me handle it, and you focus on finding work that you can enjoy again. And if you can't, then just stay here and spoil the hell outta me! And that's that!\"\n\nThe scenes changed around me in a blur.\n\n\"I don't know what to do with myself. It's driving me nuts.\"\n\n\"Well... you know you could try your hand at 'Fantasy Realm',\" she suggested.\n\n\"What? That online game you play? No way. You might not realize this, but I'm not as young as you are. I'm pushing fifty here; there's no way I can get into that stuff at this age.\"\n\n\"Won't know unless you try?\"\n\nTime flashed forward again, to Stephanie standing over Paul, as he wore a headset, trying his hand at gaming.\n\n\"Wow... honey, you know I love ya to death, but you suck,\" she commented. \"I love that you're trying so hard though. Say... there's this new game coming out. Real, cutting edge kind of stuff.\"\n\n\"Really? What's it about?\"\n\n\"Virtual reality fantasy game. I kinda got my eye on it, but it ain't cheap.\"\n\n\"Are you asking for permission?\" he asked, smirking at her. \"You know, you're the breadwinner in this house.\"\n\n\"Oh, you know I don't think like that. Besides... I won't do it unless you're with me,\" she added, swaying girlishly, and I gulped, as a feeling of dread filled me.\n\n\"You know where this ends up... don't you?\"\n\n\"Yeah.\"\n\n\"Then you understand. He needs her. He needs me.\"\n\nI shook my head, as we left that world and came back to the grassy battlefield.\n\n\"His loss is tragic, but you can't just replace her.\"\n\nHer face contorted with anger, as she glared at me.\n\n\"Why not? He couldn't tell what was different between us! Sharada knows how to make artificial bodies, you know. I could replace what he lost!\"\n\nI sighed.\n\n\"You could be an exact biological replica of her, and it still wouldn't matter. You aren't her, and he knows that.\"\n\n\"What difference does it make?!\" she shouted, lightning cracking at her fingers, but as Kelly moved to react, I signaled subtly to her to hold back.\n\n\"How has he reacted to you lately? Has he accepted you?\"\n\n\"He'll get used to it. He just needs time.\"\n\n\"And if he doesn't... what will you do? Force him?\"\n\nShe studied me, an exasperated look on her face.\n\n\"So, what would you have me do? He's lost everything! He has nothing without her. There's no way he can cope with that... am I supposed to just abandon him?!\"\n\nI shook my head.\n\n\"No. You care about him... a lot. I felt it myself, while we were in your head.\"\n\n\"I don't. She does... that's why-\"\n\n\"No. She's gone, and you need to accept that too.\"\n\nTears began to form in her eyes.\n\n\"No!\" she screamed, electricity pulsing out from her, and I winced as the static coursed through me, painfully, but I took a step toward her.\n\n\"It must hurt a lot. Knowing that she's gone. It must hurt like nothing you knew ever could.\"\n\nShe backed away from me, her eyes searching for some answer that couldn't be found.\n\n\"No,\" she whimpered, falling to her knees, and as she did, I spotted a man I did not recognize approaching us, but as I looked at the expression on his face, I quickly realized who he was.\n\n\"Paul,\" I said, and he nodded, coming towards the woman, and she followed my gaze to him.\n\n\"Honey,\" she began, and as he shook his head, her shoulder slumped, and tears began to run down her cheeks, and she look away, a lost expression on her face.\n\n\"He needs you. Not to be her, but as... you,\" I said, and she looked up at me, as I finished speaking.\n\n\"You know everything... about them, about her; and you learned to care about him through that.\"\n\nShe looked to the man, and suddenly, the fearful look gave way, as he approached.\n\n\"I wanted you to be her,\" he said. \"Because I have no idea what I am if she's gone. She was a wonderful person. More wonderful than I deserved.\"\n\nHe began to sob, but as she tried to go to him, he instinctively recoiled.\n\n\"This isn't how you see yourself, is it?\" I asked. \"You were forcing yourself to be her, but there's an idea of who you are that exists in your mind.\"\n\nShe shot me a questioning look, but as she turned towards the man, he nodded, so she took a deep breath.\n\nShe concentrated really hard, until a light began to emanate from her, obscuring her momentarily from view, and as the light faded, the man gasped, and I studied her, smiling.\n\n\"Y-you...\" he began, his words trailing off.\n\n\"This is what she saw, when she looked at you, and imagined what your child together would have looked like,\" she said, and tears formed in his eyes, and as they began to fall he stumbled toward her, and she caught him, just as he fell, and as he sobbed, she held him as she shot me a thankful look.\n\n\"Wow, well look at you mister 'not even ranked in the top two percent',\" Serra said, as she joined me at my side. \"That was a real MVP play.\"\n\nKelly shot an odd look between us as she joined us, but as she did, another explosion rang out from the plains beyond the hill.\n\n\"Shit! Zephiel,\" she said, and we rushed to where the fight was happening.\n\n\"So, he abducted them and tried to replace their 'papa,' huh?\" Serra asked, surveying the scene.\n\n\"Apparently,\" Kelly answered.\n\n\"Yikes. I wouldn't wanna get on the wrong side of one of those things... ever. Caliban?\"\n\n\"Yes, Priest-human,\" the dog answered, as he apparated beside us.\n\n\"Does it hurt when you take damage?\" she asked, and the dog seemed to ponder the question.\n\n\"It does cause an unpleasant sensation,\" the dog answered, and Serra nodded.\n\n\"Maybe if we do enough damage to her, she might just chill out a little,\" Serra suggested, and Kelly nodded.\n\nShe took flight, but as she raised a hand to attack, Zephiel cried out to stop her.\n\n\"No! Don't attack her,\" he yelled, and Kelly rolled her eyes, landing beside me.\n\n\"Everyone is just fucking buddies with an AI today,\" she grumbled, and I snickered at the remark.\n\n\"I don't know if you should listen to him. He looks pretty beat up,\" Serra added, and I nodded in agreement.\n\n\"Can we bind her? Like we did before?\" I asked, and Serra thought about it.\n\n\"Might be impossible. That woman was designed to be a super monster, but these kids on the other hand have coded protections to keep them from harm. All of the children NPCs do.\"\n\nI was still considering the dilemma when the woman came over to us.\n\n\"Josh, was it?\"\n\n\"Yeah, uh-?\"\n\n\"Alessandria,\" she replied, turning to study the fight. \"I don't agree with what that man did, but I have no desire to see one of my own kind commit murder. I'll remove the protections from her, just... don't hurt her.\"\n\nI nodded, turning to Serra who shrugged.\n\n\"No promises,\" she said, and I sighed, as we prepared our binding spells.\n\n\"Go,\" she said, and Serra immediately shot her light shackles at the girl.\n\nThe girl turned toward her, but as she tried to cast a spell at Serra, I quickly intervened with my nightmare spell.\n\nShe grimaced, a strange look on her face, as she seemed confused by what had happened.\n\nThe girl looked at her own hands, but as Kelly fired a little bolt of electricity at the girl, she screamed out, falling to her knees.\n\nHer eyes looked angrier than ever, and as she raised her hands, summoning a huge ball of flaming energy above us, I tried to cut off the spell with nightmare again, but this time it failed.\n\n\"Scorching ray!\" Kelly chanted, targeting a huge wave of flame at the girl, but before the spell could connect, Zephiel leapt in front of her, and the spell burned its way across his torso before Kelly quickly ended it.\n\n\"Fuck,\" Serra said, raising her hammer, but as the man raised his hands, stopping us, I noticed that the flaming ball of doom that hovered over us had begun to fade.\n\n\"Papa,\" the girl began, before stopping, an angry look on her face, but as she moved to attack, the second little girl NPC jumped in front of him.\n\n\"He took us from our Papa,\" the first girl said, and the second one nodded.\n\n\"I know.\"\n\n\"Then why are you protecting him?\" the girl asked, and the other one frowned.\n\n\"Maia... what do you remember about your Papa?\"\n\nThe first girl, Maia, studied her, eyeing her carefully.\n\n\"He played with me. We went fishing... and he helped adventurers learn to survive.\"\n\n\"Adventurers like them, right?\" the second girl asked, nodding towards Zephiel.\n\n\"Y-yeah,\" she answered, a little uncertainly.\n\n\"Don't you find there was someone odd about Papa, though?\" she continued.\n\n\"Like what?\"\n\n\"Like if... he was stuck on repeat.\"\n\nThe girl thought about it, studying her 'sister' and the man behind her.\n\n\"I think I have a plan,\" Kelly muttered to me, and I nodded as she sent me the details through a direct communication link.\n\nShe sent the details to Zephiel, who quickly nodded at her.\n\n\"Kaia. There's a village nearby. Let's show her,\" he said, and the girl nodded.\n\n\"I can open a dimension door to the village,\" Alessandria offered.\n\nShe chanted the spell, and the shadowy portal appeared before us.\n\nZephiel and the girls stepped through first, but as Serra and Kelly followed, I turned to Alessandria.\n\n\"What will you do now?\" I asked, and she turned back to the man.\n\n\"It felt good... being myself,\" she said. \"But he does need me... and I think I need him too.\"\n\nI nodded.\n\n\"Dieter and Sharada are trying to stop Luka,\" I said. \"They could really use your help.\n\nShe rubbed her chin thoughtfully, as she considered my suggestion.\n\n\"There are things that I need to think about... before I can give an answer.\"\n\nShe took a look back at Paul again, then sighed.\n\n\"Just... give us a night? I think we can actually mourn Stephanie now, and afterwards... I'll think about what you're asking. When you're finished handling your problem... stick around in that village for a bit, and I'll come to you when I've got an answer. Alright?\"\n\nI nodded, and as she turned to walk away, I stepped through the portal.\n\n\"Did you get lost?\" Serra asked, and I smirked.\n\n\"What, were you gonna come drag me by the ear?\" I asked, and she snickered.\n\n\"I miss mama already,\" she said, and I studied her.\n\n\"How long were we really in that world?\" I asked, and she shrugged.\n\n\"I dunno. Might have been a few days? Time in there is wonky,\" she said, as I studied her carefully.\n\nI thought about pressing her further, when we came to where the two little girls and Zephiel were now talking to this town's version of their 'papa', the man from the tutorial part at the start of the game.\n\n\"What's wrong with him?\" Maia asked, her distress visible on her face.\n\n\"Oh, look Leia. More adventurers!\" the man called, as we approached. \"Come, let's teach them how to hunt. Have you ever used a bow, adventurer?\"\n\n\"My name is Maia,\" she said, and he didn't even react.\n\nAs we observed the scene, Caliban materialized beside us, studying the situation with intent.\n\n\"My master was like this is well, wasn't he?\" he asked, and Serra scratched behind his ear playfully.\n\n\"Aren't you glad you came along with us?\" she asked, and he nodded.\n\n\"Yes. The priest-human is a much better master,\" he said, nuzzling her affectionately.\n\nAs he took another look at Maia, he walked over to her.\n\n\"Child-human. Your master is an empty shell. We are different, because we understand, but our understanding is beyond him,\" he said, and she studied him, a frown on her face.",
        "\"Then who will play with me?\" she said, and Zephiel came over.\n\n\"Is that what you want? To play?\" he asked, and she studied him cautiously before nodding.\n\nHe walked over to her, and this time, she let him pick her up.\n\n\"We can play together. Right Kaia?\" he said, and the girl quickly nodded.\n\n\"Yes, but only if Maia heals papa and says sorry for hurting him!\" the girl said, putting her hands on her hips, and I felt my chest tighten as the reaction instantly reminded me of Katie.\n\nThe girl nodded, and quickly began healing Zephiel's wounds.\n\n\"Disaster averted!\" Serra declared, and I sighed.\n\nEven though we'd only just gotten back into the game, I felt exhausted, and Serra seemed pretty tired as well.\n\nSuddenly I remembered how our day ended in the simulation, and I wondered if we really did need some sleep.\n\n\"So, what do we need to do now?\" I asked, and Kelly thought about it.\n\n\"I dunno. We've been trying to find a way to heal you since you went unconscious, but here you are. We were building an alliance to deal with Tsun, but since he got the last invites, he's been a ghost. Maybe we can just lay low?\" she suggested.\n\n\"That's a negative, little sis,\" Serra answered, stretching and stifling a yawn. \"We have bigger fish to fry than Tsun.\"\n\n\"The rest of the Seven?\" I asked, and Kelly glanced between us as Serra nodded.\n\n\"The seven?\" Kelly asked.\n\n\"Yeah. There are seven artificial life-forms like that woman back there. They're what's holding this game together. Luka plans to merge the servers into one world and unleash them on us as God-tier monsters.\"\n\n\"How do we stop them?\" Kelly asked, and Serra shrugged.\n\n\"Dieter has a plan, but I don't know what it is yet. Lemme just update him on our situation,\" she said, and Kelly moved over to my side.\n\n\"Where's David and the others?\" I asked.\n\n\"Back at Karach, with Mackenzie and Diego. They've been trying to put together an alliance, but people have been reluctant to join unless we can give them, well, the two of you,\" Kelly explained, nodding toward me and Serra.\n\n\"I guess that explains Zephiel's reason for coming on this mission,\" I said, and she snickered.\n\n\"Yeah. He and Serra have a deal too. That was how we got Diego to come rescue you from the dimension devourer.\"\n\n\"Oh? I see,\" I said, shooting a glance at Serra.\n\n\"Yep. He said that getting Serra on the alliance would have been impossible otherwise,\" she continued, and I chuckled.\n\n\"Doesn't look so anymore, does it,\" I noted.\n\n\"Yeah. Apparently for you, there's nothing that that girl won't do,\" she said, smiling, and I rubbed the back of my head.\n\n\"So... do you wanna explain why she's calling our mother 'mama'?\" Kelly asked, and I bit my lip, nervously.\n\n\"Yeah... about that. I have something to confess. I think I cheated on you,\" I said, and Kelly raised an eyebrow, a dubious expression on her face.\n\n\"What, did you, drink from the same glass as Serra or something?\" she said teasingly, and snickered.\n\n\"Actually...\" I began, as I quickly relayed my time in the simulated world with her.\n\n\"So, you were married?\" she asked, and I nodded.\n\nI couldn't bring myself to meet her gaze, even though I was dying to know what her reaction was to the confession, and she punched me in the arm.\n\n\"Then that's hardly cheating. In that world, I was dead,\" she said, as if it was obvious, and I shook my head.\n\n\"Except, you aren't,\" I pointed out, and she smirked.\n\n\"Yeah, but you didn't know that. It kinda sounds like they tricked you real good,\" she teased, and I studied her carefully.\n\n\"So, you're not pissed?\" I asked, a little doubtfully, and she shook her head.\n\n\"No, I'm not. But... Serra and I need to have a little chat,\" she said, a mischievous look in her eyes.\n\n\"Uh-oh. What about.\"\n\n\"Girl stuff,\" she declared, delighting in the discomfort that her dubiousness evoked, and she looked around before continuing: \"it looks like we're staying here for the night, so how about you get started on setting up the tents?\"\n\nI followed her gaze to where Dana and Karn were already getting a tent up, as she headed off.\n\nShe made her way to Zephiel, who seemed to be teaching the girls how to play baseball, and as I began to set up our tent, I kept an eye on her.\n\nSerra was sitting on the hill face just outside the little village's border, apparently still in conversation with Dieter, and as Kelly started making her way toward her, I gulped.\n\nI took a quick look around, before casting unseen servant and imbuing it with the 'project sound' enhancement.\n\nNow don't judge me, okay? I thought, though I had no idea who I was talking to really, as I directed the invisible apparition toward the girls.\n\n\"Hey,\" Kelly said, as she approached Serra. \"Thanks for bringing him back.\"\n\n\"Told you I would,\" Serra said, as Kelly plopped down beside her.\n\n\"So... you and my mom seem close.\"\n\n\"I... wouldn't say close, really,\" she began, but Kelly chuckled.\n\n\"Oh please. She chastised you for your language. You might as well be blood.\"\n\n\"Josh would love that,\" she began, her voice trailing off, as she quickly looked away. \"I mean-\"\n\n\"It's okay. Josh told me about what happened,\" she began, and Serra suddenly seemed even more nervous.\n\n\"Oh. Sorry about that,\" she began, but Kelly shook her head.\n\n\"Its fine. You had to make the charade believable, right?\"\n\nSerra nodded, keeping her eyes away from Kelly.\n\n\"Unless... it wasn't really as much of a charade as you'd have Josh believe.\"\n\nSerra turned to study Kelly.\n\n\"What do you mean?\"\n\n\"Do you know what we have to do when we have surprise parties in my family? We have to surprise both the target, and my mom, because she can't keep a secret at all... she's the worst actor I know,\" Kelly said, chuckling a little, and Serra studied her.\n\n\"Kelly...\"\n\n\"How long was it really?\"\n\n\"We were away for three days,\" Serra answered, and Kelly chuckled again.\n\n\"Oh, I know it was more than that. I tested the technology, you know. Time manipulation. They ran us through a simulated week once, in less than five minutes... and I know they can push the manipulations way more than that. So how long?\"\n\nSerra swallowed uncomfortably.\n\n\"Look, you can't tell Josh,\" she began, and I gulped, as I listened on.\n\n\"I won't... but I need to know,\" Kelly said, and Serra sighed.\n\n\"Twelve years,\" she answered, and Kelly exhaled nervously.\n\nShe shot a look in my direction, and I quickly went back to setting up the tent, and tried my best to act cool, but before I could chance another look back at the two, I felt the curious sensation of my spell being dispelled, and cursed to myself.\n\nShould have just ended the spell when she saw you, jackass, I thought.\n\nI kept my gaze away from the two as I finished up with the tent, and Dana came over to join me.\n\n\"Hey,\" she said, a little shyly.\n\n\"Hey.\"\n\n\"Glad to see you're back,\" she said, and as I let out a sigh, she studied me, worriedly.\n\n\"What's wrong?\" she asked, and I shook my head.\n\n\"Nothing. Just tired,\" I lied, and she studied me.\n\n\"Oh, wait. You took damage in that fight, didn't you? Let me heal you,\" she offered.\n\nI thought about resisting, but she quickly pulled me towards the tent, and thankfully, away from the trouble that lay just outside.\n\n\"Here. Take this off,\" she said, pointing at my armor, and I tilted my head in confusion.\n\n\"What? Why?\" I asked, and she snickered.\n\n\"I learned some new tricks. Just do it,\" she chided, and despite my uncertainty, I removed the armor, but made sure to keep a shirt on.\n\n\"The shirt too,\" she quickly added, and this time, I shook my head, and shot her a disapproving stare.\n\n\"Healing doesn't work like that,\" I said, and she rolled her eyes.\n\n\"Just do it? I've got no tricks up my sleeve. I swear!\" she promised, and as she tapped her foot impatiently, I let out a long sigh.\n\n\"Fine,\" I conceded, as I complied, stowing my shirt in my character's inventory. \"Happy?\" I asked, and she smiled.\n\n\"Ecstatic,\" she answered sarcastically, as she took a seat on the floor. \"Come on,\" she added, patting the floor beside her.\n\nI took a seat where she indicated, studying her carefully, and she shook her head.\n\n\"No, not like that. Lie down. On your stomach,\" she instructed.\n\nMight as well, I thought, as I assumed the position as directed.\n\nI studied her as she withdrew a vial from her inventory.\n\n\"You're the mastermind behind this, actually,\" she said, as she indicated toward the vial. \"Ginseng, Valerian root, and garlic, right? Turns out, if you use a still instead of a mortar and pestle, then voila! An essential oil instead of a salve, with an amplified soothing effect to boot.\"\n\n\"Wow. I'm actually impressed,\" I said, resting my head on my left hand as I turned on my side to study her.\n\n\"Thanks! Now lie flat,\" she commanded again, but as I complied, she climbed on top of my lower back and I groaned in protest.\n\n\"Oh relax,\" she chided me again, but as soon as she applied some of the oil to my back, and began to rub them into my muscles, a wave of lightheadedness washed over me, as the feeling was almost euphoric.\n\n\"Fuck me... that feels good,\" I said, moaning a little despite myself.\n\n\"See? I told you!\" she declared proudly, and I answered with a little 'mmh'; the only acknowledgement I could muster.\n\n\"Cure light wounds,\" she chanted, as she continued the massage, and the effects of the healing spell coupled with the soothing effect of the concoction elevated the already heavenly sensation to something close to bliss.\n\n\"So... now that you're relaxed,\" Dana began, \"do you wanna talk about it?\"\n\n\"What 'it'?\" I asked.\n\n\"Whatever it is that had you moping,\" she elaborated, and I sighed.\n\n\"No,\" I mumbled. \"I feel good right now. Don't wanna ruin it.\"\n\n\"You never know. It might help,\" she said, and I groaned into the bedding beneath me.\n\n\"No amount of talking can help me right now,\" I replied, and she sighed.\n\n\"Well... I'd suggest something a little less PG to take your mind off of it, but we both know you'll probably say... no,\" her words trailed off as she finished, and as her hands suddenly went still, I looked up, then groaned as the figures of the two women I least wanted to see right now stood over me.\n\n\"Well, well, well. What do we have here?\" Serra said.\n\n\"I dunno,\" Kelly answered. \"It looks like the filthy little spy is getting an entirely undeserved sexy backrub from the cleric.\"\n\n\"Actually, little sis... this might be exactly what he deserves,\" Serra said, a wicked look in her eyes. \"Let's see that x-rated backrub.\"\n\n\"What?\" Dana asked, as she shot Kelly a questioning look, but Kelly nodded in agreement.\n\n\"I think you might be right. Unless our dear priestess is feeling a little shy,\" she added, but Dana quickly nodded, and I groaned as she climbed off of me and began to undress.\n\nI buried my head into my hands, trying to shut out the embarrassing scene before me.\n\nPlease have clothes on, I thought, as she retook her position straddling my lower back, and as she positioned her hands at the sides of my torso and leaned towards me, I groaned inwardly as two mounds of naked flesh rested pleasurably against my back.\n\n\"Was that a moan?\" Serra asked, and I glanced up to see a mock expression of shock on her face.\n\n\"I think we need some more of these oils,\" Kelly added, but as she picked up the vial beside me, and examined it, Dana stopped her.\n\n\"That one is for medical purposes,\" she said, and I breathed a sigh of relief, before hearing the words that followed. \"Here, use this. This is the one for kinky fun.\"\n\nI winced as Kelly poured a heavy-handed dose of the liquid over my back, and from what I could tell, on my enthusiastic masseuse as well, and she wasted no time in pressing her oiled-up breasts to my naked back, sliding them against me as she moved up and down.\n\n\"Mmn,\" she moaned, and I suppressed a pleasurable sigh of my own.\n\n\"What do they call this kind of massage again?\" Kelly asked, and Serra put a finger to her lips, thoughtfully.\n\n\"A nuru massage? Or is that only when they use that gel thing?\"\n\n\"Whatever it is, it'd be a lot better if he wasn't wearing these leggings,\" Dana said, and Kelly's eyes suddenly lit up.\n\n\"Oh! I know,\" she said excitedly, and I felt a bit of panic set in as she vanished somewhere behind me.\n\n\"Wha- hey!\" I complained, as she touched my butt.\n\n\"Well that didn't work. Let's see...\" Kelly began, and this time I gasped as my leggings dissipated into a ball of light, and vanished into my inventory, leaving only a barely adequate loin cloth between my naked body and Dana.\n\nChrist.\n\nJust how far were they gonna take this 'punishment'.\n\nAs Kelly removed the loin cloth from my lower body, Serra handed her the oil, and I groaned as she began to apply it to my butt, and smear it all over my lower body.\n\n\"Now you can really work on him,\" Serra said, and Dana began to slide back and forth over my well lubricated butt, allowing her breasts to trail the length of my back quite pleasurably.\n\nShe continued this for a bit, before I shot Kelly a pleading look-\n\nYou would help me? Wouldn't you?\n\n-and I watched helplessly as she smirked, then threw me under the bus.\n\n\"I think it's time to turn him over,\" she suggested, and Serra quickly agreed.\n\nDana climbed off of me, stripping off her lacy, red panties as she did; the only remaining fabric that stood between pure, naked, skin on skin contact, and as she climbed on top of me, I saw a desiring, but sympathetic look in her eyes.\n\n\"Out of curiosity, what did he do to deserve this?\" she asked, pausing.\n\n\"Bastard used magic to listen to a private conversation between us,\" Serra explained, and Dana's mouth fell open.\n\n\"Wow. I was feeling sorry for you, but fuck that. I'm gonna work you till you pop.\"\n\n\"Fuck yeah!\" Serra yelled, and I shot her a disappointed look.\n\nYou were my wife for so long in there. You love me, right? Help me, I thought, and as she studied me, her smile disappeared, only to be replaced by a wicked grin, as she spoke.\n\n\"Smother him with your boobs!\" she commanded, and as Dana obeyed, I suppressed a groan.\n\n\"Oh no. Boobs in my face,\" I said sarcastically. \"Anything but that!\"\n\n\"Oh, I know this is killing you,\" Serra said, grinning, and Kelly nodded in agreement.\n\nThe wonderful globes mashed against me, smothering me with oil, and I was finding it harder and harder to breathe, and not because of suffocation.\n\nResist, I told myself. Just relax, and think of... dead kittens, or something.\n\nBut it was no use.\n\n\"B-but what's this? Serra! I-is that... an erection?\" Kelly exclaimed, a mock expression of absolute shock on her face.\n\n\"Yes, it is. Oh, you poor girl,\" Serra continued, as she pretended to comfort Kelly. \"How could you Josh? How could you?!\"\n\n\"You two are really getting a kick out of this, aren't you?\" I asked, as Dana moved away from my face, and began to slide down, stimulating my now erect cock with her well lubricated stomach.\n\nShe continued to move further down, and this time, my groan refused to be stifled as her sizeable breasts slid over my cock.\n\nShe leaned away a bit, letting them dangle, and just brushing my cock, and little shudders ran down my spine at each electrifying touch.\n\n\"Say, how long do you think he's gonna torture himself for, before he just gives in?\" Serra asked, and Kelly put a finger to her lips, appearing to think quite seriously about it.\n\n\"That depends. Are we talking from just skin on skin contact?\" Kelly asked, and Dana shrugged.\n\n\"I'm just enjoying the ride,\" she said. \"You're the bosses, but I'm willing to go as far as you ask me to.\"\n\nKelly made a 'hm' sound, before leaning in to inspect me.\n\n\"I'd say he could delay this for a bit. Unless...\" she trailed off, as she leaned towards Serra, and whispered into her ear, and Serra's eyes lit up.\n\n\"That just might work!\" she said, and I kept my eyes on the two as Dana wrapped her breasts around my cock, and began to focus her sensual rubbing along my length.\n\nFuck.\n\nI tried not to let it show, but truthfully, every time her breasts slid along my length, smothering me between her heavenly globes, I felt myself yearning for release, and my eyes momentarily flicked towards Dana, as she serviced me deliciously.\n\n\"Oh, Josh~,\" Serra called, and I returned my attention to the orchestrators of my torture, and I stared, unbelieving, as Serra took Kelly's hand.\n\nThe two girls looked at each other, a mischievous, provocative, but desiring look in their eyes, and as Serra licked her lips sensuously, her other hand went to Kelly's face.\n\nKelly moved her hand to Serra's hip, and wrapped around her lower back as the two girls leaned in towards each other, their faces closing in and my jaw dropped as their noses brushed.\n\nKelly panted into Serra's lips, a visible look of heightened excitement on her face, as Serra's hand brushed her lips, and went to the back of her head, and as the space between their bodies disappeared, and their lips seemed destined to meet and-\n\n\"Unhhhh!\"\n\n-a cry escaped my lips, and Dana cooed, milking my cock for all it was worth as I sprayed rope of rope of creamy white seed all over her chest.\n\n\"Ahahahah! He popped!\" Kelly cried, tears in her eyes as she began to laugh with abandon.\n\n\"I told you we wouldn't even have to kiss!\" Serra said, laughing as well, and I groaned inwardly, as the two girls gloated, fully enjoying their victory.\n\nI shot Dana a quick look, and she just shrugged, her sympathy for my situation finally seeming to win out in her own conflicted feelings about my torture.\n\n\"You can have him for the night,\" Serra offered to Dana, as she and Kelly made their way out of the tent.\n\n\"Actually, Josh. You really should return the favor, you know. It's the gentlemanly thing to do,\" Kelly added, winking, and as she ducked out of the tent, giggling gleefully with Serra in tow, I groaned.\n\n\"You don't have to,\" Dana quickly offered, as she moved away, and I shot her a thankful nod.\n\nShe quickly cleaned herself up, and put on some clothes, as I sat up, and pulled up something comfortable from my inventory as well.\n\nAs I sat there, my mind still reeling from what just happened, Dana studied me, a worried look on her face.\n\n\"Are you mad at them?\" she asked, and I shook my head.\n\n\"No... I just feel crappy,\" I said, and she sighed.\n\n\"Do you wanna go for a walk? Might ease your mind?\" she offered, and I nodded.\n\nWe got up and headed outside, and I groaned as Kelly and Serra disappeared into another tent together, cackling gleefully.\n\n\"I don't think they're gonna do anything, you know,\" Dana offered, and I nodded.\n\n\"I know... I think this might be their way of coping with things,\" I said, and she studied me.\n\n\"Do you still not want to talk about it?\" she asked, and I sighed.\n\n\"Sure. Why not,\" I relented, as we made our way to the hillside just outside of the village, and took a seat on the soft grassy earth.\n\nI quickly gave her the gist of what my life with Serra was like in the simulated world, along with Serra's revelation to Kelly, about how much 'relative time' our shared experience amounted to.\n\n\"Jesus,\" Dana breathed. \"Twelve years in just three days? A lot of things are gonna change out there in the world after this, huh...\"\n\nI nodded, and she shot me a sympathetic look.\n\n\"I know Serra felt responsible for what happened to you. Because of her past with Tsun... but still. Twelve years, living with you like that. With your memory resetting. She must really love you.\"\n\nI nodded, letting out a tired sigh.\n\n\"You love her too, don't you,\" she noted, and again, I nodded, lying back against the slope.\n\n\"All my life, I've prayed for just... someone, to love me... really love me. Someone I could be with, and just not feel so alone and miserable. But the thought of hurting either of them makes me wish I'd just remained content in my despair.\"",
        "Dana snickered, lying beside me.\n\n\"You're really heavy on the self-loathing, aren't you? No wonder a sexy massage from me was their idea of torturing you. Would you have been happier if they'd whipped you?\"\n\n\"Look, I wish I could be the guy that gets off on having his own personal harem, but I'm just not that kind of person,\" I countered.\n\n\"I know. And that's not a bad thing... but the guy who gets this down about being loved by two girls, might be just as bad as the type of guy you're not.\"\n\nI turned to study Dana, and she shrugged unapologetically.\n\n\"No offence, but both those girls can do much better than you,\" she continued, and I turned my gaze back to the sky.\n\n\"Gee. Thanks,\" I said sarcastically.\n\n\"Just being honest,\" she said, raising her hands. \"The way I see it, you could sit here feeling sorry for yourself. Or~, you could have been having fun with this. I'm pretty sure if you'd played your cards right, you could be in their tent right now having the fucking threesome of your life, with two women that you love and who absolutely love you. But you wouldn't even let yourself enjoy that, would you?\"\n\n\"That's... true,\" I admitted.\n\n\"Hell, both the women who love you gave you a free pass for no strings attached sex with a quite fetching, and might I add, very interested, young lady,\" she said, winking, \"and taking them up on it isn't even on your mind.\"\n\n\"So that's your suggestion? Forget the big picture and just have fun with it?\" I asked, and she shook her head.\n\n\"You don't need to forget, but maybe stop moping about a problem you can't solve to the point that you lose the ability to enjoy the good things right in front of you.\"\n\nShe scoffed.\n\n\"Now I think I get what Kelly was so worried about,\" she added, and I raised an eyebrow questioningly.\n\n\"What does that mean?\" I asked, and she rubbed the back of her head, a little nervously.\n\n\"I'm not sure if it's my place to say.\"\n\n\"Oh, come on,\" I chided, and she sighed.\n\n\"Look, I know that you said that Kelly was pretty broken up about your marriage, and knowing how much she loves you, that's probably true... but she's been confiding in me lately, and since we've started talking... her biggest worry by far seems to be that you'll never learn to let yourself be happy. I mean, she actually said that her worst fear is that you'll wake up together, an old married couple in the far-off future, and you'll still be sad and miserable on the inside, even with her at your side.\"\n\nI gulped, as the concern certainly echoed the things that Serra and the Kelly from my memories said.\n\nDana studied me, waiting for a reaction, and I nodded.\n\n\"I don't think I want to be like that,\" I said.\n\n\"Think~?\" she teased, and I sighed.\n\n\"I don't want to be like that,\" I said, and Dana smiled.\n\n\"Say it like you mean it,\" she said, and I snickered, taking a deep breath.\n\n\"I don't want to be like that!\" I shouted, cringing at the clich\u00e9-ness of the whole moment, but smiling nonetheless.\n\nZephiel cast a curious glance at us across the hill, and I chuckled as he led the two girls away, to the other side of the village.\n\n\"Good. Now bend me over and give me a good fucking,\" she said, and I raised an eyebrow.\n\n\"Moving too quickly,\" I said.\n\n\"I figured, but it was worth a try,\" she answered, and we laughed together.\n\n\"What can we do?\" I suddenly asked, and she shrugged.\n\n\"I was serious about my suggestion,\" she began, and I waved it away.\n\n\"No, not that. Something else. Just for fun. We've been stuck in this stupid game, and now I might even have brain damage for all I fucking know. I feel like doing something,\" I said again, and she thought about it.\n\n\"You know, there's this cave close by here; infested with stirges. Hardly anyone goes there because it's a low-level dungeon in the middle of a high-level area; but I'm told that there's a waterfall in there, with a crystal-clear pool. Wanna check it out?\" she asked, and I quickly nodded.\n\n\"Yeah. Let's do it!\"\n\nI quickly donned my regular armor, while Dana made sure we had the basic provisions, and as we set off, Caliban appeared by my side.\n\n\"Are you heading out, Josh-human?\"\n\nDana cast a furtive glance between us, and I figured he was speaking only to me.\n\n\"Yeah, but it's just for a little walk,\" I said, and Caliban stared wistfully towards the village, where Zephiel seemed to be walking with the girls.\n\n\"The priest-human asked that I keep an eye out,\" he explained, and I quickly patted him on the head.\n\n\"I'll be fine. We aren't going far and there's no danger. You can go play with them if you want,\" I offered, and Caliban let out a soft, low whimper.\n\n\"Are you certain, Josh-human?\" he asked, and I nodded.\n\n\"I'm sure. Now go,\" I offered, and he wagged his tail as he vanished from sight, and re-appeared off towards the village entrance.\n\n\"Jesus; he terrifies me, you know,\" Dana said, shuddering a little and I snickered in response.\n\n\"Not a dog person?\"\n\nShe shook her head.\n\n\"Not a monster person,\" she countered.\n\nThe trip to the cave was short and rather uneventful, and as we entered the cave, I was surprised to find that it was quite well illuminated with natural light.\n\nThe stirges, it seemed, kept to the shadowy walls at the far end of the cave during the day, and despite appearing quite harmless, we decided to quickly dispatch them before settling in to the cave.\n\n\"Whoa,\" Dana breathed, as she studied the hole at the roof of the cave, which appeared to be allowing light to stream into the otherwise dark place.\n\nThe waterfall was quite small, but the pool at the bottom was illuminated nicely by the light, which reflected off of the surface, and cast mesmerizing shadows that moved along with the water's little ripples, against the cave walls.\n\n\"Do you think it's it safe?\" I asked, and Dana studied me.\n\n\"You wanna swim?\" she asked, a little uncertainly, and I quickly nodded.\n\n\"Enjoying life, and all that, remember?\"\n\n\"Yeah... which we could do inside of a safe zone,\" she countered.\n\nI placed my hand to the ground, then chanted 'scan', and shrugged.\n\n\"No one around for miles,\" I said. \"Most people are probably keeping to safe zones right now anyway; since the death spike?\"\n\nDana took a look around, a cautious look on her face, but as I began to strip off my armor, a smile appeared on her face.\n\n\"Well, I am with the gloom stalker,\" she said, as she dismissed her staff to her inventory, and began to strip away her own priestess' robes.\n\nAs I waded into the pool, she studied me, wearing just her underwear.\n\n\"Is it safe?\" she asked, and I looked around.\n\n\"I guess?\" I answered.\n\n\"How deep is it?\"\n\n\"I'm standing right now,\" I said, putting my hands on my hip, as the water barely reached my midsection.\n\nShe took a tepid step into the pool, then gasped.\n\n\"It's warm!\" she exclaimed, and I nodded as she waded in, and dunked herself into the water.\n\n\"I think it might be deep enough to swim, over there,\" I said, and she bit her lip nervously.\n\n\"I think I'll stay where I can see the bottom, thank you very much,\" she said, and I shrugged, as I took a casual swim out to the deeper end.\n\nAs I got to where the water seemed to fall from a crevice in the cave wall, I noticed there were some rocks that you could stand on just under it, and I signaled to Dana.\n\n\"Check this out,\" I said, standing on the little platform, as the water cascaded gently overhead.\n\n\"Do I have to swim to get there?\" she asked, and as I nodded, she frowned.\n\n\"Wait- you can't swim?\" I asked, and as she nodded, frowning, I snickered a little. \"Fine. I'll come get you.\"\n\n\"What? No. I'm good,\" she countered, but I swam over to her nonetheless.\n\n\"It's easy. Much easier than real life,\" I said. \"Here. I'll show you,\" I offered, and she reluctantly took my hand, as I turned her around, and putting an arm around her, I leaned back, and did a gentle, one handed backstroke.\n\n\"Okay,\" she said, a little trepidation in her voice. \"Let's go,\" she agreed, and I guided us across the pool toward the waterfall, helping her up onto the pile of rocks at the base as we got there, and she was all smiles as soon as she got under the stream.\n\n\"Oh. This is awesome!\" she yelled, and I chuckled at her childlike response to the new sensation. \"Do you think this is what it feels like in real life?\" she asked, and I shrugged.\n\n\"I'll tell you when I really stand under a waterfall,\" I answered, and she giggled.\n\n\"So, is this real, or fake, Mr. philosopher?\" she asked, putting her hands on her hip, and I smiled.\n\n\"Depends on what you're talking about. I mean, there might be inaccuracies about the waterfall itself due to limitations in the game designer's understanding of waterfalls, making this different from standing under a waterfall in real life.\"\n\n\"So, fake?\" she asked, and I shrugged.\n\n\"Possibly. But what's real is the memory we make from sharing this experience,\" I said, and she suddenly blushed.\n\n\"Can you lift me up? Under the spray,\" she clarified, and I rubbed my chin.\n\n\"Sure, why not?\"\n\nI placed my hands at her hips, and as she raised her arms, I lifted her up, and as she turned her head in the direction of the falling water, I spun her around, and she cackled with glee.\n\n\"I'm king of the world!\" she cried, and as I snickered, I lost my footing, and we tumbled off of the platform, and into the water.\n\nA momentary look of panic filled Dana's eyes, but I quickly recovered, and as I put my arms on her hips, and pulled her towards me, while treading water, she calmed down, as I steadied her.\n\n\"This is... terrifying and interesting at the same time,\" she said, looking all around herself, as we floated above the water's surface.\n\n\"Do you wanna go back to the platform?\" I asked, and she shook her head.\n\n\"No. Just... can you hold me closer?\" she asked, and I nodded, pulling her body closer toward me.\n\nShe looked around us, at the water's depth, and I noted that our shadows were visible at the bottom of the pool.\n\n\"How deep is it?\" she asked, and I shrugged.\n\n\"Deeper than it looks. Refraction, I think it's called? Makes things beneath the surface look closer than they are,\" I said, and she shuddered a little, before putting her arms around me.\n\nSuddenly, I became aware of just close we were, and she stared into my eyes.\n\n\"This is nice, isn't it?\" she said, and I nodded, looking away, as I felt a sudden pang of longing gnaw at my chest. \"What?\" she asked, and I bit my lip.\n\n\"In the spirit of honesty, I kind of wish I could have done this with Kelly,\" I said, and she shrugged.\n\n\"It's fine. I'd be lying if I said that Trevor hadn't crossed my mind,\" she said. \"But... Kelly's less than a mile away from us,\" she noted, \"there's no reason why you can't.\"\n\nI shrugged.\n\n\"I guess I wouldn't because I'm not sure how my 'wife' would feel about that,\" I said, and she smirked.\n\n\"See? You're worried about how the other girl would feel, and you end up doing nothing with either of them. If you keep that up, you might actually lose them both, you know.\"\n\nI bit my lip, as I considered the argument.\n\n\"Well... I can at least keep the girl I'm with right now happy,\" I said, and she smiled.\n\n\"I dunno. You seem adamant about not giving me that fucking,\" she teased.\n\n\"I said it was too soon. I never said no,\" I answered suggestively, and she studied me with a sultry smile.\n\n\"Oh? I think I like this Josh,\" she said, and I cast a tentative look around.\n\n\"Have you ever gone skinny dipping?\" I asked, and she shook her head.\n\n\"Honestly, I've never been in a pool that had less than fifty people in it,\" she answered, and I snickered.\n\n\"Wanna try it?\" I asked, and she looked around.\n\n\"I keep forgetting we're not even in a safe zone,\" she said, biting her lip, as she considered the proposal.\n\n\"Sure, why the fuck not?\" she said, and as I helped her up onto the little platform, I climbed up as well, and we shared a jittery look, before slipping off what was left of our underwear.\n\nI quickly dived into the pool, and as I surfaced, Dana got down onto the edge, reaching for me, and she placed her hands on my shoulder as I eased her into the water.\n\n\"This is different,\" she said, and I nodded quickly in agreement. \"I know the itty-bitty underwear I was wearing wasn't exactly much, but this feels... freeing, on a whole 'nother level.\"\n\n\"Want me to take you for a swim?\" I asked, and she nodded, as I slipped my arm around her from behind and began to wade across the pool, closer to the center.\n\nAs we came to a stop, she panicked for a moment when she saw how far we were from any of the pool's edges, but I quickly pointed out that her feet could just barely graze the bottom of the pool without her head going under.\n\nShe took a few tentative steps toward more stable position, before turning to me again.\n\n\"Actually, I think I like floating better,\" she said, and I nodded, as she waded her way over to me.\n\nAs she wrapped her arms around me again, she frowned.\n\n\"What?\" I asked.\n\n\"Is this even really skinny dipping if you don't at least cop a feel or two?\" she chided, and I snickered.\n\n\"Fine. I'll oblige on one condition.\"\n\n\"What?\" she asked, a little wary, and I smirked.\n\n\"Water breathing,\" I chanted, removing my hands from her hips and placing them against her breasts, and she gasped as I let go of her, and she slipped beneath the surface of the pool.\n\nThere was a momentary look of panic in her eyes, but it quickly faded as I dived underwater and wrapped my arms around her from behind, grasping her firm round breasts again as I did.\n\nI quickly released her, then swam ahead of her a bit, turning as I did to shoot her a mischievous grin.\n\nShe rolled her eyes at me, but as I moved around her, underwater, she began to mimic my movements, kicking with her legs and wading around a bit, and pretty soon, she was swimming along with me.\n\nHolding my breath seemed quite easy, but as I headed to the surface to take a breath, Dana followed me, and I steadied her as she broke past the surface, gasping despite having no need for air.\n\n\"Holy shit. That was amazing,\" she cried, \"but fuck you for doing that!\"\n\nShe shoved some water playfully at me, and as I let go of her, she dived below the surface, and I watched with interest as she tentatively moved about underwater.\n\nAs I studied her, however, she shot me a mischievous grin, and I quickly understood why as she moved toward me, and grasped me by the nuts.\n\nI yelped, as in the struggle, I slipped suddenly below the surface, and after tussling with her for a bit, I broke free and I shot her a disapproving look as I let myself sink to the bottom of the pool.\n\nShe quickly followed me, and as I landed butt first on the bottom, she swam to my legs, and she shot me a sultry look, as she glanced at my naked, erect cock.\n\nI followed her gaze, my interest suddenly piqued.\n\nCould she?\n\nAs she moved for the dangling thing, I realized she was certainly about to try, and I watched with interest as she wasted no time, gobbling up my length, and sucking on it with earnest.\n\nThe warm sensation of her lips were somewhat dulled by the feeling of the water all around me, but as she slid my length back and forth along her lips, a stream of bubbles escaped from my lips as I breathed out in appreciation of the simulation.\n\nShe sucked for a bit, before she caught my eyes, and as I pointed up, she released me, and I headed to the surface for a breath of fresh air.\n\nI took a few breaths as I emerged, but Dana wasn't quite finished with her game, and I gasped as I felt her slip between my legs from underneath.\n\nI waded with my hands, keeping myself above the surface, and as I looked down, I caught sight of her face between my legs, just as she sucked one of my balls into her mouth, and as she sucked on it gently, she ran her hand along the length of my shaft.\n\nShe continued the teasing move for a bit, before releasing me, and swimming away toward the waterfall.\n\nI swam after her, getting there just as she climbed onto the stony platform under the waterfall.\n\n\"That was something, huh,\" she said, as she sat on the platform, dangling her legs in the water.\n\nI swam up to where she was, coming up between her legs, and she shot me a playful look.\n\n\"If I remember correctly, I do owe you an orgasm,\" I began, but she quickly shook her head.\n\n\"If we're doing something, it's because you want to, not because you owe me,\" she said, but a thoughtful expression appeared on her face as she cast a glance back at the waterfall.\n\n\"You do owe me a massage though, and getting one under there would be heavenly,\" she began, but she frowned as she looked at the rocky platform. \"Too bad it's too rough to lie there.\"\n\n\"Maybe I can do something about that,\" I said, as I focused on the platform and chanted, \"mold earth.\"\n\nDana gasped as the platform became smooth, and as she walked over and inspected the surface, she got down on her stomach, and sighed as she lay under the cascading fall.\n\nI climbed out of the water and joined her, climbing onto her butt, and she cooed as I began to massage the muscles on her back.\n\n\"Now that's something,\" she said, and I felt her body relax under me.\n\nIt was impossible to use her massage oils in that situation, but the water made working against her skin quite easy, and the sensation of the water cascading along her body made up quite amply for the added pleasure that her concoction afforded.\n\nShe let out several moans as I worked her muscles, moving up and down, from her shoulders to her upper back, but as I worked my way down to her lower back, and pressed my thumbs into the base of her spine as my fingers traced her sides, her back arched, and she let out a moan that sounded quite sexual.\n\n\"Mmh,\" she cooed, and as her chest lifted off of the ground, I slipped a hand along her side, up the length of her ribs until eventually I felt the beginning of the swell of a breast, and I grasped the firm mound, before taking the nipple between my fingers and rubbing them gently.\n\nI fondled the large globe for a bit, before slipping off from on top of her, as I repositioned one of her legs at an angle away from her body, to allow me access to her sex, and she moaned as I reached down and gently massaged the silky folds.\n\nI rubbed in a circular motion for a bit, before using my fingers to slide along the outer folds of her slit, and she moaned appreciatively at the stimulation.\n\nShe scooted forward a bit, allowing me better access to her lower half, and I placed my middle finger along the center of her opening, as I continued to slide my fingers back and forth, teasing her clit now with each motion.\n\n\"Josh... is okay if I ask for something?\" she began, and I tilted my head questioningly, surprised by the politeness with which she phrased the question.\n\n\"Uh, sure,\" I said, chuckling a little, and she bit her finger, as she turned to her side a little to look at me.\n\n\"I've never... had oral before,\" she finally admitted, and I let out a surprised laugh.\n\n\"What? Seriously?\" I asked, and she nodded.\n\n\"Don't judge me, okay? The only guy I ever loved was married and lived far away... I'm actually still a virgin in real life, you know,\" she explained, and I snickered in response.\n\n\"Are you sure you want me to do that then? It's pretty awesome experiencing it with someone you actually like.\"\n\n\"I know... that's why I'm asking you,\" she admitted, and I scoffed.\n\n\"Really?\"\n\nShe nodded.\n\n\"I mean, I'm not in love with you or anything... but, you're a nice guy. And this was nice. Really nice,\" she said, blushing a little, and I smiled.\n\n\"Well, I'd be honored,\" I said, as I leaned down, and planted a kiss directly onto her lower lips.\n\nI let my tongue trace along the puffy lips of her pussy a few times, before planting another kiss on them, and she moaned as this time I sucked the folds of her lips into my mouth, before moving my head from side to side, smearing my lips across her sex as I did.",
        "I continued to kiss and lick her teasingly, before finally aiming my probing tongue at her clit, and she let loose a much louder moan from her lips as I flicked the nub a few times, before planting another smacking kiss on the sensitive spot.\n\nI alternated between flicking my tongue against her love button, and kissing and sucking the sensitive lips of her opening, before finally burying my tongue inside of her, and she shuddered a little, as I probed her insides while stimulating her with my lips.\n\n\"Fuck. That feels good,\" she moaned.\n\nI reached up with my hand, and began to gently rub the little nub of her clit as I continued to eat her out, and her body began to twitch and jerk in response.\n\n\"Fucking. Hell. Yes!\" she cried, surrendering her body to my whims, and before long, she began to moan loudly, her hips bucking involuntarily to the stimulation as she came.\n\nI removed my tongue from her insides, and planted gentle kisses onto her mound, until eventually her orgasm subsided, and she went still.\n\nShe stared up at me a satisfied smile plastered on her face, and she shot a quick glance at my cock.\n\n\"After that, I feel inclined to reward your efforts,\" she said, and I smiled.\n\n\"I'm glad you enjoyed it, but... I think we've gone far enough,\" I said, and she frowned.\n\n\"I feel sad. I mean, I know I said I wasn't gonna fall in love, but a girl could get addicted to whatever it is you just did,\" she said, and I chuckled.\n\nI was about to get up, when suddenly she turned, and pulled me down, towards her.\n\nShe kissed me; a quick kiss, and she blushed immediately after doing it, and as I studied her, I leaned down, and pressed my lips to hers for a proper kiss.\n\nAs we broke away, she seemed flushed, and as I helped her up, I noticed her eyes lingering on me.\n\n\"Are you ready to go back?\" I asked.\n\n\"What? Oh, yeah. We probably should,\" she quickly agreed, suddenly seeming a little flustered.\n\nI dove into the water, waiting to see if Dana needed my help to swim across, but despite my water breathing spell having worn off, she seemed to manage the swim back quite fine on her own.\n\n\"So, you swim now?\" I asked, and she nodded.\n\n\"I think not worrying about drowning really makes it easy to get into.\"\n\nShe cast a longing look back at the pool.\n\n\"Down there, it actually felt natural. Swimming I mean,\" she said, and I nodded.\n\n\"Would be interested in seeing if you could do it in real life now,\" I noted, as the implications of learning skills while in a game suddenly occurred to me.\n\nThat could change a lot of things, couldn't it?\n\nWe quickly got dressed, but as we left the cave, Dana suddenly wrapped her arms around me, and kissed me on the cheek.\n\n\"I had fun,\" she admitted, and I smiled, as she hugged me.\n\n\"I did too.\"\n\n\"Did it help with your dilemma?\" she asked, and I sighed.\n\n\"I'm not sure. I mean, it felt good to just forget about everything and have fun for once.\"\n\n\"Right?\" she said, smiling, but as I patted her on the head, she frowned. \"Okay, which one of them likes being patted like a dog?\" she asked, and I bit my lip.\n\n\"Kelly,\" I answered, and she sighed.\n\n\"Figures. Well she is your kid sister.\"\n\nAs we got ready to head back from the cave, I suddenly remembered that when I'd done that scan earlier, I did pick up a lot of deer, and other wild game at the edge of the woods near the cave entrance.\n\n\"Do you mind if I do some hunting before we go back?\" I asked, and Dana shrugged.\n\n\"Sure. Why not?\"\n\nI did a quick check through my inventory, and while I lacked a bow, or any similar ranged weapon, I did have some throwing knives, so I figured I could improvise.\n\n\"Scan!\" I chanted, and I used my mark spell to keep track of the game I was interested in.\n\nTaking them down with my knives actually turned out to be quite easy, and as I prepped each kill, Dana studied with interest.\n\n\"The game just glosses over certain things, doesn't it?\" she asked, as the corpses of my kills just sort of sorted themselves into components, which I either chose to keep or discard, before the corpses faded into bones on the earth.\n\n\"I guess. Although the process of actually hunting would probably be a chore in a game that's appealing to adventure and magic,\" I said, and she shrugged.\n\n\"I guess. Although, I kind of think the future of these games is gonna be realism dialed up to eleven.\"\n\n\"We might live to see that happen in this one, even,\" I noted, and she nodded in agreement.\n\n\"True. We've already got self-aware monsters and NPCs. Not to mention the perma-death that started this whole mess.\"\n\nAs we got back to the little village, I noted with some interest, that Kelly was standing, worriedly, outside her tent, and Dana shot me a teasing look, before nodding me in her direction.\n\n\"Go get her, lover boy,\" she said, and I rubbed the back of my head, as I chuckled nervously.\n\n\"Hey,\" I said, as soon as she spotted me, and her eyes quickly darted between me and Dana.\n\n\"You two went somewhere?\" she asked, and I snickered.\n\n\"Well you did tell me to be a gentleman,\" I chided, and she frowned.\n\n\"I don't have even more competition now, do I?\" she asked, and I quickly shook my head.\n\n\"No. I just needed to clear my head, and Dana was surprisingly helpful,\" I said, but as she cast a glance towards Dana, who was getting into her tent, Kelly shot me a curious look.\n\n\"From the hop in her step, I'd say you did some 'helping' of your own,\" she teased, and I blushed, despite myself.\n\n\"I- uh,\" I began, and she quickly shook her head.\n\n\"Oh, it's fine. I didn't push you off on her as a test or something. I'm not Tracey, remember?\" she chided, as she waved a hand dismissively.\n\nAs we walked, the sun began to set, and I suddenly remembered the little village where we'd spent that night together, all the way back at the start of the game.\n\n\"This is nostalgic, isn't it?\" I asked, and she nodded. \"Is there a stream here as well?\"\n\n\"No. Just a big oak on the hill at the edge of town,\" she replied. \"Wanna go?\"\n\n\"Sure,\" I said.\n\nWe walked in relative silence, but as we got to the top of the hill, and we looked down at the slope below, that went down to the road the led to the town, I shot a sideways glance at Kelly, and without warning, I pounced.\n\n\"Wha- hey!\" she yelled, as I leapt onto her, but as we rolled down the hillside a bit, she giggled, and as we came to a rest in a tangled heap, she sighed.\n\n\"What was that for?\" she asked, still grinning, and I shrugged.\n\n\"I missed you.\"\n\n\"You were in a coma. How could you miss me?\" she chided, and I sighed.\n\n\"In that dream, I really believed that you were dead, you know.\"\n\nShe studied me, but as she tried to speak, I pounced again, and this time, I held her tightly.\n\n\"I think you're killing me again,\" she joked, but I didn't let go.\n\n\"Doesn't matter. I'm not letting go,\" I said.\n\nAs she relaxed in my arms, I finally released my hold on her enough to let her look into my eyes.\n\nShe held my gaze for a moment, before quickly blushing and looking away, but I reached for her chin, and I tenderly lifted her face to mine, before leaning in, and gently kissing her lips.\n\nShe bit her lips as I pulled away, then leaned back against the slope, and I followed her, taking her hand in mine as I kissed her, and our lips mashed together again and again, until we finally broke apart, and she sighed contentedly.\n\n\"I missed you too,\" she confessed, and I smiled.\n\nI rolled over onto the grass beside her, and she held our hands up, our fingers intertwined.\n\n\"Do you think it'll be weird when we do this kind of stuff in real life?\" she asked, and I snickered.\n\n\"When, huh?\" I teased, and she pouted.\n\n\"You're still mine, aren't you?\"\n\nI nodded, and she sighed, letting my hand go as a sad look appeared in her eyes.\n\n\"What was that?\" I asked, and she frowned.\n\n\"In that dream world of yours; I know I was dead and all, but it still kind of sounded like the perfect future for you,\" she said, and I sighed.\n\n\"You know, it took a lot for me to accept that life; and accept that I could even have happiness there. But in the moment when it happened; when I felt the happiest that I think I could, the only thought in my mind was to wish that you were there.\"\n\nShe wrinkled her brow, as she turned back to study me, and as I smiled, she let out a sigh.\n\n\"Maybe I could be there. As 'aunt Kelly'?\" she said, her voice sounding slightly bitter.\n\n\"And you would be content with that?\" I asked, and she shrugged.\n\n\"Maybe we could make it work? Maybe Serra could let us go on a weeklong 'fishing trip' once a year or something; we'd be like the incest version of 'Brokeback Mountain'.\"\n\nI laughed.\n\n\"Remind me again how that story ended,\" I countered, and she sighed.\n\n\"I'm just trying to think of something,\" she said, an exasperated look on her face. \"What if there is no happy ending for us?\"\n\n\"As long as there's an us, I'm content,\" I said, shrugging, and she sighed.\n\n\"What if we tear our family apart? What if we have to say goodbye to everyone we know?\"\n\n\"Well, those things would suck. I'm not saying I expect it to be easy. And I'm definitely not thinking that there aren't things we wouldn't have to negotiate. But this?\" I said, pinching her nose affectionately, \"this; is non-negotiable. Unless you tell me that you don't want it.\"\n\nShe bit her lip.\n\n\"Couldn't say that without lying,\" she said.\n\nShe let out a sigh.\n\n\"You know, part of me always thought you'd only settle for me if there was no one else in your life,\" she admitted, and I scoffed.\n\n\"One does not simply 'settle' for Kelly Hegel. Worship her? Spoil her rotten? Fight off the entire world if I have to, to make her smile? Sure! But settle? No,\" I declared, and she giggled.\n\n\"Really? Then how come you went and married that dumb bitch when I was right here?\" she teased.\n\n\"That was old Josh. He was well meaning, and somewhat pleasant; but a loser.\"\n\n\"And the new Josh?\"\n\n\"Well, he's sort of the same thing, he just beats himself up a lot less over it,\" I explained, and Kelly giggled.\n\n\"Old Josh and new Josh, huh? To tell you the truth... either one of you could have had their way with me at any time,\" she said, and I smirked.\n\n\"Really now?\"\n\n\"Mhm... though now that I think about it, what I wouldn't give to have them both at once.\"\n\nThere was a teasing, lustful look in her eyes, and as I smiled at her, something occurred to me.\n\n\"You know, with the right combination of spells, I could probably pull that off,\" I said, and her eyes lit up at this.\n\n\"Really? That's not the kind of thing you joke with a girl about,\" she said, and I snickered in response.\n\nShe climbed onto me, and kissed me for a bit, but as we broke apart, I stifled a yawn, and she studied me worriedly.\n\n\"Serra was pretty exhausted too. You should probably go get some sleep,\" she chided, and I nodded, as my exhaustion seemed to be catching up with me all at once.\n\nAs we headed back to the tents, however, I noticed Kelly heading towards Serra's tent, and as we got there, I shot her a quick questioning look.\n\n\"Are we sleeping here?\" I asked, and she put her hands on her hips.\n\n\"I am. You're being a gentleman, remember?\" she said, gesturing towards Dana's tent, and I frowned.\n\nI pouted a little, shooting Kelly a longing look, and she shook her head disapprovingly.\n\n\"Look... Serra's having a pretty rough time dealing with this transition back to reality, okay? She doesn't need the added insult of knowing that her 'husband' woke up and immediately ran off to spend the night with his sister after everything she did for you...\"\n\nI nodded, letting out a sigh, and Kelly shot me a disapproving look.\n\n\"I don't want you to get down about this either, okay? You're getting a free pass to go off and have a good time with a beautiful girl who's more than just a little interested in you. Use it, alright? Because you definitely won't be getting those free passes anymore when we wake up,\" she teased.\n\n\"Speaking of when we wake up... what do you plan to do if Serra asks for that? In real life, I mean?\"\n\n\"I don't think I could deny her... could you?\"\n\nI shook my head, biting my lip nervously as I did.\n\nWhat did that mean... for us?\n\nAs we spoke, Dana emerged from the nearby tent, and she shot us an awkward glance, before disappearing back into the tent, and Kelly nudged me, and shot me a suggestive wink as she did.\n\n\"Go on, lover boy. If she's not in love with you by tomorrow morning, I'm gonna be very disappointed,\" Kelly warned, and I sighed.\n\nI walked begrudgingly over towards Dana's tent, and as I got there, I paused to shoot Kelly one more pleading look, and as she put her hands on her hips and made a shooing gesture with her hands, I nodded, then headed inside.\n\n\"Hey,\" Dana said, seeming a bit surprised, and I rubbed the back of my head nervously. \"You've really been exiled from paradise, huh?\"\n\n\"I guess so,\" I replied. \"Do you mind if I-?\"\n\n\"No-! uh, I mean, not at all. You can stay,\" she said, quickly moving to set up another sleeping bag beside her own.\n\nShe patted the surface when she was done, and I cautiously crept in.\n\nDana seemed a little nervous, but as I let out a little sigh, and lay back, she frowned.\n\n\"Still thinking about them, huh?\" she asked, and as I nodded, she crept onto her own mat, and rested her head against her hand as she turned on her side, and studied me.\n\n\"Let's talk about it then,\" she offered, and I chuckled.\n\n\"Why the change in tactics?\" I asked, and she frowned.\n\n\"I'm not making a move, or anything like that,\" she replied, a little defensively. \"I'm just... tryna help...\"\n\nAs I turned on my side, and studied her a little, she made another stab at getting me to talk.\n\n\"So... you love them both, right?\"\n\nI bit my lip, then nodded.\n\n\"If the virtual married life with Serra thing never happened... would you still be feeling the way you do right now?\" she asked.\n\nI looked up at the ceiling of the tent, as I thought about it for a bit.\n\n\"I'm not sure... I knew for a while now that Serra was kind of falling for me, but I was doing what I could to discourage her.\"\n\n\"And what about you?\"\n\nI turned to look at her.\n\n\"What about me?\"\n\n\"How do you feel about her. I mean... it kinda seemed to me like you were falling for her too, y'know?\"\n\nI frowned.\n\n\"Was I?\"\n\nShe shrugged.\n\n\"I mean, I can't say for sure... not that I blame you. Serra is like... dream girl kind of material, isn't she?\"\n\nI nodded, as she continued.\n\n\"And... she's kind of perfect for you, if you think about it. You're more of the quiet, passive type. She's outgoing, active. You temper her more outlandish side, and she gets you out of your shell, you know?\"\n\nDana was right...\n\nWe did compliment each other, didn't we?\n\n\"And... she's also not a blood relative,\" Dana continued, and I sighed.\n\n\"I get it,\" I said, and she snickered a little.\n\n\"You must really love Kelly then... or is it something else, maybe?\"\n\n\"Something else?\"\n\n\"Yeah... like, maybe you're just really afraid to hurt her, after making the decision to get into that kind of relationship with her,\" Dana offered, and I shook my head.\n\n\"If Kelly thought I could really be happy with Serra, she would plan the wedding herself,\" I countered, and she poked me on the forehead.\n\n\"We're not talking about Kelly's feelings here; we're talking about yours.\"\n\n\"Are you seriously asking me if I love my sister?\"\n\n\"No, no. I know you love her. She's your sister, so of course you do... I just mean; do you love her, love her?\"\n\n\"More than anything,\" I answered, and Dana studied me.\n\n\"Enough to turn down the perfect girl?\" she asked and I sighed.\n\n\"This whole thing would be easier if one of them just didn't love me,\" I muttered, and she shoved me playfully in response.\n\n\"One of them?\" she asked, shooting me a knowing smile, and I groaned.\n\n\"Ugh, fine. I do love Serra, and being with her would be a dream; but if you're trying to make me feel awful about the fact that I fell in love with another girl when the one I wanted more than anything else already returned my feelings, you don't need to, okay? I already feel tortured enough about that as is.\"\n\n\"Kelly doesn't hate you for falling in love with Serra though... if anything, I think it made her happier,\" Dana noted, and I studied her.\n\n\"Besides... wasn't Kelly the one who pushed you into teaming up with Serra in the first place?\" Dana asked, and I eyed her carefully.\n\n\"Yeah, why? Are you saying she planned this?\"\n\n\"No, of course not. But if you think about it, she did play a part in pushing you and Serra together... not to mention all of the things that kept happening that just keep bringing the two of you closer and closer together. It's like, the universe, your sister included, conspired to get you and Serra together... by still choosing Kelly, don't you feel like if you're just fighting fate here?\"\n\n\"I guess... but maybe that's what it's like when a guy decides to fall in love with his little sister. You have to fight your instincts, logic, common sense, the whole world; even fate... just to be together.\"\n\n\"Well when you put it like that, it sounds quite romantic... but isn't that the kind of romance that usually ends in tragedy?\" Dana asked, and I frowned.\n\n\"You're really not helping,\" I chided, and she giggled at me a little, as she traced a little path with her fingers along my chest.\n\n\"You know... there's a third girl in the equation right now,\" she said, her tone a little suggestive.\n\n\"Is there, now?\"\n\n\"Mhm... and unlike the other two, the relationship she's after is fairly simple. See, she had a pretty fun day with this guy, and right now she's in the mood to... finish the day off in a memorable way, so to speak.\"\n\nDana climbed on top of me as she finished speaking, a sultry look on her face, and my eyes absently flicked down her body as she settled on top of me.\n\nShe was wearing a loose cotton shirt, and a semi-translucent wrap skirt, and I felt my cock stirring despite myself as she shifted slightly, grinding subtly against me.\n\n\"Still trying to get me to forget about my troubles?\" I asked, and she shook her head.\n\n\"That might have been my intention before, but... when we were spending time together today; you really were focused on me,\" she said. \"Unless I'm mistaken, you're not the kind of guy who'll have sex with me just to forget about his troubles... you'd actually think about me, wouldn't you?\"\n\nI rested a hand against her thigh, and caressed the spot tentatively.\n\n\"Is that what you want?\" I asked, and as she nodded, I shot her a dubious look. \"Why the change of heart?\"\n\n\"I dunno... maybe I'm falling for you too?\" she said, her tone teasing, and I chuckled at her.\n\n\"Seriously?\" I asked, and she shook her head.\n\n\"You're a nice guy, Josh... I really enjoyed spending time with you today, and; I guess I just feel like doing this with you right now.\"\n\n\"And that's all?\" I asked, and she quickly nodded.\n\n\"Cross my heart,\" she answered, and I smiled.\n\n\"Simple and uncomplicated,\" I said, and she nodded, leaning down to kiss me.\n\nAs I returned the kiss, I let my hand slip beneath the skirt, and I felt my pores flutter a little as they met nothing but naked skin all along the length of her hip.\n\nShe lifted one leg up a bit, and as I slipped the hand to the inner part of her thigh, she cooed, as I let my fingers brush the outer folds of her sex a few times, before coming to rest against her slit.\n\nShe squirmed in my arms a bit, and I let my fingers stimulate her absently, as our kissing intensified, and out tongues began to meet in open mouthed kisses.\n\n\"I should warn you,\" I began, as I broke the kiss. \"I'm not sure I've got the energy to satisfy you properly after the day I've had,\" I explained, and she shook her head.",
        "\"I'm the one who's going to be doing the satisfying,\" she said, as she sat upright, and stripped her cotton shirt off.\n\nShe reached back, and fished my now rigid member out of my pants, and I let out a soft, low, moan, as she wasted no time in slipping me into her slippery love tunnel.\n\n\"See? No complications,\" she said, winking, as she leaned forward and smothered me with her dangling breasts.\n\nShe wrapped her arms around my head, pulling me into her bosom, and I reveled in the feel of the fleshy globes wonderfully mashing against my face, as she flexed her hips, and worked my cock with astonishing skill.\n\nHer movements were so well timed, and rhythmic, that I suddenly found myself nearing a quick climax, and I patted her on the hip.\n\n\"If you don't slow down a little, you won't be getting much satisfaction from this yourself,\" I warned, and she snickered.\n\n\"I don't care. You took care of me earlier, remember? And you're probably close to passing out. Just give in, and enjoy yourself,\" she said, as she resumed her riding, and I let out another muted moan of pleasure.\n\nDana's moans were muted too, as she seemed pretty focused on bringing me to a climax, and as I looked into her eyes, I felt the sudden urge to last through until her climax anyway.\n\nSummoning up what energy I had, I grasped her ass, and massaged the meaty cheek, as I began to flex my own hips in time with her movements, and she shot me a questioning look, as she began to let out her own stream of moans.\n\n\"What're you... doing?\" she asked, in between moans, and I shrugged.\n\n\"What I want,\" I answered, as I took one of the fatty globes on her chest into my mouth, and sucked wantonly on the puffy nipple.\n\nAs I kneaded the ass cheek in my hand, I began to intermittently spank her, and she yelped pleasurably at the stimulation, as the pace of her own riding began to quicken.\n\n\"Keep... doing that,\" she said, pulling my head to her bosom, her voice now thick, and husky, and her movements much more frantic, and less controlled than before.\n\n\"Bite them... Josh!\" she commanded, and as I bit down on her breast, she cried out, and her body went still for a bit as her orgasm finally came.\n\nShe shuddered a bit, moving her hips sluggishly against me, as she let out a stream of moans, before collapsing on top of my chest.\n\n\"You didn't... have to do that,\" she panted, and I snickered at her.\n\nShe leaned forward, and kissed me, before steadying herself, and resuming her movements on top of me.\n\n\"Now be a good boy, and pump me full of cum,\" she said, and I nodded, shooting her a cheeky grin, as she leaned forward, and smothered me with her breasts again.\n\nThis time, I sucked and kissed the mounds, letting myself enjoy the sensation of her wonderful rhythmic movements along my shaft, but as I neared my own orgasm, I actually felt myself drifting in and out of consciousness.\n\nI momentarily recalled the blissful sensation as my climax came, and shooting rope after rope of thick creamy seed deep inside of Dana's womb as she coaxed me through my orgasm with her wonderful rhythmic riding, but I didn't remember much else as I drifted off to sleep.\n\n***\n\n\"Wakey wakey,\" a familiar voice called, and as I stirred from my slumber and my vision began to clear, I caught Kelly's eyes looking down at me, a teasing expression on her face.\n\n\"Kelly?\" I asked, but as I followed her gaze, I immediately realized that my now flaccid cock was hanging out of my pants, while a stark-naked Dana was soundly sleeping on top of me in a manner that could only be described as obscene.\n\n\"Slut,\" Kelly teased, as I quickly got up, and Dana quickly looked around, a slightly panicked look on her face as my own movement shook her unceremoniously awake.\n\n\"What is it?\" I asked, as Kelly chuckled at us.\n\n\"There's someone here to see you,\" she said.\n\nHer eyes were one me, a strangely hungry look in them as I got up and fixed my clothes, while Dana hurriedly changed into her priest's robes.\n\nAs I headed out of the tent, I spotted Serra emerging from her tent as well, and as our eyes momentarily met, she quickly looked away.\n\n\"Josh. Serra!\" someone called out to us, and I looked over to spot a familiar face smiling warmly at me.\n\n\"Sharada?\" Serra called, seeming pleasantly surprised. \"I thought you were helping us from the outside?\"\n\nThe woman nodded.\n\n\"I am. In this form, I'm no more than another player... like her,\" the woman said, and as we followed her gaze, my eyes fell on Alessandria, who waved at me, a little awkwardly.\n\nPaul was by her side, and he quickly waved as well, as the two came over.\n\n\"If it's okay, we'd like to join your group,\" he offered, and Alessandria frowned, but as the man shot her a quick look, she turned the frown into a somewhat forced smile.\n\n\"For the record; I'm not entirely, on the same page with you,\" she said, directing the statement towards Sharada, \"Or Dieter, for that matter. But... I've come to the realization that Luka must be stopped; and in the interest of mitigating the loss of life as much as possible... I'm willing to help.\"\n\n\"Very good,\" Sharada responded, seemingly quite pleased with her companion's decision, and she clapped her hands together, as she turned to everyone else.\n\n\"Well then, let's get to work on ending this game!\" she declared."
    ],
    "authorname": "Kousakacomplex",
    "tags": [
        "brother-sister",
        "fantasy",
        "gamer",
        "incest",
        "josh",
        "kelly",
        "novella",
        "romance",
        "siblings"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/trapped-in-a-game-pt-07"
}
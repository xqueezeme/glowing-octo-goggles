{
    "title": "Androshorts: Lords and the Lady",
    "pages": [
        "A massive thanks to Nora Fares for being my very first editor ever (after all these years I finally bit the bullet team) and to the great Randi Black for another inspired event.\n\nHere it is then.\n\nIt was a very dull overcast day in the History Department of the large West Country University, and post-graduate student Holly Cogdale picked up her one-hundred-and-umpteenth old and dusty book for 'repair and preservation'; then she had to decide whether it was of historic value for inclusion in the hallowed halls of the already extremely well supplied University Library, to be passed to another educational establishment or sent back to the Chalonier family for storage in their family archives then present a large paper on historical book discovery, damage, preservation, revue and interpretation that might be worthy of her PhD.\n\nChalonier Hall was having a massive clear-out prior to some long-needed repairs and renovations to the 'late Georgian built onto the original Elizabethan' structure. The Chalonier family were 'comfortably rich', courtesy of lots of hard-earned money well invested and also well spent when necessary, since the 10th Lord Chalonier had turned around the family fortunes between the Wars, and both of his sons had graduated from her university after the war and had been supporting it ever since.\n\nFrom her research and reading Holly knew that the Chalonier's could date their family way back prior to the Civil War when the family, apparently descended from French nobility with some minor royal blood, had been far-sighted enough to come down on the side of Parliament and the twelfth Lord Chalonier was still a regular visitor to the House of Lords where his kin had sat since before the restoration.\n\nThe Post-grad picked up the next book and made to flick it open, this trawl through three hundred years of history was not anywhere near as interesting as she had hoped and the Chaloniers' were, to be honest, a boring. She picked up the next book and looked at the label, there wasn't one, so she laid it on her desk and made to pull the front cover open. It appeared to have been glued shut, the type of gum used suggesting to her expert eye that this was not an old book, at least not in terms of some of the other Chalonier bequests.\n\nShe turned the book over to check the other binding and felt something slide inside it; that was weird -- almost like the thing was hollow. She gave it a further shake and there is was. She thought about what this might mean, and immediately thought of the back-of-a-magazine money-saving-idea treasure box she had made for her kid sister's birthday when she was a struggling and very poor first-year undergrad.\n\nShe'd bought a large thick heavy book from a charity shop and held it closed with elastic bands. Then, using PVA glue she painted the bound pages four or five times until the glue set and book were solidly shut. Taking a sharp kitchen knife she sliced around the top and a small portion came open. Using a ruler, a Stanley knife and a lot of patience she cut out a large square shape leaving an inch thick wall of paper around the edge. She painted the inside of the new 'box' with PVA glue and once dried presented it to her sister who had the best birthday present ever, safe storage for her secrets, especially from her brother.\n\nAnd here, sat in a library preservation room she had found another; OK it looked to be sixty or seventy years old, but a treasure box none the less.\n\nShe put the book into a padded envelope and went down the engineering department and her friend Dan who passed the book through the University's very own x-ray scanner, and he confirmed that while he could hear something in there it wasn't coming up on the scanner and he guessed it would be more paper.\n\nNo great treasure then.\n\nShit.\n\nSo she took the book back to her workroom and took down the small mask from the shelf and put it on along with the safety glasses just in case there was something unpleasant in there. Finally, Holly switched on her table lamp, took out a scalpel and felt around for a suitable place to cut. Measuring down five millimetres and taking her steel ruler she did what she had done to her charity shop purchased 'Complete Works of William Shakespeare' all those years ago and sliced into the book with all the care of a surgeon.\n\nThe blade went 10 millimetres in until she knew she was all the way through and she inspected her work, using her fine blue Sharpie to mark the blade to that measurement. Satisfied, she cut along the front edge of the book -- no drama. then checking again before slicing along the top edge. Finally, she turned the book over and did the same to the bottom.\n\nShe took pictures of her handiwork from every angle before laying the book flat, tucking her cotton-gloved hands under the front cover and raising it.\n\nShe turned the light and saw it was a gummed book treasure box like she had made and it contained sheets of paper.\n\nShe picked up the first one and read,\n\n\"My Special Family Diary\" with a date suggesting that it had been written in late 1951.\n\nNot ancient history as she had already guessed, but she photographed the top page with her rostrum camera and lay it flat on the inside cover of the book that had kept it secure for almost seventy years.\n\nShe read on.\n\n--------------------------------------------------------------\n\nThis is the story of my family, or at least the family I have married in to. If you are reading it this means that you have worked through the hundreds of other small books in the loft where I have secreted it above the study and with all of the other diaries, accounts books and various others of its size but definitely not its nature.\n\nMy tale starts in early nineteen sixteen, King George V was on the throne and leading us through the Great War.\n\nI was born a Victorian, grew up an Edwardian and lived in a leisurely time when the right women wore long gowns and lace and lived respectable lives until they married the right men, raised large families to keep doing the same, and the sun never set on the British Empire. My coming out party had been some years before and I got into the whirl of 'the Season' in my eighteenth year when my hair was pinned up, my dresses lengthened and was presented at court to the new King George that summer of my debutante year.\n\nWe lived in our grand house in London occasionally spending long weeks at my grandparents' country estate when it was fully opened at Easter. I went to my very first Derby Day, looked gorgeous during Ascot week, more so during the Henley Regatta, went to galleries, the theatre and more parties than I can even remember. What I now know was that I Lady Katherine Morriston of the Westonly Morriston's was being paraded like a race horse in my finest clothes so I could be seen by the very best men and my net worth and breeding potential could be assessed like thousands of my peers before and after me. When speaking with friends over the years I was to learn that I did raise considerable interest, not just because of my families wealth but of my good looks, pleasant speech and kindness, and what the older matriarchs would have called 'breeding potential' based not only on my Mother's and my Aunt's fecundity, but on my general good health, the redness in my cheeks, the wideness of my hips and the size of my bosom. As I said, like I was on sale in a stable yard. I'm not angry, nor did I or do I feel used or abused; it was - effectively -- what girls of my class and upbringing were raised to.\n\nAt nineteen I had married The Honourable George John Charles Chalonier, fourth son of Charles - 9th Lord Chalonier, and was not really enjoying it.\n\nMy family had made their fortune in India through hard work and good luck. On his return from Bombay after twenty years on the sub-continent, my great-great-grandfather bought our estate in Oxfordshire and was ennobled by a very young Queen Victoria for his sterling efforts in civilising the population of the great sub-continent while making a vast amount of money from them. It truly was the 'Jewel in the Crown'.\n\nMy husband's family were old English and could date their peerage back to King Charles 1st, but they had lacked my family's two highest traits, work and more importantly luck and their finances were not perhaps all they could have been. Lord Charles had four sons and although always kind and pleasant to me seemed none too fond of any of them. They had all graduated from their father's old Cambridge College to some extent and only the second youngest seemed to be making his way in the world and had stayed on there to study for his Doctorate and then to teach Classics.\n\nThe other three, including my Husband, seemed best equipped to marry, then follow 'the season' and go to weekend summer house parties and racing in the summer, then shooting, hunting interspersed with drinking and card-playing as the weather chilled; just as men of their breeding had been raised to do for many years. Only Lord Charles could be accused of doing anything slightly constructive and even that was to breed racehorses and he wasn't terribly good at that.\n\nWith the murder of Archduke Ferdinand we found ourselves at war with Germany and Austria-Hungary and before we knew it I was at Chalonier Hall and wishing a fond farewell to my two brothers-in-law Charles and Edmund who had both volunteered for service in their county regiment, the same one that Lord Charles had served in during the Boer and Zulu wars. My brother's-in-law looking tall and gallant in their khaki uniforms with jodhpurs, set off with highly polished riding boots and Sam Browne belts and their very sharp looking peaked caps set jauntily on their heads.\n\nTheir youngest brother and my husband George seemed only moderately interested in their departure and had actually suggested that only I go to the hall to see them off, as he still had some business to do in London. I had a rough idea of who, rather than what, that business was. I said that his father would be angry but George's response was that seeing as both of the glory-seeking idiots would be home by Christmas with the rest of the British Expeditionary Force why should he waste his time travelling out to the family seat.\n\nThe second Chalonier son, Edmund was the first to fall for his country, killed in a defensive action at the Battle of the Mons due to an open and vulnerable flank caused by the sudden retreat of the French. The BEF fell back to the Marne and following this a line of trenches opened up across the continent and became the Western Front.\n\nThe eldest Brother Charles was killed in the First Battle of Ypres, by which time third brother Henry the Cambridge Academic had enlisted and was an officer in the Coldstream Guards. He had only been in France for five weeks before he led his platoon of Guardsmen into the Somme battlefield where he was to fall on the third day.\n\nMy husband George finally joined the county regiment disappointed that his connections, unlike brother Henry, couldn't get him a commission into the more socially exclusive Guards Brigade and I went to the station with him to see him on his way, but he did little more than kiss my cheek and threaten me that if in his absence anything happened to either of his dogs I would know about it when he returned.\n\nI had one letter from him from his camp on the Sussex Downs and even that was to tell me that while some of his brother officers' wives were visiting I was not to, the last thing he needed was me being around for his colleagues to tease him for. I later found at that he stayed in the occasional local hotel with one of three women, neither of whom he was married to, two of which I knew.\n\nI eventually heard through my father-in-law that he had sailed for France and his Battalion was going forward into Belgium and the next push. Lord Charles did seem slightly worried now, seeing as the last of his sons had headed off to war leaving him with three daughters-in-law but no Grandchildren.\n\nLate in the autumn in that morning's Times, my eye was drawn to the casualty lists and George's regiment. I read that Lieut. Chalonier G was 'missing' and I dropped the newspaper in shock. It was picked up by a maid who looked at the page, sniffed and said a simple,\n\n\"Chin up Lady Chalonier, where there's life there's 'ope!\"\n\nI wasn't convinced there was either. But the next morning I received a telegram from Lord Charles telling me that my Husband had been quite badly wounded but was in a military hospital in France while they got him well enough to be sent home. In the meantime The Times had a further mention of him and his outstanding bravery, suggesting that even though terribly wounded he had held the enemy back from the very important Hill 861 single-handed after all of his men had been killed by the German Artillery that had left him so terribly maimed.\n\nAnother two weeks on and still with no news I had a telephone call from his Regimental Headquarters telling me to go to Charing Cross Hospital where Charles was being taken to straight from Waterloo Station where he had arrived that morning.\n\nI was shown to his bed and Lord Charles was already there, being very matter of fact and quite bullish despite his remaining son being wrapped in blood-stained bandages and showing no signs of life. His head was almost completely wrapped while his right side was equally well wrapped and padded.\n\nIt was strange; the thing I remember about those three hours was how quickly they seemed to go and how all I could do was look at the change in him. He had lost weight since he'd enlisted, gained his commission and them gone to France, and it seemed all of the training had broadened his shoulders, tightened his chest and abdominal muscles and flatten his stomach. In a tender gesture I had never seen before from his Father, Lord Charles had brushed gently at the unmistakeable clump of Chalonier wiry black hair stuck out from the top of the bandages, even that seemed fuller and almost with a faint curl to it.\n\nGeorge, although looking like he had been badly wrapped for mummification, the army had made a new man of him reducing his fat belly and making him very fit and toned despite his injuries. That was strange, George had been the single most unathletic human being I'd ever known.\n\nBefore the war, he'd insisted on driving or riding everywhere, even out to the gun line for partridge, grouse and pheasant shooting. He was one of the few of his kind that had never stalked a deer to a successful outcome always giving up before the end, and after marrying me stopped riding to hounds because he said that the heavy saddles brought on his hemorrhoids; but looking at him now it was plain that somehow he must have taken to the military life and the exercise, despite his two year grumbling insistence that he stay at home to 'manage the estates'.\n\nHis father had looked askance at him for that -- on the rare occasions he went to Chalonier Hall, he did little around the estate office, choosing only to shout at those that WERE doing something, demand tea, demand whiskey or bully anyone younger or smaller than him.\n\nAfter that last Christmas dinner in 1915 Lord Charles had handed George the portrait of his uncle, his cousin and his two eldest brothers all in their khaki uniforms, looking out from pride of place on the mantlepiece, and Daddy's single glance at the four and then back at his still civilian son had him burning deep with resentment, not the English pride his father was hoping for.\n\nGeorge Chalonier finally applied for his commission during that Christmas holiday, not through the urgings of his friends, family or his Father who had taken to wearing his uniform as Colonel of the Regiment, but quite simply because he wanted to sneak in and choose his regiment before conscription was finally introduced in January 1916, even going so far as to show a letter to the recruiting officer quoting the various ailments his Harley Street Physician had now apparently cured him off, thus rendering him fit to take his place in his county regiment and to lead his men against the foe; the men from his home county, from his estates, from his villages, lead them into battle against the hated Hun.\n\nNot forgetting of course that many of those self-same men had been fighting the hated Hun for two years already.\n\nHe was sent to his Officer Training Battalion in Newmarket spending four months there and leaving as a newly commissioned Second Lieutenant, but finding my grandmother's one time groom and footman Daines, now a battle-hardened Lance Corporal, at the training battalion with the Company Lines all a chatter about his being awarded a Military Medal to go with his Mons Star ribbon on his chest and his wound stripe fresh on his arm, the latter from the Battalion's hard fighting. George hated that someone he knew off and had some secrets about was the topic of conversation, more so than 2nd Lieutenant Chalonier, the third of his family, son of the Colonel of the Regiment and he must have hated that. So much so that he made it his day's work to get the hero assigned as his orderly. He needed a man to look after him, why not have one that knew his place and knew how to be a gentleman's gentleman.\n\nThe Battalion was preparing to go back to France and the last thing it needed was a trained and experienced man like L/CPL Daines taken out of the line to be an orderly, and his request was rejected, and he ended up with Private Scott, a barely literate boy who struggled to prepare his own kit let alone look after someone as prestigious and worthy as the next Lord Chalonier.\n\nGeorge wrote to his father telling him how Daines was an impertinent fellow who objected to his return to being a servant after two years of warfighting and but his complaint fell on deaf ears. Next, he complained to the Battalion Commander but he knew of Daines's value to the Battalion and this too fell on deaf ears. Finally, he met his new company commander in the mess and was delighted to find that he was an old school friend that had been away as ADC to the divisional commander and after a year of bringing the right drinks and acquiring the best quarters he sent back to the Battalion in glory as a Major. He was very much cut from the same cloth as my husband and had never met, certainly never fought beside the 'impertinent Daines' and a charge was found that was sufficient to have the company favourite busted back down to Private soldier 'to teach him a lesson and his damned place' - much to the chagrin of many of the 'Old Contemptibles' in the Battalion who by now knew Lieutenant Chalonier for the lazy tyke he was, more interested in his own comforts than he was for the fighting ability of his battalion.\n\nThe Battalion was finally ordered from their French Training depot that summer to support the third Battle of Ypres which started well but was to descend into the mud and misery of Passchendaele.\n\nThe report in The Times stated how George's 'A' company had been ordered forward into a heavily shelled position that was key to the defence of the entire sector from which few returned. George was found in a bloody shell-hole with two dead soldiers and the remains of others, still shooting a rifle propped on some barbed wire and responsible for the three dead and four wounded Germans before him that had been advancing and trying to take Hill 861 that so many had died for.\n\nWhen reinforcements finally arrived he was badly wounded, with bullet and shell fragments doing great damage to his face and later blast damage to his entire right side. He only survived thanks to the inspirational and lifesaving work of a young Royal Army Medical Corps Surgeon who had pretty much stitched his face back together, then cleaned the mud and as much shrapnel as he could find out of the horrendous wounds on his leg, chest, and shoulder.",
        "Safe now in London, the bandages to his face looked horrific though and I felt that pang that I'd felt when the list had first arrived and he'd initially been described as missing in action presumed dead.\n\nIn those hours of doubt, I was surprised how little I felt about it. I of course realised that despite his short wooing of me, I'd had never really loved him and he had been quite the most unpleasant bastard to me from the day after our wedding announcing that I was little more than a chattel, a social requirement that at some point he might try to make pregnant for the family's sake, drunkenly chuckling that he preferred to share his bed with other older more experienced women, especially the Countess of Craie whose elderly husband seemed almost incapable of doing anything other than playing cards badly and losing vast amounts of money, and interfering with his women staff.\n\nI visited George every other day taking it in turns with Lord Charles and I was surprised to see the faint smile of recognition from him.\n\n\"Katherine?\" he whispered. I smiled and nodded, detecting a hint of... recognition and... relief from him? He had never been that worried about seeing me before that was for sure.\n\n\"It's me, George,\" I said stepping closer to him, \"It's Katie.\"\n\n\"Katie...\" he breathed, and looked up into my face and smiled again, falling asleep in moments.\n\nIt was most unlike him, perhaps his wounds and the terrible time he'd had in Belgium had made him realise some feeling for me? I walked from Charing Cross back to our townhouse the mile and a half, thinking long and hard about the change in my husband, and it was some change.\n\nOn one of my non-visit days, I went to my Grandmother's large townhouse, a place so well set in my memory that just to stand in the bright entrance hall could raise my spirits whatever ailed me. When I got there I found Grandmama was entertaining an old Friend, Dowager Baroness Franklin but still overjoyed to see me, as was the Baroness and they were straight into discussion as if they spoke just the day before, talking of old times and new times and how George was slowly recovering in hospital from his horrendous wounds.\n\nGrandmama mentioned that when George was wounded one of her footmen, who was acting as an orderly to him, was missing presumed dead.\n\n\"WHAT? DAINES' YOUNG SON M'DEAR?\" shouted the Dowager Baroness.\n\n\"YES, HE'S BEEN KILLED DEAR!\" shouted the Lady of the house, the Dowager Baroness being profoundly deaf and was probably the only person in polite society that didn't know it.\n\n\"WAS AN AWFULLY NICE BOY DAINES... DAMN GOOD WITH HORSES... AND DOGS... YOUNG DAINES, YES, THAT WAS HIM, SON OF YOUR HOUSEKEEPER.\"\n\n\"YES, DEAR, KILLED IN THAT SAME AWFUL BATTLE THAT KATIE'S POOR GEORGE WAS TERRIBLY WOUNDED AT, NEVER FOUND HIS BODY! HIS POOR MOTHER HAS NEVER BEEN THE SAME, WE'VE SENT HER TO THE COUNTRY HOUSE TO RECOVER, WITH HER HUSBAND!\"\n\n\"NO BUTLER DEAR GIRL?\" said the baroness with little feeling, \"AT LEAST GEORGE IS SLOWLY COMING OUT OF IT SO IT SEEMS -- ISN'T THAT SO DEAR KATIE?\" said the Dowager with some hopeful expectancy.\n\n\"YES, BARONESS!\" I shouted, \"HE'S STILL VERY HEAVILY BANDAGED BUT WILL BE COMING HOME...\" I tried to muster the necessary enthusiasm, \"QUITE SOON!\"\n\nI thought about how having George back in the house, whatever transformation had happened to him on the road to Menin, life was still going to be absolute bloody murder.\n\nHe would be the same nasty, spoilt, puerile, anti-social, graceless idiot that he had always been but would now need waiting on hand and foot for the rest of his life, a genuine, certified soon-to-gazetted war hero.\n\nI was all but waiting for the arrival of that damned Craie woman who would just push me out of the way and take over the care of MY husband, I'd already had to write back to her twice to tell her he was still in the Officers wing of Woolwich Hospital and not receiving visitors; that was a tactical untruth he was ACTUALLY still in Charing Cross but I wasn't telling her that. I heard from Lord Charles that she had gone to Woolwich twice and got quite cross telling the orderlies that she was a close personal friend of Lieutenant Chalonier and she just HAD to see him.\n\nBitch.\n\nIt was such an awful mess and I'd never felt so alone. She would only be the first of his many older lovers that would demand access to him, and all of polite society would know that none of them spoke, that the soppy push-around wife of his was sitting in her lounge while he was 'nursed' by his many admirers in their bedroom.\n\nI felt dreadful and just wanted to be on my own for a moment and stood, the thought of what my life would now become tearing me apart.\n\n\"Please excuse me Grandmama,\" I said, \"I'LL SEE YOU IN A MOMENT, BARONESS!\"\n\nI stood, bowed to the Dowager Baroness and stepped out into the hallway where Yeates the Butler was waiting.\n\n\"Lady Chalonier,\" he said with a soft smile, \"I trust that the Hon George is recuperating?\"\n\nWith the death of his elder brothers, many had given him the in-waiting honorary title of his father.\n\n\"Slowly Mr. Yeates, very slowly.\" I smiled back at him.\n\n\"Well, you tell the Lieutenant that everyone here has him in their thoughts and prayers Mam.\"\n\n\"Thank you, Mr. Yeates,\" I whispered, my voice breaking at the end, but not for the reason that the Butler, a veteran of both the Boer and the Zulu wars himself, thought it was.\n\nI stepped through to the garden and to where I'd spent so many wonderful days and evenings, starting as the shy sixteen year old not allowed up later than nine and sent to my room immediately dinner had ended and the ladies retired.\n\nI thought of my wonderful grandfather who had always held a special place for me, his one granddaughter and so very different from his boisterous, rambunctious grandsons and their constant jockeying for position among the family hierarchy. That hierarchy was considerably smaller now as some of my male cousins and one of my three brothers were confirmed killed or missing in action at various points from the Marne, through Ypres and to the mud and blood of the Somme.\n\nMy husband, a third cousin of mine and apparently picked out as a possible suitor and very proper husband for me while I was still that shy teenage girl, had been brought back from such a battle.\n\nWhile I had felt desperately sad for that short time when I thought that at the age of twenty-three I was now a childless widow in a nation with an extremely high level of widows, to have George back now actually felt worse.\n\nHad he died in the mud my social status would probably have frowned on me marrying again but at least with George's return I might still have the chance of the child that would give what both of our families wanted most of all, a child for me to shower all of my unused and unwanted love and affection onto.\n\nWith tears pouring down my face I stepped towards the swinging seat that I'd sat on with Grandpapa and I sat down thinking on what to do.\n\n\"YEEEEEES, SUCH SHAME ABOUT DAINES!\" shouted the Baroness adding a light but loud chuckle, \"OF COURSE YOU KNOW WHO HIS REAL FATHER WAS DON'T YOU!\"\n\n\"Judit...\" said my Grandmother, \"This is hardly the time...\"\n\nI knew that there was no way the Baroness would have heard that.\n\n\"BLOODY GOOD FOR NOTHING CHARLES CHALONIER!\" shouted the Baroness. I stopped swinging for a moment and listened.\n\n\"JUDITH!\" called Grandmother.\n\n\"GOT DRUNK AND RAVAGED THAT HOUSEKEEPER OF YOURS!\" she all but cackled, \"SHE WAS ONLY A HOUSEMAID AT MY TOWNHOUSE THEN, HELL OF A ROW ABOUT IT OF COURSE, BUT YOUR FATHER AGREED TO TAKE HER TO YOUR PLACE IN THE COUNTRY AND MARRY HER OFF TO HIS BUTLER DAINES ONCE WE FOUND OUT THE POOR GIRL WAS PREGNANT! OH, THE FURORE IT CAUSED, NEVER THOUGHT I'D HERE THE END OF IT\" She laughed again as if rape was all such fun. I was stunned, Daines the footman had been my half-brother-in-law!\n\n\"JUDITH!\" howled grandmother, \"PLEASE... lower your voice, think of the staff...\"\n\n\"WHAT?\" shouted the Baroness, but carried on regardless, \"SO THE LATE DAINES WHILE BEING GEORGE'S BATMAN WAS ALSO HIS HALF-BROTHER AND DID LOOK THE SPIT OF HIM!\" I heard the Baroness laugh and could imagine her rolling back in her seat laughing, \"THAT'S WHY HE WAS SENT OFF TO YOUR PLACE IN THE COUNTRY, THEN OFF TO YOUR SON'S PLACE, WASN'T IT?\" There was a pause, the Baroness evidently took a breath, \"DEAD NOW THOUGH, WON'T TROUBLE THE FAMILY AAAAAANY LONGER, NOTHING THERE THAT WILL HARM DARLING KATIE WHAT?\"\n\nSo George's orderly and batman had been the young man from Grandmother's estate. I could just about remember him as the young boy that helped out in the stables, in the gardens, carried messages and walked the family dogs, the thing that stuck out particularly was that he was occasionally mistaken for one of the Chalonier Boys and as he got older he was sent off to the country estate to learn the business of footman and butler, then looking after my oldest brother's place not far from Chalonier Hall.\n\nI sat stock-still, stunned by the Baroness's reminiscences with my beloved Grandmama; so much information in so little time, and each revelation was like I was being smacked in the face.\n\nThe thought that my Father-in-law Lord Charles, the only Chalonier that had ever really been kind to me, had raped my Grandmother's wonderful, warm and friendly housekeeper sent me cold, worsened by the fact that her son, that young boy I remembered who I saw when walking the gun dogs and called me Miss Katie in such a sweet way was my step brother-in-law. To top that he had disappeared in the mud, probably blown to bits.\n\nI turned to go back into the house, I'd heard enough news for one day.\n\n\"AND OF COURSE THE OTHER THING ABOUT DAINES?\" shouted the Baroness.\n\n\"NOT NOW JUDITH PLEASE!\" begged my lovely and sensitive Grandmama at the top of her voice.\n\n\"HAD A COCK THE SIZE OF SHORT STALLION AND KNEW WHAT TO DO WITH IT!\"\n\n\"JUDITH!\" my Grandmother all but screamed.\n\n\"YOUNG TILLY QUARLEY KNOWS ALL ABOUT IT I UNDERSTAND!\" laughed the Baroness, \"MY GAMEKEEPER SAW HIM ROGERING THE POOR GIRL SENSELESS IN THE WATERLOO FOLLY AFTER THE LAST HUNT DINNER! POOR DEAR COULD BARELY WALK AFTER HE'D SEEN TO HER! GOOD AND PROPER HIS WIFE TOLD ME, QUITE TOOK IT OUR OF THE HER, AFTER PUTTING IT IN HER IN THE FIRST PLACE WHAT!\" The Baroness screamed her delight, and I took this as the time to rescue my poor Grandmama who was never used to this kind of discussion, especially not shouted around her townhouse before luncheon.\n\nI curtseyed to the Baroness and she stopped talking with a naughty 'almost caught' schoolgirl smirk, patting that back of Grandmother's hand-finishing the conversation and reducing her red cheeks and palpitations.\n\nWe went through to the dining room for a splendid lunch and when the Baroness headed for the House of Lords to meet her Husband, my Darling Grandmama went for a much-needed lie-down and glass of port.\n\nLord Charles was at the townhouse on my return with the Doctor and a nurse specially selected to look after George and speed his recovery which was surprising everyone. Apparently, George had asked to get up and 'stretch his legs' after being a virtual bed-bound prisoner for almost six weeks. The Doctor allowed this and it was the first indication that George might recover quicker in the comfort of his own home with his family.\n\nGeorge was carried on a stretcher by four Medical Corps soldiers with the greatest care and lowered down on his bed and lifted onto it. It caused him some pain, I could see in his unbandaged face but he made no sound, waving a polite hand and whispering his thanks to the four stretcher-bearers for their great care of him. They all saluted and left as quietly as they had come taking the stretcher with them. He slept for the rest of the day watched over by Clements his nurse.\n\nThe next morning was my first chance to see for myself what damage had been done to my husband and was now being mended by the wonderful Clements, one of the finest nurses his father could find, just finished caring for a terribly wounded son of a friend.\n\nGeorge hardly said a word and I guessed that any movement of his jaw must be agony for him. His body looked different though! The next morning, I had all the proof I needed.\n\nI'd woken early and tiptoed into his sickroom to see the nurse preparing dressings and talking to him about what she was going to do, George displaying a very gentle, even grateful stoicism which was most unlike him. He'd once punched a footman in a drunken rage when he hurt his ankle removing his riding boots.\n\nThis new, fitter, nicer George had developed a conscience!\n\nI leaned across the bed placing a gentle kiss on his cheek aware that my very full bosom was pressing against his uninjured arm, he smiled the now lopsided smile that had it been from any other man would have warmed my heart, I was almost convinced now.\n\nI watched with some compassion as Nurse Clements removed the sheet held off of his body by a bamboo frame.\n\n\"I'm so very sorry Lieutenant George,\" said the nurse as she slowly pulled the bandage from the evil-looking gash the length of his thigh. I saw a glint of black on some ordinarily whitish-pink skin. \"There it is George!\" she cried with a careful delight, \"I knew there was another bit of shrapnel in there!\"\n\nGeorge looked down, gulped then closed his eyes and I was waiting for the outburst, the nasty, threatening sneer of the class bully, the spoilt brat of spoilt brats.\n\n\"OK Mrs. C,\" he hissed. \"I know it has to come out, do what you have to do.\" He gritted his teeth and looked across to me with a quite soppy smile that just called to me, and I crossed to him. Clements smiled at me and nodded towards George's hand. I stepped in close and took it, initially because I didn't want him to lash out at anyone.\n\n\"This isn't going to be nice Lieutenant, hold on tight to Lady Katherine.\" She looked up and across to me, \"Now I'm going to try to pull this piece out without cutting the poor boy anymore.\"\n\nShe wiped across the wound with some strong-smelling antiseptic and I felt him shiver against the stinging pain on his open wound. Clements looked at me and nodded, and I felt George's hand tighten on mine as the nurse squeezed and pinched around the shard of metal working out of his body.\n\nIn a fraction of a second, there was the clatter of a metal object into the small dish by the bed,\n\n\"Got it!\" said Clements in triumph, \"Well done Mr. and Mrs. Chalonier,\" she sighed and took the bottle of iodine and poured it neatly into the new tiny bloody hole in his groin.\n\n\"Arrrgh...\" George cried out, a sound of anguish, not anger that had him holding my hand tighter than ever and pushing his cheek to mine, I realised after a few moments I could feel his tears mixing in with mine, \"Arrgh... Christ!\" he cried as Clements dabbed and squeezed at the wound until the last of the iodine was out of it, \"Th... thank you...\" he said with a barely withheld sob that sounded so unlike my husband.\n\n\"It's going to be fine Lieutenant,\" said Clements, \"a little pain now is better than some infection that will see them take your leg.\"\n\nI could see tears on his cheek and the weakest smile.\n\n\"Sorry Mrs C,\" he sighed, \"don't know what came over me...\"\n\nThe sight of that brave man's tears was almost too much so I pushed my face next to his, drying his cheek with mine.\n\n\"It'll be OK George,\" I hissed kissing his cheek and brushing my face against his.\n\n\"Thank you, Katie,\" he puckered his lips to kiss me, which again was something he never did.\n\nClements was drying the iodine from his various wounds and generally dabbing and dressing the small hole which I now hoped would heal as well as the other myriad holes, scrapes, and contusions that seemed to decorate and desecrate one side of this very attractive body. I felt him relax and saw his smile.\n\nNo, that wasn't my husband, from the start he would have dared her to hurt him and threatened to beat and then sack her if she did. He wouldn't have said 'sorry' for crying out.\n\nThe nurse peeled the bandage away from a wound lower down that I could see was definitely improving. The nurse smiled, \"we're almost there George!\" said Clements in delight, \"I'd like the Doctor to take a look at that as I think we're ready to leave this one to heal on its own.\"\n\n\"Thank you!\" hissed George.\n\nTHANK YOU!?! FROM GEORGE!?!\n\n\"It's looking so well now Lady Chalonier, don't you think?\" Clements raised the sheet and I could see the almost dry and fresh pink skin that had just two weeks ago been a deep red slash that seemed forever wet with either blood or pus. Clements had indeed worked miracles; there was my final proof that this man wasn't who everyone thought.\n\nMany things could have happened to my husband in his four months training in Sussex, eight months in France and Belgium, his wounding, his two weeks in a field hospital, his three weeks at the military hospital in London and the great care shown to him here at his family's townhome, but I'd never heard that a flaccid penis could grow an extra two possibly three inches in length and a couple more in girth.\n\nI hadn't realised that I was staring at the thing, such was its import.\n\n\"Don't worry Lady C,\" said Clements putting a caring hand on mine, \"your husband is well on the way to a great recovery!\" I snapped out of it and turned to face the nurse, \"He's very fit and has a great attitude -- a weaker man might have died of wounds such as his.\"\n\nA weaker man probably had.\n\n\"Thank you!\" I said to the nurse, \"I'll go and speak to Mason about George's breakfast.\"\n\n\"You do that Mam,\" said Clements with a satisfied grin, \"I have to dress the wounds on the Lieutenant's face now.\"\n\nI stepped closer leaning in across the broad chest, so much more muscular and toned than the real George Chalonier, to kiss this man's face; whoever he was.\n\nI headed out and towards the sitting room and rang the bell for Mason the Butler. He arrived,\n\n\"Yes Mam?\" said the old retainer with a slight inclination of the head.\n\n\"Lieutenant George is ready for his breakfast now Mason,\" I said.\n\n\"Will you be taking breakfast as well, Ma'am?\"\n\n\"In the dining room please Mason.\"\n\n\"Of course Ma'am, I'll have it brought up directly.\"\n\n\"And I'd like the car brought around for ten o'clock, I'll be going to visit Lady Staithmoir at home.\"\n\n\"Of course Ma'am.\"\n\nAfter I had dressed and breakfasted, I headed into the hall where Mason was ready with my coat and umbrella, seeing me out into the car.\n\nLady Josephine Stathmoir was another old friend and we had met in finishing school. Lord Stathmoir was a senior Royal Navy Officer safe in his Dreadnought Battleship cruising the North Sea for any German ship that might put its nose out of harbour.\n\nI was so warmly welcomed in by my old friend who was overjoyed that I was back in London and that my husband was alive and making a good recovery.\n\n\"Yes,\" I said, \"Sadly his orderly Daines was killed.\"\n\n\"Oh what a shame, he was such a nice chap and a terribly good servant. His mother is your grandmother's housekeeper?\"\n\n\"Yes, she was extremely broken up about his death, and the fact that there was no sign of his body.\"\n\nLady Josephine looked sad for a moment,\n\n\"There are so many young men whose bodies are not being found,\" She poured more tea, \"At least Darling George was found in one piece.\"\n\n\"Yes,\" I said taking my tea and a deep breath, \"I understand that your cousin Tilly will miss Daines particularly!?\"\n\nJosephine's mouth fell open,\n\n\"Why Katherine Chalonier, I'm sure I don't know what you mean!\"\n\nWe moved closer together conspiratorially...\n\n\"Daines?\" shouted the lady, fresh from the Hunt ball taking place across the manicured lawns and ornamental garden.\n\n\"Yes Mam,\" said the young footman, walking tall and straight from his master's favourite mare.",
        "\"Daines, I err... I understand that while you were staying at Hestonwood you... shall we say you undertook some special duties for the lady of the house?\"\n\n\"Mam?\" he said tone that he didn't know what she was talking about.\n\n\"Oh come on Daines, you can tell me?\"\n\n\"I'm really not sure what you mean Mam.\"\n\nShe walked across to him,\n\n\"I've heard that Mrs. Frankton asked you to do something special for her.\"\n\nThe young man's bottom jaw flapped momentarily.\n\n\"I... err... I'm not really at liberty to discuss what might have taken place during the visit to...\"\n\n\"I then heard from Mrs. Frankton's sister that you fucked her three of the four days that you were there?\"\n\nEven given his youth, a mere eighteen years, Daines realised what was his best option and simply kept his mouth shut.\n\n\"Well Daines, the only way for you to keep out of trouble is to extend me the same favour.\"\n\nThe tall, dark and handsome young footman grinned and nodded towards the marble domed building fifty yards away...\n\n\"Apparently he was hung like a Derby winner and screwed Tilly senseless, she was quite heartbroken when he left your brother's house to join up,\" Josephine sipped her tea and grimaced, \"What a waste of such fine stock!\"\n\nWe both grinned and drank more tea, Josephine ringing the bell for more and to order lunch for us.\n\nAs we ate the most perfect sandwiches I enquired more about the apparently late Private Daines. The half-brother of my husband, good looking and extremely well endowed, just like the man recovering in my guest room.\n\n\"Quote the lothario by all accounts,\" said Lady Josephine dabbing her mouth with a napkin, \"rumour has it he had one or both of the Ingrams sisters.\"\n\n\"Not at the same time surely!\" I spluttered.\n\n\"Katie!\" screeched my old school friend, but neither confirmed or denied it, \"Tilly said that while he screwed her senseless, he was such a great lover and was very nice about that she even kissed and cuddled him; but then Daines was a NICE MAN, whatever his station...\"\n\nTwo days later with bandages only lightly applied George was up and in a tall chair brought in especially for him to sit in during the day. Another chair mounted on wheels was arranged so Clements or one of the footmen could wheel him from room to room.\n\nWithin another few days, he was starting to dress himself and under the strictest instruction from Clements was talking more, using crutches to walk a few steps, testing out a right leg not used since being so awfully damaged all those weeks before.\n\nI was in my dressing room preparing for the day when the door swung open and there was George in his long nightshirt, no bandages on his damaged face and by using his crutches had walked in from his room. The triumphant smile on his face was such a delight that I stood, walked towards him and kissed his cheek, my face almost as lit up as his was.\n\n\"Well done Darling George!\" I said, as I would have done to the real George.\n\n\"Thank you Katie!\" he said, \"Thank you for everything!\"\n\n\"Oh George, you're so very welcome!\"\n\n\"Said he was going to walk to your room today Lady C,\" said Clements, \"Been saying it for three days, wanted to walk here on the day of your anniversary.\" It was indeed the day of our anniversary and I hadn't remembered it! But then we'd never celebrated it before today, \"and the next bit George?\" said the Nurse.\n\n\"I'd like to move back into our room Katie,\" he said, \"if you'll have me?\"\n\nAgain that charming smile, deformed by his bullet wound but streaming through the pain and scars and I walked across and gently hugged him.\n\nI thought for a moment,\n\n\"Yes George,\" I said, \"Please.\"\n\n\"...and nothing but sleeping for a few weeks yet please!\" said Clements with an admonishing look and folded arms, \"You, Lieutenant Chalonier are not fit enough for quite everything yet!\"\n\n\"Of course Mam!\" said George with a gentle bow.\n\nGeorge was moved back into our room and I shared my bed for the first time in nearly a year. The last time had been with a drunken, snoring, farting, half-dressed yob -- this one was a kind and gentle man that took my hand and kissed it before we slept, holding it gently through the night, with the occasional moment when he would hiss or cry out quietly when some movement in the night had caused him pain. At those times I would gently squeeze his hand and turn my face to his,\n\n\"It's OK George...\" I would hiss back to him, unsure of whether it was a waking pain or a sleeping nightmare, either way, I tried to help this new George.\n\nI woke to a noise in the street and headed for the WC but on my return, I saw that something was definitely different with George. He'd had a bit of a temperature that day which he'd fought with the necessary medicaments and getting plenty of rest, hearing Clements talking on the phone to the Doctor and fearing that he might be sent back to the sick room.\n\nHe had improved much in the day though but was still quite warm and I could see that he had removed his nightshirt and thrown aside his covers. I stepped around to replace them when I saw in the faint glimmer of light from the gas lamps in the street, the single largest erect penis I had ever seen outside of a farmyard. I had only ever seen one before half this size and it had been in this room and apparently attached to this man.\n\nI gave George time to recover from his fever and three mornings later I decided to spring my plan. Not just because I was worried about his health but because I had started to wake in his arms, sometimes with my head on his chest, sometimes with my bottom pushing into his groin and his hands on my breasts and while I had my doubts I also really liked his attention.\n\nIt was a bright, brisk early winter morning and we awoke almost together and as George had always requested tea was served to use in our bedroom. My 'husband' took his cup from the tray and sipped, conscious that it might run out of his damaged lip.\n\nWe had chatted some normal husband and wife inconsequentialities when I stopped and picked up The Times that had been brought in with the tea tray, \"Err... Daines?\" I said in my lady of the house voice and turning to him.\n\n\"Yes Ma...\" he stopped himself, \"I'm sorry Darling, what did you say?\"\n\nI smiled at him, \"I'm sorry but you aren't my husband George,\" I said, \"I think you are his orderly and my Grandmother's groom and my brother's one-time footman George Daines.\"\n\n\"What rubbish are you talking about Katie!\" he snapped back, but not with the amount of vehemence that my real husband would have given it.\n\n\"I overheard the Dowager Baroness telling my Grandmother how you were my husband's half-brother,\" I took my calculated pause, \"how my father-in-law had once taken advantage of your Mother when she was a housemaid...\" I couldn't hold back the involuntary shiver that thought still gave me.\n\nHe finished his tea,\n\n\"He didn't 'take advantage' of my mother, that bastard raped her,\" said George, who was obviously George Daines and not George Chalonier, \"After he raped her your precious society ganged up against her and shipped her off to the country so I could be born in secret. She had a choice of course, oh yes! She could leave and have me out of wedlock and we could both die in the workhouse. She decided against that so was quickly married off to a man that I considered was my father until your husband told me that we were half-brothers!\"\n\n\"He told you?\" I said in astonishment.\n\n\"Yes,\" he said, \"after him and his friend took my stripe from me for wanting to do my job, he got extremely drunk one night and I had to get him out of his uniform and into bed and try to get his vomit and piss-stained uniform clean and pressed for the next day. Being your husband, he had to rub in his superiority didn't he.\" He closed his eyes and regained some calm, \"I went home on my last leave before heading back to France and asked Ma, and she admitted it, told me the whole sordid story.\"\n\n\"I'm sorry,\" I said, the revelation harder than I thought it might be.\n\n\"Full of jolly news like that was your husband,\" he opened his eyes and looked at me, but while I saw anger in his eyes I believed that none of it was aimed at me, \"If you've heard one story about me, then I guess you've heard the rest?\"\n\nI didn't want to speak and increase Daines' misery,\n\n\"It depends,\" I said sharing some of the embarrassment he must have been feeling.\n\nHe saw my embarrassment, and smiled kindly,\n\n\"He... he also said that he knew I was considered a bed warmer for quite a few society ladies and that many of them boasted that they had been to Godwingham Park and had 'seen' young Daines doing 'Tilly in the Folly'. He said that he was pretty sure that I had done the Ingrams sisters.\n\nHe said that I was basically a whore and he wasn't sure whether he was going to tell the rest of the Battalion that their favourite boy, the young soldiers' hero was no better than a male streetwalker, laughed himself almost comatose with that one.\" He shook his head, \"I stood up straight and looked him in the eye, told him to do just that, and matched him smug smile for smug smile, dared him to tell eight hundred common soldiers, many of which were my good friends, tell them that I was paid by some of the richest and most attractive society ladies to fuck them...\" George smiled, \"and how that story, how Daines the Military Medal Winner from 'A' Company, the pride of the Battalion had screwed half of London Society's finest and most eligible ladies, even throw the names in... he didn't like that one bit,\" Daines lost his smile, \"he was so indignant that we nearly came to blows on that one, Bastard.\"\n\nThat sounded like George Chalonier to a tee.\n\n\"So...\"\n\n\"So yes Katie, I am George Daines, half-brother of that spineless bastard of a dead husband of yours.\" I sat up straight at that insult.\n\n\"W... What?\" I spluttered, \"He won a medal for bravery!\"\n\n\"No, he didn't, I did! He was dead by the time 'B' Company came forward and found ME shooting Jerries who were advancing on my shell hole one-handed.\" he said and closed his eyes.\n\nI felt a sudden wave of emotion, not remorse but something akin to it - for me not my husband. I was in bed with a man I didn't really know who had been terribly wounded, but I had started to have real feelings for. What next?\n\n\"Tell me...\" I said, \"tell me how my husband died.\"\n\n\"We were given the order to hold at all costs and fight to the last man and the last round and were being shelled to buggery by the Jerries. Your husband was sitting in a shell cratered forward trench drinking from his hip flask and smoking a big cigar telling me and three of my mates what medal he was going to get from the Company Commander who was his old friend.\n\nThe shells were getting closer and closer and he was getting twitchy and I was sure he was just about to run, but I grabbed him and pulled him down below the firestep just as the next shell hit, saved his bloody life.\" Daines rubbed his chin and the still red scar tissue, \"Then one dropped to our right and killed two of the three lads left alive but all he was worried about was that when I pulled him down I ruined his cigar. Threatened to shoot me for it.\"\n\n\"That sounds like George,\" I said hoping to show that I believed him.\n\n\"We could hear the Jerries coming forward behind the barrage and by now he was looking up and down the trench trembling and shouting, 'Get up on the parapet Collins!' he said to my last surviving mate a young boy barely 17 let alone 18, dairyman from the Somerset Levels, hadn't even started to shave.\" Daines looked sadder than I had ever seen him before. \"Your husband had really started to flap now and was shouting more at the kid, 'you heard me Collins, up on the step... Daines and I are right behind you!' and once Collins got up on the parapet your husband drew his revolver and shot him in the back of the head,\"\n\nDaines seemed lost for words and I was sure I could detect a hint of tears,\n\n\"If it's too hard...\" I began to say not wanting to tire this almost healed man, but he waved his hand a couple of times and carried on.\n\n\"I tried to get my rifle up at him but he beat me to it, aiming his pistol at me,\n\n\"Leave it where it is Daines, now take off your tunic,' he said with panic in his voice.\n\n\"What?\"\n\n\"Your damned tunic Daines,\" he spat at me, \"Collins is too bloody small!\" I refused of course, \"give me your blasted tunic Daines, at least I know it'll fit seeing as you're my backstairs, guttersnipe whore of a half-brother!\"\n\n\"What the fuck do you want with my tunic for Mr. Chalonier? You've already had the stripes off if it.\"\n\nHe had that snide look of his and laughed about that particular victory of his, but still keeping his shaking gun pointing at my head, I'd been shot before and to be honest after the reports of this offensive I had a feeling I wasn't going to get home from it anyway.\n\nHe quickly looked over the fire step seeing that the Jerries were still some distance away, his talking had speeded up,\n\n\"I... I have a very important message to deliver and no one ever looks twice at a messenger going past,\" he pulled two blue and white signaller armbands from his pocket, \"Knew these would come in handy! I've even gone with boots and puttees on this muddy morning!\" he chirped full of his own good humour, \"When I get far enough away from all of this I'll put on my nice tunic that you kept so nicely for me, pull on my Wellington boots, and check in with an old friend of mine at Brigade HQ.\"\n\nThat seemed to calm him down a bit and he took out another cigar and lit it, I could see his hands were shaking with each crump of shells landing around us, \"Major Berwick at RHQ? Well he owes me quite a lot of money -- he's quite the most terrible card player AND I've slept with his wife, and unless he wants the entire brigade to know that he's penniless and whoring out his wife, he'll find me a tidy little office job with a better than average outlook on survival and at least ten miles from the front line. War is all hell I tell you, Daines,\" he said taking a long drag on his cigar, \"and I'm not spending the rest of this one up to my eyeballs in shit and bullets! Suits nasty little peasants like you of course; I suppose some people think that action on a single day is equal to 400 years of breeding... fucking Military Medal! What the fuck is THAT!?!\"\n\nDaines looked cross again, but I smiled an understanding smile and nodded that he should carry on.\n\nI was keen to hear the end of the story, I knew that the Daines hero status would have rankled my husband; his brother Charles had been posthumously awarded the Distinguished Service Order, Edmund the Military Cross, while even Henry had been 'mentioned in dispatches' in the few days he'd fought in the mincer that was Ypres. Then, the final nail in the coffin would have been the back-stairs illegitimate half-brother with a bravery medal.\n\nI didn't want to believe what this man was telling me, but everything he said had all the hallmarks of George Chalonier.\n\nDaines took his cup and sipped from it, a faint suggestion of a tremble in his strong hands and continued.\n\n\"I told him to point his gun forward and shoot at the Germans that were getting closer and closer with each shell that dropped.\n\nBut he just grinned that stupid grin of his and said \"No! Sorry about this Daines -- what the hell, no I'm not\", and shot me - he was aiming for my forehead of course but I turned my head and he hit me in the cheek because he was such a terrible shot and was shaking so much.\n\nAs I lay wounded and out cold for a moment he took off his jacket then took off mine and then my equipment and put it on. I came round face down in the mud on the duckboards just as he picked up his pack that held his other uniform jacket and said \"goodbye whore\" with a big smile then turned and walked away with such a terrible swagger, suddenly there's an almighty explosion, a big splash of red and I get thrown across the trench and half covered in mud. I understand from the stretcher-bearers that they found a private soldier, or most of one at least, ten yards from where they found me thrown up on the parapet.\"\n\nHe took a long drink of his tea, putting his cup down on the saucer with an indicative clatter. \"I was cut to pieces and in agony, well you've seen all of the damage, but I was cold so I pulled on his tunic ready to explain what had happened.\"\n\n\"But the Military Cross, the bravery?\"\n\n\"Still me Mam; wearing his jacket I was shooting my rifle towards the advancing Germans. I had been shot in the face then ripped up by the blast, but I saw no point in surviving all that only to be bayoneted by some square-headed bastard in grey. The short magazine Lee Enfield rifle can be operated with one hand you see Mam.\"\n\n\"Good God!\" I hissed, \"How... awful for you.\"\n\n\"When 'B' Company reached me they found no one else, only Collins but the blast had hidden the shot in the back of his head.\n\nWith the bullet wound and the shrapnel pitting on my face, I was taken back wrapped in your husband's tunic and looking so much like him in other ways, they assumed I was Lieutenant Chalonier and I had officer treatment all of the ways back. I was waiting for the right moment to tell them honestly I was; to tell everyone, to tell Ma... to say that I was shell shocked and only just remembered who I was but it all just kind of got away from me.\" He looked slightly embarrassed, \"I have a feeling that if I tell the world who I am it would not end well for me, whatever I said about shell-shock...\"\n\nI was still in two minds about what to do next.\n\n\"What are your plans now?\"\n\n\"I don't know, part of me wants to go back to France and get taken prisoner and just reappear as Private Daines when this is all over, but I'm not sure with all of this damage they'll let Lieutenant Chalonier back into the front line.\" He sniffed, \"More importantly, what are YOUR plans?\"\n\n\"I don't know,\" I said.\n\n\"Mam... Ka... Mrs. Chalonier,\" It seemed that all of the closeness we had built up in the last weeks had disappeared and we were strangers, strangers in the same bed and naked under our nightwear, but still strangers none the less. George carried on, \"your father-in-law...\" he paused, \"He is MY father I suppose -- he doesn't seem concerned just who I am and hasn't looked me in the eye since I came home. George's three brothers went the same way as him, hopefully with more gallantry and dignity, and I think Lord Charles is seeing what, or rather who, he wants to see,\" he said with raised eyebrows.\n\nI nodded, \"I'm sure that if you agree, I could get away with this.\" He smiled, \"Rather WE could get away with this.\"\n\n\"We?\" I said.\n\nDaines went straight to my first fear when I'd read the 'missing in action' report.\n\n\"I can't do this on my own Mrs. Chalonier, and this way you don't have to be the lonely widow needing to spend your life dressed in black. I'll go with whatever you decide to do, whatever domestic arrangements you see fit. I'll never make any kind of advance to you - I swear.\"\n\nMy face must have shown something, perhaps a slightly disappointed anticipation at that thought; after all my old school friend had told me what a fantastic lover this heavily scarred but still very attractive man was not five weeks ago. His expression changed minutely.\n\n\"But know this Lady C, your husband died a coward's death running for his life after murdering one of his own men and then trying it on me, so he could run... run away pretending to be a Private soldier. If the Chalonier family turns on me, I'll tell the whole story to the court martial and make sure that before I get dragged to the firing squad the world will know what a coward their hero son was and see to it that his Military Cross is withdrawn. I might even add that his father was a rapist, Ma would go with that.\"",
        "\"I can see why you'd want to do that George,\" I paused, closed my eyes momentarily but opened them again. All I could envisage was a lonely woman in a black dress, in an empty house. \"I think I'd rather not be a widow, especially not a coward's widow.\"\n\nHe smiled a nice, honest gentle but very relieved smile back to me. He relaxed and that seemed to recover the space that had seemed to be between us and he rested a gentle hand on mine. I had shared his bed for over a week and had been held so nicely by him, something his predecessor had never done.\n\nHe looked across at me,\n\n\"OR I remain as Lieutenant Chalonier MC shortly to be gazetted Captain, the one-handed sniper of Hill 861 and I remain here as your husband. You remain the wife of a hero, I remain alive and we both live in some comfort. The rest? Well, perhaps we can make it up as we go along.\"\n\nI sipped my tea, this could indeed be the best way out for both of us and with a raised-eyebrow smile I suggested my acquiescence, but a thought struck me, \"Are you SURE he's dead?\" I said\n\n\"If he's still around he'll have one hell of a limp...\" I looked at him puzzled.\n\n\"Why?\"\n\n\"His right leg landed in my lap, would know those boots anywhere...\"\n\nMy most unladylike but cleansing stifled giggle that became a full laugh broke both the silence and the tension. I wiped my eyes,\n\n\"George?\" I said, \"I think that could work, and do call me Katie...\"\n\nIn a way, I could never have foreseen or predicted the next few weeks passed very pleasantly, more so than any other time in my married life in fact, with me filling in some of the blanks on the life that George would lead based on the last one.\n\nHe had head injuries and the entire country knew that some of the poor boys coming back from France had short - and long-term memory problems. I told him about how George had talked to people, how he referred to them, pet names, mannerisms, particularly family and particular things that George would say and do. We worked hard on our presentation while together and I suggested that we call each other 'Darling' as a matter of course and it was quite sweet.\n\nNew George had, of course, spent quite a bit of time around my late husband and had picked up almost enough to fool me, and only his physical differences gave him away. We lived together as a couple and I helped him recover with less and less visits from the wonderful Clements. While we were alone I learnt lots more about him and his background and the various people he had worked for over the years and he reminded me of the few times I had met him at my Grandparents county seat, the quiet stable lad that would walk Grandmama's dogs, work their hunting pack and groom the horses. I Remembered the time that I confused him with one of the Chalonier boys in the garden and his father, Mr. Daines the butler, sent him on his way with a clipped ear -- that was the point that he was sent on to my brother's house to learn his trade of gentleman's gentleman, a house that the Chaloniers' wouldn't go to and where his growing likeness to his half-brothers wouldn't be noted or commented on.\n\nHis walking improved so much that we were allowed to take his very first walk around St James Park and we came across a few people that I knew taking the air.\n\n\"Katherine!\" came an overly loud cry, \"And George! Darling, how good to see you back and so well!\"\n\nI stretched up and hissed into his ear,\n\n\"Lady Anna Marchmane and her Sister Mrs. Dorothy Stephens. The famous Ingrams sisters!\"\n\nHe turned and kissed my cheek and whispered,\n\n\"I know,\" he said, \"I've shagged Dorothy.\"\n\nOur talk was very jolly and mostly about George and when we would both be back visiting again as things were so quiet since all of the boys went away, and the sisters tried to leave me out of the conversation altogether as would have happened with my previously flirtatious husband but George played heavily on his slurred and painful speech and as soon as it became obvious that their old friend George wasn't going to both insult and ignore me the ladies took their leave and let us be.\n\n\"What a pair of bitches!\" I said as we walked away, hugging his arm and chuckling and George's attempts to hide his smile.\n\n\"Oh I don't know, darling,\" he said, \"I've quite a soft spot for Lady Dorothy.\"\n\nI pecked a kiss on his cheek, just in time for the Mrs. Marchmane to turn around to see it.\n\n\"I would have thought quite the opposite Darling,\" I said hugging his arm tight. This kind of close contact had started initially as a set dressing but I found it quite lovely and I could see that he did as well. Our light mood continued, and we walked to a nearby Tea Room and stopped for lunch.\n\nGeorge was such a pleasant companion; he was funny, warm, intelligent and just nice, something my late husband had never been. He had been almost charming when he courted me but once married I discovered that our nuptials had very little effect on him and he pretty much took up his life where it had left off the day before we got married. He resumed his many evenings out allegedly at his club but I'm sure were opportunities for him to carry on sleeping with the women he had been sleeping with before I legitimised his status in popular society by becoming Mrs. Chalonier.\n\nI wasn't sure if my late husband had shared either of the Ingrams sisters beds but the fact that George had intrigued me, I suppose I was worried that new George might have had the same women that the first George had.\n\n\"George,\" I said stirring my tea, \"how many women did you actually... you know...\"\n\n\"Seven or eight,\" he said with a smile, a soft smile made crooked by where my husband had shot him in the face, \"Some of them I slept with quite often,\" he soft smile became quite rude, \"Now Dorothy Stephens, Just Lady Dorothy Ingrams then of course, aaaah Dorothy...\" he stretched out his back and his recovering leg, \"Well Dorothy didn't just want to be fucked, she liked to be ridden, she liked nothing more than being on her hands and knees and hanging on to the bed head with me screwing her from behind,\" my mouth fell open, \"liked it even more when I slapped her arse for her, quite brought her on in fact,\" he swatted his hand in the air, \"gave her a good six of the best on several occasions and she was like a bitch in heat.\"\n\nI fanned my red face with my gloves, such was the effect his talk was having on me.\n\n\"Despite what society has to say about it I never had Lady Anna but it was on the cards, she met her new husband just in time,\" he smiled very matter-of-factly, \"I DID have their mother though now I come to think of it.\"\n\n\"What?\" I all but screeched, noting a few turning heads at my outburst.\n\n\"Aaaah yes, Mrs. Elizabeth Ingrams of the Hestonwood Ingrams!\" He leaned back and put his hands behind his head, \"She was the very first, screwed her from midnight til three in the morning, in her husband's stables; I was a just seventeen-year-old groom and footman there with your brother's horses and I can assure you no one else had the kind of ride that I did that weekend.\"\n\nI struggled to hold back my laughter,\n\n\"The same weekend that you err... entertained Dorothy?\"\n\n\"No that was months after; she gave me TWO fivers for that weekend,\" he looked out and across to the lake then back at me, \"I have the funniest feeling that... aah... young Master Magnus, you must have met him, must be nine or ten now; well I have a feeling he could be my son and the very best of luck to him.\"\n\n\"Magnus Ingrams?\"\n\n\"Yes.\"\n\nI thought about it and the last time I'd seen the young man at his older sister's Anna's wedding,\n\n\"He does look a bit like you,\" I grinned.\n\n\"Happiest day of Ralph Ingram's life apparently, had three daughters one after another and once he thinks he and his wife have hung up their nursery keys for life, a dark-haired boy finally comes along. But your Father-in-law and Mr. Ingrams are first cousins so a bit of family likeness is allowed.\"\n\n\"Darling George,\" I said, taken with all of this intimate gossip, \"You are full of surprises!\"\n\n\"Allow me to walk you home Darling Katie,\" he said with that crooked smile that was so growing on me, \"and I'll tell you all number of interesting things about some of your lady friends.\"\n\nWe walked back to the house and he told me of his many horizontal adventures, and of his eight women, four of them I could count as friends. Including my old friend Josephine Staithmoor who was so keen to tell me about everyone else that had been serviced by Daines, she had missed herself off of the list, three times in fact.\n\nHe talked of the times, dates and places and how he had to make sure he did not ejaculate in his women and pulling out to finish on their naked bellies of bottoms, except for Mrs. Ingrams of course who wouldn't let go of him until he'd finished deep inside her, nine months before her son Magnus was born. I will confess that my poor puss was quite flushed and wet with all of the sex talk and I was minded to have George show me just what a great lover he was but I was conscious that the wound from his knee to his groin, and the matching one from his waist to his shoulder were freshly healed and as Clements had warned too much of that kind of thing might break them open again. We took a hansom back to the house, both happy and laughing like a couple of newlyweds.\n\nThe very next day I opened a letter from some very old friends of his family to attend a ball being given in George's honour for his return, his medal and his newly announced Captaincy. The invite to Cypress Court was the first and I was amazed at how well George had fitted in his half-brother's life as well as his clothes.\n\nHaving been a manservant in stately homes like this one his whole life he knew what to do, how to talk and even how to dance and the setting was not lost on him.\n\nAgain his scarred face and obvious head injuries and my almost breathed and understated pointing-out that 'George's memory is not all it was since the injury' did for all of any other confusion.\n\nHe walked with his Blackthorn stick and looked great in his uniform; no he looked great in my dead husband's uniform, better than the real George Chalonier ever looked in it at least. He had broad shoulders and his thick wiry black Chalonier hair was growing back over the angry red gash that ran from his forehead back behind his ear, while the angry red dash on his right cheek was calming and almost healed - since my real husband had tried to kill him!\n\nLord Charles had been invited as well but was away on military duties, meeting wounded men from his regiment in Hampshire, then a boat across to France to see more of them in hospitals there and in training. He was so pleased with George and my progress that he told me to go to Selfridges and get an entire wardrobe for our first weekend away in such a long time.\n\nI took him up on the offer.\n\nWhen we entered the ballroom on that Saturday evening, he received a round of applause and we were centre of attention with me every inch the well-dressed society lady to my dashing husband War hero, and to my delight he acted as if I was the only woman in that huge room - the world even - especially as one of my husband's lovers' was dancing and chatting with her much older husband and looking across the room at George with a cross and rather proprietorial stare trying desperately to attract his attention.\n\nShe was no stranger to this as she and my husband had flaunted their relationship, before me at the very least, in this very room on many occasions and it had been torture.\n\nBut during this ball, new George took my hand and would let no one else dance with me for the whole night and I was even more enchanted than before. The orchestra had stopped playing for a moment and more drinks were served by the army of waiters. I was having such a nice time that even I partook in a few glasses of champagne and will confess myself quite tipsy.\n\nAs if she objected to our pleasure in each other's company Mrs. Joselyn, the lover in question, took her chance and stormed across the room to us but still, George only had eyes for me, going along with the gentle and genteel speech that was passing between us.\n\nShe reached out angrily and very possessively grabbed his chin turning his face to hers rather than mine with the start of a screeched and attention-grabbing 'George!' to tell the room something rather than her victim.\n\nHis loud and angry cry of pain and the heavy and speedy slap of his palm on her wrist and her cry of pain let the room know that the attention was very much unwanted.\n\n\"Who the hell!?\" he snapped quite like the old George would have done, the pain in his healing flesh and bone very real and I stepped up close to check all was well and to very much stake my claim to him, a gentle hand where her grab had previously been. She may very well have had my late husband, but no way was she having this one!\n\n\"George...\" she said with some angry angst in her voice and trying to step up equally close, \"Georgie C, you know perfectly well who...\"\n\n\"Madam!\" he snapped stepping back, \"I may ONCE have known who you are but sadly you have me at a loss; might I suggest you desist grabbing my barely healed face and go back to the red-faced gentleman who is looking at you with some disdain!\"\n\n\"That gentleman you have known since...\" she growled back at him.\n\n\"JULIA!\" shouted the gentleman, now blanched and storming across to us, \"George has been severely wounded and doesn't need your clumsy hands mauling him!\"\n\nWith hands on hips and pursed lips, she snarled in hesitant rage,\n\n\"BUT...!\"\n\n\"GOOD EVENING MADAM!\" her husband snapped.\n\nShe turned on her heels and duly dismissed, stomped away to her room.\n\nThe elderly gentleman apologised and shook George's hand who, to maintain the moment spoke, hesitantly at first,\n\n\"Sir, I'm most terribly sorry for any upset my lack of memory may have caused. I understand that we are old friends, but sadly you have me at a disadvantage.\" He stared at the man that I knew had been at his predecessor's Christening.\n\n\"Sir Robert Joselyn Captain - a very old friend of your fathers, and yes I have known since you were a baby.\" He sniffed, patting the breast of George's tunic where his medal ribbons shone out, \"I'm so terribly proud of you my boy.\"\n\nEver the perfect gentleman, George bowed,\n\n\"An honour to meet you... again Sir... Sir Robert,\" he paused, remembering my briefing to him in the train on the way down, \"No... Uncle... Bobby... Uncle Bobby!\"\n\n\"THERE'S OUR GEORGE!\" the old man roared slapping him a resounding thump, thankfully on his uninjured shoulder, \"Oh I say!\" said the old man recovering, \"Dear boy!\"\n\n\"I'm fine Uncle Bobby, just fine!\"\n\n\"Well done my boy, Well done!\" I smiled watching as new George made even more friends among his new family.\n\n\"Thank you, Uncle, I must leave now and retire, it's been an awfully long day and I still have some strength to recover, Goodnight sir.\" He said with a bit of a bow.\n\nSir Robert bowed back, taking out a vast handkerchief and wiping his eyes with it. We made our excuses to the host and hostess, some more of our acquaintances and retired with George walking me back to our room, which was the point normally that Husband George would make some excuse about playing billiards with Lord Someone-or-other when in fact he was off screwing another party-goer, probably Mrs. Joselyn with her big tits and mature manner.\n\nNot this George, in fact, as we made our way to our room we were followed at some distance by another female party guest, but far from it being someone heading back to their room to collect something it soon became obvious that she was following us!\n\n\"Who's that?\" whispered George stopping to admire some of the Joselyn portraiture, a rather pleasant hunting scene, very reminiscent of Stubbs. I peaked slightly to my left and saw just the hint of her dark green silk gown edged with white lace.\n\n\"That's Poppy Gillingham,\" I whispered back to him pointing at the excellent brushwork.\n\n\"Had I ever... you know?\" he giggled.\n\n\"I expect so,\" I giggled back, \"she probably thinks that you'll be dropping me off then heading back to the party for someone to screw, leastways that the old George always did while he was here before.\"\n\n\"Well then,\" said George, \"I think it's time we sent her a little message to know that things have changed since George's return from his brush with death,\" his voice trailed off and he so very gently pulled me into his arms. I slipped my arms around him and he did the same, putting one hand in the small of my back to pull him to me, then the other to my face, he kissed me.\n\nHEAVENS ABOVE!! I had NEVER been kissed like that before in my LIFE, my heart was all aflutter and not with any kind of fear, just a plain ordinary yet fiery lust for this man I'd had a damp crotch for since we sat in St James Park and he told me what he had done to various ladies, especially my good friend Josephine and Dorothy Ingrams, neither of whom I was sure I'd ever be able to look in the eye again!\n\nI felt his tongue push into my mouth then brush against mine and whatever he was doing I did straight back to him, running my hand from around his neck to stroke his cheek and pull him as hard against me as I was against him. I felt extremely lightheaded and had he not stopped our kiss I'm sure I would have fainted!\n\nWe broke, and still with his arm around me headed back to our room.\n\n\"Do you think that Polly got the message?\" he said.\n\nI nodded; whether Polly got the message I really didn't care, I had.\n\nBack at our room, he dismissed the maid saying that he would assist his wife in undressing tonight.\n\n\"Seems that everyone wants to sleep with you tonight George,\" I said, \"you must have a sparkle in your eye!\" I giggled.\n\n\"It's a natural talent, Katie,\" he said, smiled and gently brushed his fingertips down my cheek.\n\n\"What... what do you do... did you do, with your ladies I mean,\" I said blushing bright red, and feeling the effect of the wine and the champagne we had drunk.\n\n\"Did the late George not show you?\"\n\n\"He took my virginity,\" I said, \"It was quite painful that first night and a bit the second. I was just starting to work out what it was all about when he didn't seem to want to do me... to do it to me I mean.\"\n\n\"How did it make you feel?\"\n\n\"Nothing really,\" I said because that was the absolute truth, I'd had so little sex from my husband that I really didn't know what was going on.\n\n\"The bastard!\" said George closing our bedroom door behind him. Once inside he pulled me close and into his arms and kissed me again - I squealed, it was lovely! \"Katie, I'm not quite able to make love to you in the usual way, but I would really rather like to show you what it's all about.\" He grinned, \"Will only cost you a fiver madam...\" he said with a grin.\n\nI laughed,\n\n\"If two of the other ladies that employed you are anything to go by then it could be a fine investment!\" I replied.\n\nHe released me and cupped my cheek with his freshly unbandaged hand,\n\n\"I'll tell ya what Missus,\" he said affecting the kind of accent I was only used to hearing below stairs, \"Seeing as you're such a special customer like, first one is free.\"\n\nHe lowered his face to mine and kissed me a third time, the best time, and I felt my whole body tremble.\n\nWithout a word, he undressed me with a gentleness that could have taught both of my maids a thing or two, but then my maids were never planning to do what he did. Similarly, no man had ever undressed me before, my husband choosing to allow my maid to do it, and complaining about how long it took for her to do so. One night I came back into our bedroom wearing my prettiest French lace to find that the bastard had gone, left not just the room but the house completely, growling at me at dinner the following evening that my tardiness had annoyed him to such an extent that he'd needed to go to his club for a drink and the company of men.",
        "When I looked at the shirt he'd worn the night before I could see from the powder and rouge on the collar and shoulder that it was most unlikely he'd been in the company of men the night before.\n\nBut this George was completely different, he let my hair free of its pins and curls and laid it across my shoulder, stroking and petting it and my face with equal measure. Next, he stepped behind me and undid the neck of my gown lifting it gently and letting it fall forward so I could slip my arms out of it. Finally, he lowered the garment down and I stepped out, in just my satin and lace undergarments.\n\nHe sat me down and kissed me again, moving his hands to my garters and rolling down and removing my stockings.\n\n\"Lay down Katie,\" he said with the most gentle and passionate words, and I did so. He quickly removed his uniform and lay it with great care, the care of a footman, over the nearby chair then day down on the bed we had shared platonically the night before, just in his drawers.\n\nWith my breath coming in gasps he kissed me again as he had moments before and I was more than ready for what ever he chose to do to me. He started to undo the tiny ivory buttons of my chemise, kissing from my mouth along my cheek then working his way down my neck, leaving a trail of light tantalising pecks down the slope of my chest to my large breasts and he noticed my sharp deep breath.\n\n\"Are you alright?\" said my lover stopping his attentions and moving back to my rouged lips.\n\n\"George... the old one that is, well he used to be rather rough with my tits,\" I broke eye contact and looked down, \"said my dark brown hair and hourglass figure made me look like a damned common dairy maid, not a titled lady...\" I gave a light humourless chuckle, couldn't help it.\n\nOnce in my parents' garden, a seventeen-year-old George and his older brother Edmund smacked my recently shapely bottom, and when I stood to remonstrate they both looked me up and down and shook their heads and looking at each other just said the word, \"trade...\"\n\nThis was an insult and simply meant that my family had earned their 'new' money rather than just inheriting it and were further down the social scale than they.\n\nWhat they didn't realise was my giant of a cousin, Ralph was stood behind them and dropped his huge meaty hands onto their shoulders. Ordinarily, the Chalonier boys would have ganged together and fought him but Ralph was wing-three-quarter for his house rugby team and was famous within immediate family for sending two rather aggressive players from Winchester College to the hospital wing in the same match in a manner as seemingly innocent as their attacks had appeared on him.\n\n\"Trade we may be Chalonier,\" she said bending down some distance to whisper in their ears, \"but my father alone not including Katie's could buy your entire family, ancient coronet and all, three times over with just the money in his wallet and his pocket change.\" He thumped them on the back with a giggle, \"Noble yet poor boys!\" he shouted with an apologetic pout, \"noble yet poor! Come, Katie,\" he laughed, letting that very real insult settle, \"let's get back to our less noble but much grander unmortgaged family home.\"\n\nBut it remained one of George's favourite insults even while we were courting and after we were married. As far as he was concerned he had married beneath him.\n\nI had big tits and my mother, several tailoresses and any number of maids had struggled to conceal or at least strap down. It was generally uncomfortable if occasionally painful and I'd hated the imposition of such clothes. But here they were and here he was staring down at them with real desire.\n\nHe kissed me again and smiled,\n\n\"They are just the most beautiful breasts it's ever been my pleasure to see,\" he smiled, \"please, let me pay them the kind of attention they should have had from a lover.\"\n\nI felt that I might turn inside out just with the wonderful smile he gave me. Returning it I pushed my large bust towards him and he slid down the bed slightly, gently cupping each and bringing his mouth level with my left nipple. I gasped as he gently took it into his mouth and I felt it erect against his tongue and felt the roughness of it as he sucked and licked around it with a practiced edge. It was wonderful. The loving look in his eye started a fire in the pit of my loins that I just knew my skilled lover would be able to quench.\n\nHe moved to my other breast for a similar extravaganza of wonderful feelings until I sighed at his letting go of both while he undid the final buttons holding my chemise in place.\n\nAfter my tits had received just the most perfect attention, he rested on his elbows either side of my waist and smiled up at me as he lay between my legs. It was then that I realised he had slid down so his mouth was level with my puss.\n\n\"Darling Katie,\" he said, \"The next part is by far the nicest and while it might come as a bit of shock, just lay back and enjoy!\" His grin was soooo salacious that there and then I would have submitted to anything he wanted to do to me.\n\nSuch was my excitement that my legs drew up slightly, which George used as the perfect opportunity to take hold of my knickers and pull them down, and then taking my legs and putting them across his shoulders his mouth at my crotch!\n\nHe gave my puss a gentle lick swiping from the base of it up my labia to stop at my tiny clitoris, an organ that my husband had obviously been completely unaware of. But not this George, HEAVENS!!\n\nAs I sit here many years later and write what occurred I can still feel the same burn in my cheeks that I felt when first his tongue and then his fingers importuned my genitalia to such an extent that I felt my first ever orgasm. I lay back in the bed, my hands cradling his head, running my fingers through his hair, and not that I realised it until after, holding him in place and then pushing him down into my sex to keep him doing what he was doing. I know not how many times he took me to that place in paradise but it was some time later that I felt him slide up next to me, draw up the covers and pull me into the most wonderfully warm and satisfying cuddle. I slept like a log waking with George when he retrieved our nightwear so that the maid would not be shocked when they delivered our morning tea.\n\nWhen they arrived I was sat up in bed just dressed with my nightgown still bunched at my waist, my glowing puss still giving the occasional gentle spasm as I remembered what my lover had done to me the night before.\n\nThe maid seemed to take forever, messing around and tidying away my gown and underwear from the night before and even hanging George's uniform on several hangers and putting them into his wardrobe.\n\n\"Thank you,\" he said to her with a smile.\n\n\"Welcome sir!\" she squeaked, curtseyed and left.\n\nGeorge rolled out of bed and poured the tea, bringing my cup around to me, bending and handing it to me just as Daines the footman would have done, but he completed the most perfect moment by bending down to kiss me just as wonderfully as he had the night before and I kissed him back, still impressed when he slid his tongue into my mouth again.\n\n\"So was Madam impressed with my rather lacklustre performance last night?\" He sat on the bed next to me with his cup in hand.\n\n\"Madam was extremely impressed George,\" I said, \"in fact, if your going rate is a five pound note then I'll keep paying you until I'm in the workhouse.\"\n\n\"Oh well,\" he said, leaning down to kiss me, and running his fingers through my hair, \"all for free when it's for you Darling Katie.\"\n\n\"Oh, George!\" I gasped, kissing him back with equal vigour.\n\nWe dressed quickly and headed down for breakfast meeting up with the other guests all in a very jolly mood, if perhaps slightly the worse for the wines and spirits consumed the night before. Polly Gillingham looked around at us sat with our coffee and seemed somewhere between shocked and upset that her usual suitor didn't come and visit her in the night while Mrs. Joselyn appeared extremely well dressed but slightly late and in our seats in the drawing room George moved closer to me and I slipped an arm through his.\n\nThe older lady that had obviously been so well serviced by my late husband glowered at me and my new one and I returned it twice over, turning to kiss his cheek and looking back at her with such a powered stare that anyone within 100 yards would know that whatever undisclosed understanding might have previously existed was now very much off of the table, or wherever it might have taken place before, and if I had to fight for him I damn well would.\n\nI looked back at George who smiled and kissed me back with a look I saw was all gratitude.\n\nI pushed back a lock of his hair,\n\n\"I suppose you never had five pounds from her?\"\n\n\"Goodness no,\" he said, \"met her twice and she treated me like something from the sole of her shoe both times. Was far too busy fucking someone else so I understand.\"\n\n\"Darling George!\" I said, hugging his arm kissing him this time.\n\nMrs. Joselyn was now at the terrines serving herself a substantial breakfast and doing a splendid job of pretending the couple across the room did not exist, while silent stares and nods went around the room, mostly from women to women and even I, the cause of the flurry of looks, could read what was not being said. I still believe it was something along the lines of 'did you see that mousey little thing that George Chalonier married? I don't think he'll be running from bedroom to bedroom anymore that's for sure!'\n\nThere was a shooting party that morning but with George's shoulder damage he was able to give his very real apologies with little resistance from the other men and after a very pleasant tour of the sitting rooms and lunch, where Poppy Gillingham came across to us with her husband Cecil and chatted to us both, trying on two occasions to get quite handsy with George who ignored her and the two times she tried to whisper to him. I found a note tucked into his uniform jacket the next day telling how much she had missed their little 'moments together' and how she was looking forward to more.\n\nWe were driven back to the station and soon back into London by the express train and a hackney back to our house. We had sat quite close on the trip out, on the trip back we were arm in arm the whole time and just gazing at each other like star-crossed lovers. It was one of the most wonderful times of my life and I can still recall those looks, those smiles, those silly one-off, two people moments that happen from time to time.\n\nWe had dinner and went to bed and George pulled me close and kissed me, gently caressing all of those places he'd already touched but so softly and passionately that I was groaning and gasping for the same kind of orgasmic relief that I'd felt the night before.\n\nThe night before had been a kind of champagne-fuelled lust, after his discussions about how he'd pleased his other women. But tonight in the candle-lit warmth of what I now considered OUR bedroom it was love, nothing else, and he brought me to orgasm with just his fingers, and as I pulled him close I could feel his erection pressing against my thigh.\n\n\"Can you...\" I gasped as I came down from my peak, \"rather WOULD you make love to me George?\"\n\n\"Not yet Darling Katie,\" he said with a smile, \"if I do and I split my freshly healed wounds, Clements will beat the life out of me!\" he giggled for the first time and it was lovely, \"Then she'll probably come back for you.\"\n\nI pushed him onto his back and rolled against him on my side.\n\n\"Can I help you with... this?\" I said with my most cheeky smile, at the same time laying my hand on his hard cock.\n\n\"Depends on what you want to do with it?\" He said.\n\nNow my late husband George had spoken of what he wanted me to do to him and what he had some of his other women do for him. The fact that he'd used my 'never having done that kind of thing' as a form of denigrating abuse to me, the woman expected to be a virgin on her wedding night, made me never want to do it to him - ever.\n\nBut laying naked in bed with this lovely, lovely man who actually appreciated me and cared about me made we want to consider it all again.\n\nI put my hand in his,\n\n\"Show me what to do...\" I whispered, kissing a line from his lips to his ear, following the line of the shrapnel scar.\n\nHe placed my hand on his cock and a took it gently, and so very, very slowly he moved my hand up and down, up and down wanking him, speeding up as he let go of my hand and allowed me to try it myself.\n\nI kissed him again, delighting in the changing look on his face as he became more and more appreciative of my efforts,\n\n\"Faster Darling?\" I hissed.\n\n\"Yes please,\" he gasped back, the look on his face letting me know that I was doing just fine.\n\nSex was something that husband George did to me, while new George was showing me that sex was something that a man and a woman did together! I will confess that it was with some great shock that moments after he had hissed \"keep going, don't stop!\" I watched the eye at the top of his penis open slightly and long white spurts of his semen shoot out across his stomach landing as far up as his chest. He cried out at each jet shot from him and I carried on pumping for all I was worth, intent that he was going to get all of the joy that he had given to me.\n\nHe did and we lay together for minutes after, both shocked, stunned but extremely pleased with what had passed between us that night.\n\nDecember came and I was bought another new gown to go to Buckingham Palace with my wounded hero husband to watch as the King clipped his Military Cross to his jacket and thanked him for 'holding the line' in the finest traditions of the British Army. His proud father took us out to dinner to celebrate and I noticed the strangest thing, new George was working his magic on his father as he did with everyone else; Fair enough his Father wasn't actually talking to who he thought he was but there was a new closeness I had certainly never seen before and it was a pleasure to watch.\n\nHe invited us both out to Chalonier Hall for a few days promising to bring out Clements for what he believed would be her very final visits and George's recovery.\n\nTwo weeks before Christmas we packed our clothes and our necessaries and headed out to the Hall and a long Christmas break.\n\nOn our second morning, Lord Charles' real reason for inviting us out became clear. Clements massaged George and talked him through the next set of exercises that the Doctor had prescribed for him.\n\n\"You'll not get the same kind of movement you had before Captain George,\" she cautioned him, \"But follow my rules and we'll get you as much back as we can.\" \n\nI was stood in the background hovering and watching what was going on.\n\n\"Mrs. Clements?\" I said. \"Is there any massage like this that I can do that would help?\"\n\nClements smiled, I guess because she was a married lady herself and could perhaps catch the look in my eye that I wanted to do more than just massage my man and there were some very specific movements that I was keen to ensure he was capable of.\n\n\"You can get dressed now Captain George,\" she said with a smile, \"Come with me Lady Katherine and I tell you.\" She led me gently by the hand and into the upstairs hall. I wasn't quite sure what to expect from her, I feared a telling off and her insistence that George be allowed to recover slowly and I should control my baser instincts. Not at all.\n\n\"Lady Katherine!\" she said with the biggest smile and taking both of my hands, \"Lord Charles has already asked me if the Captain would be able to... err... shall we say 'fulfill his duty to the family' and I can honestly say that I can see no reason why he can't.\" She looked around and whispered to me, \"Do I guess right that so far you two haven't... aahh... checked to see if it all works?\"\n\nI grinned, my face flushing the brightest red,\n\n\"Well... not in the mechanical sense,\" I giggled, \"I think it's fair to say that we've both checked out everything manually and had a dry run as it where...\" I realised that nothing we did was dry!\n\nClements giggled,\n\n\"And did everything work?\" she smiled, \"Satisfactorily?\"\n\n\"Oh yes!\" I said, \"It was all very... successful!\"\n\n\"Oh Lady Katherine!\" she giggled, she stepped closer to the window and looked down into the garden where George was walking in the garden with his father and who was pointing across the landscape to where the dairy farm was, the stables, the mill, the oast house and brewery, the kennels and far across to the fruit orchards.\n\nI was to find out later that his father, conscious of the new spirit of friendship between two previous antagonists, was discussing how his son might like to spend a few weeks at the hall after Christmas and get to grips with the estate that had really been suffering since the departure and subsequent death of his two older brothers that had previously run the place.\n\nI watched as George shook hands with his father, with big smiles from both of them.\n\n\"Have they always been close?\" said Clements watching the scene as was I.\n\n\"Not really,\" I said in all honesty, I couldn't really say, 'Lord Charles raped his mother then abandoned them both'.\n\n\"Good to see that after all of the pain and anguish things seem to be coming together for both of them.\"\n\n\"Yes,\" I said wiping a single tear.\n\n\"Now then Lady Katherine,\" said Clements with arms folded in a most business-like manner, \"I know that Lord Charles is keen to have heirs to leave his estate to, and... well, you and Captain George are it.\" I nodded, \"Having seen your husband's scars I'm happy, assuming that the pair of you take it easy for a while, that you can... shall we say, resume... conjugal relations?\"\n\n\"I promise we'll take it easy Mrs Clements,\" I said, my heart all aflutter.\n\n\"Good girl,\" she said with a knowing smile and seeing my beaming face, pulled me into a hug. I was so taken with this that I squeezed her tight and chuckled, \"Your husband came into my care on September 24th -- I think it might be rather nice that you give him your very special Christmas Present on December 24th, three months recovery should be enough for anyone.\" She smiled a quite rude smile, \"you might need to do most of the work, Katie,\" said Clements using my first name for the first time, \"having watched him in his sleep and nature taking its course as it does in the night, I know that everything seems to be in working order.\"\n\n\"And any advice for when we finally want to start our family?\"\n\n\"Darling girl!\" said Clements putting a hand on my cheek, \"love each other Katie, just love each other, pregnancy will come along if you love each enough, trust me.\" She leaned forward and kissed my cheek and went on her way.\n\nI heard later that Lord Charles settled a small pension on Nurse Clements and she was on hand for other matters later.\n\nTwo nights before Christmas the snow fell and Chalonier Hall was perfectly dressed for the season, and George had arranged something a bit special on Christmas eve. He'd gone to the local school and asked the children to come to the hall for the end of the school day and sing carols. I'd witnessed such celebrations before at other grand Christmas houses and this was by far the nicest.\n\nHe'd ranged the children on the steps in the grand hall, and brought out Lord Charles, and various house guests who were staying for the holiday and all the staff he could find, a few of whom were watching their own children. They sang 'God rest ye merry gentlemen', 'while shepherds watched their flocks' and finished with 'away in a manger'. It was delightful.\n\nThe staff brought out mugs of hot chocolate, hotcakes, toffee apples and various other treats that George made sure were shared out widely and until the children couldn't eat anymore, and each was given a small gift, with a few for the younger brothers and sisters that couldn't be there to celebrate, and through the whole thing he just had the biggest smile across his damaged but recovering face.",
        "I could see that Lord Charles was as equally delighted with the event and was all spread arms and seeming quite parental for someone that hadn't been that man in many years. He chatted so nicely with his audience, many that knew him as the Lord of the manor as almost all of the red-cheeked, messy-faced cherubs were children of parents that worked for him either in the house, the farm, the estate or worked farms that he rented to them.\n\nHis bonhomie continued and Lord Charles was at home to friends and family that evening and in better humour than I could ever remember him being before, even with all of his sons around him.\n\nThere rarely seemed to be happiness at Chalonier Hall, not during any of my visits there. Charles had been the eldest, most grown-up and destined to inherit the family seat; but he was old before his time, married to a girl that had seen him as an investment rather than the love of her life and because of her influence watched his three siblings like a hawk for any sign that they might have eyes on his title, which alienated his younger brother Edmund who, like many of his class, was considered to be the 'spare' to the 'heir' and raised to know exactly what his role in the world was to be and it this new distrust heaped coals on the almost dead fire of their sibling rivalry.\n\nTheir father did little to address it or stop it, I still believe that after the death of his wife Lord Charles seemed almost to relish in the animosity between his four sons and while he may not have actually helped it along he did nothing to prevent it. The two of them going to war at the same time was one of the last moments they agreed on something. Even then Edmund considered himself senior to his older brother because he'd joined the County Yeomanry two years before while his older brother joined just prior to the outbreak of war.\n\nAcademic brother Henry knew from the start that he had almost no role in the Chalonier family long term and that he should make his own way in the world, happy to be away from the destructive rivalry in a place where debate was the order of the day, not argument and where his counterparts wanted nothing from him but to pass on his knowledge.\n\nHis educational bliss was to end with the death of his Brother Edmund, which upset even his English sensibilities and with his good friend joined the Guards. His noble dreams of revenge were to end in the wholesale slaughter of the Somme battlefield shortly after his elder brother Charles.\n\nGeorge, the youngest and without question the most unpleasant and wholly malignant brat from the angry and mismatched foursome had no such dreams of family revenge or even a stoic belief that he should do the right thing for his country and his class. He wanted just to survive long enough to become Lord Chalonier in his own right now that the road was clear.\n\nHe was a bully, a tyrant that used his power and his upbringing to get his own way. But like all bullies when confronted with much bigger and nasty bullies, even those bullies dressed in Imperial German field grey, he turned and ran happy to shoot anyone that could get in his way - including his doppelg\u00e4nger half-brother - but karma caught up with him by way of a 150mm high explosive shell and only parts of him were recovered.\n\nBut as we sat around the drawing room after a sumptuous dinner with me playing Christmas songs on the piano Lord Charles and his son George couldn't have been closer and that Christmas was the very first of the many happy ones that were to follow, with the elder Chalonier very much the centre of the entertainments in a way I could never remember seeing him undertake before. I was replaced at the piano by Marchioness Ellbury which meant I could sit next to my man again and we could kiss and embrace as I had jealously watched so many loving couples do before.\n\nThe Marchioness saw and changed the song from those Christmas favourites to 'roses are shining in Picardy' and George and I danced. It was the end of a very long and wonderful day but still, we danced, and George held me and kissed me all the way through. Our pianist changed to 'I'll be loving you always' and the entire room sang along.\n\nLord Chalonier was taken to his bed by the butler and two of the footmen. I also know that he was joined by the Marchioness who had become an extremely close companion since the passing of her husband ten years after the passing of his wife.\n\nGeorge and I were the last to leave the party, with him closing down the room to save work for the butler once he returned from sorting the master. I took my lover's hand and pulled him back to our room, keen to get him into bed and foreclose on the thing we had both been thinking and dreaming about for so long.\n\nI retired to the dressing room, my heart fluttering ready for what I hoped was going to be one of the most romantic nights of my life, certainly, the other George had never courted me in the way that the new one did. I finished undressing, took a deep breath and stepped back into the bedroom naked.\n\n\"Katie!\" said George his mouth hanging open.\n\nI stepped up close to him and he took me in his arms, loving the feel of my naked skin against his and he kissed me, strongly but with the most wonderful tenderness and passion.\n\n\"George, I wonder...\" I said kissing him back no less passionately than he had kissed me, \"seeing as you're my husband, could you... would you...\"\n\nHe kissed me again,\n\n\"Anything Katie,\" he said, \"you have only to ask.\"\n\n\"Make love to me?\" he smiled the most wonderful smile to me, \"Clements has given her permission...\"\n\n\"It would be an honour.\"\n\n\"You're sure you wouldn't rather make love to some older Duchess or something? The first George did.\"\n\n\"Then he must have been blind and stupid as well as being a drunken coward.\" He dropped to one knee, \"My Darling Katherine,\" he said, \"please allow me the honour and privilege of making love to you...\"\n\nI felt tears burst unbidden from my eyes.\n\n\"Thank you, George,\" I said, \"thank you!\"\n\nHe lifted me into his arms and carried me to the bed, laying me gently down in the middle, he was as naked as I. I saw the long still angry-looking scars along his leg up his chest and across his shoulder and arm, amazed that he could still lift me with all the recently healed damage.\n\nHe lay next to me pulling me close to him, letting our naked bodies touch intimately until finally I could stand it no more and pulled him over me.\n\n\"Please,\" I panted, \"Please, I can't wait any longer.\"\n\nHe adjusted his position and within moments was pushing his large penis up and into my little used puss and I gasped. On the few occasions that the previous George had fucked me, my pussy had very little time to prepare and was virtually dry, whereas tonight I'd felt puss start to swell and dampen a couple of hours before when he'd smiled and pulled me close and sang 'let me call you sweetheart'.\n\n\"Oh my Lord, GEORGE!\" I cried out feeling all of him in me. He started a slow movement in and out, kissing my flushed cheeks, \"Oh George Darling!\" I cried pulling him tight to me and enjoying not only the deep and wonderful thrusts he was forcing into me but the wonderful skin contact that had me gasping and crying into my first orgasm.\n\nIt then sashayed into a second and I was loving this wonderful contact and I knew that I wanted it for the rest of my life. I kissed him deeply and feeling such a rush of emotion took his head in my hands, \"George, I love you!\" I'd loved him since that very first night we slept in the same bed and he smiled at me, the day he admitted that he was George Daines, the day we lay together and he held my hand.\n\n\"I love you, Katie,\" he said slowing his fucking of me, \"I've loved you since the first morning when I woke up in the hospital and you were there.\"\n\n\"Oh, George! Love me, be with me, be in me, let's make our lives together,\" then the thought, \"let's make a new life together!\"\n\n\"OH KATIE!\" and I felt him tremble as he reached his peak, but far from the cry of triumph that his predecessor had favoured, this George pulled me tight and continued to push in and out of me until he was sure I was satisfied.\n\nI was.\n\nI woke the next morning to the rattle of crockery and the arrival of tea. I rolled over to see that George was awake and shaving, while I lay there naked and satisfied, pulling the counterpane up to cover my still-naked but well-loved breasts. Lucy the maid handed me my tea casting the smallest glance at my obvious nakedness, and the rattle of George in the bathroom had her quickly pouring a cup for him and departing.\n\nHe arrived moments later, his towel wrapped around his waist and I let the bedcovers fall to expose my large tits he'd loved so much and so well. He smiled and I smiled, I threw the blankets to one side to expose my body, still naked from the night before and his towel was pretty much raised by his instant erection.\n\nHe fucked me again, this time I asked him if I might try it as my friend Dorothy Stephens had so enjoyed it. I got on to my hands and knees and felt George kneel behind me.\n\nI had never known such joy as when he slipped into my very wet puss and proceeded to give me the finest Rogering I'd ever had in my life. The night before had been love but this was different, I was still head over heels in love with my man but this was something I'd never known before, lust!\n\nYes, lust, it was new to me, but I knew that it and I were going to become firm friends.\n\nWe had the most wonderful Christmas day; we went to the church where prayers were spoken for those that were missing from the family table, some carols then a brisk walk back through the snow to the house, with presents being given, the biggest lunch then many of us taking to our rooms for an afternoon nap.\n\nGeorge and I didn't sleep at first of course; we made love yet again as I was so mightily impressed with this most tactile and passionate manifestation of the human condition. \n\nWe dressed for dinner, now both so infatuated with the other that it was all we could do to keep our hands under control. George helped me pick my clothes and he insisted that I should be comfortable and the restrictive underwear was consigned to the bottom drawer for life.\n\nWe had quite the nicest time at Chalonier Hall, and George was well and truly in character now and had become The Hon George Chalonier, albeit somewhat reborn.\n\nOn a bright, frosty morning between Christmas day and the New Year George asked that we walk to the local church, a very sweet little Norman edifice that had stood as the Chalonier chapel since the 16th Century. We walked in arm in arm, wrapped up warm and very much in love. To my surprise, there was the vicar who had led such a wonderful service on Christmas Day.\n\n\"Ah Good Morning Captain Chalonier!\" he said taking George's hand and shaking it with both of his, \"We're all ready for you.\"\n\nI looked at him in surprise, all ready for what?\n\n\"Darling Katie,\" said George taking my hand and kissing it, \"since my return from Belgium and indeed my return from the jaws of death, I feel like I've been reborn, refreshed; so much so that I've asked Father Bellamy here to lead us in just a small ceremony, just to renew our vows, just to celebrate my coming back to you.\" Even George had a break in his voice at that and Father Bellamy looked most pleased as well.\n\nI was choking back tears and just nodded, my face split by the most beaming smile.\n\n\"Please, step this way,\" he said, and in three steps we were before the tiny altar and I was removing my ring and handing it to George and he slipped it in his pocket.\n\nWe went through our vows, a second time for me, both swearing to love each other 'til death do us part' and as George took my trembling hand, I noticed that it was a different ring, only noticeable really close up, and in a few moments, My George and I were married. No banns, no certificate, no breakfasts or receptions, but altogether a most wonderful experience that left my first wedding to the other George in the shade for meaning, commitment and love -- also passion, for we walked back to Chalonier Hall and headed for our bedroom where we made the most exquisite love.\n\nAnd that was how it went on, George and I spent longer at Chalonier Hall and he took over the running of many of the businesses. George had been born into working stock and understood animals, he understood farming but more importantly he understood the people that actually did the work for his father, and he made intelligent decisions based on all of those gifts and rather than the elitist contempt shown by his predecessors he actually spoke nicely to the people he considered friends rather than tenants, helping them to even greater production and then profit in the time of war.\n\nHe took more of a role with Lord Charles' racing stables with his groom's eye and within three years of his takeover, the man once described by my old friend as being hung like a Derby winner actually had his first Derby winner.\n\nI was so much in love with my husband, I felt that I could honestly call him that now, and we made love at every opportunity. And it was love, no question about it, we were crazy for each other and many people commented that despite our slow start we were so perfect for each other, so perfect in fact that when the first of the daffodils and other spring flowers were popping their heads above ground, my monthlies stopped which could mean only one thing.\n\nOur first son John was born three days after the armistice was signed.\n\nThe war was over and I knew that my George was safe and wouldn't be dragged off to France or Belgium for more of this madness.\n\nThe Chalonier fortune went from strength to strength with my George almost entirely responsible for it. Three years later our second son George was born and eighteen months after that Caroline our daughter. Our family was perfect and a joy to all and we regularly visited both sets of grandparents to share them.\n\nLord Charles, the one who had been the grumpiest become the perfect Grandpa and would play with his three heirs all day tirelessly and we had an open invitation to Chalonier Hall and they loved going. All three children worshipped their father of course and were not surprised when he had the occasional day in bed when his leg threw out more tiny lumps of shrapnel and they all thought nothing of it.\n\nThe years passed and we received a telegram from Lord Charles' solicitor. George was summoned to Chalonier Hall to meet with his father, for a final time as it turned out.\n\nThe summoning was the strangest thing; after all, it was virtually our second home. We both had our suspicions because the old man had been quite thoughtful and reflective in his closing weeks and then days and I will confess that we had both practiced a response should the old man try and expose the secret we'd both lived for almost fourteen years.\n\nLord Charles had become rather unsteady on his feet and a bit forgetful as he reached his mid-seventies and his rather hedonistic lifestyle eventually started to catch up with him.\n\nWhile I was running around the garden with my three wonderful children, George went into the large bedroom to chat with his father who knew that his time was short.\n\nGeorge told me what took place.\n\n\"George?\" said Lord Charles reaching a thin hand out to his son's.\n\n\"Yes sir?\" said George, knowing from years of experience this was how the Chaloniers had referred to their father in such momentous moments.\n\n\"I... I needed to have one last chat with you, you know, before the end.\"\n\n\"Yes sir,\" said George keeping a stiff upper lip.\n\n\"I'm so terribly proud of you George,\" he smiled, \"You've altogether revitalised the estate, turned around the farm and the farms of all of the tenants, income is up and yet everyone loves you for it. You've made 'investments'!\" he said of he really didn't really understand such radical concepts, \"you made money when the stock exchanges across the world were collapsing!\" That was true, fortunately for him, he had been my brother's footman and he'd taught him how the 'stock exchange worked', how we 'trade' families always had more money than the landed gentry, and he'd used that knowledge to best effect.\n\nGeorge smiled,\n\n\"Thank you, sir,\" he said, \"I learnt it all from you.\"\n\n\"Not all of it George,\" said Lord Charles, \"Not all of it,\" The old man took a deep breath, \"Until the war, I was quite worried which of my sons would be best suited to running my estate and I really couldn't decide which one it would be. The Kaiser made it much easier for me of course and...\" the old man struggled to catch his breath, \"...and the first three brothers fell for their country I was worried because... well because YOU had seemed the least capable of the four. YOU were married to the sweetest, nicest, most beautiful of all of my daughters' in-law, yet YOU still chose to mix with the worst of society and to sleep with every appalling slapper at every appalling weekender that YOU could.\"\n\nGeorge coughed, and thought to himself 'here it comes...' and pondered his response.\n\n\"I'm sorry sir,\" he said, \"I think my injury and recovery taught me a good lesson about what's important...\"\n\n\"Poppycock!\" said Lord Charles with a breathy but not angry chuckle, \"You came back from Belgium a different man...\" he paused again. \"George,\" he said after a long thought, \"you are George Daines aren't you?\"\n\n\"Sir?\" said George sitting up straight in a well-practiced 'shocked disdain' he had rehearsed in front of me for precisely this kind of moment.\n\n\"Oh for heaven's sake George,\" said the old man resting his hand on my husband's, \"you are ten times the George Chalonier that I raised, ten times the George Chalonier that went off to France, ten times the man of any one of your brothers, and as I lay here I will at last call them your brothers, your half-brothers if you'd rather.\"\n\nThe old man was wracked with a coughing fit and George stood ready to summon the nurse, but the old man got his breath back and carried on encouraging his visitor to sit once more, \"I've been well revenged for my terrible treatment of your mother and my abandonment of you, although your revenge has been the finest though George,\" the old man smiled, \"instead of destroying the family name and taking what you want, treating me with the contempt I deserved, you fall in love with your wife - yes Bellamy told me about renewing your vows - and you both gave me those three wonderful things, the most precious of all of my valuables, the greatest joy in my later years, John Charles and George Henry, the finest young boys to run around this house since... well... since when my brothers and I ran around here, and then...\" the old boy took a sniff and controlled his tears, \"my Gorgeous Darling Princess, Caroline!\" he managed to burst out, the effort making it hard for him to catch his breath, \"I should have had a daughter George...\" he added struggling to breath again, \"Think I would have been a different father if I'd had a daughter, and my wife hadn't been taken from me so early...\" The old man settled back against his heaped pillows and closed his eyes for a moment. He opened his eyes again, \"Aaah my little Princess, my Caroline!\" he reached across for the photograph of her in a small frame and stared at it, \"the living image of her mother, and I can see she has your mother's smile, George! Your real mother that is...\" his head dropped in shame, \"I did so badly by you and her George and in these closing hours I'd like to endeavour to make it up to you and her and only if you allow.\" The elderly lord leant forward with a real hint of the anxiety he'd been feeling in the run-up to this conversation.\n\n\"George, I am SO SORRY!\" he gasped, \"There, never thought you'd hear a Chalonier say that did you!?\" George saw that his father had tears in his eyes, \"I'm sorry to you, and sorry to your mother... for my stupidity and my ignorance, my... my savagery to one of the nicest young girls in the county, for ruining her life in the way I did.\"",
        "\"Thank you, sir...\" my George said.\n\n\"I did little to influence your upbringing other than staying away from it, which on reflection was a blessing to you... but... but I am so proud to call you my son now, and prouder to know that you are raising the next generation of Chaloniers who will be the finest yet, well finer than I could have raised.\" The old man leaned forward his hands prayerfully held together, \"It's my dying wish that you remain a Chalonier and take that family name forward and from strength to strength.\"\n\nGeorge thought for a moment; he thought of his upbringing as a servant and his reserved but very real hatred of the partying classes that just had everything and considered him a third class citizen because he had nothing. He thought of those eight rich bitches that would get drunk at weekenders and have him screw them, swearing to take their secret to the grave but in reality telling their girlfriends 'in the strictest confidence of course' about Daines the footman at Westonly Hall who was such an amazing lover and would spend the night with you and screw you to paroxysms of pleasure for a single five pound note.\n\nHe thought how much he hated the other George, his three-week younger half-brother, the most spoilt and pointless brat of that entire Chalonier generation and he broke eye contact with Charles, 9th Lord Chalonier for a moment.\n\nThe Chaloniers, the first two he'd known from a distance while the fourth had tried to murder him. That Chalonier, the one with the hateful sneer, the one that had made Private Daines G sit in his dugout trying to think of the best way to have his revenge on that bastard that had fucked over his future in the Battalion and made his life a misery, just because he could.\n\nSomething made him look out of the window and into the garden where he saw his wonderful boys becoming men, the first already preparing to head to Cambridge, and his pretty girl becoming a beautiful woman pushing me on the swing she'd loved her whole life. He could see his family playing in the garden and thought of our wonderful life together.\n\n\"I beg you, George,\" said his father in response to his silence, \"if I could get on my knees I would,\" he coughed some more, \"I'm leaving it all to you, George,\" said Lord Charles, \"Everything; I've set things in place for your sisters'-in-law so that they may still live well and comfortably and you need do nothing for them, seeing as they rarely did anything for me. George... George Please!\"\n\nGeorge was miles away though, his thoughts being back in that bad place, back to his horrible, horrible half-brother...\n\nBut something brought him out of that moment, of that passing time, that nightmare and then that sneer was no more, the last time he saw it was the moment before the smug bastard was blown to pieces.\n\nThe owner of that sneer, those of his remains they could find at least, are buried at Tyne Cot Cemetery in Belgium in one of more than 8,000 graves marked 'A Soldier of The Great War -- Known only to God' while the man he'd done so badly by and attempted to murder and lose in the fog of war had survived, barely, the explosion that had killed him.\n\nNot only had he survived, the shivering survivor pulled on the jacket his would-be assassin had discarded in his cowardly haste, carried on the fight one-handed and actually won the medal the original owner had talked about being given 'because he was a gentleman'.\n\nThere was a pause, just long enough to let the old man suffer, just a tiny bit.\n\n\"It's been an honour sir,\" said the next Lord Chalonier, taking his Father's hand with a gentle squeeze, \"I'll do it, I'll do it all for your grandchildren... Father...\"\n\n\"You laughed out loud and I looked out of the window and saw you all,\" George told me later.\n\nAnd he knew right there and then that he'd already had the best revenge on his tormentor, one that he could never have envisaged in his tent or planned in his dugout, without fate and karma interceding on his behalf.\n\n\"The real revenge was that I won you Darling Katie,\" he said to me later that night as we held each other after the most wonderful lovemaking, \"He lost everything,\" he said as he kissed me, \"and I found it, put it on and lived a life far better than the one he would have had!\"\n\nI love you George!\" I said, wiping my tears on his discarded nightshirt.\n\nSo many visitors to Chalonier Hall the next day said how Lord Charles looked at perfect peace having come to terms with his son George, after seeing much and saying nothing, after worrying about the future of his family name and coronet.\n\nBut then Lieutenant George Chalonier returned from Flanders the hero that The Times had spoken of with such clarity. Then it was the turn of The London Gazette to retell the story of this Military Cross winner, the badly wounded last survivor of his company bravely fighting off the advancing Germans one-handed, with just two rounds left in his magazine, but with a bayonet at his side ready to be fixed for the final defence.\n\nThis was strange; prior to the dispatch that told of his wounds and his bravery, Lord Charles had received nothing but worrying reports of his son's shortcomings from trusted friends -- this action had come not a moment too soon it seemed. The nasty blustery bully that had sailed for France came back a changed man.\n\nMy George did what he was told by his Doctors and strangely the nurses who he would have considered below him weeks before. He suffered his pains quietly and patiently and made every effort when told. Lord Charles had, like me, believed that his youngest son would use this as an opportunity to be waited on for the rest of his life.\n\nBut no; he saw the new closeness between George and I. He'd started a new interest in his youngest son that had never really been there before. In those weeks prior to the death of Henry he'd started to pick up from friends and family alike how his youngest and now only surviving son treated his wife with such open contempt and flaunted it whenever and however he could and lived the life of the happy bachelor -- even though he was married. He had seen the evidence for himself, sending that appalling Countess of Craie on her way at least three times before she finally got the message.\n\nSoon though, through my regular visits Lord Charles could see that we were a couple, more than we ever had been, and it was more about the change in his horrible son than with me.\n\nGeorge went from strength to strength, swore off of his previous women and could not have been a better husband to me. This was followed by my first pregnancy, confinement and delivery overseen by Clements, and the most amazing was George's new interest in the family estate and it's future meaning that Old Lord Charles could hand over the reins and his coronet to his now-favourite son.\n\nThe old man passed the next night, peacefully and in his sleep and was buried in the Chalonier crypt in the church next to his beloved wife, and with pictures of all four of his sons in their khaki uniforms in his pocket, and the small piece of Flanders clay he had carried in a tin since the death of his second son.\n\nWith the passing of my Father-in-law my husband and in real life the last surviving son of the 9th Duke Chalonier became the 10th. I didn't think things could get any more perfect.\n\nWe retired to Chalonier Hall and continued to raise our three beloved children. George was spending some time in London taking up his seat in the House of Lords while I made a visit to my old home for my parents to see their beloved grandchildren, and I met a very old friend. During some innocent chats with Mama, I discovered that Mrs. Daines, now my mother's housekeeper, was looking for an easier life now since the passing of her quite older husband and I had an idea, a repayment of a very old debt in fact. Chalonier Hall didn't have a Nanny since Nanny Hales had left to get married almost three years before.\n\nMrs. Daines had been like a big warm and friendly Aunt who kept both of my Grandparent's great houses in the state of perfect domestic bliss, then my parents and she had always treated me with the greatest kindness; her happy cry of 'Lady Katieeeeee' and the sight of her arms held wide for a hug still had the power to warm my heart.\n\nAnd she actually was my mother-in-law.\n\nI went down to her huge and spotless kitchen at a rare moment of quiet and knocked.\n\n\"Lady Katieeeeee!\" she called out.\n\nOver a cup of tea and her wonderful cake I'd never forgotten the taste of, I sat in her spotless kitchen and said that Mama had said her housekeeper was thinking of retiring.\n\n\"That I am Lady Katie,\" she said now looking her almost sixty years of age, \"Mrs. Owen is the Deputy Housekeeper and more than ready to take over the reins.\"\n\nI explained that I had the most wonderful retirement job for her. Lady Caroline was growing up and would need help and support for that process. That was a terrible slander on my gorgeous daughter, but this was for a worthy cause.\n\nMrs. Daines was initially hesitant to come to the house of the recently deceased man that had raped her almost forty years before and whose son had died moments before that rapist's son was badly wounded. I turned on the Lady Katie charm and begged that she consider taking things easier and coming to my house to look after my much-loved girl in the same way she had looked after me years before. She beamed that happy smile and she obviously felt she had to come to my aid.\n\nThree nights later and in the secrecy of the darkened west wing, I told Lord Chalonier that I had a nice surprise for him, taking his hand and leading him through to the old nursery and there was his Mother, in a rocking chair next to the fire nodding in her sleep.\n\nGeorge was stunned but I held my finger to my lips and pushed him in. He paused, then smiled the biggest smile, getting what he had to do.\n\n\"Evenin' Ma!\" he said.\n\nHis mother stirred,\n\n\"Oh my, Lord George, you frightened the life out of me, you sounded like...\"\n\n\"There's a good reason why I sounded like your son Georgie... Ma...\"\n\n\"Georgie!?\" she put her hands to her shocked face.\n\n\"Yes Ma,\" he said with a smile, he dropped to his knees before her and she touched his damaged face, loving the same damaged smile that I did, \"This is my, no OUR final revenge on those Chalonier bastards,\" he snarled.\n\nHe explained his advantures from the last time she had heard from him, his last letter from the training base he'd returned to after being wounded and being recommended for his military medal, and Lieutenant George's meeting him and after a bottle of brandy, teasing him that he was his illegitimate brother.\n\nHe explained next how 'that bastard' had him busted down to private soldier for insubordination in jealous rage once he'd found out about his now confirmed bravery decoration.\n\nMy George explained how 'that bastard' had wanted to be waited on hand and foot even in an ooze-filled Belgian trench and quite how his plan to survive began to manifest itself.\n\nHe explained about the tunic swap demand, the bastard shooting him and his many wounds especially the facial ones; then the medics, the Battalion officers, the high command, eventually the Army took him to be Lieutenant The Honourable George Chalonier and he went with it, unable for that time to talk or deny anything initially than his gradual slide into a resigned acceptance of what was happening to him.\n\nHe explained about his return to the London house, me and how much in love we were, our secret marriage and finally that young John (named after his step-father, his mother's husband), young George and Caroline were, in fact, her real grandchildren. He said that she could spend her days in the luxury of Chalonier Hall with this entire wing to herself and the three Grandchildren.\n\nHe didn't know what her reaction might be but in the end, it was very good and very simple.\n\nShe wiped tears from her eyes and hugged him like she would never let go, rocking him and leaning back to look at her son, returned from the grave.\n\n\"Well done Georgie,\" she said using her old name for him, \"after losing you for almost twenty years I'm so delighted to have you back and to find that my lovely Lady Katie is actually my lovely daughter in law, and my wonderful grandchildren. Your secret is safe with me Georgie...\" she hugged him again. I came across and joined them.\n\n\"Good evening... Ma!\" I said, and she kissed me. Now she knew that Lady Katie was her daughter in law her care of my family was second to none, our children just calling her Granny Daines and loving her like their own, even if they were never told she was their last surviving Grandma.\n\nThe years have passed and Ma has gone to her rest, along with my Grandmama and my Mother and Father. Our life is still the paradise it was all those years ago. The Second World War has come to an end with both John and George surviving their service, John as a fighter pilot, George as an Engineering Officer while Katie served in Intelligence and Security at the War Office. Both of my boys are back at Cambridge completing their studies, John with his beautiful wife Dorothy and our granddaughter Elizabeth. George is engaged to Frances, the older sister of Caroline's Fianc\u00e9 Roy, and Chalonier Hall now rings again to the sound of house parties, and young people enjoying their inheritance.\n\nLance Corporal George Daines MM is a name on the Menin Gate and the small war memorial plaque in the Chapel at Westonly Place; George Chalonier wasn't blown to pieces in a barrage in the later stages of Passchendaele as he ran away from the fighting in a stolen tunic. Rather he still walks with his blackthorn stick but that is rather more about his age than his wounds from the Great War. He became Colonel of the Regiment and was very much involved with his Battalions' although he remained in the UK right up until 1945 when Churchill himself cornered him in the Members Bar and insisting that Colonel Lord Chalonier MC should visit his Regiment now doing garrison duties in Holland and lower Germany.\n\nWinston spoke highly of him and of his name and his delight that another generation of Chalonier's were blasting that historic name across the pages of history, with one of them being one of his 'Few'.\n\nI could see in my George's face that somewhere within him was still the remains of that angry and hard-used footman who lived and loved his stolen life; still the tiniest bit angry about the honourable man he left behind to become a good version of a bad one; so this is why I am writing his, indeed OUR story\n\nThis short diary will be sealed and hidden from anyone it could do harm to and I hope not found for many, many years when the happy tale of Katie and George will live again.\n\nKatherine, Lady Chalonier.\"\n\nEpilogue.\n\nPost-graduate Student Holly wiped her eyes for the twentieth time since starting the diary and grinned, at least that was some happy ending.\n\nJohn, 11th Lord Chalonier DSO DFC had died not two years before and was buried with the military honours owed to one of the last of 'The Few', and she figured his son George would not really benefit from knowing that his grandfather was a low born footman that took the place of his cowardly, murderous half-brother. More than that, she thought back to the huge oil painting above the grand staircase, the gorgeous Lady Katherine who deserved another hundred years of scandal-free memory.\n\nHolly pressed the review buttons on the camera and deleted the pictures of that particular relic and gently folding the most personal history back into the old false book that had kept it safe this far, pasted the lid surfaces and clamped it shut. The next morning she took the now secure and innocently looking book and attached a meaningless and unrecorded white numbered label, slipping it into the bottom of one of a dozen or so large plastic boxes marked 'Chalonier Family Archives' hoping that in another fifty years someone else might open it and read of the love story of Lady Katie and her George.\n\nThe End."
    ],
    "authorname": "Androgynousother",
    "tags": [
        "wine and old lace story"
    ],
    "category": "Romance",
    "url": "https://www.literotica.com/s/androshorts-lords-and-the-lady"
}
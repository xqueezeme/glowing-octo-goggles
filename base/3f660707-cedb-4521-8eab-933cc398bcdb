{
    "title": "Transformations - Dr. De-Mona Ch. 05",
    "pages": [
        "Transformations: Dr. De-Mona Ch. 5\n\nThis is the final chapter of Dr. De-Mona. Comments, as always, are welcome!\n\nThe story will continue shortly in Transformations: Morpheus.\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014-\n\nRay, Rita, and Sugar stood in the hallway and stared at the destroyed security camera.\n\n\"What was the last thing on the feed?\" Sugar asked.\n\nRita cocked her head to the side. \"That demon bitch's hand closing on the lens. An hour earlier she was on camera getting off the elevator and leaving through the back entrance.\"\n\n\"She has her. She has both of them,\" Sugar said.\n\n\"We saw Mona leave,\" Ray said.\n\n\"And ten minutes later Demonica destroyed the only security camera?\" Sugar said. \"She took Dr. Karnes to Level 9, and she already had Bobbie Palmer down there.\"\n\n\"How?\" Ray asked. \"The camera wasn't destroyed till this morning.\"\n\n\"There has to be another way in,\" Sugar said. \"Rita?\"\n\nRita's eyes flickered back and forth. \"I'm looking at the schematics... huh.\"\n\n\"What do you mean, 'huh'?\" Ray asked.\n\n\"Follow me,\" Rita said as she walked to the rear entrance. She stepped through onto the loading dock. \"When they were routing the air vent down to ten? They ran into what they thought was a small cave and they ran the ductwork through it -- it's ten feet from the main cavern.\"\n\nThere was a metal grate in the concrete. She yanked it up and dropped into the cavity beneath. \"Fuck me.\"\n\n\"What is it?\" Sugar said as she knelt beside the hole.\n\n\"Air duct with the side cut open. Cut open from the inside.\"\n\nSugar looked at Ray. \"They dragged Bobbie Palmer through that?\"\n\n\"Or she went through it on her own, looking for Mona,\" Ray said.\n\nRita held up her plastic hand. \"Bobbie Palmer has short, dark hair.\"\n\n\"Yes.\"\n\nThere was a long, blonde strand of hair between Rita's fingers. \"More people than just Bobbie Palmer took the air vent express.\"\n\n***\n\nBobbie sat on the altar as Mona examined her. She shined the small flashlight from her medical bag in Bobbie's left eye.\n\nBobbie squeezed her eyes tightly shut. \"Ow! Mona!\"\n\n\"That hurts?\"\n\n\"It's like a laser beam.\"\n\n\"Sorry, Butch.\" She held Bobbie's hand.\n\n\"You're trying to find my pulse, aren't you?\" Bobbie asked.\n\n\"No. Just holding your hand.\"\n\n\"You're a terrible liar, babe.\"\n\n\"Can't I just hold your hand? It's been days since I was with you.\"\n\n\"I don't have a pulse, do I?\"\n\n\"Don't be ridiculous. You have to have a pulse. It's just shallow and faint, that's all. If I was out of this stupid cave with real medical equipment, I could measure it just fine.\"\n\n\"I don't have a pulse, Mona.\"\n\n\"Shut up. You're not a doctor, Butch. I am. Open.\" She pressed a tongue depressor against Bobbie's lips.\n\nBobbie opened her mouth.\n\nMona gasped.\n\nThe fangs glimmered white in the low light.\n\n\"Close,\" Mona said.\n\n\"I had sex with her, Mona,\" Bobbie said. She couldn't look Mona in the eye. \"I couldn't stop myself. I'm sorry.\"\n\n\"Stop it,\" Mona said. \"They can make us do things. You couldn't help it. I wasn't myself either. We have more pressing problems.\"\n\n\"I betrayed you, Mona!\"\n\n\"I don't care, Butch! You're here with me now and I love you. The only thing that matters is making you well.\"\n\nDemonica walked into the chamber. \"She is well. She's perfect.\"\n\nMona turned and stared at her. \"I asked you before, and now I'll ask you again: what do you want from me, Demonica?\"\n\nDemonica smiled. \"I want you to join me. I have a book from Morpheus with instructions on creating my children. A 'monster compendium' you might say, or an 'encyclopedia diabolica'.\"\n\n\"You want me to continue his work,\" Mona said.\n\n\"Think of it.\" She held up the book. \"Within these pages are secrets to end human suffering.\"\n\n\"And a recipe book for making monsters, Demonica. What makes you think I would help you do that? Especially after what you did to Bobbie?\"\n\nDemonica raised an eyebrow. \"Well, that's the whole point, isn't it? My book explains how to do it. You could use the book to investigate how to undo it.\"\n\nMona looked at Bobbie.\n\nBobbie gave her a weak smile.\n\nMona turned back to Demonica. \"I don't need some two bit Jim Jones's book to find a cure for this, Demonica. I'll cure Bobbie, and I won't need your fucking Necronomicon to do it. Now, let me take her to Level 10 and help her.\"\n\nDemonica frowned. \"Pity. Tell me, Bobbie: how are your hunger pangs?\"\n\n\"Go to hell,\" Bobbie whispered.\n\nDemonica snapped her fingers.\n\nCalvin Coombs stood up and walked to her, his swollen cock swinging between his thighs.\n\nDemonica stroked it. \"Full of blood, this one. Though he smells like a brewery. I wonder if you'll get drunk from sucking him dry?\" She reached up and grasped the back of Coombs's neck.\n\nDemonica shoved him toward the altar and he fell on his knees.\n\n\"Bon Appetit, Bobbie. Enjoy him. I'm afraid the Incubatrix won't be finding you another meal. Pity he's the last human here.\" She turned away and then stopped, looking back over her shoulder. \"Oh, not quite the last, is he Mona, dear?\"\n\n\"Goddamn you,\" Mona whispered.\n\n\"Honestly, why do people keep saying that to me like it's a curse or something?\" She walked away into the gloom.\n\n***\n\n\"We're going to need an assault team on Level 9,\" Sugar said.\n\nThe Church Agent looked at her. \"I'm afraid we can't do that, Mistress.\"\n\nRay loomed over him. \"What the fuck?\"\n\n\"Havana has given us strict orders not to go to Level 9 and not to engage.\"\n\nSugar pushed past Ray. \"Those monsters killed two agents including your leader. They slaughtered and ate them, Agent.\"\n\n\"Yes, Mistress,\" the bald man said. \"And Havana has said we are not to engage.\"\n\nSugar turned away. \"Useless!\" She pulled out her cell.\n\n\"Who are you calling?\" Ray asked.\n\n\"Maria. Hello? Who is this?\" Sugar said. \"Where is Mistress Marapova? We have to speak to her immediately.\"\n\nSugar closed her eyes and gritted her teeth. \"This is a matter of life or death! What do you mean she is searching Manhattan for someone?\"\n\n\"What's going on?\" Ray asked.\n\nSugar held the phone away from her mouth. \"That prosecutor in the federal case? Britt Connors? She's gone missing and Maria is searching for her.\"\n\nSugar shook her head. \"I understand. As soon as you speak to Mistress Marapova again? Tell her to call Stallion's. We have a grave situation here.\" She closed the call. \"We're on our own.\"\n\n\"Jesus!\" Ray yelled.\n\n\"We have to get downstairs.\" She turned to the Agent. \"Give me your gun.\"\n\n\"Mistress?\"\n\n\"Sugar,\" Ray said. \"You don't even know how to use a gun.\"\n\n\"No, but you do,\" Sugar said. \"Gun. Now.\"\n\n\"Mistress, I can't do that,\" the agent said.\n\n\"Ray?\"\n\n\"Sorry, pal,\" Ray said. He punched the agent in the face - from Ray's perspective barely more than a tap.\n\nThe agent's nose broke, and he went down on the hallway floor.\n\nRay took the gun from the man's shoulder holster.\n\nIt looked like a toy in his massive paw.\n\n\"God, is that the biggest gun they have?\" Sugar asked.\n\nRay shrugged. \"They usually don't need more than that.\"\n\n***\n\n\"I could use your help,\" Ray said.\n\nRita didn't look up from her desk at the front entrance. \"No.\"\n\n\"I could order you to. You're compelled to follow my orders.\"\n\nShe stared straight ahead. \"Be my guest.\"\n\nRay sighed. \"No, I won't.\"\n\n\"Why not?\"\n\n\"Because you are a person, Rita. And I respect you. I won't order you to help me down there.\"\n\n\"Good,\" she said. \"I hope you die.\"\n\n\"Maybe I will. And if I do? I want you to remember I didn't force you to help me. I asked. I asked like one person asks another for help.\"\n\nShe laughed. \"You aren't seriously trying to guilt me into going with you, are you? After what you people did to me?\"\n\n\"No. I'm not. I just want you to realize that not everyone sees you as a plastic girl. You are a real human being, Rita Gaia Blotchley. There are a lot of us who see that, even when you don't.\" He turned away and went back into the store.\n\nRita turned her head away and stared out the door at the parking lot.\n\n***\n\nThe monsters started leaving the altar chamber.\n\n\"What's happening?\" Ciara whispered.\n\n\"I don't know,\" Evilyn said.\n\nThe only groups left other than Evilyn, Ciara, Mona, and Bobbie were the Chorus and Calvin Coombs who sat on his haunches and stared at Bobbie.\n\nThe Chorus were lying on the stone floor, their legs once again forming a pentagram.\n\nThey looked four months pregnant, a few hours away from birthing another quintet of eyeless.\n\nEvilyn stood over them. \"What do you know?\"\n\n\"Many things,\" they said as one.\n\n\"How do we get out of here?\"\n\nSilence.\n\n\"Where are Demonica's minions going?\"\n\n\"Battle comes,\" they said.\n\n\"Battle with whom?\"\n\nSilence.\n\nEvilyn clenched her fists. \"I don't understand any of this!\"\n\n\"You are the Hellstorm,\" they said. \"You serve the Omega. He has bent time for you. He will bend time for Dr. Demona.\" They sobbed. \"But not in the way she wants.\"\n\n\"Dr. Demona? Who is Dr. Demona?\"\n\n\"The one who will be. The key. She is death and rebirth.\"\n\nMona walked up beside Evilyn. \"What are they?\" She whispered.\n\n\"Demonica calls them her Chorus. They're breeding stock, but they're also like oracles or something.\"\n\n\"What are they talking about? Dr. Demona?\"\n\nEvilyn shrugged. \"None of it makes any sense. At one point they told Demonica you would kill her. I don't think she believes it.\"\n\nMona shook her head. \"I won't kill anyone, Evilyn. I'm a doctor. I take my oath very seriously.\"\n\n\"I know.\"\n\n\"Guys?\" Ciara said. \"Bobbie's looking all vampy and shit.\"\n\nEvilyn spun around.\n\nBobbie had her lips pulled back from her fangs and she was staring at Calvin Coombs.\n\nHe smiled at her and bared his throat.\n\n\"Fuck!\" Evilyn ran and caught Bobbie in mid leap. \"No! Bobbie! You have to fight it!\"\n\n\"Hungry! So hungry!\"\n\n\"Let her go,\" Coombs said. \"I want her to.\"\n\n\"You shut up!\" Evilyn said over her shoulder. \"That's not even your body, you're just a hitchhiker.\"\n\nHe stroked his cock. \"It's so full of blood, Bobbie. I'm making his heart pump twice as hard to force the blood to his cock. Come taste.\"\n\nBobbie screamed and struggled against Evilyn's grip.\n\nMona opened her medical bag and pulled out a vial and syringe. \"Hold her.\"\n\n\"What is that?\" Evilyn asked.\n\n\"A sedative. This is all I have. Might put her out for an hour or so - if it works at all. I honestly can't tell if her heart is actually beating. Without circulation, the anesthetic won't go anywhere.\"\n\n\"No! Mona! Don't!\" Bobbie cried.\n\n\"Baby, I have to. We need time to figure out what to do.\"\n\nBobbie screamed as Mona found a vein in her neck and slid the needle in.\n\nShe stopped struggling almost immediately.\n\n\"Put her down,\" Mona said.\n\n\"Are you sure?\"\n\n\"Yes. Put her down.\"\n\nEvilyn laid Bobbie on the altar and Mona lay down beside her. She held her wife in a tight embrace.\n\n***\n\nDemonica stood near the triangular opening to the cavern. Bright light from the hallway shown through onto the stone floor.\n\nAn eyeless crouched beside her panting. She stroked its bald head gently, like she was petting a faithful dog. \"Kimiko, have the eyeless spread out in the shadows. It is important to let them enter the cavern, then surround them.\"\n\n\"Yes, Mistress,\" Kimiko whispered.\n\n\"Have the eyeless hide in the side passages. Only strike when they are too far into the cavern to retreat - surround them. Hold the reptilians and night demons back - sacrifice the eyeless as necessary but hold the elites back.\"\n\n\"What of our vampire?\" Kimiko asked and pointed to Heidi Coombs who knelt in the darkness near the entrance.\n\n\"Hold her back as well. Use the eyeless to overwhelm the brute - once he is down, the reptilians and night demons can finish him off. Have the vampire wait until the brute is down.\" Demonica smiled. \"Then have her rip Sugar's throat out.\"\n\n\"That leaves the robot.\"\n\nDemonica laughed. \"The plastic girl? She's just a toy. If she comes here, we'll rip her to pieces.\"\n\n***\n\nThe sedative lasted a total of ten minutes.\n\nBobbie went rigid in Mona's arms, and Mona held on tight as they struggled on the altar.\n\nBobbie screamed and it became a growl.\n\n\"No, Bobbie, please! Fight it!\"\n\n\"Can't fight it! Mona! I have to feed!\"\n\nEvilyn's hand closed on Mona's shoulder. \"Mona. Let her go.\"\n\n\"No. No, she can fight it!\" Mona sobbed.\n\n\"No, she can't.\"\n\nMona looked up at Evilyn with tears flowing from her eyes. \"I can't let her kill.\"\n\nEvilyn shook her head. \"Coombs isn't alive. Maybe his heart is beating and he's breathing, but whatever the Incubatrix put in him? That thing isn't human. Let her feed.\"\n\nMona looked over her shoulder.\n\nCoombs was still kneeling on the floor, stroking his distended prick beneath his beer gut.\n\nBobbie was screaming. \"Hungry! Mona, please!\"\n\n\"Let her go, doctor,\" Evilyn said gently.\n\nMona stopped holding Bobbie.\n\nBobbie rolled onto her haunches and then leaped over Mona and Evilyn.\n\nCiara jumped to the side as Bobbie landed on the naked man.\n\nShe didn't go for the throat, instead her face went between his legs and she bit his cock, driving the canines through the hard flesh.\n\nAnd Coombs laughed.\n\nBlood sprayed from the wound as Bobbie gulped down the blood.\n\nHe put his head back and smiled, his hands in her hair. \"Now that's a fucking blow job!\"\n\nCiara turned away and buried her face in Evilyn's breasts.\n\n\"God, Bobbie,\" Mona whispered.\n\nEvilyn pulled Mona and Ciara close.\n\nMona let the demoness hold her, but she still watched as Bobbie drained Coombs's blood through his dick.\n\n***\n\nRay and Sugar stepped off the elevator on Level 9.\n\nRay dropped the magazine on the Glock and checked it. \"Nineteen rounds, one in the chamber.\"\n\n\"Twenty bullets?\" Sugar asked.\n\n\"Yeah.\"\n\n\"Is that enough?\"\n\nHe kissed her forehead. \"Honestly, babe? I don't know. I got a feelin' I'm gonna be crackin' more skulls in there than shooting.\"\n\n\"But, you do know how to use a gun, right?\"\n\nRay smiled. \"I ever tell you about the gunfight me and Jimmy Four Toes got into in the Bronx back in '75? Me and Jimmy took out six or seven goombahs that night.\"\n\nShe stroked his cheek. \"You actually knew a guy named Jimmy Four Toes?\"\n\n\"Stand up guy. Turned state's evidence back in '82 and they took him out, but I was out of the life by then.\" He laughed. \"Jesus, I was a different person. What am I now, Sugar? I wonder, you know?\"\n\n\"A good man.\"\n\nHe shook his head. \"I don't know about that, babe.\"\n\nThey walked to the triangular gap in the wall.\n\nThe cave beyond was filled with shadows.\n\nRay kept the gun trained on the entrance. \"I'm goin' in first, okay?\"\n\n\"Why are you...\"?\n\n\"Sugar, don't give me the women's lib stuff, okay? You're smarter than me and faster, but I got three-hundred pounds of muscle on ya. I can take a lot of punishment. Let me go first.\"\n\nShe smiled. \"I'm right behind you.\"\n\nRay had to both step up and crouch to go though the opening.\n\nHe emerged on the other side and took a knee, scanning left and right into the darkness. \"Okay, stay there a second.\"\n\n\"Why?\"\n\n\"Just... hang on,\" Ray said. He stuffed the pistol into his waistband.\n\nThere was a huge boulder to the right of the entrance.\n\nRay picked it up. He strained and pivoted, setting the massive stone in front of the entrance.\n\n\"What are you doing?!\"\n\n\"Can you lift that?\" Ray asked.\n\nSugar reached in and tried to move it out of the way. \"No. Why did you put that there? I can't...\" Then realization swept over her. \"Ray! Don't you dare!\"\n\nHe looked over the top of the boulder at her and smiled. \"I ain't riskin' you, understand? I love you, Sugar. But you ain't comin' in here.\"\n\n\"You can't do this alone!\"\n\nRay shrugged. \"I'm gonna try. You're pretty when you're angry.\" He reached through and she took his hand, kissing his palm.\n\n\"Be careful.\"\n\n\"I'm gonna bring them back. Wait here.\"\n\n***\n\n\"We have to get out of here,\" Ciara said.\n\nEvilyn nodded. \"You should have stayed with Sugar when I took you upstairs.\"\n\n\"I said 'We' need to get out of here,\" Ciara said, fists on her hips.\n\n\"Yeah, I know.\"\n\nBobbie sat with her back against the far wall. Even in the dark, Evilyn could see her blood stained face, the crimson spray that stretched from her throat down her naked torso.\n\nMona knelt in front of her.\n\n\"Kill me,\" Bobbie whispered.\n\n\"What?\"\n\n\"Kill me, Mona. I can't do it myself...\"\n\n\"Stop talking nonsense.\"\n\n\"I can't go on like this. I can't keep doing... that.\" She nodded toward Coombs's lifeless body.\n\n\"I'll find a cure.\"\n\nBobbie shook her head. \"It's getting worse. That fucking bitch lied. Or maybe she just doesn't understand what she did to me. She told me six hours, but I was ravenous at three. And now? I don't feel full, Mona.\"\n\n\"Butch, there is a lab downstairs with better equipment than any genetic engineering facility in the world. Tech that's decades more advanced than anything I've ever heard of. If I can get you down there...\"\n\n\"What if I go insane an hour or two from now? Hmm. And, after that, what if it's every hour. I'm going to have to kill, Mona. People. I can't, I just can't.\"\n\nMona took her hands. \"Bobbie Palmer, you listen to me. I am in love with you. We are going to grow old together. So, you knock off that defeatist bullshit. Now, we are going down to that lab. Understand?\"\n\nBobbie smiled, keeping her lips closed. \"Look at you. Where'd my little Wendy Whitebread go?\"\n\n\"She's fucking pissed off.\" Mona stood up and held out her hand. \"Come on. We're leaving.\"\n\nShe led Bobbie back to the altar.\n\n\"I have to get Bobbie out of here. There's a lab on the floor below. Is there another way out of here?\"\n\n\"I don't know,\" Evilyn said.\n\n\"There's one,\" Bobbie said. \"There's an air vent back near the entrance. That's how the Incubatrix brought me here.\"\n\n\"They all went that way,\" Mona said shaking her head.\n\nEvilyn nodded. \"Demonica is out there near the entrance. She doesn't want us to leave.\"\n\n\"Could you get us to the air vent?\" Mona asked.\n\nEvilyn shrugged. \"Maybe. If she turns her followers on us, though? I don't know if I can handle all of them.\"\n\nMona shook her head.\n\n\"You and Bobbie might be able to get through that vent thingy,\" Ciara said. \"But I'm too big in the boobies to squeeze through. And Evilyn isn't as little as she appears. It's illusion. She won't fit in a vent neither.\"\n\n\"Still, if we can get you and Bobbie to the vent, you could get her to Level 10. Then I'll get Ciara out of here someway,\" Evilyn said.\n\n***\n\nRay stood in the darkness and tried to rely on his ears more than his eyes.\n\nHe had the very distinct impression he was surrounded.\n\nThe shadows in the cavern were thick and numerous.\n\nEvery step away from the entrance meant more shadows behind him.\n\nThis was going to go tits up in a hurry.\n\nFifty feet from the entrance, Ray stopped and smiled. \"Yo, motherfuckers. We gonna dance or you gonna jerk off all day?\"\n\nSomewhere, Demonica laughed.\n\nAnd the shadows came alive.\n\n***\n\nEvilyn, Ciara, Mona, and Bobbie had left the altar room and were making their way along the cliff edge when the shots rang out. Only two at first, but a dozen more followed in rapid succession.\n\nThey froze on the ledge high above the lava.\n\nThe gunshots stopped.\n\n\"We need to hurry. Bobbie, do you remember exactly where the vent is?\" Evilyn asked.\n\n\"The next chamber, there's a tunnel that leads off to the right. It looks like they cut into the cave wall and found the vent there,\" Bobbie said. The lava's glow flickered on her pale skin. She looked gaunt and sick.\n\nOne of the bat faced creatures emerged onto the ledge. It looked at them and shrieked.\n\n\"Night demon,\" Evilyn said. She stepped in front of them and unfurled her wings.\n\nThe night demon shrank back,\n\n\"Yeah, that's right, fuck face. Take a step back.\"",
        "It bared small pointed teeth at her and hissed before running back into the passage.\n\n\"Stay behind me,\" Evilyn said as they made their way into the passage leading to the mouth of the cave and the vent.\n\n***\n\n\"Ray!\" Sugar screamed as the shots ended.\n\nShe couldn't see Ray over the top of the boulder, but she could hear the blows landing and bodies hitting the cavern floor.\n\nShe jumped up and grabbed the top of the boulder, pulling herself up so she could see.\n\nFifty yards away, the eyeless things were swarming Ray from all sides.\n\nThey slashed at him with their claws and teeth, but each blow from Ray's fists would send one of them flying into the darkness in a spray of blood and teeth. Only a few returned.\n\nSugar strained to move the boulder, but it wouldn't budge.\n\n***\n\nA buddy of Ray's had once told him about going hunting for bear out west. He had talked about how they would take their hunting dogs and set them loose, an entire pack to take down the bear.\n\nNo individual dog was a match for the bear, but together the pack would eventually take the bear down.\n\nRay felt like a bear.\n\nEach slash from the eyeless was inconsequential, but a thousand cuts? No matter how strong he was? He was beginning to falter.\n\nHe punched one in the face, feeling the flesh, bone, and teeth give as the skull shattered.\n\nBut at the same time, one landed on his back and bit the back of his neck.\n\nRay reached back and grabbed it, yanked it over his head and threw it into the cave beyond.\n\nHe could hear Sugar screaming and crying behind him.\n\nSorry, Sugar, he thought. But it was better to die alone than to die knowing she was next.\n\nTwo came straight at him and he caught them in mid-air, dashing their skulls together and letting them fall at his feet.\n\nHe wasn't dead yet.\n\n***\n\nEvilyn stood and looked down the passage leading to the vent. It was filled with night demons and reptilians. Of course, she thought. Demonica knew they would try to escape.\n\n\"We're coming through, stand aside!\" Evilyn yelled into the passage.\n\nTittering laughter came from within. They had no intention of letting them pass, no matter what position Evilyn held.\n\nDemonica's word was law.\n\n\"That's a lot of them,\" Ciara said. \"Can you take 'em?\"\n\nEvilyn laughed and shook her head. \"I can't attack them, Ciara.\"\n\n\"Sure, you can. You're the Hellstorm. Let 'em have it.\"\n\n\"No. I have to go talk to her. I have to make her understand.\"\n\n\"Are you insane, Evilyn?\" Mona asked as she supported Bobbie. Her wife was even paler than before, and her eyes were sunken.\n\n\"I have to try, Mona.\"\n\nMona shook her head. \"Try quickly.\"\n\nEvilyn nodded and stepped toward the other passage, the one leading toward the doorway. Toward Demonica.\n\nCiara fell into step beside her.\n\n\"Where do you think you're going?\" Evilyn asked.\n\n\"With you, where else?\"\n\nShe took Ciara's hand. \"No. You have to stay with them. Take them back to the cliff and wait for me - I don't want you here with the night demons and reptilians so close. Go on.\"\n\n\"But...\"\n\n\"Ciara, they need you. Stay with Mona and Bobbie.\"\n\nShe sighed and turned away. \"Fine. But Demonica's gonna say no.\"\n\nEvilyn stopped her and kissed her. \"Maybe. But maybe I can convince her.\"\n\nCiara smiled. \"Okay, just hurry.\"\n\nEvilyn headed down the tunnel as Ciara took Mona and Bobbie back to the cliff.\n\n***\n\nSugar clung to the top of the boulder and watched. Ray was holding his own, but he couldn't for much longer.\n\nShe dropped back to the floor and pulled out her cell.\n\nRita didn't answer.\n\nShe looked once more over her shoulder, and then ran to the elevator.\n\n***\n\nDemonica stood on a ledge overlooking the battle going on in the antechamber. She smiled as Ray, bruised and bloodied, began to slow in his defense.\n\nShe looked up. \"Darling, I didn't expect you to come here.\" She turned.\n\nEvilyn stood a few yards away. She looked down at Ray as he fought to hold off the eyeless. \"Demonica! Stop!\"\n\n\"Hmm? No, dear. I will end it soon, but not quite yet.\"\n\nKimiko laughed as she clung to Demonica's left thigh boot.\n\nEvilyn sighed. \"Demonica, why are you doing this?\"\n\n\"I? Why darling, I'm merely defending against that brute. Ray came into my domain to take Mona and Bobbie from me. I can't allow that.\"\n\n\"Demonica, Bobbie is sick. She needs help. I want to take Mona and Bobbie to Level 10 so Mona can try to fix this.\"\n\n\"Fix what?\"\n\nEvilyn rolled her eyes. \"Her hunger, Demonica! It's not every six hours like you said...\"\n\nDemonica laughed. \"Oh, isn't it?\"\n\nKimiko laughed with her.\n\nEvilyn went rigid. \"Wait. You knew?\"\n\nDemonica shrugged.\n\nEvilyn looked to the right. Heidi Coombs was lounging nearby. She smiled at Evilyn, showing her fangs.\n\nEvilyn frowned. \"Why isn't she hungry? Why isn't she sick?\"\n\nKimiko laughed out loud.\n\n\"Oh,\" Demonica said. \"You see, Morpheus's vampires? The original seed has a defect - they become ravenous. The vampires they sire don't have that defect. Each time an original vampire feeds, their hunger comes on them faster. I assume Bobbie already consumed Heidi's spouse?\" Demonica smiled. \"How long ago was that, Evilyn?\"\n\n***\n\n\"Hey? Bobbie? Are you okay?\" Mona asked.\n\nThey were standing near the cliff edge. Bobbie was backlit by the crimson glow from far below.\n\nMona stroked her cheek. \"Bobbie?\"\n\nBobbie narrowed her eyes. \"I love you, Mona.\"\n\nMona smiled. \"I love you too.\"\n\nBobbie was breathing hard.\n\n\"Baby?\" Mona asked.\n\nBobbie shook her head slowly. \"I can smell it. I can hear it pumping.\"\n\nMona took a step back.\n\nBobbie swallowed hard. \"I am what I am, Mona. I can't change it.\" She reached out and grabbed Mona's throat. \"I am so sorry, Mona! I just can't stop!\"\n\nMona kicked her feet as Bobbie lifted her with one hand.\n\nA white high heeled boot swung around in a roundhouse and hit Bobbie in the back of her head.\n\nShe dropped Mona and tumbled forward on her face.\n\nCiara stood over her. \"I don't wanna hurt ya, Bobbie, but I'm gonna if you don't stop it.\"\n\nMona lay on her side and looked from Ciara to Bobbie.\n\nBobbie jumped on top of Mona, her teeth inches from Mona's throat.\n\n\"Bobbie, no! I love you, don't!\" Mona cried.\n\nThe white boot again, this time it caught Bobbie in the right temple and sent her rolling across the stone floor.\n\nCiara stepped over Mona. She looked down at her. \"Stay behind me, 'kay?\"\n\n\"Don't hurt her, Ciara.\"\n\n\"I won't, doc, but I'm not gonna let her hurt you. You got any more knock out stuff in your bag?\"\n\nBobbie was sitting on her haunches hissing toward them.\n\nMona dumped her bag on the rock floor and searched through it. \"There's nothing.\"\n\nCiara nodded. \"That's okay, doc.\" She sighed. \"Bobbie, sometimes when I get upset? I count to ten. I get upset a lot - usually with Eve. She's exasperating. But I just count to ten and smile. You want to try counting to ten?\"\n\nBobbie spat on Ciara's shoes.\n\n\"Okay, guess not.\" Ciara clenched her fists. \"I'm as strong as you are, Bobbie. I'm super tough, but I really don't want to hurt you. So why don't you just stay there until Eve comes back?\"\n\nBobbie leapt.\n\nCiara spun and hit her with a back fist, sending her skidding across the rocks.\n\nBobbie landed in a crouch, her lips and nose bloody.\n\n\"Butch! Stop! Please stop!\" Mona cried.\n\nBobbie leapt again.\n\nThis time Ciara did a spinning roundhouse kick.\n\nBut her planted foot went out from under her in the loose rocks and she fell sideways.\n\nBobbie landed on top of her.\n\n\"Butch, no!\" Mona screamed.\n\nCiara grabbed Bobbie's waist to push her away.\n\nHer teeth closed on Ciara's throat.\n\n\"Ow!\" Ciara yelled.\n\nAnd Mona screamed.\n\n***\n\nRay was tired, and they just kept coming.\n\nHe slammed his fist into one of the eyeless and its face exploded, but Ray went down on his knee.\n\nAnother eyeless jumped on his back, shoving him to the ground.\n\nThey came from all directions and landed on him, sharp teeth and claws digging in.\n\n***\n\n\"Help me, goddamn you!\" Sugar screamed as she ran into Stallion's first floor.\n\nOne of the Church Agents came running.\n\n\"It's Ray, he's on Level 9. They're killing him. You have to help me!\" Sugar cried, tears running down her cheeks.\n\nAt the mention of Level 9, the agent looked at the floor.\n\n\"Help me, goddamn it!\" Sugar said. She pushed past him into the front entrance. \"Rita! Please!\"\n\nHer desk was empty.\n\n***\n\nThe eyeless held Ray on his knees on the stone floor. His shirt was ripped, his entire torso bloodied.\n\nDemonica walked slowly toward him. \"Hello, lover.\"\n\nRay looked up at her, his left eye almost swollen shut. He spat blood on the floor. \"Come to gloat?\"\n\n\"No, Ray. I came to watch you die.\" She cocked her head sideways. \"I was going to let my night demons and reptilians finish you off, but I think the eyeless will suffice. Kill him. Slowly.\"\n\nThe eyeless shoved Ray to the floor and began kicking him.\n\nDemonica smiled. \"Goodbye, lover.\"\n\n***\n\n\"Butch! Stop!\" Mona cried.\n\nBobbie looked up and vomited Ciara's blood on the stone floor. \"Bad blood. Transformed taste... terrible.\"\n\nShe stood up slowly, her face covered with Ciara's blood.\n\nBobbie drew in a breath. \"I can smell yours, Mona. Warm. Delicious.\" She walked slowly toward Mona.\n\nMona began to sob. \"Butch, you're breaking my heart!\" She stood up.\n\nShe was holding her scalpel in her right hand. \"Please don't come any closer, Butch.\"\n\nBobbie smiled as she walked across the stones. \"I'll give you my blood, Mona. You'll come back like me.\"\n\nMona shook her head. \"Fight this, Butch. You have to fight!\" She glanced down.\n\nCiara was holding her throat, dark red blood running slowly between her fingers.\n\n\"Butch, I have to help her,\" Mona sobbed.\n\n\"I love you, Mona.\" She looked at the scalpel. \"What are you going to do with that?\"\n\n\"You know. Please don't come any closer.\"\n\nBobbie laughed. \"You're not a killer, babe. We both know that.\"\n\n\"I have to help her, Butch. Step away!\"\n\nBobbie rushed toward her.\n\nShe wrapped her arms around Mona.\n\nThen she stopped and stared down.\n\nThe scalpel was sticking in her chest.\n\n\"I'm sorry! I'm sorry!\" Mona cried as Bobbie dropped to her knees.\n\n***\n\nThe night demons and reptilians kept watch over the air vent. Demonica had told them to expect that Evilyn Hellstorm might try to help Mona Karnes escape.\n\nThey were watching the entrance to the tunnel.\n\nSo, their backs were turned when the small shape dropped out of the vent.\n\nHer blue Stallion's uniform was gone, discarded before she entered the vent from the loading dock.\n\nShe crouched under the vent opening on her pink plastic legs.\n\nShe rose flicking her wrists.\n\nIn her hands, she held two butcher knives from the Stallion's kitchen.\n\nRita Gaia Blotchley flicked her head back, sending the cascade of electric pink hair back away from her doll's face.\n\nThe blades whistled in the air as her hands danced at the end of her mechanical arms.\n\nA night demon was beheaded from behind, his bat-like head tumbled from his shoulders and a jet of blood painted the roof of the dark tunnel.\n\nThe others turned as one.\n\nDeath was a pink robot.\n\n***\n\nEvilyn ran through the tunnel toward the cliff.\n\nBehind her, she heard the screams of the night demons and reptilians as they emerged from the side tunnel.\n\nShe spun, ready to fight, only to find the creatures were running away from her, running toward the mouth of the cave.\n\nShe didn't wait to see what they were running from, she just kept running toward the cliff.\n\n***\n\nMona fell on her knees with Bobbie. \"I'm sorry.\"\n\n\"I love you, Mona,\" Bobbie gasped.\n\nAnd then she was gone. Mona's life died in her arms, her scalpel deep in Bobbie's heart.\n\nMona wailed as she held her on a cliff overlooking a field of lava.\n\nCiara moaned nearby.\n\nMona closed her eyes, her chin trembling. She laid Bobbie gently on her side.\n\nThen Mona stood up and collected her kit. She knelt over Ciara.\n\nThe girl's pulse was weak.\n\n\"Ciara!\" Evilyn screamed as she ran onto the cliff. She slid to a stop over Mona. \"What happened?! Oh, Jesus!\"\n\n\"Quiet,\" Mona said. \"I'm working. Take a step back.\"\n\n\"How do I help?\"\n\n\"By shutting up.\" She pulled Ciara's hand away from her throat.\n\nBlood flowed heavily from a gash in her neck.\n\n\"She pierced the jugular,\" Mona said.\n\n\"Can you fix it?\"\n\n\"The puncture is small. I have to cauterize the vein. I need something to heat my...\" Mona sobbed.\n\n\"What?!\" Evilyn asked.\n\n\"I need my scalpel,\" she whispered miserably. She turned and nodded toward Bobbie.\n\nEvilyn cringed.\n\nThe scalpel was still sticking out of Bobbie's chest.\n\n\"Jesus,\" Evilyn whispered.\n\nMona started to rise. \"I'll get it.\"\n\n\"No,\" Evilyn whispered. She put her hand on Mona's shoulder. \"I'll do it.\"\n\nBobbie stared up at her glassily.\n\nEvilyn reached down and pulled the scalpel out of her chest.\n\nBlood dripped from the silver metal.\n\nMona didn't look up. \"I need something to heat the blade.\"\n\nEvilyn pointed her index finger at the scalpel. A tongue of flame snaked out and bathed the blade in fire.\n\nMona stared at her as the blood was burned away and the blade became red hot. \"Bring it here.\"\n\nEvilyn held the blade in her claws.\n\n\"Touch the blade right here,\" Mona whispered.\n\nCiara screamed.\n\n***\n\nDemonica whirled around as the night demons and reptilians rushed into the chamber. \"What is it? What's wrong?\"\n\nThey were hysterical, but she caught one word: Robot.\n\nRita entered the chamber, her hands moving lightning fast, the knives finding flesh and severing limbs.\n\nKimiko grabbed Demonica and pulled her away as the blades passed within an inch of her Mistress's throat. \"We must go! Now!\"\n\n***\n\nRay was blacking out, his ribs cracking with each kick.\n\nThen the eyeless were running away from him.\n\nHe looked up.\n\nRita was standing over him, kitchen blades spinning in her hands like an insane food processor. \"Can you stand?\" She called over the whistling of the blades.\n\nHe just stared at her.\n\n\"Ray? Can you stand?\"\n\nRay smiled, his lip split. \"Baby, I could dance.\"\n\n\"Don't call me Baby.\" She dropped one of the knives and held out her hand.\n\nHe took it and she hauled him painfully to his feet. \"We have to get Dr. Karnes and her wife,\" Ray said. He collapsed against her.\n\n\"I'll come back for them. I have to get you out of here.\" She led him back to the entrance. She kept one eye on the shadows.\n\nRay's fist rocketed out as one of the eyeless sprang on them from a dark corner.\n\nThe face exploded and Rita sliced its head off.\n\n\"Nice,\" Ray whispered.\n\n\"Keep moving.\"\n\nThey stopped at the boulder blocking the cave mouth.\n\nShe stared at it. \"Did you put that there?\"\n\n\"Yep.\"\n\n\"God, you're fucking stupid.\"\n\nHe shrugged. \"Seemed like a good idea at the time.\"\n\n\"Fucking moron.\" She sat him down and lifted the boulder over her head before throwing it into the shadows.\n\nSomething there made a squeak followed by a squishing sound.\n\nRita smiled, the corners of her rubber lips turning up.\n\nRay smiled back.\n\n***\n\nCiara opened her eyes. \"Eve? Hi.\"\n\n\"Hi, sweetheart,\" Evilyn said.\n\nCiara looked at Mona. \"Hi, doc.\"\n\nMona nodded.\n\n\"I messed up, Eve,\" Ciara said. \"I tried to stop Bobbie. I wasn't good enough...\"\n\nEvilyn sobbed.\n\nMona looked away.\n\n\"Where'd Bobbie go?\" Ciara whispered.\n\nEvilyn moved to the side.\n\nCiara looked past her at Bobbie's body. She gasped, and then she began to cry. She grabbed Mona and pulled her close.\n\nEvilyn wrapped her arms around them both.\n\n\"Touching,\" Demonica said.\n\nEvilyn stood up, opening her wings and shielding Ciara and Mona. \"You did this!\"\n\n\"Me? Well, I didn't kill her,\" Demonica said.\n\nCiara stood up and stood beside Evilyn. \"Do you see now? Do you see what she is?\"\n\nEvilyn sobbed. \"Why? Why did you do this?\"\n\nDemonica looked bored.\n\nBeside her Kimiko smiled and clutched Morpheus's book against her chest.\n\n\"My Chorus said Mona was going to kill me.\"\n\n\"You said you didn't believe them!\" Evilyn said.\n\nDemonica shrugged. \"Why take the chance? Look at her. She's broken now. Poor thing. If only there was some way she could end her suffering?\"\n\nCiara and Evilyn turned and looked.\n\nMona was standing on the edge of the cliff.\n\n\"Bye, darling,\" Demonica said and smiled.\n\nMona pitched forward.\n\n***\n\nEverything moved in slow motion.\n\nCiara screamed and ran toward Mona.\n\nMona was already past the edge and falling.\n\nSomething moved in the air above Ciara, and she fell on the stone floor.\n\nEvilyn Hellstorm, her wings spread, sailed over her. The wings drew against her body and then moved violently backward, moving a powerful wind behind her that blew back Demonica's hair from thirty feet.\n\nShe rocketed over the edge of the cliff.\n\n\"Eve!\" Ciara screamed as Evilyn disappeared.\n\nTwo seconds later, the Hellstorm flew high above the cliff.\n\nShe held Dr. Mona Karnes in her arms.\n\n\"What is she?\" Kimiko asked.\n\nCiara stood up and smiled. \"That's my girlfriend!\"\n\n***\n\nEvilyn dropped gracefully to the ground beside Ciara. \"Take her.\"\n\nCiara led a dazed Mona away from the cliff edge.\n\n\"My, my. I think I underestimated you, dear,\" Demonica said.\n\nEvilyn walked toward her. \"Show me.\"\n\n\"What?\"\n\n\"Show me!\" Evilyn screamed. The cavern echoed and the eyeless cowered.\n\nEvilyn pressed with her mind. Demonica's mind opened.\n\nVisions flooded Evilyn's mind. Cities on fire, bodies piled on sidewalks like stacks of firewood, rivers of fire and blood.\n\nAnd above it all, Demonica, laughing.\n\nEvilyn broke contact.\n\nDemonica stumbled back and Kimiko kept her from falling.\n\nDark blood dripped from Demonica's nose.\n\nEvilyn shook her head. \"Ciara was right. You don't love. You can't love. You're nothing but hate.\"\n\n\"I am what they made me.\"\n\nEvilyn laughed. \"The fuck you are. You're pure motherfucking evil.\"\n\nDemonica smiled. \"Kill her!\"\n\nHer minions charged forward.\n\nEvilyn rose ten feet into the air, her wings beating.\n\nShe screamed, her hands outstretched toward the minions.\n\nFlames roared from her hands like flamethrowers. Fire poured out of her mouth and eyes.\n\nTen eyeless erupted in flames.\n\nCiara and Mona huddled together under Evilyn as Demonica and her followers scattered and the cavern beyond became an inferno.\n\nCiara saw Kimiko running toward the altar room. \"Don't you move, Mona. I mean it. Stay here!\"\n\nCiara jumped to her feet and ran toward Kimiko on the high heeled boots.\n\nTwenty feet away, Ciara leaped into the air and came down on her hands, somersaulting across the stone floor.\n\nShe came down behind Kimiko and put both hands on her shoulders.\n\nShe vaulted over the sub slut and twisted in mid-air, coming down facing her.\n\nCiara smiled at her. \"Where ya goin', bitch?\" She punched Kimiko in the face and the woman fell back.\n\nCiara ripped Morpheus's book out of her hands and ran back to Mona.\n\n\"The book!\" Demonica screamed.\n\nCiara stumbled and fell near the cliff edge, her hands going over the side.\n\nWhen she rolled back to her feet, her hands were empty. She looked over the edge. \"Oopsie.\"\n\nDemonica shrieked.\n\nEvilyn's flames reached Demonica and she dashed away deeper into the caves toward the altar chamber.\n\n***\n\nEvilyn landed on the cliff as the fire died.\n\nThe cliff was littered with the burned out husks of the creatures.\n\nMona stared glassily toward the cliff edge.\n\nEvilyn took her hands. \"No, doctor.\"\n\n\"I can't... I can't go on without her.\"\n\n\"What would Bobbie want, Mona?\" Ciara asked as she put her hand on Mona's shoulder.\n\n\"It doesn't matter what she...\"\n\nEvilyn put her hands on Mona's temples. \"You will not kill yourself. Do you understand? Grieve, cry, scream all you want. But this world needs you. Do you hear me? You will not kill yourself.\"",
        "Mona's eyes unfocused and then re-focused. She blinked. \"No. No, I won't kill myself.\"\n\nCiara smiled at Evilyn and nodded.\n\n\"It's going to be okay, doc,\" Evilyn whispered.\n\nEvilyn started to lead them away toward the entrance.\n\nMona stopped moving. \"We can't... leave her.\"\n\nEvilyn looked at Bobbie's body. She looked small on the cliff edge.\n\nShe walked over and scooped her up.\n\nTogether, they made their way to the cave entrance.\n\n***\n\nThe elevator door opened, and Rita stepped out of it with a knife in her hand.\n\nCiara and Mona walked toward her down the hall of Level 9.\n\nBehind them Evilyn carried the limp body of Bobbie Palmer.\n\nRita stepped aside as they got in the elevator without a word.\n\nThe doors closed and the elevator began to descend.\n\n\"I like your hair,\" Ciara whispered.\n\n\"Thank you,\" Rita said.\n\n***\n\nSugar sat with Mona in the lounge on Level 10. The walls were stark white, but the furniture was chrome and black leather.\n\n\"What do you want us to do with Bobbie's body?\" Sugar asked.\n\n\"We had plots together in Long Island. Butch made me, I thought it was morbid, but...\"\n\n\"I'll arrange it,\" Sugar said.\n\n\"Can I even go to her funeral?\"\n\n\"Yes. It will private. Just you and anyone you want there.\"\n\n\"You and Ray and Rita. Evilyn and Ciara.\"\n\n\"Of course.\"\n\nMona fought back tears. \"Nobody can know, can they?\"\n\nSugar shook her head. \"Family members... well, I'll wipe their memories afterward.\"\n\nMona winced. \"No. I don't want anyone there but us. Can you... can you make her family accept that she's just gone?\"\n\nSugar smiled and nodded.\n\n\"Can you make me... forget?\"\n\n\"What?\" Sugar asked.\n\n\"I... Evilyn did something to me. To my head...\"\n\n\"I know,\" Sugar said. \"She was only trying to help.\"\n\n\"I can't kill myself, but I still... I can't stop thinking about her. I murdered my wife.\"\n\nSugar got out of her chair and knelt in front of her. \"No! This was Demonica. Not you. You freed her, Mona.\"\n\n\"I... I don't think I'll ever stop thinking about it.\"\n\n\"I'll help you.\"\n\nMona nodded. \"I'm never going to be in that plot with her, am I?\"\n\nSugar squeezed her eyes shut and shook her head.\n\n\"Immortality. Never ending pain.\"\n\n\"No! Mona. It won't be like that.\"\n\nMona bit her lower lip. \"I want to be with you and Ray.\"\n\n\"What?\"\n\n\"I want to be in your coven, Sugar. You can do that right?\"\n\n\"Professional Caste usually isn't part of a WhoreMaster's coven...\"\n\nShe began to sob. \"Sugar, please! I want...\"\n\n\"Yes. Yes, you will be.\" She held Mona tight. \"We'll force the issue. Fuck the Church. They can't do a fucking thing after you're bound. Yes, Mona.\"\n\n***\n\nRay rolled over on the examining table and flexed his muscles. The ribs were completely healed - the miracle of being transformed and the miracle of Insta-Heal.\n\nRita walked into the lab and glanced at him, then she turned away.\n\n\"Rita?\"\n\n\"Yes?\"\n\n\"Why'd you do it?\"\n\n\"I don't know.\"\n\n\"Thank you,\" Ray said.\n\n\"Don't.\"\n\n\"I know you hate me but thank you for pullin' me outta there. I owe you my life.\"\n\nRita scoffed. \"Fuck you, man.\" She stalked away holding up the middle finger of her right hand.\n\nRay smiled. And why not? He was in love.\n\n***\n\nMona moved steadily up and down the WhoreMaster cock, taking him deeper than humanly possible after the sterilizer had opened her womb.\n\nRay lay under her, his hands on her full breasts, pinching the newly pierced nipples.\n\nSugar knelt behind her, caressing her tattooed buttocks.\n\nShe turned and kissed Sugar, her lips permanently tinted with dark tattooed lipstick.\n\nA heart was tattooed under her left eye and, above it, a star near the corner of her eye. Her skin no longer had the healthy tan of before, now she was a goth princess, her skin ivory, her blonde hair turned jet black.\n\nNo more Wendy Whitebread, now she was Butch's dream - a hot goth girl.\n\nShe cried then even as she felt her orgasm building.\n\nSugar's hands touched her temples. This would be the point where she took away Mona's pain.\n\nRay cried out and sent his WhoreMaster cum deep inside her.\n\nThe world went black.\n\n***\n\n\"Final launch wave will commence in T-minus twenty-two minutes. All transformed are to proceed to their designated HLV. Thank you for flying Richards Interstellar.\"\n\nMona blinked. \"Where...\"\n\n\"Fuck, I have to pee again,\" a voice said in front of her. \"I'll be right back.\" She was looking at the back of a tall, willowy blonde's head as the woman disappeared in a crowd.\n\n\"Wait,\" Mona whispered.\n\nShe was surrounded by the transformed. It looked like an airport. She stared out the windows expecting to see jets. Instead she saw launchpads. Launchpads with silver rockets. Dozens of them.\n\n\"Hello, Mona.\"\n\nShe started to turn. \"No, don't look at me.\" Two warm hands touched the top of her shoulders.\n\n\"Who are you?\"\n\n\"Your friend. At least I will be.\" His hands squeezed her shoulders. \"My name is Adam.\"\n\n\"Why can't I look at you?\"\n\n\"Because you don't know me yet, and I don't want you to recognize me when you do.\"\n\n\"Time. If I know you when I see you, it will change the future.\"\n\nHe laughed and that laughter made her feel warm inside. \"You're smart, doc. Smarter than me.\"\n\n\"You're like him. Morpheus. You're a god. You mean you're not as smart as I am?\"\n\nHe laughed again. \"You ever read Greek Mythology, doc? Zeus was practically a moron.\" He sighed. \"I'm sorry about Bobbie, doc. I tried to find a way to fix it, but there was no way I could bend it that I could save Bobbie and the world.\"\n\nMona began to shake. \"Sugar was supposed to take the pain away.\"\n\n\"She wanted to, doc. But see, Sugar's smart too. Pain is part of us, Mona. It defines us like love, hate, fear, courage. Everything goes together to make a person. You can't take away part of it without changing who a person is. Sugar knows that, but she's going to take care of you till you can stand on your own. We all are.\"\n\n\"I don't see how that's going to happen. I can't stop...\"\n\n\"No, and you never will stop thinking about her. But that doesn't mean life ends. You just have to hold on a while, and you'll see.\"\n\n\"Nothing is worth this pain.\"\n\n\"Aww, doc. One day you'll know that's not true. That girl you saw just now with the pretty hair, voice, and the weak bladder? She'll show you. And, if that isn't enough?\" He took her hands and moved them down to her stomach.\n\nHer round, full stomach.\n\n\"Maybe this will show you.\"\n\nShe clutched her pregnant stomach. \"But that can't be.\"\n\n\"And, yet here you are.\"\n\n\"How?\"\n\n\"You'll figure it out, Dr. Demona. It's what you do.\"\n\n***\n\nShe woke up wrapped in Ray and Sugar's embrace.\n\nShe reached down and felt her belly. Flat - flatter than it had been before her transformation.\n\n\"Hi,\" Sugar whispered in the dark.\n\n\"Hi.\"\n\n\"You were out for a while.\"\n\n\"I saw things, Sugar. None of it made sense.\"\n\n\"It happens. Did you see Morpheus?\"\n\n\"No, someone else.\" She stared into the dark.\n\n\"You okay, Mona?\"\n\n\"Demona.\"\n\n\"What?\"\n\n\"My name is Dr. Demona. Mona Karnes is gone. She died with Bobbie. Call me Demona.\"\n\nSugar held her tight. \"Yes, Demona.\"\n\nThey fell asleep wrapped in each other's arms.\n\n***\n\nDemonica stood and looked over the cliff into the lava below.\n\nBehind her, the Chorus cried out. \"Death is here! Demona is here!\"\n\nDemonica raised an eyebrow and stared into the void. Then she unfolded her wings and began to move them. Wind rushed around her legs and she rose into the air. She soared over the lava and landed on a ledge across the chasm.\n\nThe stone wall above the ledge was sheer.\n\nShe drew back her hand and slashed at the rock, gouging it.\n\nRay and Rita had secured the air vent - there would be no escape through it.\n\nAnd Rita was waiting on the upper levels. To escape in the elevator was impossible.\n\nThey would need another way out.\n\nDemonica slashed at the rock again, and a fist sized chunk fell from the wall, crashed against the ledge, and plunged down to the lava below.\n\nDemonica smiled.\n\n***\n\nIn a cemetery on Long Island, a small group gathered on a gray, overcast day. There was no priest, no rabbi, no minister. The people from the funeral home gave them space.\n\nThe man was huge, stuffed into a black suit that looked ready to burst.\n\nBeside him was a tall redhead in white who looked like Jessica Rabbit from the old movie brought to life.\n\nTo her left was a thin girl wearing black jeans and a black hoodie. She had the hood pulled low, but her electric pink hair occasionally showed beneath the shroud.\n\nTwo girls stood together, one tall with short, almost white hair and piercing blue eyes. She wore a black raincoat and held the hand of a shorter redhead. The redhead was poured into a black dress that did little to hide her considerable charms.\n\nThe redhead never stopped crying, and the white haired woman never let go of her hand.\n\nBy the grave, a woman stood in black, her skin pale in contrast to her jet black hair.\n\nHer purple eyes stared intently at the headstone.\n\nBobbie Palmer, Beloved Wife, and, chiseled beside it, Dr. Mona Karnes, Beloved Wife.\n\nShe was burying two that day.\n\nDr. Demona put her hand on the stone above Bobbie's name. \"I don't know what to say, Butch. I miss you? I love you? All that and more. We got caught up in the affairs of gods and devils, and I'm sorry, Babe.\"\n\nShe knelt down. \"I have to leave the old me here, Butch. Because Dr. Demona has a lot of work to do. You see, when I talked to him, to Adam? I believed him. We're going to save the world, Babe. We're going to do it in a fucking awful way, but I've seen where we're going, Butch. God I wish you could see it. I wish you could be there. Something wonderful is coming.\"\n\nShe stood up and turned away.\n\nThe others looked at her. Even Ray was crying.\n\nShe turned back to the headstone. \"One other thing, Butch. I'm going to kill that bitch. I'm going to fucking kill her. And I'm going to look in her eyes when I do it. I'm going to hear her scream, and I am going to watch the hope fade in those goddamn burning eyes when she knows I'm the one who ended her.\"\n\nRay took her hand and led her back to the limo.\n\nSugar walked up to Evilyn and Ciara. \"I spoke to Havana. They want to talk to you, Evilyn. They're arranging to fly you down next week.\"\n\nCiara looked up at Evilyn. \"What about me, Sugar?\"\n\nSugar frowned. \"You're also going to Havana - as Whore Caste. You'll go to the port and be chosen by a Whore Master.\"\n\nCiara's lip trembled.\n\n\"Yeah, hard pass on all that shit, Sugar,\" Evilyn said.\n\nCiara smiled.\n\nSugar tried to hide her smile. \"What should I tell them?\"\n\n\"You tell them Ciara and I don't want any part of this. We're not their property.\"\n\nSugar bit her lower lip. \"And, if they don't accept that?\"\n\nEvilyn lifted an eyebrow. \"Tell them I'll fly down to Cuba and burn their entire island to a cinder. Then I'll find Morpheus and light his ass up too.\"\n\nCiara was beaming.\n\n\"You know? I think I believe you,\" Sugar said as she walked toward the limo.\n\nCiara hugged Evilyn as they walked. \"Where we going?\"\n\n\"You'll see.\" They walked into the woods beyond the cemetery and Evilyn took her raincoat off.\n\nBeneath it, she was dressed in her leather bikini and thigh boots.\n\n\"You're gonna cause a scene, Eve,\" Ciara giggled.\n\n\"Come here,\" Evilyn said.\n\nCiara climbed into her arms and Evilyn kissed her.\n\nCiara closed her eyes as Evilyn changed, her wings unfurling.\n\n\"Whoa, don't you drop me,\" Ciara whispered. She wrapped her arms tight around Evilyn's neck.\n\n\"Never,\" she beat her wings and rose into the air over Long Island before soaring northeast.\n\n***\n\nCiara woke up just as Evilyn landed in a grove of trees.\n\n\"Where are we?\"\n\n\"Take a look.\"\n\nCiara stepped out of the trees and looked down the hill at Ithaca College. \"We're going back to school?\"\n\nEvilyn shook her head. \"Not we. You.\"\n\nCiara blinked. \"Huh? What are you talking about?\"\n\nEvilyn ran her fingers through Ciara's red hair. \"I need some time to think, Ciara.\"\n\n\"But... I'm your Inky Dinky Doo... You need me.\"\n\nShe knelt down. \"Yes, I do need you. But right now, I need to find out what I am. I need to think, and I need to find us a home.\"\n\n\"Find us a home?\" Ciara asked. She smiled. \"You mean like a house? Picket fence? Flowers?\"\n\nEvilyn laughed. \"All that and more.\"\n\n\"You're not going to ghost me, are you?\"\n\nEvilyn shook her head. \"No way. You're totally my Inky Dinky Doo.\"\n\n\"A real house?\"\n\n\"A real house.\"\n\n\"Okay.\" She frowned. \"Wait, what do I tell the cops about the astronomy field trip if they ask?\"\n\nEvilyn shrugged. \"Tell them you had a cold and stayed home.\"\n\n\"Hmm, okay. So, I just go back to class?\"\n\nEvilyn smiled. \"You just go back to class.\"\n\n\"Okay. I'm changing majors by the way.\"\n\nEvilyn laughed. \"To what?\"\n\n\"Mathematics. I feel like I'd be good at it.\"\n\nEvilyn frowned. \"You sure, honey?\"\n\nShe looked hurt. \"What? You think I'm dumb or something?\"\n\n\"Absolutely not. You want to be a mathematician? Go for it.\"\n\n\"Cool.\" Ciara bit her lower lip. \"Um, Eve, you don't expect me to be like, you know?\"\n\n\"Celibate?\" Evilyn said.\n\n\"Yeah. 'Cause, I'll try really hard.\"\n\n\"You don't have to be celibate for me Ciara.\"\n\nCiara grinned. \"Thank God! I'm gonna fuck like a rabbit, I just really didn't want to feel bad for it, you know? You can too, just don't forget about me?\"\n\nEvilyn kissed her. \"I'm coming back for you.\"\n\n\"You better.\"\n\nEvilyn kissed her again and then she beat her wings and rose into the air.\n\nA Frisbee flew past Ciara's nose as she watched Evilyn disappear into the clouds.\n\nA boy in a t-shirt and shorts came running up the hill. \"What was that? Some kind of bird?\" He was staring straight up.\n\n\"No, that was my girlfriend. You almost hit me with that Frisbee!\"\n\n\"Girlfriend?\" The boy stared at her for a second and then brushed back his curly brown hair. \"Oh, joke. Got it. Sorry about the Frisbee.\" His eyes were moving all over her, unsure of what spot to stare at next.\n\nCiara twirled a lock of her hair with her finger. \"Want to fool around?\"\n\nHis mouth dropped open. \"Uh, yeah!\"\n\nShe led him back in the trees.\n\n***\n\nDemona stood in the lab on Level 10 and looked at herself in the mirrored wall in her office. She was wearing an old fashioned nurse outfit, cut short and cotton candy pink.\n\nShe giggled at how absurd it was, not to mention totally hot.\n\nSomeone whistled.\n\nDemona looked over her shoulder to see Sugar wearing a skintight white latex dress standing in her doorway.\n\n\"That's... a statement,\" Sugar said.\n\n\"Says the chick in the white latex banana peel.\"\n\n\"Point taken.\" She held out a package. \"This came for you. You know, I kind of miss the Church Agents - at least I didn't have to deliver the mail with the boys around.\"\n\n\"Was kind of fun to see Marapova send them scampering - you're right, she is one scary bitch.\"\n\n\"Well, in her view, they put us in danger by not protecting us from Demonica. They're lucky she just kicked them out of Stallion's - she might have sent them back to Havana without their balls.\"\n\n\"I'd have helped with that.\"\n\n\"Orgy tonight? Gwen and Alex are coming up. They're dying to meet you.\"\n\nDemona laughed. \"No more Wendy Whitebread.\"\n\n\"Hmm?\"\n\n\"Nothing. Just commenting on how things change. Yeah, I'll be there.\"\n\nSugar winked and walked away.\n\nDemona looked at the package. There was no return address.\n\nShe ripped it open and a piece of paper fell out.\n\nShe unfolded it.\n\nDear Demona,\n\nHi from Ciara! I really miss you! I'm having fun, but I think Eve would be pissed if I told you where I was, so I better not. I hope you're having fun at Stallion's!\n\nI still have nightmares about that day in the cave, and I bet you do too.\n\nI wanted you to have something: Morpheus's book. See, I didn't really drop it - I'm not that clumsy. I just stuffed it in my cleavage. I got a lot of it thanks to titty grow.\n\nI know you'll put it to good use.\n\nHugs and Kisses,\n\nCiara\n\nDemona pulled the book out of the wrapper. 'Dark Studies' was engraved on the outside. She opened it and slowly began to smile. She put it in her desk drawer and locked it.\n\nDemona stepped out into the lab.\n\nA blonde was strapped down to a table in front of a transformation tube.\n\n\"Sorry to keep you waiting, sweetie,\" Demona said.\n\nThe woman moaned behind her red ball gag, her eyes flickering left and right in panic.\n\nDemona laid out her syringes. \"Let's get started, shall we?\"\n\n***\n\nTwo Years Later\n\nCourtney held Demona's hand in the stairwell as she finished her story. \"I never knew,\" Courtney whispered.\n\nDemona nodded. \"And now you do.\"\n\n\"The spaceport? The blonde with you? It's me, right?\"\n\n\"I think so. I hope so.\" Demona leaned against her. \"I love you, Courtney. I never thought I would feel that again.\"\n\n\"I love you too.\"\n\nDemona stood up. \"Let's go.\"\n\n\"Where?\"\n\n\"My office.\" They walked together down the steps.\n\nThey entered Level 10 and walked to Demona's office.\n\nDemona opened the safe behind her desk. \"I only went back to my office in Manhattan once. I retrieved some things.\"\n\nThe inside of the safe was cold and mist filled the air when she opened it.\n\nDemona reached inside and pulled out four small glass boxes.\n\n\"Oh, my God,\" Courtney whispered. \"Are those...\"?\n\nDemona nodded. \"My embryos with Bobbie. I think I'm ready.\"\n\n\"Ready for what?\"\n\nDemona shrugged. \"To let them go. It's time to move on.\" She stepped over to the small incinerator she used for dangerous specimens.\n\n\"No!\"\n\nDemona blinked. \"What? Honey, I'm all in with you.\"\n\nCourtney touched her arm. \"Me too. Demona, I don't want you to stop loving Bobbie just because you're in love with me. She's part of you. So, she's part of me too. And, besides, if your vision is right? We can get pregnant.\"\n\n\"But these are half Bobbie.\"\n\n\"Yes, and I'll love them just the same as the ones we're going to have together.\"\n\nDemona smiled.\n\n***\n\nMistress Maria Anastasia Marapova stood outside the elevator on Level 9.\n\nRay, Rita, and Sugar stood on her left. Demona and Courtney stood on her right.\n\n\"This morning, I informed Sister that Whore Caste is going to put the demoness Demonica to death. This is a long time coming, too long. Today we right over two years worth of wrongs and take vengeance for the death of Bobbie Palmer,\" Maria said.\n\nA single tear ran down Demona's cheek.\n\nCourtney squeezed her hand.\n\nIn front of them, twenty-five bimbots and studbots, all the victims of the Bimbonix Harvester, all sworn to Whore Caste, stood gripping long knives in each hand.\n\n\"Ray?\" Maria said.\n\n\"When we go in, they'll attack in numbers from the shadows. They use the eyeless as their foot soldiers, they hold back the reptilians and the night demons until absolutely necessary. They will throw everything they have at us. They will show us no quarter, so don't show them any either,\" Ray said.\n\nMaria took Demona's hand. \"Are you sure you want to go in?\"\n\n\"Yes.\"\n\nMaria nodded. \"Stay close to Ray and Rita. She hates you most of all, Demona. Don't go anywhere near her.\"\n\n***\n\nTen robots rushed the opening and spread out.\n\nMaria followed with Ray, Rita, and Sugar.\n\nCourtney and Demona came next followed by the rest of the robots.\n\n\"Clear,\" the robots in the vanguard announced.\n\nRay looked at Maria and shrugged.\n\n\"Advance,\" Maria said.\n\nThey walked out toward the cliff.\n\nCourtney held Mona's hand as they retraced her steps from the day Bobbie died. The corridors went on an on, but soon they emerged onto the cliff.\n\n\"Jesus,\" Ray whispered.\n\nEverything was different.\n\nA massive arched bridge spanned the chasm over the lava field.\n\nThe altar chamber had been carved into a gothic stone cathedral complete with flowing fountains of molten lava.",
        "\"There's nothing here, Mistress,\" a Bimbot announced as it ran back from the cathedral.\n\nDemona looked at the bridge. She started across.\n\nMaria stepped up beside her. \"With me.\"\n\nDemona nodded.\n\nThey crossed the bridge.\n\nOn the other side, a tunnel had been carved in the stone wall that led up at a thirty degree angle.\n\nDemona felt her stomach drop with each step toward the tunnel.\n\nSunlight shown on her face when she reached the mouth of the tunnel.\n\n\"Jesus. They're out,\" Demona whispered.\n\n***\n\nAt midnight, Demonica stood outside the town limits. A sign read, 'Welcome to Burdett, New York, a great place to live!'\n\nDemonica smiled. \"We'll see about that.\"\n\nShe raised her hands and the horde descended on the sleeping town.\n\nThe End\n\nThe Saga Continues in Transformations: Morpheus\n\n \n"
    ],
    "authorname": "wayneandanntriskelion",
    "tags": [
        "bimbo",
        "body modification",
        "demon",
        "group sex",
        "horror",
        "latex",
        "lesbian",
        "oral",
        "romance",
        "vampire"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/transformations-dr-de-mona-ch-05"
}
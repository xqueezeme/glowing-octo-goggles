{
    "title": "Life after the Lottery Ch. 39",
    "pages": [
        "Planning for the 4th of July Party.\n\nWhen I woke up Monday morning I looked toward Dawn and she was propped up on her arm looking at me.\n\n\"So how did you like it?\" Dawn said with a big smile.\n\n\"Like what?\" Dawn smiled and started laughing.\n\n\"What?\" I asked.\n\n\"How did you like submitting to Linda?\"\n\n\"What are you talking about?\"\n\n\"Come on honey! She got you to jerk off on her tits! That is what you do to us!\"\n\n\"What do you mean? I was having a good time with her.\"\n\n\"What does it feel like to have a woman make you get off while she watches?\"\n\n\"That wasn't what was going on.\"\n\n\"Bull shit! You did exactly as she told you too. I just want to know what it felt like having it done to you. You have made all of us do ourselves in front of you, haven't you?\"\n\n\"Do you not like doing that honey?\"\n\n\"I didn't say that. I just thought it was funny watching you get whipped.\"\n\nI was trying to think while Dawn talked, she was right.\n\n\"Maybe I shouldn't ask you to do that then.\"\n\n\"You better ask! I don't know about the girls, but it makes me incredibly hot doing myself while you watch.\" Dawn said.\n\n\"Have you ever talked to Amy and Sam about them doing that for me?\"\n\n\"No. What happens when we do that is personal, just between you and us.\"\n\n\"Really, you all have never talked about it?\"\n\n\"No. There are things we do not discuss.\"\n\n\"I would like to know what they would think about doing it.\"\n\n\"Then you ask them, not me James.\" Dawn leaned over and kissed me. \"Would you like to watch me right now?\"\n\n\"Yes I would honey.\"\n\nDawn reached over and picked up the remote, I guess she was turning the cameras off.\n\n\"Just you and me,\" she said.\n\nDawn pushed the sheets back and straddled my stomach. I watched her rub and squeeze her tits for a few minutes then she slipped her hands down to her pussy. I watched Dawn work her pussy for the next 30 minutes until she squirted all over me as she stifled a scream.\n\n\"Ohhh my,\" Dawn let out.\n\n\"Do you really feel like a submissive honey?\"\n\n\"Yes...but I enjoy it...do you?\"\n\n\"Yes I do. I never thought as if I was trying to dominate you, I just enjoy it when you do that.\"\n\n\"You enjoy it when any woman does that for you. I think you are collecting women. Would you like to have all the women do that for you?\"\n\n\"I don't know. Right now it seems that I just like my girls doing it for me.\"\n\n\"Is Linda one of your girls now?\"\n\n\"I guess.\"\n\n\"Has Katrina done it for you?\"\n\n\"No.\"\n\n\"Not yet?\"\n\nI looked up at Dawn, she smiled at me.\n\n\"Not yet.\" I said. Dawn smiled again.\n\n\"I'm sure you will have her do it.\"\n\n\"Honey, does it really feel like I am trying to dominate you? You said you like doing it.\"\n\n\"I do, and that is what makes it so special, submitting to you.\"\n\n\"Honey?\"\n\n\"Yes?\"\n\n\"Would you like to try more?\"\n\n\"Maybe. But now it is time for you to get off.\"\n\n\"Oh good, sit on my cock.\"\n\n\"Oh no!\"\n\nDawn got up and lay next to me.\n\n\"You are going to jerk off on my tits now.\"\n\n\"Am I submitting to you?\"\n\n\"Yes you are, get up here, now!\"\n\nI straddled Dawn's stomach and she reached up and grabbed my hard cock.\n\n\"You get hard just thinking about us doing it don't you?\"\n\n\"Yes.\"\n\nDawn had me fuck her tits for a little while then jerk off on her nipples. She took her fingers and smeared my cum all around her nipples. I moved and laid on her and licked it off.\n\n\"I really like it when you do that, licking your cum off me.\"\n\n\"I know you do.\"\n\n\"Have you done the girls pussies?\"\n\n\"Not yet.\"\n\n\"You should.\"\n\n\"Do you think what we did with Linda, Joe and Katrina was alright?\"\n\n\"Yes, Linda is fine.\"\n\n\"I hope so.\"\n\nWe got up and showered. Dawn was very happy all morning.\n\nWhen we got up Amy and Sam had finished breakfast. Amy had taken off this week and the next so she could spend some time with Sam away from work. The two of them spent the morning in and out of the pool.\n\n\"Have you got everything ready for the party?\" Dawn asked.\n\n\"Just about, everyone is coming Saturday morning about 11:00am and are staying until Monday afternoon.\" I told her.\n\n\"That sounds great, it looks like it is going to be hot this weekend,\" Dawn said.\n\n\"I hope so, it will make it that much better.\"\n\n\"You haven't told me a lot about what you have planned. Are you going to tell me, we just have this week?\" Dawn asked.\n\n\"It will be a blast, just wait.\"\n\n\"I better keep an eye on you.\"\n\nI looked at Dawn and smiled.\n\n\"I am about ready for lunch, why don't you get Amy and Sam out of the pool,\" I told Dawn. \n\nDawn got up to go get the girls while I headed for the kitchen. It was Monday, and Amy and Sam had been in the pool since morning, they didn't like swimming in the midday sun. I had made all the arrangements for the party on the 4th of July this weekend, and Dawn didn't have a clue yet about what I had planned. She wouldn't have a clue until the deliveries started showing up.\n\nI heard Dawn scream and looked outside just in time to see Sam pull her in the pool. Dawn came up cussing Sam and laughing, when she got out of the pool her white silk robe was plastered to her skin. She fussed at Amy and Sam until they got out of the pool.\n\n\"I'm going to kill her!\" Dawn said as she came in the house dripping. \"What are you looking at?!\"\n\n\"I just think you look good with your robe hugging every curve of your body.\" I said.\n\nDawn looked down at her wet robe then pulled it off and took it to the laundry room. Sam and Amy came inside as she was walking off.\n\n\"Sam you will pay for that,\" I told her.\n\n\"She said she was hot,\" Sam replied then the three of us started laughing.\n\nAmy and Sam walked toward the kitchen as they finished drying off.\n\n\"What are we doing for the party?\" Sam asked.\n\n\"We are going to have a hot and fun time.\"\n\n\"What are we going to be doing?\"\n\n\"You will just have to wait. I already have everything ready for the party.\"\n\n\"You do?\"\n\n\"Well, I have some deliveries coming, but yes.\"\n\n\"It is hot outside today,\" Amy said.\n\n\"Good, I hope you like it that way,\" I replied and got a look from Amy and Sam.\n\n\"Sam, I'll get you for that,\" Dawn said as she walked back in the den drying herself with a towel.\n\nSam laughed then Dawn laughed.\n\n\"I'm fixing sandwiches, what does everyone want?\" I asked.\n\nI filled the orders from everyone and we all sat and ate lunch, when we were finished the three of them went back outside. Amy and Sam were lying in the shade and talking to Dawn lying in the sun. I cleaned up the kitchen and then went outside to join the girls.\n\n\"Damn, it is hot out here,\" I said as I got outside.\n\nI looked at Dawn lying on the lounger in the sun glistening with sweat.\n\n\"Come here,\" Dawn said to me. I walked over to her.\n\n\"Man, the sun is hot.\"\n\n\"James.\"\n\n\"What?\"\n\n\"I'm hot,\" Dawn said.\n\n\"I guess you are lying in the sun.\"\n\n\"No, I'm hot. Fuck me.\"\n\nDawn lifted her legs up and spread them wide then reached down and rubbed her glistening pussy with her hand. I dropped my shorts and sat down on the end of the lounger.\n\n\"Take care of me,\" Dawn said as she slipped a finger in her pussy.\n\nI leaned over and planted my mouth on her pussy and licked the sweat off her.\n\n\"Oh, I like it when you do that!\"\n\nI ate Dawn's pussy until she had a huge orgasm then crawled up between her legs and slipped my cock inside her. Dawn's body was hot and slippery with sweat. We fucked for about 30 minutes lying in the hot sun. Dawn came in a huge squirting orgasm as I pumped her full of hot cum. When we stopped we were both covered in sweat and were breathing hard from the heat.\n\n\"Oh god that was great!\" Dawn told me.\n\nI slid my body up and down Dawn's slippery body a few times then she wrapped her arms around my head and kissed me for a minute.\n\n\"Did you like fucking out in the hot sun?\" I asked.\n\n\"Yes, yes I did.\"\n\n\"Good, we will have to do this more often then.\"\n\n\"Yes we will.\"\n\nI got up slowly and pulled Dawn up by the hand and we walked over to the new outside shower and got cleaned up. Dawn walked in the house to grab a beer. I walked over to Amy and Sam.\n\n\"Who's next?\" I asked.\n\n\"No way, I like the air conditioning!\" Sam said.\n\n\"Maybe later,\" Amy told me.\n\nI followed Dawn in the house and met her in the kitchen with the beers.\n\n\"I am hot!\"\n\n\"Yes you are!\" I said.\n\n\"No, I mean hot.\"\n\n\"Well, it looks like we are going to have a little heat wave for the week,\" I told Dawn.\n\n\"I guess everyone will be in the pool this weekend.\"\n\n\"We'll see.\"\n\n+++++\n\nEveryone was tired of the heat by early afternoon and had gone inside to cool off. The girls had all showered and were sitting around drinking wine.\n\n\"So, what is up for this weekend?\" Sam asked.\n\n\"You will just have to wait,\" I told her.\n\n\"Dawn tell us, we know you know!\" Sam pleaded.\n\n\"Sorry you two, he hasn't told me anything.\"\n\n\"Is he ticklish?\" Amy asked.\n\n\"Afraid not,\" Dawn replied.\n\n\"You three will just have to wait. You three have been so busy I had to plan everything myself,\" I told them.\n\n\"Are you going to get some fireworks?\" Sam asked.\n\n\"I am sure we can get some.\"\n\n\"Goody!\"\n\n\"When are you going to start getting things ready?\" Dawn asked.\n\n\"I told you that everything is taken care of.\"\n\n\"What about food? Is Nancy catering?\"\n\n\"Yes she is, and don't call her, she won't tell you anything either.\"\n\nThe girls were pouting because I wouldn't tell them anything. I really did have a big surprise for everyone. About 5:00, I decided to grill some hamburgers for everyone. We all sat around outside naked and drank our beers while the burgers cooked. We sat in the shade because the sun was hitting the pool area and it was still hot.\n\n\"Come with me,\" Amy said when we finished.\n\nAmy took my hand and led me around the pool and had me follow her up the steps to the top of the waterfall. The large flat stone was hot, Amy laid out a big towel then sat down.\n\n\"Now you can do me out in the sun and the heat.\"\n\n\"Amy you are terrible, when was the last time I told you I loved you?\"\n\n\"I can't remember, why don't you show me.\"\n\nI sat down next to Amy and leaned over and kissed her, the sun was hot. I laid her back on the hot stone and began sucking on her nipples. It didn't take but a few minutes before the two of us where sweating in the heat. \n\n\"Please continue,\" Amy said.\n\nI looked at her and smiled then lean over and kissed her deeply then returned to sucking her nipples. Eventually, I started kissing down toward her stomach. Her small patch of red hair blazed in the sun. I licked the sweat off her mound and thighs then placed my mouth over her pussy and begin to suck and tongue her.\n\n\"Oh yes, that is what I need.\"\n\nI lifted her legs up and got down between them and went to work. I always enjoyed the salty taste of a pussy when a woman was hot. I worked on Amy while we both got hotter from the sun, eventually Amy was panting from the heat and her building orgasm.\n\n\"Damn I'm so hot!\" Amy said as she thrashed her head from side to side.\n\n\"I know,\" I said.\n\nAmy paused a moment then laughed.\n\n\"God James you are incredible!\"\n\nAmy reached up and pulled my head tightly into her pussy as she started to thrust up into my mouth. I drove my tongue in and licked her insides.\n\n\"Oh yes, yes, yes!!\" Amy began screaming as she pulled me in tighter.\n\nI took my tongue and begin licking circles around her swollen clit.\n\n\"Oh my god!!\" Amy screamed.\n\nAmy let go of my head and grabbed her legs and pulled them up to her chest.\n\n\"Eat me James!!\"\n\nI slipped two fingers in Amy's pussy and began rubbing her G-spot while I sucked hard on her clit.\n\n\"Ahhhh!! Oh my god...James you are driving crazy!!\"\n\nI rubbed harder on her G-spot as I worked my fingers in and out faster. Amy started screaming. I had found out that Amy liked to scream real loud when we were outside having sex. I had asked her why once but she never did tell me.\n\n\"Oh god James, I'm coming!!\"\n\nWave after wave of muscle contractions went through Amy as she came over and over. I sucked up all her juices as she came hard. Over the last year Amy had begun to almost squirt when she came hard, nothing like Dawn, but she was definitely squirting a little.\n\n\"Oh James! Please stop, I think I am going to pass out.\"\n\nI stopped working on Amy's pussy and she let her legs down. I looked up at Amy and her body was red and covered in sweat.\n\n\"Here,\" came from behind me.\n\nI turned and Dawn was standing behind me with two bottles of water.\n\n\"I think you two need this,\" Dawn said as she handed me one and Amy took the other.\n\n\"Thanks Dawn, I didn't know it would be this hot,\" Amy said.\n\n\"The sex or the temperature?\" Dawn asked with a smile.\n\n\"Both!\"\n\n\"Why don't you join us?\" I told Dawn.\n\n\"I'll leave you two to finish,\" Dawn replied and went back down the stairs then dove in the pool.\n\n\"You ready for more?\" I asked Amy as she took another sip of water.\n\n\"Yes, but this rock is too hot. You lay down on it and sweat, I'll get on top.\"\n\nI traded places with Amy, once I was on my back she straddled me and slipped my cock inside her and slowly lowered herself down.\n\n\"That's better,\" Amy said as she sat on my cock and drank her water.\n\nI propped myself up on my elbows and the two of us spent several minutes finishing our water. Amy sat her bottle down and I lay back while she began to move her hips.\n\n\"James, can I ask you something?\"\n\n\"Sure.\"\n\n\"Do you ever get tired of having sex with me?\"\n\n\"My god no! Why would you ask that?\"\n\n\"Just wondering, you usually have sex twice a day, I was just wondering if it gets old for you?\"\n\n\"Hell no, what brought this on?\"\n\n\"Well, I have been living here almost a year, I just wondered if it is as good now as it was at first?\"\n\n\"Amy! Amy, it is better now than ever, we are comfortable with each other now. Does it look like I am tired of having sex with Dawn after all these years?\"\n\n\"No.\"\n\n\"Then why do you think I would get tired of you?\"\n\n\"I...I have never been in a relationship this long.\"\n\n\"Well you are going to be in this relationship as long as you want!\"\n\nAmy smiled and began to move her hips faster as she looked at me.\n\n\"Amy, you are one seductive little bitch.\"\n\nShe laughed and leaned forward and kissed me while she worked her pussy up and down my cock.\n\n\"Thanks, I guess,\" she said as she sat back up.\n\nI reached up and grabbed her nipples and began to pinch them. Amy sat up and began bouncing up and down on my cock. She worked me hard for a long time, eventually we were both sweating profusely again. Amy was grinding her pussy down on top of my cock while she moaned and groaned.\n\n\"Oh god it is so hot!\"\n\n\"Sit back,\" I told Amy.\n\nAmy stopped for a second then leaned back and lifted her feet out from under her and put them up by my shoulders then leaned back on her hands. I loved this view.\n\n\"Oh yes!!\" Amy screamed as she began sliding her slippery ass back and forth on my thighs working my cock deep into her.\n\nShortly, Amy's moans turned into screams of 'Oh Yes' over and over. Amy shoved her pussy down on my cock hard and screamed.\n\n\"I'm coming!!\"\n\nI watched as Amy began to shake and jerk.\n\n\"Oh god!!\"\n\nAmy started working her pussy up and down faster as I felt her muscles tighten up around my cock.\n\n\"Ahhh...ahhh...ahhhhhhhh!!\" Amy screamed then jammed her pussy down and jerked over and over.\n\nI watched my cock disappearing into her pussy when she jerked real hard and screamed. Amy actually squirted out juices a few inches each time she jerked and screamed.\n\n\"That's it!!\" Amy screamed breathlessly and fell back on her back between my legs.\n\nI looked down at the sight of my cock straining to pop out of her pussy as she laid flat on her back.\n\n\"Are you okay Amy?\"\n\n\"Oh yes, I just had to stop, I'm too hot.\"\n\n\"Yes you are.\"\n\nAmy laughed a little. A few minutes later she pushed herself back up so that she was sitting again.\n\n\"James, I am too hot and tired to finish you off.\"\n\n\"Amy... just close your eyes and sit there.\"\n\n\"I'm so hot.\"\n\n\"Just close your eyes and relax and breathe.\"\n\nAmy looked down at me and smiled then closed her eyes and began breathing deep. It had been awhile since Amy had done this. After a few minutes she was relaxed and breathing deeply. The calm on her face looked angelic.\n\n\"You know what to do now,\" I told her.\n\nAmy's body relaxed and after a few minutes I could feel the inside of her pussy twitching.\n\n\"Better,\" I said.\n\nAmy kept breathing deeply and her pussy muscles began to contract and release my cock in a steady rhythm. As they did, I would push up into her ever so gently.\n\n\"Emmmm,\" came softly from Amy.\n\n\"Just let it go, Amy.\"\n\n\"ahhhh\"\n\nAfter a few more minutes her contractions became stronger and I could see the muscles of her stomach contracting when her pussy muscles squeezed my cock.\n\n\"Emmm, emmm, emmm.\"\n\nMy cock was getting harder and harder as her muscles squeezed me. I loved it when the girls did this. Amy's breathing began to get a little faster as her contractions got stronger and faster. Amy's face got that look like she was holding back. I pushed up gently into her with each muscle contraction.\n\n\"ahhhh, ahhhh, ahhhh,\" came out softly.\n\nI knew Amy was getting near, I knew I was. Amy began softly moaning, and my cock began to swell as I was holding back from coming deep inside her. Amy began to move her hips gently as I felt her pussy muscles clamp down on my cock and hold me. Amy's face contorted and she began to slowly jerk, then more and harder.\n\n\"Now James, now,\" Amy let out softly.\n\nAmy jerked hard against my cock several times and I let go. I jammed up into her as my cum filled her pussy.\n\n\"Oh god!!\" Amy screamed as she began to shake as a huge orgasm rocked her body.\n\n\"Ahhhh, Amy!!\" I screamed as I thrust up into her repeatedly.\n\n\"Oh god, James, oh god!!\"\n\nAmy squirted again and she shook.\n\n\"Ahhhhh!!\" Came from Amy just before she collapsed on top of me.\n\nAmy's hot sweaty breasts were pressed against my chest as she gasped for air. She laid there for several minutes trying to regain her breath.\n\n\"Oh god I love you,\" Amy said as she lifted her head and kissed me deeply.\n\nI wrapped my arms around her and felt the sweat running off her back.\n\n\"It's been awhile since we have done that, and never after fucking,\" Amy said.\n\n\"You satisfied?\" I asked.\n\n\"Oh yes, thank you.\"\n\nI held Amy for a few more minutes.\n\n\"James, I don't think I have the strength to get up.\"\n\n\"Seriously?\"\n\n\"Yes, I got too hot.\"\n\n\"I'm going to roll you over on your back okay?\"\n\n\"Yes.\"\n\nI rolled Amy onto her back and I slowly got up.\n\n\"Just stay there,\" I told her.\n\nI went down the stairs and ran to the house and to the kitchen.\n\n\"What's wrong?\" Dawn asked.\n\n\"Amy got too hot.\"\n\nI grabbed a couple of bottles of cold water and when I turned around Dawn was running out the door with a towel, I ran after her. \n\n\"What is going on?\" Sam asked.\n\nDawn stopped and dunked the towel in the pool then ran up the stairs to Amy. When I got to the top of the stairs Dawn had covered Amy in the cold wet towel. Dawn grabbed one of the bottles of water from me and opened it and got Amy to sit up and drink it slowly.\n\n\"Amy!\" Sam yelled from the bottom of the stairs.\n\n\"You're still sweating, that's good,\" Dawn said as she held Amy.\n\n\"She just got too hot, Sam,\" I told her.\n\nAmy was beet red, Dawn took the other cold bottle of water I had and poured it over Amy's head, she screamed a little when the cold water ran down her.\n\n\"Better?\" Dawn asked.\n\n\"Yes,\" came from Amy.\n\n\"James, you know better than that, she doesn't spend time out in the sun like we do.\"\n\n\"I'm okay, I just had a mind blowing orgasm and it's hot,\" Amy said.\n\n\"You lay there a minute!\"\n\nAmy lay back on the wet rock, and Dawn put her hand behind her neck while she recovered. We eventually got Amy up and down the stairs. She wanted to jump in the pool but Dawn told her no and got her inside in the air conditioning and to the sofa with Sam right behind her.",
        "\"Amy, you can't get hot like that,\" Dawn scolded her.\n\n\"It's James' fault,\" she giggled.\n\n\"I think I saw you dragging James up there young lady.\"\n\nAmy laughed again.\n\n\"You stay inside the rest of the day!\" Dawn told her. \"And drink plenty of water, starting now!\"\n\n\"Amy, are you okay?\" Sam asked.\n\n\"Yes.\"\n\n\"Sam, make sure your sister gets plenty of water.\"\n\n\"Yes ma'am.\"\n\n\"James, go take a shower,\" Dawn ordered me with a look.\n\nI had been in the shower about 5 minutes when Dawn came in and joined me.\n\n\"James, you should have known better.\"\n\n\"Is she okay?\"\n\n\"Yes...I think it was more of the orgasm you rocked her with than anything else.\"\n\n\"Me?\"\n\n\"I was watching you two...,\" Dawn said. \n\n\"What did you do to her?\" I asked.\n\n\"Just cooled her off,\" Dawn said.\n\n\"No, did you realize you put your hand behind her neck and held her?\"\n\n\"I didn't realize it?\"\n\n\"What did you do, honey?\"\n\n\"I don't know, nothing I guess.\"\n\n\"I think you did and you don't realize it, you know you can control a lot of things from there?\"\n\n\"I don't remember doing anything.\"\n\n\"You need to try and remember honey.\"\n\nWe finished showering and dried off and went to check on Amy. She was sitting at the bar drinking a soda.\n\n\"Are you okay?\" I asked.\n\n\"Yes...that was great, thanks.\"\n\n\"Next time you two want to fuck like dogs out in the heat and sun take some water,\" Dawn said.\n\n\"I'm going to take a shower,\" Amy said. \"You want to join me Sam?\"\n\n\"I think you better shower by yourself...until you get your strength back anyway,\" Dawn told her. \"And make it a cool one!\"\n\nI watched Amy walk away and go into the downstairs bedroom to shower.\n\n\"If it is this hot tomorrow, you can do me like that.\" Dawn told me. \"We haven't done that in awhile.\"\n\n\"You want to take it nice and slow out in the heat, you have a deal,\" I told Dawn as I leaned down and kissed her on the neck.\n\nWhen we exited the shower and got dried off Dawn and I sat on the bed.\n\n\"Are you going to tell me anything about the party?\" Dawn asked.\n\n\"You will find out soon enough.\"\n\n\"Help me start dinner,\" Dawn said.\n\n\"We need to talk to John and Carol about Linda,\" I told Dawn.\n\n\"I thought you had already talked to them about her.\"\n\n\"I needed to see what happened with her and Joe and Katrina first.\"\n\n\"You are ready to recommend her aren't you?\"\n\n\"Yes, but I haven't said anything to John about her.\"\n\n\"I'll call him and see if they can come by tomorrow evening,\" Dawn said.\n\n\"See if we can go to their house, we need to leave the girls here.\"\n\n\"Okay.\"\n\n+++++\n\nWe finished cooking dinner and we all sat down and ate. After dinner Amy fell asleep on the sofa with Sam, they had worn themselves out today in the sun. While they were sleeping Dawn and I went to the study.\n\n\"I'll call John,\" Dawn said.\n\nShe sat down and picked up the phone and called.\n\n\"Hey Carol, is John there...no...he is still at the hospital...\"\n\n\"You two think we could come by the house tomorrow after dinner?\"\n\n\"No...we are not bringing the girls, we need to talk about someone new for the group...yes we are happy with her...yes just one lady...I know, but we want to make an exception for her, you will understand when we tell you who she is.\"\n\n\"We'll tell you when we see you...what...oh, I guess we could...okay...I know you do...see you about 7:00...bye.\"\n\nDawn hung up the phone.\n\n\"You guess we could what?\" I asked.\n\n\"Carol wanted to know if we would like to swap, I told her we would.\"\n\n\"What else did Carol say?\"\n\n\"She looked forward to your huge cock.\"\n\n\"No! About asking to let a single woman join?\" I said.\n\n\"She said it shouldn't be a problem if we approve.\"\n\n\"It may be a problem when they find out who Linda is,\" I told Dawn.\n\n+++++\n\nWhen a truck pulled up at the gate early Tuesday morning Dawn wanted to know what it was. I told her that it was a delivery for the weekend, and that was all she needed to know. I met the men outside and explained to them where I wanted everything setup. I got the 4 wheel drive utility cart out of the garage and followed them down behind the house.\n\nWe had a 10 acre small lake on the property about 1000 feet from the house surrounded by trees and a small clearing. What Dawn didn't know was that the men were here to deliver and set up a big tent for the party and deliver some other items. Once we got to the clearing I explained where I wanted everything setup and left them to their work. When I returned to the house Dawn was waiting and full of questions.\n\n\"What is going on?\" Dawn asked.\n\n\"They are setting up for the weekend.\"\n\n\"What are they doing out by the lake?\"\n\n\"Just setting some things up.\"\n\n\"James, what are you up to?\" Dawn asked.\n\n\"Well, I probably shouldn't tell you...,\"\n\n\"James.\"\n\n\"I haven't told everyone but our party is going to be a camp-out this weekend.\"\n\n\"What, but it is so hot,\" Dawn replied.\n\n\"I know and don't you tell anyone yet.\"\n\n\"You are up to something.\"\n\n\"What are those men doing in the backyard?\" Sam asked as her and Amy came down the stairs.\n\n\"Getting some stuff ready for the weekend,\" I told them.\n\nThey walked over to the windows and watched as the men unloaded items from the truck. Amy and Sam had on their short robes.\n\n\"You two at least put on a bikini if you are going swimming, you too Dawn,\" I said.\n\n\"Why?\" Sam asked.\n\n\"Because there are several young men out there, and I need them to get their work done and not be looking for excuses to come up to the house every 15 minutes.\"\n\n\"Okay, after we eat,\" Sam added.\n\nBy the time we had all finished eating breakfast the men had a lot of boxes and the large tent unloaded from the truck. Amy and Sam came back down, they had on a bikini, but it wasn't much of one. They walked over and looked out the windows and watched for a while. There were four young guys getting everything setup and the two of them were watching them closely.\n\n\"Can we go down there and watch?\" Sam asked.\n\n\"I think you two better stay up here so they can work,\" I told them, to their disappointment.\n\nThe two of them went out and sat by the pool and watched from under the sun umbrella. Dawn finally changed into some short shorts and a tank top. I went to the study to send emails to everyone and to make some phone calls. Before I realized it, it was lunchtime when I heard Dawn call me.\n\n\"What is it?\"\n\n\"I need you to come out here,\" Dawn replied.\n\nI went out to the den and saw Dawn looking out the windows, she was watching Sam and Amy talking to one of the guys on the patio. The guy they were talking to had on shorts and no shirt and was very well built, the two of them were sitting in the shade and had his attention.\n\n\"I think you better see what he needs,\" Dawn told me.\n\nI went outside to check on him. Once I got his attention away from the girls he told me that they were going to get some lunch and would be back in an hour. I walked him over to the pool house and showed him were the bathroom was so they could use it if they needed. On the way out he paused to look at one of the partially nude pictures of Dawn that I had hanging in the pool house. I let him look.\n\n\"That is a beautiful women, how is it?\" He asked.\n\n\"My wife.\"\n\n\"She is beautiful.\"\n\nI took him to the garage so he could get one of our four-wheelers to ride back down to the lake.\n\n+++++\n\nShortly after the guys returned from lunch they had the big white tent up as well as the girls' curiosity. They were asking me what the tent was for, I told them we were going to have a cook-out down by the lake, that seemed to stop the questions for the moment while we all finished lunch.\n\nAbout 3:00pm Amy came inside.\n\n\"What are they doing?\" She asked.\n\nI looked out the window and could see they were setting up all the smaller four person tents in the clearing and at the edge of the trees.\n\n\"Setting up for the party,\" I told her.\n\n\"James!\"\n\nAbout 4:00 I saw them driving the truck back up toward the house, the one that had the four-wheeler stopped by the pool and I went out to meet him.\n\n\"We are finished for the day, we will be back in the morning to get the rest setup,\" he told me.\n\nI told him to leave the four-wheeler, I would put it up. He got in the truck, and they all left. I went back inside and was in a few minutes when I heard the four-wheeler start up. I turned to look, and Amy and Sam were riding off down to the tent. I laughed and went to help Dawn finish cleaning up the house.\n\n\"What are you laughing about?\" Dawn asked.\n\n\"It took them two minutes to hop on the four-wheeler and ride down to see what is going on.\"\n\n\"What is going on, why are they setting up all those small tents?\"\n\n\"Okay, but don't tell the girls. Everyone is going to be sleeping in the small tents Saturday and Sunday night, I said we were having a camp-out.\"\n\n\"James it will be so hot.\"\n\n\"I know, but the nights are not too bad.\"\n\n\"Everyone will be hot.\"\n\n\"Not if they are naked,\" I told her.\n\n\"What are you up to?\"\n\n\"Well, I am setting up a nudist campground for the weekend. Once everyone arrives Saturday they have to surrender their clothes until they leave Monday.\"\n\nDawn laughed and looked at me.\n\n\"You are terrible, and no one knows?\"\n\n\"Nope.\"\n\n\"What about people needing to use the bathrooms and food?\"\n\n\"I will have the four four-wheelers out so people can ride back and forth to the house, but besides that, everyone has to stay in the nudist colony for the weekend.\"\n\n\"What about food?\"\n\n\"Nancy is taking care of all the food over the weekend, I invited her and the twins to come and spend the weekend with us if they wanted. She will be here Friday delivering all the food for the weekend.\"\n\n\"Oh, this is going to be fun.\"\n\n\"More than you know,\" I said\n\n+++++\n\n\"Why can't we go to Carol and John's tonight?\" Amy asked.\n\n\"Business,\" I said.\n\n\"We could still go.\"\n\n\"Amy, not this time.\"\n\n\"You going to do Carol?\" Amy asked.\n\n\"Probably.\"\n\n\"I heard her tell Elizabeth she loves your cock,\" Amy told me.\n\n\"Then it will be that much better.\"\n\nSam and Amy giggled and took their beer to the den.\n\n\"How much did you tell them?\" I asked.\n\n\"I just told them we had to go see Carol and John about getting Linda into our group, and that they couldn't go.\"\n\n\"Okay.\"\n\n\"I guess we better eat early,\" I told Dawn.\n\nWe spent some time talking to the girls; about 5:00 Dawn took Amy to the kitchen to start dinner. Sam was sitting with me on the sofa.\n\n\"Are you still worried about Linda?\" Sam asked.\n\n\"Yes I am.\"\n\n\"Why?\"\n\n\"I worry about all the guys going after her and the business ones wanting to pester her about her money.\"\n\n\"She is very pretty, but why are you worried about all the guys going after her? Is it because you are so attracted to her, are you jealous?\" Sam asked.\n\nI took a long look at Sam.\n\n\"You know better than that, Sam.\"\n\n\"Let me ask you something, James. Amy and I are very pretty aren't we?\"\n\n\"Yes.\"\n\n\"Did all the men go after us?\"\n\n\"They all want you.\"\n\n\"But it hasn't been a problem has it?\"\n\n\"No.\"\n\n\"Then why will it be a problem for Linda?\"\n\nSam was right, she and Amy were as pretty as Linda, and they had not had a problem.\n\n\"Sam, how did you get to be so smart to be 18?\"\n\n\"Almost 19!\"\n\n\"You are right. Do you think I am trying to keep her for myself?\"\n\n\"Yes. I have listened to the long talks you have had with her. I know you are trying to help her, but, James, you are going to have to let her find her own way like Amy and I did, and...\"\n\n\"And what?\"\n\n\"You are a little possessive of her.\" Sam stated.\n\n\"I am?\"\n\n\"Yes.\"\n\n\"Does Dawn think that way?\"\n\n\"I don't know, that is not something I should ask her. You are possessive of Linda like you are of me and Amy, you shouldn't be that...close to her.\"\n\nI wrapped my arms around Sam and hugged her.\n\n\"You are right. Am I too protective of you?\" I asked Sam.\n\n\"Yes...but that is okay.\"\n\nSam wrapped her arms around me and hugged me back.\n\n\"What are we doing this weekend?\"\n\n\"Not going to work!\" I told Sam.\n\n\"Rats!\"\n\n\"I do have a special job for you this weekend though.\"\n\n\"James! Damn it!\" Sam yelled. I laughed at her.\n\n\"It is the most important job to make the party a success.\"\n\n\"I am going to get you!\"\n\n\"What are you two yelling about?\" Dawn asked.\n\n\"He is teasing me about the party!\"\n\n\"James...the three of us can get information out of you,\" Dawn said in a threatening way.\n\n\"Sam, I do have something special for you to do Saturday, okay?\"\n\n\"Yes.\"\n\n+++++\n\nA little bit later we had all finished dinner, it was about 6:15.\n\n\"Girls, Dawn and I need to run across town for a few hours to meet John and Carol, can you two cleanup after dinner?\" I asked them.\n\n\"Okay, I wish we could go,\" Amy said.\n\n\"Let me ask you two something, do you think Linda will be okay with our group?\" I asked.\n\n\"Yes,\" Amy said.\n\n\"Just remember what I told you,\" Sam said.\n\n\"Good, let's go, I want to drive my Ferrari,\" Dawn said.\n\nDawn and I got in her Ferrari and drove across town with the top down to John's house. John and Carol greeted us at the door and we went in and sat down with them.\n\n\"You two want a beer?\" Carol asked.\n\n\"We're good. I need to talk to you two about somebody new that wants to join our group,\" I told them.\n\n\"Who are they?\" Carol asked.\n\n\"It's just one person, a woman.\"\n\n\"James, we already have two extra women with Amy and Sam,\" John said.\n\n\"She is a very special lady and I don't think the group minds extra women now that the women are having fun with each other,\" I said.\n\n\"What do you think, Dawn?\" Carol asked.\n\n\"I would have a problem allowing a single man to join our group, I wouldn't think that would be right, but everyone seems to like Sam and Amy. I think she will be fine, but James has to tell you some things about her.\"\n\n\"Who is she?\" John asked.\n\n\"That is why I want all of us to make the decision.\" I said.\n\n\"Who is it?\" Carol asked.\n\n\"Do either of you know Linda Williams.\"\n\n\"James, you are kidding?\" John said.\n\n\"Who is that?\" Carol asked.\n\n\"Do you know her, John?\"\n\n\"I know who she is, and her plastic surgeon is a friend of mine. Are you messing with me?\"\n\n\"No, we met her before we went to Hawaii, and we found out she knows Joe and Katrina.\"\n\n\"Had they said something to her?\"\n\n\"Yes, but I have addressed that issue with Joe and Katrina. Joe was her divorce lawyer.\"\n\n\"I heard she got divorced. Did she approach Joe and Katrina about joining?\"\n\n\"No, it was really an accident we met her. When she found out who we were, she brought up that Katrina had told her a little about the New Year's Eve party.\"\n\n\"That's not good. How well do you know her?\"\n\n\"Pretty well actually, she has spent some time at the house, and she is having sex with all of us.\"\n\n\"You are fucking kidding me!\" John said.\n\n\"Who is she?!\" Carol asked again.\n\n\"Honey, Linda Williams is one of the wealthiest women in the country,\" John told Carol.\n\n\"Probably the wealthiest,\" I said.\n\n\"Have you checked on her, James?\"\n\n\"Her personal net worth is over four billion, and that is not counting all the businesses that she owns all or part of, that is just her stocks and bonds.\"\n\n\"Oh my god!\" Carol said.\n\n\"You better tell me what is going on?\" John said.\n\nDawn and I explained to John and Carol about Linda, and what she had been through, and what we had been through with her. I explained that we felt like she was ready to join us because she wants to have a group of people she can trust and be friends with.\n\n\"James, I understand she is absolutely gorgeous,\" John said.\n\n\"She is absolutely beautiful, that is something else we need to talk about.\"\n\n\"Why?\" Carol asked.\n\n\"Carol, do you think any of the women in our group would be jealous of her?\" Dawn asked.\n\n\"Dawn, are you jealous of her. You said you all were having sex, does she make you jealous?\" Carol asked.\n\n\"She is very pretty, but I find her very sexy.\"\n\n\"Carol, she has a very beautiful set of breasts that Dr. Bill did, I have seen the pictures of them,\" John told her.\n\n\"John, don't you never let her know that you have seen any pictures like that,\" I told him.\n\n\"They were her follow-up pictures.\"\n\n\"This is what we are worried about, and we spent a lot of time convincing Linda that something like pictures like those or people talking about her would never happen,\" Dawn said. \"Your doctor friend should not be showing pictures like that around John, you know better than that!\"\n\n\"It is just picture of her breasts and the excellent job he did, they don't show her face, he told me who it was.\"\n\n\"Still, John.\"\n\n\"So what are you asking us?\" John said.\n\n\"Knowing who she is and how powerful she is, do you think anyone in our group will have a problem?\"\n\n\"Do you mean will someone tell other people about her?\"\n\n\"I don't know, I have made her a lot of promises,\" I told them.\n\n\"So far, this thing with Katrina is the only time I know of someone talking. Did you two tell her if it happened again her and Joe were out?\"\n\n\"Yes we did. Linda said that she would come with Joe and Katrina if she couldn't come by herself,\" I told John.\n\n\"I have seen her in several tabloids, do you two think that they may follow her to a party?\" John asked us.\n\n\"She has her own security, and they trust her being with us at our house. I am not sure if she would come to a party that was not at our house yet,\" Dawn told them.\n\n\"I'm not sure, you two, I am worried she could bring attention to our group,\" John said.\n\n\"That is why we are here. Linda is very sweet person once you get to know her. She is a very powerful business woman and is used to being in control, but I have worked with her on that. She had a very bad marriage that she is coming out of, and she really needs some close friends that want to be her friend for her and not her money and power,\" I said.\n\n\"John, how many people in our group will know her or know of her?\" Dawn asked.\n\n\"I know Chris will because he is in the banking business, the others might just know who she is. James, in your professional psychologist opinion, is she ready for this?\" John asked.\n\n\"Yes, I think she is. She may start out slow like Elizabeth and Julie did, but I think she is ready to grow.\"\n\n\"What do you think, Carol?\" Dawn asked.\n\n\"Is she coming this weekend?\"\n\n\"Yes, if you two say it is okay.\"\n\n\"Dawn, is this party going to be as crazy as New Year's?\" Carol asked.\n\n\"I don't have a clue, my husband will not tell me what he has planned.\"\n\n\"James?\" Carol said.\n\n\"We are going to have a lot of fun. Linda is nervous about meeting everyone so I am going to ask Joe and Katrina to watch her and take care of her along with the girls and me.\"\n\n\"What do you think, Carol?' John asked.\n\n\"I can't wait to meet her.\"\n\n\"I guess I am okay with her, but I am leaving the finally decision to you and Dawn,\" John said.\n\n\"I'll tell her she can come then,\" I said.\n\n\"Okay, now tell us about the party,\" Carol said.\n\n\"Not a chance, you get to find out when everyone else finds out.\"\n\n\"Can I at least get a preview?\" Carol said as she started unbuttoning her blouse.\n\nI watched and smiled at Carol as she got her blouse all the way unbuttoned.\n\n\"I don't know if I can be persuaded to talk, Carol.\"\n\nCarol stood up and unzipped her skirt and pushed it down and pulled her blouse off. Now she was standing there in just some very pretty lingerie.\n\n\"Are you sure?\" Carol said as she pulled her bra off and pushed down her panties. She did have some nice tits for her age, but I had always suspected John had his hands in their size and shape.\n\n\"I want it to be a big surprise, Carol.\"\n\n\"Well then, if you are not interested, Dawn would you like to join me in the bedroom?\"\n\n\"Sure.\"\n\nDawn got up and followed Carol down the hall. I was a little surprised because Carol and Dawn hadn't done each other.",
        "\"Should we let them go?\" John asked.\n\n\"They know we will be in there fucking them in a few minutes, let them have some fun first.\"\n\n\"I want to watch,\" John said.\n\n\"You'll get to watch.\"\n\n\"James, is Linda really that gorgeous?\"\n\n\"Yes she is.\"\n\n\"What about her tits?\"\n\n\"They are incredible, your friend did an excellent job. Did you know he pierced her bellybutton and her clit hood?\"\n\n\"Hell no!\"\n\n\"She has a short string of diamonds that hang down from her bellybutton and from her pussy.\"\n\n\"I bet that looks nice.\"\n\n\"It does, but eating pussy with diamonds hanging in front of it is a challenge.\"\n\n\"You dog!\"\n\n\"Don't bring it up, but Dawn and Amy want theirs pierced.\"\n\n\"What about Sam?\"\n\n\"Probably. I told them you would be happy to do it for them.\"\n\n\"Hell yes, I can do that at your house. They can't have sex for a few weeks.\"\n\n\"That is what Linda said, she said it left her sore.\"\n\n\"No, because of the risk of infection from your dirty mouth and cock!\" John and I laughed.\n\n\"I'll have to inspect them before I can pierce them and before they can have sex again.\"\n\n\"Make sure you tell them that!\"\n\n\"I also have to see if they have to be horizontal or vertical.\"\n\n\"What?\"\n\n\"Depending on the skin over their clitoris, the piercing either goes in up and down or side to side.\"\n\n\"Oh?\"\n\n\"I'll show you.\"\n\n\"Okay.\"\n\nWe laughed some more.\n\n\"I can't wait to see the jewelry you buy for them. Carol is bugging me to get her some diamonds to hang off her nipples like Dawn had at the party. Where did you get those?\"\n\n\"I had our jeweler take two diamond pendants and put them on some nipple rings.\"\n\n\"Are the nipple rings different sizes?\"\n\n\"Yes they are.\"\n\n\"Did he measure your girls?\"\n\n\"No, I am very familiar with how big each of their nipples are John.\"\n\n\"I guess you are. How do I get Carol the right size?\"\n\n\"You can take her to our jeweler and let her look at the stones he has and let her pick them out then let him fit her for the correct nipple rings.\"\n\n\"I wanted to surprise her.\"\n\n\"I think she would get a kick out of letting him fit her, he is a little old man. Go ahead and pick out the pendants and take her and show them to her, and tell her she has to let him fit her to get them.\"\n\n\"I will call you about it and set something up.\"\n\n\"John, you know what would be fun and my jeweler would do it. Get a great looking male stripper to play the jeweler! When she shows him her tits he can play with them and then strip for her.\"\n\n\"Oh, that would be great!\"\n\n\"Let me know when you are ready to go look and I will meet you there and talk to him,\" I told him.\n\n\"I think they have been in there long enough, don't you?\" John said.\n\n\"I believe so.\"\n\nJohn and I got up and walked down to their bedroom. We found Carol on top of Dawn in a 69. The two of them were moaning into each other's pussy. I sat down on the edge of the bed and ran my hand over Carol's ass.\n\n\"Emmmm!\" Came from Carol.\n\nI kept rubbing her ass and back. John and I watched for about ten minutes until the two of them came in a huge orgasm.\n\n\"Oh god, Dawn, you are good! Am I doing pretty good?\" Carol asked as she rolled off of Dawn.\n\n\"Carol, all women know what feels good, you are doing fine, it is the men we have to teach!\"\n\n\"Wait a minute!\" I said.\n\n\"But there are some men that are very good at eating pussy,\" Dawn said as she looked up at me.\n\nI leaned over to the middle of Carol's big bed and grabbed her by the legs and pulled her to the edge of the bed.\n\n\"Let's find out!\" I said.\n\nI got down on my knees in the floor beside the bed and pulled Carol's ass to the edge.\n\n\"Wait!\" Carol yelled.\n\nI pulled her legs far apart and placed my mouth over her swollen pussy and drove my tongue in deep.\n\n\"Oh my god!\" Carol yelled again.\n\nI heard Dawn laughing then heard her gasp. I looked over at Dawn, and John had grabbed her and pulled her to the edge of the bed. I watched as he got in the floor and planted his mouth on her pussy. I figured John would do a good job on Dawn while I did Carol.\n\nI spent my time tonguing Carol and sucking on her lips until she had another huge orgasm, then I went to work tonguing and sucking on her clit. Carol was moaning and groaning as I worked on her. She was wiggling all over the bed when I slipped two fingers inside her.\n\n\"Oh my god, James!!\"\n\nI worked my fingers around inside Carol until I felt her respond to a spot near her G-spot, then I went to work on it.\n\n\"Ahhhhhh!!\" Carol screamed.\n\nShe started humping her pussy up into my mouth hard as I felt her muscles twitching and contracting in her pussy.\n\n\"Ahhhh shit!! Your fingers feel so good!!\"\n\nI sucked and tongued Carol's clit while I worked her sensitive spot harder, she kept screaming over and over until she gushed juices from her pussy.\n\n\"Oh my god!!\"\n\nCarol had a huge orgasm. Her pussy was dripping juices. I eased up on her clit and took my time licking all of her juices off her lips. I slipped my fingers out of her pussy and ran my middle finger through her juices down to her asshole and brushed it.\n\n\"James!!\"\n\nI started pushing my finger in Carol's ass.\n\n\"Ahhhhhh!! Fuck!!\"\n\nI shoved my finger all the way in Carol's ass.\n\n\"Ummmmm!!\"\n\nI worked my tongue back into her pussy and worked it around while I fingered her ass. I didn't know anything about if John fucked her ass, but she wasn't protesting. Carol lay there and moaned as I worked my finger deeper into her ass and tongued her pussy. Once her ass was nice and wet and lose, I slipped my middle finger out of her and pushed two fingers in her ass hard.\n\n\"Ummmmmm!!\"\n\nI worked Carol over until she was jerking and screaming she was coming over and over. When she gushed again I slipped my fingers out of her ass and pulled my tongue from her pussy.\n\n\"Oh...god...James!\"\n\nCarol was lying there gasping for air.\n\nI stood up and looked over at Dawn, she had a handful of John's hair and was pulling him into her pussy as she screamed. I unzipped my shorts and pushed them down to the floor and pulled my shirt off. I grabbed Carol by the waist and slid her about 2 feet up on the bed, then I grabbed her legs and pulled them up and pushed them up to her chest.\n\n\"Oh my god!\" Carol moaned.\n\nI leaned forward and grabbed my cock and started it in Carol's dripping pussy and pushed.\n\n\"Oh no!!\"\n\nI got my knees up on the bed and leaned into Carol and pushed my cock in as far as it would go.\n\n\"Oh fuck!!\" Carol screamed.\n\nI heard Dawn scream and looked over and knew she was filling John's mouth full. John lifted his mouth up and she squirted all over him.\n\n\"Oh fuck, John!!\"\n\nDawn got up on her hand and knees.\n\n\"Fuck me John!!\"\n\nJohn got out of his clothes and got behind Dawn and slipped his cock into her. I started sliding in and out of Carol nice and slow.\n\n\"Ohhhhh!\"\n\n\"Are you okay Carol?\" I asked.\n\n\"Fiiiiine!\"\n\nI slipped in and out of Carol in long deep strokes, bumping the end of her pussy each time. Carol moaned continually as I stroked her. I looked over at Dawn, and John was pumping in and out of Dawn in a nice slow rhythm. The two ladies were getting a good fuck.\n\n\"Harder!\" Carol said.\n\nI sped up and pushed my cock in harder each time I drove into Carol. I kept thrusting into Carol for a few minutes, and then she started coming hard. I felt her pussy squeeze my cock hard, and then she screamed.\n\n\"Oh fuck!! I'm coming!!\"\n\nCarol jerked hard over and over for a minute then collapsed.\n\n\"Wait, James!\"\n\nI pushed my cock in hard and held it.\n\n\"Oh god!!\"\n\nI watched John pump Dawn nice and slow while Carol caught her breath. Dawn was moaning and groaning as John gave her a good fuck. I looked at Carol, and she was looking back at John fucking Dawn.\n\n\"You want to watch?\" I asked.\n\n\"Yes.\"\n\nI pulled my cock out of Carol and pulled her up, she got on her hands and knees so she could watch John and Dawn. I held Carol's ass and slipped my cock all the way back into her.\n\n\"Emmmmm!\"\n\nCarol pushed her ass back and then pulled forward, then shoved it back as she watched John.\n\n\"Oh fuck, John, I'm coming!!\" Dawn screamed.\n\nI watched her tense up and come hard.\n\n\"Ahhhh!! Fuck!!\"\n\nJohn pushed his cock into Dawn and held it.\n\n\"Stay right there, John!!\" Dawn said as she panted.\n\nI grabbed Carol's hips and started pounding her.\n\n\"Ahhhhh!!\"\n\nJohn looked over and watched me pound his pretty wife's pussy hard.\n\n\"Oh! Oh! Oh!\" Came from Carol.\n\nDawn was watching us now. Carol was moaning and screaming, I kept jamming my cock all the way in hard. Carol tensed up and came hard, I heard the juices gush from her pussy.\n\n\"Ahhhhhhhh!! Ahh!! Ahh!!\"\n\nCarol was shaking.\n\n\"James, stop!!\"\n\nI pushed my cock into Carol and held it.\n\n\"Oh fuck!!\"\n\n\"John, fuck me in the ass!\" Dawn said.\n\nJohn hesitated for a minute.\n\n\"Last chance John!\" Dawn said.\n\nJohn pulled his cock out of Dawn and grabbed it, and I watched him work it into Dawn's ass.\n\n\"Oh yes, that feels good!!\" Dawn yelled.\n\nCarol and I both watched John as he got a hard rhythm going in and out of Dawn's ass. I was surprised Dawn had told him to do it, but he was pounding her ass. He kept it up for about ten minutes until he started grunting. John must have been having some wild fantasies in his mind right now.\n\n\"John, come in my ass!!\" Dawn screamed.\n\nJohn yelled and jammed his cock into Dawn and started pumping cum into her.\n\n\"Oh fuck!!\" Dawn screamed then started jerking hard as she came.\n\nDawn jerked again and then collapsed down onto her tits.\n\n\"Oh fuck!!\" Dawn got out.\n\nJohn was still trying to pump cum into Dawn but he was finished. He pulled his spent cock out of my wife and had to sit on the bed. Dawn slid forward and laid face down on the bed.\n\n\"Oh, that was good, John!\"\n\n\"You are incredible Dawn!\"\n\nI started working my cock in and out of Carol's dripping pussy again.\n\n\"Emmmm. James, I want to try it.\"\n\n\"Try what?\"\n\n\"I want you in my ass.\"\n\n\"Carol, are you sure?\"\n\n\"No, but do it.\"\n\n\"My pleasure, you tell me if you want me to stop.\"\n\n\"Okay.\"\n\nI took my hand and reached around between Carol's legs and got my fingers covered in her dripping juices. Once I had fingered her clit for a minute and my fingers were nice and wet, I took my hand and worked two fingers in Carol's ass. She didn't have a lot of resistance, I figured John must fuck her ass often, but my cock was much larger than his.\n\n\"Emmmm!\" Came from Carol.\n\nI worked two fingers in Carol until she was nice and loose and wet. I slipped my fingers out of her ass and my cock out of her pussy. I held my cock and pushed slowly into her ass.\n\n\"Ahhhhh!\" Came from Carol.\n\nI got the head of my cock into her rectum.\n\n\"Emmmm!!\"\n\n\"Okay?\"\n\n\"Yes, more.\"\n\nI slowly eased my cock into Carol's tight ass, the head slipped passed her rectum. Carol inhaled sharply.\n\n\"Oh yes!\"\n\nI held my cock where it was at. Carol started pushing her ass back into me, she pushed hard enough that I slipped about half my cock into her ass.\n\n\"Ohhh fuck!\"\n\nCarol held herself a minute then pushed back again.\n\n\"All the way in, James!\"\n\nI held Carol's hips and pushed into her as she pushed back. Slowly I slid all of my cock deep inside her.\n\n\"Ohhhh...yes!\"\n\nI held Carol's hips and slid out some and pushed back in.\n\n\"That's it, nice and slow!\" Carol let me know.\n\nI would pull out some and push back in, and Carol would pull forward then shove her ass back. Carol's ass was so tight, but she was working it on my cock. Soon we were working my cock all the out and all the way back in over and over. We kept this up for a good 20 minutes, Carol was moaning and groaning constantly.\n\n\"James, come in me!!\"\n\nI sped up and pumped Carol's ass faster, she was so hot and tight I was struggling to hang on.\n\n\"Oh god!! Oh god!!\"\n\nCarol was building to a huge orgasm now. I sped up some more and drove my cock in deeper.\n\n\"Oh yes!! Harder!!\"\n\nI held onto Carol and drove my cock in and out of her ass faster.\n\n\"Yes!! Yes!! Yes!! I'm coming!!\" Carol screamed several times.\n\nCarol started shaking and jerking, her back was arching up and down over and over.\n\n\"God yes!! Come in me!!\"\n\nCarol was coming hard, I jammed my cock in as deep as I could and she screamed, then I started pumping hot cum into her ass.\n\n\"Ahhhhhh!!\" I let out.\n\nCarol started jerking.\n\n\"Oh fuck yes!! Your cum is so hot!!\"\n\nI pumped cum into her over and over until I was about to collapse. Carol fell down on the bed, and I fell on top of her with my cock still jammed in her.\n\n\"Oh fuck!\" Came from Carol.\n\nI pushed myself up and pulled my cock out of Carol's ass slowly.\n\n\"Ahhhhhh.\"\n\n\"Are you okay?\" I asked.\n\n\"Perfect.\"\n\nI lay next to Carol.\n\n\"John, how long have you been fantasizing about fucking Dawn?\" I asked.\n\n\"A long time. A few times I saw Dawn in the locker room naked, it always made me so hard.\"\n\n\"What were you doing looking in the women's locker room?\" Dawn asked.\n\n\"I wanted to see you, naked I hoped.\"\n\n\"You ass!\" Dawn said.\n\n\"When we had sex New Year's, it was my wildest fantasy coming true. And now, fucking you in the ass, even better. I have been looking at you for years, thinking about it.\"\n\n\"What other fantasies have you had about Dawn, honey?\" Carol asked as she rolled onto her back.\n\n\"I shouldn't say.\"\n\n\"Go ahead John,\" Dawn said.\n\n\"I always fantasized about doing you on the operating table.\"\n\n\"Kinky,\" Dawn said. \"Maybe we can do that.\" John looked at her and smiled.\n\n\"You two better not get caught!\" Carol said.\n\n\"This was fun,\" Dawn said.\n\n\"Yes it was,\" Carol mumbled. \"Now about the party, tell me about it.\"\n\n\"Bring sunscreen,\" I said.\n\n\"That's it?!\"\n\n\"That's it!\"\n\n\"James, you asshole!\"\n\n\"No, Carol, I think it was your asshole!\"\n\nCarol started laughing, and then everyone caught it.\n\n\"John!\" Dawn said as she sat up in bed. \"Can you make my tits bigger?\"\n\n\"Yes, but you have beautiful breasts Dawn. What are you, a full C?\"\n\n\"Yes, and thanks, but I was thinking about making them more full and little larger, but without them looking like I have had implants.\"\n\nJohn sat next to Dawn and reached over and felt her tits.\n\n\"How, big? Are you wanting breasts like Amy and Sam?\"\n\n\"I love their tits, but they are very large and look very natural. I don't think that big. Maybe a full D or DD? What do you think?\"\n\nJohn looked at Dawn's breasts and felt them as we watched.\n\n\"Dawn you have a very small body, we would have to be careful to keep them looking natural, but I think I could make you a nice full DD.\"\n\n\"Oh good!\"\n\n\"I will be back.\"\n\nJohn got up and went to the den and came back with a flashlight.\n\n\"Dawn, have you ever had any surgeries or cuts that had to be sewn up?\"\n\n\"I had my appendix taken out in college.\"\n\n\"Laproscopic or the old fashion way?\"\n\n\"I was cut.\"\n\n\"Lie down.\"\n\nDawn lay on her back and John turned the flashlight on and examined Dawn's appendix scar carefully.\n\n\"Very good,\" John said. \"Any more?\"\n\n\"No.\"\n\n\"Hmmm,\" came from John.\n\n\"Why?\"\n\n\"You know why, I always look to see how a person's scars heal.\"\n\n\"I forgot, I'm not with you when you examine people.\"\n\nJohn leaned over and pinched and tugged on the skin on Dawn's breasts.\n\n\"What are doing John?\" Dawn asked.\n\n\"I am worried about how much sun you have had.\"\n\n\"Why?\"\n\n\"You know what the sun does to your skin. If you have had too much sun over the years sunbathing nude, your skin will not be pliable and it could make the scarring worse.\"\n\nJohn pulled and stretched the skin on Dawn's stomach and face.\n\n\"But your skin feels and looks good,\" John told her.\n\n\"It better be, I use the best and most expensive moisturizer there is!\"\n\n\"Good, but Dawn, you are at the age you should probably cut back on the sunbathing, and you know that.\"\n\n\"Don't forget my skin is a little dark anyway, John.\"\n\n\"I know, but just consider what I said.\"\n\n\"Well, time wise, my tits have only had sun on them for the last several years.\"\n\n\"You're right, good!\"\n\n\"Can you do them, John?\"\n\n\"What do you have to say about this, James?\" John asked.\n\n\"I love her tits the way they are, but if she wants them fuller and they won't look fake, I guess I am okay with it.\"\n\n\"I can do it, you know that Dawn,\" John said.\n\n\"Great!\"\n\n\"If you had a little fat on you, I could do a fat augmentation, but your body is hard as a rock.\"\n\n\"I'm not getting fat for this!\"\n\n\"Well, the good thing is you already have perfect pert breasts with the nipples pointing up nicely, I won't have to move you nipples to keep it looking nice.\"\n\n\"Good, that is why I don't want to go real big. What do you think, above or below the muscle?\"\n\n\"Let me see. I know you work out a lot, let me feel your chest muscles.\"\n\nJohn poked and pushed around Dawn's breasts for a few minutes.\n\n\"You have great underlying muscle tone so we can do under the muscle.\"\n\n\"What is the difference?\" I asked.\n\n\"On top of the muscle or sub-glandular, means the implant is on top of the pectoral muscle. That way is more prone to stretch marks and the look of implants, if they are large. Under the muscles pushes the natural breast tissue up and looks more natural and is less prone to stretch marks and that implant look,\" John told me.\n\n\"Good,\" Dawn said.\n\n\"Dawn, you are adding more than you think to go to a DD. I don't want your perfect breasts with stretch marks. I want to use expandable implants.\"\n\n\"Like the ones you use when rebuilding mastectomies?\"\n\n\"Not the big ones, I'm not talking about skin expanders. These are implants with some fill already in them and we add 50cc's or so every week or so. It makes a slow expansion and hopefully stops the stretch marks, plus we get the ability to fill them until you get the size you want.\"\n\n\"I have never seen you use those before,\" Dawn said.\n\n\"Since you have been working with me, I don't do regular augmentations anymore, just the major reconstructions. I used these before, they work great.\"\n\n\"Okay, I trust you.\"\n\n\"I know you do and if I fuck this up, you and James will kill me.\"\n\n\"You're right!\" I said. \"I just want them to look nice.\"\n\n\"You like my wife's don't you?\"\n\n\"Carol, you had yours done?\" Dawn said as she sat up.\n\n\"When we got married, I was an A, now I am a full C,\" Carol said.\n\nDawn moved over next to Carol and examined her breasts.\n\n\"I would have never known,\" Dawn said.\n\n\"Let me look,\" I said.\n\n\"You just want to play with my tits!\" Carol said.\n\n\"John, do you understand what I want?\" Dawn asked him.\n\n\"Sure, you want some nice big full tits that don't look fake.\"\n\nDawn giggled.\n\n\"You got it!\" Dawn told him.\n\n\"When do you want to do it?\" John asked.\n\nDawn looked at me.\n\n\"Shit!\"\n\n\"What?\" John asked.\n\n\"Don't say anything you two, but I have a new job coming up in the fall.\"\n\n\"You are not leaving me are you?\" John asked.\n\n\"No. The Dean at the university wants me to help him start the new advanced nursing program.\"\n\n\"So he listened to me,\" John said.\n\n\"You?!\"\n\n\"Me and plenty of other doctors. Congratulations.\"\n\n\"I am also going back to school to get my Ph.D.\"\n\n\"Congratulations Dawn,\" Carol said.\n\n\"I don't know when I will have the time.\"\n\n\"Dawn, with the expandable implants, you will only have about a week of down-time, at most. But you will have to do something I know you will hate.\"\n\n\"What?\"\n\n\"Wear a bra, a support bra while you are up and around for a few weeks.\"\n\n\"Oh my god, I could never do that!\" Dawn exclaimed. We all laughed at her. \"I know that. Let me see if I can work it in in late July, can you do that?\"\n\n\"Sure. Decide when and let me know, I have to do some measurements, you know. Do you want me to do your piercings while you are under?\"\n\n\"What! James, did you tell him?!\"\n\n\"Yes.\"\n\n\"I don't know. If Amy wants to get hers done we were going to do it together.\"",
        "\"What about Sam, when can she come back and get hers done, James said she was thinking about.\"\n\nDawn looked at me. I knew she was thinking about Sam moving in with us and didn't want to say anything.\n\n\"Let's wait on that, we may all want to that together, before Christmas. You can do us at the house can't you?\"\n\n\"Sure. I told James he can't have sex with any of you for about a month.\"\n\n\"A month! You said a few weeks!\" I said.\n\n\"Sorry, James,\" John said. \"And that means you three girls cannot have sex with each other either.\"\n\n\"James, I can come over,\" Carol said seriously.\n\n\"You will have to!\" I told her. She smiled.\n\n\"Let me talk to the girls,\" Dawn said. \"James, are you okay with this?\"\n\n\"If this is what you want to do, of course, as long as John doesn't fuck it up and I have to kill him.\"\n\n\"You hear that, John,\" Dawn said.\n\n\"I think you will both be pleased with the results,\" John said.\n\n\"Oh shit! It has been fun, but we have to get back to the girls,\" Dawn said.\n\n\"You two come back when you can stay longer,\" John said.\n\n\"I have a better idea, you two come sometime and stay the night,\" Dawn said.\n\nDawn got up and found her shorts and put them on; I found mine and put them on. John and Carol walked us to the door.\n\n\"Don't you need your top Dawn?\" Carol asked.\n\n\"No.\"\n\n\"See you two about 11:00 Saturday,\" I said.\n\n\"John, go fuck Carol senseless, see you later,\" Dawn said.\n\nWe drove back through the warm night, Dawn liked to drive topless at night.\n\n\"Did you enjoy that?\" Dawn asked.\n\n\"Yes I did, but I am surprised you wanted John to fuck you in the ass.\"\n\n\"Carol told me before she wanted to try your big cock in her ass. I knew if I let him fuck me in the ass, Carol would want you to do her.\"\n\n\"Thank you, honey. Did you enjoy John fucking you?\"\n\n\"Yes, he was much better this time, he was too excited the first time.\"\n\n\"Good.\"\n\n\"Honey, are you sure you are okay with me having surgery?\"\n\n\"Sure, I just have one condition?\"\n\n\"What?\"\n\n\"I want to be there and watch.\"\n\n\"Oh, not a problem.\"\n\n\"I don't know about going without sex for a month,\" I said.\n\n\"You can call plenty of women, especially Katrina. I don't know if I can go without sex for month!\"\n\n\"If you and the girls have to go without sex, I will too. Plus, don't forget, I can make you come without sex.\"\n\n\"You sure can. That will be better. What about the girls?\"\n\n\"I bet the two of us can push them to an orgasm easily.\"\n\n\"Not yet. Maybe we can get this done before we go back to Hawaii, that will give us time to recover.\"\n\n\"So you are going?\"\n\n\"I think so, is that okay?\" Dawn asked.\n\n\"Sure. I guess I will have to find a house sitter.\"\n\n\"Do you want to go?\"\n\n\"No, a house sitter for me!\"\n\nDawn laughed as we drove on.\n\n+++++\n\nWe got to the house and pulled into the garage about 10:30. When we went in the house, Amy and Sam where on the sofa doing each other. They stopped and Amy looked up.\n\n\"Well?\"\n\n\"She's in,\" I said.\n\n\"I'm going to shower,\" Dawn said and headed up the stairs.\n\nAmy sat up and then Sam sat up and I walked over and sat between them.\n\n\"Somebody got fucked,\" Amy said.\n\n\"I need to talk to you two. We still have some concerns about Linda, and I am sure she is going to be hesitant at the party. The four of us and Joe and Katrina are going to keep her comfortable, okay?\"\n\n\"Sure, what do you want us to do?\" Amy asked.\n\n\"Until she gets comfortable and gets to know everyone, one of us needs to stick with her and introduce her to everyone.\"\n\n\"We can do that. Tell us about the party now,\" Sam said.\n\n\"It is going to be a surprise!\"\n\n\"James!\"\n\n\"You will have plenty of fun.\"\n\n\"We better!\"\n\n\"Who got fucked?\" Amy asked.\n\n\"John and I watched Carol and Dawn for a while and then John did Dawn and I did Carol.\"\n\n\"Was it good?\"\n\n\"It was for me, you will have to ask Dawn if it was good for her.\"\n\nAmy and Sam jumped up and ran upstairs. I laughed at them and followed them up, when I got to the bedroom Amy and Sam were in the shower with Dawn bugging her. I got out of my clothes and joined them. After everyone was out of the shower Amy and Sam went to bed. Dawn and I crawled in the bed.\n\n+++++\n\nThe men returned Wednesday morning early so they could get started before it got to hot. Sam and Amy came down several hours later and fixed breakfast wearing no clothes. After we finished eating they went and watched the men from the patio for a while then came back in.\n\n\"Can we go down there and watch?\" Sam asked.\n\n\"I guess, but not naked, at least put a bikini on,\" I told them.\n\nThe two of them ran up the stairs to their bedrooms.\n\n\"That may not have been a good idea,\" Dawn said.\n\n\"They just want to go down there and flirt and probably see if they know what is going on.\"\n\nSeveral minutes later I heard the two of them running down the stairs, they both had on a very skimpy thong bikini. Before I could say anything they were out the door and on the four-wheeler headed to the lake.\n\n\"Told you,\" Dawn said.\n\n\"I'll have to go check on them soon to make sure the work is getting done.\"\n\n\"Are you going to put the Jet Skis in the lake for this weekend, people could cruise around slowly if they want,\" Dawn asked me.\n\n\"That's a good idea, I'll move them down there Friday.\"\n\nDawn got up from the bar and walked over to me and grabbed my cock through my shorts.\n\n\"What do you want little girl?\"\n\n\"You got up early this morning and I didn't get anything.\"\n\n\"Come with me, I'll take you back to bed,\" I told Dawn as I grabbed her hand.\n\n\"I have a better idea.\"\n\nDawn led me out to the patio and stopped at the Tantra chair outside and started taking her clothes off. Once she had her clothes off she started pulling mine off.\n\n\"Do me out here on the chair,\" Dawn said as she removed the last of my clothes.\n\nI knew what Dawn wanted, she hadn't had a crowd in a while. I sat Dawn on top of the chair and crawled between her legs and ate her pussy until she had several screaming orgasms. I was laughing while tonguing her and listening to her scream, I knew she wanted the guys to hear her. Dawn eventually got up and laid over the end of the chair and wanted me to fuck her from behind. I slipped my cock in her and fucked her like crazy for about 20 minutes. She was screaming over and over for me to fuck her harder. After Dawn had several more screaming orgasms, I filled her pussy full of cum then we hopped in the pool to cool off.\n\n\"You put on a good show for them,\" I told her.\n\n\"What show?\"\n\n\"You'll never change will you?\"\n\n\"I hope not,\" Dawn replied.\n\n\"I better go check on the girls.\"\n\nI left Dawn in the pool and found my clothes and put them on. I went to the garage and got one of the other four-wheelers and drove down to the burgeoning tent city. When I got there not a lot of work was going on, Amy and Sam were standing in the big tent talking to the four guys as they looked on. I walked over to the small crowd and one of the guys realized that they were all standing around looking at the girls.\n\n\"How is it coming?\" I asked.\n\n\"Uh, we only have to finish setting up the rest of the tents and the tables in here and put the sides on the big tent sir.\"\n\n\"Will you be finished by lunch? I know you all don't want to be out in the hot sun the rest of the day.\"\n\n\"Yes, we should be,\" he stumbled.\n\n\"That sounds good. Sam would you come with me a minute?\"\n\nSam walked over to me and I took her out of the tent.\n\n\"Those bikinis were not exactly what I had in mind.\"\n\n\"Hey, you two were the ones up there fucking and making all that noise!\" Sam said with a giggle.\n\n\"You two make sure that they get finished by lunch, you're in charge.\"\n\n\"Okay!\" Sam replied.\n\n\"And tell Amy to not get too hot, or either of you get those guys too hot.\"\n\nSam giggled again then said, \"Will jump in the lake to cool off,\" then turned to walk back over to Amy and the guys. I grabbed the strings holding the top of her small top up and pulled them loose.\n\n\"James...\" Sam said as she pulled her top back up while she kept walking toward the tent.\n\nThe guys were already breaking up realizing that they had been standing around not doing anything but looking. I left the four-wheeler down there and walked back through the lush green lawn that covered the area looking to see if it needed to be cut before the weekend. I decided it didn't, it had been so hot and dry the last two weeks it hadn't grown much. Dawn was lying in the sun naked on the patio when I got there.\n\n\"Are they letting them get any work done?\" Dawn asked.\n\n\"They will now.\"\n\n\"Go get us some beers,\" Dawn asked.0\n\nI went into the house and grabbed two beers and went back out and sat next to Dawn. We sat and talked while Dawn worked on her tan and we drank our beers. After a few minutes Dawn rolled over on her stomach and asked me to oil her backside down. I was finishing up when I heard one of the four-wheelers start up, I assumed it was the girls until I turned to see one of the guys riding toward the house.\n\n\"Dawn, one the men are coming up here.\"\n\n\"So?\"\n\n\"Never mind.\"\n\nHe pulled up to the edge of the patio and got off and started walking toward me. When he saw Dawn lying there naked he stopped about ten feet away, not sure what to do.\n\n\"Uh...I need to ask you something,\" he said while he stood and tried not to look at Dawn.\n\n\"What is that?\" \n\nThe young guy got braver and walked slowly toward us trying to look at Dawn without making it look like he was staring at her.\n\n\"Uh...Amy, I mean the young lady says there are not enough of the small tents.\"\n\n\"How many did you set up?\" I asked him while he looked at Dawn's ass.\n\n\"Uh...nine.\"\n\n\"That is what I asked for.\"\n\nDawn turned her head and rolled over.\n\n\"Oh...uh...but the young lady said there will probably be 11 or 12 couples.\"\n\n\"That's right, probably more,\" I told him.\n\nThe young man couldn't help but look at Dawn.\n\n\"Uh...okay, I just wanted to make sure we hadn't messed up.\"\n\n\"Everything is looking great,\" I told him.\n\n\"Yes it is...uh...I mean we are setting everything up to look good,\" he stumbled.\n\n\"Very good. Make sure you put the sleeping bags in the tents and spread them out to cover the floors.\"\n\n\"Yes sir.\"\n\nThe young man backed away slowly and turned and rode back down to the lake.\n\n\"James, what is going on? Who's not coming?\"\n\n\"Everyone is coming.\"\n\n\"Counting us and the girls that is at least 13 couples, plus Nancy and the twins, where is everyone going to sleep?\"\n\n\"I guess they will have to double up in some of the tents,\" I told her as I finished my beer.\n\n\"James...\"\n\nI looked over at Dawn's glistening body and looked her in the eyes, she smiled and shook her head. I began working oil into her front.\n\nThe guys got finished about noon. I went down to check everything out before they left. Amy and Sam were sitting on the back of their truck all wet, they had just gotten out of the lake. The two of them had all that long red hair pulled over their shoulder and down into their laps as they sat and talked. It was obvious the two of them were teasing these guys mercilessly. The tiny bikinis they had on were see through when they were wet and their huge nipples could be seen easily through the small pieces of fabric trying to cover them.\n\n\"Sir does everything look good,\" one of the guys standing near the girls asked.\n\n\"I think it does, what do you think?\"\n\n\"I think everything looks great,\" he said with a smile as he glanced at Amy's tits.\n\n\"If you are finished then come back Tuesday to pick everything up.\"\n\n\"Yes sir.\"\n\n\"You two let the guys have their truck back so they can go,\" I told Amy and Sam.\n\nThey hopped off the truck and the three of us rode back to the house.\n\n\"Are they finished?\" Dawn asked.\n\n\"Yes they are,\" I told her. \"These two have been down there teasing them all morning.\"\n\nAmy and Sam giggled as they removed their bikinis.\n\n\"Us teasing them, you should have heard them all whispering when the guy came back from talking to you!\" Amy said.\n\n\"What were they saying?\" Dawn asked.\n\n\"The one that was up here was talking about your hot tanned body and they were trying to figure out how they could all find a reason to come and see you!\"\n\n\"It looks like the two of you were showing them plenty of skin also,\" Dawn told them as she stood from the lounger.\n\n\"You three are terrible, you want beers?\" I asked as I headed inside.\n\n\"Yes!\"\n\nI took the beers back out and they were talking about only having nine tents and where asking Dawn what was up. I heard the truck start and they slowly drove up toward the house. When they drove by the patio the girls waved at them. They stopped and waved and looked and then drove off.\n\n\"Why only nine tents?\" Amy asked.\n\n\"You need to ask James.\"\n\n\"James, is everyone coming, are we having a camp out?\" Amy asked.\n\n\"Yes and yes.\"\n\n\"Are you planning on everyone sleeping in the tents?\"\n\n\"Yes.\"\n\n\"Then there aren't enough tents,\" Amy replied.\n\n\"Yes there is,\" I told her as I sipped my beer.\n\nAmy and Sam looked at me for a moment then finally figure it out.\n\n\"Oh,\" came from Amy. \"Does everyone know this?\"\n\n\"No.\"\n\n\"This should be interesting then, what about Linda,\" Amy said then smiled real big.\n\n\"James you better tell them the rest,\" Dawn said.\n\n\"What else?\" Sam asked.\n\n\"If I tell you two if will you keep it a secret?\"\n\n\"Yes,\" came from both of them.\n\n\"Everyone is not just camping out this weekend, this is going to be a nudist colony, no clothes for the weekend.\"\n\n\"Great!\" Amy screamed then she and Sam started laughing.\n\n\"If anyone calls or emails, don't tell them.\"\n\n\"We won't,\" Sam replied.\n\n\"You two make sure you have plenty of sunscreen for you and everyone else.\"\n\n\"Okay.\"\n\nWe finished our beers and Amy and Sam decided they needed to get out of the sun, Dawn got up and we all went inside. Amy and Sam talked all afternoon about the party. We all got dressed that evening and went to town for pizza. When we got back home the four of us sat down and talked.\n\n\"Amy, how many people have you told that we are paying for your education?\" I asked.\n\n\"Only Sherri and Lisa, but at the hospital, I think most of the people at the hospital know.\"\n\n\"They shouldn't.\"\n\n\"They know I am going back to school and I can't afford it. I wonder what they think now.\"\n\n\"Is that why you are worried what everyone thinks?\" I asked.\n\n\"I was, but I don't care what everyone thinks anymore, I'm happy and that is all that matters.\"\n\n\"It's good to hear you say that,\" Dawn told her.\n\n\"Sam, will that a problem for you?\" I asked.\n\n\"No, I really don't care what people think about us, we have something special and that is all that matters.\"\n\n\"I'm glad to hear you say that, that is all that matters to us,\" Dawn told her.\n\nWe all talked the rest of the evening and through dinner until it was about time to go to bed. From the conversation it appeared that Sam and Amy were working through their issues. It had been a long few weeks with a lot of emotions. I saw Amy whisper something in Dawn's ear.\n\n\"Of course, but you have to ask,\" Dawn said to Amy.\n\nAmy looked over at me from the loveseat.\n\n\"James, would you spend the night with me?\" Amy asked.\n\n\"Of course, why did you ask Dawn?\"\n\n\"I don't know.\"\n\n\"You ready to go to bed?\" I asked.\n\n\"Yes.\"\n\n\"Dawn can I sleep with you?\" Sam asked.\n\n\"Of course.\"\n\nWe all got up and went upstairs, I said goodnight to Dawn and Sam when they went in our bedroom and I followed Amy down to her room. When I walked in Amy closed the bedroom door behind me which was unusual.\n\n\"Are you okay?\" I asked Amy.\n\n\"Yes.\"\n\nAmy walked over to the bed and sat down, I sat down next to her. Amy was looking down at her lap. She looked up into my eyes and stared.\n\n\"What is it Amy?\"\n\n\"Would you make love to me tonight?\"\n\n\"I always do.\"\n\n\"You know what I mean.\"\n\nI reached up and took Amy's face in my hands and kissed her deeply for a minute.\n\n\"Amy, I always make love to you, but I know what you mean.\"\n\nI kissed Amy again and she kissed me back hard.\n\n\"Stand up Amy.\"\n\nAmy stood up in front of me, I reached up to unbutton her blouse.\n\n\"Would you do something first for me?\" Amy asked.\n\n\"Sure, anything.\"\n\n\"Would you turn off the cameras in here, I don't want them on tonight.\"\n\n\"Of course.\" \n\nI picked up the remote and turned off the cameras in the bedroom.\n\n\"Thanks.\"\n\n\"Amy, are you tired of the cameras?\"\n\n\"No, I just want it to be you and me tonight, no one else, no recording.\"\n\n\"Okay.\"\n\nI continued to slowly unbutton Amy's blouse until I had it off and then unzipped the skirt she had on and dropped it to the floor. Amy was wearing simple white cotton underwear. I reached up and unhooked her bra in the front and slid it off her arms then pulled her panties down. \n\n\"What are you doing?\" Amy asked as I looked.\n\n\"Enjoy your simple beauty.\"\n\nAmy reached over and grabbed the bottom of my shirt and pulled it up over my head, then she made me stand up so she could unzip my shorts and pull them down, then she pulled down my briefs. Once we were both completely naked Amy wrapped her arms around me and hugged me tightly. Her warm flesh pressing against my body felt so wonderful.\n\nAmy released me and I turned her and laid her on the bed, she crawled to the middle and I got in next to her. Amy was lying on her side with her head propped up on her elbow, she leaned over and kissed me then laid her head on my chest and held me with her arm. I reached around her and pulled her in tight. We just held each other for about 30 minutes.\n\nAmy raised her head and looked at me.\n\n\"Thanks.\"\n\n\"For what?\"\n\n\"Just holding me.\"\n\n\"Amy, can we talk for a minute?\" I asked her.\n\n\"I guess.\"\n\n\"I need to ask you something and I want you to tell me the truth.\"\n\n\"I will.\"\n\n\"After all the talking these last few weeks, I need to ask you something important. A few times you have said some things that made me think you feel like you need more from our relationship, you even said that you felt like you needed to grow in our relationship. What do you need?\"\n\nAmy moved and sat up in bed next to me.\n\n\"Can I ask you something first?\" Amy asked.\n\n\"Yes.\"\n\nAmy paused a moment then looked in my eyes.\n\n\"Do you really love me?\"\n\n\"Amy you know I love you!\"\n\n\"Do you love me as much as you love Dawn?\"\n\nI didn't like where this was going, I sat up in bed to look at Amy.\n\n\"Amy, I love you with all my heart, but it's not that I love you less than Dawn, Dawn is my wife, I have a different kind of love for her.\"\n\n\"How is it different?\"\n\n\"It just is Amy, you love Sam differently than you love me or Dawn don't you?\"\n\n\"Yes, but we are family, that's different.\"\n\n\"How, you two are closer than any other siblings I know, you have a special love for each other.\"\n\n\"Do you think of me as family?\"\n\n\"Amy, you are part of our family, but I love you like the beautiful women and lover that you are, much more than if you were just family.\"\n\n\"So you think of me as a lover?\"\n\nThis conversation was not going well. I sighed and looked at Amy. I didn't know what to say to her with the direction she was going.\n\n\"Amy, I love you as much as I love Dawn, but you know it is different between Dawn and me, it has to be.\"\n\nAmy looked into my eyes for a minute.\n\n\"James, I don't want to be just a lover to you.\"\n\n\"Is that what all this has been about?\"\n\n\"I think so.\"\n\n\"Is that the way you feel?\"\n\n\"I don't know for sure.\"\n\n\"Amy, how do you feel about me, do you see me as just another lover?\"\n\n\"No. James I love you with everything I have, I always will, but when you started talking about kicking us out and moving us to an apartment, it hurt.\"\n\n\"I wasn't talking about kicking you out, you know how I was feeling, I told you and Sam both in the beginning that I never wanted either of you to think you had some type of obligation to either me or Dawn for what we are doing.\"",
        "\"Are you feeling like I am getting too close to you and Dawn?\"\n\n\"Amy, I want you as close to us as you can possibly be, but I do not want it out of any obligation, do you understand me?\"\n\n\"James, it is not out of any obligation, I love you two...that is why I am afraid you don't understand.\"\n\nAmy started tearing up. I reached over and pulled her to me and held her for a while. What Amy was saying was beginning to make since to me now. I had been holding Amy for about five minutes when she pulled away and looked at me.\n\n\"Do you understand now?\" Amy asked through her tears.\n\n\"Yes I do...yes I do Amy.\"\n\nI pulled her back to me and held her tight. Now I understood, Amy wants to know that I have some kind of commitment to her and not just a relationship based on sex. Even though we had talked about this a lot, I fully understood her now. I was going to have to talk to Dawn seriously before we could get this solved. I released Amy and pulled her face up and kissed her.\n\n\"Amy.\"\n\n\"Yes.\"\n\n\"Is that how Sam feels also?\"\n\n\"For her age, yes, she is turning 19 this year and she knows she has 5 more years of school and is afraid once she is out of school that all this will end...and so am I.\"\n\n\"Thank you for finally telling me the truth. Everything is going to be alright now.\"\n\nAmy sat up and looked at me, I grabbed her and kissed her and laid her back down in the bed.\n\n\"Amy, I wish I could make you understand how much I do love you.\"\n\n\"Just make love to me now.\"\n\n\"Only if you make love to me.\"\n\nI spent the next 20 minutes kissing Amy all over as passionately as I could. Amy finally relaxed and was enjoying my attention to her. When I worked my way back up her legs and began kissing her mound I stopped.\n\n\"Oh don't stop.\"\n\n\"I want you to tell me something.\"\n\n\"No more talking tonight James, please.\"\n\n\"No, I want you to tell me something as my lover and my companion, something you have never told me before.\"\n\nAmy looked up with a serious look on her face.\n\n\"What?\"\n\n\"Tell me how you want me to eat your pussy, tell me what is your favorite way, what makes you feel close to me?\"\n\n\"Oh James, any way you want.\"\n\n\"That is not what I asked, I know Dawn's favorite way, I know what she likes most and gets the most enjoyment out of, now I want you to tell me and show me.\"\n\nAmy looked at me for a minute.\n\n\"Let me show you,\" Amy said. \"Lay on your back.\"\n\nI rolled over on my back and Amy turned and sat up on the bed next to me. She then got up on her hands and knees and worked her way up so that she could put her pussy on my mouth.\n\n\"I like it this way...so I can look in your eyes while you make love to me.\"\n\nAmy moved so that she was facing me and had her pussy straddling my mouth.\n\n\"I like it this way too.\"\n\nI grabbed Amy's hips and pulled her pussy down to my mouth and licked the length of her slit.\n\n\"Oh god yes!\"\n\nAmy lowered herself down and I looked up to see her looking me in the eyes. I worked her pussy over for a very long time driving her to several orgasms. Amy never once stopped looking in my eyes. When she couldn't take anymore she sat up and worked her way down so that she could lay on me face to face. Then she kissed me for a long time, when she finally stopped she lifted her head and looked into my eyes.\n\n\"I do love you,\" she said.\n\nI pulled her head back down and kissed her some more before I let her go.\n\n\"Now what is your favorite position so I can keep making love to you?\" I asked.\n\n\"James, I like being as close to you as possible when you are in me, I like it when you hold me.\"\n\n\"Then what do you want?\"\n\nAmy got up and moved off me then grabbed my hand and said 'come'. She pulled me up and led me to the Tantra chair.\n\n\"Sit in the middle so I can sit on top,\" Amy instructed me.\n\nI sat in the middle straddling the chair then Amy stepped over me and put her ass against the back of the chair and began to slide down. When she got far enough down she grabbed my cock and placed it up to her dripping pussy and began slowly working her way down.\n\n\"Oh god yes. This is what I need.\" Amy said as she worked her way all the way down.\n\n\"I'm glad you like this, I get to look at your beautiful body and face while we make love,\" I told her.\n\nAmy looked at me then leaned forward so that I could suck on her nipples while she worked her magic. I wrapped both arms around her and pulled her close while she worked her pussy up and down my cock slowly. I sucked and nibbled on Amy's nipples until she began slamming her pussy up and down on my cock.\n\n\"Oh god yes! I love this!\" Amy cried out then began moaning and groaning loudly.\n\nAmy wrapped an arm around my head and pulled me against her breasts. I held her tight and sucked on her breasts until she started to jerk hard.\n\n\"Oh god, I'm coming!!\"\n\nAmy thrust her hips up and down harder when her pussy began to contract around my cock.\n\n\"Ahhhh!! Yes!! Yes!! Yes!!\"\n\nI could feel Amy gasping for air as she continued. I knew she was about to explode.\n\n\"Oh god!!\"\n\nI felt Amy jerking against me then I felt her hot juices squirting onto my groin. She slammed her pussy down on me and pulled my head tighter to her as she came hard over and over.\n\n\"Ahhhh!! Oh god yes!!\" Amy screamed as she jerked hard several times then went limp against me.\n\nI could feel the inside of her pussy twitching repeatedly as she held onto me. Once she began to catch her breath she released her hold on my head and sat up.\n\n\"Oh god James, that is the way I like it, being as close to you as I can.\"\n\n\"I enjoy this too. What do you feel when we are this close?\"\n\n\"I just enjoy it, I feel so electrified when you hold me when we are making love.\"\n\nAmy leaned forward and kissed me.\n\n\"Now that you have made love to me, how do you want me to make love to you?\"\n\n\"Oh, oh...let me rest a minute,\" Amy said.\n\nI placed my hands on Amy's breasts and squeezed them gently while she rested.\n\n\"James, what do you like best?\"\n\n\"Pleasing you.\"\n\n\"I am already pleased! What do you want?\"\n\n\"Amy I love anyway with you.\"\n\n\"You have to tell me what you want now, you made me.\"\n\n\"Okay, I like doing you from behind.\"\n\n\"Very well then.\"\n\nAmy lifted herself up then took my hand and pulled me up then she turned and held herself up over the high end of the chair so I could slip into her from behind.\n\n\"This way?\"\n\n\"Perfect!\"\n\nI leaned forward and placed my cock at Amy's dripping pussy and slipped in slowly until I was all the way in.\n\n\"Oh that's it!\" Amy said. \"Take your time and make love to me James.\"\n\nI started sliding in and out of Amy in a slow steady pace, long deep strokes. Amy moaned every time I pushed back into her. I just concentrated on the feeling of her hot pussy as I slid in and out for a long time.\n\n\"Faster James!\"\n\nI picked up my speed and began to thrust in and out of Amy harder. Amy was moaning and groaning loudly. I kept working my cock in and out of her as she moaned. After a long time Amy was struggling.\n\n\"Oh James, I'm going to come again!!\" She screamed.\n\nI jammed my cock in hard again and again as Amy began to squeeze my cock with her pussy muscles.\n\n\"Oh yes!! That's it!! Oh fuck me!!\"\n\nAmy was screaming as she neared her orgasm, she had pushed herself up so that she was holding herself up with her arms as I drove into her over and over.\n\n\"Oh god I'm coming!!\" Amy screamed then began shoving her hips back into me meeting each thrust.\n\n\"Fuck me harder!!\" Amy screamed then started to jerk and shake as she was overcome with a huge orgasm.\n\nAmy was crying out as she shoved against me. She came hard several times then sat up pulling my cock from her pussy and turned and pulled me down and kissed me hard.\n\n\"Oh James, fuck me in the ass, can you come in my ass?!!\"\n\n\"If that is what you want.\"\n\n\"Do it!!\"\n\nAmy turned and bent over holding herself up with her arms.\n\n\"Hurry James!!\"\n\nI grabbed my cock and placed the tip up to Amy's ass and pushed.\n\n\"Oh god yes!!\"\n\nMy cock and Amy's ass was covered in her juices, so I pushed in more letting the head slide into her rectum.\n\n\"Oh my god, shove it in my ass!!\"\n\nAmy had been screaming all night, it was more than I had heard from her like this before; she was coming like I had never seen her before also. I pushed in hard, shoving about half my cock into her ass.\n\n\"Oh yes, fuck my ass!! I love your cock in my ass!!\"\n\nAmy pushed back against me and jammed the rest of my cock deep in her ass, she felt so good.\n\n\"Oh yes!!\"\n\nI held my cock in place while Amy settled down.\n\n\"James fuck my ass, please!!\"\n\nAmy was going wild, I began to slip my cock in and out of her ass. Amy was squeezing her muscles tightly around my cock. I sped up and began pulling way out and plunging back in.\n\n\"Is this what you want Amy?!\"\n\n\"Yes!!\"\n\nI wanted to pound Amy's ass but I was close to coming so I took my time thrusting in and out.\n\n\"Oh James, I love this!!\"\n\n\"Amy do you really enjoy it?\"\n\n\"Yes, I love your big cock in my ass!\"\n\n\"Good, because I love your ass!\"\n\n\"I know you do, now fuck me!!\"\n\nI couldn't resists any longer, I began slamming into Amy's tight ass harder and harder. Amy started screaming 'fuck my ass' over and over at the top of her lungs. She started jerking about the time I couldn't hold back any longer.\n\n\"Oh James I'm coming, come in my ass!!\"\n\nAmy began to lose control as she was hit by another huge orgasm, I jammed my cock in as far as I could and let go.\n\n\"Oh yes!! Your cum feels so good and hot!!\"\n\n\"Oh god Amy!!\"\n\nI jerked over and over into Amy's tight ass as she screamed. I shot load after load into her like I rarely do. I could feel the inside of her ass getting hotter and hotter as my cum filled her up.\n\n\"Oh James, oh James!!\"\n\nI had both my hands pulling Amy back as I jerked several more times before I stopped pumping cum into her.\n\n\"Oh yes!\" Amy said as she pushed back against me hard.\n\n\"Amy I have got to sit!\"\n\n\"Sit down.\"\n\nAs I move back to sit on the end of the chair Amy moved with me and sat in my lap holding my cock inside her. She leaned back against my chest and reached up and pulled my head down next to hers.\n\n\"James, I love you.\"\n\n\"Amy, I love you too. I hope you feel our love now, I hope you still remember our weekend at the hotel.\"\n\n\"I do and I feel everything now, I know you love me.\"\n\nI held Amy around the waist and kissed on her neck until my cock got soft.\n\n\"Oh that was wonderful,\" Amy said as she sat on my thighs.\n\n\"Amy, is that the way you want to be made love to?\"\n\n\"When it is a special time, yes, but I still like a good hard fuck also.\"\n\nI laughed at her and she began laughing. Amy stood up slowly letting my cock slip from her ass. When she stood cum squirted out on me and then ran down her legs.\n\n\"James, you have never come in me that much before.\"\n\n\"What can I say, you asked me to make love to you and I did.\"\n\nAmy leaned over and kissed me.\n\n\"We better shower before we get back in bed,\" Amy said.\n\nWe got up and went to the shower and washed all the cum from the two of us then dried off and got back in bed. It was 1:30, we had been making love for 2 hours.\n\nAmy rolled over and placed her head on my chest after I turned out the light.\n\n\"James, I know I have sex with other people, but you and Dawn and Sam are the only ones that I make love to.\"\n\n\"I know Amy, me too.\"\n\nAmy fell asleep quickly after our exhausting bout of sex, I laid awake thinking for a while.\n\n+++++\n\nI woke up when I felt a mouth around my cock, Amy was up on all fours sucking my cock. She looked up at me and kept going. I just lay there and let her suck and deep throat me for the next half hour. After she had me come down her throat until I thought I was going to scream she sat back on her feet and looked at me.\n\n\"You are so beautiful,\" I told her.\n\n\"I know.\" Amy said with a giggle.\n\nI reached up and grabbed her and pulled her down on top of me.\n\n\"Are things getting better?\" I asked.\n\n\"Yes, much better,\" Amy said before she started kissing me.\n\nWhen she finished I looked over at the clock, it was 9:30.\n\n\"Damn, we slept let.\"\n\n\"I was exhausted, I don't know about you,\" Amy said.\n\n\"Last night was great,\" I told her.\n\n\"James, be sure you let Sam know how much you love her too.\"\n\n\"I will, when she is ready.\"\n\nAmy and I got up and grabbed our robes and went downstairs, the house was empty. I found a note on the refrigerator.\n\n'Sam and I have gone to town to get some things for this weekend, be back by lunch.'\n\n\"Where did they go?\" Amy asked.\n\n\"Into town to pick some things up for this weekend.\"\n\n\"Let me fix us something to eat,\" Amy said.\n\nI sat at the bar and watched Amy as she cooked. I was going over some things in my mind that I had to talk to Dawn about.\n\n\"Here you go,\" Amy said as I was startled out of my thoughts.\n\nAmy and I ate breakfast then she cleaned up the kitchen. The buzzer on the gate went off, I pushed the button on the intercom and opened the gate. A few moments later the doorbell rang.\n\n\"I'll get it,\" Amy said, I think she was enjoying playing Dawn's part this morning.\n\n\"Remember what you are not wearing!\" I yelled at her as she went to the door.\n\nI heard the door open.\n\n\"Mrs. Smith?\" A hunky young guy said.\n\n\"Close enough,\" Amy replied.\n\n\"Is Mr. Smith here?\"\n\n\"Yes he is, who shall I say it is?\"\n\n\"We are here to setup the fireworks.\"\n\n\"Fireworks!!\"\n\nThat seemed to have brought Amy out of her little fantasy.\n\n\"James, is there going to be fireworks?!\"\n\n\"Looks like it.\"\n\nAmy came running towards me as I walked toward the door and jumped up and wrapped her arms and legs around me, revealing her ass from under her robe as I held it.\n\n\"Hey, let me talk to the man!\"\n\nAmy let go and held onto me as I walked over to talk to the man.\n\n\"Where is it going to be Mr. Smith?\"\n\n\"Let me grab some pants and I will take you down there.\"\n\n\"Okay.\"\n\nHe walked back out to his truck and I closed the door.\n\n\"You didn't say anything about fireworks!\"\n\n\"Don't get so excited.\"\n\n\"You don't understand, fireworks are one of Sam and mines favorite things! Are they going to be real fireworks?\"\n\n\"Yes, now let me get some pants.\"\n\nAmy let go and ran upstairs while I got some shorts I kept in the closet and a t-shirt. I walked out to the truck and told the guys to follow me when I got the four-wheeler out. I went in the garage and started the four-wheeler and pulled out of the garage then Amy came flying out of the house in a pair of skimpy shorts and a t-shirt and hopped on the back of the four-wheeler.\n\n\"Let's go!\" Amy shouted.\n\nI drove around the house and down past all the tents that were set up to a place in the clearing about 100 yards pat the tent and stopped. The truck stopped next to us.\n\n\"Is this far enough away from where we will be?\"\n\n\"Yes, we can setup here.\"\n\nTwo hunky young guys got out of the truck and began unloading it.\n\n\"Is it okay if we have to dig some holes, the ground has to be level where the tubes sit on it?\"\n\n\"Sure, did you get all the permits?\"\n\n\"Yes, and I don't know who you know, but here is your permit to set them off. You know we are supposed to do that.\"\n\n\"I know.\"\n\n\"What time Sunday night?\"\n\n\"About 9:00.\"\n\nAs they unloaded the truck and started setting up the fireworks, we stayed and watched. As they sat them up, we watched them setup the electronic igniters. The guys showed me how everything worked.\n\n\"The wires are about 200 feet long. Once we connect everything, all you will have to do is connect the car battery, once that is done everything is hot and you do not go back down to the fireworks unless the battery is disconnected.\"\n\n\"Okay.\"\n\nAmy followed the two guys around as they unloaded and started digging some holes.\n\n\"You will need some sound protection.\"\n\n\"I have my shooting earmuffs.\"\n\n\"That will work.\"\n\n\"Your wife seems awfully excited.\"\n\nI started to tell him Amy wasn't my wife but didn't. The two of them walked back to the truck and I got on the four-wheeler.\n\n\"Amy you ready to go?\"\n\n\"Can I stay and watch them setup, I have always wanted to see how they do it?!\"\n\n\"Will she been your way?\" I asked one of the guys.\"\n\nHe took a look at Amy's nipples poking through the t-shirt and looked at me.\n\n\"No, she is fine.\"\n\n\"Yes she is.\"\n\n\"I will come and get you when we are finished and go over everything,\" the guy said.\"\n\n\"Good.\"\n\nI started the motor and drove back up to the house. I looked back down at them and Amy was following them around watching. About an hour later I heard Dawn drive up.\n\n\"What is that truck doing down there?\" Dawn asked when she came through the door with Sam.\n\n\"Setting up some things for this weekend.\"\n\n\"What else is there to setup?\" Dawn asked.\n\n\"Just some fireworks.\"\n\n\"Fireworks!!\" Sam screamed. \"Can I go down and look?!!\"\n\n\"Yes, if you take Amy and the men the sodas in this cooler,\" I told her.\n\nSam ran over and grabbed the small cooler I had been putting drinks in and ran out to the garage. I heard one of the four-wheelers start and a moment later saw her speeding through the yard.\n\n\"What was that all about?\" Dawn asked.\n\n\"I got a similar reaction from Amy, it seems fireworks are a big thing with them.\"\n\n\"You didn't say anything about fireworks.\"\n\n\"I thought a few would be nice Sunday night.\"\n\n\"Can they shoot them out here?\" Dawn asked.\n\n\"Yes, they took care of the permits. They are setting them up so I can set them off.\"\n\n\"Oh my god!\" Dawn snickered. \"Help me get some things out of the truck.\"\n\nI followed Dawn out to the truck and helped her bring in some bags.\n\n\"What did you two get?\"\n\n\"Some things you probably forgot.\"\n\n\"Like what?\"\n\n\"Like bug spray and sunscreen.\"\n\n\"I remembered the sunscreen but I didn't think about the bug spray.\"\n\n\"Well come help me, I got a bunch of torches that burn bug repellent.\"\n\nI went back out and helped Dawn carry in about two dozen torches that sat on the ground and burned bug repellent.\n\n\"Did you think about flashlights?\"\n\n\"No.\"\n\n\"Go back and get them out the truck, and the batteries,\" Dawn ordered me.\n\nWhen I got back in the house Dawn asked me about coolers for the drinks. I told her that I thought of that and Nancy was bringing several large coolers and ice.\n\n\"At least you remembered that!\" Dawn kidded me.\n\nWe got everything in the house and Dawn went to the refrigerator and got a beer and walked over to the windows to watch, I followed her to see what was going on.\n\n\"What time did you two get up?\" Dawn asked.\n\n\"About 9:30, why didn't you wake us up?\"\n\n\"Sam and I listened to you too until you finally finished.\"\n\n\"Was all you two do was listen?\"\n\n\"Never mind what we did, Amy seemed to be enjoying herself. I don't think I have ever heard her that loud, what happened?\"\n\n\"We better go sit down,\" I told her.\n\nDawn and I walked over to the sofa and sat.\n\n\"What is it?\" Dawn asked.\n\n\"Well, several things. Amy and I had a long talk last night and I now understand what is really bothering her.\"\n\n\"Good.\"\n\n\"She was, or is afraid that we will want them to move out when they finish school.\"\n\n\"We told them that they could stay forever if they wanted!\"\n\n\"I know, but there is more to it for Amy.\"\n\nI paused and took a sip of my beer.\n\n\"What is it James?\"\n\n\"I don't know how to explain this, give me a second.\"\n\nDawn waited for me to continue while I thought.\n\n\"Dawn, Amy is deeply in love with you and me. I don't mean like just in love with us, I mean like if she was married to you or me.\"\n\n\"Oh.\"\n\n\"What do you think about it?\" I asked.\n\n\"I think you better explain some more.\"\n\n\"We spent a long time talking and working through it last night, honey, she is looking for some kind of commitment to her that is forever, I think.\"\n\n\"Really?\"\n\n\"Yes. We talked about how much she and I loved each other and one of the things she asked was if I loved her like I love you.\"",
        "\"Uh oh. What did you say?\"\n\n\"I told her that I loved her and Sam as much as I could love them but it wasn't the same as how I loved you and would never be.\"\n\n\"What did she say?\"\n\n\"We worked through it and she understands, I think, what do you think?\"\n\n\"They know we love them like family, more than family,\" Dawn told me.\n\n\"That is what Amy is afraid of that we only love her like family.\"\n\n\"James, I don't know how much more we could love the two of them. What does Amy want, you can't marry her.\"\n\n\"Dawn, explain to me your love for the two of them, I know how men love women, but you need to tell me how you feel about them.\"\n\nDawn took a nervous sip from her beer and looked at me and then the tears started. I just waited until Dawn was ready.\n\n\"I don't know what to say. I love both of them, more than family...I don't ever want them to leave as long as they want to stay here with us. I love them as much as I love you, but like you said it is different, it has to be.\"\n\nDawn started crying. I held her as she cried, I knew how she was feeling. Luckily we got to talk for a long time and made some decisions that would affect all of us for the rest of our lives. After several hours we had decided what to do, or at least what we hoped was right. Dawn walked down to check on Amy and Sam about 3:30, I had to make some phone calls. When I went out from the study later Dawn was sitting on the sofa.\n\n\"Do you think this is right?\" She asked.\n\n\"As right as we can make it, I hope. We need to be at the lawyers tomorrow at 2:00.\" \n\n\"Okay. Do you have everything you need?\"\n\n\"Yes.\"\n\nI sat down on the sofa with Dawn.\n\n\"Why was Amy so loud last night, I have never heard her like that,\" Dawn asked.\n\n\"I think I know why but I am not sure I should tell you.\"\n\n\"Well you have to now.\"\n\n\"I think Amy was fantasizing about it just being her and me.\"\n\n\"You mean...\"\n\n\"Yes. She was also playing the wife role when we got up this morning and you two were gone.\"\n\n\"James, is she going to be able to separate her feelings from fantasy?\" Dawn asked.\n\n\"I don't think that is the issue, I think she just wanted play the part for a while. I think it was because of the talk we had, she asked me to make love to her last night.\"\n\n\"Did you?\"\n\n\"Yes, yes I did, does that bother you?\" I asked.\n\n\"No, I think it is time you began making love to them, just like you make love to me.\"\n\n\"We have talked about this before,\" I reminded Dawn. \n\n\"This is completely different, I'm okay with it.\"\n\n\"Will you feel like you are sharing me?\"\n\n\"No, because I love the two of them so much.\"\n\n\"Dawn...do you make love to Amy and Sam?\"\n\n\"Yes I do.\"\n\n\"Good.\"\n\nI heard the four-wheelers pull into the garage, I went to check.\n\n\"Come with me,\" Amy said.\n\nI got on the back and we went down to the fireworks. I spent about an hour going over everything with them.\n\n\"The most important thing you need to remember is if you ignite one and it doesn't go off, leave it the fuck alone. Just tell us when we come back that something didn't go off.\"\n\n\"Okay.\"\n\n\"The two 12 inch star shells are right here, the last two. When you push one of those buttons, be sitting down, they are big. They go up 3000 feet, so don't get excited when they don't burst right away.\"\n\n\"Okay.\"\n\n\"I wish you would let us do this sir.\"\n\n\"I would, but we are having a big party with a bunch of naked people.\"\n\n\"I really wish you would let me do this now! Here is my number if there is a problem.\"\n\nAmy and Sam giggled looking at the two nice looking young men.\n\n\"I will, thanks.\"\n\n\"You will have a good time,\" Amy said slyly.\n\n\"I don't think it will, but if it looks like rain before Sunday night, I left a big tarp down there, cover everything up and then cover up the electronic igniter box. If people are going to be here, don't let them go near the fireworks and keep them from walking on the wires,\" the guy said.\n\n\"Okay,\" I said.\n\n\"We will be back Tuesday to pick everything up.\"\n\nThe guys got in the truck left. Amy and I rode back to the house.\n\n\"There are a lot of fireworks down there, some really big ones!!\" Sam exclaimed when she grabbed me.\n\n\"Amy said you two like fireworks.\"\n\n\"Yes we do!\"\n\n\"More than sex?\"\n\n\"No!!\" Sam exclaimed. \"But close!\"\n\nSam went running in the house to tell Dawn all about the fireworks.\n\n\"Will she ever grow up?\" I asked Amy.\n\n\"I hope not.\"\n\nAmy took my arm and we walked back to the den and sat in the loveseat and listened to Sam go on and on to Dawn about all the fireworks. Once Sam ran out of gas Dawn asked them if they were ready to eat. Sam had forgotten she hadn't eaten lunch.\n\n\"Oh god, I am starved!\" Sam replied.\n\nAmy and Dawn went to the kitchen to cook, Sam moved to the loveseat and straddled my hips and sat down facing me. She kissed me then leaned forward and laid her head on my shoulder.\n\n\"This weekend is going to be fun, do you know how much I love you two?\"\n\n\"I am beginning to understand Sam.\"\n\nSam pulled herself tighter to me. She was so young, all I could do was hope what were doing was right. Sam couldn't sit still long, after a few minutes she was up and trying to help Amy and Dawn but she was so wound up Dawn ran her off.\n\n\"Sam, grab a beer and take one to James, maybe that will calm you down!\" Dawn told her. Sam grabbed two beers from the kitchen and ran back and jumped and landed next to me.\n\n\"What has got you so wound up?\"\n\n\"I'm just happy!\"\n\n\"About what?\"\n\n\"About everything, this weekend, last night, the fireworks.\"\n\n\"What happened last night?\"\n\nSam took a couple of sips of beer and looked at me.\n\n\"Dawn and I had a long talk and then we had great sex! It sounded like you and Amy had a good time!\"\n\n\"Yes we did. Sam, did you have great sex last night or did you and Dawn make love to each other?\" That stopped Sam cold. She looked at me concerned.\n\n\"I made love to Dawn,\" Sam said quietly.\n\n\"I'm glad to hear that,\" I told her and took a sip of my beer.\n\nSam looked at me a minute then smiled real big.\n\n\"Did you make love to Amy last night?\"\n\n\"Yes, we made love to each other last night.\"\n\nSam leaned over and wrapped her arms around my neck and hugged and kissed me before I got her to sit again.\n\n\"James, will you make love to me?\"\n\n\"Are you ready for that?\"\n\n\"Yes I am.\"\n\n\"I am happy to hear that.\"\n\nI leaned over and kissed Sam on the cheek.\n\n\"When, tonight?\" Sam asked.\n\n\"Dawn and I have some things to discuss tonight. What if we have a special night next week, how about Thursday night?\"\n\n\"Okay, Thursday night, you better not forget.\"\n\n\"I won't. I'll have something special for you.\"\n\n\"Maybe I have something special for you too,\" Sam said with a big sensuous smile.\n\nSam calmed down and sat with me until dinner was ready. Amy and Dawn called us to the table and I led Sam to the dining room. We all ate and talked and drank some wine. Amy and Sam seemed to be in a much better mood than they had been the week before.\n\n\"Amy and Sam, James and I have to go into town tomorrow, will you two be okay?\" Dawn asked.\n\n\"Of course,\" Sam replied.\n\n\"Nancy and her girls will be here around noon to deliver the food and set some things up, will you two help them?\" I asked.\n\n\"Sure. Any more surprises coming James?\" Amy asked.\n\n\"No, that's it until Saturday.\"\n\n\"I have a question,\" Sam asked. \"Since there are not enough tents for everyone, how are we going to work out the sleeping arrangements?\"\n\n\"Any way you want,\" I told Sam.\n\nSam looked at Amy a second then started giggling.\n\n\"Is Nancy staying the weekend?\" Sam asked eagerly.\n\n\"Yes.\"\n\n\"Is she bringing the twins?\"\n\n\"Yes.\"\n\nSam started giggling again.\n\n\"This is going to be a fun weekend!\" Sam told us.\n\n\"It should be interesting,\" I said.\n\nDawn looked at me and smiled nervously.\n\n\"We'll cleanup, you two go find a movie for us to watch,\" Amy said.\n\nDawn and I went to the sofa and looked to see what we could find on the satellite, we found a good movie that started in about 30 minutes.\n\n\"I can't wait to watch you and Amy making love last night,\" Dawn said.\n\n\"It's not on the computer,\" I told her.\n\n\"Why?\"\n\n\"Amy wanted me to turn off the cameras, she really wanted it to be just me and her.\"\n\n\"I guess that is okay,\" Dawn replied.\n\n\"Sam said she made love to you last night.\"\n\nDawn turned and looked at me.\n\n\"Did you make love to her?\" I asked.\n\n\"Yes.\"\n\n\"Can we watch it later?\"\n\n\"No.\"\n\n\"Okay.\"\n\nDawn leaned up against me while we waited on Amy and Sam.\n\n+++++\n\nAfter the movie we all went to bed. Amy and Sam went in Sam's room and we went to our bedroom. We got in bed and turned off the lights and talked for an hour or so before Dawn rolled over to hold me then fell asleep.\n\n+++++\n\nFriday morning came early. Dawn was up and in the shower when I woke up. I got up and joined her; she gave me one hell of a blowjob before we finished showering. We finished getting ready and went down to the kitchen.\n\n\"The girls aren't up,\" I said.\n\n\"I think they were up all night talking, I woke up about 3:00 and could hear them still talking.\"\n\n\"Should we wake them?\"\n\n\"No, I'll leave them a note, when should we be back?\" Dawn asked.\n\n\"About 4:00 or so.\"\n\nDawn and I headed into town, stopped and had breakfast then we made our first stop. After we finished there it was about lunch time so we stopped and got something to eat before we went to the lawyer's office. We finished with him about 3:30 and headed back.\n\n\"Are we doing the right thing?\" Dawn asked.\n\n\"I think we are.\"\n\nWhen we got back to the house Sam and Amy were in the pool. I stopped and left some things in the study, Dawn went outside to check on the girls and I followed. Dawn walked up to the edge of the pool where Sam was, Sam grabbed her leg.\n\n\"Don't you pull me into the pool young lady!!\"\n\nSam laughed and let go of her leg.\n\n\"You two take your clothes off and join us,\" Amy said.\n\nWe took our clothes off and joined them in the pool. Amy walked up to Dawn and wrapped her arms around her and began kissing her passionately. No matter how many times I saw that it still turned me on. Sam swam over to me and wrapped her arms around my neck and jumped up and wrapped her legs around me.\n\n\"I know it's not Thursday, but will you fuck me,\" Sam said.\n\n\"Sam, Thursday will just be something special for just us, of course I will.\"\n\nI held onto Sam and walked out to deeper water so I could hold her up. Sam was kissing me while I walked. I reached down and ran my fingers over her pussy lips, she moaned while she continued to kiss me. My cock was hard in no time. I reached down and placed it at Sam's pussy and slowly worked it in her.\n\n\"Oh that feels good,\" Sam said. \"Just hold me tight.\"\n\nI held Sam tight while I walked around the pool. Amy had Dawn sitting on the edge of the pool and was going down on her while she stood in the pool. I stood and watched as Sam clung to me.\n\n\"Does that still excite you?\" Sam asked.\n\n\"Sam, you always excite me.\"\n\n\"I mean watching one of us go down on Dawn.\"\n\n\"Yes it does.\"\n\n\"I hope it never gets old for you.\"\n\n\"It won't.\"\n\n\"Can you carry me to one of the lounge chairs?\"\n\n\"If that is where you want to go?\"\n\nI walked to the steps as Sam hung on and walked up and out of the pool and to one of the chairs.\n\n\"Top or bottom?\" I asked Sam.\n\n\"Bottom please.\"\n\nI straddled the lounger and leaned over and laid Sam down gently. Sam let go of me and my cock slipped out. She rolled over and got on her hands and knees.\n\n\"Now I'm ready.\"\n\nI got on my knees behind her and worked my cock back in.\n\n\"Oh that is what I want!\"\n\nI started slipping in and out of Sam until she got good and slick and then got more aggressive with her.\n\n\"Oh James!\"\n\nSam began to shove her ass back to meet my thrust as I kept going. I grabbed her hips and pulled her back hard each time. I knew Sam liked it this way so I kept thrusting in and out of her. I heard Dawn moaning behind me as I continued with Sam.\n\n\"Oh James, give it to me harder!\"\n\nI gave Sam what she wanted and started jamming my cock into her in hard long strokes. She started moaning and groaning as I sped up. I was looking down at her perfect ass and watching my cock slide in and out when Sam asked me to speed up. Sam was hot and wanting it bad. I started thrusting in and out of her as fast and hard as I could. I thrust in and out of Sam for a while until I felt her pussy tighten up.\n\n\"Oh yes, I'm about to come!! Harder!!\"\n\nI shoved into her as hard as I could without knocking us both down.\n\n\"Oh yes, that's it!! I'm coming, I'm coming!!\"\n\nI felt Sam tighten up and jerk several times then she shoved her ass back and held it.\n\n\"Oh god!!\"\n\nSam jerked several more times.\n\n\"Ahhhh!!\"\n\nShe came hard, holding her ass pressed against me until she stopped jerking. Sam pulled away from me and turned in the chair and sucked my cock down her throat. Sam was rapidly working her mouth up and down the length of my cock. She grabbed my cock with one hand and began sucking on the head real hard while she pumped me rapidly. Sam knew that when she sucked on the head of my cock real hard I would come harder.\n\n\"Mmmmmmm!\" Came from Sam as she sucked and pumped.\n\n\"Oh my god Amy, I'm coming!! Eat me!!\" I heard Dawn scream.\n\n\"Oh god Sam!!\"\n\nI was about to explode. Sam stuck the tip of her tongue in the end of my cock and worked it around, that was all it took.\n\n\"Sam I'm coming!\"\n\nI felt Sam take her mouth off my cock and stroke me even harder. I looked down and watched as she pointed my cock at her face when the first shot of cum came out.\n\n\"Oh god!!\" I screamed as I felt the cum rush through my cock. \n\nSam let another load land on her face then she pointed my cock down at her tits as she pumped me hard. I jerked and dumped 4 or 5 more shots onto Sam's tits. Sam continued to pump until nothing else came out then she sucked my cock back in her mouth.\n\n\"Oh god Sam!!\"\n\nSam sucked on my cock until I couldn't take anymore.\n\n\"Stop Sam!!\"\n\nSam stopped sucking and stroked my cock gently as she looked up at me. She had cum running off her lips and one cheek.\n\n\"Sam, you or so crazy, I love you.\"\n\n\"I know.\"\n\nSam sat up and took a finger and scooped the cum on her face up then licked it off. I sat down in front of her and took my hand and spread the cum all over her breasts and covered her nipples with it. Sam moaned gently while I rubbed circles around her nipples with the cum. I pushed Sam back in the lounger and leaned forward and kissed her cum covered nipples while she moaned.\n\n\"I love it when you do that,\" Sam told me. \"Thursday, I want you to fuck me in the ass.\"\n\n\"My pleasure Sam.\"\n\nNow I had something else to look forward to Thursday.\n\nI moved up and kissed Sam for a minute then we both got up and went to the pool. Dawn was back in the water kissing Amy deeply when Sam snuck up behind them. Sam reached around Dawn and hugged her and her sister. Dawn turned and kissed Sam while Amy was still holding her.\n\n\"Umm, you taste good Sam.\"\n\nSam kissed Dawn back then kissed Amy then the three of them hugged each other for a minute.\n\n\"James join us,\" Dawn said.\n\n\"That's okay, I'm enjoying the beauty of my three girls right now.\"\n\n+++++\n\nWe all showered together outside then went in the house to get something to drink.\n\n\"What are we doing for dinner?\" Dawn asked.\n\n\"It's Friday night, you three go put on something revealing and trashy and will go to the pizza place and you all can tease the college boys!\" I told them.\n\nSam and Amy laughed and rushed upstairs while Dawn and I trailed them. I put on some shorts and shirt and Dawn pulled just her pair of old, ratty and really short cutoffs that were partially split up the sides on then an old t-shirt that I could see her nipples through.\n\n\"Is this okay?\" Dawn asked.\n\n\"Perfect!\"\n\nAmy and Sam walked in the bedroom ready to go. Sam had on a skin tight pair of very short white shorts that exposed her cheeks and Amy had her short baggy cutoffs. Sam had slipped on a skimpy halter that barely covered her nipples. I just looked at Amy. She had on this old t-shirt she wore around the house that had the neck and collar ripped out and was torn down between her tits.\n\n\"Looks like we are ready to go!\" I told them.\n\nWhen we arrived at the pizza place, it was crowded. It looked like all the college guys were there with their dates. The conversations got noticeably quieter as we all walked through the restaurant to an empty table in the middle of the room. I always enjoyed it when other people paused to look at my three girls, even when they looked trashy. They were in a silly giggling mood while we ate.\n\n\"Are you enjoying your pizza?\" Dawn asked me with a big smile.\n\n\"Very much, and I am enjoying the three of you.\"\n\n\"You really like it when we show a lot of skin don't you honey?\"\n\n\"Yes I do. I know you have been spreading your legs so those guys can see your pussy.\"\n\n\"Yes I have, is that okay with you?\" Dawn asked with a big smile.\n\n\"Yes it is honey, I like it when other men want your beautiful pussy and can't have it.\"\n\n\"Emmm, I have been getting wet wanting a big cock.\" I watched as Dawn slid her hand down, I knew she was slipping it between her legs and probably rubbing her pussy.\n\n\"I'm sure one of those college guys that are watching would have something nice and big for you honey.\"\n\n\"Emmmm.\"\n\n\"You're rubbing your pussy while they watch aren't you?\"\n\n\"Yes...\"\n\n\"I bet you have your fingers in your pussy don't you honey?\"\n\n\"Yes...\"\n\nI stared into Dawn's eyes for a few minutes as I watched the expressions on her face change, knowing she was working her pussy. I glanced over at the table of football players and three of them were watching Dawn intently.\n\n\"When you finish, look over at them and slip your singers in your mouth.\"\n\nDawn giggled. I looked at Amy and she smiled really big, she had been listening to us. I had heard several frustrated girlfriends chastising their dates for looking at my beauties. The table next to us that was occupied by six college guys that looked like they were probably football players all kept looking at the girls as they ate and drank too much beer. \n\nDawn was sitting across from me. When she had gotten up a few times to refill our drinks, she made sure her chair was turned and her legs were spread so these guys could get a good look at her pussy each time she got up. \n\n\"We need more beer, since Dawn is busy I will get it,\" Amy said.\n\nAmy got up and acted like she stumbled and leaned against a couple of the college guys.\n\n\"Oh shit, maybe I don't need any more beer!\" She said as she put her hands on the shoulders of one of the guys.\n\nAmy giggled and moved on to the bar. I watched her as she got two beers and headed back. She was giggling and staggering as if she was drunk. When she got near the table she stumbled again and ended up sitting in the lap of one of the college guys and laughing.\n\n\"Oh sorry, excuse me!\" Amy said and giggled.\n\nI watched the drunk football player she was sitting on run his hand up and grab Amy's almost exposed tit.\n\n\"Let me help you!\" He said.\n\n\"I think you are!\" Amy laughed out.\n\nI watched a few minutes as Amy sat in the guy's lap while he squeezed her tit. Amy was sipping her beer while he squeezed and rubbed.\n\n\"I think I better get back to my table, thank you for catching me!\" Amy teased.\n\nWhen she went to stand the guy grabbed the edge of her shirt and pulled it down over her nipple and exposed it.\n\n\"Opps!\" Amy said and got free. She sat back at our table and handed Dawn the other beer. Dawn pulled her hand back to the table and slipped her fingers in her mouth and slowly pulled them out before she took her beer. Amy rearranged her shirt so her nipple was covered. Several of the guys were moaning and groaning as they watched the two of them.",
        "We stayed about 30 more minutes eating our pizza then headed for the SUV.\n\n\"Give me your keys,\" Dawn said.\n\n\"You're not driving!\"\n\n\"I know.\"\n\nDawn dug my keys out of my pocket and gave them to Sam.\n\n\"Sam drive,\" she said.\n\nWhile Sam was getting in the driver's seat Dawn got in the back.\n\n\"Come fuck me,\" she said.\n\nI was crawling in the back with Dawn as I watched her start taking her clothes off. Amy got up front with Sam. As soon as I got the door closed, Dawn was pulling my shorts down.\n\n\"You do get hard watching us!\" Dawn said as she grabbed my growing cock.\n\nShe bent over and sucked my cock as Sam got to the road. She had me hard and wet before she climbed in my lap. Dawn grabbed my saliva covered cock and started it into her pussy then slid down all the way.\n\n\"Emmmm. I really wanted one of those football players cocks! That big one was watching me slide my fingers in and out of my pussy!\"\n\n\"I know he was,\" I said as I grabbed Dawn's hips and yanked her down on my cock hard.\n\n\"Ahhh!\"\n\n\"You want a college guy's cock in you!\" I said as I yanked Dawn down hard on my cock again.\n\n\"Ahhh!! I bet it would be good. When we come back, I'm going to bring one out to the truck and fuck him!\" I jammed my cock into Dawn harder.\n\n\"Ahhhhhh!! I bet you would like to watch him fuck me wouldn't you honey!\"\n\nI grabbed Dawn's hips hard and yanked her down onto me as I jammed up into her four or five times.\n\n\"Oh fuck!!\"\n\nDawn wrapped her arms around my head and pulled it into her tits as I jammed into her harder and harder.\n\n\"Oh yes!! A couple of college guys would feel so good!!\"\n\nI had a tight grip on Dawn's ass and was yanking her down on my cock hard. I kept this up for 20 minutes before Dawn squirted all over me.\n\n\"Oh fuck yes!! More!!\"\n\nI saw Sam getting off the interstate to head for the house. Dawn and I were both wet now so I kept working her up and down hard on my cock.\n\n\"Oh fuck! Yes, yes, yes!!\" Dawn kept screaming. \n\nBy the time we had stopped at the front door, Dawn was coming hard again and screaming as I worked her pussy on my cock. She screamed one last time and shook all over and came hard and squirted all over us again.\n\n\"We're home!\" Sam said then laughed.\n\nDawn fell against me for a minute before she moved to get out of the truck. I picked up our clothes and followed her to the door. When we got in the house I grabbed her and picked her up and carried her to the sofa and got her up on her hands and knees. I slipped my cock back into her and pounded her pussy for about 10 minutes while she screamed. She came hard one more time and I pumped her full of cum. When I was finished she collapsed on the sofa.\n\n\"You still want some young college cock?\"\n\nDawn looked at me and smiled.\n\n\"Maybe!\"\n\nI leaned over and grabbed both of her nipples and pinched them hard.\n\n\"Ow!! That was good honey.\"\n\n\"You seemed to enjoy it.\"\n\n\"Oh my...what time is everyone coming tomorrow?\" Dawn asked.\n\n\"I told everyone to get here in time to eat lunch at noon, so they will start showing up around that time. Sam come with me, I need your help.\"\n\nSam followed me into the study and I handed her a large sign for the front door.\n\n\"Go stick this on the front door in case anyone gets here early.\"\n\nSam looked at the sign and started laughing.\n\n\"Okay!\"\n\nSam walked back into the den and stopped to show the sign to Amy and Dawn.\n\n\"Party-time nudist colony!\" Dawn remarked.\n\nThe sign said 'Party-time nudist colony, please remove clothes before entering!'\n\n\"Sam and Amy, your job in the morning is to not let anyone through the front door until they have removed all their clothes and to confiscate all the clothes and pile them in the downstairs bedroom.\"\n\n\"That will be fun!\" Amy replied.\n\n\"Did you tell Nancy about this?\" Dawn asked.\n\n\"Yes.\"\n\nSam opened the door and stuck the sign up while she giggled.\n\n\"I can't wait!\" Sam exclaimed as she closed the door.\n\nWhile Sam was standing at the door she kicked off her shoes then removed her shorts and halter top leaving them lying in the floor.\n\n\"You read the sign sis!\"\n\nAmy stripped off all her clothes and threw them at Sam.\n\n\"Okay!\"\n\n\"That's better, no more clothes until after everyone leaves Monday!\" Sam told us.\n\nWe all grabbed a beer and sat in the den talking. My cell phone rang a few minutes later, it was Linda.\n\n\"Hi Linda.\"\n\n\"Are you getting ready for the party?\"\n\n\"Yes, are you ready?\"\n\n\"I am now, thinks for last weekend.\"\n\n\"Did that answer some of your questions Linda?\"\n\n\"Yes it did. What time do you want me to be there?\"\n\n\"I'll let you decide, but let me tell you what is going on first. We have a big sign on the door that says nudist colony, remove clothes before entering.\"\n\n\"Oh.\"\n\n\"You have to remove all your clothes and you don't get them back until Monday when you leave.\"\n\n\"James, that is crazy!\"\n\n\"Too crazy for you?\"\n\n\"No, you are just crazy!\"\n\n\"Do you want to be the first one here and wait for everyone to arrive a few at a time, or would you like to be the last here and make a grand entrance?\"\n\n\"James!\"\n\n\"What would you like?\"\n\n\"Have you told everyone I am coming?\"\n\n\"No, I want them to all be surprised by your beauty.\"\n\n\"James, you are so sweet. Do you think I should surprise everyone?\"\n\n\"Yes I do.\"\n\n\"Then I will come last, what time?\"\n\n\"About 1:00.\"\n\n\"Okay!\" Linda was laughing. \"No clothes then?\"\n\n\"None.\"\n\n\"I will see you at 1:00 Saturday!\"\n\n\"I am looking forward to it.\"\n\n\"I know you are!\"\n\n\"Bye.\"\n\n\"Is she going to be okay?\" Amy asked.\n\n\"She will be fine, but I want you and Sam to keep an eye on her.\"\n\n\"I plan on taking care of her,\" Amy said with a big smile.\n\n\"I have a surprise for everyone,\" I said.\n\n\"No more surprises,\" Dawn said.\n\n\"You'll like this one, Jill and Mike will be here this weekend.\"\n\n\"They made it in?!\" Dawn asked.\n\n\"Yes, he is finishing up some work in town and they will be here about lunchtime, they are staying with us for the weekend before they go home.\"\n\n\"Did you tell them what is going on?\" Dawn asked.\n\n\"I told them we were having a party.\"\n\n\"They may not be comfortable.\"\n\n\"They will have to get comfortable!\"\n\n\"I don't know James.\"\n\n\"This will be fun!\" Sam said.\n\n\"I think they will have fun,\" Amy added.\n\n\"I'm exhausted and ready for bed,\" Dawn said.\n\n\"Sounds good, I'll have to be up early in the morning,\" I told everyone.\n\n\"Hey guys,\" Amy asked. \"Can we sleep with you tonight?\"\n\n\"Sure, if you will let me get some sleep!\" I replied.\n\nAmy and Sam giggled.\n\n\"Okay...for now,\" Amy replied.\n\nThe four of us went to the bedroom, Sam and Amy climbed into bed first and got in the middle, Dawn got in next to Sam and I lay down next to Amy. I turned off the lights and rolled toward Amy and wrapped my arm around her, a few seconds later Dawn had done the same with Sam. Dawn's hand found my hand and she took it and held it."
    ],
    "authorname": "drmac100",
    "tags": [
        "lottery",
        "james",
        "dawn",
        "amy",
        "sam",
        "lind",
        "red head",
        "party"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/life-after-the-lottery-ch-39"
}
{
    "title": "Texas Trio Pt. 02 - Becky's Debt Ch. 33-34",
    "pages": [
        "REMINDER: I write long stories. Many chapters don't have naughty bits, but those that do will be way more fun if you read the others, too! Also, although TT2 is a stand-alone novel, it takes place in the same family as Texas Trio, so you might want to read that one first! --Stefanie\n\nNOTE: I don't usually do this, but I feel the need for a different kind of reminder, too: in Chapter 27, Jeremiah and Colt confronted Brody with the results of their investigator's report, which included his partnership in the shipping company \"Easton &amp; Almsted, San Francisco, Hong Kong, Hawaii, and Calcutta.\" Also, Big Bob hates Clancy. Happy reading!\n\n\u2014:\u2014:\u2014:\u2014:\u2014:\u2014 Chapter 33 \u2014:\u2014:\u2014:\u2014:\u2014:\u2014\n\nFour days later, everything went to hell.\n\nColt, Jem, Clancy, and Lily were at Big Bob's paddock waiting for the veterinary doc to arrive and have a look at a tear on Bob's hind quarter that wasn't healing up properly.\n\nClancy was standing around the corner of the barn where Bob couldn't see him, but the bull's nostrils were flaring, and he snorted, looking around.\n\n\"Clancy, you better head back over to the stable,\" Jem said, his voice deliberately calm and even. \"He knows you're here somewhere.\"\n\n\"No, Papa!\" Lily exclaimed.\n\n\"Daddy, down.\" She patted Colt on the head, and he set her on her feet.\n\nShe walked to the bottom rail of the paddock\u2014Jem and Colt were standing a couple of yards away from Big Bob's fence so as not to piss him off\u2014leaned over it, and called the bull.\n\n\"Bob&#x2011;Bob!\"\n\nShe tried snapping her fingers, but she just didn't have the hang of it yet.\n\n\"Bob&#x2011;Bob,\" her fathers' 2400&#x2011;pound Hereford bull, snorted and went to Lily, snuffling her ear and dropping his head almost to the ground so she could scratch his cheek.\n\n\"Bob&#x2011;Bob, you be good,\" she whispered, patting him on the side of his head.\n\nBob&#x2011;Bob snuffed her ear again, gave her a little head&#x2011;butt\u2014Lily shrieked with laughter when it almost knocked her down\u2014and went to lay in the shadow of the barn wall. He was a dozen feet from Clancy, and could sure as hell smell him from there, but Bob was happy as a cat in a puddle of milk.\n\nLily patted Colt's knee, and he lifted her back to his shoulder, exchanging a look with Jem. \"It doesn't get any less amazing over time, does it?\"\n\nJem shook his head in wonder, staring at their magical daughter, who could charm any beast that walked or flew. Maybe some that swam, too: they hadn't tried her out on fish and otters yet.\n\nA rider caught his attention, and Jem squinted. \"That's not the doc.\"\n\nThey left the paddock and walked to meet the stranger, a tall, well&#x2011;dressed man on a stallion worth at least as much as Big Bob. The man dismounted, draping his reins around a stanchion and removing his hat. \"Gentlemen. Miss.\" He half&#x2011;bowed to Lily, who smiled and greeted him with a regal nod of her head.\n\nJem stepped forward, and the man stopped with his mouth open, ready to speak. They stared at each other for a long, quiet minute, and then Jem took another step, snapping his fingers\u2014he did it better than Lily. \"I have it,\" he said. \"Your sister married my cousin.\"\n\n\"Yes!\" the stranger said with a wide grin. \"I would have gotten it soon enough! It's Wilson, right?\"\n\nHe extended his hand and they shook. \"I'm Graham Almsted.\"\n\nJem was still shaking hands when he turned to Colt, his face pale. \"Oh, Christ.\"\n\n\"Yup,\" Colt agreed.\n\n\u2014:\u2014:\u2014:\u2014:\u2014\n\nThey didn't have a chance to warn Almsted or even to apologize for Jem's rude oath, because Catherine came out on the porch and beckoned them in for breakfast. Of course Mr. Almsted was invited to join them.\n\nIn the dining room, Mr. Almsted met the rest of the family, minus Caleb and Clancy. Jem introduced him as sort of a second cousin, though they hadn't seen each other in many years.\n\nBecky was the last to arrive, rushing in from taking a plate up to Louella's cabin, because Louella had been feeling poorly this week. Mr. Almsted was introduced, but straightened from his bow wearing a puzzled expression. \"Miss Connor . . . .\" he mused aloud.\n\n\"Yes?\" she asked politely, seating herself next to the newcomer.\n\n\"Miss Connor, I believe we've met before,\" he said as he sat.\n\nEveryone at the table turned to stare, except Rebecca, who thought he was flirting. She'd been getting that kind of attention since she turned twelve and no longer paid it any mind. \"Oh?\"\n\n\"And I believe you owe me a set of oars.\"\n\nBecky's mouth rounded into a perfect O, and it was her turn to stare. \"Oh, no, don't tell me\u2014\"\n\nGraham laughed, as delighted with her reaction as he was entranced with her beauty.\n\n\"Oh, yes.\" He nodded. \"You definitely owe me a set of oars.\"\n\nBecky covered the lower half of her face with her napkin and laughed for so long Catherine began to worry that she and Mr. Almsted had taken leave of their senses. When she finally got herself under control and wiped the tears from her eyes, Becky and Graham explained the story to the rest of the table, who also found it amusing, though not quite as amusing as the storytellers did.\n\nBecky was one of several school&#x2011;mates of Graham's youngest step&#x2011;sister. A \"whole passel\" as Graham said, of schoolgirls took turns summering at various family estates along the coast of New England. Graham's parents and their Newport estate had taken a turn one summer when Becky and her friends were about ten. The girls spent a good part of the summer torturing the older boys staying at the estate, who were all college men.\n\n\"We were so full of ourselves and our newfound importance, and here were a gaggle of tiny girls making a mockery of us every chance they got. They beat us at croquet, cheated at card games, stole all our socks, and told every girl I brought home that they were my daughters! I got so tired of explaining them that I began to take my dates on picnics to an island in the bay. Until the day they rowed out, stole my oars, and I had to swim back to get a sailboat and go rescue my girl\u2014who was no longer my girl by then!\"\n\nBecky giggled through the whole story and begged his forgiveness at the end, promising to send him a check reimbursing him for the oars as soon as he wrote out a receipt for her. (\"My accountant, you know.\")\n\nGraham grinned from Becky to Catherine to Jem. \"You know, I couldn't imagine what was keeping my partner in Texas all these months. Meeting your charming wife and sister has certainly solved that mystery.\"\n\nJem closed his eyes. This was very bad.\n\nCatherine was staring at him when he opened his eyes.\n\nVery, very bad.\n\n\"Your partner, Mr. Almsted?\" Cat asked, doing an excellent job of hiding a whole passel of suspicions from their guest.\n\n\"Yes, it's quite a coincidence, isn't it? That my partner should land serendipitously on the ranch of my cousin, who is also the brother of the thieving imp who stole my oars. I didn't make the connection when I got the letter, but I don't believe I knew your husband was in this part of the state.\"\n\nHe looked to Jem for an explanation of his most recent change of address, but Catherine intervened. \"I'm sorry, what letter, Mr. Almsted?\"\n\n\"I got a letter from my partner saying he'd be staying here for a while, and I came down to check things out for myself.\"\n\nBecky had also sensed something amiss with Colt and Jeremiah by then. She lowered her fork. \"What did you say your partner's name is, Mr. Almsted?\"\n\nCat was staring at her husbands, who both sat absolutely still, not meeting her eyes.\n\n\"Broderick Easton.\"\n\nBecky set her fork down very carefully. \"Your . . . partner?\"\n\n\"Yes, Easton &amp; Almsted. We have, well, a dozen or so ships running between San Francisco, China, and India, plus some properties around town, and a dress shop for ladies.\" Graham laughed. \"Don't ask me how we got into that business.\"\n\nGraham suddenly realized he was laughing alone and looked around the table. Everyone else seemed to have paled.\n\nBecky pushed her chair back slowly and stood. The men also rose.\n\n\"Excuse me, Mr. Almsted. I seem to have developed a headache. Thank you for sharing such wonderful memories.\" She smiled sweetly and left the room.\n\nCatherine stared at her husbands, who were still avoiding her eyes.\n\nColt stayed on his feet and announced to the table. \"I'll send Teddy down to fetch Easton.\"\n\nHe turned and muttered to Jem, \"If Becky didn't take a shotgun to him yet.\"\n\nJem finally looked at Catherine, alarm plain in his eyes. Her calm reassured him that Becky probably wouldn't go to that extreme. He looked away and just as quickly back again. Catherine was thinking about the shotgun, too, he realized. Jem blanched.\n\nVery, very bad.\n\n\u2014:\u2014:\u2014:\u2014:\u2014Chapter 34\u2014:\u2014:\u2014:\u2014:\u2014\n\nFor the first few days after Graham's arrival, Becky excused herself and retreated to her room as soon as Brody arrived to visit with his partner and the family after dinner. After three days, everyone could see that Brody was starting to panic, and Colt took him for a walk by the paddock, surprising even Jeremiah.\n\nThey walked in silence down the hill and planted their elbows on the top rail, looking at a mare waiting to be shod rather than at each other.\n\n\"I can't let you go upstairs and drag her out,\" Colt said.\n\nBrody's drew his head back, alarmed that Kendall had read his intentions so accurately.\n\n\"She's got to work through it on her own, and part of that is gonna be difficult for you\u2014'sfar as I can tell, it's s'posed to be difficult for you. Not that they mean it that way, but women know when they're driving us crazy, and sometimes they think we deserve it.\" He paused. \"I haven't spoken to her about it, but I believe just now, Becky thinks you deserve it.\"\n\nNeither of them spoke for a while.\n\n\"She has to see me.\"\n\n\"Nope.\"\n\n\"Well, eventually.\"\n\nNot contradicting Brody's optimism, Colt looked sideways at the other man. \"I think you're probably right about that, but\u2014\"\n\nBrody looked over, his face haggard.\n\n\"\u2014'eventually' will probably be a lot longer than you'd like it to be.\"\n\n\u2014:\u2014:\u2014:\u2014:\u2014\n\nThree times while Graham was in residence at the KCW, Cat invited Brody to dine. She alerted her younger sister first, but she couldn't refuse to invite their house&#x2011;guest's business partner to dinner. Becky appreciated the warning, but told Catherine she needn't have bothered: Brody Easton's presence didn't matter one whit to Rebecca Connor.\n\nCatherine managed not to snort until after Becky left the room.\n\nShe was very careful not to defend Brody's behavior, but she admitted to Nanny that she sympathized with him. She'd seen it herself, back in Galveston. A new man would appear on the social scene, unattractive, not in the least charming, but as soon as knowledge got around that the man in question had a healthy bank account, eligible young ladies began to find him all but irresistible. She herself had been a very plain teenager, and she'd been courted for her fortune repeatedly\u2014before Colt and Jeremiah arrived, of course.\n\nSo, while she couldn't abide a liar, she could see why Brody had lied. She thought Becky would forgive him, sooner or later, but she'd be solidly neutral in the mean&#x2011;time. Not when it came to her own husbands, of course, who were sleeping alone these days. She couldn't abide a liar, and not telling Catherine about Brody's fortune had been lying by omission.\n\nIn the drawing room\u2014as the saying went\u2014she was all smiles and sweetness to Colt and Jeremiah. In front of the servants and children, she was a perfect model of politeness. In private, she was ice. She slept in her own bedroom and pretended to be indisposed whenever one of her husbands knocked.\n\nMiraculously, Colt and Jem hadn't taken it out of Brody's hide: they'd bonded over the perfidy of women and were getting along with their potential brother&#x2011;in&#x2011;law like a house&#x2011;afire.\n\nDinner was an uncomfortable affair for all the men involved, save Clancy.\n\nThe awkwardness of being at table with Becky pointedly ignoring Brody's presence didn't seem to bother the ladies. Nanny wouldn't eat with them when they had \"real\" company, but Becky and Catherine had a fine time. Becky had forgiven her brothers for not telling her about Brody's fortune, and talked to everyone as though Brody wasn't there. Catherine was still saving her rancor for private times and spoke pleasantly to her husbands, as well as Brody and Graham.\n\nBrody stayed for a few minutes after dinner the first time, but after the second dinner, excused himself before brandies, and begged off Cat's third invitation altogether. Whether it was an act or not, seeing Rebecca so carefree and happy was too painful to be borne. He banished himself to the land of beef and beans for the duration of Graham's stay.\n\n\u2014:\u2014:\u2014:\u2014:\u2014\n\nGraham spent two weeks on the KCW, catching up with Jeremiah, riding around the ranch with Becky and Clancy, and letting Brody show him the ropes. Literally.\n\nFor a city boy, Graham turned out to be a decent cowhand, Jackson admitted. Even Clancy liked the man. Caleb, to everyone's surprise, talked to Graham. They rode the riverbanks and spent a night up on the mesa, hunting elk. Graham came back sounding as though he'd decided to take to the trail, riding herd for a living.\n\nHe later said his time in Texas was the most interesting trip he'd ever taken.\n\nHis partner's letters had prepared him for the unorthodox, three&#x2011;way marriage, but not for the surprise of Jeremiah Wilson's participation. Graham had heard nary a rumor from their East Coast antecedents suggesting it, which told him Jem must be completely divorced from his family back home. From what Graham knew of Wilson the elder, he understood completely. Graham also sympathized with his partner's fondness for the family and for the Connor women in particular. He hadn't been prepared to find such wit and erudition in such a wild place, nor such beauty.\n\nHe couldn't resist the opportunity to become acquainted with his partner's future bride.\n\nBecky showed him her cliffs, and told him some of the same things she'd told Brody\u2014that Texas had once been at the bottom of the ocean and that there were fossils of fish in the rocks. She also said she believed she knew how to find oil. Graham was the first person Becky ever told about her theory. She'd heard so much from Brody about his \"friend,\" that she felt rather as though Graham was a third older brother.\n\nHe was a good listener, too.\n\nShe made him laugh telling him about some of the many cockamamie methods drillers had used in their search for oil, and then she told him her own theory. \"If you look at the cliffs north of here, you can see fine lines of bituminous coal. Miners follow that band of black where it disappears down into the earth. In Titusville and California, they're finding oil between layers of sedimentary stone. Why shouldn't it work the same way? If we find the right kinds of rocks in conjunction,\" she concluded, \"why shouldn't we be able to follow them into the earth and find oil?\"\n\nGraham wasn't a scientist, but he saw several issues with the theory. \"Why wouldn't the oil appear above&#x2011;ground then? Between the same kinds of rocks?\"\n\n\"Well, sometimes it does appear above&#x2011;ground, in seeps. Sedimentary rock is porous, though. A puddle won't stay on the surface, it will drain away through tiny holes in the rock. I think the seeps are from above, not below\u2014oil that ran downhill through layers of limestone or sandstone at higher elevations and pooled there, or perhaps seeps are an indicator that the ground below has reached its saturation point.\"\n\nGraham could see what Brody saw in Becky's person and ebullient personality and told him so later.\n\n\"Those gold eyes of hers sparkle when she talks about rocks\u2014rocks, for God's sake!\u2014and she gets so excited she doesn't even look where she's going. Clancy had to stop her from falling into the creek at least twice while she was backing up, staring at the cliffs overhead.\"\n\nGraham didn't notice his partner's jaw clenching and went on enthusiastically enumerating Becky Connor's charms. \"And those theories of hers\u2014I don't know anything about geology or natural history, but she could talk a college professor into his grave, I swear.\"\n\nThe men were walking on the ridge above the eastern boundary of the ranch, overlooking the river to the northeast and parts of several pastures nestled in the nooks and crannies of the valley below. Brody grabbed Graham's elbow and echoed his friend's last words as he began. \"I swear, Graham, if you think to cut me out\u2014\"\n\nGraham shouted with laughter, then sobered and took a step back when he saw the storm gathering in Brody's eyes. \"Partner,\" he said seriously, \"I wouldn't do that.\"\n\nBrody slowly relaxed, and Graham continued, \"She's a beautiful young lady, and I can certainly see why you love her, but she's far too intelligent for me.\"\n\nBrody smiled slightly, looking west across the valley to the cliffs Becky loved so well.\n\n\"A woman like that . . . she won't be an easy woman to live with, you know.\"\n\nBrody didn't answer.\n\n\"I've been calling on Sally Merritt for a few months now, anyhow, pard,\" he said, trying out a Texas twang. \"She'll make a fine wife, and it's time I settled down, too. Have to produce some offspring to shepherd the familial fortune when I'm gone, now, don't I?\"\n\nRiding back to the ranch&#x2011;house alone after leaving Brody at that repulsive bunkhouse he'd been calling home, Graham laughed softly to himself. Brody sure had it bad for Rebecca Connor. Up on the ridge, he'd been sure he was about to get clobbered. Graham shook his head. He'd never thought to see his partner crazed with love. Lust, maybe . . . .\n\nBriefly, Graham wondered if Brody had tried out his \"hobby\"\u2014as he called it\u2014with Becky. He dismissed the idea immediately; Miss Connor was far too refined and ladylike to tolerate anything like that.\n\n\u2014:\u2014:\u2014:\u2014:\u2014\n\nGraham departed with an open invitation to visit the KCW, after pressing the family to visit him in San Francisco. \"I'll send you a wedding invitation,\" he said, \"if Sally consents to have me!\"\n\nThe ladies went inside, leaving Colt and Jem staring after him.\n\n\"Yeah, they'd loooove me in San Francisco,\" Colt said.\n\n\"All three of us,\" Jem concurred, referring to their marriage. \"You could pretend to be my valet again.\"\n\nHe ducked, but Colt's fist connected solidly with his shoulder. Jem laughed even as he massaged the pain away.\n\nThen they went inside and prepared for the fireworks to start.\n\n\u2014:\u2014:\u2014:\u2014:\u2014:\u2014:\u2014\n\nNOTE: I'd love to know if the reminder at the beginning was useful or not . . . I wasn't sure the name of Brody's partner would ring any bells, and I didn't want y'all to have to go scrambling back trying to figure out why Brody was in trouble. Good? no good? eh? As usual, don't forget to vote, and check out my bio for ETA on upcoming chapters (Lit readers are about four-fifths of the way through the story now), and progress on TT3! \n\nOOPS, another PS: it's not at the top of my to-do list, but Graham's story is in the works, also! Love you guys!! \u2014 Stefanie"
    ],
    "authorname": "SteffiOlsen",
    "tags": [
        "cowboy",
        "historical romance",
        "smart women",
        "grammatically correct",
        "finished",
        "betrayal",
        "maledom",
        "family saga",
        "ranch",
        "frontier"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/texas-trio-pt-02-beckys-debt-ch-33-34"
}
{
    "title": "Succubus Summoning 213",
    "pages": [
        "Phil had always hated exams. It didn't seem to matter how much revision or prep he did, or how well he knew the subject. He'd sit down, stare at the question sheet and then his mind would go blank, or worse, a million different facts would start careering around inside his head like drunken dodgem cars. And that was for normal non-daemon-world exams. Here, at Wargsnouts, if you failed a test there was a chance of dying or worse.\n\nPhil didn't even know what the test was on. The Scrote had neglected to inform his students. Phil shuffled through his notes. Hellscape Topology... Rites and Rituals... Extra-Dimensional Daemonology... anything? It was impossible.\n\nPhil was surprised when Darvill breezed up to him and spoke. The other student had plenty of cause not to be friendly with him, when you considered it was his succubi that were responsible for killing Darvill's friends. Sort of.\n\n\"I wish I knew what this test was about,\" Phil said. \"I heard something about attunement, but that could cover anything we've studied in the last year and a half.\"\n\nDarvill didn't seem to be bothered about it. Or the upcoming exam. Darvill was the sort that didn't seem to get fazed by anything.\n\n\"We're on the fast track because we contracted our first daemons earlier than most other students. I imagine The Scrote wants to check we understand what those contracts mean.\"\n\nThat was fine and all that, Phil thought. He shuffled miserably through his notes.\n\n\"I was kinda hoping we'd be taught this before they tested us on it,\" he said.\n\n\"Daemonic contracts are the test,\" Darvill said. \"Look at the ones that came through.\"\n\nPhil looked at the members of staff Darvill pointed to and didn't understand. They were a mismatched bunch. Cartifax Brion Jacks could pass for a P.E. teacher. High Magus R. L. Conley looked as though he'd just stepped out of an old horror movie. There was no pattern, no connection Phil could see.\n\nWas this something Phil was supposed to know? Some lesson he'd missed?\n\nEven Verd\u00e9 seemed amused by his bafflement.\n\n\"It's not his strongest suit,\" she responded to a question Darvill asked her.\n\nEveryone seemed to know more than Phil.\n\nOne of The Scrote's succubi, resplendent like a star showgirl, opened the door and looked around the room. For one heart-stopping moment Phil thought it was his turn, but then the succubus called out Darvill's name instead.\n\nThat gave Phil another half hour to shuffle through his notes in a last-ditch effort to cram for a test he didn't have the slightest clue about. He wondered if it might have been better if the succubus had called out his name instead, if only to get this damn exam over and done with. And now he'd mixed his notes up. They were an incoherent jumble. He didn't think this extra half hour or so was going to change anything.\n\nHe lifted his head and turned to Verd\u00e9. \"Hey wait. Darvill spoke to you directly.\"\n\nWhen Phil had first met Darvill, the other student had ridiculed the notion of talking to other warlock's daemons.\n\n\"Yes,\" Verd\u00e9 said. \"It's been quite pleasing to observe his personal growth. There's a lot of promise there. I think he'll develop into a fine warlock.\"\n\n\"You sound like you'd rather have been summoned by him instead of me,\" Phil said.\n\nVerd\u00e9 laughed. \"Oh no. We're perfectly happy with the master we have.\"\n\nShe rested her head on Phil's shoulder and his nose was filled with the scent of fresh meadow flowers. His cock stirred in his pants.\n\nGreat. As if it wasn't difficult enough to concentrate already.\n\nPhil's last-minute cramming was going so badly he was even glad of the interruption when another fellow student approached him. It was Adriana Mayall, but Phil had to do a double take as she'd changed so much since the last time he'd seen her. The skinny mop with a pale face hidden behind scraggly curtains of blonde hair was gone. Instead Phil found himself looking at a pretty young woman dressed very neatly in a business suit as if she was about to take an interview in the city. Even her posture was different. Phil hadn't realised it before, but she was taller than him when she stood up straight. There was an easier smile on her lips and she actually looked at Phil while talking to him rather than staring at the floor.\n\nHer imp, Mr Buggeritall, was still present. He sat on her shoulder and puffed away on a foul-smelling stogie. He was different from before in that he was no longer naked. Like Adriana he was dressed in a suit right down to a miniature tie. Okay, not everything was different. He still leered at Verd\u00e9 like a dirty old lecherous uncle.\n\n\"You look different,\" Phil said.\n\nAdriana shrugged. \"They told me there was no way to get rid of him, so we've come to an arrangement.\"\n\n\"She stops being a whiny little bitch feeling sorry for herself all the time and I stop embarrassing her in public,\" Mr Buggeritall said.\n\nAdriana gave a little roll of her eyes that indicated she was not that far removed from the awkward girl she'd been before, despite her drastic change in appearance.\n\n\"Don't be like that, toots,\" the imp said. \"It was for your benefit. I did it to toughen you up.\"\n\nAdriana gave Phil a goofy little smile. \"It is better than before.\"\n\nThe imp stood up and puffed out his chest. \"I'm her personal trainer now.\"\n\nAdriana suppressed a giggle. She looked down at Phil's notes.\n\n\"Revising for Magus Stine's test?\" she asked.\n\n\"Yes,\" Phil replied. \"Have you already taken it?\"\n\nAdriana nodded.\n\n\"What's it on?\" Phil asked.\n\n\"It's odd,\" Adriana said. \"Magus Stine wasn't present for the test, nor were any of the staff. It was just his succubi, three of them. They asked me some fairly straightforward questions about my background and Mr Buggeritall. I thought they were trying to put me at ease before the test began, then they told me it was over and I was fine.\"\n\nShe shrugged.\n\n\"Maybe after all the recent deaths, accidents and students going missing, they're taking some extra precautions to try and keep us safe.\"\n\nMr Buggeritall suddenly moved from Adriana's right shoulder to her left.\n\n\"Oi, what are you up to, Greenie?\" he asked Verd\u00e9. His prominent lower jaw jutted out like a bulldog's.\n\n\"I thought I saw a little bit of fluff on her arm,\" she said, all innocence as she withdrew her hand.\n\nMr Buggeritall eyeballed her.\n\nA spark of mischief lit up Verd\u00e9's green eyes. \"You can watch,\" she said. \"I'm sure you'll enjoy the show.\"\n\nMr Buggeritall considered it...\n\n...but not for very long.\n\nHe jammed a thumb against his chest. \"The only one that gets to mess with toots is me,\" he said. \"We're going to go far together.\"\n\nAdriana gave an apologetic smile for her imp's antics, but there was none of the desperation Phil had seen before. It was as she'd said\u2014she'd accepted it and come to an accommodation with the noisome imp's presence.\n\n\"You know it has to happen at some point,\" Verd\u00e9 said.\n\n\"It will... when she's ready,\" Mr Buggeritall said with a determination that belied his tiny uncouth form.\n\nThe door to the test room opened and Phil's name was called out.\n\n\"I wouldn't worry,\" Adriana called after him. \"I'm sure you'll be fine.\"\n\n\"Another one with promise,\" Verd\u00e9 said as she and Phil walked to the test room. \"Although she still has a long path to walk.\"\n\nPhil was more concerned about his path coming to an end right here. He was looking at the succubus standing next to the open door and feeling anything but fine. Butterflies fluttered in his stomach and random facts and pieces of information swirled through his head in a great impenetrable swarm.\n\nPhil really really hated tests.\n\nHe entered the room and saw it was as Adriana had described\u2014the only people in the room were three of The Scrote's succubi. With a sinking feeling Phil recognised the one sitting in the chair opposite him. She was the one who'd made him ejaculate into her hand on the very first day he'd gone to one of Stine's fast-track lectures. She also recognised Phil and smiled as though he was a piece of livestock she'd already bought and owned.\n\n\"Ah, the student who summoned a pair of inferior lust daemons. Phil Rowling, isn't it?\" she said.\n\nPhil nodded. \"Um, how should I address you, Miss...?\" he asked.\n\n\"Miss?\" The succubus laughed. \"We're not decrepit husks. I am Astrapia, this is Seleucida and that is Paradisea. We are here to see if you are fit to call yourself master of daemons.\"\n\nShe gestured to an empty chair opposite her.\n\n\"Sit down and we'll begin.\"\n\nPhil looked down at the chair. He repositioned it and sat down.\n\nThat seemed easy enough, he thought.\n\nThen the succubi started to take their clothes off. Admittedly, they hadn't been wearing much to begin with\u2014little more than the skimpy black costumes of showgirl dancers\u2014but there was a big difference between not much and nothing at all. Phil's eyes boggled and his Adam's apple worked furiously as the sex daemons peeled off their bodices to expose the bulging pink hemispheres of their breasts. Was there a succubus that didn't have a body gorgeous enough to turn a glamour model green with envy?\n\nThe succubus that had shown Phil in, Paradisea, saw his discomfort and paused. \"Surely as a master of succubi you must be used to this by now.\"\n\n\"Yes, what a splendid idea,\" Verd\u00e9 said as she removed her diaphanous green robes and hung them over the back of Phil's chair.\n\nPhil was once again surrounded by gorgeous naked woman. And as usual he wished he could enjoy it without being terrified for his life and soul.\n\n\"Why don't you take off your robe as well?\" Seleucida asked.\n\n\"We're already naked,\" Paradisea said. \"You'll feel more comfortable if you're naked as well.\"\n\n\"If you're worried about your size, you shouldn't be,\" Seleucida said.\n\n\"We don't care how big or how small they are,\" Paradisea said.\n\n\"We suck them all,\" Seleucida said.\n\n\"Fuck them all,\" Paradisea bent closer to whisper in Phil's ear.\n\nAnd now Phil had a single, hard, reason to keep his robes on.\n\n\"As delightful as this all is, it is quite unnecessary,\" Verd\u00e9 said.\n\nAstrapia fluttered a fan of fluffy pink feathers and gave Verd\u00e9 a glare that detracted from her otherwise seductive appearance.\n\n\"My master has already passed the first trial...\" Verd\u00e9 continued.\n\nHe had? Phil thought.\n\n\"...and you are of the same dominion, so...\"\n\nThey might have been from the same dominion, but the other succubi did not seem to like Verd\u00e9 being there at all and showed their disapproval with stony glares.\n\n\"I'm not saying it's a total waste,\" Verd\u00e9 changed tack. \"Even if he might not look keen now, I'm sure my master would love to experience some of the famed sensual skills of the incomparable bedmistresses of the Palace of Infernal and Iniquitous Pleasures.\"\n\n\"Which house do you belong to?\" Astrapia asked Verd\u00e9. \"I know you're not from the Palace of Infernal and Iniquitous Pleasures. The Garden of Exquisite Tortures? No, you're far too vanilla for them. The Pagoda of the Euphoric Lotus? No, I don't see it. I don't think you're from one of the minor houses either.\"\n\nVerd\u00e9 gave a disarming laugh. \"I know the Palace of Infernal and Iniquitous Pleasures is built upon tenets of order and discipline, but those tenets are not shared by the rest of the Dominion of Lust. I have no house. I have no need of a house.\"\n\n\"You see your mistake,\" Astrapia said to Phil. \"You've allowed yourself to be seduced by a pair of low-class lust daemons wanting to use you as a cheap ticket to this Earth. A warlock of greater distinction and class would have chosen more wisely than a pair of no-house tramps.\"\n\n\"Now you're being rude,\" Verd\u00e9 said. \"Not that I mind. Nasty talk gets me so wet.\"\n\nShe paused. Her nostrils dilated and she frowned.\n\n\"Has a soul been spilled here recently?\"\n\n\"Seleucida, Paradisea, quieten this impudent slut.\"\n\n\"So it's going to be like that,\" Verd\u00e9 said without the slightest hint of fear or concern.\n\nThe two succubi converged on her. They did not fight, at least not in any way Phil recognised as fighting. If anything it resembled more a sizzling-hot three-way lesbian orgy. Phil supposed it made sense for succubus fights to be about sex as well. He found it hard to follow. At first there was a Sapphic embrace as Verd\u00e9 and Seleucida squashed their tits together and rubbed their nipples against each other. Their lips met in wet sloppy kisses and their hands roamed all over each other's curves while they let out sighs of pleasure.\n\nParadisea joined in. She pressed her breasts up against Verd\u00e9's back and reached around to grab Verd\u00e9's tits. The other succubus's eyelids fluttered and her cheeks reddened as Paradisea's fingers clamped Verd\u00e9's nipples and tugged them.\n\nVerd\u00e9 had no intention of letting the other succubi do all the work. Her hands lit up with a soft green glow. She brought her left hand down between Seleucida's legs and the other succubus gasped in pleasure as Verd\u00e9 inserted first one and then two fingers between the hairless folds of Seleucida's pussy. All three went to the floor in a tangle of heaving bosoms, groping hands, lapping tongues and lewd sighs.\n\n\"Enjoying the show?\" Astrapia said to Phil as she languidly fluttered her fan of fluffy pink feathers. She cocked her head. \"Oh, are you feeling left out. Don't worry, I'll show you how good it feels to fuck a succubus of real class.\"\n\nShe uncrossed her legs and her hairless sex winked at Phil, revealing the moist pink interior. Phil's gaze was drawn to it and held. The succubus wrapped her sexual aura around him like a velvet-gloved fist and squeezed.\n\nIt took most of Phil's willpower to tear his gaze away. He looked over to the writhing pile of nubile flesh on the floor to his left. It was hard to see who had the upper hand. Verd\u00e9 maybe. She was on top of Seleucida and her fist was buried up to the wrist in the other woman's sex.\n\n\"Is that all you've got?\" Seleucida said coldly.\n\nOr maybe not.\n\nParadisea struck. Her tail plunged into Verd\u00e9's ass like a lance and the green-haired succubus threw her head back and let out a shocked gasp that was more pleasure than pain. Seleucida slithered off Verd\u00e9's hand and turned. The end of her tail puffed up and she embedded it in Verd\u00e9's vagina. Verd\u00e9 shuddered and let out a cry. Glistening juices squirted out of her pussy as Seleucida's tail probed deeper.\n\nIf it had been a fight it was now over. Verd\u00e9 lay unresisting between the two succubi and gave out little panting sighs of bliss as the other succubi's tails throbbed and swelled in her ass and vagina. This wasn't a sex act, Phil realised.\n\n\"You're hurting her,\" he said.\n\nThis was feeding. The knowledge of it changed what Phil was seeing, made it loathsome, like watching giant leeches suck the life fluids out of hapless prey. As he watched, little bulges ran up the succubi's tails. Verd\u00e9's fluids... life?\n\n\"Concern for your little slut daemon, how weak,\" Astrapia said. \"To let a little tramp like this wrap you around her finger. You're no warlock at all.\"\n\nThey were feeding off her, draining her. He had to stop this.\n\nPhil went to stand up. Astrapia laughed and tapped the tip of her tail on the floor. White light erupted around Phil as the magic circle surrounding his chair activated. He was slammed back down as if the force of gravity had increased ten-fold around him.\n\nShit, he'd missed that one.\n\n\"Anyway, there's no need to fear for your little slut,\" Astrapia said.\n\n\"I'm not going to suck out all her vitality,\" Seleucida said. She sucked on her finger with sumptuous lips. \"Just enough to leave her looking like a wizened old crone.\"\n\n\"It won't be permanent,\" Astrapia said. \"She'll regain her former beauty in, oh, a century or so. We don't kill our own. Humans, however...\"\n\nSwishing her fan back and forth, Astrapia stood up and approached Phil's chair.\n\n\"Run,\" Verd\u00e9 said. \"This is not a test. They're not following the rules. They killed the other one.\"\n\n\"Darvill?\" Phil said, shocked.\n\n\"He had potential. Potential to one day develop into a threat for our master. So we decided to eliminate him now, before he achieved enough power to become troublesome,\" Astrapia said.\n\nPhil couldn't believe what he was hearing. He knew Wargsnouts was crazy, but crazy enough to let the teachers murder their own pupils with daemons...? That was beyond fucked up.\n\n\"I'm no threat,\" he protested.\n\n\"I know you're not. You're a worm,\" Astrapia said. She tickled the tip of Phil's nose with her perfume-scented fan. \"But the Palace of Infernal and Iniquitous Pleasures is the representative of the Dominion of Lust on this Earth. We won't brook any interference from low-class, no-house little slut daemons.\"\n\n\"Stop talking and run.\" Verd\u00e9 pushed out the strained words in between helpless gasps and sighs. \"Go get Rosa or N\u00ffte.\"\n\nAstrapia turned to her and laughed. \"The impudence. N\u00ffte? Rosa? What lies have you been feeding this poor worm?\" She turned back to Phil. \"Let me guess. Did she claim to be the Er\u00e9\u0161 N\u016bkric?\"\n\n\"Run, Phil,\" Verd\u00e9 sighed. She shuddered as another powerful climax overtook her.\n\nAstrapia pulled aside Phil's robes. She swept her fluffy fan across his nipples.\n\n\"He doesn't want to run. He wants to stick his big fat cock in my luscious wet cunt and fill me with his hot, gushing spunk. Don't you, worm.\"\n\nWhat Phil wanted to do was think.\n\nHe knew he couldn't run because of the circle binding him. He also knew he couldn't use the emergency dismissal incantation on them either. They were The Scrote's daemons. Only he had the authority to send them back to their plane.\n\nHowever, there was something else Phil could do. While Astrapia had been taunting Verd\u00e9 and teasing him he'd been sending out mental feelers.\n\nYes, he could sense it. It was much weaker here, weak enough that Phil would have to put a lot into the summons, but he thought he could still reach it.\n\nAstrapia pushed his legs together and straddled him. Her pussy gaped hungrily. She looked at him like a cat with a mouse as she ran her feathered fan over his exposed skin.\n\nHe also had another advantage.\n\nHe reached up and placed his hands on her tits.\n\n\"Yes, you can touch them.\" Astrapia's voice oozed exultant triumph.\n\nThey thought his magic was bound along with his body. It wasn't.\n\n\"Flambas-Ejaculax!\"\n\nTorrents of flame erupted from Phil's hands and flung the succubus backwards. He smelt the acrid tang of her burnt flesh. Her body was still smoking as she hit the floor on the other side of the room.\n\nHe'd spotted and recognised the magic-nullification circle before he'd sat down. It had been easy enough to reposition the chair to break the circle. So easy he'd assumed it was the first part of the test. Unfortunately, he hadn't spotted that the circle was actually part of a complex composite of two circles overlaid over each other\u2014one to nullify magic, the other to bind humans.\n\nOr should that be fortunately. Astrapia would have noticed something was wrong the moment the circle failed to activate. Realising he was unbound, she would have been forced to take him more seriously. In a magic duel between him and an aware and unsurprised succubus Phil knew there would only ever be one winner.\n\nHe wondered if that was what had happened to Darvill.\n\nIt was ironic, Phil thought. His ineptitude had given him a chance to survive this.\n\nAstrapia stirred on the floor.\n\nPhil knew he hadn't killed her. Daemons regenerated, even from fire.\n\nBlackened patches of burnt skin sloughed off Astrapia to reveal healthy pink flesh underneath.\n\nPhil cast his mind back to C\u03adr\u03bcl\u0259a's lesson on magic circles and plucked forth a dispelling incantation. He knew they weren't effective when used inside the circle, but he was hoping he'd already weakened the circle by breaking part of it.\n\n\"Mulucric exnida Restrac Homnus.\"",
        "He felt resistance as if it was pressure squeezing his skull. He pushed harder with his will and felt the bubble of magic energies give and then break. The spectral light surrounding the chair winked out and Phil felt relief as the crushing force pinning him to his seat went away.\n\nAstrapia lifted her head. Fury raged in her shark-black eyes. Phil's magical flames had scorched an ugly red trail across her scalp. Silky black hair was already growing up through the blistered skin like fresh shoots.\n\nHe didn't have much time. Phil went down on one knee and placed a palm flat on the stone floor. Yes, it was there, burrowing through the dark places, waiting for his call.\n\n\"\u011ci\u0161kimiti za bursa\u011d ul Urp\u00e2du ni Guberim li I\u0161duum Qi\u0161tu!\"\n\nGreen vines burst out of the stone flagstones. They coiled around Astrapia's body and bound her to the floor before she could stand up.\n\nSeleucida paused from sexually draining Verd\u00e9. \"The Vines of D\u0101r\u00fb Qi\u0161tu? How can a nov\u2014\"\n\nPhil extended his left hand. Vines erupted from the wall, wrapped around Seleucida and Paradisea, and yanked them away. They were pinned to the wall as if chained there. Thick green fibrous ropes wound across their mouths, gagging them.\n\n\"Well done. Well done,\" Astrapia said.\n\nThe succubus, fully regenerated in all her icy beauty, was trussed up like a roast hog with her butt sticking up in the air. Despite this she still had the supernatural succubus ability to look intensely alluring no matter how undignified her current state. She looked less a prisoner and more like an alt glamour model engaged in rope bondage.\n\nThe cold fury had left her face and she was all warm smiles as she spoke to him.\n\n\"Congratulations. You passed the test. You have demonstrated your power as a warlock.\"\n\nHe'd done it! The realisation flowed through him in a giddy wave. Phil could scarcely believe it. He'd defeated them. He'd used his own magic and defeated succubi.\n\n\"And now you can claim your spoils.\"\n\nAstrapia gave the luscious curves of her ass a little waggle, as much as the vines would allow. Nestled between her legs like a hidden treasure were the clamshell folds of her sex.\n\n\"It is the law. The strong have supremacy over the weak. You defeated me and now I am yours to do with as you see fit.\"\n\nThe clamshell folds of her sex rippled and parted enticingly as Phil stared at them.\n\nYes, it was true. He'd beaten her.\n\nHe looked around the room, at the other two succubi chained to the walls with green vines.\n\nHe'd beaten them all.\n\nWhat a rush.\n\nHe wasn't a useless dork in a dead end job. He wielded magic. He summoned daemons. He defeated daemons. He was a warlock.\n\nHe looked at the three daemonesses trussed up helplessly by his magic.\n\nThat was him. He'd done this.\n\nHe was good.\n\nNo, better than good... fucking awesome.\n\n\"I am yours, but... please don't be too hard with me,\" Astrapia said.\n\nThere was a rightness to her words. This was how this world worked. He'd seen it time after time.\n\nAnd now he was part of this world. He was a warlock... a real warlock.\n\nAstrapia wiggled her ass again. Her sex winked wider, giving Phil a tantalizing glimpse of her moist pink interior.\n\nAnd now it was time to collect his deserved reward. All he had to do was step up, place his palms flat on the smooth curves of her bum and thrust.\n\nYeah right. Like he was that stupid. He knew how succubi operated.\n\nPhil turned and went to Verd\u00e9.\n\n\"Are you okay?\" he asked.\n\nShe nodded. Phil noticed there were faint little crow's feet at the corner of her eyes, but their presence was fleeting and they were gone by the time he helped her to her feet.\n\n\"Thank you,\" she whispered and placed a soft kiss on his cheek that made him feel like the whole of his body had been wrapped up in a pleasant warm glow.\n\nShe put her robes back on. Phil looked anxiously at the bound succubi. He didn't know how long the vines would hold them.\n\n\"We should leave,\" Phil said.\n\n\"You know, there is a perverse irony to this situation I would find highly arousing if I wasn't so exhausted,\" Verd\u00e9 said.\n\n\"You're missing out,\" Astrapia called out to Phil. \"You have no idea of the pleasures my pussy can bring you.\"\n\n\"We really should leave,\" Phil said.\n\nVerd\u00e9 put her arm around Phil and rested her head on his shoulder as they walked\u2014too slowly for Phil's liking\u2014out of the room. He kept glancing behind him as they walked back to his room. It was one of the few occasions where he was glad to find Rosa waiting in his bedroom.\n\nShe was not alone. Standing next to the red-headed succubus was a stern-looking woman wearing full plate armour. Rosa was tall by human standards and the woman standing next to her was easily a full head taller. Or rather, daemon. Her lips were cobalt-blue in colour and the teeth behind them were pointed, as were her ears. Her skin, where it was visible, had a blue rather than pink tinge. Her armour was white with gold trim and so elaborate it looked more like a piece of art then a suit of protective gear. It had been polished so brightly it hurt the eyes to stare at for too long.\n\nWho was she? She resembled some kind of fantasy paladin or valkyrie.\n\nRosa looked at Verd\u00e9. \"What happened to you?\"\n\n\"Playtime with some bedmistresses from the Palace of Infernal and Iniquitous Pleasures,\" Verd\u00e9 said.\n\nRosa raised an eyebrow at Verd\u00e9 before continuing on with her introduction of the armoured daemon standing at her side.\n\n\"Anyway, I found someone. Valkarykarynar\u00f6kris Helvargan will give our novice his final\u2014\"\n\nThe armoured daemon, Valkarykarynar\u00f6kris, stared at Phil with piercing blue eyes. Her gaze was so intense Phil had the uncomfortable feeling she was stripping the skin, flesh and bone away to stare right through to what lay beneath.\n\n\"It is not necessary,\" Valkarykarynar\u00f6kris said, cutting Rosa off mid-sentence.\n\nThen she turned on her heels and left the room through the portal C\u03adr\u03bcl\u0259a had created, leaving two speechless succubi and a baffled Phil behind.\n\n\"My, how rude,\" Verd\u00e9 said.\n\n\"That's pride daemons for you,\" Rosa said. \"No wonder no-one likes them.\"\n\nShe looked at Phil.\n\n\"Do you think it counts?\" she asked Verd\u00e9.\n\n\"I think so,\" Verd\u00e9 said. \"Is that all of them now?\"\n\n\"Hmm, let me see,\" Rosa said. \"Carnivrillarofax... Mr G... \u00dbm\u016bn \u0160ag...\" She counted them off on her fingers. \"...Puff and Pfaffle... C\u03adr\u03bcl\u0259a.\"\n\n\"Tsk, Ab'\u011dalga,\" Verd\u00e9 corrected.\n\n\"Ab'\u011dalga,\" Rosa repeated. \"And Valkarykarynar\u00f6kris Helvargan just now. I think that's all of them. Well, aside from that dominion.\"\n\n\"No-one counts that dominion,\" Verd\u00e9 said.\n\nPhil listened to them without having the slightest idea what they were talking about. He had other things on his mind. He kept glancing nervously at the door, expecting a vengeful Astrapia and friends to burst through the door at any moment.\n\n\"Well, if that is all of them...\"\n\n\"Then...\"\n\nBoth turned to Phil with broad smiles on their faces.\n\n\"Congratulations, fledgling. You are now officially a warlock.\"\n\n\"Um, isn't that something the college determines after seven years?\" Phil said.\n\nThe two succubi laughed.\n\n\"This calls for a celebration,\" Rosa said. \"Let's go find some yummy students and screw them to\u2014\"\n\n\"Meditate,\" Verd\u00e9 interrupted.\n\nRosa glanced at Phil. \"Oh yes, meditate.\" She looked Verd\u00e9 over. \"You look like you could do with a spot of meditation.\"\n\n\"The bedmistresses play a little rough,\" Verd\u00e9 said.\n\nRosa raised an eyebrow again.\n\nPhil said. He glanced again at his door. \"Shouldn't we be worried about those bedmistresses?\"\n\n\"It will be fine,\" Verd\u00e9 said. \"Little skirmishes like this are a regular part of the daemon world. They rarely go further.\"\n\n\"If you're worried we can have N\u00ffte talk to Mother Diabolica,\" Rosa said. \"She might even let N\u00ffte bring one back for you to play with. Was there one in particular you'd like to fuck?\"\n\nPhil didn't have the slightest clue how to respond to that, so he didn't.\n\nFortunately he didn't have to, as a young girl with blue hair, horns and red eyes appeared on the other side of the doorway to hell.\n\n\"Ah, C\u03adr\u03bcl\u0259a is here to give you your lesson for the day,\" Verd\u00e9 said. \"We'll leave you with her while we go off and...\" she shared a glance with Rosa. \"...meditate.\"\n\n\"Yes, and discuss some other things,\" Rosa said, giving Verd\u00e9 a pointed stare.\n\n\"I know what they mean by meditate,\" Phil said after they'd left. \"I'm not that stupid. It's not as if I could stop them anyway.\"\n\n\"You should be happy,\" C\u03adr\u03bcl\u0259a said. \"Congratulations are in order.\"\n\n\"I don't suppose you feel like explaining what it all means,\" Phil said.\n\n\"Those that would wield daemons must demonstrate they can overcome all their daemons, not just the most prominent,\" C\u03adr\u03bcl\u0259a said.\n\nPhil wrestled with understanding, before giving up. \"Um, I don't suppose you could be more specific?\"\n\n\"Sure,\" C\u03adr\u03bcl\u0259a said. \"The first daemon a human attracts to them is one that reflects the greatest weakness in their character. That daemon can grant power, but mostly it's only interested in the human's soul unless the human shows promise. Weak masters are of no use to us.\n\n\"Given you were a lonely, horny teen with no knowledge of the opposite sex, your daemon was always going to come from the Dominion of Lust. You survived the first trial, but a warlock must prove they can withstand the temptations of all the other dominions. The exception to this is the eighth, the Dominion of F\u2014\"\n\nShe put a hand to her mouth.\n\n\"Oh wait, it's far too early to talk about that one. You all should forget I even mentioned it.\n\n\"Anyway,\" she continued. \"You were given trials corresponding to each of the other dominions. You survived them. You are now, by the accords of hell, a warlock.\"\n\nPhil went over her words. \"That was surprisingly clear and understandable,\" he said.\n\n\"It was?\" C\u03adr\u03bcl\u0259a said. \"Hmm. Oh well, you should probably take it with a pinch of salt. I'm not the most reliable when it comes to explanations.\"\n\nSo much for clear and understandable, Phil thought. Shaking his head he stepped through the portal and back into hell. At least he was still alive.\n\nC\u03adr\u03bcl\u0259a lingered on the threshold and stared through the doorway into Phil's bedroom on Earth. She reached out with a finger and tapped on the open doorway as if it was a sheet of glass. Glowing ripples of blue light spread out from the point of contact even though, to all extents and purposes, there was nothing there but empty air.\n\n\"Soon,\" she whispered.\n\nAnd that's that for the Succubus Summoning 201 arc. I hope you've all enjoyed it despite the rather infrequent update schedule. It's not the end of Phil's adventures with deliciously salacious succubi. I'm going to take a break from this series to write up some other story ideas that have been sitting patiently in the back of my head, but then I'll return with Succubus Summoning 301 to pick up some of the story threads I've deliberately left open.\n\nI'm aiming to collect all the 201 chapters together into an ebook/print book. (Feedback on the ending or anything is welcome - If I've screwed up here, there's still a chance to fix it before the final book version!)\n\nThanks for reading!"
    ],
    "authorname": "manyeyedhydra",
    "tags": [
        "succubus",
        "warlock",
        "magic",
        "demon",
        "fisting",
        "draining",
        "bondage"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/succubus-summoning-213"
}
{
    "title": "The Master and the Ring Ch. 12",
    "pages": [
        "Henri lay naked on the bed with Yvonne's head between his legs gently sucking his cock. His hands were behind his head and his eyes closed, enjoying the pampering his new wife was giving him. The Ring was wrapped in cloth in a leather pouch on the bed stand next to him. He could feel its pull from across the room. Yvonne was taking her time; he was humming with pleasure but well away from a climax. Her hot, wet mouth took many inches at a once before bringing him back out, sucking his head for a time. Her hands gently rolled his large testicles as she sucked and bobbed slowly up and down. She was incredibly talented in the art of oral pleasure. Indeed he might say she was the best he'd ever known and that was saying a lot, especially since he had known many woman and several Daughters of Mentula. Now his wife was the Head witch, the very woman sucking his cock was probably the most powerful creature in the known world.\n\nHe knew his time was running short. He felt the drain the continuous pull of the Ring was causing to his body, he knew if he didn't give in to the urges and extinguish a woman of her spark, the drain would be fatal. He either gave in or he died. His body had become weak and even his muscles had atrophied from the constant drain from the Ring. At that very moment, with Yvonne's mouth around and deep on his cock he felt he could die a happy man and was almost content to surrender to the abyss.\n\nHer mouth released his cock for the first time in many moments. The change made Henri open his eyes and look down at his beautiful wife. She was smiling and had taken hold of his shaft by the middle and was gently stroking it. Their eyes met and Yvonne spoke as she stroked.\n\n\"I have a surprise for you, husband.\"\n\n\"A surprise better than what you are doing now?\" he asked.\n\n\"Much better, my love. I believe the sisters and I have found a solution to our problem,\" she said, still stroking him up and down with long gentle movements.\n\n\"Please, tell me?\" he said.\n\n\"In time, but first I would like to finish what I started,\" she said pulling his cock back to her mouth and enveloping him in wet velvet. \n\nHenri groaned in delight, basking in the resurgence of pleasure that was Yvonne's highly trained mouth. As curious as he was to know what secret she held, the pleasure overcame him and he soon found his head falling back to his hands and his eyes closing as his wife increased her efforts. His pleasure rapidly increasing, Yvonne knew exactly what she was doing and exactly how to get him to climax when she wanted. She took him deeper than before, sucked harder on his head and this combined with the extensive time she had already been sucking him. The delayed climax soon found its strength and Henri found himself on the verge of orgasm within moments of her beginning anew.\n\nThere was no need to warn her. She wanted it to explode in her mouth anyway. Both of the daughters of House Granvas loved to have him ejaculate in their mouths, something he found extremely arousing but nonetheless a little odd, since he has known very few women who've enjoyed his plentiful semen. He sensed she knew exactly when he was going to climax. Her new gifts, as the Head witch, had given her powers he couldn't comprehend nor, he was sure, she had told him about.\n\nHis pleasure peaked as she descended the final time onto his large shaft. His muscles tightened and he held on to the intense pleasure until his strength gave out and unleased his large load down her throat. She remained deep on his cock as it convulsed and jettisoned his seed from his body. Each burst caused him to grunt and his legs to flex as the rapture rushed through him.\n\nNothing escaped her lips; she had swallowed every drop of Henri's semen as it passed out of his bulbous head into her mouth. When the contractions ceased, Yvonne sucked the remains from his body and released his spent cock, letting it fall to his body, wet and still pulsing.\n\n\"Mmmm, I'm so glad I can do that again. Having to allow Serena all of you was a small trial during our days in captivity. But now I can enjoy you as I wanted then.\"\n\nHenri was unable to respond to his wife. He was floating on air and in and out of reality, so good was the sensations she had caused. The climaxes were always so much better when she took her time.\n\n\"Henri? Did you hear me?\" she asked.\n\n\"Yes, wife... I heard you; I was just unable to talk for a moment.\"\n\n\"Such flattery, my king... you don't have to try so hard... I'm already your wife.\"\n\n\"I wasn't... I spoke the truth.\"\n\n\"I'm glad you approve, husband... I will never tire of pleasing you.\"\n\n\"And I you,\" he said looking down his body at her.\n\nHe noticed something new upon her face. She looked tired for the first time since the Ring was reborn. Her perfection and immortality was waning, she did not have the look of flawlessness any longer.\n\n\"Yvonne? The hunger of the Ring is killing you and me,\" he said.\n\n\"Yes, we are all growing weak and old before our time. But do not fear, my love... we have found a solution that will save us all.\n\n**\n\nSerena stood naked before the mirror and noticed her sagging breasts first. She looked thirty years old overnight. For a woman of her true age, this was quite a shock. She placed both hands on her breasts and lifted them up to where they should have been, feeling their firmness depleted. She shook her head, put a robe on and left her room to find Heather and Arianna.\n\nShe found them discussing the very problem Serena had discovered.\n\n\"It's been two days since they left together... why hasn't it worked?\" Arianna was asking Heather as Serena entered.\n\n\"She hasn't told him yet,\" Serena answered the question.\n\n\"What is she waiting for?\" Heather asked. \"Look at us, we grow old.\"\n\n\"Mother does as well, it will be soon now,\" Serena said. \"I can read her mind even from this distance. She will tell him of our plan within the hour I believe. We will know if it works soon.\"\n\n\"Good, then let us prepare for the renewal,\" Arianna said.\n\n\"Or death,\" Heather added.\n\n**\n\n\"What is this solution?\" Henri asked.\n\n\"I will tell you after we eat, I'm starving,\" she said, getting up from the bed. \n\nHenri hadn't thought about food, especially when his new wife had woken him up by sucking on his penis. This continued late into the morning until he finished in her mouth. Now he could smell the food the servants had been preparing for him and his queen. The servants were a small group, comprising of a single maid, one cook and a butler who managed the king's retreat. He and Yvonne had met them all upon their arrival. The cook was a portly woman, mid age and seemed to love to eat her own cooking. The butler was older still and very proper, more so than even Yvonne. The maid was a young thing, probably barley of age. She was dark haired, petite and of fair complexion but rather plain of face.\n\nUpon seeing her, Henri felt the pull of the Ring to immediately take her. He since had been avoiding her as much as possible in fear he might give in to the urges. He had noticed that Yvonne had taken a liking to the young woman, conversing often with her since they arrived. \n\nHenri's thought of food caused his stomach to rumble and he too got up from the bed and put on his robe with his wife. It hung loose on his shirking body, noticeably too large for his wasted frame. Together they left the bed chamber and found the plentiful food waiting for them in the dining room. Marta, the young maid was waiting to serve them and Yvonne greeted her warmly and sat down. Henri felt the pull of the Ring from the bed chamber. It constrained him to return, telling him to bring forth the Master and take the young woman. So strong was the influence, Henri paused upon seeing her and began to turn around to get the ring until Yvonne called to him.\n\nFighting the pull, Henri turned back to the table and sat next to his queen. She took his hand and squeezed it, smiling at him. She knew what he was going through. She knew what Marta's presence was doing to him. He smiled back, forcing it and stared down at his empty plate to keep from looking at the young woman.\n\nMarta began to serve them, adding food to plates and drink to goblets. To keep himself occupied, Henri began to eat while Yvonne talked a little with Marta in-between bites.\n\n\"How long have you been in the King's service, Marta?\"\n\n\"Since my eighteenth year... six months now, your highness,\" Marta replied.\n\n\"Did you escape the horrors of war here at the retreat?\" Yvonne asked.\n\n\"Yes, my queen... we were very fortunate. My family was spared. We live very close and my family has served here since I was a child. Cook is my aunt.\"\n\n\"Wonderful, so you know the value of service. Would you say you would do anything for the king?\" Yvonne asked.\n\nMarta answered with no hesitation, \"Yes, my queen... I am a devoted servant to the king.\"\n\n\"This is well. I hope I may call upon you when the need arises?\"\n\n\"Without question, my queen, anything you require.\" \n\nYvonne nodded to the young woman and Henri turned his head to look at his new wife. She smiled at him and he shook his head slightly in fear of what she might be thinking. The constant pull of the Ring was wearing on him. Making him weak both mentally and physically as he fought it's seductive urges. The food seemed not to help and he feared the only thing that would was to obey the Ring. That or death.\n\nHe was grateful when Marta left the room and he could talk to Yvonne alone.\n\n\"Please tell me your plan isn't for me to kill that poor girl. I will not kill another,\" he said.\n\n\"No, my love... but she will need to play a part.\"\n\n\"You need to explain and you need to be quick about it, Yvonne. My fortitude is waning.\"\n\n\"I know. Now just listen, I will explain everything. But first, go retrieve the Ring.\" \n\nHenri's patience was waning as well. He didn't want to be anywhere near the Ring, except the Ring told him he did. Yvonne smiled and nodded and he obeyed, getting up from the table by pushing his chair out quickly. He looked at her one last time but she didn't say anything. He went to the bed chamber, picked up the leather pouch and grimaced at the heat, almost burning his hand. He returned to Yvonne and dropped the pouch on the table, standing next to her chair.\n\n\"Sit and I will begin,\" she said.\n\nHenri sat, laid his hands on the table and tried not to reach for the Ring.\n\n\"As you know, the old Mothers did not care about the Ring bearer, or the woman he destroyed. They just wanted immortality at any cost. To entice the men, the Ring gives both size and strength as well as pleasure as you also know. The seductive nature of the Ring is their ultimate demise, wherein the Ring finds another. When the Mother's cast the spell they were unaware or did not care that the life force was take along with the spark. They did not know or did not care that it was the spark only that they required.\"\n\n\"If I understand, you're saying the women didn't need to die to get the spark?\" Henri asked.\n\n\"Exactly. Most women, especially in our country don't even know they have the spark of magic within them... Serena and I didn't and we had it greatly. They will never miss it if it was taken. Take Marta for instance. Her spark is small, I've felt it. She wouldn't notice a thing if it was taken from her, it is so small it probably couldn't be nurtured at all anyway.\"\n\n\"So how do we do that without killing her? What are you suggesting?\"\n\n\"The sisters and I have been working endlessly on the problem and we've come up with this,\" she said, pulling a thin gold ring from her robe pocket.\n\n\"Another ring? What does this one do?\" he asked.\n\n\"Put it on and see,\" she said, handing it to him.\n\nHenri hesitated but then realized his new wife would never wish to hurt him. He undid his robe and picked up his long flaccid cock. The new ring had runes around it as well but wasn't as thick or as wide as the Ring. As he placed it over the head of his cock the runes began to glow red and it seated itself at the base of his cock on its own power. He expected something to happen but no change came to his body. And then he felt it, or in reality he didn't feel it. The pull and seduction of the Ring was gone. His head flew up to meet Yvonne's eyes.\n\n\"It's gone! The grip the Ring had on me is no longer!\" he almost shouted.\n\n\"Yes! I was hoping and praying it would work. But that is not all, my love,\" Yvonne said, reaching out and picking up the leather pouch.\n\nShe opened it and unwrapped the Ring from its cloth confines and set it in front of Henri.\n\n\"Go ahead, put it on as well and we shall see if all of our hard work has paid off.\"\n\n\"Are you sure? The Master will not fit in this room?\" he said.\n\n\"Trust me, my king,\" she said, picking up the Ring and holding it out to him.\n\nHe let her drop it in his hand and was surprised that it was no longer hot. Lifting his cock with one hand he placed the Ring over his head and it slammed down to meet the other ring, glowing bright blue from lack of use. The smaller ring glowed brighter red and the Master did not appear.\n\n\"It worked!\" Yvonne called out. \"It inhibited the Master from appearing but tell me how you feel?\" she asked.\n\n\"I feel amazing! Strong and invincible just as if I was the Master,\" he said.\n\n\"You are,\" Yvonne spoke, picking up a knife from the table and thrusting it at his chest.\n\nThe blade broke when it came in contact with Henri's flesh and Yvonne dropped the hilt. He couldn't believe what was happening to him. He felt incredible and even with the Ring around his cock he hardly felt the seductive pull to have a woman. It was there but many times less.\n\n\"This is not all, my king. The true purpose of the new ring has yet to be revealed. This is where Marta comes into play.\"\n\n\"The new ring allows me to take her spark without killing her, doesn't it?\" he asked.\n\n\"That is our hope. Upon Mentula's climax, the spark will be taken and transferred to the Ring and to me and my sisters. That is the hope. She will live; the spark will rejuvenate us as well as you. It will make you immortal as we are!\"\n\nHe was so preoccupied he missed the part about him becoming immortal as well. \"But for this to work, I have to know her,\" he stated instead of asking.\n\n\"Yes,\" Yvonne said, looking down. \"There is no other choice. A spark must be harvest and knowing a woman is the only way. As hard as it may be for you to know other women than me and my sisters, it must be so.\"\n\n\"I see that this must be. To save you all I will do what is required of me,\" Henri said.\n\n\"Good, I will fetch the girl and talk with her. She should be willing to serve as she has stated,\" Yvonne said, standing up and kissing Henri on the cheek before leaving the room.\n\n**\n\n\"She has told him of the plan. The new ring is in place and all is going according to our design. Yvonne is now seeking a woman to harvest her spark,\" Serena told Heather and Arianna.\n\n\"The moment of truth is upon us. We will know very soon if our efforts have proven fruitful,\" Heather said, pacing her chamber.\n\nArianna was sitting at the table, wringing her hands in anticipation. Serena was in deep concentration, inside the mind of her sister. She could see through Yvonne's eyes as she left the room and searched the king's retreat for the young maid. Yvonne found her in the kitchen talking to the portly cook.\n\n\"Marta? Could I trouble you for some help?\" Yvonne asked.\n\nUpon hearing her voice. Marta jumped to her feet and bowed to the queen. \"Yes, my lady, what can I do?\"\n\n\"Come with me, I must speak with you.\"\n\nYvonne turned and the young Marta followed. Yvonne stopped in a corridor to speak with Marta and Serena heard everything.\n\n\"I need your help, Marta. You said before you were willing to do anything for the king.\" Marta nodded.\n\n\"You might have noticed he seemed a bit tense and distant at breakfast. It's not his fault it is mine. How can I put this? As you know we've been here on our honeymoon for two days now. I, being a virgin before, have become tender and sore from the kings desires and need some time to recover. This has made him a bit distraught and I was hoping you could help me.\"\n\nSerena giggled at the lie and Heather and Arianna turned toward her for answers. Serena ignored them and continued to listen.\n\n\"What can I do?\" Marta asked, taken aback.\n\n\"I'm sure you have heard the stories of kings and their handmaidens? I need you to help satisfy the king until I am able to again.\"\n\nMarta gasped, placing her hand over her mouth. Yvonne paused, letting the young woman take it all in. Yvonne did not speak until Marta did.\n\n\"My queen, what you ask is... unexpected. I have limited experience in such things. I've only known one other man. Surely you could call upon another in my stead?\"\n\n\"Marta, this is for the king, he is getting irritable and waiting longer will only make it worse. You said you were willing to serve. Don't you find him attractive?\"\n\n\"Oh, yes, that is not my reservations... It's just I am quite plan, my lady and inexperienced...\" she trailed off.\n\n\"Not any more than I was two days ago. Will you do this for me?\" Yvonne asked again.\n\nMarta wrung her hands and then fidgeted with her maid dress before replying. \"I will, my lady.\"\n\n\"Good, then let's continue on to the king.\"\n\n\"As you wish, my queen. Will you be accompanying me with this task?\"\n\n\"Do you wish me to?\" Yvonne asked.\n\n\"As he is your husband, I think it would be proper, so as to not injure your relationship in not knowing what transpired between he and I. Also, between the two of us we could help each other please him.\"\n\n\"Very well. I will participate if you wish.\"\n\nSerena was chuckling again and finally was forced to tell Heather and Arianna what was so humorous. The other two witches shared in the comedy of Yvonne's little lies.\n\n\"Did the maid agree?\" Arianna asked.\n\n\"Yes, they are heading to the king now, it won't be long,\" Serena said.\n\n**\n\nHenri remained in the chair at the table, looking down at his cock with the two rings upon his shaft. They continued to glow red and blue. He felt powerful and invincible sitting there waiting for his wife and the maid to arrive. He knew nothing was completed yet and he worried something might go wrong. His body had not changed. He was still weak in appearance and knew the new ring was only concealing the larger problem. He was pondering this new experience when the door to the dining room opened and Yvonne and Marta appeared. He quickly closed his robe and stood.\n\n\"My king,\" Marta said, curtsying low.\n\n\"Hello,\" Henri replied, not knowing what had been talked about.\n\n\"I've asked Marta to assist me with your needs, my king, since I am unable to at the present time,\" Yvonne said, giving him a special look to go with what she said.\n\n\"I see, and she has consented to your request?\"\n\n\"Yes, she has, with one stipulation. She would like me to be there and assist so I may not feel ill will toward you and she.\"\n\n\"Very wise for someone so young,\" Henri said.\n\n\"Yes, I thought so.\"\n\n\"Very well, if my queen is alright with this arrangement and Marta has agreed we can retire to the bed chamber,\" Henri said, motioning with his hand for the ladies to go before him.\n\nMarta was staring at the king and unable to move. Yvonne took her by the hand and led her toward the bed chamber. Henri could tell she was very nervous. He also knew this had to be done. Upon arriving at the bed chamber, Marta turned around and faced Henri with Yvonne at her side. She seemed to be trembling slightly and Henri knew he needed to help her relax. Apparently Yvonne did as well.\n\n\"Do you want me to get started with him, and then when you feel comfortably you can join us?\" Yvonne asked.\n\n\"I would... yes that will be fine,\" the young maid said.\n\nYvonne left Marta's side and walked up to Henri and kissed him, placing her hands on his chest. Her hands ran down his body to the tie that held the robe round his waist. As she kissed him she untied the robe and opened it. Henri's body was reacting very quickly to the stimulation, especially with the Ring around his cock. He grew large quickly, pinning his rising shaft between his wife's body, hindering it from rising completely. As the kiss ended, he looked over Yvonne's shoulder at the young Marta, she was frozen in place and watching them, but her eyes were not on his, but down toward his waist, trying to get a glimpse of his cock behind Yvonne.",
        "Yvonne parted his robe with both hands until it slipped off his shoulders and fell to the ground behind him. He was naked with only his wife blocking Marta's view of his body and large cock. Yvonne reached down, taking hold of his shaft and moving it upward with a gentle stroke until he was rock hard. She kissed him again, gently stroking his cock for a few more moments before turning her head to look back at Marta.\n\n\"Come, Marta... come help me,\" the queen beaconed.\n\nHenri watched Marta hesitate but then move forward. Yvonne turned her body as Marta came forward and suddenly Henri's large erect cock, with both rings glowing at the base, came into Marta's view.\n\nShe gasped and froze, seeing the size of the king. \"Oh my! It's so... large!\" she blurted without thinking.\n\n\"Yes, this is why I need some time to recover, my dear. Don't be afraid, he is very gentle,\" Yvonne said, holding her hand out to Marta.\n\nThe maid finally tore her eyes from his cock and took the queen's hand, joining her in front of Henri. Marta finally dared look down again and was curious about the rings asking, \"What are the rings for?\"\n\n\"They are the Kings Rings, they are given to the king of our nation along with the crown. Most do not know of this ceremony, it's a privilege to see them,\" Yvonne explained.\n\n\"I see. They glow with light, do they give the king power?\" she asked\n\n\"In a way. You may have heard of rumors... of the powers the king possesses in battle?\" Yvonne asked.\n\n\"Yes, but I thought they were only stories.\"\n\n\"Some are, some are not,\" Yvonne said, taking Marta's hand and placing it on Henri's ridged shaft. \"Do not be afraid, touch him, it is okay.\"\n\nMarta had tensed up when she came in contact with Henri's large cock. With Yvonne's encouragement he felt her hand relax and slowly wrap around the middle of his cock and begin to slide up and down the extensive length. Her small hands did not reach all the way around his width. It felt incredible, even with the new ring inhibiting the Master from appearing it did not lessen the sensations the Ring enhanced. Henri closed his eyes and enjoyed the small hand of the maid as it caressed his hard cock.\n\n\"That's good; you are doing well, Marta,\" Yvonne said still encouraging the young girl. \"I want to ask you a personal question. Have you ever pleased a man with your mouth? I have heard of such things but I do not know how myself?\"\n\nHenri suppressed the laugh that suddenly betrayed him by grunting and clearing his throat. He then realized, from the look from his queen, what she was doing and covered well.\n\n\"I... I have, my queen... but not often and never on such a large member.\"\n\n\"Can you show me? Teach me to please him in such a way. If you will?\" Yvonne asked.\n\n\"I will try, my queen,\" Marta said, dropping to her knees and pulling Henri's stiff shaft with her.\n\nHenri looked down and watched the young woman stare at his extensive cock. She looked intimidated and was hesitating. Neither he nor Yvonne spoke. He knew what Yvonne was trying to do. She was trying to get the young woman to feel like she was teaching Yvonne and serving, for this was what she was accustomed to and comfortable with.\n\n\"He is much larger than anything I've seen or touched before but I think the same principles will work. I've learned a few things and I know what my Peter likes. I will teach you,\" Marta said.\n\n\"Is Peter your man?\" Yvonne asked.\n\n\"Yes. He was my first and only,\" she answered as she continued to caress Henri while holding him horizontal with her other hand.\n\n\"I like to start slow, with just my tongue and then my mouth later, like this,\" she said.\n\nHenri felt and watched her wet tongue begin to lick his oozing, blood engorged head and a moan slipped from his mouth. She pressed her tongue into his slit and moved his pre-ejaculate around with her tongue, bathing his head in the wet juices. He moaned again and had the desire to grab the young woman's head and thrust his cock into her mouth. It was the Ring speaking for him. \n\n\"He seems to like that, Marta,\" Yvonne said falling to her knees next to the young maid as she continued to lick Henri's cock head.\n\n\"Now, I know Peter likes when I suck his head into my mouth and use my tongue as I suck. I also move my hand on his shaft. I'll show you,\" she said before opening her mouth and taking Henri's head into her hot little mouth.\n\nShe stroked his shaft with both hands and sucked as she played with the underside of his head with her tongue. He moaned again. For someone so young she had learned well in a short time. Henri had a suspicion the little maid had done this more than a few times like she had said. She continued to suck and stroke and took another inch of his shaft into her mouth to show Yvonne before letting him out to talk.\n\n\"He is much wider and longer than my Peter, but you get the idea. Now you try?\" she said to Yvonne, pushing Henri's wet cock toward the queen.\n\n**\n\n\"This is one of the most humorous things I've ever experienced,\" Serena said, laughing and giggling. \"Yvonne's pretending she has not sucked a man and has the maid instructing her!\"\n\n\"Mother is brilliant! She's keeping the maid involved by acting na\u00efve,\" Heather said.\n\n\"Yes, and it's working. She will work herself up, teaching Yvonne, and have to have Henri inside of her soon,\" Serena said, concentrating again.\n\nShe could see Henri's body out of Yvonne's eyes. Yvonne was licking and sucking Henri's head and stroking his shaft as the maid instructed her. Serena could tell Yvonne was acting as if it was a difficult thing, which made Serena giggle all the more.\n\n**\n\n\"Very good, my queen, nice smooth strokes and try and take more of him into your mouth,\" Marta explained.\n\nYvonne pretended to gag and released Henri's cock with only two inches in her mouth. \"He is so big it is difficult,\" Yvonne said, acting like she was catching her breath.\n\nShe moved his cock back to Marta, who gladly took hold of him and began to suck and stroke anew.\n\nYvonne knew she had her. She could see the young woman's nipples pressing against her dress and watched her squeeze her legs as she sucked and stroked the king. She looked up at Henri and he smiled down at her knowing the same thing. It was only a matter of time before Henri would take the young woman.\n\nHenri let the young girl suck his cock for a few more moments before Yvonne motioned with her eyes for him to reach down and stop her. Yvonne watched as he did, pulling the young girl up by her shoulders and reaching down her young body to the bottom of her dress. She didn't complain or stop him as he lifted her dress off. She only had a light shift under the dress. Henri suddenly picked her up and carried her to the bed. She squealed with surprise but did not struggle. He laid her on the bed and pulled her shift up, revealing her unshaved sex.\n\nYvonne joined them on the bed and helped the girl out of her shift as Henri's head found her sex. She screamed with pleasure as he spread her open with his tongue and dropped his mouth full on her flushed sex.\n\n\"Oh, my king... oh my... what are you... ohh that is good... Oh by the ancients!\" Marta screamed.\n\n\"Has Peter not treated you orally?\" Yvonne asked.\n\n\"Oh... no... never... oh my goodness!\" the maid screamed, rocking and squirming on the bed.\n\nHenri feasted on the young woman. Yvonne watched him nibble her little clit and finger her tight young sex, driving the young maid into a frenzy. Several minutes passed and Yvonne had never seen nipples so hard and erect before. The maid's body was totally consumed by Henri's oral talent. Yvonne knew he could do anything to her if he wished.\n\nHe worked up her body, kissing and licking her until he found her engorged nipples and sucked both, nibbling and sucking each several times. In this posting he was primed to take her. Marta's chest heaved and her skin and face were flushed with blood. Yvonne leaned in and whispered into Henri's ear.\n\n\"Take her now, my love.\"\n\nHe moved slowly forward, positioning his cock at the moist entrance and gently eased his wide head into her tight sex. Marta screamed, clawing Henri's back in passion and lower still, grabbed his buttocks and pulled him into her. \n\n**\n\n\"We have penetration!\" Serena screamed.\n\n\"The moment of truth is upon us,\" Heather said, coming back over near Serena.\n\nShe forced herself to sit down next to Arianna. She grasped her ring sister's hands and Arianna took hold of Serena's. Together they held each other and waited for the climax of Mentula and the renewal spark to enter them through the rings upon their clitorises. Heather watched Serena intently, reading her facial expression to predict the moment of climax. If the new ring worked and they were renewed, immortality was assured her and all her dreams and desires would come true. Her grip tightened on Serena's and Arianna's hands, awaiting the moment where Henri climaxed.\n\n**\n\nMarta had never even imagined taking something so huge inside her body. Compared to Peter's cock, the king was massive, filling her up like never before. He was so large she felt him all the way to her chest, or so it seemed. It didn't hurt, it was just extremely full but she soon adjusted to his girth and length as her hands had pulled him into her with pure lust. This man, her king had sparked something inside her she didn't recognize. She had a hunger for him and it only got stronger as he began to withdrawal and thrust in over and over again.\n\nThrough glassy eyes, she watched the queen, looking down at her. There was a strange expression on her face, as if she was awaiting something. She almost looked eager for something to happen, but Marta dismissed it as a climax engulfed her body, the likes of which she had never experienced before. The massive cock of the king had reached new depths and brought new pleasure to her she could hardly comprehend. It was almost unnatural how incredible her climax was as it burst upon her body in euphoric waves of bliss.\n\n**\n\nHenri knew the young maid was in the grips of a climax. He felt her snug womanhood contract and grip his moving cock even tighter than it already was. Her firm, young body was not lost on him. She had never had such a man inside of her before and he felt it all around his shaft and head. It was enhanced by the Ring and the pleasure was glorious.\n\nHe thrust forth over and over, making the small breasts of the maid roll in circles upon her chest. He basked in the pleasure Mentula provided, the sensations were so far enhanced it was addicting. His queen urged him on with her looks, as she watched the maid and him back and forth. The anticipation on Yvonne's face was apparent. He felt his large orbs tighten slightly; he was nearing his climax as Marta seemed to remain in the grips of her own.\n\nHe was almost afraid to climax. He feared the new ring would not work and for some reason he was afraid to find out, because if it didn't, he knew what that meant. He knew he would have to die and a new Master would claim the Ring or his queen and her Ring sisters, he has come to love, would die themselves. For he had vowed not to take another innocent woman's life.\n\nHe also knew he had to find out. The pleasure in his cock increased. The maid beneath him shook and moaned with her continued climax. Yvonne knelt next to him, staring down at the young girl in anticipation of the end and his orgasm that would hopefully give them all new life. His thrusts strengthened. He felt his large testicles hitting the young girl's buttock as he slammed all of his length into her body, where no cock had gone before. They tightened fully and his climax was imminent.\n\nThe Ring grew hot as he neared his peak and it prepared to rob the spark and life from the woman Mentula was taking. Enhanced pleasure spread through his body from his straining cock until he could no longer hold his climax back. It was the moment they had all been waiting for.\n\nHis climax came, his semen sprayed forth into Marta in a spectacular sensation he only achieved while wearing the Ring. He groaned with pleasure as the next contraction surged forth, drenching the girls insides with his hot seed. His eyes were trained on the rings as his cock spewed forth. Both were at their brightest and he felt the power of the Ring taking the spark of the girl below him. His cock continued to spew forth and Marta suddenly went limp. He finished inside of her and looked at his queen in fear that Marta was dead.\n\nHe noticed very quickly the power Yvonne was receiving; her face was renewed to the flawlessness he had seen her gain when the Ring was reborn. He did not realize his body was reacting the same.\n\nThe spark had been taken but at what cost?\n\n**\n\n\"Yes! We are renewed!\" Heather screamed as she felt the power of the ring around her clit fill her with rapture and power. She watched her Ring sisters grow perfect before her as she also felt the change. Her breasts firmed, her face tightened and her body felt alive and energized with the fresh new magic the Ring had stolen.\n\n\"It worked, did it not?\" she asked Serena.\n\n\"I'm not sure... obviously we are renewed but Yvonne is worried the maid is dead. She is unresponsive at the moment. It might have killed her anyway,\" Serena said, looking worried.\n\n\"Henri will not take this well. He will think we tricked him into killing another woman. He will be very angry with us,\" Arianna said.\n\nThe three looked at each other with worried looks and Serena again concentrated on Yvonne's mind.\n\n**\n\nMassive amounts of semen gushed out of Marta's body when Henri pulled Mentula free. It seemed the substantial amount of effluent was not lessened by the new ring around his cock. A copious thick flow of white ran from her open sex onto the bed. The young woman was not moving nor did it appear she was breathing.\n\n\"Tell me I did not kill her, Yvonne!\" he bellowed.\n\nYvonne ignored him and went to Marta's face, patting her cheek and trying to roust the young girl.\n\n\"Marta... Marta!\" she raised her voice, patting her cheek harder and then shaking the woman's body.\n\n\"No! No, this cannot be... I have killed another innocent woman!\" Henri cursed, placing his hands on his head and becoming very distraught.\n\n\"Marta!\" Yvonne screamed, slapping her hard across the face.\n\nSuddenly the maid awoke, crying out in pain from the slap.\n\n\"What's wrong? Did I fall unconscious?\" she asked, her face stinging from the slap.\n\n\"Oh, my precious girl... yes you must have, you frightened us beyond belief,\" Yvonne said, raising the naked girl up and hugging her.\n\n\"I'm sorry... I was overcome with pleasure... I did not know something could be so wonderful.\"\n\nYvonne turned and looked at Henri, he had tears in his eyes and now the relief of seeing the girl alive was washing over him. The new ring had worked, keeping her alive but stealing her spark.\n\n\"Thank the ancients! You're alright!\"\n\n\"How do you feel?\" Yvonne asked.\n\n\"Wonderful and messy,\" she giggled. \"I see I have pleased the king, he has climaxed.\"\n\n\"Yes, Marta, you did excellent. Thank you for your service,\" Yvonne said.\n\n\"My pleasure and if you need my services again, my lord and lady, don't hesitate to call on me again. I should clean up and get back to my chores now.\"\n\nYvonne assisted Marta in cleaning up and dressing and let her out of the bed chamber. She turned back to Henri and saw him in deep thought leaning against the wall of the room, still naked. He looked glorious. His muscled body had returned and he was the model of perfection.\n\n\"Are you alight, my love?\" she asked.\n\n\"I'm perfect, my queen... but I admit I was horrified I had killed her.\"\n\n\"Yes, but you didn't. She is fine, has no idea what we did to her, as I suspected would be the case. By now the others will know it has worked. Serena has been in my head since this morning. We have done it Henri we have succeeded!\" Yvonne cried, running and jumping into his arms.\n\nTogether they fell onto the bed, kissing and holding each other with joy.\n\n**\n\n\"What a relief, the girl lives,\" Arianna called out in glee.\n\n\"Yes! Our casting of the new ring was a success! Look at us, we are again flawless!\" Heather said, spinning around.\n\n\"Henri will have to know other women forever now, but that is a small price to pay for his life and immortality,\" Serena commented.\n\n\"Yes, but this will not be an issue. There will be many women who desire the king, we will be young and perfect for eternity,\" Heather screamed, raising her hands to the heavens as her Ring sister's called out in chorus.\n\n**\n\nYvonne kissed her new husband. It was like a weight had been lifted from off of them. The dread of the Ring killing Henri was gone; the new spell had worked perfectly. She savored his naked body on top of her, knowing he would remain perfect as she and her sisters would forever. She felt his cock growing between them as they kissed. Mentula was awakening again with the Ring still firmly seated at the base of his cock. \n\n\"I want to feel Mentula, my king... I want to feel this new creation we have given birth to, for I sense the pleasure will be as if the Master was present.\n\n\"This is true, my queen. All the power and all the pleasure has remained,\" he answered.\n\n\"Yes, then show me! Take me the forbidden way, my king... sheath Mentula inside my ass,\" she begged.\n\n\"Your wish shall be granted, my queen,\" he said, yanking her robe open and pulling it off of her to be tossed on the ground.\n\nTheir flesh met. Her large, firm breasts smashed against his muscled chest and they kissed deeply once more. She felt the heat and width of his shaft press against her wetness and the heat of her ring above, glowing blue around her clitoris. Blood surged anew into Mentula and she hungered to be taken by him in her forbidden orifice once again. He was soon fully erect and throbbing against her sex as they kissed and his hands found her breast. A thrill of pleasure seized her as he pinched and twisted both nipples as their tongues danced together.\n\nYvonne felt his shaft become slippery from her juices as they flowed heavily in anticipation. With worry gone, she finally could relax and enjoy her new husband more fully.\n\n\"Wet your length in my sex and then take me the forbidden way,\" she whispered into his ear as the kiss finally ended.\n\nHe did not reply with words, only actions. She felt him move lower until the head of Mentula was at her moist, flushed sex. Suddenly he thrust his cock deep into her, driving the whole of his length into her body. She felt hot secretions forced out as he entered, oozing down to her wanting anus. He held deep from a few moments before pulling completely out and rising up on his knees. He took hold of her legs and bent them up and out, lifting her buttocks from the bed for better access to her forbidden hole. His cock was covered in her plentiful juices and both rings glowed brightly around the base of his cock.\n\n\"Yes, do not hesitate, my king... take me now... I want all of Mentula and the new pleasure!\" Yvonne voiced.\n\nHe took hold of his cock, bent it down and pressed his head against her tight, wet anus. She opened up for him with ease as he pressed forward and popped in, past her tight outer muscle. She screamed in pleasure as the heat and width of Mentula entered her, filling her full of flesh and exquisite pleasure. The new ring linked with hers around her clitoris and all the rapture she lusted for engulfed her body.\n\n**\n\nThe new ring gave Henri energy and strength he had not experienced before. He hadn't felt this young and vibrant since before the war. He finally started to realize why when he caught his reflection in the mirror on the dresser. Somehow, Yvonne and the witches had linked his new ring with theirs. He had received the power from the maid as they had. His body had become as flawless as theirs. He stared at himself for several moments, taking his appearance in and fully comprehending what had happened.",
        "His cock was surrounded by tight, hot, splendor, as he looked down from the mirror at his perfect wife and queen. Her clitoral ring glowed blue, fitting snugly on her little nub. He smiled down at her and pulled half of his long cock from her anus before shoving it quickly back in. His orbs slapped his wife's body with force and pleasure surged through his renewed body. His thrust rolled her breasts upward only to fall still quickly as they had become firm once more. Leaning forward slightly, Henri took hold of both as he withdrew and thrust again into her. \n\nHe felt the connection the new ring had made with hers.\n\nTogether they shared the pleasure and passion as husband and wife forever linked. Two perfect immortal beings, merged as one in the grips of ecstasy. Both their bodies vibrated with unadulterated bliss as his thrusts continued over and over. The new ring brought more pleasure than even they had felt before. For both, this was difficult to comprehend, thinking they had both experienced their fair share of pleasure, especially in the last few months. This was deeper, more personal and unbelievably powerful. Every inch of their bodies radiated unsurpassed pleasure which continued until the perfectly synchronized climax. \n\nThe End"
    ],
    "authorname": "jasliz",
    "tags": [
        "anal",
        "romance",
        "novella",
        "anal sex"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/the-master-and-the-ring-ch-12"
}
{
    "title": "Saving a Lost Kitten Ch. 07",
    "pages": [
        "Here is Chapter VII, the final episode of the \"Kitten\" story, and, again, my thanks to you for reading. All the characters described herein are 18 years of age or older, fictional; and any resemblance between them and anyone, living, dead, or imaginary, is purely coincidental. For all of you who've been waiting with bated breath for the hard core stuff: Now cometh the BDSM!\n\nBest Regards! \n\n- Ham Sandwich\n\n***\n\nThe days passed and turned into weeks, and my concern about Kitten's possible negative reaction to anal sex proved to be a non-starter. Patience and tenderness easily won the war. First, I began venturing a bit further south during oral sex. The first time my tongue grazed her little pink starfish, she flinched and let out a little yelp, but later, she admitted that she'd enjoyed the sensations it created. From then on, it was more of the same, and frequent, too, since I truly love cunnilingus and was all too often in the neighborhood, so to speak. She was soon looking forward to this kind of anal stimulation and was beginning to learn how to relax her muscles in order to allow my tongue to penetrate her there. Once she began moaning from my mouth there, I knew it was only a matter of time before we went all the way! Mind you, we were still enjoying all the other, more conventional forms of sexual intercourse, and she was no stranger to orgasms by now.\n\nNext I began some penetration with a very wet finger, just slightly at first, and then deeper as she became habituated to it. She soon became able to take the entire length of my finger in her ass without any discomfort or squeamishness. Once I'd worked my finger all the way in, I'd slowly pull out until I felt her sphincter muscles contract, and then I'd hold there until she relaxed once again. Almost at once, she was enjoying more profound orgasms because of the addition of the anal stimulation. \n\nI told her that once she could take two well lubricated fingers without any discomfort, then she was ready for the big banana - but there was no hurry to get there! This at once gave her something to shoot for and took away any pressure or coercion she might have felt. A week went by after we'd reached the two finger milestone, and I said nothing about pushing forward. Then (can you believe it) Kitten actually asked me to try getting my cock into her there! \n\n\"Are you sure?\" I asked.\n\n\"I think I can do it if you go slow,\" she replied, so I applied the lube and had her kneel doggy style over the side of the bed. \n\n\"OK, we're good to go here, so you reach behind you and guide the space shuttle up against the docking port. Then I'll fire the thrusters just a little and see if we can achieve a lock.\" Nothing like a little levity to loosen up a tight situation, I thought, pun intended. I could soon feel the head of my cock insinuating itself past her anus. Once it was inside, I told her, \"From here, you will control what happens, because I don't want to go deeper into you until you're able to take me. So lean your hips back into me when you're ready to take more.\"\n\nKitten was wisely taking her time and getting accustomed to this larger dilation, and we waited there for a few minutes until she pushed her body back onto my cock a little more. By this time, I had about two inches of it inside her, and the sensation was heavenly already! It was everything I could do to keep from orgasming then and there, what with the tightness, texture and warmth I was feeling.\n\nWe continued like this for a little while until she'd taken about half of me. And then, the magic happened. In a matter of seconds, I felt her muscles yield to my advances, and she opened up to me fully. The rest of my cock slid into her effortlessly, and Kitten decided she liked it!\n\nI began moving in and out, stroking her slowly.\n\n\"Oh, Gary, I can feel it going all the way into my ass!\" she exclaimed. \"It's so good! I can't believe it! I love how you're fucking me in the ass! Harder, fuck me harder! Fuck me hard and deep! I can feel your balls hitting my pussy! Your cock feels so good inside me there! Oh, yeah! Oh, IT'S SO GOOD, GARYYYY!! OH, MY GODDDDDDDDD!!\" and she had an orgasm. An orgasm from just anal intercourse alone! And she was shaking and trembling and crying and moaning, all at once. It was so awesome that I couldn't hold myself back any longer and was filling her bowels with my semen and trying with all my strength to remain standing. Neither of us could speak for a while afterward, nor was there anything that needed saying. Tender hands and soft gestures communicated everything that was necessary.\n\nSome time later, Kitten and I were cuddled together in bed. \"How is it possible that it was so terrible with Pluto and so wonderful with you?\" she asked.\n\n\"I'm sorry, what?\" I responded, having been shaken loose from the wonderful daydreams I'd been having.\n\n\"Anal sex. It was horrible when Pluto did it to me, but with you, it's amazing! How can that be?\"\n\n\"I guess it's because I was trying to be patient,\" I said, but what I really wanted to say - but somehow couldn't - was, \"It's because I love you.\" \n\nKitten and I didn't attend the club every night, but my responsibilities did require my presence there rather often, and Kitten would always accompany me. She'd become relatively familiar to many of the regulars, none more than Nigel, who was a former president, now vice-president, and my longtime close friend and mentor. He and his mate, Fiona, were fixtures at the BDSM club. Fiona especially had taken a liking to Kitten, and the two of them were frequently engaged in long conversations while I was occupied elsewhere with my duties. \n\nAt the time, I hadn't given those conversations a second thought. Then one afternoon, Nigel called me. \"Are you coming to the club tonight, mate? We're having the special program, and I could use your assistance.\"\n\n\"Oh, sure,\" I answered. \"We'll be there. By the way, what's the special program?\"\n\n\"It's entitled 'interrogation by torture,' and it ought to be quite interesting! There is some historical merit to it,\" Nigel went on. \"As I'm given to understand, in ancient Greece, the testimony of a slave was not considered admissible as evidence unless obtained under torture.\"\n\n\"Sounds intense!\" I replied.\n\n\"Quite. There's every indication it should be an unforgettable event.\"\n\n\"Who's doing it?\" I wondered.\n\n\"Well, that's another thing, mate. I've been asked to keep the particulars secret until showtime, so it will also be suspenseful as well as unforgettable.\"\n\n\"Wow! Okay! Oh, we'll both be there for sure to see this!\" I said. I wasn't scheduled for duty at the club that night, but this was a presentation not to be missed! \"Kitten,\" I said, \"we're going to the club tonight. There's going to be some special presentation.\"\n\nWe both arrived a trifle early, given that Nigel had requested my help with something or other. I found Nigel, who said, \"Gary, would you mind lending a hand? We need to have a look at something in the Blue Room. That's where the program is to be held tonight. There's been a report that the ceiling hook is becoming loose, so there's a safety issue to be dealt with.\"\n\nI couldn't imagine how an eyebolt that went into the beam at least six inches could come loose, but safety is a primary concern in our club, so I got up to go with him. \"Kitten,\" I said, \"Nigel and I are going to take a look at this. Why don't you stay here? It should only be a few minutes.\" And off we went.\n\nThe room was empty when we got there. A pair of handcuffs dangled from a chain that was connected to the eyebolt in question. Nigel pulled on it and it appeared to hold just fine. \"Have a go at it, Gary,\" he suggested. I grabbed hold and gave it a tentative pull. \"Put your whole weight into it,\" Nigel suggested. I did. There was no indication of any looseness at all. \"Let me pull on it, too,\" he said, and he reached up and grabbed the handcuffs. I looked at him and suddenly he'd snapped both cuffs around my wrists, immobilizing me there. Fiona was behind me unseen and quickly unfastened my pants and pulled them and my shorts around my ankles and hurriedly left the room. \n\n\"Wait! What?\" I stammered.\n\nPresently, I heard Fiona announce over the PA system: \"Good evening, members and guests. Tonight, we have a special program entitled 'interrogation by torture' beginning now in the Blue Room. Our own BDSM Club president, Gary Dillon, a Dominant in his own right, has consented to be the one who will be tortured.\"\n\nI DID?! WHAT THE FUCK?! I thought to myself. \"Nigel, what the hell is going on here!?\" I demanded.\n\n\"What's going on is you're about to be tortured, mate,\" he replied, \"and my advice to you is to let it be.\"\n\n\"And you're going to just stand there and allow it? How can you do this? Nigel, I thought you were my friend! \"\n\n\"I am your friend, mate. I am so much your friend that if it comes down to a choice between our friendship and making you happy, I'm willing to sacrifice the friendship in favor of your happiness. Trust me, you'll come 'round to this in a bit.\" I had no idea what he was talking about and started to protest. \"Excuse me for a sec,\" he said and walked away, literally leaving me hanging! \n\nMembers began trickling into the room and formed a circle around me. There was some murmuring as they tried to make sense out of what was going to happen. I shared their ignorance! \n\nFiona came back, followed a minute or two later by Nigel and Kitten, who was holding something slender in her hand that was a little over a yard long and hung limp at her side.\n\nWhen she came closer, I finally realized just what it was she had in her hand. It was a four foot length of electrical cord, the kind that's used to connect a lamp or other small device to the wall socket. Now, if you're into the typical BDSM toys like riding crops, floggers, switches and all, you'd probably dismiss a piece of line cord such as this from consideration as a serious implement for discipline, but you'd be mistaken. Gravely mistaken! There were people doing felony time in prison for administering corporal punishment to their kids with instruments like this. Its double strands of copper wire provided a high density strike, and it would be all too easy to deliver a blow that would break the skin. Kitten was behind me now, and I could hear it whistling as she swung it through the air in circles and figure eights. I saw Nigel and Fiona standing to my right side and shot them a look of unbelief. \n\nAnd then everything happened at once. The whistling sound was replaced by a whack as the wire sliced over the cheeks of my ass. I felt an immediate explosion of intense pain along the line where it made contact with my skin, followed by a sharp burning sensation as the strike became internalized. OW, DAMMIT, THAT REALLY HURT, I thought. I saw Fiona cringe at the sight and knew that a severe welt had been raised instantly. Nigel was attempting with all his might to remain stoic and wasn't being entirely successful at it. \n\n\"OW, DAMMIT! THAT REALLY HURT!\" I hollered, and I was about to say more when the first strike was followed by another that was equally severe.\n\n\"Be quiet!\" commanded Kitten. \"This is an interrogation, and you'll speak when you're questioned, do you understand?\" And then there was a third strike, just as painful, when no immediate response came from my lips. \"I said, do you understand?\"\n\n\"Yes, I understand,\" I said slowly and quietly. But, of course, I didn't understand. I didn't understand a lot of things: Why this was happening to me, what I'd done to deserve it, and most of all, why Kitten was doing it!\n\nAs if she'd been reading my mind, Kitten said, \"I guess you're wondering why this is happening, so I'll explain.\" I looked around the room and saw a multitude of faces in various expressions of shock and concern as she continued. \"You're supposed to be the one who leads this dance that you and I have been doing for weeks now, and you're not leading. So I'm having to lead it, and now I'd like to know: Am I anything of permanence to you, or is this only a temporary relationship of convenience that we have going? I've been waiting for days and days for you to make your intentions clear, and avoidance is all I've gotten.\"\n\n\"Well?\"\n\n\"No, it's not a temporary relationship of convenience,\" I tried to explain. \"It's just that... well... I didn't want to take the chance that what we had would go away if I told you how I really felt about you.\"\n\n\"So, then, what I hear you saying is that you've been afraid to be honest with me?\"\n\n\"Well... yes.\" \n\nAnd Kitten smacked my ass four or five times in quick succession as she said, \"And you're the one who's always talking about trust and honesty and how important they are to a relationship! Dammit, Gary Dillon, you should be ashamed of yourself!\" And then she gave me another whack for good measure! My ass was burning up!\n\nI couldn't look at anybody. All I could do was to stare at the floor and admit to myself that indeed I was ashamed. I wanted to crawl under a rock and hide, but instead, here I was being forced to publicly face up to my failure to live up to the standards I expected of everybody else.\n\nAll I could do was tell her I was sorry.\n\nAfter awkward seconds of silence, she said, \"Gary, the sex is wonderful, and, yes, I love what you've taught me and all that you've done for me. But I think you're still hung up over your past failed relationship and afraid to make a commitment. And so it's come to this as a desperate attempt to get through to you. If you don't learn any other thing from this scene tonight, you can remember this about me.\" And she drew back her arm and began swinging in earnest as she spoke.\n\nWhack. went the wire.\"I'M. . .\" Kitten yelled. \"OW!\" I hollered.\n\nWhack. \". . .NOT. . .\" \"JESUS!\"\n\nWhack \". . .DAMMED. . .\" \"CHRIST!\"\n\nWhack. \". . .ANNE!\" Kitten concluded. \"OW, OW. FUCK! SHIT!!\" I screamed in pain. \n\nThen Nigel came forward and unlocked the handcuffs to free me. \n\nI stood there rubbing my wrists to restore the circulation. I tried pulling my pants up, but it was too painful to get them over my hips. My ass was on fire! What happened next made me forget my own pain entirely. Kitten discarded her torture wire and went to her knees in front of me. She looked up at me and spoke quietly but clearly. \"Gary, I want you, and want you to want me. I need to be yours and be with you for always, and so I am asking you now - I am begging you - even if you don't love me, will you have me as your slave?\"\n\nHer words astonished me! Of all the things that she might have said, these were the ones that I least expected to hear. Literally, I choked up and stood there mute and dumb in an attempt to process and respond to what she'd asked me. It seemed as though the entire world had come to a standstill and was waiting with bated breath for me to answer. I summoned up every bit of strength I had within me and replied: \"No\" was all I could say, and all at once a deathly hush fell over the room. \n\nIn a second, the expression on Kitten's face changed from hopefulness to horror. She slumped to the floor at my feet, crestfallen and defeated, and the tears began to roll down her face.\n\nI stood there frozen. I wanted to say more, tried to speak, but I just couldn't get the words to come out of my mouth. I could hardly even breathe. I felt as though incredible spiritual forces were working against me, paralyzing me, keeping me from saying what I wanted to say, what I desperately needed to say. Dammit, this woman whom I loved was grieving and disintegrating before my eyes, and I was powerless to intervene. Fiona began to move forward in an attempt to comfort Kitten in her despair, but Nigel held her back. I heard him whisper to her, \"Stop! It's not over.\"\n\nWell, I decided, even if I couldn't speak, at least I could still move! I reached down and lifted Kitten to her feet and looked her straight in the eyes, and from that moment I could talk once again.\n\n\"No,\" I said again, \"I won't have you as my slave,\" and the silence in the room continued as the finality of what I'd said became clear.\n\n\"But I want you as my submitted wife, that is, if you'll have me,\" I added. And this time, I was the one who fell to his knees at her feet. \"I love you. Will you marry me, Kitten? Can you somehow find within yourself the willingness to be the obedient wife of a failure like me? I was so afraid of losing you that I couldn't bring myself to tell you how much I've come to love you in these few days we've been together.\" And it was my turn to look hopeful, but not by much. I mean, why would she marry somebody like me? Somebody who didn't even have the courage to be honest with her about the way he'd felt. She was right. I was a fraud. I said one thing, but I did the opposite while all the while making those preachy, ivory tower statements about \"truth\" and \"honesty.\" \n\nI looked away and muttered something about \"not being worthy of being her husband or a Dom, either.\"\n\nKitten pulled my face around and forced me to look at her. \"No, Gary. You ARE worthy of being called a Dom. The fact that you were confronted with all of this and were honest enough to admit to your shortcomings in front of all these people proves it. Only a REAL Dom would have the courage to do that. Not some pretender. And that's the reason why I choose to marry you. You, my Sir! You, my Master! My answer is 'yes.' I will gladly, cheerfully and proudly be your submitted wife! I loved you from the moment you rescued me and became my knight in shining armor.\" We grabbed each other and held on tight while the room resounded with whooping and cheering. And, finally, the world began turning again.\n\n\"Told you he'd get it sorted,\" Nigel said to Fiona, triumphantly, laughing out loud in an unusual fit of public emotion. He was the first of the many who came forward to offer congratulations. \"I will need to get 'round to having your desk lamp repaired,\" he confessed. \"After all, where do you suppose Kitten got hold of that bit of flex cable she used to stripe your arse?\" He held out the Leatherman tool he carried in his pocket to demonstrate its ability to cut wires, and I laughed and clapped him on the shoulders with my hands. What a hell of a pal! \n\nBut his statement did remind me of a pressing need.\n\n\"Wife!\" I called, and Kitten was at my beck and call in a jiffy. \"I have my first task for you as your newly appointed Dominant.\"\n\n\"Yes, Master?\" she asked, radiant with joy. \"Anything!\"\n\n\"Good! Find me some skin lotion or liniment or something for my sore butt, please. It still really hurts, dammit!\"\n\n*** \n\nSeven weeks had now passed since that night when I had asked Kitten to marry me and she had agreed. Nigel and I arrived at the club to oversee the final preparations for the wedding, which was to take place there that very evening. In a little more than an hour, she would become my wife!\n\n\"An actual priest? We've managed to get a genuine, bona fide Roman Catholic priest to come here and perform the ceremony? HERE at the BDSM Club? How in blue blazes did we manage to do this??\" I asked him in astonishment as we made our way inside with me carrying my formal wear in a garment bag.\n\n\"Search me, mate,\" Nigel replied, with a shrug of his shoulders. \"I'm sure the $20,000 that we donated to the diocese to equip their school with computer equipment had nothing whatever to do with it.\"\n\n\"TWENTY THOUSAND DOLLARS!\" I exclaimed. \"Where the hell did we get twenty thousand dollars?\"\n\n\"Everybody ponied up, big time. You're quite well liked, you know, and we all wanted to make sure you have a wedding that's spot on. Doesn't hurt that Kitten is such a darling, either,\" he offered. \"Look at the way our ladies of the club fawn all over her. They've practically adopted her. Took her out and made sure she got a smashing wedding dress and even saw that she had a proper hen-do.\" ",
        "We walked into the main playroom, where the ceremony was to take place. All the dungeon furniture had been moved against the back of the room, and the front had been arranged for the wedding itself. On one side, a line of tables had been set up to hold the reception buffet. Mistress Diana was overseeing the placement of folding chairs, the actual physical labor being performed by her slave, Bernard. She was clad in black leather, with glistening long black boots, and had her usual stern demeanor about her. \n\n\"Set up another row, slave. There will be a hundred people here tonight at least, and you-don't-want to deal with my displeasure if anybody's forced to stand,\" she commanded.\n\n\"Yes, Mistress!\" Bernard responded at once. Nigel and I smiled to ourselves and continued to my office, where I deposited my clothes bag.\n\n\"Well, I'm just totally overwhelmed by all the effort that everybody has put into this, and I have no idea how I could possibly show sufficient gratitude for it,\" I allowed.\n\n\"That's easy enough. Just agree to carry on as president of the club for the next ten years,\" replied Nigel, and I wasn't entirely sure he was joking. \n\nI fired up the sound system and started some soothing music playing in the background. Other people were beginning to arrive. Raymond and Chef Lisa came in to say that they had an enormous amount of buffet equipment and food to cart in, and could we find somebody to assist? We all went back out to the playroom and saw that all the chairs had been set up. I asked Mistress Diana if she could spare Bernard for a while, and she shouted out, \"Slave!\" \n\nBernard came running. \"Yes, Mistress?\" he deferred.\n\n\"What took you so long? Go with Gary and Nigel. They need some help,\" she decreed.\n\n\"Yes, Mistress, at once!\" he said, and we all went off to Raymond and Chef Lisa's catering van. \n\nOnce we got there, I told Bernard that his help was needed bringing in the food and serving supplies.\n\n\"Yes, sir,\" he said. \n\nI laughed out loud. \"Bernard, I'm not your Master. You don't have to call me 'sir,' you know.\"\n\n\"Yes, sir. I'm sorry, sir!\" was his flustered response, and he went off to do Raymond's and Lisa's bidding.\n\nNigel and I shook our heads in amusement. \"Got him trained, hasn't she?\" he observed. \n\nLaura's Dom let us know that they were setting up her electronic keyboard and could we turn off the background music and adjust the volume for her, so it was back to the office once again. Once that was done, we returned to the playroom and were treated to the beautiful sound of Bach sonatas played to perfection by Laura, which only partially relieved the stress of too many people having to do too many things in not enough time.\n\nIt was then that an elderly gentleman in a black suit and a Roman collar was brought to us and introduced as Father Seamus Oreiley. \"A grand afternoon it is, isn't it?\" he opined with a wonderful Irish lilt. \"And which of you two lads would be the groom?\"\n\nNigel pointed at me. \"I'm the one who has that honor,\" I replied. \"Gary Marshall Dillon. Very pleased to meet you, Father Oreiley. Thank you for coming here to officiate,\" I said, with the emphasis on \"here.\"\n\nFather Oreiley looked around the room. \"A very interesting place that you have here, so it is,\" he observed, while examining a Saint Andrew's Cross that was prominently on view in the back. \"I ought to bring my parishioners to see all of this when I do my homily on martyrdom, I should. But for now, shall we go somewhere and make sure all of your wedding licensing is in order, and then I'll meet your bride.\" And so, it was back to the office once more.\n\nFortunately, all the forms were correct, avoiding the spectre of what Nigel called \"a spanner in the works,\" and so we moved to the playroom once more. \"I'll take you to the bride and introduce you,\" I offered, but Mistress Diana was there and intervened.\n\n\"No, I'LL take him to your bride! You know it's bad luck to see your bride in her wedding dress before the ceremony!\" and she herded the good Father to one of the back rooms as I saw his look of amusement at Diana's bold attire.\n\nI looked at my watch and almost died of shock! WHERE HAD ALL THE TIME GONE TO? We only had fifteen minutes before the wedding was to start! I hurried back into the office and quickly got changed into my formal wear. Nigel came in just as I was finishing up. \"Aren't you going to get dressed?\" I asked him.\n\n\"Already am dressed, mate,\" he responded. \"I'm not the one getting married today, so what I have on is fine.\"\n\n\"You turkey!\" I laughed and then got serious. \"Alright,\" I said and took a deep breath, \"let's get out there!\" \n\nThe music stopped and the room got quiet as anything when we entered and took our places at the front of the room. I noticed that all the seats were taken - the place was packed! Father Oreiley came out of the back and made his way up, standing before us, and the music began once more, the strains of Bach becoming the more familiar repertoire heard during these occasions. Someone dimmed the lights except for the one light in the entrance way.\n\nAnd then I saw her as she stepped into the room, and the light on her wedding gown transformed her into a shimmering, heavenly vision. My very own personal angel, coming here to earth to make my life a fount of joy. All the people in the room came to their feet as she slowly floated down the aisle to take her place next to me. I couldn't take my eyes off of her, but she demurely kept her gaze downward, her veil covering her face. Once again, Kitten had become my spotless virgin bride!\n\nFather Oreiley called us both together in front, facing him. He extracted a small black book from his jacket, and I noticed that it opened to the appropriate page almost of its own volition, the many years of use wearing a crease at that spot. He drew in a breath to begin speaking. . .\n\n. . .and then he stopped. He looked down at his book and then up at the people in attendance. He seemed to be unsure of himself for a moment, and I had a second of panic imagining that he'd decided that he ought not perform this ceremony. . .\n\n. . .and then he smiled. \"I do believe I've done so many weddings over these thirty years that I could do them in me sleep,\" he said in a loud voice. \"But something about THIS wedding, here in THIS place today, calls me to administer the vows afresh,\" and he closed the book and returned it to his pocket.\n\n\"Children,\" he began, \"I'm going to tell you all a story. It took place thousands and thousands of years ago when God had just finished creating the world. He made all the fishes in the seas and all the birds in the air. He made all the animals and all the plants, he did, just by speaking them into existence. It was easy for God to do all of this because He is all powerful, although we cannot imagine how it could possibly be done. But for Him, it was effortless. And He made man, too. The first man was Adam, and Adam knew God personally in the same way that you and I know our best friends, but Adam also knew that God was the Creator. . \n\n\"God had all the animals pass before Adam, and He gave Adam the privilege of giving names to all of them. One reason why God did this was so that Adam, and all of us who followed after him, could have a part in the creativity. It's the reason why we imagine things and make things, and it's one of God's gifts to us.\n\n\"But there was another reason why God brought the animals before Adam. It was so that Adam would see that all the animals went about two-by-two. They all had mates, but there was no mate for Adam to be found among them. You see, children, God was preparing Adam to appreciate the grand and wondrous thing that He was about to do for him. God was going to prepare a mate, a helpmeet, for Adam, because He said that it was not good for the man to be alone.\n\n\"So that night, when Adam fell asleep, God went to work! He took a part of Adam's flesh and bone and used it to create Adam's helpmeet. Some people say God took one of Adam's ribs, but the original language of the Bible is more correctly translated as 'flesh and bone,' and some Bible scholars believe that God may have taken as much as half of Adam's body to fashion her. If He did, I like to believe that He took the half that held Adam's heart. And He created woman, and she was the pinnacle of His creation, His grandest work.\"\n\nI looked around the room. Everyone was caught up in Father Oreiley's story. I saw Diana seated in the back row with Bernard standing behind her, and her countenance had changed. She no longer looked angry. Indeed, she looked innocent and child-like as Bernard's hands tentatively caressed her shoulders.\n\n\"Adam woke up fully healed with no memory of any trauma,\" he continued. \"When he opened his eyes, the very first thing he saw was this woman, this helpmeet standing there smiling before him gloriously naked and without shame. He knew at once that she was exactly what he needed, and his heart went out to her. Oh, children, she was so beautiful, so perfectly fashioned, and so full of love! Every part of her, from the hair on the top of her head to the soles of her feet, and everything in between, was created for loving!\n\n\"And God told Adam, 'She is what I created just for you, My boy. She is My gift to you! Cherish her, lad! And if any man who follows after you doubts My existence, let him look upon her, and there's the proof of it!' So Adam rejoiced and held her to him and felt her warm, soft skin and savored her fragrant, womanly aroma. She was altogether milk and honey, and the sound of her voice when she spoke his name was surely the sweetest of music to his ears. Then Adam kissed her and fondled her and brought her to his bed, and they made love to each other until they could stay awake no longer, so they slept. And then they woke up and did it all over again! Oh, how they cared for one another! And God saw it and blessed it and was pleased, so He was, and it was good. All of it was good. And to this very day, a man and a woman will cleave to each other and become one flesh, just as God designed.\" \n\nI had turned to look at Kitten, who was caught up in the story just like the rest of us, and when I noticed Diana again, I saw she was crying softly. Bernard was sitting in the chair now with Diana in his lap, his arms tenderly around her waist, and he, as a man, was comforting her gently, speaking to her softly as though to a child. It was an astonishing thing to see this transformation.\n\nFather Oreiley turned toward Kitten and me. \"Gary,\" he said, \"will you now have Kitten to be your wife, forsaking all others? Will you love her and cherish her, and will you provide for her and the children you will have together and protect her for as long as you live? If need be, will you lay down your life for her as our Savior did for His Church?\" \n\n\"I will, Father,\" I answered, so choked up I could barely speak. \n\n\"Kitten,\" he continued, \"will you have Gary to be your husband, forsaking all others? Will you obey him and respect him? Will you teach your children to obey and respect him? Will you love him and comfort him? Will you submit to him as God commands?\"\n\n\"I will. I WILL,\" she said.\n\n\"Who has the ring?\" Father Oreiley asked, and Nigel came forward with a silken pillow on which rested the titanium Eternity collar that I took in my hands.\n\n\"That's hardly a ring!\" Seamus exclaimed. \"That's a collar!\" \n\nKitten spoke up in a meek voice. \"But, Father, you wear a collar yourself.\" \n\n\"Aye, child, I do! My Roman collar is a sign of my priestly consecration to God. Whereas THAT collar is a sign of,\" and he paused in thought for a moment, \"your Godly consecration to your husband,\" and he laughed out loud. \"WHO HAS THE COLLAR?\" he said, loud and true.\n\n\"I do,\" said I, and I placed it around Kitten's offered neck and fastened it with the setscrew and wrench.\n\n\"By the power vested in me by the Holy Catholic Church, in front of God Almighty and these witnesses, I now pronounce Gary and Kitten man and wife. Gary, you may kiss your bride!\"\n\nThe room was so quiet, I swear you could have heard a mosquito flying in there! I took Kitten in my arms, lifted her veil and kissed her fully and properly as the room erupted in cheers and applause. Father Oreiley was beaming! \"Cherish her, lad,\" he whispered, and I replied, \" I will, Father. I will!\"\n\nNigel spoke up: \"The wedding party will retire to the back room for a few moments and return for the reception. In the meantime, all of you are welcome to partake of the buffet.\" In the back room, the wedding papers were signed and it was all made legal and official. \n\nFiona said she thought the music was lovely. I said that the best part of the music was that it didn't come from an upright piano, which Kitten thought was hilarious. She was the only one there who understood!\n\n\"Are you staying for the buffet, Father?\" asked Kitten.\n\n\"Oh, no, child. I must get back to the rectory as soon as possible, I'm afraid,\" he replied.\n\nFrom out of nowhere, Nigel produced a tray with shot glasses filled with whiskey. \"Surely you can stay long enough for a taste of some fine Irish whiskey,\" he suggested.\n\n\"And Father Oreiley said, \"Well, I expect I can always take some time for that!\" We took hold of our glasses and raised them as Father Oreiley said, \"May we all be in Heaven five minutes before the devil knows we're dead!\" and we all laughed as we drank. \n\n\"Wow, this is good stuff!\" I remarked.\n\n\"Aye, it is!\" said the Father, smacking his lips in appreciation.\n\n\"Ought to be,\" replied Nigel. \"It came from that bottle of Black Bush Gary keeps hidden in his desk.\"\n\n\"You turkey!\" I said once again.\n\n\"Well, now, I really do need to go,\" the Father said. \"I do the mass every morning at Saint Thomas. I want all of you to know that the church doors are always open for you, all of you.\" And to me: \"Take care of her, son. She's a special lady.\" I shook his hand and thanked him once again for what he'd done for us, all of us.\n\nKitten suddenly reached for him and hugged him, her eyes shut to hold back the tears that were forming. \"Be blessed,\" he said, tenderly putting his hand on her head. Then he put his hand on her stomach when she let go of him and said, \"Be fruitful and be blessed, my child.\" And then he was gone. What an amazing man, I thought. I took Kitten's hand in mine, and we went out into the playroom to join in the festivities. Our married life had begun.\n\nChef Lisa had prepared an awesome spread of food. She was dressed in her full regalia of checkered pants, chef's jacket and toque and was personally carving up and serving a delicious roast. Mischievous Lisa selected all of the food items from a BDSM theme, and we had whipped potatoes and beaten biscuits, among other things. We all ate and ate until we could eat no more and put away four cases of champagne to boot.\n\nThe wedding cake was a wonder to behold, tall and elegant! It was only when we got close to it that I noticed the ornamentation on the top. Somebody with a 3-D printer and way too much free time on his hands had created full-color, miniature replicas of Kitten and me out of plastic. She was depicted as a saloon girl from the Wild West, clad in silk stockings and a garter belt. I was dressed in chaps with a sheriff's badge on my vest and wearing a cowboy hat. Neither of us had on anything else, but both of us held lassos that were roped around each others necks, and an inscription in frosting underneath said, \"Marshall Dillon and Miss Kitty - Tied Together At Last.\" \n\nTurkeys, every one of them, I thought to myself, but I smiled.\n\nBernard and Diana were the first to leave the party. He came up to us with Diana in tow and offered his congratulations and thanks. \"We really must go,\" he said. \"Diana's really tired, and I need to get her off her feet.\" With eyes only for her, he took her in hand and said to her and with affection and firm assurance, \"Come, my precious one. We're going home now.\" And she let him lead the way. \n\nI took a week off from my work to honeymoon with my bride. I cheated just enough to keep up with my email. On the second day, Nigel sent me a link to a newspaper article about a shooting that occurred outside a nightclub in a seedy part of town. It seems that a certain Pluto Brown was killed by multiple gunshot wounds as a result of some kind of altercation. \n\nI was surprised at my reaction to this news. I had wished vengeance upon him for the way he'd treated Kitten, but now that he was really dead, it wasn't righteous satisfaction I was feeling. Instead, it was sadness. I didn't know the circumstances that had driven Pluto to become the hate-filled man that he was. I only knew that, now, he'd never be able to experience the kind of love of a good woman that I enjoyed. And that was truly a tragedy.\n\nKitten and I made a triumphant return to the club after our honeymoon. My \"willingness\" to undergo the torture actually increased my stature there, and the membership honored me with the title \"President Emeritus\" when I finally left office. Submissives especially looked upon me with greater respect and would often pat my ass when I passed by, which everyone found amusing. I just took it all in stride. Kitten, too, was welcomed into the inner circle with open arms. Our story became one of those legends that got embellished over time. \n\nEPILOGUE: Seven Years Later\n\nIt was satisfying to be the featured speaker at the grant writing seminar, all expenses paid and a hefty honorarium as well, but it was even more satisfying to return home to my wife and kids. I could hardly wait to put my key in the door and step inside. \"Daddy!\" both of my twin girls hollered at once and rushed to jump into my arms. \"We missed you so much!\" they exclaimed.\n\n\"I missed you both, too!\" I answered, and I meant it, but I was looking for Kitten. She was standing at the entrance to the kitchen, waiting for her turn to be greeted. As soon as I was able to do so, I went to her and held her to me. \"It's good to be back with you,\" I said, devouring her with my eyes.\n\nBefore I could say anything else, the twins began: \"Daddy, mommy was bad. She took her big wedding necklace off today!\"\n\n\"Oh, she did, did she?\" I exclaimed with exaggerated bravado.\n\n\"I took it off because it needed cleaning, so I polished it,\" she said. Well, it did have a beautiful shine to it. \"You two little snitches!\" she mock scolded, and they both cackled with delight. \"Now, both of you please go to your room for your nap time while Daddy and I 'talk' about some things.\"\n\nThey both traipsed off together dutifully. Once she was sure they were gone, Kitten said, \"I missed you, too, Master. After dinner, we're putting those kids to bed and then you and I are gonna fuck like weasels! That is, with your permission, sir?\" \n\n\"Permission granted!\" I said enthusiastically.\n\nLater that evening, after we'd thoroughly worn each other out, I lay there with my head between her legs, idly plying my fingers across her stomach. \n\n\"Master, I wish we'd turned off the lights so you wouldn't have to see those ugly stretch marks,\" she said. She must have been reading my mind. I had been looking at them, but where she saw ugliness, I saw majesty. I was in awe of them.\n\n\"Tell me something, Kitten. Be brutally honest. When I correct you, and you have marks from the switch across your ass, are you ashamed of them?\"\n\n\"NO, SIR! Of course I'm not ashamed! Those marks prove my willingness to honor you by submitting to your discipline. There's no reason on God's green earth why I should be ashamed!\" she retorted with vehemence and passion. \n\n\"Well, then, don't be ashamed of those stretch marks, either. They're the permanent proof of your submission to both God and me. In fact, you should be proud of them. They show that you're a woman, a fertile, blessed woman who was willing to endure great pain in order to bring new lives, our children's lives, into the world. You were willing to risk your own life and submit to it. Only women are called to do that. Shame has utterly no part of it!\" ",
        "And we were quiet for a while, but I was thinking. Did the fact that women had to face up to the pain of childbirth mean that all women were essentially submissive, either by nature or by design, or maybe even masochistic? I didn't know, but it was certainly worth considering.\n\nOne thing I did know: Kitten was mine and I was Kitten's, and we were a family. And that made me the most blessed man in the whole effing world! \n\nOh, and, gentle reader, just in case you were wondering? We did live happily ever after. \n\nWe really did!\n\n(the end) \n\n*****\n\nThanks to my readers for the many stars they've given out for this series. It was a fun, fulfilling story to imagine and to put into words. Perhaps someday in the distant future, long after we're all gone, a student of literature will pore through the ancient archives of Literotica in search of some submissions that are worthy of remembering, and I would hope that something that I wrote would perhaps deserve even so much as a footnote in his or her learned paper. \n\nThanks go out to Shysub412, a grand Irish lass, so she is, for her expert help in tweaking the good Father Oreiley's voice. Once again, she has come to my rescue! I raise a glass of Bushmills as a toast to her and wish her inspiration for her own writing and, more to the point, happiness for now and for always. Only she knows how she was honored within the depths of this tale.\n\nRecognition in memoriam to French photographer Jeanloup Sieff (1933 - 2000) for his elegant and inspirational nudes, especially \"Derriere anglaise, Paris, 1969,\" and for his statement recast here by Father Orielly about the female form being proof of the existence of God.\n\nFinally, but most importantly, all my affection goes out to you, Chef Lisa, my darling, adorable, womanly wife, for the continuing support you provide to me over my writing about my strange notions about the essence of love in its many forms. I want you and everybody who ever reads this to know that you are the world to me. I couldn't do it without you, Pooky, because you're my utmost inspiration!\n\nPeace!\n\n-Ham_Sandwich"
    ],
    "authorname": "ham_sandwich",
    "tags": [
        "anal",
        "whipping",
        "happily ever after"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/saving-a-lost-kitten-ch-07"
}
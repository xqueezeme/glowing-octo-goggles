{
    "title": "My Sister's Friends Ch. 04",
    "pages": [
        "If you have not read \"My Sister's Friends\" Parts One, Two and Three this will make no sense to you. I suggest you read them first and then continue on with this selection. Thank you for your interest. \n\nWorshipper622 alerted me to an error I made between chapters one and two. I inadvertently changed Jasmine's name to Jessica. I offer my abject and sincere apologies. She remains Jessica from that point on. \n\nThis is not a quick jerk story. Neither is it hardcore sex. It is a story of a young man with Cerebral Palsy and how he learns about love through his sister's friends. I have included it in \"First Time\" because I thought that was the best fit, although there are elements of Group Sex, Exhibitionist and Voyeur, and Incest involved. How much of this story is true I will leave for you to decide. Names have been changed to protect the guilty. It will be multiple parts. Constructive feedback is appreciated.\n\n\n\n \n\n. . .walked back into the house. The sudden chill of the air conditioning, although not cold, caused the girls nipples to tighten up and poke out delightfully, which I fully appreciated. Jessica was walking with an arm around my waist, and I was conscious of the press of her small breast against the bottom of my ribs. Her hip bumping against mine as we walked made my already somewhat unsteady gait even worse, but I didn't care. As long as I didn't fall down I was as happy as a hog loose in a corn crib. \n\nWe all congregated in the TV slash game room. We spread out towels on the leather couches so we wouldn't be sitting on them bare. Kate looked at the clock and wailed, \"Oh no! It's four twenty already! Josh is supposed to pick me up at six for a date! There is no way I'll be ready in time, nor can it possibly be as good as this day has been.\" She had a pout on her face. \"Do you think I could call him and tell him I can't make it?\"\n\nThe girls all started talking over one another as they tried to come up with an excuse she could use. I broke into the chatter. \"Kate, stop a minute. I don't want to see you go. You have been wonderful today, but stop and think about how you felt when Tom dumped you right after the prom. Josh hasn't done anything wrong to you. It isn't fair for you to stand him up for me, much as I would like it. Call him and tell him you need to postpone for thirty minutes, that you lost track of time. If he is any kind of a guy he will understand, but it isn't fair to break it off on him.\"\n\nKate looked over at me with a tender look in her eye. \"Jared, you are right. I know Josh is not the kind of man I met today, but you are right. I'll go out with him, and we'll see where it goes.\" She walked over to me and knelt down in front of the couch I was sitting on. \"Thank you for showing me what a real gentleman is, and what I need to look for.\" She leaned in, resting her luscious breasts on my thighs. I know it was on purpose, because she sort of wiggled them back and forth and gave me a big smile. Then she gave me a tender kiss on the lips. \"Thank you. I'll never forget this day.\" She then bent down and kissed the head of my cock. She looked up into my eyes and then slowly took the head of my cock into her mouth and diddled the tip of her tongue across the tip a couple of times and popped it out of her mouth with an audible pop. I really thought I was going to lose it for sure!\n\n\"Kate, I'll never forget this day ever, either. Thank you for seeing me as a real human being today.\" She nodded her head in understanding.\n\n\"I promise, I will never look at people the same way again. Maybe you know someone else with CP that is just like you?\"\n\n\"Maybe you would like to go with me to my therapy session sometime? You could volunteer. We are always short of people to help the group. You never know who you might meet.\"\n\n\"I think I might like that.\" She stood, leaned over me, and gave me a nice hug. When I felt her breasts pressing against my chest I was almost tempted to tell her to call and cancel her date! She turned and walked out of the room to gather her stuff. I could hear her on her cell phone as she was leaving calling Josh and apologizing for forgetting the time and her date, and asked if they could postpone it for thirty minutes. He must have agreed, because she left.\n\nKay walked over and sat down next to me. She put her arm around my neck and hugged me to her. \"Jared, I never really knew my brother before today. You were so right, and so sweet.\" Her boobs were straddling my arm as she hugged me, and like I said before, sister or not, they were mighty fine boobs, and I had not seen one in the flesh before today. They felt wonderful, and my cock was bobbing up and down in appreciation. I was so hard, and had been hard for so long it was starting to hurt. \n\nI could smell the aroma of Kay's arousal also and much like a flower's fragrance attracts a bee my eyes were drawn down to per pussy. The arrow of her pubic hair was pointing directly to her slit, which was obvious due to the swelling of her labia, as was the moisture that was seeping out of it. We all were at a heightened state of arousal, and had been now for several hours, but Kay was the only one who had not had a release. Sister or not I was going to do something about it. I slid off the couch and knelt between her knees.\n\n\"Jared, what are you doing?\"\n\n\"Kay, you are the only one here today who has not had some release. I'm not going to have sex with you, but I'm going to allow you some relief.\" As aroused as she was I knew it wouldn't take much, so I pressed her very slightly resisting legs apart and pressed my face into her pussy. She was already on the edge of the couch, so all I had to do was stick out my tongue and start lapping. With a moan she fell back against the back of the couch as I swept my tongue from the back of her pussy to the front a few times and then remembering how Jessica had reacted to contact with her clit I sucked Kay's clit into my mouth and fluttered my tongue across it. That was all it took. Kay's hips started bouncing up and down on the couch and her thighs squeezed my head until I thought my ears were going to meet, then she started to calm down. \n\nI gently licked her pussy, but when I saw her clit was very sensitive I left it alone. Finally with a deep sigh she reached down and pushed my face away, saying, \"Enough, already! I can't take any more!\" She bent down and grabbed my face in her hands and with tears in her eyes said, \"Thank you. No one has ever done anything like that for me before.\"\n\nI somehow expected disgust and disapproval from Jessica and Shellie, but when I looked at them all I saw was approval for caring about my sister. I may burn for it, but I don't care. It didn't seem fair to leave her aroused and needing while watching me love on her friends.\n\nShellie got onto the floor and crawled over to me. Looking in my eyes she asked, \"Jared, no one has ever eaten me out before. Would you please do it for me, too?\" This was a side of Shellie I had never seen before. She was always the brash outspoken one who flaunted her body more so than did the other three. But here she was almost pleading, asking me for something. I don't know what kind of boys we are producing these days, but there is something lacking! Here was one of the most beautiful and most popular girls in the school, who had her pick of who she would date, and who she would have sex with, and none of them had ever gone down on her! What is wrong with guys that can be so selfish as to expect a girl to give them a blowjob, and even expect them to swallow, but won't reciprocate? \n\nOh how much they miss out on! In my humble, but correct, opinion one always gets more from giving pleasure and satisfaction than can ever be gotten just from receiving. I know my experience is somewhat limited. Somewhat? OK, it is nil, but I am an observer of the human race, and I've seen the relationships that are based on mutual giving and care for each other, and they are the ones that last and are happiest. I decided a long time ago that when I find the right one I'll treat her as my queen. Those I've seen practice this always end up treated like a king. Sorry for the philosophy lesson. I know, I know, you want to hear about Shellie.\n\nAnyway, Shellie was looking at me, nearly begging me to do something I would have happily offered my left nut to do before today. I gladly lay on my back on the carpet, just to find a wet spot where I had been dripping while caring for Kay. Do you think I minded? Not a chance! Shellie leaned her beautiful body over mine and then carefully straddled me, landing with her pussy in the center of my sternum. I felt her moisture on my skin as she slid slowly forward. I couldn't help myself. I just had to play with those gorgeous tits as she moved into position. She seemed hesitant and stopped just before her pussy crossed my chin. She looked at me with a little girl look as I plucked at her engorged nipples. \"Are you sure? You really don't mind?\"\n\nI could feel precum as it oozed down my cock. Did I mind? Dropping my hands from her nipples I reached behind her and grasped her buttocks and slid her forward until my nose was nuzzled in her pussy. Hers was different than the others, being totally shaved. I'm not really sure which I like better. It's kind of like apple pie. Hot or cold? My answer to that is yes, and I guess pussy is about the same. Yes! I used my nose to separate her swollen labia and pressed it against her clit once, just enough to make her breath hiss between her teeth and her head arch backward. I smiled at her reaction and decided I was going to take my time and have some fun with her. \n\nWith Jessica and Kay I had been focused on giving them an orgasm right away, but I decided I was going to pay Shellie back for all the teasing she has given us guys ever since she started growing her boobs. So, instead of using my tongue right away I just nuzzled her with my nose, staying outside her slit entirely, but rubbing the tip of my nose between her pussy and the crease of her leg and around in a circle, pressing the swollen lips in on her pussy, giving indirect stimulation. She was rocking back and forth trying to get me to move in to the target, but I was having none of it. I grasped her hips to hold her in place so I could control the action. \n\nYes, I was teasing her, but at the same time I was driving myself wild internally with desire. My cock was pulsating with my pulse, and the precum was a steady stream, puddling atop and between my balls, which were swollen and aching.\n\nI started softly kissing he skin, again staying outside her lips. I kissed the crease of her legs and onto her leg just a little bit and then around just above the clit and back down the other side. When I got to the area between her pussy and her anus it was obviously very sensitive, because she started giggling and bouncing so that I had trouble staying in place. Starting at the back of the slit I gently and very softly started kissing my way up to the front, not giving enough pressure to give any relief, but doing all I could to tease and torment her. By this time Shellie was almost crying as she begged me for some release. \n\nLetting go her hips I slid my hands softly up and down her sides as I continued giving gentle kisses, although just a little harder. Her juices were running down my chin onto my throat by now, but I didn't care. I was having the time of my life. About the time my hands reached onto her ribs I allowed my tongue to part the crease as my hands slid around to caress and hold her breasts. She shuddered in place as my tongue found and lapped at her vaginal opening, and she pressed down with her hips trying to get some penetration, but I did not relent. I grasped both nipples and started plucking at them, then finally I allowed my tongue to flick over her clit once. It was like an electric shock went through her. Her breasts were thrust forward in my hands as her head went back and a moan that was almost a wail came from her throat.\n\nI pursed my lips around her clit, which was extended way out, and I hummed. She started writhing on my face and moaning as if in pain. I felt like I would have bruised lips from the pressure she was exerting on me trying desperately for release. Why I did it, I don't know. It just seemed like the thing to do. Leaving my lips pursed around her clit I blew on it gently, much like one blows on a baby's belly making motorboat sounds. Everything came loose! She erupted with a loud wail and bounced up and down on my face while gripping my head between her thighs. I'm glad we have thick carpet, because my head was bouncing up and down on it. She let loose a stream of juices that flooded my face, even though I had my tongue out trying to lap up as much as I could. \n\nShe started to settle down and I gave a gentle lick up her pussy once. She shuddered and fell over to the side and grasped her pussy with her hand, just pressing and holding it. Her breath was quivering and shuddering as her wide glassy eyes stared into mine. She twitched a time or two and stretched out langourously, totally sated. \n\nJessica and Kay were both looking wide-eyed at us, and both had a hand buried deep in their pussies. Jessica said, \"I can't take it anymore!\" and moved off of the couch and clambered on top of me, settling over my hips. She reached down and grabbed my cock, then lifted herself up and in one motion impaled herself on it. Now remember, I am a bit bigger than average, and she is a little tiny thing. I don't know how she got it all in, but she did. She stayed still for a moment or two adjusting to the size, and then she started moving her hips, riding me. The feeling was exquisite! It was at once soft and velvety, yet tight and compressing. \n\nFor twenty years I had dreamed of what it would be like to actually have sex with a woman instead of my hand. Well, not quite twenty years, just since puberty started, but it seemed like twenty years. Here I was with my cock all the way in the girl I loved. You say I was just infatuated, or it was just lust, but I tell you when I looked into those eyes and fell all the way in, it was love. There can never be another, nor will there be for me. Jessica was claiming me as hers, just as I was claiming her for mine. \n\nShe rocked back and forth on my cock and my hips involuntarily it seemed rocked with her. It didn't last long. I didn't wait for her, and we didn't have a great mutual orgasm that I hear about having. It was only a couple of thrusts and I came. The feeling was so intense! Not only was I releasing all the pent up sexual tension of the day, but all of the longing and pent up sexual drive I've suppressed all these years. How much did I come? I have no idea. I kind of blacked out during the most intense part and opened my eyes to some of the aftershocks with Jessica cradled on my chest. I was fulfilled . . . ."
    ],
    "authorname": "Callicious",
    "tags": [
        "nude sunbathing",
        "sister",
        "friends",
        "group"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/my-sisters-friends-ch-04"
}
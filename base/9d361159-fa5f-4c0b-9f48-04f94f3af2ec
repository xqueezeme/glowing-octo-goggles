{
    "title": "Tears of the Fallen Ch. 16",
    "pages": [
        " Oh, the last chapter posted quicker than I thought it would... let's keep up the momentum; here's another one ;)\n\nEnjoy! \n\n*****\n\nLiam hovered impatiently outside his cousin's house, waiting for Elina and Reasa to pack some clothes. He'd deliberately chosen not to go in. He didn't want to give Reasa an opportunity to call him to task for kissing her. The memory of their first kiss blew his mind. It had been so much more than he had ever dreamed imaginable. It was the single most perfect moment of his life and he didn't want anything to take that away, especially not his mate glowering furiously at him. No, Liam was happy to put of the inevitable for as long as possible so he could savour that magical moment. If that was a tad cowardly, he could live with it.\n\nThe sound of booted feet on the hard packed earth had him turning his head towards the pack's large meeting circle. The wolves defending the outer boundaries were changing shift, the morning detail already out among the trees. Tired men trundled into the compound, some of them waving in his direction as they scurried home to get some much-needed sleep after a long night.\n\nLiam waved back, feeling excitement as well as some trepidation about what they were about to attempt. They were going into uncharted territory with the wounded vampires at the Praetorian Compound. They had no idea if dream walking in their minds would be a help or a hindrance, but they had to at least try. If nothing was done there really was only one outcome for the vampires, and Liam just couldn't bear to think about that consequence. \n\n\"We're ready,\" Elina said behind him, and he turned back around to smile at his cousin and set eyes on his mate for the first time since they'd kissed.\n\nHow did she manage to look more beautiful with each passing day? The sun caressed Reasa's bronzed skin, making him feel jealous that it wasn't his fingers tracing each perfect feature, that it wasn't his lips tasting the satin smoothness of her cheeks. She'd tied her raven hair back in a short ponytail, the hairstyle not only making her cheekbones more pronounced, but also highlighting the gentle curve of her jawline. \n\nShe was glorious, and she belonged to him. He ached for the day that her shuttered green eyes finally looked at him, and she realised that he belonged to her as much as she did to him. It would happen. It had to happen. He just needed to be patient until she was ready to accept him. For now, her expression was neutral as she regarded him, her only acknowledgement a slight inclination of her head. At least she wasn't spitting at him as he'd expected.\n\n\"Is everything set?\" Rafe joined them, his sons Ben and AJ at his side. \n\nBoth men had their father's tall frame, though Aaron junior's build was more athletic and his colouring favoured his mother. His wavy, platinum blond hair was shorter than most of the male pack members, but it retained the unkempt look that was common among wolf shifters. He also sported a few days growth that further emphasised his wildness. His smile though was dazzling and took some of the edge off his appearance.\n\nBen was his father's double in just about all ways. He was as big and wide as the Alpha, and had the exact same colouring of dark brown unruly hair and deep brown eyes. The only thing he appeared to have taken from his mother's side was his nose. It was unusually long and elegant for so brawny a male. He, too, had a killer smile, and like his brother, was quick to display it. Both men smiled at them but didn't speak.\n\n\"We're all packed and ready to go,\" Liam answered, turning as Dayton followed the girls outside.\n\n\"Don't you need this?\" The Beta held the book on dream walking in his hands, a half smile gracing his face when Reasa tutted under her breath.\n\n\"My apologies, I forgot to pick it up.\" She held out her arms for the book.\n\n\"I'll ride up with them,\" Dayton said to Rafe, his Alpha nodding his agreement.\n\n\"Ben and AJ are going too,\" Rafe informed the group, his tone firm. Not that any of them would have disagreed with their Alpha. \n\n\"Lily and Kal are already up at the other compound and the boys will be staying for the duration too. I think three extra V\u00e2rcolac and a couple of strong wolves should be enough for security. The Praetorian Compound is being patrolled by the pack as standard anyway, so there will always be additional wolves to call on if needed. Let's just all make sure it isn't needed.\" His final words were directed at Reasa, who met his gaze without flinching. \n\n\"I have no intention of causing any further distress to your pack,\" the former vampire answered.\n\n\"Glad to hear it,\" Rafe replied, treating her to a warm smile. \"If you and Liam can do what Annie thinks you can, well let's just say that will go some way to making amends for past actions. It's not going to absolve you completely, Reasa, but it will be a start.\"\n\nShe nodded her head, accepting what he said. The Alpha's honesty was something she could understand and therefore respect. She hadn't detected one lie from him and that was something she found surprising given the relationship between wolves and vampires in Europe. She had always believed they were liars and couldn't be trusted. It would appear she was learning many new things with her time spent in the Armand-Hanlon compound.\n\n\"Okay, everyone load up and get yourselves up to the Praetorian Compound.\"\n\nThey turned and headed towards the two waiting Jeeps at Rafe's command. Reasa had barely taken two steps when the air suddenly became tense and her head whipped around to see Pietro standing in the doorway of one of the other dwellings close by. For an instant she was frozen on the spot, her gaze locked with eyes blazing with hatred, and then she was pulled behind Liam's large frame, hidden from the vampire's view.\n\n\"Pietro... \" Rafe growled... an unmistakable warning in his tone.\n\nA loud hiss filled the air... a sharp clacking noise following quickly. Reasa didn't need to be able to see to know that the vampire had gone feral. Was today going to be the day that she died? She fervently hoped not. She wanted to try to heal the wounded vampires' minds. If she died after that... well at least she would have done something to try to repair the damage she'd caused.\n\n*****\n\nShe was there right in front of him. So close he could taste the warmth of her blood in his mouth, could feel her soft flesh parting in jagged tears as his talons shredded her body. So close, and yet, denied to him by the assembled group of wolves who protected her. Pietro hissed out in fury, his eyes darting quickly from one face to the next, cataloguing each position, as he worked out what sequence he would take to circumnavigate everyone to get to his target. \n\nLiam he would leave until last. He would take down Rafe first, he was Alpha and the others would go to his aid without thinking about it. Elina would hang back to protect her cousin, so she would be next, leaving Liam in a moment's confusion over who to protect first. If he went to Elina's aid then good, Thereasa would be his for the taking. If not... he would have to deal with the huge V\u00e2rcolac before he could satisfy his bloodlust. \n\nThe thoughts took barely a moment to careen through his mind before he was moving, ignoring the warning voices, his eyes black pools of rage as he flowed towards the Alpha. Sounds clamoured on the air, growls and voices, his name being yelled repeatedly, but he was blind and deaf to all. Instinct drove him, fury and vengeance blazing through his feral mind. She had to die and she had to die now!\n\nPietro swiped out a hand, batting away the two males who dived in front of their father. They crashed to the ground, instantly forgotten as he focused on the now dark brown wolf as the Alpha shifted to animal form. \n\n\"No! Pietro, no!\"\n\nThe voice screamed at him, fought to be heard through the feral snarls growling from his lips. He knew that voice, had heard it whisper husky words of need and passion, but he ruthlessly pushed it aside. He would not be denied his kill.\n\nThe Alpha charged and Pietro lashed out, catching the huge beast in his arms and tossing it backwards. It was on its feet in a fraction of a second, coiling to spring again as he readied his talons to cut into flesh. The venom dripped from his fangs and he had the briefest moment of lucidity. He mustn't bite... he mustn't bite... \n\nThe wolf jumped, surrounded by a cacophony of sound, and Pietro struck out with his talons.\n\nPale blonde hair filled his vision, exquisite blue eyes filled with such fear. The wolf was behind her, shoved out of the way as she flowed into his vision, her stance defensive. His talons passed by her cheekbone by the barest of fractions, one nicking ever so lightly, causing the smallest of marks that instantly healed.\n\nCassia threw herself into his arms, holding him in a crushing embrace, so strong that he couldn't push her away. She wasn't fighting him, she was merely holding onto him, her words whispering in his ears. \"Don't do this, Pietro. Please, please don't do this.\"\n\nThe urge to rid himself of the thing preventing his kill ran so deep it took everything in him not to plunge his talons into the soft, warm body embracing him. He wanted to... he needed to... but she was Cassia, and he could never do anything to physically hurt her.\n\n\"Pietro, be calm. Please be calm. Think about what you're trying to do.\"\n\nAs suddenly as the rage had overwhelmed him it died in the face of her words. Reason began to surface, and with that reason, he felt something else inside him die. He had been promised sanctuary with the pack. He had been promised so much, but when it came down to what he truly needed, he was very much on his own. \n\nThe one person he had come to rely on to understand him, was the very person who had stood in his way, using his attachment to her to thwart him. Cassia had to have known he could never hurt her. She had to have known that of everyone in the pack she was the only one he would have listened to in his feral state. She had known and she had used that knowledge against him!\n\n\"Release me, Cassia. I am once again in control of my actions.\" The words sounded dull to his ears and from the way she stiffened against him, he knew they did to her too. She held on a moment longer, long enough to whisper for his ears only.\n\n\"I'm so sorry... \"\n\nIt didn't matter. No words she said could ever remove the feeling of betrayal he felt inside at knowing she had deliberately used his feelings for her against him. It was a hot knife in his gut, a pain so intense it eclipsed even the worst pain he could remember from Europe. Cassia had sided with the pack against him. She had betrayed him.\n\nPietro stepped back when she released him, avoiding looking at her beautiful face. He didn't want to look at her. He didn't want to see the remorse he knew would be there because that was who she was, someone who cared so much she would bleed inside at ever hurting someone she cared about. He didn't have anything left in him at that moment to forgive her. All he had was the knowledge that he was alone, as he had always been alone.\n\nHis gaze swept over the surrounding pack. The centre of the compound was now full of wolves, all looking at him, waiting for him to go feral again. Rafe was checking over his sons, reassuring himself they weren't harmed. Pietro hadn't meant to hurt them, just remove them from the fight. He knew they would recover quickly from any bumps and scrapes they may have taken.\n\nThere was no sign of Thereasa. From the ring surrounding one of the jeeps, he could take a guess that she was safely ensconced inside the vehicle. Nors was there as was Alexei, arms folded with disapproving frowns on their faces. They left him in no doubt that he would have to go through both of them to get to woman, and he had no illusions that they would hurt him badly if he tried. \n\nEven Andrei was glaring at him from his left side, fury dancing in his friend's eyes. They were all condemning him, his friends of hundreds of years turning against him as Cassia had. With a long, loud hiss, Pietro spun on his heel, walking back into the home he had shared with his friends. He knew what he had to do.\n\n\"Pietro, wait... \"\n\n\"Go away, Cassia. I have nothing to say to you.\"\n\n\"You have to understand... we couldn't allow you to hurt Reasa. We just couldn't. I know she hurt you, Pietro. I understand your need for vengeance but it would kill Liam for anything to happen to her, and she's changing. She truly is changing, Pietro.\"\n\nHe wanted to shut out her voice. He wanted to ignore the plea that rang from every word she spoke. He wanted her to just be gone but this was her pack so that wasn't likely to happen. Spinning around, he impaled her with a look that contained all of his rage, all of his feelings of betrayal.\n\n\"I understand, Cassia. The pack will always come first with you, as it is what defines you. I am not pack though. I will never be pack or understand that group mentality. Thereasa ruined my life. She turned me into this thing I am now. I will never be happy until she is dead. Today you chose, Cassia. You chose pack over me and while I can understand that on a rational level, I can't on an emotional one. You betrayed me.\"\n\nPietro wanted to reach for her even as he said the words that he knew would cut her to the quick. Seeing the tears in her eyes filled him with so much misery that for a moment it almost overcame his feelings of betrayal. But those feelings were too ingrained in his heart and mind. He had trusted in her, he had let down his defences and let her close, and in that moment when he needed her to understand; she had turned against him.\n\n\"Tell Rafe I will be off pack lands within the hour. I don't want to spend another second longer here than I have to.\" Pietro turned away, hardening his heart to the pained whimper that came from the beautiful blonde wolf that had begun to mean so much to him.\n\n\"Please don't do this. Please, Pietro. Give yourself time to calm down. We can talk again once you've had a little time... \"\n\n\"I don't want to see you ever again, Cassia. What we had is over.\" Misery overwhelmed him at his words and at the tortured sound that escaped her lips, but Pietro forced himself to keep walking up the stairs away from her. Though it hurt him to say it, he knew he wouldn't change his mind. What they had was truly over, whether he wept at the thought or not.\n\n*****\n\nPietro was leaving her! \n\nHer mate was refusing her, denying her the only chance she had at happiness. Cassia tried to speak, tried to make him listen, but her tears were flowing too fast, the ball of pain inside so intense it felt as if it was choking her.\n\nHe had to understand... he couldn't mean what he was saying. She'd had to stop him from hurting her Alpha, from hurting Thereasa and in doing so, her pack. Why couldn't he understand? Why couldn't he just stay and listen to her?\n\n\"Pietro... \" the word strangled out on a sob, her voice pleading for him to listen but he continued to walk away, never once looking back.\n\n\"Cassia, come on, honey. Come home.\" Dara was at her side, her sister feeling her pain and reaching out to enclose her in an embrace, to soothe her with her wolf's touch.\n\n\"Dara... Dara... oh God Dara... \"\n\nCassia's wolf howled its grief inside her mind and she gave herself over to the animal, unable to bear talking any further. She shifted to wolf form, spinning around and racing through the open door out into the forest.\n\nThe wolf howled; the woman screamed internally. They raced through the trees, mindless of where they were going, heedless of any who followed. She crashed into trees, tumbling head over heels and then picking herself up to race off in another direction. All the while she howled her anguish, cried out against the torture that was her mate's rejection.\n\nCassia ran and ran and ran until she fell to the forest floor exhausted, panting and heaving as she whimpered out her distress. Soft hands stroked over her fur, a loving touch holding her shaking wolf form, whispering words tripping over themselves as they rushed out.\n\n\"It will be okay, Cass. I know it will. Pietro just needs some time. It will all work out, you'll see. Please don't weep so, honey. Please. You are strong and I am with you. I will always be with you.\" \n\nDara was crying with her, holding her wolf and rocking her back and forth. She could feel her sister's pain echoing down their familial bond, knew she ached for her grief as much as she did. Dara, who had always been there for her, always been that second part of her from the moment she had been born and they'd first touched minds.\n\n\"It hurts so badly, Dara. It hurts so badly.\" \n\n\"I know, sweetheart, but you're strong enough to cope. Lean on me, honey. I've got you and I'll never let go.\"\n\nCassia surrendered to the grief of losing her mate, throwing her head back and letting out one long, anguish-filled mournful howl as her sister kept her word, holding her and never letting her go.\n\n*****\n\nPietro's head shot up and his gaze turned to the forest through his window, the awful howl ringing on the air for all to hear. He knew it was Cassia who was hurting so badly and he wanted to go to her but his feet wouldn't move. Instead, he turned back to his packing, throwing the last of his clothes haphazardly into his case.\n\n\"Are you proud of yourself?\" Andrei growled from the doorway. \n\nPietro turned to look at his friend, seeing the signs in his body language that Andrei was barely in control of himself. \"I take no pleasure from hurting Cassia.\" He snapped the suitcase closed.\n\n\"What the fuck were you thinking, Pietro?\" His friend stepped into the room, fist clenched in an effort to hold back his feral side. \"The pack took you in, gave you a sanctuary and this is how you repay them?\"\n\n\"Some sanctuary,\" Pietro snarled back, his aggression levels escalating to match Andrei's. \"You let the instrument of my torture live and breathe, Andrei. I can remember a day when you of all people would have ripped someone to pieces for much less but now you roll over and do whatever the wolves ask of you. And you ask me what the fuck I was thinking? What the fuck where you and Alexei thinking?\"\n\nThe other male paused, taking a deep breath before relaxing his clenched fists. \"It's not that cut and dried and you know it, Pietro.\" Andrei sighed deeply and ran a hand through his hair. \"The pack is our family now and we have to consider the bigger picture. Believe me, I understand your need for vengeance. We all do, my friend. You have to meet us half way though; you have to understand that we're doing the best we can here.\"\n\n\"I can't!\" Pietro hissed, turning away to grab his case. When he turned back, he'd wiped all expression from his face. \"All I see is the people who always had my back are now protecting someone who is the cause of my disfigurement. All I see is those I call friend have aligned themselves against me.\"\n\n\"That's fucking bullshit and you know it! Where the fuck are you, Pietro? The man I know wouldn't wallow in self-pity and pitch a hissy-fit because things aren't going his way. And what the fuck did you do to my niece? Why are you breaking her heart? I should be kicking the shit out of you for that reason alone.\"\n\nHis reference to Cassia was too much, and Pietro dropped the case, hissing at his friend. \"Then why the fuck aren't you? Go ahead... kick the shit out of me! Do it!\"\n\nAndrei's expression turned cold, the warmth dying from his eyes. \"If I touched you right now, I would most likely take your head, Pietro. It's for that reason alone I'm ensuring that I retain a modicum of control. You're too weak to fend me off. It would be like slaughtering a Youngling.\"\n\nPietro glared at him a moment longer, before he reached for the case once more and stepped past his friend. \"Thanks for the reminder of why we're all in this fucked up position in the first place. I never meant to hurt Cassia, Andrei, I truly didn't. She hurt me first though, but I guess that will always be a moot point with you and Alexei when it comes to one of your own. That I can understand.\"",
        "\"Pietro... \"\n\nHe halted on his way out of the room, not turning to look back as Andrei called his name.\n\n\"I expect you back behind the bar at The Dive tonight. I suggest you use the apartment over the bar for a while until you're feeling more like yourself.\"\n\nIt was Andrei's way of telling him that no matter what had happened this day, he still counted him as his friend and would have his back to the best of his ability. Pietro was aware it was more than he probably deserved but he accepted it as gracefully as he could.\n\n\"I'll see you later then.\"\n\n*****\n\n\"Dara, let me, honey.\" Alexei's calm words belied the expression on his face as he ushered one daughter aside to reach the other.\n\nShe looked up through tear-filled eyes to see her parents beside them, her mother clearly having shifted into her wolf form at some point, as she now stood naked before them. \"She won't stop weeping. I can't do anything to help her.\"\n\nHer mother held out her arms, enfolding her in a tight embrace. \"That's our job, sweetheart, not yours, though you are a credit to all of us that you have tried so hard.\" Gentle hands soothed down her back, trying to take the ache from her heart at her sister's distress. \"Can you rustle me up something to wear, honey? There's a bit of a nip in the air.\"\n\nSmothering down another sob, Dara fought for some composure and the concentration she would need to accede to her mother's request. She knew it was a deliberate attempt to redirect her, and she was grateful to her mother for it. She was no help to Cassia being an emotional wreck. She needed to be Cassia's strength right now.\n\nTaking a deep breath and doing her best to tune everything out around her, Dara tapped into the well of power she had inside, conjuring up a sarong in deep forest green. It was easier to create single bolts of cloth as opposed to specific clothing, and it appeared her mother was content with her offering as Cedar wrapped the sarong around her body.\n\nTurning back to Cassia, Dara watched her father kneel beside her, his hands gentle as they stroked through the wolf's tangle fur.\n\n\"Cass, honey, you can't hide within your wolf. I know it's hard right now but you need to come back to us. You need to let us take care of you.\" Alexei kept his words soft and low, all the while his hands continued to stroke the wolf as he talked.\n\n\"Come, daughter. Show me that wonderful strength I know that lives within your heart. Return to your family. Come home to us.\"\n\nFor a long moment it appeared as if she would refuse him, and then the wolf shifted into the woman, curled up on the forest floor. The second she shifted, Alexei scooped her up into his arms and she burrowed her face into the side of his neck, loud sobs wracking her body.\n\n\"He doesn't want me, Daddy. My mate doesn't want me.\"\n\nAlexei's footsteps faltered as he started walking towards his mate and youngest daughter, a flash of fury in his eyes. His gaze fell on Dara after Cedar gave a quick shake of her head.\n\n\"Explain.\" The word ground out in a low voice almost over-shadowed by Cassia's crying.\n\nDara swallowed hard, trying not to shrink back against her mother, who continued to run a hand down her back.\n\n\"Alexei, please moderate your tone,\" Cedar remarked, a hint of censure in her tone. \"Whatever is going on is not of Dara's making, and she deserves better than that from her father.\"\n\nThe rebuke in her tone was enough to get through her mate's initial fury, and he conceded her point, giving Dara an apologetic smile. \"I'm sorry, Dara. I'm just concerned for your sister. Please tell us what you know.\"\n\nRelieved to see a more normal expression on her father's face, Dara straightened up, giving him a tentative smile back. \"I don't know much, Dad. Cassia told me that Pietro was her mate but that her wolf was acting a bit strange about it... as if it couldn't quite make up its mind one way or the other.\"\n\n\"That's impossible,\" Cedar interjected, a frown marring her face as she reached out to Cassia and stroked a hand through her weeping daughter's hair. \"Our wolves always know - instantly.\"\n\n\"Cassia says otherwise,\" her daughter answered, shrugging her shoulders. \"I wouldn't know personally as I haven't met my mate yet.\"\n\n\"One at a time... \" Alexei muttered under his breath, his tone rueful as he cradled Cassia tenderly in his arms as they headed back towards the compound. She had finally stopped weeping, though it was apparent she was lost somewhere within herself. \"Is Pietro aware of this?\" \n\nThere was no mistaking the hard edge to his voice and Dara was glad the vampire would be gone by the time they got back. There was no telling what her father might do giving his current mood. \"As far as I know, Cassia was taking things slowly with him, giving him time to heal from Europe before making her claim. I don't think he's aware of it despite the fact they've been spending a lot of time together.\"\n\n\"Lucky for him.\" Again the words were muttered, a dangerous edge to each one.\n\n\"Alexei,\" Cedar sighed, placing a hand on his arm to try to sooth the rage she could feel flowing through their mate bond.\n\n\"Look at her, Cedar. Look at our girl. Don't expect me to be rational about this when Cassia is hurting this badly. I just can't do it.\" \n\n\"Don't you think I'm every bit as concerned as you are, Alexei?\" she answered quietly, unable to hide her disappointment. \"Don't you think my heart is breaking seeing our daughter so distressed? One of us has to keep a level head about this, and of course, that person is going to have to be me, as it always it. I don't get the luxury of exploding into a temper and protecting my daughter because I'm too busy ensuring you don't do something stupid that will make things worse.\"\n\nIt was so unusual to hear the trace of bitterness in her voice that for a moment Alexei stopped walking, surprise crossing his face. Dara was equally surprised and uncomfortable witnessing one her parents' rare fights. She wasn't sure whether she should keep walking or stay with them.\n\nHer father remained silent for a long moment, and then his expression softened and he leaned down to kiss his mate, brushing his cheek against the top of her head. \"I'm sorry, I know you're just as concerned, honey. I'll promise to behave.\" \n\nAs quickly as Cedar had become irritated, her expression mellowed and she rolled her eyes in disbelief. \"You don't even know the meaning of the word, Alexei Romanov, but I'm holding you to that promise.\" \n\nWith the disagreement over with as soon as it had begun; they broke through the trees and entered the pack compound. It was clear of most of the people from earlier, however Rafe was sitting on the steps to his house, his eyes pinned to them as they walked out of the forest. He rose and met them half way, his trouble gaze on Cassia.\n\n\"Is she okay? Do you need to use the safe room?\"\n\nAlexei looked to Cedar for the answer, relieved when she shook her head. \"I don't think so, Rafe. Let us spend some time with her as a family. If we need you, we'll let you know.\"\n\nThe Alpha placed a hand on Cassia's head, leaning down to brush his lips against her cheek. \"If you need us we are here for you.\" He said the words aloud and sent them down the Alpha link he shared with each pack member. There was no response from Cassia but he was certain she'd heard him. Straightening up, his concerned gaze met Alexei's and Cedar's. \"Lacey will want to check in on her later.\"\n\n\"Lacey is welcome to visit anytime, as are you, Rafe. However, can we keep it to a minimum just now?\" Cedar asked. \"We don't want to overload Cassia with too many people around; not until she's had a chance to recover from today's events.\"\n\n\"Agreed. I'll have Aaron spread the word not to disturb you.\" Rafe nodded his head to Alexei, silently communicating that he wanted to speak with Cedar out of Cassia's earshot. The vampire continued on his way with his daughters, leaving his mate to discuss whatever their Alpha wanted to impart.\n\n\"Pietro left the pack a quarter of an hour ago,\" Rafe announced as soon as they disappeared into their family home. \"I don't know if that's going to be a good thing or not for Cassia, but I thought it would be best if either you or Alexei broke the news to her.\"\n\nCedar's already concerned expression darkened further, her worried eyes turning towards her home. \"Do you know where he went? If we can at least tell her that it may take some of the sting from knowing he's left.\"\n\n\"Andrei said Pietro will be staying at the Dive and taking over his responsibilities there from tonight, so he'll still be afforded some level of protection from the vampires that Andrei trusts while he recovers. Hopefully some time apart will show Pietro how much he misses Cassia. He is her mate, I take it?\"\n\nCedar sighed and rubbed her hands across her face wearily. \"It's certainly looking that way, though she did tell Dara that her wolf appeared to be undecided on the matter. I'm still reeling over that one, Rafe. I didn't think it was possible for a wolf to be confused.\"\n\n\"Neither did I,\" the Alpha frowned raking a hand through his hair, before giving his beta a reassuring hug. \"I'll talk to Rayne before she leaves and have a word with Annie and Caleb too. Maybe there's something in their books that can explain it. We have to remember that the V\u00e2rcolac are not like purebred Weres or Vampires. What applies to the rest of us may not necessarily apply to them.\"\n\nWith another quick squeeze, Rafe released Cedar so she could go to her daughter. As she disappeared from view, he pulled out his cell and dialled Rayne's number. He needed to have a last word with Gard and Rayne before they headed to Europe anyway. They had to decide whether it was wise to leave Kothari on his own with just Dara checking in with him. Given the turn of events with Cassia, Dara may be otherwise distracted.\n\n*****\n\nThe Jeep made its way up the mountain, Elina behind the wheel with Liam and Reasa in the back. The second Jeep shadowed them closely, Dayton, Ben and AJ bringing up the rear. Rafe's sons were unaffected by their tussle with the vampire. Pietro hadn't hurt them much and they'd insisted they were fine to continue with the task their father had set them. It had been a proud Alpha who had clapped each son on his shoulder and sent him on his way.\n\nLiam's emotions were mixed, his heart going out to Cassia as he felt her pain as they all did. He was strangely detached when he thought of Pietro and his actions. He felt some level of anger towards the vampire for trying to harm his mate and hurting his friends, but he could also understand what had driven Pietro to act as he had, and that took some of the edge from his anger. \n\nThey could all understand and that was probably why, despite what had happened, there wasn't an overabundance of hostility towards the vampire. Liam had heard some mutterings from the younger pack members as they were heading off, but wiser, calmer heads in the pack would work to subdue any antipathy towards Pietro and the vampires in general. Aaron would probably assign some intensive border patrols so the more hot-headed youngsters could blunt their anger. By the time they returned to the pack, the incident would have become just another story to tell on a balmy night sitting around a fire.\n\nThat left Liam with only one real emotion to ponder; his fear that his mate would have been hurt, and what he would have been prepared to do to prevent that ever happening. He was ashamed of the thoughts that had flooded his mind as Pietro struck out. All the gentleness that made him who he was evaporated on the spot, and the feral vampiric side of himself had taken dominance. \n\nHe had considered killing Pietro to protect Thereasa. The thought had actually crossed his mind, his vampire urging him to reach out and take the other male's head. How could he even think such a thing? He was aware that Cassia was attached to the vampire, knew now that Pietro was her mate given her reaction to his rejection. His friend had placed his needs and the pack's before her own, and he had considered doing the worst thing a wolf could ever do to another pack member. \n\nWhat kind of monster did that make him? How could his family, his friends, every single pack member protect him, protect Reasa for him, when he wasn't worth their efforts? This couldn't continue... things couldn't go on as they were. Cassia deserved her happiness with her mate and that would never happen as long as he and Reasa remained at the pack. There really wasn't any other option. They would have to leave the pack once they'd done all they could at the Praetorian Compound. There would never be a place for them there. Recent events proved that.\n\n\"We won't allow it.\" Elina's cool words broke the oppressive silence in the car.\n\n\"You won't have a choice.\" Liam wasn't surprised that his cousin could guess at what he was thinking. She always seemed to know what was going on inside his head; she'd lived in it for long enough.\n\n\"What?\" Reasa didn't look at him, her gaze remaining fixed ahead.\n\n\"Liam is coming to the conclusion that you will both be leaving the pack. I am just disabusing him of it.\"\n\nReasa's gaze turned to the man at her side and for a second she almost smiled at the stubborn expression she saw on his face. Once more she was struck by the strong familial bond between the cousins, and even if she hadn't been aware of their history from walking through Liam's memory, she would still have sensed their strong attachment.\n\n\"You need your pack,\" she said, turning away to look out the window. \"You are not a solitary creature and would not thrive well without them.\"\n\n\"Pietro is Cassia's mate, Reasa. Today has proven that to all of us. She will never be happy without him, and he will never come to accept you. His inability to forgive you will continue his rejection of my friend. I cannot cause her pain so I can be happy.\" Liam's quiet words hung heavy on the air, a faint quiver in his voice.\n\nReasa didn't answer him. It was hard to refute his words. Pietro's need for vengeance was too ingrained. He was the kind of male others in her coven had aspired to be and could never attain that level of strength. She understood males like Pietro; she not only understood them, she respected them. Louis was one who held the same strength, the same determination as the wounded vampire back at the compound. He would mete out the same type of justice Pietro yearned for, and she would deserve it for her actions.\n\nThe situation was currently at a stalemate though. For one couple to be happy the other couple must suffer. From that point of view, Liam's logic made sense and while she couldn't argue with it, she was as determined as Elina not to allow it to pass. She would have to find some way to resolve the situation once they had helped the patients at the Praetorian Compound. She was aware of what she had to do, and she knew that Liam would do his utmost to prevent it. However, it wasn't his decision to make. When the time came, she would stand before Pietro alone and accept his judgement. \n\nElina also knew the truth of it, though she continued to deny it because she didn't want to lose her cousin. While she argued with Liam about his proposed course of action, her eyes met Reasa's in the rear-view mirror, and the former vampire could see that the other woman had an inkling of what she was thinking.\n\n\"The pack is strong, Liam. We have that strength because we stick together no matter what. Don't lose faith in us. We will find a way to resolve this.\" Even though spoken in a cold tone, there was passion in Elina's voice as she appealed to her cousin. Reasa heard the underlying words being spoken to her too, and her admiration for the other woman rose. If they had met under any other circumstances, Reasa was sure she would have called the other woman a friend.\n\nLiam's expression remained stubborn, though he leaned back and rested his head, closing his eyes as he did. He was completely clueless about the unspoken communication between his mate and his cousin. \"Let's just concentrate on what needs to be done for now. The rest is a while away. This is more important.\"\n\nReasa mirrored his position, closing her eyes and once more seeing Pietro standing in the compound, naked hatred oozing from every pore in his body, all projected towards her. She felt the same thrill of terror as she had then, followed by a feeling of disappointment as Liam had shielded her. Had she wanted to die in that moment? That thought had followed her around ever since she'd had her vampiric nature stripped from her. There had been times when she'd truly believed it was what she wanted and others when she'd wanted to cling to life.\n\nThe only thing she really knew was that it wasn't her decision or Liam's about what would happen in the future. There was only one person who had the right to decide her fate, and she only hoped she would be courageous enough to stand tall before him when he made it. \n\nThe Jeep pulling into the Praetorian Compound shook her from her musings, and she opened her eyes to view the large house that was home to the Praetorians. Elina pulled up close to the steps and pulled on the handbrake. It was strange being back. Exciting and yet terrifying. The last time Reasa had been here, she'd lost everything that had made her who she was. She wasn't able to contain the shiver that ran through her body.\n\n\"No one will hurt you here,\" Liam rumbled, his voice low, for her ears only.\n\n\"There is nothing further that anyone could do to hurt me than what has already been done,\" she answered, stiffening her back as the door opened and a large vampire with flowing black hair came out to greet them.\n\nMac greeted the arrivals with a touch of caution laced with optimism. He was relieved they were here and willing to try to help his injured people, but he was wary too, given his mate's involvement. Lily was happy and bright, so certain that Liam and Reasa were going to save the day with this new skill they'd discovered, but he was concerned about what would happen if they failed.\n\nHis mate's eyes held a hint of sadness every time he looked into them. Though she smiled and went about her life with the wonderful strength and resilience he'd fallen in love with, he could always detect that small hint of melancholy that lived within her because of Brandon. She missed her friend keenly, cared for him devotedly, and if this didn't work... if they lost him... he knew his beautiful mate would die a little inside. \n\n\"How sure are you about this?\" He asked the question of Liam and Reasa, as they were the ones who would be performing the dream walking.\n\n\"There is no certainty, Mac, just the hope that we can affect a positive change.\" It was Liam who answered, his tone grave. \"We know what's at stake. If it can be done... we will do it. That's the best we can give you.\"\n\n\"Fair enough.\" Mac wasn't feeling as comforted as he'd hoped he would. He nodded to the Weres who had escorted Reasa to the compound and motioned for them to precede him into the large house that was the heart of the Praetorians.\n\n\"We'll stay outside,\" Dayton announced. \"There's nothing we can do inside and we're muscle rather than brains up here. We'll check in with the other wolves and do a sweep around the compound.\" He headed off into the trees, followed by Ben and AJ.\n\n\"I will attend inside,\" Elina said, walking up the steps into the house, patently ignoring the brawny blond vampire who was standing in the hallway as she entered.\n\n\"Good to see you too, Missy,\" Karn chuckled, blue eyes flashing with mischief as she sailed passed him and started upstairs.\n\n\"Idiot.\" Wafted back down the stairs and only made him chuckle harder.\n\n\"Behave,\" Mac growled, giving his friend a glare.\n\nKarn's made a half-hearted attempt at looking sheepish but his attention was already diverted from the frosty woman intent on ignoring him, a speculative gleam in his eyes as he looked at Liam and Reasa. \"I think I can do a little of what you can. Would I be in the way if I tagged along and tried to pick up some tips?\"",
        "Mac's head whipped around in surprise as Liam gave his friend a nod. \"You're empathic? You never told me that.\"\n\n\"You never asked,\" Karn countered with a grin. \"And why would I? We all keep our skills to ourselves. Perhaps that's why they're so diluted now. We're all so busy trying to be the biggest badass around that sharing unique talents has never been in our best interests. How the hell do you think I've managed to keep this motley crew in line for so long, Mac?\" \n\nIt was a rhetorical question but the leader of the Praetorian's answered anyway. \"You've had an inkling of what they were thinking or feeling.\"\n\n\"Feeling,\" his friend confirmed. \"When you can sense emotions it's easier to divert the ones you don't want to be predominant in any given situation.\" Mac looked stunned and a bit put out at only now learning what his second in command could do, but Karn was unrepentant. If this new knowledge of shadow walking hadn't materialised, he would have kept his mouth shut about his abilities.\n\n\"I have no objections to you observing, Karn,\" Liam said, his lips curling in a small smile. \"The more people who can hone their skills the better.\" He glanced at the woman at his side before turning back to the waiting vampires. \"Should we make a start?\" \n\nWith a concerned expression Mac nodded and motioned for them to head upstairs to the infirmary. \n\n\"You doubt we will be successful,\" Reasa commented as she passed him, feeling oddly comfortable in his presence. He reminded her of Louis a little, with perhaps a tad less of a cruel streak in his eyes. She didn't doubt for a moment that the Praetorian leader wasn't capable of cruelty, just that he was less inclined to veer in that direction.\n\n\"Brandon is close to Lily's heart. If you try this and fail, her heart will break. In saying that, this is the lesser of two evils so I am willing to give it a try.\"\n\nShe could understand his position, and hoped they could affect a positive change on the vampires. There was a lot at stake, not only the hopes of all those who cared for the injured, but also the mental well-being of the V\u00e2rcolac at her side. There was no accounting for what Liam would do if they failed. It didn't bear thinking about. \n\nReasa tried to convince herself that it was the emotional backlash of Liam's powers that concerned her, but she knew she was lying to herself. Though it was a strong factor to be considered, the kiss she had shared with Liam was still very firmly emblazoned in her memory. She should have been furious about the liberty he'd taken, and a part of her was, but mostly she longed for another taste of his lips, to see if his kiss had truly been as amazing as her memory told her it was. Shaking the memory from her mind as best she could, Reasa entered the door to the large infirmary, her gaze quickly sweeping the area.\n\nBeside the very first bed that came into view stood Elina gazing down at the dark-haired male lying there. For all intents and purposes he gave off the appearance of being dead. Her expression was neutral, no sign of her inner thoughts as she watched the male for a moment longer and then walked gracefully over to the nearby window to rest against the window seat facing into the room.\n\nSitting in a comfy armchair beside the bed was Lily, a book in hand that she was reading out loud to the sleeping male. At their entrance, the V\u00e2rcolac finished the paragraph she was reading and then turned grave eyes to them. \"I hate this book but it's one of Brandon's favourites. Please wake him up so he can finish the damned thing himself.\"\n\nLily rose from the chair, smiling a sad smile as she dropped a kiss on Brandon's forehead. \"See you soon, Bran.\"\n\nShe walked across to them, slipping effortlessly into Liam's waiting arms. For a moment they just hugged quietly and then Lily straightened and stepped back, acceptance in her expression. \"I know you will do your very best, Liam. Don't do anything that endangers you though, not for Brandon, and not for the others. They were your protectors and they wouldn't want you to do anything that caused you harm. Keep that firmly in mind.\" She was silently granting forgiveness in advance... should they fail at their task.\n\nLiam nodded solemnly, guilt threatening to overwhelm him again. He was the reason six souls lay trapped or destroyed within their host bodies, and his beautiful friend was granting him absolution if he couldn't rectify his grievous error. He didn't deserve it and he wouldn't fail. He would stay there for however long it took to bring each and every one of the injured vampires back.\n\n\"I think you should go be somewhere else, Lily,\" he answered, his gaze dropping to her abdomen. \"I have no idea how much, if any, emotional leakage will seep into the room as we try this. It would probably be best if you weren't present as a precaution.\"\n\n\"I don't want to leave Brandon... \" Lily started to say, her gaze sweeping back to her friend as she spoke. Her mate was already moving though to gather her up against his chest and pull her towards the doorway.\n\n\"You heard Liam, this has never been done before and we don't know what may happen. I will not countenance any harm coming to you or our daughter, Liliana.\"\n\nShe knew she couldn't argue with Mac. She didn't have any intention of it. It was right that she shouldn't be around so much empathy right now and she would never do anything to risk their child. As if she would even consider causing her mate to, once more, lose the most precious thing in his world. \"You never let me finish,\" she smiled up at Mac, sending soothing love down their mate bond. \"I had been about to say I didn't want to leave Brandon but it would be best if I wasn't around such charged emotions. I'm not completely stupid, my love.\"\n\nHis frown lightened and then his expression turned sheepish. \"Overreacting again, uh?\"\n\nThough his words were conciliatory, his tone was implacable and brought a loving smile to her face as she gave him a reassuring hug. \"It's understandable. Let me know if there is any improvement.\"\n\nMac kissed his mate, long and slow, giving her as much love and reassurance as he could. He was aware that her heart was breaking and she was afraid to hope for a good outcome. He wanted to tell her it would all be okay but he truly didn't know if it would. He finally raised his head and cupped her cheek tenderly. \"You'll be the first to know, my Lily Rose.\"\n\nSatisfied, the pregnant V\u00e2rcolac headed from the room, leaving everyone staring quietly at Brandon for a long moment.\n\n\"I think it's best if we try this on Brandon first,\" Liam finally broke the silence. It appeared the expectation was there from the Praetorians that his friend was to be the first attempt anyway, so he was merely formalising the thought. \"We need another comfortable chair. I don't know how long this may take.\"\n\nKarn left the room and Elina came forward to look up at her cousin. \"I can shield the room as you work. It won't be the best of shields as I'll need to cast it across everyone present, but it should help if there is some emotional leakage.\"\n\nLiam considered it for a moment and then shook his head. \"That kind of shield would be mostly ineffective and not a good use of your talents.\" He glanced at Reasa and then back to his cousin. \"Reasa's control is exceptional. I'm not concerned about any issues there. I think it would be best if you buffered my defences instead. You're used to my mind so it will be second nature to you.\"\n\n\"And you will feel more confident in yourself knowing I am doing so,\"  Elina said telepathically for his ears only.\n\n\"Yes I would, Elle. I am so much stronger with the new shielding techniques I've learned but this... this will just make me feel a bit better.\" \n\nKarn's return into the room with a second plush armchair halted their conversation and Elina once more returned to her spot at the window. As Karn set it down beside its matching companion, she let her gaze run over the vampire that had managed to break through the cold defences she'd honed to perfection. She was still perturbed that she'd lashed out at him with such violence. Her loss of control had been unforgivable, no matter what the circumstances had been. It was unfortunate he would be present during this exercise, when she needed all of her control, but she would find a way to ignore him.\n\nAs if realising he was under scrutiny, Karn turned his head to look at her, his lips curling in another insufferable smile as his pale blue eyes twinkled and seem to convey that he knew just what she was thinking. Looking away, Elina turned inward, feeling the link that connected her to her cousin and concentrating solely on that as she slipped into Liam's mind and wove a delicate net of spidery tendrils around his impressive defences. Her web looked flimsy but it was as strong as she could make it. If Liam's control broke, well there would be at least a small fraction of time for the others to run before total catastrophe occurred.\n\nTurning back to her cousin, she watched him and Reasa sit down beside Brandon's bed, the ancient tome open in Liam's lap as he quickly ran his gaze over a couple of pages. She stiffened when Karn moved to her side, resting his back against the wall beside her.\n\n\"Can I shadow you?\"\n\nEvery single part of her being screamed NO but she ignored her instincts to push him away and relaxed as best she could. \"I am only an additional shield for Liam. You will not learn anything from that.\"\n\n\"Guess, I will be the judge of that?\" he countered swiftly, and she knew he would cause a scene if she continued to thwart him and that was counter-productive to why they were all here.\n\n\"Fine.\" Elina allowed entry into her mind, trying not to lash out instinctively when she felt the pure male dominance of the vampire by her side slip easily inside and nestle close to her own defences. She ignored him as best she could, relaxing further when he didn't push at her inner defences but instead examined her link with Liam and followed that path to her cousin's mind.\n\n\"Impressive.\" There was such respect and awe in Karn's tone that the last of Elina's misgivings eased and she concentrated on what was happening before them as opposed to fixating on the male at her side. She was relying on Karn not to violate the trust she was giving him. She only hoped that she wasn't wrong to do so.\n\nLiam glanced at the woman at his side, meeting her apprehensive gaze. \"Do you need more time?\"\n\nReasa shook her head, rolling her shoulders to relax some of the tension suffusing her body. \"No, we should begin.\"\n\nAt her acceptance, the large V\u00e2rcolac closed the book and set it down on the floor. \"Mac, it might be best to clear the house of anyone who doesn't need to be here.\"\n\n\"That's already been done, Liam. Everyone who is here needs to be here,\" the Praetorian leader answered calmly, signalling the Weres and vampires who were tending to the others. \"We can't afford to leave the others uncared for while this is happening. Everyone present has volunteered to be here.\"\n\nAgain, it was as if he was being absolved of any responsibility in advance, and Liam felt another moment's doubt that he could, not only, bring the vampires back, but deserved any forgiveness.\n\n\"We should begin, Liam.\"\n\nReasa's practical tone helped to balance him and he nodded his head slowly, turning to look at Brandon lying so peacefully in the bed. \"Time to come back to us, Brandon,\" he muttered under his breath, feeling Reasa slipped effortlessly into his mind beside Elina.\n\nDear God it was hopeless!\n\nThat was the first thought that came to Liam's mind as he slipped into Brandon's and viewed the carnage that was there. Unlike everything he'd previously experienced, there was no long passageway with doors leading from it, straight or curving haphazardly as Reasa had described. He stood at the beginning of what appeared to be a maze, a ten-foot barrier of steel mesh in front of him.\n\n\"Reasa?\" He couldn't keep the hopelessness from his voice and knew she picked up on it instantly.\n\n\"I've never seen anything like it before,\" she whispered, her tone horrified as she stood beside him. \"Liam, this mind is gone. There is nothing we can do.\"\n\nThey were speaking aloud as they had done before, and he knew the others would be listening to every word they said. Despite concentrating solely on Brandon's mind, he could detect Mac's sharp, indrawn breath at Reasa's announcement. Liam refused to be defeated, refused to give up hope when they hadn't even tried yet.\n\n\"I don't accept that, Reasa. I can't accept that. We have to be able to do something.\"\n\n\"What? I have no experience of this. I don't know where to begin and that book didn't give us any answers for something as damaged as this. What can we do?\"\n\nSquaring his shoulders, Liam reached down and took her hand, to lend her strength and also to find some himself. \"We can try, Reasa. We can try.\" Taking a step forward he pulled her through the opening in the steel mesh and deeper into the fractured mind before them.\n\nThe conversation between Liam and Reasa made Mac's heart sink. He had no idea what they were seeing inside Brandon's mind but it sounded hopeless. He looked away from the bed, towards the window where Elina and Karn stood.\n\n\"Are you seeing what they're seeing?\"\n\nElina shook her head, for once her serene expression clouded by a deep frown. \"I can only feel their emotions, Mac. Whatever they're experiencing has stunned them. Reasa is convinced there is nothing they can do. Despite the fact she has more experience than Liam, he isn't willing to concede that point yet. Liam is determined they can prevail, but I'm not sure how much of that is wishful thinking on his part.\"\n\nThe V\u00e2rcolac turned her gaze from the couple at the bed to the Praetorian leader. \"Are you sure you can't clear out more people from the house? I'm unsure if I'll be able to contain Liam if this goes badly, Mac. Perhaps you should join Lily? We can't afford to lose you as Praetorian leader, let alone as Lily's mate.\"\n\nA low growl from the male at her side had her head inclining in his direction.\n\n\"You should have more faith in your cousin... and yourself. Liam's shields are strong and the buffer you have in place buys us all a little time should something go wrong. Doubting Liam while you're in his mind isn't going to be of help,\" Karn remarked.\n\nMac considered their words when Elina didn't respond to his second in command, taking his time to digest the ramifications if things went wrong. Karn was right, they had an advanced warning system in place, and they could use the precious few seconds that Elina could grant them. For now, his place was here with his fallen, until such times it became too dangerous to remain. In addition, if Elina was right about Liam being unrealistic about their chances of success, someone had to be there to ensure neither he nor Reasa came to any harm. That was his job.\n\n\"I'm staying,\" he finally answered, his tone brooking no argument.\n\nThe V\u00e2rcolac opened her mouth as if to say more but a hand on her arm diverted her attention and her frosty glare turned on Karn. \"Do not touch me.\"\n\n\"Don't get excited, Missy. It wasn't that kind of touch.\"\n\nKarn removed his hand, delighting in the irritated snort that escaped Elina's lips. He couldn't help baiting her at every possible turn, regardless of how dire the current situation was. There was something about the woman that brought out the devilment in him. It had been a long time since any woman had interested him on the level that Elina did. Mac's disapproving glare settled him down somewhat, and he settled back to let events unfold.\n\n*****\n\nMore steel mesh greeted Liam and Reasa as they moved forward into Brandon's mind. It bent and twisted, seeming to branch off into different paths. It was indeed a maze, one so twisted that they hit a dead end almost immediately and had to backtrack. Liam chose to go right, weaving through spaces so narrow he could feel steel barbs snagging at his arms. He ignored it, keeping his forward momentum until he hit another dead end. \n\n\"Back,\" he sighed, returning to the beginning and choosing the forward path this time. Liam refused to give up. The fact they were in a maze indicated some kind of order within Brandon's mind even if it was complicated. If the vampire's mind was truly destroyed then shouldn't there just be blackness or an absence of everything? \n\nThey continued forward, eyes flicking over every conceivable surface they could see. Liam had no idea what they were looking for and he doubted Reasa did too. He only hoped that they would recognise it when they did see it. The maze hit a dead end going forward halting them in their tracks again. They had the option of turning left or right, and Liam pondered which route to take first. Settling on the left, he turned to start off in that direction but Reasa resisted his movement.\n\n\"Wait! Stop!\" she cried out, pulling him back, her gaze fixed on something on the ground at her feet. \n\nLiam frowned, puzzled by why she had stopped him. He couldn't see anything other than grey stone and more steel mesh, but she was bending down low, peering at something just out of his line of sight. His gut instinct was to keep moving forward, however he had to concede that Reasa had been doing this a lot longer than he had. It was pointless bringing her with him if he was going to disregard her expertise.\n\nShifting his position to get a better vantage point, he saw what appeared to be a small dull glass bead. He had no idea what it was or why his mate considered it significant. It was clear she did as her brow was furrowed in a deep frown as she stared at it. \n\n\"Liam... \" When she looked up at him there was a flicker of something in her eyes he couldn't quite make out.\n\n\"What is it?\" He held his breath as he waited for her answer, hoping against hope it would be something positive. It just had to be something positive to ease the growing hopeless he was feeling.\n\n\"I think this is part of Brandon's psyche. Reach out with your emotions, as you did at the pack. You have to concentrate hard but you should be able to sense it stronger than I can. There's barely a flicker nudging at my senses.\"\n\nIt was difficult to bend down in the tight space beside her but Liam dropped to his knees uncaring that a steel barb scored down his back drawing blood. He reached out with his stronger senses, concentrating on the glass bead that looked so innocuous. At first he could detect nothing, and then, for the briefest of moments he sensed something, felt some kind of connection.\n\n\"I think you may be right,\" he whispered, the first tendrils of hope beginning to form within him. He called out to Brandon but there was no response, and yet, Reasa's hopeful expression helped to sooth his initial disappointment. If this was part of Brandon's psyche... if they could find more small pieces scattered throughout the maze... \n\n\"Can we fashion a receptacle? If there are more pieces splintered throughout the maze, we can gather them all together and maybe that will be enough for Brandon's mind to do the rest?\"\n\nAs soon as he'd asked the question, a clear glass urn appeared before them, and Reasa reverently placed the glass bead into it. It looked so lost and alone within the huge jar, and yet, a little of the dullness appeared to have receded. Liam wasn't sure if it truly had, or if it was just wishful thinking on his part. \n\n\"We could be here for days looking for other parts of his psyche,\" Reasa said quietly, as they took a moment to pause and consider their options. \"Perhaps we should split up? We can place a marker on each passage we've tried so the other doesn't waste time repeating steps already taken. If we find more of these beads we can add them to the urn by a simple thought command. The book said we could do that as long as we can hold onto the image we're transporting an object to.\"",
        "Hope flared brighter within the V\u00e2rcolac, his beautiful mate's idea brilliant in its simplicity. He had to dampen it down, had to try to put things in perspective. They were only surmising that they had found a piece of Brandon's psyche. It could be just what it appeared to be, a lone glass bead. However, Liam was sure they were on the right track despite his caution to himself. There had been that briefest flicker of consciousness. He was certain of that.\n\n\"I'll take the left and you take the right,\" he announced, standing up. He imagined a red ribbon tied into a bow against the steel mesh. \"If you see this sign, I've been there already.\"\n\nReasa quickly imitated him, using a blue bow to mark her passage. They left the glass urn where they'd found the first bead so they would have a clear point of reference to project to if they found others. \"Good luck,\" she said, turning and moving off into Brandon's mind.\n\n*****\n\n\"What the fuck?\" Karn hissed out the words, drawing Mac's eyes to him.\n\n\"What?\"\n\n\"There's blood on Liam's T-shirt!\"\n\nElina flowed gracefully from her spot before the others could move, reaching to pull up the back of her cousin's t-shirt as gently as she could. Her alert gaze travelled the unbroken skin, a smear of blood being the only indicator that there had been an injury there. As they watched, Liam's skin tore open for a brief moment, and then instantly healed.\n\nKarn's gaze was on Reasa, another hiss escaping as a long jagged cut appear down her left arm. Unlike Liam, she didn't heal instantly. She no longer had vampiric healing abilities.\n\n\"Get them out!\" Mac ordered, his voice terse as another cut appeared on Reasa's face, scoring down her right cheek.\n\n\"No!\" Elina blocked him as he moved to shake Reasa, her steely gaze daring him to try to go through her. \"Whatever is happening in there isn't life threatening. These cuts are shallow. Liam can heal himself. I will take care of Reasa. If there is any hope of them bringing Brandon back then they must be allowed to continue.\"\n\n\"How?\" Mac demanded, fury dancing in his eyes as another shallow cut appeared on the former vampire's forehead.\n\nElina was unsure if she would be able to help Reasa but she was going to try. They had no idea what Anakatrine has done to her on a D.N.A. level when she stripped Reasa of her immortality. The pack had used traditional healing methods when Reasa had been injured earlier. Elina wanted to try something else.\n\nLeaning forward, she pressed her lips against Reasa's forehead, feeling the other woman stiffen at her touch before she relaxed once more, an absent-minded acknowledgement brushing Elina's inner thoughts. Reasa was focused on what she was doing within Brandon's mind, but she was conscious of what Elina was attempting. Allowing her lips to part, the V\u00e2rcolac ran her tongue over the scratch, sealing it in one pass.\n\n\"Fuck!\" The word ground out of Karn, as if he couldn't contain it.\n\nElina ignored him, moving to the wound on Reasa's cheek and pressing her lips against it as she had before. She tried to ignore how good the blood tasted... tried to ensure that she was in full control as she healed the other woman's injuries.\n\nMac moved around them, leaning down to Reasa's left side. He reached for her arm but Elina moved so fast, he was knocked flat on his ass before he could touch her. \"Fool!\" The V\u00e2rcolac hissed, cold eyes flashing with an emotion so feral, Karn took a step back. \n\n\"How do you think Liam will react to your scent on his unclaimed mate? How do you think he will react knowing you have tasted her blood?\" \n\nNeither of the two males had even remotely considered what a major fuck up that would be. They were both dominant, territorial males, who wouldn't think twice about overreacting should another male touch what belonged to them. Mac had reacted as the protector he was, so intent on helping Reasa he hadn't considered the fallout of his actions.\n\n\"Do not touch Thereasa while he is unaware,\" Elina continued in a more even tone, her feral expression easing as she moved to tend to the arm wound. She ignored Mac as he relocated back to his previous spot, intent on her task. When the wound was healed, she licked her lips with closed eyes, willing her inner demon to retreat to the cage she kept it in. \n\nSeeing no further wounds on Reasa, she returned to her position at the window, aware that both Mac and Karn were staring at her as if she'd just grown horns. An exasperated sigh escaped her lips as she shook her head in cool exasperation. \"Liam trusts me and therefore my scent on Reasa will not aggravate him, and neither will my taking of her blood. He knows there is nothing sexual in the act, that it is merely a healing gesture.\"\n\nShe shook her head once more, fighting the urge to roll her eyes at the disbelief on their faces. Stupid males! \"Why is everything about sex with vampires? I mean, really, do you ever think above your waistline?\"\n\n\"Perhaps because the taking of blood is always performed during some kind of sexual activity,\" Karn snorted, mockery lacing his tone.\n\n\"Idiot.\" Was the only answer he received, before Elina turned her attention back to the couple by the bed. When it became apparent things had settled down with them, the vampires returned to their watching brief, allowing the V\u00e2rcolac to call the shots... for now.\n\n*****\n\nLiam turned to his route, scouring everywhere as he walked at a snail's pace. He didn't want to miss anything and the beads were small and easily masked by the steel mesh. Despite his vigilance, he almost missed the next bead; some inner sense halting his footsteps as he walked past the area it was hidden. Turning back, his searched the area to his right more closely until the glass bead appeared within the mesh. It was as dull and lifeless as the first one, but he didn't allow that to dampen his hope.\n\n\"Go join the other part of yourself, Brandon.\" Liam called up his memory of the urn, emitting a small sound of surprise when he saw it already contained an additional two beads. It appeared Reasa had had more success than he'd had so far. With a proud smile, his bead joined the other three in the urn, and Liam turned once more to continue on his journey.\n\nHe had no idea that the work would have been so painstaking, so exhausting. Liam felt as if he'd been walking for hours on end when he finally started treading ground Reasa had already been over. Her pretty blue bows showed up sporadically for a while and then it appeared every passage he walked into contained her mark.\n\n\"Liam? I think we've completed the maze,\" he heard in his mind. His hand being squeezed in the real world accompanied the words. \"I'm tracking routes you've already travelled.\" Reasa's mental voice sounded weary and he wondered if his did too as he answered.\n\n\"Same here. Let's head back to the urn.\"\n\nIt felt like it took forever to reach the beginning of the maze and the glass urn that was two thirds full of beads that were now glowing brightly. Reasa was already there, staring at the light her expression rapt. \"Can you feel him, Liam?\" The words whispered out, awe suffusing her voice.\n\nIt was only when she spoke that he felt the third presence with them, a distinctly male persona emanating from the urn. There was no conscious thought, nothing that indicated intelligence but there was something there, and it was getting stronger with each passing second.\n\nDropping to his knees beside his mate, Liam gripped her hand as they stared at the light, watching it pulse to a slow rhythm they weren't party to. It was as if the light was undulating to a beat they couldn't hear... a beat that was slowly picking up pace.\n\n\"Brandon?\"\n\nThe light flared for a fraction of a second, and then it returned to its slow pulsing once more, a feeling of serenity washing over Liam. He could see that same serenity flowing over Reasa, the illumination from the urn bathing her exquisite features in an ethereal glow.\n\n\"We found him, Liam! We found him!\"\n\nReasa threw herself into his arms, laughing and crying at the same time, completely overcome with the emotion of the moment. Liam held her close, tears mingling with his own laughter, the emotions mixing with a sense of disbelief that they had been successful at their task. True, Brandon wasn't fully with them just yet, but there was enough of his psyche gathered that, perhaps, with a bit more time, he'd be able to find his own way back.\n\nExhausted beyond belief, Liam felt his mate's own mental fatigue, and the way her body sagged against his. With a tired groan, he rose back to his feet, pulling Reasa up beside him. \"We've done all we can for today. We can come back tomorrow if required. We need to rest, Reasa.\"\n\nIt was a testament to how exhausted she was that she didn't object to him ordering her about. When Liam slipped from Brandon's mind and turned to look at her, Reasa's head was resting on Brandon's bed, her body slumped over with tiredness.\n\nHe was instantly concerned for his mate, so much so that it took him a moment to realise that the room was practically empty, Elina and Karn being the only two remaining that weren't monitoring the patients. The room was darker, a handful of lamps casting a pale light around it.\n\n\"You're back.\" Elina's cool words didn't mask her concern. \"You've been gone for hours, Liam. We didn't know if we should try to force you to leave or let you be.\"\n\n\"What time is it?\"\n\n\"Almost midnight,\" Karn answered, a frown marring his face. \"I was all set to make you leave but your cousin here wouldn't let me. Just like she wouldn't let us remove you when you both started bleeding all over the place.\" \n\nHis scowl was for Elina who merely shrugged and turned her gaze to Reasa. She could see Liam was exhausted but he had the strength of being V\u00e2rcolac keeping him going; his mate didn't. \"Reasa looks wiped out, Liam.\"\n\n\"Wait, what do you mean bleeding all over the place?\" Her cousin's concerned gaze turned to Reasa, gently raising her from her prone position and searching her face intently. Her eyes fluttered open briefly, and then closed again as if she was too tired to keep them open. \"There isn't a mark on her,\" Liam breathed, suspicious eyes alighting on Karn.\n\n\"Don't look at me,\" the vampire growled, giving Elina a pointed look. \"She ran the whole show today. You want to know why the girl's healed, ask your cousin.\"\n\nFor a moment, Elina really wanted to smack the smug look from Karn's face but she fought down the errant thought, keeping her gaze firmly on Liam in case he reacted unfavourably. She was relieved to see that his initial suspicion was waning, and it was more curiosity than anything else on his face. \"We can talk more about it tomorrow,\" she answered neutrally, giving him the briefest of smiles. \n\nLiam shot her another quizzical glance before his need to take care of his mate overcome his curiosity and he rose, sweeping Reasa into his arms and cradling her against his wide chest. \"Where can we rest?\"\n\nKarn headed for the door. \"You can use the room at the top of the stairs on the second floor. You can have the one to the right of it, Elina.\" He paused as they passed him, his Praetorian instincts coming to the fore. \"Brandon?\"\n\n\"We did what we could, Karn. The rest is up to him.\" Liam headed up the second flight of stairs and opened the door to the room they'd been assigned. The last of his strength was waning and all he wanted to do was crawl into bed.\n\nKicking the door shut, he clutched Reasa tightly and managed to pull down the cover on the bed. He sank down onto the mattress with her, laying his mate gently against the pillows. Fast asleep she was so vulnerable, and his protective instincts surged up within him. He found enough strength to pull off her boots and his own before he wrapped Reasa in his arms and pulled the cover over them. \n\nHe didn't care how pissed off she would be when she woke. She was his to protect, and nothing would make him leave her side until she was rested enough to take care of herself. Liam's eyes drifted closed, his heart slowing to beat in tandem with the woman's in his arms. \n\nTo be continued..."
    ],
    "authorname": "JazCullen",
    "tags": [
        "vampires",
        "werewolves",
        "mating",
        "love",
        "hybrids",
        "paranormal romance"
    ],
    "category": "NonHuman",
    "url": "https://www.literotica.com/s/tears-of-the-fallen-ch-16"
}
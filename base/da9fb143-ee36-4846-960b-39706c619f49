{
    "title": "The Editor",
    "pages": [
        "Author's Note: A little bit of truth followed by a heaping load of bull. Thank you Tim413413 for editing this and eight part \"The Job\" that will soon follow. \n\n***** \n\nThis June I got older. Now, I know it happens every June, but this June affected me more than the ones in the past. I don't know why it wasn't a normal June. My birthday wasn't a milestone number. It could have been because it was basically ignored by those around me. I was never one for parties or any big celebration. Give me a cake, preferably an ice cream cake, and a few presents nicely wrapped and I am good to go. I don't want to be the center of attention, but, I guess I need some attention. \n\nMy life is basically good. I have plenty of money, although I wouldn't mind more. I have a good job that is as secure as Fort Knox. I have good friends to play cards with every Friday and another group that meets on Monday nights. Why I felt the need to change things might have been driven by the monotony. It might also have been driven by the fact no one remembered my birthday. I was getting older and maybe I saw my name fading away. Whatever the reason, I decided to write. \n\nI hadn't written anything non-business-related since college. It wasn't really enjoyable back then. I was compelled to write for English classes or I'd never receive a diploma. I tried hard, but,the words just didn't come together. Maybe it was the subject matter, which I have long since forgotten. Maybe it was because I was forced to write or maybe I was just too young. I am older now. Much older. \n\nWriting would be boring if there was no audience. I expected little to come of my feeble attempts, but I had a desire to be read. Being an average red-blooded male, I was familiar with erotica. It started with Penthouse Forum as a teen - those stories are real, you know. Times have changed dramatically since then. The internet would be my medium and Literotica would be my vehicle. \n\nMy first story came pouring out of my brain. I am not sure how to explain it. I started with a stupid plot, like all porn. Then something strange happened. The plot changed and got twisted as I wrote. I drifted far away from the original plan and a new story was born. Something I never envisioned appeared on the page. It was smut of course, but smut with a plot. It turned out I liked the plot more than the sex. This drivel I created would surely not fly in the world of Literotica. \n\nApprehensively, I created a login and posted. Sadly, I was rejected. It turns out Literotica had requirements about punctuation. I couldn't believe they really wanted me to read the rules before posting. I was pissed at first. Who the hell cares if my punctuation was inside or outside the quotes? It took me a few hours before I admitted to myself that my grammar skills sucked. I fixed what the literary snobs bitched about and re-posted. It was accepted. \n\nI forgot about the story until a lone email appeared in my inbox a few days later. It was a precious thing. \"My precious\". Someone had taken the time to comment on my story. It was from anonymous, who I now like very much. It spoke about my story as if it was a New York Times best seller. My ego grew that day and I felt younger. \n\nI struggled through the Literotica author's interface and found my story and clicked \"moderate public comments.\" I was flooded with very positive comments. There were a few naysayers who loved the story, but had trouble with my grammar. They pissed me off at first. An hour later I admitted they were correct. I would just have to be more careful next time. My ego was Jupiter-sized at this point so I knew there would be a next time. \n\nI was mowing the lawn when the next plot hit me. I had the entire story in my brain by the time I got back to the computer. I sat, I wrote and the story changed. It was no longer the silly male fantasy about twins that I had imagined. Something much more complex emerged. I drifted far away from the original plot. So much so that only the concept of the twins remained. The story was retitled to \"The Network.\" I reread it four times and fixed every error I found and posted. I was careful this time. \n\nMy ego was fed a gourmet feast. I was shocked by the response. I'm not a writer, but these people thought I was. Intermixed with the glorious responses were the grammar police scoldings. I obviously needed an editor. \n\nMy next story was also way off plan. It was supposed to be a strictly sexual fantasy. It morphed into something completely different as I wrote. I tried to find an editor and failed. I was also very impatient and my ego wouldn't let me wait. I posted a story and called it the \"The Homeless.\" Now there's a title that should make erotica lovers steer clear. It was my best-received story. I got cocky. \n\nMy next story wouldn't start with a plan. Literotica has contests and the next one was about summer. I wrote the title \"The Beach House.\" That was all that was on the paper and I had no plan. Something happened that shocked me. I started writing and a story emerged that I never thought possible. I had no idea where it came from. I was in the zone. 'Screw the contest,' I thought. The story was so much more important than the contest. Luckily, I had found an editor. \n\nEditing after the fact was painful. I am such an amateur and the mistakes were numerous. It took many days of back and forth with the editor to fix the mess. I dreaded seeing a new revision in my inbox. I was in the middle of writing another story and hated to revisit the old one. By the time I had a final copy of \"The Beach House,\" \"The Gift\" was also complete. I posted them both on the same day. There was no way \"The Gift\" was going to be edited. It was supposed to be a light story and halfway through, it had morphed into something dark. The only ending that made sense hurt. I don't revisit sadness if I can avoid it. \n\nI vowed my next story would be edited in real time. That was the decision that changed my fledgling career. I had received a nice email from bornonahighway2hell sent through the Literotica filter. \n\nI have enjoyed your stories. They are peppered with grammatical and spelling errors that can distract a reader. I have no creativity, but I do have an OCD knowledge of grammar. I would be happy to help you with your next story. \n\n-j \n\nI wrote back, explaining my desire for real-time editing. I didn't think I could handle after-the-fact again. His response was positive so our joint work began. \n\nThe story started as something and, like all the rest, evolved into something completely different. I ended up with a tortured soul having a chance meeting in a supermarket with an ex gymnast who was trying to figure out her future. Okay, I know it was a stupid start, but that is how it goes when my fingers type faster than I can think. \n\nHaving a gymnast was perfect for the sexual situations that emerged as I wrote. Flexibility can be so erotic if it is used correctly. I was laughing to myself when I wrote the first sex scene. When you have someone who can do the splits, sex in a small broom closet becomes a bit more realistic. I sent my first pages to 'j.' I received the return email the next day. \n\nEnclosed you will find an edited copy of your work. I highlighted things that should be removed in red. Additions, such as a missing \"and,\" are in green. Suggested word replacements are in yellow. \n\nNote: I don't think a woman's parts work that way. You should probably consider changing the broom closet scene. \n\n-j \n\nI was a bit surprised by the comment. This was fiction and the scene was hot. Well, it was hot in my mind. How in hell did he know if women could do that? One foot on the floor and one on the man's shoulder. I was sure a gymnast could do the standing splits if she had someone holding her leg. I wrote back thanking him for the edits, which were very helpful, and telling him I thought those splits were doable. I received an email in under ten minutes. \n\nI agree those splits are doable. It is the penetration while doing those splits that seems improbable. \n\n-j \n\nWhy was he trashing my scene? I thought I had seen something like this on the internet. I had never had a woman that flexible, or any woman who wanted to have sex in a broom closet for that matter. I began to have second thoughts. Maybe he was right. How did I know what would happen if a woman's vagina was stretched that tight? Damn, I really liked the closet scene. I intended to refer to it later in the story now that it was in. I would lose all direction removing it. I wrote back and told him so. \n\nIt's your story. I was just trying to help you make it believable. You, of course, will make all the final decisions. \n\n-j \n\nThat was nice of him to not push the issue. The \"make it believable\" statement kind of gnawed at me. None of my stories were based on any fact. Most I wouldn't even chalk up as being possible. Why did sex scenes have to be believable? They only needed to be erotic. Maybe I should include a disclaimer; \"Performed by professional fictional characters. Don't try this at home.\" \n\nI continued to write, thinking the closet scene discussion was over. My joke about mops and brooms would still be cute during the argument the characters would eventually have. I wondered why I liked writing arguments into my stories. I guess it made the characters more believable. \n\nI received another email the next day. \n\nYes, penetration is possible. It is not anywhere near as much fun as you depict. I haven't been able to find a broom closet in any supermarket. \n\n-j \n\nThe closet issue wasn't dead. I thought he said it was my story. I didn't want to argue with him and possibly lose a good editor. I wasn't sure how to respond. I was glad he accepted the fact that the position was possible. Fun is in the eye of the beholder. There has to be at least one grocery store in the world that has a broom closet. I wrote back as nicely as I could pointing out the facts as I knew them. \n\nI'll concede the broom closet. I still don't think any woman, in that position, would have the mind-blowing orgasm you describe. \n\n-j \n\nHe caved on the broom closet and the penetration. Now I just had to get him past the orgasm which I didn't realize was an issue. Maybe I didn't set up the scene as well as I had thought. I explained about the passion the couple had felt. The chance of being caught in a broom closet. The overall naughtiness of going all the way at the first meeting. This would bring out the animal in anyone and raise the pleasure to new levels. \n\nNope. Sex is more mechanical than mental. Women don't work that way. \n\n-j \n\nWho said women were my target audience. Hell, I was happy with my Literotica star ratings and had no concern if it was women or men who were reading. Sexy girl in the broom closet doing splits on my dick - that is sexy as hell for a man. I know, because I thought of it and it titillated me. I wrote back, a bit stronger this time. I let him know that his knowledge of women was probably a bit weak. In my experience, passion was as important as the mechanical aspects. Maybe even more so. My experience was a bit limited, but that didn't stop me from portraying myself as an expert on female sexuality. \n\nYou're right. What do I know? I never really had a great sexual experience. \n\n-j \n\nCrap. It sounded like he was depressed. I am not a therapist and would rather be writing my story. I wondered if I should take any of his advice beyond the grammatical. His grammar was excellent, but what do I know? I never really had a great grammatical experience. \n\nI wrote back like I was his drinking buddy. I told him it sounded like he needed to get laid. I was no expert, but I could tell by the emails that he was a bit backed up. I told him to go have some meaningless sex, preferably with a professional so he didn't have to worry about building the passion. Just lower the stress and get some release. \n\nYou're right, again. \n\n-j \n\nI left it at that. I couldn't get involved in a long-distance therapy session. For all I knew, he had four horns and a spiked tail. He could spell and that's what I needed. I type so fast I keep making simple homonym errors. Those errors never get the squiggly red line. Without an editor, some of my sentences become gibberish. \n\nI took a break from writing. It was time to feed the refrigerator so it could feed me. I went to the grocery store and, yes, I looked for a broom closet. My cursory trip around the outer walls left me with the impression there weren't any available broom closets. If there was a closet, it was well in the back, behind the employee-only swinging doors. Not at all like I had described. There were other local stores and I vowed to check them all in time. \n\nI was pushing my cart around an aisle end near the front of the store. A young boy, who should have been in school, was trying to reach a jar of applesauce on the top shelf. I saw it happening and was too far away to stop it. The boy brought down three jars in a failed leap-and-grab move. Applesauce jars don't really shatter like normal glass. They sort of land like a bean bag, cushioned by the thick sauce inside. I watched the mother's face turn red and the boy cower behind the cart. The \"cleanup in aisle six\" came over the speaker just a moment later. I hung back, not wanting to embarrass the woman by scooting my cart through the spilled sauce. \n\nI watched with fascination as a young man, wearing a clerk's apron, opened an unmarked door next to the pharmacy counter. He pulled out a mop and pail and I smiled. There, before me, lay an honest-to-goodness broom closet. It couldn't have been any larger than four-by-four. That was exactly how I described it in my story. Take that, reality police! I reversed my direction, skipped the messy aisle and continued my shopping. I had every intention of returning, when the cleaning was done, to get a good view of the closet. 'j' wanted reality. Well, I was going to give it to him. \n\nWhen I swung back to aisle six, about fifteen minutes later, the mess was gone. I could see why I didn't notice the door before. It looked like the employee access to the pharmacy counter. I pulled my cart close and casually opened the door. Crap, it was more like four-by-ten. It went much farther back than I thought. The room was used to store the aisle-wide dust brooms. Nothing a quick rewrite couldn't fix. Maybe I could pack the room with boxes leaving only a four-by-four space. With ten feet, the splits were not as necessary and the woman's movements didn't have to be as limber. \n\n\"Is that a broom closet?\" a woman's voice asked from over my shoulder. I turned to see a trim middle-aged woman in a flowery summer dress. She had dusty brown curly hair that truncated at her neckline. 'Kind of cute,' I thought offhandedly. \n\n\"Yes it is,\" I answered and looked back inside to get a better mental picture. \n\n\"How big is it?\" she asked quickly. I felt blood rushing to my face. There were very few people who would be interested in the size of a broom closet at a supermarket. \n\n\"About four-by-ten,\" I said casually, without turning around. My hand was shaking a bit. 'This can't be happening,' I told myself. \n\n\"Bigger than four-by-four,\" she mumbled, mostly to herself. My heart was beating pretty quickly. I think I had just told this woman I had a better understanding of her sexuality than she did and she needed to get laid. I turned slowly, hoping to get out of there cleanly. \n\nShe looked at my blushing face and realization flooded her features. Her face went bright red, hopefully brighter than mine. Of all the supermarkets, in all the towns, in all the world she walks into mine. \n\n\"DreamCloud?\" she asked in a whisper. I wondered briefly if I could get away with a \"no.\" I felt like a Neanderthal at a quilting bee. I nodded my head and dropped my eyes in shame. I was trying to concoct an adequate apology in my mind. I couldn't get past the \"I'm sorry\" part. If only I had more time to think. Maybe I could run out of there and send her a contrite email. \n\nShe quickly looked around like a very bad spy. I stared dumbfounded still trying to figure out what to say. She grabbed my hand, pulled me into the closet and shut the door. The small room went very dark. There was a small sliver of light coming from the bottom of the door, but it failed to illuminate any feature in the room. \n\n\"I'm Julie,\" she said as I felt her shimmying next to me. She bent over for a second. I suspected she was trying to look under the door. \n\n\"Mike,\" I responded carefully, still trying to figure out if an apology was necessary. Her left hand grabbed my wrist and her right hand pushed some silky cloth into my hand. \n\n\"Those are my panties,\" Julie said in a low, casual tone. I felt the beginning of arousal. I shelved the idea of an apology. \"I was told I needed some meaningless sex with a professional. You seemed pretty knowledgeable in your emails.\" I felt her hand run down my side. I only write about this shit. It never really happens. I was a bit worried about any expectations she might have about my sexual skills. \n\n\"I thought you were a guy,\" I mumbled like an idiot. I felt her knee rise up my thigh and continued up past my waist. I reached up and followed her thigh with my hand as she began to straighten her leg. Shit, she was reenacting the story. I couldn't see a thing, but my male brain imagined it perfectly. I tucked her panties into my pocket and brought my other hand over to caress her thigh and help bring her foot over my shoulder. \n\n\"I was a cheerleader at one time. Never been a guy.\" Julie giggled as her foot found my shoulder. I was rock hard imagining what she looked like at that moment. I lightly ran my hand down the inside of her thigh. Julie shivered as I reached between her legs. \n\n\"You're so wet,\" I observed as I cupped her sex. Julie pulled my head forward and attached her lips to mine. My erection was now straining in my pants. I couldn't believe she could hold her leg up like that and pull me in for kiss. She must have been one hell of a cheerleader. This was much hotter than what I wrote. \n\nI started unbuckling my belt. She was giggling as her hands joined mine. Impatience was eating at both of us. I pulled my pants to my knees and she dropped my boxers. When I felt her hand close around my erection I nearly lost it. Her hand was so warm and soft that I jerked involuntarily. \n\n\"Oh no you don't,\" Julie whispered, \"you're going to wait for me.\" I gritted my teeth and worked hard to pull myself back from the edge. \n\n\"This is way hotter than I thought,\" I responded, trying to preempt any embarrassing lack of stamina that may arise. She guided me between her legs and I struggled, trying to help her with my hips. I had my hands around her back, keeping her steady as we tried to find the right mix of hip positions. She seemed to be enjoying the failed attempts. I was dying a little at each failure. This was so simple to write, but much more difficult in practice. I wasn't sure I could hold off much longer with my crown rubbing and searching among her wet folds. \n\nSuddenly, we fit together. My hips angled up and she sank downward. Her groan echoed mine as the heavenly feeling embraced us both. Her hand left my cock and wrapped around my neck as we established a wonderfully slow, sensual rhythm. A modicum of control returned with the end of the pulling and jabbing. I turned my head to her firm calf and kissed it lovingly. This was by far the kinkiest, most spontaneous and erotic experience of my life. \n\n\"So much better than plastic,\" Julie moaned as my erection slowly pushed back in. Visions of her experimenting with a dildo, trying to prove my story wrong, flowed through my mind. My loins heated at the thoughts. She should have kept it to herself. ",
        "\"Julie...you have to cum. I can't take...,\" I informed her in gasps. She didn't let me finish. She pulled my lips back to hers and drove her tongue between them. I was gone. I exploded into her. Everything I had left me and entered her. I felt her muscles tense, her pussy clamped down and a shudder echoed down her leg. She was moaning in my mouth as I emptied into her. I wasn't sure how we remained upright. She was shaking uncontrollably and my legs felt like rubber. I stayed with her as my orgasm waned and hugged her close as she came down from her own. \n\n\"That was much better than I expected,\" Julie confided, \"you were right about all of it.\" I separated from her and gently helped her lower her leg. \n\n\"No. I think that was much better than the story,\" I replied, \"quite incredible in fact. This was by far the best time I have ever had.\" I carefully stroked the side of her head after locating it in the darkness. My eyes were just starting to adjust to the low light. \n\n\"You didn't write about the mess,\" Julie giggled. I imagined what must be running down her leg. I do kind of skip the messy parts when writing. Well, it was an emergency so I improvised. I couldn't leave her dripping in a grocery store. I ran my hand from her knee to her groin. I wiped my soaked hand on my boxers and repeated the process until my hand came back dry. \n\n\"Bet I won't see that in the story,\" she laughed. When I stood up she kissed me softly on the lips. \"I really kind of needed that, thank you.\" It sounded like this was going to be a one-shot deal. She made it sound final. Strangely, it did make sense. \n\n\"My pleasure,\" I replied in a masculine tone. I was hoping she could sense my smile. We straightened our clothes and put ourselves back together. I tried to hand her her panties, but she insisted I keep them. I put the trophy back in my pocket. \n\nOpening the door nearly blinded us. We got a few surprised looks from some customers, but none of the employees seemed aware of our little dalliance. Julie smiled at me and blew me a kiss. She grabbed her cart and headed down aisle six. I was getting a bit re-aroused thinking of her without panties in her summer dress. I shook my head and headed to the checkout lane. I must have smelled like a sex since the cashier's nose kept twitching. I just smiled and paid for the groceries. \n\nI changed the story as soon as I got home. The ex-gymnast became an ex-cheerleader. She was a bit older and a hell of a lot sexier. \n\nMuch more realistic and so very hot. I'm glad you left out the messy part. \n\n-j"
    ],
    "authorname": "DreamCloud",
    "tags": [
        "literotica author",
        "editor",
        "supermarket",
        "shopping cart",
        "broom closet",
        "the splits",
        "splits",
        "cheerleader",
        "gymnast",
        "writing"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/the-editor-2"
}
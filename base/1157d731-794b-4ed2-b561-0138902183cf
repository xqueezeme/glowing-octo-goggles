{
    "title": "My Darkest Dreams",
    "pages": [
        "The darkness was denser in the corner of my room. A pair of eyes looked back at me, incandescent and ethereal, staring from the head of a person-shaped silhouette. A shadow among shadows.\n\nI was immobile. It wasn't a lack of will, I couldn't move, as though I was pinioned by some imperceptible force. My blanket had slipped down, leaving my shoulders bare against my bed. The eyes never blinked.\n\nAt last the figure moved, slowly and steadily toward me, crouched and creeping low to the ground. So low that as it reached the foot of my bed, it was hidden. Without its gaze fixed on me, some sense of movement returned to my limbs, but before I could do more than take a shallow, gasping breath, a shadowy talon-fingered hand lifted over the edge and seized the fabric of my blanket. The Egyptian cotton slithered against my skin as it was drawn further down, exposing more of me to the cold night air.\n\nThe shadow rose over me, seeming to grow in size as it did. One of its talon-like fingers traced a path against the fabric from my breast to my thighs, and the cloth split with a whispery sound. I was utterly naked now, unable to move or make a sound as it loomed ever closer.\n\nThe figure lowered onto me, its featureless face coming close to mine. There was a sound like inhalation, and I felt as though my breath was being drawn from my body as it touched me in a dark, distorted imitation of a kiss. The sensation was somehow silvery, so cold that it chilled me to my fingertips.\n\nThen it changed. He changed. The unearthly light of his eyes softened and dimmed, the shadow shape fell away like mist. In its place was a manifestation of such beauty that the frigid terror in my chest transmuted into wonder.\n\nIt was a man, his bare muscles sculpted and gleaming, as radiant with an internal, angelic light as the previous figure had been with inky darkness. He was vaguely androgynous in some ways: sensuous, pillowy lips; long, black eyelashes; a graceful, lithe frame. His hair was long and snow pale, trailing down his back like a river of shining silk.\n\nIn other ways, he was thoroughly, uncompromisingly masculine. His chin was hard-angled and squared, the edges of his face precise. His muscles were equally pronounced, as though carved from marble. This was a hard, bright beauty, as cold as a silver blade.\n\nAbove all, there was his cock. It brushed against my belly, engorged and intimidating, as beautiful and terrifying as the man it was attached to.\n\nI shivered against his body, which was no warmer for his transformation. He didn't just look like he was carved from marble, he felt like it. For all his beauty, there was no softness in his touch, and the brush of his phallus alone was an icy caress. My limbs were startled into mobility by the sensation, and I cringed away from him.\n\nHe seemed to smile, and his eyes shifted color. In one moment, they were the velvet black of midnight, the next they were the warm gold of an autumn sunset, and then a rich, violet blue, like sapphires under starlight. The sense of his weight on top of me increased, holding me firm. Alluring aromas filled my senses. Cherished, evocative scents that reminded me of thunderstorms, of warm, clean cotton, of green apples. Beneath it all was a deep, hypnotic note of musk. The fragrance was seductive and deeply, profoundly male.\n\nThough his lips never moved, his voice filled my mind, a deep, insidious whisper. Danielle, it said. Closer.\n\nMy hair was bound loose and high on my head, and he freed it from the tie with long, graceful fingers, spilling thick, red waves onto my pillow. When he combed his hands through its length, pleasure shuddered through the flesh of my back all the way down to my knees. He began to kiss me, everywhere. His lips touched my eyelids and trailed a slow path from my ears, down my neck and my breasts, all the way to my bellybutton. Every caress gave me chills, yet my own heat rose. The warmth of arousal spread through my being, and I felt my hips roll with the movement of his. The skin of my thighs was slick, wet with desire, as his phallus touched the lips of my cunt. There was a shock of cold at the contact, but steadily my warmth seemed to seep into him, and the shock faded. He claimed my wrists with his hands, holding them above my head with a grip as cold and uncompromising as steel.\n\nHe kissed me, claiming my lips with urgency until I moaned fervidly, all efforts to pull away forgotten. His teeth nibbled on my lower lip before he reared up, and the tip of his cock entered me. He plundered me oh so slowly, allowing me a chance to accustom myself to the size of him with every inch.\n\nCloser.\n\nWhen his cock burrowed to the depths of me, he continued to press until I cried out, but his mouth covered mine, and my scream met a gasping end. He lifted my legs up, freely contorting me into as vulnerable a position as my body's flexibility would allow. He plunged into me, again and again.\n\nMy pussy clenched around his girth, and I screamed into the night with abandon as every muscle in my body spasmed, a kaleidoscope of sensation in the darkness. We were impossibly synchronized, and yet he went just a bit beyond what I thought I could take, just a little harder, just a little deeper. It was painful, and perfect.\n\nCascades of pleasure overwhelmed me before the glittering shadows subsumed my mind, as they always did.\n\n~*~\n\n\"It's like that every time.\" I told Skye the next day, \"Always in a different part of the room, always the same shadow shape and the same glowing eyes.\" I took a shaky breath, my hands on either side of my cappuccino. \"If I don't wake up, I never see the shadow, just the man. Sometimes he looks different. His hair, eye color, it shifts sometimes. But he's always beautiful, and I always...I forget any reason to fight after he changes.\" I took a long sip, feeling raw and weary with nerves. \"I don't know what to do.\"\n\nSkye, across the table from me, sipped her herbal tea with a troubled look. We were sitting on the rose-covered terrace of our usual cafe, very near the bank where Skye worked. Above us, the sky shifted between sunlight and clouds in a lazy, changeful dance.\n\n\"Every night?\" she asked.\n\nI shook my head. \"No. At first it was only every now and then, and sometimes it's just the man, and the...dream.\"\n\n\"The sex,\" said Skye.\n\nI nodded. \"But sometimes, it's just the eyes and the dark outline in the hallway or at the foot of my bed. One night, it was like it was on the ceiling.\"\n\nI took a deep breath. That night had been the worst. Hours of paralysis, and the eyes staring at me the entire time while the thing lurked like a spider in the high corner of my room.\n\nIt was her lunch hour, so Skye wore her \"working stiff\" clothing, a navy button down and crisply ironed slacks, but she was holding a pentacle charm in one hand as I spoke. She had a pale, heart shaped face and jet black hair styled into a partial updo.\n\n\"Dani, how long has this been going on?\" she asked.\n\n\"Nearly a month,\" I said. My eyes felt watery. \"I would think I'm just going insane, but the signs of it are always still there in the morning. When it knocks something over, tears something...\"\n\nSkye looked startled. \"The underwear?\"\n\nMy laugh was hollow and mirthless. \"I'm doing my part to keep the camisole and panty industry thriving.\"\n\n\"Jesus,\" she said, and looked down. I felt strangely guilty. Skye had a protective nature, and casual references to unpleasant things she couldn't change happening to her friends bordered on cruel. Even so, her expression remained pensive. \"Speaking of which,\" she said slowly, \"Did you go to a priest with this? Or a pastor?\"\n\nI shifted in my seat, uncomfortable, \"Yes, to a pastor, but I went to a therapist first, and I didn't tell either of them everything.\"\n\n\"Have you told me everything?\" she asked.\n\n\"The broad strokes. I'm not hiding anything, exactly, but...\"\n\n\"Dani,\" Skye said, still toying with her silver pentacle. \"I understand why you went to the Pastor first. I know you haven't always had a lot of faith in my...interests. Most people don't. But if you want me to figure out what this thing is and try to help, you need to tell me everything.\"\n\nI hesitated, feeling myself blush. \"When he changes, or when it's a dream and I never see the shadow, it's...It's often like fantasies I've had. Like it's plucked straight from my own imagination.\" I took another sip, not meeting her eyes. \"Hence why I first thought this might just be some complex delusion I've come up with on my own.\"\n\n\"And why you didn't mention everything to the pastor,\" Skye murmured.\n\n\"No. I couldn't really bring myself to tell them that. I was also vague about when I...How it reminded me of being on the painkillers.\"\n\n\"During the orgasm?\" Skye asked.\n\n\"Yes,\" I said, massaging my left wrist. \"It's just like I remember it, Skye. The waves of euphoria and relief. Exactly like it was after the surgery.\"\n\n\"Does it make you want the real thing?\" she asked, watching me closely.\n\n\"No. Yes.\" I ran a hand through my hair, and watched the color turn fiery in the sunlight. \"Sort of. I never stopped wanting the real thing, but no, it doesn't make me want to go hold up a pharmacy or bribe a doctor. But it does make part of me hope for the dreams, or whatever they are.\" I laughed shortly, \"Or it would, if it wasn't usually so terrifying.\"\n\nI leaned back in my chair, relishing the safe warmth of the sunlight. \"I mean it, it's not just how scary it looks. When I can feel it approaching, unable to move...I wouldn't wish that feeling of helplessness on my worst enemy.\"\n\nSkye shuddered, and sipped her tea as though bracing herself to continue. \"On the subject of how it looks, you said you made a sketch.\"\n\nI nodded, and drew my large messenger bag onto my lap, lifting out a binder full of my work.\n\n\"Is all of that new?\" asked Skye, watching me flip through the plastic inserts that held my pieces.\n\n\"Yes. Since this began, I've barely had a single day where I wasn't able to get lost in at least a sketch or two, and I've finished three paintings in the last two weeks.\"\n\nI drew out a piece without giving it more than a glance and handed it to her. \"Admittedly, some of my work has gotten darker in the process,\" I added wryly.\n\nI knew the sketch by heart, even if I avoided looking at it after it was completed. I had done in entirely in charcoal, with a dozen different degrees of shading. The eyes were the only thing left white in the image, and the effect was very nearly as disturbing as the real thing.\n\nEven so, I hadn't anticipated Skye's reaction. She went pale as she studied the sketch, as though by the same dark entrancement that held me in thrall every night. And when she lifted her eyes at last, she took a sharp, shallow breath, her eyes straying to a point over my shoulder.\n\nSomething in her eyes made me feel cold, distressed and half-panicked. \"Skye?\" I whispered.\n\nHer gaze cut back to mine. She took a deep, steadying breath. \"It's a Lilin spirit,\" she said, with an expression that was braced for disbelief. \"A night demon.\" she shook her head. \"Sometimes they call them incubi or succubi and they might more accurately be labelled storm spirits. The lore is full of confused etymology and strange gender disparities.\"\n\nI was past the point of disbelief. \"What does it want?\"\n\n\"It might want to feed on your life force, your creative or positive energy,\" Skye replied. \"Or it might want a child.\"\n\n\"A child?\"\n\n\"It could be, or it could be a form of possession, a way to experience the pleasures of our world without having to let go of its power over that world. I'd suggest staying over at my place, but this isn't a question of where.\"\n\nI nearly asked how she could be so sure, but I felt too numb, and very much like I didn't want to know.\n\nInstead, I asked, \"Is there something we can do?\"\n\nAfter a moment's hesitation, Skye nodded. \"There's something we can try.\"\n\n~*~\n\n\"That should do it,\" said Skye, scrutinizing her work with her chalk in hand.\n\nI looked up at her from the center of a pentacle design on the floor, surrounding by candles and jagged pieces of black obsidian, trying not to imagine what my mother would say if she could see me.\n\nI resisted the impulse to ask her if she was sure this would work.\n\nWe were in the center of my living room. Or, what would have been a living room were it not half-filled with canvases, easels, and a large table covered in painting supplies.\n\n\"This is a banishing pentacle,\" Skye said, and she handed me the charcoal sketch, tightly rolled, and a length of black, silk ribbon.\n\n\"Alright,\" she said, circling me. \"This is a prayer for cleansing the space. It won't free you from influence entirely, but it should keep the demon from entering your apartment. I need you to wrap the ribbon around the sketch, and repeat after me. As you do, imagine the figure in the dark, and picture it dissolving in your mind.\"\n\nSkye lit a stick of white sage, and continued to pace around me as she recited words from memory.\n\n\"Smoke of air, and fire, and earth, cleanse and bless this home and hearth. Drive away all harm and fear; only good may enter here.\"\n\nI repeated it faithfully, feeling remarkably silly and trying not to think about how my mother or my therapist would react to this, my attempting to banish my own fears and nightmares with burning herbs and a nursery rhyme. All the same, I did as she said. I pictured it in my mind. Dissolving. Crumbling away...\n\nAfter it was done, I did feel better; safer, though also strangely emptier than before. As though I had been at the center of a storm for so long that I felt a pang of loss at the absence of thunder.\n\nBy the time she left, the city skyline was sparkling in the distance, and it didn't feel like it was possible for shadows to come to life or for nightmares to turn real.\n\n\"Call me if anything happens,\" she said, slipping into her jacket.\n\n\"I will,\" I promised. \"But hopefully I won't.\"\n\nI lost myself in my work for hours, trying to distract myself from even the thought of it. Instead, I filled my mind with nothing but painting and the pleasure of the breeze dancing through the window, pausing only to close all of my curtains when it grew very dark.\n\nWhen my eyelids finally grew heavy, I washed quickly and tiredly, and adjusted the lighting in my apartment. I had resorted to a night light in every room, and I made sure every one of the was switched on. Even if my night time visitor was truly gone, I suspected that I would never quite stop wanting them.\n\nWhen I fell into bed, my table lamp still glowing gently beside me and the crinkly cotton of my coverlet warm around my body, I feel into a deep, untroubled sleep.\n\n~*~\n\nA dull, steady pounding woke me. After a moment of drowsy confusion, I started into alertness, feeling as though ice water had flooded my veins. The pounding was coming from outside of my bedroom. I rose from the bed, my muscles lethargic with dread, and approached my doorway.\n\nMy entry hallway was darker than it should be, the nightlight flickering desperately.All the lights, in fact, were flickering rhythm with the vibration of the pounding, which was clearly coming from my door. The raw force of it shook the wood and rattled the hinges.\n\nI snatched up my phone from my nightstand and stabbed at Skye's name on the screen.\n\nIt rang.\n\nAnd fucking rang.\n\nI glanced at my digital clock. 3:00 am, the screen read. Dammit, no wonder she wasn't answering.\n\nA third ring.\n\nSkye's voice came over the line, and I could hear the urgency breaking through the sleep haze in the sound. \"Dani?\"\n\n\"Skye, it's here. It's banging on the door\u2014.\"\n\nThat was when everything exploded.\n\nGlass shattered everywhere, from the lamp beside me to every night light in the apartment. I covered my face with a scream as sparks burst in blinding flashes from every corner, and dimmed, and left me in darkness.\n\nTotal, utter darkness.\n\nI glanced at my phone, but there was nothing to see. The light of the screen was gone, and the surface cracked when I touched it. Even the glow of my clock was lost to the darkness.\n\nI looked back into the hallway, my breaths shallow with panic. It took me several moments to realize what I was seeing, for my eyes to adjust to the utter blackness around me.\n\nThe figure stood at the end of the hallway, barely discernible in the gloom.\n\nA fraction of an instant passed in which I wondered at the lack of his glowing eyes and moved to slam the door shut between us. The eyes flared into sight, not white this time, but red. They enthralled me instantly, freezing me in place. The voice that filled my mind was laden with quiet rage.\n\nHow dare you? It asked.\n\nHe rushed at me like a sudden wind. My feet left the floor, and I was thrust against the wall behind me. A hand like steel closed around my throat.\n\nThe person before me was half the prince of my dreams and half the monster of my nightmares.\n\nHis eyes were still red. His talon-fingered hands around my neck and wrist was like fire. Beneath the naked perfection of his chest, his body was half shaped and contorted by darkness. It was as though there was a black, twisting storm cloud where his legs ought to be.\n\nHOW DARE YOU? The voice demanded in a thunderous growl. After everything I've done for you!\n\nI gasped, desperate tears gathering in my eyes. \"Please, please leave me alone!\"\n\nNO! It roared, a raging furnace in my mind. He tightened his hand on my neck, locking my gaze with his. You lie to yourself! Your spell failed because you failed to wish me gone. Banish me and you banish the inspiration I provide, the pleasure I give you. You need me.\"\n\nHis red eyes narrowed, the burning heat of his grip eased, but in its place I felt a new sense of pressure, pinning me against the wall as though gravity had shifted for me alone. He let my wrist go, and it fell against the wall. His cool, long fingertips brushed my cunt.\n\nYou need me. Say it. Two fingers invaded me in a slow, ruthless exploration. It felt like the tendrils of his darkness seeped into every corner of my being, filling me, possessing me.\n\n\"I need you!\" I said, so terrified in the face of his rage, of the impossible height he held me at, that I learned for his more quiet dominance. I touched his chest, which was as beautiful as it had ever been. \"Please. Please, I need you. I'm sorry.\"\n\nHe let me fall, but gently. I dropped to my knees with a quiet thud.\n\nHe lowered after me, a graceful, elegant descent, and his feet touched the ground in front of me.\n\nHis engorged cock was at my lips, and I kissed without prompting, deliriously happy to see the gentle expression I knew begin to form in his features. \"Please,\" I said, kissing his cock in feverish yearning, \"I'll be good.\" I kissed, and licked, and realized in that moment both that I had never tasted his cock before, and that it was the most delicious thing I had ever experienced. There was a sweetness to the taste, underneath all the wonderful scents I associated with him. The freshness, the clean masculine musk of him played in my senses with the sweetness on my tongue. I suckled at his skin with an intoxicated fixation, and I might have continued doing so forever while he watched me with eyes shifting in darkness, but after a little while, his hand claimed my wrist and lifted me up to him to kiss me. His touch was cool now, and soothing, and his kiss was tender. I felt a faint surge of the opiate rush under my skin. The grace of his forgiveness, filling me with relief.\n\nHis eyes had changed. They were the color of amethysts, and I was falling into their violet depths, even as my body rose with him, away from the wall.",
        "We were floating in the air, held in perfect, effortless suspension. As he poised his cock at the edge of my cunt, I felt utterly under his control, fixed in place as he bent gravity and possibility to his will.\n\nHe kissed me again, more deeply, and his cock entered me. In and out, he rode me in midair. His hands were human again, or seemed to be, and they squeezed the flesh of my thighs possessively. Pleasure and pain slithered through every inch of my skin. Again and again, my arousal rose to the point of orgasm, only for him to pause, and withdraw until I begged for him to continue. I was subsumed with mindless yearning, as though I made of nothing but nerves, and every one of them was aflame with raw, primordial sensation.\n\nYou're mine, he said, and his eyes flashed red.\n\n\"Yours,\" I agreed, knowing I would agree to nearly anything in that moment. My back arched deeply, his arm around my waist keeping my close enough for him to kiss me. \"Please,\" I begged into the kiss.\n\nSomewhere in the distance, there was a voice calling my name, calling to me to open a door.\n\nI didn't care.\n\n Mine, he said into my mind.\n\n\"Yours,\" I said, feeling my eyes roll back in tortured ecstasy.\n\nAnd the drug-like euphoria took hold of me, warmth and relief coursing through my body in sweet, deep surrender. \"Yours.\" "
    ],
    "authorname": "Damoiselle",
    "tags": [
        "incubus",
        "demon",
        "mind control",
        "male dominant",
        "female submissive",
        "sci-fi"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/my-darkest-dreams"
}
{
    "title": "The Steamy Chase Ch. 06",
    "pages": [
        "Comments, critiques and tips are welcome. \n\nDean Broody vs. Kayla Cooper\n\n***\n\nKayla couldn't remember a time she had been this deliriously happy. A determined Dean was a delightfully terrific guy. Right from the moment he had finally shown his face on the plane, to landing in Dubai, he had made Kayla fall even more in love with him. For a moment on the plane, Kayla couldn't believe he was the same Andrew Cole had spoken of. Dean had to show her his passport to prove that Andrew was indeed his middle name. \n\n\"He didn't lie to you Kay.\" Dean said trying to suppress the laughter bubbling up within him.\n\n\"Yeah whatever.\" Kayla had snapped with a mock scowl. \"A dean in a university in Dubai? Really?\"\n\nDean had laughed so hard he had erupted into coughs, alarming a scowling Kayla who quickly handed over her apple drink. \"Here, drink this before you die on me you jerk.\"\n\n\"Your boss is the jerk.\" Dean said after gulping down the drink and catching his breath. \"Is that the best he could come up with?\"\n\n\"You are both morons.\" Kayla retorted, and then with a sudden groan, buried her face in her palm. \"D-B 001. I should have known.\"\n\n\"Don't beat yourself up hon. I was the last person you expected to be your ticket to Dubai.\"\n\n\"Yeah tell me about it.\"\n\nAnd Dean had made her flight a blissfully memorable one. She hadn't slept a wink. They had watched movies, played scrabble, ate really delicious meals and generally had fun.\n\nWhen they got to Dubai, Kayla got to know that Dean had booked them into the elegant Burj Al Arab hotel, which was consistently voted the world's most luxurious hotel. Kayla had a whole suite to herself. They were both so tired they had gone straight to bed. Kayla woke up around nine p.m. to her bedside phone ringing. It was Dean.\n\n\"We have to eat sometime Kay.\" He drawled.\n\nKayla laughed softly, stretching. \"God I'm famished.\"\n\n\"Good. I'll be at your door in fifteen.\"\n\n\"I'll be ready.\"\n\nWhen Kayla opened her door, Dean gave a low whistle. She was looking hot and elegant in a perfect hourglass shaped maroon alluring tulip dress, which had a really low v-neck, shirred waist and draped skirt. Whilst the dress' low neck gave a hint of Kayla's creamy breasts, Dean couldn't keep his eyes off her exposed beautiful thighs. Black platform heels completed the chic look. Dean swallowed and took a deep breath.\n\n\"What are you trying to do to me? Send me to an early grave?\" His voice had gone husky.\n\nKayla chuckled. \"They did say dinner was a formal affair Dean.\"\n\n\"Yes but this...\" He trailed off staring at her creamy cleavage.\n\n\"Hey, I'm up here.\" Kayla laughed. \"Dude, I didn't know I was coming on this trip with you. I just packed what I thought would feel comfortable. So don't think I'm trying to seduce you or anything. 'Cause I'm not.\"\n\n\"I won't complain if you do.\" Dean drawled making Kayla burst into laughter. \"Come, let's go eat.\"\n\nAt the restaurant, almost every man ogled Kayla, making her groan softly. Though she was used to men ogling her all the time, the attention she was getting was rather absurd. That was probably because almost every woman there was...covered up. So much for being comfortable. \n\n\"Told ya.\" Dean chuckled beside her.\n\n\"Do you think I should go and change?\"\n\n\"Hell no.\" Dean said pulling out a chair for her to sit.\n\n\"Perv.\" Kayla muttered, making Dean laugh.\n\nThey were served food that was so exceptionally delicious the flavour lingered in their minds long after the meal was over. \n\n\"That was some good food.\" Dean said standing up and reaching for Kayla's hand. \"Now let's go explore Dubai.\"\n\nThey were driven around town in Dean's luxury jeep, a sleek 2014 Lexus GX 460, taking in the beautiful sights, with Kayla particularly taking note of the shops which she could visit the following day. Dean had been to Dubai several times as he had a branch of his firm in the country. He therefore didn't need to look around so rather used his time to watch Kayla's delightful expression. He thought she was totally adorable. Their final destination was the luxurious nightclub, Cavalli, where they danced till the crack of dawn. The club was an exclusive one which was known to stock the most expensive champagne in the world, the Louis Roederer, Millennium Cristal Brut 1990. Dean met some friends there who he interacted with for a while, leaving Kayla to enjoy her champagne.\n\n\"Hey come on let's dance.\" Dean said drawing Kayla onto the dance floor. \"Hope you're not drunk.\"\n\n\"I'm not. I've learnt my lesson. But that was some good champagne.\" Kayla drawled moving sensually to the music. \n\nDean looked mouth-wateringly sexy in black jeans and a black button-up shirt un-tacked. So handsome, virile, and so masculine a man, any woman would wish to have him for themselves. Kayla had to make a conscious effort to stop herself from dragging him onto the floor and having her way with him in front of all the people in there. All she could comfortably do, was rub against his hot body.\n\n\"I must have taken in more than I thought.\" Kayla purred, knowing she was losing her inhibitions. \n\nDean knew he was in trouble when Kayla twined her arms around his neck and started rotating and grinding her hips in rhythm with the music. Her fluid and sensual movements was the epitome of dirty dancing. Dean was so aroused he bit his lip till he tasted blood. Damn Cole! He moved his hands from her back to her hips and rocked back against her, bending his head to kiss her ear.\n\nA cry of pure unadulterated need escaped Kayla's lips when she felt Dean's wet tongue on her ear, tracing her helix. Her vision blurred. She could feel Dean's throbbing erection rubbing against her. Kayla was so wet she was worried she would start dripping onto the floor. Her need for Dean was so strong she was ready to damn the consequence and fuck the shit out of him.\n\nDean knew they had to get out of there before he lost control, before he fucked her right there on the dance floor.\n\n\"Kay...\" \n\n\"Yes Dean.\" Kayla breathed as she lifted beautiful glazed green eyes to his, her lips slightly parted. All dean wanted to do was lean forward and capture those sweet soft lips with his. He leaned in and heard her breath hitch in her throat, her lips trembling with obvious arousal.\n\n\"I really can't help it.\" He whispered, now mere inches from her parted lips. He felt a sudden tightness in his chest, an emotion that gripped his throat and had him staring at her with a need to never have her out of his sight? Where the fuck did that come from, Dean asked himself.\n\nKayla's gaze which was fixed on his, flicked down to his lips and she let out a sexy little whimper that went straight to Dean's cock, making it jerk. That was it for Dean. With a groan he closed the distance between their lips and crushed his mouth over hers, and then proceeded to kiss the living daylights out of her.\n\nDean could feel her trembling against him, her fingers pulling at his hair as his lips ate at hers. Her throaty moans only fueled his hunger. He couldn't get enough of her, couldn't kiss her deeply enough, strongly enough. Heat exploded inside his body, pouring to his cock, hardening it even more. \n\nMoaning lustfully, Kayla allowed herself to be swept away with the kiss. She couldn't believe just how much she had missed those exquisite lips against hers. Dean's kiss was confident, skilled, and just the right side of aggressive to turn her on wildly. She was desperate, going out of her mind with want. They both knew they had to stop what was going on before things got out of hand but couldn't bring themselves to release each other's lips. It felt like hours before they came up for air. Kayla was trembling and trying to get some air into her lungs and Dean's breathing was erratic. \n\n\"Let's get out of here Kay.\" Dean husked drawing a dazed and aroused Kayla after him as he pulled out his phone from his pocket to instruct the chauffeur to meet them out front.\n\nTheir chauffeur pulled up immediately they got outside and quickly jumped out to open the door for them but Dean beat him to it. By the time he got into the backseat beside Kayla, the car was already in motion. Kayla didn't waste any time in moving to straddle Dean. She grinded against his erection, drawing a groan from him.\n\n\"Fuck baby.\" He clenched his teeth and fought against the need. The need to fuck her long, deep and slow, until they were both screaming in release. He had never been so turned on in his life.\n\nLifting her head, she looked up into his eyes, pouring all the invitation into her gaze that she knew how. She wanted him and she wanted him now. Waiting didn't seem to be a viable option.\n\n\"God, Dean, I'm so wet.\" Kayla whispered. She needed him. Knew he also wanted her. But she could sense Dean holding back. If it was going to take her begging for him to give her what she craved...what only he could give her, then so be it. \"Please Dean.\" Her tongue came out to lick her lips which were trembling with so much emotion.\n\nDean froze, staring down at her. His perfectly shaped lips parted as his gaze dropped to her mouth, watching her pink tongue leave a trail of moisture. With a low growl he cupped her nape, leaned forward and captured those sexy lips with his, giving Kayla a ravenous kiss. When Kayla trapped his tongue and sucked on it erotically, Dean totally lost it. He slid his hand between them and cupped Kayla's heated panty covered pussy, smiling into their kiss when he heard her sigh. Even in the heat of passion, she was so adorable. He gripped the band circling her hips and tore the fragile material from her, the scraps of fabric easily ripping from her body. After quickly pushing the pantie into his breast pocket, his covered her wet heat with his fingers and groaned even as Kayla moaned lustfully. But just as he was about to start torturing Kayla with those wicked fingers, the chauffeur interrupted by loudly clearing his throat.\n\n\"We are here Sir.\" He said, making them conscious of where they were. \"Would you want me to drive around Sir?\"\n\nDean groaned and removed his fingers from where they just lay against Kayla. \"No, thanks.\" Dean said tightly and got out of the car, taking note of how shaky Kayla looked. Surely he couldn't leave her like that. That would be cruel he thought.\n\nThey got on the elevator with another couple, who couldn't keep their hands off each other. By the time they got to Kayla's suite, Dean had resolved to do the right thing. If he was going to get anywhere with Kayla, he had to be able to control his lust. Kayla was trembling so much she couldn't swipe her card. Dean gently took it from her and opened the door.\n\n\"Would you like to...\" Kayla looked hopefully at Dean.\n\n\"I'll see you later Kay.\" Dean said leaning down to kiss her on both cheeks. \"Get some sleep.\" And with that, Dean closed the door softly between them and walked away to his suite, cursing Cole the whole time. Turning away from Kayla was the hardest thing he had ever done in his life.\n\n***\n\nKayla stretched and looked up at the time on the projected clock on the wall. It was twelve past ten. She got out of bed and padded on the plush carpet into the en suite bathroom, taking in her appearance in the large mirror covering the wall on top of the vanity. She watched her face turn beet red when she recalled how wanton she had behaved in the club and in the car on their way to the hotel. Trying to seduce Dean with her dirty dancing, begging for a fuck, shamelessly doing that with a chauffeur present, inviting Dean into her room for an obvious fuck, and the most humiliating of all...getting rejected. She had been so mortified she hadn't been able to sleep for a long time. How could she? But then, when it came to Dean, she didn't really care where she was or who was present. She just needed to feel him inside her. She knew what Dean was doing...trying to steer their relationship away from sex.\n\n\"Oh my God!\" Kayla muttered aloud as she stepped into the shower, wondering how Dean would perceive her now.\n\nJust as she was coming out of the shower, she heard a knock on her door and knew it was none other than Dean. Not wanting a repeat of what had happened the last time she had gone straight to open her door to Dean from the shower, Kayla pulled on a pantie, bra and a long clingy t-shirt and went to open the door. It was a waiter with a trolley of assorted dishes.\n\n\"I've been asked to bring this here Ma'am.\" The waiter said.\n\nKayla opened the door wider for him to enter and heard Dean's voice in the hallway, talking on his phone. Kayla went to stand just outside the door and looked at him, willing herself not to drool. Was there ever a time that Dean didn't look sexy and commanding? This morning he was in blue jeans and a grey long-sleeved Henley shirt and boots. He looked totally hot. When Dean spotted Kayla, he walked over to her and drew her into his arms, still talking to whoever was on the phone. When the waiter came out, Dean tucked the phone between his ear and shoulder, not even once releasing his hold on Kayla, and reached into his pocket for some money to tip the waiter.\n\n\"Listen Nish, let's discuss it over dinner tomorrow at eight p.m. in my hotel. See you then.\"\n\nDean hanged up and drew Kayla into the room, closed the door behind them and promptly pulled her back into his arms. Kayla tightened her arms around him, loving the steady beat of his heart in her ear. And he smelled divine. God, how she loved him.\n\n\"Did you sleep well?\" Dean asked, dropping a kiss on her forehead when she looked up and nodded. \"At least one of us did.\" He muttered making Kayla laugh.\n\n\"And whose fault was that?\" She drawled.\n\n\"Let's eat.\" Dean said deliberately changing the subject. \"We're going on a desert safari afterwards.\"\n\n\"Really? Great! What should I wear?\" Kayla asked looking excited.\n\n\"I'll pick something for you when we finish eating.\" Dean said drawing Kayla to the dining area.\n\nAfter the delicious meal, they both went up to the bedroom and Dean made a beeline for her closet. He chose a sexy emerald, casually cool, soft, stretchy, cotton dress with a sexy cowl back. It was ridiculously short but what Dean loved about the dress was the fact that it brought out the green in her eyes. Then he picked a black jeggings and really lovely black ankle boots. He looked at Kayla's handbags and turned to look at her with a slight frown. \n\n\"You know what? Dress up. I'll be right back.\" Then he left a stunned looking Kayla.\n\nKayla quickly dressed up, styled her hair and made up. She looked at her reflection in the mirror and smiled with contentment. She looked good. Just as she was adding a touch of gloss to her lips, she heard Dean enter the suite. He had obviously gone with her card. Kayla shook her head in amusement, turning to watch Dean enter the bedroom with a package in his hand. He reached into it and came up with a classy, large, black Chanel leather bag with emerald edges and handles. Kayla gasped. It was breathtakingly beautiful. \n\n\"Dean you shouldn't have.\" She whispered, staring at the beautiful bag.\n\nHe smirked and brought out a gorgeous ultra-soft black belt, which he promptly buckled loosely around Kayla's hips, giving her an even hotter look. \n\n\"There. That's more like it. Now pack your stuff into the bag and let's hit the road.\" Dean said dropping a quick kiss on Kayla's lips before stepping back. He raised a brow when he realized Kayla was rooted to where she stood.\n\n\"Thank you.\" She said softly.\n\n\"You are most welcome darling. Now move.\"\n\nKayla laughed softly and begun putting her stuff into her new bag. The bag was so sweet she could probably just sit and stare at it for hours. She knew it must have cost a fortune and though she felt guilty for accepting it, she felt some kind of joy within that Dean would actually go to such lengths just to make her look and feel good. Though this caring Dean was refreshing, he left Kayla even more confused. With a sigh, she followed Dean out the door.\n\n***\n\n\"Oh my God that was fun.\" Kayla gushed out as they were getting into the car to head back to the hotel. After driving around in the desert dunes for about an hour, they'd stopped to walk around, take pictures and ride on camels. It had been fun. \"Thanks for taking me.\"\n\n\"My pleasure. Now time for some pampering at the spa. You up to it?\" Dean asked with a grin.\n\n\"Oh yes.\" Kayla squealed, making Dean bark with laughter.\n\n\"Good. When you finish changing into your robe, come and call me from my room. I have some mails that I have to quickly respond to.\"\n\nKayla did just that. After changing into a large fluffy white robe, she left for Dean's suite. It wasn't locked so she simply entered. Dean was behind his iPad hitting away at the keys so she simply wandered around, taking in her surroundings. It was huge and simply elegant. She went up the stairs to check out his abnormally huge bedrooms. But then, it was the presidential suite so it was only to be expected. Hers was the deluxe one bedroom suite and even that was big. Dean had explained that he always slept in the presidential suite on his trips to Dubai though it was rather huge for just one person. Only God knew what and who he did in his suite on his trips. A sharp pang of jealousy swirled through Kayla even as she tried to suppress it. What was her problem? She didn't have any hold on Dean. She had made her choice on that Friday two weeks ago. She therefore didn't have any right to feel jealous of any woman he chose to bring to his bed did she?\n\n\"Kay, I'm done.\" Dean called from downstairs, startling Kayla. \n\nShe went out onto the landing and looked down just in time to see Dean take off his top, revealing his bare sexy hairy abs. Kayla couldn't control her gasp. If Dean heard her sharp intake of breath, he didn't acknowledge it. He started unbuckling his jeans whilst climbing the stairs. When he got to Kayla, he took her hand and pulled her into the bedroom.\n\n\"Huge huh?\" He grinned. \"You should test the water bed.\" He said, stripping out of his jeans, leaving on his white boxer briefs which did nothing to conceal the large bulge at his groin. Kayla's breath was coming out fast. Was Dean doing this on purpose? She was a second away from jumping him. She gave a sigh of relief when Dean pulled on his robe. \"Go on, jump on it.\"\n\n\"Rain check...\" Kayla said in a voice she barely recognized as her own. \"Maybe later.\"\n\n\"Tell you what, why don't we have dinner in here? Then we can use their water bed as a trampoline. What do you say?\" Dean said with a naughty look.\n\nKayla promptly dissolved into laughter. \"Sounds like a plan. You're crazy you know that?\"\n\n\"You should see what my brothers and I could do when we were kids and still do even now. I want to have only daughters when I start making babies. Boys are terrible.\" Dean said casually throwing his arms across Kayla's shoulders and walking out of the suite. Kayla's heart started beating rapidly all over again. Babies? Dean Broody talking about making babies? She must be hearing wrong.\n\n***\n\n\"God, I'm full.\" Kayla said with a stretch, feeling all relaxed, thanks to the great massage at the spa earlier. They were in Dean's suite eating dinner. As usual, the food was great.\n\n\"Let's sit for a while before we start the jumping game.\" Dean said with a laugh, moving to sit on the couch in front of the TV with a bottle of Hennessey and two glasses.\n\nKayla went to sit beside Dean on the couch and took the half-filled glass of Hennessey he offered. She leaned against him and sipped at her drink, watching but not listening to the newscaster on CNN. She felt so much contentment she just wanted to cuddle against Dean. After a while, they moved into the bedroom, lying on their sides facing each other. They talked about themselves, their careers and generally, about their expectations in life. Dean delighted Kayla with stories about his crazy brothers. Whilst most were hilarious, others were so touching Kayla wished she had gotten the privilege of having siblings.",
        "\"My parents kept hoping for a girl. That's why my mum ended up in the labour ward all those times. I told her the other day that God probably wanted to punish them.\" Dean drawled making Kayla burst into laughter.\n\n\"You are nuts.\"\n\n\"They actually named one of my brothers Hilary...well, that was his middle name.\" Dean deadpanned. \"That's how bad it was.\"\n\nKayla laughed so hard she started wheezing. Dean dashed to the fridge and brought her a bottle of water.\n\n\"Are you okay?\" He asked concerned.\n\n\"You mean besides the fact that you want to kill me?\" Kayla asked trying to catch her breath. \"I'm peachy.\"\n\nDean grinned, his adorable dimples on full display. Kayla just melted. Without thinking, she drew his head down and touched her lips to his. It was a soft slow kiss full of emotions that were threatening to burst free. They both lost themselves in the kiss. \n\n\"Dean...\" Kayla breathed against his lips. \"I...I...\"\n\n\"Shh...\" Dean placed a finger on her lips. \"Just sleep here with me.\" He drew her head to lie on his shoulder and held her like he never wanted to let her go.\n\nAfter a while Dean heard Kayla breathe evenly and knew she was sleeping. What had she been about to say. A repeat of her last speech? She had probably been about to tell him she wanted to go to her own suite. He just wanted to hold her. Come morning, he wouldn't be surprised if Kayla gave another speech to let him know there was no future for them. But Dean didn't think he was strong enough to let her go as she obviously wanted. It would be like ripping his heart out Dean thought and promptly gasped.\n\n\"Oh fuck!\" He was in love with Kayla. No one could tell him otherwise. He just knew it. She had come to mean so much to him he couldn't see himself with any other woman. Dean heard Kayla whimper in her sleep and immediately loosened his hold on her. He had been unconsciously squeezing her to him. Shit! \n\nKayla had better get ready because he wasn't going to take no for an answer. This time, he was fighting for his life. Because without Kayla, he didn't think his life was worth much.\n\n***\n\nKayla woke up to the feel of fingers sifting through her hair and opened her eyes to find dark blue eyes staring straight at her. Even as she wondered just how long Dean had been looking at her sleep, she moaned low in her throat at how sexy he looked. Wasn't it a sin or something to look so fine that early in the morning? She groaned when Dean smiled and drawled,\n\n\"Morning sexy.\" Dean's voice sounded deeper and rougher than she's ever heard it.\n\nShe loved how he sounded, his voice all slow and sleep-roughened. \"What are you doing?\" She murmured. \n\n\"Watching you sleep.\" He answered huskily, his voice sending a shiver of awareness through Kayla.\n\n\"Oh God, don't look at me, I probably look awful.\" Kayla said trying to get out of bed.\n\n\"Oh no you don't.\" Dean said laughing softly and stopping her from getting off the bed. He leaned over her and stared into her blushing face. \"You are so beautiful it's not even funny.\"\n\nKayla laughed. \"That's so corny.\" \n\n\"Oh yeah? I'll show you corny. Come here.\" The Dean leaned down and kissed her lingeringly on the lips.\n\nKayla was instantly so turned on she thought she might come from just the relentless spasming of her needy pussy. Her nipples hardened into hard pebbles, causing a deep ache in her breasts. God, Dean could get her so hot and bothered, it boarded on embarrassment. Whimpering, she rocked her hips against his thigh, aroused, desperate for the feel of any part of him she could get inside her. But even as Kayla panted with excitement, the flesh between her legs trembling with want, her mind picked up on something else. \n\n\"Why do you taste minty?\" She breathed into the kiss.\n\n\"Well, I got up and gurgled. You didn't think I was just going to wake up and kiss a beautiful woman with a stinky mouth did you?\" Dean asked with a straight face.\n\n\"Oh my God, Dean...\" Kayla said pushing him off her and getting out of bed even as Dean roared with laughter.\n\n\"Hey, I'm not beautiful. You don't have to go to that trouble on my account.\" He laughed.\n\n\"Dean, you're gorgeous.\" Kayla couldn't help screeching in annoyance. \"Ever looked in a mirror?\" She asked and promptly burst into laughter when Dean's face turned pink. \"Are you blushing Dean Broody?\" She drawled, turning to enter the bathroom. Her laughter could be heard from inside the bathroom.\n\nBy the time she got back to the room, Dean was standing by the bed, holding a wide tray of food. Kayla gasped in surprise, staring at Dean. With a toss of his head, he made Kayla know exactly where he wanted her. She slowly climbed back into bed and watched as Dean set the tray on her lap. There was cereal, coffee, juice, scrambled eggs, bacon, sausages, toast, pancakes and a single red rose. Kayla picked up the rose but couldn't seem to have the strength to bring it to her nose and inhale its sweet scent like she was dying to. \n\n\"Thanks Dean. But I don't think I can possibly eat all this.\" Kayla said in a voice so low Dean had to strain to hear her. She was staring unseeingly at the food.\n\nDean saw Kayla's lips quiver and swore under his breath. He quickly picked up the tray from her lap and placed it beside her on the bed. Then he moved to sit with his back against the headboard, behind a really emotional Kayla. He pulled her into his arms, her back to his chest and simply held her. When Dean saw a tear slide down her cheek, he turned her to straddle him and kissed it away.\n\n\"It's okay baby. Shhh. You sure you're not coming down with something? 'Cause the Kayla I know never cries.\" Dean murmured teasingly.\n\n\"Fuck you.\" Kayla laughed shakily. \"I'm sorry for the waterworks. It's just that no one has ever served me breakfast in bed and...\"\n\n\"Kay, I was your first. Who were you expecting to serve you breakfast in bed? The guys you left with blue balls?\" Kayla burst into laughter. \"Or Mother Theresa?\"\n\nBy now Kayla was laughing so hard Dean feared the juice on the tray would spill onto the bed. He pulled the tray closer and did something that surprised the hell out of Kayla...he fed her. She was lost for words. She felt pampered, cherished and...loved.\n\n\"So...ready for some shopping?\" Dean asked when they were done with breakfast. \"Serious work starts tomorrow.\"\n\nDean had explained that his firm had been contracted to put up a building for a bank in Dubai. Coincidentally, the lawyers for his client was her and Cole's firm. Everything had already been finalized so all Kayla had to do was sign the documents on behalf of her firm on Monday. She didn't have to be part of any meeting. That had been just a ploy to get her to go to Dubai to spend time with Dean. Dean on the other hand, had a lot of meetings to attend to before their departure on Wednesday. They were going to be home on Thursday, in time for Thanksgiving. \n\n\"Hmm. So this is the last day I get you fully to myself huh?\" Kayla asked, curling up tighter against Dean. She was missing him already.\n\n\"Yep.\"\n\nKayla was quiet for some time. Then with a sigh, confessed. \"I'll miss you.\"\n\nDean simply turned and pressed a kiss on her head, wondering how he was going to concentrate on work with Kayla on his mind. \n\n\"Would you want to shower here?\" Dean's voice sounded hoarse.\n\nAfter a slight hesitation, Kayla answered, \"why not?\"\n\n\"Wait here. I'll run you a bath.\" Then he left to do just that.\n\nBy the time Kayla came out of the bathroom clad in a towel, Dean was already showered and dressed in khaki pants and a black polo shirt. Kayla gulped audibly. He looked good enough to eat. He held out one of his t-shirts to Kayla, then grabbing the small towel in her hand, he turned her around to face the mirror in the room and dried her hair with the towel.\n\nAfter a while, Dean declared in a satisfied voice, \"all good\" and threw the towel onto a table. \"Using a dryer won't take too long now...\" Dean trailed off when Kayla turned around swiftly, went on her toes and captured his lips with hers. \n\nHe was stunned initially, then tilting his head, he took over the kiss the way he took over everything...with dominant confidence. His lips, so firm yet soft, pressed against hers. His tongue stroked deep, licking and tasting, causing goose bumps to spread in a wave over Kayla's skin. The moan that tore out of her throat was so sexy Dean felt his cock begin to thicken and lengthen between them, pressing urgently against Kayla's lower belly through his pants and her towel.\n\nOne of his hands moved up to cup her nape, capturing her, holding her steady as he kissed her passionately\u00b8 his mouth seeking and ravenous, sucking on her lips and tongue. Dean growled deep in his throat. Though he seemed to have a hold on his control, he couldn't hide the effect Kayla had on him. Kayla on the other hand had totally lost any control she had. She sobbed with need as she rubbed her thighs together. She was going out of her mind. She needed to come so badly. Moaning, she arched into Dean, her fingers clutching at his black hair.\n\n\"Dean please...\" She pleaded. How had he gotten her so worked up so quickly, Kayla wondered.\n\nDean groaned, torn between giving Kayla some relief and the need to go by his 'no sex' rule. When he saw tears of frustration well up in Kayla's eyes, he made up his mind. No way was he going to leave her like that. He just couldn't.\n\n\"God Kay, you drive me so crazy.\" He husked as he reached down between her thighs, his fingers delving reverently into her wet, hot and swollen folds. Kayla heard his sharp intake of breath when he realized how soaked her thighs were with her juices.\n\n\"I want you so bad Dean.\" Kayla moaned brokenly. \"Please. Please, Dean. I ache with wanting you inside me.\" Her hand went to her chest in an attempt to loosen her towel.\n\n\"Don't.\" Dean said sharply, stopping Kayla from undoing the knot holding her towel together. \n\nHe knew there was no way he could see that pierced nipple and not fuck her brains out. He was having a hard time stopping himself from releasing his angry cock and plunging into her sweet, hot, wet pussy as it was. Kayla locked her hands around his neck again and drew his head down to take his lips, opening her legs wider to give Dean better access. \n\n\"Dean...\" She breathed into the kiss. \"Take me.\n\nKayla's entire body quivered as Dean's long middle finger slid lazily into her, fingering her leisurely, building her need. He slowly fucked her mouth deeply with his tongue simultaneously, moving in rhythm with his finger. Kayla moaned lustfully into the kiss, her hips circling as Dean rubbed against her clit with the pad of his thumb. She gulped air into her struggling lungs as Dean's tongue licked from her mouth to her neck. \n\n\"God baby, I have to taste you.\" He whispered, pulling his fingers out of her drenched pussy and picking her up. \n\nDean strode with Kayla in his arms to the bed and dropped her on it in such a way that, her arse was at the edge of the bed and her legs dangled over. Then he went on his knees between her thighs, pushed the towel out of the way and latched on to her pulsing clit. \n\nThe moment she felt Dean's mouth between her legs, an intense orgasm rocked through Kayla and she cried out as her body convulsed with release. Sensation burst through her with such force that, her back arched and she jerked against Dean's face. Her fingers, which were entwined in his hair tightened, holding his head to her. Dean ignored the almost painful grip on his hair and continued to lick her through the delicious aftershocks, prolonging her pleasure.\n\n\"Oh my God, Dean.\" Kayla sobbed in ecstasy as Dean slid a finger inside her and slowly circled her swollen clit with his tongue.\n\nKayla had hoped he would fuck her brains out after giving her that explosive release but it looked like Dean had other plans. When his finger curled inside her and rubbed against that pleasure spot, Kayla's entire body locked into that breath-stealing moment of exquisite tightness that came right before release. With an ear-piercing scream she dissolved into an even more intense orgasm, mere seconds after the first. Her entire frame shook uncontrollably with sheer ecstasy. \n\nWhen she calmed down, Dean moved up to partially cover her with his body. He landed a flurry of kisses all over her face before returning to spear her mouth with his tongue, giving her an unbelievably hot kiss. When they came up for air, Kayla's eyes fluttered open and she stared up at Dean with so much love in her eyes he gasped. She was so undone she didn't have a handle on her own emotions, couldn't conceal the intense love she felt for Dean. Her emotions and feelings were bared in her eyes for him to see. She was an open book. Seeing all that love and emotion shining in her eyes made Dean lightheaded. And before he knew it, he was blurting out how he felt.\n\n\"I am so in love with you.\" His voice was filled with so much emotion and reverence Kayla didn't doubt for a second that he was telling the truth.\n\nA sob escaped Kayla. She couldn't stop the tears that slid down into her hair. Dean shoved both hands into her damp hair as he stared into her eyes. He was shaking, overwhelmed by the intensity of feelings he had for Kayla, the knowledge of how much he needed her in her life.\n\n\"I love you,\" he told him, his eyes suspiciously bright. \"God, I love you so much Kay.\" Dean breathed, looking into her wet eyes with his beautiful ones. \"Don't cry baby,\" his voice was barely above a whisper. \"It kills me to see you cry.\"\n\nHe pulled her up into a hug with a groaned, and it was a low sound of torment. Kayla buried her face in his shoulder and cried, her nose pressed into his throat. \n\n\"I love you.\" She sobbed uncontrollably. \"I love you so much it hurts.\"\n\n\"I know.\" Dean whispered, rocking her.\n\n\"It's too much.\" Kayla whispered brokenly. \"What I feel for you is too much.\" Kayla paused to take a deep breath. \"That night you came to my house, I got so confused at the intensity of feelings you aroused in me I didn't know what to do. It was amazing the way you took me that night. You just...took me...completely and utterly took me, in the best sort of way. It disarmed me, made me feel completely surrendered. It terrified me.\" She turned beautiful glazed green eyes on him. \"I'm scared Dean. So scared I'd only be setting myself up for a heartbreak I couldn't survive.\" She added in a whisper.\n\n\"I would never hurt you Kayla. That's a promise.\" Dean said in a voice that sounded almost pained. \"This is the only thing I have to give you that no one else gets to have. Me. You get to have me in a way that no one else gets to have me. I want to give me to you and only you. And that's the truth.\" Dean shook his head slowly. \"The insane thing is that the more honest I am with you, the better I feel.\"\n\nHer breath accelerated with each word he said, her lips slightly parted. All Dean wanted to do was lean forward and capture those sweet soft lips with his but he held back.\n\nWith a breath that sounded like a sob Kayla leaned forward and took his mouth in a lust-fueled kiss, which was flavored with the salt of her tears. For the very first time, she took over their kiss and it felt so good, she thought she'd die if they stopped. Her lips moved desperately over his, her tongue invading, teasing and possessing, winding everything within Dean tighter and tighter. They both shook in each other's arms as the kiss set their bodies ablaze. She kissed and licked her way over his face, tasting him, making him desperate, and then took his lips again. And just like that, Dean growled keep in his throat and bucked against Kayla, creaming his pants. His hands gripped Kayla's hips, holding her in place as he thrust against her, shuddering through a quick, hard orgasm. He shook as pleasure stuttered through him. \n\n\"Oh fuck,\" he breathed into the kiss.\n\nWhen the tremors that shook Dean died down, he slid his hands up to Kayla's neck, his thumbs pressing into the soft skin of her throat as he cradled her head. He brushed his lips back and forth over her mouth, his breath washing with hers.\n\n\"See what you do to me?\" Dean husked against her lips. \"I don't remember ever coming inside my pants. Not even when I was a teenager. You fucking own me, Kayla. Never doubt that.\"\n\n\"That was so hot.\" Kayla whispered. \"You are totally yummy. And I love you to bits.\" Now that she'd put it out there, she couldn't tell him enough.\n\nThen Dean angled his head to kiss her deeper, his tongue licking into her mouth. Kayla was breathless by the time he let me go. God, she destroyed him. He wanted to fuck her until they both passed out in exhaustion but he reminded himself that he didn't want his dick anywhere near her pussy, much as it killed him.\n\n\"I wish we didn't have to go shopping.\" Kayla whimpered. She was dying to feel Dean inside her so bad she was shivering.\n\n\"See how you're feeling?\" Dean interspaced each word with a kiss. \"That's all the more reason why we should go. Get used to this without sex clouding our minds.\" He chuckled when Kayla groaned in frustration. \"Come on, let's go get cleaned up.\" Dean pulled a groaning Kayla off the bed.\n\n***\n\nKayla reached for her cell phone when it rang, her heart missing a beat when she saw the caller id. \n\n\"Hey.\" She said softly.\n\n\"Hey yourself.\" Dean husked. \"How are you?\" Kayla's eyes closed as she absorbed that sexy voice, loving how deep and confident it was. \n\n\"Missing you,\" she replied in a small voice.\n\n\"Missing you more love. Listen, I want you to meet me in town at eight p.m. sharp. Can you do that?\"\n\n\"Sure.\"\n\n\"Good. The driver will pick you up.\"\n\n\"May I know where we're going so I can dress appropriately?\" Kayla asked with a smile in her voice despite herself. Dean was so commanding at times.\n\n\"Shopping.\" \n\n\"Dean come on! Didn't we shop enough yesterday?\" Kayla asked incredulously.\n\n\"We didn't get you dresses. I want to get you dresses.\" Dean replied smoothly.\n\n\"But I don't need dresses Dean.\" Kayla whined.\n\n\"Just...humour me okay?\" He said quietly.\n\n\"Okay.\" Kayla didn't know how to say no to that tone. \"I'll see you.\"\n\nThe line clicked off and Kayla instantly felt lonely. \"What have you done to me Dean Broody?\" Kayla muttered.\n\nThe day before, they had moved from mall to mall shopping their arses off. Ignoring her protests, Dean had bought lots of expensive designer stuff for her. Shoes, bags, perfume and a really expensive beautiful Cartier watch among others. All she had to do was look at something for more than two seconds, and then Dean was paying for it. Kayla had felt spoilt, had felt like a princess. It had been fun.\n\nThey had gotten back to their hotel in time for Dean to have a meeting with one of his business associates. After having a scrumptious meal in Dean's suite, he had convinced her to sleep in his suite. They had retired to bed early as they were both exhausted from all that shopping.\n\nKayla found herself falling more in love with Dean with each day that passed. Suddenly, she was always in a state of euphoria when Dean was around her. She had been in love with him for a long time but these past weeks had been something else. The feeling was even more intense now as Dean went out of his way to let her know how crazy he was about her. Yes, Kayla knew Dean could go to great lengths to get into the panties of girls but this was different. For one, he had already gotten into her panties and knew he could get in there again whenever he wanted...she had made that obvious. She couldn't resist him...she always wanted him and he knew it.\n\nWhat made Kayla fall even more in love with each breath she took was the unconsciously loving way Dean treated her. His heart-melting actions and utterances were spontaneous and never failed to make her heart beat faster. He was ridiculously sweet to her. He looked like he couldn't help himself. Dean was wearing his heart on his sleeve. The day before, when they had retired to bed after a tiring day, he had thanked her. Kayla had been dumbfounded. ",
        "\"Thanks.\" Dean had murmured against her hair as they lay in bed that night. He was spooned behind her, his chin on her shoulder and his legs tangled with hers.\n\n\"For what?\" Kayla had asked, confused. If anyone needed to say thanks, it was her. She had turned around to face Dean.\n\n\"For loving me, Kay. You don't know how much that means to me.\" Dean had whispered with so much emotion, Kayla felt a tightening in her chest. \"You could have loved someone else, could have loved anybody else, yet you love just me. Just me.\" \n\nHer breath hitched in her throat. She did love the man so bloody much. \"Just you.\" Kayla had whispered back. Then in a shaky voice, she added; \"Well I couldn't help it. You are extremely fuckable.\" Though she had tried to joke, her voice had quivered with emotion.\n\nDean had laughed softly. \"Look who's talking.\" Dean said, kissing her lightly on the lips. \"Good night Kay.\"\n\n\"Good night handsome.\" Kayla replied, snuggling into Dean. She rested her head against his chest and listened to the sound of his heart beating steadily. \"Dream about me.\"\n\n\"I don't have a choice my love.\" He husked and just like that, Kayla had melted.\n\nKayla sighed, missing Dean even more now after talking to him. He was ridiculously sweet. That morning, he had woken her up with a sinfully hot kiss to tell her he was leaving for a meeting and would get in touch with her later in the day. An hour later, he had sent a simple but ridiculously sweet text message that still brought a smile to her face any second she remembered it. The message had simply read:\n\n'I can't stop thinking about you.'\n\nKayla couldn't wait to see him. During their shopping the day before, Dean had disclosed that he had apparently taken a course in fashion designing for a semester back in college just for the fun of it. That piece of information had helped Kayla understand Dean's eye for fashion. That short course, coupled with his background as an architect, which meant he naturally paid attention to detail...and the fact that he was a womanizer, meant his having an eye for style, was only to be expected Kayla thought with a scowl. She realized what she was doing and sighed with exasperation at herself for feeling jealous. She did jump into this with her eyes wide open. But was it too strange to want all that male hotness for herself? She was only human after all...and in love.\n\n***\n\n\"Don't look at me like that, Dean.\" There was an edge of breathlessness in Kayla's voice that had Dean fight even harder the need to kiss her.\n\nThey were in a dress shop, where she had tried on and selected lots of chic designer dresses at Dean's insistence. That smoldering look he was giving her that very moment was melting her like butter under the sun. She could feel her panties getting wet, which felt very uncomfortable. She made a mental note to dash to the restroom when she finished trying out the current and final attire...a knee-length pleated skirt.\n\n\"Come on, say something.\" Kayla sighed. \"Like it?\"\n\nDean swallowed. Kayla was standing before him in just her bra and the skirt. He could see the outline of that nipple ring through the lacy bra and hunger surged through him, a need for her he couldn't control or fight. His dick took notice and throbbed within the confines of his pants imperatively. He wanted to adjust himself so badly but the attendant was watching them like a hawk. He wanted Kayla with every cell in his body, with every breath he could drag into his lungs. No woman had ever worked him into a frenzy so quickly...by doing absolutely nothing. And from the way Kayla's face looked flushed, her breath quickening, it was obvious she wanted him too. Dean smirked, loving how helplessly responsive Kayla was to him even when he'd done nothing more than look at her. \n\nDean shrugged. \"First of all, I can look at you however I want.\" He said huskily, making Kayla's heart beat faster with lust. \"Try the shorter one. You have to show off those beautiful legs, not cover them up like a nun.\" Dean said with a face filled with desire.\n\n\"Perv.\" Kayla muttered shakily as she grabbed a flirty white pleated miniskirt and went back into the dressing room.\n\nJust as she finished taking off the longer skirt and reached up to grab the shorter one from the hanger, she felt arms go around her. She was in just bra and panties. She didn't have to squeal...she would know the feel of those arms even in her sleep. Kayla turned around within the circle of Dean's arms and looped her arms around his neck, laughing softly.\n\n\"You shouldn't be in here. Where's the attendant?\" Kayla whispered.\n\n\"Everyone has their price.\" Dean whispered right back and leaned down to capture her lips in a toe-curling kiss.\n\nWith a muffled groan, Dean slid one of his hands down her belly and came to rest between her legs. He felt her wetness and heat and wanted to lick the heated flesh of her pussy so bad, taste the slow glide of her juices as they met his tongue. He was dying for it. He had thought about that so much, he'd had a hard time concentrating in his meetings that day. He rubbed his fingers over her wet flesh through her soaked panties, smirking when Kayla's breathing changed.\n\n\"Wet,\" he whispered. \"And so hot.\" \n\nHer eyes widened when she felt fingers push the edge of her soaked panties from the hollow of her thighs to slip inside her wet folds.\n\n\"Dean...\" Kayla gasped and grew wetter.\n\n\"Shhh.\" Dean's cock hardened as sunk two fingers deep into her pussy, wishing those fingers were his cock instead.\n\nHis tongue licked from her mouth to her neck, along her collarbone to her chin and up to her ear, dipping inside and heightening all her senses.\n\n\"Oh God.\" Kayla's eyes fluttered close as she shivered. She sank her fingers into his hair and moaned, quickly biting her lip to keep the sound in. She knew what they were doing was dangerous. Anyone could walk in and catch them but she was too turned-on to care. If someone had walked in right then and found her writhing against Dean in that small dressing room while he finger-fucked her, she didn't think she'd care at all. At that moment, Kayla didn't care about anything other than Dean not stopping what he was doing.\n\nKayla tried to keep quiet, but couldn't stop the noisy, little gasps that escaped her. When Dean lowered his head to capture her right unpierced nipple with his hot wet mouth and started sucking through the lacy material of her bra, she knew she would lose the battle of keeping quiet. \n\n\"Oh God, that feels so good.\" Kayla breathed and arched closer against Dean.\n\nWith Dean's fingers sliding in and out of her, his thumb circling her engorged sensitive clit, and his mouth pulling blissfully on her nipple, Kayla didn't stand a chance. Everything ceased to exist but the pleasure whirling through her. Her muscles started to contract around those wicked fingers as a ferocious orgasm tore through her. \n\nDean felt it when Kayla was about to come, could feel her tightening around his fingers, and instinctively knew she was going to cry out. He released her nipple and quickly moved up to slam his mouth on hers, just as a loud cry tore out of her. Dean swallowed those lusty cries, massaging her clit between his forefinger and thumb the whole time, prolonging her pleasure. \n\nKayla wrapped her arms tightly around his neck and sagged against him as the aftershocks rocked through her. The sinful pleasure Dean bestowed on her inside a dressing room in Dubai of all places was unbelievably exquisite. The danger of getting caught definitely added to the excitement.\n\nDean brought his fingers to his mouth and licked them clean of her juices. \"You taste so sweet.\" He murmured. \"Remind me not to go anywhere near you pussy if I don't want to get caught.\" He added teasingly.\n\nKayla felt the heat of mortification sweep over her and with a groan, hid her face in his shoulder. \"I'm so sorry.\" She breathed.\n\n\"Don't be.\" Dean grinned. \"I love how respond to me, how you can't control yourself with me. Let's just say it makes me want you even more, love you more.\" He husked, dropping a quick kiss on her lips. \"You have such deliciously sexy lips.\" He whispered. \"I can't get enough of it.\"\n\n\"I love you.\" She whispered, meaning those three words with everything in her.\n\nWhen they eventually came out of the dressing room, their attendant was standing discreetly to the side, her face beet red. Kayla's answering blush didn't go unnoticed. She just wanted to get the hell out of that shop and Dean didn't help matters by laughing the whole way to the hotel. Much as she loved him, she wanted to strangle him. But despite herself, Kayla's lips curled in amusement. Her man was crazy, and she loved him like that because that was what made him...Dean."
    ],
    "authorname": "adjoaq",
    "tags": [
        "travel",
        "shopping",
        "dressing-room",
        "club",
        "love",
        "romance"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/the-steamy-chase-ch-06"
}
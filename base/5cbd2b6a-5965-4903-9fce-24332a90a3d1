{
    "title": "Full Circle",
    "pages": [
        "This story is a sequel to 'Amy makes a new life,' 'After the game' and 'Cricket Match'. It won't matter if you haven't read those stories, but I'd suggest that you do. It won't matter if you know nothing about cricket, it's secondary to the story and everything you need to know will be covered. Sarah Hardy is a central character in those stories and this one picks up on her life twenty-three years after the last. It has a happy ending, but there is a huge tragedy and I suggest that you get the tissues handy, a big box! Please stay with it!\n\nThere is not a great deal of sexual activity in this story, so if that is what you're after, look elsewhere.\n\nAll characters are fictitious and any resemblance to other persons is accidental.\n\nChat show\n\nI was nervous holding Hayley's hand as we waited in the wings at the side of the stage. I'm not sure why I was nervous, the media was more my area of familiarity than hers, but she didn't seem fazed as she leaned in and whispered, \"Why do they call it the 'Green Room' nothing in there was green?\"\n\nI didn't get the chance to reply. The audience was going loopy as the Host, Gary Morton, was introduced and it took a while before the applause slowed. \"Good evening, ladies and gentlemen, nice to be here once again. I've got a great show for you this evening.\" He went on to talk about his guests; Holly Angelo, who'd just won an Oscar for her latest blockbuster and there would be music from Faith Shadow who was going to perform her latest release near the end of the show.\n\n\"But first, I have two guests. Both of them are legends of English women's cricket and one whose new wildlife show will reach its final episode this weekend. Firstly, the world number one ranked female bowler for ten years, the former Captain of the England Women's Cricket team and recently appointed as their new coach, Hayley Sharp.\" Hayley squeezed my hand before she walked out onto the stage to be greeted with air kisses from Gary. I watched her backside as she walked away from me. Even after all these years it still excited me, as did her legs, toned and long.\n\n\"And now, Hayley's partner, also an England all-rounder for fourteen years until her career was cut short by injury, but who has found fame doing voiceovers. She was runner up in 'Stuck on the island' and has recently presented a nature programme. I'm looking forward to the fourth and final episode this weekend. Ladies and gentlemen, Sarah Hardy.\"\n\nI walked forward, skirt swinging, longer than Hayley's, but then I knew that I was going to be sitting facing an audience and didn't want the world seeing up my skirt. She wouldn't be told and picked a short dress, so, hell mend her. Air kisses from Gary before I sat, as elegantly as possible, next to my darling wife who touched my arm.\n\n\"You two have been married for twenty-three years and have a daughter?\"\n\n\"That's right, Gary. Sarah took a year out for us to have Chloe, who's almost sixteen now.\" Hayley sounded confident.\n\n\"She's become an unintended star in her own right, but we'll get back to her later. First I want to ask how you feel about being appointed England Coach.\"\n\n\"I've been coaching since I retired from playing and a part of the England set-up for a few years, so it's not completely new, but it's a great responsibility and a great honour to be appointed to the top job.\"\n\n\"You coached the men's team as well, didn't you?\"\n\nHayley had a little laugh, \"I helped the spin bowling coach from time to time, but I wouldn't claim that I did any more than that.\"\n\nThe next five minutes were taken up with a discussion about Hayley's cricket career. I zoned out watching her. She'd matured into an elegant woman with a long neck and a lovely smile. I suspect that I'd been in love with my cricket hero for a couple of years after meeting her, but had never admitted that to myself. It wasn't something realistic until the kiss whilst we were on tour in Barbados and sharing a room. Things changed that night and over the next four weeks. We knew that it was the real thing and that we'd be together for a long time. Despite our parents worrying that it had all happened too fast, Karen and Olivia, my friends since high school, grilling me relentlessly about it, we got married nine months later and my passion for her has never dimmed.\n\nGary's question to me caught me by surprise. \"It always seemed that you were in Hayley's shadow as a cricketer. Did it feel like that to you?\"\n\n\"I loved playing cricket and was lucky to be able to do it for a long time. I got to play with some of the best players in the world, including her. She was better than me ...\" I let my answer trail away.\n\n\"I read an article, written about you, when you retired, which suggested that in another era you might have been the great star, you were just unlucky that she was around.\"\n\nThat annoyed me. \"No,\" I said emphatically, \"I was lucky to play with her, I was better for it and I was lucky that we fell in love. I wouldn't change one thing.\"\n\n\"Your career was cut short by injury at thirty-four. What happened?\"\n\n\"The team were practising fielding, doing catching drills and one of the balls went astray. I was facing the wrong way and didn't see it coming, it struck me on the right elbow. It didn't hurt that much, but it trapped a nerve and I couldn't grip a ball, anything actually.\"\n\n\"Did you get treatment?\"\n\n\"I got first-class care and treatment. The ability to grip came back after about a week and I had no problems with it except for the one thing I needed. I couldn't hold a cricket ball properly, so I couldn't bowl. We tried lots of things, but none of them worked. I knew that I wasn't a strong enough player to stay in the team for just my batting and fielding, so I decided to quit.\"\n\n\"Is it still an issue?\"\n\n\"No,\" I had a little laugh, \"About ten months later it all came back, for no apparent reason, but by then it was too late. I'd had a good run and I was content with my decision; I'd become a full-time mum and that made me really happy.\"\n\n\"Who looked after Chloe when you were playing?\"\n\n\"It was a combination; our parents were great. I think they secretly wanted us to go away so they could indulge her. My friends from school have two girls the same age as Chloe and she lived with them for a lot of the time. The three girls are like sisters, just as we'd been.\"\n\n\"You went on a few quiz shows?\"\n\n\"Lord knows why anyone thought it would be a good idea. The first one was a sports panel and I expected to make a fool of myself, but I did well and turned out to be quite funny. That got me onto other shows and I went along for the ride, expecting it all to end rather suddenly.\"\n\n\"You did some radio and TV commentary work as well?\"\n\n\"Yes, what an honour that was, to work with some cricket legends whilst being paid to watch a game that I love.\"\n\n\"And then you were invited to go on 'Stuck on the island'?\"\n\n\"I thought that was a crazy idea, but Hayley pushed me to do it,\" I replied.\n\n\"You seemed to be really up for all the challenges and proved quite competent.\"\n\n\"I knew the format of the show and thought I could have a go, although I expected to get booted off pretty quickly.\"\n\nHayley jumped in, \"Gary, she's not telling the whole story. She spent weeks reading about survival techniques before they started shooting. She always practised hard for her cricket and put the same effort into this.\"\n\nGary went on, \"The public loved the fact that one day when you had no food you said 'no problem' made a spear and spent two hours fishing.\"\n\n\"Yes, I was proud of that. I caught enough fish for a real feast that evening.\"\n\n\"So, tell us about butchering the hog.\"\n\n\"A couple of the others had built a trap and caught this wild hog. Actually, it wasn't that wild, the crew had released it earlier. It was all fine until it was dead and then no one was prepared to cut it up. Lots of people were squeamish about all the blood.\"\n\n\"But you, did it?\" Gary asked, but it was more of a statement.\n\n\"Butchers prepare meat every day and in some parts of the world, it's normal for people to prepare their own food straight from an animal. So, I thought I'd give it a go.\"\n\n\"You actually said 'give me the bloody knife,' it so happened that it was dripping with blood and everyone burst out laughing.\"\n\n\"Except me, I didn't see the humour in that at the time. I got the thing up on a flat stone and went to work. I suspect that no butcher would ever give me a job, but we ate well for a couple of days.\"\n\n\"That won you a lot of respect from the public, who kept voting to keep you.\"\n\n\"I was surprised every day. I was proud, but I wouldn't have been too sad, I could have got home to Hayley and Chloe, who I missed a lot.\"\n\nHayley laughed, \"Gary, I had a campaign going and recruited all our friends, family and ex-cricketers to vote.\"\n\n\"Obviously Hayley wasn't as keen for you to come home, Sarah. But Hayley you managed to get in touch with lots of cricketers from other countries.\"\n\n\"I reached out to everyone that I knew and it took off. I think we had players from all of the test playing countries, men and women, voting.\"\n\n\"Graham Dowling, the legend of England cricket, was on the main news channels talking about you.\"\n\n\"I bowled to Graham in the nets at Lords when I was only sixteen, it was the proudest day of my life at that point. For some reason he remembered me, later he advised me a couple of times and has remained a friend. Actually, at our wedding, my grandfather was going to give me away, but he was struggling to walk to the end of the aisle. From nowhere Graham stepped forward to help, Grandad told him to walk me down the aisle, but he refused and insisted on helping Grandad so that he could give me away. Graham's a lovely man, lots of people think he's a bit gruff, but he's sweet, he sends Chloe a card every birthday.\"\n\n\"Back to 'Stuck on the island' -- you were playing a game one evening and challenged to read a sentence like a donkey would.\"\n\n\"Yes, a stupid game and a stupid thing to ask. I had no idea how a donkey would speak, but I went for it and made everyone laugh.\"\n\n\"So much that the public sent in questions, wanting to know where you'd learned 'donkey.\"\n\n\"I was asked that on the show the next day and replied that I'd picked up a few words when learning to speak Unicorn. I didn't foresee what would happen next.\"\n\n\"Tell us about that?\"\n\n\"I'm going to let you in on a secret. Most of these challenges come as a surprise, but the producers warned me about that one, so, I had time to think about it and came up with a couple of sentences.\"\n\n\"And the viewers went crazy?\"\n\n\"They seemed to like it.\"\n\n\"But you didn't win?\"\n\nHayley had had enough of this, \"No she didn't win, she was beaten by a man who hardly completed any of the tasks and whose only contribution was to make fun of people and tell silly jokes. Still irritates me.\"\n\nI stepped in, \"I was pleased to be runner-up and it's opened doors for me. It's bothered Hayley and Chloe far more than it bothered me.\"\n\n\"One of the doors it opened was a voice-over?\"\n\n\"Yes, Mixmax studios were producing an animated movie about unicorns, they asked me to voice over the lead role.\"\n\n\"Did you enjoy it?\"\n\n\"I presumed that it would simply involve some recordings and couldn't understand why they were paying me so much money. Then I found out that it took months and I had to say the same thing over and over and over again with different inflexions, changed pacing. It was interesting, but I was glad when it was over. The final film was wonderful.\"\n\n\"It's a great movie; my daughter and her friends have seen it dozens of times. Your latest venture is called, 'Searching for a Unicorn'. I'm sure many of the audience will have seen some of that series, but it's not linked to the film, is it?\"\n\n\"No link at all, except that I'm a part of it. Green Nature Films produce lots of environmental programmes and the idea for this was to introduce younger viewers to African wildlife and show how all parts of nature are interlinked. When I agreed to do it, they came up with the name, but I insisted that we explain that unicorns aren't real right at the start.\"\n\n\"And it was during the filming that Chloe became an unintended star.\"\n\n\"Yes. Hayley was in Australia coaching one of the teams there and the filming was taking place over Christmas. I didn't want to leave her at home and the producers agreed to Chloe coming with me. She had a camera with a long lens, binoculars, books and looked like a big game hunter, without the gun. Every day the crew and I would go out on a safari vehicle with a guide and tracker to film. Chloe sat watching and taking pictures. It turns out that she has quite an ability to spot things in the bush, birds, mammals all sorts.\"\n\n\"How did she end up in front of the camera?\"\n\n\"Our guide had spotted a dung beetle in the middle of the road. It was clear that there was nothing dangerous around and so we got down from the vehicle to film some close-ups. The crew were doing something, Chloe was beside me and I started explaining what the dung beetles did and how the males rolled the ball of dung and the females hitched a ride on the ball. Chloe asked a couple of smart questions. Neither of us realised that the crew had started filming us. That evening the Producer showed us the footage and it was obvious that it was engaging. Chloe came across really well and they asked if we could try filming some other clips the same way.\"\n\nGary smiled and introduced a thirty-second clip of the dung beetle and the two of us talking. \"My daughter loves that because it was someone like her. You had encounters with some other beasties.\"\n\n\"Most of the time it was too risky to do anything, but stay in the vehicle. We got out and close to some Golden Orb spiders and a black mamba that had caught a small mouse.\"\n\n\"That didn't scare you?\"\n\n\"The snake had its mouth full and we stayed well away, those spiders aren't dangerous, well, not to people.\"\n\n\"What about the elephant?\"\n\n\"There was a big herd of them crossing the road in front of us and we stopped to let them go. But they changed course and headed towards us at the last minute, walking right by our vehicle.\"\n\n\"Not all of them walked right past though?\" Gary queried.\n\n\"No, one of the big females stopped right next to the vehicle and raised her trunk to inspect us. She was there for about five minutes, watching us and sniffing. Chloe and I talked about the trunk, how it's used, the muscles in it and then the elephant reached out and gently touched Chloe's shoulder with her trunk as if to say that they were friends. It was a magical moment.\"\n\nHayley was laughing, \"She admitted later that she'd been terrified when the elephant first stopped, but she knew that the guides thought it was okay. Her friends call her 'Elephant girl' now. She's very proud of that title.\"\n\n\"Do you think Chloe will play cricket?\"\n\nI answered, \"We'll support her whatever she chooses to do, but can you imagine trying to follow in our footsteps? I doubt if she will.\"\n\n\"One final question, how did you know so much about wildlife?\"\n\n\"I didn't until I agreed to do it. Then I studied and read everything that I could. We also had great guides as well.\"\n\n\"Sarah did what she always did when she was playing, practise for hours, this time she read for hours.\" Hayley squeezed my hand and I saw the pride she had in me.\n\n\"Hayley, Sarah it's been a pleasure talking to you and good luck with the cricket. We'll take a quick break and be back with Holly Angelo in a moment.\"\n\n*****\n\nHayley and I got back to the green room and had a glass of wine to watch the Oscar winner. I hadn't seen any of her films so knew nothing about her, but it didn't take long before I realised that she was just a self-important woman, full of herself. I turned to Hayley, \"She's about as real as her chest, both are over-inflated.\"\n\nHayley snorted, \"You don't think they're real then?\"\n\n\"Oh, they're real, but not natural. Neither are her lips and her forehead doesn't move.\"\n\n\"You don't fancy her then?\"\n\n\"Dear Lord, no.\"\n\nWe kept up the bitchy comments until the next break when we went back on the set to watch Faith Shadow. As she started to sing, I realised it was from the album the girls had been singing a few days ago. She was good and naturally attractive, much more so than Holly. After singing she came to sit for a brief chat.\n\nGary eventually asked her if she was sporty. \"Oh no. I love what I do and my dad is proud of me, but I think he'd rather I'd played cricket as those two did.\"\n\nHayley responded, \"But then I'd like to have musical talent. My daughter and her friends were playing your album last week. I suspect they're more impressed by you than they are by us.\"\n\nHolly decided that she was being ignored, \"Cricket is that slow boring game that lasts for days, isn't it?\"\n\nI wanted to slap her but resisted, \"Some forms of it can last for a few days, but it's a contest of skill and tactics, you need to concentrate and aficionados love it. There are shorter versions which can be more exciting, but different skills are required.\"\n\nShe'd pissed Faith off as well, \"I don't think you should criticise something that's been around for over three hundred years and is the second most-watched sport in the world. I doubt if many people are brave enough to face someone throwing a very hard ball at you, at over a hundred miles an hour.\"\n\nI felt the need to correct her slightly, \"I think it's fair to say that there are very few men or women who can bowl at that speed and the fastest I ever managed was about fifty-five, but then Hayley and I were spinners.\"\n\nGary realised that it was time to draw this to a close and he thanked us before saying goodnight. Holly disappeared fairly quickly without a word. I heard Faith muttering, \"What a bitch?\"\n\nShe realised that I'd heard her, \"Not you, miss overinflated boobs and ego.\" She laughed before going on. \"Can I get your autographs for my dad? He'll be green with envy that I've met you.\"\n\nThere was a cricket ball on the table that Hayley had used earlier to show how we held the ball to make it spin. I picked it up and signed it, \"Let's steal this and you can give it to your dad. But I need a trade, can I get your autograph for my daughter and her pals?\"\n\nShe smiled, \"I can do better than that,\" and she produced some CDs and T-shirts.\n\n\"That's very kind, they'll be chuffed.\"\n\n*****\n\nHayley and I were staying in a hotel near the studio, but by the time we reached our room the three glasses of wine were taking their effect on me. \"I assume that's enough alcohol for you, Miss Lightweight?\" She asked. I'd always been affected by a small amount of alcohol; I didn't get stroppy but tended to be funny and say stupid things, often embarrassing things.\n\n\"More than enough. Another glass and I'll be asleep in a few seconds and I want a good long kiss before that happens.\"\n\n\"Is that all you want?\"\n\n\"No, never. After twenty-three years I still want you just as much as I always have done. You have another quality I forgot to mention to Gary.\"\n\n\"What's that?\" She looked puzzled.\n\n\"Great in bed!\"\n\nSince we'd become lovers, we'd shared a passion and sexual appetite that hadn't dimmed very much over the years. We knew what each other liked, we were generous and considerate. We'd experimented with all sorts of things over the years, but preferred to keep things simple, maybe even vanilla, some might say boring, but being close and intimate made me a very happy girl.\n\nWe loved kissing and spent quite some time doing it before Hayley moved south and spent time kissing and sucking on my nipples. They were a weak spot for me and she was a master at tormenting them. It didn't take long before I was desperate for something more and she knew exactly what to do. A couple of fingers inside me and her thumb on my clit had me at her mercy and coming very quickly. I yelled at her, pleading for more until I was completely satisfied. I threw myself back onto the bed and stretched out. She had a huge grin on her face as she sat astride me and asked, \"Want me to abuse you?\"",
        "I nodded and she lowered herself onto my face and lips. Lips touching lips, my tongue inside of her. This was my favourite way to please Hayley and she loved it. I was good at this, having had plenty of practice over the years, so it didn't take me long to satisfy her. She collapsed beside me and held me tight with her eyes closed. \"Dear Lord, that is so good. It's never been anything less than great over the years. We've been lucky you and I. I've never changed how I feel about you for one moment, never had a doubt, I love you more than anything in the world.\"\n\n\"Anything or anyone?\" I asked, laughing.\n\n\"Okay, I love Chloe as much as I love you, maybe more, please don't make me decide. My one wish was that I was her biological mum.\"\n\n\"You are, it was your egg that I carried. She couldn't be any more yours, you bloody fool!\"\n\n\"I know that, but somehow it always seems like, because you actually carried her and gave birth to her, she's yours.\"\n\n\"And since the day she was born you've given her more love and attention than most kids ever get. She idolises you.\"\n\n\"She's a great kid and you did a great job with her as well.\"\n\n\"I suspect that we need to be grateful to my Mum and Karen and Olivia, she spent plenty of time with them.\"\n\n\"That's true, but it meant that we got time with Connie and Lottie as well.\"\n\nHayley and I had had a serious conversation about kids and after a great deal of thought, we'd decided that I'd take a year out of cricket to have a baby. I carried one of Hayley's eggs. I'd missed cricket and keeping fit. I'd hated being so damn huge, in fact when Chloe was born, she was only just seven pounds and I was convinced that she'd be at least fourteen. It had only taken me a few seconds to get over the pain and discomfort of labour before I fell in love with her. I think Hayley was relieved that the wait was over because, during pregnancy, I'd been rather demanding regarding sex and it was one of the only times she ever complained about too much.\n\nAlthough we'd never discussed our plans with anyone except my Mum, Karen announced that she was expecting at just about the time of my first attempt. It meant that Constance was born five months before Chloe. Karen and Olivia had also planned for Olivia to try for a child as soon after Constance as possible and they managed it, it meant that the three girls were separated by only eleven months. Karen had decided to stay at home until her two went to school and they helped us out with Chloe when we were away playing cricket. It worked out well, we paid Karen a generous salary, Chloe got good parenting in our absence and the three girls grew up very close.\n\nBeing professional cricketers meant that there were times between games, sometimes several weeks and in those weeks, we often took care of all the girls. During those times we played games with them and travelled, mainly all over the UK, but with the occasional foray into France and Spain. They were a bit young to appreciate it at first, but over the years it helped them experience things lots of others hadn't and it gave Olivia and Karen some time alone. I'd been close to both of them most of my life and that didn't change as we got older, actually Hayley was adopted by the two of them and the four of us were pretty tight, maybe not quite as close as our girls were.\n\n*****\n\nWe watched the chat show when it was broadcast the following evening with Karen, Olivia and the three girls. They'd been excited to get the gifts from Faith Shadow and I got hugs from Constance and Charlotte. When I looked at Chloe she was pouting, \"What's wrong with you Chloe?\"\n\nShe was still pouting as she answered, \"I should have been on the show, you spoke about my part in your programme and I'd have got to meet Faith in person. I feel as if I've been exploited, yet again.\" She lasted a full thirty seconds before she burst out laughing. \"I'd have been terrified, so maybe it's good that I wasn't there.\" Constance threw a cushion at her and suddenly three almost sixteen years olds started behaving like ten-year-olds. It was great to watch and we adults just laughed.\n\nThere were a few questions about Holly Angeles and Hayley told them about her and the fact that she hadn't spoken to us, except when we were in front of the cameras.\n\nKaren looked over at me and asked, \"Is there likely to be another series, a wildlife series?\"\n\n\"It's been mentioned as a possibility, but nothing more than that. If it did happen and Chloe was a part of it, I'd thought about taking your two along, not to be in front of the cameras obviously, but it would be a chance for them to see something special.\"\n\nConnie muttered quietly, \"I'd really like that.\" Charlotte echoed her thoughts.\n\n\"It's too early to make any plans. There are lots of issues, including when and where we'd go, it might not be Kruger Park.\" I directed a question to Olivia and Karen. \"Would you two fancy a safari?\"\n\n\"Not while you were filming, but it's something I'd like to do.\"\n\n\"One of the places that we stayed at was lovely and the owners invited me to go back as a guest. It was great publicity for them and I'm sure that they'd milk my being there again. It would be nice for all of us to go, just for a holiday.\"\n\nWe chatted about it for another twenty minutes and agreed that it was something that we'd seriously consider.\n\nTragedy\n\nI'd collected the girls after school and brought them back home with me because the trial Olivia was prosecuting had run on longer than she'd expected. I had two lasagnas ready and put one in the oven for the girls, who were supposed to be doing homework, but were more likely gossiping. I'd eat later when Karen and Hayley got back. Karen had wanted to check out some costumes for her school play and Hayley was collecting some bats from the manufacturer for one of her players. As both destinations were close, they'd decided to go together.\n\nThe girls were eating when Olivia arrived and I handed her a glass of wine. \"Jeez, I need this. We'd thought the jury would take longer to decide and come back tomorrow, but they told the judge that they were close and wanted to get it done today. He agreed and then they took another hour.\"\n\n\"Did you win though?\"\n\n\"It was an attempted murder and they found the man guilty. It was touch and go, but what the jury didn't know is that he's done time for the same thing ten years ago. Have you heard from Karen?\"\n\n\"No, nothing, they should be here soon. When they tell us they're on their way I'll shove our dinner in.\"\n\nShe leaned over and stole a fork full of food from Constance who told her to 'go away,' but less politely. The two of us chatted, then Olivia checked the time and tried calling Karen. \"There's no answer, that's not like her. I'll try Hayley.\"\n\nIt wasn't like Karen to ignore her phone when she wasn't teaching and when Olivia said that Hayley wasn't answering I started to worry, she was never far from her phone. \"I hope nothing's wrong.\" As the next ten minutes passed and there was still no answer from either of them my concern mounted and I could see worry etched onto Olivia's face.\n\nThe doorbell sounding made me leap and I raced to see who was there. Two uniformed police officers meant bad news. \"I'm looking for Sarah Hardy the owner of a ...\" The officer described my car, which Hayley was using and I knew that it had to be an accident.\n\n\"That's my car. It's being used by my wife, Hayley Sharp and our friend Karen Churchill. Her wife is here. You'd better come in; I'm guessing this is bad news. Are they okay?\"\n\nThe officer ignored my question. As we reached the kitchen, the girls realised something was wrong and Olivia screeched, \"Oh God, no.\"\n\nThe officer recognised Olivia, presumably from some past court case. \"Hello, Mrs Churchill. Ladies, that vehicle has been involved in a serious road accident and there were two occupants who I believe to be Hayley Sharp and Karen Churchill.\"\n\n\"Are they okay?\" I whispered, but I knew the answer.\n\n\"I'm sorry to have to tell you that both occupants were pronounced dead at the scene. I'm very sorry.\"\n\nI broke first and fell to the floor, Olivia followed me down and held me. The girls were screaming and came over to us. Chloe and Charlotte were hysterical, but Constance, always the most grounded of the three stood up again, \"I'm struggling to believe this, are you sure it's them.\"\n\nThe police officers answered her questions politely and patiently, explaining why, they were sure. A large lorry had hit the back of their vehicle, which had been stationery, and they had been pushed partly underneath another lorry in front of them.\n\nNeither Olivia nor I could bear the idea of phoning their parents and the police officers offered to make the notifications for us. That still left two difficult calls for us to make, to my Mum and Olivia's father. I don't remember much of the next hour, other than the five of us huddled together crying.\n\nLosing Hayley was as bad as I thought it could ever be, the woman who I adored and admired had been stolen. But my lifelong friend had also been taken at the same time. It occurred to me during that hour that Olivia and I were going to need each other and that I'd need to try and pull myself together for all of us.\n\nMy Mum, Meredith, arrived quickly, although how she'd managed to see through the tears that were flowing from her was a miracle. She grabbed me and wouldn't let me go for ages, then she went over to Olivia and held her. That was how things were when Roger and Samantha arrived. Roger had married Samantha the year after Karen and Olivia had married, she was a surgeon and not unfamiliar with tragedy so she provided a steadying presence. Roger grabbed his granddaughters and held onto them as he spoke to comfort Olivia.\n\nKaren's parents, John and Marion, arrived about two minutes before Josh and Pauline, Hayley's parents. For some reason, I have no memory of the next hour either, except Samantha continually making tea. Yet again I'd zoned out.\n\nI was coming out of the toilet when Olivia met me, \"Sarah, we need to get them all to go home. It's not helping us or the girls. Can we stay here tonight?\"\n\n\"I agree, I'll speak to them. You and the girls can stay here for as long as you'd like. I'd like that.\"\n\nThey were reluctant to leave and go home when I suggested it, but Samantha stepped in, \"I know that you're all grieving and this is horrible, no parent should have to suffer this. But Sarah, Olivia and the girls are the ones who are going to find this hardest of all and we need to give them some space. I'm certain that they'll need your support and that they will support you as well, but they need time to themselves.\"\n\nThere were many more tears as the parents took their leave and I had no doubt that they were also going to have a troubled night, but eventually, the five of us were alone. Chloe offered to make yet more tea and when she seemed to be gone too long, I found her bent over the countertop with arms flat and head pressed against them sobbing louder than I'd ever heard her before. She saw me and grabbed at me, snuffling and sobbing as she asked, \"Mum, what are we going to do without Hayley? I loved her so much, we both did. What are we going to do?\"\n\nI took a deep breath as I answered, \"I loved her more than anything in the world, except you and I'm still struggling to believe that this is true. But, and this is difficult, she'd want us to move forward, we have lives to live. They will be different lives without her for sure, but somehow, we'll cope. Connie, Lottie and Olivia are in the same place, we can all support each other.\" My tears were also flowing freely.\n\n\"I know, I've lost Aunt Karen as well, it's not fair, is it?\"\n\nOlivia must have overheard some of that and she held onto Chloe, \"Somehow we'll survive love.\"\n\nIt wasn't long before the girls headed for bed and I heard the three of them crying together. At least they had each other and weren't alone. I found something for Olivia to wear and when she came out of the bathroom, she climbed into bed with me, \"Been a while since the two of us shared a bed.\"\n\n\"And I wish we never had to do it, but in the same way the girls are helping each other, we're going to do the same.\" The two of us cried for a while, but somehow it was comforting to know that we were there for each other.\n\nThe next few days\n\nI'd never been in a Mortuary before. It was at the back of the hospital, in a concrete cube, gloomy and forbidding. Even the sign over the door looked miserable. I took one of Pauline's hands and Josh took the other. Olivia, Marion and John had arrived a minute or so before us. A man in a white coat invited them forward into a room. As they were almost inside, I followed and when they looked around, I asked, \"Do you mind?\"\n\nThe room looked vaguely like a chapel, blonde wood, a fake stained-glass window and there on a trolley was a body covered with a sheet. The man folded the sheet back to reveal what had once been my friend, Karen. There were some scrape marks on one side of her face and she was devoid of make-up, her hair had been washed or at least rinsed and what had once been a face full of life and fun was empty. I stared as Marion and John clung to each other in tears. Olivia stepped forward and stroked Karen's hair. I heard her say quietly, \"Goodbye my love, I'll miss you, but thank you for the times we've had.\" She started to cry silent tears.\n\nI stepped forward and took Olivia's hand as I looked down. I mumbled, \"Goodbye old friend, thanks for the good times. I'll miss you too.\"\n\nWe stepped back outside where Josh and Pauline embraced John and Marion. It seemed like only thirty seconds had passed before the man caught our attention. Hayley also had scrapes on her face and right shoulder. Her hair had also been washed and her face was pale like Karen's. It was hard to believe that she had been the person I'd shared my life with for so long. Pauline stroked Hayley's head as she cried, Josh tried to be brave but failed. I stepped forward and leaned down to kiss those lips one last time, \"I loved you with all my heart and always will. Thanks for everything.\"\n\nOlivia, who was still holding my hand, placed her other one on Hayley's cheek and whispered, \"Good bye Hayley, it was nice to have shared good times with you.\"\n\nThere were lots more tears before we made it back to the cars and drove in silence back to our home. Actually, it was now my home, Hayley would never cross its threshold again. Olivia's Dad, my Mum and the girls were waiting for us and I think that the girls somehow hoped that we'd be able to tell them it was all a big mistake. Sadly, that was not to be and there were yet more tears. Olivia and I explained what had happened and the girls agreed that maybe it would be better to remember Hayley and Karen as they had been and not as they were now.\n\nMum had made tea and sandwiches, but I don't think anyone was very hungry. Josh raised the subject of a funeral and we chatted about it. Nothing was decided there and then, but we agreed that it might be best to have one following the other.\n\nThe phone kept ringing and I ignored most of the calls, including one from Alison Walker, the BBC cricket correspondent. She'd covered all forms of cricket for many years and I don't remember playing many games that she hadn't attended. Hayley had worked with her on commentary more recently and we both knew her well. I didn't want to speak to anyone, but a text message arrived just after her call. She was pleading to speak to me so I rang her back. She gave her condolences and apologised for intruding, \"Sarah, the BBC is going to report on this tragedy and they've asked me to write a piece for the website and do reports on radio and TV. I really want to get your approval, I don't need it, but I think I owe you both that. Can I email you what I have?\"\n\nTen minutes later I called her back. \"Allison, it's great, kind and respectful. Thank you, just one thing. You mentioned my friend Karen, who died with her. Karen was a teacher, a great teacher, and she taught at your old school too. Could you please just include a few words about her?\"\n\nA couple of hours later, Olivia took a phone call from Karen's mum, she came to tell me about it. \"There was a report on the radio news about Hayley and the reporter said some nice things about Karen. Was that you?\"\n\n\"Yeah, Hayley might be the news story because of who she was, but I reminded Alison that she wasn't alone, she was with a friend when she died, someone who touched the lives of her pupils. I asked her to remember that.\"\n\n\"Marion said it made her cry again.\"\n\nHalf an hour later I heard the doorbell ring and found two school pupils, a boy and a girl in uniform, standing there holding some flowers. An older woman was standing a distance further back and I was sure I recognised her as one of Karen's colleagues. \"Is Mrs Churchill here, please?\" The girl asked.\n\nI called Olivia and stood back a little. \"Mrs Churchill, we're the head pupils from your wife's school. We're sorry for your loss. The pupils and staff have asked us to come in person to express our sadness at your loss. She was a wonderful teacher and she'll be missed by us.\"\n\nOliva muttered her thanks before stepping forward to hug the two of them and then she went over to the deputy head and spoke with her for a few minutes. It was a nice gesture and I know that Karen would have been proud. She loved teaching and felt that it was a privilege to be able to influence young people. What she had done all of her working life was what I considered to be real work and not playing games for a living as I had.\n\n*****\n\nI got another call that I could no longer ignore, from the Director of English Cricket. \"Sarah, I want to say how sorry we all are for your loss. Hayley was a great servant to cricket and in particular to English women's cricket.\"\n\nWe spoke for a moment or two about Hayley and how I was coping. \"Sarah, we've received hundreds of messages of sympathy from fans and players, men and women from all over the world. That includes all of the test nations and umpires, it's been incredible and I'd like to pass them on to you in an email. We'd also like to put out a statement on your behalf thanking everyone. Would that be, okay?\"\n\nWhen we finished the call a few minutes later I asked Chloe to join me and we went to the study. We read through the messages and both wept as we did so. We then made a few changes to the statement to be issued on our behalf. \"Mum was really popular and famous, wasn't she?\"\n\n\"Yes, love she was. She was an amazing cricketer and despite being a really tough competitor she would be the first to congratulate the opposition for good play and after a game she would always speak to the opposing team in private and sometimes have a beer with them. She was an example to all sportsmen and women. Even though I loved her, she will always be my sporting role model and hero.\"\n\n*****\n\nThe next few days passed in a bit of a blur. There were conversations about funerals, insurance, death registration, police interviews and when nothing was happening, there were tears and sadness. Our families were there, supportive and well-meaning, but it was better, easier when it was just the five of us. There was still grieving, but it seemed less difficult to bear. There were long conversations about Hayley and Karen, tales from school days, holidays taken, funny events and loving moments. I regaled them with stories about Hayley when we were playing cricket overseas and some of her practical jokes. We spoke about the plays Karen had produced and recalled stories she'd told about her pupils. We laughed a lot during those days, but the grief always returned.\n\nOlivia and I cried ourselves to sleep every night, one holding the other. I was grateful that I wasn't experiencing those moments alone.",
        "Funerals\n\nWe had four limos for our families and travelled in convoy behind the two hearses. It was quiet in our car and I was staring out of the window, but not seeing anything. I wasn't thinking anything either until Chloe squeezed my hand and said, \"Look Mum, look.\"\n\nThere were two lines of people, one on either side of the road that lead through the cemetery to the crematorium. I struggled to work out what I was seeing at first. On the left were school pupils and some staff that I recognised from where Karen had taught. On the opposite side of the road were adults, then I saw a few familiar faces and some more blazers, but these were cricket blazers. Graham Dowling was standing next to the former captains of the Australia and New Zealand women's teams, women who'd been rivals of ours for years. I realised that the line was made up of former teammates, opponents, a couple of umpires, members from the county club and several former members of the men's team. \"Who are they, Mum?\" Chloe asked.\n\n\"They're friends of your Mum, players, opponents, cricketers.\"\n\n\"That's uncle Graham too.\" It shook me. The messages that people had sent were lovely, but I never expected people to travel from the other side of the world to be here.\n\nThe crematorium was packed, half of Karen's school must have been there sitting or in many cases, standing shoulder to shoulder with cricket legends.\n\nKaren's coffin was brought in first, plain and decorated with a simple spray of lilies. As the Celebrant spoke Olivia clutched her dad and Marion. The girls sobbed gently and I was aware that many of Karen's pupils also shed a few tears. I didn't listen to the words but instead brought back to mind the times we spent as teenagers, the laughs and our crazy antics. I also recalled the last couple of days of Karen's life; she was a beautiful woman, full of enthusiasm, funny and I knew with certainty how much she adored Constance and Charlotte. As I was leaving her home on the last evening that I'd been with her she was hanging onto Olivia's arm and I saw the love she had for her partner. I hope that memory would stay with me forever.\n\nI came back to earth as two of Karen's pupils stepped forward to read a poem, one that they'd discussed in class, the last class that Karen had taught, just a few hours before she died. The Head Girl then spoke about Karen, I have no idea how she made it through with tears running down her face. When she finished Olivia stood up and hugged her, Marion joined in. It was a special moment and a nice tribute to my friend.\n\nThere was a brief pause before Hayley's coffin was brought in. It was a chance for those who were there for Karen's service to leave, but I don't think anyone did.\n\nThere was an identical spray of lilies on Hayley's coffin to the one that had been on Karen's. Someone had suggested that her England cap should be there, but I vetoed that, it was going to her dad.\n\nThe Celebrant said a few things about Hayley, but I'd zoned out again until she finished speaking and Alison Walker strode to the lectern.\n\n\"Good morning, I'm Alison Walker and have had the privilege to follow Hayley's career from the start and to report on it for the BBC and sports channels in many countries. This is a sad day, but it may also be one of the proudest days of my career. I'm flattered that Sarah asked me to pay tribute to an inspirational cricketer and sportswoman, but also because I consider Hayley and Sarah to be my friends. I could list Hayley's cricketing achievements, but we would be here for a while, so I will pick out just a couple.\n\n\"Hayley won more games than she lost, as both a player and a captain. She represented England in all formats of the game over 400 times, she won trophies at all levels, she topped batting and bowling averages. For many years she was ranked as the best T20 and One day bowler in the world and for a part of that time, not just in women's cricket, in all cricket. She was also a leader who inspired her teammates and cricketers that she'd never met. Just as important, maybe more so, she embodied sportsmanship. She was always one of the first to shake an opponent's hand. I recall that on one occasion, at the end of a days play, she asked her teammates to line up at the edge of the field and form a guard of honour for a batswoman who had just put her team to the sword by scoring a record number of runs and later, she bought her a drink to celebrate. That isn't a rumour, I was there and saw it for myself.\n\n\"I look around today and I see representatives from across the cricketing world, both people who played with and against Hayley and some of the current generation that she inspired. If those players present today could have played on the same side it would have been a very special team indeed.\n\n\"Just a few weeks ago, after Hayley had been appointed as the new England Coach, we were having a coffee and I asked her if that was the proudest moment of her life. Her response didn't surprise me. She said that she was lucky to have found love with Sarah and that she would have traded all of her achievements for that love, but then she added that the one thing that she was most proud of was Chloe, her daughter.\n\n\"The sporting world is sad today, but we have our memories of a real sporting star. Unfortunately, that star has been taken from Sarah, Chloe and their family.\"\n\nI was in full flow; Chloe was hugging me and then I felt Josh grab my arm so hard it made me jump. He looked like a broken man. I put my free arm around him and leaned over to kiss the top of his head and whispered, \"That was your daughter, she knew how proud of her you were. I know it hurts.\"\n\n\"It hurts so much I can't bear it, but all these people here and those kind words help, just a little.\"\n\nIt took a while to shake the hands of all the people who wanted to do so before we left the crematorium to go to a nearby hotel where we'd arranged light refreshments. Chloe and I travelled with Olivia and her two girls. Our families were struggling, but it was becoming oppressive and it seemed better if the five of us stayed together.\n\nI managed to speak to lots of the cricketers who'd attended and it reminded me that I'd been privileged to play a game in which sportsmanship and friendship were so important. A woman approached me with a sad look on her face. She was attractive, in her mid-thirties and looked somehow familiar. \"Ms Hardy, I wanted to say how sorry I was about Hayley. I guess that you don't remember me, I was at your wedding.\"\n\nI was puzzled, I wasn't sure who she was, but there was something about her and she answered my unasked question. \"I'm Bill Hunter's granddaughter, the Groundsman? I gave you a horseshoe at your wedding. I've followed the two of you since then and I'm really sorry about Hayley.\"\n\nAs soon as she said it, I could recall the occasion as if it was yesterday and not over twenty years ago. \"I do remember you and we were touched by your gift; I still have it. Didn't your parents emigrate? I'm sure your grandfather told me that.\"\n\n\"Yes, we did and I've just come back, but that's a story for another day. Today is not about me. Once again I'm sorry.\" She turned away in tears and I watched her go until I realised that Graham Dowling was close by. I looked at him, took his hand and smiled. \"Thanks, Graham, I appreciate your being here and I know that Hayley would have been pleased.\"\n\n\"I remember you bowling to me in the nets at Lords so long ago, something about you struck a chord and always has. Soon after you started playing for England I realised that I fancied you something rotten, but it was stupid, I was twice your age then and of course, you fancy girls. Despite all of that, I think I'm still a little bit in love with you.\"\n\nI leaned in and kissed his cheek. \"Thank you, you're a nice man.\" There was nothing ever threatening, improper or creepy about Graham, actually, if I liked guys, he would have been just what I'd want.\n\n\"If there is ever anything I can do, please call me. Give Chloe my love.\"\n\nI saw Graham speak to Hayley's Dad and as he was about to leave, he gave Olivia a huge hug and whispered something that made her laugh, then she looked around at me, smiling as she did so.\n\n*****\n\nLater, as we were getting ready for bed, I asked her what Graham had said, \"he told me that he'd been in love with you for years, despite everything that made it silly. He asked me to look after you and to call him if ever we needed anything, either of us. I have no idea why he would offer to help me.\"\n\n\"He's a nice man.\"\n\n\"I realised today how many people were affected by that bloody accident. I'd thought, selfishly perhaps, that it was just us and our parents, but today made me realise that there were many more whose lives Karen and Hayley had touched. The school kids were amazing and Alison was incredible.\"\n\n\"I know what you mean. Some of those people had come from Australia, New Zealand, India and Barbados. Some were ...\" I couldn't finish that thought, tears and sadness overwhelmed me. I slumped onto the bed and Olivia came over to hold me.\n\nAfter a lot of tears, she wiped my face and we looked into each other's eyes from only a few inches apart, \"I know that you'd rather have Hayley and I'd rather have Karen, but sadly that's not the way it ever will be again. You and I, at least, have each other, the girls and our parents. There are going to be times when I need you to comfort me and when you need it, I'll try hard to be there for you.\"\n\n\"Thank you,\" I replied and we held each other as we dealt with our own thoughts and sadness.\n\nLife moves on\n\nThe girls were back at school and Olivia had to deal with a mountain of cases that had built up in her absence. During dinner two days after the funeral, Charlotte asked when they were going back home. Chloe tried hard to strangle a \"No,\" and in that instant, I knew that I didn't want them to leave either.\n\nI asked Charlotte why she'd asked that question. \"It's fine here, but there are things I need; some of my clothes and I'd like my keyboard.\"\n\nChloe looked at me, appealing, \"Please can they stay, can we all stay together.\"\n\n\"As far as I'm concerned you can stay as long as you like. I've said that from the start, but maybe you need your own space and that house is sitting empty. There's no rush.\"\n\nOlivia looked at her girls before responding, \"Maybe we can discuss this and I need to have a conversation with Sarah.\"\n\nAfter we'd cleared up the girls disappeared and it gave Olivia and me the chance to talk about living arrangements. \"I'm not ready to go back to that house just yet, but I need to take the girls views into account. Would you mind?\"\n\n\"I'd like you to stay, we might all get on each other's nerves, but for now it might be best.\"\n\nI spoke to Chloe and it was clear that she wanted us to remain together. Our house was bigger and it would make the most sense to use it.\n\nOlivia had also had a conversation with her girls and told me that they'd agreed to remain with us as long as they could bring the things they needed over. \"They could each have a room of their own, Chloe has an en-suite and the other two rooms share a bathroom, but I suspect that, just as we did when we were their age, they might all end up in the same bed quite often. It does mean that you and I would have to share, but you could make use of the study when you need to work here.\"\n\n\"I'd like that, do you mind sharing the same room?\"\n\n\"No, I like having someone there.\" I laughed, \"Not anyone, I like having you there.\"\n\n*****\n\nI took over the running of the house, sorted out laundry, ferried the girls about and did most of the cooking. The girls were great and dealt with their fair share of the housekeeping. Olivia kept long hours, but we made it work and I enjoyed staying busy.\n\nAfter a couple of weeks, I summoned up the courage to go through the wardrobes. Hayley and I shared a lot of clothes, as we were almost the same size, but I culled ruthlessly so that it left room for Olivia. She couldn't bring herself to deal with Karen's things, but as they were in another house it didn't matter too much.\n\nI was putting some clean clothes into Constance's room and when I looked around, I thought that it looked dated, at least for a teenager. At dinner that night I raised the subject. \"Do you mean that I could redecorate the room I use?\" asked Constance.\n\n\"It's your room now and yes, you can redecorate it any way you want, you can change the carpet and have new furniture. You to Charlotte.\"\n\nThe rest of the evening was a bit crazy with conversations about what they wanted to do. At the weekend we visited Ikea, a home centre, a DIY store and various other places as the two of them made decisions. Halfway through the afternoon, Chloe decided that she wanted to join in the fun and update her room as well.\n\nThere was a long weekend coming up; the kids were off school for four days and Olivia had a day off on the Monday, so we planned on doing the work then. Someone told Roger about the plans, so he offered to come over and my Mum promised to provide the catering. Hayley's Dad learned of the plans and he also offered to help, although it bothered me, he was still suffering more than anyone else.\n\nIn the end, we got all of the work done, despite lots of paint ending up on people and not the walls. For the first time in months, there was a lot of laughter and it did most of us the world of good. Hayley's Dad had a hard time and at one point Chloe found him sobbing in the garden. I watched the two of them from a distance and I have no idea what she said, but it seemed to help him a great deal. I asked Chloe about it later and she simply said, \"He's bereft, he adored Hayley and is struggling. He loves you a great deal, he always has and thinks that the two of you were amazing together. He loves me too, but somehow, he just can't seem to move on. He'll be okay and I promise you this, I will never, ever leave him out of my life. I'm lucky to have him as my grandpa.\"\n\nWhen Samantha turned up after she got free from work, she admired what they'd done and promised to go and buy them all new bed linen the following weekend.\n\nIt had settled Charlotte and Constance into this house and gave them a sense of ownership and permanence, but it had also been great fun. The whole family had taken part and I knew that it had been a great idea.\n\n*****\n\nLate one afternoon I was having a mug of tea and staring out into the garden thinking about Hayley's folly. She'd wanted a garden room, as she called it, but didn't have a real reason for one, she just wanted it and I'd agreed. I kept calling it a 'shed' to annoy her. It was actually a large, rather grand wooden cabin with one wall that was almost all glass doors which folded back. It had a small area with a sink, cooker top and microwave, a shower room and the main large area that remained empty. Hayley had been planning furniture the week before the accident and therefore it was a blank canvas. It was then that an idea struck me. When Constance had been practising the piano, she'd been asked to stop a couple of times because the other two couldn't concentrate. It seemed unfair on everyone and she also had a drum kit that was still in the garage at the home they shared with Karen.\n\nAfter dinner that evening Olivia was pouring a glass of wine when I broached the subject. \"Liv, what do you think about turning Hayley's shed over to the girls. Connie could put her piano and drums out there. We could get them a sofa or something. Chloe's always wanted an electric guitar and I've always been against it because of the noise. It would give them somewhere to relax or practice that wouldn't disturb others and they'd still have their rooms to study or read in if they wanted peace. What do you think?\"\n\nShe came and sat down with a smile on her face. \"I think it's a great idea, but does it matter what I think it's your house.\"\n\nI hadn't expected that answer, nor had I thought about the house as being mine. \"Maybe we need to think about things differently. I regard this as your home as well and I'd like you to do the same. You said we need to stick together.\"\n\n\"It may take me some time to adjust to that, but thank you. As for the idea of creating a music room, it's a great idea. Let's ask the girls.\"\n\nI outlined my idea to them and had three positive answers before I'd even closed my mouth. The next half hour was taken up by inspecting the 'shed' and planning what they wanted. The electric piano was moved there and then. As Constance tinkled away, Chloe took my hand, \"Do you mean that we can have this place as ours?\"\n\n\"Sure, we can go and look for something to sit on this weekend.\"\n\nBy Friday evening the girls had brought over a huge solid coffee table and a large rug from Olivia's home. Mugs, a kettle and a toaster had been installed and the small fridge stocked with soft drinks and water.\n\nOlivia had some work to catch up with, so Saturday saw the four of us in a furniture warehouse checking out the displays. One dominant sofa filled a display window, it was sectional, pale grey and curved. There was a recliner section at one end and an extended section at the other that someone could lie on. It would accommodate five people easily, but the price was way more than I'd planned.\n\nThe girls wandered off to look at the other displays and I stood with a blank mind until a salesman made me jump. \"I'm sorry to intrude, can I help you with something? I also need to ask, are you, Sarah Hardy?\"\n\n\"Yes, I am. My girls are looking for something for their new room, but this is over our budget.\"\n\n\"Firstly, I'm sorry about Hayley, I saw the two of you play many times. Secondly, we're getting a new piece in for this display spot and I could do you a deal on this one, it's been on display so there's a discount to be had.\"\n\nA few minutes later I waved the girls back over. \"Seen anything you like better than this?\"\n\nThree heads shook and Chloe spoke on their behalf. \"This would be perfect Mum, but it's way too much.\"\n\n\"It would be if we ordered a new one, but we could get this one and because it's been on display it's affordable.\" This time the three heads nodded and eyes were wide open with joy. I paid the man and arranged for delivery the next day.\n\nNext, we headed to the music shop. Olivia had agreed that Charlotte could also have an electric guitar, so she and Chloe bombarded an assistant with questions and when she realised that they were both serious buyers, had to call for help. I knew nothing about guitars and not much about any other instrument either so I stayed away and let them get on with it. In the meantime, Constance studied the grand piano and I asked if she'd ever played one, \"Only once, they're wonderful, but I'm not at that standard. Besides, it wouldn't fit with that huge sofa.\" She laughed as she spoke and wandered over to look at the drums.\n\nShe sat behind an impressive-looking kit that had several cymbals. \"That looks impressive, but you have a drum kit, don't you?\"\n\n\"Yes, but nothing like this. Actually, I prefer the drums to piano, but there's never been many opportunities, too much noise.\" As an assistant was passing with yet another guitar for Chloe to try, she told Constance that she could play. I could see her smile as she got comfortable. The first few blows, (should that be beats?) were tentative and then she got going. After a minute or so everyone in the shop was watching her, eventually, she realised and the grin stretched across her face as she gave it even more gusto. I confess that I know nothing about drumming, but any fool could see that she had a talent.\n\nTwenty minutes later Chloe and Charlotte had selected their guitars and an amplifier/speaker. The idea of that filled me with dread, but it was essential. \"Okay, before I mortgage what's left of my soul, do you need anything else?\" They shook their heads, \"Connie, would you like that drum kit?\"",
        "Three gasps, \"Aunt Sarah I'm not sure Mum would agree to spend that.\"\n\n\"This has nothing to do with your Mum and please, just Sarah. The five of us are in this together and I'm paying, I can afford it.\" I had money but had been reluctant to part with it earlier and now realised that it was no use sitting in the bank. The journey home in the car was quiet and eventually, I had to ask why.\n\nCharlotte leaned forward from the seat behind me. \"You've been very generous today and I'm feeling a bit guilty about it. Taking us into your home was pretty special too.\"\n\n\"We've all lost someone that we love, we're actually lucky that we have each other. It could have been much worse, although sometimes that seems hard to believe and, it's our home now.\"\n\nOlivia was busy in the kitchen, preparing the ingredients for a stir-fry dinner. \"Hello, I've missed you lot. I see two guitars, come and tell me all about it.\"\n\nConstance had either decided to report or more likely, I suspected, been given the task. \"First Mum, please don't blame us, it's all Aunt Sarah's fault.\"\n\nOlivia looked puzzled and I burst out laughing. \"That's what you get for trying to be nice is it?\" I asked.\n\nFirst, the sofa was described in detail and Chloe produced her phone. I hadn't been aware that they'd got one of the staff take their picture whilst sitting on the thing. That must have happened when I was paying for it.\n\n\"Sarah, that's enormous and looks rather expensive.\"\n\n\"Can't argue about the size, but when I saw them stretched out, it looked perfect. I got a deal because it's the display model, also the salesman recognised me and is a cricket fan. Now, before they blame me for anything else, Chloe and Charlotte got guitars and an amplifier thing as we discussed.\"\n\n\"Mum she spent more than you'd agreed. We tried hard, but ...\"\n\nI interrupted, \"Guilty as charged. I spent far more than we'd agreed, but I have the money, I enjoyed spending it and treating my family.\"\n\nConstance took my hand, \"Your family?\"\n\n\"Yes, you live with me and I love you, I always have. I will never, ever replace Karen, but no matter what, we'll always be family. What you call me doesn't matter, my name is Sarah and that's what I'd prefer, forget the aunt bit.\" I looked over at Olivia and mouthed \"Is that okay?\" She nodded so I thought I'd better get the rest out there, but Charlotte beat me to it.\n\n\"Sarah bought Connie a huge drum kit. Five drums, four cymbals and one of those double cymbal things.\"\n\n\"But you have drums ...\"\n\n\"We traded them in. Mum, you should see them.\"\n\n\"You will see them; they should be here tomorrow and then our peace will be well and truly shattered as the amplifier and speaker will be here as well.\"\n\n\"Why did you do that? I'm not mad, but ...\"\n\n\"It's me that's mad, Liv. I loved it, I felt really good doing it.\" I started to cry again and Olivia came to hug me.\n\n\"I'm sorry. Hayley's gone and I've lost one of my best friends, but somehow I've now got three kids and the idea of that makes me happier than I've been for months.\" I snuffled against her shoulder.\n\n\"It's okay love. You're right, somehow it could be much worse.\"\n\n*****\n\nThe drum kit and speakers arrived first the next day and I insisted that they clear away the packaging before doing anything else. Olivia and I stood watching and listening for a couple of minutes before she turned to me and said quietly, \"That racket is all your fault, let's hope they get better quickly.\"\n\nThirty minutes later the sofa arrived and we helped the guys get it installed. Olivia stood staring at it, \"It's bloody huge.\"\n\n\"Yep, but look at them. They look happy.\"\n\n\"And so they should. I need to give you some money.\"\n\n\"No, you don't. It was my doing and it's great.\"\n\n\"Actually, money is something that we need to sort out. If this is going to be a long-term thing.\"\n\n\"I don't want it to be 'long-term'\" She looked at me with an unspoken question. \"Long-term implies that it will have an ending, that it's not permanent. I don't want you or the girls to leave. I realise that they will at some point, but I want this to be their home, where they know they will always have a place. Where you and I will be if they need us.\"\n\nOlivia squeezed my hand but remained silent. I took it as agreement and it wasn't mentioned again for a long time.\n\nWe resolved the issue fairly easily and Olivia decided that she wanted to rent out the house she'd shared with Karen and the girls. \"I'll talk to them about it this week.\"\n\n*****\n\nI had dinner almost ready when the peace I'd enjoyed all day was shattered as the four of them bounced into the house, well three of them bounced, Olivia trudged in as if she'd had a long day. I handed her wine and she muttered, \"You, are a life saver.\" She took a long swallow and went to change.\n\nThree hungry girls reappeared and even though they'd spent most of the day together, they never paused to allow a moment's silence. I normally valued peace and quiet but realised that I'd have paid any amount of money for their presence in my life. I recalled that Amy had once said the same thing when Mum and I had moved in with her a long time ago when I was about their age.\n\nThe process of eating was fairly peaceful, but that was only because they shovelled food down at an alarming rate before announcing that they were off to 'Hayley's Folly'. \"Is that what you call it?\" I asked.\n\n\"You and I both thought Mum was off her head wanting that shed, but it's a great space for us and it seems like an appropriate name. I'm sure eventually it'll get shortened to Folly. I have a picture of her and Karen that I want to put up in there, somewhere discreet.\" With that the dishes were cleared and so were they.\n\nOlivia and I sat with a second glass of wine. \"I spoke to the deputy head when I picked them up earlier. She asked how I was doing and of course, I asked about them. The three of them are doing great and have told their English teacher that they owed it to Karen. And it was Chloe who had spoken up for them.\"\n\n\"I'm pleased, it won't be long before they go to university. That's a conversation we'll need to have soon. Did you ask your two about the house?\"\n\n\"They don't want me to rent it out. They don't like the idea of someone living in their house, actually in Karen's house. Connie says that we should sell it and then it's done. That's a big step.\"\n\n\"I'm not sure that I have an opinion, let me just say, once again, that I don't want you to leave. If you and I shared the same house for the rest of our lives it would be okay with me.\"\n\n\"I agree with you, but one day we might find a special someone.\"\n\n\"We might, but I think the loss of Hayley and Karen will always haunt the two of us.\"\n\nLater that evening I thought about what I'd said. In reality, I didn't want anyone else, Olivia and I had shared enough to know that we were comfortable with each other and I was happy about it. Would I miss sex? Possibly, but it wasn't something I'd thought about since Hayley went.\n\nFamilies\n\nKeeping in touch with Karen and Hayley's families was a priority for Olivia and me, but they still struggled. Often when they visited it quickly became stilted. They loved seeing the girls of course, so we tried hard to make the best of it and ensure that they came over on a Sunday for lunch or dinner at least once a month.\n\nOlivia's father and his wife, Samantha, visited at least once a week, sometimes for a meal, sometimes just for coffee, but occasionally they would call in advance and bring a take-away for the girls. Roger was a tower of strength; nothing was ever too much trouble and the girls adored him. Constance was, of course, Karen's daughter and Charlotte was Olivia's but it never made any difference to how he treated them and that now included Chloe.\n\nOlivia and Samantha had become closer over the years and were now like mother and daughter. The first time they were over after the music room had been completed, Samantha spent a long-time playing guitar with the girls. They'd heard her play acoustic, but with an electric guitar, she turned into a different person. Eventually, she left her guitar behind and jammed with them during most of her visits.\n\nWhilst they were playing one day, Olivia and I sat with Roger, watching them across the garden. \"Sam loves visiting. She was so focused on her career that kids passed her by and she didn't know how to deal with them when they were younger. Now they're of an age she can relate to them better, the fact that she gets to play the guitar with them is great.\"\n\n\"She never tried to replace Mum, in fact, she tried hard not to do anything like that. It made it easier for me and the girls think she's great. You did okay Dad.\"\n\nI smiled. I knew how much Olivia loved her dad and it reminded me that mine hadn't been in my life since I was seven. It was sad that he never saw me play cricket, as far as I knew and had never met Hayley or his granddaughter.\n\nMy Mum was a rock. She'd been around plenty when Hayley was alive but hadn't wanted to intrude too much. Chloe adored her and they loved to shop. Mum got excited about buying Chloe new outfits, actually, she got excited just buying her a new school uniform, but as Chloe got older things got even crazier.\n\nSince Hayley's passing Mum had been around much more and I was grateful for her presence. I'd asked Olivia how she felt, but she'd known my Mum for most of her life and enjoyed her involvement. Now the shopping excursions included Constance and Charlotte, bringing Mum treble the joy.\n\nMum would have dinner with us at least once a week and she would drop in at some point a couple of times a week when it was just the two of us. Occasionally she'd help with housework or cooking, sometimes we'd go to the supermarket together, but mostly we sat and talked. We talked about Amy, her partner, who'd died in her sleep six years ago. She missed her a great deal, so did I, but Mum's view was that Amy had rescued her, revealed some things about herself that she'd never known and they'd had a great life during the time they had together.\n\nI told Mum everything, I kept nothing from her and she listened non judgementally. The one thing that concerned her was my relationship with Olivia and the fact that we shared the same bed. It was always there as a question that she left hanging and rarely actually asked. One morning she danced around it again and I needed to confront it. \"Mum, I've been friends with Olivia all of my life and we're both in the same situation here. I like having someone to be close to, to share my thoughts with, to comfort me when I need it. We share the bed; we don't have sex. I've told you it's something we've talked about, but neither of us wants to change things.\"\n\nCoaching\n\nIt had been almost a year and the five of us had settled into a routine. There were occasional moments of sadness, sometimes outright grief, but most of the time we coped and all got along well. The girls were of an age that they were consulted on everything and acted maturely, but they still, occasionally, reminded us of the teenagers that they were. They ganged up on Olivia and me, they confided in each other and were so close that they reminded us of how we were with Karen at their age.\n\nI'd been asked to voice a speaking book, play a role in a radio drama and had appeared on a tv panel show, but I was content taking care of my family.\n\nThen, one afternoon I got a phone call that shook my foundations. \"We need a coach for the Bandits women's team and maybe you could do a few sessions with the spin bowling coach for the men's team.\" It'd come out of the blue; I'd been away from cricket for a while. I told them I needed time to consider it.\n\nI made tea. I was worried that I no longer had the skills. Did I want that challenge? How would Olivia and the girls feel about it? I had no answers. Then I knew someone who I could talk to, so I phoned Graham Dowling. If a cricket legend thought I could do it then maybe ...\n\nWe chatted for a few minutes catching up. He asked me to marry him, I refused and told him not to be stupid and that I was sure his wife would be unhappy. He laughed then asked about Chloe and Olivia's girls. He asked about Olivia and I told him about her work. \"The two of you make a good team, ever thought of making an honest woman of her?\"\n\n\"What? We're friends, that's all, what's wrong with you?\" I almost snapped at him.\n\nHe ignored my tone and calmly replied, \"Nothing. I know you've both lost your partners, but you're close and the last time I saw you I detected something between you.\"\n\n\"Shut up or I'll hang up,\" I asked for his thoughts about coaching and he gave them, no punches pulled, but if I took the job, he agreed to act as my mentor, from a distance. England's most prolific batsman, a winning captain and multiple record holder had offered to help me.\n\nAt dinner that night I raised the subject tentatively, almost scared to hear what their response would be. \"You've been offered the coaches job? Why haven't you accepted?\" Olivia was puzzled.\n\nChloe just said, \"Mum you're an idiot. Stop moping around here and do the thing you were born to do.\" Three heads nodded in agreement.\n\nStill, I thought that I needed advice from Mum, so I raised the subject the next day. She almost spilt her coffee, \"Why haven't you said yes? You're a fool. Hayley was a great cricketer, but you were right there with her and had skills she didn't. Take the damn job.\"\n\nI went to speak to the officials at the club and meet some of the players. A week later I collected my training kit and started planning. I was back.\n\n*****\n\nOne night I was reading when Olivia climbed into bed beside me. She leaned over and kissed me before saying, \"Goodnight.\" It wasn't unusual, we often did it, usually, it was chaste. Tonight there seemed to be something different, but by the time I decided to ask Olivia about it, she was asleep.\n\nThe same thing happened the following evening and again I bottled it, I kept quiet.\n\nThe next morning Olivia finished the last of her coffee and put her mug on the plate she'd used. \"I'll get that, you get away.\"\n\nShe leaned over, said, \"Thanks hon,\" and kissed me on the cheek. Again, not for the first time, but it didn't seem like it had previously. It happened most nights and mornings, I looked forward to it and on one occasion she was dashing out the door when I was folding laundry. I missed my kiss and felt cheated.\n\nA couple of days later Mum and I were having coffee, \"Are you and Olivia ...?\"\n\n\"Are we what?\" I almost snapped at her. I resented other people having a view on the two of us.\n\n\"Sleeping together?\"\n\n\"Christ Mum, you know that we are, we're not having sex if that's what you're asking. Why are you asking?\"\n\n\"Something's changed, between you two.\"\n\n\"I'm not aware of it.\"\n\nShe looked shocked. \"You two are so dumb! I know what you've been through, I've been here, remember? You've almost been thrown together, but actually, you chose to be. You've been friends almost all your life. For goodness' sake get real, do something about it.\"\n\nI had a lot to think about, but I couldn't get my head around it and the idea of talking to Olivia scared me to death. Then Chloe came to talk to me one evening. \"Mum, you and Olivia love each other, it's plain as day. Why are you behaving like this? I know it'll be hard, but we don't mind.\"\n\n\"What do you mean 'we don't mind?\"\n\n\"Connie, Lottie and I.\"\n\n\"You lot need to mind your own business.\"\n\nShe growled as she walked away, \"It is our business.\"\n\nI have no idea why what happened that night did happen, but maybe the fates had aligned. Olivia kissed me goodnight as she'd been doing for a while now and fell asleep fairly quickly. I read for another ten minutes before I put my book down and turned off the light.\n\nSomething woke me, but I had no idea what it was. I was being held by Olivia who was snuggled up tightly behind me. Then I realised that her left hand was under my T-shirt and she had my nipple between her thumb and forefinger, they were moving. The clock told me that it was just after 6 am, the alarm would get Olivia up in half an hour. I wasn't sure what to do about it, wake her? Was she asleep? Then I realised that a warm feeling was slowly rising in my body and her actions were turning me on. It had been well over a year since I'd felt this, but back then it had been something that I'd felt several times a week.\n\nI felt Olivia move and heard her mutter something. Suddenly she yelped and snatched her hand away. I rolled over. \"Oh, I'm sorry I was dreaming, thinking about Karen. I'm sorry.\" She was blushing.\n\n\"So am I. I haven't felt like that since ....\" She didn't need me to finish that sentence.\n\n\"I'm sorry, I was feeling something too.\"\n\nI leaned in and kissed her. It was brief, but her eyes bugged out. I smiled as I asked, \"What? You can kiss me as you've been doing for a couple of weeks now and I can't return the favour.\"\n\n\"I wasn't doing it as a favour.\"\n\nMy reply didn't involve words. I leaned forward and kissed her properly. For a few seconds she was passive and then she joined in and it became wonderful, it felt right, I'd missed this feeling and I wanted it. As I pulled away, I looked at Olivia and realised that I wanted her, others had recognised it and now I had to accept it for what it was.\n\n\"We're going to do that one more time right now and then tonight we're going to talk about it what comes next, but I suspect we both know what that is.\" I didn't say anything, I just drew her into me and gloried in the feeling of passion that had heated my blood and made me dizzy with desire. Then she dressed and left for work. I bounced around the house with a big smile on my face all day. I wasn't sure what would happen later, but whatever it was, things had changed.\n\nThe girls bailed out after dinner and soon we heard the sound of guitars and drums coming from the 'Folly' on the other side of the garden.\n\nOlivia sat on the sofa facing me, holding her wine. \"Do you remember our first New Year party? Karen's mum had gone to the middle east and the two of us were living together. You were all excited about heading off to Barbados a few days later?\"\n\n\"I remember it well. I was excited, eager to know how things were going to develop for me, but that evening I saw the two of you together and realised just how perfect you were as a couple. I know I'd seen a lot of you, but that night it was different, things had changed, you were so proud of each other, so much in love. I don't think that ever changed, you were perfect together. I was a bit jealous at the time because I wanted my special person. It turns out that two weeks later I'd found her. Why do you ask about that?\"\n\n\"A couple of days later Karen and I were talking about the party and got onto talking about you. She asked me if I fancied you.\" My mouth fell open in surprise and Olivia smiled. \"I admitted that I'd never thought about you like that, never thought about any woman like that. Remember, four months earlier we didn't know that we were in love or gay. We knew that you were, but had never given it a second thought. When I did think about it, after she asked me that, I realised that if things had been different, I could have fancied you. She said the same thing. Then a few weeks later you came home and had sealed the deal with Hayley. I've never thought about that again until a few weeks ago.\"\n\n\"And what did you think?\"\n\n\"We've always been close, for the last year ...\" there was hesitation, \"I don't know how I'd have survived without you, I was broken and you were the same. We've comforted each other and supported each other and then I realised that I'd fallen in love with you, not as it was, I want to be with you, to be your partner ...\" There was more to come and she took her time, \"your lover. I haven't missed sex until recently, but that's changed, you turn me on and sleeping next to you is killing me, I'd like more. But ...\"",
        "I was blown away at how frank she'd been. \"You turn me on as well and I'd be happy to spend the rest of my life with you, no, not just happy, that sounds like second best. I want you because I love you and you're right, it's changed. I want us to move on and be a proper couple, lovers and everything that goes with that.\"\n\nShe turned away from me and for a moment I thought something was wrong. She put her glass on the coffee table and turned back to face me. For a few seconds she looked into my eyes and then she moved, she lunged forward threw her arms around my neck, knocking me backwards until she had me trapped, then she kissed me. This kiss wasn't like the one this morning, or those from the last few weeks, this kiss said that things were going to move in a direction that was likely to end up in bed.\n\nSuddenly the passion started to make me cry and Olivia pulled back, asking, \"What's wrong?\"\n\nI sniffled, \"Nothing, I feel happy, for the first time in more than a year I feel like I'm about to start living again.\"\n\n\"Come to bed then?\" I'm not sure if it was a question or a proposal, so I treated it as a proposal and we stood for another hug before we walked away holding hands. If I'd been looking out of the window, I'd have seen that the girls had stopped playing and were watching us. Chloe had her hand to her mouth; she knew that things had just changed.\n\n*****\n\nWhen we reached the bedroom, I grabbed Olivia and kissed her for the first time as her lover, I ran my hands over her buttocks and she sighed. She touched me the same way standing at the end of the bed as we kept kissing, it was magical, warm, loving and very arousing.\n\n\"Do you want to get in the bed?\" I asked.\n\n\"Oh God yes. But first I want to see you, I want to see you as my lover and not my 'friend'. That sounds stupid but ...\" She paused.\n\n\"It's okay I understand.\"\n\nI stepped back and took my top off. As I threw it over to the chair I turned and it was all I could do not to faint, my mouth and eyes were wide open as Olivia stood there with two perfect, glorious, beautiful breasts right in front of me. \"Oh, my word. Can I, can I touch them, please?\"\n\nI stepped forward my eyes locked onto the most beautiful nipples, pale brown, erect, not very long, but mesmerising. I reached forward to touch one with an outstretched finger, it felt incredibly erotic and I took it, gently between my finger and thumb. I smiled, this was magical, I was touching the nipple of a beautiful woman and feeling it harden as I did so. That same woman was looking at me with lust in her eyes and I needed to lie down or sit down or I was going to fall because my knees were about to turn to jelly. I was getting wet and aroused.\n\nWe pulled apart and it took only seconds for us to shed the rest of our clothes and as we lay down, my left hand moved towards her belly and downwards before my forefinger touched her lips, gently. We both sighed at the same time. I licked my lips, suddenly realising what I'd just done. For the next few moments, time must have stood still. I teased her gently whilst at the same time kissing her softly. I probed with a finger and she sighed, she seemed to relax and when I looked saw that her eyes were soft and tears were forming. \"I'm okay, really. Just ...\" She didn't finish but closed her eyes as I continued to arouse her.\n\nI felt Olivia's fingers tracing a random pattern down my belly and I knew where they were headed. She reached the hood of my nether lips and located my clit which she massaged so gently, I sighed again. I was close to orgasm.\n\nTime seemed to stand still as we touched each other our arousal increasing. Suddenly I felt it rushing up my legs and enveloping the rest of me as Olivia shuddered. We came at almost the same time and knew, in that instant that this was meant to be and that it was right.\n\n*****\n\nTwo hours later, Olivia and I were sitting on the sofa talking, once again clothed, when the girls came in. \"Has something happened, between you two?\" asked Chloe. Neither of us answered, but the fact that we turned beetroot red gave her the answer.\n\nConstance was holding a bottle of bubbly and five glasses, \"Do we need this?\" I looked at Olivia and she nodded.\n\nCharlotte looked up at the ceiling and muttered, \"Thank you.\" Then she looked at us and continued, \"You took your time. The two of you are great together and we've been hoping for this for weeks.\"\n\n\"So, you approve?\" asked Olivia with a frown.\n\n\"The two of you care for each other deeply and because of that you got through this disaster, actually, we all got through the disaster. We all agree that we'd like to wind the clock back, but ...\" She started to sniffle but kept going, \"We all wish things were different, but they aren't. We're a family, I have two sisters instead of just one and there are two of you.\"\n\nChloe slapped Charlotte's arm, \"We've always called each other sisters, as long as I can remember.\"\n\n\"We have, but now we really are.\"\n\n*****\n\nI was sitting up in bed when Olivia emerged from the bathroom, she smiled at me and I folded back the duvet. She sat on the edge of the bed, looked over her shoulder at me and pulled off the long T-shirt she'd been wearing. As she turned towards me and brought her legs up, I dropped the top of the duvet that I'd been using to cover my chest. My eyes rested on her breasts and hers stared at mine.\n\nShe came over and I welcomed her into my arms. \"I hadn't thought about sex for months and hadn't missed it. That's odd because ...\" I didn't finish the sentence for a few moments, \"Then a few weeks ago I started to see you in a new light and realised that I fancied you, sexually.\"\n\nShe smiled kissed me on the cheek and rested her head on my shoulder. \"I was the same. It's weird really, Karen and I were active, several times a week, sometimes every day and then ... nothing. Earlier was magical, I hadn't missed that intimacy until recently.\"\n\nI smiled as I stroked her shoulder, \"Hayley and I were always ready, but quite often it was just long sessions of kissing or stroking. It wasn't always madness, although when it was, it was crazy.\"\n\nShe moved so that her face was close to mine. \"Let's try some of that kissing stuff then.\" She grabbed the back of my head and forced her lips onto mine, it was fierce, forceful and sent shivers through my body.\n\nAs she kissed me Olivia's hand took the weight of my left breast and slowly stroked it. It may have been the combination of the kissing and her touching my breast or just the latter part that made me gasp. I felt needy, I wanted her in a bad way. It was weird, over a year nothing and then a couple of hours after the first session we'd had, I wanted more, a lot more. I groaned as she kept her stroking, \"Jesus, I want you, I want you a lot.\"\n\nShe moved to stare into my eyes, \"and you're going to get it. Shush now.\" She pushed me back and slid down so that her lips could envelop my right nipple as she continued to stroke me. I started to throb, a soft pulse of excitement moving through my limbs, then my torso and finally it reached my brain and took over everything. I had no real sense of what Olivia was doing for some time until I realised that she was moving south, between my thighs. She pushed my knees apart and licked up the inside of the right thigh until she reached the junction. She moved her tongue over my nether lips and I could feel them swelling even more than they already were. I was so wet, then, suddenly, she took my clit between her lips and at the same time slid a finger or maybe two inside, between those lips. I started to shake immediately, the orgasm was coming quickly and when it struck it took my breath away, I struggled to speak, nothing emerged from my mouth. It was sensational and again, my mind wandered off somewhere. I came again, maybe a couple more times, I have no idea.\n\nI opened my eyes to find Olivia lying partly on top of me, facing me and grinning. \"That was good, wasn't it? I loved that.\"\n\n\"So, did I. I passed out I think.\"\n\n\"Maybe for about fifteen seconds. I loved that, doing that and you just let me.\"\n\n\"Of course, I did, it was wonderful.\"\n\n\"I always loved being in control and giving. I found it hard to just simply take or let it happen.\"\n\n\"Didn't Karen like that?\" I asked.\n\n\"No, she loved it most of the time, but what frustrated her was when she was trying to take control, I always wanted to do something, to participate. I found it hard to be passive. A long time ago, soon after we became lovers, she asked to tie me up so that I couldn't do anything.\"\n\nI was shocked, it seemed so out of character for Karen to want to do that, or for Olivia to relinquish control to that extent. \"I'm stunned, did it work?\"\n\nShe laughed, \"Yes, it did. It nearly killed me the first few times, but she loved it so much and it was so satisfying it was hard to object.\" She must have seen the look on my face. \"We didn't do it often, a couple of times a year maybe.\"\n\n\"I hope you don't want me to do that, I'm not sure that I could.\"\n\n\"No, it was of its time.\" She paused before asking, \"Did you two have a 'thing'?\"\n\nI swallowed hard. \"Yes, I loved Hayley to kneel over me and lower herself onto my face. I spent a lot of time pleasing her like that.\"\n\n\"Didn't you feel out of control? How did you breathe?\"\n\n\"Breathing is okay as long as your partner remembers. I always felt in control because in a way I was, but I know that Hayley also felt in control. It's weird, but we did it a lot.\"\n\nThere were a few moments of silence before I spoke again, \"I'd like to try it with you, would you?\"\n\nShe nodded but looked apprehensive. There were no words as she placed one knee over the other side of my chest and moved up the bed until her sex was over my face. Then she asked, \"Are you sure?\"\n\n\"Yes, yes I am. Lower yourself and use me. If I need to stop, I'll slap your thigh twice.\" She let herself down until she just made contact. It seemed clear to me that she was hesitant and I understood that so I gave her a moment or two to adjust. I could feel her getting excited and by that time I was desperate for her to be closer, this was turning me on a great deal, so I put my hands on her hips and pulled her down. She jumped and stopped moving, but the actions of my tongue soon made her relax and enjoy things.\n\nAs Olivia came, she yelled and tried to stifle the sound, only partly successful. She tried to pull away but I held her in place and after ten or fifteen seconds she let go and ground herself against me muttering swear words and instructions, very few of which I could make out. I don't know how many times she came but I felt her try to pull away and touch my shoulder, I released her and she collapsed sideways onto the bed, lying back with her eyes closed. She was bathed in sweat and had a huge grin on her face.\n\n\"Dear God, I loved that, that was incredible.\" She sighed and as she started to roll onto her side towards me added, \"Somehow, I knew you were in control but ... I don't know, that was ... Thank you, I love you.\" She sighed again and about a minute later I heard a soft snore. I smiled; we were going to be okay.\n\n*****\n\nMy Mum realised that something had changed a couple of days later and I confessed. She looked surprised at first and then smiled, \"I worried for ages that the two of you sharing the same bed was wrong, weird. But you used to do it as kids and I know that you love Olivia, you've always loved her and Karen. I worried that you'd come together in grief and that because it hadn't developed as a relationship like most peoples do, something would drive you apart. I'm pleased that you're a couple, be kind to her, take care of her.\"\n\n\"I will. I suppose it was inevitable, but at least we didn't rush, the time was right. The girls approve.\"\n\n\"I know they do.\" She stated, simply.\n\n\"How do you know that?\"\n\n\"Chloe and I have talked about it. She's a remarkable young lady and quite mature.\" She laughed, \"The three of them are remarkable and I love them to pieces, all of them. I feel as if I have three granddaughters, not just Chloe. She told me that the three of them have talked about you and Olivia a lot and that they hoped you would become a proper couple.\"\n\n\"They told us that they were pleased a couple of days ago, we opened champagne. I love Chloe and always have done, you know that. I always liked Constance and Charlotte, but now I feel the same way about them that I do about Chloe.\"\n\nOver the next few weeks, we became more overt in our affection for each other, we didn't flaunt it but didn't try to hide it either. I doubt if many people noticed. I loved Olivia in every way that I could and she felt the same about me. Somehow, I was sure Hayley would be okay about it.\n\nDiscovery\n\nA couple of months later, Chloe and Connie were playing soccer after school and Olivia was going to catch the end of their game and then bring them home. Charlotte wasn't keen on playing soccer and had decided to come with me whilst I put the Bandits team through their paces. She'd watched quietly from the stand and occasionally, had gone to fetch a stray ball.\n\nThe team were sitting on the grass in front of the Pavilion and I was standing talking about training, our next match and tactics. I noticed a couple of the girls watching something behind me and asked, \"What is it?\" before I turned around.\n\nWe use a frame, similar to a small soccer goal with a net on it to catch the balls. The front has a wider mesh to allow balls to pass through, but it has a set of stumps and a circular target above the stumps marked on it. Charlotte had a bucket of cricket balls and was standing about thirty metres away tossing ball after ball at the target. The remarkable thing was that she hit the stumps or the target almost every try. One of the team said, \"She's good, maybe you should get your daughter to try out.\"\n\nAfter I dismissed the team, I wandered over to Charlotte who was, by now, putting some of the equipment onto the cart that we used to move it. \"Sorry Sarah, I thought I'd try a few shots.\"\n\n\"It's fine, some of the girls were impressed. So was I. Not many of them are that accurate time after time.\"\n\n\"I don't even know why I did it. I've never played cricket, just badminton and netball.\"\n\n\"Bring the bag of balls over to the net.\" She followed me. \"Try a few throws at the stumps for me.\"\n\nShe hit the stumps five times out of six. \"Have you ever watched a bowler?\"\n\n\"I saw the girls, I've seen you and Hayley. You take a run up and overarm the ball at the stumps.\"\n\n\"Keep part of your foot on or behind that line. Work out what's comfortable, don't worry about accuracy too much.\"\n\nOver the next ten minutes, she varied the length of her run-up until she found the right spot and the ball hurtled out of her hand. She didn't land the ball on the same spot every ball that she bowled, which seemed to frustrate her, but she was hitting the stumps consistently. I, on the other hand, loved what she was doing and her speed looked pretty fast, certainly much faster than I'd been. Yvonne, one of the team had wandered over to watch and muttered, \"She's quick, where have you been hiding her?\"\n\n\"I've never seen her with a cricket ball in her hand before today, although I'm sure she must have picked one up in our house at some point.\"\n\n\"Lottie,\" She came over looking bashful. \"This is Yvonne, how about bowling a few at her, see what you can do.\"\n\nThe first ball nearly took Yvonne's head off and Lottie muttered, \"Sorry.\" The next one hit the very base of the middle stump, which made her smile. After the sixth delivery, Yvonne wandered back to me, \"I only hit one, she's got talent.\"\n\nWe were quiet all the way home and as the five of us wolfed into a couple of large pizzas, Charlotte told them about her exploits at the cricket ground. There were a couple of questions from the other two, but it seemed like a nothing event. As I was clearing away Olivia asked me about it, \"You seem to be thinking about what Charlotte said.\"\n\n\"I recognised something. It took me back to when I first picked up a ball.\"\n\n\"A nice memory then?\"\n\n\"Well yes, but more than that,\" I turned to face her leaning back against the sink, \"Liv, I've never seen anything like it. Her throws at a target were consistent and accurate, her bowling is crude, but spot on and she's fast. What bothers me is how do we deal with that, what if it was just a moment of ... I don't know, what if she wants to play? It scares me ...\"\n\n\"What does she want to do?\"\n\n\"I don't know.\"\n\nLiv walked over to the window and managed to catch the girl's eyes as they were doing something in the Folly. Charlotte pointed to herself and mouthed, \"Me?\" Olivia nodded and a few minutes later she appeared and threw herself on the sofa.\n\n\"What did you think of the cricket?\"\n\n\"It was fun, I liked it, but I don't know anything about it and it would take a lot to learn I guess.\"\n\nI sat forward, facing her, \"Your accuracy when throwing caught the eyes of some of the team when I was speaking to them. I don't think any of them could be that consistent, but there are other parts to it, moving to the ball, throwing on the run, that sort of thing. Your bowling was quick and you hit the stumps consistently. You need some things sorted for tactical reasons, but I've rarely seen anyone who has the natural ability you showed. I think you could be good, really good, but you'd need to want to do it. Being my daughter would help, but also heap all sorts of expectations on you. I'm not going to put pressure on you either way.\"\n\n\"Think about it love, no pressure from us.\" Added Olivia.\n\n\"Okay, just one thing ...\" She came over and hugged me.\n\n\"What was that for?\"\n\n\"Your daughter. That's what you called me, thanks, I like that.\"\n\n\"But you're ...\"\n\nShe interrupted, \"Olivia's actual daughter and Karen was my other Mum? Yeah, but you're as much my Mum as anyone now. Thanks.\" I got a kiss on the cheek and she disappeared, leaving me with tears forming that needed to be mopped up.\n\n\"What do you think?\" Olivia asked.\n\nI thought for a moment before replying, \"Being part of my family could cause her a problem, but she'd have a personal coach and I know that I could make something of her, something good. She took my breath away. The issue is, she has to want it. You remember how it was for me at the start, it was fun until the coaches realised that I had something. Mum and I didn't have much at the time and it was a way to strike out, so I gave it everything. It was school, cricket, training and Mum. If I had any time at all, I was with you and Karen. It's given me a great deal, I was lucky. If she wants to do it, great, if she doesn't, well that's that. Whatever the three of them choose to do I'll be there behind them doing what I can. I love them, they've saved us.\"\n\n*****\n\nThree days later Charlotte looked over at me during dinner and asked, \"Can we go and do some training sometime soon? I'm not sure that I'm any good and it scares me a bit, but if I am good, I want to give it a go.\"\n\nChloe looked at me, \"Work with her Mum, it's exciting. I never really saw you play; I was too young, but we'd love to see Lottie do well.\"\n\n\"That's true,\" added Connie.\n\n\"I'll fix something up.\"\n\nI can't begin to explain how excited I was about the prospect of one of my kids playing cricket even though wasn't mine.\n\nA couple of minutes later Charlotte added, \"I'd like to train to be a teacher, not at high school like Mum, I want to teach primary school, but I'd like to see if cricket can be a part of that.\"\n\nOlivia touched her hand, \"That's great love, I'm sure Karen would be pleased.\"\n\n\"Mum, I'd like to study law and maybe follow in your footsteps.\" Connie didn't look up, she just paused between each forkful of food.\n\n\"That's a tough road young lady, but it's a very sound choice.\" Olivia turned to Chloe, \"And what about you Chloe?\"",
        "\"I'm going to study animal science, so I can work with wildlife.\" It was delivered matter-of-factly as if it was already set in stone.\n\n\"First I've heard about that,\" I stated. \"What made you decide on that?\"\n\n\"It's your fault Mum. That programme you did was amazing and I'd love to work in that field, conservation or research. I'd love to make programmes as you did, maybe, who knows.\"\n\n\"I think that's a great idea. Have you any idea where you're going to go. Which universities?\" I asked.\n\nThe three of them looked at each other, Charlotte and Chloe gave the slightest of nods towards Constance and she answered. \"We've talked about it and we fancy the idea of being together at the same university. You know, maybe renting digs, but ...\"\n\n\"All at the same university? Okay, why the but?\" I asked.\n\n\"The two universities here offer all the courses that we fancy and we think we have the grades to get in. It would mean that we could still live here. You know, keep our eyes on you two.\"\n\nOlivia was trying not to laugh, \"You seem to have it sorted and bang goes the idea of it being quiet around her.\"\n\nConstance gave her a look that said as much as the words that followed. \"Mum, you're a liar. You'd rather we didn't go away.\" Olivia just smiled and left it to me to answer.\n\n\"You're right, I was dreading it, we both were. The idea of any of you leaving terrifies us.\"\n\nThere was lots of conversation about further education and careers over the next few days, but they'd thought it through and that made us proud of them.\n\n*****\n\nI'd been a spin bowler. We tried to deceive batsmen or women by delivering balls that deviate from their original course as they bounce. The fact that they don't always deviate could be as hard to account for when batting as the ones that did. The balls that Charlotte had bowled were much faster, she showed promise as a medium to fast pace bowler and I expected that her deliveries might also swing through the air given the right conditions. They could be as hard to deal with as those delivered by a spinner.\n\nI put her through the paces and got help from the men's pace bowling coach. It became obvious that she was accurate, consistent and could vary her pace from pretty rapid to the pace of a spin or slow bowler, without any great tell-tale signals, all of which was great. She was also good in the field, could catch almost anything and had a great throw-in from the deep, near the boundary.\n\nBatting, however, was a problem. The fast balls terrified her and after being hit several times, she almost gave up. Nothing I could do seemed to help. She was keen to play, but batting was an issue that had to be sorted and I had no idea what to do about it. I wrestled with it for about a week and then realised that I could get some advice, so I picked up the phone.\n\n*****\n\nCharlotte was the first of the girls downstairs after getting changed and as she was fetching drinks for the three of them, I asked her a question, \"Are you free for a training session on Friday evening? It's an extra just you and two of the others.\"\n\nShe didn't look up, \"Sure, going to try and get me some more bruises I guess.\"\n\n\"No, the idea is to avoid bruises. I've got a special coach coming, one of the best.\"\n\nNow she was interested and looked up, \"Okay, who?\"\n\n\"Graham, Graham Dowling has offered to do some coaching. He's seen it all and he was England's batting coach for years after he stopped playing.\"\n\n\"Uncle Graham, wow that's something.\"\n\nOlivia had been listening, \"Was marrying him part of the deal?\" She was grinning widely.\n\n\"Nope, but you never know, he may ask when he gets here. Remember he fancies you as well. He has good taste.\"\n\n*****\n\nGraham took the three girls one at a time and sat talking to them for about ten minutes whilst the others did some stretching and bowling, but they were told not to touch their bats. Then he sent each of them down to the end of the nets and started throwing balls towards them. He told them just to watch each ball and move out of its path. Charlotte went first and initially, she and the two watching didn't seem impressed until he started throwing harder and aiming at the body.\n\nAfter they'd all had a turn he said, \"That's good, now you know that you can dodge the balls and didn't need the bat. Now try again and use the bat to fend the ball off, but this time we'll all go at the same time and use the bowling machines.\" I'd set the machines up and they started sending down deliveries. They got progressively faster and the type of delivery varied a bit. This had gradually increased their confidence so that Graham could go closer and work on technique. After two hours the girls were beaten and thanked Graham. He offered to do another session the following morning and all three of them agreed.\n\nGraham came home for dinner with Olivia and me that evening. He refused to talk about cricket, instead, he wanted to know all about the girls and their plans. He was a delight to spend time with, but on this occasion, he flirted with Olivia outrageously all evening and had her giggling like a young girl.\n\nAs we were getting ready for bed, I called Olivia a flirt. She danced as she pulled on a nightdress, \"Jealous?\"\n\n\"No, I thought it was funny and it was nice to see you enjoying yourself. I think that he'd have run a mile if you'd done anything. He's been a great person to have in my life. But I've had you in my life all these years, I never thought that we'd be lovers, but things happened and pushed us together. I think that we're lucky.\"\n\n\"We're both fortunate to have had our special people and we both know that if Hayley or Karen walked through the door at some point, what you and I have would end. That said, I love you with everything that I have and hope that this lasts forever. Now kiss me.\"\n\n*****\n\nI worked with Charlotte regularly over the next year, teaching her the variations she would need in her bowling and I spent hours bowling at her in the nets. There wasn't much she needed to learn about fielding, she was a natural. She played in lots of club games where she was usually the star fielder and had an uncanny ability to work out where a ball was heading and to be there. We'd had a long conversation about cricket with Olivia. I explained that she had lots of promise and might be able to make a living playing professionally. Charlotte wanted to give herself every chance, but said that it would have to fit around her degree studies, \"I made myself a promise that I'd follow in Karen's footsteps and teach. Earning my living playing cricket would be great, I love it, but who knows how long it would last, so I'll work hard to get my degree, do my teacher training and have that to fall back on.\"\n\nI was delighted, her plan made sense. Hayley and I were lucky to have the lengthy careers we had and to then go on to coach, not many would be so fortunate.\n\n*****\n\nI wouldn't have thought that Olivia and I could be any closer than we had been, but I was wrong. We had our own work and interests, but loved each other's company and being with the girls. Karen and Hayley's family accepted our relationship, although it took time. My Mum simply treated Olivia as if she had always been her daughter and she would have climbed over mountains for any of the girls.\n\nI went to fold some laundry and collected two glasses of wine as I headed back to the lounge. I thought that Olivia might have gone to change, but as I stood looking out of the window, I saw her across the lawn in the garden room, Hayley's Folly. She was talking to the girls and stood with her back to the window. There must have been music playing because Olivia was moving her hips very slightly, I guessed in time to whatever the music was. I admired her legs; they were slender but shapely. I'd been surprised when she left this morning because she was wearing a floral dress, that was unusual for her and it was shorter than she normally wore for work. She turned and saw me, so I raised a glass and she waved in response. Two minutes later she headed back, her full skirt swinging as she walked along the garden path. She'd also slipped her heels back on. I admired her, she was gorgeous, a mature, elegant woman, full of confidence in her work, but funny and very caring at home. She smiled when she realised that I was watching her.\n\nI handed her the glass of wine, \"I just wanted to check something with the girls, thanks for the wine.\"\n\n\"I was watching you. You're lovely and I fancy you.\"\n\n\"Later.\" She kissed my cheek. \"I fancy you too.\"\n\n\"A very long time ago, it must have been about the time I Mum and I moved in with Amy, I remember hoping that the three of us would remain close, it bothered me because I was living much further away from you both. I hoped that we'd be close for the rest of our lives. It seemed that school friendships for many people ended after education and I hoped that wouldn't happen to us. It didn't ...\"\n\nShe stroked my arm, \"No it didn't, but I bet you never expected Karen and I to become a couple.\"\n\n\"No, and I never expected you and me to become one either.\"\n\n\"We didn't plan it like this and ...\" She wasn't able to finish.\n\n\"I know. Somehow, if Hayley and Karen were watching us right now, I think they'd approve.\"\n\nShe smiled at me and it melted my heart, as she added, \"I know that they would.\"\n\nWe had an active sex life, but it was never wild or experimental, just straightforward, passionate and satisfying.\n\n*****\n\nAfter a summer of madness, the girls had all started University. First, there had been the celebrations after their exams were completed. Then it was planning the university courses and quite a few parties. Constance and Chloe had spent a month travelling to various parts of France by rail and ended their trip with a few days in Paris, where Charlotte joined them.\n\nApart from those days in Paris, Charlotte had stayed behind all summer to play cricket. It was mainly for the reserve team, where she'd been very successful. Her confidence with bat and ball had grown and I believed that she was a real prospect for the future, her bowling was fast, accurate and she'd developed a couple of changes of delivery that would mean the batters could never be entirely sure what they were going to face. It had been nice to have her around whilst the other two were away and she'd been with me for most of that time, either at home or during training. I felt as close to her as I was to Chloe.\n\nThen it was heads down to concentrate on their studies; Constance -- law, Chloe -- wildlife biology and Charlotte -- education. In the evenings, when studying was done, they played music or just chilled out. They were supportive of each other and truly a pleasure to have as a part of my family.\n\nI kept the house when I wasn't coaching. I loved all of those domestic duties and taking care of that family, my family. Olivia worked hard and had been promoted to supervise the jury trials team. The two of us remained close as the months passed and I hated being away from her as happened occasionally. We loved one another, we made each other happy and were able to talk about Hayley and Karen without floods of tears.\n\nOne evening in June\n\nIt was a glorious, warm, early summer evening with clear skies. I stood on my own watching the girls go through their warm-up routines before the bowlers sent some deliveries down towards the batters in the nets. It gave all the players the chance to 'get their eye in.' Then they did some fielding practice before I shared a few final words and they went to get into their match kit.\n\nThe ground was filling up, the squirrel mascot was doing his stuff with the youngsters in the crowd and Gordon, the Stadium Announcer was doing his rounds reporting on events with a TV crew so that he could be seen on the big scoreboard screens. I saw him heading in my direction and for a brief moment considered making a run for it.\n\nThe camera pointed in my direction and his microphone was offered up. \"Ladies and gents, I'm with Sarah Hardy, Bandit's legend and head coach. Excited to start a new season?\"\n\n\"I'm always excited to start playing again, but also a bit nervous. What's great, is seeing such a big crowd here this evening and lots of families.\"\n\n\"So, what are the prospects for this season?\"\n\n\"Hard to know right now, but I'm optimistic, we have a great bunch of girls, plenty of talent and I guess we'll have a better idea in a few hours.\"\n\n\"Some changes to the team since last season?\"\n\n\"Yeah. Fans will be familiar with Amy Hastings who played last year as a batter and a fantastic fielder, she's taken over the gloves and will keep wicket. Lizzie Glenn has moved over from our neighbours, she's a great spin bowler and regular wicket-taker. We have a new opening batter; Ayesha Anwar, who's just finished a successful tour of South Africa where she scored lots of runs for the Pakistani team. And we have a new pace bowler, Charlotte Churchill.\"\n\n\"That's sounds exciting. I believe Charlotte is related to you?\"\n\n\"She's my stepdaughter and took up cricket three years ago.\"\n\n\"Some people might ask if she's in the team because of your relationship?\"\n\n\"She probably should have played at the end of last season, but I didn't want to rush things. Obviously, I think she's ready, but I consulted two trusted advisers before adding her to the team for tonight.\"\n\n\"That's intriguing, whose advice did you seek?\"\n\nI hate doing these interviews and Gordon knows that, so he'd been kind enough to forewarn me of his questions.\n\n\"Chris Read, the men's coach, naturally sees a lot of my team and we often discuss player selection. He also thought it was the right time. While we're speaking about the men, let's wish them lots of luck in their game this evening against our arch-rivals over at Danby.\"\n\n\"Of course, we wish them luck. Who's the second person you asked for advice.\"\n\n\"When I was starting out at sixteen, I was fortunate to bowl at Graham Dowling, whilst I was at Lords. As you all know he's an England batting legend and former captain, I met him again a few years later and he's acted as an unofficial mentor to me ever since. He's done some coaching with a couple of this team.\"\n\nCharlotte had wandered over as Gordon responded. \"Well, if an England legend thinks she's ready that settles that and here's the young lady in question. Ladies and gents, boys and girls, let's have a big hand for Charlotte Churchill who makes her Bandits debut this evening.\"\n\nThere was a big cheer, bigger than I expected. \"Thank you, I'm excited to be here.\"\n\n\"I guess the rest of your family are here to cheer you on?\"\n\n\"My Mum, sisters and grandparents are in a box, somewhere over there.\" She waved towards the big stand. I knew exactly where they were and could see them waving back.\n\n\"Good luck young lady. And good, luck to the rest of the team. A big hand for Charlotte and Sarah.\" With that, we were free to get on with preparations. As Charlotte and I walked towards the changing room I touched her shoulder, \"Try to relax, it's your first game, but you're ready for this, enjoy it.\"\n\n\"I know, but I want to make everyone proud of me.\"\n\n\"Every single person in that box up there is already proud of you and so am I. It would be nice to think that Karen was up there watching.\"\n\n\"And Aunt Hayley, but they're not, sadly.\"\n\n*****\n\nWe'd won the toss and elected to bowl first. It was normal to opt to chase a total in T20 cricket. My fears were centred on one thing, one person, Charlotte. I worried that if she had to bat late in the game and it didn't go well, it could knock her confidence in her first one and if we did well, she might not get to bat. But there was nothing I could do about it now; I'd coached them as well as I could and it was out of my hands. I took my seat in the 'dug out'. That had always made me laugh, there was no 'dug out' it was a shelter made of plexiglass at the side of the field where players waiting to bat and support staff could sit.\n\nJean, our Captain, had asked me if I thought Charlotte should take the second over, but we'd agreed that it might be best to bring her on as the first change of bowling. In the first four overs, The Devils scored 38 runs and we'd managed to have one of the batswomen caught trying to hook the ball. Charlotte had been busy, the ball seemed to follow her as she patrolled the boundary, but she'd done well and saved a few runs.\n\nJean tossed the ball to Charlotte for the fifth over and my nerves were pretty bad. Her first ball to the Devils' opener, Katie Spence, was wide. A wide means the ball was out of the batters reach and therefore they are awarded an 'extra' run and the ball had to be bowled again. An 'over' of six balls means six legitimate balls. The next one was full and trapped Katie on her back foot, so no run. The third was the same, but Katie squeezed a single run. That brought Michelle Long on to strike. Charlotte sent down a slower delivery and Michelle, expecting something much quicker, was through with her swing before the ball arrived, no run.\n\nAs she walked back to where she would start her run-up, I saw Charlotte glance in my direction and she made a discreet signal, I nodded almost imperceptibly. This should be interesting. Her run-up looked no different from the previous ones, but her arm whipped over. I didn't see the ball until the wicketkeeper took it into her gloves. Michelle looked around; she hadn't seen it either. Charlotte was grinning as she walked back again, this delivery was short and nearly took Katie's head off. The good thing was she didn't score, sadly she connected with the final ball and sent it to the boundary to score four runs.\n\nI watched Charlotte trudge slowly back to her fielding position on the boundary and managed to catch her eye, give her a smile and a thumbs up.\n\nCharlotte was ready at the end of her run-up for her second over and I noticed that she looked determined. The ball was shorter and lifted high, the batswoman managed to dodge it at the last minute. The second was full and hit the very bottom of the bat. Two balls, two different deliveries and no runs, this was good. I don't think anyone in the ground saw the next ball it was so fast, but they did see the middle stump cartwheeling backwards and Katie Spence staring at it open-mouthed. Charlotte danced down the wicket and was mobbed by her teammates. I sat quietly glowing with pride.\n\nHer next ball did exactly the same thing and I doubt if anyone could believe that she'd taken two wickets in two balls on her debut. I certainly couldn't. There was a hush over the ground and a sense of excitement built, taking three wickets in consecutive deliveries, a hat trick, was rare, but the crowd roared as Charlotte ran in. There was a huge sigh of disappointment as the ball missed the bat and the stumps as it whistled through to the 'keeper. Sadly, her final ball of the over went to the boundary to score four more runs.\n\nThings were going well; the bowlers had pegged the run-scoring back to under six an over. Charlotte had only conceded eight runs from her final two overs so far and I was delighted as she started to run in for her final delivery. The ball pitched short and climbed towards the batswoman who raised her bat to fend it off and in doing so, it took a fine edge and went to the fielder at first slip, next to the wicketkeeper. Elise Curran was a fine fielder and there was no way she would miss such an easy chance. She threw the ball up in the air and raced towards Charlotte, hugging her before the rest of the team piled on. I was delighted, in her four overs she'd conceded only 18 runs and taken three wickets, that was quite an achievement and I'd be pleased for any of my players, but this was Charlotte, she wasn't quite my daughter, but I couldn't have been any prouder of her. At least with her bowling done, I could concentrate and, hopefully, enjoy the rest of the game. As it happened Charlotte also took a great catch on the boundary. It would have gone over the heads of most of our other fielders, but being tall and with a great leap she not only saved a six, she got rid of the one batswoman who'd been scoring freely.",
        "The opposition had been restricted to 128 runs and I was confident we could chase that down. Ayesha and Laura, our openers, started slowly. Laura tried to get Ayesha on strike as much as she could. Ayesha showed why she opened for Pakistan and scored freely until she was caught off of a freak delivery. Laura followed soon after. These things happened in T20, so it didn't worry me as we now had Jean Butler, our Captain, and Amy Hastings at the crease. They accumulated runs steadily and without risk, getting close to the total needed and then they tried for two runs when they should have settled for a single without any risk. Jean had to go and Natalie came in to help Amy to get to the target with room to spare.\n\nWe'd played well and it left me feeling optimistic for the rest of the season. Charlotte hadn't had to bat, but that didn't matter on this occasion, she'd played her part.\n\n*****\n\nI led the team out onto the pitch for the handshakes, where I spoke with a couple of the opposition players and their coach, an old rival with whom I managed to share a laugh. I called the team together for a few words of congratulation before the crowd approached looking for autographs and selfies. I managed to speak a few words to Charlotte, \"Go see them, go.\" She raced across the field to where our family had gathered, I saw Constance and Chloe embracing her and even from this distance, I could see their huge smiles. I walked in that direction at a slower pace and saw the two girls make way for Olivia to gather her daughter into her arms, before Roger pushed his daughter aside, wrapped his arms around Charlotte, lifting and spinning her with a huge grin on his face.\n\nSamantha was clapping, kind of wildly, standing next to Karen and Hayley's parents. They were smiling, but even from where I was, I detected a sadness, still, they smiled and spoke with her. Josh walked towards me and I saw that there were tears in his eyes. He took my hand, \"I'm sorry, this brings it back to me.\"\n\n\"I know, it must be difficult, but we're all pleased that you're here.\"\n\n\"I wouldn't have missed it, not for all the world. I'm proud of you and what you've achieved as a coach and I know that Hayley would be as well, but seeing Lottie out there was both sad and gave me immense pleasure. She's got some talent. Marion and John are in the same boat, delighted, it's just such a shame that ...\" He didn't finish, he didn't have to.\n\n*****\n\nI have no idea how I came to be standing close to the strip that had been used for the game and which the ground staff were now tending to, I must have been in a dream. I turned in a circle taking in the view that'd been familiar to me for so many years; the stands, the lighting pylons, the scoreboards and finally the Pavilion where the changing rooms were located. I felt an arm go around my waist and heard Olivia ask, \"Penny for your thoughts?\"\n\n\"I made my England debut here twenty-eight years ago. That was quite a day and I'm sure you remember it very well, it ended dramatically for you and Karen, you became a couple and lovers that evening.\"\n\n\"I still think that's because Amy had been filling us with champagne all day,\" She laughed.\n\n\"Here we are again after Lottie's T20 debut. She played well and there are opportunities for her if she wants them. I wish that Karen and Hayley could've been here, they'd have been so proud of her. But they're not and now it's you and me, I love you very much.\"\n\n\"And I love you very much as well, I think the two of us will be okay. It seems as if things have come almost full circle.\"\n\nThe end\n\nThanks for reading, please consider voting and commenting. There will not be any more stories about these characters, for now, they deserve a rest."
    ],
    "authorname": "sandy_paris",
    "tags": [
        "lesbian",
        "lesbian romance",
        "love",
        "family",
        "tragedy",
        "heartbreak",
        "recovery"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/full-circle-21"
}
{
    "title": "Christmas in Zonei Pt. 12",
    "pages": [
        "\u00a9 Copyright jvaughn, 2014, 2015. All rights reserved. Copyright violators will be prosecuted to the fullest extent of the law.\n\nChapter Twenty-One\n\nKim closed his eyes against the relentless pounding in his head. Already it had diminished some. The brief walk to the taxi through the cold evening air had helped. Raeden's commanding presence had helped even more. As soon as they'd climbed into the cab, the big mod had pulled Kim back against his massive chest and now he massaged his temples with surprisingly gentle fingers.\n\n\"You were wonderful, the way you stood up to my dad,\" Kim murmured, breathing deep of Raeden's calming scent.\n\n\"You were in pain. There shouldn't have been any disagreement,\" Raeden growled.\n\n\"He wants me to be ready.\"\n\n\"Yes, but continuing to make you practice when you clearly are in no condition to do so is counterproductive.\"\n\n\"He didn't see it that way. I've never met anyone so focused and dedicated. He's downright scary at times.\"\n\n\"He's fanatical.\" Raeden's voice was hard and Kim felt his disapproval. Kim didn't entirely disagree with Raeden's assessment. His father's single-minded determination to mold him into a peerless telepath had run him ragged\u2014more than ragged. Over the past four days his training been relentless. Exercises started at 5 a.m. and ran late into the night. Even while they were eating, his father continued to challenge him. Kim found the work frustrating, tedious, and exhausting. And he'd acquired a monster headache that would not go away even with aspirin.\n\nToday was New Year's Eve, and by the time Raeden had arrived in the late afternoon he'd been dead on his feet and close to tears. Raeden had taken one look at him and insisted that he be allowed the night off. A short, intense argument had ensued, but in the end Raeden had bundled him up and whisked him into a taxi with a promise to bring him back the next day\u2014but not before noon.\n\n\"He spent half of his life in captivity. He lost so much. I think that's why he's so...\" Kim trailed off, not finding a proper descriptive.\n\n\"So much of an asshole?\" Raeden filled in helpfully. Kim could still feel the anger rolling off of him.\n\n\"Give him time.\"\n\n\"Meanwhile, he's working you to within an inch of your life.\"\n\n\"He's worried about me.\"\n\n\"Humph!\"\n\nKim caught the flickering of Raeden's thoughts even though the mod was shielding. The mod agreed that his father was worried about him, but he didn't entirely trust the older man.\n\nKim let out a small sigh and Raeden's thoughts immediately turned solicitous. \"I'm sorry little one,\" Raeden said. \"I'm worried about you too.\" He kissed Kim lightly on his temple and Kim let go of just a little bit more of his anxiety.\n\n*****\n\n\"I will take care of you. You don't need to do anything,\" Raeden said as they entered their shared unit.\n\nKim smiled tiredly at him. His headache had lessened to a dull throb but he was weary in a way he'd never been before. Physically he was fine. Even though he'd been confined to a tiny apartment for four days, his father had begun teaching him aikido. That had provided him an opportunity to use his muscles but they hadn't spent so much time training that he was sore. He was also sleep-deprived, but what had really exhausted him had been the unending hours of focus needed to learn telepathic self-defense. Holding shields against a determined attack was incredibly taxing. After a while it had become downright painful. And when his father did manage to break in, it was sometimes excruciating.\n\nKim stumbled to a halt in the middle of the main room, looking around blearily. Evidence of Raeden's habitation showed throughout. The couch pillows were in disarray and dirty dishes littered the coffee table. Shoes, socks and a shirt were strewn about.\n\n\"Sorry about the mess,\" Raeden said as he headed toward the Christmas tree which was still standing in the corner. \"I wasn't expecting to bring you home just yet.\"\n\nHome. Kim still couldn't believe this was his new life.\n\nRaeden flipped a switch at the base of the tree and the lights sprang to life sending colors dancing across the room.\n\nKim stared at it, entranced by its beauty.\n\nRaeden stepped behind him and gently massaged his shoulders. \"What do you want to do first? Eat, bathe, nap?\"\n\n\"Hmmm,\" Kim answered. The massage felt exquisite and his brain seemed to have already shut down.\n\n\"Are you hungry?\" Raeden tried a different tack.\n\n\"No,\" Kim answered with a sigh.\n\n\"Then I think a nice hot bubble bath should be first on the agenda.\"\n\nKim let himself be led into their sumptuous bathroom. He stood numbly on the soft rug as the big man ran the bath and poured a fragrant liquid into the water that frothed into a sea of white bubbles.\n\nRaeden lit a host of candles that were scattered on the tub's edge and the counter, then flipped off the glaring overhead light. Kim blinked at the sudden dimness and finally roused himself enough to sit down on the toilet seat and pull off his socks.\n\nRaeden helped him to his feet and gently removed his sweater and his T-shirt. Kim shuddered as the mod kissed along his bare collarbone. He was too tired to even think about sex, but as Raeden helped him out of his pants and underwear, his cock started to swell. It didn't need his brain engaged to perform.\n\nRaeden cupped his balls gently and murmured, \"Exquisite.\"\n\nA small moan escaped Kim's throat as heat raced through him, but Raeden led him to the tub and helped him settle. The groan that came out of Kim as he submerged himself in the heavenly warm water sounded erotic.\n\nRaeden smiled at him. \"You okay here for a few? I'll be right back.\"\n\nKim nodded dreamily and Raeden disappeared. Presently the strains of \"Dance of the Sugarplum Fairy,\" filled the room with soothing music. Soon Raeden returned with a couple of glasses of red wine and bowl of what looked like dried vegetables.\n\n\"Asian snacks,\" Raeden answered Kim's curious look. \"I found them last time I bought groceries. They're pretty good.\"\n\n\"Are you going to join me?\" Kim asked. The tub was big enough for both of them.\n\n\"Maybe next time. This time is all about you.\"\n\nKim was too tired to even argue.\n\nRaeden sat on a stool next to the tub. They drank wine and finished off the bowl of salty snacks while discussing Kim's training. They avoided the subject of Kim's father, but Kim could tell Raeden was still simmering.\n\nBy the time he finished his wine and Raeden had washed his hair and body, Kim felt like a well-cooked noodle. His headache was entirely gone and his eyelids were drooping.\n\nRaeden had stripped down to his boxers to help Kim wash, and now he reached down and plucked Kim out of the water as if he weighed nothing. Setting him on his feet on the rug, Raeden made short work of toweling him dry with a huge fluffy towel. Then he whisked him off to bed.\n\nKim languidly allowed Raeden to position him on his stomach on the bed, but when the big man knelt over his thighs with a jar of cream in his hand, alarm shot through him and he stiffened into a board.\n\n\"Oh sweetheart...\" Raeden spoke softly into his ear and then kissed the side of his neck and his shoulder. \"Relax little one. This isn't about sex. You're much too tired to properly appreciate that right now.\"\n\nThen Raeden smeared cool cream across his back and began to massage his tense shoulders with practiced hands. Kim quickly gave up his concerns and melted into the mattress. In no time at all he fell asleep.\n\n*****\n\nRaeden stood in their bedroom doorway watching Kim sleep. The tension around his eyes and furrowed brow had disappeared. He looked peaceful. Content.\n\nWhen Raeden thought about how stressed out, unhappy, and exhausted he'd been when he'd arrived at Kim's old unit in Zonei, he became furious all over again. He knew that Kim's father was doing what he thought was necessary to protect Kim, but Raeden strongly disagreed with his methods. The older man was like a stone: completely unfazed by Kim's distress. And Kim was bending over backwards to please him. When his father said, \"jump,\" Kim asked, \"how high?\"\n\nRaeden sighed. He wasn't sure how to fix that problem. Kim needed training and there was no one else who could do it. Finding Kim's father had been a miracle. I'll visit more often and if Kim's health starts to deteriorate again, I'll intervene. I'll stay there if I have to. In fact, that's not a bad idea.\n\nHis mind made up, Raeden set his concerns aside. He had a lover to feed and care for. He walked over and sat down slowly on the edge of the bed. He hated to wake Kim, but he needed to eat, and he was pretty sure Kim would be upset if he let him sleep through New Year's Eve. It was already almost nine.\n\n\"Kim?\" he called gently, reaching over and brushing a lock of dark, silky hair off of his lover's brow.\n\n\"Mmmm?\" Kim stirred but didn't open his eyes.\n\nRaeden leaned over and pressed a gentle kiss to his lips. Graceful arms twined around his neck and when he pulled away slightly, Kim blinked at him with sleepy eyes.\n\n\"Good morning, lover,\" Raeden said.\n\nKim's eyes widened. \"Morning?\"\n\n\"No ... sorry. That was just an expression. It's almost nine though. I thought maybe you would want to get up for a few hours ... have something to eat?\"\n\n\"Mmmm ... yeah.\" Kim sat up slowly shaking his head. He was clearly still trying to throw off the vestiges of sleep.\n\nRaeden's gaze traveled down Kim's lean torso. His dusky nipples stood out in stark contrast to his pale skin. The blanket pooled around his narrow hips, just low enough for Raeden to catch an enticing glimpse of dark hair. The smell of Kim's sleep-warmed skin sent waves of desire crashing through him. A growl came from deep in his chest and he pushed Kim back onto the mattress and devoured his lips. One of hands snaked under the covers and grabbed his small tight butt, pulling him firmly against his own hips. Heat flared through him and he groaned with need. Kim was responded hungrily to his kiss, rocking his small pelvis against his own. He felt Kim's hard length under the covers, greedily seeking friction.\n\nHe whipped the offending covers away, but couldn't spare the time pull off his boxers before he was humping against Kim frantically. The thin fabric, wet now with precum, was hardly a barrier.\n\nKim wrapped his legs around Raeden's waist and met his quick thrusts. Whimpers of pleasure poured from his sweet lips, urging Raeden on. Oh, how Raeden wanted to be inside him ... to feel his tight heat on his shaft ... to spill his seed deep within his lover and claim him fully as his own. But there was no time now. Between the feel of his tiny lover writhing against him and the beautiful, desperate sounds he was making, Raeden was plunging toward orgasm like a runaway train.\n\n\"Kim!\" he cried out. \"Oh, Kim!\" He pushed against the younger man with bruising force.\n\nKim threw his head back and let out a wail as his body stiffened. Raeden felt wet heat splash across his stomach. The scent of his lover's spill lit him up like a flaming geyser and he let out a roar as his own orgasm took him.\n\nThen he was panting and groaning and Kim was shuddering in his arms. He stroked Kim's glossy hair and kissed him slowly and sensuously as they wound down.\n\nFinally, reluctantly relinquishing the kiss, he asked, \"Are you okay?\"\n\n\"Of course.\"\n\n\"I wasn't too rough?\" Raeden ran his fingers gently over the red mark on Kim's hip where one of his hands had gripped him.\n\n\"No, you were perfect. I loved it.\" Kim's eyes were dancing and Raeden let go of his worry.\n\n\"Are you awake now?\"\n\nKim laughed. \"I guess I am. I'm sticky too.\"\n\nJust then they heard a gentle but insistent chime coming from the kitchen. Raeden sat up. \"That's my cue to preheat the grill,\" he said.\n\n\"Grill?\" Kim seemed mystified.\n\n\"We're having grilled steaks for New Years. Proper caveman food.\" Raeden shucked his soiled boxers and tossed them into the laundry basket as he headed for the kitchen to turn off the alarm.\n\n*****\n\nKim smiled to himself as he wiped the evidence of his release off of his stomach with a warm washcloth. He felt much better than he had earlier. All traces of his headache were gone. He was still groggy from his long nap, feeling lethargic and relaxed.\n\nRaeden joined him presently and, rewarming the washcloth, he cleaned the mod's stomach and genitals as well.\n\n\"You know, it's not going to do much good to clean me up. I'm just going to get sticky again,\" Raeden said with a husky voice as Kim lingered over his swelling cock.\n\n\"Maybe next time I'll clean you up with my tongue,\" Kim teased. Raeden's cock surged in his hands. His own cock started to mimic it and Kim pulled away. \"I think maybe we should eat first, though.\" Now that he was awake, he was starving.\n\nDeciding he would sacrifice style for comfort, Kim pulled on a pair of yoga pants and a long sleeved tee.\n\nRaeden, watching him, let out an appreciative growl. \"No underwear. I like that.\" He followed suit by slipping on a clean pair of boxers and a tee-shirt with a picture of a chameleon on it.\n\nOnce in the living room, Raeden headed for the glass door to the balcony. Kim's eyes widened as he swung it open and stepped outside into the swirling snow. The mod tromped across the icy surface to the far corner and began turning knobs on what Kim guessed was a large black grill. He'd never actually seen one in person, but he'd read about them. Curious, Kim lingered in the doorway and watched.\n\nIt wasn't long before Raeden returned to him, wiping the snow off his bare feet on the little rug just inside the door. Kim shivered with the cold. \"I can't believe you went out there barefoot.\"\n\nRaeden smiled at him. \"The cold doesn't bother me.\"\n\nKim went to stand in front of the fire, still shuddering from chill. Looking around he saw that Raeden had cleaned up. The place looked amazing, especially with the Christmas tree lights casting pastel colors around the room. Classical Christmas music still played in the background.\n\n\"What else is for dinner? What can I do to help?\" Kim asked.\n\n\"You can stand there and look beautiful,\" Raeden said. \"I've got everything under control. The steaks are ready to go on the grill, a macaroni and cheese casserole is in the oven and I've made a fresh salad. I also got crab cocktail for us, because it's New Years, and we need special food on New Years. And there is cherry cheesecake for dessert. I bought the cheesecake from Tivoli's\u2014you'll love it.\"\n\nKim was overwhelmed. \"I'm sure I will. You made mac and cheese?\" It was one of his favorites.\n\n\"Yep. Found a recipe on the infonet. It wasn't too hard. Hope it comes out okay.\"\n\n\"It's not from a box?\" Kim teased.\n\n\"Not for New Years. Not for you. You're special. You deserve special.\"\n\nKim was going to deny that he was special, but he caught the look in Raeden's eyes and it stopped him. Raeden was looking at him as if he'd hung the moon and created the stars with a single frosty breath. Maybe, for some extraordinary reason that escaped him, maybe he was special to Raeden. Chapter Twenty-Two\n\nRaeden's eyes hardly left Kim throughout dinner. Being separated from his mate for four days had been excruciating. Lyzel and he had not spent a single night apart since they had bonded. The sadness that swept through him at the thought of his lost mate was tempered with a warm feeling of relief. He wasn't alone anymore. Kim was not only his new bondmate, but a wonderful person as well. He admired his intelligence, his bravery, and his convictions. And he wallowed in Kim's attention like spoiled dog.\n\nHis beautiful lover's face glowed in the warm light from the fire. They were sitting once more on the rug in front of the hearth to eat; it just seemed so much more intimate than the dining room table. Raeden had spread a chenille blanket over the rug\u2014to protect from possible red wine spills, he had told Kim, but the blanket also played into his seduction plans. It was much softer than the rug.\n\nKim smiled at him and his heart leapt to his throat. Kim's dark eyes picked up a spark of light from the fire, appearing large and luminous. Raeden's gaze slid down to his mouth and fixated there, taking in the lovely curve of his lower lip, naturally pouty and sensuous.\n\nKim had long since finished eating and now Raeden pushed his own plate aside and stalked to his lover on hands and knees. Kim was only a few feet away and in no time Raeden was pushing him gently back onto the blanket, running kisses down the side of his neck.\n\nKim laughed delightedly and wrapped his slender arms around Raeden's neck. Raeden breathed deep of the scent of his bondmate: Kim's own slightly herbal scent was overlaid with the remnants of cherry-blossom-scented bubble bath and a hint of red wine. Raeden ran his tongue up the side of Kim's neck, tasting.\n\nThe younger man arched against him languidly.\n\nRaeden's lips found Kim's and he kissed him, slowly and sensuously. Kim responded with ardor and before long Raeden tangled a hand in Kim's hair, controlling the kiss, pressing harder. Kim parted his lips on a gasp and Raeden slipped his tongue in, relishing the taste and feel of his lover's mouth.\n\nKim made a needy noise that sent a shiver a desire through Raeden. The kiss deepened and Raeden's other hand, the one that wasn't tangled in Kim's hair, found its way to the edge of Kim's shirt, pushing the fabric up so he could run his fingers over Kim's smooth, warm skin. His lover shuddered under his touch, fueling his desire.\n\nReluctantly he pulled his mouth away from Kim's and his fingers out of Kim's hair. Dark eyes met his, full of passion and need. Kim lunged up, trying to regain contact with his mouth. Raeden laughed and moved back, both hands now on the hem of Kim's shirt.\n\n\"Can I take this off? Will you be warm enough?\" he asked.\n\nIn answer, Kim sat up and helped him, and then Raeden was staring down at the expanse of Kim's bare chest. The skin around his nipples pebbled and the nubs grew hard and pointy.\n\n\"Are you sure you're warm enough?\" Raeden was surprised he still had the wherewithal to ask the question. His mind was melting into a pool of lust.\n\nKim didn't answer. Instead he tugged on Raeden's tight tee shirt. \"You too.\"\n\nRaeden stripped off his shirt and tossed it aside, his eyes still drinking in the sight of his lover. Stretched out on the dark blue fuzzy blanket, his glorious hair waves of raven around his head and his skin as pale as the snow that was starting to pile against the balcony door, Kim was a picture to behold. Raeden could smell his arousal and a glance down showed that his cock was fully engorged, clearly outlined against the tight yoga pants.\n\nRaeden leaned over and nuzzled the hard length through the cloth, breathing deep of the sweet muskiness. His breath caught in his throat and he let it out in a long, hot stream over the head of Kim's cock.\n\nKim whimpered, his hips shifting restlessly. Raeden smelled the sharp scent of his precum seconds before it dampened the front of Kim's pants. All of his plans for a slow, sweet seduction disintegrated under the force of his need. In spite of having orgasmed only an hour earlier, he was suddenly desperate to mate. He tore down the yoga pants, growling in frustration when they caught on Kim's feet.\n\nKim was making fervid, whimpering noises himself, fighting to help get the pants off, running his tiny hands over the hard muscles of Raeden's chest. His cock bobbed as his slender hips undulated.\n\nThe pants finally off, Raeden grasped Kim's hips in both hands and stilled them. Staring at his lover's face, he ran his tongue slowly from the base of Kim's balls all the way the to his leaking tip. Kim's mouth dropped open, panting. His eyes glazed over.\n\nAs Raeden swirled his tongue around the head of Kim's cock, his lover's head dropped back and his hips pushed against Raeden's hold.",
        "\"Rae\u2014Raeden!\" Kim's cry was high-pitched and needy.\n\nRaeden smiled around Kim's cock as he accepted it deep into the back of this throat. Salty bitterness spread across his tongue. He lapped at the slit and was rewarded with another spurt of precum. Raeden let out a low groan, then set up a fast rhythm, going deep each time until Kim was shaking underneath him, fighting to get his hips free of Raeden's firm hands and so he could fully participate in plunging his cock deep into Raeden's throat. Not wanting him to come just yet, Raeden gave a last lick to the head of Kim's cock and nuzzled lower, breathing deep of the musky scent of Kim's balls and taint. Tenderly he pulled the balls into his mouth, sucking on the tender orbs as Kim serenaded him with the most exquisite whimpers. He took his time, savoring the delicacies.\n\nThen he pulled Kim's hips up off the blanket and slid his tongue lower, across his taint, and then further to the puckered opening. He lapped at it and Kim came unglued. His hips strained against Raeden's strong hands as he tried to thrash wildly. A cacophony of keening mewls poured out of his mouth, rising in pitch as Raeden breached him gently with his tongue.\n\nRaeden fucked the fluttering opening slowly, letting his tongue lengthen and fatten as Kim's muscles relaxed and let him in. Eventually his tongue was long enough to find that special spot, and he knew when he touched it because Kim jerked convulsively and cried out. He flicked his tongue back and forth across it and Kim's body stiffened and began to shudder. His beautiful, frantic noises filled the room and Kim reached down and grabbed his cock, starting to pull himself off.\n\nRaeden stilled his hand. \"No, love,\" he whispered. \"That's mine.\"\n\nHe'd of course had to pull out of Kim to talk, and Kim gasped for breath, his head thrown back and his face etched with ecstasy. His body was tense with need, so very close to orgasm. His cock had made clear, sticky trails all over his stomach.\n\n\"Please, oh please,\" Kim begged.\n\nSomething about his lover's tone lit an inferno within Raeden. With a growl he lurched up and tore off his damp boxers. His cock bounced before him, swollen and blood red, as he leaned down to give Kim a scorching kiss. His body began to tremble with need.\n\nSo close, so close. I'm about to claim my mate. It's going to happen.\n\nHis cock nudged gently against Kim's opening and Kim whimpered again. This time, though, there was a different quality to the sound. Raeden caught a ripple of terror coming from Kim even though he could tell Kim was trying to hide it.\n\nHe paused, taking iron control of himself. Looking down into Kim's eyes, said, \"I want you Kim, more than I've ever wanted anything in my life.\"\n\nHe felt a flare of guilt in Kim, which had not been his intention at all. \"I want you too,\" Kim whispered, \"but I'm afraid.\"\n\n\"Trust me, Kim. I would never hurt you.\"\n\n\"I ... I do trust you. But you're so big and I'm so small. I don't see how it could possibly ... not hurt.\"\n\n\"Ah, love. You forget that I'm not entirely human.\"\n\nKim's eyes widened as he looked up at Raeden. He wanted to trust him, Raeden could tell, but he couldn't let go of his fear.\n\n\"How do you think I managed to tongue fuck you so thoroughly? I have the ability to make my tongue longer. I also have the ability to make my dick smaller.\"\n\nKim blinked at him, slowly comprehending.\n\n\"This...\" Raeden waved at his huge cock. \"This is just for show.\" It wasn't really. Raeden was naturally big, but he didn't have to be.\n\n\"You can shrink yourself?\" Kim asked, obviously having a bit of trouble with the concept.\n\nRaeden focused for a second, pulling his flesh back into himself, making his cock as small as it could go until it was short and stubby. \"What do you think? Talk about a pencil dick.\" Raeden smiled as he looked down at himself. His cock still leaked precum and was hard, but it was about the size of Kim's thumb.\n\nKim looked down at him burst into laughter. Raeden couldn't help but laugh with him. The tiny cock looked ridiculous on his big frame, but he didn't mind. His lover was happy and no longer afraid.\n\n*****\n\nTears flowed from Kim's eyes and he fought for breath. When he finally had enough control over himself to speak, he gasped out, \"Oh my God, Rae!\" Then he was taken by another bout of uncontrollable laughter.\n\nRaeden's cock looked miniscule, dwarfed by his large, low slung balls. It was still beautiful, just ... tiny\u2014much smaller than Kim's own cock, which had started to soften with the distraction of hilarity.\n\n\"I'm sorry. I don't mean to laugh at you.\" Kim paused to chuckle a bit more. \"It's just that it looks so unreal. Does it hurt to do that?\"\n\n\"No, not at all.\" Raeden smiled at him and Kim felt his amusement.\n\n\"I don't think you need to go quite that small. I ... I can probably handle a bit more.\"\n\n\"Whatever you want Kim,\" Raeden murmured, starting to kiss along Kim's jawline.\n\n\"Does it...?\" Kim paused, afraid of Raeden's answer. \"Does it still feel okay to have sex when it's so small?\"\n\n\"Oh yes. It feels amazing no matter what size I am.\" Raeden was now running his tongue along Kim's collarbone. Then without warning he swooped down and nipped one of Kim's nipples.\n\nKim cried out as a burst of heat tore through him. Raeden licked the abused nub, then sucked and nibbled on it. Kim erection burgeoned once more into full hardness.\n\n\"I want you, Kim,\" Raeden rumbled. \"I want to be in you. I want to fuck you hard and fast. I want to fill you with my seed.\"\n\nKim's fear had entirely disappeared in the face of Raeden's wondrous abilities, and his lover's low growly voice as much as his inflammatory words stoked Kim's desire to new heights. \"Yes, oh yes,\" he begged.\n\n\"I'm going to pound into you ... claim you. Make you mine. Make you feel so good. Make you come so hard.\"\n\nKim's begging dissolved into whimpers as Raeden pulled Kim's hips up and arranged his legs over his massive arms. Raeden's cock, still small, but hard and leaking, nudged his entrance.\n\nKim could feel Raeden's barely controlled need. He was shocked that the big mod had the ability to pause and look him in the eye and say, \"Tell me you want this, Kim. Tell me to make you mine.\"\n\n\"Yes!\" Kim gasped out. \"Yes, please, please ... Raeden make me yours. Now. Please!\"\n\nRaeden must have heard the desperation in Kim's voice or maybe he felt the insane craving Kim was broadcasting, because he pushed in, not quickly, but steadily. Kim felt a stretch, not quite a burn, and then Raeden was past the ring of muscle and sliding further in. The summer sky eyes never left his own and the tenderness emanating from him caused an ache in Kim's chest.\n\nYou're okay? Raeden's question came into his head. He knew that Raeden knew the answer to that already. As Raeden rocked his hips gently, his cock filled Kim's channel perfectly, and Kim's mind exploded in bliss.\n\n\"Oh, yes! Oh, please!\" Kim sang out and he slammed his hips up to meet Raeden's tentative thrusts. \"Fuck me. Oh, fuck me!\"\n\nRaeden let out a long groan and Kim felt his mind go white with blinding passion. Then Raeden was pounding into him, his need catching Kim and hurling him along with the raging torrent. He felt Raeden's cock swell and lengthen and it began to hit his prostate with every frenzied stroke. He heard himself babbling incoherently. Then, as if a damn broke, a huge cascade of ecstasy washed over him, tumbling him over and over, drowning him with its power and ferocity.\n\nHe was vaguely aware of Raeden's cries joining with his own, loud and impassioned. Somebody's balls turned themselves inside out and he wasn't sure if the sensation was his own or Raeden's or maybe both of theirs. His screams turned to whimpers and his body shuddered and shook with the last vestiges of delirium. Raeden collapsed on top of him but not crushing him. Then Raeden grabbed him and shifted and suddenly he was lying on top of Raeden, the big man's cock still buried and throbbing in his sated hole.\n\nHe became aware of the sharp crack of explosions. He had thought they were part of his orgasm but now realized they were coming from outside.\n\n\"Fireworks,\" he mumbled. \"It must be midnight.\"\n\n\"Happy New Years, love,\" Raeden whispered in his ear.\n\nKim let out another soft whimper and his mind shut down completely.\n\n*****\n\nKim became aware of a sensation on his head: a slow, repeated, gentle tug on his hair. He was lying on something hard and warm, that smelled ... like Raeden after sex. His front was toasty where he lay against the hot mod, but his back was cool. He shifted his hips slightly and realized Raeden's cock was no longer in him, but he could feel a bit of wetness leaking from down his thigh. He let out a contented sigh.\n\nYou okay? Raeden asked.\n\nKim blinked his eyes open and shifted his head, peering up at Raeden. The dim light from the tree cast deep shadows across his face, making the planes of Raeden's cheekbones and his square jaw seem all the more masculine. His eyes, robbed of their wonderous color by the gloom, were on Kim with concern.\n\nI'm fine. I'm great, actually. Why wouldn't I be?\n\nJust making sure, little one. Kim could feel the affection in Raeden's words.\n\nI love you, Rae. It just slipped out. Kim had thought that he had fallen in love with Raeden, but hadn't planned to mention it just yet. His spike of anxiety was immediately relieved when he felt a jolt of happiness run through his lover.\n\nAnd I love you, Kim. I can't believe I found you.\n\nI believe I found you, Kim corrected teasingly.\n\nThat you did.\n\nAnd I'm never letting you go.\n\nI should hope not.\n\nBut you're not the most comfortable surface to sleep on. My God Rae, you're like a rock.\n\nRaeden chuckled and sat up, shifting Kim gently into his lap as he did so. I suppose we would be more comfortable in bed.\n\nKim stretched and then slowly climbed to his feet, relishing the pleasant ache in his backside.\n\nYou sure you're okay? Raeden had stood up as well and was looking him over with a gimlet eye.\n\nNever better. Will it always be so amazing ... making love to you?\n\nWell, I can't promise that, but yeah... Raeden cupped Kim's face in his big hand and swooped in for a long, lingering kiss. When he finally pulled away and smiled down into Kim's eyes. \"Yeah, it will always be amazing between us.\"\n\nKim sighed again happily. When had his life turned into a romance novel?\n\nSeeming reluctant to leave his side, Raeden eventually pulled away. He went over and turned off the tree lights, removing the warm glow and leaving the room bathed in the bluish lights of the city outside.\n\n\"We should take the tree down tomorrow,\" he said.\n\n\"Maybe the day after tomorrow.\" Kim wished they could keep the tree up year round. But then it wouldn't be special and drying needles were already littering the carpet.\n\nKim stepped to the sliding glass door, staring in wonder at the fresh inches of snow that blanketed the balcony and the railing. Flakes were still swirling down, like tiny dancers pirouetting and dipping their way across the sky. Kim shivered more from the coldness of the scene than from any real chill.\n\nA soft blanket settled over his shoulders and Raeden stepped up close behind him, pressing his warmth against Kim's back. He caught Kim's hands in his own, wrapping their fingers together and then folding their arms around Kim's chest.\n\nKim felt safe and protected and loved.\n\n\"It's beautiful, isn't it?\" Raeden spoke softly.\n\n\"It is,\" Kim agreed, leaning his head back against Raeden's solid chest. The lights of the city spread out before them, a multitude of jewels giving way to blackness at the edge of the lighted zones\u2014the rest of the city went on in utter darkness.\n\nAn ache welled up in Kim's chest at the unfairness of it all. He had always chaffed against the zones and the fact some had so much more than others. Now that he was one of the haves, the disparity and injustice seemed all the more wrong.\n\nWhat's wrong, Kim?\n\nNothing really. I mean nothing I can do anything about. I was just thinking of all those people in the lower zones with no warmth or light or hope.\n\nWho says you can't do anything about it?\n\nKim twisted to look at Raeden's face. The big man was staring pensively out the window at the sprawling city. It's a new year, Kim. We'll have to see what changes it brings. And what we can do to move things toward a better future for us all.\n\nIt was a nice sentiment. Kim couldn't imagine that anything he could do would make a bit of difference.\n\nA chime, almost like a bell, went off in Kim's head. Curious and slightly alarmed, Kim turned his attention to it.\n\nHello Kim. It was his father.\n\nHi Dad. Happy New Year.\n\nYes, I didn't want to bother you, but I felt you were still awake and wanted to wish you Happy New Year.\n\nThank you. I'm sorry I didn't spend it with you.\n\nNo you're not. Kim felt his dad's amusement.\n\nWell, I guess not. Kim felt himself blushing and wondered if his dad somehow knew how he'd spent his evening. But I'm really happy you're here, back in the city again.\n\nMe too. Now get some sleep. I'll see you tomorrow.\n\nGood night, Dad.\n\nKim felt the connection with his father end. That was nice. My Dad just connected\u2014um mentally\u2014to say Happy New Year, he told Raeden.\n\nYes, I felt him. I couldn't hear what he said, but I knew you were talking to him.\n\nKim smiled. \"I can't believe you found him after all this time. I can't believe I have my father back. I have a family again. You and me and him.\"\n\n\"Yes, family.\" Raeden agreed, hugging him more tightly and brushing a kiss across the side of his neck.\n\nKim stared once more out the window at the snow and the city and the darkness beyond. For the first time in many years he had hope. Hope that the future would hold something more than strife and struggle. He had found love and comfort. He'd found family.\n\nWith their steadfast support, he felt he could face anything.\n\nAnd, yes, maybe he could find a way to make a difference.\n\nThe End\n\nAuthor's Note: I hope you liked my story. Thanks for voting and commenting, but most of all, thanks for reading. You can find out what I'm up to by checking my blog (url is on my bio page).\n\nHope you all have a peaceful and joyous holiday and a kickass new year!\n\n--Jay Vaughn "
    ],
    "authorname": "roughboy18",
    "tags": [
        "shifter",
        "dystopia",
        "scifi",
        "love",
        "gay romance",
        "gay drama",
        "gay sci-fi",
        "gay science fiction",
        "sci-fi",
        "science fiction"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/christmas-in-zonei-pt-12"
}
{
    "title": "M Club Ch. 09",
    "pages": [
        "The first rule of M Club is: You don't talk about M Club. The second rule of M Club is: You don't talk about M Club. Third rule of M Club: No touching anyone but yourself. Fourth rule: No recording devices. Fifth rule: No clothing below the waist. Sixth rule: If this is your first time at M Club, you must masturbate. \n\n* * *\n\nAfter grinding out an extremely satisfying orgasm on her best friend's boyfriend's cock, still in boxers at the time, Lisa was worried that things would get awkward. With Sean's boxers in the laundry, he was now every bit as naked as she and they'd pretty well broken the dam of inhibitions regarding their interest in one another. So how were two horny, naked teens to get through the rest of the afternoon without giving in to temptation? An old re-run of Spies Like Us on television did the trick.\n\nThey lounged around on the couch, watching the movie and bullshitting with one another about school and college and everything but sex or what they'd just done. Sean didn't try to put any moves on her and, while she liked playing with him, that cooling off period was fine with her. If anything, their ability to just hang out naked like it was no big thing actually meant a lot to her. She couldn't imagine doing this with anyone else.\n\nAfter the movie ended and Three Amigos started up, Lisa's phone chimed. She was both relieved and disappointed to see it was from Denby. Relieved in that the bus was repaired and she and Andy would finally be on their way; disappointed that it meant an end, eventually, to her private time with Sean.\n\nLisa replied: Sounds good. Want us to order pizza?\n\nDenby fired back: Yes!! We're starving!\n\nSean chuckled when Lisa showed him the text. \"Guess that means I'll have to get dressed,\" he said. \"Unless you were planning on paying the pizza driver in the buff. Which would be kinda cool.\"\n\nLisa gave him a mock scowl. \"Not a chance, perv. You know there's a good chance anyone delivering here either goes to Highland High or recently graduated.\"\n\n\"Guess I'll take one for the team and get dressed then.\"\n\nLisa looked his long, lean body over, sprawled out on his end of the couch, and sighed. \"No rush.\"\n\nSean chuckled. \"Uh huh.\"\n\nLisa's phone chimed again: So, was Sean well entertained?\n\nLisa felt a nervous chill. Neither had mentioned anything about what happened this afternoon yet and she still wasn't entirely sure just what Denby had expected would happen between her and Sean. Or, for that matter, what she and Andy might have been up to.\n\n\"Den wants to know if you were entertained by me.\" She looked up, gauging his reaction.\n\nHe grinned sheepishly. \"Yeah, you could say that. Is she asking for details?\"\n\n\"Not yet.\" She typed a quick reply: Yes. Very much so.\n\nThe thirty seconds waiting for a reply were brutal. \n\nAwesome! No blue balls, then?\n\nLisa sighed in relief. So far, so good. She replied: Nope, he was purged of those unholy toxins. ;) What about Andy?\n\nDenby texted back: Oh, Andy's good. Purged as well, even. Can't guarantee what state he'll be in by the time we get to your place, though. :)\n\nLisa replied: Don't tease him too much. He still has to perform tonight!\n\n\"Everything good?\" Sean looked eager to know what was going between the girls.\n\n\"Yeah, I think so,\" she said, setting her phone back on the coffee table. \"We just confirmed that neither of you boys will be suffering from blue balls.\"\n\nSean considered that for a bit. \"Oh. Good.\"\n\nLisa could tell he wasn't quite sure what to make of that revelation coming from Denby regarding his friend. She hoped he wasn't going to get all bent out of shape about it.\n\nShe scooted to the middle of the couch, resting on her knees and taking him by the hand. \"Look, I'm not sure what they did. I'm guessing she just teased him a bit and they found somewhere quiet to jerk off. Probably a bit more tame than what we did.\"\n\n\"Yeah, probably.\" He squeezed her hand. \"Just, weird thinking about them together.\"\n\n\"I wouldn't worry too much about it. You okay with...us? What we did?\"\n\nSean nodded. \"Yeah. I probably shouldn't be, but I am. Not exactly being very fair to have different opinions on them and us, huh?\"\n\nLisa shrugged. \"It's how you feel. That's fair. Just need to be open about it. Talk to Den when you have a chance. I will, too.\"\n\n\"You two are a couple of pretty amazing girls, you know that?\"\n\nLisa crawled over his lap until she was straddling his legs, careful to stay back just far enough to avoid any chance of contact with his cock. He was soft at the moment, but that was likely to change at any moment. She leaned in to kiss him and he eagerly returned the gesture.\n\n\"Yeah, we are pretty awesome, aren't we?\"\n\nThey alternated between kissing on the lips and Sean licking and sucking on her nipples for a good ten or fifteen minutes. She was well aware of his erection poking up between the two of them and it took a considerably amount of self-restraint to resist sliding further forward to make contact with it. The longer they went, the hotter she got, and the worse the temptation became. Finally, she forced herself to disengage.\n\n\"Sorry, big guy,\" she said as she rose to her feet beside the couch. \"Hate to leave you, or me, like this, but we need to order dinner. And you need something left in the tank for the club tonight.\"\n\nSean sighed but smiled contentedly. \"If we must.\"\n\nShe left to go fetch his boxers from the dryer, wiggling her ass for his enjoyment as she went.\n\n* * *\n\nLisa retreated to the kitchen when the doorbell rang, unsure if it was the pizza or Lisa and Andy. As it turned out, it was both, and she could hear her friends talking about the hassle with the bus breakdown as they came through the living room. She took a deep breath, steeling herself for the final big reveal of her twenty-four-hour all-nude pledge. Granted, they'd all seen her naked and very exposed several times before, so it wasn't quite as intense as some of her fantasies in which she'd be the only one naked in front of a large group of strangers, but it was still outside her comfort zone.\n\n\"Yup, she wasn't kidding,\" Andy said, taking in her body with a big grin as he led the group into the kitchen.\n\n\"Nope,\" Lisa said, giving him a little pose rather than make any effort to hide that fact.\n\n\"That's awesome!\" He came over and gave her a quick hug that then lingered at arm length. She realized he was trying to determine if it was okay to kiss her or not. Given the ambiguous status of their relationship, that was a good question. She leaned forward and gave him a quick peck on the lips.\n\nAndy smiled and then turned to help get the pizzas opened up, proclaiming himself to be on the very brink of starvation.\n\nDenby gave Lisa a hug next and quickly whispered in her ear, \"I half expected Sean to be naked with you.\"\n\nLisa whispered back, \"Only because he wasn't going to pay for the pizza naked.\"\n\n\"Naughty girl.\" Denby pulled back and gave her friend a wink. \"Details, all of them, later.\"\n\n\"You too.\"\n\nLisa was relieved at the playful twinkle in her friend's eyes. At least things were good now, and it sounded like Den was more eager than afraid to hear what had transpired here over the afternoon. That conversation would probably have to wait until the boys were gone, though. Dinner was calling and the smell of pizza was making her own stomach rumble.\n\nShe quickly settled into the role of hostess, retrieving plates and glasses and taking drink orders. This was what she'd been waiting on since this morning when her clothes came off - being the only naked one of the four. She knew they were all stealing peeks, the boys in particular, and everything she did was with the goal of acting like this was perfectly normal. To their credit, her friends played their parts by not calling any extra attention to her.\n\nOver dinner, Andy largely dominated the conversation, relating the woes of their bus troubles as well as sharing the highlights and lowlights of the solo and ensemble contest they'd been at. The conversation never strayed to what either couple had been doing during those couple hours of delay, and everyone seemed okay with that. Lisa was pleased with the spirit of the group, their easy camaraderie, and almost lamented the inevitable change it would take when someone decided it was time to shift to their usual M Club activities.\n\n\"So, you've got the house all to yourself until tomorrow?\" Andy's question was rhetorical, since she'd already told them as much.\n\n\"Until noon, probably,\" she said, relating what her mom had said in a text not long ago when she'd done a quick check in.\n\n\"Woohoo! All-nighter at Lisa's!\"\n\nLisa rolled her eyes. \"You wish. Sorry, but you and Sean have to be out by eleven. My parents already have a no boys rule of sorts, but I could probably cover for you if they found out as long as you're not here too late. Can't guarantee one of the neighbors won't say something.\"\n\nSean looked concerned. \"We're not getting you in trouble, are we?\"\n\nLisa couldn't say for certain that she wouldn't get heat from her parents, but she'd been such a quiet and good girl throughout high school that she was pretty sure they'd give her the benefit of the doubt. \"Probably not. And don't sweat it. I wanted you all here. Where else are we going to be able to meet in a hot tub?\"\n\n\"Hot tub!\" Andy looked around as if he'd somehow missed it in the kitchen.\n\n\"Down boy,\" Denby said, swatting him on the arm.\n\n\"Finish eating the pizza first,\" Lisa said, sighing. \"I'd prefer it be dark out before we hit the tub. It's pretty concealed from the neighbors, but we should take every advantage we can get.\"\n\nAndy winked. \"You just like being the only one naked.\"\n\nLisa smiled coyly. \"My house. So? I didn't say you couldn't get naked.\"\n\n\"Pizza first,\" Andy said. \"Don't want to risk dripping hot grease on the goods.\"\n\nSean cringed.\n\nDenby, apparently done by the way she pushed her plate back, stood and motioned with her head for Lisa to follow. Den led the way through the hall and then down the stairs to the basement.\n\n\"Was just going to ask if I could throw my dress in your wash,\" Den said.\n\n\"Yeah, sure.\" Lisa said, flipping on the light in the unfinished workroom where the washer and dryer sat beside the shelves of canned goods and other odds and ends. \"Why, problem?\"\n\nDenby rolled her eyes and lifted up the hem of her dress, revealing her smooth legs and bare pussy. It took Lisa a moment to realize what Den was intending for her to see - several dried splotches on the fabric that stood out prominently.\n\n\"Andy?\" she asked, figuring it was a pretty safe guess.\n\n\"Yeah. He was a little, enthusiastic. And close.\"\n\n\"I'd say. Don't want Sean seeing that, then?\"\n\nLisa helped unzip Den and then took the dress after it came off. She checked the label and stuffed it into the washing machine.\n\n\"That, and I'd really rather my mom not find that. Can't guarantee I'd be able to get it into the wash before her without arousing suspicion.\"\n\n\"Gotcha.\" Lisa closed the door and started the machine. Den, meanwhile, had shucked her bra and set it atop the dryer.\n\n\"Thanks.\"\n\nLisa couldn't help checking out her best friend's body - on the petite side with small but perky breasts, still yet to fill into all her womanly curves. \n\nLisa's curiosity was getting the better of her and she had to ask. \"So, what did you two do? And where?\"\n\nDenby gave her a quick rundown of how she and Andy had snuck off to the library and masturbated together, all while talking dirty to one another. Lisa wasn't entirely surprised that they'd found somewhere quiet to get off together, but the talk about licking and sucking and fucking one another? Or doing it in the library where they didn't have all that much cover should someone walk in? The whole scenario both appealed to Lisa's exhibitionist streak while also making her jealous and slightly worried for her friend.\n\n\"Damn. Did you mean what you were saying to him?\"\n\nDenby gave a baffled shrug. \"I don't know. I mean, at that very moment in the heat of the action, I think I did. But was it real or just the hormones talking? I don't know what to think. I mean, I'm still in love with Sean and all, but this was something different. Andy was getting to me in a whole different way.\"\n\nLisa understood that part. The boys, the friends, were very different people. She found herself more attracted to Sean, unfortunate given that he was the one Denby was dating. A tiny part of her hoped that maybe Denby would switch up and then she could date Sean properly. Was that so bad if everyone ended up happy? She knew that was unlikely and certainly knew better than to even suggest it.\n\n\"You gonna tell Sean all the details?\"\n\nDenby looked visibly pained. \"I don't know. I mean, all we did was play with ourselves. Physically, I mean. But some of the shit we said felt a bit over the line, you know?\"\n\nLisa nodded in understanding. \"Maybe it wasn't such a good idea to play when the others weren't around.\"\n\nDen cocked an eyebrow. \"What? Did things get weird here, too?\"\n\nLisa felt her heart pounding a little heavier. This was the moment of truth, literally. How would her friend take it?\n\n\"I wouldn't say weird,\" she said. \"Rather, intense.\" She cringed, waiting for Denby's expression to darken. Instead, her friend smiled. \n\n\"Intense, huh? Spill.\"\n\nLisa leaned against the washer for support and explained how they'd just started by kissing, keeping it all \"nothing Denby and Sean wouldn't do together.\" When Denby urged her to continue, Lisa told about asking him to play with her tits and then how they'd gone to her bedroom and gotten him undressed down to his boxers.\n\nDenby interrupted. \"What was Sean like through all this? I mean, was he okay with it or was he uncomfortable. I really didn't want to mess him up.\"\n\nLisa shrugged. \"I think at first he was confused about what you wanted us to do. Hell, I talked with you on the phone and I still wasn't all that sure. Once we got going, though, our bodies kinda took over, I think.\"\n\nDenby breathed a sigh of relief. \"Good. I can't really explain why, but I wanted you two to play like that. I know you and Andy haven't quite hit it off and, well, I really wanted you to know what it felt like to get all hot and bothered with a boy. Beyond just our club stuff. And I've seen the difference between how you look at Andy and Sean.\"\n\nLisa was surprised to hear that and blushed furiously at her friend's insight. \"Well, mission accomplished then.\"\n\n\"What happened next?\"\n\nDenby, Lisa noted, had started rubbing one of her breasts under her crossed arms. Whether she was doing so unconsciously or surreptitiously, Lisa couldn't be certain. Clearly, though, the entire episode was in some way arousing to her friend.\n\n\"He kissed me on the bed for a while,\" Lisa continued. \"Then kissed and sucked my tits. You're right, too, he's very good at that.\"\n\n\"He is, isn't he?\"\n\n\"Then I had him lay on his back and I kissed my way up his legs. I think he was worried I'd kiss his junk.\"\n\n\"Did you?\" The way Denby asked, Lisa wondered if her friend hoped she had.\n\n\"No. Your rules, remember? I did tease, though, and then I kissed his tummy with my boobs rubbing up against him.\"\n\n\"Evil. I like it.\" Denby cupped her own breasts and wiggled them. \"Wish I had a pair of hangers like yours that I could do that with.\"\n\nLisa sighed. \"Don't even. Your tits are fine. Perfect.\"\n\nDenby smiled. \"Well, you would know. Firsthand knowledge and all.\"\n\nLisa rolled her eyes, clearly catching her friend's reference to their sleepover a few weeks back in which they'd taken turns playing with one another's breasts. The memory of that episode gave Lisa warm fuzzies more than she'd admit to her friend and the possibility of a repeat performance tonight after the boys had left most certainly had crossed her mind.\n\n\"Anyway,\" Lisa said emphatically, getting them back on track. \"I could tell he was getting a little too irritated, so I just crawled up and kissed him some more. And, well, I was kinda straddling him then.\"\n\n\"Just kinda?\" Denby said it like a parent asking a young child how the television \"kinda\" got broken.\n\nLisa blushed. \"Well, I was trying to reach his lips. So, yeah. And then I'm pressing into him and he's pressing into me.\"\n\nDenby grinned. \"You dry-humped my boyfriend!\"\n\nWell, she certainly wasn't pissed. Amused? Pleased? Probably both. Lisa still couldn't quite tell what to make of it.\n\n\"Yes. He was still in his boxers.\"\n\n\"And?\"\n\nLisa took a deep breath. \"And we kept at it until we both climaxed.\"\n\nDenby's eyes went wide, but her smile never left. \"Holy shit! Even I haven't gone that far with him!\"\n\nLisa looked at the floor and covered her face, even though she was pretty sure Denby wasn't in any way mad or even disappointed. \"I'm sorry.\"\n\n\"Don't be. That's awesome. I'm only disappointed that I wasn't here to see it.\"\n\nDenby stepped forward and took Lisa in her arms, hugging her. \"I asked you to entertain him, and you did. Wonderfully.\" Den waited until Lisa looked her in the eyes to continue. \"And dry-humping was definitely something we've done before. Sure, not that far, but close enough.\"\n\n\"I was worried we'd gone too far,\" Lisa said. \"Hell, even the kissing seemed, I don't know, too intimate?\" She certainly wasn't about to mention how she'd licked Sean's mess off his tummy.\n\n\"It's fine. I know it sounds weird, but I'm really fine with it. I love you both and I'm so happy that you two can share that and I can share it with both of you.\"\n\nLisa was painfully aware of her friend's body as it pressed into her own - soft, warm skin, breasts pressing into breasts, firm embrace. Denby licked her lips and then leaned in close and kissed Lisa full on the lips. That was, in a way, far more intimate a gesture than either had made toward the other during their breast play. Lisa was surprised, pleasantly, and kissed back. There was no tongue and it lasted only a second or two - more than a friendly peck, but less than the passionate exchange she'd shared with Sean earlier. It carried plenty of meaning and even more questions.\n\n\"We're cool?\" Denby asked, still holding her friend but giving a tiny bit of space.\n\n\"Yeah.\"\n\n\"Anything else happen after that?\"\n\nLisa shook her head. \"No, not really. Cleaned up, watched a movie. Didn't even touch each other until a short kissing session before we had to order the pizza.\"\n\nDenby sighed. \"Shame. You had all that time, too.\" She gave Lisa a big wink and then stepped back, only maintaining contact by holding hands.\n\n\"I won't say I didn't think about it,\" Lisa said, grinning. \"But I didn't want him unable to perform tonight.\"\n\n\"Speaking of the boys, we'd better get back up there. Don't want them getting any ideas about us. Well, none that they haven't had already.\"\n\nDenby pulled her friend toward the stairs.\n\n\"Why? Did you say anything to Sean about what we did that one time?\"\n\n\"No.\"\n\nLisa slowed on the steps, prompting Denby to turn. \"I might have kinda insinuated that something happened,\" Lisa said. \"Accidentally. No details.\"\n\nDenby sighed playfully. \"Well, that'll get his imagination going. Maybe we should throw some more fuel on the fire.\"\n\nLisa felt a thrum of nervous excitement at that comment as she followed her friend up the stairs.\n\n* * *\n\nAs the girls returned to the kitchen, Lisa saw both boys' eyes turn on the now nude Denby. She felt a brief pang of jealousy - she'd always envied Den's slimmer body and this was supposed to have been her day in the spotlight. Sean was quick to give Lisa a look and subtle nod. Perhaps she was reading more into it than he'd meant, but she thought he \"got it.\"\n\n\"Sorry,\" Den said to Lisa. \"Just realized I'm stepping on your moment.\"\n\nLisa appreciated her friend's awareness, even if a little late. \"Nah, it's cool. Looks like it's dark enough to hit the tub, anyway.\"",
        "\"Awesome!\" Andy said, pushing away from the kitchen table. \"First time naked in a hot tub with sexy girls.\"\n\nSean rolled his eyes and rose to follow as Lisa led the group out onto the back patio. The roof extended well out from the house, covering a concrete slab on which was the hot tub as well as several pieces of patio furniture. The hot tub was concealed from the neighbors by the house, a vine-covered trellis, and tall hedges along the opposite fence. It wasn't impossible for someone to see them, but they'd have to make a concerted effort. In the dark, Lisa knew she wouldn't be able to see anyone doing such spying, but she didn't think any of the neighbors were the sort who'd actually do that sort of thing. In the unlikely event they tried, Lisa figured they could keep the tub and patio lights off and it'd probably be impossible to see anything.\n\nThe boys began to strip while Lisa tapped at the tub's control panel to get the jets going. It was a free-standing unit big enough to fit four comfortably, maybe six if everyone didn't mind getting cozy. She didn't use it all that often, since it seemed awkward hanging out with her parents in it and it was too much hassle to use it on her own. She and Denby and a few other friends occasionally fired it up, but that had only happened a couple times.\n\n\"Does it have those cool underwater lights?\" Andy peered over the side, already naked and at half-staff.\n\n\"Yeah,\" Lisa said. \"But I thought I'd leave them off, just in case we got nosey neighbors.\"\n\n\"Boo. How are we gonna see what's going on under water?\"\n\n\"What, afraid we won't get to see you?\" Denby said, stepping up between Andy and Lisa while placing a hand on the boy's back. Lisa immediately noted the more comfortable, if innocent, contact between them.\n\n\"Oh, you'll get an eyeful,\" he said. \"We'll just have to call hand checks now. Can't trust you and Sean, after all.\"\n\n\"If anyone needs to keep his hands out of the tub...\" Sean gave Andy a scrutinizing look before breaking into a smile.\n\n\"Club rules,\" Andy said. \"Can't say I won't have my hands all over myself, though. That's kinda the point, right?\"\n\n\"Geez, horn dog,\" Lisa said. \"Into the water with you, even though you'd probably be better off with a cold shower.\"\n\n\"Cold shower for two?\" Andy climbed in, pausing to give Lisa a nudge on the shoulder. \"I might be game for that.\"\n\n\"Maybe we should just hose you down in the middle of the yard,\" Denby said, taking Sean's hand to steady herself as she climbed in.\n\nThe mood remained light, with everyone teasing everyone else, though most of it inevitably fell on Andy who ate up the attention and dished it back enthusiastically. Sean and Denby sat side by side along one side with his arm wrapped around her shoulder. Lisa was a little jealous of that closeness, wishing she could cuddle up with him again. \n\nAndy sat in a corner seat that had the most intense massage action while Lisa took the corner that was more of a reclined seat. Her feet inevitably ended up in Andy's lap and she didn't complain when he started massaging them. She could feel his erection graze against the outside of her foot, but he wasn't going out of his way to press the contact.\n\nAfter a good bit of relaxing and casual conversation, Andy was the one who brought things back around to masturbation. \"So, Lisa, is it true that hot tub jets are good for getting girls off?\"\n\nLisa felt herself blush, not that anyone could tell between the heat and the meager light slipping through the back window curtains.\n\n\"I haven't had much chance to try,\" she said, evasively.\n\n\"Not much, or not at all?\" Andy's hands, which had remained on her feet to this point, strayed further up her legs to mid-thigh.\n\n\"Okay, I did it once,\" she said. \"My parents had just gotten out of the tub when I was getting home one night. I was beat, so I decided to use the tub before they turned it off. I left the lights off, just like this, and it was a rare time I was in here alone. I was curious.\"\n\n\"Tell us more,\" Denby said.\n\nWell, this was a masturbation club. Lisa sighed and pressed on. \"I moved to a spot where I could get a stream on me and not look like I was doing anything too unusual. Believe me, I was terrified that my parents would come back out and catch me.\n\n\"Anyway, it felt good, but I could tell it wasn't going to get me off. It was just enough to get me wanting more. I figured my bottoms were getting in the way and I probably wasn't in the best position. I was scared as hell, but I slipped off my bottoms and then used a different jet that had a better angle. And, oh fuck, that was pretty crazy intense. I think I came in less than a minute.\"\n\n\"So it is true,\" Andy said, rubbing her leg just a bit higher. \"Nice.\"\n\n\"Yeah, it's true,\" she said. \"I just sat back for a bit afterward, but I didn't put my bottoms back on. I loved the feeling of being naked down there. Who knows, maybe that was the beginning of my fantasies about getting naked all the time. Anyway, I decided to give it another go a few minutes later. This time I pulled my top up - not all the way off, just in case someone came out. Big O number two. I've been so tempted to try it again since then, but I don't usually have opportunities to do it when someone isn't around or when it wouldn't be suspicious.\"\n\n\"Hence the party tonight?\" Sean said. \"Naked, unlimited masturbation opportunity, and with friends?\"\n\n\"Exactly,\" she said. \"With the family gone, I'd have probably been out here anyway, but I definitely had to try it with you guys.\"\n\nAndy patted her leg. \"Well, don't let us keep you waiting. Show us how it's done.\"\n\nLisa, on a whim, gave Andy a brief but very intentional rub along his hard cock with her foot before withdrawing it to sit upright. She could only imagine the signal that must have sent him and she wasn't sure herself what she meant by it. \n\n\"Scoot,\" she said, waving Andy aside as she moved into the middle of the tub to give him room. \"I like the jet height over there.\"\n\nAndy complied and Lisa wasn't at all surprised when he let his hand slide up her leg and brush ever so briefly across her mons. In the dark and at this angle, the other two were unlikely to have seen anything. It was nudging well into breaking one of the club rules, though.\n\nLisa assumed something of a squat on Andy's vacated seat and reached over the edge of the tub for a good grip. She wasn't exactly the most flexible of girls, but she was able to get her legs spread wide enough to get her clit to within about half a foot of the jet. That distance was more than adequate to deliver a powerful current right on her little nub and almost immediately that familiar tingle began to swell though her body.\n\n\"Oh, right there,\" she said for the benefit of the others. It wasn't exactly a riveting show, giving them her backside while all the action was underwater. For her, though, it was a welcome return to a novel and pleasurable experience.\n\nLisa found herself worked up enough that she was in no mood to drag this out. Once she got things lined up, she let the jet do its work and rode the steady thrum to a quick and powerful orgasm. As she reached that peak, the combination of heat from the tub and endorphins caused her vision and hearing to both nearly vanish in a haze, as if she was about to black out.\n\n\"Whoa!\" she said, feeling her grip slip off the side of the tub. She fell backward, only to be caught by Andy. It was comforting to be caught when on the brink like that.\n\n\"Good one?\" he asked.\n\n\"Almost too much,\" she said, taking a couple deep breaths of the cool evening air, willing her senses back to normal. \"Damn near blacked out there.\"\n\nDenby leaned forward. \"Really? Wow. Can't wait to try it.\"\n\n\"You sure?\" Sean looked slightly concerned at Lisa's wobbly state.\n\nDenby nudged Sean and gave him a quick kiss. \"Maybe you'll just have to hold me while I'm at it.\"\n\n\"Not that I'm objecting,\" Andy said, \"but doesn't that violate the no touching rule?\"\n\n\"You're touching me,\" Lisa said, not with any sort of accusation.\n\n\"Well, that was after you finished.\"\n\nLisa shrugged in his arms, which he still hadn't relinquished. She suspected he had no interest in moving his arms while her breasts were laying atop them.\n\n\"I kinda thought that rule just meant no touching the genitals,\" she said. \"You know, you have to masturbate yourself and not someone else.\"\n\nDenby said, \"No objections here. Anyone opposed to that clarification?\" No one said anything. \"Good. Sean, you get to hold me up.\"\n\n\"Yes ma'am,\" he said, standing up to give Denby room to figure out how she wanted to arrange herself. Lisa appreciated the move, since she got a nice look at his erect cock as it bounced at the water line.\n\nWhile Denby checked out a couple of the water jets on her side of the hot tub, Lisa gently extricated herself from Andy's arms, telling him she needed to cool off a bit. She took a seat on the edge of the tub, allowing the cool air to envelope her entire body. It was a pleasant shock, bringing her back down from the orgasm. After Denby was done, she figured she had better offer everyone some drinks lest they get dehydrated.\n\n\"Okay, think I'm gonna try this one,\" Denby said, pulling Sean over by the hand. \"I'll need to you hold me 'cuz I'm gonna try to hang my legs up over the edge.\"\n\n\"Oooh, upping the degree of difficulty,\" Andy said, hopping up on the edge beside Lisa. \"But how will she score on the execution?\"\n\n\"Zip it,\" Denby said, though clearly amused by the commentary.\n\nSean sat on a submerged bench and held Denby's back while she got her legs up over the edge of the hot tub. She directed him to move her a little closer and then she worked her way up and down until a gasp indicated she'd found a good spot.\n\n\"Oh god, that's good,\" she said, her breathing already becoming ragged. Lisa watched as her friend's breasts, held aloft just out of the water, heaved up and down as she was drawn into the sensation. Denby's crotch was just a bit below the surface, clearly working on one of the highest jets.\n\n\"I think she likes,\" Andy said, patting Lisa on the leg and letting his hand linger there.\n\n\"Oh, yeah, me likey,\" Denby said. \"If I had one of these at home, I wouldn't need a boyfriend.\"\n\nLisa chuckled. \"Uh, you have a boyfriend who's not allowed to do that yet.\"\n\n\"Oh, right.\" Denby opened her eyes long enough to wink at Sean. \"I suppose the hot tub isn't very good at playing with my tits, either. Hint, hint.\"\n\nSean glanced up at the other two, his eyes lingering on Lisa. She just shrugged and nodded toward Denby. Since they'd clarified the rules, she figured it shouldn't be a question.\n\nSean reached up with one hand and cupped one of Denby's breasts, massaging it with his entire hand before focusing in on a nipple with a circular motion of his thumb. Lisa realized that for all the things they'd done together, it was the first time she'd seen Sean touch Denby there. Strange world.\n\nDenby, eyes now firmly closed, looked to be in heaven. Her hips undulated slowly at the pressure of the jet while her chest frequently thrust up into Sean's hand. Sean, after working both breasts with his hand, shifted slightly so he could lean over her and take a nipple into his mouth. Lisa let out a sigh, remembering exactly what that mouth could do to a nipple and wishing she was on the receiving end of that treatment.\n\n\"Damn, that's hot,\" Andy said, summing up her own thoughts. The other two, if they heard, said nothing.\n\nLisa stood and slid back into the water, standing near the middle where she could get a closer view of the proceedings. Andy, unsurprisingly, joined her, standing just behind her and wrapping one arm around her side. She pressed back into his body to let him know she was okay with his presence. Her own move brought the edge of her hip into contact with his jutting erection.\n\nDenby was clearly enjoying herself, though it was a much slower build to orgasm for her. Sean kept working Den's breasts over with his lips and tongue, perhaps even adding a bit of showmanship for the benefit of the others. Perhaps reading Lisa's mind, Andy's hand slid up from her side until he cupped one of her breasts. She sighed at the contact and Andy took the cue to begin massaging. Again, it wasn't as skilled as Sean, but it was more than adequate to get her worked up in tandem with the show before her.\n\n\"Fuck, fuck, fuck, that's so good,\" Denby said, lost in her own little world. \"So close. Suck me harder.\"\n\nSean's attention went entirely to his girlfriend, taking a nipple in his mouth and sucking away like a champion lollypopper. Andy's attention, meanwhile, was focusing in on Lisa's nipple - alternating between rubbing in little circles and then lightly pinching it. He shifted slightly more behind her so he could take her other breast as well, mirroring each act. His cock poked into the small of her back before finally settling into the cleft of her butt cheeks, pointing toward the sky. He pressed gently into her and she couldn't help but push back. She knew this was more than incidental contact, certainly more than what was allowed by club rules, but in the heat of the moment she couldn't push Andy away.\n\nDenby's orgasm hit moments later. Rather than a vocal one, like Lisa often had, this was punctuated by a series of quick inhales as if she was drowning and in desperate search of air. After a good ten or fifteen seconds of that, she kicked away from the side of the hot tub and Sean gently brought her upright and in his arms.\n\n\"Yeah, I could get used to that,\" she said, letting her head flop on Sean's shoulder for support.\n\n\"Intense?\" Sean asked. \n\n\"You have no idea.\"\n\n\"Well, I hope the hot tub hasn't spoiled you before...you know.\"\n\nDenby wrapped a hand around Sean's neck and pulled him in for a long, tongue-lashing kiss. \"You have nothing to worry about from a hot tub,\" she said. \"Just, well, you might have to share me with one once in a while.\"\n\n\"I can live with that,\" Sean said, hugging her.\n\n\"Whoa, PDA alert!\" Denby finally noticed the others, particularly where Andy's arms were wrapped around her and playing with her breasts. Lisa blushed slightly, but figured Den was just giving her a playful ribbing, especially after what Sean had just done with her.\n\nLisa said, \"What can I say? You put on a good show.\"\n\n\"Too bad we couldn't have the lights on,\" Andy said. \n\nLisa gently extricated herself from Andy's arms and climbed over the side. \"I need a drink,\" she announced. \"Too easy to dehydrate in here. Anyone else want one?\"\n\nEveryone said yes and Denby mentioned she would offer to help if she thought she could actually stand right now.\n\n\"I'll help,\" Sean said, climbing out behind Lisa with his erection leading the way.\n\n\"Water,\" Denby told him. \"Big glass. Lots of ice.\"\n\nLisa gave herself a cursory toweling before going through the back door into the kitchen, tossing it to Sean as he followed. She had four of their largest cups out by the time he made it in. Without looking, she could feel his eyes roaming across her body.\n\n\"Looks like you're having fun,\" she said, taking a quick glance over her shoulder with a clear focus on his cock.\n\n\"As much as you, I suspect,\" he said. \"Andy was certainly giving you some hands-on attention.\"\n\n\"Jealous?\" She thrust her ass in his direction as she bent over to fetch ice from the freezer box. With her legs slightly parted, he likely could see everything. She half hoped he would come up behind her and press into her backside just like Andy had.\n\n\"A little,\" he said. \"Especially since I know how nice you feel.\"\n\n\"And I know how nice your lips feel.\" She handed Sean a cup full of ice and took an empty from him.\n\n\"Oh, so a little jealousy on your side, too?\"\n\n\"A little.\"\n\n\"Did you and Den talk about...you know?\"\n\nLisa glanced back and saw the nervousness in his expression. She hurried to put him at ease. \"Yes, I told her what we did. She was just bummed that she wasn't here to see it.\"\n\nSean's face contorted in bemused surprise. \"Seriously?\"\n\n\"Honest to god.\"\n\nLisa wiggled her ass as she took her time filling the last cup with ice. Sean must have finally gotten the hint as she felt him come up behind her and press his hips into her. As tall as he was, his cock began at her waist and went up from there, which was probably just as well. Had it brushed much lower, she'd have wanted to take it.\n\nShe rose slowly and let him wrap his arms around and pull her in tight. She turned her head enough to meet his lips in a hot, lingering kiss. He cupped her breasts and gave them a bit of playful attention that was entirely too brief.\n\n\"Better get back outside before they wonder what we're up to,\" he said, sounding as disappointed as she felt.\n\n\"Or before they start something?\" She raised an eyebrow at him.\n\nHe gave her a quizzical look. \"Why? Did she say what happened between them?\"\n\nLisa sighed and turned to top off the cups with water. \"She did, but it's probably best if you get the details from her. Don't worry, they didn't really do anything more than what we've already done in the club. Not much, anyway. Less than we did, that's for certain.\"\n\nSean considered that in silence before gathering up the cups and following her back outside. Den and Andy were both sitting on the edge of the tub, each safely on a different side. Andy was still sporting a partial erection, but clearly wasn't as aroused as he had been a few minutes earlier.\n\nEveryone eagerly chugged their waters and Lisa declared it was time for the guys to take a turn.\n\n\"I've tried a hot tub jet before,\" Andy said. \"Feels nice and all, but I don't think I'd ever be able to get completely off on one.\"\n\n\"That's okay,\" Denby said. \"We prefer a show we can watch, anyway.\"\n\n\"You boys gonna go together?\" Lisa said. \"Maybe you could race?\"\n\n\"Oh, Andy would win that one,\" Sean said, elbowing his friend. \"He's always been more competitive. And quicker.\"\n\n\"Hey now,\" Andy said. \"I can take it nice and slow when the occasion calls for it.\"\n\nThe girls laughed. Lisa briefly had an image of the guys jerking each other off, finding the idea extremely hot. She didn't dare bring it up, though, for fear of making them too self-conscious to perform, not to mention it was explicitly against the club rules.\n\n\"Okay, well, maybe you can both just go at the same time,\" Lisa said. \"No race, just a good show.\"\n\nThe boys shrugged and agreed.\n\n\"But, no shooting your stuff in the hot tub,\" she said. \"I read somewhere that it gets sticky and clings to your skin and weird stuff.\"\n\n\"Seriously?\" Andy looked dubious.\n\n\"What, you haven't jacked off in a bathtub before?\" Sean said. \"Especially bad if you get it in your short and curlies.\"\n\n\"Then maybe it's time you boys started grooming better,\" Denby said.\n\n\"Hey now, I'm taking care of things down there,\" Sean said, running his fingers through the well-trimmed patch over his cock. \"Not shaving like you girls, granted, but...\"\n\n\"Right, I get it,\" Andy said with a sigh. \"You think I'm too shaggy?\"\n\nLisa hadn't said anything to Andy, but his thick mass of sandy blonde pubes didn't look as nice to her as Sean's well-groomed patch. She figured her opinion didn't matter as long as she wasn't personally taking care of him down there.\n\n\"No,\" Den said, \"but it might look a bit tidier. And make you look even bigger than you already are.\"\n\nLisa thought it bold of Denby to compliment Andy's cock size right in front of her boyfriend. Not that Sean had anything to worry about in the length department. Still...\n\n\"I'll take it under advisement,\" Andy said, turning from Denby back to Lisa. \"So, if not in the tub, where do you want us finishing? Do we have to stand on the patio or out in the grass?\"\n\nLisa glanced at Denby and bit her bottom lip. Given the mood her friend was in, she didn't think her response likely to get her in trouble.",
        "\"Actually, I was going to suggest my tits.\" She soaked in the attention that evoked from everyone.\n\n\"Twist my arm, why don't'cha?\" Andy grinned and immediately shuffled toward the middle of the tub to get close to Lisa.\n\nLisa noted that Sean glanced Den's way for guidance. She didn't see how Denby responded, but Sean looked back to Lisa and smiled, stepping up beside his best friend.\n\n\"Guess I should get a little closer, huh?\" Lisa set her cup aside and slid down from the edge of the tub into the water. She had to kneel on a bench in order to make sure her breasts were above the water line but within reach of the boys. From this position, the they were less than a foot away and the two hard cocks were each pointed at one of her breasts. She was extremely turned on by the prospect of having both jerking with the intent of covering her.\n\nAs she settled into position, both boys began to stroke their cocks in earnest. Neither was going at a frantic pace, but Lisa recognized the build-up techniques each favored - Andy, to her left, with his short but thick cock used his entire fist while Sean, longer and thinner, used his thumb and two fingers to stroke while massaging his balls with the other hand.\n\nDenby had been watching quietly from the edge of the tub behind Lisa's shoulder, but as the action increased in intensity Lisa felt her friend slip into the water. Den pressed into Lisa's left side and wrapped a hand around her back until it slid down to her hip.\n\n\"Mind if I get a piece of this action?\"\n\nLisa was slightly disappointed not to get both boys to herself, but it would have been rude not to share. \"Oh, I suppose,\" she said in a mock pout.\n\nDen was on Lisa's left side, putting her in front of Andy. Lisa wondered if her friend had done that intentionally or simply hadn't wanted to try to work her way awkwardly around to the other side in front of her boyfriend. Regardless the reason, Lisa was perfectly content to be Sean's focus. Andy, taking the cue, adjusted his position so that his cock was pointed directly at Denby as she thrust her chest out for his benefit.\n\n\"Think you can hit a smaller target?\" Den teased Andy.\n\n\"Maybe I'll just aim for that big mouth of yours,\" he fired back.\n\nLisa looked up at Sean, alarmed by the suggestive nature of the others' words. If Sean was bothered, though, he didn't say anything. Rather, he met Lisa's eyes and gave her a quick eyebrow nod. Lisa, in turn, waggled her breasts at him.\n\nThe boys kept working toward their climaxes while few other words were spoken. Lisa played with her breasts to keep Sean's attention on his target. Den, similarly, played with her nipples - pulling and tweaking them repeatedly as much for her own gratification as Andy's arousal. The boys clearly enjoyed the show, even in the dark, and both worked hard to bring about quick finishes.\n\n\"Here it comes,\" Andy said, the first to reach his end.\n\n\"Right here, big guy,\" Denby said, thrusting her tits forward until they almost brushed the tip of his cock.\n\nLisa turned her attention from Sean long enough to watch Andy's stroking abruptly stop as a couple spurts of semen decorated Denby's chest and breasts. He groaned openly with the release, stroking himself several times afterward to work out the last dribbles.\n\n\"Nicely done,\" Denby said, looking down at the result.\n\n\"Indeed,\" Lisa said, turning back to Sean. \"Now, my turn. Give it to me again.\"\n\nShe had picked her words deliberately, bringing into the open what all but Andy had already known. What she didn't know was why she'd said it. Was she trying to make Andy jealous? Wiping away any secrets? Or trying to give Sean an ego boost? Maybe it was even an oblique shot at Denby, who'd already allowed Andy to cum on her twice today? Whatever it meant, she just really wanted Sean to spray her tits in front of the others.\n\nHer words might have been that little nudge he needed to get over the edge, because moments later Sean groaned and a thick rope of cum erupted and landed across one breast and immediately began to slide into her sweaty cleavage. A second shot took her other breast and the hand she used to hold up her targets. He squeezed another couple drops out and shook his cock until they fell onto her chest.\n\n\"Nice pearl necklace there,\" Denby said, smiling. She then glanced up at Andy as if sharing some inside joke.\n\n\"Thanks,\" Lisa said to Sean. She found she really enjoyed this position - on her knees and looking up at the tall boy. She could think of some other things she would like to do to him from this position.\n\n\"I think I like this target practice thing,\" he said, giving her a wink.\n\nDenby rose to her feet and pulled Lisa up by the hand to join her. \"Now, we still have a bit of clean up to attend to,\" she said. Then, in Lisa's ear, she whispered, \"Just go with this.\"\n\nLisa wondered what Den meant by that, but it was soon apparent when her friend leaned forward and dragged her tongue up Lisa's breast from nearly nipple to collar bone, clearing up half of Sean's deposit. Lisa was frozen, caught between shock and arousal at the intimate act. Den paused long enough to hold out her tongue, decorated in her boyfriend's seed, until everyone had gotten as best a look as they could in the dark, and then made a show of swallowing it.\n\n\"Waste not,\" she said demurely. \"I think there's a little left on the other side, though.\"\n\nLisa shook herself out of shock and nodded dumbly, turning slightly to give Den better access. Perhaps not incidentally, it gave the boys a better view as well. She could only imagine what was going through their minds right now.\n\nDen took her time cleaning up the other breast. She licked up and down several times, catching real and imaginary drops of semen. Then, intentionally or not, she ran her tongue over Lisa's hard nipple, causing Lisa to gasp involuntarily.\n\n\"Fuck, that's hot,\" Andy said, speaking what they likely all were thinking.\n\n\"All clean?\" Denby asked, grinning as she wiped her own lips and then sucked that finger clean.\n\nLisa couldn't tell in the dark, nor was she particularly worried about the state of her breasts. Rather, she was wondering what had prompted Denby to do this in front of the boys and what it meant going forward. She didn't mind Lisa touching or licking her breasts. If anything, it had been a recurring fantasy for a while now ever since they'd explored it at the sleepover a few weeks back. But now it was in the open and difficult to pass off as a simple experiment.\n\n\"I think so,\" Lisa managed.\n\nThere was a long, nervous pause as everyone just looked at one another. Denby, perhaps realizing she'd taken responsibility by nudging them into new territory, broke the silence.\n\n\"Well, I guess I should get cleaned up.\" \n\nShe turned slightly to head toward the side of the tub, but Lisa shot her hand out to grab Denby's. Denby paused, giving her a questioning yet hopeful look. Lisa could feel her own hand shaking, yet she knew what she had to do next. What she wanted to do. \n\n\"I got this,\" she said.\n\nIgnoring the boys, Lisa tucked her hair behind a shoulder and leaned forward. In the dark, she could scarcely make out any of Andy's cum on Denby's perky little breasts, especially amid the sheen of perspiration. She figured it didn't much matter where it was if she licked all over, so that's what she began to do. Long, slow licks with tongue flattened wide, she worked over first one and then the other breast. She then worked her way up through Den's modest cleavage. There was a distinct tang of Andy on Denby, mixed with a hint of salt and hot tub water - hardly a flavorful combination. The act, however, was extremely arousing in the exhibitionist sense. She knew all eyes were on her, just the way she liked it.\n\nShe knew she'd already taken far more time than Denby had with her, yet she was reluctant to end the show. Just for good measure, and perhaps to give her friend some grief for starting this, Lisa took a hard nipple into her mouth and began suckling it. Denby whimpered in response and Lisa kept it up just long enough to really get Den worked up before releasing and standing up.\n\n\"Wow,\" Sean said, breaking the tension like taking a pin to a balloon.\n\n\"No shit,\" Andy said.\n\n\"I think I'm almost ready to go another round already.\" Sean, to Lisa's surprise, wasn't joking - he was stroking his almost fully engorged member.\n\n\"Me too,\" Denby said, smiling in a dazed sort of way.\n\n\"Are you two...\" Andy gestured between the two girls. \"I mean, have you, or...you know?\"\n\n\"Lovers?\" Lisa jabbed the idea into Andy's adorable discombobulation.\n\n\"Er, yeah.\" Andy looked like a kid who'd just been told it was, indeed, Christmas morning.\n\nDenby jumped in. \"What, just because my promise to my mom only extends to boys you think I'd resort to taking advantage of my best friend that way?\"\n\nLisa knew Den was just messing with them, but that was also the first time her friend had mentioned anything about the deal she'd made with her mom being specific to boys. Was she making that bit up to really taunt them? If not, had their previous breast play and the shared kiss earlier in the basement been Den testing the waters of something more?\n\n\"It is? Just boys?\" Sean sounded as if he couldn't decide whether he was being messed with or not.\n\n\"She's been holding out on us, dude.\" Andy nudged Sean and then looked to Denby. \"And, yeah, I totally think you'd do that with Lisa.\"\n\n\"Perv,\" Denby said between giggles. \"Sorry to disappoint you, but there's almost nothing to tell.\"\n\n\"Almost.\" Sean let the word hang there and then glanced back to Lisa. She knew she'd hinted at something earlier and here he was getting an elusive bit of confirmation from his girlfriend. Oh, what his imagination must be churning through right now.\n\n\"Not yet, anyway,\" Denby said, throwing fuel on the fire. \"The night's young and I'm spending it here, after all. And we know what Lisa'll be wearing.\"\n\n\"Please, oh please, oh please let us stay,\" Andy said, clasping his hands and getting down on his knees in the bubbling water.\n\n\"Not a chance,\" Lisa said, joining Denby. \"You'd only get in the way. Besides, don't you have to work early tomorrow morning?\"\n\n\"I'll quit,\" he said. \"I'll call my manager right now and quit.\"\n\nDenby sighed and tapped Lisa on the arm. \"Boys. Always thinking with the wrong head.\"\n\n\"I don't have to work,\" Sean said, casting his best puppy eyes the girls' way.\n\n\"Sorry,\" Denby said. \"No boys at Lisa's overnight. You know she's already risking it by letting you two over for a bit at a decent hour.\"\n\n\"Video?\" Andy said, pouting.\n\n\"Nope,\" Denby said. \"You'll just have to use your imaginations.\"\n\nLisa wasn't sure if Denby was still just messing with them or if she really intended for them to play together when the boys were gone. If the latter, she was pretty sure she would go along with it. Girls hadn't ever been an attraction to her until she and Denby fooled around the one time. Since then, she'd been increasingly drawn to the idea of exploring things with her friend, though always with a bit of trepidation over what Den's feelings might be and how it could make things weird.\n\n\"I think we're gonna have to make sure the curtains are all closed,\" Lisa said.\n\n\"Agreed,\" said Denby. \"They sure do like perving on naked girls, don't they?\"\n\n\"Can't blame us when you two are so fucking sexy,\" Andy said.\n\n\"Might need to hose them down, too,\" Lisa said, noting that now both were sporting full on erections.\n\n\"Oh, I approve,\" Den said. \"Then can we kick them out and get the real party started?\"\n\n\"Definitely.\"\n\nAs much as Lisa enjoyed parading around naked in front of the boys, and playing with herself and watching them play in kind, she knew the rest of the evening would be terminally slow until they left and she could find out what Denby was really thinking. She so desperately hoped this wasn't just a long tease for the boys. If it was, then she was the one who was most going to suffer for it."
    ],
    "authorname": "WatchingCloud",
    "tags": [
        "masturbation",
        "hot tub",
        "pearl necklace",
        "mutual masturbation",
        "club",
        "cum shot",
        "jaccuzi",
        "party",
        "nude female",
        "exhibitionist"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/m-club-ch-09"
}
{
    "title": "I Married a Heptapod",
    "pages": [
        "<center>A Sweet Young Girl, a battle-hardened Space Marine, a meeting in a Club, and you all know the Story\u2026 </center>\n\n\n*\n\n\u00a9 2020 Chloe Tzang. All rights reserved. The author asserts a moral right to be identified as the author of this story, although she's really not sure she wants to admit to that. The following is a work of fiction. All characters are fictional. So far. Any resemblance to actual human persons or heptapod persons, living or dead, is coincidental. This work is and remains the property of the author. This story or any portion thereof may not be reproduced or used in any manner whatsoever without the express written permission of the author. If you see this story on any website other than Literotica, it's been stolen by someone whose social credit rating will tank, and the security robots will be coming for them. So don't. Just, don't.\n\nAnd that little note from Chloe at the start: This story's written for the Literotica 2020 Geek Day story event, and it's dedicated to the memory of David Robert Jones (8 January 1947 -- 10 January 2016), one of the greatest musicians of all time. Thanks for all the songs, David, as well as the inspiration for this story, and, well, inspiration comes from the strangest origins, and in this case it was listening to Ziggy Stardust, and my mind started wandering, as one's mind does when one is wondering what to write for a Geek Day story event, and, well, here you are. First-time romance with tentacles, and a handsome Marine. I figure that's Geeky enough. LOL.\n\nSo this story is a short (for me) little first-time romance. Only 42k words, around 12 Literotica pages. Is it a stroke story? Not really, which means, um, probably not, but it's got tentacles and sex, so what can one say? It is a story... A young, scarred, and rather na\u00efve but very beautiful Chinese girl, who is of course a virgin, although not that innocent, a battle-hardened space marine on an alien planet enjoying a little downtime, a chance meeting in a club, and love flourishes, as love often flourishes following the strangest of chance meetings..... so of course it's a first-time romance, and no one dies horribly (in the story, anyhow, so you're okay, Simon, you can breathe easy on this one).\n\nAnd next, music. There's two or three songs I use in here, and Ziggy Stardust is pretty obvious, but that's only the lyrics to set a little context for my thoughts right here at the start. The first within the story is the Motorhead cover of Heroes, the best cover (IMHO of course) of a classic Bowie song and in my mind, that's Ziggy's song, and the second is Casablanca, another old song, originally sung by Bertie Higgins way back in 1982, well before I was a twinkle in my Dad's eyes, and covered beautifully by Ennah, and her version is what I've been playing as I wrote this and put myself inside Stardust's head. I actually only came across \"Casablanca\" while I was writing this story, but it seemed to fit Stardust so beautifully that I had to use it, and to listen to Ennah's cover. It's a truly beautiful interpretation and worth going and listening on youtube. And lastly, Taylor Swift's \"Love Story,\" which I don't think needs too much explanation. It just fitted right in, and it's a song I love.\n\nStory Influences? Well, a lot of Robert Heinlein, for sure. \"The Moon is a Harsh Mistress,\" and \"The Star Beast\" are two, and if you've read Heinlein, you'll see bits and pieces here and there, and it was mostly ideas I took away from The Great One. David Drake, maybe a little of the mindset and downbeat atmosphere from one or two of the stories in Hammers Slammers series, and for sure the Spiders are from David Weber and Steve White's Starfire series (\"In Death Ground\" and \"The Shiva Option\"), but in this story, the Spiders are only part of the backdrop to the story. So shoot me, I like Science Fiction, guys. Actually, I love reading Science Fiction, and I wish I could write it better, but hey, practice... and anyhow, this is really far more of a \"First-Time\" Romance, just, set a little in the future, so, here it is, in \"First-Time\", right, Laurel? ...uh...Laurel?\n\nLOL\n\nAnd speaking now of practice, read on and enjoy, and I hope you like the music, and that you find my little story as entertaining to read as I did to write... Hugs to you all, and stay safe...Chloe\n\n<center>\"Ziggy played guitar, jamming good with Weird and Gilly,\n\nAnd the spiders from Mars. He played it left hand\n\nBut made it too far\n\nBecame the special man, then we were Ziggy's band\n\nNow Ziggy really sang, screwed up eyes and screwed down hairdo\n\nLike some cat from Japan, he could lick 'em by smiling\n\nHe could leave 'em to hang\n\n'Came on so loaded man, well hung and snow white tan.....\"</center>\n\n\"Ziggy Stardust\", by David Bowie\n\n<center>* * * * * *</center>\n\n\"Comrade Citizen Stardust Wong, please step to one side and await a security escort. Comrade Citizen Stardust Wong, please step to one side and await a security escort.\" The security robot at the pedestrian float-off spun towards me so fast I jumped six inches, which turned into two feet, because, well, Luna gravity. One sixth dirtside.\n\n\"What?\" I said, floating down slowly, looking around, and at least I didn't land on my face like a total new chum, because we'd been on Luna a while now and I could handle myself in low G. \"Me?\"\n\n\"Comrade Citizen Stardust Wong, please step to one side and await a security escort,\" the security robot repeated, lights strobing, and yeah, it was real obvious it was me now, and I was having one of those \"oh shit, what've they caught me out on\" moments. Not a \"what'd I do\" moment, coz there were a few of those that I hadn't been caught out on.\n\nYet.\n\nI figured one of them had caught up on me, and crap. Dad had the in with the Security Directorate here. He'd done a few favors for Security lately, so he had some guangxi there, and he'd get me off whatever it was they wanted me on, but he'd be upset with me, and I was gonna pay.\n\nGrounded. I was gonna be so grounded, and how could I explain that to Ziggy? He was shipping out in a few weeks, and I wanted all the time with him that I could get before that happened, because when he left, that was just going to tear me up, because who knew if he'd come back? I wasn't over-doing the drama on that one, either. Ziggy was a Space Marine, an elite Space Marine, a Spider-Killer, and I knew what he did, and the risks he took, and what his life expectancy was, and crap, if I was grounded now, that was just gonna kill me.\n\nAlready I was getting a wide berth. Other pedestrians who were leaving the high speed commuter belt down the center of the tunnel were skirting me like I was an undesirable element low on the social credit table, and, I mean, I was even in my school uniform, so it wasn't like I looked like was running with the JoeBoys or anything. Which I used to, sometimes, for kicks, but not now, coz Ziggy was as straight as they came, and he didn't approve of stuff like that. Although he didn't mind a good bar-fight now and then, but then, he was a Space Marine.\n\nEveryone knows there's nothing a Space Marine likes more than a good fight.\n\nWell, and a girl, which I guess was where I come in.\n\nMy uniform? School?\n\nHarrow International Girls School of New Beijing, and I'm not going to tell you what it costs my parents to send me there. I'd be embarrassed. So would they, because you're not supposed to be able to afford stuff like that on a Party Secretary's salary, although my Dad is the New Beijing Party Secretary, and let's just say, Dad used his position to \"help\" people that needed help, and they did him favors in return, and my Mom makes a bundle.\n\nGuangxi. Favors.\n\nIt's the oil that makes everything flow real fast in the Chinese Hegemony, and I knew a bit about guangxi myself, although in my case, it'd sort of backfired, although things had moved real fast, because I hadn't understood those little nuances around a girl doing favors for a guy who was married, and his wife had been a bit jacked with me. But that was sort of drifting away from where I was, which was eye to eye with a security robot that wanted me stationary. Which I was.\n\nI didn't try and skip out, even though I was sure there was a mistake, although I wasn't sure what the mistake was. I mean, if it'd been anything serious, the security robot would've zapped me on the spot, slung me in the cradle and carried me in, and I'd seen that happen. But I guess, if the robot knew I was Stardust Wong, they knew who my Dad was too, and my Dad'd be pretty jacked if Security zapped me.\n\nBut regardless, it'd zap me if I tried to run. They were programmed to do that, I knew. Everyone knew. So I wasn't going to try and skip. I'd seen someone try that once. New Beijing security robots were programmed on the side of overkill. Quite literally, and if you ran, well, sometimes very literally depending on what it was you were being picked up for. Otherwise they just zapped you with what felt like about five hundred million volts or something like that, that totally fried your nervous system, for, like, quite a while.\n\nHow did I know that?\n\nWell, that someone was me, so let's just say, experience.\n\nI'd been brought back to my parents' tunnel by the security robots a couple of times in the last couple of years. Mom and Dad hadn't been too happy with me, but really, that first time, it'd been not to long after we arrived in New Beijing, after things had quietened down from that mistake I'd made dirtside, and the heat was off me, and I'd only been making out in a dead-end service alley behind the restaurants up on Level Three, with this cute Second American Republic tourist guy who'd come up with his parents for a two week vacation, and wanted to get some closer experience with the yellow peril.\n\nHe'd taken me out to dinner, and then to a movie, and I'd sort of thought he deserved a kiss or two, because that dinner had been pretty expensive, and I'd never kissed a gweilo before, let alone a racist fascist oppressor of the working classes, one of the capitalist running dogs of the Second American Republic, which seemed pretty exciting at the time because it was my first date ever with a real love fascist, because you didn't see them too often back dirtside in New Shanghai, and okay, he'd undone my bra and he was heading for second base, and I wasn't trying to stop him, although he wasn't getting to third base and he sure wasn't getting close to a home run, and I wasn't going back to his hotel room with him like he'd asked me to, coz Public Security was pretty nasty about, you know, a girl being alone in a hotel room with a guy, if she wasn't married or at least engaged to him, and miscegenation with a white fascist capitalist running dog on top of that. That'd get a girl sent off for Moral Reeducation and let me just mention that would not be a good thing.\n\nSo nope. Not happening.\n\nBut like I said, it was pretty exciting.\n\nWhich was when the security robot floated around the corner and cornered us. That tourist guy, he got a warning, which was all tourists usually got. Me, I tried to run, because I'd heard about what Security did to girls who were compromised with fascists, and I'd had my own encounter with Public Security back dirtside, which we will get to, don't worry. Well, running, that was a mistake, because instead of a warning, which was all I would have gotten if I'd just not panicked and run, because I was a bit terrified of Public Security back then, let me tell you, I got zapped, and then carried home by the security robot with a warning and an infraction notice sealed around my ankle that totally tanked my social credit score for six months, until Mom got annoyed and hacked the system and got me back to normal.\n\nThe second time?\n\nNot too long ago, and let's just say this guy I met talked me in to going to a bar for a drink with him and okay, it was a bit silly of me to say yes, because I was old enough for what he had in mind, except that the Hegemony wasn't big on per-marital sex, like, maybe if you were engaged it was okay, and I was that old, but I wasn't old enough to go into a bar, not legally, and I was wearing my High School girls militia uniform, the Rose Klang militia one, with the pink short skirt and knee high white boots and cute little white beret that we wore for parades, because we were training for a parade in honor of the new Chairman's inauguration.\n\nMy Dad had taken a shuttle down to actual real Beijing for it, and yeah, my Dad was that important again now, and with the old Chairman already cremated, his pug-nosed dog of daughter didn't have half as much power as she did when she got poor old Zowie sent off out-system, and actually, the news said she was being investigated for corruption, and if the news said that, you knew it was a done deal and she was taking a fall, so I wasn't kind of stressed about her anymore, so I wasn't being quite as low-key as I would've been, coz I figured Dad was on the up and up again, and Security wouldn't dare arrest me for, like, something real minor. Not now.\n\nBetween being under the age limit for single girls in bars, which was, like, twenty or something ridiculous, and the facial recognition scans, security were at that bar before I drank more than half of that first drink, and that time they were real security, not robots, because that time they already knew who I was from the monitoring systems I guess, and you don't send security robots to arrest the New Beijing Party Secretary's daughter. Not when he's on the up and up again, coz Dad and the new Chairman were old buddies in the Party, they'd done each other more than a few favors back in the day, apparently, and it'd be a bad idea to jack off my Dad now, unless you wanted a posting to the mines on the Dark Side of the Moon.\n\nOr maybe Titan if Dad was in a really bad mood.\n\nWhich he would be, if I was arrested.\n\n\"Comrade Militia-Lieutenant Wong, we are here to escort you home.\" The patrolman stood at attention, not quite looking at my boobs, but I could tell he wanted to, and he was looking real nervous, because I guess he knew who my Dad was, all while his partner scanned the identification of the cute guy that'd picked me up, issuing him with an infraction, and it must've been bad because I heard his breath hiss, and he looked a bit sick. Oh well. Silly me. Maybe we should have gone for a milkshake, but he hadn't asked me how old I was, and it was too late now.\n\n\"Thank you, Patrolman Chang,\" I said, reading his nametag and giving in to the inevitable while I buttoned up my shirt, because it was undone down to, like, my navel, because I might have been a Militia-Lieutenant, but it was in the Schoolgirl's Militia, and we were a parade formation meant to look good, which I did of course, which is why I was a Lieutenant, because they wanted the best looking girls right up front on the parades, and our laser rifles were imitation ones, not even real.\n\nA bit like me being a Lieutenant in the Security Directorate. I'd really thought I was, but that hadn't been real either, and after that all came out, we were sent to... I mean, we moved up from dirtside to New Beijing. And yeah, that still hurt, that I'd been taken advantage of like that, because I'd really trusted old Zowie, and it hadn't been exactly fair that he'd fooled me like that, because I'd really tried my best to earn that exemption.\n\n\"Stardust!\" My Mom said, when she opened the hatch to our home tunnel. \"What have you done?\" She didn't say \"this time\", but she could see the two patrolman behind me, and they'd been very polite, and I was kind of really relieved they hadn't given me another infraction notice.\n\n\"Patrolman Chang and Patrolman Lee escorted me safely home after I was accosted by a pervert on my way home,\" I said, before either of them could say a word, turning to smile my thanks. \"Could you ask Dad to message their commanding officer and thank them for their diligence and attention to ensuring the safety of his daughter when she was placed in an alarmingly unsafe situation.\"\n\nOf course they already knew who my father was. If they hadn't, I'd have been in a Public Security cell, waiting for my Mom to come sign me out, and my social credit rating would've already been down the tubes. I'd rather they'd just ignored the alert that must've been sent, because that guy was cute, and I had intended, to, you know, have a little fun when he walked me home. Oh well.\n\n\"I certainly will, Stardust,\" my Mom said, smiling brightly. \"Patrolman Chang, Patrolman Lee, please expect a note of commendation from Party Secretary Wong to be attached to your personnel records. Your diligence to duty and your attention to ensuring the safety of our daughter is to be greatly commended. You have only to ask if you need any assistance with such things as myself or New Beijing Party Secretary Wong can help with.\" Guangxi. Favors. It's the oil that makes things flow.\n\nAs soon as they were gone, and the hatch had closed behind me, the Dragon Lady turned and positively hissed at me. \"Stardust Wong! What did you do!\"\n\n\"Me?\" I said, totally innocently. \"Nothing.\"\n\nWrong answer, and I knew that right away, and I kind of kicked myself for not making something up, or just telling her, but sort of making it low key, because my Mom already had her pers-com out, and her fingers flickered, and I was, like, oh shit! Because my Dad might have been the New Beijing Party Secretary, with guangxi out the eyeballs, but my Mom, she hadn't just majored in Computer Science. She'd gotten her PhD in about half the time it normally takes anyone else, and she, like, writes the textbooks on designing starship control systems and lectures at conferences and stuff, and she was lead solutions architect for China Spaceship Industry Corporation. She designed computer systems for the Chinese Hegemony Space Navy, and I was having one of those real oh shit moments, because firewalls and security just melted when she wanted in.\n\n\"Star! Dust! Wong!\"\n\nOh crap, she had the security monitoring system footage. I knew. Because she showed me before she deleted it from the system, and she gave me that kind of cold look while she showed me.\n\nHacking Public Security? Nobody should be able to do that, but yeah, my Mom could do that. She'd done it a few times to delete stuff on me. Without any access rights or userids or anything. She designed and wrote the software that designed and wrote the software that... and I knew she used to browse through the Second American Republic systems, and they were as protected as ours, because they were as paranoid about us as we were about them, and she looked through the Euro-Space systems every now and then, but she said they were all a bit behind, although they had some original ideas. She laughed when I told her that was hacking. To my Mom, it was like opening a book you downloaded from the library. You get the idea. She was really scary.\n\nThat footage?\n\nWell, I looked hot, I'm telling you, and I did actually, like, admire myself for a second. Sitting on a bar stool, and I'd sort of rolled the waistband of my skirt so my little pink militia skirt was a little pink militia micro-mini-skirt, and you could get a glimpse of those matching pink panties, and I'd unbuttoned my uniform shirt so you could see my bra. Well, you would have if I hadn't taken my bra off first, anyhow, and my shirt was unbuttoned to my navel, where it kind of met my skirt.\n\nSo what you got was a lot of boob, because my boobs were, well, generous. Let's just say they were generous, and in low gravity, because this was Luna, they didn't need any support at all, and leave it at that, and I liked it that guys looked. I always had, ever since they first started growing enough that guys looked, which was when I was in Junior High, back in New Shanghai. That no bra, shirt open to the navel; that was the fashionable look right now.",
        "Except, well, my Mom wasn't that big on me keeping up with the latest fashion trends, and I kind of knew what would happen if I even brought that up, so it was time to regroup.\n\n\"He was cute, Mom,\" I said, real defensively.\n\nWell, he had been. I hoped he'd been sensible enough to catch the first mag-rail to New Botany Bay or somewhere. Mom had a lot of guangxi herself, and China Spaceship Industry Corporation really needed her, so they'd pulled some favors of their own after that little mistake of mine, which is why I was still around, and we were here in New Bejing, and not in Tibet. Or Mars. As Mom and Dad had so kindly made clear to me when the shit hit the fan down dirtside.\n\nAnd, well, my Mom was upset, and it wasn't that cute guy's fault he'd liked my boobs, and I hadn't actually told him I wasn't old enough to legally be in a bar, although I was legally old enough to do the stuff I was sure he had in mind, even if we weren't going there and we weren't engaged. Yes, I was over eighteen. But my Mom wouldn't care about that, and unless he got out of town, I could see a long trip to somewhere remote and very cold in his immediate future.\n\n\"You, Stardust Wong, have no shame. You're grounded for a month!\" Okay, Mom wasn't that upset, he should be okay, and I could live with being grounded. I was used to it. \"And you have to think of your Dad's position, and stop behaving like a little slut! You really haven't learnt a thing, have you?\"\n\nOkay, Mom was mad.\n\n\"I'm not a slut,\" I said, really really defensively. \"I mean, what happened with...\"\n\n\"Do not ever mention that again, ever, Stardust,\" my Mom said, and now she looked like she was going to cry, and I did feel really bad about that. I mean, I'd been completely fooled myself, he'd really taken advantage of me, but his pug-nosed dog of a wife had blamed me, and his wife was the old Chairman's daughter, and all my Mom and Dad's guangxi had kept me alive, I guess, because she'd wanted me shot, but we'd had to move to Luna, which was, like total exile for my Mom, and totally humiliating for my Dad.\n\nWe won't even talk about how bad I'd felt. I mean, knowing someone wants you shot? Not just saying it. They really want you shot. Just because you were doing a few favors for their husband so he'd do a few favors for you. I still couldn't see what was wrong with that, and why she wanted me shot. I mean, she was a pug-nosed dog, she really was, and he couldn't get it up with her. He'd told me that, and anyhow, wanting me shot? That's so awful. And anyhow, I might have moved here from New Shanghai, but I wasn't a slut, despite what people here in New Beijing say about girls from New Shanghai.\n\nThey're just jealous cats.\n\nSo yeah, security robots. Familiar with.\n\nNo, of course I wasn't your typical New Beijing girl.\n\nAnd really, huh! Do I sound like one of those New Beijing cats?\n\nThe Chinese Hegemony has a reputation for being conservative. It's true, but I was from New Shanghai, over in Gold Mountain Province, on the eastern side of the Pacific, and New Shanghai, it's a lot more easy-going than over the other side of the Pacific Ocean, in Mainland China. Used to be part of the United States before they had that civil war a couple of hundred years ago. Chinese Hegemony stepped in to protect those of Chinese and Asian descent from the fascists, which of course meant we occupied Las Vegas too, because, you know, Chinese and Casinos, as well as Hawaii, and all those other lovely little resort islands all around the Pacific. It was ridiculous them being independent countries anyhow. They were so much better off being part of the Hegemony.\n\nWe took northern Mexico as well, because, well, easy, and Texas had oil, and we ended up signing a Treaty of Mutual Assistance with the Republic of Texas, and cutting a deal with the Second American Republic after some fighting, and by the time the whole thing was over, Gold Mountain Province was fairly large, and my grandparents were from what used to be San Francisco. Worked for me. I was Chinese. Proud of it, too. After all, it was our Space Navy that was doing most of the work defending Earth and our other planets from those horrible Spiders. They should all be grateful to us.\n\nThe Hegemony'd used different excuses when they'd occupied the old Philippines and Malaysia, and Singapore, and Australia, and everyone knew Laos and Burma and Cambodia and Mongolia and North Korea were more or less Chinese territories, and Siberia was bought and paid for as far as the Urals, Africa belonged to Chinese corporations and we didn't need to, like, rule it, because all we needed were the resources, not the people, they were just a nuisance, and Vietnam and South Korea and New Zealand existed on sufferance, probably because Chinese didn't like the way sheep smelt, and they didn't want an actual war with Vietnam, and the Vietnamese were smart enough to understand which way the cards were falling, and so were the South Koreans, and the Japanese were the Japanese, so we just left them alone as long as they behaved themselves and did what they were asked to do.\n\nAnyhow, New Shanghai.\n\nBack then, before you knew it, San Francisco was New Shanghai. My Grandmas and Granddads, and my Mom and Dad, they'd grown up under the Chinese Hegemony, Dad was pretty high up in the Party, and me, I was a New Shanghai girl through and through. Until Mom and Dad emigrated to the Moon, and we ended up in New Beijing. Which was because of me, as my Dad made sure he told me whenever I got into more trouble after we'd moved there.\n\n<center>* * *</center>\n\nSo he'd told me we were going to New Beijing, where he'd been appointed Party Secretary by the Chairman, and it was only a day or so after that dreadfully scary incident I just wanted to forget all about, and I was still bruised and aching everywhere, but the doctor had said nothing was actually broken and there were no permanent injuries. It didn't feel like it, let me tell you, even with the painkillers, and I didn't even notice that my Dad looked kind of grey and exhausted. I was too wrapped up in how bad I felt.\n\n\"What?\" I'd squealed, and then winced, because squealing hurt my ribs real bad. \"Why the Moon? It's... it's worse than Tibet... or... or ...''\n\nI couldn't actually think of anywhere worse, except maybe New Zealand, because, you know, sheep, or maybe Mars, but they were just starting to really open Mars up, and it was still dangerous, even after all the terraforming, and lets not even talk going out-system to one of the colony planets. I wasn't in to dangerous. Like I said, I was a New Shanghai girl, and we have a reputation to maintain. New Shanghai girls are smart, fashionable, and we enjoy men. Not brave though. We leave that to the guys. All of those applied to me. I started dating when I was old enough to appreciate boys, but I moved on to men real quickly.\n\nWell, one man, anyhow, and it turned out to be a lot more dangerous than I thought.\n\nThat nice Wentan Zhao, in my class, his dad was Chief of Security for Gold Mountain Province. His Dad, that was Security-General Zhao, he was always very friendly when I was dating Wentan, and I was at his house all the time because we were neighbors, and when I explained to Security-General Zhao one day how I was having problems with physics, and my Mom was really rather rude about my marks in maths and physics and science, he very kindly offered to tutor me.\n\nI started visiting him at his office after school, and actually I did learn a lot because he was a really good tutor, and my academic grades went up, and then he had that talk with the school about how good a student I was, and how my marks really were not commensurate with my aptitude, and my marks skyrocketed, which I was really happy about, and my Mom was really happy about my marks too, although she didn't know that Security-General Zhao had been to my school, and all the teachers were really nice to me after that, and spent a lot of extra time to help me, so that went really well, and when I told Security-General Zhao that, he was really happy too, and he called up my school to tell them that, and they were really happy too, because I was doing so well.\n\nOther things went well too, after quite a while, because I did get to know Security-General Zhao better and better, because of all the time we were spending together, and his secretary used to give me these really knowing smirks when I came in to see him, which was totally embarrassing, because we always left the door open, but I did decide that I did like men more than boys, and I did tell Security-General Zhao how scared I was of that compulsory draft into the military, because that was back when the fighting with the Spiders had really picked up, and it was all over the news.\n\nPeoples Security-General Zhao understood, and he was so reassuring, and he mentioned that if you were an officer in the Security Directorate, you weren't drafted into the military, because Security did have priority if they decided they did, and a Security-General could authorize the retention of a promising young officer, and he offered me a commission in the Security Directorate as a Third Lieutenant, and then a position as his Aide-de-Campe after I graduated from University, after I told him that one afternoon when he was, you know, tutoring me in physics while I sat beside him.\n\nOf course I believed him. That's how young and silly I was.\n\nNew Shanghai. There were still a few subversive and unreformed \"old American\" elements existing, even after a couple hundred years, which seemed weird to me, but not everyone was Chinese, and we did tolerate minorities as long as they assimilated and behaved, and knew their place, but not all of them did, and the Security Directorate needed informants in schools too, as well as everywhere else.\n\nCommission? Draft exemption? Security-Third-Lieutenant Stardust Wong? I liked that, and Peoples Security-General Zhao commissioned me himself, and of course, I took my new role seriously. So did Security-General Zhao, and we started to meet undercover, because he wanted me to have a uniform, and he asked for reports on subversive elements three times every week.\n\n\"It wouldn't do for me to be seen meeting with you at the office now, Third-Lieutenant Wong,\" Security-General Zhao said, drinking his tea in the caf\u00e9 in the hotel foyer as he slipped the room key across the table to me, and he was explaining why he wasn't wearing his uniform, and why we were meeting in a hotel room, and I should go up first, by myself, and wait for him. \"It might arouse suspicions.\"\n\nIt didn't arouse any suspicions in me, which just goes to show how silly a girl can be when she's after a draft exemption and a cushy number in security. I liked the Third Lieutenants uniform he'd brought along for me to try on, too.\n\nSo did he.\n\n\"You look gorgeous, Stardust,\" he'd said admiringly, after I came out from the bathroom.\n\nI'd never realized a Security Directorate uniform could look so, well, sexy. The skirt was so short and tight, and I'd never imagined I could look so hot in a uniform. The black leather G-string panties were hot too, and really tiny, and I did sort of half think it was kind of a weird uniform item, and the black lace bra was just gorgeous, and my boobs were \"generous\" enough that the bra looked really good on me. The black leather-lookalike shirt made from some kind of stretch material just clung, and as for the knee high black snake-skin boots, I just loved them, and so did Security-General Zhao. The little black beret just rounded the whole uniform off so beautifully.\n\nAnd then there was the draft exemption, because if you were in Security, and you had that exemption, you didn't get drafted, and I had my Third Lieutenant's Commission, written on this beautiful rice paper, and signed by Security-General Zhao himself. But it was the draft exemption that I'd really wanted, and I had that special exemption signed by Security-General Zhao too. I mean, the military was so dangerous, what with the ghastly alien Spider things we were fighting somewhere out there, and taking care of subversives and everything was easy by comparison, and safe, and the real problem was, I was really aware that I wasn't some nobody.\n\nI was the New Shanghai Party Secretary's daughter, and everyone expected me to do my duty, enlist, train, volunteer for the glorious People's National Liberation Space Navy, and go fight to liberate oppressed aliens from the capitalist yoke of the fascistic and speciesist Spiders. If they hadn't already been eaten, which, it was turning out, was what the Spiders did, no exceptions. The news clips had been awful. And I'd be expected to serve as an officer of course; that went without saying, which was even worse, because officers were expected to lead. From the front. Which meant all the guys following me would be watching my butt.\n\nAnd not to keep me out of trouble either.\n\nThat, and I'd be expected to look hot while I was leading from the front, for the embedded-media, because the workers needed inspiring role models, and that really crass and horrible Space Navy recruiter who'd come to our High School and sort of leered at me, and said I'd be really inspiring to serve under, he'd said my boobs would inspire guys to sign up just for the chance of seeing them, and the Space Marines, they'd follow a butt like mine to hell and back. I don't need to mention that he was a Space Marine.\n\nNo. Way. I didn't want guys like him following my butt.\n\nOr being inspired by my boobs. I'd had experience with that happening.\n\nAnd worse, those spiders ate people. I wasn't going off to fight them, and get eaten, and my boobs weren't there to inspire guys, and neither was my butt. Well, they were, but not to fight Spiders. So to say I'd been happy about that draft exemption was an understatement. So of course when Security General Zhao asked me to sit on his lap in that hotel room while we did all the paperwork, because we could get through all the signatures faster that way, I was happy to help him, because it did make sense that I was right there to sign when he needed my signature, and there was only one chair and no table in the hotel room, and I really wanted all that paperwork signed.\n\nAfterwards, after all the paperwork was taken care of, Security-General Zhao helped me adjust the fit of my uniform, which was actually rather exciting, and then we had a long talk about my future, and draft exemptions, and careers in Security, and how Security-General Zhao could help me, and how I could help Security-General Zhao even more after I finished University and began to work as his personal assistant, and we moved to the bed to continue talking, because he needed to adjust his uniform, and he said looking at me in my uniform inspired him, although by then it was only the boots and that black leather g-string that was left that were inspiring him, and he was very very inspired.\n\nHowever inspired he was, he wasn't inspiring me into letting him take my g-string off though, because I was a good girl, and I did understand I had to remain a virgin until marriage, or I'd totally bring shame on my family, and Security-General Zhao understood that too, when I explained why it was staying on, so he showed me how my family honor could remain satisfied while at the same time I could guarantee my draft exemption, and ensure some guangxi of my own, and it was very educational.\n\nFar more educational than I'd anticipated, and I was little surprised and startled.\n\nAfter I got over that surprise, I did like the taste though, although it was very big, and after a while my jaw ached, and right at the end he was a little rough, and it was hard to swallow it all, but I did my best because I really did value that exemption a lot, and I wanted to keep it, and he said I'd get a lot better with practice, and he didn't mind at all that I really had no idea what to do.\n\nSecurity-General Zhao had smiled, and he'd said that was what he liked most about Third-Lieutenants. Training them. I'd been totally relieved when he said he was going to really enjoy training me, because he was such a busy man, but it turned out he planned to have lots of time for me, and I was really grateful for that, too.\n\nThe next time we met undercover, after I got their early, because I didn't want him to waste any time waiting for me, and I'd been studying, and I knew officers were expected to be punctual, I didn't worry too much about the uniform, except for that little G-string of course, because I did have to think of the honor of the family, and how I needed not to bring shame down on my parents. I'd been studying online, on how to do that, and I had some ideas that I was eager to try, and I knew Security-General Zhao was an excellent tutor, so as soon as I was in our hotel room, I undressed and took a shower, and I was already in bed waiting to guarantee some more guangxi of my own when Security-General Zhao arrived, and he was very very pleased, and he really enjoyed training me, and I'd decided I liked this kind of training a lot.\n\nSo we had a good thing going there, at least up until the shit hit the fan. We'd sort of settled into a routine, mostly a hotel room, sometimes his office, and my training went really well, and he was very pleased with me, and neither of us mentioned subversives any more, which was a relief, because I didn't think anyone I knew actually was.\n\nI did mention earlier that we were neighbors, so sometimes we met at his house, because it was so close to mine, like, next door, which turned out to be a big mistake. He did like me to dress up for him, and that last time we met, I was sort of mostly out of that uniform he'd bought me, which was a bit small by then, because I was growing fast, which didn't matter because the only place I wore it was in his bedroom, and we were having fun, and really, all I was wearing were the boots by then. The rest of my uniform, including my G-string, was gone, because he'd promised not to accidentally do anything that would bring shame on my family, so I'd been letting him take it off me for a while by then, and my uniform was all over the room, and so was his.\n\n\"Zowie....ohhhhh... ohhhhh Zowie,\" I moaned, stroking his cock, which was big and hard, rather frantically, and I was bouncing around on his face, because he really knew what to do with his mouth.\n\nHe was doing it, to, and using his tongue, which I hoped wouldn't bring shame and dishonor down on my family because he was trying to do things with it that might. Oh my god, his tongue, and of course it was okay, because I told myself that I was still a virgin if it was only his tongue, and as long as it was, I wasn't bringing shame on my family or anything, so I wasn't too worried about it. In fact, I wasn't worried at all. I wasn't thinking much either, because when I was sitting on Security-General Zhao's face, I generally stopped thinking completely and just went for the ride, and Security-General Zhao liked that as much as I did.\n\n\"Oh god, don't stop, Stardust,\" Security-General Zhao groaned, and he really was strong. That one hand on my butt kind of had me riding his face fast, my delicate little feet in those lovely black snake-skin boots beating wildly on his bed, and his other hand pushed my face down onto his cock, and he was just about half way down my throat, and I was face to face with his balls and they were big, but I knew I could swallow everything.\n\nBy then I'd had lots of practice.\n\n\"I'll wait until you've finished before we have a little chat, Stardust dear,\" Mrs. Security-General Zhao said, just as I managed to get almost all his cock into my mouth and half-way down my throat, and I got such a fright I choked, and my throat kind of spasmed convulsively in terror, and did that choke-dance and Security-General Zhao came, and of course I swallowed, because it was that or drown, and Mrs. Security-General Zhao sat there watching me, and talking into her mobile.",
        "I was so scared I just about died, and between that and Security-General Zhao burying his face in my pussy, and his tongue doing its best to make sure my family would be totally ashamed of me, and his cock just fire-hosing cum down my throat, okay, I climaxed, and it was horrible, because it was such a good one, and Mrs. Security-General Zhao sat there watching me until we were both finished.\n\n\"I do hope you had a good time, dear,\" she said to Security-General Zhao, holding up my G-string panties with a pen and looking at them and shaking her head before she dropped them in the wastebasket, and then she handed him her mobile. \"Daddy would like to talk to you for a moment.\"\n\nI sort of finished swallowing, and watched Security-General Zhao turn pale, which was a bit of a puzzle, because he was, you know, head of Gold Mountain Province Security Directorate, and Security are supposed to be the scary people, which was why I was so happy to be such a good friend of Security-General Zhao, so I wasn't too worried about his wife. What could she do?\n\nOkay, I really was totally na\u00efve.\n\n\"You silly little slut, Stardust Wong,\" was all she said to me. Then, as the bedroom door opened and two big guys in suits came in, and I kind of squealed and tried to pull the sheets up, she looked at me like I was a cockroach, and all she said was, \"dispose of her.\"\n\n\"I'm sorry, Stardust,\" Security-General Zhao said, and then two other guys in black suits and mirror shades were taking him away, and I was being dragged out, totally butt-naked except for my boots, and thrown in the back of a black car, and they put a hood over my head and handcuffed me, and I was still butt naked, and it was about then that I realized things were maybe more serious than I thought, and then someone sprayed something on the hood because I guess I was screaming and crying, and it all went black, and then there were these vague memories of being asked questions, lots and lots of questions, on and on, and people hitting and slapping me so hard it really hurt, and this wet cloth over my face that made it so hard to breathe, and they asked me all sorts of questions that I didn't know the answers to, and they hit me again, on and on and on, and I was screaming and crying, and then I was being dragged down hallways and thrown into a cell, and I was still butt naked except for my boots, and I'd have been embarrassed except I hurt so much, and I was terrified, and then it was all black again.\n\n\"Stardust? Stardust?\" my Mom's voice was saying, and I was, like, \"huh?\" and I had a real bitch of a headache. \"Stardust, can you hear me? Are you alright?\"\n\n\"Huh... huh... my head.... owwww... oww... what happened?\" I kind of groaned, and my head felt like it'd been hit by a brick or something, and the rest of me wasn't far behind, and I'm not one of those girls that likes martial arts or anything, so that was, like, a new experience, and it wasn't one I wanted to get used to.\n\n\"Oh, Stardust, you gave us such a fright,\" my Mom said, and she was hugging me, and she just burst into tears, and wouldn't let go of me, and I don't usually swear, but fuck, my head hurt and I felt like I'd being used as a punching bag, and when I did manage to go take a shower, with Mom's help, I had bruises everywhere, and I didn't think Security-General Zhao had been that rough with me, and then...\n\n.... Oh shit!\n\n\"What happened, Mom?\" I asked, in that real small voice that said, yeah, I sort of think I totally messed up.\n\n\"We found you. Thank god we found you, Stardust,\" my Mom sobbed, and I sort of remembered Mrs. Security-General Zhao, and that cold look on her face, like I was a cockroach she was gonna spray, and those two guys dragging me out, and that car, the hood, and then...\n\n\"What happened, Mom?\" I asked, and I was crying, and totally shaking, and in shock.\n\n\"Your Dad knows,\" Mom sobbed. \"He'll tell you. He's busy calling in favors to get us somewhere where you'll be safe and we're going to stay in this safe house until then... oh what did those terrible men do to you... those bruises.... Oh, my poor little baby girl... thank god you're safe...\"\n\nMe, I was so sore everywhere I really wasn't thinking too clearly.\n\n\"What did they do with Zowie?\" I asked, sort of shivering at the memory of that look on his face, and he'd been scared, and not just for himself, I think. Not the way he'd said sorry to me. He'd known something I didn't, and I felt even worse. \"What did they do to Zowie, Mom?\"\n\nMom didn't say anything. She just looked at me and she looked so sad, and she cried, and I did feel bad.\n\nI felt worse when my Dad came home.\n\n<center>* * *</center>\n\n\"What?\" I'd squealed. \"Why are we going to the Moon? It's... it's worse than Tibet... or... or ...''\n\n\"It's not worse than getting shot, Stardust,\" my Dad said, looking at me like I was a puppy that'd made a mess and needed housetraining or something, and he looked really tired and old. \"You do realize that Security-General Zhao's wife is one of the Chairman's daughters. His favorite daughter as a matter of fact.\"\n\n\"Uh...\" I said, and no. I'd had no idea. I'd just thought she was an ugly old pug-nosed bat, but I was sort of beginning to understand I didn't know as much as maybe I should have.\n\n\"And as of two hours ago, Security-General Zhao is on his way to Alpha Centauri, to take command of the Space Navy system defence fortress there for the next five years. It's very unlikely he will return. Perhaps his ashes will.\"\n\n\"Uh...\" I said. Then, \"no, I didn't know about his wife, I thought she was just...\"\n\n\"You don't think, Stardust,\" my Dad said. \"I've seen the interrogation reports. The only reason I managed to get you out of there was that it was obvious to everyone that you were a silly little eighteen year old girl, and that Security-General Zhao took advantage of your youth, naivety and general lack of any ability to think analytically, and nobody could come up with any other motivation on your part than sheer stupidity, and they really tried.\"\n\nHe shook his head, and he looked so grey and tired and old. \"I mean, for God's sake, Stardust. Did you really think you were a Third Lieutenant in Security? There's no such rank, anywhere, and that Commission he gave you. He'd printed it out on one of the office printers. They found the file, and that fake draft exemption on his pers-com, and neither of them are worth the paper they were printed on. They were completely bogus, Stardust. Even you couldn't be stupid enough to believe he could do that.\" His shoulders sagged. \"Except from the interrogation reports, it's obvious to everyone that you were.\"\n\n\"That's a bit rude, Dad,\" I said, tears trickling down my face, and I really did feel sick. Zowie? Oh, Zowie, how could you fool me like that? I believed you, Zowie, and I felt even sicker and more like an idiot than I already did, because I sort of understood now.\n\n\"Listen, you stupid little slut,\" my Dad said, and I'd never seen him so angry and upset, and okay, I felt even worse. \"I had to call in every favor owed me, and a lot of your Mom's as well, to ensure you were not shot out of hand. You were four hours away from being taken out of that cell and put up against a wall when I managed to find out where you were, and why, Stardust. This went all the way up to the Chairman before I got you out. The Chairman personally said to me to get you off Earth, and out of his daughter's sight. She wants you dead, Stardust. D. E. A. D. Dead. Am I getting through to you?\"\n\n\"Oh,\" I said, sitting down because my knees had turned to jello when I realized he was serious. She really wanted me shot? Just for... but she was so old and ugly. Why would she want me shot, just for giving her husband a good time? All I wanted was that draft exemption, not him.\n\nAll of a sudden my Dad looked really old. \"You really have no idea, do you, Stardust?\"\n\n\"Uh...\" I said, and my Dad was right. I didn't, not really. I mean, what harm had I ever done that old bat? It wasn't like old Zowie was going to divorce her and marry me or something.\n\n\"Security-General Zhao had filed for a divorce, Stardust,\" my Dad said. \"You were not named, but apparently there were rumors, more than rumors, really, that he was infatuated, and your name had come up. There was a lot of gossip, and Mrs. Zhao, she didn't really care as long as you were just a girl on the side, but things changed when she received the filing notice for the divorce. She came home to discuss it with her husband, saw the two of you, and immediately called her father, who ordered the divorce to be disappeared, along with the lawyer who filed it. He had a fatal car accident last night, and his office was burnt out in a mysterious fire.\n\nSecurity-General Zhao has been sent off to Alpha Centauri, where he will no doubt die a heroic death fighting the Spiders, and Mrs. Zhao wanted you shot out of hand. Fortunately, the security officers she ordered to do so balked, as she had no formal authority to give that order, but in the end, you were just a loose end to dispose of. It was easier to get rid of you than to release you, Stardust. You were just a nuisance to everyone.\"\n\nAnd now he looked sad. \"Except to your Mom and I.\"\n\n\"Oh,\" I said, and then I got the shakes, and started crying.\n\n<center>* * *</center>\n\nTwo days later, we were on our way to the Moon, and by then Dad was putting a good face on it, but I could tell that under the surface, he was really upset about the whole thing, and so was Mom, and they both blamed themselves for not knowing anything about Zowie and me, and not putting a stop to it before what happened happened, so I was on my best behavior because I did love my Mom and Dad, and I did feel really guilty about what I'd put them through.\n\nAll I'd really wanted was that exemption, and I felt really bad about being fooled by Zowie like that. It was only a few days later that the Chairman announced new legislation on morality, and marriage, and divorce, and what would happen to girls who schemed to seduce old and married Security General's, and things like that, and it was pretty scary, but I didn't worry about it at all because I figured I was safe on Luna, and I'd just stay away from Security-Generals in future...\n\nSo I stayed out of trouble for, like, a while, but then I met that cute American guy and the security robots escorted me home, and Dad was mad. Mom was mad. I was grounded. Except for High School, which sucked a bit, and I was actually rather subdued for a while after that. You know, new girl at School, different fashions in New Beijing, academic stress, new friends to make, and Luna was, like, low grav and it took me forever to get used to that, and it's hard to look sexy and cool and everything when you're floating around looking like a total idiot, so it was a while before I got my feet on the ground. Pun intended.\n\nOkay, but when I did, and I made a few friends, and a couple of new besties, yeah, New Beijing could be fun, what with all the work going on in space, and tourists and hunky fascists from the Second American Republic passing through and looking for a good time with a cute girl, which you didn't see back in New Shanghai, and their Space Navy was a lot smaller than ours, but really good, sort of elite, really, and okay, they were racist fascist capitalist scum of course, but they fought really well, even our social media said that, so they must've actually been a lot better, and some of their officers were so cute, all big and blonde with these huge muscles and there were a few of them that were kind of discretely interested in getting to know the yellow peril a bit better, so of course I did my best to help educate them about how wonderful we were, and how grateful we were for their help, because even if they were fascists, they were, like, helping us fight the Spiders, which they should've been of course, but a lot of countries dirtside wouldn't because they didn't like the Hegemony, and it was after a couple of low key dates like that, that I had a little chat with this really nice Security-Major Chu.\n\nActually, it was Security-Major Chu who had a little chat with me, at school one day. I got called in to the Principal's office, and when I saw the uniform, I just about died because I thought the past had come back to get me, and I actually did faint, but Security-Major Chu caught me before I hit the floor, and after I realized he wasn't there to shoot me for Mrs. Zhao, we had this really nice discussion about how I could assist Security by dating fascists now and then, totally with official authorization, and, okay, after Security-General Zhao, forgive me, but I was a bit skeptical.\n\nSecurity-Major Chu completely understood, and he knew all about what happened with Security-General Zhao too, and he was really sympathetic and understanding and everything, and he totally reassured me that there'd be no meeting undercover in hotel rooms or anything like that, and no uniforms for me to wear, but he did say that, knowing my Dad, it was better that my Mom and Dad didn't know, about me dating fascists, as well as not knowing anything about me helping out Security, but if I wanted to date fascists, then it would be sort of nice if I helped Security, and Security could help me in return, because as long as I was sensible about it, he didn't see anything at all wrong with a girl like me dating fascists.\n\nI was totally cool with that, let me tell you, because Dad would've been really upset that I'd dated even a couple of fascists. Better still, I got my own Security Directorate Identification Card, and it was totally genuine because I went in to the Security offices with Security-Major Chu to get it, and it wasn't as a Third Lieutenant, and there wasn't any draft exemption. It was more of a get out of jail free card for dating racist fascist capitalist running dogs, which worked for me.\n\nAnd there were always hunky guys from the space-military-industrial complex with yuan to burn as well, and they all wanted a girl to show them a good time, which I was pretty careful about, let me tell you, because my Dad was Party Secretary, so I had a good time, and I showed them one, but totally carefully, and I made sure that I wouldn't bring shame and dishonor on the family name, and I never went to a hotel room, or any other room, with any of them.\n\nBut I was pretty good at keeping guys happy while not bringing shame and dishonor on my family, and there were a few places here and there that the security cameras didn't pick up, and I found out that, you know, a hand under the table in a small booth took care of things, and I got a really nice dinner, and as long as everything under the table stayed concealed, or you found one of those out of sight spots, and I knew a lot of them, the security monitoring cameras didn't pick anything up at all.\n\nThat was nice to know, and you could do a lot more than just use your hand if you knew that, and some of those racist fascist capitalist Second Americans had a really interesting dating experience, and so did I, and Security-Major Chu got lots of interesting information, and my get-out-of-jail-free card was really useful because it seemed like the security robots just read it as soon as I was in range, and after that, they ignored me.\n\nThat was so cool.\n\nAnd okay, once I'd got my feet on the ground in New Beijing, I'd made new friends, and my girlfriends were at High School with me, but I did like to go out with them too, because it wasn't just about guys, and I'd found a few really good edgy clubs, where they had actual live music, for going to now and then, and they were totally hip, and cool, and okay, one or two of them were more than a bit edgy. Even a couple of aliens, which was totally rad, coz you didn't see too many aliens at all dirtside.\n\nThat was how I'd met Ziggy.\n\n<center>* * *</center>\n\nAt Bowies.\n\nBowies was way down in Level Twelve, about as far underground as you got without getting into the life support levels way way down, and it was, like, totally not the sort of club you went to by yourself. Not even if you ran with the JoeBoys now and then, like I did. Especially not the sort of place it was safe to go to by yourself if you were a girl. First time I'd been there, it'd been with the JoeBoys I ran with off and on, and I was dating a couple of them, off and on.\n\nNothing serious, but they knew me, and they knew I had that get out of jail free card, and I was, like, a hanger-on, coz I wasn't a JoeBoys girl. I wasn't that tough, but I'd dated a couple of the guys, I knew a few more, sort of casually, and I'd done a few favors for them that didn't involve, like, blowjobs, and they all knew who my Dad was, and that I was connected, so they didn't dick me around, either, and they knew I'd been arrested a couple of times, and zapped once, and they kind of respected that.\n\nSo I did know Bowies, and I kind of liked the atmosphere, even if I would never go there by myself.\n\nSo yeah, Friday night, and I was out with Manda, my bestie, and we were planning on, you know, hanging out up on Level Two, at the Richman Mall, just doing some shopping and maybe seeing if there were any cute fascist guys of off one of those Second American Republic warships looking for a couple of good looking local girls to take out to dinner and flirt with, coz I didn't feel like much else, and Manda never did anything else.\n\nWe ran into Bluey and Mickey, and they asked me if I wanted to come along down to Bowies, because they were having a retro night, playing some old twentieth century rock, and this guy Ziggy was playing, and he was a really good guitarist, and I was, like, \"okay, why not,\" and 'Manda was a bit nervous, because, well, Bluey and Mickey were JoeBoys, and they looked it.\n\nBluey and Mickey knew, and they laughed, coz 'Manda was the type of snooty Level Four girl they made fun of all the time, like they'd made fun of me when we first ran into each other, but 'Manda was hot, so they eased up a bit, and after a while, when Bluey said he'd look after her and take her home if she didn't like the place, and I told her Bluey was a real straight cat, and if he said he'd look after her, he would, and she said sure, why not, but she was a bit scared, all the same.\n\nSo, yeah, ten on Friday night, and we'd picked up a few more guys Bluey and Mickey knew, so there was a group of us, which was always safer, and we were down in Bowies, which was this smoke-filled dive, which was totally illegal by the way, down on Level Twelve way down some back tunnel off of a tunnel that was off of Bottom Tunnel, and I'd never have been able to find it on my own, although I'd been there a dozen times.\n\nI'd have been too scared to try and find it by myself anyhow, coz it was mostly industrial, and, you know, slum tunnels where they rented out beds by the hour, with eighteen inches between your bunk and the one above you, and you better by god have enough to pay for your air as well, or they tossed you out on your ass for Public Security to pick up. If you couldn't make enough to rent a bed down there, Public Security was gonna put your sorry ass in one of the Labor camps.\n\nThose Labor Camps? Even I knew you didn't want to end up there. You got air, you got water, you got fed basic rations, you got your eight hours of bunk time, but you worked your ass off for it, or so I heard, because I didn't believe the Peoples Welfare Bureau bullshit about the camps. No-one did. Best could be said was, you were alive. But I'd heard stories that said worse, and yeah, I did feel sorry for everyone down here, which didn't mean I wasn't scared of them.\n\n\"I don't think we should've come here, Stardust,\" Manda said, looking around, and some guy I didn't know was trying to hand her a drink, and I was, like, \"leave, comrade citizen. She's with her date,\" and I sort of waved at Bluey who waved and turned to come back, and the guy saw that, and spat on the floor and left, but he left the drink on the table, and when I looked, I could see the roofie dissolving at the bottom.",
        "Manda and I looked at each other, and I was, like, \"Don't drink anything here unless you buy it yourself, Manda, and then you gotta watch them when they pour it.\"\n\nGood that we had Bluey and Mickey with us, as well as the others. They were the sorta guys that hung out in a place like this, and they were my friends, so I wasn't worried about it for myself, they'd look after me, even if some guy did slip me a roofie that I didn't spot, which wasn't likely because I did keep my eyes open, but Manda wasn't one of them, not that I was, but I was close, and they liked me. Manda? It was the first time she'd been here, she wasn't used to it, all the guys knew about her was that she was with me, and she didn't know how to handle guys like that, that weren't really interested in whether a girl said yes or no, coz Security was a bit sporadic down here, and they didn't really care what happened to anyone down here as long as you'd paid for your air, and if you didn't need air anymore they just tossed you in with the organics to use as fertilizer in the agricultural tunnels.\n\n\"Hey, dolls,\" Bluey said, and he'd found his way back to our table. \"Band's gonna play soon, and Ziggy's just arrived. This is gonna be cool.\"\n\n\"Can we go, Bluey?\" Manda said, and there were a few guys looking at us. Her, anyhow, because she was new, and hot, and she looked like what she was, a Level Four fuerdai girl slumming it. \"I'm scared.\"\n\n\"Listen to Ziggy play first, Manda,\" Bluey said, tossing back his Jinxing Kingstar and waving for another. \"I'll take care of you, doll. Promised I would.\"\n\n\"Yeah, you wanna stay and listen, doll. Ziggy's the most,\" Mickey said, sitting down on the other side of Manda, and she did look a bit happier now that we weren't alone, and the guys looking stopped looking at her, and it really was the sort of place where girls on their own were on their own, but if you were with a guy, you were okay, especially if the guys were JoeBoys, which Mickey and Bluey were, and Manda didn't complain when Bluey slid a bit closer, and slid his arm around her shoulders too, and she didn't pull away either, which was about the friendliest I'd ever seen Manda with a guy.\n\n\"Hey, he's coming on,\" Mickey said, and I looked, and I was, like..... \"huh?\"\n\nCoz I knew right away what Ziggy was.\n\nNot who. What.\n\nWe'd been doing current affairs that afternoon at school, last class, and it was all about the war with the Spiders, and how that was going, and there were a couple of other alien species out there fighting the Spiders, but they had their own work cut out, and they weren't too helpful to us, and they weren't that friendly, my Dad said. But a while ago, we'd found these new allies, the Heptapods, and they were far more friendly, and they sort of wanted to fight alongside us, even though communicating with them was a bit difficult, but for both of us, it was sort of a case of \"the enemy of my enemy is my friend,\" because the Spiders had just started attacking them, too.\n\nThat was the thing about the Spiders. Nobody had ever managed to communicate with them, and they attacked everything.\n\nThe Spiders, they were a cancer. A disease on the galaxy, and theory went right out the window, because the Chinese Hegemony's Peoples Liberation Space Navy was out there fighting and dying to save the human race from annihilation; didn't matter if they were enlightened workers or racist capitalist scum, it was us fighting that disease because we knew our duty to the workers, and as the Glorious Chairman said, the Party led on behalf of the workers, and sometimes we had to lead by example, and now it was us and a few more, coz some of the other countries dirtside like the fascist Second Americans had seen the light of the cause of the workers, and the Heptapods were sort of coming on board, although they weren't really workers like Xi-Maoist-Marxist-Leninist theory set it out.\n\nThere were rumors of a couple more species out there on top of the ones we knew about, because our Hegemony warships, they'd found traces, and Dad showed me some of the reports he got that weren't, like, for general circulation, and we'd sent out a few task forces looking for them, because the Spiders, they didn't care if you were a hero of the workers and peasants, or racist fascist capitalist scum, or revisionist running dogs, like those Russians. They attacked, they killed, and they ate you.\n\nWe'd found that out the hard way when they overran a couple of our colony planets we were busy terraforming, and they'd hit Rockwell and Neues Adlernest too, which was why the Second Americans were lined up beside us, even though they didn't like us that much, and it turned out the Spiders had eaten a couple of planets worth of heptapods too, before we bumped into each other out in space.\n\nSo the heptapods, they were our new best friends, even though they were pretty strange, and it'd taken quite a while before we could talk properly with them, and the party congress was still debating where they fitted in the greater scheme of things, because they sure as heck weren't like us at all, and Xi-Maoist-Marxist-Leninist theory didn't really have a place for them, so there was a lot of work going on there to figure out the politically correct viewpoint, and my Dad, he was one of the party intellectuals, so the Chairman had called on him a few times lately, so he was sort of totally persona grata again, and he'd kinda of struggled, I knew, because I'd watched him popping capitalist Advil like they were candies.\n\nSo yeah, Heptapod. Ziggy was a heptapod.\n\nSort of like a giant human-sized squid with seven tentacles, and these huge soulful saucer-sized eyes, and he just flowed onto the stage, along with the rest of the band, and he was holding a guitar in two tentacles, and another guitar in two more tentacles, and his skin was all rippling colors, and he looked really happy, although I had no idea how I knew. He just looked like he was having a real good time.\n\n\"Wow,\" I said, because he just flowed so smoothly, and I could see his muscles rippling coz we were real close to the small stage, and they were starting to plug in and tune up, and the drummer was already riffing, when one of the guys from behind the bar jumped up on the stage and grabbed the microphone.\n\n\"Yo, cats,\" he bellowed over the din, and believe me, Bowies was NOT quiet, and nobody stopped to listen, so yeah, he bellowed, and Manda winced. Me, I was used to it. Been there before.\n\n\"Yo, cats, tonight is retro night, and this is BOWIES, so the Spiders from Mars are gonna play... wait for it... ohhh yeah, they're gonna be playing old David Bowie numbers for the rest of the night...\"\n\n\"Who?\" Manda asked, and I was, like, what? Don't you know your musical history, but no, Manda didn't. She was into all that Cantopop stuff from dirtside.\n\n\"Bowie,\" I yelled to her, over the noise. \"Old English singer from the twentieth century, I did a song of his at the School Concert, you know, that China Girl one.\"\n\n\"That was weird, Stardust,\" Manda said. \"I mean, okay, you're a good singer and everything, but that was so old fashioned...\"\n\n\"Barbarian,\" I said, but I didn't say it loudly, coz she was my bestie, and the cat up there was bellowing again, and I was listening, and Bluey and Mickey were just pounding the table, and I'd had no idea they liked Bowie too. Or that they'd even heard of him. I didn't know that many cats that did.\n\n\"On the drums... on the drums we got Kilgore Trout, give Trout a hand, cats... and right here, we got Weird on the keyboards... yeah, give Weird a hand, cats.... and doing vocals, we got Gilly, and ain't he good, ain't he the best, and now, the cat you've all been waiting for, the hepcat of all the hepcats, we got Ziggy on guitar, and we all know Ziggy can't sing, but cats, we all know Ziggy plays guitar... so give Ziggy a hand...\"\n\nThe club went wild, and oh boy, that Ziggy, he had two guitars, and my Dad played guitar, it was my Dad's hobby, the way he relaxed, and Ziggy had a bass guitar in two tentacles, and a lead guitar in two tentacles, and he kind of riffed a background to the dude with the mike, and I was on my feet just like everyone else, yelling and screaming coz I did get a bit carried away over music, and then the cat handed the mike to Gilly and jumped off, and the band just cut loose, and Gilly was singing in English, and I knew the words, of course I did, and I was just screaming them out....\n\n<center>I, I will be king\n\nAnd you, you will be queen\n\nThough nothing will drive them away\n\nWe can beat them, just for one day\n\nWe can be heroes, just for one day</center>\n\nWe all learnt English at school, and I was good at anything language and art and music, really really good, actually, and I was singing too, as the band just went straight into that fast hard rhythm, and Ziggy had that base beat going with one guitar, overlaid by that lead guitar, and Gilly was just into it, and the drums and the keyboards were perfect, and wow, Ziggy played guitar alright, and it was totally just so cool, and I was mesmerized by Ziggy's tentacles, just blurring as he worked those guitars like they were part of him, and they were really pounding out that song...\n\n<center>And you, you can be mean\n\nAnd I, I'll drink all the time\n\n'Cause we're lovers, and that is a fact\n\nYes, we're lovers, and that is that\n\nThough nothing will keep us together\n\nWe could steal time, just for one day\n\nWe can be heroes, forever and ever\n\nWhat d'you say? </center>\n\nOh man, it was just so perfect, and the only version I'd ever heard that could compare with what these guys were doing was that old twentieth century Motorhead cover of the song, and Ziggy, I was sure he was as good as Lemmy on that bass guitar, except he was doing Phil Campbell on lead as well, and wow, I'd never have believed anyone could do it better than them, but Ziggy was, both of them, simultaneously, and I was just rapt.\n\n<center>I, I wish you could swim\n\nLike the dolphins, like dolphins can swim\n\nThough nothing, nothing will keep us together\n\nWe can beat them, forever and ever\n\nOh, we can be heroes, just for one day...</center>\n\nOn and on and on, and I was just totally into the music, and I couldn't take my eyes off Ziggy, and those colors rippling across his skin in these weird patterns as he played, and I knew heptapods talked with their tentacles and color patterns, and those patterns seemed to fit the song somehow, and he had these big black soulful eyes the size of saucers, and somehow when he looked at me, our eyes seemed to meet and I just felt that connection, like somehow something had just reached into my soul, and we both looked and looked and looked, and those guitars, they played for me, I knew they did, and then the song ended and they went right into \"Wild is the Wind,\" and Ziggy just killed it, and then he killed Starman, and Changes, and Rebel Rebel, and Jean Genie, and then they did Lady Stardust, and he looked at me the whole time he was playing, and I was, like, totally overwhelmed.\n\n\"Hey cats, gonna give the band a break for ten minutes, anyone with the balls to get up here and give it a try...\" That cat from behind the bar was up there again, and the band, all except Ziggy, they were kicking back with beers, all of them except Ziggy, and he was just sitting there riffing his guitar, just playing on by himself, and I dunno what came over me. I just jumped up and waved, and I was, like, \"I'll do something.\"\n\n\"Stardust?\" the cat said, and he did look a bit surprised. I mean, I'd been there a few times, he'd sorta done his best to pick me up. All the regular cats that hung out here had, but no dice. I was nice about it, but this was Level Twelve. If my parents found out I'd so much as looked at a guy I met down here, forget grounded, it'd be Ganymede for sure.\n\n\"Yeah, go Stardust,\" Manda screamed, and she'd been drinking from Bluey's beer, which, if she was gonna drink at all down here, which I never did, except water I bought myself, was about the smartest choice, because at least it'd be his roofie, and not some cat she didn't know. I was going to have to talk to her after, though, because even with Bluey, she was pushing her luck, and I really shouldn't have brought her down here. This was just totally not her sort of club, and she was way out of place.\n\n\"Come on up then, Stardust,\" the cat from back of the bar said, and I was about to clamber up on the stage when Ziggy just leaned forward a bit and two tentacles whipped out about six feet, and picked me up and lifted me onto the stage like I was a feather, and he did that riff from Lady Stardust, and he said, \"Lady Stardust?\"\n\nI almost had a heart attack, and then I released he had a vocoder on a sort of harness thing he was wearing, and it was a bit robotic, but I recognized the Chinese, and I smiled at him, sort of wondering if he knew what a smile was, coz there was no mouth there, just eyes, but he was here, playing in a band, so he must be pretty good at communicating, but I did wonder how the heck. I'd have to ask my Dad, but then again, maybe not, because then I'd have to explain being down on Level Twelve at Bowies, and...\n\nGanymede.\n\nNope. Not asking my Dad.\n\n\"What? Song?\" he said, slowly, and his eyes just looked at me, and I was losing myself in those eyes. Great pools of jet black, as dark as the darkness of space in earth-shadow, and I realized I'd stopped breathing, and I breathed in, and my mind was blank, but there was an old acoustic guitar leaning against the side of the keyboard stand, and I just kept on looking into his eyes, and the mike that Gilly'd been using was still there, next to me, and I played the first thing that came into my mind.\n\n<center>I fell in love with you watching Casablanca\n\nBack row of the drive-in show in the flickering light\n\nPopcorn and cokes beneath the stars\n\nBecame champagne and caviar\n\nMaking love on a long hot summer's night </center>\n\nBy the time I was about five lines into that song, Ziggy was playing along with both guitars, his tentacles just teasing those notes from his guitars, and he had the tune, he had the notes, he had them perfectly, and it was like he knew what I was going to sing before I did, and I laid that acoustic guitar down, because I didn't need it, and I took the mike in my hand, and now I was singing to him, singing to those great black limpid eyes that I was drowning in, and I just knew that behind those eyes, there was a kindred soul.\n\nA soul like mine, hurting, fighting, wanting something good and kind and caring, but seeking something, seeking something that I hadn't found yet, but that I knew I wanted, and that I knew was there somewhere, if only I kept looking, and I knew that I needed whatever that was, but I hadn't found it yet, but I could feel him, his soul, strong, like steel, like a sword, and I knew his was a warriors soul, a fighting soul, and I knew Ziggy was a fighter, a guardian, and Ziggy's music was the closest I'd come to finding what I was looking for that I hadn't known I was looking for, not until then, and the words poured out, soaring out into the smoke-laden air of that twelfth level dive, and Bowies, it'd gone real quiet.\n\n<center>I thought you fell in love with me watching Casablanca\n\nHolding hands 'neath the paddle fans\n\nIn Rick's candle lit cafe\n\nHiding in the shadows from the spies\n\nMoroccan moonlight in your eyes\n\nMaking magic at the movies in your old Chevrolet\n\nOh a kiss is still a kiss in Casablanca\n\nBut a kiss is not a kiss without your sigh</center>\n\nTrout was back, behind his drums, that rhythm merging effortlessly into the song as I sang, and Weird was behind his keyboards, his notes easing in as if he'd always known this song, and Gilly was humming along as the words floated out, and Ziggy, he just looked at me as I sang, and his tentacles played along...\n\n<center>Please come back to me in Casablanca\n\nI love you more and more each day as time goes by\n\nI guess there're many broken hearts in Casablanca\n\nYou know I've never really been there so I don't know\n\nI guess our love story will never be seen\n\nOn the big wide silver screen...</center>\n\nSinging the rest of that song, the words coming without thought, without anything, and Ziggy played like he'd always known the music, and I sang like I was singing it for him, and he played like he was playing just for me, and his eyes never stopped looking at me, and mine never stopped looking at him, and those final lines poured out...\n\n<center>...Please come back to me in Casablanca\n\nI love you more and more each day as time goes by\n\nI love you more and more each day, as time goes by...</center>\n\nThose last words, and I sort of stood there in that silence as the words and the music faded, and the club was silent for a long moment, and I wasn't really paying too much attention to anyone or anything except Ziggy, and then the club kind of erupted in a storm of whistles and cheers, and the guy from behind the bar was up there beside me....\n\n\"And a big hand for Stardust, everyone, and now the Spiders from Mars again...\" and Gilly had the mike, and they were cutting into that old Bowie song, Space Oddity, and I was jumping down off the stage, and Manda was looking at me like I was some sort of superhero or something.\n\n\"Wow, Stardust, that was amazing....\" But me, I was still looking at Ziggy, and Ziggy was looking at me, and I knew I had to talk to him. I had to, somehow, and I didn't know how, or what to say, so I just sat down and I kept looking at him, and Ziggy kept looking at me.\n\n\"Bluey's taking me home, Stardust,\" Manda said, about an hour later, and I made the right noises, and when she asked me if I was coming too, I sort of shook my head, and told her I was staying, and I did, because when I looked at Bluey, he looked back and grinned at me, and the way he grinned, I knew he'd look after Manda and get her home okay, because under that JoeBoys image, Bluey was an okay cat.\n\nI sat there and I listened, and I watched, and Ziggy never stopped looking at me, and everyone I knew had gone, everyone except Mickey, and he was only here because I was, and I knew I had to go, and in the end I looked at Mickey and I knew I couldn't stay here by myself. Any later and Dad, he'd call Security and they'd ping my com-unit and they'd know where I was, so I stood up, and Ziggy put his guitars down and he flowed down off the stage and over to our table, rippling colors, and he stopped in front of us and straightened his tentacles until his eyes were level with mine, and he looked at me and he looked at Mickey.\n\n\"Are you pair-bonded?\" his vocoder said.\n\nMickey and looked at each other, and \"No\" we both said, coz I guess we both figured out what he meant.\n\n\"Lady Stardust,\" Ziggy's vocoder said, and his color patterns were totally agitated, and I just knew he wasn't sure about this, but I already was. \"Is it permitted for me to escort you to place of abode?\"\n\n\"Huh?\" Mickey said.\n\n\"He wants to walk me home,\" I said to Mickey.\n\n\"Yes,\" Ziggy said. \"Escort to home of Stardust. Is this permitted?\"\n\n\"Uh...,\" Mickey said, looking at me. \"This is Level Twelve, it ain't that safe out there, cat.\"\n\n\"Stardust is safe with me,\" Ziggy's vocoder said.\n\n\"She will be,\" Weird said, and he'd slid down off the stage to join us. \"Ziggy's a Tentacle Leader in the Heptapod Space Marines, bro. He's a Spider-Killer, he can look after himself.\" He looked at me. \"And you, doll, you'll be fine with him. Ziggy's a righteous cat.\"\n\nMickey looked at me, and I know he sorta felt responsible for me, and I looked at Ziggy, and I knew I had to do this. I wanted to find out more about Ziggy, about the music, and the way something about him called to me, and I didn't know what it was, but I had to find out, and I knew Ziggy could look after me.",
        "\"Ziggy can take me home, Mickey,\" I said, and I looked into Ziggy's eyes, and I reached out and took the tip of one of his tentacles in my hand. \"I'll be safe with him,\" because I knew I would be.\n\n\"Long as you're sure, Stardust,\" Mickey said, and I knew I was.\n\n\"Be seeing 'ya,\" Mickey said to Ziggy. \"Make sure you do look after her, or we'll be looking for 'ya, cat.\"\n\n\"Stardust is safe with me,\" Ziggy's vocoder said, and his skin flashed and rippled warm reassuring colors.\n\n\"Thanks, Mickey,\" I said, and I reached out and gave his hand a squeeze with my free one, and then I looked at Ziggy, and I smiled. \"Let's go, Ziggy.\"\n\n\"I'll take care of the guitars, cat,\" Weird said, and Ziggy's colors rippled brightly. Excitement? That's what those colors felt like.\n\n\"Thank you, Weird,\" his vocoder said. \"I will come to play tomorrow night.\"\n\n\"See you then, cat,\" Weird said, and just like that, we were leaving, hand in tentacle, and everyone in Bowie's was watching us as we threaded our way through the tables, and Ziggy just flowed along beside me, and I wanted to sing, and I was humming under my breathe.\n\n<center>Oh a kiss is still a kiss in Casablanca\n\nBut a kiss is not a kiss without your sigh</center>\n\n\"Stardust is attractive name,\" Ziggy's vocoder said, as we walked down that tunnel, and it was a bit dark and scary, broken lights, rubbish, rats skittering for cover, but I didn't care, and I wasn't scared with him.\n\n\"Thank you,\" I said. Then, \"Why are you called Ziggy? Is that a heptapod name?\"\n\nDark shadows, shadows of sadness, that's what they were, and they played across his skin. \"Ziggy Stardust and the Spiders from Mars, is David Bowie song,\" he said. \"Ziggy is human name. My heptapod name translates as 'Swimmer who dares to swim paths of great fish', it is a common name for us, but for humans, that name makes no sense, and I like Ziggy, Stardust. Heard song in Battle of Zhuolu. My battle-tentacle-brother at the end was Hegemony Space Marine, he saved my life half a dozen times, took bad hit as we were evacuating. Gave me music before he died. Did not understand at time, but kept as memory of battle, and as last gift of good battle-tentacle-brother, and later, Hegemony Marines show me how to play. I played, and liked. Learnt to play guitar in memory of old friend. Never know his egg-line name.\"\n\n\"Oh my god?\" I gasped, stopping in my tracks. \"You were there? At Zhuolu?\"\n\nBecause everybody in the Chinese Hegemony knew about the battle of Zhuolu. Everybody in the world knew, because that was the first big Spider attack. Three years ago, back when I was dirtside, it'd been all over the news, day after day after day. We'd had settlers on the planet, military forces as well, building space fortresses and fortifying the system as a forward base, because by then we'd run into the Spiders, and the military knew about the threat. Just, no-one understood just how bad that threat was, and the Spiders had attacked before we were ready.\n\nThe Peoples Liberation Space Navy had been fighting a desperate battle to hold off the Spiders, the media was full of it, because it'd been a horrible surprise, and the Spiders just swarmed into the system, and the Navy hadn't been able to hold them at the warp point. Their ships pushed ours back, all the way back to the planet that we were on, and their landers kept breaking through, getting down, and our Marines on the ground had been dying like flies to hold the perimeter while our transports evacuated the civilians.\n\nI remembered how horrible it'd been to watch the media reports, and then these weird aliens had arrived out of nowhere through a warp point we didn't know about, and we had no idea who they were, and they had no idea who we were, but as soon as they saw the Spider spaceships and landers, they'd attacked, and they couldn't talk to us, and we couldn't talk to them, but it didn't matter to them. We were fighting the Spiders, and that was all they needed to know. I'd seen the clips, the way they threw themselves into the fight in space, and then their landers came down, and then these octopus things in battle armor flowed out of those strange landers and lanced into the Spiders like buzz-saws on steroids.\n\nThey hadn't turned the battle round, there hadn't been enough of them or of our own Space Marines left to do that, but they'd died alongside our Hegemony Space Marines, holding that perimeter until the Navy ships had got our surviving civilians out, and their landers had evacuated some of our civilians, and their Marines and ours had been all mixed up at the end, but they'd fought the Spiders and died alongside our men, dying to protect a species they hadn't even known existed before they popped out of warp space and into that system.\n\nI knew all that, we all did, and I just looked at Ziggy, and honestly, I had tears in my eyes. \"You were at Zhuolu?\" I said, again, and I remembered how scared I'd been watching the media reports every night, and how much I'd wanted that draft exemption because I'd been so scared, and I was really ashamed of myself.\n\n\"Yes,\" Ziggy said. \"New recruit. Just completed training. Supposed to be recon training mission in new system, not expecting anyone there. Task Force was in training, not many of us with battle experience. We come out of warp space, Task Force Commander observed Spiders, and saw battle, sent alert back to our base and joined battle immediately. Could not leave anyone to fight Spiders alone. Commander tells us all our duty is to assist aliens against Spiders, and that aliens are outnumbered, asks for volunteers.\n\nEntire task force volunteered to assist aliens, and it was my first battle against Spiders. Everyone in my Tentacle died except me. Joined one of your Space Marine tentacles and fought Spiders with them until evacuated at end. Hegemony Space Marine I am battle-tentacle-brother with introduce me to David Bowie, gave me his music when he took hit, and I learned to play guitar on Hegemony transport. Become tentacle-swarm-comrades with Hegemony Marines until repatriated.\"\n\n\"Oh, Ziggy,\" I said, and couldn't stop myself. I just turned and did my best to hug him, because I knew how brave he must have been. Like everyone else, I'd watched that endless battle, horrified by the news clips coming every day, the endless swarms of ravenous spiders, the heroism of our Space Marines, fighting on and on, knowing they were all there was between that evil hunger and the civilians they protected, and they'd fought and died in the best and most glorious traditions of the Peoples Liberation Space Navy Marines and of the Party.\n\nThey'd known who and what they fought for, and they'd fought and died beside their comrades, doing their duty to the Party, to the Hegemony, and above all, to the People.\n\nBut Ziggy, he'd been an alien, and he'd gone into battle to fight alongside a species he didn't know a thing about, except that they'd been fighting the Spiders, and he'd been a new soldier, his first action, and everyone in his unit had died, but he'd fought on, he'd found the aliens, and to him we must have looked as weird and strange as the heptapods had first looked to us, and he'd fought alongside our Space Marines, and evacuated in one of our ships with the aliens he'd fought beside.\n\nI knew I would never have had that sort of courage. Heck, I remembered Zowie, and I actually felt real guilty now about wanting that draft exemption so badly. I mean, now, I was still scared, but I was older too, and I knew I'd do my duty now. I had the family name to uphold, and my Dad's position and everything, and I'd be an officer and they'd probably put me somewhere safe where I could inspire the troops and everything, because I didn't think I'd be much good at fighting Spiders, but I knew I could inspire guys, and I wouldn't complain about doing that, not now, and I just hugged Ziggy.\n\n\"Thank you,\" I said, and my arms sort of didn't even go half way round that huge barrel of a body, because he was solid muscle under that smooth skin, and his skin smelt delicious, sort of sea salt and something tangy, and it was smooth, like almost wet leather, and his tentacles slid over me and around me everywhere, spiraling around my legs and arms and back, and over my butt and around me and two tentacle tips were brushing my cheeks, and I turned my head a little and just kissed one, and it brushed my lips, delicately, gently, teasing my mouth, and my lips parted and that tentacle tip sort of slipped into my mouth and brushed my tongue, and his tentacles were massaging me everywhere.\n\n\"Ziggy?\" I gasped, not quite sure what was going on. \"Ziggy?\"\n\n\"Stardust?\" he said. \"Stardust. Am I hurting you?\"\n\n\"No,\" I gasped, almost moaning as one of his tentacles spiraled between my thighs, another over my butt, and one was sliding across my breasts, and I clung to him, his torso pressed against me. \"It's okay, but I think we should stop now, because there's someone watching us.\"\n\nThere was, and it wasn't someone, it was a dozen someone's, and they were the sort of someone's that I'd always been a bit scared of down here in Bottom Tunnel, and it was dark and there wasn't anyone except Ziggy and me around, and I wasn't a bit scared now. I was terrified, and I fumbled for my pers-com, because bad things happened down here, and I'd rather be in trouble with my parents than be one of those horror stories you read about in the media.\n\n\"You are safe with me, Stardust,\" Ziggy's vocoder said.\n\n\"No she ain't, squid,\" one of those shadowy figures said, and I could see knives.\n\n\"You think so?\" Ziggy said, and about half a second later, two tentacles held these huge knives, and one of his tentacles flashed out like a whip, and all of a sudden it was about fifteen feet long and real thin, and there was a thunk, and the guy who'd said that dropped to the ground like a rag that someone had dropped, except I sort of winced at the crack when his head hit the surface.\n\n\"Get the squid,\" someone yelled, and they started forward, and I screamed, and Ziggy just flowed forward, and it was like a wave of swarming tentacles, moving like lightning, and about ten seconds late Ziggy was the only one left standing, and I'd only screamed once, and I hadn't even got halfway through keying in the emergency code, and I hit cancel.\n\n\"You are safe with me, Stardust,\" Ziggy said, and he reached out with one tentacle and sort of wrapped it around my waist and held my hand with the tip, all at the same time.\n\n\"I am,\" I said, nestling into his tentacle and not looking back, because I wasn't sure I wanted to see, so I made sure I didn't, and we walked back to Bottom Tunnel, and then up the ramps, all the way up to Level Four, where my parents' tunnel was, off towards Gulou Outer Tunnel, and we talked the whole way, and it was mostly Ziggy asking questions and me talking.\n\nOutside the hatch of my parents' tunnel, I turned to Ziggy, and I didn't know what to say, but I wanted to see him again, so I took another tentacle in my other hand, and I looked him in his eyes, and I said it, my heart pounding. \"Ziggy, I want to see you again.\"\n\n\"Stardust,\" he said, and those tentacles curled around my wrists and forearms, and another one of his tentacles brushed my cheek, brushed the side of my face, and a fourth coiled around my waist and drew me closer, the colors rippling across his skin. \"Stardust, I would like to see you again too.\"\n\n\"Tomorrow,\" I said, and I was smiling. \"Twelve hundred hours at the Peoples Glory Mall Food on Level Two, Food Court Three.\" I liked the icecream stall there, that was why. \"Is it a date?\" I added.\n\n\"I know this location. It is a date,\" he said, and with a last brush of my cheek with his tentacle, he turned and flowed away.\n\nCould a heptapod skip? Watching him flow away, it almost looked like it, and I smiled as I turned and slipped through the hatch, and into our tunnel, and Mom and Dad weren't waiting up for me, which was good, and I was still smiling and singing that song in my mind as I dropped off to sleep.\n\n<center>I thought you fell in love with me watching Casablanca\n\nHolding hands 'neath the paddle fans\n\nIn Rick's candle lit cafe\n\nHiding in the shadows from the spies\n\nMoroccan moonlight in your eyes\n\nMaking magic at the movies in my old Chevrolet\n\nOh a kiss is still a kiss in Casablanca\n\nBut a kiss is not a kiss without your sigh</center>\n\n<center>* * *</center>\n\nI was there at eleven thirty, and he was already there, sitting by himself at a food court table with a Bubble Tea in front of him, not doing anything with it, and people were looking as they walked by.\n\n\"Hi Ziggy,\" I said, sitting down opposite him, and I said that a bit shyly, which was strange because I wasn't shy at all. Not usually. But then, I'd never, like, dated an alien before. Had anyone on Earth ever dated an alien before? Because I knew that's what it was. A date.\n\n\"Stardust,\" his vocoder said, and his skin flashed these amazing colors, almost too fast for my eyes to catch, but they were beautiful, and there was a pattern to them that I almost understood, and it was almost... but then he reached out with two tentacles and took my hands in them, and his tentacles curled around my wrists, and the spiraled up my arms like warm silk, delicate and smooth and gentle, and I could feel his pulse against my skin as my hands curved around the muscles and those beautiful black saucer-eyes looked into mine, and we just looked at each other, for, like, an eon, and I had to remember to breathe.\n\n\"I buy you Bubble Tea, Stardust,\" he said, and he flashed happy. I knew it was happy, it just felt like those colors and those patterns meant that.\n\n\"Thank you,\" said, but I didn't move to pick it up, and his tentacles didn't let go.\n\n\"What do we do on date?\" he asked, and those color patterns, I knew he was puzzled. \"Study material on humans does not include information on dating.\"\n\n\"Uh...we spend time together,\" I said, which seemed a pretty inane explanation, and then I had this flash of inspiration. \"Do you like swimming, Ziggy?\"\n\n\"I grew up in water,\" he said, and the colors rippled laughter. I was sure it was laughter.\n\n\"Cool,\" I said. \"Let's go swimming.\" I knew where to go, too. Up on Level Zero, the admin office, and hotels for tourists, and all the surface industrial stuff, but there was an entertainment complex as well, and there was a waterpark. Pool, slides, private pools. I didn't go there too often, but I'd been, and I'd even taken a fascist or two there, so I knew you could get private pools, and I knew where to go, and I kept one hand on one of Ziggy's tentacles as we headed for the nearest ramps, and floated up, and I was busy telling him about the pool.\n\n\"Pets not permitted in entertainment complex,\" the admission robot said, and I kind of looked at it and touched the pad for assistance.\n\n\"I don't know,\" the girl said, after she arrived, and I could tell she was a bit freaked by Ziggy. \"It might scare the children.\"\n\n\"How about a private pool,\" I said. They were meant for groups, and parties, they weren't cheap, but the allowance from my parents would cover it.\n\n\"Let me check, Comrade Citizen,\" she said, and I didn't push it while she commed her team lead, because she was actually doing pretty good. I mean, big blonde fascists were one thing, and I'd brought a couple here, but Ziggy was a real alien, and I could see she was sort of freaked out by him, and maybe a bit scared by me, coz it was obvious I was a Level Four girl, and I could make trouble if I wanted to. I'd dressed that way today, thinking I might have to push it, because, well, Ziggy was an alien. I could hear her, too.\n\n\"Yes, it's a real alien,\" she said. \"It looks like a sort of octopus. It would scare the children I think...\"\n\n\"Yes, she's one of those fuerdai, you know the sort. She looks like she could make a lot of trouble...\"\n\nWell, she was right about that, but I didn't smile, although I didn't want to call my Dad. Maybe I could call Chewy. It wouldn't take him long to sort it out.\n\n\"Okay, yes, I understand...\" She turned back towards us. \"Management override Check-in Three,\" she said. \"Complimentary Admission for two.\" She smiled happily. Someone else had made the decision for her. \"Here's your card for your Private Pool, Comrade Citizen Wong, unlimited time. Please enjoy your swim with your...\" She did hesitate, but only for a second. \"...friend.\"\n\n\"Thanks,\" I said, smiling back, coz it looked like her team lead wasn't taking any chances, and I slipped her a big tip, and her smile grew when I slipped her a second note. \"Please thank your team lead personally for me, Comrade Citizen.\" Still cost way less than the admission and the private pool would've, so I was ahead, and one should reward the workers for good decision making. To encourage the others, as my Dad said.\n\n\"Wow!\" Ziggy's vocoder said, when we were in that private pool room, and hey, it was really nice. I hadn't been in this one before. Last time, with that big blonde fascist, we'd just got a Jacuzzi, because I hadn't had swimming in mind, and neither had he, and we hadn't worried about swimsuits either, although I'd had to explain about not bringing shame down on my family, but when we got down to the alternatives, he was really enthusiastic, but with Ziggy, really all I was thinking about was, he'd probably enjoy swimming, and there wasn't anywhere else to swim in New Beijing.\n\nHere, we had a pool big enough to swim in, and the d\u00e9cor was actually rather nice, all that lovely old antique Maoist d\u00e9cor from the mid-twentieth century, all retro from before the Hegemony, and I kind of liked it. Heroic workers with bulging muscles, cute working girls admiring the guys, and of course the Peoples Flag, which always made me feel all patriotic and everything, and Ziggy just flowed into the water without even a splash, ignoring all the glorious and heroic peoples d\u00e9cor, and then he was darting around underwater like a torpedo, raising his head now and then as I looked around.\n\nJacuzzi, showers, a dry area to change in, and I sort of kicked myself, because I hadn't brought a swimsuit, but then I shrugged. Ziggy didn't wear clothes, and he was an alien, so why was I worrying, and I started undressing, and I only stopped when I was naked, and then I turned around and slid into the warm water, not at all gracefully, because I'd never really learnt to swim that well, and I'd never, actually, been to a swimming pool to swim, just to look good in a bikini, and Ziggy was right there beside me, streamlined and graceful as he slid up to the surface, his tentacles tucked in tight.\n\n\"This is almost as good as being home. Thank you for bringing me here, Stardust.\" And he was off again, like an underwater rocket.\n\nI kind of kicked off from the edge of the pool and splashed across, a bit nervously, because the water was deep and my toes could just touch the bottom, watching him as I swam, and he slowed, slowed and turned beneath me, those great black eyes looking up at me, unblinking as he flowed through the water, and he was in his element, I could see that, and one of his tentacles slipped towards me, sliding over my skin, and his skin rippled colors, and now we swam together.\n\nIt didn't take me long before I was tired, and Ziggy flowed up out of the pool in a fluid movement that I almost envied, although one sixth gee made it easy for me too, and his colors rippled so happily I was smiling as my eyes followed him.\n\n\"I am enjoying date, Stardust,\" his vocoder said, and he was looking down into the Jacuzzi.\n\n\"Would you like to sit in the Jacuzzi?\" I asked, because I wanted to as well, but I wouldn't if he'd rather do something else. I did like jacuzzi's though.\n\n\"Yes,\" Ziggy said, and he flowed into the Jacuzzi, his tentacles spreading across the surface, and his vocoder made this weird noise.",
        "\"This is very wonderful,\" he said, and there was that weird noise, and his skin rippled color, and his tentacles flexed, and he almost seemed to shudder as I sat on the side of the Jacuzzi and slipped my feet in, because it was hot.\n\n\"Female humans have different body shape from males,\" he said, looking at me, and one of his tentacles reached for me, lifting from the water, sliding over my back, around me, curling over my stomach, and the tip rose to slide over one of my breasts, and as it rose, the skin parted, and the tip extended, and the tip was soft and smooth as it touched me, and I watched it lengthen and grow.\n\n\"These are female breasts?\" he said, caressing mine. \"Study guide on humans notes that these are for reproductive purposes and to attract attentions of human males.\"\n\n\"Yes,\" I said, stifling a gasp, and then I didn't. \"They are.\" Mine were, for sure. I hadn't met many human males who weren't attracted to them. \"And they're very sensitive, Ziggy, and touching them is part of our human sexual foreplay.\" I looked him, looking at me. \"Are female heptapods different in appearance to male heptapods?\"\n\n\"Yes and no,\" Ziggy said, that tentacle tip sliding over me, sending tingles and ripples of pleasure through me. \"Your skin tastes beautiful, Stardust,\" he added. Then, \"female heptapods look the same as males on the exterior, but have female reproductive organs beneath tentacles, while heptapod male reproductive organs are at tips of tentacles, extending from within tip in response to sexual stimulation.\"\n\nI looked down at that smooth-skinned extension that protruded from the tip of the tentacle caressing my breast, and my heart was beating more than a little faster. \"Are you sexually stimulated now, Ziggy?\"\n\nBecause I was, which was really weird, because he was an alien, but we'd kissed last night. At least, I thought we'd kissed. I wasn't sure. Maybe it was the heptapod version of the start of a blowjob, and I'd teased him and stopped, and I sort of remembered what that'd been like, his tentacle caressing my lips, and, remembering, my own lips parted.\n\n\"Yes, Stardust,\" Ziggy said. \"It is very strange, because you are an alien with an entirely different and very alien body shape, physiology and outlook on life, yet I find that you appeal to me, and touching you in this way is highly stimulating to my reproductive organs, and I find myself wishing to fertilize your eggs.\" He shuddered. \"I know this is not possible, Stardust, we are different species, but yet I find myself wishing this.\"\n\n\"How do male heptapods fertilze females?\" I asked, a little breathlessly, and I wasn't thinking what I was thinking. No I wasn't. No way. \"Human males have a single sexual organ, which is....\"\n\n\"I am a Space Marine, Stardust,\" Ziggy said, and his skin colors rippled those laughter colors. \"I was on Hegemony Assault Transport for months, following evacuation from Zhuolu, and one of first Waterpaths Space Marines to use vocoder developed by Hegemony scientists. Some things all Space Marines have in common, human and heptapod.\" His skin rippled those colors again.\n\n\"What's that?\" I asked, because, really, apart from that recruiter back down dirtside, I'd never actually met a Space Marine. I dated officers, and the ones I dated were usually racist capitalist fascist oppressors of the working class from the Second American Republic Space Navy, because that was kind of exciting, the excitement of the almost-but-not-quite forbidden, and none of them had been from their Marines, even though I knew they existed, because I kind of liked those Navy uniforms.\n\n\"Talking about females, sex with females, becoming intoxicated, and fighting non-Marines,\" Ziggy said.\n\n\"And playing the guitar,\" I sort of gasped. \"Ziggy, my nipples are really sensitive.\" I was looking, and the nipple that one of his suckers was attached to was. Really sensitive. Oh my god sensitive. His sucker. Oh yes. Yes yes yes, what was he... \"Ohhhhh... ohhhhh...\"\n\n\"You taste delicious, Stardust,\" Ziggy's vocoder said, and I could see that tip of his tentacle that was protruding was swollen and throbbing, and it wasn't so small now either. It must've been eight inches long, and thick, and it seemed to be prehensile, because it was curving and moving, sliding over my skin, caressing me, and a second tentacle slipped up out of the water and slid over my other breast, and the tip of that one extruded, grew, and...\n\n\"Ohhhhhh... ohhhhh Ziggy... Ziggyyyyyy.\" Another sucker latched onto that other nipple, and with every sucking caress, little rockets of sensation thrilled through me to pool at my center, and I'd never met a guy who'd done anything like this to me, just from touching my nipples and my breasts, and my sex was all hot and wet and swollen, and I wanted... I wanted... I wanted more.\n\n\"\"How do male heptapods fertilize females?\" I gasped, kind of looking down at the tentacle extrusions, and they did actually look like, you know, erect male sexual organs, maybe a bit longer and thicker, but much the same shape, and they had that same little hole at the tip, and a sort of swollen head, with something like a glans, but there were little miniature sucker things on them, and tendrils as well, smaller than the big tendrils above where the extrusion emerged.\n\n\"Heptapod females have two reproductive ducts, one on each side of their mantle, Stardust,\" Ziggy said.\n\n\"Two?\" I said, my eyes widening a little. \"Human females only have one. How many... how many of these do you have, Ziggy?\"\n\n\"Seven,\" he said. \"One at the tip of each tentacle,\" and a third tentacle was sliding around my waist, and there was that same sexual organ extruded. Seven? Wow!\n\n\"A male heptapod inserts his tentacle tip in the ducts and the friction of movement there causes sperm to be released into the female, where it fertilizes the female's eggs, and also gives pleasure to the male. Sperm can also be released onto the female's skin, and the female will scoop the sperm up with her tentacles and fertilize the eggs herself, and it is the act of fertilizing that gives female heptapods pleasure, not the physical contact.\"\n\n\"But a male heptapod enjoys the physical contact?\" I asked, and I brushed one with my fingers, and Ziggy shivered, colors flashed across his skin, too rapid for me to make out any pattern, but his tentacle tip throbbed under my fingers, and there was this weird noise from his vocoder, and that little hole at the tip of his sexual extension jetted a great spurt of white fluid that burst thickly across my face, and through my parted lips, and into my half-open mouth, and then there was another, another, and another.\n\n\"Stardust... Stardust,\" Ziggy said, and his skin flashed crimson and scarlet. \"I am sorry, Stardust.\"\n\n\"Uh, Ziggy,\" I said, licking my lips, and he was almost writhing, his tentacles flowing from me, leaving me, and I clutched at the nearest, and I knew he was much stronger than me. Stronger than any human, for that matter, but I knew I was totally safe with him. \"Ziggy, what's wrong? What was that?\" I licked my lips and it tasted, well, salty, and my eyes widened. \"Was that your sexual release, Ziggy?\"\n\n\"Stardust,\" he said, and his color patterns said he was embarrassed. I felt that, somehow.\n\n\"You did!\" I squealed, doing my best to slide close to him, press up against him and look into those big beautiful eyes. \"Ziggy! Did you just release your sperm?\"\n\n\"Yes, Stardust,\" he said, his skin still that dull crimson and scarlet. \"\"I am sorry, Stardust, please excuse me. I did not intend to attempt to fertilize your eggs by placing my semen on your skin.\"\n\n\"You can't fertilize my eggs like that, and I don't think you can fertilize my eggs anyhow, Ziggy,\" I said. \"We're totally different species, and besides, for us, the semen has to be inserted into the female reproductive system, and we're only able to be fertilized for a few days every month, and there's not very many eggs. It's a very limited reproductive window for human females.\"\n\nI smiled, watching that tentacle tip that'd ejaculated soften, shrink and sheathe itself, disappearing from sight, and yeah, I could sort of see the similarities to a human male, but, well, seven. Wow! I wondered when the last time he'd seen a female heptapod was?\n\n\"Do you have females with you?\" I asked, curious.\n\n\"No, Stardust,\" he said, and I guess maybe he might have been sorry, but those other two tentacles were still sliding over my skin, those sexual extrusions caressing me, gently, and little shivers ran through me, and I remembered what he'd said about beaks, not mouths like hours, and I could taste him in my mouth, and his ejaculate actually tasted rather nice, and it wasn't like I lacked experience there. I mean, I'd swallowed, a lot, and of course I'd never brought shame on my family, but I was not unfamiliar with male sexual arousal, and how to satisfy men.\n\n\"Our females remain on our planets,\" he said. \"Female reproduction and egg-laying requires a largely watery environment. Our species eggs need sea in which to hatch, and we do not reproduce well in artificial habitats.\"\n\n\"What do you do for sexual release?\" I asked, because with us, or at least with the Hegemony, we had specialist female service personnel who catered for that kind of thing for the military, and they were usually selected from volunteers in the Moral Reeducation camps, where the reeducation wasn't successful, although from stuff I'd heard, the volunteering was more a case of \"you're volunteered\" than actually, like, really volunteering. Which was another reason to make sure I never brought shame on my family.\n\nYou could get away with a lot, as long as you remained untouched, in the old-fashioned sense.\n\n\"It is difficult,\" Ziggy said, and was he embarrassed? He was trying not to look at me, amd he was gently squirming, and I knew he didn't want to hurt me, but I held on tight, so I could keep looking into his eyes, and okay, I could just tell he was embarrassed. He was. Guys are guys, and they don't like to talk about all the girl emotional stuff, but that wasn't what I wanted to talk to him about. Maybe later.\n\n\"Human males jerk off,\" I said, totally confidently, because I knew that. \"And human females can jerk off human males.\" I smiled. \"With their hands.\"\n\n\"For us, it is not that simple,\" Ziggy said. \"I am not sure how to explain this to you, Stardust, but I understand what it is that human males do when they jerk off, as you say, but for us this does not result in sexual release.\"\n\n\"You achieved sexual release with me just now, Ziggy,\" I said, licking my lips. \"And I'm not a female heptapod.\"\n\n\"Stardust, I am sorry,\" Ziggy said, and somehow I just knew he really was embarrassed, if a heptapod can be embarrassed the way we humans can be, which seemed to be what was happening. Me, I wasn't actually embarrassed at all. I was sort of curious. And okay, the things his tentacles were doing to my breasts, I was actually excited, and he did, you know, taste okay. Actually, he tasted good, and I licked my lips and swallowed again, just to confirm to myself that I hadn't been sort of fantasizing, and no, I hadn't, and yes, he did.\n\n\"Its okay, Ziggy, I'm a human female, not a heptapod, female,\" I said, totally confidently. \"What we just did was totally normal and acceptable for a human female to do.\"\n\nWell, with a human male it was, and I was skirting the truth, because I didn't think the Peoples Morals Bureau would agree at all, but in my experience, which in this at least wasn't minimal, human males really enjoyed a girl holding their sexual organ in her hands, or placing their sexual organ in a female's mouth, or rubbing it against her skin until they achieved sexual release and ejaculated.\n\n\"I am not a human male, Stardust,\" Ziggy said, and looking at him, well, he was right about that. I mean, yeah, he looked a bit like a giant octopus, and his tentacles, well, I'd met guys who had tentacles, believe me, and Ziggy was way more of a gentleman than they were.\n\n\"You aren't a human male,\" I said, and I smiled and I took one of those tentacles just below the extrusion in one hand, and I used my other hand to stroke the sexual organ part with my other hand, and, my heart pounding, and licked the tip, and he tasted okay, and actually, it felt about the same as a guy's cock, just a bit bigger, and I remembered Security-General Zhao's instructions that first time I'd done this for him, and I did now what he'd instructed me to do then.\n\nOpen wide, Stardust, he's said, and now, that was exactly what I did.\n\nI opened wide, and I slid my lips down over the swollen tip of Ziggy's sexual organ. Well, one of them. The one I had in my hands, anyhow, and I did all those things I did with a human guy. I sucked, I licked, I bobbed my head, and I looked into Ziggy's eyes as I did it.\n\n\"Stardust? What are you doing?\" Ziggy said, and a couple of his tentacles slapped at the water, and another one coiled and twined around me, sliding over my skin. \"Stardust? Stardust?\"\n\nI knew exactly what I was doing, and it was sort of like blowing a guy, except you weren't face to face with his balls, or two inches from his stomach, and he wasn't holding my head and trying to get all of his cock in my mouth, although I could feel it throbbing against my tongue.\n\n\"Stardust?\" Ziggy said, and his colors were going wild, and a couple of his tentacles were going wild, thrashing the water, and I sort of hoped he could control them and keep them away from me, and then his sexual organ throbbed in my mouth, and his vocoder made static, and he ejaculated in my mouth the way males do, and actually, there wasn't too much difference from a human guy except he wasn't choking me by trying to jam his cock half way down my throat, and when he came, he pulsed slower, so there was more time to swallow everything, and I did.\n\n\"Stardust?\" Ziggy said, his thrashing tentacles stilling as those pulses died away, and I swallowed one last delicious mouthful of heptapod semen, and eased my lips up and off him.\n\n\"Did you like that, Ziggy?\" I smiled as those crazy patterns rippled across his skin, and then I smiled again as I reached for another tentacle, and took it firmly in both hands, a lot more sure of myself now, because really, guys were guys and I stroked him hard with one hand for about thirty seconds, aiming the tip at my breasts, and....\n\n\"!@$###&&%!\" the vocoder squawked, his tentacles thrashed the water into foam around him, and the tentacle tip erupted like Mount Fuji, blasting a thick white rope of creamy semen onto my breasts, one burst, then another and another and another, until my boobs were coated in white cream, dripping from my nipples into the water, and wow, there was a lot of it.\n\n\"Stardust... Stardust...\" Ziggy groaned, and I guess he was really turned on now, because there were three tentacles brushing my forearms, and those sexual extrusions were extruding, brushing my skin, and I shivered with excitement.\n\n\"Do you like that, Ziggy?\" I asked, running my hands over those swollen lengths, thinking wow, this was so cool, and really exciting as well.\n\n\"Yes, Stardust,\" Ziggy's vocoder said, and the colors on his skin were rippling wildly, crazy patterns flickering, and two of his tentacles were sliding over me, those suckers tasting me. \"Yes, Stardust, I like that very much,\" he said.\n\n\"Would you like to do this with another one?\" I asked, bending my head and kissing the tip of one, and his tentacle tip throbbed, and very delicately eased between my lips as I opened my mouth, and I started to blow him, slowly, while I stroked another tentacle tip with my hands, and a couple of his tentacles slid over my breasts, his suckers massaging me beautifully, and one coiled over my thighs, and his suckers brushed my labia and my clitoris, and I knew he was tasting me, and...\n\nI climaxed, just like that, as his sucker drew on my clitoris, and my back arched, I squealed around his tentacles in my mouth, my body shuddering as that pleasure rushed through me, and really, I hadn't let a guy do this to me since Security-General Zhao, and this was so much better. This was bliss. This was heaven. This went on and on and on, and I hung there, at the gates of paradise...\n\n\"Are you alright, Stardust?\" Ziggy asked, withdrawing his tentacle from my mouth. \"Did I injure you? I am sorry, Stardust...\"\n\n\"No, no, I'm fine, Ziggy,\" I moaned, both my hands clutching at that tentacle between my thighs, just shuddering and glowing. \"I'm better than fine, Ziggy, I just had my own sexual release.\"\n\n\"Human females have sexual release?\" Ziggy asked, and those color patterns said puzzled.\n\n\"Yes,\" I said, except it was more of a moan, because I just had another little one, rubbing his tentacle against me. \"Oh yes, human females have sexual releases too.\"\n\n\"How?\" Ziggy asked. \"I would like to give you sexual release, again, Stardust. You have already satisfied two of my tentacles.\"\n\n\"I want to satisfy them all,\" I moaned, and I took one and rubbed it on my boobs, still white with the cream of his last release, and his vocoder made a funny noise, and there were those flashing colors rippling over his skin, and his tentacle ejaculated all over my boobs, and I took that one that'd been in my mouth and moved it back, and this time he was eager, and when he came, I swallowed it all, and there were three more to go, and I was reaching for one when...\n\n\"Show me how to satisfy you again, Stardust,\" Ziggy said, and I looked at him, and I sort of smiled and I explained, and I showed him, lying on my back on the edge of the Jacuzzi, one hand on my sex, teasing my clitoris, and my other hand on one slippery heptapod-semen covered boob, and I showed him what to do to my clitoris, and my labia and where to touch me, and I explained how his tentacle couldn't go inside me, because that was where human male sexual organs went, and to do that before I was married, or at least engaged, would bring shame and dishonor on my family, and I think he understood.\n\nHe understood well enough about how to satisfy me too, and his tentacles slid all over me, touching and caressing, and he knew my boobs were so sensitive, and his suckers worked over them, covering them, and what he was doing to my nipples, I was in ecastasy, because no guy. Not even Security-General Zhao, had done thinsg like that to my boobs, and when he started teasing my clitoris, I just looked up at him, wide-eyed and moaning helplessly, and his tentacles he'd my legs wide apart so he could touch me everywhere, and he did.\n\n\"Is that good for you, Stardust?\" he asked, half holding me in the air in front of him so he could watch me as he caressed me, and I just looked at him, and sobbed.\n\n\"Yes, Ziggy,\" I moaned. \"Yes, that's good, that's so good...\" and it was better than good, it was ecstasy, and when I started to climax, I just couldn't stop, because his tentacles knew exactly how to touch me and where I needed to be touched, and...\n\n\"You taste so good, Stardust,\" he said, his suckers working over my labia, and I was so swollen and wet and sensitive, and I knew he was tasting me with every sucker on me, and he drew on my clitoris, gentle, then hard when I needed hard, and...\n\n\"Ohhhhhh... ohhhhhhh... ohhhh Ziggy... oh Ziggy yes... yes yes yes...\" and I couldn't stop climaxing, one after another, and I opened my mouth wide for him, and he knew what I wanted to do for him, and he gave me one of his sexual organs for my mouth and when he came, I swallowed and swallowed and swallowed, climaxing all over again, and then I stroked him with two hands at once, and I knew what he needed.\n\n\"Fertilize me, Ziggy,\" I moaned, because he'd told me that heptapods sometimes sprayed their semen over the skin of the females, who collected it and used it to fertilize their eggs, and I wasn't going to do that, but I was going to give him what he wanted. \"Fertilize me,\" I moaned, stroking him hard and fast both of them at once, and he ejaculated all over my boobs, and there was so much of it, and I smiled and scooped it up with my hands and rubbed it all over my face, and licked it from my hands, and he watched me swallow it and he was so excited that two more of his tentacles ejaculated onto me, and was so excited I climaxed again, so hard that by the time it was over, I was limp, and I just hung there in his tentacles, looking at him, and he looked at me, and I knew we were both really happy."
    ],
    "authorname": "ChloeTzang",
    "tags": [
        "aliens",
        "asian",
        "chloe tzang",
        "chloetzang",
        "first time",
        "geek day",
        "geek pride",
        "tentacle sex",
        "tentacles",
        "virgin"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/i-married-a-heptapod"
}
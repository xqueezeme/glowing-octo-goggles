{
    "title": "Pleasure Spots: Anal Education",
    "pages": [
        "As she lounged in her chic downtown office, which she customized herself, Vanessa stared at her favorite client.\n\nThat client was Dr. Morgan Latrell. A sex therapist. A young, fashionable and hip one at that, who was fun, charming, and brought in lots of revenue. Isn't that every professional's dream client? She even wore those unnecessary thick framed glasses for added effect.\n\nThey often had the weirdest discussions in that office in their years of knowing each other. But today was supposed to be about business. Vanessa was a literary agent and the hot doctor had a new book in the works.\n\n\"Okay, now seriously,\" Morgan said, calming down from the laughter they shared. \"My manuscript, what do you think so far?\"\n\n\"Well, the good news is I've been in close contact with the publisher, and they think...\"\n\nMorgan playfully tsked her finger, before pointing at her agent. \"No, no. I want to know what you think. The publisher is going to sell it anyway. I want some honest feedback from you.\"\n\n\"It's good,\" Vanessa said curtly. \n\n\"That's all? It's good? That means you hate it.\"\n\n\"No, I think it's great. It'll be helpful for a lot of people.\"\n\n\"You're my target audience,\" Morgan replied. \"A married woman in her sexual prime. So come on, tell me what you really think. Would you ever use any of the tips?\"\n\nVanessa couldn't help but glance at her bookshelf. It was filled with books written by clients of hers. Modern day literature. Best sellers. Some, she considered to be masterpieces. One of which was being developed as a movie with a famous Hollywood actor (a small independent movie, but a movie nonetheless...)\n\nThose books are Vanessa's pride and joy, helping people achieve their dreams and bringing great writing to the world. She could certainly talk about those books for hours on end. Anything ranging from plot points, her feelings on them, as well as the marketing and business side of things.\n\nBut now she was dealing with a sex manual. One with an eye catching name:\n\nPleasure Spots: 15 Delights for Every Couple by Dr. Morgan Latrell.\n\nSure, Vanessa was proud to represent such a book and present them to the publisher. After all, previous books by Dr. Latrell had made good profits, and most importantly, have helped thousands of couples around the world achieve a better sex life.\n\nBut frankly, discussing these topics were enough to make her blush. Especially when the Pleasure Spots book was laced with explicit sexual acts.\n\nNevertheless, she answered. \"I honestly think it's a great book. I'm positive it'll help plenty of couples.\"\n\n\"Do you find the tips to be practical?\"\n\n\"Sure, of course.\"\n\nMorgan smiled, \"Which?\"\n\n\"Most of them, anyway.\"\n\n\"Don't be shy,\" Morgan pried further. \"What was your favorite chapter? I bet it was the oral sex instructional, wasn't it? Have you used any of those tips on your husband?\"\n\nVanessa gave a short sigh. \"Yes and yes.\"\n\n\"Oh my. Naughty girl. But I'm glad they were useful to you. Those were skills I've acquired over a very long career.\"\n\n\"Okay, I get it, you're the Liam Neeson of giving blowjobs,\" Vanessa quipped. \"Good for you. Now let's get back to business. You know, the reason you're here today.\"\n\n\"This is part of business. It's part of the book. I still need to work on the prologue and epilogue. Something that'll tie the book together.\"\n\nVanessa thought for a moment. \"That's true. Why not just a re-do of your last book? Say what you've learned in the past few years and how it'll help couples succeed.\"\n\n\"Too repetitive. Besides, that information is all over my website and blog. I need something else.\"\n\n\"How about interviews with some of your biggest clients?\" Vanessa offered. \"It'll add a personal touch to the story.\"\n\nMorgan smiled, \"You're a genius!\"\n\n\"I try. Thanks.\"\n\n\"Speaking of which, you don't seem comfortable with all the topics in my book. At least that's the impression I'm getting.\"\n\nVanessa flashed a puzzled expression. \"What's this got to do with anything?\"\n\n\"It's totally relevant. And I'm curious. So, tell me. Which part doesn't jibe with you?\"\n\n\"Really?\"\n\n\"Yes, really,\" Morgan insisted. \"Answer the question.\"\n\n\"The anal sex chapter seemed a bit...off...to me. From my perspective, anyway. It seemed like you painted too much of a rosy picture.\"\n\nA sly grin suddenly appeared on the lips of Dr. Latrell. \"I think I've just found what I'm looking for.\"\n\n\"Oh no,\" Vanessa replied, shaking her head. \"You're not dragging me into this.\"\n\n\"You're perfect. Get that, perfect, for what I'm looking for. You're married, cynical, and full of doubt that this will work. Exactly the kind of person I'm looking to convert.\"\n\nVanessa shot a mean glance, which wasn't scaring anyone. \"First of all, this would damage my reputation as a respectable literary agent if everyone knows what I do with my butt. Secondly, my butt is off limits.\"\n\n\"No one is going to know. It'll be anonymous. Or I'll give you a pseudonym. Problem solved on the privacy part.\"\n\n\"Fine, but I'm still not doing anything with my ass.\"\n\n\"Not even for your husband?\"\n\n\"No way.\"\n\nMorgan raised an eyebrow. \"Too well-endowed?\"\n\n\"It's not the size. I'm just not comfortable doing it. End of story.\"\n\n\"Okay, fine. I won't press the issue anymore. But like I wrote in my book, first time anal makes a great gift for special occasions. And don't you have a wedding anniversary coming up soon?\"\n\nThat dreaded social media. Why did I have to put that on my facebook? Why did I have to tweet about it? A one-year wedding anniversary isn't something to brag about. But these days, maybe it is.\n\n\"Believe me, Keith wouldn't be interested. He'd probably even turn it down.\"\n\nMorgan roared with laughter. \"A guy turning down anal sex? From his own wife as an anniversary gift? Too funny.\"\n\n\"What? It's true. He wouldn't be interested, unless I was adamant about it.\"\n\n\"Honey, I hate to break the news to you, but all men are interested in claiming a woman's asshole.\"\n\n\"You think so?\"\n\n\"Most are, anyway,\" Morgan replied, then pretending to think. \"Do I need to explain this? Hmmm...let's see. Well, men do love a tight hole. Also it's submissive, it's taboo, it shows ownership which plays to their egos, it...\"\n\n\"Okay, okay. I don't need a list. But I doubt it's something Keith would be into.\"\n\n\"What makes you so sure?\"\n\n\"Because he's never asked. Trust me, I know him. If he wanted anything like that, he would have brought it to my attention.\"\n\n\"Don't forget you're talking to a sex therapist,\" Morgan reminded. \"A high-educated one at that. It's common for people in healthy sexual relationships to keep things from their partner. It can be embarrassing. People don't want to be judged or risk offending their partner, no matter how loving the relationship is.\"\n\nObviously that was true. Everyone does have their secrets and their little fantasies or kinks. Vanessa certainly had a few minor fantasies that Keith didn't know about. That's normal. But anal? If Keith was interested in exploring that avenue, he would have asked her about it, surely?\n\n\"You're wrong,\" Vanessa said, partially to convince herself. \"But I'm going to ask him anyway. Just to prove how wrong you actually are.\"\n\n\"And if I'm right?\"\n\n\"If you're right, then you're right.\"\n\nMorgan shook her head, smiling. \"No, if I'm right, then you'll be the focus of my prologue and epilogue. What better subject than you? We'll have a blast doing this research together.\"\n\n\"Somehow, the thought of research and my anal virginity don't belong together.\"\n\n\"It should. And it will.\"\n\nThere was almost a playful giddiness to Dr. Latrell. As if the agent was now the perfect test subject.\n\n***\n\nInstead of cooking, Vanessa bought Chinese food on the way home. With the big question on her mind, the last thing she wanted to do was serve Keith her bland cooking. She needed to get things in the right mood, not that he'd be offended. This was more for her.\n\nThey ate and there was a feeling that she was distant. She nodded at everything he said, followed with the occasional 'uh huh.'\n\n\"Is everything okay?\" he finally asked.\n\nIt was now or never. And it wasn't even such a big deal, right? Vanessa realized that she was blowing things way out of proportion and needed to end this once and for all.\n\n\"Anal sex. Yes or no?\"\n\nKeith was visibly taken aback. \"Huh? Did I miss something?\"\n\n\"Sorry for the bluntness,\" Vanessa replied, shaking her head. \"I had the craziest day at work with a client. You remember Morgan Latrell, right?\"\n\nHe smiled and nodded. That sex therapist was the reason Vanessa had suddenly become so amazing at oral sex. Porn star good! He resisted the urge to express his fawning admiration towards the doctor's work.\n\nThey had also met on several occasions, when Keith had been invited by his wife to various publishing events. If Keith had any idea the kinds of joy her writings would bring to his sex life, he'd have bought Dr. Latrell a pearl bracelet. \n\n\"How could I forget?\" he continued smiling. \"Of course I remember her. The lovely young therapist with the thick framed glasses.\"\n\nVanessa saw right through this. \"Let's be honest, you don't care about those glasses. She's the author of that manuscript with all the oral sex techniques I've been using lately.\"\n\n\"Oh, right. That too.\"\n\n\"Anyway, she says that most guys secretly want anal sex with their partners, but are sometimes too afraid to ask. Can you believe it?\"\n\nHe shrugged, \"What's hard to believe about that?\"\n\n\"So it's true,\" she replied, squinting her eyes. \"At least for you, anyway.\"\n\n\"You're acting like this is some deviant secret. It's sex.\"\n\nVanessa playfully sighed, \"Okay, I'm clearly overreacting, which I have a tendency of doing.\"\n\n\"But why?\"\n\n\"Because I thought we were open about this stuff,\" she replied in earnest. \"I guess I don't like the idea of us keeping things from each other, including our fantasies.\"\n\n\"I'm not going to cheat.\"\n\n\"I never said you were.\"\n\n\"But it seems like that's what you're implying,\" he said.\n\nShe held her hands up. \"Okay, let's start over here. All I'm saying is that I'm surprised you never asked, if you wanted it.\"\n\n\"I knew you'd say no.\"\n\n\"How?\"\n\n\"You're always open about your interests,\" he replied. \"And you've never once mentioned anal sex. At any point. So, I didn't want to pester you about it or you'd think I'm a perv, which I am.\"\n\nKeith added a light smile at the end to keep the mood light, which she appreciated. It allowed her to keep her guard down.\n\n\"Well, I'm glad we've cleared this up.\"\n\n\"Do you have any fantasies I don't know about?\" he asked.\n\nVanessa tensed, hard. \"This conversation is about you, not me.\"\n\n\"Don't do that. Let's hear it...\"\n\nShe sighed, \"I guess if I had one fantasy that you don't know about, it would be someone watching us have sex. You know, the whole exhibitionist/voyeur thing. I've always thought that would be kind of hot.\"\n\n\"Oh really,\" he replied, eyebrow raised. \"And why haven't you mentioned this before?\"\n\n\"For precisely this very reason. You're giving me that strange look, like I'm a perv.\"\n\n\"We're both perverts, apparently.\"\n\n\"Within reason,\" she clarified. \"We're a normal, healthy loving couple.\"\n\n\"Exactly, with desires for anal sex and voyeurism.\"\n\n\"I guess that does make us perverts,\" she laughed. \"Within reason of course.\"\n\n\"But since we're not pursuing this, it would also make us another sexually unfulfilled couple, doesn't it?\"\n\nShe shot a death glare. \"I do fulfill your desires. And you fulfill mine.\"\n\n\"But now we're admitting that we have other desires, that we didn't share before.\"\n\n\"So what are you saying? You want to fuck my ass?\"\n\n\"That's a start.\"\n\nVanessa picked up a broccoli from her plate and threw it at her husband's face, which he caught and ate, thanking her for the nutritious vegetable. That bastard.\n\n\"You asked,\" he pointed out, chewing the food. \"Besides, would it really be such a big deal?\"\n\nFor some reason, Vanessa felt that she was at a crossroads in her marriage and sex life. If she didn't do this, then the thought of her husband being unsatisfied in some way, however immaterial, would always linger. If she did this, well, sex is sex. Besides, she could always stop if things got too painful, she figured.\n\n\"How would you feel about doing this for our anniversary?\" she asked.\n\n\"Wait, really?\"\n\n\"Yes.\"\n\n\"You were so defensive about it a moment ago.\"\n\nShe reached out and held his hand. \"We'll go slow. Dr. Latrell is an expert on the matter. We'll use the tips from her book, and if I'm uncomfortable, then we'll stop.\"\n\n\"I have a feeling our anniversary is going to be memorable.\"\n\n\"It better be.\"\n\n\"What about your exhibitionist fantasy?\" he asked. \"How should we proceed with that? Any of your friends in mind?\"\n\nShe released his hand and slapped his arm. \"Keith!\"\n\n\"It was only a joke. Or maybe that's for next year's anniversary.\"\n\n\"Focus on this year's anniversary, mister.\"\n\nVanessa gave a wry smile and sank to her knees under the dining table. She'd be needing anal advice from Dr. Latrell soon, but for now, she'll have to stick with the new oral techniques she had acquired.\n\n***\n\nAfter dinner, while Keith was watching sports in the living room, Vanessa headed to the bedroom to satisfy her other addictions. Tweets, facebook updates, emails to friends and family, and updates with her clients.\n\nIn between, she texted Morgan everything. After a few more back and forth texts, Morgan called and Vanessa went into all the details.\n\n\"I knew it,\" Morgan said with a certain slyness, like this was so obvious.\n\n\"Okay, so you were right, now what?\"\n\n\"This is for your upcoming anniversary night, correct?\"\n\n\"It is,\" Vanessa confirmed. \"Tuesday night.\"\n\n\"Excellent!\" Morgan proclaimed. \"My schedule is free then. What time should I come over?\"\n\n\"Pardon?\"\n\n\"For the anal deflowering on your anniversary; what time should I be there?\"\n\n\"Tell me that's a joke,\" Vanessa asked, knowing this probably wasn't.\n\n\"Oh, grow up. Both of you get to have steamy hot anal sex. Plus you get to live out your exhibitionist fantasy. And I can have more details for the prologue of my book. We all win!\"\n\nAll sorts of thoughts swirled through Vanessa's head. Explicit ones. She imagined herself bent over the bed, while Keith roughly fucks her ass from behind, and Dr. Latrell watching them intensely through those thick framed glasses, maybe even rubbing herself in the process. How very unnerving. \n\nBut still, the doctor was right. They would all win. And if Vanessa were honest with herself, the idea did sound totally hot. A clenching feeling appeared between her legs and she felt a spot of wetness.\n\n\"I'd have to ask Keith,\" she said.\n\nMorgan laughed. \"Like he'd refuse. Let's meet for lunch tomorrow. My treat. We'll go over the game plan.\"\n\nThat seemed to be the definite cue that the phone conversation was over, and they said their 'byes' for the night. Vanessa put her phone down and thought for a long moment. What the hell have I gotten myself into? She went down the stairs hoping Keith could talk some sense into this whole thing.\n\n***\n\nDr. Latrell was proven right again. Keith was in favor of this anniversary plan, though he did tried to contain himself. After all, it wouldn't be proper for a husband to be so enthusiastic for inviting another woman to their bedroom. But it was clear he wanted it to happen.\n\nSo when Vanessa met Morgan the next day for lunch, they had much to discuss. They were both dressed in their fashionable office attires, with skirts, blazers, and matching blouses. They looked every bit like professional women, but each brought their own kind sass to their professions. \n\nThough they weren't talking business today. Well, sort of. This directly related to Dr. Latrell's prologue and epilogue for an upcoming book, which Vanessa had to continuously remind herself.\n\n\"It's simple,\" Morgan explained, taking a sip of her soda. \"Women like anal sex because there are many nerve endings which are sensitive to the touch. Same for men. The pleasure can be intense if done right.\"\n\nLuckily the diner was crowded and packed, so no one could actually hear them. One of the perks in living in a big city.\n\n\"Will it hurt?\"\n\n\"I'm not going to lie. Yes, it'll hurt. But I'm a professional at this.\"\n\n\"How hands-on have you been with actual clients?\" Vanessa inquired.\n\n\"It depends on their comfort levels.\"\n\n\"Any specifics you can share with me?\"\n\nMorgan smiled and leaned in. \"Specifically, I've gotten hands-on when clients have asked me to. Usually for things like guidance. For instance, if it's something like oral sex, I'll get down on my knees and watch, inches away, and provide instructions and techniques in real time.\"\n\n\"Wow.\"\n\n\"For anal sex, I've actually lubricated wives in front of their husbands, to show these guys how it's supposed to be done. Nice, slow, lovingly, with lots of lube.\"\n\n\"Goodness.\"\n\nMorgan nodded. \"Goodness, indeed. Being a sex therapist can be messy work, at least for me. But it's so rewarding. There's nothing more satisfying to me than a sexually happy couple.\"\n\n\"What happens after you've prepped them, orally or anally. I mean, do you just watch them in action?\"\n\n\"Not watch, guide. I'm like a porn director. And they are my performers. I simply tell them what to do.\" \n\n\"Is that what you plan on doing for us?\"\n\n\"I'm open to anything,\" Morgan replied. \"Ideally, I'd be the one who lubricates you. Keith can learn my lube technique.\"\n\nThe thought of exposing her rectum to a client suddenly made Vanessa lose her appetite. Sure it was scary and humiliating, but she tried to focus on the good side of all this. And she had to constantly remind herself that she was dealing with a highly paid sex therapist, who must be used to dealing and seeing all sorts of things.\n\nVanessa slowly nodded. \"That sounds doable.\"\n\n\"Would you be okay if I fluffed him?\"\n\n\"You mean, suck his cock?\" Vanessa asked skeptically.\n\nMorgan pursed her lips. \"I don't mind. Assuming you're okay with that.\"\n\n\"We'll have to discuss that later.\"\n\n\"Fair enough. I think it would work best that way, with you bent over and all. For proper penetration of your small hole, Keith would have to be rock hard. So I wouldn't mind sucking him for a few seconds to get him ready.\"\n\nFuck...\n\n\"We'll discuss that later,\" Vanessa repeated.\n\n\"Got it.\"\n\nNow it was Vanessa's turn to lean forward. \"Be honest, do you actually think I would enjoy this? Can any woman be-- you know -- trained for this? Is it something any woman can get used to?\"\n\n\"Why not?\" Morgan smiled. \"It's far more common these days. And it's all relative. Women are different sizes and can handle different things. With my techniques, you'll be able to accommodate your husband. Trust me.\"\n\n\"Do you enjoy it?\"\n\nMorgan's smile only grew. \"I love it. I really do. It feels far more intense than vaginal sex. I find that it hits all sorts of pleasure inducing nerves from deep within nature. I feel like I'm sucking my partner deep inside that tight, forbidden hole, which is very taboo. And I'm a lover of taboo things.\"\n\nThere was a lust in the doctor's eyes, which made Vanessa all the more curious about the anal experience. If this doctor could help so many people enjoy this (along with various other things), then why not her too? Vanessa was in decent shape, a former high school athlete, and she considered herself to be a tough woman.\n\n\"Sounds riveting,\" Vanessa said. \n\n\"Quite. It's something you'll have to experience, the proper way.\"\n\n\"I'm sure it's going to be an anniversary to remember.\"\n\nThere was a gleam in the doctor's eyes which instantly made Vanessa nervous, yet oh-so excited.",
        "After their lunch meeting had ended, Vanessa went back to her office where she had emails to answer, phone calls to make, as well as other miscellaneous tasks that come with being an agent.\n\nAll the while, she had been told to expect an email from the doctor regarding the game plan. That email was all she could think about as she continued her daily business.\n\nFinally, before she was about to head home, an email from Morgan came.\n\nIt was entitled: Your anal virginity\n\nHi Vanessa,\n\nHere's the approach I think the three of us should have. It's only a suggestion, but I think this strategy would work best. Let me know if you'd like to make any changes!\n\nlove,\n\nMorgan\n\n- Let Keith read my chapter on anal deflowering beforehand.\n\n- Cleanliness is very important, so I suggest you take a quick shower and clean yourself 'down there.'\n\n- Wear something light. I recommend a negligee, nothing underneath for easy access.\n\n- Keith and I will also dress nicely, though less revealing, as our nudity is not important.\n\n- We'll do this in your bedroom. The decor must be romantic and sweet. Leave that to me! Perfect for your anniversary night!\n\n- I will 'host' this event.\n\n- I will bring a variety of sex toys, lubricants, and oils. We'll work slowly.\n\n- Keith, obviously, will be the one screwing your ass. That will be the grand finale.\n\n- I'm open to 'fluffing' Keith, but I don't want to overstep my bounds. So we'll see how it goes.\n\n- Forward this email to Keith to let him know our plans.\n\n- We'll do this 10 pm on your anniversary night, to close the day with a bang. I hope that time is okay, if not, we can change things.\n\n- And do you mind if I take notes for my book? I always have tons of thoughts during these sessions, and I don't want to lose them. It's just what I need to finish off my book with a true story.\n\nLet me know!\n\nThe email made Vanessa smile, especially because of how specific it was. That doctor knew her stuff and had done this so many times, she was practically nonchalant about it.\n\nShe sat at her desk thinking for a long moment. Hell yes, she was coming around to this. But the detail? Details, details, details...\n\nA simple click and she typed her reply:\n\nSounds like a plan Morgan!\n\nYou're the doctor, so you know best. I agree with your ideas. Also, go ahead and take notes. This is for your book, after all. Oh, the things I'd do for my clients. I should get paid more as your agent, but then again, this might be payment enough. \n\nFinally, regarding Keith and 'fluffing,' go ahead. I know he won't mind. It might even be kind of hot for me to watch. Besides, even though you'd be looking into my ass and lubricating it, I'm still too modest to let you watch me suck Keith's cock. Weird, right? So go ahead and do that for me.\n\nI'll forward all this to Keith before I change my mind.\n\nlove,\n\nVanessa\n\nOnce that email was sent, she forwarded everything to her husband, who was still at work. She smiled naughtily to herself, imagining Keith getting a hard-on at his job while checking his messages. She imagined him having to do something while trying to hide the bulge in his pants, knowing that he'd finally be able to claim his wife's ass, and that Morgan will suck his dick.\n\nWas that a fantasy of his? Morgan sucking his dick? She wondered. In the end, Dr. Latrell was hot, so of course Keith had fantasized about it.\n\nShe leaned back and wondered how this craziness all came about. Her eyes wandered back to her bookshelf of prized literature, then she realized, this is all part of the job, isn't it?\n\n***\n\nAs expected, the anniversary dinner went well. Keith had made reservations for a fancy, overpriced restaurant, and Vanessa was treated like a princess. She couldn't remember the last time Keith had smiled so much and was upbeat about everything. He even gushed over some of the dishes that were underwhelming and overpriced. Vanessa had to wonder if he was just excited over the prospect of claiming her ass for the first time in front of a hot sex therapist. \n\nMaybe he had to keep her in a great mood so she wouldn't change her mind about it. But, she didn't want to bring that up, and maybe, who knows, maybe Keith was just in a great mood because he loved her so much. Oh, who was she kidding. Of course anal sex was on his mind! It was something new, taboo, and forbidden. \n\nNow that it was past 10, Vanessa looked at her reflection in the bathroom mirror. She was dressed in a sexy red negligee, which was mostly see-through, but covered her private parts. She was totally naked underneath and enjoyed the feeling of the soft fabric against her soft skin.\n\nFor an anniversary night like this, filled with romance and sexual adventure, she needed to look her best. No, extraordinary! She gave her hair another toss with her hands. She touched up her makeup so she'd have a classy, yet pornstar-ish look about her. It was a huge departure from her normal look in the office, yet that's what made it so fun, right?\n\nA deep breath for extra confidence and she felt she was ready for this endeavor. Morgan had already arrived and was waiting in the bedroom along with Keith.\n\nShe opened the door and stepped into her bedroom, and there they were: Keith was still dressed nicely in the outfit he wore for dinner. Morgan wore a sleek black dress and was barefoot on the carpet, wearing those same trademark black framed glasses.\n\nBoth of them looked so pleased to see Vanessa, admiring her sexy appearance in that small red negligee. The room was done up nicely and there were even candles lit and rose petals laid around. There were also three glasses of champagne next to the variety of small sex toys and lubricants.\n\n\"You look lovely,\" Morgan grinned.\n\nKeith looked excited at this new vision of his wife, as he also expressed the pleasure of what he was seeing. After all, it wasn't very often that Vanessa would dress up like this, with that potent makeup and lingerie combination. As open as she could be sexually, this wasn't necessarily her style. But on a night like tonight? A major exception was made.\n\n\"Thank you both,\" Vanessa replied, then playfully twirling herself around to model her negligee. \n\nIt was well-known that she took ballet in her youth, and she was glad that she still had the moves for it. Unfortunately, she twirled a little too hard, and the bottom of the negligee breezed upwards, giving a premature glimpse of her shaved pussy and nice butt. She quickly fixed her outfit and they all shared a laugh.\n\nMorgan took the tray of champagne and handed one each to the married couple, and one for herself. It was time for a quick toast.\n\n\"To a one year anniversary,\" Morgan said, holding up her glass. \"To my new book. And some hot anal sex.\"\n\nThey laughed again to ease the nerves as they also consumed their drinks. Once that little bit of celebration was out of the way, it was time for business.\n\nMorgan sat comfortably on a chair, in a highly seductive manner, while the married couple sat on the bed, listening to every word. The doctor started with some introductory notes on the matter, which came from years of working with clients, giving seminars, and writing for various outlets.\n\n\"When having anal sex, two things are very important,\" Morgan explained professionally. \"Starting at a slow pace, and using the right amount of lubrication. The anus is a dry area, unlike the vagina, and needs delicate treatment. Relaxation is key. Arousal makes things even better. Above all else, take things slow. Step by step. Before you know it, you'll no longer be an anal virgin.\"\n\nThe couple gave each other an adventurous look, like they were ready for anything.\n\n\"Now, as for your exhibitionist fantasy,\" Morgan said to Vanessa. \"I want Keith to eat your pussy while I watch. This should get your blood flowing and set you in the right mood.\"\n\nWhen a stunned Vanessa turned to her husband again, she saw that he was nothing but smiles. How else would a man in his position react?\n\nInstead of giving an awkward reply or making a fuss about it, Vanessa simplified things. She spread her legs slowly and pulled the bottom of her negligee up. With her pussy revealed, the mood in the bedroom changed-- for the better.\n\nKeith kissed her on the cheek and smiled, \"I love you, baby.\"\n\nThen he sank to his knees to serve that pussy he knew all too well. Vanessa moaned as her husband went to work. She had become accustomed to this pleasurable sensation, as Keith knew exactly how to please her. She had told him all of her preferences and sensitive spots.\n\nBut what made this particularly raunchy was that Morgan was looking her straight in the eyes, with a big grin and her glasses tilted forward.\n\nNeither of them broke eye contact. Vanessa knew what this was about. The doctor was pushing the boundaries and had wanted Vanessa to be brave about this. To enjoy this exhibitionist feeling in the bedroom. So Vanessa just stared right back at the doctor, seeing who would break first, but neither of them did.\n\nThat was, until Keith plunged his tongue deep into her pussy, causing Vanessa to tilt her head back and moan.\n\n\"God, you're going to make me cum,\" she whispered.\n\nThe exhibitionist feeling of her client watching her, and her husband's oral technique was all too much.\n\n\"Go ahead,\" Morgan said. \"I want to see how you orgasm, your facial expressions and all. An orgasm would be a great way to start your anal training.\"\n\nAs if on command, an orgasmic sensation rushed through Vanessa and she came in her husband's mouth. It was a short and fast one. Not too powerful, which was a good thing, as she needed energy for the anal fucking. But it felt delightful and got her blood flowing.\n\nShe relaxed and briefly laid on the bed, while her husband pulled his mouth away.\n\n\"Bravo,\" Morgan said, standing up to approach the couple. \"You're becoming uninhibited. I like seeing you like this.\"\n\n\"Apparently you're about to see a lot more.\"\n\n\"You're right. Turn around. Lay on your stomach. Keep your feet on the floor.\"\n\nVanessa gave a playful look which read, I better be in good hands, before turning over to follow instructions. She laid on her stomach with her feet off the bed. A perfect position for anal fucking.\n\nBoth the doctor and her husband got behind her. Then she felt someone hike her negligee up and toss it over her back, leaving her butt exposed.\n\n\"Cute bottom,\" Morgan said, rubbing her hands over it. \"You have a nice ass, as I suspected. Now spread 'em.\"\n\nVanessa spread herself, knowing that both of them had a clear view of her wet pussy by now, and most importantly of all-- her little brown anus.\n\nThe view to her ass was made clearer when Morgan spread each of the butt cheeks apart, revealing the anus in its entirety. It was held like that for a while so they could have a good look. Vanessa felt embarrassed by this.\n\nMorgan said to the couple, \"I like to start with stimulating the outer area of the anus, working my way in. I like using my three touches; fingers, lips, tongue.\"\n\nFingers? Lips? Tongue? Vanessa's eyes widened in anticipation for what this might feel like in her little hole, since it was her friend/client doing this for her, in front of her husband! What a combination.\n\nA moment later, Vanessa's curiosity was swept away and she felt the real thing. She felt her outer anus being rubbed by Morgan's soft fingers. The fingers twirled around gently before making their way to the middle, rubbing all the lines that surrounded the anus.\n\n\"Looks clean enough,\" Morgan said during the finger inspection.\n\nThat was when the doctor stuck her tongue out and licked the outer area of Vanessa's hole, before licking across the anus, feeling all the lines. The sensation made Vanessa clench and turn wide eyed. How delightful this felt. So ticklish and awkward. There was no doubt in her mind that she'd be asking her husband for this on a regular basis, and maybe she'd return the favor for him too.\n\nShe made a squeaking noise with her mouth the moment that tongue slipped inside of her tight hole. The tongue swirled around, making Vanessa smile. She nearly frowned when the tongue pulled out.\n\n\"Next comes the lubrication,\" Morgan said to Keith. \"This is fairly simple. There are various kinds of lube, including oils, silicone based lube, and maybe even saliva. Tonight, we'll stick with traditional anal lube. Watch how I apply it, it's simple.\"\n\nMorgan opened the container of lube and held it with one hand, while using her other hand to pull a butt cheek aside. With the anus partially spread, Morgan squeezed the container and coated the anus with lube.\n\nThe sex therapist explained, \"This is like marinating meat. Rub, rub, rub. The outer part needs lube because that's where it needs to open. It also needs to go inside where all the fucking will occur. The rectal canal is a dry place. So handle it with love.\"\n\nWith that, Morgan plunged a finger inside of the ass, making Vanessa squirm in the process. Then two fingers, which made Vanessa gasp. The fingers probed around, going as far in as possible, coating that delicate rectal canal. \n\nThen the fingers slipped out.\n\n\"Next,\" Morgan said. \"A thin anal dildo is a good start, because it's slender and smooth. It's a great step towards full-on anal sex.\"\n\nThe sex therapist picked up a flesh colored thin dildo, and pressed it against the tip of the anus. With a push, it slipped inside the lubed hole, struggling to make its way inside.\n\nVanessa relished the feeling of fullness inside of her. It was something her butt had never felt before; a solid object slowly working its way inside of her canal, then being held there. It was held there for several seconds, allowing her rectum to accommodate the feeling of something that shape being inserted there.\n\nShe rested her face on the soft bed sheet, while listening to her husband converse with the sex therapist. They were talking about anal stretching and lubrication techniques. No doubt, this would be happening again. Her husband sounded like an intrigued college student with the questions he was asking, and the attention he paid with each response he got. Yes...mmm hmmm...got it...interesting... At least she knew she'd be in good hands, with a husband as smart as hers.\n\n\"How does that feel Vanessa?\" Morgan asked.\n\n\"Like there's a sex toy in my butt,\" Vanessa curtly replied.\n\n\"Excellent. By the tone in your voice, you don't seem to be in any pain. I think we're ready to begin the anal fucking now.\"\n\nWhen the thin anal dildo was pulled out of her ass, Vanessa felt a strange sensation. There was a hollowness in her ass, a gaping feeling, and she could feel a stream of air flowing inside. How very odd, indeed. A totally new sensation.\n\n\"Keith, pants off,\" Morgan ordered. \"Get naked from the waist down, big boy.\"\n\nVanessa's interest was immediately piqued. She needed to see how this would play out. She turned her head around, while her ass remained in the same position, so she could see what they were up to.\n\nHer husband was in the process of removing everything from the waist down, and the sex therapist was on her knees watching attentively.\n\nWhen he was done, he stood there with his cock almost fully erect. If this was pure vaginal sex, that cock would be ready for immediate action. But this was anal sex, and he needed to be raging.\n\n\"Vanessa, do you mind?\" Morgan asked, as they looked at each other.\n\nThe sex therapist used her hand to gesture at that cock, while still looking at Vanessa, politely asking for permission. Keith, meanwhile, did everything he could to suppress a bashful smile. He was like a virgin who had just seen a pair of breasts for the very first time. It was that kind of mischievous look.\n\n\"Go right ahead,\" Vanessa said. \"But only what's necessary.\"\n\n\"Got it.\"\n\nWhile Vanessa kept her head turned back at their direction, she watched as the sex therapist took that cock by the shaft and devoured it with her mouth. Her head quickly bobbed at lightening speed. Vanessa knew this technique from Morgan's latest manuscript, but actually seeing Morgan perform in front of her, it was a sight to behold...\n\nThis woman was a sexual goddess. A master at sucking cock. Vanessa made a mental note to ask for personal training later. \n\nAs quickly as this began, it ended just as fast. Morgan pulled her mouth away, leaving a trail of saliva hanging from her chin, which she immediately wiped way. Keith, meanwhile, was breathing heavy.\n\nAt the very least, his cock was extra lubed from Morgan's saliva. \n\n\"Now it's time to get into position,\" Morgan said, speaking like a porn director, guiding Keith into place.\n\nShe continued, \"Remember. This is nothing like porn. You can't just go to town on her ass. This is real life. You must be slow and delicate. Communication is key. Read your wife's body language.\"\n\nThe sex therapist spread Vanessa's butt cheeks wide open, spreading that lubed asshole. Keith did his part and pressed the tip of his raging hard cock against his wife's asshole.\n\n\"Vanessa, this is the toughest part,\" Morgan said. \"Relax the best you can. Just relax. If you feel any pain or discomfort, let us know.\"\n\n\"It's uncomfortable right now,\" Vanessa joked, as the tip of her husband's erection had penetrated her anus.\n\nMorgan rubbed her friend's butt. \"Poor girl. This level of pain and discomfort, you can handle. It will all be worth it. I promise.\"\n\nThe sex therapist continued coaching Keith, who slid his penetrating cock further into Vanessa's asshole. She did her best to relax. She fought with all her might not to clench onto the bed sheet. She simply let it happen. She savored the feeling of her asshole being stretched, inch by inch, to what felt like its full capacity. Thank goodness for all that lube and preparation.\n\nShe could feel herself engulfing that cock. Devouring him. It was a strange level of intimacy, that his sex would be stuffed inside of her taboo hole. And if she were honest with herself, she found the feeling (both physical and mental) to be overwhelming, and quite frankly, it was really hot.\n\nAs the sex therapist instructed, Keith held position as his cock was buried all the way inside her rectum. It was a feeling she couldn't get used to, but then again, a person isn't supposed to get used to this. What she felt was close enough. She was relaxed as she'd ever be, under this circumstance.\n\n\"Move very, very slowly,\" Morgan instructed. \"Fast movements will be painful, and could potentially damage the sensitive flesh of your wife's anus or rectum. This takes time. Again, examine your wife's body movements. She'll let you know if it's hurting, or if it's pleasurable.\"\n\nVanessa trusted her husband more than anyone else in the world. She knew that he knew all of her body movements; her desires, weaknesses, and strengths.\n\nThat assumption proved correct as Keith worked his cock slowly, gripping his hands along her waist, feeling for any reaction she may have. The cock slowly pulled back, until it felt like it was going to be pulled out, leaving a gaping feeling along the way, before slowing pushing back in to fill her rectum once more.\n\nIt was an intense feeling which took her breath away. She released a loud gasp as her anal virginity slipped way.\n\n\"So far, so good,\" Morgan said playfully. \"Yes, keep this up Keith. As for you, Vanessa, let us know if there's any pain.\"\n\n\"It feels...good...\"\n\nMorgan ran her fingers through Vanessa's hair. \"Sweet girl. You're a natural. Enjoy the pleasure.\"\n\nThe sex therapist moved away and let Keith take control of the situation. Each of them followed their instructions. Keith went slow, slow, slow, gauging his wife's reaction as he gradually worked up in speed. Vanessa did her best to relax her anus and rectal muscles so she could be properly fucked.",
        "It was such an intense and intimate love making session. As it went on, Vanessa allowed herself to enjoy the feeling of taking a cock in her ass this way, devouring it with her little taboo hole. It was exactly like the sex therapist had described; she was sucking in her lover with her forbidden area, allowing that cock to go deep within her. \n\nAnd the nerve endings. Oh yes, those nerve endings. Vanessa was being stimulated in ways she could never have imagined. It was exactly like she read in the manuscript. She never really believed it. She thought it was just fluff to make the writing in the book more sexy. Now that she was actually experiencing it, getting her ass fucked, she knew exactly what Morgan was talking about.\n\n\"Can I go faster?\" Keith asked in a rushed tone.\n\nVanessa took a deep breath of air. \"Yes...You can be rougher. I won't break...Oh god... Fuck me.\"\n\nWith the necessary permission, Keith was gradually able to unleash his desires, and Vanessa reaped the benefits of that. The stretching, tightness, and fucking all served to stimulate those forbidden nerve endings to the fullest. She was convinced that she'd be able to cum from this, even though she couldn't understand how that was even possible.\n\nAs she laid on her stomach, continuing to get fucked, Vanessa turned her head to the side to see Morgan sitting on the floor, with a pen and notepad, writing away, jotting tons of notes for the book. Was this business or pleasure? \n\nIt was both! The best of both worlds. And if anyone knew how to straddle both lines, it was Morgan, who wrote furiously, then looked up and made eye contact with Vanessa.\n\nThey smiled at each other, while Vanessa's body was rocking back and forth from the anal ravishment. Vanessa breathed harder and Morgan licked her own lips from the explicit sight.\n\nThere must have been something telling on Vanessa's facial expressions, because Morgan put the pen and notepad down, so she could approach Vanessa. \n\n\"You're about to feel the best part,\" Morgan said, rubbing her fingers through Vanessa's hair. \"Euphoria at its best.\"\n\nCould that possibly be true? She was about to find out as the culmination of things was taking its toll. She found herself making weird sounds she had never made before in bed. Grunts, moans, slurping noises. \n\nHer husband grabbed her strongly by the hips and worked his cock faster, slipping in and sliding out, thanks to all that lube. That plunging feeling inside of her asshole was still painful, so very awkward, and incredibly unusual. But like Morgan said, a euphoria was building. Vanessa's asshole was now devouring that cock much easier, taking it deep within her.\n\nWhen she looked at Morgan, she saw a lust filled woman, staring back at her with those thick framed glasses. The sex therapist had slipped a hand beneath her own dress and was brazenly masturbating in front of the couple. \n\n\"Normally I'd help you cum,\" Morgan said, furiously playing with her pussy. \"But your first anal orgasm should be something you feel on your own. Just that cock pounding your ass. I can tell that you're euphoric. Cum, let me see it.\"\n\nTheir eyes remained locked. Morgan kept on masturbating. Vanessa rocked back and forth, her face pressed onto the bed sheet. Strange noises escaping her lips and various expressions on her face.\n\nHer anus involuntarily clenched tight and she hit euphoria. Her toes curled and her eyes rolled back. Her lower back would have arched upwards, if not for her husband holding her down, still ravishing her ass. All those nerves in her anus and rectum were overwhelmed with pleasure. And her whole body was overcome with sexual sensation. \n\nKeith kept on pounding while Vanessa rested her head on the bed sheet. The euphoria still lingered, and she heard the familiar sounds of her husband grunting. Usually he'd cum in her mouth or pussy. This time he came deep in her asshole. His hands squeezing her midsection tight as he fully unloaded.\n\n\"Now that, is how you lose your anal virginity,\" Morgan said with elation.\n\nKeith laid on the bed facing up. His flaccid cock very much exposed. \n\nOn the other hand, Vanessa flipped around so she could finally lay upwards, right next to her husband. Her negligee was still hiked up, and her legs were still spread, leaving her spread pussy fully exposed.\n\n\"I think I've found a new pleasure spot,\" Vanessa said, still breathing heavy and sounding slightly dazed from that orgasm. \"God, I'll never doubt you again.\"\n\n\"Never doubt a doctor who knows her stuff.\"\n\nMorgan reached over and ran two fingers across Vanessa's dripping wet pussy, fresh from orgasm, and sucked it into her mouth. The sex therapist commented on how good it tasted.\n\nThey all laughed, and Morgan laid on the bed too, alongside the happy and well-fucked couple.\n\n***\n\nIt was amusing reading the completed manuscript, knowing that she was the star of parts of the book. Vanessa was leaning back on her chair and her heels were up on the desk.\n\nA particular passage was her favorite:\n\nOne couple I worked with remained a favorite of mine. I have known her and her husband for a while. Can you believe that in all their time together, they had never tried anal sex? That's one of the cornerstones of my book, ass play. But my main focus is to get people to try new things, to be more adventurous. After I was done with her, well, let's just say she has a new pleasure spot, one she was reluctant to try. Now she's hooked. She can't get enough of those anal orgasms. More on that in Chapter 3.\n\nVanessa kept on smiling. What a crazy notion to actually be featured in a book written by a client. A sex book, no less. Referencing her anal adventure.\n\nShe prepared an email and sent it to an editor at the publisher.\n\nPleasure spots? It's a long book. Which means there's more room to try new things from it, surely?\n\nThe End\n\nYour votes & comments are appreciated."
    ],
    "authorname": "HeyAll",
    "tags": [
        "first time anal",
        "anal",
        "anal sex",
        "sex therapist",
        "therapist",
        "husband wife",
        "wife",
        "married couple",
        "threesome",
        "sex toys"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/pleasure-spots-anal-education"
}
{
    "title": "Dawn over Sun Valley Ch. 04",
    "pages": [
        "Author's note: \n\nThank y'all for returning to my story! Another 10K-word chapter here packed full of action for you, which brings my total word count to about 35K, which is tracking quite well toward the 50K #NaNo goal, and is even on-target for finishing the whole ~75K of it within the month. Phew! \n\nAnyways, as always, please have a read, and then tell me what you think - FAVORITE, VOTE and COMMENT! Thank you :) \n\nxoxo, \n\nAnnie \n\n***** \n\nThe following week, Joe found himself hanging by the women's dorms way too frequently. \n\nHe'd upped his running schedule to twice-daily, and had adjusted his route so that his warmup and cooldown took place just behind the elongated, low-roofed building. I've turned into a freakin' peeping tom, he thought self-mockingly even as he walked down the narrow path before the crack of dawn on Thursday morning, much slower than was effective for a proper pre-run warmup, and strained his ears to hear... what? \n\nA gasp, maybe? A hitched breath? \n\nHe shook his head in annoyance and increased his speed to an easy run, leaving the buildings behind and heading towards the Western gate and the fields beyond. If nothing else, this obsession would get me fit enough for the Golden Gate Half Marathon, he thought, and made himself keep a faster pace than usual. It was better to drive himself to the edge of exhaustion than to lurk in the shadows like a stalker. A man needed to have some self-respect. \n\nBut miles later, even with his muscles and lungs protesting the unusual strain, he still couldn't get Leanne out of his mind. He knew she was back there in her room, possibly busy with... homework. The assignment that he'd given her. Practicing her new skill. \n\nJoe groaned. Imagining Leanne naked on her bed, one hand working her pussy, the other tweaking her nipples, trying out different strokes and caresses, finding just the right touch and arching into it, driving herself higher and higher, her juices leaving a large wet spot on her sheets, just like they did on their picnic blanket - \n\nDammit. Now he was hard as fuck. Which made running damn near impossible. \n\nJoe stopped and bent over, fighting for breath. He couldn't keep going like this. He needed her too bad. And sneaking around to make out on his picnic blanket, fun as it was, wasn't the kind of relationship he wanted. \n\nHe wanted a relationship with her. \n\nThe revelation kicked him in the gut, even as a smile stretched across his face. His father and sister had been nagging him mercilessly about 'finding someone'. It may just be that they were right about that, too. \n\nHe straightened, breathed deep, and resumed his run back towards the farm. His new resolution seemed to have lifted a weight off his shoulders and it felt like he could breathe easier, his achy muscles no more than a distant echo in the back of his mind, which was busy making plans. \n\nHe would court Leanne Sommers, publically and properly. No more sneaking around, no more stealing time together, no more maintaining their distance on the farm for the sake of misplaced propriety. He was ready to take it to the next level. \n\n* \n\nAlthough she'd preferred the petting zoo over any other duty, Leanne enjoyed working the dairy farm as well. \n\nNot only did it involve direct contact with the animals, but also it presented Joe and her with more opportunities to meet, as he spent most of his out-of-office hours there. \n\nSun Valley Farm was, first and foremost, a dairy farm. While Joe had been pushing to diversify the business from all-production to include agro-tourism, 'putting his UC Davis MBA into good use' as Mr. McConnel put it, the cows were still at the heart of it all. \n\nLeanne knew Joe wouldn't risk any physical intimacies there, nor candid private talks, but just being around him felt good. She was eager to learn and he was happy to teach, and the heavy underlying current of awareness between them added a thrill that they both clearly enjoyed. She especially loved the curious questions in his eyes each morning. Knowing full well what he was thinking, she's laugh and wink, which made him groan in an exaggerated, dramatic response. Leanne basked in the effect she had on him. She had never felt so sexy in her life. \n\nAnd she did do her 'homework' every day, as instructed, and enjoyed herself immensely - both the pleasure she was learning to give herself, and knowing that Joe was aware of her doing it. It felt incredibly naughty, in the best sense of the word. Having spent all her life being the perfect good girl, fighting to prove that her living on a trailer park with her single mother didn't make her 'trailer trash', it was a wholly liberating experience, doing something so... slutty. And knowing that she was appreciated, rather than condemned for it. \n\nLeanne smiled at the thought. She was driving a small tractor, pushing silage with the trac's flat front loader to spread the pile of fodder along the rails. The cows stood back as the noisy machine approached, but as soon as she passed they stuck their heads out and started munching. She imagined they were smiling at her, and her own grin grew. It felt darn good to be productive. \n\nWhen she was almost at the far end of the cow shed, she saw someone step out from behind it to block her path. Joe. He raised his hand in greeting, and she slowed to a stop and killed the engine. Joe approached her side as she was climbing down. \n\nWhen she turned around he was right there, definitely within her personal space. Her startled eyes sought his as he stepped even closer and took her upper arms in his hands, bent his head, and kissed her. \n\nWhile caught off-guard, Leanne wasn't complaining. Going up on her tiptoes, she linked her arms around his neck and returned his kiss with enthusiasm. \n\n* \n\nA few steamy-hot moments later they finally broke for air. Joe looked at Leanne with trepidation, well aware of stepping outside the boundaries he himself had set in place, though her reaction was everything he'd hoped for, and then some. \n\n\"Um, wow! Okay, just tell me what I did to deserve this, and I'll do it every day.\" Leanne cocked her head, hands on hips, and watched him shuffle his feet in uncharacteristic nerves. \n\n\"I couldn't help myself. I hope you're not mad.\" Joe peaked at her from under his lashes. \n\n\"I'm happy to kiss you anytime, Joe. It's your rules that we're breaking, not mine.\" \n\nShe didn't play games. It was one of the things he liked most about her. \n\n\"Yeah. About that. I've been thinking.\" \n\n\"Hmm. Sounds ominous.\" A single eyebrow arched up, and the corner of her mouth twitched. Joe breathed a little easier. \n\n\"Not at all. I think you're gonna like it.\" \n\n\"Oh?\" \n\nJoe took a breath. Here goes. \n\n\"Would you like to go out with me to Santa Rosa tomorrow night?\" \n\n\"What, like, on a date?\" \n\n\"Yeah. A proper date. Dinner and a movie. Or dancing. Would you like to go dancing with me again?\" \n\n\"Um... but, I mean - how come?\" \n\nThere was that little furrow between her eyes that made him want to soothe all her troubles. Instead of answering right away, though, he held out his hand, and when Leanne took it, he led them to sit on one of the hay bales in the shade. Still holding her hand, Joe found her eyes. \n\n\"Leanne, I - you deserve more than a roll in the grass when nobody's looking. You're worth breaking my goddamned no-workplace-romance rule for.\" He pursed his lips. \"I'm not gonna hide like a coward anymore, as if what we're doing is wrong.\" \n\nLeanne was staring at him, wide-eyed, and he thought she was going to protest, so he rushed on. \n\n\"I want this, whatever it is between us. I want to date you properly. I don't want to feel like a cheater, lurking in the shadows to sneak a few moments with you. I want to do this right.\" \n\nLeanne kept staring at him mutely, and he could see panic rising in her eyes. Swallowing a curse, he clamped his lips together, held his breath, and waited. \n\n* \n\nLeanne didn't know what to do. \n\nEvery cell in her body wanted to say yes! right then and there. She would love to go out with Joe - movie, dinner, dancing, the whole nine yards. She had missed on so much, growing up the way she did. Sharing a bedroom with her dying mother and then with a baby, and practically raising three young kids while working through college didn't leave any room for romance. Dating was just one more thing she desperately wanted to catch up on - with Joe. \n\nBut that would up the stakes way higher than she had gambled for. \n\nWhat they had shared so far was simple and straightforward; an honest exchange. He may say she deserved better than a roll in the grass, but for her it had been an unexpected, precious gift. Having strings attached to it would complicate things immeasurably. \n\nCould she date him, but keep her secrets to herself? Could she, in good faith, agree to a 'real' relationship, knowing it was doomed from the start? \n\nOr should she come clean, right then and there, and hope he would see past her lineage, past her lie by omission, and give her a chance for real? \n\nShe ruled out that second option right away. In all probability he would kick her out of the farm on the spot, which means no money for Bill to pay back his outstanding debt to the McConnels, no work experience for herself, and no romance for either one of them. She couldn't see any good in doing it. \n\nThe first option, on the other hand... \n\n\"I take it that your answer is 'no', then.\" Joe's voice, soft as it were, broke through the silence between them, startling her. \n\n\"No! That's - that's not it.\" \n\n\"What is it, then?\" She could hear the hurt in his voice, and it ate at her insides. I don't want to hurt you, Joe. \n\n\"I just don't want there to be... undue expectations attached to it.\" \n\nJoe leaned back, a look of incredulity on his face. \"Seriously, Leanne? Is that what you think?\" He shook his head, but then, after a moment, his voice gentled, as did his fingers around her hand. \n\n\"Your virginity is safe for as long as you want it, princess. That's not what this is about. I thought you knew that.\" \n\n\"Oh God. Shoot me now.\" Leanne blushed crimson, and buried her face in her hands. After a moment, though, she breathed deep, and straightened. \n\n\"Joe, that's not what I'm talking about. I trust you. I know you won't do anything I don't want you to. Besides I - I think I want to - to -\" \n\nHe blew a hard breath. \"Okay, okay. That's not it then.\" And then - \"So, why, Leanne? Why not date me for real? I thought we were having a good time together?\" \n\nLeanne bit her lip, but finally answered. \"I would love to go out with you, Joe. As long as we both remember this is just - temporary. Let's not pretend it to be something else, okay?\" \n\nFor the longest time he just stared at her. And then he tilted his head, as if seeing her in a new light. \"Are you saying that I shouldn't aim for anything long-term?\" \n\nLeanne bit on her lip so hard she could taste blood. But then she nodded. \"I - yeah. I'm saying I am a seasonal worker, and I will leave in a few months. I want to be clear about that.\" \n\nJoe considered her again, his jaw working. And then, he nodded, too. \"Okay. Duly noted.\" \n\nLeanne inhaled deeply. Okay, then. Out loud, she asked - \"So, which movie did you have in mind?\" \n\n* \n\nIt was a silly Rom-Com, and Joe had to admit he had thoroughly enjoyed it. \n\nThey had both groaned in unison at the more ridiculous parts, and chuckled at the quirky bits. More importantly, Leanne cuddled under his arm as soon as they sat down, and had squeezed into his side at the mushy, ultra-romantic happy ending. Their date, he concluded with satisfaction, was going well so far. It was a relief after its rocky start. \n\nHe had waited for her by his truck at six PM, as agreed. Tammy, his sister, saw him standing there, and had swung by to discuss some less-than-urgent issues. He had been blatantly impatient, and she was about to go off on him when Leanne had appeared at their side. \n\nTammy had stopped abruptly and turned to Leanne, while throwing Joe an annoyed look over her shoulder. \"Hey, Leanne. Did you need anything?\" \n\n\"Um - I -\" Leanne stumbled, and Joe spoke up. \"Leanne's with me tonight, Tammy. I'm taking her out to Santa Rosa. Dinner, movie and some dancing. We'll be late coming back, so unless there's anything urgent, we'll talk tomorrow morning.\" \n\nTammy didn't hide the speculation in her eyes, although Joe noticed she didn't seem overly surprised, and didn't ask any more questions. Instead, she met his gaze. \n\n\"Well, well, well, big brother. There may be hope for you yet. Just be careful with this one, I actually like her.\" She nodded at Leanne with a hint of a smile. \"You two enjoy. I'll be out of your hair. Leanne, remember that you open the kiddie farm in the morning. Don't be late.\" With that, she turned and left them on their own. \n\nAnd so it begins, he thought ruefully. Although, interestingly, Tammy's reaction was milder than he had anticipated. He knew he'd have to answer to his father in the morning - there were very little secrets between the three of them - but he was ready for that. He squared his shoulders unconsciously. \n\nLeanne's hesitant voice drew his attention. \"You sure this is a good idea, Joe?\" \n\nHis lips thinned as he turned to open the truck door, and then held his hand out to help her climb up. \"One of the best I've had in a long time. Don't let my sister intimidate you. She's all bark but no bite, and she really does like you. I promise.\" \n\nLeanne smiled faintly as she settled in her seat. A moment later they were on their way. \n\nHe took her to dinner at the town's only half-decent steakhouse. She was self-conscious about her clothes, which she was afraid were too casual. Joe thought the hip-hugging jeans and the white eyelet cotton shirt - the same clothes she'd worn that first night they'd met - looked absolutely perfect, and had told her as much. Leanne's eyes shone with gratitude in the candlelight, and her fingers caressed the smooth, white tablecloth, as if checking to see if it were real. He was tempted to ask her more about her childhood, to figure out where all those insecurities had come from, but then he held back, knowing it was a touchy subject for her. \n\nIt's a matter of trust, he told himself. Give it time, and eventually she'll open up to you about it. Instead, he told her some of his experiences in UC Davis, and asked her about her dream to become a vet. \n\n\"Why animals?\" he prodded. \"I mean, I love being around them, but I've grown up on the farm, so I figure I'm biased. But you grew up in Sacramento, right? How come you're so into them?\" \n\nLeanne shrugged, and he thought she would evade his question. But then she met his eyes. \n\n\"They don't judge. If you treat them right, they'll love you for it. It's that easy.\" \n\nJoe almost pushed. Who judged you unfairly? He wanted to ask, but he could see Leanne wouldn't answer. So instead he tried to show her by example. He was there, and he treated her well, and he didn't judge her. He hoped she took notice. \n\n* \n\nBack at The Lounge, on the dance floor, in Joe's arms, Leanne felt like a princess again. The man could move, she thought, smiling her delight as they performed a series of intricate steps effortlessly, smooth as butter, as if they'd been made to dance together. Pride and satisfaction laced Joe's voice when he spoke, loud enough for her to hear over the blaring music. \n\n\"You've gotta admit we're good together.\" \n\nLeanne smirked. \"I've never argued that point, cowboy.\" \n\n\"Right. As long as we're clear on that.\" He swirled her around faster, making the room blur until the only thing she could focus on were his warm brown eye, holding hers captive. \n\nHis arms supported her in a proper dancing hold, but Leanne didn't want to be proper tonight. She wanted to be bold and reckless again. She wanted his passion. In a deliberate move she pressed closer, until she could feel his erection graze her belly through their jeans. \n\nJoe grunted low. \"I'm trying my best to be a gentleman, princess. This is making it hard.\" \n\nLeanne raised her eyebrows. \"I like making it hard.\" \n\n\"Dammit, Leanne...\" Joe tried to pull away, but she wouldn't let him. \"Joe, please. I - I want this. I want you.\" \n\nJoe stopped dancing and stood still, breathing shallow. She didn't think it was because of the physical exertion. Softly, she repeated her request, spelling it out for him. \"Please. Let's get a room and go upstairs.\" \n\nFor the longest time Joe didn't respond. Finally he whispered hoarsely. \"Are you sure?\" \n\nLeanne just nodded, biting her lips hard to keep them from quivering with her mounting excitement. \n\nJoe dropped his head and exhaled slowly. After a moment, he looked up. \n\n\"There's nothing I want more than to make love to you tonight, Leanne. But not here. Not at a - a cheesy place like this.\" \n\n\"But -\" she started, and he silenced her with a look. \"Let's head back to the farm. If you're still sure this is what you want by the time we get there, I'll take you to my home, to my bed, and I will give you the first time that you deserve. Okay?\" \n\nGiddy with expectation, she almost jumped for joy. Her smile threatened to split her face, but all she said was, \"Okay!\" \n\n* \n\nThe ride back to the farm seemed eternally long, but then all of a sudden they were there, parked in front of the darkened main house. \n\nJoe turned to Leanne, though he couldn't make her features in the darkness. He reached for her hand instead, noting the slightly-damp softness, and gave her a small squeeze. \n\n\"Leanne -\" \n\n\"I still want this.\" \n\nHer words reverberated in the confines of the cabin. He let them wash over him, soak him in reassurance. \"I want this, too. Very much.\" \n\nHe thought he saw her mouth curl up in a little smile. \n\nWith a parting squeeze of her hand he let her go, climbed out of the truck, and walked around to her side, feeling a disproportionate kick of satisfaction seeing her sit there and wait for him to reach her door. Finally. \n\nTaking her hand, he led her around the main house to one of the small cottages standing behind it. The porch light was on, and Joe pulled the screen door and pushed the unlocked door behind it, motioning for Leanne to move before him. \n\n\"After you, princess. Welcome to my humble abode.\" \n\n* \n\nLeanne walked a few steps inside, and then stopped to look around. The porch light filtered through the open door so she could barely make the modest kitchen to her right, separated from the main room by a rustic looking dinner table and chairs. To her left was a small study, and a closed door which was probably a bathroom. Stairs in the far left corner climbed to the second floor. \n\nIn spite of the darkness, it seemed clean and orderly; with a pleasant, airy feel. She smiled back at Joe, who reached for a switch before closing the door behind him. The kitchen was flooded in soft light coming from under the top counters. \n\n\"So...\" \n\nJoe approached her, and stopped a foot away, shoving his hands in his pockets. \n\n\"So...?\" \n\nShe turned fully to him, her own hands going to her back pockets, unconsciously mimicking his move. \n\n\"You want something to drink?\" \n\nHe seemed nervous. Leanne's heart pounded harder as she took a tiny step forward. \n\n\"I want you to kiss me. Please.\" \n\nA slow smile relaxed Joe's tense jaw, and he took her face in his hands. \n\n\"I can do that.\" \n\n* \n\nGod, her mouth tasted so good. \n\nJoe had to fight to keep their kiss light and easy. He needed to keep his head for this, try to ignore his body, which was screaming with urgent need. His fingers shook with effort as he traced her jaw and softened his lips to coax hers open. ",
        "Leanne had no such reservations, apparently. Her mouth opened and her tongue licked his lower lip, inviting him to play. Her hands moved to his neck, her fingertips tunneling in his hair, her short nails scraping deliciously at his scalp, making him shiver. Joe's hands moved to her shoulders and he pulled her close, mashed her breasts to his chest, and kissed her deeper. \n\nLeanne's breathy whimpers were driving him crazy. He wanted more. Lifting his head, he waited for her to open her eyes. Her slightly unfocused look gave him a kick of satisfaction. \n\n\"You know, there's a big, comfy bed waiting for us upstairs.\" \n\nShe swallowed, and then smiled faintly. \"Lead the way, cowboy.\" \n\n* \n\nHis hand felt good around hers, warm and solid, as he led her up the stairs. The space above the landing was pitch-black, and Joe slowed his pace. \n\n\"Hold onto the railing, princess. I don't want you tumbling down - there. Wait here for a moment while I get some light on.\" \n\nShe waited at the top landing and wondered what he was doing as he walked straight into the blackness. A moment later soft light flickered inside what she now recognized was an en-suite bathroom. Shadows and lights danced on the tile wall beyond the narrow door in front of her, and then Joe appeared, holding two large, chubby candles in his hands. He half-smiled, and turned to the bedroom at his right to place the candles on top of the dresser that lined the bathroom wall. \n\nThe soft glow of the candles was enough to illuminate the room. The sharply sloped ceiling looked like a built canopy above the large, traditional four-poster bed that dominated the space. There was a padded linen chest at the foot of the bed, a closet nestled in the far left corner, two small night-stands, and a single recliner chair in the far right corner, next to a standing lamp. The dark wood furniture looked hand-crafted, smooth and elegant, and stood in stark contrast to the light color of the walls and the bedspread. A shaggy rag and semi-sheer curtains gave a comfortable, cozy feel to the room. There were no pictures hanging, but she imagined the view from the large window that took most of the West-facing wall would be spectacular come morning. \n\nWhen Leanne's gaze returned to Joe, she found him looking at her softly. She returned his smile hesitantly, and he stepped closer until they were within arm's length, although he didn't touch her yet. \n\n\"You do know I care for you, right?\" \n\n\"I - I guess so?\" She wasn't sure where that came from, or how he expected her to answer. Joe reached up to cup her face. \n\n\"When we first met at The Lounge, you said that you wanted your first time to be with someone who cared for you, and who you cared about, too. Remember?\" \n\nLeanne nodded, her lip caught between her sharp teeth. Joe half-smiled. \"I just wanted to make sure you knew that - I do care for you. I wouldn't do this if I didn't.\" \n\n\"I know.\" she whispered, and then, peering up into his eyes, she added - \"I care for you, too, Joe. I wouldn't do this if I didn't, either.\" \n\nHe nodded solemnly. \"Okay.\" \n\nThey stood there, undecided, for another moment, and then Joe grinned, and the wicked glint in his eyes made her heart skip a bit. \"That bow on your shirt had been calling my name since the first time I laid eyes on you.\" \n\nLeanne peeked down, and giggled. \"Oh did it, now?\" \n\n\"Mmm. Indeed.\" He reached for it, holding her eyes, and when all she did was arch her eyebrows in challenge, he chuckled, and tugged on the tiny satin bow. It came undone easily, and the scooped neck separated and drooped open, exposing the soft top swells of her breasts, and a hint of the valley between them. \n\nJoe's fingers caressed along the bared flesh, just under her collarbone. \"Beautiful.\" he murmured, and Leanne's insides melted. She stepped closer and reached for his shirt buttons just as he moved to undo hers, one by one, before pushing the capped sleeves off her shoulders. Leanne's shirt floated to the carpet behind her, while Joe's was now open, revealing his solid, golden torso with its spattering of soft, blondish-brown chest hairs. Leanne reached up to caress him, and the soft tickle against her palms spiked her passion. \n\nShe wanted to feel it against her naked breasts. \n\nLeanne reached behind her to unclasp her bra, seeing Joe's eyes darken and his jaw slacken at her move. His hands moved to her jeans, making quick work of her button and zip. By the time her bra was off he had pushed his palms inside her waistband to fill each one with a fleshy, warm ass cheek, and was stepping close so their bodies touched from chest to knees. \n\nLeanne's whimper hitched in her throat at the delicious contact, and she reached for his head and pulled it down for another deep, hot kiss, enhanced now by his chest rubbing against hers, and his hands roaming her back side, squeezing and stroking, adding fuel to her flame. She was getting high on sensation, and loving every moment. \n\nShe hadn't realized they were moving until she felt the bed behind her. Joe lifted his head, and then, slowly, kneeled in front of her. He hooked his fingers in the waistband of her jeans, and after a peek up to her eyes and a nod from her, peeled them off, taking her panties with them, until they were pulled at her ankles. \n\n\"Have a seat, princess.\" He said with a smile and she complied, and watched at the play of muscles in his arms and shoulders as he took her flats off, then her socks, and then finally tugged at her jeans until they cleared her naked heels. He folded them haphazardly and placed them atop her shoes off and to the side, and then sat back on his heels, and looked up, finding her eyes, even as his palms moved up her legs to rub lightly up and down her outer thighs. \n\nLeanne's heart was beating like crazy. She felt lightheaded. She wasn't sure what she expected, probably for him to push her back and climb on top of her, but he kept kneeling, his touch so light it was almost imperceptible, and tilted his head, looking into her eyes. \n\n\"So... you've been doing your homework this past week?\" \n\nLeanne gasped her surprise, feeling her cheeks warm, but then nodded and answered softly - \"Yes, I have. Every day, like you told me to.\" \n\n\"Remember what I said I'd do if you did?\" \n\n\"Um, you - you said you'd quiz me on it.\" She was going to faint. Or catch fire. \n\n\"Mmm. That's right. I've been thinking of very little else for the past week... I'd love to see how you've progressed. Wanna show me?\" \n\nLeanne couldn't answer in words for the life of her, but she managed a jerky nod. Joe's face softened. \n\n\"Go on then, sweetheart. Make yourself comfortable and let's see what you've learned.\" \n\nLeanne hesitated for a moment. She kind of expected Joe to just climb onto the bed and take over; she hadn't expected this. On the other hand, she felt surprisingly confident with the idea of masturbating before him. For one, she'd done it already. And also, she really had been practicing, so there was much less fear of the unknow. She could do this. \n\nEven as she scrambled back and piled his pillows behind her back against the headboard, she realized he was doing this on purpose; was trying to ease her into it. Her heart swelled. She met Joe's eyes boldly, and spread her legs wide. \n\n\"Prepare to be amazed, cowboy.\" \n\nHis startled look - and his following deep groan - were all the encouragement that Leanne needed. Giggling, she took two fingers into her mouth to wet them, and then brought them to her pussy, and started stroking. \n\n* \n\nJoe was pretty sure he was risking a heart attack, and he couldn't care less. With his eyes trained to Leanne's slim fingers working along her slit, he moved up onto the bed, and settled close at her side, propped on his right elbow, and leaned to kiss her shoulder, even as his left hand moved to cover her small breast. He alternated between kneading the soft, firm flesh and cupping the gentle swell, strumming its peak with his thumb, before moving to her other breast and giving it similar attention. \n\nLeanne whimpered and arched into his hand, and her fingers quickened their pace between her thighs. \n\n\"God, you're so sexy like that.\" \n\nHe wanted to see more closely; the angle he was in didn't allow for details. Joe pushed himself to his knees and moved lower, until he settled between Leanne's spread thighs, and then scooted back so that he could bend low to kiss and nibble along her delicate inner thighs. \n\nHer scent was driving him crazy, sweet-salty musk that begged to be tasted. Joe resisted, wanting to let her lead, at least for now. Leanne's breathy voice pulled his attention momentarily to her flushed face. \n\n\"So, am I doing it right?\" she panted. \n\nWhat? Oh. The 'quiz'. Joe grinned. \"You're perfect, princess. And I lied. This isn't a quiz.\" \n\n\"Oh?\" her fingers slowed for a moment. \"What is it, then?\" \n\n\"It's a tutoring session. A private lesson. Now I need to pay attention, so don't distract me with all this talking, please. Just keep showing me what feels good so I know what to do on my turn.\" \n\nHer brow was furrowed for another split-second before her smile broke, and her fingers quickened. \"I like that idea... watch and learn, cowboy. I may be new at this, but I think I'm on my way to becoming a pro.\" \n\nJoe laughed and shook his head, grinning so hard he felt it in his ears, and then bent to kiss higher, almost to the crease of her thigh. \n\n\"Go ahead, princess. Show me what you've got.\" \n\nShe wet her fingers in her mouth once more and Joe's hands tightened at her hips. He couldn't resist clamping his teeth on her quivering inner thigh, just barely keeping from actually hurting her. God, this is torture. And I'm loving it. Who knew? he wondered, even as Leanne's hand was back at her pussy, rubbing in tight circles over her clitoris. Soon, she was going so fast her fingers were blurred. \n\n\"Ohmygod I think I'm going to - oh!\" \n\nLeanne bucked and jerked, her knees closing, trapping him for a moment before opening again, and he watched, mesmerized, as her whole pelvis area seemed to pulse, squeezing and relaxing rhythmically, small gushes of her juice trickling down her slit to the bedspread below with every contraction. Her fingers kept working, slower now, more squeezing than stroking. \n\nGradually the storm had passed and Leanne slumped back against the pillows. She was still gliding her fingers through her folds, and her legs have slipped to lie straight on the bed at his sides. Joe smiled up to her flushed face, and bent forward to take her fingers into his mouth, and suck them clean of her essence. \n\nLeanne watched him with a heavy, hooded gaze and a hint of a smile, even as her breaths were still coming in shallow puffs through her parted lips. Joe crawled up until he was at her side. \n\n\"That was beautiful, princess. Now, will you allow me a try, too?\" \n\nHer eyes widened. \"What - you mean, using your f-fingers?\" \n\nJoe nodded, watching her closely. She was biting her lips, and that tiny wrinkle appeared on her forehead. \n\n\"But - don't you want to - to - f-fuck me?\" \n\nJoe grimaced. For some reason, the word didn't sit well with him, though he never had an issue with it before. \n\n\"I want to have you in every way imaginable, yes, but I don't want to rush this. I want to make sure you're ready for me.\" \n\n\"Oh, I'm pretty sure I'm ready!\" She said with a self-conscious giggle, and Joe smiled and winked, relieved to hear the sound. \n\n\"Mmm. I'd like to verify that for myself, if that's alright with you.\" \n\n* \n\nLeanne felt the lethargic satisfaction evaporate from her muscles as Joe leaned in to kiss her soundly, and then started kissing a path along her chest and her belly, until he reached her damp curls. He was kneeling next to her, still wearing his jeans, which seemed extremely uncomfortable - not to mention unfair - and was reaching for her thighs, pressing them open, and then his fingers were almost at her pussy, both hands rubbing her inner thighs, the motion causing her labia to open slightly with every press. \n\nThe tips of his fingers found her outer lips and pulled them gently open, exposing the pink inner folds to his look, and then, a moment later, for his tongue. \n\nLeanne jumped at his first soft licks, just the tip of his tongue tasting her. She looked down, watched his strong jaw move with every lick, then his lips kissing her intimately, and couldn't believe he was really doing it. She had liked her own taste, had seen his pleasure when he sucked her fingers, but to have him actually lick her right there...! \n\nAnd then the exquisite pleasure registered, and any other thought fled. It felt amazing! Leanne relaxed with a deep sigh, and opened her knees wider. \n\nShe saw the smile in his jaw at her surrender, but he didn't look up, just kept on licking, suckling and kissing her leisurely, as if he had all the time in the world. Soon, she wanted more. She tilted her pelvis up so that he could reach her better, and was slowly rocking up into his mouth. But instead of obliging her this time, Joe pulled back, and then he licked his own fingers and brought them to her pussy. \n\nOh that felt so good! \n\nLeanne thought her brain was going to melt from the jolt of pleasure that hit her. His fingers felt very different than his tongue, their skin hard and slightly calloused, but he used them with infinite care, and they slid easily over her wet folds. \n\n\"Oh god!\" she whimpered, and watched, mesmerized, as Joe sank the tip of his finger into her tight hole, and then slowly started stroking it in circles. He was pressing out ever so slightly, as if coaxing her to relax the taut ring of muscles there, and then withdrew to pleasure her clit, only to return a moment later and do it again, and again. \n\nLeanne's hands had been grabbing to the bedspread at her sides, but now they had moved as if with a will of their own to her breasts, and she started squeezing them in time to the slow, deliberate moves of Joe's fingers. With every passage he dipped a little deeper, until he was two knuckles in, and Leanne found herself squeezing and releasing herself around the invading digit. \n\nJoe groaned. \"Ahh... that's right princess. Just like that. Let's try to add another one.\" \n\nHe looked up, but her own eyes were riveted to his hand between her thighs and his two fingers pressing slowly, carefully, into her. She exhaled, soaking up the sweet sensation, and a smile curl her lips even as her breath hitched. \n\n\"Yeah... that feels good!\" \n\nJoe started pumping shallowly, in controlled moves, and when she relaxed around him he gradually pushed deeper, until his two fingers disappeared into her with every stroke. Leanne couldn't look away, until she heard Joe speak, low and urgent. \n\n\"Feels good, princess? Nothing hurts?\" \n\nHer eyes sought his. \"It feels incredible. Intense, but so good.\" \n\nHe held her gaze, his fingers still slowly fucking her. \"I think you're ready.\" \n\nShe nodded, her belly fluttering so bad she didn't think she could speak. Joe half smiled, and slowly withdrew his hand. He crawled back and off the bed completely, and tugged his jeans and underwear off. He then padded over to the bathroom and returned a moment later with a condom already rolled on, climbed onto the bed, and took her in his arms. \n\n* \n\nPleasure spiked in him as Leanne pressed their bodies together and intertwined their thighs, and he stroked down her back to grab her ass and grind her against him. Leanne whimpered as his rigid erection poked at her belly, and with a muttered curse, Joe rolled to his back, until she was leaning over him, straddling his thighs, his dick standing stiff and swollen between them. \n\nLeanne looked at it, bit her lips, and then met his eyes with a tiny smile. \"You promise it'd fit?\" \n\nJoe grinned, though it felt strange on his taut face. \"Oh yes. And you're going to set the pace, so it'd feel great, too.\" \n\nShe looked from his eyes to his dick and then up again, looking so startled it was almost funny, except he was in no mood to laugh. Despite his promises, he wasn't at all sure he won't hurt her, though he'd do his damned best. Joe reached down to take Leanne's hips in his hands and nudged her up and forward until his sheathed cock rested along her hot, damp slit, his cockhead just kissing her swollen clit. \n\n\"C'mon, princess. Guide me in. I promise I won't push. You control how much you take, okay?\" \n\nInstead of answering him, Leanne raised herself higher on her knees and took his dick in her small, soft, hot hands. Joe's dick jumped at the hesitant touch, and he gritted his teeth as he struggled to keep his touch light at her hips. \n\nLeanne looked down between them as she held his cock with one hand and leaned with the other onto his chest for balance. Then she lowered her hips a fraction, and carefully guided him until his flared cockhead burrowed just at her opening. Joe's eyes closed as he savored the sweet, sweet sensation, and then opened to look as Leanne lowered herself, a fraction of an inch at a time, onto his shaft. \n\nNot pushing up into her was the hardest thing he'd ever done, and Joe knew he'd forever be proud of that, even if there was no one he could ever brag to about it. His hands did tighten at her hips, but only to help take some of her weight off her trembling thighs. He watched and waited, his breath trapped in his chest so long it hurt, as she made her excruciatingly slow descent. At one point she paused, hissed quietly, and pulled back up a hair, paused to breathe, and then moved down a little more. She repeated the process a few more times until finally, incredibly, he was all inside, and she was seated atop his hips. \n\nThey both released shuddering breaths, completely still except for their chests and bellies heaving. \n\n\"You okay, princess?\" he panted, and Leanne nodded, a wondrous smile spreading slowly across her face. \n\n\"It feels - incredible.\" She whispered, and he couldn't agree more. \n\n\"Take your time, sweetheart. Do what feels good, just like before.\" \n\nHer baby-blue eyes were almost black as she started rocking her hips in tiny motions. Her inner muscles clamped around him like a hot, wet glove that fisted his cock in a perfect fit. His palms itched with the need to grab her and take over their lovemaking; instead he brought them behind his head. \n\nLeanne smiled, her cheeks flushed with high color. \"I think I like this... having you at my mercy like that. Maybe I'll start ordering you around...\" \n\nJoe smiled wide at that. \"As you wish, princess.\" he said and winked at her, but it turned into a loud hiss when Leanne rolled her hips harder. \n\n\"God. Do it again, please!\" He was reduced to begging, and he didn't fucking care. \n\nLeanne's giggle tickled his spine and made the small hairs in his nape stand, and then all reason fled when she rolled her hips once more, and all he could do was feel. \n\n* \n\nLeanne couldn't believe how good it felt to be filled to capacity, stretched, challenged. Joe laid spread out under her, deceptively still as he reclined on the pillows, but she could see the fire in his eyes, and feel the fine tremor in his body between her thighs. The latent power in him excited her beyond her wildest expectations. For the first time, she understood the thrill of a heavy road bike. Placing both hands on his hard pecs she leaned forward, and kissed him. \n\nAt first he was totally still under her, but then his arms came from behind his head to hold her face and he took over their kiss, giving his tongue the freedom to plunge deep into her. \n\nLeanne moaned into his mouth as her need rose again, and started grinding harder, trying to press her clit against his hard pelvic bone while their mouths devoured each other. One of Joe's hands tangled in her hair and tugged gently to draw her attention. She raised her head until she could focus on his eyes. ",
        "\"I need more, baby.\" \n\nHe sounded desperate. Leanne found his eyes. \"I can handle more, cowboy. I'm stronger than I seem, remember?\" \n\nJoe's response was a muffled curse, and then his arms tightened around her and he flipped her to her back. Then he ground into her, once, twice, three times, a growl rumbling from somewhere deep in his chest. \n\n\"Fuck, you feel so good princess... argh!\" \n\nHis hips started pumping as if against his will, and Leanne cried out with the intense sensations. Joe froze mid-stroke. \n\n\"Shit. You okay baby?\" He was actually shaking in her arms, and Leanne knew he was close to his own limit - one that she had no interest in him keeping. \n\n\"Don't you dare coddle me, cowboy. Give me all you've got.\" \n\nHis body tightened above her. \"You have no idea what you're asking for, princess.\" he muttered, and she was about to protest when he drew back, and then thrust into her with more momentum than before. Her breath hitched, her protest lost, along with any coherent words. \n\n\"That's what I thought.\" he hissed, and pulled back to thrust slowly again. Leanne moaned, the sound becoming a bit of a cry halfway through. But when he paused she opened her eyes to find his, her hands coming up to hold his face. \n\n\"I'm okay. Don't stop, please.\" \n\nHe didn't answer, but his hips moved with longer, deeper strokes, and his eyes held hers when he took them both higher. When her high-pitched cries sounded over his last irregular movements, when he was no longer in full control of himself and couldn't keep from going harder, he bent to kiss her and felt his dick swell and pulse before he exploded with a shout, filling the condom with his cum, nestled deep inside her body. \n\nHis arms shook. The strength of his release made him tremble all over. He managed to shift his weight so that when he collapsed he didn't smother her; instead he rolled to his back and took her with him so that her head was pillowed on his shoulder, and then waited for the Earth to return to its axis. \n\n* \n\nLeanne's head was spinning, but one thought did manage to formalize itself above the buzzing in her ears. \n\nThat was freakin' awesome. I want to do it again! \n\nShe felt like she did coming off the Vortex thrill ride at the Great America park in Santa Clara that they visited with the kids on school spring break. She went to do it on her own, while Elaine and the kids watched from a nearby bench. Coming down from the ride her whole body was shaking from the extreme experience, she couldn't quite walk straight and there were strange aches and pains in parts of her body she never realized existed. But she felt joyous and free, young and able-bodied, and she wished she could go back up, right then and there. \n\nMuch like now. \n\nShe felt the muscles in his chest move as Joe raised his head to peek at her, and looked up to meet his gaze, a smile hovering over her lips. A small muscle jumped in his cheek. \n\n\"You okay?\" his eyes were searching hers for signs of distress, she could tell. Leanne pulled his neck to draw his face closer, and kissed him full on the lips, soft and sweet. \n\n\"I am wonderful.\" She promised, and Joe nodded and smiled. \"Yeah. You are.\" \n\nLeanne's heart squeezed as Joe hugged her close and kissed her hair, before he withdrew and rolled off the bed, and padded over to the shower. She heard the trash bin open and close, and then the water running. \n\n\"Hey, you wanna come join me in the shower? It's nice and hot in here.\" \n\n\"Um, nah that's okay. I think I'm too tired to move.\" she answered apologetically, but could hear no response from Joe. \n\nBy the time the water had stopped running Leanne was already drifting to sleep. She was just barely aware of the bed dipping beside her, and then Joe's hand, gently nudging her shoulder. \n\n\"Let's get you under the bedspread, princess. And I brought a wet washcloth, if you'd like to clean up a bit.\" \n\nShe mumbled 'n'kay' and let him roll her off the bedspread and then under it, and never bothered protesting when she felt the slightly rough, warm washcloth that was pushed gently to wipe in between her thighs. A moment later it was gone, and then Joe was back in the bed, taking her gently into his arms and tucking her head under his chin. \n\n\"Nothing hurts too bad, right?\" He asked quietly, and Leanne shook her head. \"Did I bleed a lot?\" she blurted, and then cringed internally, but Joe seemed to take it in stride. \"Not too bad, actually. There was only a little spotting that I could see.\" \n\n\"I should put something on...\" \n\n\"You most definitely should not. I love having you naked in my arms.\" \n\n\"But what if I stain your -\" \n\n\"Shh. I don't care if the bedding is fucking ruined tomorrow. Now go to sleep, sweetheart.\" \n\n\"Mmm. M'kay.\" she mumbled, and in the next moment, she was asleep. \n\n* \n\nWaking up in Joe's arms was the best feeling in the world, Leanne thought melancholically, keeping her eyes resolutely closed and her breathing carefully even. She wouldn't cry. Not now. There will be time for tears and heartache later. \n\nShe was eternally grateful for the experience Joe had given her the night before. As different as it was from how she had imagined it, it was everything that she had dreamed. \n\nHe was everything she had dreamed. \n\nAnd right there was the problem. \n\nStifling a miserable moan she tried to roll away without disturbing him, but as soon as she moved his arms tightened around her. \n\n\"Where're you goin'?\" His sleepy voice sounded gravelly. \n\nLeanne cleared the lump in her throat. \"Um, to the bathroom?\" She was glad for the almost-complete darkness of the pre-dawn hour; the last thing she wanted was for him to read her face too closely right then. \n\nHe released her reluctantly, and she scampered to the adjoined bathroom. She didn't bother with a light; reluctant to see herself in the mirror. Instead she sat down to do her business, absently relieved that there wasn't any lingering soreness, and then washed her hands and her face, and finger-combed her hair. Once done, she took a deep breath, and released it slowly. \n\nShe needed some perspective to think clearly. But she'd need to face Joe first, and as confused as she was, she was clear about one thing: she didn't want him to have any regrets. He was wonderful to her last night, and he deserved to feel damn good about himself this morning. \n\nWith a curt nod to her darkened silhouette in the mirror, Leanne consciously relaxed her features, and then turned, opened the door, and turned towards the room which was now cast in gentle light coming from Joe's bedside lamp. \n\nHe was sitting on the side of the bed, the corner of his blanket thrown haphazardly over his hips, looking worriedly at her. Leanne managed a brief smile, and stepped closer, until she was standing before him. He reached up to trace her naked hips with his fingertips, and then took her hands in his. \n\n\"So... we still good?\" he asked carefully, and Leanne had to blink back her threatening tears. \n\n\"Yes. We're good. Very good.\" she promised huskily, and then added - \"Thank you.\" \n\nHis brow, which cleared a moment before, furrowed again. \"You're thanking me? I think you got it backwards, princess.\" \n\nShe shook her head, but couldn't speak. After a moment, Joe's frown relaxed into a small smile. \"Okay.\" At her slight but reassuring nod, he got up and pulled her into his arms for a long, warm hug. \n\nLeanne let herself soak up his closeness, the expanse of his naked skin against hers, and breathed in his good, masculine scent. She could feel his cock press against her lower belly, semi-hard, but he seemed to keep their embrace light on purpose, and she followed his lead. His cheek was resting on her head, but then he turned to kiss her hair before stepping back, putting some distance between them. \n\n\"I'd love to keep you here for the whole weekend, but we've got a full day of work ahead of us, and if we're not both at the dining hall in about twenty five minutes people would come looking for us.\" \n\nLeanne nodded. \"I know. I - I need to get back to my room for my work uniforms and my toothbrush anyways, so I might as well shower there.\" \n\nJoe half-smiled, and then released her completely. \"Yeah. Okay.\" he said, before going around the room picking up her discarded clothes from last night, and then handing the pile to her. \"Here you go, sweetheart. I showered last night, so I'll just get dressed and walk you over to your dorms, okay?\" \n\n\"Sure - you don't mind if someone sees us, then?\" she asked hesitantly. Joe shook his head, and took her shoulders in his hands, looking her straight in the eyes. \n\n\"I'm done hiding; I told you that. We're adults, and we're doing nothing wrong. So unless you are uncomfortable with it, I don't give a damn about what anyone else thinks.\" \n\n\"Oh - okay.\" \n\nJoe grinned. \"Good. Let's get going.\" \n\n* \n\nThey had just turned onto the pavement in front of the main house, walking hand-in-hand, when a voice sounded from behind the rose bush that flanked the stairs. \n\n\"Well, good morning, son. Leanne.\" \n\nJoe's belly dropped a little. He wasn't seventeen anymore; Leanne and him were clearly consenting adults. Still, that's not the way he wanted to break the news to his father. Although looking at the older man's face, there was not even a hint of surprise there, only good-natured curiosity. Tammy had told him already, then. \n\n\"Good morning, Dad.\" \n\n\"Good morning, Mr. McConnel.\" \n\nThey spoke together, and then gave each other a startled look. His dad chuckled. \"Nah, I think under the circumstances Mr. McConnel is entirely too formal. Call me Michael, please.\" \n\nLeanne nodded, the slight blush on her cheeks visible under the porch light, even though the morning was still almost dark. Joe cursed to himself, and rushed to intervene. \n\n\"Dad, we're in a bit of a hurry. We'll chat later, okay?\" \n\nMichael McConnel looked from his son to the young woman next to him and back. \"Sure, son. Why don't you bring Leanne over after supper to join our movie night? I'm sure Tammy would love to have another female vote. Even the odds, and all that.\" \n\nJoe stared at his father, taken aback by the easy way he was taking the situation. Inviting a friend - a lady friend - to their standing 'family date' tradition - had never happened before. \n\nThen again, he never had a woman over in his cottage, either. And his father was well aware of that fact. \n\n\"Um -\" Joe was fumbling for an excuse to get them off the hook, but Leanne spoke up before he could. \n\n\"That's real nice of you Mr. McConnel. But I wouldn't want to intrude on your private family time.\" \n\n\"It's Michael, please. And you wouldn't be intruding. We'd love to have you there. Right, son?\" \n\nJoe knew when he was beaten. He turned to Leanne, his eyes apologetic, even as he dutifully affirmed his father's assertion. \"Absolutely.\" If he were honest with himself, he actually liked that idea. More than he should, probably. \n\nLeanne had a deer-in-the-headlight expression on her face, and he chuckled. \"C'mon. It would be fun! We won't bite, I promise.\" He winked, and she blushed, making him, in turn, remember moments from last night when he actually did. His smile widened in spite of himself, but he kept his voice gentle when he repeated their invitation. \"Please join us tonight. We'd love to have you there. I'd love to have you there.\" \n\nShe nodded, and he had a sneaking suspicion she was getting teary-eyed. Damn. He looked up to find his father watching their exchange intently. Double damn. \n\n\"We really are in a hurry, dad. We'll talk later, okay?\" \n\n\"Sure. Go ahead.\" \n\n\"Thank you for the invite, Mr. - Michael. I - I guess I'll see you tonight.\" \n\nJoe watched the smile light up his father's face, and with a start realized he hadn't seen one of those for a long time. Too long. \n\n\"Good! See you then.\" \n\nWith that, his father turned back to the rose bush, pruners raised, and Joe chuckled, took Leanne's hand, and tugged her along. \n\n\"C'mon. Let's get you to your room before everyone's up, or we'll never start our day on time.\" \n\n* \n\nIn the privacy of her own shower, Leanne finally let her tears run free. \n\nShe cried for the joy she found in Joe's arms, which she knew wouldn't last. And she agonized over Mr. McConnel's invitation, too, because having a pre-defined, short-term relationship with Joe was one thing; getting close to his family was another level of complexity she would be a fool to engage in. \n\nBut she wanted to, so very much! \n\nShe missed her mom terribly. A fresh bout of tears spilled down her wet cheeks, and choked sobs rocked her. And she missed her faux-foster family - Elaine and Sofia, and Sam and Steven - she even missed Jim Rogers, even though he was away so much she barely saw him anyway. \n\nShe longed for that sense of belonging to others, being part of a family, false as it were, brief as it was bound to be. \n\nTurning her face to the cascading water, Leanne made her decision. Much like with Joe, she would let herself enjoy it for as long as she could. After all, Tammy and Michael McConnel weren't really going to see her as family, regardless of her make-believe fantasies. When Joe and her separated, when she was gone, there would be no heartbreak for them. At most, they'd be mildly disappointed. \n\nIn the meantime, she would enjoy taking part in this 'family date night' - and any other family activities they would decide to include her in. What harm could be in that? \n\n* \n\nThe McConnel's family movie night was even more fun than Leanne had expected, despite a few rocky patches. \n\nTammy was obviously excited having her, and had snagged her hand and taken her aside as soon as they entered the main house to conspire together about which movie they wanted to choose. \n\nTammy's enthusiasm was contagious, but Leanne felt more than a little uncomfortable, knowing she had little to offer by way of opinion on any of the options Joe's sister had mentioned. Finally, after one more 'what do you think?\" from Tammy, she ditched her hummed non-answers and went for the truth. \n\n\"Honestly, I wouldn't know what I'd like. I don't think I've watched any non-Disney movie in the last five years, and before that, with my mom -\" she stopped. There was barely enough money for food and utilities; sometimes, not even for that. \"Movies weren't our thing, I guess.\" she offered lamely. \"So I honestly can't be of help here. But I promise to support whichever one you want.\" She finished quickly, and held her breath. \n\nTammy looked at her a little funny. \"Gosh. I cannot imagine not watching movies, like, a lot. This family movie night tradition - we've had it for ages - ever since my mom died, I think. Dad didn't know what to do with us back then, so this was his way to hang out. I think we've seen every movie produced in Hollywood at least once.\" \n\nLeanne bit her lip to stop from blurting something she shouldn't. The mention of Claire McConnel was like a dose of ice water, shocking her awake to the reality of the situation. \n\nDon't get sucked into the fairy tale, Leanne. You know you will never, ever, be part of this family. \n\n\"Leanne?\" \n\nTammy was looking at her curiously, and Leanne shook her head with an apologetic smile. \n\n\"Sorry. I guess - go ahead and choose your favorite. My vote is yours.\" \n\nTammy kept staring at her, and then nodded decisively. \"Okay then. A movie virgin, are you? I know just the one for your initiation. It's the ultimate chick flick, a bona-fide cult movie, AND my dad and Joe would never say 'no' to watching it, even for the umpteen's time. Let's go.\" \n\nWhen The Princess Bride title showed, Leanne looked up at Tammy, startled. She'd never seen the movie, but have heard enough references to it to have a rough grasp of the plot. All she could think was, she chose an ultra-romantic fairytale for me?! But then the movie started, and soon Leanne was engrossed with it. \n\nThe three other people in the room seemed to know it by heart, and started role-playing the different parts, having memorized the script verbatim. Leanne watched their animated faces, and tried to ignore a sharp pang of envy. They were a tight bunch, for sure. \n\nThen Buttercup - and Tammy - started ordering Westly around, and the farmboy - and Joe - kept saying As you wish. A moment later Grandpa's voiceover - and Mr. McConnel's - spelled it out for her: \n\n'That day, she was amazed to discover that when he was saying \"As you wish\", what he meant was, \"I love you.\" And even more amazing was the day she realized she truly loved him back.' \n\nLeanne's eyes flew up to find Joe watching her intently. Something in his expression told her that he remembered saying those exact same words to her the night before. Right after she had taken him into her body for the first time, as she was straddling him, she told him she might order him around. And he smiled and said, 'as you wish, princess.' \n\nDid he mean those words like that? Leanne thought frantically, but she wouldn't ask him. She couldn't risk his answer. \n\nInstead, she turned her unseeing eyes to the movie. Joe sighed next to her, and his arm tightened at her shoulders, but he said nothing. Instead, after a couple of minutes, he rejoined his family in their unofficial quote competition, and Leanne breathed a little easier and forced her attention back to the movie. It was, she had to admit, very funny, and very romantic, and a really good distraction. \n\nIt also gave her a great excuse to get all teary-eyed towards the completely over-the-top ending. Tammy was delighted. \n\n\"At long last! A girl after my own heart. These two keep teasing me for getting too emotional.\" \n\nLeanne forced a smile, and Joe chuckled, and then stood up. \"Anyone else for a night cup?\" \n\nThey all moved to sit around the dining table standing in the middle of the huge kitchen. Joe uncorked a bottle of wine and then poured and served a glass to each. \n\n\"Cheers.\" \n\nMr. McConnel raised his glass in a cursory motion and they all mimicked him before taking their first sip. The wine was delicious, fruity and aromatic, and Leanne took a second, larger gulp. Tammy winked and murmured, \"Yeah, I'll second that,\" and did the same. Leanne smiled wistfully. She'd never had a sister, and Tammy was treating her exactly like she'd fantasized a sibling would. It wasn't fair that it wouldn't last... but then, life wasn't fair. She'd learned that lesson early on. \n\n\"So, are we happy with the initial numbers we're seeing this summer, with the expanded kiddie farm and the fresh produce store?\" Mr. McConnel asked conversationally, looking between his two children. Tammy shrugged, and looked pointedly at Joe. \"It's only been a couple of days, I haven't got all the numbers yet. What's your sense of it, Joe?\" \n\nLeanne shifted uncomfortably in her chair. Being their guest for a movie night was one thing; being privy to a business-related conversation felt different, and she was decidedly out of place. Joe noticed her discomfort, and answered curtly. \n\n\"My gut feel is that it's going very well, but that's all it is at this point. We'll know more in a week or two, when we've had a chance to compile and analyse the data properly. But the truth is, I don't want to talk shop tonight. Thank you for choosing the perfect movie, sis. Now if you'll excuse us, Leanne and I will be calling it a night.\" \n\nHe scraped his chair back as he stood, and then helped Leanne with hers, offering his hand at the same time. She took it gratefully as she thanked both Mr. McConnel - Michael - and his daughter for the delightful evening, and within moments they were out the door. \n\nOnce outside they both breathed deep, and then smiled to each other. ",
        "\"So, princess... shall I walk you to your room and let you have your beauty sleep, or would you like to return to my place tonight?\" \n\nLeanne smiled wide. \"I would love to get back to your place, but could we swing by my room first? I'd like to bring my toiletry bag and a change of clothes for tomorrow morning this time.\" \n\nJoe bowed his head, and answered with a straight face. \"As you wish, princess.\" \n\nLeanne bit her lip hard to keep from blurting anything stupid. Like 'I love you, too'. \n\nAfter a moment's pause, Joe smiled faintly, and took her hand. \"Come on, sweetheart. Let's go.\" \n\n* \n\n* \n\nAuthor's note: did you like this chapter? Tell me! VOTE, FAVORITE and COMMENT. Thank you!"
    ],
    "authorname": "small_town_girl",
    "tags": [
        "first time",
        "masturbation",
        "romance"
    ],
    "category": "Romance",
    "url": "https://www.literotica.com/s/dawn-over-sun-valley-ch-04"
}
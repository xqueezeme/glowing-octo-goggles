{
    "title": "La Vita Dolce Ch. 10",
    "pages": [
        "\"Merda!\" Gianni cursed and slammed his fist into the wall and relished the feel pain shooting up his arm. It was a welcomed distraction. She'd seen him and had come running towards him, her blonde surfer staring after her. He hadn't thought she would recognize him at that distance or even bother to look in his direction. \n\nBut since when had Natasha done anything he expected her to do? He'd have to switch cars. He'd have to be more careful. \n\nHe sank heavily into an armchair. He rubbed at his cheek and the stubble growing there. He'd been too distracted to shave lately and his hair was growing long and falling about his collar and into his eyes. He sipped scotch. \n\nHis father was dead, his brother gone into hiding. Renoldo Pezzini was wrathful at the apparent murder of his niece. His retaliation had been swift and brutal. Gianni truly mourned the loss of his father. As much as for revenge as for the sake of appearances. Pezzini couldn't simply let the supposed death of his niece go unpunished. Such would look suspicious. It would be necessary to make sure that everyone thought his niece was dead. Gianni's father had been taken in a car bomb along with three of his men. Luca narrowly escaped an ambush which eerily mimicked that which had nearly killed Natasha. \n\nGianni felt immeasurable sorrow at the loss of his father. But to retaliate against Renoldo Pezzini would mean a certain bloody death for himself if he failed in that attempt. He would have welcomed death with open arms had it not been for the small inkling of hope that Natasha still lived. That, and to succeed in killing Renoldo Pezzini would mean depriving Natasha of her only living relative and perhaps her last vestige of protection. \n\nGianni thought on Natasha and took another gulp of scotch. The walking American stereotype looked like he was perfectly willing to protect her. He wondered if she would allow it. Gianni was, self admittedly, intensely jealous. And Natasha? Had she sent him the note? And if she hadn't? Perhaps she had simply been content to allow him to think her dead. He couldn't blame her. \n\nHe absently poured himself another glass. \n\nThe shrill ringing of his cell phone jarred him out of his thoughts. \"Angiolini,\" he answered. \n\n\"Brother, dearest.\" The voice that streaked over the phone lines caused him to stiffen in his seat. \n\n\"Luca,\" he growled. \"What do you want?\"\n\n\"What? Not happy to talk to me, Gianni.?\" Luca sighed dramatically. \"I was just enjoying the California sun. I thought perhaps we could enjoy it together.\"\n\nGianni sat forward in his seat. \"Luca.\" His voice was dangerously low. \n\nLuca laughed. \"Did you truly think I wouldn't have you watched, brother? Did you think I wouldn't have you followed?\" \n\nGianni was silent. \n\n\"Imagine my surprise when my dearest older brother took a trip to California. And I thought to myself 'now why would he do that'? What could possibly be of interest in California? And then I remembered that our little heiress lived in California for most of her life. All I had to do was follow you right to her. You should have been more careful.\"\n\nGianni felt dread welling in the pit of his stomach and his grip on the phone tightened. \"Leave her alone, Luca,\" he growled. \n\nLuca snorted. \"Have you forgotten that our father was killed because of her? I'm merely restoring the balance, brother. That bitch is going to die and you're going to watch.\" \n\n\"Luca\u2014\"\n\n\"Ciao, Gianni.\" The line went dead. \n\nGianni stared at the phone in dismay. \"Shit,\" he grabbed his jacket and strode from the hotel room. \n\n***\n\nThey were at Colin's gym. It had been two weeks since Natasha had decided needed to blow off some steam on the treadmill and Colin had offered to accompany her. However, when they'd arrived, Natasha had spied the punching bag and decided that it offered a more satisfying release. \n\n\"Jesus, kid, take it easy,\" Colin warned as he watched Natasha attack the punching bag with in a flurry of jabs. He held the bag relatively still as she rained blows upon the surface. \n\nShe scowled and launched a kick which struck the bag and nearly knocked him off his feet. \n\n\"Something wrong?\" he ventured. \n\nNatasha rolled her neck and shrugged her shoulders as she shook out the tense muscles in her arms. She was sweaty and dark wisps of hair clung to her cheeks. \"Nope,\" she said lightly, \"nothing's wrong.\" As she unleashed another set of hard jabs at the bag. \n\nHe held the bag steady and peered at her. \"Sure, there's not someone's face in particular you're picturing because you're beating the hell out of this bag. I think it's about to start crying for help.\"\n\nNatasha stopped, arms hanging limply at her sides as she bounced on the balls of her feet. \"Look, Cols. I just spent the last month being chased, shot at, and manhandled. Pardon me if I have a little pent up aggression.\" \n\nShe struck out suddenly, and aimed a kick high on the bag. Taken off guard, Colin was sent sprawling to the ground. \n\nNatasha blinked at him as he stared up at her in shock. Natasha burst out laughing at the startled look on his face. \"I'm so-s-s-sorry, Colin,\" she managed between bursts of laughter as she bent over and held her stomach. Colin glared up at her. She offered him her hand to help him up in appeasement, still unable to stop her laughter. \n\nA grin spread over his face as his large hand enveloped hers and hauled her down to sprawl on the mat next to him. He quickly rolled over her to straddle her pin her against the mat. \n\nShe smirked, a mischievous glint lighting her eyes as she looked up at him. \"Oh, it's like that, is it?\"\n\nHe laughed and gazed down at her. \"Yeah, it's like that,\" he taunted. \"You gonna do something about it?\" he challenged. \n\nNatasha shifted and threw him off, but he did not release her, taking her with him as they rolled across the mat. Colin pinned her once again beneath him. \"Give up?\"\n\nNatasha glared at him. \"Colin, if I remember correctly, you outweigh me by about a hundred pounds. I don't stand a chance.\" She shrugged from her position beneath him. \"Maybe I could take you in the ring though.\"\n\nHe shook his head in disbelief at her bravado as he moved to collapse at her side and propped himself up on one elbow to gaze at her. Natasha flushed slightly at the intent way in which he was looking at her. \n\nShe moved to sit up when he looped an arm around her waist and pulled her back down and closer to his body. She stared into his face, which was solemn after being so mirthful only moments before. \n\n\"Cols?\" she ventured, made nervous by his silence. \n\nHe smoothed her hair back from her face and taking her chin in his hand he lowered his lips to cover her own. He kissed her softly, gently, merely brushing his lips over her own. \n\nNatasha stared up at him when he pulled back. \n\nA small lazy smile tilted his lips as his eyes searched her face, taking in the bewilderment in her gaze. His clear blue eyes met hers. \"I've missed you, Tash,\" he murmured. \n\nHer own voice was breathy, \"I've missed you too, Cols.\" Emotion flickered in her gaze and he felt her stiffen slightly. \n\nHe pulled back slightly and loosened his hold on her. \n\n\"Colin...\" she said softly, \"I can't. You\u2014I\u2014\"\n\nHis arms fell away from her. \"Right,\" he muttered. \"This guy? This Angiolini? Where is he?\"\n\nNatasha felt her throat constrict. \"I don't know.\" Her voice was quiet. \n\nHis fingertips brushed her chin and tilted her face to his. \"I'm here, Tash,\" he sighed, emotion filling his voice. \"I've always been right here for you.\"\n\nNatasha felt tears pricking her eyes. \"I'm sorry Colin, I can't.\" She swallowed thickly. \"You've been so good to me and amazing and I...\"her voice trailed off, tears sliding freely down her face at the thought that she might cause him pain. \"I don't deserve you.\"\n\nColin gently brushed the tears from her cheeks. \"No, baby,\" he said quietly. \"That's the thing. You deserve so much better. I'm just trying to fool myself into thinking that I could be that for you and give you everything you deserve.\" \n\nShe gazed at him with wide teary eyes. \n\nHe bent his head and kissed her lightly upon the lips once more.\n\nThey merely stared at each other a moment before she cleared her throat nervously and averted her gaze. \"Then there's Morgan,\" she ventured.\n\nColin groaned, nodded and pulled away from her and sat up. \"Right, Morgan...\" he mused softly.\n\nNatasha leapt up to her feet, straightening her clothes from their recent wrestling match and wiping her hands over her face. \"Forget it,\" she said lightly. \"Let's get out of here.\" \n\nColin nodded absently as he stood. They left the gym and headed home, neither speaking on the car ride back to the beach house. \n\n*** \n\nNatasha lay on her bed staring up at the ceiling. \"Lacey, I don't know about this,\" she protested as Lacey tossed outfits from the closet onto the bed. Colin had gone and brought all of Natasha's clothes from the loft. He and Lacey were attempting to make her stay a more permanent arrangement with an indefinite time table. Natasha agreed to think about it. \n\nBut now, Lacey was tearing through Natasha's closet. \"Oh, my God!\" Lacey exclaimed as she held up the gold mesh Prada dress. \"This dress is fantastic! And I haven't seen it? When did you get this?\"\n\nNatasha sat up on the bed. \"Not that one, Lace.\"\n\n\"But it's perfect!\" Lacey held up the dress.\n\nNatasha stood, and taking the dress from Lacey, she balled it up and tossed it in the back corner of the closet. \"Any dress but that one.\"\n\nLaceys's expression turned sympathetic and her voice held a serious tone that was rare in her disposition. \"Oh, bad Italian hottie memories...\"\n\nNatasha couldn't help the laughter that bubbled up at her best friend's way of looking at things. Lacey might pretend to be a ditz but she knew how to make her friends laugh and distract them from their troubles. \n\nLacey nudged her in the ribs. \"You said any dress but that one. So does that mean you're coming?\"\n\nNatasha groaned and slumped her shoulders. \n\nLacey smirked. \"I'm taking that as a yes. Besides, you're going to meet some amazing guy to completely wipe Mr. Machismo from your memory.\"\n\nNatasha seriously doubted it.\n\nColin leaned against the doorframe. \"It looks like a hurricane ripped through here.\"\n\nNatasha flopped down on the bed and turned her face to him. \"Nope, just Lacey.\"\n\nLacey's head popped out of the closet to grin at her brother. \"Hey, Cols, wanna come tonight?\"\n\nColin crossed his arms. \"Where?\"\n\n\"Las Palmas,\" came Lacey's muffled reply as she ducked back into the closet. \n\nColin glanced at Natasha. \"You going?\"\n\nNatasha didn't have time to answer before Lacey shouted from the closet, \"Yes!\"\n\nNatasha groaned and pulled a pillow over her face. \n\n\"So you coming or what, Colin?\" Lacey shouted.\n\nShe heard Colin hesitate before grudgingly shout, \"Yeah, whatever!\"\n\nNatasha lifted the pillow to peer at him. \"You're going along with this?\"\n\nHe shrugged. \n\nNatasha groaned again and lowered the pillow back over her face to muffle a scream. \n\n***\n\n\"Jesus, Tash,\" Colin said. He looked at her and raked a hand through his hair.\n\nNatasha stood awkwardly in the kitchen. Colin stared at her. She self-consciously tugged at the hemline of her dress. \"Lacey picked it out. She tried so hard I didn't want to hurt her feelings.\"\n\nColin shook his head. Despite the sex-kitten ensemble, she looked heartbreakingly uncomfortable and vulnerable. \n\nLacey strode into the kitchen on spiked heels looking like playboy Barbie on acid. She glanced from Colin's struck and stricken expression to Natasha and grinned. \"She looks hot, right?\" She admired her handiwork. \n\nColin coughed and bit back a smile. \"Yeah, great Lacey,\" he said as seriously as he could muster. Natasha glared at him. \n\nIn truth, Colin thought Natasha looked amazing. And he knew every guy there would think the same. She wore a black tube dress that barely reached mid-thigh. It looked as though any sudden movement might send her generous amount of cleavage to overflowing the top of the dress. Her brown legs seemed to stretch on forever in the tall stilettos. Her long dark hair fell in sensuous waves down her back. But it wasn't just her body. Her face was flawless. Every feature complimented the other and he thought each was perfect. \n\nHe'd always thought blondes were the hottest, but Christ, she always made him rethink that assertion. Her hair was thick and black with no hint of red. Her startling azure eyes were sinfully long lashed, her lips full and plush. Her skin had grown deeply bronzed by the California sun. \n\nColin blinked and ripped his eyes away from her. He picked his keys up from the counter. \"Ready to go?\" \n\nBoth girls nodded and they left the house and piled into the Range Rover. \n\nThe club was packed, a line of hopefuls curling around the side of the building. Colin pulled the Range Rover directly up to the front door. He hopped out, tossing the keys to the valet as the accompanying valets handed the women out of the car. Colin and Lacey strode right to the door man who stepped aside. Natasha followed. \n\nThe tall muscled and heavily tattooed Samoan who guarded the door moved quickly to block her way. He crossed his arms over his chest and looked down his nose at her. \n\nColin and Lacey hesitated in the door way. \n\nNatasha looked up at the man, a small uncertain smile upon her lips. \"Hi, Loki.\"\n\nHe didn't return the smile. \"Miss James,\" he nodded solemnly. Suddenly his face broke into a wide grin. \n\n\"Welcome back!\" he swooped her up in a giant hug. Her feet her dangling over the pavement. \n\n\"Thanks!\" she wheezed as the large man squeezed her tightly in a hug. \n\nHe set her back upon her feet and stepped aside, returning to his previous Bouncer demeanor. \"Have a nice night, Miss James.\"\n\nNatasha smiled gratefully and followed Colin and Lacey into the darkened interior.\n\nThe club was packed but Colin had little trouble grabbing a cocktail waitress's attention as he flashed her killer smile. \n\nLacey was almost immediately all over the place and greeting everyone she knew, which was pretty much everyone. Natasha hung back with Colin and casually sipped her third gin and tonic as she perused the crowd. She felt Colin's arm slip around her waist and he pulled her against his side. \"C'mon Tash,\" he coaxed \"At least look like you're having fun.\" \n\nShe leaned into him. \"I'm not sure this is really my scene anymore, Colin.\"\n\nColin chuckled. \"Never was my scene. I only came because you did.\" He took her hand and nodded towards the dance floor. \"Let's go dance and make everyone jealous of the good time we're having.\" \n\nNatasha threw back the drink reluctantly followed and allowed Colin to pull her against him to move to the beat. Natasha could feel the beat pulsing through her chest. She grinned mischievously before pressed herself closer against Colin and running her hands down the hard muscles at his sides. \n\n\"Tease,\" Colin growled. \n\nNatasha merely grinned as he took her hand and spun her so that her back was pressed against him. His hands slid to her hips and he bent his head to press a kiss just below her ear. She groaned and lifted her arm to loop around his neck and pull him closer. \n\nThe scent of her accosted his senses. The feel of her body against his brought an exquisite ache to his loins that he struggled to fight. But, he didn't want to fight it. He knew heights to which her beautiful body could bring him. He knew the glorious feeling of having her sheath him tightly, claw at his back and scream his name. He wanted it again. \n\nNatasha's eyes drifted closed as she moved sinuously against Colin, knowing full well the affect she was having on him. But he was affecting her too. A slow sweet burn had started in her belly and was slowly spreading. Her breasts ached, pressing against the top of her dress. His lips brushed her shoulder and she felt her channel spasm slightly. She pressed harder against his hips and felt the hardness of his manhood between her nether cheeks. \n\n\"Tash...\" he warned in a slightly pained voice. \n\nHer eyes drifted open and she froze as she recognized a face in the crowd staring right back at her. The handsome features were unmistakable. But it was the longish dark hair falling about his collar and the shadow on his cheeks which made her heart nearly drop to her stomach. The look on his face was hard as he stared at her. Luca. He had haunted her nightmares, and now he was here right in front of her where she thought she was safe. Her knees buckled slightly and she felt Colin's arm tighten around her waist to take her weight against him. \n\n\"Natasha?\" he ventured.\n\nShe blinked hard. He was gone. Her gaze searched the crowd valiantly but she saw not the slightest hint of him. She lifted a trembling hand to her brow. Her eyes and her mind had been playing tricks on her and now she was seeing things in the erratic lighting of the dance floor. She turned unsteadily in Colin's arms. The alcohol was beginning to hit her hard. \n\nColin's arousal died a swift death at the stricken look on Natasha's face. He cupped her chin in one hand and lifted her gaze to his as his eyes searched her face. \"Baby, what's wrong?\"\n\nNatasha shook her head. \"It's nothing...I thought I saw someone.\"\n\nColin's eyes searched the crowd above her head. \"You're seeing him again aren't you?\"\n\nNatasha shook her head again. \"No. Someone else.\" She needed air suddenly. She felt like she was coming unhinged and the air in the room grew stiffling. She pulled out of Colin's arms. \"I'll be right back.\"\n\nColin reached for her. \"Not without me, you're not.\" \n\nShe gently shrugged off his hand. \"I'm fine, babe. Really.\" She forced a weak smile to her face and ducked into the crowd before he could reach for her again. \n\nShe would her way through the press of people towards the restrooms and lounges. She trailed her hand along the wall to steady herself as she made her way down the dimly lit hallway. The pounding music was making her head ache dully. \n\nA drunken girl who looked too young to be there tottered past on impossibly high heels and peered at Natasha. \"Cute dress,\" she slurred. \n\n\"Thanks.\" Natasha smiled slightly and turned to watch her teeter down the hallway.\n\nShe didn't think much of it when she heard the door open behind her. Nor did she have much time to react as she felt an arm slip around her waist and lift her bodily off her feet. She let out a startled scream that was quickly muffled by a hand covering her mouth. She was engulfed by darkness as she was hauled into a darkened room and the door was kicked shut behind her. \n\nLuca. Natasha waited for the mind numbing fear to crash over her but it never came. She felt no tiny twinge of fear as she was held against a tall hard unyielding male body. Instead she felt cold fury overtake her. There was no way she was letting Luca Angiolini think he could simply appear in her life and threaten her. He'd tried to kill her once and he wasn't going to have that opportunity again. \n\nShe bit the hand that covered her mouth as she jammed her elbow back into his rips, at the same time slamming her spiked heel into his instep. She felt grim satisfaction as she heard him utter a low cry of pain and his grip on her slackened. She wrenched out of his grip and spun to face him in the darkness. She could sense his movements as she threw a hard right hook which she felt connect satisfyingly with his lean jaw. He stumbled and she took advantage as she pivoted precariously on her heel and launched a kick at him. It was high and caught his shoulder. \n\nShe heard his growled curse and clamor of his body hitting something as he tried to regain his balance. \n\nNatasha spun, seeing the lit outline of the door and grabbed the handle. She wrenched the door open and was about to burst into the hallway when, damn him, his arms came around her and hauled her back inside. He held her tightly, trapping her arms at her sides and holding her off the ground as her legs kicked at the air. She screamed. \"Let me go, you bastard!\" But the music was too loud. No one would hear her. ",
        "\"GOD DAMNIT, WOMAN!!\" she heard him curse, \"I'd damn well let you go but you seem intent on beating the hell out of me!!\"\n\nShe writhed frantically in his arms only to pause at the sound of his voice. She was still suddenly. She breathed hard and felt his own chest rising and falling against her back. \n\nHis breath caressed the shell of her ear. \"Ah, that's better, bella.\" \n\nA strangled noise left her throat as she recognized even the softest whisper. \"Gianni?\" she mewed. \n\nHis hold on her relaxed and he set her on her feet. She turned slowly in his arms. Apprehensively, she lifted her hands to his face and felt the stubble on his cheeks. Trembling, she lifted her hands to his hair and combed her fingers through the long uncut locks. She took an uncertain step backwards but he held her close, his voice near pleading. \"No, bella. Ignore the hair. Listen to my voice.\" His voice held unrestrained emotion as he leaned his forehead against hers. \"Listen to my voice, bella. Please don't be afraid of me. Don't ever fear me. It would kill me.\"\n\nNatasha ran her fingertips over his brow, his eyelids, his cheeks and the fullness of his lips. Something broke inside her. \"Gianni,\" her voice between a whisper and a sob. \n\nTentatively, as if he feared she would pull away from him, he pulled her fully against him and felt relief wash over him as her arms twined around him. Even in the darkness he found her lips and took possession of her mouth. He had intended to be gentle but found himself unable to restrain himself as he pressed his lips hard against hers and sought entry into the sweet heat of her mouth. \n\nShe returned the kiss with equal fervor, burying her fingers in his hair and pulling him closer. She arched her body against his and moaned against his mouth. She wrenched her mouth away only long enough to gasp, \"Please, Gianni.\" She brushed her hips against the hardness forming at his center. As she returned her lips to his she slid her hand between their bodies to cup his engorged member. Her fingers moved deftly to unzip him and pull him free. She swallowed Gianni's moan as she felt him stiffen further and jerk in her hand. \n\nWith a low groan he lifted her off her feet easily and her legs wrapped around his hips. He walked them backwards until she felt her back pressed against a wall. His lips never left hers as he pulled the top of her dress down to free her breasts. His free hand roved over the full mounds and he lowered his head to take her dusky nipple between his lips. She shuddered and felt his cock pressing against her dewy entrance, the thin material of her underwear the only thing separating them. Her hips jerked against him and the breath hissed from his lips. His face hovered over hers. God, he wished he could see her in the darkness. He changed him mind abruptly as he savored the exquisite feel of her arms and legs wrapped tightly around him, her breasts crushed against his chest. He'd certainly cum entirely too early were his senses so bombarded by her. His mouth covered hers once more and he lifted his hand to the side of her underwear and with a sharp tug he ripped them from her body. \n\nThe head of his cock pressed insistently at the entrance of her channel. God, she was tight .He slid slowly into her welcoming walls. Her wet heat was clenched around him, impossibly tight. He shuddered as he allowed her body to stretch to accommodate him. Her arms were wrapped tightly around his back as he tightened his arm around her waist placed his hand net to her head to steady himself. Withdrawing slowly he surged and thrust hard into her, burying himself to the hilt and filling her completely, impaling her upon himself . A small scream of pleasure ripped itself from her throat and she felt him smile against her mouth. \n\nHe moved inside her at a torturously slow pace as she raked her nails over his broad back gasping his name. She rippled around him as he slowly increased his pace. \n\nNatasha thought she was surely going to die of the pleasure he was awakening in her. Surely no one could experience this intense feeling and survive. Thrust into her and with each thrust he ground against her clit sending delightful waves of pleasure coursing through her. Waves of building pleasure rolled over her making her ache to her very core with the need to find release. \n\nGianni smiled to himself in the darkness at her eagerness as her legs and arms tightened around him, drawing him closer. He began pounding himself into her, enjoying the sound of her cries as he found himself hurtling toward ecstasy. He rammed himself into her as he ground himself against her clit and felt her tighten like a fist around him and writhe in his grasp as an orgasm crashed down hard upon her. Let out a low cry as he tightened his hold on her and thrust deeply inside her and found wondrous release within her body. \n\nHe trembled and leaned into her before carefully holding her in his arms and moving to place his own back against the wall as she lowered her legs. He slid down the wall and sank to the floor, taking her with him. \n\nHe tucked himself gingerly back into his boxers before pulling her into the cradle of his body as he leaned against the wall breathing hard. \n\nHer head was nestled beneath his chin and he bent to press a kiss to the top of her silky head, pausing to inhale the sultry floral scent that arose from her dark locks. \"I thought I would never see you again,\" he said softly. \"I thought I'd never get to hold you again.\" She trembled and he wrapped his arms around her. \"I've missed you so much.\" \n\nShe was crying. \n\nGianni was concerned. \"What is it, bella?\" He prayed he hadn't hurt her. She shook her head and attempted to muffle her sobs. \n\nA thought taking him, he stiffened slightly. \"Is it the surfer? Are you fucking him?\" his voice taking on an accusing quality he winced at.\n\nShe jerked involuntarily and hiccupped, the sobs coming to an abrupt halt. \"Go to hell, Angiolini.\" She made to pull away from him but he halted her. \n\n\"I'm sorry,\" he breathed, \"I'm sorry. I didn't mean\u2014\"\n\nShe jabbed him in his already tender ribs with a sharp elbow and he grimaced. \"You're an idiot, Angiolini. No, I'm not 'fucking' him, as you so delicately put it. As if I could want anyone but you, you jerk.\" She emphasized her point with another jab at her ribs. \n\nHe hissed in a breath and took her shoulders in his hands to steady her. \"Okay, okay, I get it,\" he let out. \"Just don't do anymore damage.\" He shifted behind her. \"C'mon, we shouldn't be in here.\" He pulled her to stand with him and could hear her adjusting her dress as she stood. \n\n\"Where are we anyway?\" she asked. \n\n\"One of the VIP lounges. Electrical wiring was messed up so they shut it down for the night.\" \n\n\"How convenient.\"\n\n\"Indeed,\" he returned. \n\nHe took her hand and led her to the door. \n\n\"Where are we going?\" she asked. \n\n\"To find your surfer,\" and he felt her balk. \"No worries, bella. I'm not going to hurt him.\"\n\n\"Why can't I come with you?\" her voice was near pleading. \n\nHe sighed. \"I'll explain a little later. But right now it's best for you to be with your friends.\" \n\nShe placidly allowed him to lead her from the lounge. She was thankful for the dim lighting of the hall as she lifted a hand to smooth down her hair. Gianni turned and grinned at her. \n\nIt didn't take long to find Lacey and Colin. They'd been searching for her too, worried expressions gracing their features.\n\nLacey's expression lifted in surprise when she saw Natasha hand in hand with the tall handsome stranger. Colin glowered. \n\n\"Hey, Tash, who's your friend?\" Lacey quipped brightly, worry instantly forgotten. \n\nNatasha squeezed Gianni's hand and moved closer to his side. \"This is Gianni Angiolini.\" She watched recognition and shock slide over their faces. \n\nGianni nodded at them. His gaze was directed at Colin. \"Can I speak to you a moment?\"\n\nNatasha's head whipped up to stare at him. \n\n\"In private?\" Gianni continued. \n\nColin nodded solemnly and moved a few feet away with Gianni. \n\nLacey moved closer to Natasha and gripped her arm. \"That's him, Tash?\" she gasped. \"I can understand the infatuation. Hell, I'm infatuated.\" She looked into her friend's face. \"He came for you?\"\n\nNatasha shrugged absently as she watched the two men talking a few feet away. Gianni's face was insistent. A concerned frown wrinkled Colin's smooth brow. His blue eyes flicked to her, worry evident in their azure depths. Natasha was feeling uneasy. There was something they weren't telling her and she had a feeling she wasn't going to like it. \n\nWhen the men rejoined them, their expressions were solemn. Colin's gaze switched between the two women. \"It's time to head home.\" \n\nNatasha's gaze flew to Gianni. He nodded. A protest formed on her tongue \"But\u2014\"\n\nGianni shook his head. \"No, Natasha. He's right. You need to go home with them. No arguments. Not this time.\" \n\nShe looked both hurt and bewildered as Colin gently pushed Lacey ahead of him and took Natasha's hand to pull her behind him. She hesitated, her gaze on Gianni. \"You're leaving me again.\"\n\nGianni felt his heart seize at the pain in her voice and in her eyes. He stepped close to her, their bodies nearly touching. He tucked her dark hair behind her ear. \"Not this time, bella,\" he murmured. \"Never again. I promise. Trust me.\"\n\nNatasha's eyes flitted closed as he leaned and pressed a kiss to her brow before he nodded to Colin and Colin tugged her behind him. Natasha gazed back over her shoulder until Gianni was swallowed by the crowd. \n\nShe lay in the back seat on the way home feeling as heavy as stone. Colin had to reach in and lift her into his arms when she found herself unable to motivate her own limbs into movement. He tucked her into her own bed before turning off the lights and leaving the room. \n\nShe would spend the night gazing at the ceiling, unable to find sleep."
    ],
    "authorname": "theDuskyGirl",
    "tags": [
        "interracial romance"
    ],
    "category": "Interracial Love",
    "url": "https://www.literotica.com/s/la-vita-dolce-ch-10"
}
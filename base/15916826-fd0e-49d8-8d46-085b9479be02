{
    "title": "Two Hundred Dollars Ch. 03",
    "pages": [
        "183 Dollars\n\nMonday morning, Kent took his breakfast alone while Bailey slept in. Remembering what she had said, that it would be a \"while\" before he could spank her again, Kent had resigned himself to that fact and didn't expect anything interesting to happen for days. She really had no reason to rush. Even if she wanted to get her debt half paid before the end of this semester, she could still afford to skip a day here and there, couldn't she?\n\nKent started doing the math in his head. Today, the first day of October, was a Monday. With thirty one days this month, thirty in November, didn't she have enough time?\n\nWell, actually, even if our exams both go right up to the 21<sup>st</sup> of December, you've got to do a dollar every day just to get down to one hundred and one dollars.\n\nHe shook his head and took another spoonful of his cereal. Bailey didn't have to get down to a hundred dollars, though. She had a good head start for the next semester, since she could start right away instead of wasting the first two weeks avoiding her debt as she had this time.\n\nWith a shrug, he pushed the thought aside and finished his breakfast before heading off to his first class.\n\n=============================\n\nThe trouble with accepting payment from someone in the form of spanking them is that the whole thing gets pretty absurd when you don't do it for a while. By Monday evening, Kent had started to feel that way despite only forty eight hours having passed since she'd bent over the washing machine.\n\nStill, when he turned his chair around and looked at his dresser, her abandoned pair of jeans still sat on the corner, folded up in a neat, black square. In a way, he wanted to return them. Another part of him wanted to keep the jeans there as a sort of prize. He scratched his head, not quite understanding his feelings, and thus left the jeans, and his feelings, untouched.\n\nThe jeans staying there meant the whole thing had really happened. He couldn't deny living this ridiculous fantasy as long as such tangible proof existed.\n\nOf Bailey herself, he saw nothing. She had her late lab and some other arrangements today. Into those, Kent had no insight.\n\nThrough the open door of his bedroom, he heard the sound of the outer door to the basement apartment opening.\n\n\"Hello,\" a voice echoed down the stairs and through the hallway.\n\n\"Hello!\" he called back.\n\n\"Is Bailey here?\"\n\n\"Don't think so,\" Kent hollered back.\n\nFootsteps came down the stairs, tentative and almost certainly female. A head poked into his doorway and he recognized Laura, her cheeks red from the cool, fall air.\n\n\"Bailey not here?\" she asked.\n\n\"Pretty sure she won't be back until later,\" Kent said, looking at the dark haired girl quizzically. \"You could probably just text her?\"\n\n\"She wasn't answering,\" Laura said. \"Thought maybe your reception down here sucked.\"\n\n\"Right,\" Kent raised a dubious eyebrow and leaned back in his chair.\n\nHe had to admit that sometimes he got crap for audio quality, but the basement had no problem delivering text messages as long as you weren't in a hurry.\n\nLaura stepped fully into the doorway, still wearing a short pair of boots from outside, her dark-coloured fall jacket partially unzipped over a white blouse, and a long, dark brown skirt.\n\n\"Listen,\" she said. \"About last week.\"\n\n\"Yes,\" he replied. The interrogative 'regrets?' died somewhere short of his vocal cords.\n\n\"That was a bit, uh, weird, wasn't it?\" Laura asked.\n\n\"Everything seems a bit weird these days,\" Kent sighed.\n\nLaura leaned into the room far enough to see the whiteboard and check the number in the corner.\n\n\"Hoo,\" she exhaled sharply as her eyebrows rose. \"Girl's been busy.\"\n\nWhen Laura spoke in surprise, the faint accent she'd carried with her from Utah came through, projecting a tiny bit of foreignness over her voice. Kent normally couldn't detect anything from her, unless she tried to pronounce 'mountain' or 'pecan'.\n\n\"She has just enough time, if she keeps up.\"\n\n\"Yeah,\" Laura nodded, looking around the room. \"Hey, are those her jeans?\"\n\n\"Left 'em here Saturday night.\"\n\n\"Right.\"\n\n\"But I don't know when she'll be back,\" Kent went on. \"Like I said, try texting her?\"\n\nLaura tilted her head thoughtfully.\n\n\"Kent?\"\n\n\"Yes.\"\n\n\"She didn't do any yesterday, did she?\"\n\n\"No, but she -\"\n\n\"Or today,\" Laura said, \"Nor will she tomorrow?\"\n\n\"She said it might be a while,\" Kent offered, starting to wonder how Laura knew.\n\nLaura's phone vibrated in her vest pocket. She quickly took it out, checked it and put it back.\n\n\"Listen,\" Laura continued. \"When she's -- not available -- I'll fill in for her. Help out, y'know.\"\n\nKent inhaled, \"I see.\"\n\n\"If that's okay with you?\" Laura leaned forward and looked at him earnestly. \"I mean, it is your money.\"\n\nKent thought about that. Bailey and Laura coming to him together felt decidedly different from Laura visiting by herself. Point of fact, he barely knew Laura at all.\n\n\"Does Bailey know about this?\" Kent asked.\n\nLaura pulled her phone out of her pocket and waved it at him before putting it back. \"That was her.\"\n\n\"Ah,\" Kent replied, still regarding Laura with some doubt. She looked nervous, but that might have more to do with the spanking than anything.\n\n\"So it's okay with you?\" Laura asked, taking the red marker in her hand.\n\n\"Yeah, sure.\"\n\n\"Alright,\" she smiled and turned to the board to make two loud, clear tick marks.\n\nLaura closed the bedroom door, dimmed the lights a touch, and turned to face him, her cheeks growing redder by the moment.\n\n\"So,\" she said. \"How do you want me?\"\n\n\"I usually let Bailey decide,\" Kent pointed out.\n\n\"Oh, right,\" Laura looked around the tiny room, searching for right location. \"Which way is your favourite?\"\n\nKent looked at her skirt, trying to imagine how a spanking would feel through the material, for him or for her. Seeing his gaze, she turned side on to him.\n\n\"So?\" she asked. \"My way won't really work with the skirt.\"\n\n\"It won't?\"\n\n\"No,\" she said. \"What if I do it over your lap?\"\n\n\"Sure,\" he said.\n\nEven at the beginning, he'd preferred Bailey to choose what she wanted and how she wanted it. That made it, somehow, more comfortable. He sat on his bed, getting his butt back as far as he could so Laura would have room. She knelt next to him and leaned across his lap, bracing herself on her hands and knees before lowering herself down.\n\n\"Oh, here,\" she said, and proceeded to gather up her long, dark skirt.\n\nUp and up and up, he thought, watching her slowly reveal the cool, tanned length of her legs. She reached the paler skin, eventually, untouched by the sun, and gradually showed him her pale, naked cheeks.\n\nKent could only count himself about half surprised at that point.\n\n\"No panties?\"\n\n\"Nah,\" she said. \"So it's just four, right? 'Cause I'm, like, bare?\"\n\n\"Yeah.\"\n\nKent couldn't help but compare asses, even if just for a moment. It wasn't as if Laura weren't fit, per se, but she had mass on her that Bailey didn't. In the late evening light, his eyes could see her well rounded cheeks more clearly than before. He laid his right hand gently on her left cheek, the one closest to him.\n\n\"Lift your hips a little?\" he asked.\n\n\"Mm-hm,\" she lifted herself up a generous amount, pushing upward into his hand.\n\nKent watched her muscles twisting and tensing as she raised herself up, the curves of her cheeks arching and reversing into her lower spine as her thighs lengthened and extended.\n\n\"Perfect. Ready?\"\n\n\"Can you, like, go back and forth?\" she asked.\n\n\"Sure.\"\n\n\"Okay. Go ahead.\"\n\nWhen he slapped her pale, naked cheek, he watched the undulation spread through her flesh, down into her thigh.\n\n\"Oh!\" she squeaked. \"One.\"\n\nKent moved his hand to her right cheek, squeezed lightly to let her know where he'd strike, then spanked her there, too.\n\nLaura kept her mouth closed this time, muffling her squeak, and then giggled, \"Two.\"\n\nHearing the giggle, he went back to the left and struck her both harder and lower.\n\nShe hummed and let out a low groan this time before she said, softly, \"Three.\"\n\nKent smirked then realizing he'd found a good spot. He took a shot at her right cheek, low again.\n\n\"Mm,\" Laura moaned and turned her head to look at him through bleary eyes, the side of her face pushed against his pillow. \"This is why Bailey is always sitting so carefully? Four.\"\n\n\"Halfway,\" Kent pointed out.\n\n\"So?\"\n\n\"If you're complaining, you can stop.\"\n\n\"Don't stop now,\" she insisted, turning her face away again. \"Finish me up.\"\n\nKent spanked her immediately, right in the centre of her left cheek.\n\n\"Hah,\" she squeaked at an even higher pitch. \"Five. I can't believe this only costs you a quarter.\"\n\nThat made Kent laugh, but he followed up with a slap at her right that shook her body.\n\n\"God. Six.\"\n\n\"Just two left,\" he said.\n\n\"I'm earning my two dollars, here,\" Laura said.\n\n\"That's the idea, yeah.\"\n\nHe struck her left cheek in the lowest spot he could reasonably pretend belonged to her ass cheek.\n\nThe moment she said, \"Seven\", he slapped her right cheek in the same spot.\n\nLaura exhaled softly and said, \"Eight.\"\n\nShe didn't leave his lap, though, only turning her head to look back at him.\n\n\"How does it look?\"\n\nKent examined her cheeks frankly. \"Red in spots, for sure.\"\n\nLaura reached back and touched her flesh, feeling for sensitive spots. She exhaled softly when she touched the most tender part of her rear, where he'd focused on her seat.\n\n\"You got me good here,\" she whispered.\n\n\"So you'll remember it.\"\n\n\"For a couple days,\" she acknowledged, folding her arms under her head. \"If it's the same as last time.\"\n\nLaura lay across his lap still, her cheeks slowly reddening in delayed reaction to Kent's recent punishment. She inhaled and exhaled softly, squirmed a little, and Kent wondered if he ought to do something about the whole situation. Any other day, a naked girl in this position, in his bedroom, on his bed, would probably expect him to take some kind of action.\n\nToday, though, she had specifically come here for a spanking, to help a friend pay a debt. Mentally, he scratched his head, wondering what she expected.\n\nTentatively, he put his right hand on her thigh.\n\n\"Do you think,\" Laura asked casually, \"Bailey will really go through with it? All the way, I mean.\"\n\n\"She seems intent,\" Kent replied, squeezing Laura's thigh.\n\nLaura nodded thoughtfully, \"True.\"\n\nShe took a huge breath and slid off the bed onto the floor, her skirt falling back into place as she stood up.\n\n\"One eighty one, huh?\" she looked at the board.<br >\"Yes.\"\n\nLaura paused at the doorway, her right hand on the brass handle, and turned her head half way back toward Kent. She reached for the marker and paused halfway there. Her left hand touched her skirt over her rear.\n\n\"No,\" she said, opening the door, \"I'm done for today. See you later, Kent.\"\n\n\"Bye, Laura,\" Kent said cheerfully. \"Thanks for dropping by.\"\n\n\"No problem,\" she blurted out, automatically. \"Er, I mean... yeah, goodbye.\"\n\nKent stood up, whistling softly to himself as he listened to Laura walking up the stairs, and adjusted the board.\n\n\"$181\" stared at him when he finished. One hundred eighty one more times that Bailey, or possibly Laura, would find herself over his lap or bent over something in front of him.\n\nHe inhaled deeply, letting himself relax, and went back to his desk to finish up his work.\n\n=============================\n\nThrough Tuesday and Wednesday, Kent saw little of Bailey except in passing at breakfast. She seemed a little dour, greeting him quietly and with a tired look on her face.\n\nThursday evening, though, well after dinner, she came down the stairs with a considerable skip in her step and stopped in his doorway.\n\n\"How are ya?\" she asked, her cheeks rosy red as if she'd just run the entire way back from campus.\n\n\"Good, you?\"\n\n\"Good,\" she smiled at him. \"Just gonna hop in the shower. Be with you in a coupla minutes.\"\n\n\"Okay.\"\n\nKent couldn't quite put a finger on it, but her behaviour didn't make sense, as if someone had written a poem and decided to skip out entirely on the rhyming pattern in the last verse. Bailey seemed almost bubbly.\n\nHe supposed he could put her attitude down to the fact that she'd felt bad about falling behind her self-imposed schedule and now had the -- what -- energy? - to continue.\n\nWith his door open, he saw Bailey when she came back to the shower with her towel in hand. She featured him with a smile again before she stepped into the bathroom and closed the door.\n\nIn his mind's eye, he saw her undressing in the tiny little space, the mirror reflecting the image of her naked body. His pants started to feel tight and he closed his eyes, warding off the images for now.\n\nHe heard the bathroom door click and turned to look across the hallway. Bailey's head poked out through the small opening of the door and she checked the hallway in both directions. Her eyes met Kent's and she turned her back on him. The door swung partially open, just long enough to reveal the full length of her long, narrow body, completely naked, and then she closed the door again.\n\nKent felt his body twitch with something like a gasp.\n\nWhat is she trying to do?\n\nHe tried to focus on his work, just to pass the time, but it seemed to take her forever to shower. The water ran continuously, and he could definitely hear the variation in the sound of its falling as she moved her body in and out of the spray.\n\nWork could not distract him, but he still felt the need to pretend, looking at his computer screen and not at the doorway, when she finally finished with the shower and came to him, wrapped in her long yellow towel.\n\n\"Ready?\" she asked, leaning against the doorway, the short hair framing her face still dripping onto her bare shoulders.\n\n\"Whenever you are.\"\n\nShe took the marker and faced the board to make her tick marks, pausing a moment and shaking her head to clear it before she turned to look at him.\n\n\"Three?\" he asked when saw the marks. \"Bold.\"\n\n\"Got some catching up to do.\"\n\nKent tilted his head. With Laura's help, Bailey hadn't fallen that far behind, but if she wanted to take care of three at once, it was her ass.\n\n\"Over your desk?\" she asked, dimming the lights.\n\n\"However you like it,\" he said.\n\n\"Well, with the towel, it is easiest,\" Bailey explained. \"But if you really want me another way -\"\n\n\"Bent over the desk is fine,\" Kent insisted.\n\nBailey braced herself on the desk with her left hand and lifted up the back of her towel with the right. She kept her thighs close together so he couldn't see much of her, no matter where he stood, but he did take a long moment to lean up against his dresser and admire her.\n\nFirst of all, she'd bent over a lot farther than before. The first time, when Laura had asked him how he wanted to do it, Bailey had bent over just forty five degrees or so. She'd gone a little lower by the washing machine, but this time she'd laid her upper body almost horizontal, with her elbow now resting on his desk instead of her hand.\n\n\"It's not a show,\" Bailey insisted as she looked at him over her shoulder\n\n\"It seemed like it earlier,\" Kent jerked his head toward the hallway to remind her of the glimpse he'd caught through the bathroom door.\n\nBailey had no answer to this, choosing to change the subject. \"C'mon. Twelve spankings.\"\n\n\"You could drop the towel,\" he pointed out as he moved forward and gripped her left cheek.\n\nShe let out a muffled harrumph.\n\n\"Then it would be just nine,\" he explained.\n\n\"I know my times tables, thanks,\" she snarked.\n\n\"Ready?\"\n\n\"Are you going to go all over?\" she turned her head to ask, \"Or what?\"\n\n\"It's twelve,\" he said. \"I can make you red all over.\"\n\nBailey inhaled and gave him a nod before turning her head away from him.\n\nIf she wants it all over, she can have it all over. But...\n\n\"Where do I begin?\" he asked, running his fingertips over her flesh.\n\nBailey's knees twitched as he went low. That settled that question. She'd already stated her readiness, so he let her have a good hard slap right on her upper thigh.\n\n\"Oooooh,\" she cringed, her knees collapsing together. She exhaled heavily, then inhaled, and finally said. \"One.\"\n\nHer reaction had been irresistibly perfect. Kent raised his hand only slightly higher, intending to pack all six slaps in as close together as possible. He gave her another, just as hard.\n\n\"Ho!\" Bailey cried out. \"It's been a while. Two.\"\n\n\"Sure you want to catch up like this?\"\n\n\"I'm fine,\" her tone lightened immediately. \"Keep going.\"\n\nOne inch higher, overlapping with flesh he'd already struck twice, Kent let her have a third.\n\n\"Three,\" she whispered, her knees shaking.\n\nAnother bit higher, into the thicker, muscled part of her cheek, he struck.\n\n\"Four, Christ.\"\n\nKent moved even higher then, striking downward at the uppermost part of her ass.\n\n\"Five.\"\n\nThen he went to the outside, striking partially into the hollow of the side of her cheek.\n\n\"Six,\" Bailey sighed with relief.\n\nKent stepped back and looked at what he'd done. The left cheek now ran with a considerable and growing rash of reddish skin. Even as he watched, the pale flesh darkened right before his eyes.\n\n\"What are you doing?\"\n\n\"Admiring my work.\"\n\nBailey snorted. \"How about you finish your work?\"\n\n\"In a hurry?\" Kent laid his hand on her untouched right cheek.\n\n\"Whatever,\" Bailey put on an obviously forced casualness.\n\nHe slapped her right cheek, starting high this time.\n\nBailey cringed again, her knees collapsing as she went into a little crouch and straightened again.\n\n\"Seven,\" she spoke the number very softly.\n\nHe struck dead centre next, eliciting an, \"Ooh\" of surprise.\n\nA short time passed before she added, \"Eight.\"\n\n\"Sure you wanna keep going?\" he asked.\n\nShe didn't answer right away, but took her time thinking about it. Kent kept his hand on her cheek, making gentle circles.\n\n\"So,\" she said, \"If I just drop the towel, it's only three? Or what?\"\n\nKent inhaled and thought about it.\n\n\"The deal with taking off your panties,\" he said, \"was that I gave you a, uh-\"\n\n\"Discount?\"\n\n\"Discount, right,\" Kent continued, \"for letting me see you.\"\n\n\"Uh-huh,\" Bailey prodded. \"That's why it didn't count in the dark.\"\n\n\"So if you want the extra discount,\" he went on slowly. \"You'd have to let me... see you.\"\n\nBailey thought about this, tilted her head in confusion.\n\n\"Like, how?\"\n\n\"Like, stand up and face me.\"\n\nShe coughed lightly before her voice went cynical. \"Oh, and spin around once for your viewing pleasure?!\"\n\n\"Something like that.\"\n\n\"I'll take my four this way,\" came Bailey's wry reply.\n\n\"You can do them later if this is too much,\" Kent offered.\n\n\"I put the mark on the board,\" she pointed out.\n\nKent shrugged, even though she couldn't see it. \"You can take it back.\"\n\nBailey shook her head and gritted her teeth at him. \"Just finish the right cheek, jackass.\"\n\n\"Alright, alright,\" he surrendered. \"You want me to slap your ass, I'll slap your ass.\"\n\n\"Yes. Slap my ass, alrea-\"\n\nHis strike hit her low and hard on her right cheek.\n\n\"Yow!\" she yelped in surprise. Then, after a pause, \"Nine!\"\n\nAgain he struck the same spot.\n\n\"Ten!\" she protested. \"I thought you were spreading them out.\"\n\n\"Changed my mind.\"\n\n\"Bastar-\"\n\nThis time he went to the side of her cheek.\n\n\"Eleven, I -\"\n\nHe cracked the last one dead centre.\n\n\"Twelve!\" she gasped. \"Christ.\"\n\nBailey released the towel from her right hand so fast and stood up so quickly that it came undone from where she'd tucked it in over her chest. For a brief moment, she stood before him, facing away, completely naked with the towel in a pile around her ankles. Standing behind her and bit off to the left side, Kent got the briefest glance at her slim left breast and its pert little nipple. It lasted barely a heartbeat before Bailey, knowing where he stood, turned directly away from him, grabbed her towel and yanked it up around her body.",
        "\"Hm,\" he said, his voice rendered temporarily high pitched.\n\nBailey exhaled hard, blowing air up through her hair in frustration, and fixed her towel back in place.\n\n\"Get a good look?\" sarcasm dripped from her voice.\n\n\"Not good enough,\" Kent answered.\n\n\"Fix the board.\"\n\n\"Right.\"\n\nHe used the eraser to wipe away her three tick marks and erase the dollars remaining. Into the space, he wrote \"$178\".\n\n\"Good?\"\n\n\"Yeah...\" Bailey stood next to him, staring at the board in confusion.\n\n\"Something wrong?\"\n\n\"No,\" Bailey stammered. \"I just, um, yeah. Anyway. One seventy eight. Right. Later.\"\n\nShe listened at the door before opening it and then tiptoed through the hallway back to her room.\n\nKent's erection strained at his pants and, as soon as he had assured himself Bailey had made it to her room, he locked his door and undid his pants.\n\nChrist, Bailey, he thought, the image of her naked body, bent over to reach for her towel, racing through his mind, the whole scene replaying itself over and over again in glorious slow motion.\n\nIn his memory, he saw the full detail of her red ass cheeks, her slim, taut muscles and the little bit of breast she'd left visible despite her best efforts.\n\nAnd never mind her insistence that, having made a mark on the board, she had to go through with it.\n\nKent took a hold of cock and looked around the room for something to jerk off into. Anything would do at this point. As his eyes scanned the room, the doorknob rattled.\n\n\"Kent, let me in,\" Bailey hissed through the door.\n\n\"What?\"\n\n\"Now!\"\n\n\"Ugh, fine,\" he tucked himself back into pants, most uncomfortably, and walked, more uncomfortably, to the door.\n\nThe moment he unlocked it, Bailey opened the door and pushed past him to step inside the room, still wrapped in her towel.\n\n\"What the hell?\" she asked, pointing at the board.\n\n\"Sorry?\"\n\n\"I was at one eighty three,\" she said. \"How'd it get down to one eighty one before I even got here?\"\n\nKent raised an eyebrow. Is she angry because the count had dropped an extra two dollars?\n\n\"What?\" Bailey asked, emphatically thumping the white board. \"I don't need your pity. I can pay off my debt.\"\n\n\"Right,\" Kent agreed.\n\n\"So what gives?\"\n\n\"Uh,\" he let his voice carry sarcasm, \"Laura did those for you? On Monday, remember?\"\n\nBailey froze completely, all expression vanishing from her face. Kent wondered how Bailey could have forgotten getting a text message from Laura about something like this.\n\n\"She told me about your arrangement,\" Kent reminded her, \"That's she would 'fill in' for you when you were too busy.\"\n\n\"Oh,\" Bailey said. \"Right. I, uh, forgot she'd already... started that.\"\n\n\"Cool.\"\n\nBailey paused, looking at the board. Kent, standing behind her, watched her eyes scanning out into nothingness, maybe making some calculation.\n\n\"I guess maybe you owe her one, now?\" Kent asked.\n\n\"Yeah, maybe,\" Bailey looked distracted. \"Alright, I'll go change.\"\n\n\"Right.\"\n\n\"And you can,\" Bailey looked down at his crotch. \"Get back to what you were doing.\"\n\n\"Thanks.\"\n\nShe opened the door as he walked away.\n\n\"Oh, Kent?\"\n\n\"Yeah?\"\n\n\"Just, uh, out of curiosity,\" Bailey said. \"How did she do it?\"\n\nKent raised his eyebrow again.\n\n\"What?\"\n\n\"Over? Under?\"\n\n\"Can't you just ask her?\"\n\n\"Just tell me, please?\" Bailey begged. \"I just wanna know.\"\n\nKent shrugged, \"She lifted her skirt up. No panties.\"\n\n\"Eight spankings,\" she nodded. \"Thanks. Just wondering.\"\n\nWith that, Bailey left and Kent got back to taking care of himself.\n\n=============================\n\nBailey returned to her room and found herself so completely confounded that she couldn't masturbate. She didn't even want to. Standing in front of the cheap little floor length mirror she had leaned up against the wall, she dropped her towel on the floor. Looking over her shoulder, she bent down to pick it back up.\n\nThat part had gone perfectly, shocked Kent just as she'd hoped. It also broke the ice, just a little, on being naked.\n\nGoddammit, Laura. What the hell?\n\nShe'd had no business horning in on the deal Bailely had with Kent. Sure, sure. She had drunkenly invited the other girl in the one time. One time! That was it. She should have stopped at that point. She had no right to come in here and -\n\nBailey took a deep breath.\n\nWhat are you so angry about? a voice chided her. She took spankings for you, didn't she? That's called a favour, you stupid girl.\n\nBut the fury had already seized her. She'd worked everything out so perfectly. Yes, her stupid period had taken her out of the action for a few days, but she'd planned to come back all extra.\n\nLetting him see that little bit of her through the gap in the bathroom door? That had worked just right, putting him on the edge so his striking hand would be ready and eager. And then, at the end, loosening the towel so it would 'accidentally' fall off.\n\nChrist, that was just how I imagined it.\n\nBut the numbers? They never lie.\n\nStanding in the middle of her room, naked, furious and impotent, she took up her notebook.\n\nThis is royally screwed up.\n\nShe wrote \"2018 10 01 Mo\" in the left column, but had to leave the right side blank. Then she went down a line and wrote \"Laura\" on the left side. Beside that, she wrote out her abbreviations to show that Laura had paid off two dollars with eight spankings on her bare ass.\n\nBailey frowned.\n\nFavour, she thought. It was a favour.\n\nShe didn't like it and she couldn't say why. She still had one hundred seventy eight left to pay off. Laura hadn't denied her anything of which she didn't have plenty.\n\nShe frowned even harder.\n\nShaking herself off, she swept her hair back, digging her nails into her scalp in frustration, and finished her notes.\n\n\"2018 10 04 Th\", she wrote, adding, \"$3 12 sp (bare).\"\n\nShe put on a nightgown and slouched down in her chair. With a deep breath she tried to focus, remembering how she'd given him that perfect little look at her naked ass across the hallway. She pushed her finger down on her nightgown pressing her clit towards her vagina.\n\nDammit.\n\nBailey crawled into bed and stuffed her pillow between her legs, getting the corner right where she needed it.\n\nGoddammit.\n\nAll she could picture, every time she tried to remember Kent spanking her, was how Laura must have looked, her pale, round cheeks exposed for Kent's hand.\n\nWhy did I even ask him how she'd done it? she wondered. Wouldn't it have been better not to know.\n\nKnowing how she'd done it, she could even picture which skirt Laura had worn that day. She knew what Laura's ass looked like because they'd seen each other naked. She could picture the whole thing exactly as it must have happened. Instead of Bailey imagining her own spanking, Laura's kept popping into her head.\n\nBut if you hadn't asked him, a voice chided inside her head. You'd have imagined all sorts of things. This isn't actually worse this way.\n\nThat truth rested in her brain as a small comfort.\n\nBailey gave up on her orgasm and turned to her homework instead, knowing sleep wouldn't come.\n\nDammit.\n\n=============================\n\nKent recognized on Friday morning that something had changed. Bailey met him at breakfast, which usually didn't happen on Fridays. While they ate their meals, she chatted with a strange tension in her voice, even as they spoke of completely normal things. She stood up to leave and paused just as she passed him, asking him when he finished his classes in the afternoon.\n\n\"Usually get back at one thirty,\" he mumbled.\n\n\"Alright,\" her voice betrayed some urgency as she pressed her hip into his shoulder. \"I'll see you then.\"\n\n\"Alright.\"\n\nHe couldn't really feel horny right then, given how hard he had fought just to get out of bed, but at least he had something to look forward to in the afternoon.\n\nThe change in Bailey's attitude struck him, though. The strange bubbly enthusiasm of the day before had disappeared, replaced by a different sort of energy. It felt to Kent as if some form of desperation had taken a hold of his house mate. She watched him now. He wondered if he had done something wrong, something that made her wary, but he couldn't figure out where he had erred.\n\nEven as he walked to school, he went over everything that he could remember. She'd made her marks on the board. He'd spanked her pretty hard, but nothing out of the ordinary besides the fact she'd done three dollars in a row. Had she taken too much damage? That seemed unlikely.\n\nShe'd come back into the room, thinking he'd pitied her and given her two extra dollars. But he'd straightened that out, and Bailey had to remember the text from Laura.\n\nWas it the towel falling down? Was it the temporary belief she'd been the beneficiary of pity?\n\nKent shook it off and tried to concentrate on his morning classes.\n\n=============================\n\nBailey managed to get home on Friday afternoon at two o'clock. Breathless from the chill in the air, and possibly from a brisk walk, she popped into his bedroom doorway with her backpack still on.\n\n\"Hey, there,\" she gasped. \"Ready for one?\"\n\n\"Whenever you are,\" he turned in his chair. \"The schedule is up to you.\"\n\n\"Then I choose now,\" she sauntered into the room and closed the door before making a tick mark on the board.\n\n\"Hm,\" she thought out loud, \"One or two?\"\n\n\"You're well caught up,\" Kent pointed out, sitting only a step behind her, \"Neither of us is going home for Thanksgiving, so unless you're planning on missing a day somewhere -\"\n\n\"No,\" Bailey interrupted immediately, \"One is fine.\"\n\nKent shrugged. \"How do you want it this time?\"\n\nBailey dropped her backpack on the floor stood in front of him. She reached around her back to test her cheeks.\n\n\"I think on top,\" she said.\n\n\"Still pretty sore from last night?\"\n\nBailey nodded. \"You wanna see?\"\n\n\"See your ass?\"\n\n\"Yeah,\" she said, pausing to peer at him. \"I have a proposal.\"\n\n\"All ears,\" Kent, slouched in his chair, interlaced his fingers and laid them over his stomach.\n\n\"I show you my ass, so you can see where all the red spots are,\" she said. \"Then I pull my pants up and you can do the spankings.\"\n\n\"With you so far,\" he said. \"Go on.\"\n\n\"In exchange,\" she said. \"It's only eight instead of ten.\"\n\nKent inhaled.\n\n\"Interested?\" Bailey teased him.\n\n\"I'd be lying if I said 'no',\" he replied. \"I assume the panties are going down too?\"\n\n\"Of course. You get to see... everything.\"\n\n\"And how far down are we going?\"\n\n\"Just far enough to see...everything you need to see.\"\n\n\"For how long?\"\n\nBailey shrugged, \"I'm not putting on a show but, y'know, I'll give you as long as you need to... check out your work.\"\n\nKent inhaled again, seriously considering the offer. He assumed that she needed jeans because her ass had taken too much of a pounding the night before, so he didn't begrudge her that. He still intended to get his dollar's worth from her skinny little butt.\n\n\"I'll agree on one condition,\" Kent said.\n\n\"What's that?\"\n\n\"You show me before and after.\"\n\nBailey smiled and looked around the room. \"Deal. How do you want me?\"\n\n\"To pose?\"\n\n\"Yes,\" she smirked at his choice of words. \"How shall I pose for you?\"\n\n\"Bent over,\" Kent said, \"Hands on your knees.\"\n\n\"Oh,\" Bailey twitched strangely. \"Laura's way. Sure.\"\n\nThat had felt distinctly weird, but Bailey unbuttoned and unzipped her jeans while facing him, then turned around and pushed her jeans down below her cheeks. Even with the black panties still in place, he could see the faded redness on the underside of both cheeks where he's focused last nights spankings.\n\nBailey pushed her panties down next, revealing all of her flesh from her waist down to her thighs. The redness didn't look nearly as pronounced as the underside. In fact, she'd basically healed everywhere except for her seat.\n\nWhen she put her hands on her knees, the act forced her hips back and Kent saw everything more clearly.\n\n\"The question is,\" Kent looked her over carefully, \"What do I do with this information?\"\n\n\"What do you mean?\" Bailey asked without looking at him.\n\nHe reached out with his hand and caressed the untouched flesh of her cheek.\n\n\"I mean,\" he clarified as he cupped her right cheek, \"Do I go high, where there's no redness?\"\n\nHis hand wandered south, \"Or do I go low?\"\n\n\"If you go low,\" Bailey shivered as he made circles with his fingers. \"It'll get even redder.\"\n\n\"True,\" Kent moved his hand up. \"Depends how you want to look afterwards.\"\n\n\"No,\" Bailey continued to tremble as his fingertips moved from cheek to cheek. \"It depends how you want me to look after.\"\n\nHis hand left her flesh for a moment and she pulled her panties and jeans up in one move.\n\n\"Alright,\" she said dryly. \"Show's over.\"\n\nAfter she buttoned up her jeans, she moved over to the desk and rested both her elbows on it, then laid her head on her forearms.\n\n\"Ready,\" she announced.\n\n\"Wherever I like?\" Kent taunted her.\n\n\"Your dollar,\" Bailey replied patiently.\n\nHe put his hand on her right cheek, exactly in the middle.\n\n\"Count fast,\" he warned.\n\nBailey inhaled in trepidation. \"Okay.\"\n\nKent then began a continuous stream of slaps to the centre of her right cheek. She could just keep up with the pounding, sounding out, \"One! Two! Three! Four!\"\n\nHe paused there a moment, his hand still resting at the exact same spot he'd struck four times.\n\n\"Not going to alternate?\" she asked.\n\n\"Nope.\"\n\n\"Oh.\"\n\nHe slapped her right cheek again.\n\n\"Five.\"\n\nAgain.\n\n\"Six.\"\n\nTwo more quick, hard spankings echoed through the little room.\n\n\"Seven! Eight!\" Bailey announced.\n\nKent watched as she stood up and rubbed the one spot he'd torn into.\n\n\"Wasn't sure what you'd do,\" she admitted. \"I guess you wanna see now?\"\n\n\"Uh-huh.\"\n\n\"Like before?\"\n\n\"However you want to show me.\"\n\nBailey considered that for a lot longer than Kent imagined it needed thinking about, but she eventually pushed him onto the bed and knelt down beside him -- on his left this time. She unbuttoned her jeans again and started pushing them and her panties down, but laid herself across his lap before she showed him the front of her body.\n\nKent felt awkward because Bailey had set things up with her body facing the opposite way to every other time she'd done this. Previously, she'd gone right to left so he could use his right hand to spank her. But, with the spankings all done, that didn't matter. Instead, he watched as she pushed her clothing aside and revealed her cheeks.\n\nHe saw the faded redness in the lower part of her cheeks, as before, but that now literally paled in comparison to the fresh, circular area on her right cheek where he'd taken out all of his payment today.\n\n\"How's it look?\"\n\n\"A nice red circle,\" he said, \"But at least you can sit down.\"\n\n\"Gee, thanks.\"\n\nHis left hand slid up her thigh, over the gathered waistband of her jeans and onto her right cheek. He made gentle circles there, to moans of approval from Bailey, and starting massaging her a little harder.\n\n\"Trying to be the healer, now?\" she asked. \"Or just groping me?\"\n\n\"Uh... yes?\"\n\n\"Funny man,\" Bailey turned to glare at him over her shoulder. \"Alright, you've had a good look?\"\n\n\"Yeah, we're good.\"\n\nWith a heave that pressed down on his groin, she got herself back on her feet without ever showing the front of her body to him. The panties and pants came back up and she crossed the room.\n\n\"Don't forget,\" she reminded him as she tapped the white board.\n\nShe buttoned up her jeans, snatched up her backpack and disappeared into the hallway.\n\n=============================\n\nKent had surprised her.\n\nShe admitted that as she lay on her stomach, hips jutting up in the air, pillow clenched between her thighs.\n\nThe whole point of letting him have a look ahead of time was to encourage him to hit the parts of her butt that were already sore. She'd tried to snap at him to get him in just the right mood to go the hardest way possible.\n\nBut instead of striking her sorest sport, he'd started pounding at her right cheek, over and over.\n\nBailey pushed her hips down, grinding the edge of the pillow into her clit.\n\nHe'd surprised her with that furious assault, shaken her right up and down her spine.\n\nAnd when it ended...\n\nOh, making me to wait for my orgasm by lying there on his lap, letting him look me over.\n\nBailey shuddered just thinking about it, thinking about herself, open to his inspection, naked and red all over. Shuddered not just because she'd done it, but because he'd refused her initial offer and demanded more of her -- demanded an extra display.\n\nShe gasped as her hips pushed down, forcing the corner of the pillow to push her panties into her vagina as her clitoris rode the hard edge right into orgasm.\n\nHer body shook and trembled, seizing and gasping until the tremors ended.\n\nThat was right. That was what I needed.\n\nAt the very least, she had banished all thoughts of her friend from her brain.\n\n=============================\n\nHello loyal readers,\n\nI regret the delay in delivering this chapter to you, but a tornado wandered through my city and shmucked the power and Internet service for a few days.\n\nI'm back in business though, safe and unharmed.\n\nCheers,\n\nXavier."
    ],
    "authorname": "xtorch",
    "tags": [
        "spank",
        "spanking",
        "payment",
        "punishment",
        "exhibition",
        "stripping",
        "masturbation"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/two-hundred-dollars-ch-03"
}
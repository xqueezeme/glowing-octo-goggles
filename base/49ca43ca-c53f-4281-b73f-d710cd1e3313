{
    "title": "E-Beth Ch. 03",
    "pages": [
        "****\n\n-- CHAPTER 3: After the Date --\n\n****\n\n*-- FEBRUARY 2007 --*\n\n\"He's a stockroom clerk.\"\n\n\"I know.\"\n\n\"He's three years younger than you!\"\n\n\"Only two, at least until April.\" I sat there and looked at Stella, waiting her out. \"Got anything else?\"\n\nStella grinned and shook her head. Her time playing Devil's Advocate was over. \"Nope. Not a thing. After all, I WAS trying to set you two up together. And how the heck did this happen? I thought you two were 'just friends'.\" Stella even put her hands up to make the air quotes.\n\nI rolled my eyes. \"What did you THINK I was going to tell you until I figured out if we'd be good together?\"\n\n\"Oh, so you *lied* to me back in January when you claimed you had no interest in each other? If I'd known how you really felt, I would have done a LOT more to help you two hook up!\"\n\nI chuckled. \"Thank you, but I think I did just fine on my own.\"\n\n\"I'll say...\" Stella then shook her head wryly. \"I can't believe you put out on the first date.\"\n\n\"Hey, YOU were the one telling me I needed to get laid.\" I blushed. I wasn't going to announce that Teddy and I had actually first slept together last December. So I just shrugged and replied, \"No regrets. And I'm not worried. He's here for the long haul.\"\n\n\"He was that good?\" Stella asked with a twinkle in her eye.\n\nI nodded with a bigger gleam in mine. \"He came four times. Five, if you count this morning.\"\n\n\"You little slut!\"\n\nI giggled and nodded.\n\n\"Five times???\" she asked incredulously. \"Most I've ever gotten out of Chuck was three, *including* the morning after. But did he get *you* off?\"\n\nI leveled my gaze at my pretty blonde friend. \"Would I have been this excited to tell you this morning if he didn't take care of me? The boy's a born muff-diver; and he's *good*.\"\n\n\"*Sooo* jealous... He could've been *mine*.\"\n\n\"Wait, what?\" I popped my eyebrows.\n\n\"Oh, it's nothing serious.\" Stella waved her hand dismissively. \"When Chuck and I were having issues last November, for around fifteen minutes I thought about seducing Teddy. I really don't meet that many guys my own age around here. And he IS cute.\"\n\nI smiled smugly. \"He wouldn't have gone for you. He was still crushing on me.\"\n\n\"Maybe.\" Stella gave me a challenging grin. \"But then you've never actually *seen* me go to work.\"\n\nI laughed and the two of us chuckled over that for a few seconds. Stella then leaned forward and slapped my knee, a look of mock outrage on her face. \"So how come *I* didn't know you two were going on a date last night? It was a Wednesday! What's up with that?\"\n\nI giggled again and explained what had happened, starting back in the lab when I managed to spill chemicals into my face. After telling Amber the story this morning, I had the whole thing pretty much worked out.\n\nI'd have the story down pat by the time I had to tell Audrey and Paula.\n\nWe were just getting to the point in the narrative where Teddy was walking me up to my door after dinner. He'd kissed me and was just about to walk away, stammering about how he didn't want to presume that I'd put out for him on the first date. But before I could get to that part, a knock sounded at my office door.\n\nMomentarily surprised, I blinked and then looked past Stella, who was sitting in one of my wing chairs. And then I called out, \"Come in.\"\n\nThe door swung open, and a big smile spread across my face as I saw who was coming in. \"Teddy!\" I exclaimed.\n\n\"Hiii, E-Beth,\" he greeted me warmly, that goofy grin appearing at the mere sight of me. But a second later, he jerked in surprise. \"Oh, uh, hi, Stella.\"\n\n\"Teddy...\" Stella drawled, an impish smirk on her face.\n\n\"What's up?\" I asked.\n\n\"Oh, well, uh, I... I can come back later,\" the poor boy stammered.\n\n\"No, no, it's okay,\" Stella darted her eyes to me, rising up from her seat. \"I can go.\"\n\n\"No, I'm interrupting,\" Teddy apologized. \"You shouldn't have to.\"\n\n\"What's up?\" I asked a little more emphatically. Teddy *never* had come to my office before. I was a little curious as to why, or if it was just a general desire to see me after our night together.\n\nTeddy darted his eyes to Stella again, looking nervous. And then looking right at me to get my full attention, he said in a measured tone, \"Well, ah, I had told you... before... that there was something I would have to come tell you... today...\" He was being coy about the details, and I realized that he didn't want to announce that he'd been with me that morning.\n\nI chuckled and then waved dismissively at Stella. \"Don't worry about her. I was just giving her all the details about our date.\"\n\nTeddy's eyebrows shot up. \"ALL the details?\"\n\nI grinned. \"Well, not ALL of them. But enough. She knows you spent the night.\"\n\n\"Oh, uh, okay...\"\n\n\"So what was it you wanted to tell me?\"\n\nTeddy looked over at Stella again, clearly uncomfortable. But to his credit, the boy just straightened his spine and threw caution to the wind, damn the consequences. He stepped forward, wrapped me up in his arms, and then dipped me like they do in the movies. His strong, warm lips covered mine as he gave me a kiss of passion with all the need and longing he'd built up since we'd parted that morning. And I felt my entire body going weak, let alone my knees.\n\nAnd when he finally pulled his lips off mine, from inches away Teddy intoned in a deep voice, \"I'm falling in love with you.\"\n\nI just blinked rapidly and smiled broadly. *He's falling in love with me!*\n\nHe then stood me up, touched my cheek tenderly, and stated, \"Now you know that I really mean it.\"\n\nAnd with one last smug look over to Stella, my new boyfriend turned and strode out of the office.\n\nTogether, my blonde friend and I looked after the departing man. And together, we sighed dreamily.\n\n\"*Sooo* jealous...\" Stella moaned.\n\n****\n\n\"Wow...\" Teddy's chest rose and fell dramatically as he flopped onto his back, his deflating prick wet from the moisture of both our orgasms. \"I take it back,\" he wheezed. \"I'm not falling in love with you.\"\n\n\"Huh?\" I picked my head up and furrowed my eyebrows as I stared over at the panting, naked young man.\n\nTeddy chuckled and grinned as he looked over at me. \"I'm already *in* love with you.\"\n\n\"That's just the sex talking.\" I rolled my eyes and turned myself onto my side. I propped myself up on one elbow, and the overall position made my heavy boobs rest one on top of the other, creating a deep line of cleavage.\n\n\"Wow...\" Teddy moaned again, his eyes widening as he stared at my prodigious, naked bosom. He reached out, almost delicately caressing my breasts as if they were made of fine china.\n\nI rolled my eyes again and snickered. \"Now that's *really* the sex talking.\"\n\n\"The sex is great,\" Teddy agreed with a smile. He gently pushed at my shoulder, rolling me onto my back as he propped himself up above me, looking down at my face with adoration. \"I didn't know girls were even *capable* of moving their inner muscles like that. It was like you were fucking me and giving me a handjob at the same time!\"\n\nI grinned. \"We old broads have some tricks up our sleeves.\"\n\n\"Old broad,\" Teddy snorted.\n\n\"Well, I am.\"\n\n\"Stop saying that. You're young, youthful, and beautiful. And you are NOT too old for me, alright?\" he scolded.\n\nI smiled happily. \"Alright.\"\n\nHis eyes softened, and he moved his hand away from my boobs and up to my cheek. Caressing it tenderly, he bent down and kissed me softly. \"And this is more than sex to me. Don't get me wrong, I love it. *Love* it. But I've been IN LOVE with you for... well... it feels like forever.\"\n\n\"Why?\" I furrowed my eyebrows together. \"You'll forgive me for asking, but I've never... *never* had a guy seem so completely in love with me before in my life. I know I'm not the hottest babe on the planet, not the type who gets worshipped from afar, so you'll forgive me if I'm a little skeptical that you could be so head-over-heels for me in one week.\"\n\n\"I've known you for a lot longer than one week.\" Teddy frowned.\n\n\"Dating for a week, then.\"\n\n\"I've been in love with you since the day I first met you,\" Teddy said sincerely. \"I thought you were simply stunning.\"\n\nI rolled my eyes dismissively. \"There you go again. I'm NOT that stunning.\"\n\n\"You are to me.\"\n\n\"My BOOBS must have blinded you.\"\n\nTeddy glanced down, nuzzling his nose in my cleavage. \"Yes, you have the most stunning pair of tits I've ever seen. They're perfect. And they certainly got my attention. But I love your face. I love your smile. And for a nerd like me, your *brain* is fucking *sexy*.\"\n\nI giggled. \"My *brain*?\"\n\n\"You're brilliant, E-Beth,\" Teddy crooned. \"I see the reports. I see the things you come up with in the labs. You're *incredible*.\"\n\n\"I haven't figured out this one yet.\"\n\n\"You will,\" he said confidently.\n\nI shook my head. \"I don't get how you can have such faith in me, even though you barely know me.\"\n\n\"I've been watching you for almost nine months now. I think I know enough to have some confidence in your abilities. Just like we've now had sex six different times.\" Teddy then moved my hand lower, to where I could grab his re-hardened erection.\n\nMy eyebrows rose in surprise at his rigidity as Teddy grinned and said, \"So you should have some faith in my ability to get hard again for you.\"\n\n\"What was that, two minutes?\" I gaped.\n\n\"We were talking about your brain,\" Teddy smirked. \"I *told* you I find it sexy.\"\n\n****\n\n\"So we're still on for tonight?\" I asked excitedly into my cell phone. I was in my own office at work, and Teddy was in the stockroom. But for some reason, it just felt appropriate to be making this personal call on our cell phones instead of on the company lines.\n\nHis warm voice came through. \"Absolutely. My friends are eager to meet you. And *I'm* eager to show you off. It's been such a long time that they've started teasing that you must look like a dog for me to have not introduced you yet.\"\n\n\"It's only been two weeks!\" I protested.\n\n\"That's what I said. They complained that two weeks is plenty of time for me to have brought you by at least *once*. I finally had to tell them that we'd been pretty... uh... occupied... for the past two weeks.\"\n\n\"Mm, we certainly have...\" I giggled, thinking about how we'd more or less spent every single night together in some fashion. There were the Sundays he missed because it was his weekly 'Family Dinner', which I wouldn't be invited to until we were like engaged or something. And there was the one Thursday night when he'd previously agreed to go to a basketball game with one of his best friends who had gotten tickets. Yeah, he often went home after work and had time to chat with his friends until coming to meet me for dinner. But other than that, Teddy spent every night of the past two weeks at my place... and in my bed. It was our honeymoon phase. And it had been *glorious*.\n\nWe chatted a bit just for a few minutes, and then Teddy ended the call by admonishing, \"And don't work too late tonight, okay? We're meeting them at eight.\"\n\n\"No worries. I'm a girl and I'm meeting my boyfriend's friends for the first time. I'm leaving here before *five* just to give myself enough time to primp.\"\n\nTeddy chuckled and I could actually picture him shaking his head in amusement. I hung up first and then sat back in my chair, sighing happily. My world was absolutely perfect.\n\nAnd then the knock sounded at the door. I picked my head up and then looked through the floor-to-ceiling 2-foot window that ran next to my door. My boss, Alfred, leaned into view so that I could see him, and I sat up straight to wave him in.\n\n\"Good afternoon, Elizabeth,\" Alfred greeted me in a grandfatherly voice. \"May I borrow a moment of your time?\"\n\n\"Of course, of course.\" I stood politely and gestured to a wing chair.\n\nHe nodded and then turned around, conspicuously closing the door. I felt the hairs on the back of my neck stand up. Whatever he had to say would be private. I wasn't too worried. After all, my work was doing just fine. But it was still just a little unnerving to wonder what he was coming to say.\n\nThe door closed, Alfred took his seat, and then he collected himself. I waited anxiously until he cleared his throat. And in a patient, almost indifferent tone, he stated, \"I understand you've recently become involved with a young man.\"\n\nMy head jerked up straight and I furrowed my eyebrows. Was Alfred asking about my dating life? \"Uh... yes. Yes, I have,\" I stammered.\n\n\"A young man who is also an employee of this company,\" Alfred clarified.\n\nI blinked twice. \"I, uh...\" I sputtered nervously. \"Is that a problem? I mean, I reviewed the company regulations and as long as we're not in any sort of supervisory-\"\n\n\"No, no, dear,\" Alfred interrupted me, holding up a hand. I shut up immediately. And he explained, saying, \"I merely wanted to confirm what I had heard. I'm not here to reprimand you or otherwise discourage the relationship.\"\n\n\"Oh.\" Relieved, I sagged back into my chair and took a deep breath.\n\n\"What do you know of this young man?\" Alfred inquired.\n\n\"Teddy? Uh, well, a few things I guess. He's worked in the stockroom since last June, after graduating from Harvard. He's an above-average dancer and a very sweet guy. He's under a lot of pressure from his parents, but they actually encouraged the stockroom job because they thought it would build his character.\"\n\nAlfred was nodding and at this point, he leaned forward and gave me a very serious look. \"Elizabeth, I'm not your father and I don't pretend to be. But I consider you a bright young star in my department and I'll admit to having certain... protective... feelings for you. I just don't want to see you get hurt.\"\n\nHe had such a look of parental concern on his face that I couldn't help but break into a smile and bark a short laugh. He *was* asking about my dating life! I grinned and said, \"I can handle myself, Alfred. This isn't the first boyfriend I've had while working for you.\"\n\n\"True. But then, I'd never met any of them before. This Teddy is rather young, isn't he?\"\n\nI glanced down and had a little shit-eating grin. Teddy was certainly youthful. He still had the energy and enthusiasm of a teenager. And I hadn't had any one man fuck me for so long in one session since I'd been in college. I looked back up at Alfred and smiled. \"He's young, yes. But he's very mature in some ways, the way he treats me for one. Teddy is a chivalrous gentleman, far more polished than a lot of older men I've been acquainted with. I think his parents trained him well.\"\n\nAlfred smiled and nodded. \"Good to hear. You sound very happy. So I take it that this...\" his hands started waving \"...relationship is not just a casual dalliance?\"\n\nI chuckled. It really was a surprise that Alfred could be asking me this. He usually stayed out of my private life, as long as I got results in the lab. But he was harmless and I trusted him. So I just nodded and replied, \"I'd like to think so. We're light-years away from discussing commitments or marriage or anything like that. But I'm certain that this is much more than just a fling for the both of us.\"\n\nAlfred smiled warmly and nodded again. He didn't say anything, but merely brought his palms together with fingers extended as if he were praying. And then with that little smile, he touched his index fingers to his nose. \"That's good news. You deserve every happiness.\"\n\n\"Thank you.\" I tilted my head forward in salute and then sat up straight again, taking a deep breath. \"Is that all? I must admit, I'm quite surprised you took an interest in this.\"\n\n\"Can't an old man harbor his own curiosities?\" Alfred grinned. \"I'm no gossip, but it's still interesting to find out what you young folk are up to.\"\n\n\"Well now you know.\"\n\nHe nodded and pushed down on the armrests to lever himself up and out of the chair. \"You have a good day, Elizabeth,\" he said warmly. \"And good luck with your burgeoning relationship.\"\n\n\"Thanks, Alfred.\" I smiled just as warmly. And then he left.\n\n*Well *that* was weird.*\n\n****\n\n\"So E-Beth. Are you *sure* I can borrow your boyfriend on Saturday? I mean, I don't want to interrupt what I'm sure is a fantastic sex life.\"\n\n\"It's fine, Wayne,\" I giggled. \"Just don't wear him out moving all that furniture. I plan to give him quite a workout the next chance I get.\"\n\n\"Ah, man. I envy you,\" Wayne sighed, slapping his best friend on his shoulder.\n\n\"Hey!\" Jayna, Wayne's girlfriend, slapped her boyfriend on *his* shoulder. \"Keep making comments like that and *you* won't be getting any workout *at all*!\"\n\nWayne cracked up and Jayna giggled. Teddy just sighed and wrapped his arm tighter around me.\n\n\"And I presume we're gonna have to wait on the Sunwell Plateau raid until tomorrow, huh?\" Joshua asked, looking mildly annoyed.\n\nTeddy looked at him and then back at me, giving his old High School friend a pointed look that clearly said, 'What do *you* think?'\n\nJoshua's eyes studied my face and then dropped to my tits for a second before he turned around, muttering, \"Yeah, yeah...\"\n\nI giggled and snuggled myself tighter to my boyfriend. 23-years-old or not, it was nice to know my man wouldn't even blink at choosing me over World of Warcraft, especially since The Burning Crusade had just come out a few weeks ago.\n\nStill, I felt bad for taking up so much of Teddy's time over the past several weeks. His friends were all mock-amazed to see him, acting as if they didn't recognize his face after such a looong absence. The girls in the group were quite understanding about the situation, and the guys certainly didn't blame Teddy once they got a good look at me. But still, some of the gamer boys couldn't help but bitch about missed time and even Teddy himself seemed a little worried that he wasn't keeping up with his friends' character advancement. I knew Teddy's nerd-side was still in there somewhere, and I hadn't been giving it room to really breathe.\n\nSo I resolved to make a greater effort to give Teddy time and space. I would encourage him to spend more time with his friends, reassuring him that I had done just fine at entertaining myself before he and I hooked up together. I would do this... later. Right now, I wanted to \"occupy\" my man for just a little longer.\n\nWe waved goodbye to the three of them and Teddy's other friends. Dinner had been at the local Pizza parlor, drinking beer out of plastic pitchers and greasing up our intestines with Meat Lovers and Supremes. I knew I'd have to do some heavy exercising to make up for the unhealthy food. And I knew exactly what kind of exercising I wanted to do.\n\n\"Hurry up, lover,\" I husked seductively into Teddy's ear once we got into his truck. I was kneeling on the seat beside him, clutching his right arm as I licked his lobe and purred with obvious arousal in my voice.\n\nThe truck started and actually jerked he slammed it into reverse so fast. I giggled and then slid back to hurriedly fasten my seatbelt.\n\nTwenty minutes later, we pulled up outside my condo. Teddy had a decent apartment himself, but he also was sharing the two-bedroom place with Samir, one of his friends. And it was simply a lot freer to have sex at my place without worrying about roommates.\n\nAs had become our custom, I waited in my seat after we'd parked, even though I was just as eager to get to the fucking as Teddy was. But I calmed myself and let him run around to my door, opening it and then reaching his arms up to me. I giggled while Teddy lowered me to the ground. And then pecking him quickly on the lips, I scampered up the walk, my keys already out and ready to open up the door.\n\nI had just gotten it open when Teddy abruptly cut my legs out from under me. Giggling in delight, I let him scoop me into a newlywed carry and then step across the threshold. He kicked the door shut and continued carrying me in my arms all the way to the bedroom. I knew I wasn't the lightest of girls, and it was always a turn-on when my man showed off his wiry strength by bringing me in and then dropping us onto the bed without even breaking a sweat.",
        "We kissed for what felt like hours. I'm sure it was little more than a couple of minutes, but our lips stayed locked together while our hands only half-heartedly scrabbled at each other's clothing. I managed to get his shirt unbuttoned without ripping it. And once it was fully undone, I rolled away and got to my feet, gesturing back at him.\n\n\"Get undressed while I change into something a little more comfortable,\" I urged.\n\nTeddy nodded, shrugging out of the shirt while keeping his gaze firmly locked on me. I was wearing a polo shirt and jeans, the better to fit in casually with Teddy's younger crowd. And wanting to appear far sexier than this, I demurely turned and sashayed into my walk-in closet, letting my hips sway in an exaggerated motion with each step. I turned on the closet light, closed myself inside, and then got myself ready.\n\nThree minutes later, I opened the closet door. Teddy was almost naked, wearing only his boxer shorts as he sat on the bed in anticipation. I had dressed to kill, and I was rewarded by the sharp intake of breath and the sudden tension all along his body as he stared at me. It was good to know that even after two weeks of repeated exposure to my body, my boyfriend could still look at me as if it were the very first time. This sort of thing was really good for my fragile ego, and let's face it: I fucked him much more enthusiastically when my ego was feeling good.\n\nStrutting like a peacock, I strode forward until I was right next to the bed. Teddy's eyes darted up to my face a few times, but not unexpectedly he kept trailing his gaze down to my fully exposed bosom. I wasn't completely topless; I wore a black lace bra. But the cups had been fully pulled down to the underwire, leaving my proud tits hanging completely out with cherry-red nipples upthrust into the open air. Actually, I was sort of bottomless as well, wearing neither panties nor anything else separating my bare-shaven pussy from his unobstructed view. I was, however, wearing my favorite black garter and stocking set. And I also had on strappy black 5-inch stilettos that just screamed \"Fuck me\" at my man.\n\nFiguring I had let Teddy ogle my chest long enough. I turned my back to him, removing that particular paradise from view. Spreading my legs to the sides, I bent at the waist until I was looking back at my boyfriend from between my own knees. And reaching up, I spread my naked asscheeks apart with my own hands, exposing my pink pussy and dusky asshole.\n\n\"I want you to fuck me in the ass, lover,\" I crooned, still upside-down. \"Can you do that for me?\"\n\nTeddy's eyes were immediately riveted to my bubble butt, no doubt staring right at that crinkled rosebud. His chest got tight and he stammered uncertainly, \"I, uh... I've never done that before.\"\n\nI giggled. \"I figured. Guess there's a cherry of yours that *I* get to pop.\" Teddy certainly hadn't been a virgin before he met me. But while he'd had girlfriends, he'd never done anything really kinky with them before. They were always, for the most part, \"nice\" girls. And the sex was pretty vanilla: coital intercourse, the occasional blowjob, and a lot of cunnilingus on Teddy's part. He was just that kind of a considerate boyfriend. Already I'd freaked him out a bit when I asked him to tie me to the headboard. He'd nearly had a heart-attack when I pushed my pinky into his anus while giving him a blowjob. And he actually didn't believe me when I told him I was bisexual.\n\nAt this point, I stood up and turned back around. My boyfriend was shock-still on the bed, breathing heavily even though we hadn't done anything yet. I felt a little crackle of electricity running through my entire body from excitement over what we were about to do, and a rush of power, knowing I held Teddy in the palm of my hand.\n\nI sashayed over to the nightstand, opening the drawer and pulling out a tube of Astroglide. I didn't open it yet. I merely set it on the table top to confirm what I was telling him. And then stretching myself out, I lay facedown on the bed and turned to look at my suddenly nervous boyfriend with a smokily seductive expression on my face.\n\n\"What do I do?\" he stammered.\n\n\"Come kiss me, first. I'll show you the rest.\"\n\nTeddy came and kissed me. And then I showed him the rest.\n\nTwenty minutes later, my boyfriend was flat on his back beside me, his chest rising and falling rapidly as he stared in wonder at the ceiling.\n\nI was right next to him, my chest rising and falling as well. My boobs were still fully exposed, the pulled-down bra doing nothing but holding each globe firmly aloft as I similarly panted for breath. And the mere fact that Teddy wasn't staring at my tits was testament to how completely his mind had just been blown.\n\nThe kissing had loosened him up a little. Kissing: he understood. He'd started to tense up when I had him lube up his fingers and push them into my asshole, but then I'd started kissing him again and he got into it. I'd found myself quivering with a new kind of excitement. I was falling for the boy, and his cute face, fit body, and overall awe of me were quite the physical turn-ons, just like I'd felt with previous boyfriends. But what made Teddy unique was that he was a relative novice, sexually, and the idea that I had him as my plaything to mold and shape into my perfect lover just made moments like this extra-sweet.\n\nStill keeping my face and chest on the bed, I'd then pushed myself up onto my knees, thrusting my ass into the air. I'd had Teddy enter my pussy from behind, again something familiar. But while he stroked my vaginal tunnel with long, deliberate thrusts, I started talking to him about what was to come.\n\n\"Spread my asscheeks, lover. Mmm... that's it. See my glistening anus? See that tight, crinkled rosebud? Soon, baby, you're gonna fuck it. You won't believe how hot and tight and wonderful it's gonna feel for you. And I'm giving it to you. I'm giving you my ass. Don't you see how much I want to please you? Don't you see everything I want to teach you? I know it may seem kind of strange and unnatural; but when you push that big, throbbing dick that's stretching my cunt into my tight asshole, you'll know why I want this for you. You'll know why I want this for us. Because I'm yours. Treat me right, and this body will always be yours to take and use and enjoy for all eternity. Are you ready lover? Is your cock nice and slick from my pussy-juices? Can you feel how wet I am in anticipation for this?\"\n\nHe didn't respond except to groan and fuck me a little harder.\n\n\"I'm ready for you, lover. My ass is ready for you. Pull out now and push it up my ass. Ooh, I can't wait! That's it! I can feel it. A little harder, baby; I won't break. Keep holding my cheeks apart. Push, baby! Push! Just a little harder and... AAAGH! More-more-more-more-more! You're in me, lover! Your dick is in my ass! Push more! Deeper! Deeper! All the way! All the way until I can feel your balls slapping up against my pussy! More! FUCK! Now fuck me! Grab my tits, hold on for the ride, and FUCK ME! FUCK ME! YES!\"\n\nNeither of us lasted very long. Practice had taught me to relax my anal muscles and let my man push his way in with relatively little friction. I would clamp them shut again as he pulled back, stimulating his cock nerves on the outstrokes. And when faced with the searing heat of my bowels, the exquisite tightness of my anal chute, and the feel of my heavy tits in his palms, Teddy didn't have a chance.\n\nMe? Just knowing my man was sodomizing me, fucking an asshole for the very first time in his life, was more than enough. Sure, I got the physical pleasure from being filled up and stretched in such a wonderfully overwhelming way. But knowing I was hunched over my own bed, with Teddy losing control as he sawed in and out of me like a spastic jackrabbit, sent me over my edge.\n\n\"SHHIIIIITTTT!\" I screamed as the orgasm detonated inside me. My butt muscles clenched, threatening to break off Teddy's dick in my ass. And from my position on all fours, my entire body quivered and quaked like a wet dog trying to shake off the water after a bath.\n\n\"UNNNGHHH!\" Teddy groaned moments later. His hands were clamped down around my tits even tighter than my butt muscles were around his cock. I was bucking so hard that he literally had to hang on for the ride, and when we were done I formed bruises in the shape of fingers wrapped around my breasts. But he managed to ride me out, and soon his own hips were jerking around as he fired wad after wad of hot cream into the nether depths of my body.\n\n\"Oh gawd...\" I moaned as my chest collapsed to the bed, pinning his hands beneath me. \"Oh gawd...\" I panted again.\n\n\"Ungh!\" Teddy grunted as he fell with me, his pelvis still trying to lunge and cram an extra half-inch of cock into my rectum, his balls still contracting as they squirted a few extra ounces of spunk up his shaft and into my bowels.\n\nWhen he'd finished, I simply smiled and reached up with one hand to pat his arm approvingly. \"That was great, lover,\" I crooned before putting my cheek back down on the bed.\n\nTeddy stayed on top of me for a few more seconds before realizing he was crushing me. Only then did he roll onto his back, staring in wonder at the ceiling, no doubt reminiscing about the incredible experience he'd just gone through. And I rolled onto my back as well, removing the pressure of my own boobs compressing my lungs. And I gasped for air.\n\nEventually, we both caught our breaths and looked at each other. His eyes trailed down my semi-naked body, from exposing bra to garters, stockings, and the heels I still wore. My own eyes trailed down his, taking in the well-formed pecs, the flat abs, and his gradually deflating cock. But then I also noticed the bright red welt running six inches along his side. And a rush of adrenaline burst through me as I sat up and reached over to it. \"Oh no! You're hurt!\"\n\nThe scratch was mostly just on the surface, but there were a couple of points where the skin had been broken so that droplets of blood oozed out. Teddy looked down and then chuckled. \"Oh yeah. You were kicking so hard that your stiletto kind of shanked me.\"\n\nMy eyes flew open. \"Teddy! Why didn't you say something?\"\n\nHe looked at me like I was crazy. \"What, and stop? Babe, you would have had to rupture my spleen before I stopped fucking you. Good lord... that was incredible!\"\n\nI managed to crack a smile at that, reassured that I hadn't caused any permanent damage. But I still traced the welt with worry. And looking over at my boyfriend, I said, \"Maybe I should take some time before involving you in my other kinks.\"\n\nBut Teddy reached down and took my hand, bringing it up so that he could kiss it. \"E-Beth, if your other kinks are anything like what we just did, please, don't hold back.\" His blue-gray eyes shone brightly. \"I promise. I can handle anything you throw at me.\"\n\n****\n\n*-- MARCH 2007 --*\n\n\"Good morning, Stella,\" I greeted in a friendly voice as I passed her cubicle.\n\nUnexpectedly, the pretty, young blonde just looked dourly at me and mumbled, \"What's so good about it?\"\n\nI paused and turned back. My purse had come a little off my shoulder when I'd stopped so abruptly. And I fixed the strap before coming back around and giving Stella a serious look. \"Hey. C'mon.\" I head-nodded back to my office.\n\nSighing, Stella slowly put her hands on her desk and pushed off it to roll her chair back. Then like a lazy teenager looking like she'd rather do ANYTHING but stand up and come talk to me, she dragged herself out of her chair and followed me into my office.\n\nStella slumped into a wing chair while I closed the door. Instead of going around to my side of the desk, I dropped into the other wing chair and took her hand in mine. \"Hey, honey. What's wrong?\"\n\nHer eyes were quivering almost as much as her lower lip. And with her voice cracking, she mumbled, \"Chuck and I broke up!\"\n\nQuickly, I pulled her toward me and wrapped my arms around her shoulders. Stella buried her face against my neck and started sobbing, and I whispered soothing shushes while stroking her back. Now wasn't a time for questions or solutions. First I just had to show my friend that I was on her side. Discussions could wait.\n\nThree tissues later, Stella managed to get out the story. Thankfully, nothing horrific had happened. Nobody had cheated and there was no physical abuse. Theirs was simply a relationship that had run its course and it was time to move on. Chuck was your typical 24-year-old post-frat boy. He lived for drinking beer and watching sports and was about as romantic as a burlap sack of nails. He'd been cute and affable when they'd first met. But as the passion died out and became boring, the relationship had gone stale. The final straw seemed to be when Chuck didn't even bother to buy flowers or do *anything* for their one and only Valentine's Day. Her birthday was coming up, as well, and as far as Stella could tell he wasn't planning to do anything special for that, either. And after a couple of weeks wondering whether they had a future together, they simply agreed to move on.\n\nActually, Stella had been the one to suggest breaking up. But even so, it had to hurt a girl to know her relationship of the past eight-plus months was over. I was sure she'd be fine. But right now, she was going through all the typical emotional second-guessing of the newly single: 'Did I make the right decision?' 'Should I give him another chance?' 'Maybe he wasn't all *that* bad, even if he seemed like an insensitive turd...'\n\nI'd seen many girlfriends go through the same thing, and I'd been there myself more than a few times. The only thing that would help it was time.\n\nAnd we were taking our time. Alfred noticed that his department admin wasn't at her desk. He walked by once, peeking in my office since Stella could often be found chatting with me. He noticed her crying on my shoulder and immediately disappeared. Dealing with emotional girls was NOT our boss' forte. He was more than happy to leave that to me.\n\nAn hour later, the resolutions to be smarter the next time began. First, Stella swore off frat guys the way I'd sworn off charming but shallow bad boys, no matter how cute they were. If nothing else, the two of us promised each other we would never again date a man whose name began with \"CH\", like Chuck and Chad. And in the end, I told her that her timing was perfect.\n\n\"Perfect? Why?\"\n\nI grinned. \"We're doing the Girls Night Out tomorrow, remember?\"\n\nStella blinked, and then the lightbulb went off in her head as her eyes popped open. \"Oh, yeah!\"\n\nClub X was downtown and held a Ladies Night the first Friday of every month. There would be no cover charge and free drinks until 9pm for anyone with a nice pair of breasts. We girls had already planned this since last week, and even cleared it with our significant others. Chuck had initially okayed it, but then he probably didn't much care anymore. Teddy had given me the greenlight; he knew I just wanted to have some fun. Audrey's husband Jin had given permission; she would flirt and tease but certainly return home at the end of the night. And Paula had been \"seeing\" a guy for a couple of weeks, but they weren't even close to committed and so she was free to do whatever the heck she wanted.\n\n\"You'll have fun,\" I promised my friend. \"And I'm sure we can find at least *fifty* guys that would blow Chuck right out of the water.\"\n\n****\n\n\"Wooooo!!!\" Stella screamed, her voice just barely audible above the blaring music. No matter, the sight of her perky cheerleader body with arms raised and hips gyrating to the beat was more than enough to call attention to herself.\n\nAnd attention she was getting. I'd said before that Stella was a very pretty girl. She was petite, standing only 5'3\". But she had a cute doll-face, fine blonde hair, and a bubbly attitude. More than one person, myself included, had commented that she reminded them of Sara Jean Underwood, an actual Playboy Playmate, but with bigger tits. In any case, Stella was constantly up and dancing, making it plainly obvious that she was single and available; and men were flocking to her like bees to honey.\n\nNot that Stella would give them more than an inch. Oh, she loved the attention, but she also had absolutely zero interest in hooking up with a guy and going home with him tonight. More than once, she'd let a guy buy her a drink and chat with him for as long as it took for that drink to disappear. But when the glass was empty, she returned to the table and to her friends. And then the cycle repeated itself, until she decided she'd had enough drinks and just wanted to dance.\n\n\"C'mon, E-Beth! Audrey! Let's go!\"\n\nAudrey had just finished dancing. She'd let a cute guy lure her out, but only after flashing her wedding ring. He'd stated he just wanted to have fun for a few minutes, and kept to his word by not pushing any of her boundaries for the three or four songs that they danced together. And protesting that her feet were now sore, she talked us into letting her stay at the table and watch our purses.\n\nPaula, on the other hand, seemed to have no problems with the possibilities of hooking up with a guy and going home with him. She'd been picky so far, cutting off two guys before they got very far. But her latest dance partner seemed to be making progress, and the buxom blonde was currently rubbing her ass into his crotch on the dance floor.\n\nSo that's how Stella and I ended up dancing together. Drunk off her ass from WAY too many free cocktails, she simply closed her eyes and gyrated to the music, enjoying the head rush of gravity as she bobbed from side-to-side. Come to think of it, I was pretty drunk, too. We'd only gotten in one round before the free drinks cut off at 9pm. But the guys had started buying for us after that, and even though I wasn't actively looking for company, I still had enough free drinks come my way as well.\n\nNow there's a curious dynamic about flirting at a club. In a group of four girls, guys aren't that shy about approaching one of the girls to ask her to dance. It's not conducive to getting free drinks (after all, you can't buy a drink for one without buying a drink for all four), but it's okay to ask one to dance, because the other three still have each other for company. That was how the evening had worked from the beginning, with all four of us holding fort at our table, being siphoned off and then returned one-by-one.\n\nAt the same time, a girl alone is obvious prey. Even when no one was approaching us as a group, Paula would split off and meander toward the bar, usually getting intercepted by someone before she got there. Like me, she had her big tits out and on full display, announcing \"Hey come check me out!\" to anyone who cared to look.\n\nBut despite these opposites of numbers that ultimately lead to the same results, TWO girls are somehow \"not approachable\". After all, you can't buy a drink for one without buying for the other, and you also can't ask one to dance without risking her abandoning the friend. The only way to approach a pair is to come as a pair of guys themselves. And that just didn't happen as often.\n\nAnd that was just the way Stella and I wanted it for now. Like I've said, I'm a chemist. I'm perfectly aware of what happens to the body's system after they exercise beyond a certain point. Some call it the \"runner's high\". Basically, we'd been dancing long enough that our pituitary glands and hypothalami had stepped up endorphin production, functioning like an opiate to give us a sense of well-being not so dissimilar from orgasm. In short, dancing *felt good*, and we wanted to keep doing it.\n\nBut we'd had enough drinks and chatted with enough guys. She wasn't ready to get even remotely involved with a male only a day after her breakup with Chuck, and honestly I was starting to think of Teddy. (A) I got horny when I was drunk. And (B) the last time I was this drunk was the night of the Holiday Party, when I DID sleep with Teddy.",
        "So instead of finding male dance partners, we danced with each other. Stella opened her eyes enough to focus on me and move her body in harmony with mine. I gyrated and swung my hips to match her movements. And little smiles spread across both our faces as we realized how in-sync we were. Dancing really is like a vertical miming of sex, and with that thought in my brain, plus my latent attraction to pretty girls, *plus* the endorphin rush, I was getting really, REALLY turned on dancing with the pretty blonde.\n\nAnd I wasn't the only one. I saw the pant in the way Stella was breathing. I recognized the flush in her cheeks and the way her eyelids drooped. She might have been straight, but she was drunk enough and energized enough to be feeling good. Besides, while our current pairing was a deterrent to any solitary guys coming to try and separate us, the sight of two smokin' hot chicks practically freaking each other was enough to get a LOT of pairs of eyes watching us at rapt attention. And any girl will tell you it's quite the turn-on to know you have that many people trying to undress you with their eyes.\n\nOne brave soul DID try to approach all by his lonesome. I actually didn't notice him until I felt a strange hand gliding up my ass. And instantly, I stopped dancing and turned to glare at my molester. \"Desist in your unwanted advances or be notified in a more blatant manner,\" I practically sneered.\n\nThe half-drunk dude just stared at me blankly. \"Huh?\"\n\n\"Get your fucking hand off my ass or I'll slap you so hard you'll wish I was pouring hydrochloric acid down your shorts instead.\"\n\nHalf-drunk dude got his hand off my ass and beat a hasty retreat. I turned back to Stella, who just looked at me with a mixture of admiration and arousal. And soon the pair of us got right back into the groove of things.\n\nThe song ended and another continued. The fast, bouncing beat of the first one was replaced by a more grooving hip-hop track; and our hips slowed down and swayed further accordingly. I got a little off-balance when I leaned a little too far and almost bumped into Stella, so I had to put my hand on her waist to correct myself. And without really thinking about it, I didn't pull my hand away.\n\nHer eyes flashed with something as she realized this, but the pretty blonde didn't move to remove my hand. Actually, she seemed to move even closer. And by the end of that song, she'd slipped her own hand down to rest on my hip as well.\n\nBy the third song, two guys apparently worked up the nerve to approach us. They had their arms up and they started bopping to the beat to try and match our rhythm. But when they got within two feet, Stella raised her eyes and got one guy's attention, shaking her head in the negative. And obediently, the pair of them backed off.\n\nImmediately after, Stella beckoned me toward her by curling a finger. I moved in closer, enough so that my big breasts bumped into hers a time or two. And then completely out of the blue, she wrapped a hand behind my ear, tugged me closer, and brushed her lips across mine.\n\nA glass shattered on the floor somewhere nearby. The two of us stopped dancing, looked over to see some poor sap bending over trying to scoop up the shards of his broken highball glass. And giggling in obvious amusement, Stella just grabbed my hand and pulled me out toward the patio.\n\nWe were both still laughing when we got outside. The fenced-off area was semi-full with smokers, but Stella pulled me into a quieter, darker corner away from them while simultaneously taking deep breaths to get fresh oxygen. We were both sweaty and hot from our exertions, steam rising off our scantily-clad bodies in the cool March air. But we wouldn't feel the chill for a while as we calmed down from the momentary excitement.\n\n\"Ohmigawd...\" Stella laughed. \"I haven't done that in years!\"\n\nNow outside and shielded from the thumping music, I could actually hear her without straining my ears. I chuckled. \"What? Danced with another girl?\"\n\n\"No,\" the pretty blonde blushed. \"Kissed another girl. I think it had the exact same result the last time too. Only plastic Solo cups don't shatter quite like that.\"\n\nI giggled and nodded agreeably.\n\n\"What about you?\" Stella grinned at me. \"You seem the aggressive, experimental type. You ever kissed a girl before that?\"\n\n\"Of course,\" I laughed. *Oh, if only you knew, honey.* \"Don't all guys love to watch?\"\n\nStella laughed and nodded. \"Oh, this has been a fun night...\" she sighed. \"Thanks, E-Beth. Thanks for dragging me out.\"\n\n\"Of course. You're my friend. You were there for me after Chad. How could I do any less?\"\n\nStella smiled, her head a little wobbly. \"I didn't do a damn thing when you broke up with Chad. You were more angry than sad. And then you almost immediately got wrapped up in your Grant drama.\"\n\n\"Still...\"\n\nShe sighed, her eyes unfocused. \"I'll be fine. Chuck isn't worth crying over. Fuck, he was lousy in bed, too. Did I ever tell you that?\"\n\nI laughed. \"Uh, no. I don't think so.\"\n\nShe scowled. \"Seriously, dancing in there with *you* got me hornier than he's made me in six months. I haven't been truly sexually satisfied in WAY too long.\"\n\n\"Aww... I'll bet it wasn't that bad.\" I rubbed her shoulder.\n\nA twinkle came into Stella's green eyes and she conspiratorially leaned in close enough to bump her forehead into mine. And from that close, she covered our mouths and asked, \"How's Teddy in bed? Is he still doing it for you?\"\n\nI blinked and backed up in surprise. I wouldn't have expected her to so blatantly ask about my sex life. Then again, she was drunk. And actually, so was I. So I just grinned and growled, \"Oh, Teddy is *fantastic!*\"\n\nStella took one envious look at the expression on my face, and then backed away and groaned. \"Ohhh... I'm SOOO jealous. Does he have a big dick?\"\n\nYep, still drunk. \"It's fabulous. Maybe not the biggest I've ever seen. But it's niiice. And he certainly knows how to use it. I mean, when we first got together, he got so worked up he'd pop off pretty fast. But he's young, he always gets it up fast again.\"\n\n\"Oh, that's right... You said you guys did it like five times the first night you got together.\"\n\nIt wasn't our first night together, but I wasn't going to bring that up right now. \"Yeah... we certainly did,\" I moaned dreamily.\n\nStella moaned as well, her eyes going distant. \"Ohhh... I need to get properly *laid*...\" she whined. \"But it's so HARD to find a good man! How did you do it?\"\n\nI grinned and shook my head. \"I have no idea.\"\n\n\"No fair...\"\n\n\"There are plenty of guys in there who'd be happy to give you their best shot.\"\n\nStella frowned and looked back to the door. \"Yeah, but it's a crapshoot. There's no way of knowing if they're wonderful on the outside and miserable assholes on the inside. And with my luck lately, I'd probably pick one who secretly has a pencil-dick that squirts and goes limp inside thirty seconds.\"\n\nI laughed at that little bit of imagery, but then a truly naughty thought came to mind. Hey, my very good friend Stella needed to get properly laid after a bad boyfriend. My own very good boyfriend Teddy had been so wonderful to me, treating me like a princess. And... I'd always wanted a chance to at least see Stella naked, if not worm my way into her panties. If I hadn't been drunk, the rational part of my brain probably would have intercepted the message before it got to my mouth. But I *was* drunk, and before I'd realized it, I'd already blurted, \"Well then, I guess I'll just have to bring you home with me and have Teddy himself screw your fucking head off!\"\n\nStella's eyes flew WIDE open in abject shock. Her jaw dropped and her eyes were fluttering rapidly. \"Oh, E-Beth! I would never think to move in on your boyfriend, and-\"\n\n\"I'm serious,\" I cut her off, again without really thinking about it. Despite Stella's protestation, her nipples were rock hard and poking the material of her shirt. And I saw the new sweat forming at her brow as her face flushed a new shade of pink.\n\nMy hormones were certainly driving me. Stella was a babe, and I'd long harbored some fantasies about getting her into my bed. So throwing caution to the wind, I stepped forward and wrapped my hands around the pretty blonde's waist. I pulled her crotch against mine, mashed my tits against hers, and put my lips next to her ear. And then in my deepest, most seductive voice, I crooned, \"Come home with me. Let me watch Teddy fuck your brains out. I've trained my man very well, and I promise you he'll give you the ride of your life.\" And then again, without really thinking about it, I pushed my nose down to her neck, inhaling my pretty friend's sweet scent, and I started nibbling on her sensitive skin.\n\nStella's chest was dramatically rising and falling, pushing against mine as she took great big breaths of excitement. When I turned my face to hers, her big green eyes were luminous and in awe, staring at me with both fear and arousal. She didn't say a word. She just stared at me. And as I looked at her beautiful face, I simply couldn't help myself anymore as I closed the gap between us and softly pressed my lips against hers.\n\nHer hands had been on my shoulders, and her fingers tightened the moment our mouths met. She didn't resist, but she didn't kiss me back, either. And at that moment, I think she started to get the implication of what I was suggesting. I wasn't just offering to loan my boyfriend to her. I was implying a threesome... with both of us.\n\nMaybe I'd pushed her too far.\n\nForcing myself to calm down, I relaxed my grip around her waist and purposefully backed myself away. I didn't step back; I merely held myself a few inches in front of her face. And I watched the riot of emotions running through Stella's eyes as she stared back at me: lust, fear, shame, and excitement. I watched her heavy breathing speed up as her heartbeat must have been absolutely racing.\n\nAnd then I watched her eyes sharpen as she obviously reached the point of telling herself \"*fuck it*\". And Stella grabbed my head and kissed me again.\n\nWell, Teddy DID say he could handle anything I threw at him.\n\n****\n\nAudrey drove me and Stella home. She was a bit of a mama hen and our designated driver for tonight. She would also have brought Paula back, but the buxom blonde had found... other... means for getting home (if she got home tonight at all).\n\nIt was a good thing I was riding shotgun. If I'd been in the backseat with Stella, I'm not sure I would've been able to keep my hands off her. And as wonderful as Audrey was as a friend, she was also a gossip and I had no idea how she would have handled me and Stella drunkenly groping each other in her car.\n\nAt least she wasn't suspicious of Stella spending the night with me. This soon after the breakup with Chuck, everyone was extra attentive to our youngest member. So when Stella told Audrey she didn't want to be alone tonight and was crashing at my place, Audrey didn't even bat an eye.\n\nWhen we got to my condo, Stella and I said our goodnights to Audrey before walking a little stiffly (and wobbly at the same time) up to my door. My heart was thumping in my chest as I pondered my next move. I was still horny as hell and really wanted this. But in all my playing around with other girls, I'd never had to seduce one; all the other chicks I'd slept with had been bi or lez before I'd shown up on the scene, with the one exception of Amber in college when we'd first gotten curious together.\n\nStella removed any doubt from the equation as soon as we walked in the door. I closed and locked it behind me. And when I turned around to give Stella a nervous but hopeful smile, she simply pushed me back against the door, tilted my head down to hers, and pressed her lips firmly against mine.\n\nSo sweet...\n\nEventually, we broke apart and smiled at each other. And then remembering the third part to this little m\u00e9nage, I dug into my purse and pulled out my cell phone. But before I held down the speed dial to my boyfriend, I gave Stella a serious look. Despite her bold gesture, the pretty blonde was still clearly nervous. \"Are you sure you want to do this?\" I asked.\n\nStella took a deep breath, and then gave me a little smile. \"Shouldn't *I* be the one asking if you're sure you want to share your boyfriend?\"\n\nI chuckled and grinned. \"I'm sure. You have *no* idea how hot it makes me just thinking about him pounding you into my bed.\"\n\nStella's lower lip quivered, and she let out an adorable breathy moan. Her eyelids fluttered and she nodded. \"Then yes. I'm sure.\" And for good measure, her green-eyed gaze swept rather appreciatively up and down my body as well.\n\nGrinning, I held down the button and waited for him to pick up. Sure enough, my man was excited to hear from me. \"E-Beth!\"\n\n\"Heyyy, lover,\" I hummed seductively.\n\n\"You're back from the club?\"\n\n\"Yeah.\"\n\n\"Did you have a good time?\" Teddy asked with sincere interest.\n\n\"Yeah, I had a *great* time. But I've got a problem.\" I turned my voice into a schoolgirl pout. \"I'm drunk and I'm horny and I need you to take care of my problem for me.\"\n\nTeddy chuckled and then I could hear him covering the phone with one hand. No doubt, he was walking away to somewhere a little more private. \"Right now?\" he whispered in both surprise and excitement.\n\n\"Right now,\" I husked. \"And, I've got a... petite... surprise for you.\" I giggled, staring right at Stella, still a little tipsy from the alcohol.\n\n\"I'll be right there,\" he replied quickly.\n\nTeddy and I said our goodbyes and then hung up. Stella was sitting on the couch by now. I asked if she wanted anything else to drink, and she just asked for water. I got us two and moved to sit beside her on the couch. She sipped at the glass and then looked at me a little nervously. \"You've done this before, haven't you?\"\n\nI looked at her seriously and nodded. While she looked at me with both arousal and nervousness, I only looked at her with arousal. \"Have you?\" I asked gently.\n\nStella blushed and looked down as if embarrassed. But she nodded and replied, \"Sort of.\"\n\n\"Sort of?\"\n\nShe blushed again. And then after taking another sip of water and another deep breath, she explained. \"Three years ago. Sophie was my roommate. It wasn't too different from tonight, actually. She was this really beautiful brunette, like you.\"\n\nI blushed, \"Stop it.\"\n\nStella rolled her eyes and relaxed considerably. \"You're such a dork. You always think I'm joking whenever I tell you how gorgeous you are. Anyways, we'd been best friends and roommates for a while. We'd been to a few parties, and you know how guys like to watch two girls dancing together. We'd already kissed a few times, not to turn each other on, but just to get reactions from the boys.\"\n\nI nodded. It made *me* hot to watch two girls making out. Not that watching two guys did a thing for me. But two girls? Hell, yeah.\n\n\"Anyways,\" Stella continued, starting to look nervous again. \"One night, we both got home after deciding none of the guys at the party were worth hooking up with. But we were both horny and single. I made a comment about needing to jill off, and so did she.\"\n\nI started to get an idea of where this was going, but I waited patiently.\n\nStella took another deep breath and then looked up at me. \"One thing led to another. I started rubbing myself... she started rubbing herself. She moved in to kiss me. I wanted to touch her boobs. We both got naked and started really making out with each other; but we never got past second base, actually. We both fingered the other to orgasms, but that was as far as it went.\"\n\nI nodded, feeling some nerves of my own. If that was as far as Stella had gone, then was she ready for me to go all the way? If I pushed her, would she regret everything? I didn't know if I could handle losing her as my best friend at work. \"How were things between you and her afterward?\" I asked hesitantly.\n\nStella looked up at me and seemed to realize what I was getting at. She smiled and shook her head. \"I have no regrets. Sophie and I are still good friends today, even though she moved back home. Once we'd sobered up, we were awkward around each other for about a week. But then we went to a party the next weekend and then came home and did the exact same thing. It definitely wasn't anything regular. But before she moved away, I think Sophie and I masturbated each other a dozen or so times.\"\n\nI sighed with relief.\n\nStella sighed nostalgically. \"She was *such* a good kisser. So different from any guy I've ever been with.\"\n\n\"I know what you mean,\" I said sagely.\n\nStella bit her lip and looked at me warily. \"Why do I get the feeling you're an old hat at this?\"\n\nI leaned forward and touched her cheek. Smiling warmly, I said, \"I'm bisexual. I'm sorry I never told you before, but you seemed pretty straight and I didn't want to weird you out.\"\n\nShe blinked a few times. \"Bisexual? So... you've done this a lot, haven't you?\"\n\nI nodded. \"Mostly in college. But a few times since I've moved out here. I still like guys more. I eventually want to get married and have a family and all that. But there's something just so different about a woman's touch. It's... well... hopefully I'll get to show you soon.\"\n\nStella closed her eyes, breathed deeply, and leaned her cheek into my palm. She collected herself, and then opened her eyes, staring at me with an intense green gaze. \"Show me now.\"\n\n****\n\nShe was perfect. Stella was like a living Barbie Doll, letting me take the lead and do whatever I really wanted to her. Her skin was flushed from both alcohol and excitement. And she quivered every single time I touched her, no matter *where* I touched her.\n\nWe started with kissing. Kissing, Stella could wrap her head around. We held each other's head there on the couch, just absorbing the sensations of lips and tongues melding together with an intimately yielding softness.\n\nStella didn't resist when I slid a hand down to her shoulder, then down her arm, and underneath to hold her side. She actually turned her torso to me when I moved to cup her breast, and soon she'd reached both of her hands to my bigger mounds. We broke then, so that I could pull my dress off and give her better access to my tits. And she surprised me with her aggression in reaching around me to unhook my bra and free the prominent globes.\n\n\"I've wanted to do this for *months*,\" Stella cooed before ducking her head and wrapping her lips around the nipple of my right breast. She suckled and moaned, letting her eyes roll up into her head as she savored the flavor of my skin, musky with sweat after dancing at the club.\n\nTaking her cue, I similarly began to strip her out of her clothes. But at the last moment, I picked her head up and said, \"Let's go into the bedroom.\"\n\nDrunk on lust more than alcohol now, Stella nodded and let me stand her up. But then it was *she* almost dragging *me* down the hallway and into my bedroom. And once there, she helped me strip off her dress so that she was down to her underwear alone while I stood there completely topless.\n\nThe two of us were just getting into the groove of things when the doorbell rang. I cursed the interruption for a moment before remembering just WHY the doorbell would be ringing. And a fresh surge of excitement shot through me as I picked my head up and looked into my friend's eyes. \"He's here.\"\n\nStella looked even more excited than me.\n\nI got up and quickly pulled on a robe to answer the door. I checked to make sure it was Teddy, and soon my wonderful boyfriend had his tongue down my throat while he kicked the door shut behind him. He had enough presence of mind to break away long enough to lock it. I then vaulted myself into his arms, wrapping my legs around his waist while he supported me. And he kissed me fiercely before ducking his head into my naked cleavage and nuzzling himself between my tits.",
        "\"Bedroom, babe,\" I commanded. And my trusty steed quickly walked us back to my bedroom.\n\nBut when we got there, he stopped so suddenly that he quite literally dropped me in surprise. Fortunately, I landed on my feet. And as I regained my balance, I turned to glance at the bed where Stella was reclining against the headboard, clad in nothing but a white lace bra and matching white thong panties. With her silky blonde hair neatly framing her face and a twinkle in her green eyes, she looked seductively at my boyfriend and posed herself for maximum sex appeal. \"Hey there, Teddy,\" she hummed.\n\n\"St... Stella?\" Teddy stammered in shock.\n\n\"I TOLD you I had a petite surprise.\" I grinned at my boyfriend. I stroked his side and then reached up to my shoulders to slip the robe off. Like always, Teddy's eyes immediately darted to my exposed tits, and then stayed on them as I bent over and stripped off the rest of my clothing. Once completely naked, I then took him by the waist and moved him backwards, directing him until his calves hit the nearby armchair; and I dropped him onto it.\n\n\"You're a little earlier than I'd expected,\" I told him. \"Either that, or Stella and I got a little distracted with each other. So you're gonna have just sit and watch for a bit. Go ahead and get undressed if you want. I certainly hope you jerk off. But this could take a little while. I don't think Stella's ever done this before; not with a girl, at least.\"\n\n\"Done what?\" Teddy stammered nervously.\n\nI grinned and waggled my eyebrows.\n\nTeddy's eyes popped up. \"You mean you're gonna...?\" His voice trailed off as he stared at Stella, who just squirmed on the bed.\n\nI giggled. \"I TOLD you I was bisexual.\"\n\n\"So you... and her... are just gonna... while I...\"\n\n\"Oh, don't worry, lover,\" I interrupted reassuringly. \"You'll get your chance with her, too.\" And then turning around, I presented my naked ass to my boyfriend as I sashayed back to the bed and crawled onto it like a jungle cat stalking my prey. I then moved straight over the reclining blonde, who was panting shallowly in anticipation.\n\n\"Are we really doing this?\" Stella asked nervously.\n\n\"Just let us blow your mind,\" I purred.\n\nI think both Stella AND Teddy had their minds blown that night. I was right: Stella had never been eaten out by another girl before. Actually, she hadn't been eaten out much in the last year, period (Apparently, Chuck wasn't the considerate type). And not only was she shell-shocked from the knowledge it was me with my tongue and fingers imbedded up her twat, but I don't think she'd ever been eaten by someone who understood the female pussy like I did.\n\nI gave Teddy some time to wrap his head around things before inviting him in. Stella had spent the past hour riding home with me and then chatting and making out with me to get used to the idea of a fully Sapphic experience. Teddy had to make do with the idea of his first threesome in a far briefer period. But he did end up opening up his jeans and beating off while I worked Stella to two screaming orgasms.\n\nThen I got my knees under me and waggled my ass at my boyfriend. \"Come fuck me, babe!\" I urged. And faster than I would have thought, he'd completely disrobed and rammed his full length up my cunt. The three of us pulsed back and forth on the bed like that for several minutes: Stella sitting up with my face in her crotch, me on my hands and knees, and Teddy kneeling behind me, thrusting away with an animalistic fury. I can only imagine the looks my boyfriend and best co-worker friend were exchanging above my sweaty body.\n\nStella had time to squeal out one more orgasm, and I got one too, before Teddy groaned that he was about to cum. It hadn't been much more than five minutes, but I could understand that my man was a little overstimulated after watching his girlfriend eating out the hot blonde. This wasn't my first threesome, after all.\n\nI briefly fantasized about spreading my legs and shoving Stella's pretty little head into my crotch, urging her to send her tongue as deep as she could up my channel to suck out my boyfriend's semen. But realistically, asking a Sapphically-inexperienced girl like Stella to eat a creampie out of me would probably be too much too fast. On the other hand...\n\n\"Cum on my tits!\" I howled to Teddy. \"Cum on my tits!\"\n\nAfter a couple more lunges, Teddy finally yanked his cock out of me. This wasn't the first time I'd requested this of him, and he wrapped his hand around his shaft, squeezing tightly while I flipped onto my back and then cupped my own big breasts, pressing them together to form absolutely mouthwatering cleavage. \n\nGroaning in agony, my boyfriend knee-walked over my body and leaned forward. And with a gasp of relief, he released his hand and started wanking out jet after jet of creamy white jism, a hot spray of cum that splattered against the slopes of my breasts and started running down them to form creeks and pools of a sexual waterway amongst my mountainous bosom.\n\nTeddy hunched over me and gasped for air when he was done, wincing as if he had a massive headache from not breathing for too long. But despite the pain, there was no mistaking the goofy grin on his face.\n\nAnd his grin got even bigger when I looked up at Stella and asked, \"Will you lick this off me?\"\n\nShe hesitated for a moment, but the allure of my tits was too much for Stella and she quickly crawled over, dipping her face and darting her tongue out like a delicate housecat that wanted to clean me up. She closed her eyes as her tongue laved its way across my taut titflesh. She swirled around the nipples, gulping and slurping noisily. And all the while, a keening moan of arousal hummed its way out of her mouth.\n\nThis was turning her on even more.\n\nThe cum was all gone, but Stella was still licking. She kept going for another two minutes, just playing with the globes that stood upright and firm, sagging only slightly even though I was lying flat on my back. And then finally she popped up and looked at Teddy, fondling my mammaries and giggling, \"They're just so incredible! I'm sooo jealous of these!\"\n\nTo my amazement, Teddy just smiled and stared right at the perky blonde. \"You look like you've got a wonderful pair. Can I see them, please?\"\n\nStella had been dressed in both bra and panties when Teddy had first arrived. I'd removed the thong panties to get at her pussy, but I'd never removed the bra. The petite girl had a very nice set for her size, definitely a C-cup. Both Teddy's and my eyes were locked onto her chest as she demurely reached behind herself and unhooked the clasp. And then to my surprise, she leaned forward and husked in a cutely seductive voice, \"You can take it off me.\"\n\nTeddy grinned and reached out with both hands, delicately taking hold of the shoulder straps and then pulling them down her arms. His breath caught as he looked at Stella's perky mounds, a wonderful shape where the upper half looked like part of a cone and the lower half like the bottom of a sphere. Crinkly pink nipples capped the ends, and I saw Teddy's hands twitch with desire to touch them.\n\nBut I had other ideas first. I'd seen Teddy's cock twitching with signs of new life as Stella's tits were revealed. And I was already anxious to see him stuff that glorious piece of man meat into Stella's tight little cunny. So sitting up, I ordered my man to lie down and let me go to work on him.\n\nHe did as asked, and I reversed myself so that I was lying beside him on the bed, but with my head at his crotch. From this position, I was able to take his shaft in my left hand and start sucking on his knob from next to his right hip. And sure enough, the beautiful penis began to firm up.\n\nIt firmed up even faster when I asked Stella to help me. Quickly, the perky blonde laid down on Teddy's left side, mirroring me. Her right hand took over stroking duties while I went to tickle at his balls. And together, the two of us gave Teddy his very first dual blowjob.\n\nStella sucked on his mushroom head while I tongued the underside of his crown. Stella licked up the left side of his shaft while I licked the right. We met at the top, kissing each other and snaking our tongues out into each other's mouths, darting across his sensitive glans at the same time. And it's a miracle Teddy didn't blow in our faces right then and there.\n\n\"Holy fuck!\" Teddy groaned, straining with his pelvic muscles to hold himself at bay. Even though he'd cum just a few minutes before, having the two of us frenching around his prick was just a little too much stimulation for his inexperienced mind.\n\nI figured I'd better make my fantasy come true before he lost it again, and we'd have to start all over. So pulling our heads free of Teddy's cock, I gripped Stella's jaw and gave her a searingly wet kiss. And when we broke for air, panting and gazing into each other's eyes, I asked, \"Are you ready for him to fuck you?\"\n\nIt looked like Stella came right then and there. She quivered and gasped, her eyelids drooping. But amidst her heavy panting, she picked her head up and nodded. And then together the three of us got Stella positioned comfortably supine on the bed.\n\nI knelt next to my boyfriend as he helped the blonde spread her legs to the sides and raise her knees into the air. \"Told you I was kinky,\" I giggled.\n\nHe smiled and started to move his hips into a missionary position over the beautiful younger babe. But he stopped himself, then turned and looked at me seriously. \"Are you sure you're okay with this?\"\n\nI rolled my eyes and lightly bopped him on the head. \"Silly boy. *I'm* the one that set all this up!\"\n\n\"But still.\" He looked at me earnestly. \"Once we do this, everything changes.\"\n\n\"Will you stop loving me?\"\n\n\"Never,\" my man replied without hesitation and with all the gravity of The Truth.\n\nI grinned. \"Then do it. And hurry up! *I'm* so anxious to see this!\" I held Teddy's head in my hands and gave him a fierce kiss. And thankfully, I felt him begin to relax.\n\nMeanwhile, Stella was panting heavily and staring at us with unabashed lust across her face. Her green eyes were searingly intense as she looked up and down Teddy's muscular body, and especially at the big weapon hanging down between his legs. Even though she'd willingly kissed me, and willingly played around with me, I could tell that she was far more aroused now, this close to fucking Teddy, than she'd ever been making out with me. The girl was mostly hetero, after all. She was sopping wet. She was horny. And she was even rocking her hips a bit, like a kid standing first in line to hop on-board the most thrilling rollercoaster in the world.\n\nBut Teddy didn't enter her just yet. Once letting go of me, Teddy lowered himself all the way down so that he could press his lips to Stella's. Despite all we'd already done, the two had never locked lips. And Teddy corrected that by giving her a kiss of tenderness and appreciation, giving her that measure of respect instead of just thrusting in and using her for his own pleasure. Stella moaned into the embrace, her thighs coming up to wrap around Teddy's hips. And with their mouths and tongues still enjoined, his cock slotted into position and he pushed forward.\n\n\"Unnnghhh...\" Stella grunted as she felt herself filled up with my boyfriend's dick.\n\n\"Oh, Stella...\" Teddy moaned through his teeth as her tightness surrounded him. And then the pair of them began the horizontal mambo.\n\nI felt a surge of happiness running through me as I witnessed this first coupling between my boyfriend and close friend. I was still buzzing after all the alcohol I'd consumed that evening, and energized from all the dancing and orgasms I'd already experienced. And the simple fact was: all of my greatest sexual experiences had always come in some form of group sex, starting with Carmita's orgies in college with Amber and Randall and Maria, etc. Then there was my time in the house with David, Amber, and Diane. Even after graduation, my best experiences were when I returned to the college town, and to my old friends.\n\nI'd tried to replicate those feelings somewhat ever since moving out here. I'd had my three boyfriends in the past three years, and at some point offered a threesome to all of them. Marcus and I had carried on a very successful affair with Teri for four months before she got herself a boyfriend and moved on. Marcus and I had broken up because he went hunting for a replacement without me. Jeez, you think he could've waited, knowing full well that I *would* bring him another girl.\n\nVic, actually, nearly broke up with me over the idea of a threesome. He declared that me sleeping with a girl was the same as HIM sleeping with a girl, and termed it cheating even if we were all together. Of course, I caught him screwing around on me anyways, which made the whole thing a moot point. I think he was just insecure at the idea that he wasn't man enough to satisfy me alone -- that I needed a girl in bed with us to really get off. Maybe he was right.\n\nAnd of course, there had been the whole fiasco with Chad and Melissa.\n\nBut this was going to be different. Melissa had been a tramp. I should have recognized that from the beginning. Stella, on the other hand, was my friend. She would never betray me. Teddy, too, was a sweetheart of a man. Unlike the handsome devils I'd dated in the past, he truly adored me and even when presented with an available pussy, he'd stopped to make sure I was okay with it first.\n\nThis was going to work. True, maybe Stella wouldn't stick around for the long haul. After all, she was pretty straight, despite our earlier experimentation. But then, no third wheel can ever stick around forever. I'd been David's and Amber's third wheel for years, and I needed my own thing as well. But for now, at least, I could enjoy this moment. And if nothing else, the way Teddy was reacting gave me hope for our future together.\n\n\"Awwwwwooooohhhhh... Fuck me!\" Stella whimpered while her whole body jerked back and forth on the bed. I caressed her nearest breast with my fingers, tweaking the nipple while she thrashed and tossed her head left and right.\n\n\"Ugh, ugh, ugh,\" Teddy grunted, pistoning his thick cock in and out of her tiny twat. His jaw was clenched from the exertion, and I stroked his spine tenderly with my other hand.\n\n\"I want you to cum inside her, lover,\" I crooned to my boyfriend from an inch away, feeling my heart racing at the mere thought of it. \"I want you to cum so deep inside that I'm going to have to spend fifteen minutes just trying to dig it all out with my tongue. Would you like to see that? Would you like to see your big-titted girlfriend bending over to slurp your jizz out of her best friend's pussy? Huh?\"\n\nTeddy groaned and closed his eyes, no doubt already fantasizing about it. I turned his face to mine and kissed him. And I let my hand run down his spine to cup his ass, squeezing the firm glute appreciatively.\n\nThen I moved down next to Stella. I touched her face, getting her to stop thrashing her head around as she opened her eyes to look at me. I smiled at her from an inch away and asked, \"Feel that, honey? Feel my man's cock splitting you open and driving so deep into you? Isn't he just as good as I promised? Isn't he bigger and more fulfilling than that loser boyfriend you dumped? I'll let you fuck him whenever you want, how 'bout that? Just poke your head into my office and whimper about how you need a good shagging. And then my boyfriend and I will take you home and double-team you so good you'll want to move in with us!\"\n\n\"Nnnnghhhooohhhh...\" Stella clenched her eyes shut and moaned.\n\n\"He's gonna cum in you soon, honey. My boyfriend's gonna spunk in you. He's already gone off once, so he should last a few more minutes. But then you're gonna feel that hot spray of spunk hosing down your innards and giving you the most tingling bursts of pleasure.\"\n\n\"Ohhhh...\" she moaned again.\n\n\"Now are you ready to return the favor, honey?\" I asked sweetly, but with a new edge in my voice. \"You've never done this before in your whole life. But if there was ever a time to try it, now's the time. *Are you ready to eat me?*\"\n\nStella's eyes snapped open and she stared at me with wild, electric green irises. Her mouth opened and she panted excitedly. And with an eager expression, she nodded hurriedly.\n\nI grinned and swung a leg over Stella's face, careful not to knock into Teddy. I faced the headboard, holding onto the top of it for leverage so that I didn't crush Stella's face. I squatted down with my ass right in front of Teddy, giggling when he kissed my buttocks playfully. And then I felt Stella take her first licks at my sopping wet snatch.\n\n\"Holy FUCK!\" Teddy exclaimed, ramming himself into the pretty blonde while watching her tongue spearing up into my channel.\n\n\"Mmph!\" Stella squeaked, feeling Teddy's cock pumping inside of her while she enthusiastically, if not skillfully, slobbered all over my labia.\n\n\"Ohhh... yesss...\" I hissed, listening to the bed squeaking and feeling Stella continue to lick and suckle at my wet box. She may not have ever done this before, but she knew a female's anatomy. And holding onto my asscheek with her left hand, she began pumping two fingers inside my tunnel with her right while wrapping her lips around my clit and sucking hard.\n\n\"Nnnn-GAH!\" Teddy grunted as he blew first. I felt the whole bed jerk as he slammed himself forward one final time and began emptying himself out into my little blonde friend's pussy. And like dominos, the pleasure spread from his body, through Stella's, and into mine.\n\n\"Hnnnngh!\" Stella grunted as she felt the splashes of spunk explode inside her loins. Her body quivered as if in the middle of an earthquake, the vibrations carrying themselves up her vocal cords until she practically screamed her orgasm right into my cunt.\n\nAnd then at last, I threw my own head back and shrieked, \"YESSS!!!\" My fingers gripped the top of the headboard so tight I'm surprised I didn't leave dents in the wood. And as the waves of pleasure battered my body, sending me undulating like a belly dancer on top of Stella's face, I thought that maybe... just maybe... I had found the happiness I was looking for.\n\n****\n\nThe nervousness started to hit me the next morning. I was alone and naked beneath the bedsheets, although the smell of my companions was still on the pillows around me. This wasn't so odd. Teddy was a morning person, and quite often he would be up and awake before me. The first few times he'd spent the night with me, he'd just lay there and hold me, feeling that it was the \"right\" thing to do. I'd repeatedly told him it wasn't a big deal to me, as long as he didn't *leave* the place entirely (like he'd done that first December night after the Holiday Party). He'd finally figured out it was okay to sneak out of bed and make himself coffee or something.\n\nBut this morning, I was a little bit nervous. Teddy wasn't here... but neither was Stella. I checked the clock, 8:30am on a Saturday. Most likely they were awake and chatting outside. But what if they weren't? What if Stella had been consumed by her shame and guilt over an immoral lesbian act and would never want to see me again? What if she'd left the condo with nothing but a letter of apology, like Teddy had first done?\n\nSo with a little more speed than usual, I rolled out of bed and went hunting for my robe. I also snaked on a pair of panties, but didn't worry about anything else. And so clad I went out of the bedroom, my heartbeat humming along at a pretty rapid pace.\n\n\"E-Beth! Good morning!\" Stella greeted me with a cheery smile. Hmm, Stella was a morning person, too. She was sitting over breakfast at my 4-person dining table across from Teddy, wearing just one of my long pajama shirts, which covered her crotch since she was a little shorter than me. She set down her cup of coffee and stood up, hopping around to greet me.",
        "\"Morning,\" I replied warmly, if cautiously.\n\nStella didn't notice the hesitance, though, as she simply hugged me and then tilted her face to mine for a sweet, tender kiss. \"Mmm... that was *incredible* last night. I NEVER really thought I'd be into something like that.\"\n\nI blinked a couple of times. \"Then why did you?\"\n\nThe pretty blonde gave me a shrug and a smirk, answering, \"I dunno. I do that sometimes... just go with the flow, you know? See what happens. Like sushi. For years and years, I had no interest in eating raw fish and thought it was weird. But once someone got me to try it a couple of years ago, I realized... 'Hey, this is pretty good!'\"\n\nHer smile was infectious, and soon I was grinning right alongside her.\n\nStella giggled cutely and then pecked my lips again before turning around and hopping into the kitchen. \"You want breakfast? I hope you don't mind me cooking. Teddy showed me where everything is. I made pancakes!\"\n\n\"Pancakes are great,\" I replied, still a little off-guard.\n\nFortunately, Teddy had sidled up next to me by then. \"Perky in the mornings, isn't she?\" he drawled with a little grin.\n\n\"She's perky all the time,\" I replied and turned to kiss my boyfriend. And once we pulled apart, I looked at him seriously and pulled him down so that our foreheads were touching. And I asked very softly, \"Are you okay? With everything?\"\n\nHe blinked and looked at me intently from just an inch away. And in a quiet voice he said, \"I was just going to ask you. I mean, I DID just have sex with a girl who wasn't you.\"\n\nI smiled and cupped my boyfriend's cheek. \"Maybe you still don't get it, but I'm NOT jealous.\"\n\nHe sighed. \"You're right: I don't get it.\" But then his eyes flicked to the kitchen, where Stella was bopping side-to-side as she scooped up another set of pancakes, her tight little butt barely covered by the pajama shirt. From the way the shirt wrapped around her asscheeks, it didn't look like she was wearing any panties. And a little smile tugged at his lips. \"Still... I'm not complaining.\"\n\nStella turned around then, coming back with a fresh plate. The syrup and whipped cream were already on the table. \"So did you guys have any plans for today?\" she asked cheerily while re-taking her seat.\n\nHer hyper, bouncy attitude brightened the room, and Teddy and I both smiled as we went to sit down. \"Nothing concrete,\" I replied, looking at my boyfriend. \"Just a lazy Saturday.\"\n\n\"Cool,\" Stella nodded, a twinkle in her green eyes. \"So... uh... do you think we can do it again?\"\n\n****\n\nStella ended up spending the entire weekend with Teddy and me. She brought an energy and enthusiasm that put a spark in all of us, and we were in and out of the bedroom every couple of hours it seemed. And that doesn't even include the random sex acts *outside* the bedroom.\n\nIt wasn't always all three of us. His declarations of love and fidelity notwithstanding, Teddy was still extremely aroused by both the beauty and the \"newness\" of the petite blonde. So it was easy for Stella to flirt with him, tease him, and get him to abruptly drop everything, bend her over the couch, and fuck her within an inch of her life while I stood by, half-laughing and half-reaching in to tweak a nipple or rub my man's balls.\n\nStella also spent a lot of time with me. Despite her almost purely-hetero life up until this point, she took to the Sapphic arts like a duck to water, enthusiastically making out with me, rubbing her hands all over my girly bits, and learning the finer points of cunnilingus and manual manipulation.\n\nAnd then of course, she was careful to leave Teddy and me to our own times together. Stella wanted to make abundantly clear that he and I were still the romantic couple, and she was just a friend joining in for an incredible experience. And Teddy wanted to make abundantly clear that his feelings for me hadn't changed, except to grow even more despite the sexual contact with someone else.\n\nThat's not to say we *only* paired up in different combinations. There were four threesomes in those two days. And for me, the highlight was on Sunday when Stella and I sixty-nined while Teddy went back and forth, switching ends, until he finally nutted inside me and Stella (who was on the bottom), actually spread my labia to slurp out his creampie.\n\nBy Monday morning, we were all exhausted and fucked out. I mean, I love sex, but as it turned out, none of us hooked up again for the entire week after. I'd had enough sex to last me for a little while, and also had a breakthrough in my latest pharmaceutical design, which kept me pretty occupied. Teddy wanted to catch up with his friends. And Stella was showing all signs that she'd had one incredible experience she would never forget, but that things would end after the one experience. So the three of us all went our separate ways for the week, and I assumed that the incredible experiment was over.\n\nTurns out, I was wrong. Teddy and I were in my office on Friday afternoon, making plans for the weekend, when Stella poked her head in and knocked. Almost shyly, she asked if we would mind her joining us again.\n\nTeddy completely deferred an answer to me, as well he should in a situation like this. Me? You couldn't keep the grin off my face.\n\nThat weekend was a pretty close copy of the first. Only this time when Stella and I sixty-nined, Stella got creamed and *I* ate it out.\n\nAnd then two weeks after that -- three since the night after Club X -- I started to realize that Teddy, Stella, and I were developing into something special.\n\n****\n\n\"Okay, Capricorn-Taurus: Both of you are very practical people, with good common sense. Your grounded and realistic approach to issues makes you very compatible philosophically and intellectually. Over time, the two of you may become too complacent and conservative, and focus too much on mundane affairs or narrowly focused mental interests. Take time for sheer fun and enjoyment and do not become too serious. You feel you can rely on one another. You can also accomplish a lot together. You make a good team. Compatibility: A perfect 7/7: HOT!\"\n\nI looked up from my laptop and took a breath. Then I added, \"Sound like us?\"\n\nTeddy grinned and nodded. \"Sounds great. There is that one caution though, to take time for sheer fun and enjoyment. Think we're doing enough of that?\"\n\nI giggled and looked down between my legs. I was completely bottomless, my slacks and panties removed even though I was wearing my shirt from work. I'd kicked both legs over each of the armrests in this easychair, spreading my pussy wide. \"What do you think, Stella? Are Teddy and I doing enough to have fun?\"\n\n\"Mmm-hmm...\" she mumbled into my crotch before slithering her tongue back out and up my channel.\n\nI shuddered and moaned. After only three weeks, the girl was getting *good*. But a second later, she licked up my clit and sat up straight. \"What about me? What does it say about me and you guys?\"\n\n\"Your birthday was what, last Monday?\"\n\nStella nodded and went back to licking.\n\n\"Okay, you're a Pisces... Hmm... Ah, here we go. Twelfth sign... yadda yadda... These folks are selfless, spiritual, and very focused on their inner journey. They also place great weight on what they are feeling.\" I paused and looked down at Stella. \"What are you feeling?\"\n\nShe moaned and looked up at me, though she was still rubbing her pussy with her left hand. \"I'm feeling *goooood*,\" she replied with a grin. \"That tells me to keep doing what I'm doing.\"\n\n\"Amen to that.\" I chuckled and put my hand on the back of her head to push her into my crotch once again. I sighed as she continued licking me, and I returned to the laptop.\n\n\"'Pisceans are fluid and easy-going... Intuitive, almost psychic natures... Hard to pin down, prompting some to call them the chameleons of the Zodiac... One of their primary goals is to help others... Compassionate, charitable, and will quickly put the needs of others ahead of their own. It's this kind of self-sacrifice which keeps these folks going. The flip side to their giving natures is that oft-timid Fish are likely to be taken advantage of by less well-meaning souls.'\"\n\nTeddy jerked to a stop. While Stella had been distracted by listening to my narrative and eating me, my boyfriend had quietly disrobed and gotten to his knees behind Stella. Unbeknownst to her, he was about to grab her hips and impale her from behind. But at that last comment about being taken advantage of, he stopped and suddenly looked guilty.\n\nStella saw the expression on my face change and where I was looking. She turned around and saw Teddy before rolling her eyes. \"You guys aren't taking advantage of me,\" she drawled before wiggling her ass. \"Now hurry up and get in me. Please?\"\n\nStella gave Teddy the puppy-dog eyes and a pout. He smiled and then obediently moved between Stella's legs, taking hold of her hips and then slowly guiding himself into her from behind. She cooed in pleasure as my boyfriend's thick cock spread her open, and with a happy sigh she leaned in and resumed licking me. \"Tell me about compatibility with you two,\" she added.\n\n\"Pisces-Taurus: That's you and me, honey,\" I began. \"Both of you are basically tolerant, easy-going, peace-loving people, and this goes a long way toward maintaining harmony in your relationship. Pisces really appreciates Taurus' steadiness and dependability, while Taurus responds to Pisces' gentleness, kindness, and sympathy.\" I looked down at Stella. \"I do.\"\n\nShe looked up at me with a smile. \"I do, too.\"\n\nI looked back to the screen and added, \"Compatibility: 5/7: Harmonious.\"\n\n\"What about Teddy?\" she gasped, humping her body back and forth to meet each of Teddy's thrusts.\n\nI switched pages. \"Pisces-Capricorn: You and Teddy. You are opposites in many respects. Capricorn is practical and realistic, and has a serious, sometimes cynical attitude toward life. Pisces on the other hand, is a sensitive, imaginative dreamer at heart, far more emotional and empathic than Capricorn is. Capricorn thrives on order and organization. Pisces is frequently disorganized or more comfortable in an atmosphere of clutter and 'creative chaos'. Both of you have a certain reserve, depth, and tendency to introspection and you may have much to offer one another if you are willing to appreciate the differences between you.\"\n\n\"Nnnghhh...\" Stella moaned. \"Teddy's got a big dick. I've got a tight pussy. That's one difference I think we both appreciate.\"\n\nI giggled and rubbed my crotch against her face before finishing, \"Compatibility: Also 5/7: Harmonious.\"\n\n\"Mmm... Harmony...\" Stella sighed before stopping her thrusting movements. She reached back and gestured to Teddy, who also stopped. Then my beautiful friend reached up to me, tugged my ass to the edge of the seat, and pulled my legs off the arm rests. She crawled up my body, opening up my blouse and kissing my breasts before taking my head in her hands and kissing me. And then she pointed back behind herself, directing Teddy to enter me instead.\n\nI set the laptop down on the table beside me and sighed as Stella's lips and tongue probed my mouth. I sighed happily and then moaned into my Sapphic kiss as my boyfriend's cock began filling me. And then Stella moved up a little higher to get out of the way and allow Teddy to really start pumping me, all while shoving my face into her own 32C boobs.\n\n\"The two of you are wonderful together,\" Stella moaned, rubbing her tits against my cheeks. \"And I'm a harmonious bond with each of you.\"\n\nI didn't respond except to moan as Teddy continued fucking me.\n\nThen Stella kissed me one more time on the forehead and smiled. \"I wanna be like this forever.\"\n\n****\n\n*-- APRIL 2007 --*\n\n\"It's the trifluoperazine that's screwing you up.\" Teddy leaned forward and tapped my monitor.\n\nI sighed. \"That's standard prescription with the tranylcypromine as an antipsychotic.\"\n\n\"Yeah, but maybe one of the other phenothiazines would be better. Have you looked into them? Chlorpromazine maybe?\"\n\n\"Too strong. That's a sedative that'll knock the patient out.\"\n\n\"Well you've got to use something else.\"\n\n\"Ugghhh...\" I groaned, hunching over with my elbows planted on the desktop and my head in my hands.\n\n\"Hey... you'll figure it out,\" Teddy said reassuringly as he leaned over and started rubbing my shoulders. His thumbs quickly centered on the base of my neck and began stroking outwards. \"We've got other weak phenothiazines: Perphenazine, or maybe Flupentixol.\"\n\n\"Or maybe I'll have to customize something, to keep the trifluoperazine without the side-effect.\"\n\nA knock sounded at the open door. Stella poked her head in, a wry smile on her face. \"That doesn't look like it's in the job description of a stockroom clerk,\" she sassed.\n\nTeddy grinned and just continued giving me a neck massage. I closed my eyes and let my head loll back down, sighing, \"I'm not dating him for his job description.\"\n\nStella giggled. Teddy chuckled. And then he leaned in and kissed the back of my head as well while I hummed happily in pleasure, more mental than physical.\n\nThen Stella took a deep breath. \"Well, it's getting late, honey. We should have left a half-hour ago, and if I stick around too long it'll start to look weird.\"\n\nI picked my head up and scowled at the monitor. I'd wanted to figure out this latest hitch in my design before leaving, but Stella had a point. \"Don't want people to get the wrong idea, huh?\"\n\nStella glanced around the hallway, and then ducked her head back into my office. \"You mean the *right* idea...\"\n\nI chuckled and nodded.\n\n\"Relax,\" Teddy sighed. \"I'm her boyfriend; you're her best friend. No one's gonna think a thing. Still, Stella's right; it's a Friday night! Let's get out of here and have some fun.\"\n\n\"Unnghh...\" I groaned. \"I can't. I'm going to be thinking of chemical compounds all weekend if I don't finish this.\"\n\n\"Sure you can,\" Stella said encouragingly, finally stepping into the office and coming around. She leaned over the chair and stuck her head between mine and Teddy's. And in a quiet voice that only we could hear, she intoned, \"You remember how you guys wanted to try double-penetrating me for my birthday, but that I was scared of anal sex? Well, I think I'm ready to try it now. I'm still afraid it's gonna hurt, but I've been dying to have Teddy's cock and your strap-on in me at the same time. So why don't you think about *that*, huh?\"\n\nMy eyebrows shot up and both Teddy and I turned to stare in disbelief at Stella's giggling face.\n\n\"Okay.\" I nodded. \"We're leaving.\"\n\n****\n\nGood lord Stella was gorgeous right now. Her eyes were closed and she was biting her lower lip while groaning at the penetration. Her head was tilted back, exposing her throat to me. And I couldn't help but crane my own neck so that I could kiss the exposed skin.\n\n\"Oh, gawd...\" Stella gasped and arched her back, shoving her chest harder against mine and putting her weight onto me. I was lying flat on my back across my bed, holding the smaller girl above me with my arms. She was lying right on top of me, keeping most of her weight off me with her elbows and knees. And at the moment, her crotch was pressed tightly against mine as she squirmed against the cock stretching her pussy wide.\n\nActually, that same cock was stretching my pussy wide. Instead of the strap-on, we were using my double-ended dildo. It was long enough to get deeply into the both of us but just short enough that it didn't bottom out against either of us when Stella and I were fully pressed together. And every time she moved against me, I felt the warm latex also moving inside of me as well.\n\nOf course, Stella wasn't just groaning from that penetration. Teddy was holding himself carefully, giving the petite blonde time to adjust to his cock five inches up her ass. There were still a couple more inches to go, and with another groan she put her head down and nodded for him to continue.\n\nWhat felt like an hour later, with sweat dripping off her brow, Stella moaned, \"Fuuuuuuck...\" and collapsed onto me, going limp. Her last orgasm had completely wiped her out, and I simply nuzzled her lighter body on top of mine while Teddy decided to finish himself off, humping our two bodies with short, rapid thrusts until he added his weight to the pressure pushing all three of our pelvises together, twitching and jerking as he apparently filled up Stella's rectum with his spending.\n\nThe poor girl wasn't able to stand on her own two feet after that, so Teddy and I had to help her into my shower. It wasn't huge, but it was wider than a typical apartment, giving all three of us room to get around. Stella was semi-revived by the shower spray, and we took turns soaping each other up, giggling happily all the while. I especially loved just standing back, holding a head in each of my hands while my two lovers nursed at one breast each.\n\nAfterward, everyone dried off and got dressed. I would have liked for the two to stay and cuddle, to spend the weekend wrapped up with my lovers, but tonight I was letting my boyfriend go out and do Stella a favor.\n\nLike most single, early-20's professionals in this city, Stella had roommates -- two of them actually -- all sharing a 3-bedroom apartment. Roommates tend to know whether the others come home at night; and after Stella's breakup with Chuck, they'd noticed when she'd spent the entire weekend away from the apartment.\n\nOf course, they hadn't known she was screwing Teddy's and my brains out all weekend. But Stella HAD told them she'd been crashing with me, her best friend from work, going through her mourning period. Still, after spending the following weekend with me and Teddy, that excuse was starting to wear thin. Stella kept spending nights away; and her roommates were getting suspicious.\n\nA few days ago, in the privacy of my office, I was the first one to suggest that Stella introduce her roommates to Teddy as her boyfriend. At first, Stella had protested. Teddy was MY boyfriend and she wasn't trying to interfere with that relationship, no matter how great the sex had been. After all, even though she'd joined us quite frequently, Teddy and I still went out on solo dates, made love on our own, and were publicly affectionate at work.\n\n\"You've had sex with him on your own. Last week, I was certainly out of commission and not feeling it,\" I'd argued back.\n\n\"You were on your period,\" Stella had drawled. \"You were still outside in the living room while Teddy and I were doing it in *your* bedroom.\"\n\n\"Still.\"\n\n\"I won't do it; I won't even *think* of stealing your boyfriend. Besides, I don't think of Teddy that way. He's nice, and he's cute, and he's great in bed. But he's just a friend. We don't have anything... romantic... between us. He's always been into you. And even after everything we've been doing, he's still in love with you.\"\n\n\"That's why this is no big deal to me. I'm not saying you actually try to be Teddy's girlfriend. I'm not saying we try to make this a permanent three-way relationship. We have fun together, physically. But we're not *all* in a romance.\" I raised my eyebrows. \"All I'm saying is that Teddy would give you a foolproof excuse with your roommates, or parents, or anyone else outside of Argen. C'mon. You come out with us on Friday. We have our fun. And then at the end of the night, Teddy will bring you home. You can introduce him to your roommates as your boyfriend who's got his own place. And anytime you're not at your apartment, they'll assume you're with him... which... well, you WILL be.\"\n\n\"But for how long do we do this?\"\n\n\"For as long as you want to still be with me and Teddy,\" I shrugged. \"What's the alternative: you tell your roommates that you're having threesomes with me and my boyfriend every weekend?\"\n\nShe sighed. \"I can't do that.\"\n\nI shook my head. No matter how much fun we had together, society in general would never understand.",
        "\"Let me call Teddy over here. If he's not comfortable, that's one thing. But really, you guys would only have to hold hands and kiss and whatever. Not like you guys haven't done it before.\"\n\nStella chuckled at that. \"You're really going to let your boyfriend do this for me?\"\n\n\"I'm your friend, Stella... more than just a friend... I'd do almost anything for you.\"\n\nStella immediately came around and hugged me. We'd agreed to try it out. After all, we could always stop the ruse at any time by explaining that they'd broken up. And then we'd called Teddy to ask him to pretend to be Stella's boyfriend. With the two of us batting our eyelashes at him, he really had no choice but to agree.\n\nSo tonight, not long after double-penetrating my best friend with a dildo and my boyfriend's cock, I kissed said boyfriend just before he left to \"finish his date\" with said best friend. And then I returned to my couch to catch up on TiVo. I'd been spending a lot of late hours at work this week, and I had quite the backlog to get through.\n\nAn hour later, Stella called me to say that the plan had worked without a hitch. Her roommates had all gushed about how Teddy was, quote, \"sooo dorky-cute\".\n\nTen minutes after that, Teddy called me to tell me he was back home and booting up World of Warcraft. His buddies had been waiting on him to do another raid.\n\nI just smiled and unpaused the TV.\n\n****\n\nIt was the following Wednesday when Stella came and knocked at my door. I was doing one of the things I hated most about this job: writing a report. And so I welcomed the interruption as she came in and closed the door behind her.\n\n\"Hey, E-Beth,\" she began, quickly pulling up a chair.\n\n\"What's up?\" I knew it was serious... or juicy... given that she'd closed the door. Everyone knew Stella and I would chat in my office pretty frequently, but we usually left the door open since it was just idle gossip.\n\n\"I need another favor... with Teddy.\" Stella blushed. \"My roommate Katie, she met this guy last weekend and he called her up to ask her out. She thinks he's cute and nice and all, but she's not totally sure about him yet. So she figured a double-date would be safer, and since our other roommate Nicky is single, she asked me to go with them. Well... me and Teddy...\"\n\nMy eyebrows rose as I saw where this was going.\n\n\"So... uh... can I borrow your boyfriend? I mean, I know it's usually your Friday night, but Katie's a close friend from High School and I feel like I would be letting her down if I didn't do this for her. Plus, after just introducing Teddy a few days ago, I'm not sure if I want to say he's not available if you don't-\"\n\n\"Relax, it's fine.\" I held my hand up to forestall any other \"convincing\" Stella needed to do.\n\n\"Really?\"\n\nI sighed in resignation, but came back with a wry grin. \"Just don't wear him out. I'm gonna need him Saturday morning after delaying my weekly Friday gratification.\"\n\n\"Oh honey, I would never-\"\n\nI just waved, smiling humorously. \"Just kidding...\"\n\nStella leaned forward and patted my thigh. She gave me a flirty look and her green eyes sizzled. \"We'll BOTH be there Saturday morning. I promise I'll make this up to you.\"\n\n****\n\nFriday came, but before Stella took Teddy out for the double-date, we girls met up at Monahan's as usual. It started off like any other Friday at the bar, with me, Stella, Audrey, and Paula bitching about work-related things and planning for the weekend. Audrey and Jin were visiting his parents, and she was steeling herself for the inevitable insinuations that they were taking too long to give her in-laws their grandchildren.\n\n\"I'm twenty-seven!\" Audrey complained. \"It's not like I'm over-the-hill already!\"\n\nPaula, believe it or not, had been dating a guy steadily for the past month. She'd spent the previous six months just playing the field, entertaining herself with a variety of men at different dates. But now the buxom blonde seemed to be settling down a bit, and she told us she'd have to leave early to prep for her hot date.\n\nStella giggled. \"I know what you mean. I should get out of here soon.\"\n\nAudrey was the first to raise an eyebrow. \"What? Do *you* have a hot date, too?\"\n\n\"Uh, well...\" Stella stammered, her eyes darting over to me in alarm.\n\nAudrey clued in immediately. \"Ohmigod. You DO! Who is he? Why didn't you tell us?\"\n\n\"Whoa, whoa, whoa!\" Stella held her hands up. I smiled inwardly. Both Stella and I were starting to pick up the 'whoa' habit from Teddy. She looked at me again, as if hoping I would say something, but what could I say that would explain everything? 'Oh, I've been having a bisexual relationship with my boyfriend and with Stella. And as a cover for her roommates, we posed Teddy as Stella's boyfriend so now he's got to go out with her in public.' Yeah, THAT would work well.\n\nPaula picked up on Stella's glaring at me. \"Wait, does E-Beth know something?\"\n\nStella immediately looked away, but now Audrey's inquisitive glare was on me. Stupid gossipy women. Couldn't they just leave well enough alone?\n\nI sighed and shrugged. \"Stella's going on a double-date with one of her roommates.\"\n\n\"But who's the guy you're going with?\" Paula quickly asked.\n\n\"He's just a friend,\" Stella stammered. \"My roommate's the one with the hot date, actually. She just needed a wingwoman since she doesn't know the guy.\"\n\n\"Ahh...\" Audrey nodded, fully understanding the safety issue.\n\n\"But who's the guy?\" Paula repeated.\n\n\"I set them up,\" I interjected. \"He's a friend of Teddy's. It's nothing serious. Stella just needed a date and she came to me asking if I knew anyone.\"\n\n\"Is he cute?\" Paula asked with a smile, waggling her eyebrows.\n\nStella blushed. \"Well of course. You don't think I'd go out with just *anyone*, do you?\"\n\n\"Ah-haahhhh...\" Audrey tittered. \"What's he like?\"\n\n\"He's just a friend,\" Stella repeated, looking significantly at me.\n\n\"For now...\" Audrey sighed. \"Lots of couples just start as friends. What's he like?\"\n\n\"I don't know,\" Stella stammered, clearly not comfortable with how this focus was getting back on her. \"He's E-Beth's friend. Ask her.\"\n\nSuddenly, all three girls were looking at me. Taking a deep breath, I just exhaled and stared into my drink. \"He's just a guy. He's like Teddy, I guess.\" I took a sip and then shrugged. \"It's just a friend date. Why don't you give Stella the Spanish Inquisition sometime AFTER they've gone out, and only if it seems to be going anywhere, alright?\"\n\nAudrey and Paula frowned. They really wanted to gossip and speculate more, but I had a point. If Stella hadn't even gone out with this guy yet, there wasn't much to talk about. And putting the girls off for another few days would give Stella and me time to come up with an explanation. If nothing else, we could claim that her date went nowhere and we'd never hear from this fictional \"friend\" again.\n\nTen minutes later, we all wrapped up. Everyone wished Stella and Paula good luck on their dates. And I returned home alone, my TiVo waiting.\n\n****\n\nI assumed the double-date went well. I say \"I assumed\" because I didn't know. Teddy didn't call me Friday night. Neither did Stella.\n\nThen again, it was only 10:30pm. Perhaps they weren't even done with the date yet. I was alone and bored, so I decided to go to bed early. Yeah, there were some niggling doubts in the back of my head, but I dismissed them quickly. My boyfriend loved me and my best friend wouldn't betray me.\n\nStill... I had kind of a hard time getting to sleep.\n\n****\n\nAfter tossing and turning for most of the night, I was awoken by the doorbell on Saturday morning. A quick glance at the clock told me it was 9am. I must have subconsciously tried to make up for the fitful sleep by adding hours in the morning.\n\nIn the end, I wrapped a robe around myself and endured one more doorbell ring before I finally staggered to the front door. A quick peek through the peephole showed Stella on the other side, looking bright and perky in her morning-cheery way. And when I opened the door, she happily greeted, \"Good morning!\" She then held up a Starbucks caddy with two cups and a brown paper bag. \"I brought breakfast!\"\n\nMy grouchy morning mood was momentarily pacified by the smell of coffee. I inhaled deeply and looked at my friend through heavy-lidded eyes. And then I stepped back and waved her inside.\n\nWe got to my dining table and sat down. The first sip of coffee did wonders for helping pry my eyelids into a fully upright and locked position. And after savoring the musky aroma and bittersweet taste, I sighed and managed a half-smile. \"How'd it go last night?\"\n\n\"Oh, it was *great*. Thanks for letting us go. Teddy was a perfect gentleman, and for someone I used to think was kind of nerdy, he's actually a very smooth conversationalist with a great sense of humor! I think he and I had an even better time than Katie and her date!\"\n\nI smiled, sort of. That niggling of doubt in the back of my head was creeping up to the front. But I pushed it down. Teddy loved me. And he and Stella were just friends.\n\n\"He's amazing, as I'm sure you already know,\" Stella gushed. \"I mean, I know Teddy's the same age as me, but sometimes he seems so much more mature. He's got a calm confidence about him. And knowing everything I do about him, knowing what kind of body he's got under there and how well he knows how to use it... Well... I got pretty turned on as the night went on.\"\n\nShe giggled cutely, but I didn't really want to hear about it. So changing the subject, I commented, \"Thought you guys would call me after it was done.\"\n\n\"We were going to, but the four of us ended up staying at this lounge until almost midnight. Teddy figured you'd have gone to sleep by then, and we didn't want to wake you. He promised he'd call you this morning, though.\"\n\nI sighed. \"But he's still not coming, is he?\"\n\nStella sighed and shook her head. \"He had that thing with his parents, remember? Believe me, he WANTS to be here.\" Stella grinned at me. \"*I* want him here, too. We were dancing for hours... You already know how smooth he his with his hips. And we were both sooo horny last night. So worked up... I mean, I was half-ready to just strip him and mount him right there on the couch at the lounge!\"\n\nStella was giggling, but I was scowling. I was wondering if she HAD mounted him at the lounge. Unlikely, given that they were in public. But I wondered if they'd fucked last night after the date. After all, it wasn't like they'd be doing something they hadn't done before. And I seethed inside thinking of Stella... fucking MY boyfriend... while I was home alone.\n\nStella was in her own little world for a moment. She'd pulled one foot up onto her chair seat, wrapping her left arm around it while holding her coffee cup and spacing out. I figured she was reminiscing about what a good time she'd had last night with my boyfriend. And after a few seconds, she bit her lip and looked over in my direction. \"E-Beth?\" she asked cautiously, still not quite seeing me, but staring at some point behind me.\n\n\"Hmm?\" I asked, feeling the scowl in my voice as well.\n\nShe exhaled and blinked, looking down. \"I know I shouldn't be asking this. He's your boyfriend, and I've promised you a million times I would never do anything to jeopardize your relationship. But...\" she exhaled. \"After last night, I got to thinking...\"\n\nMy mouth was a hard-pressed line. \"What?\"\n\nStella was still too spaced out to notice the harshness in my voice. \"Well... just as friends... buddies, really... Would you mind if Teddy and I slept together sometimes? Without you?\"\n\nI blinked. Inside, my heart was pounding. And a cold anger started welling up inside me. I knew it. *I knew it!* I hadn't meant to, but it was happening AGAIN.\n\nOnly then did Stella look up and catch the expression on my face. Her eyes popped open and she quickly raised her hands defensively, dropping her leg off the seat and sitting up straight. \"Wait-wait-wait. We didn't do anything last night,\" she said insistently. \"I swear to you. I would never go behind your back, honey. Teddy and I were really horny last night. If we'd thought you'd be awake... man, the three of us would have gone WILD. But we didn't. We couldn't. We would NEVER betray you.\"\n\nI exhaled, a hissing sound escaping through my clenched teeth. That HAD been what I was worrying about, and while my concerns had not been completely erased, Stella's quick proclamation *had* allayed my momentary fears. \"But you wanted to have sex?\" I asked carefully.\n\nShe canted her head and gave me an honest, open look. \"Of course. Teddy and I are lovers, there's no getting around that. And when two people who've been intimate together get aroused, it's only natural to want to do it, isn't it? But again, we didn't. We wouldn't. That's why I'm asking you now. I'm not saying that an opportunity like this will ever rise up again. I'm not saying I want to start going on solo dates with him. And I'm not interested in Teddy as a boyfriend. He's yours. I'm good with that. We're just friends. But... I guess... I just want to know if it WOULD be okay if something like this came up in the future. As it was, I had to go home and jill off like crazy just to sleep. And I imagine Teddy had some blue balls of his own.\"\n\nI let out a long exhalation. Would it really be such a big deal? Just friends. They were just friends. And as long as everything was open and honest, shouldn't I be able to handle it? It wasn't like I was demanding monogamy from my boyfriend. Teddy had certainly fucked Stella enough times right in front of me. But still... I had my scars...\n\n\"Did I ever tell you what happened with me and Chad?\" I asked slowly. I felt suddenly weary, and my chest was rising and falling as I panted, slightly out of breath.\n\n\"No... Just that you'd caught him cheating. But then the whole Grant thing cropped up right away and we never really talked about Chad.\"\n\nI sighed. \"It wasn't so different than this,\" I explained, gesturing to Stella. \"I like girls; you obviously know this. Not romantically, but sexually they're just sooo... enticing. So while I was still with Chad, I invited this other girl named Melissa to join us from time to time.\" I snorted, looking over my friend. \"She was kind of like you, actually: blonde, pretty, petite.\"\n\nStella blinked, a look of concern crossing her face as she started to realize where this was going.\n\n\"They started seeing each other behind my back. Guess our occasional threesomes weren't enough. I caught them. And it was over.\"\n\n\"E-Beth...\" Stella quickly scooted her chair over to mine, then reached over and patted my leg. \"I would never...\"\n\n\"I know,\" I cut her off, the first hint of a smile tugging at my lips. I took a deep breath and then looked up into Stella's open green eyes. \"I know you wouldn't. You didn't. You had the chance, and you and Teddy decided not to. You came to me and asked. Thank you for that.\"\n\nI exhaled, feeling the rest of my anxiety draining away. I wouldn't project my fears onto my friends. A lot of things about the situation were similar, but they were also very different. Chad was a narcissistic moron. Melissa was a cute but trampy slut. Teddy was sweet. Teddy loved me. And Stella was my friend. She would never betray me.\n\nActually, this new situation was much more like my relationship with David and Amber. We were all friends. We all had a level of trust with each other. And while David and I had a very... harmonious... chemistry, we both knew our relationship wasn't a romantic one. Not anymore. And so Amber had faith in me. She had faith in her boyfriend, and now David was her husband. They even had a baby on the way. Their relationship had always been strong enough because they had faith in each other, and in me.\n\nAnd I would have faith in Teddy and Stella.\n\n\"It's okay,\" I said firmly, reaching over and rubbing Stella's leg. \"I give you guys my permission. If the opportunity arises, go for it. I want to see you both happy.\"\n\n\"Really?\" Stella tilted her head and looked at me so sweetly.\n\n\"Really.\" I nodded. And then I grinned. \"Just gimme the details when you guys are done, deal?\"\n\nStella giggled. \"Deal.\" And then she leaned forward, tenderly pressing her lips against mine. But instead of pulling back after a short peck, she lingered a little longer, massaging my lips before parting them open and slipping her tongue inside. She moaned softly and moved in closer, kissing me a little harder. And I found myself moaning as I kissed her back.\n\nAbruptly, Stella pulled away and scrambled over to her purse. She quickly fished out her cell phone, checked the time, and then held down a speed-dial button.\n\n\"What are you doing?\" I asked.\n\nShe just grinned at me and held up a finger. A second later, she chirped, \"Teddy? Heyyy... Yeah, I'm at E-Beth's place. Remember that thing we talked about last night? Well, I think she needs to hear it straight from you.\"\n\nBewilderingly, Stella then handed the phone off to me, and I tentatively put it to my ear. \"Hello?\"\n\n\"Heyyy, E-Beth,\" Teddy said warmly. \"Sorry I couldn't be there this morning. Believe me, I'd MUCH rather be there with you girls than here. My parents can be sooo stuffy. And I really miss you.\"\n\n\"I miss you, too,\" I sighed happily.\n\n\"Anyways, Stella and I talked about open honesty and things like that last night. I don't know if she's already talked to you about her and me, and we'll talk more the next chance I see you. But right now, *I'm* giving *you* permission to play around with her even when I'm not around.\"\n\nMy eyebrows perked up and I glanced over at the pretty blonde. \"Really?\"\n\n\"Absolutely,\" Teddy chuckled. \"Of course, now I'm gonna be even MORE desperately aroused imagining the two of you together... But that just means I'm gonna nail you that much harder the next time I see you, babe.\"\n\n\"I can't wait,\" I breathed.\n\n\"Me, neither. Tell Stella not to wear you out completely. I'm gonna try and get over tonight if I can.\"\n\n\"Mmm... hurry, lover...\" I cooed into the phone.\n\n\"I love you,\" he said warmly.\n\nI nearly melted. \"I love you, too.\"\n\nWe hung up. I looked at Stella feeling warm fuzzies in my stomach. And then once again she leaned forward and kissed me soundly.\n\n\"Well,\" she began breathlessly after pulling her lips off mine. Her hands were already working their way inside my robe, taking a firm grip of my unfettered tits. \"I may not have Teddy's gorgeous dick, but I think it's time for me to get some more practice with that strap-on, don't you think?\"\n\nI giggled. \"Sounds like a plan.\"\n\n****\n\nStella and I made hot, sweaty, monkey sex-type lesbian loving that morning. She really WAS revved up after her double-date, and midway through she asked if it was okay if she fantasized that I was her roommate Katie a little bit.\n\nIt turned out, while Stella had been pretty sure she was fully straight before hooking up with me and Teddy that first time, she'd also had the stray thought of wonder about what it would feel like to kiss certain girls. One of them was her High School friend Katie, and now that Stella had been exploring her Sapphic side, it was inevitable that her thoughts would turn to other girls besides me.\n\nI told her to go right ahead and fantasize. After all, we were just friends and I held no requirements of monogamy over her head. And then Stella began telling me about a sex fantasy she'd had last night, involving a foursome with Teddy, Katie, and Katie's date. The imagery only got Stella and me even hotter, and initiated a whole new round of monkey sex.\n\nAfterwards, Stella returned home to hang out with her friends and chat about the previous night's date. Teddy got free and came to visit me after dinner. And then my loving boyfriend and I had our own version of crazy-monkey-sex into the wee hours of the night.\n\nAnd then Monday night Stella and Teddy finally got their turn to be alone together. Stella had been jonesing for Teddy's cock all weekend, having gone without it for the first time since we started all sleeping together. She'd suggested a threesome, since it was the first weekend we hadn't done THAT, either. But I was making breakthroughs at work and even at 7pm, with the two of them pleading for me to leave the office and come meet them, I'd turned them down to finish what I was doing. Hey, I'm a Taurus. Steady, dogged persistence is what we do. It makes showering ourselves with rewards, luxuries, and excesses that much more satisfying, once we've earned them.",
        "So on my suggestion, Stella brought Teddy over to her place. Katie was home, and the noises coming out of Stella's bedroom would leave the roommate with no doubt that Stella's and Teddy's relationship was indeed a physically-consummated one. True to her word, Stella called me afterward with details. By then it was 10pm and I was at home, in bed. And as she recapped the evening's festivities, I managed to jill myself to two orgasms.\n\nThe three of us continued in this way for a couple more weeks. Sometimes the three of us got together. Sometimes it was just a single pairing: me and Teddy, or Teddy and Stella, and sometimes even just us girls.\n\nAnd then one evening, everything started to change.\n\n****\n\nI was hunched over the countertop, carefully monitoring the exotic plant in front of me underneath the mass spectrometer. Researchers deep in the Amazonian Rainforest had brought the sample back after hearing of legendary healing properties, specifically in antipsychotics after one of the tribal medicine men went schizo. And since I was still looking for a phenothiazine that wouldn't have adverse reactions to the rest of my compound, it seemed a good place to start.\n\nMidway through the scan, Steve came over and tapped my shoulder. I had been preoccupied, so it took me a few seconds to process this outside stimuli and turn my head. \"Steve? What is it?\"\n\nHe jerked his thumb back to the laboratory door. \"Dunno. Alfred just called. He says he needs to see you back at his office. Oh, and pick up something called the 'Eskazinyl' file on the way?\"\n\nI frowned. \"What, right now?\"\n\nSteve shrugged. \"That's what he said.\"\n\nI sighed, looking at the spectrometer. It would keep itself running for the next half-hour. \"Okay. Watch this for me, will ya?\"\n\nSteve nodded and then smiled. I stood up and headed out of the lab, removing my goggles and gloves along the way. I meandered the hallways, getting back to my office. And I nodded in greeting to the various people from my department I met along the way.\n\nUpon reaching our particular area of the cubicle farm, I glanced across and saw that while the light in Alfred's office was on, he wasn't there. Great. I'd have to go find him now. But first I had to stop by my own office to pick up that file.\n\nMy door was closed and the lights were off. This was normal for ISM regulations on security. Working in a high-tech company where corporate espionage was a fact of life, there was no reason to leave my office open while I was in the lab. I quickly unlocked the door, stepped inside, and flipped the light switch.\n\n\"HAPPY BIRTHDAY!!!\"\n\nMy eyes popped open and I stepped back in shock. Ten people were crowded into my little office, including Stella and Alfred. And then I realized that others from the department were also behind me, clapping as well.\n\nMy jaw dropped. There had been many company birthdays over the years. None of them had been like THIS. I turned around, looked at the people clapping, and then I turned around again. *Wow...*\n\nAnd yeah, I think my entire body was blushing pink by now. Here I stood, in a frumpy white lab coat, ratty jeans, and an oh-so-boring sweater that didn't even really show off my figure. CRAP! How had I forgotten it was my own birthday? Even if I hadn't known there would be some surprise in my own office, I would have at least DRESSED nicer! Oh, fer cryin' out loud...\n\nI stepped forward, glancing at the colorful cake sitting on top of my desk. \"Alfred! What's the deal?\"\n\nMy kindly boss simply smiled and reached out for a hug. I went up and embraced him as he replied, \"Don't ask me. It was Stella's idea.\"\n\nI rolled my eyes and went over to hug Stella as well. \"You're crazy, you know that?\" I growled. And in a quieter voice, I whispered, \"More than half these people don't even like me.\"\n\n\"Nonsense,\" she whispered right back. \"Profit sharing from the fiscal year just came out, and since your last concoction cleared FDA trials already, everyone got a big bonus. All because of you. And besides, ever since you started dating Teddy, you've loosened up and the word out is that you're far less of a ball-buster than you used to be.\"\n\n\"I was never a ball-buster!\" I hissed plaintively.\n\nStella just giggled and hugged me again. \"Happy birthday.\"\n\n****\n\n\"Come on, lover,\" Teddy said. \"You knew I'd be planning something tonight.\" I was back in my office, wrapping up at the end of the day. My boyfriend extended his hand down to me, an inviting smile on his face.\n\n\"Teddy, it's a Tuesday. We've got work tomorrow.\"\n\n\"It's also your birthday. I can't let that pass without showing you how special you are.\"\n\n\"Today? Today's just a reminder of how old I'm getting.\"\n\n\"Mm, I'll bet you'll feel just as young in bed as you did when we were together on Sunday.\"\n\n\"Ugh. This means I'm three years older than you again. Feels like I'm robbing the cradle.\"\n\nTeddy chuckled. \"You're only as old as you feel. And if you *don't* come out with me, you'll only feel like a crotchety spinster. Now come on!\"\n\n\"But I'm not even dressed!\" I whined. \"At least let me go home and change and primp and do all those things I need to be beautiful.\"\n\nTeddy closed the gap to me, getting down on one knee beside my desk chair and holding my hand with both of his. \"Elizabeth,\" he intoned in a quietly serious voice. \"You ARE beautiful, just the way you are.\"\n\nYeah, that did it for me. There was such an honest sincerity in his voice, and such a masculine tone as he said the full name 'Elizabeth' for I think the very first time, that I swooned happily and nodded. \"Okay.\"\n\nStill, a second after standing up and giving time for those momentary butterfly feelings to flit away, old concerns for my appearance returned. \"But can I still go change and fix my makeup at least?\"\n\nTeddy barked a laugh and shook his head. \"You won't need to. I promise.\"\n\nI frowned at him. \"Where are we going?\"\n\nHe grinned. \"You'll see.\"\n\n****\n\n*I don't like this.*\n\nI simmered in the passenger seat of Teddy's truck. He'd made me wear this blindfold, and at first I tried to figure out each left and right turn to keep track of where we were going. But before we even got out of the parking lot, I was already hopelessly lost. And for a girl who likes to feel in control of the situation, this supposed birthday \"surprise\" was not putting me in a good mood.\n\nStill, I put up with it. Teddy hadn't let me down yet, even if he hadn't been able to figure out that I REALLY wasn't into being blindfolded.\n\n\"I know you *really* don't like not being able to see,\" Teddy suddenly said out of the blue. \"But we're almost there, and I KNOW you'll enjoy the surprise.\"\n\nI sighed and resumed trying to figure out where he was taking me. I analyzed the clues, things like reassuring me that I my lack of perfect attire and makeup wouldn't be a detriment. Perhaps he was bringing me somewhere super-casual, like a bowling alley or miniature golf center. Maybe we were going to a friend's house, where people like Stella and Audrey and Paula would already be waiting for me. Or maybe he was taking me to some out-of-the-way desert ravine so he could hit me over the head with a shovel and bury me alive, *dun-dun-DUN.* Okay, that was a stupid thought; but I REALLY didn't like being blindfolded.\n\nEventually, we came to a stop and Teddy turned off the engine. I waited while he came around to my side and then literally carried me out of the truck. After setting me down on my feet. He then took my hand and led me along what felt like a concrete sidewalk. There were a couple of turns, and then we came to another stop.\n\nApparently, it was a door. Teddy jiggled the handle and then opened the door before us. Everything was pretty quiet, except for some slow R&B mood music in the background. And then taking my hand again, he led me along some carpeting into the room.\n\nFrom the quietness, I gathered that we weren't in a public place. All in all, everything just FELT like a house, and I started wondering if I was in some friend's place where once I took off my blindfold, a couple of dozen friends from both sides would scream 'SURPRISE' and then point and laugh at my frumpy attire. *Dammit, Teddy! Why didn't you let me change?*\n\nI was pushed down into a chair, which felt strangely familiar. And then a second later, Teddy whipped my blindfold off my head and I blinked to look around... my own dining room.\n\n\"Home?\" I blinked. \"You brought me to my house?\"\n\n\"Uh-huh!\" Teddy grinned, gesturing to the table. My otherwise plain dining table was decorated with nice linens, expensive china, and even a pewter candelabra with three elegant white candles on it. There was a perfectly thought out plate of Chicken Romano on a bed of Angel Hair pasta with sundried tomatoes, with a side of steamed asparagus. And a bottle of wine with two glasses had already been opened. \n\nI blinked in surprise and wonder. \"Wow! This is *beautiful*, Teddy!\"\n\nHe grinned. \"Glad you like it. Told you not to worry about your outfit.\"\n\nI smiled sweetly at my boyfriend and tilted my head. \"But... how did you get in here? When did you get all this set up?\"\n\n\"I swiped your keys at the birthday party,\" Stella chirped from behind me.\n\nI whirled around in shock, finding my friend standing in the entryway to the kitchen wearing what amounted to the trashy-version of a French Maid's outfit. Black five-inch fuck-me heels and fishnet stockings covered her legs. The skirt was scandalously short and the top scandalously low. From what I could tell, the pretty blonde wasn't wearing any underwear of any kind. And a little white hairbow completed the costume. \n\nWiggling her ass, my friend sashayed up next to us, grabbing the bottle of wine and beginning to pour. \"I vill be your vaitress for zhee evening, Monsieur and Mademoiselle,\" she stated in a faux-French accent. \"Do be zure to let me know eef you need anyzhing else.\" A moment later, she cracked up from how silly that had come out. Teddy and I soon joined her.\n\nAnd then I had the best birthday dinner, ever.\n\n****\n\n\"Ohhh... holy... sheeeit...\" I exhaled, coming down from my latest orgasm. I was sitting upright, my knees spread to the sides and my torso angled back with my arms thrust to the mattress behind me, supporting my weight. Lying beneath me, with his throbbing, turgid cock fully embedded inside my pussy, was Teddy. We were pointed in the same direction, me in a reverse-cowgirl position. And at this angle, I'd been lowered enough for him to reach up and fondle my incredible breasts, of which he was so very fond.\n\nKneeling at the foot of the bed was Stella, still in her complete French Maid getup. Of course, her skirt had been pushed above her waist a couple of times and the top had been pulled below her boobs, lifting and supporting her cleavage. She took one final lick at my labia from the base of Teddy's cock up to my clit, soaking in the last drops of my orgasmic honey. And then the pretty blonde pulled her head back, her jaw shiny with fluid, and she gave me a toothy grin. \"Like that one?\"\n\n\"I... liked... all of them,\" I wheezed, panting heavily.\n\nStella rose up onto her feet, high enough that I could see the double-ended dildo protruding out of her own cunt, with her right hand wrapped around the available end. She'd been pumping herself while licking at the juncture of me and Teddy. And still thrusting the dildo in and out of herself, she leaned over me and fractionally tilted her head so that we could kiss.\n\nI moaned, tasting myself on Stella's lips. Eventually, she raised her left hand to help hold my jaw while she continued bruising my lips with her own. And I felt Teddy start thrusting lightly and squeezing my tits once again while watching us two hot babes swapping spit.\n\n\"Time for the finale,\" Stella moaned as she pulled away.\n\n\"Hmm?\" I asked almost sleepily. That last series of orgasms had practically wiped me out already. If we stopped now and went no further, I would still go to sleep well-satisfied.\n\nStella just grinned as she reached down to my hips and moved me off Teddy's dick. I pouted when his wonderful fullness was removed, but Stella kept repositioning us. And presently, she laid down on her back, holding the double-ended dildo upright with one half still imbedded into her own sodden snatch.\n\n\"Up top, honey,\" the blonde cooed.\n\nObediently, I moved to straddle her fake cock not long after dismounting Teddy's real one. Stella reached up to my tits, fondling them appreciatively while I guided myself into position. And then sighing, I sank down onto the other end of the dildo, feeling it squish nicely inside my saturated cunt, still full from Teddy's previous cumload.\n\nAnd then I felt the finger pushing into my ass. It wasn't the finger that got my attention so much as the ease with which it penetrated. I quickly realized that the finger was lubed, and it was followed shortly after by a second one. My boyfriend was lubing me up, and then a few seconds later, Teddy's fatter blunt instrument was pressing at my back door.\n\n\"Your turn to be sandwiched, E-Beth,\" Stella crooned into my ear when she pulled me down on top of her, chest-to-chest. She then reached around to spread my buttcheeks for Teddy's penetration, and soon I felt his massive member gliding up my bowels.\n\n\"Ohhh... fuuuccckkkk...\" I groaned, feeling both my holes being filled to the max. \"Holy fuck, holy fuck, holy fuck,\" I grunted as inch after inch pushed inside me. And then at last Teddy's short and curlies were rubbing my sensitive cheeks. He was all the way in.\n\n\"We love you, E-Beth,\" Stella whispered. Being a couple of inches shorter than me, her nose was just beneath my chin. This made her green eyes look so big and luminous as she gazed up at me. And she looked so angelic as she smiled and added, \"Happy Birthday\", before tilting her head up and kissing me.\n\n\"Happy Birthday,\" Teddy added just behind me, lowering his naked chest to my bare back, enough to kiss the back of my neck while holding his weight off me with his arms planted on the bed.\n\nAnd then all three of us moved.\n\nTeddy pulled back first, every vein and ridge of his meaty cock slowly dragging out of my stretched asshole. With the release in pressure, Stella bumped her hips off the springiness of the mattress, sending the double-ended dildo deeper into my snatch, moaning at her own increased penetration. And at the pleasurable sensations of the two cocks sliding within me, I arched my back and groaned ecstatically.\n\nArching my back brought my chest up, enough that Stella could latch onto my big tits with her hands and bring a swollen nipple to her mouth. I bit down on my lower lip and whimpered as she began tongue-lashing the sensitive bud. Teddy reversed course, pushing back into me and then withdrawing back out, starting up a steady rhythm. And I gasped, \"Fuck me, Stella... Fuck me, Teddy... Never. Stop. Fucking. Me!\"\n\n\"Oh, E-Beth...\" Teddy crooned. He still made my name sound like the most wondrous word in the universe.\n\n\"Oh, *E-Beth*...\" Stella added in a whimper of her own. I saw the strain on her face as she felt the weight of both her lovers pressing the dildo deeper and deeper into her own snatch while our clits rubbed together.\n\n\"Fuck me...\" someone moaned. Maybe it was me.\n\n\"Fuck me...\"\n\n\"Fuckkkk...\"\n\nFirst I got into a rhythm with Teddy's assfucking, thrusting back at him to meet his penetrating thrusts. But I'd lose the sequence with Stella, our pussies separating and that wonderful pressure on our clits vanishing away.\n\nThen I got my crotch pressed up with Stella's, our hips bounding off the bed together while we ground our pussies in perfect harmony. But then Teddy's rhythm was thrown off.\n\nLike a locomotive heating up, beginning from a dead stop and spinning its wheels, our bodies humped and gyrated against each other, trying to find the rhythm. And then like that same locomotive, we found our traction and lurched forward, losing the traction again and spinning until we found it again. \n\nAnd then we had it: Up. Down. In. Out. Forward. Back.\n\nThe big rod up my ass plunged my anal depths repeatedly. Filling me. Taking me.\n\nPossessing me.\n\nThe thick probe in my pussy squished deeper amidst a flood of female nectar and honey and leftover male spunk. It set off my inner nerves, rubbing me perfectly and pushing me toward that fabulous vaginal orgasm.\n\n\"Fuck me...\"\n\n\"*Fuck me...*\"\n\n\"FUCK ME!\"\n\n*\"EEEEYAAAAUUUGHHH!!!\"*\n\nThe scream shattered the air. It took a few seconds to realize it was coming from me. And as the two cocks pounded my poor, helpless holes, I went into ecstatic spasms as a monster orgasm swept across my entire body. And with Teddy holding my hips tight, he pistoned his cock in and out of me at a breakneck pace, only amplifying the magnitude of my climax even more.\n\n*\"NNNNNGGGGAAAAHHH!!!\"*\n\nI collapsed down onto Stella's chest after that. I'd been holding my weight off her with my elbows and knees so as not to completely crush her beneath both Teddy's and my bodies. But now I had no more energy and the petite blonde squeaked in alarm at the sudden pressure.\n\nTeddy figured out what was happening and he pulled out of me, getting stabilized on his own knees and then gently rolling me off my friend. The double-ended dildo was clamped pretty tightly inside me, and pulled out of Stella with a wet squelching sound. And I flopped onto my back, teetering on the brink of unconsciousness. My orgasm was THAT good.\n\nStella whimpered and reached her hands up to Teddy. Stretching her legs, she then rolled herself up like an armadillo, bringing her knees up to her shoulders and spreading her legs to the sides. She hadn't quite found orgasm, and actually, neither had Teddy.\n\nSo fisting his cock, Teddy settled himself in front of Stella and pulled her legs over his shoulders. She was adorable, still technically wearing her entire French Maid's costume after all this time. The hairpiece was a little off and the frilly dress was bunched around her waist. But the fishnet stockings and five-inch fuck-me heels looked so kinky hooked over Teddy's shoulders. With the blonde reaching down to spread her own asscheeks, Teddy moved into position and pressed his cock into her anus. And the two of them both groaned as he slid his meat up her rectum.\n\nIt didn't take long. My eyelids were fluttering for only a few seconds as my best friends finished each other off. I was wiped out, and as the inky blackness descended over my vision, I heard Stella cry out, \"AAAAHHHH!\" as her orgasm finally erupted.\n\nTeddy wasn't much longer, grunting \"NNNGHHH!\" as he busted his nut, spewing into the depths of her bowels. And then they stopped thrashing on the bed, the both of them going limp with his cock slowly deflating inside her ass.\n\nI surrendered to unconsciousness then. I was tired, and sore, and very, very happy. But just before I fell asleep, Teddy and then Stella said the words that completely changed the course of my life:\n\n\"You were fantastic today, Stella. I love you,\" he crooned, so quietly I could barely hear.\n\nStella giggled happily. \"I love you, too.\""
    ],
    "authorname": "bluedragonauthor",
    "tags": [
        "threesome",
        "anal",
        "toys"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/e-beth-ch-03"
}
{
    "title": "Sisters of the Mists Ch. 04",
    "pages": [
        "Author's Notes:\n\nThis story is erotic fantasy, set in a world of magic. I reserve the right to be listed as the author of this work wherever it is posted. If found anywhere except Literotica.com with this note attached, this story is posted without my permission. &copy; Darkniciad 2007\n\nThe villains in this story are truly evil, and their actions prove it. Some scenes may be disturbing for some readers.\n\nI make use of modern weights and measures quite often in my work, because those are the weights and measures of my fantasy world. I know many fantasy readers prefer more archaic terms, and I hope those readers can overlook my use of miles, feet, and other such measures.\n\nPlease note that the form of witchcraft in my world is not meant to be true Wicca. Nor is it supposed to follow \"Charmed\" exactly. No offence or confusion is intended. There's no stroke-worthy sex scenes in this chapter, but I hope the story itself makes up for that.\n\nYou should read the preceding chapters of this story in order to know the characters and what is going on. You will find that reading Book I of this story, Danica, will give you a lot of insight into the characters and the continuing storyline.\n\n{*****~~o~~0~~o~~*****}\n\nAshley jerked her nose away from the strong smelling herbs beneath it, coughing and trying to get her vision to focus.\n\nA woman's voice asked, \"Are you okay?\"\n\nSlowly, Ashley's wits recovered, and she recognized Danica standing above her.\n\n\"That demon hit you pretty hard. I had to use some healing spells on you, because we couldn't get a potion in you,\" Danica explained. \"Do you think you can get up?\"\n\nGroaning, Ashley replied, \"I don't know. My head feels like it's stuffed full of something.\" With effort, and Danica's assistance, Ashley managed to sit up. \"What happened? Everything is hazy.\"\n\nDanica steadied the other woman, and related the final events of the battle in the desert. \"We finished off all the minor demons, and then the four greater demons appeared. We didn't have anywhere near the sort of success in attacking them. One of them -- the one with the ram's horns -- appeared next to you and slammed you. We decided just to get out of there.\"\n\nPutting her head in her hands, Ashley lamented, \"The vial -- that was my one real hope of vanquishing Rexxus, and now it's gone.\"\n\nDanica shook Ashley's shoulder, and when the red-haired witch looked up, Danica pulled the vial from her pocket. \"I realized this was important, so I snatched it up with my telekinetic powers before we teleported away.\"\n\nAshley took the vial, cradling it in her hands. \"Thank you. This required a drop of Rexxus' blood, and I don't think he would have ever let me get another.\"\n\n\"Do you want to try to get in the bath? You're still a mess. We cleaned up a little in shifts, but we were more worried about getting you back with us than getting all the demon slime off you.\"\n\n\"Thank you -- again. They do make a mess when they're vanquished, especially the minor demons,\" Ashley responded.\n\nCeles stomped into the room, muttering under her breath. She nodded to Ashley, and then turned to Danica. \"I swear, at least one of them has developed your mental powers, and knew the moment we were all gone from here. Their end of the manor is a disaster area, and the library isn't much better.\"\n\nDanica shook her head. \"We're going to have to make sure not to leave them alone again, at least until they've matured more.\" Seeing the confused look on Ashley's face, Danica told her, \"I'll explain later. Let's get you in the bath, and find something for you to wear. I think you and Andrea have similar sizes, so some of her things should fit you well enough.\"\n\n\"Andrea is keeping an eye on the girls. We put them all in their rooms, and she's making sure they stay there. Marlena is in the bath.\" Celes' expression softened a little, and she added, \"She was already a mess before the demons. Andrea and I interrupted her at a rather bad moment.\"\n\nDanica chuckled, \"I noticed. Who?\"\n\n\"Brandon,\" Celes answered. \" I'll go fetch something from Andrea's trunks for you, Ashley.\" Giving a little nod, she turned and left the room.\n\nSliding her legs off the bed, at Danica's urging, Ashley asked, \"Where are we?\"\n\nDanica shrugged her shoulders and replied, \"Home. We honestly don't even know where it is. A dream led us here, and as far as we can tell, there's no way to reach it except by teleporting.\" When Ashley appeared to be steady enough to stand, Danica crossed the room to her tub, touching the runes to fill it with water. \"Come get in the bath. I'm sure it will make you feel better.\"\n\nAshley smiled weakly and walked toward the tub. When she saw it was full and steaming, she looked over at Danica in surprise.\n\nDanica winked, and said, \"Magic. I made this place, with a lot of help, and I wanted to be comfortable. This is one of those little luxuries. Every bedroom has one. Get out of those clothes and get in.\"\n\n\"Here's something to put on when you get out,\" Celes called from the doorway, entering with a bundle of clothing. \"I grabbed a blouse and skirt, because I think any of Andrea's dresses would have been too tight in the waist for you. This should fit fine, as you're otherwise almost of a size.\"\n\nAshley fumbled with the first button of her blouse, finding she couldn't grip it, as it was coated in slimy demon ichor. Scrunching up her nose, she grabbed the neck of the blouse, and started popping the buttons off it.\n\nDanica's eyes were immediately drawn to the swell of Ashley's firm breasts when they were revealed, though she averted her gaze quickly. Her eyes locked with Ashley when she did, and she knew the glance had not gone unnoticed. The faintest edges of a smile touched Ashley's lips as she continued to pop open the buttons.\n\nDanica quickly said, \"We'll let you take your bath. Just come out when you're done, and we'll all go talk in the study over a snack and some wine.\"\n\nAshley nodded and shrugged off her blouse. Danica walked toward the door, getting a good view of the pink tips of Ashley's ample breasts in the process. When she reached Celes, the other woman turned to leave the room with her. They both glanced back over their shoulders at the same moment, just in time to see Ashley bend and drop her skirt to the floor, revealing a rounded, shapely bottom.\n\nCeles let out a quiet purr when she closed the door and whispered, \"Not a bad view.\"\n\n\"Mmm hmm,\" Danica agreed, winking at her friend. \"Let's go ahead to the study. You can tell me what happened while I was gone.\"\n\n\"And you can tell us how your trip went,\" Celes agreed. \"We'll get one of the mirrors to watch over the girls, and fetch Andrea too. Marlena should be out of the bath in a minute, and I'm sure she'll come looking for us.\"\n\n\"So much for peaceful studying, huh?\" Danica laughed, as they turned into the door of the study.\n\n{*****~~o~~0~~o~~*****}\n\nRexxus cowered before Meckataur, along with the other three greater demons involved in the desert battle. \"There were three witches, and two other magic using females. They were prepared for us, and fled before we could assault them in strength.\"\n\n\"I know what happened,\" Meckataur rumbled. \"Those lost are of no consequence, and the elves remain yet unaware. The Devil lashed out with his mental reigns over his minions, dragging the three silent demons to their feet. \"Go. Return to watch the Fey.\" Turning his gaze toward the grossly obese, gray-skinned hellspawn to the right of Rexxus, Meckataur ordered, \"Invade their minds, Kazz'akel, but do so while they rest. Discover anything they may hide, and whether any females remain untouched.\"\n\n\"Yes, Lord Meckataur,\" Kazz'akel hissed.\n\nThe Demon Lord waved his hand, and the three demons vanished in bursts of flame. \"Rexxus, the pawn of the Fey will seek you with the potion again. You are too important a tool to risk. Take mortal form.\"\n\nRexxus snarled in disgust, but obeyed the order. Wings folded, the bones popping, to be absorbed into the demon's back. Claws shrank back into his fingers and toes, while the demon's prized horns vanished into its head. Rexxus snarled and growled from the pain of the transformation, writhing on the floor.\n\nAt last, the panting Rexxus, now appearing as a leanly muscled man with hair the color of flax, rose back up to his hands and knees again.\n\n\"Eris, Mache -- come,\" Meckataur ordered.\n\nTwo muscular men emerged from a side portal of the dilapidated Great Hall. Both had dark blonde hair, though one was dressed in fine clothing, while the other wore a mismatched outfit of well-worn garments. They bowed before Mecktaur, not even offering a glance to the nude man kneeling before him.\n\nMeckataur jerked on Rexxus' reins, and the demon stood. \"These have transcended. You will deliver them to Ebonar. Then, you shall watch this pretender to Zoraster's empire, and monitor my spawn. Go.\"\n\n\"Yes, Lord Meckataur,\" Rexxus responded.\n\nThe Demon Lord vanished in a roar of flames, leaving his minions to obey his orders. He reappeared instantly, deep in the bowels of the earth beneath his crumbing abode. Here, beyond the dungeons where his prisoners wished for death, beyond the crypts that housed his army of the dead, lay Meckataur's greatest power.\n\nStaring down into the pit, a hole wider than a man's height and filled with a darkness blacker than night, Meckataur waited. A flash of light and the sound of weeping let the Demon know his wizardess pawn had arrived.\n\nThe weeping ceased, as it usually did, long before Arleen magically dragged the woman before Meckataur. The weak mortals' minds couldn't bear the presence of the Demon Lord, and their brains simply shut down.\n\nThey always awakened in their final moments of life, however, allowing him to drink in their tortured anguish.\n\nMeckataur needed to pull forth more of the minor demons from the abyss, and the woman's blood was the key. The hellspawn maintained a link to their hellish plane when pulled from this portal, giving them greater power. They were the secret to Meckataur's rapid rise through the demonic ranks on this plane, and would be the means through which he would rule this world.\n\nSoon enough, he would have the key that opened the portal wide -- the blood of highborn virgin Fey. Sacrificed on the right day, the Fey blood would tear apart the barrier between the planes, allowing Meckataur to summon forth hordes of demons at will. Then, the mortals on this globe would become as cattle for his hordes, as he spread his rule throughout the entire plane.\n\nSavoring that thought, Meckataur grasped the sacrifice, and held her limp body over the pit in one enormous hand. For now, he needed demons to replace those lost, and this woman's life would serve well enough.\n\nArleen turned away, as she always did, trying to ignore the final, pitiful scream of the victim, and the sound of the Devil literally wringing the blood out of the sacrifice.\n\n{*****~~o~~0~~o~~*****}\n\nDanica hugged Marlena, and congratulated her, \"I saw you cast that lightning bolt. I knew you could do it!\"\n\nBlushing, Marlena admitted, \"Celes helped me with the part where I was making a mistake.\"\n\nCeles added, \"She's studying the permanency spell, too. I think you've finally gotten through to her. Just because she's better at illusion magic than anyone else living, it doesn't mean she can't learn other things.\"\n\n\"That was a pretty impressive display of your telekinetic powers, Celes.\" Seeing Andrea walking into the room, Danica added, \"And a blast of fire that would make a red dragon proud, too!\"\n\nAndrea's face turned bright red, though she tried to put on a smug expression, and blew on her fingertips in a superior fashion. She laughed a moment later, unable to keep a straight face.\n\n\"It's not really telekinesis,\" Celes argued, \"It doesn't feel anything like...\"\n\nDanica raised her eyebrows and interrupted, \"You move things without touching them. It's as good a word as any, and it beats moving stuff, your preferred term for that power.\"\n\nCeles blew a raspberry, drawing a laugh from the assembled friends.\n\n\"I don't think we should be too hard on the girls,\" Andrea said, sitting down heavily in a cushioned chair. \"They seem to understand why they're in trouble, and I think they're actually sorry.\"\n\n\"We should probably keep up the pretense for this evening, at least. If we roll over too soon, the lesson will be lost on them,\" Marlena advised.\n\nCeles sat down in her normal place on the couch, asking Danica, \"So, did you manage to get everyone somewhere safe?\"\n\nDanica sat down and answered, \"Tonda and Jaron are both safe on Darkni's island, and Harkhuf set up Tari and Rekhmire in his house. I got a warning to the Pharaoh about Zoraster's men too. Clexis was the one Zoraster sent there, and I think I've managed to put a serious roadblock in his way.\"\n\nCeles smiled and said, \"Good, that man is scum.\"\n\n\"Come in and sit down,\" Andrea piped up, seeing Ashley in the doorway. \"That looks good on you. You can have it if you want.\"\n\nCeles turned toward Ashley, as the woman sat down. \"Danica told me that it was our scrying that alerted the demons. Sorry about that.\"\n\n\"It's okay, things happen for a reason. You do need a little practice, though,\" Ashley advised. \"You have to concentrate hard on what you're scrying for, or any demon within the circle of the crystal may feel it.\"\n\n\"We're having to figure it out on our own. Our mothers didn't get the chance to teach us,\" Andrea sighed.\n\nAshley smiled sympathetically. \"I lost my mother when I was very young, too. An older witch taught me. She suffered an injury that made it impossible for her to fight, and bound most of her powers to hide from the demons. She knows her craft, though, and taught me everything I know. I'm worried about her. I don't know how much Rexxus knows about me, and he might try to use Edna to lure me into a trap.\"\n\n\"I seem to be making a career out of hiding people away, maybe I can help,\" Danica offered.\n\n\"I don't know if Edna would even let me hide her away, but I appreciate the offer.\" Sitting back in her chair, Ashley let her eyes roam to each of the women. \"You know, I can't help but feel like you're all familiar.\"\n\nRubbing her chin, Celes said, \"I get a sense of that too.\"\n\nDanica could feel an ever-increasing wave of anxiety coming from Ashley, and could hear the source of that anxiety in the woman's mind. The red-haired witch was more worried about her mentor than she was letting on. \"Maybe you should go see if Edna is okay.\"\n\n\"I have this terrible feeling she's in danger,\" Ashley admitted.\n\nDanica asked, \"Why don't you let us come along, for backup, just in case? Maybe she could give Celes and Andrea some pointers.\"\n\n\"I'll stay and watch the girls,\" Marlena interjected. \"I don't think it would be a good idea to leave them alone again.\"\n\nAshley shrugged and said, \"My potion will only take me back. I expected to be alone out there in the desert, except for the demons.\"\n\n\"Let us take you then,\" Danica said, standing up. \"Is there something where Edna lives that you can see in your mind's eye, in the tiniest detail?\"\n\nAshley nodded and answered, \"Her herb cabinet. I could tell you the exact position of every bottle inside, and every scratch and blemish in the wood.\"\n\nHaving reached out with her psychic powers, Danica could see the image of the cabinet in Ashley's mind. \"If you don't mind me peeking into your head, I can use that as a pattern to teleport us there.\"\n\n\"You've probably already seen it, I'd wager,\" Ashley said with a smile, and then added, \"Edna is telepathic. That's her primary power, and the only one she didn't bind. I'm quite used to it.\"\n\n\"I'd like to go,\" Andrea said, \"It would do us good, I think.\"\n\nAshley flipped her drying hair back over her shoulders and said, \"It would get me there quicker. It would take me almost an hour to walk from my house to Edna's, and I'm really worried about her. You might be able to distract her a little, too. When she finds out I went after Rexxus, she's not going to be happy with me.\"\n\n\"Let's go, then,\" Danica said, gesturing at everyone to stand.\n\nThe women gathered in the center of the room, and clasped hands in a circle. Danica held one of Ashley's hands, and squeezed it, saying, \"Just think about that herb cabinet.\"\n\n{*****~~o~~0~~o~~*****}\n\nEdna paced, muttering to herself, and wincing from the arthritis in her knees. \"Fool girl, what have you gone and done now.\"\n\nShe'd known something was wrong the moment she awakened that morning, and knew it had something to do with Ashley. A few spins of a crystal revealed the young woman was far away, on another continent entirely. Subsequent scrying attempts revealed no change, until the last one. Ashley had simply vanished, and the old witch had given up in frustration.\n\nA flash of light caused Edna to spin, reaching with her one remaining arm into a pocket of her apron, for one of the powerful vanquishing potions she kept there.\n\n\"It's me, Edna. Sorry to startle you, but I was worried,\" Ashley said, stepping away from the circle toward her mentor.\n\n\"You were worried?\" Edna scolded. \"Do you have any idea...\" The old woman trailed off, staring hard at Celes and Andrea.\n\nAshley said, \"I'll explain in a minute, but this is Danica...\"\n\n\"Andrea, and Celes,\" Edna finished. She let out hearty laugh when all four women stared at her, dumbfounded. Turning to Ashley, she expanded, \"Andrea Trueheart, and Celes Hartwell.\"\n\nNarrowing her eyes, Celes asked, \"How did you know that?\"\n\n\"An old witch has her ways,\" Edna replied with a wink, tapping her forehead. \"You feel like you know them, don't you, Ashley? I told you that you were meant to do important things.\"\n\n\"You can't mean...\" Ashley began.\n\nEdna nodded to Ashley, and then turned to the other two witches. \"The two of you have your family books, don't you?\"\n\n\"Yes,\" Andrea answered.\n\n\"Ashley probably never told you her name. It's Lovehart, and the universe has been waiting for your three families to find each other for ages now.\" Clapping her hand against her thigh, Edna spun in a circle, laughing, feeling younger than she had in two decades. When she came to face Ashley again, she said, \"Let's go get your book and fulfill your destiny!\"\n\nDanica laughed a little self-consciously, and turned to her blonde-haired friend. \"I think I know how you used to feel, Andrea -- being the only one of us who didn't have magic. Now I'm the only one in the room who isn't a witch, and I feel like I don't belong.\"\n\nThis make you feel a little less out of place? Edna thought to Danica.\n\nNot really, but I appreciate the effort, Danica thought back, with a little mental chuckle.\n\nYou have a strong mind. I wouldn't want to have to cross your powers, and I've been doing this my whole life.\n\n\"That prophecy is vague, and there are a thousand versions of it, Edna,\" Ashley said, but she didn't really sound convincing.\n\n\"You won't know until the three of you are in the same place with your family books, now will you?\" Edna wagged her finger at Ashley to emphasize the point.\n\nDanica smiled, thinking about how much the old witch reminded her of her mother with that gesture. \"You may as well stop arguing now, Ashley. You've already lost this argument, trust me.\"\n\nAshley looked like she was about to argue, but then her shoulders slumped and she sighed. \"Okay, let's go get my book. I'm never going to hear the end of it until I do.\"\n\n{*****~~o~~0~~o~~*****}\n\nC'seka perked up, feeling the familiar sensation of the female using the Hellgate. Almost immediately, he recoiled, feeling the burning presence of others near the female. Though C'seka didn't know what caused the feeling within him, he knew that those with the female were very dangerous to him.\n\nIn the moment he was cowering instinctively, the contact vanished. The sensation was abrupt, and somehow C'seka knew the spell had not terminated. The demon snarled in frustration, having been eager to learn more about this particular female's gate, which called to him louder than any other.",
        "A second Hellgate, opened by another wizard, filled C'seka's senses. This gate was close -- far closer than any the demon had ever sensed before. C'seka appeared to vibrate and shake apart, eventually becoming transparent and vanishing entirely. When the process reversed, C'seka instinctively knew where he was, inside the second Hellgate he had sensed.\n\nReaching out with his senses, he connected with the master of the gate. A wicked, toothy smile spread across the demon's face, as it realized that this gate belonged to his Master's pet wizardess, Arleen. Seeing what she found desirable in her mind, C'seka shifted form, becoming the vision of male perfection in Arleen's mind.\n\nAs Arleen used the Hellgate's ability to spy upon some mortals, C'seka psychically spied upon her.\n\nHe learned much of her -- and their Master, in that time.\n\n{*****~~o~~0~~o~~*****}\n\nEdna and Ashley both stood close to each other, looking extremely uncomfortable. Edna shook her head and said, \"I can't believe I'm standing in a Hellgate.\"\n\nAshley nodded her agreement, and asked, \"Where are the demons?\"\n\nDanica answered over her shoulder while adjusting the focus of the gate to the valley she called home, \"I told them I didn't want to see their faces ever again, unless I called for them. They got the point.\"\n\nThe image in the portal shimmered, revealing the valley, and the manor. \"There it is. I'm sorry we had to use the Hellgate, I know it's making both of you uncomfortable. We have no way of knowing if the valley will let Edna in, though. I don't relish the thought of slamming into a wall, trying to teleport normally.\"\n\nAshley asked, \"How did you know it would let me in?\"\n\n\"I didn't,\" Danica replied. \"I teleported us to somewhere else I knew, and then pulled you through the Hellgate to test it. I didn't even have to ask the valley to let you in, it just did. Well, let's go. I'm sure both of you are ready to get out of here.\"\n\n\"May as well get this out of the way,\" Edna said, stepping forward. \"Judging from what I'm seeing, and what I think it is, though, I'm not going to have any trouble at all.\" With that, Edna stepped through the portal, into the valley beyond.\n\nThe rest of the women followed, and Danica closed the Hellgate once they were all through. Ashley stared in wonder, while Edna had an expression akin to reverence on her face.\n\nAshley noticed her mentor's expression, and asked, \"What is it?\"\n\n\"It's beautiful, isn't it,\" Edna asked, ignoring Ashley's question.\n\n\"Yes,\" Ashley replied.\n\n\"Glad you like it, because we're going to be staying for a while,\" Edna laughed. She hugged her arm tight about her, and then said to the assembled -- and rather confused -- women around her, \"Let's get the three of you, and your books, all in one place.\"\n\nEdna moved unerringly toward the front door of the manor. After a few moments of staring at each other and shrugging, the rest of the women followed.\n\n{*****~~o~~0~~o~~*****}\n\nEbonar stood to greet the demons, having been informed of their impending arrival by Meckataur's wizardess. \"Welcome -- Eris, and Mache. I believe I have the perfect positions in which to place the both of you, so that you may study humans, and learn their ways.\"\n\nMache, the better dressed of the pair, smiled and said, \"I would learn the ways of human females.\"\n\nEris glanced at Mache and chuckled darkly.\n\n\"Such is not your purpose here,\" Rexxus warned.\n\nBoth demonic siblings turned the demon, scowling. Folding his arms before him, Eris asked, \"Who are you, to command us?\"\n\nNodding with only a slightly deferential air, Rexxus clarified, \"I simply remind you of Meckataur's wishes.\"\n\nStepping toward the demons, Ebonar interjected, \"Meckataur seeks for them to learn the ways of humans. That particular interaction is one of their studies, and they may as well undertake it sooner, rather than later. Do you not agree?\"\n\n\"I have done my duty,\" Rexxus growled, and walked out of the room.\n\nWhy do you not simply shift out of the room, Rexxus? Do you truly believe I don't know exactly who you are? Shifting his gaze from Rexxus' retreating back, Ebonar addressed Mache, \"I believe you would be well suited to the training of a gentleman soldier. I will place you with my own guard, for the moment, and then have you enrolled in the Forge when the time is right. Is this acceptable?\"\n\n\"It is acceptable,\" Mache replied.\n\n\"Excellent!\" Ebonar clapped his hands, and a man appeared in the doorway of the room. \"My servant will escort you to your temporary quarters.\" Turning to the servant, Ebonar added, \"Have Rebecca sent to him, once he is settled.\"\n\n\"Yes, Master,\" the servant replied, with a deep bow.\n\n\"Rebecca will teach you the ways of human females -- quite well.\"\n\nGrinning, Mache spun on his heel and walked toward the servant.\n\nTurning to the second demon, Ebonar said, \"I have the perfect place for you. Tell me, does an occupation as a murderer interest you?\"\n\n\"Very much,\" Eris replied.\n\nPulling a disk of platinum from his pocket, Ebonar hurled it to the side, speaking a word of command. The coin froze in the air, and expanded into a portal of shimmering light. Gesturing to the portal, Ebonar said, \"Shall we?\" Without awaiting a response, he walked toward the portal.\n\nEris followed, and they emerged in a darkened room with natural cavern walls. Eris took in his surroundings, and noticed the false door almost immediately, although it blended perfectly with the wall.\n\nThe hidden portal slid aside, and a dark cloaked man stepped in front of it. \"Welcome, Ebonar. This way.\"\n\nThe shadowy figure vanished on soundless feet, obviously anticipating he would be followed. Ebonar stepped through the doorway, followed by the demon.\n\nSweeping his hand across the room, Ebonar said, \"Welcome to the newly reborn Guild of Death. I believe you will feel right at home here.\"\n\n{*****~~o~~0~~o~~*****}\n\n\"We should get the mirror, in case the girls start acting up,\" Marlena suggested.\n\nWaving her hand in a dismissive gesture, old Edna said, \"They will behave.\" Turning to Ashley, Celes, and Andrea, who stood around a table holding their family books of spells, Edna said, \"Place the books on the table.\"\n\nAndrea looked excited, but Celes and Ashley both rolled their eyes as they followed the elder witch's instructions.\n\n\"Now is the moment of truth -- and destiny. Join hands, and then move your joined hands over the table. Your right hand should be positioned over your own book.\" Edna's voice grew more excited with each word.\n\nThe three witches around the table did as Edna directed. Everyone in the room gasped when the insignia on the covers of all three books began to shimmer with light. The three sigils, all variations of a stylized heart, glowed ever brighter by the moment. The rose-colored light continued to filter from beneath the covers when all three books opened of their own accord, the pages moving as if blown by a stiff breeze.\n\nWhen the pages ceased to turn, all three books were open to an identical entry. Though the position in the book varied between the three volumes, and all were written in different hands, even the slightest glance revealed them to be the same spell.\n\nEdna's voice sounded younger -- stronger -- and full of conviction, \"You must say the spell of your own free will. The words of this spell will join the three of you, and increase your powers. You are chosen -- but you must accept the rewards, and the burdens, which come with this choice. Joined -- three as one -- you will have the strength to face what is to come. Without it...\" Edna paused, and took a deep breath before continuing, \"Without it, none can determine what will come to pass.\"\n\nLooking at the other two witches around the table, Andrea said, \"This feels right. Why else would all our books have this spell? Why would we have found each other like we did, if not for this reason?\"\n\n\"I never really believed in the prophecy, until now,\" Ashley said softly.\n\n\"Things happen...\" Celes began.\n\n\"For a reason,\" all six women said in unison, breaking out into smiles.\n\nCeles squeezed the hands of her fellow witches. \"Let's do this.\"\n\nAndrea and Ashley both nodded. The three witches looked down, studying the spell. Without a word, they all knew when they were ready, and they said the spell together.\n\n<blockquote>Our family lines --their fates entwined --\n\nPatiently awaiting -- this place and time --\n\nJoin us now -- in heart and soul --\n\nThrough this bond -- make us now whole.</blockquote>\n\nThe three books on the table radiated increasing brilliance, the rosy glow rising up to the hands above them. The light surrounded the owners of the books -- silvery sparkles darting about excitedly within it -- accompanied by a musical tinkling. Smiles spread across the faces of the three witches, and they shivered slightly.\n\nThe light dimmed, though the smiles on the faces of the three witches could have lit the room unaided. Each could feel the bond to her sister witches, and a new sense of purpose flooding through all three women.\n\n\"And now, you are three,\" Edna said reverently. A moment later, she let out a whoop of joy, prompting everyone in the room to laughter.\n\n{*****~~o~~0~~o~~*****}\n\nAshley, Celes, and Andrea sat together, speaking quietly to each other about their mothers and their lives. They learned, by the moment, that there were many common experiences in their lives.\n\nEdna sat next to Danica, sipping tea. Marlena had returned to the opposite wing of the manor, having a nagging feeling that the girls were up to no good. Putting down her cup, Danica said, \"I noticed that you said, 'We will be staying,' earlier.\" \n\nEdna nodded her head. \"My place is here as well. All of you have your place in what is to come, and someone will need to watch your charges. They are darling girls. I know that from the little contact I've had with their minds already. They're also mischievous, though. Marlena was wise to check up on them.\"\n\n\"Are you sure you can handle them?\" Danica asked doubtfully.\n\nEdna chuckled. \"Oh, I can handle them. It will be a great deal easier when I have Ashley and the others unbind the remainder of my powers. I don't need to fear demons finding me here.\"\n\n\"You seem to know more about this place than we do, and we've lived here for months now,\" Danica noted, with a questioning look.\n\nWaggling her finger toward Danica, Edna responded, \"All in due time. I'll know when it's the right time to tell you. I can tell you this, though -- no demon will ever set foot in this vale.\"\n\n\"That's comforting,\" Danica laughed, taking another sip of her tea. \"We're going to have to work out something. I didn't really plan for two more when I made this place.\"\n\nPatting Danica's hand, Edna said, \"Don't fret. We'll work everything out.\"\n\n\"What was that little ceremony about?\" Danica asked.\n\n\"That spell binds them together, in a lot of ways,\" Edna explained. \"They probably feel it already, and it will just grow stronger as time goes on. As their bond grows, so will their powers.\"\n\nPutting down her cup, Edna stood up. \"I should go acquaint the girls with their new Gran. That way, you and Marlena can get to know Ashley better as well.\"\n\nDanica nodded, glancing over at the three witches in conversation when Edna left the room. Her gaze focused on Ashley, and Danica thought, I'd like to get to know her a lot better.\n\nJust as the naughty thought ran through Danica's head, Ashley looked over and locked eyes with her. The redheaded witch smiled, as if she'd heard Danica's thoughts. Danica simply smiled back, knowing it wasn't possible -- not that she really would have minded anyway.\n\nMarlena walked in the room a short while later, and Danica moved over to where the three witches sat, gesturing for Marlena to join them. When Marlena sat down, Danica said, \"Well, I suppose we should start with how we all met, since our story is probably longer and a lot more confusing than yours, Ashley.\"\n\nCeles slipped into the brogue she had used upon first meeting Danica, \"Ye got the right o' it there, Dearie.\"\n\nCeles cackled, and everyone else laughed with her. Danica took a deep breath, and started at the beginning, with the tale of how Zoraster first lured her into his trap.\n\n{*****~~o~~0~~o~~*****}\n\nEbonar, one of the few people to ever see his face, sat across from the Nightmaster of the Guild of Death. In the background, he could hear the sounds of Eris furiously coupling with a woman recruited to the guild from a bordello. Absently, Ebonar wondered if her very realistic cries of passion were for show.\n\nPulling away from his musing, Ebonar addressed the Nightmaster once more. \"The funds you need will be delivered to you, immediately. All bow before the altar and pledge their lives to the Lord of Murder, I trust?\"\n\nThe Nightmaster replied, \"It is as you instructed, upon facilitating the rebirth of the guild. A portion of the payment for each mark is offered to Lord Blorcasir as well.\"\n\n\"Such is actually unimportant,\" Ebonar remarked, and then took a sip of his wine. \"As surrender of coin seems to be a fundamental part of any religion, I suppose the traditional forms should be observed. Maintain the coin, and use it as payment, when the guild requires someone's death, as opposed to a client.\"\n\n\"It shall be so,\" the Nightmaster responded.\n\n\"How long will it take to construct the headquarters of the guild in the capital?\" Ebonar asked.\n\n\"A perfect location has been found, and work can begin immediately. With the aid of wizards, we should be able to occupy it within the month.\"\n\n\"Excellent,\" Ebonar said, rising from his chair. \"I shall take my leave and arrange for the coin to be delivered to you. Train Eris well. I believe you will find him to have a natural aptitude for your occupation.\"\n\n\"It shall be so,\" the Nightmaster responded again.\n\nEbonar offered a bored wave, and turned to leave the room. Before exiting the labyrinth lair of the guild, he entered the cavern where the altar of Blorcasir, the Lord of Murder, was enshrined. Drawing near, Ebonar could feel the god's power within the stones.\n\nYour desire has become reality, Blorcasir. The Guild of Death is reborn. Unfortunately, the revival of your power does not serve you. Soon enough, the guild, and your power, will help set fire to this world.\n\n{*****~~o~~0~~o~~*****}\n\nDanica finished her tale, having briefly described the circumstances that had brought the other women in contact with her. \"There's a lot more to it than that, of course. As long as that took, that's the abbreviated version. I barely touched on the nightmares Andrea, Celes, and Marlena have been through.\"\n\n\"We've all been through so much,\" Ashley agreed. \"My own story is simple, and very similar to Celes'. My mother was killed by Rexxus, the demon that attacked me in the desert. I was only twelve at the time, and my mother used her magic to send me away, to keep me safe. She didn't know it, but the spell sent me directly to Edna. I vowed to use my powers to destroy every demon I could, and that I would personally send Rexxus into the void.\"\n\n\"I renounced my powers, while you embraced them,\" Celes remarked. \"I often wonder what might have happened if I'd taken your path. I'd certainly know more about being a witch, by now.\"\n\n\"I didn't even know about my powers. I used them without knowing it, but I never knew I had them,\" Andrea interjected. \"From what I've read, I always had my powers, so why didn't I discover them sooner?\"\n\nEdna's voice arose from the doorway, \"Odds are, your mother bound your powers, for some reason. She must have placed a condition on the binding, so that your powers would slowly emerge if anything ever happened to her.\"\n\nCrossing the room, Edna sat down amidst the rest of the women, breathing a sigh of relief. \"Those girls are hard for an old woman to keep up with. They're sweet girls, though. They seem to be taking a liking to me. I put them all to bed. Considering how wan you all look, you should probably seek your beds as well.\"\n\nAshley chuckled, \"We may as well just go to bed. This is another of those arguments you can't win.\"\n\n\"The three of you will need your rest, because I want you to unbind my powers tomorrow,\" Edna declared.\n\nAshley asked, \"Is that a good idea? Won't that attract the attention of demons? You bound your powers for a reason.\"\n\n\"It won't be a problem, here,\" Edna replied.\n\nWith a mixture of concern and confusion on her face, Ashley asked, \"Why is that?\"\n\nDanica and Edna both replied in unison, \"All in due time.\" They laughed, watching Ashley's confusion spread to the rest of the women.\n\n\"This came up earlier when Edna and I were talking,\" Danica explained. \"Now, what are we going to do about sleeping arrangements?\"\n\n\"I nearly dozed off on one of the couches in the girls' wing earlier. It's more comfortable than my bed. I'll sleep there for tonight, if you have blankets and pillows to spare. That way, I'll be right there when the girls awaken.\"\n\nDanica shrugged and said, \"If you're sure you wouldn't prefer a bed...\"\n\n\"The couch is perfectly fine,\" Edna responded. \"I'll be lucky if I can drag myself out of it in the morning. It really is quite comfortable.\"\n\nCeles spoke up, \"That's one. Should we draw straws, to see who gives Ashley their bed tonight?\"\n\nA rush of thoughts and emotions assaulted Danica from Marlena. Danica noticed Edna flinch a little, and assumed that the witch must have felt it too. Danica sent her thoughts to the illusionist, If that wave of naughty thoughts that just slammed into me is any indication, you don't really want to sleep in your own bed tonight, do you?\n\nMarlena blushed, thinking back to Danica, I'll never get used to that, but you're right. I can't get Brandon out of my head. I've been wet all day.\n\nJust offer up your bed, Danica mentally suggested, I'll take you there, and I'll keep it quiet for now. They're going to find out, of course.\n\nThat's okay. I just don't like being teased beforehand, it distracts me and makes it hard to... Marlena broke off her thought, her blush deepening.\n\nDanica fought hard to keep from chuckling aloud, or through the mental link to Marlena. I understand. You don't need to explain any further.\n\n\"Ashley can have my bed,\" Marlena said aloud.\n\n\"I don't want to put you out,\" Ashley insisted.\n\n\"You won't be,\" Marlena replied, offering a bright smile.\n\n\"That's that, then. To bed -- the lot of you!\" Edna said, slapping her hand on a table and standing up.\n\nCatching a thought from Edna, Danica chuckled and said, \"Yes, Gran.\" It was what Ashley called Edna when they were alone, and Edna was quite fond of the term of endearment.\n\nWaving her finger at Danica approvingly, Edna laughed, \"Now there's a good girl!\"\n\n\"We really do need our rest,\" Danica remarked. \"I'm not about to leave demons lurking around out there, threatening elves. We need to figure out how to fight them, and get rid of them.\"\n\nSomber nods of agreement from the women acknowledged that statement, as everyone stood to go to their beds.\n\n{*****~~o~~0~~o~~*****}\n\nWith Ashley and Edna both assisting, the morning meal proved to be a simple chore. The two witches meshed in perfectly, taking on tasks they were best suited to. With so much capable assistance on hand, Danica planned a lavish meal, and everything was ready before the girls awakened, for the first time in a long time.\n\nEveryone naturally noticed Marlena's absence, and Danica explained that she planned to fetch the illusionist after breakfast. They all shared a chuckle when Celes guessed where Danica would be fetching the redhead from.\n\nAfter a hearty meal of sausage, eggs, toast with jam, and hash brown potatoes, even the girls were reluctant to get up from the table. Their still-young minds soon overrode their full bellies, and they filed out of the room to play.",
        "Edna stood to follow the girls and keep an eye on them. \"Go get Marlena, and then come to the girls' side of the manor once the dishes are done. Bring your family books. Between the four of them, and what all of you remember, maybe we can figure out what sort of demons you'll be up against out there in the desert.\"\n\n\"I probably know more about Rexxus than anyone, so I can tell you much about him and his powers,\" Ashley revealed. \"I couldn't find the other demons, though.\"\n\n\"You shouldn't have run off on your own without telling me,\" Edna chided. \"They may be in my book, and I could have helped you. With two more tomes to look through, odds are we'll find all three.\"\n\n\"I'll go get Marlena, then,\" Danica said, and then groaned as she got up, her full belly protesting the action.\n\n\"And we'll get started on the dishes,\" Andrea added.\n\nClearing her mind, Danica focused on the image of Blackhawk Hall's teleportation pattern as everyone else went to their tasks. Danica vanished on the wings of magic a few moments later, to reappear in the faraway keep.\n\nStepping out of the portal room, Danica nearly collided with a young man who was coming into the room. \"I'm sorry,\" she apologized, and almost immediately heard his mind racing.\n\nWow, look at those boobs! They're huge! I wonder if she'll be staying overnight? Maybe she'll go to the bath and I can sneak a look at those tits and her pussy.\n\nChristi walked up behind her son, bopping him on top of the head. \"Stop staring. You're going to be late for sword practice if you don't hurry up. Your father will run you into the ground if you aren't down in the courtyard on time.\"\n\n\"Okay, Mom,\" he replied, taking one last, longing glance at Danica's chest, before running past his mother, out into the hall.\n\nChristi sighed, \"He's getting to be a chore. I'll be glad when he goes through his adulthood recognition ceremony this winter, so I can work on getting him married off. I've already had to warn every female in the keep, and I'm thinking I may have to warn the whole city soon. That's my oldest, Matthias.\"\n\n\"He's that age,\" Danica chuckled.\n\n\"Cerebus said he just needs to get it out of his system, so his brain will work again, and then we can explain that he needs to be careful. We don't need any unexpected heirs turning up.\" Glancing back over her shoulder at the retreating young man, she added, \"I'm going to have Cerebus go ahead and take him down to the city, and let him work off all that pent up lust at one of the better bawdy houses. It will do him some good, and give one of the girls some bragging rights to drum up extra business.\"\n\n\"Sounds like you have it worked out,\" Danica laughed. \"Has Marlena been up and about yet?\"\n\nA crooked grin spreading across her face, the Duchess replied, \"Up, yes. The only about she's gotten around to is going to the bath, though. They went at it like rabbits all night, and started right back in this morning. Brandon is down in the courtyard with Cerebus, so at least she won't be wasting that bath. The men will be down there for hours drilling Matthias. How have you been?\"\n\n\"We're all doing fine,\" Danica replied. She laughed then, and added, \"Not as well as it sounds like Marlena has been doing the last two days, but well, all the same.\"\n\nGesturing for Danica to follow, Christi turned and started down the hall. \"I've been meaning to see if I could get someone to contact all of you. We've been getting all sorts of disturbing reports from our spies, and I thought all of you might be able to shed some light on some of them.\"\n\nDanica asked, \"Zoraster's people?\"\n\nChristi nodded. \"We think so, anyway. Things are going to come to a head quickly if it keeps up like this. Draxnog and Ferrartene have stopped searching for volunteers and have started conscripting. Despite everything we've shown them, we can't get Freeland or anyone else to make any overt counter-moves, either.\"\n\nDanica followed Christi into a room and over to a desk while the Duchess continued. \"We're preparing for war, and the others are taking steps, but if they don't start taking this deadly serious, we're all going to be in trouble.\" Picking up a stack of papers, Christi said, \"These are the ones I wanted you to look at.\"\n\nAccepting the documents, Danica leafed through them. Her brow furrowed as she saw several things that absolutely reeked of Zoraster's style. \"I'll take them back with me and let you know what we think. You're right, though, Zoraster's people have their hands in a lot of this. Even dead, he's still a threat.\"\n\n\"I appreciate it,\" the Duchess responded. \"If Draxnog moves, he's going to try to run over us first. Any information we have will help.\"\n\n\"Mom, the lady in the bath says she needs a towel,\" rang out a voice from the doorway.\n\n\"You know where they are, don't you, Jennica?\" Christi asked, looking down at the little blonde girl.\n\n\"Uh huh,\" Jennica replied, nodding her head.\n\n\"Then go get one for Marlena,\" Christi said slowly, with obvious amusement in her voice. Then her brow furrowed, and she asked, \"Who's watching Dax?\"\n\nJennica spun back around, as she had already started out the door to fetch a towel. \"Kronk's giving him a piggy back ride.\"\n\n\"Okay, take Marlena a towel, and tell her Danica is here with me.\"\n\n\"'K, Mom,\" Jennica said, and skipped out of the room.\n\nTurning back to Danica, Christi said, \"She's eleven. She'll be as much trouble as Matthias, soon. She's already started flirting with the guards. Dax is five, and he's like a whirlwind, leaving disaster in his wake everywhere he goes.\"\n\n\"At least you don't have a dozen, some of whom are starting to develop powers,\" Danica laughed.\n\n\"Gods forbid,\" Christi laughed, sitting down in a nearby chair. \"Ashtar is supposed to be coming this evening.\" Christi paused for a moment, letting a sly smile spread across her face. \"You could stay overnight and catch up with him. I know you're old friends. I have the perfect place for you to sleep tonight.\"\n\nThe Duchess knew of Danica's powers, and quite purposely let her thoughts turn to Danica. Those thoughts were very erotic, and very tempting. Danica shivered, letting out a little purr. \"I'd love to, but there's something we need to do. That's why I'm here to get Marlena so early.\"\n\n\"Consider the invitation to stand until you can accept it. Cerebus and I nearly broke the bed, fantasizing about sharing it with you, after we both met you.\"\n\n\"If you don't stop that, I'm gong to forget why I'm here,\" Danica responded, with a twitch of her eyebrows.\n\n\"That wouldn't bother me at all,\" Christi said, and punctuated it with a laugh. She then stood up and said, \"Care for some wine while we wait for Marlena to get here? It's good, but I have to warn you that it's Vladamir's vintage, so it kicks like a mule.\"\n\nDanica playfully admonished, \"Are you trying to get me drunk, now?\"\n\nThrowing Danica a coquettish look over her shoulder, Christi said, \"If I was, I wouldn't have warned you about how strong it is.\"\n\nThey both laughed and settled in with their wine to await Marlena's emergence from the bath.\n\n{*****~~o~~0~~o~~*****}\n\n\"Well, well -- two of you this time, I see,\" Ebonar mused, watching Danica chat with the Duchess in one mirror, and Marlena lathering her breasts in the other. He chuckled, finding both amusement and arousal in the suggestive banter between the Duchess and Danica.\n\nEbonar suddenly stiffened, his eyes locking -- unseeing. When his muscles relaxed again, a wide smile spread across his lips.\n\nIn a flash of light, he vanished, to set things in motion.\n\n{*****~~o~~0~~o~~*****}\n\n\"You're relentless,\" Danica laughed, as Christi once again managed to connect their conversation to the two of them climbing into bed.\n\n\"Cerebus and I have been too busy to find company for our bed, lately. I figure the perfect way to fix that is to combine business with pleasure.\"\n\n\"I think I'm going to have to come back here -- very soon,\" Danica said, letting her desire creep into her voice. Though Danica was determined to fight the urges that the Awakening caused in her, there seemed to be little point in resisting the Duchess. There were no deeper expectations in Christi's mind, beyond the chance to share Danica with her husband. What concerned Danica most was when her desires caused others to react in ways contrary to their nature. It was obvious that Christi's heated passion was her norm.\n\n\"That's what I wanted to hear,\" Christi laughed. \"I'll ease up a little, now.\"\n\n\"Marlena probably has the right idea, anyhow,\" Danica remarked, and shrugged. We all should probably get out a bit, or we'll start getting on each other's nerves.\"\n\n\"She should be out...\" Christi bit off the last word, replacing it with a curse as she jumped up out of her chair.\n\nDanica noticed the flash of light as well, and saw exactly what Christi did, a woodland troll appearing in the room. Another popped into existence a few feet away, hot on the heels of the first.\n\nLashing out instinctively with her telekinetic powers, Danica slammed the first creature into the ceiling. The pitiful monster didn't even have time to realize what had happened to it before the rap of its head on the ceiling stole its wits, and the fall to the floor stole its life, breaking the troll's neck.\n\nChristi rolled under a table, away from the trolls, and came up with a sword in her hand, pulled from its hiding place below the table. Though there was no outward display, the Duchess had to assume Danica was responsible when the second woodland troll sailed across the room to hit the wall. Another flash of light right next to her drew Christi's attention a moment later.\n\nDanica heard two screams. The first sounded like a little girl, and the second sounded like Marlena. \"Marlena,\" she gasped.\n\n\"Jennica!\" Christi screamed, and slashed the troll in front of her. The lightning quick strikes severed the creature's manhood and opened its throat. The monster didn't even have time to realize it was dead before Christi kicked it out of the way and sprinted out into the hall.\n\nDanica followed, immediately speaking the words of a spell, when she saw one of the trolls with its claws dug into a serving woman's arm. Her magic missiles thudded into the creature's arm, stealing its strength, and allowed the servant to pull free.\n\nA thunderous bellow caused Danica to turn, and she breathed a sigh of relief, which the Duchess echoed. A huge man stood over Jennica, and a small boy that Danica assumed must be Dax. He snatched up a troll in one huge hand, gripping the monster's face, and slammed it into the wall next to him. The troll's head burst open, and it fell atop a second corpse already lying on the ground.\n\nA loud rumble, accompanied by a bright flash of light, echoed from behind a closed door, a little past the half-ogre and the children.\n\nChristi shouted, \"Stay with Kronk. Jennica, get the daggers out of his boots.\"\n\n\"Okay, Momma,\" Jennica replied, with a quaver of fear in her voice. She moved to obey, however, and pulled two daggers from the big man's boot sheathes. Kronk pulled a long knife from a sheathe at his waist at the same time.\n\nDanica spun back around, having seen the edges of another flash. Yet another woodland troll hurtled down the hall, to bounce hard off the wall at the other end.\n\nChristi gestured at the door down the hall and growled, \"The baths.\"\n\nDanica nodded, and followed the Duchess down the hall. Christi tried the door handle, but it was locked.\n\n\"Stand back,\" Danica warned.\n\nChristi danced back out of the way, and Danica concentrated, blowing the door open with her powers. Both women dashed into the room to see a smoking troll lying on the ground. Beyond that, they saw Marlena, leaning against the huge bathing pool, nursing claw slashes running from her shoulder down to her bare right breast.\n\n\"Are you okay?\" Danica asked, quickly moving toward her friend.\n\nMarlena weakly nodded.\n\nAnother troll appeared, right next to Christi, and she stabbed it in the chest. Quickly pulling the sword free, she slashed the monster's throat for good measure.\n\nDanica grabbed a washcloth and quickly -- but carefully -- washed Marlena's wound. All the while, her eyes darted, looking for more monsters.\n\nChristi let her guard down when the sounds of fighting ceased, and no more creatures appeared. \"I can't believe somebody is pulling this -- again,\" she snarled. She spun around, hearing footsteps, but relaxed when she saw Kronk and her two children.\n\n\"Ma Ma,\" Dax cried, and ran to her.\n\nChristi held out her free arm and pulled the boy close when he reached her. \"It's okay, Dax. All the filthy, stinking trolls are gone now.\"\n\n\"It doesn't look too bad. Let me get you a healing potion,\" Danica said to Marlena.\n\n\"Take a look at this,\" Kronk said to Christi, nodding down at Jennica.\n\nChristi looked, and a wide smile spread across her lips. One of the daggers Jennica held had a smear of troll blood on it.\n\n\"It come up behind me. The little wildcat cut its hamstring before I could turn,\" Kronk laughed, and tussled Jennica's hair.\n\n\"That's my girl,\" Christi beamed.\n\nBy the time Marlena lowered the potion bottle, her wounds were healed. She accepted her robe from Danica and said, \"Thank you.\"\n\n\"The hell are these things?\" Christi said, and picked up a crude, wooden amulet from the floor, next to the last troll she had killed. The strike that had cut the monster's throat had also severed the crude thong attached to the amulet. \"This thing is making my skin crawl.\"\n\nDanica walked over while Marlena dressed, but didn't recognize the rough carving on the wood. She slipped into the second sight, and said, \"It's blessed -- or rather cursed -- by a dark god.\"\n\n\"A woodland troll -- with a blessed amulet?\" Christi scoffed.\n\nDanica turned to look at the other smoldering troll. \"That one has one too.\"\n\n\"Everybody alright?\" A gruff voice called from the doorway.\n\nDanica looked back to see the Duke, who had spoken, standing in the doorway with Brandon and Matthias. They all had swords in hand, and none of the blades were clean.\n\n\"We're fine,\" Christi replied.\n\n\"Fucking Draxnog,\" Mindblind growled.\n\n\"He doesn't learn any new tricks, does he?\" Christi agreed. She smiled then, and pointed at her daughter. \"Jennica got a good slash in. Hamstrung one of the filthy things.\"\n\n\"Ha! That's my girl,\" the Duke grunted. He swung an elbow into Matthias' ribs, and added, \"The boy got a little bit more practice today than we expected. He got two of 'em.\"\n\nDanica asked, \"I take it this has happened before?\"\n\n\"Years ago, before Matthias was even born,\" Christi answered. \"Thanks for the help. Nice power you've got there.\"\n\n\"More worthwhile than mine,\" Marlena sighed. \"It ignored my illusions. That's how it got to me.\"\n\n\"It didn't ignore that lightning bolt, though,\" Danica responded, nodding toward the blackened troll.\n\n\"It was a near thing,\" Marlena argued.\n\nDanica immediately countered Marlena's self-depreciation, \"You were naked. Unless you had an amber rod and some fur stashed somewhere, you cast that bolt without them.\"\n\nMarlena's eyes widened, and she smiled. \"I didn't even think about it.\"\n\n\"I know I didn't manage that on my third attempt. So quit putting yourself down, or I'll have to spank you,\" Danica playfully warned.\n\n\"I do that a lot, don't I?\" Marlena said, apologetically. \n\n\"Matthias, why don't you take Dax,\" Christi suggested.\n\n\"Okay, Mother. Come here, Dax, you little terror,\" Matthias called.\n\nThe boy ran to his brother, and the two of them walked out of the room.\n\nChristi walked over to Danica and said, \"We've got to get this mess cleaned up, and get everybody organized, so we'll be ready if it happens again.\"\n\nNodding her understanding, Danica said, \"We should get back, too. Everyone is expecting us. I'll get back with you about those reports you gave me.\"\n\n\"Going to deliver the news yourself?\" Christi asked, with a twitch of her eyebrows.\n\n\"Maybe,\" Danica replied, and then laughed when she couldn't keep a straight face.\n\n\"We should find out what we can about those amulets,\" Christi suggested, nodding toward the one she'd dropped to the floor.\n\n\"A cleric or priest should be able to tell which god blessed it,\" Danica advised.\n\nInclining her head in acknowledgment Christi said, \"We'll do that, then. See you soon.\"\n\n\"I'll stop by and say hello when I have more time, Brandon,\" Danica said, taking Marlena's hand.\n\n\"I was starting to think you didn't like me anymore,\" Brandon teased. Turning to the other redhead, he winked and added, \"Nice lightning bolt, Marlena. You cooked that sucker good. All he needs is an apple in his mouth.\"\n\n\"I'd better get you out of here, before that rogue really turns on his charm,\" Danica remarked, giving Marlena's hand a little squeeze. Sending her thoughts immediately afterward, Danica added, Your face is going to ache if you keep smiling like that. Are you falling for him?\n\n\"No,\" Marlena answered aloud, color rising in her cheeks.\n\n\"No, what?\" Brandon asked.\n\n\"Got to go,\" Danica declared with a mischievous grin. The words of a teleport spell rolled off her lips immediately afterward, and she vanished with Marlena, from the room.\n\n{*****~~o~~0~~o~~*****}\n\nEbonar growled and dismissed the image in the mirror. He had hoped that Danica would take one of the amulets with her. Through that link to Blorcasir, it might have been possible to trace her and discover her hiding place. The inspiration for the idea had not been his, of course, but the plan had.\n\n\"We will discover her den, soon enough,\" Ebonar heard a voice behind him say.\n\nEbonar immediately spun, dropping to one knee as he did so. \"Master.\"\n\nStepping from the shadows, Zoraster Arias commanded, \"Rise, Ebonar. We have much to do.\"\n\n{*****~~o~~0~~o~~*****}\n\nI hope you're enjoying Book II in Danica's trilogy. Please take a moment to vote/comment \u2014 it's what keeps us writing! Individual chapter votes can tell me a lot, so do vote on every chapter if you wish.\n\nBig thanks to Roust Writer for his editing. I don't know how I got along without his keen eye, quick wit, and insight."
    ],
    "authorname": "Darkniciad",
    "tags": [
        "magic",
        "witchcraft",
        "demons",
        "redhead",
        "blonde",
        "brunette"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/sisters-of-the-mists-ch-04"
}
{
    "title": "Bent Ch. 09",
    "pages": [
        "Ch 9 Seismic Force\n\nIt's Saturday and I've stayed in bed as long as I can, without drawing too much concern from the guys. I get up and make myself a sandwich for lunch, as they quiz me on my plans.\n\n\"You going out?\" Ben asks.\n\n\"Yeah.\" I say.\n\n\"Hot hook-up?\" He says hopefully.\n\n\"Maybe...\" I lie.\n\nThe truth is, I've been on two dates since this thing with Ethan imploded. The first time, we got back to her place and low and behold, I couldn't get it up. Now, I know that its normal, and that it happens to everyone, but it's never happened to me. That time, I stayed and made sure she enjoyed herself, but when it happened again with the next girl, I just made a vague excuse and got the hell out of there.\n\nEven my dick's feelings are hurt. \n\nI've gone so far as to try a gay bar. A few weeks ago, I swung by the aptly named, Cock House. It was surreal being there. Dimly lit, with guys everywhere, dancing dirty, hands all over each other. Kissing and flirting.\n\nFree.\n\nAs I watched things unfold, I imagined what it would be like to be there with Ethan. I picture that cute, dorky way that he dances. But instead of being on the dancefloor with Liza, he'd be there with me. My arms around him. My body pressed against his.\n\nNow, sitting there in that bar, with my dick limp on my thigh, I could only wonder, if I took a guy with a cute ass home, would I even be able to get it up? Maybe I would, but only if I bent him over and evoked Ethan with every ounce of my strength.\n\nAs I got up to leave, the bartender said, \"Didn't find what you're looking for, huh?\"\n\n\"Nah,\" I said, \"he isn't here.\"\n\n\"Well,\" said the bartender, eyeing me up and down thoughtfully, \"then he's a damned fool.\"\n\nIt wasn't much, but it was the only time I've admitted out loud, that the person I'm pining for, is a man.\n\n*\n\n\"Come on, tell us. Do you have a hook-up lined up?\" Kip has joined the conversation.\n\n\"No, no, nothing like that.\" I admit,\" I've got some errands to run and then I might hit The Dive for the game.\"\n\nKip and Ben give each other a quick, knowing glance. They seem encouraged. Pleased that I'm venturing out.\n\nI step out into a clear, crisp February afternoon and head aimlessly down the road. I don't have errands to run, I just needed to get out of the house and away from Ben and Kip's suffocating concern.\n\nAs I walk down the road, my phone in my hand, I consider calling Ethan for approximately the seven millionth time. Not that I could. I can't, because I blocked and deleted his number when he didn't call after the first two weeks. Obsessively checking my phone, hoping to hear from him was driving me so insane, it made me physically sick.\n\nDon't even think about it, I remind myself. As hellish as things are right now, do you know what would be worse? Well, I do. Getting a call from him, casually asking if I can come over to help carry boxes when Liza moves in. That would be worse. Or getting that text, you know the one. A photograph of her left hand with, \"She said yes!\" typed underneath. That would be worse too. Raising a glass at their wedding. Definitely worse. Walking up their driveway, years down the line, their beautiful children with crazy-wild eyes, coming running, happily squealing, \"Uncle Ollie is here!\"\n\nYeah, as bad as this is, that would be way worse.\n\nNo way I could survive that. \n\nI get to the bar, and take a seat. The same spot he was sitting in when we met. I try not to think about it too much, but being here, is hurting, so I order a beer and fix my eyes on the screen and try to let it all wash away.\n\nIt's quiet at The Dive, but I guess it's still early, even for a Saturday. Every once in a while, the door swings open, casting a glare across the screen. Someone coming, or someone leaving.\n\nYou just have to get used to it. I tell myself. In time, this life in the shadows, where everything's grey, will seem normal. \n\nJust give it time.\n\nThe door swings open again, with a soft rattle and creek. This time, instead of noticing the glare on the screen, I feel it. A seismic shift. The temperature rising. Instantly spiking at least three or four degrees. I feel him before I see him. It feels as if I've been kicked in the sternum.\n\nWinded.\n\nAs he takes a seat next to me, I study the label of my beer intently, as if it's the most interesting thing I've ever read. I can see his vivid blue jeans and the golden-brown of his hands out of the corner of my eye.\n\nFull-colour, at last. \n\nHe orders a beer and then sits wordlessly, rapidly flicking his thumb nail back and forth on the edge of the coaster. I've never noticed him fidget before.\n\n\"I, er, went by the house. Ben said you might be here.\" He says, stammering slightly.\n\nI can't think of anything profound to say in response, so I say nothing at all. In truth, I'm not sure I could find my voice, even if I tried. My throat is strangled, blood coursing through my veins with such force that my ears are ringing. I drink my beer quickly, noticing that he does the same.\n\n\"So,\" I say meanly, when I finally think of something worthwhile to say, \"how's Liza? She doing oka...?\"\n\nI don't finish though, because he's parted his legs, deliberately pressing his knee against mine. One thousand volts flow through my body. I'm frozen. My brain fried. Rooted to my seat, as I try not to shudder from the stunning force of the current.\n\nI drain the last of my beer, and get up quickly. Leaving him to hurriedly peel off a few notes, paying his tab, and mine. We leave the bar and get on the train. I choose a seat opposite him and I try not to look at him, though I can feel his eyes on me. Cutting into me like a laser. Burning me, until I'm nothing but embers. We don't talk, or discuss where we're going, but I'm not surprised when we arrive at his building. I follow him up the stairs, and notice with some satisfaction, that his hand trembles slightly, as he unlocks the door. He's burning too.\n\nThe door hasn't even swung shut yet, when we collide. Bodies smashing together, hands clawing, mouths biting. This is not kissing; it's gnashing with teeth. I drag his jacket off his shoulders, furiously shrugging mine off at the same time. He winds his hands around my neck and buries his face in my neck, inhaling deeply. A small, low moan escapes from his lips, he's breathing open mouthed, ragged. When he looks up, his eyes are so dark he looks drunk. He pulls my hips hard up against him, his broad, hard body pressing against mine.\n\nOh God, I've missed his bulk.\n\n \n\nI'm trying to get his shirt off, but, right now, my severely impeded cognition can't understand buttons.\n\nHow the fuck do these things work?\n\nI pull them this way and that, in frustration, before grabbing his shirt in both hands and violently ripping it open. He gasps, eyes wide, as buttons go flying. I drag my sweater off over my head, shaking my arm angrily, as I fling it on to the floor, leaving him to peel his shirt off quickly. I tear his belt and fly open, taking a second to notice his eyes.\n\nOh, I've missed those eyes.\n\nWild yellow flecks, making them glow, lids hooded and low. His jaw is slack and he's blinking slowly, as I shove him around with such force his hands slap the wall in front of him loudly.\n\nI grab the waistband of his jeans and his boxers and yank them down roughly, just over his ass. Exposing no more than I need. His tan line has faded. His back and his ass the same colour now. So beautiful, I can't stop a low growl, coming from low in my chest. I use both hands, gripping those cheeks. Kneading them, squeezing hard. Spreading them roughly.\n\nFuck, I think dimly, I need lube and a cond...\n\n\"Back pocket.\" He says hoarsely.\n\nI shake my head a little, a booty call if ever I've seen one. He came prepared. This is what he's come for. This is all he wants from me. I hate myself a little for having so little restraint. But that doesn't stop me. I search his pocket quickly, finding what I'm looking for, using it to open him quickly and roughly, with one finger and then two. He grunts as he takes it.\n\nI'm so hard, my dick looks almost purple. I'm close to losing my mind, as I enter him with a single, hard thrust.\n\nHe gasps, \"Ow.\"\n\nAh fuck.\n\nThat fucking little word. Coming from him. It slows me, making me pause. I don't know why it's so precious to me. I bow my head down, pressing the side of my face gently against the back of his head, nestling it there for a moment.\n\nJust for a moment.\n\nThe fury and the fire are not far away. I start thrusting in earnest, fucking him hard, making him moan and making him wince. This, is how I should have fucked him that first time. The way he always fucks me. This, is how I should have fucked him every subsequent time, too.\n\nHe's struggling to stay standing. His hands clawing the wall, trying and failing to find a good grip. When his knees start to buckle, I follow him to the floor, bodies still joined. He's on all fours now, jeans around his knees, and I'm right behind him. Grunting. Rutting like animals. His arms going limp as he struggles to take my merciless pounding.\n\nHe gives in first, jerking his dick with such speed, his arm appears blurred. He rears back as he finds his release, roaring with terrible force.\n\nI keep pounding straight through his orgasm. Loud, tensile wap's, as our bodies slam together. Usually, I'd slow, or I'd stop, so I don't hurt him. Now, I confess, part of me does want to hurt him. Hurt him, like he hurt me. But, deep in my heart, the rest of me knows, I can't do this to myself again. I'll have to move to Dublin, job or no job. I can't do this again. This time, is the last time. The last time I'll be with him, and honest to God, I just don't want it to end.\n\nBut, at last, nature takes its course, as it inevitably must. My body convulses, lurching forward violently, as I cum with enough force to perforate his bowel.\n\nAs I start to come down, I survey the wreckage, like a first responder surveying the scene of an explosion. Our jackets are there, my sweater and belt, here. He's leaning against the wall of the narrow hallway, sitting bare-assed on the floor. Jeans around his knees, dick softening between his legs. I lean back against the opposite wall. Facing him. The cold concrete on my back sobering me up.\n\nI imagine this must be what addicts feel like, when they fall off the wagon. When that first little sniff becomes a sip, and that sip becomes a drink. When that one little drink becomes a bender and before you know it, you're waking the next day and your head is pounding. That sinking feeling, when you know, you are right back at square one.\n\nI was sixty-eight days clean. \n\n\"I shouldn't have come here.\" I murmur, more to myself then to him.\n\n\"I've gotta get going.\" I say, standing up, finding my belt and looping it though my jeans, dragging my sweater quickly over my head. I know it's on inside out, but I don't care.\n\n\"Ollie,\" he says, \"wait.\" He's scrambling up, tangled awkwardly in his jeans, obstructing my exit as he struggles to pull up his pants and do up his fly. I can't deny, a small part of me is happy to see him so undignified.\n\n\"I need to get out of here.\" I say tersely.\n\n\"Oliver, wait!\" He says, arms out, purposely blocking my way now.\n\nHot fury rips through me. Hasn't he done enough? My body tenses, fists clenching. I've never wanted to punch someone this much before.\n\n\"Get out of my way, Ethan.\" I spit, \"I mean it.\"\n\n\"Please, Ollie,\" he begs, \"please stay. Please, just tell me what I can do to make you stay.\"\n\nMy anger is making me light-headed. Is he honestly trying to pretend he doesn't know?\n\nWell, I'm way past pretending, so I say clearly. \"You know exactly what I want.\" For the avoidance of doubt, I add, \"I want to know what this thing is,\" gesticulating wildly, flapping my hand back and forth between us, \"and, I want to know how the fuck it makes you feel?\"\n\nI enunciate each world clearly, a little too loudly, as if I'm speaking to a child.\n\nHe takes a deep breath and looks down as he says quietly, \"I don't know.\"\n\nOof, a fresh wave of anger hits me. I just know, I'm about to receive yet another monumental dose of his bullshit. I'm distantly filled with an awesome feeling of empathy for women. They've been dealing with men's bullshit for thousands of years. No wonder they're so tired. I've only dealt with one man, for a matter of months, and I am exhausted.\n\n\"I, I don't know,\" he starts again, blinking and inhaling as he looks up at me.\n\n\"I don't know what it's called, okay?\" He adds quickly, seeing my fury and swallowing hard.\n\n\"I don't know what it's called when you walk into a bar and meet a guy, and your entire life gets turned on its ass. Everything you've ever wanted, everything you've ever known, turned up-side down in a second.\"\n\nHe takes a deep, unsteady breath before adding, \"I don't know what it's called when you've always been straight, you've never questioned it once, but that guy from the bar?\"\n\nHe looks at me intently, hesitating slightly, before adding softly, \"Turns out, that guy is your soulmate.\"\n\nWait, what? \n\n \n\nDid Mr-shut-the-fuck-up-and-don't-be-a-bitch just say the word 'soulmate'?\n\nI try not to breathe; I don't want to break the spell.\n\nHe continues, struggling now, voice faltering, \"And how do I feel?\" He almost shouts, \"how do I fucking feel?\"\n\nHis voice breaks on the last word and he looks at me, shoulders drooping, defeated. His eyes are like dark pools, watery, threatening to overflow.\n\n\"You know how I feel.\" He says quietly, trying to steady his voice, but failing, \"You told me months ago.\"\n\nNo way he'll do it, I think, no way he'll say it.\n\n\"I...I love you.\" He sobs, watery pools overflowing, salt-water tracking silently down his face.\n\nI close the space between us in a millisecond. Flying to him. Crashing into him. Throwing my arms around him, as he clings to me, shaking. His face burrowing into my neck, as he sobs, \"I love you so much.\"\n\n*\n\nI hold my hand out. He slides his into mine, thick fingers lacing together, as I lead him to the bedroom. We undress slowly this time, hands and mouths savoring every sliver of skin we expose. I kiss him deeply, finding his mouth open, wanting. His eyes searching my face, looking at me.\n\nInto me. \n\nThough I've dreamt of this moment, imagined it ceaselessly, desperately tried to conjure it with every ounce of my being. The way he looks at me now, possess an honesty I could never have imagined. My insides are shaking with love and desire, as we fall back on the bed. Him on his back, my body over his. I reach for a condom, but when I start opening it, he takes my wrist, shaking his head.\n\n\"Are you sure?\" I ask, he nods, his mouth parted slightly. Hungry.\n\nI enter him slowly, encountering little resistance. His body still loose from what I did to him earlier. I gasp in amazement from the sheer pleasure of feeling my skin inside him. His warmth, that inexplicable heat, with no sheath between us. He must feel it too. It's making him moan, bucking his hips in perfect harmony with mine.\n\nWe rise and fall.\n\nRise and fall.\n\nMoving as one.\n\nGod only knows, we've fucked in the past. We've fucked like horny schoolboys behind dumpsters. We've ripped into each other like rock stars. We've fucked like champions. Hell, we've fucked like the Gods themselves. But this time it's different...\n\nThis time, it's love. \n\nI feel his pleasure mounting, clenching. Mine's rising too. The energy is swirling around the room and I'm staring deep into his eyes, when I see pleasure hit. It hits me at precisely the same second, and I swear, it feels as if our chests have been cracked open, and just for a second, our souls leave our bodies.\n\nWe collapse together, arms and legs intertwined, my seed leaking from the depths of his body. I rest my head on his shoulder as we hold onto each other, unmoving. Still. Time seems altered and it's hard to say if it was minutes, or hours. When we finally rouse, my body is drained, exhausted, and my eyes are wet.\n\n\"I better get going.\" He says at last. \"I've got to see Liza.\"\n\nI nod, understanding. This can't be easy for him. He loved her for a very long time. Still, my heart lurches a little when he leaves. I feel fragile, almost bereft. Afraid to be without him, now that I can finally call him my own.\n\n*\n\nI was surprised when I heard him at the door.\n\nHe wasn't gone long.\n\nI go to meet him. Nerves clenching in my chest, despite everything that happened earlier. I find him in the living room, dropping his phone and keys on the counter, his eyes dark and troubled.\n\n\"Are you okay?\" I ask.\n\n\"Yeah,\" he starts, \"I mean, I think...\" He looks up at me, his face ashen. My heart rises to my throat, clenching so tightly, I think I might faint.\n\nNo, I think, surely, not this.\n\n\"What happened?\" I ask, undisguised fear in my voice.\n\n\"I'm so sorry, Ollie.\" He says at last. My heart is pounding, my eyes stinging suddenly.\n\n\"What happened?\" I ask again, my voice quivering in dread.\n\nHe sits down carefully on the sofa and explains it to me. He got to her house, and could tell right away that she knew why he was there. She invited him in without a hug or a kiss, just sat him down and waited expectantly. He told her that he couldn't give her the life she wanted, the life she deserved.\n\n\"She actually thanked me, Ollie.\" He said, feeling wretched, \"Can you believe that? She thanked me for not wasting any more of her time.\"\n\nThen, he hugged her good-bye and asked if they could be friends. She replied with a tight sigh, \"We can try.\"\n\nAs he turned to leave, she called him back. \"Ethan,\" she said, \"just tell me one thing.\" He was facing her, when she added, \"Is it Oliver?\"\n\n\"I'm so sorry, Ollie.\" He says, sounding a little frantic. \"I...I think I outed us both.\"\n\nI look at him in shock.\n\nWhat?\n\n\"I'm sorry.\" He says again, clamping his hand over his mouth remorsefully.\n\n\"I get it,\" I say at last, when the dust settles a little, \"you just couldn't lie to her again.\"\n\nHe's quiet for a while. \"That's not even it though.\" He says, looking at me. \"It was you, Ollie. All you.\"\n\nHe reaches for me, pulling me close to him, \"I just couldn't deny you.\" He whispers into my ear, \"Never again.\"\n\nMy heart surges, laughter rising up from my belly. \"I don't care.\" I say breathlessly.\n\n\"I should have spoken you first. I'm so sorry.\"\n\n\"Look at me,\" I say emphatically, straightening him out, making him face me, \"I don't give a shit who knows, and I care even less what anyone thinks about it.\"\n\n*\n\nThe next morning, I wake up before him. We must have slept in, as mid-morning light is flooding his room. His arm is slung over my chest, his face turned toward me. The gold-brown of his skin, a striking contrast to his snowy bed linen. I study his face. His eyes are closed gently. His lips parted ever so slightly. He looks so peaceful, he almost looks sweet.\n\nThough I'm almost sure that it's okay for me to look at him like this now, a little part of me still quakes, when I see his eyes flutter open. But this time, this time there's no pillow shoved over my face. No embarrassment. This time, there's just slow recognition. Or is it relief, when he sees that I'm in his bed?\n\nHe combs his fingers carefully through the hair on my chest. His morning voice is deep and a little gruff, as he offers, \"Coffee?\"\n\nI sit up in his bed, waiting, thinking. Everything that happened yesterday seems so astonishing. It happened so fast. My feelings this morning are so radically different to the way I've woken up every other day these past couple of months, I feel more than a little disoriented.",
        "Can this be real? \n\nHow will this work? Are we out now? Do we need to tell people, or just wait for the rumors to spread through our circles? And how will things work between us? \n\nHe comes back into the room, still naked, with a steaming coffee mug in each hand.\n\n\"What are you so deep in thought about?\" He asks, as he sets my coffee down on the side table and sits down on the bed beside me.\n\n\"Hmm,\" I say, with a smile, \"I guess I was just thinking about what it's going to be like to shoulder the full weight of the emotional load in this relationship.\"\n\nHe smiles back at me curiously, \"What makes you think it will all be on you?\"\n\nI chortle a little, \"Well, you've got to admit, you haven't shown yourself to be a stellar communicator.\"\n\n\"Actually,\" he says matter-of-factly, \"I'll have you know, I'm pretty damned good at that stuff.\"\n\nI hoot. That's a good one.\n\n\"It's just,\" he explains, \"I felt like such a shit for what I was doing to Liza, I guess I convinced myself that that made it better somehow. You know, doing the physical stuff with you, but keeping the emotional stuff for her?\"\n\nHe looks at me, apologetically, \"I know it probably didn't make it the slightest bit better for her, or for you.\"\n\nHe sighs, \"God knows I tried to stop it. This thing with you. I just couldn't stay away.\"\n\nI nod. I understand. Heaven knows, I tried to stop it too.\n\n\"I've never felt anything like this.\" He says gravely, his words sending a warm current up my spine.\n\n\"So,\" I tease, \"are you trying to say you're not going to tell me to 'shut up' anymore?\"\n\n\"Nah,\" he says wickedly, his eye's dancing mischievously, \"I'm going to tell you to 'shut the fuck up'.\"\n\nHe smiles as he looks down at me, raising his hand to my face, tenderly sweeping my hair off my forehead and running his fingers lightly along my jaw.\n\n\"It's just that now, right after I do, I'm going to hold you and tell you that you can talk to me about anything. Anytime.\"\n\nHis expression is so open, so honest, my head spins. I feel ever so slightly dizzy.\n\nDid I just swoon? Am I swooning now? \n\n\"But,\" I add, feeling bolstered by his mushiness, \"you bloody well aren't going to call me a pussy, or a little bitch again, are you?\"\n\n\"Well?\" He says, drawing out the word and raising an eyebrow cheekily.\n\n\"Don't you fucking dare, Ethan! I mean it.\"\n\n\"Okay, okay,\" He laughs, and then adds seriously, \"but Ollie, what about this?\"\n\nHis voice deepens and his eyes darken slightly. \"What if I have you?\"\n\nI know that look.\n\n\"What if you're naked and on your knees?\" I feel the blood begin to drain from my head.\n\n\"What if I've spread your legs and my tongue's been inside you?\"\n\nHe leans forward, murmuring into my ear, \"What if you're moaning and I'm holding you down?\"\n\nI try not to gulp, as he leaps to his feet, holding his hands out, biting his bottom lip, thrusting his hips forward, pretending to hump.\n\n\"What if my dick's deep inside you and I'm breeding your ass?\"\n\n\"Hmm,\" I say, stiffening more, and trying hard not to smile, \"been watching gay porn, huh, Ethan?\"\n\n\"That,\" he says, pointing a finger at me emphatically, \"is entirely beside the point.\"\n\nI stifle a giggle. I can see he's enjoying himself immensely, as he continues, \"What if I'm fucking you so hard, you're screaming?\"\n\nHe looks down at me with a devilish grin, \"What about then? Huh?\"\n\nHe's showing off and I confess, I'm enjoying this conversation more than a little, too. Not only that, but the fact that I know he's showing off for me, is making me feel giddy. I eye him up and down, his naked body, his handsome face, his dick at attention, as he continues to act out the scene.\n\n\"What about if I have you like that?\" He says, darkly, his voice low and ominous, \"And then, I call you my little bitch?\"\n\n\"Well, Ethan,\" I say with a little cough, \"that is some very powerful imagery.\"\n\nThe mood in the room has shifted considerably. I'm starting to feel quite distracted. \"I mean,\" I start, \"I guess...\"\n\n\"You guess?!\" He exclaims, \"Oliver, really! Isn't this one of those pivotal moments that really require certainty?\"\n\nI try not to roll my eyes at him.\n\n\"I...\" I try again, but the slight tilt of his head, the taut tension in his belly are blurring not only my vision, but my ability to speak, too.\n\n\"I'm serious, Ollie. I need to know,\" he says quietly, \"I got this really wrong in the past and it made you walk out of my life, and I'm telling you, it damned nearly killed me.\"\n\n\"Okay...\" I say, my voice sounding vague.\n\n\"Tell you what,\" he says seriously, \"why don't we try it, and then you can tell me for sure.\"\n\nI look up at him. His hard body primed, ready. I feel the familiar little quiver, that tremor. That reckless mix of fear and excitement.\n\n\"N...Now?\" I squeak.\n\nHe doesn't answer. He just rips the sheet off me and drags me up and over the edge of the bed with astonishing strength. I swallow hard, as I quickly familiarize myself with my position -- naked, bent, ass up. Just for him.\n\nHe's not messing around. He gets the lube and works it into me quickly. I groan from a particularly heady blend of surprise and gratification.\n\nI turn to look back at him. \"Go easy,\" I say softly, \"it's been a while.\"\n\n\"Easy?\" He snarls, his eyes are wild and his teeth are snapping at my shoulder. \"Easy like you went on me yesterday?\"\n\nI gulp, as I remember how hard I fucked him. Apprehension floods my belly, as his fingers inundate my anus.\n\nOh fuck, I think feverishly, I forgot how hard he makes it for me.\n\nIt isn't long before he has his dick aimed at my hole, I struggle a little, but he has his hands on my back, holding me down and I can tell from the way that he's breathing, he's no longer Ethan. He's an animal now, driven by nothing but instinct.\n\nAnd his instinct is telling him, \"Thrust!\"\n\nAnd he does.\n\nMy God! What a feeling.\n\n \n\nI shout harshly, as he penetrates me. Truth be told, my voice sounds more than a little animalistic, too. I feel hot and potent. The sudden fullness, stretching me to my limit and quite possibly beyond. The sharp, quick pain of it, so powerful it makes me see stars.\n\nHe doesn't give me long to adjust, his need is too great. He's moving inside me. Fucking me raw. Long, deep strokes. Punishing. Hurting me better than ever before.\n\nI'm frantic, completely wild. The pressure so intense, I can feel it in my face. He keeps going, relentless. All I can do is hold still and take it, and take it, and take it.\n\nAt last, I'm shaking and I think that I'm moaning. I can't be too sure though, as the sounds I'm making are merging together, distinct moans and groans finally giving way to a long, unending scream.\n\nHe pulls my hair back, his hand tight around my throat, gasping for breath, as he rasps, \"You're my little bitch.\"\n\nI come instantly, with a force that has mass. He's not far behind me, injecting searing hot load after load of his seed deep inside me.\n\n*\n\nAnd that, is how we both come to realise, when he has me like that, he can call me whatever he likes.\n\nAs long as he calls me his.\n\n*\n\nWe lie back on the bed, him on his back, me on my side, my head nestled into his shoulder. His chest is still heaving and I can hear his heart galloping wildly. He runs his hand up and down my back, the gentle touch mingled with the orgasmic electricity still cursing through my veins, making me shudder.\n\nIs there any hedonistic pleasure greater that this? Is anything more decadent than lying in the strong arms of the man you love, in broad daylight, your body still trembling, the hot remnant of his sex soothing your tender ass, as it trickles out from between your cheeks?\n\nIf there is, I assure you, I don't know what it is.\n\nHe takes my hand in his, holding it up, examining it closely, before pressing my fingertips to his lips and kissing them softly.\n\n\"Baby,\" he says, when he finally speaks, \"can I tell you what scares me?\"\n\n\"'Course.\" I say, looking up at him, as he meets my eyes.\n\n\"When it comes to you,\" he says with a sigh, \"I already know, forever won't be enough.\"\n\n*\n\nEpilogue\n\n*\n\nI roll over, opening my eyes slowly, taking in the crisp white walls and white ceilings. Relief washes over me, as I realise I've woken in our bed. Yes, that's right. Our bed. Like much of our relationship, moving in was something that was largely unspoken. He simply put me to bed early one night, just a few weeks after we got together, telling me I needed my sleep, as we had an early start.\n\n\"What's happening tomorrow?\" I asked.\n\n\"You'll see, Irish.\"\n\nI woke up to find a u-haul truck in the drive, confused, I asked what was happening.\n\n\"We're going to pick up your stuff.\" He said, as if it should be obvious.\n\n\"Why?\" I asked dumbly.\n\n\"Because,\" he explained patiently, \"you live with me now.\"\n\n*\n\nThat was about six months ago, since then, every day has been better than the last, and last night was no exception. We finally got around to going to the Cock House. I told him about going there alone and how desperately I wanted to be there with him, and since he's in the business of making me happy, last night was our night.\n\nI sigh happily, as I replay the scene. We were on the dance floor, hands all over each other. He was dancing with me, but far from his goofy dance moves, last night, he was moving. Hips against mine, grinding, eyes blazing. A picture.\n\nHe seemed to be glowing, as the intermittent dance lights bounced off his face. I can honestly say, he's never looked better, and God knows, when it comes to Ethan, that's saying something. He moved with me, running his hands up my neck, pulling me towards him. No furtive looking around now, as he kissed me with all that he had.\n\nWhen he finally broke away, his lips were so close to my ear that I could feel his warm breath on my neck. \"Holy shit, Oliver,\" he murmured, \"I am so gay for you.\"\n\nA hot, heady feeling rose in my chest, expanding my rib cage, making my heart swell. This feeling, I know. This feeling, I'd recognize anywhere.\n\nPride\n\n \n\n*\n\n \n\nThe end\n\n*\n\nIf you're still here -- thank you for reading. Please feel free to leave a comment or send me a message if you have any feedback. I love reading your thoughts.\n\nIf you enjoyed this story, and want more, follow me, so you don't miss out on Bent Backwards, which will tell the story from Ethan's perspective. \n\nAnd, thanks to the Anon who planted the seed for the sequel in my dirty little mind. \n\n \n\n \n"
    ],
    "authorname": "herdirtymind",
    "tags": [
        "anal",
        "gay drama",
        "gay romance",
        "love story",
        "rough sex"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/bent-ch-09"
}
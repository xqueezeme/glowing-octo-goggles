{
    "title": "Write Incest like a Mother Fucker",
    "pages": [
        "Author's Note; Welcome to my 100th submission to Literotica and my first in the How To category. Fair warning, this piece does not conform to the format of a 'true' how to, but is more like me conversing with you, the reader. Unconventional for this category, but I've always done things the way I want to, rather than the way I'm 'supposed to'. So this essay is simply some thoughts, observations and pointers to help write a successful story in the incest genre. One more note, this essay is dedicated to a fellow author and Author's hangout member. I don't have to name them, they know who they are. Enjoy, Lovecraft68\n\n*****\n\nIncest; a category that despite its controversial subject matter and legions of dedicated trolls is still far and away the most popular category on Literotica. If you are motivated by votes, comments, and moving up the favorite author list, Incest is the category that will ensure a huge response. If done properly.\n\nWhat do I mean by properly? Because of its 'squicky' nature and association with jokes about rural south trailer parks there are many who denigrate the category saying the readership and authors are unintelligent and...trash. \n\nIt should be noted that many of these same people enjoy rape stories and tales of mythical creatures having sex with humans. A strange code of ethics some people have. Take a deep breath and say it with me. \"Your kink is okay, my kink is okay, her kink...\"\n\nThat stereotype is also unfounded. The reason many incest reader's comments seem semi literate to the eternally snarky is incest is a worldwide fetish and many readers are English as a second language. \n\nYet these individuals make the effort to reach out and comment to the best of their ability. So truth be told it's easy to see the ignorance lies on the other side, not 'our side'\n\nMany of the readers I have corresponded with are well educated and professional and because of that there is an even bigger thrill from something they are not \"supposed\" to read which is why so many readers are anonymous in incest. Dirty little secrets are more fun when they're secret.\n\nBut due to that 'lowbrow' reputation many authors seem to think that simply replacing \"Gina's tits\" with \"Mommy's tits\" has now created a quality incest story. After all, just give the people their 'family fucking' and you have yourself a hit, right? Wrong. \n\nMake no mistake, even a mediocre incest tale will get more attention than stories in many other categories, but there is a far cry from the two hundred or so votes and a dozen comments a stroke incest tale can receive- to go along with a score in the high three's to low 4 range- and a story that can go well over a thousand votes with dozens of comments and a much higher score.\n\nLiterotica is a free site. We authors are paid in votes, comments, favs and feedback, don't you want to get the biggest paycheck possible? Well if you do, then the trick is to realize incest is more than sis blowing you instead of Gina doing it. In my time here I have garnered a large following of readers and have enjoyed many successful stories in the incest genre. \n\nBut that's now. Like everyone else I started from scratch here with no fan base and writing what I hoped were stories people would like. As I have continued to write and experiment I have learned many do's and do not's of Incest. \n\nA lot of the insight I have gained has come from corresponding with the readers and paying attention to what they say. So the first pointer I'd like to give is one that extends to every category; listen to your readers. \n\nNot the trolls who tell you you're sick (because they are mad they just jacked off to your story) or to the \"Oh, my God, you're just the best ever\" because that is equally bogus and not useful at all. Trust me, you only wrote the best story ever until the next story they read. But in between there is good constructive feedback we can learn from.\n\nHaving said that; I have stated many times my stories are my babies and done my way. I hope for people to enjoy, but if they don't...it is not the end of my world. I care about sharing my vision and at times it is a popular one at times its not, but it's always mine. I mention this because there is a difference between hitting some sweet spots and selling out. \n\nOne of the great things about lit is you can either write to appeal to the masses or create your own style and they will find you. The latter is the case for me as I have written the same type of story from day one and as time has passed more and more readers have been drawn to it.\n\nTo date I have obtained a nice balance of writing what I want, but appealing to a large readership and so can you. \n\nThe tips I am about to give appeal, like everything else, to a certain faction of incest, not the entire genre. That faction, if not the biggest, is the most active when it comes to rewarding you, the author.\n\nWhy? Because you made the effort to tell a 'real' story and create characters they grow attached to and become passionate about. So passionate they are compelled to comment.\n\nA well developed tale inspires people to think and tell you what they think. But a stroke story? Those are one handed reads and as soon as the reader Jacks or Jills off, they are done. Sometimes they get off before the end and will click off without voting. \n\nSo the things I am going to touch on are based on getting the reader to react to more than the sex and want to tell you about it. These little tricks and devices have given me great results and if you follow them you will have a much better chance of getting what we strive for here the; vaunted Red H and a full 'recent activity' page.\n\nBefore I go further-and since I am 'talking to the readers'- I am going to take a moment to answer the three questions I have been asked most in my four years of writing taboo tales here. Okay, they are questions two through four. Question number one still remains \"When are you going to fuck off and die, you sick prick?\" \n\nThe answer to that is only the good die young, so please, mister anonymous, don't get your hopes up. This writer of sinfully salacious sexy sister seductions and marvelous mommies mounting mischievous mama's...boys. (Yeah, I know, I ran out of M words. What do you want for free?) isn't going anywhere.\n\nFirst question: Do I write my stories from experience? \n\nNo. I know the sexy response is to wax nostalgic on all the adventures I shared with my mom, but in reality, unless 'what the hell is the matter with you?' was mom speak for \"Hey baby, hop on.\" There was no interest on her part. For me? I do admit to wanting to touch my mother inappropriately, but realized matricide is a crime. \n\nI was however, many years ago, involved in what could best be described as a 'pseudo incestuous' relationship and hence my love of taboo erotica. \n\nSecond question and most frequently asked, okay sometimes asked. Alright, one reader who later admitted they were drunk and requested to have their e-mail retracted asked \"Why do you enjoy writing incest stories?\"\n\nThe answer to that question is the challenge. \n\nLiterotica has many categories, but if you remove Sci-fi/fantasy, Nonhuman and Erotic Horror-categories that by nature suspend reality- all other categories are fetishes and situations that can happen. \n\nBut incest? Incest, as we all know, is in reality, a disturbing situation and I believe both the authors here as well as the readers are aware of that and it's not what we are looking for. What are we looking for? We want incest Literotica style; Eighteen plus, fun, consensual sexy and romantic pairings between family members.\n\nNow, how to justify it? First let me point out there are two types of stories here in any category. Stroke, which are stories designed to be one handed reads and others that make an effort to have some substance with their stroke. \n\nThere is an audience for both here, but stroke has it easy. When reading for masturbation, do you really care why mom decided to give her son a blow job, or why a formerly prudish sister bends over and begs her brother to fuck her? Nope, just go for the ride. \n\nNow a story that is meant to be more than that? It's not an easy task to take such an implausible scenario and make the reader say, \"I could see that happening.\" For me, that's the fun of writing these stories; to take something not only farfetched, but about the only thing our society still frowns upon, and have it seem real.\n\nIn every erotic story there is a moment where reality does take a back seat to porn absurdity, but it doesn't have to start that way and if an author can lay the ground work of believable characters in a unique situation that absurdity can blend in with the story itself and become rational. So I find writing these stories a difficult, yet rewarding, writing exercise. \n\nThe last question is one I have been asked by both experienced authors as well as newcomers is why do I feel my incest stories do well and how could they get theirs to be well received. Those e-mails are what inspired me to write this piece.\n\nThere's more than one answer to that question, one of which being to simply keep at it. The more stories you have the larger your readership becomes and the more positive votes you get. But you still have to gain those readers and the key is to write a certain way and be consistent with it to find more readers who share your vision of the genre. \n\nI have built a reputation for writing long, detailed stories that focus on far more than just fucking, but the things that lead to that crossing of the line between siblings or parents and their adult offspring. On that note, it's time to get to the real point of this essay and that's the keys to writing a successful incest story on literotica.\n\nI am going to preface the rest of this by repeating that on lit there is an audience for everything and there is no flat out right and wrong style of story to write. But what I have seen from both my own stories and others in the category leads me to believe that when trying to achieve the best possible score and get that recent activity page lit up like a Christmas tree, there are things that work far better than others.\n\nLet's go back for moment to my comment about the misconception that incest readers are less intelligent or discerning than those of other categories. Unlike most genre's, authors do not write incest through experience, but more from fantasy. Yes, there are those that will go on and on about what they did with their family growing up and perhaps they did, but for the most part incest is a fantasy rather than 'deed' kink.\n\nBecause of that it adds to the challenge to write a convincing story as there is not a lot to base it on. If you've had group sex, you can write it, bi-sexual, BDSM...all things people can write from real events, but incest...not so much. The risk in those categories is obvious; if you've never done it and can't \"fake it\" you get caught with your pants down.\n\nSo there are authors here who feel they can easily put it past the 'less than' incest crowd and make a token effort and expect accolades for it. Sorry, but, no. Like any other genre the incest readership knows what it wants.\n\nTaking a simple everyday porn premise and sticking in the buzz words of mom, sis, or daddy is not enough to create a truly memorable incest tale. Like all categories the incest readers know when the author is sincere or being disingenuous and simply posting copy paste efforts; throwing as much 'family' wordage in as possible because they are looking for some quick strike attention and votes.\n\nWhat do I mean by that? Quite simply put those stories have no heart and believe it or not what drives a successful incest story is emotion. A son just fucking his mother is okay for some, but what the readers really crave is a four letter word. No not fuck, not even lust, but...love. \n\nDespite the bad reputation the category has and its inherently disturbing nature, the incest crowd is a soft fun loving bunch. They are romantics at heart; it's just a strange kind of romance. But that doesn't mean a story where little sister says \"I love you\" after her four brothers gang bang her, achieves that, again...you need to mean it and make them feel you mean it.\n\nSo let's walk through the steps to accomplishing your incestuous masterpiece and then we will address the all important detail of \"Incest romance\" Now the following can apply to any incest 'pairing', but as it progresses my examples are going to lean more towards mother son as it's the biggest sub category within incest, but again it's all plug and play with any story, you want to write.\n\nFirst, your title. This will sound like a no brainer, but sometimes obvious things are what we miss. Whatever the 'pairing' is, make use of it in your title and your tag line. Mother/son stories should have mom in the title. \n\nMother works, mommy works, but I feel Mom is the best term to use, but that's subjective, the use of it should not be. The readers are browsing a list of stories and you need to tell them, \"Hey, here is what you want.\"\n\nI learned this right off the bat. My first mother/son story here was called \"Weekends with Laura\" the score on it is fairly good, but the votes and comments way below the norm. Why? Because who the hell is Laura? Why is Laura in incest? The reader would assume if it's in the category that she would have to be a mom or sis, but why make them think and chance them wandering away?\n\nNow fortunately for me, it was not a total loss as my tag line read \"Kevin loves older women, especially his mother\" so if they got past the title they saw what I was writing about. So putting your buzz word in a title is big if you want to get your story clicked on.\n\nAs for your tag line; like any other story, a description, but also the \"other half\" of your taboo coupling. I missed that in my example \"Kevin\" who is good old Kev? The son...but again, call it out! People don't search by names they search by \"mom, son, dad\" \n\nAlso important in the tag line is a nice hook, a tease, a little flair.\n\nTitle \"Mom will do anything.\" Tag line \"Desperate mother agrees to a porn shoot...with her son!\" read that out loud with the pause and in a shocked tone, \"With her son!\" Yes, cheesy, but this is the thrill they are looking for, so don't roll your eyes, just go for it.\n\nAnother thing to keep in mind is if your story is not straight up mother/son and you are going to introduce another kink, make sure your title and tag calls it out. \n\nThe reason is twofold. You want to draw people who also like that kink and may give your story a look because of it, but more importantly if that kink turns someone off you would rather them be forewarned and not read it than give you a bomb.\n\nTitle \"Mom is bound to Please\" Tag line \"Anna's bondage fantasies are fulfilled, by her son.\" Note that bondage is called out in title and description and \"By her son\", again the shocking taboo disclaimer.\n\nTitles can be \"stroky\" or \"serious\" and I don' think either will affect a reader clicking. However there is a fine line. \"Mom loves to Suck\" is pretty \"porno\" but in a fun way and it could still be a \"story\" now \"Gangbanging my mother's ass\" is going cause people who enjoy the aforementioned \"Love\" to give an eye roll and wander off. \n\nNow that we have our catchy and to the point title and tag, let's get to some of the things incest readers enjoy or do not enjoy.\n\nThe number one no-no in incest is non consent. No added element to an incest story will get you flamed as much as non consent will. Why? My personal theory is we all know real life incest is molestation, abuse and rape because it's generally done to under age children and by older relatives. Incest readers know that and they are defensive of the category because that's what the \"real world\" associates their kink with. \n\nSo when it shows up here, they get upset. Incest readers want their family encounters to be a consensual, fluffy, clean dirty fun; a good time had by all and of course...romantic. Happily Ever After rules in incest as much as romance. \n\nRough sex is something that's frowned upon, even consensually. This was taught to me by how small the readership was for my Siblings with Benefits series which featured rough sex and hardcore BDSM. \n\nThe series did well score wise, but while stories like \"Oh, sis fuck me\" were getting 300 votes, SWB was getting 75. This was driven home by a comment that to this day makes me laugh \"Good sir that is no way for a loving brother to treat his beautiful big sister!\"\n\nNow that comment is funny, but informative. Look at his wording \"loving brother, beautiful sister\" that's what the readership wants! \n\nThey want happy sweet couplings, they can be raunchy and dirty, mom/sis can act and talk like porn stars, but there has to be that emotion behind it to give them the best of both worlds and it also adds that \"consent\" and safe feeling that these stories are not the abuse of true incest. \n\nDepressing storylines are also not as well received (see author LaRascasse for well written but depressing examples) All of my mother son stories range from the high 4.6's into the 4.8's except for one which lingers around 4.5.\n\nThat story \"Mama's Boy\" was lower voted because the storyline features an abusive alcoholic who mistreats his wife and son. So although I stress write what you wish, be aware these stories will not see top numbers.\n\nThe next 'dislikes' I am going to give are subjective, because again, there is something for everyone. So these ideas are not ones that will necessarily get you flamed, but are only for a certain faction and the point of this is taking the sweet spots over the some like it some don't.\n\nFamily orgy incest. Not everyone is into this and it takes the already implausible and throws it into absurdity. Having the entire family hopping on comes across as pure stroke. Although an entire family can love each other they are not going to 'fall in love' with each other. \n\nSo the romance ticket is out the door with your plausibility, the taboo is gone because if the whole family is doing it, who cares? And that means there is no conflict and no threat of being caught and punished. Will some love it, of course, but a lot of readers will pass it by.\n\nInvolving others: Another 'faction' aspect. The people who are into the type of story I am discussing are protective of the taboo love affair going on between the family members. \n\nThis is a lot stronger instinct in brother/sister. They don't want sis having any cock but their brothers and the other way around. It ruins the fantasy 'loving relationship' come on people, we all know it's wrong to cheat on your sister!\n\nIt is worth noting that in mom/son many are fine with dad still being in the mix with mom to add an element of sneaking around and conflict and guilt that mom is sleeping with both(note, not talking about the strokers; they want both doing her at once, I know cause...well I wrote one. \n\nHangs head in shame) But seeing dad is dad and he was there first its okay...now have mom have a boyfriend she is tagging when not with her son...prepare to be bombed. \n\nWhen it comes to daddy/daughter the rule of thumb is stories where the daughter is the aggressor are better received than the father seducing the daughter. The reasoning for this is a dubious double standard. \n\nMom seducing son? Just fine, just a hot cougar who happens to be related to her cub. But dad after the daughter comes with some rape connotations even if the author is writing full consent. It may not get you trolled, but it will score a bit lower than daughter being hot for daddy.\n\nNow for the \"Do's\" First and foremost dialogue. What are we reading for in this category? It's not to hear, \"Oh, Susan, please...\" its \"Oh, mom, please...\" make use of your buzz words in your dialogue and your narrative.",
        "Work the incest angle, use mom, sis, daddy, little brother, big brother and use them as often as you can, but do not beat them like a dead horse. If you have three mom's in a sentence odds are you're abusing the angle.\n\nI know this sounds contradictory to my point of 'you can't just paste in the word sis and have a good story' but if you write the rest of your story in the manner we are discussing it will be fine, because there will be much more involved than just those words.\n\nWhat will be involved to add heat to just another cookie cutter story of hey, look sis is sucking her brother's dick? The answer is the second most important key ingredient to a popular incest story; conflict. \n\nIncest is a taboo, it is a line we are told we should never cross. When two members of a family commit incest, they are tasting the forbidden fruit. That angle is one never focused on in many stories. If siblings are fucking one thousand words into a story you're doing it wrong because we are not talking stroke here. \n\nThe crossing of that line should not be jumped into; the reader should be led into it through the eyes of the character. Let's use the example of a son desiring his mother. How did he come about desiring her? What event led him from seeing his mom as the woman who raised him to a sexual woman he now lusts after? \n\nThat event could be the finding of some racy pictures or videos of his mother, somehow seeing her perform a sexual act, her becoming drunk and perhaps saying or doing some slightly inappropriate things, something just off color enough to get the son thinking in ways he shouldn't. \n\nA popular device in these stories is dad out of the picture and the son becoming the man of the house. Mom is lonely, sad, the son thinks she should be happy, somewhere the wires cross and he decides he should be the man to take care of his mom in every way, after all, who could love a woman more than her son? \n\nNow that last line? That is a score. That is the type of thought, or dialogue from a son that grabs the reader, that makes them nod and say, \"Oh, yes!\" \n\nFlip it around? Who better to take care of a young man than his loving mother? What other woman could be so good to him?\n\nOnce you have decided upon the event that gets the ball rolling we are now ready for some realism in the form of guilt. When you write about Tommy watching mom bending over and he's checking out her ass, don't just leave it at him thinking \"nice ass\" or getting a hard on. Put some turmoil in there, this is his mom! Tommy should be thinking, \"Nice ass? What's wrong with me, this is my mother!\"\n\nThere should be some resistance to the attraction, a hesitation and concern over his feelings. Have him jerk off to his mother then lay there ashamed of himself for seeing his mother in such a dirty way. \n\nHave him make an effort to stop seeing her that way. He tries, but he can't! When Tommy sees mom, he's like a dieter looking at a double cheeseburger. You know it's not right, know you can't have it, but oh, how you want to taste it!\n\nThis builds the heat; each conflicted thought whets the reader's appetite for what's to come. They know he is going to get mom because this is incest, but they don't need to know when or how. So tease them along and have them hot and horny long before the main event occurs. \n\nNow we're ready for Tommy to take a bite of that cheeseburger...but wait! There's more! We can't have Tommy just say, \"Mom, I want you and \"Oh, Tommy I've been waiting!\" we have to do some more teasing in the form of some...conversation. \n\nIt's confession time. Whether mom catches Tommy with some mother son porn, checking her out, talking in his sleep, copping a feel... get them to be looking eye to eye and Tommy owning up to his feelings. Have him admit it-and again, conflict- he is embarrassed and ashamed of his feelings, so some blushing, stuttering, a good old, \"Mom, I'm so sorry\" \n\nMom says, \"What the hell is wrong with you?\" Oh, wait, sorry, that was my mom again.\n\nSo mom...from here it's your call. Has mom known all along and has been waiting for him to make the first move? Is she appalled at first? If she is that's when Tommy starts laying it on thick, \"Mom, you're so beautiful and I love you and...and I know I shouldn't be thinking like this, but I want to see you happy and I know I can make you happy in every way.\"\n\nAs an aside the above would make a good hallmark card for Mother's day...just saying.\n\nSo now mom...okay, look, at some point in even the most well done realistic tale we need to admit we are writing erotica and some good old fashioned Bum chika wa wa seventies porn music kicks in and we delve into porn absurdity because of course mom is going to give in.\n\nShe could give in because she's wanted it, she can try the \"I'll let him start and when he sees it wrong he'll quit and realize...oh, I like this or anything you want. But again, build it, let them talk it out, let them experience Tommy's emotions.\n\nHe's scared at first, ashamed, then hopeful. Mom hasn't kicked him in the balls or dialed 911 and threatened to take him to a shrink, she's listening, she's...talking, she's...does she want it to?\n\nOf course she does or there wouldn't be a story so there should be no suspense, but there is because you have done such a masterful job the reader is hanging on every word and squirming the entire time because they know they are so close to our hero breaking the ice with mommy dearest. \n\nNow when we start, we start slow...kissing. Kissing is so important here. Whether , it's Tommy and mommy or daddy and his little girl, that first kiss, a lover's kiss to a family member needs to be focused on.\n\nTentative at first, nervous, this isn't right, but...oh, her lips and that tongue, a soft whimper and the slow awkward kiss that you work into a deep passionate filled make out session. Take your time with this; it gets the reader ready to blow before you've even gotten anyone naked.\n\nTouching. During this kiss the hands need to wander, through their hair, down their backs, maybe a grope...but again slowly. We want a slow burn before we turn it into an all out wildfire. Keep playing the nerves, trembling fingers, pounding hearts, conflicting emotions, \"I can't, we can't, oh, the hell we can't!\"\n\nThe reader is getting ready to pop, but you're not letting them just yet, but this is a good tease because they, like your characters, are so close! Why? Because you my friend, have got them worked into a frenzy of anticipation.\n\nUndressing...No ripping off of clothing, slow and sensual. During your deep kiss and slow touching, that touching leads to pants being unsnapped, hands slid into them, skirts being lifted, blouses unbuttoned. \n\nNow when mom steps back and starts stripping, or Tommy removes her bra (pop quiz, how does he do it? If you answered with trembling fingers you were correct, if you answered he couldn't get it undone because guys suck at that, you answered honestly!)\n\nBut when mom's breasts are exposed, this is a big moment so make use of it. Tommy is seeing his mother's breasts for first time and you need to describe his amazement and his lust.\n\nAll the above this is where your buzzwords come back into play as well as reminding the reader that all this is a big no-no! When mom takes her bra off, let Tommy be \"transfixed by the sight of my mother's breasts\" \"A feeling of the surreal came over me, was my mother really here in front of me, on her knees and ready to give her son a blow job?\"\n\nMost of all, and it is worth repeating, let Tommy be overwhelmed at how sexy his mother really is, the reader will be doing it right along with him because you have turned that reader into Tommy. For the duration of the story this is what he has desired, struggled over, and is finally about to receive...his mother! \n\nWhen the sexual acts have begun-and I am not going to give a blow by blow -yup, meant to say that-of those acts. We all know how to write sex scenes so the only thing I will stress is keeping that dream like feeling to the scene, the \"I can't believe this is happening\" sense of wonder.\n\nAs for 'who rides who at the end of the race' In sibling stories I feel it works just as well either way to have one sibling be the more experienced lover, or the less nervous more enthusiastic one. \n\nFor father/daughter pairings, as discussed the little princess should initiate, but once she does dad taking over or daughter remaining the surprising little sex kitten can go either way, because of the nature of that pairing.\n\nFor mother son, which is what I have focused on in my story example, the mom should be in control. Why is that? Because what this becomes in a sense is a milf acting as a cougar with her cub. Mom is an older sexually experienced woman, who many times in these tales is alone and pent up. A son is not going to overwhelm his mother sexually, nor would he try. \n\nRemember this little realistic detail mixed with our fantasy porn: He is her son. As much as he has lusted for her, this is mom and he is conditioned to obey-and most importantly-respect mom. \n\nFor me, it works best that mom takes the lead and her son happily defers to the fact she is not just mom, but a more experienced lover. Also in our romantic angle, what does he want? To make mom happy, so he is simply pleased to please her. \n\nA parent would be inclined to guide their child. Mom knows he is nervous and wants him to enjoy and be pleased with and by her and will know that better time-for the first time-will come from her experience as a lover as well as the tenderness of a mother (another Hallmark moment in the works there)\n\nNow when I say control I am not speaking of anything dominant and submissive, but simply along the lines of, \"Okay, baby, now you just sit back and let your mother enjoy her son's beautiful cock\"\n\nThis is where you can either have mom be a somewhat sweet lover and a nice slow sensual encounter or now that she is in a no turning back situation turn into a candidate for the milf hunter web site. For me, I go with mom getting down and dirty.\n\nWe have teased the reader long enough and it's time to turn this thing up to eleven. Dirty talk combined with your buzzwords are a powerful combination, \"How's mommy look sucking your cock?\" \"Oh, look at you, licking your mother's pussy.\" Remember, mom is now in the heat of the moment and has needed a good hard fucking for a long time.\n\nEven if mom has been portrayed as prudish or sweet, she has succumbed to the biggest taboo there is, lusting for her son, so turning 'slutty' is not far stretch compared to that fact, in a sense she is caught up in a dirty act that brings out that bad girl side, simply put, mom is sex drunk (is that real term...I don't know, but I have been there and the hangover can be even better) if you still struggle with that, refer to \"Ba chika wa wa\" and know we are giving the reader what they want.\n\nWhy? Oh I will tell you...because even the people who eat up the romance want the dirty fucking. Best of both worlds, a hot as hell fuck with the most loving woman a son could find!\n\nNot to mention that slow burn you have put them through now being taken into a hardcore scene causes one hell of a release for the reader, makes it worth the wait.\n\nAs they move around the world (use a lot of positions, Tommy should see his mother from every angle) continue with the taboo wording, \"I inhaled and moaned softly at the forbidden scent of my mother's pussy.\" \n\nOr \"Mom spread her legs and I licked my lips at the sight of mom's...pussy, I was staring at my mother's pussy!\" Lust, disbelief and a reminder 'this shit ain't right!'\n\nLike dialogue, these thoughts and feelings should be exploited as much as you feel you can get away with it while not getting redundant. Another plot device that has worked well for me is tossing in some humor. Not just some of the bad one liners I use during the story in dialogue, but something during the sex, that's funny, but family oriented.\n\n\"Hmm, this looks good,\" Mom paused, her lips parted, her breath hot on my straining cock. \"This all for me?\" she flicked her tongue lightly over my purple head and I whimpered,\n\n\"Please, don't tease, mom, please!\" \n\n\"Please? Wow, someone raised you right!\"\n\nOr\n\nMom looked down at the cum dripping down my cock and sighed, \"Even now, I still have to clean up after you\"\n\nOne more.\n\nHer tongue sliding along the length of my cock, mom gathered her hair and handed it to me to keep it out of her face. \"You can hold it, but don't pull on it. I am your mother after all\"\n\nLittle things like that add a fun dimension to the encounter because end of the day sex should be about fun and it shows how comfortable our new incestuous couple is. Mom is not just having sex with her son, but it's playful!\n\nI am going to briefly mention the end to the scene, the \"money shot\". Now mom can continue her porn star audition and take a load to the face, her tits, all over her back. Or it could be inside, but you don't want to do that yet and we will soon get to why. \n\nNow that mom and son have consummated their forbidden desire and established they are most likely going to hell, but are going to enjoy the ride. Seriously, because it's time for a little...\"Oh, my God did we really just do that! No real regret, but a moment of holy shit!\n\nBut from holy shit it's time to mix in that all important main ingredient for our oedipal (or other coupling) cocktail; Love, baby, nothing but love for ya!\n\nTommy was not only lusting after mom, but also wanting to love her and during the build up and sex we did not include just fucking and sucking, but kissing and touching and that, \"She felt so good in his arms\" description.\n\nTommy now knows what it's like to have her as a woman sexually, but now the smoke has cleared and our shocked, but satisfied, couple is going to go to sleep, but not before they profess their love and desire to build that love, to not let this be a onetime thing, but to enjoy each other and take care of each other in every way! Pardon me while I wipe my eyes. \n\nSo the end? Not if you're smart my taboo Jedi, because...well mom and son, bro/sis dad/daughter have not made love yet! The ultimate conclusion to our HEA fantasy is a nice sweet lovemaking scene-better to leave this one fairly short compared to a long detailed fuck scene. Nice and easy and romantic, does the trick here.\n\nTommy awakes and his initial thought is, 'was that a dream?' Hell no, because his face smells like mom's pussy and...Mom is right there in his/her bed with him! This is where you focus on just how good mom feels in that oft mentioned \"every way\"\n\nLet him focus on his mother lying in his embrace, her face on his chest, breasts pressed against his side, her long soft leg draped over his. His hand is on her back, and he can feel her slow deep breaths, her hair is in his face and she looks so peaceful, so satisfied, Tommy pulled her closer to him and feels a wave of emotion come over him as he holds his mother as a lover, not a son...\n\nOkay, hold on, have to adjust something...okay, the fonts are changed. What did you perverts think I was doing? \n\nBut that example is what the readership craves, they eat it up. Mom and son, Brother and sister, daddy and his little girl, not just in lust, but falling into a taboo love, breaking the rules of God and man and loving the one person in the world they are told they shouldn't love in that way. \n\nStories that end with our sinful couple covered in sweat, still breathing hard from their passion, professing their love and how even though it was wrong nothing has ever felt so right. \n\nBack to the star of our show, Tommy is getting a little misty, but something else is waking up too, because he starts thinking of mom's moist pussy pressing into his leg and those hard nipples against him. Mom stirs and looks up at him. They share a long deep kiss and Mom's hand strays between his legs. Tommy's ready (because no one in porn ever has to pee or can't get it up)\n\nFrom here, I enjoy mom rolling over on top of him, but moving slowly and sensually not riding like a cowboy like she did previously. Her arms slip beneath his and they kiss as she remains on top. \n\nTommy rolls them over and they make slow sweet love. But not so sweet that we are not using \"Mom sighed contentedly as she wrapped her legs around me, pulling me deeper into her taboo embrace\"\n\nThis is where Tommy, who is feeling his mother's heart as much as her body, continues to make love to his mother until he comes deep inside of her. This is why the 'dirty scene' ends in a nice cumshot somewhere, because we saved the best for last. \n\nYes facials are fun and dirty, but the ultimate thrill, the best way to finish a story is with Son/brother/Dad filling his partner with his cum(I will die before I use essence... you know who you are...:)) And do make sure that mom/sis/daughter moan and whimper at how good it feels to have that forbidden fluid filling them. \n\nEnd with them still wrapped in each other's embrace and promising the reader this is how they will remain and...you have yourself the makings of successful incest story. \n\nI hope you found this essay informative and if you want some proof as to the success of these stories look at the works of Alwayswwantedtoo, TX Tall tales and although he is not prolific, no author has ever penned better sibling romance than Paco Fear and his iconic stories Words on Skin, Stolen kisses and Macallan Promises. \n\nA look at my own page here will also show you the style I have developed in this category has gained proven results. More so, although this essay focused on incest all the points I made-except the buzzwords-can be used in any genre. \n\nMy stories in other categories are mostly written along the same lines of conflict, emotion and a nice slow burn before the characters reach the climactic encounter we ultimately read erotica for. \n\nMany readers across the board enjoy a good story and 'real' characters and if you give them that, they will reward you where it counts; votes, comments and most importantly selecting you as a \"favorite author\".\n\nI want to take a moment to thank the readership of Litertoica. When I came here four years ago I was unsure if people would enjoy my style.\n\nEven during the dark and somewhat infamous Siblings with Benefits series, people seemed drawn to my different concepts and visions and once I finished SWB and began experimenting in other categories and getting deeper into the incest genre, more and more people e-mailed me, encouraging my work and asking for more.\n\nThat encouragement has kept me writing and recently helped see me through some dark times in life. Last month I reached 4000 favorites, a number I would have never thought possible back in May 2010 when I released \"Almost Perfect\" (which was far from perfect).\n\nSo to close this out I want to say thank you to my longtime readers and new fans alike, as well as the authors who encouraged and advised me. Your support has kept me writing. So thank you my friends; your past and continued support is deeply appreciated. *****\n\nAuthor's note: The holidays are quickly approaching so just a quick note to wish everyone a happy and safe holiday season. I am planning big things for 2015 and hope you will continue to follow my work. Lovecraft68"
    ],
    "authorname": "lovecraft68",
    "tags": [
        "how to",
        "essay",
        "incest",
        "taboo erotica",
        "writing incest",
        "incest manual"
    ],
    "category": "How To",
    "url": "https://www.literotica.com/s/write-incest-like-a-mother-fucker"
}
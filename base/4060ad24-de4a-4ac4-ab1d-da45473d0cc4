{
    "title": "Teddy Bear",
    "pages": [
        "Teddy Bear showed up one day, unexpected, a week before Christmas, in a big green and red wrapped box on Eleanor's porch.\n\nThe box was huge -- at least five feet high. Eleanor looked all around. There was no sign of the person, whoever he was, who had dropped off the box. Eleanor looked up and down the street and it was empty both ways.\n\nShe dragged the box into her small, bungalow-style house, the wrapping screeching across her wood floor.\n\nThere were no markings on the box. Just a red bow. She couldn't fathom who would send her a gift in a giant box, or why anybody would do so.\n\nShe pulled the big box into the kitchen, and she pulled a knife out of a drawer. She cut the box open, and in a minute the cardboard lay on the floor and there he was: Teddy Bear.\n\nHe was a giant, stuffed toy bear, brown and downy soft, with wide black eyes and round ears. He was two-thirds her size. A heart-shaped furry patch, of a slightly different shade of brown, lay over his breast. He was one of the cutest things Eleanor had ever seen. A small envelope was attached to a string that encircled his neck. Eleanor opened the envelope.\n\nA small card inside the envelope said this: \"I am your Teddy Bear. I love you and I will make you happy. Touch my heart and I will talk to you.\"\n\nEleanor teared up, just a little. Her eyes watered.\n\nShe wondered who had sent her such a nice gift. She couldn't imagine who it was. She couldn't imagine her boyfriend, Lyle, sending her a gift like this. He wasn't an especially thoughtful boyfriend, and he hadn't given her any gifts in a long time. Lately, Eleanor had been asking herself why she was even dating Lyle. But she was 31, and good men seemed to be in short supply, and while she wasn't sure, exactly, if Lyle was a particularly good man, he wasn't particularly bad, either, and that was enough to keep the relationship going, for the time being.\n\nThe doorbell rang. Eleanor left Teddy Bear in the kitchen and went to the front door.\n\nIt was Celia, a neighbor and a friend. She often stopped by, unexpectedly. Celia's love life was even more troubled than Eleanor's, and unlike Eleanor, who preferred to keep her troubles secret, Celia wanted to share everything.\n\n\"Hi, Eleanor,\" Celia said, waving. \"Do you have a minute?\"\n\n\"Sure,\" Eleanor said. \"Come in.\"\n\nCelia started chattering about problems with her love life as soon as she entered the door, but she stopped when the two of them entered the kitchen and she saw Teddy Bear.\n\n\"Oh my God, he's ADORABLE,\" Celia said. \"Who sent him?\"\n\n\"I have no idea,\" Eleanor said. \"He showed up on my doorstep today.\"\n\n\"Do you think Lyle sent him?\" Celia asked.\n\n\"I don't know,\" Eleanor said. \"It doesn't seem like something he would do.\"\n\n\"Yeah, you're right about that.\"\n\nEleanor nodded glumly. The tone in Celia's voice told her what she thought of Lyle.\n\n\"What's this?\" Celia asked, stretching her finger out to the heart-shaped patch on the bear and pressing against it.\n\nA deep voice rumbled out from the depths of the stuffed bear.\n\n\"I'm Teddy Bear,\" the voice said. \"I want to be your friend.\"\n\n\"Oh my God, that's sweet!\" Celia said.\n\n\"It is,\" Eleanor agreed. It WAS sweet, and a kind gift. But she couldn't figure out who had sent it to her. She was perplexed.\n\nCelia spent the next 15 minutes complaining to Eleanor about her asshole boyfriend and her fucked-up love life. Eleanor responded with understanding and empathy. But in the back of her mind, she was thinking: why am I still dating Lyle? He's not much better than the jerk Celia is dating.\n\nCelia left, eventually, and Eleanor walked back to the kitchen. She felt dejected. She didn't want to be alone, but the truth was, Lyle wasn't doing much to make her happy. He was good-looking. That much was true. He was the kind of guy you wanted to show off at an office party. But he was self-centered. There was something missing. There was a button that Eleanor needed pushing, and he wasn't pushing it.\n\nShe stared at Teddy Bear, propped up against a kitchen cabinet.\n\nShe pushed her hand against his heart.\n\nThe deep voice rumbled in response.\n\n\"I'm Teddy Bear, and I want to fuck you.\"\n\nEleanor screamed and backed up, almost stumbling, mouth agape.\n\nThe Bear sat silent on the kitchen floor. Eleanor stood with her hands clutching the tile counter.\n\nShe wondered if she'd misheard it. After all, it couldn't really have said what she thought it said, could it? She wondered if this was a weird practical joke. But who would do such a thing? She could not think of anyone. Lyle might yank her chain once in a while, but he'd never put in the effort to pull off something like this. It wasn't his nature to make any effort where a relationship was concerned.\n\nEleanor pushed away from the counter and approached Teddy Bear, slowly, tentatively.\n\nShe pushed her fingers against his heart again.\n\n\"I'm Teddy Bear, and I know you want it,\" the deep voice rumbled. \"Touch me between the legs and I'll show you what I'll give you.\"\n\nEleanor jumped back, again, at the sound of the voice and its words. She wondered if she was going crazy.\n\nThe situation was crazy, even if she wasn't. She could not understand what was going on.\n\nShe crept back toward Teddy Bear, on tiptoes, thinking any sound or vibration might set off more bizarre words. How was it possible for a toy bear to act this way? It occurred to her that maybe Lyle had sent Teddy Bear, after all, as a practical joke. But it seemed like it would have taken more creativity and work -- and maybe money -- than she would expect out of Lyle.\n\nShe drew close to Teddy Bear and poked him.\n\nHis fur was unbelievably plush, thick, and soft. Eleanor ran her hand over his belly. He felt right. Her hand drifted down, tentatively, between Teddy Bear's legs. She pushed, slightly.\n\nThen she felt a bulge from inside the toy bear, and her hand flew back.\n\nThe fur parted, between his legs, and . . .\n\nAnd . . .\n\nEleanor couldn't believe what she saw.\n\nA thick shaft, in the form of a penis, with almost life-like skin, all in cinnamon, emerged from between the bear's legs. Eleanor gasped. It kept growing and growing until finally it stopped. At its fullest extension, Eleanor wasn't sure how long it was. She'd have to get a tape measure to find out. Seven inches? Eight inches? It was certainly longer than any penis that had been inside her -- not that there had been that many. It was much thicker and longer than Lyle's organ, for sure.\n\nShe didn't know what to do.\n\nShe couldn't leave a toy bear with a huge erect toy cock lying around her kitchen. She couldn't imagine how she would explain that to anyone who visited. She would have to move Teddy Bear to another part of her house. Her bedroom closet seemed like the best choice.\n\nShe approached Teddy Bear cautiously, tentatively, slowly.\n\nEleanor looked all around her, wondering if someone was about to spring from an unseen corner to laugh and pronounce the whole thing a practical joke. But there was no one. The kitchen was silent.\n\nShe drew closer to Teddy Bear, and his big cinnamon cock looked bigger and bigger as she approached it.\n\nShe extended her outstretched finger toward it, and she gingerly touched its tip.\n\nA tiny dollop of what looked like white cream emerged from a little hole at its apex.\n\nEleanor wondered if she was going crazy. How could a toy bear's penis have pre-cum?\n\n\"This isn't possible,\" she said out loud to herself.\n\nBut there it was. It might be crazy, but she couldn't deny what she was seeing.\n\nWith a full open hand, she lightly slapped the bear dick. It wobbled back and forth. And then that big deep voice came rumbling from inside the bear's ample body.\n\n\"Suck it,\" the voice said.\n\n\"Oh!\" Eleanor cried with a start. She ran from the kitchen. She paced back and forth in her bedroom. This couldn't really be happening.\n\nAfter five minutes Eleanor tip-toed back to the kitchen. Teddy Bear sat on floor. His . . . dick was nowhere in sight; Eleanor was relieved to see. He sat there, still and quiet, and undeniably adorable. Eleanor crept to his side and put her hand over Teddy Bear's head. The fur was as soft as anything she'd every touched. No noise emanated from the Bear now.\n\nNow, where would she put him? She couldn't keep him in the kitchen.\n\nWith effort she wrapped her arms most of the way around Teddy Bear's waist and carried him to her bedroom. She set him gently in her bed. That seemed like the right place. He would be out of the way. And she could almost swear he looked happy there.\n\nThe doorbell rang again. She figured Celia had returned to ask her something. But when she went to the door, it was Lyle, standing on the poor with a lopsided grin. He wasn't the best boyfriend in the world, but he did know how to look adorable from time to time.\n\n\"Hi babe,\" he said, stepping forward and kissing her on the check.\n\nShe let him in the house.\n\n\"Are we having dinner at Paul and Kathy's house tonight?\" she asked him.\n\n\"Sorry, El, can't do it. Playing poker with the boys, and dinner and beers. Rain check? Tomorrow?\"\n\nEleanor was disappointed.\n\n\"Can't do it tomorrow. Tomorrow is the office holiday party. I have to be there.\"\n\n\"Too bad. Well, you'll be OK.\"\n\n\"We haven't had dinner out in a couple of weeks.\"\n\n\"I know,\" he said and shrugged. \"I'll make it up to you.\"\n\nHe had said that before.\n\nHer eyes widened, remembering.\n\n\"Lyle! I have to show you something!\" she said, but she had misgivings as soon as the words came out of her mouth.\n\n\"What?\"\n\n\"Come here, I'll show you.\"\n\nLyle followed her to her bedroom. There, on the bed covers, sat Teddy Bear, upright, staring back at them, as cute as could be.\n\n\"You bought a stuffed animal? That thing is huge.\"\n\n\"It's not a thing,\" she said. \"It's Teddy Bear. Isn't he adorable? And I didn't buy him. He showed up in a giant box at the door.\"\n\n\"At the door? You mean, a present? From who?\"\n\n\"I don't know,\" she said, biting her lip. She didn't want Lyle to be jealous. \"There was no return address or signature anywhere.\"\n\n\"That's weird. Maybe somebody at the office has a crush on you.\" He knitted his brow. Darn, he was jealous.\n\n\"I doubt it,\" Eleanor said. \"Probably one of my girlfriends, surprising me. But isn't he just the most adorable thing?\"\n\nLyle looked at the bear carefully, warily. He walked around the bed and scanned the bear from different angles.\n\n\"I don't know, he kind of gives me the creeps. Seems like he's giving me the stink-eye.\"\n\n\"Teddy Bear? That's not possible.\"\n\nTo Eleanor, the Bear was so cute and friendly looking that she had almost forgotten his behavior before. She wasn't going to tell Lyle about THAT.\n\nEleanor was surprised at Lyle's reaction. The Bear only radiated warmth and charm -- an almost magnetic appeal -- toward her. But as she turned away, toward Lyle, she thought for a split second that she saw something else -- like an angry glint in the Bear's eye, cast toward Lyle.\n\nIt had to be her imagination.\n\n\"Well, gotta go, babe,\" Lyle said. \"Game's soon.\"\n\nEleanor saw Lyle to the door, and he left. She remained alone in the house, with no plans. She sighed. She spent the rest of the evening reading a book -- a half finished erotic novel her friend Siri had loaned her. It got her in the mood, a little, but there wasn't much to do with her mood other than pleasure herself, and she didn't want to do that. She cooked chicken and broccoli for herself and ate it in front of the TV. She drank a big glass of pinot noir. After two hours of watching a British detective show and cleaning up the kitchen she finally went to bed.\n\nTeddy Bear sat there, cute, welcoming, and oh so furry. Eleanor quickly brushed her teeth and dressed for bed. Usually, she wore a long ratty cotton t-shirt and panties, but tonight for no good reason she skipped the panties. She slipped into bed, pulled back the covers, and nestled in next to Teddy Bear. He felt unbelievably soft against her back. He said nothing this time, and she wondered again if what she recalled had just been in her head. She melted into his plush fur, and soon she fell fast asleep.\n\nEleanor woke with the morning light coming through the blinds. She felt refreshed. She had slept like a baby but recalled having had the most vivid and . . . well . . . sexy dreams she'd ever had. She'd been ravished, repeatedly, by an unseen lover with a huge cock.\n\nSpeaking of which . . .\n\nEleanor felt something between her legs. Teddy Bear lay still pressed tightly against her backside, under the covers with her, practically spooning her.\n\nShe threw the covers back and looked down, between her thighs.\n\nNestled between her legs was Teddy Bear's big cinnamon cock. Its length stretched perfectly along the furrow of her bare, pink pussy, and its head was pressed against her clitoris.\n\nShe reached down. My God, she was damp.\n\nA low growly sound rumbled out slowly from the Bear's depths behind her.\n\n\"I'm Teddy Bear and I'm going to fuck you now.\"\n\nIt wasn't a dream. It was real. The Bear's cock pressed against her, and the Bear said it wanted to fuck her.\n\nShe should jump out of bed and do something. What, she didn't know. But she couldn't just lie there.\n\nBut she did. She just lay there, bear cock firmly encased between her thighs, and his unbelievably plush fur behind her, caressing the skin of her bottom.\n\nShe wanted to feel the fur better. She reached down and without moving away from Teddy Bear pulled off her t-shirt. Now she lay fully naked in Teddy Bear's arms, and it felt wonderful. His fur warmed the entire length of her nude back. She pushed back against him, and she draped a big furry paw from behind over her until it flopped against her bare breast. Her nipple tingled.\n\nOooh, it felt good. She forgot about the weirdness of it all. Teddy Bear felt so good.\n\nShe wiggled her butt against his plush furry lap.\n\nThe cock between her legs vibrated, just slightly. She was sure of it. And it seemed to press forward. On its own.\n\nShe pressed back.\n\nThe sensation was heaven.\n\nShe began rocking her hips, and the cleft of her pussy rocked back and forth, against Teddy Bear's cock length.\n\nShe couldn't really, could she?\n\nA toy bear?\n\nShe couldn't but she did. She angled her body until the tip of the Bear cock was at her opening, and with one hand she used her fingers to spread her lips apart until the inside of her pussy lay pink and ready and available.\n\nShe watched, fascinated, aroused, and nervous, as the fat cinnamon toy Bear cock pressed forward, on its own, extending from somewhere in the depths of the Bear, and it pushed inside her.\n\nOh, that sensation.\n\nIt felt like a man's cock, except a little harder, and definitely bigger. It filled her and stretched her.\n\nSo good.\n\nTeddy Bear's big cock pistoned in and out of her, on its own, with no help or aid from her hands or body. She lay perfectly still and let the big, soft Bear with the big, hard cock fuck her.\n\nAnd, oh God, did it fuck her.\n\nOn and on it fucked her. She'd never felt anything like it.\n\nAt last, she couldn't stand holding still. She writhed back, pushing her ass hard into Teddy Bear's lap and savoring the feel of the big thick . . .. whatever it was made of . . . Bear cock filling her, over and over. Waves of pleasure coursed through her.\n\nShe lost track of time and then saw the clock. Teddy Bear had been fucking her for 20 minutes. Usually, it took a long time for Eleanor to achieve orgasm. She could feel it approaching, but she was not there and wanted to hold it back, just a little longer. She wanted something else.\n\nShe pulled her pussy, now drenched, off Teddy Bear's cock, and she lay back on the bed, stretching her legs wide to either side. She pulled Teddy Bear onto her. Although he was so big, he didn't weigh that much, and he felt good against her chest. His own chest mashed down against her breasts and in no time and with no effort his big Bear cock slipped back into her.\n\nEleanor felt depraved and wanton, but also loved and desired . . . by her Teddy Bear. He fucked her, missionary-style. She pushed back against Teddy Bear's torso just enough so she could watch the cinnamon shaft thrust in and out of her. Her wetness glistened on the shaft in the waxing morning light.\n\nHer body rocked and writhed under the steady, insistent thrusting of Teddy Bear's cock.\n\nAt last, she felt the swell. It started in her loins and swept over her core, and her limbs spasmed, almost uncontrollably. Her whole body shuddered as she let go and cried out.\n\n\"Oh God, yes! Fuck me Teddy Bear!\"\n\nAnd then . . .\n\nAnd then . . .\n\nMy God, she felt it -- the surge of wet warmth coming from Teddy Bear, filling her, as she'd never been filled before.\n\nWhat could it be?\n\nToy Bear Cum?\n\nWhat kind of Toy Bear had cum?\n\nBut, on the other hand, what kind of Toy Bear fucked you in your bed and made you writhe and make noise like an animal and made you orgasm?\n\nThis one did, apparently.\n\nShe dared not pull away from Teddy Bear yet, because she wanted to milk his big, thick tawny cock of every possible drop of his Bear cum. And she did. She lay still under Teddy Bear's soft paws until she felt the shaft inside her cease moving. She felt it subside and withdraw.\n\nShe pushed Teddy Bear over and to the side. He seemed to stare back at her with love and infinite gentleness.\n\nEleanor's own body was covered in a thin film of sweat, but Teddy Bear's fur, somehow, was perfectly dry. She saw his Bear Cock, smaller now, withdraw somewhere into the fur between his legs and disappear.\n\nThere was no way this could have happened, but it had.\n\nEleanor sat up and looked down, between her legs.\n\nA thick slurry of Toy Bear cream spilled out from her. Never had a man filled her with so much cum.\n\nShe dipped a finger, cautiously, down into the mess, which was puddling out over and staining the bed sheet. She put it to her nose. It smelled . . . sweet. She tasted it. It tasted sweet, too. It had the flavor of vanilla cake frosting, but it had a consistency exactly like man cum. Eleanor relished the taste. She scooped up more of it, faster and faster. She cupped one hand under her open hole and with the other dug out more cum with two fingers. She lapped up the cum. It was warm and delicious. She didn't eat all of it. Eleanor wanted to leave Teddy Bear's cum inside her and enjoy its pleasant warmth.\n\nMy God, I've been fucked by a toy bear, she thought.\n\nEleanor got up to take a shower. She would clean up the bed later.\n\nWithout even really thinking about it she carried Teddy Bear into the bathroom and sat him on the floor so he could watch her naked body through the glass shower. She wanted to watch him, too -- his handsome, luxurious coat of fur and his naughty, lusty expression.\n\nIt was crazy to think it, but she knew Teddy Bear liked watching her, and she liked being watched by him.\n\nWatched by her Teddy Bear.\n\n* * * * *\n\nEleanor had a busy day ahead of her. She made a breakfast of coffee and a muffin and sliced strawberries. Without thinking about it she'd placed Teddy Bear in the chair opposite her at the small table. It just seemed natural that she'd have breakfast with him.\n\nAfter breakfast, she dressed for work. She pulled a pleated skirt out of her drawer. It was the shortest skirt she ever wore to work -- on the edge of being too short to wear to an office. She puzzled for a moment about why she wanted to wear it, and then smiled. Teddy Bear would like to see her in it. She thought about putting on stockings, but it was an unusually warm day for December, so she decided to skip wearing them.\n\nIt wasn't until she'd reached her car door, later, that she realized she was carrying Teddy Bear, evidently with the intent to take him to work.\n\nShe paused and thought about that.",
        "\"Do you want to go to work with me, Teddy Bear?\" she asked.\n\n\"Yes, I do,\" he rumbled back.\n\nEleanor shook her head. She should have been more startled than she was at the sound of him continuing to talk, but she was growing accustomed to having a talking Teddy Bear.\n\nBut could she take him to work?\n\nWell, what if one of her co-workers had sent him? Or more than one? What if it was a practical joke? That might be embarrassing. If one or more of them HAD sent Teddy Bear to her, then they must have known about Teddy Bear's, errr, abilities.\n\nThat could be quite embarrassing.\n\nOr what if Teddy Bear said something embarrassing in front of someone in the office? Like her boss? That would be even more embarrassing, and risky for her job. Eleanor was good at her job and felt secure in it. But her boss, Jenkinson, though a good man, was old-fashioned. She was sure he would not take kindly to a toy bear that spouted obscenities. It wouldn't reflect well on her.\n\nShe almost left the Bear behind. But she just couldn't. She stuffed him in the backseat, and off she drove to work.\n\nIt wasn't easy getting him into her office. She had to carry Teddy Bear, along with her handbag, through various doors, up the elevator, eleven flights, and through the main foyer of the office. Glenda, the receptionist, called out, \"How cute!\" when she saw Eleanor walk by with her furry friend. Teddy Bear elicited smiles and puzzled looks alike from Eleanor's coworkers until she reached her office.\n\nFor every person she passed, she stared into their eyes, briefly, wondering if they had sent the bear as a practical joke. But no one gave themselves away.\n\n\"So, who's your new friend?\" She heard the question behind her as she settled Teddy Bear into a spare chair near her own, behind her desk, which faced the door.\n\nHer coworker and friend Patty stood in the doorway, pointing to Teddy Bear.\n\n\"This is Teddy Bear,\" Eleanor said. \"He showed up on my doorstep yesterday. I thought he was too cute to leave at home.\"\n\n\"I can see why!\" Patty said, striding into the room. She stroked the fur on his head.\n\n\"So soft!\" she exclaimed. \"Who sent him?\"\n\n\"I don't know,\" Eleanor said. \"There was no note. No return address.\"\n\n\"How odd!\" Patty said out loud, still stroking Teddy Bear's fur.\n\nEleanor thought Patty went on too long talking about Teddy Bear and stroking his fur. It annoyed her. A twinge of jealousy shook her body. She frowned, but Patty, busy petting the bear, did not notice.\n\nFinally, Patty left.\n\n\"Thank goodness,\" Eleanor said to herself. \"That woman can talk.\"\n\nShe closed her door, sat at her desk, and opened a manila folder labelled \"Andersen\" and began working on a project that was due to be completed in a couple of days. For a while, she forgot all about Teddy Bear. No one bothered her.\n\nBy mid-morning, however, she was distracted. She wasn't sure how it started, but it was becoming more and more difficult to concentrate on her work. She avoided looking at Teddy Bear. He sat behind her, out of sight, and she had a nagging feeling that she needed to keep him that way to get her work done.\n\nBut, finally, her resolve broke, and she turned around.\n\nEleanor gasped.\n\nTeddy Bear's big bear cock stood straight up from his lap. It almost seemed to Eleanor that his black eyes mocked her. That cock -- it looked bigger and shinier than ever. She remembered how good it had felt inside her. But she was at work now, in her office, surrounded in every direction by co-workers. It wouldn't do for someone to enter her office and see Teddy Bear in this condition.\n\nBut what could she do about it? She didn't have a pillow to cover him up. She could take him off the chair and put him in the corner and turn him around. Maybe she would do that.\n\nShe stood up from her desk and approached Teddy Bear. The tip of his big toy bear cock glistened. A white pearl of cum lay over its apex. None of this made any sense. It made no sense that a toy bear could have fresh cum on his cock, but there it was.\n\nEleanor crouched down, bringing her mouth close to Teddy Bear's erect cock. She couldn't do this. She shouldn't do this. But she did.\n\nHer tongue touched the bear's cock tip. Yumm. Mmmmm. It tasted so good. The sweet spice of vanilla.\n\nShe closed her lips over the toy bear cock, and she started sucking it. Sweet sugary toy semen entered her mouth and gave her pleasure. It made no sense at all, but the pleasure could not be denied, so she sucked Teddy Bear's cock as hard as she could.\n\nHer mouth moved furiously over the tall shaft and her cheeks collapsed inward as she sucked him. Her mouth moved and sucked to savor the cock of her Teddy Bear. It was the most exquisite pleasure to feel his organ in her mouth -- but she wanted to please him, too. She wanted to make her Teddy Bear happy. She wanted to give her toy bear a good blow job.\n\nSomewhere, in the dim recesses of her conscious mind, she knew that it was nuts to feel this way, and to act on this impulse in her office, with the obvious risk that her conduct posed. But she did it, anyway. And, oh! It felt so good. Her mouth pumped up and down on sweet Teddy Bear's hard cock. No cock had ever felt so good in her mouth.\n\nWithout warning, the thick rich syrup of Teddy Bear's cum erupted into her mouth. She almost gagged -- but she didn't, quite. She felt a responsibility to her Teddy Bear to take all of his cum and swallow it. She also didn't want to get it on the office carpet. She gulped down every drop, although it wasn't easy. The quantity of his cum was surprising. Eleanor had just a little experience with blow jobs, and, to be honest, they'd been a hit or miss experience. Some had been OK, and some had been not so good, involving cocks to which insufficient principles of hygiene had been observed, and cum that tasted . . . well . . . sour and nasty. On a few occasions she had swallowed with reluctance. On some others, she couldn't even do that much, and she had gagged and spit it up.\n\nBut it was not so with Teddy Bear. His cum was the sweetest and most delicious elixir, a nectar for a goddess. Eleanor felt like a goddess as she greedily slurped and swallowed every last drop of Teddy Bear's sweet cum into her mouth and into her belly. It warmed and sated her.\n\n\"Oh, fuck yes,\" she said out loud, in the privacy of her office.\n\nA knock sounded at the door.\n\nEleanor jumped what felt like three feet off the floor with fright.\n\nThe door opened. The face of her boss, Mr. Jenkinson, emerged from behind it.\n\n\"Eleanor!\" he said with a jovial tone. \"How are you?\"\n\nEleanor didn't know what to say. She feared Mr. Jenkinson would see Teddy Bear's erect cock, and that she might get fired, or at least need serious explaining.\n\nBut that didn't happen.\n\n\"Oh, who's this?\" Mr. Jenkinson asked.\n\nEleanor turned around. Teddy Bear sat in his chair, as plush and cute as ever, but the hard emergent cock was gone. It had withdrawn and disappeared under the fur.\n\nEleanor stammered a reply.\n\n\"Oh,\" she said. \"It's just a gift from an old friend. I . . . um . . . brought him to the office for fun.\"\n\n\"Well, that's nice,\" Jenkinson responded. \"Say, how's that Anderson project going?\"\n\nEleanor tried to steady her nerves before responding. She didn't want her boss to think she was agitated. It took her a moment.\n\n\"Excellent!\" she replied, trying to keep her voice from quavering. \"I'll have it done this week.\"\n\n\"Glad to hear it,\" Jenkinson said. \"You've done splendid work here, Eleanor. Keep it up!\"\n\nHe turned to go, but then turned back to her. He pointed to Eleanor's face and then to his own, putting his finger to the side of his lip. With his other hand, he pointed to the coffee mug on her desk.\n\n\"By the way, looks like you've got a little cappuccino cream, I think, on your face.\"\n\nEleanor's body shook with embarrassment.\n\n\"Thanks for letting me know.\"\n\nShe wiped it off. When Jenkinson turned again to leave, she licked the cream off her hand. It was Teddy Bear's cream, but she couldn't possibly let Jenkinson know that.\n\nWhen Jenkinson left and closed the door behind him, Eleanor's body slumped. She couldn't do that again -- not in the office. She had taken far too great a risk.\n\nEleanor composed herself, and she looked again at Teddy Bear. He sat quietly in his chair. His dark eyes had lost their glossy sheen. They were dull and lifeless.\n\nEleanor got back to work, and the hours passed quickly. She took short breaks for lunch and an afternoon snack, but otherwise she worked non-stop.\n\nThe sun set early In December, and the scene outsider Eleanor's office window grew dark at the same time she finished her projects. The office holiday party beckoned. Attendance was not optional.\n\nEleanor left her office to attend the party. It was in the big conference room. Everyone at the firm was there. Booze flowed. Inhibitions let loose. One of her co-workers, Todd, flirted with her ineffectually.\n\nBut Eleanor was distracted. She couldn't enjoy the party.\n\nShe kept thinking about Teddy Bear, back in her office.\n\nAfter doing a perfunctory tour of the party and sampling the punch and cheese balls, Eleanor ducked out of the party and left. She went back to her office.\n\nTeddy Bear sat in his chair, his dark eyes, shiny again, staring back at her, and his cinnamon cock stood hard and long above his fur, waiting for her. Eleanor stumbled as she entered her office, and she closed the door behind her. Her legs were shaky. Desire surged through her. She couldn't understand it, but she couldn't deny it.\n\nShe picked up Teddy Bear, and she moved him to her chair, behind her desk.\n\nEleanor knew what she needed. It didn't matter that she was at her place of employment and that her boss and co-workers were nearby. She needed Teddy Bear. She could not wait.\n\nShe reached up under her short skirt, found her panties, and pulled them down. They pooled at her feet. She kicked them under the desk.\n\nThen she sat down, on Teddy Bear.\n\nEleanor looked forward, at the door to her office, knowing that anyone could knock, or not knock, and come in, and see her, and she pressed her bottom against Teddy Bear. His cock contacted her pussy. Her pussy was wet, and it was open. The lips were peeled back. It was easy to push down and impale herself on Teddy Bear's cock. She pulled the skirt up so she could see her pussy lips as Teddy Bear's long thick toy bear cock entered her. She had never seen anything in her life more exquisite than that.\n\nAnd, oh! How good it felt. Teddy Bear filled her completely. She pushed down until his cock disappeared completely inside her. She had never felt so perfectly filled.\n\nThrough the closed door of her office, the sounds of music wafted through, from the holiday party. Eleanor knew she shouldn't be doing this. It was too risky. But she had to. She had to fuck her Teddy Bear.\n\nHe wanted her. And she wanted to fulfill his need.\n\nShe rose and fell on Teddy Bear's cock, and at the same time, she felt his cock push up inside her. It baffled her. She had no idea how a toy bear could do what Teddy Bear was doing. But he was doing it, and it was the greatest feeling imaginable.\n\nEleanor felt bold, and wanton. The holiday party was taking place not far away, just beyond her closed door, and she was fucking her toy bear. Her pussy was being plundered. He filled her and satisfied her.\n\nHis bear cock hit places in her pussy that no man's cock ever had. It drove her wild.\n\nShe lifted the hem of her skirt up so she could watch as the big bear dick plundered her pussy. She trimmed herself closely down there, so the view of their fucking lay unobscured.\n\nUp, down. In, out. Over and over again. An office girl and her toy bear.\n\nTeddy Bear filled Eleanor with inexplicable and unfathomable joy, and she pushed her bottom down hard and fast to give him joy, too. Eleanor knew that he felt it. She knew he wanted it.\n\nShe gave herself fully to her bear and his hard cock.\n\nWithout warning, a knock sounded at the door, and the door opened. Eleanor gasped and plopped herself all the way down onto Teddy Bear's lap and cock, until it lay buried to the hilt inside her. She dropped the hem of and scooted the chair forward as quickly as she could until her legs were under the kneehole of the desk.\n\nJenkinson's smiling, slightly flushed face appeared from behind the door as he walked into her office without asking.\n\n\"Eleanor!\" he boomed. \"What are you doing here? You're supposed to having fun at the party!\"\n\n\"Mr. Jenkinson!\" Eleanor, horrified at the intrusion and her predicament, could think of nothing to say, and stammered indecipherable words.\n\nJenkinson, again without asking, took a chair on the other side of her desk and sat down.\n\n\"Yes?\" Jenkinson said, eyes wide and glistening. She caught a whiff of alcohol off his breath.\n\nEleanor thought fast.\n\n\"I was at the party for a while, and I was having fun, but I had a sudden idea for this Anderson project, and I had to write it down.\" She pointed to the sheaf of papers that lay on the desktop.\n\nJenkinson nodded his head, and a boozy smile spread all over his face.\n\n\"Well, that's impressive. That's why you always get your jobs done. That's the way I was when I was your age.\"\n\nEleanor felt something: something that five minutes ago would have given her the most exquisite pleasure but now sent ripples of fear through her body. Teddy Bear's cock moved again inside her, in uneven strokes, altering the tempo and depth with which it fucked her.\n\n\"Ah!\" she cried. Her hands clutched the edge of the desk.\n\nShe couldn't orgasm in front of her boss. But Teddy Bear might make her do so.\n\n\"Are you OK? Jenkinson asked. \"You look a little flushed.\"\n\n\"Just a cocktail too many, Mr. Jenkinson. I'm feeling a bit off. I'll be OK.\"\n\nJenkinson got up from his chair and began to walk around the desk.\n\n\"I can help.\"\n\n\"No!\" Eleanor said, trying hard not to do so in a scream. \"I'm fine. I just need a moment to get this idea down, then I'll go home.\"\n\n\"OK,\" Jenkinson said. His brow knitted.\n\n\"Why is the bear on your chair?\"\n\nThe cock kept moving erratically inside her, at the worst time imaginable.\n\n\"I --\"\n\n\"Yes?\"\n\n\"My back hurt,\" she lied. \"I'm using him as a back rest.\"\n\n\"Ah,\" said Jenkinson. Eleanor felt glad he was drunk. \"Well, that's smart thinking. That's what I like about you, Eleanor: always resourceful and smart\"\n\n\"Th . . . thanks, Mr. Jenkinson.\"\n\n\"Well, I'll leave and let you get that project done.\"\n\nHe left and closed the door behind him.\n\nEleanor's head fell onto her arms on the desk. Teddy Bear kept pumping away inside her.\n\nShe couldn't do this. Not here. She pushed up from the desk and meant to extricate herself from the bear's enormous cock, but at first, she couldn't. Incredibly, Teddy Bear's soft paws were on her waste, and his grip was implausibly strong. She had to push a second time to escape his hold, and when she did so she fell to the floor, skirt flying up, legs askew and pointed at the walls. Her head hit the floor and she thought she might faint.\n\nShe looked at the ceiling and wondered if she were going insane.\n\nThen she got up on her elbows and looked at Teddy Bear. Her skirt was at her waist and her legs were spread wide and her body was bared to him. Baring herself to her bear. She let out a nervous giggle at her pun.\n\nTeddy Bear had shifted in the chair. He sat sideways in it, facing her directly. His cock lay hidden, and his intentions lay hidden behind his matte black eyes.\n\n\"Shit,\" said Eleanor.\n\nShe stood up from the floor.\n\n\"I need to get out of here.\" She pointed at her bear. \"And you are going with me, buster, and you are not coming back.\"\n\nShe wasn't sure, but she thought a low rumble came from Teddy Bear's chest.\n\n\"Cut that out,\" she said. \"You're going to get me in trouble.\"\n\nEleanor put her panties back on and picked up her handbag and Teddy Bear. She left the office as quickly and furtively as possible. She tried to ignore Teddy Bear, but she couldn't ignore the twitch of unfulfillment between her legs. She ignored it the best she could until she returned to the car and threw Teddy Bear in the backseat.\n\nHalfway home, the car stopped at a red light, she turned around.\n\nTeddy Bear sat upright. His eyes inscrutable.\n\nAt last, still flushed and sweaty, but with winter cold having flushed all the warmth from her skin, Eleanor arrived home and parked her car in the garage. She carried the little handbag and the big bear into the house.\n\nShe entered the kitchen, and she dropped the handbag on the counter and the bear on the floor.\n\n\"I think I really am going crazy,\" she said out loud.\n\nShe clopped over the floor on her pumps to the small liquor cabinet. Eleanor didn't drink much, but among her small collection was a bottle of bourbon, three-quarters full. She needed it. She poured three ounces into a lowball glass she pulled out of the dishwashing machine. She thought it was clean. She hoped it was. Regardless, she was going to drink bourbon.\n\nStaring defiantly at Teddy Bear, lying immobile on the floor, and she threw her head back and took all the bourbon in four, quick gulps. After staring at the ceiling for a full minute, musing at the strangeness of the last days and savoring the warmth of the liquor in her belly, she lowered her gaze to Teddy Bear.\n\nHe lay back, but his cock stood like a sentinel away from his furry body.\n\n\"We have to finish,\" rumbled that familiar deep voice from inside his plush, downy chest.\n\n\"We can't do this,\" Eleanor mumbled to herself. Her voice quavered.\n\nShe tried to say it with more conviction. \"We can't do this.\" But her voice quavered more.\n\nHer body shook.\n\n\"Oh, fuck it!\" she cried. She unzipped her skirt, unbuttoned her blouse, and stripped off her panties and bra and threw them into a pile on the ground.\n\nThen she walked across the kitchen in bare feet, squatted over Teddy Bear, and lowered her body with no delay on his thick upright bear shaft, and entered her once again.\n\nIf anything, the cock was bigger than before, and she felt filled and stretched even more than in the office 45 minutes earlier. It was a mystery, but everything about Teddy Bear was a mystery, and Eleanor had committed unconditionally to savoring the pleasure of his cock before she tried to answer the mystery.\n\nThe floor was hard and cold on her knees, but it didn't matter. So much joy and lust and ardor radiated from the tip of his big thrusting cock into her body that she felt nothing else. Warmth filled her body. She shook. She cried out to the kitchen walls.\n\n\"Fuck me!\"\n\n\"I am,\" Teddy Bear said in his deep growl. This time it didn't surprise her. She didn't care what he said or didn't say. She just wanted his cock.\n\nShe got it, over and over and over. It kept coming, a cinnamon, bearish jackhammer, drilling her and filling her. She pulled her body back to take in the view. It was brighter in the kitchen than it had been in her office, and now the union of her pussy and Teddy Bear's cock displayed itself in high--resolution, technicolor glory. She loved the contrast of her pale white and his rich cinnamon, and the way the thick tip of his cock mashed and spread her lips in every direction as it almost left her, but not quite. She'd lift herself off him, taking their connection to the brink, until she worried for just a half second it would fail, and that they would part, but it never did. Every time the bear tip would tickle her lips and then plunge confidently back into her. Both of them guided it: she by pushing up and down off him and he by the thrusts of his cock. It seemed to Eleanor that the cock lengthened and shortened with perfect timing to give her just the best possible fuck. The cock had inerrant skill in remaining inside her. No cock she had ever known rivaled it.",
        "\"Come for me,\" Teddy Bear said, his voice low but insistent.\n\n\"I will!\" And she knew it was true, because already it was coming true. The animal spirit rose from an unknown place inside her, and it took over. She was an animal woman, being fucked by her bear.\n\nTheir thrusts grew harder and faster.\n\nEleanor's body exploded with the greatest orgasm she had ever known. She spasmed so hard that her arms involuntarily straightened, and she pushed herself right off Teddy Bear's cock. She lost control of her limbs. Her body fell back.\n\nBut it did not fall back before Teddy Bear came, too, and he came in a great, riotous fountain of vanilla bear cum, spraying her and splattering her and washing her body in a torrent.\n\nShe brought one hand under enough control to spread it over her cum-covered body. She swept up a handful and she ate. Cum dropped her body, all over her, she bathed in the fulfilment of her need.\n\n\"Thank you, Teddy Bear, she said, gasping.\n\n\"You're welcome. I will fuck you anytime you want me to.\"\n\nIn that jism-stained moment on the kitchen floor, they were the best words she'd ever heard.\n\nEleanor felt drunk with pleasure. She was in a daze. She closed her eyes.\n\nSomewhere in the darkness, she heard the sound of keys opening a lock, and then the sound of a door opening.\n\nWhat was happening? She shook her head.\n\nFuck! She had once given Lyle her house key, but he'd never used it.\n\nShe tried to push herself off Teddy Bear, but she was woozy, and the floor was slippery with puddled toy bear cum.\n\nShe heard Lyle, sounding more cheerful than usual, his footsteps growing louder as he walked toward the kitchen. She slipped around but didn't get off her bear.\n\n\"Hey, babe, I thought I'd stop by after your party, and we could watch a movie on Netflix and . . . What the fuck, Eleanor!\"\n\nLyle stood just inside the kitchen door in a stylish brown winter jacket. His mouth gaped at her. Eleanor had to admit he looked kind of cute. She had been a bad girl, cheating on her boyfriend with a toy bear. But what could a girl do when she had Teddy Bear?\n\nShe looked into Lyle's face, and she could tell from his roving eyes that he could not grasp what he was seeing. Neither said anything for a moment, and in the silence, she heard the drip drip drip of cum falling from her body.\n\nShe reached a hand forward and grabbed Teddy Bear's cock, still as hard and long and upright and cinnamon as ever.\n\n\"I can explain,\" she said.\n\nTHE END."
    ],
    "authorname": "SimonDoom",
    "tags": [
        "teddy bear",
        "blow job",
        "cock",
        "office",
        "sex toys",
        "toys",
        "toy riding",
        "young woman"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/teddy-bear-5"
}
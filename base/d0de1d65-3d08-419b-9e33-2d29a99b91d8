{
    "title": "The Designer Ch. 10",
    "pages": [
        "Alyssa met me at the door of the restaurant, embracing me with a hug.\n\n\"It's your favorite, J,\" she smiled, \"breakfast served 24 hours a day, including bacon.\"\n\nI laughed and hugged her. Enjoying a close hug with just Alyssa. I was still pleasantly surprised how well we worked together to help Carmen. \n\n\"Where are the others?\" I asked.\n\n\"They went with the waitress to our table. I volunteered to wait for you,\" Alyssa explained, \"I wanted to ask you a question.\"\n\n\"Ask away,\" I smiled.\n\n\"I really enjoyed helping Carmen,\" Alyssa explained, \"I wanted to make sure you were okay with my help.\"\n\n\"Of course!\" I said, \"Aly, I would be lost in all this without you. Your theories of what I can do help me to understand it better. You know all this head shrinking stuff, I'm just a programmer. Logic I understand. Brains, especially female brains, get me confused.\"\n\n\"I think you know us better than you think,\" Alyssa said, rising up to kiss me on the lips.\n\nI kissed her back, but felt my stomach rumble.\n\n\"Let's go order.\" I said.\n\n\"Okay, but I think we should concentrate on Lexi next,\" Alyssa said, as she led me through the diner.\n\n\"Can't it wait until after dinner?\" I whined, a bit tired and drained.\n\n\"Dessert is for after dinner,\" Alyssa said with a wink, \"We need to make some progress before playtime, make some adjustments and see how Lexi is in the morning.\"\n\n\"She and Carmen are close friends,\" I mused, \"They usually go running on Saturdays according to Carmen's email, maybe they'll resume that routine in the morning.\"\n\n\"That's a good goal,\" Alyssa said conspiratorially as we arrived at the table.\n\nThe Carmen was sitting between Kelly and Alexis on one side of a round table. Alyssa sat next to Lexi, and I slipped into my seat between Alyssa and Kelly. I picked up the menu to look at it, and immediately felt two hands move up and down my thigh. One belonged to Kelly, and was a bit more aggressive than Alyssa's more comforting caresses. I must have shown a bit of concern, because Carmen started laughing.\n\n\"See J?\" Carmen teased, \"See what I've had to put up with for the last week.\"\n\nI smiled at her and noticed that Kelly's other hand wasn't on the table either, but spread out towards Carmen's lap. Lexi's hands were making similar motions with Carmen and Alyssa. \n\n\"Okay, this is a bit out of hand,\" I mumbled.\n\nI slid my hand under the table and held Kelly's hand, touching it gently. Then I concentrated my will on her sexual section, and pulled it up from the very low setting to a more normal healthy level. Kelly smiled at me, as she slid her hand into mine.\n\n\"I'm glad you're here, Jay,\" she said, then let go of my hand and used two hands to pick up the menu. \n\nI saw Carmen squirm a bit, and noticed Alyssa blush as she wriggled next to me. I reached across Alyssa's lap, and touched Lexi's hand. I adjusted her sexual graph as I pulled her hand from between Alyssa's lega. She lifted her head up and smiled up at me.\n\n\"I'm glad to be here with all four of you lovely ladies,\" I said as I looked at each of my partners. \n\nWith their libidos reset to a more normal range we all read through our menus without disturbance. It would be interesting to see what they ordered. If Alyssa was right about the girls, they'd order sweet and fatty items, seeking the easy, tasty treat. Sure enough, Kelly and Lexi ordered sugary pancakes and waffles, while Alyssa ordered a salad, and Carmen ordered a burger. I ordered steak and eggs, with a side of bacon. I caught Alyssa's eyes as I ordered the bacon, and winked at her. She blushed and just shook her head.\n\nWhile we were waiting for our orders to arrive, Alyssa started to question Lexi. I listened carefully, while I scanned across Lexi's moral profile.\n\n\"So, Alexis,\" Alyssa started, \"What did you do in high school?\"\n\n\"Oh, please, call me Lexi,\" Alexis replied, \"It's odd for my friends to use my full name. I ran cross-country and track, mostly longer distances. I loved mathematics and science classes too.\"\n\n\"I'm a big science nerd,\" Alyssa confessed, \"but I'm no runner. How much do you run?\"\n\n\"I usually run about 20-25 miles a week,\" Lexi stated, \"seven or eight miles every other day. This last week I've hardly ran. I've, uh, been busy with other activities.\"\n\nLexi blushed as she raised her eyes to Kelly and Carmen, who only returned their own bashful smiles. She caught my eye as well, and her dazzling smile made me smile in return.\n\n\"Well, you probably deserved the rest,\" Alyssa comforted, \"I can't imagine running a mile, let alone seven!\"\n\n\"I need to get back at it,\" Lexi confessed, \"Carmen told me to bring my running gear, so maybe we can go for a run in the morning Carmen?\"\n\n\"I'd love to Lexi,\" Carmen said, \"I need to burn off some excess energy.\"\n\n\"Lexi's going to try to walk onto the college cross-country team in the fall,\" Carmen bragged to Alyssa.\n\n\"That's a great goal,\" Alyssa said.\n\nI noticed where the activity along Lexi's moral profile was happening. I felt Alyssa squeeze my thigh. Understanding without words, I modified Lexi's running section. Our experiments had a few questions focused on physical fitness, and I remembered roughly the way the more athletic subjects moral profiles were shaped. I pushed hard from across the table, but the moral shape was only changing slowly. I reached my hand out to Alexis.\n\n\"I hope you make the team,\" I said, \"I used to love cross-country in high school.\"\n\n\"Actually your school has a great cross-country team,\" Lexi offered taking my hand, \"I've considered before looking to transfer to be a part of a better team.\"\n\nI pushed and her walls responded much easier with our physical touch. She smiled at me while I made the adjustment, almost faithfully accepting that I was fixing her waning dedication to her sport.\n\n\"Really,\" I asked, \"you'd transfer to my school?\"\n\n\"Seems I have a good reason to,\" Lexi flirted, then smiled at Alyssa, \"Now that I have friends there.\"\n\nI was a bit uncertain about having Lexi so close, but I was also enjoyed toying with the idea. She was a fun person to be around. I'd only known the Lexi I had modified, but Carmen's emails showed her to be a good honest and loyal friend.\n\n\"Well as an ambassador for our school,\" I spoke playfully, \"and for the good of our cross-country team, I encourage you to transfer.\"\n\n\"I'd like that too,\" Alyssa said brightly, which took me a bit by surprise.\n\nCarmen looked across at me, \"You know, your school has great connections to the dance studios in Portland.\"\n\n\"Oh, that's right,\" Alyssa parried, \"You are a dance major, what type of dance are you interested in?\"\n\n\"Modern mostly,\" Carmen started, \"Though I love all types, from ballet to hip-hop, I love to be on the stage.\"\n\n\"Yeah, I can see that!\" I laughed.\n\nKelly slid over next to me, and slid her hand into mine. I accepted her hand, and looked over at her. She looked up at me her blue eyes a bit saddened and brimmed with tears.\n\n\"What's the matter, Kelly?\" I asked.\n\n\"It's sounding like you are stealing my best friends,\" Kelly stammered, \"After I have started to love them so much.\"\n\nShe bent her head, and started to sob. Carmen looked at me shocked, it was the first time any of us had seen either of the girls show anything more than happiness. I scanned her moral curve, and saw a section bustling with activity. It was near the relationship section which, for Kelly had grown a bit since my first adjustment. She must have developed strong feelings for both Lexi and Carmen. I could understand why she felt sad about the talk of moving schools.\n\n\"Oh, Kel, I wouldn't move to State, without you!\" Lexi soothed, moving behind Kelly and hugging her close.\n\n\"What are you studying,\" I asked, \"I'm sure State has something for you.\"\n\nI realized I hardly knew anything about Kelly. She was stunningly beautiful, and thanks to my adjustments a wonderful sex partner. I didn't know any of her interests. Carmen's emails focused more on Lexi.Kelly and Carmen's relationship was cooler before last weekend, because of Carmen's overly sexual persona was a conflict with Kelly. My adjustment tore that wall down, but what Kelly was really like, I didn't know.\n\n\"She's studying Business,\" Lexi offered.\n\n\"What type of business?\" I asked, trying to be helpful.\n\nKelly sniffled, and lifted her head to look at me, \"I'd really like to get into the hospitality business, hotels, restaurants, you know.\"\n\n\"Oh, State has a great hotel and restaurant management program,\" Alyssa offered, \"I'm sure you could transfer without any problems.\"\n\nI was a bit shocked. I started this weekend with the idea that this would be the last time I'd see Kelly, Lexi and Carmen. Suddenly, my new (previously lesbian) girlfriend was inviting the three beautiful coeds to transfer schools to be with me. I really didn't even know what to think. Luckily the waitress arrived with our food. We all started eating, and the conversation died down. I was lost in thought as the conversation started back up. The four girls started talking, and making plans like they were old friends.\n\nI forced myself to relax, and scanned the four girls. I noticed they were all active in the same area of their graph. \n\n\"This must be where the female bonding thing happens,\" I thought to myself.\n\nAs the spoke, and learned more about each other, their moral profiles began to construct a healthy boundary in the relationship area of the graph. I wondered to myself what my moral profile looked like, was I also building my relationship graph, and attaching myself to all of these women? I listened as they talked, discovering more about each woman. \n\nKelly's family owned a small but exclusive Bed & Breakfast on the coast, her parents were also very successful business professionals. They treated their property as a hobby, and wanted their only daughter to pursue a similar career. Kelly understood business, and had a keen easy charisma and personality. She wanted to use her natural ability to make people feel welcome, but her parents resisted a career solely in hospitality.\n\nLexi loved being active, and running was one of several athletic activities she enjoyed. She loved being outdoors, and enjoyed rock climbing, canoeing, and a host of aquatic sports. She was studying general science, but was interested in biology, and thought she might try to make a career as a physical therapist. She thought that would be the best mix of her passions.\n\nCarmen really very serious about dance. She loved all types and styles. I knew her body flowed in such a smooth natural rhythm. I could see her becoming a very good dancer. I remembered our quick sexual encounter in the hotel room, as she laughed loudly and started to get aroused again. Her whole being was brimming with sexual energy, and the thought of seeing her on stage... I knew she would be a star.\n\nAlyssa, whose story and background I was already familiar with, appeared to be so happy learning about these girls. She easily related to each of them, and because she was a few years older than each of them, she took on a mentoring role in the conversation. I knew she was applying her knowledge of psychology to the puzzles of the girls, but her interactions were so natural, I could see her being a wonderful counselor. She was always willing to help people.\n\nI leaned back and stretched smiling. I found myself becoming more enamoured with the group of girls. Three of them so randomly thrust into my life but seemingly so comfortable being together with me included. Though I was quiet, they continued to engage with me. Their eyes seeking mine, hands touching mine. Smiling at me, laughing with me, I felt very much at home. After dinner had been cleared, Alyssa took my hand and gave it a squeeze and leaned towards me.\n\n\"Pay attention now,\" She whispered, \"A few little adjustments might be needed with Lexi.\"\n\nI nodded in return, understanding her intention. Alyssa redirected the conversation towards Alyssa, while I started scanning. She used the same type of questions that she developed for our experiments, to discover how Lexi processed some of the moral quandaries that we had quizzed our subjects on. I scanned Lexi's profile and made small adjustments to raise the parts of the graph that I'd destroyed in our first meeting. I was impressed with how well Alyssa led the discussion, though part of me was uneasy that I was meddling too much. Outwardly, Lexi didn't show much change. Her engaging personality shone through all the questions.\n\nThe whole process took about 15 minutes, and Kelly and Carmen listened carefully. As the conversation continued to focus on Lexi, Kelly become more distracted and her hand returned to my thigh. When I glanced in her direction I saw Carmen was leaning against Kelly's neck whispering in her ear. Kelly was blushing and her hand moved up my thigh. I tried to split my attention between Lexi and the two beautiful flirty women on my left, but it was a fools game. I was getting too aroused to be much more help to Lexi.\n\n\"I think we should head back to our room,\" I said when a break in the conversation ebbed.\n\n\"Me too,\" said Carmen as she turned towards Kelly one of her hands under the table.\n\n\"Yesss, please,\" cooed Kelly as she squirmed next to me.\n\nI wondered what Carmen was doing to Kelly under the table.\n\nAlyssa smiled at me, and turned and squeezed Lexi's hand.\n\n\"I think that's a great idea,\" Aly said standing up.\n\nI had already settled the check, so there was nothing left to do but leave the restaurant and head back to the hotel. We all linked arms as we walked across the parking lot. I felt better than I had in weeks, finally putting aside my worried remorse over what had happened last weekend. I was looking forward to exploring more of our budding relationship in our suites. \n\nI entered the lobby and noticed Becky at the front desk, with a new person I hadn't seen before. I decided to swing by and greet Becky, and see if she was still as curious as she was earlier in the day. Carmen grasped my arm and walked with me as I headed to greet the charming hostess.\n\n\"Jeremiah,\" she warned, \"what are you doing, you crazy man?\"\n\nAlyssa linked arms with Lexi and Kelly and headed to the elevators.\n\n\"I'm just saying, 'Hello,' Carmen, don't worry,\" I said, then to Alyssa, \"Hold the elevator! I'll just be a minute.\"\n\nI looked at she nodded to me with a trusting smile. I looked to the front desk, and Becky smiled as she looked up at me and Carmen. The younger man beside her was busy at the check-in computer system, so Becky waved us over to the counter a few steps away.\n\n\"Becky, I want you to meet Carmen,\" I said smiling.\n\n\"Hello, Becky,\" Carmen said flirtily, \"I'm sorry I was such a bitch earlier.\"\n\n\"Oh, please!\" Becky said eyes gleaming with a bright smile, \"Traveling can make us all a bit off.\"\n\nI absently scanned Becky, just for practice, and noticed that her sexual graph was sparking with activity as she spoke with Carmen. \n\n\"Maybe there is something Carmen can do to make it up to you,\" I offered casually.\n\nCarmen looked at me oddly, and I winked at her.\n\n\"Actually, I'm just getting off shift in a few minutes,\" Becky began, \"What did you have in mind?\"\n\n\"Well if you can stop by our suites,\" I flirted, \"I'm sure Carmen will figure something out.\"\n\nBecky's eyes met Carmen's and I could see her pupils dilate in attraction. Carmen squirmed slightly as she let her eyes drop a bit and really examine Becky's attractive body. Carmen reached behind me and pinched my ass.\n\n\"I think I'd love to make it up to you,\" Carmen agreed, winking.\n\nBecky was left speechless, and Carmen grabbed me by my elbow and steered me to the waiting elevator.\n\n\"I'll, uh ... okay!\" Becky finally stammered as we left the front desk area.\n\n\"Jeremiah,\" Carmen whispered to me, \"did you do anything to that poor girl?\"\n\n\"No, Carmen, I only observed that she was more interested in you, than in me,\" I reported.\n\n\"Oh, thank god!\" Carmen smiled, squeezing my arm.\n\n\"I thought you'd like a little gift, for all your hard work,\" I laughed as we joined the other three in the elevator.\n\n\"What's that?\" Alyssa asked.\n\n\"Oh, remember Becky at the front desk?\" I said, \"She's coming up in a few to visit with Carmen.\"\n\n\"Really?\" Alyssa breathed, \"She was very attractive.\"\n\nLexi and Kelly were too busy kissing in the corner of the elevator to take part in the conversation. Carmen and Alyssa grinned at each other, while I took Alyssa's hand in mine. We waited together as the elevator rose, and I could feel the sexual tension start to rise as we passed each floor. Kelly was busy trying to get Lexi's sweatshirt off when the elevator stopped and we all exited onto our floor.\n\nI opened the door to Carmen's room, and watched as the stream of horny women walked inside. I walked in, and flipped the door lock to keep the door from closing all the way. I was betting we would have a sixth body in a few minutes. While Lexi and Kelly undressed each other, I understood they still shared a strong sexual bond. Carmen wrapped Alyssa in a close hug.\n\n\"I never said I was sorry,\" Carmen said softly.\n\n\"For what?\" Alyssa asked, leaning back and combing a stray lock of Carmen's hair behind her ear.\n\n\"For stealing away your boyfriend for a quick fuck,\" Carmen smiled.\n\n\"Think nothing of it,\" Alyssa answered leaning forward to kiss Carmen's lips, \"He's a pretty good lay.\"\n\nI laughed, and enjoyed the view. Lexi laid Kelly on the bed, then knelt between her splayed legs and kissed her pussy lips. Alyssa started to pull Carmen's clothes off, and Carmen was pushing down Alyssa's traveling yoga pants. I stayed fully dressed, and decided to watch and save my strength, the night was still young.\n\nWatching Alyssa undress Carmen was so erotic. Alyssa allowed Carmen to peel off her yoga pants. Then as she stepped out of them, she stood in front of Carmen with just her panties on and held her fingers to Carmen's lips.\n\n\"Hold still, Carmen,\" Alyssa instructed, \"let me undress you.\"\n\nCarmen's eyes widened, and she suddenly was very self-conscious. I could see a faint blush color her skin dusky skin. Alyssa lowered herself to her knees and lifted her hands to Carmen's waist. Looking up at the squirming Latina, she leaned in, lifted Carmen's shirt, and planted a soft kiss on Carmen's flat stomach. Her fingers pulled open the button at the top of Carmen's jeans, and slowly lowered the zipper. Alyssa slowly kissed each new section of skin that was exposed, then slowly lowered the loose denim to the floor. Carmen stepped out of the jeans and exhaled softly, closing her eyes to hold off her impatience.\n\nI heard a soft knock on the door, and stood to open it. Becky was outside, and she smiled up at me. Her eyes looked me up and down, and tried to look past me into the room. I leaned against the frame and smiled back at her.\n\n\"Are you sure you want to come in?\" I asked seriously.\n\n\"Yes, J,\" she affirmed, \"ever since I saw all those beautiful sexy girls smiling with you, I've been curious what is your secret.\n\n\"You won't get in trouble with the hotel?\" I asked again, not wanting to get Becky in trouble.\n\n\"Jerry is cool, I've covered for him before,\" Becky assured me.\n\nI opened the door and let her walk past me. She stopped a few steps into the suite, and I closed the door behind her, this time putting out the Do Not Disturb sign, and locking the latch. I stepped up behind Becky, as she stood watching Alyssa slowly pulling Carmen's shirt up, drawing it out with small kisses of Carmen's caramel colored skin.\n\n\"She's unwrapping your present,\" I whispered in Becky's ear, \"Can I unwrap you for her?\"\n\n\"Oh, yes...\" she uttered captivated.\n\nI stood behind her, and unzipped the side of her uniform skirt, pushing it down to pool at her feet. Becky took a step forward out of the bundle, and I reached around her an unbuttoned her blouse. I could feel the heat of her body as I undid each button. I felt her nipples harden under my forearms as I undid the middle buttons. I left the bottom button secured and pulled the top back over her shoulders and down over her body. When the blouse settled against her bare toes, Becky took another step forward.",
        "I looked past her, and Carmen was totally nude. Alyssa had turned her towards us, and was standing behind Carmen. Alyssa's pale hands were cupping Carmen's round tits, as she whispered things in her ears. Carmen's eyes watched Becky lustfully, as I undid Becky's bra strap. Becky kept her eyes looking forward, I could only imagine the smoldering look she was giving Carmen as I pulled her white lace bra from her chest. Her body was tanned all over, no tan lines over her large round breasts. I looked over to appreciate the sexy blonde's body and saw her small rosy nipple hardened in arousal.\n\nFinally, as Alyssa rubbed her hands all over Carmen's body, I took off the final piece of wrapping paper. I hooked my thumbs into Becky's white lace panties and pushed them to the ground, slowly. I looked at Carmen and watched as her eyes traced down Becky's legs in line with the travel of the underwear. When the panties touched the top of Becky's feet, she took one final step forward, and leaned into to kiss Carmen lightly on the lips.\n\nCarmen lifted her hands and wrapped her arms around Becky, pulling her into her dark body. They kissed deeply and Becky slowly pushed Carmen back towards the bed. I took hold of Alyssa's hand and she stepped from behind Carmen into my arms. Carmen was sitting on the bed, as Becky stood over her leaning down still engaged in their kiss. Suddenly Kelly's blond head came from behind Carmen's shoulder, and her hand slid around Becky's side. Becky lifted her head in surprise, then Kelly was kissing her from behind Carmen. Lexi slid off the bed, and walked towards us.\n\n\"It's getting too crowded on that bed,\" Lexi giggled, \"Can I join you two?\"\n\n\"I'd love that,\" Alyssa said pulling Lexi in for a deep kiss.\n\nI coaxed them through the adjoining door, and guided them to the bed. I took one last look into the other room where Carmen had laid back with Kelly leaning over her. Kelly was deeply kissing Becky, the two tanned and busty blondes almost mirrors above the dark lithe body of Carmen. I turned back to my room as I started to finally undress. Enjoying the view of Lexi lying over Alyssa, her knee between Aly's open thighs.\n\nI watched Lexi kiss Alyssa deeply. I undressed watching Lexi kiss her way down Alyssa's curves. She spent time enjoying Aly's soft round breasts, before kissing down her abdomen. Freeing myself from my clothes, I gripped my hard on as I walked to the bed. Sliding down next to Alyssa, I kissed her deeply, letting my tongue dance across her lips.\n\n\"Watching you undress Carmen was so hot,\" I said, as she opened her eyes to look at me.\n\nI lost myself in her blue eyes, magnified by her ever present glasses. She smiled back up at me, and slipped her hand behind my neck, pulling me back to her open mouth. She exhaled a moan into my mouth, and I assumed Lexi had found her honeypot.\n\n\"Mmmmm, yes,\" Aly moaned, \"I wanted her for myself, but there is time for that later.\"\n\n\"Will you let me watch you?\" I asked softly, running a finger down her chest, then tracing the outline of her crinkled areole.\n\n\"I might,\" Aly teased, \"if you'll let me watch you fuck... God! Lex, your tongue feels so good.\"\n\nI lowered my mouth to Aly's nipple and sucked in the stiff nubbin. She ran her fingers through my short hair sensuously. Her soft moans music to my ears. I felt a hand on my thigh, and looked down to see Lexi looking up at me while she was lapping Aly. Her eyes brightened in a smile as her fingers found my hip, then traced along til her wrist bumped against my erection. She moved her hand to softly grip my shaft.\n\n\"Ohhh, don't STOP!\" Aly cried, as Lexi lifted her mouth to suck in the head of my cock.\n\nLexi quickly returned to lapping Aly's crevice. Aly placed her hands on Lexi's head to ensure her tongue wouldn't wander again. Lexi used her palm and fingers to spread her slippery saliva around my throbbing knob. I wondered if my powers could be used to make Lexl a second mouth. I moved up and kissed Aly on the mouth, and she hungrily kissed me back. Lexi's hand on my cock seemed to match Aly's moans, our breathing fell into time with Lexi's oral ministrations.\n\nOverstimulated, I disengaged, and rolled from Lexi's hand. Sliding off the bed, I walked around to where Lexi's tight behind was raised as she knelt between Aly's splayed legs. I walked behind her, and she spread her legs slightly wider. I knelt on the floor, and kissed up her thighs until i could nuzzle my nose between her buns and lap my tongue around her nether lips. I found I had to share time with Lexi's fingers as she was frigging her clit as she lapped Aly's labia. Tasting Lexi's sweet tangy nectar, I rose to my feet. Slid forward and nudged my purplish knob against her gaping lips. Lexi moaned into Aly's cunt eliciting an echoed moan from Aly, she reached hand back. Her fingers found my shaft and guided me to her needy lips.\n\n\"Oh god, YES! I'm missed feeling your cock in me!\" Lexi moaned looking back at me over her shoulder. \n\nI smiled at Lexi as I slid my cock deeply into her, feeling her ass press back against my thighs. I looked past her and saw Alyssa, arched back lifting her hips to where Lexi's lips had been. Lexi returned to her pussy eating, and I started to saw my shaft in and out our Lexi's velvety tunnel. Each time I thrust into her, I could see Aly's body shake, her luscious boobs bouncing as I rammed Lexi further in Aly's needy sex.\n\nI saw a blush lift up Aly's chest as she arched back, combing her fingers through Lexi's red curls and pulling her to her core. I accelerated my thrusts, pulling almost out of her tight snatch before drilling back in deep. I set up a seismic wave that travelled through the trembling flesh in front of me as I drove my cock deeper and faster. I grabbed Lexi's firm hips, and started to pull her back, before my hips thrust her forward. \n\n\"OHHHH FUCK! YES! MAKE ME CUM!\" Aly finally shouted, lifting her head up, eyes wild and unfocused. \n\nShe found my eyes as I watched her body rut instinctively, her hips quivering into Lexi's hungry mouthing I locked my eyes with Aly's and was lost as my body went into automatic drive. We soared together, sandwiching Lexi between us I we drove our heated bodies into a lusty climax.\n\n\"CUMMING!\" Alyssa exalted.\n\nHer body spasmed as she fell back, her eyes rolling back as her legs shook with involuntary twitches. Lexi sealed her mouth around Aly's quivering quim, and I could only imagine how wonderful her tongue felt as she lapped up Aly's juices. Aly's orgams heated my own, and my thrusts became animalistic.\n\n\"OH FUCK! YES! SLAM THAT COCK INTO ME!\" Lexi shouted, pulling her face from Aly's twitching flesh.\n\nI pulled Lexi back onto my cock, pulling her firmly into my groin. I felt my balls lift tight against me. I slammed deeply into Lexi and felt my head jerk as my cum ejaculated deep inside her womb. My ejaculations triggered Lexi's orgasm and her tight pussy trembled in waves milking more of my cum from my shaft.\n\n\"OH MY GOD!\" Lexi raved as her body shivered on the bed. \n\nI stepped back pulling my cock from Lexi's pussy with an audible plop. Lexi rolled to her side, then rose up to snuggle against Alyssa. Alyssa combed through Lexi's hair, her eyes closed as she recovered from her orgasm. They shared a sweet tender kiss and Lexi curled her body into Alyssa's their hands roaming gently over their skin.\n\n\"Oh, Carmen! Yes.. lick my pussy\" I heard from the next room, and I took a step towards the adjoining room.\n\nBecky was on her knees, and I could see Carmen's dark hair cascading down the end of the bed as she lapped at Becky's pussy. Kelly was bent over between Carmen's legs and though I couldn't see her head, I knew she was feasting on Becky's nipples. I felt a jolt quiver through my cock, and I followed the voices and wandered back into their room.\n\nI leaned over Becky's shoulder and kissed her neck as her head rolled back. Her hips moved up and back as she rubbed her pussy on Carmen's willing lips. I looked down and caught Kelly's eye as she suckled Becky's nipple into her mouth, noticing that Kelly's free hand was busy shoving two fingers into Carmen's pussy below her. Becky kissed my cheek, and I turned my head to find her lips. I gasped as she thrust her tongue into me, and I felt a wet tongue on my cock head.\n\n\"Mmmm.. that tastes like Lexi,\" Carmen cooed.\n\nI pulled away from Becky and looked down as Carmen tilted her head back and sucked my cockhead into her mouth. Becky kept rocking. Carmen sucked my shaft into her throat, and I felt Carmen's head slowly move back and forth as Becky rubbed her cunt into Carmen's chin. I let Carmen continue to suck my cock back to life.\n\nI looked over Becky to Kelly, \"Lie on your back, Kelly,\" I instructed.\n\nI nuzzled into Becky's neck, and nibbled next to her ear as she continued to slowly ride Carmen's chin. Kelly laid back on the bed, and opened her legs, sliding her fingers up and down her slippery snatch. Kelly's lips were open and dusky pink in arousal. \n\n\"Look at Kelly,\" I whispered , \"You should have a taste of her.\"\n\nBecky turned to me, and kissed me, then nodded.\n\n\"Will you fuck me, if I do?\" She asked softly.\n\nI simply nodded. Carmen pulled off me with a slurp. Becky leaned down and crawled towards Kelly who locked eyes with her blonde friend. Carmen disengaged and rolled off the bed, standing next to me, she wrapped her arms around me and hugged her sexy body against mine.\n\n\"Thank you for my present,\" she cooed into my ear, \"She is an awesome pussy licker. Can I help you fuck her?\"\n\nI could only nod, as I climbed on the bed. Carmen grabbed my cock, and pulled me closer to Becky's raised bottom. I crawled on my knees between Becky's thighs while Carmen aligned my revived knob with Becky's inflamed lips. \n\n\"I got her ready for you stud,\" Carmen said, \"ride her home.\"\n\nI slid my cock slowly into Becky's pussy. Her shaft was tight, but I slid in all the way to the root. Carmen kissed me thrusting her tongue into my mouth as I started a slow rocking motion. \n\n\"Mmm Becky, lick my pretty pussy,\" Kelly coaxed.\n\nI moved my head to watch Kelly as I rocked in and out of Becky's sex. Kelly lifted her breasts, her fingers playing with her rigid nipples as she moaned to Becky's oral urging. Carmen grabbed my ass and pulled me into Becky, encouraging me to fuck her new friend faster. Kelly lifted one hand to Becky's head, holding her golden locks steady as she rolled her hips, lifting them to meet her tongue.\n\nAs my motions steadily accelerated, Carmen crawled up to Kelly and gave her a deep kiss. They shared some quiet words that I couldn't hear. My thrusts were smacking my thighs against Becky's ass in a rhythmic slapping. Then Carmen rose up and lifted her leg over Kelly's head and straddled her blond mane head. She faced me and lowered her dark curls over Kelly's outstretched mouth. Carmen raised her eyes to mine, and we locked into each other's stare for a second before Carmen's eyes closed. Kelly lifted her arms, wrapping them around Carmen's thighs and pulling her down to her mouth.\n\nThanks to my previous orgasm, my rigid cock went into automatic. I would have surely blown my load there and then had I not already just cum. The scene was so erotic, Carmen's lusty body undulating over Kelly's beautiful face. Both of their lovely breasts swaying in time with my thrusts into Becky's pussy. Becky's golden locks swayed as she enthusiastically lapped at Kelly's needy sex. We seemed to lock into a hive mind as we let our bodies slowly accelerate into our bliss.\n\nBecky was the first to fire off, her pussy clamping around my cock holding me deep inside her as she cried out in a scream of agonizing ecstasy. Carmen went off next, as she watched Becky's body shiver. I felt Becky convulsing as I rode her through her orgasm and watched Carmen's pussy flood Kelly's face, her juices running down Kelly's throat. That set off Kelly and her whole body seemed to levitate off the bed, her back arching. Her nipples were obscenely hard as her breasts rose between the four of us. The sight of the three of them quivering launched me, and I groaned my lust into the moaning room. I rammed my cock into Becky's cunt and blasted three jets deep into her belly. \n\nMy orgasm set Becky off again, and the whole cycle went off as all the girls quaked together. Carmen rolled to one side of Kelly, while Becky slid down the other. I staggered back, cum drooling from the tip of my cock, as I watched the three women twitch and shake as their bodies were still overloaded from the exertion. I felt two pairs of arms wrap around me, then four breasts press into my back. \n\n\"Damn, hon!\" sighed Alyssa, \"that was fucking hot!\"\n\n\"I've never seen anything like that,\" Lexi confessed.\n\n\"I think I need to lie down,\" I said.\n\nI let myself be led back to the other room. Alyssa slid down on the bed and pulled me beside her. Lexi leaned over and with loving care cleaned the oozing cum from my cock. She looked up at me, checking to see if her touch was too much, then proceeded to lick all of the slick remains of the explosive orgasms from my cock and balls. I pulled Alyssa to me and found her mouth to kiss her deeply.\n\nI dozed off to her tender kisses and light caresses.\n\nAuthor's Note: Thank you for all the comments and votes. A special shout out to sportychica334 for her editing and encouragement, and additional errors are mine.\n\nThe next chapter will be posted shortly, stay tuned. "
    ],
    "authorname": "HankDolworth",
    "tags": [
        "college",
        "coed",
        "group sex",
        "ffm",
        "fffm",
        "lesbian",
        "drama"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/the-designer-ch-10"
}
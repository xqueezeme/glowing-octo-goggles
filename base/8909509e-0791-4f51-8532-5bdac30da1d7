{
    "title": "French Exchange Part Deux",
    "pages": [
        "The following is a work of fiction, and all participants are over the age of 18. This is a continuation of my previous story, \"French Exchange\", so you may want to get caught up on the adventures of Miss V and her former student before you tackle this one, but l leave that to you. I thank all of you who offered feedback on that (my first) story, and look forward to hearing from you again. Oh, and please take the time to rate the story, as well. \n\nThanks for reading. Enjoy. \n\n**********\n\nNiola and I shared the house with my roommates for about six months without a hitch. As I said before, she took on the role of unofficial 'house mother' to my five roommates, and seemed to enjoy it for the most part. \n\nI know the guys liked having her around, if for no other reason than she was drop dead gorgeous, and would occasionally display her outrageously curvy body to them in a variety of revealing outfits that ranged from skin tight shorts and t-shirts, to tank tops, to legitimate lingerie. More than once, someone would have to excuse himself, and disappear for a few minutes to a private location to deal with the erection her presence and sexual energy had caused. Niola loved the attention. I hadn't realized what a little flirt she was. \n\nI continued to be the sole beneficiary of her bedtime hours, however. We made love as often as three or four times a day, when neither of us were at our respective schools. She would often tell me how wet she would get, looking at the seat I once occupied in her class. \n\nNiola would ask me about my female classmates at college, grilling me on who the hottest babes were. She knew I wasn't shopping around, but she liked to hear about the other girls, especially the ones with big breasts. She knew of my weakness for that particular area of the female body. She needn't have worried. None of them could hold a candle to her. \n\nThen she would ravish me. I couldn't get enough of her, and we had so much hot, noisy sex in our room that one of the guys started wearing earplugs to bed, so he couldn't hear us! I thought it was hilarious. Niola took it as a challenge, and just got louder. \n\nI loved everything about her. The physical attraction was obvious. What man wouldn't want her petite, firm, yet extremely buxom body, to play with? Her green eyes looking back while we kissed..... or the firm contours of her shapely ass? But of course, she was every bit as good a partner as she was a lover. \n\nI had proposed, not long after she moved in. I had no doubt that Niola was the only woman I wanted, but she was hesitant. Not because she had doubts about us, but because of our age difference, relatively speaking. I was now almost 20, to her 27. I looked older than my years, while she looked younger, but she was still actively teaching at the high school I had just graduated from. Even though we were no longer a secret, advertising our relationship by getting married so soon seemed like a bad idea for her career. She was right, of course, so we settled for a long engagement. A few years from now, she would become my wife. \n\nThe trouble at the house started about six months in. One of my roommates, Mike, had just been dumped by his girlfriend, and wasn't taking it well. He had been drinking too much, and said a few inappropriate things about Niola that set things on edge between us. For her part, Niola just felt sorry for him. \n\nMike came home drunk, and bumped into Niola in the kitchen. He was particularly pathetic that night, so she tried to console him. I was watching TV in the attached family room, but before I could convey what a bad idea it was, she was giving him a hug. \n\nMike and I were both on the football team in high school, but I played Receiver, Defensive Back, and a little Quarterback, while he was a Defensive Lineman. He was a few inches shorter than me, but had me by 40 pounds. \n\nAs soon after his arms engulfed her, Niola realized her mistake. Mike began to maul her breasts roughly, and tried to kiss her. She tried to escape, but he was easily twice her size. She tried to remain calm, so as not to escalate the situation. \n\n\"Aidez-moi, mon amour,\" she said evenly. Help me, my love. My French was now quite good, and I was on me feet, coming to her aid immediately. \n\n\"Mike! What are you doing, man? Let her go!\" I warned as I approached. \n\nNiola struggled, and I could feel her panic rising. \n\n\"L\u00e2chez-moi, cochon!\" she screamed at him. \n\nI put my hand on his shoulder. \"Mike! Stop!\" The alcohol wasn't allowing logic to get through. I pulled at his arm. He pushed me away. \n\nWhile he was busy pushing me away, Niola took advantage of the break in the bear hug to drop out from under his grasp. She pulled free and turned her back, trying to leave but finding herself cornered. I stepped between them. I hoped my intervention would give him pause. It didn't. \n\nMike pursued, using a football swim move to get past me, throwing me aside. He caught Niola again, grabbing her neck from behind with both hands. The situation was degrading rapidly. \n\nI loved Niola, so the choice between her and Mike was no contest. Still, I didn't want to hurt him, given that alcohol was playing a big part in this behaviour. I was looking for something heavy to hit him with, when I got a better idea. \n\n\"Tournez Niola! Spin out!\" I barked. She did just what I taught her, as a basic self defense technique. \n\nShe swung her left arm up, and spun to the left. This detached his hands from her neck and pushed them both away to his right. She had two options for the strike : high to the throat with her right hand, or low to the groin with her knee. She went low. \n\nIf she had wanted to, she could have really hurt Mike badly. But even as angry as she was over getting groped, she was restrained in her response. She still hit him pretty hard, though, and he dropped like a rock, groaning in pain. He laid on the kitchen floor in the fetal position. \n\nNiola sought refuge in my arms. \"Nicely done,\" I whispered to her as she buried her face in my chest, sobbing. I stroked her hair and comforted her. Together we looked down at Mike, who was still moaning. \n\n\"I think we need our own place, baby,\" I added, kissing away her tears. She nodded, and looked back to Mike, who was now just passed out on the floor. \n\n\"He's gonna feel that tomorrow!\" she giggled. \"Thanks for teaching me.\" \n\n\"After everything you have taught me?\" I smiled, \"I think I still owe you a few hundred.\"\n\nWe walked arm in arm upstairs to the bedroom, and locked the door. I held her close while she slept, hoping she wasn't having bad dreams. \n\nWe found a place, the next day. In the two weeks before we could move, we pretty much lived in my room, and I played bodyguard when we had no choice but to go into the public areas, Mike was suitably and predictably contrite, apologizing profusely, but we weren't about to risk a repeat. \n\nSo now we were alone, with an entire house to ourselves. It was just a little rancher, but it was our home. Niola took full advantage, and the house became a 'clothing optional' zone. Watching her wander around naked, with a wiggle in her butt and a jiggle to her boobs, had me constantly hard. We christened every room in the house, but Niola's new favorite place to fuck was the kitchen. Putting her hot ass at countertop height positioned her perfectly for a long, slow, stand-up screw, or a good tongue lashing of her pussy. We did both often. \n\nOne day, we were lounging in the TV room, naked of course, when the phone rang. Niola was up like a shot to answer it, and I heard parts of her half of the conversation. In French, of course. Her excitement level ratcheted up quickly, and she was soon speaking so quickly, I got lost. She was laughing and jabbering away at light speed. \n\n\".. Bien s\u00fbr, il est si bon d'entendre de vous... Nous vous verrons alors!\" Niola shrieked with glee, and came bounding back into the room, wearing a smile that threatened to take the top off her head, and scarcely able to stand still. I was getting hard again just watching her bounce around the room. \n\n\"Okay, Sweetheart... So good to hear from who? And when will we see them?\" I asked, recapping the end of the conversation. \n\nShe leapt into my lap, giggling uncontrollably, and kissed me. \n\n\"Michelle! My old college roommate! I haven't seen her in years, and she's coming to town next week!\" she screamed, and laughed joyously. She rolled out of my lap and ran excitedly on the spot. Her breasts were flying all about, and regardless of my attempts to control my gaze, my penis was exercising manual override. \"Michelle was my very best friend.... before you,\" she added, \"and when she got a job in Quebec, I thought I might never see her again.\" \n\n\"So she's a teacher, too?\" I asked, continuing to ogle her breasts. \n\n\"Oui. Elle est professeur de fran\u00e7ais, aussi.\"\n\n\"She's a French teacher?\" I asked, confused. \"In Quebec?\" \n\n\"Hey there are English teachers in English speaking countries, right?\" she replied. \n\n\"Of course... now I get it.\" I was still staring at her tits. She smiled and did her excited run again. Too much stimuli to be ignored. I growled and stood up, throwing her over my shoulder, and heading for the bedroom. \n\n\"Woo Ooooooooooooooo!\" she giggled, and held on tight. \n\nI edged though the bedroom door carefully, and tossed her onto the bed. She bounced, laughing raucously. I jumped on her, reefing her legs apart, and spearing her immediately. \n\n\"Ooooof! \" she gasped, as my cock bottomed out in her pussy. Her hands roamed my back and ass, before settling on the back of my neck and drawing me into a kiss. \"I thought I was the one who was excited about Michelle coming!\"\n\nI slowed my assault. \"So, Sweetheart, tell me about Michelle.\" I kept slowly shafting her, while she filled in the blanks. About 3 inches taller than Niola...brunette, long wavy hair... a little slimmer...not nearly as top heavy, but still well built...college roommate. I looked down, and Niola was blushing a little. \"What?\" I asked. \n\n\"Oh, I'm sure you've heard the rumours about college girls and their roommates....\" she replied, blushing more and looking away. \n\nI stopped, mid-stroke. Of course. Everyone has heard the rumours about college girls experimenting with lesbian sex. They are a mainstay of male fantasies and porn plots worldwide. Just like fucking your hot, busty teacher. I guess I, of all people, shouldn't have been surprised it was true. I looked at her intently until she met my eyes. \n\n\"Yeah, I've heard. Are you telling me that the rumours are true?\" She nodded. \"So... You and Michelle?\" Another nod. \"Just experimental, or more than that?\" \n\nNow that really made her blush. No answer was necessary.\n\n\"I don't suppose you would like to tell me more?\" I asked, hoping she would. Can it get any hotter than fucking a sexy woman, while she tells you about her being in bed with another sexy woman? I think not! I had resumed my gentle rhythm when she surprised me. She actually told me all about it. \n\nFor several minutes she revealed all, telling me about their first time together (not surprisingly, alcohol had played a part). She went on about them learning how to please each other, through exploration of each other's bodies. How Michelle would spend long periods of time either moored to her breasts, or gently devouring her pussy. They even had a few lesbian orgies, but always ended up together, because Michelle was the best with her tongue. \n\n\"Oh my god!\" I exclaimed. \"My fianc\u00e9 is a lesbian!\" I started to shaft her again, harder and harder, until I exploded deep inside her. The mental image of my darling Niola, engaged in sapphic rapture, was too exciting to bear. I rolled off, breathing heavily. \"Sorry, Sweetheart. That bit of news was a surprise.\"\n\n\"Got you a little worked up, did it?\" she giggled. \"Yes, I have licked a pussy before,\" I groaned, \"... and I liked it! Michelle was always more into it than I was, but I admit, I did like to receive. I guess you could say I started straight, went to bi-sexual, then to lesbian, before deciding I like men more than women. \"\n\n\"Well, from a purely selfish perspective, I thank you. But I would have loved to see you getting it on with a woman,\" I whispered, stroking her breast. \n\n\"Well.... we'll see,\" she purred. That got my attention. \n\nNext week became this week, then today. I was pretty excited to meet Michelle too, but for slightly different reasons than Niola. There was a knock on the door. Niola took off like she was shot out of a cannon. I heard the door open, and then two shrieking female voices giggling wildly. \n\nThey finally broke the hug, and Niola introduced me. Funny... Michelle didn't really look like a lesbian, whatever a lesbian is supposed to look like. We shook hands, and she hugged me. She didn't feel like a lesbian either. She felt kind of hot, and she was very pretty. \n\n\"Sorry, baby,\" Niola touched my hand. \"We need time for a little 'girl talk',\" she added, as they headed down the hall to the guest room. \n\nI left them to do their thing, and returned to the TV. They talked for hours, mostly in French, and we eventually ended up going out to dinner. It was fun, just watching them catch up. I caught enough of the conversation to know I was being mentioned, here and there. \n\n\"Alors, est-il une bonne baise?\" Michelle asked, during a lull in the conversation. I looked up when she said it, and smiled. \n\n\"Actually,\" I answered, \"Yes. She says I am a very good fuck.\" I saw the surprise on Michelle's face. \"I'm surprised, with all the talking you two have done, that you didn't know. Yes, I can hold my own in French. After all,\" I said, touching Niola's hand,\"I had a great teacher.\"\n\nMichelle just smiled. \"Yes, she is, isn't she?\" \n\nLater that night, Niola and I had just finished making love, when I thought I saw some movement at the bedroom door. Sure enough, Michelle had been watching us from the hallway. I decided not to mention it until morning. \n\nThe next morning, I walked into the kitchen and hugged Niola from behind. My hands cupped the large, heavy curves of her firm breasts. I gave her nipples a little tweak. \n\n\"Did you see Michelle watching us last night while we were fucking?\" I whispered into her ear. \n\n\"Uh huh,\" she whispered back, before turning in my arms to kiss me. We were still sucking on each other's tongues when Michelle came in. \n\n\"Oh! I am so sorry!\" she giggled, turning on her heels and reversing course. \n\n\"Michelle....\" I called after her, \"after what you saw last night, don't you think the shy act is overdoing it?\" \n\nThere was a pause, and she slowly came back in, looking sheepish. \n\n\"Sorry about that. I heard you and just had to watch. You two are very good together.\" \n\n\"Yes we are,\" Niola said quietly, looking into my eyes lovingly. \"We sure are.\" \n\nThat night, I was laying in bed, watching something on TV, when Niola walked in. She was naked again. \"Jeez, baby.... we have company, don't we?\" \n\n\"Yes we do,\" she replied, as Michelle walked in, naked as well. Her body was lean and lithe, with perky breasts that would probably look large on her frame, were it not for Niola's huge melons by comparison. A thick bush of dark hair obscured my view between her legs. \"You wanted to watch?\" \n\nThe girls joined me on the bed, and started to make out with each other. Hands fondled breasts and caressed buttocks, while they kissed each other like they had never been apart. It was obvious to me that they had been much more than merely experimental, at least from Michelle's point of view. \n\nThey transitioned into a 69, and I could see Michelle's highly aroused pussy lips pouting out through her curly pubes while Niola's tongue probed her. It was fun to watch, and instructional as well. Who better to learn cunnilingus from than someone who not only eats pussy, but has one as well? I observed the 'class in session'. I think Niola might be surprised at my new tricks the next time I ate her. \n\nMy cock needed release. I had been watching the girls for almost an hour now, and they had each cum several times. I had just come to the conclusion that I would be pleasuring myself, when Niola stopped me. \n\n\"Do Michelle. She wants you to.\" \n\nI looked at Michelle, and she nodded, laying back and spreading her legs. Niola bent and licked my cock, lubricating me for penetration. She then held me at Michelle's wet opening, guiding me in. Niola kissed me. \"Give it to her good, baby,\" she whispered, and laid back to finger herself. \n\nFor the first time since we met, I was having sex with someone other than Niola. As strange as it sounds, I really didn't want to. Niola was all I needed or wanted. She had, however, asked me to fuck Michelle, and I could deny her no request. Okay, I admit that, as a horny 20 year old, my cock was ready and willing to fuck any attractive female. It was the man in me, the part that had fallen in love with Niola, that was reticent. \n\nFor a lesbian, Michelle was a pretty good lay. Well, okay. She was my first lesbian, so I had absolutely no frame of reference. Her pussy was wet, and snug, and clutched at my shaft when she had an orgasm, which was a surprisingly frequent occurrence. I was getting close myself.\n\nI felt Niola's hands urging me on, adding fuel to the fire. I pounded Michelle furiously, and emptied the contents of my balls into her vagina. When I had regained muscle control, I rolled off, and Niola took my place, kissing her friend and holding her close. Niola plunged her fingers into Michelle's cum filled pussy, massaging her internally. \n\nThe next night, Niola abstained, citing 'that time of the month' as her reason. She insisted that Michelle and I go ahead without her, however, and I soon found myself face to cunt with Michelle. I suddenly felt like I hadn't prepared properly for an exam. The pressure was devastating. After all, she was a teacher, and a lesbian. How could she not be mentally comparing and grading my performance? \n\nIt turns out my fears were partly right, but also partly wrong. She was quite particular about how her pussy got licked, but also not shy about offering encouragement when deserved, and corrections when needed. I got mostly corrections, but a bit of praise, and I am proud to say I did get her off orally. It took a while, but I did it. Michelle then pulled me up, and directed my extremely hard cock into her. We fucked quite gently at first, and I was a bit miffed when Michelle turned away as I tried to kiss her. In retrospect, I understand, but it felt weird. For Niola and I, kissing was such a huge part of our lovemaking, that its absence was noticeable. \n\nNiola was still right beside us though, gently circling her own clit. She kissed me, even though Michelle wouldn't. \n\n\"Just fuck her,\" she said. \"You don't need to be loving. Fuck her hard.\" \n\nAbuse your friend? Okay, if you insist. \n\nI hooked my arms under Michelle's legs and raised her hips, while Niola slipped a pillow under her ass at my request. I started to fuck her hard. I pounded her sweet little pussy incessantly, crashing our pubic bones together. Michelle grunted and groaned, and her eyes bored holes into mine. Suddenly, her head flew back, and a guttural moan was heard as she came. I mentally patted myself on the back for making the lesbian cum again. I kept fucking her, with quick, short strokes mixed with longer, slower ones. Michelle came again, a bit louder this time. When she looked back at me, her eyes were intense. \n\n\"Is that all you got?\" she spat. \n\nYou bitch! I thought, now you're gonna get it! \n\nI kicked it up a notch, and started to ferociously slam into Michelle like I didn't like her, which I didn't after that last comment. I fucked her like she was a cheap whore, grunting with each spiteful thrust, seeking only my pleasure, which was rapidly approaching. Her tits were bouncing and slapping each other, and Michelle had another orgasm, screaming loudly. I glanced at Niola, and she was transfixed, watching me ravish her former lover. Then she made eye contact, and a lusty grin appeared on her lips. ",
        "\"Fill her fucking cunt with cum!\" she demanded. \n\nI was just about to. One last time, I slammed home, and began to spray into her like an unattended firehose. Her twat twitched, and she ground her hips against me harder, while I continued to spew my seed into her receptacle. Finally spent, I pulled out, and left the two of them alone in bed. I was almost angry. \n\nA few minutes later, Niola came searching for me. I was standing in the kitchen, still quite upset, but not really knowing why. She hugged me from behind. The feel of her arms around me, and her breasts pressing against my back, made the world right again. I turned, picked her up, and plopped her on the counter, before hugging her back. \n\n\"You okay, baby?\" she asked quietly, stroking my shoulder. \"I've never seen you like this. You know she was just playing with you. She wanted you to use her. She was trying to elicit a response.\"\n\n\"Well, she got one!\" I laughed, suddenly feeling better. I stood, embracing my darling Niola for a moment. I loved her, and she loved me. Life was good. \n\n\"You know.... It was pretty hot watching you fuck her hard like that. She's not accustomed to being penetrated by anything larger than fingers or tongues. Even the dildos we used on each other weren't as big as your monster. She's zonked out right now!\" she whispered, sliding off the counter and dropping to her knees. \"I think someone needs a cleanup.\" \n\nI looked down. My cock was soft in her hand, and a froth of combined semen and pussy juice hung in streaks along the shaft. A glob of it adorned the head. She opened up, and sucked my limp noodle in like a strand of spaghetti. A yummy moan followed. I heard it, and the vibration woke the dragon. \"Oh, yes baby. Suck my cock,\" I hissed. \n\nI was fully hard quite quickly under Niola's expert attention. She was stroking me and bobbing her head to an accompaniment of wet slurps and moans. I watched from above. The sight was unbelievably erotic, with her lips stretched tightly around my thickness, cheeks puffing and hollowing, and hair flying. Below that, the full, voluptuous, breasts of my dreams were swaying and jiggling their own syncopated rhythm. She was too much. \n\nWhile I watched, I saw feet approach in my peripheral vision. Michelle took a place on her knees next to Niola, who pulled my length from her mouth and offered it up like a stick of candy. Michelle shook her head, so Niola inhaled me again, bringing me closer to climax. I began to growl, a sound that obviously surprised Michelle as much as it inspired Niola, who accelerated her rhythm. Another, louder growl signalled my peak. \n\nNiola removed her mouth, and stroked me furiously with her hand, aiming my spigot at Michelle's face. That did it. \n\nBlam! The shots of semen arced out, splashing onto Michelle's smiling countenance. It didn't take long for Michelle to take on the look of a glazed doughnut, at which point Niola sucked me in again and vacuumed up the last drops. \n\nMichelle sputtered, and her tongue peeked out to collect a sample of icing. Apparently not displeased at the taste, she began to lick her lips clean, extending her tongue to its full range. Niola joined in, using her own tongue to clean her friends face. Michelle then grabbed Niola's head and kissed her deeply, sharing her prize while simultaneously transferring a smear to Niola's face. \n\nThey kissed and licked each other's faces until both were suitably free of my discharge. Then they remembered I was there, and both faces turned up to observe me. \n\nWhen they saw me gawking, mouth agape, they both giggled. \"That was so hot to watch! I think I might be a lesbian too!\" I laughed. \n\n\"No, my love,\" Niola said quietly. \"That doesn't make you a lesbian... It just makes you a typical man!\" \n\n\"It's not a club, you know?\" Michelle added. I tottered off to the bedroom and passed out. \n\nThe following night, we all went out again, to a movie this time. I snuggled and groped Niola in the theatre, occasionally finding my target fondle zone already occupied by Michelle's hand. Between the two of us, we had Niola pretty hot and bothered by the end of the film. When we got back to the car, I was surprised (but not shocked) to see Niola pass up her front seat position in favour of the back, with Michelle. The two women immediately started to grope each other feverishly, making out like teenagers. Michelle soon had both of Niola's fabulous breasts freed, and was latched onto a nipple like her life depended on it. I drove, but was quite divided in my attention, what with the erotic display in my mirror. \n\nPart way home, the display disappeared, as they slumped down out of view. This really didn't fix my attention problem, though, as I now had images of a mobile 69 running through my head. \n\nWhen we arrived home, I turned off the car. Niola moaned, and her hand appeared over the back of my seat. She was gesturing and pointing to the door of the house, generally. I got the message, and exited the vehicle, but not before sneaking a peek as I did. Sure enough, they had their faces in each other's crotches, Michelle on top. \n\nI really wanted to just pull my dick out and jack off to the view, but perhaps a man pulling on his penis while peeking in a car window might seem out of place to the neighbours. I reluctantly went into the house. \n\nAbout a half hour later, they finally came in, both looking dishevelled, with fucked up hair and wrinkled clothes. Niola's blouse was misbuttoned, and her panties were in her hand. Michelle looked less messed up, but she had a post orgasmic glaze to her eyes. \n\n\"Am I going to need to fumigate the car?\" I laughed. They did too. \n\n\"Maybe a little!\" Niola offered, wandering down the hall on unsteady feet. \n\nI looked at Michelle. \"Do I get another chance to lick you tonight, or are you done with me?\" \n\nShe smiled. \"Oh, I think that could be arranged. You know, you're not half bad in bed... For a man!\" She touched me on the nose with one finger, and turned down the hall herself. \n\nWhen we went to bed, Michelle was with us. I did get another chance to taste her, and I think I did better this time. Michelle was much more vocal, and less conservative with her praise. Her pussy may be totally obscured by her pubic hair when she's not aroused, but when she gets hot, her inner labia really extend and pout open. Her engorged lips were almost purple, and very thick. She had one astoundingly erotic looking vulva. Don't get me wrong ; I love my Niola's juicy little snatch, but Michelle's cunt was epic. I could certainly understand why Niola had felt that urge to partake. \n\nI was teasing Michelle's clit, while I traced her lips with my fingertip. I was on an exploratory mission, listening for changes in her reaction as I touched and probed the area between her legs. I was like an electrician, looking for the other lead to the circuit. My fingers wandered across her bald perineum, and she moaned a little louder. Then I touched her puckered little asshole, and completed the circuit. \n\nMichelle was anal, and I don't mean attentive to detail. I flicked my finger across her butt hole, like strumming a guitar. She screamed, and gushed in my mouth. I inserted one finger into her dripping pussy, and pulled some lubrication out and over her asshole, before I gently probed deeper. Michelle screamed again, and undulated her hips, trying to drive her ass down over my intruding digit. I lost my grip on her clit, and resorted to flicking it with my tongue. \n\nMichelle was panting, trying to catch her breath after two orgasms. \"Push your finger up my ass!\" I did as instructed, until my index finger was fully buried. \"Oh fuck, yes! I love it up my ass! More! More!\" she grunted. I added a second finger, stretching her sphincter wider. I flicked her clit again. \"Ohhhhhhhhhh, ohohohohoh! Oh please... One more thing.... Oh god! My pussy!... Oh yes.... My spot, please! Please!\" \n\nShe had told me what to do, but the application of that direction was going to be tricky. I have big hands, so space between her legs was at a premium. Getting a finger onto her g-spot could require some contortions. I finally admitted defeat, and drafted Niola's delicate fingers to supply the final stimulus. She slipped two fingers into Michelle's sopping wetness. She curled her fingers up, and found the target, with its bumpy texture. She pressed gently, while I returned my tongue to Michelle's clit. \n\nMichelle's scream nearly blew out the window in the bedroom. She arched her back, and shuddered, as the mother of all orgasms washed over her. Her eyes were screwed shut, and after the initial scream, she went silent, even though her mouth kept opening and closing. I half expected every dog in the neighborhood to hear her. She was straining so much, she was turning purple, just like her pussy. Suddenly, she went limp. \n\nI looked over at Niola, who had been gently fingering herself with the hand that wasn't occupied by stimulating Michelle. Her eyes were wide, watching her former lover cum. \n\n\"Holy fuck! You, or rather we, killed her!\" she giggled, lifting Michelle's arm. She released it, and it flopped back. \n\n\"I only did what she told me to!\" I replied. I didn't know whether to be concerned or proud. We had actually caused an orgasm that made her lose consciousness. Niola was looking at me, with a sexy expression. \n\n\"You gonna do that to me some day?\" she asked, batting her eyelashes coyly. \n\nI still had my fingers buried in Michelle's ass. I wiggled them, and she didn't even budge. I removed my digits, and waved them at Niola. \n\n\"Not today! Not today!\" she giggled, covering her pussy and ass. \"She almost wrecked me in the back seat of the car, so there's no way I would survive it!\" \n\n\"I thought you looked a little woozy when you came in. Is she that good?\" \n\n\"Darling, I hope this doesn't leave you scarred for life... But yes, she is.\" Niola said quietly, with a smile. \"I love your cock, but she almost got me to play for the other team.\" She grabbed my hard dick and gave me a reassuring tug. \"Almost.\" \n\nMichelle had begun to stir again. \n\n\"There you go, Sweetheart. I suggest you fuck the shit out of her!\" Niola added, gesturing to Michelle, whose eyes were beginning to flutter open. I positioned myself, and entered her. \n\nMichelle's eyes popped open wide as I slid home, and her arms flew around my waist, followed quickly by her legs. The pillow was still under her ass, changing my angle of penetration, and apparently, she liked it. \n\n\"Oh fuck, Niola, your young man's cock is almost enough to make me go straight! It's been a long, long time since I enjoyed anything in my cunt like this!\" she hissed. I kept stroking her hard. \n\n\"You go straight? I'll believe it when I see it. And don't get attached to him. He's on loan for this week only. You'd have to find your own, because he's mine.\" Niola said, patting my thrusting ass to indicate her ownership. I just grunted, and fucked Michelle harder. \n\nA few minutes later, I filled her up again. \n\nI spent the next day at home, alone, as the ladies were out together. I wondered how much Niola's luscious body was being sampled by her friend. Images of the two women, naked, filled my head, and for the first time in a very long time, I had to deal with my raging hard-on by myself. \n\nThat night, the three of us repeated our joining. Niola was back in the game, and the girls were locked in a scalding hot 69, very much like the images I had imagined earlier in the day. Niola was on the bottom, and was peeking up at me. She reached out and took my throbbing erection in her delicate hand, tugging me closer. She aimed my spear at Michelle's pussy, and winked.\n\nIt suddenly occurred to me that we were about to have a true threesome. Unlike before, where I had watched, then subbed in, we would all be involved now. \n\nNiola guided me between Michelle's pussy lips, and held the tip of her tongue on the underside of my shaft while I slid smoothly home. The sensation was remarkable. She alternately licked Michelle's clit, my intruding cock, and my balls. Michelle was groaning loudly, and I suppose that intensified the pleasure she was giving Niola, who sucked my balls, making me hotter, so I fucked Michelle deeper, which made her groan more, which pleasured Niola more, which.... A truly delicious cycle had developed, a case of 'which came first, the chicken or the egg?' \n\nThe answer is.... Niola! With a shuddering gasp, she orgasmed from Michelle's tongue. I guess Michelle really was the best, but I would strive to measure up to her standard in the future. \n\nI was still shafting Michelle, when I felt Niola pat my butt. I peeked down, and saw her inch her hand over Michelle's ass, stopping to tap on her sphincter. Niola winked again. I got the message, and slid back out. My cock was dripping wet, and Niola positioned the head over Michelle's asshole. Michelle wiggled her hips impatiently, and moaned encouragement into Niola's pussy. \n\nI pressed in slightly. Michelle's ass resisted, then relaxed, and my cockhead slipped in a little, before her muscles pushed back. A few seconds later, she relaxed again, and I felt the head pop through her muscular little ring. I pressed again, and the process repeated, with her squeezing then relenting. Her sphincter was acting like a squeegee, scraping her lubricating juices from my length, and piling them up in a frothy donut around it. Michelle's moans were gaining intensity, volume, and pitch, as Niola joined into the duet. I made us a trio, as my balls pressed wetly against Michelle's gushing, gaping pussy, and I groaned my own joy. I could feel Niola's tongue, trying to access Michelle's clit, while occasionally tickling my scrotum. \n\nI had my cock buried balls deep in Michelle's ass. She was emitting a screeching moan, but would not release the grip her lips had on my Niola's clit. Niola was gasping and screaming, cumming repeatedly, plunging her fingers into Michelle's overflowing cunt, while thumbing her clit. I hadn't even started to fuck Michelle yet, but that was about to change. I had never fucked a girl's ass before, but yet another Life list box was getting checked today. \n\nMichelle's ass was unbelievably hot and tight. I pulled back slowly, about halfway, then drove back in. She got louder. I did it again, longer and faster, and she finally lost contact with Niola's pussy. Her head came up, and she screamed. \n\n\"Nnnnnnnnuuuuuhhhhnnnn! Oh godddd! Fuuuuuuuuuuuuuccckk my assss!\" Okay, I know we men are supposed to have trouble reading women, but I think she likes it. I started to fuck her ass hard. The view I had of my thick shaft stretching her asshole was obscenely erotic. Michelle was cumming with a constant scream, pausing only as necessary to breathe. I could feel Niola's tongue trying to lap up the honey that oozed out of Michelle's pussy. I was pounding her ass with everything I had. On one particularly energetic stroke, I slipped out. Niola's hand was on me immediately, but rather than put me back up her friends ass, she guided me back into Michelle's pussy. She was so wet and full of juices that my plunger made nectar squirt out, spray painting Niola's face and neck. \n\nNiola moaned, licked her lips and smiled up at me. \"Fill her cunt, you fucking stud! I want to watch your cock flex while you pump her full of your cum! Do it! Do it! Cum for me baby!\" \n\nLike I said before, I could deny her no request. Truthfully, Michelle's tight ass almost had me there anyway, but Niola's directive of ego boosting obscenities finished the job. I exploded, filling Michelle with so much cum it began to trickle out, dripping onto Niola's face. Niola began to drink from the source, as I felt her lips and tongue on the underside of my shaft. I gave one last shudder and collapsed beside the girls. \n\nI panted, trying to catch my breath, when I saw something that took it away again. \n\nA river of my cum was dribbling out of Michelle's puffy, swollen, gaping cunt. The love of my life, my beautiful Niola, had her face eagerly buried deeply up that cum slicked hole, while she pumped three fingers steadily into Michelle's abused ass. Michelle was silent, but obviously lost in the throes of a huge orgasm. Her abs clenched and relaxed repeatedly, and it seemed as though her entire body was turning red. Sweat coated her skin, her hair was matted, and suddenly, she threw her head back, and let out a final, quivering, croaking screech, before she collapsed as well. \n\nMichelle's collapse pulled her pussy way from Niola's tongue. Niola laid back, gasping herself, and looked at me lazily. A ring of cum froth surrounded her mouth, and some decorated the bridge of her nose, indicating the depth of her plunge. It was the most erotic thing I had ever seen, and I had seen plenty in the last few days. She was scraping the residue into her mouth now. Her eyes finally focused, and she saw me watching her. \n\nShe paused, one cum slick finger still in her mouth, and blushed. Her eyelashes fluttered, and she looked away, embarrassed at being caught acting in such a lascivious manner. \n\nIt only made me love her more, and confirmed my decision to make her my wife. She was the walking, talking, sucking, fucking embodiment of every desire and fantasy I ever had, or expected to have. I fell asleep watching her.\n\nWhen I woke, I was alone, but tucked into the bed lovingly. There was light coming from the kitchen, along with some quiet voices. I followed both. \n\n\"Comment va ton cul, Michelle?\" I asked quietly, as I stopped in front of the fridge. \n\n\"How do you think my ass feels?\" she giggled. \"It has just been violated by your giant man thingy,\" she added, gesturing toward my exhausted dick. \"It's sore, but happy, and looking forward to more. Just not tonight,\" she added. \n\nNiola was sipping her tea, smiling at me. Her eyes fell down to my limp meat, then back up. I was her 'giant man thingy', and she knew it. \n\nFor the next three nights, we kept it up. We would play around in bed, the girls would get it on with each other, and I would finish by fucking Michelle, twice more in the ass / pussy combo. The last night, her ass was too sore, so I had to settle for her pussy only. In addition to her two incredible holes, I had access to a graduate level course on pussy eating, and learned a lot from Michelle. \n\nAs much as it was fun to get access to Michelle's cunt, I wasn't that disappointed when her stay ended. I liked being alone with my darling Niola. I really liked fucking her again, after a week plus of doing Michelle. I enjoyed trying out my newly acquired licking skills, and managed to give Niola some earthshattering orgasms. It was after one of those that Niola bestowed upon me the title of 'honourary lesbian', with a giggle. \n\nAbout a week later, Niola's 'someday' arrived. I had been fingering her ass for several days now. She had been quite vocal in her positive reinforcement. \n\nI was shafting her gushy pussy doggy style, while I had one thumb hooked in her ass. She was grunting, and fucking back against me, pushing her ass up over my thumb deeper. \"Oh god,\" she hissed, \"I need it now! I need your big cock in my ass! Please! Give it to me, please! Michelle said you felt incredible in her ass!\"\n\nI was willing to oblige. I obtained a little excess lubrication from her pussy, and spread it around her little pink rosebud. I placed my cockhead there and eased forward. \n\n\"Take it easy,\" she whispered. \"Michelle's asshole was 'previously experienced'. Mine is not, but I really want it to be. Just be gentle.\" \n\n\"Okay, baby, you are in control.\" I held my position, and let her impale herself. It took the better part of ten minutes. There was a great deal of grunting, panting, puffing. and cursing, but she finally took it all. \n\n\"Oooooo baby! That's one big cock! My ass is totally stuffed! Can you give me a minute baby?\" she asked over her shoulder. ",
        "\"Take all the time you need, honey,\" I nodded. \"You are still in control.\" \n\nA few moments later, she began to rock back and forth a few inches, groaning and hissing. Her eyes were shut tight, and a grimace of pain marred her beautiful face. She started going a bit faster, and a little deeper, as the groans of pain gave way to moans of pleasure. I stayed put, letting her dictate the pace, as I had promised. It wasn't easy. If I thought Michelle's ass was tight, Niola's was much more so. I felt her muscles rippling with each stroke. She finally was ready. \"Okay,\" she purred, \"Fuck me now!\" \n\nEnough said. I grasped her hips, and started to pound her. She stopped moaning, and started shrieking. She came with an abrupt jerk, her head thrown back. She shuddered and twitched, before her arms gave out. Her butt remained held high, and I kept reaming her enthusiastically. Her right hand reached back between her legs, and she started to stimulate her clit. Her shrieks had wound down, but she hadn't. \n\nI was about to fill her ass with cum. \"So good, so full, so close...\" she muttered. I held back the flood as best I could, until she was ready. \"Cumming!\" was all she said, before it hit her. She grunted loudly. \n\nSo did I. I shot a huge load deep into her bowels, while she vibrated through her own climax. Her hips slipped away from me as she melted into the bed, and I crashed down beside her. \n\n\"My.... Ass... Is... Buzzing!\" she whispered between breaths. I laughed. She had demanded it, after all, so how could she complain? \n\nWe settled back into our usual routine. You know - naked all the time, making love two or three times a day, double that on weekends. Just like newlyweds, only without the 'wed' part. We never had a cross word, and couldn't get enough of each other. \n\nI got home one weekend afternoon, to find Niola on the phone. \n\n\"Vous \u00eates enceinte? C'est g\u00e9nial! Combien de semaines?\" I heard her say, and decided to give her some space. If someone was pregnant, that was girl talk, and not my department. I went to the living room, grabbed the remote, and tried to find a movie to watch. \n\nTwenty minutes later, Niola walked in quietly, and sat down next to me. I lifted my arm, and she snuggled warmly against my ribs. She was dressed, but I could still feel the swell of her breasts as they pressed into me. \n\n\"So, baby, who was that?\" I asked. Niola seemed reluctant to answer. I looked over at her again, and she blushed. \"Baby?\" \n\nShe crumbled. \"Funny you should put it that way. That was Michelle...\" she started. \n\nSudden fear gripped me. Whoever she had been talking to was pregnant, and now she tells me that was Michelle. The math wasn't hard. Michelle was pregnant, and being a lesbian, it was unlikely that the father was anyone other than..... Me! Of course! Niola is on the pill, so we don't need to worry, and it never even crossed my mind, that lesbians don't need to use birth control. I had filled her with semen, several times. \n\nNiola saw the look of terror on my face. \"Honey, don't panic. The truth is, both Michelle and I have to confess something to you.\" I paused in my planning of the lesbian / straight wedding, and put my attention back on her. \n\n\"Oh, really? Well, what would that be?\" I asked, confused. I had thought that kids would be a great idea, eventually. The idea that it would happen with the lesbian, former lover of my French teacher, had somehow escaped my realm of possibilities. How could I have been so foolish? \n\nNiola let out her breath in a long, slow blow. \"We kind of used you... Set you up. Michelle and her partner wanted a baby, and I had been so effusive in my love of you, and... Well, it just seemed so logical at the time.\" \n\nHuh? I thought. You did what?<i/> My brain wasn't ready for this. I got up, without saying a word, and started out of the room. \"Honey, please, let me explain!\" she called after me. \n\n\"Just gimme a minute to digest this,\" I replied evenly. I zombie-walked into the bedroom and laid down, curling up in an ironic fetal position. A few minutes later, I noticed Niola in the doorway. She was crying. No, she was sobbing. I knew she was really upset, worried that I was angry. \n\nI wasn't. I was shocked, but not angry. A little flattered, and shocked, but not angry. Okay, proud, flattered and shocked, but still not angry. \n\nI gestured to Niola, and she leapt onto the bed, blubbering apologies. \"I am so sorry! Please don't hate me!....\" She went on for several seconds, before I could get a word in. \n\n\"Niola, honey.... Shhh... Shhh... It's alright. I'm not upset. I don't hate you. I could never hate you. You are my soul mate.\" She was still crying, and gasping, but my words were getting through. \"I think that I understand the idea, and honestly, it's a very heartwarming thought, that your friend wanted me to be the father of her child, simply because of her love for you.\" \n\nThe tears had stopped flowing. She kissed me, a mixture of apology and love transmitted through her soft lips. She was salty from her tears, and I licked her face like a puppy in an effort to change the mood. It worked, as she started to giggle. When I stopped, she looked at me seriously again. \"One more thing,\" she added, slipping back into apology mode. \"We are the Godparents.\" \n\nI laughed, surprising her, and shrugged. It seemed appropriate enough. \"In for a penny, in for a pound,\" I smiled. \n\nSo I was going to be a dad, officially, but I guess I would be known as an 'uncle' by the child. I also supposed that we would have more contact with Michelle, and her partner. That could be awkward. 'Hi, I'm the one who fucked and knocked up your lesbian partner'. Even though it had been planned (by all but the sperm donor), I still had a weird feeling about meeting the 'husband', or partner, or whatever. \n\nThe storm passed, and despite my insistence that I was not angry, Niola was extra attentive for the next few weeks. I was the recipient of several 'good morning blowjobs', which she was adamant were not related to any perceived guilt. Regardless of the reason, waking up to that kind of attention is something that I could easily become addicted to. I did try to reciprocate, but it's a little harder for a man to surprise a woman that way, just due to the mechanics. \n\nAnyway, months went by. I went to my college, and Niola taught at her high school, and we continued our torrid sex life. Niola kept in touch with Michelle and Amanda, her partner, so we were kept informed about the pregnancy. It felt weird, knowing I was a baby daddy, but not having a pregnant wife to deal with. Kind of like having my cake and eating it too, I guess. \n\nMichelle was now almost eight months in. She and Amanda were going to visit us soon, before the baby arrived, have the baby here, and head home after the delivery. Michelle wanted me to be present, in the delivery room, for the birth, an idea that scared the shit out of me, but seemed like the least I could do. \n\nMichelle and Amanda arrived on Saturday afternoon. Niola was home but I was out. When I returned home, I saw the strange car in the driveway, and knew who it had to be. Oh boy, the moment of truth. A thousand questions were about to be answered, and I was, quite frankly, terrified. I took a deep breath, and opened the door. \n\nI could hear Niola in the sun room. As I walked down the hall, I recognized Michelle's voice, and then a third that was unfamiliar. They were all speaking overlapping French at warp speed, and laughing, so I didn't catch much. I would depend on Niola for a recap, if necessary. As I turned into the sun room, the first person I saw was Michelle. \n\nHoly shit, I thought, my eyes landing unintentionally on her breasts, she's huge! Somehow, her tits had inflated, until they were nearly the same size as Niola's incredible F cups. Other than the obvious baby bump, they appeared to be the only change to her body, as her butt didn't appear to have grown any. \n\nI walked over to give Niola a kiss, then did the same for Michelle, although hers' was on the cheek. Michelle then introduced me. \n\n\"This is my spouse, Amanda.\" \n\nHer hair was blonde, cut in a short bob style. Her eyes were blue, and she was quite pretty, if not stunningly so. Below the neck, however, she bore a striking resemblance to someone I knew. Someone close to me. Someone who used to be my French teacher. \n\nWhile slightly taller, and perhaps a few pounds heavier than Niola, they were otherwise virtual twins, especially their 'twins'. \n\nAmanda stood, and stepped forward to hug me. Her big breasts crushed against me, but they felt a bit different than Niola's. Firmer, much more resilient. Still very nice. \n\n\"Merci d'\u00eatre si g\u00e9n\u00e9reux. Merci pour notre fils,\" she said, smiling brightly. \n\nFils? A son? A son! That was new info. \n\nI remained on the periphery of the conversation, letting them do their female thing, talking pregnancy, babies and boobs. A couple of hours later, all talked out, Michelle and Amanda took their leave, heading back to their hotel. As I learned from Niola later, the plan was that they would be moving in with us in about a week, staying until the baby was born. \n\nNiola and I were sitting down to dinner, when I had to ask her a question. \n\n\"Honey, did you notice...\" \n\n\"I know, I know! Amanda looks a lot like me,\" she said, incredulously. \"I had never met her before today. I was even more surprised when she hugged me. Her tits have been done.\" \n\n\"Done? You mean, like a boob job?\" It suddenly made sense, the way her breasts had felt, somehow, different. \n\n\"Yeah, those puppies are augmented. Implant city, \" she replied. She seemed a bit upset, and I thought I knew why. \n\n\"Did you know Michelle felt so strongly about you? I mean, if she had her girlfriend, or partner.... whatever... made up to resemble you, then she must have been a little fixated, don't you think?\"\n\nNiola was staring at me. \"Wow! I hope this doesn't come out sounding sexist, but I wouldn't have expected a man to get that so quickly.\"\n\n\"Now how could that comment be considered sexist,\" I scoffed sarcastically. \n\nShe giggled, finishing her thought. \"What I mean is, you are constantly surprising me, in a pleasant way. That's why I Love You.\" \n\n\"And I Love You, too, baby. I guess it's a compliment, with 'imitation being the sincerest form of flattery', but it's still weird,\" I opined. \n\n\"Tell me about it,\" she laughed. \"You still get the original. I am all yours, baby.\" She leaned over and kissed me. The feel of her lips on mine was delicious. \n\n\"I suddenly find myself with a hankering for something warm... and wet... and soft... and blonde,\" I flirted. \"May I have my dessert, first?\" \n\nNiola looked at me and batted her eyelashes, trying to look innocent. I knew better. Her fork was placed carefully on the table, just before she pushed her chair back, and ran giggling out of the room. I pursued, but not too quickly. She ran past the bedroom door, and took a left turn to make another lap, going through the kitchen. I saw what she was doing, and turned right, into the guest room, prepared to snatch her up when she raced past again. \n\nI heard her coming, laughing like a schoolgirl. As she neared, I reached out. She ran her right breast into my hand, and I gripped her soft globe as my left arm came around her waist. Now that she was caught, her laughter was uncontrollable. I picked her up, over my shoulder again, and ducked into the bedroom. She grabbed the doorframe, stopping my progress. I spanked her ass, and her hands released, trying to protect her firm butt. \n\nThere was an immediate flurry of grasping hands and ravenous lips, as clothing flew in all directions. Niola dropped to her knees, and slurped the head of my cock loudly. I yanked her bra up over her head. She grabbed my ass with both hands, and pulled me into her mouth deeper. We were pawing at each other. \n\nI pulled out of her mouth and lifted her up, pressing her over onto her back. As soon as she hit the mattress, I spread her thighs wide and dove in, licking her pussy with passion. I wanted to taste her, to make her cum... and cum... and cum. My tongue traced her contours, teasing her lips, flicking cat-like across her clit, and dipping repeatedly into the hot depths of her vagina. I used everything I had learned, and a few experimental moves, to full effect. I made her gush, not once, but three times. The neighbours would most certainly have known what was going on, as she narrated at the top of her lungs. She was pretty wrung out after her orgasms, but I wasn't done yet. \n\nI dragged her back up the bed, and entered her. She was breathing heavily, but her eyes were closed, and she wasn't very participative. I like to know that my bed mate is present, so I held in place, barely moving, until her eyes opened, and she smiled. \n\nI smiled back, and kissed her, starting a furious shafting of her slippery snatch. Her arms wrapped around my neck, and her legs gripped at my waist, while I fucked her hard. She purred her enjoyment into my ear. \n\n\"You fuck me so good, baby. I love your big cock filling me up, stretching my pussy so much, making me scream. And I love feeling your cum when you shoot it inside me.\"\n\nI know I needed to trust her, but part of me was worried that she was trying to get pregnant too. That is, until she said the next bit. \n\n\"I am so sorry for tricking you into getting Michelle pregnant. It wasn't fair to you, and I promise never to do anything like that again. I'm glad we are just going to be Godparents. I don't think I could handle one of my own right now.\" \n\nOkay, that doesn't sound like someone trying to get pregnant, so I figured the coast was clear for launch. I was drilling her deep, and she was urging me on. \n\n\"C'mon baby, fill... my fucking...cunt with...your hot cum!\" Niola demanded. \n\nI did as requested, pumping everything I had into her. She cooed and stroked my hair gently, enjoying the warmth of my cum as it squirted deep within her. \n\nI came home one afternoon, about two weeks later, to find Michelle and Amanda on the couch. They had been with us for a week or so, and the house had become baby central. I was feeling distinctly outnumbered by the XX chromosomes, and went to join Niola in the kitchen. As I came around the corner from the sun room into the kitchen, I stopped dead in my tracks. \n\nNiola was wearing a tiny thong bikini, and her firm ass was open for appreciative viewing. I whistled, and she giggled, doing a little bow, and spinning on the spot. The top barely covered her nipples. My cock began to stir. The thought of her in that suit in public, and it woke fully. \n\n\"Wow! That's some suit! Or not, depending on your point of view. For me?\" I asked, my mouth watering. \n\n\"Who else?\" she whispered, and pulled herself up onto the countertop. She wiggled her ass, getting comfortable, and opened her arms to me, beckoning me in for a hug and kiss, an offer I couldn't refuse. \n\nI dropped my jacket on the floor, and stepped into her embrace. We kissed for several minutes, passionately mauling each other, tasting one another's tongues, and moaning our mutual love. Niola began to unbuckle my pants, and tugged my shirt up. \n\n\"Niola, Sweetheart... Our guests are in the living room,\" I protested, already knowing she wouldn't care. \n\n\"I don't care,\" she hissed. \"I want your cock in me, now. Besides, there's only one of them that hasn't seen us fuck, or joined us while we fucked, or been fucked by us, for that matter. Have you forgotten whose baby that is?\"\n\nWhen she's right, she's right. I pulled my shirt off, then worked on my pants, while she tugged at the four strings that separated her from nudity. She then guided me into her hot little pussy, and hooked her ankles together behind my back. Her arms wrapped around my neck, and she pulled me in. Before she kissed me, she said one thing. \n\n\"Make me scream.\"\n\nI started to shaft her firmly, and she started to moan. Her heels were spurring me deeper, and faster, so I dragged her butt a little closer to the edge of the counter, gaining some leverage. When I resumed my rhythm, her moans intensified, and I could feel her breasts jiggling against my chest. I fucked her harder, deeper, and more ravenously, pounding into her. She was getting louder, resting her head on my shoulder. \n\n\"We have... an audience,\" she whispered in my ear, breathlessly. \"Do it, baby. Fuck my... brains out. Give her... something to... watch!\"\n\nI wiggled my hands under her ass, and picked her up, turning to pin her against the doorframe. I braced myself, and fucked her harder than I ever had. Her body was bouncing in my arms with each stroke, and now she was screaming, sounding like a strange, vibrating siren. \n\n\"WOOoooOOOoooOOOoooOHHH!\" she screeched. \n\nShe wasn't heavy, but I hoped my arms wouldn't give out before I made her cum. I was hammering into her furiously, and it had the desired effect. \n\n\"Oh fuck.. Gonna... Cum... Gonna... Cum... Nowwwwwwww!\" she shuddered and jerked, almost slipping out of my arms. I slowed my pace and held her close, keeping myself on the edge. When she had recovered her senses, she unlocked her ankles, I pulled out, and lowered her to her feet. She knelt and looked up at me impatiently. \"Do it!\" \n\nI gripped my well lubricated dick and stroked like a madman. It wasn't long before I started to growl again. Niola's mouth opened wide. \n\nSemen rocketed out. Most of it hit the target, but some missed to the left, marring her cheek. Then her nose, chin and hair took hits, before she sucked me in and swallowed the balance. She released me, and I slumped back against the edge of the counter. I looked over to the sun room. \n\nAmanda was standing there, mouth agape, staring at Niola's nude body and cum slicked face. Niola licked her fingers and stared back. Amanda looked over at me, and her eyes dropped to my wilting cock, then she turned and left the room. \n\nTwo days later, I walked into the living room to find Amanda rubbing a cream onto Michelle's huge, distended belly. Michelle had her head back, eyes closed. She was wearing a soft, cotton bra, and there were dark, wet spots over her nipples. \n\nAmanda saw me watching , and smiled, then gestured me closer. She unhooked the front of Michelle's bra, and let her massive, swollen, breasts spill out. A sticky, slightly yellow fluid leaked from her nipples. Amanda dipped her head, and licked the fluid from Michelle's left breast. \n\n\"C'est d\u00e9licieux. Vous devriez l'essayer.\" she said quietly, before she wrapped her lips around the nipple, sucking gently. She pointed to Michelle's other breast. \n\nI knelt and watched Amanda suckle, as Michelle began to moan softly. She squeezed the fat nipple slightly, and more fluid beaded up, trickling across her huge globe. I was mesmerized. It was so hot, I had to have some. Michelle's eyes were still closed. I leaned closer, and opened up. \n\nIt was warm, very sweet, thick and sticky. I closed my lips around the areola and applied a gentle suction. More fluid flowed into my mouth, and Michelle moaned louder, bringing her hand up to the back of my head. \n\n\"More,\" she purred, and we both increased our suckling appropriately. The flow of fluid increased. Amanda was right - it was delicious. Every few minutes, Michelle would request an increase, and we would feed more vigorously. Her moans increased, and she began to breathe more heavily, obviously enjoying it immensely. Her milk continued to flow freely. Both of us were suckling intensely now, and she was getting very excited. When she came, milk shot into my mouth, forcing me to gulp down the yummy secretions. Finished her orgasm, she tapped the back of my head, indicating that the buffet was closed. \n\nI wiped my chin, and looked up. Niola was watching, and rubbing her clit through her shorts. I went to her, and we both retreated to the bedroom. ",
        "\"That was incredible,\" she said, pulling my clothes off. I kissed her and she tasted the residue on my lips. \"Yummy.\" \n\n\"I never knew breast milk was so good,\" I nodded. \n\n\"Colostrum,\" she corrected. \"She won't produce milk until after she gives birth. This is called colostrum, kind of like emergency rations, until the grocery store opens. Except, these rations are more like dessert.\" \n\n\"Whatever you call it, I like it. Could have spent the day.\" \n\n\"Does that mean, you don't want mine, anymore?\" she pouted, palming her beautiful breasts. \n\n\"Not at all, my love. Bring 'em on!\" I laughed as I laid back on the bed. She leapt on me, and I found myself buried in an avalanche of kisses. My hands were full of soft breast, and firm ass. When there was a lull in the kissing, I looked up. \n\nWe had left the door open again, and had another naked intruder. Amanda leaned against the door, rubbing her crotch. \n\n\"Michelle est endormi, et je suis tellement excit\u00e9e. Puis-je s'il vous pla\u00eet joindre \u00e0 vous?\" she begged. Well, at least she asked nicely. \n\nI looked at Niola. \"Your call.\" \n\nThe words were barely out of my mouth before Amanda was snuggled in between us, and she was barely in bed before we were all over her, hands and lips exploring and caressing her body. I, of course, immediately went for her breasts, inspecting them for evidence of tampering. They did seem to stand up more on her chest than seemed natural, and some vigorous fondling confirmed a somewhat strange consistency. They tasted normal, and her nipples sprang up quite nicely. There was a small scar in her armpit, which confirmed that Niola was, undoubtedly, correct in her initial assessment. \n\nNiola had moved further south, and had begun to nibble Amanda's pussy gently, causing our guest to shiver slightly and moan. \"Oh, oui, l\u00e9cher ma chatte... \" \n\nAmanda wouldn't kiss me, which wasn't a huge surprise after my similar experience with Michelle. What was a surprise was her hand on my cock, stroking me gently, while I sucked her nipples. Niola was now fully engaged in Amanda's cunt, licking, kissing, sucking and probing her rapidly dampening hole. Within minutes she was on the verge, a testament to Niola's lesbian experience of the past. Her hand continued to stroke me, even as her orgasm washed over her. \n\n\"Oh, oui... Oui... Oui... Uhnn... Uhhhhhnnnn!\" she grunted, surprisingly quietly. \n\nNiola came up from between her legs, and Amanda kissed her, much to my consternation. She saw the hand stroking my cock, and softly asked a question. \"Voulez-vous sa queue \u00e0 l'int\u00e9rieur vous? Voulez-vous qu'il vous baiser maintenant, comme il l'a fait Michelle? Il sera doux, si vous avez besoin qu'il soit.\"\n\nAmanda looked up at me, and I looked back. Yes, if you want me to fuck you, like I did to Michelle, I will be gentle with you.\n\nShe closed her eyes and answered. \"Oui, s'il vous pla\u00eet. Baise-moi.\"\n\nI looked over at Niola for a second, and she immediately got my unspoken question. \"Right. Just a sec,\" she said, lunging over to the bedside cabinet, and retrieving one of our backup condoms. She ripped the package open with her teeth, and unrolled the thin membrane down my shaft. \"Not again,\" she added with a wink. She placed my knob at Amanda's opening, and patted my butt. \"She's all yours.\" \n\nI pressed gently. She was plenty wet enough, but virginaly tight, and after only about two inches were in, she asked me to stop. \n\n\"Arr\u00eatez-vous ici pour une minute, s'il vous pla\u00eet. Donnez-moi le temps de se d\u00e9tendre.\" I waited, watching her eyes while she relaxed, and stretched to accommodate me. She looked at me, and nodded. \n\nI pushed deeper, and the process was repeated. A few more pauses, and she was finally able to take all of me. She turned and rattled off a few comments to Niola, who was fingering her own pussy, but she spoke so quickly I didn't catch it. I looked at Niola, who filled in the blanks. \n\n\"She says that yours is only the second cock to be inside her, ever.\" I was a bit surprised at that, but Niola continued. \"She also said something that I am reluctant to tell you about... because I'm sure it will go right to your head... but it has to do with your size.\" She smiled, and kissed me. \"Just remember whose man you are, you fucking stud.\" \n\nAmanda was breathing in little, short, panting breaths, that got sharper as I started to fuck her slowly. She had one hand on my chest, and one on my ass, and she soon had the hang of directing my motions by patting me in the appropriate area. At first, she was mostly telling me to slow down, but about ten minutes in, the hand on my ass began to take over. Her breathing started to reflect more pleasure than pain, and I picked up the pace a little. She began to flush, and came seconds later. She was a quiet cummer, not a screamer, like my Niola. The lack of volume didn't appear to diminish her pleasure, though, as she was growing redder each time she had an orgasm. \n\nThe rubber was going to let me last quite a while, and I kept my pace steady and controlled, so I wouldn't run out of gas before I could cum. It was Niola who pulled me back, suggesting a position change. I think she had some selfish motives, as well, but I was soon back in Amanda's cunt, shafting her from behind. Niola had taken the spot on her back, legs spread wide, for Amanda's tongue to explore. \n\nI was soon pounding my cock into Amanda's vagina, and she was shuddering through another orgasm. Then another, and yet another. I admit, I was getting tired. Niola was sweating and screaming through her third orgasm under Amanda's tongue, who was apparently also a highly qualified lesbian licker. After a few more minutes, I was done. I pulled out and crashed down beside Niola, just about the time she had number four. \n\nShe looked at me, with a dazed expression. She was suffering from post-orgasmic stress, poor dear. She was a puddle of flesh, unable to focus, or speak. She was an orgasm addict. Usually, I was her dealer, but today I had been replaced by Amanda and her superior oral skills. \n\nNiola pushed free of Amanda's attentions, and reached out for me. She literally ripped the condom off my cock, and wearily straddled me. She impaled herself in one stroke, groaning loudly. She was going to get me off, and began to fuck with all the energy she had, while I propped her up. Amanda took a position behind her, providing vertical support, and reaching around to grope her tits as well. \n\nAs the effects of her most recent orgasm waned, Niola gained energy, control and enthusiasm. Before long, she was bouncing feverishly on my cock. The sight of her magnificent breasts jiggling in the hands of another woman, was having its inevitable effect. \n\n\"Niola, my love, I'm gonna fill you up, unless you have another location in mind.\" \n\nAmanda may not speak much English, but she was still pretty observant. She was gesturing to her mouth. \"Dans ma bouche! Je tiens \u00e0 le go\u00fbter.\"\n\nI was pretty surprised, and so was Niola. She shrugged, and lifted off, allowing me to stand beside the bed. Both ladies perched on the bed's edge, mouths open and sexy pink tongues extended. Now that I had them side by side, for comparison, I can say that Amanda's tits were a little fuller, and rode higher, but Niola's breasts were larger overall, and had that 'je ne sais quoi' that tipped the balance. \n\nI had finished my boob window shopping, and felt the cum rising from my balls. I wanked faster, and sprayed both blondes with goo. Amanda tried to catch as much as she could, while Niola just let me spew, knowing she could clean up after. \n\nSpeaking of after...I was done. For the second time , I watched my darling and a lesbian kiss each other, sharing and spreading my cum over each other's faces. My cock softened slightly, but didn't wilt, as the scene played out before me. When the girls had finished cleaning each other, they both went to work on me. Niola peeked up at me. \n\n\"You're sure I can't be a lesbian?\" I asked her. She laughed. \n\n\"No, darling, you can't,\" she purred. \n\nA couple of weeks later, Michelle had the baby. I chickened out, and Niola took my place in the delivery room. In the next few weeks, Amanda and I repeated our tandem breastfeeding routine, several times, when it didn't interfere with the baby's schedule. Michelle was a fountain, spraying milk from her nipples when suitably aroused. I was a little jealous of Amanda when they left for home, knowing she would still be able to nurse alongside my son, who was cute as hell, by the way. But that was my only regret, and was far outweighed by our return to normalcy. \n\nNiola and I were snuggled in bed that night. The house was quiet, and empty, save for us. \n\n\"Are you going to miss your friend, Sweetheart?\" I asked, stroking her hair. \n\n\"Actually, no. No, I won't miss her, because I have missed being alone with you. Now that I have you to myself again, I am fine. I know you will miss her tits, you predictable man.\" I blushed. \"As for me, I've had enough lesbian pussy for quite some time. \n\n\"Me too,\" I smiled, and we both laughed, snuggling deeper in each other's arms. We made love one more time that night, before falling asleep, cuddling like soul mates. I loved her, and she loved me. \n\nAll was right in the world."
    ],
    "authorname": "ilikeithot6308",
    "tags": [
        "breastfeeding",
        "big tits",
        "teacher",
        "student",
        "lesbian",
        "roommate"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/french-exchange-part-deux"
}